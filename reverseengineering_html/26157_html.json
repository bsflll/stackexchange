{
    "title": "How to show KUSER_SHARED_DATA members in decompiled C code?",
    "link": "https://reverseengineering.stackexchange.com/questions/26157/how-to-show-kuser-shared-data-members-in-decompiled-c-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is a sample C code which prints Windows version directly from address\nof\n  <a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/structs/kuser_shared_data/index.htm\" rel=\"nofollow noreferrer\">\n   KUSER_SHARED_DATA\n  </a>\n  . Tested in Windows 10 only. The raw memory address\ndiffer in Windows version but that's not the point.\n </p>\n <pre><code>#include <stdio.h>\n\nint main(void)\n{\n    wprintf(\n        L\"Version: %lu.%lu.%lu\n\",\n        *(unsigned int *)(0x7FFE0000 + 0x026C),\n        *(unsigned int *)(0x7FFE0000 + 0x0270),\n        *(unsigned int *)(0x7FFE0000 + 0x0260)\n    );\n}\n</code></pre>\n <p>\n  Here are the decompiled code:\n </p>\n <p>\n  In GHIDRA:\n </p>\n <pre><code>int main(int _Argc,char **_Argv,char **_Env)\n\n{\n    wprintf(L\"Version: %lu.%lu.%lu\n\",\n        (ulonglong)_DAT_7ffe026c,\n        (ulonglong)_DAT_7ffe0270,\n        (ulonglong)_DAT_7ffe0260);\n  return 0;\n}\n</code></pre>\n <p>\n  In IDA Pro + Hex-Rays:\n </p>\n <pre><code>int __fastcall main()\n{\n    wprintf(L\"Version: %lu.%lu.%lu\n\",\n        MEMORY[0x7FFE026C],\n        MEMORY[0x7FFE0270],\n        MEMORY[0x7FFE0260]);\n  return 0;\n}\n</code></pre>\n <p>\n  My question: In decompiled code, is it possible to show the memory address as\nthe member of KUSER_SHARED_DATA? For example, I want to show\n  <code>\n   MEMORY[0x7FFE0260]\n  </code>\n  as\n  <code>\n   SharedData.NtBuildNumber\n  </code>\n  or something similar to it.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "decompilation",
        "ghidra",
        "hexrays"
    ],
    "user": "Biswapriyo",
    "time": "Oct 22, 2020 at 19:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For IDA/Hex-Rays:\n </p>\n <ol>\n  <li>\n   In the Loaded Type Libraries window (\n   <code>\n    View->Open subviews->Type libraries\n   </code>\n   ), load\n   <code>\n    ntddk_win10\n   </code>\n   (or whatever Windows version you want, back to Windows XP and Windows Server 2003).\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/arxbM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Available Type Libraries\" src=\"https://i.sstatic.net/arxbM.png\"/>\n  </a>\n </p>\n <ol start=\"2\">\n  <li>\n   In the Structures window (\n   <code>\n    View->Open subviews->Structures\n   </code>\n   ), import\n   <code>\n    KUSER_SHARED_DATA\n   </code>\n   . You can simply write the name of the type in the dialog box and press OK, as in the following image:\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/GI14f.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Create structure/union\" src=\"https://i.sstatic.net/GI14f.png\"/>\n  </a>\n </p>\n <ol start=\"3\">\n  <li>\n   Under\n   <code>\n    Edit->Segments->Create segment\n   </code>\n   , create a new segment with that memory range, as in the following image.\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/Oze8s.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Create a new segment\" src=\"https://i.sstatic.net/Oze8s.png\"/>\n  </a>\n </p>\n <ol start=\"4\">\n  <li>\n   At the beginning of the new segment, use\n   <code>\n    Edit->Struct var\n   </code>\n   , and select\n   <code>\n    KUSER_SHARED_DATA\n   </code>\n   .\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/kRCjQ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Choose a structure type\" src=\"https://i.sstatic.net/kRCjQ.png\"/>\n  </a>\n </p>\n <p>\n  That's it. Now the disassembly listing looks like this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/34cSb.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Disassembly\" src=\"https://i.sstatic.net/34cSb.png\"/>\n  </a>\n </p>\n <p>\n  And the decompilation looks like this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/EaRBd.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Decompilation\" src=\"https://i.sstatic.net/EaRBd.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Rolf Rolles",
            "time": "Oct 23, 2020 at 4:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">You could write a script to do all of that automatically if you wanted to. Is it really worth the effort, however? It took less than two minutes to do it. Unless you're doing it very frequently for some reason, I personally don't see the point in investing the effort into writing a script. As for whether there's one command to do all of that, why on earth would there be? What would you propose for the name of that command?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ghidra\n </p>\n <pre><code>addr = toAddr(0x7ffe0000)\ncurrentProgram.memory.createUninitializedBlock(\"KUSER_SHARED_PAGE\",addr,0x1000,0)\ncreateData(addr,getDataTypes(\"KUSER_SHARED_DATA\")[0])\n</code></pre>\n <p>\n  result\n </p>\n <pre><code>undefined8 main(void)\n\n{\n  wprintf((__crt_locale_pointers *)L\"Version: %lu.%lu.%lu\n\",\n          (ulonglong)KUSER_SHARED_DATA_7ffe0000.NtMajorVersion,\n          (ulonglong)KUSER_SHARED_DATA_7ffe0000.NtMinorVersion,\n          (ulonglong)KUSER_SHARED_DATA_7ffe0000.NtBuildNumber);\n  return 0;\n}\n</code></pre>\n <p>\n  <strong>\n   Method 1)\n  </strong>\n </p>\n <p>\n  Use VirtualQuery to get the size\n  \n\n  shown below is a python poc\ncompare the result to (MEMORY_BASIC_INFO *)foo.RegionSize\n </p>\n <pre><code>:\\>cat vq.py\nfrom ctypes import *\nmeminfo =(c_ulong * 0x8)()\nwindll.kernel32.VirtualQuery(0x7ffe0000,byref(meminfo),sizeof(meminfo))\nfor i in meminfo:\n    print (hex(i))\n\n\n:\\>python vq.py\n0x7ffe0000\n0x7ffe0000\n0x2\n0x1000\n0x1000\n0x2\n0x20000\n0x0\n</code></pre>\n <p>\n  <strong>\n   Method 2)\n  </strong>\n </p>\n <p>\n  use windbg !vprot to get the same\n </p>\n <pre><code>:\\>cdb -c \"!vprot 7ffe0000;q\" cdb | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command '!vprot 7ffe0000;q'\nBaseAddress:       7ffe0000\nAllocationBase:    7ffe0000\nAllocationProtect: 00000002  PAGE_READONLY\nRegionSize:        00001000\nState:             00001000  MEM_COMMIT\nProtect:           00000002  PAGE_READONLY\nType:              00020000  MEM_PRIVATE\nquit:\n</code></pre>\n <p>\n  <strong>\n   Method 3)\n  </strong>\n </p>\n <p>\n  use windbg !address to Get a more Verbose Details of the same Address Space\n </p>\n <pre><code>:\\>cdb -c \"!address 7ffe0000;q\" cdb | awk \"/Usage:/,/quit/\"\nUsage:                  Other\nBase Address:           7ffe0000\nEnd Address:            7ffe1000\nRegion Size:            00001000 (   4.000 kB)\nState:                  00001000          MEM_COMMIT\nProtect:                00000002          PAGE_READONLY\nType:                   00020000          MEM_PRIVATE\nAllocation Base:        7ffe0000\nAllocation Protect:     00000002          PAGE_READONLY\nAdditional info:        User Shared Data\n\n\nContent source: 1 (target), length: 1000\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Oct 24, 2020 at 6:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}