{
    "title": "Why does not \"call 12345678\" jump to \"12345678\" address?",
    "link": "https://reverseengineering.stackexchange.com/questions/9458/why-does-not-call-12345678-jump-to-12345678-address",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Simply, why does not\n  <code>\n   call 12345678\n  </code>\n  jump to\n  <code>\n   12345678\n  </code>\n  address?\n  \n\n  Why do I have to use the instruction like this\n </p>\n <pre><code>mov eax, 12345678\ncall eax\n</code></pre>\n <p>\n  More importantly, what does\n  <code>\n   call 12345678\n  </code>\n  exactly do?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "294",
    "tags": [
        "assembly"
    ],
    "user": "FreeMind",
    "time": "Jul 27, 2015 at 7:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Because of call binary encoding. See the details and properties for intel processors at\n </p>\n <p>\n  <a href=\"http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.html\" rel=\"nofollow\">\n   Intel manual\n  </a>\n  at page 3-114 Vol. 2A for Intel architecture.\nIf you are talking about different processor, please state which exactly.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Jul 27, 2015 at 7:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "zetavolt",
                    "text": "<span class=\"comment-copy\">In the latest Intel Manual this page (3-114 Vol. 2A) refers to the <code>CLI</code> instruction documentation, however just a few pages back (3-96 Vol. 2A; Page 575-580) contains a complete treatment of <code>CALL</code> behavior.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   call 12345678\n  </code>\n  pushes the following instruction's return address onto the stack and then jumps to\n  <code>\n   12345678\n  </code>\n  .\n </p>\n <p>\n  It is functionally equivalent to:\n </p>\n <pre><code>mov eax, 12345678\ncall eax\n</code></pre>\n <p>\n  (Though the code above has the side-effect of modifying\n  <code>\n   eax\n  </code>\n  , whereas a simple\n  <code>\n   call 12345678\n  </code>\n  does not modify\n  <code>\n   eax\n  </code>\n  .)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Jul 27, 2015 at 13:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">All variants of call with immediate operands are relative, which may lead to the problem described in the question. The only exception is 9a opcode which is not valid in 64 bit mode.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Yes, but @FreeMind was asking about the instruction (the \"disassembly\"), not the machine code.</span>",
                    "time": null
                }
            ]
        }
    ]
}