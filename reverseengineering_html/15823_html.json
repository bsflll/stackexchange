{
    "title": "How can WinDbg be used to troubleshoot program loading?",
    "link": "https://reverseengineering.stackexchange.com/questions/15823/how-can-windbg-be-used-to-troubleshoot-program-loading",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a stubborn PE file which I cannot get to load. The PE headers seem to be intact and the file even parses fine in several PE tools. I am receiving a \"Invalid Win32 Application\" error when I try to fire it up. In fact, the loader never even starts up because there are no loader flags to be displayed for the process in WinDbg. Something is going wrong between the handoff from Explorer.exe and the load inside the Kernel. ProcMon shows a \"FILE LOCKED WITH ONLY READERS\" status when Explorer.exe tries to\n  <strong>\n   CreateFileMapping\n  </strong>\n  the file.\n </p>\n <p>\n  So thus I've entered Kernel Mode debugging on WinDbg. However, I'm not sure how to configure the debugger to properly troubleshoot this problem. When I press \"g\" and then open the file, it just crashes as normal and I have no log in WinDbg. If I press \"Break\" then I'm paused. I need to somehow break as soon as I double-click the file and then sep through the kernel code.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "pe",
        "windbg",
        "kernel-mode"
    ],
    "user": "the_endian",
    "time": "Jul 14, 2017 at 9:28",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n find the call stack in procmon and set a breakpoint on one of the function possibly a process specific breakpoint to stop breaking too much in hot code paths\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would suggest you to put a breakpoint on\n  <a href=\"https://doxygen.reactos.org/dc/de2/ARM3_2section_8c_source.html#l03369\" rel=\"nofollow noreferrer\">\n   <code>\n    NtCreateSection\n   </code>\n  </a>\n  function which is responsible on validating and mapping the PE image\n  <a href=\"https://www.osronline.com/showthread.cfm?link=156251\" rel=\"nofollow noreferrer\">\n   when called with\n   <code>\n    SEC_IMAGE\n   </code>\n   flag\n  </a>\n  . Hopefully you can track down where it fails by stepping through it.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Jul 14, 2017 at 9:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Are you familiar with KiSystemServiceCopyEnd and KiSystemServiceExit by any chance? I get those but theres absolutely nothing online about them other than in crash dumps and no real info</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@the_endian  I'm not familiar with those, but they don't sound like anything related to image parsing.</span>",
                    "time": null
                },
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Much thanks for your advice. I've finally gotten this thing narrowed down into MiCreateImageFileMap. It passes MiVerifyImageHeader checks (return 0 from that) but MiCreateImageFileMap does some extra checks of its own, which it fails with return code C000007B which is triggering that Invalid Win32 Application error. Going to keep examining this routine and see if I can pinpoint. These are both implemented static inside of NtCreateSection and then inside MmCreateSection.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@the_endian I would suggest comparing the code flow for a good vs. bad binary and see where they diverge.</span>",
                    "time": null
                }
            ]
        }
    ]
}