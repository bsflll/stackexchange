{
    "title": "Is it possible to programmatically search a disassembly for functions missing bounds checks?",
    "link": "https://reverseengineering.stackexchange.com/questions/8221/is-it-possible-to-programmatically-search-a-disassembly-for-functions-missing-bo",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Suppose I was to search a file for dangerous C functions:\n  </strong>\n </p>\n <p>\n  Assuming that we can perform a dissassembly, and that we cannot perform dynamic analysis is it possible to definitively identify a lack of bounds checking for a given buffer in a scriptable way? One reason why this may not be obvious is that jumps near the functions in question may optimized into positions which at first glance are not related to the original function. I also imagine that bounds checks may look different in compiler generated, programmer generated, and optimized forms.\n </p>\n <p>\n  The ultimate goal is to search the binary for exploitable functions, while reducing the need to hand check each function, or run noisy dynamic analysis tools.\n </p>\n <p>\n  I imagine this may come into play:\n  <a href=\"http://en.wikipedia.org/wiki/Bounds-checking_elimination#In_natively_compiled_languages\" rel=\"nofollow\">\n   http://en.wikipedia.org/wiki/Bounds-checking_elimination#In_natively_compiled_languages\n  </a>\n </p>\n <p>\n  <strong>\n   The Way I See the Problem:\n  </strong>\n </p>\n <p>\n  Although I would very much like to be able to verify this with a small python, or BASH script, I can see how this might be very complex. To fully verify that a function is bounds checked, or not, you might need to trace where its inputs are coming from up to their initial source, and insure that there are not any execution paths which circumvent the check. In that case, I imagine that the script in question would have to map the entire flow of execution of the whole program for this work.\n </p>\n <p>\n  I think my best hope is a way to search an IDA Pro database for this kind of relationship.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 3,
    "views": "524",
    "tags": [
        "c",
        "static-analysis"
    ],
    "user": "MrSynAckSter",
    "time": "Feb 12, 2015 at 16:01",
    "comments": [
        {
            "user": "user2823000",
            "text": "<html><body><span class=\"comment-copy\">\n I think that indeed it's too much of a task for scripting. If you have the source code, there are numerous tools for statical analysis of C code. Otherwise I guess you'll end up having to fuzz/taint your binary.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<html><body><span class=\"comment-copy\">\n I'm more interested in figuring out whether it is theoretically possible to even tell for sure for a given function via static analysis.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "<html><body><span class=\"comment-copy\">\n It requires constraint propagation, similar to what IDA's x86 processor module does for switch statements. This is closely related to emulation (a la ida-x86emu) and constant propagation, but fundamentally different in the way the ops are 'executed'. Think symbolic execution.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<html><body><span class=\"comment-copy\">\n That's an interesting direction, I hadn't thought of that way. Not sure how to apply that to my problem.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I remember a presentation by Halvar Flake about this topic. Unfortunately I cannot link it, but a Google search for \"halvar automated bounds check\" will lead you to a Blachat .ppt from 2001.\n </p>\n <p>\n  It contains IDC (IDA Scripting) code to do just that - automated analysis for locations where for example strcpy(), memcpy() and the likes are called.\n </p>\n <p>\n  Maybe this is helpful.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "nonamehere",
            "time": "Feb 16, 2015 at 14:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Indeed, this is a <i>very</i> nice lead. I will read the presentation and see if it answers my question. At any rate, I think you (or I) will need to edit this answer to reflect some iota of the actual answer (without plagiarizing Mr. Flake of course)</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">So I took a look at the presentation, and while it has added some helpful information, it doesn't really address how to fully verify the bounds checking of a given function. It does make some <i>estimates</i> that are <i>local</i> to the function, but doesn't even attempt to make a judgement. What I'm interested in is whether it is even possible to determine one way or the other the bounds-checked-ness of a function.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, to some extent. A great example is from Halvar Flake, called BugScam (last updated in 2003).\n </p>\n <p>\n  Source code for the BugScam IDA plugin:\n  <a href=\"http://sourceforge.net/projects/bugscam/\" rel=\"nofollow\">\n   http://sourceforge.net/projects/bugscam/\n  </a>\n </p>\n <p>\n  This project is also referenced in Chris Eagle's\n  <a href=\"https://books.google.com/books?id=3nPAM3AZ1foC&lpg=PA481&ots=Nl4bITGhEn&dq=bugscam%20ida&pg=PA481#v=onepage&q=bugscam%20ida&f=false\" rel=\"nofollow\">\n   IDA Pro book (p 481)\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Mick",
            "time": "Feb 16, 2015 at 22:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">I'm aware of this, but it's fuzzy to what extent you can be sure :( I'd like to see some more concrete info as to how all this works from a theoretical perspective. If I don't get that kind of answer in the next few days, I may accept one of the answers that refers to Halver's work.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For a short answer to this, what i will do is check for loops than inside these loops will check if there is any memory read write operation, you have to make a generic signature for that, find the variable that is increasing the address where the memory is been copied, and check that for any bound conditions then these conditions can be compared to signature to check whether it apply boundary checka or not.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Alok Saini",
            "time": "Feb 19, 2015 at 9:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}