{
    "title": "Moving xmm0 onto the stack results in a access violation exception",
    "link": "https://reverseengineering.stackexchange.com/questions/13750/moving-xmm0-onto-the-stack-results-in-a-access-violation-exception",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Reversing an application that crashes at the last line of the following instructions:\n </p>\n <pre><code>sub rsp,68\nmov qword ptr ss:[rsp+B0],rcx\nmov qword ptr ss:[rsp+B8],rdx\nmov qword ptr ss:[rsp+C0],r8\nmov qword ptr ss:[rsp+C8],r9\nmovdqa xmmword ptr ss:[rsp+20],xmm0\n</code></pre>\n <p>\n  I'm new to reverse engineering and trying to figure out how it is possible that this is crashing.\n </p>\n <p>\n  The memory protection of rsp+20 should be the same as rsp+B0 for example ...\n </p>\n <p>\n  X64DBG: EXCEPTION_ACCESS_VIOLATION\n </p>\n <p>\n  Edit: all numbers in the instructions are in hex! (68, 20, ...)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "stack",
        "exception"
    ],
    "user": "Whosdatdev",
    "time": "Oct 18, 2016 at 12:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to definition of the assembly command\n  <code>\n   movdqa\n  </code>\n  the memory operand should be aligned by 16 (see\n  <a href=\"http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf\" rel=\"nofollow\">\n   Intel SDM\n  </a>\n  at Vol. 2B 4-63):\n </p>\n <blockquote>\n  <p>\n   When the source or destination operand is a memory operand, the\n  operand must be aligned on a 16\n  (EVEX.128)/32(EVEX.256)/64(EVEX.512)-byte boundary or a\n  general-protection exception (#GP) will be generated. To move integer\n  data to and from unaligned memory locations, use the VMOVDQU\n  instruction.\n  </p>\n </blockquote>\n <p>\n  If 20 is not hexadecimal here, it would probably be the cause.\nIn addition if 20 here is hexadecimal,\n  <code>\n   rsp\n  </code>\n  still may not be aligned as needed.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "w s",
            "time": "Oct 18, 2016 at 13:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Whosdatdev",
                    "text": "<span class=\"comment-copy\">Thanks, that is correct. The 20 is hexdecimal though, which makes it aligned ...</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">The question is what was the initial value of rsp. 0x20 is aligned by 16, but (rsp + 0x20) may be not aligned.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Logically if +b0,b8 etc doesnt raise alignment issues then 0x20 shouldn't too imho</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Logically b0 and b8 should be aligned by 8 and not by 16</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">it's the sub rsp,68 that is causing a stack misalignment.  If you must have an aligned stack and can't predict its value beforehand, you'll need to store rsp somewhere other than on the stack itself, and then \"and rsp,-0x10\" as the next instruction, before any other register stores.</span>",
                    "time": null
                }
            ]
        }
    ]
}