{
    "title": "SPI device sniffing/mirror feature",
    "link": "https://reverseengineering.stackexchange.com/questions/13050/spi-device-sniffing-mirror-feature",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an an embedded Linux ARM board, where an application opens the\n  <code>\n   /dev/spidev1.0\n  </code>\n  device and constantly talks through with another MCU.\nNow, if I I try to look at what exchanges (that's what I'd need), doing\na hexdump\n  <code>\n   /dev/spidev1.0\n  </code>\n  shows something in the beginning but causes the application to crash. The app is very sensitive and I think it crashes because the app uses and it can't be used for viewing simultaneously.\n </p>\n <p>\n  Would there be a way to create an alias, or something like a mirror of this device if I write some extra code/driver? Or is there no chance for me to sniff the traffic like that (in software) ?\n </p>\n <p>\n  Rewrote:\n </p>\n <pre><code>int ioctl(int fd, unsigned long request, struct spi_ioc_transfer *xfer)\n</code></pre>\n <p>\n  But,\n  <code>\n   gcc\n  </code>\n  output the following error:\n </p>\n <pre><code>myioctl.c:6:5: error: conflicting types for ‘ioctl’ In file included from myioctl.c:1:0: /usr/lib/gcc-cross/arm-linux-gnueabi/4.7/../../../../arm-linux-gnueabi/include/s‌​ys/ioctl.h:41:12: note: previous declaration of ‘ioctl’ was here\n</code></pre>\n <p>\n  Any help how the original definition:\n </p>\n <pre><code>/* Perform the I/O control operation specified by REQUEST on FD.\n   One argument may follow; its presence and type depend on REQUEST.\n   Return value depends on REQUEST.  Usually -1 indicates error.  */\n\nextern int ioctl (int __fd, unsigned long int __request, ...) __THROW;\n</code></pre>\n <p>\n  could be overridden.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "581",
    "tags": [
        "spi"
    ],
    "user": "amgnet",
    "time": "Jul 19, 2016 at 13:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If this Linux distribution does support LD_PRELOAD you can easily use this feature to override opening/closing/reading/writing/ioctl-ing  functions to this specific device.\nSee here for very basic tutorial:\n  <a href=\"http://www.catonmat.net/blog/simple-ld-preload-tutorial/\" rel=\"nofollow\">\n   http://www.catonmat.net/blog/simple-ld-preload-tutorial/\n  </a>\n </p>\n <p>\n  This will not require writing driver and pretty usable approach.\nIN addition you can try to use\n  <a href=\"http://www.thegeekstuff.com/2011/11/strace-examples/\" rel=\"nofollow\">\n   strace\n  </a>\n  utility to trace all IO system calls which will obviously include the accesses to your device.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Jul 17, 2016 at 6:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "amgnet",
                    "text": "<span class=\"comment-copy\">Thanks! I have been using strace, however: The app is relying heavily on IPC communications and it is sensitive to debugging by attaching to the process. So by attaching directly with strace -p, it crashes in a while. While if I stop it and start it with strace, it relies on an IPC channel hookup which doesn't work properly if it is just started by hand.  Many thanks for the LD_PRELOAD. Is it also possible to display variables? What I would really need is to printf some vars. I read this too beforehand. <a href=\"http://www.codeproject.com/Articles/33340/Code-Injection-into-Running-Linux-Application\" rel=\"nofollow noreferrer\">codeproject.com/Articles/33340/…</a></span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Using LD_PRELOAD requires you to write .so library which intercepts specific calls to library functions (read/write/open and probably ioctl in your case). You definitely can call printf like functions inside your implementation.</span>",
                    "time": null
                },
                {
                    "user": "amgnet",
                    "text": "<span class=\"comment-copy\">Just a little bit more help on overriding the ioctl call in a .so. The definition in the ioctl.h is  extern int ioctl (int __fd, unsigned long int __request, ...) __THROW;  So there is that optional parameter, which is the one called to actually receive or send data. Rewrote: int ioctl(int fd, unsigned long request, struct spi_ioc_transfer *xfer), gcc says: myioctl.c:6:5: error: conflicting types for ‘ioctl’ In file included from myioctl.c:1:0: /usr/lib/gcc-cross/arm-linux-gnueabi/4.7/../../../../arm-linux-gnueabi/include/sys/ioctl.h:41:12: note: previous declaration of ‘ioctl’ was here</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I'm not pretty sure that I understand the question, but I found the example that will probably suit your needs: <a href=\"https://github.com/poliva/ldpreloadhook\" rel=\"nofollow noreferrer\">github.com/poliva/ldpreloadhook</a></span>",
                    "time": null
                }
            ]
        }
    ]
}