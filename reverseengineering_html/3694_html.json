{
    "title": "Why the API GetMnem can not deal with instructions like \"stosd\", \"movsd\" in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/3694/why-the-api-getmnem-can-not-deal-with-instructions-like-stosd-movsd-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So basically I use a IDC script to dump the instructions one by one using IDA Pro 6.1, windows 32 bit. PE file format\n </p>\n <p>\n  I use try to dump one opcode instructions like\n </p>\n <pre><code>stosd\nstosb\nstosq\nmovsd\n</code></pre>\n <p>\n  in this way:\n </p>\n <pre><code>for (addr = funcStart; addr != BADADDR; addr = NextHead(addr, funcEnd)) {\n ......\nauto code;\nline = GetDisasm(addr);\nmnem = GetMnem(addr);\n.......\nif (strstr(line, mnem) != 0) {\n        mnem = line;\n}\nline = form(\"%-8s\", mnem);\n</code></pre>\n <p>\n  But to my surprise, when meets one opcode instructions like those,\n  <strong>\n   mnem\n  </strong>\n  get things like\n </p>\n <pre><code>stos\nstos\nstos\nmovs\nmovs\nmovs\n</code></pre>\n <p>\n  By checking the directly dumped asm file ** File->Produce File->Create ASM File...**, I find those error instructions should be\n </p>\n <pre><code>stosd\nstosd\nstosd\nmovsd\nmovsd\nmovsd\n</code></pre>\n <p>\n  Which means the results API GetMnem generated is wrong...\n </p>\n <p>\n  Could anyone give me some help? THank you!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "636",
    "tags": [
        "ida"
    ],
    "user": "lllllllllllll",
    "time": "Feb 17, 2014 at 15:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you take a look at the specific opcodes for those instructions, they are the same.\nTo be more precise, \"stos m8\" and stob have the same opcode (0xAA) as do \"STOS m16\" , \"STOS m32\", \"STOSW\" and \"STOSD\" (0xAB). To quote the manual:\n </p>\n <blockquote>\n  <p>\n   At the assembly-code level, two forms of this instruction are allowed: the \"explicit-operands\" form and the \"no-operands\" form. The explicit-operands form (specified with the STOS mnemonic) allows the destination operand to be specified explicitly. Here, the destination operand should be a symbol that indicates the size and location of the destination value. The source operand is then automatically selected to match the size of the destination operand (the AL register for byte operands, AX for word operands, and EAX for doubleword operands). This explicit-operands form is provided to allow documentation; however, note that the documentation provided by this form can be misleading. That is, the destination operand symbol must specify the correct type (size) of the operand (byte, word, or doubleword), but it does not have to specify the correct location. The location is always specified by the ES:(E)DI registers, which must be loaded correctly before the store string instruction is executed.\n  </p>\n </blockquote>\n <p>\n  And from the\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/274.shtml\">\n   GetMnem\n  </a>\n  documentation:\n </p>\n <blockquote>\n  <p>\n   note: this function may not return exactly the same mnemonics\n  as you see on the screen.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "7",
            "user": "0xea",
            "time": "Feb 17, 2014 at 10:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}