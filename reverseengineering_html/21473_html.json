{
    "title": "How to inject some code to ARM .so files permanently?",
    "link": "https://reverseengineering.stackexchange.com/questions/21473/how-to-inject-some-code-to-arm-so-files-permanently",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to figure out how to solve the following. I have two ARM .SO libraries (32 bit and 64 bit) with the same functions. There is a method which returns const char* , it looks like this in ARM32:\n </p>\n <pre><code>.text:0006F264                 PUSH            {LR}\n.text:0006F266                 SUB             SP, SP, #0xC\n.text:0006F268                 STR             R0, [SP,#0x10+var_C]\n.text:0006F26A                 LDR             R3, =(dword_9A030 - 0x6F270)\n.text:0006F26C                 ADD             R3, PC  ; dword_9A030\n.text:0006F26E                 LDR.W           R3, [R3,#(dword_9A250 - 0x9A030)]\n.text:0006F272                 LDR             R0, [SP,#0x10+var_C]\n.text:0006F274                 BLX             R3\n.text:0006F276                 MOV             R3, R0\n.text:0006F278                 NOP\n.text:0006F27A                 MOV             R0, R3\n.text:0006F27C                 ADD             SP, SP, #0xC\n.text:0006F27E                 LDR.W           PC, [SP+4+var_4],#4\n</code></pre>\n <p>\n  And here in ARM64:\n </p>\n <pre><code>.text:0000000000079CAC                 SUB             SP, SP, #0x20\n.text:0000000000079CB0                 STR             X30, [SP,#0x20+var_20]\n.text:0000000000079CB4                 STR             X0, [SP,#0x20+var_8]\n.text:0000000000079CB8                 ADRP            X0, #dword_DE080@PAGE\n.text:0000000000079CBC                 ADD             X0, X0, #dword_DE080@PAGEOFF\n.text:0000000000079CC0                 LDR             X1, [X0,#(qword_DE4C0 - 0xDE080)]\n.text:0000000000079CC4                 LDR             X0, [SP,#0x20+var_8]\n.text:0000000000079CC8                 BLR             X1\n.text:0000000000079CCC                 NOP\n.text:0000000000079CD0                 LDR             X30, [SP,#0x20+var_20]\n.text:0000000000079CD4                 ADD             SP, SP, #0x20\n.text:0000000000079CD8                 RET\n</code></pre>\n <p>\n  This is the ASM code of a function\n </p>\n <pre><code>const char* GetStatus ( const DetailsHandle obj )\n</code></pre>\n <p>\n  This function can return one of 3 string values \"abcd\", \"kowewqzb\", or \"jvbrnbfghert\" (as char*). I want it to return always \"kowewqzb\" regardless of the call happening within this function, which leads to an entire bunch of dynamically loaded functions. So how could I:\n </p>\n <p>\n  1) write the code for making it always return the address of \"kowewqzb\" (which needs to be put somewhere into memory first) and don't do any other calls (so basically the entire instruction set besides of SP manipulations could be replaced with other instructions\n </p>\n <p>\n  2) if there is not enough space for making it work directly there, how could I inject some new code without destroying existing code, are there any suitable places for that in the .SO library? E.g. putting BL to some unused areas (how to get them?) and having there further code pieces.\n </p>\n <p>\n  Ideally if this could be outlined for both ARM32 and ARM64 I'd be more than happy. Huge thanks in advance!!!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "742",
    "tags": [
        "arm",
        "injection"
    ],
    "user": "ARMResearcher",
    "time": "Jun 12, 2019 at 20:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As I understand, you want to replace the function with code such that it returns a pointer to the ASCII string \"kowewqzb\".\n </p>\n <p>\n  Since the function in question is quite long you have sufficient space to write an inline patch both for ARM32 and ARM64.\n </p>\n <p>\n  For\n  <strong>\n   ARM32\n  </strong>\n  , you can use the following piece of code\n </p>\n <pre><code>.global main\n.text\n.thumb_func\n\nmain:\nadr r0, str\nbx lr\n\nstr:\n.asciz \"kowewqzb\"\n</code></pre>\n <p>\n  Note that this is 16-bit Thumb code instead of 32-bit ARM as even the disassembly you posted uses Thumb instructions. After assembling and\n  <code>\n   objdump\n  </code>\n  this yields\n </p>\n <pre><code>$ arm-linux-gnueabi-objdump -d arm32.o\n\narm32.o:     file format elf32-littlearm\n\n\nDisassembly of section .text:\n\n00000000 <main>:\n   0:   a000        add r0, pc, #0  ; (adr r0, 4 <str>)\n   2:   4770        bx  lr\n\n00000004 <str>:\n   4:   65776f6b    .word   0x65776f6b\n   8:   627a7177    .word   0x627a7177\n</code></pre>\n <p>\n  For\n  <strong>\n   ARM64\n  </strong>\n  ,\n </p>\n <pre><code>.global main\n.text    \nmain:\nadr x0, str\nret\n\nstr:\n.asciz \"kowewqzb\"\n</code></pre>\n <p>\n  which yields\n </p>\n <pre><code>$ aarch64-linux-gnu-objdump -d aarch64.o\n\naarch64.o:     file format elf64-littleaarch64\n\n\nDisassembly of section .text:\n\n0000000000000000 <main>:\n   0:   10000040        adr     x0, 8 <str>\n   4:   d65f03c0        ret\n\n0000000000000008 <str>:\n   8:   65776f6b        .word   0x65776f6b\n   c:   627a7177        .word   0x627a7177\n</code></pre>\n <p>\n  And finally, be sure to add a zero byte at the end to make it a proper null terminated ASCII string.\n </p>\n <hr/>\n <p>\n  <strong>\n   EDIT:\n  </strong>\n </p>\n <p>\n  As said below in the comments you\n  <strong>\n   do not need to edit\n  </strong>\n  <code>\n   .rodata\n  </code>\n  or any other section in the binary. The string is included as a part of the code bytes with which you are going to overwrite the\n  <code>\n   GetStatus\n  </code>\n  function.\n </p>\n <p>\n  For example, for ARM 32,\n </p>\n <pre><code>main:\nadr r0, str\nbx lr\n\nstr:\n.asciz \"kowewqzb\"\n</code></pre>\n <p>\n  The\n  <code>\n   adr r0, str\n  </code>\n  instruction loads the address of string which is immediately located after it. The\n  <code>\n   adr\n  </code>\n  instruction is actually a pseudo-instruction and  assembles to\n  <code>\n   add r0, pc, #0\n  </code>\n  . It calculates the address of the string by adding\n  <code>\n   0\n  </code>\n  to the current Program Counter (\n  <code>\n   PC\n  </code>\n  ). In ARM, the\n  <code>\n   PC\n  </code>\n  always points to two instructions ahead of the currently executing instruction. That's why we add\n  <code>\n   0\n  </code>\n  since it already points to\n  <code>\n   str\n  </code>\n  when executing the\n  <code>\n   adr r0, str\n  </code>\n  instruction.\n </p>\n <p>\n  Obtaining the address of the string this way is called\n  <code>\n   PC\n  </code>\n  relative addressing. This makes it possible to avoid hard coding the address of the string in the patched code.\n </p>\n <p>\n  You can use this\n  <a href=\"https://azm.azerialabs.com/\" rel=\"nofollow noreferrer\">\n   online arm assembler\n  </a>\n  to see the bytes corresponding to the instructions.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/8aZCW.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/8aZCW.png\"/>\n  </a>\n </p>\n <p>\n  You need to overwrite the function with the bytes shown on the left panel. No other modifications are necessary.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xec",
            "time": "Jun 14, 2019 at 6:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ARMResearcher",
                    "text": "<span class=\"comment-copy\">Many thanks for your reply! But the problem here is that there is no predefined \"kowewqzb\" string and I need to modify an existing .so file. What would you recommend? Just modify any unimportant string there to become this string and set the pointer to it? Are there any more elegant solutions? E.g. by creating this string on the fly and returning it? Thank you! P.S. Obviously I don't have an access to the source code, just using IDA Pro on it.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@ARMResearcher The string is included in the assembly code itself (<code>str</code>). It uses <code>PC</code> relative addressing to access it. You just have to overwrite function with the assembled bytes  (like <code>a0 00 47 70 65 77 6f 6b 62 7a 71 77</code> for ARM32).</span>",
                    "time": null
                },
                {
                    "user": "ARMResearcher",
                    "text": "<span class=\"comment-copy\">I have now modified a string in a .rodata section, changing to the string I wanted (it was just some kind of an informational text, which I can safely ignore for my purposes), now I put in IDA Pro the following code for ARM32 thumb:      LDR    r0, =0x0008BD4C;     BX     lr  Is it correct or do I need to add: ADD             R0, PC  before leaving the function? I am not sure if I need to add the PC value here. Thank you!!!</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@ARMResearcher You cannot hardcode the address like that. It depends on where the .so will be loaded.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@ARMResearcher Also you are not getting the point of my answer. You don't have to edit <code>.rodata</code> or any other section. The string is included in the patched bytes after the  <code>adr r0, str; bx lr</code> instructions.</span>",
                    "time": null
                }
            ]
        }
    ]
}