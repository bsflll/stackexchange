{
    "title": "Application only Crashes on CPU with SHA extension",
    "link": "https://reverseengineering.stackexchange.com/questions/25893/application-only-crashes-on-cpu-with-sha-extension",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have an application that only crashes if CPU has SHA extensions. After some investigation find a hashing routine that only occurs if CPU has SHA extensions.\n </p>\n <p>\n  I'm trying to confirm if issue is with input data or a bug in the application, original source code is not available. If a possible bug in the application trying to think what a possible original C code might look like that would generate this type of crash.\n </p>\n <p>\n  The routine has the following disassembly:\n </p>\n <pre><code>X86_64_SHAEXT_SHA1Transform proc near   ; DATA XREF: X86_64_EnableCPUFeatures+14E↑o\n\narg_0           = qword ptr  8\narg_8           = qword ptr  10h\n\n                mov     [rsp+arg_0], rdi\n                mov     [rsp+arg_8], rsi\n                mov     rdi, rcx\n                mov     rsi, rdx\n                mov     rdx, r8\n                mov     rax, rsp\n                lea     rsp, [rsp-48h]\n                movaps  xmmword ptr [rax-48h], xmm6\n                movaps  xmmword ptr [rax-38h], xmm7\n                movaps  xmmword ptr [rax-28h], xmm8\n                movaps  xmmword ptr [rax-18h], xmm9\n                movdqu  xmm0, xmmword ptr [rdi]\n                movd    xmm1, dword ptr [rdi+10h]\n                movdqa  xmm3, cs:xmmword_7FFE8439F4A0\n                movdqu  xmm4, xmmword ptr [rsi]\n                pshufd  xmm0, xmm0, 1Bh\n                movdqu  xmm5, xmmword ptr [rsi+10h]\n                pshufd  xmm1, xmm1, 1Bh\n                movdqu  xmm6, xmmword ptr [rsi+20h]\n                pshufb  xmm4, xmm3\n                movdqu  xmm7, xmmword ptr [rsi+30h]\n                pshufb  xmm5, xmm3\n                pshufb  xmm6, xmm3\n                movdqa  xmm9, xmm1\n                pshufb  xmm7, xmm3\n                jmp     loc_7FFE8439F940\n; ---------------------------------------------------------------------------\n                align 20h\n\nloc_7FFE8439F940:                       ; CODE XREF: X86_64_SHAEXT_SHA1Transform+74↑j\n                                        ; X86_64_SHAEXT_SHA1Transform+28A↓j\n                dec     rdx\n                lea     rax, [rsi+40h]\n                paddd   xmm1, xmm4\n                cmovnz  rsi, rax\n                movdqa  xmm8, xmm0\n                sha1msg1 xmm4, xmm5\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 0\n                sha1nexte xmm2, xmm5\n                pxor    xmm4, xmm6\n                sha1msg1 xmm5, xmm6\n                sha1msg2 xmm4, xmm7\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 0\n                sha1nexte xmm1, xmm6\n                pxor    xmm5, xmm7\n                sha1msg2 xmm5, xmm4\n                sha1msg1 xmm6, xmm7\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 0\n                sha1nexte xmm2, xmm7\n                pxor    xmm6, xmm4\n                sha1msg1 xmm7, xmm4\n                sha1msg2 xmm6, xmm5\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 0\n                sha1nexte xmm1, xmm4\n                pxor    xmm7, xmm5\n                sha1msg2 xmm7, xmm6\n                sha1msg1 xmm4, xmm5\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 0\n                sha1nexte xmm2, xmm5\n                pxor    xmm4, xmm6\n                sha1msg1 xmm5, xmm6\n                sha1msg2 xmm4, xmm7\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 1\n                sha1nexte xmm1, xmm6\n                pxor    xmm5, xmm7\n                sha1msg2 xmm5, xmm4\n                sha1msg1 xmm6, xmm7\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 1\n                sha1nexte xmm2, xmm7\n                pxor    xmm6, xmm4\n                sha1msg1 xmm7, xmm4\n                sha1msg2 xmm6, xmm5\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 1\n                sha1nexte xmm1, xmm4\n                pxor    xmm7, xmm5\n                sha1msg2 xmm7, xmm6\n                sha1msg1 xmm4, xmm5\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 1\n                sha1nexte xmm2, xmm5\n                pxor    xmm4, xmm6\n                sha1msg1 xmm5, xmm6\n                sha1msg2 xmm4, xmm7\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 1\n                sha1nexte xmm1, xmm6\n                pxor    xmm5, xmm7\n                sha1msg2 xmm5, xmm4\n                sha1msg1 xmm6, xmm7\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 2\n                sha1nexte xmm2, xmm7\n                pxor    xmm6, xmm4\n                sha1msg1 xmm7, xmm4\n                sha1msg2 xmm6, xmm5\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 2\n                sha1nexte xmm1, xmm4\n                pxor    xmm7, xmm5\n                sha1msg2 xmm7, xmm6\n                sha1msg1 xmm4, xmm5\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 2\n                sha1nexte xmm2, xmm5\n                pxor    xmm4, xmm6\n                sha1msg1 xmm5, xmm6\n                sha1msg2 xmm4, xmm7\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 2\n                sha1nexte xmm1, xmm6\n                pxor    xmm5, xmm7\n                sha1msg2 xmm5, xmm4\n                sha1msg1 xmm6, xmm7\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 2\n                sha1nexte xmm2, xmm7\n                pxor    xmm6, xmm4\n                sha1msg1 xmm7, xmm4\n                sha1msg2 xmm6, xmm5\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 3\n                sha1nexte xmm1, xmm4\n                pxor    xmm7, xmm5\n                sha1msg2 xmm7, xmm6\n                movdqu  xmm4, xmmword ptr [rsi]\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 3\n                sha1nexte xmm2, xmm5\n                movdqu  xmm5, xmmword ptr [rsi+10h]\n                pshufb  xmm4, xmm3\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 3\n                sha1nexte xmm1, xmm6\n                movdqu  xmm6, xmmword ptr [rsi+20h]\n                pshufb  xmm5, xmm3\n                movdqa  xmm2, xmm0\n                sha1rnds4 xmm0, xmm1, 3\n                sha1nexte xmm2, xmm7\n                movdqu  xmm7, xmmword ptr [rsi+30h]\n                pshufb  xmm6, xmm3\n                movdqa  xmm1, xmm0\n                sha1rnds4 xmm0, xmm2, 3\n                sha1nexte xmm1, xmm9\n                pshufb  xmm7, xmm3\n                paddd   xmm0, xmm8\n                movdqa  xmm9, xmm1\n                jnz     loc_7FFE8439F940\n                pshufd  xmm0, xmm0, 1Bh\n                pshufd  xmm1, xmm1, 1Bh\n                movdqu  xmmword ptr [rdi], xmm0\n                movd    dword ptr [rdi+10h], xmm1\n                movaps  xmm6, xmmword ptr [rax-48h]\n                movaps  xmm7, xmmword ptr [rax-38h]\n                movaps  xmm8, xmmword ptr [rax-28h]\n                movaps  xmm9, xmmword ptr [rax-18h]\n                mov     rsp, rax\n                mov     rdi, [rsp+arg_0]\n                mov     rsi, [rsp+arg_8]\n                retn\nX86_64_SHAEXT_SHA1Transform endp\n</code></pre>\n <p>\n  Function is called like this:\n </p>\n <pre><code>    00007ffe`8437223d ff15ade82100    call    qword ptr [crypto!g_pSHA1Transform (00007ffe`84590af0)] ds:00007ffe`84590af0={crypto!X86_64_SHAEXT_SHA1Transform (00007ffe`8439f8c0)}\n00007ffe`84372243 4803ee          add     rbp,rsi\n</code></pre>\n <p>\n  When function enters, correct return address is on stack:\n </p>\n <pre><code>00007ffe`8439f8c0 48897c2408      mov     qword ptr [rsp+8],rdi ss:00000000`023fb6d0=00008bca8073ce32\n0:000> dd @rsp\n00000000`023fb6c8  84372243 00007ffe 8073ce32 00008bca <- return address on stack\n00000000`023fb6d8  47474747 00000000 00000004 00000000\n00000000`023fb6e8  00000060 00000000 00000005 00000000\n00000000`023fb6f8  8435e9af 00007ffe 00000078 00000000\n00000000`023fb708  00000000 00000000 023fb800 00000000\n00000000`023fb718  00000060 00000000 00000000 00000000\n00000000`023fb728  00000000 00000000 00000000 00000000\n00000000`023fb738  00000000 00000000 00000000 00000000\n</code></pre>\n <p>\n  Here return address is trashed:\n </p>\n <pre><code>00007ffe`8439f8c0 48897c2408       mov     qword ptr [rsp+8], rdi\n00007ffe`8439f8c5 4889742410       mov     qword ptr [rsp+10h], rsi\n00007ffe`8439f8ca 4889cf           mov     rdi, rcx\n00007ffe`8439f8cd 4889d6           mov     rsi, rdx\n00007ffe`8439f8d0 4c89c2           mov     rdx, r8\n00007ffe`8439f8d3 4889e0           mov     rax, rsp  \n00007ffe`8439f8d6 488d6424b8       lea     rsp, [rsp-48h] <- Trashes return address on stack\n</code></pre>\n <p>\n  AFter this executes, return address gone :\n </p>\n <pre><code>0:000> dd @rsp\n00000000`023fb680  47474747 47474747 00000000 47474747\n</code></pre>\n <p>\n  When retn executes it's still broken, 0x548ec86043f333c9 doesn't point to any valid memory.\n </p>\n <pre><code>0:000> dd @rsp\n00000000`023fb980  43f333c9 548ec860 240b3e9b 8cfc35f9 <- Not a valid memory location on stack\n</code></pre>\n <p>\n  It seems the intention is rsp is backed up in rax, and restored at end of function:\n </p>\n <pre><code>mov     rax, rsp\nlea     rsp, [rsp-48h]\n; <processing code>\nmov     rsp, rax\nmov     rdi, qword ptr [rsp+8]\nmov     rsi, qword ptr [rsp+10h]\nret     \n</code></pre>\n <p>\n  However rax is changed during function:\n </p>\n <pre><code>lea     rax, [rsi+40h]\n</code></pre>\n <p>\n  If rax hadn't changed the return address would still be correct.\nIs there a scenario when this code could have actually worked?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "107",
    "tags": [
        "c",
        "amd64"
    ],
    "user": "chentiangemalc",
    "time": "Sep 15, 2020 at 15:21",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n does\n <code>\n  rsp\n </code>\n get its original value after\n <code>\n  mov  rsp, rax\n </code>\n near the end?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "chentiangemalc",
            "text": "<html><body><span class=\"comment-copy\">\n i'm checking it instruction by instruction, i can see now that must be the intention to restore it\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The code is buggy.\n  <code>\n   rax\n  </code>\n  is used to store the original value of\n  <code>\n   rsp\n  </code>\n  and restore it at exit, but it’s also used as a temporary register in the loop in the middle of the function.\n </p>\n <p>\n  I suspect that this function was written manually in assembly but not actually tested on real hardware so the bug went unnoticed or, possibly, modified after initial testing and someone missed the fact that\n  <code>\n   rax\n  </code>\n  is used for two different purposes.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 15, 2020 at 22:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}