{
    "title": "Insert a function call in an ELF executable",
    "link": "https://reverseengineering.stackexchange.com/questions/10928/insert-a-function-call-in-an-elf-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to patch an ELF executable to insert a function call (the function\n  <code>\n   s2e_rawmon_loadmodule\n  </code>\n  and its dependencies are to be linked statically, preferably) at the beginning.\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/a/192\">\n   This answer\n  </a>\n  seems to have a nice set of pointers. If I have understood correctly, dynamic instrumentation using PIN/Valgrind/DynamoRIO alters the address space. The addresses of the subsequent instructions get changed which I don't want.\n </p>\n <p>\n  For static instrumentation,\n  <a href=\"http://www.eresi-project.org/\" rel=\"nofollow noreferrer\">\n   ERESI project\n  </a>\n  could have been useful. But, it looks like the project has been abandoned for long. I am not being able to build the tool on Ubuntu 14.04 due to compilation issues.\n </p>\n <p>\n  Can anybody help me out with some workaround?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "elf",
        "patching",
        "instrumentation"
    ],
    "user": "sherlock",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "user2823000",
            "text": "<html><body><span class=\"comment-copy\">\n I don't understand if the function you want to call is already in the binary or not, and/or if you want to modify just one binary or to design a generic way to do it. I'd say you could just create a new section manually, drop your code in it (and the first few instructions of OEP), and put a JMP at the OEP.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n would you post the link to your compilation issues ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n OK, I built it on ubuntu 14.04. The only issue I encountered was usage of word __unbounded in entry.c which ( word __unbounded) can be freely removed without any problem.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n @ws Yes, it works fine with __unbounded deleted. But, does that affect the functionality anyway?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n @Dillinur No, the code does not reside in the binary.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems that you're trying to run some code in the context of the binary before anything meaningful happens.\n </p>\n <p>\n  You should read some resources about ELF infection, for example on\n  <a href=\"http://vxheaven.org/lib/vrn00.html\" rel=\"nofollow\">\n   vxheavens\n  </a>\n  or\n  <a href=\"http://www.hackercurriculum.org/elf\" rel=\"nofollow\">\n   here\n  </a>\n  .\n </p>\n <p>\n  But since you're trying to\n  <em>\n   inject\n  </em>\n  /\n  <em>\n   execute\n  </em>\n  <code>\n   s2e_rawmon_loadmodule\n  </code>\n  from\n  <a href=\"https://github.com/dslab-epfl/s2e/blob/master/docs/Plugins/RawMonitor.rst\" rel=\"nofollow\">\n   s2e\n  </a>\n  , maybe you should just use a debugger instead, because I'm quite sure that this is not how it's supposed to be used.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "jvoisin",
            "time": "Sep 22, 2015 at 23:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">How come a debugger help me in injecting a function while the target binary is running on a Debian guest inside s2e framework? Of course, <code>s2e_rawmon_loadmodule</code> is supposed to be used while source is available. In my case, source is missing, only binary is assumed to be present.</span>",
                    "time": null
                },
                {
                    "user": "jvoisin",
                    "text": "<span class=\"comment-copy\">Because you didn't mentioned that the software was running on a host inside the s2e framework ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}