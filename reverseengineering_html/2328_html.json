{
    "title": "What is this obfuscation method called?",
    "link": "https://reverseengineering.stackexchange.com/questions/2328/what-is-this-obfuscation-method-called",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have recently seen the following code obfuscation method:\n </p>\n <pre><code>...\njump loc_1234\n;-------------------------\n         Bunch of junk\n;-------------------------\n\nloc_1234:\ncode continued...\n</code></pre>\n <p>\n  The logic behind the obfuscation mechanism looks pretty straight forward. Bunch of junk is inserted into code with jump instructions to jump over it. I guess, the purpose is to confuse linear sweep disassemblers and obfuscate file in general. I would like to learn more about it. Does anyone know what it is called? How effective is this method against modern day anti-virus software?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "malware",
        "obfuscation"
    ],
    "user": "PSS",
    "time": "Jun 25, 2013 at 17:01",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n I call that \"destruction of sequential locality for temporally-related instructions\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n I would call this \"\n <i>\n  dead code insertion\n </i>\n \". For me, this is a technique to evade linear sweep and recursive traversal. But, once you follow the semantics of the instructions when disassembling, this obfuscation is totally useless.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "cb88",
            "text": "<html><body><span class=\"comment-copy\">\n @perror its not dead if it is executed from somewhere else.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @cb88: I though it was a\n <i>\n  bunch of junk\n </i>\n ...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n @perror I think it should not confuse recursive traversal, due to the fact that it follows binary trees and will just follow jumps. Am I correct?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This anti-disassembly technique is described as\n  <strong>\n   Jump Instruction with a Constant Condition\n  </strong>\n  in the\n  <em>\n   Practical Malware Analysis\n  </em>\n  book (Chapter 16, page 336 of the 1st edition). The idea, as you have described, is to have a condition such that the jump is always taken, and add code after the jump that will generate a wrong disassembly at the location of the jump. As the disassembler assumes that both branches are coherent, it will disassemble only one of them.\n </p>\n <p>\n  Regarding effectiveness against antivirus software, most of them use emulators. As the condition is always taken, the emulator will continue there and see the right instructions.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "auspicious99",
            "time": "May 10, 2020 at 9:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A variation on this is to use a \"branch function\".  The basic idea is as follows:\n </p>\n <ul>\n  <li>\n   a jump instruction \"jmp L\" is converted to \"call branch_fn\" and N bytes of junk are inserted after the call instruction;\n  </li>\n  <li>\n   the callee, branch_fn, adds N to its return address and then returns.\n  </li>\n </ul>\n <p>\n  This basic scheme can be elaborated in various ways, e.g.:\n </p>\n <ul>\n  <li>\n   Multiple jumps can use the same branch function, and they can have different values of N (the amount of adjustment needed for the return address).  The branch function uses the return address to identify the call site and thus the particular jump instruction under consideration, from which it can determine the amount of adjustment N necessary (e.g., using a table lookup based on the return address).\n  </li>\n  <li>\n   The amount of adjustment N applied to the return address need not be stored \"in the clear\", but can be computed dynamically via the evaluation of an expression.  For example, using perfect hash functions to map the return addresses to an adjustment value N can produce pretty inscrutable code.\n  </li>\n  <li>\n   A branch function doesn't have to adjust its own return address, since that's relatively easy to spot.  Instead, it can use a sequence of calls branch_fn0 --> branch_fn1 --> ... --> branch_fnK where the last one in the sequence \"reaches into\" the call stack to carry out the return address adjustment.\n  </li>\n </ul>\n <p>\n  But, as mentioned above, this is basically aimed at throwing off static disassembly; it doesn't do a whole lot against dynamic analysis.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "debray",
            "time": "Jun 26, 2013 at 13:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An alternative answer is that you are looking at hand coded assembly and there is actually no effort to deceive the disassembler.\n </p>\n <p>\n  When I hand code assembly, regardless of what good practice is, if it is a small bit of code I will very frequently set the Data Selector to match the Code Selector and simply embed my data right inside of the code segment.  I especially do this if I'm writing a real mode boot loader, for example, or some other short lived piece of code.\n </p>\n <p>\n  Another place I would do this and still not be trying to obfuscate things is in a piece of exploit code.  This allows me to have variables that I can reference reliably and still have a really tight piece of shell code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "David Hoelzer",
            "time": "Jul 13, 2013 at 22:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}