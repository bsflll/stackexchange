{
    "title": "Determine firmware MCU from binary image",
    "link": "https://reverseengineering.stackexchange.com/questions/25679/determine-firmware-mcu-from-binary-image",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Tough problem - trying to reverse engineer a CANBUS controller for which I can download firmware (as far as I can tell, binary image, not ELF) but I dont know what MCU it uses.\n  <code>\n   binwalk\n  </code>\n  ,\n  <code>\n   r2\n  </code>\n  dont give me anything useful.   Binwalk opcodes match mipsel but function signatures is garbage.\n </p>\n <p>\n  What can I do to determine MCU from firmware?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "398",
    "tags": [
        "firmware"
    ],
    "user": "Anycorn",
    "time": "Aug 15, 2020 at 18:41",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n are you able to share the file via dropbox or equivalent?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Anycorn",
            "text": "<html><body><span class=\"comment-copy\">\n @julian\n <a href=\"https://www.dataspeedinc.com/release-packages/\" rel=\"nofollow noreferrer\">\n  dataspeedinc.com/release-packages\n </a>\n Dataspeed knows how to control Ford steering via Active Park messages.  Inside archives are Steer firmware for several Ford platforms and thats where I am hoping to understand protocol\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Anycorn",
            "text": "<html><body><span class=\"comment-copy\">\n For example DBW_Kit_FORD_20200221/Firmware/FORD_P5/FORD_P5_STEER_RevA_v1.2.0.hex is Ford F-150 firmware for Dataspeed HW module.  I converted hex to binary, relevant strings appear in hexdump, but thats as far as I managed.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It does appear to be MIPS 32-bit little-endian machine code.\n </p>\n <hr/>\n <p>\n  First, the file was converted from .hex to binary via\n </p>\n <pre><code>$ objcopy --input-target=ihex --output-target=binary FORD_P5_STEER_RevA_v1.2.0.hex FORD_P5_STEER_RevA_v1.2.0.bin\n</code></pre>\n <p>\n  After looking at a\n  <code>\n   binwalk\n  </code>\n  entropy plot and a hex dump, I sliced out the first\n  <code>\n   0x00021330\n  </code>\n  bytes, because nearly everything after is just 0x00 bytes.\n </p>\n <pre><code>000212f0  5f 50 35 20 53 74 65 65  72 00 00 00 20 24 00 00  |_P5 Steer... $..|\n00021300  00 04 08 10 14 18 00 00  08 00 e0 03 00 60 62 41  |.............`bA|\n00021310  08 00 e0 03 20 60 62 41  08 00 e0 03 00 00 00 00  |.... `bA........|\n00021320  08 00 e0 03 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00021330  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| <--\\\n*                                                                                 |-- Huge gap\n00071e40  01 00 00 00 02 00 00 00  00 00 00 00 46 4f 52 44  |............FORD| <--/\n00071e50  20 50 35 20 53 74 65 65  72 69 6e 67 20 45 6d 75  | P5 Steering Emu|\n00071e60  6c 61 74 6f 72 20 28 46  4f 52 44 5f 50 35 5f 53  |lator (FORD_P5_S|\n00071e70  54 45 45 52 29 20 52 65  76 41 00 00 00 00 00 00  |TEER) RevA......|\n00071e80  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n02bf9e80  00 9d 1f 3c 70 79 ff 37  08 00 e0 03 00 00 00 00  |...<py.7........|\n02bf9e90  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n02bfce70  ff ff ff 3e d9 79 f9 ff  5b 0e 66 ff ff ff ff 7f  |...>.y..[.f.....|\n02bfce80\n</code></pre>\n <p>\n  <a href=\"https://isadetect.com/\" rel=\"nofollow noreferrer\">\n   ISAdetect\n  </a>\n  results:\n </p>\n <pre><code>{\n  \"prediction\": {\n    \"wordsize\": 32,\n    \"endianness\": \"little\",\n    \"architecture\": \"mips\"\n  },\n  \"prediction_probability\": 0.81\n}\n</code></pre>\n <p>\n  To confirm, I extracted the machine code from the slice and compared it to a reference:\n  <a href=\"https://i.sstatic.net/Q64o5.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"ford code vs. reference\" src=\"https://i.sstatic.net/Q64o5.png\"/>\n  </a>\n </p>\n <p>\n  The byte value distributions closely match.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "julian",
            "time": "Aug 16, 2020 at 2:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Anycorn",
                    "text": "<span class=\"comment-copy\">Thank you, I will try to proceed from there, this is very helpful.  I did not know about ISADetect</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@Anycorn you are welcome. I think most people do not know about ISAdetect, sadly. It is relatively new, released in 2019. I only know about it because it is related to my own research</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is indeed valid MIPS litte-endian code:\n </p>\n <pre><code>seg000:1D0121F0 A8 FF BD 27                 addiu   $sp, -0x58\nseg000:1D0121F4 04 00 A1 AF                 sw      $at, 0x58+var_54($sp)\nseg000:1D0121F8 08 00 A2 AF                 sw      $v0, 0x58+var_50($sp)\nseg000:1D0121FC 0C 00 A3 AF                 sw      $v1, 0x58+var_4C($sp)\nseg000:1D012200 10 00 A4 AF                 sw      $a0, 0x58+var_48($sp)\nseg000:1D012204 14 00 A5 AF                 sw      $a1, 0x58+var_44($sp)\nseg000:1D012208 18 00 A6 AF                 sw      $a2, 0x58+var_40($sp)\nseg000:1D01220C 1C 00 A7 AF                 sw      $a3, 0x58+var_3C($sp)\nseg000:1D012210 20 00 A8 AF                 sw      $t0, 0x58+var_38($sp)\nseg000:1D012214 24 00 A9 AF                 sw      $t1, 0x58+var_34($sp)\nseg000:1D012218 28 00 AA AF                 sw      $t2, 0x58+var_30($sp)\nseg000:1D01221C 2C 00 AB AF                 sw      $t3, 0x58+var_2C($sp)\nseg000:1D012220 30 00 AC AF                 sw      $t4, 0x58+var_28($sp)\nseg000:1D012224 34 00 AD AF                 sw      $t5, 0x58+var_24($sp)\nseg000:1D012228 38 00 AE AF                 sw      $t6, 0x58+var_20($sp)\nseg000:1D01222C 3C 00 AF AF                 sw      $t7, 0x58+var_1C($sp)\nseg000:1D012230 40 00 B8 AF                 sw      $t8, 0x58+var_18($sp)\nseg000:1D012234 44 00 B9 AF                 sw      $t9, 0x58+var_14($sp)\nseg000:1D012238 48 00 BF AF                 sw      $ra, 0x58+var_10($sp)\nseg000:1D01223C 12 40 00 00                 mflo    $t0\nseg000:1D012240 4C 00 A8 AF                 sw      $t0, 0x58+var_C($sp)\nseg000:1D012244 10 40 00 00                 mfhi    $t0\nseg000:1D012248 50 00 A8 AF                 sw      $t0, 0x58+var_8($sp)\nseg000:1D01224C 01 9D 1A 3C+                li      $k0, 0x9D012CA4\nseg000:1D01224C A4 2C 5A 27\nseg000:1D012254 00 00 00 00                 nop\nseg000:1D012258 00 68 04 40                 mfc0    $a0, Cause       # Cause of last exception\nseg000:1D01225C 00 60 05 40                 mfc0    $a1, SR          # Status register\nseg000:1D012260 09 F8 40 03                 jalr    $k0\nseg000:1D012264 00 00 00 00                 nop\n</code></pre>\n <p>\n  I suspect the device is using something from the Microchip's\n  <a href=\"http://download.mikroe.com/documents/compilers/mikrobasic/pic32/help/memory_organization.htm\" rel=\"nofollow noreferrer\">\n   PIC32 series\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 16, 2020 at 12:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anycorn",
                    "text": "<span class=\"comment-copy\">Igor, thanks.  The disassembler you used was IDA?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Yes, itâ€™s from IDA</span>",
                    "time": null
                }
            ]
        }
    ]
}