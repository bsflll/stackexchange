{
    "title": "Reversing a program with dongle",
    "link": "https://reverseengineering.stackexchange.com/questions/14871/reversing-a-program-with-dongle",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I'm learning Reverse Engineering / Software cracking.   I have a program that I am practicing on that requires a dongle in order for the program to start.\n </p>\n <p>\n  From looking through the disassembly of the program I figured out that at some point of the execution the program is calling  winscard.dll    When the dongle is inserted,  in Windows it comes up as a smart card reader.\n </p>\n <p>\n  When there is no dongle inserted, the software gives you a MessageBox stating The dongle not found.   I've found this execution point in user32.dll, but I can't figure out at which point does the main software call this.\n </p>\n <p>\n  I'd like to be able to figure out at what point does the software call winscard.dll and what it's looking for as a return.    I've tried to figure this out with Ollydbg and also IDA Pro.\n </p>\n <p>\n  Any help for someone trying to learn would be great.\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "windows",
        "ollydbg",
        "debuggers",
        "dongle"
    ],
    "user": "SoupyLoops",
    "time": "Nov 22, 2018 at 8:55",
    "comments": [
        {
            "user": "user15338",
            "text": "<html><body><span class=\"comment-copy\">\n Why don't you set a break point on all MessageBox calls, run the program without the dongle (to trigger the break point) then look at the stack trace to see what functions were called leading up to the current function call.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SoupyLoops",
            "text": "<html><body><span class=\"comment-copy\">\n That's the thing, I don't  know how to proceed..   In ollydbg I select breakpoint-->      and  put a check  on  MessageboxW because in IDA  I can find it  in  import, but ollydbg never stops  on  them..  I look  at  trace and I  have  no  idea what function  is calling  MessageBox\n <a href=\"http://pastebin.com/FLu1JjQz\" rel=\"nofollow noreferrer\">\n  pastebin.com/FLu1JjQz\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "josh",
            "text": "<html><body><span class=\"comment-copy\">\n Learning Reverse Engineering by cracking a dongle is perhaps not the best idea. Cracking a \"state of the art\" dongle is a rather advanced task. If you really want to do it, you have no choice as to first understand how the hardlock works by using a debugger, and then think about a way to remove the protection. Good luck!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First please not that the dongle may be used for cryptographic purposes, so there might be no point in trying to skip the check.\n </p>\n <p>\n  Second, winscard.dll can not be called. Try to set a breakpoint on common methods like\n  <code>\n   SCardEstablishContext\n  </code>\n  and\n  <code>\n   SCardListReaders\n  </code>\n  to find the right check.\n </p>\n <p>\n  For example, if no SmartCard is connected to the system at all,\n  <code>\n   SCardListReaders\n  </code>\n  will return 0x8010002E (\n  <code>\n   SCARD_E_NO_READERS_AVAILABLE\n  </code>\n  ).\n </p>\n <p>\n  I'm assuming the second check would involve the\n  <code>\n   mszReaders\n  </code>\n  parameter of the function to check if the right reader is connected.\n </p>\n <p>\n  If you knew the location of the 'success'-path (i.e. the address which is executed when everything is fine) you could try to jump there from these locations, else you will have to go though the next branches as well.\n </p>\n <p>\n  Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Mar 10, 2017 at 13:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "SoupyLoops",
                    "text": "<span class=\"comment-copy\">Thanks for answering.  I don't think it's used for encryption,  only to verify the presence of a dongle.  If I start the program and remove the dongle,  it still works.  I will check for those methods.</span>",
                    "time": null
                },
                {
                    "user": "SoupyLoops",
                    "text": "<span class=\"comment-copy\">I figured out how to set a breakpoint everytime winscard.dll is located.  It seems to be checking this over and over in ntdll.dll <a href=\"http://pastebin.com/pZD3jiXj\" rel=\"nofollow noreferrer\">pastebin.com/pZD3jiXj</a></span>",
                    "time": null
                }
            ]
        }
    ]
}