{
    "title": "Static Address in Dynamically Loaded DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/11531/static-address-in-dynamically-loaded-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to re-write the following function in my injected DLL.\n </p>\n <pre><code>mov edi,edi\npush ebp\nmov ebp,esp\nmov eax, [sound.dll+1AE0]\npush eax\nmov ecx,[ebp+08]\nmov eax,[ecx]\nmov eax,[eax+0C]\npush eax\ncall sound.dll+7C640\npop ebp\nret 0004\n</code></pre>\n <p>\n  I am loading my DLL via CreateRemoteThread. Is there a way to get the address of sound.dll+1AE0 (or linkage) when the DLL is loaded without having to to do GetModuleHandleEx and calculate the address dynamically?\n </p>\n <p>\n  Maybe with some imports or some linkage artifact?\n </p>\n <p>\n  Thanks!\n </p>\n <p>\n  EDIT:\n </p>\n <p>\n  The GetModuleHandleEx approach will look like:\n </p>\n <blockquote>\n  <p>\n   DWORD mem1AE0=0;\n   \n\n  </p>\n </blockquote>\n <p>\n  Load mem1AE0 with sound.dll+1AE0 address\n </p>\n <p>\n  and then in my function:\n </p>\n <pre><code>_declspec(naked) void MyFunction() { \n    __asm { \n        mov edi,edi \n        push ebp \n        mov ebp,esp \n        mov eax, mem1AE0 \n        mov eax, [eax] \n        push eax \n        mov ecx,[ebp+08] \n        mov eax,[ecx] \n        mov eax,[eax+0C] \n        push eax \n        call sound.dll+7C640 \n        pop ebp \n        ret 0004 \n    } \n} \n</code></pre>\n <p>\n  The problem is when I have a call [sound.dll+XXXX] instruction\n </p>\n <p>\n  In that case I need to create a variable which will point to that memory\n </p>\n <blockquote>\n  <p>\n   DWORD memXXXX=0;\n  </p>\n </blockquote>\n <p>\n  Load it with the correct address and also create a proxycall DWORD\n </p>\n <blockquote>\n  <p>\n   DWORD memXXXX_content=0;\n  </p>\n </blockquote>\n <p>\n  and then do:\n </p>\n <pre><code>push eax \nmov eax, memXXXX \nmov eax, [eax] \nmov memXXXX_content, eax \npop eax \ncall memXXXX_content \n</code></pre>\n <p>\n  which is totally inefficient unless I am doing somehting wrong?\n </p>\n <p>\n  Thanks\n </p>\n <p>\n  EDIT: I believe there is no way to get static links if you are dynamically loading your DLL.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 0,
    "views": "382",
    "tags": [
        "function-hooking"
    ],
    "user": "fred26",
    "time": "Dec 28, 2015 at 22:55",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n what's the problem with calling GetModuleHandleEx or OpenProcess/ReadProcessMemory?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nick Cano",
            "text": "<html><body><span class=\"comment-copy\">\n What is your end goal here? You are re-implementing the function exactly the same? If you have a specific change, it may be better to patch it in-place. Either that or place your hook at a more specific level.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "fred26",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, I need to replace that function entirey. Exactly the same.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n your second snippet should appear as \"call [memXXXX_content]\" because there is no form of absolute near call in x86, but that makes the whole thing equivalent to \"call [memXXXX]\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "fred26",
            "text": "<html><body><span class=\"comment-copy\">\n peter, I tried it and it doesn't work. call [memXXXX] calls the mem itself and not its content\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}