{
    "title": "Difference in binary behaviour (execution/under debugger)",
    "link": "https://reverseengineering.stackexchange.com/questions/26141/difference-in-binary-behaviour-execution-under-debugger",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was trying out a simple heap overflow example (\n  <a href=\"http://highaltitudehacks.com/2020/09/05/arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow/\" rel=\"nofollow noreferrer\">\n   http://highaltitudehacks.com/2020/09/05/arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow/\n  </a>\n  ) but replicated the relevant code in x86/x64 to understand it better. This is the code I used\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n    char *name = malloc(0x6);\n    char *command = malloc(0x6);\n    strcpy(command,\"whoami\");\n    strcpy(name,\"zzzzzzzzzzzzzzzzls -l\");\n\n    system(command);\n}\n</code></pre>\n <p>\n  I noticed that if I compiled the code and ran it normally, I will get system to execute \"ls -l\" and does a folder listing. However, if I was stepping through the binary using lldb from start to midway and proceed to continue the rest of the execution while inside lldb, I will see \"whoami\" executed instead.\n </p>\n <p>\n  I am testing this on a Mac OS and I am not sure if this is due to lldb or Mac OS behaviour?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "60",
    "tags": [
        "x86-64",
        "lldb"
    ],
    "user": "localacct",
    "time": "Oct 21, 2020 at 6:37",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Its possible that while debugging the heap chunks that get allocated are far apart or have some extra padding in between. Add\n <code>\n  printf(\"%p : %p\n\", name, command)\n </code>\n before\n <code>\n  strcpy\n </code>\n to verify the addresses with and without debugger.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Iâ€™m voting to close this question because Its not related to RE in any way.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "localacct",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks @sudhackar. Just curious though, my rationale for putting this in RE is because I was reversing it and the binary's behaviour looks different under lldb. Would it have been better if I posted this under Security Stack Exchange instead?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n This was more of a \"weird behaviour\" question. Needs more looking around, not anything specific to RE.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "localacct",
            "text": "<html><body><span class=\"comment-copy\">\n Sorry just one more question. How did you know the exact difference was 0x10 (16 bytes)?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For the overflow from\n  <code>\n   name\n  </code>\n  to\n  <code>\n   command\n  </code>\n  to work, the difference between the addresses of both should be 0x10 bytes.\n </p>\n <p>\n  I verified what I mentioned in the case earlier - Adding\n </p>\n <pre><code>printf(\"%p:%p\n\", name, command);\n</code></pre>\n <p>\n  Under a debugger stepping through main gives the addresses as\n </p>\n <pre><code>0x100404080:0x1002059f0\n</code></pre>\n <p>\n  Here delta > 0x10 bytes and hence the\n  <code>\n   name\n  </code>\n  <code>\n   strcpy\n  </code>\n  would not overflow to\n  <code>\n   command\n  </code>\n </p>\n <p>\n  while without stepping or without a debugger comes out\n </p>\n <pre><code>0x7fa890405830:0x7fa890405840\n</code></pre>\n <p>\n  exactly 0x10 bytes.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Oct 21, 2020 at 7:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}