{
    "title": "Hidden Features of a USB RFID Reader",
    "link": "https://reverseengineering.stackexchange.com/questions/18461/hidden-features-of-a-usb-rfid-reader",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently bought a\n  <a href=\"https://rads.stackoverflow.com/amzn/click/B016RRQQIY\" rel=\"nofollow noreferrer\">\n   KKmoon Portable RFID 125KHz Proximity Smart EM Card USB ID Reader\n  </a>\n  from Amazon. I'm not currently able to locate a datasheet for the device. It reads tag IDs and prints them in plaintext over USB (presumably as keyboard input). The benefit of this device is that it's cheap and it works (as claimed) on multiple platforms including Android, which is a plus for me.\n </p>\n <p>\n  My question is how to figure out what sort of hidden features and \"\n  <em>\n   modes\n  </em>\n  \" (especially) are available for this device? For example, I would assume that the underlying hardware is able to sniff all communications on the 125 kHz channel. How would I go about getting the device to print all of this information over USB in whatever format it comes in? I'm thinking along the lines of turning the capabilities of this reader into a\n  <a href=\"https://github.com/emsec/ChameleonMini\" rel=\"nofollow noreferrer\">\n   Chameleon-like\n  </a>\n  sniffer device for the 125 kHz spectrum.\n </p>\n <p>\n  <code>\n   dmesg | tail\n  </code>\n  lists the following:\n </p>\n <pre><code>[943853.964234] hidraw: raw HID events driver (C) Jiri Kosina\n[943853.976407] usbcore: registered new interface driver usbhid\n[943853.976409] usbhid: USB HID core driver\n[943853.982645] input: Sycreader RFID Technology Co., Ltd SYC ID&IC USB Reader as /devices/pci0000:00/0000:00:14.0/usb3/3-2/3-2:1.0/0003:08FF:0009.0001/input/input17\n[943854.042578] hid-generic 0003:08FF:0009.0001: input,hidraw0: USB HID v1.10 Keyboard [Sycreader RFID Technology Co., Ltd SYC ID&IC USB Reader] on usb-0000:00:14.0-2/input0\n</code></pre>\n <p>\n  and the relevant output from\n  <code>\n   lsusb\n  </code>\n  is:\n  <code>\n   Bus 003 Device 002: ID 08ff:0009 AuthenTec, Inc.\n  </code>\n </p>\n <p>\n  I can write C / kernel code that will enumerate the ioctl's of the device if this would be useful. Can someone please pass on some pointers about the reverse engineering aspects of this project? Many thanks.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "1k",
    "tags": [
        "usb"
    ],
    "user": "mds",
    "time": "Jun 7, 2018 at 1:08",
    "comments": [
        {
            "user": "mds",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://github.com/merbanan/rfid_app/blob/master/sycreader_set.c\" rel=\"nofollow noreferrer\">\n  This\n </a>\n C code may be useful, but I'm not quite sure what it does and how to extend the command set.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mds",
            "text": "<html><body><span class=\"comment-copy\">\n The short answer is to grok a EE expert friend, and run the device through a FPGA analysis. I am not good enough with the circuitry to make this easy to explain myself, but there exist hardware people that are if you buy them enough free beer...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}