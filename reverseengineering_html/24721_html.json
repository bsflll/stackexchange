{
    "title": "MSVC Destructors with 2 Arguments",
    "link": "https://reverseengineering.stackexchange.com/questions/24721/msvc-destructors-with-2-arguments",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing a program which I assume was compiled with MSVC. It's seeming like the first entry in each vtable is the class' destructor. However, when I look at the disassembly and decompilation, it seems like the destructors all take a second argument, and that the object's memory is only freed if that second argument is nonnull.\n </p>\n <p>\n  What is the purpose for this second argument? I would think that, if it's a destructor, the class should always be destructed and its memory freed. So why the second argument which could prohibit the memory from being freed up?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "632",
    "tags": [
        "msvc"
    ],
    "user": "sasschary",
    "time": "Apr 16, 2020 at 3:16",
    "comments": [
        {
            "user": "malikcjm",
            "text": "<html><body><span class=\"comment-copy\">\n In C++ there is a construct called \"placement new operator\". It can be used to construct object in pre-allocated area. For example on the stack. In such case when memory was not allocated for the object, destructor cannot released that memory. Please take a look at  \"How to delete the memory allocated by placement new ?\" on\n <a href=\"https://www.geeksforgeeks.org/placement-new-operator-cpp/\" rel=\"nofollow noreferrer\">\n  geeksforgeeks.org/placement-new-operator-cpp\n </a>\n there is nice example. It's possible to call destructor directly like this : \"    // No delete : Explicit call to Destructor.      pe->~Complex(); \"\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sasschary",
            "text": "<html><body><span class=\"comment-copy\">\n Interesting, I didn't know about placement new. So, then, a call to\n <code>\n  delete object\n </code>\n in the original code might call the destructor with a non-null second argument, while a call to the destructor, say, because the object was on the stack and went out of scope would have a null second argument, and thus not try to deallocate memory which was on the stack. Am I understanding correctly?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "malikcjm",
            "text": "<html><body><span class=\"comment-copy\">\n This is exactly how I understood usage of that second parameter.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These wrappers are used in classes with virtual destructors to cover two situations:\n </p>\n <ol>\n  <li>\n   <p>\n    ensure that the correct\n    <code>\n     operator delete\n    </code>\n    is called after the object's destruction via\n    <code>\n     delete pClass;\n    </code>\n    statement\n   </p>\n  </li>\n  <li>\n   <p>\n    deletion of arrays allocated via\n    <code>\n     new Class[N]\n    </code>\n    expression in the\n    <code>\n     delete [] class_array;\n    </code>\n    statement to ensure the correct number of items gets deleted using the correct\n    <code>\n     operator delete\n    </code>\n    and handle potential exceptions during the process\n   </p>\n  </li>\n </ol>\n <p>\n  From\n  <a href=\"http://www.openrce.org/articles/full_view/23\" rel=\"nofollow noreferrer\">\n   my old article\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   When class has a virtual destructor, compiler generates a helper\n  function - deleting destructor. Its purpose is to make sure that a\n  proper\n   <code>\n    operator delete\n   </code>\n   gets called when destructing a class.\n  Pseudo-code for a deleting destructor looks like following:\n  </p>\n  <pre><code>virtual void * A::'scalar deleting destructor'(uint flags)\n{\n  this->~A();\n  if (flags&1) A::operator delete(this);\n};\n</code></pre>\n  <p>\n   The address of this function is placed into the vftable instead of the\n  destructor's address. This way, if another class overrides the virtual\n  destructor,\n   <code>\n    operator delete\n   </code>\n   of that class will be called. Though in\n  real code\n   <code>\n    operator delete\n   </code>\n   gets overriden quite rarely, so usually\n  you see a call to the default delete().\n  </p>\n  <p>\n   Sometimes compiler can also\n  generate a\n   <em>\n    vector deleting destructor\n   </em>\n   . Its code looks like this:\n  </p>\n  <pre><code>virtual void * A::'vector deleting destructor'(uint flags)\n{\n  if (flags&2) //destructing a vector\n  {\n    array = ((int*)this)-1; //array size is stored just before the this pointer\n    count = array[0];\n    'eh vector destructor iterator'(this,sizeof(A),count,A::~A);\n    if (flags&1) A::operator delete(array);\n  }\n  else {\n    this->~A();\n    if (flags&1) A::operator delete(this);\n  }\n};\n</code></pre>\n </blockquote>\n <p>\n  For more details see also\n  <a href=\"http://www.openrce.org/articles/files/jangrayhood.pdf\" rel=\"nofollow noreferrer\">\n   <em>\n    C++: Under the Hood\n   </em>\n  </a>\n  by Jan Gray, one of the main developers of Visual C++.\n </p>\n <p>\n  I also recommend you to make some classes with custom operators new/delete and check the generated code.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 18, 2020 at 21:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}