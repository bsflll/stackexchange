{
    "title": "How can I access an internal DLL function or piece of data externally?",
    "link": "https://reverseengineering.stackexchange.com/questions/18676/how-can-i-access-an-internal-dll-function-or-piece-of-data-externally",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm writing in C++ and doing an exercise to familiarize myself with DLLs and shared objects (.so). How can I access internals without exporting them?\n  <em>\n   GetProcAddress\n  </em>\n  returns null on a call of an unexported function. I wrote the DLL so I know all of the function and variable names.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "5k",
    "tags": [
        "c++",
        "dll"
    ],
    "user": "theTheodidact",
    "time": "Jul 3, 2018 at 20:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In case you know the address of your function in the DLL you can call in \"C\" language via a function pointer. Let us make an example:\n </p>\n <p>\n  Assume you have a function residing in a DLL called \"notExportedFunc\" with the signature\n </p>\n <pre><code>int notExportedFunc(int a, int b);\n</code></pre>\n <p>\n  You could call it like in the following main program:\n </p>\n <pre><code>typedef int notExportedFunc(int a, int b);\n\nint main() {\n\n    HANDLE h = LoadLibrary(L\"mydll.dll\"); //Image base address, might change on every call\n\n    if (h == 0)\n    {\n        printf(\"Cannot load mydll.dll\n\");\n        return -1;\n    }\n    int funcOffset = 0x11560;             //from the linker map\n    int funcAddress = (int)h + funcOffset;\n    notExportedFunc* f = (notExportedFunc*)(funcAddress);\n    int result = f(3, 4);\n    printf(\"Result = %d\n\", result);\n}\n</code></pre>\n <p>\n  In the linker map, the relevant entries look like this:\n </p>\n <p>\n  <strong>\n   0000:00000000       ___ImageBase\n  </strong>\n  10000000 <===\n  <strong>\n   Linker Suggestion\n  </strong>\n </p>\n <p>\n  0001:00000000       __enc$textbss$begin        10001000\n  <strong>\n   Not relevant here\n  </strong>\n </p>\n <p>\n  0001:00010000       __enc$textbss$end          10011000\n  <strong>\n   Not relevant here\n  </strong>\n </p>\n <p>\n  <strong>\n   0002:00000560       ?notExportedFunc@@YAHHH@Z  10011560 f   dllmain.obj\n  </strong>\n </p>\n <p>\n  The ImageBase address is returned by the \"LoadLibrary(\"mydll.dll\")\" call. You should be aware that this address usually changes on every call to LoadLibrary, due to ASLR (Address Space Layout Randomization).\nTherefore the address of notExportedFunc must not be taken directly from the linker map, but must be calculated. In our example, the offset is 0x11560, which must be added to the address returned by LoadLibrary.\n </p>\n <p>\n  The rest of the program is usual \"C\" function call via a function pointer.\n </p>\n <p>\n  It might be possible to automate this further, but the example hopefully shows the general mechanics of calling private functions in a DLL.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "NirIzr",
            "time": "Jul 4, 2018 at 5:32",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   GetProcAddr\n  </code>\n  Windows API is used to retrieve addresses for\n  <em>\n   exported\n  </em>\n  functions. It will always return\n  <code>\n   null\n  </code>\n  for non-exported functions as it is unable to find it in the PE file.\n </p>\n <p>\n  Exporting a function is what makes it available to other executables. Without exporting the data of where in the executable a function resides is unavailable (this is not entirely true, as\n  <em>\n   symbols\n  </em>\n  may still reveal that information but they're not used by\n  <code>\n   GetProcAddr\n  </code>\n  ).\n </p>\n <p>\n  If you still wish to find a function pointer to a non exported function, you'll need to follow an exported reference chain. For example, if\n  <code>\n   func1\n  </code>\n  uses\n  <code>\n   func2\n  </code>\n  and\n  <code>\n   func1\n  </code>\n  <em>\n   is\n  </em>\n  exported, you can get the address for\n  <code>\n   func1\n  </code>\n  and then disassemble\n  <code>\n   func1\n  </code>\n  until you find the call to\n  <code>\n   func2\n  </code>\n  within it. Recognising the right call may be a little tricky, but that's definitely doable.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Jul 4, 2018 at 9:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">This is a better option in cases where the DLL might change/update. Also I have seen this in exploits to call internal functions in DLLs. Although this will be harder to implement OP but it'll almost never break(assuming call chain for the function is same).</span>",
                    "time": null
                }
            ]
        }
    ]
}