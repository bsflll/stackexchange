{
    "title": "Where are the .NET IL bytes stored in an .NET executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/27004/where-are-the-net-il-bytes-stored-in-an-net-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When i compile a c# code, it compiles into a .NET executable, that only imports _CorExeMain from mscoree.dll, now my questions are :\n </p>\n <ol>\n  <li>\n   <p>\n    Is _CorExeMain the interpreter that fetches ILs and executes their corresponding x86 code just like VMprotect, etc?\n   </p>\n  </li>\n  <li>\n   <p>\n    Where are the IL bytes actually stored? they seem to be stored in the .text section, but i couldn't find any tool that can find the location that they are stored. where are they stored?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "285",
    "tags": [
        "windows",
        ".net",
        "c#"
    ],
    "user": "Notoriouss",
    "time": "Feb 14, 2021 at 5:41",
    "comments": [
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n Press Ctrl+F in any hexeditor and search for these bytes\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Notoriouss",
            "text": "<html><body><span class=\"comment-copy\">\n @morsisko bruh.. I'm asking how can i find them so i can write a tool that finds them automatically.. not searching for bytes..\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n Sorry, my crystal ball didn't work this time. I think my answer still answers the question \"how can I find them\", as there are multiple programs that can display the IL bytes so you can search the desired position in executable...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For .NET assemblies there's a .NET MetaData Directory that can be found in the Data Directories. From that you can get access to\n  <code>\n   MetaData Header\n  </code>\n  and\n  <code>\n   MetaData Streams\n  </code>\n  that holds all the info for you to extract and located the code.\n </p>\n <p>\n  A good start (or maybe even a complete guide) into this topic would be the \"\n  <a href=\"https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/\" rel=\"nofollow noreferrer\">\n   Anatomy of a .NET Assembly\n  </a>\n  \" by Simon Cooper.\n </p>\n <p>\n  For the first question - yes, the\n  <code>\n   _CorExeMain\n  </code>\n  is the entry point that does all the tricks to make your assembly to execute. For the explanations of all the things that happen during that call check\n  <a href=\"https://mattwarren.org/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/\" rel=\"nofollow noreferrer\">\n   The 68 things the CLR does before executing a single line of your code\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Feb 15, 2021 at 17:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}