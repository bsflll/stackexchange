{
    "title": "Why the disassembled code in IDA is different from in xcode? And How to solve unk_xxxx in IDA View?",
    "link": "https://reverseengineering.stackexchange.com/questions/29142/why-the-disassembled-code-in-ida-is-different-from-in-xcode-and-how-to-solve-un",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://i.sstatic.net/sIztX.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"disassembled code in ida\" src=\"https://i.sstatic.net/sIztX.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/UGLES.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"disassemble code in xcode\" src=\"https://i.sstatic.net/UGLES.png\"/>\n  </a>\n </p>\n <p>\n  I have built an executable file (the architecture is ARMv7, the base SDK is iOS), which depended on an\n  <code>\n   xxx.a\n  </code>\n  file in xcode; I don't have the source code of the\n  <code>\n   xxx.a\n  </code>\n  .\n </p>\n <p>\n  I want to check some logic in `xx. So I copy the final executable  file to my Windows PC, use IDA 7.5  to disassemble it. At the same time, I debug this file in xcode using lldb.\n </p>\n <p>\n  The pictures show some strange thing. There is an\n  <code>\n   unk_xxx\n  </code>\n  in IDA but in xcode there is some other ARM instructions.\n </p>\n <p>\n  <strong>\n   Question one:\n  </strong>\n  Why there is an unknow flag in IDA views?\n </p>\n <p>\n  I searched this on Google but there is nothing valuable. Can there is a possibility IDA 7.5 can not support adrp instruction. So it treats instruction as adrl ,so some error happens.\n </p>\n <p>\n  <strong>\n   Question two:\n  </strong>\n  Is there  any way to fix it?\n </p>\n <p>\n  As there is an\n  <code>\n   unk_xxx\n  </code>\n  in IDA text view, I found some content missing in pseudocode. This blocked me to read the whole logic of this function. I hope someone can give me some insight, so I can push on.\n </p>\n <p>\n  Thanks very much!\n </p>\n <p>\n  When ADRL is been detected,\n  <code>\n   unk_xxxx\n  </code>\n  appears, then pseudocode of disassembling code  of this function are missing.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/GjS3R.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Pseudocode miss in Ida\" src=\"https://i.sstatic.net/GjS3R.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "502",
    "tags": [
        "disassembly",
        "arm",
        "ios",
        "lldb"
    ],
    "user": "KHacker",
    "time": "Aug 19, 2021 at 8:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ADRL is a pseudo instruction and is normally encoded as two instructions according to\n  <a href=\"https://developer.arm.com/documentation/dui0068/b/Cacecdga#:%7E:text=Load%20a%20program%2Drelative%20or,generates%20two%20data%20processing%20instructions.\" rel=\"nofollow noreferrer\">\n   documentation\n  </a>\n </p>\n <p>\n  so probably it is a different convention being followed by both those tool\n </p>\n <p>\n  ida is probably showing the pseudocoded ADRL\n  \n\n  while the other one is showing a split double instruction adrp,add\n </p>\n <p>\n  also note ida's dispaly does not have the ...c8 while the other has it\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 16, 2021 at 14:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "KHacker",
                    "text": "<span class=\"comment-copy\">Think you, blabb. Ida detect adrl ,  I do think it's fine . I add some descritions to the answer. Ida shoudn't miss some presudo code . If ida can not treat adrl ,it may detect it as two spit double instruction adrp and add. Now it treat it as adrl ,  not only the pseudocode of this instruct is missing ,and the pseudocode after the this instruction also missing . This is really unacceptable, and I can't carry on my analysis . I think this may be a bug of Ida.  Can you give me some advice how to handle this situation ? Thanks very much!</span>",
                    "time": null
                },
                {
                    "user": "KHacker",
                    "text": "<span class=\"comment-copy\">Hi, Blabb. I think Adrl is affected by alsr. so ida can't get the real jump address . The real address is caculated at runtime. So the behaviour of ida is in expectations . Am I right?</span>",
                    "time": null
                },
                {
                    "user": "KHacker",
                    "text": "<span class=\"comment-copy\">I think I have made some mistake on my last comment . Although Adrl is affected by alsr, the disaccemble code should be adrl lable_offset, it shouldn't be unk_xxxx.   There is another possibilty . Ida can't get the real jump address (offset of instruction to jump). The real address is caculated at runtime. So the behaviour of ida is in expectations .</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">aslr shouldn't matter post relevent text instead of image see what or where x9 is initialzed the last add has a18 in both so both representations seems right  i am not that well versed in arm what i posted is an observation it was not about the quality of either tool</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">You can disable the recognition of pseudo-instructions in the analysis options, if you require to see the raw adrp/add instructions.</span>",
                    "time": null
                }
            ]
        }
    ]
}