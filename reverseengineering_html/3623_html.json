{
    "title": "Runtime memory reading with injection",
    "link": "https://reverseengineering.stackexchange.com/questions/3623/runtime-memory-reading-with-injection",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing an application written in C. I have a certain function that I want to log runtime, without pausing/stopping the application.\n </p>\n <p>\n  My desired values of that function are:\n </p>\n <ul>\n  <li>\n   <code>\n    [ESP + 4]\n   </code>\n   which is the length of a buffer\n  </li>\n  <li>\n   <code>\n    [ESP + 8]\n   </code>\n   which is a\n   <em>\n    pointer\n   </em>\n   to a string buffer\n  </li>\n </ul>\n <p>\n  Then I want to read the buffer and write it into a file.\n </p>\n <p>\n  First thing I was told to use is Immunity's\n  <code>\n   LogBpHook\n  </code>\n  , which worked great, but it stops the application and it becomes really slow due to this, because it's a frequently called function.\n </p>\n <p>\n  Then I tried to setup\n  <code>\n   FastLogHook\n  </code>\n  which sounds more like what I'm after. It injects a log stub and stores encountered values, but as far as I know it can not perform further memory readings like the one I described above anyway (if it can please tell me). Also it constantly crashed my application so it's out of the question.\n </p>\n <p>\n  So I left with the idea of injecting a customized code stub that would take care of further readings and logging of the values into a file. Is there any tool that could do this, or I have to manually write+inject this assembly?\n </p>\n <p>\n  <strong>\n   How can I log function parameters runtime, without stopping the application?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "memory",
        "immunity-debugger",
        "functions",
        "callstack"
    ],
    "user": "Dominik Antal",
    "time": "Apr 8, 2015 at 17:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   You can write your hooking library (DLL) which will patch the API you are targeting. This patch will just print to file/console the parameters and continue back to the original function. There will be no stops on the way. To actually hook the APIs you will need to inject the DLL into the target application. You can use\n   <a href=\"http://research.microsoft.com/en-us/projects/detours/\" rel=\"nofollow\">\n    Detours from Microsoft\n   </a>\n   as and example which is a software package for re-routing Win32 APIs underneath applications.\n   <ol>\n    <li>\n     <a href=\"http://www.codeproject.com/Articles/2082/API-hooking-revealed\" rel=\"nofollow\">\n      API hooking revealed\n     </a>\n     - an article on\n     <strong>\n      CodeProject\n     </strong>\n     with examples. But you can find on the net endless examples for this technique.\n    </li>\n    <li>\n     <a href=\"http://www.codeproject.com/Articles/30140/API-Hooking-with-MS-Detours\" rel=\"nofollow\">\n      API Hooking with MS Detours\n     </a>\n    </li>\n   </ol>\n  </li>\n  <li>\n   <a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow\">\n    API Monitor\n   </a>\n   - API Monitor is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.\n  </li>\n  <li>\n   <a href=\"http://en.wikipedia.org/wiki/Instrumentation_%28computer_programming%29\" rel=\"nofollow\">\n    Process instrumentation\n   </a>\n   -\n   <code>\n    instrumentation refers to an ability to monitor or measure the level of a product's performance, to diagnose errors and to write trace information.\n   </code>\n   <ol>\n    <li>\n     <a href=\"http://en.wikipedia.org/wiki/Pin_%28computer_program%29\" rel=\"nofollow\">\n      Pin is a platform for creating analysis tools\n     </a>\n     -\n     <code>\n      A pin tool comprises instrumentation, analysis and callback routines.\n     </code>\n     <a href=\"http://resources.infosecinstitute.com/pin-dynamic-binary-instrumentation-framework/\" rel=\"nofollow\">\n      Here\n     </a>\n     you can find an intro to writing pintool which you can extend to your needs. This is pretty powerful technique and more hard to adapt among all that I've listed here. The original site from\n     <a href=\"http://software.intel.com/en-us/articles/pintool/\" rel=\"nofollow\">\n      Intel\n     </a>\n     and specifically at\n     <a href=\"http://software.intel.com/sites/landingpage/pintool/docs/62732/Pin/html/index.html#FunctionArguments\" rel=\"nofollow\">\n      Finding the Value of Function Arguments\n     </a>\n     can help you with what you are looking for.\n    </li>\n   </ol>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "4",
            "user": "PhoeniX",
            "time": "Feb 5, 2014 at 14:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "jbh",
                    "text": "<span class=\"comment-copy\"><a href=\"http://www.frida.re/\" rel=\"nofollow noreferrer\">Frida</a> is another Process Instrumentation possibility that is easy to set up. It injects Googles V8 (javascript) engine into the running process and then you can interact with the process using python bindings. They have an example of how to dump arguments of functions. Best of luck</span>",
                    "time": null
                }
            ]
        }
    ]
}