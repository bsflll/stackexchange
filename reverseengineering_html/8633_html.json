{
    "title": "Find function that references string",
    "link": "https://reverseengineering.stackexchange.com/questions/8633/find-function-that-references-string",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to hook a certain function in a program, the problem is I don't know where the function is located. All I know is that it takes as an argument a string. A string that I know. My problem is I am unable to find the function I tried Dieder Steven's OllyStepNSearch plugin. But no success, my guess is that the function has several parameters and that the pointer to string is passed via the stack. Is there a plugin of any existing debugger that can help me find that string when is referenced ?\n </p>\n <p>\n  Please help\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "opc0de",
    "time": "Apr 4, 2015 at 10:51",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n A hardware breakpoint when reading at the memory address where the string is?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "opc0de",
            "text": "<html><body><span class=\"comment-copy\">\n the string is dinamic, is not static can't find references to it\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n If the string is created at runtime, do you know how is it created/calculated? If you know that part, put a hw breakpoint after it's created. If not... good luck. You may want to record a trace with Intel PIN or similar to determine when is it being created.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n If there's anything done to the string (written to a file, written to the registry, sent over the network), tracing the process with\n <code>\n  procmon\n </code>\n and checking the stack at the relevant instruction might help.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you should have something to grip at if you know that eax may contain the string at some point or [esp+8] contains the string at some point\n </p>\n <p>\n  you can employ ollydbg's (1.10)  Set Condition to RunTrace and trace the execution\n </p>\n <p>\n  a simple message box app loaded in ollydbg \n poi(esp+4) when broken on a call to user32!MessageBoxW will contain the Text I know so let me set a ctrl+t condition as follows and traceover (ctrl+f12)\n </p>\n <pre><code>UNICODE [[esp+4]] == \"cannot\" \n</code></pre>\n <p>\n  here is the log of the all the breaks where [[esp+4]] was unicode string \n\"cannot find XXXXXXXXXXX\n </p>\n <p>\n  before the last log i modified the srch string to\n  <code>\n   \"say\"\n  </code>\n </p>\n <pre><code>Log data\nMessage\nConditional pause: UNICODE [[esp+4]] == \"cannot\"\nbroke here eip  = 401011  stack contains  unicode [[esp+4]] = cannot find \"hello\"\nConditional pause: UNICODE [[esp+4]] == \"cannot\"\nbroke here eip  = 401025  stack contains  unicode [[esp+4]] = cannot find \"iello\"\nConditional pause: UNICODE [[esp+4]] == \"cannot\"\nbroke here eip  = 401039  stack contains  unicode [[esp+4]] = cannot find \"jello\"\nConditional pause: UNICODE [[esp+4]] == \"cannot\"\nbroke here eip  = 40104d  stack contains  unicode [[esp+4]] = cannot find \"fello\"\nConditional pause: UNICODE [[esp+4]] == \"cannot\"\nbroke here eip  = 401061  stack contains  unicode [[esp+4]] = cannot find \"kello\"\nbroke here eip  = 401061  stack contains  unicode [[esp+4]] = cannot find \"kello\"\nConditional pause: UNICODE [[esp+4]] == \"say\"\nbroke here eip  = 401075  stack contains  unicode [[esp+4]] = saying \"hello\" baby\n</code></pre>\n <p>\n  one can also set complex conditions to locate srch pattern of interest\n </p>\n <p>\n  here is a log of ollydbg opening notepad,exe and looking for the path of cmd.exe when eip > imagebase with ctrl+f11 (trace in ) it traced\n </p>\n <pre><code>Run trace, selected line\n Back=141932.\ncommands before pausing \n</code></pre>\n <p>\n  log\n </p>\n <pre><code>Log data, item 0\n Message=Conditional pause:  eax > 0x400000  &&  UNICODE [eax] == \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n\nwhere eip was \nLog data, item 0\n Message=eip = 7c918154\n</code></pre>\n <p>\n  which is part of ntdll!_wcscat\n </p>\n <pre><code>7C91814E        /MOV     CX, WORD PTR DS:[ESI]       ;  55.\n7C918151        |MOV     WORD PTR DS:[EDX], CX       ;  55.\n7C918154        |INC     EDX                         ;  54.\n7C918155        |INC     EDX                         ;  54.\n7C918156        |INC     ESI                         ;  54.\n7C918157        |INC     ESI                         ;  54.\n7C918158        |TEST    CX, CX                      ;  54.\n7C91815B        \\JNZ     SHORT ntdll.7C91814E        ;  54.\n</code></pre>\n <p>\n  whcih shows the string ise being constructed dynamically\n </p>\n <pre><code>Log data, item 0\n Message=edx  = 5cb800f4  unicode [edx]  = e  cx  = 65  unicode [eax] = C:\\WINDOWS\\System32\\cmd.exe\n</code></pre>\n <p>\n  the\n  <code>\n   55. / 54.\n  </code>\n  in the disassembly is count the instruction was executed prior to break\n  <code>\n   len ( unicode ( c:\\windows\\system32\\cmd.exe)) == 53 . /  chars\n  </code>\n  count starts from 1  eax became srchstr and ollydbg broke the next instruction is yet to be executed\n </p>\n <pre><code>copy con strlen\nC.:.\\.W.I.N.D.O.W.S.\\.S.y.s.t.e.m.3.2.\\.c.m.d...e.x.e^Z\n        1 file(s) copied.\n\nwc strlen\n      0       1      53 strlen\n</code></pre>\n <p>\n  reading the comment it appears there is a misconception about the proposed \nmethod above so to clarify this is\n  <strong>\n   not\n  </strong>\n  a conditional breakpoint and is not tied to any offset that should be known beforehand  this method of setting a pause is dynamic evaluation of the condition on each step (in both trace in and trace over) and pause the trace when condition is met \ncondition can also be modified inflight\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Apr 4, 2015 at 20:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">This would be a good answer if the OP hadn't explicitly stated he doesn't know where the function is, so he can't set your conditional breakpoint to begin with.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">hehe guntram he said stack :) a function can take only so much arguments :) brute forcing around with [[esp+4]]  [[esp+8]] on system calls shouldnt take much of time i think mileage can obviously vary but not undoable why one can launch 10 ollydbgs with different conditions and go for a coffee if feasible (if no multiinstances then multi vms)</span>",
                    "time": null
                },
                {
                    "user": "opc0de",
                    "text": "<span class=\"comment-copy\">ctrl+f12 executes program instruction by instruction I need to interact with program too press some buttons in order to trigger the function I am interested into. Any way thanks for help</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i clciked five buttons in the log for 5 messageboxes with ctrl+f12</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@GuntramBlohm i reread your comment and i think you have a misconception also about the method proposed   setting a pause with ctrl+t is not a conditional breakpoint it is dynamic evaluation on each step so it is not tied to an offset  as such and can be set independent of any offset even while tracing is in progress</span>",
                    "time": null
                }
            ]
        }
    ]
}