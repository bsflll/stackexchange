{
    "title": "Help in reverse engineering a boarding gate scanner's firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/31165/help-in-reverse-engineering-a-boarding-gate-scanners-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on a custom Access Control system for my local airport that will validate passengers' boarding passes and I've been given two\n  <strong>\n   DESKO GRSK 502\n  </strong>\n  scanners.\n </p>\n <p>\n  Unfortunately, there's absolutely no documentation available on them and the manufacturer is not willing to disclose any information on how the scanners operate even though they reached End of Service in 2020.\n </p>\n <p>\n  I managed to find a script that is used to update its firmware and it appears to contain what I've been looking for.\n </p>\n <p>\n  I am a complete newbie when it comes to reverse engineering, so the only things I've managed to get from the firmware are some random command strings. Unfortunately, however, the scanner always returns a 'Negative Acknowledge' response, so I'm guessing it expects some initialization command before accepting any others.\n </p>\n <p>\n  Here is the firmware itself:\n  <a href=\"https://pastebin.com/UDgne3Q8\" rel=\"nofollow noreferrer\">\n   https://pastebin.com/UDgne3Q8\n  </a>\n  I used Hex2Bin to convert the firmware file to a .bin file and the loaded it up on IDA Pro. Upon Googling, I came across\n  <a href=\"https://revengrazer.blogspot.com/2013/06/firmware-part-3-setting-up-ida-pro.html\" rel=\"nofollow noreferrer\">\n   this blog post\n  </a>\n  which mentions that IDA Pro should be provided with the processor's ROM start address in order to decompile it properly.\n </p>\n <p>\n  Here's the inside of the scanner:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/3pqDT.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/3pqDT.jpg\"/>\n  </a>\n </p>\n <p>\n  I assumed that the processors is 'P80C5521BA', but there's no information on NXP's website on its ROM start address.\n </p>\n <p>\n  I would appreciate any help I can get in extracting any information from that firmware file. üôè\n </p>\n <p>\n  Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "159",
    "tags": [
        "firmware"
    ],
    "user": "Gavouli",
    "time": "Jan 5, 2023 at 10:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The CPU in the\n  <code>\n   P80C552\n  </code>\n  microcontroller is a\n  <code>\n   80C51\n  </code>\n  .\nAfter reset, this begins execution at address\n  <code>\n   0x0000\n  </code>\n  .\n </p>\n <p>\n  A quick inspection of your firmware hex file confirms this.\n </p>\n <p>\n  This is -\n </p>\n <pre><code>:03000000020403F4\n\n=>\n0000:  020403    LJMP $0403  // long jump to address `0x0403`\n</code></pre>\n <p>\n  If we follow this -\n </p>\n <pre><code>:10040000320178C2AFC2977581AD90FFD043820FA1\n\n=>\n\n0403:  C2AF      CLR IE.7 // disable all interrupts\n....\n</code></pre>\n <p>\n  After disabling interrupts, the code continues as typical reset code, setting the stack pointer, data pointer etc.\n </p>\n <p>\n  This confirms that address\n  <code>\n   0000\n  </code>\n  is a plausible start address for your firmware.\n </p>\n <p>\n  However, to actually use it in IDA you need to be aware that the 8051 has a Harvard architecture. Please look at the related question & answer\n  <a href=\"https://reverseengineering.stackexchange.com/questions/22168/loading-8051-binary-to-ida-with-romexternal-ram-configuration\">\n   here\n  </a>\n  for details.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ian Cook",
            "time": "Nov 23, 2022 at 21:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}