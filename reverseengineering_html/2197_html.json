{
    "title": "Take A Snippet of Assembly and Make All Side Effects Explicit?",
    "link": "https://reverseengineering.stackexchange.com/questions/2197/take-a-snippet-of-assembly-and-make-all-side-effects-explicit",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I came across a small function whose only side effects were to modify the state of some processor flags. When I decompiled this function using the Hex Rays decompiler, I simply got an empty function, which is not useful at all in figuring out what the function does. Instead I had to look up each instruction in the assembly language manual and read the pseudocode to determine the net effect of the function. Is there some tool I can paste assembly instructions into and it will spit out\n  <em>\n   all\n  </em>\n  side effects, including flags? I'm interested in x86.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "385",
    "tags": [
        "assembly",
        "x86",
        "ida"
    ],
    "user": "user2142",
    "time": "Jun 7, 2013 at 21:49",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n When you say you decompiled it, you mean via Hex-Rays?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user2142",
            "text": "<html><body><span class=\"comment-copy\">\n Yeah I was using IDA and Hex-Rays.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @user2142: best bet is to learn assembly first, get used to that and then proceed to the decompiler, not the other way around.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user2142",
            "text": "<html><body><span class=\"comment-copy\">\n I know know assembly I just had to consult the manual because I did not have all the flag side effects memorized\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @user2142: most concise most general-purpose opcodes can be found on a\n <a href=\"http://www.jegerlehner.ch/intel/\" rel=\"nofollow noreferrer\">\n  two side cheat page here\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hex-Rays performs liveness analysis and dead code elimination, which in the case of your function, it sounds like it decided everything was dead.  I think it's impossible to tell Hex-Rays via __usercall that the return location for some function is in a flag location, so under that assumption, Hex-Rays can't help in this situation.\n </p>\n <p>\n  What you want is a tool that is capable of rendering the intermediate language translation for a given instruction or block of instructions.  To that extent, tools such as BitBlaze, BAP, and miasm can help.  Also see\n  <a href=\"http://edmcman.bitbucket.org/blog/2013/02/27/bap-for-everyone/\">\n   this link\n  </a>\n  for a language-agnostic interface to BAP.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Rolf Rolles",
            "time": "Jun 7, 2013 at 21:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2142",
                    "text": "<span class=\"comment-copy\">Never heard of this tool, this is exactly what I want. Though I guess I am depending on the fact that they read the Intel manuals carefully and got all the side effects right.</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">No matter what tool you use, you will depend on a fact such as that.  In the case of dynamic analysis, you can at least watch in the debugger to verify that changes are happening in the specified locations.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@user2142: To me it sounds a bit odd that someone would rather read an IR and not the original assembly code. May I ask why do you want that?</span>",
                    "time": null
                },
                {
                    "user": "user2142",
                    "text": "<span class=\"comment-copy\">I'm not really sure I want that. Just asked a question that popped into my head while reversing!</span>",
                    "time": null
                }
            ]
        }
    ]
}