{
    "title": "How Does ARM64 EOR with Shift Work?",
    "link": "https://reverseengineering.stackexchange.com/questions/30660/how-does-arm64-eor-with-shift-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reverse engineering an ARM64 binary and I came across the following instruction\n </p>\n <pre><code>48 05 48 4A    eor w8, w10, w8, lsr #1\n</code></pre>\n <p>\n  I looked up the definition of ARM64's\n  <code>\n   eor\n  </code>\n  instruction here:\n  <a href=\"https://developer.arm.com/documentation/dui0473/m/arm-and-thumb-instructions/eor\" rel=\"nofollow noreferrer\">\n   https://developer.arm.com/documentation/dui0473/m/arm-and-thumb-instructions/eor\n  </a>\n </p>\n <p>\n  Unfortunately, the information in that documentation doesn't directly address the optional\n  <code>\n   lsr #1\n  </code>\n  part of the instruction.\n </p>\n <p>\n  I understand this instruction would generally perform a Bitwise Exclusive OR between registers w10 and w8, storing the result in register w8. What I'm unsure about is the Logical Shift Right portion. Does this shift occur on the result of the EOR, or does it first shift one of the registers and then perform the EOR?\n </p>\n <p>\n  Also, if anyone can recommend a good tool for testing this I would be appreciative.\n </p>\n <p>\n  Thank you.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "645",
    "tags": [
        "arm64",
        "aarch64"
    ],
    "user": "h0r53",
    "time": "Jul 19, 2022 at 18:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's the 2nd operand (i.e.\n  <code>\n   w8\n  </code>\n  in your example) that is shifted before the relevant calculation is done.\n </p>\n <p>\n  You can see the explanation in the same document you linked to in the section\n  <a href=\"https://developer.arm.com/documentation/dui0473/m/arm-and-thumb-instructions/syntax-of-operand2-as-a-register-with-optional-shift\" rel=\"noreferrer\">\n   Syntax of Operand2 as a register with optional shift\n  </a>\n  .  This is pulled out separately in the documentation as this\n  <code>\n   Operand2\n  </code>\n  feature applies to multiple different instructions, not just\n  <code>\n   EOR\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Ian Cook",
            "time": "Jul 19, 2022 at 20:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "h0r53",
                    "text": "<span class=\"comment-copy\">Thank you. I was unable to initially find this information since it was not directly included with the <code>EOR</code> documentation. This explanation confirms my previous conclusion regarding how the EOR with shift works.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found a simple online ARM emulator here:\n  <a href=\"https://wunkolo.github.io/OakSim/\" rel=\"nofollow noreferrer\">\n   https://wunkolo.github.io/OakSim/\n  </a>\n </p>\n <p>\n  I crafted an example and it appears that the instruction works by first performing the Logical Shift Right on register\n  <code>\n   w8\n  </code>\n  , then the result of that operation is EOR'd with register\n  <code>\n   w10\n  </code>\n  , and finally the result is stored in register\n  <code>\n   w8\n  </code>\n  .\n </p>\n <p>\n  So the sequence of events is:\n </p>\n <ol>\n  <li>\n   Shift register\n  </li>\n  <li>\n   EOR\n  </li>\n  <li>\n   Store result\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "h0r53",
            "time": "Jul 19, 2022 at 18:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}