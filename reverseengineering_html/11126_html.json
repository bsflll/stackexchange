{
    "title": "How to identify the structure of this specific data file? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/11126/how-to-identify-the-structure-of-this-specific-data-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/11126/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2015-10-27 07:39:54Z\">\n        9 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/11126/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  What is the structure of this database file from an old videogame?\n  <a href=\"https://www.dropbox.com/s/ioe26pi3y1w3320/TMDATA1.S8?dl=0\" rel=\"nofollow\">\n   https://www.dropbox.com/s/ioe26pi3y1w3320/TMDATA1.S8?dl=0\n  </a>\n </p>\n <p>\n  Apologies in advance because fixing specific problems is not really the spirit of Stack Exchange, rather than creating a useful set of Q&As. If you can just point me in the right direction, I'd be really grateful. :-)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "364",
    "tags": [
        "binary-analysis",
        "file-format"
    ],
    "user": "Francesco Abeni",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's certainly not a well known format. A quick glance at the file with a hex viewer shows that it mainly consists of records that all have similar, but not identical, size and layout; the very end of the file seems to be something different.\n </p>\n <p>\n  The first 2 Bytes - 047E - seem to be the number of records (1150).\n </p>\n <p>\n  Each of the records seems to start with 7 strings that, in most cases, denote a country, adjective for the country, capital, and team name - i'd guess the save file is from a soccer game or similar.\n </p>\n <p>\n  For example, one of the record starts at\n  <code>\n   1B85\n  </code>\n  is\n  <code>\n   07 00 Algeria 07 00 Algeria 07 00 Algeria 07 00 Algeria 08 00 Algerian 07 00 Algiers 0F 00 Stade Olympique\n  </code>\n  . Obviously, these are 2-bytes integers denoting a string length; the fact they are written as\n  <code>\n   07 00\n  </code>\n  , not\n  <code>\n   00 07\n  </code>\n  , tells you the file has a little endian structure, which may help identifying other numbers in the file.\n </p>\n <p>\n  Unfortunately, the records have different sizes, but if you take the different string lengths into account, they work out nicely. This is a list of the first record positions, their sizes, and the combined length if strings in them:\n </p>\n <pre><code>pos.  size  strings  size w/o strings\n0002  0597  005b     053C\n0599  0582  0046     053C\n0b1b  0582  0046     053C\n109D  056D  0031     053C\n160A  057B  003F     053C\n1B85  0576  003A     053C\n20FB  0569  002D     053C\n2664  0570  0034     053C\n2BD4  ........\n</code></pre>\n <p>\n  Subtracting 0E for the 7 2-byte length markers results in 0x52E bytes that each record has behind the strings.\n </p>\n <p>\n  Next, i noticed that many of these bytes seem to be the same in many of the records. So i wrote a small perl program to read the file, and create a histogram to show which byte in which position occurs how often in the records:\n </p>\n <pre><code>#!/usr/bin/perl\n\nopen(IN, \"<$ARGV[0]\") or die \"can't open $ARGV[0]: $!\";\nsysread(IN, $buffer, 2);\n$nclubs=unpack(\"v\", $buffer);\n\nfor (my $i=0; $i<$nclubs; $i++) {\n    printf(\"%3d  \", $i);\n    # read strings\n    for (my $j=0; $j<7; $j++) {\n        sysread(IN, $buffer, 2);\n        my $length=unpack(\"v\", $buffer);\n        sysread(IN, $buffer, $length);\n        print \"|$buffer\";\n    }\n    print \"\n\";\n    sysread(IN, $buffer, 0x52E);\n\n    for (my $j=0; $j<0x52E; $j++) {\n        my $byte=ord(substr($buffer, $j, 1));\n        $count[$j][$byte]++;\n    }\n}\n\nfor (my $i=0; $i<0x52E; $i++) {\n    my $flag=0;\n    printf(\"%03x:\", $i) unless $flag;\n    for (my $j=0; $j<256; $j++) {\n        if ($count[$i][$j]>0) {\n            $flag=1;\n            printf \" 0x%02x(%dx)\", $j, $count[$i][$j];\n        }\n    }\n    print \"\n\";\n}\n</code></pre>\n <p>\n  This results in (small extract):\n </p>\n <pre><code>314: 0x00(1150x)\n315: 0x00(1150x)\n316: 0x00(1134x) 0x6b(16x)\n317: 0x00(1150x)\n318: 0x00(1134x) 0x2c(16x)\n319: 0x00(1100x) 0x6b(50x)\n31a: 0x00(1150x)\n31b: 0x00(1150x)\n31c: 0x00(1083x) 0x6b(67x)\n31d: 0x00(1150x)\n31e: 0x00(1150x)\n31f: 0x00(1100x) 0x6b(50x)\n320: 0x00(1150x)\n</code></pre>\n <p>\n  which means that bytes\n  <code>\n   314\n  </code>\n  and\n  <code>\n   315\n  </code>\n  are always zero, and byte\n  <code>\n   316\n  </code>\n  is\n  <code>\n   0\n  </code>\n  in most cases, but\n  <code>\n   0x6b\n  </code>\n  (107) 16 times, i.e. for 16 teams. Byte\n  <code>\n   31c\n  </code>\n  is\n  <code>\n   0x6b\n  </code>\n  for 67 teams. You could now proceed to compare this to what happens when you load the save file into the game; is there anything that's special for exactly 16, or 67, of these 1150 teams? You could also look for the teams that have these values, and check what's special for these exact teams.\n </p>\n <p>\n  Investing a lot of time into this will possibly allow you to identify most bytes without actually decompiling the application. However, i'd expect you can identify only a few of the values this way, and you will need to do what Jason suggested if you really want to understand everything. On the other hand, if the team/capital/country names are the only thing you're interested in, my program will already output them for you.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Oct 16, 2015 at 21:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Francesco Abeni",
                    "text": "<span class=\"comment-copy\">That's a very useful and extended explanation, thakn you very much. I guess it's probably more convenient to start looking for the game source code / specs.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The file does not have a well-known file header (as per\n  <a href=\"http://www.garykessler.net/library/file_sigs.html\" rel=\"nofollow\">\n   http://www.garykessler.net/library/file_sigs.html\n  </a>\n  ). So unless it happens to be a\n  <a href=\"http://www.simul8.com/viewer/faqs.htm\" rel=\"nofollow\">\n   SIMUL8 file\n  </a>\n  (based on the file extension), you'd need to reverse engineer the video game's code to determine the file format.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Oct 16, 2015 at 18:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}