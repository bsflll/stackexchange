{
    "title": "Unexpected value present in IMAGE_THUNK_DATA array",
    "link": "https://reverseengineering.stackexchange.com/questions/31840/unexpected-value-present-in-image-thunk-data-array",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am attempting to understand the PE File Format and I have come across an unexpected value in the\n  <em>\n   IMAGE_THUNK_DATA\n  </em>\n  Array.\n  \n\n  \n\n </p>\n <p>\n  Here are the file details:\n  \n\n  MD5: d82d3e003eb5c728d584e22ce7f36fbf\n  \n\n  File Name: ChromeSetup.exe\nLink: hxxps://www[.]google[.]com/chrome/thank-you.html?platform=win64&statcb=1&installdataindex=empty&defaultbrowser=0\n </p>\n <p>\n  (After some testing, I found out that the hash changes but the issue is the same.)\n </p>\n <p>\n  The issue I'm facing is that in one of the DLLs that is present, the\n  <em>\n   IMAGE_THUNK_DATA\n  </em>\n  structure contains an additional DWORD that is out-of-bounds. Here's the attached screenshot:\n  \n\n  \n\n  <a href=\"https://i.sstatic.net/gk95c.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Out-of-Bounds DWORD\" src=\"https://i.sstatic.net/gk95c.png\"/>\n  </a>\n  :\n </p>\n <p>\n  That first block i.e. (48fe 0100), resolves perfectly to \"SHGetFolderPathW\". But that second block (a8020080) is out of bounds - adjusting for endian format, we get 0x800002a8 - but the file itself is present up till 0x14DE2A (verified via 010 Editor and xxd). The third block signifies the end of the\n  <em>\n   IMAGE_THUNK_DATA\n  </em>\n  array so no issues there.\n </p>\n <p>\n  I've checked using 010 Editor and it shows \"SHGetFolderPathW\" as the only function imported from SHELL32.dll. I'd greatly appreciate some help understanding why that second block is present if no function name resolves to that address, which is out-of-bounds by itself?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "109",
    "tags": [
        "pe"
    ],
    "user": "smellyourbooks",
    "time": "May 4, 2023 at 12:52",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Iirc the msb (0x80000000) indicates pure import by ordinal and no name look up import by ordinal stuff\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "smellyourbooks",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb, looks like you are correct. In an\n <a href=\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2002/march/inside-windows-an-in-depth-look-into-the-win32-portable-executable-file-format-part-2\" rel=\"nofollow noreferrer\">\n  old MSDN article\n </a>\n , the setting of the high-bit is indicative of how the value is to be interpreted - either as an ordinal or a RVA. In this case, the value 0x800002A8 has the high-bit set so it is to be interpreted as an ordinal. The last 31-bits, when converted to decimal, give 680.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "smellyourbooks",
            "text": "<html><body><span class=\"comment-copy\">\n This would mean that the executable is stating to the loader that the first function (\"SHGetFolderPathW\") is to be loaded by name but the second one is to be loaded by ordinal (680) right? This leads me to another question - are ordinals set in stone or do they change as well?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Why should anything be set in granite you give a ordinal either it returns back an address to the function that matches the ordinal pass or returns error. Today 680 maybe shwhatever tommorow it can be shsomeother doesnt matter does it?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As I commented if the Most significant Bit (31 for x86 or  63 for x64)\n  \n\n  is set then the import is done by ordinal and no name lookup is done.\n </p>\n <p>\n  the msdn article by matt pietrek is still gold but if you need a latest reference\n  \n\n  <a href=\"https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#import-lookup-table\" rel=\"nofollow noreferrer\">\n   PE FORMAT IMPORT LOOKUP TABLE SECTION\n  </a>\n </p>\n <p>\n  ordinals can change be added  be removed  or be converted to name lookup\n </p>\n <p>\n  in an x64 win 10 machine using dumpbin from vs i can see shell32 export ordinal number 680 is the function IsUserAnAdmin()\n </p>\n <pre><code>dumpbin /exports c:\\Windows\\System32\\shell32.dll | grep -iE \"ordinal hint| 680\"\n    ordinal hint RVA      name\n        680   57 002752A0 IsUserAnAdmin\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "May 8, 2023 at 17:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}