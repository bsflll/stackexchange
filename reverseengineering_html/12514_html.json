{
    "title": "Reverse Engineering Crypto Methods",
    "link": "https://reverseengineering.stackexchange.com/questions/12514/reverse-engineering-crypto-methods",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since few days, Ive started to Reverse Engineer a little game. That game includes some data files, where the 3d files are stored. I want to write a little Software, where I can add own 3d models, to improve (cutomize) that game.\n </p>\n <p>\n  Luckily the game is compiled in debug mode, so I can clearly see all method names, c++ classes, etc., so I clearly know what happens in particular places in the code. Since I am new on reverse engineering (but not new in development), Ive figured out a lot of the code base and reimplemented many things related to the \"Data management of the game\".\n </p>\n <p>\n  I see, in the disassembled code, there is a class which decrypts a file. Two methods are used. Initializing the decryptor and reading a character. Since I am not good at \"reverse engineering\" and crypto algorithms (I don´t even know whether the used crypto is a know algorithm or an own one), I hoped you guys could help me out to figure out what happens exactly on those methods, so I can re implement that in c++.\n </p>\n <p>\n  I am going to include the asm sections and the pseudo c code (which my decompiler has produced). Notice that these methods are part of a class. So I will give you some additional information of what Ive figured out so far. I hope you guys could help me.\n </p>\n <p>\n  Decryptor init method:\n(edi + 0x100 + offset) seems to be a char array of size 128 byte, but I couldn´t figure out the rest (It seems to be worked with char array, but like mentioned, I dont have that much experience with RE)\n </p>\n <p>\n  ASM Code:\n  <a href=\"http://pastebin.com/LiM10Cr5\" rel=\"nofollow\">\n   http://pastebin.com/LiM10Cr5\n  </a>\n </p>\n <p>\n  Pseudo-C:\n  <a href=\"http://pastebin.com/1ewfxAh1\" rel=\"nofollow\">\n   http://pastebin.com/1ewfxAh1\n  </a>\n </p>\n <p>\n  Decryptor decrypt next char method:\n </p>\n <p>\n  (edi + 0x200) seems to be a char (byte) where the next char or something similar is stored.\n </p>\n <p>\n  ASM Code:\n  <a href=\"https://pastebin.com/aWp8LYua\" rel=\"nofollow\">\n   https://pastebin.com/aWp8LYua\n  </a>\n </p>\n <p>\n  Pseudo-C:\n  <a href=\"https://pastebin.com/u4w5yGYS\" rel=\"nofollow\">\n   https://pastebin.com/u4w5yGYS\n  </a>\n </p>\n <p>\n  If you need some more information, like mentioned, the application is fully compiled in debug mode, so its like a dream... I have all labels, all vtables, all information...\n </p>\n <p>\n  I also have a read method, where these both methods are gonna called, but I guess I have reverse engineered that method properly (I hope so)...\n </p>\n <p>\n  Thanks :)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "867",
    "tags": [
        "cryptography"
    ],
    "user": "Vertices",
    "time": "Apr 24, 2016 at 8:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The crypto definitely isn't a \"good\" one. Check what happens in your\n  <code>\n   nextDecrypt\n  </code>\n  function.\n </p>\n <h2>\n  The nextDecrypt function\n </h2>\n <p>\n  There's a variable at\n  <code>\n   ebx+0x200\n  </code>\n  which gets loaded into\n  <code>\n   edx\n  </code>\n  . This variable gets incremented by one, then written back to\n  <code>\n   ebx+0x200\n  </code>\n  , and this variable is also used to be\n  <code>\n   xor\n  </code>\n  ed with some byte (low byte of\n  <code>\n   ecx\n  </code>\n  , i.e.\n  <code>\n   cl\n  </code>\n  ) before that byte is returned. So we have an algorithm that, very trivially,\n  <code>\n   xor\n  </code>\n  s every byte, with the value that's\n  <code>\n   xor\n  </code>\n  ed being incremented every time.\n </p>\n <p>\n  There's a bit of special casing; the\n  <code>\n   xor\n  </code>\n  value avoids the value\n  <code>\n   0\n  </code>\n  ; if the value is\n  <code>\n   0xff\n  </code>\n  , it's set to\n  <code>\n   1\n  </code>\n  instead of being incremented. Also, the value that's returned gets negated, and your decompiler made an error here; the\n  <code>\n   !\n  </code>\n  operator should have been a\n  <code>\n   ~\n  </code>\n  as that's what the\n  <code>\n   not\n  </code>\n  assembly instruction does. (Another reason why you should use decompiled C as a first glance, but always look at assembly code to understand what's really going on).\n </p>\n <h2>\n  Initialization\n </h2>\n <p>\n  The initialization function seems to be a bit more complicated, until you realize that there are 8 identical blocks in the\n  <code>\n   do..while\n  </code>\n  loop; probably an inner loop that the compiler unrolled. It seems to shuffle around the bytes a bit at\n  <code>\n   [edx+0x100]\n  </code>\n  , and create an index map at\n  <code>\n   [ecx]\n  </code>\n  . The last thing it does seems to initialize the\n  <code>\n   xor\n  </code>\n  value from the\n  <code>\n   nextDecrypt\n  </code>\n  to\n  <code>\n   0x7f\n  </code>\n  . But something seems to be wrong in the first part; your code accesses\n  <code>\n   arg_4\n  </code>\n  but there is just an\n  <code>\n   arg_0\n  </code>\n  . And this\n  <code>\n   arg_4\n  </code>\n  seems to influence the step with of the byte shuffler.\n </p>\n <p>\n  This is about as far as it makes sense to statically analyze the code; what a reverser should do at this point is run the thing in a debugger, and single-step through those 2 functions, checking how the data buffers change, to verify those assumptions. For example, i'd verify the \"initializing the xor value to 0x7f\" assumption can't be checked from your code alone, but in a debugger, you could check if the addresses are indeed the same. Also, it would be interesting to know what some real-world values of these arguments are, and where they come from.\n </p>\n <h2>\n  Summary\n </h2>\n <p>\n  So, to sum it up: This seems to be a \"crypto\" mechanism the author invented, not a standard one; it's not a complicated one; and you'll need some dynamic analysis of the software to get the details right of what it does.\n </p>\n <h2>\n  Additional note\n </h2>\n <p>\n  In cases like this, it makes sense to give as much information as possible, for example, the name of the game you're hacking. For example, loading up the binary in IDA makes analysis much easier than plaintext sourcecode, and people might actually be able to run the code and test a few assumptions on it.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Apr 24, 2016 at 9:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vertices",
                    "text": "<span class=\"comment-copy\">First, thanks for your answer. Let me clear the arg_4 and arg_0 problems. Arg_0 is a pointer to the object instance it self (c++ equivalence is \"this\").  arg_4 is actually the first argument (it should be named unsigned int arg4).</span>",
                    "time": null
                },
                {
                    "user": "Vertices",
                    "text": "<span class=\"comment-copy\">Answer on your additional note: I don´t know whether I am allowed to name the game or not (I guess RE is not allowed by EULA, but I am not sure). The game is available on both platforms windows and osx. Only the OSX version is compiled in debug mode. Can you help me also by implementing that in c++ when I fail?</span>",
                    "time": null
                },
                {
                    "user": "Vertices",
                    "text": "<span class=\"comment-copy\">Ive figured out in the recent hours, what is generated by initAndReset. It looks very simple and there is a pattern:  <a href=\"http://pastebin.com/pGmyfDqA\" rel=\"nofollow noreferrer\">pastebin.com/pGmyfDqA</a></span>",
                    "time": null
                }
            ]
        }
    ]
}