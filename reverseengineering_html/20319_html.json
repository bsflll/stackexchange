{
    "title": "Sniffing serial Bluetooth traffic on Android",
    "link": "https://reverseengineering.stackexchange.com/questions/20319/sniffing-serial-bluetooth-traffic-on-android",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Related to\n  <a href=\"https://reverseengineering.stackexchange.com/q/20293/26989\">\n   UE Megaboom serial protocol\n  </a>\n  : I am trying to get some insights on the serial protocol spoken by the UE Megaboom, which I suspect is how the app controls the advanced features of the speaker.\n </p>\n <p>\n  One approach would be to install the app on an Android VM, connect to the speaker and capture the traffic exchanged.\n </p>\n <p>\n  With VirtualBox, I would probably need to connect a Bluetooth dongle as a USB device and let the VM control it.\n </p>\n <p>\n  How can I capture the serial traffic exchanged between the speaker and the app?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "android",
        "serial-communication",
        "sniffing",
        "bluetooth"
    ],
    "user": "user149408",
    "time": "Jan 9, 2019 at 14:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to\n  <a href=\"https://stackoverflow.com/a/23900782/2703209\">\n   this StackOverflow answer\n  </a>\n  , Android has a setting in Developer Options from 4.4 onwards. You first need to enable Developer Settings (if you have not done so already), then enable “Enable Bluetooth HCI snoop log”.\n </p>\n <p>\n  I have not tried this myself yet, but according to the information I could find:\n </p>\n <ul>\n  <li>\n   Communication should be logged to a file called\n   <code>\n    /sdcard/btsnoop_hci.log\n   </code>\n   .\n  </li>\n  <li>\n   If your external storage dir is something else than\n   <code>\n    /sdcard\n   </code>\n   , modify the path accordingly.\n  </li>\n  <li>\n   Some flavors of Android may use an entirely different path. Look for the\n   <code>\n    FileName\n   </code>\n   parameter in\n   <code>\n    /etc/bluetooth/bt_stack.conf\n   </code>\n   to find the correct path. (Some flavors of Android may put this file in\n   <code>\n    /system/etc\n   </code>\n   or\n   <code>\n    /vendor/etc\n   </code>\n   .)\n  </li>\n  <li>\n   On some flavors of Android (including Android x86_64 CM 14.1), none of the above will work but you will find the log in\n   <code>\n    /data/misc/bluetooth/logs/btsnoop_hci.log\n   </code>\n   (you need to have root permissions to get the file).\n  </li>\n  <li>\n   The resulting file can then be analyzed with Wireshark or similar.\n  </li>\n </ul>\n <p>\n  To get Bluetooth from an Android VM running on VirtualBox:\n </p>\n <ul>\n  <li>\n   If you are on Linux (tried on Ubuntu 18.04):\n   <ul>\n    <li>\n     Add yourself to the\n     <code>\n      vboxusers\n     </code>\n     group, e.g. by running\n     <code>\n      sudo usermod -a -G vboxusers your_user_name\n     </code>\n    </li>\n    <li>\n     Log out and back in for the new group membership to take effect.\n    </li>\n   </ul>\n  </li>\n  <li>\n   Start your Android VM.\n  </li>\n  <li>\n   In Devices > USB Devices, connect the Bluetooth adapter to the VM. It may have an inconspicuous name (mine is just called Intel [0001]).\n  </li>\n  <li>\n   Optionally, add a USB filter to have the VM grab the BT device automatically whenever it starts.\n  </li>\n  <li>\n   Be aware that the host system will lose access to the BT adapter while it is in use by the VM. If you have a BT mouse or keyboard, either replace it with a wired one, or get an additional BT adapter and use that for your VM.\n  </li>\n </ul>\n <p>\n  In practice, however, I was unable to get a reliable Bluetooth connection from the Android VM. I can scan for devices and managed to pair the BT device (though that took multiple attempts), but I never managed to connect to the device. I suspect that is because Android is quite resource-hungry, and the overhead of virtualization along with a restriction to 2 out of 4 processor cores (which I have set this way to keep VMs from hogging my entire CPU) does not leave enough room for Android to run smoothly. Will need to retry with Android x86_64 on a USB stick, running on physical hardware.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user149408",
            "time": "Jan 11, 2019 at 0:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}