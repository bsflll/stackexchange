{
    "title": "Is it possible to use an xref on memory address in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/16889/is-it-possible-to-use-an-xref-on-memory-address-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Say, if I have the following disassembly:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ayQCl.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ayQCl.png\"/>\n  </a>\n </p>\n <p>\n  How do I find out where else is that byte at\n  <code>\n   [eax+0xFCA]\n  </code>\n  is referenced? I can't seem to use the IDA's\n  <code>\n   xref\n  </code>\n  command on it, but doing\n  <code>\n   xref\n  </code>\n  on\n  <code>\n   fs:18h\n  </code>\n  gives me too many results.\n </p>\n <p>\n  PS. I'm using IDA Pro as a disassembler, while stepping through\n  <code>\n   kernel32.dll\n  </code>\n  with\n  <code>\n   WinDbg\n  </code>\n  as a debugger in a user mode. In the screenshot above the\n  <code>\n   EIP\n  </code>\n  (breakpoint) is currently at the\n  <code>\n   744E78D6\n  </code>\n  opcode of interest.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "548",
    "tags": [
        "ida",
        "windows",
        "windbg"
    ],
    "user": "c00000fd",
    "time": "Dec 2, 2017 at 8:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA's xref functionality only works for static references. The references it detects by statically analyzing the code. It cannot find any dynamic or runtime references to addresses using the xref functionality.\n </p>\n <p>\n  Instead, you'd need to use the memory breakpoint feature IDA's debugging interface has (or any other debugger, for that matter) to breakpoint any time a memory address is accessed. Be advised memory breakpoints has several caveats such as incurring a noticeable performance penalty and being detectable by anti-debugging techniques. Hardware breakpoints may also be used for the same purpose but are harder to detect by anti-debugging techniques.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Dec 2, 2017 at 8:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}