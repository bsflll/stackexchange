{
    "title": "Handling stack strings in IDA, but with a twist (wchar_t-based, not char-based)",
    "link": "https://reverseengineering.stackexchange.com/questions/30463/handling-stack-strings-in-ida-but-with-a-twist-wchar-t-based-not-char-based",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Consider the following disassembly:\n </p>\n <pre><code>mov     dword ptr [rbp+430h+var_458], 690068h   ; L'i' + L'h'\nmov     dword ptr [rbp+430h+var_458+4], 2E0064h ; L'.' + L'd'\nmov     dword ptr [rbp+430h+var_458+8], 6C0064h ; L'l' + L'd'\nmov     dword ptr [rbp+430h+var_458+0Ch], 6Ch   ; 'l'\n; -> L\"hid.dll\"\n</code></pre>\n <p>\n  This is structurally similar to the disassembly\n  <a href=\"https://reverseengineering.stackexchange.com/q/2977/245\">\n   from this question\n  </a>\n  , except that the characters are\n  <code>\n   wchar_t\n  </code>\n  instead of\n  <code>\n   char\n  </code>\n  and moved dword-wise instead of byte-wise. The comment on the last\n  <code>\n   mov\n  </code>\n  was automatically added by IDA, I had to add the others myself.\n </p>\n <p>\n  The\n  <code>\n   6Ch\n  </code>\n  in the last\n  <code>\n   mov\n  </code>\n  line could also be treated with\n  <kbd>\n   R\n  </kbd>\n  to change the representation to what's currently shown in the comment.\n </p>\n <p>\n  Not so with the other lines.\n  <kbd>\n   R\n  </kbd>\n  has no effect there, although IDA has no trouble deciphering a dword-wise copy of char-based strings as evidenced in\n  <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-88-character-operand-type-and-stack-strings/\" rel=\"nofollow noreferrer\">\n   this blog article\n  </a>\n  (example from there: 70747468h -> 'ptth' -> \"http\").\n </p>\n <p>\n  I know of the\n  <a href=\"https://github.com/mandiant/flare-ida\" rel=\"nofollow noreferrer\">\n   stackstrings plugin\n  </a>\n  , but cannot use it due to its dependency on Python 2.x!\n </p>\n <p>\n  Is there a configuration setting (similar to string types and data carousel) to teach IDA the ability to use\n  <kbd>\n   R\n  </kbd>\n  in these cases to make better sense of those\n  <code>\n   wchar_t\n  </code>\n  -based stack strings?\n </p>\n <p>\n  IDA Pro version: latest (7.7.220218)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "562",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Jun 1, 2022 at 10:32",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "<html><body><span class=\"comment-copy\">\n The flare stackstrings module hasn't been converted to Python 3 because of a dependency on\n <code>\n  vivisect\n </code>\n . From the code:\n <code>\n  # currently depending on vivisect, which will never be ported to py3\n </code>\n .. however\n <code>\n  vivisect\n </code>\n has been ported to 3 so converting the stackstrings plugin to Python 3 is doable. Ref:\n <a href=\"https://vivisect.readthedocs.io/en/latest/vivisect/quickstart.html\" rel=\"nofollow noreferrer\">\n  vivisect.readthedocs.io/en/latest/vivisect/quickstart.html\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mega Tonnage",
            "text": "<html><body><span class=\"comment-copy\">\n I haven't set up for plugin development, but you could give this a try:\n <a href=\"https://github.com/m3gat0nn4ge/flare-ida/pull/1\" rel=\"nofollow noreferrer\">\n  github.com/m3gat0nn4ge/flare-ida/pull/1\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem was caused by a hex-string in the middle of the wchar_t string!\nThe stackstrings plugin correctly handles such strings, but IDA does not.\n </p>\n <p>\n  For example, in the following code:\n  <code>\n   mov     dword ptr [rbp+430h+var_458], 690068h   ; L'i' + L'h'\nmov     dword ptr [rbp+430h+var_458+4], 2E0064h ; L'.' + L'd'\nmov     dword ptr [rbp+430h+var_458+8], 6C0064h ; L'l' + L'd'\nmov     dword ptr [rbp+430h+var_458+0Ch], 6C68h  ; 'lh'\n; -> L\"hid.dll\"\n  </code>\n  IDA correctly displays the string as \"hid.dll\" when the last mov is changed to:\n    mov     dword ptr [rbp+430h+var_458+0Ch], 6C6Ch  ; 'll'\n; -> L\"hid.dll\"\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "user42194",
            "time": "Oct 14, 2022 at 12:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}