{
    "title": "How is a keygen made by reversing a software? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17764/how-is-a-keygen-made-by-reversing-a-software",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/17764/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2018-03-23 07:18:41Z\">\n        7 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/17764/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I know that a software is cracked by reverse engineering it and reading it's assembly code... My question is how and what do crackers look for in the assembly code? And how do they know what algorithm is being used to verify the serial code (since we cannot see the original source code)?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "9k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Mrunal Sonawane",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n The assembly code is better than the original source code, it tells you exactly what happens.  What you look for: start looking for the error message which is printed when your license key is wrong, and work back from there.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sounds like you are asking for an introduction to reverse engineering. If this is a topic that interests you, I recommend a well known tutorial series from the \"Legend of Random\". The original blog is now defunct, but is mirrored here:\n </p>\n <p>\n  <a href=\"http://octopuslabs.io/legend/blog/sample-page.html\" rel=\"nofollow noreferrer\">\n   http://octopuslabs.io/legend/blog/sample-page.html\n  </a>\n </p>\n <p>\n  The tutorials build upon one another, so if you'd like to learn start with #1 and finish them all.\n </p>\n <p>\n  <a href=\"http://octopuslabs.io/legend/blog/archives/1875/1875.htm\" rel=\"nofollow noreferrer\">\n   Tutorial #19\n  </a>\n  addresses your question more directly, but you should complete the other tutorials in order to gain the knowledge necessary to understand tutorial #19.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Mick",
            "time": "Mar 21, 2018 at 16:48",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In addition to what Mick said,\n  <a href=\"https://www.youtube.com/watch?v=DEDYk8zN53A\" rel=\"nofollow noreferrer\">\n   here is an excellent video tutorial on the topic\n  </a>\n  , where the individual takes nearly 2 hours to thoroughly demonstrate how to reverse engineer the key validation algorithm in a particular CrackMe.\n </p>\n <p>\n  While it's a \"simple\" example in a world filled with much more complex key/license algorithms, I think it's an incredible resource for beginners/intermediates to learn from.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "dsasmblr",
            "time": "Mar 21, 2018 at 18:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}