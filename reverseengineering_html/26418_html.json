{
    "title": "How to get PI UEFI binary when mcrypt is used?",
    "link": "https://reverseengineering.stackexchange.com/questions/26418/how-to-get-pi-uefi-binary-when-mcrypt-is-used",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am playing with a dump I made from a serial flash containing the BIOS of a ultra portable whose BIOS is protected by a password. I am trying to find the password or patch the routine which check the password.\n </p>\n <p>\n  Using\n  <code>\n   binwalk\n  </code>\n  I got the following result. I have search for strings containing 'password' but found nothing... So I think code is inside the mcrypt portion ...\n </p>\n <p>\n  Do you have idea what I can eventually do now to continue my journey??\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/1Uyr7.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/1Uyr7.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "565",
    "tags": [
        "binwalk",
        "bios",
        "uefi"
    ],
    "user": "rdpdo",
    "time": "Dec 3, 2020 at 8:47",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n Did any of the files that binwalk extracted yield anything?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rdpdo",
            "text": "<html><body><span class=\"comment-copy\">\n Just strings from the one wich is not crypted... I think that some UEFI PI firmware decrypt the ones wich are crypted ... So it would be possible to get the key for decrypting by disassembling the good UEFI PI... But it is hard for me...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You should use UEFITool to analyze the dump. The modules themselves are not encrypted and can be extracted and disassembled using any standard tool supporting PE binaries.\n </p>\n <p>\n  The BIOS password implementation differs from platform to platform. In the easy case it would be somewhere in the NVRAM area on the same SPI flash, possibly obfuscated.\n </p>\n <p>\n  In the difficult case it could be stored in or checked by a separate chip such as the EC (embedded controller) and you would have to dump and RE it too.\n </p>\n <p>\n  There was a good talk on cracking the password for Toshiba laptops which was using the latter approach:\n </p>\n <p>\n  <a href=\"https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Hacking-Toshiba-Laptops.pdf\" rel=\"nofollow noreferrer\">\n   https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Hacking-Toshiba-Laptops.pdf\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Dec 3, 2020 at 11:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rdpdo",
                    "text": "<span class=\"comment-copy\">Thanks you I finally get into disassembly and found the strings \"Invalid Password\"... Now I am trying to get the reference call to this strings but found nothing... I will try to emulate the bios with some tools. I found unicorn or qemu... Will try it and look your url about toshiba. I will perhaps try to patch the check for the password and reflash the chip.</span>",
                    "time": null
                }
            ]
        }
    ]
}