{
    "title": "Radare produces a bunch of `add byte [rax], al`, but why?",
    "link": "https://reverseengineering.stackexchange.com/questions/17555/radare-produces-a-bunch-of-add-byte-rax-al-but-why",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What does a bunch of\n  <code>\n   add byte [rax], al\n  </code>\n  mean? I see a lot of memory addressing point to specific parts of the shared library (.dll) that have for instance, this...\n </p>\n <pre><code>  0x10064faf8      0000           add byte [rax], al\n  0x10064fafa      0000           add byte [rax], al\n  0x10064fafc      0000           add byte [rax], al\n  0x10064fafe      0000           add byte [rax], al\n     ; XREFS: DATA 0x10041db20  DATA 0x100545d2c  DATA 0x100546999  DATA 0x1005469b0  DATA 0x100549de0  DATA 0x100549e00  \n  0x10064fb00      0000           add byte [rax], al\n  0x10064fb02      0000           add byte [rax], al\n  0x10064fb04      0000           add byte [rax], al\n  0x10064fb06      0000           add byte [rax], al\n</code></pre>\n <p>\n  What is that supposed to indicate to me when I see it? Do those spaces get rewritten or something when the dll is loaded into memory?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "5k",
    "tags": [
        "disassembly",
        "radare2",
        "disassemblers"
    ],
    "user": "Evan Carroll",
    "time": "Feb 28, 2018 at 2:28",
    "comments": [
        {
            "user": "tkausl",
            "text": "<html><body><span class=\"comment-copy\">\n Looks like it tried to disassemble data.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "<html><body><span class=\"comment-copy\">\n @tkausl shouldn't DATA should the actual data, and not just add\n <code>\n  add byte [rax], al\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tkausl",
            "text": "<html><body><span class=\"comment-copy\">\n I don't know radare2 but I think the\n <code>\n  0000\n </code>\n is your data, i.e. its a chunk of empty (zero) memory.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am adding another answer here because the comment by op is akin to a new question\n </p>\n <blockquote class=\"spoiler\">\n  <p>\n   I'm still confused. If ix has numerious references to the point at which I >!seeked too, why would it be that there is neither data nor code? Why would >!these references be pointed to the padded area or the alignment area?\n  </p>\n </blockquote>\n <p>\n  this is a demo of code which is referenced but doing a pd on reference would yield a bunch of zeros and has nothing to do with alignment or any other artifacts\n </p>\n <pre><code>C:\\evancarr>cat evancarr0.cpp\n#include <stdio.h>\n#include <windows.h>\nchar somecipher[MAX_PATH + 1];\nchar curdir[MAX_PATH + 1];\nchar deccipher[MAX_PATH + 1];\nint main(void) {\n    GetCurrentDirectoryA(MAX_PATH, curdir);\n    int cdlen = strlen(curdir);\n    for (int i = 0; i < cdlen; i++) {\n        somecipher[i] = curdir[i] ^ 0x1;\n    }\n    printf(\"%s\n\", somecipher);\n    for (int i = 0; i < cdlen; i++) {\n        deccipher[i] = somecipher[i] ^ 0x1;\n    }\n    printf(\"%s\n\", deccipher);\n}\n</code></pre>\n <p>\n  compiled and executed\n </p>\n <pre><code>C:\\evancarr>cl /Zi /W4 /analyze /EHsc /O2 evancarr0.cpp\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.12.25835 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nevancarr0.cpp\nMicrosoft (R) Incremental Linker Version 14.12.25835.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:evancarr0.exe\n/debug\nevancarr0.obj\n\nC:\\evancarr>evancarr0.exe\nB;]dw`ob`ss\nC:\\evancarr\n</code></pre>\n <p>\n  loading it in radare2 seeking to main and doing a pd on the referenced global buffer (as can be seen the buffer has a lot of xrefs but it is a bunch of zeroes \nand disassembling throws a bunch of add [eax] , al\n </p>\n <pre><code>C:\\evancarr>radare2 -AA evancarr0.exe\n\n[0x004015cd]> s 0x4065a0\n\n[0x004065a0]> pd 5\n|              ; JMP XREF from 0x00403161 (sub.KERNEL32.dll_GetCurrentDirectoryA_161)\n|           0x004065a0      56             push esi\n|           0x004065a1      68380d4600     push 0x460d38 <<<<<<<\n|           0x004065a6      6804010000     push 0x104                  ; 260\n|           0x004065ab      ff1500304600   call dword [sym.imp.KERNEL32.dll_GetCurrentDirectoryA] ;\n0x463000\n|           0x004065b1      be380d4600     mov esi, 0x460d38\n\n\n[0x004065a0]> pd 5 @ 0x460d38 \n               ; DATA XREF from 0x004065a1  \n               ; DATA XREF from 0x004065b1 \n               ; DATA XREF from 0x004065f1 \n               ; DATA XREF from 0x00406650 \n               ; DATA XREF from 0x004065c0 \n\n            0x00460d38      0000           add byte [eax], al\n            0x00460d3a      0000           add byte [eax], al\n            0x00460d3c      0000           add byte [eax], al\n            0x00460d3e      0000           add byte [eax], al\n            0x00460d40      0000           add byte [eax], al\n\n\n[0x004065a0]> pd 5 @ 0x460c30\n               ; DATA XREF from 0x00406658 \n               ; DATA XREF from 0x00406663 \n               ; DATA XREF from 0x004066a0 \n               ; DATA XREF from 0x00406700 \n               ; DATA XREF from 0x004065fc \n\n\n            0x00460c30      0000           add byte [eax], al\n            0x00460c32      0000           add byte [eax], al\n            0x00460c34      0000           add byte [eax], al\n            0x00460c36      0000           add byte [eax], al\n            0x00460c38      0000           add byte [eax], al\n[0x004065a0]>\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jonas Stein",
            "time": "May 2, 2019 at 19:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">This answer truly goes above and beyond and illustrates some misunderstandings that I have. Thanks a ton @blabb. You're a gentleman and a scholar.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>add byte [eax], al \n</code></pre>\n <p>\n  This instruction is falsly and accidentally blind-translated by disassemblers that don't distinguish between stored buffer/void spans and code segs, to explain what happens here you can refer to\n  <a href=\"https://www-user.tu-chemnitz.de/~heha/viewchm.php/hs/x86.chm/x86.htm#9.2\" rel=\"nofollow noreferrer\">\n   this blog section\n  </a>\n  :\n </p>\n <p>\n  <code>\n   ADD\n  </code>\n  has an opcode equal to\n  <code>\n   0000(h)\n  </code>\n  =\n  <code>\n   00000000 0000 0000(2)\n  </code>\n  where the two last flagbits {d,s} of the command opcode are not set which indicates an addition from a register to an R/M field,\n  <code>\n   s\n  </code>\n  stands for size of transfer that is 8 bites = 2bytes.\n </p>\n <p>\n  The second operand denotes an addition of reg value to local address in EAX, in 32 bits intel ASM, it is encoded\n  <code>\n   00(h)\n  </code>\n  for the reg\n  <code>\n   AL\n  </code>\n  , I don't know about 86/64x architectures but i guess it's same. Thus you see, mere coincidence.\n </p>\n <p>\n  Void spans are also a case where the program reserves extraspace to store imported DLL functions' entrypoints for locally invoked labels, local constants/strings, or between chunks of any forms of dispersed data.\n </p>\n <p>\n  These types of 0' spans can be frequently remarked in\n  <a href=\"https://en.wikipedia.org/wiki/Polymorphic_code\" rel=\"nofollow noreferrer\">\n   polymophic programs\n  </a>\n  that dump themselves differently in RAM after each execution instance, where they often change their relative EP's and function call addresses in an evasive way against unpackers and any form of code tracking.\n </p>\n <p>\n  A very strong guess that this stream of padded DATA either stored for cache purpose or steganographed should be preceded by a\n  <code>\n   JMP\n  </code>\n  instruction\n  <code>\n   CALL\n  </code>\n  or\n  <code>\n   RET\n  </code>\n  , otherwise, there must be a problem.\n </p>\n <p>\n  See here an example of some debuggers/decompilers that recognize padded DB's and skip over them.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Zx59g.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Zx59g.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Abr001am",
            "time": "Mar 4, 2018 at 21:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you probably have a seek outside of any known function in an area where there is no data or code  an area that is a filler to meet alignment requirements of page / section sizes\n </p>\n <p>\n  also called as zero padded area\n </p>\n <p>\n  for example\n </p>\n <pre><code>[0x010546bc]> px 10 ; pd 10\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n\n0x010546bc  0000 0000 0000 0000 0000                 ..........\n            0x010546bc      0000           add byte [eax], al\n            0x010546be      0000           add byte [eax], al\n            0x010546c0      0000           add byte [eax], al\n            0x010546c2      0000           add byte [eax], al\n            0x010546c4      0000           add byte [eax], al\n            0x010546c6      0000           add byte [eax], al\n            0x010546c8      0000           add byte [eax], al\n            0x010546ca      0000           add byte [eax], al\n            0x010546cc      0000           add byte [eax], al\n            0x010546ce      0000           add byte [eax], al\n[0x010546bc]>\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Feb 28, 2018 at 4:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">these are showing up in <code>pdb</code> entries though, why would things be seeking to an area with no data? Why would you ever have more than 8 bytes (64bits) of no-data for alignment?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if you are on windows please download and read pe coff spec for section alignment , segment alignment etc dont assume that any alginment might be 8 max universally</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">I'm still confused. If ix has numerious references to the point at which I seeked too, why would it be that there is neither data nor code? Why would these references be pointed to the padded area or the alignment area?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">your question does not provide enough information to process and reply sensibly  what do you think a declaration for a global char []  would look like in the binary space    you can refer to the buffer in say sprintf and a bunch of zeroes would be what you would see your query as it stands is vague  it may be might be can be  are guess work answers based on wyaiwyg (what you ask is what you get)</span>",
                    "time": null
                }
            ]
        }
    ]
}