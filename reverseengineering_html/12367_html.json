{
    "title": "capstone disasm framework - check if argument read/written",
    "link": "https://reverseengineering.stackexchange.com/questions/12367/capstone-disasm-framework-check-if-argument-read-written",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I cam using the capstone disassembly framework to disassemble intel x86 code. I need to find out which operands are read to or written from (or both). According to the website, this is possible by doing operand.access, which holds CSACREAD | CSAWRITE flags.\n </p>\n <p>\n  <a href=\"http://www.capstone-engine.org/op_access.html\" rel=\"nofollow\">\n   http://www.capstone-engine.org/op_access.html\n  </a>\n </p>\n <p>\n  However, if we look at the definition on github:\n </p>\n <p>\n  <a href=\"https://github.com/aquynh/capstone/blob/master/include/x86.h#L183\" rel=\"nofollow\">\n   https://github.com/aquynh/capstone/blob/master/include/x86.h#L183\n  </a>\n </p>\n <p>\n  no operand[0].access exists!\n </p>\n <p>\n  What's going on? Does this feature not exist yet? Was it removed?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "159",
    "tags": [
        "x86",
        "capstone"
    ],
    "user": "bernd feinman",
    "time": "Apr 7, 2016 at 18:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Now available in the Github branch next, Capstone provides a new API named cs_regs_access().\n  </p>\n </blockquote>\n <p>\n  This feature will be aviable in the version 4.0 of Capstone, you should switch to the\n  <em>\n   next\n  </em>\n  branch, that is already stable, to use it .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Nico01",
            "time": "Apr 7, 2016 at 21:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "bernd feinman",
                    "text": "<span class=\"comment-copy\">perfect. solved.</span>",
                    "time": null
                }
            ]
        }
    ]
}