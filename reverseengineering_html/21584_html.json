{
    "title": "Reverse Python Bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/21584/reverse-python-bytecode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I try reverse python bytecode (Content in a .pyc file). I do not want to decompile the code, just understand the Python bytecode :)\n </p>\n <p>\n  The LOAD_NAME statement, pushes the value associated with co_names (tuple of names of local variables...) [namei] onto the stack. (How can I check these values contained in co_names?)\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/WKyox.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"n \" src=\"https://i.sstatic.net/WKyox.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "python"
    ],
    "user": "jukebox",
    "time": "Jun 30, 2019 at 12:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use the\n  <a href=\"https://docs.python.org/2/library/marshal.html\" rel=\"nofollow noreferrer\">\n   <code>\n    marshal\n   </code>\n  </a>\n  module to load the code object.\n </p>\n <p>\n  Now, suppose you want to find out what does\n  <code>\n   LOAD_NAME 1\n  </code>\n  loads on the evaluation stack.\n </p>\n <pre><code>import marshal\n\nco = marshal.load(...)\nprint co.co_names[1]\n\n# Or if you want to print the entire co_names\nprint co.co_names\n</code></pre>\n <p>\n  Refer to the\n  <a href=\"https://docs.python.org/2/library/dis.html?highlight=co_names\" rel=\"nofollow noreferrer\">\n   <code>\n    dis\n   </code>\n  </a>\n  module for further reference.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "0xec",
            "time": "Jul 2, 2019 at 11:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}