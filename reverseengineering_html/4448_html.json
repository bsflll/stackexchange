{
    "title": "Reading Memory to bypass ASLR",
    "link": "https://reverseengineering.stackexchange.com/questions/4448/reading-memory-to-bypass-aslr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Modern exploits use different techniques to bypass ASLR. One of the technique used in some IE exploits is to leak memory using a BSTR overwrite.\n </p>\n <p>\n  How can an attacker leak memory, and how can he use it to effectively bypass ASLR?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "892",
    "tags": [
        "exploit",
        "vulnerability-analysis"
    ],
    "user": "john4tech",
    "time": "Jun 23, 2014 at 13:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  this is how a\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms221069%28v=vs.85%29.aspx\">\n   BSTR\n  </a>\n  represented in memory:\n </p>\n <p>\n  <code>\n   Length\n  </code>\n  <code>\n   Data string\n  </code>\n  <code>\n   Terminator\n  </code>\n </p>\n <p>\n  so an attacker will try to get an aligned heapspray and then trigger a vulnerability that will modify the Length part of a BSTR, it can be:\n </p>\n <ul>\n  <li>\n   a heap overflow.\n  </li>\n  <li>\n   a use after free that crashes on instructions that can modify a controlled memory address (eg AND 0xFFFFFFFF, edi) where edi is controlled by the attacker and points to the BSTR Length field\n  </li>\n  <li>\n   etc.\n  </li>\n </ul>\n <p>\n  then the length of the BSTR will be so big that you can read a big block of memory, that simply contain pointers to DLLS, from that you get the base address of those DLLS, AND BOOM!!! ASLR bypassed!\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Ange",
            "time": "May 26, 2014 at 8:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">Awesome. Thanks. Can you give me an example exploit that uses this technique? If possible, could please provide me a psuedo code that can be used to demonstrate ASLR bypass on windows using this technique? Thanks you very much.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Use\n  <code>\n   GetModuleHandle()\n  </code>\n  to get the base address of the module and the offset.\nThe offset is just\n  <code>\n   current address - base address\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "perror",
            "time": "May 27, 2014 at 20:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">But in order to call GetModuleHandle() we need to first bypass DEP. And to bypass DEP we need to first bypass ASLR. Let me know in what context GetModuleHandle() will work?</span>",
                    "time": null
                }
            ]
        }
    ]
}