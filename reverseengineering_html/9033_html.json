{
    "title": "How to recognize the function call in a dynamic lib?",
    "link": "https://reverseengineering.stackexchange.com/questions/9033/how-to-recognize-the-function-call-in-a-dynamic-lib",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  when I disassemble an OpenCV dynamic library file (\n  <code>\n   libopencv_imgproc.so\n  </code>\n  ), I find that there are a lot of\n  <code>\n   bl\n  </code>\n  instructions which target address are in the\n  <code>\n   .plt\n  </code>\n  section. But, I could'n find its symbol info.\n </p>\n <pre><code>00110ee0 <cvResize>:\n  110ee0:   b5f0        push    {r4, r5, r6, r7, lr}\n  110ee2:   4603        mov r3, r0\n  110ee4:   b0bf        sub sp, #252    ; 0xfc\n  ...\n  110ef4:   4ca8        ldr r4, [pc, #672]  ; (111198 <cvResize+0x2b8>)\n  110ef6:   9500        str r5, [sp, #0]\n  110ef8:   f70e ebda   blx 1f6b0 <_init+0x2b4>\n  ...\n</code></pre>\n <p>\n  I could not find the address\n  <code>\n   1f6b0\n  </code>\n  in the\n  <code>\n   .text\n  </code>\n  section. It actually is in the\n  <code>\n   .plt\n  </code>\n  section. However, I couldn't find it in the symbol table.\nHow can I get these missed symbol info?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "548",
    "tags": [
        "arm",
        "dynamic-linking"
    ],
    "user": "winter333",
    "time": "Jun 1, 2015 at 7:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Doing it the hard way:\n </p>\n <ol>\n  <li>\n   <p>\n    disassemble the target PLT stub and figure out what pointer it's using. E.g.:\n   </p>\n   <pre><code>359dc:  e28fc601    add ip, pc, #1048576    ; 0x100000\n359e0:  e28ccaa2    add ip, ip, #663552 ; 0xa2000\n359e4:  e5bcf900    ldr pc, [ip, #2304]!    ; 0x900\n</code></pre>\n   <p>\n    Here, the\n    <code>\n     ip\n    </code>\n    will be:\n    <code>\n     0x359e4+0x100000+0xa2000 = 0x1D79E4\n    </code>\n    , so the last\n    <code>\n     LDR\n    </code>\n    will dereference\n    <code>\n     1D79E4+0x900 = 0x1D82E4\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    look up the address in the list of relocs (\n    <code>\n     objdump -dr\n    </code>\n    ):\n   </p>\n   <pre><code>001d82e4  00005216 R_ARM_JUMP_SLOT   00000000   _ZN2cv10cvarrToMatEPKv\n</code></pre>\n  </li>\n </ol>\n <p>\n  Doing it the easy way:\n </p>\n <ol>\n  <li>\n   <p>\n    Just use IDA :), or at least a newer\n    <code>\n     objdump\n    </code>\n    <a href=\"http://www.sourceware.org/ml/binutils/2004-04/msg00469.html\" rel=\"nofollow\">\n     which knows about PLT stubs\n    </a>\n    .\n   </p>\n   <pre><code>000359dc <_ZN2cv10cvarrToMatEPKvbbi@plt>:\n</code></pre>\n  </li>\n </ol>\n <p>\n  Please note that\n  <code>\n   objdump\n  </code>\n  relies on the fact that the order of PLT stubs usually matches the order of relocations in the PLT reloc list. In theory, one can patch a PLT stub after linking so it uses another symbol's pointer.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 1, 2015 at 7:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}