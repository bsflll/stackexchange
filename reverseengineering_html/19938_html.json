{
    "title": "How to disassemble a packed .NET executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/19938/how-to-disassemble-a-packed-net-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse a Windows executable that shows as having been packed with\n  <code>\n   ENIGMA(5.X)\n  </code>\n  :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/VFTX4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/VFTX4.png\"/>\n  </a>\n </p>\n <p>\n  If I later check the class name for one of its UI elements, when the process is unpacked and running, it shows as a .NET class\n  <code>\n   WindowsForms10.BUTTON.app.0.378734a\n  </code>\n  :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/EqTA8.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/EqTA8.png\"/>\n  </a>\n </p>\n <p>\n  But if I then attach to that process with dnSpy, I can pause that .NET executable somewhere in\n  <code>\n   System.Windows.Forms.dll\n  </code>\n  in\n  <code>\n   Application\n  </code>\n  -\n  <code>\n   UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop()\n  </code>\n  function but there seems to be no info on the .NET assemblies from the target process itself:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/VndQ3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/VndQ3.png\"/>\n  </a>\n </p>\n <p>\n  My goal was to see the .NET code after the\n  <code>\n   Start\n  </code>\n  button click in that app. Any idea how should I proceed?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly",
        ".net",
        "packers"
    ],
    "user": "c00000fd",
    "time": "Nov 21, 2018 at 8:58",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n Can you add the real packed binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "<html><body><span class=\"comment-copy\">\n @Biswapriyo: I'm not sure what the policy is for posting this link here. (Moderator: I'll remove it if it's not allowed.) Here's it is,\n <a href=\"http://www.kahusecurity.com/tools/CMDWatcher_v0.2.7z\" rel=\"nofollow noreferrer\">\n  direct link to a 7-Zip file\n </a>\n . The author put a password on it: kahusecurity -- A word of caution: once you unzip it, it will be\n <a href=\"https://www.virustotal.com/#/file/48a3b7e0e92970ee2aff07f30f37e813be7c73c1595648bb68c7bb0b36b40fc7/detection\" rel=\"nofollow noreferrer\">\n  reported as malware\n </a>\n by your AV.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Uprooted",
            "text": "<html><body><span class=\"comment-copy\">\n Sorry for offtop, what is the first program you use, the one that told you about ENIGMA(5.X)?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "<html><body><span class=\"comment-copy\">\n @Uprooted: Detect It Easy\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  OK, I think I got it. The tool I needed was\n  <code>\n   MegaDumper\n  </code>\n  . (I couldn't find the executable on\n  <a href=\"https://github.com/CodeCracker-Tools/MegaDumper\" rel=\"noreferrer\">\n   its Github\n  </a>\n  , so I had to\n  <a href=\"https://mega.nz/#!zfA10aRB!4_LE2_fyCviYALiyEOFCx9uAW6kqeG96CcnXhm9qxXk\" rel=\"noreferrer\">\n   build it\n  </a>\n  myself.)\n </p>\n <p>\n  Then here's the steps how I used it:\n </p>\n <ol>\n  <li>\n   <p>\n    (I'm obviously doing all this in a VM.) Start up packed executable and let it unpack itself. (In my case it was a GUI app so it continued running.)\n   </p>\n  </li>\n  <li>\n   <p>\n    Start up MegaDumper and locate the .NET process in the list (at this point it is already unpacked in memory).\n   </p>\n  </li>\n  <li>\n   <p>\n    Right-click it and pick\n    <code>\n     .NET dump\n    </code>\n    , wait for a little bit and it will create a folder in the same location with the dumped .NET files.\n   </p>\n   <p>\n    <a href=\"https://i.sstatic.net/Afz46.png\" rel=\"noreferrer\">\n     <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Afz46.png\"/>\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    Then simply open the .exe from the dumped folder in\n    <a href=\"https://github.com/0xd4d/dnSpy\" rel=\"noreferrer\">\n     <code>\n      dnSpy\n     </code>\n    </a>\n    and it will be able to disassemble it as normal, so you can place breakpoints and debug it:\n   </p>\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/MrLUV.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/MrLUV.png\"/>\n  </a>\n </p>\n <hr/>\n <p>\n  Lastly, just want to say that, from a quick glance, the packed .NET executable in question does not appear to be malicious. The\n  <a href=\"https://www.virustotal.com/#/file/48a3b7e0e92970ee2aff07f30f37e813be7c73c1595648bb68c7bb0b36b40fc7/detection\" rel=\"noreferrer\">\n   reports\n  </a>\n  by multiple AVs were probably caused by the use of the Russian packer. So, this might be a clue to developers who decide to pack their legitimate software. (Just saying...)\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "c00000fd",
            "time": "Mar 23, 2019 at 23:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After you press 'Pause' you will end you in the message loop - that's ok. Go to the call-stack window and you should see your binary in on of the previous frames. Double click on one of them and dnSpy should load it and analyse.\n </p>\n <p>\n  But since the binary is packed (and probably obfuscated) I think you need to first unpack it and run this version in order to correctly map instructions to lines.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Nov 21, 2018 at 20:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Yeah, the callstack has the reference to some location in the Main() function from the target .NET process but clicking it in dnSpy does nothing. TBH, I've never unpacked a .NET executable. What's the process for that? Is it just a manual process by dumping memory in the native debugger first.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">try <a href=\"https://github.com/0xd4d/de4dot\" rel=\"nofollow noreferrer\">de4dot</a></span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Can de4dot access files from memory though? I'm getting <code>The file isn't a .NET PE file</code> if I just run the original exe thru it.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">No, not really. It looks like the original exe is not a .net assembly and only after unpacking it becomes one.</span>",
                    "time": null
                }
            ]
        }
    ]
}