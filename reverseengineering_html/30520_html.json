{
    "title": "How to find prolog with idapython in non-disassambled function raw bytes?",
    "link": "https://reverseengineering.stackexchange.com/questions/30520/how-to-find-prolog-with-idapython-in-non-disassambled-function-raw-bytes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I tried googling but I didn't find much info. I am trying to get the function prolog from an instruction inside a function. The function is in raw bytes. Is this possible to get?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "64",
    "tags": [
        "idapython"
    ],
    "user": "Jôsùå",
    "time": "Jun 15, 2022 at 17:31",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Could give some context with your question, at least, an example or what you have tried so far ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jôsùå",
            "text": "<html><body><span class=\"comment-copy\">\n the context is, i am trying to make a analizer finding some xrefs in raw bytes in specific arch armeabi-v7a, after i found this xref to x address, it must happend probably inside a procedure, notice that the access to the xref happend inside that procedure in between a function prolog and epilog, from that, is it posible to go backward to find some kind of sing of function entry/prolog?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not an answer due to the constraints that the function must be non-disassembled... but, you can query the skippable bytes (\n  <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-68-skippable-instructions/\" rel=\"nofollow noreferrer\">\n   https://hex-rays.com/blog/igors-tip-of-the-week-68-skippable-instructions/\n  </a>\n  ) for a disassembled function using the \"\n  <code>\n   $ ignore micro\n  </code>\n  \" netnode.\n </p>\n <p>\n  These are stored as supvals, so assuming that you're in the right place you can use\n  <a href=\"https://hex-rays.com/products/ida/support/sdkdoc/classnetnode.html#a90d9ecac5351752a10ea3010e6538439\" rel=\"nofollow noreferrer\">\n   <code>\n    netnode.supprev\n   </code>\n  </a>\n  , or any of the supval-oriented APIs to find what IDA considers the prologue. Prologue bytes use a supval of \"\\x01\", epilogue uses \"\\x02\".\n </p>\n <p>\n  Due to this being internal it might change, but it's listed plainly in the SDK.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Aug 14, 2024 at 19:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}