{
    "title": "understanding the stack",
    "link": "https://reverseengineering.stackexchange.com/questions/3683/understanding-the-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have de-assembled a x86 application use ida, it generates\nthe following code\n </p>\n <pre><code>.text:1084FF10                 push    ebp\n.text:1084FF11                 mov     ebp, esp\n.text:1084FF13                 and     esp, 0FFFFFFF8h\n.text:1084FF16                 sub     esp, 0D4h\n.text:1084FF1C                 mov     eax, ___security_cookie\n.text:1084FF21                 xor     eax, esp\n</code></pre>\n <p>\n  What does the instruction \"and esp, 0FFFFFFF8h\" do here?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "assembly",
        "x86"
    ],
    "user": "upton",
    "time": "Feb 14, 2014 at 19:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This aligns the stack pointer to 8 byte boundary. This is done by the compiler to improve performance, as reads from non-aligned addresses results in performance degradation.\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "pank4j",
            "time": "Feb 14, 2014 at 3:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}