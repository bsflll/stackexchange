{
    "title": "IDA Pro list COM methods",
    "link": "https://reverseengineering.stackexchange.com/questions/13282/ida-pro-list-com-methods",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a dll file, containing some exported functions and COM methods.\n </p>\n <p>\n  Here is my dll information opened by DLL Export Viewer:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/doi1M.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/doi1M.png\"/>\n  </a>\n </p>\n <p>\n  But when i open the dll file in ida pro, i see just exported functions and none of COM methods are listed.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/viZAj.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/viZAj.png\"/>\n  </a>\n </p>\n <p>\n  How I can view list of start address of the COM methods in ida pro?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "dll",
        "com"
    ],
    "user": "newmrd",
    "time": "Aug 14, 2016 at 11:13",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n I would love to know a good solution for this. My \"solution\" of all time have been: putting a breakpoint in each function excluding the exported ones and, then, calling the method I want to inspect and waiting until the breakpoint is hit. \"So advanced.\"\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Original question\n </h2>\n <p>\n  This is not as trivial as one would hope for quite a simple reason, COM objects are internal objects, and do not expose their implementation details by exporting functions.\n </p>\n <p>\n  Instead, COM provides an interface to create COM instances of a specific class using a class UUID (commonly known\n  <code>\n   CLSID\n  </code>\n  ) as means to identify a COM class.\nCOM objects are created by calling\n  <code>\n   CoCreateInstance\n  </code>\n  documented\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  The returned object is a C++ object implementing a set of APIs exposed as a virtual function table for that COM object, so there's no need to export those functions and that's you can't find them using IDA's exports view.\n </p>\n <p>\n  Side note: Although COM related reversing questions are not at all too scarce, there are a lot fewer questions related to reversing COM classes. Most COM related questions involve attempts to reverse engineer software using COM, while it appears the OP is trying to reverse engineer a COM class. I guess this is somewhat because most COM classes are documented to some extent.\n </p>\n <p>\n  <strong>\n   DLL Export Viewer results\n  </strong>\n </p>\n <p>\n  As documented\n  <a href=\"http://www.nirsoft.net/utils/dll_export_viewer.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , DLL Export Viewer supports reading\n  <em>\n   COM Type Libraries\n  </em>\n  from type library resources embedded inside the DLL. I'll describe COM Type Libraries in a few paragraphs and you'll see how you could get that data in IDAPython.\n </p>\n <p>\n  From the original site:\n </p>\n <blockquote>\n  <p>\n   Version 1.10\n  </p>\n  <ul>\n   <li>\n    <p>\n     Added support for 64-bit DLL files.\n    </p>\n   </li>\n   <li>\n    <p>\n     New option: Display method and properties of COM type libraries.\n    </p>\n   </li>\n  </ul>\n </blockquote>\n <h2>\n  Actually reverse engineering a COM provider\n </h2>\n <p>\n  Although your question was a bit misguided, there are still several resources that could help you RE COM object providers.\n </p>\n <p>\n  <strong>\n   Documentation\n  </strong>\n </p>\n <p>\n  Some resouces are available for in-depth COM understanding (and therefore reversing) online, such as\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms690156(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   MSDN's basic COM development guide\n  </a>\n  ,\n  <a href=\"https://www.microsoft.com/msj/0399/comtype/comtype.aspx\" rel=\"nofollow noreferrer\">\n   Microsoft System Journal about come type libraries\n  </a>\n </p>\n <p>\n  <strong>\n   Oleview.exe\n  </strong>\n </p>\n <p>\n  First, for basic understanding of COM objects and ability to browse COM objects defined on your machine you should try using\n  <a href=\"https://msdn.microsoft.com/en-us/library/d0kh9f4c.aspx\" rel=\"nofollow noreferrer\">\n   Oleview\n  </a>\n  , downloadable as part of\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff557573(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   windows Driver Kit\n  </a>\n  or similar.\n </p>\n <p>\n  OleView.exe lets you list installed COM objects, the interfaces they provide (which describe the actual methods implemented by that COM object), each COM object's class ID, etc. If you can find your COM object here, it'll greatly help you in later stages.\n </p>\n <p>\n  <strong>\n   Class informer plugin\n  </strong>\n </p>\n <p>\n  Using the\n  <a href=\"https://sourceforge.net/projects/classinformer/\" rel=\"nofollow noreferrer\">\n   class informer\n  </a>\n  IDA plugin, you might be able to find RTTI information for your COM object. This will help you find and partially map your COM object's Virtual Function Table (which, again, describes available functionality of a COM object by actually pointing to the implementation methods). Using IDA's builtin COM Helper plugin might also be useful.\n </p>\n <p>\n  <strong>\n   Manually parsing type library files (*.tlb) using python\n  </strong>\n </p>\n <p>\n  Although this is roughly what Oleview.exe (and the likes) are doing, you could manually parse any\n  <code>\n   *.tlb\n  </code>\n  file you find (usually located near the COM DLL or embedded as a resource inside it) to get the information you're interested in (including offsets in the binary where functions are implemented).\nA python module called\n  <code>\n   pythoncom\n  </code>\n  exists for that, as part of the python for win32 extensions. Documentation is\n  <a href=\"http://timgolden.me.uk/pywin32-docs/pythoncom.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , and the module can be downloaded\n  <a href=\"https://sourceforge.net/projects/pywin32/\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is an\n  <a href=\"http://www.openrce.org/downloads/details/10/Com_Plugin_v1.2\" rel=\"nofollow noreferrer\">\n   old plugin by Dieter Spaar\n  </a>\n  which uses TypeLib API to enumerate COM methods and find their addresses. The code is somewhat old so might need some adjustments for the later IDA versions.\nNote that it relies on presence of the typelib info so might not work for barebones (typelib-less) COM objects.\n </p>\n <p>\n  It is based on\n  <a href=\"https://web.archive.org/web/20161023092604/http://www.microsoft.com/msj/0399/comtype/comtype.aspx\" rel=\"nofollow noreferrer\">\n   this article by Matt Pietrek\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Edit\n  </strong>\n  : one more thing. To figure out the addresses of the interface's methods, the plugin has to actually create the class implementing the interface (by calling\n  <code>\n   CoCreateInstance\n  </code>\n  ) which means that it will\n  <em>\n   execute code from the DLL/OCX\n  </em>\n  . So you need to take care with files of uncertain origins.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "mirh",
            "time": "Jan 24, 2023 at 8:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}