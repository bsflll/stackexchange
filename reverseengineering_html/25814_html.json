{
    "title": "Structure of operand bytes in .NET call and data access IL instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/25814/structure-of-operand-bytes-in-net-call-and-data-access-il-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I tried googling but couldn't find any good source that explains the structure of memory access instructions like ldstr and call instructions\n </p>\n <p>\n  for example based on experience, the last byte of API/library call instructions is always 0x0A (let me know if I'm wrong), but why? what are the structure of the 4 bytes of call operands? what about operands of ldstr instructions?\n </p>\n <p>\n  because they are different from native apps, they are not raw offsets, they seem to be offsets into a table but i cannot find any post that explains this in detail?\n </p>\n <p>\n  the best thing i found is this :\n </p>\n <p>\n  <a href=\"https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/\" rel=\"nofollow noreferrer\">\n   https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/\n  </a>\n </p>\n <p>\n  but it still doesn't explain many things\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "126",
    "tags": [
        "ida",
        "windows",
        "malware",
        ".net"
    ],
    "user": "OneAndOnly",
    "time": "Sep 4, 2020 at 14:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   the last byte of API/library call instructions is always\n   <code>\n    0x0A\n   </code>\n  </p>\n </blockquote>\n <p>\n  It's because calls needs to have method (ref) as a parameter and methods are defined in the table that has an id of\n  <code>\n   0x0A\n  </code>\n  .\n </p>\n <p>\n  Having bytes of the call like this\n  <code>\n   280600000A\n  </code>\n  let's go one by one.\n </p>\n <ul>\n  <li>\n   <code>\n    0x28\n   </code>\n   - is the value for opcode 'call' and it takes one operand.\n  </li>\n  <li>\n   the rest of the opcode is the metadata token so basically the information which method should be called\n  </li>\n </ul>\n <p>\n  But why\n  <code>\n   0x0A\n  </code>\n  is at the end? It should be read as a little-endian so the value should be\n  <code>\n   0x0A000006\n  </code>\n  . But what are the bytes?\n </p>\n <p>\n  From\n  <a href=\"https://en.wikipedia.org/wiki/Metadata_(CLI)\" rel=\"nofollow noreferrer\">\n   Wikipedia\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   When CIL code uses metadata it does so through a metadata token. This is a 32-bit value where the top 8 bits identify the appropriate metadata table, and the remaining 24 bits give the index of the metadata in the table.\n  </p>\n </blockquote>\n <p>\n  So the first value is the table id - and as I've mentioned the id of member's ref table is value\n  <code>\n   0x0A\n  </code>\n  . And the rest is an index in the table (in our case\n  <code>\n   0x6\n  </code>\n  ).\n </p>\n <p>\n  More about the tables? Those are basically part of .NET metadata information, that can be seen when you open one in i.e. dnSpy\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/aYDaS.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/aYDaS.png\"/>\n  </a>\n </p>\n <p>\n  As one can see\n  <code>\n   0x0A\n  </code>\n  is assigned to the\n  <code>\n   MemberRef\n  </code>\n  (containing both methods and fields references)\n </p>\n <blockquote>\n  <p>\n   what about operands of ldstr instructions?\n  </p>\n </blockquote>\n <p>\n  In this instance, the instruction has the following structure\n  <code>\n   72XXXX0070\n  </code>\n  and\n  <code>\n   0x70\n  </code>\n  indicates different stream - namely User defined strings or\n  <code>\n   #US\n  </code>\n  . The rest (again interpreted as a little-ending 32-bit val) is the offset (in bytes) in\n  <code>\n   #US\n  </code>\n  table.\n </p>\n <p>\n  Generally dnSpy is a great tool to verifying those values as one can metadata tables.\n </p>\n <p>\n  The linked article (and the whole series is a great resource)  it does explain (I think) the structure but maybe indirectly - just find the information about metadata token.\n </p>\n <p>\n  We can induce from it the whole structure of a metadata token.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Paweł Łukasik",
            "time": "Sep 6, 2020 at 6:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">Thanks for the great explanation, do you happen to know any other good reference or even a book that explains everything about structure of .NET files/IL instructions in a very detailed manner?  what is the most detailed reference?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Not sure if I can provide one reference. It is something I acquired by reading &amp; exploring multiple sources.</span>",
                    "time": null
                },
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">Multiple sources are fine too, would appreciate if you can share them.</span>",
                    "time": null
                }
            ]
        }
    ]
}