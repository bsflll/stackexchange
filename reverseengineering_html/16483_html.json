{
    "title": "Extract conditional instructions using IDA python in ARM binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/16483/extract-conditional-instructions-using-ida-python-in-arm-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While using IDA Python for extract ARM instructions, I noticed that some instructions are not extracted completely. For example, conditional instructions such as\n  <code>\n   BCS\n  </code>\n  or\n  <code>\n   BCC\n  </code>\n  are printed as\n  <code>\n   B\n  </code>\n  . For analyzing, it is necessary we have the instructions completely.\n </p>\n <p>\n  Here's the code I used:\n </p>\n <pre><code>import idautils\nimport idc\nimport idaapi\nfor seg_ea in Segments():\n for head in Heads(seg_ea, SegEnd(seg_ea)):\n  if isCode(GetFlags(head)):\n   disasm= GetMnem(head)\n</code></pre>\n <p>\n  Is there any way to correct this problem?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "arm",
        "python"
    ],
    "user": "hamid darabian",
    "time": "Oct 5, 2017 at 9:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was able to reproduce your problem on\n  <em>\n   IDA 6.95\n  </em>\n  but it seems like this bug was fixed in\n  <em>\n   <a href=\"https://www.hex-rays.com/products/ida/7.0/index.shtml\" rel=\"nofollow noreferrer\">\n    IDA 7\n   </a>\n  </em>\n  since it works for me just fine. The solution below will be relevant to IDA 6.95 though it would probably be valid to earlier versions of\n  <em>\n   IDA Pro\n  </em>\n  .\n </p>\n <p>\n  Let's start by describing the deadlock we're facing with:\n  \n\n  The problematic function,\n  <code>\n   GetMnem\n  </code>\n  , is declared in\n  <code>\n   IDA 6.95\\Python\\idc.py:L2280\n  </code>\n  and looks like this:\n </p>\n <pre><code>def GetMnem(ea):\n    \"\"\"\n    Get instruction mnemonics\n\n    @param ea: linear address of instruction\n\n    @return: \"\" - no instruction at the specified location\n\n    @note: this function may not return exactly the same mnemonics\n    as you see on the screen.\n    \"\"\"\n    res = ida_ua.ua_mnem(ea)\n\n    if not res:\n        return \"\"\n    else:\n        return res\n</code></pre>\n <p>\n  Pay attention to the following disclaimer in the function:\n </p>\n <blockquote>\n  <p>\n   @note: this function may not return exactly the same mnemonics as you see on the screen.\n  </p>\n </blockquote>\n <p>\n  Seems like our problems fits the disclaimer -- we don't see the same mnemonics as we see on the screen.\n </p>\n <p>\n  As you can see,\n  <code>\n   GetMnem\n  </code>\n  is basically a wrapper to another function --\n  <code>\n   ua_mnem\n  </code>\n  which is declared in\n  <code>\n   IDA 6.95\\Python\\ida_ua.py:L319\n  </code>\n  :\n  \n\n </p>\n <pre><code>def ua_mnem(*args):\n  \"\"\"\n  ua_mnem(ea) -> char const *\n  \"\"\"\n  return _ida_ua.ua_mnem(*args)\n</code></pre>\n <p>\n  Well, seems like\n  <code>\n   ua_mnem\n  </code>\n  is a wrapper to another function which is located in\n  <code>\n   IDA 6.95\\python\\lib\\python2.7\\lib-dynload\\ida_64\\_ida_ua.pyd\n  </code>\n  . A\n  <code>\n   pyd\n  </code>\n  file\n  <a href=\"https://docs.python.org/3/faq/windows.html#is-a-pyd-file-the-same-as-a-dll\" rel=\"nofollow noreferrer\">\n   is actually a\n   <em>\n    DLL\n   </em>\n   file\n  </a>\n  and should not be easy-peasy to reverse. Therefore, we can't see, nor edit, the source code so we can't fix the problem.\n </p>\n <p>\n  Here comes the workaround: instead of using\n  <code>\n   GetMnem\n  </code>\n  you can simply mimic it by using\n  <code>\n   GetDisasm\n  </code>\n  and split the line to get only the instruction:\n </p>\n <pre><code>import idautils\nimport idc\nimport idaapi\nfor seg_ea in Segments():\n for head in Heads(seg_ea, SegEnd(seg_ea)):\n  if isCode(GetFlags(head)):\n    mnem = GetMnem(head)\n    if (mnem[0]=='B'):\n        mnem = GetDisasm(head).split()[0]\n    print mnem\n</code></pre>\n <p>\n  In this case we check whether the mnemonics is a\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0231b/Chddgiff.html\" rel=\"nofollow noreferrer\">\n   branch instruction\n  </a>\n  (begins with \"B\") and if so, we use the mnemonics from\n  <code>\n   GetDisasm\n  </code>\n  and not from\n  <code>\n   GetMnem\n  </code>\n  . Of course you would need to test this solution better and maybe handle some specific cases.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Megabeets",
            "time": "Oct 5, 2017 at 9:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><code>_ida_ua.ua_mnem</code> is just a direct wrapper of the underlying IDA API from <code>ida_ua.hpp</code> in the SDK.</span>",
                    "time": null
                }
            ]
        }
    ]
}