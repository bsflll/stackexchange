{
    "title": "Counting offsets of structure fields [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8877/counting-offsets-of-structure-fields",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions on\n       <b>\n        software development\n       </b>\n       are off-topic here, but can be asked on\n       <a href=\"http://stackoverflow.com/about\">\n        Stack Overflow\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2015-05-14 07:23:45Z\">\n        9 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8877/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  i have the following question:\n </p>\n <p>\n  For example, when I have the structure\n </p>\n <pre><code>    IMAGE_SECTION_HEADER STRUCT         |   C1    |    C2      \n    Name1                     BYTE      |   +0    |    +0\n    union Misc                          |\n        PhysicalAddress       DWORD     |    2    |     2\n        VirtualSize           DWORD     |    6    |\n    ends                                |\n    VirtualAddress            DWORD     |    10   |     6\n    SizeOfRawData             DWORD     |    14   |     10\n    PointerToRawData          DWORD     |    18   |     14\n       ...(etc.)\n</code></pre>\n <p>\n  Then how I must count the offsets? The columns C1 and C2 represent my solutions but i am not sure which of the two is right or if both are wrong.\nDo I have to consider the union in the structure as 1 field, or do I need to consider its fields separately?\n </p>\n <p>\n  best regards,\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "363",
    "tags": [
        "struct"
    ],
    "user": "user3097712",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A union is a list of fields\n  <em>\n   starting at the same address in memory\n  </em>\n  (except for bitfields, of course). Its size is at least the size of the largest field in it. In your case, it would be 4 bytes.\n </p>\n <p>\n  Note that, like structs, the size can be bigger due to alignment requirements. For example, take this C union:\n </p>\n <pre><code>union MyUnion {\n    char a[5];\n    int b;\n};\n</code></pre>\n <p>\n  The\n  <code>\n   a\n  </code>\n  fields is 5 bytes,\n  <code>\n   b\n  </code>\n  is 4. You would expect the union to be 5 bytes, but, as you can check with\n  <code>\n   sizeof(union MyUnion)\n  </code>\n  , it is actually 8. This is because\n  <code>\n   int\n  </code>\n  s are aligned to a 4-byte boundary. Similiarly,\n  <code>\n   short\n  </code>\n  s are aligned to 2 bytes and\n  <code>\n   double\n  </code>\n  s to 8.\n  <a href=\"http://goo.gl/yzwlrX\" rel=\"nofollow\">\n   Try it on CodingGround\n  </a>\n  .\n </p>\n <p>\n  You may be asking yourself: why does the compiler align the union\n  <em>\n   size\n  </em>\n  ? Isn't aligning the\n  <em>\n   starting address\n  </em>\n  enough? It could well keep the size of\n  <code>\n   MyUnion\n  </code>\n  to 5 and align the start to a 4-byte boundary for the int. The problem comes when you have an array of the union. An array needs to be a\n  <em>\n   contiguous\n  </em>\n  block of memory because of how array and pointer arithmetic works. Given a generic\n  <code>\n   T array[]\n  </code>\n  you have that\n  <code>\n   array[i] == *(array + i) == *((T *) (((char *) array) + i * sizeof(T)))\n  </code>\n  . In the example case,\n  <code>\n   MyUnion\n  </code>\n  has a 4-byte alignment requirement (the largest aligment in the union). If you have a\n  <code>\n   MyUnion array[]\n  </code>\n  , the starting address will be 4-byte aligned because of the int. This means that\n  <code>\n   array[0]\n  </code>\n  will be correctly aligned. But if the size of the union is 5, then\n  <code>\n   array[1]\n  </code>\n  will be at a 5 bytes offset from the starting address. This is not 4-byte aligned! Aligning the union size to 8 bytes puts\n  <code>\n   array[1]\n  </code>\n  to a 8 bytes offset, which is 4-bytes aligned. Aligning the size by padding the union allows the array to be contiguous while keeping everything aligned.\n </p>\n <p>\n  <strong>\n   Bottom line:\n  </strong>\n </p>\n <p>\n  <strong>\n   In a union (or a struct), both the\n   <em>\n    starting address\n   </em>\n   and the\n   <em>\n    size\n   </em>\n   are aligned to the biggest alignment requirement of the fields.\n  </strong>\n </p>\n <p>\n  Of course, alignment requirements may vary between compilers and architectures. Keep that in mind.\n </p>\n <p>\n  Neither C1 nor C2 is correct as far as I can see, since the first field is a byte and not two:\n </p>\n <pre><code>IMAGE_SECTION_HEADER STRUCT         |w/o align| aligned |\nName1                     BYTE      |   +0    |   +0    |\nunion Misc                          |   +1    |   +4    |\n    PhysicalAddress       DWORD     |         |         |\n    VirtualSize           DWORD     |         |         |            \nends                                |         |         |\nVirtualAddress            DWORD     |   +5    |   +8    |\nSizeOfRawData             DWORD     |   +9    |   +12   |\nPointerToRawData          DWORD     |   +13   |   +16   |\n   ...(etc.)\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Andrea Biondo",
            "time": "May 13, 2015 at 13:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andrea Biondo",
                    "text": "<span class=\"comment-copy\">Reading the answer again I realized I wasn't very clear. The <code>int</code> <i>alignment</i> is making the size 8 bytes. This has to do with arrays. I updated the answer, please check it. I also updated the CodingGound sample to show alignment.</span>",
                    "time": null
                }
            ]
        }
    ]
}