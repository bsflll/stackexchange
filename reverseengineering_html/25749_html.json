{
    "title": "What is the use of moving a variable 3 times only to pass it back to the original register, with no calculations in between?",
    "link": "https://reverseengineering.stackexchange.com/questions/25749/what-is-the-use-of-moving-a-variable-3-times-only-to-pass-it-back-to-the-origina",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reverse engineering a C++ binary using IDA, and there's one function that I don't quite understand.\n </p>\n <pre><code>x = dword ptr -8\nvar_4 = dword ptr -4\n\npush    rbp\nmovss   rbp, rsp\nsub     rsp, 10h\nmovss   [rbp+var_4], xmm0\nmov     eax, [rbp+var_4]\nmov     [rbp+x], eax\nmovss   xmm0, [rbp+x]\ncall    _sinf\nleave\nretn \n</code></pre>\n <p>\n  The eax register is overwritten right away, and I can't imagine that eax was loaded to pass as an argument to \"sinf\". What's the use of this? Or is it just a weird compiler optimization?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "72",
    "tags": [
        "ida",
        "gcc"
    ],
    "user": "Magusviper",
    "time": "Aug 26, 2020 at 9:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It looks like that the binary has been compiled without optimization. With optimization enabled the redundant instructions would have been removed. A similar example is shown below.\n </p>\n <p>\n  Compiler:\n  <a href=\"https://godbolt.org/z/Ye9WK9\" rel=\"nofollow noreferrer\">\n   GCC 7.5 for x86-64 on Compiler Explorer\n  </a>\n </p>\n <h3>\n  Original code\n </h3>\n <pre><code>#include <math.h>\n\nfloat calculate(float v)\n{\n    return sinf(v);\n}\n</code></pre>\n <h3>\n  No optimization (-O0)\n </h3>\n <pre><code>calculate(float):\n        push    rbp\n        mov     rbp, rsp\n        sub     rsp, 16\n        movss   DWORD PTR [rbp-4], xmm0\n        mov     eax, DWORD PTR [rbp-4]\n        mov     DWORD PTR [rbp-8], eax\n        movss   xmm0, DWORD PTR [rbp-8]\n        call    sinf\n        leave\n        ret\n</code></pre>\n <h3>\n  -O1\n </h3>\n <pre><code>calculate(float):\n        sub     rsp, 8\n        call    sinf\n        add     rsp, 8\n        ret\n</code></pre>\n <h3>\n  -O2/-O3\n </h3>\n <pre><code>calculate(float):\n        jmp     sinf\n</code></pre>\n <p>\n  As you can see above, the redundant moves are generated only when optimizations aren't enabled. With higher levels, it progressively leads to smaller code.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "0xec",
            "time": "Aug 26, 2020 at 10:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Magusviper",
                    "text": "<span class=\"comment-copy\">Thanks! One more quick question, I noticed that the xmm0 register is used to pass the floating point variable to sinf, and that the return value is stored in xmm0. Usually, on 64 bit, the first parameter to a function is passed through rdi, and the return value is stored in rax. Is it just different for floating point functions? I can't find a whole lot of documentation on the matter.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@Magusviper Floating point values are passed/returned in <code>XMM</code> registers. Check the <code>X86_calling_conventions</code> article on Wikipedia.</span>",
                    "time": null
                }
            ]
        }
    ]
}