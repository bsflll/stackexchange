{
    "title": "Detecting user<->kernel transitions with hypervisor",
    "link": "https://reverseengineering.stackexchange.com/questions/15783/detecting-user-kernel-transitions-with-hypervisor",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is it possible to use a hypervisor to trap all ring0<->ring3 transitions (both 0->3 and 3->0)?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "196",
    "tags": [
        "debugging",
        "debuggers",
        "kernel-mode",
        "kernel",
        "intel"
    ],
    "user": "user20825",
    "time": "Jul 7, 2017 at 11:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, it is possible. I do not want to go into details as there are a lot of comprehensive material available online:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.read.seas.harvard.edu/~kohler/class/aosref/IA32-3.pdf\" rel=\"nofollow noreferrer\">\n    Intels manuals\n   </a>\n   which you will have to study in any case if you really want to understand how things work (from personal experience)\n  </li>\n  <li>\n   <a href=\"https://pdfs.semanticscholar.org/2cd9/bfcc8d8bd7703f265a7a3e7da2167dfb39ff.pdf\" rel=\"nofollow noreferrer\">\n    A VMM-based System Call Interposition Framework for Program Monitoring\n   </a>\n   - one of the countless examples about sys call monitoring mainly for security purposes.\n  </li>\n  <li>\n   <a href=\"https://github.com/tandasat/HyperPlatform\" rel=\"nofollow noreferrer\">\n    HyperPlatform\n   </a>\n   - Intel VT-x based hypervisor aiming to provide a thin VM-exit filtering platform on Windows.\n   <ul>\n    <li>\n     <a href=\"https://github.com/tandasat/DdiMon\" rel=\"nofollow noreferrer\">\n      DdiMon\n     </a>\n     - Monitoring and controlling kernel API calls with stealth hook using EPT\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  One of the techniques is to monitor execution of the kernel-mode entering code pointed by\n  <code>\n   IA32_SYSENTER_EIP\n  </code>\n  /\n  <code>\n   IA32_LSTAR\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "PhoeniX",
            "time": "Jul 7, 2017 at 16:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}