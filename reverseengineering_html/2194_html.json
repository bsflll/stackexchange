{
    "title": "IDA EBP variable offset",
    "link": "https://reverseengineering.stackexchange.com/questions/2194/ida-ebp-variable-offset",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Let's take a look of how IDA displays address of local variable. For instance:\n </p>\n <pre><code>MOV EAX, [EBP + var_4]\n</code></pre>\n <p>\n  As we all know as far as local variables go, they are located at lower addresses of EBP.\n </p>\n <p>\n  <img alt=\"Stack Frame\" src=\"https://i.sstatic.net/XDoh3.png\"/>\n </p>\n <p>\n  Though, I have been taking it for granted and inevitable, I am still very curious. Why does IDA display local variable offset as\n  <strong>\n   <code>\n    [EBP + var]\n   </code>\n  </strong>\n  , not\n  <strong>\n   <code>\n    [EBP - var]\n   </code>\n  </strong>\n  ?\n </p>\n <p>\n  Thank you so much.\n </p>\n</div>\n</body></html>",
    "votes": "16",
    "answers": 1,
    "views": "6k",
    "tags": [
        "disassembly",
        "assembly",
        "static-analysis",
        "callstack",
        "ida"
    ],
    "user": "PSS",
    "time": "Jun 7, 2013 at 1:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have a look at the\n  <code>\n   var_4\n  </code>\n  definition at the start of the function:\n </p>\n <pre><code>var_4 = dword ptr -4\n</code></pre>\n <p>\n  So it's actually negative as expected.\n </p>\n <p>\n  For a more complete picture, use\n  <kbd>\n   Ctrl+K\n  </kbd>\n  or double-click/Enter on the stack var to see the\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/488.shtml\">\n   stack frame layout\n  </a>\n  :\n </p>\n <pre><code>-00000018 ; Two special fields \" r\" and \" s\" represent return address and saved registers.\n-00000018 ; Frame size: 18; Saved regs: 4; Purge: 0\n-00000018 ;\n-00000018\n-00000018 var_18          dd ?\n-00000014 var_14          dd ?\n-00000010 var_10          db 12 dup(?)\n-00000004 var_4           dd ?\n+00000000  s              db 4 dup(?)\n+00000004  r              db 4 dup(?)\n+00000008 arg_0           dd ?\n+0000000C\n+0000000C ; end of stack variables\n</code></pre>\n</div>\n</body></html>",
            "votes": "23",
            "user": "Igor Skochinsky",
            "time": "Jun 7, 2013 at 1:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}