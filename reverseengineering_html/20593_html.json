{
    "title": "Calculation with not defined variables?",
    "link": "https://reverseengineering.stackexchange.com/questions/20593/calculation-with-not-defined-variables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am new to reverse engineering and try to solve a crackme with radare2.\n </p>\n <p>\n  My problem is understanding of the following lines:\n </p>\n <pre><code>|           0x000007a9      c745b8000000.  mov dword [var_48h], 0\n|           0x000007b0      c745bc000000.  mov dword [var_44h], 0\n|           0x000007cd      8b45b8         mov eax, dword [var_48h]\n|           0x000007d0      4898           cdqe\n|           0x000007d2      0fb64405c0     movzx eax, byte [rbp + rax - 0x40]\n</code></pre>\n <p>\n  From the bottom part of this code surrounding them:\n </p>\n <pre><code>|           0x0000076a      55             push rbp\n|           0x0000076b      4889e5         mov rbp, rsp\n|           0x0000076e      4883ec50       sub rsp, 0x50               \n|           0x00000772      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=0x19c0 ; '('\n|           0x0000077b      488945f8       mov qword [canary], rax\n|           0x0000077f      31c0           xor eax, eax\n|           0x00000781      c645b700       mov byte [var_49h], 0\n|           0x00000785      488d3d580100.  lea rdi, qword str.Enter_password: ; 0x8e4 ; \"Enter password:\" ; const char *s\n|           0x0000078c      e87ffeffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x00000791      488d45c0       lea rax, qword [var_40h]\n|           0x00000795      4889c6         mov rsi, rax\n|           0x00000798      488d3d550100.  lea rdi, qword [0x000008f4] ; \"%s\" ; const char *format\n|           0x0000079f      b800000000     mov eax, 0\n|           0x000007a4      e897feffff     call sym.imp.__isoc99_scanf ; String! ; int scanf(const char *format)\n|           0x000007a9      c745b8000000.  mov dword [var_48h], 0\n|           0x000007b0      c745bc000000.  mov dword [var_44h], 0\n|           0x000007cd      8b45b8         mov eax, dword [var_48h]\n|           0x000007d0      4898           cdqe\n|           0x000007d2      0fb64405c0     movzx eax, byte [rbp + rax - 0x40]\n|           0x000007d7      84c0           test al, al\n</code></pre>\n <p>\n  I understand the output and that there is the input wanted (\n  <code>\n   scanf\n  </code>\n  ). After that\n  <code>\n   var_48h\n  </code>\n  ,\n  <code>\n   var_44h\n  </code>\n  and\n  <code>\n   eax\n  </code>\n  are set to 0. The next lines i don't understand at all. Beside the\n  <code>\n   cdqe\n  </code>\n  instruction there is some calculation(?) with the variables\n  <code>\n   rbp\n  </code>\n  and\n  <code>\n   rax\n  </code>\n  (=\n  <code>\n   var_49h\n  </code>\n  ?).\n </p>\n <p>\n  Maybe you can help me to understand that?\n </p>\n <p>\n  Thank you in advance!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "214",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis"
    ],
    "user": "Mofro",
    "time": "Feb 11, 2019 at 13:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Lets take a look at the specific piece of code you can't understand:\n </p>\n <pre><code>mov dword [var_48h], 0\nmov dword [var_44h], 0\nmov eax, dword [var_48h]\ncdqe\nmovzx eax, byte [rbp + rax - 0x40]\n</code></pre>\n <p>\n  And go over it a few lines at a time.\n </p>\n <p>\n  The first couple of lines are either initializing a local variable of size qword (8 bytes) to 0 by assigning one dword at a time, or two dword-sized variables, each of which to zero:\n </p>\n <pre><code>mov dword [var_48h], 0\nmov dword [var_44h], 0\n</code></pre>\n <p>\n  Converting this to C, this may look similar to:\n </p>\n <pre><code>long var_ab = 0;\n</code></pre>\n <p>\n  or\n </p>\n <pre><code>int var_a, var_b = 0;\n</code></pre>\n <p>\n  The third line is a little puzzling assuming the above assignment is to a single qword variable:\n </p>\n <pre><code>mov eax, dword [var_48h]\n</code></pre>\n <p>\n  Regardless, this does not translate to an actual C statement, but suggests the  variable (either as\n  <code>\n   var_ab\n  </code>\n  or\n  <code>\n   var_b\n  </code>\n  will be used in following statements.\n </p>\n <p>\n  Taking a look at the following two lines makes it all clearer:\n </p>\n <pre><code>cdqe\nmovzx eax, byte [rbp + rax - 0x40]\n</code></pre>\n <p>\n  The first of the two,\n  <a href=\"https://www.felixcloutier.com/x86/cbw:cwde:cdqe\" rel=\"nofollow noreferrer\">\n   <code>\n    cdqe\n   </code>\n  </a>\n  simply sign-extends\n  <code>\n   eax\n  </code>\n  into\n  <code>\n   rax\n  </code>\n  , effectively setting the higher half of\n  <code>\n   rdx\n  </code>\n  to zero too. the second line of the last snippet makes doing so clear, after we consider the limitations of the x86 assembly language.\n </p>\n <p>\n  Since\n  <code>\n   eax\n  </code>\n  is used as an index for a stack variable, it is required to be sign-extended to\n  <code>\n   rax\n  </code>\n  because of assembly limitations. executing\n  <code>\n   byte [\n  </code>\n  <strong>\n   <code>\n    r\n   </code>\n  </strong>\n  <code>\n   bp +\n  </code>\n  <strong>\n   <code>\n    e\n   </code>\n  </strong>\n  <code>\n   ax - 0x40]\n  </code>\n  is impossible in x86 64bit assembly, as all registers in offset calculations are required to be of the same length.\n </p>\n <p>\n  This makes it clear that the variables are indeed two dword variables, and\n  <code>\n   eax\n  </code>\n  is sign extended solely to be used in the following\n  <code>\n   mov\n  </code>\n  instruction.\n </p>\n <p>\n  The assembly code above, then, is probably the result of the following C code:\n </p>\n <pre><code>char buf[...];\ndword idx = 0;\nif (buf[idx] == 0) {\n    ...\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Feb 11, 2019 at 13:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Sure, my pleasure :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   CDQE Convert DoubleWord To QuadWord\n  </strong>\n </p>\n <p>\n  it takes whatever is in eax sign extends it and puts it in Rax\n </p>\n <p>\n  so as long as eax holds anything less than 7fffffff and greater than 0\n  \n\n  Rax will be 00000000\n  <code>\n   whateverwashereineax\n   \n\n   when eax holds anything from 0x80000000 to 0xffffffff\n   \n\n   rax will become ffffffff\n  </code>\n  whateverwashereineax\n </p>\n <p>\n  in your case eax is 0 (see var_48) so Rax will be 0 after execution of cdqe\n </p>\n <p>\n  and then it accesses a single byte (first letter of your password)  and checks if it is 0 (test al,al)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Feb 10, 2019 at 22:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}