{
    "title": "Adding a static variable to Windows DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/23239/adding-a-static-variable-to-windows-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to patch a function in a Windows x86 DLL, however it turned out that I need a static variable to store some state that wasn't correctly preserved by the original executable across calls.\n </p>\n <p>\n  I know that typically a static variable is stored in the\n  <code>\n   .data\n  </code>\n  segment or in the\n  <code>\n   .bss\n  </code>\n  segment, and the PE file headers\n  <code>\n   SizeOf(Un)InitializedData\n  </code>\n  . However, I'm having a hard time finding out how to write the address of the added space in x86 assembly. Basically, I'm assuming that it would be something like\n  <code>\n   mov eax, dword ptr ds:[??]\n  </code>\n  , but I don't know what\n  <code>\n   ??\n  </code>\n  I should put there.\n </p>\n <p>\n  The other way around would be to hack and re-use some memory area inside\n  <code>\n   .data\n  </code>\n  segment that hopefully isn't actually used. I tried to do this by looking at the\n  <code>\n   Memory layout\n  </code>\n  tab in\n  <code>\n   x32dbg\n  </code>\n  and finding the\n  <code>\n   .data\n  </code>\n  segment address of the loaded DLL, then taking the address of somewhere near the end. This approach would work for seconds and the memory was indeed written, but the program crashes shortly afterwards due to some exception in\n  <code>\n   RtlFreeHeap()\n  </code>\n  , which I'm also confused about because I supposed it's the\n  <code>\n   .data\n  </code>\n  segment, not the heap.\n </p>\n <p>\n  Could someone help me understand how to do this?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "417",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "x86",
        "pe"
    ],
    "user": "Hai Zhang",
    "time": "Jul 13, 2021 at 19:24",
    "comments": [
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n Why don't you look at the other references to the global variables in\n <code>\n  .data\n </code>\n section, and make your instruction accordingly? for the crash issue, maybe you assume wrongly that this space is not used, and in fact, at some point, it's used to store a heap pointer, which is sent to free function.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Hai Zhang",
            "text": "<html><body><span class=\"comment-copy\">\n @macr0controller Because the DLL is big and really likes passing pointers around, which gave me a hard time for days. Do you know a good way to identify .data section usage?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n Just go to\n <code>\n  IDA\n </code>\n /\n <code>\n  Ghidra\n </code>\n to the\n <code>\n  .data\n </code>\n section and see the x-refs\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<html><body><span class=\"comment-copy\">\n Remember you'll probably  need to patch the base relocation table too.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "chentiangemalc",
            "text": "<html><body><span class=\"comment-copy\">\n This is not exactly the same scenario, but a similar approach can be applied to do what you want\n <a href=\"https://chentiangemalc.wordpress.com/2021/07/22/increasing-size-of-stack-allocated-buffers-with-ida-pro-on-intel-x86-platform/\" rel=\"nofollow noreferrer\">\n  chentiangemalc.wordpress.com/2021/07/22/â€¦\n </a>\n If unsure what to patch I just making a simplistic DLL first in C or C++ and output the assembly code; then make the code modification you want, output the disassembly and compare it to give you ideas what to patch in another DLL.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Inspecting the bss with ghidra will surely allow you to understand who is referencing what.\n </p>\n <p>\n  Without symbols it could be hard to infer whether allegedly unused space within the segment is part of more complex structures.\n </p>\n <p>\n  For this reason I suggest extending it via Ida or any PE editor.\nonce you have the space, you can use the cross-references previously inferred to compute the address to use. You have to mimick the pattern, just increasing the reference value with the difference between your newly allocated space (the first byte) and and the cross reference you choose (the first byte).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Yennefer",
            "time": "Feb 18, 2020 at 20:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}