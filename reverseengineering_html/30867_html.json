{
    "title": "Paused at the right (?) breakpoint, what do I do next?",
    "link": "https://reverseengineering.stackexchange.com/questions/30867/paused-at-the-right-breakpoint-what-do-i-do-next",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The output currently looks like this:\n </p>\n <pre><code>2022-09-10 00:09:03.955729-0500 REDACTED[51480:28773370] -openPDFWithPath: /Users/REDACTED/Library/Containers/com.REDACTED/Data/Library/Application Support/REDACTED/REDACTED/issues/-SOMENUMBERS.pdn\nProcess 51480 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 8.1\n    frame #0: 0x0002d409 REDACTED `GetIssueKey(char const*, char const*, char*)\nREDACTED`GetIssueKey:\n->  0x2d409 <+0>: pushl  %ebp\n    0x2d40a <+1>: movl   %esp, %ebp\n    0x2d40c <+3>: pushl  %ebx\n    0x2d40d <+4>: pushl  %edi\nTarget 0: (REDACTED) stopped.\n</code></pre>\n <p>\n  This function (whatever it does) takes 3 arguments, each a pointer to a string? If I wanted to see what those strings are, what commands do I use in lldb? I've struggled several hours tonight just figuring out how to set (and delete the ones I got wrong) breakpoints. Please formulate any advice as if you're speaking to a brain-damaged monkey.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "82",
    "tags": [
        "breakpoint",
        "lldb"
    ],
    "user": "John O",
    "time": "Sep 10, 2022 at 5:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was about to delete this, but maybe there's someone as newb as myself.\n </p>\n <p>\n  If the binary is x86_64, in theory you can see these three values with the following commands:\n </p>\n <pre><code>po $arg3\npo $arg4\npo $arg5\n</code></pre>\n <p>\n  Though I'm on a 64bit machine, I think the app is old enough that it was compiled 32 bit, and so the $arg# aliases aren't available. (Anyone's welcome to correct me, I don't know what I'm talking about on this.) The values are (probably) in the stack. So run this command:\n </p>\n <pre><code>m read -c 8 -s 4 -f x $esp\n</code></pre>\n <p>\n  The output will look something like this:\n </p>\n <pre><code>0xbfffbe1c: 0x00012d46 0x0026a124 0x10632399 0xbfffbf70\n0xbfffbe2c: 0x00000000 0x00000002 0x11377c30 0xbfffbe68\n</code></pre>\n <p>\n  The first value is the return value or something like that. Every word after that are the arguments to the function. They can be accessed with:\n </p>\n <pre><code>po 0x0026a124\npo 0x10632399\npo 0xbfffbf70\n</code></pre>\n <p>\n  These gave output of decimal numbers (they're pointers after all, they were just addresses). Something like this:\n </p>\n <pre><code>(lldb) po 0x10632399\n274932633\n</code></pre>\n <p>\n  Finally, to see the strings themselves, I did the following:\n </p>\n <pre><code>(lldb) expr ((char *) 2531620)\n(char *) $7 = 0x0026a124 \"NDPD:CryptHandler\"\n(lldb) expr ((char *) 274932633)\n(char *) $8 = 0x10632399 \"/Users/REDACTED/Library/Containers/com.REDACTED/Data/Library/Application Support/REDACTED/REDACTED/issues/-SOMENUMBER.pdn\"\n(lldb) expr ((char *) 3221208944)\n(char *) $9 = 0xbfffbf70 \"der\"\n</code></pre>\n <p>\n  Not quite the eureka I was hoping for. More likely, I need to wait for the return value to show something. On to more adventures for me.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "John O",
            "time": "Sep 10, 2022 at 6:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}