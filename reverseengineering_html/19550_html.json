{
    "title": "What's a decompiler that can be extended to new architecture, and how can I do it?",
    "link": "https://reverseengineering.stackexchange.com/questions/19550/whats-a-decompiler-that-can-be-extended-to-new-architecture-and-how-can-i-do-i",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reverse engineering a binary file. Details does not matter. The important part is that it is written in an architecture that is very unpopular, and there is no existing disassembler or decompiler that supports the architecture.\n </p>\n <p>\n  It's possible to write a disassembler without too much difficulty. Also, assume that I have the full documentation on how the machine code is executed.\n </p>\n <p>\n  However, writing a decompiler is much harder. So instead, I am thinking about using an existing decompiler and extend it to support my architecture.\n </p>\n <p>\n  <strong>\n   Question:\n  </strong>\n </p>\n <ul>\n  <li>\n   What is a decompiler that can be extended to new architecture?\n  </li>\n  <li>\n   How can I extend the decompiler to support my architecture?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "879",
    "tags": [
        "tools",
        "decompiler"
    ],
    "user": "user202729",
    "time": "Oct 5, 2018 at 14:01",
    "comments": [
        {
            "user": "Twifty",
            "text": "<html><body><span class=\"comment-copy\">\n If you are looking for a decompiler with a GUI, try\n <code>\n  x64dbg\n </code>\n . It's open source, available on github, so it should give you a nice starting point.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n @Twifty x64dbg itself is not a decompiler, though a decompiler called\n <a href=\"https://github.com/x64dbg/snowman\" rel=\"nofollow noreferrer\">\n  snowman may be used as a plugin\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John Källén",
            "text": "<html><body><span class=\"comment-copy\">\n Raise an issue on\n <a href=\"https://github.com/uxmal/reko/issues\" rel=\"nofollow noreferrer\">\n  github.com/uxmal/reko/issues\n </a>\n . We'll be more than happy to help you getting started.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You did not mention what the format of the binary is. If the decompiler you choose to extend does not support the format of the binary you want to decompile then you will need to either implement support for that format or find a work-around.\n </p>\n <p>\n  There are a number of open-source decompiler projects under active development that you can choose from. Of course, there are also plenty of dead compiler projects, but they will not be discussed.\n </p>\n <p>\n  The projects discussed here are\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/wargio/r2dec-js\" rel=\"nofollow noreferrer\">\n      r2dec\n     </a>\n    </strong>\n    - a plugin for radare2 written in JavaScript\n   </p>\n   <ul>\n    <li>\n     In the r2con2018 presentation \"How to not write a decompiler\" (\n     <a href=\"https://www.youtube.com/watch?v=2siU7B0PjPI\" rel=\"nofollow noreferrer\">\n      video\n     </a>\n     ,\n     <a href=\"https://github.com/radareorg/r2con2018/blob/master/talks/03-r2dec/r2dec.pdf\" rel=\"nofollow noreferrer\">\n      slides\n     </a>\n     ), an overview of how the radare2 plugin\n     <code>\n      r2dec\n     </code>\n     works is given, as well as some instructions and advice on how to extend it to new architectures (beginning at\n     <a href=\"https://youtu.be/2siU7B0PjPI?t=1079\" rel=\"nofollow noreferrer\">\n      17:59\n     </a>\n     of the presentation). If radare2 (a disassembler) does not support the architecture you are interested in, then you will need to implement this yourself.\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://github.com/uxmal/reko\" rel=\"nofollow noreferrer\">\n     <strong>\n      reko\n     </strong>\n    </a>\n    - standalone toolchain implemented in C#\n   </p>\n   <ul>\n    <li>\n     See the\n     <a href=\"https://github.com/uxmal/reko/wiki/HowTo\" rel=\"nofollow noreferrer\">\n      HowTo\n     </a>\n     in the wiki for instructions on how to proceed with extending it to a new architecture\n    </li>\n   </ul>\n  </li>\n  <li>\n   <a href=\"https://github.com/avast-tl/retdec\" rel=\"nofollow noreferrer\">\n    <strong>\n     RetDec\n    </strong>\n   </a>\n   - uses the Capstone disassembly framework and is based on LLVM\n   <ul>\n    <li>\n     An overview of how it works is provided here: (\n     <a href=\"https://retdec.com/static/publications/retdec-slides-botconf-2017.pdf\" rel=\"nofollow noreferrer\">\n      slides\n     </a>\n     ,\n     <a href=\"https://www.youtube.com/watch?v=HHFvtt5b6yY\" rel=\"nofollow noreferrer\">\n      video\n     </a>\n     ). Discussion of disassembly and translation to IR begins at around\n     <a href=\"https://youtu.be/HHFvtt5b6yY?t=1028\" rel=\"nofollow noreferrer\">\n      17:08\n     </a>\n     (slide 25). Extending it to an unsupported architecture probably will involve adding support to Capstone for disassembly as well as the asm -> IR translation in RetDec.\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  This is not meant to be an exhaustive list, of course. There are other options as well, such as\n  <a href=\"http://radare.today/posts/update-on-radeco/\" rel=\"nofollow noreferrer\">\n   radeco\n  </a>\n  and\n  <a href=\"https://github.com/yegord/snowman\" rel=\"nofollow noreferrer\">\n   snowman\n  </a>\n  , but these do not seem to be very well documented.\n </p>\n <p>\n  If it is decided that decompilation is not required and disassembly will suffice, a nice guide to adding a new processor module to IDA is given in the following articles:\n </p>\n <ul>\n  <li>\n   <a href=\"http://blog.ptsecurity.com/2018/09/how-we-developed-nios-ii-processor.html\" rel=\"nofollow noreferrer\">\n    How we developed the NIOS II processor module for IDA Pro\n   </a>\n  </li>\n  <li>\n   <a href=\"https://emanuelecozzi.net/posts/ctf/flareon-2018-challenge-12-subleq-rssb-writeup/\" rel=\"nofollow noreferrer\">\n    Flare-On 2018 - Challenge 12 - Subleq'n'RSSB\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "julian",
            "time": "Oct 10, 2018 at 0:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use Ghidra for this:\n  <a href=\"https://ghidra-sre.org/\" rel=\"nofollow noreferrer\">\n   https://ghidra-sre.org/\n  </a>\n </p>\n <p>\n  Creating new CPU descriptions is possible. There's nothing obvious in the way of documentation, but there are plenty of examples in the\n  <code>\n   Ghidra/Processors\n  </code>\n  folder. I managed to muddle through and create a new one for the 6502, even though I didn't quite understand everything (and still don't):\n  <a href=\"https://github.com/tom-seddon/ghidra_6502\" rel=\"nofollow noreferrer\">\n   https://github.com/tom-seddon/ghidra_6502\n  </a>\n </p>\n <p>\n  The decompiler appears to be driven entirely by these CPU descriptions, so I think all you need to do is make a new description, and you'll get C code, of a sort, out of it.\n </p>\n <p>\n  I'm not sure how feasible it is to turn a whole program into some code that you can recompile! - that's not something I need, so I haven't investigated that. But if you just need particular routines disentangling, it may suffice.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Tom Seddon",
            "time": "Mar 7, 2019 at 18:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}