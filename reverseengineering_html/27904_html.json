{
    "title": "I'm having trouble understanding this specific notation in Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/27904/im-having-trouble-understanding-this-specific-notation-in-ghidra",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing a code construct I created to learn Ghidra, and it looks different to what it is in GDB. I was wondering if anyone could clarify what the highlighted LEA instruction means: [I don't know how it should be read]\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/U3y92.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Screenshot of the disassembly in Ghidra\" src=\"https://i.sstatic.net/U3y92.png\"/>\n  </a>\n </p>\n <p>\n  Thanks, R.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "x86",
        "ghidra"
    ],
    "user": "Constructive",
    "time": "Jun 27, 2021 at 14:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   LEA\n  </code>\n  means \"Load Effective Address\", i.e. instead of loading into the EAX register the\n  <em>\n   content\n  </em>\n  at the address ESP+8, it loads directly the\n  <em>\n   address\n  </em>\n  , i.e. the content of the register ESP increased by 8.\n </p>\n <p>\n  For illustration, if in the\n  <strong>\n   ESP\n  </strong>\n  register (Extended Stack Pointer) is the value\n  <strong>\n   1000\n  </strong>\n  , the situation may be as this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/8yAgb.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/8yAgb.png\"/>\n  </a>\n </p>\n <p>\n  Then your instruction\n  <code>\n   LEA EAX, [ESP+8]\n  </code>\n  loads into the\n  <strong>\n   EAX\n  </strong>\n  register the number\n  <strong>\n   1008\n  </strong>\n  —\n  <strong>\n   the address of the 3\n   <sup>\n    rd\n   </sup>\n   value in the stack\n  </strong>\n  .\n </p>\n <p>\n  In other words, the\n  <strong>\n   EAX\n  </strong>\n  will contain the\n  <strong>\n   address\n  </strong>\n  (a pointer) to the value 531.\n </p>\n <p>\n  <em>\n   Compare:\n  </em>\n </p>\n <p>\n  If you replace the\n  <code>\n   LEA\n  </code>\n  instruction with the\n  <code>\n   MOV\n  </code>\n  one:\n </p>\n <pre><code>LEA EAX, [ESP+8]    ; original (LEA): EAX = 1008\nMOV EAX, [ESP+8]    ; replaced (MOV): EAX =  531\n</code></pre>\n <p>\n  then the\n  <strong>\n   EAX\n  </strong>\n  register will be loaded with the\n  <em>\n   value in the stack\n  </em>\n  , i.e.\n  <strong>\n   531\n  </strong>\n  .\n </p>\n <hr/>\n <p>\n  <em>\n   Notes:\n  </em>\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     Why a pointer into stack?\n    </strong>\n    \n\n    Because arguments of functions are generally put into the stack.\n    \n\n    So in your code you probably obtained\n    <em>\n     a pointer to the particular (2\n     <sup>\n      nd\n     </sup>\n     ?) argument.\n    </em>\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     What the part\n     <code>\n      EAX => local_18\n     </code>\n     means?\n    </strong>\n   </p>\n   <p>\n    Ghidra's decompiler (to C language) doesn't know the original instructions (and variable names), so it creates names as your\n    <code>\n     local_18\n    </code>\n    .\n   </p>\n   <p>\n    In the listing (disassembly)\n    <code>\n     EAX => local_18\n    </code>\n    means something as:\n   </p>\n   <blockquote>\n    <p>\n     “In this location, your variable\n     <code>\n      local_18\n     </code>\n     is used in the form of the\n     <strong>\n      EAX\n     </strong>\n     register”.\n    </p>\n   </blockquote>\n   <p>\n    (This variable is not in the memory — its value is directly in the\n    <strong>\n     EAX\n    </strong>\n    register.)\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "MarianD",
            "time": "Jun 29, 2021 at 0:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Constructive",
                    "text": "<span class=\"comment-copy\">Do you mean that the address of [ESP + local_18] is loaded into EAX, and ESP is increased by 8? [I'm rephrasing what you said for clarification]</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">No, ESP itself is not increased. For example, if in the ESP is the number 100, then after performing the highlighted instruction in the EAX registry will be 108 and in the ESP still 100. <code>local_18</code> has nothing with this instruction, it's only the Ghidra's hint (meaning that the result (108) will be saved in the variable <code>local_18</code>).</span>",
                    "time": null
                },
                {
                    "user": "Constructive",
                    "text": "<span class=\"comment-copy\">This is what I'm seeing: LEA EAX=&gt;local_18, [ESP + 0x8] I don't understand where the [ESP + 0x8] comes from and I don't understand what the \"EAX =&gt; local_18\" shows</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">I  extended my answer with an illustration and the description.</span>",
                    "time": null
                }
            ]
        }
    ]
}