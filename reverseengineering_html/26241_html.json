{
    "title": "Extract closed format metadata from audio file",
    "link": "https://reverseengineering.stackexchange.com/questions/26241/extract-closed-format-metadata-from-audio-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am writing an app to analyze .wav audio files and extract metadata.  The way the metadata works for RIFF based files is shown in this picture:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/OwQXU.gif\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/OwQXU.gif\"/>\n  </a>\n </p>\n <p>\n  You need to have \"format\" and \"data\" subchunks, but then you can have as many subchunks as you want in the file.  To extract a particular subchunk, you go to the first subchunk, read it's ID, and if its not the one you are looking for you get the subchunk size and then skip to the next subchunk ID.\n </p>\n <p>\n  Other examples of \"open\" subchunks are iXML and ID3.  The one in particular I am hoping to read is from Soundminer, which is a searchable database program.  Their subchunk ID is \"SMED\" so I am able to find that and copy the contents of their metadata.  Being that it is a closed subchunk, I'm having difficulty turning that data into a readable format.\n </p>\n <p>\n  That being said, I have access to Soundminer, so I am able to write specific strings in the SMED  metadata to hopefully decipher later in the data dump.\n </p>\n <p>\n  Since I'm completely new to this, I'm looking for advice on the best strategy to reverse engineer this metadata.  It is a massive subchunk with the ability to store images and and waveform caches.  I'm looking to just get some of the more simple data like \"Description\" and \"Microphone\".\n </p>\n <p>\n  I am on macOS so that may limit my methods.  Also the app is being written in swift, but my current method is to dump out the hex values of that data to a text file and manually look for patterns, which I've been able to see some.  For example if I write the letter \"a\" to the description, then analyze the file, I'll get the same repeated 16 digit value\n  <code>\n   09 14 c2 0c c3 0f 9f 8c\n  </code>\n  , but if I put just one \"a\" then that value isn't there.  It seems like it needs \"aaaaaaaa\" to give me the\n  <code>\n   09 14 c2 0c c3 0f 9f 8c\n  </code>\n  .  Obviously this a flawed strategy and not very likely to yield results.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "363",
    "tags": [
        "macos"
    ],
    "user": "kernelpanic",
    "time": "Nov 4, 2020 at 17:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Open up the binary in IDA Pro.\n  </li>\n  <li>\n   Search for\n   <code>\n    0x534D4544\n   </code>\n   , which is the 32-bit encoding for the\n   <code>\n    SMED\n   </code>\n   tag.\n  </li>\n  <li>\n   There are five results; three of them are\n   <code>\n    mov\n   </code>\n   instructions, two of them are\n   <code>\n    cmp\n   </code>\n   instructions. The latter two are the interesting ones; this is where it's comparing the subchunk ID tags. They are both in a function called\n   <code>\n    -[SMMDScanner getSMMetadata:signature:]\n   </code>\n   .\n  </li>\n  <li>\n   Immediately you find that it decrypts the data with Blowfish in ECB mode, using the fixed key \"u7w58he4746\". (Discard and don't process the first four bytes before decrypting, as those are just the (big-endian) length of the following encrypted data.)\n  </li>\n  <li>\n   Immediately you also see that the decrypted data is returned in an\n   <code>\n    NSString\n   </code>\n   , which obviously contains XML data from looking at the strings in the surrounding code. E.g. it ensures that the decrypted data begins with\n   <code>\n    <MAGIC>\n   </code>\n   and ends with\n   <code>\n    </MAGIC>\n   </code>\n   .\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Rolf Rolles",
            "time": "Nov 9, 2020 at 11:57",
            "is_accepted": true,
            "comments": [
                {
                    "user": "kernelpanic",
                    "text": "<span class=\"comment-copy\">This answer is above and beyond so thank you for your time and effort</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since you have access to the program that produces the data, you can use it as an oracle:\n </p>\n <ol>\n  <li>\n   <p>\n    Make a file with empty description strings\n   </p>\n  </li>\n  <li>\n   <p>\n    Make another with one letter description\n   </p>\n  </li>\n </ol>\n <p>\n  Dump the two files and look for differences. Then start adding longer descriptions and check how it affects the output. Keep going until you figured out the format for all variations you can think of.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 9, 2020 at 8:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}