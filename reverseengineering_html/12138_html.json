{
    "title": "Help Coverting ASM to C [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12138/help-coverting-asm-to-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions asking for help\n       <b>\n        reverse-engineering a specific system\n       </b>\n       are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2016-03-07 17:04:27Z\">\n        9 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/12138/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I need assistance decompiling the following from ASM to pseudo C.\n </p>\n <pre><code>Code 1\n...\nmov edx, Var1       # Move Var1 to edx\nmov ecx, Var2       # Move Var2 to ecx\nmov eax, edx        # Move EDX (Var1) to EAX\nimul ecx            # Multiply EAX (Var1) by ECX (Var2). Store result into EDX:EAX\nmov edx, eax        # Move EAX to EDX\nimul edx, eax       # Multiply EDX and EAX, store result into EDX\nmov Var3, ecx       # Move ECX into Var3\n...\n</code></pre>\n <p>\n  I commented the ASM and deduced it results in Var3 = Var2. But what would the C code look like?\n </p>\n <pre><code>Code 2\n...\n    mov dword ptr [esi], 1\n    xor edx, edx\n    mov [ebx], edx\n    jmp short loc_4012F1\n\nloc_4012E8:\n    mov ecx, [esi]\n    imul ecx, [esi]\n    mov [esi], ecx\n    inc dword ptr [ebx]\n\nloc_4012F1:\n    cmp dword ptr [ebx], 8\n    jl short loc_4012E8\n...\n</code></pre>\n <p>\n  For this second code, I'm thinking something like,\n </p>\n <pre><code>for (int i = 0; i > 8; i++){\nint a = 8;\n\nint b = 9;\n\nint c = a * b;\n}\n</code></pre>\n <p>\n  Appreciate any help\n </p>\n</div>\n</body></html>",
    "votes": "-2",
    "answers": 1,
    "views": "447",
    "tags": [
        "assembly",
        "decompilation",
        "c"
    ],
    "user": "d123",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Simple solution d123 use IDA PRO with Hex-Rays Decompiler, it produces very good results for simple assembly codes like this\n </p>\n <p>\n  I assembled your code line by line.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/DkmmO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"assembly code image\" src=\"https://i.sstatic.net/DkmmO.png\"/>\n  </a>\n </p>\n <p>\n  Then Pressed\n  <code>\n   F5 key\n  </code>\n  and bam got this code below!\n </p>\n <pre><code>_DWORD *a1@<ebx>;\n_DWORD *a2@<esi>;\n  *a2 = 1;\n  for ( *a1 = 0; *a1 < 8; ++*a1 )\n    *a2 *= *a2;\n</code></pre>\n <p>\n  it can compile too if you rename\n  <code>\n   _DWORD\n  </code>\n  to\n  <code>\n   unsigned int\n  </code>\n  and \nremove\n  <code>\n   @<ebx>\n  </code>\n  and\n  <code>\n   @<esi>\n  </code>\n  these are just to show what a1 and a2 means\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "SSpoke",
            "time": "Mar 6, 2016 at 2:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Expensive solution is more like it. I've been a customer of IDA Pro for well over a decade and participated in an early beta of the Hex-Rays decompiler plugin, but since it let me more astray than it helped, I decided to not buy the plugin (and pay for the upkeep of maintenance every year). Of course others simply pirate the software, but as a paying customer I am a bit <i>biased</i> against that, even if it sometimes would be more convenient.</span>",
                    "time": null
                }
            ]
        }
    ]
}