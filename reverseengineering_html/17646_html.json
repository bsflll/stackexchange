{
    "title": "What are the unk in IDA pseudo code?",
    "link": "https://reverseengineering.stackexchange.com/questions/17646/what-are-the-unk-in-ida-pseudo-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've open wsl.exe in IDA v7. With Tab key I open pseudocode of\n  <code>\n   sub_1400129F4\n  </code>\n  like this:\n </p>\n <pre><code>__int64 sub_1400129F4(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ...) {\n......\n\nv8 = (__int64 *)sub_140011A40();\n}\n</code></pre>\n <ul>\n  <li>\n   The assembly of\n   <code>\n    sub_140011A40()\n   </code>\n   :\n  </li>\n </ul>\n <pre><code>sub_140011A40 proc near\nlea     rax, unk_14001C2B0\nretn\nsub_140011A40 endp\n</code></pre>\n <ul>\n  <li>\n   The pseudo code of\n   <code>\n    sub_140011A40()\n   </code>\n   :\n  </li>\n </ul>\n <pre><code>void *sub_140011A40() {\n  return &unk_14001C2B0;\n}\n</code></pre>\n <ul>\n  <li>\n   The\n   <code>\n    .data\n   </code>\n   sections shows this:\n  </li>\n </ul>\n <pre><code>.data:000000014001C2AE                 db    0\n.data:000000014001C2AF                 db    0\n.data:000000014001C2B0 unk_14001C2B0   db    0                 ; DATA XREF: sub_140011A40↑o\n.data:000000014001C2B1                 db    0\n.data:000000014001C2B2                 db    0\n.data:000000014001C2B3                 db    0\n.data:000000014001C2B4                 db    0\n.data:000000014001C2B5                 db    0\n.data:000000014001C2B6                 db    0\n.data:000000014001C2B7                 db    0\n.data:000000014001C2B8 unk_14001C2B8   db    0                 ; DATA XREF: sub_140011A48↑o\n.data:000000014001C2B9                 db    0\n.data:000000014001C2BA                 db    0\n</code></pre>\n <ul>\n  <li>\n   Question: What is the\n   <code>\n    unk\n   </code>\n   in that pseudo code or in that assembly? Does it hold the values of eight zeros from\n   <code>\n    .data\n   </code>\n   section?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "Mar 9, 2018 at 21:17",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n post the assembly too interpreting a pseudo interpretation without context is tedious unk means unknown (may be someone writes there during runtime ?? and it is unknown at the moment  does assembly say mov eax, qword [unk]\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n so it is clear lea returns 14001C2B0 not the 0 lea is a speacial kind of move instruction that moves the address not the contents so v8 = 14001C2B0\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n forget the unk it is a label and it has no meaning in c or d or go it is a name given by ida to that specific address try pressing d on the address the unk will change to byte , press d again it will beome word press d again it will become dword etc etc  the code would be appromiximately v8 = &foo()\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>lea rax , unk___xxx \nret \n</code></pre>\n <p>\n  means the function returns the address not the contents\n </p>\n <p>\n  lea (load effective address ) is a special kind of mov instruction that load the address not the contents\n </p>\n <p>\n  the unk is a label ida could not decipher the type so it labelled the address as unk (possibly short form for unknown)\n </p>\n <p>\n  if you select that address and press\n  <strong>\n   d\n  </strong>\n  ida will replace the unk with byte \nif you press\n  <strong>\n   d\n  </strong>\n  again ida will rename the byte to word  etc etc\n </p>\n <p>\n  basically from your pseudo code\n </p>\n <p>\n  the result would be\n  <code>\n   v8 = &foo()\n  </code>\n </p>\n <p>\n  a screen shot where ida wasn't sure what the type was for a\n  <code>\n   CRITICAL_SECTION\n  </code>\n  pointer manually applying the structure to the address\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/AfrcS.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/AfrcS.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Mar 9, 2018 at 21:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}