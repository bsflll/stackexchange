{
    "title": "What's the use of \"Segments Registers\" sub view of IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/9277/whats-the-use-of-segments-registers-sub-view-of-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am new user of IDA Pro. The version I am using is 6.8 demo.\nI know conceptions of program segmentation and segment register. \nBut, I am confused about why there are two views, \"Program Segmentation\" and \"Segment register\"\nBelew is snapshot of program segmentation view.\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZPdXd.png\"/>\n  Belew is snapshot of program register view\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/eMa0z.gif\"/>\n  As we can see the information of two views is almost duplicated.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida"
    ],
    "user": "appleleaf",
    "time": "Jul 3, 2015 at 2:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This was interesting when DOS was the operating system of choice, processors had 16 bits, and programs were larger than 64 KB. Those times, the content of segment registers changed a lot; programs had to use far jumps (that changed CS and IP) to jump to addresses more than 64 KB away, and they had to load a value into DS or ES first to access large data segments (or load\n  <code>\n   0x0040\n  </code>\n  into ES to access BIOS data structures and have access to the 'high resolution timer' which changed 18.2 times a second).\n </p>\n <p>\n  Here's part of the disassembly of an old 16 bit program:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Nc3PN.png\"/>\n </p>\n <p>\n  Please note that there are three segment changes that change the assumption of IDA about the contents of the segments, and another one at\n  <code>\n   25EB\n  </code>\n  where\n  <code>\n   ES\n  </code>\n  is 'changed' to\n  <code>\n   seg130\n  </code>\n  , which isn't really a change, so there's no\n  <code>\n   assume\n  </code>\n  directive.\n </p>\n <p>\n  Here's the corresponding segment registers view:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/bh5wy.png\"/>\n </p>\n <p>\n  in which\n  <code>\n   15412\n  </code>\n  corresponds to\n  <code>\n   seg001:25B2\n  </code>\n  ; if you click on that row in IDA, the program view will jump to that address. The following 3 'change points' correspond to the next addresses where the code actually changes a segment register value.\n </p>\n <p>\n  Those days, programs contained several code segments, and several data segments, so the program segmentation view had a lot to show as well:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/opPEb.png\"/>\n </p>\n <p>\n  you see there are many\n  <code>\n   CODE\n  </code>\n  segments and many\n  <code>\n   UNK\n  </code>\n  nown segments, only a small part of the whole program is shown. Each of these\n  <code>\n   CODE\n  </code>\n  segments used a different value for\n  <code>\n   CS\n  </code>\n  , which is why IDA creates a new segment register change entry for each new segment.\n </p>\n <p>\n  These days, unless you're disassembling kernel code, you won't see segment register changes at all, and even if you're disassembling the kernel, you'll have one code segment and one data segment, not many of them. So IDA just creates one segment from each section of the input file, and creates the corresponding change points, but there's no change point except the ones that are created for the segments. Which is why the views correspond to each other, and which is also why you're not interested in either of them in most cases.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Guntram Blohm",
            "time": "Jul 3, 2015 at 6:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "appleleaf",
                    "text": "<span class=\"comment-copy\">Really helpful. I roughly understand the usage. And thanks a lot for the description for the history and background.</span>",
                    "time": null
                }
            ]
        }
    ]
}