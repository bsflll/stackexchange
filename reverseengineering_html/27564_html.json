{
    "title": "Why rundll32.exe could be loading a DLL multiple times?",
    "link": "https://reverseengineering.stackexchange.com/questions/27564/why-rundll32-exe-could-be-loading-a-dll-multiple-times",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since I started reverse engineering I've found multiple DLLs that when being debugged(IDA + WindDBG) would be unloaded and reloaded continuously without any evident reason.\n </p>\n <p>\n  Most of the time I use rundll32.exe to load and debug any DLL and I just get this behavior with a few binaries.\n </p>\n <p>\n  The current lib I am debugging is quite simple, most of the logic of the program is executed by a thread created at the DLL's entry point. Then, its single export(DllRegisterServer) has a loop which checks if a flag has been set to finally call ExitProcess.\n </p>\n <p>\n  When I enter the main's logic thread I suspend any other thread and single step through it as always. As I go, randomly the DLL is unloaded, reloaded, and the dbg sets me again at DllEntryPoint, which makes the RE job quite annoying.\n </p>\n <p>\n  What could be the reason for that behavior?\n </p>\n <p>\n  Edit: Within x64dbg this does not happen. Same file, same command line.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "258",
    "tags": [
        "ida",
        "debugging",
        "dll",
        "windbg",
        "libraries"
    ],
    "user": "hariseldon",
    "time": "Apr 26, 2021 at 16:48",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Does the DLL have TLS callbacks? Any example that\n <i>\n  we\n </i>\n could reproduce for ourselves?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hariseldon",
            "text": "<html><body><span class=\"comment-copy\">\n Hi there, the sample has no TLS callbacks and it is a sample of IcedID's(malware) new loader. If willing to play with a real file, samples can be found at MalwareBazaar under the IcedID tag and are easily unpacked by following a few VirtualAlloc calls.(Regarding the packing thing, the file I am working with is an unpacked standalone version.)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hariseldon",
            "text": "<html><body><span class=\"comment-copy\">\n Oh I forgot to mention that this behavior does not happen when I debug the same DLL, launched with the same command line with x64dbg. Although I am still curious about what could be causing this.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n Are you sure the DLL is actually reloaded, i.e. the module base differs? A DLL's entry point is called for 4 reasons,\n <code>\n  DLL_PROCESS_ATTACH\n </code>\n ,\n <code>\n  DLL_PROCESS_DETACH\n </code>\n ,\n <code>\n  DLL_THREAD_ATTACH\n </code>\n or\n <code>\n  DLL_THREAD_DETACH\n </code>\n , so maybe you're just getting thread notifications.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hariseldon",
            "text": "<html><body><span class=\"comment-copy\">\n @JohannAydinbas thanks a lot, I didn't know that DLLs are executed every time a thread is created or terminated. In my case, the main thread calls some Windows networking functions that create threads, resulting on the program performing several calls to DllMain with the DLL_THREAD_ATTACH fdwReason.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}