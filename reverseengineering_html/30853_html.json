{
    "title": "Nice documentation of the binary analysis tool \"angr\", to analyse system calls in statically linked binary and hence possibly draw a system call graph",
    "link": "https://reverseengineering.stackexchange.com/questions/30853/nice-documentation-of-the-binary-analysis-tool-angr-to-analyse-system-calls-i",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am a new master's student in CS. I am into the computer systems domain. I was just thinking of analyzing a statically linked binary to get a sort of database of system calls made in the binary and then accordingly, use that database to draw a system call graph out of it. It is part of our master's project. So, I do not want any spoilers or even the slightest code snippet, which I could copy into my work. I want to do the work entirely on my own from scratch. Otherwise, I do not feel satisfied and feel that I have not learned anything.\n </p>\n <p>\n  So, can anyone give me suitable pointers to documentation, tutorial, or even YouTube videos, which would help me to get familiarized with \"angr\", the relevant sections required for the kind of work which I want to do?\n </p>\n <p>\n  The tutorials or video lectures that I have seen so far deal with only CTF tutorials or symbolic execution. I could not find any research paper or textbook that explains the kind of work which I aim to do using \"angr\".\n </p>\n <p>\n  Can anyone just guide me with the required resources? I just need the guidance to know the power of \"angr\" and what it can possibly support, for the kind of work that I plan to achieve through it.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "578",
    "tags": [
        "x86",
        "static-analysis"
    ],
    "user": "Abhishek Ghosh",
    "time": "Sep 4, 2022 at 15:09",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "<html><body><span class=\"comment-copy\">\n Tools like strace can log system calls made by an executable. Some judicious grep/sed could provide output for each call that could be dropped into a database. From there you could potentially perform queries and generate graphs from the results. If you're decided on using angr, then I'd start reading the docs:\n <a href=\"https://docs.angr.io/\" rel=\"nofollow noreferrer\">\n  docs.angr.io\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here are things you could possibly be asking for:\n </p>\n <ol>\n  <li>\n   A mapping of which system calls are made by each function in your binary\n  </li>\n  <li>\n   A complete crossreference (xref) graph of the dependencies in your binary\n  </li>\n  <li>\n   A combination of 1) and 2) - a graph of crossreferences that show every function whose calls eventually lead to a system call\n  </li>\n </ol>\n <p>\n  though you could also be asking for something else I've misunderstood. I'm assuming you're asking for 3).\n </p>\n <p>\n  One way to construct what you are asking for is to use the angr database of functions, as detailed in the\n  <a href=\"https://docs.angr.io/built-in-analyses/cfg\" rel=\"nofollow noreferrer\">\n   angr CFG documentation.\n  </a>\n  You could construct the cross-references by taking the angr \"function manager\" object and, for each function and each basic block use the get_call_target(callsite_addr) function to figure out the the function's sub-calls. This would give you a feed-forward call graph.\n </p>\n <p>\n  Restricting the feed-forward call graph to just things that feed into system calls depends upon how system calls are implemented on your architecture. On x86, for instance, system calls are performed using the int 80 instruction so you'd have to scan each function for that.\n  <a href=\"https://stackoverflow.com/questions/12946958/what-is-the-interface-for-arm-system-calls-and-where-is-it-defined-in-the-linux\">\n   This Stack Exchange thread\n  </a>\n  has a more complete answer to what constitutes a system call on each architecture.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "dingo_kinznerhook",
            "time": "Sep 8, 2022 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}