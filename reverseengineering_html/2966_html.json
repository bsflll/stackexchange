{
    "title": "Some programs have always same addressing and some different",
    "link": "https://reverseengineering.stackexchange.com/questions/2966/some-programs-have-always-same-addressing-and-some-different",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Why do IDA and Ollydbg always open some programs with the main() function at the same address?\n </p>\n <p>\n  The address given by IDA is equal to that given by Ollydbg in runtime. However, when I wrote my own C app and ran it, the address of\n  <code>\n   main()\n  </code>\n  was always different between each runtime in Ollydbg.\n </p>\n <p>\n  In IDA, though, there was always the same address, never equal to the one given by Ollydbg, which looked like just some relative address.\n </p>\n <p>\n  Is this caused by the compiler or by something else?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "368",
    "tags": [
        "ida",
        "debuggers",
        "ollydbg"
    ],
    "user": "Wiggler Jtag",
    "time": "Dec 1, 2013 at 21:48",
    "comments": [
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n Readup on ASLR.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n ASLR = Address-Space Layout Randomization\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"http://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow\">\n   http://en.wikipedia.org/wiki/Address_space_layout_randomization\n  </a>\n  -\n </p>\n <blockquote>\n  <p>\n   <strong>\n    Address space layout randomization (ASLR)\n   </strong>\n   is a computer security\n  technique involved in protection from buffer overflow attacks. In\n  order to prevent an attacker from reliably jumping to a particular\n  exploited function in memory (for example), ASLR involves randomly\n  arranging the positions of key data areas of a program, including the\n  base of the executable and the positions of the stack, heap, and\n  libraries, in a process's address space.\n  </p>\n </blockquote>\n <p>\n  You can disable ASLR in your C app at build-time by using the linker option\n  <a href=\"http://msdn.microsoft.com/en-us/library/bb384887.aspx\" rel=\"nofollow\">\n   <code>\n    /DYNAMICBASE:NO\n   </code>\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Oct 27, 2013 at 14:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">You can also remove the flag from an existing EXE by using <code>EDITBIN</code>, or about any hex editor.</span>",
                    "time": null
                }
            ]
        }
    ]
}