{
    "title": "Reverse engineering IE thick client",
    "link": "https://reverseengineering.stackexchange.com/questions/18304/reverse-engineering-ie-thick-client",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Internet Explorer allows for creating thick clients that run in the browser via a\n  <a href=\"https://en.wikipedia.org/wiki/Browser_Helper_Object\" rel=\"nofollow noreferrer\">\n   Browser Helper Object (BHO)\n  </a>\n  .\n </p>\n <p>\n  In trying to reverse one such thick client I noticed that the website downloads about fifteen DLL files making it difficult to discern where the entry point is.\n </p>\n <p>\n  Since the files were written in .NET they were (mostly) decompiled by using\n  <a href=\"https://www.jetbrains.com/decompiler/\" rel=\"nofollow noreferrer\">\n   dotPeek\n  </a>\n </p>\n <p>\n  What are some steps that can be taken to help narrow down the entry point - and possibly to debug certain actions? Also, is there another tool that would prove more useful in decompiling .NET dll's?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "264",
    "tags": [
        "debugging",
        "decompilation",
        "dll"
    ],
    "user": "pzirkind",
    "time": "May 17, 2018 at 13:55",
    "comments": [
        {
            "user": "zerocool",
            "text": "<html><body><span class=\"comment-copy\">\n entry point for what dll or IE i didn't get what u mean   so can explain more ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n dnSpy is miles better than anything else out there. As a bonus you can also use it to debug executables you donâ€™t have the source for.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}