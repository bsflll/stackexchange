{
    "title": "Extract non-extractable private key from OS X Keychain",
    "link": "https://reverseengineering.stackexchange.com/questions/6043/extract-non-extractable-private-key-from-os-x-keychain",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   I'm trying to extract a non-extractable private key as a\n   <code>\n    .p12\n   </code>\n   file from\n   <code>\n    Keychain Access.app\n   </code>\n   or\n   <code>\n    /usr/bin/security\n   </code>\n   on Mac OS X 10.9.4.\n  </strong>\n </p>\n <hr/>\n <p>\n  Basically, it appears that\n  <a href=\"https://stackoverflow.com/questions/25109994/non-extractable-private-key-in-keychain-on-os-x\">\n   <code>\n    security import\n   </code>\n   has a\n   <code>\n    -x\n   </code>\n   option to specify that\n   <code>\n    private keys are non-extractable after being imported\n   </code>\n  </a>\n  .\n </p>\n <ul>\n  <li>\n   <a href=\"http://opensource.apple.com/source/SecurityTool/SecurityTool-55115/keychain_import.c\" rel=\"nofollow noreferrer\">\n    http://opensource.apple.com/source/SecurityTool/SecurityTool-55115/keychain_import.c\n   </a>\n  </li>\n  <li>\n   <a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExport.h\" rel=\"nofollow noreferrer\">\n    http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExport.h\n   </a>\n  </li>\n </ul>\n <p>\n  As per above, this is implemented by explicitly omitting\n  <code>\n   CSSM_KEYATTR_EXTRACTABLE\n  </code>\n  during the import.  Subsequently, when trying to export, the key without such an attribute cannot be exported.\n </p>\n <p>\n  I could find at least two relevant mentions which appear to prevent such keys from being exported (hint: use\n  <code>\n   fgrep -OR\n  </code>\n  to avoid following the symbolic links when searching through Apple source code):\n </p>\n <ul>\n  <li>\n   <a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExportCrypto.cpp\" rel=\"nofollow noreferrer\">\n    http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExportCrypto.cpp\n   </a>\n  </li>\n  <li>\n   <a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_pkcs12/lib/pkcs12Crypto.cpp\" rel=\"nofollow noreferrer\">\n    http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_pkcs12/lib/pkcs12Crypto.cpp\n   </a>\n  </li>\n </ul>\n <hr/>\n <p>\n  <a href=\"https://apple.stackexchange.com/questions/140890/non-extractable-private-key-in-keychain-access-app\">\n   I've tried keychain_access from github.com/torsten\n  </a>\n  , but it didn't work.\n </p>\n <p>\n  <a href=\"https://security.stackexchange.com/questions/64323/export-non-extractable-private-key-from-keychain-on-os-x\">\n   I've tried using lldb\n  </a>\n  ,\n  <code>\n   lldb -- security export -t identities -f pkcs12 -o /tmp/mycerts.p12\n  </code>\n  , to break on\n  <a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecWrappedKeys.cpp\" rel=\"nofollow noreferrer\">\n   SecWrappedKeys.cpp::impExpWrappedKeyOpenSslExport()\n  </a>\n  , but that doesn't seem to work, either, with\n  <code>\n   break impExpWrappedKeyOpenSslExport\n  </code>\n  giving out an error\n  <code>\n   invalid command 'breakpoint impExpWrappedKeyOpenSslExport'\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/25088786/track-every-system-and-external-library-call-on-an-os-x-app\">\n   I've tried DTrace\n  </a>\n  to trace Cisco AnyConnect, but I'm not familiar enough with DTrace for it to reveal the datastructures.\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/25152504/include-files-not-found-in-apple-open-source-software\">\n   I've tried re-compiling\n  </a>\n  the Security and SecurityTool packages, but they all appear to require bootstrapping that does not appear to be in place.\n </p>\n <p>\n  How do I get the private key?\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 2,
    "views": "5k",
    "tags": [
        "binary-analysis",
        "debuggers",
        "file-format",
        "osx",
        "compilers"
    ],
    "user": "cnst",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've arrived at a solution by researching an answer for one of my Keychain subquestions.\n </p>\n <ul>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/25109994/non-extractable-private-key-in-keychain-on-os-x\">\n    https://stackoverflow.com/questions/25109994/non-extractable-private-key-in-keychain-on-os-x\n   </a>\n   .\n  </li>\n </ul>\n <p>\n  According to SecItem.h, this\n  <strong>\n   <code>\n    kSecAttrIsExtractable\n   </code>\n  </strong>\n  has been introduced with OS X 10.6.\n </p>\n <ul>\n  <li>\n   <a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecItem.h\" rel=\"nofollow noreferrer\">\n    http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecItem.h\n   </a>\n  </li>\n </ul>\n <p>\n  As such, I've tried and succeeded in the following:\n </p>\n <ul>\n  <li>\n   <p>\n    <code>\n     scp ~/Library/Keychains/login.keychain\n    </code>\n    from OS X 10.9 to OS X 10.5\n   </p>\n  </li>\n  <li>\n   <p>\n    On OS X 10.5, as per the example from the manual page:\n   </p>\n   <p>\n    <code>\n     security export -k /tmp/login.keychain -t identities -f pkcs12 -o /tmp/mycerts.p12\n    </code>\n   </p>\n   <p>\n    The\n    <code>\n     security\n    </code>\n    app will ask you for several passwords:\n   </p>\n   <ol>\n    <li>\n     the new password from the first dialogue is to protect the p12 that's being exported;\n    </li>\n    <li>\n     the second one is the\n     <code>\n      login.keychain\n     </code>\n     password, which normally would be the same as the login password of the user on the original OS X 10.9 from where the keychain file came from.\n    </li>\n   </ol>\n  </li>\n  <li>\n   <p>\n    <code>\n     scp /tmp/mycerts.p12\n    </code>\n    back to OS X 10.9 from 10.5\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found an easier way with\n  <a href=\"https://github.com/gremwell/chainbreaker\" rel=\"nofollow noreferrer\">\n   chainbreaker fork\n  </a>\n  . It works with MacOS 10.14 Mojave. See full instructions\n  <a href=\"https://github.com/gremwell/chainbreaker/blob/master/README-keydump.txt\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  In my case, I did the following:\n </p>\n <pre><code>$ pip2 install hexdump pycrypto pyopenssl\n$ git clone https://github.com/gremwell/chainbreaker.git && cd chainbreaker\n$ python2 chainbreaker.py -f ~/Library/Keychains/login.keychain-db -p <PASS>\n$ openssl x509 -inform DER -in exported/associated/1/*.crt -out secret.crt\n$ openssl rsa -inform DER -in exported/associated/1/*.key -out secret.key\n$ openssl pkcs12 -export -out secret.p12 -inkey secret.key -in secret.crt\n</code></pre>\n <p>\n  Then secret.p12 is ready to be imported on another machine.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "julian",
            "time": "Dec 27, 2018 at 0:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Leonovich",
                    "text": "<span class=\"comment-copy\">You saved my life, respect</span>",
                    "time": null
                }
            ]
        }
    ]
}