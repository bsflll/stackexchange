{
    "title": "determine if 2 byte checksum is CRC-16 based",
    "link": "https://reverseengineering.stackexchange.com/questions/31726/determine-if-2-byte-checksum-is-crc-16-based",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have pairs of data / messages with what I believe to be CRC-16\n </p>\n <p>\n  I know for a fact the bit order of each individual byte is reversed (at least in C# on x86 platform, I have to flip the binary around)\n </p>\n <p>\n  Can someone help confirm if it is CRC or not?\n </p>\n <p>\n  Sample message pairs with valid checksums (I can create as many of these samples as needed)\n </p>\n <p>\n  I can also create samples with less 00 bytes, i.e. more byte values instead of 00, and I can also create samples of a different length if needed.\n </p>\n <p>\n  <strong>\n   Sample 1:\n  </strong>\n  FFFFFFFFFFFF /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   72BE\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 2:\n  </strong>\n  000000000000 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   2A3D\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 3:\n  </strong>\n  000000000001 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   89F7\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 4:\n  </strong>\n  000000000002 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   0864\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 5:\n  </strong>\n  000000000003 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   ABAE\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 6:\n  </strong>\n  000000000004 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   9396\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 7:\n  </strong>\n  000000000005 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   305C\n  </strong>\n </p>\n <p>\n  <strong>\n   Sample 8:\n  </strong>\n  000000000006 /\n </p>\n <p>\n  0100100A00000000000000000000FFFFFFFFFF\n  <strong>\n   B1CF\n  </strong>\n </p>\n <p>\n  I've experimented with CRC RevEng and SRP16 and crccalc.com with no luck so far.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "281",
    "tags": [
        "crc",
        "checksum"
    ],
    "user": "HANGOBA",
    "time": "Mar 29, 2023 at 22:53",
    "comments": [
        {
            "user": "Rohit Gupta",
            "text": "<html><body><span class=\"comment-copy\">\n How about a sample with all 0s\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You could try with\n  <a href=\"https://github.com/colinoflynn/crcbeagle\" rel=\"nofollow noreferrer\">\n   CRC Beagle\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Lo√Øc Damien",
            "time": "Apr 1, 2023 at 20:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "HANGOBA",
                    "text": "<span class=\"comment-copy\">Thanks, do you know off the top of your head if this accounts for both Byte order (Endianess) and Bit order (reflection) ?  I'm almost wondering if thats why I was coming up short with SRP16 even running it against XOR'd together \"purified\" sample message pairs, perhaps SRP16 does reflection (bit order) but not byte order</span>",
                    "time": null
                }
            ]
        }
    ]
}