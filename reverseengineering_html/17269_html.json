{
    "title": "Hex-Rays function signature does not match demangled name",
    "link": "https://reverseengineering.stackexchange.com/questions/17269/hex-rays-function-signature-does-not-match-demangled-name",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From the demangled name, I know that a function takes an\n  <code>\n   std::string const&\n  </code>\n  as a parameter but when generating psuedo-c code with Hex-Rays' decompiler it autodetects the parameters as\n  <code>\n   (int a1, int a2, int a3)\n  </code>\n </p>\n <p>\n  How can I fix the function signature Hex-Rays' is generating?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/vo2NH.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"screenshot of IDA graph view\" src=\"https://i.sstatic.net/vo2NH.png\"/>\n  </a>\n </p>\n <pre><code>int __fastcall EncodeUtil::getDecryptStr(int a1, int a2, int a3)\n{\n  int v3; // r7\n  unsigned int i; // r5\n  char v5; // r6\n  int v7; // [sp+4h] [bp-1Ch]\n  int v8; // [sp+8h] [bp-18h]\n\n  v7 = a2;\n  v8 = a3;\n  v3 = a1;\n  HttpUtility::URLDecode(&v7);\n  for ( i = 0; i < *(_DWORD *)(v7 - 12); ++i )\n  {\n    sub_3B25D0(&v7);\n    v5 = byte_41A7DD[i & 7];\n    *(_BYTE *)(v7 + i) ^= v5;\n    sub_3B25D0(&v7);\n    if ( !*(_BYTE *)(v7 + i) )\n    {\n      sub_3B25D0(&v7);\n      *(_BYTE *)(v7 + i) ^= v5;\n    }\n  }\n  sub_3B2E20(v3, &v7);\n  sub_3B1CCC(&v7);\n  return v3;\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "383",
    "tags": [
        "ida",
        "arm",
        "hexrays",
        "strings"
    ],
    "user": "armnotstrong",
    "time": "Jan 26, 2018 at 18:14",
    "comments": [
        {
            "user": "EWD-0-",
            "text": "<html><body><span class=\"comment-copy\">\n It looks like they have different calling conventions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @armnostrong: You should have specified that you are dealing with ARM targets...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Avery3R",
            "text": "<html><body><span class=\"comment-copy\">\n @armnotstrong: Do you know what compiler was used? The structure of an std::string is going to vary wildly based upon that\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "armnotstrong",
            "text": "<html><body><span class=\"comment-copy\">\n @Avery3R all I know is that this was a project of\n <a href=\"http://www.cocos2d-x.org/\" rel=\"nofollow noreferrer\">\n  cocos2dx\n </a>\n compiled for android device\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "armnotstrong",
            "text": "<html><body><span class=\"comment-copy\">\n @perror sorry for the inconvenience\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It looks like hex-rays mistakenly thought there were three parameters instead of two. If you look at the start of the function's disassembly\n  <code>\n   R1\n  </code>\n  and\n  <code>\n   R2\n  </code>\n  are not saved, only\n  <code>\n   R0\n  </code>\n  is. You should be able to just change the function signature to\n  <code>\n   int __fastcall EncodeUtil::getDecryptStr(void* pString)\n  </code>\n  . The default key to do so is\n  <code>\n   Y\n  </code>\n  . If you have a struct definition for\n  <code>\n   std::string\n  </code>\n  you can replace the\n  <code>\n   void*\n  </code>\n  in the signature with an\n  <code>\n   std::string*\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Avery3R",
            "time": "Jan 25, 2018 at 2:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">FYI <code>PUSH {R0-R2}</code> saves R0, R1 and R2.</span>",
                    "time": null
                },
                {
                    "user": "Avery3R",
                    "text": "<span class=\"comment-copy\">Ah yeah, I meant saved in another register to be used within this function later, like it did with <code>MOV R7, R0</code>. <code>R1</code> and <code>R2</code> are definitely used somewhere in this function later, but I'm willing to bet they're assigned to first before they're read from.</span>",
                    "time": null
                }
            ]
        }
    ]
}