{
    "title": "How to dump a unpacked PE and still get the API names with IDA when they are called directly?",
    "link": "https://reverseengineering.stackexchange.com/questions/22683/how-to-dump-a-unpacked-pe-and-still-get-the-api-names-with-ida-when-they-are-cal",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So i have a PE that unpacks itself and rewrites the entrypoint and so on (not the header)\n </p>\n <p>\n  i unpacked it using scylla and x32dbg, i set the OEP to the previous OEP since it writes the unpacked one from there, and the IAT search was successful\n </p>\n <p>\n  but the problem is after dumping it and loading it in IDA so i can use the decompiler, the API calls are like MEMORY[address](a , b . c)\n </p>\n <p>\n  i couldn't use the IDA to debug it because it gave some error before reaching WriteProcessMemory, i guess some anti debugging stuff, even with scyllahide i couldn't bypass these errors, but weirdly enough x32dbg had no problems, errors are because of wrong memory access, but somehow x32dbg has no problem!\n </p>\n <p>\n  so how can i fix this? i checked the addresses in MEMORY[address] and they are in fact the address of API calls, but i guess since the program is using them directly and not via IAT then IDA cannot know what are they, i guess one fix would be somehow including those dlls in their exact address in the dumped PE but i dont know how\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "305",
    "tags": [
        "ida",
        "debugging",
        "idapython",
        "unpacking"
    ],
    "user": "OneAndOnly",
    "time": "Dec 7, 2019 at 15:02",
    "comments": [],
    "answers_data": []
}