{
    "title": "Fixing '__asm' in pseudocode in IDA PRO (inconsistent fpu stack error)",
    "link": "https://reverseengineering.stackexchange.com/questions/16655/fixing-asm-in-pseudocode-in-ida-pro-inconsistent-fpu-stack-error",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I was doing some REing in IDA, changed a function parameter type and suddenly my stack pointer messes up (\n  <code>\n   1025B361: inconsistent fpu stack\n  </code>\n  ). Does anyone know what to look for here or how to fix it?\n </p>\n <p>\n  I tried the following:\n </p>\n <ul>\n  <li>\n   Undefining-redefining and changing argument types.\n   <li>\n    Changing the `double game_time` type to `float` in pseudocode, but it won't let me (`Sorry, cannot change variable type`, because it's in use in the pseudocode).\n    <li>\n     Changing the stack definition from `0000018C var_18C dq ?` to `dd`.\n     <li>\n      Changing the signature of `director_debug`.\n      <li>\n       Manually editing the HEX code from `DD 1C 24` to `D9 1C 24` (forcing m32fp).\n       <li>\n        In order: changing the function signature, changing the stack value, undefining the calling function and redefining it as a function (code).\n       </li>\n      </li>\n     </li>\n    </li>\n   </li>\n  </li>\n </ul>\n <p>\n  However, none of this helped.\n </p>\n <p>\n  Pseudocode\n </p>\n <pre><code>_EDX = game_time_ptr_12; //float edx@2\n__asm\n{\n  fld     dword ptr [edx+0Ch]\n  fstp    [esp+18Ch+var_18C]\n}\ndirector_debug(\"%3.2f: Director debug: %s.\n\", *(_QWORD *)&game_time, \"NORMAL MODE\"); //double||__int64 game_time ST24 8@2\n</code></pre>\n <p>\n  Dissassembly\n </p>\n <pre><code>.text:1025B35B 0 184                 mov     edx, game_time_ptr_12\n.text:1025B361 0 184                 fld     dword ptr [edx+0Ch]\n.text:1025B364 1 184                 push    offset aNormalMode ; \"NORMAL MODE\"\n.text:1025B369 1 188                 sub     esp, 8\n.text:1025B36C 1 190                 fstp    [esp+18Ch+var_18C] ;qword ptr [esp]\n.text:1025B36F 0 190                 push    offset a3_2fDirectorDe ; \"%3.2f: Director debug: %s.\n\"\n.text:1025B374 0 194                 call    director_debug\n</code></pre>\n <p>\n  What it should become\n </p>\n <pre><code>game_time = *(game_time_ptr_12) + 12);\ndirector_debug(\"%3.2f: Director debug: %s.\n\", game_time, \"NORMAL MODE\");\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "959",
    "tags": [
        "ida",
        "stack",
        "assembly"
    ],
    "user": "User1",
    "time": "Oct 29, 2017 at 23:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the Disassembly view, click\n  <strong>\n   \"Edit → Other → Reset decompiler type information\"\n  </strong>\n  and then select most or all of the checkboxes and hit \"Ok.\"\n </p>\n <p>\n  I did that to repair some register variables I accidentally combined into a double and then couldn't separate them again.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "MarianD",
            "time": "Aug 21, 2021 at 20:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently had the very same issue and I could only fix it by checking the following:\n </p>\n <p>\n  Whenever some methods returned\n  <code>\n   float\n  </code>\n  or\n  <code>\n   double\n  </code>\n  , calling methods displayed\n  <code>\n   __asm fstp\n  </code>\n  instructions instead of pseudo code assignments despite those method's stack being seemingly well defined. Additionally,\n  <code>\n   inconsistent fpu stack\n  </code>\n  is displayed in the Output window when listing these methods.\n </p>\n <p>\n  Switch to the disassembly of a messed up method. Its address line prefixes are accompanied by (what seems to be) the problematic FPU stack pointer. It will display a negative value (like\n  <code>\n   .text:0x0065789-1\n  </code>\n  ) at locations it calls methods that should return\n  <code>\n   float\n  </code>\n  or\n  <code>\n   double\n  </code>\n  .\n </p>\n <p>\n  I double-checked the return types of those methods, switching them back and forth from\n  <code>\n   int\n  </code>\n  to\n  <code>\n   float\n  </code>\n  /\n  <code>\n   double\n  </code>\n  , which eventually fixed the decompilation of the calling methods again.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ray",
            "time": "Oct 25, 2021 at 23:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}