{
    "title": "How does QPST work and how can I make an app like it?",
    "link": "https://reverseengineering.stackexchange.com/questions/17892/how-does-qpst-work-and-how-can-i-make-an-app-like-it",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How does Qualcomm's QPST work? Or what protocol/commands does QPST use? As I wanted to develop an app like it, I searched for AT commands. But I can't find out any AT commands that allows me access(read/write) my old phone's internal file system(firmware). Any helps like the name of the commands/protocols that QPST uses are appreciated.\n </p>\n <p>\n  Or if my question is off-topic, where should I ask?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "firmware",
        "embedded",
        "kernel"
    ],
    "user": "Hyeonseo Yang",
    "time": "Apr 7, 2018 at 6:16",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n I think your question is fine, but maybe split it in one about qpst, and another about extracting firmware.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is an open source project:\n  <a href=\"https://github.com/openpst/openpst\" rel=\"nofollow noreferrer\">\n   openpst\n  </a>\n  , which reimplements most functionality of the qpst tool.\n </p>\n <p>\n  Some of the protocols used are:\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/openpst/libopenpst/tree/master/include/qualcomm/dm.h\" rel=\"nofollow noreferrer\">\n    diag\n   </a>\n   - used to read nv memory, and switch to dload mode using\n   <code>\n    kDiagDload\n   </code>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/openpst/libopenpst/tree/master/include/qualcomm/sahara.h\" rel=\"nofollow noreferrer\">\n    sahara\n   </a>\n   - used by the primary bootloader in newer qualcomm chipsets\n  </li>\n  <li>\n   <a href=\"https://github.com/openpst/libopenpst/tree/master/include/qualcomm/dload.h\" rel=\"nofollow noreferrer\">\n    dload\n   </a>\n   , used by bootroms, and older chipsets.\n  </li>\n  <li>\n   <a href=\"https://github.com/openpst/libopenpst/tree/master/include/qualcomm/streaming_dload.h\" rel=\"nofollow noreferrer\">\n    streaming dload\n   </a>\n   - used by the flash loader.\n  </li>\n  <li>\n   <a href=\"https://github.com/binsys/emmcdl/blob/master/src/firehose.cpp\" rel=\"nofollow noreferrer\">\n    firehose\n   </a>\n   - the xml style protocol used with\n   <code>\n    rawprogram0.xml\n   </code>\n   files.\n  </li>\n </ul>\n <hr/>\n <p>\n  Flashing usually works like this:\n </p>\n <ul>\n  <li>\n   switch to dload mode, this will start the bootloader.\n  </li>\n  <li>\n   upload the\n   <code>\n    NPRG*.{hex,mbn}\n   </code>\n   flash loader using the sahara protocol\n   <ul>\n    <li>\n     the\n     <code>\n      ENPRG*\n     </code>\n     file is used for the emergency bootloader mode, launched when the bootrom cannot find a suitable primary bootloader in flash.\n    </li>\n   </ul>\n  </li>\n  <li>\n   now talking to the\n   <code>\n    NPRG\n   </code>\n   loader, using the streaming dload protocol, upload and write binaries to flash.\n  </li>\n </ul>\n <p>\n  Note that some manufacturers lock the bootrom, by fusing a specific certificate into the processor's One-time-programmable fuses. When this is the case, the bootrom will accept only specific binaries.\n </p>\n <p>\n  A collection of suitable binaries can be found\n  <a href=\"https://github.com/openpst/assets/tree/master/programmers\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Willem Hengeveld",
            "time": "May 31, 2019 at 7:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Hyeonseo Yang",
                    "text": "<span class=\"comment-copy\">Oops, I didn't know that there were an open source project! Thanks. Then I may start from that.</span>",
                    "time": null
                },
                {
                    "user": "Zibri",
                    "text": "<span class=\"comment-copy\">is it possible to dump all the flash using NPRG ENPRG?</span>",
                    "time": null
                },
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">I know it is possible with the firehose variants of NPRG or ENPRG</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Use the sniffer for the communication channel it uses (most likely USB) to see which data is sent to your device. Try to search for the constants you see in the sniffer to find which binary may be responsible for generating the data sent to the device. Disassemble the binary, find the exact code piece responsible for protocol processing, decompile it manually. After having this knowledge, write your own code.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Anton Kukoba",
            "time": "Apr 4, 2018 at 12:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}