{
    "title": "What compiler uses a calling convention that uses EAX as the first argument, then pushes onto the stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/16919/what-compiler-uses-a-calling-convention-that-uses-eax-as-the-first-argument-the",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently asked to question:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/16911/how-can-an-ia-32-program-seemingly-compiled-with-msvc-send-its-sole-argument-via/16915#16915\">\n   How can an IA-32 program seemingly compiled with MSVC send its sole argument via EAX?\n  </a>\n  After posting the question, I found that another function passed the first argument in\n  <code>\n   EAX\n  </code>\n  and then pushed its remaining argument. The caller then cleans up the stack.\n </p>\n <p>\n  The calling code:\n </p>\n <pre><code>.text:00402465                 lea     eax, [ebp+var_4]\n    ...\n.text:00402469                 push    eax\n.text:0040246A                 mov     eax, [ebp+hWnd]\n.text:0040246D                 call    openFileDialog\n.text:00402472                 add     esp, 4\n</code></pre>\n <p>\n  And the function itself:\n </p>\n <pre><code>.text:00411730 openFileDialog  proc near\n.text:00411730\n    ...\n.text:00411730 arg_0           = dword ptr  8\n.text:00411730\n.text:00411730                 push    ebp\n.text:00411731                 mov     ebp, esp\n.text:00411733                 sub     esp, 18h\n.text:00411736                 cmp     byte_42AE1D, FALSE\n.text:0041173D                 push    ebx\n.text:0041173E                 push    esi\n.text:0041173F                 push    edi\n.text:00411740                 mov     esi, eax\n    ...\n.text:00411789                 mov     eax, [ebp+arg_0]\n.text:0041178C                 push    eax\n.text:0041178D                 push    esi\n.text:0041178E                 call    openFileDialog_Compat\n.text:00411793                 add     esp, 8\n</code></pre>\n <p>\n  As you can see, in the function, the value of\n  <code>\n   EAX\n  </code>\n  is saved before anything can affect it, so it is definitely being used as a parameter. Later, the pushed argument is passed to a normal __cdecl function.\n </p>\n <p>\n  The program is linked to use msvcr100.dll and uses MSVC style throughout (Such as __security_cookie, MSVC name mangling, etc.), so it would appear to have been compiled with Visual C++, but this unusual calling convention makes me question that.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "880",
    "tags": [
        "c++",
        "calling-conventions"
    ],
    "user": "Ben Jaguar Marshall",
    "time": "Dec 5, 2017 at 23:50",
    "comments": [
        {
            "user": "newgre",
            "text": "<html><body><span class=\"comment-copy\">\n When using \"Whole Program Optimization\", the compiler may use whatever calling convention fits for functions with internal linkage.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is probably a program compiled with \"Whole Program Optimization\" or \"Link-time code generation\".\n  <a href=\"https://msdn.microsoft.com/en-us/library/xbf3tbeh\" rel=\"noreferrer\">\n   From MSDN\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   When /LTCG is used to link modules compiled with /Og, /O1, /O2, or\n  /Ox, the following optimizations are performed:\n  </p>\n  <ul>\n   <li>\n    Cross-module inlining\n   </li>\n   <li>\n    <p>\n     Interprocedural register allocation (64-bit operating systems only)\n    </p>\n   </li>\n   <li>\n    <p>\n     <strong>\n      Custom calling convention (x86 only)\n     </strong>\n    </p>\n   </li>\n   <li>\n    <p>\n     Small TLS displacement (x86 only)\n    </p>\n   </li>\n   <li>\n    <p>\n     Stack double alignment (x86 only)\n    </p>\n   </li>\n   <li>\n    <p>\n     Improved memory disambiguation (better interference information for global variables and input parameters)\n    </p>\n   </li>\n  </ul>\n </blockquote>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Igor Skochinsky",
            "time": "Dec 6, 2017 at 19:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ben Jaguar Marshall",
                    "text": "<span class=\"comment-copy\">Thank you. This is something I have not encountered before. I've only ever thought from the compiler point of view and the described standards.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  check\n  <a href=\"https://docs.microsoft.com/zh-cn/cpp/cpp/calling-conventions\" rel=\"nofollow noreferrer\">\n   Calling Conventions\n  </a>\n  that msvc support yet.\nas for the function name openFileDialog, it's a c# func? combining C# and C++\nvia CLR?? strange things may happen. MS dose not need to expose these details\nto public.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}