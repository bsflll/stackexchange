{
    "title": "How to find vulnerabilities in stripped binaries?",
    "link": "https://reverseengineering.stackexchange.com/questions/13770/how-to-find-vulnerabilities-in-stripped-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Do you just use tools like strace and a debugger to disassemble and find syscalls and then read the disassembly to find say for example a buffer overflow? Is that all you can do? I mean after all you don't have the source code.\n </p>\n <p>\n  If someone could shed some light on this particular topic I would be very grateful.\n </p>\n <p>\n  Thank you.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "631",
    "tags": [
        "debugging",
        "exploit",
        "security"
    ],
    "user": "user209343",
    "time": "Oct 20, 2016 at 14:18",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n I suggest reading something about data flow analysis\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Generally speaking finding vulnerabilities is not only about static reverse engineering, there are also dynamic techniques such as\n  <a href=\"https://en.wikipedia.org/wiki/Fuzz_testing\" rel=\"nofollow\">\n   fuzzing\n  </a>\n  . \nThere are some fuzzing frameworks/products that can be used for this, \npart of them are using dynamic instrumentation and such as\n  <a href=\"http://lcamtuf.coredump.cx/afl/\" rel=\"nofollow\">\n   AFL\n  </a>\n  , some part gives you an ability to configure generation of the data such as\n  <a href=\"http://www.peachfuzzer.com/\" rel=\"nofollow\">\n   Peach\n  </a>\n  .\n </p>\n <p>\n  If you can not or don't want to use fuzzers, you can reverse engineer the program. The fact of stripping doesn't mean that you lost all the useful information about the binary, in most cases you still have a lot of other possibilities to locate specific functionality in it such as:\n </p>\n <ul>\n  <li>\n   Logs, strings and constants. For example if you have some kind of logging system inside or if application generates some readable information it will give you a lot (for example strings like \"calling function X with parameters Y and Z\" are not that rare) - from this you can conclude the function name and parameter types. Specific constants can show you where and which encryption is used, etc.\n  </li>\n  <li>\n   Dynamically loadable modules, such as .so and .dll. Most of system calls are used via library functions, and if these functions are linked dynamically (i.e. loaded dynamically when program runs) you still can locate calls to such functions, and it will give you more information then system call tracing because the information needed for such dynamic linking is not stripped.\n  </li>\n </ul>\n <p>\n  BTW, if you still want to run the application in order to locate system calls, \nyou can expand this methodology to using\n  <a href=\"https://linux.die.net/man/1/ltrace\" rel=\"nofollow\">\n   ltrace\n  </a>\n  which is not limited by system calls, but gives you all dynamic library calls.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Oct 23, 2016 at 10:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}