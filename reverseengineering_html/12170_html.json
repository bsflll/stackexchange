{
    "title": "Reverse engineering a hash generated from IP and unixtime - How to approach?",
    "link": "https://reverseengineering.stackexchange.com/questions/12170/reverse-engineering-a-hash-generated-from-ip-and-unixtime-how-to-approach",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a website that gives you a token and the unixtime to access a resource on another domain.\n </p>\n <p>\n  I can use those 2 values to access it like that:\n </p>\n <p>\n  Example:\n  <code>\n   example.com/test.txt?st=[HASH]&e=[UNIXTIME]\n  </code>\n </p>\n <p>\n  I build a small script that generates those values and displays them in the format\n </p>\n <p>\n  <code>\n   [UNIXTIME] : [HASH]\n  </code>\n </p>\n <p>\n  <a href=\"http://46.101.150.244/m/serve.php\" rel=\"nofollow\">\n   http://46.101.150.244/m/serve.php\n  </a>\n  (You can refresh to see new combinations.)\n </p>\n <p>\n  <strong>\n   Observations:\n  </strong>\n </p>\n <ol>\n  <li>\n   <p>\n    When I request a token and get \"st\" and \"e\" by using my remote server, I can't access the resource. -> it is bound to a specific IP, no other parameters.\n   </p>\n  </li>\n  <li>\n   <p>\n    Also when generating 2 tokens at the same unix time from different ips, they are different -> confirmation of 1.\n   </p>\n  </li>\n  <li>\n   <p>\n    When generating a token multiple times within a second from the same IP, the token is always the same until the unix second passes. -> Pretty sure the only dynamic factors are the IP and the time.\n   </p>\n  </li>\n  <li>\n   <p>\n    When looking at the last character of the hash, it is always either A, Q, g or w. Their hexvalues are (same order) 41, 51, 67, 77. A,Q and g,w are exactly 0x10 apart.\n   </p>\n  </li>\n  <li>\n   <p>\n    I assume it is base64, but it has - and _ instead of + and /. Do you think thats possible? It also has 22 characters.\n   </p>\n  </li>\n </ol>\n <p>\n  I tried many different things, trying to decode base64 (often padding error), trying substrings to maybe find something useful, the IP in binary representation for example, but since the whole string completely changes every time the unix time changes, I really dont know if there is anything I can do.\n </p>\n <p>\n  Its totally possible that it is salted and I have zero chances of finding a solution, however the fact that the last letter is always one of four possibilities gave me hope.\n </p>\n <p>\n  I had a lot of fun approaching this challenge, if someone could give a hint how to approach this situation, what I should try out etc, that would be great!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "83",
    "tags": [
        "websites",
        "hash-functions"
    ],
    "user": "Alisamix",
    "time": "Mar 7, 2016 at 18:39",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Don't get your hopes up too much. If, for example, you do a\n <a href=\"https://en.wikipedia.org/wiki/Ascii85\" rel=\"nofollow noreferrer\">\n  base85\n </a>\n conversion, you'll typically have a few bits over at the end of your message; in your case, that's probably 2 bit, yielding 4 possibilities. If i were you, i'd write down the results from about 10 seconds  of generating hashes with the same ip, in binary. If very few bits change, and most don't you can start working on that. If approx. 50% of the bits change, the web site is likely to use some salt + IP + time, and you're doomed.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alisamix",
            "text": "<html><body><span class=\"comment-copy\">\n Sounds logical, I tried the following:\n <a href=\"http://pastebin.com/wnV8Vas8\" rel=\"nofollow noreferrer\">\n  pastebin.com/wnV8Vas8\n </a>\n Do you think the values have any meaning?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n If they are not entirely silly, they'd throw in some sort of crypto somewhere in the process.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}