{
    "title": "How to identify the encoding performed on this string",
    "link": "https://reverseengineering.stackexchange.com/questions/21704/how-to-identify-the-encoding-performed-on-this-string",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an old application that stores the username and password in plaintext but encoded by an unknown encoding algorithm to me, it seams like base64, but I think it's not,\nIt seams that any word longer than 22 or 23 is truncated, but unfortunately there's some odd examples that changes the last character\n </p>\n <pre><code>for example:\n\nInput: ABCDEFGHIJKLMNOPQRSTUV\nOutput: //DeparF3/jFcmVGBf5LcmNHYqJBmw\n\nInput: ABCDEFGHIJKLMNOPQRSTUVWXYZ\nOutput: //DeparF3/jFcmVGBf5LcmNHYqJBmw\n\nInput: ABCDEFGHIJKLMNOPQRSTUV1\nOutput: //DeparF3/jFcmVGBf5LcmNHYqJBm2\n\nInput: ABCDEFGHIJKLMNOPQRSTUV123456\nOutput: //DeparF3/jFcmVGBf5LcmNHYqJBm2\n\nInput: 1234567890123456789012\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/w\n\nInput: 12345678901234567890123\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/2\n\nInput: 123456789012345678901234\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/2\n\nInput: 1234567890123456789012a\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/z\n\nInput: 1234567890123456789012ab\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/z\n\nInput: 1234567890123456789012c\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/z\n\nInput: 1234567890123456789012F\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/x\n\nInput: 1234567890123456789012V\nOutput: j4Cu1dq1r4i1CB84e4QxFAUtCMYl/w\n\nInput: 1A2B3C4D5E6F7G8H9I0J1K\nOutput: j/Ovo9zArPS5fRhMf/c8agtcAbwlhg\n\nInput: 1A2B3C4D5E6F7G8H9I0J1K2\nOutput: j/Ovo9zArPS5fRhMf/c8agtcAbwlhm\n\nInput: 1A2B3C4D5E6F7G8H9I0J1K3\nOutput: j/Ovo9zArPS5fRhMf/c8agtcAbwlhm\n\nInput: 1A2B3C4D5E6F7G8H9I0J1KL\nOutput: j/Ovo9zArPS5fRhMf/c8agtcAbwlhh\n\nInput: 1A2B3C4D5E6F7G8H9I0J1KM\nOutput: j/Ovo9zArPS5fRhMf/c8agtcAbwlhh\n\nInput: A1B2C3D4E5F6G7H8I9J0KL\nOutput: /4Pf06yw3ITJDWg8D4dMGnsse8ZfgQ\n\nInput: A1B2C3D4E5F6G7H8I9J0KLM\nOutput: /4Pf06yw3ITJDWg8D4dMGnsse8ZfgR\n\nInput: A1B2C3D4E5F6G7H8I9J0KL7\nOutput: /4Pf06yw3ITJDWg8D4dMGnsse8ZfgW\n\nInput: abcABC123/+321++1GWZVV\nOutput: 39D+oK3AqYK/FwU5eoEvCQNSZqxCmw\n\nInput: abcABC123/+321++1GWZVV1\nOutput: 39D+oK3AqYK/FwU5eoEvCQNSZqxCm2\n\nInput: lkjsd2093jljsdLJSDl12A\nOutput: 0tn3kouxqIm/UkJgO9RIaGFRXccmjA\n\nInput: lkjsd2093jljsdLJSDl123\nOutput: 0tn3kouxqIm/UkJgO9RIaGFRXccm/g\n\nInput: lkjsd2093jljsdLJSDl1234\nOutput: 0tn3kouxqIm/UkJgO9RIaGFRXccm/m\n\nInput: aaaaaaaaaaaaaaaaaaaaaa\nOutput: 39P8gI7i+dHtWU9rKdFlQ1N0UJd1rA\n\nInput: aaaaaaaaaaaaaaaaaaaaaaa\nOutput: 39P8gI7i+dHtWU9rKdFlQ1N0UJd1rD\n\nInput: aaaaaaaaaaaaaaaaaaaaaa1\nOutput: 39P8gI7i+dHtWU9rKdFlQ1N0UJd1rG\n\nInput: aaaaaaaaaaaaaaaaaaaaaaF\nOutput: 39P8gI7i+dHtWU9rKdFlQ1N0UJd1rB\n\nInput: 1111111111111111111111\nOutput: j4Os0N6yqYG9CR87eYE1EwMkAMcl/A\n\nInput: 11111111111111111111111\nOutput: j4Os0N6yqYG9CR87eYE1EwMkAMcl/G\n\nInput: a\nOutput: 3w==\n\nInput: c\nOutput: 3Q==\n\nInput: ab\nOutput: 39A=\n\nInput: abc\nOutput: 39D+\n\nInput: abcd\nOutput: 39D+hQ==\n\nInput: abcde\nOutput: 39D+hYo=\n\nInput: abcdef\nOutput: 39D+hYrl\n\nInput: abcdefg\nOutput: 39D+hYrl/w==\n\nInput: abcdefgh\nOutput: 39D+hYrl/9g=\n\nInput: 123\nOutput: j4Cu\n\nInput: 1234\nOutput: j4Cu1Q==\n\nInput: 12345\nOutput: j4Cu1do=\n\nInput: 123456\nOutput: j4Cu1dq1\n</code></pre>\n <p>\n  Any idea? \nThanks!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "386",
    "tags": [
        "encryption",
        "encodings",
        "strings"
    ],
    "user": "ksr",
    "time": "Jul 21, 2019 at 11:44",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Are you sure about encoding of the string \"ab\" ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n I have an idea but it doesn't fit to encoding of \"ab\" string (was it \"Gg\" by any chance ?) . It looks like base64 of the original string xored with some at least 8 byte length constant (specifically 0xbe,0xb2,0x9d,0xe1,0xef,0x83,0x98,0xb0).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Can you post more encoded strings (preferably long) ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n The last one is an oddity too. I was expecting a custom base64 alphabet, but the '1' appears twice, once for index 13, and once for index 54 which makes no sense. Either this is an error on your end or it's not simply a custom base64 alphabet.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ksr",
            "text": "<html><body><span class=\"comment-copy\">\n @ws You are right! It's the encoding of \"Gg\" not \"ab\", so Gg=\"+dU=\" and \"ab\"=\"39A=\", I corrected it in the examples\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  OK, the encoding goes as follows:\n </p>\n <ol>\n  <li>\n   Byte xor the input string with [0xbe,0xb2,0x9d,0xe1,0xef,0x83,0x98,0xb0,0x8c,0x38,0x2e,0x0a,0x48,0xb0,0x04,0x22,0x32,0x15,0x31,0xf6,0x14,0xcd,0x51]\n  </li>\n  <li>\n   Encode it to base64\n  </li>\n  <li>\n   Take first 30 bytes of base 64 encoded string and write it down, which will be a result.\n  </li>\n </ol>\n <p>\n  In fact the last byte of the key is not used as whole (only msb nibble used), you can insert anything from a range [0x50-0x5f] instead of 0x51.\n </p>\n <p>\n  As you correctly stated, the output is truncated, so you can extract only the first 22 letters of the encoded string.\n </p>\n <p>\n  The following python code decodes the provided outputs and checks the algorithm:\n </p>\n <pre><code>import base64\n# our inputs, input and output correspondingly\npairs = [\n    (\"ABCDEFGHIJKLMNOPQRSTUV\",\"//DeparF3/jFcmVGBf5LcmNHYqJBmw\"),\n    (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"//DeparF3/jFcmVGBf5LcmNHYqJBmw\"),\n    (\"ABCDEFGHIJKLMNOPQRSTUV1\",\"//DeparF3/jFcmVGBf5LcmNHYqJBm2\"),\n    (\"ABCDEFGHIJKLMNOPQRSTUV123456\",\"//DeparF3/jFcmVGBf5LcmNHYqJBm2\"),\n    (\"1234567890123456789012\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/w\"),\n    (\"12345678901234567890123\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/2\"),\n    (\"123456789012345678901234\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/2\"),\n    (\"1234567890123456789012a\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/z\"),\n    (\"1234567890123456789012ab\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/z\"),\n    (\"1234567890123456789012c\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/z\"),\n    (\"1234567890123456789012F\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/x\"),\n    (\"1234567890123456789012V\",\"j4Cu1dq1r4i1CB84e4QxFAUtCMYl/w\"),\n    (\"1A2B3C4D5E6F7G8H9I0J1K\",\"j/Ovo9zArPS5fRhMf/c8agtcAbwlhg\"),\n    (\"1A2B3C4D5E6F7G8H9I0J1K2\",\"j/Ovo9zArPS5fRhMf/c8agtcAbwlhm\"),\n    (\"1A2B3C4D5E6F7G8H9I0J1K3\",\"j/Ovo9zArPS5fRhMf/c8agtcAbwlhm\"),\n    (\"1A2B3C4D5E6F7G8H9I0J1KL\",\"j/Ovo9zArPS5fRhMf/c8agtcAbwlhh\"),\n    (\"1A2B3C4D5E6F7G8H9I0J1KM\",\"j/Ovo9zArPS5fRhMf/c8agtcAbwlhh\"),\n    (\"A1B2C3D4E5F6G7H8I9J0KL\",\"/4Pf06yw3ITJDWg8D4dMGnsse8ZfgQ\"),\n    (\"A1B2C3D4E5F6G7H8I9J0KLM\",\"/4Pf06yw3ITJDWg8D4dMGnsse8ZfgR\"),\n    (\"A1B2C3D4E5F6G7H8I9J0KL7\",\"/4Pf06yw3ITJDWg8D4dMGnsse8ZfgW\"),\n    (\"abcABC123/+321++1GWZVV\",\"39D+oK3AqYK/FwU5eoEvCQNSZqxCmw\"),\n    (\"abcABC123/+321++1GWZVV1\",\"39D+oK3AqYK/FwU5eoEvCQNSZqxCm2\"),\n    (\"lkjsd2093jljsdLJSDl12A\",\"0tn3kouxqIm/UkJgO9RIaGFRXccmjA\"),\n    (\"lkjsd2093jljsdLJSDl123\",\"0tn3kouxqIm/UkJgO9RIaGFRXccm/g\"),\n    (\"lkjsd2093jljsdLJSDl1234\",\"0tn3kouxqIm/UkJgO9RIaGFRXccm/m\"),\n    (\"aaaaaaaaaaaaaaaaaaaaaa\",\"39P8gI7i+dHtWU9rKdFlQ1N0UJd1rA\"),\n    (\"aaaaaaaaaaaaaaaaaaaaaaa\",\"39P8gI7i+dHtWU9rKdFlQ1N0UJd1rD\"),\n    (\"aaaaaaaaaaaaaaaaaaaaaa1\",\"39P8gI7i+dHtWU9rKdFlQ1N0UJd1rG\"),\n    (\"aaaaaaaaaaaaaaaaaaaaaaF\",\"39P8gI7i+dHtWU9rKdFlQ1N0UJd1rB\"),\n    (\"1111111111111111111111\",\"j4Os0N6yqYG9CR87eYE1EwMkAMcl/A\"),\n    (\"11111111111111111111111\",\"j4Os0N6yqYG9CR87eYE1EwMkAMcl/G\"),\n    (\"a\",\"3w==\"),\n    (\"c\",\"3Q==\"),\n    (\"ab\",\"39A=\"),\n    (\"abc\",\"39D+\"),\n    (\"abcd\",\"39D+hQ==\"),\n    (\"abcde\",\"39D+hYo=\"),\n    (\"abcdef\",\"39D+hYrl\"),\n    (\"abcdefg\",\"39D+hYrl/w==\"),\n    (\"abcdefgh\",\"39D+hYrl/9g=\"),\n    (\"123\",\"j4Cu\"),\n    (\"1234\",\"j4Cu1Q==\"),\n    (\"12345\",\"j4Cu1do=\"),\n    (\"123456\",\"j4Cu1dq1\"),\n]\n# the xoring \"key\"\nkey = [0xbe,0xb2,0x9d,0xe1,0xef,0x83,0x98,0xb0,0x8c,0x38,0x2e,0x0a,0x48,0xb0,0x04,0x22,0x32,0x15,0x31,0xf6,0x14,0xcd,0x51]\n\ndef do_xor(a, b):\n    res = \"\"\n    for i in range(len(a)):\n        res += chr(ord(a[i]) ^ b[i % len(b)])\n    return res\n\nfor (inp, output) in pairs:\n    #adding universal padding for a case of bad length\n    try:\n        decoded = base64.b64decode(output)\n    except:\n        decoded = base64.b64decode(output + \"===\")\n\n    xored = do_xor(decoded, key)\n    encoded = base64.b64encode(do_xor(inp, key))[:30]\n    print \"Input    --> \", inp\n    print \"Output   --> \", output\n    print \"Encoded  --> \", encoded\n    print \"restored --> \", xored\n    if xored == inp:\n        print \"result: exact match\"\n    elif inp.find(xored) != -1:\n        print \"result: truncated, but still good\"\n    else:\n        print \"result: FAILURE\"\n    if encoded==output:\n        print \"encode: result OK\"\n    else:\n        print \"encode: FAILURE\"\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "w s",
            "time": "Jul 21, 2019 at 12:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>function crypt(b) {\n    var raw = atob(b)\n    var key = [0xbe,0xb2,0x9d,0xe1,0xef,0x83,0x98,0xb0,0x8c,0x38,0x2e,0x0a,0x48,0xb0,0x04,0x22,0x32,0x15,0x31,0xf6,0x14,0xcd]\n    var ret = []\n    for (var i in raw) ret[i] = raw.charCodeAt(i) ^ key[i%key.length]\n    return String.fromCharCode.apply(null, ret)\n}\n// example\nconsole.log(crypt('//DeparF3/jFcmVGBf5LcmNHYqJBmw'))\nconsole.log(crypt('//DeparF3/jFcmVGBf5LcmNHYqJBm2'))\nconsole.log(crypt('j4Cu1dq1r4i1CB84e4QxFAUtCMYl/w'))\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/p9BPP.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"result\" src=\"https://i.sstatic.net/p9BPP.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "user29082",
            "time": "Jul 20, 2019 at 15:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Doesn't work on on short strings like \"a\", \"b\", \"ab\"</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Sorry, my mistake, it works.</span>",
                    "time": null
                },
                {
                    "user": "ksr",
                    "text": "<span class=\"comment-copy\">this is a very neat code! it works great, thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}