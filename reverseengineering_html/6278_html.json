{
    "title": "Weird instruction identified on disassembler produced assembly code",
    "link": "https://reverseengineering.stackexchange.com/questions/6278/weird-instruction-identified-on-disassembler-produced-assembly-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Test is on x86 32bit Linux, Ubuntu 12.04, GCC 4.6.3 objdump 2.22\n </p>\n <p>\n  Basically when I use\n  <code>\n   gcc\n  </code>\n  to produce assembly code of function\n  <code>\n   foo\n  </code>\n  like this:\n </p>\n <pre><code>gcc -S foo.c -O2\n</code></pre>\n <p>\n  At the end of function\n  <code>\n   foo\n  </code>\n  , I can get a sequence of instructions like this (I modified it and attached each instruction with its machine code to make it clear):\n </p>\n <pre><code>             ......\n1977                                                 .cfi_restore_state\n1978  8B150000 0000                                  movl    nodes, %edx\n1979  89442410                                       movl    %eax, 16(%esp)\n1980  A1000000 00                                    movl    i_depth, %eax\n1981  8974240C                                       movl    %esi, 12(%esp)\n1982  C7442404 FC000000                              movl    $.LC55, 4(%esp)\n1983  89542414                                       movl    %edx, 20(%esp)\n1984  89442408                                       movl    %eax, 8(%esp)\n1985  C7042401 000000                                movl    $1, (%esp)\n1986  E8FCFFFF FF                                    call    __printf_chk\n1987  E937FFFF FF                                    jmp     .L181\n1988                                         .L186:\n1989  E8FCFFFF FF                                    call    __stack_chk_fail\n\nfoo1:\n</code></pre>\n <p>\n  Which looks normal.\n </p>\n <p>\n  However, when I compiled + linked to create the ELF executable file, and then disassembly it with\n  <code>\n   objdump\n  </code>\n  like this:\n </p>\n <pre><code>gcc foo.c -O2\nobjdump -Dr -j .text foo\n</code></pre>\n <p>\n  The instruction produced by disassembler looks like this (I modified a little bit to make it easier to understand):\n </p>\n <pre><code>11856 89442410                                mov %eax,0x10(%esp)\n11857 A1000000 00                             mov 0x80851AC,%eax\n11858 8974240C                                mov %esi,0xC(%esp)\n11859 C7442404 00000000                       movl $S_0x8064658,0x4(%esp)\n11860 89542414                                mov %edx,0x14(%esp)\n11861 89442408                                mov %eax,0x8(%esp)\n11862 C7042401 000000                         movl $0x1,(%esp)\n11863 E8FCFFFF FF                             call __printf_chk\n11864 E933FFFF FF                             jmp 0x80547EB\n11865\n11866 E8FCFFFF FF                             S_0x80548BC : call __stack_chk_fail\n11867 EB0D                                    jmp foo1\n11868 90                                      nop\n11869 90                                      nop\n11870 90                                      nop\n11871 90                                      nop\n11872 90                                      nop\n11873 90                                      nop\n11874 90                                      nop\n11875 90                                      nop\n11876 90                                      nop\n11877 90                                      nop\n11878 90                                      nop\n11879 90                                      nop\n11880 90                                      nop\n11881                                         foo1:\n</code></pre>\n <p>\n  Looking at the end of function\n  <code>\n   foo\n  </code>\n  , I find out a sequence of instructions which can not be found in the original assembly code.\n </p>\n <p>\n  It seems like a padding issue, but I am not sure.\n </p>\n <p>\n  So my questions are:\n </p>\n <ol>\n  <li>\n   What's these instruction sequences for?\n  </li>\n  <li>\n   Is there anyway to tell (assembler? linker?) do not generate these instruction sequences..? Because basically I am working a assembly code analysis tool, and these instruction sequences annoying the coding much.\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "502",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "objdump"
    ],
    "user": "lllllllllllll",
    "time": "Sep 22, 2014 at 5:51",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<html><body><span class=\"comment-copy\">\n could it possibly be an alignment setting like the code following uses mmx / sse or similar?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user45891",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options\" rel=\"nofollow noreferrer\">\n  gcc.gnu.org/onlinedocs/gcc/â€¦\n </a>\n -02 turns on -falign-functions\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   What's these instruction sequences for?\n  </p>\n </blockquote>\n <p>\n  They are for\n  <strong>\n   code optimization\n  </strong>\n  .\n </p>\n <h1>\n  CPU cache\n </h1>\n <p>\n  To optimize memory accesses, the CPU uses its own (small) internal memory called\n  <em>\n   cache\n  </em>\n  . It usually consists of several levels named\n  <strong>\n   L1\n  </strong>\n  ,\n  <strong>\n   L2\n  </strong>\n  etc. A lower suffix number means that the memory is located\n  <em>\n   closer\n  </em>\n  to the CPU core, thus is\n  <em>\n   faster\n  </em>\n  to access, but it's\n  <em>\n   smaller\n  </em>\n  as well. An illustration of this concept taken from\n  <a href=\"https://www.makeuseof.com/tag/what-is-cpu-cache/\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  is given below:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/9Y8Bz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"CPU cache levels\" src=\"https://i.sstatic.net/9Y8Bz.png\"/>\n  </a>\n </p>\n <p>\n  Accessing the CPU cache is\n  <em>\n   critically faster\n  </em>\n  than reading RAM memory (see\n  <a href=\"https://stackoverflow.com/questions/4087280/approximate-cost-to-access-various-caches-and-main-memory\">\n   this question\n  </a>\n  for more information) and that's why it is better to have data in cache instead of reading it each time from RAM (or even worse - hard disk).\n </p>\n <p>\n  But the CPU doesn't cache only data - it caches\n  <em>\n   instructions\n  </em>\n  as well. And for instructions to be cached effectively, they have to be properly\n  <em>\n   aligned\n  </em>\n  . Following cite comes from\n  <a href=\"https://www.agner.org/optimize/optimizing_assembly.pdf\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   Most microprocessors fetch code in aligned 16-byte or 32-byte blocks. If an important subroutine entry or jump label happens to be near the end of a 16-byte block then the microprocessor will only get a few useful bytes of code when fetching that block of code. It may have to fetch the next 16 bytes too before it can decode the first instructions after the label.\n  </p>\n  <p>\n   This can be avoided by aligning important subroutine entries and loop entries by 16. [...] We may align subroutine entries by the cache line size (typically 64 bytes) if the subroutine is part of a critical hot spot and the preceding code is unlikely to be executed in the same context.\n  </p>\n </blockquote>\n <p>\n  So, it may be the case that under\n  <code>\n   foo1:\n  </code>\n  there is some short loop and compiler decided to align this block to put it in the CPU cache so it is executed faster.\n </p>\n <p>\n  As @user45891 already stated in the comment, such an optimization in gcc is turned on with the option\n  <code>\n   -O2\n  </code>\n  , so don't use it when you don't want such optimizations.\n </p>\n <h1>\n  But why the difference between the two outputs?\n </h1>\n <p>\n  Because the first result comes from just two first states of compilation performed by gcc (\n  <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html#Overall-Options\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  ):\n </p>\n <blockquote>\n  <p>\n   Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking, always in that order.\n  </p>\n  <p>\n   <code>\n    -S\n   </code>\n  </p>\n  <p>\n   Stop after the stage of compilation proper; do not assemble.\n  </p>\n </blockquote>\n <p>\n  While the second one is \"entirely compiled\" and linked.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Jun 30, 2019 at 8:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">WOW, thank you very much for this answer. It has been about five years and I am still in the reverse engineering business. God bless us.</span>",
                    "time": null
                }
            ]
        }
    ]
}