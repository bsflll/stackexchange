{
    "title": "How can a Javascript file drop .exe written in Visual Basic without network communication?",
    "link": "https://reverseengineering.stackexchange.com/questions/19129/how-can-a-javascript-file-drop-exe-written-in-visual-basic-without-network-comm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am analyzing a malicious JS file, which is obfuscated in a way that I could not de-obfuscate. When I executed it in a virtual machine and spectated process changes, I noticed that a new executable was created, which when acquired, turned out to be written in Visual Basic 6.\n </p>\n <p>\n  I know that JS droppers often are written to download the secondary malware but in this case, the exe is created without any network communication. Does that mean that the VB6 exe was packed in the original JS file? On a high level, how can this be implemented?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "220",
    "tags": [
        "unpacking",
        "javascript",
        "visual-basic"
    ],
    "user": "skooog",
    "time": "Aug 22, 2018 at 13:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The executable is most likely\n  <em>\n   embedded\n  </em>\n  inside the javascript file itself, or of any accompanying files (say, an\n  <code>\n   .html\n  </code>\n  file that is downloaded with the javascript).\n </p>\n <p>\n  As Memo mentioned, the embedded executable can be\n  <em>\n   encoded\n  </em>\n  ,\n  <em>\n   obfuscated\n  </em>\n  or even\n  <em>\n   encrypted\n  </em>\n  within the javascript file, where the javascript file will be required to\n  <em>\n   decode\n  </em>\n  ,\n  <em>\n   deobfuscate\n  </em>\n  or\n  <em>\n   decrypt\n  </em>\n  it before writing it to disk and executing it.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "NirIzr",
            "time": "Aug 22, 2018 at 21:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Downvoters, please share any issue with the answer</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Most probably the VB6 executable was base64 encoded and embedded as a string in the obfuscated code. Then decoded back into a binary at runtime.\n </p>\n <p>\n  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\" rel=\"nofollow noreferrer\">\n   https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "memo",
            "time": "Aug 22, 2018 at 14:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}