{
    "title": "AT&T - Does assembly code return whatever is in %eax by default?",
    "link": "https://reverseengineering.stackexchange.com/questions/17406/att-does-assembly-code-return-whatever-is-in-eax-by-default",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following AT&T assembly code:\n </p>\n <pre><code>  movl 12(%ebp),%eax\n  cmpl %eax,8(%ebp)\n  jle L7\n  movl 8(%ebp),%eax\nL7:\n  leave\n</code></pre>\n <p>\n  I'm supposed to \"transpose\"(??) it to C code. I actually just have to fill in the blanks in this skeleton C code:\n </p>\n <pre><code>int g(int x, int y) {\n    if (x ______ y)\n        return ______;\n    else\n        return ______;\n}\n</code></pre>\n <p>\n  From what I unerstand, the assembly is going to return whatever is in\n  <code>\n   %eax\n  </code>\n  when done.\n </p>\n <p>\n  So this is how I understand what's happening:\n </p>\n <p>\n  The\n  <code>\n   cmpl %eax,8(%ebp)\n  </code>\n  line is comparing x (\n  <code>\n   8(%ebp)\n  </code>\n  ) with y (\n  <code>\n   %eax\n  </code>\n  ). If x is\n  <code>\n   <=\n  </code>\n  to y, we jump to\n  <code>\n   L7:\n  </code>\n  and return whatever is in\n  <code>\n   %eax\n  </code>\n  at that time, which is y. Otherwise, we proceed to the next line in the assembly code and\n  <code>\n   movl\n  </code>\n  x (\n  <code>\n   8(%ebp)\n  </code>\n  ) to\n  <code>\n   %eax\n  </code>\n  , and return whatever is in\n  <code>\n   %eax\n  </code>\n  , which would be x at that point.\n </p>\n <p>\n  In the end, this is what I think is happening:\n </p>\n <pre><code>int g(int x, int y) {\n    if (x <= y)\n        return y;\n    else\n        return x;\n}\n</code></pre>\n <p>\n  Am I correct in saying that the assembly returns whatever is in\n  <code>\n   %eax\n  </code>\n  when the assembly code is finished running?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "255",
    "tags": [
        "assembly",
        "decompilation"
    ],
    "user": "velkoon",
    "time": "Feb 7, 2018 at 8:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Am I correct in saying that the assembly returns whatever is in %eax when the assembly code is finished running?\n  </p>\n </blockquote>\n <p>\n  Assembly doesn't \"return\" anything.\n </p>\n <p>\n  In assembly, it is left to the programmer to decide how to pass values between the caller and callee routines.  In order to avoid things getting messy,\n  <a href=\"https://en.wikipedia.org/wiki/Calling_convention\" rel=\"nofollow noreferrer\">\n   calling conventions\n  </a>\n  have been devised.\n </p>\n <p>\n  Your question therefore becomes \"what calling convention was used to compile the unknown C code to the known assembly?\"\n </p>\n <p>\n  When compiling for x86 architectures, C compilers usually use the\n  <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl\" rel=\"nofollow noreferrer\">\n   cdecl convention\n  </a>\n  . \n Working on the assumption that was the convention used here, then integer results would indeed always be returned in register EAX.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "eggyal",
            "time": "Feb 7, 2018 at 9:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}