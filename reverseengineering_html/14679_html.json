{
    "title": "Renaming entitites in obfuscated java bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/14679/renaming-entitites-in-obfuscated-java-bytecode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working with an SDK for developing apps that's distributed as an AAR, and has been obfuscated with ProGuard.  I'm just trying to reverse a few things it does.  The classes, methods and variables have been obfuscated, I'm pretty sure with ProGuard.  I've been looking for a toolchain that would give me a better workflow than my current one but can't find what I need.\n </p>\n <p>\n  Here's what I'm doing now:\n </p>\n <ul>\n  <li>\n   Created a sample app in Android Studio that calls the things I care about in the SDK\n  </li>\n  <li>\n   Set breakpoints and step into the code I'm interested in\n  </li>\n  <li>\n   Using the Android Studio decompilation (I wasn't expecting it to have that, awesome!), start working out what the different variables, methods, and classes are for and giving them names.\n  </li>\n  <li>\n   Write those names down in an ASCII notes file for reference\n  </li>\n  <li>\n   Go back and forth from my notes to the code, screaming while my brain loses grip on all the mappings I'm trying to keep in my head\n  </li>\n </ul>\n <p>\n  Here's what I'd like to do:\n </p>\n <ul>\n  <li>\n   Run my sample app in Android  Studio, step into the obfuscated bytecode as before\n  </li>\n  <li>\n   As I figure out a method, relabel it in the code browser, have that relabel propagate to all invocations of that method, similar to a \"refactor\" action in many IDEs\n  </li>\n  <li>\n   Become sane again, see my family, make progress\n  </li>\n </ul>\n <p>\n  I would think some kind of baksmali / smali parser / smali assembler process should achieve this but I can't find anything out there yet that does it.\n  <a href=\"http://virtuous-ten-studio.com/\" rel=\"nofollow noreferrer\">\n   Virtuous Ten\n  </a>\n  might be able to do it, but it craps out in unclear ways trying to generate smali on my SDK jar.  I get zero smali or java when I run it on my jar.\n </p>\n <p>\n  Any ideas?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "4k",
    "tags": [
        "decompilation",
        "android",
        "java",
        "deobfuscation"
    ],
    "user": "user19009",
    "time": "Feb 17, 2017 at 19:34",
    "comments": [
        {
            "user": "JesusFreke",
            "text": "<html><body><span class=\"comment-copy\">\n I believe android studio's decompilation depends on having the .class files available, which doesn't work if you only have an apk. If you want to be more realistic, you should start with just the raw apk.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JesusFreke",
            "text": "<html><body><span class=\"comment-copy\">\n Also, you might look at using the smalidea plugin, which should let you rename methods/fields/etc, as well as debug into the apk at the bytecode level. Although, I'm not sure if it's working very well with newer versions of IDEA/AS.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user19009",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for the tips, Ben.  Sometime this weekend I hope to try out smalidea. As for realism, that's not really a concern since I know the target app uses the sdk for the things I'm interested in (encryption/decryption/protocol handling), so I just need to reverse the sdk functions of interst by hook or by crook to understand how they are being carried out.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user19009",
            "text": "<html><body><span class=\"comment-copy\">\n To be clear, I'm using the sample app as a proxy for the target app bc I know it uses the same sdk for all the important stuff I care about, and I have way more symbols in the sample app compiled with the sdk and no proguard, vice the target app with the sdk included but the whole thing is obfuscated. Symbols rule all :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JesusFreke",
            "text": "<html><body><span class=\"comment-copy\">\n Ah, right. I guess the aar's are distributed as class files\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You may want to try\n  <a href=\"https://github.com/skylot/jadx\" rel=\"nofollow noreferrer\">\n   <strong>\n    jadx\n   </strong>\n  </a>\n  , which supports decompiling *.aar since v0.6.1. You could save the decompiled code as a Gradle project, which you could then open it in Android Studio and do the refactoring.\n </p>\n <hr/>\n <p>\n  Alternatively, note that\n  <a href=\"https://developer.android.com/studio/projects/android-library.html#aar-contents\" rel=\"nofollow noreferrer\">\n   *.aar\n  </a>\n  is basically a *.jar and Android resources bundled together. You cannot use baksmali, the *.jar still contains JVM bytecode and not converted to dex! You just need to:\n </p>\n <ol>\n  <li>\n   Rename the *.aar to *.zip and unzip it\n  </li>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/647116/how-to-decompile-a-whole-jar-file\">\n    Decompile the\n    <code>\n     classes.jar\n    </code>\n   </a>\n  </li>\n  <li>\n   Create a project with the decompiled *.java files\n  </li>\n  <li>\n   Use \"Refactoring\" to rename, etc.\n  </li>\n </ol>\n <hr/>\n <p>\n  Both of these methods only support static analysis, you cannot debug an app using the decompiled result. Unless the decompiled result can actually be compiled, which you could link your sample code with them instead of the library.\n </p>\n <p>\n  Also, these won't help if the real code are compiled with NDK (check if there are any *.so files when you unzip the *.aar).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user19009",
                    "text": "<span class=\"comment-copy\">Thanks for the suggestion.  It took some fiddling to build jadx and get Android Studio to process the project, but eventually brought it in.  The Android Studio renaming doesn't work, I think because of  the number of errors in the decompiled java.  As I recall, I did try bringing in decompiled java from jd-gui, and CFR, and I had the same problem.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   As I figure out a method,\n   <em>\n    relabel it in the code browser\n   </em>\n   , have that relabel propagate to all invocations of that method,\n   <em>\n    similar to a \"refactor\" action\n   </em>\n   in many IDEs\n  </p>\n </blockquote>\n <p>\n  While my project doesn't have IDE integration I think I made exactly what you're looking for.\n  <a href=\"https://github.com/Col-E/JRemapper\" rel=\"nofollow noreferrer\">\n   Mostly because I made it for similar reasons\n  </a>\n  .\n </p>\n <p>\n  Its a GUI that decompiles code with CFR but links class and member names to the decompiled text. To rename them you simply click the name or member, type in a new name and hit enter. You can export your changes as a text file or as a updated jar file.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Col-E",
            "time": "May 26, 2017 at 18:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}