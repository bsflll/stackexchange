{
    "title": "Strange function in IDA Pro: Only one basic block ending with a jmp sub_xxxxxx (instead of a ret)",
    "link": "https://reverseengineering.stackexchange.com/questions/8517/strange-function-in-ida-pro-only-one-basic-block-ending-with-a-jmp-sub-xxxxxx",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <img alt=\"IDA Pro function with no ret as last instruction but a jump to a label\" src=\"https://i.sstatic.net/Dtwx4.png\"/>\n </p>\n <p>\n  Analyzing the ELF file /usr/bin/curl (Ubuntu 14.04, 64bit), I stumbled upon a strange function (see image). It is called regularly via\n  <code>\n   call sub_403D90\n  </code>\n  but does not end with a ret. Instead, it jumps to a label / another function (\n  <code>\n   sub_403C90\n  </code>\n  ).\nThis is strange because there seems to be no return to\n  <code>\n   sub_403D90\n  </code>\n  , as from\n  <code>\n   sub_403C90\n  </code>\n  onwards in the control flow, there are no jumps but only rets.\n </p>\n <p>\n  Can someone explain to me why this is? Does it makes sense?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "784",
    "tags": [
        "ida",
        "disassembly",
        "idapython",
        "compilers",
        "functions"
    ],
    "user": "langlauf.io",
    "time": "Mar 23, 2015 at 9:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is just a bit of optimization. A\n  <code>\n   call xxxx\n  </code>\n  followed by a\n  <code>\n   ret\n  </code>\n  can be optimized to a\n  <code>\n   jmp xxxx\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Mar 22, 2015 at 12:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">Commonly known as \"Tail Call\" elimination / optimization.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">@IanCook: Thank you for the keyword. I only came up with \"tail recursion elimination\", which isn't the case here, so i decided to omit it.</span>",
                    "time": null
                }
            ]
        }
    ]
}