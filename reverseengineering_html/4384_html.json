{
    "title": "Windbg 'as' command in log breakpoint",
    "link": "https://reverseengineering.stackexchange.com/questions/4384/windbg-as-command-in-log-breakpoint",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to break the debugee as it opens a known file, using\n  <code>\n   windbg\n  </code>\n  . As\n  <code>\n   $scmp\n  </code>\n  doesn't accept direct address, I have to use\n  <code>\n   as\n  </code>\n  (\n  <code>\n   windbg\n  </code>\n  alias command). So, I put a conditional breakpoint at\n  <code>\n   CreateFileA\n  </code>\n  :\n </p>\n <pre><code>bu Kernel32!CreateFileA \"as /ma ${/v:fName} poi(esp+4);.echo ${fName};...;g\"\n</code></pre>\n <p>\n  It always prints the same (first) file name. I also tried script files\n </p>\n <pre><code>bu ... \"$>< bpCmd\"\nbu ... \"$$>< bpCmd\"\n</code></pre>\n <p>\n  <em>\n   <code>\n    bpCmd\n   </code>\n   content:\n  </em>\n </p>\n <pre><code>as /ma ${/v:fName} poi(esp+4);\n.echo ${fName};\n...\ng;\n</code></pre>\n <p>\n  It didn't work as well.\n </p>\n <p>\n  So, why\n  <code>\n   as\n  </code>\n  doesn't work in log breakpoints?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "954",
    "tags": [
        "windbg"
    ],
    "user": "sealed...",
    "time": "May 20, 2014 at 13:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   The alias needs to be evaluated\n  </code>\n  <strong>\n   everytime\n  </strong>\n  the break point is hit\n  \n\n  else it will print the old alias only\n  \n\n  to force alias evaluation` enclose the  .echo and other commands inside a\n  <strong>\n   .block{}\n  </strong>\n </p>\n <pre><code>crefil:\\>dir /b\nCreateFile.cpp    \ncrefil:\\>type CreateFile.cpp\n#include <stdio.h>\n#include <windows.h>\nint main (void)\n{\n    PWIN32_FIND_DATA lpFindFileData = \n            (PWIN32_FIND_DATA) calloc(1 , sizeof( WIN32_FIND_DATA));\n    FILE *fp;\n    errno_t err;\n    if (lpFindFileData)\n    {\n        HANDLE hFind = FindFirstFile(\"*.*\",lpFindFileData);\n        if ( hFind != INVALID_HANDLE_VALUE )\n        {\n            do\n            {\n                printf(\"%s\n\",lpFindFileData->cFileName);\n                if ( (err = fopen_s(&fp,lpFindFileData->cFileName,\"rb\") ) == 0 )\n\n                    if (fp)\n                        fclose(fp);\n            }while( ( FindNextFile(hFind,lpFindFileData) ) != FALSE );\n            FindClose(hFind);\n            free(lpFindFileData);\n        }\n    }\n    return 0;\n}\n</code></pre>\n <p>\n  as in windbg conditional breakpoint\n </p>\n <p>\n  <strong>\n   crefil:>cdb -c \"bp kernel32!CreateFileA \\\"as /ma ${/v:fname} poi(@esp+4);.block\n { .echo fname };gc\\\";g;q\" CreateFile.exe\n  </strong>\n </p>\n <pre><code>0:000> cdb: Reading initial command 'bp kernel32!CreateFileA \"as /ma ${/v:fname}\n poi(@esp+4);.block { .echo fname };gc\";g;q'\n.\n..\nCreateFile.cpp\nCreateFile.exe\nCreateFile.obj\nCreateFile.pdb\n vc100.pdb\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "May 20, 2014 at 19:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}