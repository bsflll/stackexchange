{
    "title": "Help to understand some assembly code",
    "link": "https://reverseengineering.stackexchange.com/questions/14635/help-to-understand-some-assembly-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently working on a old 90's video game to try to correct/modify unrealistic behaviors.\n </p>\n <p>\n  I managed to almost complete my list, but it remains my main objective...\n </p>\n <p>\n  It is a management game, and if you are a poor manager, your boss simply fire you, sometimes for debatable reasons. I found where the \"You are fired\" pannel is launched, but I have some difficulties to understand the mecanism. Could someone help me to understand the below code?\n </p>\n <p>\n  Note that according to IDA it is a 16 bits application.\n </p>\n <pre><code>    mov     eax, dword_5F94E0  // copy the content of dword in eax\n    mov     ecx, eax // copy eax in ecx\n    lea     edx, [eax+eax*4] // ??\n    lea     eax, [edx+edx*8] // ??\n    shl     eax, 8 // ??\n    add     eax, ecx // add ecx to eax\n    lea     edx, [eax+eax*2] // ??\n    mov     eax, dword_9FB922[ecx+edx*2] // ??\n    lea     ecx, dword_9ECB20[ecx+edx*2] // ??\n    sub     eax, 2C5h // remove 709 from eax\n    cmp     eax, 0Dh // compare eax to 13\n    ja      short loc_42D480 // jump if eax > 13 (not fired) else fired\n</code></pre>\n <p>\n  I know there is the easy way to change the behavior of the last line.But it seems it is more complicated: doing so only prevent the \"You are fired\" panel to be displayed, but you are still sacked.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "666",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "enrico69",
    "time": "Feb 12, 2017 at 14:18",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n \"Note that it seems it is a 16 bits application.\" and uses 32-bit registers?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "enrico69",
            "text": "<html><body><span class=\"comment-copy\">\n Yes. I said \"it seems\" because IDA Pro said that. On the other hand, when I looked at the assembly documentation, I saw it refers to 32 bits registers. I don't have the skills to understand. May be it simply comes from IDA.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n instructions like \"lea edx, [eax+eax*4\"   are often used to do multiplications:   edx := eax * 5\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n if i calculate it correctly,  the \"mov eax, dword_9FB922[ecx+edx*2]\"  becomes:  eax := dword_9FB922[69127 * dword_5F94E0] ... which as aGGeRReS remarks, a bit odd, since there is no factor of '4' in the index.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Without taking into account 16/32bit problem you already mentioned I'll try to explain what the code does (if this is what you exactly asked for):\n </p>\n <blockquote>\n  <p>\n   <code>\n    mov     eax, dword_5F94E0\n   </code>\n   // copy the content of dword in eax\n  </p>\n  <p>\n   <code>\n    mov     ecx, eax\n   </code>\n   // copy eax in ecx\n  </p>\n  <p>\n   <code>\n    lea     edx, [eax+eax*4]\n   </code>\n   // LEA stand for \"load effective address\", so after this line EDX will contain and ADDRESS of memory cell with address of eax+eax*4\n  </p>\n  <p>\n   <code>\n    lea     eax, [edx+edx*8]\n   </code>\n   // Similar to previous line. For me - looks a bit stupid, to calculate next address out of the previous one. For me this is an indicator of some problems during disassembly/debugging, but I am not very experienced to claim it to be true for 100%.\n  </p>\n  <p>\n   <code>\n    shl     eax, 8\n   </code>\n   // SHL stands for Shift Left. It shifts the content of EAX bitwise on 8 bits, which is equal to multiplying it by 256. If some non-zero bits were shifted \"out of\" register - CF flag will be raised.\n  </p>\n  <p>\n   <code>\n    add     eax, ecx\n   </code>\n   // add ecx to eax\n  </p>\n  <p>\n   <code>\n    lea     edx, [eax+eax*2]\n   </code>\n   // Similar to previous LEA commands.\n  </p>\n  <p>\n   <code>\n    mov     eax, dword_9FB922[ecx+edx*2]\n   </code>\n   // dword_9FB922 seems to be a DWORD array or matrix. So base-index addressing is used. ecx+edx*2 refers to a particular element of an array (or matrix, look here for an explanation\n   <a href=\"http://www.slideshare.net/bilalamjad1/arrays-and-addressing-modes\" rel=\"nofollow noreferrer\">\n    Link\n   </a>\n   ). The strange thing here is that usually, when working with DWORD (4-byte-element array) you have to multiply (scale) by 4 and not 2. This might be just a wrong naming from IDA.\n  </p>\n  <p>\n   <code>\n    lea     ecx, dword_9ECB20[ecx+edx*2]\n   </code>\n   // Same thing here.\n  </p>\n  <p>\n   <code>\n    sub     eax, 2C5h\n   </code>\n   // remove (subtract) 709 from eax\n  </p>\n  <p>\n   <code>\n    cmp     eax, 0Dh\n   </code>\n   // compare eax to 13\n  </p>\n  <p>\n   <code>\n    ja      short loc_42D480\n   </code>\n   // jump if eax > 13 (not fired) else fired.\n  </p>\n </blockquote>\n <p>\n  I recommend to review the data in all that dword_* variables. Hope this helped you.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Feb 13, 2017 at 12:17",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>mov     eax, dword_5F94E0  // copy the content of dword in eax\nmov     ecx, eax // copy eax in ecx\nlea     edx, [eax+eax*4] // ??\n</code></pre>\n <p>\n  edx=eax*5\n </p>\n <pre><code>lea     eax, [edx+edx*8] // ??\n</code></pre>\n <p>\n  eax=edx*9, i.e. the dword_5F94E0*5*9\n </p>\n <pre><code>shl     eax, 8 // ??\n</code></pre>\n <p>\n  eax=eax*256, i.e. the dword_5F94E0*5*9*256\n </p>\n <pre><code>add     eax, ecx // add ecx to eax\n</code></pre>\n <p>\n  eax=new eax+dword_5F94E0, i.e. the dword_5F94E0*5*9*256+dword_5F94E0\n </p>\n <p>\n  i.e. dword_5F94E0*11521\n </p>\n <pre><code>lea     edx, [eax+eax*2] // ??\n</code></pre>\n <p>\n  edx=eax*3, i.e. dword_5F94E0*11521*3\n </p>\n <pre><code>mov     eax, dword_9FB922[ecx+edx*2] // ??\n</code></pre>\n <p>\n  eax=value from array[dword_5F94E0+dword_5F94E0*11521*3*2]\n </p>\n <p>\n  i.e. eax=value from array[dword_5F94E0*69127]\n </p>\n <pre><code>lea     ecx, dword_9ECB20[ecx+edx*2] // ??\n</code></pre>\n <p>\n  irrelevant for this purpose\n </p>\n <pre><code>sub     eax, 2C5h // remove 709 from eax\ncmp     eax, 0Dh // compare eax to 13\nja      short loc_42D480 // jump if eax > 13 (not fired) else fired\n</code></pre>\n <p>\n  So that's a really large array that is being queried to fetch a small value.\n </p>\n <p>\n  However, the most interesting part would be to look in that array to see which indices match the value of 0x2C5+0x0D, since they trigger the \"fired\" code path.\n </p>\n <p>\n  Given those, you can work out what value in dword_5F94E0 would access each of those indices, by dividing the index by 69127.\n </p>\n <p>\n  From there, you can search the rest of the code for writes to dword_5F94E0 with those values.  Then you will have the events that are interesting.\n </p>\n <p>\n  At that point, you can presumably change the event value to something that won't trigger the \"fired\" code path.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Feb 18, 2017 at 6:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}