{
    "title": "Why are certain functions from kernel32.dll always imported?",
    "link": "https://reverseengineering.stackexchange.com/questions/29333/why-are-certain-functions-from-kernel32-dll-always-imported",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been noticing this for a while. Functions like\n  <code>\n   IsDebuggerPresent\n  </code>\n  and\n  <code>\n   GetModuleHandle\n  </code>\n  are always present in a binary's import directory structure. I assume is the Window's dynamic linker, but where do I find information about it? Below is a screenshot of the \"default\" functions I'm talking about which are always imported.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/jHAem.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/jHAem.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "pe",
        "operating-systems"
    ],
    "user": "unc4nny",
    "time": "Sep 26, 2021 at 22:38",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n in what binary? did you inspect all the countless billions of files out there? What else is common among all binaries you've checked?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jack",
            "text": "<html><body><span class=\"comment-copy\">\n The 'standard' imports will vary based on the compiler you use. That said, these are often used by the compiler to perform various things such as handling exceptions (SetUnhandledExceptionFilter, ..) and so on. To see what each function does, you can just go to msdn or any documentation site. If you are looking for a one-page-guide as to why all these functions are imported, you will probably need to look at some sort of pdf/article about how a compiler works internally.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "unc4nny",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for the pointers. I will look into the Windows compiler, tho I'm afraid there won't be many resources out there\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @unc4nny what \"Windows compiler\"? Several compilers exist for Windows, including Visual C++ from Microsoft, Clang, Intel's compiler and GCC. The compiler runtime and the C runtime are the most likely \"culprits\" regarding those imports, but you don't give enough details as Igor already tried to point out. Your\n <code>\n  main()\n </code>\n function in a C or C++ is rarely ever identical to the entry point of the binary file. And the part that runs before (and \"around\") the\n <code>\n  main()\n </code>\n function (aka the runtime) is what influences stuff that seems to be always there.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  At a guess (since you don't provide much detail), the binaries you're looking at were compiled using a recent version of Microsoft Visual C++. The listed APIs are used by its CRT (C runtime) library in functions referenced by the startup or essential runtime code which is linked into every executable by default. You can find (most of) the CRT sources installed with Visual Studio and check yourself how these APIs are used. For example,\n  <code>\n   IsDebuggerPresent\n  </code>\n  is used by the\n  <code>\n   __raise_securityfailure\n  </code>\n  function which is called when the security cookie check fails (and in some other cases).\n </p>\n <p>\n  Since there are other compilers besides Visual C++ as well as its older versions, there are definitely binaries out there which do not import all or even any of these APIs. In fact, you can make a program which does not link to\n  <code>\n   kernel32\n  </code>\n  at all (for example, by using only native APIs from\n  <code>\n   ntdll.dll\n  </code>\n  or by loading the DLL dynamically shellcode style).\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Sep 25, 2021 at 18:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "unc4nny",
                    "text": "<span class=\"comment-copy\">Thank you! Sorry for not providing much detail, I wasn't exactly sure how to phrase the question. But you provided me all the answers that I needed. Cheers</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IsDebuggerPresent is use to determine if the program is being debugged while GetModuleHandle is use to retrieve the handle on a specific module (Imagebase address) that exist in the current process context. These APIs can be not exist both in any program and does not have any relation with the windows dynamic linker.\n </p>\n <p>\n  There are other programs that don't have imported libraries and will resolved dynamically without the use of those APIs.\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "ismael_akez",
            "time": "Sep 25, 2021 at 2:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "unc4nny",
                    "text": "<span class=\"comment-copy\">I'm already acquainted with their behaviour. I was just wondering why they are present in the import table even tho I'm not using them in my code.</span>",
                    "time": null
                }
            ]
        }
    ]
}