{
    "title": "Patch all calls to a single function using IDC",
    "link": "https://reverseengineering.stackexchange.com/questions/32688/patch-all-calls-to-a-single-function-using-idc",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am quite new in reverse-engineering and programming in general, sorry in advance if this question is dumb. It goes like this:\nIn c++ disassembled code exist calls to a certain function. 2 thousand of them, to be precise. So I want to replace all of them with nop, but after digging into hex-rays IDC docs, I can't quite figure out what to do\nI understood that I need to use loader_input_t.seek to search for those strings, but nothing after. My best guess had to do something using patch_qword, but I don't get how to input parameters into it.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "100",
    "tags": [
        "ida",
        "disassembly",
        "c++",
        "idc"
    ],
    "user": "flying_meatball",
    "time": "Feb 6, 2024 at 8:10",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n As suggested by @serv0, you'd be using\n <code>\n  patch_byte\n </code>\n , and python is almost infinitely nicer than idc scripting. However, to get the 2000 calls to that certain function, you'd want to enumerate its references using the\n <code>\n  get_first_cref_to\n </code>\n and\n <code>\n  get_next_cref_to\n </code>\n pair with a loop. This way you can use the cross references to find each call, and then\n <code>\n  patch_byte\n </code>\n each one of them according to your needs.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For IDC scripting you can use the patch_byte() function [1], perhaps you can try idapython [2]:\n </p>\n <pre><code>import ida_bytes\nea = 0x41414141\nida_bytes.patch_byte(ea, 0x90)\n</code></pre>\n <p>\n  this will patch the address at 'ea' with 0x90 (NOP), or in case of patching several bytes:\n </p>\n <pre><code>buffer = b'\\x90\\x90\\x90\\x90'\nida_bytes.patch_bytes(ea, buffer)\n</code></pre>\n <p>\n  hope this helps.\n </p>\n <p>\n  [1]\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.patch_byte\" rel=\"nofollow noreferrer\">\n   https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.patch_byte\n  </a>\n </p>\n <p>\n  [2]\n  <a href=\"https://hex-rays.com/products/ida/support/idadoc/713.shtml\" rel=\"nofollow noreferrer\">\n   https://hex-rays.com/products/ida/support/idadoc/713.shtml\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "serv0",
            "time": "Feb 1, 2024 at 16:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}