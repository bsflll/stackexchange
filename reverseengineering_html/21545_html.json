{
    "title": "IDA freeware (v7.0) exporting Hex-View A",
    "link": "https://reverseengineering.stackexchange.com/questions/21545/ida-freeware-v7-0-exporting-hex-view-a",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to export the Hex View generated from IDA to a file with the addresses intact similar to the\n  <code>\n   .LST\n  </code>\n  files generated for assembly instructions.\n </p>\n <p>\n  The closest I've come to generating this file is to select all and then export as a string. However this doesn't save the addresses.\n </p>\n <p>\n  Is there a way to produce this data?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "763",
    "tags": [
        "ida"
    ],
    "user": "Srinivas Eswar",
    "time": "Jun 25, 2019 at 15:51",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n What addresses? Merely the offsets in the file or the respective segment addresses and whatnot? IDA assigns some of those arbitrarily, i.e. it would be better to explain what your goal is and not so much ask about the specific next step you think you need. As for the offsets, standard tools like\n <code>\n  xxd\n </code>\n can give you this ... e.g.\n <code>\n  xxd -g 1 <filename>\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Srinivas Eswar",
            "text": "<html><body><span class=\"comment-copy\">\n I just wanted a way to reconcile the Hex View with the\n <code>\n  .LST\n </code>\n file with the disassembled instructions. I noticed using a different tools (od) gave slightly different offsets than IDA.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i don't think you have a ready made dumper with rebased addresss intact in ida hexview\n </p>\n <p>\n  but you can improvise the idc Script Below to dump the bytes with Address intact\n </p>\n <p>\n  (this script was used in Idafree 5.0 long back so you may need to refresh the Function/syntax (idafree 5 was 32 bit idafree 7 is now 64 Bit so may be somethings change i don't know)\n </p>\n <pre><code>auto min;\nauto count;\nauto fhandle;\n\ncount = 0;\nfhandle = fopen(\"c:\\\\idahexviewa.txt\" , \"wb\");\nmin =MinEA();\n\nfor ( min ; min < min + 16 ; min = NextAddr(min) )\n{\n    if(min == BADADDR )\n    {\n        break;\n    } \n\n    if(count == 0) \n    {\n        fprintf( fhandle, \"%s:%x \" SegName(min), min);        \n    }\n\n    fprintf( fhandle , \"%02x \" , Byte(min));\n    count = count+1;\n\n    if( count == 16) \n    {\n       count = 0;\n       fprintf(fhandle, \"\n\");\n    } \n\n}    \nfclose(fhandle);\n</code></pre>\n <p>\n  result\n </p>\n <pre><code>C:\\>head -n 2 idahexviewa.txt\nHEADER:2000000 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00\nHEADER:2000010 b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00\n\nC:\\>tail -n 2 idahexviewa.txt\n.data:20581e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n.data:20581f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nC:\\>wc -l idahexviewa.txt\n22528 idahexviewa.txt\n\nC:\\>powershell -c \"\\\"{0:x}\\\" -f (22528 * 16)\"\n58000\n\nsome 200 bytes appear to be missing so the hexview must have some hole\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Jun 26, 2019 at 19:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}