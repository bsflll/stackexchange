{
    "title": "How to generate CFG from assembly instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/10604/how-to-generate-cfg-from-assembly-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to know is there any tools to use assembly file and convert it to an intermediate language such as RREIL and then generate control flow graph from the intermediate language ?\nThis is the example my assembly file:\n </p>\n <pre><code>7c90e430:   lea 0x10(%esp), %edi    R@edi[0xd38e0500][4](W) T0  A@0x0012fd30[0x00000000][4](R) T0\n7c90e434:   popl  %eax  R@eax[0x0041771b][4](W) T0  M@0x0012fd20[0x7c901166][4](R) T0\n7c90e435:   calll  %eax R@eax[0x7c901166][4](R) T0  M@0x0012fd20[0x7c901166][4](W) T0\n7c901166:   lea 0x10(%esp), %eax    R@eax[0x7c901166][4](W) T0  A@0x0012fd30[0x00000000][4](R) T0\n7c90116a:   movl  %eax, 0x4(%esp)   M@0x0012fd24[0x00000000][4](W) T0   R@eax[0x0012fd30][4](R) T0\n7c90116e:   xor %ebp, %ebp  R@ebp[0x00150748][4](RW) T0 R@ebp[0x00150748][4](R) T0\n7c901170:   jmp 0x7c91b057  J@0x00000000[0x00019ee7][4](R) T0\n7c91b057:   mov %edi, %edi  R@edi[0x0012fd30][4](W) T0  R@edi[0x0012fd30][4](R) T0\n7c91b059:   pushl  %ebp R@ebp[0x00000000][4](R) T0  M@0x0012fd1c[0x00000000][4](W) T0\n7c91b05a:   mov %esp, %ebp  R@ebp[0x00000000][4](W) T0  R@esp[0x0012fd1c][4](R) T0\n7c91b05c:   cmpb  $0x0, 0x7c97b20c  M@0x7c97b20c[0x00000000][1](R) T0   I@0x00000000[0x00000000][1](R) T0\n7c91b063:   jz 0x7c9226ed   J@0x00000000[0x0000768a][4](R) T0\n</code></pre>\n <p>\n  This file is generated after runing a binary in a sandbox so I do not want to convert it to binary and do the process.\n </p>\n <p>\n  <strong>\n   P.S\n  </strong>\n  : As I know all of existing tools use binary and do this process while I have an assembly file and want to do this process.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "7k",
    "tags": [
        "assembly",
        "control-flow-graph"
    ],
    "user": "Ben Richards",
    "time": "Aug 11, 2015 at 14:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote an article on that very topic about 20 years ago.  It's titled\n  <a href=\"http://www.drdobbs.com/embedded-systems/assembly-language-control-flow-graphing/184410664\" rel=\"noreferrer\">\n   Assembly Language Control Flow Graphing\n  </a>\n  and was published in the September 1998 issue of Dr. Dobb's Journal.  It used Perl to parse the assembly code to generate a Postscript representation of the control flow graph.  That graph then can either be printed or viewed on screen by anything that can render Postscript. It was written for an 8-bit microcontroller that is now obsolete, but the code could be adapted for use with any instruction set. It could also, without much difficulty, be adapted to output SVG.\n </p>\n <p>\n  Sample output from a simple bubble sort in that assembly language looks like this:\n  <a href=\"https://i.sstatic.net/SJrFN.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/SJrFN.png\"/>\n  </a>\n </p>\n <p>\n  The numbers at the left represent line numbers in the original\n  <code>\n   bubble.asm\n  </code>\n  file.  Flows toward the bottom are on the right of the vertical line. Flows toward the top are on the left.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Edward",
            "time": "Aug 10, 2015 at 17:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In fact, you have many of these tools. Mostly, what you seems to need is what is called\n  <a href=\"https://en.wikipedia.org/wiki/Symbolic_execution\" rel=\"noreferrer\">\n   symbolic execution of binary programs\n  </a>\n  which requires to translate the semantics of the assembly language into an intermediate language to pass it to an SMT-solver that handle bit-vector logic formula (usually Z3). But, beware, not all tools support the translation to an intermediate language.\n </p>\n <p>\n  Here is a small sample of such tools (not exhaustive though), given in lexicographic order (to avoid any bias):\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/bdcht/amoco\" rel=\"noreferrer\">\n    Amoco\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://angr.io/\" rel=\"noreferrer\">\n    Angr\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/BinaryAnalysisPlatform/bap\" rel=\"noreferrer\">\n    Binary Analysis Platform\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://bitbucket.org/mihaila/bindead/wiki/Home\" rel=\"noreferrer\">\n    Bindead\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://bitblaze.cs.berkeley.edu/\" rel=\"noreferrer\">\n    BitBlaze\n   </a>\n   (see the\n   <a href=\"http://bitblaze.cs.berkeley.edu/fuzzball.html\" rel=\"noreferrer\">\n    Fuzzball project\n   </a>\n   ).\n  </li>\n  <li>\n   <a href=\"https://insight.labri.fr/trac\" rel=\"noreferrer\">\n    Insight\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://www.cs.ubc.ca/labs/isd/Projects/Kite/\" rel=\"noreferrer\">\n    Kite\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://klee.github.io/\" rel=\"noreferrer\">\n    Klee\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://forallsecure.com/mayhem.html\" rel=\"noreferrer\">\n    Mayhem\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/trailofbits/mcsema\" rel=\"noreferrer\">\n    McSema\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/cea-sec/miasm\" rel=\"noreferrer\">\n    Miasm2\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/codelion/pathgrind\" rel=\"noreferrer\">\n    PathGrind\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/feliam/pysymemu\" rel=\"noreferrer\">\n    PySymEmu\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://s2e.epfl.ch/\" rel=\"noreferrer\">\n    S2E\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://triton.quarkslab.com/\" rel=\"noreferrer\">\n    Triton\n   </a>\n   .\n  </li>\n  <li>\n   ...\n  </li>\n </ul>\n <p>\n  I will get back to this list if I realize that I forgot some.\n </p>\n <p>\n  And, concerning the fact that you get assembly code, then just compile it and you will get binary. :-)\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "perror",
            "time": "Apr 28, 2016 at 12:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ben Richards",
                    "text": "<span class=\"comment-copy\">Tnx for your answer. As I know most of them working with only binaries. Due to some research reasons I do not want to compile binary. That is why I looking for a tool that can directly works with assemblies not binaries.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">At least Miasm2 can take assembly language as input, and probably many others... But, you should spend more time describing your problem than just dropping four lines here, you might get more relevant answers, then.</span>",
                    "time": null
                },
                {
                    "user": "txs",
                    "text": "<span class=\"comment-copy\">Which tool is best to use in Linux to generate cfg from existing assembly?</span>",
                    "time": null
                }
            ]
        }
    ]
}