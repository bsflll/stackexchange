{
    "title": "How works k command in windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/31624/how-works-k-command-in-windbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am studying a Windows x86 binary in windbg.\nWhen i debug a function, in can see the call stack with « k » command.\n </p>\n <p>\n  My question is: how works windbg internaly to get this call stack ?\n </p>\n <p>\n  I was thinking it works with ebp register and stack frame.\n </p>\n <p>\n  But some functions does not push esp/ebp in the begining. So how works k command in this case ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "261",
    "tags": [
        "x86",
        "windbg",
        "callstack"
    ],
    "user": "Bob5421",
    "time": "Mar 4, 2023 at 14:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It uses the\n  <em>\n   ebp\n  </em>\n  ,\n  <em>\n   esp\n  </em>\n  and\n  <em>\n   eip\n  </em>\n  registers for each stack frame unless you explicitly pass them to the\n  <strong>\n   k\n  </strong>\n  command yourself. If those registers aren't set correctly then usually you'll get a inaccurate stack trace or nothing at all.\n </p>\n <p>\n  You might find this\n  <a href=\"https://devblogs.microsoft.com/oldnewthing/20190206-00/?p=101034\" rel=\"nofollow noreferrer\">\n   article\n  </a>\n  to be useful as well.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "sudo",
            "time": "Mar 6, 2023 at 20:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}