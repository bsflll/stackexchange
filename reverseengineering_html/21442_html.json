{
    "title": "How to call WinApi from a breakpoint in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/21442/how-to-call-winapi-from-a-breakpoint-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When I'm stepping through a debuggee process with IDA+WinDbg (as a debugger), I need to track one parameter by executing the following API (from within the breakpoint):\n </p>\n <pre><code>//C++ code\nSCROLLINFO s;\ns.cbSize = sizeof(s);    //0x1C\ns.fMask = SIF_POS | SIF_TRACKPOS;   //0x4 | 0x10\nGetScrollInfo(hWnd, SB_VERT, &s);    //SB_VERT = 1\nprintf(\"pos=%d, track=%d\", s.nPos, s.nTrackPos);\n</code></pre>\n <p>\n  So I came up with the following Python script to do this from a breakpoint in IDA:\n </p>\n <pre><code>import ctypes\nfrom ctypes import wintypes\nhwnd = 0x00020208\nuser32 = ctypes.WinDLL('user32', use_last_error=True)\nclass SCROLLINFO(ctypes.Structure):\n    _fields_ = ((\"cbSize\", wintypes.DWORD),\n                (\"fMask\", wintypes.DWORD),\n                (\"nMin\", wintypes.LONG),\n                (\"nMax\", wintypes.LONG),\n                (\"nPage\", wintypes.DWORD),\n                (\"nPos\", wintypes.LONG),\n                (\"nTrackPos\", wintypes.LONG))\ns = SCROLLINFO(cbSize=0x1C,\n        fMask=0x14,\n        nPos=-1,\n        nTrackPos=-1)\nuser32.GetScrollInfo(hwnd, 1, ctypes.byref(s))\nprint s.nPos, s.nTrackPos\n</code></pre>\n <p>\n  Which I thought seemed to work and gave me some values:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/lJrw0.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/lJrw0.png\"/>\n  </a>\n </p>\n <p>\n  But then when I got to the actual code in the process that was doing the same:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/jzBlJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/jzBlJ.png\"/>\n  </a>\n </p>\n <p>\n  The result it received for\n  <code>\n   s.nTrackPos\n  </code>\n  was 1 instead of 8 that is reported by my Python script. Here's the memory dump for the\n  <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagscrollinfo\" rel=\"nofollow noreferrer\">\n   SCROLLINFO\n  </a>\n  struct:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/pLN9u.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/pLN9u.png\"/>\n  </a>\n </p>\n <p>\n  So what am I doing wrong here? Why is the Python script returning the wrong value?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "373",
    "tags": [
        "ida",
        "idapython",
        "windbg",
        "winapi",
        "ida-plugin"
    ],
    "user": "c00000fd",
    "time": "Jun 9, 2019 at 10:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your Python code executes inside IDAâ€™s process so you are getting results of the call on IDA, not the debuggee. If you want to execute code inside the process being debugged, you can use Appcall:\n  <a href=\"http://www.hexblog.com/?p=113\" rel=\"nofollow noreferrer\">\n   http://www.hexblog.com/?p=113\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 14, 2019 at 6:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">I ended up writing my own asm function in that module that would call the code I needed to check (first C++ snippet that I gave above.) I used asm so that I could enclose it in <code>PUSHFD</code>, <code>PUSHAD</code> and then at the end in <code>POPAD</code>, <code>POPFD</code>, <code>JMP self</code> instructions. I would then change IP to it whenever I needed to do the check, execute it and get the result and then change IP back to where I was before. (I just had to remember to write down the previous IP.) Kinda like a poor man's version of the task switcher. That's a little bit more work, but at least I could rely on the results.</span>",
                    "time": null
                }
            ]
        }
    ]
}