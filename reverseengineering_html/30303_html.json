{
    "title": "Z3 is unable to predict the operand",
    "link": "https://reverseengineering.stackexchange.com/questions/30303/z3-is-unable-to-predict-the-operand",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When I try to solve this crackme chall (\n  <a href=\"https://crackmes.one/crackme/61ffb07c33c5d46c8bcbfc1d\" rel=\"nofollow noreferrer\">\n   https://crackmes.one/crackme/61ffb07c33c5d46c8bcbfc1d\n  </a>\n  ) , there is a condition that I can't bypass and my z3 script can't predict the input string that will bypass the condition\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/52wqB.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/52wqB.jpg\"/>\n  </a>\n </p>\n <p>\n  and this is my z3 script\n </p>\n <pre><code>from z3 import *\n\nv7 = [123,456,789,987,654,321]\nv6 = [92,29,380,2,497,296]\n\ns = [BitVec(f'a{i}', 8) for i in range(5)]\n\nsolver = Solver()\n\nv20 = 0x7FFFFFFF\nfor i in range(5):\n    solver.add(s[i]>32,s[i]<127)\n    v20 += i * s[i]\n    solver.add(v20 % v7[i] == v6[i])\n\nsolver.check()\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "115",
    "tags": [
        "ida",
        "crackme"
    ],
    "user": "IVs",
    "time": "Apr 22, 2022 at 11:16",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n The function has much more logic and you need to add that in the script too\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is to note that the division in the binary is unsigned while according to\n  <a href=\"https://z3prover.github.io/api/html/classz3py_1_1_bit_vec_ref.html#a972c1bf635b9697a3d92d066e0ebe10c\" rel=\"nofollow noreferrer\">\n   doc\n  </a>\n </p>\n <blockquote>\n  <p>\n   Use the function URem() for unsigned remainder, and SRem() for signed remainder.\n  </p>\n </blockquote>\n <p>\n  <code>\n   %\n  </code>\n  operator by default is an alias for\n  <code>\n   SRem\n  </code>\n  or signed modulo. You need to use\n  <code>\n   URem\n  </code>\n  . I have fixed your logic as well in this code\n </p>\n <pre><code>from z3 import *\n\nv7 = [123,456,789,987,654,321]\nv6 = [92,29,380,2,497,296]\narrl = 14\nargv1 = [BitVec(f'a{i}', 32) for i in range(arrl)]\n\nsolver = Solver()\nv18 = BitVecVal(0x7fffffff, 32)\n\nfor i in range(arrl):\n    solver.add(argv1[i] < 128)\n    solver.add(argv1[i] > 32)\n    v18 += i*argv1[i]\n\nfor i in range(6):\n    solver.add(URem(v18, v7[i]) == v6[i])\n\nprint(solver.check())\nprint(\"\".join(map(chr,[solver.model()[argv1[i]].as_long() for i in range(arrl)])))\n</code></pre>\n <p>\n  Please note that this won't solve the problem, It has additional checks.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Apr 22, 2022 at 17:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "IVs",
                    "text": "<span class=\"comment-copy\">Thanks! as you see there is <code>if ( ((unsigned int (__fastcall *)(char *, size_t))v14)(a2[1], v5) )</code> in decompiled code, can you explain what this check do ? and what does this mean <code>(unsigned int (__fastcall *)(char *, size_t))</code> ?</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">@IntVer You can open a new question for that. hint: its a function pointer</span>",
                    "time": null
                },
                {
                    "user": "IVs",
                    "text": "<span class=\"comment-copy\">@sudhacker <a href=\"https://reverseengineering.stackexchange.com/questions/30308/decompilers-points-to-non-existing-virtual-function\" title=\"decompilers points to non existing virtual function\">reverseengineering.stackexchange.com/questions/30308/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}