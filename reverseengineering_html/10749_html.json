{
    "title": "How to identify code ran when clicking on an object in a game",
    "link": "https://reverseengineering.stackexchange.com/questions/10749/how-to-identify-code-ran-when-clicking-on-an-object-in-a-game",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've played with using software like cheat engine to modify memory, null out code and even inject some code of my own. However finding the right spot to modify is\n  <em>\n   always\n  </em>\n  a difficulty. I'd like to be able to identify the code that is run when I click my mouse on an object (eventually to simulate the entire process). Is there a tool or method for doing this that anyone could suggest?\n </p>\n <p>\n  I've used ollydb and cheat engine a fair bit in the past.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "memory",
        "machine-code",
        "automation"
    ],
    "user": "FraserOfSmeg",
    "time": "Aug 30, 2015 at 0:26",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n This depends on the framework used to build the game. As an example, unity3d games are .net based, so .net tools(decompilers/debuggers/tracers/etc)  should be used. Using Olly or Cheat Engine is possible but difficult.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n See\n <a href=\"http://reverseengineering.stackexchange.com/questions/2228/highlight-executed-basic-blocks-in-ida\">\n  Highlight Executed Basic Blocks in IDA\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    <strong>\n     On windows you can\n    </strong>\n   </p>\n   <p>\n    find\n    <code>\n     winproc\n    </code>\n    function, search click messages within it and add breakpoint/trace from there...\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     On different OS\n    </strong>\n   </p>\n   <p>\n    trace mouse handlers ...\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     If OpenGL is used\n    </strong>\n   </p>\n   <p>\n    The\n    <a href=\"https://www.opengl.org/archives/resources/faq/technical/selection.htm\" rel=\"nofollow noreferrer\">\n     Object selection\n    </a>\n    is often done by it directly during rendering. You can trace calls to those functions used.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     If any framework is used\n    </strong>\n   </p>\n   <p>\n    learn what function for mouse it has and trace its calls ...\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An effective method in these cases (although not necessarily straightforward) is to use\n  <em>\n   differential debugging\n  </em>\n  .\n </p>\n <p>\n  The core principle is to run the application twice and record traces of the functions being executed, or even basic blocks if you need to get so granular.\n </p>\n <p>\n  The idea boils down to:\n </p>\n <ul>\n  <li>\n   The first time you record a trace try to exercise as much functionality as possible, except what you are interested in (in your case, do not press that button!).\n  </li>\n  <li>\n   <p>\n    The second time you go directly for what you are interested in, press that button!\n   </p>\n  </li>\n  <li>\n   <p>\n    Now you can filter the noise out of the second trace by looking for hits that appear exclusively in the second (and not in the first)\n   </p>\n  </li>\n </ul>\n <p>\n  This is not a perfect method but it works pretty well to narrow the search in several scenarios.\n </p>\n <p>\n  <em>\n   Shameless plug:\n  </em>\n  Here a\n  <a href=\"https://brundlelab.wordpress.com/2012/06/02/a-story-of-binaries-and-snipers/\" rel=\"nofollow\">\n   link to my blog\n  </a>\n  where I discuss a similar (in nature) problem. There is even some old code to get you started.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Carlos Garcia",
            "time": "Aug 9, 2016 at 21:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}