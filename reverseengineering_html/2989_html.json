{
    "title": "Hooking to a function with variable argument list",
    "link": "https://reverseengineering.stackexchange.com/questions/2989/hooking-to-a-function-with-variable-argument-list",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using Detours 3.0 to hook onto a function I obtained from Ida Pro. The problem is I came across a function which I cannot seem to hook which is due to either invalid arguements or the fact that it uses a variable arguement list.\n </p>\n <pre><code>int (*MakePacketBuffer)(const char * buf, int len, const char * splitstr, ...);\n#define MakePacketBufferProto int (*)(const char *, int, const char *, ...)\n</code></pre>\n <p>\n  That is what I imagine the parameters to be like, in Ida Pro its actually shown like this:\n </p>\n <pre><code>int sub_66EEF0(int a1, int a2, const char *a3, ...)\n</code></pre>\n <p>\n  How that function is called in Ida:\n </p>\n <pre><code>sub_66EEF0(buf, 2048, \"%c%c%c%c%s%c%c\", v15, 250, v20, v21, v22, v23, v25);\n</code></pre>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida"
    ],
    "user": "user1595145",
    "time": "Oct 30, 2013 at 21:38",
    "comments": [
        {
            "user": "Ditmar Wendt",
            "text": "<html><body><span class=\"comment-copy\">\n Do you HAVE to use MS Detours? Knowing the prolog of the function would help a lot as well(varies from compiler to compiler)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n why can't you hook this?  If you know the address of the function, then you can detour it and gain control.  However, you might not be able to resume execution afterwards without some tricks like \"undetouring\" that function and detouring the return address, because the function prolog might not be suitable (as @Ditmar implies).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n What have you done to try to hook it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Fewmitz",
            "text": "<html><body><span class=\"comment-copy\">\n Are you attempting to hook the function on the way in, out, or both?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You'll need to know how the compiler generated the function.  For 32-bit Windows applications compiled with MSVC, your life gets a little bit easier since all arguments are passed on the stack.\n </p>\n <p>\n  The way that the stack frame is set up upon entry to a routine on x86 Windows:\n </p>\n <pre><code>----------------\n Return Address \n----------------\n Argument #0 \n----------------\n Argument #1\n----------------\n Argument #2 \n----------------\n  ....\n</code></pre>\n <p>\n  This continues to be the case for vararg routines.  Here's a quick example that shows you how to get at the additional values.  The issue that you'll run into if you're intercepting things like\n  <code>\n   printf\n  </code>\n  is that you have to parse the format string to know how many arguments have been passed to you.\n </p>\n <pre><code>#include <stdio.h>\n#include <windows.h>\n#include <intrin.h>\n\n#define print(x) printf(\"%10s: %x\n\", #x, x)\n\nvoid fn(int a, int b, ...) {\n    void ** Stack = (void**) _AddressOfReturnAddress();\n\n    print(Stack);    // Address of SP upon function entry\n    print(Stack[0]); // Return address\n    print(Stack[1]); // a\n    print(Stack[2]); // b\n    print(Stack[3]); // vararg 1\n};\n\nvoid main() {\n    fn(1,2,3,4,5,6);\n}\n</code></pre>\n <p>\n  This prints out:\n </p>\n <pre><code>   Stack: 101feac\nStack[0]: ce10a4\nStack[1]: 1\nStack[2]: 2\nStack[3]: 3\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Zach Riggle",
            "time": "Feb 1, 2014 at 20:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is not necessary to know the number of arguments.\n </p>\n <p>\n  In practice, the number of arguments is limited by a constant (otherwise the program would need infinite memory :).\n </p>\n <p>\n  Therefore, you can declare a hook function with, say, 16 args, print the args, and call the original function with the same 16 args. If the code breaks, double the number of args.\n </p>\n <pre><code>typedef unsigned long DW;\n#define DW_MANYARGS  DW arg1,DW arg2,DW arg3,DW arg4,DW arg5,DW arg6,DW arg7,DW arg8\n#define MANYARGS     arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8\n\nDW hookFunc(DW_MANYARGS) {\n    // we do not expect a quadruple-word result here\n    DW res = originalFunc(MANYARGS);\n    return res;\n}\n</code></pre>\n <p>\n  Caveats:\n </p>\n <p>\n  Do not forget to return what the original function returns.\n </p>\n <p>\n  Remember that there are two hidden arguments:\n </p>\n <p>\n  0) the address of the return value, if the return value does not fit into the size of int;\n </p>\n <p>\n  1) the\n  <code>\n   this\n  </code>\n  pointer\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "18446744073709551615",
            "time": "May 11, 2016 at 9:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}