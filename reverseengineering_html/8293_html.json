{
    "title": "Does anyone recognize this keyboard encoding scheme?",
    "link": "https://reverseengineering.stackexchange.com/questions/8293/does-anyone-recognize-this-keyboard-encoding-scheme",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am finalizing the reverse-engineering of a linux driver for the\n  <a href=\"https://rads.stackoverflow.com/amzn/click/com/B0083H4NG4\" rel=\"nofollow noreferrer\">\n   Perixx MX-2000 IIB\n  </a>\n  mouse. One of the features the mouse has is arbitrary button mapping. I can assign a button to produce various keys or mouse buttons. I have recorded a few button assignments available in the Windows driver, and figured out a few myself, but there doesn't seem to be a discernible (to me) pattern to map the whole address space.\n </p>\n <p>\n  The keys behave like this: Two bytes control a particular mouse button. I have learned a few keys and modifiers, and will post below. Setting the mouse button to the\n  <em>\n   hex value\n  </em>\n  gives me\n  <em>\n   keyboard output\n  </em>\n  when clicked.\n </p>\n <p>\n  <strong>\n   keyboard output\n  </strong>\n  |\n  <strong>\n   hex value\n  </strong>\n  \n\n  <kbd>\n   a\n  </kbd>\n  |\n  <code>\n   0x0400\n  </code>\n  \n\n  <kbd>\n   b\n  </kbd>\n  |\n  <code>\n   0x0500\n  </code>\n  \n\n  <kbd>\n   c\n  </kbd>\n  |\n  <code>\n   0x0600\n  </code>\n  \n\n  ...\n  \n\n  <kbd>\n   z\n  </kbd>\n  |\n  <code>\n   0x1D00\n  </code>\n  \n\n  <kbd>\n   1\n  </kbd>\n  |\n  <code>\n   0x1E00\n  </code>\n  \n\n  <kbd>\n   2\n  </kbd>\n  |\n  <code>\n   0x1F00\n  </code>\n  \n\n  ...\n  \n\n  <kbd>\n   9\n  </kbd>\n  |\n  <code>\n   0x2600\n  </code>\n  \n\n  <kbd>\n   0\n  </kbd>\n  |\n  <code>\n   0x2700\n  </code>\n  \n\n  <kbd>\n   return\n  </kbd>\n  |\n  <code>\n   0x2800\n  </code>\n  \n\n  <kbd>\n   esc\n  </kbd>\n  |\n  <code>\n   0x2900\n  </code>\n  \n\n  <kbd>\n   backspace\n  </kbd>\n  |\n  <code>\n   0x2A00\n  </code>\n  \n\n  <kbd>\n   tab\n  </kbd>\n  |\n  <code>\n   0x2B00\n  </code>\n  \n\n  <kbd>\n   space\n  </kbd>\n  |\n  <code>\n   0x2C00\n  </code>\n  \n\n  ...\n  \n\n  <kbd>\n   Volume Up\n  </kbd>\n  |\n  <code>\n   0x8000\n  </code>\n  (XF86AudioRaiseVolume)\n  \n\n  <kbd>\n   Volume Down\n  </kbd>\n  |\n  <code>\n   0x8100\n  </code>\n  (XF86AudioLowerVolume)\n  \n\n  ...\n </p>\n <p>\n  I've mapped through\n  <code>\n   0x8A00\n  </code>\n  but will spare you the whole table. The interesting things are that thing like XF86 commands appear pretty early, like in\n  <code>\n   0x6F00\n  </code>\n  is XF86AudioMicMute, or\n  <code>\n   0x6600\n  </code>\n  is the power off key.\n </p>\n <p>\n  As for the least significant byte, part of that is modifiers, applied as a mask.\n  <kbd>\n   Ctl\n  </kbd>\n  is\n  <code>\n   (1 << 0)\n  </code>\n  ,\n  <kbd>\n   shift\n  </kbd>\n  is\n  <code>\n   (1 << 1)\n  </code>\n  ,\n  <kbd>\n   alt\n  </kbd>\n  is\n  <code>\n   (1 << 2)\n  </code>\n  and\n  <kbd>\n   super/meta/windows\n  </kbd>\n  is\n  <code>\n   (1<<3)\n  </code>\n  . So this way,\n  <kbd>\n   shift\n  </kbd>\n  +\n  <kbd>\n   a\n  </kbd>\n  (capital A) is\n  <code>\n   0x0402\n  </code>\n  .\n  <kbd>\n   Ctl\n  </kbd>\n  +\n  <kbd>\n   Alt\n  </kbd>\n  +\n  <kbd>\n   a\n  </kbd>\n  would be\n  <code>\n   0x0405\n  </code>\n  . All four modifiers give you\n  <code>\n   0x0F\n  </code>\n  for the least sig. byte. Playing around with the high nybble of the LSB, say with values like\n  <code>\n   0x0440\n  </code>\n  gives me more keys, like XF86Mute. So it seems the address space is massive.\n </p>\n <p>\n  On top of this, there are some keys from the windows driver that presented as an entirely different scheme.\n </p>\n <p>\n  <strong>\n   Output\n  </strong>\n  |\n  <strong>\n   hex value\n  </strong>\n  \n\n  <kbd>\n   aMouse Scroll up\n  </kbd>\n  |\n  <code>\n   0x0143\n  </code>\n  \n\n  <kbd>\n   Mouse Scroll down\n  </kbd>\n  |\n  <code>\n   0xFF43\n  </code>\n  \n\n  <kbd>\n   WWW Search\n  </kbd>\n  |\n  <code>\n   0x2122\n  </code>\n  \n\n  <kbd>\n   WWW Back\n  </kbd>\n  |\n  <code>\n   0x2422\n  </code>\n  \n\n  <kbd>\n   WWW Forward\n  </kbd>\n  |\n  <code>\n   0x2522\n  </code>\n  \n\n  <kbd>\n   Email\n  </kbd>\n  |\n  <code>\n   0x8A21\n  </code>\n  \n\n  <kbd>\n   Internet Expl Back\n  </kbd>\n  |\n  <code>\n   0x8842\n  </code>\n  (presents as mouse button 8 in X11)\n  \n\n  <kbd>\n   IE Forward\n  </kbd>\n  |\n  <code>\n   0x9042\n  </code>\n  (mouse button 9)\n  \n\n  <kbd>\n   Calculator\n  </kbd>\n  |\n  <code>\n   0x9221\n  </code>\n  \n\n  <kbd>\n   My Computer\n  </kbd>\n  |\n  <code>\n   0x9421\n  </code>\n  \n\n  <kbd>\n   Mute\n  </kbd>\n  |\n  <code>\n   0xE220\n  </code>\n  \n\n  <kbd>\n   Volume Up\n  </kbd>\n  |\n  <code>\n   0xE920\n  </code>\n  \n\n  <kbd>\n   Volume Down\n  </kbd>\n  |\n  <code>\n   0xEA20\n  </code>\n </p>\n <p>\n  And a few mouse buttons:\n </p>\n <p>\n  <strong>\n   output\n  </strong>\n  |\n  <strong>\n   hex\n  </strong>\n  \n\n  <kbd>\n   Left Click\n  </kbd>\n  |\n  <code>\n   0x8142\n  </code>\n  \n\n  <kbd>\n   Right Click\n  </kbd>\n  |\n  <code>\n   0x8242\n  </code>\n  \n\n  <kbd>\n   Wheel Click\n  </kbd>\n  |\n  <code>\n   0x8442\n  </code>\n </p>\n <p>\n  and finally, these are internal mouse commands. They don't register any events on my linux machine, but do change things in the mouse's internal settings\n </p>\n <p>\n  <strong>\n   action\n  </strong>\n  |\n  <strong>\n   hex\n  </strong>\n </p>\n <p>\n  <kbd>\n   Cycle DPI setting\n  </kbd>\n  |\n  <code>\n   0x034A\n  </code>\n  \n\n  <kbd>\n   DPI increase\n  </kbd>\n  |\n  <code>\n   0x014A\n  </code>\n  \n\n  <kbd>\n   DPI decrease\n  </kbd>\n  |\n  <code>\n   0x004A\n  </code>\n  \n\n  <kbd>\n   Cycle mouse profile\n  </kbd>\n  |\n  <code>\n   0x074A\n  </code>\n  \n\n  <kbd>\n   Profile Up\n  </kbd>\n  |\n  <code>\n   0x054A\n  </code>\n  \n\n  <kbd>\n   Profile Down\n  </kbd>\n  |\n  <code>\n   0x044A\n  </code>\n </p>\n <p>\n  And finally there is a special set that looks like\n  <code>\n   0x0a88\n  </code>\n  that point internally to macro memory.\n </p>\n <p>\n  I can't find any encoding schemes or keyboard mappings that might match this. Alphabetical keys? And If you notice,\n  <kbd>\n   volume up\n  </kbd>\n  is both\n  <code>\n   0x8000\n  </code>\n  and\n  <code>\n   0xE920\n  </code>\n  while\n  <kbd>\n   vol down\n  </kbd>\n  is both\n  <code>\n   0x8100\n  </code>\n  and\n  <code>\n   0xEA20\n  </code>\n  . So somewhat of a light at the end of the tunnel that there is a consistent distance between those.\n </p>\n <p>\n  But really, I can't figure out a standard mapping this matches. Or any way to figure out all the keys without manually fiddling with the memory and looping through\n  <code>\n   0x0000\n  </code>\n  to\n  <code>\n   0xFFFF\n  </code>\n  and clicking with\n  <code>\n   xev\n  </code>\n  each time.\n </p>\n <p>\n  Thoughts? is any of this familiar? or other patterns spotted?\n </p>\n <p>\n  <strong>\n   edit\n  </strong>\n  : All key information I've mapped so far is\n  <a href=\"https://gist.github.com/pzl/94438a72f578b478a610\" rel=\"nofollow noreferrer\">\n   in this gist\n  </a>\n  including\n  <code>\n   0x0000\n  </code>\n  through\n  <code>\n   0xFF00\n  </code>\n  (leaving LSByte\n  <code>\n   0x00\n  </code>\n  ). So there is still a massive address space left. And it still makes no sense to me with the extra keys from the windows driver like\n  <code>\n   0x9421\n  </code>\n  = XF86Explorer\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "334",
    "tags": [
        "encodings",
        "driver"
    ],
    "user": "Dan P",
    "time": "Feb 5, 2019 at 9:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Those are 16-bit USB keyboard/Keypad scan codes. Please see\n  <a href=\"http://download.microsoft.com/download/1/6/1/161ba512-40e2-4cc9-843a-923143f3456c/scancode.doc\" rel=\"nofollow\">\n   Keyboard Scan Code Specification\n  </a>\n  for details. Appendix C contains the complete mapping\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Lorem Ipsum",
            "time": "Feb 22, 2015 at 21:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}