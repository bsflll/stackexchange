{
    "title": "how can the processor instruction set be identified solely by examining a binary image? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/4504/how-can-the-processor-instruction-set-be-identified-solely-by-examining-a-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has answers here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/2897/tool-or-data-for-analysis-of-binary-code-to-detect-cpu-architecture\">\n      Tool or data for analysis of binary code to detect CPU architecture\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (6 answers)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2014-06-02 14:58:08Z\">\n      10 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <h1>\n  Constraints:\n </h1>\n <p>\n  I am doing reverse engineering of a binary firmware image of unknown provenance, which operates on a device that is\n  <strong>\n   not\n  </strong>\n  physically accessible to me.  That is, I can't take apart the device, don't have even block diagrams for its function, and have no ability to identify the microprocessor by visual inspection or by asking the creator of the object.  Literally the\n  <em>\n   only\n  </em>\n  thing available is the binary image.\n </p>\n <h1>\n  The Question:\n </h1>\n <p>\n  My question is:\n  <strong>\n   given those constraints\n  </strong>\n  what tools or theoretical approaches could be employed to identify the processor's instruction set by examining the binary?\n </p>\n <h1>\n  Research so far:\n </h1>\n <p>\n  I have, of course, attempted to use disassemblers for various popular ISAs such as ARM, x86 and MIPS.  I have also done a literature search for research papers but haven't turned up anything at all.\n </p>\n <p>\n  Ideally, what I'd like is a tool that would examine the binary and then report something like \"75% probability that this is code for a Renesas M16C.\"\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "machine-code"
    ],
    "user": "Edward",
    "time": "10 years ago",
    "comments": [
        {
            "user": "gandolf",
            "text": "<html><body><span class=\"comment-copy\">\n Those are tough constraints. When you mention \"which operates on a device that is not physically accessible\", does that imply that you know what device it 'can' run on? Is this some embedded device? Could you possibly go with that angle as to what underlying architecture is supported by that device that runs the firmware?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is extremely hard to perform. Given no initial information, you'll have to go through it heuristically using pattern matching & probabilistic approximations.\n </p>\n <p>\n  I've been working for two years on such a tool (I have written tons of helpful tools destined to be used by myself for work & which I plan to share someday, not soon though). It works, but it's not mature enough to be thrown in the jungle. My approach is as follows : detect binary format data structures if possible, disassemble a chunk of binary code by using multiple instruction set encoding (ARM, x86, MIPS, ...) and then heuristically assess (using bads & some other stuff :]) which is closer ...\n </p>\n <p>\n  But interestingly, your question has been asked\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2897/tool-or-data-for-analysis-of-binary-code-to-detect-cpu-architecture\">\n   here\n  </a>\n  before and an interesting approach was given and considered an answer. It uses a similar approach as in biology to identify the phylogenetic distance.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Edward",
                    "text": "<span class=\"comment-copy\">The link to the other question was most interesting.  I don't know why my searches failed to find it.  Thanks!</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">You're welcome. If you want any insight on the question I'm still available. Though I can't share my tools, I'd be glad to help you work on an approach :D</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://recon.cx/2012/schedule/events/236.en.html\">\n   This presentation\n  </a>\n  offers one approach.\n </p>\n <p>\n  Title: Reverse engineering of binary programs for custom virtual machines\n </p>\n <p>\n  Authors: Alexander Chernov and Katerina Troshina\n </p>\n <blockquote>\n  <ul>\n   <li>\n    Initial markup of the binary program. Identification of data\n  sections and code sections. Prior information about the purpose of the\n  program or even some documentation hints may be used. At this step the\n  entry point to the code (or several entry points) are identified.\n   </li>\n   <li>\n    Reconstruction of subroutine structure by identification of\n  the subroutine borders. The subroutine return (RET) instruction is\n  identified. It is naturally to expect that the last instruction in the\n  code segment would be the return instruction. RET instruction normally\n  separates subroutines, so we may expect, that CALL instruction should\n  pass the control right after RET instruction in many (or even most)\n  cases.\n   </li>\n   <li>\n    Identification of the unconditional jump (JMP) instruction\n  using the assumption, that code execution starts at some fixed\n  address.\n   </li>\n   <li>\n    Identification of call instruction. Call instructions are\n  similar to unconditional jumps. By investigation of initialization\n  code several candidates for the CALL instruction can be identified,\n  and the one candidate remained after validation on the whole code.\n   </li>\n   <li>\n    Recovering of absolute and relative jumps and call by looking\n  at the bit encoding of instruction and checking whether it could be an\n  offset relative to the next instruction word. This way relative jumps,\n  calls and candidates for conditional jumps were identified.\n   </li>\n   <li>\n    Identification of memory load and store instruction by\n  observing load-store patterns for memory-memory copy operations.\n   </li>\n   <li>\n    Observations on the virtual machine register structure and\n  register width. How many registers this VM probably has and how wide\n  are they.\n   </li>\n   <li>\n    Observations on the arithmetics and logics operation by\n  pairing with the identified conditional jumps.\n   </li>\n  </ul>\n </blockquote>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Jun 2, 2014 at 14:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}