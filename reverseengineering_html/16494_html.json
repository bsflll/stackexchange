{
    "title": "Understanding the output of Windbg's `dds esp`",
    "link": "https://reverseengineering.stackexchange.com/questions/16494/understanding-the-output-of-windbgs-dds-esp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am not sure if I am understanding the raw output of\n  <code>\n   dds esp\n  </code>\n  or its 64-bit counterpart\n  <code>\n   dqs rsp\n  </code>\n  properly. When I see a list of entries in the stack, I tend to assume that wherever I see return addresses, those are calls made by code that have not returned yet. IOW, stringing them together should form a nice call stack. (let's not bother with\n  <code>\n   k*\n  </code>\n  group of Windbg commands for now.) Is that not the case always?\n </p>\n <p>\n  Because there are some third party extensions, that operate on the\n  <code>\n   esp/rsp\n  </code>\n  output and strings together the entries into something that appear to look like a call stack but I can't seem to match that order with what I see in the source (well, whatever source I have.) There are even entries of functions that have returned long ago.\n </p>\n <p>\n  What am I missing?\n </p>\n <p>\n  <strong>\n   UPDATE:\n  </strong>\n </p>\n <p>\n  OK -- the third party extension I use does say:\n </p>\n <p>\n  <code>\n   Dumps (dps) from the stack limit the base only showing items that include the ! followed by +0x\n  </code>\n </p>\n <p>\n  So, the question then becomes what\n  <em>\n   is\n  </em>\n  that entry? I thought it was the return address of some function that is fixing to make a call into another function?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        "windbg",
        "stack",
        "callstack"
    ],
    "user": "ForeverLearning",
    "time": "Oct 6, 2017 at 16:33",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n i think this may be somewhat difficult to answer without some concrete examples. remember that  we can't see your screen and don't know what \"proper\" stack you expected to see.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ForeverLearning",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky\n <code>\n  blabb\n </code>\n answered my confusion below. Basically I wasn't sure if the addresses resolving to a symbol pointing to a Win32 API were real calls to that function with their return addresses pushed on to the stack or just bogus. I guess there is no way to tell?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n @ForeverLearning you can tell (how does k in windbg or bt in gdb tells it there are heuristics to tell and if symbols are correct the results will be almost always correct and in x64 the unwind information lets anyone decipher the stack correctly)  only caveat is you should know that doing dds esp and blindly assuming every symbol is a return address is wrong  you need to validate every symbol and discard possible bogus symbols\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  dds means dump dwords intrepreting the result as symbols\n </p>\n <p>\n  suppose 0x401234 contains 0x77123456 and \n0x77123456 is resolved as kernel32!CreateFileA\n </p>\n <p>\n  dds 0x401234 will yield kernel32!CreateFileA\n </p>\n <p>\n  if you do dds esp it can return bogus symbols as stack can contain address that may be a constant which might resolve to a symbol\n </p>\n <p>\n  edit\n </p>\n <p>\n  dds/dqs/dps  are meant to be used to look for addresses that resolve to symbol you can use it against stack register esp/rsp/va to look for symbols \nonly keep in mind it can return bogus symbols\n </p>\n <p>\n  for example after import table is resolved you can look what imports were resolved using dps /dds\n </p>\n <pre><code>0:000> dds calc+1000 l6;dps calc+1000 l6\n00461000  760b0468 SHELL32!SHGetSpecialFolderPathW\n00461004  76115708 SHELL32!SHGetFolderPathW\n00461008  7615a129 SHELL32!ShellAboutW\n0046100c  7619dd83 SHELL32!SHCreateDirectory\n00461010  760b1e46 SHELL32!ShellExecuteExW\n00461014  00000000\n00461000  760b0468 SHELL32!SHGetSpecialFolderPathW\n00461004  76115708 SHELL32!SHGetFolderPathW\n00461008  7615a129 SHELL32!ShellAboutW\n0046100c  7619dd83 SHELL32!SHCreateDirectory\n00461010  760b1e46 SHELL32!ShellExecuteExW\n00461014  00000000\n</code></pre>\n <p>\n  if you had used dd here it would be just a bunch of DWORDS\n </p>\n <pre><code>0:000> dd calc+1000 \n00461000  760b0468 76115708 7615a129 7619dd83\n00461010  760b1e46 00000000 \n</code></pre>\n <p>\n  other dereferncing commands inlude\n  <strong>\n   dda / ddu / ddp / dpp\n  </strong>\n </p>\n <pre><code>dda derefences an ascii string \nddu derefernces an unicode string\nddp dereferences  a pointer (only 4 butes or a dword\ndpp dereferences a pointer ( either 4 or 8 bytes based on arch)\n</code></pre>\n <p>\n  suppose you have code like this \nif you compile with using\n  \n\n  vc++\n  <strong>\n   cl /Zi /Od /EHsc /analyze /W4 dds.cpp /link /RELEASE\n  </strong>\n  and execute it\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\nchar *azz = \"forever\";\nchar *bzz = \"learning\";\nchar *czz = \"for\";\nchar *dzz = \"ever\";\nchar *ezz = \"learn\";\nchar *fzz = \"ing\";\nchar *gzz = \"for\";\nchar *hzz = \"eve\";\nchar *f[] = {azz,bzz,czz,dzz,ezz,fzz,gzz,hzz};\nint main () {\n\n    char **moo[] = { &f[0],&f[1],&f[2],&f[3],&f[4],&f[5],&f[6],&f[7] };\n    char *meow[] = {  f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7] };\n    for(int i =0;i <_countof(f);i++)\n    {\n        printf(\"%p %10s\n\" ,moo[i],meow[i]);\n    }\n    return 0;\n}\n</code></pre>\n <p>\n  you will get a result like this\n </p>\n <pre><code>012158A0    forever\n012158A4   learning\n012158A8        for\n012158AC       ever\n012158B0      learn\n012158B4        ing\n012158B8        for\n012158BC        eve\n</code></pre>\n <p>\n  if you set a breakpoint on line 18 \nand do dds you can see how windbg resolves the char** to module!symbol notation\n </p>\n <pre><code>windbg -c \"bp `dds!dds.cpp:18`;g\" dds.exe\n\n\n0:000> bl\n     0 e Disable Clear  013910d0  [c:\\dds.cpp @ 18]     0001 (0001)  0:**** dds!main+0x70\n\n0:000> .lastevent\nLast event: 808.1b8: Hit breakpoint 0      \n0:000> rM0\ndds!main+0x70:\n013910d0 ff743430        push    dword ptr [esp+esi+30h] \nss:0023:002cfa50=013cb1a0\n\n0:000> dds esp l14    \n002cfa20  013d5678 dds!__argc\n002cfa24  013d40f0 dds!_iob+0x90\n002cfa28  00000fa0\n002cfa2c  00000000\n002cfa30  013d48a0 dds!f   <---------\n002cfa34  013d48a4 dds!f+0x4 <------\n002cfa38  013d48a8 dds!f+0x8 <------\n002cfa3c  013d48ac dds!f+0xc <-----\n002cfa40  013d48b0 dds!f+0x10 <-------\n002cfa44  013d48b4 dds!f+0x14 <--------\n002cfa48  013d48b8 dds!f+0x18 <---------\n002cfa4c  013d48bc dds!f+0x1c <---------\n002cfa50  013cb1a0 dds!__xt_z+0x4\n002cfa54  013cb1a8 dds!__xt_z+0xc\n002cfa58  013cb1b4 dds!__xt_z+0x18\n002cfa5c  013cb1b8 dds!__xt_z+0x1c\n002cfa60  013cb1c0 dds!__xt_z+0x24\n002cfa64  013cb1c8 dds!__xt_z+0x2c\n002cfa68  013cb1cc dds!__xt_z+0x30\n002cfa6c  013cb1d0 dds!__xt_z+0x34\n</code></pre>\n <p>\n  if you do dda esp you can see the strings\n </p>\n <pre><code>0:000> dda esp l14\n002cfa20  013d5678 \".\"\n002cfa24  013d40f0 \"...\"\n002cfa28  00000fa0\n002cfa2c  00000000\n002cfa30  013d48a0 \n002cfa34  013d48a4 \n002cfa38  013d48a8 \n002cfa3c  013d48ac \n002cfa40  013d48b0 \n002cfa44  013d48b4 \n002cfa48  013d48b8 \n002cfa4c  013d48bc \n002cfa50  013cb1a0 \"forever\"  <---------------\n002cfa54  013cb1a8 \"learning\" <-----------\n002cfa58  013cb1b4 \"for\" <--------------\n002cfa5c  013cb1b8 \"ever\"\n002cfa60  013cb1c0 \"learn\"\n002cfa64  013cb1c8 \"ing\"\n002cfa68  013cb1cc \"for\"\n002cfa6c  013cb1d0 \"eve\"\n</code></pre>\n <p>\n  if you happen to compile check dpp ddp etc on both 32 bit and 64 bit binary\nfor the same stack\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Oct 9, 2017 at 19:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ForeverLearning",
                    "text": "<span class=\"comment-copy\">Thanks! I understand now. Given this, in what circumstances, do you normally use <code>dds esp</code>?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@ForeverLearning i edited in further info take a look</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The stack can be used to hold all kinds of values, including ones that look like return addresses but aren't.  If stack-frames are omitted, then it becomes very difficult to trace backwards without disassembling the function to see how it stores preserved values such as registers.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Oct 6, 2017 at 16:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ForeverLearning",
                    "text": "<span class=\"comment-copy\">OK. So some of these only <i>look</i> like return addresses. Let's assume FP isn't omitted, then what exactly are these fake return address entries?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">they might be pointers to data within the calling DLL, for example.  If there are code and data mixed together, or data at the front of a section which is common in some Microsoft DLLs, then the result will be almost indistinguishable from each other.</span>",
                    "time": null
                }
            ]
        }
    ]
}