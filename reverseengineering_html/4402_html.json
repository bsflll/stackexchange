{
    "title": "What is operator new(unsigned int)?",
    "link": "https://reverseengineering.stackexchange.com/questions/4402/what-is-operator-newunsigned-int",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the disassembler output (ARM) I see:\n </p>\n <pre><code>    BLX _Znwj\n</code></pre>\n <p>\n  where\n  <code>\n   BLX\n  </code>\n  is ARM procedure call and\n  <code>\n   _Znwj\n  </code>\n  is demangled as\n </p>\n <pre><code>$ c++filt  _Znwj\noperator new(unsigned int)\n</code></pre>\n <p>\n  What does that\n  <code>\n   operator new\n  </code>\n  do? Is it\n  <code>\n   new\n  </code>\n  or\n  <code>\n   new[]\n  </code>\n  ?\nWhat type does it return?\nHow do I explicitly call it from C++, something in the\n  <code>\n   operator+(a,b)\n  </code>\n  style?\n </p>\n <p>\n  (I know that it is possible to define\n  <code>\n   operator new\n  </code>\n  in a class, but this looks a bit different.)\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly",
        "c++",
        "gcc"
    ],
    "user": "18446744073709551615",
    "time": "May 22, 2014 at 9:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A runtime function does not necessarily convert to a C++ function. For example, on a processor that has no floating point hardware, a simple statement like\n </p>\n <pre><code>a=b+c;\n</code></pre>\n <p>\n  with\n  <code>\n   a\n  </code>\n  ,\n  <code>\n   b\n  </code>\n  and\n  <code>\n   c\n  </code>\n  being floats, will probably be converted to a function call that takes\n  <code>\n   b\n  </code>\n  and\n  <code>\n   c\n  </code>\n  as parameters and returns the results. The user is not supposed to call that function directly.\n </p>\n <p>\n  In your case, consider that every\n  <code>\n   new\n  </code>\n  probably maps to something that allocates memory and calls a constructor function, and every\n  <code>\n   new[]\n  </code>\n  allocates memory for several elements and calls a constructor function on each element. The\n  <code>\n   new\n  </code>\n  <code>\n   _Znwj\n  </code>\n  function is the memory allocator used internally by the\n  <code>\n   new\n  </code>\n  operator (at least if you're using\n  <code>\n   gcc\n  </code>\n  , which I assume), and it's not intended to be called directly from C++.\n </p>\n <p>\n  This program:\n </p>\n <pre><code>    class Foo {\n            int bar;\n    };\n\n    int main(void) {\n            Foo *baz=new Foo();\n            Foo *var=new Foo[20];\n    }\n</code></pre>\n <p>\n  Compiles to (try\n  <code>\n   gcc -S\n  </code>\n  ):\n </p>\n <pre><code>    stmfd   sp!, {fp, lr}\n    .save {fp, lr}\n    .setfp fp, sp, #4\n    add     fp, sp, #4\n    .pad #8\n    sub     sp, sp, #8\n    mov     r0, #4                <-- 4 bytes for single variable\n    bl      _Znwj\n    mov     r3, r0                <-- r0 returns the pointer to the allocated memory\n    mov     r2, #0\n    str     r2, [r3]\n    str     r3, [fp, #-8]\n    mov     r0, #80               <-- 80 bytes (20*4) for array\n    bl      _Znaj\n    mov     r3, r0                <-- r0 returns the pointer to the allocated memory\n    str     r3, [fp, #-12]\n    mov     r3, #0\n    mov     r0, r3\n    sub     sp, fp, #4\n    @ sp needed\n    ldmfd   sp!, {fp, lr}\n    bx      lr\n</code></pre>\n <p>\n  So, you see that the\n  <code>\n   _Znwj\n  </code>\n  resp.\n  <code>\n   _Znaj\n  </code>\n  are the allocator functions for a single class resp. an array of classes, both of them take the number of bytes required as parameter, and both of them return a pointer to the allocated memory as result.\n </p>\n <p>\n  To answer your questions:\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     What does that operator\n     <code>\n      new\n     </code>\n     do ?\n    </strong>\n   </p>\n   <p>\n    It allocates memory for a new class instance.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Is it\n     <code>\n      new\n     </code>\n     or\n     <code>\n      new[]\n     </code>\n     ?\n    </strong>\n   </p>\n   <p>\n    <code>\n     _Znwj\n    </code>\n    is\n    <code>\n     new\n    </code>\n    , and\n    <code>\n     _Znaj\n    </code>\n    is\n    <code>\n     new[]\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     What type does it return ?\n    </strong>\n   </p>\n   <p>\n    It returns the address of the newly allocated memory block. In C++, the closest match to resemble that would be a\n    <code>\n     void *\n    </code>\n    , but note it's supposed to point to a class structure.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     How do I explicitly call it from C++, something in the\n     <code>\n      operator+(a,b)\n     </code>\n     style ?\n    </strong>\n   </p>\n   <p>\n    You're not supposed to do that. You use\n    <code>\n     new\n    </code>\n    or\n    <code>\n     new[]\n    </code>\n    . I assume the makers of\n    <code>\n     gcc\n    </code>\n    explicitly used a function name that cannot, normally, be called from a C++ program without a syntax error due to the name conflict.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "18446744073709551615",
                    "text": "<span class=\"comment-copy\">In fact, <code>void*x=operator new(4);</code> compiles and generates the same code as <code>int*x=new(int);</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is called \"placement\n  <code>\n   new\n  </code>\n  \" and was introduced in C++03.  The way it works is that one can have, say a C++ class around a set of hardware registers and then use\n  <em>\n   placement\n   <code>\n    new\n   </code>\n  </em>\n  to put the class exactly atop those hardware registers.  For example, if a hardware-based hardware Random Number Generator (RNG) is defined using 32-bit Control Register, Status Register and Data Register all starting at offset 0x50000600, you could define a class:\n </p>\n <pre><code>class RNG_class\n{\nprivate:\n  volatile uint32_t CR;  // set to 1 to enable\n  volatile uint32_t SR;  // low bit set when next num available\n  volatile uint32_t DR:\npublic;\n  RNG_class() : CR(1) {} \n  uint32_t next() { while (SR&1 == 0); return DR; }\n};\n</code></pre>\n <p>\n  Elsewhere, then one can instantiate this class as\n </p>\n <pre><code>RNG_class RNG* = new(0x50000600) RNG_class();\n</code></pre>\n <p>\n  And one can use it as:\n </p>\n <pre><code>r = RNG->next();\n</code></pre>\n <p>\n  See\n  <a href=\"https://stackoverflow.com/questions/222557/what-uses-are-there-for-placement-new\">\n   this question\n  </a>\n  for more information.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}