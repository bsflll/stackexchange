{
    "title": "How to get opcodes for assembly using ppc processor (IDAPython)",
    "link": "https://reverseengineering.stackexchange.com/questions/8914/how-to-get-opcodes-for-assembly-using-ppc-processor-idapython",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In IDAPython, you can obtain the corresponding opcodes for a assembly instruction using the\n  <a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py#651\" rel=\"nofollow\">\n   Assemble(ea, line)\n  </a>\n  function.\n </p>\n <hr/>\n <p>\n  Here is an example using a PE-file / x86 processor type:\n </p>\n <pre><code>Python>Assemble(FirstSeg(), 'asdf')\nInvalid mnemonic -> OK\n(False, 'Assembler failed: asdf')\n</code></pre>\n <p>\n  As we can see, the\n  <code>\n   Assemble\n  </code>\n  call returns\n  <code>\n   False\n  </code>\n  and prints a error message for a invalid mnemonic when using an incorrect assembly instruction like\n  <code>\n   asdf\n  </code>\n  .\n </p>\n <p>\n  With a valid assembly instruction, the correct opcode is returned:\n </p>\n <pre><code>Python>Assemble(FirstSeg(), 'ret')\n(True, '\\xc3')\n</code></pre>\n <hr/>\n <p>\n  Here is the same function using a PPC-ELF/ppc processor type:\n </p>\n <pre><code>Python>Assemble(FirstSeg(), 'asdf')\n(True, '\\x00')\n</code></pre>\n <p>\n  As we can see, no error message is printed and a\n  <code>\n   \\x00\n  </code>\n  is returned as resulting opcode.\n </p>\n <p>\n  The valid\n  <code>\n   sc\n  </code>\n  instruction and any other valid ppc instructions return the same (wrong) value of\n  <code>\n   \\x00\n  </code>\n  :\n </p>\n <pre><code>Python>Assemble(FirstSeg(), 'sc')\n(True, '\\x00')\n</code></pre>\n <p>\n  How can I get IDAPython's\n  <code>\n   Assemble(ea, line)\n  </code>\n  to return the proper opcodes when using a PPC-ELF/ppc processor type?\n </p>\n <p>\n  This is the trace the the function takes:\n </p>\n <ol>\n  <li>\n   <a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py#651\" rel=\"nofollow\">\n    Assemble(ea, line)\n   </a>\n  </li>\n  <li>\n   <a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py#626\" rel=\"nofollow\">\n    _Assemble(ea, line)\n   </a>\n  </li>\n  <li>\n   <a href=\"https://code.google.com/p/idapython/source/browse/trunk/swig/idp.i#68\" rel=\"nofollow\">\n    idaapi.AssembleLine(ea, cs, ip, use32, line)\n   </a>\n  </li>\n </ol>\n <p>\n  And a usage example of Assemble(), if it wasn't clear:\n  <a href=\"https://code.google.com/p/idapython/source/browse/trunk/Scripts/FindInstructions.py\" rel=\"nofollow\">\n   https://code.google.com/p/idapython/source/browse/trunk/Scripts/FindInstructions.py\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "assembly",
        "idapython"
    ],
    "user": "Zulakis",
    "time": "Dec 16, 2015 at 17:43",
    "comments": [
        {
            "user": "devttys0",
            "text": "<html><body><span class=\"comment-copy\">\n IDA doesn't support assembly for all architectures: \"Currently, only the IBM PC processors provide an assembler\" (from\n <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/529.shtml\" rel=\"nofollow noreferrer\">\n  hex-rays.com/products/ida/support/idadoc/529.shtml\n </a>\n , though that is admittedly old). Are you sure PPC supports this?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Zulakis",
            "text": "<html><body><span class=\"comment-copy\">\n @devttys0 Oh, this may actually be the reason. I just assumed that assembling would just work, as does disassembling. Is there a technical reason why it wouldn't? Isn't it just the reverse of disassembling, which IDA is already doing? The docs you linked say that\n <code>\n  plugin writers can extend or totally replace the built-in assembler by writing their own\n </code>\n . Adding support for PPC this way would probably take alot of effort, wouldn't it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "devttys0",
            "text": "<html><body><span class=\"comment-copy\">\n It's up to the developer of the disassembler module to implement an assembler method. Most don't since that's more work and for something that's rarely used. I've written disassembler modules which are a bit of work, but I imagine just overriding the assembler method wouldn't be too much work (disclaimer: I've never done it).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "<html><body><span class=\"comment-copy\">\n That said, if you only need it for IDAPython, wrapping GNU's\n <code>\n  as\n </code>\n (or radare2's\n <code>\n  rasm2\n </code>\n ) to and creating an equivalent\n <code>\n  Assemble\n </code>\n function should not be that hard.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}