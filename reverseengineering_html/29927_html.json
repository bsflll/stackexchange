{
    "title": "ARM/THUMB assembly mismatch between binaries causes crash",
    "link": "https://reverseengineering.stackexchange.com/questions/29927/arm-thumb-assembly-mismatch-between-binaries-causes-crash",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to play around with an app for Android and every time I try to call a function (\n  <code>\n   lua_gettop()\n  </code>\n  from the Lua 5.1 library) from the app's address space, it hits me with ILL_ILLOPC.\n </p>\n <p>\n  I made sure to rebase the address and the function is correct as I read the opcodes from the location to make sure I wasn't calling the wrong thing. I tried to call\n  <code>\n   gettop()\n  </code>\n  by using another function that is only designed to call that, and it worked, so I remade\n  <code>\n   gettop()\n  </code>\n  and built it with my current tools and put both libraries in IDA to compare the instructions.\n </p>\n <p>\n  To my surprise they were completely different (which makes me think that is why my trying to call that crashes, it doesn't recognise the instructions??)\n </p>\n <p>\n  Here are the instructions\n </p>\n <pre><code>.text:0172D8F8                 LDRD.W          R1, R0, [R0,#0xC]\n.text:0172D8FC                 SUBS            R0, R1, R0\n.text:0172D8FE                 ASRS            R0, R0, #4\n.text:0172D900                 BX              LR\n</code></pre>\n <p>\n  And my library's version of the function:\n </p>\n <pre><code>.text:000BF614                 LDR             R1, [R0,#0xC]\n.text:000BF618                 LDR             R0, [R0,#0x10]\n.text:000BF61C                 SUB             R0, R1, R0\n.text:000BF620                 MOV             R0, R0,LSR#4\n.text:000BF624                 BX              LR\n</code></pre>\n <p>\n  I tried to find out how to make it compile to the same instruction set to no luck, I assume this to be the problem, but I'm ready to be corrected.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "155",
    "tags": [
        "assembly",
        "android",
        "arm",
        "thumb2"
    ],
    "user": "BitFlow",
    "time": "Jan 27, 2022 at 14:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The difference is that the first set of instructions are\n  <code>\n   THUMB2\n  </code>\n  instructions whereas your library's version is using\n  <code>\n   ARM\n  </code>\n  instructions.\n </p>\n <p>\n  (The giveaway is in the instruction lengths - mostly 2 sometimes 4 for\n  <code>\n   THUMB/THUMB2\n  </code>\n  and always 4 for\n  <code>\n   ARM\n  </code>\n  .)\n </p>\n <p>\n  You will need to compile your library to use\n  <code>\n   THUMB\n  </code>\n  code (check your compiler documentation) or deal with the\n  <code>\n   ARM/THUMB state\n  </code>\n  interworking yourself.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Feb 1, 2022 at 20:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}