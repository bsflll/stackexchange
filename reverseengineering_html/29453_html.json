{
    "title": "Does psVar[-6] refer to 6*sizeof(psVar) bytes before psVar? Can you avoid the negative index?",
    "link": "https://reverseengineering.stackexchange.com/questions/29453/does-psvar-6-refer-to-6sizeofpsvar-bytes-before-psvar-can-you-avoid-the-ne",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In this decompiled code, does\n  <code>\n   psVar8[-6]\n  </code>\n  refer to\n  <code>\n   6*sizeof(psVar8) == 12\n  </code>\n  bytes before\n  <code>\n   psVar8\n  </code>\n  ?\n </p>\n <pre><code>psVar8 = (short *)(&DAT_1412345b4 + named_index * 0x20);\ndo {\n  if (psVar8[-6] == 0) break;\n  // ...\n} while (lVar10 < 6);\n</code></pre>\n <p>\n  It would seem more intuitive to me if the position of\n  <code>\n   psVar8\n  </code>\n  was earlier to avoid the negative index. Is there a way to change this in the decompiled code, or a reason not to?\n </p>\n <p>\n  I'm attaching the entire loop in case that is important to the question:\n </p>\n <pre><code>    do {\n      if (psVar8[-6] == 0) break;\n      if (psVar8[-6] == 4) {\n        named_variable = 0;\n        if (0 < *psVar8) {\n          named_variable = (int)*psVar8;\n        }\n        iVar4 = 0x1d;\n        if (named_variable < 0x1d) {\n          iVar4 = named_variable;\n        }\n        *(undefined2 *)(&DAT_145678900 + (longlong)iVar4 * 2) = 1;\n      }\n      lVar10 += 1;\n      psVar8 = psVar8 + 1;\n    } while (lVar10 < 6);\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "86",
    "tags": [
        "c",
        "ghidra",
        "pointer"
    ],
    "user": "Anna",
    "time": "Oct 25, 2021 at 10:13",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n no sizeof() does not come in play it is an index into an array\n <a href=\"https://stackoverflow.com/questions/8133804/negative-array-index-in-c\">\n  look at David Heffermans Answer in this query\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think you are running into a case of \"shifted pointers\". For various reasons the compiler might generate code where a pointer to the middle of a struct is returned. There is a\n  <a href=\"https://github.com/NationalSecurityAgency/ghidra/pull/2189\" rel=\"nofollow noreferrer\">\n   Ghidra PR\n  </a>\n  for this, but this isn't merged yet and still has various issues, IDA discusses this feature\n  <a href=\"https://hex-rays.com/products/ida/support/idadoc/1695.shtml\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Florian Magin",
            "time": "Oct 28, 2021 at 8:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}