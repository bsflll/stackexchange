{
    "title": "How was the Zero Flag implemented on Z80 ALU?",
    "link": "https://reverseengineering.stackexchange.com/questions/8755/how-was-the-zero-flag-implemented-on-z80-alu",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Z80 was a popular 8-bit processor with a 4-bit ALU.\n </p>\n <p>\n  <img alt=\"Z80 ALU\" src=\"https://i.sstatic.net/5tueN.png\"/>\n </p>\n <p>\n  Implementing a zero flag for a register should be straight forward, it would be a logical\n  <code>\n   NOR\n  </code>\n  of all the bits on the register.\n </p>\n <p>\n  <img alt=\"Gigantic NOR\" src=\"https://i.sstatic.net/RG7f4.png\"/>\n </p>\n <p>\n  Something like that would work for a small number of inputs. As for a 64-bit processor you cannot make one gigantic\n  <code>\n   NOR\n  </code>\n  gate with 64 inputs. The fan-in would be too high. 8 transistors would be in series. The circuit capacitance would be high thus slowing down everything else.\n </p>\n <p>\n  I can see some other options.\n </p>\n <ul>\n  <li>\n   The zero flag could be generated directly from the 8-bit result using 2 level logic.\n  </li>\n </ul>\n <p>\n  <img alt=\"two level logic\" src=\"https://i.sstatic.net/tLlMR.png\"/>\n  <img alt=\"two level logic\" src=\"https://i.sstatic.net/OOodj.png\"/>\n </p>\n <ul>\n  <li>\n   The zero flag could be generated directly from the 8-bit result using 3 level logic.\n  </li>\n </ul>\n <p>\n  <img alt=\"three level logic\" src=\"https://i.sstatic.net/2xBFt.png\"/>\n </p>\n <ul>\n  <li>\n   The zero flag could be generated from each nibble and then put together, like if there was a \"half\"-zero flag. The result for the lower would be saved using a flip-flop while waiting for the high nibble result to be calculated.\n  </li>\n </ul>\n <p>\n  <img alt=\"Nibble\" src=\"https://i.sstatic.net/anAW5.png\"/>\n </p>\n <p>\n  <a href=\"http://www.righto.com/2013/09/the-z-80-has-4-bit-alu-heres-how-it.html\" rel=\"noreferrer\">\n   Ken Shirriff\n  </a>\n  wrote a nice article about reverse engineering the Z80 ALU. However when it comes to the zero flag he states:\n </p>\n <blockquote>\n  <p>\n   Not shown in the block diagram are the simple circuits to compute parity,\n   <strong>\n    test for zero\n   </strong>\n   , and check if a 4-bit value is less than 10. These values are used to set the condition flags.\n  </p>\n </blockquote>\n <p>\n  So, although they are simple circuits I would like to know exactly how they were implemented and if they used any of the implementations proposed above or something else completely different.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "1k",
    "tags": [
        "hardware"
    ],
    "user": "GabrielOshiro",
    "time": "Apr 27, 2015 at 20:25",
    "comments": [
        {
            "user": "caskey",
            "text": "<html><body><span class=\"comment-copy\">\n Your assertion that the \"fan in would be too high\" has hidden assumptions that may not be valid.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n Please ask instead at\n <a href=\"http://electronics.stackexchange.com/\">\n  electronics.stackexchange.com\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "GabrielOshiro",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner The question is about reverse engineering. I want to know exactly how something was implemented. I have no doubts on how the electronics behind it work.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Spektre",
            "text": "<html><body><span class=\"comment-copy\">\n @GabrielOshiro nice images but you forget the simplest one: wired or + single negator. The zero flag can be located anywhere (ALU,Register file,any of the data BUS,...)  and also would need some gating because not all operations change ZF. The truth can be found only by examinaning the DIE (which is time consuming) or ask someone that created the Z80 circuitry/die masks inside Zilog Company ...or the clones copies like U880A ...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n For reference,\n <a href=\"http://electronics.stackexchange.com/questions/167395/how-was-the-zero-flag-implemented-on-z80-alu\">\n  here's the question on the Electrical Engineering Stack Exchange\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Well if you want to know how it was done exactly\n  </strong>\n </p>\n <p>\n  Then download the\n  <strong>\n   Z80 die shot\n  </strong>\n  of model you want to investigate, crop the\n  <strong>\n   ALU\n  </strong>\n  part and identify all the gates you can until you dig to\n  <strong>\n   Zero flag\n  </strong>\n  your self (sorry for indirect answer).\n </p>\n <p>\n  <strong>\n   Here my Z80 ALU post processed die shot\n  </strong>\n </p>\n <p>\n  <img alt=\"Z80 ALU\" src=\"https://i.sstatic.net/rkIpx.png\"/>\n </p>\n <ul>\n  <li>\n   white - metal\n  </li>\n  <li>\n   green - poly-Si\n  </li>\n  <li>\n   red   - dopped-Si (diffusion)\n  </li>\n  <li>\n   Gray  - conductive joints between layers\n  </li>\n </ul>\n <p>\n  Try to identify all gates and buses you can (and mark them to the image)\n </p>\n <p>\n  <img alt=\"Z80 ALU labeled\" src=\"https://i.sstatic.net/ORk25.png\"/>\n </p>\n <p>\n  When found familiar structure like\n  <strong>\n   Wire OR, (N)OR\n  </strong>\n  cascade, ... then you will know for sure. Just try to find the basic components like:\n </p>\n <p>\n  <img alt=\"Components\" src=\"https://i.sstatic.net/yZf5a.png\"/>\n </p>\n <p>\n  form the circuit schematics and make some sense of it.\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "Spektre",
            "time": "Jun 8, 2016 at 11:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason C",
                    "text": "<span class=\"comment-copy\">Of course Spektre is telling you <i>how</i> to reverse engineer it, you <i>did</i> ask on a site called Reverse Engineering! :)</span>",
                    "time": null
                },
                {
                    "user": "GabrielOshiro",
                    "text": "<span class=\"comment-copy\">@Spektre Thanks for you answer! You got the reward :P</span>",
                    "time": null
                }
            ]
        }
    ]
}