{
    "title": "generate code execution/cpu time flame-graph of library DLL (Noob question)",
    "link": "https://reverseengineering.stackexchange.com/questions/31150/generate-code-execution-cpu-time-flame-graph-of-library-dll-noob-question",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a library DLL which I'm trying to analyze, and I have a basic understanding of its function and behavior (and can modify some input to affect how long certain operations will take to execute/how often it will execute), but I'm not sure where exactly in the DLL the functions which I know exist are located, and finding them by following program flow manually in a disassembler is non-trivial. It would be very helpful to be able to have some sort of \"flame-graph\" code coverage tool which would show me how many times a given line of assembly has been executed. I don't need function calls or anything like that, just the raw number of executions per line (or CPU time per line) from some kind of sampling.\n </p>\n <p>\n  Additionally, as a library DLL, it has to be called from another process, and in this case must be called by a very specific program.\n </p>\n <p>\n  Is this possible with a DLL that doesn't have any debugging symbols attached? Or am I asking for a holy grail?\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "74",
    "tags": [
        "windows",
        "dll"
    ],
    "user": "Matthew Gomes",
    "time": "Nov 18, 2022 at 5:06",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Coverage is typically measured on instrumented binaries. But an emulator (e.g. Unicorn Engine) or symbolic execution via Angr could work here. The more difficult part is that this all happens from another process. Code lifting may be a better approach then, provided the DLL doesn't implement any protection methods or checks its integrity (e.g. code-signing). And yet another approach could be a combination of the above with a DLL placement attack and a proxy DLL\n <i>\n  you offer\n </i>\n which provides the same exports but forwards them to the\n <i>\n  real\n </i>\n DLL. Question is a bit vague.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  not sure what you are looking for\n  \n\n  if you want to concentrate on one single line of assembly\n  \n\n  you can employ a skip number of passes with a high count\n </p>\n <p>\n  for example with windbg you could do bp ntdll!memcmp 5000 and hit g to run the binary\n </p>\n <p>\n  which would either break if it has been hit 0x5000 times or\n </p>\n <p>\n  will show how many times it has been hit if you display the status of break point with\n  <strong>\n   bl\n  </strong>\n </p>\n <p>\n  see a demo below\n </p>\n <pre><code>C:\\WINDOWS\\system32>cdb cdb\n\nMicrosoft (R) Windows Debugger Version 10.0.19041.685 AMD64\nirrelevent output snipped setting a breakpoint as above\n0:000> bp ntdll!memcmp 5000\n0:000> g\nagain irrelevent output snipped \nntdll!NtTerminateProcess+0x14:\n00007ffe`5f94d644 c3              ret\n\nthe process has finished running but no break \nso memcmp must have been hit a few times but less than the \nthreshold of 0x5000 hits\nlets check how many times it has been hit      \n\n0:000> bl\n 0 e 00007ffe`5f940100     4f45 (5000)  0:**** ntdll!memcmp  <<<<<<<<< \nmemcmp a single assembly line has been hit **(0x500- 0x4f45)** about 186 \ntimes between start and end of process \n0:000>\n</code></pre>\n <p>\n  breaking on the last but one hit on memcmp\n </p>\n <pre><code>0:000> bp ntdll!memcmp 0xba\n0:000> g\nBreakpoint 0 hit\nntdll!memcmp:\n00007ffe`5f940100 482bd1          sub     rdx,rcx\n0:000> bl\n 0 e 00007ffe`5f940100     0001 (00ba)  0:**** ntdll!memcmp  < on hit left to reach threahhold\n0:000>\n</code></pre>\n <p>\n  or you can count like this employing a script\n </p>\n <pre><code>0:000> r $t1=0\n0:000> bp ntdll!memcmp \"r $t1=@$t1+1;?@$t1;gc\"\n0:000> g\nEvaluate expression: 1 = 00000000`00000001\nEvaluate expression: 2 = 00000000`00000002\nEvaluate expression: 3 = 00000000`00000003\nEvaluate expression: 4 = 00000000`00000004\nEvaluate expression: 5 = 00000000`00000005\n\nsniped irrelevent output\n\nModLoad: 00007ffe`5e230000 00007ffe`5e2dd000   C:\\WINDOWS\\System32\\shcore.dll\nEvaluate expression: 182 = 00000000`000000b6\nEvaluate expression: 183 = 00000000`000000b7\nEvaluate expression: 184 = 00000000`000000b8\nEvaluate expression: 185 = 00000000`000000b9\nEvaluate expression: 186 = 00000000`000000ba\nEvaluate expression: 187 = 00000000`000000bb\n\nMicrosoft (R) Windows Debugger Version 10.0.19041.685 AMD64\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nFailed to open \\\\.\\com1\nKernel debugger failed initialization, Win32 error 0n2\n    \"The system cannot find the file specified.\"\nDebuggee initialization failed, Win32 error 0n2\nThe system cannot find the file specified.\nntdll!NtTerminateProcess+0x14:\n00007ffe`5f94d644 c3              ret\n0:000>\n</code></pre>\n <p>\n  btw fwiw the old ollydbg32 bit debugger had a feature called hittrace that could count how many times each line was executed not sure if either ollydbg64 or its 64bit competitor x64dbg implements such feature\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 18, 2022 at 13:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Matthew Gomes",
                    "text": "<span class=\"comment-copy\">\"ollydbg32 bit debugger had a feature called  hittrace that could count how many times each line was executed\" - that sounds like what I'm looking for. I'll look more into it- I found something called Cryptoshark <a href=\"https://github.com/frida/cryptoshark\" rel=\"nofollow noreferrer\">github.com/frida/cryptoshark</a> which may have the functionality I'm looking for. It seems a bit abandoned, though.</span>",
                    "time": null
                }
            ]
        }
    ]
}