{
    "title": "main function not found in GCC compiled code",
    "link": "https://reverseengineering.stackexchange.com/questions/26870/main-function-not-found-in-gcc-compiled-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to learn reverse engineering using Radare2.\nFor this I compiled a hello world program with GCC on Ubuntu (version: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0).\n </p>\n <pre><code>#include <stdio.h>\nint main() {\n        printf(\"Hello, world!\");\n        return 0;\n}\n</code></pre>\n <p>\n  Compile it:\n </p>\n <pre><code>gcc -w hello_world.c -o hello_world\n</code></pre>\n <p>\n  However, when I decompile it using Radare2:\n </p>\n <pre><code>r2 hello_world\n[0x00001060]> aaa\n[Cannot find function at 0x00001060 sym. and entry0 (aa)\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Check for objc references\n[x] Check for vtables\n[x] Type matching analysis for all functions (aaft)\n[x] Propagate noreturn information\n[x] Use -AA or aaaa to perform additional experimental analysis.\n[0x00001060]> afl\n0x00001090    4 41   -> 34   sym.deregister_tm_clones\n0x000010c0    4 57   -> 51   sym.register_tm_clones\n[0x00001060]> \n</code></pre>\n <p>\n  The main function does not show up.\nSearching for it specifically with pdf @main also does not work.\n </p>\n <p>\n  But the program runs fine, and other information I get using Radare (iI command for example) looks normal.\n </p>\n <p>\n  <strong>\n   Can anyone explain to me why I can't get the main function to show?\n  </strong>\n </p>\n <p>\n  Edit:\nI tried the same thing on Ubuntu 18.04 LTS and I get a different output, this time with the main function\n </p>\n <pre><code>[0x7f1465cb4090]> afl\n0x55595d978000    2 64           sym.imp.__libc_start_main\n0x55595d9784f0    3 23           sym._init\n0x55595d978520    1 6            sym.imp.printf\n0x55595d978530    1 6            sub.__cxa_finalize_248_530\n0x55595d978540    1 43           entry0\n0x55595d978570    4 50   -> 40   sym.deregister_tm_clones\n0x55595d9785b0    4 66   -> 57   sym.register_tm_clones\n0x55595d978600    4 49           sym.__do_global_dtors_aux\n0x55595d978640    1 10           entry1.init\n0x55595d97864a    1 28           sym.main\n0x55595d978670    4 101          sym.__libc_csu_init\n0x55595d9786e0    1 2            sym.__libc_csu_fini\n0x55595d9786e4    1 9            sym._fini\n0x55595db78fe0    1 1020         reloc.__libc_start_main_224\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "radare2",
        "functions",
        "gcc"
    ],
    "user": "martsc1",
    "time": "Jan 26, 2021 at 13:09",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n any specific compile flags? When I repro your case I get\n <code>\n  main\n </code>\n and everything else as expected.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "martsc1",
            "text": "<html><body><span class=\"comment-copy\">\n I used GCC -w hello_world.c -o hello_world\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n It should compile with symbols by default. There should be an entry in the symbol table for main()\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @martsc1 well, GCC isn't typically called with a binary called\n <code>\n  GCC\n </code>\n , but instead with an all-lowercase\n <code>\n  gcc\n </code>\n as driver. So do you mind telling us what's going on behind the scenes here? If you're on Bash, for example, provide the output of\n <code>\n  type GCC\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "martsc1",
            "text": "<html><body><span class=\"comment-copy\">\n I don't know why I typed that command in caps, I used it in lower case 'gcc  -w hello_world.c -o hello_world'. Sorry for the confusion! I also tried using the debug flags -g,-Og,-g3 but none of them solved the issue.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is because of your old\n  <code>\n   radare2\n  </code>\n  installation. If you installed\n  <code>\n   radare2\n  </code>\n  via\n  <code>\n   apt\n  </code>\n  its very old.\nBuild it from latest source instead and you can look at different symbols.\n </p>\n <p>\n  I tried to replicate your problem in an Ubuntu 20.04 docker container\n </p>\n <pre><code>root@4a6deaf68cd8:/tmp# r2 -v\nradare2 4.2.1 0 @ linux-x86-64 git.4.2.1\ncommit: unknown build: \nroot@4a6deaf68cd8:/tmp# r2 -q -c \"aaa; afl\" hello_world\nCannot find function at 0x00001060\n0x00001090    4 41   -> 34   sym.deregister_tm_clones\n0x000010c0    4 57   -> 51   sym.register_tm_clones\nroot@4a6deaf68cd8:/tmp# /root/bin/r2 -v\nradare2 5.1.0 25622 @ linux-x86-64 git.5.1.0\ncommit: 0939e57001c9eeda296d2699c60b967b5927e637 build: 2021-01-26__20:17:25\nroot@4a6deaf68cd8:/tmp# /root/bin/r2 -q -c \"aaa; afl\" hello_world\nWarning: run r2 with -e io.cache=true to fix relocations in disassembly\n0x00001060    1 46           entry0\n0x00001090    4 41   -> 34   sym.deregister_tm_clones\n0x000010c0    4 57   -> 51   sym.register_tm_clones\n0x00001100    5 57   -> 54   sym.__do_global_dtors_aux\n0x00001040    1 11           sym..plt.got\n0x00001140    1 9            entry.init0\n0x00001000    3 27           sym._init\n0x000011e0    1 5            sym.__libc_csu_fini\n0x000011e8    1 13           sym._fini\n0x00001170    4 101          sym.__libc_csu_init\n0x00001149    1 32           main\n0x00001050    1 11           sym.imp.printf\nroot@4a6deaf68cd8:/tmp# \n</code></pre>\n <p>\n  I used the\n  <code>\n   sys/user.sh\n  </code>\n  in r2's repo to build from source and install new\n  <code>\n   r2\n  </code>\n  at\n  <code>\n   /root/bin/r2\n  </code>\n </p>\n <p>\n  In the output - the latest radare2 was able to figure out main and some other functions while the older one could not.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Jan 26, 2021 at 20:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Yeah, always install from git ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}