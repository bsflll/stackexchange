{
    "title": "Modifying a single .class file in an obfuscated JAR",
    "link": "https://reverseengineering.stackexchange.com/questions/32256/modifying-a-single-class-file-in-an-obfuscated-jar",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i am trying to modify a jar that is partly obfuscated (and what i want to modify is in this part).\nI can use Recaf, it will decompile it well and I can save modifications and export program without issues,  but doing that it recompiles the whole jar and not only the modified file, and that causes issues.\nIf I open the jar with WinRar, those class appears as empty folders due to obfuscation.\n </p>\n <p>\n  So is there a way to modify only a single .class file without needing to recompile everything ? Even by editing bytecode, it's not an issue\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "295",
    "tags": [
        "unpacking",
        "java",
        "obfuscation",
        "binary-editing",
        "jar"
    ],
    "user": "FluffyMuffin47",
    "time": "Sep 4, 2023 at 14:22",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Have you tried to copy the modified class from the Recaf modified jar into the original jar?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Col-E",
            "text": "<html><body><span class=\"comment-copy\">\n He can't do that because of the ZIP obfuscation trick which makes class files appear as directories. It prevents extraction and replacement in almost all common ZIP tools.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I made Recaf.\n </p>\n <blockquote>\n  <p>\n   I can use Recaf, it will decompile it well and I can save modifications and export program without issues.\n  </p>\n </blockquote>\n <p>\n  The title and later description seems to imply the code is obfuscated. Please do not rely on recompilation features when dealing with obfuscated code. It rarely ever works and often has unintended side-effects.\n </p>\n <p>\n  <em>\n   Use the assembler for situations like this\n  </em>\n  .\n </p>\n <blockquote>\n  <p>\n   Even by editing bytecode, it's not an issue\n  </p>\n </blockquote>\n <p>\n  Recaf self-advertises itself as a bytecode editor, and using it is explained in the documentation. Did you read the documentation?\nIt prompts you to do so when first running the application.\n </p>\n <blockquote>\n  <p>\n   but doing that it recompiles the whole jar\n  </p>\n </blockquote>\n <p>\n  No it does not. When you make changes to a class, only that class gets updated within the in-memory model. When you export your changes Recaf will repackage the contents of the model into a JAR file again.\n </p>\n <p>\n  If you are using the current main releases 2.X, the JAR will be written with compression enabled for all entries.\n </p>\n <p>\n  If you are using the preview 3.X releases then you can toggle the use of compression in the config window. Upcoming work supports matching the compression settings per-entry of what they originally were marked as.\n </p>\n <blockquote>\n  <p>\n   If I open the jar with WinRar, those class appears as empty folders due to obfuscation.\n  </p>\n </blockquote>\n <p>\n  Assuming you mean the original input JAR here, this is because the JVM allows class files in zip files to end with a\n  <code>\n   /\n  </code>\n  character. Most tools will thus interpret it as a directory.\n </p>\n <p>\n  Using a standard ZIP archive tool to work around this is going to be tricky unless you normalize all the paths first. If this is the only ZIP file trick in the sample you can use the following to patch the JAR file:\n </p>\n <pre><code>File output = new File(\"output.jar\");\nFile input = new File(\"input.jar\");\ntry(ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(output))) {\n    try (ZipFile zipIn = new ZipFile(input)) {\n        // Copy zip entries of input to output\n        Enumeration<? extends ZipEntry> entries = zipIn.entries();\n        while (entries.hasMoreElements()) {\n            ZipEntry entry = entries.nextElement();\n            String entryName = entry.getName();\n            if (entryName.endsWith(\".class/\")) {\n                // Fix the zip entry names of classes ending with slashes\n                ByteArrayOutputStream tmp = new ByteArrayOutputStream();\n                zipIn.getInputStream(entry).transferTo(tmp);\n                \n                // New blank entry with the fixed name, then write the original class data\n                ZipEntry normalizedClassEntry = new ZipEntry(entryName.substring(0, entryName.length() - 1));\n                zos.putNextEntry(normalizedClassEntry);\n                zos.write(tmp.toByteArray());\n                zos.closeEntry();\n            } else if (!entry.isDirectory()) {\n                // Copy any non-directory content as-is\n                ByteArrayOutputStream tmp = new ByteArrayOutputStream();\n                zipIn.getInputStream(entry).transferTo(tmp);\n                zos.putNextEntry(entry);\n                zos.write(tmp.toByteArray());\n                zos.closeEntry();\n            }\n        }\n    } finally {\n        zos.finish();\n        zos.close();\n    }\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Col-E",
            "time": "Sep 15, 2023 at 9:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}