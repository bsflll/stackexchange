{
    "title": "How can I walk up along the AST using IDAPython decompiler API?",
    "link": "https://reverseengineering.stackexchange.com/questions/14464/how-can-i-walk-up-along-the-ast-using-idapython-decompiler-api",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using IDAPython for my analysis. In IDA v6.95, the header file\n  <code>\n   plugins/hexrays_sdk/include/hexrays.hpp\n  </code>\n  defines the following:\n </p>\n <pre><code>typedef ctree_items_t parents_t;\n\nparents_t parents;      ///< Vector of parents of the current item\n\n/// Get parent of the current item as an expression\ncexpr_t *parent_expr(void) { return (cexpr_t *)parents.back(); }\n\n// Get parent of the current item as a statement\ncinsn_t *parent_insn(void) { return (cinsn_t *)parents.back(); }\n</code></pre>\n <p>\n  For my analysis, I am trying to walk up along the parents from a given\n  <code>\n   cexpr_t\n  </code>\n  node.\n  <code>\n   parent_expr()\n  </code>\n  and\n  <code>\n   parent_insn()\n  </code>\n  API gives me back the immediate parent, not the entire chain from the child to root of the AST.\n </p>\n <p>\n  As an alternative, I tried to traverse the\n  <code>\n   parents\n  </code>\n  vector once I visit the given\n  <code>\n   cexpr_t\n  </code>\n  node.\n </p>\n <pre><code>for parent in reversed(self.parents):\n  print \"|==> %s [%d]\" % (hex(parent.ea), parent.op)\n</code></pre>\n <p>\n  The problem is, the\n  <code>\n   parent\n  </code>\n  item thus returned is of type\n  <code>\n   citem_t\n  </code>\n  . If I cast those to\n  <code>\n   cexpr_t\n  </code>\n  as follows:\n </p>\n <pre><code>parent.__class__ = cexpr_t\nprint parent.x\n</code></pre>\n <p>\n  and access any of its fields (e.g.\n  <code>\n   x\n  </code>\n  ) in the example above, it throws error.\n </p>\n <p>\n  How can I traverse the AST nodes bottom-up yet retaining the correct types (\n  <code>\n   cexpr_t\n  </code>\n  or\n  <code>\n   cinsn_t\n  </code>\n  ) of respective nodes? Is it possible to look into the code of\n  <code>\n   parent_expr()\n  </code>\n  or\n  <code>\n   parent_insn()\n  </code>\n  to see if how do those return correctly typed nodes from an\n  <code>\n   ctree_items_t\n  </code>\n  type vector (i.e.\n  <code>\n   parents\n  </code>\n  )? The code inside\n  <code>\n   python/ida_hexrays.py\n  </code>\n  seems to be mere SWIG stub, the actual implementation seems to lie somewhere else.\n </p>\n <pre><code>def parent_expr(self, *args):\n    \"\"\"\n    parent_expr(self) -> cexpr_t\n    \"\"\"\n    return _ida_hexrays.ctree_visitor_t_parent_expr(self, *args)\n\ndef parent_insn(self, *args):\n    \"\"\"\n    parent_insn(self) -> cinsn_t\n    \"\"\"\n    return _ida_hexrays.ctree_visitor_t_parent_insn(self, *args)\n</code></pre>\n <p>\n  The actual code seems to be distributed as a shared library located at\n  <code>\n   python/lib/python2.7/lib-dynload/[ida32|ida64]/_ida_hexrays.so\n  </code>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "639",
    "tags": [
        "ida",
        "idapython",
        "hexrays"
    ],
    "user": "sherlock",
    "time": "Jan 20, 2017 at 20:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can solve part of your problem.  Use the 'to_specific_type' attribute to convert a citem to a cexpr:\n </p>\n <pre><code>if citem.is_expr():\n    cexpr = citem.to_specific_type\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Andy Van Pelt",
            "time": "Oct 12, 2018 at 22:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}