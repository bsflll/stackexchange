{
    "title": "IDA PRO Hex-Rays try-catch",
    "link": "https://reverseengineering.stackexchange.com/questions/29099/ida-pro-hex-rays-try-catch",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been working in IDA Pro with a project but there is an issue. Try-Catch statements don't look nice.\n </p>\n <p>\n  I've been searching and it seems like IDA does not support them so I was wondering if there is a way to either:\n </p>\n <ul>\n  <li>\n   Hide sections of the Pseudocode\n  </li>\n  <li>\n   Create extensions for Hex-Rays to support them\n  </li>\n  <li>\n   Tell IDA how and where the exceptions are\n  </li>\n </ul>\n <p>\n  This is how the thing looks like at the moment:\n </p>\n <pre><code>  v3.SavedRegs = &savedregs;\n  v3.Handler = &loc_43B24C;\n  v3.Next = NtCurrentTeb()->NtTib.ExceptionList;\n  __writefsdword(0, &v3);\n  Controls::TControl::ReadState(Self, a2);\n  __writefsdword(0, v3.Next);\n</code></pre>\n <p>\n  And I would like to end up with something like this:\n </p>\n <pre><code>  try {\n    Controls::TControl::ReadState(Self, a2);\n  } ... {}\n</code></pre>\n <p>\n  Or if I can just hide those parts...\n </p>\n <pre><code>  //try {          <- Block comment (parts hidden)\n    Controls::TControl::ReadState(Self, a2);\n  //} ... {}       <- Block comment (parts hidden)\n</code></pre>\n <p>\n  Anything is good as long as I can hide those lines because they are distracting AF. Thank you very much!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "hexrays",
        "ida-plugin",
        "exception"
    ],
    "user": "Ricardo",
    "time": "Aug 5, 2021 at 13:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've considered doing this myself, but it's tricky for many reasons.\n </p>\n <p>\n  First, exception internals are not standardized across languages, platforms, or implementations. 64-bit Windows programs use a data-driven exception model, i.e., the\n  <code>\n   RUNTIME_FUNCTION\n  </code>\n  (etc.) entries in the\n  <code>\n   .rdata\n  </code>\n  segment. In this paradigm, the binary pre-registers information about exception scopes and handlers with the operating system via standardized structures, which takes care of lookup and dispatch when an exception occurs. Your example shows 32-bit Delphi; 32-bit Windows programs use a code-driven exception model, where the code is responsible for adding and removing exception handlers on demand, using proprietary metadata formats. As a result, adding exception support would require a lot of platform and language-specific effort, and may involve reverse engineering undocumented exception implementations across multiple runtime versions for a given language. While there would be benefits to adding exception support, it would also require a lot of work to develop (and maintain as the runtime support evolves over time).\n </p>\n <p>\n  Secondly, even if we were to decompile exception-related things into a simplified, language-independent representation, the most logical method of presentation would involve extending Hex-Rays to support things like\n  <code>\n   try\n  </code>\n  /\n  <code>\n   catch\n  </code>\n  /\n  <code>\n   finally\n  </code>\n  blocks as scoped constructs, and producing these things in the output. Unfortunately, extending the Hex-Rays\n  <code>\n   ctree\n  </code>\n  IR in this fashion is impossible for third-party developers. The valid\n  <code>\n   ctree\n  </code>\n  expression types are held in an\n  <code>\n   enum\n  </code>\n  called\n  <code>\n   ctype_t\n  </code>\n  . We'd need to add new entries like\n  <code>\n   cit_try\n  </code>\n  to this\n  <code>\n   enum\n  </code>\n  , we'd need to extend the\n  <code>\n   union\n  </code>\n  in\n  <code>\n   cinsn_t\n  </code>\n  to support an additional\n  <code>\n   ctry_t *\n  </code>\n  element, and we'd need to modify all of the existing\n  <code>\n   ctree\n  </code>\n  code in Hex-Rays to be aware of our modifications (for example, to print the\n  <code>\n   try\n  </code>\n  blocks in the decompilation listing). None of these things can be done by third-party plugins, as the existing, pre-compiled code will generate INTERRs upon encountering our\n  <code>\n   cit_try\n  </code>\n  instructions. Adding statement types to the\n  <code>\n   ctree\n  </code>\n  IR can only be accomplished via source-level modifications, not via plugins.\n </p>\n <p>\n  Finally, even though Hex-Rays technically has an option not to eliminate exception-related code, I'm not completely sure how it works. Exception-related code often manifests itself as \"function chunks\" attached to a given function, which have no incoming control flow references. As a result, that code is eliminated by the optimizer very early into the decompilation process. You'd need to find a way to preserve it.\n </p>\n <p>\n  It's a daunting prospect for a third-party developer; I myself abandoned the idea. It's also daunting for the first-party developers. I don't expect to see it in any major decompiler any time soon.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Aug 14, 2021 at 2:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ricardo",
                    "text": "<span class=\"comment-copy\">Thank you very much for your answer. Seems like a real pain in the ass to do from what you said so maybe I should stick to just putting comments here an there... But either way I think that a feature to hide lines or group of instructions just like the disasm does would be useful in the software.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the end, it seems like there is no way to do this in IDA up to 7.5. It's a shame.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ricardo",
            "time": "Aug 12, 2021 at 22:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}