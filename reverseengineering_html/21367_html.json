{
    "title": "Debug program using peculiar anti-debugging technique",
    "link": "https://reverseengineering.stackexchange.com/questions/21367/debug-program-using-peculiar-anti-debugging-technique",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In my BA thesis, I wanted to present a program for Windows, using various anti-debugging techniques.\n </p>\n <p>\n  One of them, which I came up on my own (possibly it is well known, but I didn't find it anywhere) involves changing control flow by using signal handlers. As far as I know, when program receives certain signal and has a function registered to handle it, the main thread is paused and the execution is passed to the handler. After it returns from the function, the main thread can either continue execution, or even terminate in case where\n  <code>\n   SIGFPE\n  </code>\n  or\n  <code>\n   SIGSEGV\n  </code>\n  was passed, for example (see this\n  <a href=\"https://stackoverflow.com/questions/14233464/can-a-c-program-continue-execution-after-a-signal-is-handled/30169485\">\n   question\n  </a>\n  ).\n </p>\n <p>\n  However, in such a case, it is possible to cause the thread executing handler not to stop after it leaves handler scope. The anti-debugging technique I've mentioned before takes advantage of this fact and is presented below.\n </p>\n <p>\n  First of all, I'm aware that the code I'm about to present uses concepts that should never appear in a real program, should be avoided in almost every situation and never tried at home :). After establishing this, consider the following program: (I'm using GCC targeting minGW to compile it)\n </p>\n <pre><code>#include <csignal>\n#include <windows.h>\n#include <cstdio>\n\nvoid handler(int)\n{\n    asm(\"jmp continue\"); // do not return from this function; just jump to another place in the code\n}\n\nint main()\n{\n    signal(SIGFPE, handler); // I know that sigaction should be used instead, but it's simpler and, as far as I know it wouldn't work for Windows\n    // and I know, that after receiving second signal, there will be undefined behaviour, but let's assume it won't happen\n    int a = 1 / 0; // cause SIGFPE to happen\n    asm(\"continue:\");\n    printf(\"continue execution\n\");\n    Sleep(5000); // to show a printed message for a while, so that the console is not being closed immediately\n    ExitProcess(0);\n}\n</code></pre>\n <p>\n  So here comes my question:\n  <em>\n   how could be such a program debugged, such that it's possible to see\n  </em>\n  <code>\n   printf(\"continue execution\n\");\n  </code>\n  <em>\n   line being executed?\n  </em>\n </p>\n <p>\n  When I tried to do this using Code::Blocks debugger (GDB), only the information that a program received\n  <code>\n   SIGFPE\n  </code>\n  appeared and the program crushed without printing\n  <code>\n   \"continue execution\"\n  </code>\n  string.\n </p>\n <p>\n  On the other hand, when I tried to debug it in\n  <code>\n   OllyDbg\n  </code>\n  , execution just stopped, nothing was printed on the screen, and I wasn't able to continue execution to the point where this string should be printed.\n </p>\n <p>\n  Upon \"normal\" execution it prints the string end finishes as expected.\n </p>\n <p>\n  <strong>\n   Edit:\n  </strong>\n  I've also tried to pass the exception to the application (using\n  <code>\n   SHIFT\n  </code>\n  +\n  <code>\n   F7\n  </code>\n  ), but I only get message saying \"Debugged program was unable to process exception\" and I'm unable to continue the execution.\n </p>\n <p>\n  <strong>\n   Edit2:\n  </strong>\n  I will not upload the binary, since when I tried to download it, my antivirus software started to complain about it, so it would probably be marked as suspicious if someone else downloaded it.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "windows",
        "debugging",
        "anti-debugging"
    ],
    "user": "bart1e",
    "time": "Jun 1, 2019 at 9:13",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n signal handlers are not really a thing on Windows; are you using cygwin or mingw?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n Well, I'm using Windows 10.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n what compiler are you using to build the program?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n I'm using GCC. I'll update my question to contain this information.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n Targeting minGW.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This technique is equivalent to the Structured Exception Handler for Windows.\nThe application registers an exception handler, then forces an exception to occur, thereby transferring control to the exception handler.  However, when a debugger is present, it will generally intercept the exception to allow user interaction.  If your debugger allows you to pass the exception back to the program, then you will be able to continue tracing.\n </p>\n <p>\n  You can read more about the technique here:\n  <a href=\"http://pferrie.host22.com/papers/antidebug.pdf\" rel=\"nofollow noreferrer\">\n   The \"Ultimate\" Anti-Debugging Reference\n  </a>\n  (pdf)\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Jun 1, 2019 at 2:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Thank you for your answer and for posting a link to the great book. :) The thing is, I've already tried to pass the exception to the application by debugger (OllyDbg), but I just get message saying \"Debugged program was unable to process exception\" and the execution doesn't continue. I will update my question with a binary and with this information.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not sure if the exact answer you are looking for is in there, but this presentation is one of the best I have seen on this topic:\n  <a href=\"https://www.blackhat.com/presentations/bh-usa-07/Yason/Presentation/bh-usa-07-yason.pdf\" rel=\"nofollow noreferrer\">\n   https://www.blackhat.com/presentations/bh-usa-07/Yason/Presentation/bh-usa-07-yason.pdf\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "1455J8KL",
            "time": "May 27, 2019 at 16:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">I didn't find the answer there, but it's good article nonetheless. Thank you for posting it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think I have finally found an answer to this question.\nSince I didn't find an answer anywhere in the Internet (including MSDN documentation for\n  <code>\n   signal\n  </code>\n  , articles covering anti debuggging techniques and exception handling on Windows) and the problem existed in all debuggers tested (\n  <em>\n   OllyDbg1/2, x64dbg, IDA debugger, radare2, gdb\n  </em>\n  ), I analysed exception handling mechanism described in\n  <em>\n   <a href=\"https://repo.zenk-security.com/Linux%20et%20systemes%20d.exploitations/Windows%20Internals%20Part%201_6th%20Edition.pdf\" rel=\"nofollow noreferrer\">\n    Windows Internals 6th edition\n   </a>\n  </em>\n  . Following image and cites come from this book, from page 126.\n </p>\n <p>\n  The exception dispatching process may be illustrated this way (actions will be performed from top to the bottom on the image):\n  <a href=\"https://i.sstatic.net/pWLpF.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"exception dispatching\" src=\"https://i.sstatic.net/pWLpF.png\"/>\n  </a>\n </p>\n <h1>\n  Actions performed:\n </h1>\n <ol>\n  <li>\n   <blockquote>\n    <p>\n     the first action the exception\n  dispatcher takes is to see whether the process that incurred the exception has an associated debugger process. If it does, the exception dispatcher sends a debugger object message to the debug object\n  associated with the process (which internally the system refers to as a “port” for compatibility with\n  programs that might rely on behavior in Windows 2000, which used an LPC port instead of a debug\n  object).\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     If the process has no debugger process attached or if the debugger doesn’t handle the exception,\n  the exception dispatcher switches into user mode, copies the trap frame to the user stack formatted\n  as a CONTEXT data structure [...], and calls a routine to find a structured or vectored exception handler\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     If none is found or if none handles the exception, the exception\n  dispatcher switches back into kernel mode and calls the debugger again to allow the user to do more\n  debugging. (This is called the second-chance notification.)\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     If the debugger isn’t running and no user-mode exception handlers are found, the kernel sends\n  a message to the exception port associated with the thread’s process. This exception port, if one exists, was registered by the environment subsystem that controls this thread. The exception port gives\n  the environment subsystem, which presumably is listening at the port, the opportunity to translate\n  the exception into an environment-specific signal or exception. For example, when Subsystem for\n  UNIX Applications gets a message from the kernel that one of its threads generated an exception,\n  Subsystem for UNIX Applications sends a UNIX-style signal to the thread that caused the exception\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     However, if the kernel progresses this far in processing the exception and the subsystem doesn’t \n  handle the exception, the kernel sends a message to a systemwide error port that Csrss (Client/Server\n  Run-Time Subsystem) uses for Windows Error Reporting (WER)\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     executes a default exception handler that simply terminates the process whose thread caused the\n  exception\n    </p>\n   </blockquote>\n  </li>\n </ol>\n <p>\n  Points 1., 2., 3., 5. and 6. aren't surprising. However, notice the point 4. It says, that if first three points didn't handle the exception and\n  <strong>\n   the debugger isn’t running\n  </strong>\n  , environment subsystem can translate the exception into an environment-specific signal which is then sent to the application.\n </p>\n <p>\n  But that only happens when a debugger is not attatched to the process and this explains why the exception handler was only called when the program was running outside a debugger. Otherwise, point 4. from the list above was simply not performed.\n </p>\n <p>\n  So, it wasn't simply SEH anti debugging technique (\n  <code>\n   signal\n  </code>\n  function doesn't add a handler to the SEH chain) - in fact it used a different concept and detected debugger in a different way.\n </p>\n <p>\n  Since I haven't found this anti debugging technique described anywhere, I hope this information will help someone, when he encounters such a technique during analysis.\n </p>\n <p>\n  And, since it is not stated in the book how OS checks whether an application is being debugged at point 4., it may be necessary to change the control flow of the program manually when an exception is being processed to force it to execute the handler.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "Jun 8, 2020 at 21:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I don't think point 4 applies, because you do have a handler which should be invoked. To get the full picture, you need to check how MinGW performs signal  handling (how it translates OS exceptions into signals and in what context the signal handler executes).  I'd suggest using a kernel debugger so the execution is not affected by user-mode debugger presence.</span>",
                    "time": null
                }
            ]
        }
    ]
}