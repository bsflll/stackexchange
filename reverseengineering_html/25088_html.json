{
    "title": "Modifying (adding new logic) decompiled apk to log different kind of data causing problems (crash/bluetooth connection)",
    "link": "https://reverseengineering.stackexchange.com/questions/25088/modifying-adding-new-logic-decompiled-apk-to-log-different-kind-of-data-causin",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have separately decompiled apk to smali/dalvik and to java classes. As apk is not obfuscated java code is pretty good to read and I can pretty easily see corresponding smali code. \nSo far I was able to do successfully:\n </p>\n <ul>\n  <li>\n   modify code for checking license file (change comparison for year)\n  </li>\n  <li>\n   add logging to some basic data. Logger function was already in apk to I just call it and everything works fine. I use adb to read logs.\n  </li>\n </ul>\n <p>\n  What I was trying to add next was to add logging for byte array. Why? Because this apk connects to Bluetooth device from which it receives the data. I wanted to know what data it receives. As I didn't know how to do that this is what I did:\n </p>\n <p>\n  I've made simple Android app with static function which gets byte array and returns string (copied some snipped). It was using BigInteger. Then I compiled it and decompiled using apktool.\n </p>\n <pre><code>    .method public static ByteArrayToString([B)Ljava/lang/String;\n    .locals 2\n    .param p0, \"data\"    # [B\n\n    .line 16\n    new-instance v0, Ljava/math/BigInteger;\n\n    const/4 v1, 0x1\n\n    invoke-direct {v0, v1, p0}, Ljava/math/BigInteger;-><init>(I[B)V\n\n    const/16 v1, 0x10\n\n    invoke-virtual {v0, v1}, Ljava/math/BigInteger;->toString(I)Ljava/lang/String;\n\n    move-result-object v0\n\n    .line 17\n    .local v0, \"hexaString\":Ljava/lang/String;\n    return-object v0\n    .end method\n</code></pre>\n <p>\n  I copied that whole function to my decompiled apk (the same class from which I wanted to call it/log data) and called that function.\n </p>\n <pre><code>    invoke-static {v0}, Lxx/xxxx/xxxxx/xx/xxxx/xxxxxx;->ByteArrayToString([B)Ljava/lang/String;\n    const-string v5, \":: MY RAW DATA: \"\n    invoke-static {v5}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n    move-result-object v4\n    invoke-static {v4}, Lorg/apache/log4j/helpers/LogLog;->debug(Ljava/lang/String;)V\n</code></pre>\n <p>\n  Unfortunately it didn't work. Application compiled succesfully, it installed and lunched without a crash. However it didn't connect to my bluetooth device (bluetooth communication is essential).\n </p>\n <p>\n  So here are some questions (edited):\n </p>\n <ul>\n  <li>\n   Is my approach correct?\n  </li>\n  <li>\n   What may be the reason for application not to work with bluetooth anymore?\n  </li>\n  <li>\n   Where should I put additional logic? Is the same class OK?\n  </li>\n  <li>\n   What about importing? For example in my new logic I had to import java.math.BigInteger; Will my function has this import somehow embedded in its logic?\n  </li>\n  <li>\n   Is there any better approach than mine?\n  </li>\n </ul>\n <p>\n  <strong>\n   EDIT:\n  </strong>\n </p>\n <p>\n  I've solved my initial problem, now I'm trying to figure out the rest. \nAnswers are:\n </p>\n <ul>\n  <li>\n   <p>\n    Yes, my approach is correct and it works. I just used wrong log function (as it was mentioned in comment below).\n   </p>\n  </li>\n  <li>\n   <p>\n    Probably using this function (instead of adding new method) is sufficient:\n   </p>\n  </li>\n </ul>\n <pre><code>invoke-static {v0}, Ljava/util/Arrays;->toString([B)Ljava/lang/String;\n</code></pre>\n <ul>\n  <li>\n   Strangely my problems with discovering Bluetooth devices has been solved by enabling GPS. Not 100% sure, but looks that way. I also saw this in logs:\n  </li>\n </ul>\n <pre><code>BluetoothUtils: packagename is xx.xxxxx.xxxx ,and its permission is false\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "560",
    "tags": [
        "android",
        "apk",
        "dalvik"
    ],
    "user": "matt",
    "time": "May 22, 2020 at 21:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think your approach is generally correct. You probably can't connect to the Bluetooth because your additional code throws an exception somewhere. The best idea would be to check it during dynamic analysis. You can do it using for example Android Studio and\n  <a href=\"https://github.com/JesusFreke/smalidea\" rel=\"nofollow noreferrer\">\n   smalidea\n  </a>\n  plugin.\n </p>\n <p>\n  As far as I see you don't store the result of your\n  <code>\n   ByteArrayToString\n  </code>\n  function call. You also pass only one parameter to the\n  <code>\n   android.util.Log.d\n  </code>\n  function (in your case\n  <code>\n   v5\n  </code>\n  ) but it actually requires two parameters.\n </p>\n <p>\n  You can hook and intercept functions in android applications using for example dynamic instrumentation. Good tool for this purpose is named\n  <a href=\"https://frida.re/docs/home/\" rel=\"nofollow noreferrer\">\n   frida\n  </a>\n  . Thanks to this tool you can hook various functions and change the behavior during runtime (for example add logging feature) without repacking the application. You don't need to mess with smali code, instead you can just use their easy JavaScript API.\n </p>\n <p>\n  If you are interested in the Bluetooth data logging there is even better way. You can use bulit-in Android function called\n  <code>\n   Bluetooth HCI snoop log\n  </code>\n  . You can enable it in developer options on your phone. After you enable the option all the bluetooth communication made between those devices will be recorded and saved onto internal storage. You can later copy the\n  <code>\n   btsnoop_hci.log\n  </code>\n  and possibly all files with the\n  <code>\n   .cfa\n  </code>\n  extension to further examination. Those files can be loaded into for example popular program named\n  <a href=\"https://www.wireshark.org/\" rel=\"nofollow noreferrer\">\n   WireShark\n  </a>\n  and inspected similar  to PCAP files.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "morsisko",
            "time": "May 22, 2020 at 15:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "matt",
                    "text": "<span class=\"comment-copy\">Thanks you for your input. I mixed up two functions, one accepts 1 parameter and the other one 2. Also - strangely my problem with bluetooth fixed itself when I enabled GPS. However I'm not 100% sure if that's the case. In logs I there's this: \"BluetoothUtils: packagename is xx.xxxxx.xxxx ,and its permission is false\". I found also my old code (I've been trying to solve this problem of mine few years back) and I used \"invoke-static {v0}, Ljava/util/Arrays;-&gt;toString([B)Ljava/lang/String;\" and it should work also.</span>",
                    "time": null
                },
                {
                    "user": "morsisko",
                    "text": "<span class=\"comment-copy\">Well, the new log looks strange, but according to the GPS, since some time Android may require the \"Get location\" permission if the app uses Bluetooth. Maybe you denied the permission in the repacked app, so the bluetooth didn't work, and now after turning GPS on the app displayed some sort of monit and obtained necessary permissions. It is just theory. Also if you need the logging feature only to capture bluetooth patckets, I highly recommend to use the <code>Bluetooth HCI snoop log</code> without modifying smali code. Wireshark and static analyse of the .apk may be enough to understand the logic.</span>",
                    "time": null
                }
            ]
        }
    ]
}