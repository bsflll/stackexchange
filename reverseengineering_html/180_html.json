{
    "title": "Obfuscating Windows Executables",
    "link": "https://reverseengineering.stackexchange.com/questions/180/obfuscating-windows-executables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  GCC allows you to write optimization plugins that can be used to obfuscate your compiled executable, but this wasn't ported to\n  <code>\n   mingw\n  </code>\n  .  LLVM allows something similar but barfs when including\n  <code>\n   Windows.h\n  </code>\n  .\n </p>\n <p>\n  Is there a compiler that will allow me to get access to the AST right before link time, and produce a Windows executable?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 2,
    "views": "2k",
    "tags": [
        "obfuscation",
        "windows"
    ],
    "user": "mrduclaw",
    "time": "Mar 23, 2013 at 9:34",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Why do you need\n <code>\n  windows.h\n </code>\n <i>\n  in the compiler\n </i>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Andrew",
            "text": "<html><body><span class=\"comment-copy\">\n There's been a lot of work on getting clang to work on windows. There are some flags that you you should pass maybe (like -fms-extensions). I think at this point the clang team advertises they work on windows.h, I know I've gotten it to work before...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrduclaw",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky Please forgive my ignorance, was that a slight at Microsoft or am I doing something wholly wrong?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrduclaw",
            "text": "<html><body><span class=\"comment-copy\">\n @Andrew I tried passing\n <code>\n  -fms-extensions\n </code>\n previously, but ran into issues.  This has been some months, maybe it's fixed now. Thanks.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n \"Obfuscating\" raises one question: what for? What do you want to achieve?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A couple of things you might want to look at:\n </p>\n <ul>\n  <li>\n   The book \"\n   <a href=\"http://rads.stackoverflow.com/amzn/click/0321549252\" rel=\"nofollow\">\n    Surreptitious Software\n   </a>\n   \" is all about writing compilers that obfuscate.\n  </li>\n  <li>\n   <a href=\"http://crypto.junod.info/asfws12_talk.pdf\" rel=\"nofollow\">\n    This presentation\n   </a>\n   is similar.\n  </li>\n  <li>\n   Somebody wrote a proof-of-concept obfuscator based on the tcc compiler,\n   <a href=\"http://www.openrce.org/blog/view/1632/Making_C_compiler_generate_obfuscated_code\" rel=\"nofollow\">\n    and made his source code available\n   </a>\n   . Also check the links on this thread.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "7",
            "user": "rev",
            "time": "Mar 9, 2015 at 4:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "newgre",
                    "text": "<span class=\"comment-copy\">To clarify a bit: the book is very good, but it is not really about how to write (extensions) for specific compilers. It rather covers the underlying concepts of program transformations in order to apply obfuscations to programs in general.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There was a compiler infrastructure named\n  <a href=\"http://research.microsoft.com/en-us/collaboration/focus/cs/phoenix.aspx\" rel=\"nofollow\">\n   phoenix\n  </a>\n  (also see\n  <a href=\"http://en.wikipedia.org/wiki/Phoenix_%28compiler_framework%29\" rel=\"nofollow\">\n   wikipedia\n  </a>\n  ).\nI even used it for some program transformations, but unfortunately it never made it beyond what MS calls a \"Community Technology Preview (CTP)\". Now it appears to be dead, I get 404's for each of the links on the MS research page, so it seems to me that this project was discontinued.\n </p>\n <p>\n  If you're interested in using LLVM/CLANG on Windows you might want to have a look at\n  <a href=\"http://www.ishani.org/web/2011/crowbarring-clang-into-vs/\" rel=\"nofollow\">\n   this page\n  </a>\n  , which offers an extension to use LLVM from within VS. I gave it a short try and cannot say much about it, but it should allow you to compile and build extensions for LLVM on Windows.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "newgre",
            "time": "Apr 3, 2013 at 8:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}