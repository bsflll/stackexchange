{
    "title": "How can I recover / locate non-virtual class methods at run-time?",
    "link": "https://reverseengineering.stackexchange.com/questions/8758/how-can-i-recover-locate-non-virtual-class-methods-at-run-time",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know how to find and hook virtual methods by crawling an object's RTTI.  I cannot find enough information about non-virtual class methods.\n </p>\n <ol>\n  <li>\n   <p>\n    Is there anyway to identify non-virtual class methods at run-time?\n   </p>\n  </li>\n  <li>\n   <p>\n    Can I use a class's symbol name to recover any information about it at run-time?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "123",
    "tags": [
        "disassembly",
        "c++",
        "dynamic-analysis"
    ],
    "user": "question_asker_777",
    "time": "Apr 24, 2015 at 10:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There's no sure-proof way to do it. Non-virtual methods look exactly like normal functions except they take an implicit 'this' pointer. If you are dealing with visual C++ compiled program then it will probably be a bit more obvious as usually it uses\n  <strong>\n   thiscall\n  </strong>\n  calling convention so you just need to watch for cases when the instance address is in ecx at function entry. See\n  <a href=\"http://www.openrce.org/articles/full_view/23\" rel=\"nofollow\">\n   my article\n  </a>\n  for more details.\n </p>\n <p>\n  Of course, if you have symbols then it's very easy - just check for\n  <code>\n   classname::\n  </code>\n  prefix in the demangled function name.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 24, 2015 at 11:40",
            "is_accepted": true,
            "comments": []
        }
    ]
}