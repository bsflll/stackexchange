{
    "title": "Kawai ES110 - Firmware supplied as MIDI file, what can we do?",
    "link": "https://reverseengineering.stackexchange.com/questions/32990/kawai-es110-firmware-supplied-as-midi-file-what-can-we-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The firmware for this digital piano is supplied as a MIDI file with an EasyPlayer.exe (not sure if Wine can run this properly) binary to upload it.\n </p>\n <p>\n  I'm wondering if there's a way to get at it's contents and how you'd go about it?\n </p>\n <p>\n  Using binwalk, I have found the following, but the -e option doesn't give anything.\n </p>\n <pre class=\"lang-shell prettyprint-override\"><code>$  binwalk -B Firmware_Update/ES110_v106/KP764Gbps.mid\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             MIDI sequence data, 0 format, 1 tracks\n415889        0x65891         JBOOT STAG header, image id: 0, timestamp 0x170, image size: 0 bytes, image JBOOT checksum: 0x517E, header JBOOT checksum: 0x16D\n415921        0x658B1         JBOOT STAG header, image id: 1, timestamp 0x16C, image size: 0 bytes, image JBOOT checksum: 0x517E, header JBOOT checksum: 0x16D\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "170",
    "tags": [
        "decompilation",
        "decompress",
        "firmware-analysis",
        "decompiler"
    ],
    "user": "Luke A. Guest",
    "time": "May 29, 2024 at 13:40",
    "comments": [
        {
            "user": "Bavi_H",
            "text": "<html><body><span class=\"comment-copy\">\n Is the firmware available online somewhere?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bavi_H",
            "text": "<html><body><span class=\"comment-copy\">\n Can you tell us what operating system(s) you have? (You mentioned Wine, so it sounds like you do not have a Windows computer.)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Luke A. Guest",
            "text": "<html><body><span class=\"comment-copy\">\n No, the FW is not available online. I'm on Gentoo.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bavi_H",
            "text": "<html><body><span class=\"comment-copy\">\n Here my notes about the format and the data unpacked into 8-bit bytes:\n <a href=\"https://rnhart.net/kawai-es110.zip\" rel=\"nofollow noreferrer\">\n  kawai-es110.zip\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bavi_H",
            "text": "<html><body><span class=\"comment-copy\">\n The PDF describes it as a one-way send: The instructions only describe connecting the piano's MIDI IN to the computer and selecting a MIDI OUT device in the MIDI player app. For response messages to work, you'd need to connect the piano's MIDI OUT port to the computer and select a MIDI IN device in an app. If the piano is sending responses, the MIDI player app can't see them, it doesn't have a MIDI IN device setting. Notice the MIDI file has various time delays between the messages, so you should probably use the same timings if you are attempting to send using other means.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If the firmware update is distributed as a MIDI file, I suspect it probably contains the firmware bytes stuffed into System Exclusive messages inside the MIDI file.\n </p>\n <p>\n  MIDI messages use the high bit of each byte to indicate the start of a message (the Status byte), then the data bytes of a message must have the high bit of each byte clear. In other words, the data bytes can only use 7 bits, so each byte of the firmware has to be split somehow and stuffed into 7-bit data bytes. Perhaps this bit re-packing might prevent binwalk from finding interesting things?\n </p>\n <p>\n  The first step I would take is to use some MIDI file software to examine the MIDI file and look at all the System Exclusive messages.\n </p>\n <p>\n  I would compare the System Exclusive messages to the Kawai ES110's documented System Exclusive format to see if there were any similarities. (See the\n  <a href=\"http://www.kawai-global.com/data/manuals/ES110_MIDI_Exclusive_EN.pdf\" rel=\"nofollow noreferrer\">\n   ES110 MIDI Exclusive Information\n  </a>\n  PDF from\n  <a href=\"https://www.kawai-global.com/product/es110/#support\" rel=\"nofollow noreferrer\">\n   Kawai ES110 - Support Download\n  </a>\n  .) This will likely help identify some of the header bytes of each System Exclusive message.\n </p>\n <p>\n  I would look at the data bytes to see if I could tell what kind of packing method was used, and if I could tell if any other kinds of data sizes, start addresses, or checksums are present.\n </p>\n <p>\n  If we can extract and re-arrange the data bytes into the original firmware bytes, then perhaps running binwalk on that might provide more interesting info?\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Bavi_H",
            "time": "Jun 1, 2024 at 19:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Luke A. Guest",
                    "text": "<span class=\"comment-copy\">Yes, it starts to follow the midi info of F0 40 7F, then 70.</span>",
                    "time": null
                }
            ]
        }
    ]
}