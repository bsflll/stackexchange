{
    "title": "Detect a process for being injected with a dll [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/15510/detect-a-process-for-being-injected-with-a-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has answers here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/2262/how-can-dll-injection-be-detected\">\n      How can DLL injection be detected?\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (4 answers)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2018-04-02 20:00:28Z\">\n      7 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm trying to figure out how can I detect a process for being injected with a dll.\nI found\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2262/how-can-dll-injection-be-detected\">\n   this\n  </a>\n  thread but I couldn't figure out a simple way out of it.\n </p>\n <p>\n  I want to clarify my intention: given a pid - I want to return an answer if that process was injected with a dll or not.\n </p>\n <p>\n  I thought of dumping all the dependencies of a process and then compare it to the running process - the problem is that the dependencies load their own dlls...\n </p>\n <p>\n  I heard that Anti viruses compares check sums or something like that - but couldn't understand how exactly.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dll",
        "injection"
    ],
    "user": "Shan Pop",
    "time": "7 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can recursively follow dependencies to figure out which DLLs were loaded directly by the Windows loader. You may create an\n  <code>\n   imported modules list\n  </code>\n  . Fill\n  <code>\n   imported module list\n  </code>\n  with every module you find in the main PE's import table. Then recursively parse the import tables of all DLLs you found that way. You'll have a list with all DLLs imported. Then, just compare it to the list of loaded modules.\n </p>\n <p>\n  Discrepancies you find might be either injected DLLs or dynamically loaded DLLs.\n </p>\n <p>\n  Identifying dynamically loaded DLLs might be a bit more challenging, but one way to identify those is to disassemble the executable and search for calls to\n  <code>\n   LoadLibrary\n  </code>\n  ,\n  <code>\n   LoadLibraryEx\n  </code>\n  etc.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 9, 2017 at 17:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">That wouldn't detect DLLs that have been either removed from the list of loaded modules or even loaded manually though.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Kinda felt like both are out of scope tbh</span>",
                    "time": null
                },
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">Add a compare to the path too, and you will be fine. You know what your app uses. So, you can detect injected DLLs, through one way or another. If for third-party apps, it is much more difficult, but also possible.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">any DLL can be renamed and replaced at any point, so as I wrote in the original thread, there are things that you can try, but they might not work.  The short answer is that you really can't be certain that you don't have an active injection.</span>",
                    "time": null
                }
            ]
        }
    ]
}