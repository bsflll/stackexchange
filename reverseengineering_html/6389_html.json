{
    "title": "Tracing (\"logging\") the stack without setting a breakpoint?",
    "link": "https://reverseengineering.stackexchange.com/questions/6389/tracing-logging-the-stack-without-setting-a-breakpoint",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm familiar with the concept of backtracing the stack after breaking on a specific instruction. \nWhat I wonder about is this: theoretically, a great way to aid oneself in analyzing an application would be to let it execute the studied code, then carefully check the stack. As far as I know debuggers will only allow to trace the stack once they actually break on an instruction. This, however, could be problematic in that if I don't know\n  <em>\n   where\n  </em>\n  to place the breakpoint, I'm deprived of this useful technique.\n </p>\n <p>\n  Assume, for example, that I were playing a simple shooting game. After (or maybe before) each shot there would be some math done to calculate the random projectile spread for the weapon. Again, theoretically, if one could just \"log\" all stack activity done in that period, that could greatly aid analysis.\n </p>\n <p>\n  My questions:\n </p>\n <ol>\n  <li>\n   Is that possible?\n  </li>\n  <li>\n   If the answer to the above is yes, would that be a feasible analysis\ntechnique? Given that there's literally tons of code executed all\nthe time in a large, complex application, would it be practically\npossible to distinguish the studied code from everything else?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "200",
    "tags": [
        "debuggers",
        "callstack"
    ],
    "user": "user4520",
    "time": "Oct 6, 2014 at 20:48",
    "comments": [
        {
            "user": "Mick",
            "text": "<html><body><span class=\"comment-copy\">\n If you're using IDA Pro, try out the 'funcap' plugin:\n <a href=\"https://github.com/deresz/funcap\" rel=\"nofollow noreferrer\">\n  github.com/deresz/funcap\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user4520",
            "text": "<html><body><span class=\"comment-copy\">\n @MickGrove Thanks, looks nice, I'll give it a shot.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "BitShifter",
            "text": "<html><body><span class=\"comment-copy\">\n This sounds like something that you could use Intel's pintool to help analyze.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A debugger cant read/log the Stack when an application is running and not stepped or paused.\n </p>\n <p>\n  The closest thing to what you wanna do is called tracing and supported by some debuggers like OllyDbg and IDA\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "pHiL",
            "time": "Oct 8, 2014 at 12:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Depends on the debugging approach used. E.g. Win32 debugging API can read/write memory even while the program is running.</span>",
                    "time": null
                },
                {
                    "user": "pHiL",
                    "text": "<span class=\"comment-copy\">reading memory from a running process is dangerous as it can change during read operation. the stack memory regions change so fast that you need some synchronization/locking when reading it. imho thats only possible by pausing the application, reading stack, step one instruction, read, step, read.....</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Yes, it's definitely not safe (at least for this purpose). I just wanted to point out that your claim that debugger can't read memory while app is running is not totally correct.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The approach you describe is implemented in several profilers, usually under the name\n  <em>\n   sampling profiler\n  </em>\n  . What it usually does is:\n </p>\n <ol>\n  <li>\n   periodically (e.g. every 100ms) suspend the application\n  </li>\n  <li>\n   get the current registers of each thread\n  </li>\n  <li>\n   perform a quick stack trace using the captured ESP/EIP/EBP\n  </li>\n  <li>\n   resume the application\n  </li>\n  <li>\n   after the end of profiling, collate the stack traces, resolve addresses to source code lines, etc.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 14, 2014 at 10:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}