{
    "title": "Writing own custome syscall/int 0x80 on x64 system",
    "link": "https://reverseengineering.stackexchange.com/questions/14429/writing-own-custome-syscall-int-0x80-on-x64-system",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is there a way to write my own\n  <code>\n   syscall\n  </code>\n  /\n  <code>\n   int 0x80\n  </code>\n  without using them?\nSo, normally it goes like\n </p>\n <pre><code>setup registers\n...\nsyscall or int 0x80\n</code></pre>\n <p>\n  and I am interested in doing this without\n  <code>\n   syscall\n  </code>\n  /\n  <code>\n   int 0x80\n  </code>\n </p>\n <pre><code>setup registers\ncall mysyscall\n</code></pre>\n <p>\n  where can I find implementation of\n  <code>\n   syscall\n  </code>\n  or\n  <code>\n   int 0x80\n  </code>\n  ? Or is it too low level to implement it in asm?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "994",
    "tags": [
        "assembly",
        "linux",
        "x86-64"
    ],
    "user": "re_adept",
    "time": "Jan 17, 2017 at 22:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   TL;DR:\n  </em>\n  These are two instructions supported\n  <em>\n   by\n  </em>\n  the CPU, you cannot implement them in assembly, as they are (or aren't) part of the assembly language you're using.\n </p>\n <p>\n  <em>\n   Some more background:\n  </em>\n </p>\n <p>\n  An interrupt (the assembly\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_142.html\" rel=\"nofollow noreferrer\">\n   <code>\n    int\n   </code>\n  </a>\n  instruction is causing a software interrupt) is a special event for the CPU. The CPU immediately (This is slightly inaccurate as advanced performance optimizations and low-level features are ignored for the sake of simplicity) stops executing the instruction sequence it was executing, saves the context of the current execution (such as the\n  <code>\n   EIP\n  </code>\n  and other control registers, most not directly accessible to the user), and switches to a specifically designated code sequence that is in charge of handling that specific interrupt.\n </p>\n <p>\n  Examples of hardware interrupts are related to handling power, hard-disk network and other peripherals, as well as when a program fails accessing a memory region, fails with certain calculations (divide by zero), floating point errors, tries executing a privileged or an invalid instruction and many others.\n </p>\n <p>\n  Additionally, a program can intentionally trigger an interrupt by using the\n  <code>\n   int\n  </code>\n  instruction which receives a single operand - the interrupt id to trigger.\n </p>\n <p>\n  When an interrupt happens, the resumes execution at the address pointed by the interrupt index in the\n  <a href=\"https://en.wikipedia.org/wiki/Interrupt_descriptor_table\" rel=\"nofollow noreferrer\">\n   Interrupt Descriptor Table\n  </a>\n  (aka Interrupt Vector Table), in the case of\n  <code>\n   int 0x80\n  </code>\n  , that's the address at offset\n  <code>\n   0x80\n  </code>\n  , obviously.\n </p>\n <p>\n  As interrupts are an expensive operation for the CPU (it entails a lot of bookkeeping related to theads and context switches, among other things), AMD (and later Intel) introduced the\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_313.html\" rel=\"nofollow noreferrer\">\n   <code>\n    sysenter\n   </code>\n  </a>\n  instruction (called\n  <code>\n   syscall\n  </code>\n  by Intel). That instruction keeps bookkeeping to the minimum by only raising to ring0 and executing kernel code.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jan 17, 2017 at 23:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}