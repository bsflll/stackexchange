{
    "title": "Are there any modern assembly-level patching tools?",
    "link": "https://reverseengineering.stackexchange.com/questions/6419/are-there-any-modern-assembly-level-patching-tools",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've recently been undertaking a little RE project where I needed to patch the executable. For small modifications, I know enough x86 to patch in an jump, nop, infinite loop, etc, so a hex editor is good enough. But what about larger ones?\n </p>\n <p>\n  I used to use OllyDbg for this, there were great tools in it, you could go to any line, press space and just start assembling, instructions you replaced would be padded with NOPs automatically and there were even nice plugins to find code caves.\n </p>\n <p>\n  Unfortunately, OllyDbg seems barely updated these days and fails to load any application on 64 bit Windows 8.1, so I've switched to Hiew. Hiew isn't bad, but the interface is well, more than a little dated and fairly cumbersome to use compared to Olly's.\n </p>\n <p>\n  I'm wondering if anyone knows any more modern tools that can perform this same sort of function.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 4,
    "views": "2k",
    "tags": [
        "ollydbg",
        "patching"
    ],
    "user": "ultramancool",
    "time": "Oct 11, 2014 at 8:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you have IDA pro, IDA patcher was released recently. While I haven't used it personally, it won one of the Hexrays plugin contests, and is probably pretty reasonable.\n </p>\n <p>\n  <a href=\"https://thesprawl.org/projects/ida-patcher/\" rel=\"nofollow\">\n   https://thesprawl.org/projects/ida-patcher/\n  </a>\n </p>\n <p>\n  There's also this simple python script which I have used in the past:\n </p>\n <p>\n  <a href=\"http://stalkr.net/files/ida/idadif.py\" rel=\"nofollow\">\n   http://stalkr.net/files/ida/idadif.py\n  </a>\n </p>\n <p>\n  It's not modern, but it works.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "yrp",
            "time": "Oct 10, 2014 at 22:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ultramancool",
                    "text": "<span class=\"comment-copy\">Looks like IDA has a built in edit -&gt; patch program -&gt; assemble feature these days and this just improves patch management. Thanks. This will do perfectly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I regularly use\n  <a href=\"http://radare.org\">\n   radare2\n  </a>\n  for patching binaries. It works quite well, it's free (as in freedom), and scriptable.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "jvoisin",
            "time": "Oct 12, 2014 at 16:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ultramancool",
                    "text": "<span class=\"comment-copy\">I had a quick look at radare2, but couldn't find much good information on using it for patching. Would you mind linking a good guide on it? Thanks.</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">In general the documentation on the radar.org site is quiet good. As to the specific question, here is the part on patching <a href=\"http://radare.org/doc/html/Section3.8.html#write\" rel=\"nofollow noreferrer\">radare.org/doc/html/Section3.8.html#write</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are a few really great options.\n </p>\n <p>\n  First, something that I frequently forget when doing patching is that\n  <code>\n   LD_PRELOAD\n  </code>\n  makes hooking/redirecting library routines very easy.\n </p>\n <p>\n  If you must patch instructions, the tools that I use on a regular basis are\n  <a href=\"https://github.com/Gallopsled/pwntools\" rel=\"nofollow noreferrer\">\n   <code>\n    pwntools\n   </code>\n  </a>\n  (a Python library) and\n  <a href=\"https://isisblogs.poly.edu/2014/04/02/the-other-kind-of-patch/\" rel=\"nofollow noreferrer\">\n   <code>\n    Fentanyl\n   </code>\n  </a>\n  (an IDAPython script).\n </p>\n <p>\n  For\n  <code>\n   pwntools\n  </code>\n  , the following would be an example of patching an instruction at file-address 0x1234, which we'll say is virtual-address 0x8001234.  Note that this support is limited to ELF files, and does not work for PEs.\n </p>\n <pre><code>#!/usr/bin/env python\nfrom pwn import *\nfile = ELF('/path/to/elf')\nfile.asm(0x8001234, 'nop') # Using virtual address\nfile.asm(file.offset_to_vaddr(0x1234), 'nop') # File offset\nfile.save('/path/to/output')\n</code></pre>\n <p>\n  Using Fentanyl is GUI-driven, but it works pretty well and even nop-pads your instructions and fixes offsets.\n </p>\n <p>\n  <img alt=\"Fentanyl demo\" src=\"https://i.sstatic.net/YsyMG.gif\"/>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Zach Riggle",
            "time": "Oct 13, 2014 at 7:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Use\n  <a href=\"http://x64dbg.com\" rel=\"nofollow\">\n   x64dbg\n  </a>\n  . It works perfectly with x86 and x64 on modern windows and you can patch and save like in Olly. Overall the interface is very similar looking to olly\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "pHiL",
            "time": "Oct 11, 2014 at 15:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}