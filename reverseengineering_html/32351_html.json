{
    "title": "Get hardcoded char array from compiled C++ source",
    "link": "https://reverseengineering.stackexchange.com/questions/32351/get-hardcoded-char-array-from-compiled-c-source",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is well known that literal strings can be retrieved from C++ compilates. For example, the output of\n </p>\n <pre><code>g++ a.cpp\n</code></pre>\n <p>\n  on\n </p>\n <pre class=\"lang-cpp prettyprint-override\"><code>int main(void)\n{\n    const char * secret0 = \"abcdefghijklmnopqrstuvwxyz\";\n    const char secret1[] = {\n        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    };\n    return 0;\n}\n</code></pre>\n <p>\n  can be inspected with\n  <a href=\"https://linux.die.net/man/1/strings\" rel=\"nofollow noreferrer\">\n   strings\n  </a>\n  . The output contains the strings:\n </p>\n <pre><code>strings a.out | grep -i xyz\n</code></pre>\n <pre><code>abcdefghijklmnopqrstuvwxyz\n</code></pre>\n <p>\n  Is something like that possible for the hardcoded\n  <code>\n   char\n  </code>\n  array\n  <code>\n   {0x01, 0x02, 0x03, 0x04, ...}\n  </code>\n  as well?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "188",
    "tags": [
        "c++"
    ],
    "user": "Nico Schl√∂mer",
    "time": "Oct 4, 2023 at 8:26",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Strings will output that if the charecters are within printable ascii range and size is greater than threshhold levels. If the chars are not in printable range then it is guess game. And heuristics For example a continuous 0x90 in text section might be nop whereas the same might be prefilled buffer in a read only section\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n If your query was as answered by mimak then you dont need anything more than grep -obUaP  escaped_hex\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ASCII symbols below\n  <code>\n   0x20\n  </code>\n  are called control characters and they are not considered printable. So you cannot interpret them as strings. They are just numbers and to inspect them you need to inspect memory using hex-editor, debugger, disassembler or other tools.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "JacobTheKind",
            "time": "Nov 19, 2024 at 19:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Constants are usually saved in the\n  <code>\n   .data\n  </code>\n  segment (assuming ELF format), including arrays. You should be able to find it with any hex editor with a search function, for instance\n  <a href=\"https://ghidra-sre.org/\" rel=\"nofollow noreferrer\">\n   Ghidra\n  </a>\n  's\n  <a href=\"https://fossies.org/linux/ghidra/Ghidra/Features/Base/src/main/help/help/topics/Search/Search_Memory.htm\" rel=\"nofollow noreferrer\">\n   Search Memory\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "mimak",
            "time": "Oct 4, 2023 at 8:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the busybee",
                    "text": "<span class=\"comment-copy\">In the case shown in the question it is not <code>.data</code> but <code>.rodata</code>. The data type does not have any effect of the segment, it depends on being writable or not.</span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">@thebusybee Well ive just compiled it with gcc out of curiosity and we're both wrong, the array was inlined into subsequent <code>mov rax, 706050403020100h</code> and <code>mov rdx, 0F0E0D0C0B0A0908h</code> instructions thus making it <code>.text</code> segment; the string ended up in <code>.rdata</code></span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">i assume it depends on the comp target (x64 pe in this case) and the compiler itself</span>",
                    "time": null
                }
            ]
        }
    ]
}