{
    "title": "[ARM]How does this checksum code works and how to revert it in C?",
    "link": "https://reverseengineering.stackexchange.com/questions/12927/armhow-does-this-checksum-code-works-and-how-to-revert-it-in-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse a simple code that gets a string and calculates it's checksum. I've been trying to understand every instruction, but they look different from what is said in arm documentation. \nHere's the full code(Using no$gba debugger)\n  <a href=\"https://i.sstatic.net/bWnxq.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Pink signals the checksum code\" src=\"https://i.sstatic.net/bWnxq.png\"/>\n  </a>\n </p>\n <p>\n  I've reached the code knowing that once the checksum has been calculated it is stored in the r0 register.\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\" rel=\"nofollow noreferrer\">\n   Docs\n  </a>\n  specify that EOR receives 2 args, while here is taking 4.\n  <strong>\n   <em>\n    eor  r3,r3,r0,asr 8h\n   </em>\n  </strong>\n  I've figured out that this will be something like\n  <strong>\n   <em>\n    r3 = (r3^r0)>>8\n   </em>\n  </strong>\n  but I'm not really sure. In addition, C/C++ doesn't specify if the >> operator performs arithmetical or logical shifts (asr)\n </p>\n <p>\n  Same confusion is created with the mov's instructions. The sub inst. would be reversed in something like\n  <strong>\n   <em>\n    r2--; or r2=r2-1;\n   </em>\n  </strong>\n </p>\n <p>\n  Thanks for your time.\n </p>\n <p>\n  EDIT: The checksum is 2 bytes long, and I am giving some examples:\n </p>\n <p>\n  String: AAAAAAB  -- Checksum: 0xB649 (While debugging, write in little endian)\n </p>\n <p>\n  String: AAAAAAA  -- Checksum: 0x68BC \n(NOTE: Checksum can't be worked out by performing operations with different checksum samples)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "928",
    "tags": [
        "assembly",
        "debuggers",
        "arm"
    ],
    "user": "78dtat78da",
    "time": "Jun 24, 2016 at 10:20",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n How exactly do these instructions look different from the ones in your documentation? \"They are all lowercase\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "78dtat78da",
            "text": "<html><body><span class=\"comment-copy\">\n @RadLexus ... \" Docs specify that EOR receives 2 args, while here is taking 4. eor r3,r3,r0,asr 8h \"  From the ARM documentation: Syntax eor Rd, Rm   Rd->destination  Rm->Second operand\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n You are looking at the Thumb documentation, but this code is in\n <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\" rel=\"nofollow noreferrer\">\n  the regular mode\n </a>\n (you can see that because the opcodes are 4 bytes long)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A disassembler and decompiler like\n  <em>\n   Ghidra\n  </em>\n  can be used to obtain a C equivalent code.\n </p>\n <p>\n  Also, as specified by @RadLexus, the ARM documentation can be found here:\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\" rel=\"nofollow noreferrer\">\n   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "78dtat78da",
            "time": "Jan 30, 2021 at 18:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}