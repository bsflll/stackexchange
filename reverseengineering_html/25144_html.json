{
    "title": "Variable var_4 filled with value -1",
    "link": "https://reverseengineering.stackexchange.com/questions/25144/variable-var-4-filled-with-value-1",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Who can explain to me, why this line code there is before each\n  <code>\n   jmp\n  </code>\n  or end of some part of code where there is label. What this line of code is to do?\n </p>\n <pre><code>mov     [ebp+var_4], 0FFFFFFFFh\n</code></pre>\n <p>\n  This is\n  <code>\n   WinMain\n  </code>\n  used C++. I used try/catch.\n </p>\n <pre><code>.text:00411260                 push    ebp\n.text:00411261                 mov     ebp, esp\n.text:00411263                 push    0FFFFFFFFh\n.text:00411265                 push    offset unk_414FC8\n.text:0041126A                 push    offset loc_411050\n.text:0041126F                 mov     eax, large fs:0\n.text:00411275                 push    eax\n.text:00411276                 mov     large fs:0, esp\n.text:0041127D                 add     esp, 0FFFFFFA0h\n.text:00411280                 push    ebx\n.text:00411281                 push    esi             ; uType\n.text:00411282                 push    edi             ; uType\n.text:00411283                 mov     [ebp+var_18], esp\n.text:00411286                 mov     [ebp+var_1C], 64h\n.text:0041128D                 mov     [ebp+var_20], 96h\n.text:00411294                 mov     [ebp+var_4], 0\n.text:0041129B                 mov     eax, [ebp+var_1C]\n.text:0041129E                 add     eax, [ebp+var_20]\n.text:004112A1                 mov     [ebp+var_24], eax\n.text:004112A4                 int     3               ; Trap to Debugger\n.text:004112A5                 mov     [ebp+var_4], 0FFFFFFFFh\n.text:004112AC                 jmp     short loc_4112D2\n.text:004112AE ; ---------------------------------------------------------------------------\n.text:004112AE                 mov     eax, 1\n.text:004112B3                 retn\n.text:004112B4 ; ---------------------------------------------------------------------------\n.text:004112B4                 mov     esp, [ebp-18h]\n.text:004112B7                 push    0\n.text:004112B9                 push    offset Caption  ; \"Error1\"\n.text:004112BE                 push    offset Caption  ; \"Error1\"\n.text:004112C3                 push    0               ; hWnd\n.text:004112C5                 call    ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)\n.text:004112CB                 mov     [ebp+var_4], 0FFFFFFFFh\n.text:004112D2\n.text:004112D2 loc_4112D2:                             ; CODE XREF: WinMain+4Cj\n.text:004112D2                 mov     [ebp+var_28], 64h\n.text:004112D9                 mov     [ebp+var_2C], 96h\n.text:004112E0                 mov     [ebp+var_4], 1\n.text:004112E7                 mov     eax, [ebp+var_28]\n.text:004112EA                 add     eax, [ebp+var_2C]\n.text:004112ED                 mov     [ebp+var_30], eax\n.text:004112F0                 mov     eax, [ebp+var_30]\n.text:004112F3                 cdq\n.text:004112F4                 xor     ecx, ecx\n.text:004112F6                 idiv    ecx\n.text:004112F8                 mov     [ebp+var_30], eax\n.text:004112FB                 mov     [ebp+var_4], 0FFFFFFFFh\n.text:00411302                 jmp     short loc_411328\n.text:00411304 ; ---------------------------------------------------------------------------\n.text:00411304                 mov     eax, 1\n.text:00411309                 retn\n.text:0041130A ; ---------------------------------------------------------------------------\n.text:0041130A                 mov     esp, [ebp-18h]\n.text:0041130D                 push    0\n.text:0041130F                 push    offset Text     ; \"Error2\"\n.text:00411314                 push    offset Text     ; \"Error2\"\n.text:00411319                 push    0               ; hWnd\n.text:0041131B                 call    ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)\n.text:00411321                 mov     [ebp+var_4], 0FFFFFFFFh\n.text:00411328\n.text:00411328 loc_411328:                             ; CODE XREF: WinMain+A2j\n.text:00411328                 xor     eax, eax\n.text:0041132A                 mov     ecx, [ebp+var_10]\n.text:0041132D                 mov     large fs:0, ecx\n.text:00411334                 pop     edi\n.text:00411335                 pop     esi\n.text:00411336                 pop     ebx\n.text:00411337                 mov     esp, ebp\n.text:00411339                 pop     ebp\n.text:0041133A                 retn    10h\n.text:0041133A WinMain         endp\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "385",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "black4joss",
    "time": "May 29, 2020 at 19:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In binaries compiled with Visual C++, functions which use SEH (Structured exceptions handling), usually use\n  <code>\n   var_4\n  </code>\n  (\n  <code>\n   [ebp-4]\n  </code>\n  ) for the\n  <em>\n   try level\n  </em>\n  value (value specifying the current SEH scope block).\n </p>\n <p>\n  The value 0FFFFFFFFh (or -1) is used for the outermost, global function scope (i.e. before and after any\n  <code>\n   __try\n  </code>\n  blocks).\n </p>\n <p>\n  For more info check\n  <a href=\"http://www.openrce.org/articles/full_view/21\" rel=\"nofollow noreferrer\">\n   my OpenRCE article\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "May 28, 2020 at 19:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">I know a bit about SEH and EXCEPTION_REGISTRATION structures.  Yes, I used C++ __try for this code. Looked at your article, very interesting, so, usage var_4 variable is to marks position of __try blocks in program binary code?</span>",
                    "time": null
                },
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">Additionally I am interesting, what is this line of code doing: <code>text:00411265 push offset unk_414FC8</code> this line of code has stub FFFFFFFF and points to exit: <code>text:004112AE                 mov     eax, 1 .text:004112B3                 retn</code> This line of code is part of SEH, too? Or what?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">The first lines set up the SEH handler for the function and the other snippet is the <code>__except()</code> filter code.</span>",
                    "time": null
                },
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">I thought SEH handler is <code>.text:0041126A                 push    offset loc_411050</code>. what difference between <code>.text:00411265                 push    offset unk_414FC8</code> and <code>.text:0041126A                 push    offset loc_411050</code>? It are both SEH handlers? But this function is not present in SEH chain <code>.text:00411265                 push    offset unk_414FC8</code>. SEH chain started in <code>.text:0041126A                 push    offset loc_411050</code> and not contains unk_414FC8. I am a bit confused, explain please.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Check Appendix I in the article</span>",
                    "time": null
                }
            ]
        }
    ]
}