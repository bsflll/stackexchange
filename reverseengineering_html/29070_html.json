{
    "title": "Proprietary 3D Format Reverse Engineering: What Could These Numbers And Matrices Represent?",
    "link": "https://reverseengineering.stackexchange.com/questions/29070/proprietary-3d-format-reverse-engineering-what-could-these-numbers-and-matrices",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer a model format from an older Russian game (Pathologic) with limited success. It is a proprietary model format not recognized by any converters/editing tools (believe me, I've tried! someone on the fan forums confirmed this with the person behind the engine, also). I'd like to be able to read the models into a potential open-source recreation of the original engine. The original game uses Direct3D and is from 2005, so I read up on relevant docs to get a start. Unfortunately, it's not the \"x\" model format.\n </p>\n <p>\n  <strong>\n   What I've got so far (for a simple mesh):\n  </strong>\n </p>\n <ul>\n  <li>\n   Texture file name/location\n  </li>\n  <li>\n   Number of faces and vertices\n  </li>\n  <li>\n   UV coordinates for each vertex\n  </li>\n  <li>\n   Vertex buffer\n  </li>\n </ul>\n <p>\n  <strong>\n   Things I'm struggling to understand (least to most important)\n  </strong>\n </p>\n <ul>\n  <li>\n   <p>\n    File header: what could it mean?\n   </p>\n  </li>\n  <li>\n   <p>\n    \"Arbitrary\" padding in the file: what could determine its size?\n   </p>\n  </li>\n  <li>\n   <p>\n    12-element float matrices. Could be transformation matrices without the last row - to use with homogenous coordinate systems, but there's 6 of them in a mesh with 4 vertices and 2 faces - isn't that too many?\n   </p>\n  </li>\n  <li>\n   <p>\n    Mysterious 4 bytes describing each vertex: some kind of a color format?\n   </p>\n  </li>\n  <li>\n   <p>\n    Mysterious sets of 3 32-bit floats repeating multiple times - what could it be?\n   </p>\n  </li>\n  <li>\n   <p>\n    Where could the vertex normals be stored?\n   </p>\n  </li>\n </ul>\n <p>\n  Attached is a very simple mesh (way under 1kB) I'm studying before moving on to the more complex ones. I believe it to be a simple textured plane. I've started with a similar mesh that was in XY plane, this one seems to be oriented a bit more arbitrarily. Since it's a plane, I assume it has 4 vertices and 2 faces.\n </p>\n <p>\n  <a href=\"https://drive.google.com/file/d/13pzBcUDmfhanpXx8CPLqPDPZP6-4P_fB/view?usp=sharing\" rel=\"nofollow noreferrer\">\n   Simple Mesh\n  </a>\n </p>\n <p>\n  <strong>\n   File's structure as far as I can understand it\n  </strong>\n </p>\n <ul>\n  <li>\n   Header at 0x00.\n  </li>\n  <li>\n   Texture Filename Length at 0x11 (16 characters here)\n  </li>\n  <li>\n   1 byte padding\n  </li>\n  <li>\n   Texture filename (h2_door_DXT1.tex)\n  </li>\n  <li>\n   1 byte padding\n  </li>\n  <li>\n   Number of vertices at 0x23 (4 vertices)\n  </li>\n  <li>\n   Number of faces at 0x27 (2 faces)\n  </li>\n  <li>\n   12 bytes of recurring 3x 4-byte floats (first occurrence)\n  </li>\n  <li>\n   Mysterious float\n  </li>\n  <li>\n   12 bytes of recurring 3x 4-byte floats (second occurrence)\n  </li>\n  <li>\n   12-element float matrix (transformation matrix?)\n  </li>\n  <li>\n   73 bytes of unknown data\n  </li>\n  <li>\n   12 bytes of recurring 3x 4-byte floats (third occurrence) at 0xC0\n  </li>\n  <li>\n   Data for four vertices at 0xCC. For each vertex, there's 3x int16 for X,Y,Z coordinates, then, 4 mysterious bytes, finally, 2 32-bit floats for UV coordinates.\n  </li>\n  <li>\n   Vertex buffer at 0x114. Two triangle descriptions, for each there's 3x int16 for the vertex IDs.\n  </li>\n </ul>\n <p>\n  After that it becomes a mix of 12-element float matrices and the recurring 3x floats with some padding/magic numbers between them.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/IYd30.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"File's preliminary map in a hex editor\" src=\"https://i.sstatic.net/IYd30.png\"/>\n  </a>\n </p>\n <p>\n  I'd appreciate any and all help with answering my questions/helping with the bullet points I'm struggling on. I could also provide other mesh examples as needed.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "435",
    "tags": [
        "binary-analysis",
        "file-format",
        "binary-format"
    ],
    "user": "Xtal44",
    "time": "Jul 30, 2021 at 23:44",
    "comments": [
        {
            "user": "mindoverflow",
            "text": "<html><body><span class=\"comment-copy\">\n Am I reading these correctly?\n <a href=\"https://pastebin.com/4qLcryW8\" rel=\"nofollow noreferrer\">\n  pastebin.com/4qLcryW8\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Xtal44",
            "text": "<html><body><span class=\"comment-copy\">\n @mindoverflow almost, but not exactly. Between the \"mat?\" float array and list 3 float array there's 73 bytes of data I cannot identify. List 3 should start at 0xC0 (alternatively, offset +192). That would place vertex 0's X coordinate at 0xCC. 0xCC is 7D, 0xCD is 00, giving us 125 (a word, Little Endian). I've added the way I mapped the file out in a hex editor to the original post, I didn't know I could attach images before.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mindoverflow",
            "text": "<html><body><span class=\"comment-copy\">\n I accidentally read 4-byte\n <code>\n  uint16\n </code>\n s, which is nonsense. This should be correct:\n <a href=\"https://pastebin.com/bYjjerNR\" rel=\"nofollow noreferrer\">\n  pastebin.com/bYjjerNR\n </a>\n I'm afraid I can't help you any further here due to my limited knowledge of 3D formats, I'd suggest parsing a lot of headers and looking for correlations.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Xtal44",
            "text": "<html><body><span class=\"comment-copy\">\n @mindoverflow thank you for trying your hand at it!\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mindoverflow",
            "text": "<html><body><span class=\"comment-copy\">\n I had an idea just now and tried to verify it. It's a bit off rouding-wise, but the \"matrices\" could actually be lists of normalized surface normals. That would make a lot more sense than the transformation matrices, too. Either way, could you upload a model that has some more tris?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm giving up for good. If you say that there's 21 .mesh files for 21x the same object in the scene, then chances are good that there's a lot more non-mesh data in this file (as you said, baked shadow info, world pos, colliders, actor references, possibly animation data, ... Sounds unusual to me, but there's probably a reason to put all of this into one file).\n </p>\n <p>\n  I was able to find two zlib compressed streams in the actor file at 0x4B and 0x11C using binwalk, but that's about it. The mesh files are way more complex than they look at first glance...\n </p>\n <p>\n  You might get some more info out of the files by changing random values and observing the effects, but chances are slim that you find out how these files really work without debugging or reverse engineering the executable.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mindoverflow",
            "time": "Aug 9, 2021 at 6:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Xtal44",
                    "text": "<span class=\"comment-copy\">Thank you very much for your efforts! I will look into the zlib compressed streams, also. Reverse engineering the executable is not out of the question - I'm already doing so to figure out the proprietary script format (which also appears to be compiled to some kind of a proprietary assembly language, with C++ classes for each instruction in the main engine DLL) the game uses. Thanks for the suggestions.</span>",
                    "time": null
                }
            ]
        }
    ]
}