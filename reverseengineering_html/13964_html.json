{
    "title": "How to differentiate between while(1) and do while?",
    "link": "https://reverseengineering.stackexchange.com/questions/13964/how-to-differentiate-between-while1-and-do-while",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can one recognize the difference between\n  <code>\n   while (1)\n  </code>\n  and\n  <code>\n   do ... while\n  </code>\n  in assembly?\n </p>\n <p>\n  thanks\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "717",
    "tags": [
        "disassembly"
    ],
    "user": "dvir1234",
    "time": "Nov 18, 2016 at 8:51",
    "comments": [
        {
            "user": "JAL",
            "text": "<html><body><span class=\"comment-copy\">\n Is the\n <code>\n  do while\n </code>\n statement\n <code>\n  do { } while(1)\n </code>\n ?  Or is there a different condition than\n <code>\n  true\n </code>\n in the\n <code>\n  while\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n Different compilers employ different conventions on various optimization levels. I fear there is no 'generic' way.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Lupe",
            "text": "<html><body><span class=\"comment-copy\">\n As others have said, it varies between compilers. You can use IDA Pro or another program to decompile, and for things like this they're pretty accurate. I'm honestly not sure if it's in the demo version of IDA. The difference between those two loops is whether the chunk is evaluated first, so if you can isolate the while code you can just see whether it checks a condition before or after executing the body (probably. Optimizations can do very dirty stuff).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This answer assumes you are trying to compare\n  <code>\n   while (1)\n  </code>\n  with\n  <code>\n   do { } while(1)\n  </code>\n  for simplicity, but should work with other conditions:\n </p>\n <p>\n  Take these two small C programs:\n </p>\n <p>\n  Just\n  <code>\n   while\n  </code>\n  :\n </p>\n <pre><code>#include <stdio.h>\nint main(){\n   while(1)\n      printf(\"This is a loop\n\");\n   return 0;\n}\n</code></pre>\n <p>\n  and\n  <code>\n   do while\n  </code>\n  :\n </p>\n <pre><code>#include <stdio.h>\nint main(){\n   do\n      printf(\"This is a loop\n\");\n   while(1);\n}\n</code></pre>\n <p>\n  Using gcc/clang to generate the platform-specific assembly (I'm on an Intel Mac) with\n  <code>\n   gcc -S loop.c\n  </code>\n  , we can see the differences in the calls:\n </p>\n <p>\n  Just\n  <code>\n   while\n  </code>\n  :\n </p>\n <pre><code>    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 11\n    .globl  _main\n    .align  4, 0x90\n_main:                                  ## @main\n    .cfi_startproc\n## BB#0:\n    pushq   %rbp\nLtmp0:\n    .cfi_def_cfa_offset 16\nLtmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLtmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    movl    $0, -4(%rbp)\nLBB0_1:                                 ## =>This Inner Loop Header: Depth=1\n    leaq    L_.str(%rip), %rdi\n    movb    $0, %al\n    callq   _printf\n    movl    %eax, -8(%rbp)          ## 4-byte Spill\n    jmp LBB0_1\n    .cfi_endproc\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .asciz  \"This is a loop\n\"\n\n\n.subsections_via_symbols\n</code></pre>\n <p>\n  <code>\n   do while\n  </code>\n  :\n </p>\n <pre><code>    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 11\n    .globl  _main\n    .align  4, 0x90\n_main:                                  ## @main\n    .cfi_startproc\n## BB#0:\n    pushq   %rbp\nLtmp0:\n    .cfi_def_cfa_offset 16\nLtmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLtmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    movl    $0, -4(%rbp)\nLBB0_1:                                 ## =>This Inner Loop Header: Depth=1\n    leaq    L_.str(%rip), %rdi\n    movb    $0, %al\n    callq   _printf\n    movl    %eax, -8(%rbp)          ## 4-byte Spill\n## BB#2:                                ##   in Loop: Header=BB0_1 Depth=1\n    movb    $1, %al\n    testb   $1, %al\n    jne LBB0_1\n    jmp LBB0_3\nLBB0_3:\n    movl    -4(%rbp), %eax\n    addq    $16, %rsp\n    popq    %rbp\n    retq\n    .cfi_endproc\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .asciz  \"This is a loop\n\"\n\n\n.subsections_via_symbols\n</code></pre>\n <p>\n  Notice the extra\n  <code>\n   LBB0_3\n  </code>\n  subroutine generated from the\n  <code>\n   do while\n  </code>\n  code.  We get the extra Jump Not Equal instruction because we need to check if the condition of the\n  <code>\n   while\n  </code>\n  expression has been met after the statements in the\n  <code>\n   do\n  </code>\n  block have been executed.\n </p>\n <p>\n  This was a helpful resource on Stack Overflow:\n  <a href=\"https://stackoverflow.com/q/14063753/2415822\">\n   while(true) / while(1) vs. for(;;)\n  </a>\n </p>\n <p>\n  As Igor Skochinsky mentions in the comments, compiling each program with optimizations (\n  <code>\n   -O3\n  </code>\n  ) will give you the exact same assembly.  While this exercise was done on tiny programs with no optimizations, in reality, both loops accomplish the same thing and (depending on the compiler) would probably generate the same assembly.  In reality, it is very difficult (if not impossible) to differentiate between a loop which uses\n  <code>\n   while(1)\n  </code>\n  and\n  <code>\n   do { } while(1)\n  </code>\n  , because they both do the same thing.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">now try again with some optimization</span>",
                    "time": null
                },
                {
                    "user": "JAL",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky Thanks, added a note about how both programs should compile to the same assembly with optimizations.</span>",
                    "time": null
                }
            ]
        }
    ]
}