{
    "title": "Could this be a Math.Min function decompiled in C?",
    "link": "https://reverseengineering.stackexchange.com/questions/6693/could-this-be-a-math-min-function-decompiled-in-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working with a function thats similar to Memory Resize like\n  <code>\n   realloc\n  </code>\n  /\n  <code>\n   redim\n  </code>\n  in VB.\n </p>\n <p>\n  The first 3 lines decompiled look like\n </p>\n <pre><code>char *__cdecl ExpandMemory(void *lpAddress, signed int StartPos, signed int MaxSize)\n{\n    int NewSize; // edi@3\n\n    if ( StartPos > 0x80000 )\n        MaxSize = 16 * MaxSize;\n    NewSize = MaxSize * (MaxSize + StartPos - 1) / MaxSize;\n    //Lots of stuff goes here\n}\n</code></pre>\n <p>\n  Can someone tell me what this line is suppose to do\n </p>\n <p>\n  <code>\n   NewSize = MaxSize * (MaxSize + StartPos - 1) / MaxSize;\n  </code>\n </p>\n <p>\n  I have a very strong feeling its a\n  <code>\n   Math.MIN()\n  </code>\n  function without\n  <code>\n   ?:\n  </code>\n </p>\n <p>\n  Since MIN function is declared like this\n </p>\n <pre><code>#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))\n</code></pre>\n <p>\n  I don't understand how that math could resemble it, could someone explain what it's suppose to do.\n </p>\n <p>\n  As far as I know it doesn't even work properly keeps creating a NewSize which is far greater then the MaxSize, if it could work can someone explain how it could actually work?\nIn most spots the MaxSize parameter is usually\n  <code>\n   1\n  </code>\n  which indicates no limit and uses StartPos only, where MaxSize is used it usually is 65536 or 2048 some binary values. But it doesn't have anything to do with binary what so ever.\n </p>\n <p>\n  In ASM the code looks like this\n </p>\n <pre><code>.text:004083BC                 lea     eax, [ecx+eax-1]\n.text:004083C0                 cdq\n.text:004083C1                 idiv    ecx\n.text:004083C3                 mov     edi, eax\n.text:004083C5                 imul    edi, ecx\n.text:004083C8                 mov     ecx, [esp+114h+arg_0]\n</code></pre>\n <p>\n  Full decompiled source:\n </p>\n <pre><code>char *__cdecl ExpandMemory(void *a1, signed int NewSize, signed int MaxSize)\n{\n  signed int HowMuchBiggerr; // ecx@1\n  int NewSizee; // edi@3\n  char *v5; // eax@5\n  char *v6; // esi@8\n  char *result; // eax@13\n  void *v8; // eax@15\n  signed int v9; // esi@18\n  int v10; // edi@18\n  char *v11; // eax@22\n  char *v12; // eax@27\n  char *v13; // ebp@30\n  unsigned int v14; // ecx@35\n  void *Memory; // [sp+10h] [bp-104h]@18\n  char Text[256]; // [sp+14h] [bp-100h]@11\n\n  HowMuchBiggerr = MaxSize;\n  if ( NewSize > (signed int)0x80000u )\n    HowMuchBiggerr = 16 * MaxSize;\n  NewSizee = HowMuchBiggerr * (HowMuchBiggerr + NewSize - 1) / HowMuchBiggerr;\n  if ( a1 )\n  {\n    if ( NewSizee )\n    {\n      v9 = *((_DWORD *)a1 - 1);                 // Okay minus 4 bytes from beginning of pointed data is size? (must be a special structure of some kind)\n      v10 = NewSizee + 4;\n      Memory = (char *)a1 - 4;\n      if ( v10 == v9 )                          // Check if special attribute (Size?) exists and equals the New Size so it can ignore it.\n      {\n        result = (char *)a1;\n      }\n      else\n      {\n        if ( v9 > (signed int)0x80000u || v10 > (signed int)0x80000u )\n        {\n          if ( v10 <= (signed int)0x80000u )\n            v12 = (char *)malloc(v10);\n          else\n            v12 = (char *)VirtualAlloc(0, v10, 0x1000u, 4u);\n          if ( v12 )\n          {\n            *(_DWORD *)v12 = v10;\n            v13 = v12 + 4;\n          }\n          else\n          {\n            v13 = 0;\n          }\n          if ( !v13 )\n          {\n            sprintf(Text, \"Out of memory (Alloc:%d)\", v10 - 4);\n            MessageBoxA(0, Text, \"Error\", 0x30u);\n            exit(1);\n          }\n          v14 = v9 - 4;\n          if ( v9 - 4 >= v10 - 4 )\n            v14 = v10 - 4;\n          memcpy(v13, a1, v14);\n          if ( *(_DWORD *)Memory <= (signed int)0x80000u )\n          {\n            free(Memory);\n            result = v13;\n          }\n          else\n          {\n            VirtualFree(Memory, 0, 0x8000u);\n            result = v13;\n          }\n        }\n        else\n        {\n          v11 = (char *)realloc((char *)a1 - 4, v10);\n          if ( !v11 )\n          {\n            MessageBoxA(0, \"Out of memory (Resize)\", \"Error\", 0x30u);\n            exit(1);\n          }\n          *(_DWORD *)v11 = v10;\n          result = v11 + 4;\n        }\n      }\n    }\n    else\n    {\n      v8 = (char *)a1 - 4;\n      if ( *((_DWORD *)a1 - 1) <= (signed int)0x80000u )\n      {\n        free(v8);\n        result = 0;\n      }\n      else\n      {\n        VirtualFree(v8, 0, 0x8000u);\n        result = 0;\n      }\n    }\n  }\n  else\n  {\n    if ( NewSizee + 4 <= (signed int)0x80000u )\n      v5 = (char *)malloc(NewSizee + 4);\n    else\n      v5 = (char *)VirtualAlloc(0, NewSizee + 4, 0x1000u, 4u);\n    if ( v5 )\n    {\n      *(_DWORD *)v5 = NewSizee + 4;\n      v6 = v5 + 4;\n    }\n    else\n    {\n      v6 = 0;\n    }\n    if ( !v6 )\n    {\n      sprintf(Text, \"Out of memory (Alloc:%d)\", NewSizee);\n      MessageBoxA(0, Text, \"Error\", 0x30u);\n      exit(1);\n    }\n    result = v6;\n  }\n  return result;\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "199",
    "tags": [
        "assembly",
        "decompile"
    ],
    "user": "SSpoke",
    "time": "Nov 24, 2014 at 0:49",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  MaxSize\n </code>\n should be more properly called\n <code>\n  alignment\n </code>\n or\n <code>\n  granularity\n </code>\n . And\n <code>\n  StartPos\n </code>\n is probably the size of requested memory (not aligned).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n I don't know anything about\n <code>\n  alignment\n </code>\n but yeah\n <code>\n  StartPos\n </code>\n isn't a good name I've changed it to\n <code>\n  Bytes\n </code>\n but\n <code>\n  MaxSize\n </code>\n does seem to be a limiter so it doesn't allocate too much memory. I've updated the question with the whole source code. I know you probably wouldn't want to help me as I am using your pirated software. But all I can say is it does a pretty damn good job. I've found one problem where it did parenthesis incorrectly in logic which resulted in wrong answer, but that's about it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looks like a common pattern for\n  <a href=\"https://stackoverflow.com/a/2745086/516037\">\n   ceiling\n  </a>\n  to me.\n </p>\n <p>\n  In other words\n  <code>\n   NewSize = ceil(StartPos/MaxSize) * MaxSize\n  </code>\n  , which is rounding it to the nearest multiple of\n  <code>\n   MaxSize\n  </code>\n  that is larger than\n  <code>\n   StartPos\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Yeah it does looks pretty close to a <code>ceil</code> pattern without the multiply though.</span>",
                    "time": null
                }
            ]
        }
    ]
}