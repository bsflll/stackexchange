{
    "title": "How to re-use some asm code when GOT/GOT.PLT references involved?",
    "link": "https://reverseengineering.stackexchange.com/questions/4751/how-to-re-use-some-asm-code-when-got-got-plt-references-involved",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Basically I am trying to re-use some asm code disassembled from a binary on x86 32bit Linux.\n </p>\n <p>\n  I am facing some trouble when references of GOT/GOT.PLT involved like these.\n </p>\n <pre><code>  ....\n  804c460:       53                      push   %ebx\n  804c461:       e8 ec ff ff ff          call   804c452 <__i686.get_pc_thunk.bx>\n  804c466:       81 c3 8e 2b 00 00       add    $0x2b8e,%ebx   // %ebx has the beginning address of GOT table\n  804c46c:       83 ec 18                sub    $0x18,%esp\n  ....\n</code></pre>\n <p>\n  If I want to re-use these asm code, I have to\n  <strong>\n   lift concrete address into symbols\n  </strong>\n  , and it seems that in the above code, I have to find a way to let\n  <code>\n   ebx\n  </code>\n  store the begin address of\n  <code>\n   GOT\n  </code>\n  table.\n </p>\n <p>\n  Well... then do I have to modify the linker...? Because the begin address of\n  <code>\n   GOT\n  </code>\n  table can't be decided until link time..\n </p>\n <p>\n  So my questions are:\n </p>\n <ol>\n  <li>\n   <p>\n    Is modifying linker a right way to do this ..? Is there any other way?\n   </p>\n  </li>\n  <li>\n   <p>\n    How to modify the linker in this issue..? I basically have no experiences before..\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "723",
    "tags": [
        "disassembly",
        "assembly",
        "reassembly",
        "dynamic-linking"
    ],
    "user": "lllllllllllll",
    "time": "Jul 1, 2014 at 18:57",
    "comments": [
        {
            "user": "drum",
            "text": "<html><body><span class=\"comment-copy\">\n Are you trying to do ROP?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<html><body><span class=\"comment-copy\">\n @drum , No, I am not. I am trapped in how to re-use this asm code..\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "nrz",
            "text": "<html><body><span class=\"comment-copy\">\n Or maybe can you write a postprocessor that modifies the binary after linking, with disassembly and binary as input? The postprocessor could alternatively modify the assembly code or create 2nd/3rd generation assembly code to be assembled again, using binary and disassembly as source. Probably it could be done by modifying (or rewriting) the code of my answer to your SO question:\n <a href=\"http://stackoverflow.com/questions/20506524/can-i-combine-all-the-sections-objdump-s-d-elf-file-generate-into-a-re-assem/20510168#20510168\" title=\"can i combine all the sections objdump s d elf file generate into a re assem\">\n  stackoverflow.com/questions/20506524/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you're using GAS or a compatible assembler, you can use special modifiers to have it emit relocation info for GOT-based addressing.\n </p>\n <p>\n  Here's the\n  <code>\n   gcc -S\n  </code>\n  output of a typical prolog of a function compiled with\n  <code>\n   -fPIC\n  </code>\n  :\n </p>\n <pre><code>call    __i686.get_pc_thunk.bx\naddl    $_GLOBAL_OFFSET_TABLE_, %ebx\nleal    .LC0@GOTOFF(%ebx), %eax\nmovl    %eax, (%esp)\ncall    puts@PLT\n</code></pre>\n <p>\n  As you can see, you can replace the\n  <code>\n   %ebx\n  </code>\n  addendum with\n  <code>\n   $_GLOBAL_OFFSET_TABLE_\n  </code>\n  , and other GOT-relative offsets with\n  <code>\n   symbol@GOTOFF\n  </code>\n  . In some cases you may also need\n  <code>\n   @GOTPLT\n  </code>\n  or\n  <code>\n   @GOTPCREL\n  </code>\n  modifiers. See\n  <a href=\"http://www.mindfruit.co.uk/2012/06/relocations-relocations.html\" rel=\"nofollow\">\n   here\n  </a>\n  for more info (mostly x64-specific, but still useful).\n </p>\n <p>\n  If your file is relocatable or a shared object, disassembling it with\n  <code>\n   -dr\n  </code>\n  (so you see relocation info) can be useful to see places where you may need to add back the symbol modifiers.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jul 2, 2014 at 10:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">It works!! This is very helpful, thank you a lot Igor!</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">For one thing I think it is necessary to point out for future readers is that \" I wonder whether all incarnations of gcc compile <i>GLOBAL_OFFSET_TABLE</i> to be the same as the start-address of <code>.got.plt</code>\"  from that <a href=\"http://www.mindfruit.co.uk/2012/06/relocations-relocations.html\" rel=\"nofollow noreferrer\">article</a></span>",
                    "time": null
                }
            ]
        }
    ]
}