{
    "title": "Why Ida pseudo-code translate test as AND?",
    "link": "https://reverseengineering.stackexchange.com/questions/20769/why-ida-pseudo-code-translate-test-as-and",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In IDA when disassembling a x86 EXE file there is a line\n </p>\n <pre><code>test byte ptr [ebp+XXX], cl\n</code></pre>\n <p>\n  Before this line\n  <code>\n   cl\n  </code>\n  has a value of\n  <code>\n   0x11\n  </code>\n </p>\n <p>\n  The Hex-Rays decompiler plugin translates it as\n  <code>\n   if (v10 &0x11)\n  </code>\n  .\n </p>\n <p>\n  Why is\n  <code>\n   test\n  </code>\n  decompiled like\n  <code>\n   and\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "174",
    "tags": [
        "ida",
        "assembly",
        "x86",
        "hexrays"
    ],
    "user": "psudoCode",
    "time": "Mar 5, 2019 at 21:08",
    "comments": [
        {
            "user": "David",
            "text": "<html><body><span class=\"comment-copy\">\n It seems likely you are referring to the Hex-Rays decompiler. This integrates very well with IDA and is by the same company. However, they are separate products and you can use IDA without a decompiler. It might be worth updating your question.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n did  you ever read the\n <a href=\"https://www.felixcloutier.com/x86/test\" rel=\"nofollow noreferrer\">\n  <code>\n   test\n  </code>\n  instruction's manual\n </a>\n , or at least google for\n <code>\n  x86 test instruction\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://www.felixcloutier.com/x86/test\" rel=\"nofollow noreferrer\">\n   <code>\n    test\n   </code>\n  </a>\n  is basically an\n  <a href=\"https://www.felixcloutier.com/x86/and\" rel=\"nofollow noreferrer\">\n   <code>\n    and\n   </code>\n  </a>\n  instruction except it doesn't update the left operand.\nIn the other hand,\n  <a href=\"https://www.felixcloutier.com/x86/cmp\" rel=\"nofollow noreferrer\">\n   <code>\n    cmp\n   </code>\n  </a>\n  is the equivalent of\n  <a href=\"https://www.felixcloutier.com/x86/sub\" rel=\"nofollow noreferrer\">\n   <code>\n    sub\n   </code>\n  </a>\n  instruction except it doesn't update the left operand.\n </p>\n <p>\n  To sum up:\n </p>\n <pre><code>if (v & n)\n</code></pre>\n <p>\n  Is compiled as\n  <code>\n   test\n  </code>\n  instruction.\n </p>\n <pre><code>if (v == n)\n</code></pre>\n <p>\n  Is compiled as\n  <code>\n   cmp\n  </code>\n  instruction (or\n  <code>\n   test reg, reg\n  </code>\n  is n is 0x0)\n </p>\n <pre><code>v = a & n\n</code></pre>\n <p>\n  Is compiled as\n  <code>\n   and\n  </code>\n  instruction.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "wisk",
            "time": "Mar 4, 2019 at 14:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}