{
    "title": "Difference between INT 0X80 and SYSCALL",
    "link": "https://reverseengineering.stackexchange.com/questions/16702/difference-between-int-0x80-and-syscall",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <strong>\n   SYSCALL\n  </strong>\n  instruction is said to be the 64-bit version of\n  <strong>\n   INT 0X80\n  </strong>\n  , however it's still possible to use the latter in 64-bit code (although\n  <a href=\"https://linux.die.net/man/1/strace\" rel=\"noreferrer\">\n   strace\n  </a>\n  decodes it wrong because of the 64-bit ABI I guess) which usually goes through a\n  <a href=\"https://github.com/torvalds/linux/blob/e7d0c41ecc2e372a81741a30894f556afec24315/arch/x86/entry/entry_64_compat.S#L267\" rel=\"noreferrer\">\n   \"legacy entry\"\n  </a>\n  . But there's something I don't quite understand, why is the\n  <em>\n   SYSCALL\n  </em>\n  instruction faster?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "18k",
    "tags": [
        "x86",
        "system-call"
    ],
    "user": "Trey",
    "time": "Nov 3, 2017 at 16:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The short answer is that\n  <code>\n   syscall\n  </code>\n  has less overhead than\n  <code>\n   int 0x80\n  </code>\n  .\n </p>\n <p>\n  For more details on why this is the case, see the accepted answer to\n  <a href=\"https://stackoverflow.com/questions/15168822/intel-x86-vs-x64-system-call\">\n   Intel x86 vs x64 system call\n  </a>\n  , where a nearly identical question was asked:\n </p>\n <blockquote>\n  <p>\n   I'm told that syscall is lighter and faster than generating a software interrupt. Why it is faster on x64 than x86, and can I make a system call on x64 using int 80h?\n  </p>\n </blockquote>\n <p>\n  See also:\n </p>\n <ul>\n  <li>\n   <a href=\"https://lkml.org/lkml/2002/12/9/13\" rel=\"noreferrer\">\n    Intel P6 vs P7 system call performance\n   </a>\n   <ul>\n    <li>\n     this email thread discusses the observed slowdown on certain Intel CPUs caused by the overhead associated with\n     <code>\n      int 0x80\n     </code>\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://articles.manugarg.com/systemcallinlinux2_6.html\" rel=\"noreferrer\">\n     Sysenter Based System Call Mechanism in Linux 2.6\n    </a>\n   </p>\n   <blockquote>\n    <p>\n     It was found out that this software interrupt method [int 0x80] was much slower on Pentium IV processors. To solve this issue, Linus implemented an alternative system call mechanism to take advantage of SYSENTER/SYSEXIT instructions provided by all Pentium II+ processors.\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://www.win.tue.nl/~aeb/linux/lk/lk-4.html\" rel=\"noreferrer\">\n     The Linux kernel, 4.6 Sysenter and the vsyscall page (2003)\n    </a>\n   </p>\n   <blockquote>\n    <p>\n     It has been observed that a 2 GHz Pentium 4 was much slower than an 850 MHz Pentium III on certain tasks, and that this slowness is caused by the very large overhead of the traditional\n     <code>\n      int 0x80\n     </code>\n     interrupt on a Pentium 4. Some models of the i386 family do have faster ways to enter the kernel. On Pentium II there is the\n     <code>\n      sysenter\n     </code>\n     instruction. Also AMD has a\n     <code>\n      syscall\n     </code>\n     instruction.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "11",
            "user": "julian",
            "time": "Nov 3, 2017 at 18:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}