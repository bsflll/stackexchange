{
    "title": "Why doesn't this retn instruction return from the function?",
    "link": "https://reverseengineering.stackexchange.com/questions/18878/why-doesnt-this-retn-instruction-return-from-the-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I disassembled an exe file on Windows with IDA and saw this function prologue:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/jTNS2.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"ida\" src=\"https://i.sstatic.net/jTNS2.png\"/>\n  </a>\n </p>\n <p>\n  I see that when the\n  <code>\n   retn\n  </code>\n  executes instead of returning it jumps to\n  <code>\n   sub_1314cba4\n  </code>\n  .\n </p>\n <ol>\n  <li>\n   <p>\n    Why doesn't the\n    <code>\n     retn\n    </code>\n    instruction actually return? I thought returning in the entry point will always exit the process.\n   </p>\n  </li>\n  <li>\n   <p>\n    Why isn't the stack damaged? The function doesn't allocate any stack space using\n    <code>\n     sub esp, 0x...\n    </code>\n    for example.\n   </p>\n  </li>\n  <li>\n   <p>\n    Is this behavior strange?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "515",
    "tags": [
        "ida",
        "windows",
        "obfuscation",
        "executable",
        "stack"
    ],
    "user": "Jonert6544",
    "time": "Jul 25, 2018 at 11:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    The address of\n    <code>\n     sub_1313cba4\n    </code>\n    is moved to PC/IP but not directly, as this cannot be done. It is done by pushing the address to the stack and relying on the fact that\n    <code>\n     retn\n    </code>\n    will get what's on the top of the stack and redirect the execution there.\n   </p>\n  </li>\n  <li>\n   <p>\n    Well, it depends on what you mean by damaging the stack. The stack is just a place in memory and the damage can only occur by not correctly handling data on it. For example, trying to redirect execution to an address that doesn't represent the code. If an application is built with keeping in mind what's on the stack at any moment it can correctly continue execution.\n   </p>\n  </li>\n  <li>\n   <p>\n    It is considered strange in normal applications, as this is not the normal way. If we are talking about crackmes, malware or any obfuscated binaries, then this is standard practice. It is done to make the reversing process more complex as calling functions this way is harder for tools to follow. It also makes harder for the reverser to follow the application's logic.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Avery3R",
            "time": "Jul 24, 2018 at 18:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My answers:\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     Why is that?\n    </strong>\n    The program you are looking at is probably using some software obfuscation because this is not a usual way to return from a function. My guess is that this function is just here to break automatic binary analysis.\n   </p>\n   <p>\n    Now, what does happen precisely here... In fact, this is quite simple, the address of\n    <code>\n     sub_1313cba4\n    </code>\n    is pushed on to the stack and the\n    <code>\n     ret\n    </code>\n    instruction is executed. Basically,\n    <code>\n     ret\n    </code>\n    will just do a\n    <code>\n     pop eip\n    </code>\n    (beware, such instruction does not exist as we cannot address the\n    <code>\n     eip\n    </code>\n    register in i386). So, it will load the address of the subroutine\n    <code>\n     sub_1313cba4\n    </code>\n    into\n    <code>\n     eip\n    </code>\n    and will start executing it (the memory context, I mean the stack, will remain as it is now. No new stack-frame will be created, so the subroutine must take this into account to work properly).\n   </p>\n   <p>\n    This way of doing will totally lose the track of the call-stack by not following the rules (and will disturb many binary analysis tools such as IDA).\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     How comes this function do not damage the stack?\n    </strong>\n    This function does damage the [call] stack. It will be very hard to recover the call-stack starting from this point. But, it might be intended by the programmer of the software. As I was telling before, I really suspect some software obfuscation here.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Is that behavior strange?\n    </strong>\n    Yes, this is totally non-standard and probably intended to be.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jul 24, 2018 at 18:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}