{
    "title": "While loop function disassembly x86",
    "link": "https://reverseengineering.stackexchange.com/questions/19978/while-loop-function-disassembly-x86",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to convert this binary to C but I am having trouble with the while loop. What does\n  \n\n  <code>\n   sub esp, 8\n  </code>\n  mean? as well as\n  <code>\n   push [ebp+_a]\n  </code>\n  ? I am able to get the esp 8 sometimes while changing the print statement. Why is this the case?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SJwYT.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"fig1\" src=\"https://i.sstatic.net/SJwYT.png\"/>\n  </a>\n </p>\n <p>\n  What I have so far.\n </p>\n <pre><code>    #include <stdio.h>\n\n    int main(int argc, char *argv[])\n\n{\n    int a = 9;\n\n    while (a) {\n\n        printf(\"%d, \");\n        --a;\n    }\n        puts(\"FIRE!\");\n\n    return 0;\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "432",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "Luke Snyder",
    "time": "Nov 27, 2018 at 4:23",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n You don't need to have the exact same assembly, just have the logic right. Correct?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When the printf function is called (or any other function), it takes all its arguments from the stack. In x86, According to\n  <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl\" rel=\"nofollow noreferrer\">\n   cdecl\n  </a>\n  arguments are pushed in reverse order. So, first the integer value a is pushed on to the top of the stack (\n  <code>\n   push [ebp+_a]\n  </code>\n  ) and then the string\n  <code>\n   \"%d ,\"\n  </code>\n  is pushed on to the stack (\n  <code>\n   push offset aD\n  </code>\n  ). While printf pops the arguments out, first it takes out the \"%d, \" and then it gets the value of a i.e.,\n  <code>\n   [ebp+_a]\n  </code>\n  . The stack pointer should also be changed accordingly so that the printf function will get the right arguments. Hence the instruction\n  <code>\n   sub esp, 8\n  </code>\n  which changes the stack pointer(esp).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xVikas",
            "time": "Nov 27, 2018 at 10:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2347953",
                    "text": "<span class=\"comment-copy\">Actually, <code>sub esp, 8</code> is there to align the stack on a 16 byte boundary.</span>",
                    "time": null
                }
            ]
        }
    ]
}