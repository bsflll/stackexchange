{
    "title": "NAND flash programming over host MCU JTAG",
    "link": "https://reverseengineering.stackexchange.com/questions/24776/nand-flash-programming-over-host-mcu-jtag",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  We starting mass production of a custom device. It uses Chinese MCU LT1901. MCU core is arm926ej-s.\nMCU boots from NAND flash. We are forced to program NAND flash before soldering on PCB.\nI don't like it. I want to have a way to program NAND after soldering over JTAG.\nI have only Chinese documentation for this MCU and this document doesn't have information about JTAG. \nI have JTAGs like Link, FT2232H module.\nI know in theory it's possible to do over JTAG.\nBut is it possible if I have not information about JTAG?\nI tried to connect J-Link commander for different devices with the same core, but it fails.\nWhat is the easiest way to program NAND over JTAG in my case?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "854",
    "tags": [
        "jtag"
    ],
    "user": "uriy",
    "time": "Apr 20, 2020 at 19:52",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. The way JTAG works I don't think you can do that without basically finding out about every single device in the chain that you want to access. I'd be intrigued, though, to see if anyone has a way to do this without BSDL file. Name of the vendor and so on would possibly help us to look for information on our own, also.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "uriy",
            "text": "<html><body><span class=\"comment-copy\">\n The manufacturer is Chinese company linktop. This chip also has inside DSP core called ZSP. I have not BSDL file, but I have datasheet with registers information and I have source codes of project for this chip. I can't open datasheet and source codes for 3rd party. I am under NDA. Also I have two JTAG hardware for this chip. It is a different JTAG for ARM and DSP cores. They works only under XP, and I work with them only in China on Chinese PCs. I never used them on my PC, need windows XP. And JTAG for ARM is for LPT port.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are two possible ways of programming flash over JTAG in such a circuit:\n </p>\n <ol>\n  <li>\n   <p>\n    use JTAG boundary scan to directly bitbang flash chip pins connected to the CPU as if you connected programmer to it. This usually requires detailed mapping of chip pins to boundary scan register (e.g. BDSL file), knowledge of how the flash chip is connected to the CPU, and programming algorithms. AFAIK\n    <a href=\"http://urjtag.org/\" rel=\"nofollow noreferrer\">\n     urJTAG project\n    </a>\n    offers some facilities for this but you will likely need to customize if for your specific project.\n   </p>\n  </li>\n  <li>\n   <p>\n    use JTAG debugging functionality (e.g. ARM's CoreSight) to upload a small program into the CPU RAM that would effectively turn the CPU into a flash programmer and allow you to program the chip connected to it. Advantage of this method is that it's less dependent on specific pinout and connectivity between CPU and flash, much faster than boundary scan bitbanging.\n    <a href=\"http://openocd.org/doc-release/html/Flash-Programming.html\" rel=\"nofollow noreferrer\">\n     OpenOCD\n    </a>\n    implements flashing algorithms for many CPUs and flash chips. You can also look into commercial products like\n    <a href=\"https://www.segger.com/products/debug-probes/j-link/technology/flash-download/\" rel=\"nofollow noreferrer\">\n     Segger J-Link\n    </a>\n    .\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 21, 2020 at 8:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">This sounds quite theoretical and carries some big ifs. Number 1 seems right out, because the necessary information simply isn't there. So it would only become viable with detailed information, no? If not, what am I missing? Basically I am wondering how your point 1 differs from the comment I made on the question. But the second one sounds very intriguing and since the MCU must be bootable right now, it even seems viable.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@0xC0000022L yes, ideally you need BSDL. but in theory you can figure it out by setting the pins via boundary scan and measuring outputs with a multimeter. It can probably be even automated somewhat. Anyway, I thought it's worth mentioning even if not applicable in this specific case.</span>",
                    "time": null
                }
            ]
        }
    ]
}