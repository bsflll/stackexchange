{
    "title": "General x86 to C tips?",
    "link": "https://reverseengineering.stackexchange.com/questions/18159/general-x86-to-c-tips",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently trying to finish an assignment for one of my classes that requires a sequence of ten Hexadecimal numbers for it not to blow up. The task is to find these numbers and input them in the correct order to diffuse the so called \"bomb\". We are given the y86 source code (which coincidentally also contains x86 assembly code).\n </p>\n <p>\n  My question is, are there any general tips for either finding these numbers in the memory or converting parts of the code to C code by just looking at the x86 code? I understand what each individual call is doing I'm just not sure where to start when it involves over 500 lines of assembly code.\n </p>\n <p>\n  I understand it might be difficult to give such general advice, but any help is appreciated. Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "335",
    "tags": [
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "T. Pruden",
    "time": "May 3, 2018 at 23:35",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n If you have the source code you should be able to assemble it and then use a debugger to step through the binary\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  there is a web based\n  <strong>\n   <a href=\"https://xsznix.github.io/js-y86/\" rel=\"nofollow noreferrer\">\n    emulator / simulator for y86 code /js-y86/\n   </a>\n  </strong>\n </p>\n <p>\n  you can step through in this\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/kMXXx.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/kMXXx.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "May 4, 2018 at 9:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "T. Pruden",
                    "text": "<span class=\"comment-copy\">So I tried this out and it turns out some of the hex digits in my source code arent accepted by this emulator... I guess I'll going to have to resort to just looking at the code itself.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The numbers could be either stored in memory or they could be arithmetically calculated. The former case could occur when they are defined as global constants or when the code generates these values and writes them to memory some time during execution before doing the comparison with the input sequence. In addition, even though a single hexadecimal digit (I assume that by \"number\" you mean a single digit rather than some unlimited number of digits) requires only 4 bits to represent, there are really many different ways to represent the 10 hex digits. So a 4-byte register might be used to hold a single digit or multiple digits. As you can see, there are many possibilities. So directly looking for the numbers is not the fastest way to figure them out and you're likely to get blown up.\n </p>\n <p>\n  However, the code must contain a sequence of instructions that basically somehow compare the input sequence with the actual numbers. Basically ten (or less) comparisons need to be performed. It's likely that on the first inequality, a jump will be performed to the code that \"blows up the bomb\". Therefore, I think that you should start by examining all the\n  <code>\n   jne\n  </code>\n  instructions (same in x86). Examine the code around, see if there is a loop structure or some kind of repetitive comparisons. It's also a good idea to look for\n  <code>\n   mrmovl\n  </code>\n  around\n  <code>\n   jne\n  </code>\n  in a loop, indicating that the numbers are being fetched from memory. If that lead you nowhere, then you can examine the code around\n  <code>\n   je\n  </code>\n  or\n  <code>\n   jmp\n  </code>\n  , which could also be used together to construct loops. Note that if you found a suspicious loop, but without\n  <code>\n   mrmovl\n  </code>\n  , then the numbers might be arithmetically calculated in the loop.\n </p>\n <p>\n  This way, even if you were given 10s of thousands of assembly code, there will still be relatively very few\n  <code>\n   jne\n  </code>\n  or\n  <code>\n   je\n  </code>\n  instructions. Examining each of them should take few minutes only.\n </p>\n <p>\n  Now once you find a piece of code that seems to be comparing ten numbers against other 10 numbers, you can trace that back to the entry point of the program to make sure that it is the input sequence that is being compared against and that it is not some bogus piece of code or something else. This process can be made easier by building the control flow graph of the program using some tool. But your code is small enough so you can do it manually I guess.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Hadi Brais",
            "time": "May 7, 2018 at 0:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}