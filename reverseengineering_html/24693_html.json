{
    "title": "Windows or Linux x86 Scheduler instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/24693/windows-or-linux-x86-scheduler-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to understand how multi process scheduler works on x86 CPU with Linux or Windows kernels.\n </p>\n <p>\n  I have read there is a kind of \"timer\" inside CPU. This timer gives \"time slices\" to each process.\n </p>\n <p>\n  What i want to understand is what really happens when a time slice is finished. Does an interrupt fire ? or something else ? I suppose kernel code is runned between 2 slices but how...\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "138",
    "tags": [
        "kernel-mode",
        "kernel"
    ],
    "user": "Bob5421",
    "time": "Apr 12, 2020 at 16:45",
    "comments": [
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, the interrupt happens and the process context is saved, the next process' context is loaded and that second process is run. See\n <a href=\"https://cs.stackexchange.com/questions/55796/how-does-the-os-scheduler-give-take-control-of-hw\">\n  this question\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n @bart1e it's on a thread level, not process\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bob5421",
            "text": "<html><body><span class=\"comment-copy\">\n @macro_controller: Do you mean this is not the same thing for process and threads ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n @Bob5421I mean that the actual entities that are being scheduled are threads, not processes\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}