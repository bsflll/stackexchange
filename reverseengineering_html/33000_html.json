{
    "title": "C disassembly - bitwise operations with 0x7FFFFFFFFFFFFFFF and 0x8000000000000000",
    "link": "https://reverseengineering.stackexchange.com/questions/33000/c-disassembly-bitwise-operations-with-0x7fffffffffffffff-and-0x800000000000000",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using IDA to reverse engineer x86_64 binary file written in C. And pretty often I meet the following in IDA's pseudocode:\n </p>\n <ol>\n  <li>\n   <code>\n    (int64)v7 | 0x8000000000000000LL\n   </code>\n  </li>\n  <li>\n   <code>\n    (int64)v7 & 0x7FFFFFFFFFFFFFFFLL\n   </code>\n  </li>\n </ol>\n <p>\n  While researching I figured out that:\n </p>\n <ul>\n  <li>\n   0x7FFFFFFFFFFFFFFF is 9223372036854775807, which is signed long MAX value in C\n  </li>\n  <li>\n   0x8000000000000000 is -9223372036854775808, which is signed long MIN value in C\n  </li>\n </ul>\n <p>\n  But I can't wrap my head around how to translate these bitwise operations with MIN and MAX into \"normal\" C coding pattern.\n </p>\n <p>\n  Can anybody please explain ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "149",
    "tags": [
        "ida",
        "disassembly",
        "c"
    ],
    "user": "day_that_i_die",
    "time": "Nov 4, 2024 at 9:36",
    "comments": [
        {
            "user": "jsotola",
            "text": "<html><body><span class=\"comment-copy\">\n the two functions set and clear the sign bit ... there is no reason to translate the two values to decimal\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "<html><body><span class=\"comment-copy\">\n what do you mean by\n <code>\n  \"normal\" C coding pattern\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "day_that_i_die",
            "text": "<html><body><span class=\"comment-copy\">\n Could you please explain how these functions set and clear sign bit ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "<html><body><span class=\"comment-copy\">\n research\n <code>\n  C bitwise operators\n </code>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When you see such masks - remember these key rules for bitwise arithmetic\nAssume X is unknown, & is bitwise AND, | is bitwise OR\n </p>\n <ul>\n  <li>\n   X & 1 = X\n  </li>\n  <li>\n   X & 0 = 0\n  </li>\n  <li>\n   X | 0 = X\n  </li>\n  <li>\n   X | 1 = 1\n  </li>\n </ul>\n <p>\n  Now look at the mask and its operation. In this case\n </p>\n <p>\n  <code>\n   v7 | 0x8000000000000000LL\n  </code>\n </p>\n <p>\n  The mask\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>In [1]: 0x8000000000000000 == 1 << 63\nOut[1]: True\n</code></pre>\n <p>\n  So in this case a 64 bit number - with the most significant bit (MSB) set and all other 0s\n </p>\n <pre><code>index - 63 62 61 ... 2 1 0\nbits  - 1  0  0  ... 0 0 0\n</code></pre>\n <p>\n  The operation here is\n  <code>\n   |\n  </code>\n  - the bitwise OR\nWe don't know\n  <code>\n   v7\n  </code>\n  - we can assume it to be X. For individual bits\n  <code>\n   X_i\n  </code>\n  for\n  <code>\n   i\n  </code>\n  index\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\n <p>\n  When bitwise OR is done -\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\n</code></pre>\n <p>\n  With the rules mentioned above - we can operate\n  <code>\n   X | 1 = 1\n  </code>\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1 \n</code></pre>\n <p>\n  for the rest unknown bits\n  <code>\n   X | 0 = X\n  </code>\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1    X_62 X_61 ... X_2 X_1 X_0 \n</code></pre>\n <p>\n  We can see that all of the bits of\n  <code>\n   result\n  </code>\n  is the same as\n  <code>\n   v7\n  </code>\n  except the MSB which is now 1.\nTherefore,\n  <code>\n   v7 | 0x8000000000000000LL\n  </code>\n  sets the MSB of\n  <code>\n   v7\n  </code>\n </p>\n <p>\n  Similarly for\n  <code>\n   v7 & 0x7FFFFFFFFFFFFFFFLL\n  </code>\n </p>\n <p>\n  The mask is 0x7FFFFFFFFFFFFFFFLL, which has all bits set to 1 except for the most significant bit (MSB), which is 0.\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbits  - 0    1    1    ... 1   1   1\n</code></pre>\n <p>\n  We want to perform the bitwise AND operation between\n  <code>\n   v7\n  </code>\n  and the mask.\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\n <p>\n  When we perform the bitwise AND operation:\n </p>\n <p>\n  For each bit position, we apply the rule\n  <code>\n   X & 1 = X\n  </code>\n  and\n  <code>\n   X & 0 = 0\n  </code>\n </p>\n <pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 0    1    1    ... 1   1   1\nresult- 0    X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\n <p>\n  The result retains all bits of\n  <code>\n   v7\n  </code>\n  except the MSB, which is now 0. Therefore,\n  <code>\n   v7 & 0x7FFFFFFFFFFFFFFFLL\n  </code>\n  clears the MSB of\n  <code>\n   v7\n  </code>\n </p>\n <p>\n  In signed values the MSB dictates the sign of the number - a set MSB means -ve and unset means a +ve number.\n </p>\n <p>\n  Now if\n  <code>\n   v7\n  </code>\n  is a signed value - we can see the change in values with this python snippet\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>In [9]: x = 0xabcdef1234567890\n\nIn [10]: ctypes.c_uint64(x & 0x7FFFFFFFFFFFFFFF)\nOut[10]: c_ulong(3156441775323117712)\n\nIn [11]: (ctypes.c_int64(x & 0x7FFFFFFFFFFFFFFF).value)\nOut[11]: 3156441775323117712\n\nIn [12]: ctypes.c_int64(x).value\nOut[12]: -6066930261531658096\n</code></pre>\n <p>\n  With the MSB cleared the signed and unsigned values of the result is same.\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>In [13]: (ctypes.c_int64(x | 0x8000000000000000).value)\nOut[13]: -6066930261531658096\n\nIn [14]: (ctypes.c_uint64(x | 0x8000000000000000).value)\nOut[14]: 12379813812177893520\n\nIn [15]: x\nOut[15]: 12379813812177893520\n</code></pre>\n <p>\n  With the MSB set - the number stays as is if it was a signed negative earlier.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Jun 4, 2024 at 8:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}