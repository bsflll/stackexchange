{
    "title": "Creating a patcher for a mac app",
    "link": "https://reverseengineering.stackexchange.com/questions/15717/creating-a-patcher-for-a-mac-app",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a signed mac app and I don't have the source code of the app.\nI know address locations of some assembly instructions which I need to change so as to make this app to work in certain way. So I'm trying to write a patcher, which should be able to read the assembly of original mac app and change those addresses and produce new mac app with no signature.\n </p>\n <p>\n  This patcher should be a stand alone mac app.\nThe patcher should patch the original app and produce the modified one.\n </p>\n <p>\n  How can I do this? I just need some guidance to write this patcher.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "osx"
    ],
    "user": "Jaffer Sheriff",
    "time": "Jun 29, 2017 at 17:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several aspects for this:\n </p>\n <ul>\n  <li>\n   if the app is not protected with some sort of packaging\n   <ul>\n    <li>\n     you just need to find the place that you want to patch with the help of debugger (when the app is running) or static disassembler (otool, hopper disassembler, ida disassembler)\n    </li>\n    <li>\n     understand how many bytes your patch takes (for example with online\n     <a href=\"https://defuse.ca/online-x86-assembler.htm\" rel=\"nofollow noreferrer\">\n      tool\n     </a>\n     )\n    </li>\n    <li>\n     understand how many space you have in the original app. Every disassembler will show you or use the above tool as well\n    </li>\n    <li>\n     use any hex editor (\n     <a href=\"http://ridiculousfish.com/hexfiend/\" rel=\"nofollow noreferrer\">\n      hex fiend\n     </a>\n     ) to patch the file with the bytes you've got from (1).\n    </li>\n    <li>\n     if there is enough space for the patch, you apply it and the left space fill with\n     <code>\n      nop\n     </code>\n     instruction\n    </li>\n    <li>\n     if there is not, you will need to find that space by:\n     <ul>\n      <li>\n       splitting your patch in several parts (there are always caves between functions or at the end of the section)\n      </li>\n      <li>\n       or allocate your own section and fill in your code. In that case, you will also need to edit the file adder to account for a new section.\n      </li>\n     </ul>\n    </li>\n   </ul>\n  </li>\n  <li>\n   if the app is packed or protected in any way from patching, then you can not just patch it on disk just like that. You'll need to unpack it, patch as explained above and repack (or not) back.\n   <ul>\n    <li>\n     or you can create runtime patcher in this case, which is more complicated to do.\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  UPDATE:\n </p>\n <p>\n  To automate the on-disk patching, one can use a pretty easy way which is based on some pattern matching and a little bit of heuristics:\n </p>\n <ul>\n  <li>\n   with the help of disassembler try to find some distinguishable bytes before the patch area\n  </li>\n  <li>\n   do the same for the area after the patch area\n  </li>\n  <li>\n   if appropriate, find the same for the patch itself:\n   <ul>\n    <li>\n     for example if there is a control flow change, try to analyze the target of that change for some pattern.\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  All the above will be sufficient (hopefully) to accommodate version changes and assure that you change at the right place. Such patcher could be easily coded with Python. For disassembling you can use\n  <a href=\"http://www.capstone-engine.org\" rel=\"nofollow noreferrer\">\n   Capstone\n  </a>\n  library which has Python binding.\n </p>\n <p>\n  Take into account that, you fill make OSX complain about this patched app as it will not be signed any more.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "PhoeniX",
            "time": "Jun 29, 2017 at 17:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jaffer Sheriff",
                    "text": "<span class=\"comment-copy\">thank you for your valuable info. I have created a modified executable of a app using hopper disassembler. I have to replace the original executable with modified one to run the patched app.  So instead of doing this manual process in every Mac, I want to create a app patcher which should patch the original app and produce the modified one. It Is much like dynamic patching so how can dynamically patch that Mac app?</span>",
                    "time": null
                },
                {
                    "user": "Jaffer Sheriff",
                    "text": "<span class=\"comment-copy\">@phOsec really thank you for your help and you are a life saver.</span>",
                    "time": null
                }
            ]
        }
    ]
}