{
    "title": "Decompressing a .replay file",
    "link": "https://reverseengineering.stackexchange.com/questions/20466/decompressing-a-replay-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Fortnite has a feature that records your gameplay and saves it as a .replay file, now I don't believe these files are encrypted, only compressed.\n </p>\n <p>\n  I wasn't able to find a way online to decompress such files and I'd like to know how, and if there's a possibility of decompressing then re-compressing the files again. \nI'd like to also know if there's any suggestions to programs that does the job\n </p>\n <p>\n  Here's the beginning of the file in HexEditor\n  <a href=\"https://i.sstatic.net/QSe7w.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"hex\" src=\"https://i.sstatic.net/QSe7w.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"http://www.mediafire.com/file/xr3b5jn5ynareny/BR_ProfileGo.replay/file\" rel=\"nofollow noreferrer\">\n   Link for the file (mediafire)\n  </a>\n </p>\n <p>\n  I've done some testing (replacing values and checking if anything changes) and found a few things:\n  <a href=\"https://i.sstatic.net/SHr8R.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"hex\" src=\"https://i.sstatic.net/SHr8R.png\"/>\n  </a>\n  (Not sure if they would be any useful but thought I'd still share)\n </p>\n <p>\n  EDIT: I'm trying to end up with something like this\n  <a href=\"https://i.sstatic.net/7VT60.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"hex\" src=\"https://i.sstatic.net/7VT60.jpg\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "decompress"
    ],
    "user": "rhyminister",
    "time": "Jan 25, 2019 at 14:30",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n This file seems to be neither encrypted nor compressed, since it contains tons of ASCII strings - although binwalk indicates some parts of the file can be deflated in a valid way\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rhyminister",
            "text": "<html><body><span class=\"comment-copy\">\n Is there a way to make this type of files readable?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n you'd most likely have to reverse the part of the game which parses this file format or make some pretty good assumptions about its structure. Since Fortnite is based on the unreal engine, heaving a look into this may help as well\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n This looks like a decent initial work on figuring out the format. Why have you stopped? were there any specific dificutlies you require assistance with? Right not it is unclear what's the actual question here. I would suggest you give a shot reverse engineering the code that either generates or parses the file format, too advance further.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ExQlusiv3_",
            "text": "<html><body><span class=\"comment-copy\">\n I know that Fortnitetracker is able to unpack .replay files and read out its data. Here is an example\n <a href=\"https://fortnitetracker.com/replays/view/0764a454-09ac-0030-f423-8a9a07948c94\" rel=\"nofollow noreferrer\">\n  fortnitetracker.com/replays/view/…\n </a>\n I am not sure how they do it. You might be able to just ask them in their Discord server.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This file does not seem encrypted (lots of ASCII).\n </p>\n <p>\n  This is most likely based on the Unreal Engine 4's replay mechamisms\n </p>\n <p>\n  According to its documentation, is describes a starting state as well as any changes to this state in chronological order.\n </p>\n <p>\n  <a href=\"https://docs.unrealengine.com/en-us/Engine/Replay/Streamers#replaydataformat\" rel=\"nofollow noreferrer\">\n   https://docs.unrealengine.com/en-us/Engine/Replay/Streamers#replaydataformat\n  </a>\n  <a href=\"https://docs.unrealengine.com/en-us/Engine/Replay\" rel=\"nofollow noreferrer\">\n   https://docs.unrealengine.com/en-us/Engine/Replay\n  </a>\n  <a href=\"https://wiki.unrealengine.com/Replay_System_Tutorial\" rel=\"nofollow noreferrer\">\n   https://wiki.unrealengine.com/Replay_System_Tutorial\n  </a>\n  <a href=\"https://api.unrealengine.com/INT/Engine/Replay/index.html\" rel=\"nofollow noreferrer\">\n   https://api.unrealengine.com/INT/Engine/Replay/index.html\n  </a>\n </p>\n <p>\n  Since the source code of UE4 is available online, you could have a look at the sections writing and parsing those replays.\n </p>\n <p>\n  <a href=\"https://www.unrealengine.com/en-US/ue4-on-github\" rel=\"nofollow noreferrer\">\n   https://www.unrealengine.com/en-US/ue4-on-github\n  </a>\n </p>\n <p>\n  -> What exactly do you want to extract from these replays? If you want to generate videos, I recommend capturing the parts you want with third party software.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Jan 25, 2019 at 11:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rhyminister",
                    "text": "<span class=\"comment-copy\">I’d mostly be using this to see what exactly gets recorded/saved into the file- I would also like to mess around with whatever that’s saved (structures/player locations etc)</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">@rhyminister Then you'll probably not get around writing a parser for this file format based on the UE4 code and related work such as <a href=\"https://www.reddit.com/r/RocketLeague/comments/88uj75/z/dwnfw21/\" rel=\"nofollow noreferrer\">reddit.com/r/RocketLeague/comments/88uj75/z/dwnfw21</a> <a href=\"https://github.com/jjbott/RocketLeagueReplayParser\" rel=\"nofollow noreferrer\">github.com/jjbott/RocketLeagueReplayParser</a></span>",
                    "time": null
                },
                {
                    "user": "rhyminister",
                    "text": "<span class=\"comment-copy\">seems like someone was able to decompress it quite recently <a href=\"https://i.imgur.com/U2LjoWF.jpg\" rel=\"nofollow noreferrer\">i.imgur.com/U2LjoWF.jpg</a> <a href=\"https://twitter.com/shpankus/status/1087884937448038400\" rel=\"nofollow noreferrer\">twitter.com/shpankus/status/1087884937448038400</a> unsure what method he used for that</span>",
                    "time": null
                }
            ]
        }
    ]
}