{
    "title": "Why disassemble multi-thread binary is hard?",
    "link": "https://reverseengineering.stackexchange.com/questions/20457/why-disassemble-multi-thread-binary-is-hard",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Why disassemble multi-thread binary is hard? I also know that some obfuscation techniques are to create unnecessary threads. But why reverse engineering multi-thread program is hard.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "disassemblers",
        "multi-process"
    ],
    "user": "user5984274",
    "time": "Jan 24, 2019 at 9:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The technique you are referring to is called 'nanomites'. I would advise you the reading of this\n  <a href=\"https://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/\" rel=\"nofollow noreferrer\">\n   article\n  </a>\n  as a full example of reverse of a nanomite crack-me.\n </p>\n <p>\n  Never the less, the problem of multi-thread or multi-process reverse-engineering is that in place of one sequence of events (with only one program), you have to follow in parallel multiple programs that interact (possibly in a non-deterministic way) with each others. It raise up exponentially the complexity of the reverse-engineering process.\n </p>\n <h3>\n  References\n </h3>\n <ul>\n  <li>\n   <a href=\"https://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/\" rel=\"nofollow noreferrer\">\n    Taming a wild nanomite-protected MIPS binary with symbolic execution: No Such Crackme\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"http://blog.w4kfu.com/post/Unpackme_I_am_Famous\" rel=\"nofollow noreferrer\">\n    Unpackme I am Famous\n   </a>\n   .\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}