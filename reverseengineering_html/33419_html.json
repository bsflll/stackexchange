{
    "title": "Figure out package to send to cheap Chinese smartwatch to make it vibrate",
    "link": "https://reverseengineering.stackexchange.com/questions/33419/figure-out-package-to-send-to-cheap-chinese-smartwatch-to-make-it-vibrate",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to connect to a cheap Chinese smartwatch (like\n  <a href=\"https://www.amazon.ca/dp/B0DSPDK6PS/\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  ) with a Raspberry Pi, and send it a command to vibrate. How can I reverse engineer the watch (or the app that controls it) to figure out what I need to send to the watch in order to get it to vibrate?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "63",
    "tags": [
        "bluetooth",
        "smart-devices"
    ],
    "user": "Kovy Jacob",
    "time": "Mar 28 at 12:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The common way to reverse engineer a Bluetooth device is using it and collecting the transmitted Bluetooth data. Most Bluetooth communication is - besides the Bluetooth protection at Bluetooth layer - not encrypted or otherwise protected, therefore capturing the data e.g. within Android allows you to get the raw data.\n </p>\n <p>\n  One way is to use an Android device with activated developer options and in there enable\n  <a href=\"https://source.android.com/docs/core/connect/bluetooth/verifying_debugging\" rel=\"nofollow noreferrer\">\n   \"Bluetooth HCI Snoop log\"\n  </a>\n  . If activated the Bluetooth data is written to a log file, which is according to Google on most devices located in\n  <code>\n   data/misc/bluetooth/logs\n  </code>\n  (inside the ZIP file generated by the command\n  <code>\n   adb bugreport filename\n  </code>\n  ).\n </p>\n <p>\n  My preferred way is a rooted Android device with Android\n  <a href=\"https://github.com/frida/frida/\" rel=\"nofollow noreferrer\">\n   frida-server\n  </a>\n  installed. Usually Frida works best when on the phone an older Android version is installed.\n </p>\n <p>\n  Using the Frida script\n  <a href=\"https://github.com/optiv/blemon\" rel=\"nofollow noreferrer\">\n   blemon\n  </a>\n  you can then hook into apps and dump all the Bluetooth data it sends/receives in real-time. This allows you to execute functions in the app or the device and directly record the BLE traffic that is related to this function.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Robert",
            "time": "Mar 28 at 13:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}