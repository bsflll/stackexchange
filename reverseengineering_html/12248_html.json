{
    "title": "Help needed: Reverse engineer a DOS executable for a Game MOD",
    "link": "https://reverseengineering.stackexchange.com/questions/12248/help-needed-reverse-engineer-a-dos-executable-for-a-game-mod",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  befor you start reading, take a cup of coffee. I made a lot of text to explain my problem detailed. Because i can not load more than two links into this posting, i make a answer to show two additional pictures.\n </p>\n <p>\n  I'm Robert, mechanical engineer, and a fan of nostalig thinks (like cars or games). And thats the first step to my problem.\n </p>\n <p>\n  I want to modify my very first game i ever played. It's called \"Radix - Beyond the Void\". See here for more informations:\n  <a href=\"https://goo.gl/Gy2kTw\" rel=\"nofollow\">\n   https://goo.gl/Gy2kTw\n  </a>\n </p>\n <p>\n  I started reverse engineering the game about a jear ago. Within the time (maybe 30minutes a day) i was able to decode the game file and to view all the files the game is made with. A short discription:\n </p>\n <p>\n  The Game has two essential files:\n </p>\n <ul>\n  <li>\n   Radix.exe (the Game executable)\n  </li>\n  <li>\n   Radix.dat (the Gamefile)\n  </li>\n </ul>\n <p>\n  Radix.exe is loading parts from Radix.dat (like Sounds, images, levels) into the memory and than put it on the screen to move into the menu or -more important- to kill some enemies.\n </p>\n <p>\n  Radix.dat is a compressed gamefile with all necessary things for the Game. I used a HEX editor and Excel to read the index and i was able to extract all files. The Filetypes are:\n </p>\n <ul>\n  <li>\n   Music Files [.wav]\n  </li>\n  <li>\n   Sound Files [.wav]\n  </li>\n  <li>\n   Level Files [.lgd - own Radix format]\n  </li>\n  <li>\n   Text Files [.txt]\n  </li>\n  <li>\n   Image Files [own Format, see below]\n  </li>\n  <li>\n   A Palette file for the Images [own Radix format]\n  </li>\n  <li>\n   Demo Files (if you wait a minute, the games plays a demo) [own Radix format]\n  </li>\n  <li>\n   Imagecontainer for Walls, Floors and Ceilings\n  </li>\n  <li>\n   Imagecontainer for Things (like enemies or power ups)\n  </li>\n </ul>\n <p>\n  The Imagecontainers have their own index and it was not a problem to extract the single images.\n </p>\n <p>\n  It took me some hours of work, i got that the images are indexed pictures. As example a 64px x 64px picture has exactly 4096 bytes. Every byte is a pixel and the decimal number of the byte is a position at the palette file for the colours. After some more hours i wrote a programm to show me the pictures with the right colours out of the palette file:\n </p>\n <p>\n  {See link 1}\n </p>\n <p>\n  The pictures for the game menu are indexed pictures too, but they are 800byte bigger than the resolution is. As example the Mainmenu has 320px x 200px and the file has a size of 64000byte + 800byte. The 800byte are splittet into 768byte for colors (256 red, 256green, 256blue) and some informations about position and size.\n </p>\n <p>\n  {See link 2}\n </p>\n <p>\n  If you stress Google for some minutes you will find a leveleditor to make you own Levels. Within the package with the leveleditor is a programm wich is called \"3drescmp.exe\".\n </p>\n <p>\n  3DResCmp.exe is needed to generate a new .dat File and play your own Levels in Radix. After i spend some hours with the 3DResCmp.exe i was able to change things like menuimages or Sounds, because the programmers didnt explain all functions of 3DResCmp.exe.\n </p>\n <p>\n  See here a DosBox Video:\n  <a href=\"https://www.youtube.com/watch?v=YHL7irP7r3g\" rel=\"nofollow\">\n   https://www.youtube.com/watch?v=YHL7irP7r3g\n  </a>\n </p>\n <p>\n  Now my mainly Problem:\nI'm able to generate a new Radix.dat-File except the Walls- and Thingsimages. This is because i dont know the original format of the images. The images are indexed, i can load the palette but not even one picture. I tryed at least 30 picture formats, tryed Photoshop 2.5 and 3.0 but nothing works.\n </p>\n <p>\n  Now my question:\nCan somebody reverse engineer the 3DResCmp.exe and can tell me the what format i have to use? I assume that 3DResCmp.exe take a image and create a indexed picture with the loaded palette file.\n </p>\n <p>\n  Radix, the Leveleditor and 3Drescmp.exe is written in Watcom C++ in Version of 1993 to 1995. I tryed IDA and some other tools, but i'm not a C++ programmer and i don't know how to interpret the results.\n </p>\n <p>\n  If you have questions or a tipp feel free to answer. I dont want that you make all the work, but i'm despairing at the images and need help from a software (reverse)engineer.\n </p>\n <p>\n  Greetings,\nRobert\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly"
    ],
    "user": "Robert Winkens",
    "time": "Mar 18, 2016 at 15:07",
    "comments": [
        {
            "user": "Robert Winkens",
            "text": "<html><body><span class=\"comment-copy\">\n Link 1:\n <a href=\"https://dl.dropboxusercontent.com/u/39031888/radix/door2.jpg\" rel=\"nofollow noreferrer\">\n  dl.dropboxusercontent.com/u/39031888/radix/door2.jpg\n </a>\n Link 2:\n <a href=\"https://dl.dropboxusercontent.com/u/39031888/radix/workingmenu.jpg\" rel=\"nofollow noreferrer\">\n  dl.dropboxusercontent.com/u/39031888/radix/workingmenu.jpg\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n If you want people to help you with 3DResCmp.exe, you should tell them where to find it. For me, googling for it finds excactly one reference, but without a link, and the various downloads on the abandonware sites referred to in your first link don't include it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert Winkens",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, you have right. Here are the .exe file and some examples:\n <a href=\"https://dl.dropboxusercontent.com/u/39031888/radix/3DResCmp.zip\" rel=\"nofollow noreferrer\">\n  dl.dropboxusercontent.com/u/39031888/radix/3DResCmp.zip\n </a>\n You need DosBox greater than version 0.6 to run it. There is \"sample.txt\" where all infos are written to make a Radix Datafile\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rhizzakanizza",
            "text": "<html><body><span class=\"comment-copy\">\n Don't have the rep to comment, or I would have :/ Since you asked for tips, this may qualify Have you reviewed the information about\n <a href=\"http://www.gamesover.com/walkthroughs/radix2.txt\" rel=\"nofollow noreferrer\">\n  RadCad\n </a>\n , the level editor? There is a section about walls that may help. A cursory glance gave me the impression that walls are bitmaps with some attributes (or metadata). 3DResCmp looks like it was dated '95, but the RadCad txt is from '96 so that's interesting\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was able to decode the file format of the\n  <code>\n   radix.dat\n  </code>\n  file, which is mainly a container. It has a very small header, then the binary files concatenated to each other, then metadata directory at the end of the file (the header contains the file offset of the start of this metadata).\n </p>\n <p>\n  Most of the files are just that, binary files.\n </p>\n <p>\n  However, the two entries\n  <code>\n   ObjectBitmaps\n  </code>\n  and\n  <code>\n   WallBitmaps\n  </code>\n  are special, they act like directories, and have a collection of files inside themselves. Again, they consist of a small header, concatenated binary files, and a metadata directory.\n  <em>\n   The file offsets in this metadata directory are relative to the outside radix.dat file, not to the Bitmaps file\n  </em>\n  , so you have to extract those files when you extract the outer file; you can't extract ObjectBitmaps first and hope to extract the individual bitmaps later.\n </p>\n <p>\n  The\n  <strong>\n   WallBitmaps\n  </strong>\n  seem to be just a collection of pixels, 1 byte per pixel. The metadata has width and height entries, and in every single case, the size of the embedded file (calculated as distance between the start of the file and the start of the next file) equals width*height. Also, the code from 3dResCmp.exe seems to read 800 bytes from the file first, do some palette stuff, read the rest of the file, convert the rest by replacing stuff with a lookup table, and write the rest of the file. I didn't analyze this code completely, but it seems that it strips the 800 byte header from the file, converts the pixels from the file palette to a generic palette, and saves the pixels only, omitting the header/palette. You might be able to just throw one of your other image files at 3dResCmp for this.\n </p>\n <p>\n  <strike>\n   The\n   <strong>\n    ObjectBitmaps\n   </strong>\n   are more complicated. The metadata structure is the same, but the size of the binaries does not equal width\n   <em>\n    height. Instead, the binaries seem to start with what looks like coordinate pairs, one per row, 4 bytes per pair; then some pixels, but fewer than (width\n   </em>\n   height). For example, an Object Bitmap named\n   <code>\n    WeakBio-MineDead1\n   </code>\n   has 12x16 pixels, and 212 bytes. The binary starts with 16 coordinate pairs:\n  </strike>\n </p>\n <pre><code>  64    1541\n  70    2050\n  78    2817\n  89    2817\n 100    2562\n 110    2307\n 119    2562\n 129    2817\n 140    3072\n 152    2817\n 163    2052\n 171    2307\n 180    2051\n 188    1795\n 195    2050\n 203    2304\n</code></pre>\n <p>\n  which are followed by 148 palette entries -- not enough for 12*16 pixels!\n(I'm not sure these are actually coordinate pairs, as the first x number seems to always be 4 times the number of rows).\n </p>\n <p>\n  The\n  <strong>\n   ObjectBitmap\n  </strong>\n  data is divided into two parts. The first part has one entry\nper row, denoting the byte position within the pixel map,\nnumber of \"empty\" pixels in that row, counted from the left, and number of\n\"used\" pixels. The second part is the pixel map, and it has 1 byte per pixel,\njust like the wall bitmaps.\n </p>\n <p>\n  For example, an object could use a 10(width)x4(height) bitmap and look like\nthis:\n </p>\n <pre><code>.....XXX..\n..YYXXX...\n..YYX.....\n..Z.......\n</code></pre>\n <p>\n  with X, Y and Z being different palette entries, and . being \"unused\", i.e.\ntransparent.\n </p>\n <p>\n  The bitmap format for this object would be:\n </p>\n <pre><code>0000    0x10 5 3        ;pixels start at 0x10, 5 unused pixels, 3 used pixels\n0004    0x13 2 5        ;pixels start at 0x13, 2 unused pixels, 5 used pixels\n0008    0x18 2 3\n000C    0x1b 2 1\n0010    58 58 58\n0013    59 59 58 58 58\n0018    59 59 58\n001b    5a\n</code></pre>\n <p>\n  Note that the size of the bitmap can, in this case, not be determined from the\ndirectory entry alone, as that has only width and height, not the byte size,\nwhich is generally much lower than (width*height).\n </p>\n <p>\n  When 3dResCmp.exe creates those ObjectBitmaps and WallBitmaps, it does remove the first 800 bytes from the input files, which means that even if you extract the files from radix.dat, you will not be able to put them back into your own level unmodified.\n </p>\n <p>\n  Anyway, i created a small program that extracts most files from radix.dat, and emits some information about the individual contents of WallBitmaps and ObjectBitmaps. Also, it can display an ascii-art version of an Object Bitmap. Feel free to look into it at\n  <a href=\"https://github.com/gbl/RadixDatTool\" rel=\"nofollow\">\n   https://github.com/gbl/RadixDatTool\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Mar 26, 2016 at 10:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}