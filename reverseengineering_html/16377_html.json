{
    "title": "How do I approach this CTF Debugging Program?",
    "link": "https://reverseengineering.stackexchange.com/questions/16377/how-do-i-approach-this-ctf-debugging-program",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <b>\n   I have an ELF executable I'm working on (got it from a previous CTF competition). The executable simply asks for a password, and then it prints out \"congrats\".\n  </b>\n </p>\n <p>\n </p>\n <hr/>\n <p>\n  The code snippets and my annotations are long, so I've included them in separate HTML links.\n </p>\n <p>\n  <a href=\"https://pastebin.com/BmUXfknt\" rel=\"nofollow noreferrer\">\n   Decompiled C-Code\n  </a>\n </p>\n <p>\n  <a href=\"https://drive.google.com/file/d/0B7z6YT7IIOZ6ci02NG5iRWxPQ2s/view?usp=sharing\" rel=\"nofollow noreferrer\">\n   ELF Executable\n  </a>\n </p>\n <pre>\n//Gives you an overview of what this program does in C.\nint main(int argc, char ** argv)\n{\n    int32_t result; // success value\n\n\n    if (argc > 1)\n    {\n        setup(); //Allocates an integer array (g1)\n\n        int32_t v1 = 0; //counter\n\n        while (true)\n        {\n            char v2 = *(char *) (*(int32_t *) ((int32_t)argv + 4) + v1); \n            int32_t v3 = *(int32_t *) (4 * v1 + (int32_t) & g1);\n\n            int32_t v4 = v1 + 1; //index in g1 array\n\n            if (check( (int32_t *) v3, (int32_t) v2) != 0)\n            {\n                puts(\"Nope\");\n                return -1;\n            }\n            if (v4 >= 31) //when we've reached our last index in array\n            {\n                break;\n            }\n            v1 = v4;\n        }\n        puts(\"congrats!\");\n        result = 0;\n    }\n    else\n    {\n        puts(\"usage ./smoothie \");\n        result = -1;\n    }\n    return result;\n}\n</pre>\n <hr/>\n <p>\n  I've tried using GDB to debug through the program and IDA to understand the control-flow. My deduction ends up with 3 things:\n </p>\n <ul>\n  <li>\n   setup() generates some sort of integer array\n  </li>\n  <li>\n   check(int32_t * array, int * array) gets called 31 times to confirm our \"password\" as indicated by the possible while loop\n  </li>\n  <li>\n   Inside check(...), it goes through each malloc'd array[5] and confirms each \"char\" of our password.\n  </li>\n </ul>\n <hr/>\n <p>\n  <b>\n   Here is IDA's control flow graph of check() (simple - 3 parts):\n  </b>\n  <a href=\"https://i.sstatic.net/HFjAR.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"First set of checks\" src=\"https://i.sstatic.net/HFjAR.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/rcvif.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Possible calculations & 2nd set of checks\" src=\"https://i.sstatic.net/rcvif.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/ASxnP.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Second set of checks\" src=\"https://i.sstatic.net/ASxnP.png\"/>\n  </a>\n </p>\n <p>\n  Here is the control flow graph of check()\n  <em>\n   click to enlarge\n  </em>\n  :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/MePmp.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Graph of check() call\" src=\"https://i.sstatic.net/MePmp.jpg\"/>\n  </a>\n </p>\n <ul>\n  <li>\n   <p>\n    The majority of check() compares * (array) for the upper half and * (array + 8) for the bottom half plus the passwordIndex comparison.\n   </p>\n  </li>\n  <li>\n   <p>\n    In the main(int argc, char ** argv) of this program, there is a while loop that needs to be executed 31 times (the password is possibly 31 characters long). The while loop will exit if check() returns 1.\n   </p>\n  </li>\n </ul>\n <hr/>\n <p>\n  I think the middle section does some calculations (add, sub, cdq & idiv, imul, and xor) that might be useful towards knowing what to\n  <em>\n   pass\n  </em>\n  as a password.\n </p>\n <p>\n  Please guide me in the right direction (with hints if you can). Debugging the program yourself might make my question more clear.\n </p>\n <p>\n  <strong>\n   <em>\n    False Lead\n   </em>\n  </strong>\n </p>\n <ul>\n  <li>\n   In check(), I'm assuming that the first set of checks \"calculate\" the correct number that my input ascii should match (e.g. calculated 90, so index[i] should equal 'Z' ~ 90).\n  </li>\n  <li>\n   In the second half of check it uses * (array + 8), so that means that its using the array's 3rd number for the 101, 142, ... , number comparisons. We could change the dereferenced value of * (array + 8) to the calculated number (90) to get to the final comparison.\n  </li>\n  <li>\n   Once we reach the final comparison, it compares our input with the calculated number in the first set of checks, so 90 == 90. Since they are equal, the function returns 0 for success.\n  </li>\n </ul>\n <p>\n  <b>\n   Despite any char input for the check(int32_t * array, (int32_t) input), the result will be the same regardless because of the pre-set values in the array. What can I do to correct this?\n  </b>\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "assembly",
        "debugging",
        "decompilation",
        "c",
        "elf"
    ],
    "user": null,
    "time": "Sep 22, 2017 at 17:37",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n so what is your question here?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user21677",
            "text": "<html><body><span class=\"comment-copy\">\n I've added a graph of check()'s entire control-flow. With the checks for 0x65 to 0xfa, they somewhat match the values in the allocated array. The first half of checks correspond to * (array), and the second half corresponds to * (array + 8). Is there something I can do in the GNU-Debugger to pass these checks with the array?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n what CTF was that?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user21677",
            "text": "<html><body><span class=\"comment-copy\">\n CTF-Sparsa. Debugging - 200, or smoothie, wasn't uploaded here:\n <a href=\"https://github.com/pchaigno/ctf-sparsa\" rel=\"nofollow noreferrer\">\n  github.com/pchaigno/ctf-sparsa\n </a>\n . This was what the competition basically looked like (jeopardy style).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n ok, I've analyzed the binary and know flag w/ 99% probability but the current binary is flawed. For today the only advice I can give is to try to analyze the setup & check (especially how it is related to setup) and you'll get the idea how to get the flag. But again - binary is wrong - I'll post on that later tomorrow (now it's midnight)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The way of solving this CTF is to analyze both\n  <code>\n   setup()\n  </code>\n  and\n  <code>\n   check()\n  </code>\n  methods (duh!). The first one is quite a long one but when you check what's going on it's quite simple. It's allocating a 20B of memory to store 5 x 4 B of data. It does it 31 times. The values that stored there looks like they are random but they are not. There are only 5 different values that are put in the first spot as well as in 3rd one.\n </p>\n <blockquote class=\"spoiler\">\n  <p>\n   Values in 1st and 3rd slot are operation type values; 3rd, 4th - operands; 5th - operand & result\n  </p>\n </blockquote>\n <p>\n  If we check the\n  <code>\n   check()\n  </code>\n  function. We see that the parameters that are being passed are: one of the buffers created and filled in the\n  <code>\n   setup()\n  </code>\n  and a\n  <code>\n   char\n  </code>\n  of the flag. Based on the values found in the buffer there are mathematical operations that are conducted the values in the buffer.\n </p>\n <blockquote class=\"spoiler\">\n  <p>\n   More info on the operations. There are few, based on the 1st and 3rd value. add, sub, mod, xor, mul.\n If we take for example the values for the first buffer: 0x01 0x81 0x65 0x0C 0x5A those would be spitted into; 0x01 - mod operation, 0x65 - add; so the char is (0x5A % 0x81) + 0x0C. We do simular (but different operations) on each of the buffers.\n  </p>\n </blockquote>\n <p>\n  What is the problem with this binary (or maybe it's intentional)? Well for almost all the cases the value calculated on the operands is not compared with the flag's char and this\n  <code>\n   eax\n  </code>\n  is not correctly set and we get 'None'. What would need to be fixed is to change the jump so that all the cases go through the check if the flag char. What you could do apart from modifying the binary is to trick gdb to behave properly.\n </p>\n <ul>\n  <li>\n   Set the breakpoint on\n   <code>\n    leave\n   </code>\n   <ul>\n    <li>\n     type command\n    </li>\n    <li>\n     type p/c $edx\n    </li>\n    <li>\n     type set $eax=0\n    </li>\n    <li>\n     type end\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  With this whenever breakpoint is triggered, you will print the calculated char and it will simulate the comparison to be ok and allowed the application to continue. With that you can run the app, hit a few times the 'c' and observe the flags\n </p>\n <p>\n  And finally\n  <strong>\n   the flag\n  </strong>\n </p>\n <blockquote class=\"spoiler\">\n  <p>\n   flag{HereBeDaFlagForYoDebu?g?h}\n  </p>\n </blockquote>\n <p>\n  And a bit of explanation...\n </p>\n <blockquote class=\"spoiler\">\n  <p>\n   for those two '?' it is either the control bytes are wrong or the operands and thus they are calculated wrongly. Maybe I would spend some time to find out and try to calculate them correctly but with current values what we are getting is something outside the ASCII printable.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Sep 22, 2017 at 14:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   EDIT :\n  </strong>\n  As Paweł Łukasik and DittoPDX stated, the binary is indeed flawed, and thus do not allow any correct flag. However the approach taken bellow is still valid and may help in similar tasks.\n </p>\n <hr/>\n <p>\n  I am pretty sure there are many different ways to solve this challenge, and here is one I learnt from other CTF tasks which requires very little reverse engineering.\n </p>\n <p>\n  The whole solution lays on the way the main loop is built :\n </p>\n <pre><code>for ( i= 0; i <= 30; i++)\n{\n    if ( check(ec[i], argv[1][i]) )\n    {\n        puts(\"Nope\");\n        return -1;\n    }\n}\nputs(\"congrats!\");\nresult = 0;\n</code></pre>\n <p>\n  The only way to reach \"congrats!\" would be by going through the whole loop without hitting that return in the middle.\nThe interresting part is that the check function is called on each char of the input, and the loop exists as soon as it is not valid.\n </p>\n <p>\n  This construction has some implication on things you can evaluate during the program execution. One may call this a \"side channel attack\".\n </p>\n <hr/>\n <p>\n  <strong>\n   <em>\n    Spoiler, below this mark are some more details to solve this task.\n   </em>\n  </strong>\n </p>\n <hr/>\n <blockquote class=\"spoiler\">\n  <p>\n   What I meant is : the number of instruction executed by the binary will increase for every right char you got.\n \n One way to solve this challenge would be to count the number of executed instruction (Hint :\n   <a href=\"https://software.intel.com/en-us/articles/pin-a-binary-instrumentation-tool-downloads\" rel=\"nofollow noreferrer\">\n    PinTools\n   </a>\n   ; Source/tools/ManualExamples/inscount), and to bruteforce the input char by char. Everytime you guess the right char, the number of executed instructions will increase.\n\nAn easy way to script all this would be to use the\n   <a href=\"http://docs.pwntools.com/en/stable/tubes/processes.html\" rel=\"nofollow noreferrer\">\n    pwntools\n   </a>\n   python module :)\n  </p>\n </blockquote>\n <p>\n  I hope this helped, happy CTF !\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Nxgr",
            "time": "Sep 22, 2017 at 7:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user21677",
                    "text": "<span class=\"comment-copy\">Referring to Lukasik's \"flawed binary\" comment way above, I think that even if I did find out the password, the program wouldn't accept it because it requires us to manually debug the program and find out each individual ascii character. If we put in any single input from (0 - 256) on the extended ascii table, the array will return false regardless. In order to pass the 2nd set of checks, we'd have to manually change the array values to match its calculated value.</span>",
                    "time": null
                }
            ]
        }
    ]
}