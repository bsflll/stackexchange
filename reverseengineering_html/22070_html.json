{
    "title": "Does the loader fill the IAT table of an .exe in load time by checking the corresponding export tables or during run time?",
    "link": "https://reverseengineering.stackexchange.com/questions/22070/does-the-loader-fill-the-iat-table-of-an-exe-in-load-time-by-checking-the-corre",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I came upon this question :\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/22066/can-we-hook-the-nt-or-zw-functions-using-iat-hooking-or-just-inline-hooking\">\n   Can we hook the Nt or Zw functions using IAT hooking, or just inline hooking?\n  </a>\n </p>\n <p>\n  and it got me wondering, lets say for some reason some function was not in the IAT of our target PE in virtual memory, like the above question which is Zw/NtQuerySystemInformation (I'm still not sure why this is not included in IAT tho), so in this case if we wanted to hook the IAT, would it be possible to hook the export table of kernel32.dll or ntdll.dll and do it like that instead? because i assume this function has to be there at least\n </p>\n <p>\n  so this takes me back to the question, will the loader fill our IAT when its loading the PE into memory by checking the export tables, or when our program uses it? because if its the first case then I assume there is no way to hook the export table right?\n </p>\n <p>\n  also does anyone know why functions like ZwQuerySystemInformation dont get included in IAT but stuff like Sleep and GetProcAddress Does?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "x86",
        "patching",
        "patch-reversing",
        "x86-64"
    ],
    "user": "Max",
    "time": "Sep 7, 2019 at 12:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the Apis like Sleep are documented  a header file is provided in the sdk a library to link against is provided  by sdk  (windows.h ,kernel32.lib)\n </p>\n <p>\n  api s like Zwxxx are internal or advanced user apis they or either undocumented or semidocumented  or documented for usage in a kernel mode\n  \n\n  these apis are not to be taken for granted to be either forward compatible  or backward compatible\n </p>\n <p>\n  so if you use them then all the care that is required is to be taken by the one who is using them\n </p>\n <p>\n  so they are designed to be dynamically called  using load library , getting the procedure address  , casting the return as a typedeffed function pointer\n </p>\n <p>\n  they dont reside in IAT or loader doesnot resolve them\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Sep 7, 2019 at 14:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Max",
                    "text": "<span class=\"comment-copy\">So there is no way to IAT hook or hook the export table of a Zwxxx or Ntxxx function? i mean if the only way to use them is loadlibrary/GetProcAddr then can't we just hook it in the export table of Ntdll and therefore when task manager tries to use it we win?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  When does the PE loader fill in the IAT?\n </h1>\n <p>\n  The IAT is updated at load time by the PE Loader [1], this is called\n  <em>\n   Load-time dynamic linking\n  </em>\n  , as opposed to\n  <em>\n   Run-time dynamic linking\n  </em>\n  , where\n  <code>\n   LoadLibrary/GetProcAddress\n  </code>\n  are necessary.\n </p>\n <h1>\n  Hooking an API not included in Import Address Table\n </h1>\n <p>\n  There are several ways to do that actually, and Export Address Table hooking is one of them. However, your hook must be installed before the target application looks up the API you want to hook.\n </p>\n <h1>\n  Include Nt/Zw APIs in the IAT\n </h1>\n <blockquote>\n  <p>\n   also does anyone know why functions like ZwQuerySystemInformation dont get included in IAT but stuff like Sleep and GetProcAddress Does?\n  </p>\n </blockquote>\n <p>\n  The only reason\n  <code>\n   ZwQuerySystemInformation\n  </code>\n  is not included in the IAT is because you didn't tell your linker to do it for you. You need need to link against ntdll import library (available by default in VS2017), or you can build you own.\n </p>\n <p>\n  On my system with\n  <code>\n   mingw\n  </code>\n  and\n  <code>\n   clang\n  </code>\n  installed, I was able to take the code from [2], remove any\n  <code>\n   GetProcAddress/LoadLibrary\n  </code>\n  calls, and build it. This gives:\n </p>\n <pre><code>#include <stdio.h>\n#include <windows.h>\n#include <winternl.h>\n\nint main(void) {\n    \n    /* load the ntdll.dll */\n    PVOID Info;\n    /* create the string in the right format */\n    UNICODE_STRING filename;\n    RtlInitUnicodeString(&filename, L\"C:\\\\temp.txt\");\n\n    /* initialize OBJECT_ATTRIBUTES */\n    OBJECT_ATTRIBUTES obja;\n    InitializeObjectAttributes(&obja, &filename, OBJ_CASE_INSENSITIVE, NULL, NULL);\n\n    /* call NtOpenFile */\n    IO_STATUS_BLOCK iostatusblock;\n    HANDLE file = NULL;\n    NTSTATUS stat = NtOpenFile(&file, FILE_WRITE_DATA, &obja, NULL, NULL, NULL);\n    if(NT_SUCCESS(stat)) {\n        printf(\"File successfully opened.\n\");\n    }\n    else {\n        printf(\"File could not be opened.\n\");\n    }\n\n    getchar();\n    return 0;\n}\n</code></pre>\n <p>\n  To build, I use:\n </p>\n <pre><code>clang -target x86_64-w64-windows-gnu toto.c -o toto.exe -lntdll\n</code></pre>\n <p>\n  Then,\n  <em>\n   IDA Free 7.0\n  </em>\n  allows us to see that\n  <code>\n   NtOpenFile\n  </code>\n  was successfully included in the IAT:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/NSKXI.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"NTDLL APIs in the IAT\" src=\"https://i.sstatic.net/NSKXI.png\"/>\n  </a>\n </p>\n <h1>\n  References\n </h1>\n <p>\n  [1]: The Rootkit Arsenal, Bill Blunder, Chapter 11, p.480\n </p>\n <p>\n  [2]: Calling NTDLL functions directly,\n  <a href=\"https://resources.infosecinstitute.com/calling-ntdll-functions-directly\" rel=\"nofollow noreferrer\">\n   https://resources.infosecinstitute.com/calling-ntdll-functions-directly\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Max",
                    "text": "<span class=\"comment-copy\">Thanks for answer! but doesn't ntdll gets mapped into every loaded PE automatically? i mean i don't even need the load the ntdll library to call these functions, i just need to get its handle and use getproc so this means its already there, right?</span>",
                    "time": null
                },
                {
                    "user": "plowsec",
                    "text": "<span class=\"comment-copy\">Yes, ntdll and a bunch of other libraries are automatically loaded. Using LoadLibrary on an already loaded library generally returns its handle (there are corner cases though, keep that in mind if you don't understand why your handle is invalid).</span>",
                    "time": null
                },
                {
                    "user": "plowsec",
                    "text": "<span class=\"comment-copy\">@Max does this answer your question? If so, please mark as accepted, or else edit your original question so that we can help you further ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}