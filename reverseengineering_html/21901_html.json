{
    "title": "How to make IDA processor for file format with tree structure",
    "link": "https://reverseengineering.stackexchange.com/questions/21901/how-to-make-ida-processor-for-file-format-with-tree-structure",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Most of file formats IDA handles are structured in a linear way, for example EXE or ELF or Java's Class file and so on.\n </p>\n <p>\n  However when it comes to tree-structured file format, I can't come up with a good way to properly handle them.\n  \n\n  For example, recently I met a obfuscated PYC file, and the code has an OLLVM-like obfuscation plus some junk bytes, so a strong disassembler like IDA is needed. The PYC file format is in fact some magic byte + python marshal data, which is easy to parse. However, the marshaled data is in tree structure. Here's an example:\n  <a href=\"http://www.beesfun.com/2017/04/01/PyCodeObject%E5%92%8Copcode/\" rel=\"nofollow noreferrer\">\n   http://www.beesfun.com/2017/04/01/PyCodeObject%E5%92%8Copcode/\n  </a>\n  \n\n  As you can see in the parsed result, the root object is a\n  <code>\n   module\n  </code>\n  whose consts contain other functions in module, and the function in module can also have sub-functions in their consts.\nAlso\n  <code>\n   dis\n  </code>\n  module or\n  <code>\n   pytype\n  </code>\n  can be used to parse the PYC file\n </p>\n <p>\n  Like Java's compiled file, PYC stores bytecodes and some metadata for each functions, functions call each other\n  <strong>\n   with name\n  </strong>\n  instead of address, bytecode believe the\n  <strong>\n   address starts from 0 in every function\n  </strong>\n  . So I studied the source code of module/java in idasdk73, trying to understand how the developers from HexRays cope with the Java class file format.\n  \n\n  Then I found Java module in IDA are making a separate segment for each method and slot area. Because the python bytecode assume address starts from 0 in every function, and in every function there's a separate const pool which is also indexed from 0, I decided to create a header segment, a code segment and a const segment. \nBut this same way won't work for a PYC file, as the PYC format is tree-structured (sub-functions are stored in parent const pools), and IDA does not allow overlapped segments. So I can't make the consts area a single segment.\n  \n\n  But if I create a segment for each const, there will be tens of thousands of segments if the original py file is big.\n </p>\n <p>\n  Is there a better way to make a loader for the\n  <strong>\n   tree-structured\n  </strong>\n  format like PYC?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "628",
    "tags": [
        "ida",
        "disassembly",
        "idapython",
        "file-format",
        "python"
    ],
    "user": "Misty",
    "time": "Aug 15, 2019 at 18:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In not sure why you canâ€™t just use several non overlapping segments but maybe the\n  <a href=\"http://idabook.com/examples/chapter_19/index.html\" rel=\"nofollow noreferrer\">\n   <code>\n    .pyc\n   </code>\n   processor module\n  </a>\n  from\n  <em>\n   The IDA Pro book\n  </em>\n  will be useful (I think it includes a loader)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Aug 17, 2019 at 13:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">I looked it but it seems that it does not have an loader? Seems that he didn't parse the header of pyc. And in fact my pyc processor is adapted from his one. For the reason why I don't choose to use the non-overlapping approach, that's because I want to preserve the reference to const area, however const areas contain functions, and those functions may contain smaller functions. I can't imagine how to write a loader for things like this :(</span>",
                    "time": null
                }
            ]
        }
    ]
}