{
    "title": "How this data can be referenced in Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/30777/how-this-data-can-be-referenced-in-ghidra",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I reverse engineered\n  <code>\n   libil2cpp.so\n  </code>\n  using ghidra. I found these lines of code in a function in the decompiler view:\n </p>\n <pre><code>UnityEngine.PlayerPrefs$$GetInt(*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8),5,0);\n</code></pre>\n <p>\n  it is apparently getting the value of a\n  <code>\n   shared_preferences\n  </code>\n  . the syntax of when getting a shared_preference in\n  <code>\n   unity\n  </code>\n  games is as follows as described in the documentation:\n </p>\n <pre><code>UnityEngine.PlayerPrefs.GetInt(string key, int defaultValue)\n</code></pre>\n <p>\n  so as apparently the\n  <code>\n   *(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8)\n  </code>\n  in the reversed code is the corresponding\n  <code>\n   string key\n  </code>\n  . while in general I know where the key is in the reversed code which is at this address\n </p>\n <pre><code>010e94b8      undefined4      ??       ; ScoreID                                                                                            \n\n</code></pre>\n <p>\n  so what I wanted to learn is that how\n  <code>\n   *(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8)\n  </code>\n  is reffering to that address\n  <code>\n   010e94b8\n  </code>\n  holding the string key.\n </p>\n <p>\n  what I tried so far?\n </p>\n <p>\n  referring to\n  <a href=\"https://stackoverflow.com/a/69652148\">\n   this answer\n  </a>\n  , I double clicked the value\n  <code>\n   Class$ItemPref\n  </code>\n  in the decompiled code\n  <code>\n   *(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8)\n  </code>\n  and take its memory address\n  <code>\n   010dd710\n  </code>\n  and then adding\n  <code>\n   0x5c\n  </code>\n  yeilds\n  <code>\n   10DD76C\n  </code>\n  and then adding\n  <code>\n   8\n  </code>\n  yeilds\n  <code>\n   10DD774\n  </code>\n  so going to this address\n  <code>\n   10DD774\n  </code>\n  does not contain the string\n  <code>\n   ScoringID\n  </code>\n  .\n </p>\n <p>\n  also I did this taking memory address of\n  <code>\n   Class$ItemPref\n  </code>\n  which is\n  <code>\n   010dd710\n  </code>\n  and then adding\n  <code>\n   0x5c\n  </code>\n  and the multiply the size of the typecast which is\n  <code>\n   int\n  </code>\n  which is\n  <code>\n   4\n  </code>\n  then the result is\n  <code>\n   4375DB0\n  </code>\n  then adding\n  <code>\n   8\n  </code>\n  equals to\n  <code>\n   4375DB8\n  </code>\n  but this is not quite right.\n </p>\n <p>\n  but what I really wanted to learn is that how that string\n  <code>\n   ScoreID\n  </code>\n  is referred in the decompiled code\n  <code>\n   UnityEngine.PlayerPrefs$$GetInt(*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8),5,0);\n  </code>\n  please help this as my limited knowledge of reversing and ghidra.\n </p>\n <p>\n  if it helps, the corresponding disassembled view of the code is as follows:\n </p>\n <pre><code>    003e60f0 5c 00 90 e5              ldr             r0, [r0,#0x5c]\n    003e60f4 05 10 a0 e3              mov             r1, #0x5\n    003e60f8 00 20 a0 e3              mov             r2, #0x0\n    003e60fc 08 00 90 e5              ldr             r0, [r0,#0x8]\n    003e6100 10 4c bd e8              ldmia           sp!,{r4 r10 r11 lr}\n    003e6104 1a 63 14 ea              b               UnityEngine.PlayerPrefs$$GetInt                                                                        ; undefined UnityEngine.PlayerPrefs$$GetInt()\n                    -- Flow Override: CALL_RETURN (CALL_TERMIN\n\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "265",
    "tags": [
        "ghidra",
        "static-analysis",
        "decompile",
        "c#",
        "game-hacking"
    ],
    "user": "hanan",
    "time": "Aug 14, 2022 at 13:50",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n I don't think the type\n <code>\n  string\n </code>\n is equivalent to a\n <code>\n  char*\n </code>\n where you would find the characters at the referenced memory address. Instead\n <code>\n  string\n </code>\n is a struct so the pointer just leads you to that struct. See e.g.\n <a href=\"https://stackoverflow.com/questions/53654062/internal-structure-of-class-string-in-c\" title=\"internal structure of class string in c\">\n  stackoverflow.com/questions/53654062/â€¦\n </a>\n (not sure if this also applies to the used\n <code>\n  string\n </code>\n type in your case)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}