{
    "title": "Static Analysis - Scope Changes",
    "link": "https://reverseengineering.stackexchange.com/questions/3584/static-analysis-scope-changes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking for an algorithm or some tips on how to find scope changes when doing static analysis of a decompiled ASM source. I need to know the scope changes for tracking stack usage and reaching definitions for variables. If I have a program like\n </p>\n <pre><code>int somefunc(int b) {\n\n// Scope 1\na = b + 1;\n\nif(a > 0) {\n  // Scope 2\n  a = 0\n} else {\n  // Scope 3\n  a = b;\n}\n\nreturn a;\n</code></pre>\n <p>\n  Once I have constructed the flow graph from the assembly, how do I know then scope changes from 1-2 and back from 2-1 etc? My only guess so far is it would have something to do with dominance and checking for subgraphs. Some of the issues that I would see with this approach would be the loops or statements that have early terminations such as break; continue; return - they will produce a graph where you can not determine dominance and won't be able to tell when your scope increases or decreases.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "209",
    "tags": [
        "static-analysis"
    ],
    "user": "Vitaly Omelchenko",
    "time": "Jan 30, 2014 at 16:57",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n There is no such concept at assembly level, so simply put: you won't know. You can certainly follow conditional jumps or so, but they may not coincide with scopes in the original. Basically turning C into assembly into binary is a lossy process and you have to deal with it when reverse engineering.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem of scope (and the related problem of dynamic typing) eg in JavaScript is tackled by Marijn Haverbeke's\n  <a href=\"https://github.com/marijnh/tern\" rel=\"nofollow\">\n   tern project\n  </a>\n  . Maybe this could be of great help to this case.\n </p>\n <p>\n  Effectively when you have the decompiled source you can use sth like tern to analyze it as source code on-the-fly (as is done in javascript for which tern is designed)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Nikos M.",
            "time": "May 25, 2014 at 2:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nikos M.",
                    "text": "<span class=\"comment-copy\">dont like it? Yet it does provide a way to have a tool to check the (static) scope of variables in the decompiled source, tern maybe for javascript (and is open source) but it can easily (presumably) be modified for other source code</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The concept of lexical scope is ONLY available at a higher level of language than assembly.  The compiler is what keeps track of scope.  Once source has been compiled to machine code, the concept of \"scope\" ceases to exist... its just a long stream of instructions.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "avgvstvs",
            "time": "May 30, 2014 at 21:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}