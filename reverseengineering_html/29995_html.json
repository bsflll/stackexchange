{
    "title": "How to create and change variables at address in IDA Python?",
    "link": "https://reverseengineering.stackexchange.com/questions/29995/how-to-create-and-change-variables-at-address-in-ida-python",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to be able to create and change global variables at addresses with IDA Python: if variable doesn't exist, create it, if it exists, change it, set its name, undefine it.\n </p>\n <p>\n  For structs, there's\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.add_struc\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.add_struc\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.add_struc_member\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.add_struc_member\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_member_type\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.set_member_type\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_member_name\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.set_member_name\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.del_struc\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.del_struc\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.del_struc_member\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.del_struc_member\n   </code>\n  </a>\n  .\n </p>\n <p>\n  There's\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_name\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.set_name\n   </code>\n  </a>\n  to set a name at address and\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.get_flags\" rel=\"nofollow noreferrer\">\n   <code>\n    ida_bytes.get_flags\n   </code>\n  </a>\n  function to get flags, but I can't find a respective function such as\n  <code>\n   set_flags\n  </code>\n  or\n  <code>\n   set_type\n  </code>\n  to change global variable type at address. So to set variable type to dword, I'd do something like\n  <code>\n   ida_bytes.set_flags(0x14001D01C, ida_bytes.dword_flag())\n  </code>\n  , and to set it to structure type, I'd like to do something like\n  <code>\n   ida_bytes.set_flags(0x14001D01C, ida_bytes.stru_flag(), ida_struct.get_struc_id(\"MyStructName\"))\n  </code>\n </p>\n <p>\n  I scrolled through idaapi, ida_bytes, idc, ida_struct and ida_typeinf documentation. I also searched for\n  <code>\n   set_\n  </code>\n  ,\n  <code>\n   _flag\n  </code>\n  ,\n  <code>\n   _type\n  </code>\n  and other in the search box on the hex-rays documentation website, and also manually with Ctrl+F in the pages for namespaces above, but couldn't find functions to set flags at address.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "KulaGGin",
    "time": "Mar 23, 2023 at 9:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The methods I was looking for are:\n </p>\n <ul>\n  <li>\n   <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.create_data\" rel=\"nofollow noreferrer\">\n    <code>\n     ida_bytes.create_data\n    </code>\n   </a>\n   (and other\n   <code>\n    create_\n   </code>\n   variations, such as\n   <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.create_byte\" rel=\"nofollow noreferrer\">\n    <code>\n     create_byte\n    </code>\n   </a>\n   ) to create and change type of variables.\n  </li>\n  <li>\n   <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.del_items\" rel=\"nofollow noreferrer\">\n    <code>\n     ida_bytes.del_items\n    </code>\n   </a>\n   to undefine variables.\n  </li>\n  <li>\n   <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_name\" rel=\"nofollow noreferrer\">\n    <code>\n     idc.set_name\n    </code>\n   </a>\n   or\n   <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_name.html#ida_name.set_name\" rel=\"nofollow noreferrer\">\n    <code>\n     ida_name.set_name\n    </code>\n   </a>\n   to define, change and undefine names of variables.\n  </li>\n </ul>\n <p>\n  To get the name of the variable at address, use\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.get_namehttps://www.hex-rays.com/wp-content/static/products/ida/support/idapython_docs/idc.html#idc.get_name\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.get_name\n   </code>\n  </a>\n  .\n </p>\n <p>\n  To get the type of the variable at address, first retreive the flags with\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.get_flags\" rel=\"nofollow noreferrer\">\n   <code>\n    ida_bytes.get_flags\n   </code>\n  </a>\n  . Then to get its actual type you can use functions, such as\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.is_byte\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.is_byte\n   </code>\n  </a>\n  to determine if it's a byte, or\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.is_struct\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.is_struct\n   </code>\n  </a>\n  to determine if it's a struct. Then, if it's a struct, to determine specific type of a struct, use\n  <code>\n   idaapi.get_opinfo(struct_id_buffer, ea, 0, flags)\n  </code>\n  (\n  <a href=\"https://reverseengineering.stackexchange.com/a/30000/33592\">\n   example\n  </a>\n  ).\n </p>\n <p>\n  For structs, there's\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.add_struc\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.add_struc\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.add_struc_member\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.add_struc_member\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_member_type\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.set_member_type\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_member_name\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.set_member_name\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.del_struc\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.del_struc\n   </code>\n  </a>\n  ,\n  <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.del_struc_member\" rel=\"nofollow noreferrer\">\n   <code>\n    idc.del_struc_member\n   </code>\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Ray",
            "time": "Mar 23, 2023 at 9:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Disclaimer: I maintain the ida-minsc plugin...\n </p>\n <p>\n  Using the minsc plugin at\n  <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">\n   https://github.com/arizvisa/ida-minsc\n  </a>\n  , you can use both the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-get\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get\n   </code>\n  </a>\n  and\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-set\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set\n   </code>\n  </a>\n  namespaces to fetch or apply things to an address in the database. Names can be fetched or applied via the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.name\" rel=\"nofollow noreferrer\">\n   <code>\n    database.name\n   </code>\n  </a>\n  function with an address.\n </p>\n <h1>\n  Getting, Setting, Testing\n </h1>\n <p>\n  Within both of these namespaces from the minsc plugin are namespaces such as\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-set-integer\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set.integer\n   </code>\n  </a>\n  , or\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-set-float\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set.float\n   </code>\n  </a>\n  which can be used to set the flags as required for an integer or floating-point value. To undefine the type applied to an address, the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.set.unknown\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set.undefine\n   </code>\n  </a>\n  can be used. The following python demonstrates each of these.\n </p>\n <pre><code>Python>db.disasm()\n'1c020b965: db 1\n1c020b966: db 0\n1c020b967: db 0\n1c020b968: db 10h'\n\nPython>print(_)\n1c020b965: db 1\n1c020b966: db 0\n1c020b967: db 0\n1c020b968: db 10h\n\n# Set the current address to a uint32_t, and return its value.\nPython>db.set.integer.uint32_t()\n0x10000001\n\nPython>db.disasm()\n'1c020b965: dd 10000001h' \n\n# Get a floating-point number from the current address.\nPython>db.get.float()   # or db.get.float.single() if you do not want to use the item size.\n2.5243551976337916e-29\n\n# Undefine 4 bytes at the current address.\nPython>db.set.undefine(idc.here(), 4)\n0x4\n\nPython>db.disasm()\n'1c020b965: db 1\n1c020b966: db 0\n1c020b967: db 0\n1c020b968: db 10h'\n</code></pre>\n <p>\n  If you are trying to test the information applied to an address, the entirety of the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-type\" rel=\"nofollow noreferrer\">\n   <code>\n    database.type\n   </code>\n  </a>\n  namespace should cover things. If information about the type at the current address is necessary, the\n  <a href=\"https://github.com/arizvisa/ida-minsc/blob/persistence-refactor/base/database.py#L8364\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.type\n   </code>\n  </a>\n  function can be used to fetch the\n  <a href=\"https://arizvisa.github.io/ida-minsc/pythontyping.html\" rel=\"nofollow noreferrer\">\n   pythonic-type\n  </a>\n  for an address.\n </p>\n <pre><code># Return the size of an item.\nPython>db.t.size()\n0x4\n\n# Return whether there is a structure at an address.\nPython>db.t.structure.has()\nTrue\n\n# Get the type of structure if it's there.\nPython>db.t.structure.has() and db.t.structure()\n<class 'structure' name='_GUID' offset=0x2ac34 size=0x10784>\n\n# Get the pythonic type at an address.\nPython>db.name(), db.disasm()\n('_Feature_1559121213__private_reporting', '2ac30: dd ?')\n\nPython>db.get.type()\n(<class 'int'>, 0x4)\n\n# Flags...if really needed.\nPython>db.type.flags()\n0x20005400\n\nPython>db.type.flags(idc.here(), idaapi.FF_DWORD)\n0x20000000\n</code></pre>\n <h1>\n  Structures/Unions (and Arrays)\n </h1>\n <p>\n  Structures can be set by name or object to an address using the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.set.structure\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set.structure\n   </code>\n  </a>\n  function. Similarly, arrays of types can be applied using the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.set.array\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set.array\n   </code>\n  </a>\n  function. These functions can be paired with both the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.get.structure\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.structure\n   </code>\n  </a>\n  or\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.get.array\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.array\n   </code>\n  </a>\n  functions to decode values from the database.\n </p>\n <p>\n  <em>\n   It is also worth noting that these functions also support the\n   <a href=\"https://arizvisa.github.io/ida-minsc/pythontyping.html\" rel=\"nofollow noreferrer\">\n    pythonic-types\n   </a>\n   feature from minsc\n  </em>\n  .\n </p>\n <pre><code>Python>db.disasm()\n'1c020b965: db 1\n1c020b966: db 0\n1c020b967: db 0\n1c020b968: db 10h'\n\n# Apply the \"GUID\" structure to the current address.\nPython>db.set.struct(idc.here(), 'GUID')\n{'Data1': 0x10000001, 'Data2': 0x300, 'Data3': 0x6, 'Data4': array('B', [6, 2, 16, 4, 69, 69, 69, 5])}\n\nPython>db.disasm()\n'1c020b965: _GUID <10000001h, 300h, 6, <6, 2, 10h, 4, 45h, 45h, 45h, 5>>' \n\n# Set the current address to a 32-element array of 2-byte (16-bit) integers.\nPython>db.set.array(idc.here(), (int,2), 0x20)\narray('H', [1, 4096, 768, 6, 518, 1040, 17733, 1349, 1285, 1285, 12341, 20480, 0, 0, 8224, 20536, 1872, 0, 12343, 22320, 1872, 0, 8224, 8, 0, 2048, 26720, 24672, 24672, 0, 28784, 30840])\n\n# Decode the data at the current address using the structure \"GUID\"\nPython>db.get.struc(idc.here(), 'GUID')\n{'Data1': 0x10000001, 'Data2': 0x300, 'Data3': 0x6, 'Data4': array('B', [6, 2, 16, 4, 69, 69, 69, 5])}\n\nPython>db.disasm()\n'1c020b965: db 1, 2 dup(0), 10h, 0, 3, 6, 0, 6, 2, 10h, 4, 3 dup(45h)'\n\n# Decode the data at the current address as a 4-element array of the structure \"GUID\".\nPython>db.get.array(idc.here(), struc.by('GUID'), 4)\n[{'Data1': 0x10000001, 'Data2': 0x300, 'Data3': 0x6, 'Data4': array('B', [6, 2, 16, 4, 69, 69, 69, 5])}, {'Data1': 0x5050505, 'Data2': 0x3035, 'Data3': 0x5000, 'Data4': array('B', [0, 0, 0, 0, 32, 32, 56, 80])}, {'Data1': 0x750, 'Data2': 0x3037, 'Data3': 0x5730, 'Data4': array('B', [80, 7, 0, 0, 32, 32, 8, 0])}, {'Data1': 0x8000000, 'Data2': 0x6860, 'Data3': 0x6060, 'Data4': array('B', [96, 96, 0, 0, 112, 112, 120, 120])}]\n</code></pre>\n <h2>\n  Structure/Union members (\n  <code>\n   FF_STRUCT\n  </code>\n  )\n </h2>\n <p>\n  Accessing the members of a structure in minsc is done entirely using a\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure-t\" rel=\"nofollow noreferrer\">\n   <code>\n    structure_t\n   </code>\n  </a>\n  class. This can be fetched by name using\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.by\" rel=\"nofollow noreferrer\">\n   <code>\n    structure.by\n   </code>\n  </a>\n  . Once an instance of a\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure-t\" rel=\"nofollow noreferrer\">\n   <code>\n    structure_t\n   </code>\n  </a>\n  is fetched, then you can access its members by index or slice. Each member instance is using a\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#member-t\" rel=\"nofollow noreferrer\">\n   <code>\n    member_t\n   </code>\n  </a>\n  class. Adding a member can be done via\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.members_t.add\" rel=\"nofollow noreferrer\">\n   <code>\n    members_t.add\n   </code>\n  </a>\n  .\n </p>\n <p>\n  As specified in another answer (as\n  <code>\n   set_member_name\n  </code>\n  and\n  <code>\n   set_member_type\n  </code>\n  ), with minsc you can use the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.member_t.name\" rel=\"nofollow noreferrer\">\n   <code>\n    member_t.name\n   </code>\n  </a>\n  ,\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.member_t.type\" rel=\"nofollow noreferrer\">\n   <code>\n    member_t.type\n   </code>\n  </a>\n  , and\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.member_t.typeinfo\" rel=\"nofollow noreferrer\">\n   <code>\n    member_t.typeinfo\n   </code>\n  </a>\n  attributes to change the name or type of a member.\n </p>\n <pre><code>Python>st=struc.by('GUID')\n\nPython>st.members\n<class 'structure' name='_GUID' size=0x10>\n[0]  0+0x4       unsigned int 'Data1' (<class 'int'>, 4)\n[1]  4+0x2   unsigned __int16 'Data2' (<class 'int'>, 2)\n[2]  6+0x2   unsigned __int16 'Data3' (<class 'int'>, 2)\n[3]  8+0x8 unsigned __int8[8] 'Data4' [(<class 'int'>, 1), 8]\n\nPython>st.members[0].name, st.members[0].typeinfo = 'blah', 'char[4]'\n\nPython>st.members[0]\n<member '_GUID.blah' index=0 offset=0x0 size=+0x4 typeinfo='char[4]'> \n\n# Slices are probably useful if you're trying to copy a range of global\n# variables and types into a structure. This way you can apply your new\n# structure to the global address that you copied things from.\n\nPython>db.disasm()\n'2ac40: dd 100h dup( ?)\n2b040: db 200h dup( ?)\n2b240: db 100h dup( ?)\n2b340: db 10000h dup( ?)\n3b340: db 84h dup( ?)'\n\n# Copy the types from the range of addresses that we just disassembled.\nPython>st=struc.by('GUID')\nPython>st.members[:] = [database.type(ea) for ea in database.address()]\n\nPython>st.members\n<class 'structure' name='_GUID' size=0x10784>\n[0]     0+0x400      int[256] 'field_0'     [(<class 'int'>, 4), 256]\n[1]   400+0x200     char[512] 'field_400'   [(<class 'int'>, 1), 512]\n[2]   600+0x100     char[256] 'field_600'   [(<class 'int'>, 1), 256]\n[3]   700+0x10000 char[65536] 'field_700'   [(<class 'int'>, 1), 65536]\n[4] 10700+0x84      char[132] 'field_10700' [(<class 'int'>, 1), 132]\n\n# Copy the names from each address that we have selected.\nPython>for ea, m in zip(database.address(), st.members):\nPython>    m.name = db.name(ea)\n\nPython>st.members\n<class 'structure' name='_GUID' size=0x10784>\n[0]     0+0x400      int[256] '_gFECLog'       [(<class 'int'>, 4), 256]\n[1]   400+0x200     char[512] '_gFECExp'       [(<class 'int'>, 1), 512]\n[2]   600+0x100     char[256] '_gFECInverse'   [(<class 'int'>, 1), 256]\n[3]   700+0x10000 char[65536] '_gFECMultTable' [(<class 'int'>, 1), 65536]\n[4] 10700+0x84      char[132] '_gFECLog2'      [(<class 'int'>, 1), 132]\n</code></pre>\n <h1>\n  Types (\n  <code>\n   tinfo_t\n  </code>\n  )\n </h1>\n <p>\n  Despite the ability to set structures and other things via flags, it is recommended to use types from the local type library when applying things to an address. This can be done via the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-type\" rel=\"nofollow noreferrer\">\n   <code>\n    database.type\n   </code>\n  </a>\n  function in minsc (which is also aliased as\n  <code>\n   database.t\n  </code>\n  ).\n </p>\n <pre><code>Python>db.disasm()\n'1c020b965: _GUID <10000001h, 300h, 6, <6, 2, 10h, 4, 45h, 45h, 45h, 5>>'\n\n# Grab the type at the current address as a demonstration, and then undefine it.\nPython>db.t(), type(db.t())\n(GUID, <class 'ida_typeinf.tinfo_t'>)\n\nPython>db.set.undefine()\n0x10\n\n# Apply some type to the current address.\nPython>db.t('struct {int a; int b; int c; int d;}')\nGUID\n\nPython>db.disasm()\n'1c020b965: $47D2AD9FB6277417A51DF31EA5A2E03E <10000001h, 60300h, 4100206h, \\\\'\n\n# Fetch the type at the current address.\nPython>db.t()\nstruct {int a;int b;int c;int d;}\n</code></pre>\n <p>\n  <em>\n   The old structure API is expected to be deprecated at some point in the future in favor of the local type library.\n  </em>\n </p>\n <h1>\n  Strings\n </h1>\n <p>\n  <em>\n   Although these were not asked about in the original question, these are related to the flags (\n   <code>\n    FF_STRLIT\n   </code>\n   ) for an address.\n  </em>\n </p>\n <p>\n  Strings can also be applied using\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.set.string\" rel=\"nofollow noreferrer\">\n   <code>\n    database.set.string\n   </code>\n  </a>\n  and fetched via\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.get.string\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.string\n   </code>\n  </a>\n  .\n </p>\n <pre><code>Python>db.disasm()\n'278124e0: text \"UTF-16LE\", \\'Archive\\',0'\n\n# This string is already defined, so return it.\nPython>db.get.string()\n'Archive'\n\n# Undefine the string at the current address, it was 0x10 bytes.\nPython>db.set.undefine()\n0x10\n\nPython>db.disasm(count=10)\n'278124e0: db 41h\n278124e1: db 0\n278124e2: db 72h\n278124e3: db 0\n278124e4: db 63h\n278124e5: db 0\n278124e6: db 68h\n278124e7: db 0\n278124e8: db 69h\n278124e9: db 0'\n\n# Re-create the string using a 2-byte character width.\nPython>db.set.string(idc.here(), width=2)\n'Archive\\x00'\n\nPython>db.disasm()\n'278124e0: text \"UTF-16LE\", \\'Archive\\',0'\n</code></pre>\n <p>\n  These string functions support different encodings using the concept of a \"string type\". A \"string type\" is either an integer describing the character width, or a tuple containing the character width and the number of bytes for the length prefix (if it has one).\n </p>\n <pre><code>Python>db.disasm()\n'278118c8: db 8Ch\n278118c9: db 9Fh\n278118ca: db 8Dh\n278118cb: db 0F5h'\n\n# Apply a string type using the \"Shift-JIS\" encoding to the current address.\nPython>db.set.string(idc.here(), encoding='shift-jis')\n'検索フォルダには保存できません。\\x00'\n\nPython>db.disasm()\n'278118c8: text \"SHIFT-JIS\", \\'検索フォルダには保存できません。\\',0'\n\n# Undefine the string at the current address. It was 0x21 bytes.\nPython>db.set.unknown()\n0x21\n\n# Decode the string at the current address using a \"Shift-JIS\" encoding.\nPython>db.get.string(idc.here(), encoding='shift-jis')\n'検索フォルダには保存できません。'\n\nPython>db.disasm()\n'278118c8: db 8Ch'\n\n# Disassemble some random address that allows us to use a length.\nPython>db.disasm()\n\"27815328: dw 6\n2781532a: db 'CoCreateInstance',0\"\n\n# Undefine both addresses that are selected, resulting in 0x13 bytes being undefined.\nPython>db.set.undefine()\n0x13\n\n# Apply a string with a 2-byte length prefix and 1-byte character width to the current address.\nPython>db.set.string(idc.here(), strtype=(1, 2))\n'CoCrea'\n\n# 16-bit length at current address is 6.\nPython>db.get.i.uint16_t()\n0x6\n\n# Size of the current item is the sum of 2-bytes for the length\n# and its value of 0x06. This results in an item size of 0x08.\nPython>db.type.size()\n0x8\n\n# Get string at current address.\nPython>db.get.string()\n'CoCrea'\n\n# Ignoring the applied string type, decode the current address as\n# a string with a 1-byte character width, 0-byte length prefix (null-terminated).\nPython>db.get.string(idc.here()+2, strtype=(1,0))\n'CoCreateInstance'\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 21, 2024 at 6:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "KulaGGin",
                    "text": "<span class=\"comment-copy\">Thank you very much for your detailed answer, I'll keep this in mind and try to use your library next time.</span>",
                    "time": null
                }
            ]
        }
    ]
}