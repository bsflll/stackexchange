{
    "title": "Very simple example log file - Recording program execution [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/11974/very-simple-example-log-file-recording-program-execution",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs\n        <a href=\"/help/closed-questions\">\n         details or clarity\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Add details and clarify the problem by\n       <a href=\"/posts/11974/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2016-02-10 16:45:08Z\">\n        9 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/11974/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm after a very simple example log file with corresponding code, that expresses exactly what would need to be recorded to enable deterministic replay - for the purpose of record/replay debugging.\n </p>\n <p>\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "97",
    "tags": [
        "debugging"
    ],
    "user": "user5821164",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not quite sure what you're after – the\n  <em>\n   minimum\n  </em>\n  you need to record for a given program to have a deterministic replay isn't well defined. In general, you choose some API boundary – for example, the system call interface, or some set of library calls, or even the interface between the OS and hardware – and then record there. Which API boundary you choose to record at will mean you have to record more or less information in order to guarantee deterministic replay; the question of how to find the API boundary that requires the least amount of storage has been explored in the paper\n  <a href=\"http://research.microsoft.com/pubs/138804/itarget_fse2010.pdf\" rel=\"nofollow\">\n   Language-Based Replay via Data Flow Cut\n  </a>\n  .\n </p>\n <p>\n  But perhaps you're after something more practical – an example of a simple program and its corresponding record/replay log. This is something you can get very easily with e.g.\n  <a href=\"https://github.com/mozilla/rr\" rel=\"nofollow\">\n   Mozilla's rr\n  </a>\n  . Suppose we have the following simple program:\n </p>\n <pre><code>#include <stdio.h>\n\nint main(int argc, char **argv) {\n    printf(\"Hello world: %s\n\", argv[1]);\n    return 0;\n}  \n</code></pre>\n <p>\n  We can then record it under\n  <code>\n   rr\n  </code>\n  :\n </p>\n <pre><code>$ git/rr/bin/rr record ./hello foo\nrr: Saving the execution of `./hello' to trace directory `/home/moyix/.rr/hello-1'.\nHello world: foo\n</code></pre>\n <p>\n  And then you can see the information that\n  <code>\n   rr\n  </code>\n  captured using\n  <code>\n   rr dump\n  </code>\n  ; a selection of that looks like:\n </p>\n <pre><code>{\n  global_time:177, event:`SYSCALL: rrcall_init_buffers' (state:EXITING_SYSCALL) tid:83791, ticks:42871\n rax:0x7fa27fd0b000 rbx:0xfffffffffffffff8 rcx:0xffffffffffffffff rdx:0x0 rsi:0x0 rdi:0x7ffd504447f0 rbp:0x64 rsp:0x7ffd504447a0 r8:0x0 r9:0x0 r10:0x0 r11:0x246 r12:0x7ffd50444800 r13:0x7ffd504447f0 r14:0x1474f r15:0x0 rip:0x70000038 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x1bb\n}\n{\n  global_time:178, event:`SYSCALL: rt_sigprocmask' (state:ENTERING_SYSCALL) tid:83791, ticks:42872\n rax:0xffffffffffffffda rbx:0xfffffffffffffff8 rcx:0xffffffffffffffff rdx:0x0 rsi:0x7ffd50444800 rdi:0x2 rbp:0x64 rsp:0x7ffd504447a0 r8:0x0 r9:0x0 r10:0x8 r11:0x246 r12:0x7ffd50444800 r13:0x7ffd504447f0 r14:0x1474f r15:0x0 rip:0x70000038 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0xe\n}\n{\n  global_time:179, event:`SYSCALL: rt_sigprocmask' (state:EXITING_SYSCALL) tid:83791, ticks:42872\n rax:0x0 rbx:0xfffffffffffffff8 rcx:0xffffffffffffffff rdx:0x0 rsi:0x7ffd50444800 rdi:0x2 rbp:0x64 rsp:0x7ffd504447a0 r8:0x0 r9:0x0 r10:0x8 r11:0x246 r12:0x7ffd50444800 r13:0x7ffd504447f0 r14:0x1474f r15:0x0 rip:0x70000038 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0xe\n}\n{\n  global_time:180, event:`PATCH_SYSCALL' tid:83791, ticks:43212\n  { map_file:\"\", addr:0x7fa27fc2c000, length:0x1000, prot_flags:\"r-xp\", file_offset:0x0 }\n  { addr:0x7fa27fc2c000, length:0xe }\n  { addr:0x7fa27f71ff82, length:0x5 }\n  { addr:0x7fa27f71ff87, length:0x3 }\n  { addr:0x7fa27f9f3349, length:0x3a }\n}\n</code></pre>\n <p>\n  You could also look at another recording interface, e.g. PANDA's. The\n  <code>\n   rr_print\n  </code>\n  utility in PANDA can print out the log of nondeterministic events, e.g.:\n </p>\n <pre><code>{guest_instr_count=4180 pc=0x8265a2c8, secondary=0x82743c28}\n        RR_INTERRUPT_REQUEST_2 from RR_CALLSITE_CPU_EXEC_1\n{guest_instr_count=4180 pc=0x8265a2c8, secondary=0x82743c28}\n        RR_INTERRUPT_REQUEST_2 from RR_CALLSITE_CPU_EXEC_4\n{guest_instr_count=4207 pc=0x8d0703f6, secondary=0x848f9818}\n        RR_INTERRUPT_REQUEST_2 from RR_CALLSITE_CPU_EXEC_1\n{guest_instr_count=4207 pc=0x8d0703f6, secondary=0x848f9818}\n        RR_INPUT_4 129 from RR_CALLSITE_CPU_EXEC_2\n{guest_instr_count=4234 pc=0x83e3c35e, secondary=0x82750380}\n        RR_INPUT_8 3094319282304 from RR_CALLSITE_RDTSC\n{guest_instr_count=4451 pc=0x82a4809a, secondary=0x844318d0}\n        RR_INPUT_4 61 from RR_CALLSITE_IOPORT_READ\n{guest_instr_count=4844 pc=0x82a4809a, secondary=0x00000000}\n        RR_INPUT_4 61 from RR_CALLSITE_IOPORT_READ\n{guest_instr_count=4859 pc=0x82a4809a, secondary=0x00002ee0}\n        RR_INPUT_4 129 from RR_CALLSITE_IOPORT_READ\n{guest_instr_count=5576 pc=0x82655e7e, secondary=0x82746c00}\n        RR_INPUT_8 3094319823647 from RR_CALLSITE_RDTSC\n{guest_instr_count=5630 pc=0x82a34c86, secondary=0x82746c00}\n        RR_INTERRUPT_REQUEST_2 from RR_CALLSITE_CPU_EXEC_1\n</code></pre>\n <p>\n  If you can clarify what you're looking I can likely give you a better answer here, though.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Brendan Dolan-Gavitt",
            "time": "Feb 10, 2016 at 14:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}