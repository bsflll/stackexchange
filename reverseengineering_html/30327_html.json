{
    "title": "IDA show xrefs in .pdata and nothing else",
    "link": "https://reverseengineering.stackexchange.com/questions/30327/ida-show-xrefs-in-pdata-and-nothing-else",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm debugging the Windows ARM64 version's EFI (\n  <code>\n   bootaa64.efi\n  </code>\n  ).\n </p>\n <p>\n  Using QEMU and GDB I was able to find that\n  <code>\n   bootaa64.efi\n  </code>\n  was stuck in one of the two functions\n  <code>\n   BlKernelSp0SystemErrorHandler\n  </code>\n  and\n  <code>\n   BlKernelExceptionHandler\n  </code>\n  . The image below is two functions when I load\n  <code>\n   bootaa64.efi\n  </code>\n  to IDA.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/QQNQO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"ida\" src=\"https://i.sstatic.net/QQNQO.png\"/>\n  </a>\n </p>\n <p>\n  I'm not really good at ARM64 assembly but I recognized these functions are just forever loops.\n </p>\n <p>\n  The code stuck in that loop means\n  <em>\n   somehow\n  </em>\n  the function is called. But IDA just show two xref, one is the function call itself (loop) and the other is\n  <code>\n   .pdata\n  </code>\n  xref:\n </p>\n <p>\n  I want to know what called these functions. Thanks!\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/HDwSB.png\" rel=\"nofollow noreferrer\">\n   <img alt=\".pdata\" src=\"https://i.sstatic.net/HDwSB.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "217",
    "tags": [
        "ida",
        "windows",
        "arm",
        "arm64",
        "uefi"
    ],
    "user": "raspiduino",
    "time": "Apr 26, 2022 at 6:02",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<html><body><span class=\"comment-copy\">\n Found\n <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#the-pdata-section\" rel=\"nofollow noreferrer\">\n  this\n </a>\n about\n <code>\n  .pdata\n </code>\n section. It is exception handling section\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These functions look like exception handlers and are probably “called” by the processor when an exception or a fault happens. You need to inspect system registers to determine the cause of the exception and where it happened. See the ARM manuals for more information.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 26, 2022 at 23:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "raspiduino",
                    "text": "<span class=\"comment-copy\">Can you provide me a link / hint for this? Thanks!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@raspiduino maybe check <a href=\"https://developer.arm.com/documentation/den0024\" rel=\"nofollow noreferrer\">ARM® Cortex™-A Series Programmer's Guide</a></span>",
                    "time": null
                },
                {
                    "user": "raspiduino",
                    "text": "<span class=\"comment-copy\">Found it: the register <a href=\"https://developer.arm.com/documentation/ddi0595/2021-06/AArch64-Registers/ELR-EL1--Exception-Link-Register--EL1-\" rel=\"nofollow noreferrer\"><code>ELR_EL1</code></a> hold the address to return from exception. It was true in this case, when I replace the forever loop with <code>ERET</code> (see my answer below) it return to the exact same address!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know if it's true or not, but I patched the\n  <code>\n   B BlKernelSp0SystemErrorHandler\n  </code>\n  and\n  <code>\n   B BlKernelExceptionHandler\n  </code>\n  with\n  <code>\n   ERET\n  </code>\n  (aka exception return), and the EFI file jumps back and stop at the place of a\n  <code>\n   BRK\n  </code>\n  instruction (as a result of branching because a compare went wrong), which seems true for me since my KVM module didn't correctly implement that stubs yet.\n </p>\n <p>\n  Hope this helps for somebody.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "raspiduino",
            "time": "Aug 4, 2022 at 6:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}