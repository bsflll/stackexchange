{
    "title": "Why shell code only with nop slide working for me?",
    "link": "https://reverseengineering.stackexchange.com/questions/15745/why-shell-code-only-with-nop-slide-working-for-me",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to understand the exploit for SLMail 5.5.\n </p>\n <p>\n  Here is the basic flow :\n </p>\n <ol>\n  <li>\n   I'm able to control EIP and point to an instruction \"JMP ESP\"\n  </li>\n  <li>\n   ESP is pointing to the exact start position of my shellcode.\n(Shell code is encoded with shikata_ga_nai encoder in msfvenom)\n  </li>\n  <li>\n   As ESP is pointing to the exact location which I want, I feel I don't think nop slide is required.But i'm seeing wired results when nop is not used.I hope some can shed some light on this.\n  </li>\n </ol>\n <p>\n  4) Below are the first few instructions that my shellcode has without NOP slide, as soon as the highlighted\n  <strong>\n   weird instruction\n  </strong>\n  is executed, the instructions in the memory are getting changed (So weird!!)\n </p>\n <pre><code>0159A128   BF A849F49D      MOV EDI,9DF449A8\n0159A12D   D9E5             FXAM\n0159A12F   D97424 F4        FSTENV (28-BYTE) PTR SS:[ESP-C] <-- Weird instruction\n0159A133   5B               POP EBX\n0159A134   33C9             XOR ECX,ECX\n0159A136   B1 52            MOV CL,52\n0159A138   317B 12          XOR DWORD PTR DS:[EBX+12],EDI\n0159A13B   83EB FC          SUB EBX,-4\n0159A13E   03D3             ADD EDX,EBX\n</code></pre>\n <p>\n  My memory looks this after the execution of the highlighted instruction:\n </p>\n <pre><code>0159A12F   0100             ADD DWORD PTR DS:[EAX],EAX\n0159A131   0000             ADD BYTE PTR DS:[EAX],AL\n0159A133   0000             ADD BYTE PTR DS:[EAX],AL <--Jumping here after the weird instruction\n0159A135   00FF             ADD BH,BH\n0159A137   FF31             PUSH DWORD PTR DS:[ECX]\n0159A139   7B 12            JPO SHORT 0159A14D\n0159A13B   83EB FC          SUB EBX,-4\n0159A13E   03D3             ADD EDX,EBX\n</code></pre>\n <p>\n  But with NOP slide appended to the shellcode, the below instruction which is actually in the line of execution gets excuted weithouit any hassle and making the exploit to work....\n </p>\n <pre><code>0159A133   5B               POP EBX\n</code></pre>\n <p>\n  Can anyone explain why I need NOP slide to stop this weird behavior.\nThank You.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "exploit",
        "metasploit"
    ],
    "user": "Vinod Pn",
    "time": "Jul 2, 2017 at 5:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n why did you put FSTENV  in your shellcode?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n oh, you used the encoder. I guess it screwed up somehow.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Let's look up what the\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_119.html\" rel=\"noreferrer\">\n   \"weird instruction\"\n  </a>\n  does:\n </p>\n <blockquote>\n  <p>\n   Saves the current FPU operating environment\n   <strong>\n    at the memory location\n  specified with the destination operand\n   </strong>\n   , and then masks all\n  floating-point exceptions. The FPU operating environment consists of\n  the FPU control word, status word, tag word, instruction pointer, data\n  pointer, and last opcode\n  </p>\n </blockquote>\n <p>\n  In our case, the destination is\n  <code>\n   ESP-C\n  </code>\n  , which is 12 bytes before the start of the code (if code starts at\n  <code>\n   ESP\n  </code>\n  ). Since the FPU state is 28 bytes, it goes further and\n  <em>\n   overwrites the beginning of shellcode\n  </em>\n  with the FPU values. If you add a NOP sled, the sled gets overwritten which has no effect because it won't be executed again. Without the sled, the\n  <em>\n   currently executing instructions\n  </em>\n  are overwritten which breaks the shellcode.\n </p>\n <p>\n  Apparently\n  <code>\n   FSTENV\n  </code>\n  is used as a part of the \"getpc\" primitive (one of the values stored is the current\n  <code>\n   EIP\n  </code>\n  ) and it requires some stack space for the environment. So you need to ensure that either you have free space around\n  <code>\n   ESP\n  </code>\n  or add a NOP sled for padding. Or you can try modifying the encoder to use a more common call $+5/pop ebx sequence which would overwrite only one dword at ESP.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Jul 2, 2017 at 9:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "shebaw",
                    "text": "<span class=\"comment-copy\">Had to log in to upvote this. Nice observation.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the technique is described in the \"Shellgames\" presentation on my site.  [esp-0c] allows a pop instruction to be used to return EIP in the popped register.  However, you need the stack pointer to be far enough from the code to avoid being overwritten.</span>",
                    "time": null
                }
            ]
        }
    ]
}