{
    "title": "What's the effect of adding a REP(N(E)) prefix to a JMP instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/21101/whats-the-effect-of-adding-a-repne-prefix-to-a-jmp-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm attempting to reverse engineer an executable packer, and I'm a little stumped on this x86 instruction:\n </p>\n <pre><code>F2 EB F5    repne jmp short near ptr unk_88801B\n</code></pre>\n <p>\n  According to the Intel manual a repeat prefix is not supported on a 'jmp' instruction. Yet IDA, Ollydbg and Capstone decode this instruction as the above.\n </p>\n <p>\n  This instruction appears in a section of code that is overlapped to obfuscate it, so I'm pretty certain the unsupported prefix is simply there to support the overlap.\n </p>\n <p>\n  My question is how does the processor handle this instruction? Does it just ignore the prefix, throw an illegal instruction, or ignore the instruction entirely?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "x86"
    ],
    "user": "PeterBelm",
    "time": "Apr 9, 2019 at 22:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a hard questions to answer since I have to explain how intel MTX works and I don't know how it works 100% but here I am going to try :)\n </p>\n <p>\n  At the beginning I though that IDA was giving you wrong disassemble code (that's not true I'll explain that later). \nSince you give me extra info (opcodes) I assemble it with\n  <a href=\"https://github.com/radare/radare2\" rel=\"nofollow noreferrer\">\n   rasm2\n  </a>\n  and I got this:\n </p>\n <p>\n  $ rasm2 -a x86 -d \"F2 EB F5\"\n  \n\n  bnd jmp 0xfffffff8\n </p>\n <p>\n  BND! that is not a illegal instruction, actually it is call an Intel MPX (Memory Protection Extensions) It was first announced in 2013 and introduced in 2015.\n </p>\n <blockquote>\n  <p>\n   <em>\n    From\n    <a href=\"https://en.wikipedia.org/wiki/Intel_MPX\" rel=\"nofollow noreferrer\">\n     Wikipedia\n    </a>\n   </em>\n   \n\n   Intel MPX is a set of extensions to the x86 instruction\n  set architecture. With compiler, runtime library and operating system\n  support, Intel MPX brings increased security to software by checking\n  pointer references whose normal compile-time intentions are\n  maliciously exploited at runtime due to buffer overflows.\n  </p>\n </blockquote>\n <p>\n  Intel MPX provides four new registers named bnd0-bnd3 that are use to set bounds to avoid memory attack. I recommend you to read\n  <a href=\"https://intel-mpx.github.io/\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  ,\n  <a href=\"https://arxiv.org/pdf/1702.00719.pdf\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  , and\n  <a href=\"https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol1/o_7281d5ea06a5b67a-398.html\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  .\n </p>\n <p>\n  Getting back to your question. I think is going to work as a normal jmp because the bound registers are not initialized. How I know that? Your opcode is EB and if you read the articles you will read this.\n </p>\n <blockquote>\n  <p>\n   An application compiled to use Intel MPX will use the REPNE (F2H)\n  prefix (denoted by BND) for all forms of near  CALL, near RET, near\n  JMP, short & near Jcc instructions (BND+CALL, BND+RET, BND+JMP,\n  BND+Jcc). See\n   <a href=\"https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol1/o_7281d5ea06a5b67a-399.html\" rel=\"nofollow noreferrer\">\n    Table  17-4\n   </a>\n   for specific opcodes.\n   <strong>\n    All far CALL, RET and\n  JMP instructions plus short JMP (JMP rel 8, opcode EB) instructions \n  will never cause bound registers to be initialized\n   </strong>\n  </p>\n </blockquote>\n <p>\n  Reading that I also understand why IDA was not giving you wrong code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ricardo",
            "time": "Apr 10, 2019 at 3:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PeterBelm",
                    "text": "<span class=\"comment-copy\">I did actually read a little about MPX but discounted it due to an apparent requirement on a kernel level call to initialize a register to enable it. I should have read that paragraph you quoted a little more closely!</span>",
                    "time": null
                }
            ]
        }
    ]
}