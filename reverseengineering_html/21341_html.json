{
    "title": "GetProcAddress with 0 as lpProcName",
    "link": "https://reverseengineering.stackexchange.com/questions/21341/getprocaddress-with-0-as-lpprocname",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing a 32bit binary for a challenge I got at a college lab and I'm having a hard time trying to understand the intent of the asm code.\n </p>\n <p>\n  The binary is a 10 level reversing game where you get no info at the start and have to figure out everything on your way on building a flag at the end.\n </p>\n <p>\n  Basically it uses a lot of encryption techniques to derive strings from integer values (as far as I got). I figured out some of the imports it uses like\n  <code>\n   LoadLibraryA\n  </code>\n  ,\n  <code>\n   GetProcAddress\n  </code>\n  (I guess it uses them later on somehow).\n </p>\n <p>\n  Where I'm currently stuck is the asm code calls\n  <code>\n   GetProcAddress\n  </code>\n  with\n  <code>\n   kernel32.dll\n  </code>\n  handle as the first argument and\n  <code>\n   0\n  </code>\n  ( or\n  <code>\n   NULL\n  </code>\n  I guess ) as the second argument. The return I get is then used to make some integer division. My problem is that I get\n  <code>\n   NULL\n  </code>\n  from the\n  <code>\n   GetProcAddress\n  </code>\n  call and then when hitting the\n  <code>\n   idiv\n  </code>\n  , I get a Division By 0 Exception thrown.\n </p>\n <p>\n  Here's a picture:\n  <a href=\"https://i.sstatic.net/99GSs.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/99GSs.png\"/>\n  </a>\n </p>\n <p>\n  On\n  <code>\n   0x00401A85\n  </code>\n  <code>\n   eax\n  </code>\n  is\n  <code>\n   0\n  </code>\n  (\n  <code>\n   NULL\n  </code>\n  ). Any ideas on how to solve this? What's the idea behind passing\n  <code>\n   0\n  </code>\n  (\n  <code>\n   NULL\n  </code>\n  ) as the second parameter?\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "912",
    "tags": [
        "ida",
        "binary-analysis",
        "pe32"
    ],
    "user": "Daniel Bejan",
    "time": "May 21, 2019 at 11:37",
    "comments": [
        {
            "user": "ismael_akez",
            "text": "<html><body><span class=\"comment-copy\">\n It might be an (0)ordinal number, but it might thrown exception by dividing to zero, in that case, check if there is an SEH.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to\n  <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getprocaddress\" rel=\"nofollow noreferrer\">\n   Microsoft Docs: GetProcAddress\n  </a>\n  :\n </p>\n <blockquote>\n  <pre><code>lpProcName\n</code></pre>\n  <p>\n   The function or variable name, or the function's ordinal value. If\n  this parameter is an\n   <strong>\n    ordinal value\n   </strong>\n   , it must be in the low-order\n  word; the high-order word must be zero.\n  </p>\n </blockquote>\n <p>\n  Here the second parameter is an\n  <em>\n   ordinal value\n  </em>\n  . This may be done intentionally to hide the function name that the program imports. According to\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic-link_library\" rel=\"nofollow noreferrer\">\n   Wikipedia: DLL\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   Each function exported by a DLL is identified by a numeric ordinal and\n  optionally a name. Likewise, functions can be imported from a DLL\n  either by ordinal or by name. The ordinal represents the position of\n  the function's address pointer in the DLL Export Address table. It is\n  common for\n   <strong>\n    internal functions\n   </strong>\n   to be exported by ordinal only. For\n  most Windows API functions only the names are preserved across\n  different Windows releases; the ordinals are\n   <strong>\n    subject to change\n   </strong>\n   .\n  </p>\n </blockquote>\n <p>\n  To get the function name first see the DLL file name in\n  <code>\n   LoadLibrary()\n  </code>\n  or\n  <code>\n   LoadLibraryEx()\n  </code>\n  . Open that DLL in IDA. Go to View Menu > Open subviews > Exports. Or use\n  <code>\n   dumpbin /exports mydll.dll\n  </code>\n  command to list all the exported functions and their corresponding ordinals. See\n  <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/dumpbin-reference\" rel=\"nofollow noreferrer\">\n   dumpbin reference\n  </a>\n  for further details.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Biswapriyo",
            "time": "May 21, 2019 at 13:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "josh poley",
                    "text": "<span class=\"comment-copy\">kernel32.dll typically has an <code>Ordinal Base</code> of 1, which means an ordinal of zero would be invalid.</span>",
                    "time": null
                },
                {
                    "user": "Daniel Bejan",
                    "text": "<span class=\"comment-copy\">Yes, @joshpoley, that's what I also found.. And then division crashes my program. I'm not sure yet if I'm on the right path. I asked my teacher for some guidance and he told me to look more into error handling and debugger evasion techniques which I found an example here: <a href=\"https://www.autosectools.com/Anti-Debugging-With-Exceptions.pdf\" rel=\"nofollow noreferrer\">autosectools.com/Anti-Debugging-With-Exceptions.pdf</a></span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Using exceptions may be a way to detect debuggers. However, you should have the possibility to pass the exception to the application when debugger receives it. I would give it a try, if such anti-debugging technique is present in code you are analysing. That way, the application will receive an exception as it expects and won't realise that it's being debugged.</span>",
                    "time": null
                },
                {
                    "user": "Daniel Bejan",
                    "text": "<span class=\"comment-copy\">Turned out it was just a dead end inserted in the code as a trick to \"eat\" out time out.. My teacher gave me a tip into trying not to get in that area of the code and I was able to solve it after that</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Turned out it was just a trick inserted in the code to distract us. What can I say, it was very successful haha. I ended up asking my teacher and he told me to try and avoid getting into that part of the code and after that I was able to see my mistake. Definitely learned something by falling into that trap\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Daniel Bejan",
            "time": "May 26, 2019 at 18:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rainb",
                    "text": "<span class=\"comment-copy\">well, but, what does it do, trick or not?</span>",
                    "time": null
                }
            ]
        }
    ]
}