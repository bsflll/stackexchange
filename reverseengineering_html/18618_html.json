{
    "title": "How do you print fixed width strings with radare's print format `pf`?",
    "link": "https://reverseengineering.stackexchange.com/questions/18618/how-do-you-print-fixed-width-strings-with-radares-print-format-pf",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Let's say I have a byte sequence where\n  <code>\n   U\n  </code>\n  is an unsigned int (4 bytes), and\n  <code>\n   ccccccccccccccc\n  </code>\n  is a 15 byte character array\n </p>\n <pre><code>UcccccccccccccccU\n</code></pre>\n <p>\n  Is it possible to print this structure using\n  <code>\n   pf\n  </code>\n  ? I can print this with\n </p>\n <pre><code>pf i;\nps 15 @ 4;\npf i @ 19;\n</code></pre>\n <p>\n  If both of those integers were next to each other, I could do\n  <code>\n   pf ii\n  </code>\n  , and what I would like to do is something like\n  <code>\n   pf is15i\n  </code>\n  -- which doesn't work because\n  <code>\n   s\n  </code>\n  is for\n  <code>\n   * char[]\n  </code>\n  to a string, and not a char array.\n </p>\n <p>\n  If I do something like\n  <code>\n   pf 5c\n  </code>\n  , I get them outputted as single characters (ex.,)\n </p>\n <pre><code>0x00000008 [0] {\n  0x00000008 = '6'\n}\n0x00000009 [1] {\n  0x00000009 = '0'\n}\n0x0000000a [2] {\n  0x0000000a = '0'\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "749",
    "tags": [
        "radare2",
        "strings"
    ],
    "user": "Evan Carroll",
    "time": "Jun 27, 2018 at 19:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To understand how to use\n  <code>\n   pf\n  </code>\n  the way you want, we should go over it step-by-step.\n </p>\n <p>\n  I opened an empty memory for a radare2 playground:\n </p>\n <pre><code>$ r2 malloc://200\n[0x00000000]>\n</code></pre>\n <p>\n  Next, I wrote date to this playground, inspired by your example:\n </p>\n <pre><code>[0x00000000]> wx AABBCCDD @ 0\n[0x00000000]> w ccccccccccccccc @ 4\n[0x00000000]> wx 11223344 @ 19\n</code></pre>\n <p>\n  Basically, I wrote 4 bytes, followed by 15 characters and then other 4 bytes. This is how it looks in the memory:\n </p>\n <pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  aabb ccdd 6363 6363 6363 6363 6363 6363  ....cccccccccccc\n0x00000010  6363 6311 2233 4400 0000 0000 0000 0000  ccc.\"3D.........\n</code></pre>\n <p>\n  To print this structure I did something like this:\n </p>\n <pre><code>[0x00000000]> pf x[15]zx\n0x00000000 = 0xddccbbaa\n0x00000004 = ccccccccccccccc\n0x00000013 = 0x44332211\n</code></pre>\n <p>\n  As you already know,\n  <code>\n   pf\n  </code>\n  is used to print formatted data. By using\n  <code>\n   pf??\n  </code>\n  and\n  <code>\n   pf???\n  </code>\n  you can see examples and understand each part of my command.\n </p>\n <p>\n  You can use\n  <code>\n   i\n  </code>\n  instead of\n  <code>\n   x\n  </code>\n  if you want to print integers.\n </p>\n <pre><code>[0x00000000]> pf i[15]zi 1st 2nd third\n   1st : 0x00000000 = -573785174\n   2nd : 0x00000004 = ccccccccccccccc\n third : 0x00000013 = 1144201745\n</code></pre>\n <p>\n  My structure consists of 4 parts:\n </p>\n <ul>\n  <li>\n   <code>\n    pf\n   </code>\n   command\n  </li>\n  <li>\n   <code>\n    x\n   </code>\n   where\n   <code>\n    x\n   </code>\n   is being used to print hex value (of 4 bytes)\n  </li>\n  <li>\n   <code>\n    [15]z\n   </code>\n   to print 15 characters of a string\n  </li>\n  <li>\n   <code>\n    x\n   </code>\n   to print another hex value\n  </li>\n </ul>\n <p>\n  You can also name the fields:\n </p>\n <pre><code>[0x00000000]> pf x[15]zx 1st 2nd third\n   1st : 0x00000000 = 0xddccbbaa\n   2nd : 0x00000004 = ccccccccccccccc\n third : 0x00000013 = 0x44332211\n</code></pre>\n <p>\n  You can use other format characters such as\n  <code>\n   e\n  </code>\n  to swap endians, etc\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Jun 28, 2018 at 4:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">I understand most of that, but where did you <code>[15]z</code> from the syntax? I tried <code>c15</code> as a syntax which seemed more intuitive. Also what will yours do if the 15-characters is <code>\\0\\0foo\\0\\bar</code>, ie not a c-string?</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">Lol it's documented like this <code>pf: pf[.k[.f[=v]]|[v]]|[n]|[0|cnt][fmt] [a0 a1 ...]</code> That's the <code>[0|cnt]</code> with the mandatory <code>[]</code> ....well that's totally user-friendly.</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">It is documented at <code>pf???</code>. And for your foo-bar example -- assume we have the following bytes in memory: <code>aabbccdd0000666f6f0062617200eeff1122</code>, You can print it with: <code>pf x..zzx</code> and you'll get 4 fields: 4 bytes hex, \"foo\", \"bar\" and another 4 bytes hex.</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">Yep, all this checks out and works -- though I have to wonder why for <code>z</code> the length <code>[15]z</code> and for <code>N</code>, it's <code>N1</code></span>",
                    "time": null
                }
            ]
        }
    ]
}