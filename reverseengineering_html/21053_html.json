{
    "title": "IDA pro - strange switch statement",
    "link": "https://reverseengineering.stackexchange.com/questions/21053/ida-pro-strange-switch-statement",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use IDA pro and along the analysis I try to understand the following function.\nThere is a simple switch case but it appears that all the 13 switch branches do the EXACT same thing.\nAm I missing something here???\nIn case it does branch to the same 13 identical branches than why is IDA analyzing it like this or, if this is a compiler issue that what the reason behind this?\n </p>\n <p>\n  The code:\n </p>\n <pre><code>        myFunc         proc near               ; CODE XREF: call_BH32_and_BH32func+46↑p\n.text:010CA990                                         ; BH32+12↑p\n.text:010CA990                                         ; DATA XREF: ...\n.text:010CA990\n.text:010CA990 arg_0           = dword ptr  8\n.text:010CA990 arg_4           = dword ptr  0Ch\n.text:010CA990 arg_8           = dword ptr  10h\n.text:010CA990 arg_C           = dword ptr  14h\n.text:010CA990 arg_10          = dword ptr  18h\n.text:010CA990\n.text:010CA990                 push    ebp\n.text:010CA991                 mov     ebp, esp\n.text:010CA993                 mov     ecx, [ebp+arg_0]\n.text:010CA996                 xor     edx, edx\n.text:010CA998                 push    esi\n.text:010CA999                 mov     esi, [ebp+arg_4]\n.text:010CA99C                 push    edi\n.text:010CA99D                 mov     edi, 0Dh\n.text:010CA9A2                 lea     eax, [ecx+esi]\n.text:010CA9A5                 div     edi\n.text:010CA9A7                 cmp     edx, 0Ch        ; switch 13 cases\n.text:010CA9AA                 ja      loc_10CAAE2     ; jumptable 1017A9B0 default case\n.text:010CA9B0                 jmp     ds:off_10CAAE8[edx*4] ; switch jump\n.text:010CA9B7 ; ---------------------------------------------------------------------------\n.text:010CA9B7\n.text:010CA9B7 loc_10CA9B7:                            ; CODE XREF: myFunc+20↑j\n.text:010CA9B7                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CA9B7                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 0\n.text:010CA9BA                 push    [ebp+arg_C]\n.text:010CA9BD                 push    [ebp+arg_8]\n.text:010CA9C0                 push    esi\n.text:010CA9C1                 push    ecx\n.text:010CA9C2                 call    nextFunc\n.text:010CA9C7                 add     esp, 14h\n.text:010CA9CA                 pop     edi\n.text:010CA9CB                 pop     esi\n.text:010CA9CC                 pop     ebp\n.text:010CA9CD                 retn\n.text:010CA9CE ; ---------------------------------------------------------------------------\n.text:010CA9CE\n.text:010CA9CE loc_10CA9CE:                            ; CODE XREF: myFunc+20↑j\n.text:010CA9CE                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CA9CE                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 1\n.text:010CA9D1                 push    [ebp+arg_C]\n.text:010CA9D4                 push    [ebp+arg_8]\n.text:010CA9D7                 push    esi\n.text:010CA9D8                 push    ecx\n.text:010CA9D9                 call    nextFunc\n.text:010CA9DE                 add     esp, 14h\n.text:010CA9E1                 pop     edi\n.text:010CA9E2                 pop     esi\n.text:010CA9E3                 pop     ebp\n.text:010CA9E4                 retn\n.text:010CA9E5 ; ---------------------------------------------------------------------------\n.text:010CA9E5\n.text:010CA9E5 loc_10CA9E5:                            ; CODE XREF: myFunc+20↑j\n.text:010CA9E5                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CA9E5                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 2\n.text:010CA9E8                 push    [ebp+arg_C]\n.text:010CA9EB                 push    [ebp+arg_8]\n.text:010CA9EE                 push    esi\n.text:010CA9EF                 push    ecx\n.text:010CA9F0                 call    nextFunc\n.text:010CA9F5                 add     esp, 14h\n.text:010CA9F8                 pop     edi\n.text:010CA9F9                 pop     esi\n.text:010CA9FA                 pop     ebp\n.text:010CA9FB                 retn\n.text:010CA9FC ; ---------------------------------------------------------------------------\n.text:010CA9FC\n.text:010CA9FC loc_10CA9FC:                            ; CODE XREF: myFunc+20↑j\n.text:010CA9FC                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CA9FC                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 3\n.text:010CA9FF                 push    [ebp+arg_C]\n.text:010CAA02                 push    [ebp+arg_8]\n.text:010CAA05                 push    esi\n.text:010CAA06                 push    ecx\n.text:010CAA07                 call    nextFunc\n.text:010CAA0C                 add     esp, 14h\n.text:010CAA0F                 pop     edi\n.text:010CAA10                 pop     esi\n.text:010CAA11                 pop     ebp\n.text:010CAA12                 retn\n.text:010CAA13 ; ---------------------------------------------------------------------------\n.text:010CAA13\n.text:010CAA13 loc_10CAA13:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA13                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA13                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 4\n.text:010CAA16                 push    [ebp+arg_C]\n.text:010CAA19                 push    [ebp+arg_8]\n.text:010CAA1C                 push    esi\n.text:010CAA1D                 push    ecx\n.text:010CAA1E                 call    nextFunc\n.text:010CAA23                 add     esp, 14h\n.text:010CAA26                 pop     edi\n.text:010CAA27                 pop     esi\n.text:010CAA28                 pop     ebp\n.text:010CAA29                 retn\n.text:010CAA2A ; ---------------------------------------------------------------------------\n.text:010CAA2A\n.text:010CAA2A loc_10CAA2A:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA2A                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA2A                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 5\n.text:010CAA2D                 push    [ebp+arg_C]\n.text:010CAA30                 push    [ebp+arg_8]\n.text:010CAA33                 push    esi\n.text:010CAA34                 push    ecx\n.text:010CAA35                 call    nextFunc\n.text:010CAA3A                 add     esp, 14h\n.text:010CAA3D                 pop     edi\n.text:010CAA3E                 pop     esi\n.text:010CAA3F                 pop     ebp\n.text:010CAA40                 retn\n.text:010CAA41 ; ---------------------------------------------------------------------------\n.text:010CAA41\n.text:010CAA41 loc_10CAA41:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA41                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA41                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 6\n.text:010CAA44                 push    [ebp+arg_C]\n.text:010CAA47                 push    [ebp+arg_8]\n.text:010CAA4A                 push    esi\n.text:010CAA4B                 push    ecx\n.text:010CAA4C                 call    nextFunc\n.text:010CAA51                 add     esp, 14h\n.text:010CAA54                 pop     edi\n.text:010CAA55                 pop     esi\n.text:010CAA56                 pop     ebp\n.text:010CAA57                 retn\n.text:010CAA58 ; ---------------------------------------------------------------------------\n.text:010CAA58\n.text:010CAA58 loc_10CAA58:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA58                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA58                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 7\n.text:010CAA5B                 push    [ebp+arg_C]\n.text:010CAA5E                 push    [ebp+arg_8]\n.text:010CAA61                 push    esi\n.text:010CAA62                 push    ecx\n.text:010CAA63                 call    nextFunc\n.text:010CAA68                 add     esp, 14h\n.text:010CAA6B                 pop     edi\n.text:010CAA6C                 pop     esi\n.text:010CAA6D                 pop     ebp\n.text:010CAA6E                 retn\n.text:010CAA6F ; ---------------------------------------------------------------------------\n.text:010CAA6F\n.text:010CAA6F loc_10CAA6F:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA6F                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA6F                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 8\n.text:010CAA72                 push    [ebp+arg_C]\n.text:010CAA75                 push    [ebp+arg_8]\n.text:010CAA78                 push    esi\n.text:010CAA79                 push    ecx\n.text:010CAA7A                 call    nextFunc\n.text:010CAA7F                 add     esp, 14h\n.text:010CAA82                 pop     edi\n.text:010CAA83                 pop     esi\n.text:010CAA84                 pop     ebp\n.text:010CAA85                 retn\n.text:010CAA86 ; ---------------------------------------------------------------------------\n.text:010CAA86\n.text:010CAA86 loc_10CAA86:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA86                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA86                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 9\n.text:010CAA89                 push    [ebp+arg_C]\n.text:010CAA8C                 push    [ebp+arg_8]\n.text:010CAA8F                 push    esi\n.text:010CAA90                 push    ecx\n.text:010CAA91                 call    nextFunc\n.text:010CAA96                 add     esp, 14h\n.text:010CAA99                 pop     edi\n.text:010CAA9A                 pop     esi\n.text:010CAA9B                 pop     ebp\n.text:010CAA9C                 retn\n.text:010CAA9D ; ---------------------------------------------------------------------------\n.text:010CAA9D\n.text:010CAA9D loc_10CAA9D:                            ; CODE XREF: myFunc+20↑j\n.text:010CAA9D                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAA9D                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 10\n.text:010CAAA0                 push    [ebp+arg_C]\n.text:010CAAA3                 push    [ebp+arg_8]\n.text:010CAAA6                 push    esi\n.text:010CAAA7                 push    ecx\n.text:010CAAA8                 call    nextFunc\n.text:010CAAAD                 add     esp, 14h\n.text:010CAAB0                 pop     edi\n.text:010CAAB1                 pop     esi\n.text:010CAAB2                 pop     ebp\n.text:010CAAB3                 retn\n.text:010CAAB4 ; ---------------------------------------------------------------------------\n.text:010CAAB4\n.text:010CAAB4 loc_10CAAB4:                            ; CODE XREF: myFunc+20↑j\n.text:010CAAB4                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAAB4                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 11\n.text:010CAAB7                 push    [ebp+arg_C]\n.text:010CAABA                 push    [ebp+arg_8]\n.text:010CAABD                 push    esi\n.text:010CAABE                 push    ecx\n.text:010CAABF                 call    nextFunc\n.text:010CAAC4                 add     esp, 14h\n.text:010CAAC7                 pop     edi\n.text:010CAAC8                 pop     esi\n.text:010CAAC9                 pop     ebp\n.text:010CAACA                 retn\n.text:010CAACB ; ---------------------------------------------------------------------------\n.text:010CAACB\n.text:010CAACB loc_10CAACB:                            ; CODE XREF: myFunc+20↑j\n.text:010CAACB                                         ; DATA XREF: .text:off_10CAAE8↓o\n.text:010CAACB                 push    [ebp+arg_10]    ; jumptable 1017A9B0 case 12\n.text:010CAACE                 push    [ebp+arg_C]\n.text:010CAAD1                 push    [ebp+arg_8]\n.text:010CAAD4                 push    esi\n.text:010CAAD5                 push    ecx\n.text:010CAAD6                 call    nextFunc\n.text:010CAADB                 add     esp, 14h\n.text:010CAADE                 pop     edi\n.text:010CAADF                 pop     esi\n.text:010CAAE0                 pop     ebp\n.text:010CAAE1                 retn\n.text:010CAAE2 ; ---------------------------------------------------------------------------\n.text:010CAAE2\n.text:010CAAE2 loc_10CAAE2:                            ; CODE XREF: myFunc+1A↑j\n.text:010CAAE2                 pop     edi             ; jumptable 1017A9B0 default case\n.text:010CAAE3                 xor     eax, eax\n.text:010CAAE5                 pop     esi\n.text:010CAAE6                 pop     ebp\n.text:010CAAE7                 retn\n.text:010CAAE7 myFunc       endp\n.text:010CAAE7\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "598",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "dandan",
    "time": "Apr 5, 2019 at 17:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Am I missing something here???\n  </p>\n </blockquote>\n <p>\n  No, you aren't. It's just a switch statement with identical branches.\n </p>\n <blockquote>\n  <p>\n   why is IDA analyzing it like this or, if this is a compiler issue that what the reason behind this?\n  </p>\n </blockquote>\n <p>\n  IDA is analysing it this way, because it just shows the disassembly of the machine code produced. The compiler could have produced a code more efficient both with respect to size and speed, but probably just optimization wasn't turned on while compiling.\n </p>\n <p>\n  Consider the following code:\n </p>\n <pre><code>#include <iostream>\n\nvoid nextFun()\n{\n\n}\n\nint main()\n{\n    int a;\n    std::cin >> a;\n    switch (a % 6)\n    {\n    case 0:\n        nextFun();\n        break;\n    case 1:\n        nextFun();\n        break;\n    case 2:\n        nextFun();\n        break;\n    case 3:\n        nextFun();\n        break;\n    case 4:\n        nextFun();\n        break;\n    case 5:\n        nextFun();\n        break;\n    }\n}\n</code></pre>\n <p>\n  It contains just six cases, but after compilation illustrates the way how resulting machine code will look like. After compiling it with GCC with optimizations turned off and opening with IDA:\n  <a href=\"https://i.sstatic.net/eMS3z.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA-switch-statement\" src=\"https://i.sstatic.net/eMS3z.png\"/>\n  </a>\n </p>\n <p>\n  So, it is possible that such a machine code was indeed produced by compiler, especially when it didn't optimize it.\n </p>\n <p>\n  <strong>\n   What is the reason for writing such a code?\n  </strong>\n </p>\n <p>\n  I suspect that it's either done purposely to have the possibility to patch the binary later on and change program behaviour for some remainders, or just the program author originally wanted the program behaving differently for different remainders, but then changed his mind and just left the switch statement in such a form.\n </p>\n <p>\n  The other possible, though not likely scenario is that the\n  <code>\n   nextFun\n  </code>\n  checks for the place where it was called and depending on that chooses relevant code path - it would be just an obfuscated switch statement.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "May 31, 2019 at 12:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}