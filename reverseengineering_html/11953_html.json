{
    "title": "Why is this _DllMainCRTStartup calling convention not as expected?",
    "link": "https://reverseengineering.stackexchange.com/questions/11953/why-is-this-dllmaincrtstartup-calling-convention-not-as-expected",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been looking around at various DLLs on my computer lately and I thought a decent place to start was the image entry point (typically _DllMainCRTStartup).\n </p>\n <p>\n  From what I can see of the CRT source code (MSVC) this calls another function (__DllMainCRTStartup) with the same arguments (HMODULE, DWORD, LPVOID). However many of the binaries I've looked at seem to deviate from this:\n </p>\n <pre><code>  push        dword ptr [ebp+8]\n  mov         ecx,dword ptr [ebp+10h]\n  mov         edx,dword ptr [ebp+0Ch]\n  call        10024E5B // __DllMainCRTStartup\n</code></pre>\n <p>\n  This looks to be pushing on the first parameter (HMODULE) and then passing the other two via registers ecx/edx. The function being called expects them to be there as well. What I expected to see was all three being pushed on the stack which I believe is how the _cdecl convention works. This is an example:\n </p>\n <pre><code>  push        dword ptr [ebp+10h]\n  push        dword ptr [ebp+0Ch]\n  push        dword ptr [ebp+8]\n  call        3DC40E2E // __DllMainCRTStartup\n</code></pre>\n <p>\n  Does anyone know where the first variant is coming from? Is it an older version of the CRT? Or maybe a different compiler entirely? Bonus if you know what kind of calling convention it is as well, looks like a strange cousin of __fastcall to me!\n </p>\n <p>\n  Thanks very much!\n </p>\n <p>\n  Edit:\n </p>\n <p>\n  Thought I'd add the function prototype from the CRT source code (the version that comes with VS 2012 at least)\n </p>\n <pre><code>__declspec(noinline)\nBOOL __cdecl\n__DllMainCRTStartup(\n    HANDLE  hDllHandle,\n    DWORD   dwReason,\n    LPVOID  lpreserved\n    )\n</code></pre>\n <p>\n  Editx2:\n </p>\n <p>\n  I've just seen the 'Related' link:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2673/what-x86-calling-convention-passes-first-parameter-via-esi\">\n   What x86 calling convention passes first parameter via ESI?\n  </a>\n </p>\n <p>\n  It seems this might be a result of LTCG and the linker basically just deciding to do whatever it likes because it knows about all the components!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "dll",
        "calling-conventions",
        "entry-point"
    ],
    "user": "B A",
    "time": "Feb 5, 2016 at 18:47",
    "comments": [
        {
            "user": "newgre",
            "text": "<html><body><span class=\"comment-copy\">\n Why should __DllMainCRTStartup adhere to any calling convention? noone is forcing the compiler to do so - it's not a public symbol that can be called from external modules anyways.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "B A",
            "text": "<html><body><span class=\"comment-copy\">\n Well it doesn't have to obviously, I was just wondering why it wasn't a __cdecl when it's marked as such in the source\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  With global optimisation (link-time code generation) the compiler is free to ignore the declared calling convention for all functions that aren't externally visible - that is, neither exported nor otherwise pinned by having their addresses taken and passed to external code.\n </p>\n <p>\n  This can make the resulting binaries difficult to analyse since even the well-known parts of the startup code can morph and fuse under global optimisation. It is still recognisable by its behaviour and embedded magic constants (like those for initialising the stack guard cookie and its complement) but the success rate of library object code recognition by simple mechanisms like IDA's\n  <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/index.shtml\">\n   FLIRT\n  </a>\n  takes a nose dive.\n </p>\n <p>\n  Also, in this situation the function prototypes pulled from headers or from IDA's signature files may be wrong as likely as not. This can lead IDA's analysis engine (and the reader) astray and thus cause problems even several call levels away from the problematic functions.\n </p>\n <p>\n  In short: with LTCG all bets are off and simple analysis code can become unreliable.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "DarthGizka",
            "time": "Feb 6, 2016 at 15:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}