{
    "title": "Reverse engineering a Bluetooth smart lock (Aqara N200)",
    "link": "https://reverseengineering.stackexchange.com/questions/33216/reverse-engineering-a-bluetooth-smart-lock-aqara-n200",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been working reverse engineering a Aqara N200 as I'd like to now control it in Home Assistant rather than just near the lock with the Mi Home app, my plan is to use a ESP32 running ESPHome to communicate with it.\n </p>\n <p>\n  I've successfully captured the Bluetooth packets using a Google Pixel 6 with Bluetooth HCI Snoop feature in Developer options. I managed to find what I think is the correct packet by doing multiple captures and unlocking the door 3 and 5 times and filtering for the packet using\n  <code>\n   btatt.opcode == 0x12\n  </code>\n  I am now at loss since the value for all 8 packets are different and I'm not sure how they are generated.\n </p>\n <p>\n  These are the Values of the 8 packets\n </p>\n <pre><code>0700cdec690302\n\n0d00866d396b9b\n\n11005b56ae6119\n\n16001b9e831efd\n\n1b00c3e9628037\n\n0600e0c02ef088\n\n0d00399b1eab25\n</code></pre>\n <p>\n  I'm pretty new to reverse engineering and have learnt a lot at a loss at this bit but I'm trying my best.\n </p>\n <p>\n  Update:\n </p>\n <p>\n  I was able to use frida.re to see values of the packets being sent using this script.\n </p>\n <pre><code>Java.perform(function() {\n    // Define the UUIDs you're interested in\n    var targetUUIDs = [\n        '00001001-0065-6c62-2e74-6f696d2e696d'\n    ];\n\n    // Function to convert byte array to hex string\n    function bytesToHex(bytes) {\n        var hex = [];\n        for (var i = 0; i < bytes.length; i++) {\n            hex.push(('0' + (bytes[i] & 0xFF).toString(16)).slice(-2));\n        }\n        return hex.join('');\n    }\n\n    // Hook the writeCharacteristic method of BluetoothGatt\n    var BluetoothGatt = Java.use('android.bluetooth.BluetoothGatt');\n    BluetoothGatt.writeCharacteristic.overload('android.bluetooth.BluetoothGattCharacteristic').implementation = function(characteristic) {\n        // Extract UUID and value\n        var uuid = characteristic.getUuid().toString();\n        var value = characteristic.getValue();\n\n        // Check if UUID is in the list of target UUIDs\n        if (targetUUIDs.includes(uuid)) {\n            var hexValue = bytesToHex(value);\n\n            console.log('writeCharacteristic called');\n            console.log('Characteristic UUID: ' + uuid);\n            console.log('Characteristic Value (hex): ' + hexValue);\n            \n            // Print stack trace\n            var stackTrace = Java.use('java.lang.Thread').currentThread().getStackTrace();\n            stackTrace.forEach(function(element) {\n                console.log(element.toString());\n            });\n        }\n        \n        return this.writeCharacteristic(characteristic);\n    };\n});\n</code></pre>\n <p>\n  Which outputs this when I unlock the lock using the app.\n </p>\n <pre><code>writeCharacteristic called\nCharacteristic UUID: 00001001-0065-6c62-2e74-6f696d2e696d\nCharacteristic Value (hex): 1a00b793f92f48\ndalvik.system.VMStack.getThreadStackTrace(Native Method)\njava.lang.Thread.getStackTrace(Thread.java:1841)\nandroid.bluetooth.BluetoothGatt.writeCharacteristic(Native Method)\n_m_j.r00.writeCharacteristic(SourceFile:98)\n_m_j.p50.writeCharacteristic(Unknown Source:2)\n_m_j.k90.OooO0Oo(SourceFile:25)\n_m_j.p50.process(SourceFile:69)\n_m_j.c00.handleMessage(SourceFile:34)\nandroid.os.Handler.dispatchMessage(Handler.java:103)\nandroid.os.Looper.loopOnce(Looper.java:232)\nandroid.os.Looper.loop(Looper.java:317)\nandroid.os.HandlerThread.run(HandlerThread.java:85)\n_m_j.vr6.run(SourceFile:16)\n</code></pre>\n <p>\n  I pulled the APK from my Pixel using ADB and decompiled it using JADX. I'm currently having trouble finding where the packet is created\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "75",
    "tags": [
        "wireshark",
        "bluetooth",
        "smart-devices"
    ],
    "user": "tobyg",
    "time": "Sep 13, 2024 at 5:01",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n If you have an Android HCI Snoop protocol you have an app that creates those packets. Decompile the app and you may be able to get the algorithm how the packets are generated (or at least get an idea what is involved).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tobyg",
            "text": "<html><body><span class=\"comment-copy\">\n I’m not sure how well that would work since the Mi Home app supports a lot more than just this lock so I’d imagine that it would be hard to find.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n If you have a rooted device and the app is a Java/Kotlin app finding the method can be done using\n <a href=\"https://frida.re\" rel=\"nofollow noreferrer\">\n  frida.re\n </a>\n . Hook\n <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothGatt#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)\" rel=\"nofollow noreferrer\">\n  BluetoothGatt.writeCharacteristic\n </a>\n and print the current stack trace in the hook. Then you will see where the write request is coming from and hopefully this is also the lace where the packet data is built.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tobyg",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for pointing me towards thoses.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}