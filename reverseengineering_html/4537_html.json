{
    "title": "native function naming convention in Qt for Android",
    "link": "https://reverseengineering.stackexchange.com/questions/4537/native-function-naming-convention-in-qt-for-android",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In a project, I cannot find the names of native functions in the .so libraries.\nThat is, a native function must be called something like\n  <code>\n   Java_com_package_ClassName_functionName()\n  </code>\n  . I do find\n  <em>\n   functionName\n  </em>\n  in the .so libraries, but either without the\n  <code>\n   Java_com_package_ClassName_\n  </code>\n  prefix, or wrapped into a mangled C++ name.\n </p>\n <p>\n  So:\n </p>\n <ol>\n  <li>\n   <p>\n    Does Qt (Necessitas) use a special naming convention?\n   </p>\n  </li>\n  <li>\n   <p>\n    If yes, how it is done?\n   </p>\n  </li>\n  <li>\n   <p>\n    If no, what is going on?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "414",
    "tags": [
        "android",
        "qt",
        "dalvik"
    ],
    "user": "18446744073709551615",
    "time": "Jun 5, 2014 at 9:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The naming conventions for JNI functions are given by the Dalvik VM, a library couldn't change them and expect them to work, i.e. be callable from the Java part of the application. But, the Java_package_function convention is only needed for functions that Java wants to call, it it not neccesary for a\n  <code>\n   C/C++\n  </code>\n  function calling another one.\n </p>\n <p>\n  If you compile\n </p>\n <pre><code>jint Java_com_example_foo(JNIEnv*  env, jobject  this) { return bar(); }\nint bar() { return 3; }\n</code></pre>\n <p>\n  into a library, you can call\n  <code>\n   Java_com_example_foo\n  </code>\n  from java, and you won't be able to call\n  <code>\n   bar\n  </code>\n  from java, but nothing prevents\n  <code>\n   Java_com_example_foo\n  </code>\n  from calling\n  <code>\n   bar\n  </code>\n  .\n </p>\n <p>\n  So, there are 2 possibilities that come to mind:\n </p>\n <ol>\n  <li>\n   the Java part is nothing but a stub that calls a\n   <code>\n    main\n   </code>\n   function in one library, and all the rest is done in\n   <code>\n    C\n   </code>\n   or\n   <code>\n    C++\n   </code>\n   . This\n   <code>\n    main\n   </code>\n   function probably will be called\n   <code>\n    Java_package_function\n   </code>\n   , not\n   <code>\n    main\n   </code>\n   , but it's the only function that uses this naming convention.\n  </li>\n  <li>\n   There's another wrapper library which provides the\n   <code>\n    Java_package_function\n   </code>\n   JNI API calls to the Java part, and calls the C/C++ functions which it imports from a different library. This library would probably be very small, so you might not have considered it interesting, and missed it in your previous analysis.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jun 5, 2014 at 11:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}