{
    "title": "How to export disassembly using angr",
    "link": "https://reverseengineering.stackexchange.com/questions/24664/how-to-export-disassembly-using-angr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to know how to export angr's disassembly in say txt file.\n </p>\n <p>\n  I looked at the angr documentation -\n  <a href=\"https://angr.io/api-doc/angr.html#module-angr.analyses\" rel=\"nofollow noreferrer\">\n   https://angr.io/api-doc/angr.html#module-angr.analyses\n  </a>\n </p>\n <p>\n  I found that there are some endpoints like - Disassembly, cfgfast under proj.analyses. I want to get objdump like disassembled input.\n  <a href=\"https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_andriesse.pdf\" rel=\"nofollow noreferrer\">\n   This\n  </a>\n  paper says that they used cfgfast for their analysis. So, I checked that class, but couldn't find particular methods to print the assembly. For e.g. in radare2, I can do -\n </p>\n <pre><code>r2.cmd('aaa')\nr2.cmd(f'pd $s > {filename+\"_radare.txt\"}')\n</code></pre>\n <p>\n  to get the disassembly after analysis.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "angr"
    ],
    "user": "R4444",
    "time": "Apr 9, 2020 at 17:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In angr, there are multiple ways to print out what you want. You can reference functions or basic blocks. All you need to print out disassembly is an address:\n </p>\n <pre><code>import angr\np = angr.Project(\"/bin/true\",auto_load_libs=False)\nblock = p.factory.block(p.entry)\nblock.pp()\n</code></pre>\n <p>\n  In this case, I load the\n  <code>\n   true\n  </code>\n  binary, excluding its dynamic libraries, and I ask it for the disassembly at the entry address of the binary. The\n  <code>\n   pp\n  </code>\n  function stands for pretty print, and it will allow you to print assembly in a pretty format.\n </p>\n <p>\n  Now getting every disassembled address in a linear format, like objdump, is much more hacky in angr. It would be much more advisable to use\n  <a href=\"https://github.com/angr/angr-management\" rel=\"nofollow noreferrer\">\n   angr-management\n  </a>\n  and copy the linear disassembly from the GUI, but for the sake of this question, here is a hacky script to get every basic blocks disassembly:\n </p>\n <pre><code>import angr\np = angr.Project(\"/bin/true\",auto_load_libs=False)\ncfg = p.analyses.CFGFast()\ncfg.normalize()\nfor func_node in cfg.functions.values():\n    if func_node.name.startswith(\"__\"):\n        continue\n    else:\n        for block in func_node.blocks:             \n            block.pp() \n</code></pre>\n <p>\n  It is important to note that the disassembly may not be in order, though it will specify it's address -- this is because we disassemble in the order angr discovers functions.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "mahaloz",
            "time": "Apr 10, 2020 at 5:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">thanks,  but I tried that. In that case it doesn't give me disassembly of the whole binary. I think it just prints a block</span>",
                    "time": null
                },
                {
                    "user": "mahaloz",
                    "text": "<span class=\"comment-copy\">@R4444 so you want the entire binaries disass? May I ask why? angr is not particularly better at producing linear assembly as opposed to objdump. If you want a more CFG feel, try angr-managment (which will get you all the assembly plus decompliation).</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">I am working on a project, where we are testing the capabilities of angr. As angr is mentioned in the mentioned usenix paper, we were trying on different options. Although your explanation helps.</span>",
                    "time": null
                },
                {
                    "user": "mahaloz",
                    "text": "<span class=\"comment-copy\">@R4444 I edited my answer to give you every basic block. It would be much more advisable to do this through angr-managment, but if you need automation, CFG recovery then parsing is your best bet :).</span>",
                    "time": null
                }
            ]
        }
    ]
}