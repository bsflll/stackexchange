{
    "title": "What does this assembly language program output?",
    "link": "https://reverseengineering.stackexchange.com/questions/19554/what-does-this-assembly-language-program-output",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been struggling with this for a long time. I have the following assembly language code:\n </p>\n <pre><code>.intel_syntax noprefix\n.bits 32\n\n.global asm0\n\nasm0:\n    push    ebp\n    mov ebp,esp\n    mov eax,DWORD PTR [ebp+0x8]\n    mov ebx,DWORD PTR [ebp+0xc]\n    mov eax,ebx\n    mov esp,ebp\n    pop ebp \n    ret\n</code></pre>\n <p>\n  and\n  <strong>\n   I want to figure out what asm(0xb6, 0xc6) returns\n  </strong>\n  . I've been looking for ASM->C decompilers etc, and I cannot find anything for free. Could someone please help me decipher this? I've been trying for a really long time. I am familiar with C++ and Java programming, so even some sort of tool to convert it would be helpful.\n </p>\n <p>\n  I'm currently reading from this:\n  <a href=\"http://www.godevtool.com/GoasmHelp/newass.htm\" rel=\"nofollow noreferrer\">\n   http://www.godevtool.com/GoasmHelp/newass.htm\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "assembly",
        "decompilation",
        "c"
    ],
    "user": "Joey",
    "time": "Oct 6, 2018 at 1:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is such a small program so this could be followed without converting it back to C. Let's break it down what happens when it's being called with\n  <code>\n   asm(0xb6, 0xc6)\n  </code>\n  .\n </p>\n <pre><code>push    ebp\nmov     ebp, esp\n</code></pre>\n <p>\n  Those two lines are what's is called the function prologue. We first save the calling function stack frame (\n  <code>\n   ebp\n  </code>\n  is tracking that) and in the second one, we set our function stack frame to be equal to the current stack location.\n </p>\n <pre><code>mov eax, DWORD PTR [ebp+0x8]\nmov ebx, DWORD PTR [ebp+0xc]\n</code></pre>\n <p>\n  The above lines are loading our passed arguments to\n  <code>\n   eax\n  </code>\n  and\n  <code>\n   ebx\n  </code>\n  . Since in\n  <code>\n   cdecl\n  </code>\n  arguments are passed via stack in reverse order, so after those lines in\n  <code>\n   eax\n  </code>\n  we will have\n  <code>\n   0xb6\n  </code>\n  and\n  <code>\n   ebx\n  </code>\n  will be equal to\n  <code>\n   0xc6\n  </code>\n  .\n </p>\n <pre><code>mov eax, ebx\n</code></pre>\n <p>\n  The value from\n  <code>\n   ebx\n  </code>\n  is stored in\n  <code>\n   eax\n  </code>\n  , thus we drop the need of the first line from the previous fragment. Also since this is the last use of\n  <code>\n   eax\n  </code>\n  in this code it can be interpreted as a return value as this is also a convention in\n  <code>\n   cdecl\n  </code>\n  . So the return value, in this case, would be\n  <code>\n   0xc6\n  </code>\n  .\n </p>\n <pre><code>mov esp,ebp\npop ebp\n</code></pre>\n <p>\n  This is just bringing back the stack as it was when we enter the function - also called function epilogue.\n </p>\n <pre><code>ret\n</code></pre>\n <p>\n  And return back to the caller.\n </p>\n <p>\n  Having analyzed that it's just obvious that this function returns the second argument that's being passed to it.\n </p>\n <pre><code>int second(int a, int b)\n{\n    return b;\n}\n</code></pre>\n <p>\n  You could compile this code to a library and use it from C code:\n </p>\n <pre><code>#include <stdio.h>\n\nextern unsigned int _test (unsigned int, unsigned int);\n\nint main(void)\n{\n    printf(\"%x\n\", _test(0xb6, 0xc6));\n    return 0;\n}\n</code></pre>\n <p>\n  and compile it with\n  <code>\n   gcc -m32 -o run asm.o call.o\n  </code>\n  .\n </p>\n <blockquote>\n  <p>\n   ./run\n   \n\n   c6\n  </p>\n </blockquote>\n <p>\n  You could verify that it's the case without running it by for example using\n  <a href=\"https://godbolt.org/z/5gAK5m\" rel=\"noreferrer\">\n   godbolt\n  </a>\n  but since the code that assigns the first value to\n  <code>\n   eax\n  </code>\n  and then replaces it with the second is actually not needed - it could just use the second argument from the beginning - it won't be generated even w/o any optimizations.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Paweł Łukasik",
            "time": "Oct 6, 2018 at 2:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}