{
    "title": "Challenging variable-length integer encoding",
    "link": "https://reverseengineering.stackexchange.com/questions/11745/challenging-variable-length-integer-encoding",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a piece of binary data I'm trying to investigate. My guess is that it should be part of simple filesystem-like index. There are 2 parts in the file. First part has a very simple format:\n </p>\n <ul>\n  <li>\n   number of bytes for the first part\n  </li>\n  <li>\n   lots of zero-terminated strings that look like file names (1256 of them)\n  </li>\n </ul>\n <p>\n  Naturally, I expect to find increasing pointers to some files named with these strings later. However, the rest of the file is 0x5c47 bytes long and it looks like it has a number of records (int32, little endian = 0x4e0), then a sequence of records itselves. However, the trick is that obviously record length is not constant: (0x5c47 - 4) / 0x4e0 ~ 18.9254807. I see a certain pattern here, let me demonstrate:\n </p>\n <pre><code>E0 04 00 00\n</code></pre>\n <p>\n  As I said, it starts with number of records, 0x4e0 = 1248. Note that 1248 records is fairly close to number of strings I've found earlier (1256), but not exactly matching. Then I see some 14-byte long records:\n </p>\n <pre><code>90 00   |90 0D|90 16 02 90 22 90 2A 90 39|00\n90 46   |90 0D|90 16 02 90 22 90 2A 90 39|01\n90 53   |90 0D|90 16 02 90 22 90 2A 90 39|02\n90 61   |90 0D|90 16 02 90 22 90 2A 90 39|03\n90 6E   |90 0D|90 16 02 90 22 90 2A 90 39|04\n</code></pre>\n <p>\n  Last byte seems to be record number counter. As for others, so far, only 2nd byte changes. However, next we see some 15-byte long records:\n </p>\n <pre><code>91 82 00|90 0D|90 16 02 90 22 90 2A 90 39|05\n91 97 00|90 0D|90 16 02 90 22 90 2A 90 39|06\n91 A4 00|90 0D|90 16 02 90 22 90 2A 90 39|07\n...\n91 14 01|90 0D|90 16 02 90 22 90 2A 90 39|0E\n</code></pre>\n <p>\n  It seems that there are some variable length integers involved, i.e. first value of a record starts with\n  <code>\n   90 00\n  </code>\n  ,\n  <code>\n   90 46\n  </code>\n  , then it eventually overflows and becomes\n  <code>\n   91 82 00\n  </code>\n  ,\n  <code>\n   91 97 00\n  </code>\n  , ...\n  <code>\n   91 26 01\n  </code>\n  , etc. However, it's not the normal (BER, AKA VLQ, AKA Base128, etc) encoding for variable length integers I've used to. Let's check how contents of the record would expand once it will become 16-byte long record:\n </p>\n <pre><code>91 26 01|90 0D|90 16 02 90 22 90 2A 90 39|0F\n91 39 01|90 0D|90 16 02 90 22 90 2A 90 39|80 10\n91 4E 01|90 0D|90 16 02 90 22 90 2A 90 39|80 11\n91 6C 01|90 0D|90 16 02 90 22 90 2A 90 39|80 12\n91 8B 01|90 0D|90 16 02 90 22 90 2A 90 39|80 13\n...\n</code></pre>\n <p>\n  Whoa, it was just\n  <code>\n   05\n  </code>\n  ,\n  <code>\n   06\n  </code>\n  ,\n  <code>\n   07\n  </code>\n  , ...\n  <code>\n   0E\n  </code>\n  ,\n  <code>\n   0F\n  </code>\n  (which presumably encoded record #0..15), then it jumped to\n  <code>\n   80 10\n  </code>\n  to designate record #16. First field seems to continue being 3-byte integer. Next switch to 17-byte long recods looks like that:\n </p>\n <pre><code>...\n91 7C 08|90 0D|90 16 02 90 22 90 2A 90 39|80 7D\n91 8A 08|90 0D|90 16 02 90 22 90 2A 90 39|80 7E\n91 98 08|90 0D|90 16 02 90 22 90 2A 90 39|81 7F 00\n91 A6 08|90 0D|90 16 02 90 22 90 2A 90 39|81 80 00\n91 B4 08|90 0D|90 16 02 90 22 90 2A 90 39|81 81 00\n91 C2 08|90 0D|90 16 02 90 22 90 2A 90 39|81 82 00\n...\n</code></pre>\n <p>\n  There are some vague resemblance with the trick that we've seen earlier with\n  <code>\n   90\n  </code>\n  becoming\n  <code>\n   91\n  </code>\n  : here\n  <code>\n   80\n  </code>\n  becomes\n  <code>\n   81\n  </code>\n  presumably to designate switch from #126 = 0x7e (encoded as\n  <code>\n   80 7E\n  </code>\n  ) to #127 = 0x7f (encoded as\n  <code>\n   81 7F 00\n  </code>\n  ).\n </p>\n <p>\n  Further in the file there seems to be a major format switch for 18-byte long record which I guess lines up somewhat like that:\n </p>\n <pre><code>...\n91 5D 14|90 0D   |90 16   |02|90 22|90 2A   |90 39|81 5C 01\n91 6A 14|90 0D   |90 16   |02|90 22|90 2A   |90 39|81 5D 01\n91 77 14|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|00\n91 AA 14|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|01\n91 B5 14|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|02\n91 C0 14|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|03\n91 CB 14|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|04\n...\n</code></pre>\n <p>\n  This change expands many of the fields (and actually makes it somewhat cleared what the fields boundaries are) and resets last field back to 0.\n </p>\n <p>\n  There are some vague resemblance with the trick that we've seen earlier with\n  <code>\n   90\n  </code>\n  becoming\n  <code>\n   91\n  </code>\n  : here\n  <code>\n   80\n  </code>\n  becomes\n  <code>\n   81\n  </code>\n  presumably to designate switch from #126 = 0x7e (encoded as\n  <code>\n   80 7E\n  </code>\n  ) to #127 = 0x7f (encoded as\n  <code>\n   81 7F 00\n  </code>\n  ). Records at the end of the file are 20 bytes long and look like that:\n </p>\n <pre><code>...\n91 32 34|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|81 7F 03\n91 3B 34|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|81 80 03\n91 44 34|91 86 14|91 8F 14|02|90 22|91 9B 14|90 39|81 81 03\n</code></pre>\n <p>\n  My best bet here is that many intermediate values have increased and\n  <code>\n   90 xx\n  </code>\n  became\n  <code>\n   91 xx yy\n  </code>\n  .\n </p>\n <p>\n  To summarize what I've learned so far, it looks like these records use variable-length encoded integers, encoding scheme is something like:\n </p>\n <ul>\n  <li>\n   0x0 =\n   <code>\n    00\n   </code>\n   =\n   <code>\n    0000_0000\n   </code>\n  </li>\n  <li>\n   0x1 =\n   <code>\n    01\n   </code>\n   =\n   <code>\n    0000_0001\n   </code>\n  </li>\n  <li>\n   ...\n  </li>\n  <li>\n   0xf =\n   <code>\n    0F\n   </code>\n   =\n   <code>\n    0000_1111\n   </code>\n  </li>\n  <li>\n   0x10 =\n   <code>\n    80 10\n   </code>\n   =\n   <code>\n    1000_0000|0001_0000\n   </code>\n  </li>\n  <li>\n   0x11 =\n   <code>\n    80 11\n   </code>\n   =\n   <code>\n    1000_0000|0001_0001\n   </code>\n  </li>\n  <li>\n   ...\n  </li>\n  <li>\n   0x7e =\n   <code>\n    80 7E\n   </code>\n   =\n   <code>\n    1000_0000|0111_1110\n   </code>\n  </li>\n  <li>\n   0x7f =\n   <code>\n    81 7F 00\n   </code>\n   =\n   <code>\n    1000_0001|0111_1111|0000_0000\n   </code>\n  </li>\n  <li>\n   0x80 =\n   <code>\n    81 80 00\n   </code>\n   =\n   <code>\n    1000_0001|1000_0000|0000_0000\n   </code>\n  </li>\n  <li>\n   ...\n  </li>\n  <li>\n   0x15d =\n   <code>\n    81 5D 01\n   </code>\n   =\n   <code>\n    1000_0001|0101_1101|0000_0001\n   </code>\n  </li>\n </ul>\n <p>\n  Does anyone know of any standard format / encoding scheme that looks like that? Any ideas on how to properly decode\n  <code>\n   90 xx\n  </code>\n  and\n  <code>\n   91 xx yy\n  </code>\n  values?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "487",
    "tags": [
        "binary-analysis",
        "file-format",
        "binary-format"
    ],
    "user": "GreyCat",
    "time": "Jan 12, 2016 at 10:07",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n ASN1 looks a bit like this.  The 9x values might be 8x values with special typing (e.g. signed vs unsigned).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "GreyCat",
            "text": "<html><body><span class=\"comment-copy\">\n @peterferrie ASN1's idea of variable-length integers is basically Base128 + a few bells & whistles like tags and types. Base128 implies that you'll have one byte for values <128. Here we definitely have more: we use 2 bytes per integer as early as 0x10. Thanks for the signed vs unsigned insight :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Each of the eight fields in the record has a one-byte header.\n </p>\n <p>\n  In the header, high nybble\n  <code>\n   8\n  </code>\n  means unsigned and high nybble\n  <code>\n   9\n  </code>\n  means signed (or possibly the other way around, can't be sure); low nybble is then the number of bytes needed to encode the number (not counting the header byte), decremented by one.\n  \n\n  If the high nybble of the header is\n  <code>\n   0\n  </code>\n  , that's a special code for very small unsigneds (more precisely: very small numbers of same type as\n  <code>\n   8\n  </code>\n  ) and in that case the low nybble is the entire number.\n </p>\n <p>\n  Now, the tricky thing that's been making this hard is that (for types\n  <code>\n   8\n  </code>\n  and\n  <code>\n   9\n  </code>\n  ) the rest of the number is encoded using a method that signals the encoding length on its own, wastefully unaware that the header has already told us how many bytes will be needed for the encoding. My guess is that the header byte was \"invented\" for this application after this inner encoding was already decided upon.\n </p>\n <p>\n  For positive integers, that inner encoding is very similar to VLQ (thanks for dropping the names, I wasn't aware of them): output lowest 7 bits of the number as a single byte, and set the MSB of that byte to 1 if there are more bytes to follow, or to 0 if not; continue with the next 7 bits, etc.\n  \n\n  The difference from VLQ is that the bit sequence\n  <code>\n   7F\n  </code>\n  is treated as non-terminating, which may be an Obi-Wan bug in the encoder, or some kind of a genuine design decision that I don't really understand. (It can't be about signalling that the number shouldn't be sign-extended as negative, because then the same would apply for\n  <code>\n   40\n  </code>\n  -\n  <code>\n   7e\n  </code>\n  .)\n </p>\n <p>\n  It would be interesting to see the 4th record from the end - it should end with the value 0x1fe, and I expect it would be encoded as\n  <code>\n   81 FE 03\n  </code>\n  (noting that 0x1ff is encoded as\n  <code>\n   81 7f 03\n  </code>\n  , implying that this encoding never uses the value\n  <code>\n   FF\n  </code>\n  anywhere.)\n </p>\n <p>\n  We don't have examples of negative numbers in your sample, so we can't tell how they would be encoded.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "hemflit",
            "time": "Jan 14, 2016 at 21:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}