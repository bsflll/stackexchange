{
    "title": "Possible to hook an address and directly write to it?",
    "link": "https://reverseengineering.stackexchange.com/questions/13819/possible-to-hook-an-address-and-directly-write-to-it",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am reversing a game for fun and currently use this function to manipulate the Y coordinate:\n </p>\n <pre><code>void __declspec(naked) hookYCoordASM() {\n    __asm {\n        mov eax, valueY\n        mov [esi + 0x7C], eax\n        jmp[returnYCoord]\n    }\n}\n</code></pre>\n <p>\n  Is it possible to safe the address of esi+0x7C in a variable of mine (for example valueY) and write to that saved address after wards?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "172",
    "tags": [
        "disassembly",
        "assembly",
        "function-hooking",
        "dll-injection"
    ],
    "user": "Sep",
    "time": "Oct 26, 2016 at 11:36",
    "comments": [
        {
            "user": "defragger",
            "text": "<html><body><span class=\"comment-copy\">\n That would be possible. Maybe its smarter to find the correct function that changes the position and call it directly.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, you can. Like this:\n </p>\n <pre><code>uint32_t some_value;\nuint32_t ptr_to_some_value; // eax is always 32-bit\nvoid __declspec(naked) hookYCoordASM() {\n    __asm {\n        // #1: to get the value\n        mov eax, [esi + 0x7C];\n        mov some_value, eax;\n\n        // #2: to get a pointer to the value\n        lea eax, [esi + 0x7C];\n        mov ptr_to_some_value, eax;\n\n        mov eax, valueY\n        mov [esi + 0x7C], eax\n        jmp[returnYCoord]\n    }\n}\n</code></pre>\n <p>\n  <em>\n   With that being said\n  </em>\n  , I have to clarify this: you're arbitrarily overriding the value of\n  <code>\n   eax\n  </code>\n  . If the hooked function does not use it, then you're good, but whenever you hook a function which\n  <em>\n   does\n  </em>\n  use it, and you override it, everything will probably break. To avoid this, preserve\n  <code>\n   eax\n  </code>\n  , like this:\n </p>\n <pre><code>void __declspec(naked) hookYCoordASM() {\n    __asm {\n        // save eax for later\n        push eax;\n\n        // ...\n        // do stuff\n        // ...\n\n        // restore eax\n        pop eax;\n\n        // ...\n        jmp[returnYCoord]\n    }\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Martin",
            "time": "Oct 26, 2016 at 22:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}