{
    "title": "Does a Windows MSI/installer function similarly to a portable file in PE format?",
    "link": "https://reverseengineering.stackexchange.com/questions/32939/does-a-windows-msi-installer-function-similarly-to-a-portable-file-in-pe-format",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to determine whether a Windows MSI or installer .exe is considered the same as a portable file .exe in the Portable Executable (PE) format, or if it's considered a dropper. What are the differences between them?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "100",
    "tags": [
        "windows",
        "pe"
    ],
    "user": "c0d3r",
    "time": "May 4, 2024 at 13:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Simplified Comparison Table\n </h1>\n <p>\n  Below is\n  <strong>\n   simplified\n  </strong>\n  comparison between MSI (Microsoft Installer), Portable Executables (PE), and EXE Installers\n </p>\n <div class=\"s-table-container\">\n  <table class=\"s-table\">\n   <thead>\n    <tr>\n     <th style=\"text-align: center;\">\n      Property\n     </th>\n     <th style=\"text-align: center;\">\n      MSI (Microsoft Installer)\n     </th>\n     <th style=\"text-align: center;\">\n      Portable Executables (PE)\n     </th>\n     <th style=\"text-align: center;\">\n      EXE Installers\n     </th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"text-align: center;\">\n      File Format\n     </td>\n     <td style=\"text-align: center;\">\n      MSI files are compound storage files containing multiple streams of data. They consist of a structured relational database containing tables with rows and columns defining various aspects of the installation, such as components, files, registry entries, shortcuts, features, and custom actions.\n     </td>\n     <td style=\"text-align: center;\">\n      Portable Executable (PE) is the file format used for executables, DLLs, and other files on Windows. It consists of a header, followed by sections containing executable code, data, resources, and other metadata.\n     </td>\n     <td style=\"text-align: center;\">\n      EXE installers are standard Windows executables in Portable Executable (PE) format. They contain machine code, data sections, and resources necessary for the installer's operation.\n     </td>\n    </tr>\n    <tr>\n     <td style=\"text-align: center;\">\n      Installation/Loading Logic\n     </td>\n     <td style=\"text-align: center;\">\n      The Windows Installer service (\n      <code>\n       msiexec.exe\n      </code>\n      ) interprets and executes MSI files. It processes the installation database, performs actions specified in the database (such as file copying, registry updates, and service registrations), and manages the installation transaction, allowing for rollback in case of failure.\n     </td>\n     <td style=\"text-align: center;\">\n      When a PE executable is executed, the Windows Loader parses the PE header, loads necessary sections into memory, resolves dependencies (such as DLLs), and transfers control to the executable's entry point to begin execution.\n     </td>\n     <td style=\"text-align: center;\">\n      EXE installers embed installation logic directly within the executable. This logic typically includes routines for extracting files, creating registry entries, displaying user interfaces, and performing other installation-related tasks.\n     </td>\n    </tr>\n    <tr>\n     <td style=\"text-align: center;\">\n      Additional Notes\n     </td>\n     <td style=\"text-align: center;\">\n      MSI installations can include custom actions, which are executable code sequences that can perform tasks not natively supported by the Windows Installer. Custom actions can be written in scripting languages (such as VBScript or JavaScript) or compiled executables.\n     </td>\n     <td style=\"text-align: center;\">\n      PE files contain sections that organize different types of data within the file. Common sections include\n      <code>\n       .text\n      </code>\n      (executable code),\n      <code>\n       .data\n      </code>\n      (initialized data),\n      <code>\n       .rsrc\n      </code>\n      (resources), and\n      <code>\n       .reloc\n      </code>\n      (relocation information).\n     </td>\n     <td style=\"text-align: center;\">\n      EXE installers are created using specialized authoring tools like InstallShield, NSIS, WiX Toolset, or custom scripts. These tools provide environments for defining installation sequences, user interfaces, customization options, and post-installation tasks.\n     </td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <h1>\n  Summary\n </h1>\n <p>\n  MSI files, EXE installers, and Portable Executables (PE) have distinct internal structures, processing mechanisms, and purposes in the context of Windows software installation and execution. While MSI files rely on the Windows Installer service for installation management, EXE installers embed installation logic within executable files, and Portable Executables serve as the standard format for executable code and libraries on Windows.\n </p>\n <h1>\n  File Header Comparison\n </h1>\n <p>\n  Here we can see 3 different files MSI (Microsoft Installer), Portable Executable (PE), and EXE Installer\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/AkZHM78J.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"3 Types if Executables\" src=\"https://i.sstatic.net/AkZHM78J.png\"/>\n  </a>\n </p>\n <ol>\n  <li>\n   The screenshot below shows that both EXEInstaller.exe and NormalPE.exe share the same header PE32 and PE32+ (for x64)\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/Yj2l9bBx.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"BothFileTypes\" src=\"https://i.sstatic.net/Yj2l9bBx.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/19H2NY3L.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"EXEInstaller.exe\" src=\"https://i.sstatic.net/19H2NY3L.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/GP9YmdBQ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"NormalPE.exe\" src=\"https://i.sstatic.net/GP9YmdBQ.png\"/>\n  </a>\n </p>\n <ol start=\"2\">\n  <li>\n   MSIInstaller.msi shows different information as shown below:\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/V0ezh8rt.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"FileType\" src=\"https://i.sstatic.net/V0ezh8rt.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Vh2ApVth.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"HexHeader\" src=\"https://i.sstatic.net/Vh2ApVth.png\"/>\n  </a>\n </p>\n <p>\n  Hope That Helped!\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "CPUKiller",
            "time": "May 4, 2024 at 23:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  .msi files are based on the OLE file format and has d0cf11e0 header as opposed to MZ header for a PE file format. you could use a tool such as oledump (\n  <a href=\"https://isc.sans.edu/diary/oledump+MSI+Files/29584\" rel=\"nofollow noreferrer\">\n   oledump\n  </a>\n  ) to parse it, or a tool called orca (\n  <a href=\"https://learn.microsoft.com/en-us/windows/win32/msi/orca-exe\" rel=\"nofollow noreferrer\">\n   orca\n  </a>\n  ) which is part of the windows SDK to analyze the scripts in the msi. be careful while using orca with malware, use it in a safe vm environment since it might execute some scripts.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "rotem.salinas",
            "time": "May 5, 2024 at 11:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}