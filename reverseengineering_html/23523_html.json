{
    "title": "The questions about li instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/23523/the-questions-about-li-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When reversing a MIPS binary using IDA Pro, I have 2 questions. \nThe source code is as follows.\n </p>\n <pre><code>int main(int argc, char* argv[])\n{\n    int m = 1;\n    int n = 5;\n    printf(\"sum = %d\n\", m+n);\n}\n</code></pre>\n <h2>\n  <a href=\"https://i.sstatic.net/9FpFL.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"ida pro\" src=\"https://i.sstatic.net/9FpFL.png\"/>\n  </a>\n </h2>\n <pre><code>.text:00080510  # int __cdecl main(int argc, const char **argv, const char **envp)\n\n.text:00080510  .globl main    \n.text:00080510  main:    \n.text:00080510      # __unwind {    \n.text:00080510 02 00 1C 3C 00 8B 9C 27  li      $gp, 0x18B00    \n.text:00080518 21 E0 99 03              addu    $gp, $t9    \n.text:0008051C 1C 80 84 8F              li      $a0, 0x80000    \n.text:00080520 44 80 99 8F              la      $t9, printf    \n.text:00080524 A4 08 84 24              addiu   $a0, (aSumD - 0x80000)  # \"sum = %d\n\"    \n.text:00080528 08 00 20 03              jr      $t9 ; printf    \n.text:0008052C 06 00 05 24              li      $a1, 6    \n.text:0008052C                  # } // starts at 80510    \n.text:00080530\n</code></pre>\n <hr/>\n <p>\n  (1) I know the\n  <em>\n   li\n  </em>\n  instruction at offset 0x0008051c is\n  <em>\n   lw\n  </em>\n  actually. And its encoding format is \n1000 11ss ssst tttt iiii iiii iiii iiii. So I konw sssss = (111100)2 = 28 = $gp, ttttt = (00100)2 = 4 = $a0.\nBut I don't know how to calculate 0x80000.\n </p>\n <p>\n  (2) The\n  <em>\n   li\n  </em>\n  instrution at offset 0x00080510 takes 8 bytes, but another\n  <em>\n   li\n  </em>\n  instruction at offset 0x0008051C takes 4 bytes? Is the first\n  <em>\n   li\n  </em>\n  instruction a pseudoinstruction?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "135",
    "tags": [
        "ida",
        "mips",
        "encodings"
    ],
    "user": "user6903",
    "time": "Mar 25, 2020 at 4:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  MIPS instructions are 4 bytes (32 bit) in size. Hence it's not possible to load a 32 bit constant using a single instruction.\n </p>\n <p>\n  The\n  <code>\n   li  $gp, 0x18B00\n  </code>\n  instruction is indeed a pseudo instruction. It's composed of two instructions.\n </p>\n <pre><code>lui     gp, 0x2\naddiu   gp,gp,-29952\n</code></pre>\n <p>\n  <strong>\n   Screenshot from Online Disassembler\n  </strong>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/6guzr.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/6guzr.png\"/>\n  </a>\n </p>\n <p>\n  The\n  <code>\n   lui\n  </code>\n  (Load Upper Immediate) instruction loads a 16-bit constant into the upper 16 bits of a register (\n  <code>\n   $gp\n  </code>\n  here).\n </p>\n <p>\n  The\n  <code>\n   addiu\n  </code>\n  instruction adds a 16 bit integer to a register. The final value in\n  <code>\n   $gp\n  </code>\n  can be calculated as:\n </p>\n <pre><code>$gp = (2 << 16) + (-29952) = 0x18B00\n</code></pre>\n <p>\n  IDA pro and other disassemblers does this calculation automatically and displays the final result using a single pseudo instruction.\n </p>\n <p>\n  The other\n  <code>\n   li  $a0, 0x80000\n  </code>\n  instruction at\n  <code>\n   0008051C\n  </code>\n  is actually a\n  <code>\n   lw\n  </code>\n  (Load Word) instruction. The\n  <code>\n   lw\n  </code>\n  instruction loads a word from memory into a register. The value\n  <code>\n   0x80000\n  </code>\n  is thus located in memory at\n  <code>\n   [$gp - 32740]\n  </code>\n  and not a part of the instruction itself.\n </p>\n <p>\n  IDA however simplifies and shows it as\n  <code>\n   li  $a0, 0x80000\n  </code>\n  as the net result is the value\n  <code>\n   0x80000\n  </code>\n  is copied to the register.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xec",
            "time": "Mar 25, 2020 at 10:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user6903",
                    "text": "<span class=\"comment-copy\">Thank you very much! in question (1), how to calculate the 0x80000?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@user6903 Check update</span>",
                    "time": null
                },
                {
                    "user": "user6903",
                    "text": "<span class=\"comment-copy\">Now is static analysis, how does IDA calculate the value of the $gp register, that is, how to calculate $gp - 32740 ?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">The very first instruction sets the value of the <code>$gp</code> register <code>li $gp, 0x18B00</code></span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">There's a way to turn off IDA simplifying gp references. Check <a href=\"https://github.com/angr/angr/issues/1754#issuecomment-548008124\" rel=\"nofollow noreferrer\">this</a></span>",
                    "time": null
                }
            ]
        }
    ]
}