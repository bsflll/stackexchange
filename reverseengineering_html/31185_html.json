{
    "title": "Compression format used for various data (images, text, etc.) in a 1997 video game",
    "link": "https://reverseengineering.stackexchange.com/questions/31185/compression-format-used-for-various-data-images-text-etc-in-a-1997-video-ga",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been trying to reverse engineer the format of data files from the 1997 video game\n  <a href=\"https://en.wikipedia.org/wiki/Helicops_(video_game)\" rel=\"nofollow noreferrer\">\n   Helicops\n  </a>\n  . I have experience reverse engineering binary files from games of this period but limited exposure to compression schemes.\n </p>\n <p>\n  I've been able to figure out the header format (which I've documented\n  <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/file-format-dat.md#header\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  ; it uses an\n  <a href=\"https://en.wikipedia.org/wiki/XOR_cipher\" rel=\"nofollow noreferrer\">\n   XOR \"cipher\"\n  </a>\n  with the key\n  <code>\n   0xAA\n  </code>\n  ), but the individual data blocks within each file use a form of compression I haven't been able to figure out.\n </p>\n <p>\n  I'm certain the data are compressed: the header in each DAT file contains a table listing each data block's name, starting offset, and two values: one is the length of the data block in the DAT file and the other appears to be the data block's uncompressed length (notably, it's 768 for multiple data blocks that appear to be colour tables; 768 = 256 colours * 3 bytes/colour and these data blocks have names that end with \"ACT\", i.e., Adobe Color Table, and some include obvious grayscale ramps).\n </p>\n <p>\n  My full notes on the compression scheme are\n  <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/file-format-dat.md#compression\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , but I haven't been able to figure out much. Here's a summary:\n </p>\n <ul>\n  <li>\n   In multiple data files,\n   <code>\n    0xFF\n   </code>\n   is followed by 8 uncompressed bytes. This is consistent across multiple files containing different types of recognizable data (ASCII text and colour palettes), so it seems likely that all the game's data files use the same type of compression.\n  </li>\n  <li>\n   Currently, I have no idea how\n   <code>\n    0xFF\n   </code>\n   translates to \"the next 8 bytes are uncompressed data\". Since the header uses an XOR cipher, I've tried XORing it with various values (\n   <code>\n    0xAA\n   </code>\n   since that's the key for the header data,\n   <code>\n    0xF7\n   </code>\n   since that gives\n   <code>\n    0x08\n   </code>\n   , etc.) but I haven't come up with any that make sense for\n   <code>\n    0xFF\n   </code>\n   and some of the other values that are clearly compression-related. My guess is that ranges of bits within each byte contain different compression-related info, but that the bytes need to be altered in some way first.\n  </li>\n  <li>\n   Based on bytes that are evidently uncompressed data, it's clear that there are many sequences of bytes related to data compression (see examples in the sample data below), but I haven't been able to figure out how to decode them.\n  </li>\n  <li>\n   I suspect the compression scheme uses some form of\n   <a href=\"https://en.wikipedia.org/wiki/Run-length_encoding\" rel=\"nofollow noreferrer\">\n    run-length encoding\n   </a>\n   and/or something along the lines of\n   <a href=\"https://en.wikipedia.org/wiki/LZ77_and_LZ78\" rel=\"nofollow noreferrer\">\n    LZ77\n   </a>\n   where references to sequences elsewhere in the data are used to reduce overall size.\n  </li>\n </ul>\n <p>\n  I've uploaded a sample DAT file,\n  <code>\n   PIC.DAT\n  </code>\n  ,\n  <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/PIC.DAT\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  . It contains substantial quantities of ASCII text that make identifying compression-related bytes fairly easy. A list of its data blocks (parsed from its header) is\n  <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/scripts/helicops-file-summary.md#picdat\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Here are some sample data from the data block starting at offset 184456 in\n  <code>\n   PIC.DAT\n  </code>\n  (\n  <code>\n   PIC.DAT\n  </code>\n  's header identifies this block as being associated with the third mission set, \"Data Space Demon\", and the first mission in that set, \"Tower Attack\"; note that these strings appear in the data below):\n </p>\n <div class=\"s-table-container\">\n  <table class=\"s-table\">\n   <thead>\n    <tr>\n     <th>\n      Bytes\n     </th>\n     <th>\n      Notes/ASCII\n     </th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>\n      FF\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      52 45 4D 20 4D 69 73 73\n     </td>\n     <td>\n      \"REM Miss\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      FF\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      33 31 2E 50 49 43 20 2D\n     </td>\n     <td>\n      \"31.PIC -\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      FE FD F4\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      20 54 6F 77 65 72 20\n     </td>\n     <td>\n      \" Tower \"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      BF 28\n     </td>\n     <td>\n      BF = 191/-65, 28 = 40/40\n     </td>\n    </tr>\n    <tr>\n     <td>\n      54 6F 6B 79 6F\n     </td>\n     <td>\n      \"Tokyo\" (not part of level name)\n     </td>\n    </tr>\n    <tr>\n     <td>\n      05 03 29 FB 0D 0A EE F1\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      44 61 74 61 20\n     </td>\n     <td>\n      \"Data \"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      FF\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      53 70 61 63 65 20 44 65\n     </td>\n     <td>\n      \"Space De\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      EF\n     </td>\n     <td>\n      239/-17\n     </td>\n    </tr>\n    <tr>\n     <td>\n      6D 6F 6E\n     </td>\n     <td>\n      \"mon\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      2C 05 04\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      41 74 74\n     </td>\n     <td>\n      \"Att\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      F7\n     </td>\n     <td>\n      247/-9\n     </td>\n    </tr>\n    <tr>\n     <td>\n      61 63 6B\n     </td>\n     <td>\n      \"ack\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      19 03\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      43 6F 70 69\n     </td>\n     <td>\n      \"Copi\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      FF\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      65 64 20 66 72 6F 6D 20\n     </td>\n     <td>\n      \"ed from \"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      7F\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      48 43 5F 57 6F 72 6B\n     </td>\n     <td>\n      \"HC_Work\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      FC F6 FE 5E 0E\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      20 20 31 2D 32 33 2D\n     </td>\n     <td>\n      \"  1-23-\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      7F\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      39 37 20 44 42 0D 0A\n     </td>\n     <td>\n      \"97 DB\\r\n\"\n     </td>\n    </tr>\n    <tr>\n     <td>\n      19 03 F1 2A 84 0F 8A 02 19 03\n     </td>\n     <td>\n     </td>\n    </tr>\n    <tr>\n     <td>\n      [remaining bytes follow]\n     </td>\n     <td>\n     </td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <p>\n  There are additional sample data\n  <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/file-format-dat.md#sample-data\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , including colour palettes (some of which appear to be minimally-compressed).\n </p>\n <p>\n  I'd appreciate any suggestions regarding how this compression format might work! I'll credit any assistance in the file format documentation I'm writing.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "246",
    "tags": [
        "decompress"
    ],
    "user": "Reign of Error",
    "time": "Nov 27, 2022 at 0:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's a very similar compression method to that used in\n  <a href=\"https://reverseengineering.stackexchange.com/questions/21981/what-compression-type-has-been-used-here/22017\">\n   this question\n  </a>\n  .\n </p>\n <p>\n  Specifically, the compressed data begins with a flag byte. Each bit of this in turn (from bit 0 to bit 7) indicates that the next decompressed byte(s) are generated by -\n </p>\n <ul>\n  <li>\n   (when the flag bit is 1) copying a single literal byte from the compressed data stream or\n  </li>\n  <li>\n   (when the flag bit is 0) copying between N bytes from elsewhere in the decompressed data stream. The length and location of these bytes are encoded in  the following 2 bytes in the compressed data stream.\n  </li>\n </ul>\n <p>\n  Hence\n  <code>\n   0xFF\n  </code>\n  is 8x\n  <code>\n   1\n  </code>\n  s and represents 8 uncompressed bytes.\n </p>\n <p>\n  Your example file begins with 2 of these, as you identified.\n </p>\n <p>\n  These are then followed by an\n  <code>\n   FE\n  </code>\n  =\n  <code>\n   0b11111110\n  </code>\n  So this is followed by -\n </p>\n <ul>\n  <li>\n   1 compressed byte-pair\n   <code>\n    FD F4\n   </code>\n   , and\n  </li>\n  <li>\n   7 uncompressed literal bytes\n   <code>\n    20 54 6F 77 65 72 20\n   </code>\n  </li>\n </ul>\n <p>\n  I think the length part of the compressed byte pair is likely given by 3 + the last nibble (in this case 3+4=7.)\nI haven't quite found an interpretation for the offset/location part of these 2 bytes that works consistently yet though.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Jan 5, 2023 at 15:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Reign of Error",
                    "text": "<span class=\"comment-copy\">Thanks, this is very helpful! Knowing this I'm going to take another look at the color palettes (some of which are <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/file-format-dat.md#sample-data\" rel=\"nofollow noreferrer\">here</a>); given the relative simplicity of their data, they should help to narrow down the meaning of the compressed byte pairs.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The mix of readable text fragments and high byte values makes me suspect LZSS but it may also be some simple RLE-like algorithm. To be completely sure you’d need to find the code which decompresses this data in the executable code.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Dec 4, 2022 at 23:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}