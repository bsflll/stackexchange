{
    "title": "Is there a way to see all \"values\" in memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/17839/is-there-a-way-to-see-all-values-in-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In a program I'm working on, a variable is set using a memory address:\n </p>\n <pre><code>mov r9, [0x0000000000472C10]\n</code></pre>\n <p>\n  Is this the equivalent? (forgive the python code):\n </p>\n <pre><code>value = 55 <---- value at memory address 472C10?\n...\nx = number <---- x is set from r9?\n</code></pre>\n <p>\n  In that case, instead of the hard-coded 55 in the code, I'd like to use my own number. The trouble is I don't know how to access it. My own value has been defined somewhere in the program for example:\n </p>\n <pre><code>user_value = getValue()\n...\n# assuming we're still in the same function\n...\nvalue = 55\n</code></pre>\n <p>\n  How can I now change value to be equal to\n  <code>\n   user_value\n  </code>\n  , where can I find the memory address of\n  <code>\n   user_value\n  </code>\n  so I can change the\n  <code>\n   mov\n  </code>\n  instruction?\n </p>\n <p>\n  edit: I know that x64dbg has a way of tracing registry changes, could this be a way of tracking when 55 is set?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "x64dbg"
    ],
    "user": "Lobstw",
    "time": "Mar 29, 2018 at 19:59",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n mov[addr] , value   mov regisrer,[addr]\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Lobstw",
            "text": "<html><body><span class=\"comment-copy\">\n Could you elaborate a little? What's value here?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "dsasmblr",
            "text": "<html><body><span class=\"comment-copy\">\n Before I post an answer, let me clarify a few things to make sure I have your question right. 1) You want to find the hard-coded 55 in memory, but you don't know the address. 2) You want to change the value in that memory address to whatever is in the user_value mem address, of which you also do not know. Is this value one you can change multiple times during execution? 3) Are you just assuming that mov instruction, or do you know the value is being read just like that? 4) Have you ever used memory scanning, like via Cheat Engine? If not, that's the path I'm going to answer you with.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  it is a simple assignment like\n </p>\n <p>\n  int a = x;\nint *b = &a\n </p>\n <p>\n  if r9 is used then it possibly means the 4 th argument is being initialised\n </p>\n <p>\n  you can see your construct in code like this\n </p>\n <pre><code>int *blah;\nint foo(int,int,int,int *c){\n    register int b = *c;\n    return b * 3;\n}\nint main (void) {\n int f = 0xdeadbeef;\n blah = &f;\nreturn foo(1,2,3,blah);\n}\n</code></pre>\n <p>\n  see how r9 is initialized for this code\n </p>\n <pre><code>>dumpbin /disasm:nobytes /range:0x140001030,0x140001068 pointer.exe\nMicrosoft (R) COFF/PE Dumper Version 14.13.26129.0\nDump of file pointer.exe\nFile Type: EXECUTABLE IMAGE\n  0000000140001030: sub         rsp,38h\n  0000000140001034: mov         dword ptr [rsp+20h],0DEADBEEFh\n  000000014000103C: lea         rax,[rsp+20h]\n  0000000140001041: mov         qword ptr [0000000140003000h],rax <<<<<<\n  // mov [addr] , value (value here is 0xdeadbeef) \n  // if you do r eax = 55 then you got what you wanted here wrt windbg\n  0000000140001048: mov         r9,qword ptr [0000000140003000h] <<<<<<<<\n  // mov register [addr]\n  000000014000104F: mov         r8d,3\n  0000000140001055: mov         edx,2\n  000000014000105A: mov         ecx,1\n  000000014000105F: call        0000000140001000\n  0000000140001064: add         rsp,38h\n  0000000140001068: ret\n</code></pre>\n <p>\n  in such cases if you want r9 to be say 55  you need to patch the contents of the \naddress 0x140003000 or some such address\n  \n\n  one way to get that address is debug or use some memory scanning tools like cheat engine\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 30, 2018 at 14:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}