{
    "title": "IDA fixups, why and how",
    "link": "https://reverseengineering.stackexchange.com/questions/18825/ida-fixups-why-and-how",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using IDA 7\n  <strong>\n   Freeware\n  </strong>\n  , not Pro. I've been using IDC to re-invent the wheel somewhat, but I'm learning a ton of stuff as I go along.\n </p>\n <p>\n  I have a 16-bit MSDOS exe which I'm reversing. I stripped out the header and reloc table in my first attempt, so that all seg refs resolved correctly.\n </p>\n <p>\n  Now I've found set_fixup() and friends, and also seen doRelocs() from the (old) SDK via Google. I'm a bit puzzled by it all.\n </p>\n <ol>\n  <li>\n   <p>\n    set_fixup() as per IDA help has 5 params. However set_fixup() expects 6 params in my version of IDA Freeware.\n   </p>\n  </li>\n  <li>\n   <p>\n    am I supposed to use set_fixup() on an entry in the exe header reloc table, or on the ea of an instruction in the program? (eg mov ax, 0x2d0e - where 0x2d0e needs to be adjusted to be 0x2d0e + 0x160 - code starts at 0x1600+10).\n   </p>\n  </li>\n  <li>\n   <p>\n    I can deduce from experiment set_fixup() looks like: set_fixup(targetEa, fixupTypeFlag, ???, ???, ???, displacement). Seems that p3 might be an ea, and p3 should be >p4 (otherwise nothing happens). p5 appears to have no effect!\n   </p>\n  </li>\n  <li>\n   <p>\n    doRelocs() - in the (ver?) dos_ovr loader - changes instruction bytes referenced by the exe header reloc table, physically changing the bytes in the code. It then also calls set_fixups(). I must be understanding fixups wrongly, or IDA fixups function differently to DOS exe relocations. Surely if you change the bytes to be relative to the start of the file ('mz'), then you no longer need to apply fixups?? They are fixed up by changing them! After all that's what DOS does when it loads the code before discarding the header.\n   </p>\n  </li>\n </ol>\n <p>\n  Please help me understand IDA fixups!\n </p>\n <p>\n  I'm trying to use this IDC code:\n </p>\n <p>\n  //seg001:10 to_ea == 0x1610\n </p>\n <p>\n  //0x01610: mov ax, 0x02d0e (next: mov ds,ax)\n </p>\n <p>\n  //0x2d0e + 0x160 = 0x2e6e\n </p>\n <p>\n  set_fixup(0x1611, FIXUP_SEG16, 0x2e6e0, 0x2e6e, 0, 0) //best guess at args\n </p>\n <p>\n  Thanks in advance!\n </p>\n <p>\n  e: Partial answer from Ilfak Guilfanov (via email)\n </p>\n <p>\n  ~~~~\nJul 18 (1 day ago)\nto me\n </p>\n <p>\n  Thanks, we will fix this. Meanwhile pass 0 for fixupf:\n </p>\n <p>\n  void set_fixup(long ea, long type, long fixupf, long targetsel, long targetoff, long displ);\n </p>\n <p>\n  ~~~~\n </p>\n <p>\n  Perhaps I'll be able to figure the rest out, but still grateful for any further help!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "447",
    "tags": [
        "ida",
        "dos-exe"
    ],
    "user": "k9wazere",
    "time": "Jul 19, 2018 at 17:30",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n IDC is kind of dead and rarely used. If you're limited to free tools you may want to consider using radare2 or other alternatives.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "k9wazere",
            "text": "<html><body><span class=\"comment-copy\">\n @Biswapriyo Thanks, but set_fixup() is an IDC function, not a decompiled program function. Your link is about IDC not detecting fastcall function parameters?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Anton Kukoba",
            "text": "<html><body><span class=\"comment-copy\">\n Wait for Igor Skochinsky to reply, I know that he knows :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}