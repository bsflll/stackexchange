{
    "title": "How to develop an anti-debug library which allow users to debug their own programs but not the library?",
    "link": "https://reverseengineering.stackexchange.com/questions/31925/how-to-develop-an-anti-debug-library-which-allow-users-to-debug-their-own-progra",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm going to publish a library which guarded by anti-debug ,(ptrace_trackme for Linux and isDebuggerPresent for windows).\nThe down side of this library is: users would be abled to debug their own programs while the program is linked to my guarded library.\n </p>\n <p>\n  What anti-debug techniques should be adopted ?Provided that the users are able to debug their programs and my library is not comprised.\n </p>\n <p>\n  By the way, my friend has a proprietary software which licensed through a software license, (anti-debug of course). If he wants to debug his program while using the software, He has to buy an extra dongle and replace the lib with the version which coupled with the dongle.\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "87",
    "tags": [
        "windows",
        "debugging",
        "decompilation",
        "linux",
        "anti-debugging"
    ],
    "user": "prgbenz",
    "time": "May 31, 2023 at 13:37",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Anti debugging measures usually work on process level, I don't know if it is possible at all limiting it to a library. The only workaround I see would be to run your library in a separate process and provide as library just a sub the communicates with this external process using an IPC/RPC technique of your choice.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}