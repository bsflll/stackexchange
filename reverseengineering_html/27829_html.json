{
    "title": "Understanding the leap of logic in \"Secrets of Reverse Engineering\"",
    "link": "https://reverseengineering.stackexchange.com/questions/27829/understanding-the-leap-of-logic-in-secrets-of-reverse-engineering",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In Chapter 5 of the book \"Secrets of Reverse Engineering\" (by Eldad Eilam), the author goes about reversing an undocumented \"table\" API functions in the NTDLL library. The logic behind his reasoning in one particular function bothers me. Here is the relevant portions of the function:\n </p>\n <pre><code>RtlGetElementGenericTable:\n7C9624E0        PUSH EBP\n7C9624E1        MOV EBP, ESP\n7C9624E3        MOV ECX, DWORD PTR [EBP+8]\n7C9624E6        MOV EDX, DWORD PTR [ECX+14]\n7C9624E9        MOV EAX, DWORD PTR [ECX+C]\n7C9624EC        PUSH EBX\n7C9624ED        PUSH ESI\n7C9624EE        MOV ESI, DWORD PTR [ECX+10]\n7C9624F1        PUSH EDI\n7C9624F2        MOV EDI, DWORD PTR [EBP+C]\n7C9624F5        CMP EDI, -1\n7C9624F8        LEA EBX, DWORD PTR [EDI+1]\n7C9624F8        JE SHORT 7C962559\n7C9624FD        CMP EBX, EDX\n7C9624FF        JA SHORT 7C962559\n....\n7C962554        ADD EAX, 0C\n7C962557        JMP SHORT 7C96255B\n7C962559        XOR EAX, EAX\n7C96255B        POP EDI\n7C96255C        POP ESI\n7C96255D        POP EBX\n7C96255E        POP EBP\n7C96255F        RET 8\n</code></pre>\n <p>\n  From some other \"table\" functions, he surmises that the structure of the table must look like this:\n </p>\n <pre><code>struct Table {\n    unknown_ptr    member1;    // This is non-zero when table has elements\n    unknown_ptr    member2;\n    unknown_ptr    member3;\n    unknown_ptr    member4;\n    unknown        member5;\n    ulong          numberOfElements;\n    unknown        member7;\n    unknown        member8;\n    unknown        member9;\n    unknown        member10;\n};\n</code></pre>\n <p>\n  Looking at the last 10 lines before the big jump (so from 7C9624EC to 7C9624FF), he comes up with the following conclusion:\n </p>\n <blockquote>\n  <p>\n   Recall that EDX was loaded from offset +14 in the structure, and that\nthis is the member that stores the total number of elements in the\ntable. This indicates that the second parameter passed to\nRtlGetElementGenericTable is an index into the table. These last two\ninstructions simply confirm that it is a valid index by comparing it\nagainst the total number of elements. This also sheds some light on\nwhy the index was incremented. It was done in order to properly\ncompare the two, because the index is probably zero-based, and the\ntotal element count is certainly not.\n  </p>\n </blockquote>\n <p>\n  It is this conclusion that I fail to understand, this leap of logic. I fail to see how the second argument is an index into the table. All I can see is that the final two lines of the code chunk translate into\n  <code>\n   if (arg2+1 > numberOfElements) { return 0; }\n  </code>\n  . Looking at it backwards it makes sense (i.e. a confirmation of the conclusion), but looking at it forwards makes no sense to me (i.e. from premise to conclusion). How was simply that conditional on line 7C9624FF indicate that the second argument\n  <em>\n   must\n  </em>\n  be an index and not something else? In other words, how did the author piece the evidence together into a logical high-level conclusion?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "77",
    "tags": [
        "api"
    ],
    "user": "nanoman",
    "time": "Jun 11, 2021 at 19:55",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n it is an inference some argument is comparing itself with a structures member and a decision is made to either return NULL or execute the else clause  one can also infer that the members value must be greater than the arguments value based on these inferences it is concluded that itmight indicate that second argument is an index you can call it middle,ring,small or thumb too it is like if (i > foo.totnum) {return 0;} else {do something}\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}