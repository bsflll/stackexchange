{
    "title": "Reverse engineering Earthsiege 2 3D model format",
    "link": "https://reverseengineering.stackexchange.com/questions/11495/reverse-engineering-earthsiege-2-3d-model-format",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As a personal project I've been trying to reverse engineer the art assets for the old Dynamix game Earthsiege 2 (this game has long been abandonware and was recently released for free by Hi-Rez, the current copyright holder). It was child's play to decode the images/textures, but I've been having trouble with the binary 3D model format.\n </p>\n <p>\n  As some background, the 3D models are saved as DTS files. DTS is a proprietary binary format (little-Endian), short for \"Dynamix Three-Space\". I wasn't able to find any resources on reversing ES2-era DTS files.\n </p>\n <p>\n  For this post I'll focus on the Apocalypse.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/6Kv1A.png\" rel=\"noreferrer\">\n   <img alt=\"The Apocalypse in-game; take note there are discrete parts rather than a single mesh\" src=\"https://i.sstatic.net/6Kv1A.png\"/>\n  </a>\n </p>\n <p>\n  The Apocalypse model is stored in\n  <code>\n   Apoca.dts\n  </code>\n  . The file starts out like this (in hex, with annotations):\n </p>\n <pre><code>  | File size |     ?     |ChunkMarker|Chunk Length\n02|7C 7F 01 00|4B 1F 3D 7F|03 00 1E 00|FC 5F 00 \n00|FF FF 00 00 0E 08 BF FF CC FF 23 04 01 00 15 \n00 14 00 70 46 00 00 FF FF 00 00 B7 06 BF FF CC \nFF 23 04 1B 00 14 00 14 00 4A 01 00 00 01 00 0C \n00 AB 01 FB FF 22 00 7B 05 18 00 0F 00 10 00 06  <-Faces\n00 02 00 03 00 04 00 05 00 02 00 05 00 07 00 08 \n00 0A 00 0B 00 04 00 03 00 03 00 02 00 08 00 0A \n00 0B 00 07 00 05 00 04 00 0A 00 08 00 07 00 0B \n00 00 00 1D 00 FF 07 00 00 00 00 00 00 24 FF 72  <-Some vertices here\n01 82 05 DC 00 72 01 82 05 DC 00 C0 FE 8C 05 24  <-\nFF C0 FE 8C 05 00 F8 00 00 00 00 24 FF E8 FE 00  <-\n05 24 FF 04 01 60 04 00 08 00 00 00 00 DC 00 04  <-\n01 60 04 DC 00 E8 FE 00 05 00 00 7A 07 2A FD 00  <-\n00 4F F8 CE FD 00 00 BB FD 55 F8 02 00 00 04 02 \n00 00 04 00 00 00 14 00 00 00 14 00 00 00 00 FF \nFF FF FF FF FF FF FF FF FF FF FF 1B 00 00 00 FF \nFF FF FF FF FF FF FF FF FF FF FF 19 00 00 00 FF \nFF FF FF FF FF FF FF FF FF FF FF 03 00 14 00 0A \n00 00 00 00 00 02 00 04 00 00 00 00 00 03 00 14\n</code></pre>\n <p>\n  For formatted/color-coded analysis, see\n  <a href=\"http://postimg.org/image/8e56re90n/\" rel=\"noreferrer\">\n   http://postimg.org/image/8e56re90n/\n  </a>\n </p>\n <p>\n  To see the first 3 chunks of the file in their entirety, see\n  <a href=\"http://pastebin.com/RTFkdiBd\" rel=\"noreferrer\">\n   http://pastebin.com/RTFkdiBd\n  </a>\n </p>\n <h2>\n  Current knowledge\n </h2>\n <p>\n  Each DTS file is broken into chunks. The 10th - 13th bytes are a start-of-chunk marker; I think this is\n  <code>\n   03 00 1E 00\n  </code>\n  in each file. The next four bytes are the size of the chunk, always followed by FF 00. A new chunk will begin immediately after the previous ends. I don't know how the chunks divvy up data right now, but it does appear that multiple chunks contain vertices. This may be related to the fact that the model is noticeably divided into discrete parts, rather than a single mesh.\n </p>\n <p>\n  Each vertex is a set of 6 bytes, consisting of 3\n  <em>\n   signed\n  </em>\n  shorts for the X, Y, and Z coordinates of that vertex. The first vertex in this file is 24 FF 62 01 82 05, which has coordinates -220, 354, 1401 when converted to decimal. The sample I've provided contains the following vertices:\n </p>\n <pre><code>24 FF 72 01 82 05 \nDC 00 72 01 82 05 \nDC 00 C0 FE 8C 05 \n24 FF C0 FE 8C 05\n24 FF E8 FE 00 05\n24 FF 04 01 60 04\nDC 00 04 01 60 04 \nDC 00 E8 FE 00 05\n</code></pre>\n <p>\n  These vertices define the crotch. Interestingly, the crotch is actually located above the head in 3D space as defined in the file, so it must get translated somewhere. I have tested and verified that the above bytes contain the crotch by editing them in RAM while the game is running, which distorts the model immediately when I click back into the game window.\n </p>\n <p>\n  Notice that between some of these vertices are two sets of six bytes that do not appear to be vertices (they don't correspond to any point on the model and have no effect when altered in RAM). I don't know what the deal with these is:\n </p>\n <pre><code>00 F8 00 00 00 00\n00 08 00 00 00 00\n</code></pre>\n <p>\n  The rest of the model is defined in pieces throughout the file. Vertices are clustered into small groups, which I think define one shape at a time. I can find vertices for everything but the weapons and legs. The legs are animated, so they might be defined differently, or located in a different file. The weapons are defined in a separate file.\n </p>\n <p>\n  Preceding the vertices are some shorts with small values, e.g. 06 00 02 00. These have something to do with the faces; my guess is that they refer to vertices by index to define a face. I have verified that these affect the faces by editing them in RAM while the game is running, but haven't fully decoded them yet.\n </p>\n <p>\n  There is always 6 bytes of 0s (\n  <code>\n   00 00 00 00 00 00\n  </code>\n  ) between the faces and the vertices. There is always the marker\n  <strong>\n   <code>\n    04 00 00 00 14 00 00 00 14 00 00 00\n   </code>\n  </strong>\n  shortly after the vertices end. Using this knowledge, I'm able to parse vertices from a file by looking between those two markers; however, this is imprecise and I end up with a bunch of junk vertices forming a partial spherical shell around the model.\n </p>\n <p>\n  Here is a rendering of a point cloud of vertices I am able to read out of the Apocalypse DTS file; I have filtered out some of the junk vertices here, but there are still some present around the edges and in the middle. Take note that the hips and crotch are located\n  <em>\n   above\n  </em>\n  the torso in the file.\n  <a href=\"https://i.sstatic.net/eubvH.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/eubvH.png\"/>\n  </a>\n </p>\n <h2>\n  What's next?\n </h2>\n <p>\n  I'm not hoping to decode the entire DTS file from start to finish - it's much too long and complex - but I'd like to at least be able to read the vertices, and hopefully faces, out of the files.\n </p>\n <p>\n  The biggest struggle I've been having at the moment is trying to figure out how to know exactly where a set of faces/vertices start and end.\n  <strong>\n   My main question would be how to\n   <em>\n    precisely\n   </em>\n   determine where a group of faces/vertices start and end\n  </strong>\n  , as they are not in the exact same place in every file. Any other information you can spot that I've missed would be awesome, but that's my main objective.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "file-format",
        "hex"
    ],
    "user": "user45623",
    "time": "Dec 11, 2015 at 0:55",
    "comments": [
        {
            "user": "majidarif",
            "text": "<html><body><span class=\"comment-copy\">\n I'm currently having a same project for a 2001 korean MMORPG that has long been abandoned. Like you, the textures was easy. But the objects is where I'm currently stuck. Can you share any resource or book that helped you finally decode the object file?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user45623",
            "text": "<html><body><span class=\"comment-copy\">\n @majidarif First, it's very unlikely there is any similarity in file format between the two titles. Secondly, if you read the accepted answer, you will learn everything that I learned.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "robosalad",
            "text": "<html><body><span class=\"comment-copy\">\n Is this still being worked on? Just wanted to say that I was able to convert some models from Earthsiege 1 with booto's script.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To determine where the faces/vertices are laid out purely via inspection can be pretty time consuming and hit-and-miss. Given the executable is available that processes these files, I think it's probably a better starting point - it definitively knows how to process the format.\n </p>\n <p>\n  I used IDA Pro to analyse the code in the executable that's involved in loading the data, using the some magic numbers [including the 0x001e0003 you noted as the ChunkMarker] to locate the relevant parts and expanding from there.\n </p>\n <p>\n  You'll find that there are some duplications of surfaces in the mesh - I think the base mesh is just solid-shaded, but uses textures sparingly like decals over the base mesh.\n </p>\n <p>\n  Here's an example imported into Blender.\n  <a href=\"https://i.sstatic.net/PiANI.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/PiANI.png\"/>\n  </a>\n </p>\n <p>\n  You can access the code I wrote to generate that on\n  <a href=\"https://github.com/booto/convert_dts\" rel=\"noreferrer\">\n   github\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "booto",
            "time": "Dec 17, 2015 at 7:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user45623",
                    "text": "<span class=\"comment-copy\">And here I had given up on ever getting a reply. You sir, win all of the internets. I wish I could give you more upvotes than this. I can't wait to give your script a whirl.  I had considered trying to go into the EXE with a debugger, but I've never attempted that before and didn't even know where to start.</span>",
                    "time": null
                },
                {
                    "user": "user45623",
                    "text": "<span class=\"comment-copy\">I assume you were looking at DBSIM.exe? If you can easily explain how to do what you did, I'd certainly appreciate it, but if it's the kind of thing that's a huge hassle to explain to someone unfamiliar with IDA or disassemblers in general, no worries. Thanks either way!</span>",
                    "time": null
                },
                {
                    "user": "user45623",
                    "text": "<span class=\"comment-copy\">Could you specify what version of Python and lib3ds? I'm guessing Python 2.x from the lack of parens in your print statements?</span>",
                    "time": null
                },
                {
                    "user": "booto",
                    "text": "<span class=\"comment-copy\">Python 2.7 from the looks of things.</span>",
                    "time": null
                },
                {
                    "user": "booto",
                    "text": "<span class=\"comment-copy\">Indeed, it was \"dbsim.exe\". Starting at 0x00405F09 (via that magic number) and tracing from there. You'll find that 0xc bytes before the start of a vtable is a pointer to a struct that contains meta data about the class (it might be whatever borland's c++ stuff uses for rtti?) Lib3ds version seems to be 1.3.0? I just installed whatever version debian had packaged up.</span>",
                    "time": null
                }
            ]
        }
    ]
}