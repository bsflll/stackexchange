{
    "title": "How to read from pointer in python?",
    "link": "https://reverseengineering.stackexchange.com/questions/32672/how-to-read-from-pointer-in-python",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using cheat engine to find a multipointer that leads to an address that has value of list of entities. I found said multipointer, but I have no clue how to read it using python.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "131",
    "tags": [
        "python",
        "cheat-engine"
    ],
    "user": "user18735750",
    "time": "Jan 27, 2024 at 14:50",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Which OS do you use?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user18735750",
            "text": "<html><body><span class=\"comment-copy\">\n I use Windows 10.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here's an example on how to read from a process, on Windows, using the Windows API and\n  <a href=\"https://docs.python.org/3/library/ctypes.html\" rel=\"nofollow noreferrer\">\n   <code>\n    ctypes\n   </code>\n  </a>\n  . Doesn't require external packages / modules.\n </p>\n <p>\n  Error and argument handling is minimal.\n </p>\n <p>\n  Basically:\n </p>\n <ul>\n  <li>\n   <p>\n    Open the process using\n    <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess\" rel=\"nofollow noreferrer\">\n     <code>\n      OpenProcess\n     </code>\n    </a>\n    for address space read. This only requires the process PID.\n   </p>\n  </li>\n  <li>\n   <p>\n    Read a whole page from the process, using\n    <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory\" rel=\"nofollow noreferrer\">\n     <code>\n      ReadProcessMemory\n     </code>\n    </a>\n    . You'll need to offset in the returned buffer if you want something within the page.\n   </p>\n  </li>\n  <li>\n   <p>\n    Demonstrate how to \"cast\" from\n    <code>\n     bytes\n    </code>\n    to, in this instance,\n    <code>\n     DWORD\n    </code>\n    . You can of course use another\n    <code>\n     ctypes\n    </code>\n    numerous types instead of\n    <code>\n     DWORD\n    </code>\n    (which is defined as\n    <code>\n     ctypes.c_uint32\n    </code>\n    iirc).\n   </p>\n  </li>\n </ul>\n <pre class=\"lang-py prettyprint-override\"><code>#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\nimport ctypes\nimport ctypes.wintypes as wt\n\n# Windows API\n\n\nkernel32 = ctypes.WinDLL('kernel32', use_last_error=True)\n\nOpenProcess = kernel32.OpenProcess\nOpenProcess.restype = wt.HANDLE\nOpenProcess.argtypes = (\n    wt.DWORD,  # DWORD dwAccess\n    wt.BOOL,  # BOOL bInheritHandle\n    wt.DWORD,  # DWORD ProcessId\n)\n\nReadProcessMemory = kernel32.ReadProcessMemory\nReadProcessMemory.restype = wt.BOOL\nReadProcessMemory.argtypes = (\n    ctypes.c_void_p,  # HANDLE hProcess\n    ctypes.c_void_p,  # LPCVOID lpBaseAddress\n    ctypes.c_void_p,  # LPVOID  lpBuffer\n    ctypes.c_size_t,  # SIZE_T  nSize\n    ctypes.POINTER(ctypes.c_size_t)  # SIZE_T  *lpNumberOfBytesRead\n)\n\nCloseHandle = kernel32.CloseHandle\nCloseHandle.restype = wt.BOOL\nCloseHandle.argtypes = (wt.HANDLE,)\n\n\ndef read_from_process(base_addr: int, pid: int) -> bytes:\n    \"\"\"Read a whole page from the given process.\n\n    Args:\n        base_addr: The base address to read from. This address is always rounded down to a 4KB page boundary.\n        pid: the pid of the process.\n\n    Raises:\n        OsError: either the process couldn't be opened or there was an error reading from the process.\n\n    Returns:\n        The content of the page read from the process as a bytes instance.\n    \"\"\"\n    # size of a page, in bytes.\n    page_size = 4096\n\n    # base of the page.\n    base_addr &= 0xfffffffffffff000\n\n    # open the process for address space reading.\n    h_proc = OpenProcess(0x8 | 0x10,  # PROCESS_VM_OPERATION | PROCESS_VM_READ\n                         False,\n                         pid)\n    if h_proc == 0:\n        # couldn't open the process; either wrong pid or not enough rights to open it.\n        raise ctypes.WinError()\n\n    # read from the process.\n    buffer = ctypes.create_string_buffer(b'', page_size)\n    nobr = ctypes.c_size_t(0)\n    ret_val = ReadProcessMemory(h_proc, base_addr, buffer, page_size, ctypes.byref(nobr))\n    if ret_val == 0:\n        CloseHandle(h_proc)\n        raise ctypes.WinError()\n\n    CloseHandle(h_proc)\n    return buffer.raw\n\n\ndef main():\n    pid = 9708\n    base_addr = 0x7ff6947c0000\n\n    buffer = read_from_process(base_addr, pid)\n\n    # example how to read 2 DWORDs (unsigned 32-bit) from the bytes buffer.\n    dword_buffer = (wt.DWORD * 2).from_buffer_copy(buffer)\n\n    # print some bytes from the bytes instance.\n    print(buffer[0:8])\n\n    # print DWORDs.\n    print(f\"{dword_buffer[0]:08x}\")\n    print(f\"{dword_buffer[1]:08x}\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n <p>\n  Test on the base of a PE module:\n </p>\n <pre class=\"lang-none prettyprint-override\"><code>b'MZ\\x90\\x00\\x03\\x00\\x00\\x00'\n00905a4d\n00000003\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Neitsa",
            "time": "Jan 29, 2024 at 23:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}