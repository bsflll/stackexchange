{
    "title": "Reverse engineering USB peripheral driver",
    "link": "https://reverseengineering.stackexchange.com/questions/16576/reverse-engineering-usb-peripheral-driver",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm looking to reverse engineer a Windows driver for a printer I have here. I found out a bit about USB sniffing but I don't think Snoopy runs on Windows 7. I know the driver is on my computer somewhere but it's location is not obvious.  Can someone outline the steps I will need to take to accomplish this? I've never done this before üòê. There's a lot on the web but it is a bit confusing as to which direction to go. I'm using python 3\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 3,
    "views": "7k",
    "tags": [
        "windows",
        "python",
        "serial-communication",
        "driver",
        "usb"
    ],
    "user": "Jasong",
    "time": "Oct 18, 2017 at 22:27",
    "comments": [
        {
            "user": "Spektre",
            "text": "<html><body><span class=\"comment-copy\">\n see\n <a href=\"https://reverseengineering.stackexchange.com/a/16399/4709\">\n  Need help with a USB gaming mouse\n </a>\n for some ideas first you need to log the USB protocol (there are some SW tools for that out there) than you need to write your own driver that will match the printer (possibly CDC class) and then provide functionality at Windows side. Try JUNGO or WinUSB IIRC those should provide all you need without actually tapping into kernel mode coding otherwise you would need to write the driver in MSVC++ with DDK or how they named it these days. Beware from win7 x64 there is forced driver signing\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, your question is a bit broad as it stands, but let's take it one by one. Typically (but not always) drivers for printers these days are user mode drivers (UMDF), which means you're looking for a DLL. If that were not the case you'd be looking for a .sys file of some kind.\n </p>\n <p>\n  Microsoft has come up with a number of \"simplified\" driver models over the years. Some of those run in user mode, some in kernel mode. Provided this is a modern device and the vendor has updated everything, they'll be using the user mode driver.\n </p>\n <p>\n  In order to get you started you need to first figure out the driver responsible for your printer. Assuming you are indeed dealing with a USB printer, you should see it with\n  <a href=\"http://www.nirsoft.net/utils/usb_devices_view.html\" rel=\"nofollow noreferrer\">\n   USBDeView\n  </a>\n  which also helps you identify the driver name. Alternatively try the more generic\n  <a href=\"http://www.nirsoft.net/utils/device_manager_view.html\" rel=\"nofollow noreferrer\">\n   DevManView\n  </a>\n  .\n </p>\n <p>\n  Failing all that you can look at the printer properties and use the\n  <em>\n   Sharing\n  </em>\n  tab, provided you're on a recent version of Windows. There you can see the\n  <em>\n   type\n  </em>\n  of your installed driver, at least. Example for one of my printers:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/dW6SV.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Additional Drivers dialog\" src=\"https://i.sstatic.net/dW6SV.png\"/>\n  </a>\n </p>\n <p>\n  Equipped with that information we can then look into the folder\n  <code>\n   C:\\Windows\\System32\\spool\\drivers\n  </code>\n  (\n  <code>\n   %SystemRoot%\\System32\\spool\\drivers\n  </code>\n  ) and find the actual driver (also check the\n  <code>\n   prtprocs\n  </code>\n  subfolder instead of\n  <code>\n   drivers\n  </code>\n  ).\n </p>\n <p>\n  Furthermore you could peek into\n  <code>\n   HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\n  </code>\n  using the Registry Editor built into Windows in order to find details about your driver. Specifically within the subkey corresponding to the printer in question you should find a value named\n  <code>\n   Print Processor\n  </code>\n  (type string) which contains the name of the print processor. In my case that's\n  <code>\n   ssa7mPC\n  </code>\n  and this in turn can be tracked down to the DLL\n  <code>\n   C:\\Windows\\System32\\spool\\prtprocs\\x64\\ssa7mpc.dll\n  </code>\n  .\n </p>\n <p>\n  From that point on it's not at all clear from your question what you want to achieve. I.e. do you want to intercept something or do you want to reverse engineer the\n  <em>\n   wire\n  </em>\n  protocol or do you only care about being able to\n  <em>\n   talk\n  </em>\n  to the printer and so on ... (so until you clarify, I cannot provide more details either).\n </p>\n <p>\n  Since you also give no information about the printer model, it's hard to provide any meaningful detail beyond what I just gave.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Aug 15, 2018 at 16:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am more familiar with linux but some steps are similar. To find where is your driver, I believe that if you plug your device and go in the Device Manager, click right on the device then properties, you can find the path to the driver.\nTo reverse engineer the protocol, you can use a combination of driver disassembly (using radare, IDA or other tools) and USB sniffing/capturing. I usually find it easier to capture USB traffic when running a virtual machine. Wireshark can do it on Linux and apparently on Windows too, see\n  <a href=\"https://wiki.wireshark.org/CaptureSetup/USB\" rel=\"nofollow noreferrer\">\n   this page\n  </a>\n  .\nIt will help tremendously if your device uses a known protocol like serial or SCSI over USB, otherwise you will really have to learn about USB,\n  <a href=\"http://www.beyondlogic.org/usbnutshell/usb1.shtml\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  is a good start.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Amaury Pouly",
            "time": "Oct 19, 2017 at 8:18",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Answers to\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2416/\">\n   this question\n  </a>\n  deal with generic reversing of USB devices, but if you want to start from the driver files, find the printer in Device Manager, go to properties, then Driver tab-Driver details... to see the driver files. MSDN topics on\n  <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/print/printer-driver-architecture\" rel=\"nofollow noreferrer\">\n   printer driver development\n  </a>\n  or\n  <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/samples/print-driver-samples\" rel=\"nofollow noreferrer\">\n   WDK samples\n  </a>\n  may be useful too.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 19, 2017 at 8:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}