{
    "title": "IDA pro and unrolled loops",
    "link": "https://reverseengineering.stackexchange.com/questions/8252/ida-pro-and-unrolled-loops",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is there a trick in IDA Pro to deal with unrolled loops like in the screenshot below?\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/kTBj6.jpg\"/>\n </p>\n <p>\n  Another, possibly related compiler optimisation is this - instead of loading an offset into a memory area, it does mov for each character (MSVC8). Any quick way to deal with these?\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/1ZIxV.jpg\"/>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "compilers"
    ],
    "user": "Konrads",
    "time": "Feb 16, 2015 at 12:13",
    "comments": [
        {
            "user": "RoraΖ",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure what you mean by \"deal with\", but I believe there is a way to combine blocks into a single relabeled one.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "<html><body><span class=\"comment-copy\">\n The 'optimisation' is an obfuscation trick, to ensure that the strings in question do not show up in the binary. To find stuff like this requires emulation, either with a homebrewed script or something like the\n <a href=\"http://www.idabook.com/x86emu/\" rel=\"nofollow noreferrer\">\n  x86emu\n </a>\n plugin.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Konrads",
            "text": "<html><body><span class=\"comment-copy\">\n @DarthGizka not convinced this was done on purpose although it is plausible. There are optimisations like if you had previously resolved InternetOpenA and now want to resolve InternetCrackUrlA, they'd copy only the CrackURLA part. Seems like compiler optimisation got its way.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user45891",
            "text": "<html><body><span class=\"comment-copy\">\n @Konrads it's also sometimes used to build PIC. Normally the strings would end up in .rdata but this way (\n <code>\n  const char szName[] = {'a', 'b', 'c', 0};\n </code>\n ) it doesn't\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a topic regarding the 2nd question, see\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2977/how-can-i-clean-up-strings-built-at-runtime\">\n   How can I clean up strings built at runtime?\n  </a>\n  . Personally I use the script by ASERT script, it works pretty well.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">The ASERT script doesn't really work if you have statements like this: mov     [rsp+138h+var_118], 'k' where this is the first in the sequence :(</span>",
                    "time": null
                },
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">I also now realise there are 2 questions in 1.</span>",
                    "time": null
                },
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">The scripts that work with x64 are from FireEye/FLARE: <a href=\"https://www.fireeye.com/blog/threat-research/2014/08/flare-ida-pro-script-series-automatic-recovery-of-constructed-strings-in-malware.html\" rel=\"nofollow noreferrer\">fireeye.com/blog/threat-research/2014/08/…</a></span>",
                    "time": null
                }
            ]
        }
    ]
}