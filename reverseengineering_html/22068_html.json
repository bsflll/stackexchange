{
    "title": "Lack of arguments before a CALL instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/22068/lack-of-arguments-before-a-call-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing an open-source windows application written in C++. I found in the disassembler the desired function that I'm trying to understand its behavior.\n </p>\n <p>\n  In the code this function is defined as follow:\n </p>\n <pre><code>void ProtocolGame::sendUseItem(const Position& position, int itemId, int stackpos, int index)\n{\n    OutputMessagePtr msg(new OutputMessage);\n    msg->addU8(Proto::ClientUseItem);\n    addPosition(msg, position);\n    msg->addU16(itemId);\n    msg->addU8(stackpos);\n    msg->addU8(index);\n    send(msg);\n}\n</code></pre>\n <p>\n  As you can see, this function has 4 parameters, but in assembly code it only pushes 2 args. See picture below.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/CJBey.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/CJBey.png\"/>\n  </a>\n </p>\n <p>\n  What is going on with this CALL procedure? Shouldn't it have 4 arguments?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "169",
    "tags": [
        "calling-conventions",
        "arguments"
    ],
    "user": "SÃ¡vio Brilhante",
    "time": "Sep 6, 2019 at 19:47",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n Your snippet is too small to show that earlier the Arg3 and Arg4 might have already been pushed to the stack.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n Paste the assembly in text form not as a picture.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n look at ollydbg comment pane the black bracket will show you where each arg is pushed the one before arg2 will be arg 3 scroll up and down t\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Pickle Rick",
            "text": "<html><body><span class=\"comment-copy\">\n Not enough information to give a proper answer, as others have said. My guess though would be that it's a __fastcall where ecx and edx are the first two parameters. Post the full assembly of the caller / callee and you will get a more reliable answer.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Karcher",
            "text": "<html><body><span class=\"comment-copy\">\n @Pickle Rick (sorry for necroing - feel free to ignore) I don't think this is going to be\n <code>\n  __fastcall\n </code>\n . It will more likely be\n <code>\n  __thiscall\n </code>\n instead, so\n <code>\n  ecx\n </code>\n does contain a parameter, but it will be the hidden\n <code>\n  this\n </code>\n pointer, and not one of the four named argument. I agree that more context is needed to be sure, though.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Seems like it has 4 arguments, and they are passed through stack, yet the more lines of disassembly above E42D6A needed to make sure. Are those mov and lea instruction confusing you? If you've expected to have 4 push instruction in a row, then let me disappoint you: compiler can insert as many instructions as it likes between the push instructions. And let let me disappoint you again: push instruction is not the only way compiler can pass the arguments through stack.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Sep 16, 2019 at 8:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}