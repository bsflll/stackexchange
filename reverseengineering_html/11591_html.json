{
    "title": "Demangle c++ functions in radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/11591/demangle-c-functions-in-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning radare2. Is there a way to demangle c++ functions during disassembling? For example in gdb\n </p>\n <pre><code>set print asm-demangle\n</code></pre>\n <p>\n  changes\n </p>\n <pre><code>callq 0x400a30 <_ZNSo3putEc@plt>\n</code></pre>\n <p>\n  to\n </p>\n <pre><code>callq 0x400a30 <_std::ostream::put(char)@plt>\n</code></pre>\n <p>\n  edit:\nI had radare2 0.9.6 which comes with Ubuntu's synaptic package manager. I reinstalled it from\n  <a href=\"https://github.com/radare/radare2\" rel=\"nofollow\">\n   https://github.com/radare/radare2\n  </a>\n  . Now I see the\n  <code>\n   asm.demangle\n  </code>\n  variable after entering\n  <code>\n   Ve\n  </code>\n  , it is set to true, but names are still mangled.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "radare2"
    ],
    "user": "robert",
    "time": "Dec 19, 2015 at 10:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Check\n  <code>\n   e asm.demangle\n  </code>\n  , and set it to true or false as required.\n </p>\n <p>\n  Is the radare2 version you are using the latest one?\n </p>\n <p>\n  You should be able to view all the configuration data with\n  <code>\n   e\n  </code>\n  .\n </p>\n <p>\n  Typing\n  <code>\n   e??\n  </code>\n  should show you a complete list of configuration variables with their description. You can grep through the output for all the vars that have the pattern\n  <em>\n   demangle\n  </em>\n  with\n </p>\n <pre>\n[0x00001d52]> e??~demangle\n        asm.demangle: Show demangled symbols in disasm\n        bin.demangle: Import demangled symbols from RBin\n            bin.lang: Language for bin.demangle\n[0x00001d52]>\n</pre>\n <p>\n  Radare2 needs to be told to load the demangle informations at startup, so you can set\n  <code>\n   bin.demangle\n  </code>\n  to\n  <code>\n   true\n  </code>\n  , and reopen the file:\n </p>\n <pre><code> e bin.demangle = true\n oo \n</code></pre>\n <p>\n  Last but not least, you can provide a symbol name in its mangled form on a case by case basis, using the command\n  <code>\n   iD\n  </code>\n  :\n </p>\n <pre><code>[0x7c810705]> iD cxx _ZNSo3putEc\nstd::ostream::put\n[0x7c810705]>\n</code></pre>\n <p>\n  By the way, a tip instead of asking a question here and waiting forever:\nradare2 is self documented, so you can begin by typing\n  <code>\n   ?\n  </code>\n  to get help, and then append\n  <code>\n   ?\n  </code>\n  to each command, like\n  <code>\n   a?\n  </code>\n  , or\n  <code>\n   pd?\n  </code>\n  and so onâ€¦\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "jvoisin",
            "time": "Dec 20, 2015 at 13:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">Sorry, but how? If I enter <code>e asm.demangle=true</code>, I get: variable 'asm.demangle' not found</span>",
                    "time": null
                }
            ]
        }
    ]
}