{
    "title": "Inject a MessageBox to the PE file",
    "link": "https://reverseengineering.stackexchange.com/questions/32142/inject-a-messagebox-to-the-pe-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to patch some\n  <code>\n   Windows PE\n  </code>\n  file to show just simple\n  <code>\n   MessageBox\n  </code>\n  . Taking into account that the\n  <code>\n   PE\n  </code>\n  in question doesn't import the\n  <code>\n   MessageBoxA\n  </code>\n  function if I'm right that all i need to do is to add the\n  <code>\n   user32.dll\n  </code>\n  to the\n  <code>\n   Imports Section\n  </code>\n  with\n  <code>\n   MessageBoxA\n  </code>\n  function. And then just patch the code (using\n  <code>\n   IDA\n  </code>\n  or\n  <code>\n   OllyDbg\n  </code>\n  or sth. similar) adding a\n  <code>\n   call\n  </code>\n  instruction to the address of the newly added\n  <code>\n   MessageBoxA\n  </code>\n  function from\n  <code>\n   Imports\n  </code>\n  ? If I'm right that after adding a new entry to the\n  <code>\n   Imports\n  </code>\n  the\n  <code>\n   Windows Loader\n  </code>\n  automatically map the\n  <code>\n   MessageBoxA\n  </code>\n  function physical address to the virtual PE address space making the PE possible to call the needed function?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "161",
    "tags": [
        "windows",
        "pe",
        "patching"
    ],
    "user": "Daros911",
    "time": "Aug 7, 2023 at 11:49",
    "comments": [
        {
            "user": "y_v",
            "text": "<html><body><span class=\"comment-copy\">\n I believe LIEF will help you with patching. Check this documentation:\n <a href=\"https://lief-project.github.io/doc/latest/tutorials/02_pe_from_scratch.html\" rel=\"nofollow noreferrer\">\n  lief-project.github.io/doc/latest/tutorials/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Well you're right about your import manipulation, yes. But a mere\n <code>\n  call\n </code>\n won't help you. Depending on what the target is -- OllyDbg makes me assume x86 or x64, though -- you need to be aware of the calling convention(s) and pass the arguments in registers or on the stack accordingly. So it'd be some\n <code>\n  mov\n </code>\n or\n <code>\n  push\n </code>\n before the\n <code>\n  call\n </code>\n , too.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}