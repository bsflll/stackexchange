{
    "title": "Executable code in the same location differs in memory and on disk",
    "link": "https://reverseengineering.stackexchange.com/questions/23134/executable-code-in-the-same-location-differs-in-memory-and-on-disk",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to inject code to change the byte value of a CMP in an executable from 0 to 2 at runtime, in order to effectively no-op a boolean comparison as part of an effort to insert my own behavior. I have the offset of that single 0x00 byte in the file, as well as what I had thought was its virtual address - the file offset + the image base + the virtual address of the .text section.\n </p>\n <p>\n  However, I was surprised by the fact that when I looked at this virtual address at runtime, I was in a completely different place in the code, in the middle of a bunch of 0xCC bytes.\n </p>\n <p>\n  Looking at it more, I found out that in general my presumed virtual addresses are inconsistent. For example, here's a few opcodes at virtual address 0x00ebf5e0 (offset + imagebase + .text virtualaddr) as displayed by Ghidra:\n </p>\n <pre><code>55                push ebp\n8B EC             mov  ebp, esp\n83 EC 1C          sub  esp, 0x1c\nA1 90 74 43 01    mov  eax, dword ptr [0x1437490]\n33 C5             xor  eax, ebp\n89 45 FC          mov  dword ptr [ebp - 4], eax\n</code></pre>\n <p>\n  And here is a few opcodes dumped in memory, by directly reading from the same address (\n  <code>\n   (unsigned int8_t*)0x00ebf5e0\n  </code>\n  ):\n </p>\n <pre><code>8B 01             mov  eax, dword ptr [ecx]\n89 45 F8          mov  dword ptr [ebp - 8], eax\n89 5D E4          mov  dword ptr [ebp - 0x1c], ebx\n83 FB 10          cmp  ebx, 0x10\n72 04             jb   0x11\n8B 3E             mov  edi, dword ptr [esi]\nEB 02             jmp  0x13\n8B FE             mov  edi, esi\n</code></pre>\n <p>\n  I've tried pretty much anything I could - directly addressing, obtaining the image base pointer through psapi.h\n  <code>\n   GetModuleInformation\n  </code>\n  (which unsurprisingly turned out to be equal to\n  <code>\n   0x400000\n  </code>\n  ), including and not including the\n  <code>\n   0x1000\n  </code>\n  (\n  <code>\n   .text\n  </code>\n  vaddr), etc. The only interesting result this has brought is that at the very start of the image base, the bytes and opcodes do in fact check out - which has me thinking that this issue has something to do with alignment.\n </p>\n <p>\n  Note: As per dumpbin, the executable has relocations stripped. It is also 32 bit.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "114",
    "tags": [
        "disassembly",
        "windows",
        "memory",
        "patching",
        "injection"
    ],
    "user": "Zatherz",
    "time": "Jan 28, 2020 at 13:12",
    "comments": [
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n Have you tried to directly search for the bytes that you expect to find at\n <code>\n  0x00ebf5e0\n </code>\n in memory?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Zatherz",
            "text": "<html><body><span class=\"comment-copy\">\n @macr0controller I was suggested this. I would really prefer not to have to scan it like that since the executable is pretty big. If I have to do signatures I'll do them, but even out of sheer curiosity I still would love to know what's going on here. (to answer your question directly, no, I did not)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n I suggest it because if you find it, it could share some light on your issue, which eventually could lead to the root cause.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Zatherz",
            "text": "<html><body><span class=\"comment-copy\">\n @macr0controller I tried it - I can't even find the exact same opcode in the executable in memory. I have no idea what's going on in here; the addresses are apparently relocated for some reason but the CMP should be unchanged, right? This whole thing has me so confused. I even dumped the entire image from memory and analyzed it in Ghidra and nothing makes sense. Also, would you happen to know any other place where I could ask other knowledgeable people about this?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I started from scratch, used OllyDbg to find the opcodes as they are in memory and then wrote my heuristics for finding certain opcodes of interest also operate on the image in memory. There were some weird differences such as a certain MOV operating on EBP as opposed to ESI on disk (which I now think is related to thread-local storage, since apparently the Windows linker does rewrite things?), but I managed to get it work.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Zatherz",
            "time": "Jan 30, 2020 at 11:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}