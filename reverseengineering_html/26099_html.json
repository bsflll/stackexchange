{
    "title": "how to get all \"called functions\" in idapython",
    "link": "https://reverseengineering.stackexchange.com/questions/26099/how-to-get-all-called-functions-in-idapython",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using following function to generate a call graph using idapython:\n </p>\n <pre><code>def generate_graph():\n    callees = dict()\n    # loop through all functions\n    for function_ea in idautils.Functions():\n        f_name = idc.get_func_name(function_ea)\n        # For each of the incoming references\n        for ref_ea in idautils.CodeRefsTo(function_ea, 0):\n            # Get the name of the referring function\n            caller_name = idc.get_func_name(ref_ea)\n            # Add the current function to the list of functions\n            # called by the referring function\n            callees[str(caller_name)] = callees.get(str(caller_name), set())\n            callees[str(caller_name)].add(str(f_name))\n    return callees\n\nfunction_graph = generate_graph()\nprint(function_graph)\n</code></pre>\n <p>\n  This gives me a dictionary with function names as a key and functions called by that function as a value.\n </p>\n <p>\n  For e.g. if \"main\" calls \"foo\" and \"func\", then the dictionary will be:\n </p>\n <p>\n  <code>\n   main:{\"foo\", \"func\"}\n  </code>\n </p>\n <p>\n  This is working correctly if function is called directly. But in the case like:\n </p>\n <pre><code>void function1(char * buf)\n{\n  /*  BAD  */\n  buf[4105] = 'A';\n}\n\nint main(int argc, char *argv[])\n{\n  void (*fptr)(char *);\n  char buf[10];\n\n  fptr = function1;\n\n  fptr(buf);\n\n\n  return 0;\n}\n</code></pre>\n <p>\n  As the function gets called through a register, like:\n </p>\n <p>\n  <code>\n   401140: call   rdx\n  </code>\n </p>\n <p>\n  Is there any way I can modify above script (or create a new) to detect such cases?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "R4444",
    "time": "Oct 11, 2020 at 14:31",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n This is a notoriously difficult problem in binary analysis: determining where an indirect call goes. The short answer to your question is \"no\". Not just in IDA, but any reverse engineering tool in general, will usually not be able to provide you with information about indirect calls. The only exception will be in cases where the data flow between the assignment to the function pointer, and the call site itself, is simple enough where it can be tracked. If the data flow starts to involve multiple functions, or has memory accesses in between, today's tools aren't going to do it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "R4444",
            "text": "<html><body><span class=\"comment-copy\">\n thanks for your comment. I asked this question because I can see the function is being detected in the gui mode (i.e. in the above case). I am aware that this problem is hard. But in above case, I was able to detect the function call by iterating over function items like -\n <code>\n  for h in idautils.FuncItems(function_ea)\n </code>\n and then searching through the xrefs like -\n <code>\n  for r in idautils.XrefsFrom(h, 0):\n </code>\n <code>\n  caller_name = idc.get_func_name(r.to)\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Do you want to know \"the fact that indirect calls are being made\", or \"which functions might be targeted by an indirect call\"? In the former case, just iterate through the instructions in the function and look for indirect call instructions -- that is, call instructions that don't have a fixed destination. For the latter case, that's the thing I was describing as being hard.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "R4444",
            "text": "<html><body><span class=\"comment-copy\">\n got it. thanks Rolf\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}