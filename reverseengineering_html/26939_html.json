{
    "title": "How to find encrypted strings in an executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/26939/how-to-find-encrypted-strings-in-an-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer an executable.\n </p>\n <p>\n  I am using\n  <strong>\n   Process explorer\n  </strong>\n  to dump all strings present in the exe image, and from the process's RAM when it is running.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/N8NdB.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"process explorer string dump\" src=\"https://i.sstatic.net/N8NdB.png\"/>\n  </a>\n </p>\n <p>\n  The two dumps return a different number of strings, with the latter (from RAM) returning a much greater number of them.\nThis discrepancy could mean one of the following.\n </p>\n <ol>\n  <li>\n   <strong>\n    Executable is encrypted (a packer is used?)\n   </strong>\n  </li>\n  <li>\n   <strong>\n    Executable is compressed\n   </strong>\n  </li>\n  <li>\n   <strong>\n    Strings are encrypted/obfuscated\n   </strong>\n  </li>\n  <li>\n   <strong>\n    Strings are coming from a DLL loaded by the process, or a file opened by it.\n   </strong>\n  </li>\n </ol>\n <p>\n  I used various tools to rule out 1, and 2. These tools check file entropy and do other statistical checks to figure this out.\n </p>\n <p>\n  Some of the tools I used:\n </p>\n <ol>\n  <li>\n   Check which packer is being used:\n   <a href=\"https://www.aldeid.com/wiki/PEiD\" rel=\"nofollow noreferrer\">\n    https://www.aldeid.com/wiki/PEiD\n   </a>\n  </li>\n  <li>\n   Statistical analysis for enccryption/compression -\n   <code>\n    binwalk -EJ <exe-name>\n   </code>\n   ,\n   <a href=\"https://github.com/kiathan/Encryption-Detector\" rel=\"nofollow noreferrer\">\n    https://github.com/kiathan/Encryption-Detector\n   </a>\n  </li>\n </ol>\n <p>\n  To rule out 4 I used process explorer to check each open file handle and loaded DLL. Found nothing suspicious.\n </p>\n <p>\n  <strong>\n   For 3, I proceeded as follows.\n  </strong>\n </p>\n <p>\n  I attached process to WinDbg, and tried to search for a string from RAM string dump obtained from process explorer.\n  \n\n  eg. searching for string \"--control\".\n </p>\n <p>\n  <code>\n   s -a 0 L?80000000 \"--control\"\n  </code>\n </p>\n <p>\n  This string was present at location\n  <code>\n   014ebbf5\n  </code>\n  .\nTo figure out what kind of memory this address is present in, I used WinDbg's\n  <code>\n   !address\n  </code>\n  command.\n </p>\n <p>\n  Here is the output I got.\n </p>\n <pre><code>\nUsage:                  Image\nBase Address:           01165000\nEnd Address:            01560000\nRegion Size:            003fb000 (   3.980 MB)\nState:                  00001000          MEM_COMMIT\nProtect:                00000002          PAGE_READONLY\nType:                   01000000          MEM_IMAGE\nAllocation Base:        00c70000\nAllocation Protect:     00000080          PAGE_EXECUTE_WRITECOPY\nImage Path:             C:\\Program Files (x86)\\<exe-path>.exe\nModule Name:            <exe-name>\nLoaded Image Name:      C:\\Program Files (x86)\\<exe-path>.exe\nMapped Image Name:      \nMore info:              lmv m <exe-name>\nMore info:              !lmi <exe-name>\nMore info:              ln 0x14ecbf5\nMore info:              !dh 0xc70000\n\n\nContent source: 1 (target), length: 7340b\n</code></pre>\n <p>\n  I was expecting this to be an address from\n  <code>\n   stack\n  </code>\n  or from\n  <code>\n   heap\n  </code>\n  , but it is instead from the process's\n  <code>\n   READ ONLY\n  </code>\n  area where memory-mapped file of the executable is present. A read only area cannot store decoded string since you would have to read encoded strings, decode it, and then write them somewhere.\n </p>\n <p>\n  At this point I feel that neither the exe is encrypted, nor compressed, and neither the strings are encoded/encrypted. Still, somehow a lot of strings are not present in the exe, but present in the RAM.\nHow can this be possible?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "encryption",
        "windbg",
        "encodings",
        "strings"
    ],
    "user": "Sahil Singh",
    "time": "Feb 4, 2021 at 10:00",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Run strings.exe anydesk.exe > foo.txt to find the visible strings belonging to a executable  or find the module basevand size and provide that as range not 0 to 80000000\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sahil Singh",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb I have already tried that, and that is the point of contention. strings command doesn't give me enough strings.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n If you have a string you have an address if you have an address you have a raw byte which is either transformed or a clean slate where it is wriiten to so you alwAys have the option of breaking on read access , write access, memory access , use hardware breakpoints and look and your assumptions that read onlyarea  cant a be written is  not correct you can use virtual protect to even execute from there\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sahil Singh",
            "text": "<html><body><span class=\"comment-copy\">\n It turns out that strings are constructed on the fly. At that time the memory is PAGE_EXECUTE_READWRITE. Later the permission is changed to read-only.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  During my analysis I use\n  <a href=\"https://github.com/fireeye/flare-floss\" rel=\"nofollow noreferrer\">\n   Floss\n  </a>\n  !, it is an excellent tool and super simple to use, on several occasions I can find the strings I am looking for, you used PEID to check for packers please use a more up-to-date tool like DIE (Detect it Easy), if it is an .EXE file consider analyzing with a professional and updated debbuger like x96DBG(x64dbg/x32dbg), I believe you get better results that way.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Happy",
            "time": "Feb 4, 2021 at 19:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sahil Singh",
                    "text": "<span class=\"comment-copy\">I had used Floss earlier without success, and also DIE. Thanks a lot for suggesting x64dbg/x32dbg. They are amazing.</span>",
                    "time": null
                }
            ]
        }
    ]
}