{
    "title": "Windows - syscalls being called in a strange way?",
    "link": "https://reverseengineering.stackexchange.com/questions/24758/windows-syscalls-being-called-in-a-strange-way",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been reading about the way syscalls are called in windows.\n  \n\n  The general theme in all the articles I read is:\n  \n\n  64bit- called inside ntdll\n  \n\n  32bit- from ntdll jumping to KiFastSystemcall\n  \n\n  but when I opened IDA with ntdlls from both 64 and 32 bit to verify these articles this is what I saw:\n  \n\n  (32bit)\n </p>\n <pre><code>NtCreateFile proc near\nmov     eax, 55h        ; syscall num\nmov     edx, offset j_Wow64Transition\ncall    edx ; weird stub is called instead of KiFastSystemcall.\n            ; I couldn't find anything about it.perhaps a wrapper around KiFastSystemcall?\n\nretn    2Ch\nNtCreateFile endp\n</code></pre>\n <p>\n  (64bit)\n </p>\n <pre><code>NtCreateFile proc near\nmov     r10, rcx        ; NtCreateFile\nmov     eax, 55h\ntest    byte ptr ds:7FFE0308h, 1 ; some test to decide wether to use int 0x2E or syscall?\n                                 ; I don't know why int 0x2E be used. I thought it causes overhead?\njnz     short loc_18009CB15\nsyscall                 \nretn\nloc_18009CB15:          \nint     2Eh             \nretn\nNtCreateFile endp\n</code></pre>\n <p>\n  if anyone knows why the system calls are called like this I would love to know.\n  \n\n  to summarize:\n  \n\n  (32 bit) why is j_Wow64Transition there instead of KiFastSystemcall?\n  \n\n  (64 bit) what is being compared and why?\n  \n\n  thanks.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "931",
    "tags": [
        "ida",
        "windows",
        "kernel-mode",
        "kernel",
        "system-call"
    ],
    "user": "Alal Benben",
    "time": "Apr 19, 2020 at 10:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Following cites, answering your first question come from\n  <em>\n   Windows Internals Sixth Edition Part 1\n  </em>\n  , page 225:\n </p>\n <blockquote>\n  <p>\n   Wow64 (Win32 emulation on 64-bit Windows) refers to the software that permits the execution\n  of 32-bit x86 applications on 64-bit Windows. It is implemented as a set of user-mode DLLs, with\n  some support from the kernel for creating 32-bit versions of what would normally only be 64-bit\n  data Â­structures [...]\n  </p>\n  <p>\n   Wow64 hooks all the code paths where 32-bit code would transition to the native 64-bit system\n  or when the native system needs to call into 32-bit user-mode code.\n  </p>\n  <p>\n   Wow64 transitions\n  to native 64-bit mode, captures the parameters associated with the system call (converting 32-bit\n  pointers to 64-bit pointers), and issues the corresponding native 64-bit system call. When the native\n  system call returns, Wow64 converts any output parameters if necessary from 64-bit to 32-bit formats\n  before returning to 32-bit mode.\n  </p>\n </blockquote>\n <p>\n  So, when you run some\n  <code>\n   32\n  </code>\n  bit\n  <code>\n   x86\n  </code>\n  program on\n  <code>\n   64\n  </code>\n  bit Windows, such transitions may occur to enable this application to make a native system call.\n </p>\n <p>\n  Answer to your second question is already\n  <a href=\"https://reverseengineering.stackexchange.com/questions/19333/what-are-the-difference-syscall-and-int-0x2e-instructions\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "bart1e",
            "time": "Apr 19, 2020 at 13:57",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would add information to the first answer.\n </p>\n <p>\n  The switch of the mode from Wow64 to 64bit, aka \"Heaven's Gate\", is in\n  <code>\n   wow64cpu.dll\n  </code>\n  .\n  <code>\n   offset j_Wow64Transition\n  </code>\n  is a part of\n  <code>\n   wow64cpu.dll\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://www.slideshare.net/YardenShafir/jumping-into-heavens-gate\" rel=\"nofollow noreferrer\">\n   These slides\n  </a>\n  helps you to understand the procedure of executing 64bit syscall from Wow64 process with assembly codes as a example.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Apr 20, 2020 at 21:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I was also missing the term \"Heaven's Gate\" in the first answer. Presumably because it's not Microsoft's terminology, but the book is published by Microsoft Press.</span>",
                    "time": null
                }
            ]
        }
    ]
}