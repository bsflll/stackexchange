{
    "title": "What skills, other than practice, should I acquire to be good at reverse engineering softwares?",
    "link": "https://reverseengineering.stackexchange.com/questions/4266/what-skills-other-than-practice-should-i-acquire-to-be-good-at-reverse-enginee",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What would help me to be improve my self, What subjects should I study and learn from which increase my ability to be be better at reverse engineering a software ? i.e: Calculus, Integration ?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "3k",
    "tags": [
        "software-security"
    ],
    "user": null,
    "time": "May 4, 2014 at 20:32",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n There's a new book on practical reverse engineering (Bruce Dang et al), it lists some of the stuff. Other than that this is pretty opinion-based indeed (not really suitable for Q&A).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Such questions rarely have straightforward answers but I'll try to point you on\n  <strong>\n   a\n  </strong>\n  right path.\n </p>\n <p>\n  Firstly,\n  <strong>\n   Build a toolbox\n  </strong>\n  : gather as much tools as you can & start playing. Then, master the ones which you find useful or develop your own when you can do better. By tools, I mean\n  <em>\n   disassemblers\n  </em>\n  ,\n  <em>\n   hexeditors\n  </em>\n  ,\n  <em>\n   decompilers\n  </em>\n  ,\n  <em>\n   debuggers\n  </em>\n  ,\n  <em>\n   automation scripts\n  </em>\n  , ...\n </p>\n <p>\n  Secondly,\n  <strong>\n   Be methodical\n  </strong>\n  : with experience & practice you'll be able to come up with a set of steps to follow when reversing. These steps will certainly have to be updated with more experience but they'll surely help you find valuable information & data about your target.\n </p>\n <p>\n  Thirdly,\n  <strong>\n   Never blindly trust your tools\n  </strong>\n  or\n  <strong>\n   Know your tools\n  </strong>\n  : always cross-reference the outputs of different tools (use multiple disassemblers, ...). Most tools have strengths and weaknesses and you must know them in order to understand what you're looking at. For example,\n  <code>\n   objdump\n  </code>\n  (the\n  <code>\n   binutils\n  </code>\n  disassembler) performs\n  <code>\n   linear sweep\n  </code>\n  , a technique which can easily be fooled by misalignments and mixing data with instructions. A wise reverser would use another disassembler which implements another disassembly algorithm (IDAPro, r2 - radare, ...) and compare the results.\n </p>\n <p>\n  Fourthly,\n  <strong>\n   RTFM\n  </strong>\n  : documentation will in most, if not all, cases be your best friend. Any documentation related to the architecture, the tools you're using, the target application, the programming language, the compiler, ... is a gold mine. It will help you understand how all the machinery manages to function. You'll have to educate yourself in compilation (use & study different compilers :\n  <strong>\n   GNU's\n  </strong>\n  <code>\n   gcc\n  </code>\n  ,\n  <strong>\n   Intel's\n  </strong>\n  <code>\n   icc\n  </code>\n  ,\n  <strong>\n   PGI's\n  </strong>\n  <code>\n   pgcc\n  </code>\n  ,\n  <strong>\n   CAPS\n  </strong>\n  compilers suite,\n  <strong>\n   IBM's\n  </strong>\n  <code>\n   xlc\n  </code>\n  , ...), static & dynamic linking, object file formats (ELF32, ELF64, PE, COFF, Macho, ...), calling conventions and ABIs, compiler optimizations, link time optimizations, code morphing, cryptography, ... to know how the application was built, obfuscated, and secured. All that, in order to find an exploitable weak spot in the chain. I would also recommend you following the scientific work conducted in all those areas, especially obfuscation, static & dynamic analysis, instrumentation, binary code patching, disassembly, ... The field of binary code analysis is still at its infancy, and every now and then researchers come up with great techniques and algorithms which end up implemented in many industrial products.\n </p>\n <p>\n  Fifthly,\n  <strong>\n   Be sharp\n  </strong>\n  : there's no such thing as garbage. As Lavoisier once said : \"Rien ne se perd, rien ne se cr√©e, tout se transforme.\" (\"Nothing is lost, nothing is created, everything is transformed.\"). Keep in mind that any piece of valuable information can help. It can be poetry, calculus, physics, Boolean algebra, ... you never know what you'll stumble upon. A successful reverse engineer is an educated one !\n </p>\n <p>\n  Finally,\n  <strong>\n   Develop top programming skills :\n  </strong>\n  : learn as many programming languages as you can : assembly (\n  <code>\n   x86\n  </code>\n  ,\n  <code>\n   ARM\n  </code>\n  ,\n  <code>\n   6502\n  </code>\n  , ...),\n  <code>\n   C\n  </code>\n  ,\n  <code>\n   C++\n  </code>\n  ,\n  <code>\n   Python\n  </code>\n  ,\n  <code>\n   Haskell\n  </code>\n  , ... and learn how to extract code patterns from low level constructs - this is just a matter of experience & sharpness. Each language is designed on top of a set of paradigms :\n  <code>\n   Functional programming\n  </code>\n  ,\n  <code>\n   OOP\n  </code>\n  , ... Knowing those paradigms helps a lot when analyzing code.\n </p>\n <p>\n  I do not think there's enough space for me to cover everything but I hope this will help you narrow your search & find useful documentation, tutorials, ... on the web.\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "yaspr",
            "time": "May 5, 2014 at 6:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">+1 for bolding <b>RTFM</b>. \"Executable file formats\", for example, is a never-ending study story.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There's always some special kind of software that requires specific mathematical skills. For example, if you want to reverse some malware that encrypts files, skills in cryptography will help you identify algorithms. Or, if you want to reverse some software that calculates, say, antennas, knowing equations from radio engineering will help you.\n </p>\n <p>\n  But, to improve your skills in reversing \"general\" software, the best you can do is learn several assembly languages, i'd recommend at least intel (32 bit and 64 bit), and arm instruction sets, registers, and flags. Also, get at least some theoretical knowledge about compilers, how they work, and which approaches to compiler optimizations there are.\n </p>\n <p>\n  Write small (C) programs, compile them to assembler, use different optimization flags, and learn how the compiler translates them into assembler code. Learn about the various ways to arrange the stack, so you'll recognize patterns when you see compiled assembly code.\n </p>\n <p>\n  While, in some cases, you'll encounter hand-crafted assembly, most of what you're going to reverse in \"real life\" will be compiled in some way or other, and in most cases, it'll be C or C++ that gets compiled. (C# and Java as well, but these are special cases, because decompilation is easy with those except if obfuscated). See this question\n  <a href=\"https://reverseengineering.stackexchange.com/questions/4213/is-there-a-way-to-adjust-local-variables-when-a-function-doesnt-utilize-ebp\">\n   Is there a way to adjust local variables when a function doesn't utilize ebp?\n  </a>\n  , or this\n  <a href=\"https://reverseengineering.stackexchange.com/questions/4189/can-someone-tell-me-what-this-memcpy-or-maybe-its-a-memset-looks-like-a-memset\">\n   Can someone tell me what this memcpy or maybe it's a memset? looks like a memset, rep movsd and rep movsb This is a packet sending function\n  </a>\n  - both are easy to solve if you just know how compilers work, and if you've compared respective assembly/C code.\n </p>\n <p>\n  Apart from that, as you already said, lots of experience, in reversing AND in programming. Theres's lots of algorithms that are quite hard to understand when you just see the implementations - a few weeks ago, i came across a function that had lots of ifs and variable swapping that i wasn't able to make any sense of, until i suddenly realized that i used exactly the same stuff some 10 years ago when i once implemented\n  <a href=\"http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm\" rel=\"nofollow noreferrer\">\n   Bresenham's algorithm\n  </a>\n  . This is the kind of stuff you can't really learn - a lot of the \"magical\" realizations of experienced reversers is not magic, they're just good memory.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "2 revsGuntram Blohm",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}