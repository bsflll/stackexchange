{
    "title": "The way to determine how the decompiled constructor is structured",
    "link": "https://reverseengineering.stackexchange.com/questions/29483/the-way-to-determine-how-the-decompiled-constructor-is-structured",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following constructor decompiled by Ghidra, i.e. Game. I know some of the functions, which are part of that constructor. And thus I have created my interpretation of that structure. But I don't know in what exact order those functions were there originally.\n </p>\n <p>\n  So, is my interpretation correct or / and there should be a different approach to disassembling structures like this?\n </p>\n <p>\n  Decompiled Game constructor / class:\n </p>\n <pre><code>Game * __thiscall gladius::Game::Game(Game *this)\n\n{\n  *(undefined8 *)this = 0;\n  *(undefined8 *)(this + 8) = 0;\n  *(undefined8 *)(this + 0x10) = 0;\n  *(undefined8 *)(this + 0x18) = 0;\n  *(undefined8 *)(this + 0x20) = 0;\n  *(undefined8 *)(this + 0x28) = 0;\n  *(undefined8 *)(this + 0x30) = 0;\n  *(undefined8 *)(this + 0x38) = 0;\n  *(undefined8 *)(this + 0x40) = 0;\n  *(undefined8 *)(this + 0x48) = 0;\n  *(undefined8 *)(this + 0x50) = 0;\n  return this;\n}\n</code></pre>\n <p>\n  My version,\n  <strong>\n   game.h\n  </strong>\n  :\n </p>\n <pre><code>namespace gladius {\n    struct Game {\n        //virtual int __thiscall main(gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n\n        using GameConstructor = Game * (__fastcall*) (Game* thisptr);\n        GameConstructor gameConstructor;\n\n        using GameMain = __int64(__fastcall*) (gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n        GameMain gamemain;\n\n        using Initialize = void(__fastcall*) (gladius::Game* thisptr, int a2, char** a3, char** a4);\n        Initialize initialize;\n\n        using Quit = void(__fastcall*) (gladius::Game* thisptr);\n        Quit quit;\n\n        DWORD_PTR* guiObjPtr = 0;\n\n        DWORD_PTR* unknownPtrA = 0;\n\n        DWORD_PTR* unknownPtrB = 0;\n\n        DWORD_PTR* unknownPtrC = 0;\n\n        DWORD_PTR* unknownPtrD = 0;\n\n        DWORD_PTR* unknownPtrE = 0;\n\n        DWORD_PTR* unknownPtrF = 0;\n    };\n</code></pre>\n <p>\n  The\n  <strong>\n   game.cpp\n  </strong>\n  looks like this:\n </p>\n <pre><code>#include \"game.h\"\n\nnamespace gladius {\n    static std::array<Game, 1> functions = { {\n            // Steam\n                Game{\n\n            (Game::GameConstructor)(AddressHelper::getInstance().GetBaseAddress() + 0x331b0 / (2 * sizeof(DWORD))),\n\n            //  (Game::GameMain)0x140039ea0,            \n            (Game::GameMain)(AddressHelper::getInstance().GetBaseAddress() + 0x39EA0 / (2 * sizeof(DWORD))),\n            \n            //(Game::Initialize)0x140033e20,\n            (Game::Initialize)(AddressHelper::getInstance().GetBaseAddress() + 0x33E20 / (2 * sizeof(DWORD))),\n\n            //(Game::Quit)0x14003a0e0\n            (Game::Quit)(AddressHelper::getInstance().GetBaseAddress() + 0x3A0E0 / (2 * sizeof(DWORD)))\n         }\n\n    } };\n\n    Game& get()\n    {\n        return functions[0];\n    }\n}\n</code></pre>\n <p>\n  As per discussion in comments, how to change the above game.h and game.cpp files to make a proper constructor for my Game structure?\n </p>\n <p>\n  The way I do it now is:\n </p>\n <pre><code>    gladius::Game gameObj;\n\n    gladius::Game::Game(gameObj);\n</code></pre>\n <p>\n  And the element of that object can be accessed this way:\n  <code>\n   gameObj.guiObjPtr\n  </code>\n </p>\n <p>\n  But apparently\n  <code>\n   gladius::Game* thisptr1 = &gameObj;\n  </code>\n </p>\n <p>\n  is not equivalent to gladius::Game* thisptr, which is passed to the hooked function.\n </p>\n <p>\n  I.e.\n  <code>\n   thisptr\n  </code>\n  is initialised properly with all of the addresses and thisptr1 is not accepted by the member functions.\n </p>\n <p>\n  And that is strange considering that the way the hooked function is called is simply this:\n </p>\n <pre><code>  Game local_68 [96];\n  \n  gladius::Game::Game(local_68);\n  iVar1 = gladius::Game::main(local_68,param_1,param_2,param_3);\n</code></pre>\n <p>\n  Where\n  <code>\n   local_68\n  </code>\n  is essentially the new\n  <code>\n   gameObj\n  </code>\n  . It is passed to main as a pointer somehow and that part I don't understand.\n </p>\n <p>\n  And the way how the hooked function signature looks like this:\n </p>\n <pre><code>__int64 __fastcall gamemainHooked(gladius::Game* thisptr, int param_1, char** param_2, char** param_3)\n    \n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "234",
    "tags": [
        "decompilation",
        "c++",
        "functions",
        "decompile"
    ],
    "user": "Irbis77",
    "time": "Nov 2, 2021 at 9:56",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n What is your question, exactly?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<html><body><span class=\"comment-copy\">\n The question is of whether my interpretation of the original structure looks feasible and whether I ought to consider the order of the functions when re-creating the constructor? I.e. my first function is Constructor itself. Should it be there or the first position in the class should be occupied by vtable for example?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<html><body><span class=\"comment-copy\">\n Also, considering that the call to the constructor falls over, something in this representation is not right...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n This constructor (and constructors in general) does not tell you anything about the class member functions. It tells you about the class data items. If there were virtual functions, you would see the VTable being installed, from which you could learn about the virtual functions, but there are none in this case. So neither you, nor anybody else, can learn anything about the class member functions from this example, least of all the order in which they were defined in the original source code (though that knowledge is immaterial and won't help you with any reverse engineering-related endeavors).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<html><body><span class=\"comment-copy\">\n So, how do I go about creating a constructor for the reversed class. Above you can see the definition of that class (structure) Game, which I have created. Now I need a constructor for it. How to create one? GameConstructor is obviously the existing constructor, but I need one for my structure...?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}