{
    "title": "Detecting protected processes and critical processes from windows driver",
    "link": "https://reverseengineering.stackexchange.com/questions/20932/detecting-protected-processes-and-critical-processes-from-windows-driver",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've got a driver that tamper user-space processes by sending APC calls upon process start using the call\n  <code>\n   PsSetCreateProcessNotifyRoutine\n  </code>\n  .\n </p>\n <p>\n  I wish to avoid tampering with any process that is critical for the OS stability, since my APC also eventually decides to kill the process.\n </p>\n <p>\n  So far I've used\n  <code>\n   PsIsProtectedProcess\n  </code>\n  and\n  <code>\n   PsIsProtectedProcessLight\n  </code>\n  in order to detect protected processes.\n </p>\n <p>\n  However, it appears that there are some processes such as\n  <code>\n   smss.exe\n  </code>\n  and\n  <code>\n   crss.exe\n  </code>\n  and\n  <code>\n   wininit.exe\n  </code>\n  that are defined as critical processes and I also wish to avoid them.\n </p>\n <p>\n  Perhaps anybody knows that difference between protected and critical process, and how can I detect critical process programmatically  from kernel-mode (maybe it has ad-hoc field in EPROCESS ? )\n </p>\n <p>\n  thanks,\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "windbg",
        "process"
    ],
    "user": "Irad K",
    "time": "Mar 20, 2019 at 14:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems the correct term is\n  <em>\n   Critical System Service\n  </em>\n  . There are\n  <a href=\"https://docs.microsoft.com/en-us/windows/desktop/rstmgr/critical-system-services\" rel=\"noreferrer\">\n   API from userland\n  </a>\n  but I can't find anything for the kernel. So I took a quick look into the RstrtMgr.dll and it seems the list is actually hardcoded...\n </p>\n <p>\n  For the processes:\n </p>\n <ul>\n  <li>\n   system32\\csrss.exe\n  </li>\n  <li>\n   system32\\smss.exe\n  </li>\n  <li>\n   system32\\lsass.exe\n  </li>\n  <li>\n   system32\\wininit.exe\n  </li>\n  <li>\n   system32\\logonui.exe\n  </li>\n  <li>\n   system32\\services.exe\n  </li>\n  <li>\n   system32\\winlogon.exe\n  </li>\n </ul>\n <p>\n  For the services (specific case for svchost.exe):\n </p>\n <ul>\n  <li>\n   BrokerInfrastructure\n  </li>\n  <li>\n   DcomLaunch\n  </li>\n  <li>\n   LSM\n  </li>\n  <li>\n   Power\n  </li>\n  <li>\n   RpcEptMapper\n  </li>\n  <li>\n   RpcSs\n  </li>\n  <li>\n   SamSs\n  </li>\n </ul>\n <p>\n  There is probably another way to achieve that. After all, Windows BSOD if one of these processes is killed.\n </p>\n <p>\n  Edit: It seems\n  <code>\n   nt!EPROCESS::BreakOnTermination\n  </code>\n  is what you're looking for.\nThe\n  <em>\n   real\n  </em>\n  field is\n  <code>\n   nt!EPROCESS::Flags\n  </code>\n  and the mask 0x2000.\nIf this bit is set,\n  <code>\n   PspExitThread\n  </code>\n  will BSOD with\n  <code>\n   CRITICAL_PROCESS_DIED\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "wisk",
            "time": "Mar 20, 2019 at 18:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}