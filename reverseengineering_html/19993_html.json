{
    "title": "Why do I get e8 00 00 00 00 for all libc function calls?",
    "link": "https://reverseengineering.stackexchange.com/questions/19993/why-do-i-get-e8-00-00-00-00-for-all-libc-function-calls",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just started learning reverse engineering. The near call instruction (e8) is very confusing to me. It took me a while to figure out how address calculation works for local functions.\n </p>\n <p>\n  Now I'm looking at the output of\n </p>\n <pre><code>// gcc -c test.c \nvoid test() {\n     puts(\"Hello from puts\");\n     printf(\"Hello from printf\");\n}\n</code></pre>\n <p>\n  And it's\n  <code>\n   e8 00 00 00 00\n  </code>\n  for both calls. Somehow my disassembler can figure out which call's which.\n </p>\n <p>\n  Here's objdump output:\n </p>\n <pre><code>    0000000000000000 <_test>:\n   0:   55                      push   rbp\n   1:   48 89 e5                mov    rbp,rsp\n   4:   48 83 ec 10             sub    rsp,0x10\n   8:   48 8d 3d 1f 00 00 00    lea    rdi,[rip+0x1f]        # 2e <_test+0x2e>\n   f:   e8 00 00 00 00          call   14 <_test+0x14>\n  14:   48 8d 3d 23 00 00 00    lea    rdi,[rip+0x23]        # 3e <_test+0x3e>\n  1b:   89 45 fc                mov    DWORD PTR [rbp-0x4],eax\n  1e:   b0 00                   mov    al,0x0\n  20:   e8 00 00 00 00          call   25 <_test+0x25>\n  25:   89 45 f8                mov    DWORD PTR [rbp-0x8],eax\n  28:   48 83 c4 10             add    rsp,0x10\n  2c:   5d                      pop    rbp\n  2d:   c3                      ret\n</code></pre>\n <p>\n  Hopper's output:\n </p>\n <pre><code>_test:\n0000000000000000   push  rbp\n0000000000000001   mov   rbp, rsp\n0000000000000004   sub   rsp, 0x10\n0000000000000008   lea   rdi, qword [0x2e]      ; argument \"s\" for _puts\n000000000000000f   call  _puts\n0000000000000014   lea   rdi, qword [0x3e]      ; argument \"format\" for _printf\n000000000000001b   mov   dword [rbp+var_4], eax\n000000000000001e   mov   al, 0x0\n0000000000000020   call  _printf\n0000000000000025   mov   dword [rbp+var_8], eax\n0000000000000028   add   rsp, 0x10\n000000000000002c   pop   rbp\n000000000000002d   ret                          ; endp\n</code></pre>\n <p>\n  <strong>\n   Edit\n  </strong>\n </p>\n <p>\n  I found the answer to my initial question:\n </p>\n <blockquote>\n  <p>\n   If you're disassembling .o object files that haven't been linked yet,\n  the call address will just be a placeholder to be filled in by the\n  linker.\n  </p>\n </blockquote>\n <p>\n  So how does the linker know which function is getting called?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "614",
    "tags": [
        "x86-64"
    ],
    "user": "Alex",
    "time": "Nov 28, 2018 at 15:53",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @Alex : As a new contributor do not forget to mark the best answer as the right answer. It helps a lot the website statistics among the Stack-Exchange websites.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alex",
            "text": "<html><body><span class=\"comment-copy\">\n @perror I haven't got an answer yet.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you use\n  <code>\n   -dr\n  </code>\n  instead of plain\n  <code>\n   -d\n  </code>\n  ,\n  <code>\n   objdump\n  </code>\n  will list\n  <em>\n   relocation info\n  </em>\n  next to the instructions. E.g. here's a random sample I just compiled\n </p>\n <pre><code>00000000 <main>:\n   0:   55                      push   %ebp\n   1:   89 e5                   mov    %esp,%ebp\n   3:   83 e4 f0                and    $0xfffffff0,%esp\n   6:   83 ec 20                sub    $0x20,%esp\n   9:   c7 44 24 18 a9 03 00    movl   $0x3a9,0x18(%esp)\n  10:   00\n  11:   c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)\n  18:   00\n                        15: R_386_32    m1\n  19:   c7 04 24 30 00 00 00    movl   $0x30,(%esp)\n                        1c: R_386_32    .rodata\n  20:   e8 fc ff ff ff          call   21 <main+0x21>\n                        21: R_386_PC32  wprintf\n  25:   89 44 24 1c             mov    %eax,0x1c(%esp)\n  29:   b8 00 00 00 00          mov    $0x0,%eax\n  2e:   c9                      leave\n  2f:   c3                      ret\n</code></pre>\n <p>\n  You can see that call at 20 has a relocation info to\n  <code>\n   wprintf\n  </code>\n  (at 21, right at the bytes that correspond to the offset to the destination of the call). linker (\n  <code>\n   ld\n  </code>\n  ) uses this information at link time to patch the instructions with the final resolved address of the function.\n </p>\n <p>\n  It seems Hopper used relocation info symbol's name for more user-friendly disassembly.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 28, 2018 at 15:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Alex",
                    "text": "<span class=\"comment-copy\">Thanks. You don't have <code>e8 00 00 00 00</code>. Did you build without <code>gcc -c</code> ? I want to understand how calls work without relocation info.</span>",
                    "time": null
                }
            ]
        }
    ]
}