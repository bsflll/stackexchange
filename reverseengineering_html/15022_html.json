{
    "title": "c++ version of MOV AL,BYTE PTR DS:[ESI]",
    "link": "https://reverseengineering.stackexchange.com/questions/15022/c-version-of-mov-al-byte-ptr-dsesi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm writing a keygen for a crack-me exercise.\n </p>\n <p>\n  I have a problem with handling byte assignments the crack-me performs several times using instructions like\n  <code>\n   MOV AL,BYTE PTR DS:[ESI]\n  </code>\n  (move byte from location to AL) to change\n  <code>\n   EAX\n  </code>\n  for example from\n  <code>\n   000096BA\n  </code>\n  to\n  <code>\n   00009662\n  </code>\n  .\n </p>\n <p>\n  The crack-me overflows\n  <code>\n   EAX\n  </code>\n  value several times so to calculate the key I use an\n  <code>\n   unsigned int\n  </code>\n  in my C program.\n </p>\n <p>\n  The problem I have is that I do not know how I can replace a single byte value in\n  <code>\n   unsigned int\n  </code>\n  example from\n  <code>\n   0x38586d\n  </code>\n  to\n  <code>\n   0x38498d\n  </code>\n  , changing the second byte only.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "c++",
        "c",
        "crackme"
    ],
    "user": "Marek",
    "time": "Mar 27, 2017 at 16:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>int eax;\nchar * esi;\n*((char *) &eax) = *esi;\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Sergey Slepov",
            "time": "Mar 26, 2017 at 20:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">It is better to provide a thorough explanation alongside the final answer</span>",
                    "time": null
                },
                {
                    "user": "Sergey Slepov",
                    "text": "<span class=\"comment-copy\">&amp;eax takes the address of eax and has the type <code>int *</code>  (char *) &amp;eax casts the int * to a char *. *((char *) &amp;eax) references the char (byte) pointed to by the char *. = assigns the char / byte pointed to by esi to the first byte of eax. HTH.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First, most decent compilers will let you introduce assembly directly in your C code. This is not recommended but the option should be noted.\n </p>\n <p>\n  Now, here's a sane solution; C was several\n  <a href=\"https://www.tutorialspoint.com/cprogramming/c_bitwise_operators.htm\" rel=\"nofollow noreferrer\">\n   bitwise operators\n  </a>\n  to manipulate sets of bits inside an integer.\n </p>\n <p>\n  The bitwise operators we'll use here are:\n </p>\n <ol>\n  <li>\n   <p>\n    binary AND operator (\n    <code>\n     &\n    </code>\n    ):\n   </p>\n   <p>\n    A bit in the result variable is only set if it was set in both input variables. For example,\n    <code>\n     0b0011 & 0b1010\n    </code>\n    will result in\n    <code>\n     0b0010\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    binary OR operator (\n    <code>\n     |\n    </code>\n    )\n   </p>\n   <p>\n    A bit in the result variable will be set if it was set in at least one of the input variables. For example,\n    <code>\n     0b0011 | 0b1010\n    </code>\n    will result in\n    <code>\n     0b1011\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    binary NOT operator (\n    <code>\n     ~\n    </code>\n    )\n   </p>\n   <p>\n    A bit in the result variable will only be set if it was\n    <em>\n     not\n    </em>\n    set in the input variable. For example,\n    <code>\n     ~0b0001\n    </code>\n    will result in\n    <code>\n     0b1110\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    arithmetic shift operator (\n    <code>\n     <<\n    </code>\n    )\n   </p>\n   <p>\n    A bit in the result variable will only be set if the bit\n    <code>\n     n\n    </code>\n    positions to the right in the first variable was set, where\n    <code>\n     n\n    </code>\n    is the second variable. If that position does not exist, the bit is not set. For example,\n    <code>\n     0b0000 0b0101 << 2\n    </code>\n    will result in\n    <code>\n     0b0001 0b0100\n    </code>\n    .\n   </p>\n  </li>\n </ol>\n <p>\n  And here's how we could use them to set the\n  <em>\n   lowest\n  </em>\n  byte in dword\n  <code>\n   a\n  </code>\n  to that of char\n  <code>\n   c\n  </code>\n  , assuming a 32bit processor for simplicity's sake:\n </p>\n <pre><code>unsigned int a = 0xa5a5a505;\nunsigned char c = 0xa0;\n</code></pre>\n <p>\n  First, we'll want to zero-out the lowest byte. We'll do that by ANDing the dword with a dword that has all of it's bits set\n  <em>\n   except\n  </em>\n  the 8 lowest bits (aka it's lowest byte).\n </p>\n <pre><code>a = a & 0xffffff00\n</code></pre>\n <p>\n  Alternatively, we can use the NOT binary operator to create\n  <code>\n   0xffffff00\n  </code>\n  in a slightly cleaner manner, as follows:\n </p>\n <pre><code>a = a & ~0xff\n</code></pre>\n <p>\n  After either of those lines, which perform exactly the same thing (and will look identical in assembly),\n  <code>\n   a\n  </code>\n  's value would be\n  <code>\n   0xa5a5a500\n  </code>\n  .\n </p>\n <p>\n  Now, we'll need to assign the value of\n  <code>\n   c\n  </code>\n  to that same byte. We'll use the OR bitwise operator in the following manner:\n </p>\n <pre><code>a = a | c;\n</code></pre>\n <p>\n  Which will result in\n  <code>\n   a\n  </code>\n  having the value of\n  <code>\n   0xa5a5a5a0\n  </code>\n  .\n </p>\n <p>\n  Now, if we would like to do the same for the 2nd byte in the integer we'll shift the values by 8 bits before executing the same operators, like this:\n </p>\n <pre><code>a = a & ~(0xff << 8)\n</code></pre>\n <p>\n  Is equivalent to:\n </p>\n <pre><code>a = a & ~(0xff00)\n</code></pre>\n <p>\n  Which is identical to:\n </p>\n <pre><code>a = a & 0xffff00ff\n</code></pre>\n <p>\n  Which will result with:\n </p>\n <pre><code>a = 0xa5a50005\n</code></pre>\n <p>\n  And now, we'll add\n  <code>\n   c\n  </code>\n  at the 2nd byte's position:\n </p>\n <pre><code>a = a | (c << 8)\n</code></pre>\n <p>\n  Which in our example is:\n </p>\n <pre><code>a = a | 0xa000\n</code></pre>\n <p>\n  Which will result in\n  <code>\n   0xa5a5a005\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Mar 27, 2017 at 16:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}