{
    "title": "Obfuscate JSON file that is served client-side",
    "link": "https://reverseengineering.stackexchange.com/questions/21911/obfuscate-json-file-that-is-served-client-side",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Through some research I have found that obfuscation won't block hackers from retrieving your .json file, but I'd like to have at least a level of obfuscation that deters some people. I ran into a npm package called bson that creates binaries for a json format. Can you call this obfuscation to a degree? I am also at a dilemma because my .json files serve a WebGL gaming engine via iframe.\n </p>\n <p>\n  Unity developers obfuscates most of their code via third-party obfuscation tools in the Unity Asset store. It is than rendered into WebGL. I was wondering if some similar tools that helps me achieve obfuscation of .json this through webGL frameworks like babylon.js and three.js\n </p>\n <p>\n  My main goal is just to obfuscate when a user inspects the incoming .json file in the network tab.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "obfuscation"
    ],
    "user": "Beta",
    "time": "Aug 17, 2019 at 0:49",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n I think you answered your own question. Sure, the data might be \"obfuscated\", but is certainly still recoverable by a determined attacker. It's likely up to you to determine what level of obfuscation is sufficient.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Security by obscurity is\n <i>\n  no security\n </i>\n . It's at most something to throw off laypeople. I'm not sure from the top of my head what other tools exist (Python with its\n <code>\n  json\n </code>\n module comes to mind, though), but given there are literally browser extensions that allow to format JSON data, I don't see how your obfuscation would provide\n <i>\n  any\n </i>\n kind of deterrence. After all the JSON still needs to be readable by some program, right? So another program could also simply parse the JSON data and be instructed to dump it pretty-printed.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}