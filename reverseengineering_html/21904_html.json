{
    "title": "Radare2 substituting second operand of lea instruction with a random register",
    "link": "https://reverseengineering.stackexchange.com/questions/21904/radare2-substituting-second-operand-of-lea-instruction-with-a-random-register",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was trying to debug a crackme with radare2. I found an interesting function which radare2 flagged as\n  <code>\n   sym.xxx\n  </code>\n  . The following listing is trimmed version of disassembled output of the function\n  <code>\n   sym.xxx\n  </code>\n  .\n </p>\n <pre><code>[0x7ff299821090]> pdf @sym.xxx\n/ (fcn) sym.xxx 179\n|   sym.xxx ();\n|           ; CALL XREF from main @ 0x55a340b531a8\n|           0x55a340b53297      55             push rbp\n|           0x55a340b53298      4889e5         mov rbp, rsp\n|           0x55a340b5329b      488d35b92d00.  lea rsi, obj.key3       ; 0x55a340b5605b ; \"is\"\n|           0x55a340b532a2      488d3d373000.  lea rdi, [0x55a340b562e0]\n|           0x55a340b532a9      e8c2fdffff     call sym.imp.strcat     ; char *strcat(char *s1, const char *s2)\n|           0x55a340b532ae      488d052b3000.  lea rax, [0x55a340b562e0]\n|           0x55a340b532b5      48c7c1ffffff.  mov rcx, 0xffffffffffffffff\n|           0x55a340b532bc      4889c2         mov rdx, rax\n|           0x55a340b532bf      b800000000     mov eax, 0\n|           0x55a340b532c4      4889d7         mov rdi, rdx\n|           0x55a340b532c7      f2ae           repne scasb al, byte [rdi]\n...\n</code></pre>\n <p>\n  While stepping in through each instruction in this function, I have noticed that after executing the fourth instructon (\n  <code>\n   lea rdi, [0x55a340b562e0]\n  </code>\n  ) the 2nd operand of\n  <code>\n   lea\n  </code>\n  instruction automatically substituted to a random register like\n  <code>\n   rdx\n  </code>\n  ,\n  <code>\n   r9\n  </code>\n  ,\n  <code>\n   rdi\n  </code>\n  in the disassembly of debugger window. In the screenshot below the fourth instruction got substituted to\n  <code>\n   lea rdi, [rdi]\n  </code>\n  by radare2. And I think it is worth mentioning that I have loaded the crackme executable 5 times in radare2, at first two times radare2 replaced the memory address operand with\n  <code>\n   rdx\n  </code>\n  and\n  <code>\n   r9\n  </code>\n  and last 3 times with\n  <code>\n   rdi\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SV8Un.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/SV8Un.png\"/>\n  </a>\n </p>\n <p>\n  I am quite unsure of what causing this behavior.Although\n  <code>\n   lea rdi, [rdi]\n  </code>\n  looks self-explanatory but I don't know about\n  <code>\n   rdx\n  </code>\n  or\n  <code>\n   r9\n  </code>\n  . Why radare2 is changing memory operands in\n  <code>\n   lea\n  </code>\n  instruction ?\n </p>\n <p>\n  <strong>\n   Radare2 version\n  </strong>\n  : radare2 3.7.0 22507 @ linux-x86-64 git.3.7.0-38-g9ce44c7cc\n </p>\n <p>\n  <strong>\n   Crackme binary\n  </strong>\n  :\n  <a href=\"https://crackmes.one/crackme/5c95646333c5d46ecd37c960\" rel=\"nofollow noreferrer\">\n   https://crackmes.one/crackme/5c95646333c5d46ecd37c960\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "226",
    "tags": [
        "radare2"
    ],
    "user": "mapper2496",
    "time": "Aug 16, 2019 at 19:12",
    "comments": [
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n rdx, r9 and rdi arenâ€™t random registers. In x64 Linux they contain 3rd, 6th and 1st argument of a function respectively. Maybe there are several versions of this function and each one uses a different argument to initialise rdi before a call to strcat?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mapper2496",
            "text": "<html><body><span class=\"comment-copy\">\n Actually the function xxx gets called from main without any argument passed to it. The purpose of this function to generate a password. There is only one version of this function.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n Could you share the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mapper2496",
            "text": "<html><body><span class=\"comment-copy\">\n @bart1e Here is the  link\n <a href=\"https://crackmes.one/crackme/5c95646333c5d46ecd37c960\" rel=\"nofollow noreferrer\">\n  crackmes.one/crackme/5c95646333c5d46ecd37c960\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The instruction that confuses you is\n  <code>\n   488d3d37300000\n  </code>\n  standing for\n  <code>\n   lea rdi,[rip+0x3037]\n  </code>\n  .\n </p>\n <p>\n  What radare2 shows you before executing this instruction is the value that will be stored in\n  <code>\n   rdi\n  </code>\n  register, not the exact mnemonic of the instruction. After executing this line, you see\n  <code>\n   lea rdi, [rdi]\n  </code>\n  and the reason behind it,\n  <strong>\n   I guess\n  </strong>\n  , is that radare2 prefers to show registers instead of raw values when possible. After executing this instruction, it realises that\n  <code>\n   rdi\n  </code>\n  has in fact value\n  <code>\n   0x55e3a3b802e0\n  </code>\n  so it can display it instead, which usually would be more readable, but in your case it unfortunately leads to confusion.\n </p>\n <p>\n  To make sure that it is just radare2 issue, not the executable itself, you may check the opcode just before executing that instruction and just after it - it doesn't change.\n </p>\n <p>\n  <strong>\n   Note:\n  </strong>\n  You mentioned that you see different registers in\n  <code>\n   lea\n  </code>\n  - they aren't put there randomly; depending on the current register values when you look at the mnemonics (using\n  <code>\n   pdf\n  </code>\n  or Visual Mode), they will change; i.e. if\n  <code>\n   r9= 0x55a340b562e0\n  </code>\n  at some moment, it can be displayed there (so you will see\n  <code>\n   lea rdi, [r9]\n  </code>\n  when it happens that\n  <code>\n   r9\n  </code>\n  or any other register has that value).\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "bart1e",
            "time": "Aug 16, 2019 at 20:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mapper2496",
                    "text": "<span class=\"comment-copy\">Thank you. Later I also noticed that mnemonics change depending on register value. Your answer made it more clear .</span>",
                    "time": null
                }
            ]
        }
    ]
}