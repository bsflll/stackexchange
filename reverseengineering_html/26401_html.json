{
    "title": "Decoding Hex Data",
    "link": "https://reverseengineering.stackexchange.com/questions/26401/decoding-hex-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to decode\n  <code>\n   .PLW\n  </code>\n  data acquired by a temperature logger (\n  <a href=\"https://www.picotech.com/download/manuals/usb-pt104-rtd-data-logger-programmers-guide.pdf\" rel=\"nofollow noreferrer\">\n   PicoLog PT-104\n  </a>\n  ).\n </p>\n <p>\n  If you convert the\n  <code>\n   .PLW\n  </code>\n  file to a\n  <code>\n   .txt\n  </code>\n  file through the official software you get something like this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/dkwwS.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dkwwS.png\"/>\n  </a>\n </p>\n <p>\n  where each row has single temperature measurements across the 20 channels available to the device. I would like to extract the data directly from the\n  <code>\n   .PLW\n  </code>\n  , file without having to convert it to\n  <code>\n   .txt\n  </code>\n  first.\n </p>\n <p>\n  By opening the\n  <code>\n   .PLW\n  </code>\n  file in a hex editor, I have managed to isolate with a bit of tweaking the section which seems to contain the raw data measurements:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/8Bv8J.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"hex_dump\" src=\"https://i.sstatic.net/8Bv8J.png\"/>\n  </a>\n </p>\n <p>\n  The first 4 hexes contain the row index. And should be read in the reversed column order\n  <code>\n   03 02 01 00\n  </code>\n  .\n </p>\n <p>\n  There are then the 20 groups of 4 columns, one for each channel. Assuming all groups should be read right to left (given that was the case for the index columns), they all seem to begin with\n  <code>\n   0x41\n  </code>\n  which might maybe be some kind of encoding for the tab character (or similar).\n </p>\n <p>\n  The next hex in each chunk (so the one just before the\n  <code>\n   0x41\n  </code>\n  ) seems to be mapping at least to some approximate way the temperature read in that channel:\n </p>\n <ul>\n  <li>\n   Hex -> TEMP\n  </li>\n  <li>\n   <code>\n    0x50 -> 13\n   </code>\n  </li>\n  <li>\n   <code>\n    0xa0, 0xa1, 0xa2, 0xa3 -> 20\n   </code>\n  </li>\n  <li>\n   <code>\n    0xa4, 0xa5, 0xaa, 0xab -> 21\n   </code>\n  </li>\n  <li>\n   <code>\n    0xac, 0xae, 0xb0 -> 22\n   </code>\n  </li>\n </ul>\n <p>\n  And the order of the channels also seems to match the order of the columns in the\n  <code>\n   .txt\n  </code>\n  file: for example channel 8 in the\n  <code>\n   .txt\n  </code>\n  file has an outlier temperature at\n  <code>\n   13\n  </code>\n  --> which is also present in the 8th data column in the\n  <code>\n   .PLW\n  </code>\n  file, where the\n  <em>\n   temperature\n  </em>\n  hex is set to\n  <code>\n   0x50\n  </code>\n </p>\n <p>\n  Would anyone be able to crack the mapping between the hex values in each chunk to the final temperature measurement displayed in the\n  <code>\n   .txt\n  </code>\n  file?\n </p>\n <p>\n  Or does anyone know of an encoding where\n  <code>\n   0x41\n  </code>\n  would correspond to a tab-like character? Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "642",
    "tags": [
        "decryption",
        "hex"
    ],
    "user": "Alvise",
    "time": "Dec 1, 2020 at 12:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The data are floating point encoded on 32 bits Little_endian\n  \n\n  byte 0 to 3: 00 00 00 00 = 0 channel number\n  \n\n  byte 4 to 7: 1f 85 a3 41 = 0x41a3851f = 20.4400005341\n  \n\n  etc ..\n  \n\n  <a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\" rel=\"nofollow noreferrer\">\n   https://www.h-schmidt.net/FloatConverter/IEEE754.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Gordon Freeman",
            "time": "Dec 1, 2020 at 14:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Alvise",
                    "text": "<span class=\"comment-copy\">Thank you very much!   Just for the record, bytes 0 to 3 are the measurement index number. The following 20 * 4-byte encoded values are the temperature values from each channel.  Thanks again Gordon!</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">I would be very interested to get my hands on a couple of these .PLW files. Could you post a couple or point to a good resource?</span>",
                    "time": null
                }
            ]
        }
    ]
}