{
    "title": "How to unpack Armadillo protected software using x64dbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/29269/how-to-unpack-armadillo-protected-software-using-x64dbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am planning to reverse-engineer a Windows executable that has been protected with Armadillo.\n </p>\n <p>\n  When I put the executable through Detect It Easy, the results show that the executable was protected with Armadillo 3.x-9.x.\n </p>\n <p>\n  I will be using\n  <strong>\n   x64dbg\n  </strong>\n  to unpack the executable. Most Armadillo unpackers available at\n  <a href=\"https://www.exetools.com/unpackers.htm\" rel=\"nofollow noreferrer\">\n   https://www.exetools.com/unpackers.htm\n  </a>\n  do not work with my executable because they only support an older version of Armadillo.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "windows",
        "x64dbg",
        "executable",
        "exe"
    ],
    "user": "Earldridge Jazzed Pineda",
    "time": "Sep 9, 2021 at 10:41",
    "comments": [
        {
            "user": "tomysshadow",
            "text": "<html><body><span class=\"comment-copy\">\n There are several old tutorials that explain how to remove Armadillo, in great detail. Look up Tuts4you Collection 2011, which has in-depth tutorials up to version 8. Many of them, incidentally, are by Mr Exodia, the creator of x64dbg.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not able to comment, so I'll just answer here.\n </p>\n <p>\n  If you have to perform the unpacking manually, you should ask yourself - to what extent do you need it unpacked? What are you trying to achieve with the unpacked file?\n </p>\n <p>\n  More often than not, you don't need it fully unpacked, so that it looks similar, if not the same, as the original file.\n </p>\n <p>\n  In any case, with any packers, I suggest you just load up\n  <strong>\n   x64dbg\n  </strong>\n  with anti-anti-debugging plugins. Try a few configurations here and there - the standard hooks etc. should work.\n </p>\n <p>\n  If you are looking at static analysis, you will want to use tools like\n  <a href=\"https://github.com/NtQuery/Scylla\" rel=\"nofollow noreferrer\">\n   Scylla\n  </a>\n  to dump the program at runtime and reconstruct the IAT (Import Address Table), which will give you information for calls to windows API / dlls.\n </p>\n <p>\n  If the unpacker scripts don't work, perhaps there are tutorials online on how you can unpack it by hand - fully or partially? Even if the tutorial is an old one, it can usually still be a good reference. The packer's protection techniques do not really change at the core most of the time.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rohit Gupta",
            "time": "Feb 14, 2023 at 14:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Earldridge Jazzed Pineda",
                    "text": "<span class=\"comment-copy\">Scylla supported Armadillo x86 out of the box.</span>",
                    "time": null
                }
            ]
        }
    ]
}