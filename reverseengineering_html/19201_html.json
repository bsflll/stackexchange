{
    "title": "How to dump a firmware from an old cell phone with Linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/19201/how-to-dump-a-firmware-from-an-old-cell-phone-with-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a \"MiracleBox\" software for GSM repairing and and old cell phone (Wiko Lubi 4) with a RD8851CL chip inside.\n </p>\n <p>\n  With this MiracleBox running on Windows I can make a dump of this chip without disassembling the phone, or rewrite the phone password and a lot of more cool things...\n </p>\n <p>\n  I had the idea to do it manually...\n </p>\n <p>\n  I just had to connect the phone to my computer with USB and to put the phone in \"Download Mode\" (Pressing key 0 for few secs) and then I pressed \"Read\" in the software.\nIt's really easy to get a bin file with the entire firmware inside.\n </p>\n <p>\n  I decided to open this firmware with a hexadecimal editor then I found the phone's password and I changed it and finally I rewrote the firmware to the phone with MiracleBox software.\n </p>\n <p>\n  Now I'm looking for some help because I want to dump the chip without any MiracleBox and I want to do this with Linux...\n </p>\n <p>\n  I plugged the phone (download mode) to my laptop running debian, then I did \"dmesg\" command in terminal.\nThis is the output of the command.\n </p>\n <pre><code>[110290.523173] usb 3-2: new full-speed USB device number 9 using ohci-pci\n[110290.720228] usb 3-2: New USB device found, idVendor=1e04, idProduct=0904, bcdDevice=34.10\n[110290.720239] usb 3-2: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[110290.720244] usb 3-2: Product: WIKO\n[110290.720250] usb 3-2: Manufacturer: Removable disk\n[110290.720255] usb 3-2: SerialNumber: USB Controller 1.0\n</code></pre>\n <p>\n  Can somebody give me some explanations in way to dump the chip with linux command lines?\nIt's the first time that I try to reverse a firmware etc and I'm not a professional.... I just want to learn and progress.\nIf it's necessary, I have the full datasheet of RDA8851CL chip (It's too hard to understand for me to be honest)\n </p>\n <p>\n  Thank you so much.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "firmware",
        "linux",
        "dumping",
        "dump"
    ],
    "user": "masterphone24",
    "time": "Aug 30, 2018 at 14:53",
    "comments": [
        {
            "user": "masterphone24",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you very much for these precious answers, I really apreciated them. This Wiko is not Android based phone (I would have preferred because I know what we can do with ADB) - so it's not so easy to communicate between computer and this phone... I'll try to sniff USB communication and discover, I never did that before so It's a new adventure for me! Благодарю вас again (;\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  MiracleBox is likely using some phone specific protocol to read and write flash. Such protocols are rarely documented so probably the only way to figure it out would be to sniff the communication between it and the phone and try to duplicate it in your own program.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Sep 2, 2018 at 14:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looks like Wiko use Android as OS [based on\n  <a href=\"http://www.wikogeek.com/]\" rel=\"nofollow noreferrer\">\n   http://www.wikogeek.com/]\n  </a>\n  , so Android tricks should work here as well.\n </p>\n <p>\n  If you need access to SoC on RDA8851CL in more \"user-friendly\" way, try to connect to it with adb:\n </p>\n <p>\n  For Windows:\n  <a href=\"http://kernel.wikomobile.com/WIKO_Android_USB_Driver.zip\" rel=\"nofollow noreferrer\">\n   http://kernel.wikomobile.com/WIKO_Android_USB_Driver.zip\n  </a>\n </p>\n <p>\n  For Linux: Follow the following manual from XDA:\n  <a href=\"https://forum.xda-developers.com/android/software/guide-installing-adb-fastboot-linux-adb-t3478678\" rel=\"nofollow noreferrer\">\n   https://forum.xda-developers.com/android/software/guide-installing-adb-fastboot-linux-adb-t3478678\n  </a>\n </p>\n <p>\n  Note: Wiko generally work with MTK drivers, in case links i gave here are not work.\n </p>\n <p>\n  After you install the software and drivers successfully, connect adb like this:\n </p>\n <pre><code>adb shell\n</code></pre>\n <p>\n  This should open you the command line to your mobile device internal SoC\n </p>\n <p>\n  Command you are looking for to dump the content is:\n </p>\n <pre><code>mkdir dump/\ncd dump/\nadb pull /path/\n</code></pre>\n <p>\n  When done, content of folder on your device will be dumped to new dump/ folder.\n </p>\n <p>\n  Note: refrain to perform \"adb pull /\" - since in Linux \"everything is a file\",  you will end up with multiple errors trying to pull /dev and /proc\n </p>\n <p>\n  Good luck,\n </p>\n <p>\n  D.L.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Denis Laskov",
            "time": "Sep 2, 2018 at 15:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}