{
    "title": "Reconstructing Assembly Truth Map",
    "link": "https://reverseengineering.stackexchange.com/questions/16313/reconstructing-assembly-truth-map",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I recently read [1] which evaluates several disassemblers. The truth/test binaries are generated by the SPEC CPU 2006 Benchmark suite. The authors provide detailed build instructions for the ELF set inside a VirtualBox.\n </p>\n <p>\n  However, reconstructing the Windows binaries seems impossible for me, as the authors didn't provide the SPEC configuration files for building those binaries. So building the binaries with Visual Studio 2015, which actually match with the provided mapping files [2] didn't work (bruteforcing/guessing the compilation settings).\n </p>\n <p>\n  For example, most of the samples \"SPEC/vs15-32/C++\" and \"SPEC/vs15-32/C\" have the following prologue of the .text base (see appendix for properties description):\n </p>\n <pre><code>[2]\n@0x0000000000401000:  [FBIC]\n@0x0000000000401001:  [IC]C\n@0x0000000000401003:  [IC]CC\n@0x0000000000401006:  [IC]\n@0x0000000000401007:  [IC]\n@0x0000000000401008:  [IC]CC\n@0x000000000040100b:  [IC]C\n@0x000000000040100d:  [JIC]C\n</code></pre>\n <p>\n  All of the 64 bit samples have following prologue:\n </p>\n <pre><code><Segment .text, vaddr 0x0000000000001000, size 1600112, flag [RX]>\n@0x0000000140001000:  [FBIC]CCCC\n@0x0000000140001005:  [IC]CCCC\n@0x000000014000100a:  [IC]\n@0x000000014000100b:  [IC]CCC\n@0x000000014000100f:  [IC]CC\n@0x0000000140001012:  [IC]CC\n@0x0000000140001015:  [IC]CC\n@0x0000000140001018:  [JIC]C\n</code></pre>\n <p>\n  I tried several configurations for the SPEC build instructions with VS2015 Compiler and intel compiler. However, inspecting all of the resulting binaries don't match with the provided ground truth of [1].\n </p>\n <p>\n  <strong>\n   So two concrete questions:\n  </strong>\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     When all samples share similar .text prologues, they all share\nsimilar libraries?\n    </strong>\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Could somone infer the compilation details by the repeating\nprologues?\n    </strong>\n   </p>\n  </li>\n </ol>\n <hr/>\n <p>\n  Properties descriptions:\n </p>\n <pre><code>  d - data\n  c - code\n  i - instruction boundary\n    Note that if a byte is an instruction boundary (start of an instruction),\n    this implies that it is a code byte\n  o - instruction boundary (start of overlapping instruction)\n  b - basic block start\n    Basic block boundaries are not always explicitly listed, as they can usually\n    be found by parsing the instruction/function listing into a control-flow graph\n  f - function start\n  e - program/binary entry point\n  r - function end (return, tail call, etc.)\n  j - control-flow instruction (jmp, call, ret, ...)\n  x - crossref/call instruction\n  n - NOP or other function padding\n</code></pre>\n <p>\n  [1] An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries\nby Dennis Andriesse:\n </p>\n <blockquote>\n  <p>\n   Zeus is a family of credential-stealing trojans which originally\nappeared in 2007. The first two variants of Zeus are based on\ncentralized command servers. These command servers are now routinely\ntracked and blocked by the security community. In an apparent effort\nto withstand these routine countermeasures, the second version of Zeus\nwas forked into a peer-to-peer variant in September 2011. Compared to\nearlier versions of Zeus, this peer-to-peer variant is fundamentally\nmore difficult to disable. Through a detailed analysis of this new\nZeus variant, we demonstrate the high resilience of state of the art\npeer-to-peer botnets in general, and of peer-to-peer Zeus in\nparticular.\n  </p>\n </blockquote>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "241",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "compilers"
    ],
    "user": "fxorf",
    "time": "Jul 26, 2021 at 9:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  We implemented a generator for creating such ground truth mappings and recently published it.\n </p>\n <p>\n  You can find further details within the github repo:\n </p>\n <p>\n  <a href=\"https://github.com/LL-MM/approxis-groundtruth\" rel=\"nofollow noreferrer\">\n   https://github.com/LL-MM/approxis-groundtruth\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "knx",
            "time": "Jun 26, 2020 at 8:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}