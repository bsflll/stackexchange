{
    "title": "I'm confused about parameter in Printf function",
    "link": "https://reverseengineering.stackexchange.com/questions/27381/im-confused-about-parameter-in-printf-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to understand call conventions and such. I created a function with the source code\n </p>\n <pre><code>#include <stdio.h>\nint main() {\n  int x = 9;\n  printf(\"%d\n\", x);\n}\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/ABlbc.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"and the output in gdb was the following screenshot:\" src=\"https://i.sstatic.net/ABlbc.png\"/>\n  </a>\n </p>\n <p>\n  The above screenshot is its disassembly.\n </p>\n <p>\n  I have two questions:\n </p>\n <ol>\n  <li>\n   Where does the\n   <code>\n    0x405044\n   </code>\n   come from?\n  </li>\n  <li>\n   Why does it store the contents of\n   <code>\n    0x405044\n   </code>\n   in the memory address of esp?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "362",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "Constructive",
    "time": "Apr 2, 2021 at 14:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  0x405044 is the address of your format string. You can print the string  with\n  <code>\n   x/s 0x405044\n  </code>\n  It stores this address at esp cause its your first argument.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "defragger",
            "time": "Apr 2, 2021 at 14:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Apart from what defragger said, there are few things to note (as you are learning about calling conventions). This is an example of 32 bit x86 calling convention (C).\n </p>\n <ul>\n  <li>\n   Before a subroutine call, caller saves caller-saved registers on stack (registers eax, ecx, edx - \"if required\")\n  </li>\n  <li>\n   Then it pushes subroutine parameters on stack in inverted order (in your case, 9 and address of \"%d\n\")\n  </li>\n  <li>\n   Then calls the subroutine (return address is pushed on top of stack)\n  </li>\n  <li>\n   After return (return value goes in eax), caller removes the parameters, restores the stack and also restores caller-saved registers.\n  </li>\n </ul>\n <p>\n  Now the I believe you got confused because of \"42a\" and \"42e\" instructions (mov). you must be familiar with \"push\" instruction - which is nearly equivalent to (sub esp, 4; mov [esp], reg32 - (this also affect flags unlike push))\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "R4444",
            "time": "Apr 2, 2021 at 16:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}