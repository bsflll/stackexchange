{
    "title": "What are the Vectored Continue Handlers",
    "link": "https://reverseengineering.stackexchange.com/questions/14992/what-are-the-vectored-continue-handlers",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Practically everyone knows what\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms681420(v=vs.85).aspx\" rel=\"noreferrer\">\n   Vectored Exception Handlers\n  </a>\n  are, but I couldn't find a lot of information about the similar \"Vectored Continue Handlers\" and related functions I encountered today, such as\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms679273(v=vs.85).aspx\" rel=\"noreferrer\">\n   AddVectoredContinueHandler\n  </a>\n  and\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680567(v=vs.85).aspx\" rel=\"noreferrer\">\n   RemoveVectoredContinueHandler\n  </a>\n  .\n </p>\n <p>\n  The prototype of\n  <code>\n   AddVectoredContinueHandler\n  </code>\n  is very similar to\n  <code>\n   AddVectoredExceptionHandler\n  </code>\n  's prototype:\n </p>\n <pre><code>PVOID WINAPI AddVectoredContinueHandler(\n  _In_ ULONG                       FirstHandler,\n  _In_ PVECTORED_EXCEPTION_HANDLER VectoredHandler\n);\n</code></pre>\n <p>\n  And to make things more confusing it accepts a\n  <code>\n   PVECTORED_EXCEPTION_HANDLER\n  </code>\n  , just as\n  <code>\n   AddVectoredExceptionHandler\n  </code>\n  does.\n </p>\n <p>\n  What is the purpose of Vectored\n  <strong>\n   Continue\n  </strong>\n  Handlers and how are they used?\n </p>\n</div>\n</body></html>",
    "votes": "19",
    "answers": 1,
    "views": "6k",
    "tags": [
        "windows",
        "exception"
    ],
    "user": "NirIzr",
    "time": "Jun 25, 2017 at 14:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Unfortunately MSDN and windows API documentation is really scarce here, and I had difficulties finding anything other than the minimal description in MSDN.\n </p>\n <p>\n  It turns out the Vectored\n  <em>\n   Continue\n  </em>\n  Handlers are maintained in a Linked list very similar to the one used for Vectored\n  <em>\n   Exception\n  </em>\n  Handlers. They are so similar, that the function's prototypes are practically identical.\n </p>\n <p>\n  Take a look at:\n </p>\n <pre><code>PVOID WINAPI AddVectoredExceptionHandler(\n  _In_ ULONG                       FirstHandler,\n  _In_ PVECTORED_EXCEPTION_HANDLER VectoredHandler\n);\n</code></pre>\n <p>\n  Compared to:\n </p>\n <pre><code>PVOID WINAPI AddVectoredContinueHandler(\n  _In_ ULONG                       FirstHandler,\n  _In_ PVECTORED_EXCEPTION_HANDLER VectoredHandler\n);\n</code></pre>\n <p>\n  Luckily, Vectored\n  <em>\n   Exception\n  </em>\n  Handlers are more commonly used and documented. For example, MSDN has a\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms681420(v=vs.85).aspx\" rel=\"noreferrer\">\n   page\n  </a>\n  about VEHs, containing the following paragraph:\n </p>\n <blockquote>\n  <p>\n   Vectored exception handlers are an extension to structured exception handling. An application can register a function to watch or handle all exceptions for the application. Vectored handlers are not frame-based, therefore, you can add a handler that will be called regardless of where you are in a call frame. Vectored handlers are called in the order that they were added, after the debugger gets a first chance notification, but before the system begins unwinding the stack.\n  </p>\n </blockquote>\n <p>\n  The same page has only a laconic reference to the Add and Remove VCH APIs.\n </p>\n <p>\n  After some research and reverse engineering of ntdll, I realized VCHs and VEHs are quite similar in implementation. For example, see how\n  <code>\n   AddVectoredExceptionHandler\n  </code>\n  and\n  <code>\n   AddVectoredContinueHandler\n  </code>\n  are identical except for the\n  <code>\n   VectoredListIndex\n  </code>\n  , specifying they should be added to the second\n  <code>\n   VectorHandlerList\n  </code>\n  in the case of VCH:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/NcS2S.png\" rel=\"noreferrer\">\n   <img alt=\"AddVectoredExceptionHandler VS AddVectoredContinueHandler\" src=\"https://i.sstatic.net/NcS2S.png\"/>\n  </a>\n </p>\n <p>\n  Similarly,\n  <code>\n   RemoveVectoredExceptionHandler\n  </code>\n  and\n  <code>\n   RemoveVectoredContinueHandler\n  </code>\n  are identical except for the vectored handlers list index.\n </p>\n <p>\n  Inside\n  <code>\n   RtlpAddVectoredHandler\n  </code>\n  , the\n  <code>\n   VectoredListIndex\n  </code>\n  is used as an index in\n  <code>\n   _LdrpVectorHandlerList\n  </code>\n  , which is an array of size two of a linked list structure.\n </p>\n <p>\n  In the following picture we can see how\n  <code>\n   VectoredListIndex\n  </code>\n  is multiplied by the size of the list anchor object, and then added to\n  <code>\n   _LdrpVectorHandlerList\n  </code>\n  , which is the base offset of the array.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/WukZJ.png\" rel=\"noreferrer\">\n   <img alt=\"VectoredListIndex used as an array index\" src=\"https://i.sstatic.net/WukZJ.png\"/>\n  </a>\n </p>\n <p>\n  And now we're getting to the interesting part - where are VEH and VCH different?\n </p>\n <p>\n  If we walk up the cross references to\n  <code>\n   _LdrpVectorHandlerList\n  </code>\n  , we'll notice the two flows leading up to the add/remove functions are practically identical. Aside from those four APIs, we're left with only one other function, called\n  <code>\n   RtlpCallVectoredHandlers\n  </code>\n  which is undocumented.\n </p>\n <p>\n  It's pretty obvious from the name, but\n  <code>\n   RtlpCallVectoredHandlers\n  </code>\n  iterates over the vector (vector is selected according to the index) and calls all Handlers in a sequence. Once a Vectored Handler returns\n  <code>\n   EXCEPTION_CONTINUE_EXECUTION\n  </code>\n  the iteration is interrupted by prematurely returning from\n  <code>\n   RtlpCallVectoredHandlers\n  </code>\n  and execution resumes.\n </p>\n <p>\n  The sole function calling\n  <code>\n   RtlpCallVectoredHandlers\n  </code>\n  is\n  <code>\n   RtlDispatchException\n  </code>\n  , which is the main function dispatching exception handlers.\n </p>\n <p>\n  First, it executes all exception handlers, starting with the first Vectored Exception Handler to the last, and then going through all Structured Exception Handlers unfolding them through the stack. The first exception handler to return\n  <code>\n   EXCEPTION_CONTINUE_EXECUTION\n  </code>\n  (be it of type VEH or SEH) will stop the entire exception handlers execution process.\n </p>\n <p>\n  Like VEHs, when VCHs are called, they are called one by one until one of them returns\n  <code>\n   EXCEPTION_CONTINUE_EXECUTION\n  </code>\n  (just as when VEHs are called), which signals\n  <code>\n   RtlpCallVectoredHandlers\n  </code>\n  to\n  <code>\n   break\n  </code>\n  the Vectored Handlers calling loop. This is interesting because it means installing a Vectored Continue Handler as first lets you hide exceptions from subsequent VCHs.\n </p>\n <p>\n  Vectored Continue Handlers are called under the following circumstances:\n </p>\n <ol>\n  <li>\n   If an exception handler (either VEH or SEH) was called and returned\n   <code>\n    EXCEPTION_CONTINUE_EXECUTION\n   </code>\n  </li>\n  <li>\n   If for some reason SEH validation failed (See SafeSEH and related mechanisms), VCHs will also be called, but the execution will not continue afterwards.\nThis can be seen in the many flows that lead to the second\n   <code>\n    RtlpCallVectoredHandlers\n   </code>\n   call without setting\n   <code>\n    bl\n   </code>\n   to\n   <code>\n    1\n   </code>\n   and leaving it equal to zero before moving it to\n   <code>\n    al\n   </code>\n   and returning\n   <code>\n    false\n   </code>\n   . The calling function,\n   <code>\n    KiUserExceptionDispatcher\n   </code>\n   will then call\n   <code>\n    ZwRaiseException\n   </code>\n   if the value returned by\n   <code>\n    KiUserExceptionDispatcher\n   </code>\n   is\n   <code>\n    false\n   </code>\n   .\n   <a href=\"https://i.sstatic.net/5Xss7.png\" rel=\"noreferrer\">\n    <img alt=\"enter image description here\" src=\"https://i.sstatic.net/5Xss7.png\"/>\n   </a>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "17",
            "user": "NirIzr",
            "time": "Mar 19, 2018 at 16:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kentzo",
                    "text": "<span class=\"comment-copy\">You say \"If an exception handler (either VEH or SEH) was called and returned EXCEPTION_CONTINUE_EXECUTION\". Did you <code>EXCEPTION_CONTINUE_SEARCH</code>? It does not make sense to call another handler after exception is handled.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Kentzo that's precisely the point of vectored <i>continue</i> handlers.</span>",
                    "time": null
                },
                {
                    "user": "Kentzo",
                    "text": "<span class=\"comment-copy\">The information I found on <a href=\"https://blogs.msdn.microsoft.com/zhanli/2010/06/24/c-tips-addvectoredexceptionhandler-addvectoredcontinuehandler-and-setunhandledexceptionfilter\" rel=\"nofollow noreferrer\">msdn</a> (see a comment by MS employee) contradicts with that.</span>",
                    "time": null
                },
                {
                    "user": "Kentzo",
                    "text": "<span class=\"comment-copy\">Nevermind: I think I misunderstood the comment. It's indeed only called as you state.</span>",
                    "time": null
                }
            ]
        }
    ]
}