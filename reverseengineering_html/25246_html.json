{
    "title": "ARM bx instruction branches to address not specified as argument",
    "link": "https://reverseengineering.stackexchange.com/questions/25246/arm-bx-instruction-branches-to-address-not-specified-as-argument",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm debugging an ARM cortex M4 (STM32F4) running FreeRTOS.\nInside the assembly FreeRTOS function\n  <code>\n   vPortSVCHandler\n  </code>\n  , there's a branch instruction\n </p>\n <pre><code>bx r14\n</code></pre>\n <p>\n  using GDB, I step through instruction by instruction and find that r14 (lr) contains the value\n  <code>\n   0xfffffffd\n  </code>\n  (not a valid address) immediately before the bx instruction is executed.\n </p>\n <p>\n  For some reason, GDB doesn't follow the\n  <code>\n   bx\n  </code>\n  instruction with\n  <code>\n   si\n  </code>\n  (hangs), but I'm still able to\n  <code>\n   step\n  </code>\n  via openOCD.  I find that the function that's branched to is in fact a valid function at address\n  <code>\n   0x08012abc\n  </code>\n  .\n </p>\n <p>\n  From the ARM docs on\n  <code>\n   bx\n  </code>\n  , its argument should be a register containing an address to branch to.\n </p>\n <p>\n  Clearly, I'm misunderstanding or looking at the wrong docs.\n </p>\n <p>\n  I tried tweaking\n  <code>\n   lr\n  </code>\n  with GDB just before the branch instruction.  Changing it to\n  <code>\n   0x0\n  </code>\n  or\n  <code>\n   0xfffffff7\n  </code>\n  results in a hard fault shortly after the branch.\n </p>\n <p>\n  How does this branch instruction, when called with a value of\n  <code>\n   0xfffffffd\n  </code>\n  , result in branching to a valid function at\n  <code>\n   0x08102abc\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "923",
    "tags": [
        "arm"
    ],
    "user": "RemarkableBucket",
    "time": "Jun 9, 2020 at 5:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Values around\n  <code>\n   FFFFFFFF\n  </code>\n  are used in Cortex-M for\n  <em>\n   <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/Babefdjc.html\" rel=\"nofollow noreferrer\">\n    exception returns\n   </a>\n  </em>\n  (ECX_RETURN). Currently defined values:\n </p>\n <ol>\n  <li>\n   <p>\n    0xFFFFFFF1 - return to Handler mode, restore state from main stack\n   </p>\n  </li>\n  <li>\n   <p>\n    0xFFFFFFF9 - return to Thread mode, restore state from main stack\n   </p>\n  </li>\n  <li>\n   <p>\n    0xFFFFFFFD - return to Thread mode, restore state from process stack\n   </p>\n  </li>\n </ol>\n <p>\n  So the actual branch address is taken from the stack (MSP or PSP, depending on the low bits of the value). See the linked document for more details.\n </p>\n <p>\n  Since GDB is mostly used for user-mode debugging, it does not expect such shenanigans and probably tries to set a breakpoint at the value of\n  <code>\n   LR\n  </code>\n  which naturally fails. OpenOCD knows about exceptions and is able to step properly.\n </p>\n</div>\n</body></html>",
            "votes": "12",
            "user": "Igor Skochinsky",
            "time": "Jun 10, 2020 at 7:44",
            "is_accepted": true,
            "comments": []
        }
    ]
}