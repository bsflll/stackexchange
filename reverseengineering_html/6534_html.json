{
    "title": "How to turn a .dll file into a .exe file for ollydbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/6534/how-to-turn-a-dll-file-into-a-exe-file-for-ollydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a dll file which I want to analyze/debug. To do that, I use ollydbg. But when I open the file with ollydbg then the following message appears :\n </p>\n <pre><code>    File 'C:\\..........\\Conficker.exe' is a Dynamic Link Library. Windows can't\n    execute DLLs directly. Launch LOADDL.EXE ?\n</code></pre>\n <p>\n  (notice: as you can see, the mentioned dll file is a sample of Conficker)\nIn a analysis paper about Conficker, they wrote the following:\n </p>\n <pre><code>    After unpacking, we find that the UPX packed binary file is not the original code\n    but incorporates an additional layer of packing. We use IDA Pro to remove this \n    second layer of obfuscation and dump the original code from memory. \n    To do so, we first run the Conficker service, snapshot the core Conficker library\n    as a memory image, and from this code segment reconstruct a complete Windows\n    executable program. The program requires a PE-header template, \n    and we compute an entry point that allows the program to enter Conficker's code \n    segment. \n    (source : http://mtc.sri.com/Conficker/)\n</code></pre>\n <p>\n  Honestly, although I want to learn all that things, I didn't understand what they try to explain or how one can reach that. The only thing what I understand, that they somehow turn the dll into a \"complete Windows executable program\". \nSo, I search in the inet and I found this:\n </p>\n <pre><code>   We all have our own methods for debugging DLLs, and my personal choice is to modify \n   the DLL bit flag to turn it into an EXE to the eyes of the debugger \n   Among other PE editors, CFF Explorer from ntcore is a tool that allows to do that.\n   (source: http://blog.fortinet.com/post/the-art-of-unpacking-conficker-worm)\n</code></pre>\n <p>\n  So, I have downloaded CFF Explorer but I dont know how to \"modify the DLL bit flag to turn it into an EXE.\" Although I search in the inet for that I couldnt find anything about that.\n </p>\n <p>\n  Can somebody help me?\n </p>\n <p>\n  best regards,\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "3k",
    "tags": [
        "dll",
        "exe"
    ],
    "user": "user3097712",
    "time": "Oct 24, 2014 at 20:12",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n They didn't just flip a bit to turn the DLL into an EXE, and though you could do that, it wouldn't help you in this context. As the text you pasted above says, they deobfuscated a second layer of packing (after UPX), dumped the unpacked code from memory, and wrote a PE header for it. This is not the same as turning a DLL into an EXE.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user3097712",
            "text": "<html><body><span class=\"comment-copy\">\n ok, then I need to read some paper about obfuscation and deobfuscation. And how one can write a PE header for a file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sigtran",
            "text": "<html><body><span class=\"comment-copy\">\n - Understating PE struct is a must really -- for changing dll flag and lots more :)   -\n <a href=\"http://www.woodmann.com/collaborative/knowledge/images/Bin_Portable_Executable_File_Format_%E2%80%93_A_Reverse_Engineer_View_2012-1-31_16.43_CBM_1_2_2006_Goppit_PE_Format_Reverse_Engineer_View.pdf\" rel=\"nofollow noreferrer\">\n  Portable Executable File Format â€“ A Reverse Engineer View\n </a>\n - Also there tools like shellcode2exe, ImpREC and OllyDump plugin that can help you rconstruct the PE.   - In CFF Explorer, to change from DLL to EXE you just need to open a file --> File Header --> Characteristics -- Done\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}