{
    "title": "What time structure is this?",
    "link": "https://reverseengineering.stackexchange.com/questions/5947/what-time-structure-is-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an existing software, with no source and possible editing. It contains a grid (looks like an old DevExpress one, the software itself is created in Delphi 7). Grid content is stored in the memory, which I have to read and modify externally.\n </p>\n <p>\n  I've successfully decoded the structure, except for date+time fields. It's stored in 8 bytes. I've checked all common structures, such as\n  <code>\n   TDateTime\n  </code>\n  as a double variable,\n  <code>\n   TTimeStamp\n  </code>\n  as two integers,\n  <code>\n   TFileTime\n  </code>\n  , Windows OLE, MySQL timestamp, other timestamps, but found nothing closely relative.\n </p>\n <p>\n  I can input any data and check the result in the table, so I am sure data is correct.\n </p>\n <p>\n  I've provided examples of data times in bytes and the result in grid. Can test any other, if it helps.\n </p>\n <pre><code>00 00 00 00 00 00 00 43 - 04.03.17840 11:03:41\n00 00 00 00 00 00 00 41 - \"0.131072 is not a valid timestamp\"\n00 00 00 00 00 00 00 42 - 09.04.001 10:05:34\n00 00 00 00 00 00 67 42 - 15.01.0026 16:33:02\n00 00 00 00 00 00 CB 42 - 22.06.1882 18:24:59\n00 00 00 00 00 00 CC 42 - 28.02.1952 10:12:35\n00 00 00 00 00 E4 CC 42 - 22.03.2014 07:24:02\n00 00 00 00 00 E5 CC 42 - 29.06.2014 17:29:37\n00 00 00 00 3D E5 CC 42 - 23.07.2014 10:03:17\n00 95 1E 7E 3D E5 CC 42 - 23.07.2014 14:38:48\n00 87 F9 7C 3D E5 CC 42 - 23.07.2014 14:36:18\n00 4C 99 57 38 E5 CC 42 - 21.07.2014 14:38:26\n80 55 0C 2E 3E E4 CC 42 - 15.04.2014 10:57:32\n</code></pre>\n <p>\n  UPDATE 1:\nWeird differnce in the years mentioned in the comment lead to a discovery, that date is not strictly linear to the elder bytes. I've tested this:\n </p>\n <pre><code>00 00 00 00   00 00 CA 42 - 16.10.1812\n00 00 00 00   00 00 CB 42 - 22.06.1882\n00 00 00 00   00 00 CC 42 - 28.02.1952\n</code></pre>\n <p>\n  The difference between values is ~70 years (~25452 days)\n </p>\n <p>\n  And now this:\n </p>\n <pre><code>00 00 00 00   00 00 BA 42 - 23.11.0906\n00 00 00 00   00 00 BB 42 - 26.09.0941\n00 00 00 00   00 00 BC 42 - 30.07.0976\n</code></pre>\n <p>\n  The difference is actually ~35 years (~12726 days)\n </p>\n <p>\n  To sum it up, here's the breakdown:\n </p>\n <pre><code>00 00 00 00   00 00 BD 42 - 04.06.1011\n00 00 00 00   00 00 BE 42 - 06.04.1046 (+35 years)\n00 00 00 00   00 00 BF 42 - 07.02.1081 (+35 years)\n...\n00 00 00 00   00 00 C0 42 - 13.12.1115 (+35 years)\n00 00 00 00   00 00 C1 42 - 19.08.1185 (+70 years)\n00 00 00 00   00 00 C2 42 - 25.04.1255 (+70 years)\n...\n00 00 00 00   00 00 C8 42 - 02.06.1673 (+70 years)\n00 00 00 00   00 00 C9 42 - 08.02.1743 (+70 years)\n00 00 00 00   00 00 CA 42 - 16.10.1812 (+70 years)\n...\n00 00 00 00   00 00 CE 42 - 11.07.2091 (+70 years)\n00 00 00 00   00 00 CF 42 - 18.03.2161 (+70 years)\n...\n00 00 00 00   00 00 D0 42 - 24.11.2230 (+70 years)\n00 00 00 00   00 00 D1 42 - 07.04.2370 (+140 years)\n00 00 00 00   00 00 D2 42 - 19.08.2509 (+140 years)\n</code></pre>\n <p>\n  So it looks like the elder bits is rather some coeff, not the date directly\n </p>\n <p>\n  I've tested lesser bits, they seem to behave more logically:\n </p>\n <pre><code>00 00 00 00   00 00 CC 42 - 28.02.1952\n00 00 00 00   00 01 CC 42 - 06.06.1952\n00 00 00 00   00 02 CC 42 - 14.09.1952\n</code></pre>\n <p>\n  ~100 days\n </p>\n <pre><code>00 00 00 00   00 CC CC 42 - 09.09.2007\n00 00 00 00   00 CD CC 42 - 17.12.2007\n00 00 00 00   00 CE CC 42 - 26.03.2008\n</code></pre>\n <p>\n  ~100 days\n </p>\n <pre><code>00 00 00 00   00 FC CC 42 - 02.10.2020\n00 00 00 00   00 FD CC 42 - 09.01.2021\n00 00 00 00   00 FE CC 42 - 19.04.2021\n</code></pre>\n <p>\n  ~100 days\n </p>\n <p>\n  And for the fourth byte:\n </p>\n <pre><code>00 00 00 00   00 CC CC 42 - 09.09.2007 05:10:12\n00 00 00 00   01 CC CC 42 - 09.09.2007 14:29:26\n00 00 00 00   02 CC CC 42 - 09.09.2007 23:48:26\n</code></pre>\n <p>\n  ~9 hours\n </p>\n <pre><code>00 00 00 00   CC CC CC 42 - 27.11.2007 10:35:16\n00 00 00 00   CD CC CC 42 - 27.11.2007 19:54:30\n00 00 00 00   CE CC CC 42 - 28.11.2007 05:13:45\n</code></pre>\n <p>\n  ~9 hours\n </p>\n <p>\n  For the question on the breakdown of +1m, +1h, etc.\nIt's much harder to test, since I cannot input the random date and get its code, only the opposite. \nBut I can add the value manually, and test its internal structure. \nHere's what I managed to grab today:\n </p>\n <pre><code>00 90 D2 80   4A E5 CC 42 - 28.07.2014 15:54:50\n00 E3 D4 80   4A E5 CC 42 - 28.07.2014 15:54:51\n\n80 5D 48 81   4A E5 CC 42 - 28.07.2014 15:55:50\n80 5A 4B 81   4A E5 CC 42 - 28.07.2014 15:55:51\n\n80 D4 49 9C   4A E5 CC 42 - 28.07.2014 16:54:50\n00 8C 4C 9C   4A E5 CC 42 - 28.07.2014 16:54:51\n</code></pre>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "211",
    "tags": [
        "digital-forensics",
        "binary-format"
    ],
    "user": "AlexeiD",
    "time": "Jul 28, 2014 at 11:03",
    "comments": [
        {
            "user": "user1814",
            "text": "<html><body><span class=\"comment-copy\">\n Can you show the data where just one second/minute/day/month/year changed at a time?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n I suspect there is a typo in at least some of your values. The difference between CB 42 and CC 42 is about 70 years, which would mean the difference between 67 42 and CB 42 (CBh-67h=64h=100d) should be around 7000 years, which is not the case.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "AlexeiD",
            "text": "<html><body><span class=\"comment-copy\">\n @m0nhawk It's a bit hard, but I've added the info at the bottom of the edited post.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "AlexeiD",
            "text": "<html><body><span class=\"comment-copy\">\n @GuntramBlohm I've made an update, seems like elder bytes are not linear to the date.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The non-linearity is a clue that it's a floating-point encoding. If you are familiar with looking at floating point values in memory dumps, the most significant byte is often in the\n  <code>\n   0x3f\n  </code>\n  -\n  <code>\n   0x4f\n  </code>\n  range, representing values from\n  <code>\n   3e-5\n  </code>\n  to\n  <code>\n   2e77\n  </code>\n  for doubles. In this case, it's little-endian.\n </p>\n <p>\n  e.g.\n  <code>\n   00 4C 99 57 38 E5 CC 42 - 21.07.2014 14:38:26\n  </code>\n  -> unpacks to ->\n  <code>\n   63541636706968.0\n  </code>\n </p>\n <p>\n  Working the other direction, let's examine the standard encoding for that date.\nUNIX\n  <code>\n   time_t\n  </code>\n  (seconds since 1970 epoch) =\n  <code>\n   1405949906\n  </code>\n  .\n </p>\n <p>\n  That's four orders of magnitude too small. Not good; perhaps we could try seconds since 1 AD. Assuming\n  <code>\n   365.2425\n  </code>\n  days per year for now, and remembering day, month and year numbering starting at 1:\n </p>\n <pre><code>(21-1 + 181 days before July + (2014-1AD)*365.2425)*86400 sec/day + 14*3600 + 38*60 + 26 = 63541563483.0\n63541563483.0 * 1000 = 63541563483000.0\n</code></pre>\n <p>\n  That's similar to the decoded number, but it's off by ~1000x; the encoded value must be in milliseconds. The prediction is not precise, we are off by approximately 1 day. We should still test if it continues to work on other values.\n </p>\n <pre><code>00 00 00 00 00 00 CB 42 - 22.06.1882 18:24:59\ndecoding: 59373627899904.0\nprediction: 59373553811000.0\n\n00 00 00 00 00 00 67 42 - 15.01.0026 16:33:02\ndecoding: 790273982464.0\nprediction: 790192982000.0\n</code></pre>\n <p>\n  Close, but again off by approximately 1 day. We have to examine our assumptions. The Gregorian calendar system we use with its leap years only extends back to 1582, but this system has a zero point before that. We have to guess what the programmer did to extend this backwards to 1AD.\n </p>\n <p>\n  You can find the zero point by running floating-point zero (all zeros) through the program; it should show the exact date-time origin the programmer chose. If the program doesn't accept zero, you can use a very small double value like\n  <code>\n   DBL_MIN\n  </code>\n  . You also have to examine exactly how leap days are handled by the program, if it correctly considers the 400 year rule, and any implementation bugs.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "perror",
            "time": "Aug 17, 2014 at 7:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not looking at the first three plus\n  <code>\n   28.02.1952 10:12:35\n  </code>\n  ,\n  <code>\n   29.06.2014 17:29:37\n  </code>\n  ,\n  <code>\n   15.04.2014 10:57:32\n  </code>\n  lines, I get the following:\n </p>\n <p>\n  The value on the right is in 1/128000 seconds, with an offset to UNIX timestamps of 4805619185047532800 seconds. So, we have:\n </p>\n <pre><code>yourtime =  4805619185047532800 +128000 * unixtime\n</code></pre>\n <p>\n  It does not look familiar though, that would mean\n  <code>\n   t=0\n  </code>\n  -> 1187749 BC.\n </p>\n <p>\n  If you leave off the\n  <code>\n   0x42\n  </code>\n  then\n  <code>\n   t=0\n  </code>\n  would be 10363 BC, still not a familiar number.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Jul 28, 2014 at 11:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}