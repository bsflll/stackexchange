{
    "title": "Defeat QueryPerformanceCounter as Anti-Debugging trick",
    "link": "https://reverseengineering.stackexchange.com/questions/6879/defeat-queryperformancecounter-as-anti-debugging-trick",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The sample I try to analyze starts with PUSHAD. It begins with:\n </p>\n <pre><code>   PUSHAD\n   MOV ESI, unbr002.0109D000\n   LEA EDI, DWORD PTR DS:[ESI+FFEA4000]\n   MOV DWORD PTR DS: [EDI+208C04], 8C1FE\n   PUSH EDI\n   OR EBP, FFFFFFFF\n   JMP SHORT unbr002.0117C2EA\n   NOP\n   NOP\n   ....\n</code></pre>\n <p>\n  What I did:\nFirst, I try the ESP trick   (step over PUSHAD, double-click on ESP -> Follow in Dump etc. ) which does not work.\nThen, I search the counterpart of PUSHAD, the POPAD instruction and put a breakpoint on it. After that, I click on F9 to run the program until the BP is hit. Then I saw this:\n </p>\n <pre><code>  POPAD\n  LEA EAX, DWORD PTR DS:[ESP-80]\n  PUSH 0\n  CMP ESP, EAX\n  JNZ SHORT unbr002.0117C4BC        a)\n  SUB ESP, -80\n  JMP unbr002.01048A05              b) \n  JMP SHORT unbr002.0117C4CC\n  PUSH ESI\n  MOV ESI, unbr002.010961A4\n  CLD\n  LODS DWORD PTR DS:[ESI]\n  TEST EAX, EAX\n  JE SHORT unbr002.0117C4E5\n  PUSH 3\n  POP ECX\n  PUSH DWORD PTR SS:[ESP+10]\n  LOOPD SHORT unbr002.0117C4D3\n  POP ESI\n  RETN 0C\n  DB 00\n  DB 00\n  .....\n  .....\n</code></pre>\n <p>\n  So, I know that after POPAD, a so called tail jump will come to bring me to the OEP.\nWhen I go to a) nothing happens, I mean the jump is not taken.\n </p>\n <p>\n  When I go to b), (I did\n  <strong>\n   not\n  </strong>\n  step over/into, only click on ENTER) then it jumps to the following place:\n </p>\n <pre><code> CALL unbr002.01055C47\n</code></pre>\n <p>\n  Here, I also look into the function at 01055C47 which looks like this(I will only type the relevant part of this because the function is too big):\n </p>\n <pre><code> .....\n CALL DWORD PTR DS:[109407C]       kernel32.GetSystemTimeAsFileTime\n MOV ESI, DWORD PTR SS:[EBP-4]\n XOR ESI, DWORD PTR SS:[EBP-8]\n CALL DWORD PTR DS:[10940F4]       kernel32.GetCurrentProcessId\n XOR ESI, EAX\n CALL DWORD PTR DS:[10940E0]       kernel32.GetCurrentThreadId\n XOR ESI, EAX \n CALL DWORD PTR DS:[10942BC]       kernel32.GetTickCount\n XOR ESI, EAX\n LEA EAX, DWORD PTR SS:[EBP-10]\n PUSH EAX\n CALL DWORD PTR DS:[109442C0]      kernel32.QueryPerformanceCounter\n ...\n ...\n ...\n</code></pre>\n <p>\n  So, from other sources I have read that these functions above GetTickCount, etc. are anti-debug tricks. But I could not find a way to defeat them. \nSo, look at b) again. \nNow, when I step over the JMP instruction at b) then the process is terminated.\n </p>\n <p>\n  my question:\nWhat must I do to handle that problem?\n </p>\n <p>\n  PS: \na) I have the ollydbg plugin OllyAdvanced, and I have checked the box TerminateProcess in ollyAdvanced without a success.\nb) I also know that it is packed with UPX, but I try to make my own learn process a little bit harder and for that reason I try to manuelly unpack it\n </p>\n <p>\n  best regards,\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "assembly",
        "anti-debugging"
    ],
    "user": "user3097712",
    "time": "Dec 23, 2014 at 19:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <pre><code> .....\n CALL DWORD PTR DS:[109407C]       kernel32.GetSystemTimeAsFileTime\n MOV ESI, DWORD PTR SS:[EBP-4]\n XOR ESI, DWORD PTR SS:[EBP-8]\n CALL DWORD PTR DS:[10940F4]       kernel32.GetCurrentProcessId\n XOR ESI, EAX\n CALL DWORD PTR DS:[10940E0]       kernel32.GetCurrentThreadId\n XOR ESI, EAX \n CALL DWORD PTR DS:[10942BC]       kernel32.GetTickCount\n XOR ESI, EAX\n LEA EAX, DWORD PTR SS:[EBP-10]\n PUSH EAX\n CALL DWORD PTR DS:[109442C0]      kernel32.QueryPerformanceCounter\n ...\n</code></pre>\n  <p>\n   So, from other sources I have read that these functions above GetTickCount, etc. are anti-debug tricks.\n  </p>\n </blockquote>\n <p>\n  The code above is not being used as an anti-debug trick, but rather to calculate a\n  <a href=\"http://en.wikipedia.org/wiki/Buffer_overflow_protection#Canaries\" rel=\"nofollow\">\n   security cookie (also known as a canary)\n  </a>\n  .\n </p>\n <p>\n  See\n  <a href=\"https://books.google.com/books?id=aidqstv38G8C&pg=PA167\" rel=\"nofollow\">\n   https://books.google.com/books?id=aidqstv38G8C&pg=PA167\n  </a>\n  for a decompilation of the code above, and\n  <a href=\"http://msdn.microsoft.com/library/aa290051.aspx\" rel=\"nofollow\">\n   Compiler Security Checks In Depth\n  </a>\n  for more information on security cookies as implemented in Microsoft's Visual C++ compiler.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Dec 23, 2014 at 19:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}