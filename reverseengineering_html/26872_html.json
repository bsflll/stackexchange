{
    "title": "IDA HexRays: signed/unsigned types and 32/64 bits dont match assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/26872/ida-hexrays-signed-unsigned-types-and-32-64-bits-dont-match-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is assembly:\n </p>\n <pre><code>  mov     rdi, [r13+rax*8+0]\n  sub     rdi, rcx\n  cvtsi2sd xmm0, rdi\n  movsd   qword ptr [r11+rax*8], xmm0\n  cvtsi2sd xmm0, qword ptr [r14+rax*8]\n  movsd   qword ptr [rsi+rax*8], xmm0\n  add     rax, 1\n</code></pre>\n <p>\n  And here is an output from Hexrays decompiler\n </p>\n <pre><code>{\n      v32[v34] = (double)(LODWORD(v11[v34]) - (int)var1);\n      v33[v34] = (double)(int)v10[v34];\n      ++v34;\n}\n</code></pre>\n <p>\n  issue:\nv10, v11 and var1 are declared as __int64* and __int64. Any ideas why decompiler converts them to 32 bit integers? I see those being moved to 64 bit registers. This is an ELF64 executable\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "292",
    "tags": [
        "hexrays"
    ],
    "user": "pete71",
    "time": "Jan 26, 2021 at 2:43",
    "comments": [
        {
            "user": "wisk",
            "text": "<html><body><span class=\"comment-copy\">\n Can you show how rcx was initialized? It could make sense if it's by\n <code>\n  movsxd rcx, ...\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Orwellophile",
            "text": "<html><body><span class=\"comment-copy\">\n IDA has never been great with floating point numbers, and even if it were -- there are some really crazy programming tricks (often used in graphics and gaming) that rely on treating floats as integers (and back).  That said, IDA can usually be bought into line if all the variables in question are defined as floats (or arrays of floats --\n <code>\n  vectors\n </code>\n ), and/or some structures (e.g.\n <code>\n  struct vec4 { float f[4]}; }\n </code>\n ) sprinkled around the place.   I would (for example) try defining v32, v33 and v11 as\n <code>\n  vec4\n </code>\n and see what it shows.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hard to say without the binary or at least the full function but possibly it happens because of\n  <code>\n   cvtsi2sd\n  </code>\n  .\n </p>\n <p>\n  According to the documentation, the instruction treats the input as “signed doubleword integer”. (Doubleword is 32-bit on Intel)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 26, 2021 at 8:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pete71",
                    "text": "<span class=\"comment-copy\">Makes sense, the only problem is with LODWORD which converts it to UNSIGNED integer.  I tried replacing LODWORD with (int) and recompiled coded behaves just like the the original binary.  But with LODWORD results are incorrect</span>",
                    "time": null
                }
            ]
        }
    ]
}