{
    "title": "Help to identify intermediate language",
    "link": "https://reverseengineering.stackexchange.com/questions/33035/help-to-identify-intermediate-language",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have scripts written in PineScript, TradingView's proprietary DSL. Ultimately, Pinescript code gets translated to an intermediate language (IL) presentation, below is an example:\n </p>\n <p>\n  <code>\n   PineScript\n  </code>\n </p>\n <pre><code>//@version=5\nindicator(title='ScannerData', shorttitle='_SD_')\n// Bond Yield to price\nvar bond_ticker = str.substring(syminfo.ticker, 0, str.length(syminfo.ticker) - 1)\nbond_price = request.security(syminfo.prefix + \":\" + bond_ticker, timeframe.period, close, ignore_invalid_symbol=true)\nplot(bond_price, title=\"Bond.Price\")\nchange_abs = bond_price - bond_price[1]\nplot(change_abs, title=\"Bond.Change\")\nfloat change_percent = na\nif not(bond_price[1] < 0) and not(bond_price < 0)\n    change_percent := change_abs / bond_price[1] * 100\nplot(change_percent, title=\"Bond.Change.%\")\n</code></pre>\n <p>\n  <code>\n   Intermediate Language\n  </code>\n </p>\n <pre><code>close~$0;$0();#0~$0~$1-$1@1~na():f~v:if(!($1@1<0)&&!($1<0)){$3=($2/$1@1)*100~}~$3~$1!$2!$5;t:str.substring(ticker,0,str.length(ticker):i-1):t~t:sc(t:syminfo.prefix,t:':',t:$3):t~i:na():f~sym($4,period,period,0,0,1,'NONE',0,0,$5)|$1()|s3:$2($7):s3~$9!$10!$11\n</code></pre>\n <p>\n  I am puzzled what kind of language it is? I am familiar with other ILs, e.g. Microsoft or Java, however the aforementioned code bears no resemblance to either.\n </p>\n <p>\n  It is relatively straightforward that the statement\n </p>\n <pre><code>if not(bond_price[1] < 0) and not(bond_price < 0)\n    change_percent := change_abs / bond_price[1] * 100\n</code></pre>\n <p>\n  is translated to\n </p>\n <pre><code>v:if(!($1@1<0)&&!($1<0)){$3=($2/$1@1)*100~}\n</code></pre>\n <p>\n  I can deduce that\n  <code>\n   bond_price\n  </code>\n  is translated to\n  <code>\n   $1\n  </code>\n  ,\n  <code>\n   change_percent\n  </code>\n  to\n  <code>\n   $3\n  </code>\n  ,\n  <code>\n   change_abs\n  </code>\n  to\n  <code>\n   $2\n  </code>\n  .  Array index\n  <code>\n   bond_price[1]\n  </code>\n  becomes\n  <code>\n   $1@1\n  </code>\n  . And so for.\n </p>\n <p>\n  But I wonder what engine or technology would consume such a statement?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "77",
    "tags": [
        "decompilation",
        "byte-code"
    ],
    "user": "drbolsen",
    "time": "Jun 16, 2024 at 16:19",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n googling pinescript intermediate language points to\n <a href=\"https://www.tradingview.com/pine-script-docs/en/v5/writing/Limitations.html\" rel=\"nofollow noreferrer\">\n  pinescript manual section limitations\n </a>\n which says it uses tokenized intermediate language probably some kind of natural language processing  like let  token$1 = bond_price  $1@1 = array access\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "got trolled too much this week",
            "text": "<html><body><span class=\"comment-copy\">\n They say the scripts run (only) on their servers. Some proprietary backend, of course. It's somewhat of a 2nd/3rd year in college project to write an interpreter for something as simple as that. Or even a compiler in a compiler class. How optimized it would be is another question. Possibly they translate to Java, LLVM or something else if they care more about performance.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}