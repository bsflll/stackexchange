{
    "title": "signed and unsigned integers as bits in memory",
    "link": "https://reverseengineering.stackexchange.com/questions/23290/signed-and-unsigned-integers-as-bits-in-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking into making a memory scanner for values an while doing some research I came across this the piece of information that unsigned integers allocate all 8 bits for the number while signed ones save the first bit for the sign\n </p>\n <p>\n  My question is, how can I distinguish between them in memory?\n </p>\n <p>\n  I can interpret the number both ways, but how could I tell if it was meant to be negative or positive?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "486",
    "tags": [
        "binary"
    ],
    "user": "SoLux",
    "time": "Feb 19, 2020 at 6:47",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n you cant tell without context 0xdeadbeef can be 3735928559 or -559038737 or for that matter float or double  try .formats 0xdeadbeef in windbg or take a look at datainspector in hxd for various interpretations of a single DWORD\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   int\n  </code>\n  is a C level type and doesn't actually exist on a binary level. In a binary level, there are only bytes. What is interesting for you, is how those bytes are treated - if they are treated as unsigned int, signed int, char or any other data type.\n </p>\n <p>\n  For example, Let's look at the following ARM assembly sample:\n </p>\n <pre><code>ROM:40061B00                 CMP.W   R1, #0x60\nROM:40061B04                 BGT     loc_80061B22\n</code></pre>\n <p>\n  The value in\n  <code>\n   R1\n  </code>\n  is compared to 0x60.\n  <code>\n   R1\n  </code>\n  is a register that holds 32-bit (4 bytes) value. The value doesn't have any information about its signedness. But what is important is the operation that done at\n  <code>\n   40061B04\n  </code>\n  .\n </p>\n <p>\n  From ARM\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473m/dom1359731162080.html\" rel=\"nofollow noreferrer\">\n   specification\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   HS    Unsigned higher or same\n  </p>\n  <p>\n   GT    Signed greater than\n  </p>\n </blockquote>\n <p>\n  So we have a compare at\n  <code>\n   40061B00\n  </code>\n  and then a decision if to branch to a certain location.\nIn our case, the mnemonic is\n  <code>\n   BGT\n  </code>\n  - meaning that we will branch if the signed comparison is greater than - therefore our\n  <code>\n   R1\n  </code>\n  treated as signed int. If the instruction was\n  <code>\n   BHS\n  </code>\n  - the comparison would be unsigned, and the value in\n  <code>\n   R1\n  </code>\n  would have been treated as an unsigned int.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "SoLux",
                    "text": "<span class=\"comment-copy\">i do know i can tell contextually based on the assembly but I do not yet have the skills to write a decompiler and interpret all these instructions and such</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Short answer - you can't. To interpret memory contents you need to see the structure layout. It could be a float, an integer, a structure, a char array  or even a meaningless value on the border of two structures.\n </p>\n <p>\n  Long answer - you don't always have to.\n </p>\n <p>\n  About signed values, fundamentally, the system represents negative integers by counting backward and wrapping around - I find this much easier than always having to think about the sign bit. A nice consequence of this model is that all positive values (in signed range) are represented the same way, regardless of signed/ unsigned choice.\n </p>\n <p>\n  This means that if you find a positive value less or equal than (MAX_VALUE / 2 - 1), you can output it without worrying about signed/unsigned values. If you find a number greater than that, it's either that unsigned value or a signed value of (x - MAX_VALUE). MAX_VALUE is the largest unigned integer for your type.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "PhilipRoman",
            "time": "Feb 19, 2020 at 7:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}