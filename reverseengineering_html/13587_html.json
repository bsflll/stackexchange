{
    "title": "Getting Access Violation when patching a program",
    "link": "https://reverseengineering.stackexchange.com/questions/13587/getting-access-violation-when-patching-a-program",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm very very newbie in assembly / ollydbg / reverse engineering. I'm totally lost with this error.\n </p>\n <p>\n  I have created a simple program in Delphi, just to explore in ollydbg. Here is the program's code:\n </p>\n <pre><code>procedure TForm1.SpeedButton1Click(Sender: TObject);\nvar somevalue : string;\nbegin\n    somevalue := 'this is a value';\n    showmessage(somevalue);\nend;\n</code></pre>\n <p>\n  So I attached it in olly and searched for the string \"this is a value\" and reached this point:\n </p>\n <pre><code>MOV EDX, 0045212C\n</code></pre>\n <p>\n  the address\n  <code>\n   0x45212C\n  </code>\n  contains my string, so I decide to put another value in an empty address (I choose 00400400).\n </p>\n <p>\n  The problem is that when I change the code to\n </p>\n <pre><code>MOV EDX, 400400\n</code></pre>\n <p>\n  I get the following error:\n </p>\n <blockquote>\n  <p>\n   Access violation when writing to [004003F8]\n  </p>\n </blockquote>\n <p>\n  Which contains the following assembly line:\n </p>\n <pre><code>LOCK INC DWORD PTR DS:[EDX-8]\n</code></pre>\n <p>\n  What does this error mean and how can I fix it?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "x86",
        "patching"
    ],
    "user": "Jo√£o Telles",
    "time": "Oct 1, 2016 at 21:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This error means that the processor tried to access the address at\n  <code>\n   0x004003F8\n  </code>\n  and failed. The access type was write.\nThis can happen because that address's page is protected and cannot be written to, or because the address is unallocated.\n </p>\n <p>\n  I'ts crusial to note that the address,\n  <code>\n   0x004003F8\n  </code>\n  is eight bytes before your chosen address (\n  <code>\n   0x00400400\n  </code>\n  ). I guess the access violation happened because that address is unallocated.\n </p>\n <p>\n  The best guess given the information you provided is that although the textual string starts at that specific address, it is only part of the bigger in-memory structure that begins before the actual text.\n </p>\n <p>\n  This is actually quite common, and correct for all managed/object oriented programming languages. and is indeed the cause for Delphi's\n  <code>\n   string\n  </code>\n  objects, as described\n  <a href=\"http://docwiki.embarcadero.com/RADStudio/Seattle/en/Internal_Data_Formats#Long_String_Types\" rel=\"nofollow\">\n   here\n  </a>\n  including memory representation specifics.\n </p>\n <p>\n  The line in which you get an access viloation is also of some interesting capacity and could be unclear to the uneducated reverser.\n </p>\n <p>\n  <code>\n   LOCK INC DWORD PTR DS:[EDX-8]\n  </code>\n </p>\n <p>\n  And here's the instruction's parts described one by one:\n </p>\n <ol>\n  <li>\n   <p>\n    <code>\n     LOCK\n    </code>\n    is an instruction prefix that modifies the instruction following it, which is assumed to be preforming a read/modify/write operation. It guarantees the instruction following it is atomic, and prevents race conditions with other instructions modifying the same memory address.\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     INC\n    </code>\n    has a single\n    <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"nofollow\">\n     operand\n    </a>\n    (either a register or a memory address) and increases it by one.\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     DWORD\n    </code>\n    marks the provided\n    <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"nofollow\">\n     operand\n    </a>\n    points to a double-word value (that is, 4 bytes).\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     DS:\n    </code>\n    tells the address is in the data segment. This became quite redundant in 32 and 64 bit architectures so you can normally just ignore it.\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     [EDX-8]\n    </code>\n    is the actual\n    <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"nofollow\">\n     operand\n    </a>\n    , and represents \"the address 8 bytes before the value currently in\n    <code>\n     EDX\n    </code>\n    .\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Sep 30, 2016 at 23:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">And note that the <code>[edx-8]</code> accesses the field that, in the description, is called <b>reference count</b>. As <code>lock</code> is used to make an instruction multithreading-safe, this makes sense as the string reference count is incremented whenever a new reference to the string gets created. To answer your question about how to fix it: copy your string to <code>4000040C</code>, and copy the 12 bytes in front of the original string to <code>40000400</code>. Don't forget to adjust the string length at <code>40000008</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}