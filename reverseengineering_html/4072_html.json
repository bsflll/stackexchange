{
    "title": "How to modify/replace a non exported function in a native code dll",
    "link": "https://reverseengineering.stackexchange.com/questions/4072/how-to-modify-replace-a-non-exported-function-in-a-native-code-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I disassembled a misbehaving dll with IDA and identified the faulty code. Now I want to go one step further and replace the function with a self-written, hopefully less faulty one. The dll I'm talking about is written in C/C++ and the function in question is not exported.\n </p>\n <p>\n  What would be a practicable way to overwrite/replace this function along with relocation information and all? Everything I found on the net was about rebuilding MSIL dll's.\n </p>\n <p>\n  My guess would be to write a new function in assembler, assemble it, create a\nnew section in the dll, put the code there and somehow introduce a call to the new\nfunction at the beginning of the original implementation. But I don't know these\nsteps would exactly look or how to merge the relocation info etc.\nOr is there a better solution?\nAre there any primers or tools to help me get such a thing done?\n </p>\n <p>\n  Edit: Meanwhile I found articles about similar topics\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.codeproject.com/Articles/12532/Inject-your-code-to-a-Portable-Executable-file\" rel=\"nofollow\">\n    Injecting code into a PE file\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.codeproject.com/Articles/24417/Portable-Executable-P-E-Code-Injection-Injecting-a\" rel=\"nofollow\">\n    Injecting a C compiled application into a PE file\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 2,
    "views": "3k",
    "tags": [
        "dll"
    ],
    "user": "user2011659",
    "time": "Apr 16, 2014 at 10:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think you have 4 options here:\n </p>\n <ol>\n  <li>\n   Overwrite the function in assembler using OllyDbg, IDA Pro or any other tool. However, you may not have enough space.\n  </li>\n  <li>\n   Insert a jmp to another place where you have enough space to do this. You will likely need to find for \"holes\" between sections where you can put your code.\n  </li>\n  <li>\n   Add a new section to the PE/ELF file, mark it as executable and then put a jmp in the function you want to overwrite to go to your new code, that will be in the new section. You can make it as big as you need, as long as you rebuild correctly the PE/ELF header.\n  </li>\n  <li>\n   The way I like the most: overwrite the function with the assembly code to load another library, resolve a function exported by this library and call this function. The other library would be one that you can write in the high level language you prefer as long as you take care of the calling conventions, etc...\n  </li>\n </ol>\n <p>\n  The option #4 is the best because it allows you to write in high level code your logic and you only need to write in assembler the LoadLibrary (or dlopen), GetProcAddress and the final calling code. And only once. Then you can modify as many times as you want the library with your code.\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "joxeankoret",
            "time": "Apr 17, 2014 at 7:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2011659",
                    "text": "<span class=\"comment-copy\">Could you please clarify some points for me? Ad 1-3: Is it right that I can't use absolute addresses for jumps without also modifying relocation information? So how do I jump into another section or refer to data sections etc? Ad 4 and general: Are there any papers/books about that?</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">You can use absolute addresses as long as you don't move the sections (otherwise, except for a DLL, you would need to relocate all the code). As for papers/books on this topic, I don't know, sorry.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After putting more thorough thinking into this I decided to go with option 1 in joxeankoret's list. As the main focus of the fix is reordering some actions and the code is interspersed with debug logging calls I might get away with some pc relative short jumps overwriting the debug code.\n </p>\n <p>\n  Some additional info to extend joxeankoret's answer and my comment:\n </p>\n <p>\n  One hardcore solution to the absolute address problem seems to be to completely\n  <a href=\"https://stackoverflow.com/questions/8545023/what-happens-if-i-delete-the-relocation-table-address-from-pe-header\">\n   remove the relocation section\n  </a>\n  .\n </p>\n <p>\n  Another possiblity is to use the\n  <a href=\"https://github.com/gta126/Relocation-Section-Editor\" rel=\"nofollow noreferrer\">\n   Relocation Section Editor\n  </a>\n  to manually edit/add/remove the relocations.\n </p>\n <p>\n  Regarding option 4, there seems to be the possibility to\n  <a href=\"https://stackoverflow.com/questions/3800873/is-import-address-table-of-pe-per-dll-or-per-exe\">\n   edit the PE import address table\n  </a>\n  to omit the LoadLibrary/GetProcAddress code.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}