{
    "title": "In reverse engineering, what does it mean to \"patch a file\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/21885/in-reverse-engineering-what-does-it-mean-to-patch-a-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been solving some crackmes, and every file that I download, in the \"instructions\" says: \"Patching is obviously not allowed\". What does that mean? And how does one patch a file?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "patching",
        "patch-reversing",
        "crackme"
    ],
    "user": "unc4nny",
    "time": "Aug 14, 2019 at 3:24",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n In simple term, patching is as same as editing a file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Given the context, I guess the idea is to no allow \"cheating\" by making ones cracking job easier using well-established techniques? I am not sure how to interpret it, though. Is patching not allowed in the executable image on disk? Not anywhere? What about automated kinds of instrumentation or techniques such as hooking,\n <code>\n  LD_PRELOAD\n </code>\n and friends? ...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L generally it means a submitted solution to the crackme challenge that relies on patching (static file modification) won't be accepted by the crackme author. I think DLL injection and such usually is ok unless specifically stated by the crackme author that it isn't. (I've had a lot of success using\n <code>\n  LD_PRELOAD\n </code>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n To OP, can you share the crackme link?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L No problem, and your right,\n <code>\n  LD_PRELOAD\n </code>\n is a beautiful thing. I forgot to mention that the reason it is usually acceptable is that if DLL injection is something the crackme author is concerned about, they will provide a statically-linked binary rather than saying \"No LD_PRELOAD\".\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Following quote comes from\n  <a href=\"https://unix.stackexchange.com/questions/17553/meaning-of-patching-binary-files\">\n   unix.stackexchange\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   To patch a file means to modify it, with the connotation that the modification is generally small.\n  </p>\n </blockquote>\n <p>\n  So, patching the executable is a process of changing its content usually performed for changing its original behaviour.\n </p>\n <p>\n  <em>\n   Patching is obviously not allowed\n  </em>\n  means that the author of a particular crackme wants you to crack it without modifying its content. For instance, consider a simple program:\n </p>\n <pre><code>ask_user_for_password();\nread_input();\nif (isPasswordCorrect())\n    printf(“Congratulations, you have cracked it!\n”);\nelse\n    printf(“Wrong password! Try again!\n”);\n</code></pre>\n <p>\n  Of course one can patch it so that it always prints the\n  <em>\n   \"Congratulations [...]\"\n  </em>\n  message, but the point of this very simple crackme is to actually\n  <em>\n   find\n  </em>\n  that password somehow (by finding decryption key for example).\n </p>\n <p>\n  Generally, to patch a file, you want to:\n </p>\n <ol>\n  <li>\n   Find the place / instruction you want to change (it may be\n   <code>\n    jnz\n   </code>\n   to\n   <code>\n    jz\n   </code>\n   as @Axel Munoz said, but it may be a\n   <code>\n    jmp\n   </code>\n   to the location containing the code you want to be executed as well).\n  </li>\n  <li>\n   Find out what is the\n   <em>\n    machine code\n   </em>\n   representing the instruction you want to put there - it can be done by first compiling the program written in assembly and then disassembling it. If you are working on x86 architecture, you can use\n   <a href=\"https://defuse.ca/online-x86-assembler.htm\" rel=\"nofollow noreferrer\">\n    this site\n   </a>\n   as well.\n  </li>\n  <li>\n   Open the binary in a\n   <em>\n    hex editor\n   </em>\n   , find the offset where you want to put your code and just paste the machine code you obtained in the previous step.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "4",
            "user": "bart1e",
            "time": "Aug 13, 2019 at 16:27",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The term \"patching a [binary]\" means to modify the instruction set. For example if there is a conditional jump that requires some memory to be set to a specific value, instead of modifying the memory, which might be the objective of the crackme, I could simply patch the binary to always take that jump (either by changing the condition of the jump from\n  <code>\n   jnz\n  </code>\n  to\n  <code>\n   jz\n  </code>\n  ). Patching through a debugger easily allows me to change the instruction, save the new binary, and then run it.\n </p>\n <p>\n  <a href=\"https://oalabs.openanalysis.net/2017/10/22/quick-and-dirty-binary-patching-with-ida-and-a-hex-editor/\" rel=\"nofollow noreferrer\">\n   Here is some more info.\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "0xC0000022L",
            "time": "Aug 14, 2019 at 10:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Croll",
                    "text": "<span class=\"comment-copy\">You are pretty inaccurate by saying that patching means modifying instruction set, but link is good.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I honestly never understood the point of <i>inverting</i> the condition (<code>jnz</code> to <code>jz</code>). It seems odd to change one conditional jump into another conditional jump when an altogether unconditional jump exists ...</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">@0xC0000022L It may be useful when there is a bug in the program and you want to invert an if-else block for example to fix it. But I agree it’s rather rare case.</span>",
                    "time": null
                },
                {
                    "user": "Axel Munoz",
                    "text": "<span class=\"comment-copy\">@Croll I agree it's not the best way to phrase, how would you put it?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">I know what you mean (modifying code/logic in the binary), but \"instruction set\" refers to the set of instructions recognized by a CPU and is tied together with CPU architecture. For example the x86 instruction set is different from the MIPS instruction set</span>",
                    "time": null
                }
            ]
        }
    ]
}