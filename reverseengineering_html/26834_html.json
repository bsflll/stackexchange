{
    "title": "How to figure out functionality when doing Static Code Analysis in ASM?",
    "link": "https://reverseengineering.stackexchange.com/questions/26834/how-to-figure-out-functionality-when-doing-static-code-analysis-in-asm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When doing Static code analysis on a disassembled app, I usually end up seeing many calls to registers (CALL EAX for example), which is constructed in runtime, which leaves me clueless on how to decide/figure out what does the code do when the call is done.\n </p>\n <p>\n  I was wondering how do you guys go through this in extreme cases where dynamic analysis might not be an option.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "145",
    "tags": [
        "disassembly",
        "binary-analysis",
        "static-analysis"
    ],
    "user": "bolbawe",
    "time": "Jan 21, 2021 at 9:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Last year, I\n  <a href=\"https://www.msreverseengineering.com/blog/2020/8/31/an-exhaustively-analyzed-idb-for-comrat-v4\" rel=\"nofollow noreferrer\">\n   released an IDB\n  </a>\n  for a piece of large, complex malware written in C++, which made regular use of virtual functions, which produce patterns of indirect call instructions like the ones your question discusses. I conducted that analysis purely statically, and I may release more IDBs like it later this year that were also done via static analysis.\n </p>\n <p>\n  The short answer to your question is that you need to figure out where the indirect calls will resolve at runtime. C++ VTables make this process especially simple. If you can figure out the base type that is being used at the site of the indirect call, then according to the rules of the C++ type system, any class derived from that base type might legally be substituted for that base type at runtime. In other words:\n </p>\n <ol>\n  <li>\n   Reconstruct the inheritance hierarchy for the program under analysis.\n  </li>\n  <li>\n   For each class with a VTable, determine the address of its corresponding VTable.\n  </li>\n  <li>\n   While analyzing the program, determine the reach of the types used in the program.\n  </li>\n  <li>\n   At the call site of any given indirect call, combine all of the above information to determine the set of types that might be used, the addresses of the VTables for those types, and consequently the set of destinations for the indirect call.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Jan 22, 2021 at 7:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I had a\n  <strong>\n   bad\n  </strong>\n  practice in a similar case  10 years ago\n  <em>\n   (that's an obfuscated code of malware that I could not use debugger to analyze)\n  </em>\n  and I tried to write a simple CPU emulator to run that code\n  <em>\n   (because that time I didn't get a working opensource code or library so I decided a simple one)\n  </em>\n  .\n </p>\n <p>\n  Now we have some CPU emulator engine/framework\n  <em>\n   (unicorn engine,...)\n  </em>\n  so you could try in a similar easier way :) or if the code is \"simple\", you can dump & try to debug it like debug the shellcode.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "tuantm",
            "time": "Jan 21, 2021 at 17:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}