{
    "title": "Figure out with fopen",
    "link": "https://reverseengineering.stackexchange.com/questions/25447/figure-out-with-fopen",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Can anyone explain, why fopen takes as argument- not a file name- according to code takes some off_6A5D8C:\n </p>\n <pre><code>.text:00537F9F                 push    offset stru_6C4E40 ; FILE *\n.text:00537FA4                 call    _fclose\n.text:00537FA9                 push    offset aWt      ; \"wt\"\n.text:00537FAE                 push    offset off_6A5D8C ; char *\n.text:00537FB3                 call    _fopen\n.text:00537FB8                 mov     dword_83AE9C, eax\n</code></pre>\n <p>\n  and I tracked this off_6A5D8C it's pointed to label loc_4C554E:\n </p>\n <pre><code>.data:006A5D8C ; char off_6A5D8C\n.data:006A5D8C off_6A5D8C      dd offset loc_4C554E    \n.data:006A5D90 ; char aWt[]\n.data:006A5D90 aWt             db 'wt',0\n</code></pre>\n <pre><code>.text:004C554E loc_4C554E:\n.text:004C554E                 mov     esp, ebp\n.text:004C5550                 pop     ebp\n.text:004C5551                 retn    0Ch\n</code></pre>\n <p>\n  I am not expert in disassembling, may be it requires perform Undefine operation for loc_4C554E - and in this case it's looks like:\n </p>\n <pre><code>.text:004C554E unk_4C554E      db  8Bh ; Ë             ; DATA XREF: .data:off_6A5D8Co\n.text:004C554F                 db 0E5h ; õ\n.text:004C5550                 db  5Dh ; ]\n.text:004C5551                 db 0C2h ; T\n.text:004C5552                 db  0Ch\n.text:004C5553                 db    0\n</code></pre>\n <p>\n  Seems it is string terminated with 0. How to turn this string (file name) to readable look?\nThanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "231",
    "tags": [
        "disassembly",
        "x86",
        "c++"
    ],
    "user": "black4joss",
    "time": "Jul 8, 2020 at 5:52",
    "comments": [
        {
            "user": "mumbel",
            "text": "<html><body><span class=\"comment-copy\">\n Is this the difference between \"NUL\" vs 0x004C554E? It's probably helpful for future questions to include the raw bytes in your view.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It takes the file name, but IDA doesn't recognise it.\n </p>\n <p>\n  In this example, IDA interpreted\n  <code>\n   4\n  </code>\n  -byte string\n  <code>\n   NUL\\x00\n  </code>\n  (\n  <code>\n   4E 55 4C 00\n  </code>\n  ) as an offset (address\n  <code>\n   0x004C554E\n  </code>\n  ) in the code. You may force it to interpret it as an ascii string simple by pressing\n  <kbd>\n   a\n  </kbd>\n  when the cursor is on the line\n  <code>\n   006A5D8C\n  </code>\n  .\n </p>\n <p>\n  The reason that the byte order is reversed is that\n  <code>\n   x86\n  </code>\n  architecture uses\n  <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"noreferrer\">\n   little endian\n  </a>\n  byte ordering, so in case you interpret\n  <code>\n   4E 55 4C 00\n  </code>\n  as a number, the byte order will be reversed (hence\n  <code>\n   0x004C554E\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "bart1e",
            "time": "Jul 5, 2020 at 20:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}