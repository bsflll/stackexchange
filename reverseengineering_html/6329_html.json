{
    "title": "Determining the number of instructions executed by a driver",
    "link": "https://reverseengineering.stackexchange.com/questions/6329/determining-the-number-of-instructions-executed-by-a-driver",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can I measure the number of instructions a Windows (or Linux or XNU) kernel driver/module executed after, say, an IOCTL or a SYSCALL? My only ideas are the following:\n </p>\n <ul>\n  <li>\n   Using WinDBG or remote GDB, debug the whole operating system, put breakpoints in each basic block/function/instruction of the driver or step-trace inside it. Very slow and likely going to cause problems due to the large number of breakpoints to be added.\n  </li>\n  <li>\n   From user-land, use instructions like RDTSC to try to \"measure\" the number of (non different) instructions executed by checking the times it took to execute it. Likely going to give \"false\" results for many reasons (i.e., the very same call to a syscall or ioctl can take different times for many different reasons).\n  </li>\n </ul>\n <p>\n  Any idea or option in any of the mentioned kernels to determine the number of instructions and, preferably, the number of\n  <em>\n   different\n  </em>\n  instructions executed?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "454",
    "tags": [
        "kernel-mode",
        "instrumentation"
    ],
    "user": "joxeankoret",
    "time": "Sep 27, 2014 at 16:27",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n if you haven't yet done give wt (watch and trace ) command a spin in windbg it does this counting stuff in the statistics it provides at the end of tracing a complete function may be you can leverage it with a custom windbg extension\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd recommend using\n  <a href=\"http://bochs.sourceforge.net/\" rel=\"nofollow\">\n   Bochs\n  </a>\n  . It'll allow you to write code to count the number of instructions (and/or number of different instructions) executed between a\n  <code>\n   SYSCALL\n  </code>\n  /\n  <code>\n   SYSRET\n  </code>\n  ,\n  <code>\n   SYSENTER\n  </code>\n  /\n  <code>\n   SYSEXIT\n  </code>\n  , etc.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Sep 27, 2014 at 16:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Yes, I think it's the best one can one as of today. Slow as hell, but probed to work. Thanks!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can also give a try to\n  <a href=\"https://software.intel.com/sites/landingpage/pintool\" rel=\"nofollow\">\n   pin\n  </a>\n  . There is even an\n  <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/49306/Pin/html/index.html#SimpleCount\" rel=\"nofollow\">\n   example\n  </a>\n  in the documentation explaining exactly what you want to do.\n </p>\n</div>\n</body></html>",
            "votes": "-2",
            "user": "jvoisin",
            "time": "Oct 4, 2014 at 11:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Sure, tell me how to use Intel PIN, which is a completely user-land toolkit, in Kernel.</span>",
                    "time": null
                }
            ]
        }
    ]
}