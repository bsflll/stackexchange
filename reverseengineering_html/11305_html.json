{
    "title": "How to create function prototype that recognizes arguments passed by reference in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/11305/how-to-create-function-prototype-that-recognizes-arguments-passed-by-reference-i",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a function prototype generated by IDA that looks like this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Qav80.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Qav80.png\"/>\n  </a>\n </p>\n <p>\n  However, it looks like there is a struct being referenced at the instruction\n  <strong>\n   lea edi, [esp+290h+var_240]\n  </strong>\n  . I would like IDA to reference this passed address as an argument in its function prototype.\n </p>\n <p>\n  I have tried the approach below, but it is clear that it does not work.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/lHm32.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/lHm32.png\"/>\n  </a>\n </p>\n <p>\n  What I would like to see is something like this\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/yGgF1.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/yGgF1.png\"/>\n  </a>\n </p>\n <p>\n  Any help or suggestions would be greatly appreciated!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "x86",
        "calling-conventions"
    ],
    "user": "itsbriany",
    "time": "Nov 11, 2015 at 2:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My guess is that the function signature should be something like:\n </p>\n <pre><code>int __usercall Call_HTTP@<eax>(int x, int y, void* http_object@<edi>);\n</code></pre>\n <ul>\n  <li>\n   <code>\n    __usercall\n   </code>\n   means the calling convention for the function is not a standard one (like stdcall, cdecl, etc.) as the function passes two arguments on stack and one in edi.\n  </li>\n  <li>\n   <code>\n    @<eax>\n   </code>\n   : function returns a value in eax register.\n  </li>\n  <li>\n   <code>\n    int x\n   </code>\n   and\n   <code>\n    int y\n   </code>\n   are passed on the stack.\n  </li>\n  <li>\n   <code>\n    void* http_object@<edi>\n   </code>\n   : http_object is a void* passed through the edi register.\n  </li>\n </ul>\n <p>\n  You can change the type of the\n  <code>\n   http_object\n  </code>\n  by adding a proper structure for this object to the known IDA structures and pass the real type instead of\n  <code>\n   void*\n  </code>\n  .\n </p>\n <p>\n  For more information on function signature, see the IDA help on\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1361.shtml\" rel=\"nofollow\">\n   Set function/item type\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Edit\n  </strong>\n </p>\n <p>\n  The right signature should be:\n </p>\n <pre><code>int __userpurge Call_HTTP@<eax>(int x, int y, void* http_object@<edi>);\n</code></pre>\n <p>\n  As stated by @itsbriany:\n </p>\n <ul>\n  <li>\n   for\n   <code>\n    __stdcall\n   </code>\n   and\n   <code>\n    __userpurge\n   </code>\n   calling conventions, the callee cleans up the stack.\n  </li>\n  <li>\n   in\n   <code>\n    __cdecl\n   </code>\n   and\n   <code>\n    __usercall\n   </code>\n   conventions, the caller cleans up the stack.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Neitsa",
            "time": "Nov 12, 2015 at 10:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "itsbriany",
                    "text": "<span class=\"comment-copy\">Thanks, it works! I would also like to add that the calling convention would be <b><i>_userpurge</i></b> because the calling convention was originally <b>_stdcall</b>. This is because in <b><i>_stdcall</i></b> and <b>_userpurge</b>, the callee cleans up the stack. In <b><i>_cdecl</i></b> and <b>_usercall</b>, the caller cleans up the stack :)</span>",
                    "time": null
                },
                {
                    "user": "Neitsa",
                    "text": "<span class=\"comment-copy\">@itsbriany Oops, sorry for the error... Nice catch! I'll edit my post.</span>",
                    "time": null
                }
            ]
        }
    ]
}