{
    "title": "What is the most efficient way to detect and to break xor encryption?",
    "link": "https://reverseengineering.stackexchange.com/questions/2062/what-is-the-most-efficient-way-to-detect-and-to-break-xor-encryption",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know that modern cryptographic algorithms are as close as they can to fully random data (\n  <a href=\"http://en.wikipedia.org/wiki/Ciphertext_indistinguishability\">\n   ciphertext indistinguishability\n  </a>\n  ) and that trying to detect it is quite useless. But, what can we do on weak-crypto such as\n  <strong>\n   xor encryption\n  </strong>\n  ? Especially if we can get statistical studies of what is encrypted ?\n </p>\n <p>\n  What are the methods and which one is the most efficient (and under what hypothesis) ? And, finally, how to break efficiently this kind of encryption (only based on a statistical knowledge of what is encrypted) ?\n </p>\n</div>\n</body></html>",
    "votes": "24",
    "answers": 3,
    "views": "58k",
    "tags": [
        "cryptography",
        "cryptanalysis"
    ],
    "user": "perror",
    "time": "Oct 12, 2013 at 19:21",
    "comments": [
        {
            "user": "xort",
            "text": "<html><body><span class=\"comment-copy\">\n You mean xor encoding - as far as I know, there is no such thing as XOR encryption :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n In fact, I think that 'xor encoding', 'xor encryption' and 'xor cipher' are all equally used to refer to this technique. Don't you think ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  XOR encryption with a short pad (i.e., shorter than the plaintext) is basically the Vigenère cipher. So\n  <a href=\"http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher#Cryptanalysis\">\n   standard techniques to break Vigenère\n  </a>\n  should break xor encryption.\n </p>\n <p>\n  The basic idea is that if the encryption key is\n  <strong>\n   d\n  </strong>\n  symbols long, every\n  <strong>\n   d\n  </strong>\n  -th symbol is encrypted with the same pad. Thus, take every\n  <strong>\n   d\n  </strong>\n  -th ciphertext symbol and treat it like simple substitution cipher, break that and you have the 1st symbol of the key. Repeat for the\n  <strong>\n   d+1\n  </strong>\n  -th ciphertext symbols,\n  <strong>\n   d+2\n  </strong>\n  -th ciphertext symbols, etc. Eventually you will have all\n  <strong>\n   d\n  </strong>\n  symbols of the key.\n </p>\n <p>\n  To break the\n  <a href=\"http://en.wikipedia.org/wiki/Substitution_cipher\">\n   simple substitution\n  </a>\n  ciphers, you might try brute force (if the symbol set is small) and compare possible plaintexts with the statistical data you know. For certain plaintexts (english language for example) you can often break most of it even quicker (e.g., with english language text the most frequent symbol in ciphertext probably maps back to an\n  <em>\n   e\n  </em>\n  , etc).\n </p>\n <p>\n  Now, you may be thinking, what if you don't know\n  <strong>\n   d\n  </strong>\n  . Often with Vigenère, the length of the key is brute forced. Try d=1, d=2, d=3,... For each d, see how well the output plaintext matches the statistical data. Return the key for which the plaintext most closely matched the statistical data.\n </p>\n</div>\n</body></html>",
            "votes": "16",
            "user": "mikeazo",
            "time": "May 20, 2013 at 19:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vedaad Shakib",
                    "text": "<span class=\"comment-copy\">Is there any way if your ciphertext is relatively short?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In case of multibyte XOR frequency analysis is the way to go.\n </p>\n <p>\n  As is commonly known, most frequent character in regular English text is E (etaoinshrdlu being the top 12) but in some cases space (0x20 in ascii) can be more frequent, especially in shorter messages.\n </p>\n <p>\n  For executable code on the other hand, tho I can't find a reference, most frequent characters would be 0x00 or 0xFF both being common for integers. Do note that for executable code and binary files you can have some shortcuts. For example if you know that on some location in the ciphertext a 0x00 byte (or a sequence) MUST occur, it will leak the part of the key.\n </p>\n <p>\n  In case of single byte XOR, the keyspace is limited to 256 characters obviously.\n </p>\n <p>\n  There is a simple python tool by hellman called\n  <a href=\"https://github.com/hellman/xortool\" rel=\"noreferrer\">\n   xortool\n  </a>\n  which is particularly handy for CTF challenges :)\n </p>\n <blockquote>\n  <p>\n   A tool to do some xor analysis:\n  </p>\n  <ul>\n   <li>\n    guess the key length (based on count of equal chars)\n   </li>\n   <li>\n    guess the key (base on knowledge of most frequent char)\n   </li>\n  </ul>\n </blockquote>\n</div>\n</body></html>",
            "votes": "13",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Extremely nice tool ! Thanks for the link.</span>",
                    "time": null
                },
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">Or in case of Windows binary executable the first two bytes will be 0x4D5A (the MZ magic header).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just to add to the list. SANS posted a blog about a week ago on different tools for XOR encryption. The list is very good and it provides several tools, all which are good in my opinion.\n </p>\n <p>\n  Here is the link :\n  <a href=\"http://computer-forensics.sans.org/blog/2013/05/14/tools-for-examining-xor-obfuscation-for-malware-analysis\">\n   SANS Blog on XOR tools\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "k0ng0",
            "time": "May 21, 2013 at 3:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}