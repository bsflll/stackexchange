{
    "title": "What ELF `e_flags` are defined for TI MSP430(X)",
    "link": "https://reverseengineering.stackexchange.com/questions/32289/what-elf-e-flags-are-defined-for-ti-msp430x",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an MSP430 ELF executable file whose\n  <code>\n   e_flags\n  </code>\n  field is\n  <code>\n   0x0000000E\n  </code>\n  . I cannot find any documentation for\n  <code>\n   e_flags\n  </code>\n  for this architecture. The application note \"MSP430 Embedded Application Binary Interface\" from TI explicitly states:\n </p>\n <blockquote>\n  <p>\n   There are no MSP430-specific flags for\n   <code>\n    e_flags\n   </code>\n   field.\n  </p>\n </blockquote>\n <p>\n  I was hoping that these flags could help me identify whether the binary is contains instructions in the base MSP430 or the extended MSP430X ISA. Are they documented anywhere?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "110",
    "tags": [
        "elf"
    ],
    "user": "John Källén",
    "time": "Sep 15, 2023 at 15:36",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Do you know what compiler produced your file?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John Källén",
            "text": "<html><body><span class=\"comment-copy\">\n I don't see a lot of hints as to which compiler built it. I see the string \"MSP430F148 FreeRTOS Demo program\" and not much else. The symbols are consistent with FreeRTOS.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I could find\n  <a href=\"https://gist.github.com/hotovson/1323822\" rel=\"nofollow noreferrer\">\n   this patch set\n  </a>\n  with the comment:\n </p>\n <pre><code>/* Pre-uniarch versions of binutils stored machine types in the\n * e_flags field, with values up to 471 decimal.  Now we store the\n * machine type in the e_mach field, and use e_flags to identify the\n * characteristics of the code.\n *\n * Use the following flag to indicate that this object file uses the\n * uniarch flag layout. */\n#define EF_MSP430_UNIARCH        0x10000000\n\n#define EF_MSP430_ARCH_430       0x00000000\n#define EF_MSP430_ARCH_430X      0x00000001\n#define EF_MSP430_ARCH           0x000000FF\n#if 0\n/* These are symbol-associated, not archive-associated, attributes.\n * Not sure what to do with them. */\n#define EF_MSP430_CPU_430        0x00000000\n#define EF_MSP430_CPU_430X       0x00000200\n#define EF_MSP430_CPU_430XV2     0x00000300\n#define EF_MSP430_CPU            0x00000300\n#define EF_MSP430_MPY_NONE       0x00000000\n#define EF_MSP430_MPY_16         0x00001000\n#define EF_MSP430_MPY_16_SE      (0x00008000 + EF_MSP430_MPY_16)\n#define EF_MSP430_MPY_32         0x00002000\n#define EF_MSP430_MPY_32_DW      (0x00008000 + EF_MSP430_MPY_32)\n#define EF_MSP430_MPY_CLASS      0x00003000\n#define EF_MSP430_MPY            0x0000F000\n#define EF_MSP430_CODE_NEAR      0x00010000\n#define EF_MSP430_CODE_FAR       0x00020000\n#define EF_MSP430_CODE_MIXED     0x00030000\n#define EF_MSP430_CODE           0x00030000\n#define EF_MSP430_DATA_NEAR      0x00040000\n#define EF_MSP430_DATA_FAR       0x00080000\n#define EF_MSP430_DATA_MIXED     0x000c0000\n#define EF_MSP430_DATA           0x000c0000\n#define EF_MSP430_A20            0x000F0000\n#endif\n</code></pre>\n <p>\n  And apparrently\n  <a href=\"http://web.mit.edu/freebsd/head/contrib/binutils/include/elf/msp430.h\" rel=\"nofollow noreferrer\">\n   an older version\n  </a>\n  :\n </p>\n <pre><code>/* Processor specific flags for the ELF header e_flags field.  */\n#define EF_MSP430_MACH      0xff\n\n#define E_MSP430_MACH_MSP430x11  11\n#define E_MSP430_MACH_MSP430x11x1  110\n#define E_MSP430_MACH_MSP430x12  12\n#define E_MSP430_MACH_MSP430x13  13\n#define E_MSP430_MACH_MSP430x14  14\n#define E_MSP430_MACH_MSP430x15  15\n#define E_MSP430_MACH_MSP430x16  16\n#define E_MSP430_MACH_MSP430x31  31\n#define E_MSP430_MACH_MSP430x32  32\n#define E_MSP430_MACH_MSP430x33  33\n#define E_MSP430_MACH_MSP430x41  41\n#define E_MSP430_MACH_MSP430x42  42\n#define E_MSP430_MACH_MSP430x43  43\n#define E_MSP430_MACH_MSP430x44  44\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Sep 21, 2023 at 8:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}