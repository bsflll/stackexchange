{
    "title": "Why doesn't IDA break on the WriteFile function?",
    "link": "https://reverseengineering.stackexchange.com/questions/18947/why-doesnt-ida-break-on-the-writefile-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I searched all places in IDA that call the imported\n  <code>\n   WriteFile\n  </code>\n  function and put a breakpoint on them.\n </p>\n <p>\n  But while debugging I saw with ProcMon that my exe wrote to the file but even though it did not stop on the breakpoint. I also saw that file was written to.\n </p>\n <p>\n  Why is that?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "590",
    "tags": [
        "ida",
        "breakpoint",
        "exe"
    ],
    "user": "Keystone",
    "time": "Jul 31, 2018 at 18:16",
    "comments": [
        {
            "user": "user22970",
            "text": "<html><body><span class=\"comment-copy\">\n it might be accessing a lower level write api such as\n <code>\n  NtWriteFile\n </code>\n , maybe try breaking on it instead? also, by hitting ctrl+x you can see where a function is being used. (cross reference)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @Amirag: ... or higher-level such as those from the C runtime (\n <code>\n  fwrite\n </code>\n ,\n <code>\n  fprintf\n </code>\n and other\n <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/stream-i-o\" rel=\"nofollow noreferrer\">\n  members of that family\n </a>\n ). Because if the application isn't statically linked these imports would be imports of the C runtime DLLs rather than of the application itself.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n For your use case, you could use an\n <a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow noreferrer\">\n  API monitor\n </a>\n to see precisely which functions are being called, as well as trigger a breakpoint  for a debugger to attach and handle.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Keystone",
            "text": "<html><body><span class=\"comment-copy\">\n @NirIzr I never understand how to work with ApiMonitor ,all the time I tried to monitor process, thos process are close/ stack because of ApiMonitor\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Keystone",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L import tab show only the function that compiled as static ? How can I see dynamic compiled functions like\n <code>\n  fwrite\n </code>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A few possibilities come to mind:\n </p>\n <ol>\n  <li>\n   <p>\n    The application did not use\n    <code>\n     WriteFile\n    </code>\n    but some other API to write.\n   </p>\n  </li>\n  <li>\n   <p>\n    one of the other APIs or one of the DLLs used by the program called\n    <code>\n     WriteFile\n    </code>\n    indirectly. You can try to catch the this situation by putting a breakpoint on the final API in kernel32 (\n    <code>\n     kernel32_WriteFile\n    </code>\n    ).\n   </p>\n  </li>\n  <li>\n   <p>\n    As mentined by Amirag, the program could be calling the native API\n    <code>\n     NtWriteFile\n    </code>\n    in\n    <code>\n     ntdll.dll\n    </code>\n    directly, or even invoke the syscall instruction manually (though this is very rare and tricky to pull off).\n   </p>\n  </li>\n  <li>\n   <p>\n    the write was performed on the process' behalf by the kernel or a kernel-mode driver. This situation can't be caught by a user-mode debugger.\n   </p>\n  </li>\n </ol>\n <p>\n  To determine the real cause, double-click the event in Process Monitor and check the Stack tab. If you configure the symbols properly, you should see the actual path through the process and the kernel and determine what exact location in the process triggered the write and inspect the code there.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Aug 1, 2018 at 15:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}