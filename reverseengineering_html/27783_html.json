{
    "title": "Is this native code possible for further static analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/27783/is-this-native-code-possible-for-further-static-analysis",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was trying to reverse engineer a native lib code in an android app. the\n  <code>\n   .so\n  </code>\n  contains many functions. But the function\n  <code>\n   sUQWWyTBEs()\n  </code>\n  was referred in the Java code. I was curious how this function works, the code of the function\n  <code>\n   sUQWWyTBEs()\n  </code>\n  decompiled with\n  <code>\n   Ghidra\n  </code>\n  :\n </p>\n <pre><code>*************************************************************\n                             *                           FUNCTION                          \n                             *************************************************************\n                             undefined  __cdecl  Myapp_sUQWWyTBEs()\n             undefined         w0:1           <RETURN>\n             longlong *        x0:8           param_1\n                             Myapp_sUQWWyTBEs XREF[2]:     Entry Point (*) , 00101350   \n        00100e44 08  00  40  f9    ldr        x8, [param_1 ]\n        00100e48 01  00  00  b0    adrp       x1, s_c7a584936712f32773d3d0a_00101000           ; = \"c7a584936712f32773d3d0a\"\n        00100e4c 21  60  08  91    add        x1, x1, #0x218\n        00100e50 02  9d  42  f9    ldr        x2, [x8, #0x538 ]\n        00100e54 40  00  1f  d6    br         x2\n</code></pre>\n <p>\n  in my understanding, I have made the static analysis as like following:\n </p>\n <p>\n  <code>\n   00100e44 08  00  40  f9    ldr        x8, [param_1 ]\n  </code>\n </p>\n <p>\n  load the value at memory address param_1 into register x8.\n </p>\n <p>\n  <code>\n   0100e48 01  00  00  b0    adrp       x1, s_c7a584936712f32773d3d0a_00101000\n  </code>\n </p>\n <p>\n  sets register x1 to 0x101000.\n </p>\n <p>\n  <code>\n   00100e4c 21  60  08  91    add        x1, x1, #0x218\n  </code>\n </p>\n <p>\n  adds 0x218 to x1, so it sets x1 to 0x101218.\n </p>\n <p>\n  <code>\n   00100e50 02  9d  42  f9    ldr        x2, [x8, #0x538 ]\n  </code>\n </p>\n <p>\n  loads the value at x8 + 0x538 into x2.\n </p>\n <p>\n  <code>\n   00100e54 40  00  1f  d6    br         x2\n  </code>\n </p>\n <p>\n  and finally branches to the  address stored in\n  <code>\n   x2\n  </code>\n  .\n </p>\n <p>\n  with that being said, Here I don't know the memory at address at\n  <code>\n   x2\n  </code>\n  , obviously it initially  depends on the value\n  <code>\n   param_1\n  </code>\n  holds. is there way or how can I refer where\n  <code>\n   param_1\n  </code>\n  was initialized? I don't know very much about usage of\n  <code>\n   Ghidra\n  </code>\n  or other reverse engineering tools. any one might help would be appreciated.\n </p>\n <p>\n  Edit:\n  <strong>\n   This function returns a string like this\n   <code>\n    47fjlkj843h9asjklj94kljfsad93j4l2715943hasd...\n   </code>\n   but what I wanted is that how this value was generated or returned.\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "128",
    "tags": [
        "ida",
        "android",
        "ghidra",
        "java",
        "apk"
    ],
    "user": "hanan",
    "time": "Jun 3, 2021 at 13:54",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n If this is a function called from Java the first step is to look at the Java declaration of the method what parameters it has. On native side the first parameter of a JNI function should be the pointer to the JNI environment providing a lot of methods for Java native conversions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hanan",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert at the at entry this code appears:\n <code>\n  00100ca0 00  00  00  d0    adrp      param_1, 0x102000\n </code>\n <code>\n  00100ca4 00  20  37  91    add        param_1=>PTR_LOOP_00102dc8 , param_1, #0xdc8\n </code>\n the param_1 was done like this. but value it is holding btw?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hanan",
            "text": "<html><body><span class=\"comment-copy\">\n so param_1 appears to be holding jni env and being used as a frame pointer.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n My guess would be that\n <code>\n  #538\n </code>\n is the offset to function\n <code>\n  newStringUTF\n </code>\n . For offsets in 32bit see\n <a href=\"https://docs.google.com/spreadsheets/d/1yqjFaY7mqyVIDs5jNjGLT-G8pUaRATzHWGFUgpdJRq8/edit#gid=0\" rel=\"nofollow noreferrer\">\n  docs.google.com/spreadsheets/d/â€¦\n </a>\n . I would assume that your binary is 64bit, thus the references are double the value of this spread sheet.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hanan",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert I have loaded the code into JEB decompiler and it outputs as\n <a href=\"https://pastebin.com/AUSyXN0j\" rel=\"nofollow noreferrer\">\n  link\n </a>\n . JEB comments each instruction's output but I wanted how the output was generated?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}