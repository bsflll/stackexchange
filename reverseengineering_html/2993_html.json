{
    "title": "Need help extracting data from .dat file",
    "link": "https://reverseengineering.stackexchange.com/questions/2993/need-help-extracting-data-from-dat-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://dl.dropboxusercontent.com/u/247623/item.dat\" rel=\"nofollow\">\n   https://dl.dropboxusercontent.com/u/247623/item.dat\n  </a>\n  This is a file from a Java game, and I would like to know how to legible string data from it.\n </p>\n <p>\n  I would prefer if only hints were given to me.\n </p>\n <p>\n  I have looked into it with a Hex Editor and come to the conclusion that the file is either compressed or encrypted because of the lack of a pattern.\n </p>\n <p>\n  If it is encrypted, I have no idea how to proceed.\nIf it is compressed, I have found the following but have no idea how to proceed.\n </p>\n <blockquote>\n  <p>\n   Entropy = 7.999055 bits per byte.\n  </p>\n  <p>\n   Optimum compression would reduce the size of this 384802 byte file by\n  0 percent.\n  </p>\n  <p>\n   Chi square distribution for 384802 samples is 505.10, and randomly\n  would exceed this value less than 0.01 percent of the times.\n  </p>\n  <p>\n   Arithmetic mean value of data bytes is 128.1314 (127.5 = random).\n  Monte Carlo value for Pi is 3.120328068 (error 0.68 percent). Serial\n  correlation coefficient is -0.031097 (totally uncorrelated = 0.0).\n  </p>\n </blockquote>\n <p>\n  Assume I have minimal knowledge of what I am doing, so several hints may be required.\nMore information can be given upon request.\n </p>\n <p>\n  Thanks in advance!\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "5k",
    "tags": [
        "file-format"
    ],
    "user": "Intan Abdul Hashim",
    "time": "Nov 1, 2013 at 10:05",
    "comments": [
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n Reverse the program that used the file, as it is java this is probably the easiest solutions. Just JD-GUI or something similar.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Piece of cake: this is ZIP-compatible compressed compiled Java. Any familiar sequences of bytes near the header?\n </p>\n <pre><code>FA CE AF 0E 10 00 10 00 78 9C AC DD ..\n</code></pre>\n <p>\n  .. those first few bytes\n  <em>\n   look\n  </em>\n  like Java's magic ID\n  <code>\n   CA FE BA BE\n  </code>\n  , but Googling that sequence doesn't yield any results, and it might be a red herring anyway. Next up:\n  <code>\n   10 00 10 00\n  </code>\n  , which can be about anything (not a file length, but perhaps some internal flag or ID).\n </p>\n <p>\n  Next:\n  <code>\n   78 9C\n  </code>\n  . These\n  <em>\n   are\n  </em>\n  familiar, they may form a set of ZLIB compatible compression flags. A quick-and-dirty ZLIB unpacker gave me (1) a\n  <em>\n   positive\n  </em>\n  unpacking result (meaning this data\n  <em>\n   is\n  </em>\n  valid compressed data and could be uncompressed), and (2) an output file much larger than the input (1,388,603 bytes vs. the original 384,802).\n </p>\n <p>\n  Inspecting the decompressed data I found this at the start:\n </p>\n <pre><code>01 09 00 31 5B 4C 63 6F 6D 2E 74 68 72 65 65 72 69 6E 67\n73 2E 70 72 6F 6A 65 63 74 78 2E 69 74 65 6D 2E 63 6F 6E\n</code></pre>\n <p>\n  or, in ASCII,\n </p>\n <pre><code>...1[Lcom.threering\ns.projectx.item.con\n</code></pre>\n <p>\n  -- enough to conclude it has been decompressed successfully. From this point on, you should be able to use common Java-decrypting/decompiling techniques.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Jongware",
            "time": "Nov 1, 2013 at 22:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It can be difficult to differentiate well compressed data (e.g., LZMA) from well encrypted data (e.g., AES). I've done a\n  <a href=\"http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\" rel=\"nofollow\">\n   bit\n  </a>\n  of\n  <a href=\"http://www.devttys0.com/2013/06/encryption-vs-compression-part-2/\" rel=\"nofollow\">\n   analysis\n  </a>\n  in the past however, and found that a lot of compressed data can be distinguished from encrypted data based on entropy analysis, as you have obviously already done.\n </p>\n <p>\n  However, I would take a simpler approach first. Look for common \"magic\" strings and/or headers in the file, such as those for gzip, zlib, and lzma. It may be that the game developers are using a standard compression, they've just added a custom header for their application.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "devttys0",
            "time": "Nov 1, 2013 at 13:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Yep, a set of common ZLIB compression flags can be found near the start.</span>",
                    "time": null
                }
            ]
        }
    ]
}