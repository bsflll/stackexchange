{
    "title": "Debug 3rd-party apk with .so-files missing debug symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/26852/debug-3rd-party-apk-with-so-files-missing-debug-symbols",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Apologies, if this has been asked before. I am reverse engineering a chinese app that connects to a BLE device, so I can inspect how it transmits the data. Using\n  <a href=\"https://developer.android.com/studio/debug/apk-debugger\" rel=\"nofollow noreferrer\">\n   this official guide\n  </a>\n  I decompiled my apk and made it debuggable. However, after importing it and trying to debug the app I'm presented with this message:\n </p>\n <blockquote>\n  <p>\n   To debug the APK, native libraries (*.so files) must have debug symbols.\nThe following libraries are missing debug symbols:\n  </p>\n  <ul>\n   <li>\n    libBugly.so\n   </li>\n   <li>\n    libecc256.so\n   </li>\n  </ul>\n </blockquote>\n <p>\n  While the app executes fine it does not stop at any breakpoints.\n </p>\n <p>\n  The guide tells me I need to attach native debug symbols to those .so-files. How can I do that since I only extracted them from the apk?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "debugging",
        "android",
        "apk",
        "bluetooth"
    ],
    "user": "eli_james",
    "time": "Jan 23, 2021 at 12:00",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Instead of making it debuggable I would suggest using\n <a href=\"https://frida.re\" rel=\"nofollow noreferrer\">\n  Frida\n </a>\n and hooking relevant methods. Frida does not need any debug symbols. Furthermore I would capture the Bluetooth traffic by enabling\n <code>\n  Bluetooth HCI snoop log\n </code>\n in developer options. Also check the decompiled code (e.g. by Jadx) if you can identify the parts you are interested in.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Generally, if the native libraries are distributed (in the apk) without debug symbols (which is quite common, and along with that, the apk was also made non-debuggable), you would not be able to find those debug symbols unless you are the developer or you are able to obtain the libraries with debug symbols from the developer.\n </p>\n <p>\n  Therefore, even though you can repackage the apk and make it debuggable as you did, you would be missing crucial data needed to actually debug the app that way. Instead, the typical approach would be to use a dynamic instrumentation tool like\n  <a href=\"https://frida.re/\" rel=\"nofollow noreferrer\">\n   Frida\n  </a>\n  , rather than a debugger, to assist in your reverse engineering attempts. Typically, you may use Frida along with a disassembler like Ghidra, to explore the workings of the app.\n </p>\n <p>\n  This site is a good place to ask questions on the use of Frida, Ghidra, etc., if you decide to try using them.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "auspicious99",
            "time": "Aug 27, 2022 at 10:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}