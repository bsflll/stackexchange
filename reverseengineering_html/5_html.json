{
    "title": "How are x86 CPU instructions encoded?",
    "link": "https://reverseengineering.stackexchange.com/questions/5/how-are-x86-cpu-instructions-encoded",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm writing a small utility library for hooking functions at run time. I need to find out the length of the first few instructions because I don't want to assume anything or require the developer to manually input the amount of bytes to relocate and overwrite.\n </p>\n <p>\n  There are many great resources to learn assembly but none of them seem to go into much detail on how assembly mnemonics get turned into raw binary instructions.\n </p>\n</div>\n</body></html>",
    "votes": "28",
    "answers": 8,
    "views": "5k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Henry Heikkinen",
    "time": "Mar 31, 2013 at 12:33",
    "comments": [
        {
            "user": "cb88",
            "text": "<html><body><span class=\"comment-copy\">\n I don't see how this relates to reverse engineering other than you might use a disassembler to do the job for you.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Anderson",
            "text": "<html><body><span class=\"comment-copy\">\n This Blog-Entry Should be somewhat relevant regarding Hooking Functions at Runtime:\n <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2011/09/21/10214405.aspx\" rel=\"nofollow noreferrer\">\n  blogs.msdn.com/b/oldnewthing/archive/2011/09/21/10214405.aspx\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Polynomial",
            "text": "<html><body><span class=\"comment-copy\">\n Unfortunately, from my experience, the answer is \"in a really horrible and arbitrary way\". Good luck :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<html><body><span class=\"comment-copy\">\n My favorite tutorial so far:\n <a href=\"http://www.c-jump.com/CIS77/CPU/x86/lecture.html\" rel=\"nofollow noreferrer\">\n  c-jump.com/CIS77/CPU/x86/lecture.html\n </a>\n Does not cover everything, but is a good start.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you want to understand the instruction encodings in detail you need to study\n  <a href=\"http://download.intel.com/products/processor/manual/325383.pdf\">\n   Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 2 (Instruction Set Reference, A-Z)\n  </a>\n  . Be aware that Intel IA-32 and AMD64 are very complicated instruction sets and in order to hook a function which is not specifically designed to be hooked by injecting a jump you will run into a great number of different instructions. There is no guarantee that the function even has a stack frame set up.\n </p>\n <p>\n  There are libraries which can do the disassembly and hooking for you, such as\n  <a href=\"http://research.microsoft.com/en-us/projects/detours/\">\n   Detours\n  </a>\n  by Microsoft Research.\n </p>\n</div>\n</body></html>",
            "votes": "21",
            "user": "Peter Andersson",
            "time": "Mar 19, 2013 at 20:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Henry Heikkinen",
                    "text": "<span class=\"comment-copy\">Thanks! That seems to be exactly what I'm looking for. Detours is pretty much the same what I'm doing but I'm reinventing the wheel for educational purposes.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use a disassembler to go from binary opcodes to assembly code.\n </p>\n <p>\n  For example\n  <code>\n   ndisam\n  </code>\n  command is able to do this.\n </p>\n <p>\n  If you have the following binary opcodes (hex view of file):\n </p>\n <pre><code>31C0FFC0C3\n</code></pre>\n <p>\n  You will get the following output when disassembling it with\n  <code>\n   ndisasm\n  </code>\n  :\n </p>\n <pre><code>00000000  31C0              xor ax,ax\n00000002  FFC0              inc ax\n00000004  C3                ret\n</code></pre>\n <p>\n  Where the first column is the file offset, the second is the binary opcodes and the final row is the assembly code.\n </p>\n <p>\n  You could then get the second column and get the string length of it and divide by 2 and you would have the length of the instruction in bytes.\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "Tyilo",
            "time": "Mar 19, 2013 at 19:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "jix",
                    "text": "<span class=\"comment-copy\">While this explains how to do it manually on the command line I don't think it is a suitable approach for a utility library that hooks arbitrary code at runtime. If ndisasm is available as a library it might work though, but then you should add that to your answer.</span>",
                    "time": null
                },
                {
                    "user": "Sean B.",
                    "text": "<span class=\"comment-copy\">I've used both the <a href=\"http://udis86.sourceforge.net/\" rel=\"nofollow noreferrer\">udis86</a> and <a href=\"http://mkfs.github.com/content/opdis/\" rel=\"nofollow noreferrer\">opdis</a> libraries for basically this. Both work reasonably well and will (iirc) expose the length of each instruction as a struct member instead of having to parse asm output.</span>",
                    "time": null
                },
                {
                    "user": "Tyilo",
                    "text": "<span class=\"comment-copy\">@SeanB. taking a quick look at <code>udis86</code>, I can see that it has move to <a href=\"https://github.com/vmt/udis86\" rel=\"nofollow noreferrer\">github</a>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A lot of people have mentioned the Intel manuals, which are an invaluable reference, but quite hefty. I'd suggest looking at\n  <a href=\"https://wiki.osdev.org/X86-64_Instruction_Encoding#General_Overview\" rel=\"nofollow noreferrer\">\n   this OSDev wiki page\n  </a>\n  to get an idea of how the instructions are encoded on a simpler level.\n </p>\n <p>\n  For all practical instruction-length-finding problems, I would advise using a disassembler.\n </p>\n <p>\n  Function hooking is an interesting challenge.\n  <a href=\"https://devblogs.microsoft.com/oldnewthing/20110921-00/?p=9583\" rel=\"nofollow noreferrer\">\n   This MSDN blog\n  </a>\n  explains some of the difficulties well. Depending the requirements, it might be preferable to use the operating system's debugging functionality to attach to the process, \"break\" on functions, and implement your hook in a separate process.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Glorfindel",
            "time": "Jul 19, 2022 at 2:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Henry Heikkinen",
                    "text": "<span class=\"comment-copy\">That looks like a great overview. Thanks!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://www.codeproject.com/Articles/662301/x-Instruction-Encoding-Revealed-Bit-Twiddling-fo\" rel=\"noreferrer\">\n   This CodeProject article\n  </a>\n  is an excellent high-level view of x86's instruction format (with diagrams!). After reading this, more detailed references will make more sense.\n </p>\n <p>\n  Due to many years of backwards-compatible evolution, the x86 instruction format is quite complicated, with all sorts of optional prefixes and instruction-dependent fields, so it is a bit tricky to work out the instruction length. If you want something robust, I would advise adapting existing software rather than rolling your own. But understanding these concepts will of course be very helpful.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Artelius",
            "time": "Sep 23, 2015 at 7:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The ground truth on instruction decoding can be found in the processors manual for software developers. Assembler authors need to know this, so the information is there. For Intel, it's in the beginning of Volume 2A (I think, I lost track since they smushed all the manuals into one PDF). There's a big table that defines how prefixes are encoded, how opcodes are encoded, and how operands are encoded. It's not the easiest reading, but it's there...\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Andrew",
            "time": "Mar 19, 2013 at 19:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hmm, when was that? Even just a few weeks ago they were all nicely separated into separate PDF files ...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <a href=\"http://www.cs.uaf.edu/2006/fall/cs301/support/x86/reference.pdf\" rel=\"nofollow\">\n   IA-32 Intel® Architecture Software Developer’s Manual Vol. 2\n  </a>\n  in all its mind-numbing glory.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "asheeshr",
            "time": "Mar 31, 2013 at 3:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use the capstone library to disassemble the instructions stating at the address you are looking at.  It has the ability to determine for you how long the instruction is in bytes, and then you can use that in your code.\n </p>\n <p>\n  <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow\">\n   http://www.capstone-engine.org/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Milhous",
            "time": "Sep 21, 2015 at 1:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   There are many great resources to learn assembly but none of them seem to go into much detail on how assembly mnemonics get turned into raw binary instructions.\n  </p>\n </blockquote>\n <p>\n  The mnemonics aren't 'turned in' to raw binary instructions, they are the raw binary instructions. It is a human readable representation of the actual hex bytes that are encoding the instructions of the (first generation language) machine code. We typically talk about these bytes by their mnemonics for clarity.\n </p>\n <p>\n  This is unlike assembly (so, second generation language such as gas or masm) or C (third generation language). Both assembly and higher generation languages are source files with a character encoding (such as UTF-8) that encodes the letters of the source code. In the case of assembly, it needs to be assembled to raw x86 bytes. The raw bytes can be disassembled by IDA into a readable form; it's called disassembly because it's presenting the mnemonic representation encoded in a character set like UTF-8 and displayed to the screen (which resembles an assembly language (a second generation language) that would be assembled to machine code -- in this case it's obviously not going to be assembled and isn't really an assembly language on it's own -- it's showing you what the assembly that was compiled to the machine code\n  <em>\n   would have been\n  </em>\n  ).\n </p>\n <p>\n  x86 encoding looks like this (I created a diagram):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/OnFm6.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/OnFm6.png\"/>\n  </a>\n </p>\n <p>\n  By the same token, CIL bytecode is a 1st generation language because the opcodes run directly on the virtual machine -- a virtual CPU. This means that the CIL bytecode does not need to be assembled or compiled from a source file with a source character set.\n  <code>\n   ilasm\n  </code>\n  shows a disassembled, mnemonic form of this bytecode.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Lewis Kelsey",
            "time": "Mar 30, 2021 at 14:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}