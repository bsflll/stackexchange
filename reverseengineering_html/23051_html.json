{
    "title": "Questions regarding PLT/GOT and statically linking",
    "link": "https://reverseengineering.stackexchange.com/questions/23051/questions-regarding-plt-got-and-statically-linking",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking at the assembly code of a heap-overflow challenge (\n  <a href=\"https://exploit-exercises.lains.space/protostar/heap3/\" rel=\"nofollow noreferrer\">\n   heap3\n  </a>\n  in Protostar) which uses a vulnerability of an old version of\n  <code>\n   dlmalloc\n  </code>\n  to execute the exploit. Below is the assembler dump:\n </p>\n <pre><code>0x08048889 <main+0>:    push   ebp\n0x0804888a <main+1>:    mov    ebp,esp\n0x0804888c <main+3>:    and    esp,0xfffffff0\n0x0804888f <main+6>:    sub    esp,0x20\n0x08048892 <main+9>:    mov    DWORD PTR [esp],0x20\n0x08048899 <main+16>:   call   0x8048ff2 <malloc>\n0x0804889e <main+21>:   mov    DWORD PTR [esp+0x14],eax\n0x080488a2 <main+25>:   mov    DWORD PTR [esp],0x20\n0x080488a9 <main+32>:   call   0x8048ff2 <malloc>\n0x080488ae <main+37>:   mov    DWORD PTR [esp+0x18],eax\n0x080488b2 <main+41>:   mov    DWORD PTR [esp],0x20\n0x080488b9 <main+48>:   call   0x8048ff2 <malloc>\n0x080488be <main+53>:   mov    DWORD PTR [esp+0x1c],eax\n0x080488c2 <main+57>:   mov    eax,DWORD PTR [ebp+0xc]\n0x080488c5 <main+60>:   add    eax,0x4\n0x080488c8 <main+63>:   mov    eax,DWORD PTR [eax]\n0x080488ca <main+65>:   mov    DWORD PTR [esp+0x4],eax\n0x080488ce <main+69>:   mov    eax,DWORD PTR [esp+0x14]\n0x080488d2 <main+73>:   mov    DWORD PTR [esp],eax\n0x080488d5 <main+76>:   call   0x8048750 <strcpy@plt>\n0x080488da <main+81>:   mov    eax,DWORD PTR [ebp+0xc]\n0x080488dd <main+84>:   add    eax,0x8\n0x080488e0 <main+87>:   mov    eax,DWORD PTR [eax]\n0x080488e2 <main+89>:   mov    DWORD PTR [esp+0x4],eax\n0x080488e6 <main+93>:   mov    eax,DWORD PTR [esp+0x18]\n0x080488ea <main+97>:   mov    DWORD PTR [esp],eax\n0x080488ed <main+100>:  call   0x8048750 <strcpy@plt>\n0x080488f2 <main+105>:  mov    eax,DWORD PTR [ebp+0xc]\n0x080488f5 <main+108>:  add    eax,0xc\n0x080488f8 <main+111>:  mov    eax,DWORD PTR [eax]\n0x080488fa <main+113>:  mov    DWORD PTR [esp+0x4],eax\n0x080488fe <main+117>:  mov    eax,DWORD PTR [esp+0x1c]\n0x08048902 <main+121>:  mov    DWORD PTR [esp],eax\n0x08048905 <main+124>:  call   0x8048750 <strcpy@plt>\n0x0804890a <main+129>:  mov    eax,DWORD PTR [esp+0x1c]\n0x0804890e <main+133>:  mov    DWORD PTR [esp],eax\n0x08048911 <main+136>:  call   0x8049824 <free>\n0x08048916 <main+141>:  mov    eax,DWORD PTR [esp+0x18]\n0x0804891a <main+145>:  mov    DWORD PTR [esp],eax\n0x0804891d <main+148>:  call   0x8049824 <free>\n0x08048922 <main+153>:  mov    eax,DWORD PTR [esp+0x14]\n0x08048926 <main+157>:  mov    DWORD PTR [esp],eax\n0x08048929 <main+160>:  call   0x8049824 <free>\n0x0804892e <main+165>:  mov    DWORD PTR [esp],0x804ac27\n0x08048935 <main+172>:  call   0x8048790 <puts@plt>\n0x0804893a <main+177>:  leave\n0x0804893b <main+178>:  ret\nEnd of assembler dump.\n</code></pre>\n <p>\n  Now looking at the assembler dump what I can understand is\n  <code>\n   malloc()\n  </code>\n  and\n  <code>\n   free()\n  </code>\n  are linked to the binary statically, while\n  <code>\n   strcpy()\n  </code>\n  and\n  <code>\n   puts()\n  </code>\n  are linked using PLT.\n </p>\n <p>\n  When I try to compile this program using it's source code, I get\n  <code>\n   malloc@plt\n  </code>\n  and\n  <code>\n   free@plt\n  </code>\n  , which when compiled on my local machine uses the wrong version of\n  <code>\n   dlmalloc\n  </code>\n  . The challenge is compiled and placed on a Debian distribution which we have to boot up in order to try this challenge but I would like to try it on my local machine. Can someone explain how I will be able to compile it so that\n  <code>\n   malloc()\n  </code>\n  and\n  <code>\n   free()\n  </code>\n  are statically linked with the binary.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "224",
    "tags": [
        "binary-analysis",
        "dynamic-linking",
        "plt"
    ],
    "user": "Rev-time",
    "time": "Jan 20, 2020 at 14:10",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Why would you rebuild the binary ? It is enough to copy it to your machine and try it if you want.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rev-time",
            "text": "<html><body><span class=\"comment-copy\">\n Thing is copying from the virtual machine is a big pain for me and I would like to create my own versions of this particular challenge too\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You are given only the code of the\n  <code>\n   main()\n  </code>\n  and\n  <code>\n   winner()\n  </code>\n  functions because only these ones are relevant for the exploitation. But, of course, the binary embed also the code of\n  <code>\n   malloc()\n  </code>\n  and\n  <code>\n   free()\n  </code>\n  which are taken from the original Doug Lea's\n  <code>\n   malloc()\n  </code>\n  function. If you want to reproduce the same binary with the code, you may need to add the code of the\n  <a href=\"http://gee.cs.oswego.edu/dl/html/malloc.html\" rel=\"nofollow noreferrer\">\n   original Doug Lea's\n   <code>\n    malloc()\n   </code>\n  </a>\n  as well.\n </p>\n <p>\n  You can find the source code\n  <a href=\"http://gee.cs.oswego.edu/pub/misc/\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Jan 20, 2020 at 14:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rev-time",
                    "text": "<span class=\"comment-copy\">Thank you for your help. Now this might sound like a stupid question, but could you please explain how I will be able to embed the source code into the binary. I am not quite familiar with using gcc properly</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Rev-time this is probably question for StackOverflow or SuperUser since it does not involve reverse engineering</span>",
                    "time": null
                }
            ]
        }
    ]
}