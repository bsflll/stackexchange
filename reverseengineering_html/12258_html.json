{
    "title": "The questions about ADR.W instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/12258/the-questions-about-adr-w-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When reversing a ARM firmware using IDA Pro, I find a instruction:\n </p>\n <p>\n  ROM:080461FC 0F F2 24 30         ADR.W      R0, aBt_test_mode ; \"BT_TEST_MODE\"\n </p>\n <p>\n  ...\n </p>\n <p>\n  ROM:08046524    aBt_test_mode       DCB \"BT_TEST_MODE\",0\n </p>\n <p>\n  ...\n </p>\n <p>\n  I know this is a Thumb-2 instruction.\n  <a href=\"https://i.sstatic.net/FlMsb.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/FlMsb.png\"/>\n  </a>\n  imm8=0010 0100\n </p>\n <p>\n  Rd=0000\n </p>\n <p>\n  imm3=011\n </p>\n <p>\n  but I don't know how to calculate imm32. (imm32 = ZeroExtend(i:imm3:imm8, 32))\nand how to calculate the 08046524?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "273",
    "tags": [
        "arm",
        "thumb2"
    ],
    "user": "user6903",
    "time": "Mar 20, 2016 at 4:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you say, you have -\n </p>\n <p>\n  <code>\n   imm8 = 0010 0100\n  </code>\n </p>\n <p>\n  <code>\n   imm3 = 011\n  </code>\n </p>\n <p>\n  but you also have\n </p>\n <p>\n  <code>\n   i = 0\n  </code>\n </p>\n <p>\n  then\n </p>\n <p>\n  <code>\n   imm32 = ZeroExtend(i:imm3:imm8,32) =>\n  </code>\n </p>\n <p>\n  <code>\n   imm32 = ZeroExtend(0:011:00100100,32) =>\n  </code>\n </p>\n <p>\n  <code>\n   imm32 = ZeroExtend(001100100100,32) =>\n  </code>\n </p>\n <p>\n  <code>\n   imm32 = 00000000000000000000001100100100 = 0x00000324\n  </code>\n </p>\n <p>\n  The ADR instruction description explains that \"This instruction adds an immediate value to the PC value to form a PC-relative address, and writes the result to the\ndestination register.\"\n </p>\n <p>\n  As you are in Thumb mode, the value of PC is equal to the (4 byte aligned) address of the instruction + 4 bytes. \nIn your case the instruction is at address\n  <code>\n   0x080461FC\n  </code>\n  so\n  <code>\n   PC = 0x080461FC + 4 = 0x08046200\n  </code>\n </p>\n <p>\n  The address calculation is then -\n </p>\n <p>\n  <code>\n   PC + imm32 = 0x08046200 + 0x00000324 = 0x08046524\n  </code>\n </p>\n <p>\n  This is what you see in IDA's disassembly.\n </p>\n <p>\n  If you look in the 'Operation' section of the ADR instruction in the ARM architecture reference manual you can see this explained.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Mar 20, 2016 at 9:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}