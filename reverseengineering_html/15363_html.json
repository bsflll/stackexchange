{
    "title": "Assistance finding CGI files",
    "link": "https://reverseengineering.stackexchange.com/questions/15363/assistance-finding-cgi-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm wondering if anyone can assist me. I'm reverse engineering netgear r6250 firmware just for practice. I've managed to unpack the firmware using binwalk and in the root directory exist the www directory. Looking at the html code I notice the forms references cgi files. However checking through the entire file system I can't seem to find any cgi files. I've read this blog article that mention that in some netgear router and I quote:\n </p>\n <blockquote>\n  <p>\n   apply.cgi is not really a script, but a function that is invoked in the HTTP server\n  </p>\n </blockquote>\n <p>\n  So I believe the cgi files might be embedded in the http binary which is located in /usr/sbin in my unpacked firmware version. I don't know if this indeed so.\n </p>\n <p>\n  Can someone point me in the right direction so to know where I can find the cgi files or if they are indeed embedded in the httpd binary? Your assistance will without a doubt be appreciated.\n </p>\n <p>\n  <strong>\n   Edit\n  </strong>\n </p>\n <p>\n  The below show the screenshot using the find command to search for cgi files and server settings file from the root directory with no results:\n  <a href=\"https://i.sstatic.net/onvzJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"screenshot of searched cgi files and server setting files\" src=\"https://i.sstatic.net/onvzJ.png\"/>\n  </a>\n </p>\n <p>\n  This below image shows the listing of files in the etc directory:\n  <a href=\"https://i.sstatic.net/fMozw.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/fMozw.png\"/>\n  </a>\n </p>\n <p>\n  If you notice there are two symbolic links that are both dangling due to missing linked file. So this leads me to believe that the cgi files (and possibly other files) are created in memory upon boot. What makes it worse is using firmadyne to emulate the firmware doesn't work as I don't get a NIC device up and running with an IP, and I've already emulate another netgear firmware (albeit an old one) using firmadyne. In all defense to the creators of firmadyne they mention that if this occurs its a bug and to report it, which I haven't done as yet. Bottom line is I can't emulate the firmware to prove (or disprove) that maybe the files are created during run-time. Anyway I will keep on researching for now.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "firmware"
    ],
    "user": "user1803784",
    "time": "Jun 12, 2018 at 18:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n does the binary have .cgi names in it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1803784",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky I will double check. I'm using radare2 to disassemble and I'm fairly new to it and new to ARM assembly (more familiar with x86) so will try again. It seems the binary has been stripped of its symbols but I believe you're telling to look for a \".cgi\" string so will check and update you. Thanks\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1803784",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky Yup you were right I ran strings on httpd binary and found the cgi filenames in there thanks for the help.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1803784",
            "text": "<html><body><span class=\"comment-copy\">\n Yea so i was wrong about the symbols too it does have them in there\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n It would be fair to state which firmware version we're talking about. Do you mean\n <a href=\"http://www.downloads.netgear.com/files/GDC/R6250/R6250-V1.0.4.26_10.1.23.zip\" rel=\"nofollow noreferrer\">\n  R6250-V1.0.4.26_10.1.23.zip\n </a>\n ?\n <code>\n  grep -RPho '[^\"]+\\.cgi'|sort -u\n </code>\n gives me 162 distinct mentions of files \"named\"\n <code>\n  .cgi\n </code>\n whereas only a single\n <code>\n  genie.cgi\n </code>\n exists in the overall rootfs.\n <code>\n  /usr/sbin/httpd\n </code>\n looks like a treasure trove of strings. It's not an Apache, though. Looks more like homebrew. And guess what, a whole bunch of the\n <code>\n  .cgi\n </code>\n names mentioned also in the HTML files inside\n <code>\n  /www\n </code>\n . So you're in luck.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While you don't give the necessary details in your question, I decided to give it a go with the\n  <a href=\"http://www.downloads.netgear.com/files/GDC/R6250/R6250-V1.0.4.26_10.1.23.zip\" rel=\"nofollow noreferrer\">\n   R6250-V1.0.4.26_10.1.23.zip\n  </a>\n  from the Netgear website. I don't know how close that is to whatever target you are currently looking at, but the environment look superficially rather similar (especially contents of\n  <code>\n   /etc\n  </code>\n  ).\n </p>\n <p>\n  First I used\n  <a href=\"https://github.com/rampageX/firmware-mod-kit\" rel=\"nofollow noreferrer\">\n   firmware-mod-kit\n  </a>\n  to extract the\n  <code>\n   .chk\n  </code>\n  file inside the downloaded\n  <code>\n   .zip\n  </code>\n  :\n </p>\n <pre><code>$ extract-firmware.sh R6250-V1.0.4.26_10.1.23.chk \nFirmware Mod Kit (extract) 0.99, (c)2011-2013 Craig Heffner, Jeremy Collake\n\nScanning firmware...\n\nScan Time:     2018-06-13 17:23:43\nTarget File:   /home/user/netgear/R6250-V1.0.4.26_10.1.23.chk\nMD5 Checksum:  fbb0ddc095cbca7abebe90a19a1b39b7\nSignatures:    344\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n58            0x3A            TRX firmware header, little endian, image size: 19345408 bytes, CRC32: 0xE9FDE7D3, flags: 0x0, version: 1, header size: 28 bytes, loader offset: 0x1C, linux kernel offset: 0x23F01C, rootfs offset: 0x0\n86            0x56            LZMA compressed data, properties: 0x5D, dictionary size: 65536 bytes, uncompressed size: 5467936 bytes\n2355286       0x23F056        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 16983563 bytes, 1244 inodes, blocksize: 131072 bytes, created: 2018-04-02 13:08:38\n\nExtracting 2355286 bytes of  header image at offset 0\nExtracting squashfs file system at offset 2355286\nExtracting squashfs files...\nFirmware extraction successful!\nFirmware parts can be found in '/home/user/netgear/fmk/*'\n</code></pre>\n <p>\n  Then I started to explore the contents of\n  <code>\n   fmk/rootfs\n  </code>\n  using standard Linux tools. For example only a single\n  <code>\n   .cgi\n  </code>\n  file existed in the whole rootfs.\n </p>\n <pre><code>$ find -name '*.cgi'\n./www/cgi-bin/genie.cgi\n</code></pre>\n <p>\n  With\n  <code>\n   grep -R \\.cgi www\n  </code>\n  I was able to find a whole bunch of references to different \"files\" named\n  <code>\n   .cgi\n  </code>\n  used inside forms of the router's web interface.\n </p>\n <p>\n  I then attempted to filter down the list a little further (inside\n  <code>\n   fmk/rootfs/www\n  </code>\n  ):\n </p>\n <pre><code>grep -RPho '[^\"]+\\.cgi'|sort -u\n</code></pre>\n <p>\n  There were some outliers in the resulting list, but the outcome was useful nevertheless.\n </p>\n <p>\n  Armed with that knowledge I turned back to the rootfs in order to look for the web server. I could have used\n  <code>\n   find -name httpd\n  </code>\n  , as it turns out, but in reality I was looking through\n  <code>\n   /bin\n  </code>\n  ,\n  <code>\n   /usr/bin\n  </code>\n  and\n  <code>\n   /usr/sbin\n  </code>\n  in that order and found a binary named\n  <code>\n   httpd\n  </code>\n  in the last one.\n </p>\n <p>\n  Using\n  <code>\n   strings httpd\n  </code>\n  from inside\n  <code>\n   fmk/rootfs/usr/sbin\n  </code>\n  gave me further clues and definitely proved that this was no Nginx or Apache. With\n  <code>\n   strings httpd|grep \\.cgi\n  </code>\n  I was also able to verify that the quote:\n </p>\n <blockquote>\n  <p>\n   <code>\n    apply.cgi\n   </code>\n   is not really a script, but a function that is invoked in the HTTP server\n  </p>\n </blockquote>\n <p>\n  appears to hold true.\n </p>\n <p>\n  Using\n  <code>\n   readelf -d httpd\n  </code>\n  I figured out the dependencies (excerpt):\n </p>\n <pre><code>$ readelf -d httpd\n\nDynamic section at offset 0xae00c contains 31 entries:\n  Tag        Type                         Name/Value\n 0x00000001 (NEEDED)                     Shared library: [libnat.so]\n 0x00000001 (NEEDED)                     Shared library: [libnvram.so]\n 0x00000001 (NEEDED)                     Shared library: [libacos_shared.so]\n 0x00000001 (NEEDED)                     Shared library: [libcrypt.so.0]\n 0x00000001 (NEEDED)                     Shared library: [libgcc_s.so.1]\n 0x00000001 (NEEDED)                     Shared library: [libssl.so.1.0.0]\n 0x00000001 (NEEDED)                     Shared library: [libcrypto.so.1.0.0]\n 0x00000001 (NEEDED)                     Shared library: [libc.so.0]\n</code></pre>\n <p>\n  to know which libraries to look at, should the need come up.\n </p>\n <p>\n  Last but not least I loaded the ELF file\n  <code>\n   httpd\n  </code>\n  into IDA Pro 7.1, turned to the\n  <strong>\n   Strings\n  </strong>\n  subview using\n  <kbd>\n   Shift\n  </kbd>\n  +\n  <kbd>\n   F12\n  </kbd>\n  and started looking for the\n  <code>\n   .cgi\n  </code>\n  names. The\n  <code>\n   apply.cgi\n  </code>\n  you mentioned does not exist (verified by using\n  <code>\n   strings\n  </code>\n  on\n  <code>\n   httpd\n  </code>\n  and\n  <code>\n   grep -R apply\\.cgi fmk/rootfs/www\n  </code>\n  ). So I needed to pick another CGI as an example.\n </p>\n <p>\n  I went for\n  <code>\n   userlogin.cgi\n  </code>\n  , which was one of the first names to come up when searching for text\n  <code>\n   .cgi\n  </code>\n  from top down using\n  <kbd>\n   Alt\n  </kbd>\n  +\n  <kbd>\n   T\n  </kbd>\n  in\n  <strong>\n   IDA View-A\n  </strong>\n  .\n </p>\n <p>\n  Listing the cross-references (\n  <kbd>\n   x\n  </kbd>\n  ) to the string containing\n  <code>\n   userlogin.cgi\n  </code>\n  :\n </p>\n <pre><code>.rodata:000823DC aUserloginCgi   DCB \"userlogin.cgi\",0\n</code></pre>\n <p>\n  turned up several references to\n  <code>\n   sub_F110\n  </code>\n  (\n  <code>\n   .text:0000F110\n  </code>\n  ..\n  <code>\n   .text:0001289C\n  </code>\n  ), which - when following these cross-references - turned out to be one central \"mega-function\" for parsing HTTP requests and handling the requests to any number of hardcoded\n  <code>\n   .cgi\n  </code>\n  and\n  <code>\n   .htm\n  </code>\n  \"file names\". (NB: make sure to look for references to strings containing\n  <code>\n   cgi-bin\n  </code>\n  as well.)\n </p>\n <p>\n  So your suspicion, based on that quote, was true and with the sole exception of the\n  <code>\n   genie.cgi\n  </code>\n  found on the file system, all other\n  <code>\n   .cgi\n  </code>\n  \"files\" are handled directly by the massive 1.3 MiB\n  <code>\n   httpd\n  </code>\n  binary.\n </p>\n <p>\n  The binary contains strings aplenty and apparently even some assertion strings among them.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jun 13, 2018 at 20:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">Thanks for the detail explanation of your process of reverse engineering. I followed somewhat the similar path you did to discover that the cgi files were indeed embedded in the webserver as @IgorSkochinsky pointed out. However, the only difference I notice was between our information is that the webserver I found was one called goahead web server (<a href=\"https://www.embedthis.com/goahead/\" rel=\"nofollow noreferrer\">embedthis.com/goahead</a>). Mostly like our information differs due to my lack of detail on the firmware I was analyzing. None the less thanks again for you assistance.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Check the web server's configuration files, if you haven't. Assuming it's a normal web server (like Apache or Nginx), everything you need will be in\n  <code>\n   httpd.conf\n  </code>\n  /\n  <code>\n   nginx.conf\n  </code>\n  or one of the files they load.\n </p>\n <p>\n  You might also want to try grepping for it -\n  <code>\n   grep -ri filename.cgi filesystem/\n  </code>\n  . That'll be slowwww, but you'll find anything that references that name.\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "0xC0000022L",
            "time": "Jun 13, 2018 at 15:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">I already checked for a config file and unfortunately they weren't any :( ..I also already search the entire file system for files with the extension cgi. I will edit the post with my screenshots. Thanks for your suggestion none the less.</span>",
                    "time": null
                },
                {
                    "user": "Ron Bowes",
                    "text": "<span class=\"comment-copy\">Using <code>grep</code> will look inside files, not just filenames - it's slow, but it might lead you to whatever files point to these CGIs</span>",
                    "time": null
                },
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">I've done this and the files that shows up having a reference to cgi files are the same ones I'm referring to in the www directory in my original question. I will just have to keep looking bro</span>",
                    "time": null
                },
                {
                    "user": "Ron Bowes",
                    "text": "<span class=\"comment-copy\">Is it possible it's on another filesystem?</span>",
                    "time": null
                },
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">I ran strings on the binary and found the cgi file names in the output so I believe their code are in the binary itself maybe the httpd do a strcmp call and do the necessary code. I'm looking at it as we speak.</span>",
                    "time": null
                }
            ]
        }
    ]
}