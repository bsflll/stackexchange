{
    "title": "How to dump Android shared library from memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/14116/how-to-dump-android-shared-library-from-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have encrypted Android\n  <code>\n   so\n  </code>\n  library that decrypts itself on load. I want to get its unencrypted code. For me it looks good idea to dump that library from memory when application started.\n </p>\n <p>\n  I used\n  <code>\n   /proc/self/maps\n  </code>\n  to get loaded process memory map. I found 3 segments that correspond to the library in memory maps and used\n  <code>\n   /proc/self/mem\n  </code>\n  to dump these 3 segments to binary files. So, I got 3 binary files: code, writable data and read only data.\n </p>\n <p>\n  Does anyone know how to parse these 3 binary files and assemble them back to\n  <code>\n   so\n  </code>\n  file that Android can run & debug?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "8k",
    "tags": [
        "android",
        "shared-object"
    ],
    "user": "Vitalii",
    "time": "Dec 7, 2016 at 10:16",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n See\n <a href=\"https://security.stackexchange.com/questions/62300/memory-dumping-android\">\n  Memory dumping Android\n </a>\n on Security.SE\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use\n  <a href=\"http://gameguardian.net/download\" rel=\"nofollow noreferrer\">\n   GameGuardian\n  </a>\n  for dump memory. Need root.\n </p>\n <p>\n  Memory editor tab - menu - memory dump - select range and folder - press ok - wait for toast \"Dump end\".\n </p>\n <p>\n  Here some video examples how to do this:\n </p>\n <ul>\n  <li>\n   <a href=\"https://gameguardian.net/forum/gallery/image/248-how-to-dump-memory-of-any-running-processes-in-android-gameguardian/\" rel=\"nofollow noreferrer\">\n    How to dump memory of any running processes in Android -\nGameGuardian\n   </a>\n  </li>\n  <li>\n   <a href=\"https://gameguardian.net/forum/gallery/image/251-how-to-dump-odex-file-from-memory-on-android-gameguardian/\" rel=\"nofollow noreferrer\">\n    How to dump odex file from memory on Android -\nGameGuardian\n   </a>\n  </li>\n  <li>\n   <a href=\"https://gameguardian.net/forum/gallery/image/252-how-to-dump-deleted-file-from-memory-on-android-gameguardian/\" rel=\"nofollow noreferrer\">\n    How to dump deleted file from memory on Android -\nGameGuardian\n   </a>\n  </li>\n </ul>\n <p>\n  But it not enough for build valid ELF (.so) file from dump. It is impossible because some data from ELF used only on load and never stored in memory. And some other data (relocations for example) changed during ELF load.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Enyby",
            "time": "Mar 25, 2017 at 4:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Frida is the way to go, you can simply do:\n </p>\n <pre><code>memorydump: function (address, size) {\n    Memory.protect(ptr(address), size, \"rwx\");\n    var a = Memory.readByteArray(ptr(address),size-1000);\n    return a;\n}\n\nmoduleaddress: function (lib){\n  try{\n\n    var ret = [];\n    var module = Process.findModuleByName(lib);\n    var address = Module.findBaseAddress(lib);\n    var sz = module.size;\n  \n  ret.push({\n    \"addr\": address,\n    \"size\": sz\n  });\n  return ret;\n}\ncatch(err){\n  console.log('[!] Error: '+err);\n}\n\n}\n</code></pre>\n <p>\n  If you are not comfortable with Frida you can use a wrapper:\n  <a href=\"https://github.com/Ch0pin/medusa\" rel=\"nofollow noreferrer\">\n   https://github.com/Ch0pin/medusa\n  </a>\n </p>\n <p>\n  dumping the memory will be simply as: medusa>memops package_name libname.so\n </p>\n <p>\n  and then just type dump :)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Dimitris Valsamaras",
            "time": "Nov 6, 2020 at 8:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bala R",
                    "text": "<span class=\"comment-copy\">Why the size - 1000?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Maybe this helps:\n  <a href=\"https://www.andnixsh.com/2015/11/tutorial-how-to-decrypt-encrypted-dll.html\" rel=\"nofollow noreferrer\">\n   https://www.andnixsh.com/2015/11/tutorial-how-to-decrypt-encrypted-dll.html\n  </a>\n </p>\n <p>\n  You can create dump from memory using\n  <code>\n   gcore <path>\n  </code>\n  command and recover any plain files (.dex, .dll, .mp3, etc) using custom GDB for Android. I'm not sure if you can recover decrypted .so file.\n </p>\n <p>\n  Custom GDB only works on ARM-based devices running Android 4.4.4 and below. If you want to get it work for 5.x.x, you need to bypassing PIE security check but there is a risk of bricking your device.\n  <a href=\"https://www.alphagamers.net/threads/guide-bypassing-pie-security-check-android-5-0-up.242363/\" rel=\"nofollow noreferrer\">\n   https://www.alphagamers.net/threads/guide-bypassing-pie-security-check-android-5-0-up.242363/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "0xabc",
            "time": "Apr 3, 2020 at 15:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}