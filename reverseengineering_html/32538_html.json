{
    "title": "Hexrays - Enhance decompilation of \"pre-multiplied\" array indices?",
    "link": "https://reverseengineering.stackexchange.com/questions/32538/hexrays-enhance-decompilation-of-pre-multiplied-array-indices",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For this x86 (Watcom 1997) assembly that loops over an array, Hexrays yields the following pseudo code:\n </p>\n <pre><code>lea     eax, ds:0[ecx*4]\nadd     eax, ecx\nshl     eax, 3\nmov     [esp+310h+iMulSize], eax\n\nmov     edx, [esp+310h+iMulSize]\nmov     eax, [esi+14h]\nadd     edx, eax\nmov     eax, [esp+310h+v3Normal.x]\nmov     [edx], eax\n\nmov     edx, [esp+310h+iMulSize]\nmov     eax, [esi+14h]\nadd     edx, eax\nmov     eax, [esp+310h+v3Normal.y]\nmov     [edx+4], eax\n\nmov     ebx, [esp+310h+iMulSize]\nmov     edx, [esi+14h]\nadd     edx, ebx\nmov     eax, [esp+310h+v3Normal.z]\nmov     [edx+8], eax\n</code></pre>\n <pre class=\"lang-c prettyprint-override\"><code>iMulSize = sizeof(Tri) * i; // sizeof(Tri) = 0x28\n\npObject->paTris[i].v3Normal.x = v3Normal.x; // paTris at 0x14 in pObject\n*(int *)((char *)&pObject->paTris->v3Normal.y + iMulSize) = v3Normal.y;\n*(int *)((char *)&pObject->paTris->v3Normal.z + iMulSize) = v3Normal.z;\n</code></pre>\n <p>\n  While easy to understand here, it leads to quite unreadable pseudo code in more complicated parts which also \"pre-multiply\" array indices by element size.\n </p>\n <p>\n  I tried to apply\n  <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-54-shifted-pointers/\" rel=\"nofollow noreferrer\">\n   shifted pointers\n  </a>\n  functionality, but don't know how for array indices.\n  <strong>\n   Is there a way I can enhance the output to become more readable as below?\n  </strong>\n  As seen in this 1998 version of the executable (which is not of analysis interest):\n </p>\n <pre class=\"lang-c prettyprint-override\"><code>pObject->paTris[i].v3Normal.x = v3Normal.x;\npObject->paTris[i].v3Normal.y = v3Normal.y;\npObject->paTris[i].v3Normal.z = v3Normal.z;\n</code></pre>\n <pre><code>imul    eax, [ebp+i], 28h\nmov     edx, [ebp+pObject]\nmov     edx, [edx+14h]\nadd     edx, eax\nmov     eax, [ebp+v3Normal.x]\nmov     [edx], eax\n\nimul    edx, [ebp+i], 28h\nmov     eax, [ebp+pObject]\nmov     eax, [eax+14h]\nadd     edx, eax\nmov     eax, [ebp+v3Normal.y]\nmov     [edx+4], eax\n\nimul    edx, [ebp+i], 28h\nmov     eax, [ebp+pObject]\nmov     eax, [eax+14h]\nadd     edx, eax\nmov     eax, [ebp+v3Normal.z]\nmov     [edx+8], eax\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "65",
    "tags": [
        "ida",
        "x86",
        "hexrays",
        "array"
    ],
    "user": "Ray",
    "time": "Dec 1, 2023 at 13:04",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Which version of Hex-Rays? They've made changes to this part over the years.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ray",
            "text": "<html><body><span class=\"comment-copy\">\n @RolfRolles I'm still on 7.6 SP1 sadly.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n do you have a link to the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ray",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky I uploaded both binaries (as they're found in publicly available patches anyway) at\n <a href=\"https://1drv.ms/u/s!ApLbv3xVffjriVPTQ6CRIAqYFHUg\" rel=\"nofollow noreferrer\">\n  1drv.ms/u/s!ApLbv3xVffjriVPTQ6CRIAqYFHUg\n </a>\n . As mentioned, the older exe \"premultiplies\" a lot while the newer doesn't; sampled array access is at 004A6EA9 (older) / 004C56DE (newer) - though maybe a bit long and needing the structs for a recognizable decompile (I can search for simpler examples if required). The older executable also seemingly orders instructions unusually.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}