{
    "title": "Decyphering 8kbps audio file format used in Solar Chanting Lotus",
    "link": "https://reverseengineering.stackexchange.com/questions/31682/decyphering-8kbps-audio-file-format-used-in-solar-chanting-lotus",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer a solar powered chanting lotus flower so that I might replace the built in audio with something more interesting. The main chip (JL16B-083A - haven't been able to find any info on it) draws data from a 16MB flash that contains about 4.5 hours of audio. This averages somewhere near 8kbit/sec, putting us in speech codec territory. There are 3 differnet \"tracks\", and I'm looking for help to identify or reverse engineer the specific audio format.\n </p>\n <p>\n  I've extracted the ROM and using a logic analyzer have determined where it gets read and how often - while playing it seems to draw down 6 bytes in rapid succession, 2 bytes after a 20μs pause, 2 more bytes 72μs later, then does a variable amount of 2 bytes reads (around 11-20ish) every 35-110μs. These cycles repeat differently for every track - 39ms for track 1, 19ms for track 2, and 39ms or so for track 3. This seems to imply that we have a variable rate codec and the tracks are of diffrent bitrates, but the same codec across all tracks.\n </p>\n <p>\n  This thing was built to cost in China so I'd be shocked if they didn't just use an off the shelf codec... I was thinking something like MP3 or maybe even G729 as the audio quality isn't exactly stellar, but I haven't been able to tease out anything recognizealbe when I try raw imports to Audacity or VLC... Looking at the data in a hex editor doesn't show any evidence of MPEG frames, but its possible that it's somehow XOR encrypted or otherwise obfuscated... All it seems to do to validate it's found a track after looking at the address table is look at the first 2 bytes, which are always\n  <code>\n   4B 00\n  </code>\n  . So whatever it is isn't readily recognized on a PC.\n </p>\n <p>\n  Anyone come across this kind of thing before? ROM and logic traces are\n  <a href=\"https://drive.google.com/drive/folders/1uH5uuwAuahK7LY-CiW7Q5ArRyb6-SqVX?usp=share_link\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , low production values YouTube showing the thing in detail is\n  <a href=\"https://youtu.be/jOyUGs_eoLE\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  - would appreciate any insights peolpe might have to help further this mission!\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 0,
    "views": "68",
    "tags": [
        "file-format",
        "decryption",
        "hardware",
        "obfuscation",
        "deobfuscation"
    ],
    "user": "Captain Lavender",
    "time": "Mar 17, 2023 at 4:37",
    "comments": [
        {
            "user": "secfren",
            "text": "<html><body><span class=\"comment-copy\">\n Not sure if helpful but if you look for strings and the corresponding hex then you'll find some patterns of strings/hex which are repeated quite often. Next to those you then find some other repeating hex patterns.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "<html><body><span class=\"comment-copy\">\n I know this sound stupid, but\n <a href=\"https://github.com/christian-kramer/JieLi-AC690X-Familiarization\" rel=\"nofollow noreferrer\">\n  here\n </a>\n is the SDK for another JL chip. You might want to take a look at it to find if there is any custom audio encoding there.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}