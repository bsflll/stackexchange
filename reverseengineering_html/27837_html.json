{
    "title": "Reverse engineering Roland TR-8S kit file format .t8k",
    "link": "https://reverseengineering.stackexchange.com/questions/27837/reverse-engineering-roland-tr-8s-kit-file-format-t8k",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to figure out the file format that the Roland TR-8S drum machine uses for importing/exporting drum kits. My goal is to replace the sample (PCM) data within a kit. It's a proprietary binary format and files have the extension\n  <code>\n   .t8k\n  </code>\n  . Here's what I have figured out so far:\n </p>\n <p>\n  The format consists of multiple sections that start with a four character magic code each (\n  <code>\n   NAME\n  </code>\n  ,\n  <code>\n   TONE\n  </code>\n  ,\n  <code>\n   WAVE\n  </code>\n  ,\n  <code>\n   SMPL\n  </code>\n  etc.). I'm focusing on the\n  <code>\n   SMPL\n  </code>\n  section first. Here is an example:\n </p>\n <pre><code>00000868  53 4d 50 4c 00 00 02 00  cd cd e8 7e 3c db dc dd  |SMPL.......~<...|\n00000878  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00020878  53 4d 50 4c 00 00 02 00  cd cd e8 7e 3c db dc dd  |SMPL.......~<...|\n</code></pre>\n <p>\n  After the 4 byte magic code there is a 32bit value (0x20000) that indicates the length of the PCM data which starts at 0x878. The PCM data is all zeros in this example. If the original sample data is shorter than 0x20000 it will get padded with zeros.\n </p>\n <p>\n  The next four bytes (\n  <code>\n   cd cd e8 7e\n  </code>\n  ) is a CRC32 of the whole PCM data (0x20000 zeros in the example).\n </p>\n <p>\n  The four bytes after the CRC32 (\n  <code>\n   3c db dc dd\n  </code>\n  ) are unknown. They change whenever the whole zero padded block of PCM data changes. Like the CRC32, they do not change if only the number of zero padding bytes changes, and they do not seem to be affected by factors outside of the\n  <code>\n   SMPL\n  </code>\n  block. If the values of these bytes are incorrect, importing the kit into the drum machine fails with a generic error message.\n </p>\n <p>\n  I have tried\n  <a href=\"https://reveng.sourceforge.io/\" rel=\"nofollow noreferrer\">\n   CRC RevEng\n  </a>\n  but it did not find an algorithm. Also, it seems unlikely that the unknown bytes are an additional CRC.\n </p>\n <p>\n  What might be the purpose of these four unknown bytes? Is there a method that can help me find out?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "390",
    "tags": [
        "binary-analysis",
        "file-format",
        "crc",
        "binary-diagnosis",
        "unknown-data"
    ],
    "user": "Michael Ganß",
    "time": "Jun 14, 2021 at 18:22",
    "comments": [
        {
            "user": "Reino",
            "text": "<html><body><span class=\"comment-copy\">\n Did this reverse engineering operation yield any results? I'm looking for a way to manually change the user sample categories that are stored in this file\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Ganß",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, this resulted in a kit creator web application that you can access for free at\n <a href=\"https://baza.run/kits\" rel=\"nofollow noreferrer\">\n  baza.run/kits\n </a>\n . Here's a review at CDM:\n <a href=\"https://cdm.link/2021/10/this-beta-web-tool-lets-you-drag-and-drop-samples-into-roland-tr-8s-6s-kits-free/\" rel=\"nofollow noreferrer\">\n  cdm.link/2021/10/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "qel",
            "text": "<html><body><span class=\"comment-copy\">\n The webapp isn't going to help, but when you import a kit it saves the samples, so you can manually create a new kit and put the samples wherever you want.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After having unsuccessfully looking for complicated things I tried to think like a software developer and I found this:\n </p>\n <p>\n  CRC32 of \"534d504c00000200cdcde87e\" = 0xdddcdb3c\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Gordon Freeman",
            "time": "Jun 15, 2021 at 15:40",
            "is_accepted": true,
            "comments": []
        }
    ]
}