{
    "title": "How to decompile Linux .so library files from a MS-Windows OS?",
    "link": "https://reverseengineering.stackexchange.com/questions/2664/how-to-decompile-linux-so-library-files-from-a-ms-windows-os",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to decompile the Linux\n  <code>\n   .so\n  </code>\n  files.\n </p>\n <ul>\n  <li>\n   Any tool to decompile\n   <code>\n    .so\n   </code>\n   files in MS-Windows based operating system ?\n  </li>\n  <li>\n   Any tools/methods to decompile\n   <code>\n    .so\n   </code>\n   files ?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "15",
    "answers": 3,
    "views": "69k",
    "tags": [
        "tools",
        "decompilation",
        "decompile"
    ],
    "user": "BlueBerry - Vignesh4303",
    "time": "Aug 22, 2013 at 13:51",
    "comments": [
        {
            "user": "0xea",
            "text": "<html><body><span class=\"comment-copy\">\n any particular reason why you distinguish between SO files and regular ELFs?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As 0xea said, the\n  <code>\n   .so\n  </code>\n  file are just regular executable files but packed in a dynamic library style.\n </p>\n <p>\n  I know that you asked specifically about MS-Windows tools, but I will ignore this as 0xea already replied about that. I will try to explain how to do it with UNIX tools.\n </p>\n <h2>\n  Extract the functions from the library\n </h2>\n <p>\n  A first step will be to extract the name of all the functions that are present in this library to know what it is looking like. I will use\n  <code>\n   /usr/lib/libao.so.4.0.0\n  </code>\n  (a random library I took on my system which is small enough to be taken as an example).\n </p>\n <p>\n  First, run\n  <code>\n   readelf\n  </code>\n  on it to see a bit what you are on:\n </p>\n <pre><code>#> readelf -a /usr/lib/libao.so.4.0.0\n\nELF Header:\nMagic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \nClass:                             ELF64\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              DYN (Shared object file)\nMachine:                           Advanced Micro Devices X86-64\nVersion:                           0x1\nEntry point address:               0x1fb0\nStart of program headers:          64 (bytes into file)\nStart of section headers:          35392 (bytes into file)\nFlags:                             0x0\nSize of this header:               64 (bytes)\nSize of program headers:           56 (bytes)\nNumber of program headers:         6\nSize of section headers:           64 (bytes)\nNumber of section headers:         29\nSection header string table index: 28\n\n[...lots of tables and other information...]\n</code></pre>\n <p>\n  You may notice that\n  <code>\n   readelf\n  </code>\n  detected an entrypoint. In fact, it does correspond to the procedure in charge of initializing the memory to get the library properly loaded. But, it is of no use for us.\n </p>\n <p>\n  Looking at the rest of the output of\n  <code>\n   readelf -a\n  </code>\n  , the dynamic symbol table (\n  <code>\n   .dynsym\n  </code>\n  ) is quite informative because it contains entries like this:\n </p>\n <pre><code>43: 00000000000038e0  1302 FUNC    GLOBAL DEFAULT   13 ao_play@@LIBAO4_1.1.0\n</code></pre>\n <p>\n  In fact, every function from this dynamic library is in this list and you can extract it simply like this:\n </p>\n <pre><code>#> readelf -a /usr/lib/libao.so.4.0.0 | grep LIBAO4_1.1.0 | grep FUNC\n\n43: 00000000000038e0  1302 FUNC    GLOBAL DEFAULT   13 ao_play@@LIBAO4_1.1.0\n44: 0000000000003670   177 FUNC    GLOBAL DEFAULT   13 ao_append_option@@LIBAO4_1.1.0\n45: 00000000000040e0    70 FUNC    GLOBAL DEFAULT   13 ao_driver_info@@LIBAO4_1.1.0\n46: 0000000000002d40  2349 FUNC    GLOBAL DEFAULT   13 ao_initialize@@LIBAO4_1.1.0\n48: 0000000000003ef0   484 FUNC    GLOBAL DEFAULT   13 ao_default_driver_id@@LIBAO4_1.1.0\n49: 0000000000003e00   144 FUNC    GLOBAL DEFAULT   13 ao_close@@LIBAO4_1.1.0\n50: 0000000000005070   239 FUNC    GLOBAL DEFAULT   13 ao_open_file@@LIBAO4_1.1.0\n51: 0000000000005160     7 FUNC    GLOBAL DEFAULT   13 ao_open_live@@LIBAO4_1.1.0\n52: 0000000000003730    18 FUNC    GLOBAL DEFAULT   13 ao_append_global_option@@LIBAO4_1.1.0\n53: 0000000000003790   326 FUNC    GLOBAL DEFAULT   13 ao_shutdown@@LIBAO4_1.1.0\n54: 0000000000004130    16 FUNC    GLOBAL DEFAULT   13 ao_driver_info_list@@LIBAO4_1.1.0\n55: 0000000000003750    60 FUNC    GLOBAL DEFAULT   13 ao_free_options@@LIBAO4_1.1.0\n56: 0000000000004140    13 FUNC    GLOBAL DEFAULT   13 ao_is_big_endian@@LIBAO4_1.1.0\n57: 0000000000003e90    92 FUNC    GLOBAL DEFAULT   13 ao_driver_id@@LIBAO4_1.1.0\n</code></pre>\n <p>\n  What you get here, is the names of the functions which are in the\n  <code>\n   .so\n  </code>\n  plus the address of their code in the memory (first column).\n </p>\n <p>\n  Note that you can also get this information by using\n  <code>\n   objdump\n  </code>\n  like this:\n </p>\n <pre><code>#> objdump -T /usr/lib/libao.so.4.0.0 | grep LIBAO4_1.1.0 | grep DF\n00000000000038e0 g    DF .text  0000000000000516  LIBAO4_1.1.0 ao_play\n0000000000003670 g    DF .text  00000000000000b1  LIBAO4_1.1.0 ao_append_option\n00000000000040e0 g    DF .text  0000000000000046  LIBAO4_1.1.0 ao_driver_info\n0000000000002d40 g    DF .text  000000000000092d  LIBAO4_1.1.0 ao_initialize\n0000000000003ef0 g    DF .text  00000000000001e4  LIBAO4_1.1.0 ao_default_driver_id\n0000000000003e00 g    DF .text  0000000000000090  LIBAO4_1.1.0 ao_close\n0000000000005070 g    DF .text  00000000000000ef  LIBAO4_1.1.0 ao_open_file\n0000000000005160 g    DF .text  0000000000000007  LIBAO4_1.1.0 ao_open_live\n0000000000003730 g    DF .text  0000000000000012  LIBAO4_1.1.0 ao_append_global_option\n0000000000003790 g    DF .text  0000000000000146  LIBAO4_1.1.0 ao_shutdown\n0000000000004130 g    DF .text  0000000000000010  LIBAO4_1.1.0 ao_driver_info_list\n0000000000003750 g    DF .text  000000000000003c  LIBAO4_1.1.0 ao_free_options\n0000000000004140 g    DF .text  000000000000000d  LIBAO4_1.1.0 ao_is_big_endian\n0000000000003e90 g    DF .text  000000000000005c  LIBAO4_1.1.0 ao_driver_id\n</code></pre>\n <h2>\n  Disassemble each function\n </h2>\n <p>\n  It is time now to use\n  <code>\n   objdump\n  </code>\n  (or a more advanced disassembler if you can get one). Given the list of functions and their address in the binary, you can simply run\n  <code>\n   objdump\n  </code>\n  for each function like this:\n </p>\n <pre><code>objdump -d /usr/lib/libao.so.4.0.0 --start-address=0x3730\n</code></pre>\n <p>\n  Note that, as\n  <code>\n   objdump\n  </code>\n  use linear sweep, the disassembly may not be exact (see the following example) and, you also will have to decide by yourself when it ends.\n </p>\n <pre><code>#> objdump -d /usr/lib/libao.so.4.0.0 --start-address=0x3730\n\n/usr/lib/libao.so.4.0.0:     file format elf64-x86-64\n\nDisassembly of section .text:\n0000000000003730 <ao_append_global_option>:\n 3730:       48 89 f2                mov    %rsi,%rdx\n 3733:       48 89 fe                mov    %rdi,%rsi\n 3736:       48 8d 3d cb 52 20 00    lea    0x2052cb(%rip),%rdi\n 373d:       e9 4e e6 ff ff          jmpq   1d90 <ao_append_option@plt>\n 3742:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)\n 3749:       1f 84 00 00 00 00 00 \n\n0000000000003750 <ao_free_options>:\n 3750:       55                      push   %rbp\n 3751:       53                      push   %rbx\n 3752:       48 89 fb                mov    %rdi,%rbx\n 3755:       48 83 ec 08             sub    $0x8,%rsp\n 3759:       48 85 ff                test   %rdi,%rdi\n 375c:       74 27                   je     3785 <ao_free_options+0x35>\n 375e:       66 90                   xchg   %ax,%ax\n 3760:       48 8b 3b                mov    (%rbx),%rdi\n 3763:       48 8b 6b 10             mov    0x10(%rbx),%rbp\n 3767:       e8 c4 e5 ff ff          callq  1d30 <free@plt>\n 376c:       48 8b 7b 08             mov    0x8(%rbx),%rdi\n 3770:       e8 bb e5 ff ff          callq  1d30 <free@plt>\n 3775:       48 89 df                mov    %rbx,%rdi\n 3778:       48 89 eb                mov    %rbp,%rbx\n 377b:       e8 b0 e5 ff ff          callq  1d30 <free@plt>\n [... clip ...]\n</code></pre>\n <p>\n  And, that's about all (but, get a better disassembler than\n  <code>\n   objdump\n  </code>\n  !).\n </p>\n</div>\n</body></html>",
            "votes": "19",
            "user": "perror",
            "time": "Aug 23, 2013 at 8:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BlueBerry - Vignesh4303",
                    "text": "<span class=\"comment-copy\">nice explanation :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Linux shared object files are ELFs too! Any decompiler that works on \"regular\" ELF files will work for SO files too.\n </p>\n <p>\n  That said, you can use IDA Pro to disassemble them as usual. If you have IDA Pro licence with Hex-rays decompiler, you can use that. If you don't have Hex-rays, you can try\n  <a href=\"https://github.com/EiNSTeiN-/ida-decompiler\" rel=\"nofollow\">\n   ida-decompiler\n  </a>\n  plugin to get some results. It's open source, but is far less advanced than Hex-rays.\n </p>\n <p>\n  The distinction between disassembling and decompiling is that disassembling the binary code will give you the assembly equivalent. Decompiling on the other hand implies the process of converting the raw assembly code into a higher level language (in this case C).\n </p>\n <p>\n  Decompiling assembly code is not an easy task, as many abstractions that higher level code has are lost on the assembly level.  Recovering those abstractions is the difficult part.\n  \n\n  For example, you usually lose variable names.\n </p>\n <p>\n  On the other hand, decompiling some bytecode into a higher language, like java bytecode to java, is somewhat easier because many of these abstractions are preserved in the bytecode.\n </p>\n <p>\n  Automatic decompilation of assembly code with current tools isn't perfect, it's meant to serve as a helper in revering. You can also manualy decompile assembly code to higher language by recognizing code constructs (like for loops, if statements, switches and similar).\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Jul 24, 2014 at 10:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you can use hteditor by seppel  if disassembly is ok\n  <a href=\"http://hte.sourceforge.net/\" rel=\"nofollow\">\n   http://hte.sourceforge.net/\n  </a>\n </p>\n <p>\n  copy the .so file from linux machine with say samba\n </p>\n <p>\n  and feed the so file to hteditor\n </p>\n <p>\n  a sample using libc.so.6 from a damn small linux\n </p>\n <p>\n  assuming samba is up and running  in vm and a shared folder in windows host is created \nsay\n  <code>\n   c:\\sharedwithvm\n  </code>\n </p>\n <pre><code>from the linux machine \n</code></pre>\n <p>\n  cp  ../..../lib/libc.so.6 /mnt//sharedwithvm\n </p>\n <pre><code>in the windows machine \n\nC:\\>cd sharedwithvm\n\nC:\\sharedwithvm>dir /b\nlibc.so.6\n\nC:\\sharedwithvm>f:\\hteditor\\2022\\ht-2.0.22-win32.exe libc.so.6\n</code></pre>\n <p>\n  hteditor will open with hex view\n </p>\n <pre><code>f6 select elf\\image\n\nf8 symbols type fo\n\n60490 │ func │ fopen                                ▲\n</code></pre>\n <p>\n  double click to view the disassembly\n </p>\n <pre><code><.text> @00060490  push ebp\nfopen+0\n   ..... ! ;********************************************************\n   ..... ! ; function fopen (global)\n   ..... ! ;********************************************************\n   ..... ! fopen:                          ;xref c189a7 c262da c74722\n   ..... !                                 ;xref c93c74 c94cd5 cd23c4\n   ..... !                                 ;xref cd3617 cd37c6 cd3a1a\n   ..... !                                 ;xref cd7061 cd717f cd729f\n   ..... !                                 ;xref ce50e3 ce67e6 ce7581\n   ..... !                                 ;xref cef095 cf0302\n   ..... !   push        ebp\n   60491 !   mov         ebp, esp\n   60493 !   sub         esp, 18h\n   60496 !   mov         [ebp-4], ebx\n   60499 !   mov         eax, [ebp+0ch]\n   6049c !   call        sub_15c8d\n   604a1 !   add         ebx, offset_cab57\n   604a7 !   mov         dword ptr [esp+8], 1\n   604af !   mov         [esp+4], eax\n   604b3 !   mov         eax, [ebp+8]\n</code></pre>\n</div>\n</body></html>",
            "votes": "5",
            "user": "blabb",
            "time": "Aug 23, 2013 at 9:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}