{
    "title": "Create exe that jumps directly into main()-function from C",
    "link": "https://reverseengineering.stackexchange.com/questions/32131/create-exe-that-jumps-directly-into-main-function-from-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using x64dbg to explore image files on Windows. After the computer finishes prowling ntdll.dll it jumps to OptionalHeader.AddressOfEntryPoint.\nBut this is not my main()-function.\n </p>\n <ol>\n  <li>\n   What is this code in my EXE that is not mine?\n  </li>\n  <li>\n   Can you remove it so there is only my main()-function remaining?\n  </li>\n  <li>\n   Do you know a way to find the main()-function easily?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "115",
    "tags": [
        "c",
        "pe",
        "x64dbg"
    ],
    "user": "AirToTec",
    "time": "Aug 4, 2023 at 16:12",
    "comments": [
        {
            "user": "josh poley",
            "text": "<html><body><span class=\"comment-copy\">\n You are looking at CRT initialization. You don't say what toolset you are using but with microsoft tooling, look at the\n <a href=\"https://learn.microsoft.com/en-us/cpp/build/reference/entry-entry-point-symbol\" rel=\"nofollow noreferrer\">\n  /ENTRY\n </a>\n linker flag.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The code that runs before your\n  <code>\n   main\n  </code>\n  function is the C Runtime (CRT) initialization code. There are ways to remove it, such as via the\n  <code>\n   /NODEFAULTLIB\n  </code>\n  and\n  <code>\n   /ENTRY\n  </code>\n  command-line options to the linker, but be careful what you wish for. If any of your code calls functions in the C standard library (such as\n  <code>\n   printf\n  </code>\n  ,\n  <code>\n   malloc\n  </code>\n  , etc.), you will not be able to link your code into a final binary unless you provide your own implementations for those functions. Your implementations must be from scratch; you won't be able to rely upon any standard library functions, or implement them using any third-party library that itself relies upon the standard library. This is not a beginner-friendly task, to put it mildly.\n </p>\n <p>\n  To find the\n  <code>\n   main\n  </code>\n  function in a binary: first, note that tools such as IDA do this automatically. To do it manually, first familiarize yourself with the CRT functions that execute before\n  <code>\n   main\n  </code>\n  , find where it calls\n  <code>\n   main\n  </code>\n  . Then, for any given binary, you can locate the address of\n  <code>\n   main\n  </code>\n  by examining those CRT functions around the locations where they call\n  <code>\n   main\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Aug 4, 2023 at 21:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}