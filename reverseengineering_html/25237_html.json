{
    "title": "Simple angr example not working",
    "link": "https://reverseengineering.stackexchange.com/questions/25237/simple-angr-example-not-working",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to learn angr from beginning. Due to lack of simple tutorials I programmed my own little executable which angr should solve.\n </p>\n <p>\n  The C code looks as follows:\n </p>\n <pre><code>#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n    char buffer[20];\n    printf(\"Password\n\");\n    fgets(buffer,20,stdin);\n    if (strcmp(buffer,\"super!\n\")==0) {\n        printf(\"SUCCESS!\n\");\n    } else {\n        printf(\"FAIL!\n\");\n    }\n    return 0;\n}\n</code></pre>\n <p>\n  When compiled and opened in binary ninja I see the printfs at following addresses:\n  <a href=\"https://i.sstatic.net/nMLiL.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"BN\" src=\"https://i.sstatic.net/nMLiL.png\"/>\n  </a>\n  So I created following angr python3 code:\n </p>\n <pre><code>import angr\nfrom angr.state_plugins import SimSystemPosix\n\np = angr.Project('./test')\nstate = p.factory.entry_state()\n\n\n\nsm = p.factory.simulation_manager(state)\nsm.explore(find=0x40118c, avoid=0x40119a)\n\nprint(sm.found)\n</code></pre>\n <p>\n  Running the python code shows following output:\n </p>\n <blockquote>\n  <p>\n   python3 solve_angr.py \n  WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | The program is accessing memory or registers with an unspecified value. This could indicate unwanted behavior.\n   \n\n   WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:\n   \n\n   WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | 1) setting a value to the initial state\n   \n\n   WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null\n   \n\n   WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY_REGISTERS}, to suppress these messages.\n   \n\n   WARNING | 2020-06-08 10:02:29,498 | angr.state_plugins.symbolic_memory | Filling memory at 0x7fffffffffefff8 with 72 unconstrained bytes referenced from 0x58d4e0 (strcmp+0x0 in libc.so.6 (0x8d4e0))\n   \n\n   WARNING | 2020-06-08 10:02:29,499 | angr.state_plugins.symbolic_memory | Filling memory at 0x7fffffffffeff70 with 8 unconstrained bytes referenced from 0x58d4e0 (strcmp+0x0 in libc.so.6 (0x8d4e0))\n   \n\n   []\n  </p>\n </blockquote>\n <p>\n  The [] indicates that it did not find any solution.\n </p>\n <p>\n  Can anybody tell me what I did wrong?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "c",
        "angr"
    ],
    "user": "User64234",
    "time": "Jun 8, 2020 at 8:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I believe that the issue is related to the way\n  <code>\n   gets\n  </code>\n  symbolic procedure implemented in angr. You are asking to read 20 bytes, and as far as I understand, the actual symbolic memory that is allocated is of the size of 20 (19 string characters and a NULL terminator). Later, when you call to\n  <code>\n   strcmp\n  </code>\n  , the comparison will always fail, because you compare 20 bytes string to\n  <code>\n   super!\n\n  </code>\n  which is shorter. So the compare result will never be 0, and angr's symbolic execution engine will never reach the\n  <code>\n   printf(\"SUCCESS!\n\");\n  </code>\n  clause.\n </p>\n <p>\n  If you modify your code to be:\n </p>\n <pre><code>#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n    char buffer[20];\n    printf(\"Password\n\");\n    fgets(buffer,8,stdin); // <-------------- Adjust size to be same as \"super!\n\"\n    if (strcmp(buffer,\"super!\n\")==0) {\n        printf(\"SUCCESS!\n\");\n    } else {\n        printf(\"FAIL!\n\");\n    }\n    return 0;\n}\n</code></pre>\n <p>\n  This way it works fine and reaches\n  <code>\n   printf(\"SUCCESS!\n\");\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "macro_controller",
            "time": "Jun 8, 2020 at 14:20",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you can't modify the binary but through the static analysis you get the number of bytes you need to provide as a flag, you can construct bit vector\n </p>\n <pre><code>flag_chars = [claripy.BVS('flag_%d' % i, 8) for i in range(6)]\nflag = claripy.Concat(*flag_chars + [claripy.BVV(b'\n')])\n</code></pre>\n <p>\n  and pass that to the\n  <code>\n   entry_state\n  </code>\n  since the flag is provided as an input through\n  <code>\n   stdin\n  </code>\n  to this binary.\n </p>\n <pre><code>p = angr.Project('test')\nstate = p.factory.entry_state(args=['./test'], stdin=flag)\n</code></pre>\n <p>\n  With such setup,\n  <code>\n   angr\n  </code>\n  will successfully find the solution.\n </p>\n <p>\n  Additionally, if you would like to extract the flag\n </p>\n <pre><code>found = sm.found[0]\nflag_str = found.solver.eval_upto(flag, 7, cast_to = bytes)\nprint(flag_str)\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Jun 8, 2020 at 15:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}