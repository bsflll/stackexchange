{
    "title": "Function calls: xref.type always 'Code_Far_Call' or 'Code_Near_Call'?",
    "link": "https://reverseengineering.stackexchange.com/questions/8397/function-calls-xref-type-always-code-far-call-or-code-near-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Given a disassembly line in IDA Pro such as\n </p>\n <pre><code>.text:0040255B      call    sub_407C10\n</code></pre>\n <p>\n  Am I right to assume that analyzing the belonging address using\n </p>\n <pre><code>idautils.XrefsFrom(0x0040255B)\n</code></pre>\n <p>\n  always returns an xref of type 'Code_Far_Call' (xref.type 16) or 'Code_Near_Call' (xref.type 17)\nand not\nan xref of type \"Code_Near_Jump\" or \"Code_Far_Jump\"?\n </p>\n <p>\n  In other words, can function call destination addresses always be identified by checking if the xref.type is of type 16 or 17 and then taking the value in xref.to?\n </p>\n <p>\n  Of course in addition to the Call/Jump xref, the above statement always returns an xref of type 21 (the ordinary control flow).\n </p>\n <p>\n  A list of possible xref types can be found here:\n  <a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py\" rel=\"nofollow\">\n   https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py\n  </a>\n </p>\n <p>\n  What is the difference between a Code_Far_Call xref and a Code_Near_Call xref anyway?\n </p>\n <p>\n  Thanks for your help!\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "535",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "idapython",
        "python"
    ],
    "user": "langlauf.io",
    "time": "Mar 6, 2015 at 11:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This depends a bit on your compiler, Actually, as you seem to be using a 32 bit OS, i wouldn't expect any far calls.\n </p>\n <p>\n  Near calls and Far calls are relicts from 16-bit area, where a call within the same 64 kbyte segment, that only changes\n  <code>\n   IP\n  </code>\n  , but not\n  <code>\n   CS\n  </code>\n  , was named a\n  <code>\n   near call\n  </code>\n  , and a call to anywhere in the address space, that changes\n  <code>\n   CS\n  </code>\n  <em>\n   and\n  </em>\n  <code>\n   IP\n  </code>\n  , was named a\n  <code>\n   far call\n  </code>\n  . Correspondingly, there were two different instructions\n  <code>\n   ret\n  </code>\n  and\n  <code>\n   retf\n  </code>\n  to return from the subroutine, that would pop just\n  <code>\n   IP\n  </code>\n  , or\n  <code>\n   CS\n  </code>\n  and\n  <code>\n   IP\n  </code>\n  from the stack.\n </p>\n <p>\n  With the introduction of protected mode, and 32 bit segments, management of segment registers became the responsibility of the operating system, and user mode programs stopped fiddling with them. So you shouldn't see any far calls, or\n  <code>\n   retf\n  </code>\n  instructions, anymore - unless you're disassembling the parts of the operating system that handle task switching, possibly.\n </p>\n <p>\n  You might see the occasional jump to a function, however (ref type 19), depending on your compiler. If the compiler optimizes tail recursion, it will replace the last \"call self / ret\" instruction with a \"jmp self\" instruction, and if parameter types match, it might replace a \"call someotherfunction / ret\" with \"jmp someotherfunction\" as well. I've seen this a lot in ARM code, and 64 bit Intel code, but can't remember seeing it in 32 bit compiled Intel code at the moment. However, i haven't worked with 32 bit Intel assembly much, recently, so there might be some newer compilers that do this without me noticing.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Mar 6, 2015 at 12:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Ok, so there are (less common) call instructions whose xref.type is \"Code_Near_Jump\" or \"Code_Far_Jump\". Do you know if these cases are covered by the idaapi.is_call_insn(), that is, would is_call_insn() return True on a call instruction that has an associated xref of type \"Code_Near_Jump\" or \"Code_Far_Jump\"?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">You'd have to consult documentation to be sure, but no, i don't think the Code_*_Jump instructions would make is_call_insn return true. After all, they're exactly the same <code>jmp</code> instructions that implement control structures like loops and conditions, and the compiler uses them based on the observation that a <code>call</code> to something that ends in <code>ret</code>, which is itself followed by another <code>ret</code>, can be optimized to a <code>jmp</code>.</span>",
                    "time": null
                },
                {
                    "user": "user45891",
                    "text": "<span class=\"comment-copy\">Visual Studio 2008 is able to generate such tail recursion code (In my case it was an function without any explicit variables - that may be an edge case)</span>",
                    "time": null
                }
            ]
        }
    ]
}