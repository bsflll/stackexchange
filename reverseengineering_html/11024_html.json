{
    "title": "Getting user comments with IDAPython API (user_cmts_*)?",
    "link": "https://reverseengineering.stackexchange.com/questions/11024/getting-user-comments-with-idapython-api-user-cmts",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How do I call the\n  <code>\n   user_cmts_*\n  </code>\n  functions from the IDAPython API? I am quite new to the SDK and IDAPython, so I'm kind of lost as to what I'm supposed to pass to these functions, as it's not the user-friendliest docs imo. I tried passing a map as such for\n  <code>\n   user_cmts_begin\n  </code>\n  :\n </p>\n <pre><code>import idaapi\n\ndef print_cmt(cmt):\n   print cmt\n\ncumap = map(print_cmt, [some address here to test])\n\nidaapi.user_cmts_begin(cumap)\n</code></pre>\n <p>\n  But it throws a type error, so obviously I must be doing something wrong...\n </p>\n <p>\n  For now I've had to resort to doing this:\n </p>\n <pre><code>import idaapi\nimport re\n\naddr = 0x80000000\n\nwhile addr < 0x80200000:\n    cmt = idaapi.get_cmt(addr, 0) # get non-repeatable comment at current address/line\n\n    if cmt is not None: # skip if the line has no comment\n        if re.search(\"insert regex for non-auto-generated comments here\", cmt) is not None:\n            print \"%08X: %s\" % (addr, cmt)\n\n    addr = idaapi.next_not_tail(addr)\n</code></pre>\n <p>\n  The IDAPython docs can be found here:\n </p>\n <p>\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow\">\n   https://www.hex-rays.com/products/ida/support/idapython_docs/\n  </a>\n </p>\n <p>\n  Could someone show an example?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ida",
        "python"
    ],
    "user": "user966939",
    "time": "Oct 4, 2015 at 23:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You might want to use the IDAPython wrapper functions. As you mentioned, the IDA API is quite poorly documented. One of the best, but not easiest way to actually understand it is to check the IDAPython wrapper library in your\n  <em>\n   IDA/Python/idc.py\n  </em>\n  folder.\n </p>\n <p>\n  Based on what I've seen in the\n  <em>\n   idc.py\n  </em>\n  file, there's some functions you might want to check out to help you out.\n </p>\n <h3>\n  Creates a comment to the current line:\n </h3>\n <pre><code>MakeComm(ScreenEA(), \"Comment Test\")\n</code></pre>\n <h3>\n  Creates a repetable comment to the current line:\n </h3>\n <pre><code>MakeRptCmt(ScreenEA(), \"Repeatable Comment\")\n</code></pre>\n <h3>\n  Retrieves the comment from the current line:\n </h3>\n <p>\n  Specify 1 to get the repeatable comment or 0 to get the normal comment as the second argument. Note that the function\n  <code>\n   CommentEx\n  </code>\n  is a wrapper around\n  <code>\n   GetCommentEx\n  </code>\n  .\n </p>\n <pre><code>c = GetCommentEx(ScreenEA(), 1)\nprint(c)\n</code></pre>\n <p>\n  Or even easier is to use\n  <code>\n   Comment(ea)\n  </code>\n  or\n  <code>\n   RptCmt(ea)\n  </code>\n  , which are wrappers on\n  <code>\n   GetCommentEx()\n  </code>\n  :\n </p>\n <pre><code>def Comment(ea):                return GetCommentEx(ea, 0)\n\"\"\"Returns the regular comment or None\"\"\"\n\ndef RptCmt(ea):                 return GetCommentEx(ea, 1)\n\"\"\"Returns the repeatable comment or None\"\"\"\n</code></pre>\n <p>\n  And then you have all the special functions to retrieve comments from specific structures such as Enums, Functions, Constants...I don't believe I have seen a specific function to retrieve all comments, but it's fairly easy to build, as you did:\n </p>\n <h3>\n  Example:\n </h3>\n <p>\n  I've made this code that looks for lines containing a 'jump: 0x???' comment/repeatable comments. Not the best code (slow), but it illustrates the use of the IDA Python comments functions.\n </p>\n <pre><code>def get_comments(_startea, _endea, _filter):\n    matches = []\n    ea = _startea\n    for ea in range(_startea, _endea):\n        cmt1 = Comment(ea)\n        cmt2 = RptCmt(ea)\n        cmt = \"\"\n        if cmt1:\n            cmt += cmt1\n        if cmt2:\n            cmt += cmt2\n        if (cmt):\n            re_match = re.match(_filter, cmt, re.I)\n            if (re_match and len(re_match.groups()) > 0):\n                matches.append(re_match.group(3))\n    return matches\n\nMakeComm(ScreenEA(), 'jump: 0xBADC0DE')\nfilter = r'(.*)(jump: 0x)([0-9a-fA-F]+)(.*)'\naddrs = get_comments(MinEA(), MaxEA(), filter)\n</code></pre>\n</div>\n</body></html>",
            "votes": "6",
            "user": "InfectedPacket",
            "time": "Oct 6, 2015 at 19:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}