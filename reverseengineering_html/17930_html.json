{
    "title": "IDA Pro - how to export a listing file in batch mode",
    "link": "https://reverseengineering.stackexchange.com/questions/17930/ida-pro-how-to-export-a-listing-file-in-batch-mode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using IDA Pro 6 and I'm looking for a way to automatically export an analysed file into\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/441.shtml\" rel=\"nofollow noreferrer\">\n   a listing (.lst) file\n  </a>\n  .\n </p>\n <p>\n  The interface of IDA enables to do this action using the menu\n  <strong>\n   File > Produce File > Create LST file...\n  </strong>\n  , but I could not find a way to execute this action in batch mode (by running IDA in a terminal with the -B). The Hex-Rays's\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/417.shtml\" rel=\"nofollow noreferrer\">\n   help page\n  </a>\n  does not seem to help, as I'm unable to find a switch that matches my needs.\n </p>\n <p>\n  Is there any way I could get the listing out of IDA in an automated way ? Maybe with a IDC/Python script ?\n </p>\n <p>\n  A typical listing I would need is composed of the address location, bytes and assembly for each instruction, such as below (the lines with only comments or variables declaration can be omitted if there is no other possibility):\n </p>\n <pre><code>text:004016B0             ; =============== S U B R O U T I N E =======================================\n.text:004016B0\n.text:004016B0            ; Attributes: noreturn bp-based frame\n.text:004016B0\n.text:004016B0            ___report_gsfailure proc near       ; CODE XREF: __security_check_cookie(x):$failure$3j\n.text:004016B0\n.text:004016B0            var_324         = dword ptr -324h\n.text:004016B0            var_8       = dword ptr -8\n.text:004016B0            var_4       = dword ptr -4\n.text:004016B0\n.text:004016B0 8B FF                  mov     edi, edi\n.text:004016B2 55                 push    ebp\n.text:004016B3 8B EC                  mov     ebp, esp\n.text:004016B5 81 EC 24 03 00+            sub     esp, 324h\n.text:004016BB A3 40 21 40 00             mov     dword_402140, eax\n.text:004016C0 89 0D 3C 21 40+            mov     dword_40213C, ecx\n.text:004016C6 89 15 38 21 40+            mov     dword_402138, edx\n.text:004016CC 89 1D 34 21 40+            mov     dword_402134, ebx\n.text:004016D2 89 35 30 21 40+            mov     dword_402130, esi\n.text:004016D8 89 3D 2C 21 40+            mov     dword_40212C, edi\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly",
        "idapython"
    ],
    "user": "Jämes",
    "time": "Apr 8, 2018 at 20:07",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try -B option ? (-B     batch mode. IDA will generate .IDB and .ASM files automatically\")\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The IDAPython API you need is\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#gen_file\" rel=\"nofollow noreferrer\">\n   idc.gen_file\n  </a>\n  . The file type is\n  <code>\n   OFILE_LST\n  </code>\n  .\n </p>\n <p>\n  You should run ida as follows:\n </p>\n <pre><code>{your ida executable}  -A -S{full name of the file with script below} {your exe}\n</code></pre>\n <p>\n  The script is\n </p>\n <pre><code>import idc\nidc.gen_file(idc.OFILE_LST , your_listing_file_name, 0, idc.BADADDR, 0)\nimport ida_pro \nida_pro.qexit()\n</code></pre>\n <p>\n  This script works with IDA 7.1, and you'll probably need to find replacement for\n  <code>\n   ida_pro.qexit\n  </code>\n  which should cause IDA to quit after finishing the script (in IDA 6.95 and probably earlier versions you can use\n  <code>\n   sys.exit\n  </code>\n  instead).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Apr 10, 2018 at 6:21",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  contents of directory prior to test\n </p>\n <pre><code>:\\>ls -l | awk \"{print $5 , $8}\"\n\n190 bldwmsgbox.bat\n175 dumplst.idc\n108 wmsgbox.cpp\n</code></pre>\n <p>\n  compiling and linking src\n </p>\n <pre><code>:\\>bldwmsgbox.bat\n**********************************************************************\n** Visual Studio 2017 Developer Command Prompt v15.6.4\n** Copyright (c) 2017 Microsoft Corporation\n**********************************************************************\nwmsgbox.cpp\n</code></pre>\n <p>\n  contents of idc file\n </p>\n <pre><code>:\\>cat dumplst.idc\n#include <idc.idc>\nstatic main(void) {\nauto fp;\nBatch(1);\nWait();\nfp = fopen(\"idclst.lst\",\"w\");\nGenerateFile(OFILE_LST,fp,MinEA(),MaxEA(),0x0);\nfclose(fp);\nExit(0);\n}\n</code></pre>\n <p>\n  automatic analysis and creation of lst file\n </p>\n <pre><code>:\\>e:\\IDA_FREE_5\\idag.exe -B -Sdumplst.idc wmsgbox.exe\n</code></pre>\n <p>\n  deleting the idb and reopening the binary in gui to produce a lst file \nfrom file->produce file->create lst file\n </p>\n <pre><code>:\\>del *.idb\n\n:\\>echo \"using gui file->producefile to make another lst for comparison\"\n\"using gui file->producefile to make another lst for comparison\"\n\n:\\>e:\\IDA_FREE_5\\idag.exe wmsgbox.exe\n\n:\\>ls -l *.lst | awk \"{print $5 , $8}\"\n16877 guiidclst.lst\n18617 idclst.lst\n\n:\\>wc -l *.lst\n  574 guiidclst.lst\n  580 idclst.lst\n 1154 total\n\n:\\>echo \"appears to be whitespace diff \njust 6 ines bigger but too much byte variation \nappears to be whitespace difference \"\n</code></pre>\n <p>\n  diff output ignoring whitespace and case\n </p>\n <pre><code>:\\>diff -iw idclst.lst guiidclst.lst\n24d23\n< .text:00401000 ; IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\n33d31\n< .text:00401000 ; UUUUUUUUUUUUUUU S U B R O U T I N E UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\n66d63\n< .idata:00402000       ; IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\n71,72c68\n< .idata:00402000                       extrn __imp__ExitProcess@4:dword ; DATA XREF: main+19↑r\n< .idata:00402000                                               ; ExitProcess(x)↑r\n---\n> .idata:00402000       extrn __imp__ExitProcess@4:dword\n78,79c74\n< .idata:00402008                       extrn __imp__MessageBoxA@16:dword ; DATA XREF: main+11↑r\n< .idata:00402008                                               ; MessageBoxA(x,x,x,x)↑r\n---\n> .idata:00402008       extrn __imp__MessageBoxA@16:dword\n82d76\n< .rdata:00402010       ; IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\n90c84\n< .rdata:00402010       Caption         db 'test',0             ; DATA XREF: main+5↑o\n---\n> .rdata:00402010       Caption db 'test',0\n93c87\n< .rdata:00402018       Text            db 'test',0             ; DATA XREF: main+A↑o\n---\n> .rdata:00402018       Text db 'test',0\n\n:\\>\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 9, 2018 at 13:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jämes",
                    "text": "<span class=\"comment-copy\">Many thanks @blabb for your very complete and detailed answer! While  this answers my question, I subjectively preferred the python approach. If I was able to mark multiple answers as valid, yours would be definitely one!</span>",
                    "time": null
                }
            ]
        }
    ]
}