{
    "title": "Is there a way to find all constant pointers in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/31895/is-there-a-way-to-find-all-constant-pointers-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to know all the constants used for memory access except for non-pointer constants (e.g. argument) in IDA Pro.\n </p>\n <p>\n  Is there such a way?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "212",
    "tags": [
        "ida",
        "pointer"
    ],
    "user": "user212942",
    "time": "May 23, 2023 at 14:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using\n  <a href=\"https://sark.readthedocs.io/en/latest/api/Lines.html\" rel=\"nofollow noreferrer\">\n   Sark's lines\n  </a>\n  for brevity, this should return all the\n  <strong>\n   cross-referenced\n  </strong>\n  data addresses (with duplicates):\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>import idautils, sark\n\nfor line in sark.lines():\n    for ref in idautils.DataRefsFrom(line.ea):\n        print(hex(ref))\n</code></pre>\n <p>\n  This includes imports and their jump functions from\n  <code>\n   .text\n  </code>\n  section as those apparently are marked as data too.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mimak",
            "time": "May 23, 2023 at 17:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user212942",
                    "text": "<span class=\"comment-copy\">In my case, I need to find access to physical memory address. In this case, isn't it possible to find all of them with just Xref?</span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">You cannot get a physical address with static analysis, you need to debug it. Physical addresses depend on the process, they are not static values</span>",
                    "time": null
                },
                {
                    "user": "user212942",
                    "text": "<span class=\"comment-copy\">I'm analyzing the firmware. This includes <i>(int</i>)0x32000000 = 0x12345678; It contains code like this. I want to get a constant like this.</span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">If your firmware uses static address translation, all you need to find is the base physical offset, you can calculate everything else</span>",
                    "time": null
                }
            ]
        }
    ]
}