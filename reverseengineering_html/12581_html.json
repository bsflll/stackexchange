{
    "title": "Random Key Function",
    "link": "https://reverseengineering.stackexchange.com/questions/12581/random-key-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently analyzing a disassembled library file(.so) for in x86. There is a function called\n  <code>\n   get_random_key\n  </code>\n  and I can't make any sense out of it. It's more than weird and I personally think this is not even allowed due to memory restrictions. Here's the code for it(disassembled with IDA):\n </p>\n <pre><code>sub_685     proc near       ; CODE XREF: get_random_keyp\n    mov ecx, [esp+0]\n    retn\nsub_685     endp\n\npublic get_random_key\nget_random_key  proc near       ; CODE XREF: get_generated_key+15p\n    call    sub_685\n    add ecx, 1AFFh\n    lea eax, [ecx+3Ch]\n    retn\nget_random_key  endp\n</code></pre>\n <p>\n  From what I see here it loads the content on top of the stack, adds 0x1AFF(6911!!) to it and then interprets this as pointer and adds 0x3C to it and returns. It's a fairly small library and it's likely that it's originally written in C. I can't think of ANY code that would produce something like this. In my eyes this results 9/10 times in a segmentation fault. It's a library that gets loaded into an android app via Java and is around 6kb big.\n </p>\n <p>\n  I'm glad for every hint on this function :)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "176",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "SkryptX",
    "time": "May 2, 2016 at 9:12",
    "comments": [
        {
            "user": "Nils Borrmann",
            "text": "<html><body><span class=\"comment-copy\">\n This isn't really on point, but since I can't comment or send a private message this will have to do. If it's about deciphering this library just for the sake of it, this comment won't be helpful. If you just want to gain access to that App-API attach a debugger to the Android App, call the native function and catch the response (use IntelliJ's \"Evaluate Expression\" window while in debug mode). Happy Jodeling ;)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SkryptX",
            "text": "<html><body><span class=\"comment-copy\">\n Then I'm obviously not the first one trying this :P... would love to hear what you found out. And I know there are kinda easier ways. Even recompiling the library, integrate it into another program and just taking what it does but I always wanted to dig a bit into assembly so I'll keep finding the most elegant way even if its not the fastest :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nils Borrmann",
            "text": "<html><body><span class=\"comment-copy\">\n I didn't really try to decompile the file and only had a brief look at the disassembly, as I don't have any experience with that. It's probably mostly XOR'ing stuff with other stuff. Maybe try attaching a debugger? I might play a bit with it in the future, hit me up if you find out anything.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SkryptX",
            "text": "<html><body><span class=\"comment-copy\">\n It's actually pretty hard to use a debugger on a Android App that isn't compiled with Debug and uses native code... I will look if I can get the library to work as a seperate piece of code. Currently the ELF Headers don't match for x86/x64 execution so I try to circumvent that :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nils Borrmann",
            "text": "<html><body><span class=\"comment-copy\">\n I used apktool with the -d option to get a debuggable apk (that will change the app signature though\n <i>\n  hint\n </i>\n <i>\n  hint\n </i>\n ), native code wasn't an issue. I could just call that generate function with any string and get the output. Just calling into the library should be possible too.  Maybe we should move this discussion to IRC or something?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This looks like an attempt by the compiler to generate position independent code (PIC). The call to\n  <code>\n   sub_685\n  </code>\n  gets the address of the instruction after the call into\n  <code>\n   ecx\n  </code>\n  . The\n  <code>\n   1AFF\n  </code>\n  is probably the offset from that instruction to the data segment, and\n  <code>\n   3C\n  </code>\n  is the address of the variable in the data segment. Or,\n  <code>\n   1AFF\n  </code>\n  is the offset to a structure, and\n  <code>\n   3C\n  </code>\n  the offset to a member of that structure.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "May 2, 2016 at 13:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "SkryptX",
                    "text": "<span class=\"comment-copy\">It was actually the case. I made quite a bit of progress on my disassembly and almost fully understand it now :) What was probably the most confusing in the first place was the \"random\" as name since it just loads a static array of 40 bytes...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>0x401000    call    sub_685      call will return 0x401005 the return address \n0x401005    add ecx, 1AFFh       ecx will be  0x401005+0x1aff = 0x402b04\n0x401xxx    lea eax, [ecx+3Ch]   lea doesnt deref it will just add 3c \n                                 to ecx so eax will be 402B04 assuming the\n                                 call sub_685 was at address 0x401000** \n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "May 2, 2016 at 19:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}