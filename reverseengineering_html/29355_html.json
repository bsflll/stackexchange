{
    "title": "What is data only exploitation?",
    "link": "https://reverseengineering.stackexchange.com/questions/29355/what-is-data-only-exploitation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was wondering, and after trying to read for the past several months I got totally lost and don't understand this concept. Could someone please explain in simple words the concept of data only attacks, what's their purpose and why choose this method over others?\n </p>\n <p>\n  Note: I am familiar with other techniques such as the various ret2, jop/rop,...\n </p>\n <p>\n  Additionally, I would appreciate it if someone who knew a \"cheat sheet\"/wiki-like site/GitHub that shows modern concepts regarding exploitation(not old stuff that the internet is full with). I am pretty sure it could help a lot of people here as well.\n </p>\n <p>\n  My goal is to help make things more secure and I really want to contribute my part to aid.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "700",
    "tags": [
        "binary-analysis",
        "binary",
        "exploit",
        "kernel",
        "unknown-data"
    ],
    "user": "one1one",
    "time": "Nov 7, 2021 at 10:01",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n where did you see this term? Was there no explanation or examples?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<html><body><span class=\"comment-copy\">\n Perhaps you might find\n <a href=\"https://sites.google.com/site/bingsunsec/dataonlyattack\" rel=\"nofollow noreferrer\">\n  this short overview useful\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Data only exploitation is the mind-set / understanding that:\n </p>\n <ol>\n  <li>\n   A lot of effort has been put into anti-exploitation techniques in recent years, making existing exploitation strategies more difficult.\n  </li>\n  <li>\n   Most of that effort revolves around prevention of\n   <em>\n    code subversion\n   </em>\n   . i.e, where the end goal of the attacker is to control\n   <em>\n    code execution\n   </em>\n   .\n  </li>\n </ol>\n <p>\n  Contrary to that, in certain cases, code execution may be merely a\n  <em>\n   means to an end\n  </em>\n  such as extracting personal information from a mobile device, gaining access to a remote server, deleting valued data, or shutting down major infrastructure at just the right moment.\n </p>\n <p>\n  A data only exploitation approach suggests that instead of manipulating the code execution flow directly (by overwriting code with a shellcode, writing code on the stack and overwriting the stack address) or indirectly (creating a ROP chain, bypassing CFI) an attacker may also modify\n  <em>\n   data\n  </em>\n  in order to achieve a desired outcome.\n </p>\n <p>\n  Examples may make this easier to understand:\n </p>\n <ol>\n  <li>\n   <p>\n    In the most basic sense, this means that instead of executing a shellcode and spawning a shell an attacker may use a relative-dword-write primitive to add a new user to the linked-list of admin users and then use it to login into the system.\n   </p>\n  </li>\n  <li>\n   <p>\n    Similarly, a buffer overflow of some sorts may be used to overwrite an SQL query to turn a memory corruption to an SQL injection. Either, again, inserting some sort of desired entry or extracting information from an internal database.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Nov 11, 2021 at 13:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hmm, I had a recent case where I found an mscoree.dll inside of which no code had been manipulated. Instead only the import directory had been manipulated to include another DLL. The effect was that the now statically imported DLL got to subvert the (CLR) process very early on. Would this count as data-only exploitation as well?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@0xC0000022L I'd count the entire DLL as \"changing code\" (regardless of whether actual assembly instructions are modified) but it really a semantics question I think. An interesting one, though, but I don't think one that has a definitive answer.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@0xC0000022L If I may add to your question, JIT makes this even more difficult to define well. Should exploitation that gains code execution by modifying / manipulating JIT compilation code be considered \"Data only exploitation\"? :D</span>",
                    "time": null
                }
            ]
        }
    ]
}