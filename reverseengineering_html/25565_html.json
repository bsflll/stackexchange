{
    "title": "How to dump firmware from ATWINC1510",
    "link": "https://reverseengineering.stackexchange.com/questions/25565/how-to-dump-firmware-from-atwinc1510",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I got a\n  <a href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/ATWINC15x0-MR210xB-IEEE-802.11-b-g-n-SmartConnect-IoT-Module-Data-Sheet-DS70005304C.pdf\" rel=\"nofollow noreferrer\">\n   ATWINC-1510\n  </a>\n  based device in front of me where I want to dump the firmware / flash contents from into a bin file.\n </p>\n <p>\n  I know that the IC offers an SPI interface through the pins described in the datasheet. On the site of flash ROM I did not find any information whether flash ROM is capable of downloading the binary contents of the flash memory. Basically I was unsure as it is not a pure flash chip but like a microcontroller.\n </p>\n <p>\n  Would appreciate any help on this.\n </p>\n <p>\n  cobz\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "399",
    "tags": [
        "firmware",
        "firmware-analysis",
        "flash",
        "spi",
        "atmel"
    ],
    "user": "cobz",
    "time": "Dec 30, 2021 at 9:08",
    "comments": [
        {
            "user": "Rok Tavčar",
            "text": "<html><body><span class=\"comment-copy\">\n From where do you want to read the data as your datasheet mentions that there is a flash memory on that module.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "cobz",
            "text": "<html><body><span class=\"comment-copy\">\n So the IC is contained on an IoT device with mostly not interesting parts. I am purely interested in the firmware on the ATWINC.   I would like to do the read somehow to my computer. My initial idea would be to use UART or SPI (for example by wiring up to a pi or another device I can use as a serial bridge).   As the support for the ATWINC is not mentioned in flashrom I was wondering about how I can do the firmware download.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Peter Teoh",
            "text": "<html><body><span class=\"comment-copy\">\n this is for updating:\n <a href=\"https://microchipsupport.force.com/s/article/How-to-update-ATWINC1500-firmware-via-debug-UART\" rel=\"nofollow noreferrer\">\n  microchipsupport.force.com/s/article/…\n </a>\n (not sure how you can read from here).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the datasheet that you provided are links to more reference documents. One of them is\n  <a href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/00002389A.pdf\" rel=\"nofollow noreferrer\">\n   ATWINC1500 Wi-Fi Network Controller Software Design Guide\n  </a>\n  . In chapter 13 is described the WINC Serial Flash Memory, including how to access it.\n </p>\n <p>\n  In case that this doesnt work you can also disassemble ATWINC-1510 module and find direct access to the flash IC and read content from there.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rok Tavčar",
            "time": "Jul 30, 2020 at 6:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cobz",
                    "text": "<span class=\"comment-copy\">Thanks for your answer this helps already approaching the goal. The guide shows some example code with commands being called in C like <code>m2m_wifi_download_mode();</code> to set the chip to download mode. I suppose it is mostly referring wiring up a certain debug type of the WINC to this Xplainer debug board by Atmel and interacting over the Atmel studio then right?  I am wondering now, how can I send these commands to the bare metal chip without the debug hardware? For example with an ESP or Arduino as a SPI bridge, or the SPI hooked to a pi which I would normally use with the flashrom util.</span>",
                    "time": null
                },
                {
                    "user": "Rok Tavčar",
                    "text": "<span class=\"comment-copy\">@cobz You need to get the library from microchip webpage. You can search for example projects if you already use any of their libraries or IDEs or you can install them. I think you can find libraries which include WINC-1510 support here: <a href=\"https://www.microchip.com/mplab/microchip-libraries-for-applications/mla-legacy\" rel=\"nofollow noreferrer\">microchip.com/mplab/microchip-libraries-for-applications/…</a> but I am not sure as I didnt test it. If it isnt here you will have to search their webpage for other libraries.</span>",
                    "time": null
                },
                {
                    "user": "Rok Tavčar",
                    "text": "<span class=\"comment-copy\">@cobz Another option is here: <a href=\"https://github.com/Microchip-MPLAB-Harmony/wireless/tree/master/driver/winc\" rel=\"nofollow noreferrer\">github.com/Microchip-MPLAB-Harmony/wireless/tree/master/driver/…</a></span>",
                    "time": null
                },
                {
                    "user": "cobz",
                    "text": "<span class=\"comment-copy\">Thanks for the links. The second one looks promising but for me it is still not clear how to use these driver files. For example again the <code>m2m_wifi_download_mode</code> function, which is now included in the driver C files.  When I for example wire up SPI between an ESP8266 and the WINC1510, will calling the functions on the ESP8266 directly interact over SPI? Probably not right? So how does these driver files know how to reach the chip. I am also a little bit confused as this MPLAB Harmony is again a referencing to these debug boards. I cannot find an example to interact directly with it.</span>",
                    "time": null
                },
                {
                    "user": "Rok Tavčar",
                    "text": "<span class=\"comment-copy\">You should read documents more carefully. To read flash memory on this module you need to communicate with the asic chip on module (via SPI) to fetch flash content for you. I dont know if there is any documentation for this communication, but you can see implementation in <a href=\"https://github.com/Microchip-MPLAB-Harmony/wireless/tree/master/driver/winc/winc1500_19.5.4/driver/source\" rel=\"nofollow noreferrer\">github.com/Microchip-MPLAB-Harmony/wireless/tree/master/driver/…</a> (depending on your version of module).</span>",
                    "time": null
                }
            ]
        }
    ]
}