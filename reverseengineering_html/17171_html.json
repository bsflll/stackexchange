{
    "title": "Is it possible to correctly disassemble STL inlines?",
    "link": "https://reverseengineering.stackexchange.com/questions/17171/is-it-possible-to-correctly-disassemble-stl-inlines",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is it possible to correctly disassemble STL inlines with IDA? STL inlines are not detected by\n  <em>\n   FLAIR\n  </em>\n  just because they are inline not functions. For example how can I know that the code I see disassembled was in the original source\n </p>\n <pre><code>  std::set<int> myset;\n  myset.insert(10);\n</code></pre>\n <p>\n  but not\n </p>\n <pre><code>  std::vector<short> myvector;\n  myvector.push_back(10);\n</code></pre>\n <p>\n  Is it possible somehow to know what the code exactly means when it was originally born?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "255",
    "tags": [
        "ida",
        "decompilation",
        "c++"
    ],
    "user": "amahalaj",
    "time": "Jan 11, 2018 at 7:53",
    "comments": [],
    "answers_data": []
}