{
    "title": "When can trapping be used?",
    "link": "https://reverseengineering.stackexchange.com/questions/20633/when-can-trapping-be-used",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is the beginning of one of the functions inside NTDLL of Windows XP:\n </p>\n <pre><code>MOV EDI,EDI\nPUSH EBP\nMOV EBP,ESP\n...\n</code></pre>\n <p>\n  The book on reverse engineering I am reading(Eldad Eilam - Reversing: Secrets of Reverse Engineering) says this about the first line:\n </p>\n <blockquote>\n  <p>\n   It is essentially dead code that was put in place by the compiler as a\n  placeholder, in case someone wanted to trap this function. Trapping\n  means that some external component adds a JMP instruction that is used\n  as a notification whenever the trapped function is called.\n  </p>\n </blockquote>\n <p>\n  Can you show me how exactly can trapping be used in practice? I assume that trapping is just calling a function with trapping instruction inside the other function, but I don't realize how the outside function can get \"notified\" about the call... Is it possible the author meant by \"some external component\" the debugger? It can make sense because if I set a breakpoint for some strange assembly insruction like\n  <code>\n   MOV EDI, EDI\n  </code>\n  , I'll get to where trapped function is...\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "112",
    "tags": [
        "disassembly",
        "windows",
        "binary-analysis",
        "dll"
    ],
    "user": "M. Kalter",
    "time": "Feb 19, 2019 at 19:50",
    "comments": [
        {
            "user": "M. Kalter",
            "text": "<html><body><span class=\"comment-copy\">\n Eldad Eilam - Reversing: Secrets of Reverse Engineering\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @CuriousOne please edit the question with this info.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   mov edi, edi\n  </code>\n  is an instruction that is called hotpatch point\n </p>\n <p>\n  there are several articles about it on the internet, notable among them are:\n </p>\n <ol>\n  <li>\n   <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20110921-00/?p=9583\" rel=\"nofollow noreferrer\">\n    Raymond Chens old new thing 1\n   </a>\n  </li>\n  <li>\n   <a href=\"http://Raymond%20Chens%20old%20new%20thing]%20link%201\" rel=\"nofollow noreferrer\">\n    Raymond Chens old new thing 2\n   </a>\n  </li>\n  <li>\n   <a href=\"https://jpassing.com/2011/05/03/windows-hotpatching-a-walkthrough/\" rel=\"nofollow noreferrer\">\n    Johannas passing's Hot patch walkthrough\n   </a>\n  </li>\n </ol>\n <p>\n  The main utility for this instruction is to enable a third party app or Windows update to patch an existing function to a newer function  with minimal side effects when obscure race conditions become a reality  (hard patching any function with a detour will work most of the time or as raymond puts will work 99% of the time\n </p>\n <p>\n  quoting from the article linked\n </p>\n <blockquote>\n  <p>\n   The MOV EDI, EDI instruction is a two-byte NOP, which is just enough\n  space to patch in a jump instruction so that the function can be\n  updated on the fly. The intention is that the MOV EDI, EDI instruction\n  will be replaced with a two-byte JMP $-5 instruction to redirect\n  control to five bytes of patch space that comes immediately before the\n  start of the function. Five bytes is enough for a full jump\n  instruction, which can send control to the replacement function\n  installed somewhere else in the address space.\n  </p>\n </blockquote>\n <p>\n  the\n  <code>\n   mov edi, edi\n  </code>\n  is used in conjunction with five space holders emitted by the compiler before the\n  <code>\n   mov edi, edi\n  </code>\n  like\n  <code>\n   0xcc\n  </code>\n  or\n  <code>\n   0x90\n  </code>\n </p>\n <p>\n  so the patching software can patch in an atomically replaceable short jump and a long jump to a control area\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Feb 19, 2019 at 20:16",
            "is_accepted": true,
            "comments": []
        }
    ]
}