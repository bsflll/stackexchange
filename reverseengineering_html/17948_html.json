{
    "title": "How can I deal with exception handler in Visual C/C++ inline assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/17948/how-can-i-deal-with-exception-handler-in-visual-c-c-inline-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have disassembled a function in IDA Pro and I want to compile it into my project in visual c inline assembly... I'm still a newbie, so let me apologize if I don't use the right terminology...(I'm not an English native speaker) I have come up with this disassembly with IDA Pro:\n </p>\n <pre><code>push    ebp\nmov     ebp, esp\npush    0FFFFFFFFh\npush    offset stru_xxxxx\n</code></pre>\n <p>\n  and if I follow\n  <code>\n   offset stru_xxxxx\n  </code>\n  , I see this\n </p>\n <pre><code>stru_xxxxx   _SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset locxxxxx> \n</code></pre>\n <p>\n  <code>\n   offset locxxxxx\n  </code>\n  is the location of the function (\n  <code>\n   xor ebx, ebx\n  </code>\n  Finally handler 0 for function XXXXXX)\n </p>\n <p>\n  Now, I'm aware it is a\n  <strong>\n   seh exception\n  </strong>\n  in C, but how can I reproduce it in inline assembly?  How can I declare\n  <code>\n   stru_xxxxx\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "218",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "dark94",
    "time": "Jul 10, 2018 at 8:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you can declare struct in c and access them in assembly\n </p>\n <pre><code>typedef struct _SCOPETABLE_ENTRY {\n    DWORD EnclosingLevel;\n    void* FilterFunc;\n    void* HandlerFunc;\n}ScopeTable, *PscpopeTable;\nvoid * SomeFilt() {\n    return &SomeFilt;\n}\nvoid * SomeHandler() {\n    return &SomeHandler;\n}\nint main() {\n    printf(\"%20s%p\n%20s%p\n\",\n        \"Somefilt Addr = \", SomeFilt(), \"SomeHandler Addr = \", SomeHandler());\n    ScopeTable foo = { 0 };\n    printf(\"Enclosing Level %x FilterFunc = %p HandlerFunc = %p\n\",\n        foo.EnclosingLevel, foo.FilterFunc, foo.HandlerFunc);\n    __asm {\n        lea ebx, foo\n        mov[ebx]foo.EnclosingLevel, 1\n        mov[ebx]foo.FilterFunc, offset SomeFilt\n        mov[ebx]foo.HandlerFunc, offset SomeHandler\n    }\n    printf(\"Enclosing Level %x FilterFunc = %p HandlerFunc = %p\n\",\n        foo.EnclosingLevel, foo.FilterFunc, foo.HandlerFunc);\n    return 0;\n}\n</code></pre>\n <p>\n  and executing this\n </p>\n <pre><code>    Somefilt Addr = 0006137F\n SomeHandler Addr = 00061384\nEnclosing Level 0 FilterFunc = 00000000 HandlerFunc = 00000000\nEnclosing Level 1 FilterFunc = 0006137F HandlerFunc = 00061384\nPress any key to continue . . .\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 10, 2018 at 15:21",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  SEH is not supported in inline assembly, you should use C syntax for it.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Apr 10, 2018 at 11:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}