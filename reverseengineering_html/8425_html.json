{
    "title": "Longest x86 Instruction [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8425/longest-x86-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs\n        <a href=\"/help/closed-questions\">\n         details or clarity\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Add details and clarify the problem by\n       <a href=\"/posts/8425/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2015-03-11 20:21:31Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8425/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I read the recent article \"Longest x86 Instruction\"\n </p>\n <p>\n  <a href=\"http://blog.onlinedisassembler.com/blog/?p=23\" rel=\"nofollow\">\n   http://blog.onlinedisassembler.com/blog/?p=23\n  </a>\n </p>\n <p>\n  I attempted to reproduce the curious disassembly issue on a Win7x86 development platform using masm and as the article suggested, redunant prefixes.\n </p>\n <p>\n  Talk is cheap, so here's a toy program (masm32):\n </p>\n <pre><code>.386 .model flat, stdcall\n\noption casemap:none\n\nincludelib \\x\\x\\kernel32.lib\nincludelib \\x\\x\\user32.lib\n\ninclude \\x\\x\\kernel32.inc\ninclude \\x\\x\\user32.inc\ninclude \\x\\x\\windows.inc\n\n.code\n\nstart:\n\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\n;...6 more bytes later\ndb 089h\ndb 0E5h\n\nend start\n\ninvoke ExitProcess, NULL\n</code></pre>\n <p>\n  After linking and assembling, I opened the resulting executable in windbg.\n </p>\n <p>\n  To my disappointment, when I single step, unassemble the $exentry, etc. windbg simply sees the prefixes/bytes as individual instructions, says 'to hell with it' and executes only the valid instructions.\n </p>\n <p>\n  Is there something I'm missing?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "windbg"
    ],
    "user": "grepNstepN",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Saying 'to hell with it' seems to be the best thing a debugger can do when it sees unneccesary redundant prefixes.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n I'm voting to close this question as off-topic because it is about processor features, not reverse engineering.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1354557",
            "text": "<html><body><span class=\"comment-copy\">\n On the contrary, attempting to discern the processor's behavior is a form of reverse engineering.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n So what is the actual question?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n \"windbg .. executes only the valid instructions\" -- it cannot\n <i>\n  but\n </i>\n execute the REPEs, but it only\n <i>\n  halts\n </i>\n on certain positions. Similarly, it cannot stop \"in the middle of\", for example,\n <code>\n  mov al, fs:[ebx+4*edx]\n </code>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Is there something I'm missing?\n  </p>\n </blockquote>\n <p>\n  The disconnect is that the\n  <a href=\"http://www2.onlinedisassembler.com/odaweb/\" rel=\"nofollow\">\n   ODA\n  </a>\n  disassembler referenced in\n  <a href=\"http://blog.onlinedisassembler.com/blog/?p=23\" rel=\"nofollow\">\n   http://blog.onlinedisassembler.com/blog/?p=23\n  </a>\n  produces different output than WinDbg's disassembler given the same input.\n </p>\n <p>\n  Perhaps what you're \"missing\" is based on the assumption that all disassemblers produce the same output given the same input, which is not a correct assumption to make.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 9, 2015 at 17:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">you're right, I just realized the OS's/software's disassembler isn't 1:1 with processor behavior, e.g. like Windows not implementing Ring2 although 80386+ gives you that CPL. Updated my question on another stackExhange [link] (<a href=\"http://programmers.stackexchange.com/questions/275719/longest-x86-instruction/275750#275750\" title=\"longest x86 instruction\">programmers.stackexchange.com/questions/275719/â€¦</a>)</span>",
                    "time": null
                }
            ]
        }
    ]
}