{
    "title": "x86 When we use fastcall, why does caller clean stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/33064/x86-when-we-use-fastcall-why-does-caller-clean-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In fastcall functions, the callee cleans the stack and returns the value in eax. This completes the function call.And actually we put first two arguments in ecx and edx, still caller cleans stack 8 bytes.\n </p>\n <p>\n  I wonder why happens that way. We put the datas into registers not stack? Am i right?\n </p>\n <p>\n  How is it possible cleaning registers that way?\n </p>\n <p>\n  Example Code:\n </p>\n <pre><code>#include <iostream>\n\nint __fastcall TestFunction(int num1, int num2, int num3, int num4, int num5)\n{\n    int nSum = 0;\n    nSum = num1 + num2 + num3 + num4 + num5;\n    return nSum;\n}\n\nint main()\n{\n    int nSum = 0;\n    nSum = TestFunction(10, 20, 30, 40, 50);\n    printf(\"Result: %d\", nSum);\n    return 0;\n}\n</code></pre>\n <p>\n  <img alt=\"Assembly version of example code\" src=\"https://tufan-gungor.github.io/assets/img/calling_conventions/Untitled%203.png\"/>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "69",
    "tags": [
        "x86",
        "c++",
        "calling-conventions"
    ],
    "user": "benoyum",
    "time": "Jul 4, 2024 at 12:15",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Are you asking about the add esp,8 after printf ? printf is vararg function so stack is cleaned up after printf\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "benoyum",
            "text": "<html><body><span class=\"comment-copy\">\n I got the picture from this content\n <a href=\"https://tufan-gungor.github.io/posts/x86-calling-conventions/#:~:text=We%20told%20that%20the%20callee%20is%20responsible%20for%20stack%20cleaning%20(not%20registers)%2C%20so%20in%20the%20last%20box%20you%20can%20see%20caller%20cleaning%208%20bytes\" rel=\"nofollow noreferrer\">\n  tufan-gungor.github.io/posts/x86-calling-conventions/â€¦\n </a>\n It says \"We told that the callee is responsible for stack cleaning (not registers), so in the last box you can see caller cleaning 8 bytes.\"  I thought it was belong to fastcall cause it says so\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n I just glanced and from the wordings it appears that the registers are being cleaned up in stack  which is contradictory. The add esp 8 belongs to printf argument 1 format string , 2 value passed to format  the tegisters ecx and edx are not cleared by that instruction.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "benoyum",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you for your answers :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}