{
    "title": "Extract files from a bin firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/8063/extract-files-from-a-bin-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a firmware image that is used for flashing a BMW NBT navigation system that I want to research. I did a binwalk on the file (dump below).\n </p>\n <p>\n  I want to extract the individual files, especially the ELF files and the LZMA compressed files. Can this be done with objcopy and dd ?\n </p>\n <p>\n  A small example would be great.\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n114           0x72            XML document, version: \"1.0\"\n8840          0x2288          ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n52909         0xCEAD          eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n53692         0xD1BC          eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n58157         0xE32D          ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n64383         0xFB7F          eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n65035         0xFE0B          eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n65611         0x1004B         eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n66263         0x102D7         eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n68264         0x10AA8         ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)\n105904        0x19DB0         LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n254206        0x3E0FE         ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)\n1672272       0x198450        eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n1865538       0x1C7742        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n1873098       0x1C94CA        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n1884709       0x1CC225        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n1884817       0x1CC291        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n1895380       0x1CEBD4        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n1976563       0x1E28F3        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n1994774       0x1E7016        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2067424       0x1F8BE0        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2109540       0x203064        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2190676       0x216D54        LZMA compressed data, properties: 0x5E, dictionary size: 16777216 bytes, uncompressed size: 100663296 bytes\n2191505       0x217091        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2322380       0x236FCC        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n2322488       0x237038        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2325714       0x237CD2        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2341002       0x23B88A        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 100663296 bytes\n2341757       0x23BB7D        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2416921       0x24E119        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2420792       0x24F038        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2497195       0x261AAB        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2668975       0x28B9AF        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2769589       0x2A42B5        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n2848565       0x2B7735        LZMA compressed data, properties: 0x5E, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes\n2849037       0x2B790D        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3035059       0x2E4FB3        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3064068       0x2EC104        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3109994       0x2F746A        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3138482       0x2FE3B2        LZMA compressed data, properties: 0x5E, dictionary size: 16777216 bytes, uncompressed size: 100663296 bytes\n3139318       0x2FE6F6        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3351394       0x332362        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3383710       0x33A19E        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3388738       0x33B542        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3488674       0x353BA2        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3537093       0x35F8C5        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n3537201       0x35F931        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3551343       0x36306F        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n3557569       0x3648C1        eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n3558221       0x364B4D        eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n3558797       0x364D8D        eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n3559449       0x365019        eCos RTOS string reference: \"ECOScheme COP1 V1.6\"\n3561455       0x3657EF        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n4111948       0x3EBE4C        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n4313272       0x41D0B8        eCos RTOS string reference: \"ECOScheme\"\n4571691       0x45C22B        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n4571799       0x45C297        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n4574094       0x45CB8E        mcrypt 2.2 encrypted data, algorithm: blowfish-448, mode: CBC, keymode: 8bit\n4653693       0x47027D        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n4671701       0x4748D5        LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, missing uncompressed size\n6264853       0x5F9815        LZMA compressed data, properties: 0x90, dictionary size: 16777216 bytes, uncompressed size: 9995975 bytes\n6655733       0x658EF5        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n6656288       0x659120        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n6663431       0x65AD07        mcrypt 2.2 encrypted data, algorithm: blowfish-448, mode: CBC, keymode: 8bit\n6985016       0x6A9538        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes\n6985572       0x6A9764        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n7350538       0x70290A        LZMA compressed data, properties: 0xD8, dictionary size: 16777216 bytes, uncompressed size: 203703495 bytes\n7436659       0x717973        Copyright string: \" 1995-2005 Jean-loup Gailly valid block type\"\n7441843       0x718DB3        Copyright string: \" 1995-2005 Mark Adler \"\n7475248       0x721030        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes\n7475807       0x72125F        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n7489707       0x7248AB        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n7490222       0x724AAE        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n8328766       0x7F163E        LZMA compressed data, properties: 0xC7, dictionary size: 4194304 bytes, uncompressed size: 272680704 bytes\n9051574       0x8A1DB6        Ubiquiti partition header, header size: 56 bytes, name: \"ICLE\", base address: 0x00000000, data size: 0 bytes\n9298202       0x8DE11A        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n9298762       0x8DE34A        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n9307694       0x8E062E        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n9308222       0x8E083E        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n9335661       0x8E736D        Copyright string: \" 1995-2005 Mark Adler \"\n9338719       0x8E7F5F        LZMA compressed data, properties: 0x5D, dictionary size: 262144 bytes, missing uncompressed size\n9339847       0x8E83C7        LZMA compressed data, properties: 0x5D, dictionary size: 524288 bytes, missing uncompressed size\n9339990       0x8E8456        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n9340503       0x8E8657        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n9921653       0x976475        eCos RTOS string reference: \"ECOScheme Version. COP1 (Version 1.6 or greater) supported.\"\n9924189       0x976E5D        eCos RTOS string reference: \"ECOScheme Version. Version 1.6 or greater supported.\"\n9974124       0x98316C        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 10835 bytes\n10064980      0x999454        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)\n10079707      0x99CDDB        mcrypt 2.2 encrypted data, algorithm: blowfish-448, mode: CBC, keymode: 8bit\n10171624      0x9B34E8        eCos RTOS string reference: \"eCost\"\n11268739      0xABF283        LZMA compressed data, properties: 0xC7, dictionary size: 4194304 bytes, uncompressed size: 272680704 bytes\n11269511      0xABF587        LZMA compressed data, properties: 0xC7, dictionary size: 4194304 bytes, uncompressed size: 272680704 bytes\n12395860      0xBD2554        XML document, version: \"1.0\"\n12747285      0xC28215        Copyright string: \" (C) 2010. Hitachi ULSI Systems Co.,Ltd. Co.,Ltd.\"\n12747445      0xC282B5        Copyright string: \" (C) 2009. Hitachi ULSI Systems Co.,Ltd. Co.,Ltd.\"\n12758672      0xC2AE90        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size\n</code></pre>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "35k",
    "tags": [
        "binary-analysis",
        "embedded"
    ],
    "user": "Remko",
    "time": "Jan 20, 2015 at 15:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use the -D option to dd out sections based on signature.\n </p>\n <p>\n  For example, to extract out the ELF parts, do:\n </p>\n <pre><code>binwalk -D \"elf 32-bit lsb shared object\":.so image.bin\n</code></pre>\n <p>\n  Note the lowercase signature string.\n </p>\n <p>\n  You can specify more than one instance of -D.\n </p>\n <p>\n  See the binwalk wiki for more details:\n  <a href=\"https://github.com/devttys0/binwalk/wiki\">\n   https://github.com/devttys0/binwalk/wiki\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "zcutlip",
            "time": "Jan 22, 2015 at 18:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lekensteyn",
                    "text": "<span class=\"comment-copy\">More specifically, the <code>--dd</code> option is documented at <a href=\"https://github.com/devttys0/binwalk/wiki/Usage#-d---ddtypeextcmd\" rel=\"nofollow noreferrer\">github.com/devttys0/binwalk/wiki/Usage#-d---ddtypeextcmd</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since version 0.50,\n  <code>\n   binwalk\n  </code>\n  has a -e option to extract files. Unfortunately, the manual doesn't tell you this, but if you invoke\n  <code>\n   binwalk -version\n  </code>\n  , it tells you\n </p>\n <pre><code>-e, --extract=[file]          Automatically extract known file types. Load rules from file, if specified.\n</code></pre>\n <p>\n  Of course, you can use dd as well. For example, if you want the executable at 68264, calculate its size first (105904-68264=37640), then:\n </p>\n <pre><code>$ dd if=myfile.bin of=executable.so bs=1 skip=68264 count=37640\n</code></pre>\n <p>\n  Repeat with other contents as needed.\n </p>\n</div>\n</body></html>",
            "votes": "12",
            "user": "Guntram Blohm",
            "time": "Jan 20, 2015 at 16:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}