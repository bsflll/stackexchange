{
    "title": "IDA mov dword ptr with non-existent addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/31420/ida-mov-dword-ptr-with-non-existent-addresses",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This might be obvious, but I'm baffled.. I opened a random .so library to poke around and learn IDA a bit better, and I hit something I've never seen. IDA has these instructions:\n </p>\n <pre><code>mov     eax, [esp+4Ch+ptr]\nmov     dword ptr [eax], 665F6165h\nmov     dword ptr [eax+4], 6C615F66h\nmov     dword ptr [eax+8], 3A776F6Ch\nmov     dword ptr [eax+0Ch], 61736964h\nmov     dword ptr [eax+10h], 64656C62h\nmov     byte ptr [eax+14h], 0Ah\n</code></pre>\n <p>\n  My guess is it's building some sort of struct, but it's moving dwords from addresses that don't exist in the binary (I think). When I try to jump to address 0x665F6165 for example, JumpAsk fails, which makes sense, since the hex view ends at 009636A0.. What are these weird addresses? Where are they coming from?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "114",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "XeroxDucati",
    "time": "Jan 17, 2023 at 9:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have it displayed as characters by hitting\n  <kbd>\n   r\n  </kbd>\n  (R) on the keyboard \"over\" each of those 32-bit constants.\n </p>\n <p>\n  You should get four byte character literals for it, probably showing some ASCII values (and for Little Endian in apparent reverse order), similar to this:\n </p>\n <pre><code>mov     eax, [esp+4Ch+ptr]\nmov     dword ptr [eax], 'ea_f' ; 665F6165h\nmov     dword ptr [eax+4], 'f_al' ; 6C615F66h\nmov     dword ptr [eax+8], 'low:' ; 3A776F6Ch\nmov     dword ptr [eax+0Ch], 'disa' ; 61736964h\nmov     dword ptr [eax+10h], 'bled' ; 64656C62h\nmov     byte ptr [eax+14h], '\n' ; 0Ah\n</code></pre>\n <p>\n  Looks like an inlined\n  <code>\n   memcpy\n  </code>\n  (or\n  <code>\n   strcpy\n  </code>\n  ) or\n  <code>\n   memmove\n  </code>\n  as a compiler would produce it during optimizations for string literals.\n </p>\n <p>\n  Btw: this is called\n  <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-88-character-operand-type-and-stack-strings/\" rel=\"nofollow noreferrer\">\n   stack\n  </a>\n  <a href=\"https://reverseengineering.stackexchange.com/q/30463/245\">\n   strings\n  </a>\n  (there are further links from my Q&A). At some point you will develop a sixth sense for this sort of thing and will probably automatically\n  <em>\n   try\n  </em>\n  <kbd>\n   r\n  </kbd>\n  to see if it yields something if the values look like ASCII.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Jan 18, 2023 at 8:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "XeroxDucati",
                    "text": "<span class=\"comment-copy\">Well, you're right..  Actually all 5 MOVs apparently are moving one string -- one dword at a time, so I suspect you're right about the inlining.. I guess the question then becomes, why doesn't IDA automatically figure that out? Is there a way to get it to analyze and reverse the optimizations?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Uhm yes, in the links that I included, you'd have found that there is an IDAPython plugin to deal with stack string: <a href=\"https://github.com/mandiant/flare-ida\" rel=\"nofollow noreferrer\">github.com/mandiant/flare-ida</a> ... other than that, please ask a separate question (you may well link to this one for reference), but changing the subject of a question after getting an answer isn't good style. Thanks. (PS: While you can probably attempt to find patterns and handle these from a script or plugin, reversing optimizations to grasp the idea behind a given piece of code is exactly one of the big challenges every reverse engineer faces.)</span>",
                    "time": null
                },
                {
                    "user": "XeroxDucati",
                    "text": "<span class=\"comment-copy\">I missed that there was a second link.. D'oh. Thanks so much!</span>",
                    "time": null
                }
            ]
        }
    ]
}