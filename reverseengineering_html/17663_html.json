{
    "title": "How to find out if PE executable was compiled with gcc or VisualStudio?",
    "link": "https://reverseengineering.stackexchange.com/questions/17663/how-to-find-out-if-pe-executable-was-compiled-with-gcc-or-visualstudio",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I looked at two ways so far. Both did not convince me in regard to false positives or false negatives:\n </p>\n <ol>\n  <li>\n   <p>\n    Using strings:\n    <a href=\"https://stackoverflow.com/questions/2387040/how-to-retrieve-the-gcc-version-used-to-compile-a-given-elf-executable\">\n     How to retrieve the GCC version used to compile a given ELF executable?\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    Using the linker version field in the PE header:\n    <a href=\"https://stackoverflow.com/questions/40831299/can-i-tell-what-version-of-visual-studio-was-used-to-build-a-dll-by-examining-th\">\n     Can I tell what version of Visual Studio was used to build a DLL by examining the DLL itself?\n    </a>\n   </p>\n  </li>\n </ol>\n <p>\n  What is a good heuristic to tell if a PE executable was compiled with VisualStudio/gcc ?\n </p>\n <p>\n  For example, are there certain strings, header values, sections, imports, etc. that allow to differentiate one from the other? The exact compiler versions and used compiler flags do not matter...\n </p>\n <p>\n  I am also not expecting malicious executables.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 5,
    "views": "3k",
    "tags": [
        "pe",
        "executable",
        "compilers",
        "binary-format",
        "gcc"
    ],
    "user": "langlauf.io",
    "time": "Mar 13, 2018 at 16:08",
    "comments": [
        {
            "user": "knx",
            "text": "<html><body><span class=\"comment-copy\">\n Perhaps helpful:\n <a href=\"https://reverseengineering.stackexchange.com/questions/16060/how-tools-like-peid-find-out-the-compiler-and-its-version\" title=\"how tools like peid find out the compiler and its version\">\n  reverseengineering.stackexchange.com/questions/16060/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "<html><body><span class=\"comment-copy\">\n I would prefer not to rely on an external tool (which may be out of date or may not contain the appropriate signature). Also, I don't need the exact version, just the more general info if it is gcc or VS.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n You can take a look at the rich header\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "<html><body><span class=\"comment-copy\">\n What is the rich header?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://www.ntcore.com/files/richsign.htm\" rel=\"nofollow noreferrer\">\n  ntcore.com/files/richsign.htm\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There‘s a tool fort that:\n  <a href=\"https://www.aldeid.com/wiki/PEiD\" rel=\"nofollow noreferrer\">\n   peid\n  </a>\n  . The format used by peid is also the de facto standard format for detection of compilers and runtime packers (=programs that modify compiled programs). While peid seems to no longer be actively developed you can find up to date third party signature files for peid on the net.\n </p>\n <p>\n  And of course by looking at the peid signatures you can see what they use to identify the compiler. It‘s mostly the code at the entry point, i.e. the instructions that are run before your main() or WinMain() are even called.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "manduca",
            "time": "Apr 7, 2018 at 2:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "jrh",
                    "text": "<span class=\"comment-copy\">This didn't seem to work for me on a 64 bit binary, it couldn't recognize it as a PE file</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While not a definitive way of determining if GCC OR MSVC (Visual Studio) was used, the presence of the Rich header does determine whether Microsoft's link.exe (MS VC Toolset's linker) was used. (Note: Newer Visual Studio also supports building with clang)\n </p>\n <p>\n  I get that it's officially undocumented, but it's arguably the most publicly well-known and documented\n  <em>\n   undocumented\n  </em>\n  PE structure.\n </p>\n <p>\n  Link.exe always inserts the Rich header, there's no way to tell it not to. There's even a request on visualstudio.com to add a switch to remove it, but the official response is that there's no way currently:\n  <a href=\"https://developercommunity.visualstudio.com/idea/740443/add-linker-option-to-strip-rich-stamp-from-exe-hea.html\" rel=\"noreferrer\">\n   https://developercommunity.visualstudio.com/idea/740443/add-linker-option-to-strip-rich-stamp-from-exe-hea.html\n  </a>\n  . They are also likely never going to remove this header even with \"developer privacy\" as the stated concern because the information contained is build environment related (not personally identifiable usually) and is currently a very popular way to loosely link malware attribution.\n </p>\n <p>\n  Conversely, MinGW, GCC, and others do not insert this header.\n </p>\n <p>\n  If you want some python code to detect the presence of the Rich header (the pefile module is packed full of features to also parse and manipulate headers):\n </p>\n <pre><code>from pefile import PE\n\npe = PE('/path/to/file.exe')\n\nrich_header = pe.RICH_HEADER\n\nreturn rich_header is not None\n</code></pre>\n <p>\n  If\n  <code>\n   rich_header is None\n  </code>\n  then there is no header present, otherwise, this contains the header and its values.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "SheepReaper",
            "time": "Feb 27, 2020 at 17:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Additional to PE detection tools (like PEiD, Detect it easy ,Etc) there is some especial code patterns for GCC and MSVC for example GCC use\n  <code>\n   MOV\n  </code>\n  inst instead of\n  <code>\n   PUSH\n  </code>\n  inst for pushing a value on stack.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "EIP Passenger",
            "time": "Apr 8, 2018 at 17:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The best heuristic would be code. I would create a hello world test file and compile it with the compilers I was interested in identifying.\n </p>\n <p>\n  Load them in the free version of IDA (or Pro if you've got it), and then examine the instructions at the entry point. Matching on compiler code at the entry point is a sure fire was of getting it right. You may have to try a few versions of the same compiler to ensure the code you've chosen to match is consistent.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "ben_re",
            "time": "Mar 13, 2018 at 16:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you use WinDbg, an easy way to tell might be to simply do a search for\n  <code>\n   0x00400000\n  </code>\n  (or whatever the image base address is) through every code page.\n </p>\n <p>\n  I don't know why GCC does this but apparently, it seems to make a habit of (unnecessarily?) referencing the image headers. For example, the following code can be found in\n  <a href=\"https://www.simutrans.com/en/\" rel=\"nofollow noreferrer\">\n   Simutrans\n  </a>\n  version 120.2.2 r8163 which is compiled by GCC:\n </p>\n <pre><code>00401002:    lea     esi,[esi]\n00401009:    lea     edi,[edi]\n00401010:    sub     esp,1Ch\n00401013:    xor     eax,eax\n00401015:    cmp     word ptr [image00400000 (00400000)],5A4Dh  <--- reference to the MS-DOS Stub\n0040101e:    mov     dword ptr [image00400000+0x59c7ec (0099c7ec)],1\n00401028:    mov     dword ptr [image00400000+0x59c7e8 (0099c7e8)],1\n00401032:    mov     dword ptr [image00400000+0x59c7e4 (0099c7e4)],1\n0040103c:    mov     dword ptr [image00400000+0x59c490 (0099c490)],1\n00401046:    je      image00400000+0x10b0 (004010b0)\n00401048:    mov     dword ptr [image00400000+0x4b8008 (008b8008)],eax\n0040104d:    mov     eax,dword ptr [image00400000+0x59c7f8 (0099c7f8)]\n00401052:    test    eax,eax\n00401054:    je      image00400000+0x10a0 (004010a0)\n00401056:    mov     dword ptr [esp],2\n0040105d:    call    image00400000+0x2c0c38 (006c0c38)\n00401062:    mov     dword ptr [esp],0FFFFFFFFh\n00401069:    call    image00400000+0x2a2ef0 (006a2ef0)\n0040106e:    mov     edx,dword ptr [image00400000+0x59c808 (0099c808)]\n00401074:    mov     dword ptr [image00400000+0x59de98 (0099de98)],eax\n00401079:    mov     dword ptr [image00400000+0x59de9c (0099de9c)],eax\n0040107e:    mov     eax,dword ptr [image00400000+0x59e6fc (0099e6fc)]\n00401083:    mov     dword ptr [eax],edx\n00401085:    call    image00400000+0x2a2be0 (006a2be0)\n0040108a:    cmp     dword ptr [image00400000+0x3d0708 (007d0708)],1\n00401091:    je      image00400000+0x1100 (00401100)\n00401093:    xor     eax,eax\n00401095:    add     esp,1Ch\n00401098:    ret\n00401099:    lea     esi,[esi]\n004010a0:    mov     dword ptr [esp],1\n004010a7:    call    image00400000+0x2c0c38 (006c0c38)\n004010ac:    jmp     image00400000+0x1062 (00401062)\n004010ae:    xchg    ax,ax\n004010b0:    mov     edx,dword ptr [image00400000+0x3c (0040003c)]\n004010b6:    cmp     dword ptr image00400000 (00400000)[edx],4550h\n004010c0:    lea     ecx,image00400000 (00400000)[edx]\n004010c6:    jne     image00400000+0x1048 (00401048)\n004010c8:    movzx   edx,word ptr [ecx+18h]\n004010cc:    cmp     dx,10Bh\n004010d1:    je      image00400000+0x1112 (00401112)\n004010d3:    cmp     dx,20Bh\n004010d8:    jne     image00400000+0x1048 (00401048)\n004010de:    cmp     dword ptr [ecx+84h],0Eh\n004010e5:    jbe     image00400000+0x1048 (00401048)\n004010eb:    mov     edx,dword ptr [ecx+0F8h]\n004010f1:    xor     eax,eax\n004010f3:    test    edx,edx\n004010f5:    setne   al\n004010f8:    jmp     image00400000+0x1048 (00401048)\n004010fd:    lea     esi,[esi]\n00401100:    mov     dword ptr [esp],offset image00400000+0x2a2e70 (006a2e70)\n00401107:    call    image00400000+0x2a2e60 (006a2e60)\n0040110c:    xor     eax,eax\n0040110e:    add     esp,1Ch\n00401111:    ret\n00401112:    cmp     dword ptr [ecx+74h],0Eh\n00401116:    jbe     image00400000+0x1048 (00401048)\n0040111c:    mov     ecx,dword ptr [ecx+0E8h]\n00401122:    xor     eax,eax\n00401124:    test    ecx,ecx\n00401126:    setne   al\n00401129:    jmp     image00400000+0x1048 (00401048)\n0040112e:    xchg    ax,ax\n00401130:    sub     esp,2Ch\n00401133:    mov     eax,dword ptr [image00400000+0x59c7e0 (0099c7e0)]\n00401138:    mov     dword ptr [esp+10h],offset image00400000+0x4b8000 (008b8000)\n00401140:    mov     dword ptr [esp+8],offset image00400000+0x4b8010 (008b8010)\n00401148:    mov     dword ptr [esp+4],offset image00400000+0x4b8014 (008b8014)\n00401150:    mov     dword ptr [esp],offset image00400000+0x4b8018 (008b8018)\n00401157:    mov     dword ptr [image00400000+0x4b8000 (008b8000)],eax\n0040115c:    mov     eax,dword ptr [image00400000+0x3d06cc (007d06cc)]\n00401161:    mov     dword ptr [esp+0Ch],eax\n00401165:    call    image00400000+0x2c0c40 (006c0c40)\n0040116a:    add     esp,2Ch\n0040116d:    ret\n</code></pre>\n <p>\n  I did a search for the image base address in Simutrans and got the following results:\n </p>\n <pre><code>0:000> s -d 00401000 L?003cd38c 0x00400000\n00401018  00400000 05c75a4d 0099c7ec 00000001  ..@.MZ.......... <--- relevant\n004010b8  00400000 00004550 00008a8d 80750040  ..@.PE......@.u. <--- relevant\n005b50e0  00400000 04788908 01044783 0000e281  ..@...x..G......\n006a3170  00400000 8d10fa83 4000009f c4458900  ..@........@..E.\n006a31d0  00400000 85e8d389 81fffffd 8168f4fe  ..@...........h.\n006a32b0  00400000 d0480f00 29c4458b 89d001ca  ..@...H..E.)....\n006a32d0  00400000 810cc683 8168f4fe 7c820f00  ..@.......h....|\n006a3a28  00400000 0672b70f 1802448d 2074f685  ..@...r..D....t \n006a3ae4  00400000 efeb0c75 0026748d 8301eb83  ..@.u....t&.....\n007cf75c  00400000 0049004f 007e0288 007e0290  ..@.O.I...~...~.\n009a3378  00400000 00400040 00400080 004000ff  ..@.@.@...@...@.\n009a49a0  00400000 00400040 00400080 004000ff  ..@.@.@...@...@.\n009a5248  00400000 00400040 00400080 004000ff  ..@.@.@...@...@.\n009a5dd8  00400000 00400040 00400080 004000ff  ..@.@.@...@...@.\n009e3ea0  00400000 004014c0 005a8000 005e005c  ..@...@...Z.\\.^.\n009e3ef4  00400000 00000000 00000000 abababab  ..@.............\n0:000> s -d 00401001 L?003cd38c 0x00400000\n0043b53d  00400000 0c2444c7 00000000 08244489  ..@..D$......D$.\n006a3179  00400000 0fc44589 00011984 20fa8300  ..@..E......... \n006a383d  00400000 0b745a4d 891cc483 5f5e5bd8  ..@.MZt......[^_ <--- relevant\n006a3851  00400000 ffff46e8 74c085ff 003ca1e7  ..@..F.....t..<.\n006a38b5  00400000 03745a4d 56c3d089 0000b853  ..@.MZt....VS... <--- relevant\n006a38e1  00400000 0000eb81 b70f0040 548d0670  ..@.....@...p..T\n006a3925  00400000 03745a4d b8c3d089 00400000  ..@.MZt.......@. <--- relevant\n006a3931  00400000 fffe66e8 74c085ff 003ca1ef  ..@..f.....t..<.\n006a3955  00400000 8b535a4d 7408244c 5bd0890e  ..@.MZS.L$.t...[ <--- relevant\n006a3971  00400000 fffe26e8 74c085ff 003ca1e4  ..@..&.....t..<.\n006a39c5  00400000 03745a4d b8c3d089 00400000  ..@.MZt.......@. <--- relevant\n006a39d1  00400000 fffdc6e8 b8c085ff 00400000  ..@...........@.\n006a39dd  00400000 89d0450f f689c3d0 0027bc8d  ..@..E........'.\n006a39f5  00400000 03745a4d 569066c3 0000b853  ..@.MZt..f.VS... <--- relevant\n006a3a91  00400000 fffd06e8 74c085ff 003ca1e6  ..@........t..<.\n006a3aa5  00400000 0080808b c0850040 b70fd174  ..@.....@...t...\n007dfa85  00400000 00448000 003f0000 00000000  ..@...D...?.....\n007fffe1  00400000 003f0000 ffffc000 1641dfff  ..@...?.......A.\n009e0045  00400000 00000000 11001000 953e16a5  ..@...........>.\n</code></pre>\n <p>\n  When looking at the disassembly for all the the results that are relevant, I see mostly the following instruction:\n </p>\n <pre><code>cmp word ptr [image00400000 (00400000)],5A4Dh\n</code></pre>\n <p>\n  I've seen similar memory references in other EXEs but I'm yet to see Visual Studio produce this kind of code (and I ran the same search on an EXE built by Visual Studio and didn't see these specific memory references) so I'd say that if you see code like the above, you are almost certainly dealing with an EXE compiled by GCC.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jerry Hundric",
            "time": "Apr 6, 2018 at 16:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}