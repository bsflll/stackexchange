{
    "title": "Assembly- Using push and ESP-Register to store addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/8241/assembly-using-push-and-esp-register-to-store-addresses",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have found the following assembly lines presented in a tutorial which I do not understand:\n </p>\n <pre><code> xor eax, eax      => clear, I know that, it makes eax = 0\n push eax          => push 0 on the stack\n push 0x68732f2f   => push \"//sh\" to the stack (the numbers are opcodes I guess, output of hexdump)\n push 0x6e69622f   => push \"/bin\" to the stack (again opcodes, representing \"/bin\" )\n mov ebx, esp      => put address of \"/bin//sh\\0\" into ebx, via esp\n ....\n</code></pre>\n <p>\n  <strong>\n   My question:\n  </strong>\n  Why we put address of \"/bin//sh\" into ebx, via esp using the line mov ebx, esp for that ?\n </p>\n <p>\n  I draw a sketch:\n </p>\n <pre><code>         |                        |\n         |------------------------|<-----ESP (I know that ESP always points to the top)\n(a)      |  0x6e69622f  (\"//sh\")  |\n         |------------------------|\n(b)      |   0x68732f2f (\"/bin\")  |\n         |------------------------|\n(c)      |       0                |\n         |------------------------|\n</code></pre>\n <p>\n  <strong>\n   How I try to explain it to myself\n  </strong>\n  (I am not sure if it is correct, but I thought to think about a little bit before I ask in that forum here):\n </p>\n <p>\n  ESP is a 32-bit register such that it is large enough to comprise the addresses at (a), (b) and (c) (which I marked above).\n </p>\n <p>\n  Is that right? I hope somebody can help me?\n </p>\n <p>\n  best regards,\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "9k",
    "tags": [
        "assembly",
        "esp",
        "register"
    ],
    "user": "user3097712",
    "time": "Feb 14, 2015 at 23:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First of all, let me clarify this:\n </p>\n <p>\n  <code>\n   ESP\n  </code>\n  is a 32-bit register which contains a pointer to the stack.\nIt is not, by any means, big enough to\n  <code>\n   comprise the addresses at [...]\n  </code>\n  . It is just\n  <em>\n   pointing\n  </em>\n  at a memory location which holds\n  <code>\n   a\n  </code>\n  ,\n  <code>\n   b\n  </code>\n  , and\n  <code>\n   c\n  </code>\n  .\n </p>\n <hr/>\n <p>\n  What your exploit does is push a string to the stack. Look at the\n  <code>\n   /bin//sh\n  </code>\n  hexadecimal representation:\n </p>\n <pre><code>2f 62 69 6e 2f 2f 73 68\n</code></pre>\n <p>\n  And now look at your assembly:\n </p>\n <pre><code>push 0x68732f2f\npush 0x6e69622f\n</code></pre>\n <p>\n  This is\n  <em>\n   not\n  </em>\n  any kind of opcodes, but rather the ASCII representation of the string, pushed as double words (basically, pushes the string in less instructions)\n </p>\n <p>\n  An alternative way would be:\n </p>\n <pre><code>push '/' ; same as push 0x2f\npush 'b' ; same as push 0x62\npush 'i' ; same as push 0x69\npush 'n' ; same as push 0x6e\npush '/' ; same as push 0x2f\npush '/' ; same as push 0x2f\npush 's' ; same as push 0x73\npush 'h' ; same as push 0x68\n</code></pre>\n <p>\n  Basically, it's doing the same as above, just in less instructions, by combining the ASCII codes together:\n  <code>\n   6e69622f\n  </code>\n  instead of\n  <code>\n   2f\n  </code>\n  ,\n  <code>\n   62\n  </code>\n  ,\n  <code>\n   69\n  </code>\n  ,\n  <code>\n   6e\n  </code>\n  separated. It's also pushing a\n  <code>\n   0\n  </code>\n  , which is a\n  <a href=\"http://en.wikipedia.org/wiki/Null-terminated_string\" rel=\"noreferrer\">\n   terminator for a C-style string\n  </a>\n  , so that the string ends there.\n </p>\n <p>\n  Now, the stack has\n  <code>\n   /bin//sh\n  </code>\n  , and all you gotta do is\n  <a href=\"http://www.cs.dartmouth.edu/~sergey/cs108/examples/shellcode32-1.c\" rel=\"noreferrer\">\n   call\n   <code>\n    sys_execve\n   </code>\n  </a>\n  , by doing an\n  <code>\n   int 0x80\n  </code>\n  (interrupt), which is the way Linux uses to make syscalls.\n </p>\n <p>\n  Since\n  <a href=\"http://asm.sourceforge.net/syscall.html\" rel=\"noreferrer\">\n   the syscall ID for\n   <code>\n    sys_execve\n   </code>\n   is 11\n  </a>\n  , you move\n  <code>\n   11\n  </code>\n  to\n  <code>\n   al\n  </code>\n  (lower part of\n  <code>\n   eax\n  </code>\n  ), and put the first argument into\n  <code>\n   ebx\n  </code>\n  , which is a\n  <em>\n   pointer to a string\n  </em>\n  . And since\n  <code>\n   ESP\n  </code>\n  is pointing to the top of the stack, and the top of the stack contains the\n  <code>\n   /bin//sh\n  </code>\n  we pushed before, the exploit assembly means this:\n </p>\n <pre><code>sys_execve(\"/bin//sh\");\n</code></pre>\n <p>\n  There you go, exploited! :)\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "rev",
            "time": "Feb 15, 2015 at 1:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for the good explanation. It helps me a lot to understand it.</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">@user3097712 no problem, be sure to ask me if I didn't explain any part properly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Its just a technique to embed strings in the exploit, as u can define them in a regular fashion, as u need their address to access them but in an exploit these addresses are dynamic not static or constants.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Alok Saini",
            "time": "Feb 19, 2015 at 9:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}