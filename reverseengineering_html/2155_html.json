{
    "title": "Is there a way to recover macros from compiled code?",
    "link": "https://reverseengineering.stackexchange.com/questions/2155/is-there-a-way-to-recover-macros-from-compiled-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been thinking of reversing some firmware I have laying around. One characteristic of the firmware is that it is compiled using lots of pre-processor macros. Now, as I understand it, these are not included in the binary, so a decompiler cannot help with these. Is there any way to recover these? Is there a known technique for inferring their existance?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "663",
    "tags": [
        "decompiler"
    ],
    "user": "MrSynAckSter",
    "time": "May 31, 2013 at 21:10",
    "comments": [
        {
            "user": "rocky",
            "text": "<html><body><span class=\"comment-copy\">\n Although the answers seem to be authoritative in their \"No\", I don't see offhand why such a translation system couldn't be written to at least make an effort. At heart,  think of this as text substitution going on which is\n <i>\n  sometimes\n </i>\n reversible.  If my macro does a substitution of \"abc\" -> \"x\" and \"def\" -> \"x\", then when I see \"x\" it might be \"abc\" or \"def\" or just \"x\".  Bad. However in practice it works the other way where the bigger and more unique string is generally on the right-hand side. So I imagine that there might be\n <i>\n  some\n </i>\n situations that could be detected.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<html><body><span class=\"comment-copy\">\n When I wrote the post I was thinking more from a heuristic type of place, like if you saw a piece of code that seemed to be copied in a way consistent with the way the compiler handles a macro. In retrospect that would be pretty hard/impossible.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  No.  Decompilers can include special pattern-matching heuristics layered on top of their other functionality to detect macros, but in general, macros are just pieces of code that get treated by the compiler the same way as other pieces of code.  They might be subject to optimizations that transform their appearance, such as constant propagation, dead code elimination, common subexpression elimination, loop-invariant code motion, etc. which means they might not manifest themselves with an easy-to-solidify syntactic pattern that can be matched against.  Your options are basically to write a post-pass for the decompiler (e.g. a Hex-Rays plugin) or to identify the macros manually.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Rolf Rolles",
            "time": "May 31, 2013 at 21:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">And you may as well forget about conditional compilation.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   No.\n  </strong>\n  \n\n  <strong>\n   Macros\n  </strong>\n  are pieces of code that you have named.\n  \n\n  At\n  <strong>\n   compilation time\n  </strong>\n  when the compiler encounters a\n  <strong>\n   macro\n  </strong>\n  it just replaces it with the code behind it, then continues the\n  <strong>\n   compilation\n  </strong>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "nomilk",
            "time": "Jun 9, 2013 at 15:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}