{
    "title": "How to do debug a running java process in linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/21773/how-to-do-debug-a-running-java-process-in-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   TLDR\n  </strong>\n  I want to do live debugging of a java program on a linux machine, and don't how/what debugger to attach to the JVM to get this done.\n </p>\n <p>\n  I expect that this is a well-solved problem, but I lack the terminology to find a solution after several hours of searching:\n </p>\n <p>\n  I have a java program (stored in a jar file) that I'd like to observe (reverse engineer?) it\n  <em>\n   while\n  </em>\n  it runs. I see a lot of\n  <em>\n   decompilation\n  </em>\n  support for java - this isn't what I'm interested in at all, so please refrain from explaining how to do this. A major problem I'm having in my search is running into these kinds of answer.\n </p>\n <p>\n  Ideally, I'd:\n </p>\n <ol>\n  <li>\n   Start the program and find the PID.\n  </li>\n  <li>\n   Attach a debugger to the JVM somehow (this is what I don't know how to do, and lack the language to search for, apparently)\n  </li>\n  <li>\n   Use the debugger to set breakpoints, read/write arbitrary memory of the JVM, see the JVM's registers and stack.\n  </li>\n  <li>\n   Use a simple, open-source command-line tool to do this, like Radare2 or GDB.\n  </li>\n </ol>\n <p>\n  I expect to be reading java bytecode (the instruction set for the JVM), not java source, while I do this.\n </p>\n <p>\n  I am used to using Radare2 and GDB for native code (crackmes, CTF stuff, microcorruption). I also see that they both technically support Java, but I'm having a hard time figuring out\n  <em>\n   how\n  </em>\n  to do this, exactly.\n </p>\n <p>\n  I need help with 2 things:\n  <strong>\n   what software to use\n  </strong>\n  and\n  <strong>\n   how to attach the program to the process\n  </strong>\n  . Bonus points if I can use radare!\n </p>\n <p>\n  To be clear, the Java in question is running on a linux PC, not on an Android phone or anything like that.\n </p>\n <p>\n  I also read about JDB, but it seems like the code needs to be compiled with debug flags, and this is not possible for my situation -- it also doesn't seem like what I'm looking for.\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 2,
    "views": "10k",
    "tags": [
        "linux",
        "radare2",
        "debuggers",
        "java",
        "disassemblers"
    ],
    "user": "stacksmasher",
    "time": "Jul 26, 2019 at 19:01",
    "comments": [
        {
            "user": "Col-E",
            "text": "<html><body><span class=\"comment-copy\">\n This isn't a lightweight solution but would you consider adding the jar to an IDE like IntelliJ and use the debugger from there? I tested it out on a small app and it worked\n <a href=\"https://i.imgur.com/BtiewnP.png\" rel=\"nofollow noreferrer\">\n  just fine\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use jdb to attach to a running program without having compiled it with debug flags.\n </p>\n <p>\n  on my machine with jdb located at /usr/local/jdk/jdk1.8.0_202/bin/jdb\nand pid of my running java process = 14476\n </p>\n <pre><code>sudo /usr/local/jdk/jdk1.8.0_202/bin/jdb -connect sun.jvm.hotspot.jdi.SAPIDAttachingConnector:pid=14476\n</code></pre>\n <p>\n  However if you did not compile your program with debugging information it is going to make debugging much harder i think.\n </p>\n <p>\n  see this\n  <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr011.html#BABFHHEE\" rel=\"nofollow noreferrer\">\n   reference\n  </a>\n  for more info.\n </p>\n <p>\n  EDIT: i also found i can view variable values of a running process easily with jvisualvm wich is a tool that comes with oracles jdk.\n </p>\n <p>\n  1) start jvisualvm from the command line. It is located in your jdk bin folder.\n </p>\n <pre><code>/usr/local/jdk/jdk1.8.0_202/bin/jvisualvm\n</code></pre>\n <p>\n  2) on the right side of the screen you can see the running java processes on your machine. You can then perform a heap dump (right click on process) and view the values of the variables of the classes your interested in.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/2Vrf5.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"heapdump\" src=\"https://i.sstatic.net/2Vrf5.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "harry",
            "time": "Feb 15, 2020 at 11:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found I also need to install one more package for the jdb attach to succeed.\n </p>\n <blockquote>\n  <p>\n   sudo apt-get install openjdk-8-dbg\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "0",
            "user": "user44039",
            "time": "Jun 3, 2023 at 0:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}