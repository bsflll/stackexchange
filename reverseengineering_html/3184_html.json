{
    "title": "Packers/Protectors for Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/3184/packers-protectors-for-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was wondering if anyone had come across a packer/protector which could be used for ELF binaries. There seem to be quite a few articles on writing packers and protectors for the PE format -- however, there don't seem to be very many for Linux.\n </p>\n <p>\n  This is just a hobby and so far I've come across\n  <a href=\"http://asm.sourceforge.net/articles/smc.html\" rel=\"nofollow\">\n   1\n  </a>\n  which is seems to be a very basic(but neat)\n  <a href=\"http://asm.sourceforge.net/articles/smc.html\" rel=\"nofollow\">\n   introduction to SMC\n  </a>\n  .\n </p>\n <p>\n  Are there any resources/source code that you could point me to that I could refer and learn from?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 3,
    "views": "12k",
    "tags": [
        "linux",
        "elf",
        "packers"
    ],
    "user": null,
    "time": "Dec 14, 2013 at 22:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Apart from the classix\n  <a href=\"http://upx.sourceforge.net/\">\n   UPX\n  </a>\n  , you should take a look at\n  <a href=\"http://woodmann.com/collaborative/tools/index.php/Burneye\">\n   Burneye\n  </a>\n  (With its crackers,\n  <a href=\"http://www.securiteam.com/tools/6T00N0K5SY.html\">\n   UNFburninhell\n  </a>\n  and\n  <a href=\"http://www.securiteam.com/tools/5BP0H0U7PQ.html\">\n   Burndump\n  </a>\n  ) and elfuck. They are pretty old, but still interesting.\n </p>\n <p>\n  If you are interested about tricks that can be used,\n  <a href=\"http://www.hackintherandom2600nldatabox.nl/archive/slides/2012/antidebugging.tgz\">\n   this\n  </a>\n  is a good introduction by aczid, and I would also recommend\n  <a href=\"http://indra.linuxstudy.pe.kr/study/Binary%20Protection%20Schemes.pdf\">\n   Binary protection schemes\n  </a>\n  for a more complete overview.\n </p>\n <p>\n  Someone also presented a CanSecWest a packer named\n  <a href=\"http://cansecwest.com/core03/shiva.ppt\">\n   Shiva\n  </a>\n  that was broken at\n  <a href=\"https://www.blackhat.com/presentations/bh-federal-03/bh-federal-03-eagle/bh-fed-03-eagle.pdf\">\n   Blackhat\n  </a>\n  . Unfortunately, there is no sources available.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "jvoisin",
            "time": "Dec 14, 2013 at 19:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Krypton",
                    "text": "<span class=\"comment-copy\">any update on this list? Except UPX, those listed are really old and not maintained.</span>",
                    "time": null
                },
                {
                    "user": "jvoisin",
                    "text": "<span class=\"comment-copy\">Feel free to write your own if you're impatient ;)</span>",
                    "time": null
                },
                {
                    "user": "Rui F Ribeiro",
                    "text": "<span class=\"comment-copy\">Unfortunately many of the links above seem not to be working anymore.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Click on the tool names to download. Some will be source code only, others binary only. Use at your own risk.\n </p>\n <hr/>\n <p>\n  There are 4 sections:\n </p>\n <ol>\n  <li>\n   experimental designs, which were developed to advance the state of the art in ELF binary protection or for research purposes\n  </li>\n  <li>\n   tools resulting from personal projects or created for fun/as a hobby\n  </li>\n  <li>\n   historically relevant protectors, now cracked/deprecated\n  </li>\n  <li>\n   modern protectors - those known at the time of writing to be used out in the \"real world\", so to speak (outside of academia - in malware for example).\n  </li>\n </ol>\n <hr/>\n <h2>\n  Experimental / Proof of Concept\n </h2>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/packz/binary-encryption/tree/master/binary-encryption/dacryfile\" rel=\"nofollow noreferrer\">\n      <code>\n       dacryfile\n      </code>\n     </a>\n    </strong>\n    (2001)\n   </p>\n   <p>\n    phrack article:\n    <a href=\"http://phrack.org/issues/58/5.html#article\" rel=\"nofollow noreferrer\">\n     Armouring the ELF: Binary encryption on the UNIX platform\n    </a>\n   </p>\n   <blockquote>\n    <p>\n     Dacryfile is a collection of tools which implement the following concept.\n  The host file is encrypted from the start of the\n     <code>\n      .text\n     </code>\n     section, to the end\n  of the\n     <code>\n      .text\n     </code>\n     segment. The file now has its object code and its read only\n  data protected by encryption, while all its data and dynamic objects are\n  open to inspection. The host file is injected with a parasite that will\n  perform the runtime decryption. This parasite can be of arbitrary size\n  because it is appended to the end of the\n     <code>\n      .data\n     </code>\n     segment.\n    </p>\n   </blockquote>\n   <p>\n    \"Parasite code\" refers to code inserted into the either the file on disk or the process image in memory in order to change the runtime behavior of the program. Various techniques that were historically used to accomplish this kind of code insertion are discussed in Silvio Cesare's article\n    <a href=\"https://www.win.tue.nl/~aeb/linux/hh/virus/unix-viruses.txt\" rel=\"nofollow noreferrer\">\n     Unix Viruses\n    </a>\n    (1999)\n   </p>\n   <p>\n    The mechanism by which the parasite code appended to the ELF binary containing the encrypted code accomplished is referred to by the grugq as \"subversive dynamic linking\":\n   </p>\n   <blockquote>\n    <p>\n     The parasite itself is fairly simple, utilising the\n     <em>\n      subversive dynamic\n  linking\n     </em>\n     Linux library to access libc functions, and rc4 to decrypt the host.\n    </p>\n   </blockquote>\n   <p>\n    This technique was detailed in his article\n    <a href=\"https://grugq.github.io/docs/subversiveld.pdf\" rel=\"nofollow noreferrer\">\n     Cheating the ELF\n    </a>\n    , in which parasite code written to a dynamically linked executable to is able to make calls to library functions essentially by searching through the process's\n    <code>\n     proc/self/maps\n    </code>\n    file for\n    <code>\n     glibc\n    </code>\n    's shared object loading and unloading functions to then load the libraries of interest.\n   </p>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"http://www.blackhat.com/presentations/bh-usa-03/bh-us-03-mehta/bh-us-03-shiva-0.96.tar\" rel=\"nofollow noreferrer\">\n      <code>\n       shiva 0.96\n      </code>\n     </a>\n    </strong>\n    (2003) (binary only (protected))\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://www.blackhat.com/presentations/bh-usa-03/bh-us-03-mehta/bh-us-03-mehta.pdf\" rel=\"nofollow noreferrer\">\n      Introduction Presentation\n     </a>\n    </li>\n    <li>\n     <p>\n      <a href=\"https://www.blackhat.com/presentations/bh-federal-03/bh-federal-03-eagle/bh-fed-03-eagle.pdf\" rel=\"nofollow noreferrer\">\n       Defeat Presentation\n      </a>\n     </p>\n     <p>\n      Implements the following features:\n     </p>\n     <ul>\n      <li>\n       Outer obfuscation layer to thwart static analysis\n      </li>\n      <li>\n       AES encrpyted, password protected middle layer\n      </li>\n      <li>\n       Inner encrypted layer consisting of crypt blocks which may be memory-mapped on demand\n      </li>\n      <li>\n       TRAP flag detection to prevent single-stepping\n      </li>\n      <li>\n       forks and then the processes\n       <code>\n        ptrace()\n       </code>\n       each other, which prevents PTRACE_ATTACH\n      </li>\n      <li>\n       jumps into the middle of instructions\n      </li>\n      <li>\n       catches SIGTRAP\n      </li>\n      <li>\n       timing checks\n      </li>\n      <li>\n       INT3 instruction replacement\n      </li>\n     </ul>\n     <p>\n      Outside of these presentations, it has been difficult to find additional information besides some discussion in\n      <code>\n       phrack\n      </code>\n      articles on ELF runtime encryption/decryption. No source code is available, only the binary, which is protected.\n     </p>\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"http://phrack.org/issues/63/13.html\" rel=\"nofollow noreferrer\">\n      <code>\n       cryptexec\n      </code>\n     </a>\n    </strong>\n    (2005)\n   </p>\n   <p>\n    phrack article:\n    <a href=\"http://phrack.org/issues/63/13.html\" rel=\"nofollow noreferrer\">\n     cryptexec: Next-generation runtime binary encryption using on-demand function extraction\n    </a>\n    . The source code is included at the end.\n   </p>\n   <p>\n    Here runtime decryption is accomplished through a combination of a tracing function that uses a private stack, a disassembler and code emulation to read blocks of 24 bytes are read, decrypted, disassembled and then emulated. This ensures that no more than 24 bytes of unencrypted program code reside in memory while decrypting and executing the protected code.\n   </p>\n   <blockquote>\n    <p>\n     The tracing routine maintains two contexts: the traced context and\n  its own context. The context consists of 8 32-bit general-purpose\n  registers and flags. Other registers are not modified by the routine.\n  Both contexts are held on the private stack (that is also used for\n  calling C).\n    </p>\n    <p>\n     The idea is to fetch, one at a time, instructions from the traced \n  program and execute them natively. Intel instruction set has rather \n  irregular encoding, so the XDE [5] disassembler engine is used to find \n  both the real opcode and total instruction length. During experiments on \n  FreeBSD (which uses LOCK- prefixed MOV instruction in its dynamic loader) \n  I discovered a bug in XDE which is described and fixed below.\n    </p>\n    <p>\n     We maintain our own EIP in traced_eip, round it down to the next lower\n  8-byte boundary and then decrypt 24 bytes into our own buffer.  Then\n  the disassembly takes place and the control is  transferred to emulation\n  routines via the opcode control table.  All instructions, except control\n  transfer, are executed natively (in traced context which is restored at\n  appropriate time).  After single instruction execution, the control is\n  returned to our tracing routine.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/zvrba/cspim\" rel=\"nofollow noreferrer\">\n      <code>\n       CSPIM\n      </code>\n     </a>\n    </strong>\n    (2010)\n   </p>\n   <p>\n    Also developed by Vrba (the designer of the aforementioned\n    <code>\n     cryptexec\n    </code>\n    ), and presented in the paper\n    <a href=\"https://ieeexplore.ieee.org/document/5438087\" rel=\"nofollow noreferrer\">\n     Program Obfuscation by Strong Cryptography\n    </a>\n    (the paper is paywalled but the code is on github and the\n    <a href=\"http://zvrba.net/articles/encrypted-execution.html\" rel=\"nofollow noreferrer\">\n     Vrba's site\n    </a>\n    ):\n   </p>\n   <blockquote>\n    <p>\n     ...we present a program obfuscation method that is based on the combination of strong encryption of code and data and a CPU simulator(CSPIM) that implements the MIPS I instruction set. Our method is different from existing methods in that only a single word (32-bits) of the protected code or data is present as plain-text in main memory. Furthermore, our method allows the possibility of externally supplying the decryption key to the simulator.\n    </p>\n   </blockquote>\n   <p>\n    <a href=\"https://i.sstatic.net/VJBqE.png\" rel=\"nofollow noreferrer\">\n     <img alt=\"CSPIM\" src=\"https://i.sstatic.net/VJBqE.png\"/>\n    </a>\n   </p>\n   <p>\n    The above diagram is from\n    <a href=\"https://www.esat.kuleuven.be/cosic/publications/article-2038.pdf\" rel=\"nofollow noreferrer\">\n     Enhancements to a virtual machine based code\nencryptor\n    </a>\n    (no code available for this paper as far as I know).\n   </p>\n  </li>\n </ul>\n <hr/>\n <h2>\n  Personal Projects\n </h2>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://packetstormsecurity.com/files/30886/cryptelf.c.html\" rel=\"nofollow noreferrer\">\n      <code>\n       cryptelf\n      </code>\n     </a>\n    </strong>\n    (2003) by SLACKo\n   </p>\n   <p>\n    Modifies binary by appending code to handle runtime decryption, changing the program entry point and changing the\n    <code>\n     .note\n    </code>\n    segment to\n    <code>\n     LOAD\n    </code>\n    . Encrypts the\n    <code>\n     .text\n    </code>\n    section by XORing its bytes with a key.\n   </p>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"http://elf-encrypter.sourceforge.net\" rel=\"nofollow noreferrer\">\n      <code>\n       ELF Encrypter\n      </code>\n     </a>\n    </strong>\n    - Last update: 2013-03-12\n   </p>\n   <p>\n    Appears to rely on classical runtime code injection or parasite code techniques to accomplish runtime decryption.\n   </p>\n   <blockquote>\n    <p>\n     The encrypted file (generated by the\n     <code>\n      crypt-7lib program\n     </code>\n     ) will be decrypted at runtime by a shared library, directly linked to the binary or listed in\n     <code>\n      LD_PRELOAD\n     </code>\n     , during its initialization routine. The suite also contains programs to inject plain and encrypted code into ELF binaries.\n    </p>\n    <p>\n     ELF-Encrypter 0.12\n    </p>\n    <ul>\n     <li>\n      changed the data segment infection technique\n     </li>\n     <li>\n      added the code to correct section table offsets\n     </li>\n    </ul>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/ps2dev/ps2-packer\" rel=\"nofollow noreferrer\">\n      ps2-packer\n     </a>\n    </strong>\n    (2013)\n   </p>\n   <p>\n    Based on UPX.\n   </p>\n   <blockquote>\n    <p>\n     Just like UPX this tool is designed to help you\n  create packed ELF to run on the PS2. It has a modular design, so anybody can\n  write any kind of module to it. It actually has a zlib module, a lzo module,\n  three ucl modules (n2b, n2d and n2e) and a null module, for demo purpose only.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/arisada/midgetpack\" rel=\"nofollow noreferrer\">\n      midgetpack\n     </a>\n    </strong>\n    (2014)\n   </p>\n   <blockquote>\n    <p>\n     Midgetpack contains two modes of operation: password and curve25519 key exchange.\n    </p>\n    <p>\n     The curve25519 is the real advantage of midgetpack. In this mode, you do not\n  provide any password or key. Instead, a key file is generated at packing time.\n  This key file must be used everytime you wish to use the binary. When you start\n  the binary, it will give a challenge and expect a response. You copy/paste the\n  challenge in the input of the mpkex tool and receive a response containing the\n  encrypted key to the binary.\n  This key exchange is protected by Curve25519 key exchange, the key is encrypted\n  with aes-128 and the whole exchange is authenticated with HMAC-SHA256 to avoid\n  generic man-in-the-middle attacks.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/tweksteen/oplzkwp\" rel=\"nofollow noreferrer\">\n      <code>\n       oplzkwp\n      </code>\n     </a>\n    </strong>\n    (2015)\n   </p>\n   <blockquote>\n    <p>\n     oplzkwp is a library for ELF obfuscation. It uses PRESENT and blake244 to encrypt your payload on the fly. Only the functions that are currently executed are decrypted in memory. Both Linux (x86) and Android (ARM) are supported.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/picoflamingo/pocrypt\" rel=\"nofollow noreferrer\">\n      pocrypt\n     </a>\n    </strong>\n    (2015)\n   </p>\n   <blockquote>\n    <p>\n     Proof of Code to demonstrate how to crypt parts of a binary. The modified binary is extended with a small function that decrypts the secured parts of the file at run-time to enable its execution.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/glen-mac/ELF-Packer\" rel=\"nofollow noreferrer\">\n      <code>\n       ELF-Packer\n      </code>\n     </a>\n    </strong>\n    (2017)\n   </p>\n   <p>\n    Simple tool developed as a homework assignment. It uses parasite code inserted into a code cave to perform runtime XOR obfuscation or de-obfuscation of a target binary's\n    <code>\n     .text\n    </code>\n    section. The details are discussed in\n    <a href=\"https://github.com/glen-mac/ELF-Packer/blob/master/elf_cryptor.pdf\" rel=\"nofollow noreferrer\">\n     Simple Polymorphic x86-64 Runtime Code Segment Crpytor\n    </a>\n    .\n   </p>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/droberson/ELFcrypt\" rel=\"nofollow noreferrer\">\n      ELFcrypt\n     </a>\n    </strong>\n    (2018)\n   </p>\n   <blockquote>\n    <p>\n     Simple ELF crypter. Uses RC4 encryption.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   Ryan O'Neill's (@ryan_elfmaster) experiments. These may have research value:\n   <ul>\n    <li>\n     <a href=\"http://www.bitlackeys.org/projects/elfpacker.tgz\" rel=\"nofollow noreferrer\">\n      ELF Packer v0.3\n     </a>\n     (2009)\n    </li>\n    <li>\n     <a href=\"https://github.com/elfmaster/sherlocked\" rel=\"nofollow noreferrer\">\n      sherlocked\n     </a>\n     (2014)\n    </li>\n    <li>\n     <a href=\"https://github.com/elfmaster/davinci\" rel=\"nofollow noreferrer\">\n      davinci\n     </a>\n     (2015)\n    </li>\n    <li>\n     <a href=\"https://github.com/elfmaster/saruman\" rel=\"nofollow noreferrer\">\n      saruman\n     </a>\n     (2018)\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <h2>\n  Historical\n </h2>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://packetstormsecurity.com/files/related/30648/burneye-1.0.1-src.tar.bz2.html\" rel=\"nofollow noreferrer\">\n      <code>\n       burneye\n      </code>\n      (v1)\n     </a>\n    </strong>\n    by the Teso group (2002)\n   </p>\n   <p>\n    The following summary is given in\n    <a href=\"http://phrack.org/issues/63/13.html\" rel=\"nofollow noreferrer\">\n     cryptexec: Next-generation runtime binary encryption using on-demand function extraction\n    </a>\n    (more information is included in burneye's documentation):\n   </p>\n   <blockquote>\n    <p>\n     Similarly to Shiva, it has three layers: 1) obfuscation, 2) password-based encryption using RC4 and SHA1 (for generating the key from passphrase), and 3) the fingerprinting layer.\n    </p>\n    <p>\n     The fingerprinting layer is the most interesting one: the data about the\n  target system is collected (e.g. amount of memory, etc..) and made into\n  a 'fingeprint'. The executable is encrypted taking the fingerprint into\n  account so that the resulting binary can be run only on the host with the\n  given fingerprint. There are two fingerprinting options:\n    </p>\n    <ul>\n     <li>\n      <p>\n       Fingeprint tolerance can be specified so that Small deviations are\n  allowed. That way, for example, the memory can be upgraded on the\n  target system and the executable will still work. If the number of\n  differences in the fingeprint is too large, the program won't work.\n      </p>\n     </li>\n     <li>\n      <p>\n       Seal: the program produced with this option will run on any system.\n  However, the first time it is run, it creats a fingerprint of the\n  host and 'seals' itself to that host. The original seal binary is\n  securely deleted afterwards.\n      </p>\n     </li>\n    </ul>\n    <p>\n     The encrypted binary can also be made to delete itself when a certain\n  environment variable is set during the program execution.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://packetstormsecurity.com/files/31524/objobf-0.5.0.tar.bz2.html\" rel=\"nofollow noreferrer\">\n      <code>\n       objobf\n      </code>\n     </a>\n    </strong>\n    aka burneye2 (2003)\n   </p>\n   <blockquote>\n    <p>\n     It reads one ELF relocateable object file and\n  produces a functional equivalent output file, which is an obfuscated version\n  of the input file. To do this,\n     <code>\n      objobf\n     </code>\n     breaks up all functions in the file to the basic block level. This representation is used to mutate the code while keeping it semantically equivalent. This involves dataflow analysis and basic block transformations. Afterwards, the basic block representation as control flow graph is linearized into a new object file, which is created from scratch.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/timhsutw/elfuck/tree/master/doc\" rel=\"nofollow noreferrer\">\n      elfuck\n     </a>\n    </strong>\n   </p>\n   <p>\n    Implements executable compression as well as encryption. Based on UPX and\n    <code>\n     burneye\n    </code>\n    .\n   </p>\n   <ul>\n    <li>\n     <blockquote>\n      <p>\n       ELFuck uses excellent Markus F.X.J. Oberhumer's compression algorithm,\n  NRV2E which carries very good compression with tiny decompressor\n  (about 128 bytes!). This algorithm family is stolen from UPX, with\n  difference in that decompression is done in real time; ELFuck will\n  decompress ELF directly to .text/.data segment and executes authentic\n  ELF image from there, on other hand, UPX creates original ELF in /tmp\n  and execve() it, so that we don't need any writeable filesystem at all.\n      </p>\n     </blockquote>\n    </li>\n    <li>\n     <blockquote>\n      <p>\n       Because ELFuck is 100%-ly based on stolen ideas, I also implemented\n  this one of BurnEye. Someone may like to disallow other users to\n  use/analyse your binary (public shells, root browsing user's homes).\n  The algorithm is kinda simple, but seems to be pretty effective:\n  We'll select some password; expand it using sha1 to 160 bit key.\n  by this key we'll encrypt, using RC4 algorithm, whole binary\n  (except the decrypting stub, of course). We'll also keep\n  last 32bits of sha1 against original binary, in order to check password.\n  When someone will execute such protected binary; the stub will ask for\n  password, make hash of it and try to decrypt the binary back using\n  this key. Then we'll make a hash of potentially decrypted binary,\n  check it against the value we've saved while creating, and if matches,\n  the binary is decrypted correctly (=right password) and we'll let it\n  run.\n      </p>\n     </blockquote>\n    </li>\n   </ul>\n  </li>\n </ul>\n <h2>\n  Modern\n </h2>\n <p>\n  The majority of modern ELF binaries are protected using UPX or a variant thereof.\n  <sup>\n   1,2\n  </sup>\n </p>\n <ul>\n  <li>\n   The simplest variation of the UPX packer used out in the wild is the\n   <a href=\"https://i.sstatic.net/AUgrm.jpg\" rel=\"nofollow noreferrer\">\n    'LSD' packer\n   </a>\n   , in which the string 'UPX' is changed to 'LSD'. An example of this was a\n   <a href=\"https://www.fortinet.com/blog/threat-research/rocke-variant-ready-to-box-mining-challengers.html\" rel=\"nofollow noreferrer\">\n    XMR coin miner written in Go which targeted systems running Jenkins\n   </a>\n   .\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <code>\n      mumblehard\n     </code>\n    </strong>\n    custom protector - not based on UPX\n   </p>\n   <blockquote>\n    <p>\n     The whole packer actually consists of about 200 assembly instructions.\n  Another notable observation: system calls are made directly by using\n     <code>\n      int 80h\n     </code>\n     instructions. Another hint that it was written in assembly is that functions do not have the usual prologue to manage the stack. By doing system calls with interrupts, Mumblehard ELF binaries avoid any external dependency.\n  Furthermore, the packer works on both Linux and BSD systems.\n     <sup>\n      1\n     </sup>\n    </p>\n   </blockquote>\n   <p>\n    samples:\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=6fe8c28022c0acb99ce1c48214043dee\" rel=\"nofollow noreferrer\">\n      20b567084bcc6bd5ac47b2ab450bbe838ec88fc726070eb6e61032753734d233\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=8c0ed8b22000d7493aa94a0c2e587a4c\" rel=\"nofollow noreferrer\">\n      78c19897d08e35c0e50155c87f501e20f2d1dbfd38607fc8e12711d086d52204\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=88b62d23b9f2b6f866774b82962442d7\" rel=\"nofollow noreferrer\">\n      84dfe2ac489ba41dfb25166a983ee2d664022bbcc01058c56a1b1de82f785a43\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=86f0b0b74fe8b95b163a1b31d76f7917\" rel=\"nofollow noreferrer\">\n      747d985d4bd302e974474dc9ab44cb1f60cb06206f3639c5d603db94395b877b\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=3437bd29e5c8fe493603581dbb0285c7\" rel=\"nofollow noreferrer\">\n      9512cd72e901d7df95ddbcdfc42cdb16141ff155e0cb0f8321069212e0cd67a8\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=b1338cd9b5a853d8920f5a868108135b\" rel=\"nofollow noreferrer\">\n      a5915c3060f5891242514b7899975393ef3d3cb87b33b6a767cffce4feac215f\n     </a>\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    a variant of\n    <strong>\n     <code>\n      tiny XMR mooner\n     </code>\n    </strong>\n    uses a custom packer according to the r2con 2018 presentation\n    <a href=\"https://github.com/radareorg/r2con2018/blob/master/talks/unpacking/Unpacking-a-Non-Unpackables.pdf\" rel=\"nofollow noreferrer\">\n     Unpacking the Non-Unpackable\n    </a>\n    .\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://www.virustotal.com/gui/file/8a0d9c84cfb86dd1f8c9acab87738d2cb82106aee0d88396f6fa86265ff252dd/detection\" rel=\"nofollow noreferrer\">\n      8a0d9c84cfb86dd1f8c9acab87738d2cb82106aee0d88396f6fa86265ff252dd\n     </a>\n    </li>\n    <li>\n     <p>\n      md5sum from presentation:\n      <code>\n       4f1fdacaee8e3c612c9ffbbe162042b2\n      </code>\n     </p>\n     <p>\n      Note this particular file was the subject of\n      <a href=\"https://xorl.wordpress.com/2017/12/21/the-tiny-xml-mooner-linux-cryptominer-malware/\" rel=\"nofollow noreferrer\">\n       The “Tiny XMR mooner” Linux cryptominer malware\n      </a>\n      (the sha256 sum is identical) but no mention is made in this analysis of packing or any other form of binary protection.\n     </p>\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <strong>\n    <code>\n     Linux/Tsunami\n    </code>\n   </strong>\n   with custom packer\n   <ul>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=171edd284f6a19c6ed3fe010b79c94af\" rel=\"nofollow noreferrer\">\n      Malshare sample\n     </a>\n    </li>\n    <li>\n     <a href=\"https://www.virustotal.com/gui/file/f22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863/detection\" rel=\"nofollow noreferrer\">\n      f22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863\n     </a>\n     (Virustotal)\n    </li>\n    <li>\n     there used to be an analysis available at\n     <a href=\"http://pwning.fun/article/2017/11/17/UnPacking_a_Linux_Tsunami_Sample.html\" rel=\"nofollow noreferrer\">\n      pwning.fun\n     </a>\n     but it looks like its been taken down.\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <h3>\n  Additional Information\n </h3>\n <p>\n  <a href=\"https://www.esat.kuleuven.be/cosic/publications/article-1529.pdf\" rel=\"nofollow noreferrer\">\n   A taxonomy of self-modifying code for obfuscation\n  </a>\n  (2011) concisely summarizes some of these tools and discusses a variety of obfuscation techniques.\n </p>\n <h3>\n  References\n </h3>\n <ol>\n  <li>\n   <p>\n    <a href=\"http://www.s3.eurecom.fr/docs/oakland18_cozzi.pdf\" rel=\"nofollow noreferrer\">\n     Understanding Linux Malware\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://s3.eurecom.fr/~invano/slides/recon18_linux_malware.pdf\" rel=\"nofollow noreferrer\">\n     Modern Linux Malware Exposed\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://www.welivesecurity.com/wp-content/uploads/2015/04/mumblehard.pdf\" rel=\"nofollow noreferrer\">\n     Unboxing Linux/Mumblehard\n    </a>\n    (2015) - ESET\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "julian",
            "time": "Aug 11, 2019 at 5:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://upx.sourceforge.net/\" rel=\"nofollow\">\n   UPX\n  </a>\n  is an\n  <a href=\"http://sourceforge.net/projects/upx/\" rel=\"nofollow\">\n   open-source\n  </a>\n  packer that works on ELF binaries.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Dec 14, 2013 at 15:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}