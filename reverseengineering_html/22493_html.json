{
    "title": "Can't find injected DLL in OllyDbg",
    "link": "https://reverseengineering.stackexchange.com/questions/22493/cant-find-injected-dll-in-ollydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to learn about injecting a DLL into a process and I wanted to simply execute a code which injects an already built DLL so that I could then check with OllyDbg if it worked.\n </p>\n <p>\n  I am using the code below for this:\n </p>\n <pre><code>LPCSTR DllPath = \"E:\\\\testdll.dll\";\nGetWindowThreadProcessId(FindWindowA(0, \"Calculator\"), &ProcessId);\nHANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, ProcessId);\nLPVOID pDllPath = VirtualAllocEx(hProcess, 0, strlen(DllPath) + 1, MEM_COMMIT, PAGE_READWRITE);\nWriteProcessMemory(hProcess, pDllPath, (LPVOID)DllPath, strlen(DllPath) + 1, 0);\nHANDLE hLoadThread = CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA(\"Kernel32.dll\"), \"LoadLibraryA\"), pDllPath, 0, 0);\nWaitForSingleObject(hLoadThread, INFINITE);\n</code></pre>\n <p>\n  Apparently this worked (I have added a MessageBox inside the DLL in order to check that) but I can't find my DLL inside the 'Executable Modules' in OllyDbg. Also, the code inside the DLL keeps running even if I close the process it was injected into.\n </p>\n <p>\n  What did I do wrong?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "315",
    "tags": [
        "ollydbg",
        "dll-injection"
    ],
    "user": "Radu",
    "time": "Nov 9, 2019 at 22:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After the target process is gone the code should not be running anymore, which makes me suspect you inject into a different process.\n </p>\n <p>\n  Try printing your\n  <code>\n   ProcessId\n  </code>\n  .\n </p>\n <p>\n  If\n  <code>\n   FindWindow\n  </code>\n  or\n  <code>\n   GetWindowThreadProcessId\n  </code>\n  fail, you'll likely end up injecting into pid 0 (the idle process). I'm a bit surprised that it works, but it would explain why your DLL code is actually executed, not visible in the calculator module list and persists even after exiting the calculator.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Nov 10, 2019 at 0:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}