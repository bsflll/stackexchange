{
    "title": "Correct my understanding on a basic allocation memory",
    "link": "https://reverseengineering.stackexchange.com/questions/19291/correct-my-understanding-on-a-basic-allocation-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is the function\n  <a href=\"https://i.sstatic.net/zhDlV.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/zhDlV.png\"/>\n  </a>\n </p>\n <p>\n  If I understand correctly:\n </p>\n <ul>\n  <li>\n   There is a buffer of size 256 bytes created (malloc)\n  </li>\n  <li>\n   in this buffer, the first 32 bits are set to 0 (because dword designates 32bits size)\n  </li>\n  <li>\n   the next 32 bits (32 to 63) are set to C8h\n  </li>\n  <li>\n   the next 32 bits (64 to 95) to 0.\n  </li>\n </ul>\n <p>\n  Then another pointer of memory size  3200 is created.\nThe address of this new pointer is written in the first buffer between the bit 127 to the bit 127+64=191.\n </p>\n <p>\n  Then we return the address of the first buffer.\n </p>\n <p>\n  Am I right?\n </p>\n <p>\n  Thank you very much!!!\n </p>\n <p>\n  PS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "70",
    "tags": [
        "assembly",
        "linux",
        "x86-64"
    ],
    "user": "David Labay",
    "time": "Sep 8, 2018 at 15:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   If I understand correctly:\n  </p>\n  <p>\n   There is a buffer of size 256 bytes created (malloc) in this buffer,\n  the first 32 bits are set to 0 (because dword designates 32bits size)\n  the next 32 bits (32 to 63) are set to C8h the next 32 bits (64 to 95)\n  to 0.\n  </p>\n </blockquote>\n <p>\n  Yes!\n </p>\n <blockquote>\n  <p>\n   The address of this new pointer is written in the first buffer between the bit 127\n  </p>\n </blockquote>\n <p>\n  Well it will be the 128th bit. The qword at\n  <code>\n   rax+0x10\n  </code>\n  is 128 bits from the head of your first\n  <code>\n   malloc\n  </code>\n  .\n </p>\n <hr/>\n <p>\n  But these aren't strictly bit offsets. You can calculate how many bits from the start of memory, but I would question why it matters.\n </p>\n <blockquote>\n  <p>\n   PS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?\n  </p>\n </blockquote>\n <p>\n  <code>\n   rax\n  </code>\n  is a 64 bit register so you can use it to represent 2^64 values.\n </p>\n <p>\n  If\n  <code>\n   rax\n  </code>\n  is\n  <code>\n   0x12345678\n  </code>\n  and I add\n  <code>\n   1\n  </code>\n  , what should happen? It will become\n  <code>\n   0x12345679\n  </code>\n  regardless of how many bits you want that to represent. (Oversimplification but I hope this make the point).\n </p>\n <p>\n  For example:\n  <code>\n   mov dword ptr [rax+4], 0xC8\n  </code>\n </p>\n <p>\n  Ref:\n  <a href=\"https://www.felixcloutier.com/x86/MOV.html\" rel=\"nofollow noreferrer\">\n   https://www.felixcloutier.com/x86/MOV.html\n  </a>\n </p>\n <p>\n  From the above ref, this is a\n  <code>\n   mov m32, imm32\n  </code>\n  which means copy a 32bit constant into the 32bit DWORD\n  <em>\n   through this pointer\n  </em>\n  <code>\n   [rax+4]\n  </code>\n </p>\n <p>\n  So because\n  <code>\n   [rax+4]\n  </code>\n  represents a pointer to byte addressable memory, the\n  <code>\n   +4\n  </code>\n  represents 4 bytes.\n </p>\n <p>\n  This is only because the\n  <code>\n   m32\n  </code>\n  operand to\n  <code>\n   mov\n  </code>\n  is concerned with the address of bytes. There are other x86 instruction that can manipulate bits, but not this one.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Abigail",
            "time": "Sep 8, 2018 at 18:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}