{
    "title": "ida decompiler output",
    "link": "https://reverseengineering.stackexchange.com/questions/11593/ida-decompiler-output",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>double __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  LODWORD(v2) = 0x5F3759DF - (SLODWORD(a1) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n</code></pre>\n <p>\n  above function do some calculation using float number\ni am not able to understand LODWORD line\n </p>\n <p>\n  Regards\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "decompile",
        "magic-number"
    ],
    "user": "Arun",
    "time": "Dec 20, 2015 at 14:17",
    "comments": [
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  LODWORD\n </code>\n is the first 2 bytes of the\n <code>\n  DWORD\n </code>\n and\n <code>\n  HIDWORD\n </code>\n is the second 2 bytes of\n <code>\n  DWORD\n </code>\n .. see those commands as just putting 2 pieces of a pizza pie together and then you read the whole pizza pie as a new number, and cast it to whatever datatype is suitable for it. I would just declare those macros in a new project and do some expirements with them both to understand their operation completely output a few\n <code>\n  printf(\"%x\n\", DWORDAnswer);\n </code>\n afterwards. (SLODWORD is signed version of LODWORD). Also you could replace all macro's with equivalent code to the macro to make it easier on the eye.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   0x5F3759DF\n  </code>\n  constant seems familiar...\n </p>\n <p>\n  It is the fast inverse square root algorithm:\n  <a href=\"http://en.wikipedia.org/wiki/Fast_inverse_square_root\" rel=\"nofollow\">\n   http://en.wikipedia.org/wiki/Fast_inverse_square_root\n  </a>\n </p>\n <p>\n  comparing against that code\n  <code>\n   SLODWORD\n  </code>\n  and\n  <code>\n   LODWORD\n  </code>\n  would be a bit-preserving conversion to an integral type.\n </p>\n <p>\n  The last line does\n  <code>\n   a1*invsqrt(a1)\n  </code>\n  which is equal to\n  <code>\n   sqrt(a1) * (sqrt(a1)/sqrt(a1))\n  </code>\n  so it ends up calculating the square root of the input parameter.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "ratchet freak",
            "time": "Dec 24, 2015 at 12:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Arun",
                    "text": "<span class=\"comment-copy\">unable to under stand Floating point calculation</span>",
                    "time": null
                },
                {
                    "user": "ratchet freak",
                    "text": "<span class=\"comment-copy\">did you read the wiki article? In particular <a href=\"https://en.wikipedia.org/wiki/Fast_inverse_square_root#Working_of_the_algorithm\" rel=\"nofollow noreferrer\">the section that explains why it works?</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use this line as reference to understand the hidden macros'\n </p>\n <p>\n  <a href=\"http://www.wekk.net/files/defcon/defs.h\" rel=\"nofollow\">\n   http://www.wekk.net/files/defcon/defs.h\n  </a>\n </p>\n <pre><code>double __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  LODWORD(v2) = 0x5F3759DF - (SLODWORD(a1) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n</code></pre>\n <p>\n  could be simplified easier on the eyes like this\n </p>\n <pre><code>double __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  *((_DWORD*)&(v2)) = 0x5F3759DF - (*((long*)&(a1)) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n</code></pre>\n <p>\n  or how I would do it..\n </p>\n <pre><code>double __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  *((unsigned int *)&(v2)) = 0x5F3759DF - (*((long*)&(a1)) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n</code></pre>\n <p>\n  <strong>\n   But this is how you do it if you are a hacker. Google.com search > 0x5F3759DF\n  </strong>\n </p>\n <p>\n  Find this link\n  <a href=\"http://gostash.it/en/stashes/184\" rel=\"nofollow\">\n   http://gostash.it/en/stashes/184\n  </a>\n </p>\n <pre><code>float Q_rsqrt( float number )\n{\n   long i;\n   float x2, y;\n   const float threehalfs = 1.5F;\n\n   x2 = number * 0.5F;\n   y = number;\n   i = * ( long * ) &y; // evil floating point bit level hacking\n   i = 0x5f3759df - ( i >> 1 ); // what the fuck?\n   y = * ( float * ) &i;\n   y = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration\n   // y = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration, this can be removed\n\n   return y;\n} \n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "SSpoke",
            "time": "Dec 24, 2015 at 19:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zirui Wang",
                    "text": "<span class=\"comment-copy\">The link to wekk.net is broken. Your macro for LODWORD works perfectly for me. I wonder if you have another macro for HIDWORD, and other similar macros.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  SLODWORD(a1) returns the hex representation of a input read the\n  <code>\n   wiki-link\n  </code>\n  by ratchet freak and take a look at the poc below\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\nlong dodance(float number){\n  float y  = number;\n    long i  = * ( long * ) &y;\n  return i;\n}\nvoid main (void) {  \n  long a = dodance((float)3.2865);\n  printf(\"%08X\n%f\n\",a,*(float *)&a);\n}\n</code></pre>\n <p>\n  compile without optimization the above code using say\n </p>\n <pre><code>cl /Zi /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE\n</code></pre>\n <p>\n  and execute the resulting binary\n </p>\n <pre><code>magicnum.exe\n40525604\n3.286500\n</code></pre>\n <p>\n  Compiling the enhanced code below you can see the maximum precision attainable by the 32 bit float is exhausted when the third term is evaluated in the series\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\nlong dodance(float number)\n{\n  float y  = number;\n    long i  = * ( long * ) &y;\n  return i;\n}\nint main (int argc , char *argv[]) \n{\n  if(argc != 3){printf (\"usage %s <float> <int>\n\",argv[0]);return 0;}\n  float input = (float) atof(argv[1]);\n  int term = atoi(argv[2]);\n  long a = dodance(input);\n  printf(\"%-10s= %08X\n%-10s= %f\n\",\"hex\",a,\"float\",*(float *)&a);\n  long b = (0x5f3759df - (a >> 1));\n  float c = *(float *)&b ;\n  printf(\"%-10s= %08X\n%-10s= %f\n\",\"hex\",b,\"~1stfloat\",c);\n  for(int i=0; i< term;i++) \n  {\n    c = (float)(c * ( 1.5 - ( (input * 0.5) * c * c )) );\n    printf(\"%-10s= %f\n\",\"~nxtfloat\",c);\n  }\n  return 1;\n}\n</code></pre>\n <p>\n  result\n </p>\n <pre><code>magicnum.exe\nusage magicnum.exe <float> <int>\n\nmagicnum.exe 3.2 1\nhex       = 404CCCCD\nfloat     = 3.200000\nhex       = 3F10F379\n~1stfloat = 0.566215\n~nxtfloat = 0.558877\n\nmagicnum.exe 3.2 2\nhex       = 404CCCCD\nfloat     = 3.200000\nhex       = 3F10F379\n~1stfloat = 0.566215\n~nxtfloat = 0.558877\n~nxtfloat = 0.559017\n\nmagicnum.exe 3.2 3\nhex       = 404CCCCD\nfloat     = 3.200000\nhex       = 3F10F379\n~1stfloat = 0.566215\n~nxtfloat = 0.558877\n~nxtfloat = 0.559017\n~nxtfloat = 0.559017 <-- no improvement over the previous result\n</code></pre>\n <p>\n  some theory\n </p>\n <pre><code>Newtons method is a proof and extension of binomial expansion theoram \nfor fractions and negative numbers \nsimplified binomial exapnsion for (1+x)^n = 1 + (n*x) + ((n*(n-1)/2)*x^2) + .......\nwe can derive an approximation of the  squareroot\nsqrt(3.2)   = (4 - 0.8)^ 1/2  \n        = 2 * ( 1 - 1/5) ^ 1/2\n        = 2 * ( 1 + 1/2*(-1/5)  + (-1/8) * (1/25) + .....)\n        = 2 * ( 1 - 1/10 - 1/200)\n        = 2 * ( 200/200 - 20/200 - 1/200)\n        = 2 * (179/200)\n        = 2 * (0.895)\n                = 1.79\n1 / sqrt(3.2)   = 1 / 1.79\n        = 0.55865921787709497206703910614525\nusing calc.exe \n3.2^-0.5    = 0.55901699437494742410229341718282 \n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 24, 2015 at 18:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}