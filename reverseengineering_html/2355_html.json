{
    "title": "Tool for checking for in-memory code modifications of loaded DLLs",
    "link": "https://reverseengineering.stackexchange.com/questions/2355/tool-for-checking-for-in-memory-code-modifications-of-loaded-dlls",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A common anti-debugging practice is to overwrite functions such as DbgUiRemoteBreakin within ntdll.dll.\n </p>\n <p>\n  Since in-memory representation of common libraries is always the same on each platform, it should be possible for an external tool to connect to a process and compare in-memory library code with a reference in order to find any manipulations done by the process itself.\n </p>\n <p>\n  Does anybody know such a tool for Windows?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "495",
    "tags": [
        "tools",
        "windows",
        "dll"
    ],
    "user": "Robert",
    "time": "Jun 28, 2013 at 2:36",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n Try to look into this thread, I thinks it could at least partially answer your question\n <a href=\"http://reverseengineering.stackexchange.com/questions/2276/tool-for-checking-if-there-is-any-patch-in-the-loaded-module\">\n  Tool for checking if there is any patch in the loaded module\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff562217%28v=vs.85%29.aspx\" rel=\"nofollow\">\n   WinDbg can do this\n  </a>\n  for Microsoft DLLs and executables (and generally for any code that can be obtained from the symbol server). Just attach the debugger to the process and do\n  <code>\n   !chkimg <module>\n  </code>\n  . It will download a clean copy of the module from the symbol server and compare it, reporting on differences.\n </p>\n <p>\n  <a href=\"http://community.websense.com/blogs/securitylabs/archive/2010/04/29/analyzing-malwares-using-microsoft-tools.aspx\" rel=\"nofollow\">\n   This article\n  </a>\n  has an example of the output you can expect to see when something has modified a binary.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Brendan Dolan-Gavitt",
            "time": "Jun 27, 2013 at 15:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Robert",
                    "text": "<span class=\"comment-copy\">The described manipulation is usually used for terminating the process when an debugger is attached. Therefore only the variant by analyzing a process memory dump would be possible.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can attach to the process\n  <code>\n   non invasive\n  </code>\n  and use !\n  <code>\n   chkimg !chkallimg !chksym\n  </code>\n  commands.\n </p>\n <p>\n  Look for\n  <code>\n   non invasive check box\n  </code>\n  in the attach to process dialog in\n  <code>\n   windbg\n  </code>\n  or use\n  <code>\n   .attach -v \"pid\"\n  </code>\n </p>\n <p>\n  Attaching in a non invasive way minimizes debugger interference and in most cases will not trigger the anti-debugging routines.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "asheeshr",
            "time": "Jun 28, 2013 at 2:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">I was looking at your answers and saw that some of them were missing punctuation. I made some edits but in the future, please try to incorporate these into your answers as it makes them much more easier to read. Thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}