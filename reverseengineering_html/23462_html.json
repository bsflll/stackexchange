{
    "title": "IDA/Hexrays: local variable allocation has failed; how to fix this?",
    "link": "https://reverseengineering.stackexchange.com/questions/23462/ida-hexrays-local-variable-allocation-has-failed-how-to-fix-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reverse engineering an old DOS game that's using the DOS/4GW extender. The game includes some libraries that I already successfully reversed in a different application, so I'm pretty sure that the declaration for the function that is making trouble is correct. Nonetheless, the function in question shows the error message\n  <code>\n   // local variable allocation has failed, the output may be wrong!\n  </code>\n  .\nWhen looking at the assembly, it seems like there's a problem with the stack definition, as can be seen here:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/lWrEG.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/lWrEG.png\"/>\n  </a>\n </p>\n <p>\n  I already tried to edit the function and make some adaptions (unfortunately I'm lacking a little bit of experience there), but to no avail.\nHere's a screenshot of the declarations/stack frame and the function's initial options without changes:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/uR1TJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/uR1TJ.png\"/>\n  </a>\n </p>\n <p>\n  What could be the cause for the failed allocation and how can one fix it?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "hexrays",
        "dos",
        "stack-variables"
    ],
    "user": "Mentulatus",
    "time": "Mar 18, 2020 at 11:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First, local variable allocation failures do not necessarily mean that the decompilation is incorrect. They can happen naturally when using forced variables, for example. I'd proceed trying to analyze the function as normal.\n </p>\n <p>\n  If you see any weird variable manipulations that you can't reconcile, I would recommend double-checking the stack pointer all throughout the function. Start with the return sites: do you see any negative displacements at\n  <code>\n   ret\n  </code>\n  instructions? If so, this indicates wrong stack points somewhere throughout the function.\n </p>\n <p>\n  If the return sites look good, I would recommend pulling up\n  <code>\n   View->Open subviews->Problems\n  </code>\n  and get to work fixing anything that says\n  <code>\n   BADSTACK\n  </code>\n  . When I say \"fixing\", I mean ensuring that every called function has correct stack displacement information. For direct calls, you fix these by editing the functions to make sure their purged bytes and frame pointer deltas are correct. For indirect calls, use\n  <code>\n   ALT-K\n  </code>\n  \"Change SP value\" to ensure the correct purge amount.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jan 18, 2021 at 6:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}