{
    "title": "Remote Debugging an Aarch64 ELF File on Multiarch/Qemu-user-static (arm64v8/alpine) Docker Container",
    "link": "https://reverseengineering.stackexchange.com/questions/26412/remote-debugging-an-aarch64-elf-file-on-multiarch-qemu-user-static-arm64v8-alpi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My goal is stated in the title. However, I think there is a fundamental issue with gdbserver. In particular, I create an aarch64 alpine docker container on a x86_64 Ubuntu 16.04 host using\n </p>\n <p>\n  <code>\n   sudo docker run --rm -it -p 12345:12345 -v /host_dir:/container_dir --privileged arm64v8/alpine /bin/ash\n  </code>\n </p>\n <p>\n  I then proceed to install\n  <code>\n   gdb\n  </code>\n  in the container using\n  <code>\n   apk add gdb\n  </code>\n  . Subsequently I run\n  <code>\n   ps aux\n  </code>\n  just to get a list of the processes running in the container in order to test\n  <code>\n   gdbserver --attach COMM...PID\n  </code>\n  command in the container. Interestingly absolutely no output no matter how much time goes on. As a result, I switch to the host and simply do the same exercise on the Ubuntu machine, i.e., I attach to a random process with\n  <code>\n   pid\n  </code>\n  23056. The output to\n  <code>\n   gdbserver --attach :12344 23056\n  </code>\n  is\n  <code>\n   Attached; pid = 23056 Listening on port 12344\n  </code>\n  , which is what I expected to happen with gdbserver in the container. Any help as to why\n  <code>\n   gdbserver\n  </code>\n  in the container doesn't behave properly is appreciated!\n </p>\n <p>\n  <strong>\n   EDIT 1:\n  </strong>\n </p>\n <p>\n  I tried again and first ran\n  <code>\n   sudo docker run --rm -it --privileged -p 7777:7777 -v home_dir:container_dir arm64v8/alpine\n  </code>\n  and then ran\n  <code>\n   gdbserver localhost:7777 ./binary\n  </code>\n  and then as suggested in the comments I used\n  <code>\n   netstat -l\n  </code>\n  in the container and got\n  <code>\n   tcp 0      0 0.0.0.0:7777            0.0.0.0:*   LISTEN\n  </code>\n  . So it seems that clearly\n  <code>\n   gdbserver\n  </code>\n  is listening for a\n  <code>\n   tcp\n  </code>\n  connection. Then I use\n  <code>\n   gdb-multiarch binary\n  </code>\n  on the host machine and then\n  <code>\n   (gdb) target remote localhost:7777\n  </code>\n  to get:\n </p>\n <p>\n  <code>\n   Remote debugging using localhost:7777\n  </code>\n </p>\n <p>\n  <code>\n   Ignoring packet error, continuing...\n  </code>\n </p>\n <p>\n  <code>\n   warning: unrecognized item \"timeout\" in \"qSupported\" response\n  </code>\n </p>\n <p>\n  <code>\n   Ignoring packet error, continuing...\n  </code>\n </p>\n <p>\n  <code>\n   Remote replied unexpectedly to 'vMustReplyEmpty': timeout\n  </code>\n </p>\n <p>\n  Any idea?!\n </p>\n <p>\n  <strong>\n   EDIT 2:\n  </strong>\n </p>\n <p>\n  I ran the docker container without the\n  <code>\n   --publish\n  </code>\n  or\n  <code>\n   -p\n  </code>\n  attribute and clearly no matter what\n  <code>\n   IP:PORT\n  </code>\n  I use,\n  <code>\n   gdb-multiarch\n  </code>\n  says the\n  <code>\n   Connection timed out\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "967",
    "tags": [
        "debugging",
        "gdb",
        "remote",
        "aarch64"
    ],
    "user": "Newbie",
    "time": "Dec 3, 2020 at 2:45",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n Have you confirmed that it is indeed not listening on the port? I seem to recall not always having output. Have you tried debugging the debugger? Maybe try\n <code>\n  strace\n </code>\n on\n <code>\n  gdbserver\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "<html><body><span class=\"comment-copy\">\n @multithr3at3d Thank you for the comment. Did you also run gdbserver in a docker? As my name says, I'm a newbie and I haven't yet made sure that in fact it is listening or not. I'm thinking maybe I set the docker wrong or I'm just not passing the correct\n <code>\n  IP:PORT\n </code>\n to the\n <code>\n  target remote\n </code>\n command of\n <code>\n  gdb-multiarch\n </code>\n to connect to\n <code>\n  gdbserver\n </code>\n . Basically, I don't feel sure about the connection between the container and the host. Can you comment on that. Also, do you see anything wrong with the docker command?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n Haven't used it in Docker, no. In the container, try\n <code>\n  ss\n </code>\n or\n <code>\n  netstat\n </code>\n with\n <code>\n  -l\n </code>\n to see if it's listening on that port. What args are you passing to\n <code>\n  target remote\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "<html><body><span class=\"comment-copy\">\n So this is what I just did inside the docker:\n <code>\n  gdbserver :7778 binary\n </code>\n and in another terminal (still in container) I did\n <code>\n  netstat -l\n </code>\n and I got\n <code>\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State\n </code>\n :\n <code>\n  tcp        0      0 0.0.0.0:7778            0.0.0.0:*               LISTEN\n </code>\n . So I guess gdbserver is actually listening! On the host I have\n <code>\n  gdb-multiarch binary\n </code>\n and then\n <code>\n  (gdb) target remote localhost:7778\n </code>\n and after a few seconds I get\n <code>\n  localhost:7778: Connection timed out.\n </code>\n It seems that I have the connection between the host and the docker messed up! Right?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n Well that's good news! Are there firewall rules that would block inbound connections to loopback? Alternatively, if you don't use\n <code>\n  --privileged\n </code>\n , you could maybe specify the address of the container itself.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}