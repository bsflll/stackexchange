{
    "title": "Convert C/C++ function to raw bytes [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6860/convert-c-c-function-to-raw-bytes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions on\n       <b>\n        software development\n       </b>\n       are off-topic here, but can be asked on\n       <a href=\"http://stackoverflow.com/about\">\n        Stack Overflow\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2014-12-23 05:52:14Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/6860/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm planning to inject a thread into another process and unfortunately I need to write the thread function in raw bytes and can't just compile it in my program and then copy it over. \nThe thread needs to receive a struct and call a function by address passing certain contents of the struct as parameters. \nNow I'm wondering how I could write this basic code in C/C++ and let it being converted into bytes.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c++",
        "c",
        "byte-code",
        "injection"
    ],
    "user": "Forivin",
    "time": "10 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Are you certain it's a classical\n <code>\n  struct\n </code>\n and not a\n <code>\n  class\n </code>\n ? In C++ these are only mildly different (visibility of members). You could copy your code if it's relocatable, but it has to be in the address space of the target process. However, you'd have to tell which OS and either way this question is off-topic here, as this is not about reverse engineering, but about actual software development. Suggest to ask again on StackOverflow and post a link to that as a comment on your (soon closed) question here.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In general you cannot expect a function written in C/C++ to result in a single compact, copyable chunk of object code inside your executable. To achieve that you need to tweak the compiler settings and take the function's address in plain view of the compiler, to make it emit the actual code of the function instead of inlining it. Or use an equivalent compiler directive, like\n  <code>\n   __declspec(noinline)\n  </code>\n  in VC++.\n </p>\n <p>\n  Also, compilers often call helper functions under the hood even if the source code does not show any explicit function calls. There's things like\n  <code>\n   __security_check_cookie()\n  </code>\n  , for example, or\n  <code>\n   __allmul()\n  </code>\n  .\n </p>\n <p>\n  Having said that, coding such a function in C/C++ can be done with suitable care and suitable control over compiler options. The advantage is that such code is often much clearer and more readable than (inline) assembly.\n </p>\n <p>\n  One option that works on most platforms is to rip the object code for the function from the object file produced by the compiler. This is a bit involved because it requires parsing the object file format but the meta information allows you to ascertain that the object code chunk is free from naughty calls to hidden functions, and items that need relocation (like imports and variable addresses) are also dealt with in the meta data.\n </p>\n <p>\n  One option that can work for 64-bit executables under Windows is using the\n  <a href=\"http://msdn.microsoft.com/en-us/library/ft9x1kdx.aspx\" rel=\"nofollow\">\n   RUNTIME_FUNCTION\n  </a>\n  info in the .pdata section. This data allows you to determine the physical size of your function and also to verify that the code for the function is in one continguous chunk and not split into several pieces. Leaf functions are usually not included in the .pdata but calling through a function pointer is sufficient to make your function a non-leaf. You still need to inspect the code to ascertain that it is free from naughtiness, though, until you have gathered enough experience with (and trust in) your compiler.\n </p>\n <p>\n  Another option that can be made to work on many platforms is to walk the object code for the function using a disassembler library like\n  <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow\">\n   Capstone\n  </a>\n  or\n  <a href=\"https://code.google.com/p/distorm/\" rel=\"nofollow\">\n   diStorm\n  </a>\n  . That's what I would prefer...\n </p>\n <p>\n  Injecting a DLL is bound to be a lot easier than all that, though. Not to mention less restrictive and much more powerful.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "DarthGizka",
            "time": "Dec 20, 2014 at 17:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}