{
    "title": "How can I enumerate and hook into a Windows 10 RPC interface?",
    "link": "https://reverseengineering.stackexchange.com/questions/20965/how-can-i-enumerate-and-hook-into-a-windows-10-rpc-interface",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Suppose that I have a certain Windows service that I know exposes a local RPC interface. I want to create a client program that calls into these procedures; however, I do not have the source code for the service application.\n </p>\n <p>\n  I know that I can use Process Explorer to get the name of the server's ALPC handle under\n  <code>\n   \\RPC Control\n  </code>\n  , and I guess that this handle could be used to create a binding string which would allow my client to connect to the server. This should hopefully solve the connection part.\n </p>\n <p>\n  However, how should I go on about defining the actual RPC interface for my client to get code executed on the server? I would first need to identify remote procedures and the arguments that they take, and then code a proper client. My guess is that I should write an idl file that somehow fits with the service, and then compile it using midl compiler with an appropriate configuration. Is this the best strategy or would someone with more experience suggest something else? What are the most efficient techniques or tools to enumerate and reverse engineer RPC interfaces? Is reversing even necessary? Does anyone has some experience they could share about this?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "windows",
        "windows-10"
    ],
    "user": "user25972",
    "time": "Mar 30, 2019 at 8:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For analysing RPC I use\n  <a href=\"http://www.openrce.org/downloads/details/186/mIDA\" rel=\"nofollow noreferrer\">\n   mIDA\n  </a>\n  :\nmIDA is a plugin for the IDA disassembler that can extract RPC interfaces from a binary file and recreate the associated IDL definition. mIDA is free and fully integrates with the latest version of IDA (5.2 or later).\nNote that mIDA doesn't work with most recent version (64 bit version) of IDA but requires 32 bit version (6.95 is the latest version).\n </p>\n <p>\n  This plugin can be used to :\n </p>\n <pre><code>* Navigate to RPC functions in IDA\n* Analyze RPC function arguments\n* Understand RPC structures\n* Reconstruct an IDL definition file\n</code></pre>\n <p>\n  The IDL code generated by mIDA can be, most of the time, recompiled with the MIDL compiler from Microsoft (midl.exe).\n </p>\n <p>\n  mIDA is freely distributed to the community by Tenable in the hope it will be useful to you and help research engineers to work more effectively on RPC programs. However, Tenable does not provide support for this tool and offers no guarantee regarding its use or output. Please read the end-user license agreement before using this program.\n </p>\n <p>\n  <img alt=\"Sample output of mIDA\" src=\"https://i.sstatic.net/7kWfI.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Remko",
            "time": "Mar 27, 2019 at 9:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What I found that fits my requirements is a free open source tool called\n  <a href=\"http://www.rpcview.org/\" rel=\"nofollow noreferrer\">\n   RpcView\n  </a>\n  , which can enumerate endpoints and interfaces from a selected process, list its corresponding procedures with their respective addresses in the process' address space, and decompile interfaces into idl files. It also works on x64.\n </p>\n <p>\n  One small detail is that by default it seems to refresh the process list every second, which causes it to lag quite harshly. To solve the problem I just had to set the refresh rate to manual from the options menu.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user25972",
            "time": "Mar 30, 2019 at 1:35",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use\n  <a href=\"https://github.com/akamai/akamai-security-research/tree/main/rpc_toolkit/pe_rpc_if_scraper\" rel=\"nofollow noreferrer\">\n   rpc_toolkit/pe_rpc_if_scraper\n  </a>\n  to statically parse interfaces in a binary file. Run the following command in Python:\n  <code>\n   python pe_rpc_scraper.py <binary>\n  </code>\n </p>\n <p>\n  Then you will get the output json file like the following:\n </p>\n <pre><code>{\n  \"RPC-Server.exe\": {\n    \"d6b1ad2b-b550-4729-b6c2-1651f58480c3\": {\n      \"number_of_functions\": 2,\n      \"functions_pointers\": [\n        \"0x1400016f0\",\n        \"0x1400017c0\"\n      ],\n      \"function_names\": [\n        \"func1\",\n        \"func2\"\n      ],\n      \"role\": \"server\",\n      \"flags\": \"0x6000000\",\n      \"interface_address\": \"0x14001d220\"\n    }\n  }\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "zeze",
            "time": "Nov 18, 2023 at 14:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}