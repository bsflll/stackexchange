{
    "title": "IDA Pro PowerPC Decompiler Plugin supporting Floating Point Instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/16249/ida-pro-powerpc-decompiler-plugin-supporting-floating-point-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I far I have been using\n  <a href=\"https://github.com/aerosoul94/snowman\" rel=\"nofollow noreferrer\">\n   Snowman\n  </a>\n  for\n  <code>\n   PowerPC\n  </code>\n  decompilation. It is bad though but better than nothing. However, right now it doesn't support floating point instructions. They are simply written down as inline assembly which is of course kinda useless since you already had that in the disassembly:\n </p>\n <pre><code>void RadiusFromBoundsSq() {\n    __asm__(\"lfs f10, 8(r3)\");\n    __asm__(\"lfs f5, (r3)\");\n    __asm__(\"frsp f11, f10\");\n    __asm__(\"lfs f6, (r4)\");\n    __asm__(\"frsp f10, f5\");\n    __asm__(\"frsp f12, f6\");\n    __asm__(\"lfs f13, 4(r3)\");\n    __asm__(\"fabs f11, f11\");\n    __asm__(\"lfs f8, 4(r4)\");\n    __asm__(\"frsp f0, f13\");\n    __asm__(\"frsp f8, f8\");\n    __asm__(\"lfs f9, 8(r4)\");\n    __asm__(\"fabs f12, f12\");\n    __asm__(\"frsp f13, f9\");\n    __asm__(\"fabs f8, f8\");\n    __asm__(\"fabs f0, f0\");\n    __asm__(\"fabs f13, f13\");\n    __asm__(\"fabs f10, f10\");\n    __asm__(\"fsubs f7, f8, f0\");\n    __asm__(\"fsubs f9, f13, f11\");\n    __asm__(\"fsubs f6, f12, f10\");\n    __asm__(\"fsel f8, f7, f8, f0\");\n    __asm__(\"fsel f11, f9, f13, f11\");\n    __asm__(\"fsel f0, f6, f12, f10\");\n    __asm__(\"fmuls f13, f8, f8\");\n    __asm__(\"fmadds f7, f0, f0, f13\");\n    __asm__(\"fmadds f1, f11, f11, f7\");\n    return;\n}\n</code></pre>\n <p>\n  Is there any \"better\" plugin for this task besides\n  <a href=\"https://www.hex-rays.com/products/decompiler/compare_ppc.shtml#6\" rel=\"nofollow noreferrer\">\n   <code>\n    HexRays\n   </code>\n  </a>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "hexrays",
        "powerpc"
    ],
    "user": "BullyWiiPlaza",
    "time": "Sep 3, 2017 at 7:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These days it turns out that\n  <a href=\"https://ghidra-sre.org\" rel=\"nofollow noreferrer\">\n   Ghidra\n  </a>\n  was released which is a good alternative to IDA. Unlike IDA, Ghidra and its decompilers are free so\n  <a href=\"https://www.reddit.com/r/ghidra/comments/kicxzf/can_i_decompile_powerpc_code\" rel=\"nofollow noreferrer\">\n   we're lucky to also receive a PowerPC decompiler\n  </a>\n  which is fairly powerful and it can handle floating point instructions as well.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "BullyWiiPlaza",
            "time": "Aug 23, 2022 at 13:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}