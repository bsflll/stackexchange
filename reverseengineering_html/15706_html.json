{
    "title": "IDA Pro - Applying function signatures",
    "link": "https://reverseengineering.stackexchange.com/questions/15706/ida-pro-applying-function-signatures",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have three files:\n </p>\n <ol>\n  <li>\n   ELF executable,\n  </li>\n  <li>\n   ELF dynamically linked library (\n   <code>\n    .so\n   </code>\n   ),\n  </li>\n  <li>\n   C headers file (\n   <code>\n    .h\n   </code>\n   ) with function signatures and related structures for that library.\n  </li>\n </ol>\n <p>\n  #1 imports a number of functions from #2.\n </p>\n <p>\n  Is there a way for me to leverage #3 to automatically apply signatures from #3 to:\n </p>\n <ol>\n  <li>\n   Imports in #1 in one instance of IDA?\n  </li>\n  <li>\n   Exports in #2 in another instance of IDA?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "linux",
        "c",
        "elf"
    ],
    "user": "pandasauce",
    "time": "Jun 28, 2017 at 9:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several functions in the SDK, in\n  <code>\n   typeinf.hpp\n  </code>\n  or\n  <code>\n   ida_typeinf.py\n  </code>\n  that could be of use here, with the python API being much easier to use.\n </p>\n <ul>\n  <li>\n   <code>\n    parse_decls\n   </code>\n   - for converting a header file to a til_t type library.\n   <ul>\n    <li>\n     this function seems to skip plain function declarations.\n    </li>\n    <li>\n     but does store typedefs by name.\n    </li>\n   </ul>\n  </li>\n  <li>\n   <code>\n    parse_decl\n   </code>\n   - for converting a single declaration to a\n   <code>\n    tinfo_t\n   </code>\n   object.\n   <ul>\n    <li>\n     this does work for function declarations, but loses the function name.\n    </li>\n   </ul>\n  </li>\n  <li>\n   <code>\n    get_named_type\n   </code>\n   - for looking up a type in the til_t.\n  </li>\n  <li>\n   <code>\n    apply_type\n   </code>\n   - for applying a type to a function.\n  </li>\n </ul>\n <p>\n  So you could either parse the name from the function declaration yourself, and then use\n  <code>\n   parse_decl\n  </code>\n  to parse each declaration seperately.\n </p>\n <p>\n  Or you could add\n  <code>\n   typedef\n  </code>\n  to the start of each declaration, so ida will store all your declarations,\n  <strong>\n   by name\n  </strong>\n  in a type libary.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "Sep 26, 2017 at 22:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try using File -> Load File -> Parse C Header File (Ctrl+F9). You might need to tweak some things in the header file.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "joxeankoret",
            "time": "Jun 28, 2017 at 9:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pandasauce",
                    "text": "<span class=\"comment-copy\">Thank you for your response. I have tried this and it did not work. IDA successfully parses the file. I can manually fix function signatures by telling IDA what the arguments are, including custom structure pointers. However, this is very time consuming and feels unnecessary. Is there a way for it to automatically or semi-automatically apply signatures from the header file to functions matched by name?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. that way is the feature described above. It does not parse complicated C constructs and as mentioned you may need to tweak the file to make it usable by IDA. You can write a script to do that.</span>",
                    "time": null
                },
                {
                    "user": "pandasauce",
                    "text": "<span class=\"comment-copy\">I managed to get first scenario to work using <code>tilib</code>. What changes would I need to make to the header file to get the second scenario to work, i.e. apply function signatures to the library file?</span>",
                    "time": null
                }
            ]
        }
    ]
}