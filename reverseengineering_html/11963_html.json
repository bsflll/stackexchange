{
    "title": "Pydbg setting registers without breakpoint?",
    "link": "https://reverseengineering.stackexchange.com/questions/11963/pydbg-setting-registers-without-breakpoint",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In pydbg, is it possible to set a register without having it hit a break point first? Consider the following example break point handler:\n </p>\n <pre><code>def handler_breakpoint(mdbg):\n  print \"[+]Hit breakpoint\"\n  mdbg.set_register(\"EIP\", 0)\n  return DBG_CONTINUE\n</code></pre>\n <p>\n  This code works, but if I call\n  <code>\n   mdbg.set_register(\"EIP\", 0)\n  </code>\n  (Note, outside the handler it would be\n  <code>\n   dbg.set_register(\"EIP\", 0)\n  </code>\n  ) from outside a break point handler it returns\n  <code>\n   pdx: [6] GetThreadContext(): The handle is invalid\n  </code>\n  . How could I write this?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "464",
    "tags": [
        "python",
        "thread",
        "register"
    ],
    "user": "Starwarsfan2099",
    "time": "Feb 7, 2016 at 13:53",
    "comments": [
        {
            "user": "user2823000",
            "text": "<html><body><span class=\"comment-copy\">\n What do you call \"outside a breakpoint\"? Either your program is not running and you cannot modify anything, or you program is launched and you have to stop at a breakpoint before being able to modify anything.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  changing the registers without an event is fundamentally not possible rethink and reformulate your query\n </p>\n <p>\n  if you do not want to do it in break-point handler  of any debugger you must suspend the process , Get the Thread's context and Set the thread's context and Resume the process\n </p>\n <p>\n  pydbg can do all this iirc in the script body out of break-point handler\n </p>\n <p>\n  <strong>\n   EDIT Added a Sample Script\n  </strong>\n </p>\n <pre><code>from pydbg import *\nfrom pydbg.defines import *\ndef handler_breakpoint (pydbg):\n    if pydbg.first_breakpoint:\n        return DBG_CONTINUE\ndef handler_access_violation (pydbg):\n    if pydbg.dbg.u.Exception.dwFirstChance:\n        print \"crashed and land here on FirstChance\"\n    else:\n        print \"crashed and land here on SecondChancee\"\n    return DBG_EXCEPTION_NOT_HANDLED\n\ndbg = pydbg()\ndbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)\ndbg.set_callback(EXCEPTION_ACCESS_VIOLATION, handler_access_violation)\ndbg.load(\"c:\\windows\\system32\\calc.exe\")\nprint \"pid of calc.exe is = %d\" % dbg.pid\ndbg.suspend_all_threads()\nfor thread_id in dbg.enumerate_threads():\n    thread_handle  = dbg.open_thread(thread_id)\n    thread_context = dbg.get_thread_context(thread_handle)\n    print \"eax = 0x%08x\" % thread_context.Eax\n    thread_context.Eax=0xdeadbeef\n    dbg.set_thread_context(thread_context,0,thread_id)\n    thread_context = dbg.get_thread_context(thread_handle)\n    print \"new eax = 0x%08x\" % thread_context.Eax\n    print \"yay we are going to crash now accessing random crap in eax\"  \ndbg.resume_all_threads()\npydbg.debug_event_loop(dbg)\n</code></pre>\n <p>\n  <strong>\n   executed\n  </strong>\n </p>\n <pre><code>:\\>python changereg.py\npid of calc.exe is = 1940\neax = 0x00b52d6c\nnew eax = 0xdeadbeef\nyay we are going to crash now accessing random crap in eax\ncrashed and land here on FirstChance\ncrashed and land here on SecondChancee\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Feb 8, 2016 at 8:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}