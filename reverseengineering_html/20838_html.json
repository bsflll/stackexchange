{
    "title": "How the CMP instruction uses condition flags?",
    "link": "https://reverseengineering.stackexchange.com/questions/20838/how-the-cmp-instruction-uses-condition-flags",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to figure out the behavior of conditional jumps (JE/JNE, JZ/JNZ) in the x86 instruction set familly.\n </p>\n <p>\n  Which condition flags\n  <code>\n   CMP\n  </code>\n  instruction sets and\n  <strong>\n   how\n  </strong>\n  , if the result is equal and if it is not? For example:\n </p>\n <ul>\n  <li>\n   <p>\n    <code>\n     CMP eax, 0\n    </code>\n    (true)\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     CMP eax, 0\n    </code>\n    (false)\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "22k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "PaHa",
    "time": "Mar 10, 2019 at 9:47",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n You could get that information from the first results from DuckDuckGo (or Google (or Bing)). Did you tried that?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PaHa",
            "text": "<html><body><span class=\"comment-copy\">\n Yes I did. (Google). Found a lot, what jumps read, but not exactly what CMP sets.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  CMP\n </code>\n sets all the flags based on the intermediate results of\n <code>\n  SUB\n </code>\n that it performs. read here:\n <a href=\"http://www.godevtool.com/GoasmHelp/usflags.htm\" rel=\"nofollow noreferrer\">\n  godevtool.com/GoasmHelp/usflags.htm\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PaHa",
            "text": "<html><body><span class=\"comment-copy\">\n (CMP EAX,EDX;set zero flag if eax=edx.) So only the zero flag and if true 1 and false 0. Tanks.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n read\n <code>\n  cmp\n </code>\n documentation first:\n <a href=\"https://www.felixcloutier.com/x86/cmp\" rel=\"nofollow noreferrer\">\n  <i>\n   The comparison is performed by subtracting the second operand from the first operand and then setting the status flags in the\n   <b>\n    same manner as the\n    <code>\n     SUB\n    </code>\n    instruction\n   </b>\n   .\n  </i>\n </a>\n . But that's not a good way to\n <a href=\"https://stackoverflow.com/q/33721204/995714\">\n  check whether a register is zero or not\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Furthermore, with the CMP instruction, the destination operand doesn't change. Just the flags.\n </p>\n <p>\n  Let me illustrate. Let's say\n  <code>\n   EAX = 00000005\n  </code>\n  and\n  <code>\n   EBX = 00000005\n  </code>\n  . If we do this arithmetic operation:\n </p>\n <p>\n  <code>\n   CMP EAX, EBX\n  </code>\n </p>\n <p>\n  What's happening, is in effect this:\n </p>\n <p>\n  <code>\n   EAX - EBX\n  </code>\n  ---->\n  <code>\n   00000005 - 00000005\n  </code>\n </p>\n <p>\n  Since the result would be\n  <code>\n   0\n  </code>\n  , but we don't change the destination operand in a CMP instruction, the zero flag is set to\n  <code>\n   1\n  </code>\n  (since it's true).\n </p>\n <p>\n  So, as we saw, depending on the result of the previous arithmetic operation, flags can be set accordingly:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/o4f30.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/o4f30.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "she_roar",
            "time": "Mar 23, 2019 at 18:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jim Driscoll",
                    "text": "<span class=\"comment-copy\">Presumably, where values are signed and of opposite signs (because the CPU doesn't have a way to distinguish signed from unsigned) that use of the C flag isn't true  - so 0xff &gt; 0x01 makes it also look like -1 &gt; 1. I expect in that case you'd check the S flag which is true if the result would be negative.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   CMP\n  </code>\n  instruction does internally a\n  <code>\n   SUB\n  </code>\n  and sets the flags accordingly.\n </p>\n <p>\n  So all flags that are set by a\n  <code>\n   SUB\n  </code>\n  are also set by\n  <code>\n   CMP\n  </code>\n  .\n </p>\n <p>\n  Namely the flags\n  <code>\n   SF\n  </code>\n  ,\n  <code>\n   ZF\n  </code>\n  ,\n  <code>\n   AF\n  </code>\n  ,\n  <code>\n   PF\n  </code>\n  , and\n  <code>\n   CF\n  </code>\n  are set.\n </p>\n <p>\n  This information is taken from the Intel manual for the processors (\n  <a href=\"https://software.intel.com/en-us/articles/intel-sdm\" rel=\"noreferrer\">\n   https://software.intel.com/en-us/articles/intel-sdm\n  </a>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Uwe Plonus",
            "time": "Mar 10, 2019 at 9:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}