{
    "title": "During debugging, is the process memory the same as the debugger's memory space?",
    "link": "https://reverseengineering.stackexchange.com/questions/8564/during-debugging-is-the-process-memory-the-same-as-the-debuggers-memory-space",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This post might be specific to IDA Pro, so bear that in mind.\n </p>\n <p>\n  I'm currently trying to write a plugin for debugging specifically one executable. I know that a certain object in the executable's process exists at 0xAB40C0 (it always exists there). Can I simply write object* obj = (object*)0xAB40C0; and then access the various members of it?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "239",
    "tags": [
        "ida",
        "debugging",
        "c"
    ],
    "user": "Lehona",
    "time": "Mar 26, 2015 at 16:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  No, the debugger (in whose process context your plugin is running) and the debuggee are two separate processes.\n </p>\n <p>\n  You would need to use\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553%28v=vs.85%29.aspx\" rel=\"nofollow\">\n   <code>\n    ReadProcessMemory()\n   </code>\n  </a>\n  (or its equivalent for your operating system) to read the debuggee's memory.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Mar 26, 2015 at 16:25",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the case of linux, debuggers typically use the ptrace API to inspect and modify the process space of the process being debugged. And no, they do not share the address space.\n </p>\n <p>\n  As a side note, dynamic binary instrumentation frameworks such as PIN do involve inserting itself into the process space of the binary being instrumented.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": null,
            "time": "Mar 28, 2015 at 1:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}