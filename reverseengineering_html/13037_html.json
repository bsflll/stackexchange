{
    "title": "Nonsensical disassembled ARM instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/13037/nonsensical-disassembled-arm-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been tracing through my binary and converting it to C code so I can understand it easily. As I am going through the instructions and functions, I keep stumbling upon code that don't make sense. \nFor example:\n </p>\n <pre><code>ROM:080004B8                 CMNNE.W         R4, #1\nROM:080004BC                 BEQ.W           loc_80007DE\n</code></pre>\n <p>\n  This code will never branch.\nAnother example:\n </p>\n <pre><code>STRB.W          R0, [SP,#0x18+var_18] @ where var_18 is -0x18\n</code></pre>\n <p>\n  Which is similar to indexing an array in C like this \"array[5-5]\". Why is this happening? Is this the disassembler? A form of obfuscated code that is trying to frustrate me? A poor compiler?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "397",
    "tags": [
        "ida",
        "arm"
    ],
    "user": "Tyler",
    "time": "Jul 15, 2016 at 13:50",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Is this code between functions ? Is it ARM or Thumb ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n It's been a while since I looked at ARM code, so I might be totally wrong - why are you saying your first example will never branch? if Z=1, CMNNE is not executed and BEQ branches; If Z=0, CMNNE is executed (testing R4) and BEQ would branch on the result.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tyler",
            "text": "<html><body><span class=\"comment-copy\">\n The first example is between functions and the second example is inside a function. It is Thumb. @VitalyOsipov you are correct. I have edited the post by removing that example.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tyler",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://pastebin.com/XS4kb0iV\" rel=\"nofollow noreferrer\">\n  Here\n </a>\n is a better example. A value from the stack is loaded to R0, shifted, and saved in R0 (the value in the stack does not get updated). The next line loads a different value from the stack which removes the shifted value from the line before. What is the point of these instructions that have no purpose?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n IDA does this for you - intentionally. The reason is it keeps track of modifications of the stack pointer, and yet attempts to keep the (relative!) addresses of local variables the same, Quite helpful actually.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To expand on Rad Lexus' comment, which describes the situation very well but may not be understandable without an example:\n </p>\n <p>\n  Within a function, the stack pointer, in most cases, isn't constant. It may change when parameters for a function/method/subroutine are pushed, when the programmer uses things like\n  <code>\n   alloca\n  </code>\n  , and for other reasons as well, depending on the compiler and processor.\n </p>\n <p>\n  This makes tracking the position of arguments and local variables quite hard. For example, code like\n  <code>\n   f(i++)\n  </code>\n  may result in something like\n </p>\n <pre><code>mov r0, [sp, #8]     ; read the variable\nmov [sp], r0          ; put it on the argument stack\nsub sp, sp, #4        ; adjust the stack pointer\nadd r0, r0, #1        ; calculate the ++\nmov [sp, #12], r0    ; write back result\n</code></pre>\n <p>\n  which is a version that makes the change to\n  <code>\n   sp\n  </code>\n  visible; normally, that change will be hidden in something like\n  <code>\n   stmfd sp!, {r0}\n  </code>\n </p>\n <p>\n  In such cases, it's quite difficult to see that the \"read\" and \"write\" operations access the same address in memory while the\n  <code>\n   sp\n  </code>\n  value has changed.\n </p>\n <p>\n  This is why decompilers like IDA assign names to those locations - as an example, let's assume in my example the variable is named\n  <code>\n   var_4\n  </code>\n  with a value of 4.\n </p>\n <p>\n  Now IDA can emit\n </p>\n <pre><code>mov r0, [sp, var_4+#4]     ; read the variable\nmov [sp, var_4+#8], r0     ; write back result\n</code></pre>\n <p>\n  with\n  <code>\n   var_4\n  </code>\n  hinting at \"the same variable\", and the\n  <code>\n   #4\n  </code>\n  /\n  <code>\n   #8\n  </code>\n  at the offset from\n  <code>\n   [sp]\n  </code>\n  that needs to be added to\n  <code>\n   var_4\n  </code>\n  in each of these cases.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jul 15, 2016 at 13:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}