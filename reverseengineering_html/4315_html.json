{
    "title": "How do Android reverse engineering tools extract packages/ package hierarchy present in Android apps?",
    "link": "https://reverseengineering.stackexchange.com/questions/4315/how-do-android-reverse-engineering-tools-extract-packages-package-hierarchy-pre",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been involved in disassembling Android apps using\n  <a href=\"https://code.google.com/p/smali/\" rel=\"noreferrer\">\n   baksmali\n  </a>\n  and dexpler. Whenever I disassemble an app, I find the packages and package hierarchy (that would have been available in development scenario) intact. For instance, when I disassemble a task manager app (MD5: 3377f8527479ab4e72bf9fa5eec62abe), I get the package hierarchy as shown in the figure below.\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Zrhkg.png\"/>\n  .\n </p>\n <p>\n  In this context, I have the following questions,\n </p>\n <ol>\n  <li>\n   Will this hierarchy of Java packages be preserved and retained while building apps. When we develop apps, of course, we use many packages and we put them in a hierarchy while we build the app. But, all the code written by developers will be converted into a single classes.dex file. Will the packages and package hierarchy information be retained in this classes.dex file or any other part of the apk file (like META-INF)?\n  </li>\n  <li>\n   If this information is not available from .dex, where does this come from? How does every disassembling/ decompiling tool manages to extract this package hierarchy?\n  </li>\n  <li>\n   Where to find documentation/ literature relevant to packages and package hierarchy in the app building process? I tried skimming thro' Android documentation in vain.\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "decompilation",
        "static-analysis",
        "android"
    ],
    "user": "Annamalai N",
    "time": "May 12, 2014 at 14:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, the package hierarchy is preserved in the dex file. To be more precise, if a class was named foo.bar.baz.foo.Myclass in the sourcecode, it's name will be foo.bar.baz.foo.Myclass in the .dex as well. Any \"package hierarchy\" will be derived from those class names.\n </p>\n <p>\n  If you want to know more about the .dex file format, the\n  <a href=\"http://source.android.com/devices/tech/dalvik/dex-format.html\" rel=\"nofollow\">\n   Dalvik Executable Format Reference\n  </a>\n  should contain everything you need.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "May 12, 2014 at 14:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Annamalai N",
                    "text": "<span class=\"comment-copy\">Thanks for the link and answer. In the dex documentation, I happen to see that \"<b>A FullClassName is a fully-qualified class name, including an optional package specifier followed by a required name</b>\". It seems like including the name of the package is NOT mandatory?</span>",
                    "time": null
                },
                {
                    "user": "Annamalai N",
                    "text": "<span class=\"comment-copy\">Also, it is mentioned in that document that the fully qualified class name is proceeded by the character 'L'. Is it correct to assume that's why we see 'Landroid/support/v4/widget' in the .smali file when the actual classes referred is android/support/v4/widget ?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The fast answer is that in Java, the\n  <em>\n   fully qualified name of the class\n  </em>\n  is the\n  <em>\n   actual\n  </em>\n  name of the class concatenated with its package.  To the classloader,\n  <code>\n   com.foo.Annamalai\n  </code>\n  is the name it will load at runtime.  This is also, subsequently why you can't have two classes of the same name\n  <em>\n   in the same package.\n  </em>\n </p>\n <p>\n  This will be a (semi) contrived instance, but lets pretend your app has two different logging frameworks, and you need to support both.\n </p>\n <pre><code>import java.util.logging.Logger;\nimport org.apache.log4j.Logger;\n</code></pre>\n <p>\n  If you try this, your compiler should barf, complaining that you have two classes with the same name.  Well, this version will work:\n </p>\n <pre><code>org.apache.log4j.Logger logger4j = org.apache.log4j.Logger.getLogger(DeleteMe.class);\njava.util.logging.Logger loggingLogger = java.util.logging.Logger.getLogger(DeleteMe.class.getName());\n</code></pre>\n <p>\n  Because of this package/class naming convention, it is trivial to extract the file structure of the application for reverse-engineering purposes, because in java the package name is specified to correlate to a file structure.\n </p>\n <p>\n  In a comment you asked about NOT using a package, well, if you did that then you would NEVER be able to use two classes of the same name--the compiler would never allow it.\n </p>\n <p>\n  The above example would turn into this:\n </p>\n <pre><code>Logger logger4j = Logger.getLogger(DeleteMe.class.getName());\nLogger loggingLogger = Logger.getLogger(DeleteMe.class.getName());\n</code></pre>\n <p>\n  Which\n  <code>\n   Logger\n  </code>\n  is the compiler going to pick if you have two on the classpath without package names?\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "avgvstvs",
            "time": "May 12, 2014 at 16:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Annamalai N",
                    "text": "<span class=\"comment-copy\">Thanks for the explanation. I get the perspective clearly now.  <code>it is trivial to extract the file structure of the application for reverse-engineering purposes, because in java the package name is specified to correlate to a file structure</code> - The same applies when reversing Android apps (even when they contain native code)? Correct me if I am wrong.</span>",
                    "time": null
                },
                {
                    "user": "avgvstvs",
                    "text": "<span class=\"comment-copy\">Yeah, Google still has to follow the JLS or Oracle will sue them.</span>",
                    "time": null
                },
                {
                    "user": "avgvstvs",
                    "text": "<span class=\"comment-copy\">One more thing which I didn't note, the biggest reason not to put everything in the \"default\" package (which means NO package name) is that it makes it possible to accidentally write a class that has the same name as another class in library code.  Meaning you'd get weird <code>Exceptions</code> and without reversing every library, may not figure out why, so package names buy you quite a bit of utility.</span>",
                    "time": null
                }
            ]
        }
    ]
}