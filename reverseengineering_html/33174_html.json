{
    "title": "Attaching into an x86 process in windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/33174/attaching-into-an-x86-process-in-windbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can I attach into an x86 process from windbg?\n </p>\n <p>\n  currently I am waiting for the process to load then I am breaking into wow64cpu!KiFastSystemCall to switch into x86 context and only then put bp to the instruction of interest, the problem is by the time I am doing it the instruction has already been executed.\nOther approached like sxe just doesn't work, is it because its x86 process or am I doing something wrong?\nI would appreciate a detailed answer about how to do it.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "110",
    "tags": [
        "debugging",
        "x86",
        "windbg",
        "breakpoint"
    ],
    "user": "Michael",
    "time": "Aug 21, 2024 at 18:53",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n use x86 version of windbg for x86 applications then you don't have to deal with wow also attaching means you are dealing with a running process so initialisation code would have been executed  try creating the process like windbg foo.exe to debug from beginning if that is what you mean in your query\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rotem.salinas",
            "text": "<html><body><span class=\"comment-copy\">\n Are you debugging the process from a kernel debugger? or just in a regular user-mode context?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael",
            "text": "<html><body><span class=\"comment-copy\">\n kernel debugger\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n If you are able to run ntsd in the target you can use ntsd -d to redirect your app to the kernel debugger. Search ntsd -d  in stack overflow under my nick like user:xxxcc ntsd -d you should hit several posts explaining how to do it\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try\n  <a href=\"https://shakreiner.com/posts/break-on-process-windbg/\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  , the code is in\n  <a href=\"https://github.com/shakreiner/windbg-scripts/blob/master/BreakOnProcess/BreakOnProcess.js\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  It basically puts a breakpoint on\n  <code>\n   nt!NtCreateUserProcess\n  </code>\n  and parses the args to check if the process name is the wanted target process.\n </p>\n <p>\n  And in case of the finding the target process it switches to the process context by using\n  <code>\n   .process /i <eprocess_address>\n  </code>\n  and then continuing the execution with\n  <code>\n   g\n  </code>\n  to break in the target process context.\n </p>\n <p>\n  Credits to my co-worker Shaked Reiner :)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "rotem.salinas",
            "time": "Sep 1, 2024 at 22:17",
            "is_accepted": true,
            "comments": []
        }
    ]
}