{
    "title": "Writing a file with radare2 `w`?",
    "link": "https://reverseengineering.stackexchange.com/questions/19882/writing-a-file-with-radare2-w",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Radare2 supports a\n  <code>\n   w\n  </code>\n  which writes a string.\n </p>\n <pre><code>w foobar             write string 'foobar'\n</code></pre>\n <p>\n  However, it doesn't seem to work for me,\n </p>\n <pre><code>$ touch foo\n\n$ radare2 ./foo\nw foobar\n</code></pre>\n <p>\n  The file\n  <code>\n   foo\n  </code>\n  remains empty. Am I supposed to flush or save?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 3,
    "views": "6k",
    "tags": [
        "radare2"
    ],
    "user": "Evan Carroll",
    "time": "Apr 16, 2019 at 1:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  TLDR\n </h2>\n <ul>\n  <li>\n   <code>\n    radare2\n   </code>\n   opens a file in\n   <em>\n    <code>\n     read-only mode\n    </code>\n    by default\n   </em>\n   . (see the manual\n   <code>\n    r2 -h\n   </code>\n   for further information.)\n  </li>\n  <li>\n   to allow\n   <em>\n    writing to a file\n   </em>\n   , start radare2 in\n   <code>\n    write mode\n   </code>\n   (\n   <code>\n    r2 -w file\n   </code>\n   ).\n  </li>\n  <li>\n   when in a\n   <code>\n    read-only session\n   </code>\n   already,\n   <code>\n    oo+\n   </code>\n   will\n   <em>\n    re-open the file\n   </em>\n   in\n   <code>\n    write\n   </code>\n   mode.\n  </li>\n  <li>\n   the\n   <code>\n    cache mode\n   </code>\n   (\n   <code>\n    e io.cache=true\n   </code>\n   ) mimics writing access but\n   <em>\n    changes in radare2 are not actually written to disk\n   </em>\n   .\n  </li>\n </ul>\n <h2>\n  Write Mode - Example\n </h2>\n <hr/>\n <ol>\n  <li>\n   Open the file\n   <code>\n    foo\n   </code>\n   in\n   <code>\n    write mode\n   </code>\n   :\n   <pre><code>$ r2 -w foo\n</code></pre>\n  </li>\n </ol>\n <hr/>\n <ol start=\"2\">\n  <li>\n   Print 32 bytes (with\n   <code>\n    px 32\n   </code>\n   ):\n   <pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n  </li>\n </ol>\n <p>\n  Note: The first 32 bytes (and the rest of the file) are empty.\n </p>\n <hr/>\n <ol start=\"3\">\n  <li>\n   <p>\n    Let's write \"Hello World!\" into the file:\n   </p>\n   <pre><code>[0x00000000]> w Hello World!\n</code></pre>\n  </li>\n  <li>\n   <p>\n    And print the 32 bytes again:\n   </p>\n   <pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 576f 726c 6421 ffff ffff  Hello World!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n  </li>\n </ol>\n <p>\n  Great! Now we can see that \"Hello World!\" is written to the file.\n </p>\n <hr/>\n <ol start=\"5\">\n  <li>\n   Let's quit radare2 and\n   <code>\n    cat\n   </code>\n   the file to see the content:\n   <pre><code> [0x00000000]> q\n</code></pre>\n   <pre><code>$ cat foo\nHello World!\n</code></pre>\n  </li>\n </ol>\n <hr/>\n <h2>\n  Cache Mode - Example\n </h2>\n <ol>\n  <li>\n   Open the file\n   <code>\n    foo\n   </code>\n   in write mode:\n   <pre><code>$ r2 foo\n</code></pre>\n  </li>\n  <li>\n   Print the first 32 bytes@\n   <pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 576f 726c 6421 ffff ffff  Hello World!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n  </li>\n  <li>\n   Activate 'cache mode`:\n   <pre><code>[0x00000000]> e io.cache=true\n</code></pre>\n  </li>\n  <li>\n   Make some changes in radare2:\n   <pre><code>[0x00000000]> w Goodbyte World! :)\n</code></pre>\n  </li>\n  <li>\n   Proof that radare2 mimicked writing as if in\n   <code>\n    write mode\n   </code>\n   :\n   <pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  476f 6f64 6279 7465 2057 6f72 6c64 2120  Goodbyte World!\n0x00000010  3a29 ffff ffff ffff ffff ffff ffff ffff  :)..............\n</code></pre>\n  </li>\n  <li>\n   Quit radare2:\n   <pre><code>[0x00000000]> q\n</code></pre>\n  </li>\n  <li>\n   Examine actual file contents:\n   <pre><code>$ cat foo\nHello World!\n</code></pre>\n   Note: The file didn't change! That's the effect of\n   <code>\n    cache mode\n   </code>\n   .\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "7",
            "user": "sudhackar",
            "time": "Nov 10, 2020 at 3:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">What does <code>-w</code> do outside of write mode?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">Well, it allows radare2 to write to the file. i.e modifying the original file. This is risky and should be careful while using it. While working with write-mode you can work regularly with radare2 as you are used to. It doesn't change a thing. Also, please see my edition the the answer -- regardless your comment, I elaborated more :)</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">The follow up question is though what does <code>w foobar</code> do if radare opens the file in read-only mode? Is it just a noop?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">yup. Not doing a thing. I suggest you explore the powers of the <code>w</code> command and subcommands of radare2. I use it on a daily basis - check out <code>w?</code> for commands like <code>wtf</code>, <code>wox</code>, <code>wopD</code>...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just to update @Megabeets answer.\n </p>\n <p>\n  When you start with an empty file (created by\n  <code>\n   touch\n  </code>\n  ), the\n  <code>\n   w\n  </code>\n  command will not work by default even if the\n  <code>\n   r2\n  </code>\n  will be started in\n  <code>\n   write\n  </code>\n  mode. The missing information is, in that case, the mapping\n </p>\n <pre><code>[0x00000000]> om\n[0x00000000]\n</code></pre>\n <p>\n  Returns an empty result. Apart from listing, the\n  <code>\n   om\n  </code>\n  command can also be used to create the mapping:\n </p>\n <pre><code>Usage: om[-] [arg]   # map opened files\n| om                                       list all defined IO maps\n...\n| om fd vaddr [size] [paddr] [rwx] [name]  create new io map\n...\n</code></pre>\n <p>\n  In order to do the mapping, one needs to specify (for example) the following command\n </p>\n <pre><code>[0x00000000]> om 3 0x0 12\n[0x00000000]> om\n 1 fd: 3 +0x00000000 0x00000000 - 0x0000000b rwx\n</code></pre>\n <p>\n  That will create, for the file description 3, a 12 bytes in size mapping starting from an address 0x0.\n </p>\n <p>\n  After that\n  <code>\n   w\n  </code>\n  will work:\n </p>\n <pre><code>[0x00000000]> w Hello world!\n[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 776f 726c 6421 ffff ffff  Hello world!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n[0x00000000]>\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Nov 18, 2018 at 14:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Create an input/output mapping to allow writing to a non-mapped file\n </h1>\n <p>\n  To\n  <strong>\n   allow writing\n  </strong>\n  up to\n  <code>\n   64 byte\n  </code>\n  starting at\n  <code>\n   offset 0x00000000\n  </code>\n  , map changes in radare2\n  <strong>\n   to\n   <code>\n    file descriptor 3\n   </code>\n  </strong>\n  (the file opened in radare2).\n </p>\n <pre><code>[0x00000000]> om 3 0x0 64\n[0x00000000]> om\n1 fd: 3 +0x00000000 0x00000000 - 0x0000000b rwx\n</code></pre>\n <h2>\n  Explanation\n </h2>\n <p>\n  <strong>\n   An empty file\n  </strong>\n  (as created by\n  <code>\n   touch\n  </code>\n  )\n  <strong>\n   has no input/output mappings\n  </strong>\n  (even when opened with in\n  <code>\n   write mode\n  </code>\n  ).\nTo confirm no region has been mapped, you can list all defined IO maps with the radare2-command\n  <code>\n   om\n  </code>\n  .)\n </p>\n <p>\n  To create an i/o-mapping use\n  <code>\n   om\n  </code>\n  with parameters:\n </p>\n <blockquote>\n  <p>\n   om fd vaddr [size] [paddr] [rwx] [name]  create new io map\n  </p>\n </blockquote>\n <h1>\n  Example\n </h1>\n <pre>radare2 -w test_file\n -- What has been executed cannot be unexecuted\n[0x00000000]> w This won't be written anywhere, because no mapping exists.\n[0x00000000]> om\n[0x00000000]> om 3 0 64\n[0x00000000]> om\n 1 fd: 3 +0x00000000 0x00000000 - 0x0000003f rwx \n[0x00000000]> w Hello World!\n[0x00000000]> V\n</pre>\n <p>\n  <a href=\"https://i.sstatic.net/L4ksf.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"hexview of file after mapping and writing\" src=\"https://i.sstatic.net/L4ksf.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Semnodime",
            "time": "Nov 9, 2020 at 2:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}