{
    "title": "Problem finding return address for shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/8504/problem-finding-return-address-for-shellcode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Howdy guys and ghouls,\n </p>\n <p>\n  I've got a classic b0f, in fact it's the protostar stack5 exercise\n </p>\n <p>\n  <a href=\"https://exploit-exercises.com/protostar/stack5/\" rel=\"nofollow\" title=\"link to stack 5\">\n   link to stack5 code\n  </a>\n </p>\n <p>\n  Now I have the buffer + shellcode running up to overwriting EIP and I need to provide the address to overflow EIP. What's the right way of deducing the return address? I've tried ESP - len(shellcode) but this doesn't seem to work.\n </p>\n <p>\n  How do you go about calculating the right return address (the more precise the better)?\n </p>\n <p>\n  GDB related examples appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "15k",
    "tags": [
        "gdb",
        "buffer-overflow"
    ],
    "user": "LordGiveMeEIP",
    "time": "Mar 19, 2015 at 23:35",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n This question might be better asked at\n <a href=\"http://security.stackexchange.com/\">\n  security.stackexchange.com\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user2823000",
            "text": "<html><body><span class=\"comment-copy\">\n overflow EIP? you're sure you're not mixing register names?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Nothing easier than that.\n  <code>\n   gdb\n  </code>\n  the executable, set a breakpoint at\n  <code>\n   main\n  </code>\n  , have gdb print your buffer.\n </p>\n <pre><code>$ gdb /opt/protostar/bin/stack5\n(gdb) break main\nBreakpoint 1 at 0x80483cd: file stack5/stack5.c, line 10.\n(gdb) run\nStarting program: /tmp/stack5 \n\nBreakpoint 1, main (argc=1, argv=0xffffd674) at stack5/stack5.c:10\n10  stack5/stack5.c: No such file or directory.\n(gdb) print &buffer\n$1 = (char (*)[64]) 0xbffff838\n(gdb) \n</code></pre>\n <p>\n  So, if your shellcode starts at byte 0 of the buffer, you want to overwrite the saved EIP on the stack with\n  <code>\n   0xbffff838\n  </code>\n  .\n </p>\n <p>\n  In fact, to make your exploit independent from small changes in the program (one more local variable, or one less ...) i'd fill the buffer with 32\n  <code>\n   nop\n  </code>\n  s (\n  <code>\n   0x90\n  </code>\n  ) and put my shellcode behind those\n  <code>\n   nop\n  </code>\n  s. This still leaves you with 32 bytes for the shellcode, which should be plenty. Then, jump to\n  <code>\n   0xbffff848\n  </code>\n  which is 16 bytes into the nops, and shifting them around by a few bytes won't hurt you anymore.\n </p>\n <p>\n  At the end, instead of calculating how many bytes between the end of the buffer and the saved\n  <code>\n   EIP\n  </code>\n  , i'd just repeat the buffer address a few times, so you can be sure EIP gets overwritten; you don't really care about whatever else is there.\n </p>\n <p>\n  So to sum it up, your input should be\n </p>\n <pre><code>0x90 (32 times)\nyour shellcode\nas many 0x90's as you need to fill the buffer to 64 bytes\n0x48 0xf8 0xff 0xbf  repeated about 10 times.\n</code></pre>\n <p>\n  Remember to swap the\n  <code>\n   EIP\n  </code>\n  bytes because we're on a little endian machine.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "Mar 20, 2015 at 18:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Aaron Esau",
                    "text": "<span class=\"comment-copy\"><code>(gdb) print &amp;buffer</code> returns <code>No symbol \"buffer\" in current context.</code></span>",
                    "time": null
                },
                {
                    "user": "Micha≈Ç Szkudlarek",
                    "text": "<span class=\"comment-copy\">@Guntram Blohm How to make sure that each time you run program, you have the same return address? Does it change with each execution of program?</span>",
                    "time": null
                }
            ]
        }
    ]
}