{
    "title": "How to get a full execution trace with Python gdb?",
    "link": "https://reverseengineering.stackexchange.com/questions/11583/how-to-get-a-full-execution-trace-with-python-gdb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While trying to answer\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11578/reversing-self-modifying-code/11579\">\n   another question\n  </a>\n  , I tried to set-up a Python script to automatize the extraction of an assembly execution trace. But, I am really not satisfied of this script and I would like to know how to improve it.\n </p>\n <p>\n  First, here is the script:\n </p>\n <pre><code>import gdb\n\ngdb.execute('break main')\ngdb.execute('run')\n\nwhile (True):\n    gdb.write (gdb.execute('x /i $pc', to_string=True).rstrip('\n'), gdb.STDOUT)\n    gdb.execute('stepi', to_string=False)\n    gdb.flush ()\n</code></pre>\n <p>\n  Then, just execute:\n </p>\n <pre><code>$> gdb -x ./script.py ./main 1> log.txt\n</code></pre>\n <p>\n  The problems that I would like to solve are as follow:\n </p>\n <ul>\n  <li>\n   <p>\n    First, the\n    <code>\n     while(True)\n    </code>\n    is definitely not satisfactory. I would like to stop or suspend the loop when a breakpoint or an exit is reached.\n   </p>\n  </li>\n  <li>\n   <p>\n    Also, the way we export the list of instructions outside of\n    <code>\n     gdb\n    </code>\n    is not really satisfactory. Saving it to a file would be much better than having to redirect\n    <code>\n     stdout\n    </code>\n    to a file.\n   </p>\n  </li>\n  <li>\n   <p>\n    Finally, be able to interact with the software, feeding it through\n    <code>\n     stdin\n    </code>\n    would also be something we want.\n   </p>\n  </li>\n </ul>\n <p>\n  So, if you know how to improve this script in any manner, I would be interested.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "perror",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "langlauf.io",
            "text": "<html><body><span class=\"comment-copy\">\n Why don't you use PIN, valgrind, or DynamoRio?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Why not use\n <code>\n  gdb\n </code>\n if it is enough ? Moreover, PIN is for Intel architectures only, DynamoRio is not packaged for Debian, and Valgrind execution is emulated and may be biaised.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "<html><body><span class=\"comment-copy\">\n Do you see an easy way how your script could not only log the instructions but also the memory accesses (read and write) including the accessed values?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://stackoverflow.com/questions/8841373/displaying-each-assembly-instruction-executed-in-gdb\" title=\"displaying each assembly instruction executed in gdb\">\n  stackoverflow.com/questions/8841373/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your question really seems to be \"How to get an instruction trace with GDB\".  The use of Python appears to be incidental, except that you're using Python\n  <em>\n   inside\n  </em>\n  of GDB.\n </p>\n <p>\n  GDB has native support for instruction tracing, via the\n  <code>\n   record\n  </code>\n  command.  Using the command\n  <code>\n   record full\n  </code>\n  will record all changes to the process's state, and even allow reverse debugging (i.e. backward-stepping and replay).\n </p>\n <p>\n  You can find more information here:\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Process-Record-and-Replay.html\" rel=\"noreferrer\">\n   https://sourceware.org/gdb/onlinedocs/gdb/Process-Record-and-Replay.html\n  </a>\n </p>\n <p>\n  Separately, if you\n  <em>\n   would\n  </em>\n  like to perform single-stepping and instruction tracing with Python-inside-GDB, your best bet is to use the\n  <code>\n   Breakpoint\n  </code>\n  class and use\n  <code>\n   internal\n  </code>\n  breakpoints which do not halt the UI.  On architectures with variable-width instructions (i386, amd64) you will need to calculate the size of the current instruction.  You will also need to resolve all jump and calls targets.\n </p>\n <p>\n  If you look at the GDB source code you'll see how this all works in the event loop, and it is not exposed to the Python API.  Search for\n  <code>\n   STEP_OVER_NONE\n  </code>\n  which is used for the\n  <code>\n   stepi\n  </code>\n  instruction (step exactly one machine instruction).\n </p>\n <p>\n  If you're so inclined, you\n  <em>\n   can\n  </em>\n  do this in GDB with the\n  <code>\n   gdb.Breakpoint\n  </code>\n  and\n  <code>\n   gdb.FinishBreakpoint\n  </code>\n  types.  However, you end up needing to parse instruction widths (on variable-width instruction ISAs like x86), and extract jump and call targets.  GDB's Python API does not have any support for a single-step breakpoint, or resolving what the next instruction address will be.  You can do both of those things pretty easily with Capstone and Unicorn.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Zach Riggle",
            "time": "Mar 22, 2016 at 18:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ciro Santilli OurBigBook.com",
                    "text": "<span class=\"comment-copy\">Note however that <code>gdb record</code> has some major limitations currently, e.g. no AVX: <a href=\"https://stackoverflow.com/questions/43750603/gdb-reverse-debugging-avx2\" title=\"gdb reverse debugging avx2\">stackoverflow.com/questions/43750603/gdb-reverse-debugging-avx2</a></span>",
                    "time": null
                }
            ]
        }
    ]
}