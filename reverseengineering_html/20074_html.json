{
    "title": "Get Multiple Function Names for One Address in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/20074/get-multiple-function-names-for-one-address-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to get a complete list of symbol names in IDA. All functions that return names operate primarily around looking at particular addresses and there corresponding entries in the symbol table, instead of looking at all the entries of the symbol table itself.\n </p>\n <p>\n  This is okay until you have symbols that are at the same address, such as constructors and destructors for a class\n  <code>\n   C1\n  </code>\n  and\n  <code>\n   C2\n  </code>\n  ,\n  <code>\n   D1\n  </code>\n  and\n  <code>\n   D2\n  </code>\n  (\n  <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-special-ctor-dtor\" rel=\"nofollow noreferrer\">\n   as described in the C++ ABI\n  </a>\n  ). The traditional methods\n  <code>\n   get_func_name(ea)\n  </code>\n  and\n  <code>\n   GetFunctionName(ea)\n  </code>\n  don't work, because they only give one result for a given address.\n </p>\n <p>\n  If multiple symbol names point to the same effective address, how can I get all of those symbol names?\n </p>\n <p>\n  <strong>\n   Edit:\n  </strong>\n </p>\n <p>\n  Consider the following code:\n </p>\n <pre><code>class apple{\n    public:\n        apple(int a);\n        ~apple();\n};\n\napple::apple(int a){}\napple::~apple(){}\n\nint main(){\n    apple a = apple(1);\n    return 0;\n}\n</code></pre>\n <p>\n  Compiling this with\n  <code>\n   g++ -o apple apple.cpp\n  </code>\n  to get our executable and then running\n  <code>\n   readelf -s\n  </code>\n  gives us, among other entries:\n </p>\n <pre><code>53: 0000000000400554    11 FUNC    GLOBAL DEFAULT   14 _ZN5appleD1Ev\n57: 0000000000400546    14 FUNC    GLOBAL DEFAULT   14 _ZN5appleC1Ei\n65: 0000000000400546    14 FUNC    GLOBAL DEFAULT   14 _ZN5appleC2Ei\n70: 0000000000400554    11 FUNC    GLOBAL DEFAULT   14 _ZN5appleD2Ev\n</code></pre>\n <p>\n  Notice how\n  <code>\n   C1\n  </code>\n  and\n  <code>\n   C2\n  </code>\n  have the same address.\n </p>\n <p>\n  Now, using IDAPython, we can use\n  <code>\n   idautils.Names()\n  </code>\n  (as suggested) or any of the other methods previously discussed, in code like this:\n </p>\n <pre><code>import idautils\nfor name in idautils.Names():\n    print name\n</code></pre>\n <p>\n  and we get results looking like, among other information that's not relevant, this:\n </p>\n <pre><code>(4195654L, '_ZN5appleC2Ei')\n(4195668L, '_ZN5appleD2Ev')\n</code></pre>\n <p>\n  Notice how it only finds the\n  <code>\n   C2\n  </code>\n  and\n  <code>\n   D2\n  </code>\n  constructor / destructor, but not\n  <code>\n   C1\n  </code>\n  and\n  <code>\n   D1\n  </code>\n  . Is it possible to 'find' the\n  <code>\n   C1\n  </code>\n  and\n  <code>\n   D1\n  </code>\n  constructor / destructor with IDA?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "785",
    "tags": [
        "ida",
        "idapython",
        "elf"
    ],
    "user": "theTheodidact",
    "time": "Dec 10, 2018 at 13:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA, while loading ELF file, will choose only one name and use if for specific address, because there's no way for IDA to have multiple names for on address. So you'll have to invent something to extend IDA loader for elf files, to make it somehow store the alternative names for the address.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Anton Kukoba",
            "time": "Dec 10, 2018 at 14:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "theTheodidact",
                    "text": "<span class=\"comment-copy\">Well that's a bummer.. thanks for the answer though! It's helpful to know there isn't a way forward apart from extending the loader.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Maybe going the other way might be a workaround/solution?\n </p>\n <p>\n  You can enumerate all names with\n  <code>\n   idautils.Names()\n  </code>\n  which returns a list of tuples\n  <code>\n   (ea, name)\n  </code>\n  . Then you just filter for the function address and have all possible names for that location I assume.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Dec 9, 2018 at 2:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "theTheodidact",
                    "text": "<span class=\"comment-copy\">Nice idea, but still doesn't work--see edit with code and results example.</span>",
                    "time": null
                }
            ]
        }
    ]
}