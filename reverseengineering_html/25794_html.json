{
    "title": "What does xchg means when accessing array element?",
    "link": "https://reverseengineering.stackexchange.com/questions/25794/what-does-xchg-means-when-accessing-array-element",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have ASM code of some Windows *.exe in IDA:\n </p>\n <pre><code>mov     rax, [rbx+10h]\nmov     ecx, edx\nxor     edx, edx\nxchg    rdx, [rax+rcx*8]\n</code></pre>\n <p>\n  Which is decompiled to pseudocode to\n </p>\n <pre><code>_RAX = this->m_someMemoryPool;\n_RCX = v4;\n_RDX = 0i64;\n__asm { xchg    rdx, [rax+rcx*8] }\n</code></pre>\n <p>\n  If there won't be any memory barries, code would look like this\n </p>\n <pre><code>void* _RDX = m_someMemoryPool[v4];\n</code></pre>\n <p>\n  But I'm wondering, what does\n  <code>\n   xchg\n  </code>\n  means here. Is it equivalent to\n </p>\n <pre><code>void* _RDX = NULL;\nInterlockedExchange(&_RDX, m_someMemoryPool[v4]);\n</code></pre>\n <p>\n  ? Or there is more complicated synchronization construction should be used?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "218",
    "tags": [
        "ida",
        "hexrays",
        "x86-64"
    ],
    "user": "yudjin",
    "time": "Sep 1, 2020 at 18:21",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<html><body><span class=\"comment-copy\">\n Are you are talking about the Microsoft Windows InterlockedExchange function which sets a  variable to the specified value as an atomic operation?  If so, then yes it is functionally equivalent. The XCHG instruction is implicitly bus-locked regardless of the absence of a LOCK prefix because of the access to a memory location.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  here is the sample code that will show both the constructs if there is an atomic exchange  requirement you use the api or intrinsc provided\nelse simply assign\n </p>\n <p>\n  source\n </p>\n <pre><code>#include <stdio.h>\n#include <windows.h>\n#include <intrin.h>\n\nlong tmp[10] = {NULL};\nlong *m_someMemoryPool[10] ={NULL};\n\n\nint main (void) {\n    tmp[0] = 0xbee5deed;\n    long foo =0xbee5dead;\n    m_someMemoryPool[0] = &tmp[0];\n    printf(\"%p = %x\n\" , m_someMemoryPool[0] , *(int *)(m_someMemoryPool[0]));\n    _InterlockedExchange( m_someMemoryPool[0], foo);\n    printf(\"%p = %x\n\" , m_someMemoryPool[0] , *(int *)(m_someMemoryPool[0]));\n} \n</code></pre>\n <p>\n  compiled with   vs2017 community as x86 with\n </p>\n <pre><code>cl /Zi /W4 /O1 /EHsc /analyze /nologo xchg.cpp /link /release\nxchg.cpp\n</code></pre>\n <p>\n  executed\n </p>\n <pre><code>xchg.exe\n013499D0 = bee5deed\n013499D0 = bee5dead\n</code></pre>\n <p>\n  disassembled\n </p>\n <pre><code>cdb -c \"uf xchg!main;q\" xchg.exe | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command 'uf xchg!main;q'\nxchg!main:\n01301029 56              push    esi\n0130102a b9eddee5be      mov     ecx,0BEE5DEEDh    <<<<<<<<<<<<<<<<\n0130102f b8d0993401      mov     eax,offset xchg!tmp (013499d0)\n01301034 51              push    ecx\n01301035 50              push    eax\n01301036 be90013401      mov     esi,offset xchg!`string' (01340190)\n0130103b 890dd0993401    mov     dword ptr [xchg!tmp (013499d0)],ecx\n01301041 56              push    esi\n01301042 a3f8993401      mov     dword ptr [xchg!m_someMemoryPool (013499f8)],eax\n01301047 e821000000      call    xchg!printf (0130106d)\n0130104c a1f8993401      mov     eax,dword ptr [xchg!m_someMemoryPool (013499f8)]\n01301051 b9addee5be      mov     ecx,0BEE5DEADh\n01301056 8708            xchg    ecx,dword ptr [eax]  <<<<<<<<<<<<<\n01301058 a1f8993401      mov     eax,dword ptr [xchg!m_someMemoryPool (013499f8)]\n0130105d ff30            push    dword ptr [eax]\n0130105f 50              push    eax\n01301060 56              push    esi\n01301061 e807000000      call    xchg!printf (0130106d)\n01301066 83c418          add     esp,18h\n01301069 33c0            xor     eax,eax\n0130106b 5e              pop     esi\n0130106c c3              ret\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 3, 2020 at 10:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}