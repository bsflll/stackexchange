{
    "title": "PE ImageBase presence in PDB",
    "link": "https://reverseengineering.stackexchange.com/questions/31872/pe-imagebase-presence-in-pdb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is\n  <code>\n   ImageBase\n  </code>\n  of a PE binary present in its PDB or can it only be retrieved from the binary?\n </p>\n <p>\n  I have studied both\n  <a href=\"https://github.com/microsoft/microsoft-pdb\" rel=\"nofollow noreferrer\">\n   Microsoft's PDB sources\n  </a>\n  and\n  <a href=\"https://llvm.org/docs/PDB/index.html\" rel=\"nofollow noreferrer\">\n   LLVM docs\n  </a>\n  without much luck finding it.\n </p>\n <p>\n  In the\n  <a href=\"https://llvm.org/docs/PDB/DbiStream.html#optional-debug-header-stream\" rel=\"nofollow noreferrer\">\n   DBI stream\n  </a>\n  there exist section headers with section RVAs, but I couldn't find any trace of their corresponding VAs or the base address itself.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "112",
    "tags": [
        "pe",
        "address",
        "pdb"
    ],
    "user": "mimak",
    "time": "May 15, 2023 at 13:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I believe this information is not stored within the PDB files in any recent versions.\n </p>\n <p>\n  Microsoft's\n  <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/debug-interface-access-sdk?view=vs-2022\" rel=\"nofollow noreferrer\">\n   DIA SDK\n  </a>\n  used for dumping information contained in PDB files does provide a method named\n  <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiasymbol-get-virtualaddress?view=vs-2022\" rel=\"nofollow noreferrer\">\n   <code>\n    get_virtualAddress\n   </code>\n  </a>\n  (as opposed to\n  <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiasymbol-get-relativevirtualaddress?view=vs-2022\" rel=\"nofollow noreferrer\">\n   <code>\n    get_relativeVirtualAddress\n   </code>\n  </a>\n  ) which should, in theory, return the real virtual address of a static symbol (segment, section, frame data etc.), however both of these methods currently return the same value (RVA) in all test cases I've tried. The implementations of two methods\n  <em>\n   are\n  </em>\n  different though, suggesting that there could be some use cases where the VAs are in fact stored within the data.\n </p>\n <p>\n  Keep in mind that the PDB format dates back to 90s, so if I had to guess I'd say that the actual VA's were contained within PDB files back before ASLR was introduced. This is, of course, only speculation on my part.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "ynwarcs",
            "time": "May 16, 2023 at 11:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">That's what I assumed too and instead extracted the imagebase directly from binary with IDAPython, thanks</span>",
                    "time": null
                }
            ]
        }
    ]
}