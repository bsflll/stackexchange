{
    "title": "Automating a crackme solving process",
    "link": "https://reverseengineering.stackexchange.com/questions/19390/automating-a-crackme-solving-process",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Let's say we have a simple crackme, which asks for a password. After verifying it,\n  <code>\n   eax\n  </code>\n  will contain\n  <code>\n   1\n  </code>\n  if it is correct, and\n  <code>\n   0\n  </code>\n  otherwise. Is there a way (I am interested both in Linux and Windows) for automating the following:\n </p>\n <ol>\n  <li>\n   Load executable\n  </li>\n  <li>\n   Put breakpoint at a known address\n  </li>\n  <li>\n   Provide a password as input for the executable\n  </li>\n  <li>\n   When reaching the breakpoint set\n   <code>\n    eax\n   </code>\n   to\n   <code>\n    1\n   </code>\n  </li>\n  <li>\n   Save any output of the executable\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "631",
    "tags": [
        "debuggers",
        "crackme",
        "automation"
    ],
    "user": "robert",
    "time": "Sep 18, 2018 at 18:02",
    "comments": [
        {
            "user": "Twifty",
            "text": "<html><body><span class=\"comment-copy\">\n There are too many variables for an automated process. In the past I've extracted the asm I'm interested in and added it inline to a c/c++ app. Another method would be to load the binary from c/c++ and call the functions directly, much like you would do with a dll.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n This question is equivalent to \"do you know any scriptable debugger\"...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "robert",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, it may be equivalent to \"do you know any scriptable debugger\"...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user22970",
            "text": "<html><body><span class=\"comment-copy\">\n If you will automate stuff on linux, note that ptrace will read/write data as 64 bit on 64 bit systems, not 32 bit. that means you should be carful with a code you reuse that was originally written to 32 bit, it might need modifications\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  windbg in windows and gdb in linux both are capable of executing scripts to automate tasks\n </p>\n <p>\n  what you ask should be doable fairly easily in both of the debuggers\n </p>\n <p>\n  here is a demeo for windbg\n </p>\n <p>\n  source for a simple crackme that takes a password\n </p>\n <pre><code>:\\>cat simcram.cpp\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint checkpass(char *pass) {\n    return strcmp(\"goodboy\" , pass);\n}\nint main(int argc , char *argv[] ) {\n    if(argc != 2 ) {\n        printf(\"usage %s password\n\" , argv[0]);\n        exit(0);\n    }\n    int res = checkpass(argv[1]);\n    if(res == 0 ) {\n        printf(\"please proceeed to vault\n\");\n    } else {\n        printf(\"access denied incorrect password\n\");\n    }\n    return res;\n}\n</code></pre>\n <p>\n  executing directly on console\n </p>\n <pre><code>:\\>simcram.exe\nusage simcram.exe password\n\n:\\>simcram.exe foobar\naccess denied incorrect password\n\n:\\>simcram.exe goodboy\nplease proceeed to vault\n</code></pre>\n <p>\n  a scripted execution that would set eax to 0 irresepective on any password\n </p>\n <pre><code>:\\>cdb -c \"g simcram!checkpass;gu;r eax= 0;g;q\" simcram.exe abracadabragiligilichoo\n\nMicrosoft (R) Windows Debugger Version 10.0.16299.15 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nCommandLine: simcram.exe abracadabragiligilichoo\n\n\nntdll!LdrpDoDebuggerBreak+0x2c:\n77b205a6 cc              int     3\n0:000> cdb: Reading initial command 'g simcram!checkpass;gu;r eax= 0;g;q'\n\nplease proceeed to vault  <<<<<<<<<<<<<<<<<\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 18, 2018 at 18:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If the number of instructions executed is proportional to the number of characters correct (i.e, maybe it's a simple byte-by-byte strcmp), then you could use instrumentation tools like\n  <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow noreferrer\">\n   Pintool\n  </a>\n  to count the number of instructions executed, and use that to brute-force the password byte-by-byte.\n  <a href=\"https://github.com/mattfeng/hsf/tree/master/2016/isengard_fixed\" rel=\"nofollow noreferrer\">\n   Here's\n  </a>\n  an example of that.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user464014",
            "time": "Sep 22, 2018 at 20:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}