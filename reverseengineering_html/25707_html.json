{
    "title": "What should I learn in order to reverse elf64 binary files",
    "link": "https://reverseengineering.stackexchange.com/questions/25707/what-should-i-learn-in-order-to-reverse-elf64-binary-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm a little confused. I am using a Linux based system (Ubuntu), 64-bit. and I want to start and reverse\n  <code>\n   64elf\n  </code>\n  binary files, but there is a lot of things I want to know before. just to be clear, If I have\n  <code>\n   64bit\n  </code>\n  computer, I need to learn\n  <code>\n   x64\n  </code>\n  assembly? What's the best assembler for my platform (I'm currently using\n  <code>\n   nasm\n  </code>\n  )?\n </p>\n <p>\n  The reason I'm asking that is because I don't want to learn assembly in the wrong way, which will not help me.\n </p>\n <hr/>\n <p>\n  By the way, is learning\n  <a href=\"https://www.youtube.com/playlist?list=PLetF-YjXm-sCH6FrTz4AQhfH6INDQvQSn\" rel=\"nofollow noreferrer\">\n   <code>\n    this\n   </code>\n  </a>\n  tutorial is good for my platform?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "462",
    "tags": [
        "assembly",
        "binary-analysis"
    ],
    "user": "Earn reputation and badges",
    "time": "Aug 19, 2020 at 19:51",
    "comments": [
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n If you want to learn to program in x86-64 assembly, probably the reverse engineering forum isn't best place to ask. If by \"x64 assembly\" you mean the 64bit version of x86, no you don't have to learn \"x64\" assembly. You can run 32 bit version of x86 assembly on 64 bit processor just fine in most cases. Also there are emulators for other architectures like MIPS or ARM so you don't need to stick to x86.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  to be honest, there's no specific way to lean reverse engineering but there's some basics like(programming, computer architecture etc..), so you need to learn all fundamentals of computer science and engineering, and then you can play some\n  <a href=\"https://ctftime.org/\" rel=\"nofollow noreferrer\">\n   ctf's\n  </a>\n  /\n  <a href=\"https://crackmes.one/\" rel=\"nofollow noreferrer\">\n   crackme\n  </a>\n  challenges.\n </p>\n <p>\n  <strong>\n   NOTES:\n  </strong>\n </p>\n <ul>\n  <li>\n   most of reverse engineering tutorials/workshops won't teach you reverse engineering, they will teach you only how to use tools like (Windbg, ghidra, etc..)\n  </li>\n  <li>\n   if you want to learn how reverse engineer software try to build one.\n  </li>\n </ul>\n <p>\n  <strong>\n   Books:\n  </strong>\n </p>\n <ul>\n  <li>\n   <a href=\"https://www.amazon.fr/Practical-Binary-Analysis-Instrumentation-Disassembly/dp/1593279124\" rel=\"nofollow noreferrer\">\n    Practical Binary Analysis: Build Your Own Linux Tools for Binary Instrumentation, Analysis, and Disassembly\n   </a>\n  </li>\n  <li>\n   <a href=\"https://beginners.re/main.html\" rel=\"nofollow noreferrer\">\n    Reverse Engineering for Beginners\n   </a>\n  </li>\n  <li>\n   <a href=\"https://rads.stackoverflow.com/amzn/click/com/0764574817\" rel=\"nofollow noreferrer\">\n    Reversing: Secrets of Reverse Engineering\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Collin Belmo",
            "time": "Jan 17, 2021 at 13:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Why do you need writing in assembly? In order to reverse engineer the microcode approach is a lot easier. The Ghidra tool supports outputting pcode for all the instructions, then you just read that along with decompiler output. Pcode for calling conventions, return addresses and such low level stuff; decompiler for anything else like further analysis of functions etc. Also pcode shows you what each assembly instruction means so you can reuse semantic information anywhere else if documentation is not clear for you or whatever you use for learning. As for binaries you usually don't choose in what language they're written (x86/MIPS/PowerPC/ARM), you don't actually need it nor this matters anything as pcode or what your RE tool uses is versatile and depends only on this tool used.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Danil",
            "time": "Aug 19, 2020 at 21:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}