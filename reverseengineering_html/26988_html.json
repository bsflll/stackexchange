{
    "title": "Why compiler is doing this?",
    "link": "https://reverseengineering.stackexchange.com/questions/26988/why-compiler-is-doing-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While I was disassembling my own C code for practice I saw an interesting point which I want to share with you guys and needs to know the answer as I always get from here. Now, the interesting point is when I'm disassembling for switch cases when I'm making cases for one-digit numbers like 1, 2, etc. the disassembler is using jump-table for them but when I'm making cases for digits with zeroes like 10, 200, 300, etc. I'm seeing the disassembly with no jump-table but only a bunch of CMPs and JCCs one after another. I can't figure out why it's doing this but it's very interesting, can anyone tell me why? My two codes...\n </p>\n <pre><code>int number=5;\nswitch (number) {\ncase 1:\ncase 2:\ncase 3:\n printf(\"One, Two, or Three.\n\");\n break;\ncase 4:\ncase 5:\ncase 6:\n printf(\"Four, Five, or Six.\n\");\n break;\ndefault:\n printf(\"Greater than Six.\n\");}}\n</code></pre>\n <p>\n  and disassembly for it...\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/vszlC.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/vszlC.png\"/>\n  </a>\n </p>\n <p>\n  now the code but with cases with numbers like 200, etc.\n </p>\n <pre><code>int number=500;\nswitch (number) {\ncase 100:\ncase 200:\ncase 300:\n printf(\"100, 200, or 300.\n\");\n break;\ncase 400:\ncase 500:\ncase 600:\n printf(\"400, 500, or 600.\n\");\n break;\ndefault:\n printf(\"Greater than Six.\n\");}}\n</code></pre>\n <p>\n  and disassembly for it...\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/17SaV.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/17SaV.png\"/>\n  </a>\n </p>\n <p>\n  it seems so chatty.\nThanks in advance!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "92",
    "tags": [
        "disassembly",
        "assembly",
        "debugging",
        "binary-analysis",
        "c"
    ],
    "user": "Ramesses II",
    "time": "Feb 10, 2021 at 12:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n You mean “the compiler is” (doing this or that). The disassembler is just showing you the result.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ramesses II",
            "text": "<html><body><span class=\"comment-copy\">\n Whoops! Got it!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This topic has been explored by Rolf Rolles in\n  <a href=\"http://www.openrce.org/blog/view/1319/Switch_as_Binary_Search,_Part_0\" rel=\"nofollow noreferrer\">\n   this OpenRCE article\n  </a>\n  (reposted\n  <a href=\"https://www.msreverseengineering.com/blog/2014/6/23/switch-as-binary-search-part-0\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  ).\n </p>\n <p>\n  Briefly, when the cases are close together, the compiler can use the switch variable to index a jump table. However, when cases are further apart, it would have to generate a huge table with many empty cases which would blow up the binary size. Although the sequence of cmp and conditional jumps may look silly and verbose, in most cases it's not noticeably slower and certainly uses less space (which would further improve performance by fitting into the instruction cache).\n </p>\n <p>\n  At high optimization levels, advanced compilers can even split a switch into several small ones that do have cases grouped closely and then use a couple of comparisons to decide which of them to use.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 10, 2021 at 12:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}