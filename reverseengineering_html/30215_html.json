{
    "title": "What is xmmword in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/30215/what-is-xmmword-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   Probably a silly question.\n  </em>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/H0njV.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/H0njV.png\"/>\n  </a>\n </p>\n <p>\n  What's the xmmword means in IDA Pro?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly",
        "assembly"
    ],
    "user": "Galaxy226",
    "time": "Apr 11, 2022 at 18:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   XMMWORD\n  </code>\n  is a 128-bit operand for SSE (previously MMX) instructions (it is nothing special in IDA Pro).\n </p>\n <p>\n  It is derived from names of XMM registers (\n  <code>\n   XMM0\n  </code>\n  ,\n  <code>\n   XMM1\n  </code>\n  , ...) used with SSE instructions.\n </p>\n <ul>\n  <li>\n   <p>\n    <strong>\n     SSE\n    </strong>\n    means “\n    <strong>\n     S\n    </strong>\n    treaming\n    <strong>\n     S\n    </strong>\n    IMD\n    <strong>\n     E\n    </strong>\n    xtensions”, where\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     SIMD\n    </strong>\n    means “\n    <strong>\n     S\n    </strong>\n    ingle\n    <strong>\n     I\n    </strong>\n    nstruction\n    <strong>\n     M\n    </strong>\n    ultiple\n    <strong>\n     D\n    </strong>\n    ata”.\n   </p>\n   <p>\n    (\n    <strong>\n     S\n    </strong>\n    ingle\n    <strong>\n     I\n    </strong>\n    nstruction - for example addition – is performed on\n    <strong>\n     M\n    </strong>\n    ultiple\n    <strong>\n     D\n    </strong>\n    ata - for example on multiple pairs of numbers.)\n   </p>\n  </li>\n </ul>\n <p>\n  (\n  <strong>\n   SSE\n  </strong>\n  =\n  <strong>\n   SIMD\n  </strong>\n  + Floating Point Arithmetic + Saturation Arithmetic + Special Instructions)\n </p>\n <p>\n  For explanation:\n </p>\n <ul>\n  <li>\n   <p>\n    Beside “basic”, well-known instructions (e.g.\n    <code>\n     ADD\n    </code>\n    or\n    <code>\n     JMP\n    </code>\n    ) inherited from early Intel X86 instruction set, there is\n    <em>\n     other\n    </em>\n    instruction set (containing e.g.\n    <code>\n     MAXPS\n    </code>\n    or\n    <code>\n     MOVNTQ\n    </code>\n    instructions):\n   </p>\n   <ul>\n    <li>\n     <p>\n      <strong>\n       SSE\n      </strong>\n      (previously\n      <strong>\n       MMX\n      </strong>\n      – officially a meaningless acronym, often interpreted as\n      <strong>\n       M\n      </strong>\n      ulti\n      <strong>\n       M\n      </strong>\n      edia e\n      <strong>\n       X\n      </strong>\n      tension) with their\n      <em>\n       own special set of 128-bit registers\n      </em>\n      (\n      <code>\n       XMM0\n      </code>\n      ,\n      <code>\n       XMM1\n      </code>\n      , ... ),\n      \n\n      further extended to\n     </p>\n    </li>\n    <li>\n     <p>\n      <strong>\n       AVX\n      </strong>\n      (\n      <strong>\n       A\n      </strong>\n      dvanced\n      <strong>\n       V\n      </strong>\n      ector e\n      <strong>\n       X\n      </strong>\n      tensions) with added\n     </p>\n     <ul>\n      <li>\n       <p>\n        256-bit YMM registers (\n        <code>\n         YMM0\n        </code>\n        ,\n        <code>\n         YMM1\n        </code>\n        , ...  – lower halves overlap with XMM registers), and\n       </p>\n      </li>\n      <li>\n       <p>\n        512-bit ZMM registers (\n        <code>\n         ZMM0\n        </code>\n        ,\n        <code>\n         ZMM1\n        </code>\n        , ...  – lower halves overlap with YMM registers).\n       </p>\n      </li>\n     </ul>\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "3",
            "user": "MarianD",
            "time": "Apr 5, 2022 at 20:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}