{
    "title": "Radare2 - Insert asm instructions without overwriting",
    "link": "https://reverseengineering.stackexchange.com/questions/18638/radare2-insert-asm-instructions-without-overwriting",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In order to patch a x86 elf file on Linux, I'm struggling to insert a specific assembler instruction into the binary file without overwriting any of the preexisting instructions.\n </p>\n <p>\n  I've been reading quite extensively\nRadare2 documentation regarding this matter, and so far found none of the  commands described by the doc (\n  <code>\n   wa\n  </code>\n  ,\n  <code>\n   wo\n  </code>\n  ,\n  <code>\n   wex\n  </code>\n  ,\n  <code>\n   i\n  </code>\n  in the\n  <em>\n   visual mode\n  </em>\n  and even the\n  <em>\n   visual assembler\n  </em>\n  ) giving me the ability to carry it out.\n  \n\n  All of these commands do actually overwrite the instruction located at the offset in which the new instruction gets written.\n </p>\n <p>\n  Knowing that the\n  <code>\n   mov\n  </code>\n  instruction I plan to insert would take at the very most\n  <em>\n   8 bytes\n  </em>\n  , I've extended the size of the binary file accordingly, via the\n  <em>\n   r2\n  </em>\n  command\n </p>\n <pre><code>r+ 8\n</code></pre>\n <p>\n  My aim was then to shift all the instructions at the target offset so as to \"make room\" for the instruction to insert, but couldn't find any command that gets the job done.\n </p>\n <p>\n  Here is a typical example of what I'm aiming at :\n </p>\n <p>\n  Part of the original binary dump :\n </p>\n <pre><code>0x0804848a    c745f8000000.  mov dword [local_8h], 0                                                                                    \n0x08048491    c745f4000000.  mov dword [local_ch], 0                                                                                    \n0x08048498    8b4508         mov eax, dword [arg_8h]\n0x0804849b    890424         mov dword [esp], eax                                                                                       \n0x0804849e    e8e1feffff     call sym.imp.strlen        \n</code></pre>\n <p>\n  Binary dump after patching :\n </p>\n <pre><code>0x0804848a    c745f8000000.  mov dword [local_8h], 0                                                                                   \n0x08048491    c745f4000000.  mov dword [local_ch], 0                                                                                   \n0x08048498    c745fc000000.  mov dword [local_4h], 0   ; inserted instruction                                                                           \n0x0804849f    8b4508         mov eax, dword [arg_8h]   ; following instructions get shifted from here\n0x08048492    890424         mov dword [esp], eax                                                                                      \n0x08048495    e8e1feffff     call sym.imp.strlen  \n</code></pre>\n <p>\n  Is that even possible ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "x86",
        "radare2",
        "elf",
        "patching"
    ],
    "user": "programmersn",
    "time": "Jun 29, 2018 at 15:40",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  wex\n </code>\n should be able to do this. Are you sure it isn't? Worked for me just now. Try something like\n <code>\n  wex c745fc000000 @ 0x08048498\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "programmersn",
            "text": "<html><body><span class=\"comment-copy\">\n @Megabeets No it doesn't, it overwrites the instruction at 0x08048491, for some reason (actually the instruction\n <code>\n  0x08048491    c745f4000000.  mov dword [local_ch], 0\n </code>\n ).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Weird. I think it's a bug. It works for me just great. Anyway, for shifting you can use\n <code>\n  wes\n </code>\n . So try something like\n <code>\n  wes 0x08048491 8\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "programmersn",
            "text": "<html><body><span class=\"comment-copy\">\n @Megabeets My bad, actually it does write at the specified address, but then it stamps out a whole bunch of the following instructions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure I understood. But anyway, keep in mind that if you shift part of your binary, it might cause really wrong results both in relative and absolute addresses and references.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Before insert some asm instructions, sometimes you have to enlarge the section .text. try it like below :\n </p>\n <pre><code>oo+  ; reopen file with write permission\niO r/.text/biggersize ; biggersize = size of section..text + 8\ns 0x08048498\nwen 8\nwx c745fc000000\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user7854208",
            "time": "Oct 25, 2018 at 6:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}