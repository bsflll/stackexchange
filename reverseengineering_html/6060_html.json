{
    "title": "Is there any technique called \"DLL Replacement\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/6060/is-there-any-technique-called-dll-replacement",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know a techinique is called:\n  <a href=\"http://www.codereversing.com/blog/?p=65\" rel=\"nofollow\">\n   Process Replacement\n  </a>\n  , I have searched but could not find any article about \"DLL Replacement\", in which malicious programs can replace a legal DLL (eg. a third party DLL) with a malicious DLL.\n </p>\n <p>\n  How does this work and are there any other techniques to do it?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "318",
    "tags": [
        "malware",
        "dll"
    ],
    "user": "aoe",
    "time": "Aug 12, 2014 at 6:08",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n What you are talking about is\n <a href=\"http://www.maravis.com/library/dll-hijacking-attacks/\" rel=\"nofollow noreferrer\">\n  DLL Hijacking\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "aoe",
            "text": "<html><body><span class=\"comment-copy\">\n Nope, dll will be replaced in memory when it has been loaded in to process.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paul",
            "text": "<html><body><span class=\"comment-copy\">\n Replacing a DLL is over complicated task which can be easily simplified by other methods. Could you tell us that your actual end goal is for? I may able to offer you a more effective and simple solution.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n When a DLL is loaded in memory in one process, and another process loads the same DLL, windows will map the (read only) code segment of the DLL into both processes. If you find a way to alter your \"copy\" of the code segment, this alteration would affect the other process as well; you could use this to cause the other process (which might have higher privileges) to execute your code. However, i wouldn't know how to turn this into an exploit; once you have the rights to modify segment descriptors, there's not much left that the other process can do but you can't.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n @Guntram, to alter your copy would require access to the section object.  A simple VirtualProtect() will trigger a copy-on-write, and the remote process will not be affected.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}