{
    "title": "Is manually converting/decompiling x86 source code to C/C++/etc... considered reverse engineering?",
    "link": "https://reverseengineering.stackexchange.com/questions/25789/is-manually-converting-decompiling-x86-source-code-to-c-c-etc-considered-re",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the source code of an old program written in 32-bit x86 assembler that I am working on manually rewriting in C.\n </p>\n <p>\n  The first time someone asked me about this project I told them I was 'reverse engineering' this code. But I thought to myself afterwards, am I really doing any reverse engineering here? even if I have the source code? and even if its in x86? and commented somewhat?\n </p>\n <p>\n  I mean I am still using the same re tools to help me navigate and understand this thing but even so, is 'reverse engineering' the right thing to say?\n </p>\n <p>\n  I am perhaps overthinking this but in any case, what would you call it?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "184",
    "tags": [
        "x86",
        "decompilation",
        "static-analysis",
        "ghidra",
        "dynamic-analysis"
    ],
    "user": "Nux",
    "time": "Sep 1, 2020 at 0:20",
    "comments": [
        {
            "user": "mkst",
            "text": "<html><body><span class=\"comment-copy\">\n Translating to a modern programming language?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n That depends on the code. If it is free of comments and may be even slightly \"obfuscated  (non-speaking variable/function names, ..) one could call that reverse engineering in my opinion as you are trying to get the intention behind the code.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The IEEE definition of Reverse Engineering (\"Reverse Engineering and Design Recovery: A Taxonomy\", IEEE, 1990) is \"the process of analyzing a subject system to identify the system's components and their interrelationships and to create representations of the system in another form or at a higher level of abstraction\".\n </p>\n <p>\n  However, you already have the source code which is a representation of the system (an executable) in another form and at a higher level of abstraction (assembly).\n </p>\n <p>\n  To me, what you are doing is re-engineering and/or translating the source code by porting it to a new software coding language.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "fpmurphy",
            "time": "Sep 11, 2020 at 4:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You should check the\n  <a href=\"https://www.eff.org/issues/coders/reverse-engineering-faq\" rel=\"nofollow noreferrer\">\n   EFF RE FAQ\n  </a>\n  . It might help you wrap your head around some of the legal aspects and definitions.\n </p>\n <p>\n  From where I see it, yes, it is reverse engineering. But, it's not\n  <strong>\n   clean room\n  </strong>\n  reverse engineering.\n </p>\n <p>\n  There are many layers/levels of RE. You can target the hardware, the firmware, the software, the algorithms, the architecture, ... The higher you go, the more abstract the construct. So, depending on what abstraction you're trying to model from the available elements, the RE tools and methods will be, somewhat, different. But, it's still RE.\n </p>\n <p>\n  I would define RE by the attempt to build a higher level construct from a set of packaged, or obfuscated, or low level elements.\n </p>\n <p>\n  If you start from a binary without any prior knowledge of its inner-workings and dig your way into a source code, that's\n  <strong>\n   clean room\n  </strong>\n  binary RE for the intent of producing a source code.\nIf you peruse (in the true sense of the word) the source code and manage to identify the algorithms (some homemade implementation of FFT, AES, or some scheduling scheme), that becomes a\n  <strong>\n   clean room\n  </strong>\n  algorithm RE.\n </p>\n <p>\n  If you have prior knowledge of the source code and you manage to identify the algorithms, that's algorithm RE. Is this case, the manner in which the source code was obtained is crucial in defining the legality of the RE work and the intent of the RE.\n </p>\n <p>\n  If you are learning by playing around with prepared labs/exercises, well, you're working out your RE skills.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "yaspr",
            "time": "Sep 11, 2020 at 0:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "fpmurphy",
                    "text": "<span class=\"comment-copy\">The OP did not say what country he/she is in. The EFF RE FAQ assumes work is being done in the USA, and does not apply in non-US countries.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Sure, but it is still a good reference to understand how RE is defined/considered.</span>",
                    "time": null
                }
            ]
        }
    ]
}