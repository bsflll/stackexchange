{
    "title": "What is an \"opaque predicate\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/1669/what-is-an-opaque-predicate",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I saw the term of\n  <em>\n   opaque predicates\n  </em>\n  several times in obfuscation papers. As far as I understand it, it refers to predicates that are hard to evaluate in an automated manner. Placing it at strategical points of the program (\n  <code>\n   jmp\n  </code>\n  ,\n  <code>\n   test\n  </code>\n  , ...) can mislead the analysis of a program by automatic tools.\n </p>\n <p>\n  My definition is lacking of precision and, moreover, I have no idea on how to estimate the\n  <em>\n   opacity\n  </em>\n  of such a predicate (its efficiency). So, can somebody give a proper definition and maybe a few examples ?\n </p>\n</div>\n</body></html>",
    "votes": "20",
    "answers": 4,
    "views": "13k",
    "tags": [
        "obfuscation"
    ],
    "user": "perror",
    "time": "Apr 9, 2013 at 7:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The answers already in this thread are good ones.  In a nutshell, an opaque predicate is \"something that a program analysis might miss, if the program analysis is not sophisticated enough\".  Denis' example was based on the inverse of constant propagation, and served as an anti-checksum mechanism.  Joxean's\n  <code>\n   SetErrorMode\n  </code>\n  example was an environment-based opaque predicate that was used for dynamic anti-emulation.  Two of Ange's answers were also dynamic anti-emulation; based upon the environment, and based upon uncommon platform features.  Ange's other example was more like an anti-disassembly trick via indirect addressing.\n </p>\n <p>\n  In the academic literature, an opaque predicate is referred to as a branch that always executes in one direction, which is known to the creator of the program, and which is unknown a priori to the analyzer.  The notion of \"hardness\" of an opaque predicate is deliberately omitted from this definition.  Academic predicates are often based upon number-theoretic constructions, aliasing relationships, recursive data structures; basically anything that is commonly understood by program analysis researchers to cause problems for a program analysis tool.\n </p>\n <p>\n  My favorite researcher Mila Dalla Preda has shown that the ability for an abstract interpreter to break a given category of opaque predicate is related to the \"completeness\" of the domain with respect to the property tested by the predicate.  She demonstrates by using mod-k-based opaque predicates, and elicits a family of domains that are complete (i.e. incur no abstract precision loss) for mod-k with respect to common transformers (addition, multiplication, etc).  Then she explores the use of obscure theoretical constructions such as completeness refinement to automatically construct a domain for breaking a certain category of predicate.  See\n  <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.3653&rep=rep1&type=pdf\" rel=\"nofollow noreferrer\">\n   this paper\n  </a>\n  for more details.\n </p>\n</div>\n</body></html>",
            "votes": "21",
            "user": "perror",
            "time": "Feb 16, 2020 at 23:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Yennefer",
                    "text": "<span class=\"comment-copy\">Hi, the link is broken. Do you happen to know where I can find it?  Thank you</span>",
                    "time": null
                },
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">@Yennefer An archived copy of the paper is available on the Web Archive at <a href=\"https://web.archive.org/web/20090116013739/http://profs.sci.univr.it/~dallapre/AMAST06.pdf\" rel=\"nofollow noreferrer\">web.archive.org/web/20090116013739/http://profs.sci.univr.it/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An\n  <em>\n   opaque predicate\n  </em>\n  is an obfuscated condition, that, followed with a conditional operation, will make the analysis harder, and in some cases impossible until code is actually executed until that condition is evaluated.\n </p>\n <p>\n  This is used to disrupt static analysis (outcome is unpredictable) or emulation (to tell the difference between a real machine and an emulated environment).\n </p>\n <p>\n  They can rely on executions conditions, CPU features, API calls, and documented or not.\n </p>\n <h1>\n  Examples\n </h1>\n <h2>\n  initial values\n </h2>\n <p>\n  As values of registers are neither null nor completely random on process start, they can be relied on to create tests that look random but are actually deterministic:\n </p>\n <p>\n  example:\n </p>\n <pre><code><EntryPoint>:\n   jnz <InvalidPath>\n   <ValidPath>\n</code></pre>\n <ol>\n  <li>\n   <a href=\"https://code.google.com/p/corkami/wiki/InitialValues#Flags\">\n    flags register\n   </a>\n   is always\n   <code>\n    246\n   </code>\n   at EntryPoint\n   <ul>\n    <li>\n     <code>\n      ZF\n     </code>\n     is always set\n    </li>\n   </ul>\n  </li>\n  <li>\n   as a consequence,\n   <code>\n    jnz\n   </code>\n   will never be taken.\n  </li>\n </ol>\n <h2>\n  checksum\n </h2>\n <ol>\n  <li>\n   compute a checksum of some piece of code or data\n   <ul>\n    <li>\n     preferably something not present before runtime\n    </li>\n   </ul>\n  </li>\n  <li>\n   xor with\n   <code>\n    expected_result ^ jump_target\n   </code>\n  </li>\n  <li>\n   blindly use the result to jump somewhere\n  </li>\n </ol>\n <p>\n  thus, it might be impossible to tell in advance what the next instructions will be.\n </p>\n <h2>\n  mathematic functions\n </h2>\n <ol>\n  <li>\n   implement an asymptotic function in FPU\n   <ul>\n    <li>\n     FPU is more likely to be unsupported or wrongly emulated/analysed than standard instructions\n    </li>\n   </ul>\n  </li>\n  <li>\n   implement enough iteration to guarantee the result\n   <ul>\n    <li>\n     many iterations might make an emulator run out of cycles\n    </li>\n   </ul>\n  </li>\n  <li>\n   use the final result in a test, as a jump target, etc...\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "19",
            "user": "Ange",
            "time": "Apr 10, 2013 at 13:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not necessarily the predicate must be hard to evaluate. An opaque predicate is a condition which the result is known in advance by the programmer and that cannot be resolved statically (by a compiler, for example) and must be resolved dynamically.\n </p>\n <p>\n  An example I noticed in malware some years ago:\n </p>\n <pre><code>  SetErrorMode(100);\n  if ( SetErrorMode(1024) == 100 )\n    // Valid Path\n  else\n    // Invalid Path\n</code></pre>\n <p>\n  Without executing the program (or knowing how the Win32 API\n  <code>\n   SetErrorMode\n  </code>\n  works) there is no way to determine which of the paths the program will take. However, as\n  <code>\n   SetErrorMode\n  </code>\n  returns the last previous code set, the programmer knows before executing this piece of code that the 1st path is the only valid one.\n </p>\n</div>\n</body></html>",
            "votes": "14",
            "user": "0xC0000022L",
            "time": "Apr 17, 2013 at 4:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sort of it also can be found in malicious obfuscated JavaScript code:\n </p>\n <pre><code>001     vz = 1;\n002     var1 = 49;\n003     var2 = var1;\n004     if (var1 == var2){\n005       document.location = \"http://path.to.malicious.website\";\n006     }\n</code></pre>\n <p>\n  here You see attempt in line 001-004 declare vars and conditions, that meaningless, and present to change obfuscated code hash and to complicate automatic analysis.\n </p>\n <p>\n  p.s. this is very simple examples, for more complicated samples of opaque predicate in JS see DefenceCode\n  <a href=\"http://blog.defensecode.com/2012/10/diving-into-recent-0day-javascript.html\">\n   blog post\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Denis Laskov",
            "time": "Apr 9, 2013 at 8:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}