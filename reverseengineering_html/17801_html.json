{
    "title": "Does someone recognize this \"lookup table\"? (used for xor encryption)",
    "link": "https://reverseengineering.stackexchange.com/questions/17801/does-someone-recognize-this-lookup-table-used-for-xor-encryption",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This table is part of the packet encryption of an old game for which I am developing a server.\n </p>\n <p>\n  The crypto algorithm doesn't just xor the password with the message.\nIt uses a multiple of the ascii value of the letters in the password as an index for this table/array. With the retrieved value, it then does logical and operations which null out most, but not all values.\n </p>\n <p>\n  The result of this is finally xor'ed with the corresponding letter in the message.\n </p>\n <p>\n  I mean the general idea seems nice for a software that was developed 10+ years ago and was mainly a kids game, but I wonder why someone invents such an algorithm an then puts so many zeroes in there.\n </p>\n <p>\n  Is it possible, that this table is in some way a part of a standard library function that was mistakenly used in this context?\nOr are these just a bunch of random values to mess with someone who is trying to reverse engineer the encryption?\n </p>\n <pre><code>20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00\n20 00 28 00 28 00 28 00 28 00 28 00 20 00 20 00\n20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00\n20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00\n48 00 10 00 10 00 10 00 10 00 10 00 10 00 10 00\n10 00 10 00 10 00 10 00 10 00 10 00 10 00 10 00\n84 00 84 00 84 00 84 00 84 00 84 00 84 00 84 00\n84 00 84 00 10 00 10 00 10 00 10 00 10 00 10 00\n10 00 81 00 81 00 81 00 81 00 81 00 81 00 01 00\n01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00\n01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00\n01 00 01 00 01 00 10 00 10 00 10 00 10 00 10 00\n10 00 82 00 82 00 82 00 82 00 82 00 82 00 02 00\n02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00\n02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00\n02 00 02 00 02 00 10 00 10 00 10 00 10 00 20 00\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "275",
    "tags": [
        "encryption",
        "xor"
    ],
    "user": "Maurice Döpke",
    "time": "Mar 26, 2018 at 12:53",
    "comments": [
        {
            "user": "Willi Ballenthin",
            "text": "<html><body><span class=\"comment-copy\">\n my guess is this restricts the set of characters that is recognized by the algorithm. it looks like ASCII 0-9, A-F, and a-f all have bit four set (0x80). other ranges of printable and non-printable characters seem to have different sets of bits set (punctuation 0x10, uppercase letters 0x01, lowercase letters 0x02, non-printable 0x02, whitespace 0x28).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<html><body><span class=\"comment-copy\">\n Check out the C functions defined in <ctype.h>.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The data appears to be a lookup table to support the functions in the C library header\n  <code>\n   <ctype.h>\n  </code>\n </p>\n <p>\n  Specifically, the bit-field values being used here represent, for each character -\n </p>\n <pre><code>0x01 => Upper Case\n0x02 => Lower Case\n0x04 => Digit\n0x08 => Space\n0x10 => Punctuation\n0x20 => Control\n0x40 => Blank\n0x80 => Hex Digit\n</code></pre>\n <p>\n  These values match those that (at least) the Microsoft C runtime library uses. You can see these defined in the MSVC\n  <code>\n   <ctype.h>\n  </code>\n  header.\n </p>\n <p>\n  Other CRT's might use the same, similar (e.g. libc), or different values (e.g. glibc).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Mar 26, 2018 at 12:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">I think the exact file depends on the MSVC/CRT version you are looking at.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">these #defines are in corecrt_wctype.h in w10 includes  may be it depends on crt versions  grep -h -A 12 -r \"#define _UPPER\" \"c:\\Program Files\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\"</span>",
                    "time": null
                },
                {
                    "user": "Maurice Döpke",
                    "text": "<span class=\"comment-copy\">With that in mind, some further debugging seems to undermine your answer. I could verify for different passwords, that the algorithm uses only certain characters for the encryption.  I guess the original developer tried to add another element of unpredictability through that.</span>",
                    "time": null
                }
            ]
        }
    ]
}