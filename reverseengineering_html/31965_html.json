{
    "title": "What triggers RIP_EVENT?",
    "link": "https://reverseengineering.stackexchange.com/questions/31965/what-triggers-rip-event",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The documentation for the Windows Debugger API mentions a debug event called\n  <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-rip_info\" rel=\"nofollow noreferrer\">\n   RIP_EVENT.\n  </a>\n  It offers little explanation of what a RIP_EVENT is, only stating that the structure \"contains the error that caused the RIP debug event.\" In my own debugger, I have never encountered this event, so I am uncertain how to handle it.\n </p>\n <p>\n  There are precious little resources online explaining what the event is.\n  <a href=\"https://www.lyyyuna.com/2017/05/01/write-a-windows-debugger-02-debug-event/\" rel=\"nofollow noreferrer\">\n   This blog\n  </a>\n  is as confused as I am:\n </p>\n <blockquote>\n  <p>\n   I find very few documents about this event, only mentioned with words\nlike system error or internal error. So I decide to print a error\nmessage and skip it. As my project is not fully tested, I have never\nencountered such a situation.\n  </p>\n </blockquote>\n <p>\n  The\n  <a href=\"https://www.codeproject.com/Articles/5275/Writing-a-Debugger-Part-2-The-Debug-Loop\" rel=\"nofollow noreferrer\">\n   Writing A Debugger CodeProject\n  </a>\n  claims the event \"occurs if your process being debugged dies unexpectedly.\" Similarly, this\n  <a href=\"https://youtu.be/VZtM-gQxmns\" rel=\"nofollow noreferrer\">\n   OALabs video\n  </a>\n  states that the RIP_EVENT occurs if the process doesn't exit gracefully.\n </p>\n <p>\n  This seems to be the general consensus amongst the few resources I can find. The problem is, of all the ways I can conceive of to kill a process in unexpected fashion, none of them trigger a RIP_EVENT. Last Chance Exceptions trigger a DEBUG_EVENT, eventually followed by an EXIT_PROCESS_DEBUG_EVENT, instead. If anything, I would expect that terminating the process in Task Manager wouldn't be considered a \"graceful exit,\" but it too triggers an EXIT_PROCESS_DEBUG_EVENT, not a RIP_EVENT. This makes me wonder if the event is even associated with process termination at all, or if that's just a confident assumption based on the name \"RIP.\"\n </p>\n <p>\n  I'm left to speculate why I've never seen this event before and in what scenario it could potentially arise:\n </p>\n <ul>\n  <li>\n   Assuming a RIP_EVENT does occur when the process dies somehow, does\nthe RIP_EVENT replace the EXIT_PROCESS_DEBUG_EVENT, or can I expect\nto receive both events?\n  </li>\n  <li>\n   How do popular debuggers like Visual Studio or WinDbg handle the\nRIP_EVENT? What is the correct way to handle one? Do I even need to\ndo anything if I receive one?\n  </li>\n  <li>\n   Does the \"RIP\" in RIP_EVENT refer to the instruction pointer in x64?\nWould that imply it is exclusive to x64 and never occurs for x86? Or\nperhaps it is for some other CPU architecture I don't care about?\n  </li>\n  <li>\n   Does it occur when connection is lost while debugging a remote\nprocess? This is another scenario I thought might cause it, but it'd\nbe difficult for me to test.\n  </li>\n </ul>\n <p>\n  <strong>\n   Update:\n  </strong>\n  I began digging even further into this, because I wasn't satisfied with the guesses so far, and found something interesting. There is an export of USER32 called\n  <a href=\"http://winapi.freetechsecrets.com/win32/WIN32SetDebugErrorLevel.htm\" rel=\"nofollow noreferrer\">\n   SetDebugErrorLevel.\n  </a>\n  There is no official documentation for it that I can find, but if this source is to be believed, it would make a lot of sense.\n </p>\n <blockquote>\n  <p>\n   The SetDebugErrorLevel function sets the minimum error level at which\nWindows will generate debugging events and pass them to a debugger.\n  </p>\n  <p>\n   <strong>\n    Parameters\n   </strong>\n  </p>\n  <p>\n   <em>\n    dwLevel\n   </em>\n   Specifies the minimum error level for debugging events. If an error is equal to or above this level, Windows generates a\ndebugging event. This parameter must be one of the following values:\n  </p>\n  <p>\n   <strong>\n    Value:\n   </strong>\n   0\n  </p>\n  <p>\n   <strong>\n    Meaning:\n   </strong>\n   Does not report any errors. This value is the default error level.\n  </p>\n  <p>\n   <strong>\n    Value:\n   </strong>\n   SLE_ERROR\n  </p>\n  <p>\n   <strong>\n    Meaning:\n   </strong>\n   Reports only ERROR level debugging events.\n  </p>\n  <p>\n   <strong>\n    Value:\n   </strong>\n   SLE_MINORERROR\n  </p>\n  <p>\n   <strong>\n    Meaning:\n   </strong>\n   Reports only MINORERROR level and ERROR level debugging events.\n  </p>\n  <p>\n   <strong>\n    Value:\n   </strong>\n   SLE_WARNING\n  </p>\n  <p>\n   <strong>\n    Meaning:\n   </strong>\n   Reports WARNING level, MINORERROR level, and ERROR level debugging events.\n  </p>\n </blockquote>\n <p>\n  Particularly because the RIP_INFO structure contains a dwType field with these same values, I think it is likely that RIP_EVENT was intended to be thrown as a part of this mechanism. The thing is, SetDebugErrorLevel - although it exists in USER32 - does nothing. Looking at the disassembly reveals it simply returns immediately. Furthermore, these types were clearly intended to be specified in calls to\n  <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setlasterrorex\" rel=\"nofollow noreferrer\">\n   SetLastErrorEx,\n  </a>\n  though it too goes unused, as the documentation explains:\n </p>\n <blockquote>\n  <p>\n   Currently, this function is identical to the SetLastError function.\nThe second parameter is ignored.\n  </p>\n </blockquote>\n <p>\n  ...with the second, unused parameter being dwType, which was probably meant to take in the SLE_ERROR, SLE_MINORERROR, and SLE_WARNING types (with \"SLE\" standing for SetLastError.) From this, I infer that RIP_EVENT was probably intended to be thrown whenever SetLastErrorEx was used to set a new error level, but this feature has been abandoned. This is my best theory, but it is still only a guess, as the documentation never goes so far as to explicitly state this.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "214",
    "tags": [
        "windows",
        "debugging",
        "x86"
    ],
    "user": "tomysshadow",
    "time": "Jun 14, 2023 at 3:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  AFAIK you're not supposed to handle it and I doubt you reasonably could. The sources you cite\n  <a href=\"https://en.wikipedia.org/wiki/Rest_in_peace\" rel=\"nofollow noreferrer\">\n   are right about what RIP means in this context\n  </a>\n  .\n </p>\n <p>\n  This event occurs in response to a\n  <code>\n   DBG_RIPEXCEPTION\n  </code>\n  (==\n  <code>\n   ((NTSTATUS)0x40010007L)\n  </code>\n  ; see\n  <code>\n   ntstatus.h\n  </code>\n  ). The message for this status code is \"Debugger received RIP exception.\" (not helpful ;)) and a corresponding Win32 error code exists by the name\n  <code>\n   ERROR_DBG_RIPEXCEPTION\n  </code>\n  (==\n  <code>\n   695L\n  </code>\n  ; see\n  <code>\n   winerror.h\n  </code>\n  , same message text).\n </p>\n <p>\n  Arguably you could synthesize this event by calling\n  <a href=\"https://learn.microsoft.com/windows/win32/api/errhandlingapi/nf-errhandlingapi-raiseexception\" rel=\"nofollow noreferrer\">\n   <code>\n    RaiseException\n   </code>\n  </a>\n  with the\n  <code>\n   DBG_RIPEXCEPTION\n  </code>\n  code. You could then play with passing different arguments and filling the data and seeing what carries over into the debugger.\n </p>\n <p>\n  I, too, am not aware of anything that raises that specific code, but be it cosmic rays or anything else, it seems to signal the sudden and unexpected \"death\" of a process\n  <strong>\n   out of the ordinary\n  </strong>\n  .\n </p>\n <hr/>\n <blockquote>\n  <p>\n   Assuming a RIP_EVENT does occur when the process dies somehow, does the RIP_EVENT replace the EXIT_PROCESS_DEBUG_EVENT, or can I expect to receive both events?\n  </p>\n </blockquote>\n <p>\n  From what I gather, you can expect both. They signify different circumstances, however.\n  <code>\n   RIP_EVENT\n  </code>\n  seems to be purely about the\n  <em>\n   sudden and unexpected \"death\"\n  </em>\n  of a process, not other ways of the process exiting (and the OS getting to clean up after it). One guess would be that this could get synthesized on the client in remote debugging scenarios.\n </p>\n <blockquote>\n  <p>\n   How do popular debuggers like Visual Studio or WinDbg handle the RIP_EVENT?\n  </p>\n </blockquote>\n <p>\n  I think they don't. That event is supposed to be the exception to the exception, so to speak.\n </p>\n <blockquote>\n  <p>\n   What is the correct way to handle one? Do I even need to do anything if I receive one?\n  </p>\n </blockquote>\n <p>\n  As noted above, I think you're not supposed to care about it. At most log it (to notify the user).\n </p>\n <blockquote>\n  <p>\n   Does the \"RIP\" in RIP_EVENT refer to the instruction pointer in x64? Would that imply it is exclusive to x64 and never occurs for x86? Or perhaps it is for some other CPU architecture I don't care about?\n  </p>\n </blockquote>\n <p>\n  Nope it's not about the instruction pointer in x64. It predates x64.\n </p>\n <blockquote>\n  <p>\n   Does it occur when connection is lost while debugging a remote process? This is another scenario I thought might cause it, but it'd be difficult for me to test.\n  </p>\n </blockquote>\n <p>\n  Seems like we came to the same conclusion with this one.\n </p>\n <p>\n  <strong>\n   However,\n  </strong>\n  I'd like to offer another option:\n  <code>\n   RIP_EVENT\n  </code>\n  could be a remnant and no longer applicable to modern Windows. NT has a long history and it could well be something that was dropped along the way ... for all we know it could originate from something that relates to OS/2 and Microsoft's/IBM's collaboration\n  <em>\n   before\n  </em>\n  they parted ways. This is just a guess, too. But it would explain the absence of information. It could also be something that was introduced from the Win32s lineage (Windows 9x/Me) and subsequently dropped. Remember that NT 4.0 took up the desktop look&feel from Windows 95 at the time.\n </p>\n <p>\n  Unless you're working for Microsoft and have access to internal documentation, source code history and some of the original developers, I don't think you'll get much more info than what you found already.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Jun 13, 2023 at 8:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}