{
    "title": "What is the first argument (rdi) to operator+ on x86_64 SystemV?",
    "link": "https://reverseengineering.stackexchange.com/questions/27199/what-is-the-first-argument-rdi-to-operator-on-x86-64-systemv",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm looking through a block of disassembled C++ which works with several\n  <code>\n   std::string\n  </code>\n  instances. I had been confused by several calls to various versions of\n  <code>\n   std::operator+\n  </code>\n  , but this call seems completely wrong (by my understanding anyway):\n </p>\n <pre><code>mov        rax, qword [rbp-0xb8]\nlea        rbx, qword [rax+0xa0]\nlea        rax, qword [rbp-0x60]\nmov        edx, 0x880d32  ; \"/store/\"\nmov        rsi, rax\nmov        rdi, rbx\n           ; std::string std::operator+(std::string &&, char const *),\ncall       _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_\nlea        rax, qword [rbp-0x60]\n</code></pre>\n <p>\n  From context, I have determined that the stack values referenced are:\n </p>\n <ul>\n  <li>\n   <strong>\n    <code>\n     rbp-0x60\n    </code>\n   </strong>\n   : An\n   <code>\n    std::string\n   </code>\n   on the stack, constructed with\n   <code>\n    std::string(char const *, std::allocator<char> &)\n   </code>\n   .\n  </li>\n  <li>\n   <strong>\n    <code>\n     rbp-0xb8\n    </code>\n   </strong>\n   : A pointer to\n   <code>\n    this\n   </code>\n   .\n  </li>\n </ul>\n <p>\n  From the\n  <code>\n   .comment\n  </code>\n  section, I can see the compiler used was GCC 5.4.0, from which I retrieved this implementation of the\n  <code>\n   operator+\n  </code>\n  call above (in\n  <code>\n   namespace std { ... }\n  </code>\n  ):\n </p>\n <pre><code>template<typename _CharT, typename _Traits, typename _Alloc>\ninline\nbasic_string<_CharT, _Traits, _Alloc>\noperator+(\n    basic_string<_CharT, _Traits, _Alloc> &&__lhs,\n    const _CharT *__rhs)\n{\n    return std::move(__lhs.append(__rhs));\n}\n</code></pre>\n <p>\n  I can understand the return value being optimized away since\n  <code>\n   __lhs\n  </code>\n  is modified by\n  <code>\n   operator+\n  </code>\n  , but the parameters don't seem to match.\n  <code>\n   edx\n  </code>\n  referring to the only\n  <code>\n   char *\n  </code>\n  suggests an additional first parameter before those declared in the source. If this was a member function, I would expect that (\n  <code>\n   rdi\n  </code>\n  being\n  <code>\n   this\n  </code>\n  ), but\n  <code>\n   operator+\n  </code>\n  is implemented as a non-member.\n </p>\n <p>\n  Am I missing something from the calling convention here?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "318",
    "tags": [
        "disassembly",
        "c++",
        "gcc"
    ],
    "user": "MTCoster",
    "time": "Mar 9, 2021 at 16:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  std::operator+ takes two arguments\n  \n\n  both pointers to std::string\n  \n\n  like std::operator+(_lhs , _rhs );\nand returns back _Ans a pointer to concatenated result of_lhs & _rhs\n  \n\n  since you are using gcc the first three register that apply are rdi,rsi and rdx\n </p>\n <p>\n  rdi is usually _Ans the resultant std::string address\nrsi is usually _lhs\nrdx is usually _rhs\n </p>\n <p>\n  in your disassembly\n  \n\n  <strong>\n   rdi = rbx-->   [rax+0xa0]\n  </strong>\n  \n\n  <strong>\n   rsi = rax-->   [rbp-0x60]\n  </strong>\n  \n\n  <strong>\n   rdx = edx->    0x880d32\n  </strong>\n  moving a const to edx zeroes the upper part of rdx\n </p>\n <p>\n  see result of using unicorn for emulating mov rdx,0xffffffffffffffff,mov edx,1\n </p>\n <pre><code>from __future__ import print_function\nfrom unicorn import *\nfrom unicorn.x86_const import *\n# code to be emulated mov rdx,0xffffffffffffffff; mov edx,1\nX86_CODE64 = b\"\\x48\\xc7\\xc2\\xff\\xff\\xff\\xff\\xba\\x01\\x00\\x00\\x00\" \nADDRESS = 0x1000000000\ntry:\n    mu = Uc(UC_ARCH_X86, UC_MODE_64)\n    mu.mem_map(ADDRESS, 2 * 1024 * 1024)\n    mu.mem_write(ADDRESS, X86_CODE64)\n    mu.emu_start(ADDRESS, ADDRESS + 7)    \n    print(\">>> RDX = 0x%x\" %mu.reg_read(UC_X86_REG_RDX))\n    mu.emu_start(ADDRESS+7, ADDRESS + 12)    \n    print(\">>> RDX = 0x%x\" %mu.reg_read(UC_X86_REG_RDX))\n    \nexcept UcError as e:\n    print(\"ERROR: %s\" % e)\n</code></pre>\n <p>\n  result of register rdx after each step\n </p>\n <pre><code>:\\>python test1.py\n>>> RDX = 0xffffffffffffffff\n>>> RDX = 0x1\n</code></pre>\n <p>\n  for better understanding you can try the code below with compiler of your choice at\n  <a href=\"https://godbolt.org\" rel=\"nofollow noreferrer\">\n   compiler explorer\n  </a>\n </p>\n <pre><code>#include <iostream>\n#include <string>\nstd::string conc(std::string first,std::string second)\n{\n    return std::operator+(first,second);\n}\nint main()\n{  \n    std::string result =  conc(\"hello \",\"world\n\"); \n    std::cout << result;\n}\n</code></pre>\n <p>\n  compiling for gcc 5.4 disassembly of conc() is as follows\n </p>\n <pre><code>conc(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >):\n  push rbp\n  mov rbp, rsp\n  sub rsp, 32\n  mov QWORD PTR [rbp-8], rdi\n  mov QWORD PTR [rbp-16], rsi\n  mov QWORD PTR [rbp-24], rdx\n  mov rax, QWORD PTR [rbp-8]\n  mov rdx, QWORD PTR [rbp-24]\n  mov rcx, QWORD PTR [rbp-16]\n  mov rsi, rcx\n  mov rdi, rax\n  call std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n  mov rax, QWORD PTR [rbp-8]\n  leave\n  ret\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 9, 2021 at 21:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MTCoster",
                    "text": "<span class=\"comment-copy\"><i>rdi is usually _Ans the resultant std::string address rsi is usually _lhs rdx is usually _rhs</i> – My understanding was that in the SystemV calling convention, <code>rax</code> is used for return values, and <code>rdi</code> is the first parameter. Why is that different here?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Yes rax is used for return  but this is not return. It is an auto argument sent by caller like foo(auto,def,def) look at main and at the prologue upon entry where rdi is saved retrieved manipulated and returned back</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">in laymans terms maybe you need to ask yourself if i am sending in two predefined,preallocated,presized,unchangeable buffer pointers how a new object that is a size of sum of input buffers at-least will be returned back? where does the memory to hold the resultant come from it either must be dynamically allocated and returned back for the caller to free() after use or must be destructible and preallocated by the caller and passed on</span>",
                    "time": null
                },
                {
                    "user": "MTCoster",
                    "text": "<span class=\"comment-copy\">Thank you for this explanation! I found the reference I was looking for in the SystemV ABI document under 3.2.3§Return Values</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  since this is tangentially related to query\n  \n\n  I am adding this as another answer instead of editing the first answer\n  \n\n  it appears the code in question possibly ignores compiler warnings\n </p>\n <pre><code><source>: In function 'int main()':\n<source>:11:40: warning: ISO C++ forbids converting a string constant to 'char*' [-Wwrite-strings]\n   11 |     std::cout << foo(std::string(\"H\"), \"ello World!\n\");\n      |                                        ^~~~~~~~~~~~~~~\nCompiler returned: 0\n</code></pre>\n <p>\n  so a 32 bit address like 0x880d32 is passed as an argument to a 64 bit program\n </p>\n <p>\n  i was wondering under what circumstances edx would be passed instead of rdx\n  \n\n  so i\n  <a href=\"http://demangler.com/\" rel=\"nofollow noreferrer\">\n   demangled\n  </a>\n  the\n </p>\n <pre><code> _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_  \n</code></pre>\n <p>\n  which resulted in\n </p>\n <pre><code>std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) \n</code></pre>\n <p>\n  so the code in question actually uses an\n  <strong>\n   Rvalue Reference Declaration\n  </strong>\n </p>\n <p>\n  <strong>\n   c++11 feature\n   <a href=\"https://en.wikipedia.org/wiki/C%2B%2B11#Rvalue_references_and_move_constructors\" rel=\"nofollow noreferrer\">\n    gccrvalueref\n   </a>\n   ,\n   <a href=\"https://docs.microsoft.com/en-us/cpp/cpp/rvalue-reference-declarator-amp-amp?view=msvc-160\" rel=\"nofollow noreferrer\">\n    msvcrvalueref\n   </a>\n  </strong>\n  \n\n  and instead of passing a reference uses an explicit char*\n  \n\n  the construction can be ascertained by compiling the code below and looking at disassembly.\n </p>\n <p>\n  code for test\n </p>\n <pre><code>#include <iostream>\n#include <string>\nstd::string foo(std::string _lhs,char *_rhs)\n{\n    return std::operator+(_lhs , _rhs);\n}\nint main()\n{\n    char rval[] = {\"ello World!\n\"};\n    std::cout << foo(std::string(\"H\"), rval);\n    std::cout << foo(std::string(\"H\"), \"ello World!\n\");\n    \n}\n</code></pre>\n <p>\n  disassembly of first call to foo() uses proper 64 bit rdx\n </p>\n <pre><code>  lea rax, [rbp-176]\n  lea rdx, [rbp-189]\n  lea rcx, [rbp-144]\n  mov rsi, rcx\n  mov rdi, rax\n  call foo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char*)\n</code></pre>\n <p>\n  disassembly of second call to foo() uses a 32 bit offset edx\n </p>\n <pre><code>  lea rax, [rbp-96]\n  lea rcx, [rbp-64]\n  mov edx, OFFSET FLAT:.LC1 and if linked mov edx,0x402007 a 32 bit address\n  mov rsi, rcx\n  mov rdi, rax\n  call foo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char*)\n.LC1:\n  .string \"ello World!\n\"\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 10, 2021 at 7:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}