{
    "title": "Collapsing a range into a hidden area, but excluding a possible label at the start of range",
    "link": "https://reverseengineering.stackexchange.com/questions/12433/collapsing-a-range-into-a-hidden-area-but-excluding-a-possible-label-at-the-sta",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Suppose you have code like this (and you don't want to shell out the amount for the HexRays decompiler plugin):\n </p>\n <pre><code>loc_4BEEEF:                             ; CODE XREF: DriverEntry+28j\n                push    50505050h       ; Tag\n                push    1234h           ; NumberOfBytes\n                push    ebx             ; PoolType\n                call    ds:ExAllocatePoolWithTag\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n <p>\n  Now for these cases I tend to write IDC scripts that collapse the\n  <code>\n   push\n  </code>\n  ,\n  <code>\n   push\n  </code>\n  ,\n  <code>\n   push\n  </code>\n  ,\n  <code>\n   call\n  </code>\n  into a single hidden area.\n </p>\n <p>\n  However, since the hidden areas in IDA seem to be based on the address and the first\n  <code>\n   push\n  </code>\n  is a \"named location\", the indication that this is a label gets lost when I \"name\" my hidden area with descriptive pseudo-code, like this:\n </p>\n <pre><code>; eax := ExAllocatePoolWithTag(ebx, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n <p>\n  and if I can deduce the value of\n  <code>\n   ebx\n  </code>\n  , as would be possible here, I'd even convert that into:\n </p>\n <pre><code>; eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n <p>\n  Is there\n  <strong>\n   any\n  </strong>\n  way, short of starting my hidden area\n  <em>\n   after\n  </em>\n  the first\n  <code>\n   push\n  </code>\n  , that would allow me to hide the instructions and replace them with more descriptive pseudo-code, while at the same time\n  <em>\n   retaining\n  </em>\n  the label/name that coincides with the passing of the (last) argument?!\n </p>\n <p>\n  That is, my goal is to have it something like:\n </p>\n <pre><code>loc_4BEEEF:                             ; CODE XREF: DriverEntry+28j\n; eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n <p>\n  (the comment behind the\n  <code>\n   loc_4BEEEF\n  </code>\n  label is\n  <em>\n   not\n  </em>\n  important to me, though)\n </p>\n <p>\n  Of course allocation is but one of the cases where this applies and where the first pushed (i.e. last) argument ends up at a named location.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "170",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Apr 13, 2016 at 12:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, you can use\n  <em>\n   manual instructions\n  </em>\n  .\n </p>\n <p>\n  From\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/651.shtml\" rel=\"nofollow\">\n   https://www.hex-rays.com/products/ida/support/idadoc/651.shtml\n  </a>\n  :\n </p>\n <blockquote>\n  <h3>\n   SetManualInsn\n  </h3>\n  <pre><code>// Specify instruction represenation manually.\n//      ea   - linear address\n//      insn - a string represenation of the operand\n// IDA will not check the specified instruction, it will simply display\n// it instead of the orginal representation.\n\nvoid   SetManualInsn   (long ea, string insn);\n</code></pre>\n </blockquote>\n <p>\n  You can test it through the UI via\n  <code>\n   Edit → Other → Manual instruction...\n  </code>\n  or by pressing\n  <kbd>\n   Alt\n  </kbd>\n  +\n  <kbd>\n   F2\n  </kbd>\n  .\n </p>\n <p>\n  You would set the manual instruction for address\n  <code>\n   0x4BEEEF\n  </code>\n  to\n  <code>\n   eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n  </code>\n  . You could then put the remaining\n  <code>\n   push\n  </code>\n  es and\n  <code>\n   call\n  </code>\n  into a hidden area, or alternatively, set manual instructions for those\n  <code>\n   push\n  </code>\n  and\n  <code>\n   call\n  </code>\n  instructions with\n  <code>\n  </code>\n  (blank space) as the manual instruction value.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Apr 16, 2016 at 0:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}