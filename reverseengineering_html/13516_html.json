{
    "title": "Finding a place to inject shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/13516/finding-a-place-to-inject-shellcode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am following the\n  <a href=\"https://g0blin.co.uk/rop-primer-0-2-vulnhub-writeup/\" rel=\"nofollow noreferrer\">\n   tutorial\n  </a>\n  for\n  <a href=\"https://www.vulnhub.com/entry/rop-primer-02,114/\" rel=\"nofollow noreferrer\">\n   ROP Primer\n  </a>\n  , level 0.\nThe tutorial sets the memory at the beginning of\n  <code>\n   [vdso]\n  </code>\n  writeable and executable and copies the shellcode there.\n </p>\n <p>\n  I do not know why, but it seems that\n  <code>\n   mprotect\n  </code>\n  fails for me:\n </p>\n <pre><code>(python exp.py; cat) | strace ./level0\n...\nmprotect(0xb7fff000, 8192, PROT_READ|PROT_WRITE|PROT_EXEC) = -1 ENOMEM (Cannot allocate memory)\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xa7fff804} ---\n+++ killed by SIGSEGV +++\n</code></pre>\n <p>\n  I changed the target address to\n  <code>\n   0x8048000\n  </code>\n  (got with\n  <code>\n   vmmap\n  </code>\n  in gdb-peda).\nNow\n  <code>\n   mprotect\n  </code>\n  does not return\n  <code>\n   -1\n  </code>\n  , but I still receive SIGSEGV:\n </p>\n <pre><code>(pyhton exp.py; cat) | strace ./level0\n...\nmprotect(0x8048000, 8192, PROT_READ|PROT_WRITE|PROT_EXEC) = 0\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x88048804} ---\n+++ killed by SIGSEGV +++\n</code></pre>\n <p>\n  I have examined memory addresses, the single difference from the tutorial was that the shellcode ended up at\n  <code>\n   0xbfff764\n  </code>\n  instead of\n  <code>\n   0xbfff754\n  </code>\n  , and I adjusted the python script accordingly.\n </p>\n <p>\n  I do not understand why I am getting these errors, especially because I am using a downloaded virtual machine. How can I get the shellcode run?\n </p>\n <p>\n  <strong>\n   UPDATE:\n  </strong>\n  I do not know if it has anything to do with the problem, but if I set a target address for\n  <code>\n   mprotect\n  </code>\n  (and later I expect\n  <code>\n   eip\n  </code>\n  to point there too) to an address that is outside from the mapped address space (according to\n  <code>\n   gdb\n  </code>\n  ),\n  <code>\n   si_addr\n  </code>\n  in the above error message will contain this address. But if the address belongs to the program's address space,\n  <code>\n   si_addr\n  </code>\n  will be different (and probably invalid), like above.\n </p>\n <p>\n  And if I execute it in\n  <code>\n   gdb\n  </code>\n  the region is set properly executable, and even the shellcode is executed.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "linux",
        "exploit"
    ],
    "user": "robert",
    "time": "Nov 7, 2021 at 10:02",
    "comments": [
        {
            "user": "Henrik Nordvik",
            "text": "<html><body><span class=\"comment-copy\">\n May be late to the party, but are you mprotect-ing the whole stack? The stack grows the \"oppsite\" way, so you need to mprotect the right part of the stack. Also the stack might be a different place when running in gdb versus outside. Run without and turn on core dumping, and load the dump in gdb afterwards.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not sure if this will help, but, if you're ever unsure whether or not shellcode is trying to run, try setting your shellcode to either \"\\xeb\\xfe\" (jmp -2) or \"\\xcc\" / \"\\xcd\\x03\" (both are int 0x03).\n </p>\n <p>\n  In the first case, the program will hang till it receives a signal (like, you kill it). In the latter cases, the program will die with a debug / tracepoint. That makes it really obvious whether or not it's working (it also works super well against remote servers, assuming an infinite loop will automatically get killed, to verify whether or not your code is actually running!)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ron Bowes",
            "time": "May 17, 2017 at 21:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Like any development process, bugs can be quite common and understanding them might not be so easy. That's why god created debugging. You should run your exercise program under a debugger and follow through the exploitation process in order to find out what and where things go sideways.\n </p>\n <p>\n  Without any additional information it's quite hard to guess what's the issue there. I suggest you post your conclusions of debugging the exploit and we can further answer your question.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Nov 9, 2021 at 9:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}