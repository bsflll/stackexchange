{
    "title": "Understanding ESIL",
    "link": "https://reverseengineering.stackexchange.com/questions/19799/understanding-esil",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I cross-compiled a simple program with the\n  <code>\n   aarch-linux-gnu-gcc\n  </code>\n  compiler for ARM. So the machine is \"ARM aarch64\". I want to understand a single instruction and it's realization in ESIL. The opcode of the instruction is:\n  <code>\n   movk x4, 0x40, lsl 16\n  </code>\n </p>\n <p>\n  The ESIL-string is:\n  <code>\n   -4294901761,x4,&,4194304,|,x4,=\n  </code>\n </p>\n <p>\n  Has anybody an idea, why it looks like that? Shouldn't it be a\n  <code>\n   <<\n  </code>\n  to \"shift left\"?\n </p>\n <p>\n  The R2 commands I run are:\n </p>\n <pre><code>aa\ne asm.syntax = att\ne asm.emu = true\npdfj\n</code></pre>\n <p>\n  (But i did this in R2pipe)\n </p>\n <p>\n  I am curious about the solution and thank you in advance! :)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "178",
    "tags": [
        "arm",
        "radare2"
    ],
    "user": "AndiYo",
    "time": "Nov 2, 2018 at 21:33",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n I think the constant has been calculated for the shift as both shift and value are constants.\n <code>\n  0x40<<16 = 4194304\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "AndiYo",
            "text": "<html><body><span class=\"comment-copy\">\n @sudhackar dammit, you are right. Thank you for your help. Should have seen that. ^^  But why would a compiler do something like this? Is the parallel loading to a register and shifting faster than parallel loading by itself?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}