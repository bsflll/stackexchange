{
    "title": "How to Secure .NET 8 MVC Project When Converting to a Desktop App with Electron.NET?",
    "link": "https://reverseengineering.stackexchange.com/questions/33379/how-to-secure-net-8-mvc-project-when-converting-to-a-desktop-app-with-electron",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a .NET 8 MVC project structured in three layers: Business, WebAPI, and Model. I want to convert it into a desktop application, so I used Electron.NET. However, I faced serious security concerns regarding my DLL files, as they can be easily decompiled.\n </p>\n <p>\n  I have tried obfuscation, but it is not strong enough for my needs. Ideally, I need to compile my code into a lower-level language like C++ or any other method that would make reverse engineering much harder.\n </p>\n <p>\n  Key Points:\n </p>\n <ul>\n  <li>\n   My project contains Views (Razor Pages/Views), so Minimal API is not\na suitable alternative.\n  </li>\n  <li>\n   I need a way to hide or encrypt my DLL files or convert them into a\nmore secure format.\n  </li>\n  <li>\n   I am open to alternative solutions, such as using another technology\nto compile or protect my code.\n  </li>\n </ul>\n <p>\n  What are the best practices to secure my Electron.NET applicationâ€™s backend code? Would AOT compilation or using a different language help? Any guidance would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "23",
    "tags": [
        "obfuscation",
        ".net",
        "c#",
        "security",
        "software-security"
    ],
    "user": "osman safa",
    "time": "Feb 5 at 20:51",
    "comments": [
        {
            "user": "hold-me",
            "text": "<html><body><span class=\"comment-copy\">\n AOT compilation will only delay a motivated attacker - or any such protection in general. What is your threat model? Who is your audience and your threat?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "osman safa",
            "text": "<html><body><span class=\"comment-copy\">\n agree that no protection is foolproof, but the goal is to make reverse engineering impractical.  Threat model:  Preventing casual reverse engineering. Protecting proprietary logic. Avoiding DLL tampering. Critical security stays on the backend, but frontend protection reduces the attack surface. Do you suggest a better approach?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n If you have a backend why placing sensible business logic in the client?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}