{
    "title": "Disassembling Hex to assembly, then what?",
    "link": "https://reverseengineering.stackexchange.com/questions/17483/disassembling-hex-to-assembly-then-what",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on a HEX string, which I figured out is a binary. I would like some pointers on what to do next after I have disassembled from hex to assembly. I'm just assuming that the architecture is possibly x86 and used onlinedisassembler.com to convert to assembly code.\n </p>\n <p>\n  Is there a way I can run/debug using gdb? It's a challenge, so I would need to either run the assembly, debug it or do a static analysis and find out what's happening! Any help would be appreciated.\n </p>\n <p>\n  The disassembled code looks something like this (not sharing the whole thing, just first two lines):\n </p>\n <pre><code>                       .data:00000000 77 90                            ja     0xffffff92\n                       .data:00000002 97                               xchg   edi,eax\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "hex"
    ],
    "user": "gremlin0x00",
    "time": "Feb 16, 2018 at 21:38",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Can you please share a few more lines? While your first two instructions doesn't really make sense as a start of a shellcode , 77 90 (decimal) can be translated to 0x4d 0x5a (Hex) Which is the famous \"MZ\" (ASCII) header of a PE file.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Write a program that would load that binary data to memory and jump with the execution to that area. If everything you assume is correct it will get executed (w/o problems) and you would be able to debug.\n </p>\n <p>\n  Really naïve loader might look like this (no error checking):\n </p>\n <pre><code>#include <stdio.h>\n#include <sys/mman.h>\n\nint main() {\n    FILE *fp = fopen(\"data\", \"rb\");\n\n    fseek(fp, 0, SEEK_END);\n    int size = ftell(fp); //size of you data\n    rewind(fp);\n    void *data = mmap(NULL, size, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE, -1, 0);\n\n    fread((void*)data, 1, size, fp);\n    typedef void (*exec_func)(void);\n    ((exec_func)data)();\n\n    fclose(fp);\n    return 0;\n}\n</code></pre>\n <p>\n  and if you data is\n </p>\n <blockquote>\n  <p>\n   hexdump data\n  </p>\n </blockquote>\n <pre><code>0000000 9090 0090                              \n0000003\n</code></pre>\n <p>\n  the it will execute 3x\n  <code>\n   nop\n  </code>\n  and crash.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Feb 17, 2018 at 7:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "gremlin0x00",
                    "text": "<span class=\"comment-copy\">thanks for guiding me, now I will figure out the next steps.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try using radare2 (radare.org).  It understands a variety of executable formats that it can disassemble.\n </p>\n <p>\n  Executables contain a header that controls loading the code into memory by the OS and where to start execution.  So starting with the first byte of the file is not really the program itself.  radare2 loads the executable and interprets the header and loads the actual code to disassemble it.  Debug code etc...\n </p>\n <p>\n  radare2 my_program.exe\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "kaosengr",
            "time": "Mar 23, 2018 at 15:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}