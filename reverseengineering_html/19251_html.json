{
    "title": "OllyDBG - Game Hacking",
    "link": "https://reverseengineering.stackexchange.com/questions/19251/ollydbg-game-hacking",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse game called Assault Cube where I am gonna be making game hacks for. I using Ollydbg to reverse though I have no theoretical understanding of asm at all. I just follow online videos and just guess and play around to see what results I get.\n </p>\n <p>\n  Anyways, I have found the gun function by placing breakpoints. Now I want to look inside that to find automatic shoot and no recoil. To find those I just nop one by one and see how it affects. But I have a problem I also included a picture for you guy to reference. When I nop addresses and it seems to be successful giving the results I need like automatic fire and no recoil. But when I write my hack in Visual Studio and apply the nops, compile and run. The game will crash. This is because I donâ€™t know how to determine what is the correct start and end of the function, though nopping a set of addresses still gave me my result but when compiled it will crash.\n </p>\n <p>\n  Long story short, how do I know the exact start and finish of the function even when nopping gives the result making you think you found it but once compiled you end up finding out it the right place but not the exactly right start/finish. I hope you understand what I mean. Please look at the picture I included. Thanks.\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/GGOGH.jpg\"/>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        "game-hacking"
    ],
    "user": "Learner",
    "time": "Sep 12, 2018 at 11:43",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n Did you realize that Assault Cube is Open Source?\n <a href=\"https://github.com/assaultcube/AC\" rel=\"nofollow noreferrer\">\n  github.com/assaultcube/AC\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It sounds to me like your problem is the code in VS, not what you've found through reversing. The beginning of the function there doesn't seem to matter in accordance to what you're trying to do. Correct me if I'm wrong, but it sounds to me like you're thinking you have to find your way to the beginning of the function so that you can then figure out how far into the function you need to go to change what you want to change.\n </p>\n <p>\n  That's an understandable train of thought given your level of experience. (If that's what you're thinking, that is; I'm making an assumption to craft a reply based on.)\n </p>\n <p>\n  First of all, what you want to do is luckily very easy (relatively speaking) since all you want to do is directly change bytes. Given that, what you generally need to do is find a direct reference to the memory address that the bytes/instructions of interest are stored in. Let's break down what that means for you.\n </p>\n <p>\n  Look at the line you have highlighted in the screenshot:\n </p>\n <pre><code>00463716 75 09 JNZ SHORT ac_clien.00463721\n</code></pre>\n <p>\n  <strong>\n   00463716\n  </strong>\n  : This is a memory address. It's where your bytes of interest are stored. This is where you'll want to find your way to in your program.\n </p>\n <p>\n  <strong>\n   75 09 JNZ SHORT ac_clien.00463721\n  </strong>\n  :\n  <code>\n   75 09\n  </code>\n  and\n  <code>\n   JNZ SHORT ac_clien.00463721\n  </code>\n  are the same thing. The bytes,\n  <code>\n   75 09\n  </code>\n  , are hexadecimal. They are a concise representation of binary sequences that the CPU understands. Why not just show the binary numbers directly instead of in hexadecimal? Well, let's look at what 75 09 is in binary:\n  <code>\n   111010100001001\n  </code>\n  .\n </p>\n <p>\n  Now imagine seeing all binary in that column in OllyDbg, as opposed to hexadecimal. Not only is it unwieldy, but with some instructions, the numbers would take up a ridiculous amount of space in the row. Also, it's much easier for you, the human reader, to know\n  <a href=\"https://c9x.me/x86/html/file_module_x86_id_146.html\" rel=\"nofollow noreferrer\">\n   what byte 75 means\n  </a>\n  as opposed to bits\n  <code>\n   1110101\n  </code>\n  , which is what the CPU ultimately understands.\n </p>\n <p>\n  The assembly instruction that you see in English (\n  <code>\n   JNZ SHORT ac_clien.00463721\n  </code>\n  ) is an even further distillation for us to be able to easily read the instruction. You see that and you know it says \"jump a short distance to memory address ac_clien.00463721 if the\n  <a href=\"https://www.csee.umbc.edu/courses/undergraduate/CMSC211/summer02/burt/tech_help/flags.html\" rel=\"nofollow noreferrer\">\n   zero flag\n  </a>\n  is not set\".\n </p>\n <p>\n  So, in the case of the instruction we're working with here, bits\n  <code>\n   1110101\n  </code>\n  is the same value as hex\n  <code>\n   75\n  </code>\n  is the same thing as\n  <code>\n   JNZ\n  </code>\n  . They're just different ways of representing the same thing, mostly for our sake so we don't have to try to read a bunch of 1s and 0s.\n </p>\n <p>\n  Bearing that in mind, you know that changing\n  <code>\n   JNZ\n  </code>\n  to\n  <code>\n   JMP\n  </code>\n  gives you automatic weapon fire. Thus, your program needs to find the memory address that byte is stored in (which, per the screenshot, is\n  <code>\n   463716\n  </code>\n  , but may change upon restart). Then your program needs to write a new byte that you want. The byte you want for\n  <code>\n   JMP\n  </code>\n  in this case is\n  <code>\n   EB\n  </code>\n  .\n </p>\n <p>\n  Now you have everything you need for coding up an application. This is where my help stops and your external research begins, because now you're in the territory of forward engineering (the reverse engineering process is completed). Are you trying to code your hack in C, C++, Visual C++, C#, or otherwise? Your choice of language will directly inform the approach you take for programmatically finding the game's process, opening it, finding its base address, then writing your byte to the correct offset therefrom.\n </p>\n <p>\n  Where 'X' is your programming language of choice, questions like, \"How do I find the base address of a game or program in X\"; \"How do I find the process ID of a game or program in X\"; \"How do I write bytes to a memory address in X\", and so forth should lead you down the right path.\n </p>\n <p>\n  Finally, since you're hacking Assault Cube, I recommend signing up over on\n  <a href=\"http://guidedhacking.com\" rel=\"nofollow noreferrer\">\n   the Guided Hacking forum\n  </a>\n  and inquiring there. They've used that game specifically as a target for countless tutorials of theirs over the years, and there are a lot of very experienced programmers who can help you through the basics, including learning about all the things you don't even know to ask about right now.\n </p>\n <p>\n  Hope that helps!\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "dsasmblr",
            "time": "Sep 12, 2018 at 17:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Important note: Reverse engineering of proprietary products can be legal issue, make sure you covered on it.\n </p>\n <p>\n  Regarding your question:\n </p>\n <ol>\n  <li>\n   Download IDA Free 7.0\n   <a href=\"https://www.hex-rays.com/products/ida/support/download_freeware.shtml\" rel=\"nofollow noreferrer\">\n    https://www.hex-rays.com/products/ida/support/download_freeware.shtml\n   </a>\n  </li>\n  <li>\n   Load binary you try to debug in Olly in IDA and go to the specific address you see on the picture. [Press G and enter 0x463016 for example]\n  </li>\n  <li>\n   Let's hope it's not obfuscated and/or apply ant other techniques - you will  find yourself in address near the jnz  instruction\n  </li>\n  <li>\n   If not already inside the function [you should see instructions in some \nwhite cubical], then press Space button to switch to graph mode.\n  </li>\n  <li>\n   <p>\n    Scroll up to the beginning of the function - here you have your address [put cursor on first instruction and press Space again to switch back to disassembly mode] - this will be the\n    <strong>\n     start of the function\n    </strong>\n   </p>\n  </li>\n  <li>\n   <p>\n    There are multiple ways to get to the\n    <strong>\n     end of function\n    </strong>\n    from position on the screenshot:\n   </p>\n   <p>\n    6.1 Scroll down to the ret instruction in graph mode [there can be more than one!] - this will be the end of the function [or there may be multiple function exits via call or jmp instructions as well]\n   </p>\n   <p>\n    6.2 Another way to learn the end of function is Ctrl + F9 in Olly [if i remember correctly] - it will break on first ret.\n   </p>\n   <p>\n    6.3 Another option was described here:\n    <a href=\"https://reverseengineering.stackexchange.com/questions/3302/jump-back-to-the-caller\">\n     Jump back to the caller\n    </a>\n   </p>\n  </li>\n </ol>\n <p>\n  And if you really want to RE - learn some disassembly tools together with debuggers, this will help you understand the logic :)\n </p>\n <p>\n  Good Luck.\n </p>\n <p>\n  D.L.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Denis Laskov",
            "time": "Sep 4, 2018 at 15:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Learner",
                    "text": "<span class=\"comment-copy\">IF ANYONE WOULD LIKE TO GIVE MORE TIPS PLEASE FEEL FREE. Please keep it basic and simple to understand as I know not much.</span>",
                    "time": null
                }
            ]
        }
    ]
}