{
    "title": "Hiding call to ptrace [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/11293/hiding-call-to-ptrace",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has answers here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/1930/detecting-tracing-in-linux\">\n      Detecting tracing in Linux\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (3 answers)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2015-11-18 05:54:22Z\">\n      9 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  I am trying to detect whether my executable is running in a debugger.\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1930/detecting-tracing-in-linux\">\n   Here\n  </a>\n  is a solution using\n  <code>\n   ptrace\n  </code>\n  .\nMy problem is that even if my executable is stripped (\n  <code>\n   strip a.out\n  </code>\n  ) I am able to find with gdb the following code snippet:\n </p>\n <pre><code>0x00000000004007e9: mov    $0x0,%ecx\n0x00000000004007ee: mov    $0x1,%edx\n0x00000000004007f3: mov    $0x0,%esi\n0x00000000004007f8: mov    $0x0,%edi\n0x00000000004007fd: mov    $0x0,%eax\n0x0000000000400802: callq  0x4006d0 <ptrace@plt>\n0x0000000000400807: cmp    $0xffffffffffffffff,%rax\n</code></pre>\n <p>\n  I simply run\n  <code>\n   (gdb)info files\n  </code>\n  , and disassembled the memory location belonging to\n  <code>\n   .text\n  </code>\n  .\nIs there a way to get rid from\n  <code>\n   <ptrace@plt>\n  </code>\n  , or is there a better way to detect the debugger beside the methods based on software breakpoints or execution time measuring?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "gdb",
        "anti-debugging"
    ],
    "user": "robert",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You have 2 simple options:\n </p>\n <ul>\n  <li>\n   You can link your executable statically and then strip (add -static to compiler/linker command line).\n  </li>\n  <li>\n   You can invoke ptrace system call using inline assembly\n  </li>\n  <li>\n   If you will invoke ptrace as system call with inline assembly you can obfuscate calculation of syscall parameters (index of system call is passed via registers, and you can calculate this number instead of using correct number directly for example).\n  </li>\n </ul>\n <p>\n  <strong>\n   EDIT:\n  </strong>\n </p>\n <p>\n  The number of other, more complicated options, is endless.\nFor example you can call this ptrace by function pointer, which is calculated dynamically. There are a lot of ways to obfuscate a function pointer value.\n </p>\n <p>\n  Please note that using obfuscation of any kind is \"security through obscurity\" and not too much effective without other, more effective measures such as encryption.\n </p>\n <p>\n  Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Nov 10, 2015 at 14:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}