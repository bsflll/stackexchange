{
    "title": "Android - Analyzing complex hash algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/11752/android-analyzing-complex-hash-algorithm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An APK I'm working on uses some sort of algorithm to generate a hash which is sent along with an HTTP request. I want to figure out how the algorithm works.\n </p>\n <p>\n  Decompiling the APK to Java is of no help at all because it is much too obfuscated and there is clearly a ton of jumping around to separate files, it's impossible to follow.\n </p>\n <p>\n  Analysing the SMALI is much more helpful, but still very difficult to follow due to the use of many different files, and also the generic/meaningless function names.\n </p>\n <p>\n  I have IDA Pro but I don't have the Hex rays decompiler. There is also an extremely small amount of tutorials on using IDA Pro with Android. Is IDA Pro useless here? Smali is definitely easier to understand than the raw machine code instructions.\n </p>\n <p>\n  What are my options for analysing and figuring out this algorithm?\n </p>\n <p>\n  Thank you for your suggestions\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "android",
        "decompile",
        "apk"
    ],
    "user": "43.52.4D.",
    "time": "Jan 13, 2016 at 5:50",
    "comments": [
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n What is the apk name and sha256? If it really has strong bytecode obfuscation, I'd be curious to take a look. You don't see that on Android often. Most apps either have weak obfuscation (Proguard) or just use a packer.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n com.instagram.android?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "43.52.4D.",
            "text": "<html><body><span class=\"comment-copy\">\n @Antimony yes that's correct. I pulled the APK from my phone with adb. Then I used Apktool to convert to SMALI. I can tell you more about the app in a chatroom if you need.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n I took a look, but I didn't see any unusual obfuscation. Just a bit of identifier renaming. Any recent decompiler should work here.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "43.52.4D.",
            "text": "<html><body><span class=\"comment-copy\">\n @Antimony what approach would you take personally to learning how an algorithm generates a value? Do you mean decompiler like Apktool or disassembler like IDA Pro?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA PRO is useful for analyzing native code. Hex-Rays decompiler decompiles ARM and x86/x64, not java. For your specific case IDA pro would be useful if this hashing algorithm would be compiled in native code and called with JNI like interface.\n </p>\n <p>\n  For your specific case IDA is almost useless because almost all of its advantages related to native code analysis.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Jan 13, 2016 at 8:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "43.52.4D.",
                    "text": "<span class=\"comment-copy\">What could I utilize to analyse how this algorithm works then?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">There is no other choice, you have to deobfuscate the APK code. In addition I'd suggest you to read answers to this question: <a href=\"http://reverseengineering.stackexchange.com/questions/1370/what-is-a-good-java-decompiler-and-deobfuscator\" title=\"what is a good java decompiler and deobfuscator\">reverseengineering.stackexchange.com/questions/1370/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "43.52.4D.",
                    "text": "<span class=\"comment-copy\">Well a strange dilemma is that using Apktool to convert to SMALI makes the code more understandable/less obfuscated than attempting to convert to Java source code.  If there was a way to convert SMALI to java source code, that would be helpful.</span>",
                    "time": null
                }
            ]
        }
    ]
}