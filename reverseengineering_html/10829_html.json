{
    "title": "Variable's position on stack",
    "link": "https://reverseengineering.stackexchange.com/questions/10829/variables-position-on-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanna create a script/program that will modify value in memory of another process. With GDB I've discovered that variable I want modify is located on heap. Because this variable is create dynamically with every program start, it is placing under another address. I've tried to find pointer on a stack that will point to this value, but also pointer is in another place every program start. Finally I've found variable position with breakpoint in main loop and reading position from registers.\n </p>\n <p>\n  Is any better way to find variable that will be good for script?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "803",
    "tags": [
        "gdb",
        "dynamic-analysis",
        "stack-variables",
        "pointer"
    ],
    "user": "bigben",
    "time": "Sep 9, 2015 at 21:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd change the variable right when it's created and stored into its position. For example, if one function calls another, that other function returns the variable, and the first function stores it somewhere, this will look in assembly somewhat like\n </p>\n <pre><code>80483e7:       e8 d8 ff ff ff          call   80483c4 <value>\n80483ec:       8b 54 24 1c             mov    0x1c(%esp),%edx\n80483f0:       89 02                   mov    %eax,(%edx)\n</code></pre>\n <p>\n  where\n  <code>\n   0x1c(%esp)\n  </code>\n  holds the pointer to the variable, and\n  <code>\n   %eax\n  </code>\n  is the value to store there.\n </p>\n <p>\n  Now, you just need a gdb input script like this:\n </p>\n <pre><code>break *0x80483f0\nrun\nset $eax=7\ncont\n</code></pre>\n <p>\n  and your program with\n </p>\n <pre><code>gdb myprog < gdb.in\n</code></pre>\n <p>\n  where\n  <code>\n   myprog\n  </code>\n  is your program and\n  <code>\n   gdb.in\n  </code>\n  is the above script.\n </p>\n <p>\n  If you really need to change the variable later, when the program is running,\ndo the same, but replace the\n  <code>\n   set $eax=7\n  </code>\n  with\n  <code>\n   info registers\n  </code>\n  and redirect the output to a file. Then, when you want to change the variable, read that file, parse the address from it, and use that address to store your variable to.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Sep 10, 2015 at 10:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bigben",
                    "text": "<span class=\"comment-copy\">Currently I do modification with this method but I'm looking for method without breakpoint.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">If the location is variable, then you can't know in advance where it will be.  Your only option is to capture the location when it is generated, which requires either a breakpoint or a patching a detour directly in memory.</span>",
                    "time": null
                }
            ]
        }
    ]
}