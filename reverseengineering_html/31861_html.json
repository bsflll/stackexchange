{
    "title": "Load PDB for MemoryModule-loaded DLL in x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/31861/load-pdb-for-memorymodule-loaded-dll-in-x64dbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to debug a DLL, which I have a PDB file for.\n </p>\n <p>\n  The debug target is a program, that loads the DLL using MemoryModule library from\n  <a href=\"https://github.com/fancycode/MemoryModule\" rel=\"nofollow noreferrer\">\n   Github\n  </a>\n  .\n </p>\n <p>\n  The loaded module isn't listed as a module in x64dbg, since it has been loaded with\n  <code>\n   MemoryLoadLibraryEx\n  </code>\n  function, but module handle is still valid and it's all been successfully loaded and initialized.\n </p>\n <p>\n  I've tried\n  <code>\n   symload\n  </code>\n  x64dbg command with address as the argument pointing to the beginning of the memory-loaded module\n  <code>\n   MZ...\n  </code>\n  , tried pointing to\n  <code>\n   PE...\n  </code>\n  signature as well, but no success.\n </p>\n <p>\n  How do I tell x64dbg that memory at an address is a valid module, so that I could load a PDB for that module?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "367",
    "tags": [
        "dll",
        "x64dbg",
        "dynamic-linking",
        "debugging-symbols",
        "pdb"
    ],
    "user": "Ri0ee",
    "time": "May 12, 2023 at 12:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  x64dbg has the\n  <a href=\"https://help.x64dbg.com/en/latest/commands/analysis/virtualmod.html\" rel=\"nofollow noreferrer\">\n   virtualmod\n  </a>\n  command, which (in theory) can be used to detect modules loaded from memory, rather than via\n  <code>\n   LoadLibrary*\n  </code>\n  APIs:\n </p>\n <blockquote>\n  <p>\n   virtualmod\n   \n\n   \n\n   Tell the debugger to treat a memory range as a virtual module.\n   \n\n   \n\n   Arguments:\n   \n\n   <code>\n    arg1\n   </code>\n   the user-supplied module name.\n   \n\n   <code>\n    arg2\n   </code>\n   the base of the memory range.\n   \n\n   <code>\n    [arg3]\n   </code>\n   the size of the memory range.\n  </p>\n </blockquote>\n <p>\n  However, this  command seems to be broken at the time of writing this answer. I've experimented a little bit and managed to make it functional, see this\n  <a href=\"https://github.com/ynwarcs/x64dbg/commit/aa0a5cd82cdb1998af2f9f020fefd86db368f2b4\" rel=\"nofollow noreferrer\">\n   commit\n  </a>\n  in a forked repository for reference. This will allow you to see the module in x64dbg, as well as its symbols, exports, imports etc. For a fully native experience, though, a fix is needed in MemoryModule as well - see this\n  <a href=\"https://github.com/ynwarcs/MemoryModule/commit/10250ad4b7ee464579dfb13605427bad1626cbd9\" rel=\"nofollow noreferrer\">\n   commit\n  </a>\n  in a forked repository for reference.\n </p>\n <p>\n  To use it, execute the following in x64dbg:\n </p>\n <pre><code>virtualmod some_module_name.dll, 0xsome_base_address\n</code></pre>\n <p>\n  If you don't mind building your own x64dbg and MemoryModule and applying these fixes, this should work out-of-the-box (no promises though). I've also opened\n  <a href=\"https://github.com/x64dbg/x64dbg/issues/3094\" rel=\"nofollow noreferrer\">\n   an issue\n  </a>\n  in x64dbg to discuss the state of\n  <code>\n   virtualmod\n  </code>\n  and whether it can be fixed in the main branch as well.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "ynwarcs",
            "time": "May 15, 2023 at 11:35",
            "is_accepted": true,
            "comments": []
        }
    ]
}