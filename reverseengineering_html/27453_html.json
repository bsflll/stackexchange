{
    "title": "Confused about the use of the shl instruction in this disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/27453/confused-about-the-use-of-the-shl-instruction-in-this-disassembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I created a code construct in C to see how it looks in x86. I'm confused about the use of the shl instructions. I'm confused about what is happening in between the lines <+39> and <+51> I don't get how those instructions translate to the source code.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/JW4Dm.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Code construct\" src=\"https://i.sstatic.net/JW4Dm.png\"/>\n  </a>\n </p>\n <p>\n  Here's the source code:\n  <a href=\"https://i.sstatic.net/Nz3r7.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Source\" src=\"https://i.sstatic.net/Nz3r7.png\"/>\n  </a>\n </p>\n <p>\n  It's obviously compiler optimisation but I'm not understanding how that would be equal to multiplying by 21. [It's bit shifting eax, 0x2, or multiplying by 4 twice, but I don't understand how the add instructions make it go from multiplying by 16 to 21]\n </p>\n <p>\n  Thanks for any help! Rohail.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "301",
    "tags": [
        "disassembly",
        "x86",
        "c",
        "gdb"
    ],
    "user": "Constructive",
    "time": "Apr 13, 2021 at 11:50",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi, I'd say it's still a good idea to swap your screenshot for actual text even now after you got an answer.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Let's break it down line by line. Assuming\n  <code>\n   x\n  </code>\n  is the thing you want to multiply by\n  <code>\n   21\n  </code>\n  and it's stored in\n  <code>\n   eax\n  </code>\n  (as it is in this example after line\n  <code>\n   34\n  </code>\n  ).\n </p>\n <pre><code><39>: mov edx, eax  ; so copy the x to edx\n<41>: mov eax, edx  ; it's pointless to do this mov; after those two lines eax & edx has the value of x\n<43>: shl eax, 2    ; so eax = x * 4\n<46>: add eax, edx  ; so eax = x * 5  (x * 4 + x)\n<48>: shl eax, 2    ; so eax = x * 20 (x * 5 * 4)\n<51>: add eax, edx  ; so eax = x * 21 (x * 5 * 4 + x)\n</code></pre>\n <p>\n  PS. For the future please post code as a text. Much easier to copy than from the image.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Paweł Łukasik",
            "time": "Apr 13, 2021 at 12:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Constructive",
                    "text": "<span class=\"comment-copy\">Thanks for the help!</span>",
                    "time": null
                }
            ]
        }
    ]
}