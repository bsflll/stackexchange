{
    "title": "Can radare2 skip syscall when `db main;dts+;dc`",
    "link": "https://reverseengineering.stackexchange.com/questions/31804/can-radare2-skip-syscall-when-db-maindtsdc",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  more detailed see\n  <a href=\"https://github.com/radareorg/radare2/issues/21585#issuecomment-1506947579\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n </p>\n <p>\n  In short, I want to skip syscall when recording program, but it seems that the program would always stop after ths syscall.\n </p>\n <p>\n  Hope someone can help me. Thanks.\n </p>\n <p>\n  below is running results:\n </p>\n <pre class=\"lang-bash prettyprint-override\"><code>$ git rev-parse origin/master\n093d583000f9f78ec1a4d8643cb59e465a0ede7c\n$ git diff origin/master \ndiff --git a/libr/main/radare2.c b/libr/main/radare2.c\nindex 2bc1cb68f9..15ce049d9c 100644\n--- a/libr/main/radare2.c\n+++ b/libr/main/radare2.c\n@@ -1706,7 +1706,7 @@ R_API int r_main_radare2(int argc, const char **argv) {\n                        debug = r_config_get_b (r->config, \"cfg.debug\");\n                        if (ret != -1 && r_cons_is_interactive ()) {\n                                char *question;\n-                               bool no_question_debug = ret & 1;\n+                               bool no_question_debug = 1;\n$ r2 -NAd -c \"db main;dts+;db;dc;dr rip;pd-- 4\" /mnt/ubuntu/home/czg/csapp3e/asm/prog\n...\n0x00401060 - 0x00401061 1 --x sw break enabled valid cmd=\"\" cond=\"\" name=\"main\" module=\"/mnt/ubuntu/home/czg/csapp3e/asm/prog\"\n0x7fbe6445b08b\n            0x7fbe6445b07e      6690           nop\n            ; CALL XREF from map._usr_lib_ld_linux_x86_64.so.2.r_x @ +0x198ae(x)\n            ; CALL XREFS from rip @ +0x5238(x), +0x5252(x)\n            0x7fbe6445b080      f30f1efa       endbr64\n            0x7fbe6445b084      b80c000000     mov eax, 0xc            ; 12\n            0x7fbe6445b089      0f05           syscall\n            0x7fbe6445b08b      488905e64101.  mov qword [0x7fbe6446f278], rax ; [0x7fbe6446f278:8]=0\n            0x7fbe6445b092      4839f8         cmp rax, rdi\n        ,=< 0x7fbe6445b095      7209           jb 0x7fbe6445b0a0\n        |   0x7fbe6445b097      31c0           xor eax, eax\n[0x7fdcd2e4908b]> ds\n[0x7fdcd2e4908b]> dr rip\n0x7fdcd2e49092\n</code></pre>\n <p>\n  Best regards\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "49",
    "tags": [
        "debugging",
        "radare2"
    ],
    "user": "An5Drama",
    "time": "Apr 20, 2023 at 11:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have answered in the github ticket. But I'm copypasting the answer for practical reasons :9\nThat's the oneliner you want:\n </p>\n <p>\n  <code>\n   r2 -c “dcu main;e dbg.trace=true;dsu -1;dt” -d /bin/ls\n  </code>\n </p>\n <p>\n  Some comments below:\n </p>\n <ul>\n  <li>\n   The dts+ command is used for stepback and dumps/records the state of memory in disk for every step which is not what you want\n  </li>\n  <li>\n   dbg.swstep is causing an stack exhaustion if you try to run the whole program ( i need to fix this )\n  </li>\n  <li>\n   dsu -1 is the only way you have to perform step until the program is gone. a helper command under\n   <code>\n    dc\n   </code>\n   would be easier to spot\n  </li>\n  <li>\n   You cant pass flags after the -d\n  </li>\n  <li>\n   No need to analyze the program or avoid home scripts (-NA)\n  </li>\n  <li>\n   Use the dtj command to log the traces in json format if you want to post process the execution information\n  </li>\n  <li>\n   I would recommend disabling ASLR if you want to do multiple traces and compare them\n  </li>\n </ul>\n <p>\n  Also, bear in mind that you can't use\n  <code>\n   dtd\n  </code>\n  if you run the traces until the program dies, because there will be no memory allocated and you cant disassemble . better to continue until a specific address or exit syscall or so.\n </p>\n <p>\n  Another thing is that you are tracing EVERYTHING so you probably want to see other vars like dbg.trace.inrange or dbg.trace.libs to avoid recording instructions from libraries or from sections of the binary that you dont need.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "pancake",
            "time": "Apr 20, 2023 at 20:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}