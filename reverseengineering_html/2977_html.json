{
    "title": "How can I clean up strings built at runtime (stack strings)?",
    "link": "https://reverseengineering.stackexchange.com/questions/2977/how-can-i-clean-up-strings-built-at-runtime-stack-strings",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can I clean up/simplify strings that are built at runtime?\n </p>\n <p>\n  I've seen this a couple of times and figured that there has to be something easier. I've been manually converting the characters to try and interpret what strings are being formed.\n </p>\n <pre><code>.text:0040166E C6 45 F0 5C   mov     [ebp+pszSubKey+2Ch], '\\'\n.text:00401672 C6 45 F1 57   mov     [ebp+pszSubKey+2Dh], 'W'\n.text:00401676 C6 45 F2 69   mov     [ebp+pszSubKey+2Eh], 'i'\n.text:0040167A C6 45 F3 6E   mov     [ebp+pszSubKey+2Fh], 'n'\n.text:0040167E C6 45 F4 6C   mov     [ebp+pszSubKey+30h], 'l'\n.text:00401682 C6 45 F5 6F   mov     [ebp+pszSubKey+31h], 6Fh\n.text:00401686 C6 45 F6 67   mov     [ebp+pszSubKey+32h], 67h\n.text:0040168A C6 45 F7 6F   mov     [ebp+pszSubKey+33h], 6Fh\n.text:0040168E C6 45 F8 6E   mov     [ebp+pszSubKey+34h], 6Eh\n.text:00401692 C6 45 F9 5C   mov     [ebp+pszSubKey+35h], 5Ch\n</code></pre>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 3,
    "views": "671",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "phoenix89",
    "time": "Jun 1, 2022 at 10:35",
    "comments": [
        {
            "user": "jvoisin",
            "text": "<html><body><span class=\"comment-copy\">\n Can't you just put a breakpoint after the string builder function ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phoenix89",
            "text": "<html><body><span class=\"comment-copy\">\n I could set a breakpoints but I am trying to simplify it for all occurrences not just the one time.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "jvoisin",
            "text": "<html><body><span class=\"comment-copy\">\n The \"hackish\" way could be to break after all strings are built, and to run the \"strings\" command on the memomy dump.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://www.arbornetworks.com/asert/2013/07/asert-mindshare-finding-byte-strings-using-idapython/\">\n   Finding Byte Strings using IDAPython\n  </a>\n </p>\n <p>\n  ASERT MindshaRE solves this right. No need to actually run the code which isn't always possible.\n </p>\n <p>\n  Effectively this script will go through instruction by instruction to find moves of ASCII characters into a memory location. It gets fancy and used QT to create an interactive table however you can gut out that part and just have it place a comment at the instruction that gets used.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "jbh",
            "time": "Jan 25, 2014 at 3:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">Script looks neat, but it fails on x64 apparently. Will try to patch :)</span>",
                    "time": null
                },
                {
                    "user": "jbh",
                    "text": "<span class=\"comment-copy\">Yeah, the one thing I noticed about the script is it relied heavily on strings being equivalent. (it is looking for \"mov\" and \"[e\") So it will definitely only work on x86. I reimplemented it for different architectures but have misplaced it.</span>",
                    "time": null
                },
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">I started patching it - making it work with x64 was a matter of changing [e to [(e|r) however it then makes an assumption that the 1st mov will be mov [rsp],'x' whereas in my case it is mov [rsp+138h+var_118], 'x'. Back to patching...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The one that worked for me eventually was \"\n  <a href=\"https://github.com/mandiant/flare-ida/blob/master/plugins/stackstrings_plugin.py\" rel=\"nofollow noreferrer\">\n   stackstrings\n  </a>\n  \" plugin from FireEye/Mandiant FLARE (\n  <a href=\"https://github.com/mandiant/flare-ida/blob/master/python/flare/stackstrings.py\" rel=\"nofollow noreferrer\">\n   based on this module\n  </a>\n  )\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Jun 1, 2022 at 10:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You could use\n  <a href=\"http://www.idabook.com/x86emu/\" rel=\"nofollow\">\n   ida-x86emu\n  </a>\n  to emulate the dynamic construction of the string.\n </p>\n <p>\n  But if you want something more automated then you'd need to write an IDA script or plugin.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Oct 30, 2013 at 16:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}