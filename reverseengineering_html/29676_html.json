{
    "title": "identify the functions of stripped binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/29676/identify-the-functions-of-stripped-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As far I know that stripped binaries when we decompile it we can't know what most of functions (\n  <code>\n   sub_XXXXXX\n  </code>\n  ) really do becuase they are not part of the binary's symbol table, so the names are automatically generated by IDA which called Dummy names\n </p>\n <pre><code>Dummy names are automatically generated by IDA. They are used to denote subroutines, program locations and data.\n>> https://www.hex-rays.com/products/ida/support/idadoc/609.shtml\n</code></pre>\n <p>\n  Yesterday I reverse-engineered a program and I used IDA Decompiler to see how the program works and i notices the dummy (functions) names, one of them after many hours trying to spot the implementation\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/q2uw4.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/q2uw4.jpg\"/>\n  </a>\n </p>\n <p>\n  I found out (accidentally) that it was strtol's implementation\n </p>\n <p>\n  <a href=\"https://code.woboq.org/gcc/libiberty/strtol.c.html\" rel=\"nofollow noreferrer\">\n   https://code.woboq.org/gcc/libiberty/strtol.c.html\n  </a>\n </p>\n <p>\n  <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_strtol.htm\" rel=\"nofollow noreferrer\">\n   https://www.tutorialspoint.com/c_standard_library/c_function_strtol.htm\n  </a>\n </p>\n <hr/>\n <p>\n  So is there a tricks/tips or tools maybe like FIRST (\n  <a href=\"https://talosintelligence.com/first\" rel=\"nofollow noreferrer\">\n   https://talosintelligence.com/first\n  </a>\n  ) to let us know what these functions are ?\n </p>\n <p>\n  P.S: The question is not exclusive to IDA\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "489",
    "tags": [
        "ida",
        "decompilation"
    ],
    "user": "K. John Michel",
    "time": "Dec 6, 2021 at 5:01",
    "comments": [
        {
            "user": "R4444",
            "text": "<html><body><span class=\"comment-copy\">\n did you look @ this question?\n <a href=\"https://reverseengineering.stackexchange.com/questions/175/what-is-a-flirt-signature\" title=\"what is a flirt signature\">\n  reverseengineering.stackexchange.com/questions/175/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The solution to this problem would probably be the use of function signatures. Most common re tools like IDA (FLIRT), ghidra and r2 (zignatures) support this. The only problem is that if the signatures for the libraries your executable was compiled against don't exist in the community you have to create them yourself\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "leongross",
            "time": "Mar 4, 2023 at 14:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}