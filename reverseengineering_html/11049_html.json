{
    "title": "Breakpoint to debug Android Native Shared Library",
    "link": "https://reverseengineering.stackexchange.com/questions/11049/breakpoint-to-debug-android-native-shared-library",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to solve FLARE-on 2015 challenge #06 (\n  <a href=\"http://www.flare-on.com/files/2015_FLAREOn_Challenges.zip\" rel=\"nofollow\">\n   http://www.flare-on.com/files/2015_FLAREOn_Challenges.zip\n  </a>\n  ) using a dynamic analysis approach. It's an Android APK that loads a shared library (libvalidate.so). I have been able to break where this library is loaded but then, it seems that I'm not able to set other breakpoints within this library, which is critical to solve this challenge.\n </p>\n <p>\n  Here is what I've been able to do so far:\n </p>\n <p>\n  *Started the FLAREON android application (\n  <code>\n   PID: 1278\n  </code>\n  ) on my Android Virtual Device (AVD) and entered a wrong password to force libvalidate.so to appear in the loaded shared libraries\n </p>\n <p>\n  *Port forwarding:\n </p>\n <pre><code>mobisec $ adb forward tcp:1234 tcp:1234\nmobisec $ adb shell\navd # cd /data/\navd # ./gdbserver :1234 --attach 1278\nAttached; pid = 1278\nListening on port 1234\n</code></pre>\n <p>\n  *On Mobisec, in another terminal:\n </p>\n <pre><code>mobisec # cd /opt/mobisec/Android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/\nmobisec # ./arm-linux-androideabi-gdb\n(gdb) target remote :1234\nRemote debugging using :1234\n0xb6eca5cc in ?? ()\n(gdb) set solib-search-path /data/flareon/system_lib/\n[...removed...]\nReading symbols from /data/flareon/system_lib/libvalidate.so...(no debugging symbols found)...done.\nLoaded symbols for /data/flareon/system_lib/libvalidate.so\n[...removed...]\n\n(gdb) info sharedlibrary \nError reading attached process's symbol file.\ncom.flare_on.flare: No such file or directory.\nFrom        To          Syms Read   Shared Object Library\n[...removed...]\n0xab137e20  0xab139038  Yes (*)     /data/flareon/system_lib/libvalidate.so\n(gdb) \n(gdb) x/50i 0xab137e20\n   0xab137e20:  ldr     r0, [pc, #4]    ; 0xab137e2c\n   0xab137e24:  add     r0, pc, r0\n   0xab137e28:  b       0xab137da8\n   0xab137e2c:  ldrdeq  r4, [r0], -r4   ; <UNPREDICTABLE>\n   0xab137e30:  cmp     r0, #0\n   0xab137e34:  push    {r3, lr}\n   0xab137e38:  popeq   {r3, pc}\n   0xab137e3c:  blx     r0\n   0xab137e40:  pop     {r3, pc}\n   0xab137e44:  mov     r1, r0\n   0xab137e48:  ldr     r2, [pc, #12]   ; 0xab137e5c\n   0xab137e4c:  ldr     r0, [pc, #12]   ; 0xab137e60\n   0xab137e50:  add     r2, pc, r2\n   0xab137e54:  add     r0, pc, r0\n   0xab137e58:  b       0xab137d9c\n   0xab137e5c:  andeq   r4, r0, r8, lsr #3\n   0xab137e60:                  ; <UNDEFINED> instruction: 0xffffffd4\n   0xab137e64 <Java_com_flareon_flare_ValidateActivity_validate>:       push    {r4, r5, r6, r7, lr}\n   0xab137e66 <Java_com_flareon_flare_ValidateActivity_validate+2>:\n    ldr r4, [pc, #320]  ; (0xab137fa8 <Java_com_flareon_flare_ValidateActivity_validate+324>)\n   0xab137e68 <Java_com_flareon_flare_ValidateActivity_validate+4>:     adds    r5, r0, #0\n   0xab137e6a <Java_com_flareon_flare_ValidateActivity_validate+6>:     movs    r1, #0\n   0xab137e6c <Java_com_flareon_flare_ValidateActivity_validate+8>:     add     sp, r4\n   0xab137e6e <Java_com_flareon_flare_ValidateActivity_validate+10>:    str     r2, [sp, #8]\n   0xab137e70 <Java_com_flareon_flare_ValidateActivity_validate+12>:    add     r0, sp, #120    ; 0x78\n   0xab137e72 <Java_com_flareon_flare_ValidateActivity_validate+14>:\n[...removed...]\n(gdb) b Java_com_flareon_flare_ValidateActivity_validate\nBreakpoint 1 at 0xab137e74\n(gdb) c\nContinuing.\n</code></pre>\n <p>\n  At this stage, the android application runs in my emulator and I'm able to provide a string in the text field. When I click on the \"Validate\" button, the application freezes because the BP is reached:\n </p>\n <pre><code>Breakpoint 1, 0xab137e74 in Java_com_flareon_flare_ValidateActivity_validate () from /data/flareon/system_lib/libvalidate.so\n</code></pre>\n <p>\n  But from here, I haven't found how I can continue to debug because all of my attempts fail:\n </p>\n <pre><code>(gdb) x/10i $pc\n=> 0xab137e74 <Java_com_flareon_flare_ValidateActivity_validate+16>:    bl      0xab138f08\n   0xab137e78 <Java_com_flareon_flare_ValidateActivity_validate+20>:\n    ldr r1, [pc, #308]  ; (0xab137fb0 <Java_com_flareon_flare_ValidateActivity_validate+332>)\n   0xab137e7a <Java_com_flareon_flare_ValidateActivity_validate+22>:    movs    r2, #92 ; 0x5c\n   0xab137e7c <Java_com_flareon_flare_ValidateActivity_validate+24>:    add     r0, sp, #28\n   0xab137e7e <Java_com_flareon_flare_ValidateActivity_validate+26>:    add     r1, pc\n   0xab137e80 <Java_com_flareon_flare_ValidateActivity_validate+28>:    bl      0xab138f18\n   0xab137e84 <Java_com_flareon_flare_ValidateActivity_validate+32>:    ldr     r1, [r5, #0]\n   0xab137e86 <Java_com_flareon_flare_ValidateActivity_validate+34>:    movs    r3, #169        ; 0xa9\n   0xab137e88 <Java_com_flareon_flare_ValidateActivity_validate+36>:    lsls    r3, r3, #2\n   0xab137e8a <Java_com_flareon_flare_ValidateActivity_validate+38>:    ldr     r3, [r1, r3]\n(gdb) step\nSingle stepping until exit from function Java_com_flareon_flare_ValidateActivity_validate,\nwhich has no line number information.\n</code></pre>\n <p>\n  Can you please help? Many thanks in advance for your feedback.\n </p>\n <p>\n  Post comment edit:\n </p>\n <p>\n  Thank you for the clarifications regarding the\n  <code>\n   step\n  </code>\n  (step out) vs\n  <code>\n   si\n  </code>\n  (step in) commands, very useful indeed. Maybe the initial post was lacking from clarity. What I would like to do is actually create another breakpoint later in the code but it seems to fail, as depicted below:\n </p>\n <pre><code>(gdb) b Java_com_flareon_flare_ValidateActivity_validate\nBreakpoint 1 at 0xab143e74\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0xab143e74 in Java_com_flareon_flare_ValidateActivity_validate () from /data/flareon/system_lib/libvalidate.so\n(gdb) x/20i $pc\n=> 0xab143e74 <Java_com_flareon_flare_ValidateActivity_validate+16>:    bl      0xab144f08\n   0xab143e78 <Java_com_flareon_flare_ValidateActivity_validate+20>:\n    ldr r1, [pc, #308]  ; (0xab143fb0 <Java_com_flareon_flare_ValidateActivity_validate+332>)\n   0xab143e7a <Java_com_flareon_flare_ValidateActivity_validate+22>:    movs    r2, #92 ; 0x5c\n   0xab143e7c <Java_com_flareon_flare_ValidateActivity_validate+24>:    add     r0, sp, #28\n   0xab143e7e <Java_com_flareon_flare_ValidateActivity_validate+26>:    add     r1, pc\n   0xab143e80 <Java_com_flareon_flare_ValidateActivity_validate+28>:    bl      0xab144f18\n   0xab143e84 <Java_com_flareon_flare_ValidateActivity_validate+32>:    ldr     r1, [r5, #0]\n   0xab143e86 <Java_com_flareon_flare_ValidateActivity_validate+34>:    movs    r3, #169        ; 0xa9\n   0xab143e88 <Java_com_flareon_flare_ValidateActivity_validate+36>:    lsls    r3, r3, #2\n   0xab143e8a <Java_com_flareon_flare_ValidateActivity_validate+38>:    ldr     r3, [r1, r3]\n   0xab143e8c <Java_com_flareon_flare_ValidateActivity_validate+40>:    adds    r0, r5, #0\n   0xab143e8e <Java_com_flareon_flare_ValidateActivity_validate+42>:    ldr     r1, [sp, #8]\n   0xab143e90 <Java_com_flareon_flare_ValidateActivity_validate+44>:    movs    r2, #0\n   0xab143e92 <Java_com_flareon_flare_ValidateActivity_validate+46>:    blx     r3\n   0xab143e94 <Java_com_flareon_flare_ValidateActivity_validate+48>:    subs    r6, r0, #0\n   0xab143e96 <Java_com_flareon_flare_ValidateActivity_validate+50>:\n    beq.n       0xab143eac <Java_com_flareon_flare_ValidateActivity_validate+72>\n   0xab143e98 <Java_com_flareon_flare_ValidateActivity_validate+52>:    bl      0xab144f28\n   0xab143e9c <Java_com_flareon_flare_ValidateActivity_validate+56>:    cmp     r0, #46 ; 0x2e\n   0xab143e9e <Java_com_flareon_flare_ValidateActivity_validate+58>:\n    bhi.n       0xab143eac <Java_com_flareon_flare_ValidateActivity_validate+72>\n   0xab143ea0 <Java_com_flareon_flare_ValidateActivity_validate+60>:    movs    r2, #0\n(gdb) b 0xab143e80\nFunction \"0xab143e80\" not defined.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 2 (0xab143e80) pending.\n</code></pre>\n <p>\n  As you can see, when I try to set a second BP at\n  <code>\n   0xab143e80\n  </code>\n  , it says the function is not defined. Even if I force the creation of this BP, it is never reached.\n </p>\n <p>\n  My question is: once I am at the 1st breakpoint, how can I set another breakpoint (say for example at\n  <code>\n   0xab143e80\n  </code>\n  )?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "5k",
    "tags": [
        "android",
        "shared-object"
    ],
    "user": "Sebastien Damaye",
    "time": "Oct 7, 2015 at 14:23",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure why you say \" it seems that I'm not able to set other breakpoints within this library\", since\n <code>\n  0xab137e74\n </code>\n seems to be well within your library, and gets hit when library code is executed, not when the library is loaded. Your problem might be that you use\n <code>\n  step\n </code>\n , which tries to step over one line\n <i>\n  of source code\n </i>\n , which isn't available. Try\n <code>\n  stepi\n </code>\n instead to step over one line of assembly, resp. to the start of the function at\n <code>\n  0xab138f08\n </code>\n . Or, set a breakpoint at\n <code>\n  0xab138f08\n </code>\n , then\n <code>\n  step\n </code>\n or\n <code>\n  c\n </code>\n ontinue the program.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Answer to your first question\n </h2>\n <p>\n  <a href=\"https://www.google.com/webhp?q=gdb%20step\" rel=\"nofollow\">\n   Googling for\n   <code>\n    gdb step\n   </code>\n  </a>\n  yields\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html\" rel=\"nofollow\">\n   https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html\n  </a>\n  as the first result. From that page:\n </p>\n <blockquote>\n  <p>\n   <em>\n    Warning:\n   </em>\n   If you use the\n   <code>\n    step\n   </code>\n   command while control is within a\n  function that was compiled without debugging information, execution\n  proceeds until control reaches a function that does have debugging\n  information. Likewise, it will not step into a function which is\n  compiled without debugging information. To step through functions\n  without debugging information, use the\n   <code>\n    stepi\n   </code>\n   command, described below.\n  </p>\n </blockquote>\n <p>\n  Since the binary likely wasn't compiled with debugging information, you need to use\n  <code>\n   stepi\n  </code>\n  instead of\n  <code>\n   step\n  </code>\n  , as @guntram-blohm suggested in his comment above.\n </p>\n <h2>\n  Answer to your second question\n </h2>\n <p>\n  <code>\n   b 0xab143e80\n  </code>\n  is not the correct syntax to set a breakpoint on an address;\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Specify-Location.html\" rel=\"nofollow\">\n   you need to use\n   <code>\n    b *0xab143e80\n   </code>\n  </a>\n  .\n </p>\n <p>\n  Please refer to\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/\" rel=\"nofollow\">\n   https://sourceware.org/gdb/onlinedocs/gdb/\n  </a>\n  for further questions on\n  <code>\n   gdb\n  </code>\n  usage and command syntax.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Oct 7, 2015 at 14:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sebastien Damaye",
                    "text": "<span class=\"comment-copy\">Thanks a lot for your comments Guntram and Jason. I have completed my initial post to bring some more clarity about my question. I hope you can help... Anyway, thanks a lot to both of you for these inputs already.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I've updated my answer above to address both of your questions.</span>",
                    "time": null
                },
                {
                    "user": "Sebastien Damaye",
                    "text": "<span class=\"comment-copy\">You're right! Damn, that was so simple :) Thanks a lot!</span>",
                    "time": null
                }
            ]
        }
    ]
}