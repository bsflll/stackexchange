{
    "title": "How to determine number and/or boundaries of linked object files in a PE generated by Visual Studio 6?",
    "link": "https://reverseengineering.stackexchange.com/questions/20253/how-to-determine-number-and-or-boundaries-of-linked-object-files-in-a-pe-generat",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In\n  <a href=\"https://www.hybrid-analysis.com/sample/057c9d88e7206f6669a4615de2c6e02ab6c4e2d570a9e2badf07fe0bd6247274/5c265c3f7ca3e17440781603\" rel=\"nofollow noreferrer\">\n   this analysis\n  </a>\n  of a Portable Executable linked using\n  <em>\n   Microsoft Linker (6.0)\n  </em>\n  , down in the Imported Objects section, the website makes some very specific claims:\n </p>\n <pre><code>3 .OBJ Files (COFF) linked with LINK.EXE 5.12 (Visual Studio 5 SP2) (build: 9049)\n4 .OBJ Files (COFF) linked with LINK.EXE 6.00 (Visual Studio 6) (build: 8168)\n178 .C Files compiled with CL.EXE 12.00 (Visual Studio 6) (build: 8168)\n26 .CPP Files compiled with CL.EXE 12.00 (Visual Studio 6) (build: 8168)\n41 .ASM Files assembled with MASM 6.13 (Visual Studio 6 SP1) (build: 7299)\n12 .OBJ Files linked with ALIASOBJ.EXE 6.00 (Internal OLDNAMES.LIB Tool) (build: 7291)\n</code></pre>\n <p>\n  As far as I know, all debug information is stripped from the executable, and there certainly aren't 178 embedded ascii strings ending in \".C\".\n </p>\n <p>\n  The sections in the PE are the usual .text, .rdata, .data, .rsrc.\n </p>\n <p>\n  What type of additional information or metadata in the EXE could be used to make guesses about the original object files?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "140",
    "tags": [
        "binary-analysis",
        "pe"
    ],
    "user": "minexew",
    "time": "Jan 1, 2019 at 20:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My guess is that the website is parsing the Rich Signature (see\n  <a href=\"https://www.ntcore.com/files/richsign.htm\" rel=\"nofollow noreferrer\">\n   https://www.ntcore.com/files/richsign.htm\n  </a>\n  for analysis and details).  There is a shorter description\n  <a href=\"https://github.com/dishather/richprint\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .  Basically, Microsoft's linkers add some info that can be used to infer that information.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "knowmalware",
            "time": "Jan 2, 2019 at 3:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "minexew",
                    "text": "<span class=\"comment-copy\">Fascinating! This also answers the question of whether boundaries or ordering of the linked objects can be inferred: they can not.</span>",
                    "time": null
                },
                {
                    "user": "knowmalware",
                    "text": "<span class=\"comment-copy\">Do you have IDA Pro?  I recently found an object boundary detection project from JHU APL called <a href=\"https://github.com/JHUAPL/CodeCut\" rel=\"nofollow noreferrer\">CodeCut</a>.  It is an IDA Python script. I have not tried it myself, so not sure how well it works, otherwise I would have added it to my answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}