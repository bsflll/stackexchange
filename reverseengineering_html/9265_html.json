{
    "title": "AT&T XOR argument at radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/9265/att-xor-argument-at-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Recently I faced with strange (in my opinion) behavior of radare2.\n </p>\n <p>\n  I have been reading the\n  <a href=\"https://dustri.org/b/defeating-crackme03-with-radare2.html\" rel=\"nofollow\">\n   Artificial truth\n  </a>\n  blog post about\n  <a href=\"http://hackingbits.github.io/blog/crackme-03/\" rel=\"nofollow\">\n   Hacking bits\n  </a>\n  with this\n  <a href=\"https://github.com/geyslan/crackmes/blob/master/src/crackme.03.asm\" rel=\"nofollow\">\n   crackme\n  </a>\n  .\n </p>\n <p>\n  In an article Julien used\n  <strong>\n   <em>\n    Intel\n   </em>\n  </strong>\n  syntax,\nbut I choose\n  <strong>\n   <em>\n    AT&T\n   </em>\n  </strong>\n  .\n </p>\n <p>\n  So I started disassemble crackme:\n </p>\n <pre><code>$ r2 ./crackme.03.32\n</code></pre>\n <p>\n  Set syntax to intel, block size to 10 bytes and seek to needed address and print disassemble:\n </p>\n <pre><code>[0x00010020]> e asm.syntax = intel\n[0x00010020]> b 10\n[0x00010020]> s 0x0010112\n[0x00010112]> pd\n</code></pre>\n <p>\n  Output was:\n </p>\n <pre><code>       0x00010112    80f2ac         xor dl, 0xac\n       0x00010115    eb02           jmp 0x10119\n</code></pre>\n <p>\n  But when I changed syntax to ATT:\n </p>\n <pre><code>[0x00010112]> e asm.syntax = att\n[0x00010112]> pd\n</code></pre>\n <p>\n  I received that:\n </p>\n <pre><code>       0x00010112    80f2ac         xorb $-0x54, %dl\n       0x00010115    eb02           jmp 0x10119\n</code></pre>\n <p>\n  In the\n  <a href=\"https://github.com/geyslan/crackmes/blob/master/src/crackme.03.asm#L159\" rel=\"nofollow\">\n   source code\n  </a>\n  of crackme we can find that value of argument is 0xac\n  <em>\n   (xor dl, 0xac)\n  </em>\n  .\n </p>\n <h2>\n  So, actually, question:\n </h2>\n <p>\n  Why\n  <strong>\n   80 f2 ac\n  </strong>\n  translate to the same opcodes, but with different arguments for AT&T and Intel syntax.\n </p>\n <p>\n  <strong>\n   <em>\n    Why 0xac became -0x54?\n   </em>\n  </strong>\n </p>\n <hr/>\n <pre><code>$ r2 -version\nradare2 0.10.0-git 8247 @ linux-little-x86-64 git.0.9.9-148-gd5f2661\ncommit: d5f2661cbe1a32bc26490bd7a1864ef45907aaea build: 2015-06-26\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "radare2",
        "disassemblers",
        "crackme"
    ],
    "user": "Alex Bender",
    "time": "Dec 16, 2017 at 16:48",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n It's a matter of notation of a single byte\n <i>\n  only\n </i>\n . The\n <i>\n  byte\n </i>\n value\n <code>\n  0xAC\n </code>\n can be written as\n <code>\n  -0x54\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n You should learn about representation of signed and unsigned values; this will make it clear immediately. Interpreting the first bit of\n <code>\n  0xac\n </code>\n as a sign bit, not a value bit, will result in\n <code>\n  -0x54\n </code>\n , as\n <code>\n  0xac\n </code>\n +\n <code>\n  0x54\n </code>\n =\n <code>\n  0x100\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alex Bender",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for explaining! I have thought about signed and unsigned values.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Maijin",
            "text": "<html><body><span class=\"comment-copy\">\n Now here is the current output after changing the syntax with att in radare2.\n <code>\n  xorb $0xac, %dl\n </code>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It was signed and unsigned question.\n </p>\n <p>\n  The way to change the signedness is by negating it, which is NOTing all bits of that number and incrementing it by 1\n </p>\n <pre><code>>>> 256 - (~(-0x54)+1)\n172\n>>> hex(172)\n'0xac'\n>>> \n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Alex Bender",
            "time": "Jul 1, 2015 at 11:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}