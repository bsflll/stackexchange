{
    "title": "How to get the disassembly line without offset translations in IDAPython?",
    "link": "https://reverseengineering.stackexchange.com/questions/15061/how-to-get-the-disassembly-line-without-offset-translations-in-idapython",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When I use\n  <code>\n   GetDisasm()\n  </code>\n  to get disassembly line, I find out that it will show some memory references as a variable name.\n </p>\n <p>\n  For example, when raw assembly is:\n </p>\n <pre><code>mov %r15, 0x20b062(%rip)`\n</code></pre>\n <p>\n  <code>\n   GetDisasm()\n  </code>\n  's output may be:\n </p>\n <pre><code>mov r15d, offset s1\n</code></pre>\n <p>\n  I was hoping there is a way to get the raw instruction, rather than the modified one?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "binary-analysis",
        "idapython"
    ],
    "user": "liubenxi",
    "time": "Apr 2, 2017 at 8:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Unfortunately, IDA's disassembly cannot be separated from it's data type information that is inherent to IDA (and is considered one of it's biggest advantages).\n </p>\n <p>\n  You could, however, alter that information manually to get IDA to display the disassembly as you please. For example, you could use the\n  <code>\n   idc.OpHex(ea, n)\n  </code>\n  API function to make an instruction operand to hexadecimal number format.\n </p>\n <p>\n  For example, in order to change the type of the second operand from offset parameter type to hexadecimal parameter type, you can call\n  <code>\n   idc.OpHex\n  </code>\n  with the address of the instruction as the first parameter and the operand number as the second parameter (\n  <code>\n   1\n  </code>\n  in your example), or\n  <code>\n   -1\n  </code>\n  for all operands.\n </p>\n <p>\n  For example, given the following instruction in IDA:\n </p>\n <pre><code>.text:00401421                 mov     ebx, offset aL4jDontWait ; \"--l4j-dont-wait\"\n</code></pre>\n <p>\n  and the output:\n </p>\n <pre><code>Python>idc.GetDisasm(0x0401421)\nmov     ebx, offset aL4jDontWait; \"--l4j-dont-wait\"\nPython>idc.OpHex(0x0401421, 1)\nTrue\nPython>idc.GetDisasm(0x0401421)\nmov     ebx, 407000h\n</code></pre>\n <p>\n  You could then just load a previous save to \"undo\" all of those changes.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Apr 2, 2017 at 8:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Why not just call GetOperandValue() and replace into the string instead of changing the type in the IDB?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">That's also possible, but seems more error prone IMHO</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using the minsc plugin at\n  <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">\n   https://github.com/arizvisa/ida-minsc\n  </a>\n  , you can do something like the following.\n </p>\n <p>\n  Disclaimer: I maintain the ida-minsc plugin.\n </p>\n <p>\n  The bytes for the given instruction seem to assemble to the following.\n </p>\n <pre><code>0:   4c 89 3d 62 b0 20 00    mov    %r15,0x20b062(%rip)\n</code></pre>\n <p>\n  Bringing it into Python, and writing it at the current address (\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.write\" rel=\"nofollow noreferrer\">\n   <code>\n    database.write\n   </code>\n  </a>\n  ) results in this instruction.\n </p>\n <pre><code>Python>bytes.fromhex('4c 89 3d 62 b0 20 00').hex()\n'4c893d62b02000'\n\nPython>db.write(bytes.fromhex(b))\n\nPython>db.disasm()\n'1c009adc8: mov qword ptr cs:unk_1C02A5E31, r15'\n</code></pre>\n <p>\n  If we're okay with changing the operand to hexadecimal, we can use\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/instruction.html#instruction.op_hexadecimal\" rel=\"nofollow noreferrer\">\n   <code>\n    instruction.op_hex\n   </code>\n  </a>\n  . Technically, however, this is a reference and so we should probably use\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/instruction.html#instruction.op_reference\" rel=\"nofollow noreferrer\">\n   <code>\n    instruction.op_ref\n   </code>\n  </a>\n  . Both of these functions, however, modify the representation of the operand.\n </p>\n <pre><code>Python>ins.op_hex(0)\n0x1c02a5e31\n\nPython>ins.op_ref(0)\n0x1c02a5e31\n</code></pre>\n <p>\n  If we want to just read the operand (without changing how the disassembler displays it to us), we can use\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/instruction.html#instruction.op\" rel=\"nofollow noreferrer\">\n   <code>\n    instruction.op\n   </code>\n  </a>\n  . This returns the operand's attributes packed into a tuple.\n </p>\n <pre><code>Python>ins.op(0)\nSegmentOffset(segment=%cs, offset=0x1c02a5e31)    \n\nPython>int(ins.op(0))\n0x1c02a5e31\n</code></pre>\n <p>\n  We can also translate this tuple to a different base address if necessary.\n </p>\n <pre><code>Python>ins.op(0) - db.baseaddress()\nSegmentOffset(segment=%cs, offset=0x2a5e31)\n\nPython>ins.op(0) - db.baseaddress()  + 0x4200000000\nSegmentOffset(segment=%cs, offset=0x42002a5e31)\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 20, 2024 at 23:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}