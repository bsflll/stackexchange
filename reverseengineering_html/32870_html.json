{
    "title": "Protection of the source code of an ML model",
    "link": "https://reverseengineering.stackexchange.com/questions/32870/protection-of-the-source-code-of-an-ml-model",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanted to know how it would be possible to run an ML model in an offline setting securely? What I mean is, if the Python files and libraries are bundled as an\n  <code>\n   .exe\n  </code>\n  file (using libraries like\n  <code>\n   py2exe\n  </code>\n  or\n  <code>\n   PyInstaller\n  </code>\n  ) for distribtion, is it possible to decompile the executable and obtain the source code if reverse engineered properly?\n </p>\n <p>\n  From the research I've done, I've seen packages like\n  <a href=\"https://github.com/rocky/python-uncompyle6/\" rel=\"nofollow noreferrer\">\n   uncompyle6\n  </a>\n  get a lot of praise for being able to decompile executables properly. However, I have observed lesser decomplilation facilities for newer versions of Python, (specifically 3.8 and above). I tried to decompile the\n  <code>\n   .pyc\n  </code>\n  files which are just bytecode and they were decompiled pretty easily. However, I'm facing a harder time decompiling\n  <code>\n   .pyd\n  </code>\n  files.\n  \n\n  \n\n  What practices does the industry follow for this, to make reverse engineering\n  <em>\n   really\n  </em>\n  hard? Realistically, what measures can I take to make sure that the code does not get leaked/stolen? Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "60",
    "tags": [
        "python",
        "protection"
    ],
    "user": "woka",
    "time": "Apr 5, 2024 at 10:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If I understand your requirements correctly what you need is\n  <a href=\"https://pyarmor.readthedocs.io/en/stable/topic/repack.html\" rel=\"nofollow noreferrer\">\n   pyarmor\n  </a>\n  or something similar such as\n  <a href=\"https://pyob.oxyry.com/\" rel=\"nofollow noreferrer\">\n   oxyry\n  </a>\n  or\n  <a href=\"https://pyobfuscate.com/pyd\" rel=\"nofollow noreferrer\">\n   pyobfuscate\n  </a>\n  . These packages are able to obfuscate the code, which makes reversing harder. Pyarmor is also able to \"pack\" the obfuscated code with\n  <a href=\"https://pyinstaller.org/en/stable/\" rel=\"nofollow noreferrer\">\n   PyInstaller\n  </a>\n  . This means that after decompiling resulting executable the reverser will get obfuscated scripts, which are harder to comprehend. Please note that\n  <a href=\"https://pyarmor.readthedocs.io/en/stable/topic/repack.html\" rel=\"nofollow noreferrer\">\n   pyarmor\n  </a>\n  is licensed, and costs in a range of approximately\n  <a href=\"https://order.mycommerce.com/product?vendorid=200089125&productid=301044051&currency=USD&currencies=ALL\" rel=\"nofollow noreferrer\">\n   $[50:160]\n  </a>\n  , depending on features you need.\n </p>\n <p>\n  It should be noticed, that if the computer is able to execute some sequence of instructions, then this sequence is readable, so the only thing the obfuscation provides you is a time until your script is reversed.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Apr 6, 2024 at 10:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}