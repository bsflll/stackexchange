{
    "title": "PUSH x VS MOV [ESP], x?",
    "link": "https://reverseengineering.stackexchange.com/questions/30315/push-x-vs-mov-esp-x",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am a beginner in RE. I compiled some code (x86 32bit), and opened it up in Ghidra.\nI come across the following instruction right before a call:\n </p>\n <p>\n  <strong>\n   MOV dword ptr [ESP], 0x3c\n  </strong>\n </p>\n <p>\n  Where 0x3c is the offset to the start of a string in .rdata, so this acts as a parameter to the proceeding function call which takes a char* data type as an argument.\n </p>\n <p>\n  The question is, why does the compiler decide to do this instead of a simple PUSH 0x3c?\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "256",
    "tags": [
        "x86",
        "ghidra"
    ],
    "user": "Soyboii",
    "time": "Apr 24, 2022 at 9:27",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Compiled with GCC?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "R4444",
            "text": "<html><body><span class=\"comment-copy\">\n Hey check this useful answer:\n <a href=\"https://stackoverflow.com/questions/12766534/cost-of-push-vs-mov-stack-vs-near-memory-and-the-overhead-of-function-calls\" title=\"cost of push vs mov stack vs near memory and the overhead of function calls\">\n  stackoverflow.com/questions/12766534/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}