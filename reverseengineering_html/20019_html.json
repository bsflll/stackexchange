{
    "title": "Linux Assembly Syscall",
    "link": "https://reverseengineering.stackexchange.com/questions/20019/linux-assembly-syscall",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm learning how to write shellcode by using Linux system call \"execve\" to spawn a shell with root access privilege.\nHere i found a shellcode online:\n </p>\n <p>\n  <a href=\"http://shell-storm.org/shellcode/files/shellcode-251.php\" rel=\"nofollow noreferrer\">\n   http://shell-storm.org/shellcode/files/shellcode-251.php\n  </a>\n </p>\n <p>\n  Arcoding to Assembly Linux Tutorials,the arguments for syscall are placed on registers. But why in this shellcode,the arguments are not only placed on the register,but also pushed on the stack ? Quite confusing here.\n </p>\n <p>\n  Can someone give me a brief explaination about this problem ?Much appreciate!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "562",
    "tags": [
        "assembly",
        "linux",
        "shellcode"
    ],
    "user": "Mercy",
    "time": "Dec 1, 2018 at 2:14",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n Please make your question self-contained (all the information are present in the post, not over some external link)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n (hint: read the\n <a href=\"https://linux.die.net/man/2/execve\" rel=\"nofollow noreferrer\">\n  documentation of execve\n </a>\n , and see which parameters it expects)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It only uses the stack to pass the correct values to registers. If you analyse this shell code closely you will identify that all the stack operations are in the end results in some value being put in a register that it is expected.\n </p>\n <p>\n  Take a look at this part that calls setuid(0):\n </p>\n <pre><code>\"\\x6a\\x17\"          // push $0x17\n\"\\x58\"              // pop  %eax\n\"\\x31\\xdb\"          // xor  %ebx, %ebx\n\"\\xcd\\x80\"          // int  $0x80\n</code></pre>\n <p>\n  The first operations puts\n  <code>\n   $0x17\n  </code>\n  into\n  <code>\n   eax\n  </code>\n  which is exactly the value that's is needed for\n  <code>\n   setuid\n  </code>\n  . Clearing\n  <code>\n   ebx\n  </code>\n  for the value being passed to\n  <code>\n   setuid\n  </code>\n  .\n </p>\n <p>\n  In the same way we can check\n  <code>\n   execv\n  </code>\n  .\n </p>\n <pre><code>\"\\x31\\xd2\"              // xor  %edx, %edx\n\"\\x6a\\x0b\"              // push $0xb\n\"\\x58\"                  // pop  %eax\n\"\\x52\"                  // push %edx\n\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f\n\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f\n\"\\x89\\xe3\"              // mov  %esp, %ebx\n\"\\x52\"                  // push %edx\n\"\\x53\"                  // push %ebx\n\"\\x89\\xe1\"              // mov  %esp, %ecx\n\"\\xcd\\x80\";             // int  $0x80\n</code></pre>\n <p>\n  Step by step:\n </p>\n <pre><code>\"\\x31\\xd2\"              // xor  %edx, %edx\n</code></pre>\n <p>\n  clearing\n  <code>\n   edx\n  </code>\n  for later.\n </p>\n <pre><code>\"\\x6a\\x0b\"              // push $0xb\n\"\\x58\"                  // pop  %eax\n</code></pre>\n <p>\n  puts\n  <code>\n   execv\n  </code>\n  code (\n  <code>\n   0xb\n  </code>\n  ) into\n  <code>\n   eax\n  </code>\n  .\n </p>\n <pre><code>\"\\x52\"                  // push %edx        -> NULL\n\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f -> hs//\n\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f -> nib/\n</code></pre>\n <p>\n  since\n  <code>\n   edx\n  </code>\n  was cleared as the first instruction this puts\n  <code>\n   /bin//sh\\0\n  </code>\n  on the stack and the next instruction\n </p>\n <pre><code>\"\\x89\\xe3\"              // mov  %esp, %ebx\n</code></pre>\n <p>\n  put the address of the top of the stack into\n  <code>\n   ebx\n  </code>\n  ->\n  <code>\n   execv\n  </code>\n  expects there the first argument.\n </p>\n <pre><code>\"\\x52\"                  // push %edx\n\"\\x53\"                  // push %ebx\n\"\\x89\\xe1\"              // mov  %esp, %ecx\n</code></pre>\n <p>\n  this puts\n  <code>\n   NULL\n  </code>\n  + the address of the same string again on the stack and one more time assigning the address of the top of the stack to\n  <code>\n   ecx\n  </code>\n  where is expected to be \narguments. 'edx' was set to zero so it is like that being passed to\n  <code>\n   execv\n  </code>\n  .\n </p>\n <p>\n  It looks like this is assuming that\n  <code>\n   esi\n  </code>\n  is/was cleared.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Dec 1, 2018 at 14:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mercy",
                    "text": "<span class=\"comment-copy\">Can't believe it's that simple. Tks very much for your help!</span>",
                    "time": null
                }
            ]
        }
    ]
}