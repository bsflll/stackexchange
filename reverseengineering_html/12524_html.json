{
    "title": "How to get the runtime memory region information when instrumenting using Pin?",
    "link": "https://reverseengineering.stackexchange.com/questions/12524/how-to-get-the-runtime-memory-region-information-when-instrumenting-using-pin",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using\n  <code>\n   Pin\n  </code>\n  for some execution monitoring tasks towards\n  <code>\n   x64 ELF\n  </code>\n  binary code.\n </p>\n <p>\n  During the monitoring, for any memory write/read operation of the original code, I would like to record it as long as it refers the\n  <code>\n   heap\n  </code>\n  . However, given a memory address, I have no idea whether it refers the\n  <code>\n   heap\n  </code>\n  memory region or not.\n </p>\n <p>\n  One possible solution I can come up with is that, before every memory operation, I acquire the runtime memory region information of the target process, and check whether the current memory address is within the\n  <code>\n   heap\n  </code>\n  region. This can be done by following the steps below inside the Pintool.\n </p>\n <ol>\n  <li>\n   acquire the process ID of monitored process (This step can use\n   <code>\n    Pin\n   </code>\n   API\n   <code>\n    Pin_GetPid\n   </code>\n   )\n  </li>\n  <li>\n   read the process memory region information in\n   <code>\n    /proc/XXX/maps\n   </code>\n  </li>\n  <li>\n   find the\n   <code>\n    heap\n   </code>\n   memory region\n  </li>\n  <li>\n   check whether the current address is within the\n   <code>\n    heap\n   </code>\n   region\n  </li>\n </ol>\n <p>\n  However, this is tedious and my test shows that this is extremely slow, as the size of memory\n  <code>\n   heap\n  </code>\n  can change during the runtime which means I need to go through the above steps everytime before memory operation.\n </p>\n <p>\n  So I am wondering, does\n  <code>\n   Pin\n  </code>\n  has APIs to provide the\n  <code>\n   heap\n  </code>\n  memory region information? Or is there any solution more efficient that the above one?\n </p>\n <p>\n  ===================== update ===============================\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/VGeAi.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/VGeAi.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "dynamic-analysis",
        "pintool"
    ],
    "user": "lllllllllllll",
    "time": "Apr 25, 2016 at 16:41",
    "comments": [
        {
            "user": "user26860",
            "text": "<html><body><span class=\"comment-copy\">\n I want to know how to solve this problem .Could you give me some advice?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you're saying you're using ELF code, i assume you're running under Linux, or another unix-y system. And\n  <code>\n   proc/self/maps\n  </code>\n  (you don't have to\n  <code>\n   getpid()\n  </code>\n  and use\n  <code>\n   /proc/XXX/maps\n  </code>\n  , really) hints at Linux as well.\n </p>\n <p>\n  One problem i see is the definition of\n  <code>\n   heap\n  </code>\n  - what about memory mapped regions, do they count as \"heap\" or not? Linux\n  <code>\n   malloc\n  </code>\n  uses\n  <code>\n   mmap\n  </code>\n  in some cases instead of expanding the heap, which is typically done by\n  <code>\n   brk\n  </code>\n  (which may itself be just a wrapper around\n  <code>\n   mmap\n  </code>\n  /\n  <code>\n   mremap\n  </code>\n  depending on your libc).\n </p>\n <p>\n  If you want to trace everything that's in\n  <code>\n   malloc\n  </code>\n  ed memory, i'd just compare the address to the end of the code segment (but beware of dynamic libraries; or omit that comparison completely as code typically isn't read and can't be written anyway) and the current value of the stack pointer. If the address is below the stack pointer, assume heap.\n </p>\n <p>\n  If you want to trace what's in the original,\n  <code>\n   brk\n  </code>\n  -managed heap only, read your memory map just once at the start, getting the heap start address, and monitor\n  <code>\n   brk\n  </code>\n  calls, adjusting the end address after each\n  <code>\n   brk\n  </code>\n  .\n </p>\n <p>\n  On x64, \"below the stack pointer\" must be taken with a grain of salt. On 16- and 32-bit x86 processors, anything below the stack pointer can be clobbered by hardware interrupts at any time, so\n  <code>\n   sp\n  </code>\n  /\n  <code>\n   esp\n  </code>\n  are a barrier to what software can use. On 64 bit processors, however,\n  <a href=\"http://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64/\" rel=\"nofollow\">\n   the ABI guarantees that 128 bytes below the stack pointer aren't changed by interrupts\n  </a>\n  , so the compiler is free to use them (and will do so in leaf functions). Which means, you really need to compare your address to\n  <code>\n   esp-0x80\n  </code>\n  if you're dealing with x64 code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Apr 25, 2016 at 17:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Very smart idea! I will check whether the address is within code section and stack pointer <code>rsp</code>. Thank you for saving my ass ;)</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Hi Guntram, recall <code>rsp</code> does not always refer to the top of the stack.. For example, at the beginning of one function, it can be something like this: <code>mov esp, ebp;  mov eax, [ebp-16]</code>...</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Are you certain about this? Every function i've encountered makes sure to not access any memory below <code>[er]sp</code>, and function prologues typically push the old <code>[er]bp</code>, move <code>sp</code> into <code>bp</code> (the other way round than you describe), and subtract something from <code>sp</code>. Whatever is a few bytes below <code>sp</code> is subject to change without visible reason, because a hardware interrupt will cause the processor to push flags, <code>cs</code> and <code>ip</code> on the stack, and software can't predict when they arrive.</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Hi Guntram, I uploaded a screen shot</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Found something: <a href=\"http://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64/\" rel=\"nofollow noreferrer\">eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64</a> - going to include the essentials of that in my answer. Seems like <i>on x64 only</i> 128 bytes below the stack are \"reserved\", i.e. won't be clobbered by interrupts.</span>",
                    "time": null
                }
            ]
        }
    ]
}