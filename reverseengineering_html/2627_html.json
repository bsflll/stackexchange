{
    "title": "What is the meaning of movabs in gas/x86 AT&T syntax?",
    "link": "https://reverseengineering.stackexchange.com/questions/2627/what-is-the-meaning-of-movabs-in-gas-x86-att-syntax",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just found a strange instruction by assembling (with\n  <code>\n   gas\n  </code>\n  ) and disassembling (with\n  <code>\n   objdump\n  </code>\n  ) on a\n  <code>\n   amd64\n  </code>\n  architecture.\n </p>\n <p>\n  The original\n  <code>\n   amd64\n  </code>\n  assembly code is:\n </p>\n <pre><code>mov 0x89abcdef, %al\n</code></pre>\n <p>\n  And, after\n  <code>\n   gas\n  </code>\n  compiled it (I am using the following command line:\n  <code>\n   gcc -m64 -march=i686 -c -o myobjectfile myassemblycode.s\n  </code>\n  ),\n  <code>\n   objdump\n  </code>\n  gives the following code:\n </p>\n <pre><code>a0 df ce ab 89 00 00    movabs 0x89abcdef, %al\n</code></pre>\n <p>\n  My problem is that I cannot find any\n  <code>\n   movabs\n  </code>\n  , nor\n  <code>\n   movab\n  </code>\n  in the Intel assembly manual (not even a\n  <code>\n   mova\n  </code>\n  instruction).\n </p>\n <p>\n  So, I am dreaming ? What is the meaning of this instruction ? My guess is that it is a quirks from the GNU binutils, but I am not sure of it.\n </p>\n <p>\n  PS: I checked precisely the spelling of this instruction, so it is NOT a\n  <code>\n   movaps\n  </code>\n  instruction for sure.\n </p>\n</div>\n</body></html>",
    "votes": "33",
    "answers": 5,
    "views": "47k",
    "tags": [
        "x86",
        "amd64"
    ],
    "user": "perror",
    "time": "Aug 12, 2013 at 16:41",
    "comments": [
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n I think the first 5 bytes is\n <code>\n  a0 ef cd ab 89\n </code>\n , not\n <code>\n  a0 df ce ab 89\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://stackoverflow.com/questions/19415184/load-from-a-64-bit-address-into-other-register-than-rax\" title=\"load from a 64 bit address into other register than rax\">\n  stackoverflow.com/questions/19415184/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "jww",
            "text": "<html><body><span class=\"comment-copy\">\n Also see\n <a href=\"http://reverseengineering.stackexchange.com/q/6540/5853\">\n  When was the MOVABS instruction introduced?\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here's the\n  <a href=\"http://sourceware.org/binutils/docs/as/i386_002dVariations.html\">\n   official documentation for\n   <code>\n    gas\n   </code>\n  </a>\n  , quoting the relevant section:\n </p>\n <blockquote>\n  <p>\n   In AT&T syntax the size of memory operands is determined from the last\n  character of the instruction mnemonic. Mnemonic suffixes of\n   <code>\n    b\n   </code>\n   ,\n   <code>\n    w\n   </code>\n   ,\n   <code>\n    l\n   </code>\n   and\n   <code>\n    q\n   </code>\n   specify byte (8-bit), word (16-bit), long (32-bit) and\n  quadruple word (64-bit) memory references. Intel syntax accomplishes\n  this by prefixing memory operands (not the instruction mnemonics) with\n   <code>\n    byte ptr\n   </code>\n   ,\n   <code>\n    word ptr\n   </code>\n   ,\n   <code>\n    dword ptr\n   </code>\n   and\n   <code>\n    qword ptr\n   </code>\n   . Thus, Intel\n   <code>\n    mov\n  al, byte ptr foo\n   </code>\n   is\n   <code>\n    movb foo, %al\n   </code>\n   in AT&T syntax.\n  </p>\n  <p>\n   In 64-bit code,\n   <code>\n    movabs\n   </code>\n   can be used to encode the\n   <code>\n    mov\n   </code>\n   instruction\n  with the 64-bit displacement or immediate operand.\n  </p>\n </blockquote>\n <p>\n  Particularly read the last sentence.\n </p>\n <p>\n  <strong>\n   Note:\n  </strong>\n  Found via Google operator\n  <code>\n   inurl\n  </code>\n  , searching for\n  <code>\n   movabs inurl:sourceware.org/binutils/\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "29",
            "user": "0xC0000022L",
            "time": "Aug 12, 2013 at 17:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I looked at the gas manual but I did not find the right section. Thanks a lot  0xC0000022L ! :-)</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">How can you move a 32 bit number into al?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@LưuVĩnhPhúc: well you can only with losses, but this has nothing to do with my answer or the question, so you better ask it as a new question.</span>",
                    "time": null
                },
                {
                    "user": "Ruslan",
                    "text": "<span class=\"comment-copy\">What's interesting, gdb gives me <code>48 b8 &lt;imm64&gt;</code> bytes as <code>movabs rax, &lt;imm64&gt;</code> even in <code>disassembly-flavor=intel</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  movabs is used for absolute data moves, to either load an arbitrary 64-bit constant into a register or to load data in a register from a 64-bit address.\n </p>\n <p>\n  Source:\n  <a href=\"http://www.ucw.cz/~hubicka/papers/amd64/node1.html\">\n   http://www.ucw.cz/~hubicka/papers/amd64/node1.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "ekse",
            "time": "Aug 12, 2013 at 17:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you find yourself often deciphering AT&T syntax x86/x64 assembler, Solaris manuals may be of help:\n  <a href=\"https://docs.oracle.com/cd/E53394_01/html/E54851/index.html\" rel=\"nofollow noreferrer\">\n   x86 Assembly Language Reference Manual\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Michał Rybak",
            "time": "Aug 6, 2017 at 16:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">good downloadable reference  thanks igorsk for the link</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I noticed that GAS translates\n </p>\n <pre><code>movq $0x80000000, %rax\n</code></pre>\n <p>\n  into\n </p>\n <pre><code>movabs $0x80000000, %rax\n</code></pre>\n <p>\n  But values smaller than 0x80000000 are not translated into\n  <code>\n   movabs\n  </code>\n  .\nThat is,\n  <code>\n   movq $0x7fffffff, $rbx\n  </code>\n  is NOT translated into\n  <code>\n   movabs $0x7fffffff, %rbx\n  </code>\n  . You can verify with\n  <code>\n   disas\n  </code>\n  disassemble command within GDB.\n </p>\n <p>\n  Maybe the reason is that\n  <code>\n   $0x80000000\n  </code>\n  is over the signed positive number range of 32 bit and needs to be translated into 64-bit integer.  For the reason, GAS translates such larger number into  64-bit long integer and therefore uses\n  <code>\n   movabsq\n  </code>\n  instruction instead of\n  <code>\n   movq\n  </code>\n  instruction whose immediate source is limited to 32 bit constant.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Michael Karcher",
            "time": "Jul 31, 2024 at 22:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">this is incorrect <code>movq $0x80000000, %rax</code> moves the immediate 0x80000000 into rax whereas <code>movabs 0x80000000, %rax</code> loads the quadword at address 0x80000000 to rax</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">@phuclv You are right, this is most likely a typo in the OP (missing <code>$</code> sign). I suggested the correspondig edit.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Initialization of local variables with movabs\n </h2>\n <p>\n  Yes this instruction should move absolute hardcoded data embedded into instruction itself into register,\nor data from absolute address. But I got into this instruction only recently when I wanted to know where constant data for initialization of local variables are because I didnt find them in\n  <em>\n   .rodata\n  </em>\n  ELF section.\n </p>\n <p>\n  So basically GCC uses this instruction to initialize automatic variables on stack!\n </p>\n <p>\n  Lets dive into code to find out how this instruction is used.\nAs we see in this code example  we have local variable\n  <em>\n   test\n  </em>\n  initialized:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/TdZka.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/TdZka.png\"/>\n  </a>\n </p>\n <p>\n  We know that local variables are put in stack and I was interested to know\nwhere and how local variables get initialized.\n </p>\n <p>\n  When we dump .text section with objdump we see that this constant\n  <em>\n   0x41414141414141\n  </em>\n  is realy embedded in the code itself:\n </p>\n <pre><code>000000000000116c <get_message2>:\n116c:   f3 0f 1e fa             endbr64 \n1170:   55                      push   %rbp\n1171:   48 89 e5                mov    %rsp,%rbp\n1174:   48 83 ec 10             sub    $0x10,%rsp\n1178:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax\n117f:   00 00 \n1181:   48 89 45 f8             mov    %rax,-0x8(%rbp)\n1185:   31 c0                   xor    %eax,%eax\n1187:   48 b8 41 41 41 41 41    movabs $0x41414141414141,%rax\n118e:   41 41 00 \n</code></pre>\n <hr/>\n <p>\n  As we see disassembled function and register content from GDB:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/exmLP.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/exmLP.png\"/>\n  </a>\n </p>\n <p>\n  So when we look at code we see that this string\n  <em>\n   test\n  </em>\n  , in HEX notation\n  <em>\n   0x0x41414141414141\n  </em>\n  is hardcoded in\n  <strong>\n   movabs\n  </strong>\n  instruction, and is put in\n  <strong>\n   rax\n  </strong>\n  register, and then content of\n  <strong>\n   rax\n  </strong>\n  register is put on address in\n  <strong>\n   rbp\n  </strong>\n  minus offset 0x10:\n </p>\n <pre><code>   0x000055555555517d <+27>:    movabs $0x41414141414141,%rax\n   0x0000555555555187 <+37>:    mov    %rax,-0x10(%rbp)\n</code></pre>\n <p>\n  So this local string will be placed on address\n  <strong>\n   0x7fffffffdde0\n  </strong>\n  -\n  <strong>\n   0x10\n  </strong>\n  We see that this local string is placed in stack frame of function\non address\n  <strong>\n   0x7fffffffddd0\n  </strong>\n  , and this we see when we dump the stack:\n </p>\n <pre><code>(gdb) x/16gx $sp\n0x7fffffffddd0: 0x0041414141414141  0x6a8574f1d6812b00\n0x7fffffffdde0: 0x00007fffffffddf0  0x000055555555515b\n0x7fffffffddf0: 0x0000000000000001  0x00007ffff7daad90 \n</code></pre>\n <p>\n  So we ended with initialized local string on a stack just as we expected.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Dražen Grašovec",
            "time": "Nov 27, 2023 at 14:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}