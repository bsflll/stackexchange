{
    "title": "Memory allocation on the stack",
    "link": "https://reverseengineering.stackexchange.com/questions/4363/memory-allocation-on-the-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is a sample function reverse engineered from an easy program:\n </p>\n <pre><code>main            proc near\nvar_70          = dword ptr -70h\nvar_6C          = dword ptr -6Ch\nvar_68          = dword ptr -68h\ni_2             = dword ptr -54h\ni               = dword ptr -4\npush    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\nsub     esp, 70h\nmov     [esp+70h+i], 0\njmp     short loc_804840A\n￼￼￼loc_80483F7:\nmov     eax, [esp+70h+i]\nmov     edx, [esp+70h+i]\nadd     edx, edx\nmov     [esp+eax*4+70h+i_2], edx\nadd     [esp+70h+i], 1\nloc_804840A:\ncmp     [esp+70h+i], 13h\njle     short loc_80483F7\nmov     [esp+70h+i], 0\njmp     short loc_8048441\nloc_804841B:\nmov    eax, [esp+70h+i]\nmov    edx, [esp+eax*4+70h+i_2]\nmov    eax, offset aADD ; \"a[%d]=%d\n\"\nmov    [esp+70h+var_68], edx\nmov    edx, [esp+70h+i]\nmov    [esp+70h+var_6C], edx\nmov    [esp+70h+var_70], eax\ncall   _printf\nadd    [esp+70h+i], 1\nloc_8048441:\ncmp    [esp+70h+i], 13h\njle     short loc_804841B\nmov    eax, 0\nleave \nretn\nmain   endp\n\nC code\n\n#include <stdio.h>\nint main() {\n    int a[20];\n    int i;\n    for (i=0; i<20; i++)\n        a[i]=i*2;\n    for (i=0; i<20; i++)\n        printf (\"a[%d]=%d\n\", i, a[i]);\n    return 0;\n}\n</code></pre>\n <p>\n  My questions are:\n </p>\n <ol>\n  <li>\n   <p>\n    Why is memory not allocated consecutively and why are some parts of the memory in between\n    <code>\n     esp + 70h -54h\n    </code>\n    and\n    <code>\n     esp + 70h -68h\n    </code>\n    not used?\n   </p>\n  </li>\n  <li>\n   <p>\n    In\n    <code>\n     sub esp, 70h\n    </code>\n    , the number\n    <code>\n     70h\n    </code>\n    seems to be a random number in a different program, and it is often larger than we need. Why don't the compiler just allocate what we need?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "memory",
        "stack-variables"
    ],
    "user": "upton",
    "time": "May 20, 2014 at 20:06",
    "comments": [
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n Read\n <a href=\"http://reverseengineering.stackexchange.com/questions/4250/why-addresses-of-variable-on-stack-are-not-consecutive\">\n  Why addresses of variable on stack are not consecutive?\n </a>\n and the answers there.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In your case because\n  <em>\n   int\n  </em>\n  is 4 bytes and you want 20 element\n </p>\n <pre><code>int a[20] // --> 20 * 4 = 0x50\n</code></pre>\n <p>\n  so it is very normal for\n  <em>\n   i\n  </em>\n  and\n  <em>\n   i_2\n  </em>\n </p>\n <p>\n  The other thing is that your compiler didn't push\n  <em>\n   printf\n  </em>\n  arguments into stack. It pre-allocated the stack location in\n </p>\n <pre><code>var_70 = dword ptr -70h\nvar_6C = dword ptr -6Ch\nvar_68 = dword ptr -68h\n</code></pre>\n <p>\n  and called the function like this\n </p>\n <pre><code>mov    edx, [esp+eax*4+70h+i_2]\nmov    eax, offset aADD ; \"a[%d]=%d\n\"\nmov    [esp+70h+var_68], edx\nmov    edx, [esp+70h+i]\nmov    [esp+70h+var_6C], edx\nmov    [esp+70h+var_70], eax\ncall   _printf\n</code></pre>\n <p>\n  But there is 2 reason for such a thing (not your case)...\n </p>\n <ol>\n  <li>\n   <p>\n    The Compiler align the buffer for performance reasons and ease of cache.\nin addition unaligned buffers cause failure in some cases like Windows API calls and make debugging hard, so the compilers align every buffer to avoid this kind of failure.\n   </p>\n  </li>\n  <li>\n   <p>\n    Some safe compilation allocate random number after buffers to prevent successful exploitation of buffer overruns. for example:\n   </p>\n   <p>\n    and     esp, 0FFFFFFF0h\n   </p>\n  </li>\n </ol>\n <hr/>\n <p>\n  yeap! as @DCoder commented, you asked it\n  <a href=\"https://reverseengineering.stackexchange.com/questions/4250/why-addresses-of-variable-on-stack-are-not-consecutive\">\n   Here\n  </a>\n  before.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "upton",
                    "text": "<span class=\"comment-copy\">In that question, the answers says the temporary variables, like var_70 ,generated due to copy params are not local variables. But I think that's not correct.</span>",
                    "time": null
                }
            ]
        }
    ]
}