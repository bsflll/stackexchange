{
    "title": "How to map an arbitrary address to its corresponding basic block in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/1646/how-to-map-an-arbitrary-address-to-its-corresponding-basic-block-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Say I have an arbitrary address and I want to find out which basic block (i.e. area_t structure) corresponds to it. How would I do that?\n </p>\n <p>\n  Edit:\nmore specifically, I want to know the beginning / end of the basic block to which a given address belongs.\n </p>\n</div>\n</body></html>",
    "votes": "13",
    "answers": 2,
    "views": "5k",
    "tags": [
        "idapython",
        "ida"
    ],
    "user": "newgre",
    "time": "Apr 7, 2013 at 13:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I put this together quickly in the\n  <kbd>\n   File\n  </kbd>\n  >\n  <kbd>\n   Python command...\n  </kbd>\n  dialog:\n </p>\n <pre><code>tgtEA = idaapi.askaddr(0, \"Enter target address\")\nif tgtEA is None:\n  exit\n\nf = idaapi.get_func(tgtEA)\nif not f:\n  print \"No function at 0x%x\" % (tgtEA)\n  exit\n\nfc = idaapi.FlowChart(f)\n\nfor block in fc:\n  if block.startEA <= tgtEA:\n    if block.endEA > tgtEA:\n      print \"0x%x is part of block [0x%x - 0x%x)\" % (tgtEA, block.startEA, block.endEA)\n</code></pre>\n <p>\n  Keep in mind that IDA's basic block addresses are \"\n  <code>\n   startEA\n  </code>\n  inclusive,\n  <code>\n   endEA\n  </code>\n  exclusive\".\n </p>\n</div>\n</body></html>",
            "votes": "16",
            "user": "DCoder",
            "time": "Apr 8, 2013 at 14:57",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As suggested by DCoder, I use the following helper class to efficiently resolve addresses to basic blocks:\n </p>\n <pre><code># Wrapper to operate on sorted basic blocks.\nclass BBWrapper(object):\n  def __init__(self, ea, bb):\n    self.ea_ = ea\n    self.bb_ = bb\n\n  def get_bb(self):\n    return self.bb_\n\n  def __lt__(self, other):\n    return self.ea_ < other.ea_\n\n# Creates a basic block cache for all basic blocks in the given function.\nclass BBCache(object):\n  def __init__(self, f):\n    self.bb_cache_ = []\n    for bb in idaapi.FlowChart(f):\n      self.bb_cache_.append(BBWrapper(bb.startEA, bb))\n    self.bb_cache_ = sorted(self.bb_cache_)\n\n  def find_block(self, ea):\n    i = bisect_right(self.bb_cache_, BBWrapper(ea, None))\n    if i:\n      return self.bb_cache_[i-1].get_bb()\n    else:\n      return None\n</code></pre>\n <p>\n  It can be used like this:\n </p>\n <pre><code>bb_cache = BBCache(idaapi.get_func(here()))\nfound = bb_cache.find_block(here())\nif found:\n  print \"found: %X - %X\" % (found.startEA, found.endEA)\nelse:\n  print \"No basic block found that contains %X\" % here()\n</code></pre>\n</div>\n</body></html>",
            "votes": "17",
            "user": "newgre",
            "time": "Apr 7, 2013 at 17:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}