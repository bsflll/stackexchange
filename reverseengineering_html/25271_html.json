{
    "title": "How are members of a Structure Type positioned on the stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/25271/how-are-members-of-a-structure-type-positioned-on-the-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Some of the structure types have members that are not stacked next to each other. Check out the structure type at 0x33E6 in bzip2_base (x86-64)\n  <a href=\"https://github.com/ryantanwk/VaTy/blob/master/benchmark/sample_binaries/bzip2_base.gcc54-64bit.DIE\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  . There's an int at location offset 0, a char at 4 and then an int at 5004! and so on, which brings up the size of the struct to 5104 Bytes, although it only consists of int and char variables (3 of each) with a struct called strm which is 640 Bytes long.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "66",
    "tags": [
        "elf",
        "struct",
        "debugging-symbols",
        "stack-variables",
        "type-reconstruction"
    ],
    "user": "Sav",
    "time": "Jun 14, 2020 at 11:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The second member, called\n  <code>\n   buf\n  </code>\n  (at location 4) is\n  <em>\n   not\n  </em>\n  a\n  <code>\n   char\n  </code>\n  . The type of that member is defined at\n  <code>\n   0x3451\n  </code>\n  , and this is an\n  <em>\n   array\n  </em>\n  type. Its elements are each of the type defined at\n  <code>\n   0x2d04\n  </code>\n  , which is a typedef named\n  <code>\n   Char\n  </code>\n  , which redirects to\n  <code>\n   0x29b7\n  </code>\n  , which is indeed\n  <code>\n   char\n  </code>\n  (represented as base type\n  <code>\n   signed char\n  </code>\n  ).\n </p>\n <pre><code> <1><3451>: Abbrev Number: 11 (DW_TAG_array_type)\n    <3452>   DW_AT_type        : <0x2d04>       ==> Char   ==> (signed) char\n    <3456>   DW_AT_sibling     : <0x3462>       ==> just management info\n <2><345a>: Abbrev Number: 25 (DW_TAG_subrange_type)\n    <345b>   DW_AT_type        : <0x29a8>       ==> indexed by \"sizetype\"\n    <345f>   DW_AT_upper_bound : 4999           ==> indices are 0..4999\n <2><3461>: Abbrev Number: 0\n</code></pre>\n <p>\n  So the type of that member is an array containing 5000\n  <code>\n   Char\n  </code>\n  objects which are\n  <code>\n   char\n  </code>\n  objects. So it is not surprising that when\n  <code>\n   buf\n  </code>\n  starts at offset 4, the next object starts at offset 5004.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Michael Karcher",
            "time": "Jun 14, 2020 at 22:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}