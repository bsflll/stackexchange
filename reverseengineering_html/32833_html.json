{
    "title": "How can I reverse engineer a self-contained dotnet executable on MacOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/32833/how-can-i-reverse-engineer-a-self-contained-dotnet-executable-on-macos",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For a challenge at OWASP WrongSecrets I have build a self-contained binary to be reverse engineered (see\n  <a href=\"https://github.com/OWASP/wrongsecrets-binaries/actions/runs/8244751569\" rel=\"nofollow noreferrer\">\n   https://github.com/OWASP/wrongsecrets-binaries/actions/runs/8244751569\n  </a>\n  ), but, I have not been able to find the secret with Ghidra or Radare2 on MacOS. How can I best find the secret using tools on Linux or MacOS?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "81",
    "tags": [
        ".net",
        "macos"
    ],
    "user": "Jeroen",
    "time": "Mar 24, 2024 at 8:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Self-contained executable are usually an executable part and attached inside the executable the DotNet assembly dll files. Decompiling using Ghidra/Radare first will get you into the executable part which is not application-specific, but the DotNet runtime.\n </p>\n <p>\n  Therefore I recommend using a DotNet decompiler like\n  <a href=\"https://github.com/icsharpcode/ILSpy/releases\" rel=\"nofollow noreferrer\">\n   ILSpy\n  </a>\n  . It is capable of loading the assembly DLL files included in the executable and decompile e.g. the Main method of the DotNet application (see assembly\n  <code>\n   dotnetproject\n  </code>\n  ).\n </p>\n <p>\n  Unfortunately ILSpy is a Windows program and not available for MacOS. Homebrew has an\n  <a href=\"https://formulae.brew.sh/cask/ilspy\" rel=\"nofollow noreferrer\">\n   ilspy cask\n  </a>\n  , but that only installs an old  Avalonia, an old and discontinued port of ILSpy. I am not sure if that port is already able to open and decompile the packed DotNet executable.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Robert",
            "time": "Mar 24, 2024 at 11:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jeroen",
                    "text": "<span class=\"comment-copy\">Thank you sir! The lispy cask gave metadata errors when I tried to open the fileâ€¦ is there an alternative possible for Linux/Macos besides running a VM?</span>",
                    "time": null
                }
            ]
        }
    ]
}