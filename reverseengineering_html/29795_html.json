{
    "title": "I don't find the body of a function that I called in the main function",
    "link": "https://reverseengineering.stackexchange.com/questions/29795/i-dont-find-the-body-of-a-function-that-i-called-in-the-main-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have created a very simple\n  <code>\n   x86\n  </code>\n  console program that uses\n  <code>\n   Visual Studio 2019 compiler\n  </code>\n  to sum 2 numbers just to see how is the program be after disassembly but I found something unclear to me.\n </p>\n <pre><code>// C++\n#include <iostream>\n\nint sum(int n, int n2) {\n    return n + n2;\n}\n\nint main() {\n    int result = sum(7, 3);\n    std::cout << result;\n}\n</code></pre>\n <p>\n  After disassembled\n </p>\n <pre><code>; The main function from outside\nPush edi\npush esi\npush dword ptr ds:[eax]\ncall <consoleapplication._main>\nadd esp, C\n\n; The main function from inside\nmov ecx, dword ptr ds : [<&? cout@std@@3V ? $basic_ostream@DU ? $char_traits@D@std@@@1@A>]\npush A\ncall dword ptr ds : [<&? ? 6 ? $basic_ostream@DU ? $char_traits@D@std@@@std@@QAEAAV01@H@Z>]\nxor eax, eax\nret\n</code></pre>\n <p>\n  As you have seen in the second code block, the second line\n </p>\n <pre><code>push A\n</code></pre>\n <p>\n  That is the result of the \"sum\" function but\n  <strong>\n   where is its body and where is the call instruction that calls it in the main function?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "143",
    "tags": [
        "disassembly",
        "functions"
    ],
    "user": "Lion King",
    "time": "Dec 30, 2021 at 14:34",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n first of all you have already been advised quite a few times to post code and not screen shots  next for a question to have a meaningful answer you need to provide context like what architecture what compiler options , which compiler, what os , optimization etc. will you understand if i reply the body may have been inlined and optimized away\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Making a function\n <code>\n  static inline\n </code>\n in C++ has a similar effect. Usually the function body will be completely inlined. In your case, however, the compiler knew\n <code>\n  sum()\n </code>\n was only called once. It knew it was called with known (literal) arguments and so there was no point in delegating the computation to runtime. Essentially your example is\n <code>\n  constexpr\n </code>\n without explicitly saying it. Optimizers in compilers these days are fairly smart and will catch much more convoluted cases (but fail with some trivial ones, too). Change the code to take in\n <code>\n  argc\n </code>\n from\n <code>\n  main()\n </code>\n and it should look different.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n ... but even in that case your function could still be inlined (i.e. body disappears). There are actually cases where this is desired behavior and\n <code>\n  static inline\n </code>\n on a function is one way to nudge the compiler in the right direction without using proprietary \"attributes\" like\n <code>\n  __forceinline\n </code>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    always post text instead of screen shots as much as possible .\n   </p>\n  </li>\n  <li>\n   <p>\n    always provide context .\n   </p>\n  </li>\n  <li>\n   <p>\n    the compilers , operating systems , architectures , headers everything evolve and what might have been correct yesterday might not be correct today .\n   </p>\n  </li>\n  <li>\n   <p>\n    code with all warnings and analysis enabled as much as possible .\n   </p>\n  </li>\n  <li>\n   <p>\n    provide a readily compilable code for some one to spend a few minutes trying to answer if you don't include headers most wont be bothered to look for them .\n   </p>\n  </li>\n </ol>\n <p>\n  <a href=\"https://stackoverflow.com/questions/4246514/why-does-gcc-say-named-return-values-no-longer-supported\">\n   6) do you know your return statement has a problem called NRVO some compilers will spit cant return n+n2 named returns are not supported ?\n  </a>\n </p>\n <p>\n  use scopes with {} make it a habit .\n </p>\n <p>\n  and not to nitpick but printf is not c++.\n </p>\n <p>\n  i have attached a gif below that should answer your question watch it several times test and edit your question what you do not understand in that gif\nand whether you were able to find the answer you were looking for by watching it\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/lwHJ0.gif\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/lwHJ0.gif\"/>\n  </a>\n </p>\n <p>\n  As Commented there are several kinds of Optimization\n  \n\n  you can read the docs for the compiler you use\n  \n\n  for msvc cl.exe these are the Optimizations that can be performed\n </p>\n <pre><code>C:\\>cl /nologo  /? | grep /O\n/O1 maximum optimizations (favor space) /O2 maximum optimizations (favor speed)\n/Ob<n> inline expansion (default n=0)   /Od disable optimizations (default)\n/Og enable global optimization          /Oi[-] enable intrinsic functions\n/Os favor code space                    /Ot favor code speed\n/Ox optimizations (favor speed)\n</code></pre>\n <p>\n  optimized code is difficult to analyze\n  \n\n  that is why there debug build are used when writing code\n  \n\n  optimized builds are used when releasing the code\n  \n\n  while releasing the symbols are also stripped away so an optimized release built binary is just bytes all over which the reverse engineer has to decipher\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 30, 2021 at 19:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lion King",
                    "text": "<span class=\"comment-copy\">Thank you for your tips, I have updated my question.</span>",
                    "time": null
                },
                {
                    "user": "Lion King",
                    "text": "<span class=\"comment-copy\"><code>-O1</code> and <code>-O2</code> are almost generate the same disassembly code (ambiguous code),  <code>-O0</code> is the only one that generates the normal code. But what if I face an application that uses <code>-O1</code> or <code>-O2</code> optimization option How can it be analyzed then?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">O0 is debug build O1 is optimized for speed , O2 is optimized for size  there are several other O's  which does some special optimizations  debugging optimized code is difficult and needs experience because when they are optimized the symbols  are also normally  stripped out. so all you have are tons of bytes to peer and decipher (thats basically reverse engineering)</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">While I agree with your commentary about the question, not all parts seem to apply anymore (e.g. <code>printf</code>) and I think they should be left in comments, instead of going into the answer. Much in the same way you (correctly!) pointed out that code should be posted instead of screenshots, your answer would have gained a bit by linking to the Compiler Explorer example.</span>",
                    "time": null
                }
            ]
        }
    ]
}