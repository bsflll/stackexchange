{
    "title": "What's the purpose of arithmetic shifts by zero bits?",
    "link": "https://reverseengineering.stackexchange.com/questions/12419/whats-the-purpose-of-arithmetic-shifts-by-zero-bits",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In a recent assignment, I disassembled a binary written in C++.\n  \n\n  In a few places throughout the program I came across shift operations by zero bits something like written below (The exact code/IDA isn't in front of me presently).  The shift operations were all before a conditional branch.\n </p>\n <pre><code>...\ncall sub_123456\nadd esp, 8\nshr eax, 0\ncmp ...\njz ...\n</code></pre>\n <p>\n  I have a decent understanding of assembly but I can't see why you'd do a bit shift of zero.  Isn't this essentially a NOP?  I've been looking for info on this but haven't come up with any definitive information.  My guess is it's added by the compiler for some reason, though I'd like to understand why.  The assignment is already submitted; this is just a question that's been nagging at me.  Any input would be appreciated!\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "278",
    "tags": [
        "disassembly",
        "x86",
        "c++"
    ],
    "user": "X0r",
    "time": "Apr 12, 2016 at 15:07",
    "comments": [
        {
            "user": "aleek",
            "text": "<html><body><span class=\"comment-copy\">\n You say that this was some kind of a assignment, so I am almost sure that the asembler code is not optimised (compiled with optimization options), what lead to that assembler instruction. For example the code was i=0;b>>i.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n Could be a number of things. Eg a 3-byte NOP or an extremely unoptimized\n <code>\n  eax=eax/1\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "X0r",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for your input guys!  Sometimes what compilers do makes very little sense lol\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Actually this is a logical\n <code>\n  shr\n </code>\n , arithmetic would be\n <code>\n  sar\n </code>\n . And sometimes what we think compilers should do, makes even less sense. Because compilers these days are optimizing for a range of CPUs, for pipelining and so on. I'm with @VitalyOsipov regarding the potential cause, though.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Spektre",
            "text": "<html><body><span class=\"comment-copy\">\n what about setting the flags (Sign,Zero,Parity) but\n <code>\n  cmp\n </code>\n renders most of them changed. Also could be self-modified code\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Maybe an optimizing compiler wants the next instruction to start on a 4 byte boundary, e.g. if the next instruction is the destination of a jump in an inner loop.  And maybe this one 3-byte instruction is faster than three consecutive one-byte NOPs.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jes Klinke",
            "time": "May 12, 2016 at 17:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">if that's true then it's a bad optimizing compiler. There are many <a href=\"https://stackoverflow.com/q/25545470/995714\">multi-byte NOPs defined in Intel's manual</a> that it should use instead of inventing one and possibly stuck with false dependencies. And there are better ways to do padding by <a href=\"https://stackoverflow.com/q/48046814/995714\">increasing the previous instructions length without adding any NOPs</a></span>",
                    "time": null
                }
            ]
        }
    ]
}