{
    "title": "is ther a way an app can display a message without the use of messagebox API?",
    "link": "https://reverseengineering.stackexchange.com/questions/11812/is-ther-a-way-an-app-can-display-a-message-without-the-use-of-messagebox-api",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have app that used to display a message \"processing\" after clicking OK button then another message \"done\", but now it doesn't. So I got reverse it and see whats happening, but it turns out that the way of searching for strings doesn't work, so  I searched for the\n  <code>\n   messagebox\n  </code>\n  API but I found\n  <code>\n   messageboxA\n  </code>\n  twice and\n  <code>\n   MessageboxW\n  </code>\n  once and they both seem not be used for that.\n </p>\n <p>\n  So, I would like to know if it's possible that the message could be displayed without the use of\n  <code>\n   MessageBox\n  </code>\n  API or even DLL can display the message without the API?\nplease help\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "windows",
        "patch-reversing",
        "delphi"
    ],
    "user": "D.Trap",
    "time": "Feb 2, 2016 at 12:39",
    "comments": [
        {
            "user": "Spektre",
            "text": "<html><body><span class=\"comment-copy\">\n what kind of message in the message box? custom ? standard win32? compilation of system strings? ... also an screenshot would be nice if possible (so we can see more...) If you can make it work on some test machine then check also the CLASS_ID of the message box it can reveal if it is windows message box or custom formular that just looks like it...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    <strong>\n     First you need to determine if it is windows message box or not.\n    </strong>\n   </p>\n   <p>\n    What kind of message is in the message box (custom/standard\n    <strong>\n     win32\n    </strong>\n    /compilation of system strings)? Also an screen-shot would be nice if possible (so we can see more...) If you can make it work on some test machine then check also the\n    <strong>\n     CLASS_ID\n    </strong>\n    of the message box it can reveal if it is windows message box or custom\n    <strong>\n     VCL\n    </strong>\n    Form that just looks like it... You can obtain the\n    <strong>\n     Class_ID\n    </strong>\n    with\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://stackoverflow.com/a/21330590/2521214\">\n      How to find the active child form of MDI from runtime from 3th App\n     </a>\n    </li>\n   </ul>\n   <p>\n    but its deleted and you do not have enough rep on SO to see it so here the copied source (\n    <strong>\n     VCL C++\n    </strong>\n    so you need just port to\n    <strong>\n     Pascal\n    </strong>\n    if you do not have\n    <strong>\n     Borland C++\n    </strong>\n    ) from it:\n   </p>\n  </li>\n </ol>\n <pre><code>    //---------------------------------------------------------------------------\n    //--- Windows ver: 1.1 ------------------------------------------------------\n    //---------------------------------------------------------------------------\n    HWND getwindow(HWND hnd0,AnsiString nam,AnsiString cls=\"\")\n        {\n        int i,l,ln=nam.Length(),lc=cls.Length(),e;\n        char txt[256];\n        HWND hnd1;\n        if (hnd0==NULL) hnd1=GetTopWindow(hnd0);\n        else            hnd1=GetWindow(hnd0,GW_HWNDNEXT);\n        for (;;)\n            {\n            e=1;\n            if (hnd1==hnd0) break;\n            if (hnd1==NULL) break;\n            l=GetWindowText(hnd1,txt,256);\n            if (e) { if (l>ln) l=ln; if (l<ln) e=0; else for (i=0;i<l;i++) if (txt[i]!=nam[i+1]) { e=0; break; } }\n            l=RealGetWindowClass(hnd1,txt,256);\n            if (e) { if (l>lc) l=lc; if (l<lc) e=0; else for (i=0;i<l;i++) if (txt[i]!=cls[i+1]) { e=0; break; } }\n            if (e) return hnd1;\n            hnd0=hnd1;\n            hnd1=GetWindow(hnd0,GW_HWNDNEXT);\n            }\n        return NULL;\n        };\n    //---------------------------------------------------------------------------\n    HWND getsubwindow(HWND hndp,HWND hnd0,AnsiString nam,AnsiString cls=\"\")\n        {\n        int i,l,ln=nam.Length(),lc=cls.Length(),e;\n        char txt[256];\n        HWND hnd1;\n        if (hnd0==NULL) hnd1=GetTopWindow(hnd0);\n        else            hnd1=GetWindow(hnd0,GW_HWNDNEXT);\n        for (;;)\n            {\n            e=1;\n            if (hnd1==hnd0) break;\n            if (hnd1==NULL) break;\n            if (GetParent(hnd1)!=hndp) e=0;\n            l=GetWindowText(hnd1,txt,256);\n            if (e) { if (l>ln) l=ln; if (l<ln) e=0; else for (i=0;i<l;i++) if (txt[i]!=nam[i+1]) { e=0; break; } }\n            l=RealGetWindowClass(hnd1,txt,256);\n            if (e) { if (l>lc) l=lc; if (l<lc) e=0; else for (i=0;i<l;i++) if (txt[i]!=cls[i+1]) { e=0; break; } }\n            if (e) return hnd1;\n            hnd0=hnd1;\n            hnd1=GetWindow(hnd0,GW_HWNDNEXT);\n            }\n        return NULL;\n        };\n    //---------------------------------------------------------------------------\n    bool getwindows(HWND &hnd,AnsiString &nam,AnsiString &cls)\n        {\n        int i,l;\n        char txt[256];\n        HWND hnd0=hnd;\n        nam=\"\"; cls=\"\";\n        if (hnd0==NULL) hnd=GetTopWindow(hnd0);\n        else            hnd=GetWindow(hnd0,GW_HWNDNEXT);\n        if (hnd==hnd0) { hnd=NULL; return false; }\n        if (hnd==NULL) { hnd=NULL; return false; }\n        l=GetWindowText(hnd,txt,256);       for (i=0;i<l;i++) nam+=txt[i];\n        l=RealGetWindowClass(hnd,txt,256);  for (i=0;i<l;i++) cls+=txt[i];\n        return true;\n        };\n    //---------------------------------------------------------------------------\n    //---------------------------------------------------------------------------\n    //---------------------------------------------------------------------------\n</code></pre>\n <p>\n  It is written in\n  <strong>\n   BDS2006 Turbo C++\n  </strong>\n  and use\n  <strong>\n   VCL\n  </strong>\n  so you need to convert it to your Language. Actually it uses only\n  <code>\n   AnsiString\n  </code>\n  from\n  <strong>\n   VCL\n  </strong>\n  so just change it to any string you have. It is\n  <strong>\n   WinAPI\n  </strong>\n  based so include \"Windows.h\"\n </p>\n <p>\n  Here is some example of usage:\n </p>\n <pre><code>    HANDLE hnd,hnd0;\n    AnsiString nam,cls;\n    AnsiString s,t=\"\";\n    for (hnd=NULL;;)\n        {\n        if (!getwindows(hnd,nam,cls)) break;    // get hnd,name and class\n        hnd0=GetParent(hnd);            // get parent hnd\n        if (hnd0!=Application->Handle) continue;// filter out unwanted windows\n        // here process found window or add it to list or what ever\n        // for example add to memo->Lines->Add(...) so you obtain a list of all windows ...\n        s=AnsiString().sprintf(\"%X\",hnd); while (s.Length()< 8) s=\"0\"+s; t+=s+\"h \";\n        s=cls;                            while (s.Length()<32) s=s+\" \"; t+=s+\" \";\n        s=nam;                            while (s.Length()<32) s=s+\" \"; t+=s+\"\\r\n\";\n        }\n    mm_log->Text=t; // just my memo\n</code></pre>\n <p>\n  Here few lines of the\n  <strong>\n   unfiltered\n  </strong>\n  output:\n </p>\n <pre><code>    Handle:   Class_ID:                        Name\n    0003060Ch TTokenWindow                     CodeParamWindow                 \n    00030374h ComboLBox                                                        \n    000100F8h tooltips_class32                                                 \n    000100FAh TaskListThumbnailWnd                                             \n    000100E6h tooltips_class32                                                 \n    000100E8h tooltips_class32                                                 \n    000100ECh tooltips_class32                                                 \n    000100EEh tooltips_class32                                                 \n    000100D0h tooltips_class32                                                 \n    000100E4h tooltips_class32                                                 \n    000100C8h Button                           Start                           \n    00030118h tooltips_class32                                                 \n    0003013Eh tooltips_class32                                                 \n    00040122h tooltips_class32                                                 \n    00090102h tooltips_class32                                                 \n    000100C2h Shell_TrayWnd                                                    \n    000303ECh TaskSwitcherOverlayWnd                                           \n    00010240h IME                              Default IME                     \n    0001023Eh TaskSwitcherWnd                  Task Switching                  \n    00030376h ComboLBox                                                        \n    000403A0h Auto-Suggest Dropdown                                            \n    00010108h CiceroUIWndFrame                 CiceroUIWndFrame                \n    000100C6h MSCTFIME UI                      MSCTFIME UI                     \n    000100C0h IME                              Default IME                     \n    00010158h tooltips_class32                                                 \n    00010246h ATL:000007FEF0EF52C0             Network Flyout                  \n    00010180h CDA Server Class                 Administrator : CDA Server      \n    00010182h IME                              Default IME                     \n    0001008Ch CiceroUIWndFrame                 CiceroUIWndFrame                \n    0001008Ah CiceroUIWndFrame                 TF_FloatingLangBar_WndTitle     \n    000303CEh tooltips_class32                                                 \n    0003061Eh TForm1                           Project Euler                   \n    00090566h TApplication                     Project1                        \n    0003061Ah TPUtilWindow                                                     \n    00050610h IME                              Default IME                     \n    00090386h MSCTFIME UI                      MSCTFIME UI                     \n    00210408h IME                              Default IME                     \n    000B0416h TEditWindow                      Unit1.cpp                       \n    0007057Ch TWatchWindow                     Watch List                      \n    000105B2h TTabDockHostForm                 Project1.bdsproj - Project Manager\n</code></pre>\n <p>\n  As you can see there will be many handles (all the visual components are like window so you need to filter out many things ... for example find the\n  <code>\n   hnd\n  </code>\n  of your Message box App. and then show only handles which have the same parrent\n  <code>\n   hnd0\n  </code>\n  .\n </p>\n <p>\n  For example I just created a message box to get the\n  <strong>\n   Class_ID\n  </strong>\n  :\n </p>\n <pre><code>    int ret=MessageDlg(\"Test message\",mtCustom,TMsgDlgButtons(mrOk),-1); // cls = \"TMessageForm\"\n</code></pre>\n <p>\n  To get the parent handle you need to search the unfiltered list for class\n  <code>\n   TApplication\n  </code>\n  . I used\n  <code>\n   Application->Handle\n  </code>\n  instead as I test this directly in the same App.\n </p>\n <ol start=\"2\">\n  <li>\n   <p>\n    <strong>\n     if the message box is native win32\n    </strong>\n   </p>\n   <p>\n    Then that does not necessarily mean the App calls\n    <strong>\n     winapi\n    </strong>\n    directly. Most likely it uses some\n    <strong>\n     VCL\n    </strong>\n    encapsulation of it instead. So browns the\n    <strong>\n     Delphi IDE\n    </strong>\n    help for any message box function names ... test them and look if the\n    <strong>\n     Class_ID\n    </strong>\n    matches with your app ...\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     if the message box is not native win32\n    </strong>\n   </p>\n   <p>\n    Then it is most likely normal\n    <strong>\n     VCL\n    </strong>\n    window. The class name is then the name of the\n    <strong>\n     Delphi\n    </strong>\n    window class like\n    <code>\n     TForm1\n    </code>\n    . Name of window is usually its\n    <code>\n     Caption\n    </code>\n    and for App the exe filename. In this case showing dialog is different:\n   </p>\n   <ul>\n    <li>\n     set position\n     <code>\n      Left,Top,Width,Height\n     </code>\n     or call\n     <code>\n      SetBounds()\n     </code>\n    </li>\n    <li>\n     set the message can be a\n     <code>\n      TLabel,TEdit\n     </code>\n     ,...\n     <code>\n      Text\n     </code>\n     or\n     <code>\n      Caption\n     </code>\n     property or directly rendered on\n     <code>\n      Canvas\n     </code>\n     .\n    </li>\n    <li>\n     set\n     <code>\n      Visible=true\n     </code>\n     or use\n     <code>\n      ShowWindow,ShowModal\n     </code>\n     ...\n    </li>\n   </ul>\n   <p>\n    So you know what to look for ...\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Text\n    </strong>\n   </p>\n   <p>\n    For multilingual App the text is usually in some\n    <code>\n     *.ini\n    </code>\n    or\n    <code>\n     *.dll\n    </code>\n    file. In case of\n    <strong>\n     DLL\n    </strong>\n    the\n    <strong>\n     DLL\n    </strong>\n    can be compressed or encrypted so it is not easily visible. Try to search for files with Languages in filenames.\n   </p>\n  </li>\n </ol>\n <p>\n  Hope it helps a bit if you got more info let me know.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The MessageBox API just creates a windows dialog and spins in a message loop until it is closed.\n </p>\n <p>\n  A program can do this themselves without using MessageBox, you can look for calls to either\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms645434.aspx\" rel=\"nofollow\">\n   CreateDialog\n  </a>\n  , or\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms632679.aspx\" rel=\"nofollow\">\n   CreateWindow\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "josh poley",
            "time": "Jan 20, 2016 at 21:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "D.Trap",
                    "text": "<span class=\"comment-copy\">i have located only CreateWindowExW and it is also not used for a message display</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  try to open the executable in CFF Explorer's hex editor and search for those strings, if you cant find them then i suggest you look for help about finding the hidden code inside executable.\ni think programmers can hide the portion of code sometimes and encrypt or hide strings as well.\nfind the portion of code that is hidden then look for the API again.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Candice",
            "time": "Jan 23, 2016 at 13:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "D.Trap",
                    "text": "<span class=\"comment-copy\">yeah it seems like its hidden somewhere, how do find the hidden code inside the executable?</span>",
                    "time": null
                }
            ]
        }
    ]
}