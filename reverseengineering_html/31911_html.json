{
    "title": "What is the meaning of 32 bit offset in x86 16 bit jump",
    "link": "https://reverseengineering.stackexchange.com/questions/31911/what-is-the-meaning-of-32-bit-offset-in-x86-16-bit-jump",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Consider x86 16 bit mode instruction:\n </p>\n <pre><code>$ echo 66 EA 66 55 44 33 22 11 | xxd -p -r | ndisasm -b16 -\n00000000  66EA665544332211  jmp dword 0x1122:0x33445566\n</code></pre>\n <p>\n  I thought 16 bit code jumps work by combining two 16 bit parts, while 32 bit code just uses 32 bit offset without segment part. What's the meaning of having both segment offset and 32 bit offset?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "204",
    "tags": [
        "x86"
    ],
    "user": "Uprooted",
    "time": "May 28, 2023 at 11:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's a far/long jump, which sets loads the code segment descriptor using the selector specified.\n </p>\n <p>\n  A\n  <code>\n   jmp\n  </code>\n  to a code segment selector which is the same as the existing\n  <code>\n   CS\n  </code>\n  value reloads the descriptor.\n </p>\n <p>\n  See the Intel\n  <a href=\"https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html\" rel=\"nofollow noreferrer\">\n   Software Developer's Manual\n  </a>\n  Section 7.3.15.2 \"Far Control Transfer Instructions\" and the description of the JMP instruction:\n </p>\n <blockquote>\n  <p>\n   In protected mode, the JMP instruction also allows jumps to a call gate, a task gate, and a task-state segment.\n  </p>\n </blockquote>\n <blockquote>\n  <p>\n   The JMP and CALL instructions (see Section 7.3.8, “Control Transfer Instructions”) both accept a far pointer as a destination to transfer program control to a segment other than the segment currently being pointed to by the CS register.\n  </p>\n </blockquote>\n <blockquote>\n  <p>\n   Far Jumps in Protected Mode. When the processor is operating in protected mode, the JMP instruction can be used\nto perform the following three types of far jumps:\n  </p>\n  <p>\n   • A far jump to a conforming or non-conforming code segment.\n  </p>\n  <p>\n   • A far jump through a call gate.\n  </p>\n  <p>\n   • A task switch.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "2",
            "user": "matja",
            "time": "May 28, 2023 at 15:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Uprooted",
                    "text": "<span class=\"comment-copy\">What do numbers 1122 and 33445566 mean here, how exactly are they combined to determine jump target?</span>",
                    "time": null
                },
                {
                    "user": "matja",
                    "text": "<span class=\"comment-copy\">@Uprooted 0x1122 there is the selector which is an offset (multiple of 8, the descriptor size in bytes) into the GPT (<a href=\"https://en.wikipedia.org/wiki/Global_Descriptor_Table\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Global_Descriptor_Table</a>).  0x1122 would be invalid because it is not a multiple of 8.  The segment descriptor (<a href=\"https://en.wikipedia.org/wiki/Segment_descriptor\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Segment_descriptor</a>) is loaded, which can change the privilege level, base address, and default operation size of the new code.  0x33445566 is an offset from the base address specified in the segment descriptor, which may be different to the physical address if paging is also used.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">@matja There's nothing here to suggest that it's running in protected mode at the time.  It is a perfectly valid unreal-mode address.</span>",
                    "time": null
                }
            ]
        }
    ]
}