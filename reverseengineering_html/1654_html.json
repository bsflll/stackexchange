{
    "title": "Why would a program contain a call instruction targetting the address immediately following that instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/1654/why-would-a-program-contain-a-call-instruction-targetting-the-address-immediatel",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While reversing a 32bit Mach-O binary with Hopper, I noticed this peculiar method. The instruction on 0x0000e506 seems to be calling an address right below the instruction.\n </p>\n <p>\n  What would be the reason for this? Is it some kind of register cleaning trickery?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/OBxX3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Disassembly listing containing an instruction call 0xe50b at address 0xe506, immediately followed by pop eax at address 0xe50b\" src=\"https://i.sstatic.net/OBxX3.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "37",
    "answers": 5,
    "views": "8k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Daniel Sloof",
    "time": "Feb 19, 2024 at 21:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is for position independent code. The\n  <code>\n   call 0xe50b\n  </code>\n  instruction pushes the address of the next instruction, and then jumps. It jumps to the immediately following instruction, which has no effect. The next instruction,\n  <code>\n   pop eax\n  </code>\n  , loads its own address into\n  <code>\n   eax\n  </code>\n  (as it was the value pushed by\n  <code>\n   call\n  </code>\n  ).\n </p>\n <p>\n  Further down it uses an offset from eax:\n </p>\n <pre><code>mov eax, dword [ds:eax-0xe50b+objc_msg_close]\n</code></pre>\n <p>\n  The value being subtracted,\n  <code>\n   0xe50b\n  </code>\n  , is the address that we moved into\n  <code>\n   eax\n  </code>\n  . If the code hasn't been moved anywhere,\n  <code>\n   eax-0xe50b\n  </code>\n  will be zero, but if the code has been moved to a different location, it will be the offset. We then add the address\n  <code>\n   objc_msg_close\n  </code>\n  , so we'll be able to reference it, even if the code has been moved in memory.\n </p>\n <p>\n  Hopper is actually being quite clever about it, because the instruction just says (from ndisasm):\n </p>\n <pre><code>mov eax,[eax+0x45fe75]\n</code></pre>\n <p>\n  but Hopper knows that\n  <code>\n   eax\n  </code>\n  contains the value of the instruction pointer at\n  <code>\n   0xe50b\n  </code>\n  , so uses that offset to find the symbol for you.\n </p>\n</div>\n</body></html>",
            "votes": "47",
            "user": "Dougall",
            "time": "May 17, 2013 at 7:47",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a frequently used \"trick\" to determine the address of the instruction following the\n  <code>\n   call\n  </code>\n  , i.e. the call instruction pushes the return address on the stack, which in this case corresponds to\n  <code>\n   0xe50b\n  </code>\n  . After the pop instruction, eax contains that address.\nFor instance, this idiom is used for position independent code (pic), but is also quite commonly seen in obfuscated code.\n </p>\n <p>\n  Other disassemblers often display this code sequence as\n  <code>\n   call $+5\n  </code>\n  (e.g. IDA).\n </p>\n</div>\n</body></html>",
            "votes": "17",
            "user": "newgre",
            "time": "Apr 8, 2013 at 12:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Now I cannot possibly know what the exact reason is here, but there is another very good reason, not mentioned so far, for using this kind of method: throwing off a disassembler during static analysis.\n </p>\n <p>\n  The mechanics of\n  <code>\n   call $+5\n  </code>\n  have been discussed, so I'll assume they are known by now - otherwise refer to the other answers. Basically like with any\n  <code>\n   call\n  </code>\n  on IA-32, the return address (the address of the instruction following the\n  <code>\n   call\n  </code>\n  ) gets\n  <code>\n   push\n  </code>\n  ed to the stack and the\n  <code>\n   ret\n  </code>\n  instruction inside that called function will presumably return to that address, assuming the stack hasn't been smashed meanwhile.\n </p>\n <h1>\n  Fooling static analysis tools\n </h1>\n <p>\n  What will even a sophisticated disassembler such as IDA do when it sees a\n  <code>\n   ret\n  </code>\n  opcode? Well, it'll assume that the function boundary has been reached. Here's an example:\n </p>\n <p>\n  <img alt=\"IDA trips over this trick\" src=\"https://i.sstatic.net/OTQrm.png\"/>\n </p>\n <p>\n  Now this not being the first time I've seen such a thing, I went on and deleted the function, so IDA stops assuming it's a function boundary. If I then tell it to disassemble the very next byte (\n  <code>\n   0Fh\n  </code>\n  ) I get this:\n </p>\n <p>\n  <img alt=\"IDA trips over this trick #2\" src=\"https://i.sstatic.net/7FVsB.png\"/>\n </p>\n <p>\n  What the disassembler cannot realize and what is the reason why interactive disassemblers like Hopper and IDA rock so much, is that something special is going on here. Let's look at the instructions:\n </p>\n <pre><code>51                                      push    rcx\n53                                      push    rbx\n52                                      push    rdx\nE8 00 00 00 00                          call    $+5\n5A                                      pop     rdx\n48 83 C2 08                             add     rdx, 8\n52                                      push    rdx\nC3                                      retn\n0F 5A 5B 59                             cvtps2pd xmm3, qword ptr [rbx+59h]\n89 DF                                   mov     edi, ebx\n52                                      push    rdx\n48 31 D2                                xor     rdx, rdx\n</code></pre>\n <p>\n  The leading bytes are the actual bytes in the binary, followed by their mnemonic representation. But pay special attention to this part:\n </p>\n <pre><code>call    $+5\npop     rdx ; <- = ADDR\nadd     rdx, 8\npush    rdx\nretn\n</code></pre>\n <p>\n  We get the address\n  <code>\n   ADDR\n  </code>\n  in\n  <code>\n   rdx\n  </code>\n  after the\n  <code>\n   pop\n  </code>\n  instruction was executed. We know this much from the description of the mechanism in the other answers. But then it gets odd:\n </p>\n <pre><code>add     rdx, 8\n</code></pre>\n <p>\n  we add ... uhm eight bytes to that address (\n  <code>\n   ADDR+8\n  </code>\n  ) and then we\n  <code>\n   push\n  </code>\n  it to the stack and call\n  <code>\n   ret\n  </code>\n  :\n </p>\n <pre><code>push    rdx\nretn\n</code></pre>\n <p>\n  If you remember how a\n  <code>\n   call\n  </code>\n  works then you'll remember that it pushes the return address to the stack, then passes execution to the called function and that function later calls\n  <code>\n   ret\n  </code>\n  in order to return to the address found on the stack. This knowledge is being exploited here. It manipulates the \"return address\" before \"returning\" to it. But looking back at our disassembly we find to our surprise (or not ;)):\n </p>\n <pre><code>E8 00 00 00 00                          call    $+5\n5A                                      pop     rdx\n48 83 C2 08                             add     rdx, 8\n52                                      push    rdx\nC3                                      retn\n0F 5A 5B 59                             cvtps2pd xmm3, qword ptr [rbx+59h]\n</code></pre>\n <p>\n  Let's count the opcode bytes (in your tool you can also do the math via the offsets, if you're so inclined):\n </p>\n <ol>\n  <li>\n   <code>\n    5A\n   </code>\n  </li>\n  <li>\n   <code>\n    48\n   </code>\n  </li>\n  <li>\n   <code>\n    83\n   </code>\n  </li>\n  <li>\n   <code>\n    C2\n   </code>\n  </li>\n  <li>\n   <code>\n    08\n   </code>\n  </li>\n  <li>\n   <code>\n    52\n   </code>\n  </li>\n  <li>\n   <code>\n    C3\n   </code>\n  </li>\n  <li>\n   <code>\n    0F\n   </code>\n  </li>\n </ol>\n <p>\n  But wait a minute, that means we're literally passing execution to the middle of this peculiar\n  <code>\n   cvtps2pd xmm3, qword ptr [rbx+59h]\n  </code>\n  ? That's right. Because\n  <code>\n   0Fh\n  </code>\n  is one of the prefixes used when encoding instructions on IA-32. So the programmer has tricked our disassembler, but he won't trick us. Undefining that code and then skipping the\n  <code>\n   0Fh\n  </code>\n  prefix we get:\n </p>\n <pre><code>51                                      push    rcx\n53                                      push    rbx\n52                                      push    rdx\nE8 00 00 00 00                          call    $+5\n5A                                      pop     rdx\n48 83 C2 08                             add     rdx, 8\n52                                      push    rdx\nC3                                      retn\n0F                                      db  0Fh\n5A                                      pop     rdx\n5B                                      pop     rbx\n59                                      pop     rcx\n89 DF                                   mov     edi, ebx\n52                                      push    rdx\n48 31 D2                                xor     rdx, rdx\n</code></pre>\n <p>\n  or:\n </p>\n <p>\n  <img alt=\"No longer tricked thanks to reverse engineer intervening\" src=\"https://i.sstatic.net/rYLrB.png\"/>\n </p>\n <p>\n  The apparent single four-byte instruction\n  <code>\n   0F 5A 5B 59\n  </code>\n  is now revealed to be bogus and instead we have to ignore the\n  <code>\n   0F\n  </code>\n  and then resume at\n  <code>\n   5A\n  </code>\n  , which decodes as\n  <code>\n   pop rdx\n  </code>\n  .\n </p>\n <p>\n  Check out\n  <a href=\"http://code.google.com/p/corkami/wiki/OpcodesTables\" rel=\"noreferrer\">\n   Ange's excellent opcode tables here\n  </a>\n  to find out more about how instructions get encoded on IA-32.\n </p>\n</div>\n</body></html>",
            "votes": "14",
            "user": "0xC0000022L",
            "time": "Apr 27, 2013 at 17:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ajs410",
                    "text": "<span class=\"comment-copy\">I have seen some applications (specifically, an anti-hacking protection known as MetaFortress) which use this technique as a way to embed data into the .text area of an application.  Use the call to jump over your embedded data, and then use the return address from the call as the pointer to the embedded data.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A\n  <code>\n   CALL\n  </code>\n  instruction has the effect of pushing a return address onto the stack, before performing the control transfer to the call target.\n </p>\n <p>\n  In your example above, the\n  <code>\n   CALL\n  </code>\n  instruction will push the value 0x0000E50B onto the stack, before transferring control to 0x0000E50B. The\n  <code>\n   POP\n  </code>\n  instruction at 0x0000E50B will then pop the last value off of the top of the stack, into EAX. This value will be the\n  <code>\n   POP\n  </code>\n  instructions own address, due to the\n  <code>\n   CALL\n  </code>\n  instruction pushing the return value.\n </p>\n <p>\n  This is a simple technique to get an instructions location in memory at run time.\n </p>\n <p>\n  An instructions location can't always be computed by the linker at compile time as a binary may be relocated in memory due to Address Space Layout Randomization (ASLR).\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "QAZ",
            "time": "Apr 8, 2013 at 12:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">The answer from Dougall is superior. Linkers handle ASLR via entries in relocation/fixup tables. This mechanism isn't so much to determine the location as it is to determine the relative offset <i>difference</i> between the address the compiled code is expecting and the actual address at runtime.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As others have said, this is for getting current instruction's address. But it's not recommended as it'll hurt performance because it won't return anywhere, causing disagreement of return addresses in data stack and in the CPU's internal calling stack\n </p>\n <p>\n  The recommended way is\n </p>\n <pre><code>GetCurrentAddress:\n    mov eax, [esp]\n    ret\n...\n    call GetCurrentAddress\n    mov [currentInstruction], eax\n</code></pre>\n <blockquote>\n  <p>\n   The reason is the \"hidden variables\" inside the processor. All modern processors contain much more state than you can see from the instruction sequence. There are TLBs, L1 and L2 caches, all sorts of stuff that you can't see. The hidden variable that is important here is the return address predictor.\n  </p>\n  <p>\n   <strong>\n    The more recent Pentium (and I believe also Athlon) processors maintain an internal stack that is updated by each CALL and RET instruction\n   </strong>\n   . When a CALL is executed, the return address is pushed both onto the\n   <em>\n    real stack\n   </em>\n   (the one that the ESP register points to) as well as to the\n   <em>\n    internal return address predictor stack\n   </em>\n   ; a RET instruction pops the top address of the return address predictor stack as well as the real stack.\n  </p>\n  <p>\n   The return address predictor stack is used when the processor decodes a RET instruction. It looks at the top of the return address predictor stack and says,\n   <em>\n    \"I bet that RET instruction is going to return to that address.\"\n   </em>\n   It then speculatively executes the instructions at that address. Since programs rarely fiddle with return addresses on the stack, these predictions tend to be highly accurate.\n  </p>\n  <p>\n   <a href=\"https://devblogs.microsoft.com/oldnewthing/20041216-00/?p=36973\" rel=\"nofollow noreferrer\">\n    https://devblogs.microsoft.com/oldnewthing/20041216-00/?p=36973\n   </a>\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "6",
            "user": "phuclv",
            "time": "Sep 7, 2020 at 3:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}