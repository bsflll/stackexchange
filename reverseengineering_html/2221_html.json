{
    "title": "What is a \"control-flow flattening\" obfuscation technique?",
    "link": "https://reverseengineering.stackexchange.com/questions/2221/what-is-a-control-flow-flattening-obfuscation-technique",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently heard about the \"control-flow flattening\" obfuscation which seems to be is used to break the structure of the CFG of the binary program (see\n  <a href=\"https://www.sstic.org/2013/presentation/execution_symbolique_et_CFG_flattening/\" rel=\"nofollow noreferrer\">\n   Symbolic Execution and CFG Flattening\n  </a>\n  ).\n </p>\n <p>\n  Can somebody make an explanation of what is its basic principle and, also, how to produce such obfuscation (tools, programming technique, ...) ? And, it would be nice to know if there are ways to extract the real shape of the control-flow of the program.\n </p>\n</div>\n</body></html>",
    "votes": "29",
    "answers": 3,
    "views": "22k",
    "tags": [
        "obfuscation"
    ],
    "user": "perror",
    "time": "Jan 9, 2023 at 13:47",
    "comments": [
        {
            "user": "nomilk",
            "text": "<html><body><span class=\"comment-copy\">\n I think this\n <a href=\"https://web.archive.org/web/20150907034947/http://www.inf.u-szeged.hu/~akiss/pub/pdf/laszlo_obfuscating.pdf\" rel=\"nofollow noreferrer\">\n  http://www.inf.u-szeged.hu/~akiss/pub/pdf/laszlo_obfuscating.pdf\n </a>\n paper fully explains the technique you mentioned down to the implementation\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @nomilk: Excellent, I did not know this paper. Thanks a lot.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "nomilk",
            "text": "<html><body><span class=\"comment-copy\">\n Dont mention it :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Anis LOUNIS aka AnixPasBesoin",
            "text": "<html><body><span class=\"comment-copy\">\n @nomilk link is dead, here's a living one:\n <a href=\"http://ac.inf.elte.hu/Vol_030_2009/003.pdf\" rel=\"nofollow noreferrer\">\n  ac.inf.elte.hu/Vol_030_2009/003.pdf\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @AnisLOUNISakaAnixPasBesoin it's not identical, but probably equivalent. Thanks. I just fixed the URL in the original comment, pointing to the archived version.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For a good example of this obfuscation, check Apple's FairPlay code, e.g. iTunes or iOS libs. Here's a typical graph of a function which had this obfuscation applied:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Xk4L6.png\"/>\n </p>\n <p>\n  As you can see, all edges between basic blocks - both conditional and unconditional - has been redirected to a dispatcher node which uses a new artificial variable to decide which block should be jumped to next. This variable is updated at the end of each separated basic block.\n </p>\n <p>\n  Here's the dispatcher node:\n </p>\n <pre><code>LDR    R3, =0xF26A85D2\nADD    R3, R2, R3\nCMP    R3, #0x40 ; switch 65 cases\nADDLS  PC, PC, R3,LSL#2 ; switch jump\n</code></pre>\n <p>\n  It uses\n  <code>\n   R2\n  </code>\n  as the control value.\n </p>\n <p>\n  And here's one of the basic blocks:\n </p>\n <pre><code>LDR  R2, =0x853FD863 ; jumptable 00532EFC case 33\nLDR  R1, [SP,#0x130+var_108]\nSTR  R2, [SP,#0x130+var_134]\nLDR  R2, =0xD957A31\nSTR  R1, [SP,#0x130+var_44]\nB    loc_532ED0\n</code></pre>\n <p>\n  It updates\n  <code>\n   R2\n  </code>\n  with the value which will be used to jump to the next block.\n </p>\n <p>\n  Recovering it shouldn't be\n  <em>\n   too\n  </em>\n  difficult in most cases - just track the control variable updates and replace jumps to the dispatcher node with jumps to the next block corresponding to the new control variable value.\n </p>\n</div>\n</body></html>",
            "votes": "23",
            "user": "Igor Skochinsky",
            "time": "Jun 10, 2013 at 16:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "heinrich5991",
                    "text": "<span class=\"comment-copy\">How do you edit the assembly without changing the actual binary?</span>",
                    "time": null
                },
                {
                    "user": "nomilk",
                    "text": "<span class=\"comment-copy\">@heinrich5991 In IDA we have the ability to make changes to the assembly representation of the binary we analysing, without changing the actual binary, then within IDA we can save this representation for later use.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"http://www.inf.u-szeged.hu/%7Eakiss/pub/pdf/laszlo_obfuscating.pdf\" rel=\"noreferrer\">\n   this paper\n  </a>\n  by Timea Laszlo and Akos Kiss :\n </p>\n <blockquote>\n  <p>\n   The basic method for ﬂattening a function is the following.\n  </p>\n  <p>\n   First, we break up the body of the function to basic blocks, and then we put all\nthese blocks, which were originally at diﬀerent nesting levels, next\nto each other.\n  </p>\n  <p>\n   The now equal-leveled basic blocks are encapsulated in\na selective structure (a switch statement in the C++ language) with\neach block in a separate case, and the selection is encapsulated in\nturn in a loop.\n  </p>\n  <p>\n   Finally, the correct ﬂow of control is ensured by a\ncontrol variable representing the state of the program, which is set\nat the end of each basic block and is used in the predicates of the\nenclosing loop and selection.\n  </p>\n </blockquote>\n <p>\n  <em>\n   <strong>\n    <code>\n     Image showing how control-flow flattening obfuscation alters code that contains loop structures.\n    </code>\n   </strong>\n  </em>\n  \n\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/hnlzc.png\"/>\n </p>\n <p>\n  <em>\n   <strong>\n    <code>\n     A simple example:\n    </code>\n   </strong>\n  </em>\n </p>\n <pre><code>int original()\n{\n    print \"Do\"\n    print \"you\"\n    print \"like\"\n    print \"milk?\"\n}\n\n\nint obfuscated()\n{\n    int ctrFlowVar = 1;\n\n    while(ctrFlowVar != 0)\n    {\n        switch(ctrFlowVar)\n        {\n            case 1:\n                print \"do\"\n                ctrFlowVar = 2;\n                break;\n            \n            case 2:\n                print \"you\"\n                ctrFlowVar = 3;\n                break;\n            \n            case 3:\n                print \"like\"\n                ctrFlowVar = 4;\n                break;\n            \n            case 4:\n                print \"milk?\"\n                ctrFlowVar = 0;\n                break;\n        }\n    }\n}\n</code></pre>\n <p>\n  If you are familiar with how\n  <code>\n   switch\n  </code>\n  statements are written in\n  <code>\n   assembly\n  </code>\n  (i know\n  <strong>\n   2\n  </strong>\n  ways, the\n  <strong>\n   if-style\n  </strong>\n  and the\n  <strong>\n   jumptable\n  </strong>\n  one) then the above example is easy to de-obfuscate.The\n  <code>\n   break;\n  </code>\n  instruction is a\n  <code>\n   jmp\n  </code>\n  .You could make it jump to the block thats supposed to be next.\n </p>\n</div>\n</body></html>",
            "votes": "29",
            "user": "Community",
            "time": "Aug 5, 2020 at 20:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Control flow flattening is an obfuscation\\transformation technique that can be applied to code for almost all languages in order to make it more difficult to understand and reverse engineer.\n </p>\n <pre><code>int gSDetETSDG119 = 1010545;\n    while (gSDetETSDG119 != 1010544)\n        {\n            switch (gSDetETSDG119) {\n              case 1010545:\n                {\n                    if (n <= 0) {\n                        gSDetETSDG119 = 1010546;\n                    } else {\n                        gSDetETSDG119 = 1010547;\n                    }\n                    break;\n                }\n              case 1010546:\n                {\n                    return (0.000000e+000);\n                    gSDetETSDG119 = 1010544;\n                    break;\n                }\n              case 1010547:\n                {\n                    gSDetETSDG119 = 1010544;\n                    break;\n                }\n            }\n        }\n}\nint gSDetETSDG118 = 1010541;\n    while (gSDetETSDG118 != 1010540)\n        {\n            switch (gSDetETSDG118) {\n              case 1010541:\n                {\n                    if (incx != 1 || incy != 1) {\n                        gSDetETSDG118 = 1010542;\n                    } else {\n                        gSDetETSDG118 = 1010543;\n                    }\n                    break;\n                }\n              case 1010542:\n                {\n                    {\n                        ix = 0;\n                        iy = 0;\n                        {\n                            int gSDetETSDG117 = 1010537;\n                            while (gSDetETSDG117 != 1010536)\n                                {\n                                    switch (gSDetETSDG117) {\n                                      case 1010537:\n                                        {\n                                            if (incx < 0) {\n                                                gSDetETSDG117 = 1010538;\n                                            } else {\n                                                gSDetETSDG117 = 1010539;\n                                            }\n                                            break;\n                                        }\n                                      case 1010538:\n                                        {\n                                            ix = (-n + 1) * incx;\n                                            gSDetETSDG117 = 1010536;\n                                            break;\n                                        }\n                                      case 1010539:\n                                        {\n                                            gSDetETSDG117 = 1010536;\n                                            break;\n                                        }\n                                    }\n                                }\n                        }\n                        {\n                            int gSDetETSDG116 = 1010533;\n                            while (gSDetETSDG116 != 1010532)\n                                {\n                                    switch (gSDetETSDG116) {\n                                      case 1010533:\n                                        {\n                                            if (incy < 0) {\n                                                gSDetETSDG116 = 1010534;\n                                            } else {\n                                                gSDetETSDG116 = 1010535;\n                                            }\n                                            break;\n                                        }\n                                      case 1010534:\n                                        {\n                                            iy = (-n + 1) * incy;\n                                            gSDetETSDG116 = 1010532;\n                                            break;\n                                        }\n                                      case 1010535:\n                                        {\n                                            gSDetETSDG116 = 1010532;\n                                            break;\n                                        }\n                                    }\n                                }\n                        }\n                        {\n                            i = 0;\n                            {\n                                int gSDetETSDG110 = 1010510;\n                                while (gSDetETSDG110 != 1010509)\n                                    {\n                                        switch (gSDetETSDG110) {\n                                          case 1010510:\n\n{\n                                                {\n                                                    int gSDetETSDG115 = 1010529;\n                                                    while (gSDetETSDG115 != 1010528)\n                                                        {\n                                                            switch (gSDetETSDG115) {\n                                                              case 1010529:\n                                                                {\n                                                                    if (i < n) {\n                                                                        gSDetETSDG115 = 1010530;\n                                                                    } else {\n                                                                        gSDetETSDG115 = 1010531;\n                                                                    }\n                                                                    break;\n                                                                }\n                                                              case 1010530:\n                                                                {\n                                                                    gSDetETSDG110 = 1010511;\n                                                                    gSDetETSDG115 = 1010528;\n                                                                    break;\n                                                                }\n                                                              case 1010531:\n                                                                {\n                                                                    gSDetETSDG110 = 1010509;\n                                                                    gSDetETSDG115 = 1010528;\n                                                                    break;\n                                                                }\n                                                            }\n                                                        }\n                                                }\n                                                break;\n                                            }\n                                          case 1010511:\n                                            {\n                                                {\n                                                    dtemp = dtemp + dx[ix] * dy[iy];\n                                                    ix = ix + incx;\n                                                    iy = iy + incy;\n                                                }\n                                              eTDGEyDg246:\n                                                {\n                                                    i++;\n                                                }\n                                              eTDGEyDg251:\n                                                {\n                                                    ;\n                                                }\n                                                gSDetETSDG110 = 1010510;\n                                                break;\n                                            }\n                                        }\n                                    }\n                              eTDGEyDg252:\n                                {\n                                    ;\n                                }\n                            }\n                        }\n                        return (dtemp);\n                    }\n                    gSDetETSDG118 = 1010540;\n                    break;\n                }\n              case 1010543:\n                {\n                    gSDetETSDG118 = 1010540;\n                    break;\n                }\n            }\n        }\n}\n</code></pre>\n <p>\n  This technique involves transforming the control flow of a program in a way that makes it more difficult to trace\\debug, while still preserving the same logic of the original program.\n </p>\n <p>\n  There are a number of different ways that control flow flattening can be implemented, but the basic idea is to take the control flow of the program and transform it into a series of nested if-then-else\\while\\switch statements.\n </p>\n <p>\n  This can be done by replacing all of the branches in the original code with conditional statements, and then nesting these statements so that the overall control flow becomes much more complex.\n </p>\n <p>\n  To avoid automatic code simplification and folding we can use opaque predicates technique with known conditions.\n </p>\n <p>\n  One of the biggest benefits of control flow flattening is that it can make it much more difficult for an attacker to understand the code and figure out how it works. This can be especially useful for protecting against reverse engineering and tampering attacks, as it can make it much more difficult for an attacker to modify the code or to understand its internal logic\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "BenjaminL",
            "time": "Jan 9, 2023 at 11:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. In case of links to \"own\" resources <a href=\"https://reverseengineering.stackexchange.com/help/promotion\">it is customary and expected that affiliations are disclosed</a>. Your avatar and the favicon and logo on the linked side probably don't coincide by pure chance? A look at your profile suggests it isn't coincidence. Please edit your answer. Also, it sounds a bit vague, almost like some AI-generated answer would sound (just stating, not accusing!).</span>",
                    "time": null
                },
                {
                    "user": "tripleee",
                    "text": "<span class=\"comment-copy\">With the spammy link gone, this no longer deserves to be downvoted.</span>",
                    "time": null
                }
            ]
        }
    ]
}