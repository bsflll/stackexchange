{
    "title": "What does %reg:value mean in ATT assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/1990/what-does-regvalue-mean-in-att-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When I disassemble a function, I encounter from time to time an expression of the form\n  <code>\n   %reg:value\n  </code>\n  . Typically, I encounter this syntax when I activate the canaries in GCC (\n  <code>\n   -fstack-protector\n  </code>\n  ), as in the following example:\n </p>\n <pre><code>(gdb) disas\nDump of assembler code for function foo:\n   0x000000000040057c <+0>: push   %rbp\n   0x000000000040057d <+1>: mov    %rsp,%rbp\n   0x0000000000400580 <+4>: sub    $0x20,%rsp\n   0x0000000000400584 <+8>: mov    %edi,-0x14(%rbp)\n=> 0x0000000000400587 <+11>:    mov    %fs:0x28,%rax\n   0x0000000000400590 <+20>:    mov    %rax,-0x8(%rbp)\n   0x0000000000400594 <+24>:    xor    %eax,%eax\n   0x0000000000400596 <+26>:    mov    $0x4006ac,%edi\n   0x000000000040059b <+31>:    callq  0x400440 <puts@plt>\n   0x00000000004005a0 <+36>:    mov    -0x8(%rbp),%rax\n   0x00000000004005a4 <+40>:    xor    %fs:0x28,%rax\n   0x00000000004005ad <+49>:    je     0x4005b4 <foo+56>\n   0x00000000004005af <+51>:    callq  0x400450 <__stack_chk_fail@plt>\n   0x00000000004005b4 <+56>:    leaveq \n   0x00000000004005b5 <+57>:    retq   \n</code></pre>\n <p>\n  What is the meaning of this kind of syntax?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "x86",
        "assembly"
    ],
    "user": "perror",
    "time": "May 3, 2013 at 20:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   %fs:028h\n  </code>\n  is actually using the form\n  <code>\n   segment:offset\n  </code>\n  , which means it is reaching the memory address at offset\n  <code>\n   28h\n  </code>\n  in the segment selected by the Far Segment\n  <code>\n   FS\n  </code>\n  .\n </p>\n <p>\n  Any memory reference has an implicit segment (most of the time,\n  <code>\n   CS\n  </code>\n  for execution,\n  <code>\n   DS\n  </code>\n  for data read/write), which can be overriden by a segment prefix.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Ange",
            "time": "May 3, 2013 at 8:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">This is Linux, not Windows.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">So, we could have write it: 0x28(%fs), why another syntax for the same thing ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@perror: please reread Ange's answer. <code>FS</code> is a segment register, so this syntax means an offset inside the <i>segment pointed to by <code>FS</code></i>. There's no syntax for extracting bits from a register (x86 ISA does not support operands like that). 0x28(%fs) would mean <i>value of <code>FS</code> plus 0x28</i> which is a different thing.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Okay, it means that the memory space addressed here is on the physical memory space and not the virtual one. Is it correct ?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@perror: nope. The values may differ between KM and UM. In UM you never get to see physical memory directly, unless it's a gaping security hole. <code>fs</code> and friends are usually referred to as selectors in flat address mode, since they don't quite have the same meaning as they used to in real mode.</span>",
                    "time": null
                }
            ]
        }
    ]
}