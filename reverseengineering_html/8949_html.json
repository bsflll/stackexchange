{
    "title": "Reverse Engineering a python mac application compiled with \"freeze\"",
    "link": "https://reverseengineering.stackexchange.com/questions/8949/reverse-engineering-a-python-mac-application-compiled-with-freeze",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (Note)I have already seen this post:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/5860/reverse-engineering-program-written-in-python-compiled-with-freeze\">\n   Reverse Engineering program written in Python, compiled with \"freeze\"\n  </a>\n </p>\n <p>\n  Would anyone know how to do what is done in the link above using the PyCommand but with a mac app? The program I am trying to reverse engineer is compiled using the exact same program but the binary is a mac application.\n </p>\n <p>\n  Unfortunately Immunity Debugger is only able to be run on windows, so I cannot use the PyCommand (to my knowledge). Any help is appreciated, thank you.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "python"
    ],
    "user": "Michael Wass",
    "time": "May 21, 2015 at 22:03",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n The answer on the page to which you linked gives the exact steps necessary to dump the module. Just replace \"Ollydbg\" in Step 1 with \"gdb\" or similar.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Wass",
            "text": "<html><body><span class=\"comment-copy\">\n Would I have to do that for each module? There are over 2,000 modules in the program I am wanting to decompile.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As per the\n  <a href=\"https://reverseengineering.stackexchange.com/questions/5860/reverse-engineering-program-written-in-python-compiled-with-freeze\">\n   linked post\n  </a>\n  you can use any debugger to dump frozen modules compiled with freeze. However since you are on a mac, PyCommand and Immunity Debugger will not work. However that does not prevent you from working your ways in.\n </p>\n <p>\n  On a non Windows OS, you can use\n  <a href=\"http://www.frida.re/\" rel=\"nofollow\">\n   <em>\n    frida\n   </em>\n  </a>\n  to inject your code inside the running executable.\n  <strike>\n   Since frida injects\n   <em>\n    javascript\n   </em>\n   inside the process, you need to translate the\n   <em>\n    python\n   </em>\n   code to\n   <em>\n    js\n   </em>\n   .\n  </strike>\n </p>\n <p>\n  You only need to dump relevant frozen modules, and it would happen automatically as\n  <code>\n   _frozen\n  </code>\n  is an array of all frozen modules.\n </p>\n <hr/>\n <p>\n  <strong>\n   UPDATE\n  </strong>\n </p>\n <p>\n  Here is a script to dump frozen modules using the\n  <a href=\"https://pypi.python.org/pypi/frida\" rel=\"nofollow\">\n   python bindings\n  </a>\n  for frida. The script is fairly portable and should work on all OS. You only need to provide the\n  <a href=\"http://en.wikipedia.org/wiki/Process_identifier\" rel=\"nofollow\">\n   PID\n  </a>\n  of the relevant process which you can get from\n  <em>\n   Activity Monitor\n  </em>\n  /\n  <em>\n   System Monitor\n  </em>\n  /\n  <em>\n   Task Manager\n  </em>\n  for your OS.\n </p>\n <pre><code>import frida, struct, sys\n\n# Magic value of pyc files, The value provided here is for python 2.7\n# You can get it by imp.get_magic()\nPYTHONMAGIC = '\\x03\\xF3\\x0D\\x0A' + '\\x00' * 4\n\n# Provide the pid of your process\nPID = 2008\n\n# The size of a pointer is 8 bytes on 64 bit OS and 4 on a 32 bit OS\nptr_size = 8 if sys.maxsize > 2**32 else 4\n\n# Name of python shared library\nif sys.platform.startswith('linux'):\n    lib_name = 'libpython2.7.so'\nelif sys.platform.startswith('darwin'):\n    lib_name = 'libpython2.7.dylib'\nelif sys.platform.startswith('win32'):\n    lib_name = 'python27.dll'\nelse:\n    raise Exception('Unsupported platform')\n\n\nsession = frida.attach(PID)\nexport_va = 0\n\n# Read a null terminated C string or a char array of a given length\ndef readString(addr, size = 0):\n    if size > 0:\n        return struct.unpack('@{}s'.format(size) , session.read_bytes(addr, size))[0]\n    elif size == 0:\n        s = ''\n        while True:\n            ch, = struct.unpack('@c', session.read_bytes(addr, 1))\n            addr += 1\n            if ch == '\\x00':\n                break\n            else:\n                s += ch\n        return s\n    else:\n        return ''\n\n\nmodules = session.enumerate_modules()\nfor module in modules:\n    if module.name == lib_name:\n        exports = module.enumerate_exports()\n        for export in exports:\n            if export.name == 'PyImport_FrozenModules':\n                export_va = module.base_address + export.relative_address\n                break\n    if export_va != 0:\n        break\n\n\nif export_va == 0:\n    raise Exception(\"Could not get export address of PyImport_FrozenModules\")\n\nstructAddr, = struct.unpack_from('@P', session.read_bytes(export_va , ptr_size))\n\nwhile True:\n    ptrToName, ptrToCode, sizeOfCode = struct.unpack_from('@PPi', session.read_bytes(structAddr, ptr_size * 2 + 4))\n    structAddr += ptr_size * 2 + 4\n\n    # The array is terminated by a structure whose members are null\n    if ptrToName == 0 and ptrToCode == 0 and sizeOfCode == 0:\n        break\n\n    moduleName = readString(ptrToName)\n    moduleCode = readString(ptrToCode, sizeOfCode)\n\n    # You can change the output path here\n    with open(moduleName + '.pyc', 'wb') as f:\n        f.write(PYTHONMAGIC + moduleCode)\n\nprint '[*] Frozen modules dumped'\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xec",
            "time": "May 23, 2015 at 5:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Michael Wass",
                    "text": "<span class=\"comment-copy\">For some reason the script is not working. It is saying it cannot find PyImport_FrozenModules. I tried it out on the PC executable compiled with freeze and got the same error.  Here is a download for the binary on the mac, could you try it and see if it works for you: <a href=\"https://www.dropbox.com/s/w7qpgm1hnwk5j9j/Archive.zip?dl=0\" rel=\"nofollow noreferrer\">dropbox.com/s/w7qpgm1hnwk5j9j/Archive.zip?dl=0</a></span>",
                    "time": null
                },
                {
                    "user": "Michael Wass",
                    "text": "<span class=\"comment-copy\">Update: I was able to get the script working on the PC. The issue is with the lib_name. On the mac the python dylib is embedded inside of the app itself. How would I be able to call that?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@MichaelWass The <code>lib_name</code> depends on the version of python used. For <code>PyImport_FrozenModules</code>, you need to find out which module exports it and accordingly change <code>lib_name</code></span>",
                    "time": null
                },
                {
                    "user": "Michael Wass",
                    "text": "<span class=\"comment-copy\">Would it matter if it is the actual library being used or not? Or just any old lib from python 2.4?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@MichaelWass <code>lib_name</code> must be the actual library which is used by the application.</span>",
                    "time": null
                }
            ]
        }
    ]
}