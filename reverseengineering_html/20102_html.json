{
    "title": "Is there a standard character encoding that is ASCII minus control characters?",
    "link": "https://reverseengineering.stackexchange.com/questions/20102/is-there-a-standard-character-encoding-that-is-ascii-minus-control-characters",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I came across some unusual strings in some embedded SH2A code I'm analyzing....\n </p>\n <p>\n  <code>\n   11 53 54 00 53 55 4E 44 41 59 00 4F 46 00 2E 4F 56 45 4D 42 45 52\n .  S  T  .  S  U  N  D  A  Y  .  O  F  .  .  O  V  E  M  B  E  R\n  </code>\n </p>\n <p>\n  Which I realized is just \"1st sunday of November\" if you subtract 0x20 from each byte, effectively removing the control characters from ASCII. But they're still using a full 8 bits per character (not that subtracting the control characters is enough to drop a bit anyway) so I'm left wondering why they would do it and whether it's something homegrown or just obscure.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "129",
    "tags": [
        "encodings"
    ],
    "user": "Zhentar",
    "time": "Dec 10, 2018 at 1:15",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Even minus control characters it doesn't explain why the ASCII\n <code>\n  1\n </code>\n is converted to a\n <code>\n  .\n </code>\n ... also the\n <code>\n  N\n </code>\n of November. That doesn't fit into a scheme that is merely \"flattening\" all control characters, does it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L That's not a\n <code>\n  .\n </code>\n , it's a\n <code>\n  \\x11\n </code>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the implementations of tolower() , toupper() normally tend to use the addition or subtraction of 0x20  maybe it is some kind of homegrown brew of these functions\n </p>\n <p>\n  here is a msvcrt toLower() pseudo c code from radare2\n </p>\n <pre><code>[0x78b0ccd4]> pdc\nfunction sym.MSVCR100.dll__tolower () {\n    //  1 basic blocks\n\n    loc_0x78b0ccd4:\n\n       edi = edi\n       push ebp\n       ebp = esp\n       eax = dword [arg_8h]     //[0x8:4]=-1 ; 8\n       eax += 0x20\n                                //ebp ; ebp\n       return\n(break)\n\n}\n[0x78b0ccd4]>\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Dec 10, 2018 at 5:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}