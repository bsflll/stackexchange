{
    "title": "Can JTAG and memory protections be glitched over? (regarding silicon construction of a micro)",
    "link": "https://reverseengineering.stackexchange.com/questions/16614/can-jtag-and-memory-protections-be-glitched-over-regarding-silicon-constructio",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   Glitch method:\n  </em>\n  irrelevant for topic of conversation, assume clock injection, voltage glitch, EMFI, \"lasers\", whatever you like.\n </p>\n <p>\n  <em>\n   Device:\n  </em>\n  For example modern ARM or PPC, or MIPS micros. Assuming you can run code locally.\n </p>\n <p>\n  <strong>\n   Can the memory protection units, DMA protections, JTAG limits/protections be accessed improperly with glitching methods? Or is this an avenue that is futile to look into?\n  </strong>\n </p>\n <p>\n  Wide topic I know. But are memory and device protections\n  <strong>\n   typically\n  </strong>\n  hard coded into the \"fabric\" of a micro where literally the JTAG or DMA CANNOT access this region of memory because there are no \"wires\" to those regions or are these things state machines and \"rules\"/\"allowances\" programmed in? If a DMA or MPU unit can access a protected region, can a well timed glitch help make the decision to expose that data?\n </p>\n <p>\n  When you see a chip has XYZ protections, given the physical constructions of modern chips, how accurate are datasheet claims of memory protection - assuming you have access to run code on a device itself. Or is the process that pulls and delivers a memory request immutable even if you messed with the specs of a chip?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "215",
    "tags": [
        "jtag",
        "protection"
    ],
    "user": "mint branch conditioner",
    "time": "Oct 24, 2017 at 17:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think it's important to differentiate security-oriented microcontrollers where advanced security measures are implemented on several levels including physical arrangement of the chip and general-purpose controllers, maybe with some basic security features. I'm going to answer mostly about the latter group.\n </p>\n <p>\n  When a technical reference manual mentions memory protection and MPU, it usually means there are several privilege levels in software. Software being run in \"userspace\" (I'm using quotes here because this term comes from big operating systems running on big processors) can only access certain regions of memory. However, this protection is implemented by matching the address about to be read/written with a set of allowed addresses. Actual address mapping process may be very complicated, but the important thing is that if the access is not allowed, a particular bus transaction won't even reach the memory interface of peripheral bus.\n </p>\n <p>\n  However, the bus connection doesn't go anywhere. It's still on the chip, but the invalid accesses don't even trigger any change of signals on it.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BT5Vg.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/BT5Vg.png\"/>\n  </a>\n </p>\n <p>\n  So, would it be possible to glitch the logic to make invalid accesses valid? Most certainly, and there are several techniques to it. Check out these links:\n </p>\n <ol>\n  <li>\n   <a href=\"https://www.cl.cam.ac.uk/~sps32/ECRYPT2011_1.pdf\" rel=\"nofollow noreferrer\">\n    https://www.cl.cam.ac.uk/~sps32/ECRYPT2011_1.pdf\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.cl.cam.ac.uk/~sps32/ECRYPT2011_2.pdf\" rel=\"nofollow noreferrer\">\n    https://www.cl.cam.ac.uk/~sps32/ECRYPT2011_2.pdf\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.quovadislabs.com/projects.html\" rel=\"nofollow noreferrer\">\n    http://www.quovadislabs.com/projects.html\n   </a>\n  </li>\n  <li>\n   <a href=\"https://newae.com/tools/chipwhisperer/\" rel=\"nofollow noreferrer\">\n    https://newae.com/tools/chipwhisperer/\n   </a>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Vladislav Ivanov",
            "time": "Oct 24, 2017 at 20:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mint branch conditioner",
                    "text": "<span class=\"comment-copy\">I'm familiar with glitching techniques. The question comes down to (if you want to use the userspace or trustzone in ARM's case example) is there a statemachine comparing good bad addresses when it comes to memory protection? Or is it just a \"hardwired\" denial based on the address coming over the bus. If it's the latter, glitching seems unlikely. I am not sure of how these protections a physically made.</span>",
                    "time": null
                },
                {
                    "user": "Vladislav Ivanov",
                    "text": "<span class=\"comment-copy\">\"statemachine comparing good bad addresses \" <i>is</i> a hardwired solution and it's usually MPU. For most CPU cores, memory access is checked before the transaction reaches the bus on the earlier stages of the pipeline, because otherwise it would slow down the execution.</span>",
                    "time": null
                }
            ]
        }
    ]
}