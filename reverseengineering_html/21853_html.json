{
    "title": "IDA and flirt signatures",
    "link": "https://reverseengineering.stackexchange.com/questions/21853/ida-and-flirt-signatures",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have 2 binaries, with the same CPU architecture.\n </p>\n <p>\n  I made a flirt signature file - first used\n  <code>\n   IDB2PAT\n  </code>\n  on the first idb, and then\n  <code>\n   sigmake\n  </code>\n  to produce the actual signature file out of it.\n </p>\n <p>\n  I put the produced file in the right CPU directory under\n  <code>\n   IDA\n  </code>\n  home. Then I opened the second binary and applied the signature file on it.\n </p>\n <p>\n  The result is that some of the functions (~20%) are marked in blue as library functions, and actually appear in the original binary as expected, but almost none of those functions were renamed to the names from the first binary.\n </p>\n <p>\n  Does anyone know what could be the reason? Is there another way to find the original function name from the binary that I apply the signature file on?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "binary",
        "flirt-signatures"
    ],
    "user": "macro_controller",
    "time": "Aug 6, 2019 at 12:58",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n did you get many collisions when running sigmake first time?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n also, what is the CPU?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n I got a minor number of collision (23 out of 2500), almost all of them were small functions. The CPU I use is\n <code>\n  ppc\n </code>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Alas RISC instruction sets like PowerPC are often not a good fit for FLIRT. I you read the\n  <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\" rel=\"nofollow noreferrer\">\n   white paper\n  </a>\n  (or even the FLAIR doc), you'll see that it only has provision for variable\n  <em>\n   bytes\n  </em>\n  , while in Power ISA the opcode fields usually cross byte boundaries, so you can get patterns which are either too broad (it ignores whole bytes instead of narrower bit fields) or too narrow (it does not allow enough variation and so won't match functions with slight changes). Additionally, solutions like\n  <code>\n   IDB2PAT\n  </code>\n  are mainly tuned for x86 so they likely produce suboptimal output for PPC.\n </p>\n <p>\n  I would suggest you to try simple byte sequence search to find some similar functions and then check if they were present in the original pattern list or not, and if they were, would the pattern bytes actually match the function.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 6, 2019 at 20:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">But why IDA marks the functions as a library, but doesn't give the name? For example, I found a function in both of the binaries, by searching bytes sequence. No collisions with other functions. Still no name on the found function.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Not sure, maybe no name was present in the signature for the matching address. FLIRT works with byte sequences, not functions.</span>",
                    "time": null
                }
            ]
        }
    ]
}