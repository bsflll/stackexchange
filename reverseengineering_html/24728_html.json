{
    "title": "Why does this x64 stack have other bytes and seems to be in reverse order?",
    "link": "https://reverseengineering.stackexchange.com/questions/24728/why-does-this-x64-stack-have-other-bytes-and-seems-to-be-in-reverse-order",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote the following small C program and you can also see the stack in the screenshot.\n  <a href=\"https://i.sstatic.net/0JLE8.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"C stack\" src=\"https://i.sstatic.net/0JLE8.png\"/>\n  </a>\n  My question is twofold:\n </p>\n <ol>\n  <li>\n   How come there are entire rows of other data between the 3 stack strings?\n  </li>\n  <li>\n   Why is my first stack string actually on top of the stack? I would think if I had 3 stack strings in succession, the string coming first in the C program would be at the\n   <em>\n    bottom\n   </em>\n   of the stack, and the last string pushed would be at the top.\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "120",
    "tags": [
        "c",
        "gdb",
        "stack"
    ],
    "user": "the_endian",
    "time": "Apr 17, 2020 at 7:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   How come there are entire rows of other data between the 3 stack strings?\n  </p>\n </blockquote>\n <p>\n  First of all, in\n  <code>\n   x64\n  </code>\n  Linux code, the stack should be aligned to\n  <code>\n   16\n  </code>\n  bytes before any function call, so you can expect that\n  <code>\n   rsp\n  </code>\n  will be aligned as such in compiler generated code.\n </p>\n <p>\n  Now, it's just a compiler's decision how many bytes it will use for item allocation. In GCC, for instance, you can set the alignment of stack items to any power\n  <code>\n   n\n  </code>\n  of\n  <code>\n   2\n  </code>\n  , using\n  <code>\n   -mpreferred-stack-boundary=n\n  </code>\n  option, according to\n  <a href=\"https://stackoverflow.com/questions/1061818/stack-allocation-padding-and-alignment\">\n   accepted answer\n  </a>\n  .\n </p>\n <blockquote>\n  <p>\n   Why is my first stack string actually on top of the stack? I would think if I had 3 stack strings in succession, the string coming first in the C program would be at the bottom of the stack, and the last string pushed would be at the top.\n  </p>\n </blockquote>\n <p>\n  Again, it's a compiler's decision how it will organise local variables on the stack as long as it produces code compliant with\n  <code>\n   C\n  </code>\n  standard. I agree, that the natural way is to put the arguments in order of declarations on the stack, but as you see, you cannot assume this in general. If you want to force this order, you can put them in a struct, according to\n  <a href=\"https://stackoverflow.com/questions/1102049/order-of-local-variable-allocation-on-the-stack/1102165#1102165\">\n   this answer\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "bart1e",
            "time": "Apr 17, 2020 at 14:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">That makes sense. I actually had a thought after I wrote this that likely the compiler has just reserved all of the stack space ahead of time using for example <code>sub esp, 56</code> , and then moved the data in there rather than doing <code>push</code> instructions. Still a bit odd that it wouldnt follow normal order, but I forgot that it is welcome to do that.</span>",
                    "time": null
                }
            ]
        }
    ]
}