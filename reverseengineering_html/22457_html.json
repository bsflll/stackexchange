{
    "title": "How to determine when/where pointers in .ctors get mapped?",
    "link": "https://reverseengineering.stackexchange.com/questions/22457/how-to-determine-when-where-pointers-in-ctors-get-mapped",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I am learning about ELF, and am looking through a binary in Ghidra as I do. I've made sense of the ELF header, and now I am looking through the program header table.\n </p>\n <p>\n  My binary has a bunch of entries in the program header table, but I am hung up on one in particular...\n </p>\n <p>\n  From referencing...\n </p>\n <p>\n  <a href=\"http://www.sco.com/developers/gabi/latest/ch5.pheader.html#p_flags\" rel=\"nofollow noreferrer\">\n   http://www.sco.com/developers/gabi/latest/ch5.pheader.html#p_flags\n  </a>\n </p>\n <p>\n  ...I can see what the different flags mean. Of relevance:\n </p>\n <pre><code>p_offset = 0xABCDEF\np_vaddr = 0x1BCDEF\np_filesz = <number>\np_memsz = <bigger number>\n</code></pre>\n <p>\n  I am able to go to the p_vaddr value in the binary, and it brings me to the\n  <code>\n   .ctors\n  </code>\n  section. Where I do see what appears to be a list of pointers, but currently those pointers do not represent valid virtual addresses (by currently I mean they are not virtual addresses that I can \"go\" to in Ghidra). When I run the program dynamically in gdb though, I can run\n  <code>\n   x addr_of_interest\n  </code>\n  and it succeeds and says it is pointing to something in a library blah blah.\n </p>\n <p>\n  I found a relevant link from GCC too, but it did not answer my question as far as I could tell...\n </p>\n <p>\n  <a href=\"https://gcc.gnu.org/onlinedocs/gccint/Initialization.html\" rel=\"nofollow noreferrer\">\n   https://gcc.gnu.org/onlinedocs/gccint/Initialization.html\n  </a>\n </p>\n <p>\n  My question therefore is this:\n  <strong>\n   When/how are these pointers mapped to valid memory, and where in the ELF file is the information that would tell me how this happens?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "240",
    "tags": [
        "c++",
        "elf",
        "ghidra",
        "x86-64"
    ],
    "user": "pooley1994",
    "time": "Nov 5, 2019 at 11:36",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Are you 100% sure you are looking at\n <code>\n  .ctors\n </code>\n and not, for example,\n <code>\n  .got\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "pooley1994",
            "text": "<html><body><span class=\"comment-copy\">\n @igor thanks for clarifying, but yes, I'm sure. There is a (symbol I believe?) In Ghidra displayed as\n <code>\n  __CTOR_LIST__\n </code>\n and once you jump there an auto generated comment that says\n <code>\n  .ctors\n </code>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Duh. Stupid.\n </p>\n <p>\n  Importantly, the binary I am looking at is\n  <strong>\n   not\n  </strong>\n  a PIE (\n  <strong>\n   P\n  </strong>\n  osition\n  <strong>\n   I\n  </strong>\n  ndependent\n  <strong>\n   E\n  </strong>\n  xecutable). I had Ghidra's image base set to 0x0, rather than 0x400000 (which is the p_vaddr of the loadable segment containing all of the code, and notably, the canonical value used here for x86_64 binaries). This is the only reason the function pointers listed in\n  <code>\n   .ctors\n  </code>\n  were not addresses Ghidra could go to. As soon as I set the image base to 0x400000 they were legitimate.\n </p>\n <p>\n  :facepalm:\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "pooley1994",
            "time": "Nov 5, 2019 at 14:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}