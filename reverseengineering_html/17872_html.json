{
    "title": "Why does IDA show wrong function arguments in pseudocode?",
    "link": "https://reverseengineering.stackexchange.com/questions/17872/why-does-ida-show-wrong-function-arguments-in-pseudocode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've open a DLL in IDA v7. In one subroutine, there is a\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/hh707077(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   <code>\n    PathAllocCombine()\n   </code>\n  </a>\n  function. The pesudocode shows six arguments in it. But the documentations shows there are four arguments i.e.\n  <code>\n   PathAllocCombine(PCWSTR, PCWSTR, unsigned long, PWSTR);\n  </code>\n </p>\n <p>\n  The pseudocode is as follows:\n </p>\n <pre><code>_QWORD *__fastcall sub_180040994(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  _QWORD *v3; // rbx\n  signed int v4; // ST20_4\n  unsigned int v5; // eax\n  void *retaddr; // [rsp+38h] [rbp+0h]\n\n  v3 = a1;\n  v4 = 1;\n  *a1 = 0i64;\n  v5 = PathAllocCombine(a2, a3, 1i64, a1, v4, -2i64);\n  if ( (v5 & 0x80000000) != 0 )\n  {\n    sub_18000A7A4(retaddr, 106i64, \"unknown.cpp\", v5);\n    JUMPOUT(*(_QWORD *)&byte_1800409F9);\n  }\n  return v3;\n}\n</code></pre>\n <p>\n  And here is the graph view of that subroutine (conditional jump is removed):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/thGwJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"PathAllocCombine_call\" src=\"https://i.sstatic.net/thGwJ.png\"/>\n  </a>\n </p>\n <p>\n  So, is this an internal bug in IDA? Or am I doing anything wrong?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "Apr 3, 2018 at 7:55",
    "comments": [
        {
            "user": "ebux",
            "text": "<html><body><span class=\"comment-copy\">\n The x64 calling convention passed the first 4 parameters in registers, but the others in stack. Because of this, if the function definition is not known by the decompiler, it is hard to distinguish additional parameters from setting value of local variables. Since the PathAllocCombine function was called at the start of the function, the 5th and 6th may be just local variables. However, it is only a guess without the assembly code.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes it's a common thing for IDA to fail to detect the arguments number if they are passed through the registers. It often happens for fastcall convention, because it's hard to track registers and determine if it was a temporary value or an argument. So it's up to you to help IDA and specify the correct function definition. Or if you're skilled enough, you may try to implement a plugin for IDA which will extend autoanalysis feature.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Anton Kukoba",
            "time": "Apr 3, 2018 at 8:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Thanks @anton-kukoba for the tip. I've resolved my issue and here is my procedure.\n </p>\n <p>\n  Right click on the\n  <code>\n   PathAllocComnbine()\n  </code>\n  function in pseudocode mode and choose \"Set Item Type\". Then add the function as follows (remove all the SAL and variable names):\n </p>\n <pre><code>HRESULT PathAllocCombine(PCWSTR, PCWSTR, unsigned long, PWSTR*);\n</code></pre>\n <p>\n  Now the pseudocode becomes as follows which contains four parameters:\n </p>\n <pre><code>_QWORD *__fastcall sub_180040994(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  _QWORD *v3; // rbx\n  HRESULT v4; // eax\n  void *retaddr; // [rsp+38h] [rbp+0h]\n\n  v3 = a1;\n  *a1 = 0i64;\n  v4 = PathAllocCombine((PCWSTR)a2, (PCWSTR)a3, 1u, (PWSTR *)a1);\n  if ( v4 < 0 )\n  {\n    sub_18000A7A4(retaddr, 106i64, \"unknown.cpp\", (unsigned int)v4);\n    JUMPOUT(*(_QWORD *)&byte_1800409F9);\n  }\n  return v3;\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Biswapriyo",
            "time": "Apr 3, 2018 at 9:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}