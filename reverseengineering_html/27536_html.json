{
    "title": "IDApython - Turning a modified operand into a string reference",
    "link": "https://reverseengineering.stackexchange.com/questions/27536/idapython-turning-a-modified-operand-into-a-string-reference",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on an IDAPython script that is supposed to fix the disassembly of a firmware, by resolving it's symbol table.\n </p>\n <p>\n  The core of the script is working fine, but I have some issue when it comes to editing the way IDA is displaying stuff in the disassembly panel.\n </p>\n <p>\n  The idea is the following:\n </p>\n <p>\n  I have an original instruction like:\n </p>\n <pre><code>LDR          R1,=0xAAAAAAAA\n</code></pre>\n <p>\n  After the execution of my script, the offset 0xAAAAAAAA is resolved into it's current value, let's say 0xBBBBBBBB, and it adds a comment next to the original instruction:\n </p>\n <pre><code>LDR          R1,=0xAAAAAAAA ; symbol_address=0xBBBBBBBB, symbol_value='DummyString'\n</code></pre>\n <p>\n  But since I'm only adding a comment, I'm loosing the xRefs to and from the strings.\n </p>\n <p>\n  What i want to achieve is to edit the instruction itself, so IDA can create the xRefs to the Strings. Something like:\n </p>\n <pre><code>LDR          R1,=aDummyString \n</code></pre>\n <p>\n  I used this snippet to edit the operand address, which is working:\n </p>\n <pre><code>create_strlit(resolved_addr, 0, STRTYPE_C) # Defined the resolved string's addr as a proper string\nnew_inst = original_ins.replace(hex(original_addr), hex(resolved_addr))  # Simplified for clarity\nset_manual_insn(addr, new_inst)            # Edit the instruction with the new resolved addr\n</code></pre>\n <p>\n  But my disassembly view does not make the link between the address and the string itself.\n </p>\n <pre><code>LDR          R1,=0xBBBBBBBB\n</code></pre>\n <p>\n  When i hover my cursor on 0xBBBBBBBB, i can see the correct string; When I click on this address, IDA takes me to the string's location. But it has not created any proper xRefs, and the display does not inform me that this is a string location.\n </p>\n <p>\n  I tried theses functions to turn the operand into a string reference, but without success:\n </p>\n <pre><code>op_plain_offset(addr, 1, 0)\nop_offset(addr, 1, REF_OFF32)    # I also tried REF_OFF8 and REF_OFF16, just in case\n</code></pre>\n <p>\n  But it does not update the disassembly view as I want.\n </p>\n <p>\n  And when i try to do it by hand by doing \"right click\" -> \"Enter the current operand manually\", it works fine :/\n </p>\n <p>\n  Any suggestion how to do that ?\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "288",
    "tags": [
        "idapython",
        "arm",
        "automation"
    ],
    "user": "Guillaume",
    "time": "Apr 23, 2021 at 12:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, I managed to do it with the add_dref() function:\n </p>\n <pre><code>add_dref(frm, to, type)\n \nCreate a data cross-reference.\n\nParameters:\n\n    to - linear address of referenced data (C++: ea_t)\n    type - cross-reference type (C++: dref_t)\n\nReturns: bool\n    success (may fail if user-defined xref exists from->to) \n</code></pre>\n <p>\n  So I can just call this for every resolved symbols:\n </p>\n <pre><code>add_dref(instruction_addr, resolved_symbol_address, 1)\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Guillaume",
            "time": "May 3, 2021 at 9:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}