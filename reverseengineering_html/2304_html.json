{
    "title": "NOP instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/2304/nop-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have recently learned that\n  <code>\n   nop\n  </code>\n  instruction is actually\n  <code>\n   xchg eax, eax\n  </code>\n  ... what it does is basically exchanges\n  <code>\n   eax\n  </code>\n  with itself.\n </p>\n <p>\n  As far as CPU goes, does the exchange actually happen?\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 2,
    "views": "5k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Cream Cracker",
    "time": "Jun 20, 2013 at 21:29",
    "comments": [
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://www.pagetable.com/?p=6\" rel=\"nofollow noreferrer\">\n  At one time it did, and it was no longer a NOP\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Cream Cracker",
            "text": "<html><body><span class=\"comment-copy\">\n @DCoder What do you mean?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n Read the page I linked to. There was a bug in some AMD's x64 processors where\n <code>\n  xchg EAX, EAX\n </code>\n was actually executed...\n <a href=\"http://stackoverflow.com/questions/11177137/why-do-most-x64-instructions-zero-the-upper-part-of-a-32-bit-register\">\n  Most 32 bit instructions in x64 mode zero out the upper 332 bits of their operands\n </a>\n , and this instruction did too.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Cream Cracker",
            "text": "<html><body><span class=\"comment-copy\">\n @DCoder What about 32bit. Is it still relevant?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n it doesn't have any effect on 32-bit.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several instructions, which could be used depending on the compiler.\n  <code>\n   xchg eax, eax\n  </code>\n  is byte code 90. It is a legit instruction, which takes up a single processing cycle. In addition, there are several other instructions, which could be used in place of\n  <code>\n   xchg eax, eax\n  </code>\n  :\n </p>\n <pre><code>lea eax, [eax + 0x00]    byte code 8D 40 00\nmov eax, eax             byte code 89 C0\n</code></pre>\n <p>\n  Since all of those instructions are different length, compiler chooses one of the most appropriate versions depending on alignment requirements.\n </p>\n <p>\n  Regarding compilers' choices, a few pointers:\n </p>\n <ul>\n  <li>\n   <p>\n    GAS (GNU Assembler, used by GCC) x86 NOP operations can be found in function\n    <a href=\"https://github.com/bminor/binutils-gdb/blob/master/gas/config/tc-i386.c\" rel=\"nofollow noreferrer\">\n     i386_align_code()\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    similarly, for LLVM it is in\n    <a href=\"http://llvm.org/doxygen/X86AsmBackend_8cpp_source.html\" rel=\"nofollow noreferrer\">\n     X86AsmBackend::writeNopData()\n    </a>\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "8",
            "user": "j04n",
            "time": "Feb 9, 2018 at 20:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">but they are probably less \"NOP-like\" than the xchg is.  Besides which, the documented multi-byte NOP is the \"0f 1f /0\" set.</span>",
                    "time": null
                },
                {
                    "user": "ahmd0",
                    "text": "<span class=\"comment-copy\">The only other <code>nop</code> instruction is <code>0F 1F /0</code> which is <code>NOP r/m16</code> and <code>NOP r/m32</code> on supported CPUs. It may take anywhere from 3 to 9 bytes in x86-64, as per <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf\" rel=\"nofollow noreferrer\">Intel doc</a> (page 4-163). So even though you can use <code>mov eax, eax</code> and others an an alternative, it has a downside vs. real <code>nop</code> in that it blocks CPU pipeline and lacks other hardware optimizations that are implemented in the <code>nop</code> instruction.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The short answer is \"Yes.\"  In fact, if you experiment by generating machine language op codes directly you will discover that there is a whole range of operations that are effectively NOPs, all of which take a single processor cycle to execute.\n </p>\n <p>\n  While they are not technically \"Documented,\" you will find that very close to the 0x90,\n </p>\n <ul>\n  <li>\n   <code>\n    XCHG EAX, EAX\n   </code>\n  </li>\n  <li>\n   <code>\n    XCHG EBX, EBX\n   </code>\n  </li>\n  <li>\n   <code>\n    XCHG ECX, ECX\n   </code>\n  </li>\n  <li>\n   <code>\n    XCHG EDX, EDX\n   </code>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Evan Carroll",
            "time": "Feb 6, 2018 at 6:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">I don't think this is is true. I think the non-EAX take more cycles (3 and not 1) and I think all the XCHG versions actually 0 the higher order 32 bits on a x86_64. <a href=\"https://stackoverflow.com/a/25053039/124486\">stackoverflow.com/a/25053039/124486</a></span>",
                    "time": null
                }
            ]
        }
    ]
}