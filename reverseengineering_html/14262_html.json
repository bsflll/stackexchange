{
    "title": "Problems calculating checksum for AirConditioner",
    "link": "https://reverseengineering.stackexchange.com/questions/14262/problems-calculating-checksum-for-airconditioner",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer an AC Indoor unit <-> thermostat communication. So far I've succeeded in parsing the bits and bytes.\n </p>\n <p>\n  I discovered that the upper and lower nibbles need to be reversed to get consecutive values for temperature values, for example, so I assume that part is correct.\n </p>\n <p>\n  Also, the unit sends the payload twice, so I assume the values are correct.\n </p>\n <p>\n  Finally, I am trying to calculate the checksum of the received values, but I cannot find a pattern that results in a matching checksum.\n </p>\n <p>\n  I did notice that value change of\n  <code>\n   0x01\n  </code>\n  raises the checksum by\n  <code>\n   0x10\n  </code>\n  , so I tried reversing each value and sum them up, but that did not provide the expected result. On the other hand, changing\n  <code>\n   0x10\n  </code>\n  to\n  <code>\n   0x30\n  </code>\n  does not affect the checksum at all.\n </p>\n <p>\n  Here some of the received bytes (received twice like this):\n </p>\n <pre><code>vent hex: 09 da d1 04 01 00 44 13 a4 09 00 40 10 04 01 1d \n\ncool hex: 09 d8 d1 04 01 00 40 17 a4 09 00 40 10 04 01 6a \n\nai   hex: 09 de d1 04 01 01 40 17 a4 09 00 40 10 04 01 7c \n\ndehumhex: 09 dc d1 04 01 00 40 15 24 09 00 40 10 04 01 5a \n\nheat hex: 09 d9 d1 04 01 01 40 17 a4 f1 00 40 10 04 01 4c \n\nhex: 2a d7 10 04 01 00 40 10 04 01 00 48 14 7c 09 78 1=0001\n\nhex: 2a d7 30 04 01 00 40 10 04 01 00 48 14 7c 09 78 3=0011\n\nhex: 2a d7 50 04 01 00 40 10 04 01 00 48 14 7c 09 79 5=0101\n\nhex: 2a d7 70 04 01 00 40 10 04 01 00 48 14 7c 09 79 7=0111\n\nhex: 2a d7 90 04 01 00 40 10 04 01 00 48 14 7c 09 7a 9=1001\n\nhex: 2a d7 b0 04 01 00 40 10 04 01 00 48 14 7c 09 7a B=1011\n\nhex: 2a d7 d0 04 01 00 40 10 04 01 00 48 14 7c 09 7b D=1101\n\nhex: 2a d7 f0 04 01 00 40 10 04 01 00 48 14 7c 09 7b F=1111\n\nhex: 2a d6 10 04 01 00 40 10 04 01 00 48 14 7c 09 7c\n\nhex: 2a d6 30 04 01 00 40 10 04 01 00 48 14 7c 09 7c\n\nhex: 2a d6 70 04 01 00 40 10 04 01 00 48 14 7c 09 7d\n\nhex: 2a d6 50 04 01 00 40 10 04 01 00 48 14 7c 09 7d\n\nhex: 2a d6 b0 04 01 00 40 10 04 01 00 48 14 7c 09 7e\n\nhex: 2a d6 d0 04 01 00 40 10 04 01 00 48 14 7c 09 7f\n\nhex: 2a d6 f0 04 01 00 40 10 04 01 00 48 14 7c 09 7f\n</code></pre>\n <p>\n  Here is some parsed output of a temperature decrease with the reversed payload(rhex):\n </p>\n <pre><code>source: 09  head 110 mode 38 modeb 11001 fan 0 bfan: 000 unkownb: 1000\n\nswing: 4 bswing 00000100\n\nplasma 1 tempStart: 0001 temp: 90 tempStop: 010 airclean 1\n\nunkown: 01 01 44  splayload: e9  rest: 00 40 10 04 01  chksum: 2a\n\nhex: 09 d9 11 04 01 01 44 15 a5 e9 00 40 10 04 01 2a\n\nrhex 90 9b 88 20 80 80 22 a8 a5 97 00 02 08 20 80 54\n\nsource: 09  head 110 mode 38 modeb 11001 fan 0 bfan: 000 unkownb: 1000\n\nswing: 4 bswing 00000100\n\nplasma 1 tempStart: 0001 temp: 88 tempStop: 010 airclean 1\n\nunkown: 01 01 44  splayload: e9  rest: 00 40 10 04 01  chksum: 6a\n\nhex: 09 d9 11 04 01 01 44 11 a5 e9 00 40 10 04 01 6a\n\nrhex 90 9b 88 20 80 80 22 88 a5 97 00 02 08 20 80 56\n</code></pre>\n <p>\n  Maybe somebody can give me a hint in the right direction.\n </p>\n <p>\n  The test setup is running in Python on a Raspberry Pi.\n </p>\n</div>\n</body></html>",
    "votes": "13",
    "answers": 0,
    "views": "573",
    "tags": [
        "firmware",
        "binary-diagnosis"
    ],
    "user": "stinger151",
    "time": "Jun 7, 2019 at 6:04",
    "comments": [
        {
            "user": "dyasta",
            "text": "<html><body><span class=\"comment-copy\">\n Quote:\n <i>\n  I discovered that the upper and lower nibbles need to be reversed to get consecutive values for temperature values, for example, so I assume that part is correct.\n </i>\n Sounds a lot like a difference in Endianess, but maybe not.. You are going to have to keep like you are doing, guessing at the algorithm. Your quick edits suggest strongly that it is very simplistic, so given time, I'm sure you will get it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Avery3R",
            "text": "<html><body><span class=\"comment-copy\">\n Try running\n <a href=\"http://reveng.sourceforge.net/\" rel=\"nofollow noreferrer\">\n  reveng.sourceforge.net\n </a>\n against it playing around with the parameters  If it is a normal crc (initial value of 0) then you can also check the identity\n <code>\n  CRC(A)^CRC(B)=CRC(A^B)\n </code>\n and if it's true you can use it to validate and generate checksums\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}