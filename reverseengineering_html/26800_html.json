{
    "title": "Cannot disassemble exported functions",
    "link": "https://reverseengineering.stackexchange.com/questions/26800/cannot-disassemble-exported-functions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to disassemble a function from Kernel32.dll to see what it does, but every single function I try looks like this in the decompiler:\n </p>\n <pre><code>Function:\njmp ds:Function_0\n</code></pre>\n <p>\n  Where is the function? Function_0 seems to be some random dword value.\n </p>\n <p>\n  This happens with both the 32 and 64 bit versions of kernel32.dll i got from systemwow64 and system32 respectively.\n </p>\n <p>\n  How can i diassemble a function exported by kernel32?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "331",
    "tags": [
        "ida",
        "disassembly",
        "dll",
        "functions",
        "libraries"
    ],
    "user": "Carol Victor",
    "time": "Jan 17, 2021 at 13:11",
    "comments": [
        {
            "user": "auspicious99",
            "text": "<html><body><span class=\"comment-copy\">\n Can you provide more details? Like what decompiler you're using?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is not true for all functions in kernel32.dll, but for specific functions that are imported from other dlls. You have to find out where the function is imported from and then look at the disassembly of the required dll.\n </p>\n <p>\n  Your disassembler might show you where the functions are imported from, kernel32.dll imports a lot of functions from the api-ms-*.dlls in the system32 folder. The PE file contains an import table that lists all the imported functions (see\n  <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#the-idata-section\" rel=\"nofollow noreferrer\">\n   documentation\n  </a>\n  )\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "tly",
            "time": "Jan 17, 2021 at 16:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Most fundamental functions can be seen on the\n  <a href=\"https://doxygen.reactos.org/dd/d83/dll_2win32_2kernel32_2client_2file_2create_8c.html\" rel=\"nofollow noreferrer\">\n   ReactOS\n  </a>\n  source code written in C. Most of the fundamental API has not changed since XP, so you can use that for a better picture. BTW, you will need to copy the .dll out of system32 and then open the copy in IDA because it's directed to syswow64, so it will still be 32 bit. You will also need to import .pdb symbols -- a popup will appear asking if you want to download kernel32.pdb from the msft symbol server when you open kernel32.dll in IDA. If that doesn't work, use version 7.5 (cracks exist)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Lewis Kelsey",
            "time": "Feb 28, 2021 at 6:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Carol Victor",
                    "text": "<span class=\"comment-copy\">Unfortunately I have not been able to fix this issue in either the 32 or 64 bit versions of the DLL (Using IDA Pro 7.0), it keeps showing me a Jmp to FunctionName_0. I have relied on ReactOS but it would be helpful to fix this issue in IDA since not all functions are implemented in ReactOS and I'd also like to verify multiple versions of the DLLs (for different Windows vers). Ill try to find another IDA version unless you have any other ideas meanwhile</span>",
                    "time": null
                },
                {
                    "user": "Lewis Kelsey",
                    "text": "<span class=\"comment-copy\">@CarolVictor Use version 7.5, the crack is in the edit history of this answer. It's the crack I use and 6.8 doesn't import symbols for me properly. I removed it because I don't know whether it's within the site rules</span>",
                    "time": null
                },
                {
                    "user": "Lewis Kelsey",
                    "text": "<span class=\"comment-copy\">@CarolVictor alternatively, debug a 64 bit application that imports kernel32.dll using this <a href=\"https://reverseengineering.stackexchange.com/questions/11438/ida-cannot-launch-debugger-for-64-bit-exe-files/15689#15689\" title=\"ida cannot launch debugger for 64 bit exe files\">reverseengineering.stackexchange.com/questions/11438/â€¦</a> and the on the modules tab right click the module kernel32 and import symbols</span>",
                    "time": null
                }
            ]
        }
    ]
}