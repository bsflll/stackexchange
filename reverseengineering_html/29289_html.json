{
    "title": "convert C++ code to python code",
    "link": "https://reverseengineering.stackexchange.com/questions/29289/convert-c-code-to-python-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  while I'm doing RE using ghidra i saw this code\n </p>\n <pre><code>  byte bVar1;\n  byte bVar2;\n  uint uVar3;\n  \n  uVar3 = 0;\n  while (bVar2 = (byte)uVar3, (char)bVar2 < '\\b') {\n    bVar1 = *(byte *)(uVar3 + param_1) ^ *(byte *)(uVar3 + param_2);\n    *(byte *)(uVar3 + param_1) = (bVar1 << (bVar2 & 7) | bVar1 >> 8 - (bVar2 & 7)) - bVar2;\n    uVar3 = (uint)(byte)(bVar2 + 1);\n  }\n  return;\n</code></pre>\n <p>\n  i know the code rotate shift but i don't think it's the same i know it's kinda diffrent here not a simple bit movement\n </p>\n <p>\n  so write a python code will make the bit-roll here make sense\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "c++",
        "ghidra"
    ],
    "user": "K. John Michel",
    "time": "Sep 14, 2021 at 9:45",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n FlareOn 2021 - UnlockYourFiles :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This code can be cleaned up to be a bit more readable\n </p>\n <pre><code>void __cdecl decrypt(char *dst,char *src)\n{\n  byte j;\n  uint i;\n\n  i = 0;\n  while (j = (byte)i, (char)j < 8) {\n    dst[i] = ((dst[i] ^ src[i]) << (j & 7) | (byte)(dst[i] ^ src[i]) >> 8 - (j & 7)) - j;\n    i = (uint)(byte)(j + 1);\n  }\n  return;\n}\n</code></pre>\n <p>\n  But the shifting and\n  <code>\n   or\n  </code>\n  -ing still might be confusing. In this case, it's easer to look at disassembly than the decomplication and if you would do that the operations that constitutes for loop body are\n  <code>\n   xor\n  </code>\n  ,\n  <code>\n   rol\n  </code>\n  and\n  <code>\n   sub\n  </code>\n  . So the shifting and\n  <code>\n   or\n  </code>\n  is pseudo-code for assembly\n  <code>\n   rol\n  </code>\n  opcode.\n </p>\n <p>\n  And it can be implemented by a simple lambda\n </p>\n <pre><code>rol = lambda val, r_bits, max_bits: \\\n    (val << r_bits%max_bits) & (2**max_bits-1) | \\\n    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Sep 15, 2021 at 14:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}