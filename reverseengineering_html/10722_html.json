{
    "title": "What is _S_empty_rep_storage used for in this code?",
    "link": "https://reverseengineering.stackexchange.com/questions/10722/what-is-s-empty-rep-storage-used-for-in-this-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While reversing a C++ program compiled with g++, I've seen a _ZNSs4_Rep20_S_empty_rep_storageE being used. Running it through c++filt shows that before mangling it's a:\n </p>\n <pre><code>std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_empty_rep_storage\n</code></pre>\n <p>\n  But what is this _S_empty_rep_storage used for? I included an assembly snippet below where it's used:\n </p>\n <pre><code>mov     rax, cs:_ZNSs4_Rep20_S_empty_rep_storageE_ptr\n...\nadd     rax, 18h\n...\nmov     [rsp+328h+var_308], rax\nmov     [rsp+328h+var_2F8], rax\nmov     [rsp+328h+var_2E8], rax\n...\nlea     r14, [rsp+328h+var_308]\nlea     rsi, [rsp+328h+var_2D8] ; std::string *\nmov     rdi, r14        ; this\ncall    __ZNSs4swapERSs ; std::string::swap(std::string &)\nlea     rdi, [rsp+328h+var_2D8] ; this\nlea     r13, [rsp+328h+var_2F8]\nlea     r12, [rsp+328h+var_2E8]\ncall    __ZNSsD1Ev      ; std::string::~string()\n</code></pre>\n <p>\n  So my question is: What's the purpose of _S_empty_rep_storage here? Also why are var_308, var_2f8 and var_2e8 lea'd into r12-14? These registers are not used later on.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly"
    ],
    "user": "TorbenB",
    "time": "Aug 26, 2015 at 17:23",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n It looks like your question is answered here:\n <a href=\"http://stackoverflow.com/questions/4273040/why-is-stdstrings-empty-rep-the-way-it-is\" title=\"why is stdstrings empty rep the way it is\">\n  stackoverflow.com/questions/4273040/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "TorbenB",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner I already read that question, but if it answers my question then I cannot see it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Check the comments at the beginning of libstdc++'s\n  <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.8.1/libstdc++/api/a01053_source.html\" rel=\"nofollow\">\n   <code>\n    basic_string.h\n   </code>\n  </a>\n  to see how GCC's\n  <code>\n   std::string\n  </code>\n  works.Basically,\n  <code>\n   _S_empty_rep_storage\n  </code>\n  is a pre-initialized (in fact, zeroed out) representation of an empty string, used to initialize the string in a default constructor. So\n  <code>\n   var_308\n  </code>\n  ,\n  <code>\n   var_2F8\n  </code>\n  and\n  <code>\n   var_2E8\n  </code>\n  are three std::string objects, initialized to an empty string.\n </p>\n <p>\n  As for r12-r14, they seem to be used as temporary variables. We can at leas see that\n  <code>\n   r14\n  </code>\n  is used to initialize\n  <code>\n   rdi\n  </code>\n  - the\n  <code>\n   this\n  </code>\n  pointer for the\n  <code>\n   std::string::swap()\n  </code>\n  call, so presumably\n  <code>\n   r12\n  </code>\n  and\n  <code>\n   r13\n  </code>\n  are also used later.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 26, 2015 at 20:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}