{
    "title": "C++ hide string parameter for string viewer",
    "link": "https://reverseengineering.stackexchange.com/questions/26734/c-hide-string-parameter-for-string-viewer",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>bool isLaunched = CreateProcessW(\n    L\"C:\\\\Windows\\\\System32\\\\Notepad.exe\",      //  Should be shown in any string viewer or decompiler.\n    0x0,\n    0x0,\n    0x0,\n    TRUE,\n    0,\n    0x0,\n    0x0,\n    &info,\n    &processInfo\n);\n</code></pre>\n <p>\n  The application is shown in plaintext in IDA, how would I make this not as simple / easy to see to where a noob can't just load into IDA and see it.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "842",
    "tags": [
        "c++",
        "strings",
        "software-security"
    ],
    "user": "William",
    "time": "Jan 9, 2021 at 21:03",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Perhaps\n <a href=\"https://www.geekembly.com/2020/07/03/how-to-obfuscate-strings-using-c-constexpr-or-how-to-do-it-correctly-at-compile-time/\" rel=\"nofollow noreferrer\">\n  this helps\n </a>\n ? The \"noob\" wouldn't need to start IDA to do that. The\n <code>\n  strings\n </code>\n utility (either on Linux or the one from Sysinternals) will be more than sufficient. Btw, I seem to be a noob as per your definition, too because I start with the \"low hanging fruit\" first and then turn it up as I go along ...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can write a simple string encoder that rotates around some characters, something like the\n  <a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\" rel=\"nofollow noreferrer\">\n   Caesar cipher\n  </a>\n  .\n </p>\n <p>\n  Just bear in mind that this \"encryption\" can of course be identified in the disassembly. Since disassemblers search for ASCII characters and nullterminated strings, it could be more difficult to identify the encrypted strings if your encryption generates invalid/unprintable characters or creates an array that is not nullterminated.\n </p>\n <p>\n  You will need to encrypt the string before compilation and decrypt at runtime.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "tly",
            "time": "Jan 10, 2021 at 13:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  One way to kind of easily \"obfuscate\" strings is to store them on the stack.\n </p>\n <p>\n  Example: instead of declaring strings like\n  <code>\n   char string[9] = \"MyString\"\n  </code>\n  you can store them on the stack by declaring them like\n  <code>\n   char string[9] = {0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x0}\n  </code>\n  . This way the string will be stored in the\n  <code>\n   .text\n  </code>\n  section insted of the\n  <code>\n   .data\n  </code>\n  section. Which will hide it from the strings view of a smart disassembler or the string dumping tools.\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "rustam Shirinov",
            "time": "Jan 11, 2021 at 9:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Except this will help not at all against someone using the <code>strings</code> utility. Aside from that if the string isn't meant to be writable, it's a rather bad idea to make it writable this way. Aside from that any reverse engineer who is beyond noob level will try to find interesting functions and take it from there. You'd have to store the string bits in some out-of-order array of unsigned ints or so, to hide something. And even that's a rather weak protection. There's a reason security through obscurity is seen as no security at all ...</span>",
                    "time": null
                }
            ]
        }
    ]
}