{
    "title": "Tracing all functions in executable conditionally, to find function of interest",
    "link": "https://reverseengineering.stackexchange.com/questions/32853/tracing-all-functions-in-executable-conditionally-to-find-function-of-interest",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to alter the behavior of some executable (in my case, a videogame). One way of doing this is to hook function calls (e.g., a function like\n  <code>\n   Player::ReceiveDamage\n  </code>\n  ) and adjust parameters/return values.\n </p>\n <p>\n  I know how to inject code and how to hook functions.\n  <strong>\n   The challenge currently is to\n   <em>\n    find\n   </em>\n   the address of the function of interest\n  </strong>\n  . The source code of the target is not available, neither are debug symbols.\n </p>\n <p>\n  An approach I successfully used before is the following:\n </p>\n <ol>\n  <li>\n   Find all function addresses in the target executable (e.g., with IDA, radare2, Pyew, ...)\n  </li>\n  <li>\n   With the executable running, hook all functions\n  </li>\n  <li>\n   Black-list (and un-hook) functions that are called during moments that are not of interest\n  </li>\n  <li>\n   White-list functions that are called during moments of interest\n  </li>\n  <li>\n   Repeat steps (4,5) until function list is narrowed down sufficiently\n  </li>\n </ol>\n <p>\n  Unfortunately, I have misplaced the code I was using for this process. I can re-write it, but I noticed that there is already an\n  <a href=\"https://www.capstone-engine.org/showcase.html\" rel=\"nofollow noreferrer\">\n   enormous offering of tools and libraries\n  </a>\n  that may do exactly what I need.\n </p>\n <p>\n  Performance is a challenge: logging all function calls in a videogame introduces significant overhead. I noticed previously that it would take some time for my old tool to black-list enough irrelevant functions for the target to become responsive. This likely makes\n  <a href=\"https://frida.re/\" rel=\"nofollow noreferrer\">\n   Frida\n  </a>\n  not a good choice, as it injects javascript.\n </p>\n <p>\n  <strong>\n   Does anyone know of a\n   <em>\n    performant\n   </em>\n   tool/library, supporting Windows and x64, that I can use to find functions of interest in a target executable?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "111",
    "tags": [
        "pe",
        "tools",
        "dynamic-analysis",
        "functions",
        "tracing"
    ],
    "user": "tcpie",
    "time": "Mar 30, 2024 at 19:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use a binary dynamic instrumentation framework, such as:\n </p>\n <ul>\n  <li>\n   <a href=\"https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html\" rel=\"nofollow noreferrer\">\n    Intel Pin\n   </a>\n   (and specifically the\n   <a href=\"https://github.com/SideChannelMarvels/Tracer/tree/master/TracerPIN\" rel=\"nofollow noreferrer\">\n    TracerPIN tool\n   </a>\n   )\n  </li>\n  <li>\n   <a href=\"https://frida.re/\" rel=\"nofollow noreferrer\">\n    Frida\n   </a>\n  </li>\n  <li>\n   <a href=\"https://dynamorio.org/\" rel=\"nofollow noreferrer\">\n    DynamoRIO\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/dyninst/dyninst\" rel=\"nofollow noreferrer\">\n    Dyninst\n   </a>\n  </li>\n  <li>\n   <a href=\"https://valgrind.org/\" rel=\"nofollow noreferrer\">\n    Valgrind\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "tcpie",
            "time": "May 6, 2024 at 4:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "tcpie",
                    "text": "<span class=\"comment-copy\">Aha, the term I was looking for is \"dynamic binary instrumentation\"! Thank you very much. I've googled around a bit and indeed there appear to be some useful frameworks out there. I will update your answer to list a few of these.  For my use case probably these frameworks are overkill. I'll probably be quicker whipping up something myself compared to writing a plugin for one of those tools...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What I would do is the following steps:\n </p>\n <ol>\n  <li>\n   use IDA Pro to get all functions names and addresses (hopefully names if you renamed any of them) in the binary and export it as a python dictionary. examples can be found\n   <a href=\"https://stackoverflow.com/questions/8860020/is-there-a-way-to-export-function-names-from-ida-pro\">\n    here\n   </a>\n   .\n  </li>\n  <li>\n   Install PyKd as described\n   <a href=\"https://rayanfam.com/topics/pykd-tutorial-part1/\" rel=\"nofollow noreferrer\">\n    here\n   </a>\n   and\n   <a href=\"https://hshrzd.wordpress.com/2022/01/06/python-scripting-for-windbg-a-quick-introduction-to-pykd/\" rel=\"nofollow noreferrer\">\n    here\n   </a>\n   .\n  </li>\n  <li>\n   Create a PyKd script to set conditional breakpoints to print something everytime they are hit and then continue execution, like:\n  </li>\n </ol>\n <pre class=\"lang-py prettyprint-override\"><code>import pykd\nfuncList = { 'funcA': 0xAAAAAAAA,\n             'funcB': 0xBBBBBBBB, \n               ...\n           }\n\nfor funcName, funcAddr in funcList.items():\n   pykd.DbgCommand('bp ' + funcAddr + ' \".echo ' + funcName + ' executed; gc\"')\n</code></pre>\n <ol start=\"4\">\n  <li>\n   Execute in WinDbg:\n  </li>\n </ol>\n <pre><code>.load pykd\n!py <path to script>\ng\n</code></pre>\n <p>\n  this will trace each function during the execution with the function names from your IDA Pro database.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "rotem.salinas",
            "time": "May 6, 2024 at 20:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">With this method, for a large number of functions.. you may encounter a limit on the number of conditional breakpoints you're allowed to use. You can actually bypass this by patching both the <code>dbgeng.dll!AddBreakpoint</code> and <code>dbgeng.dll!InsertBreakpoints</code> functions. For v10.0.14321.1024, I've ended up using: <code>eb dbgeng+0005c055 ff; eb dbgeng+0005c7da ff</code></span>",
                    "time": null
                },
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">However, for large numbers of breakpoints you'll encounter performance issues...where it actually feels worse than logarithmic time (unsure if this is still a thing in WinDbg preview). If you're using PyKd, you can trap on the STATUS_BREAKPOINT event and look up the address of the condition you want to execute with something better algorithmically.</span>",
                    "time": null
                }
            ]
        }
    ]
}