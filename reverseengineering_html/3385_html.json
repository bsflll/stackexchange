{
    "title": "_DEVOBJ_EXTENSION structure information",
    "link": "https://reverseengineering.stackexchange.com/questions/3385/devobj-extension-structure-information",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm looking for information on the\n  <a href=\"http://msdn.moonsols.com/winxpsp3_x86/DEVICE_OBJECT.html\" rel=\"nofollow\">\n   _DEVICE_OBJECT\n  </a>\n  ->\n  <a href=\"http://msdn.moonsols.com/winxpsp3_x86/DEVOBJ_EXTENSION.html\" rel=\"nofollow\">\n   _DEVOBJ_EXTENSION\n  </a>\n  structure.\n </p>\n <p>\n  I'd like to know a bit more about this structure in genernal, like what it's actually used for. But specifically, I'd like to know about the\n  <code>\n   _DEVICE_OBJECT* AttachedTo\n  </code>\n  member and the difference between that and the\n  <code>\n   _DEVICE_OBJECT* AttachedDevice\n  </code>\n  member in the\n  <code>\n   _DEVICE_OBJECT\n  </code>\n  structure.\n </p>\n <p>\n  Google is proving fruitless, and I can't find any reference to it in the Windows Internals book. Any resources or information would be greatly appreciated.\n </p>\n <p>\n  EDIT:\n  \n\n  Ok... After a bit of staring at WinDbg I found that the\n  <code>\n   AttachedTo\n  </code>\n  field seems to point to the device object at the top of the device tree. Can anyone confirm this?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "1k",
    "tags": [
        "windows",
        "kernel-mode"
    ],
    "user": "ben_re",
    "time": "Jan 7, 2014 at 11:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to this diagram from\n  <a href=\"http://www.mouseos.com/windows/kernel/DeviceStack.html\" rel=\"nofollow noreferrer\">\n   http://www.mouseos.com/windows/kernel/DeviceStack.html\n  </a>\n  ,\n  <code>\n   AttachedDevice\n  </code>\n  points to the next device and\n  <code>\n   DeviceExtension->AttachedTo\n  </code>\n  points to the previous device:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/L9xKy.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Jan 7, 2014 at 13:53",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  use\n  <code>\n   !devobj <address>\n  </code>\n  command\n  \n\n  it will tell you what AttachedDevice (upper ) and what AttachedTo device is (lower)\n </p>\n <pre><code>.foreach (place { .shell -ci \"!object \\\\Device;\" sed s/\"     \"..\"  \"//g | sed s/\" .*\"//g } ) { !grep -i -c \"!devobj place\" -e \"Attached\"}\n</code></pre>\n <p>\n  note:\n </p>\n <pre><code>!grep is from domdbg windbg extension sed is from gnuwin32 \n</code></pre>\n <p>\n  output\n </p>\n <pre><code>AttachedTo (Lower) 86fb1630 \\Driver\\PnpManager\nAttachedTo (Lower) 86d22420 \\Driver\\aswTdi\nAttachedDevice (Upper) 862f59d8 \\Driver\\wdmaud\nAttachedDevice (Upper) 86e11130 \\Driver\\ROOTMODEM\nAttachedDevice (Upper) 86de7528 \\Driver\\Kbdclass\nAttachedTo (Lower) 86fac190 \\Driver\\PnpManager\nAttachedDevice (Upper) 86e02560 \\Driver\\Rasl2tp\nAttachedDevice (Upper) 862e9c90 \\Driver\\sysaudio\nAttachedTo (Lower) 86f5ece8 \\Driver\\ACPI\nAttachedTo (Lower) 86e15020 \\Driver\\i8042prt\n</code></pre>\n <p>\n  or parse the structures yourself for all devices to find patterns\n </p>\n <pre><code> .foreach (place { .shell -ci \"!object \\\\Device;\" sed s/\"     \"..\"  \"//g | sed s/\" .*\"//g } ) {dt nt!_DEVICE_OBJECT -y Dri->Drivern* place ;dt nt!_DEVICE_OBJECT -yr DeviceOb->Att->Dri->Drivern* place ;dt nt!_DEVICE_OBJECT -yr Atta->Dri->Drivern* place ; .echo ==========}\n</code></pre>\n <p>\n  when a deviceobject has both AttachedDevice and AttachedTo device it should show you an output like this\n </p>\n <pre><code>   +0x008 DriverObject : \n      +0x01c DriverName   : _UNICODE_STRING \"\\Driver\\TermDD\"\n   +0x0b0 DeviceObjectExtension       : \n      +0x018 AttachedTo                  : \n         +0x008 DriverObject                : \n            +0x01c DriverName                  : _UNICODE_STRING \"\\Driver\\PnpManager\"\n   +0x010 AttachedDevice     : \n      +0x008 DriverObject       : \n         +0x01c DriverName         : _UNICODE_STRING \"\\Driver\\Kbdclass\"\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Jan 7, 2014 at 20:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The structure is fully documented by Microsoft on their MSDN site. I also created a blog post a while ago, regarding this data structure which can be found here -\n  <a href=\"http://bsodtutorials.blogspot.co.uk/2013/11/devobj-and-deviceobject.html\" rel=\"nofollow\">\n   http://bsodtutorials.blogspot.co.uk/2013/11/devobj-and-deviceobject.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xFFFF",
            "time": "Jan 8, 2014 at 13:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">Welcome to <a href=\"https://reverseengineering.stackexchange.com\">Reverse Engineering</a>! We prefer answers to have more than just a link so that even if the link were to go down the content would allow an individual to solve the problem at hand or at least search for the relevant solution.</span>",
                    "time": null
                }
            ]
        }
    ]
}