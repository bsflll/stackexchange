{
    "title": "How should I determine the format of this audio file?",
    "link": "https://reverseengineering.stackexchange.com/questions/324/how-should-i-determine-the-format-of-this-audio-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an audio file in an unknown format. How should I try to determine its format ?\n </p>\n <p>\n  Also, is it possible to do this by manual observation and not using any automated tool ?\n </p>\n</div>\n</body></html>",
    "votes": "13",
    "answers": 3,
    "views": "14k",
    "tags": [
        "file-format"
    ],
    "user": "asheeshr",
    "time": "Mar 27, 2013 at 14:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As for the automated approach, the\n  <a href=\"http://en.wikipedia.org/wiki/File_(command)\">\n   file command\n  </a>\n  is the classic recommendation. It's a tool which tries to guess the file type from the data contained in the file. It implements many of the well known file format signatures via\n  <a href=\"http://sourceforge.net/projects/libmagic/\">\n   libmagic\n  </a>\n  . If you have a composite file you could try\n  <a href=\"https://code.google.com/p/binwalk/\">\n   binwalk\n  </a>\n  which will try to find files as subsets of a larger file.\n </p>\n <p>\n  If you want to go the manual route, you need to match some subset of the file to a known signature or pattern. This applies especially when it comes to file formats which are likely to be compressed as data patterns will be less regular. Therefore you usually need to find a pattern, usually called a signature or fingerprint, in the file structure. Most file formats have magic numbers either in the header or the footer of the file in order to make it easy for programs to check what type of file they are about to load. There are a couple of good resources for well known file signatures:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.garykessler.net/library/file_sigs.html\">\n    Garry Kesslers' file signature list\n   </a>\n  </li>\n  <li>\n   <a href=\"http://en.wikipedia.org/wiki/List_of_file_signatures\">\n    Wikipedia's List of file signatures\n   </a>\n  </li>\n  <li>\n   <a href=\"http://filesignatures.net\">\n    The file signature database\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "12",
            "user": "Peter Andersson",
            "time": "Mar 27, 2013 at 16:42",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Peter's suggestions are, as usual, excellent. I'd like to add a few points.\n </p>\n <ul>\n  <li>\n   if you have access to some program using that format, you could always reverse engineer that in order to find out details about the format or even just the signatures it's looking for (assuming for example that it contains sound samples but is a proprietary and not well-known format)\n   <ul>\n    <li>\n     this might also give clues about the libraries used to access the format which in turn gives clues about the format (think IDA FLIRT/FLAIR)\n    </li>\n   </ul>\n  </li>\n  <li>\n   otherwise a media player such as\n   <a href=\"http://www.videolan.org\">\n    VLC\n   </a>\n   may also be a good method to find out details (\n   <kbd>\n    Ctrl\n   </kbd>\n   +\n   <kbd>\n    J\n   </kbd>\n   and\n   <kbd>\n    Ctrl\n   </kbd>\n   +\n   <kbd>\n    I\n   </kbd>\n   ). That is, you simply attempt to open it and then see what media information the player can give you. Good players won't force you to stick a particular file extension on the file before opening it. But be wary of potential exploits (i.e. do it in a sandbox environment)\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "0xC0000022L",
            "time": "Mar 27, 2013 at 17:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In addition to the fine suggestions in the other answers, here are some suggestions specific to audio:\n </p>\n <ul>\n  <li>\n   If you know how long the playtime of the audio is (roughly), calculate the approximate bitrate of the audio file. This will tell you whether it is compressed or not, and the compression ratio can tell you roughly what you might be dealing with. For example, 4kbps~32kbps is indicative of a speech codec, 64~256kbps is ordinary compressed audio (AAC/MP3/Ogg Vorbis), 512~3072kbps likely means a lossless codec, and substantially higher means uncompressed or weakly compressed (e.g. ADPCM, PCM) audio. In turn, this may clue you into what it contains (speech, music, sound effects, etc.).\n  </li>\n  <li>\n   If you suspect it might be weakly compressed, try opening the file up as a raw PCM stream in your favorite audio editor (e.g. Audacity) and listening to it. There will probably be an insane amount of noise if it's compressed in any way, but some formats (e.g. ADPCM) can still be audible in this circumstance if they are relatively constant bitrate. I've used this tactic in the past to work out the spoken contents of a (still unknown) audio sample I received. Indeed, this tactic can even reveal the contents of poorly encrypted, uncompressed files by exploiting human pattern recognition.\n  </li>\n  <li>\n   Check for metadata chunks in the file --\n   <code>\n    strings\n   </code>\n   , a quick examination of the first and last chunks of the file in a hex editor, or just searching for strings you might expect to see.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "nneonneo",
            "time": "Mar 31, 2013 at 8:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}