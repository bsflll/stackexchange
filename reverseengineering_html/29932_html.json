{
    "title": "Backtrace HTTP request over few modules when using FRIDA",
    "link": "https://reverseengineering.stackexchange.com/questions/29932/backtrace-http-request-over-few-modules-when-using-frida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am in the process of reverse engineering an IOS IPA using HOPPER and FRIDA. First, I started with POSTMAN, which records the app's HTTP requests. What I find interesting is that the app uses a so-called \"device check token\" in its login header. This is dynamically generated when a login is performed.\n </p>\n <p>\n  Second, I recorded the requests with FRIDA Trace and added this code to the automatically generated tweak file \"dataTaskWithRequest_completionHandler_.js\":\n </p>\n <pre><code>...      \nonEnter(log, args, state) {\n        log(\"URL: \" + ObjC.Object(args[2]).URL().absoluteString());\n        log('NSURLSession called from:\n' +\n            Thread.backtrace(this.context, Backtracer.ACCURATE)\n            .map(DebugSymbol.fromAddress).join('\n') + '\n');\n      },\n...\n</code></pre>\n <p>\n  My guess was to get the functions involved in generating this token. So the trace returns\n </p>\n <pre><code>/* TID 0x103 */\n  3260 ms  -[NSURLSession dataTaskWithRequest:0x28035c760 completionHandler:0x280e6c840]\n  3260 ms  URL: https://mobile-api.rewe.de/mobile/customer/login?includePickupStations=true\n  3260 ms  NSURLSession called from:\n0x104bc9e80 RxClient!0xfde80 (0xfde80)\n0x1010f7d24 RxSwift!0x2bd24 (0x2bd24)\n0x1011229a0 RxSwift!0x569a0 (0x569a0)\n0x10111b86c RxSwift!0x4f86c (0x4f86c)\n0x1011229a0 RxSwift!0x569a0 (0x569a0)\n0x1010de674 RxSwift!0x12674 (0x12674)\n0x1010deb5c RxSwift!0x12b5c (0x12b5c)\n0x101122e10 RxSwift!0x56e10 (0x56e10)\n0x1010f80fc RxSwift!0x2c0fc (0x2c0fc)\n0x101122a7c RxSwift!0x56a7c (0x56a7c)\n0x10113ed88 RxSwift!0x72d88 (0x72d88)\n0x10113ef48 RxSwift!0x72f48 (0x72f48)\n0x10113698c RxSwift!0x6a98c (0x6a98c)\n0x1011368fc RxSwift!0x6a8fc (0x6a8fc)\n0x1011357b0 RxSwift!0x697b0 (0x697b0)\n0x101135384 RxSwift!0x69384 (0x69384)\n</code></pre>\n <p>\n  Now I'm stuck at this point and I'm just running out of ideas on what to do next. I prefer a way to step through these functions (Debug). I think it started with \"0x101135384 RxSwift!0x69384 (0x69384)\" but I don't know how to do this.\n </p>\n <p>\n  Is there a better solution to get the token algorithm?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "833",
    "tags": [
        "ios",
        "frida",
        "api"
    ],
    "user": "lazur2006",
    "time": "Jan 26, 2022 at 9:28",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n I recommend you to also perform a static analysis on the app as it will help you to understand what functions to hook. Additionally you should consider checking the correspondent Android app as Android apps are usually easier to decompile and understand e.g. using Jadx (assuming that it also uses the device check token system).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}