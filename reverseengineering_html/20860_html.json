{
    "title": "Android application fuzzing",
    "link": "https://reverseengineering.stackexchange.com/questions/20860/android-application-fuzzing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How to do fuzzing in Android applications? Do we have any fuzzer specific to the android?\n </p>\n <p>\n  Actually, I am looking for an easy way to do fuzzing while performing penetration testing of android applications.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "5k",
    "tags": [
        "android",
        "fuzzing"
    ],
    "user": "Mukesh",
    "time": "Mar 13, 2019 at 23:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a fork of AFL fuzzer that is specialized in Android fuzzing. You can find it on GitHub. And, there are several fuzzing frameworks specialized for Android.\n </p>\n <h3>\n  References\n </h3>\n <ul>\n  <li>\n   <a href=\"https://github.com/ele7enxxh/android-afl\" rel=\"nofollow noreferrer\">\n    Andoid-afl\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://source.android.com/devices/tech/debug/libfuzzer\" rel=\"nofollow noreferrer\">\n    Fuzzing with libFuzzer\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/ajinabraham/Droid-Application-Fuzz-Framework\" rel=\"nofollow noreferrer\">\n    Droid: Android application fuzzing framework\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://gamozolabs.github.io/fuzzing/2018/10/18/terrible_android_fuzzer.html\" rel=\"nofollow noreferrer\">\n    Writing the worlds worst Android fuzzer, and then improving it\n   </a>\n   , by Gamozo 2018.\n  </li>\n  <li>\n   <a href=\"https://www.blackhat.com/docs/eu-15/materials/eu-15-Blanda-Fuzzing-Android-A-Recipe-For-Uncovering-Vulnerabilities-Inside-System-Components-In-Android-wp.pdf\" rel=\"nofollow noreferrer\">\n    Fuzzing Android: a recipe for uncovering vulnerabilities inside system components in Android\n   </a>\n   , by Alexandru Blanda (BlackHat'15).\n  </li>\n  <li>\n   <a href=\"http://www.iswatlab.eu/security-projects/doapp-denial-of-app-a-smart-android-fuzzer-for-the-future/\" rel=\"nofollow noreferrer\">\n    DoApp (Denial of App): A smart Android Fuzzer for the future\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://github.com/antojoseph/droid-ff\" rel=\"nofollow noreferrer\">\n    Droid-FF\n   </a>\n   .\n  </li>\n  <li>\n   <a href=\"https://firmwaresecurity.com/2017/11/09/afl-unicorn-fuzz-any-architecture-supported-by-unicorn/\" rel=\"nofollow noreferrer\">\n    AFL-unicorn1\n   </a>\n   and\n   <a href=\"http://cn-sec.com/archives/146342.html\" rel=\"nofollow noreferrer\">\n    AFL-unicorn2\n   </a>\n  </li>\n  <li>\n   <a href=\"https://alephsecurity.com/2021/11/16/fuzzing-qemu-android/\" rel=\"nofollow noreferrer\">\n    AFL++ with QEMU for native android fuzzing\n   </a>\n   :  This is a modification of the original\n   <a href=\"https://github.com/AFLplusplus/AFLplusplus\" rel=\"nofollow noreferrer\">\n    AFLplusplus\n   </a>\n   so as to able to fuzz binary-only Android applications using QEMU and running inside native Android environment.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Peter Teoh",
            "time": "Apr 30, 2022 at 14:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mukesh",
                    "text": "<span class=\"comment-copy\">Is there any other approach I can follow do fuzz the apps without using any tool? If the tools are only the options is there any other free tools with better documentation &amp; examples?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You can try the \"<a href=\"https://en.wikipedia.org/wiki/Monkey_testing\" rel=\"nofollow noreferrer\">Monkey testing</a>\" with real Monkeys... apart from that I do not understand quite well how you can perform efficient fuzzing without any tool!</span>",
                    "time": null
                }
            ]
        }
    ]
}