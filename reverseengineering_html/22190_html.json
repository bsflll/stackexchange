{
    "title": "Mimicking a file format that is actually a zip",
    "link": "https://reverseengineering.stackexchange.com/questions/22190/mimicking-a-file-format-that-is-actually-a-zip",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Backstory: I have been trying to find a way to automatically turn batches of photos into WhatsApp stickers. I was able to do that, but now I am trying to figure out a way to actually import them into WhatsApp. For that, I am trying to piggyback off an app which can import it's own sticker pack files, with extension\n  <em>\n   .wastickers\n  </em>\n  (\n  <a href=\"https://drive.google.com/open?id=1kYD7Ifq-4pLdw_bzm9vozPP2ix2Orc6s\" rel=\"nofollow noreferrer\">\n   example here\n  </a>\n  ).  The app can be found\n  <a href=\"https://play.google.com/store/apps/details?id=com.marsvard.stickermakerforwhatsapp&hl=en\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Upon inspection with\n  <em>\n   file\n  </em>\n  , the format turns out to be a .zip archive (and indeed it unzips). Binwalk can also see all of the files inside the archive without unzipping it. As such I tried mimicking the contents of the container and zipping it with 0 compression ratio (\"storage\" mode) and changing the extension, but the app does not see the archive as a legitimate stickerpack. Furthermore binwalk can't see the contents of such an archive off the bat.\n </p>\n <p>\n  What is contained inside an archive: a png called 0, which is the stickerpack icon; A bunch of .webp files numbered from 1 to at most 30, and two text files,\n  <em>\n   title.txt\n  </em>\n  and\n  <em>\n   author.txt\n  </em>\n  which, you guess it, denote the title and the author of the stickerpack.\n </p>\n <p>\n  What is special about their container? How can I mimick it?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "294",
    "tags": [
        "file-format"
    ],
    "user": null,
    "time": "Oct 20, 2019 at 4:29",
    "comments": [
        {
            "user": "marathon",
            "text": "<html><body><span class=\"comment-copy\">\n in the example file, one thing that sticks out is the files have absolute paths starting at\n <code>\n  /\n </code>\n , e.g.\n <code>\n  /1.webp\n </code>\n ...  normally when you zip a file you end up with relative paths, e.g.\n <code>\n  1.webp\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "A.B",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://manpages.debian.org/zip/zipnote.1\" rel=\"nofollow noreferrer\">\n  <code>\n   zipnote\n  </code>\n </a>\n can change the name (the path) of a file inside a zip. But in my tests it would want to do that only one at a time. Perhaps zipnote is a bit frail.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "X Tian",
            "text": "<html><body><span class=\"comment-copy\">\n I'm voting to close this question as off-topic because it's about emulating  a file format for WhatsApp\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tanny Sieben",
            "text": "<html><body><span class=\"comment-copy\">\n You're right, this might not be the best place to ask. Perhaps someone with enough reputation could migrate it to the Reverse Engineering Stack Exchange?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}