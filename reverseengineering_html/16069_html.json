{
    "title": "Android Intercepts for log the Funtion Calls to javax",
    "link": "https://reverseengineering.stackexchange.com/questions/16069/android-intercepts-for-log-the-funtion-calls-to-javax",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Im reversing an apk that uses a native library\n  <code>\n   .so\n  </code>\n  to make calls to some  Java methods thru reflexion\n </p>\n <p>\n  I know by analysing the app that exist the followings calls:\n </p>\n <pre><code>import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\n//This metods are called from native c++ \n//via reflection\nMac mac= Mac.getInstance(method);\n//Log this methods parameters\nSecretKeySpec key=new SecretKeySpec(byte[],string);\nmac.init(key);\nret=m.doFinal();//log the return\n</code></pre>\n <p>\n  The aplication is debuggeable in the manifest\n </p>\n <p>\n  How I can log the parameters of this methods?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "153",
    "tags": [
        "decompilation",
        "android",
        "java"
    ],
    "user": "Rolando Corratge Nieves",
    "time": "Aug 11, 2017 at 16:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several ways you can go about doing this.\n  \n\n  \n\n </p>\n <p>\n  Rooted android:\n  \n\n  Use Xposed with Inspeckage or your own module to log the calls to these methods.\n  \n\n  \n\n  For a non-rooted android, it's a bit more complicated but shouldn't be too much of a problem.\n  \n\n  Decompile the APK and add smali classes that have the same signature of the functions that you intend to log.\n  \n\n  inside the functions you created.\n  \n\n  For example, if you're looking to hook the method Log.e, then your smali file would look something like this:\n  \n\n </p>\n <pre><code>.class public LmyLog;\n.super Ljava/lang/Object;\n\n.method public e(Ljava/lang/String;Ljava/lang/String;)I\n    .locals 1\n    # log whatever params you need \n    invoke-static {p0, p1}, LsomeClassForLoggin;->log(Ljava/lang/String;Ljava/lang/String;)V\n\n    invoke-static {p0,p1}, Landroid/util/Log;->e(Ljava/lang/String;Ljava/lang/String;)I\n\n    move-result v0\n\n    return v0\n.end method \n</code></pre>\n <p>\n  Now, this alone won't be enough because your methods won't get called from the .so.\n  \n\n  So next step would be to locate the classname of the method you're looking to hook and log and edit it in a hex editor.\n  \n\n  So in this example we'll be looking for Landroid/util/Log; and we'll be replacing it with LmyLog;\n  \n\n  That should redirect the calls from smali to your own code.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NotGI",
            "time": "Nov 8, 2017 at 19:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}