{
    "title": "How to call a func in an executable binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/29542/how-to-call-a-func-in-an-executable-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a binary with a func that I can disassemble.  What are simple ways for me to call it with arbitrary args and observe its return val and behavior?\n </p>\n <p>\n  Ideally, I'd like to do this:\n </p>\n <ul>\n  <li>\n   Within gdb (or gdb-peda)\n  </li>\n  <li>\n   From C (ie linking to the executable as if its a lib)\n  </li>\n  <li>\n   Via Python scripts (I recall reading about a Python script to do this, but can't find it)\n  </li>\n </ul>\n <p>\n  I'm operating on Linux, but this question is relevant to other OS as well.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "dynamic-analysis",
        "libraries",
        "call"
    ],
    "user": "SRobertJames",
    "time": "Nov 11, 2021 at 21:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h3>\n  LIEF\n </h3>\n <p>\n  If the binary is a PIE, exporting functions via the LIEF binary instrumentation framework should allow you to call the function you are interested in as if it was a function in a shared object.\n </p>\n <ul>\n  <li>\n   Example:\n   <a href=\"https://lief-project.github.io//doc/latest/tutorials/08_elf_bin2lib.html\" rel=\"nofollow noreferrer\">\n    LIEF - Transforming an ELF executable into a library\n   </a>\n  </li>\n </ul>\n <h3>\n  LD_PRELOAD\n </h3>\n <p>\n  If the binary is dynamically linked and contains code for setting up the standard C runtime environment e.g.\n  <code>\n   __libc_start_main\n  </code>\n  calling\n  <code>\n   main()\n  </code>\n  , you can hook these functions with LD_PRELOAD and interpose your own code via shared library injection which calls the target function directly with arguments of your choosing.\n </p>\n <ul>\n  <li>\n   Example:\n   <a href=\"https://breaking-bits.gitbook.io/breaking-bits/vulnerability-discovery/reverse-engineering/modern-approaches-toward-embedded-research\" rel=\"nofollow noreferrer\">\n    Modern Vulnerability Research Techniques on Embedded Systems\n   </a>\n  </li>\n  <li>\n   Example:\n   <a href=\"https://gist.github.com/apsun/1e144bf7639b22ff0097171fa0f8c6b1\" rel=\"nofollow noreferrer\">\n    Hook main() using LD_PRELOAD\n   </a>\n  </li>\n </ul>\n <h3>\n  Qiling emulator\n </h3>\n <p>\n  Using the Qiling emulator, you can record the state of the program and then replay the target function in GDB. Since the code is being emulated, it is straightforward to manipulate any aspect of the process' state (registers, memory, etc.)\n </p>\n <ul>\n  <li>\n   Example:\n   <a href=\"https://github.com/qilingframework/qiling/blob/master/examples/hello_x8664_linux_part_debug.py\" rel=\"nofollow noreferrer\">\n    qiling/examples/hello_x8664_linux_part_debug.py\n   </a>\n  </li>\n </ul>\n <h3>\n  DBI\n </h3>\n <p>\n  Using Frida, Pin, DynamoRIO etc. you can basically make the program do what you want at run time, in this case hook a function, manipulate its arguments and observe the subsequent behavior.\n </p>\n <ul>\n  <li>\n   Example:\n   <a href=\"https://blog.fadyothman.com/getting-started-with-frida-hooking-main-and-playing-with-its-arguments/\" rel=\"nofollow noreferrer\">\n    Getting Started with Frida : Hooking a Function and Replacing its Arguments\n   </a>\n  </li>\n  <li>\n   Example:\n   <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/98484/Pin/html/index.html#FunctionArguments\" rel=\"nofollow noreferrer\">\n    Pin 3.21 User Guide: Finding the Value of Function Arguments\n   </a>\n  </li>\n </ul>\n <h3>\n  Trampolining with e9patch\n </h3>\n <p>\n  e9patch is a static binary rewriting tool that allows one to change/insert code prior to run time.\n </p>\n <ul>\n  <li>\n   Example:\n   <a href=\"https://github.com/GJDuck/e9patch/blob/master/doc/e9tool-user-guide.md\" rel=\"nofollow noreferrer\">\n    e9tool user guide\n   </a>\n  </li>\n  <li>\n   Example:\n   <a href=\"https://github.com/GJDuck/e9afl\" rel=\"nofollow noreferrer\">\n    e9afl\n   </a>\n  </li>\n </ul>\n <p>\n  There are probably even more ways to do this, such as process snapshotting with ptrace and /proc and then manipulating registers and memory with ptrace, emulation with PANDA, emulation with Unicorn, emulation with QEMU, possibly even ELF parasite code or inserting code that calls the target function using LD_PRELOAD together with\n  <code>\n   __attribute__ ((constructor)) injected_function()\n  </code>\n  . You have a lot of options.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "sudhackar",
            "time": "Dec 21, 2022 at 20:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}