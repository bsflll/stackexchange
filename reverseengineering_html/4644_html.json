{
    "title": "Need help in figuring out checksum used in this small wireless packet",
    "link": "https://reverseengineering.stackexchange.com/questions/4644/need-help-in-figuring-out-checksum-used-in-this-small-wireless-packet",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Need help in figuring out the checksum used for this small data packet.\nPacket is 48 bits long, I already have figured out most of the bits. Least 8 bits change even if there is a single bit change in rest of the packet. So I'm guessing this must be some sort of checksum. Tried all checksum algorithms I know of and nothing fits.\n </p>\n <p>\n  The packet is question is RF transmission being send by a motion sensor (history below). The bits are,\n </p>\n <pre><code>4 4 4 4 4 4 4 4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 \n7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n-----------------------------------------------------------------------------------------------\np p p p p s s s 0 0 m t 1 i i i i i i i i 1 i i i i i i i i 1 i i i i i i i i 1 c c c c c c c c\n\n\np = Preamble (11111), helps is demodulating the signal by providing enough transitions.\ns = Some sort of status (only changed when sensor was initializing after power up)\nm = '1' When motion is detected.\nt = '1' when tamper switch is pressed.\ni = Unique sensor ID which is also printed on the back of the sensor.\nc = These bits change whenever any of the other bit change. I'm guessing this is checksum.\n</code></pre>\n <p>\n  Notes:\n </p>\n <ul>\n  <li>\n   Fixed 0's and 1's may very well be some other status reporting, which\njust don't change in case of motion sensor.\n  </li>\n  <li>\n   ID (i) is embedded in the packet at non-byte offsets. It seems like\nID is embedded as '1' followed by 8-bits, maybe the protocol\nwas originally designed for octadecimal.\n  </li>\n  <li>\n   This transmission does not seem to be using any rolling code. Its\nalways the same.\n  </li>\n  <li>\n   This is over 10 years old system, I don't expect it to using anything\ncomplicated.\n  </li>\n </ul>\n <p>\n  Example packets that I have captured for three different sensors are,\n </p>\n <pre><code>FA 19 D4 3E 3B A7 (11111010 00011001 11010100 00111110 00111011 10100111)\nF9 29 D4 3E 3B EE (11111001 00101001 11010100 00111110 00111011 11101110)\nF9 39 D4 3E 3B 44 (11111001 00111001 11010100 00111110 00111011 01000100)\n\nFC 29 D4 C7 11 D4 (11111100 00101001 11010100 11000111 00010001 11010100)\nF9 39 D4 C7 11 19 (11111001 00111001 11010100 11000111 00010001 00011001)\nF9 29 D4 C7 11 B3 (11111001 00101001 11010100 11000111 00010001 10110011)\nFA 19 D4 C7 11 FA (11111010 00011001 11010100 11000111 00010001 11111010)\n\nF9 29 AE 8E DF 57 (11111001 00101001 10101110 10001110 11011111 01010111)\nF9 39 AE 8E DF FD (11111001 00111001 10101110 10001110 11011111 11111101)\n</code></pre>\n <p>\n  <em>\n   This is no hacking or anything like that. This all started as simple exercise to use SDR and GnuRadio to demodulate some RF transmission. Once properly demodulated, it was challenging to figure out the packet format, but this checksum issue is now driving me nuts.\n  </em>\n </p>\n <p>\n  Any help is really appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "318",
    "tags": [
        "unpacking",
        "deobfuscation",
        "gnu-radio"
    ],
    "user": "chis",
    "time": "Jun 19, 2014 at 22:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (I don't have quite enough reputation for a comment so please excuse a very partial answer.)\n </p>\n <p>\n  You need to consider whether some of the bits are not part of the packet data but part of an encoding for transmission.\ne.g. the 1's at regularly spaced bit positions 8, 17, 26, 35 could well be there to prevent a run of 0's getting too long.  (Knowing the modulation scheme could help.)\n </p>\n <p>\n  For example, it might be that your message data is actually:\n </p>\n <pre><code>1sss00mt iiiiiiii iiiiiiii iiiiiiii cccccccc\n</code></pre>\n <p>\n  It could then be transmitted as:\n </p>\n <pre><code>'1111' byte[0] '1' byte[1] '1' byte[2] '1' byte[3] '1' byte[4]\n</code></pre>\n <p>\n  Any checksum might then be based on the message data alone.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Ian Cook",
            "time": "Jun 20, 2014 at 6:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "chis",
                    "text": "<span class=\"comment-copy\">That's a good point. I tried it that as well, no luck. Also tried brute forcing simple add/sub and bit operations, still no luck. My best guess is that it at least involves XOR, since changing one specific bit is toggling three specific bits in the checksum (regardless of the rest of the bits).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Many checksums, especially with small packets of data, are very simple to keep load down on the teeny-tiny brains of embedded devices.\n </p>\n <p>\n  Also consider that the checksum must be fast and simple to verify.\n </p>\n <p>\n  Generally, the checksum is designed so that the final result is 0 (zero), as that's super simple to check.\n </p>\n <p>\n  Some things to try:\n </p>\n <ul>\n  <li>\n   <p>\n    add all the BYTES (8 bit chunks), example result & 0xFF (lower 8 bits), is it zero?  or perhaps always a constant?\n   </p>\n  </li>\n  <li>\n   <p>\n    subtract the bytes.  Start with zero, subtract each chunk.  Do you get zero again?  or a constant value for each packet?\n   </p>\n  </li>\n  <li>\n   <p>\n    xor the bytes, same as above.\n   </p>\n  </li>\n  <li>\n   <p>\n    Often, the microcontrollers might have a 4 bit bus... repeat the previous checks while using 4 bits at a time.  Very slight chance it might have 16 bit bus, but for smaller devices, unlikely.\n   </p>\n  </li>\n  <li>\n   <p>\n    Another thing to keep in mind is that you may have the\n    <code>\n     polarity\n    </code>\n    reversed on the signal you demodulated.  Perhaps the\n    <code>\n     1\n    </code>\n    's are\n    <code>\n     0\n    </code>\n    's and vice-versa? Many devices are active-logic-low, meaning they show zeros on their bus when signalling/indicating something rather than ones. (although I believe the checksum final result could be all 1's for this scenario)\n   </p>\n  </li>\n </ul>\n <hr/>\n <pre><code>                    Add Sub Xor 4A 4S 4X\nFA 19 D4 3E 3B A7 : 07  F9  95  4  C  C    ; hmmm, dunno yet \nF9 29 D4 3E 3B EE : 5D  A3  EF  F  1  1    ; drat, nothing jumps out yet\nF9 39 D4 3E 3B 44 : C3  3D  55  C  4  0    ; awww, maaaaaaannn!\n\nFC 29 D4 C7 11 D4 :                        ; these entries left as an\nF9 39 D4 C7 11 19 :                        ; exercise for the reader...\nF9 29 D4 C7 11 B3 :\nFA 19 D4 C7 11 FA :                        ; also, I'm being lazy tonight\n                                           ; and these are painful to compute\nF9 29 AE 8E DF 57 :                        ; by hand.\nF9 39 AE 8E DF FD\n</code></pre>\n <p>\n  What you need are many packets from a single sensor under steady-state conditions.  Do you get the same packet data every time?  or perhaps there's a counter or\n  <em>\n   I'm Alive\n  </em>\n  kind of value?\n </p>\n <p>\n  Of course, then do this for every sensor, looks for trends.  But I'd be curious as to what (if any) changes during steady-state.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "lornix",
            "time": "Jun 20, 2014 at 1:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "chis",
                    "text": "<span class=\"comment-copy\">I already have tried all of the things you mentioned, manually. Might have something. I can try to code something up to make sure I didn't miss anything. Regarding steady state change, as I mentioned there is no counter/rolling code sort of thing. Once the motion stops or tamper switch is back to original state, it re transmits the same old data and the same old checksum (I know its not really good for a security sensor)</span>",
                    "time": null
                },
                {
                    "user": "lornix",
                    "text": "<span class=\"comment-copy\">Well, Pooh!  I know it would bug me to not know what those last bits represent, but it looks like you've got most of the packet decoded and could use the data as sensor results.  (My inner OCD whines and says we need to knooooowww {sigh} )</span>",
                    "time": null
                },
                {
                    "user": "chis",
                    "text": "<span class=\"comment-copy\">One more thing, three of the pairs have 29/39 in second bytes. But the checksum change is multiple bits with no apparent pattern. That made me wonder if it's more than simple xor/add/subtract. So I also tried few CRCs, specially CRC8 with few different polynomials. But still nothing fits. And I doubt it could be using anything more sophisticated like SHA for checksum.</span>",
                    "time": null
                }
            ]
        }
    ]
}