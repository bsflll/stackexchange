{
    "title": "What is the outcome of mov on non bracket memory locations?",
    "link": "https://reverseengineering.stackexchange.com/questions/30505/what-is-the-outcome-of-mov-on-non-bracket-memory-locations",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am having problems distinguishing whether the address is loaded or the content from the address. Please help me clarify.\n </p>\n <pre><code>1. mov     [rsp+78h+arg_0], rsi\n2. mov     rsi, cs:qword_1F39B60\n3. mov     [rsp+78h+arg_38], rsi\n</code></pre>\n <ol>\n  <li>\n   If line 2 is loading\n   <code>\n    1F39B60\n   </code>\n   in\n   <code>\n    rsi\n   </code>\n   or the contents of\n   <code>\n    1F39B60\n   </code>\n   in\n   <code>\n    rsi\n   </code>\n   ?\n  </li>\n  <li>\n   Would\n   <code>\n    lea rsi, [qword_1F39B60]\n   </code>\n   be the same?\n  </li>\n  <li>\n   If non bracket using\n   <code>\n    mov\n   </code>\n   action on a memory even allowed or this is just a visual IDA thing?\n  </li>\n  <li>\n   Can you explain to me why it shows\n   <code>\n    cs:\n   </code>\n   even though\n   <code>\n    qword_1F39B60\n   </code>\n   is in the\n   <code>\n    .data segment\n   </code>\n   ? Shouldn't it be\n   <code>\n    ds:\n   </code>\n   ?\n  </li>\n </ol>\n <p>\n  Last but not the least this isn't directly connected to my main question but is\n  <code>\n   rsp+78h\n  </code>\n  a fancy way of saying\n  <code>\n   rbp\n  </code>\n  by the disassembler?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "125",
    "tags": [
        "assembly",
        "x86-64",
        "intel"
    ],
    "user": "Sawb",
    "time": "Jun 12, 2022 at 8:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <code>\n    rsi\n   </code>\n   is being copied into\n   <code>\n    arg_0\n   </code>\n  </li>\n  <li>\n   <code>\n    lea rsi, [qword_1F39B60]\n   </code>\n   means\n   <code>\n    rsi\n   </code>\n   would contain a pointer to\n   <code>\n    qword_1F39B60\n   </code>\n  </li>\n  <li>\n   Yes it is allowed, it's a mem->reg operation.\n  </li>\n  <li>\n   I believe that\n   <code>\n    ds\n   </code>\n   and\n   <code>\n    ss\n   </code>\n   are usually set to zero when using 64bit mode, but\n   <code>\n    cs\n   </code>\n   is set to the start of the text segment, so is the only segment register that can be used to generate a valid address. (There are some conflicting views on this, and I may be wrong)\n  </li>\n  <li>\n   Usually\n   <code>\n    rbp\n   </code>\n   will be set to\n   <code>\n    rsp\n   </code>\n   before space is allocated on the stack:\n  </li>\n </ol>\n <pre><code>push rbp              ; save the current frame pointer\nmov rbp, rsp          ; create a new frame\nsub rsp, rax          ; allocate space on the stack\n</code></pre>\n <p>\n  However, it looks like this program is optimised (omit frame pointers) and is using\n  <code>\n   rsp\n  </code>\n  for all references, so\n  <code>\n   rbp\n  </code>\n  may be used for anything in this case but not its usual job.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Mega Tonnage",
            "time": "Jun 22, 2022 at 3:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}