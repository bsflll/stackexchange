{
    "title": "Reverse Engineering a 8 bit CRC checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/8429/reverse-engineering-a-8-bit-crc-checksum",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to create a communication interface using C Language to an Air conditioning system, after analyzing the data packets I have identified that the data packet is consist of an 8 bit CRC (I am pretty sure the CRC is the last byte because the rest of the data only changes when I change something in the settings).\n </p>\n <p>\n  So what I need to do now is to be able to reverse engineer the process on how to come up with this CRC\n </p>\n <pre><code>A802000000001F5D0000000073\nA802000000001E5D0000000070\nA802000000001D5D0000000071\n</code></pre>\n <p>\n  In the data above I purposely changed\n  <code>\n   1F\n  </code>\n  ->\n  <code>\n   1E\n  </code>\n  ->\n  <code>\n   1D\n  </code>\n  and as you can see the value of last byte changed from\n  <code>\n   73\n  </code>\n  ->\n  <code>\n   70\n  </code>\n  ->\n  <code>\n   71\n  </code>\n  .\n </p>\n <p>\n  I tried different on-line CRC calculators but still had no luck.\n </p>\n <p>\n  I managed to capture more data samples:\n </p>\n <pre><code>A80300000004045D0000000045\nA80300000004055D0000000044\nA803000000040F61000000004A\nA802000000040F61000000004B\nA81200004004169A00000000FB\nA81200004004159A00000000F8\nA81200004004149A00000000E5\nA81200084000149C00000000E7\nA83200084000149C0000000087\nA85200084000149C00000000A7\n</code></pre>\n <p>\n  Any help would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 0,
    "views": "2k",
    "tags": [
        "c",
        "hash-functions",
        "crc"
    ],
    "user": "Nick",
    "time": "Mar 10, 2015 at 8:38",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n See\n <a href=\"http://reverseengineering.stackexchange.com/questions/8303/rs-485-checksum-reverse-engineering-watlow-ez-zone-pm\">\n  RS-485 Checksum Reverse Engineering (Watlow EZ-Zone PM)\n </a>\n - the takeaway is that you need to reverse engineer the client's code or the server's code. Any answer provided below would just be guessing.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n I agree with Jason, reversing the code is the only sure method to achieve this. There are so many zeroes in your packets, we can only guess how they're used in the checksum bit. However, this certainly isn't a CRC (the output bits should change more depending on the input if it was), this seems rather like a primitive scheme to me (xor each byte with something, add up the values, xor the result with something else) since in many cases, adding 1 to a nibble subtracts 1 from the checksum.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n And there've been several questions (4460, 6927, 8097) where, given enough samples, the algorithm could be found. But, to do this in your case, longer sequences of \"change a byte, check the result\" would be helpful.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nick",
            "text": "<html><body><span class=\"comment-copy\">\n Hi thank you for the response. Finally I got it.. it's actually not a CRC so Guntram was right!!! the formula is add up all the values then XOR with 0x55 (Magic Number) and so far everything is a hit if I try this formula to all data packets.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}