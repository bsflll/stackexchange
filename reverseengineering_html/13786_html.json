{
    "title": "Identifying DeviceIoControl argument",
    "link": "https://reverseengineering.stackexchange.com/questions/13786/identifying-deviceiocontrol-argument",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am reversing an application that uses the serial interface (COM1 port) and am using API Monitor to trace through the API calls.\n </p>\n <p>\n  I found a reference to\n  <code>\n   CreateFileA(\"\\\\.\\Commsb96\", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)\n  </code>\n  . I believe this is opening the serial port.\n </p>\n <p>\n  Shortly afterwards, the code runs\n  <code>\n   DeviceIoControl\n  </code>\n  , with the\n  <code>\n   dwIoControlCode\n  </code>\n  (second parameter) set to\n  <code>\n   0x0022002b\n  </code>\n  .\n </p>\n <p>\n  API Monitor identified that as IOCTL_INTERNAL_USB_RECORD_FAILURE. Given that this is not a USB device, I suspect this is a mislabeling. If so, how do I identify what\n  <code>\n   0x0022002b\n  </code>\n  is?\n </p>\n <p>\n  And if not, what the heck is IOCTL_INTERNAL_USB_RECORD_FAILURE. The calling DLL is VcomSB96.dll.\n </p>\n <p>\n  Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "438",
    "tags": [
        "windows",
        "debuggers",
        "winapi"
    ],
    "user": "Farhan Yusufzai",
    "time": "Oct 22, 2016 at 2:24",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n These are probably\n <b>\n  not\n </b>\n COM devices. COM device descriptor names are in the format of \"\\\\.\\COM1\". where the digit 1 represents the COM device id. Is it possible that the application loads it's own driver?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n According to\n <a href=\"http://social.technet.microsoft.com/wiki/contents/articles/24653.decoding-io-control-codes-ioctl-fsctl-and-deviceiocodes-with-table-of-known-values.aspx?Sort=MostUseful&PageIndex=1\" rel=\"nofollow noreferrer\">\n  Microsoft\n </a>\n ,\n <code>\n  0x0022002b\n </code>\n is also\n <code>\n  IOCTL_BTHHFP_STREAM_OPEN\n </code>\n which hints at a bluetooth device. Are you sure that's a real com port, or rather a bluetooth adapter that emulates RS232 over bluetooth? I found this by googling for 0x0022002b; in many cases googling for this kind of specific magic number yields something useful.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As Nirlzr said, this was not a\n  <strong>\n   COM1\n  </strong>\n  device. It was a virtual device, which functioned as an intermediary to the actual COM1 interface.\nI debugged the .sys file, which was just using IOCTL_INTERNAL_USB_RECORD_FAILURE, but was merely using that IOCTL command.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Farhan Yusufzai",
            "time": "Oct 24, 2016 at 14:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The meaning of any one Device I/O Control code is subject to some convention. Microsoft defines the code in bit fields, the most notable of which is the high word as a device type. Microsoft defines many I/O control codes for many types of device. If a driver is executing to handle that type of device, it should expect to receive those corresponding I/O control codes and to interpret them as Microsoft defines. These I/O control codes are in this sense well-defined such that if you or a diagnostics tool see one, identifying it by a known symbolic value is sound.\n </p>\n <p>\n  However, drivers can create device objects that have nothing to do with hardware. Such devices won't be the target for any device I/O control to help with managing any type of device that the system knows or cares about, and so the driver can make up whatever I/O control codes it wants. This is a long established mechanism by which drivers communicate with a co-operating application.\n </p>\n <p>\n  Conventionally, I/O control codes that are invented for this purpose tend to have 0x0022, i.e., FILE_DEVICE_UNKNOWN, as the device type. The practical consequence for you in your reverse engineering is that the same device I/O control code that has 0x0022 as the high word can mean completely unrelated things to different devices, even if implemented in the same driver.\n </p>\n <p>\n  Now, Microsoft does muddy the water a little by using FILE_DEVICE_UNKNOWN for I/O control codes that can be sent to drivers for physical devices. But unless you or your diagnostics tool know that you're looking at a driver that's in place to receive those I/O control codes, any symbol that the tool resolves a 0x0022XXXX number to is very likely a fantasy that you do better to ignore.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Geoff Chappell",
            "time": "Jan 2, 2017 at 19:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}