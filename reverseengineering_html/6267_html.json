{
    "title": "XORing command-line for encryption?",
    "link": "https://reverseengineering.stackexchange.com/questions/6267/xoring-command-line-for-encryption",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following lines\n </p>\n <pre><code> push [ebp+dwBytes]\n push 8                 ; dwFlags\n call ds:GetProcessHeap\n push eax               ; hHeap\n call ds:HeapAlloc      \n push [ebp:lpCmdLine]   ; char *\n mov edi, eax\n call _atol\n mov esi, eax\n xor esi, 28Ch\n mov eax, esi\n pop ecx\n mov edx, ebx\n xor eax, 1104h\n xor ecx, ecx\n shr edx, 1\n jz  short loc_60114A\n</code></pre>\n <p>\n  The first part is not difficult. They get a handle to the default heap and after that, they allocate some memory on that heap using the handle hHeap.\n </p>\n <p>\n  The part with lpCmdLine take the lpCmdLine and converts it into a long value.\n </p>\n <p>\n  Now, I do not understand the part which comes after call _atol.\nEspecially the lines with the XOR :\n </p>\n <pre><code> xor esi, 28Ch\n</code></pre>\n <p>\n  Questions:\na) Is that a way of encryption ? I mean, is it so that they try to encrypt the string pointed by lpCmdLine ?\n </p>\n <p>\n  b) Normally I had a cmp before jz, but here as you can see, there is only a jz instruction? Why is the cmp is missing ?\n </p>\n <p>\n  best regards,\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "510",
    "tags": [
        "assembly",
        "xor"
    ],
    "user": "user3097712",
    "time": "Sep 20, 2014 at 17:58",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<html><body><span class=\"comment-copy\">\n atol = ascii to long, so if you passed 12345678 on the commandline then eax would become that, then its xoring the value, presumably for a compare later, so at a guess      jz doesnt need a compare, some of the other operations will adjust the eflags.. like the shr edx.. if edx = 0 after this the zero flag will be set\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The number returned by\n  <code>\n   _atol()\n  </code>\n  is XOR'ed with\n  <code>\n   0x28C\n  </code>\n  and then XOR'ed again with\n  <code>\n   0x1104\n  </code>\n  . Since XOR is an\n  <a href=\"http://en.wikipedia.org/wiki/Associative_property\" rel=\"nofollow\">\n   associative\n  </a>\n  operation, this is equivalent to XOR'ing the number returned by\n  <code>\n   _atol()\n  </code>\n  with\n  <code>\n   0x1388\n  </code>\n  .\n </p>\n <blockquote>\n  <p>\n   a) Is that a way of encryption ? I mean, is it so that they try to\n  encrypt the string pointed by lpCmdLine?\n  </p>\n </blockquote>\n <p>\n  There's not enough context in your snippet above to infer how this resulting value is being used.\n </p>\n <p>\n  Also, it's unlikely that what IDA is labeling as\n  <code>\n   lpCmdLine\n  </code>\n  is really the program's command line, since a command line typically begins with the executable's file name, on which\n  <code>\n   _atol()\n  </code>\n  would typically fail (you\n  <em>\n   can\n  </em>\n  create a process and have only command line arguments as the command line, and alternatively it\n  <em>\n   is\n  </em>\n  possible that the code above expects the executable's file name to be numeric (like\n  <code>\n   123.exe\n  </code>\n  ), but these are both less likely than IDA just mislabling the variable).\n </p>\n <blockquote>\n  <p>\n   b) Normally I had a cmp before jz, but here as you can see, there is\n  only a jz instruction? Why is the cmp is missing ?\n  </p>\n </blockquote>\n <p>\n  The\n  <code>\n   jz\n  </code>\n  instruction checks the CPU's\n  <a href=\"http://en.wikipedia.org/wiki/Zero_flag\" rel=\"nofollow\">\n   Zero Flag\n  </a>\n  . The\n  <code>\n   shr\n  </code>\n  instruction prior to the\n  <code>\n   jz\n  </code>\n  instruction sets the Zero Flag as follows (from\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_285.html\" rel=\"nofollow\">\n   http://x86.renejeschke.de/html/file_module_x86_id_285.html\n  </a>\n  ) --\n </p>\n <blockquote>\n  <p>\n   The SF, ZF, and PF flags are set according to the result [of the shift operation].\n  </p>\n </blockquote>\n <p>\n  In other words, if after\n  <code>\n   shr edx, 1\n  </code>\n  the register\n  <code>\n   edx\n  </code>\n  is\n  <code>\n   0x00000000\n  </code>\n  , then the jump is taken. As with your previous question, though, there's not enough context in your snippet above to infer how this is being used.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Sep 21, 2014 at 15:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}