{
    "title": "Automating bypassing anti-debug checks",
    "link": "https://reverseengineering.stackexchange.com/questions/19178/automating-bypassing-anti-debug-checks",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on bypassing the anti-debug checks of an unpacker in x64dbg. My end goal is to bypass all of the checks so that I can run the (unmodified) process with a debugger attached without any problems.\n </p>\n <p>\n  To bypass the checks I've encountered so far, I have a process of ~15 actions of setting breakpoints, stepping over instructions, skipping syscalls under certain conditions, etc, and it takes at least a couple of minutes to get up to the point where I left off.\n </p>\n <p>\n  Since doing this stuff manually is time-consuming and error-prone, I'd like to automate it.\n </p>\n <p>\n  I was thinking of building a C++ application that will launch the executable, attach and bypass all of the checks I've solved so far, then suspend the program and detach, so that I can attach with x64dbg and resume my reversing... or perhaps it's a better idea to do this with an x64dbg plugin? What's the best way to do this?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "8k",
    "tags": [
        "unpacking",
        "x64dbg",
        "automation"
    ],
    "user": "P. Private",
    "time": "Aug 29, 2018 at 3:02",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n A very simple solution for targets like this is using a virtual machine, bypass all the checks manually then take a snapshot. Not trying to be snarky, I typically do that when simple binary patching won't do. That may lead to additional problems with VM detection, and if the target is a game this usually doesn't work at all, of course.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "P. Private",
            "text": "<html><body><span class=\"comment-copy\">\n @JohannAydinbas that's a great idea, I hadn't thought of that. Why wouldn't this work for a game though?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n Performance and graphics. I know VirtualBox for example has experimental 3D support but I always assumed it's barely working for modern games. If it were any good everyone would just play their Windows games in a VM but that's not the case so I guess it's not working that good.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What you could do:\n </p>\n <ol>\n  <li>\n   <p>\n    With each found anti-debug, patch the exe with the bypass and continue with the patched one.\n   </p>\n  </li>\n  <li>\n   <p>\n    If your debugger is scriptable (like e.g. Ida) run it under the script, insert breakpoints in your script and bypass the anti-debug in your script. This is a particularly useful in \"dynamic\" anti-debug cases where static patching is not possible or difficult.\n   </p>\n  </li>\n </ol>\n <p>\n  The latter method is similar to your C++ idea, but more flexible as you can work completely in the debugger.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "josh",
            "time": "Aug 29, 2018 at 10:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "P. Private",
                    "text": "<span class=\"comment-copy\">Thanks, I was able to automate everything I was doing manually in x64dbg. (as long as I stayed away from the buggy page guard breakpoints).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You don't need any external plugin, this is already a builtin feature in x64dbg:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/hu9q2.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/hu9q2.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "BPL",
            "time": "Aug 29, 2018 at 14:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">this likely covers only a few simplest checks. I doubt it will work against more advanced detection.</span>",
                    "time": null
                },
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">Fair enough, i've posted it as it's worked good enough to me with some few dozens of protections. But you're right, they were probably using some basic anti-debugging techniques. Anyway, the author tagged the question with x64dbg, so... worth to mention it :)</span>",
                    "time": null
                },
                {
                    "user": "P. Private",
                    "text": "<span class=\"comment-copy\">@BPL, thanks for your answer. Unfortunately the unpacker is way more advanced than that.</span>",
                    "time": null
                },
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">@P.Private Sure thing, what Igor said above is definitely true... in any case, this is one of the first methods I tend to use to bypass the first protection layers of the analized software.</span>",
                    "time": null
                }
            ]
        }
    ]
}