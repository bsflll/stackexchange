{
    "title": "How to make pseudocode in IDA more human readable",
    "link": "https://reverseengineering.stackexchange.com/questions/31103/how-to-make-pseudocode-in-ida-more-human-readable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Some codes in IDA are not clear enough. Especially when they do reference after calculation\n </p>\n <pre><code>while ( dx33[rdi24] );\n  if ( rax35 != &WPP_GLOBAL_Control && (*((_BYTE *)rax35 + 68) & 2) != 0 && *((_BYTE *)rax35 + 65) >= 4u )\n  {\n    WPP_SF_sd(\n      (unsigned int)rax35[7],\n      22,\n      (unsigned int)&WPP_b7e02e4f98cc3b1bbc566e561d210229_Traceguids,\n      (_DWORD)dx33,\n      rdi24 - 1);\n    dx33 = Str;\n  }\n  if ( (_DWORD)rdi24 != 1 && dx33[(int)rdi24 - 1] == 46 && dx33[(int)rdi24 - 2] == 46 )\n  {\n    dx33[(int)rdi24 - 1] = 0;\n    dx33 = Str;\n  }\n</code></pre>\n <p>\n  For some parts like\n </p>\n <blockquote>\n  <p>\n   (*((_BYTE *)rax35 + 68) & 2)\n  </p>\n </blockquote>\n <p>\n  Can I change it to a more human-readable form? I remember changing the function argument type like int a1 to JNIEnv* can make the pointer reference more readable because it recovers some JNI function names so that\n </p>\n <blockquote>\n  <p>\n   ...\n   <em>\n    (_DWORD\n   </em>\n   )(a1+312)(a1,v9)\n  </p>\n </blockquote>\n <p>\n  will become something like\n </p>\n <blockquote>\n  <p>\n   ->func(a1,v9)\n  </p>\n </blockquote>\n <p>\n  But I'm not sure how to do this for other types.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "anonymous bear",
    "time": "Nov 9, 2022 at 2:09",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Quite frankly in this particular case you may want to look at\n <a href=\"https://learn.microsoft.com/windows-hardware/drivers/devtest/wpp-software-tracing\" rel=\"nofollow noreferrer\">\n  WPP Software Tracing\n </a>\n and ETW in general for the first\n <code>\n  if\n </code>\n condition. I am almost certain that this is pretty much some idiomatic way of how the respective\n <a href=\"https://learn.microsoft.com/windows-hardware/drivers/devtest/wpp-preprocessor\" rel=\"nofollow noreferrer\">\n  WPP macros get expanded\n </a>\n . The GUIDs will vary across different pieces of software (or even\n <i>\n  within\n </i>\n a single software). I.e. this would be a piece you don't want to reverse engineer normally. Is this KM or UM?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "anonymous bear",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L It's a piece of code in dns.exe. I think it's UM because when I used Windbg the function in dns.exe didn't appear in all the kernel files\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To make the listing more human-readable, you just need to add structure definitions,\nfor example:\ntype of variable\n  <strong>\n   rax35\n  </strong>\n  - obviously not\n  <strong>\n   unsigned int\n  </strong>\n </p>\n <p>\n  there should be a pointer to the structure you need to define.\n </p>\n <hr/>\n <p>\n  The first thing you need is to find the\n  <code>\n   size\n  </code>\n  of this struct or class. To do this, you need to find its\n  <code>\n   constructor\n  </code>\n  .\n </p>\n <ul>\n  <li>\n   If the memory for this object is allocated using the operator\n   <code>\n    New\n   </code>\n   ,\nyou can determine the size.\n  </li>\n  <li>\n   If memory is allocated on the\n   <code>\n    stack\n   </code>\n   , then heuristic methods must be\nused here. That is, you have to manually parse the\n   <code>\n    stack frame\n   </code>\n   .\n  </li>\n </ul>\n <p>\n  After the size of the structure or class is found, it's time to add it to\n  <code>\n   Local Types\n  </code>\n  in\n  <code>\n   IDA Pro\n  </code>\n  .\n </p>\n <p>\n  To simplify\n  <code>\n   static analysis\n  </code>\n  as much as possible, you should:\n </p>\n <ul>\n  <li>\n   add, if any,\n   <code>\n    pdb\n   </code>\n   -file to the project.\n  </li>\n  <li>\n   for each function declaration - restore\n   <code>\n    prototype\n   </code>\n   s\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "May 1, 2023 at 20:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "anonymous bear",
                    "text": "<span class=\"comment-copy\">But how do I know which structure should I define</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There’s no single solution for every case but basically you need to use the decompiler’s interactive features:\n </p>\n <ul>\n  <li>\n   Renaming\n  </li>\n  <li>\n   Retyping\n  </li>\n  <li>\n   Commenting\n  </li>\n  <li>\n   Navigation between different functions\n  </li>\n </ul>\n <p>\n  Just looking at small parts of the function and renaming a few variables to some name which makes sense can go a long way. Start small and keep making changes until things start to make sense. Sometimes you may need yo visit multiple functions to see how a specific variable is used to figure out its type.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2023 at 13:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}