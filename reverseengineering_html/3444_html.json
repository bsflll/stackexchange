{
    "title": "Could not find main function in IDA pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/3444/could-not-find-main-function-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have newbie question that concerns IDA pro and Visual studio 2010. Basically I started a new \"Empty Project\" in VS 2010 and added a main function to the .cpp file. Then I compiled it to binary and opened up the binary using IDA Pro. However, I could not locate the main function. Why is that?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "29k",
    "tags": [
        "ida",
        "disassembly",
        "windows"
    ],
    "user": "Mark",
    "time": "Jan 13, 2014 at 2:41",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Are you talking about writing an IDA plugin/processor module? If so you should mention which and so on ... your question contains too many unknowns to be answered. Please improve it, otherwise it'll likely get closed.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mark",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L: I am not writing anything. I just want to learn how to use IDA to compile a simple binary and practice reading it. It seems more difficult than previously precieved.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n So you want to use Visual Studio to\n <b>\n  compile\n </b>\n and use IDA to\n <b>\n  disassemble\n </b>\n . Still not enough info, though. You should include information such as what you are building (console/windowed app or DLL) and whether you link to the runtime statically or dynamically. Also, managed or native?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mark",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L: I am doing an Empty Project. The setting are all default.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Open Exports view in IDA (Views-->Open subviews-->Exports).\nYou'll see there one function name.\nIt is the real main function of the program (which is possibly not your main function, but your main function will be called somehow from it).\n </p>\n <p>\n  Actually you can not find main function by name because this information does not exist in the executable: the computer doesn't need it for program execution.\nInformation about function, variable and type names and relation between CPU instructions and lines of real source code called \"debug information\" and \nstored in different place, which is .PDB file in your specific case.\n </p>\n <p>\n  So if you compiled your program with debug information (which is default) loading .PDB file \n(File-->Load File-->PDB file) will possibly be helpful.\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "w s",
            "time": "Jan 13, 2014 at 8:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mark",
                    "text": "<span class=\"comment-copy\">So all those functions with names such as subxxxxx are name to identify a function. Does that mean one of them is my main?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">It should be so. sub_some_hex_address means subroutine at this address, all such names generated automatically.</span>",
                    "time": null
                },
                {
                    "user": "Mark",
                    "text": "<span class=\"comment-copy\">If I export a function using __declspec(dllexport) I would be able to find it in the export menu in IDA. However, usually it just show a jump to the Data section and that would be it. It is possible to use this information to locate the real code for the exported function?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">It looks very strange. As far as I understand dllexport  should not generate such code. Did you mean dllimport ?</span>",
                    "time": null
                },
                {
                    "user": "Mark",
                    "text": "<span class=\"comment-copy\">I used export for a dll project and export for .exe project. In both cases the function showed up in the export menu of IDA.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  start is the address that IDA pulls from the file header.  For PE files this corresponds to (AddressOfEntryPoint + ImageBase). start != main, main is language (C/C++) specific requirement, not all languages require \"main\".\n </p>\n <p>\n  One of the jobs of the code that executes between start and main is to setup all the arguments that main expects (argc, argv, envp) in the manner that main expects to receive them according to the calling conventions of the platform for which the binary was built.\n </p>\n <p>\n  IDA attempts to locate main for you because you are often not interested in the code between start and main which is generally just compiler boiler plate code. In some cases IDA will note that there is a symbol named main and just drop you there. In other cases, IDA does what is effectively signature matching against the start code to pick out the address of main. Compilers tend to have unique ways of reaching main, so if (a big if) IDA has a signature for a specific compiler, then it may be able to pick main out for you.\n </p>\n <p>\n  You don't mention whether you are using IDA on the Debug or Release version of your binary. In my experience with IDA/Visual Studio, IDA will have a tough time finding main on Debug builds and does a better job on Release builds. If you compare the two different .exe files, you will see that they are vastly different. Specifically flow through Debug builds is much more complicated than through Release builds.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Chris Eagle",
            "time": "Jan 26, 2014 at 23:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In IDA, view 'functions' and look for 'start'.\n </p>\n <p>\n  See anything?\n </p>\n <p>\n  Sometimes the IDA signatures can't identify the main() function. In this case, you will have to trace it manually from the program's Entry Point, though the sigs have improved over the years, they usually are able to identify main correctly.\n </p>\n <p>\n  How you get to main() also depends also on whether you are linking to the standard Visual Studios libraries or not (I can't remember if the Empty Project does by default or not).\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "fileoffset",
            "time": "Jan 13, 2014 at 3:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mark",
                    "text": "<span class=\"comment-copy\">The entry point should be the main function right? If that is the case is the start function the main?</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">The entry point is not always the main function, no. The compiler usually has some code that it runs before and after main(). One example is the initialization/construction of static globals.</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">I don't have IDA handy, someone can correct me please if I'm wrong but I think from memory that 'start' should point to what IDA identifies as the 'main' function, i.e IDA tries to skip the autogenerated code around the user code, since it knows that most researchers are more interested in user code rather than standard library code.</span>",
                    "time": null
                }
            ]
        }
    ]
}