{
    "title": "LoadLibrary from memory",
    "link": "https://reverseengineering.stackexchange.com/questions/6423/loadlibrary-from-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use\n  <a href=\"http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/\" rel=\"nofollow\">\n   http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/\n  </a>\n  to loadlibrary from memory.\nbut when use in my code \"throw\" program crashing.\nWhat's the problem?\n </p>\n <p>\n  code i use like this:\n </p>\n <pre><code>#include <excpt.h>\n#include <windows.h>\n void func()\n{\n __try{\n  MessageBoxA(0,\"try\",\"try\",0);\n  if (1)\n  {\n   throw 10;\n  }\n }__finally{\n  MessageBoxA(0,\"finally\",\"finally\",0);\n }\n}\nvoid DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)\n{\n try\n {\n  func();\n }\n catch(int a)\n {\n  MessageBoxA(0,\"catch\",\"catch\",0);\n }\n</code></pre>\n <p>\n  when call \"throw 10;\" program crashing.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c++",
        "dll",
        "pe"
    ],
    "user": "user2522767",
    "time": "Oct 11, 2014 at 6:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The answer differs on x86 and x64, I'm only going to answer for x86.\n </p>\n <p>\n  There are various types of exception dispatching mechanisms. Your code uses SEH.\n </p>\n <p>\n  As SEH was abused in\n  <a href=\"https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/\" rel=\"nofollow\">\n   exploits\n  </a>\n  (e.g. MS03-026) Microsoft decided to protect against that with SafeSEH introduced in Server 2003.\n </p>\n <p>\n  <a href=\"http://sota.gen.nz/veh/seh_xp.txt\" rel=\"nofollow\">\n   http://sota.gen.nz/veh/seh_xp.txt\n  </a>\n  is an annotated decompiled version for XP.\n  \n\n  It starts in RtlDispatchException(), the function that is of concern in this problem is RtlIsValidHandler().\n </p>\n <p>\n  Firstly it calls RtlLookupFunctionTable() which looks through the PEB to find the image the handler resides in. MemoryModule does NOT add your library to the PEB lists of loaded modules - so that won't find your DLL.\n  \n\n  But after returning there is a further check - all handler must reside in memory pages marked as\n  <code>\n   SEC_IMAGE\n  </code>\n  . This value cannot be set by usermode code.\n </p>\n <p>\n  There are some ways around this:\n </p>\n <ul>\n  <li>\n   Switch to VEH exceptions\n  </li>\n  <li>\n   build a VEH handler that recognizes exception from your code (\n   <a href=\"https://github.com/DarthTon/Blackbone\" rel=\"nofollow\">\n    BlackBone\n   </a>\n   does that) and handles them\n  </li>\n  <li>\n   hook functions to lie that your DLL has the image flag.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user45891",
            "time": "Oct 11, 2014 at 14:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}