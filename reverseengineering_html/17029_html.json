{
    "title": "brute force remote nop sled memory address",
    "link": "https://reverseengineering.stackexchange.com/questions/17029/brute-force-remote-nop-sled-memory-address",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ELF x64 binary on a remote server communicates via simple socket server in C.\n </p>\n <p>\n  After overflowing the buffer (total buffer is 2000, password buffer is less), overwriting the RIP, filling with NOP sled (512 nops), inserting a reverse bind shellcode on the top of that, finding out a perfect address (without\n  <code>\n   \\x00\n  </code>\n  ) in middle of nop sled which after sliding it will execute the shellcode.\n </p>\n <ul>\n  <li>\n   <p>\n    Remote server ASLR is off;\n   </p>\n  </li>\n  <li>\n   <p>\n    Binary compiled without canary and can execute code from stack.\n   </p>\n  </li>\n  <li>\n   <p>\n    No info leak AFAIK\n   </p>\n  </li>\n </ul>\n <p>\n  I understand the many outcomes but if I decide to brute force the remote server to find the NOP-sled address.\nAny good practice for that ?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "816",
    "tags": [
        "crackme",
        "x86-64"
    ],
    "user": "James W.",
    "time": "Jul 30, 2020 at 10:39",
    "comments": [
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<html><body><span class=\"comment-copy\">\n Correct me if I'm wrong but, I don't think brute-forcing memory addresses on remote server -especially for 64-bit address space- is not feasible. Maybe restricting searching space to certain stack addresses or leaking addresses someway could help your problem. I don't heard any other intelligent search method for this type of problem.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "James W.",
            "text": "<html><body><span class=\"comment-copy\">\n take a look\n <a href=\"https://github.com/Naetw/CTF-pwn-tips#leak-stack-address\" rel=\"nofollow noreferrer\">\n  github.com/Naetw/CTF-pwn-tips#leak-stack-address\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Brute force is not the way you should look to in anything unless its your last resort. The address space of x64 is too large to get brute force to work. Look up on this technique called ROP(Return Oriented Programming). Currently you're bruteforcing the RIP, what if there's some code in the binary that will help you jump to your shellcode without bruteforcing and plus no PIE means that address is constant. When your control is getting transferred at\n  <code>\n   ret\n  </code>\n  , look at what other registers contain. You might find code such as\n  <code>\n   call eax\n  </code>\n  in the binary.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "sudhackar",
            "time": "Dec 25, 2017 at 9:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">I can share the ROPgadget output, I have stack pivot but no rop chain, I do have \"call rax\" gadget but how do I populate rax to jump to nop sled ?</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">What are the contents of the registers? Do they refer to the buffer?</span>",
                    "time": null
                },
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">registers &amp; stack <a href=\"https://hastebin.com/raw/axalohimur\" rel=\"nofollow noreferrer\">hastebin.com/raw/axalohimur</a> if you like I can edit the main question with the content</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">Can you share ROPgadget's output too?</span>",
                    "time": null
                },
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">ROPgadget &amp; ropper output <a href=\"https://hastebin.com/raw/ehadepohod\" rel=\"nofollow noreferrer\">hastebin.com/raw/ehadepohod</a></span>",
                    "time": null
                }
            ]
        }
    ]
}