{
    "title": "Can't find the password anywhere in the binary",
    "link": "https://reverseengineering.stackexchange.com/questions/19451/cant-find-the-password-anywhere-in-the-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is my first post here. I was recently involved in a capture the flag preparation test which involved decompiling an ELF 32-bit LSB executable, Intel 80386 file for Linux compiled with GCC. The binary is supposed to contain a password for the zip file provided. This is just for preparation to the actual capture the flag challenge that will take place on October 5. I was able to solve the other challenges but this seems impossible.\n </p>\n <p>\n  I uploaded the files using base64 down there.\n </p>\n <p>\n  At first I had to install GCC-multilib because I wasn't able to run the binary on a 32 bits system.\n </p>\n <p>\n  I used strings, objdump and radare2 to get an idea of what was inside the binary.\nI eventually found the main function with a strange behaviour: It calls strcompare with the input string and\n  <em>\n   \"s3cR3t_p4sSw0rD\"\n  </em>\n  but if the two strings match it prints out\n  <em>\n   \"This is not the solution you are looking for :)\"\n  </em>\n  , on the other hand, if they don't match, it calls a stringlength function over your input and if it is not 34 characters long it prints out\n  <em>\n   \"Try again :(\"\n  </em>\n  .\n </p>\n <p>\n  There's no success string, in fact in every other case the program stops.\n </p>\n <p>\n  I tried using radare debug to run the code but if I run it, prints out\n  <strong>\n   \"No debugger please!\"\n  </strong>\n  .\nI eventually found the instruction where this check seems to happen and added a\n  <em>\n   jmp\n  </em>\n  instruction to bypass the check.\nI was not able to add any breakpoint and run the program through the debugger. It just ends without printing anything.\n </p>\n <p>\n  There are some functions that contain character data but I didn't find anything useful.\n </p>\n <p>\n  Please help me find the password, I'm getting crazy over this.\n </p>\n <p>\n  Base 64 Data (Note, this is a zip file not a url...):\n  <a href=\"http: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\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "6k",
    "tags": [
        "disassembly",
        "elf",
        "gcc"
    ],
    "user": null,
    "time": "Sep 25, 2018 at 20:44",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n Hint: The program does other things besides calling the main function.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  iS\n </code>\n ,\n <code>\n  aa\n </code>\n and\n <code>\n  afl\n </code>\n are your friends. Additionally trace an execution using pintool or r2's debugger to see what \"hidden\" code is executing.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since another question was based on the same binary and the accepted answer doesn't go into detail on how to find the function responsible, here's a writeup.\nUsual stuff\n  <code>\n   $ r2 wysiNwyg; aaa\n  </code>\n </p>\n <p>\n  have a look at the list of functions(afl)\n </p>\n <pre><code>[0x080484a0]> afl\n0x080483bc    3 35           fcn.080483bc\n0x080483f0    1 6            sym.imp.strcmp\n0x08048400    1 6            sym.imp.printf\n0x08048410    1 6            sym.imp.fgets\n0x08048420    1 6            sym.imp.puts\n0x08048430    1 6            loc.imp.__gmon_start\n0x08048440    1 6            sym.imp.exit\n0x08048450    1 6            sym.imp.strlen\n0x08048460    1 6            sym.imp.__libc_start_main\n0x08048470    1 6            sym.imp.memset\n0x08048480    1 6            sym.imp.putchar\n0x08048490    1 6            sym.imp.ptrace\n0x080484a0    1 33           entry0\n0x080484d0    1 4            fcn.080484d0\n0x080484e0    4 43           fcn.080484e0\n0x08048550    3 30           entry3.fini\n0x08048570    8 43   -> 93   entry1.init\n0x0804859b    3 55           entry2.init\n0x080485d2   12 446          entry4.fini\n0x08048790    8 250          main\n</code></pre>\n <p>\n  Other than\n  <code>\n   main\n  </code>\n  ,\n  <code>\n   entry4.fini\n  </code>\n  function is quite large. Have a look at\n  <code>\n   .fini\n  </code>\n  and\n  <code>\n   .fini_array\n  </code>\n  sections from the binary(iS). Functions from\n  <code>\n   .fini_array\n  </code>\n  are called when the program is about to terminate(after main).\n </p>\n <pre><code>[0x080484a0]> iS~fini\n14 0x00000904    20 0x08048904    20 -r-x .fini\n19 0x00000c08     8 0x08049c08     8 -rw- .fini_array\n</code></pre>\n <p>\n  Seek to that address(s). Dump\n  <code>\n   .fini_array\n  </code>\n  (pxw).\n </p>\n <pre><code>[0x080484a0]> s 0x08049c08\n[0x08049c08]> pxw 0x10\n0x08049c08  0x08048550 0x080485d2 0x00000000 0x00000001  P...............\n</code></pre>\n <p>\n  <code>\n   entry4.fini\n  </code>\n  has been referenced in\n  <code>\n   .fini_array\n  </code>\n  . Go to main and disassemble. Check where the input is getting stored to\n </p>\n <pre><code>│           0x080487d5      a1409d0408     mov eax, dword [obj.stdin]  ; [0x8049d40:4]=0\n│           0x080487da      83ec04         sub esp, 4\n│           0x080487dd      50             push eax                    ; FILE *stream\n│           0x080487de      6a23           push 0x23                   ; '#' ; 35 ; int size\n│           0x080487e0      68609d0408     push 0x8049d60              ; char *s\n│           0x080487e5      e826fcffff     call sym.imp.fgets          ; char *fgets(char *s, int size, FILE *stream)\n</code></pre>\n <p>\n  Input from fgets is going to 0x8049d60. You can also name it\n  <code>\n   f input 35 @ 0x8049d60\n  </code>\n  . Check for xrefs on it\n </p>\n <pre><code>[0x08048790]> axt 0x8049d60\nentry4.fini 0x80486ec [DATA] push 0x8049d60\nmain 0x80487c8 [DATA] push 0x8049d60\nmain 0x80487e0 [DATA] push 0x8049d60\nmain 0x80487f8 [DATA] push 0x8049d60\nmain 0x8048808 [DATA] movzx eax, byte [eax + 0x8049d60]\nmain 0x8048816 [DATA] push 0x8049d60\nmain 0x8048826 [DATA] mov byte [eax + 0x8049d60], 0\nmain 0x8048835 [DATA] push 0x8049d60\nmain 0x804885b [DATA] push 0x8049d60\n</code></pre>\n <p>\n  <code>\n   entry4.fini\n  </code>\n  also references the input. Disassemble it.\n </p>\n <pre><code>│           0x080486ec      68609d0408     push 0x8049d60              ; const char *s\n│           0x080486f1      e85afdffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n│           0x080486f6      83c410         add esp, 0x10\n│           0x080486f9      83f822         cmp eax, 0x22               ; '\"' ; 34\n</code></pre>\n <p>\n  First check is if your input is 34 bytes long.\n </p>\n <pre><code>│           0x080486f9      83f822         cmp eax, 0x22               ; '\"' ; 34\n│       ┌─< 0x080486fc      7405           je 0x8048703\n│      ┌──< 0x080486fe      e988000000     jmp 0x804878b\n│      ││   ; CODE XREF from entry4.fini (0x80486fc)\n│      │└─> 0x08048703      c745f4000000.  mov dword [local_ch], 0\n│      │┌─< 0x0804870a      eb2c           jmp 0x8048738\n│      ││   ; CODE XREF from entry4.fini (0x804873c)\n│     ┌───> 0x0804870c      8d55d1         lea edx, [local_2fh]\n│     ⁝││   0x0804870f      8b45f4         mov eax, dword [local_ch]\n│     ⁝││   0x08048712      01d0           add eax, edx\n│     ⁝││   0x08048714      0fb600         movzx eax, byte [eax]\n│     ⁝││   0x08048717      0fbed0         movsx edx, al\n│     ⁝││   0x0804871a      8b45f4         mov eax, dword [local_ch]\n│     ⁝││   0x0804871d      05609d0408     add eax, 0x8049d60\n│     ⁝││   0x08048722      0fb600         movzx eax, byte [eax]\n│     ⁝││   0x08048725      83f033         xor eax, 0x33\n│     ⁝││   0x08048728      0fbec0         movsx eax, al\n│     ⁝││   0x0804872b      0fb6c0         movzx eax, al\n│     ⁝││   0x0804872e      39c2           cmp edx, eax\n│    ┌────< 0x08048730      7402           je 0x8048734\n│   ┌─────< 0x08048732      eb57           jmp 0x804878b\n│   ││⁝││   ; CODE XREF from entry4.fini (0x8048730)\n│   │└────> 0x08048734      8345f401       add dword [local_ch], 1\n│   │ ⁝││   ; CODE XREF from entry4.fini (0x804870a)\n│   │ ⁝│└─> 0x08048738      837df421       cmp dword [local_ch], 0x21  ; [0x21:4]=-1 ; '!' ; 33\n│   │ └───< 0x0804873c      7ece           jle 0x804870c\n│   │  │    0x0804873e      c745f4000000.  mov dword [local_ch], 0\n│   │  │┌─< 0x08048745      eb21           jmp 0x8048768\n</code></pre>\n <p>\n  Second check involves xor'ing each byte from\n  <code>\n   local_2fh\n  </code>\n  with 0x33 and the comparing with the input byte by byte. Start the VM to dump the memory(0x22 bytes from local_2fh) and perform the xor operation.\n </p>\n <pre><code>[0x080484a0]> s entry4.fini\n[0x080485d2]> aei\n[0x080485d2]> aeim\n[0x080485d2]> aeip\n</code></pre>\n <p>\n  Local variables are assigned up to instruction 0x08048665 for the check. Emulate and dump the values.\n </p>\n <pre><code>[0x080485d2]> aesu 0x08048665\n[0x08048659]> pcp 0x22  @ebp-0x2f \nimport struct\nbuf = struct.pack (\"34B\", *[\n0x02,0x5d,0x02,0x67,0x6c,0x07,0x5d,0x77,0x6c,0x75,0x02,\n0x5d,0x02,0x6c,0x07,0x41,0x61,0x07,0x6a,0x40,0x6c,0x07,\n0x41,0x00,0x6c,0x60,0x03,0x6c,0x00,0x07,0x40,0x6a,0x12,\n0x12])\n[0x00000041]> !python\nPython 2.7.15rc1 (default, Apr 15 2018, 21:51:34) \n[GCC 7.3.0] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import struct\n>>> buf = struct.pack (\"34B\", *[\n... 0x02,0x5d,0x02,0x67,0x6c,0x07,0x5d,0x77,0x6c,0x75,0x02,\n... 0x5d,0x02,0x6c,0x07,0x41,0x61,0x07,0x6a,0x40,0x6c,0x07,\n... 0x41,0x00,0x6c,0x60,0x03,0x6c,0x00,0x07,0x40,0x6a,0x12,\n... 0x12])\n>>> print ''.join(map(lambda x:chr(ord(x)^0x33),buf))\n1n1T_4nD_F1n1_4rR4Ys_4r3_S0_34sY!!\n</code></pre>\n <p>\n  This works\n </p>\n <pre><code>./wysiNwyg \n\n#########################################################\n### Welcome to the \"wysiNwyg\" challenge!\n###     Your task is to find out the password to be able\n###     to decrypt the password-protected zip and read\n###     the secret flag. Good Luck!!\n#########################################################\n\nPassword: 1n1T_4nD_F1n1_4rR4Ys_4r3_S0_34sY!!\nCongratulations! You just won :p\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Sep 29, 2018 at 9:42",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you're looking the wrong way. look in the functions before running main and you will find the decryption function.\n </p>\n <p>\n  when you're using the decrypt function, you get a key for the archive:\n  <code>\n   1n1T_4nD_F1n1_4rR4Ys_4r3_S0_34sY!!\n  </code>\n </p>\n <p>\n  and flag:\n  <code>\n   {FLG:4#hfoU98Y5(ButYou'llNeverKnowIt)}\n  </code>\n </p>\n <p>\n  EZ\n </p>\n <pre><code>part 1 = [2, 93, 2, 103, 108, 7, 93, 119, 108, 117, 2, 93, 2, 108, 7, 65, 97, 7, 106, 64, 108, 7, 65, 0, 108, 96, 3, 108, 0, 7, 64, 106, 18, 18, 0]     \nfor i in range(0, len(part_1) - 1):\n      print(chr(part_1[i] ^ 0x33))\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Sep 26, 2018 at 5:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}