{
    "title": "Why does MSVC x64 Compiler load addresses like this?",
    "link": "https://reverseengineering.stackexchange.com/questions/13270/why-does-msvc-x64-compiler-load-addresses-like-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Normally, in x86, to load a pointer to a null-terminated string you would use\n </p>\n <pre><code>MOV EDX, OFFSET ds:mystring\n</code></pre>\n <p>\n  In x64, however, I noticed that the compiler does it like this\n </p>\n <pre><code>lea rdx, OFFSET FLAT:$mystring ; 'it is ten'\n</code></pre>\n <p>\n  Why is that?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "261",
    "tags": [
        "x86",
        "x86-64",
        "pointer",
        "msvc"
    ],
    "user": "Cyrex Cyrex",
    "time": "Aug 12, 2016 at 11:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you disassemble the instructions for\n </p>\n <pre><code>mov edx, offset ds:mystring\n</code></pre>\n <p>\n  vs\n </p>\n <pre><code>lea rdx, offset ds:mystring\n</code></pre>\n <p>\n  You'll notice the LEA instruction length (in bytes) was smaller. Its a compiler optimization!\n </p>\n <p>\n  Or, it could be the compilers way of addressing pointer arithmetic in an easier manner.\n </p>\n <p>\n  Check out\n  <a href=\"http://www.nynaeve.net/?p=64\" rel=\"nofollow\">\n   this\n  </a>\n  for more info on both.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "grepNstepN",
            "time": "Aug 12, 2016 at 21:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">it's incorrect. <a href=\"https://godbolt.org/g/vkj2j9\" rel=\"nofollow noreferrer\"><code>mov edx, offset</code> is 5 bytes long, whereas <code>lea rax, offset</code> is 7 bytes long</a>. The 64-bit version is longer partly due to the REX prefix</span>",
                    "time": null
                },
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">check the source i cited; its a known compiler trick that also relies on whether or not $RDX is treated as a pointer in his example. Generally the compiler will do this because its usually a shorter series of bytes (if $RDX is used as a pointer, of which most C++ functions do for string operations).</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">Your link doesn't even work. Checked the <a href=\"https://web.archive.org/web/20170623015202/http://www.nynaeve.net/?p=64\" rel=\"nofollow noreferrer\">archive</a> and I don't see it says LEA is shorter anywhere. Probably I copied the wrong Godbolt link in the comment above. <a href=\"https://gcc.godbolt.org/z/_RJNKm\" rel=\"nofollow noreferrer\">Here's another one</a>. One can clearly see that the compiler outputs a longer LEA. In fact <a href=\"https://stackoverflow.com/a/48597025/995714\">there are many <code>mov reg, imm</code> forms from 5 to 10 bytes</a>. <code>mov reg, [mem]</code> will be longer if you need an SIB byte or REX prefix. Same to LEA</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">You need to read the instruction encoding from Intel's manual, not from a blog. Or check it from the real assembler output. You can also paste <code>mystring: mov edx, offset ds:mystring; lea rdx, [ds:mystring] </code> into the <a href=\"https://defuse.ca/online-x86-assembler.htm#disassembly\" rel=\"nofollow noreferrer\">only assembler</a> and see the output. The <a href=\"https://www.felixcloutier.com/x86/lea\" rel=\"nofollow noreferrer\">LEA</a> version is always longer because the immediate must be encoded as the memory displacement. There's no <code>lea reg, imm</code> version like <code>mov reg, imm</code></span>",
                    "time": null
                },
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">the link works.</span>",
                    "time": null
                }
            ]
        }
    ]
}