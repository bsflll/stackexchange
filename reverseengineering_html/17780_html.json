{
    "title": "De-obfuscation - Emulation-oriented vs Script-oriented",
    "link": "https://reverseengineering.stackexchange.com/questions/17780/de-obfuscation-emulation-oriented-vs-script-oriented",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What are the advantages of each method when employing de-obsfucation of potentially malicious code?\n </p>\n <p>\n  I've been told to always use emulators like x86emu since it doesn't actually run the code when performing the de-obsfucation but  I wonder if there are any reasons to use IDA scripts to perform this kind of task.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "325",
    "tags": [
        "ida",
        "malware",
        "ida-plugin",
        "deobfuscation"
    ],
    "user": "Trey",
    "time": "Mar 23, 2018 at 20:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The approaches you mentioned:\n </p>\n <p>\n  <strong>\n   Scripting static analysis with IDA:\n  </strong>\n  Great for removing automatically inserted bloat like PUSH EBX; add EBX, ECX; pop EBX, great for automatically finding and extracting relevant values. Sometimes a good way for decryption (if the malware just XORs stuff with 0x17 having your script do that is easier than running the decryption code in emulator).\n </p>\n <p>\n  <strong>\n   Using emulators (scripted or not)\n  </strong>\n  Great for following hyper-obfuscated code that jumps into the middle of instructions and confuses static analysis. Has limited environment model, so it will fail once the malware uses exception handling or calls APIs.\n </p>\n <p>\n  <strong>\n   Using debugger (scripted or not):\n  </strong>\n  Yes, you can do that if you are careful. Good for following the code, good for bypassing self-decryption, good for dumping. Security measures I recommend:\n </p>\n <ul>\n  <li>\n   Know your malware beforehand (google it, run it in cuckoosandbox, run it in VM in sandboxie with procmon running), so you know what to expect. Might also save you a lot of time. If all your malware does is extract/download stage2.exe into %TEMP% and run it, there is probably no reason to bother with it anyway. Go straight to stage2.exe\n  </li>\n  <li>\n   Always work within a VM that has network connections disabled.\n  </li>\n  <li>\n   Make shapshot before you start debugging, just in case. If it never returns from your F8 keypress, and you are unsure, you can return to that snapshot (but you lose your changes to IDA db!).\n  </li>\n  <li>\n   Have procmon running, so you know if your malware did anything interesting.\n  </li>\n  <li>\n   If you are very paranoid, have your VM run on a different host OS. Just in case the malware carries a $200.000 VMWare/VirtualBox 0day :-)\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "manduca",
            "time": "Mar 25, 2018 at 9:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}