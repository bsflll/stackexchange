{
    "title": "How would I go about finding an encryption key or cipher by decompiling a program?",
    "link": "https://reverseengineering.stackexchange.com/questions/11661/how-would-i-go-about-finding-an-encryption-key-or-cipher-by-decompiling-a-progra",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I became curious about how Trend Micro communicated with its servers so I gleaned some of the unique and standard HTTP headers that were being sent back and forth using Fiddler2. I created a winsock program in C++ that sends the following:\n </p>\n <pre><code>    GET /T/128/y2k-L48MLwdH0BuLxZvYxGjK5An-UV6lY772ppsBGZ3ojsPfa37NjMDonK98FPZesq5hXXOsV082oIdmeTaWURWiB4qqibZGVy8ZzCKKDLpZ9ekYPU7X4UgyBnKWFENX HTTP/1.1\n    Host: titanium80-en.url.trendmicro.com\n    User-Agent: TMUFE\n    Accept: /\n    X-TM-UF-INFO: 76/Uj3tcG7ArMH0ktdN_RiX6fLyEhB2sQWJhjJRJufMEMElv7j6EizpjjDSQd_cUW5fMormb8Q8FN4=\n    Connection: Keep-Alive\n</code></pre>\n <p>\n  Obviously I don't know what those encrypted values are because I only copied and pasted them from Fiddler to see what the server would reply with which was an encrypted string like so:\n </p>\n <pre><code>XnbdFqiy5YGldi-HnN5y7pH0kZ03J_UsH-bZ5JUi0aNEj-aa1P8cQlU9I2b77Jf-Rgd1fepEqlTp\nH_LlvWDqe0YjWKvw01M1zkXx_iAbFIm9Ld_QcUTw9cQsNIok7-cOK8wKVyDR63SVwBjebXthWKh0kBW3\nwWn3Y0D7UoGDYSeSJfLoqSroByZligLXqEZ5\n</code></pre>\n <p>\n  I need to know where in the program, once I've decompiled it using something like Cheat Engine and have the hexadecimal, I can find the encryption or encoding being used and or a key.\n </p>\n <p>\n  UPDATE: After using an encoding detector and suggestions from different people I tried decoding it as base64 but I keep getting symbols and gibberish as follows:\n  <code>\n   ÖÁ¾ä/Æ¼0\n  </code>\n  and\n  <code>\n   //GÐÅØÄ\n  </code>\n  . Any knowledge on this would be greatly appreciated. :)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "encryption",
        "decryption"
    ],
    "user": "Edward Severinsen",
    "time": "Dec 31, 2015 at 23:01",
    "comments": [
        {
            "user": "user2823000",
            "text": "<html><body><span class=\"comment-copy\">\n Usually it either means this is Base64 with a custom alphabet, or that the data is effectively binary. As Jason Geffner stated, you'd have to follow the construction of the HTTP request to determine that.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using IDA Pro, look for the strings\n  <code>\n   TMUFE\n  </code>\n  and/or\n  <code>\n   X-TM-UF-INFO\n  </code>\n  and find their cross-references. The code that references those strings is part of the code that makes those HTTP requests and handles (decrypts) the server's responses. You can thus analyze that code to determine how your program performs the decryption.\n </p>\n <p>\n  If you'd like further help, you may want to post a link to the target program (assuming it's freeware/shareware/trialware and thus shareable).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Dec 31, 2015 at 14:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Edward Severinsen",
                    "text": "<span class=\"comment-copy\">I wish it was but it's anti-virus software I paid for. Also some people have suggested it's base64 encoded but whenever I decode it I get a bunch of unintelligible symbols and weird characters. I realize this isn't necessarily the place to be asking about encoding but would you happen to know anything about that?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Even if it is a variant of Base64-encoding (for example, replacing <code>+</code> and <code>/</code> with <code>-</code> and <code>_</code>), you'd still need to decode the resulting \"Base64\"-decoded data (or as you said above, <code>ÖÁ¾ä/Æ¼0</code> and <code>//GÐÅØÄ</code>). So whether or not the data you're seeing is a variant of Base64-encoding, you'd still need to follow the advice I gave above.</span>",
                    "time": null
                }
            ]
        }
    ]
}