{
    "title": "Decompiling an executable compiled by vercel/pkg",
    "link": "https://reverseengineering.stackexchange.com/questions/30921/decompiling-an-executable-compiled-by-vercel-pkg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a .exe file that I am trying to get the source code of, After some digging I figured out that it's in node.js and was compiled using\n  <a href=\"https://github.com/vercel/pkg\" rel=\"noreferrer\">\n   vercel/pkg\n  </a>\n  \n\n  \n\n  I tried using\n  <a href=\"https://github.com/LockBlock-dev/pkg-unpacker\" rel=\"noreferrer\">\n   pkg-unpacker\n  </a>\n  however the output is all messed up and have a lot of null characters, even the node-modules modules have null characters in them, Only the *.js files have null characters, *.json are fine and are in their default format\n  \n\n  I also saw used a hex editor but that code isn't human-readable at all\n  \n\n  \n\n  Some people suggested using\n  <a href=\"https://github.com/PositiveTechnologies/ghidra_nodejs\" rel=\"noreferrer\">\n   ghidra_nodejs\n  </a>\n  which will be my next step, however I don't know how to use it or if it will work with all the weird characters in the *.js files\n  \n\n  I think that the project is obfuscated using\n  <a href=\"https://obfuscator.io/\" rel=\"noreferrer\">\n   https://obfuscator.io/\n  </a>\n  or\n  <a href=\"https://www.npmjs.com/package/javascript-obfuscator\" rel=\"noreferrer\">\n   https://www.npmjs.com/package/javascript-obfuscator\n  </a>\n  \n\n  \n\n  Any Ideas/Help is appreciated, Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ghidra",
        "decompile",
        "javascript"
    ],
    "user": "Anon",
    "time": "Sep 25, 2022 at 0:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   vercel/pkg\n  </code>\n  tool takes javascript (node.js) code, compiles it into\n  <code>\n   v8\n  </code>\n  <em>\n   bytecode\n  </em>\n  and wraps it in an executable code that matches the platform.\n </p>\n <p>\n  As the Github page of the pkg-unpacker tool states:\n </p>\n <blockquote>\n  <p>\n   This application DOES NOT decompile any code. By default pkg compiles code to V8 bytecode. Extracted files will remain in this format except for assets.\n  </p>\n </blockquote>\n <p>\n  Included\n  <code>\n   .json\n  </code>\n  files are assets, so they are decoded into their original readable form. The code remains as\n  <em>\n   v8 bytecode\n  </em>\n  .\n </p>\n <p>\n  The mentioned Ghidra plugin can disassemble and/or decompile it into readable format for analysis.\n </p>\n <p>\n  There is a detailed article about reverse engineering this type of code here:\n </p>\n <p>\n  <a href=\"https://swarm.ptsecurity.com/how-we-bypassed-bytenode-and-decompiled-node-js-bytecode-in-ghidra/\" rel=\"nofollow noreferrer\">\n   https://swarm.ptsecurity.com/how-we-bypassed-bytenode-and-decompiled-node-js-bytecode-in-ghidra/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Mar 2, 2024 at 10:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jesse Emond",
                    "text": "<span class=\"comment-copy\">Note that the ghidra plugin linked above is not up-to-date with recent V8/NodeJS versions, the repo is archived, and it seems non-trivial to expand support to newer versions given that it involves changes to the V8 snapshotting bytecode (separate from the JS V8 bytecode itself). You might find this writeup I made recently for a challenge useful to hackily reverse it to get readable V8 assembly, but heads up it is on the longer side/not strictly focused on vercel/pkg reversing: <a href=\"https://github.com/JesseEmond/blitz-2024-registration\" rel=\"nofollow noreferrer\">github.com/JesseEmond/blitz-2024-registration</a></span>",
                    "time": null
                }
            ]
        }
    ]
}