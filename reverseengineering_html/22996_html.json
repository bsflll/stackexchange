{
    "title": "Attach one debugger to a DotNet application, and a second one to a loaded DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/22996/attach-one-debugger-to-a-dotnet-application-and-a-second-one-to-a-loaded-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse an application that is using a DLL that i'm interested in.\n </p>\n <p>\n  I can properly disassemble the application itself with DnSpy, as it is a .Net application, and I can disassemble the used DLL with IDA, as it's a native C shared library.\n </p>\n <p>\n  I am using x64dbg as a debugger, and i would like to see the interactions between the application and the DLL. I can properly break on the DLL by loading the .Net app into x64Dbg, and waiting for a DLL call, and it's fine.\n </p>\n <p>\n  But the fact that x64dbg does not support .Net syntax make it very weird to play with when the flow came back from the DLL to the application, and i would like to do the following:\n </p>\n <ul>\n  <li>\n   <p>\n    Use the DnSpy build-in debugger to see what's going on on a high level with the .Net application.\n   </p>\n  </li>\n  <li>\n   <p>\n    And use x64dbg attached to the DLL to take a look at it whenever it is call by the application.\n   </p>\n  </li>\n </ul>\n <p>\n  But i can't manage to do that, since the root process (the .Net application) cannot be debugged by two debugger at the same time.\n </p>\n <p>\n  How can i setup x64dbg to intercept the DLL without attaching it to the .Net process ?\n </p>\n <p>\n  Is it even possible to do that ?\n </p>\n <p>\n  Or maybe I'm unaware of some magic tools that would help me ?\n </p>\n <p>\n  Any idea ?\n </p>\n <p>\n  Thanks :)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "dll",
        ".net"
    ],
    "user": "Guillaume",
    "time": "Jan 14, 2020 at 9:31",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n did you try windbg with sos for .NET support?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The best way to debug this in my opinion is to use WinDbg from\n  <a href=\"https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk\" rel=\"nofollow noreferrer\">\n   Windows SDK\n  </a>\n  or\n  <a href=\"https://www.microsoft.com/en-us/p/windbg-preview/9pgjgd53tn86?activetab=pivot:overviewtab\" rel=\"nofollow noreferrer\">\n   WinDbg Preview\n  </a>\n  from Windows Store. In Windows it is not possible to attach two debuggers to the same process. WinDbg supports easily debugging .NET and native processes.\n </p>\n <p>\n  To access .NET functionality you can run commands:\n </p>\n <pre><code>.loadby sos clr\n</code></pre>\n <p>\n  More details of the .NET extensions\n  <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  Improved .NET debugging with sosex 3rd party extension\n  <a href=\"http://stevestechspot.com/SOSEXV40NowAvailable.aspx\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  Common commands for WinDbg thematically grouped\n  <a href=\"http://www.windbg.info/doc/1-common-cmds.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n <p>\n  There is some learning curve to use it fully effectively but once learned it is extremely powerful debugger for .NET and native code.\n </p>\n <p>\n  If must use x64dbg then you would require a plugin that supports .NET, the currently available plugins are listed here:\n  <a href=\"https://github.com/x64dbg/x64dbg/wiki/Plugins\" rel=\"nofollow noreferrer\">\n   https://github.com/x64dbg/x64dbg/wiki/Plugins\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "chentiangemalc",
            "time": "Jan 15, 2020 at 22:56",
            "is_accepted": true,
            "comments": []
        }
    ]
}