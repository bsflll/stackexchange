{
    "title": "In X64dbg, how can I script a string write to memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/22152/in-x64dbg-how-can-i-script-a-string-write-to-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I find that I can write to memory as\n </p>\n <blockquote>\n  <p>\n   [addr] = value\n  </p>\n </blockquote>\n <p>\n  As given by the documentation at\n  <a href=\"http://help.x64dbg.com/en/latest/introduction/Input.html\" rel=\"nofollow noreferrer\">\n   http://help.x64dbg.com/en/latest/introduction/Input.html\n  </a>\n </p>\n <p>\n  And while I could work around my problem as dividing the string into several byte writes, that looks kind of ugly! Every character would be:\n </p>\n <blockquote>\n  <p>\n   byte:[addr] = charactercode\n  </p>\n </blockquote>\n <p>\n  I have not found any way except for manually entering into the memory editor to write a string/unicode string into memory. Am I missing something or is this really basic feature missing from X64dbg ?\n </p>\n <p>\n  In case there is another workaround.\nThe problem I am trying to solve is I want to set a value for GetEnvironmentVariable() for a variable that does not exist by writing a string into the buffer. I want this to happen when a breakpoint is reached by breakpoint commands.\n </p>\n <p>\n  So basically if there was any way to force setting environment variable or write a string into memory when a breakpoint is hit. I could work with that!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "debuggers",
        "x64dbg"
    ],
    "user": "Sharky",
    "time": "Sep 19, 2019 at 21:25",
    "comments": [
        {
            "user": "Sharky",
            "text": "<html><body><span class=\"comment-copy\">\n As a comment I will add that one can convert a string to bytes and add as this as well. \"set addr, #deadbabecafebeef#\" But that still requires that I convert my string to hex. I would like to not have to do that.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sharky",
            "text": "<html><body><span class=\"comment-copy\">\n I can now rule out the solution above as well. It became too long and now X86dbg splits it into several rows even though it is only one long row in the script file. Since X86dbg splits the line it becomes several commands where they will mostly all fail.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sharky",
            "text": "<html><body><span class=\"comment-copy\">\n An undocumented command \"strset\" together with \"strcpy\" can be used to set a string and copy it into memory like this 'strset strvar, \"abcd efgh\" ; strcpy ecx, strvar'. Still no way of generating a utf8 string and copying so the hunt goes on.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n I highly recommend writing a simple plugin that will do the job for you. You can easily add your own commands, see plugins.x64dbg.com\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sharky",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks @mrexodia! I'll have a look at plugins. Been meaning to get into it anyway. Since I have you here :-) Would features like this make it into master if I were to submit a PR at some time in feature? Been meaning to have a look at the x64dbg source as well. I usually prefer to extend base program functionality over plugins as I always forget which plugins I need but the base program is always there.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}