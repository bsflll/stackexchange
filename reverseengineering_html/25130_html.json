{
    "title": "Can I traverse the entire WORD array of 4 elements with QWORD PTR?",
    "link": "https://reverseengineering.stackexchange.com/questions/25130/can-i-traverse-the-entire-word-array-of-4-elements-with-qword-ptr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to change values of all\n  <code>\n   WORD\n  </code>\n  array of 4 elements by one step using\n  <code>\n   QWORD PTR\n  </code>\n </p>\n <pre><code>mov ebx, OFFSET arr ; arr is WORD of 1,2,3,4 \nxor qword ptr [ebx], 8000800080008000h ; I get error of constant value too large\n</code></pre>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "127",
    "tags": [
        "assembly"
    ],
    "user": "RedHat",
    "time": "May 27, 2020 at 13:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the\n  <code>\n   xor\n  </code>\n  specification, that you can see\n  <a href=\"https://www.felixcloutier.com/x86/xor\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , there is no version of xor with\n  <code>\n   imm64\n  </code>\n  - an immediate value of 64 bits.\n </p>\n <p>\n  You can do something like this:\n </p>\n <pre><code>mov rcx, 0x8000800080008000\nxor qword ptr [rbx], rcx\n</code></pre>\n <p>\n  Note that the register in the\n  <code>\n   xor\n  </code>\n  command must be r64 type (\n  <code>\n   rax\n  </code>\n  ,\n  <code>\n   rbx\n  </code>\n  , ...) and not the r32 type (\n  <code>\n   eax\n  </code>\n  ,\n  <code>\n   ebx\n  </code>\n  , ...)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "macro_controller",
            "time": "May 27, 2020 at 8:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RedHat",
                    "text": "<span class=\"comment-copy\">Thanks for your informative reply. Unfortunately, I am required to reverse a specific bit on each element with ONE instruction step. The first thing that came in my mind is to use qword ptr to address the entire array 4 elements ( 8 bytes) then using XOR which is the only instruction can reverse bit at once as I know as a basic student of Assembly.</span>",
                    "time": null
                },
                {
                    "user": "RedHat",
                    "text": "<span class=\"comment-copy\">I believe it could be only 2 elements be changed at a time and I tried it and it worked if I use XOR DWORD PTR [EBX], 80008000h and if I need to change the other 2 elements I should adjust the address [EBX+ or- 4].</span>",
                    "time": null
                }
            ]
        }
    ]
}