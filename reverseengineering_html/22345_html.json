{
    "title": "Is relocation table only used for absolute addresses?",
    "link": "https://reverseengineering.stackexchange.com/questions/22345/is-relocation-table-only-used-for-absolute-addresses",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reading about mapped and unmapped PE format, and how the alignment between sections changes after loading it into memory and that caused two question for me:\n </p>\n <ol>\n  <li>\n   <p>\n    is the relocation table used before the PE is loaded into memory? (just before loading)\n   </p>\n  </li>\n  <li>\n   <p>\n    how does the loader deal with relative addresses and offsets after loading it into memory considering the offsets between sections changes? for example if i have a instruction that addresses another section using relative addresses (offset from its own location), but not an absolute address, then does the loader has to deal with these relative addresses as well? if so, then this means the relocation table fixes instruction that don't use absolute addresses as well?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "682",
    "tags": [
        "windows",
        "pe",
        "memory",
        "operating-systems"
    ],
    "user": "Mery Ted",
    "time": "Oct 19, 2019 at 8:52",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Relative Virtual Address here Relative is Related to the Virtual Limits of Section do you have a an example snippet for your query the loader checks the load address  if it is preferred imagebase it skips relocation else performs fixups relocation table again uses  a base address and offsets from the Base address for each section\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Relocations are processed by the loader, just like imports and everything else in the PE header is. All of this is processed before executing the entry point. Typically speaking relocations will be initially set to the VA (virtual address) of the target using preferred image base address. Of course in many cases the binary will not be loaded at the base address, so it's a simple\n  <code>\n   reloc += (mapped_address - preferred_address)\n  </code>\n  .\n </p>\n <p>\n  For example, consider an instruction of\n  <code>\n   mov eax, 0x40100000\n  </code>\n  assuming a preferred address of\n  <code>\n   0x40000000\n  </code>\n  . The instruction bytes will be\n  <code>\n   { 0xB8, 0x00, 0x00, 0x10, 0x40 }\n  </code>\n  with offset 0x1 holding the relocation. If the binary is loaded at\n  <code>\n   0x50000000\n  </code>\n  then the offset would be\n  <code>\n   (0x50000000 - 0x40000000) = 0x10000000\n  </code>\n  . This would set our example relocation to\n  <code>\n   (0x40100000 + 0x10000000) = 0x50100000\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Pickle Rick",
            "time": "Oct 21, 2019 at 11:39",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sections are always mapped to the same location relative to each other (the section table in the file describes the layout, via the VirtualAddress field).  Only the starting address for the entire module can change.  The relocation table is generally(*) used to update absolute values according to the difference between the starting address that was specified when the program was compiled versus the starting address that is current when the file is loaded.\n </p>\n <p>\n  The file is loaded into memory first, then the starting address is passed to the relocation table parser to apply the relocations.\n </p>\n <p>\n  (*) there are special cases of individual bytes being relocated but only via hand-crafted files.  No compiler is going to produce such a thing.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Oct 20, 2019 at 4:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}