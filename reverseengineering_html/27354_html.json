{
    "title": "troublesome stack frame setup",
    "link": "https://reverseengineering.stackexchange.com/questions/27354/troublesome-stack-frame-setup",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a function with the first few instructions defined as follows:\n </p>\n <pre><code>sub  rsp, 0x80\nlea  rbp, [rsp + 0x20]\nmov  qword [rbp + 0x58], rsi\nmov  qword [rbp + 0x50], rbx\nmov  qword [rbp + 0x70], rcx\nmov  dword [rbp + 0x78], edx\nmov  eax, dword [rbp + 0x78]\ntest eax, eax\n</code></pre>\n <p>\n  So, in order we have:\n </p>\n <ol>\n  <li>\n   stack frame of\n   <code>\n    0x80\n   </code>\n   -- fine\n  </li>\n  <li>\n   some kind of structure at\n   <code>\n    RSP+0x20\n   </code>\n   -- probably\n  </li>\n  <li>\n   set some member of RBP at offset\n   <code>\n    0x58\n   </code>\n   to\n   <code>\n    RSI\n   </code>\n  </li>\n  <li>\n   the same for offset\n   <code>\n    0x50\n   </code>\n  </li>\n  <li>\n   the same for offset\n   <code>\n    0x70\n   </code>\n   -- wait what?\n   <code>\n    RBP+0x70\n   </code>\n   is\n   <code>\n    0x10\n   </code>\n   bytes beyond our stack frame.\n  </li>\n </ol>\n <p>\n  It seems like we have an on-stack structure at RBP yet it's accessing data from the caller's frame. If we were accessing data from the caller, I would have expected the compiler to use one base register for the current function (as we saw with the RBP usage) and then another register for the caller's data offsets, say some offset from RSP. I understand the compiler isn't\n  <em>\n   required\n  </em>\n  to follow that pattern, so my question is:\n </p>\n <p>\n  Is there some C or C++ that could generate this assembly sequence in practice or am I looking at weird obfuscated code?\n </p>\n <p>\n  EDIT:\nThis is a windows binary. There are two parameters to this function, RCX and RDX.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "175",
    "tags": [
        "assembly",
        "stack",
        "struct",
        "stack-variables",
        "offset"
    ],
    "user": "Chris H",
    "time": "Jun 17, 2021 at 15:30",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Since this is x64 you are looking at _fastcall calling convention i presume you know that in this convention either 6 arguments (gcc ). Or 4 arguments (msvc) are passed via registers and also these are optionally saved by callee function called as shadow space\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "wisk",
            "text": "<html><body><span class=\"comment-copy\">\n Please add more context, like what kind of function is it, EABI, etc Here's my guess: - I agree with the stack frame size - I think rbp acts as a frame pointer, which is unusual (modern compilers tend to rely only on rsp) - storing rsi/rbx make me thing saving non-volatile registers - storing rcx/edx look like Windows EABI where first param is 64-bit (ptr?) and int - re-reading the stack (edx) looks like un-optimize code (e.g. debug build) and tested against 0\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After reading up on \"shadow stack space\" as suggested by @blabb it looks like this is an unoptimized build, so the 2 parameters RDX and RCX are being saved in the caller's scratch space, presumably to make debugging easier. I got most of this information from the following post:\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/30190132/what-is-the-shadow-space-in-x64-assembly/30194393\">\n   What is the 'shadow space' in x64 assembly?\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Chris H",
            "time": "Mar 30, 2021 at 16:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}