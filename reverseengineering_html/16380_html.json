{
    "title": "Reverse code check",
    "link": "https://reverseengineering.stackexchange.com/questions/16380/reverse-code-check",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently only patching this code to return true, do you guys have any idea of how I could start making a generator to make valid codes? I can't understand the logic here.\n </p>\n <pre><code>  public static bool ValidateQrCode(string code)\n    {\n        if (code.Substring(0, 2) != \"DC\")\n        {\n            return false;\n        }\n        if (code.Length != 0x1a)\n        {\n            return false;\n        }\n        string s = code.Substring(2, 14);\n        byte[] buffer1 = new SHA256Managed().ComputeHash(Encoding.UTF8.GetBytes(s));\n        string str2 = ConvertToB36(Convert.ToInt32(buffer1[13])).PadLeft(2, '0');\n        string str3 = ConvertToB36(Convert.ToInt32(buffer1[10])).PadLeft(2, '0');\n        string str4 = ConvertToB36(Convert.ToInt32(buffer1[5])).PadLeft(2, '0');\n        string str5 = ConvertToB36(Convert.ToInt32(buffer1[0x11])).PadLeft(2, '0');\n        string str6 = ConvertToB36(Convert.ToInt32(buffer1[0x19])).PadLeft(2, '0');\n        return ((((code.Substring(0x10, 2) == str2) && (code.Substring(0x12, 2) == str3)) && ((code.Substring(20, 2) == str4) && (code.Substring(0x16, 2) == str5))) && (code.Substring(0x18, 2) == str6));\n    }\n    public static string ConvertToB36(int value)\n    {\n        string str = \"\";\n        while (value > 0)\n        {\n            str = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[value % 0x24].ToString() + str;\n            value /= 0x24;\n        }\n        return str;\n    }\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "213",
    "tags": [
        "c#"
    ],
    "user": "Aman",
    "time": "Sep 21, 2017 at 14:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well the algo is quite simple, let's try to break it down:\n </p>\n <blockquote>\n  <p>\n   if (code.Substring(0, 2) != \"DC\")\n  </p>\n </blockquote>\n <p>\n  It has to start with DC\n </p>\n <blockquote>\n  <p>\n   if (code.Length != 0x1a)\n  </p>\n </blockquote>\n <p>\n  and be of length 26 chars\n </p>\n <blockquote>\n  <p>\n   string s = code.Substring(2, 14);\n  </p>\n  <p>\n   byte[] buffer1 = new SHA256Managed().ComputeHash(Encoding.UTF8.GetBytes(s));\n  </p>\n </blockquote>\n <p>\n  then take the 14 chars starting from third (skip DC) and calculate SHA256 on it.\n </p>\n <p>\n  After that the checks are (extracted)\n </p>\n <blockquote>\n  <p>\n   string str2 = ConvertToB36(Convert.ToInt32(buffer1[13])).PadLeft(2, '0');\n  </p>\n  <p>\n   code.Substring(0x10, 2) == str2\n  </p>\n </blockquote>\n <p>\n  so value on 13 index of\n  <code>\n   SHA\n  </code>\n  has to be equal (converted to\n  <code>\n   BASE36\n  </code>\n  ) to 2 chars from the input starting from pos 16.\n </p>\n <p>\n  The rest of the checks are similar.\n </p>\n <p>\n  So your keygen would consist only the functions that you already has in the code.\n </p>\n <p>\n  So the general key is in this form (psudocode)\n </p>\n <pre><code>input = \"\"\nsha = SHA256(input)\nprint \"DC\"+input+sha[13].encode('base36')+sha[10].encode('base36')+sha[5].encode('base36')+sha[17].encode('base36')+sha[25].encode('base36')\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Aman",
                    "text": "<span class=\"comment-copy\">Thanks I didn't notice the string s took only chars from 2 to 14, I thought that the whole string was used and wasn't understanding how I could match it with the encoded base36.</span>",
                    "time": null
                }
            ]
        }
    ]
}