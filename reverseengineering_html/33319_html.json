{
    "title": "Functions in Ida are divided into many local functions, how to remove unnecessary transitions?",
    "link": "https://reverseengineering.stackexchange.com/questions/33319/functions-in-ida-are-divided-into-many-local-functions-how-to-remove-unnecessar",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am solving the\n  <a href=\"https://crackmes.one/crackme/6701d1419b533b4c22bd0d8f\" rel=\"nofollow noreferrer\">\n   crackme\n  </a>\n  And so you need to get the key, but I am doing reverse engineering for the first time and therefore I do not know how to do it, the functions in the crackme are divided into many local ones with transitions, which makes it difficult to analyze the application because it is difficult to see all the logic at once due to the fact that there are many local functions and each has one action.\nCould someone write at least some information about this, because as I already said, I am a complete 0 in this.\n  <a href=\"https://i.sstatic.net/9nkg8mLK.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/9nkg8mLK.jpg\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "161",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Bak",
    "time": "Nov 26, 2024 at 19:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looks like the function is obfuscated - the pattern is pretty simple\nthe\n  <code>\n   jz\n  </code>\n  and\n  <code>\n   jnz\n  </code>\n  which are useless are jumping to the same block - so doesn't matter if the\n  <code>\n   zf\n  </code>\n  is set or unset - the line would be executed\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Z4iS9k3m.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Z4iS9k3m.png\"/>\n  </a>\n </p>\n <p>\n  Here you can see that\n  <code>\n   jz\n  </code>\n  jumps to\n  <code>\n   jnz\n  </code>\n  or\n  <code>\n   call\n  </code>\n  - the\n  <code>\n   jnz\n  </code>\n  would also go to\n  <code>\n   call\n  </code>\n  either directly or after a\n  <code>\n   nop\n  </code>\n  (which would not happen). This means the\n  <code>\n   call\n  </code>\n  instruction is eventually executed and the rest is bogus code.\n </p>\n <p>\n  You can write an IDApython script to nop this pattern out - this could clean up the bogus control flow here.\nAlthough I am pretty sure the decompilation is almost clean\n </p>\n <p>\n  The script could look something like this\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>from idautils import *\nfrom idaapi import *\nfrom idc import *\n\ndef find_redundant_jumps(head):\n    while head != BADADDR:\n        # Check if the current instruction is 'jz'\n        if print_insn_mnem(head) == \"jz\":\n            jz_target = get_operand_value(head, 0)  # Get the jump target\n            \n            # Get the next instruction\n            next_ins = next_head(head)\n            if next_ins != BADADDR and print_insn_mnem(next_ins) == \"jnz\":\n                jnz_target = get_operand_value(next_ins, 0)  # Get the jump target\n                \n                # Check if both jump targets are the same\n                if jz_target == jnz_target:\n                    print(f\"jz at {hex(head)}, jnz at {hex(next_ins)}, target: {hex(jz_target)}\")\n                    # patch with NOP - 2 + 2 + 1\n                    patch_bytes(head, b'\\x90'*5)\n\n        head = next_head(head)\n\n# start from where the cursor is\nfind_redundant_jumps(here())\n</code></pre>\n <p>\n  I see that there are other obfuscation patterns - you can extend this script to clean those as well.\n </p>\n <p>\n  A bit more detailed info\n </p>\n <p>\n  Every function is\n  <code>\n   .text\n  </code>\n  has been redirected to an address in\n  <code>\n   .AkNw2Lq\n  </code>\n  <a href=\"https://i.sstatic.net/nuiYdj6P.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/nuiYdj6P.png\"/>\n  </a>\n  Additionally all functions\n  <code>\n   .AkNw2Lq\n  </code>\n  are obfuscated with the technique mentioned above and more. You'll need to look for patterns where the next instruction does exact opposite of the current instruction and clean them up. This answer is not a full writeup but to an extent just\n  <code>\n   nop\n  </code>\n  ing such ops will reduce the decompilation to a cleaner version\n </p>\n <p>\n  Click on an instruction where you see such obfuscation and run this\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>from idautils import *\nfrom idaapi import *\nfrom idc import *\n\nopposite = {\n    'jz': 'jnz',\n    'jnz': 'jz',\n    'add': 'sub',\n    'sub': 'add',\n    'neg': 'neg',\n    'not': 'not',\n    'pushf': 'popf',\n    'popf': 'pushf',\n    'inc': 'dec',\n    'dec': 'inc',\n    'shr': 'shl',\n    'shl': 'shr',\n    'sar': 'shl',\n    'xor': 'xor',\n    'bswap': 'bswap',\n}\n\ndef find_and_fix(head):\n    while head != BADADDR:\n        # Check if the current instruction is known to be redundant\n        if print_insn_mnem(head) in opposite:\n            # Get the next instruction\n            next_ins = next_head(head)\n            \n            # Check if the next instruction is the opposite of the current instruction\n            if next_ins != BADADDR and print_insn_mnem(next_ins) == opposite[print_insn_mnem(head)]:\n                    if all(get_operand_value(next_ins, i) == get_operand_value(head, i) for i in range(2)):\n                        patch_bytes(head, b'\\x90'*((next_ins - head)*2))\n\n        head = next_head(head)\n\n# start from where the cursor is\nfind_and_fix(here())\n\ndef pushf_popf(head):\n     while head != BADADDR:\n          if print_insn_mnem(head) == 'pushf':\n               curr_head = head\n               while print_insn_mnem(curr_head) != 'popf':\n                    curr_head = next_head(curr_head)\n               patch_bytes(head, b'\\x90'*((curr_head - head)+2))\n          head = next_head(head)\n\n\npushf_popf(here())\n</code></pre>\n <p>\n  After running this I see another pattern for obfuscating some ops.\n </p>\n <p>\n  TLDR - the binary has a new segment that has code copied from\n  <code>\n   .text\n  </code>\n  with each line re-written to do bogus ops with some redundant opposite operations. The python script cleans these ops and tries to make the decompilation cleaner. The script keeps scanning until disassembly is possible. Another trick is adding weird bytes in the code - which this script does not fix.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "hold-me",
            "time": "Nov 29, 2024 at 6:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "the busybee",
                    "text": "<span class=\"comment-copy\">While this cleans up a <i>single function</i>, this does not answer how to resolve many little functions into one.</span>",
                    "time": null
                },
                {
                    "user": "hold-me",
                    "text": "<span class=\"comment-copy\">@thebusybee the functions are not divided as far as I can see - All functions in <code>.text</code> have been re-routed to a new segment with obfuscated version of the same code.</span>",
                    "time": null
                },
                {
                    "user": "the busybee",
                    "text": "<span class=\"comment-copy\">Do you see more than we in the screenshot?</span>",
                    "time": null
                },
                {
                    "user": "hold-me",
                    "text": "<span class=\"comment-copy\">@thebusybee Yes - I downloaded the sample - cleaned it with the script above to get a very good decompilation with very few minor fixes.</span>",
                    "time": null
                },
                {
                    "user": "Bak",
                    "text": "<span class=\"comment-copy\">@hold-me Bro, you are the best. Thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not going to solve this, but I'm going to question your approach a bit.\n </p>\n <p>\n  After inspecting this executable I observe there the following\n </p>\n <ul>\n  <li>\n   It is written in C++ using std namespace (which some people see as obfuscation by itself)\n  </li>\n  <li>\n   It has some different obfuscations, including allegedly bogus arithmetical operations, control flow complexities, garbage code, and what not\n  </li>\n </ul>\n <p>\n  Reverse engineering it straight forward, while theoretically possible, looks not too-much practical. Should you choose this approach you'll need to understand and reverse the obfuscations back with patching one by one: for example patching instruction sequences\n  <code>\n   pushf+popf, xor dst, value + xor dst value, inc dst + dec dst, jz destination + jnz same_destination\n  </code>\n  that actually doing nothing, with nops and observing intermediate results. This can be done with scripting capabilities of your favorite disassembler/decompiler, for example IDAPython for IDA you're using (btw ChatGPT generates such a scripts quite good when asked properly, and\n  <a href=\"https://reverseengineering.stackexchange.com/users/46071/hold-me\">\n   hold-me\n  </a>\n  did exactly that in his great answer while I wrote mine).\n </p>\n <p>\n  If I would try to solve this crackme I'd try to use\n  <a href=\"https://angr.io\" rel=\"nofollow noreferrer\">\n   angr\n  </a>\n  to avoid all the burden. You can see some examples of its usage for crackmes here, in its\n  <a href=\"https://docs.angr.io/en/stable/appendix/more-examples.html\" rel=\"nofollow noreferrer\">\n   official documentation\n  </a>\n  or other tutorials like\n  <a href=\"https://github.com/Hustcw/Angr_Tutorial_For_CTF/tree/master\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  .\n </p>\n <p>\n  This excellent tool uses so called\n  <a href=\"https://www-verimag.imag.fr/%7Emounier/Enseignement/Software_Security/ConcolicExecution.pdf\" rel=\"nofollow noreferrer\">\n   concolic execution\n  </a>\n  approach (first link from those internets of yours, search for more) and able, for example, to find a code path that avoids execution of specific address like\n  <a href=\"https://github.com/Hustcw/Angr_Tutorial_For_CTF/blob/master/solutions/01_angr_avoid.py\" rel=\"nofollow noreferrer\">\n   this one\n  </a>\n  - it finds a solution that avoids printing \"failing\" result and passes through print of the \"good\" one.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Nov 27, 2024 at 14:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}