{
    "title": "Ghidra 11.0 - What does Function > Analyze Stack option do?",
    "link": "https://reverseengineering.stackexchange.com/questions/32727/ghidra-11-0-what-does-function-analyze-stack-option-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Greetings ladies & gentlemen,\n </p>\n <p>\n  I am but a novice at both Ghidra and Reverse Engineering in general. Forgive me if you think this question is dumb or obvious to answer :)\n </p>\n <p>\n  While attempting to solve a CTF RE challenge using Ghidra, the disassembler gave me the following output for one of the function's stack frame:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/qF2Oh.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/qF2Oh.png\"/>\n  </a>\n </p>\n <p>\n  Correspondingly, the decompiler displays the following:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/yDY7c.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/yDY7c.png\"/>\n  </a>\n </p>\n <p>\n  From both the assembly and pseudo-C output I assumed that the function takes in 2 parameters\n  <code>\n   param_1\n  </code>\n  <code>\n   param_2\n  </code>\n  and has 6 local variables, one of which is rather peculiar -\n  <code>\n   in_stack_0000000c\n  </code>\n  . This variable is indeed used by the binary and it looks a local variable, but I didn't really understand why Ghidra labeled it in such format (comparing to the common format\n  <code>\n   local_<num_of_bytes>\n  </code>\n  ) and why it wasn't displayed in the disassembler, so I tried googling for information on the format\n  <em>\n   in_stack_\n  </em>\n  but to no avail.\n </p>\n <p>\n  Another weird thing is in the Listing View, I could see some operations using\n  <code>\n   Stack[0xc]\n  </code>\n  which somewhat resemble the mentioned variable. However, I also do not know which variable\n  <code>\n   Stack[0xc]\n  </code>\n  was referring to, since it looks like a function parameter reference yet this function's parameter stops at\n  <code>\n   Stack[0x8]\n  </code>\n  .\n </p>\n <p>\n  After some time, while reading\n  <a href=\"https://nostarch.com/GhidraBook\" rel=\"nofollow noreferrer\">\n   The Ghidra Book\n  </a>\n  , I discovered that one could right-click the label\n  <code>\n   Stack[0xc]\n  </code>\n  , and scroll down to\n  <em>\n   <strong>\n    Function\n   </strong>\n  </em>\n  for stack-related options. I then select\n  <em>\n   <strong>\n    Analyze Stack\n   </strong>\n  </em>\n  , and wha-lah, the Listing View now displays an additional function parameter\n  <code>\n   param_3\n  </code>\n  , and it was at the address\n  <code>\n   Stack[0xc]\n  </code>\n  points to.\n  <code>\n   in_stack_0000000c\n  </code>\n  is also labeled as\n  <code>\n   param_3\n  </code>\n  . The snippet of the option is shown below:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/PAQpu.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/PAQpu.png\"/>\n  </a>\n </p>\n <p>\n  I've also tried searching for answers both within the book and on the Internet but have yet to succeed.\n  <strong>\n   So my question is, what does this option\n   <em>\n    Analyze Stack\n   </em>\n   actually do? And how did it dramatically change the analysis output as so?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "178",
    "tags": [
        "ghidra",
        "stack"
    ],
    "user": "dvmbCateDoinAStroll",
    "time": "Feb 12, 2024 at 10:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How well\n  <em>\n   Analyze Stack\n  </em>\n  works on any particular function in a program is based on:\n </p>\n <ul>\n  <li>\n   The calling convention selected for the given function, and,\n  </li>\n  <li>\n   How well that calling convention actually models the way that function uses the stack, passes and returns parameters, stores local variables, etc.\n  </li>\n </ul>\n <p>\n  Ghidra's definitions for the above are defined in the\n  <code>\n   .cspec\n  </code>\n  (compiler specification) files that can be found  in the directories below\n  <code>\n   ghidra/processors/\n  </code>\n  . These can be modified to suit, but that's a topic too complex to discuss here in brief.\n </p>\n <p>\n  Unless you're working with code that was built for Windows, Linux, or MacOS, using a well-known compiler like\n  <code>\n   gcc\n  </code>\n  or the Apple or Microsoft compilers and associated libraries, the corresponding\n  <code>\n   .cspec\n  </code>\n  may or may not allow for\n  <code>\n   Analyze Stack\n  </code>\n  to be of much use.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "g1l1t1",
            "time": "Feb 28, 2024 at 17:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}