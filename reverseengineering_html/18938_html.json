{
    "title": "Reversing video protocol for chinese drone so i can view the stream outside of the app",
    "link": "https://reverseengineering.stackexchange.com/questions/18938/reversing-video-protocol-for-chinese-drone-so-i-can-view-the-stream-outside-of-t",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to view the video stream of the\n  <a href=\"http://www.protocolny.com/protocol-air/drones/with-camera/vento-wifi-drone.html\" rel=\"nofollow noreferrer\">\n   vento protocol air drone\n  </a>\n  on my computer.  The final goal is to get the video stream into python or c++ for opencv; however, if i can just view it in a window that would work too.  This is my first reverse engineering project ever.\n </p>\n <p>\n  The drone communicates with the phone over wifi, It creates a hotspot which the phone connects to. Then through the\n  <a href=\"https://play.google.com/store/apps/details?id=com.udirc.rcventowifi&hl=en_US\" rel=\"nofollow noreferrer\">\n   app\n  </a>\n  you can view the video and also control the drone.  The first thing i did was port scan it and found out it had udp port 67 (for dhcp I think) and 49153. I also captured the wireless traffic between my phone when I was streaming the video, but not controlling, in an attempt to identify what protocol it was using and implement it on the pc.  In the capture it has a bunch of udp packets of length 1516 coming from the drone to the phone and a few smaller packets.  I think the bigger packets are the video. There are also a bunch of 802.11 packets being exchanged between the drone and the phone, even after the initial connection. I tried decoder the larger udp packets for a few different video streaming protocols but they all just made junk.\n  <a href=\"https://drive.google.com/open?id=1t13CABSVWU9DDBeHxcv0U1MnDJYdlMJL\" rel=\"nofollow noreferrer\">\n   Here\n  </a>\n  is a tar of the capture.\n </p>\n <p>\n  I also looked into decompiling the app.  I couldn't manage to get anything id consider usable out of it.  Every class was the exact same with a single call to another method and passed a bunch of numbers. But I couldn't decompile that class.\n </p>\n <p>\n  Also looking inside of the drone the wifi seems to be controlled with a marvell 88w8801-nmde.\n </p>\n <p>\n  While it would be great if someone just told me the protocol, i would appreciate just as much someone pointing me in the right direction as this is a good learning opportunity I think.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "840",
    "tags": [
        "disassembly",
        "android",
        "java"
    ],
    "user": "beezow doo zoppity bop bop bop",
    "time": "Jul 31, 2018 at 3:03",
    "comments": [
        {
            "user": "Rocky Raccoon",
            "text": "<html><body><span class=\"comment-copy\">\n I am trying to accomplish a similar goal, working with an Android app that contains a set of C++ shared objects that apparently handle the connection that I am trying to emulate. I just posted a related question on Stackoverflow -\n <a href=\"https://stackoverflow.com/questions/56281339/how-should-i-send-the-magic-packet-to-my-drone-with-scapy\" title=\"how should i send the magic packet to my drone with scapy\">\n  stackoverflow.com/questions/56281339/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Dowload the apk and open it in\n  <a href=\"https://github.com/skylot/jadx\" rel=\"nofollow noreferrer\">\n   jadx\n  </a>\n  or any such decompiler tool. The app is not obfuscated. package\n  <code>\n   com.lewei.lib\n  </code>\n  looks promising with classes like\n  <code>\n   VideoPlayer\n  </code>\n  ,\n  <code>\n   FlyCtrl\n  </code>\n  ,\n  <code>\n   H264Frame\n  </code>\n  etc. On looking closely it can be seen that the app is trying to load multiple native libraries using\n  <code>\n   System.loadLibrary\n  </code>\n  . These .so files can be found in\n  <code>\n   lib\n  </code>\n  directory once the apk is unzipped. You'll need a good disassembler/decompiler(like IDA) to analyze these native libraries. Also you can try to find sources for liblewei over the internet.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "sudhackar",
            "time": "Jul 31, 2018 at 9:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}