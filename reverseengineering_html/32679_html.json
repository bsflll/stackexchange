{
    "title": "How to call unexported function in a third party DLL while having its PDB?",
    "link": "https://reverseengineering.stackexchange.com/questions/32679/how-to-call-unexported-function-in-a-third-party-dll-while-having-its-pdb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new to reverse engineering and recently met with a problem:\n </p>\n <p>\n  I have the dll and pdb of a debug version third party module, but I don't have its source codes. Now I want to write a piece of C++ code to test the stability and efficiency of the interfaces of the module, among which the functions are mainly unexported.\n </p>\n <p>\n  So my question is that how can I find the address of an unexported function and correctly call it from C++ with DLL and PDB?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "97",
    "tags": [
        "c++",
        "dll",
        "functions",
        "pdb"
    ],
    "user": "Nekomiya Kasane",
    "time": "Jan 30, 2024 at 9:21",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n You can get the function address by loading the DLL in Ghidra or IDA and get the function address (minus the base address). At run-time you need to add the base address of the DLL (which may change because of ASLR) and you have the full address of the function. Assuming the function doesn't expect special calling conventions you can then call it using the pointer.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You have to:\n </p>\n <p>\n  1.\nLoad the DLL into your process.\nIn runtime, Windows'\n  <code>\n   LoadLibrary\n  </code>\n  api, will load the DLL and return a handle, which is the base address for the loaded module.\n </p>\n <p>\n  2.\nGet the address of the function you want to call from the\n  <code>\n   .pdb\n  </code>\n  , either manually or by using the provided pdb querying functions, as documented here:\n </p>\n <p>\n  <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiadatasource-loaddatafrompdb?view=vs-2022\" rel=\"nofollow noreferrer\">\n   https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiadatasource-loaddatafrompdb?view=vs-2022\n  </a>\n </p>\n <p>\n  3.\nCast the pointer to the the correct prototype and calling convention.\n </p>\n <p>\n  There is some pretty good information in this post:\n  <a href=\"https://copyprogramming.com/howto/pdb-find-calling-function-code-example#calling-a-non-exported-function-in-a-dll\" rel=\"nofollow noreferrer\">\n   https://copyprogramming.com/howto/pdb-find-calling-function-code-example#calling-a-non-exported-function-in-a-dll\n  </a>\n </p>\n <p>\n  Note that while calling a simple function only requires the correct prototype and calling convention, a C++ function may very well depend on objects that in turn may need to be allocated, initialized or constructed in some way for the call to succeed (and not crash the whole process).\nThe constructor(s) for these objects will likely (but not guaranteed to) be in the DLL.\n </p>\n <p>\n  <code>\n   .pdb\n  </code>\n  files contain more debug information than mere function pointers. There should be more clues inside.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Yotamz",
            "time": "Feb 1, 2024 at 9:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}