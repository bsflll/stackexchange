{
    "title": "How to detect obfuscator and where to dig?",
    "link": "https://reverseengineering.stackexchange.com/questions/32916/how-to-detect-obfuscator-and-where-to-dig",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an .net assembly application written on c#\n </p>\n <p>\n  Its target framework version is 4.5.2\n </p>\n <p>\n  Trying to decompile with ILSpy, mostly all files looks like this:\n </p>\n <pre class=\"lang-cs prettyprint-override\"><code>    using MyApp.Controller;\n    using MyApp.Controller.SendQuest;\n    using PureMVC.Interfaces;\n    \n    public class AutoSendQuestCommand : BaseQuestCommand\n    {\n        private delegate void a(AutoSendQuestCommand P_0, INotification notification);\n    \n        private delegate void b(AutoSendQuestCommand P_0);\n    \n        private static bool Processing;\n    \n        protected override void InternalExecute(INotification notification)\n        {\n            try\n            {\n                ((a)global::<Module>.Invoke(334))(this, notification);\n            }\n            catch\n            {\n                throw;\n            }\n        }\n    \n        private void AutoSendQuestIntenal()\n        {\n            try\n            {\n                ((b)global::<Module>.Invoke(335))(this);\n            }\n            catch\n            {\n                throw;\n            }\n        }\n    }\n</code></pre>\n <p>\n  Also, there are class Module :\n </p>\n <pre class=\"lang-cs prettyprint-override\"><code>    using System;\n    using System.IO;\n    using System.Security.AccessControl;\n    using System.Security.Principal;\n    using System.Runtime.InteropServices;\n    using System.Threading;\n    \n    internal class <Module>\n    {\n        internal static i Invoke;\n    \n        static <Module>()\n        {\n            IntPtr iUnknownForObject = Marshal.GetIUnknownForObject(typeof(global::<Module>));\n            try\n            {\n                if (IntPtr.Size == 4)\n                {\n                    g(Environment.Version.Major, iUnknownForObject);\n                }\n                else if (IntPtr.Size == 8)\n                {\n                    h(Environment.Version.Major, iUnknownForObject);\n                }\n            }\n            finally\n            {\n                Marshal.Release(iUnknownForObject);\n            }\n        }\n    \n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Auto, EntryPoint = \"GetModuleHandle\")]\n        private static extern IntPtr a(string P_0);\n    \n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Auto, EntryPoint = \"LoadLibrary\")]\n        private static extern IntPtr b(string P_0);    \n        \n        private static IntPtr d()\n        {\n            string text = ((IntPtr.Size == 4) ? \"Protect544cd51a.dll\" : \"Protect2a3d628b.dll\");\n            IntPtr intPtr = a(text);            \n            return intPtr;\n        }\n    \n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Ansi, EntryPoint = \"GetProcAddress\", ExactSpelling = true)]\n        private static extern IntPtr e(IntPtr P_0, string P_1);\n    \n        private static Delegate f(string P_0, Type P_1)\n        {\n            return Marshal.GetDelegateForFunctionPointer(e(d(), P_0), P_1);\n        }\n    \n        private static bool g(int P_0, IntPtr P_1)\n        {\n            return ((a)f(\"P0\", typeof(a)))(P_0, P_1);\n        }\n    \n        private static bool h(int P_0, IntPtr P_1)\n        {\n            return ((a)f(\"P0\", typeof(a)))(P_0, P_1);\n        }\n    }\n</code></pre>\n <p>\n  And, finally in resources there are those dll files\n  <strong>\n   Protect544cd51a.dll and Protect2a3d628b.dll\n  </strong>\n  (their content not readable)\n </p>\n <p>\n  I understand that each delegate calls some function like this\n </p>\n <pre class=\"lang-cs prettyprint-override\"><code>    ((a)global::<Module>.Invoke(334))(this, notification);\n</code></pre>\n <p>\n  and then class Module check if system is 32bit or 64bit\n </p>\n <p>\n  and then loads code from Protect544cd51a.dll (32bit) or from Protect2a3d628b.dll (64bit) by the number parameter (334 or 335)\n </p>\n <p>\n  But how can I see the native code, what obfuscator is this? where to dig ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "237",
    "tags": [
        "dll",
        "deobfuscation",
        ".net"
    ],
    "user": "Alex",
    "time": "May 12, 2024 at 1:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You could try dnSpyEx (\n  <a href=\"https://github.com/dnSpyEx/dnSpy\" rel=\"nofollow noreferrer\">\n   dnSpyEx\n  </a>\n  ) which is a bit more useful for .net binaries than ILSpy.\n </p>\n <p>\n  The dlls mentioned are most likely stored in the resources and you can dump/save them and then analyze the native code with a disassembler such as IDA Pro if the binaries are native or in case the dlls are .net binaries feed them back to dnSpyEx to see what they are doing in the rest of the execution process.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "rotem.salinas",
            "time": "May 5, 2024 at 11:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rotem.salinas",
                    "text": "<span class=\"comment-copy\">btw this seems to be Lumma Stealer.</span>",
                    "time": null
                },
                {
                    "user": "Alex",
                    "text": "<span class=\"comment-copy\">Its not stealer, its game bot for multiaccounting.  dnSpyEx show the same result as ILSpy</span>",
                    "time": null
                },
                {
                    "user": "Alex",
                    "text": "<span class=\"comment-copy\">i downloaded those dlls from resources. They are totally not readable. They contain all code i need, for sure. Is there another ways to explore?</span>",
                    "time": null
                },
                {
                    "user": "rotem.salinas",
                    "text": "<span class=\"comment-copy\">@Alex the resources (at least the ones I am looking at) looks to be encrypted, you have to look in the code (or debug) in order to see how they are being decrypted/decoded in order to get a valid file to work with that actually contains code. be careful because I see this as being malware in several platforms. I would use a vm.</span>",
                    "time": null
                }
            ]
        }
    ]
}