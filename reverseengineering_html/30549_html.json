{
    "title": "Why is JMP ESP required in buffer overflow?",
    "link": "https://reverseengineering.stackexchange.com/questions/30549/why-is-jmp-esp-required-in-buffer-overflow",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reading\n  <a href=\"https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/buffer-overflow\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  article by Hackers Grimoire on Windows buffer overflow attacks.\n </p>\n <p>\n  The article made sense, except for the part where the author searched for a DLL (.dll) file which contained a\n  <code>\n   JMP ESP\n  </code>\n  instruction. I understood the other requirements, such as ensuring the DLL was not protected with DEP, ASLR etc...\n </p>\n <p>\n  Why was it necessary to find a DLL file with\n  <code>\n   JMP ESP\n  </code>\n  and note its memory address?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "buffer-overflow",
        "esp"
    ],
    "user": "securityauditor",
    "time": "Jun 23, 2022 at 21:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem is that the instruction pointer will always follow the program flow, unless you can alter it. They key time to alter it is on the return from a function, when the saved instruction pointer is popped off the stack into\n  <code>\n   eip\n  </code>\n  . If you can overwrite the saved instruction pointer you can redirect program execution.\n </p>\n <p>\n  Finding a\n  <code>\n   jmp esp\n  </code>\n  at a semi-predictable place in memory allows you to redirect execution to the top of the stack reliably.\n </p>\n <p>\n  So the process would be something like:\n </p>\n <ul>\n  <li>\n   Overwrite saved instruction pointer (ebp+4) on the stack with the address of\n   <code>\n    jmp esp\n   </code>\n   in the .dll.\n  </li>\n  <li>\n   When the function returns, execution continues at the\n   <code>\n    jmp esp\n   </code>\n   instruction.\n  </li>\n  <li>\n   The\n   <code>\n    jmp esp\n   </code>\n   then redirects execution to the top of the stack where your payload is waiting.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jun 23, 2022 at 23:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}