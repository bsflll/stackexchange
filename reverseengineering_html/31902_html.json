{
    "title": "How to unpack emotet with x64dbg and do dynamic analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/31902/how-to-unpack-emotet-with-x64dbg-and-do-dynamic-analysis",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am a beginner at malware analysis. I have been trying to analyze Emotet using X64DBG. I followed the steps below and succeeded once, but when I repeated the same steps, I failed. Can you tell me if my approach is appropriate?\n </p>\n <ol>\n  <li>\n   <p>\n    I run Emotet with arguments given to\n    <code>\n     rundll32.exe\n    </code>\n    using X64DBG. The argument is\n    <code>\n     DllRegisterServer\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    I set a breakpoint at\n    <code>\n     NtResumeThread\n    </code>\n    to prevent the child process created by Emotet from executing.\n   </p>\n  </li>\n  <li>\n   <p>\n    I start a new instance of x64dbg and attach it to the child process. I set a\n    <code>\n     Load DLL\n    </code>\n    breakpoint to prevent execution from proceeding when it detaches from the parent process.\n   </p>\n  </li>\n  <li>\n   <p>\n    In the child process's x64dbg, I set a breakpoint at\n    <code>\n     VirtualAlloc\n    </code>\n    to identify where the unpacked executable is expanded.\n   </p>\n  </li>\n  <li>\n   <p>\n    I set a breakpoint at the location identified in\n    <strong>\n     step 4\n    </strong>\n    to stop just before execution after unpacking is complete.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "82",
    "tags": [
        "debugging",
        "dll",
        "unpacking"
    ],
    "user": "KOT",
    "time": "Jun 4, 2023 at 2:34",
    "comments": [],
    "answers_data": []
}