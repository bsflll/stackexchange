{
    "title": "Which IDA Pro Signature should be used for Borland Delphi 6.0-7.0 binaries as reported in PEiD?",
    "link": "https://reverseengineering.stackexchange.com/questions/2873/which-ida-pro-signature-should-be-used-for-borland-delphi-6-0-7-0-binaries-as-re",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently reverse engineering a binary written in Borland Delphi 6.0-7.0 as reported by PEiD. Is there a recommended signature to use when looking at this binary in IDA Pro? I currently am using the bds signature.  Thanks !\n </p>\n</div>\n</body></html>",
    "votes": "18",
    "answers": 3,
    "views": "15k",
    "tags": [
        "disassembly",
        "ida",
        "malware"
    ],
    "user": "b_r0g",
    "time": "Oct 3, 2013 at 12:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is important to understand that PEiD could potentially be identifying the wrong version of Delphi. While Delphi 6/7 are very similar (and frankly, all the way up to Delphi 2007 are very similar), you may be looking at a binary created with Delphi 2009 or newer.\n </p>\n <p>\n  This is relevant because\n  <a href=\"http://edn.embarcadero.com/article/38980\" rel=\"nofollow noreferrer\">\n   Delphi 2009 introduced native unicode string support\n  </a>\n  and mapped the generic type\n  <code>\n   string\n  </code>\n  to\n  <code>\n   UnicodeString\n  </code>\n  , by default, which can affect string analysis. Delphi 2007 and earlier did not have native support for unicode strings.\n </p>\n <p>\n  To complicate things slightly more, Delphi XE2 added 64-bit compilation support. So when dealing with a newer Delphi compiled binary, this may be relevant. (Delphi releases have been called Delphi 1-7, 2005, 2006, 2007, 2009, 2010, XE, XE2, XE3, XE4, and the latest is XE5). BDS stands for \"Borland Developer Studio\", although Delphi was later known as CodeGear Delphi and is now officially known as Embarcadero Delphi.\n </p>\n <p>\n  There's\n  <a href=\"https://stackoverflow.com/a/8460108/12458\">\n   also this great answer on StackOverflow\n  </a>\n  that covers the differences between different Delphi versions.\n </p>\n <p>\n  And in fact, on the\n  <a href=\"http://www.itwriting.com/blog/5966-embarcadero-adopts-open-source-clang-for-future-c-versions.html\" rel=\"nofollow noreferrer\">\n   Delphi and C++ Builder roadmap is a plan to move the Delphi compiler to Clang/LLVM\n  </a>\n  (their iOS and Android compilers are currently using LLVM, but not the Windows compilers...yet). So store that bit of trivia away for future decompilation...\n </p>\n <p>\n  I looked at\n  <a href=\"http://tuts4you.com/download.php?view.3518\" rel=\"nofollow noreferrer\">\n   \"Detect it Easy\" v0.78\n  </a>\n  ,\n  <a href=\"http://www.rdgsoft.8k.com/\" rel=\"nofollow noreferrer\">\n   RDG Packer Detector v0.7.1\n  </a>\n  , PEid, and\n  <a href=\"http://exeinfo.atwebpages.com/\" rel=\"nofollow noreferrer\">\n   Exeinfo PE\n  </a>\n  0.0.3.4 Beta, and I found that\n  <strong>\n   <em>\n    only\n   </em>\n   Exeinfo PE could detect my Delphi 2010 compiled executable correctly\n  </strong>\n  :\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/RFzll.jpg\"/>\n </p>\n <p>\n  <strong>\n   On to the analysis\n  </strong>\n  . Once you've determined the correct Delphi compiler, things are often easier. Delphi GUI programs use a GUI framework called the 'VCL' (Visual Component Library). Its easy to look for the appropriate FLIRT signature by simply filtering on VCL:\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/aq8yT.jpg\"/>\n </p>\n <p>\n  Additionally, I like to also filter the FLIRT signatures on BDS as well. When looking at Delphi binaries I usually will add in the \"Extra atl/ie library\" and the \"win32 runtime\".\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/JBxDj.jpg\"/>\n </p>\n <p>\n  And finally, because Delphi creates native Windows binaries, I always make sure the mssdk32 FLIRT signature is added as well.\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/NcbAd.jpg\"/>\n </p>\n <p>\n  Good luck!\n </p>\n <p>\n  <strong>\n   UPDATE\n  </strong>\n </p>\n <p>\n  <a href=\"http://ntinfo.biz/\" rel=\"nofollow noreferrer\">\n   Detect It Easy v0.79 and newer\n  </a>\n  can correctly detect Delphi versions up through XE6\n </p>\n</div>\n</body></html>",
            "votes": "17",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Signature you are referring to are\n  <strong>\n   Fast Library Identification and Recognition Technology\n  </strong>\n  , which is know as\n  <strong>\n   FLIRT\n  </strong>\n  . IDA ships wit most common Windows compilers, plus several non-Windows signatures.\n </p>\n <p>\n  When binary is opened, IDA will try to apply\n  <em>\n   start up\n  </em>\n  signature files. Evidently, the entry point of the code is indicative enough to be able to identify complier used for given binary. If IDA successfully determines compiler used for stated binary, then it will load the signature files for corresponding compiler libraries and apply it to the remainder of the code.\n </p>\n <p>\n  The signatures that IDA come with are for the most part associated with proprietary compilers such as Microsoft's Visual C++ and Borland Delphi. However, for the precise pattern matching you will need to generate signature files for each different version of the library.\n </p>\n <p>\n  To overcome this hurdle, Hex-Rays makes tools available that allow you to generate your own signatures from static libraries.\n  <strong>\n   Fast Library Acquisition for Identification and Recognition\n  </strong>\n  <em>\n   (FLAIR)\n  </em>\n  tool set is distributed to authorized (licensed) customers. Version of FLAIR needs to correspond to the version of IDA. The signature creation process is straight forward:\n </p>\n <ol>\n  <li>\n   Get the copy of the static library.\n  </li>\n  <li>\n   Utilize FLAIR parser to create a pattern file.\n  </li>\n  <li>\n   Run\n   <em>\n    sigmake.exe\n   </em>\n   to convert the pattern file into signature file\n  </li>\n  <li>\n   Install new signature file by copying to\n   <em>\n    IDADIR/sig\n   </em>\n   directory.\n  </li>\n </ol>\n <p>\n  In order to apply signature files manually, you should go to File->Load File->FLIRT Signature File, which will pop up dialog box with all of the signature files installed into\n  <em>\n   IDADIR/sig\n  </em>\n  directory. Select a signature you would like to use and click OK.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "PSS",
            "time": "Nov 6, 2013 at 5:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Also a powerful tool when dealing with Delphi is IDR :\n  <a href=\"http://kpnc.org/idr32/en/\" rel=\"nofollow\">\n   IDR\n  </a>\n  (Interactive Delphi Reconstructor).\n </p>\n <p>\n  You can export the result of this tool to use it with IDA pro.\n </p>\n <p>\n  Just don't forget to download the coresponding signature for your binary\n  <a href=\"http://kpnc.org/idr32/en/download.htm\" rel=\"nofollow\">\n   http://kpnc.org/idr32/en/download.htm\n  </a>\n </p>\n <p>\n  See also this\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2716/special-properties-of-delphi-object-pascal-executables/2726\">\n   post\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Maijin",
            "time": "Jun 20, 2014 at 22:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}