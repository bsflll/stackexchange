{
    "title": "Learning fine grained analysis in Radare with `a`?",
    "link": "https://reverseengineering.stackexchange.com/questions/19894/learning-fine-grained-analysis-in-radare-with-a",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The Radare community generally seems to look down upon simply running\n  <code>\n   AAA\n  </code>\n  or\n  <code>\n   AAAA\n  </code>\n  claiming that you need to instead learn the fine grained analysis and what they do. However, there seems to be no documentation on this.\n </p>\n <p>\n  Where do I learn what these do? And what that provides to me?\n </p>\n <pre><code>> a~analyze\n| aa[?]              analyze all (fcns + bbs) (aa0 to avoid sub renaming)\n| a8 [hexpairs]      analyze bytes\n| ab[b] [addr]       analyze block at given address\n| abb [len]          analyze N basic blocks in [len] (section.size by default)\n| ac [cycles]        analyze which op could be executed in [cycles]\n| ad[?]              analyze data trampoline (wip)\n| ad [from] [to]     analyze data pointers to (from-to)\n| ae[?] [expr]       analyze opcode eval expression (see ao)\n| af[?]              analyze Functions\n| ao[?] [len]        analyze Opcodes (or emulate it)\n| as[?] [num]        analyze syscall using dbg.reg\n</code></pre>\n <p>\n  It only gets more scary with\n  <code>\n   aa\n  </code>\n  ,\n </p>\n <pre><code>aab - perform basic-block analysis (\"Nucleus\" algorithm)\naac - analyze function calls from one (selected or current function)\naaf - analyze all function calls\naar - analyze data references\naad - analyze pointers to pointers references\n</code></pre>\n <p>\n  I would just like to see something pull these together. Is there a tutorial on these? It seems like there are hundreds of options providing fine grained control over analysis with little in the way to explain what they deliver shy of the words above.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "355",
    "tags": [
        "radare2",
        "static-analysis"
    ],
    "user": "Evan Carroll",
    "time": "Nov 16, 2018 at 1:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Binary analysis is not a simple thing and it is structured from a lot of different tasks that together might create a heavy and slow task. In order to get the best results, you need to understand what information would you want to know about the binary you are currently working on.\n </p>\n <p>\n  That is true, the radare2 community encouraging its users not always to choose the easy-way of\n  <code>\n   aaa\n  </code>\n  , especially in bing binaries. Alternatively, it suggests that the user would understand what he wants to achieve and will have more control of the analysis.\n </p>\n <p>\n  A detailed answer by me is available on Stack Exchange RE for the question:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/16112/how-to-make-radare2-work-for-a-large-binary/16115#16115\">\n   How to make radare2 work for a large binary?\n  </a>\n  .\n  \n\n  There is also a great post about the subject in the radare2 blog:\n  <a href=\"http://radare.today/posts/analysis-by-default/\" rel=\"nofollow noreferrer\">\n   Analysis By Default\n  </a>\n </p>\n <p>\n  For even more detailed explanations, you can always read the code since radare2 is entirely open-source.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Megabeets",
            "time": "Nov 16, 2018 at 5:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "defragger",
                    "text": "<span class=\"comment-copy\">For the more detailed discovery libr/core/cmd_anal.c is a good starting point.</span>",
                    "time": null
                }
            ]
        }
    ]
}