{
    "title": "Large number of IDA .ASM files, need list of potential mnemonics",
    "link": "https://reverseengineering.stackexchange.com/questions/8400/large-number-of-ida-asm-files-need-list-of-potential-mnemonics",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have ~20,000 .asm files from IDA pro output via hex-rays.\n </p>\n <p>\n  These were all created from known malware, and all from 32bit Windows Portable Executables.\n </p>\n <p>\n  I\n  <strong>\n   do not\n  </strong>\n  have the original executables, just the disassembled output(.asm) files.\n </p>\n <ul>\n  <li>\n   <p>\n    What I am trying to obtain is a list of any possible mnemonics (i.e. add, xor, jump, etc..) ,that IDA could output into an .asm file\n   </p>\n   <p>\n    With this list I will be attempting a machine learning/ malware classification task using grep (or similar)  to compile statistics.\n   </p>\n  </li>\n </ul>\n <p>\n  Inspecting them visually I have hand crafted a list of 30 or so ( jmp, push,mov, call, lea.. etc etc) with help from this site, which list common instructions\n  <a href=\"http://www.strchr.com/x86_machine_code_statistics\" rel=\"nofollow noreferrer\">\n   http://www.strchr.com/x86_machine_code_statistics\n  </a>\n  .\n </p>\n <p>\n  Are there any clues in the headers of these files which could assist in defining possible mnemonics ? Are these consistent across platforms or specific to some attribute of the original file?\n </p>\n <p>\n  I searched IDA pros documentation, and it seem all the functionality for this is available during the disassembling process, but I am stuck with the .asm files to parse.\n </p>\n <p>\n  similar questions with no help.\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2632/parsing-ida-pro-asm-files\">\n   Parsing IDA Pro .asm files\n  </a>\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2493/ida-pro-list-of-functions-with-instruction\">\n   IDA Pro List of Functions with Instruction\n  </a>\n </p>\n <p>\n  <strong>\n   <em>\n    sample .asm Header\n   </em>\n  </strong>\n </p>\n <pre><code>       ;\n       ; +-------------------------------------------------------------------------+\n       ; |   This file has been generated by The Interactive Disassembler (IDA)    |\n       ; |       Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>       |\n       ; |          License info:                              |\n       ; |                Microsoft                |\n       ; +-------------------------------------------------------------------------+\n       ;\n\n       ; ---------------------------------------------------------------------------\n       ; Format      : Portable executable for 80386 (PE)\n       ; Imagebase   : 400000\n       ; Section 1. (virtual address 00001000)\n       ; Virtual size              : 0002964D ( 169549.)\n       ; Section size in file          : 00029800 ( 169984.)\n       ; Offset to raw data for section: 00000400\n       ; Flags 60000020: Text Executable Readable\n       ; Alignment     : default\n       ; OS type     :  MS Windows\n       ; Application type:  Executable 32bit\n\n               include uni.inc ; see unicode subdir of ida for info on unicode\n\n               .686p\n               .mmx\n               .model flat\n\n       ; ===========================================================================\n</code></pre>\n <p>\n  sample from inside\n </p>\n <pre><code>.text:00401080                             ; ---------------------------------------------------------------------------\n.text:00401081 CC CC CC CC CC CC CC CC CC CC CC CC CC CC CC            align 10h\n.text:00401090 8B 44 24 10                             mov     eax, [esp+10h]\n.text:00401094 8B 4C 24 0C                             mov     ecx, [esp+0Ch]\n.text:00401098 8B 54 24 08                             mov     edx, [esp+8]\n.text:0040109C 56                                  push    esi\n.text:0040109D 8B 74 24 08                             mov     esi, [esp+8]\n.text:004010A1 50                                  push    eax\n.text:004010A2 51                                  push    ecx\n.text:004010A3 52                                  push    edx\n.text:004010A4 56                                  push    esi\n.text:004010A5 E8 18 1E 00 00                              call    _memcpy_s\n.text:004010AA 83 C4 10                                add     esp, 10h\n.text:004010AD 8B C6                                   mov     eax, esi\n.text:004010AF 5E                                  pop     esi\n.text:004010B0 C3                                  retn\n.text:004010B0                             ; ---------------------------------------------------------------------------\n</code></pre>\n <p>\n  Thanks for any pointers or clues as to the best way to approach this and my apologies if this isn't suitable for this forum.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "T. Scharf",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n What you want is an\n <a href=\"http://en.wikipedia.org/wiki/X86_instruction_listings\" rel=\"nofollow noreferrer\">\n  x86 opcode reference\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Are you hoping to find there is a specific set of assembler opcodes that are used by malware? I'd doubt that assertion right from the start, on the premise that malware is just regular software (which happen to do malicious things).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "T. Scharf",
            "text": "<html><body><span class=\"comment-copy\">\n @Jongware Part of a datmining competition to clssify 'families' of malware\n <a href=\"http://www.kaggle.com/c/malware-classification\" rel=\"nofollow noreferrer\">\n  kaggle.com/c/malware-classification\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As I'm working with the malware samples provided by\n  <a href=\"https://www.kaggle.com/c/malware-classification/data\" rel=\"nofollow noreferrer\">\n   kaggle\n  </a>\n  too, I faced the same problem. I found a solution by the processing in two steps, which extracts all the\n  <code>\n   mnemonics\n  </code>\n  used in the complete set.\n </p>\n <p>\n  <strong>\n   <em>\n    Note:\n   </em>\n  </strong>\n  As I'm not finished with my work yet, I'm not able to post the full script. The real implementation is realized with threading and the process takes roughly one hour for all 9 families. Addtionally the solution is not perfect and with good performance - rather a dirty fix.\n </p>\n <hr/>\n <p>\n  <strong>\n   1. Step:\n  </strong>\n  Roughly cleaning the\n  <code>\n   IDA\n  </code>\n  listing format of an\n  <code>\n   INPUT.ASM\n  </code>\n  into an\n  <code>\n   OUTPUT.ASM\n  </code>\n  (extraction from my script; see the discussion for this step\n  <a href=\"https://reverseengineering.stackexchange.com/questions/13192/convert-ida-listings-to-assembly-without-using-ida-non-free\">\n   here\n  </a>\n  )\n </p>\n <p>\n  <strong>\n   <em>\n    Note:\n   </em>\n  </strong>\n  It should be mentioned that ignore\n  <code>\n   dd\n  </code>\n  like instructions. Additionally I keep the subroutines and basic blocks delimeted by\n  <code>\n   ====\n  </code>\n  and\n  <code>\n   -----\n  </code>\n  .\n </p>\n <pre>\ngrep -E '^.text:*' INPUT.ASM | grep -v align | grep -E '^.{10,15}[0-9A-F]{2} *|=======================|-----------------------------------' | sed 's/\\t/           /g' | grep -v ' dq ' | grep -v ' dd ' | grep -v ' db ' | grep -v ' dw ' | cut -c100-200 |  sed -e 's/^[ \\t]*//' | tr -s [:blank:] | cut -d ';' -f1 > OUTPUT1.ASM\n</pre>\n <hr/>\n <p>\n  <strong>\n   2. Step:\n  </strong>\n  Process the cleaned\n  <code>\n   OUTPUT.ASM\n  </code>\n  in python (extraction from my script)\n </p>\n <pre>\n#!/usr/bin/python\nmneLocal = set()\nwith open('OUTPUT.ASM') as oFile:\n    for line in oFile.readlines():\n        mne = line.split(\" \")[0]\n        if mne[0] != '-' and mne[0] != '=' and len(mne)â‰¤6 and not mne[0].isdigit() and mne.islower():\n            mneLocal.add(mne)\nprint(mneLocal)\n</pre>\n <hr/>\n <p>\n  <strong>\n   3. Output:\n  </strong>\n  Applied on the\n  <code>\n   Ramnit\n  </code>\n  dataset\n </p>\n <pre>\nset(['jns', 'fbstp', 'jnp', 'rol', 'psrlw', 'fld1', 'jnz', 'movd', 'imul', 'lds', 'jnb', 'psrlq', 'cdq', 'psrld', 'pand', 'pfmax', 'ror', 'fxch', 'jno', 'dt', 'fisub', 'movq', 'cmps', 'arpl', 'pi2fd', 'pfmin', 'cld', 'nop', 'pf2id', 'maxss', 'add', 'jcxz', 'adc', 'fadd', 'pf2iw', 'fistp', 'setbe', 'aad', 'maxps', 'fmulp', 'movzx', 'fdivp', 'fdivr', 'femms', 'not', 'repe', 'cmc\\r\n', 'svts', 'repne', 'shr', 'pfadd', 'sgdt', 'mulps', 'leave', 'div', 'mulpd', 'shl', 'btc', 'cmp', 'rcpps', 'psubd', 'psubb', 'bts', 'btr', 'loope', 'jle', 'pandn', 'fist', 'out', 'fstcw', 'cbw\\r\n', 'xor', 'sub', 'neg', 'rep', 'lddqu', 'jge', 'movs', 'pfrcp', 'fdiv', 'jecxz', 'xchg', 'mul', 'pavgb', 'lea', 'ficom', 'pfsub', 'jz', 'addpd', 'jp', 'subsd', 'js', 'bt', 'fidiv', 'daa\\r\n', 'jo', 'clc\\r\n', 'lods', 'jg', 'ja', 'jb', 'addps', 'jl', 'cmovz', 'movsd', 'cld\\r\n', 'xorpd', 'les', 'cmovl', 'subss', 'movsx', 'xlat', 'cmova', 'cmovb', 'nop\\r\n', 'sbb', 'or', 'cmovg', 'shrd', 'fsub', 'por', 'bound', 'pop', 'setnb', 'fmul', 'pabsw', 'subps', 'minsd', 'minss', 'sti\\r\n', 'xadd', 'cdq\\r\n', 'setnl', 'retf', 'faddp', 'retn', 'rcr', 'rcl', 'pslld', 'call', 'setnz', 'das\\r\n', 'aas\\r\n', 'setns', 'setnp', 'sldt', 'ptest', 'fcomi', 'divps', 'jmp', 'rcpss', 'ffree', 'lgdt', 'pfacc', 'utes', 'shld', 'fcomp', 'fsave', 'psraw', 'aam', 'subpd', 'fstsw', 'psrad', 'pxor', 'fsubp', 'fsubr', 'fldcw', 'dec', 'fld', 'loop', 'and', 'addsd', 'cmovs', 'fldz', 'psubq', 'sal', 'int', 'lock', 'andpd', 'in', 'fucom', 'ud2\\r\n', 'addss', 'fild', 'sar', 'scas', 'psllw', 'andps', 'bswap', 'inc', 'mulss', 'paddd', 'std\\r\n', 'paddb', 'psubw', 'stc\\r\n', 'idiv', 'psllq', 'paddw', 'cli\\r\n', 'mulsd', 'paddq', 'test', 'setp', 'fiadd', 'hnt', 'orpd', 'enter', 'minps', 'bsr', 'mov', 'orps', 'fstp', 'xorps', 'setle', 'bsf', 'fo', 'pfmul', 'movss', 'setb', 'aaa\\r\n', 'setl', 'divsd', 'fimul', 'seto', 'fcom', 'hlt\\r\n', 'jbe', 'fst', 'divss', 'sets', 'push', 'pavgw', 'setz'])\n</pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}