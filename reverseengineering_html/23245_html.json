{
    "title": "Help understanding MOVSXD",
    "link": "https://reverseengineering.stackexchange.com/questions/23245/help-understanding-movsxd",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've tried reading the documentation but the functionality of this instruction is still cloudy to me. For an example, I would like to know what is stored in RDX after these instructions:\n </p>\n <pre><code>mov    edx, 0x26d1\nmov    eax, 0x40d\nadd    eax, edx\nmovsxd rdx, eax\n</code></pre>\n <p>\n  Personally, I think it is 0x0000000000002ade because I don't think the signed bit at bit position 31 was present in eax at the time. (If that makes any sense?) Any help would be appreciated and maybe an explanation that doesn't leave me confused would be awesome as well :) Thanks and have a good day!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "x86-64"
    ],
    "user": "Chase Opsahl",
    "time": "Feb 13, 2020 at 23:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  movsxd moves the dword by sign extending the dword into qword\n </p>\n <p>\n  so for this example rdx will be eax+edx\n </p>\n <pre><code>C:\\>python -c \"print( hex(0x26d1+0x40d))\n0x2ade\n</code></pre>\n <p>\n  you can use some emulators like unicorn\n  \n\n  or use a debugger and patch this instructions some place and loop\n  \n\n  or compile a small source as below to get an understanding\n  \n\n  (the code below sign extends a 16bit input  to a 32bit output )\n  \n\n  in your example a 32bit input is taken to output a 64bit\n  \n\n  there is also an 8bit input and 16 bit output\n  \n\n  movsxb(8in160ut),movsxw(16in320ut),movsxd (32in640ut)\n </p>\n <pre><code>#include <stdio.h>\nint main(void)\n{\n    printf(\"movsxd demo\n\");\n    signed short edx = 0x26d1;\n    signed short eax = 0x40d;\n    for (int i = 0; i < 25; i++ ){\n        edx = edx + eax;\n        printf(\"%x\n\",edx);\n    }\n}\n</code></pre>\n <p>\n  compiled and executed you can see how and when it gets sign extended\n </p>\n <pre><code>:\\>cl /Zi /W4 /analyze /EHsc /nologo /Od movsxd.cpp /link /release\nmovsxd.cpp\n\n:\\>movsxd.exe\nmovsxd demo\n2ade\n2eeb\n32f8\n3705\n3b12\n3f1f\n432c\n4739\n4b46\n4f53\n5360\n576d\n5b7a\n5f87\n6394\n67a1\n6bae\n6fbb\n73c8\n77d5\n7be2\n7fef\nffff83fc <<<<<<<<<<\nffff8809 <<<<<<<<<\nffff8c16 <<<<<<<<<<<<<\n</code></pre>\n <p>\n  just to show a simplified disassembly i refactored the code to eliminate  superfluous print's, assignments , etc and compiled  it with full optimizations and disassembled\n  \n\n  code\n </p>\n <pre><code>#include <stdio.h>\nint main(void)\n{\n    signed short edx = 0x26d1;\n    for (int i = 0; i < 25; i++ ){\n        edx = edx + 0x40d;\n        printf(\"%x\n\",edx);\n    }\n}\n</code></pre>\n <p>\n  disassembly see how word from si (16 bit of ESI)is sign extended to eax(32 bit)\n </p>\n <pre><code>:\\>cdb -c \"uf movsxd!main;q\" movsxd.exe |awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command 'uf movsxd!main;q'\nmovsxd!main:\n01291000 56              push    esi\n01291001 57              push    edi\n01291002 bed1260000      mov     esi,26D1h\n01291007 bf19000000      mov     edi,19h\n0129100c 0f1f4000        nop     dword ptr [eax]\n\nmovsxd!main+0x10:\n01291010 81c60d040000    add     esi,40Dh\n\n01291016 0fbfc6          movsx   eax,si <<<<<<<<<\nwhen si will be  > 0x7fff (max signed short) eax will\nget sign extended.\n\n01291019 50              push    eax\n0129101a 6890012d01      push    offset movsxd!__xt_z+0x8 (012d0190)\n0129101f e85c000000      call    movsxd!printf (01291080)\n01291024 83c408          add     esp,8\n01291027 83ef01          sub     edi,1\n0129102a 75e4            jne     movsxd!main+0x10 (01291010)\n\nmovsxd!main+0x2c:\n0129102c 5f              pop     edi\n0129102d 33c0            xor     eax,eax\n0129102f 5e              pop     esi\n01291030 c3              ret\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Feb 14, 2020 at 5:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Chase Opsahl",
                    "text": "<span class=\"comment-copy\">Thank you very much! This cleared some stuff up for me!</span>",
                    "time": null
                }
            ]
        }
    ]
}