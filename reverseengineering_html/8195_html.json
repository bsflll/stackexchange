{
    "title": "What are some methods to reversing a .kext?",
    "link": "https://reverseengineering.stackexchange.com/questions/8195/what-are-some-methods-to-reversing-a-kext",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently discovered there is no native Linux driver for the Web Cam in my computer.  However, there is a person who has taking the initiative to start a\n  <a href=\"https://github.com/patjak/bcwc_pcie\" rel=\"nofollow\">\n   github project\n  </a>\n  for a driver.  That being said, I was able to get the web cam working in a qemu guest OS running OS X (10.10), and now I'm at the point where I would like to start to analyze the .kext is question.\n </p>\n <p>\n  A quick google search revealed\n  <a href=\"https://inficererk.wordpress.com/2014/01/30/debugging-kext-with-vmware-gdb-osx-10-8-4/\" rel=\"nofollow\">\n   this\n  </a>\n  , but I am not sure if this method would still apply to OS X (10.10).\n </p>\n <p>\n  Should I try to debug the .kext on a running system, or should I just copy the .kext to my host OS (Linux) and start analyzing in a disassembler such as Hopper / Radare2?\n </p>\n <p>\n  Also I should note, from what I understand, most OS X kernel extensions are written in C++ while most if not all Linux drivers are written in C.  So would I be wasting my time reversing / analyzing this .kext?  Any help on this subject matter would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "osx"
    ],
    "user": "ipatch",
    "time": "Feb 10, 2015 at 17:05",
    "comments": [
        {
            "user": "RoraΖ",
            "text": "<html><body><span class=\"comment-copy\">\n The language its written in is slightly irrelevant.  C++ vs. C is only a matter of object oriented versus not. I guess the question comes down to what are you trying to do?  The 3rd party .kext will be different than another driver for your webcam.  I guess I'm a bit confused as to the reason you're reversing the .kext. Are you trying to verify its own security practices?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<html><body><span class=\"comment-copy\">\n @raz actually, reversing real-world C code is easier than C++. that's because of the simplicity of C. C++ can fool you sometimes.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "RoraΖ",
            "text": "<html><body><span class=\"comment-copy\">\n @AcidShout I agree the disassembly is extremely different.  But whether or not the driver is written in C++ vs. C shouldn't much matter for the overall effect it has on the system.  If that makes sense.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ipatch",
            "text": "<html><body><span class=\"comment-copy\">\n @raz I wanted to poke around the .kext because it is the \"driver\" for the Broadcom 1570 device found in most MacBook Pro's, and some MacBook Air's.  As of right now there is no Linux driver, so I thought putting the binary in a disassembler would help in understanding of the hardware.  Also there is no datasheet for the 1570 device, so it make understanding the hardware that much more fun ;)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Answering Your Question Directly\n  </strong>\n  :\n </p>\n <p>\n  You can reverse Kernal Extensions with IDA Pro, Radare2, GDB or whatever dissasembler you would like. Yes, you will have to learn what C++ structures look like once disassembled. I can't answer the \"static analysis or dynamic analysis?\" question directly, since often the answer is \"both, depending on exactly what you want.\" Some Reverse Engineers start with the static, and some start with the dynamic.\n </p>\n <p>\n  I\n  <em>\n   personally\n  </em>\n  would start with a static analysis tool because:\n </p>\n <ul>\n  <li>\n   I imagine the driver is rather large. If you don't know what you are looking for, you could spend a long, long time single stepping.\n  </li>\n  <li>\n   You will get more out of this by searching over and analyzing specific function calls in the driver. Their use will most likely be self evident in the driver once you see their relation to other functions\n  </li>\n  <li>\n   There isn't an element of obfuscation here. Nor do you need to check the\n   <em>\n    exact\n   </em>\n   position of anything in memory.\n  </li>\n  <li>\n   You are trying to rewrite a driver from this anyway, seeing things in a format that resembles source code will help that process.\n  </li>\n </ul>\n <p>\n  But to each his own. Given enough time I would go through both processes just for the sake of knowing. Also, to pull this off correctly, you will need to learn a little about Macintosh system programming.\n </p>\n <p>\n  There is a class at recon on this subject this year:\n  <a href=\"http://www.recon.cx/2015/trainingosx.html\" rel=\"noreferrer\">\n   http://www.recon.cx/2015/trainingosx.html\n  </a>\n  (once the white paper is published, it should be linked in this answer)\n </p>\n <p>\n  Here is a snippet from a book on kernal exploitation that takes you through the basics of reversing a kext with IDA pro:\n </p>\n <p>\n  <a href=\"https://books.google.com/books?id=G6Zeh_XSOqUC&pg=PA215&lpg=PA215&dq=IDA+pro+kernel+extension+mac&source=bl&ots=0y3XXMAgqH&sig=6HkJnGKmW7OugZiHo42DwOYtaY8&hl=en&sa=X&ei=93nbVIe_BYWVyQT4z4HgDw&ved=0CEIQ6AEwBQ#v=onepage&q=IDA%20pro%20kernel%20extension%20mac&f=false\" rel=\"noreferrer\">\n   https://books.google.com/books?id=G6Zeh_XSOqUC&pg=PA215&lpg=PA215&dq=IDA+pro+kernel+extension+mac&source=bl&ots=0y3XXMAgqH&sig=6HkJnGKmW7OugZiHo42DwOYtaY8&hl=en&sa=X&ei=93nbVIe_BYWVyQT4z4HgDw&ved=0CEIQ6AEwBQ#v=onepage&q=IDA%20pro%20kernel%20extension%20mac&f=false\n  </a>\n </p>\n <p>\n  <strong>\n   Regarding this particular camera:\n  </strong>\n </p>\n <p>\n  It seems that the camera in question is referenced in the conversation found here:\n  <a href=\"https://bugzilla.kernel.org/show_bug.cgi?id=71131\" rel=\"noreferrer\">\n   https://bugzilla.kernel.org/show_bug.cgi?id=71131\n  </a>\n </p>\n <p>\n  Essentially, this camera speaks over\n  <em>\n   PCI\n  </em>\n  because it does not compress its video before being sent to the system. The thread states that there is already a project underway to make a driver for the camera, which can be found at\n  <a href=\"https://github.com/patjak/bcwc_pcie\" rel=\"noreferrer\">\n   https://github.com/patjak/bcwc_pcie\n  </a>\n </p>\n <p>\n  The wiki on this site is informative, and lists some of the issues with reverse engineering this sort of driver. The wiki page found at:\n  <a href=\"https://github.com/patjak/bcwc_pcie/wiki/Mac-OS-X-driver\" rel=\"noreferrer\">\n   https://github.com/patjak/bcwc_pcie/wiki/Mac-OS-X-driver\n  </a>\n  gives some great ideas for where you should be starting on the mac side of things.\n </p>\n <p>\n  Based on their to do list, you might want to focus on helping rip the device firmware from the device itself.\n </p>\n <p>\n  <strong>\n   Regarding developing your own driver:\n  </strong>\n </p>\n <p>\n  I would start from a different direction, and reverse engineer the camera itself. Depending on the complexity of your camera, you may be able to speak to it directly without a driver over serial. You might also be able to open up the camera, and speak to it directly via a debug port (think JTAG, or even simpler.)\n </p>\n <p>\n  The first time I read your question, I thought you meant a small camera outside your computer, but I am guessing you mean a camera built into your laptop. I think in that case, you could just adapt a driver from an existing webcam, and see where it dies. I believe these cameras are fairly generic bits of hardware at this point.\n </p>\n <p>\n  Most webcam's on Linux use this driver:\n  <a href=\"https://help.ubuntu.com/community/UVC\" rel=\"noreferrer\">\n   https://help.ubuntu.com/community/UVC\n  </a>\n  , and potentially you can just run this driver and see where it dies/can't communicate with the camera. At any rate, watching the actual communications with the camera will give you a much better idea of what you need to do.\n </p>\n <p>\n  <strong>\n   Regarding the Utility of reversing a Macintosh Kernal extension:\n  </strong>\n </p>\n <p>\n  I would be less worried about the c++/C difference versus differences in system libaries, and the system call interface. It certainly wouldn't hurt to analyze the driver for your own edification, but you may find that it gets most of its work done by calling mac system libraries that don't work the same way in linux. You will be most interested in reading the parts of the driver that define the communication with the camera. At any rate, you wont be able to directly convert the KeXT into a Linux Kernal Module.\n </p>\n <p>\n  <strong>\n   My Final Advice:\n  </strong>\n </p>\n <p>\n  Instead, if your current webcam isn't working with your linux distro, I would first confirm that you have the proper generic driver, and then edit the generic driver to support your camera. You can do a pull request on the generic driver.\n </p>\n <p>\n  In most cases the communications with these cameras are very simple serial communications. I suspect that triggering an error from the generic driver will be faster than trying to decipher the mac driver.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "MrSynAckSter",
            "time": "Feb 11, 2015 at 19:57",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">The main problem seems to be that while most webcams attach to the USB bus, this one has a direct PCI interface. So any driver that encapsulates whatever protocol in USB will fail, as will all the nice USB snooping methods. I'd still expect the chip to be some standard chip with the USB part stripped, instead of a \"new\" implementation, so reading the datasheets of similar hardware by the same manufacturer, as well as understanding drivers for similar hardware, will still help.</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Wouldn't happen to be similar to this cam? <a href=\"https://bugzilla.kernel.org/show_bug.cgi?id=71131\" rel=\"nofollow noreferrer\">bugzilla.kernel.org/show_bug.cgi?id=71131</a></span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Seems to be exactly this cam.</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">updated the answer</span>",
                    "time": null
                },
                {
                    "user": "ipatch",
                    "text": "<span class=\"comment-copy\">@baordog Yeah you are correct in saying the camera in question is the Broadcom 1570 PCI device.  As for writing a FW extraction utility, it appears that has already been done, and it has been posted on the github project page you listed above.  Thanks for the thorough answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}