{
    "title": "Segments start address is different in IDApython when invoked thrg cmd prompt",
    "link": "https://reverseengineering.stackexchange.com/questions/12945/segments-start-address-is-different-in-idapython-when-invoked-thrg-cmd-prompt",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am able to get Segments start address, end address and all functions of a DLL through follwoing ida python script:\n </p>\n <pre><code># Get the segment's starting address\n    ea = ScreenEA()\n    print(ea)\n    print(SegStart(ea),SegEnd(ea))\n\n    callers = dict()\n    callees = dict()\n\n    # Loop through all the functions\n\n    for function_ea in Functions(SegStart(ea), SegEnd(ea)):\n\n        f_name = GetFunctionName(function_ea)\n        print(f_name)\n\n        # Create a set with all the names of the functions calling (referring to)\n        # the current one.\n        callers[f_name] = Set(map(GetFunctionName, CodeRefsTo(function_ea, 0)))\n\n        # For each of the incoming references\n        for ref_ea in CodeRefsTo(function_ea, 0):\n\n\n            # Get the name of the referring function\n            caller_name = GetFunctionName(ref_ea)\n\n            # Add the current function to the list of functions\n            # called by the referring function\n            callees[caller_name] = callees.get(caller_name, Set())\n            callees[caller_name].add(f_name)\n\n    # Get the list of all functions\n    functions = Set(callees.keys()+callers.keys())\n    total_callees=0\n\n    # For each of the functions, print the number of functions calling it and\n    # number of functions being called. In short, indegree and outdegree\n    for f in functions:\n        print('%d:%s:%d' % (len(callers.get(f, [])), f, len(callees.get(f, []))))\n        total_callees+=len(callees.get(f,[]))\n\n    print(\"\nTotal callees of \\t\"+idaapi.get_root_filename()+\"\\t: \"+str(total_callees))\n</code></pre>\n <p>\n  Script is working well when invoked inside IDA pro but if it is invoked through command prompt like below:\n </p>\n <pre><code>idaq.exe -A -S\"C:\\xxx\\segment.py\" \"C:\\fff\\yy.dll\"\n</code></pre>\n <p>\n  The output is different as below:\n </p>\n <pre><code>4294967295\n(4294967295L, 4294967295L)    \nTotal callees of    yy.dll  : 0\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "idapython",
        "dll",
        "command-line"
    ],
    "user": "user3264821",
    "time": "Jun 28, 2016 at 8:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This happens because you are starting from the\n  <code>\n   ScreenEA()\n  </code>\n  return value - this function returns the current EA in the disassembly window. When you're running from the command line it really can behave different.\n </p>\n <p>\n  To iterate over segments you can use\n  <code>\n   idautils.Segments()\n  </code>\n  function (it allows iteration over all defined segments). If you want to get the first defined segment you can use\n  <code>\n   idc.FirstSeg()\n  </code>\n  which should return the start address of the first segment. If you want to limit the work of your script to one segment you can check segment name with function\n  <code>\n   idc.SegName(ea)\n  </code>\n  , where ea is an address within the segment, for example, as follows:\n </p>\n <pre><code>import idautils\nimport idc\n\nfor s in idautils.Segments():\n    if idc.SegName(s) == \"your_segment_name\":\n         #do you work here\n</code></pre>\n <p>\n  By the way,\n  <code>\n   4294967295\n  </code>\n  in hex is\n  <code>\n   0xffffffff\n  </code>\n  which is numeric value of\n  <code>\n   idc.BADADDR\n  </code>\n  , which means invalid address or error.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Jun 28, 2016 at 12:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3264821",
                    "text": "<span class=\"comment-copy\">Thanks! but unable to pass arguments to script...idaq64  -A -S\"myscrip.py outpath.txt\" \"bin_path\" gives idc.argv[0] argument error while running the script</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">did you use it as <code>idc.argv</code> or as <code>idc.ARGV</code> ?</span>",
                    "time": null
                },
                {
                    "user": "user3264821",
                    "text": "<span class=\"comment-copy\">idc.ARGV and its working :) last doubt ! how to find hanging instructions i.e those intructions which are not under any function module in a DLL using IDAPython?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I'd suggest to ask it as different question.</span>",
                    "time": null
                }
            ]
        }
    ]
}