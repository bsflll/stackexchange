{
    "title": "Are win32api calls differentiable from real actions?",
    "link": "https://reverseengineering.stackexchange.com/questions/31897/are-win32api-calls-differentiable-from-real-actions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been tinkering with the\n  <code>\n   win32api\n  </code>\n  library on Python and interacting with Notepad. I now want to try it on an online game to automate some boring tasks but I'm scared I get banned for this.\n </p>\n <p>\n  Is for example a click generated with\n  <code>\n   PostMessageA()\n  </code>\n  differentiable from a real click ? And if yes, is it common to check for this ?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "191",
    "tags": [
        "python",
        "winapi"
    ],
    "user": "Mostunique",
    "time": "May 25, 2023 at 14:53",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Faking the click itself may be not so difficult, but the mouse movements can be used for detecting scripting activities. A script never moves a mouse like it would do a human.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If a game wants it can easily distinguish between simulated and real mouse clicks.  For example, a game can install low-level mouse hook (it will not require admin privileges) and look at\n  <code>\n   LLMHF_INJECTED\n  </code>\n  flag in the\n  <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-msllhookstruct\" rel=\"nofollow noreferrer\">\n   <code>\n    MSLLHOOKSTRUCT\n   </code>\n  </a>\n  structure available inside LowLevelMouseProc callback function.\n  \n\n  To deceive a game, you need a button press simulation being generated inside a HID driver.\n </p>\n <p>\n  For example, Logitech gaming series mice/keyboards have such a possibility: they execute user-written Lua scripts inside its official mouse/keyboard driver.  The driver is native: it's written by Logitech and signed by Microsoft, it is bundled with GHub Logitech software.  Simulated from a Lua script button clicks are indistinguishable from real clicks.\n </p>\n <p>\n  Another option is to use a self-made external hardware device: a USB mouse device that listens from another COM/USB-port what actions it should do.  Since the device is a real mouse handled by a standard Microsoft HID driver, a game would be unable to detect the fake.\n </p>\n <p>\n  Button click timing is another problem when you are trying to avoid being banned for using any kind of mouse automation.  You should use realistic delay intervals between simulated button press/release events without a repeatable pattern.  In other words, you should use some randomization, in Logitech Lua scripts you can use\n  <code>\n   Sleep(math.random(min_delay, max_delay))\n  </code>\n  for this purpose.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rohit Gupta",
            "time": "May 25, 2023 at 7:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mostunique",
                    "text": "<span class=\"comment-copy\">The thing is I'd like to be able to use my program in the background while still using my computer, and I think what you described with Lua can only interact with the focus/foreground window. And I think it isn't possible to fake the LLMHF_INFECTED flag</span>",
                    "time": null
                },
                {
                    "user": "ESkri",
                    "text": "<span class=\"comment-copy\">In other words, you want to send a mouse click event to a background window?  It might be not working at all even if game does not make any attempt to detect automation.</span>",
                    "time": null
                }
            ]
        }
    ]
}