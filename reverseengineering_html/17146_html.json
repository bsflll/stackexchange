{
    "title": "Basic tampering protection",
    "link": "https://reverseengineering.stackexchange.com/questions/17146/basic-tampering-protection",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to create a basic program that has memory tampering protection, however it always says it's correct, even if I nop the whole license check function in Ollydbg or change and rebuild the code.\n </p>\n <p>\n  I'm following the Surreptitious Software book, and wrote the following program:\n </p>\n <pre><code>#include \"stdafx.h\"\n\n#define CORRECTHASH 5131241\n\nvoid BEGIN() {}\n\nconst std::string correctlicense(\"ABC\");\n\nbool licenseCheck() {\n\n    std::cout << \"Enter license: \";\n\n    std::string license;\n    std::cin >> license;\n\n    volatile DWORD d;\n\n    // Fingerprint\n    __asm {\n        lea ebx, d\n        mov ebx, 0x050b072b\n    }\n\n    return license.compare(correctlicense) == 0;\n}\n\nUINT hash(UINT *beginAddress, UINT *endAddress) {\n\n    UINT h = *beginAddress;\n\n    for (; beginAddress <= endAddress; beginAddress++) {\n        h ^= *beginAddress;\n    }\n\n    return h;\n}\nvoid END() {}\n\n\nint main()\n{\n\n    UINT uHash = hash((UINT*)BEGIN, (UINT*)END);\n\n    std::cout << \"[Protection checks]\" << std::endl;\n    std::cout << \"Tampering: \";\n\n    if (uHash != CORRECTHASH) {\n        std::cout << \"Failed ( \" << uHash << \" )\" << std::endl;\n        system(\"PAUSE\");\n        return 0;\n    }\n    else {\n        std::cout << \"Correct\" << std::endl;\n    }\n\n    if (licenseCheck()) {\n        std::cout << \"Correct!\" << std::endl;\n    }\n    else {\n        std::cout << \"Failed!\" << std::endl;\n    }\n\n\n    system(\"PAUSE\");\n    return 0;\n}\n</code></pre>\n <p>\n  The program basically 'hashes' the code between the BEGIN function and END function, but it doesn't seem to work. The hash is always correct even after tampering.\n </p>\n <p>\n  I'm using Windows 7 and Visual studio 2017 the build/run the program.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "838",
    "tags": [
        "c++",
        "protection",
        "software-security"
    ],
    "user": "JeffreyZ",
    "time": "Jan 8, 2018 at 9:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Does the book actually use this as an example? This is not going to work in general.\n </p>\n <p>\n  The theory behind the snippet is that the code will be compiled in such a way where all of the functions are situated in the assembly language output in the same order in which they were situated in the C code. That is a broken assumption in general. The compiler is under no obligation to layout the functions in the binary in the same order in which they were laid out in the source code.\n </p>\n <p>\n  In this case I would expect that the functions\n  <code>\n   BEGIN\n  </code>\n  and\n  <code>\n   END\n  </code>\n  will be merged together into the same function via a compiler optimization known as clone detection, that it would compile to a single RETN instruction, and that the hash value would be the\n  <code>\n   UINT\n  </code>\n  corresponding to a RETN followed by padding bytes prior to the next function (if there is one).\n </p>\n <p>\n  You could figure out exactly what's going on by looking at the disassembly listing for the compiled code (or passing a flag to the compiler that caused it to emit the assembly language version).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Feb 7, 2018 at 20:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I took the code and compiled and ran it as is i get a failed result\n  \n\n  modified the CORRECTHASH to the result of first failure and i get a correct result\n </p>\n <p>\n  why would you nop the license check it simply compares xyz with ABC prints and discards it doesn't seem to have any impact on the hash function\n </p>\n <p>\n  you would either need to create a CORRECTHASH or tamper the existing hash\nit seems from looking at it a few minutes  (you can tamper the ABC to some other string too to make the correct hash)\n </p>\n <p>\n  here is the output of tampered and compiled exe\n </p>\n <pre><code>bogus key with tampered hash\n\n>licchk.exe\nEnter license: abc\nFailed!\n[Protection checks]\nTampering: Correct\nPress any key to continue . . .\n\ncorrect key with tampered hash\n>licchk.exe\nEnter license: ABC\nCorrect!\n[Protection checks]\nTampering: Correct\nPress any key to continue . . .\n\ncomaprison of unmodified and modified source code \n\n>fc licchk.cpp unmodlicchk.cpp\nComparing files licchk.cpp and UNMODLICCHK.CPP\n***** licchk.cpp\n\n#define CORRECTHASH 9480169  <<<<<<<<<<<< modified\n\n***** UNMODLICCHK.CPP\n\n#define CORRECTHASH 5364713 <<<<<<<<<< original\n\n*****  \n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Jan 8, 2018 at 8:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "JeffreyZ",
                    "text": "<span class=\"comment-copy\">Yes, but the goal is to detect tampering with the license check function. That's why I nopped the license check function to check if the protection is working. By nopping this function, it has changed so I would expect that the hash is different, but it isn't.</span>",
                    "time": null
                },
                {
                    "user": "JeffreyZ",
                    "text": "<span class=\"comment-copy\">I edited the code to make it a bit more clear what I mean.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">this question nor my answer appears to have any  relation to reverse engineering your edited code appears to have logic errors  (it will never reach license check nor will it ask for a cin &lt;&lt; but always print fail) please consider asking at code review or SO</span>",
                    "time": null
                }
            ]
        }
    ]
}