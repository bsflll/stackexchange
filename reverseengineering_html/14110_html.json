{
    "title": "IDA Pro addresses of arguments",
    "link": "https://reverseengineering.stackexchange.com/questions/14110/ida-pro-addresses-of-arguments",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am a newbie in reverse engineering and I was trying to understand this blog post:\n </p>\n <p>\n  <a href=\"http://0x0atang.github.io/reversing/2015/09/17/flareon2-concolic.html\" rel=\"nofollow noreferrer\">\n   http://0x0atang.github.io/reversing/2015/09/17/flareon2-concolic.html\n  </a>\n </p>\n <p>\n  At one point, the author says the following when looking at the arguments of a function he wants to run using symbolic execution:\n </p>\n <p>\n  Let's zoom into and find out more about the function sub_401084. It takes three arguments, namely (1) address to a buffer of bytes at 0x4010E4, which is presumbly the reference key for verification, (2) address to a user input buffer at 0x402159, and (3) the length of the user password supplied to the program.\n </p>\n <p>\n  My question is, how does he figure out the addresses of the 3 arguments? In IDA pro you just have the stack view with the offsets with respect to EBP. I have tried to do this calculation but I don't get his values. Can anyone tell me how I should reason? Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "609",
    "tags": [
        "ida",
        "disassemblers"
    ],
    "user": "Simus",
    "time": "Dec 4, 2016 at 12:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  He probably didn't : the executable is packed, ASLR is disabled and relocations are stripped. Which means the two address arguments\n  <code>\n   0x4010E4\n  </code>\n  and\n  <code>\n   0x402159\n  </code>\n  are fixed.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/7iawd.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/7iawd.png\"/>\n  </a>\n </p>\n <p>\n  There are major consequences since :\n </p>\n <ul>\n  <li>\n   the first argument\n   <code>\n    0x4010E4\n   </code>\n   is\n   <code>\n    sub_401000\n   </code>\n   (\n   <code>\n    sub_401084\n   </code>\n   caller) return address ! Since ASLR is disabled, this is a constant. You can see here :\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/S0mvn.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/S0mvn.png\"/>\n  </a>\n </p>\n <ul>\n  <li>\n   the second argument\n   <code>\n    0x402159\n   </code>\n   is a static buffer in the binary\n   <code>\n    .data\n   </code>\n   segment. Since relocations are stripped, this is also a constant.\n  </li>\n </ul>\n <p>\n  In the general case (ASLR + reloc), it's much more complicated. There is\n  <a href=\"https://reverseengineering.stackexchange.com/questions/8870/extracting-arguments-from-ida\">\n   a great SO/RE question about extractin functions args in Idapython\n  </a>\n  which then must be glued with\n  <code>\n   angr\n  </code>\n  Memory states in order to work properly.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}