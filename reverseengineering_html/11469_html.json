{
    "title": "How to get transformation formula comparing two files",
    "link": "https://reverseengineering.stackexchange.com/questions/11469/how-to-get-transformation-formula-comparing-two-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am new in this area.\n </p>\n <p>\n  <strong>\n   Scenerio:\n  </strong>\n  I am given two files and told one is ASCII and another is binary format of that ASCII file. I opened ASCII file and saw like-\n </p>\n <pre><code>0\n76\n1.040000\n1\n1\n1.000000\n514039\n5058933\n514808\n5059861\n2 ********* TIMESTEP\n0.750000\n3\n1\n328882\n1\n514712.000000\n5059091.500000\n514714.062500\n5059088.500000\n3.826391\n2.000000\n13.882331\n0.000000\n2 ********* TIMESTEP\n1.500000\n..........................................\n</code></pre>\n <p>\n  And open corresponding binary file (hex)\n </p>\n <pre><coden.....................................................\n</code></pre>\n <p>\n  <strong>\n   Problem-\n  </strong>\n </p>\n <p>\n  Is there any way to find how this binary file is crated from that ascii?\n </p>\n <p>\n  I know all of ASCII file what reading means what from a pdf file that tells all about ASCII file.\n </p>\n <p>\n  N.B. I truncated and posted from the larges file as i wish - i mean the trucated portion of ascii and that of binary posted here may not intersect/exact replica. I just copied portion and posted here.\n </p>\n <p>\n  <a href=\"https://www.dropbox.com/s/y3kz1b3hds3mkr7/Mariano_Gigante%20%28ASCII%29.trj?dl=0\" rel=\"nofollow\">\n   ASCII file link\n  </a>\n </p>\n <p>\n  <a href=\"https://www.dropbox.com/s/cx98wkp4b019190/Mariano_Gigante%20%28Binary%29.trj?dl=0\" rel=\"nofollow\">\n   Binary file link\n  </a>\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 2,
    "views": "185",
    "tags": [
        "encodings"
    ],
    "user": "Learner",
    "time": "Dec 7, 2015 at 16:24",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Please provide a hex dump of the binary file. (use hexdump -C filename if you use linux).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Learner",
            "text": "<html><body><span class=\"comment-copy\">\n OK edited question.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n if you look close at the two versions, you will see the pattern: first byte in hex is the first byte in ASCII, the next byte in hex is the second byte in ASCII, the the next dword is the floating-point version of the ASCII... for each of the ASCII floating-point values, use a debugger to convert and you'll find the position in the binary.  The other fields will become clear.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As far as I can see it is not encrypted, but just wrote down in binary form straight forward, at least some first fields are exact match.\n </p>\n <pre><code>00              in hexdump means the first zero\n4c              in hexdump is 76\nB8 1E 85 3F     is binary representation of float 1.039999999 which means 1.04\n01              is 1\n01              is next 1\n00 00 80 3f     is binary representation of 1.0\nF7 D7 07 00     is binary representation of integer 514039\n</code></pre>\n <p>\n  and so on.\n </p>\n <p>\n  I used python and python module struct to verify all this.\n </p>\n <p>\n  for example, the following code will give you desired output:\n </p>\n <pre><code>import binascii\nimport struct\n\nprint struct.unpack(\"b\", binascii.unhexlify(\"00\"))\nprint struct.unpack(\"b\", binascii.unhexlify(\"4c\"))\nprint struct.unpack(\"f\", binascii.unhexlify(\"b81e853f\"))\nprint struct.unpack(\"b\", binascii.unhexlify(\"01\"))\nprint struct.unpack(\"b\", binascii.unhexlify(\"01\"))\nprint struct.unpack(\"f\", binascii.unhexlify(\"0000803f\"))\nprint struct.unpack(\"I\", binascii.unhexlify(\"F7D70700\"))\n</code></pre>\n <p>\n  The main problem here is determining the basic sizes of different data.\nHere is rule of thumb you can use:\n </p>\n <ol>\n  <li>\n   Integers may be one byte, 2, 4 or 8 bytes long\n  </li>\n  <li>\n   floating point values here always were 4 byte long, but also may be 8\n  </li>\n </ol>\n <p>\n  All the rest of the work should be obvious.\n </p>\n <p>\n  Transformation back to binary will look as follows:\n </p>\n <pre><code>s = \"\"\n\ns += struct.pack(\"b\", 0)\ns += struct.pack(\"b\", 76)\ns += struct.pack(\"f\", 1.04)\ns += struct.pack(\"b\", 1)\ns += struct.pack(\"b\", 1)\ns += struct.pack(\"f\", 1.0)\ns += struct.pack(\"I\", 514039)\ns += struct.pack(\"I\", 5058933)\ns += struct.pack(\"I\", 514808)\ns += struct.pack(\"I\", 5059861)\n\nprint binascii.hexlify(s)\n</code></pre>\n <p>\n  Here is the code you can start to work from.\nThe code does not produce the file that exactly matches the binary because sometimes small integers are converted to 4 byte integers in the file,\nbut it is probably good point to start. You'll probably have to understand how to save the data from the usage context. Timestep string, by the way, looks ignored.\n </p>\n <pre><code>fin = open(sys.argv[1], \"r\")\nfo  = open(sys.argv[2], \"wb\")\n\nfor l in fin:\n    try:\n        data = l.replace(\"\n\", \"\").replace(\"\\r\", \"\").replace(\" ********* TIMESTEP\", \"\")\n        if data.find(\".\") != -1:\n            fmt = \"f\"\n            numeric = float(data)\n        elif int(data, 10)  <=127 and int(data, 10) >=-128: \n            fmt = \"b\"\n            numeric = int(data, 10)\n        else:\n            fmt = \"I\"\n            numeric = int(data, 10)\n        fo.write(struct.pack(fmt, numeric))\n    except:\n        continue\n\nfin.close()\nfo.close()\n</code></pre>\n <p>\n  EDIT:\n </p>\n <p>\n  Using pdf with format description (easy one) the following script translates the text to the binary almost exactly (The files are not binary identical, but sizes of the data are OK and number of differences is relatively small):\n </p>\n <pre><code>import os\nimport sys\nimport struct\nimport binascii\n\n\nfin = open(sys.argv[1], \"r\")\nfo  = open(sys.argv[2], \"wb\")\n\nrecords = {\n    \"0\": \"bbf\", # format\n    \"1\": \"bbfIIII\", # dimensions\n    \"2\": \"bf\", # timestamp\n    \"3\": \"bIIbffffffff\" #vehicle\n}\n\nfmt = \"UUUUU\"\nline_in_record = 0\nfor l in fin:\n    data = l.replace(\"\n\", \"\").replace(\"\\r\", \"\").replace(\" ********* TIMESTEP\", \"\")\n    if line_in_record == len(fmt):\n        for i in range(len(fmt)):\n            if fmt[i] == 'b' or fmt[i] == 'I':\n                numeric = int(read_lines[i], 10)\n            elif fmt[i] == 'f':\n                numeric = float(read_lines[i])\n            else:\n                raise Exception(\"Incorrect format\")\n            fo.write(struct.pack(fmt[i], numeric))\n        line_in_record = 0\n    if line_in_record == 0:\n        if data in records:\n            fmt = records[data]\n            read_lines = []\n        else:\n            raise Exception(\"Incorrect record type\")\n\n    read_lines.append(data)\n    line_in_record += 1\n\n# writing last acquired record:\nif line_in_record == len(fmt):\n    for i in range(len(fmt)):\n        if fmt[i] == 'b' or fmt[i] == 'I':\n            numeric = int(read_lines[i], 10)\n        elif fmt[i] == 'f':\n            numeric = float(read_lines[i])\n        else:\n            raise Exception(\"Incorrect format\")\n        fo.write(struct.pack(fmt[i], numeric))\n\nfin.close()\nfo.close()\n</code></pre>\n <p>\n  This code does\n  <strong>\n   not\n  </strong>\n  handle big/little endianess and I'd leave this problem for you to solve.\nAs far as I understand at this point the rest of the solution is not related to reverse engineering anymore.\n </p>\n <p>\n  Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Dec 8, 2015 at 11:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Learner",
                    "text": "<span class=\"comment-copy\">You samaritan really!! then how can i convert ascii file into binary esp in python ( i know it) and one last note could you bother to check the whole file i attached. Thanks man a lot</span>",
                    "time": null
                },
                {
                    "user": "Learner",
                    "text": "<span class=\"comment-copy\">Yeah! but there are strings (little) in the binary file- thanks</span>",
                    "time": null
                },
                {
                    "user": "Learner",
                    "text": "<span class=\"comment-copy\">Just one more thing could you tell me how to convert hex i.e. <code>print binascii.hexlify(s)</code> into raw byte wherefrom i generated hex. Since i may given ascii file and will be told to convert it into raw byte(i.e before hexdump)</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">variable s contains the data you should write to binary file, hexlify here is just for converting it to printable form.</span>",
                    "time": null
                },
                {
                    "user": "Learner",
                    "text": "<span class=\"comment-copy\">Sir, your word <code>Timestep string, by the way, looks ignored.</code> have you gone through full file i attached- i need exact ascii to binary since it will be read by a software.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  hxd alpha version ( search the author's forum ) has a data inspector panel which you can manipulate to understand the format of unknown binary sequences by trial a snap shot of float value 1.04 below\n  <a href=\"https://i.sstatic.net/4VW1X.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/4VW1X.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 8, 2015 at 5:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}