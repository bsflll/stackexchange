{
    "title": "How do disassemblers work?",
    "link": "https://reverseengineering.stackexchange.com/questions/25503/how-do-disassemblers-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have 2 questions regarding this, but feel free to elaborate more if you want to, I'm really interested in this topic:\n </p>\n <ol>\n  <li>\n   <p>\n    Do they really just read byte by byte until they get a valid instruction? How do they know if it's a valid instruction and which it is? I don't imagine they just had every single instruction stored in a table as that'd be very inefficient.\n   </p>\n  </li>\n  <li>\n   <p>\n    Found this source online that I think does this in around 700 lines (\n    <a href=\"https://github.com/btbd/disassembler/blob/master/disassembler.c\" rel=\"nofollow noreferrer\">\n     https://github.com/btbd/disassembler/blob/master/disassembler.c\n    </a>\n    ). If something like this is possible, why are there others that have a lot more code and logic?\n   </p>\n  </li>\n </ol>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "321",
    "tags": [
        "disassembly",
        "assembly",
        "disassemblers"
    ],
    "user": "user33834",
    "time": "Jul 15, 2020 at 5:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The 2 main approaches to disassembly are\n </p>\n <ol>\n  <li>\n   <em>\n    Linear sweep\n   </em>\n   - decode all bytes appearing in sections of the executable that are typically reserved for machine code (e.g. the\n   <code>\n    .text\n   </code>\n   section of an ELF binary) as machine code\n  </li>\n  <li>\n   <em>\n    Recursive traversal\n   </em>\n   - take into account the control flow behavior of the program being disassembled in order to determine what to disassemble\n  </li>\n </ol>\n <p>\n  Each has its advantages and disadvantages. More information can be found in\n  <a href=\"https://www2.cs.arizona.edu/%7Edebray/Publications/disasm.pdf\" rel=\"nofollow noreferrer\">\n   Disassembly of Executable Code Revisited\n  </a>\n  .\n </p>\n <p>\n  An exploration of what is involved in developing a disassembler is given in the following research presentation:\n </p>\n <p>\n  <a href=\"https://docs.google.com/presentation/d/17Vlv5JD8fGeeNMQqDuwDQXN3d9U6Yxmfb1aebfbMM98/view#slide=id.g586bbaeb3c_0_0\" rel=\"nofollow noreferrer\">\n   The (Long) Journey To A Multi-Architecture Disassembler\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "julian",
            "time": "Jul 15, 2020 at 18:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}