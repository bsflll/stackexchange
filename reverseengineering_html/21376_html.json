{
    "title": "How to return a list of vtable methods?",
    "link": "https://reverseengineering.stackexchange.com/questions/21376/how-to-return-a-list-of-vtable-methods",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm relatively new to scripting environments in disassemblers. What I am looking for is a way to dump all of the vtable methods from a C++ disassembly in such a way that I can access them later for further programmatic analysis. My intention is to pass them to another framework in order to do symbolic execution.\n </p>\n <p>\n  Based on my naive understanding of the available options I am going to assume the easiest way to do this is IDA python.\n </p>\n <p>\n  <strong>\n   In IDA Python how can I gather the addresses and bodies of all methods contained in vtables?\n  </strong>\n </p>\n <p>\n  Extra Credit: The same for Binary Ninja or any other disassembler platform.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "307",
    "tags": [
        "ida",
        "c++",
        "vtables"
    ],
    "user": "MrSynAckSter",
    "time": "May 27, 2019 at 18:02",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n How that vtable is exported from the module? Is that a COM interface?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<html><body><span class=\"comment-copy\">\n I'm asking about virtual method tables in C++, modules and Windows specific COM objects aren't necessarily involved.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}