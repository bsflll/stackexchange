{
    "title": "Reliable way to recognize STL template classes?",
    "link": "https://reverseengineering.stackexchange.com/questions/12718/reliable-way-to-recognize-stl-template-classes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since the template classes are different between instantiation, it is extremely difficult for library recognition using universal patterns.\n </p>\n <p>\n  But the control flow graph and references to system call of those template functions should be almost the same.\n </p>\n <p>\n  So is there a good and reliable way to identify and recognize these STL classes ?\n </p>\n <p>\n  Note: some classes using template like\n  <code>\n   std::string\n  </code>\n  is fixed. These classes can be recognized by FLAIR (Fast Library Acquisition for Identification and Recognition).\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 0,
    "views": "918",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "Misty",
    "time": "May 23, 2016 at 17:38",
    "comments": [
        {
            "user": "tibar",
            "text": "<html><body><span class=\"comment-copy\">\n STL is mostly about performance and algorithm, I do not see how you could recognize\n <code>\n  std::copy\n </code>\n after it has been optimized...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Misty",
            "text": "<html><body><span class=\"comment-copy\">\n oh I know there must be some stl functions cannot be recognized, but classes like vector should be easier to be recognized. Some inline functions can be ignored simply.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}