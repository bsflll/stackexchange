{
    "title": "Emulating Non-Linux Firmware Image of Embedded Devices",
    "link": "https://reverseengineering.stackexchange.com/questions/14523/emulating-non-linux-firmware-image-of-embedded-devices",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've come across multiple questions/tutorials about QEMU emulation of devices running some sort of Linux/Busybox operating system and a file system. However, I'm seeking ways to run ARM-based firmware of embedded devices using QEMU using the extracted image file.\n </p>\n <p>\n  At this moment, I've been trying multiple time using something like:\n </p>\n <pre><code>qemu-system-arm -machine versatilepb -m 128M -option-rom MspApp.bin \n</code></pre>\n <p>\n  However, in every case, I end up with a similar crash:\n </p>\n <pre><code>R00=00000000 R01=00000000 R02=00000000 R03=00000000\nR04=00000000 R05=00000000 R06=00000000 R07=00000000\nR08=00000000 R09=00000000 R10=00000000 R11=00000000\nR12=00000000 R13=00000000 R14=00000000 R15=08000000\nPSR=400001d3 -Z-- A svc32\ns00=00000000 s01=00000000 d00=0000000000000000\ns02=00000000 s03=00000000 d01=0000000000000000\ns04=00000000 s05=00000000 d02=0000000000000000\ns06=00000000 s07=00000000 d03=0000000000000000\ns08=00000000 s09=00000000 d04=0000000000000000\ns10=00000000 s11=00000000 d05=0000000000000000\ns12=00000000 s13=00000000 d06=0000000000000000\ns14=00000000 s15=00000000 d07=0000000000000000\ns16=00000000 s17=00000000 d08=0000000000000000\ns18=00000000 s19=00000000 d09=0000000000000000\ns20=00000000 s21=00000000 d10=0000000000000000\ns22=00000000 s23=00000000 d11=0000000000000000\ns24=00000000 s25=00000000 d12=0000000000000000\ns26=00000000 s27=00000000 d13=0000000000000000\ns28=00000000 s29=00000000 d14=0000000000000000\ns30=00000000 s31=00000000 d15=0000000000000000\nFPSCR: 00000000\nAborted\n</code></pre>\n <p>\n  Understanding that the execution won't go very far given that I do not emulate any of the required hardware - a problem for later - I would a least like to have the device boot up.\n </p>\n <p>\n  Currently, I've been trying on a firmware for pool automation, which from the static analysis reveals that it runs on\n  <a href=\"https://www.mentor.com/embedded-software/nucleus/\" rel=\"nofollow noreferrer\">\n   Nucleus RTOS\n  </a>\n  on a\n  <a href=\"http://www.nxp.com/products/microcontrollers-and-processors/arm-processors/i.mx-applications-processors/i.mx28-applications-processors-integrated-power-management-unit-pmu-arm9-core:IMX28_FAMILY\" rel=\"nofollow noreferrer\">\n   i.MX28 board\n  </a>\n  from NXP, based on ARM9. The firmware is composed of two files, one appears to contain the OS, a set of XML files - likely used for the user interface - and possibly a U-boot bootloader. All of these components are in the\n  <em>\n   MspApp.bin\n  </em>\n  file, which I assume is the ROM image.\n </p>\n <p>\n  So my questions are: 1) is it possible to partially emulate embedded devices from firmware ROM images using QEMU and if so 2) what information/commands/modification would I need to have QEMU partially emulate the extracted firmware?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "firmware",
        "embedded",
        "qemu"
    ],
    "user": "InfectedPacket",
    "time": "Jan 29, 2017 at 18:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It\n  <em>\n   is\n  </em>\n  possible, but emulating the raw .bin file is almost never going to work unless it's laid out exactly like the QEMU platform you're using expects.  If the binary you want to run is statically-linked and is in a binary format that QEMU knows, you may be able to use QEMU user mode to run it, but you'll need to extract it from your binary image.\n  <a href=\"http://binwalk.org\" rel=\"nofollow noreferrer\">\n   Binwalk\n  </a>\n  may be very useful for that.  The bootloader is probably a good candidate for user-mode emulation, or again, anything in the filesystem that is statically-linked.  A good guide is here:\n  <a href=\"http://nairobi-embedded.org/qemu_usermode.html\" rel=\"nofollow noreferrer\">\n   QEMU usermode, howto\n  </a>\n  .\n </p>\n <p>\n  For anything that's dynamically linked and depends on the Nucleus RTOS, you'll likely have to hack on QEMU for the OS support.  That could be a timely undertaking.  If you know the memory layout and where everything in MspApp.bin is loaded to start up, you might be able to make some forward progress using the Unicorn Framework (sorry, don't yet have enough rep to post more than 2 links), although you will very quickly run into issues where the board-specific hardware isn't modeled which can quickly lead you down the rabbit hole.\n </p>\n <p>\n  Good luck, embedded system emulation is a frustrating but rewarding undertaking.  Regardless of whether you get it working or not, you will have learned a lot by the time you're done.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "3pidemix",
            "time": "Jan 31, 2017 at 12:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "InfectedPacket",
                    "text": "<span class=\"comment-copy\">Took a look at the Unicorn framework and it seems like the way ahead for now. I hold up answering for a while hoping that I could come up with a partial solution to post here, unfortunately it did not materialize yet. I also read that IDA could execute some code snippets using QEMU, but still have to make it work yet.</span>",
                    "time": null
                }
            ]
        }
    ]
}