{
    "title": "Same USB packet (Python/user vs C/kernel) but different result",
    "link": "https://reverseengineering.stackexchange.com/questions/25354/same-usb-packet-python-user-vs-c-kernel-but-different-result",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm making a Linux module (my first one) for a closed-source, enclosed (no hardware access) device.\nUsing Wireshark I found what to send and where, so I tried the following command in user space Python and it works:\n </p>\n <p>\n  <code>\n   handle._controlTransfer(0x21, 0x09, 0x0300, 3, data, 8, 0) #packet sent, device reacts\n  </code>\n </p>\n <p>\n  Sadly I can't get it to work in the kernel module:\n </p>\n <p>\n  <code>\n   usb_control_msg(dev, usb_sndctrlpipe(dev, 0), 0x09, 0x21, 0x0300, 3, data, 8, 0); //packet sent, device doesn't react\n  </code>\n </p>\n <p>\n  even by creating the urb myself:\n </p>\n <pre><code>urb = usb_alloc_urb(0, GFP_KERNEL);\ncr = kmalloc(sizeof(struct usb_ctrlrequest), GFP_KERNEL);\ncr->bRequestType = USB_TYPE_CLASS | USB_RECIP_INTERFACE;\ncr->bRequest = 0x09;\ncr->wValue = cpu_to_le16(0x0300);\ncr->wIndex = cpu_to_le16(3);\ncr->wLength = cpu_to_le16(8);\nusb_fill_control_urb(urb, dev, usb_sndctrlpipe(dev, 0), (void *)cr, data, 8, urb_callback, context);\nusb_submit_urb(urb, GFP_ATOMIC);\nkfree(cr);\nusb_free_urb(urb);\n//packet sent, device doesn't react\n</code></pre>\n <p>\n  When I say the device \"reacts\" I mean it flashes with another color so there is no ambiguity in the success of the command.\n </p>\n <p>\n  I logged everything with Wireshark and the packets are identical (except for\n  <code>\n   urb_id\n  </code>\n  and\n  <code>\n   urb_ts_*\n  </code>\n  )\n </p>\n <p>\n  Would you have any advice for me? Something I forgot or how to debug more?\n </p>\n <p>\n  <strong>\n   Edit\n  </strong>\n </p>\n <p>\n  Full working Python code\n </p>\n <pre><code>context = usb1.USBContext()\nhandle = context.openByVendorIDAndProductID(VENDOR_ID, PRODUCT_ID)\nusb1.libusb1.libusb_set_auto_detach_kernel_driver(handle._USBDeviceHandle__handle, 0)\nusb1.libusb1.libusb_set_auto_detach_kernel_driver(handle._USBDeviceHandle__handle, 3)\nhandle.claimInterface(0)\nhandle.claimInterface(3)\nhandle._controlTransfer(0x21, 0x09, 0x0300, 3, data, 8, 0)\nhandle.releaseInterface(3)\nhandle.releaseInterface(0)\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "104",
    "tags": [
        "linux",
        "driver",
        "usb"
    ],
    "user": "PeterHerb",
    "time": "Jun 20, 2020 at 21:17",
    "comments": [
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n Do you have any logic analyser to check if the packets are indeed the same?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PeterHerb",
            "text": "<html><body><span class=\"comment-copy\">\n No, that's what I mean by no hardware access: it's an USB chip inside a laptop I can't open\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PeterHerb",
            "text": "<html><body><span class=\"comment-copy\">\n Do you think it is possible for Wireshark to display identical packets whereas the physical data is different? I don't think this is the problem because every single test with Python works and every single test in the kernel driver fails\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n Yeah it is very unlikely that the problem is on hardware side if wireshark shows identical data, however I would check it anyway just to be sure, but as I understand in your situation it is not possible. Maybe the problem isn't with the data itself, maybe the device need to be initializated somehow before sending the payload?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PeterHerb",
            "text": "<html><body><span class=\"comment-copy\">\n I thought about that too so I edited the usbhid driver (the original driver of the device) in order to be sure any initialization would be the same. I put some logs and the usb_control_msg line above but got the same results.  Also I realised something new, with Python there is another packet prior to the correct one : an interrupt coming from the device right after the first interface is claimed. I don't think it's relevant though.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}