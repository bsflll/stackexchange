{
    "title": "PPPoE username and password from ZTE ZXHN F680 V6",
    "link": "https://reverseengineering.stackexchange.com/questions/30309/pppoe-username-and-password-from-zte-zxhn-f680-v6",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to extract the PPPoE username and password from a\n  <strong>\n   ZTE ZXHN F680 V6\n  </strong>\n  router. I have obtained several files from the router and can get access to other files if needed.  Here is where I'm at.\n </p>\n <p>\n  I have obtained the\n  <code>\n   cspd\n  </code>\n  file after reading\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11626/zte-encrypted-backup-config-file\">\n   this Q&A\n  </a>\n  .  I also have a\n  <code>\n   config.bin\n  </code>\n  file but was unable to determine any information from it using\n  <code>\n   binwalk\n  </code>\n  or\n  <code>\n   strings\n  </code>\n  commnads.  Both returned empty results and indicated high level of entropy.\n </p>\n <p>\n  <a href=\"https://drive.google.com/file/d/1UEV9xGcFIq4aQfRj-k9_uJx4CEPirykA\" rel=\"nofollow noreferrer\">\n   Here is a link to the files extracted from router.\n  </a>\n </p>\n <p>\n  I assume that the PPPoE file will be in an encoded or encrypted or both .xml file.  So, my search in the\n  <code>\n   cspd\n  </code>\n  file for strings resulted in potentially useful information.\n </p>\n <pre><code>$ strings cspd | grep .xml\n/var/tmp/db_user_cfg.xml\nCP download xml doc failed!\n/etc/db_user_cfg.xml\nplease input cfg file(/proc/cfg/db_user_cfg.xml) eg.\n/var/tmp/db_cp_cfg.xml\n/var/tmp/db_reload_cfg.xml\n/var/tmp/db_backup_cfg.xml\n/etc/db_default_%s_cfg.xml\n/var/tmp/db_Decry_cfg.xml\n/var/tmp/usb_rst_cfg.xml\ndbc_mgr_file_xml.c\nat %d line of xml file\nsbsize(%d) xmlsize(%d)\n/userconfig/cfg/db_user_cfg.xml\n/etc/db_default_cfg.xml\n/userconfig/cfg/db_backup_cfg.xml\n</code></pre>\n <p>\n  I think the best candidates for containing the PPPoE username and password are\n  <code>\n   /userconfig/cfg/db_backup_cfg.xml\n  </code>\n  ,\n  <code>\n   /userconfig/cfg/db_user_cfg.xml\n  </code>\n  and\n  <code>\n   /etc/db_default_cfg.xml\n  </code>\n  .\n </p>\n <p>\n  I have checked those files using\n  <code>\n   binwalk\n  </code>\n  and it seems they are high level of entropy with only one section (no obvious header), so have been encrypted, not simply encoded:\n </p>\n <pre><code>binwalk -E db_user_cfg.xml\n\nWARNING: Failed to import matplotlib module, visual entropy graphing will be disabled\n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n0             0x0             Rising entropy edge (0.954061)\n</code></pre>\n <p>\n  I following the above linked post I have used Ghidra 10 to de-compile the\n  <code>\n   cspd\n  </code>\n  file and searched for these strings, as well as functions for decryption.  I found the following files:\n </p>\n <ul>\n  <li>\n   AES_set_decryption_key\n  </li>\n  <li>\n   AESDecrypt\n  </li>\n  <li>\n   AESCBCDecry\n  </li>\n  <li>\n   <strong>\n    dbcCfgSetAesKey\n   </strong>\n  </li>\n  <li>\n   DecryByAES\n  </li>\n  <li>\n   DecryByAESCBC\n  </li>\n </ul>\n <p>\n  I think the most likely candidate to get a key for decryption is\n  <code>\n   dbcCfgSetAesKey\n  </code>\n  , but that's only because of the name of the function and the target .xml files have\n  <strong>\n   cfg\n  </strong>\n  in their names.\n </p>\n <p>\n  The body of the\n  <code>\n   dbcCfgSetAesKey\n  </code>\n  function is below.  It only accepts one variable and :\n </p>\n <pre><code>undefined4 dbcCfgSetAesKey(void *param_1)\n\n{\n  if (param_1 != (void *)0x0) {\n    memcpy(g_szMD5Key,param_1,0x20);\n    return 0;\n  }\n  return 0xffffffff;\n}\n</code></pre>\n <p>\n  I searched Ghidra for\n  <code>\n   g_szMD5Key\n  </code>\n  and found there was only a Label with that name, no function. It appears to me that the above\n  <code>\n   dbcCfgSetAesKey\n  </code>\n  function is copying the config file AES key to a memory location to be accessed later by the decryption process.  They key may be some type of MD5 hash?\n </p>\n <p>\n  My questions are:\n </p>\n <ol>\n  <li>\n   What are my options for extracting the key to decrypt the .xml files?  Am I right that they PPPoE data will likely be in the above mentioned .xml files?\n  </li>\n  <li>\n   Am I generally on the right track to extract config data from a ZTE router such as ZTE ZXHN F680 V6?  I know that they are all different, and have looked at some other tools such as\n   <a href=\"https://github.com/mkst/zte-config-utility\" rel=\"nofollow noreferrer\">\n    zte-config-utility\n   </a>\n   which I see requires having a key to extract the config files.\n  </li>\n  <li>\n   What am I missing about this approach to reverse-compiling the router configuration.\n  </li>\n </ol>\n <p>\n  I know my questions will be rather noob since I am just starting to learn reverse engineering / compiling.  I am fairly good with encryption and modes, but not create with Ghidra or C++.  If my question is much to simple and uninformed just let me know.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "5k",
    "tags": [
        "firmware",
        "router"
    ],
    "user": "I'm Root James",
    "time": "Apr 23, 2022 at 7:01",
    "comments": [
        {
            "user": "xax",
            "text": "<html><body><span class=\"comment-copy\">\n Can you upload cspd file?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "I'm Root James",
            "text": "<html><body><span class=\"comment-copy\">\n @xax I have uploaded a zip file of the files extracted from the router.  There is also a directory tagparam with a p12 certificate, and config.bin.  All seem encrypted.\n <a href=\"https://drive.google.com/file/d/1UEV9xGcFIq4aQfRj-k9_uJx4CEPirykA/view?usp=sharing\" rel=\"nofollow noreferrer\">\n  drive.google.com/file/d/1UEV9xGcFIq4aQfRj-k9_uJx4CEPirykA/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "xax",
            "text": "<html><body><span class=\"comment-copy\">\n This config file using\n <b>\n  AES-256-CBC\n </b>\n algorithm and\n <b>\n  deflate zlib\n </b>\n compression. key_str = \"C1DB7A773d634602dc8c\", iv_str = \"ZTE%FN$GponNJ025\" -> key = sha256(key_str), iv = first 16byte of sha256(iv_str) -> key =\n <b>\n  4a5e07466a0777eb2650bbd4fc85bb7498e3048d4219916c5f50576ad5c25bce\n </b>\n iv    =\n <b>\n  83197b65889558bb6723df979895bb36\n </b>\n Decrypt method in  function\n <b>\n  DecryByAESCBC\n </b>\n and key_str\n <b>\n  C1DB7A773d634602dc8c\n </b>\n I find from\n <b>\n  paramtag\n </b>\n file. But this decrypt success only file\n <b>\n  db_backup_cfg.xml\n </b>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "I'm Root James",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for that info.  I assume that the zlib decompress must happen first because when I open the file as bytes in Python3 and check the length of the db_backup_cfg.xml file\n <code>\n  print(len(payload) % 16)\n </code>\n the output is 8.  So the file is not padded the right length for  AES 256 CBC mode decryption.  But when I try to zlib decompress using python3,\n <code>\n  payload = zlib.decompress(payload)\n </code>\n I get the error,\n <code>\n  zlib.error: Error -3 while decompressing data: incorrect header check\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "xax",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://imgur.com/a/E9S2YWw\" rel=\"nofollow noreferrer\">\n  hex view\n </a>\n You can use\n <b>\n  decode.py db_backup_cfg.bin db_backup_cfg.xml\n </b>\n after decrypt or using my script using zcu\n <a href=\"https://pastebin.com/CCqm1tfj\" rel=\"nofollow noreferrer\">\n  zte_f608.py\n </a>\n <b>\n  zte_f608.py --key-prefix C1DB7A773d634602dc8c --iv-prefix ZTE%FN$GponNJ025 db_backup_cfg.xml out.xml\n </b>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}