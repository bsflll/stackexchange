{
    "title": "reversing a grpc call",
    "link": "https://reverseengineering.stackexchange.com/questions/27465/reversing-a-grpc-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  im reversing a android app and i managed to intercept a grpc request and decode it using protoc but i cant seem to make sense of any of the data, i know its compressed using gzip because of the request headers\n </p>\n <pre><code>        \"content-type\": \"application/grpc; charset=utf-8\",\n        \"grpc-accept-encoding\": \"identity,deflate,gzip\",\n        \"accept-encoding\":  \"identity,gzip\",\n</code></pre>\n <p>\n  and this is the decoded protcolbuffer\n </p>\n <pre><code>\n   \"1\": {\n        \"1\": \"¸z =PÞCw.\\u001e}».*\\u001f\\u0011\"\n    },\n    \"2\": some value,\n    \"3\": {\n        \"1\": {\n            \"1\": {\n                \"1\": \"©ÄS¢ÄþP\\f.½\\fÑWÄK>\"\n            }\n        }\n    },\n    \"4\": {\n        \"2\": 1,\n        \"4\": {\n            \"2\": {\n                \"1\": \"other value\"\n            }\n        },\n        \"7\": 2\n    }\n}\n</code></pre>\n <p>\n  i already tried gunzip on cyberchef but i could not decompress anything without a file signature so how should i decompress the other unreadable values into plain text?? when ever i send the same binary data above the intended functionality works so i know the server is turning them back into readable text somehow and say i want to intercept the data on the android app before it gets serialized what is the best  place to do that?\n </p>\n <p>\n  update: this is the result decoding the data using proto with the same structure as above what is this data how do i decode it?\n </p>\n <pre><code>s {\n  string1: \"\\270z =P\\336Cw\\211\\036}\\273\\214*\\037\\021\"\n}\nid: 1640553558\nd {\n  d0 {\n    d1 {\n      string2: \">D_.\\233d\\\\\\177\\210\\274\\320\\000}\\253\\')\"\n    }\n  }\n}\ng {\n  id2: 1\n  f {\n    f0 {\n      string3: \"Eiei\"\n    }\n  }\n  id3: 2\n}\n</code></pre>\n <p>\n  this is the .proto i built\n </p>\n <pre><code>syntax = \"proto2\";\n\n\nmessage body {\n    message b1 {\n        optional string s0 = 1; \n    }\n\n    optional b1 s = 1;\n\n    optional int32 id = 2;\n    message b2 {\n\n        message b3 {\n\n            message body4 {\n                optional string string2 = 1;\n            }\n            optional body4 d1 = 1;\n        }\n        optional b3 d0 = 1;\n    }\n    optional b2 d = 3;\n    \n\n    message b4 {\n        optional int32 id2 = 2;\n        message b5 {\n            message b6 {\n                \n                optional string message0 = 1;\n            }\n            optional b6 f0 = 2;\n        }\n        optional b5 f = 4;\n        optional int32 id3 = 7;\n\n    }\n\n    optional b4 g = 4;\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "523",
    "tags": [
        "android",
        "decompress",
        "frida"
    ],
    "user": "ahmed mani",
    "time": "Apr 17, 2021 at 16:48",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n The raw decoded protobuffer looks pretty good. Based on that structure you should build an .proto file and give each attribute a meaningful name if you manage to identify the data it carries. Fields that contain binary data like 1.1 can just be binary fields or what also sometimes happens is that these are again protobuf objects that can't be identified as object in RAW decoding. Use the manually built .proto file and text what happens if you define the field 1.1 as message may be the decoder can then split it up into further attributes.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ahmed mani",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert thank you for your answer im still new to protos but i still dont understand why? why would it not decode it to its original data why does it need a attribute to do that? i mean why would i need to specify attributes to strings i thought that strings are passed as hex data? furthermore why would it  split it up to further objects when each data section is length delimeted?? and i geuss i would need to bruteforce the data types until i get a readable text?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Protobuf is designed to be decoded by a protobuf definition file which defines what messages (object) and field types are used at which position. You did a RAW decoding without protobuf definition file. In RAW made not every message class can be detected. You should really start with a protobuf tutorial to learn how protobuf should be used. That will help you reversing the protocol.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ahmed mani",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert i built a .proto file with same structure as above if i specify 1.1 as another message i get \"Error parsing message\" if i specify it as a string or bytes i get the same message wich is \"\\270z =P\\336Cw\\211\\036}\\273\\214*\\037\\021\" what is this data? how do i decode it? same for the other field i updated my answer with the result from the decoder with the proto file\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ahmed mani",
            "text": "<html><body><span class=\"comment-copy\">\n i tried decoding it and i got the same data i started with\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}