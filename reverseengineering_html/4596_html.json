{
    "title": "Hooking Java APIs",
    "link": "https://reverseengineering.stackexchange.com/questions/4596/hooking-java-apis",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In native code on windows functions can be hooked by replacing their prologue with a\n  <code>\n   JMP\n  </code>\n  instruction.\n </p>\n <p>\n  Is there a way to do something similar with an application written in java? In the end I want to record all data sent to/from a\n  <code>\n   javax.net.ssl.SSLSocket\n  </code>\n  .\n </p>\n <p>\n  I can't modify the jar file or the jre on disk, because it will bail if the hashes don't match up, but I can hook any function from native code during runtime.\n </p>\n <p>\n  I have a working solution right now, but it's very messy and not that flexible. I'm hooking\n  <code>\n   JNI_CreateJavaVM\n  </code>\n  and inserting\n  <code>\n   -Djavax.net.debug=all\n  </code>\n  into the arguments passed to it. This causes all data sent over the socket to be written to disk, and then I'm hooking\n  <code>\n   WriteFile\n  </code>\n  to intercept that data before it gets written to disk.\n </p>\n <p>\n  I found something that looked close to what I want, the\n  <code>\n   -javaagent\n  </code>\n  parameter, but by the time my agent is loaded all of the java standard library is loaded so I don't see a way to hook it using an agent.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 2,
    "views": "7k",
    "tags": [
        "java",
        "function-hooking"
    ],
    "user": "Avery3R",
    "time": "Jun 12, 2014 at 10:06",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n In the specific case of a network socket, wouldn't wireshark be a better alternative to messing with the java classes? Or, if you can't make wireshark decrypt the traffic because you don't have access to the server's private key, something like mitmproxy (\n <a href=\"http://www.mitmproxy.org/\" rel=\"nofollow noreferrer\">\n  mitmproxy.org\n </a>\n ) or fiddler (\n <a href=\"http://www.telerik.com/fiddler\" rel=\"nofollow noreferrer\">\n  telerik.com/fiddler\n </a>\n )?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n Have you considered building the JVM from source and adding instrumentation to the JVM itself?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   edit\n  </strong>\n  : This question overlaps with\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1714/dynamic-java-instrumentation?rq=1\">\n   Dynamic java instrumentation?\n  </a>\n </p>\n <p>\n  Jeong Wook Oh did a presentation at Blackhat 2012 were he explained how to trace Java programs by modifying the bytecode to call hook methods, see the \"Automation\" section of the paper. There is no source or tool available as far as I know.\n </p>\n <ul>\n  <li>\n   <a href=\"https://media.blackhat.com/bh-us-12/Briefings/Oh/BH_US_12_Oh_Recent_Java_Exploitation_Trends_and_Malware_WP.pdf\" rel=\"nofollow noreferrer\">\n    Paper\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.youtube.com/watch?v=5JN65JZmHjM\" rel=\"nofollow noreferrer\">\n    Video\n   </a>\n  </li>\n </ul>\n <p>\n  There is also a tool called Javasnoop that is available, I did not test it. It uses the \"Attach API\" to monitor API calls. This method seems cleaner for what you want to do.\n </p>\n <ul>\n  <li>\n   <a href=\"https://media.blackhat.com/bh-us-10/whitepapers/Dabirsiaghi/BlackHat-USA-2010-Dabirsiaghi-JavaSnoop-wp.pdf\" rel=\"nofollow noreferrer\">\n    Javasnoop Slides\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.aspectsecurity.com/research/appsec_tools/javasnoop/\" rel=\"nofollow noreferrer\">\n    Javasnoop download\n   </a>\n  </li>\n  <li>\n   <a href=\"https://blogs.oracle.com/CoreJavaTechTips/entry/the_attach_api\" rel=\"nofollow noreferrer\">\n    Attach API\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">From the sound of it, bytecode modification is unlikely to work here due to the application checking hashes of itself.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">Regarding the duplication, IMO it depends on whether you consider tracing and instrumentation the same as hooking. Hooking to me means inserting some piece of code which could also change the parameters, output of the function and affect program state. There's certainly some overlap but the intent, possibly acceptable runtime overhead and the requirements on the level of user interaction may be very different.</span>",
                    "time": null
                },
                {
                    "user": "ekse",
                    "text": "<span class=\"comment-copy\">You're right, duplicate wasn't the right term, I mean't it as \"make sure to check this question too for answers\". I reworded it to \"this question overlaps with\".</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've used javasnoop on jobs before. Use AspectJ, there's a learning curve for that too but it's absolutely the correct solution for you.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Aug 14, 2020 at 8:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ekse",
                    "text": "<span class=\"comment-copy\">Do you have a reference of how to use AspectJ for hooking/instrumentation?</span>",
                    "time": null
                },
                {
                    "user": "offbyseveral",
                    "text": "<span class=\"comment-copy\">That's all it does. The official documentation.</span>",
                    "time": null
                }
            ]
        }
    ]
}