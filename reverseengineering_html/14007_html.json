{
    "title": "What syntax does OllyDbg follow in its dissassembly window?",
    "link": "https://reverseengineering.stackexchange.com/questions/14007/what-syntax-does-ollydbg-follow-in-its-dissassembly-window",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have some understanding of Assembly after reading some tutorials and a few chapters from the \"PC Assembly Book\". Right now, I am trying to understand the instructions I see in OllyDbg, but it seems to follow a different syntax than the NASM syntax I am used to.\n </p>\n <p>\n  This OllyDbg instruction for example doesn't seem intuitive to me, especially the\n  <code>\n   PTR SS:\n  </code>\n  part.\n </p>\n <pre><code>MOV DWORD PTR SS:[ESP+8],EBX\n</code></pre>\n <p>\n  I am not looking for an explanation of this particular construct, but rather a documentation for the whole syntax. How can I find that?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "427",
    "tags": [
        "disassembly",
        "assembly",
        "ollydbg"
    ],
    "user": "Helmy",
    "time": "Nov 21, 2016 at 8:53",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n \"The\n <code>\n  PTR SS:\n </code>\n part\" is not a separate part at all.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  OllyDbg uses the MASM/Intel syntax for disassembly. You can get the basic documentation at\n  <a href=\"http://www.cs.virginia.edu/~evans/cs216/guides/x86.html\" rel=\"nofollow noreferrer\">\n   http://www.cs.virginia.edu/~evans/cs216/guides/x86.html\n  </a>\n  . The\n  <a href=\"http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\" rel=\"nofollow noreferrer\">\n   Intel developer manuals\n  </a>\n  can give you more detail about what specific instructions do and what segments mean (in your case the memory location\n  <code>\n   [ESP+8]\n  </code>\n  uses the SS segment).\n </p>\n <p>\n  On Windows\n  <strong>\n   user mode\n  </strong>\n  it is safe to ignore all segments (\n  <code>\n   SS:[ESP+8]\n  </code>\n  means exactly the same as\n  <code>\n   DS:[ESP+8]\n  </code>\n  ), only the FS (32 bit) and GS (64 bit) segments have a meaning. See\n  <a href=\"https://en.wikipedia.org/wiki/Win32_Thread_Information_Block\" rel=\"nofollow noreferrer\">\n   this page\n  </a>\n  for more information.\n </p>\n <p>\n  A good resource is\n  <a href=\"https://www.scribd.com/document/331803715/Basics-of-Assembler\" rel=\"nofollow noreferrer\">\n   Basics of Assembler\n  </a>\n  by\n  <a href=\"https://tuts4you.com/download.php?list.17\" rel=\"nofollow noreferrer\">\n   Lena151\n  </a>\n  it should get you up to speed if you're not familiar with (dis)assembly. In\n  <a href=\"http://x64dbg.com\" rel=\"nofollow noreferrer\">\n   x64dbg\n  </a>\n  you can get brief descriptions and the relevant intel manual section for every instruction with a click of the mouse which might come in handy too.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "mrexodia",
            "time": "Nov 21, 2016 at 9:53",
            "is_accepted": true,
            "comments": []
        }
    ]
}