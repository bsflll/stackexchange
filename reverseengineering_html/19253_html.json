{
    "title": "What is _bittest macro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19253/what-is-bittest-macro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is an example of the\n  <code>\n   bt\n  </code>\n  instruction in a X64 Windows binary:\n </p>\n <pre><code>bt      eax, 18h\njnb     short loc_a\nlea     rcx, String\ncall    cs:__imp_wprintf\nmov     eax, [rbx+40h]\n</code></pre>\n <p>\n  In pseudocode:\n </p>\n <pre><code>if ( _bittest(&Mode, 0x18u) )\n{\n  wprintf(L\"String\");\n  Mode = Properties->Mode;\n}\n</code></pre>\n <p>\n  What is the\n  <code>\n   _bittest\n  </code>\n  macro used in a IF statement? Is it similar with\n  <code>\n   if(a & b == b)\n  </code>\n  or something? The code\n  <code>\n   if(a & b == b)\n  </code>\n  is used for checking if a flag is present in an OR-ed flag. And from debugging, I found the above assembly code is doing something like that.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "1k",
    "tags": [
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "Sep 4, 2018 at 16:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It tests if the\n  <em>\n   n\n  </em>\n  th bit is set, returns\n  <code>\n   true\n  </code>\n  if set,\n  <code>\n   false\n  </code>\n  if not set.\n </p>\n <p>\n  It's basically the same as\n  <code>\n   if(a & (1 << num_bit))\n  </code>\n  as the argument is the number of the bit to test rather than the bit (or flag if you will) itself.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Johann Aydinbas",
            "time": "Sep 4, 2018 at 16:44",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   _bittest\n  </code>\n  is a\n  <a href=\"https://msdn.microsoft.com/en-us/library/h65k4tze.aspx\" rel=\"nofollow noreferrer\">\n   compiler intrinsic which maps to the\n   <code>\n    bt\n   </code>\n   instruction\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   Generates the\n   <code>\n    bt\n   </code>\n   instruction, which examines the bit in position b of\n  address a, and returns the value of that bit.\n  </p>\n  <pre><code>unsigned char _bittest(  \n   long const *a,  \n   long b  \n);\n</code></pre>\n </blockquote>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 5, 2018 at 12:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   bt\n  </code>\n  is an x86\n  <a href=\"https://www.felixcloutier.com/x86/BT.html\" rel=\"nofollow noreferrer\">\n   instruction\n  </a>\n  to check if a bit is set in a number/value. It sets\n  <code>\n   CF\n  </code>\n  flag as the value of that bit and you can use\n  <code>\n   jb\n  </code>\n  /\n  <code>\n   jnb\n  </code>\n  /\n  <code>\n   jc\n  </code>\n  /\n  <code>\n   jnc\n  </code>\n  to check if its 1/0.\n </p>\n <pre><code>bt      eax, 18h\n</code></pre>\n <p>\n  As already mentioned in @Johann's answer, its equivalent to python\n </p>\n <pre><code>CF = (eax & (1 << 0x18)) >> 0x18\n</code></pre>\n <p>\n  I have added some code for you to play with it\n  <a href=\"https://gist.github.com/sudhackar/0f566726180ce533a4c8062b2294f021\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Sep 5, 2018 at 8:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}