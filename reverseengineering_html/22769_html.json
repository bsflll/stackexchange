{
    "title": "CMP ecx with DAT_",
    "link": "https://reverseengineering.stackexchange.com/questions/22769/cmp-ecx-with-dat",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I encountered this bit of assembly code:\n </p>\n <pre><code>cmp dword ptr [ECX + 0x24c], DAT_007c6bc0\n</code></pre>\n <p>\n  It's comparing\n  <code>\n   ECX + 0x24c\n  </code>\n  with\n  <code>\n   DAT_007c6bc0\n  </code>\n  . If they are not equal, it will just return from the function.\n </p>\n <p>\n  I have compared the output of Ghirda and IDA (free) and in IDA it looks like this:\n </p>\n <pre><code>cmp dword ptr [ecx + 24Ch], offset unk_7C6BC0\n</code></pre>\n <p>\n  Now, what exactly is\n  <code>\n   DAT_007c6bc0\n  </code>\n  ? I couldn't really find any information on it, and how does it compare to\n  <code>\n   ECX + 0x24c\n  </code>\n  since it just checks if the address is the same, right?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "203",
    "tags": [
        "assembly",
        "debugging"
    ],
    "user": "zwaffel",
    "time": "Dec 17, 2019 at 22:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In this example,\n  <code>\n   DAT_007c6bc0\n  </code>\n  (or\n  <code>\n   offset unk_7C6BC0\n  </code>\n  ) is just an address in program's (virtual) address space.\n </p>\n <p>\n  Now, comparing it with\n  <code>\n   [ECX + 0x24c]\n  </code>\n  , is comparing this address with the\n  <em>\n   data located at\n  </em>\n  <code>\n   ECX + 0x24c\n  </code>\n  in program's virtual address space,\n  <strong>\n   not\n  </strong>\n  with\n  <code>\n   ECX + 0x24c\n  </code>\n  . It's just a pointer comparison (\n  <code>\n   dword ptr\n  </code>\n  means that we treat these numbers as\n  <code>\n   dwords\n  </code>\n  -\n  <code>\n   4\n  </code>\n  bytes each); in pseudo code it could look like this:\n </p>\n <pre><code>if (*(ECX + 0x24c) != DAT_007c6bc0)\n    return;\n</code></pre>\n <p>\n  In other words, if\n  <code>\n   d\n  </code>\n  is the data located at\n  <code>\n   DAT_007c6bc0\n  </code>\n  in memory (\n  <code>\n   d = *DAT_007c6bc0\n  </code>\n  ), then the code will check whether data at\n  <code>\n   ECX + 0x24c\n  </code>\n  is a pointer to\n  <code>\n   d\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "Dec 17, 2019 at 14:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}