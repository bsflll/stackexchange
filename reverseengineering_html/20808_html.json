{
    "title": "Fork and Waitpid calls in a CTF linux binary",
    "link": "https://reverseengineering.stackexchange.com/questions/20808/fork-and-waitpid-calls-in-a-ctf-linux-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm doing one of my first linux crackmes.\n </p>\n <p>\n  In the first blocks of code, it goes inside some anti-debug routine and inside one of those it\n  <strong>\n   forks\n  </strong>\n  and after it calls a\n  <strong>\n   waitpid\n  </strong>\n  routine. I can verify it and understand purely the code but I can't get why the creators put this code and how it can be an anti-debug technique. These are the interesting blocks.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/0D7w4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Fork and Waitpid calls\" src=\"https://i.sstatic.net/0D7w4.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "814",
    "tags": [
        "linux",
        "anti-debugging"
    ],
    "user": "Kartone",
    "time": "Mar 7, 2019 at 16:37",
    "comments": [
        {
            "user": "wisk",
            "text": "<html><body><span class=\"comment-copy\">\n This is impossible to tell if you don't show the rest of the code. There are lot of ways to implement an anti-debugger with a sub-process.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Kartone",
            "text": "<html><body><span class=\"comment-copy\">\n Since it will be no-readable to screenshot other blocks of code, this is the executable I'm trying to analyze:\n <a href=\"https://www.dropbox.com/s/7oagp3scl54btob/reverse_me?dl=0\" rel=\"nofollow noreferrer\">\n  dropbox.com/s/7oagp3scl54btob/reverse_me?dl=0\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Basically, the process calls\n  <code>\n   fork\n  </code>\n  , on the child side it'll try to attach a debugger to the parent process:\n </p>\n <pre><code>ptrace(PTRACE_ATTACH, getppid(), 0, 0);\n</code></pre>\n <p>\n  If this syscall failed, it probably means a debugger is already attached to the parent process, this is your anti-debugger. To notify the parent process, the developer relies on the exit code. It's 1 if a debugger is attached, 0 otherwise.\n </p>\n <p>\n  On the parent side, it retrieves the exit code with the macro\n  <code>\n   WEXITSTATUS\n  </code>\n  . In C this is defined as:\n </p>\n <pre><code>#define WEXITSTATUS(x)  (_W_INT(x) >> 8)\n</code></pre>\n <p>\n  Which gives in assembly:\n </p>\n <pre><code>sar     eax, 8\nmovzx   eax, al\ntest    eax, eax\njz      short no_debugger\n</code></pre>\n <p>\n  This is another way to do a\n  <code>\n   PTRACE_TRACEME\n  </code>\n  . :)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "wisk",
            "time": "Mar 8, 2019 at 0:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">Thanks, this is a great explanation. May I continue to ask your help in some other parts of this executable that are behind my actual comprehension? Do I need to open other threads?</span>",
                    "time": null
                },
                {
                    "user": "wisk",
                    "text": "<span class=\"comment-copy\">Sure and it's up to you about creating another threads</span>",
                    "time": null
                },
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">I was thinking, why you said that on the child side it'll try to attach a debugger to the parent process? After the fork(), if the JNZ instruction is false I would be into the child process, and the getpid() call would return the PID of the child, why the PID of the parent process? What am I missing?</span>",
                    "time": null
                },
                {
                    "user": "wisk",
                    "text": "<span class=\"comment-copy\">The exectuable uses <code>getppid</code>(note the extra 'p') not <code>getpid</code>.  The first function returns the PID of the parent process where the latter returns the current PID.</span>",
                    "time": null
                },
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">OMG, how I missed it...sorry for the dumb question. -_-</span>",
                    "time": null
                }
            ]
        }
    ]
}