{
    "title": "Is it possible to hide the details of which compiler was used?",
    "link": "https://reverseengineering.stackexchange.com/questions/170/is-it-possible-to-hide-the-details-of-which-compiler-was-used",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The compiler adds system information to the output/object file that is created on compilation.\n </p>\n <ul>\n  <li>\n   Is there any compiler option that can prevent this information from being added?\n  </li>\n  <li>\n   Can the compiler signature be completely removed so as to make detection of the compiler used hard/improbable?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 5,
    "views": "2k",
    "tags": [
        "decompilation",
        "compilers",
        "c"
    ],
    "user": "asheeshr",
    "time": "Mar 29, 2013 at 8:46",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n I'm torn. It's not an\n <i>\n  exact\n </i>\n duplicate of\n <a href=\"http://reverseengineering.stackexchange.com/questions/11\">\n  this question\n </a>\n but there's a lot of common ground, and the answers are going to be almost the same...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "amccormack",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky, correct me if I'm wrong, but none of the answers in the question you reference discuss how to remove or obfuscate the compiler attributes, but instead discussed that they existed.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My answer here is specific to common C/C++ compilers, but the principles behind the answer generalize to other scenarios.\n </p>\n <p>\n  Compiler differences manifest themselves in many ways, some of them very subtle.  If it was strictly a matter of attributes in the executable header, then we could easily imagine rewriting said header.  However, each compiler has its own unique flavor of generated code (and which varies depending upon the optimization level).  Each compiler has its own default standard library (which often includes telltale strings), and different default boilerplate code at the executable's entrypoint.  There are other differences such as:  optimizations used in one compiler that are not used in another; the default calling convention could differ; the code generated for function prologues is noticeably different on gcc and MSVC (for example); different compilers have different code sequences and data structures for exception handling; and many more examples.  I would say that it is practically impossible to disguise which compiler produced a given executable.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Rolf Rolles",
            "time": "Mar 23, 2013 at 7:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To answer your first question: No, I don't think there are any compiler options for popular compilers that allow you to keep it from adding its compiler artifacts.\n </p>\n <p>\n  Part of the problem in this is explored by @Syzygy's answer: compilers generate, sometimes, very different instructions.\n </p>\n <p>\n  More than this though, knowing the\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11/what-hints-in-machine-code-can-point-me-to-the-compiler-which-was-used-to-genera\" title=\"artifacts\">\n   artifacts\n  </a>\n  left behind by different compilers allows you to help make it difficult to distinguish what compiler was used.  For example, imagine compiling your Windows executable with mingw, but then adding a RICH header to it.  This is a contrived example, but by adding this artifact of the MSVC compiler to the mingw output would probably confuse some automated tools.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Many of the previous answers have noted that this is impossible because the compiler will always leave artifacts behind. I decided to do a little case study using a program on Linux, although the idea is transferable.\n </p>\n <p>\n  For example, I created a small \"Hello World!\" file in C:\n </p>\n <pre><code>#include <stdio.h>\n\nint main(void) {\n    puts(\"Hello World!\");\n    return 0;\n}\n</code></pre>\n <p>\n  Then I compiled it and used\n  <code>\n   hexdump -C\n  </code>\n  on the results. The following except pretty clearly identifies the compiler!\n </p>\n <pre><code>00001020  47 43 43 3a 20 28 55 62  75 6e 74 75 2f 4c 69 6e  |GCC: (Ubuntu/Lin|\n00001030  61 72 6f 20 34 2e 36 2e  33 2d 31 75 62 75 6e 74  |aro 4.6.3-1ubunt|\n00001040  75 35 29 20 34 2e 36 2e  33 00 00 2e 73 79 6d 74  |u5) 4.6.3...symt|\n00001050  61 62 00 2e 73 74 72 74  61 62 00 2e 73 68 73 74  |ab..strtab..shst|\n00001060  72 74 61 62 00 2e 69 6e  74 65 72 70 00 2e 6e 6f  |rtab..interp..no|\n00001070  74 65 2e 41 42 49 2d 74  61 67 00 2e 6e 6f 74 65  |te.ABI-tag..note|\n00001080  2e 67 6e 75 2e 62 75 69  6c 64 2d 69 64 00 2e 67  |.gnu.build-id..g|\n00001090  6e 75 2e 68 61 73 68 00  2e 64 79 6e 73 79 6d 00  |nu.hash..dynsym.|\n000010a0  2e 64 79 6e 73 74 72 00  2e 67 6e 75 2e 76 65 72  |.dynstr..gnu.ver|\n000010b0  73 69 6f 6e 00 2e 67 6e  75 2e 76 65 72 73 69 6f  |sion..gnu.versio|\n000010c0  6e 5f 72 00 2e 72 65 6c  61 2e 64 79 6e 00 2e 72  |n_r..rela.dyn..r|\n000010d0  65 6c 61 2e 70 6c 74 00  2e 69 6e 69 74 00 2e 74  |ela.plt..init..t|\n000010e0  65 78 74 00 2e 66 69 6e  69 00 2e 72 6f 64 61 74  |ext..fini..rodat|\n000010f0  61 00 2e 65 68 5f 66 72  61 6d 65 5f 68 64 72 00  |a..eh_frame_hdr.|\n00001100  2e 65 68 5f 66 72 61 6d  65 00 2e 63 74 6f 72 73  |.eh_frame..ctors|\n00001110  00 2e 64 74 6f 72 73 00  2e 6a 63 72 00 2e 64 79  |..dtors..jcr..dy|\n00001120  6e 61 6d 69 63 00 2e 67  6f 74 00 2e 67 6f 74 2e  |namic..got..got.|\n00001130  70 6c 74 00 2e 64 61 74  61 00 2e 62 73 73 00 2e  |plt..data..bss..|\n00001140  63 6f 6d 6d 65 6e 74 00  00 00 00 00 00 00 00 00  |comment.........|\n</code></pre>\n <p>\n  Running\n  <code>\n   strip -R .comment\n  </code>\n  partially helps, and removes explicit mention of GCC completely, but there are still some tell-tale signs:\n </p>\n <pre><code>00000260  47 4e 55 00 00 00 00 00  02 00 00 00 06 00 00 00  |GNU.............|\n00000270  18 00 00 00 04 00 00 00  14 00 00 00 03 00 00 00  |................|\n00000280  47 4e 55 00 5f 8a 1b 97  01 5a ac d7 93 fb 96 29  |GNU._....Z.....)|\n* * *\n00000310  00 00 00 00 00 00 00 00  00 5f 5f 67 6d 6f 6e 5f  |.........__gmon_|\n00000320  73 74 61 72 74 5f 5f 00  6c 69 62 63 2e 73 6f 2e  |start__.libc.so.|\n00000330  36 00 70 75 74 73 00 5f  5f 6c 69 62 63 5f 73 74  |6.puts.__libc_st|\n00000340  61 72 74 5f 6d 61 69 6e  00 47 4c 49 42 43 5f 32  |art_main.GLIBC_2|\n00000350  2e 32 2e 35 00 00 00 00  02 00 02 00 00 00 00 00  |.2.5............|\n* * *\n00001020  00 2e 73 68 73 74 72 74  61 62 00 2e 69 6e 74 65  |..shstrtab..inte|\n00001030  72 70 00 2e 6e 6f 74 65  2e 41 42 49 2d 74 61 67  |rp..note.ABI-tag|\n00001040  00 2e 6e 6f 74 65 2e 67  6e 75 2e 62 75 69 6c 64  |..note.gnu.build|\n00001050  2d 69 64 00 2e 67 6e 75  2e 68 61 73 68 00 2e 64  |-id..gnu.hash..d|\n00001060  79 6e 73 79 6d 00 2e 64  79 6e 73 74 72 00 2e 67  |ynsym..dynstr..g|\n00001070  6e 75 2e 76 65 72 73 69  6f 6e 00 2e 67 6e 75 2e  |nu.version..gnu.|\n00001080  76 65 72 73 69 6f 6e 5f  72 00 2e 72 65 6c 61 2e  |version_r..rela.|\n00001090  64 79 6e 00 2e 72 65 6c  61 2e 70 6c 74 00 2e 69  |dyn..rela.plt..i|\n000010a0  6e 69 74 00 2e 74 65 78  74 00 2e 66 69 6e 69 00  |nit..text..fini.|\n000010b0  2e 72 6f 64 61 74 61 00  2e 65 68 5f 66 72 61 6d  |.rodata..eh_fram|\n000010c0  65 5f 68 64 72 00 2e 65  68 5f 66 72 61 6d 65 00  |e_hdr..eh_frame.|\n000010d0  2e 63 74 6f 72 73 00 2e  64 74 6f 72 73 00 2e 6a  |.ctors..dtors..j|\n000010e0  63 72 00 2e 64 79 6e 61  6d 69 63 00 2e 67 6f 74  |cr..dynamic..got|\n000010f0  00 2e 67 6f 74 2e 70 6c  74 00 2e 64 61 74 61 00  |..got.plt..data.|\n00001100  2e 62 73 73 00 00 00 00  00 00 00 00 00 00 00 00  |.bss............|\n</code></pre>\n <p>\n  I decided to see what would happen if I replaced the last portion of this code with null bytes. The program still worked fine, but this decreases portability to other operating systems.\n </p>\n <p>\n  If you try to replace\n  <code>\n   GNU\n  </code>\n  with another compiler, say,\n  <code>\n   clang\n  </code>\n  , it still works fine. Although it may confuse the reverse engineer, it certainly isn't that difficult to notice.\n </p>\n <p>\n  Finally, I tried to see what happens if I removed any trace of\n  <code>\n   GLIBC\n  </code>\n  ...\n </p>\n <pre><code>./a.out: ./a.out: no version information available (required by ./a.out)\n./a.out: relocation error: ./a.out: symbol , version  not defined in file  with link time reference\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "George V. Williams",
            "time": "Mar 29, 2013 at 18:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">\"artifacts\" don't include just strings. Even if you remove all strings, the code remains, and often can point to the compiler used quite definitely.</span>",
                    "time": null
                },
                {
                    "user": "jyz",
                    "text": "<span class=\"comment-copy\">Although your own findings were interesting, Igor is right. It's not just about strings, but also portions of code that the compiler inserts in your final binary. You should reverse engineer it and go redefining instruction by instruction until you completely remove all the characteristics. Try to create another version of your program, but instead of puts() use i.e. scanf(), you'll notice that they have some characteristics in common.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Short answer: no. I don't know of any compiler that has a \"stealth mode\" switch and if it would have the end result would IMO just be another signature for the same compiler.\n </p>\n <p>\n  As @omghai2u suggest you can manually modify the binary and test it against automated tools but I don't think it will help much.\n </p>\n <p>\n  A better approach would perhaps be to use an exe\n  <a href=\"http://en.wikipedia.org/wiki/Executable_compression\" rel=\"nofollow\">\n   packer/protector\n  </a>\n  . Although an experienced RE can probably unpack it, it still means a lot of work and knowledge. So at least it's a first line of defense.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Remko",
            "time": "Mar 23, 2013 at 11:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "omghai2u",
                    "text": "<span class=\"comment-copy\">So he packs his exe, you unpack it and you're left with the original compiler artifacts in many cases.  By adding in false compiler artifacts it, if done enough and correct, should make it impossible to determine which compiler was really used.  A first line of RE defense is to pack, sure maybe (personally, I disagree); but certainly not to hide compiler signature from analysis.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can try:\n </p>\n <ul>\n  <li>\n   To use the\n   <code>\n    strip\n   </code>\n   and the\n   <code>\n    sstrip\n   </code>\n   command to remove some traces.\n  </li>\n  <li>\n   To use weird compilations options\n  </li>\n  <li>\n   To use weird (like\n   <a href=\"http://bellard.org/tcc/\" rel=\"nofollow\">\n    tcc\n   </a>\n   ) or old compilers\n  </li>\n  <li>\n   To use some packers\n  </li>\n </ul>\n <p>\n  But there is no silver bullet. Maybe you should question yourself about the\n  <em>\n   why\n  </em>\n  aspect of your question instead of the\n  <em>\n   how\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "jvoisin",
            "time": "Jul 15, 2013 at 20:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Is it the <code>sstrip</code> from <a href=\"https://github.com/BR903/ELFkickers\" rel=\"nofollow noreferrer\">ElfKickers</a> that you are mentionning ? (because I didn't find a package for my Debian)</span>",
                    "time": null
                },
                {
                    "user": "jvoisin",
                    "text": "<span class=\"comment-copy\">Yes it is. But feel free to open a ticket to get them included in Debian ;)</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I can compile it for me, no package needed. ;-)</span>",
                    "time": null
                }
            ]
        }
    ]
}