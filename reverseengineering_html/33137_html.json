{
    "title": "Reverse Engineer a RC ECU",
    "link": "https://reverseengineering.stackexchange.com/questions/33137/reverse-engineer-a-rc-ecu",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking to reverse engineer and access hidden menus within a RC airplane ECU.\n </p>\n <p>\n  I have decompiled the code using Ghidra, for the desktop app and can see where the menus I am trying to access are, but I am unsure on how to go about reverse engineering the ECU itself. I have a working setup, along with a second, broken ECU where I can see the chips used for the board. I also know the protocol: Point to Point, I have a desktop app that I have built that can communicate with it, including manual serial inputs and some of the typical commands it uses. The ECU uses RS232 for communication, but this adapted through a CP210x USB to UART bridge into the computer.\n </p>\n <p>\n  The app itself is some form of visual basic, so Ghidra does its best but can only do so much. VBReformer crashes when attempting to open nearly any form.\n </p>\n <p>\n  I believe I also know the encoding algorithm used, but I am unsure on how I could apply it to the decompiled code and assembly listing to find the password. I have used the typical phrases/abbreviations when searching through the file and have not found anything.\n </p>\n <p>\n  How would I be able to crack the ECU's code itself, or allow myself to see the menus that would only show in an admin mode? Let me know what additional information would be helpful, thank you for taking the time to read this!\n </p>\n <p>\n  Some of the ECU chips if relevant:\n </p>\n <p>\n  ARMx STM32F103 RCT6\nR2701 P028 (x3)\n7149 - SAGÎ” W98K\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "41",
    "tags": [
        "decompilation",
        "hardware",
        "visual-basic",
        "ecu"
    ],
    "user": "OGWM",
    "time": "Jul 31, 2024 at 8:18",
    "comments": [],
    "answers_data": []
}