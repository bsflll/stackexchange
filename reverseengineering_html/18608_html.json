{
    "title": "Help Needed reversing a function inside a DLL [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/18608/help-needed-reversing-a-function-inside-a-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions asking for help\n       <b>\n        reverse-engineering a specific system\n       </b>\n       are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2018-07-07 01:55:34Z\">\n        6 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/18608/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I have a broken installation of Metalogix Archive Manager (MAM). Sometimes, I need to go and retrieve attachments that this has archived when it was previously working.\n </p>\n <p>\n  The original attachment name can be anything.pdf. The attachment name for an archived PDF looks like this -\n  <code>\n   2_000f834l.pdf.zip\n  </code>\n </p>\n <p>\n  The HTTP request for the PDF above -\n  <code>\n   http://mam/exchangePAMWS/GetAttachment.aspx?PARAM=003D05g0mg1g04k0fg1204w09w1404Y0gM1904g0fg0N0480cg0M0380dg0Q0340cM0R03o0cM0Q04o0dg0M0480e01403w0dw0M03k0cw0Q03o0d00T03s0d00M04809w1304Y0jw1904g0fg0Q03c0cg0T03k0d00O03g0800w\n  </code>\n </p>\n <p>\n  I would like to know how I can extract the archived attachment name from that giant string.\n </p>\n <p>\n  I've uploaded the GetAttachment.cs file referenced by the GetAttachment.aspx file, as well as the original DLL it came from.\n </p>\n <p>\n  If anyone is interested, I can send over the DLLs.\n </p>\n <p>\n  <strong>\n   Edit\n  </strong>\n </p>\n <p>\n  Ok, I've found some things here using Visual Studio interactive mode.\n </p>\n <p>\n  The Decode6Bit function in EncodeUtils.cs is the key. I've ran that function using the PARAM value above -\n </p>\n <pre><code>> var txt = \"003D05g0mg1g04k0fg1204w09w1404Y0gM1904g0fg0N0480cg0M0380dg0Q0340cM0R03o0cM0Q04o0dg0M0480e01403w0dw0M03k0cw0Q03o0d00T03s0d00M04809w1304Y0jw1904g0fg0Q03c0cg0T03k0d00O03g0800w\";\n> Console.WriteLine(Decode6bit(txt))\nTYPE=BH&DOCID=1B10254135634F50B8D860524647740B&CONID=43175424\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "207",
    "tags": [
        "dll",
        "c#"
    ],
    "user": "Tyler Applebaum",
    "time": "6 years ago",
    "comments": [
        {
            "user": "Tyler Applebaum",
            "text": "<html><body><span class=\"comment-copy\">\n Whoops, sorry. New link here. I appreciate your interest.\n <a href=\"https://drive.google.com/open?id=1MSFJ7be-Lvfg2lQmVWI6Ha465s7wbvkZ\" rel=\"nofollow noreferrer\">\n  drive.google.com/open?id=1MSFJ7be-Lvfg2lQmVWI6Ha465s7wbvkZ\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tyler Applebaum",
            "text": "<html><body><span class=\"comment-copy\">\n That link works for me...\n <a href=\"https://imgur.com/a/1S6sSYO\" rel=\"nofollow noreferrer\">\n  imgur.com/a/1S6sSYO\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tyler Applebaum",
            "text": "<html><body><span class=\"comment-copy\">\n Ohhhh.... I see. That's an internal DNS name only. The URL is there as an example of a real URL that brings me to an attachment named 2_000f834l.pdf.zip.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tyler Applebaum",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  mam\n </code>\n It's internal only, so you can't access it. That has no bearing on the parameter. The interesting piece is the PARAM=xxxx bit that's passed to GetAttachment.aspx.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Open the\n  <code>\n   Cryptography.dll\n  </code>\n  file in\n  <a href=\"https://github.com/0xd4d/dnSpy.git\" rel=\"nofollow noreferrer\">\n   dnSpy\n  </a>\n  . The\n  <code>\n   PARAM\n  </code>\n  value can be decoded with this\n  <code>\n   Decode6bit()\n  </code>\n  function found in\n  <code>\n   EncodeUtilscs\n  </code>\n  :\n </p>\n <pre><code>public static string Decode6bit(string input) {\n    string value = input.Substring(0, 4);\n    ushort num = Convert.ToUInt16(value, 16);\n    int length = input.Length;\n    string text = \"\";\n    ushort[] array = new ushort[8];\n    for (int i = 4; i < length; i += 8) {\n        for (int j = 0; j < 8; j++) {\n            char c = input[i + j];\n            ushort num2;\n            if (c == '>') {\n                num2 = 63;\n            } else if (c == '<') {\n                num2 = 62;\n            } else if (c >= 'a') {\n                num2 = (ushort)((byte)c - 97 + 10);\n            } else if (c >= 'A') {\n                num2 = (ushort)((byte)c - 65 + 36);\n            } else {\n                num2 = (ushort)((byte)c - 48);\n            }\n            array[j] = num2;\n        }\n        ushort num3 = (ushort)((int)array[0] << 10 | (int)array[1] << 4 | (array[2] & 60) >> 2);\n        ushort num4 = (ushort)((int)(array[2] & 3) << 14 | (int)array[3] << 8 | (int)array[4] << 2 | (array[5] & 48) >> 4);\n        ushort num5 = (ushort)((int)(array[5] & 15) << 12 | (int)array[6] << 6 | (int)array[7]);\n        text += (char)num3;\n        text += (char)num4;\n        text += (char)num5;\n    }\n    if (text.Length > (int)num) {\n        text = text.Substring(0, (int)num);\n    }\n    return text;\n}\n</code></pre>\n <p>\n  According to the question:\n </p>\n <pre><code>Input: \"003D05g0mg1g04k0fg1204w09w1404Y0gM1904g0fg0N0480cg0M0380dg0Q0340cM0R03o0cM0Q04o0dg0M0480e01403w0dw0M03k0cw0Q03o0d00T03s0d00M04809w1304Y0jw1904g0fg0Q03c0cg0T03k0d00O03g0800w\";\nOutput: \"TYPE=BH&DOCID=1B10254135634F50B8D860524647740B&CONID=43175424\"\n</code></pre>\n <p>\n  The output string is mapped in server. After encoding/decoding the string, the output is appended to the URL and the required file is downloaded as follows. Open\n  <code>\n   exchangePAMCommon.dll\n  </code>\n  file in\n  <a href=\"https://github.com/0xd4d/dnSpy.git\" rel=\"nofollow noreferrer\">\n   dnSpy\n  </a>\n  . The URL is appended in\n  <code>\n   MessageRetrieval.cs\n  </code>\n  :\n </p>\n <pre><code>if (text != null) {\n    str = \"02BB015A_\" + EncodeUtils.EncodeXOR(text2, text);\n    requestUriString = protocol + downloadServer + \"/exchangePAMWS/GetFile.aspx?\" + str;\n}\nelse {\n    str = EncodeUtils.Encode6bit(text2);\n    requestUriString = protocol + downloadServer + \"/exchangePAMWS/GetFile.aspx?PARAM=\" + str;\n}\nhttpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Biswapriyo",
            "time": "Jul 6, 2018 at 5:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}