{
    "title": "Booting a Linux kernel ARM64 boot executable Image",
    "link": "https://reverseengineering.stackexchange.com/questions/31879/booting-a-linux-kernel-arm64-boot-executable-image",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am self learning reverse engineering and working on reversing a firmware image for an unknown ioT device that's running on Zephyr. I have the firmware image (.img file), which returns '\n  <em>\n   Linux kernel ARM64 boot executable Image\n  </em>\n  ' when running the\n  <em>\n   file\n  </em>\n  command. I've tried running\n  <em>\n   binwalk\n  </em>\n  to extract anything meaningful, but all I get is the Linux kernel ARM64 image and text. My question is, is it even possible to boot this image and how can I go about this?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "264",
    "tags": [
        "linux",
        "qemu",
        "arm64"
    ],
    "user": "Mario9987",
    "time": "May 17, 2023 at 20:13",
    "comments": [
        {
            "user": "secfren",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe possible depending on the model:\n <a href=\"https://docs.zephyrproject.org/latest/boards/arm64/index.html\" rel=\"nofollow noreferrer\">\n  docs.zephyrproject.org/latest/boards/arm64/index.html\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}