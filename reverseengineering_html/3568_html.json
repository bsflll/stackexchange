{
    "title": "How to break on instruction that hasn't been traced yet?",
    "link": "https://reverseengineering.stackexchange.com/questions/3568/how-to-break-on-instruction-that-hasnt-been-traced-yet",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have some questions regarding IDA and Ollydbg.\n </p>\n <p>\n  First, is there a way to create a record with traced instructions and let the debugger automatically break, when it hits an instruction that hasn't been traced in the record ?\n </p>\n <p>\n  My second question is refering to IDA tracing options. \nI wrote a simple Win32 GUI application in C++ which mainly consists of a message pump (\n  <code>\n   GetMessage\n  </code>\n  ,\n  <code>\n   TranslateMessage\n  </code>\n  and\n  <code>\n   DispatchMessage\n  </code>\n  ) and a\n  <code>\n   WindowProcedure\n  </code>\n  . I tried the following:\n </p>\n <ol>\n  <li>\n   I set a breakpoint in the message pump;\n  </li>\n  <li>\n   Started the tracing from there;\n  </li>\n  <li>\n   Set a second breakpoint in the\n   <code>\n    WindowProcedure\n   </code>\n   that triggers a break when I click on a button.\n  </li>\n </ol>\n <p>\n  What IDA traced are only the instructions from the message pump not the ones from the\n  <code>\n   WindowProcedure\n  </code>\n  , though it should at least have traced the\n  <code>\n   DefaultWindowProc\n  </code>\n  instruction.\n </p>\n <p>\n  Can anyone tell me whats the reason for that?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "621",
    "tags": [
        "ida",
        "debugging"
    ],
    "user": "user3773",
    "time": "Feb 5, 2014 at 16:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Intel's Pin software can do this. It may take some effort, however.\n  </li>\n  <li>\n   Is WindowProcedure a system call? I don't think IDA can debug kernel code - you may have to use windbg if that is the case.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Albert Myers",
            "time": "Jan 29, 2014 at 16:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anton Kochkov",
                    "text": "<span class=\"comment-copy\">IDA can connect to the remote WinDbg instance.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  STEGANOGRAPHED IMAGE :) COPY HEXEDIT AND RIP\n  \n\n  <img alt=\"HITAID DLL\" src=\"https://i.sstatic.net/qA3rb.jpg\"/>\n  \n\n  This answer is related to\n  <code>\n   hittrace\n  </code>\n  feature of ollydbg\n  \n\n  Attached is a\n  <code>\n   odbg110\n  </code>\n  plugin\n  <code>\n   hitaid.dll\n  </code>\n  \n\n  the dll has been\n  <code>\n   7zipped and hexedited\n  </code>\n  to be uploaded here as jpg\n  \n\n  download hexedit and\n  <code>\n   delete first 10 bytes\n  </code>\n  and\n  <code>\n   save as hitaid.7z\n  </code>\n  \n\n  use 7zip to\n  <code>\n   extract hitaid.dll\n  </code>\n  from the archieve\n </p>\n <p>\n  ollydbg has a feature called\n  <code>\n   Hittrace\n  </code>\n  this plugin leverages that feature to achieve what is queried\n </p>\n <p>\n  put the dll in\n  <code>\n   odbg110 plugin path\n  </code>\n  \n\n  <code>\n   open calc.exe\n  </code>\n  in odbg\n  \n\n  <code>\n   analyse\n  </code>\n  the main module viz calc.exe\n  \n\n  <code>\n   right click\n  </code>\n  in\n  <code>\n   disasm window\n  </code>\n  select\n  <code>\n   hittrace\n  </code>\n  in context menu\n  \n\n  select\n  <code>\n   add all recognized procedures submenu\n  </code>\n  \n\n  all recognized procedures will be\n  <code>\n   marked with grey marker\n  </code>\n  \n\n  <code>\n   run\n  </code>\n  the exe with\n  <code>\n   f9\n  </code>\n  \n\n  all instruction that were hit would be\n  <code>\n   colored red\n  </code>\n  \n\n  hitting\n  <code>\n   ctrl+L\n  </code>\n  from start of disasm window will cycle through all hits\n  \n\n  use plugin to remove all the hits\n  \n\n  if the required feature say\n  <code>\n   button 7 is clicked\n  </code>\n  now\n  \n\n  the new code path that\n  <code>\n   pertains to button 7\n  </code>\n  would be colored red\n  \n\n  new hits can be reached by selecting disasm window start and pressing ctrl+L\n  \n\n  plugin can be used\n  <code>\n   repeatedly\n  </code>\n  to remove hits \nthe app\n  <code>\n   need not be\n  </code>\n  paused for the interaction \nyou can set f2 breakpoints as required in the new code path and reenable hittrace via disasm context menu\n </p>\n <p>\n  src below\n </p>\n <pre><code>#include <windows.h>\n#include \"plugin.h\"\n#pragma warning(disable:4100)\nBOOL WINAPI DllEntryPoint(HINSTANCE hi,DWORD reason,LPVOID reserved) \n{\n    return 1;\n};\nextc int _export cdecl ODBG_Plugindata(char shortname[32]) \n{\n    strcpy(shortname,\"HitAid\");\n    return PLUGIN_VERSION;\n};\nextc int _export cdecl ODBG_Plugininit( int ollydbgversion,HWND hw,ulong *features) \n{\n    Addtolist(0,0,\"Hit Trace Aid Plugin by blabb\"); \n    return 0;\n};\nextc int _export cdecl ODBG_Pluginmenu(int origin,char data[4096],void *item) \n{\n    switch (origin)    \n    {\n    case PM_MAIN:\n        strcpy(data,\"0 &HitAid\");\n        return 1;\n    default: break;\n    };\n    return 0;\n};\nextc void _export cdecl ODBG_Pluginaction(int origin,int action,void *item) \n{\n    uchar *buff , *retu;\n    unsigned long psize, i , addr;\n    t_module * mod = Findmodule( Plugingetvalue(VAL_MAINBASE) );    \n    addr = mod->codebase;\n    if (origin==PM_MAIN)    \n    {\n        switch (action) \n        {\n        case 0:\n            retu = Findhittrace ( addr, &buff,&psize);\n            for (i=0;i < psize;i++ )    {\n                if ( retu[i] != ( TR_TRACE | TR_HIT )  ) \n                {\n                    continue;\n                }\n                Modifyhittrace((addr+i) , (addr+i+1),ATR_REMOVE);\n            }\n            break;\n        default:\n            break;\n        };\n    };\n};\n</code></pre>\n <p>\n  compiled with vs 2010 express and modified pdk by alex downloadable from www.ollydbg.de\n </p>\n <pre><code>cl /nologo /W4 /O1 /J /analyze /LD /WX /D\"_CRT_SECURE_NO_WARNINGS\" hitaid.cpp    \n/link /subsystem:windows /dll /ENTRY:DllEntryPoint/MERGE:.rdata=.text .\\ollydbgvc7.lib\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 31, 2014 at 6:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}