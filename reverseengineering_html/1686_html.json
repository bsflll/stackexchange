{
    "title": "How to detect a virtualized environment?",
    "link": "https://reverseengineering.stackexchange.com/questions/1686/how-to-detect-a-virtualized-environment",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What are the different ways for a program to detect that it executes inside a virtualized environment ? And, would it be possible to detect what kind of virtualization is used ?\n </p>\n</div>\n</body></html>",
    "votes": "19",
    "answers": 8,
    "views": "28k",
    "tags": [
        "anti-debugging",
        "virtual-machines"
    ],
    "user": "perror",
    "time": "Apr 10, 2013 at 7:45",
    "comments": [
        {
            "user": "amccormack",
            "text": "<html><body><span class=\"comment-copy\">\n Are you trying to fool the program that is trying to detect that it is running in a virtual environment into thinking that it is not?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n I think that the spectrum of my question is a bit too wide. I will edit it to focus only on the detection of a virtualized environment (the counter-measures can come after).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Note that some tools (\n <a href=\"http://micky.ibh.net/~liske/imvirt.html\" rel=\"nofollow noreferrer\">\n  imvirt\n </a>\n ) or there exist some other similar\n <a href=\"http://www.dmo.ca/blog/detecting-virtualization-on-linux/\" rel=\"nofollow noreferrer\">\n  simple techniques\n </a>\n . But, these techniques are based on the fact that the virtualizer is not trying to hide itself.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Grijesh Chauhan",
            "text": "<html><body><span class=\"comment-copy\">\n I post some links [Thwarting Virtual Machine Detection A](handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf) ..[This not detection](Can Operating Systems tell if they're running in a Virtual Machine?) ..VMD Initially written by\n <a href=\"http://en.wikipedia.org/wiki/Blue_Pill_%28software%29\" rel=\"nofollow noreferrer\">\n  research purpose RED-Pill and Blue-Pil\n </a>\n , Two new viruses for attack purpose are\n <code>\n  MyDoom and stuXmet\n </code>\n both couldn't be disassembled properly yet!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the list could be endless, so I'll keep it short:\n </p>\n <ul>\n  <li>\n   virtualized environment artifacts: registry keys, hard disk name, network card address, specific drivers,...\n  </li>\n  <li>\n   environment differences: no mouse, internet connection, sound card,...\n  </li>\n  <li>\n   execution difference: detection of block translation (create another thread and apply statistics on IP),\n   <a href=\"https://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm?r=1593#1363\" rel=\"nofollow noreferrer\">\n    different system registers values\n   </a>\n   , ...\n   <ul>\n    <li>\n     lack of user interaction (specific for automated environment): no mouse movement, no file operations,...\n    </li>\n   </ul>\n  </li>\n  <li>\n   specific environment differences:\n   <a href=\"https://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm?r=1593#2015\" rel=\"nofollow noreferrer\">\n    VmWare backdoor\n   </a>\n   ,\n   <a href=\"https://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm?r=1593#1900\" rel=\"nofollow noreferrer\">\n    VirtualPC exception bug\n   </a>\n   , ...\n  </li>\n </ul>\n <p>\n  (check the\n  <a href=\"https://reverseengineering.stackexchange.com/tags/anti-debug/info\">\n   anti-debug tag wiki\n  </a>\n  for more)\n </p>\n</div>\n</body></html>",
            "votes": "15",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are a multitude of ways to detect virtual machines/emulators, mostly following the pattern of identifying an imperfection in the simulation and then testing for it.\n </p>\n <p>\n  At the simplest end, common virtualization toolkits plaster their name over all kinds of system drivers and devices.  Simply looking at the name of network connections or their MAC address might be sufficient to identify VMware if not specifically configured to mask that.  Likewise, the VM's memory may have plenty of strings that make the virtualization software's presence obvious.\n </p>\n <p>\n  Some other VM artifacts come from the necessity for both host and guest to have a data structure accessible to the processor that can't overlap, such as the SIDT assembly instruction to return the interrupt descriptor table register.  (IDT)  Virtual machines typically store the IDT at a higher register than a physical host.\n </p>\n <p>\n  Measuring the time of certain functions or instructions that would normally require interaction with the virtualization system is a way to indirectly infer you're executing in a VM.\n </p>\n <p>\n  Two approaches come to mind as anti-anti-VM methods:  First, one can modify the virtual environment to remove all traces possible of virtualization, which can work well against simple checks for 'vmware' or similar strings, causing an arms race of sorts between known techniques and crafty vm configuration.\n </p>\n <p>\n  The second approach is to rely heavily on static analysis to identify VM detection techniques and patch them to neutralize their effect after doing so to yield a non-VM-aware executable that can then be dynamically analyzed.\n </p>\n <p>\n  A couple sources with good information, if a couple years old:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.symantec.com/avcenter/reference/Virtual_Machine_Threats.pdf\" rel=\"nofollow\">\n    http://www.symantec.com/avcenter/reference/Virtual_Machine_Threats.pdf\n   </a>\n   - Peter Ferrie's Attacks on Virtual Machine emulators\n  </li>\n  <li>\n   <a href=\"http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf\" rel=\"nofollow\">\n    http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf\n   </a>\n   - A 2006 presentation on different anti-Vm and anti-anti-VM techniques.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "15",
            "user": "0xC0000022L",
            "time": "Apr 17, 2013 at 4:53",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here are some tricks for detecting VM's:\n </p>\n <h2>\n  VirtualBox\n </h2>\n <ul>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/RU6A2UuB\" rel=\"noreferrer\">\n     http://pastebin.com/RU6A2UuB\n    </a>\n    (9 different methods, registry, dropped VBOX dlls, pipe names etc)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/xhFABpPL\" rel=\"noreferrer\">\n     http://pastebin.com/xhFABpPL\n    </a>\n    (Machine provider name)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/v8LnMiZs\" rel=\"noreferrer\">\n     http://pastebin.com/v8LnMiZs\n    </a>\n    (Innotek trick)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/fPY4MiYq\" rel=\"noreferrer\">\n     http://pastebin.com/fPY4MiYq\n    </a>\n    (Bios Brand and Bios Version)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/Geggzp4G\" rel=\"noreferrer\">\n     http://pastebin.com/Geggzp4G\n    </a>\n    (Bios Brand and Bios Version)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/T0s5gVGW\" rel=\"noreferrer\">\n     http://pastebin.com/T0s5gVGW\n    </a>\n    (Parsing SMBiosData searching for newly-introduced or bizarre type)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/AjHWApes\" rel=\"noreferrer\">\n     http://pastebin.com/AjHWApes\n    </a>\n    (Cadmus Mac Address Trick)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/wh4NAP26\" rel=\"noreferrer\">\n     http://pastebin.com/wh4NAP26\n    </a>\n    (VBoxSharedFolderFS Trick)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/Nsv5B1yk\" rel=\"noreferrer\">\n     http://pastebin.com/Nsv5B1yk\n    </a>\n    (Resume Flag Trick)\n   </p>\n  </li>\n </ul>\n <h2>\n  VirtualPc\n </h2>\n <ul>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/wuqcUaiE\" rel=\"noreferrer\">\n     http://pastebin.com/wuqcUaiE\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/VDDRcmdL\" rel=\"noreferrer\">\n     http://pastebin.com/VDDRcmdL\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/exAK5XQx\" rel=\"noreferrer\">\n     http://pastebin.com/exAK5XQx\n    </a>\n    (Reset Trick)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://pastebin.com/HVActZMC\" rel=\"noreferrer\">\n     http://pastebin.com/HVActZMC\n    </a>\n    (CPUID Trick)\n   </p>\n  </li>\n </ul>\n <h2>\n  Hypervisor detection\n </h2>\n <ul>\n  <li>\n   <a href=\"http://pastebin.com/2gv72r7d\" rel=\"noreferrer\">\n    http://pastebin.com/2gv72r7d\n   </a>\n  </li>\n </ul>\n <p>\n  Even though, I tried to make the code self explanatory, you can also refer to the corresponding blog posts for more detailed info.\n </p>\n</div>\n</body></html>",
            "votes": "12",
            "user": "perror",
            "time": "Jun 22, 2014 at 21:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote a test program a while go (in Delphi).\n </p>\n <p>\n  The following two functions detect VMware and HyperV\n </p>\n <pre><code>// VMware detection as described by Elias Bachaalany\nfunction IsInsideVMware: Boolean;\nbegin\n  Result := True;\n\n  try\n    asm\n      push edx;\n      push ecx;\n      push ebx;\n\n      mov eax, 'VMXh';\n      mov ebx, 0;\n      mov ecx, 10;\n      mov edx, 'VX';\n\n      in eax, dx;\n\n      cmp ebx, 'VMXh';\n      setz [Result];\n\n      pop ebx;\n      pop ecx;\n      pop edx;\n    end;\n  except\n    Result := False;\n  end;\nend;\n\nfunction IsHyperV: Boolean;\nasm\n  cpuid;\n  test ecx, ecx;\n  sets [Result];\nend;\n</code></pre>\n <p>\n  The following function checks for Hyper-V via the Vendor Branding string (on VMware this returns \"VMwareVMware\":\n </p>\n <pre><code>function IsRunningUnderHyperV: BOOL; stdcall;\nvar\n  VMBranding: array[0..12] of AnsiChar;\nbegin\n  asm\n    mov eax, $40000000;\n    cpuid;\n        mov dword ptr [VMBranding+0], ebx;  // Get the VM branding string\n        mov dword ptr [VMBranding+4], ecx;\n        mov dword ptr [VMBranding+8], edx;\n  end;\n  VMBranding[12] := #0;\n\n  Result := CompareText(String(VMBranding), 'Microsoft Hv') = 0;\nend;\n</code></pre>\n <p>\n  Relevant links:\n </p>\n <ul>\n  <li>\n   <a href=\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1005763\" rel=\"nofollow\">\n    VMware KB Detecting and Using CPU Features in Applications\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.codeproject.com/Articles/9823/Detect-if-your-program-is-running-inside-a-Virtual\" rel=\"nofollow\">\n    Codeproject, Detect if your program is running inside a Virtual Machine\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "0xC0000022L",
            "time": "Apr 17, 2013 at 4:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In addons on the answers post before, cuckoosandbox implements few yara rules for vm detection:\n </p>\n <p>\n  <a href=\"https://github.com/cuckoobox/cuckoo/blob/1884b5579ff8e053b3d4a8523a5da576eee43552/data/yara/binaries/vmdetect.yar\" rel=\"nofollow\">\n   https://github.com/cuckoobox/cuckoo/blob/1884b5579ff8e053b3d4a8523a5da576eee43552/data/yara/binaries/vmdetect.yar\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Tuan Ha",
            "time": "Oct 24, 2015 at 15:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">Please add a short description about the link and/or the relevant matter. Link-only answers are not considered answers.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can find common tricks in\n  <a href=\"https://github.com/cuckoobox/cuckoo/blob/1884b5579ff8e053b3d4a8523a5da576eee43552/data/yara/binaries/vmdetect.yar\" rel=\"nofollow\">\n   cuckoo sandbox repository\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Tuan Ha",
            "time": "Oct 24, 2015 at 15:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">Please add a short description about the link and/or the relevant matter. Link-only answers are not considered answers.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just as a kind of related note, but side-stepping the actual question a bit. There was a presentation at the VB conference last year (2013) in Berlin, about a KVM-based modified hypervisor. It is called CXPInspector and the presentation they gave (the first one in the tech stream) can be found\n  <a href=\"http://www.virusbtn.com/pdf/conference_slides/2013/WillemsHund-VB2013.pdf\" rel=\"nofollow\">\n   here\n  </a>\n  .\n </p>\n <p>\n  <a href=\"http://www-brs.ub.ruhr-uni-bochum.de/netahtml/HSS/Diss/WillemsCarsten/diss.pdf\" rel=\"nofollow\">\n   Here's the corresponding thesis/dissertation\n  </a>\n  (237 pages) and\n  <a href=\"http://www.syssec.rub.de/media/emma/veroeffentlichungen/2012/11/26/TR-HGI-2012-002.pdf\" rel=\"nofollow\">\n   here's a related somewhat shorter paper\n  </a>\n  (though not about CXPInspector directly).\n </p>\n <p>\n  The method makes use of newer processor features. The presentation gives a nice overview. Basically the only conceivable attack - aside from those based on flaws in the CPU and the hypervisor implementation - would be a timing attack. And even though many machines these days are fast, that's not exactly a very reliable method. It used to be, but these days it's gambling, at best.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jan 31, 2014 at 4:18",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is a collection of anti-sandbox/vm/debugger techniques implemented in a open source program which will give you a clear idea how to detect virtualization:\n  <a href=\"https://github.com/LordNoteworthy/al-khaser\" rel=\"nofollow noreferrer\">\n   https://github.com/LordNoteworthy/al-khaser\n  </a>\n  .\n </p>\n <p>\n  Here are the list of supported techniques:\n </p>\n <h3>\n  Anti-debugging attacks\n </h3>\n <ul>\n  <li>\n   IsDebuggerPresent\n  </li>\n  <li>\n   CheckRemoteDebuggerPresent\n  </li>\n  <li>\n   Process Environement Block (BeingDebugged)\n  </li>\n  <li>\n   Process Environement Block (NtGlobalFlag)\n  </li>\n  <li>\n   ProcessHeap (Flags)\n  </li>\n  <li>\n   ProcessHeap (ForceFlags)\n  </li>\n  <li>\n   NtQueryInformationProcess (ProcessDebugPort)\n  </li>\n  <li>\n   NtQueryInformationProcess (ProcessDebugFlags)\n  </li>\n  <li>\n   NtQueryInformationProcess (ProcessDebugObject)\n  </li>\n  <li>\n   NtSetInformationThread (HideThreadFromDebugger)\n  </li>\n  <li>\n   NtQueryObject (ObjectTypeInformation)\n  </li>\n  <li>\n   NtQueryObject (ObjectAllTypesInformation)\n  </li>\n  <li>\n   CloseHanlde (NtClose) Invalide Handle\n  </li>\n  <li>\n   SetHandleInformation (Protected Handle)\n  </li>\n  <li>\n   UnhandledExceptionFilter\n  </li>\n  <li>\n   OutputDebugString (GetLastError())\n  </li>\n  <li>\n   Hardware Breakpoints (SEH / GetThreadContext)\n  </li>\n  <li>\n   Software Breakpoints (INT3 / 0xCC)\n  </li>\n  <li>\n   Memory Breakpoints (PAGE_GUARD)\n  </li>\n  <li>\n   Interrupt 0x2d\n  </li>\n  <li>\n   Interrupt 1\n  </li>\n  <li>\n   Parent Process (Explorer.exe)\n  </li>\n  <li>\n   SeDebugPrivilege (Csrss.exe)\n  </li>\n  <li>\n   NtYieldExecution / SwitchToThread\n  </li>\n  <li>\n   TLS callbacks\n  </li>\n </ul>\n <h3>\n  Anti-Dumping\n </h3>\n <ul>\n  <li>\n   Erase PE header from memory\n  </li>\n  <li>\n   SizeOfImage\n  </li>\n </ul>\n <h3>\n  Timing Attacks [Anti-Sandbox]\n </h3>\n <ul>\n  <li>\n   RDTSC (with CPUID to force a VM Exit)\n  </li>\n  <li>\n   RDTSC (Locky version with GetProcessHeap & CloseHandle)\n  </li>\n  <li>\n   Sleep -> SleepEx -> NtDelayExecution\n  </li>\n  <li>\n   Sleep (in a loop a small delay)\n  </li>\n  <li>\n   Sleep and check if time was accelerated (GetTickCount)\n  </li>\n  <li>\n   SetTimer (Standard Windows Timers)\n  </li>\n  <li>\n   timeSetEvent (Multimedia Timers)\n  </li>\n  <li>\n   WaitForSingleObject -> WaitForSingleObjectEx -> NtWaitForSingleObject\n  </li>\n  <li>\n   WaitForMultipleObjects -> WaitForMultipleObjectsEx ->\n  </li>\n </ul>\n <h3>\n  Human Interaction / Generic [Anti-Sandbox]\n </h3>\n <ul>\n  <li>\n   Mouse movement\n  </li>\n  <li>\n   Total Physical memory (GlobalMemoryStatusEx)\n  </li>\n  <li>\n   Disk size using DeviceIoControl (IOCTL_DISK_GET_LENGTH_INFO)\n  </li>\n  <li>\n   Disk size using GetDiskFreeSpaceEx (TotalNumberOfBytes)\n  </li>\n  <li>\n   Count of processors (Win32/Tinba - Win32/Dyre)\n  </li>\n </ul>\n <h3>\n  Anti-Virtualization / Full-System Emulation\n </h3>\n <ul>\n  <li>\n   <p>\n    <strong>\n     Registry key value artifacts\n    </strong>\n   </p>\n   <ul>\n    <li>\n     HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 (Identifier) (VBOX)\n    </li>\n    <li>\n     HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 (Identifier) (QEMU)\n    </li>\n    <li>\n     HARDWARE\\Description\\System (SystemBiosVersion) (VBOX)\n    </li>\n    <li>\n     HARDWARE\\Description\\System (SystemBiosVersion) (QEMU)\n    </li>\n    <li>\n     HARDWARE\\Description\\System (VideoBiosVersion) (VIRTUALBOX)\n    </li>\n    <li>\n     HARDWARE\\Description\\System (SystemBiosDate) (06/23/99)\n    </li>\n    <li>\n     HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 (Identifier) (VMWARE)\n    </li>\n    <li>\n     HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 (Identifier) (VMWARE)\n    </li>\n    <li>\n     HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0 (Identifier) (VMWARE)\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Registry Keys artifacts\n    </strong>\n   </p>\n   <ul>\n    <li>\n     \"HARDWARE\\ACPI\\DSDT\\VBOX__\"\n    </li>\n    <li>\n     \"HARDWARE\\ACPI\\FADT\\VBOX__\"\n    </li>\n    <li>\n     \"HARDWARE\\ACPI\\RSDT\\VBOX__\"\n    </li>\n    <li>\n     \"SOFTWARE\\Oracle\\VirtualBox Guest Additions\"\n    </li>\n    <li>\n     \"SYSTEM\\ControlSet001\\Services\\VBoxGuest\"\n    </li>\n    <li>\n     \"SYSTEM\\ControlSet001\\Services\\VBoxMouse\"\n    </li>\n    <li>\n     \"SYSTEM\\ControlSet001\\Services\\VBoxService\"\n    </li>\n    <li>\n     \"SYSTEM\\ControlSet001\\Services\\VBoxSF\"\n    </li>\n    <li>\n     \"SYSTEM\\ControlSet001\\Services\\VBoxVideo\"\n    </li>\n    <li>\n     SOFTWARE\\VMware, Inc.\\VMware Tools\n    </li>\n    <li>\n     SOFTWARE\\Wine\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     File system artifacts\n    </strong>\n   </p>\n   <ul>\n    <li>\n     \"system32\\drivers\\VBoxMouse.sys\"\n    </li>\n    <li>\n     \"system32\\drivers\\VBoxGuest.sys\"\n    </li>\n    <li>\n     \"system32\\drivers\\VBoxSF.sys\"\n    </li>\n    <li>\n     \"system32\\drivers\\VBoxVideo.sys\"\n    </li>\n    <li>\n     \"system32\\vboxdisp.dll\"\n    </li>\n    <li>\n     \"system32\\vboxhook.dll\"\n    </li>\n    <li>\n     \"system32\\vboxmrxnp.dll\"\n    </li>\n    <li>\n     \"system32\\vboxogl.dll\"\n    </li>\n    <li>\n     \"system32\\vboxoglarrayspu.dll\"\n    </li>\n    <li>\n     \"system32\\vboxoglcrutil.dll\"\n    </li>\n    <li>\n     \"system32\\vboxoglerrorspu.dll\"\n    </li>\n    <li>\n     \"system32\\vboxoglfeedbackspu.dll\"\n    </li>\n    <li>\n     \"system32\\vboxoglpackspu.dll\"\n    </li>\n    <li>\n     \"system32\\vboxoglpassthroughspu.dll\"\n    </li>\n    <li>\n     \"system32\\vboxservice.exe\"\n    </li>\n    <li>\n     \"system32\\vboxtray.exe\"\n    </li>\n    <li>\n     \"system32\\VBoxControl.exe\"\n    </li>\n    <li>\n     \"system32\\drivers\\vmmouse.sys\"\n    </li>\n    <li>\n     \"system32\\drivers\\vmhgfs.sys\"\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Directories artifacts\n    </strong>\n   </p>\n   <ul>\n    <li>\n     \"%PROGRAMFILES%\\oracle\\virtualbox guest additions\\\"\n    </li>\n    <li>\n     \"%PROGRAMFILES%\\VMWare\\\"\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Memory artifacts\n    </strong>\n   </p>\n   <ul>\n    <li>\n     Interupt Descriptor Table (IDT) location\n    </li>\n    <li>\n     Local Descriptor Table (LDT) location\n    </li>\n    <li>\n     Global Descriptor Table (GDT) location\n    </li>\n    <li>\n     Task state segment trick with STR\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     MAC Address\n    </strong>\n   </p>\n   <ul>\n    <li>\n     \"\\x08\\x00\\x27\" (VBOX)\n    </li>\n    <li>\n     \"\\x00\\x05\\x69\" (VMWARE)\n    </li>\n    <li>\n     \"\\x00\\x0C\\x29\" (VMWARE)\n    </li>\n    <li>\n     \"\\x00\\x1C\\x14\" (VMWARE)\n    </li>\n    <li>\n     \"\\x00\\x50\\x56\" (VMWARE)\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Virtual devices\n    </strong>\n   </p>\n   <ul>\n    <li>\n     \"\\\\.\\VBoxMiniRdrDN\"\n    </li>\n    <li>\n     \"\\\\.\\VBoxGuest\"\n    </li>\n    <li>\n     \"\\\\.\\pipe\\VBoxMiniRdDN\"\n    </li>\n    <li>\n     \"\\\\.\\VBoxTrayIPC\"\n    </li>\n    <li>\n     \"\\\\.\\pipe\\VBoxTrayIPC\")\n    </li>\n    <li>\n     \"\\\\.\\HGFS\"\n    </li>\n    <li>\n     \"\\\\.\\vmci\"\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Hardware Device information\n    </strong>\n   </p>\n   <ul>\n    <li>\n     SetupAPI SetupDiEnumDeviceInfo (GUID_DEVCLASS_DISKDRIVE)\n     <ul>\n      <li>\n       QEMU\n      </li>\n      <li>\n       VMWare\n      </li>\n      <li>\n       VBOX\n      </li>\n      <li>\n       VIRTUAL HD\n      </li>\n     </ul>\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Adapter name\n    </strong>\n   </p>\n   <ul>\n    <li>\n     VMWare\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Windows Class\n    </strong>\n   </p>\n   <ul>\n    <li>\n     VBoxTrayToolWndClass\n    </li>\n    <li>\n     VBoxTrayToolWnd\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Network shares\n    </strong>\n   </p>\n   <ul>\n    <li>\n     VirtualBox Shared Folders\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Processes\n    </strong>\n   </p>\n   <ul>\n    <li>\n     vboxservice.exe   (VBOX)\n    </li>\n    <li>\n     vboxtray.exe      (VBOX)\n    </li>\n    <li>\n     vmtoolsd.exe      (VMWARE)\n    </li>\n    <li>\n     vmwaretray.exe    (VMWARE)\n    </li>\n    <li>\n     vmwareuser        (VMWARE)\n    </li>\n    <li>\n     vmsrvc.exe        (VirtualPC)\n    </li>\n    <li>\n     vmusrvc.exe       (VirtualPC)\n    </li>\n    <li>\n     prl_cc.exe        (Parallels)\n    </li>\n    <li>\n     prl_tools.exe     (Parallels)\n    </li>\n    <li>\n     xenservice.exe    (Citrix Xen)\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     WMI\n    </strong>\n   </p>\n   <ul>\n    <li>\n     SELECT * FROM Win32_Bios (SerialNumber) (VMWARE)\n    </li>\n    <li>\n     SELECT * FROM Win32_PnPEntity (DeviceId) (VBOX)\n    </li>\n    <li>\n     SELECT * FROM Win32_NetworkAdapterConfiguration (MACAddress) (VBOX)\n    </li>\n    <li>\n     SELECT * FROM Win32_NTEventlogFile (VBOX)\n    </li>\n    <li>\n     SELECT * FROM Win32_Processor (NumberOfCores) (GENERIC)\n    </li>\n    <li>\n     SELECT * FROM Win32_LogicalDisk (Size) (GENERIC)\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     DLL Exports and Loaded DLLs\n    </strong>\n   </p>\n   <ul>\n    <li>\n     kernel32.dll!wine_get_unix_file_nameWine (Wine)\n    </li>\n    <li>\n     sbiedll.dll (Sandboxie)\n    </li>\n    <li>\n     dbghelp.dll (MS debugging support routines)\n    </li>\n    <li>\n     api_log.dll (iDefense Labs)\n    </li>\n    <li>\n     dir_watch.dll (iDefense Labs)\n    </li>\n    <li>\n     pstorec.dll (SunBelt Sandbox)\n    </li>\n    <li>\n     vmcheck.dll (Virtual PC)\n    </li>\n    <li>\n     wpespy.dll (WPE Pro)\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <strong>\n     CPU*\n    </strong>\n   </p>\n   <ul>\n    <li>\n     Hypervisor presence using (EAX=0x1)\n    </li>\n    <li>\n     Hypervisor vendor using (EAX=0x40000000)\n     <ul>\n      <li>\n       \"KVMKVMKVM\\0\\0\\0\" (KVM)\n      </li>\n      <li>\n       \"Microsoft Hv\"    (Microsoft Hyper-V or Windows Virtual PC)\n      </li>\n      <li>\n       \"VMwareVMware\"    (VMware)\n      </li>\n      <li>\n       \"XenVMMXenVMM\"    (Xen)\n      </li>\n      <li>\n       \"prl hyperv  \"    ( Parallels)\n-\"VBoxVBoxVBox\"    ( VirtualBox)\n      </li>\n     </ul>\n    </li>\n   </ul>\n  </li>\n </ul>\n <h3>\n  Anti-Analysis\n </h3>\n <ul>\n  <li>\n   <strong>\n    Processes\n   </strong>\n   <ul>\n    <li>\n     OllyDBG / ImmunityDebugger / WinDbg / IDA Pro\n    </li>\n    <li>\n     SysInternals Suite Tools (Process Explorer / Process Monitor / Regmon / Filemon, TCPView, Autoruns)\n    </li>\n    <li>\n     Wireshark / Dumpcap\n    </li>\n    <li>\n     ProcessHacker / SysAnalyzer / HookExplorer / SysInspector\n    </li>\n    <li>\n     ImportREC / PETools / LordPE\n    </li>\n    <li>\n     JoeBox Sandbox\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Noteworthy",
            "time": "Mar 6, 2017 at 22:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}