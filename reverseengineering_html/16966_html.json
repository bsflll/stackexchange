{
    "title": "Unpacking a Themida packed x64 executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/16966/unpacking-a-themida-packed-x64-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Before we continue I'd like you to keep in mind I'm relatively new to unpacking executables. So I have a few\n </p>\n <p>\n  Recently I've been trying to unpack an executable (x64 architecture), aka find the OEP and restore the IAT, that is packed with Themida x64:\n </p>\n <p>\n  I've tried breakpointing at LoadLibraryA. I've read thats a great way to solve it.\n </p>\n <p>\n  However, I do not know what to do next. It brings me to this page:\n </p>\n <pre><code>00007FFE291AA240 | 48 89 5C 24 08           | mov qword ptr ss:[rsp+8],rbx           |\n00007FFE291AA245 | 48 89 74 24 10           | mov qword ptr ss:[rsp+10],rsi          | [rsp+10]:LoadLibraryA\n00007FFE291AA24A | 57                       | push rdi                               |\n00007FFE291AA24B | 48 83 EC 20              | sub rsp,20                             |\n00007FFE291AA24F | 48 8B F9                 | mov rdi,rcx                            | rcx:\"USER32.dll\"\n00007FFE291AA252 | 48 85 C9                 | test rcx,rcx                           | rcx:\"USER32.dll\"\n00007FFE291AA255 | 74 15                    | je kernelbase.7FFE291AA26C             |\n00007FFE291AA257 | 48 8D 15 FA 2F 10 00     | lea rdx,qword ptr ds:[7FFE292AD258]    | 7FFE292AD258:\"twain_32.dll\"\n00007FFE291AA25E | FF 15 B4 C9 0F 00        | call qword ptr ds:[<&_stricmp>]        |\n00007FFE291AA264 | 85 C0                    | test eax,eax                           |\n00007FFE291AA266 | 0F 84 72 A8 03 00        | je kernelbase.7FFE291E4ADE             |\n00007FFE291AA26C | 45 33 C0                 | xor r8d,r8d                            |\n00007FFE291AA26F | 33 D2                    | xor edx,edx                            |\n00007FFE291AA271 | 48 8B CF                 | mov rcx,rdi                            | rcx:\"USER32.dll\"\n00007FFE291AA274 | E8 17 00 00 00           | call <kernelbase.LoadLibraryExA>       |\n00007FFE291AA279 | 48 8B 5C 24 30           | mov rbx,qword ptr ss:[rsp+30]          | [rsp+30]:LoadLibraryA\n00007FFE291AA27E | 48 8B 74 24 38           | mov rsi,qword ptr ss:[rsp+38]          |\n00007FFE291AA283 | 48 83 C4 20              | add rsp,20                             |\n00007FFE291AA287 | 5F                       | pop rdi                                |\n00007FFE291AA288 | C3                       | ret                                    |\n</code></pre>\n <p>\n  I've gotten a few addresses where it finds the API's, but it doesnt load all of them! (from what I have seen)\n </p>\n <p>\n  For example, this one address I had loaded only Windows libs (kernel32.dll, KernelBase.dll, ...), but due to it missing a ton of libs (DirectX, OpenGL, ...), I threw it off as not being the OEP.\n </p>\n <p>\n  I've unpacked files packed with UPX, Themida is stumping me.\n </p>\n <p>\n  All help is appreciated! Thank you :)\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "26k",
    "tags": [
        "unpacking"
    ],
    "user": "Graham Best",
    "time": "Dec 13, 2017 at 22:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Unpacking Themida, especially the newer versions, is not a small task by any means. It is literally worlds different from unpacking UPX and if you are new to unpacking, you have absolutely no business trying to unpack Themida. Here's why:\n </p>\n <p>\n  Themida uses an extremely complex virtual machine environment combined with every anti-debug and anti-analysis trick in the books, combined with many different obfuscation methods. For example, in a UPX packed binary, you just need to find OEP and dump it down before finally rebuilding the IAT. In a Themida binary, different parts of the code are run in virtual machines and it obscures the behavior of the target program. The best method to unpack a VM-protected packer like Themida is to\n  <em>\n   devirtualize\n  </em>\n  it, which involves figuring out the entire instruction set that the packer uses and writing a script to interpret that language. All of that is only one step. Themida also severely obstructs the import address table, splits up the entire program and only loads one portion at a time (this prevents you from \"dumping\" the entire program like you did with UPX) and then unloads it on a per-routine basis, and implements a bunch of anti-analysis tricks,\n  <a href=\"http://www.oreans.com/themida_features.php\" rel=\"noreferrer\">\n   many of which are listed on their website.\n  </a>\n </p>\n <p>\n  Additionally, you will need to know the exact version of Themida you are dealing with. Themida is so complicated to unpack that most people write scripts and so you can search for a script for the given version you are trying to unpack and attempt to use that. If the version is new and there is no script, given your level of expertise right now, this will be a very, very long and arduous task.\n </p>\n <p>\n  Further reading:\n </p>\n <p>\n  <a href=\"https://www2.cs.arizona.edu/people/debray/Publications/generic-deobf.pdf\" rel=\"noreferrer\">\n   A Generic Approach to Automated Deobfuscation of Executable Code\n  </a>\n </p>\n <p>\n  <a href=\"https://repo.palkeo.com/repositories/mirror7.meh.or.id/Reverse%20Engineering/unpackers.pdf\" rel=\"noreferrer\">\n   Anti-Unpacker Tricks by Peter Ferrie\n  </a>\n </p>\n <p>\n  <a href=\"https://forum.tuts4you.com/topic/32632-themida-winlicense-manually-unpack-tutorial-exsample/\" rel=\"noreferrer\">\n   Themida/WinLicense Manual Unpack tutorial\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "19",
            "user": "the_endian",
            "time": "Dec 14, 2017 at 8:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Graham Best",
                    "text": "<span class=\"comment-copy\">Thank you for clarifying this. I assumed it was a very difficult task. I guess I will take a read through that.</span>",
                    "time": null
                }
            ]
        }
    ]
}