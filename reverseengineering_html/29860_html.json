{
    "title": "what is metaData of assemblies and what is used for",
    "link": "https://reverseengineering.stackexchange.com/questions/29860/what-is-metadata-of-assemblies-and-what-is-used-for",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  hi there I hope you doing well\n </p>\n <p>\n  lately, I have searched about ildasm and how to protect my DLLs from reverse engineering,\n </p>\n <p>\n  so I found some great open source projects (ConfuseEx..), it works when I tried the reverse engineering my dll with ILSpy it didn't show my code and because of my curiosity I start searching how that happened,\n </p>\n <p>\n  I found the reverse engineering depends on the metaData of the DLL to show Extract the code with ildasm.exe so this lead me to ask some questions I didn't find answers to them,\n </p>\n <p>\n  did the ConfuseEx corrupt metaData of the assemblies to protect them from reverse Engineering?\n </p>\n <p>\n  is metaData used to define the functions of the assembly to other assemblies to use them? (without defined functions in metaData we cant access the DLL function)\n </p>\n <p>\n  can I protect my function content by corrupting metaData variable definitions and all these defined functions?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "231",
    "tags": [
        "assembly",
        ".net",
        "c#"
    ],
    "user": "makri aymen abderraouf",
    "time": "Jan 12, 2022 at 22:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Type typical use of meta data in .NET assemblies is documented\n  <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/metadata-and-self-describing-components\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n <p>\n  Metadata describes every type and member defined in your code in a language-neutral manner. Metadata stores the following information:\n </p>\n <ul>\n  <li>\n   Description of the assembly.\n  </li>\n  <li>\n   Identity (name, version, culture, public key)\n  </li>\n  <li>\n   The types that are exported.\n  </li>\n  <li>\n   Other assemblies that this assembly depends on\n  </li>\n  <li>\n   Security permissions needed to run.\n  </li>\n  <li>\n   Description of types.\n  </li>\n  <li>\n   Name, visibility, base class, and interfaces implemented.\n  </li>\n  <li>\n   Members (methods, fields, properties, events, nested types).\n  </li>\n  <li>\n   Attributes\n  </li>\n  <li>\n   Additional descriptive elements that modify types and members.\n  </li>\n </ul>\n <p>\n  It is common for .NET obfuscators to modify this metadata to increase the complexity of reverse engineering.\n </p>\n <p>\n  ConfuserEx uses many different techniques for .NET obfsucation. The most basic for preventing opening with IlDasm is applying an attribute \"\n  <a href=\"https://github.com/mkaring/ConfuserEx/wiki/Anti-IL-Dasm-Protection\" rel=\"nofollow noreferrer\">\n   SuppressIldasmAttribute\n  </a>\n  \" to the assembly. However nearly all modern decompilers will ignore this attribute, it doesn't add meaningful protection on its own.\n </p>\n <p>\n  In relation to metadata ConfuserEx also uses \"\n  <a href=\"https://github.com/mkaring/ConfuserEx/wiki/Invalid-Metadata-Protection\" rel=\"nofollow noreferrer\">\n   Invalid Metadata Protection\n  </a>\n  \" where invalid data is added to the meta data, which can prevent older decompilers opening the assembly but modern decompilers already work around this protection.\n </p>\n <p>\n  Full list of protections ConfuserEx uses is documented\n  <a href=\"https://github.com/mkaring/ConfuserEx/wiki/Protections\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "chentiangemalc",
            "time": "Jan 12, 2022 at 23:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}