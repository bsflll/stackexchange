{
    "title": "Can I get different thread registers with PyDBG?",
    "link": "https://reverseengineering.stackexchange.com/questions/11684/can-i-get-different-thread-registers-with-pydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am writing a python debugger and disassembler using the PyDBG library I have the disassembler part working, but not all of the debugger. Is it possible to use it to return something similar to:\n </p>\n <pre>\n[*] Dumping registers for thread ID: 0x00000550\n[**] EIP: 0x7c90eb94\n[**] ESP: 0x0007fde0 \n[**] EBP: 0x0007fdfc \n[**] EAX: 0x006ee208\n[**] EBX: 0x00000000\n[**] ECX: 0x0007fdd8 \n[**] EDX: 0x7c90eb94 \n[*] END DUMP\n[*] Dumping registers for thread ID: 0x000005c0 \n[**] EIP: 0x7c95077b\n[**] ESP: 0x0094fff8 \n[**] EBP: 0x00000000\n[**] EAX: 0x00000000\n[**] EBX: 0x00000001\n[**] ECX: 0x00000002\n[**] EDX: 0x00000003\n[*] END DUMP\n</pre>\n <p>\n  I need the register state of every thread running. There are several\n  <code>\n   thread_context\n  </code>\n  functions in PyDBG but I'm not sure how to use them to get that result. Thanks for any help!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "383",
    "tags": [
        "debugging",
        "python",
        "thread",
        "register"
    ],
    "user": "Starwarsfan2099",
    "time": "Jan 3, 2016 at 10:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   :>wmic process get Name,ThreadCount,ProcessId | grep fire\n  </strong>\n </p>\n <pre><code>firefox.exe                3944       49\n</code></pre>\n <p>\n  <strong>\n   :>cat dtregs.py\n  </strong>\n </p>\n <pre><code>from pydbg import *\nfrom pydbg.defines import *\ndef handler_breakpoint (pydbg):\n  if pydbg.first_breakpoint:\n    print \"hello did i dump tid and eax for each thread ?\"\n    return DBG_CONTINUE\ndbg = pydbg()\ndbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)\ndbg.attach(3944)\ni = 0;\nfor thread_id in dbg.enumerate_threads():\n  thread_handle  = dbg.open_thread(thread_id)\n  context = dbg.get_thread_context(thread_handle)\n  print \"%03d TID: %08x EAX: %08x\" % (i,thread_handle,context.Eax)\n  i = i+1\npydbg.debug_event_loop(dbg)\ndbg.detach()\n</code></pre>\n <p>\n  <strong>\n   :>python dtregs.py\n  </strong>\n </p>\n <pre><code>000 TID: 00000690 EAX: 00000000\n001 TID: 0000068c EAX: 0158c385\n002 TID: 00000688 EAX: 001b4008\n003 TID: 00000684 EAX: 000000e5\n004 TID: 00000680 EAX: 00000000\n005 TID: 0000067c EAX: 001800a3\n006 TID: 00000678 EAX: 00000000\n007 TID: 00000674 EAX: 000000e5\n...............................\n048 TID: 000005d0 EAX: 77e76c7d\n049 TID: 000005cc EAX: 00000000\nhello did i dump tid and eax for each thread ?\n</code></pre>\n <p>\n  just to confirm if it is right to a certain degree lets attach windbg to pid\n  \n\n  <strong>\n   :>cdb -p 3944\n  </strong>\n  \n\n  <strong>\n   0:049> ~* e r eax\n  </strong>\n </p>\n <pre><code>eax=09b6a201\neax=0158c385\neax=001b4008\neax=000000e5\neax=0036ee80\neax=00000171\neax=00000000\n--------------\neax=098f3ec0\neax=000000e5\neax=150ff530\neax=11d5ff00\neax=111fff00\neax=77e76c7d\neax=7ffdd000\n0:049> .detach\nDetached\nNoTarget> q\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Jan 3, 2016 at 19:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Starwarsfan2099",
                    "text": "<span class=\"comment-copy\">For anyone who wants to view additional registers, just add:<code>print \"%03d TID: %08x EAX: %08x\" % (i,thread_handle,context.Ebx)</code> Notice the <code>Ebx</code>. Replace that with the appropriate register. You can print multiple registers this way.</span>",
                    "time": null
                }
            ]
        }
    ]
}