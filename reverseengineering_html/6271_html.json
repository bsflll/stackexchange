{
    "title": "IDA PRO Hex-Rays 1.5 pseudo code understanding -=0x3FFFFFFFu; += 0x3FFFFFFFu;",
    "link": "https://reverseengineering.stackexchange.com/questions/6271/ida-pro-hex-rays-1-5-pseudo-code-understanding-0x3fffffffu-0x3fffffffu",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to clean up the pseudo code to make it compile and function similar if not exactly the same as the original code.\n </p>\n <p>\n  This bit which looks like this appears in various places I'm trying to figure out what it exactly means.\n </p>\n <pre><code>  if ( ZonePlayerCount > 0 )\n  {\n    v3 = 0;\n    v4 = 0;\n    v5 = playerPointerList;\n    v6 = &playerPointerList[1];\n    do\n    {\n      if ( *(unsigned int *)&(*v5)->IPAddressDWORD.S_un.S_un_b.s_b1 == IPAddress && (*v5)->Port == Port )\n      {\n        printf(\"Connection is broken because same ip/port requested another connection\n\");\n        sub_41CBD0((int)&(*v5)->encryptionPointer->ConnectionStatus);\n        Memory = *v5;\n        if ( *v5 )\n        {\n          DisconnectUser(*v5);\n          free(Memory);\n        }\n        --ZonePlayerCount;\n        memcpy(v5, v6, 4 * (v4 + ZonePlayerCount));\n        --v3;\n        v4 -= 0x3FFFFFFFu;\n        v6 = (char *)v6 - 4;\n        --v5;\n      }\n      ++v3;\n      v4 += 0x3FFFFFFFu;\n      v6 = (char *)v6 + 4;\n      ++v5;\n    }\n    while ( v3 < ZonePlayerCount );\n  }\n</code></pre>\n <p>\n  Other places like this..\n </p>\n <pre><code>    v1 = 0;\n    if ( ArenaArrayLength > v1 )\n    {\n      v18 = 0;\n      v19 = Arenas;\n      v20 = &Arenas[1];\n      do\n      {\n        if ( ProcessArena(*v19) )\n        {\n          if ( (*v19)->ArenaName[0] )\n            WriteSubGameLog(\"Private arena dropped: %s\n\", (*v19)->ArenaName);\n          else\n            WriteSubGameLog(\"Arena dropped\n\");\n          bufa = *v19;\n          if ( *v19 )\n          {\n            ShutdownArena(*v19);\n            free(bufa);\n          }\n          --ArenaArrayLength;\n          memcpy(v19, v20, 4 * (v18 + ArenaArrayLength));\n          --v1;\n          v18 -= 0x3FFFFFFFu;\n          v20 = (char *)v20 - 4;\n          --v19;\n        }\n        ++v1;\n        v18 += 0x3FFFFFFFu;\n        v20 = (char *)v20 + 4;\n        ++v19;\n      }\n      while ( v1 < ArenaArrayLength );\n    }\n</code></pre>\n <p>\n  Assembly for the first piece of pseudo code I provide here.\n </p>\n <pre><code>.text:00412D7B                 mov     esi, offset playerPointerList\n.text:00412D80                 mov     ebx, (offset playerPointerList+4)\n.text:00412D85\n.text:00412D85 loc_412D85:                             ; CODE XREF: NewConnectionRequest+C0j\n.text:00412D85                 mov     eax, [esi]\n.text:00412D87                 mov     ecx, [esp+20h+IPAddress]\n.text:00412D8B                 cmp     [eax+2F3h], ecx\n.text:00412D91                 jnz     short loc_412DFC\n.text:00412D93                 mov     dx, [esp+20h+Port]\n.text:00412D98                 cmp     [eax+2F7h], dx\n.text:00412D9F                 jnz     short loc_412DFC\n.text:00412DA1                 push    offset aConnectionIsBrok ; \"Connection is broken because same ip/port \"...\n.text:00412DA6                 call    _printf\n.text:00412DAB                 mov     eax, [esi]\n.text:00412DAD                 add     esp, 4\n.text:00412DB0                 mov     ecx, [eax+28h]\n.text:00412DB3                 call    sub_41CBD0\n.text:00412DB8                 mov     ecx, [esi]      ; player\n.text:00412DBA                 test    ecx, ecx\n.text:00412DBC                 mov     [esp+20h+Memory], ecx\n.text:00412DC0                 jz      short loc_412DD4\n.text:00412DC2                 call    DisconnectUser\n.text:00412DC7                 mov     ecx, [esp+20h+Memory]\n.text:00412DCB                 push    ecx             ; Memory\n.text:00412DCC                 call    ??3@YAXPAX@Z    ; operator delete(void *)\n.text:00412DD1                 add     esp, 4\n.text:00412DD4\n.text:00412DD4 loc_412DD4:                             ; CODE XREF: NewConnectionRequest+70j\n.text:00412DD4                 mov     eax, ZonePlayerCount\n.text:00412DD9                 dec     eax\n.text:00412DDA                 mov     ZonePlayerCount, eax\n.text:00412DDF                 add     eax, edi\n.text:00412DE1                 shl     eax, 2\n.text:00412DE4                 push    eax             ; Size\n.text:00412DE5                 push    ebx             ; Src\n.text:00412DE6                 push    esi             ; Dst\n.text:00412DE7                 call    _memcpy\n.text:00412DEC                 add     esp, 0Ch\n.text:00412DEF                 dec     ebp\n.text:00412DF0                 sub     edi, 3FFFFFFFh\n.text:00412DF6                 sub     ebx, 4\n.text:00412DF9                 sub     esi, 4\n.text:00412DFC\n.text:00412DFC loc_412DFC:                             ; CODE XREF: NewConnectionRequest+41j\n.text:00412DFC                                         ; NewConnectionRequest+4Fj\n.text:00412DFC                 mov     eax, ZonePlayerCount\n.text:00412E01                 inc     ebp\n.text:00412E02                 add     edi, 3FFFFFFFh\n.text:00412E08                 add     ebx, 4\n.text:00412E0B                 add     esi, 4\n.text:00412E0E                 cmp     ebp, eax\n.text:00412E10                 jl      loc_412D85\n</code></pre>\n <p>\n  As far as I understand it is that the\n  <code>\n   0x3FFFFFFF\n  </code>\n  has something to do with the bounds of the array?\n </p>\n <p>\n  I think after the DisconnectUser and free of memory all the playerPointer pointers get shifted to the left is that correct? or it just changes the counter in different paths.\n </p>\n <p>\n  I think the counter is either\n  <code>\n   v3\n  </code>\n  can keep increasing while the loop is going but when a player gets removed it starts checking from the end of the list or something?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "deobfuscation",
        "hexrays"
    ],
    "user": "SSpoke",
    "time": "Sep 21, 2014 at 1:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think it should look like this I am 99.9% feel it's a element shifter something tells me that\n  <code>\n   0x3FFFFFFF\n  </code>\n  is max bounds of a array so it's some compiler thing that it appends to make sure it gets the end of the array.\n </p>\n <p>\n  I was wrong\n  <code>\n   0x3FFFFFFF\n  </code>\n  is used to create signed numbers to emulate subtracting by adding. See comment by DCoder\n </p>\n <pre><code>  if ( ZonePlayerCount > 0 )\n  {\n    v3 = 0;\n\n    do\n    {\n      if ( playerPointerList[v3].IPAddressDWORD.S_un.S_un_b.s_b1 == IPAddress && playerPointerList[v3].Port == Port )\n      {\n        printf(\"Connection is broken because same ip/port requested another connection\n\");\n        sub_41CBD0((int)&playerPointerList[v3].encryptionPointer->ConnectionStatus);\n        Memory = *v5;\n        if ( *v5 )\n        {\n          DisconnectUser(*v5);\n          free(Memory);\n        }\n\n        memcpy(&playerPointerList[v3], &playerPointerList[v3 + 1], 4 * (ZonePlayerCount - v3 - 1));\n        //or\n        memmove(&playerPointerList[v3], &playerPointerList[v3 + 1], (ZonePlayerCount - v3 - 1) * sizeof(&playerPointerList));\n        --ZonePlayerCount;\n        --v3;\n      }\n      ++v3;\n    }\n    while ( v3 < ZonePlayerCount );\n  }\n</code></pre>\n <p>\n  Let me know if this is wrong, I'll remove the answer. (don't have original source code to compare against).\n </p>\n <p>\n  Thought I shouldn't be using\n  <code>\n   memcpy\n  </code>\n  because it may leave junk in memory at the very end but i think that junk does no harm and eventually will be replaced with something useful when the time comes.\n </p>\n <p>\n  Although it does seem\n  <code>\n   memmove()\n  </code>\n  is better suited here.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "SSpoke",
            "time": "Sep 29, 2014 at 6:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "DCoder",
                    "text": "<span class=\"comment-copy\">That looks quite right. One thing to notice is that <code>0x3FFFFFFF * 4 = 0xFFFFFFFC</code>, or <code>-4</code>. It's not a literal array bound, it's just a neat way of subtracting <code>4 * counter</code> from a number.</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">ahh thanks so it tries to subtract by doing multiplication lol so weird, this is full of surprises it also does right shifts for dividing power of numbers (in other parts). One day these decompilers will have patterns that can recognize everything and simplify it for you!. If IDA's Hex-Ray was open source where people would fill in patterns for everything then project would of been long ago completed atleast better, then again look at everything other then Hex-Rays complete garbage.</span>",
                    "time": null
                }
            ]
        }
    ]
}