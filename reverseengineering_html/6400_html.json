{
    "title": "Debug httpd process",
    "link": "https://reverseengineering.stackexchange.com/questions/6400/debug-httpd-process",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm attempting to inspect memory of an httpd binary compiled statically with openssl. When I list the httpd processes, I get:\n </p>\n <pre><code>$ ps aux|grep httpd\nroot     58539  0.0  0.7  75364  3740 ?        Ss   14:49   0:00 /opt/httpd/bin/httpd\ndaemon   58850  0.0  0.5 364328  2556 ?        Sl   14:58   0:00 /opt/httpd/bin/httpd\ndaemon   58914  0.0  0.5 364328  2548 ?        Sl   14:59   0:00 /opt/httpd/bin/httpd\ndaemon   58942  0.0  0.5 364328  2544 ?        Sl   14:59   0:00 /opt/httpd/bin/httpd\n</code></pre>\n <p>\n  I then tried attaching to each of the processes individually and applying a breakpoint to the function I am trying to debug. However, the breakpoint never gets triggered, although I know the function is being called.  I assume this problem relates to something along the lines of httpd forking on a new process, but I'm a bit stuck on how to proceed. Is there a generic way to ensure my breakpoint is triggered even if the processes forks?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "dynamic-analysis"
    ],
    "user": "amccormack",
    "time": "Oct 7, 2014 at 22:04",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Assuming your httpd is apache, to debug something like this, it might be best to\n <code>\n  service httpd stop\n </code>\n and\n <code>\n  gdb httpd -X\n </code>\n . That way, httpd will serve requests, but never fork, which makes things much easier to debug.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Depending on the worker model your apache is configured to use its likely a new worker is being spawned to handle your request if your bp isnt hitting. Like Guntram said you can\n  <a href=\"https://httpd.apache.org/dev/debugging.html\" rel=\"nofollow\">\n   disable forking\n  </a>\n  and put httpd in debug mode by using the\n  <code>\n   -X\n  </code>\n  flag and starting gdb with:\n </p>\n <pre><code>gdb httpd -X\n</code></pre>\n <p>\n  If for some reason you need to debug the multiple worker configured httpd you should use the gdb options\n  <code>\n   set follow-fork-mode ask\n  </code>\n  or\n  <code>\n   set follow-fork-mode child\n  </code>\n  if you know you'd like to follow all forks in advance. (\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\" rel=\"nofollow\">\n   https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\n  </a>\n  ). This would also be considered the 'generic approach' and would apply to programs that don't allow you to run single process in the foreground.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "amccormack",
            "time": "Oct 9, 2014 at 5:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}