{
    "title": "x64dbg : TraceInto only in user code",
    "link": "https://reverseengineering.stackexchange.com/questions/30307/x64dbg-traceinto-only-in-user-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The question seems pretty simple, but I can't achieve this simple thing in a reasonable time. I have a malware proceeding to deobfuscate a large amount of APIs in memory. Only the pointer to the functions is stored, not the name. I just wanted to quickly get a list of the API names using the trace feature when x64dbg sees the info from the register. ({a:register} gives me the symbol related to this pointer)\n </p>\n <p>\n  The problem is that the TraceInto is really too slow since it has to test every non-user instruction. I have just tried to TraceInto and launches the command \"StepOut\" when the base address isn't linked to user code.\n  <strong>\n   But this command stops the tracing\n  </strong>\n  . RunToParty, RunToUserCode stop the tracing as well. I could set some commands to restart the tracing, but I haven't found any options in the documentation to\n  <strong>\n   append\n  </strong>\n  logs to the log file. The provided log file is cleared each time the tracing starts.\n </p>\n <p>\n  Do you have some tricks to perform such common tasks, that is to say, TraceInto only in the usercode ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "447",
    "tags": [
        "malware",
        "debuggers",
        "x64dbg"
    ],
    "user": "HK47",
    "time": "Apr 25, 2022 at 6:12",
    "comments": [
        {
            "user": "Utkonos",
            "text": "<html><body><span class=\"comment-copy\">\n Can you share the SHA256 of the file you're working on?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "HK47",
            "text": "<html><body><span class=\"comment-copy\">\n Unfortunately I cannot because of a NDA. Nevertheless, the question is for general purpose. I think the whole thing could be usefull in several cases. Do you think the problem is specific to the analyzed data ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Utkonos",
            "text": "<html><body><span class=\"comment-copy\">\n That is understandable. Do you have a similar file that you can point to or to a malware family? Or if that is sensitive, can you point to a different malware family that deobfuscates API names in a similar way? To answer your questions, it helps to be able to look at exactly what you're looking at.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "HK47",
            "text": "<html><body><span class=\"comment-copy\">\n I think this is a pretty similar sample :\n <a href=\"https://bazaar.abuse.ch/sample/be7df9b222558c6b2afce6db5b20645bf394901f3d5ba27945d5497a367c8034/\" rel=\"nofollow noreferrer\">\n  bazaar.abuse.ch/sample/â€¦\n </a>\n You have to unpack. It just loads the unmapped PE in memory.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Based on the following sample:\n </p>\n <p>\n  <strong>\n   be7df9b222558c6b2afce6db5b20645bf394901f3d5ba27945d5497a367c8034\n  </strong>\n </p>\n <p>\n  The unpacked Quakbot payload is this:\n </p>\n <p>\n  <strong>\n   c85839f837d0312d9fb5440b16fa4fe3769df6d8f986dfaa0b5a28fb9ec80e19\n  </strong>\n </p>\n <p>\n  I have identified the call to the function which resolves the API names that you're asking about at address\n  <code>\n   0x10031E22\n  </code>\n  . To catch all the API names, just set a conditional breakpoint there (SHIFT-F2). In the Log Text field of the breakpoint configuration, put\n  <code>\n   {a:eax}\n  </code>\n  . Then in the Break Condition field, put\n  <code>\n   0\n  </code>\n  . With the breakpoint set, click the Run button or hit F9. You then go look at the log tab, and the API names should all be listed there. This is much faster than trying to do a trace, and you end up with the same dataset. It looks like there are more locations where API names are resolved, so you may need to rinse and repeat this process a couple times for each location where the API names are resolved. You can set multiple breakpoints for all the locations. Here is the list of API names that I collected from this sample at the address above:\n </p>\n <pre><code>Breakpoint at 10031E22 set!\n\n<kernel32.LoadLibraryA>\n<kernel32.LoadLibraryW>\n<kernel32.FreeLibrary>\n<kernel32.GetProcAddress>\n<kernel32.GetModuleHandleA>\n<kernel32.CreateToolhelp32Snapshot>\n<kernel32.Module32First>\n<kernel32.Module32Next>\n<kernel32.WriteProcessMemory>\n<kernel32.OpenProcess>\n<kernel32.VirtualFreeEx>\n<kernel32.WaitForSingleObject>\n<kernel32.CloseHandle>\n<kernel32.LocalFree>\n<kernel32.CreateProcessW>\n<kernel32.ReadProcessMemory>\n<kernel32.Process32First>\n<kernel32.Process32Next>\n<kernel32.Process32FirstW>\n<kernel32.Process32NextW>\n<kernel32.CreateProcessAsUserW>\n<kernel32.VirtualAllocEx>\n<kernel32.VirtualAlloc>\n<kernel32.VirtualFree>\n<kernel32.OpenThread>\n<kernel32.Wow64DisableWow64FsRedirection>\n<kernel32.Wow64EnableWow64FsRedirection>\n<kernel32.GetVolumeInformationW>\n<kernel32.IsWow64Process>\n<kernel32.CreateThread>\n<kernel32.CreateFileW>\n<kernel32.CreateFileA>\n<kernel32.FindClose>\n<kernel32.GetFileAttributesW>\n<kernel32.SetFilePointer>\n<kernel32.WriteFile>\n<kernel32.ReadFile>\n<kernel32.CreateMutexA>\n<kernel32.ReleaseMutex>\n<kernel32.FindResourceA>\n<kernel32.FindResourceW>\n<kernel32.SizeofResource>\n<kernel32.LoadResource>\n<kernel32.GetTickCount64>\n<kernel32.ExpandEnvironmentStringsW>\n<kernel32.GetThreadContext>\n<kernel32.SetLastError>\n<kernel32.GetComputerNameW>\n<kernel32.Sleep>\n<kernel32.SleepEx>\n<kernel32.OpenEventA>\n<kernel32.SetEvent>\n<kernel32.CreateEventA>\n<kernel32.TerminateThread>\n<kernel32.QueryFullProcessImageNameW>\n<kernel32.CreateNamedPipeA>\n<kernel32.ConnectNamedPipe>\n<kernel32.GetLocalTime>\n<kernel32.ExitProcess>\n<kernel32.GetEnvironmentVariableW>\n<kernel32.GetExitCodeThread>\n<kernel32.GetFileSize>\n<kernel32.VirtualProtect>\n<kernel32.VirtualProtectEx>\n<kernel32.InterlockedCompareExchange>\n<kernel32.CreateRemoteThread>\n<kernel32.SetEnvironmentVariableW>\n<kernel32.ResumeThread>\n<kernel32.TerminateProcess>\n<ntdll.RtlAddVectoredExceptionHandler>\n<kernel32.DeleteFileW>\n<kernel32.CopyFileW>\n<kernel32.AllocConsole>\n<kernel32.SetConsoleCtrlHandler>\n<kernel32.GetModuleFileNameW>\n<kernel32.GetCurrentProcess>\n<kernel32.CreatePipe>\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/Inf3T.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Breakpoint\" src=\"https://i.sstatic.net/Inf3T.png\"/>\n  </a>\n </p>\n <p>\n  Cheers!\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Utkonos",
            "time": "May 7, 2022 at 15:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "HK47",
                    "text": "<span class=\"comment-copy\">Thank you for taking the time to do this. I ended up to use exactly what you have described to obtain the several lists of API's. :)  I should have explained the general method to \"TraceInto user code\" was the purpose. Since you have use the same circumventing/manuel technique, I infer what I want isn't implemented inside x64dbg. So I marked up your response, thank you !</span>",
                    "time": null
                },
                {
                    "user": "Utkonos",
                    "text": "<span class=\"comment-copy\">I understand what you're asking. I have made a small modification to the answer. If you set <code>Break Condition</code> to <code>0</code>. The execution will not stop and wait for you to continue on that breakpoint. It will just keep executing. This I think is what you're looking for. You still get the output you seek on the Log tab. And you don't need to hit F9 over and over. Also, about trace: I don't know how to do what you want to do with trace. Performing trace on large amounts of code is too slow for it to be a reasonable solution.</span>",
                    "time": null
                },
                {
                    "user": "HK47",
                    "text": "<span class=\"comment-copy\">Thank you for the modification !</span>",
                    "time": null
                }
            ]
        }
    ]
}