{
    "title": "Call to an imported function in a PE file: Why is destination prepended with ds (call ds:func_name)?",
    "link": "https://reverseengineering.stackexchange.com/questions/8760/call-to-an-imported-function-in-a-pe-file-why-is-destination-prepended-with-ds",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In windows PE files (32 and 64 bit) calls to imported functions look like this in IDA PRO:\n </p>\n <pre><code>call    ds:SetEvent              // default setting\ncall    [ds:SetEvent]            // Target Assembler set to TASM\n</code></pre>\n <p>\n  I understand what it does (indirect call, import table, ...) but what I do not understand:\nWhy is IDA adding the\n  <code>\n   ds:\n  </code>\n  in front of the function name?\nI checked the opcode, it is\n  <code>\n   FF 15\n  </code>\n  meaning a\n  <em>\n   near\n  </em>\n  call.\n </p>\n <p>\n  If I am right to assume that the\n  <code>\n   ds\n  </code>\n  is a segment register, there is no need to specify it as a near call means a call of a function inside the same segment.\n </p>\n <p>\n  Could someone explain why IDA is adding the\n  <code>\n   ds:\n  </code>\n  anyway and what it is good for?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "disassemblers",
        "segmentation"
    ],
    "user": "langlauf.io",
    "time": "Dec 9, 2016 at 17:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The FF 15 is an absolute indirect call.  It is fetching the value at a memory location, and then transferring control to the fetched address.\n </p>\n <p>\n  In order to specify that memory location precisely, the CPU needs both the segment register and the address.  In the absence of an explicit request (2E for CS, for example), or a mode which has an implicit override (use of EBP selects SS:), DS: is used.  Despite Windows using a flat memory model, nothing prevents the segment registers from having other values assigned to them: 32-bit Windows supports Local Descriptor Table entries, for example, and there are tricks where DS: is given the value of FS:, to perform non-obvious SEH registration.\n </p>\n <p>\n  IDA displays the segment register to remove any ambiguity as to which segment register is in use.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "peter ferrie",
            "time": "Apr 24, 2015 at 15:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">you write: \"In order to specify that memory location precisely, the CPU needs both the segment register and the address.\"  I thought a near call does not need any segment information. I thought a near call was \"a call of a function inside the same segment\". Am I missing something?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">Perhaps \"In order to specify the location from which to fetch\", then?  \"near\" in this sense refers to the return address, not the location from which it is fetched.  A near call has only the return address placed on the stack.  A far call has both selector and return address placed on the stack.</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Got it now. Thanks for the additional clarification.</span>",
                    "time": null
                }
            ]
        }
    ]
}