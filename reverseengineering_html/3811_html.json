{
    "title": "What C construct could generate this assembly sequence?",
    "link": "https://reverseengineering.stackexchange.com/questions/3811/what-c-construct-could-generate-this-assembly-sequence",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following disassembly:\n </p>\n <pre><code>mov BL, [EAX]\ninc EAX\nmov [EDX], BL\ninc EDX\n</code></pre>\n <p>\n  I could see this being the result of:\n </p>\n <pre><code>uint8_t foo = bar;\n++bar;\nuint8_t tmp = foo;\n++foo;\n</code></pre>\n <p>\n  But this assumes C99. Is there some other C construct that could produce the code above?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "391",
    "tags": [
        "disassembly",
        "x86",
        "static-analysis",
        "c"
    ],
    "user": "avgvstvs",
    "time": "Mar 6, 2014 at 19:07",
    "comments": [
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n The infamous\n <code>\n  strcpy\n </code>\n loop,\n <code>\n  *dst++ = *src++\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "<html><body><span class=\"comment-copy\">\n What's tripping me up is that I had thought that the MOV instruction was limited so that the operands had to have the same size?  This looks like I'm asking \"Move a 32b value into the lower 8b of the EBX register.\"\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  [EDX]\n </code>\n does not stand for \"the EDX register\". It stands for \"the address pointed to by the EDX register\". The constrained you mentioned is valid, and in this case the instruction\n <code>\n  mov [EDX], BL\n </code>\n is interpreted as \"move the lowest byte of the\n <code>\n  EBX\n </code>\n register to the byte at the address pointed to by (the value of) the\n <code>\n  EDX\n </code>\n register.\"\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "<html><body><span class=\"comment-copy\">\n DCoder, would you care to post your comment as an answer so I can give due credit?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you just want the answer without the explanation, scroll to the bottom of this post.\n </p>\n <hr/>\n <p>\n  The\n  <code>\n   [register]\n  </code>\n  notation stands for \"\n  <em>\n   take the value stored in\n   <code>\n    register\n   </code>\n   and interpret it as an address\n  </em>\n  \". If the addressed entity size is ambiguous, it can be clarified using\n  <code>\n   DWORD PTR [register]\n  </code>\n  for\n  <code>\n   DWORD\n  </code>\n  -sized pointers (and similarly for other pointer sizes).\n </p>\n <blockquote>\n  <pre><code>mov BL, [EAX]\n</code></pre>\n </blockquote>\n <p>\n  This line treats the value in the\n  <code>\n   EAX\n  </code>\n  register as a pointer to a single byte (the size of\n  <code>\n   BL\n  </code>\n  ), reads a byte from that address and stores it in\n  <code>\n   BL\n  </code>\n  .\n </p>\n <blockquote>\n  <pre><code>inc EAX\n</code></pre>\n </blockquote>\n <p>\n  This line increments the value of\n  <code>\n   EAX\n  </code>\n  , effectively advancing to the next byte.\n </p>\n <blockquote>\n  <pre><code>mov [EDX], BL\n</code></pre>\n </blockquote>\n <p>\n  This line treats the value in the\n  <code>\n   EDX\n  </code>\n  register as a pointer to a single byte (again, the size of the other operand tells us this), and writes a byte that is stored in\n  <code>\n   BL\n  </code>\n  to that address.\n </p>\n <blockquote>\n  <pre><code>inc EDX\n</code></pre>\n </blockquote>\n <p>\n  This line increments the value of\n  <code>\n   EDX\n  </code>\n  , advancing to the next byte.\n </p>\n <p>\n  With all this information, we can see that this sequence basically copies a byte from one address to another. Most likely it is used in a loop such as string copy or memory copy. If there's a line similar to\n  <code>\n   test BL, BL\n  </code>\n  afterwards to determine if the copied byte was NULL, it's most likely a string copy; if there's a length/address check instead - it's probably a memory/buffer copy that works on a specified amount of bytes.\n </p>\n <hr/>\n <p>\n  In C parlance, this can be represented as:\n </p>\n <pre><code>char t; // BL\nchar *src; // EAX\nchar *dst; // EDX\n\n// initialize src and dst here\n\nt = *src;\n++src;\n*dst = t;\n++dst;\n</code></pre>\n <p>\n  Or, as K&R put it ever so tersely:\n </p>\n <pre><code>*dst++ = *src++;\n</code></pre>\n</div>\n</body></html>",
            "votes": "6",
            "user": "DCoder",
            "time": "Mar 10, 2014 at 17:35",
            "is_accepted": true,
            "comments": []
        }
    ]
}