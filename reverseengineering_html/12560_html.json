{
    "title": "QEMU & router firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/12560/qemu-router-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to get the router firmware (binary) running on QEMU (if that is possible). All networking is set up fine because I've tested it using the debian_wheezy_mips_standard.qcow2\n </p>\n <pre><code>sudo qemu-system-mips -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda MYROUTERBINARY.bin \n-append \"root=/dev/sda1 console=ttyS0\"-nographic\n</code></pre>\n <p>\n  when I run this QEMU goes into a blank screen. I thought that it might not have a user interface due to it being a router but I can't get any response when running a nmap against the IP address space it should be in.\n </p>\n <p>\n  Should I import the filesystem using:\n </p>\n <pre><code>sudo qemu-system-mips -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda\ndebian_wheezy_mips_standard.qcow2 -append \"root=/dev/sda1 console=ttyS0\" -nographic\n</code></pre>\n <p>\n  Let's say for instance I have netcat running on the router. I want to be able to access the port, so need the router firmware/filesystem needs to be running\n </p>\n <p>\n  Can anyone help please?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 3,
    "views": "7k",
    "tags": [
        "linux",
        "firmware",
        "qemu"
    ],
    "user": "user15945",
    "time": "Apr 29, 2016 at 14:49",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n See\n <a href=\"http://reverseengineering.stackexchange.com/questions/11083/emulate-juan-dvr-r7816-in-qemu\">\n  Emulate juan DVR R7816 in Qemu\n </a>\n (in particular,\n <a href=\"http://reverseengineering.stackexchange.com/a/11091/1562\">\n  reverseengineering.stackexchange.com/a/11091/1562\n </a>\n ).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Brendan Dolan-Gavitt",
            "text": "<html><body><span class=\"comment-copy\">\n In this case he's using a kernel built for QEMU though, so it's more like\n <a href=\"http://reverseengineering.stackexchange.com/questions/4480/emulate-tp-link-wr740n-with-qemu?rq=1\" title=\"emulate tp link wr740n with qemu\">\n  reverseengineering.stackexchange.com/questions/4480/â€¦\n </a>\n . This is something that ought to work. @user15945, maybe try adding\n <code>\n  earlyprintk\n </code>\n to the kernel command line?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n \"Let's say for instance I have netcat running on the router. I want to be able to access the port, so need the router firmware/filesystem needs to be running\" If all you need to be able to telnet to the router, just do it from any computer. Otherwise your question does not make sense.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n @VitalyOsipov How does't his question make sense when he wants to telnet to the emulated router but can't get said emulated router to start up?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n For this to work, your QEMU needs to emulate the hardware of the router's ethernet interface,\n <i>\n  and\n </i>\n \"connect\" that interface to the host's network(!). I somehow doubt it's doing that. I guess the kernel won't even start when it doesn't find the router's physical hardware.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Most MIPS/ARM based routers have a ROM bootloader that runs when the device is powered on.  This bootloader is typically accessible via a serial port, but some platforms (like AR7) do weird things like have an FTP server going (you can flash firmware through it).\n </p>\n <p>\n  This bootloader will load a kernel image and initrd from a partition of a NAND device, then run it.\n </p>\n <p>\n  The\n  <code>\n   bin\n  </code>\n  file is probably designed to be written to a flash partition directly, then unpacked/loaded into RAM by the bootloader.  There are more partitions than just the one holding the kernel, you will have one possibly holding the initrd or rootfs, and one acting as the \"NVRAM\" or holding settings.  One may even hold the bootloader itself.\n </p>\n <p>\n  Once Linux is running, firmware upgrades happen by writing to a\n  <code>\n   /dev/mmcbllkpX\n  </code>\n  device.\n </p>\n <p>\n  You can probably solve the bootloader issue by finding out which flash partitions on the device are the kernel and initrd, and use QEMU's\n  <code>\n   -kernel\n  </code>\n  and\n  <code>\n   -initrd\n  </code>\n  options to load them.\n </p>\n <p>\n  But the firmware will still likely be expecting ALL of the original flash as part of its expected devices.  This is where you are going to run into serious problems.\n </p>\n <p>\n  I don't know how to get QEMU to emulate a NAND device or if it's even possible (it's NOT the same as a disk device).  Most routers have a single NAND device \"partitioned\" and the Linux kernel recreates them as\n  <code>\n   /dev/mmcblkp0\n  </code>\n  ,\n  <code>\n   /dev/mmcblkp1\n  </code>\n  , etc.  To attempt recreate the original environment of the device, you really need the full NAND dumped and partitioned as it is on the chip.\n </p>\n <p>\n  There is also the problem that if the router is not Linux-based, that it may only work with the specific hardware devices in the router.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "LawrenceC",
            "time": "Mar 25, 2017 at 22:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You may need to first unpack the bin file (using something like binwalk).  I don't think that you can just reference the .bin as an hda. Typically, once you unpack the .bin file, you will be given the filesystem of the device.  you have have several different partitions as some router manufactures will create a main fs shared across several models, and then create smaller modules to be loaded into model specific devices.  If you look at the init of the root fs you should be able to see how other partitions in the .bin are getting moved around, and mimic it.\n </p>\n <p>\n  Personally, I have never attempted to emulate the full device, I find more value in being able to unpack the .bin , and scp it over to the wheezy_mips hda and and attempt to run parts of the router by themselves. Also I think you are going to run into networking problems.  emulating the wheezy_mips hda is easy, remember that your .bin is meant to load in an environment that has several network interfaces,\n </p>\n <p>\n  -Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Lexicon",
            "time": "Nov 7, 2016 at 3:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  sudo qemu-system-mips -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda MYROUTERBINARY.bin \n-append \"root=/dev/sda1 console=ttyS0\"-nographic\n </p>\n <p>\n  Do the equipment you will use the bin file has partitions?\nI will add as a final statement --no-acpi. It should do it. When you run qemu systems that part is very important. Or the symptom you are explaining will happend.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Julio Viera",
            "time": "Feb 21, 2017 at 1:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}