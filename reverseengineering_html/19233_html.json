{
    "title": "Instruction counting anti-debug",
    "link": "https://reverseengineering.stackexchange.com/questions/19233/instruction-counting-anti-debug",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently came across this anti-debug technique being used in the wild.\n </p>\n <p>\n  In The\n  <em>\n   Ultimate Anti-Debugging Reference\n  </em>\n  , the author wrote in the \"Instruction Counting\" section\n </p>\n <blockquote>\n  <p>\n   A debugger will interfere with the\n  single-stepping, resulting in a different count of\n  instructions compared to when a debugger is not\n  present.\n  </p>\n </blockquote>\n <p>\n  From experimenting with this technique a bit, it seems that when you set a hardware breakpoint in x64dbg, the debug registers of\n  <em>\n   all threads\n  </em>\n  are not only set, but also frozen - so that for example - if the program calls SetThreadContext to change these registers, x64dbg seems to change them back.\n </p>\n <p>\n  Given how x64dbg works, and that the technique relies on these debug registers, isn't this technique limited to detecting the presence or modification of hardware breakpoints?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 0,
    "views": "401",
    "tags": [
        "debuggers",
        "anti-debugging"
    ],
    "user": "P. Private",
    "time": "Sep 3, 2018 at 0:44",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n About x64dbg, the debug registers aren’t written back if the debuggee modifies them. Probably the GUI wasn’t refreshed or something.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n Detecting the presence of the breakpoints is more obvious than counting the instructions, and counting the instructions can be used to introduce side-effects if the count is wrong.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}