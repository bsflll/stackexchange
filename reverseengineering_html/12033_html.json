{
    "title": "how to extract a file embedded in an .exe?",
    "link": "https://reverseengineering.stackexchange.com/questions/12033/how-to-extract-a-file-embedded-in-an-exe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  for some months nearly a year of reversing an app not for cracking but my is to see the difference between the registered version and the unregistered one.\naccording to my research both apps(registered or not) displays a dialog but the unregistered version have two header files in different position, I found that using XORSearch and I thought like there is another executable inside the unregistered app then and I also found some calls like\n </p>\n <pre><code>     005A0B8E    mov        edx,5A0D88; '[my documents]'\n     005A0B93    call       @UStrLAsg\n     005A0B98    lea        edx,[ebp-18]\n     005A0B9B    mov        eax,dword ptr [ebp-4]\n     005A0B9E    call       LowerCase\n     005A0BA3    mov        edx,dword ptr [ebp-18]\n     005A0BA6    mov        eax,dword ptr [ebp-0C]\n     005A0BA9    call       Pos\n     005A0BAE    test       eax,eax\n    >005A0BB0    jle        005A0BE1\n     005A0BB2    lea        edx,[ebp-8]\n     005A0BB5    mov        eax,5\n     005A0BBA    call       005A0A7C\n     005A0BBF    movzx      eax,byte ptr ds:[5A0D78]; 0x3\n     005A0BC6    push       eax\n     005A0BC7    push       ebx\n     005A0BC8    lea        edx,[ebp-1C]\n     005A0BCB    mov        eax,dword ptr [ebp-4]\n     005A0BCE    call       LowerCase\n     005A0BD3    mov        eax,dword ptr [ebp-1C]\n     005A0BD6    mov        ecx,dword ptr [ebp-8]\n     005A0BD9    mov        edx,dword ptr [ebp-0C]\n     005A0BDC    call       StringReplace\n     005A0BE1    lea        eax,[ebp-0C]\n     005A0BE4    mov        edx,5A0DB4; '[all users documents]'\n     005A0BE9    call       @UStrLAsg\n     005A0BEE    lea        edx,[ebp-20]\n     005A0BF1    mov        eax,dword ptr [ebp-4]\n     005A0BF4    call       LowerCase\n     005A0BF9    mov        edx,dword ptr [ebp-20]\n     005A0BFC    mov        eax,dword ptr [ebp-0C]\n     005A0BFF    call       Pos\n     005A0C04    test       eax,eax\n    >005A0C06    jle        005A0C37\n     005A0C08    lea        edx,[ebp-8]\n     005A0C0B    mov        eax,2E\n     005A0C10    call       005A0A7C\n     005A0C15    movzx      eax,byte ptr ds:[5A0D78]; 0x3\n     005A0C1C    push       eax\n     005A0C1D    push       ebx\n     005A0C1E    lea        edx,[ebp-24]\n     005A0C21    mov        eax,dword ptr [ebp-4]\n     005A0C24    call       LowerCase\n     005A0C29    mov        eax,dword ptr [ebp-24]\n     005A0C2C    mov        ecx,dword ptr [ebp-8]\n     005A0C2F    mov        edx,dword ptr [ebp-0C]\n     005A0C32    call       StringReplace\n     005A0C37    lea        eax,[ebp-0C]\n     005A0C3A    mov        edx,5A0DEC; '[program folder]'\n     005A0C3F    call       @UStrLAsg\n     005A0C44    lea        edx,[ebp-28]\n     005A0C47    mov        eax,dword ptr [ebp-4]\n     005A0C4A    call       LowerCase\n     005A0C4F    mov        edx,dword ptr [ebp-28]\n     005A0C52    mov        eax,dword ptr [ebp-0C]\n     005A0C55    call       Pos\n     005A0C5A    test       eax,eax\n    >005A0C5C    jle        005A0CA5\n     005A0C5E    lea        edx,[ebp-30]\n     005A0C61    mov        eax,[005CC76C]; ^Application:TApplication\n     005A0C66    mov        eax,dword ptr [eax]\n     005A0C68    call       TApplication.GetExeName\n     005A0C6D    mov        eax,dword ptr [ebp-30]\n     005A0C70    lea        edx,[ebp-2C]\n     005A0C73    call       ExtractFileDir\n     005A0C78    mov        eax,dword ptr [ebp-2C]\n     005A0C7B    lea        edx,[ebp-8]\n     005A0C7E    call       IncludeTrailingPathDelimiter\n     005A0C83    movzx      eax,byte ptr ds:[5A0D78]; 0x3\n     005A0C8A    push       eax\n     005A0C8B    push       ebx\n     005A0C8C    lea        edx,[ebp-34]\n     005A0C8F    mov        eax,dword ptr [ebp-4]\n     005A0C92    call       LowerCase\n     005A0C97    mov        eax,dword ptr [ebp-34]\n     005A0C9A    mov        ecx,dword ptr [ebp-8]\n     005A0C9D    mov        edx,dword ptr [ebp-0C]\n     005A0CA0    call       StringReplace\n     005A0CA5    lea        eax,[ebp-0C]\n     005A0CA8    mov        edx,5A0E1C; '[desktop]'\n     005A0CAD    call       @UStrLAsg\n     005A0CB2    lea        edx,[ebp-38]\n     005A0CB5    mov        eax,dword ptr [ebp-4]\n     005A0CB8    call       LowerCase\n     005A0CBD    mov        edx,dword ptr [ebp-38]\n     005A0CC0    mov        eax,dword ptr [ebp-0C]\n     005A0CC3    call       Pos\n     005A0CC8    test       eax,eax\n    >005A0CCA    jle        005A0CF8\n     005A0CCC    lea        edx,[ebp-8]\n     005A0CCF    xor        eax,eax\n     005A0CD1    call       005A0A7C\n     005A0CD6    movzx      eax,byte ptr ds:[5A0D78]; 0x3\n     005A0CDD    push       eax\n     005A0CDE    push       ebx\n     005A0CDF    lea        edx,[ebp-3C]\n     005A0CE2    mov        eax,dword ptr [ebp-4]\n     005A0CE5    call       LowerCase\n     005A0CEA    mov        eax,dword ptr [ebp-3C]\n     005A0CED    mov        ecx,dword ptr [ebp-8]\n     005A0CF0    mov        edx,dword ptr [ebp-0C]\n     005A0CF3    call       StringReplace\n     005A0CF8    lea        edx,[ebp-40]\n     005A0CFB    mov        eax,dword ptr [ebx]\n     005A0CFD    call       ExcludeTrailingPathDelimiter\n     005A0D02    mov        edx,dword ptr [ebp-40]\n     005A0D05    mov        eax,ebx\n     005A0D07    call       @UStrAsg\n</code></pre>\n <p>\n  is it possible to extract an executable inside another executable an d how?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 2,
    "views": "5k",
    "tags": [
        "disassembly",
        "debugging",
        "delphi"
    ],
    "user": "Alexio puk2sefu",
    "time": "Feb 15, 2016 at 2:15",
    "comments": [
        {
            "user": "Coderkids Official",
            "text": "<html><body><span class=\"comment-copy\">\n Is it a .NET CLR EXE? If it is, use Telerik JustDecompile.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is possible. Where is the embedded executable located? Based on my experience there are a couple of locations:\n </p>\n <ul>\n  <li>\n   <strong>\n    Overlay\n   </strong>\n   : If it is in overlay, just select it entirely from the \"MZ\" signature to the end and dump it. Try to open it in the debugger then to see if it is working. More about this can be found\n   <a href=\"https://reverseengineering.stackexchange.com/questions/2014/how-can-one-extract-the-appended-data-of-a-portable-executable\">\n    here\n   </a>\n  </li>\n  <li>\n   <strong>\n    Resource\n   </strong>\n   : If the embedded file is part of the resource, just dump the appropriate resource using some tool like\n   <a href=\"https://www.aldeid.com/wiki/LordPE\" rel=\"nofollow noreferrer\">\n    LordPE\n   </a>\n  </li>\n  <li>\n   <strong>\n    Section\n   </strong>\n   : This is the most trickiest case if you are new to this. Locate the first byte of the embedded PE file (the \"MZ\" signature bytes). From there position at offset 0x150. There you have a 4 byte value which contains the\n   <em>\n    SizeOfImage\n   </em>\n   . The\n   <em>\n    SizeOfImage\n   </em>\n   field tells you how much memory space the PE file takes when loaded in memory. When you get that value, you can select that many bytes and dump them. This way you are sure that the entire embedded file will be dumped.\n  </li>\n </ul>\n <p>\n  NOTE: If the original file has overlay, it would be a good idea to copy that overlay to the embedded file once you extract it because it is possible that the dumped file will make use of the overlay data.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Alexio puk2sefu",
                    "text": "<span class=\"comment-copy\">how can I dump it, can use OllyDbg, with all these PE size 17.7mb  File size 2.24 mb</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (assuming the file inside is not encrypted) you could try to look for hex values 4D 5A 90 00 it's start of DOS header then copy everything until the end and paste into new file.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "krusty",
            "time": "Feb 15, 2016 at 9:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Alexio puk2sefu",
                    "text": "<span class=\"comment-copy\">bytes not found, maybe the file inside is protected or doesn't have DOS stub</span>",
                    "time": null
                }
            ]
        }
    ]
}