{
    "title": "What utilities allow you to debug a process without pausing execution?",
    "link": "https://reverseengineering.stackexchange.com/questions/30513/what-utilities-allow-you-to-debug-a-process-without-pausing-execution",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was just reading this answer on StackOverflow,\n  <a href=\"https://stackoverflow.com/a/28511887/124486\">\n   <em>\n    \"How can you debug a process using gdb without pausing it?\"\n   </em>\n  </a>\n </p>\n <blockquote>\n  <p>\n   The Linux kernel provides some support for this via\n   <code>\n    PTRACE_SEIZE\n   </code>\n   , but gdb doesn't use this yet.  There's a\n   <a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=15250\" rel=\"nofollow noreferrer\">\n    bug in bugzilla you can track,\n    <em>\n     \"Bug 15250 - use\n     <code>\n      PTRACE_SEIZE\n     </code>\n     and\n     <code>\n      PTRACE_INTERRUPT\n     </code>\n     \"\n    </em>\n   </a>\n  </p>\n </blockquote>\n <p>\n  I was able to find\n  <code>\n   PTRACE_SEIZE\n  </code>\n  documented in\n  <code>\n   man ptrace\n  </code>\n  ,\n </p>\n <blockquote>\n  <p>\n   <code>\n    PTRACE_SEIZE\n   </code>\n   (since Linux 3.4): Attach  to  the process specified in pid, making it a tracee of the calling process.  Unlike\n   <code>\n    PTRACE_ATTACH\n   </code>\n   ,\n   <code>\n    PTRACE_SEIZE\n   </code>\n   does not stop the process.  Group- stops are reported as\n   <code>\n    PTRACE_EVENT_STOP\n   </code>\n   and\n   <code>\n    WSTOPSIG(status)\n   </code>\n   returns the stop signal.  Automatically attached  children  stop  with\n   <code>\n    PTRACE_EVENT_STOP\n   </code>\n   and\n   <code>\n    WSTOPSIG(status)\n   </code>\n   returns\n   <code>\n    SIGTRAP\n   </code>\n   instead of having\n   <code>\n    SIGSTOP\n   </code>\n   signal delivered to them.\n   <code>\n    execve(2)\n   </code>\n   does not deliver an extra\n   <code>\n    SIGTRAP\n   </code>\n   .  Only a\n   <code>\n    PTRACE_SEIZE\n   </code>\n   d process can accept\n   <code>\n    PTRACE_INTERRUPT\n   </code>\n   and\n   <code>\n    PTRACE_LISTEN\n   </code>\n   commands.  The \"seized\" behavior just described is inherited by children that are  automatically  at‚Äê tached  using\n   <code>\n    PTRACE_O_TRACEFORK\n   </code>\n   ,\n   <code>\n    PTRACE_O_TRACEVFORK\n   </code>\n   , and\n   <code>\n    PTRACE_O_TRACECLONE\n   </code>\n   .  addr must be zero.  data contains a bit mask of ptrace options to activate immediately. Permission to perform a\n   <code>\n    PTRACE_SEIZE\n   </code>\n   is governed by a ptrace access mode\n   <code>\n    PTRACE_MODE_ATTACH_REALCREDS\n   </code>\n   check; see below.\n  </p>\n </blockquote>\n <p>\n  That raises the question if\n  <code>\n   PTRACE_SEIZE\n  </code>\n  isn't supported by gdb, what tooling (if any) does support this functionality on Linux?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 0,
    "views": "369",
    "tags": [
        "linux",
        "gdb"
    ],
    "user": "Evan Carroll",
    "time": "Jun 12, 2022 at 23:17",
    "comments": [],
    "answers_data": []
}