{
    "title": "IdaPro/HexRays type libraries",
    "link": "https://reverseengineering.stackexchange.com/questions/8961/idapro-hexrays-type-libraries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to improve my use of ida/hexrays... I have a x86 linux elf binary, non-stripped, statically linked w/ openssl. So you can see all of the OpenSSL function names in the binary.\n </p>\n <p>\n  I used the tilib cli tool to make a type library from the bio.h header. It looks like it worked and the .til has a bunch of struct and function definitions. I copied it over and added it in ida in the \"type libraries\" dialog. I know it got stuff cause I retyped a parameter in a function in hexrays from int to BIO* and it fixed up all of the references to the struct members.\n </p>\n <p>\n  But it's not fixing up function prototypes. e.g. BIO_puts is still (int,int) even though the til has it as (BIO *bp, const char *buf).\n </p>\n <p>\n  Am I doing something wrong, or am I expecting too much out of hexrays/ida? thanks in advance!\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "tecknicaltom",
    "time": "May 22, 2015 at 16:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA's til files are basically IDA's way of storing type information for particular functions. AFAIK, a .til file doesn't tell IDA how to actually recognize that function in order to apply function prototype information.  For that piece you're going to need produce the requisite .sig file using IDA's Flirt utilities.\n </p>\n <p>\n  By default, IDA won't replace existing type information unless it was \"auto-generated\" upon initial analysis; so you've got to reset the type field for IDA to fill in the type info. Since the names were already present, it wouldn't count as \"auto-generated\" to IDA (i.e. sub_XXXX).\n </p>\n <p>\n  That being said, you should still be able to make use of the .til file you produced. \nGo to one of the OpenSSL functions, and put your cursor on the name. Press Y. This will bring up your type declaration. Clear the field, and hit ok. Then press N, make sure the name is exactly as it's spelled in the header/.til file, and then press enter. It should then populate the correct type information.\n </p>\n <p>\n  Obviously, this is a pain for an entire library. I'm assuming that all the OpenSSL functions are in the same area. So if you know the start and end address you can do something like this to fix it all up (assuming the names already match your header file):\n </p>\n <pre><code>for func_ea in Functions(openssl_start_ea, openssl_end_ea):\n    func_name = GetFunctionName(func_ea) #Get Current Name\n    SetType(func_ea, \"\") #Reset Type Info\n    MakeName(func_ea, func_name) #Recreate Name to get new type info\n</code></pre>\n</div>\n</body></html>",
            "votes": "6",
            "user": "mayahustle",
            "time": "May 26, 2015 at 13:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}