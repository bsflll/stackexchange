{
    "title": "Intel syntax - Meaning of jmp/call instruction with $+5 operand",
    "link": "https://reverseengineering.stackexchange.com/questions/13369/intel-syntax-meaning-of-jmp-call-instruction-with-5-operand",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently parsing a lot of assembly files and don't understand a specific\n  <code>\n   jmp\n  </code>\n  or\n  <code>\n   call\n  </code>\n  with\n  <code>\n   $+5\n  </code>\n  as operand:\n </p>\n <pre><code>call $+5\n jmp $+5\n</code></pre>\n <p>\n  To provide more context I grepped some of the occurrences:\n </p>\n <pre><code>mov esp, [ebp+ms_exc.old_esp]\nand [ebp+ms_exc.registration.TryLevel], 0\nor [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\ncall $+5\njmp sub_4493CA\n===== S U B R O U T I N E =======================================\npush esi\n\n[...]\n\nmov esp, [ebp+ms_exc.old_esp]\nand [ebp+ms_exc.registration.TryLevel], 0\nor [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\ncall $+5\njmp sub_45746A\n===== S U B R O U T I N E =======================================\nmov eax, dword_4778F8\n\n[...]\n\nmov eax, ebx\ntest al, 2\njnz loc_100994B8\njmp $+5\n-----------------------------------------------------------------\nmov eax, [ebp+var_34]\nmov [ebp+var_40], eax\n</code></pre>\n <p>\n  What is the meaning of the\n  <code>\n   $+5\n  </code>\n  operand?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "x86",
        "call",
        "intel"
    ],
    "user": "knx",
    "time": "Aug 26, 2016 at 11:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  opcode for call $+5 is e8 00000000 so it calls the next instruction\n  \n\n  opcode for jmp  $+5 is e9 00000000 so it jumps to the next insturction\n </p>\n <pre><code>76E95FE0                        E8 00000000 CALL    76E95FE5         ;  <ntdll.call here>\n76E95FE5 <ntdll.call here>      00          DB      00\n76E95FE6                        E9 00000000 JMP     76E95FEB         ;  <ntdll.jmp_here>\n76E95FEB <ntdll.jmp_here>       00          DB      00\n76E95FEC                        EB 02       JMP     SHORT 76E95FF0   ;  <ntdll.jmp+4>\n76E95FEE                        00          DB      00\n76E95FEF                        00          DB      00\n76E95FF0 <ntdll.jmp+4>          00          DB      00\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Aug 26, 2016 at 18:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">More likely E9 00 00 00 00.  EB 02 would be $+4.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  $ = Current position (beginning of the instruction)\n </p>\n <p>\n  +5 = +5 bytes from the beginning of the instruction\n </p>\n <p>\n  jmp $+5  = jmp 3 bytes past the jmp instruction (short jmp takes 2 bytes + 3 bytes past that)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Sigtran",
            "time": "Aug 26, 2016 at 11:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}