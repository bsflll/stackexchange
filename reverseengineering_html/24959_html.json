{
    "title": "Find code executed on button press in Qt5 Linux application",
    "link": "https://reverseengineering.stackexchange.com/questions/24959/find-code-executed-on-button-press-in-qt5-linux-application",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an executable of a (rather simple) GUI application on Linux, built in Qt5. I am able to run it, and want to find out what happens internally when I press one of the buttons.\nI suspect that the button might not just execute some code but run another executable, which has been packaged into the main one. I want to find out which code is being run, or extract the executable (if my assumption is true), both would be fine. I know roughly what function name to look for, since I can sort of guess it from what the button does and it's tooltip.\n </p>\n <p>\n  The ultimate goal is to isolate the functionality of the button to be able to run it on the terminal.\n </p>\n <p>\n  I am new to reverse engineering, please excuse if anything I write is wrong or trivial. So far I  have found\n  <a href=\"https://reverseengineering.stackexchange.com/questions/14209/how-to-reverse-engineer-a-linux-executable-to-find-the-parameters\">\n   this\n  </a>\n  and\n  <a href=\"https://reverseengineering.stackexchange.com/questions/8307/possible-to-capture-replay-gui-functions-by-puppet-stringing/8308#8308\">\n   this\n  </a>\n  question which are kind of related and use\n  <code>\n   objdump\n  </code>\n  and\n  <code>\n   readelf\n  </code>\n  , but so far I had no luck with those.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "958",
    "tags": [
        "disassembly",
        "linux",
        "qt"
    ],
    "user": "codecrap",
    "time": "May 9, 2020 at 17:01",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n There are a lot of disassembled/decompilers that are very good; some for free, some for a price. Are you using one of those?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "codecrap",
            "text": "<html><body><span class=\"comment-copy\">\n Nope, so far I have tried objdump and readelf commands and the debugger of Qt Studio. Which (free) one would you suggest?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "progopis",
            "text": "<html><body><span class=\"comment-copy\">\n I suggest to use IDA Freeware, IDA Home. I suggest using IDA Freeware, IDA Home. As a free (and opensource) alternative, you can try Ghidra, but I personally don't like it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n There's also Binary Ninja Cloud and the Retargetable Decompiler.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recommend to use IDA for this task but you can try something other. There are dozens of disassemblers.\n </p>\n <p>\n  Open your app in the disassebmler, locate something like that:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/H6hpL.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Method names of the MainWindow\" src=\"https://i.sstatic.net/H6hpL.png\"/>\n  </a>\n </p>\n <p>\n  Scroll up and find XRef with 'qt_metacast(char const*)' (in case the binary is not stripped):\n </p>\n <pre><code>.rodata:00069B90 aMainwindow_0   db 'MainWindow',0       ; DATA XREF: MainWindow::qt_metacast(char const*)+18â†‘o\n</code></pre>\n <p>\n  Open the class method by click to this XREF or with Ctrl+X hotkey.\n </p>\n <p>\n  You will see 'MainWindow::qt_metacast' method but you need 'MainWindow::qt_metacall' now. Inside of the 'MainWindow::qt_metacall' you will see 'MainWindow::qt_static_metacall' call. Inside it will be a big switch with real slots called when buttons are clicked (more generally: not only buttons and not only clicks).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/JSMxi.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Inside of the MainWindow::qt_static_metacall\" src=\"https://i.sstatic.net/JSMxi.png\"/>\n  </a>\n </p>\n <p>\n  As it's easy to notice, the necessary names already have the correct names, but in the more complicated case, when the binary is stripped, it will be necessary to restore the names from the table of method names. The number in the switch corresponds to the row index with the method name in the method table with some exceptions (refer to the Qt5 sources please)\n </p>\n <p>\n  An example of some additional strings located in the same table of methods that are not slots:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/jNICk.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/jNICk.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "progopis",
            "time": "May 10, 2020 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}