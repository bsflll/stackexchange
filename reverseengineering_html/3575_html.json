{
    "title": "Issues writing a bootloader in x86 16-bit machine code",
    "link": "https://reverseengineering.stackexchange.com/questions/3575/issues-writing-a-bootloader-in-x86-16-bit-machine-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am having trouble displaying simple text.\nI am trying to do it all in machine code with\n  <code>\n   INT 10h\n  </code>\n  , but:\n </p>\n <ol>\n  <li>\n   <p>\n    I can't find the binary opcode for\n    <code>\n     INT 10h\n    </code>\n    anywhere in the Intel Manual.\n   </p>\n  </li>\n  <li>\n   <p>\n    I can't figure out how to load the binary ASCII representation of \"Hello world!\" in to the data segment register (\n    <code>\n     DS\n    </code>\n    , which needs 12 bytes of data to represent the full text data).\n   </p>\n  </li>\n </ol>\n <p>\n  I considered doing it by writing directly to memory-mapped VGA memory, but that appeared harder than using interrupts from BIOS. And I'm not fully knowledgeable on this full scope of how that'd work.\n </p>\n <p>\n  Can anyone help me sort this out here, please? I don't need help with x86 instructions\n  <em>\n   per se\n  </em>\n  , but with how I'd encode this all in binary properly, and where to find all interrupts' opcodes.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "366",
    "tags": [
        "memory",
        "encodings",
        "machine-code"
    ],
    "user": "Tomahawker",
    "time": "Aug 6, 2018 at 7:55",
    "comments": [
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n You might want to read:\n <a href=\"http://wiki.osdev.org/Main_Page\" rel=\"nofollow noreferrer\">\n  wiki.osdev.org/Main_Page\n </a>\n Grab an Ascii table for figuring out the binairy code for the ascii string. Also, the title is a bit weird. As there have been 16-bit bootloaders, remember windows3.11 for example. Lastly, this should be on stack overflow. For RE-SE (this one) I'd recommend you try to reverse a 16-bit bootloader :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    To call an interrupt, you'll probably want to use\n    <code>\n     int imm8\n    </code>\n    which is encoded as\n    <code>\n     0xcd\n    </code>\n    ,\n    <code>\n     0xnn\n    </code>\n    (\n    <code>\n     0x10\n    </code>\n    in this case).\n   </p>\n  </li>\n  <li>\n   <p>\n    For bootloaders, it's pretty common to stick the data in between the\n    <code>\n     jmp\n    </code>\n    at the start of the bootloader and its target. You don't really need to mess around with\n    <code>\n     ds\n    </code>\n    unless you're making a very large bootloader (which loads additional sectors from disk).\n   </p>\n  </li>\n </ol>\n <p>\n  For an interrupt reference, should you need such a thing, I'd probably suggest\n  <a href=\"http://www.ctyme.com/rbrown.htm\" rel=\"noreferrer\">\n   Ralph Browns Interrupt List\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "perror",
            "time": "Jan 29, 2014 at 8:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Regarding (2), you don't load the entire string into the segment register, you take the selector for the memory region that holds the string, and place\n  <em>\n   that\n  </em>\n  into the segment register.  For 16-bit bootloader environment, it's probably going to be the same as CS, so you just\n  <code>\n   push cs, pop ds\n  </code>\n  (though usually\n  <code>\n   cs=ds=es=ss\n  </code>\n  already on startup, anyway).\n </p>\n <p>\n  To write to the video memory, just load\n  <code>\n   0xb800\n  </code>\n  into\n  <code>\n   es\n  </code>\n  , and then the brute-force way to write to the screen looks like:\n </p>\n <pre><code>mov es:[0], 'H'\nmov es:[2], 'e'\nmov es:[4], 'l'\nmov es:[6], 'l'\nmov es:[8], 'o'\n</code></pre>\n <p>\n  And, so on. This is not the optimal way, of course.  Normally, you would use a loop and a string operation, or just use the BIOS calls.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "perror",
            "time": "Feb 2, 2014 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}