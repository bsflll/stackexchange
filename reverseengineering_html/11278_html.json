{
    "title": "Modern equivalent to rsymtab for reconstructing symbol table for statically linked / stripped binaries?",
    "link": "https://reverseengineering.stackexchange.com/questions/11278/modern-equivalent-to-rsymtab-for-reconstructing-symbol-table-for-statically-link",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working with a 32-bit ELF binary that (I believe) has been statically linked against a few different third-party libraries. It has also been stripped, so I don't have much to go on with respect to its symbol table.\n </p>\n <p>\n  I came across the old\n  <a href=\"http://reverse.lostrealm.com/tools/rsymtab.html\" rel=\"nofollow\">\n   rsymtab\n  </a>\n  tool that claims to be able to match object code from non-stripped libraries to code in your executable. It would then generate a symbol table file when it finds matches. Unfortunately, rsymtab is more than ten years old and build against a library that doesn't exist on modern Linux systems (libbfd). Is there any modern equivalent to this tool?\n </p>\n <p>\n  (Is this even the right approach when reversing a static/stripped binary? Should the object code be expected to match exactly between the binary and the right version of the third-party lib?)\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 0,
    "views": "346",
    "tags": [
        "linux",
        "elf",
        "symbols"
    ],
    "user": "Colin",
    "time": "Nov 9, 2015 at 1:18",
    "comments": [],
    "answers_data": []
}