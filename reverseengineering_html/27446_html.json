{
    "title": "How to extract the kernel assembly code from a zImage?",
    "link": "https://reverseengineering.stackexchange.com/questions/27446/how-to-extract-the-kernel-assembly-code-from-a-zimage",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  here is the situation, i have a OnePlus phone and i want to explore his kernel, so i downloaded the zip firmware from the oneplus website, extract the img files from the payload.bin, use\n  <a href=\"https://github.com/anestisb/android-unpackbootimg\" rel=\"nofollow noreferrer\">\n   this tool\n  </a>\n  to extract the zImage from the boot.img.\n </p>\n <p>\n  i found an\n  <a href=\"https://acassis.wordpress.com/2015/06/04/how-to-recover-and-decompress-a-linux-kernel-dumped-mtd-partition/\" rel=\"nofollow noreferrer\">\n   article here\n  </a>\n  to extract a gzip from the zImage but the output from\n  <code>\n   arm-linux-gnueabi-objdump\n  </code>\n  is kinda weird with the\n  <code>\n   <UNDEFINED> instruction: 0xf1008b1f\n  </code>\n  :\n </p>\n <pre><code>arm-linux-gnueabi-objdump -EL -b binary -D -m armv5t boot.img-zImage | grep 8b1f\n    2f14:   f1008b1f            ; <UNDEFINED> instruction: 0xf1008b1f\n    3290:   f1008b1f            ; <UNDEFINED> instruction: 0xf1008b1f\n    3384:   f1008b1f            ; <UNDEFINED> instruction: 0xf1008b1f\n   8a224:   2a0003f4    bcs 0x8b1fc\n   8b1f0:   f9000518            ; <UNDEFINED> instruction: 0xf9000518\n   8b1f4:   f9000308            ; <UNDEFINED> instruction: 0xf9000308\n   8b1f8:   f9405fe8            ; <UNDEFINED> instruction: 0xf9405fe8\n   8b1fc:   f9000708            ; <UNDEFINED> instruction: 0xf9000708\n   8fd54:   b98b1f28    stmiblt fp, {r3, r5, r8, r9, sl, fp, ip}\n   cffbc:   9a9f87e9    bls 0xfe8b1f68\n   d0008:   9a9f87ea    bls 0xfe8b1fb8\n  18a220:   aa0003f3    bge 0x18b1f4\n  18b1f0:   f81a83a8            ; <UNDEFINED> instruction: 0xf81a83a8\n  18b1f4:   b40001a2    strlt   r0, [r0], #-418 ; 0xfffffe5e\n  18b1f8:   d0010268    andle   r0, r1, r8, ror #4\n  18b1fc:   b94e5108    stmdblt lr, {r3, r8, ip, lr}^\n^C\n\n</code></pre>\n <p>\n  Also i noticed that the file type was not recognized:\n </p>\n <pre><code>user@ubuntu:~/Desktop/bootImg$ file zImage \nzImage: data\n</code></pre>\n <p>\n  But anyway i converted the\n  <code>\n   2f14\n  </code>\n  to decimal and tried to extract a gzip archive:\n </p>\n <pre><code>dd if=zImage of=piggy.gz bs=1 skip=12052\n</code></pre>\n <p>\n  and then tried to extract:\n </p>\n <pre><code>user@ubuntu:~/Desktop/bootImg$ gunzip piggy.gz \ngzip: piggy.gz: unknown method 0 -- not supported\n</code></pre>\n <p>\n  also, the archive seems to be encrypted:\n </p>\n <pre><code>user@ubuntu:~/Desktop/bootImg$ file piggy.gz \npiggy.gz: gzip compressed data, reserved method, ASCII, has comment, encrypted, last modified: Fri Aug 29 04:43:12 2014, from Unix, original size modulo 2^32 0\n</code></pre>\n <p>\n  note: i know that the oneplus kernels are opensource but i really want to practice my reverse engineering skills.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "android",
        "arm",
        "kernel"
    ],
    "user": "BtPython",
    "time": "Apr 12, 2021 at 15:20",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n have you tried using binwalk? Also, are you able to share a link to the file?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "RISHAV BHARDWAJ",
            "text": "<html><body><span class=\"comment-copy\">\n Why are you using -m armv5t, use your phone arch aarch64 or armv7\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's possible that the kernel is not actually gzip compressed but uses another algorithm. I would recommend using\n  <a href=\"https://github.com/marin-m/vmlinux-to-elf\" rel=\"nofollow noreferrer\">\n   vmlinux-to-elf\n  </a>\n  which can not only automatically detect the compressed stream, uncompress, and convert to an ELF but also parse the kallsyms tables and symbolize the image.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 14, 2021 at 17:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}