{
    "title": "Differences between Mach Services and XPC Services in macOS Sandbox Profiles",
    "link": "https://reverseengineering.stackexchange.com/questions/33015/differences-between-mach-services-and-xpc-services-in-macos-sandbox-profiles",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to learn more about IPC implementations (mach/xpc) and how corresponding services are managed using sandbox profiles on macOS.\n </p>\n <p>\n  After looking at many different profiles, I have learned that a service connection can be whitelisted with:\n </p>\n <pre><code>(allow mach-lookup (...))\n</code></pre>\n <p>\n  I have noticed two different flavors of this syntax, fox example:\n </p>\n <pre><code>(allow mach-lookup\n    (global-name \"com.apple.tccd.system\"))\n</code></pre>\n <p>\n  And the other variant:\n </p>\n <pre><code>(allow mach-lookup\n       (xpc-service-name \"com.apple.audio.toolbox.reporting.service\"))\n</code></pre>\n <p>\n  At first glance, this looks very straightforward: The first version whitelists connections to a mach service provided by\n  <code>\n   com.apple.tccd.system\n  </code>\n  whereas the second version whitelists connections to an xpc service provided by\n  <code>\n   com.apple.audio.toolbox.reporting.service\n  </code>\n  . However, after decompiling the service binaries I have noticed that both service only seem to utilize xpc API's and none of the low level mach API's.\n </p>\n <p>\n  For example\n  <code>\n   com.apple.tccd.system\n  </code>\n  (loading the service binary\n  <code>\n   /System/Library/PrivateFrameworks/TCC.framework/Support/tccd\n  </code>\n  ) creates the following xpc service on startup:\n </p>\n <pre><code>...\nif ( byte_1000A4788 )\n    service_name = \"com.apple.tccd.system\";\n  else\n    service_name = \"com.apple.tccd\";\n  v19 = (void *)qword_1000A4790;\n  if ( os_log_type_enabled((os_log_t)qword_1000A4790, OS_LOG_TYPE_INFO) )\n  {\n    ...\n  }\n  v22 = objc_retainAutoreleasedReturnValue(+[TCCDEventPublisher sharedPublisher](&OBJC_CLASS___TCCDEventPublisher, \"sharedPublisher\"));\n  objc_msgSend((id)qword_1000A4A48, \"setEventPublisher:\", v22);\n  objc_release(v22);\n  mach_service = xpc_connection_create_mach_service(service_name, 0LL, 1uLL);\n...\n</code></pre>\n <p>\n  What I don't understand is why all services (that I looked at) utilize the\n  <code>\n   xpc_*\n  </code>\n  API's. What is the difference between a\n  <strong>\n   global-name\n  </strong>\n  and a\n  <strong>\n   xpc-service-name\n  </strong>\n  in a sandbox profile, if every service uses the same API's anyway? Since there is a differentiation in the sandbox profiles, there must be a reason.\n </p>\n <p>\n  I know that xpc is essentially built on mach. Is it theoretically possible, to completely ignore xpc and only use mach to talk to an xpc service?\n </p>\n <p>\n  Any help and clarification is highly appreciated!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "45",
    "tags": [
        "macos",
        "sandbox"
    ],
    "user": "n0ne",
    "time": "Jun 8, 2024 at 10:11",
    "comments": [],
    "answers_data": []
}