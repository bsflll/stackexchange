{
    "title": "Detecting an emulator using the windows api",
    "link": "https://reverseengineering.stackexchange.com/questions/2805/detecting-an-emulator-using-the-windows-api",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been given a program that emulates the Windows API. I'm attempting to find flaws in this emulator where it either:\n </p>\n <ol>\n  <li>\n   Always returns a constant value, regardless of the host system\n   <em>\n    (Useful for fingerprinting)\n   </em>\n   <ul>\n    <li>\n     For example, calls to get the username in this emulator return\nvarious random strings. But calls to get the free disk space always\nreturns the same number, regardless of the actual value on the host\nsystem.\n    </li>\n   </ul>\n  </li>\n  <li>\n   Returns the real value from bare metal\n   <em>\n    (Emulator leaking real information)\n   </em>\n   <ul>\n    <li>\n     For example, calls to get the MAC address return the value from the host system.\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  Instead of writing functions to test the return values from various functions in the Windows API, I'm looking for a way to automate code generation (preferably in C/C++) to query a large number of functions provided by the WinAPI . Is anything like this possible or has it been done for other projects that I could leverage?\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 2,
    "views": "1k",
    "tags": [
        "winapi"
    ],
    "user": "drewb",
    "time": "Sep 18, 2013 at 4:55",
    "comments": [
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n This should be on the StackOverflow, as it is a software engineering question.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ekse",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure I agree with Stolas' comment as the question is strongly related to reversing, see Rolf's answer.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n @ekse, it is related to Assembly not reverse engineering. Or maybe Security when you try to write a FUD-Virus (or something like that). Nevertheless the subject is interesting ;)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've done this same exercise with anti-virus engines on a number of occasions.  Generally the steps I use are:\n </p>\n <ol>\n  <li>\n   Identify the CPU/Windows emulator.  This is generally the hardest part.  Look at filenames, and also grep the disassembly for large switch statements.  Find the switches that have 200 or more cases and examine them individually.  At least one of them will be related to decoding the single-byte X86 opcodes.\n  </li>\n  <li>\n   Find the dispatcher for the CALL instruction.  Usually it has special processing to determine whether a fixed address is being called.  If this approach yields no fruit, look at the strings in the surrounding modules to see anything that is obviously related to some Windows API.\n  </li>\n  <li>\n   Game over.  AV engines differ from the real processor and a genuine copy of Windows in many easily-discernible ways.  Things to inspect:  pass bogus arguments to the APIs and see if they handle erroneous conditions correctly (they never do).  See if your emulator models the AF flag.  Look up the exception behavior of a complex instruction and see if your emulator implements it properly.  Look at the implementations of GetTickCount and GetLastError specifically as these are usually miserably broken.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "12",
            "user": "Rolf Rolles",
            "time": "Sep 18, 2013 at 8:00",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Previous answer is good.  I would say this depends on machine and emulator.  There are many more tricks to recognize emulators.\n </p>\n <p>\n  You might look at the environment, is there an emultor in the file system?  Is the number of running applications indicating a virtual application?\n </p>\n <p>\n  Ask the operating system whether the application is debugged; different methods exist, most are easily defeated.\n </p>\n <p>\n  I have a program which measures the execution time between close instructions.  If the machine does not have hardware support for emulation, this is pretty reliable.\n </p>\n <p>\n  Use google for anti-debug\n </p>\n <p>\n  Chris Jacobi\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "Chris Jacobi",
            "time": "Dec 27, 2013 at 2:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">This is more a comment than an answer. You do not give any effective way to detect emulation... Try to give at least some technicalities about emulation detection to improve your answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}