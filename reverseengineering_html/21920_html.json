{
    "title": "How to identify/extract relevant assembly from a binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/21920/how-to-identify-extract-relevant-assembly-from-a-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Say I was interested in reverse engineering a specific process in a large binary, say how Google Chrome parses XML, what are some general approaches to identifying the instructions that the program uses to do that?\n </p>\n <p>\n  Sorry I realise this is a broad question, so specifically how would you go about identifying relevant instructions when you have very little understanding about how the program is structured or what dependencies it has?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "362",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis"
    ],
    "user": "Isaac",
    "time": "Aug 18, 2019 at 6:31",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  specifically how would you go about identifying relevant instructions when you have very little understanding about how the program is structured or what dependencies it has?\n </code>\n <- It sounds like you are basically asking \"How does one reverse engineer a binary?\" A specific answer can't be given because there isn't anything specific in the question.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ultimate-anti-reversing",
            "text": "<html><body><span class=\"comment-copy\">\n This book can help you to develop your intuition with binaries for reverse engineering:\n <a href=\"https://en.wikipedia.org/wiki/Reversing:_Secrets_of_Reverse_Engineering\" rel=\"nofollow noreferrer\">\n  See here\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'll present the steps that\n  <em>\n   I would\n  </em>\n  perform in such a case. Note that\n  <em>\n   they aren't necessarily the most efficient and reliable one\n  </em>\n  s although they should work in many cases. I'm assuming that the binary you want to examine isn't packed and obfuscated.\n </p>\n <ol>\n  <li>\n   <strong>\n    Look for the imports\n   </strong>\n   . Sometimes the code you are looking for is just taken from external library. In this case just looking for its documentation will suffice. In case of PE files you can use\n   <a href=\"http://www.dependencywalker.com/\" rel=\"nofollow noreferrer\">\n    Dependency Walker\n   </a>\n   and\n   <a href=\"http://www.purinchu.net/software/elflibviewer.php\" rel=\"nofollow noreferrer\">\n    ELF Library Viewer\n   </a>\n   for ELF files.\n  </li>\n  <li>\n   <strong>\n    Open the file in disassembler\n   </strong>\n   (such as\n   <a href=\"https://github.com/radare/radare2\" rel=\"nofollow noreferrer\">\n    radare2\n   </a>\n   or\n   <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">\n    IDA\n   </a>\n   ) and if debug symbols are attatched, you can search for the function with a name suggesting that it performs the activity you want to find.\n  </li>\n  <li>\n   <strong>\n    Search for strings\n   </strong>\n   . If you notice that some string is used when certain functionality is launched, you may just search for this string in disassembler  and search for the references to it. Then, you can look around this area and you may find the code you are looking for.\n  </li>\n </ol>\n <p>\n  In case all previous methods failed (most likely), it is time for\n  <strong>\n   dynamic analysis\n  </strong>\n  . Since you don't know where to set the breakpoints, you can set them at all the function calls in the program (possibly excluding library functions you aren't interested in). I wrote\n  <a href=\"https://reverseengineering.stackexchange.com/questions/21235/function-call-trace-with-radare2-or-break-on-all-function-call/21724#21724\">\n   radare2 script\n  </a>\n  performing exectly this task.\n </p>\n <p>\n  Assume we want to find out how\n  <em>\n   Google Chrome\n  </em>\n  parses xml files. I would modify this script to log each distinct function call and then simply continue. I would then open\n  <em>\n   Google Chrome\n  </em>\n  in debugger (possibly radare2 but can be any other you can write scripts for) and just wait a couple of seconds with empty page to gather all the functions it calls when doing \"nothing special\".\n </p>\n <p>\n  I would then rerun it, but this time with opening some xml file (for instance by drag and drop onto the empty page). Now, you can compare the files containing all the procedures called and see which extra ones are present in the second file. These (or at least some of them) should be responsible for parsing xml files.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "bart1e",
            "time": "Aug 18, 2019 at 13:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}