{
    "title": "Explain struct access in assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/18467/explain-struct-access-in-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am having trouble understanding working with structs in assembly from disassembly. \ncan you please explain the code below. Disassembly below:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/zJhO2.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"disassembly snippet\" src=\"https://i.sstatic.net/zJhO2.jpg\"/>\n  </a>\n </p>\n <p>\n  Source code:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/d4zvB.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"source code snippet\" src=\"https://i.sstatic.net/d4zvB.jpg\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 3,
    "views": "926",
    "tags": [
        "disassembly",
        "assembly",
        "compiler-optimization"
    ],
    "user": "ReverserT",
    "time": "Jun 6, 2018 at 19:09",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Could you please copy and paste the disassembly instead of posting screenshots? It'd really help others in the future as it improves indexing by search engines. Thanks!\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n apologies for not being clear in my comment. I meant that you should\n <i>\n  edit\n </i>\n your own question to replace the screenshots with the textual form. For this question this would seem to apply to both screenshots. Thank you.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n previous discussion on this optimization:\n <a href=\"https://reverseengineering.stackexchange.com/questions/10839/\">\n  reverseengineering.stackexchange.com/questions/10839\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n I downvoted your question because images of text are\n <i>\n  not useful at all\n </i>\n . There is no need to supply this text as images. Will remove the downvote if you replace the images with text.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is called inlining. strcpy was substituted by mov instructions, because compiler decided that in such way code will run faster.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Anton Kukoba",
            "time": "Jun 6, 2018 at 9:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is manual string assignment. Notice how all DWORDs are composed of printable characters? hit\n  <kbd>\n   r\n  </kbd>\n  in IDA to convert the hex values to string characters.\n </p>\n <p>\n  This code seems to be assigning strings into different stack addresses, 4 characters at a time. This is a common optimization over calling a function that iterates over strings byte by byte.\n </p>\n <p>\n  As others pointed out, this optimization is usually called \"loop unrolling\" as it unrolls several iterations of a loop into sequential assembly, however I often find that type of direct string characters assignment to be more commonly the output of a code similar to the following:\n </p>\n <pre><code>char str[] = \"this is a string\";\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jun 6, 2018 at 16:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Key word: unrolled loop. Probably an inlined <code>memmove</code> (or <code>strcpy</code>).</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@0xC0000022L does it have to be, though? I think it can also be a direct assignment, say <code>char a[] = \"this is a string\";</code>, no?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the optimizations mantras  of the answers got me intrigued so i thought i'll check what actual optimizations are being done  on the code (OP appears to be beginner and i doubted OP  would be capable of optimizing at all )\n </p>\n <p>\n  it appears this is default compilation without optimization enabled in gcc\n </p>\n <p>\n  <strong>\n   gcc version 8.1.0 (i686-win32-dwarf-rev0, Built by MinGW-W64 project)\n  </strong>\n </p>\n <p>\n  <strong>\n   visual studio 2017 15.7.3\n  </strong>\n  doesn't do this kind of code at all whether optimized or not\n </p>\n <p>\n  with optimizations disabled vs resorts to calling strcpy ()\n </p>\n <pre><code>:\\>cl /nologo /Zi booky.cpp\nbooky.cpp\n\n:\\>cdb -c \".lines;uf booky!main;q\" booky.exe | grep -E \"  15|  16|  17\"\n\n\n   15 001c6b35 6850be2100      push    offset booky!__xt_z+0x108 (0021be50)\n   15 001c6b3a 8d8530ffffff    lea     eax,[ebp-0D0h]\n   15 001c6b40 50              push    eax\n   15 001c6b41 e86bb2ffff      call    booky!ILT+3500(_strcpy) (001c1db1) <<<<\n   15 001c6b46 83c408          add     esp,8\n   16 001c6b49 685cbe2100      push    offset booky!__xt_z+0x114 (0021be5c)\n   16 001c6b4e 8d8d62ffffff    lea     ecx,[ebp-9Eh]\n   16 001c6b54 51              push    ecx\n   16 001c6b55 e857b2ffff      call    booky!ILT+3500(_strcpy) (001c1db1) <<<<\n   16 001c6b5a 83c408          add     esp,8\n   17 001c6b5d 6868be2100      push    offset booky!__xt_z+0x120 (0021be68)\n   17 001c6b62 8d5594          lea     edx,[ebp-6Ch]\n   17 001c6b65 52              push    edx\n   17 001c6b66 e846b2ffff      call    booky!ILT+3500(_strcpy) (001c1db1)  <<<<\n   17 001c6b6b 83c408          add     esp,8\n</code></pre>\n <p>\n  optimising for space (O2) or full optimisations (Ox) vs2017 resorts to using sse2 moves\n </p>\n <pre><code>:\\>cl /Zi /O2 booky.cpp\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.14.26430 for x86\n\n:\\>cdb -c \".lines;uf booky!main;q\" booky.exe | grep -E \"  15|  16|  17\"\n   15 00f7aae4 a158befc00      mov     eax,dword ptr [booky!`string'+0x8 (00fcbe58)]\n\n:\\>cdb -c \".lines;uf booky!main;q\" booky.exe | grep -A 5 -E \"  15|  16|  17\"\n   15 00f7aae4 a158befc00      mov     eax,dword ptr [booky!`string'+0x8 (00fcbe58)]\n   19 00f7aae9 b933000000      mov     ecx,33h\n   19 00f7aaee f30f7e0550befc00 movq    xmm0,mmword ptr [booky!`string' (00fcbe50)] <<<<<<<<\n   19 00f7aaf6 89442408        mov     dword ptr [esp+8],eax\n   19 00f7aafa 0fb60568befc00  movzx   eax,byte ptr [booky!`string'+0x8 (00fcbe68)] <<<<<<<\n   19 00f7ab01 8844243a        mov     byte ptr [esp+3Ah],al\n\n:\\>cl /Zi /Ox booky.cpp\n\n:\\>cdb -c \".lines;uf booky!main;q\" booky.exe | grep -A 5 -E \"  15|  16|  17\"\n   15 0138ac74 a198e83d01      mov     eax,dword ptr [booky!__newctype+0x308 (013de898)]\n   19 0138ac79 b933000000      mov     ecx,33h\n   19 0138ac7e f30f7e0590e83d01 movq    xmm0,mmword ptr [booky!__newctype+0x300 (013de890)]\n   19 0138ac86 89442408        mov     dword ptr [esp+8],eax\n   19 0138ac8a 0fb605a4e83d01  movzx   eax,byte ptr [booky!__newctype+0x314 (013de8a4)]\n   19 0138ac91 8844243a        mov     byte ptr [esp+3Ah],al\n</code></pre>\n <p>\n  mingw gcc 8.10 seems to break the strings into dwords even when explicitly disabling optimization with O0\n </p>\n <p>\n  <strong>\n   :>e:\\mingw\\mingw-w64.bat\n   \n\n   :>ls\n   \n\n   booky.cpp\n   \n\n   :>gcc -g -O0 booky.cpp\n  </strong>\n </p>\n <p>\n  g++ -g -O0 also disassembles to same construct as below\n </p>\n <pre><code>:\\>objdump -d --start-address 0x4015c0 --stop-address 0x401600 -M intel a.exe\n\na.exe:     file format pei-i386\n\n\nDisassembly of section .text:\n\n004015c0 <_main>:\n  4015c0:       55                      push   ebp\n  4015c1:       89 e5                   mov    ebp,esp\n  4015c3:       57                      push   edi\n  4015c4:       56                      push   esi\n  4015c5:       53                      push   ebx\n  4015c6:       83 e4 f0                and    esp,0xfffffff0\n  4015c9:       81 ec 70 02 00 00       sub    esp,0x270\n  4015cf:       e8 ec 01 00 00          call   4017c0 <___main>\n  4015d4:       8d 84 24 a4 01 00 00    lea    eax,[esp+0x1a4]\n  4015db:       c7 00 50 72 6f 67       mov    DWORD PTR [eax],0x676f7250\n  4015e1:       c7 40 04 72 61 6d 6d    mov    DWORD PTR [eax+0x4],0x6d6d6172\n  4015e8:       c7 40 08 69 6e 67 00    mov    DWORD PTR [eax+0x8],0x676e69\n  4015ef:       8d 84 24 a4 01 00 00    lea    eax,[esp+0x1a4]\n  4015f6:       83 c0 32                add    eax,0x32\n  4015f9:       c7 00 4e 75 68 61       mov    DWORD PTR [eax],0x6168754e\n  4015ff:       c7                      .byte 0xc7\n</code></pre>\n <p>\n  to disable this\n  <strong>\n   -fno-builtin-strcpy\n  </strong>\n  needs to be passed to gcc in commandline \nif -fno-builtin-strcpy is passed gcc wont chunk the strings even when compiled with\n  <strong>\n   -O3 optimization\n  </strong>\n </p>\n <p>\n  compilation\n </p>\n <pre><code>:\\>ls\nbooky.cpp\n\n:\\>g++ -O3 -g -fno-builtin-strcpy -o booky.exe booky.cpp\n\n:\\>ls\nbooky.cpp  booky.exe\n</code></pre>\n <p>\n  execution\n </p>\n <pre><code>:\\>booky.exe\nProgrammingTelecom Billing\n</code></pre>\n <p>\n  disassembly\n </p>\n <pre><code>:\\>objdump -d --start-address=0x402670 --stop-address=0x4026b0 -M intel booky.exe\n\nbooky.exe:     file format pei-i386\n\n\nDisassembly of section .text:\n\n00402670 <_main>:\n  402670:       55                      push   ebp\n  402671:       89 e5                   mov    ebp,esp\n  402673:       57                      push   edi\n  402674:       56                      push   esi\n  402675:       53                      push   ebx\n  402676:       83 e4 f0                and    esp,0xfffffff0\n  402679:       81 ec 80 02 00 00       sub    esp,0x280\n  40267f:       e8 ec ef ff ff          call   401670 <___main>\n  402684:       8d 74 24 1c             lea    esi,[esp+0x1c]\n  402688:       c7 44 24 04 44 40 40    mov    DWORD PTR [esp+0x4],0x404044\n  40268f:       00\n  402690:       8d bc 24 b4 01 00 00    lea    edi,[esp+0x1b4]\n  402697:       89 34 24                mov    DWORD PTR [esp],esi\n  40269a:       8d 9c 24 b4 01 00 00    lea    ebx,[esp+0x1b4]\n  4026a1:       e8 ee fe ff ff          call   402594 <_strcpy>\n  4026a6:       8d 44 24 4e             lea    eax,[esp+0x4e]\n  4026aa:       c7                      .byte 0xc7\n  4026ab:       44                      inc    esp\n  4026ac:       24 04                   and    al,0x4\n  4026ae:       50                      push   eax\n  4026af:       40                      inc    eax\n</code></pre>\n <p>\n  an analysed output from radare2\n </p>\n <pre><code>|           ; JMP XREF from 0x0040262f (sym.___getmainargs)\n|           0x00402671      89e5           mov ebp, esp\n|           0x00402673      57             push edi\n|           0x00402674      56             push esi\n|           0x00402675      53             push ebx\n|           0x00402676      83e4f0         and esp, 0xfffffff0\n|           0x00402679      81ec80020000   sub esp, 0x280\n|           0x0040267f      e8ecefffff     call sym.___main\n|           0x00402684      8d74241c       lea esi, [local_1ch]        ; 0x1c ; 28\n|           0x00402688      c74424044440.  mov dword [local_4h], str.Programming ; \n[0x404044:4]=0x676f7250 ; \"Programming\" ; const char * src\n|           0x00402690      8dbc24b40100.  lea edi, [local_1b4h]       ; 0x1b4 ; 436\n|           0x00402697      893424         mov dword [esp], esi        ; char * dest\n|           0x0040269a      8d9c24b40100.  lea ebx, [local_1b4h]       ; 0x1b4 ; 436\n|           0x004026a1      e8eefeffff     call sym._strcpy            ;\n char *strcpy(char *dest, const char *src)\n|           0x004026a6      8d44244e       lea eax, [local_4eh]        ; 0x4e ; 'N' ; 78\n|           0x004026aa      c74424045040.  mov dword [local_4h], str.Nuha_Ali ; \n[0x404050:4]=0x6168754e ; \"Nuha Ali\" ; const char * src\n|           0x004026b2      890424         mov dword [esp], eax        ; char * dest\n|           0x004026b5      e8dafeffff     call sym._strcpy            ;\n char *strcpy(char *dest, const char *src)\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 7, 2018 at 12:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}