{
    "title": "How to define \"code\" variable type in Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/29949/how-to-define-code-variable-type-in-ghidra",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Of all the confusing parts of Ghidra, I'd like to ask about the \"code\" keyword. A similar question was asked\n  <a href=\"https://reverseengineering.stackexchange.com/questions/25297/what-does-the-code-keyword-in-ghidra-mean\">\n   here\n  </a>\n  . However, I am not asking\n  <strong>\n   what\n  </strong>\n  the keyword is, but\n  <strong>\n   how to interpret/define\n  </strong>\n  this keyword.\n </p>\n <p>\n  In that post, it is said that this is a function pointer. And, from what I can tell in the example Ghidra gave below, that would make\n  <em>\n   some\n  </em>\n  sense (still trying to wrap my head around it). But how can I define \"code\" so that gcc will recognize it and have it work properly? Is there a general solution to this or must I decide case-by-case what to do? In another Ghidra project I'm figuring out, there are numerous examples of \"code\" appearing. I'm assuming I can't just replace it with any old data type? Unless...?\n </p>\n <pre><code>void FUN_00101020(void)\n{\n                    // WARNING: Treating indirect jump as call\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "decompilation",
        "c",
        "ghidra",
        "functions",
        "pointer"
    ],
    "user": "Luke Dunn",
    "time": "Jan 29, 2022 at 9:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  code is a generic term for an undefined function pointer. Ghidra's usage of assigning variables as\n  <code>\n   code *\n  </code>\n  is only produced through auto-analysis and not an exposed type for users.  A generic\n  <code>\n   void *\n  </code>\n  or function definition should be used instead.\n </p>\n <p>\n  a function can be prototyped as below in a generic way\n </p>\n <pre><code>typedef returntype callingconvention functionname( {type of argument} argument1},..... )   \n</code></pre>\n <p>\n  code represents this generic function pointer\n </p>\n <p>\n  <code>\n   typedef int __stdcall foo(int a,int b);\n  </code>\n  is a specific function pointer\n </p>\n <p>\n  so if you understand or found that a specific area belongs to\n  <code>\n   foo(....)\n  </code>\n  then you can define it as such by setting the type of function.\n </p>\n <p>\n  then instead of\n  <code>\n   (code *)\n  </code>\n  ghidra should be able to infer the type and\ndecompile the function as\n  <code>\n   (*(foo *)) blah\n  </code>\n  ;\n </p>\n <p>\n  at least that is what is the expected behavior  and this behavior again depends on several different heuristics.\n </p>\n <p>\n  in the snippet you posted there are several undefined..\n </p>\n <p>\n  ghidra doesn't know the function type nor its argument type and it cant find the pointer as well..\n </p>\n <pre><code>for example x=GetProcAddress(.....)\ncall x \n</code></pre>\n <p>\n  where x would be pointer to some dynamically obtained function from an arbitrarily loaded helper module\n </p>\n <p>\n  the arguments would be the prototype the author of the code provided when he coded  the snippet\n </p>\n <pre><code>(*(code *)(undefined *)0x0)();\n</code></pre>\n <p>\n  for example if the function was prototyped as\n </p>\n <pre><code>void __cdecl blah(char * first , w_char_t * second,.....)\n</code></pre>\n <p>\n  then you can arbitrarily reverse it as\n </p>\n <pre><code>void __unknown code (void * myfirst, void * mysecond,....)\n</code></pre>\n <p>\n  this is what is represented by code\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mumbel",
            "time": "Feb 7, 2022 at 17:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Luke Dunn",
                    "text": "<span class=\"comment-copy\">Are the typedef's strictly necessary in this example? Also, I don't think I've ever seen the \"calling convention\" or \"__stdcall\" before, I'm sorry to say</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">then you should try to see them.  actively look for them and get yourself acquinted with them</span>",
                    "time": null
                }
            ]
        }
    ]
}