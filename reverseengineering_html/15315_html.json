{
    "title": "Recursive Descent Disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/15315/recursive-descent-disassembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Suppose that\n  <code>\n   eax\n  </code>\n  contains a value only when the program is running.\n </p>\n <p>\n  How can a disassembler determine the address of expressions like:\n  <code>\n   call eax\n  </code>\n  using static analysis and Recursive Descent disassembly?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "611",
    "tags": [
        "ida",
        "disassembly",
        "assembly"
    ],
    "user": "Trey",
    "time": "May 7, 2017 at 22:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   How can a disassembler determine the address of expressions like:\n   <code>\n    call eax\n   </code>\n   using static analysis and Recursive Descent disassembly?\n  </p>\n </blockquote>\n <p>\n  They can't... The truth is that the recursive traversal algorithm just take into account the static calls (i.e. the calls that link to a static address in the binary).\n </p>\n <p>\n  An instruction such as\n  <code>\n   call eax\n  </code>\n  (a.k.a.\n  <em>\n   dynamic call\n  </em>\n  ) can be resolved only by a dynamic analysis or a symbolic execution framework.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "perror",
            "time": "May 8, 2017 at 13:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">This is not true in many cases for MSVC or MinGW, where the address of the api is moved into a register before it calls the api. Obviously this is not always the case, but if it is you don't need anything fancy to do the analysis...</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@mrexodia: Hum, I think we are not speaking about the same thing... MSVC and MinGW are compilers and I was speaking about disassemblers... Or, I might have missed something, then tell me what you mean. :-)</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">I meant that certain compilers emit predictable disassembly that allow you to predict what function will be called for the \"call eax\" instruction without doing much fancy things.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Ah, I got it now! Yes, this is true, but it would require a specific heuristic on the disassembler side to take this into account. My point was that the recursive traversal algorithm cannot handle dynamic calls (and, I should maybe have added, as you suggest, \"<i>except in the case of few heuristics that can be added in specific contexts</i>\"). But, all of these heuristics can be defeated or fooled if I change slightly the way I am building the binary. So, you cannot really trust it at the end.</span>",
                    "time": null
                }
            ]
        }
    ]
}