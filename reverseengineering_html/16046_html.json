{
    "title": "Strange bytes in interrupt table",
    "link": "https://reverseengineering.stackexchange.com/questions/16046/strange-bytes-in-interrupt-table",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently learning ARM assembly by trying to reverse a broken printer. I retrieved the firmware from the on board NAND flash and I am now trying to make some sense of it.\n </p>\n <p>\n  However, I get stuck at the very beginning: the interrupt table. From documentation I read on the web, the interrupt table is a table that contains instructions (most often LDR PC instructions) that load a direct memory address into the PC. The interrupt table is a sequence of these instructions all directly next to each other (this might not be the most technical correct explanation, but that is how I understand it, please correct me if I am wrong). In the underneath table these instructions would be:\n  <code>\n   e5 9f f0 18\n  </code>\n  which I believe is a\n  <code>\n   ldr pc, [pc, #24]\n  </code>\n  instruction.\n </p>\n <p>\n  In the firmware I retrieved, after every two vectors, there is a byte with value\n  <code>\n   89\n  </code>\n  . I do not know why it is there and what it does. I couldn't find it anything on the web that shows something similar (or I am looking for the wrong thing). What would be the function of this byte?\n </p>\n <p>\n  From how I understand it, the address 0x8e0 will be loaded into PC and the CPU will run from there, however, this means ignoring the four\n  <code>\n   89\n  </code>\n  bytes. If the bytes should be taking into account, than the CPU would jump to\n  <code>\n   9f f0 18 89\n  </code>\n  , but this is outside of the binary.\n </p>\n <p>\n  I believe the CPU is big endian and probably an Armv7, but it is an unknown Marvel chip, so I am not 100% sure.\n </p>\n <p>\n  This is the hexdump of the interrupt table:\n </p>\n <pre><code>00000000  e5 9f f0 18 e5 9f f0 18  89 e5 9f f0 18 e5 9f f0  |................|\n00000010  18 89 e5 9f f0 18 e5 9f  f0 18 89 e5 9f f0 18 e5  |................|\n00000020  9f f0 18 89 00 00 08 e0  00 00 00 04 ac 00 00 00  |................|\n00000030  08 00 00 00 0c db 00 00  00 10 00 00 00 14 db 00  |................|\n</code></pre>\n <p>\n  Why are the four\n  <code>\n   89\n  </code>\n  bytes there and is my assumption that the CPU will jump to\n  <code>\n   0x8e0\n  </code>\n  correct?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "163",
    "tags": [
        "firmware",
        "arm"
    ],
    "user": "Sherman123",
    "time": "Aug 9, 2017 at 15:53",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n How exactly did you read the NAND Can you describe the procedure ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sherman123",
            "text": "<html><body><span class=\"comment-copy\">\n I desoldered the NAND from the PCB and used FlashcatUSB to read the flash. I chose default settings (not sure if that makes sense) and the endian mode was set to 'Big endian'. No special settings set. Could you be more specific for the information that you are looking for? Maybe the settings you are interested, I can look them up if needed. Thank you!\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "domen",
            "text": "<html><body><span class=\"comment-copy\">\n Could it be some ECC, CRC or similar? Either by the chip itself (which chip is it? datasheets), HW reader or SW interfacing it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sherman123",
            "text": "<html><body><span class=\"comment-copy\">\n Unfortunately there is no datasheet available for this chip. It's a proprietary chip it seems. I checked CRC-8 but it computes to a different value for the first 4/8 bytes. I am reading up on ECC, but it seems too frequent for ECC.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems there is some bug in your dumping procedure. The first 8 bytes disassemble correctly as\n  <code>\n   LDR PC\n  </code>\n  instructions, but then it goes all wrong. If you delete the stray\n  <code>\n   89\n  </code>\n  bytes then they line up correctly again.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 10, 2017 at 9:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sherman123",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. I tend to agree with you, however, the pattern is not observed anywhere else in the binary (perhaps other bytes but not <code>89</code>) . I find it hard to conclude that it would be something with the dumping procedure from this result alone. What would possible debugging steps be to confirm it is a faulty dump? Thank you.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">if it has jtag, you could try dumping it that way and comparing.</span>",
                    "time": null
                }
            ]
        }
    ]
}