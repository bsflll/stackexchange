{
    "title": "LALR parsing : retrieve the grammar rules from the generated parsing tables",
    "link": "https://reverseengineering.stackexchange.com/questions/3160/lalr-parsing-retrieve-the-grammar-rules-from-the-generated-parsing-tables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a quite old C corporate parser / compiler code that was generated from an ancient Yacc and the original grammar source is lost (as the intermediate files) the only result the\n  <code>\n   ytab.c\n  </code>\n  parser generated file. That legacy piece of code need revamping but I cannot afford to recode it from scratch.\n </p>\n <p>\n  By \"ancient Yacc\", I mean that the parser is using tables named\n  <code>\n   yyact\n  </code>\n  ,\n  <code>\n   yypact\n  </code>\n  ,\n  <code>\n   yypgo\n  </code>\n  ,\n  <code>\n   yyr1\n  </code>\n  ,\n  <code>\n   yyr2\n  </code>\n  ,\n  <code>\n   yytoks\n  </code>\n  ,\n  <code>\n   yyexca\n  </code>\n  ,\n  <code>\n   yychk\n  </code>\n  ,\n  <code>\n   yydef\n  </code>\n  .\n </p>\n <p>\n  Could it be possible to mechanically retrieve / regenerate the parsing rules by deduction of the parsing tables in order to reconstruct the grammar?\n </p>\n <p>\n  Example with a little sample of an expression parser that I can process with the same ancient Yacc:\n </p>\n <pre><code>yytabelem yyexca[] ={\n-1, 1,\n    0, -1,\n    -2, 0,\n-1, 21,\n    261, 0,\n    -2, 8,\n    };\nyytabelem yyact[]={\n\n    13,     9,    10,    11,    12,    23,     8,    22,    13,     9,\n    10,    11,    12,     9,    10,    11,    12,     1,     2,    11,\n    12,     6,     7,     4,     3,     0,    16,     5,     0,    14,\n    15,     0,     0,     0,    17,    18,    19,    20,    21,     0,\n     0,    24 };\nyytabelem yypact[]={\n\n  -248, -1000,  -236,  -261,  -236,  -236, -1000, -1000,  -248,  -236,\n  -236,  -236,  -236,  -236,  -253, -1000,  -263,  -245,  -245, -1000,\n -1000,  -249, -1000,  -248, -1000 };\nyytabelem yypgo[]={\n\n     0,    17,    24 };\nyytabelem yyr1[]={\n\n     0,     1,     1,     1,     2,     2,     2,     2,     2,     2,\n     2,     2,     2 };\nyytabelem yyr2[]={\n\n     0,     8,    12,     0,     6,     6,     6,     6,     6,     6,\n     4,     2,     2 };\nyytabelem yychk[]={\n\n -1000,    -1,   266,    -2,   259,   263,   257,   258,   267,   262,\n   263,   264,   265,   261,    -2,    -2,    -1,    -2,    -2,    -2,\n    -2,    -2,   260,   268,    -1 };\nyytabelem yydef[]={\n\n     3,    -2,     0,     0,     0,     0,    11,    12,     3,     0,\n     0,     0,     0,     0,     0,    10,     1,     4,     5,     6,\n     7,    -2,     9,     3,     2 };\n\nyytoktype yytoks[] =\n{\n    \"NAME\", 257,\n    \"NUMBER\",   258,\n    \"LPAREN\",   259,\n    \"RPAREN\",   260,\n    \"EQUAL\",    261,\n    \"PLUS\", 262,\n    \"MINUS\",    263,\n    \"TIMES\",    264,\n    \"DIVIDE\",   265,\n    \"IF\",   266,\n    \"THEN\", 267,\n    \"ELSE\", 268,\n    \"LOW\",  269,\n    \"UMINUS\",   270,\n    \"-unknown-\",    -1  /* ends search */\n};\n</code></pre>\n <p>\n  I am looking to retrieve\n </p>\n <pre><code>stmt    : IF exp THEN stmt\n        | IF exp THEN stmt ELSE stmt\n        | /*others*/\n        ;\n\nexp     : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | exp EQUAL exp\n        | LPAREN exp RPAREN\n        | MINUS exp\n        | NAME\n        | NUMBER\n        ;\n</code></pre>\n <p>\n  The full parser for this example is available\n  <a href=\"https://gist.github.com/sebkirche/7896350\" rel=\"nofollow noreferrer\">\n   as a gist\n  </a>\n  , it is showing a\n  <code>\n   yyreds\n  </code>\n  table containing the rules as a debug info that is not in the parser that I am trying to reverse.\n </p>\n <p>\n  Note : I have asked this\n  <a href=\"https://stackoverflow.com/q/20496216/317266\">\n   formerly on SO\n  </a>\n  , and was suggested to ask it in RE. Any help?\n </p>\n <p>\n  PS: i am not familiar with the RE question tags, feel free to correct this.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "820",
    "tags": [
        "decompile"
    ],
    "user": "Seki",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Please see the edit :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't have an actual answer. I've heard some rumors of a tool doing that but haven't seen anything concrete. I have, however, found a page which should be pretty helpful:\n </p>\n <blockquote>\n  <h3>\n   Understanding C parsers generated by GNU Bison\n  </h3>\n  <p>\n   This document is an attempt to describe the implementation of an\n  LALR(1) parser in C as generated by Bison 2.3. I used a simple grammar\n  to demonstrate the working of the parser and the nature of parsing\n  tables. You will also find a comparison of these tables to the\n  uncompressed tabular scheme given in the popular book \"Compilers -\n  Principles, Techniques and Tools\" by Aho, Sethi and Ullman, also\n  called as the \"Dragon Book\" and many other books on compiler design.\n  </p>\n </blockquote>\n <p>\n  See it\n  <a href=\"http://www.cs.uic.edu/~spopuri/cparser.html\" rel=\"nofollow\">\n   here\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   EDIT\n  </strong>\n  : found a script that claims to do it!\n </p>\n <p>\n  <a href=\"http://nah6.com/~itsme/cvs-xdadevtools/perlutils/yydecode.pl\" rel=\"nofollow\">\n   http://nah6.com/~itsme/cvs-xdadevtools/perlutils/yydecode.pl\n  </a>\n </p>\n <p>\n  However it seems it's intended to be used with another set of tables. Still, it might be useful for a start.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Dec 26, 2013 at 22:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}