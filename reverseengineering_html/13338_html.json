{
    "title": "Understanding FCOMP instruction and extracted value from address operand",
    "link": "https://reverseengineering.stackexchange.com/questions/13338/understanding-fcomp-instruction-and-extracted-value-from-address-operand",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer an application made in vb6. At a certain point it compares an input number to a constant number, my goal here is to extract that number, now i found where the comparison is taken place:\n </p>\n <pre><code>FCOMP QWORD PTR DS:[402CB0]\n</code></pre>\n <p>\n  Now I understand that FCOMP\n  <code>\n   Compares the contents of register ST(0) and source value\n  </code>\n  . I don't know if I got this right, but from what I've read\n  <code>\n   DS:[402CB0]\n  </code>\n  is pointer to an address that's holding the\n  <code>\n   source\n  </code>\n  value, but using OllyDbg, and while navigating to that address (Ctrl + g), i found out that the value is\n  <code>\n   DB 00\n  </code>\n  which is not correct\n  <a href=\"https://i.sstatic.net/asFVN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/asFVN.png\"/>\n  </a>\n </p>\n <p>\n  so my question here is how can I find the real value that is being compared?\nand is it possible to make the\n  <code>\n   FCOMP\n  </code>\n  compare a constant to a pointer of an integer?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "447",
    "tags": [
        "disassembly",
        "assembly",
        "ollydbg",
        "float"
    ],
    "user": "Ouerghi Yassine",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Viktor",
            "text": "<html><body><span class=\"comment-copy\">\n Use the memory view window. Read up on memory and hardware break points.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   FCOMP\n  </code>\n  Compares the\n  <code>\n   fpu register ST0\n  </code>\n  with a\n  <code>\n   constant\n  </code>\n  \n\n  the\n  <code>\n   constant\n  </code>\n  is a QWORD (Meaning DOUBLE , FLOAT , Etc 8+ bytes wide )\n </p>\n <p>\n  ollydbg  can show both the\n  <code>\n   ST0 register\n  </code>\n  and\n  <code>\n   decipher the contents of the CONSTANT\n  </code>\n  .\n </p>\n <p>\n  in your case if shows\n  <code>\n   DB 00\n  </code>\n  because the constant is\n  <code>\n   probably 0.0\n  </code>\n  .\n </p>\n <p>\n  and you\n  <code>\n   have not set the dump view mode\n  </code>\n  to appropriate format\n </p>\n <p>\n  the view mode you are looking at is\n  <code>\n   Disassembly (DB is Define Byte 00 is well 0x00 )\n  </code>\n  .\n </p>\n <p>\n  you may need to change the view mode\n </p>\n <p>\n  first\n  <code>\n   select the dump window\n  </code>\n  then use\n  <code>\n   ctrl+g\n  </code>\n  and then right click\n  <code>\n   select FLOAT\n  </code>\n  .\n </p>\n <p>\n  ollydbg also has a small window between disassembly pane and dump pane \nwhich can show both the source and destination contents\n </p>\n <p>\n  in the screen shot below \nyou can observe how\n  <code>\n   783ef8 is DB 00 in Disassembly window and FLOAT 0.0 in Dump Pane\n  </code>\n  . \nyou can observe how the\n  <code>\n   contents of register pane shows both the src and dest\n  </code>\n  contents\nyou can observe how\n  <code>\n   fpu register window\n  </code>\n  shows the\n  <code>\n   ST0\n  </code>\n  contents\n  <a href=\"https://i.sstatic.net/VP4AX.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/VP4AX.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 22, 2016 at 8:17",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Understanding the assembly line\n  </strong>\n </p>\n <p>\n  <code>\n   FCOMP QWORD PTR DS:[402CB0]\n  </code>\n </p>\n <p>\n  It checks for a qword sized operand. That is 8 bytes while your picture only shows about 3.\n </p>\n <p>\n  This comparison is also a floating point comparison, which is a bit more complex than an integer comparison.\n </p>\n <p>\n  It sets three control registers (\n  <code>\n   C0\n  </code>\n  ,\n  <code>\n   C2\n  </code>\n  ,\n  <code>\n   C3\n  </code>\n  ) depending on the outcome and raises an exception if either values is\n  <code>\n   NaN\n  </code>\n  (could this be some kind of Anti debugging related exception?)\n </p>\n <p>\n  <strong>\n   Getting to the actual content at the time of comparison\n  </strong>\n </p>\n <p>\n  Although you can access the address now, it is not guaranteed the value you're looking at is the value that will end up being compared to your float.\n </p>\n <p>\n  You should make sure the debugger reaches that address when you inspect it. This can usually be done quite easily by setting a breakpoint (either software - OllyDbgv1's default or hardware - OllyDbgv2's default). Either right click on that assembly line -> Breakpoint -> Toggle or simply hit\n  <kbd>\n   F2\n  </kbd>\n  while it's highlighted.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Aug 22, 2016 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}