{
    "title": "IDA 7.0 - combine sequence of assembly instructions to a macro",
    "link": "https://reverseengineering.stackexchange.com/questions/19831/ida-7-0-combine-sequence-of-assembly-instructions-to-a-macro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm solving this CTF with IDA Pro 7.0.\n </p>\n <p>\n  At some point there is an offset calculation by index, it simply multiply an index by 48 and write/read some data to it.\n </p>\n <p>\n  The main problems are:\n </p>\n <ul>\n  <li>\n   <p>\n    the calculation is done using 8 assembly instructions, and it happens quite often, so it spams my screen.\n   </p>\n  </li>\n  <li>\n   <p>\n    it might not be calculated\n    <strong>\n     exactly\n    </strong>\n    the same every time, and I might miss it when auditing for bugs, but if the macro will only take place for specific instructions, I won't miss it.\n   </p>\n  </li>\n </ul>\n <p>\n  So my question is: is there a way in IDA to combine these sequence of instructions to a single macro?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/26Oov.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"repeated code in red\" src=\"https://i.sstatic.net/26Oov.png\"/>\n  </a>\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "751",
    "tags": [
        "ida",
        "idapython",
        "x86-64",
        "ida-plugin"
    ],
    "user": "reida",
    "time": "Nov 7, 2018 at 20:58",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n IDA can hide code (View menu) and this can be done via IDC and consequently also via IDAPython. So what you could do is to list all instructions referencing your\n <code>\n  secret_list\n </code>\n , check that it's a\n <code>\n  lea\n </code>\n and that the subsequent instructions match your expectation and simply hide the address range and provide a meaningful alternative string on that hidden area (I typically use the\n <code>\n  ;\n </code>\n comment style for these things as it's most explicit). In the past I have, for example, postprocessed some binaries which had lots of assertions with debug output to compress these to one line.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n No, there is no way. I wish. I had asked myself for the same (but for the decompiler) various times.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "reida",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L - Thanks, after some research, the function add_hidden_range(0x10AF, 0x10C9, \"calc_offset\" ,0 , -1) did the trick. now it's just a matter of coding an IDAPython script to automatically search for all sequence of bytes of a specific macro, and replace them all ;)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Okay, to formalize this (and since I have some time now to type up an actual answer).\n </p>\n <p>\n  The\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/654.shtml\" rel=\"nofollow noreferrer\">\n   <code>\n    add_hidden_range()\n   </code>\n  </a>\n  IDC function and the SDK function of the same name (\n  <code>\n   bytes.hpp\n  </code>\n  ) can be used for the purpose. (However, I am almost sure there was another function I used at the time.)\n </p>\n <p>\n  <code>\n   update_hidden_range()\n  </code>\n  may also be of interest (see link above).\n </p>\n <p>\n  When I used this some years ago to write an IDC script (IDAPython didn't ship with IDA at the time), I used this to hide the code for some repetitive debug print and assertion functionality in some (checked) Windows binaries I was looking at. For this I used gray color and replaced the whole hidden range with an assembly-style comment (\n  <code>\n   ;\n  </code>\n  prefix). The comment would then contain pseudocode of the debug print or assertion it was hiding. This helped a lot in making the disassembly a lot cleaner for reading.\n </p>\n <p>\n  The biggest challenge other than finding the functionality and the IDC function exposing it initially, was to look for the opcodes surrounding the xref locations of the\n  <em>\n   known\n  </em>\n  functions calls and make sure I wasn't hiding some interspersed opcodes. So essentially I made sure that the script would verbosely output whenever it hit an instance where unexpected opcodes where interspersed with the expected opcodes, showing the EA, and could then double click on that in the log pane to review those (in my case rare) instances manually.\n </p>\n <p>\n  Other instances where this technique proved useful were well-known inlined functions (think\n  <code>\n   memmove\n  </code>\n  ,\n  <code>\n   memcpy\n  </code>\n  and friends). The patterns repeat and by hiding the opcodes and replacing them with meaningful pseudocode you can speed up reading your disassembly considerably (even without a decompiler plugin).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Nov 7, 2018 at 21:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Can you add/provide any pre-written script as example?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Biswapriyo tough, the one I mentioned in my answer I don't have the rights to (did that for work) and besides I'd need the binary (anything else is like programming in thin air). I'll try to think of something that resembles what is needed.</span>",
                    "time": null
                }
            ]
        }
    ]
}