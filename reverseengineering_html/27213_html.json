{
    "title": "How to apply complete type information from PDB for multiple images in one IDA database?",
    "link": "https://reverseengineering.stackexchange.com/questions/27213/how-to-apply-complete-type-information-from-pdb-for-multiple-images-in-one-ida-d",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA is capable of loading multiple images/DLLs into the same database. In this scenario,\n  <code>\n   ntdll.dll\n  </code>\n  and\n  <code>\n   kernel.dll\n  </code>\n  have been loaded additionally to the main target\n  <code>\n   .exe\n  </code>\n  -file into the database. On top of that the PDB files\n  <code>\n   ntdll.pdb\n  </code>\n  and\n  <code>\n   kernel.pdb\n  </code>\n  have been loaded using\n  <code>\n   File -> Load file -> PDB file...\n  </code>\n  with specifying the address of the respective image base.\n </p>\n <p>\n  It's working quite well, e. g. all the functions and symbols are visibly and usable. Nevertheless, some type information are missing. Most importantly: correct function declarations and argument types.\n </p>\n <p>\n  Here's what the decompiler gets me when using the approach described above for an example function\n  <code>\n   RtlUnwindEx\n  </code>\n  :\n </p>\n <pre><code>__int64 __fastcall ntdll_RtlUnwindEx(int a1, int a2, int a3, int a4, __int64 a5, __int64 a6);\n</code></pre>\n <p>\n  However, this is how it looks like when analyzing\n  <code>\n   ntdll.dll\n  </code>\n  in its own database and applying the PDB accordingly:\n </p>\n <pre><code>void __stdcall RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable);\n</code></pre>\n <p>\n  <strong>\n   Why is IDA not correctly determining the function declaration/argument types in the multi-image database even though the information should be there?\n  </strong>\n </p>\n <p>\n  Additional information:\n </p>\n <ul>\n  <li>\n   Settings under\n   <code>\n    Options -> Compiler options\n   </code>\n   in the multi-image database have been adjusted to match what the settings are for the single\n   <code>\n    ntdll.dll\n   </code>\n   database\n  </li>\n  <li>\n   Working with 64-bit images here\n  </li>\n  <li>\n   The\n   <code>\n    Reanalyze program\n   </code>\n   action has been executed after loading all PDB files\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "304",
    "tags": [
        "ida",
        "windows",
        "pdb"
    ],
    "user": "new_turtle",
    "time": "Mar 10, 2021 at 18:46",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n both look suspect  if it is 64bit __stdcall is not applicable are you sure you are not mixing up a 32 bit ntdll  with a 64 bit ntdll or something like that\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "new_turtle",
            "text": "<html><body><span class=\"comment-copy\">\n Yeah, also saw that and was wondering as well but no, I'm loading the same file, both times as AMD64 PE file.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}