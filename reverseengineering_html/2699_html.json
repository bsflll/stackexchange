{
    "title": "Unusual x86 switch statement?",
    "link": "https://reverseengineering.stackexchange.com/questions/2699/unusual-x86-switch-statement",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have come across the following x86 (Built with some version of Visual Studio AFAIK) switch statement:\n </p>\n <pre><code>0x1009E476  cmp edx, 0x3B\n0x1009E479  jnz switch_statement\n\nswitch_statement:\n0x1009E591  movzx ecx, byte [indirect_table+edx]\n0x1009E598  jmp dword [table1+ecx*4]\n\nindirect_table:\n0x1009E7AB  db 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07\n            db 0x07, 0x07, 0x06, 0x8B, 0xFF\n\ntable1:\n0x1009E7B8  dd ptr code1\n            dd ptr code2\n            dd ptr code3\n            dd ptr code4\n            dd ptr code5\n            dd ptr code6\n            dd 0x00000000 \n0x1009E7D4  dd 0x01060600, 0x06020606, 0x06060306, 0x06060606 ; Note: nothing directly references this data.\n            dd 0x06040606, 0x06060606, 0x06060606, 0x06060606\n            dd 0x06060606, 0x06060606, 0x06060606, 0x06060606\n            dd 0x06060606, 0x06060606, 0x06060606, 0x06060606\n            dd 0x06060606\n</code></pre>\n <p>\n  No index in the\n  <code>\n   indirect_table\n  </code>\n  will end up referencing any of the 6 pointers in\n  <code>\n   table1\n  </code>\n  . Index 6 will dereference a null pointer, index 7 will dereference\n  <code>\n   0x01060600\n  </code>\n  and indexes\n  <code>\n   0x8B\n  </code>\n  and\n  <code>\n   0xFF\n  </code>\n  will end up dereferencing garbage. So everything will end up access violating.\n </p>\n <p>\n  So perhaps this is a compiler optimization, the data at table1 following the 6 code pointers and 1 null pointer looks like an indirect table, and coincidentally all indexes are suitable for this switch statement (0-6). While the binary has no references to this data, if\n  <code>\n   EBX\n  </code>\n  was known to be\n  <code>\n   0x29\n  </code>\n  or upwards, it would reference into this. The compiler may have decided\n  <code>\n   EBX\n  </code>\n  will not be\n  <code>\n   0\n  </code>\n  -\n  <code>\n   0x29\n  </code>\n  so moved the indirect table location backwards to line things up correctly. What then is the role of\n  <code>\n   cmp edx, 0x3B\n  </code>\n  in this?\n </p>\n <p>\n  <strong>\n   Is this a compiler code gen issue, a compiler optimization, or have I grossly misunderstood the code?\n  </strong>\n </p>\n <p>\n  If an optimization, any supporting reading material would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "821",
    "tags": [
        "x86"
    ],
    "user": "QAZ",
    "time": "Aug 27, 2013 at 15:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Either there is a check somewhere before, or the compiler knows otherwise that\n  <code>\n   edx\n  </code>\n  is not less than 41 (0x29). 0x3B is probably handled by a single switch label, so the compiler added this check to avoid the double memory lookup (or maybe there's an actual\n  <code>\n   if\n  </code>\n  before\n  <code>\n   switch\n  </code>\n  in the source).\n </p>\n <p>\n  The table at 0x1009E7D4 is used to retrieve the jump table entry index - Visual C++ compiler always puts the indirect table after the jumps. 0x1009E7AB is likely a part of the previous switch's indirect table. And\n  <code>\n   8B FF\n  </code>\n  is\n  <code>\n   mov edi, edi\n  </code>\n  , used here for alignment.\n </p>\n <p>\n  This specific optimization (no subtraction for zero-indexing) seems to be pretty rare; I think I've only seen it in Windows DLLs which often use PGO and other tricks to achieve the last few percents of performance.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Igor Skochinsky",
            "time": "Aug 27, 2013 at 14:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "QAZ",
                    "text": "<span class=\"comment-copy\">nicely spotted with the 'mov edi, edi' alignment! thanks for the good answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}