{
    "title": "Detecting hardware breakpoints",
    "link": "https://reverseengineering.stackexchange.com/questions/16544/detecting-hardware-breakpoints",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since\n  <em>\n   software breakpoints\n  </em>\n  , unlike\n  <em>\n   hardware breakpoints\n  </em>\n  , do change the code, it's relatively easy to write a program that performs a checksum on itself as an anti-debugger technique. Is it possible to do something similar with hardware breakpoints?\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "7k",
    "tags": [
        "anti-debugging",
        "breakpoint"
    ],
    "user": "Trey",
    "time": "Oct 14, 2017 at 2:31",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n yes you can get the context and check /modify/  nullify the debug registers dr7 dr6 etc\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a really good question since this topic isn't as popular as anti-debugging techniques to detect software breakpoints. Since you didn't mention the architecture we have to keep in mind that Hardware Breakpoints, as its name hints, are depends on the hardware you're running on and thus the implementation of such breakpoints is differ between each architecture. Since we can't cover in this answer all the architectures, I'll write here in an assumption that we're talking about\n  <a href=\"https://en.wikipedia.org/wiki/X86\" rel=\"noreferrer\">\n   Intel's x86 architecture\n  </a>\n  on Windows.\n </p>\n <p>\n  In short, the answer is\n  <strong>\n   yes\n  </strong>\n  . There are basically two common ways to detect hardware breakpoints:\n </p>\n <ol>\n  <li>\n   Using thread's context to access Debug Registers\n  </li>\n  <li>\n   Crafting a\n   <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680657(v=vs.85).aspx\" rel=\"noreferrer\">\n    SEH\n   </a>\n   (Structured Exception Handling), then to cause an exception and access the debug registers\n  </li>\n </ol>\n <p>\n  In order to understand each method we should understand first what Hardware Breakpoint is and (in short) how it works.\n </p>\n <h2>\n  Hardware Breakpoint\n </h2>\n <p>\n  In\n  <em>\n   x86\n  </em>\n  architecture the debugger uses a set of Debug Registers in order to apply hardware breakpoints. There are 8 debug registers exists to control the debugging procedure, ranging from\n  <em>\n   DR0\n  </em>\n  to\n  <em>\n   DR7\n  </em>\n  . These registers are not accessible from\n  <em>\n   ring3\n  </em>\n  <a href=\"https://en.wikipedia.org/wiki/Protection_ring\" rel=\"noreferrer\">\n   privileges\n  </a>\n  but only accessible from CPL0 (\n  <em>\n   Current Privilege Levels\n  </em>\n  , ring0). Thus, an attempt to read or write the debug registers when executing at any other privilege level causes a general protection fault. The debug registers allow the debugger to interrupt program execution and transfer the control to it when accessing memory to read or write.\n </p>\n <p>\n  <strong>\n   x86 Debug Registers\n  </strong>\n </p>\n <ul>\n  <li>\n   DR0 - Linear breakpoint address 0\n  </li>\n  <li>\n   DR1 - Linear breakpoint address 1\n  </li>\n  <li>\n   DR2 - Linear breakpoint address 2\n  </li>\n  <li>\n   <p>\n    DR3 - Linear breakpoint address 3\n   </p>\n  </li>\n  <li>\n   <p>\n    DR4 - Reserved. Not defined by Intel\n   </p>\n  </li>\n  <li>\n   <p>\n    DR5 - Reserved. Not defined by Intel\n   </p>\n  </li>\n  <li>\n   <p>\n    DR6 - Breakpoint Status\n   </p>\n  </li>\n  <li>\n   DR7 - Breakpoint control\n  </li>\n </ul>\n <p>\n  DR0-DR3 store a linear address of a breakpoint. The stored address can be the same as the physical address or it needs to be translated to the physical address.\n  <em>\n   DR6\n  </em>\n  indicates which breakpoint is activated.\n  <em>\n   DR7\n  </em>\n  defines the breakpoint activation mode by the access modes:\n  <em>\n   read\n  </em>\n  ,\n  <em>\n   write\n  </em>\n  , or\n  <em>\n   execute\n  </em>\n  .\n </p>\n <h2>\n  Detecting Hardware Breakpoints\n </h2>\n <p>\n  <strong>\n   Method one - ThreadContext Win API\n  </strong>\n </p>\n <p>\n  The following example is based on an example from\n  <a href=\"https://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide\" rel=\"noreferrer\">\n   this\n  </a>\n  article from CodeProject. The example is commented to describe each piece of code:\n </p>\n <pre><code>bool IsHWBreakpointExists()\n{\n    // This structure is key to the function and is the \n    CONTEXT ctx;\n    ZeroMemory(&ctx, sizeof(CONTEXT));\n\n    // The CONTEXT structure is an in/out parameter therefore we have\n    // to set the flags so Get/SetThreadContext knows what to set or get.   \n    ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS;\n\n    // Get a handle to our thread\n    HANDLE hThread = GetCurrentThread();\n    // Get the registers\n    if(GetThreadContext(hThread, &ctx) == 0)\n        return false;   \n\n    if ((ctx.Dr0) || (ctx.Dr1) || (ctx.Dr2) || (ctx.Dr3)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n} \n</code></pre>\n <p>\n  <strong>\n   Method 2 - SEH\n  </strong>\n  \n\n  The SEH method of manipulating the debug registers is much more common and is easier to implement it in Assembly, as shown in the following example, again from CodeProject:\n </p>\n <pre><code>ClrHwBpHandler proto\n .safeseh ClrHwBpHandler\n\nClearHardwareBreakpoints proc\n     assume fs:nothing\n     push offset ClrHwBpHandler\n    push fs:[0]\n    mov dword ptr fs:[0], esp ; Setup SEH\n     xor eax, eax\n     div eax ; Cause an exception\n     pop dword ptr fs:[0] ; Execution continues here\n     add esp, 4\n     ret\nClearHardwareBreakpoints endp\n\nClrHwBpHandler proc \n     xor eax, eax\n    mov ecx, [esp + 0ch] ; This is a CONTEXT structure on the stack\n     mov dword ptr [ecx + 04h], eax ; Dr0\n     mov dword ptr [ecx + 08h], eax ; Dr1\n     mov dword ptr [ecx + 0ch], eax ; Dr2\n     mov dword ptr [ecx + 10h], eax ; Dr3\n     mov dword ptr [ecx + 14h], eax ; Dr6\n     mov dword ptr [ecx + 18h], eax ; Dr7\n     add dword ptr [ecx + 0b8h], 2 ; We add 2 to EIP to skip the div eax\n     ret\nClrHwBpHandler endp\n</code></pre>\n <h2>\n  References:\n </h2>\n <ul>\n  <li>\n   <a href=\"https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-system-programming-manual-325384.html\" rel=\"noreferrer\">\n    IntelÂ® 64 and IA-32 Architectures Software Developer Manual: Vol 3\n   </a>\n  </li>\n  <li>\n   <a href=\"https://rads.stackoverflow.com/amzn/click/0387098240\" rel=\"noreferrer\">\n    Identifying Malicious Code Through Reverse Engineering\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide\" rel=\"noreferrer\">\n    An Anti-Reverse Engineering Guide\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software\" rel=\"noreferrer\">\n    Anti Debugging Protection Techniques\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Megabeets",
            "time": "Oct 14, 2017 at 18:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}