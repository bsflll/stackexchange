{
    "title": "Idenifying far call target in protected mode (x86 assembly)",
    "link": "https://reverseengineering.stackexchange.com/questions/15978/idenifying-far-call-target-in-protected-mode-x86-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently analysing a regular Windows x86 executable (-> protected mode) and I came across several far call instructions in the disassembly. I know that far calls, for example, are used in WOW64 to switch from 32bit to 64bit mode (by a far call to code segment 0x33, see\n  <a href=\"http://waleedassar.blogspot.de/2012/07/wow64-user-mode-system-calls-hooking.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  ). However, I can not make any sense of the far calls in that executable. They look like this:\n </p>\n <pre><code><somewhere near 0x00123400>:  9a 34 12 cd ab 34 12    call   0x1234:0xabcd1234\n</code></pre>\n <p>\n  The code segemt is in most cases the same as the lower 16 bits of the call address. At the same time, the code segment is rougly the same as the middle (!) 16 bits of the instruction's own address (as illustrated above). The call addresses always point to unmapped/invalid memory areas in the code segment of the process itself.\n </p>\n <p>\n  How can I identify the call target of these far calls? Is it even possible/pratical to have hard coded code segments? Or could it be an alignment issue of the disassembler?\n </p>\n <p>\n  <strong>\n   Edit:\n  </strong>\n  For example, the first far call in the image occurs in a chunk of code starting at a 16-byte boundary (identified by leading int3 instructions). The far call comes 2 bytes after the (only) return instruction in that chunk (some 2000 bytes after its start). The offset of the far call instruction is used as an indirect jump offfset like this:\n </p>\n <pre><code>jmp    DWORD PTR [eax*4+<far call offset>]\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "717",
    "tags": [
        "disassembly",
        "x86",
        "call"
    ],
    "user": "InkassoHeinzi",
    "time": "Aug 2, 2017 at 8:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n can you paste some real code instead of made-up one? and also some overview of the memory map and addresses involved.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "InkassoHeinzi",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky tbh, I am a bit reluctant to post the actual code, but I added some details.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n I just want to see real selector values used, not 0x1234. Also, \"same as the lower 16 bits of the call address\" is a bit difficult to visualize without an example.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "InkassoHeinzi",
            "text": "<html><body><span class=\"comment-copy\">\n These are the first selectors: 0x4b 0x4f 0x50 0x5d 0x61 0x65 0xa6 0xa8 0xaa 0xae 0xb0 0xbb 0xbc 0xd0 0x106 0x116, there are 47 different in total. They appear to be quite random. The highest is 0xe69e\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  it seems the \"code\" you're trying to disassemble is not actually code but just the table of offsets for the indirect jump (likely a switch implementation). Try interpreting it as a list of 4-byte flat addresses. E.g. :\n </p>\n <pre><code>.text:667013BC 03C                 cmp     ebx, 7 ; SWITCH ; switch 8 cases\n.text:667013BF 03C                 ja      loc_667015AB ; SWITCH ; jumptable 667013C5 default case\n.text:667013C5 03C                 jmp     ds:off_667060CC[ebx*4] ; switch jump\n [...]\n.rdata:667060CC     off_667060CC    dd offset loc_667015DE ; jump table for switch statement\n.rdata:667060CC                     dd offset loc_667015D6  \n.rdata:667060CC                     dd offset loc_667015EE\n.rdata:667060CC                     dd offset loc_667015E6\n.rdata:667060CC                     dd offset loc_667015F6\n.rdata:667060CC                     dd offset loc_667015A5\n.rdata:667060CC                     dd offset loc_66701663\n.rdata:667060CC                     dd offset loc_66701658\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 2, 2017 at 9:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "InkassoHeinzi",
                    "text": "<span class=\"comment-copy\">Thank you, that really makes most sense. Do you have an example how a \"legitimate\" far call would look like (or even what the use case would be) in a regular windows application, apart from kernel-related functions like the 64/32 switch?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I don't think I've ever seen far calls in standard win32 apps. Malware may use them and sometimes UEFI modules (which use PE format).</span>",
                    "time": null
                }
            ]
        }
    ]
}