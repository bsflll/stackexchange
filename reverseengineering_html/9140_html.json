{
    "title": "How can I extend a memory of an analysed executable in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/9140/how-can-i-extend-a-memory-of-an-analysed-executable-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm analysing some malware executable with ImmDBG and IDA Pro.\n </p>\n <p>\n  The executable calls the\n  <em>\n   kernel32.VirtualAlloc()\n  </em>\n  at runtime with an argument\n  <em>\n   lpAddress=NULL\n  </em>\n  what means that an operating system decides itself where the memory has to be allocated. The\n  <em>\n   VirtualAlloc()\n  </em>\n  returns an address 0x003F0000. After that the executable writes some function to this memory, which is quite big, and I would like to analyse this function in IDA Pro.\n </p>\n <p>\n  The problem is, that my executable is loaded to the 0x004010000 in IDA Pro\nand I don't know how could I extend the memory of the executable in IDA Pro in order to create this function manually(with help of PatchBytes).\n </p>\n <p>\n  Also maybe it's possible somehow to build a function from a sequence of opcodes in IDA Pro?\n </p>\n <p>\n  Thank you in advance!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly",
        "malware",
        "anti-debugging",
        "immunity-debugger"
    ],
    "user": "0xDEADC0DE",
    "time": "Jun 15, 2015 at 13:09",
    "comments": [
        {
            "user": "tmr232",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try running it using the IDA debugger? It allows you to take snapshots of the memory and keep them inside the IDB.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The most reliable solution I've found is to add a new section to the PE file and force the process to write the unpacked code into that new section in memory.\n </p>\n <p>\n  I wrote up a blog post a few years ago with a full walk-through of this approach:\n  <a href=\"http://blog.crowdstrike.com/unpacking-dynamically-allocated-code/\" rel=\"nofollow noreferrer\">\n   http://blog.crowdstrike.com/unpacking-dynamically-allocated-code/\n  </a>\n </p>\n <p>\n  <img alt=\"Screenshot\" src=\"https://i.sstatic.net/dXjbZ.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Jun 15, 2015 at 13:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I solved this issue by creating a new section in IDA Pro (\n  <strong>\n   File -> Segments -> Create segment\n  </strong>\n  ). After that I dumped new section in OllyDBG (binary copy) and transferred it to the new created section in IDA Pro (with a Python script). After that I could analyse the code and write comments in IDA to make better analysis and documentation.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "0xDEADC0DE",
            "time": "Sep 14, 2015 at 11:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}