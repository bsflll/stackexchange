{
    "title": "Reverse engineering parameter value on subroutine call",
    "link": "https://reverseengineering.stackexchange.com/questions/11657/reverse-engineering-parameter-value-on-subroutine-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to find out what value a certain parameter has when it's called (I know \"parameters\" are gone after compiled, but you get the idea). The pseudo-C and assembly code are:\n </p>\n <pre><code>sub_171F4A0(ctx, aes_mode, KEY, &IV); // EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv)\n\n.text:000000000040CEE6 ; 252:   sub_171F4A0(v110, v125, ptr, &v130);\n.text:000000000040CEE6\n.text:000000000040CEE6 loc_40CEE6:                             ; CODE XREF: sub_40CAD0+363j\n.text:000000000040CEE6                 mov     rdi, [rsp+400h+var_400]\n.text:000000000040CEEA                 lea     rcx, [rsp+400h+var_1C0]\n.text:000000000040CEF2                 mov     rsi, [rcx-28h]\n.text:000000000040CEF6                 mov     rdx, [rsp+400h+ptr]\n.text:000000000040CEFE                 call    sub_171F4A0\n</code></pre>\n <p>\n  I have already figured out\n  <code>\n   IV\n  </code>\n  value, but now I need\n  <code>\n   KEY\n  </code>\n  , which is 16 bytes.\n </p>\n <p>\n  Then I ran\n  <code>\n   gdb ./executable\n  </code>\n  (Linux 64-bit ELF binary) and set a breakpoint at 0x40CEF6 and examined all the registers mentioned above (I have no idea which one holds the third parameter).\n </p>\n <pre><code>(gdb) break *0x40CEF6\nBreakpoint 1 at 0x40cef6\n(gdb) run\nStarting program: /path/to/executable\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nBreakpoint 1, 0x000000000040cef6 in ?? ()\n(gdb) x/4x $rdi\n0x29d72f0:  0x00000000  0x00000000  0x00000000  0x00000000\n(gdb) x/4x $rcx\n0x7fffffffe340: 0x00000000  0x00000000  0x00000000  0x00000000\n(gdb) x/4x $rsi\n0x1c11620:  0x000001a3  0x00000010  0x00000010  0x00000010\n(gdb) x/4x $rdx\n0x2a09690:  0x724a5bac  0xa90b86f0  0xff9d8546  0x9910582b\n</code></pre>\n <p>\n  None of those values is the actual key, but $rdx seems to be the best candidate to hold the key value.\n </p>\n <p>\n  However, since it's a pointer, I thought I should examine 0x724a5baca90b86f0, just in case, which didn't work:\n </p>\n <pre><code>(gdb) x/4x 0x724a5baca90b86f0\n0x724a5baca90b86f0: Cannot access memory at address 0x724a5baca90b86f0\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "137",
    "tags": [
        "gdb",
        "encryption"
    ],
    "user": "Nacib Neme",
    "time": "Dec 30, 2015 at 18:19",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n >\"I have no idea which one holds the third parameter\"For the future:\n <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI\" rel=\"nofollow noreferrer\">\n  en.wikipedia.org/wiki/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Set your breakpoint on address\n  <code>\n   0x0040CEFE\n  </code>\n  and examine the memory pointed to by\n  <code>\n   rdx\n  </code>\n  at that point.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Dec 30, 2015 at 18:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nacib Neme",
                    "text": "<span class=\"comment-copy\">(gdb) x/4x $rdx 0x2a09690:\t0x724a5bac\t0xa90b86f0\t0xff9d8546\t0x9910582b (exactly as stated in the question)</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">So the value of <code>rdx</code> didn't change between addresses <code>0x0040CEF6</code> and <code>0x0040CEFE</code>?</span>",
                    "time": null
                },
                {
                    "user": "Nacib Neme",
                    "text": "<span class=\"comment-copy\">No, it doesn't: <a href=\"http://pastebin.com/k2c2X1mL\" rel=\"nofollow noreferrer\">pastebin.com/k2c2X1mL</a></span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Thanks. It looks like <code>AC</code> <code>5B</code> <code>4A</code> <code>72</code> <code>F0</code> <code>86</code> <code>0B</code> <code>A9</code> <code>46</code> <code>85</code> <code>9D</code> <code>FF</code> <code>2B</code> <code>58</code> <code>10</code> <code>99</code> is the key.</span>",
                    "time": null
                }
            ]
        }
    ]
}