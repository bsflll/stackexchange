{
    "title": "Reverse an encryption algorithem in APK .so file",
    "link": "https://reverseengineering.stackexchange.com/questions/26019/reverse-an-encryption-algorithem-in-apk-so-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I try to reverse a cipher algorithm (I guess Tiny Encryption Algorithm (TEA)) in an android application. But I have a serious problem in initializing arguments.\n  <strong>\n   How I can understand that I have selected the input arguments correctly?(Especially when they are pointer)\n  </strong>\n  This algorithm get 4 bytes from user(typed in a textbox)and other 4 bytes from an external hardware and mix up this 8 bytes and export 4 bytes for us.\nSo, I have shown this algorithm in below:\n </p>\n <pre><code>                EXPORT Mycipher\nMycipher                                \n                                        \n\nvar_20          = -0x20\nvar_1C          = -0x1C\n\n                PUSH    {R0-R2,R4-R7,LR}\n                MOVS    R3, #0\n                STR     R0, [SP,#0x20+var_20]\n                LDR     R4, [R1]\n                LDR     R0, [R1,#4]\n                MOVS    R5, R3\n                MOVS    R6, #3\n                MOV     R12, R1\n                B       loc_DADC\n; ---------------------------------------------------------------------------\n\nloc_DAA6                                ; CODE XREF: Mycipher+4C\n                MOVS    R1, R3\n                ANDS    R1, R6\n                LSLS    R1, R1, #2\n                LDR     R1, [R1,R2]\n                LSLS    R7, R0, #4\n                ADDS    R5, #1\n                ADDS    R1, R3, R1\n                STR     R1, [SP,#0x20+var_1C]\n                LSRS    R1, R0, #5\n                EORS    R7, R1\n                LDR     R1, [SP,#0x20+var_1C]\n                ADDS    R7, R7, R0\n                EORS    R7, R1\n                LDR     R1, =0x9E3779B9\n                ADDS    R4, R4, R7\n                LSRS    R7, R4, #5\n                ADDS    R3, R3, R1\n                LSLS    R1, R4, #4\n                EORS    R7, R1\n                LSRS    R1, R3, #0xB\n                ANDS    R1, R6\n                LSLS    R1, R1, #2\n                LDR     R1, [R1,R2]\n                ADDS    R7, R7, R4\n                ADDS    R1, R3, R1\n                EORS    R1, R7\n                ADDS    R0, R0, R1\n\nloc_DADC                                ; CODE XREF: Mycipher+10\n                LDR     R1, [SP,#0x20+var_20]\n                CMP     R5, R1\n                BNE     loc_DAA6\n                MOV     R1, R12\n                STR     R4, [R1]\n                STR     R0, [R1,#4]\n                POP     {R0-R2,R4-R7,PC}\n; End of function Mycipher\n</code></pre>\n <p>\n  Then I reverse this algorithm to C code :\n </p>\n <pre><code>void Mycipher (uint32_t* v, const uint32_t* k ) {\n    uint32_t v0=v[0] ,v1=v[1], sum=0, i;\nfor (i=0; i<2; i++) {\n    v0 += ((v1 << 4u ^ v1 >> 5u) + v1) ^ (uint32_t)(sum + *(uint32_t *)(((sum & 3u) * 4u) + k));\n    sum = sum + 0x9e3779b9;\n    v1 += (sum + *(uint32_t *)((sum >> 0xb & 3u) * 4u + k) ^ (v0 >> 5u ^ v0 * 0x10) + v0);\n}\nv[0]=v0; v[1]=v1;\n}\n</code></pre>\n <p>\n  And you can see the piece of code that exactly there is in before of function invoke:\n </p>\n <pre><code>STR     R3, [SP,#0x258+var_248]\nMOVS    R0, #2\nMVNS    R3, R3\nADD     R1, SP, #0x258+var_248\nADD     R2, SP, #0x258+var_240\nSTR     R3, [SP,#0x258+var_244]\nBL      Mycipher\n</code></pre>\n <p>\n  But I don't know\n  <strong>\n   how I can determine the input arguments type?\n  </strong>\n  For example, I put the second argument as\n  <code>\n   const\n  </code>\n  because the cLion suggest me(Not for my knowledge). Or, In this case\n  <strong>\n   which line of code that shown above I must consider for input arguments?\n  </strong>\n  Now, I think my conversion have some problems(I'm suspicious to my codes) and I like to know how I can fix these problems.\nSorry for eating your time.\nThanks\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "166",
    "tags": [
        "disassembly",
        "android",
        "c",
        "arm"
    ],
    "user": "Unicornux",
    "time": "Oct 1, 2020 at 8:27",
    "comments": [
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n You need to inspect those values at run-time when the function is originally called, so you can make sense of the arguments meaning.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Unicornux",
            "text": "<html><body><span class=\"comment-copy\">\n I have to analyze this app statically. I guess you mean, I to-dos in debug mode. Otherwise, how I can inspect those in run time?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n What forces you to debug it statically? You can normally run gdb server on your android device and then debug the .so from your PC instruction by instruction. Eventually you can hook the\n <code>\n  Mycipher\n </code>\n using tools like Frida and then inspect it's parameters.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Unicornux",
            "text": "<html><body><span class=\"comment-copy\">\n I tried to do it but I couldn't. So I decided analyzing this statically.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}