{
    "title": "How to revese engineer a self-modyfing binary",
    "link": "https://reverseengineering.stackexchange.com/questions/15341/how-to-revese-engineer-a-self-modyfing-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to hack a code in binary\n  <code>\n   .so\n  </code>\n  library. But, when I open\n  <code>\n   .so\n  </code>\n  library with IDA the library has only one function and no strings and there is\n  <code>\n   bad_offset\n  </code>\n  before every address. However, when I open the library in hex editor I can see the name of the functions. I think the program modify itself at runtime but I am not sure.\n </p>\n <p>\n  Here is the code of the function that shows in IDA:\n </p>\n <pre><code>        ADR             R12, 0x1FE8\n        ADD             R12, R12, #0x12000\n        LDR             PC, [R12,#0xF68]! \n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "293",
    "tags": [
        "ida",
        "disassembly",
        "arm"
    ],
    "user": "Minato",
    "time": "Jul 17, 2017 at 7:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is not self-modifying code.  This snippet just jumps to a pointer loaded from memory (most likely a GOT entry):\n </p>\n <pre><code>    ADR             R12, 0x1FE8           ;R12=0x1FE8  \n    ADD             R12, R12, #0x12000    ; R12 +=0x12000->R12=0x13FE8\n    LDR             PC, [R12,#0xF68]!     ; PC= *(R12+0xF68)=*(0x14F50)\n</code></pre>\n <p>\n  this is a typical code for a\n  <a href=\"https://stackoverflow.com/questions/5469274/what-does-plt-mean-here\">\n   PLT stub entry\n  </a>\n  . You will need to check what is present at that address in the binary and see where it finally jumps.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jun 16, 2017 at 17:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know about Android so don't know if it applies to your situation, but on some embedded systems where you normally expect to disassemble the code from the flash image, but cannot for similar reasons, it can help to read the RAM as the program is running. Or step through the code in a simulator.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "John Banks",
            "time": "May 16, 2017 at 15:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}