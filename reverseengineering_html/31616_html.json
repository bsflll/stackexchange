{
    "title": "Ghidra Shows Structure Strange",
    "link": "https://reverseengineering.stackexchange.com/questions/31616/ghidra-shows-structure-strange",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am new to assembly. When I was disassembling some code, I encounter some strange instruction here. The instruction shows that (RBP + -0x40) is equal to local_48, however at the beginning of the code, we can see that (RBP + -0x48) is equal to local_48. Also, I know that this is a struct. Is there something wrong here or am I looking at it wrong?\n </p>\n <p>\n  The instruction I was talking about:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/FXU8s.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Assembly Instruction\" src=\"https://i.sstatic.net/FXU8s.png\"/>\n  </a>\n </p>\n <p>\n  And the beginning of the code:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Bpedz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Beginning Of The Code\" src=\"https://i.sstatic.net/Bpedz.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "160",
    "tags": [
        "assembly",
        "x86",
        "ghidra"
    ],
    "user": "Pytai",
    "time": "Mar 2, 2023 at 22:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Without seeing the full function, I suspect what you're seeing is a result of how Ghidra identifies a stack-based variable, as described in the answer to\n  <a href=\"https://reverseengineering.stackexchange.com/questions/23540/ghidra-interpreting-stack-pointers-wrongly\">\n   this question\n  </a>\n  .\n </p>\n <p>\n  The\n  <code>\n   Stack[-0x##]\n  </code>\n  numbers in your screenshot are likely not relative to\n  <code>\n   RBP\n  </code>\n  , but rather the stack pointer\n  <code>\n   RSP\n  </code>\n  at the function start. Since\n  <code>\n   RBP\n  </code>\n  might have been set to the value of\n  <code>\n   RSP\n  </code>\n  <em>\n   after\n  </em>\n  some pushes occurred, it could be a slightly different offset than the stack offset at the entry point of the function. This can take some getting used to as it is unintuitive.\n </p>\n <p>\n  If you are still learning assembly, a good exercise is to follow the changes made to the stack pointer via pushes/pops in the function start, and verify that you understand why the offset of\n  <code>\n   RBP\n  </code>\n  later in the function body would be slightly different than the offset to\n  <code>\n   RSP\n  </code>\n  at the beginning of the function for the same stack address.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "goatshriek",
            "time": "Mar 3, 2023 at 1:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}