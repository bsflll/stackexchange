{
    "title": "Ghidra function pointer calling conventions",
    "link": "https://reverseengineering.stackexchange.com/questions/31873/ghidra-function-pointer-calling-conventions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reverse engineering some ColdFire MCF5206 (68K-like) code that makes heavy use of function pointers, e.g.:\n </p>\n <pre><code>000006e0 46 fc 27 00               move            #0x2700,SR\n000006e4 4f ef ff f0               lea             (-0x10,SP),SP\n000006e8 48 d7 03 03               movem.l         { D0 D1 A0 A1},(SP=>local_10)\n000006ec 70 03                     moveq           #0x3,D0\n000006ee 13 c0 20 00 01 11         move.b          D0b,(SIM.TIMER[0].TER).l\n000006f4 52 b9 01 00 01 5c         addq.l          #0x1,(g_timer1_val).l\n000006fa 20 79 01 00 01 50         movea.l         (g_timer1_fn2).l,A0\n00000700 4e 90                     jsr             (A0)\n00000702 20 79 01 00 01 4c         movea.l         (g_timer1_fn1).l,A0\n00000708 4e 90                     jsr             (A0)\n0000070a 4c d7 03 03               movem.l         (SP=>local_10),{ D0 D1 A0 A1}\n0000070e 4f ef 00 10               lea             (0x10,SP),SP\n00000712 4e 73                     rte\n</code></pre>\n <p>\n  However the decompiled code gives this output:\n </p>\n <pre><code>void vec_irq_l5(void)\n{\n  SIM.TIMER[0].TER = 3;\n  g_timer1_val = g_timer1_val + 1;\n  (*g_timer1_fn2)(g_timer1_fn2,3);\n  (*g_timer1_fn1)(g_timer1_fn1);\n  return;\n}\n</code></pre>\n <p>\n  i.e. it is assuming that register A0 is always passed first, and in the first function call it has also assumed that D0 (value 3) is being passed.  In reality the two indirect functions are of type\n  <code>\n   void (fn*)(void)\n  </code>\n  .\n </p>\n <p>\n  Can I tell Ghidra not to do this, and to only consider stack parameters for these indirect calls?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "519",
    "tags": [
        "ghidra"
    ],
    "user": "Alnitak",
    "time": "May 15, 2023 at 23:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you right click on the call in the decompiler and select \"Override Signature\", you can set the function signature and select the calling convention.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "genghiskhan",
            "time": "May 19, 2023 at 15:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}