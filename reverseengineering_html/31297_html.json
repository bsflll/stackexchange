{
    "title": "Confused about small MIPS disassembly snippet (jalr)",
    "link": "https://reverseengineering.stackexchange.com/questions/31297/confused-about-small-mips-disassembly-snippet-jalr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to understand this part of a MIPS binary I am reversing using IDA. I have attached screenshots of the decompilation, disassembly, and the offset passed into the\n  <code>\n   jalr\n  </code>\n  instruction.\n </p>\n <p>\n  I am quite new to MIPS, so I think I am misunderstanding what's going on here.\n </p>\n <p>\n  The mktime() is a stub, so I guess that must be the reason for the odd output?\n </p>\n <p>\n  To me it looks like its just jumping to the start of the Global Offset Table, which makes no sense. Maybe it's trying to reference some function from the .got? I'm not too sure what's going on here. .GOT entry to memmove is at\n  <code>\n   .got:004D0D78\n  </code>\n  .\n </p>\n <p>\n  <code>\n   .got:004D0D78 memmove_ptr:    .word memmove\n  </code>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BIMh1.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"decompilation\" src=\"https://i.sstatic.net/BIMh1.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/hF4AL.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"disassembly\" src=\"https://i.sstatic.net/hF4AL.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/YJIcw.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"global offset table\" src=\"https://i.sstatic.net/YJIcw.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "87",
    "tags": [
        "ida",
        "mips"
    ],
    "user": "Atte",
    "time": "Dec 23, 2022 at 13:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The first slot of the GOT is special. At runtime, it is patched by the dynamic loader to point to its resolver function (\n  <code>\n   _dl_runtime_resolve\n  </code>\n  or similar). That function uses information in\n  <code>\n   $t8\n  </code>\n  (symbol/relocation offset) to look up the symbol in  one of the dependent shared objects and jumps to it. It also usually patches the corresponding GOT slot so that next calls go directly to the destination function and need not go through the resolver again.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Dec 24, 2022 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}