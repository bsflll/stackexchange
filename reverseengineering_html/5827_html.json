{
    "title": "Decompiling/disassembling lua bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/5827/decompiling-disassembling-lua-bytecode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been experimenting with decompiling Lua bytecode and found useful tools like unluac, and LuaAssemblyTools. Unluac seems to do the trick with lua scripts compiled with luac giving me almost the exact source code, however when I convert lua script to bytecode using the code:\n </p>\n <pre><code>file:write(string.dump(loadfile(filename)))\n</code></pre>\n <p>\n  I get a different output than with luac, however they are very much the same being only a byte extra at (a lot of) different places. Now this new file will give me an\n  <code>\n   IllegalState exception\n  </code>\n  from unluac and when I try to run the bytecode file (created by the code line above) in luac with the -l option I get:\n </p>\n <pre><code>C:\\MyDir>luac -l stringdumped.txt\nluac: stringdumped.txt: bad integer in precompiled chunk\n</code></pre>\n <p>\n  So there is clearly a difference between\n  <code>\n   string.dump\n  </code>\n  and luac, even though it is suggested here:\n  <a href=\"http://lua-users.org/wiki/LuaCompilerInLua\" rel=\"nofollow\">\n   http://lua-users.org/wiki/LuaCompilerInLua\n  </a>\n  to use\n  <code>\n   string.dump\n  </code>\n  as an emulator for luac.\n </p>\n <p>\n  Could anyone explain the difference to me, and suggest how I would go about reversing a\n  <code>\n   string.dump\n  </code>\n  \"compiled\" script?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "9k",
    "tags": [
        "disassembly",
        "decompile",
        "byte-code"
    ],
    "user": "Dennefyren",
    "time": "Apr 28, 2017 at 12:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is virtually no difference between the bytecode emitted by\n  <code>\n   loadfile\n  </code>\n  and\n  <code>\n   luac\n  </code>\n  .\nThe only possible reason for the error you are getting is that you are opening the file\n  <em>\n   stringdumped.txt\n  </em>\n  in text mode. Try the following code and see if there are any errors\n </p>\n <pre><code>f = io.open(\"stringdumped.txt\", \"wb\") --Note that file is opened in binary mode\nf:write(string.dump(loadfile(\"sample.lua\")))\nf:close()\n</code></pre>\n <p>\n  Since there is no difference, the output file\n  <em>\n   stringdumped.txt\n  </em>\n  can both be run by the lua interpreter as well as decompiled by\n  <em>\n   unluac\n  </em>\n  . The reversing steps too are exactly similar as you would do with any other compiled lua scripts.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xec",
            "time": "Jul 12, 2014 at 18:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dennefyren",
                    "text": "<span class=\"comment-copy\">Aha, but how can one disassemble the output of string.dump? Wrapping loadstring or loadfile around would just give the instruction to load the filename or byte-string.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@Dennefyren Forget the previous answer, see the updated one.</span>",
                    "time": null
                },
                {
                    "user": "Dennefyren",
                    "text": "<span class=\"comment-copy\">Oh wow I am such an idiot! Didn't realize I needed binary mode. Thank you!</span>",
                    "time": null
                }
            ]
        }
    ]
}