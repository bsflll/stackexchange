{
    "title": "How do I figure out what is burned on an Arduino ROM?",
    "link": "https://reverseengineering.stackexchange.com/questions/125/how-do-i-figure-out-what-is-burned-on-an-arduino-rom",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an Arduino Uno Rev3. I would like to extract and find out what code is burned on the ROM of the micro-controller board.\n </p>\n <ol>\n  <li>\n   How do I extract the code from the board?\n  </li>\n  <li>\n   How do I figure out the original source code that went into the hex file?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "37",
    "answers": 3,
    "views": "32k",
    "tags": [
        "decompilation",
        "rom",
        "dumping"
    ],
    "user": "asheeshr",
    "time": "Apr 9, 2013 at 22:15",
    "comments": [
        {
            "user": "mborowczak",
            "text": "<html><body><span class=\"comment-copy\">\n In order to improve the answer below - do you have any more details on what you're looking for out of the original source code?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n @borowcm Basic functioning. Your answer covers that. I havent selected that as the best answer, as others could answer/add to it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'll answer this in two parts, #1 is relatively easy, #2 impossible to the level which I'm assuming you want.\n </p>\n <h2>\n  1. Extracting the hex code from the Uno:\n </h2>\n <p>\n  While the specifics will depend on the revision of the Uno that you have, you'll want to use avrdude (\n  <a href=\"http://savannah.nongnu.org/projects/avrdude\" rel=\"noreferrer\">\n   available for linux, bundled with the OS X Arduino software\n  </a>\n  ) and a command similar to the following that would extract the information from an ATmega168:\n </p>\n <pre><code>avrdude -F -v -pm168 -cstk500v1 -P/dev/ttyUSB0 -b19200 -D -Uflash:r:program.bin:r\n</code></pre>\n <p>\n  Look at the\n  <a href=\"http://www.nongnu.org/avrdude/user-manual/avrdude_4.html#Option-Descriptions\" rel=\"noreferrer\">\n   avrdude documentation\n  </a>\n  to match the part parameter\n  <code>\n   -p\n  </code>\n  specific to your device (or post them and we can go from there).\n </p>\n <p>\n  Since it appears that you have the\n  <a href=\"http://arduino.cc/en/Main/arduinoBoardUno\" rel=\"noreferrer\">\n   Uno Rev3\n  </a>\n  , that board has an ATmega328 (\n  <code>\n   -pm328\n  </code>\n  ).  The programmer \"communicates using the original STK500 protocol\" thus the communication protocol flag\n  <code>\n   -c\n  </code>\n  should be\n  <code>\n   -cstk500v1\n  </code>\n  the command you would need (assuming the Uno is connected to /dev/ttyUSB0) follows:\n </p>\n <pre><code>avrdude -F -v -pm328p -cstk500v1 -P/dev/ttyUSB0 -b19200 -D -Uflash:r:program.bin:r\n</code></pre>\n <p>\n  Next up your second question.\n </p>\n <h2>\n  2. Converting Hex code to original source:\n </h2>\n <p>\n  Sorry, but that's not possible. While you can get some hex to c \"decompilers\" the gibberish returned, while functionally correct, will not be human readable (some commercial ones, like Hex-Rays, might give you some level of human-readability).\n </p>\n <p>\n  With that said, you're best bet would be a hex to assembly translator/converter - which will still only give you a better picture of what's happening, but will still be (by definition) very low level. All variable names, comments etc would be stripped and you're still going to be left with not knowing the original source program contents - just the compiled result.\n </p>\n <p>\n  Since you're dealing with an Atmel device you\n  <em>\n   could\n  </em>\n  try to use the avr specific gcc toolchain\n  <code>\n   avr-gcc\n  </code>\n  . Specifically, you'll need\n  <code>\n   avr-objdump\n  </code>\n  using the needed MCU type flag\n  <code>\n   -m atmega328\n  </code>\n  (avr5) architecture (\n  <a href=\"http://www.nongnu.org/avr-libc/user-manual/using_tools.html\" rel=\"noreferrer\">\n   Full List of Available Architectures, MCU types\n  </a>\n  )\n </p>\n <pre><code>avr-objdump -s -m atmega328 program.hex > program.dump\n</code></pre>\n <p>\n  It is also possible, depending on your configuration, that providing the architecture type itself (avr5) would be sufficient:\n </p>\n <pre><code>avr-objdump -s -m avr5 program.hex > program.dump\n</code></pre>\n</div>\n</body></html>",
            "votes": "38",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On windows for an arduino nano, you do this:\n </p>\n <pre><code>cd \"C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin\"\n</code></pre>\n <p>\n  followed by this:\n </p>\n <pre><code>\"C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin\\avrdude\" -F \"-CC:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr/etc/avrdude.conf\" -v -v -patmega328p -carduino -PCOM14 -b57600 -D-Uflash:r:c:\\keep\\program.bin:r\n</code></pre>\n <p>\n  Here's the output from the above grabbing code:\n </p>\n <pre><code>avrdude2.exe: Version 6.0.1, compiled on Mar 30 2015 at 14:56:06\n              Copyright (c) 2000-2005 Brian Dean, http://www.bdmicro.com/\n              Copyright (c) 2007-2009 Joerg Wunsch\n\n              System wide configuration file is \"C:\\Program Files (x86)\\Arduino\\\nhardware\\tools\\avr/etc/avrdude.conf\"\n\n              Using Port                    : COM14\n              Using Programmer              : arduino\n              Overriding Baud Rate          : 57600\n              AVR Part                      : ATmega328P\n              Chip Erase delay              : 9000 us\n              PAGEL                         : PD7\n              BS2                           : PC2\n              RESET disposition             : dedicated\n              RETRY pulse                   : SCK\n              serial program mode           : yes\n              parallel program mode         : yes\n              Timeout                       : 200\n              StabDelay                     : 100\n              CmdexeDelay                   : 25\n              SyncLoops                     : 32\n              ByteDelay                     : 0\n              PollIndex                     : 3\n              PollValue                     : 0x53\n              Memory Detail                 :\n\n                                       Block Poll               Page\n           Polled\n                Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW\n  MaxW   ReadBack\n                ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----\n- ----- ---------\n                eeprom        65    20     4    0 no       1024    4      0  360\n0  3600 0xff 0xff\n                flash         65     6   128    0 yes     32768  128    256  450\n0  4500 0xff 0xff\n                lfuse          0     0     0    0 no          1    0      0  450\n0  4500 0x00 0x00\n                hfuse          0     0     0    0 no          1    0      0  450\n0  4500 0x00 0x00\n                efuse          0     0     0    0 no          1    0      0  450\n0  4500 0x00 0x00\n                lock           0     0     0    0 no          1    0      0  450\n0  4500 0x00 0x00\n                calibration    0     0     0    0 no          1    0      0\n0     0 0x00 0x00\n                signature      0     0     0    0 no          3    0      0\n0     0 0x00 0x00\n\n              Programmer Type : Arduino\n              Description     : Arduino\n              Hardware Version: 2\n              Firmware Version: 1.16\n              Vtarget         : 0.0 V\n              Varef           : 0.0 V\n              Oscillator      : Off\n              SCK period      : 0.1 us\n\navrdude2.exe: AVR device initialized and ready to accept instructions\n\nReading | ################################################## | 100% 0.02s\n\navrdude2.exe: Device signature = 0x1e950f\navrdude2.exe: safemode: lfuse reads as 0\navrdude2.exe: safemode: hfuse reads as 0\navrdude2.exe: safemode: efuse reads as 0\navrdude2.exe: reading flash memory:\n\nReading | ################################################## | 100% 9.49s\n\navrdude2.exe: writing output file \"c:\\keep\\program.bin\"\n\navrdude2.exe: safemode: lfuse reads as 0\navrdude2.exe: safemode: hfuse reads as 0\navrdude2.exe: safemode: efuse reads as 0\navrdude2.exe: safemode: Fuses OK (H:00, E:00, L:00)\n\navrdude2.exe done.  Thank you.\n</code></pre>\n <p>\n  and this is the resulting file:-\n </p>\n <pre><code>C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin>dir c:\\keep\\program.bin\n Volume in drive C has no label.\n Volume Serial Number is EE8C-DFB9\n\n Directory of c:\\keep\n\n19/02/2016  07:00 PM            32,670 program.bin\n               1 File(s)         32,670 bytes\n               0 Dir(s)  41,416,818,688 bytes free\n</code></pre>\n <p>\n  I renamed my \"avrdude.exe\" to \"avrdude2.exe\" and wrote a shim named \"avrdude.exe\" which calls the real one after outputting what the arduino does to build to my target device.\n </p>\n <p>\n  The original command my system used to build was:-\n </p>\n <pre><code>C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin\\avrdude \"-CC:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr/etc/avrdude.conf\" -v -v -patmega328p -carduino -PCOM14 -b57600 -D -Uflash:w:C:\\Users\\user\\AppData\\Local\\Temp\\build4588201597642272956.tmp/TFT_Baja2.cpp.hex:i\n</code></pre>\n <p>\n  Interesting fact: the hex dump included fragments of other code I'd written... this suggests some very interesting privacy and security problems for anyone shipping arduinos which have been previously used for other things...\n </p>\n <p>\n  If you're using boards other than a nano, my shim was:\n </p>\n <pre><code>#!perl\n\nuse strict;\n\nforeach(@ARGV){$_=qq(\"$_\") if(/\\s/)};   # DOS Wants quotes around space-embedded paramaters!\n\nforeach(@ARGV){$_='-v' if($_ eq '-q');} # go verbose instead of silent\n\nmy $parms=join(\" \",@ARGV);\nopen(OUT,\">>\",\"C:\\\\keep\\\\avrdude.log\") || warn \"Cannot write: $!\"; \nprint OUT \"\n\" . &db_now() . \" $0 $parms\n\"; close(OUT);\n\nmy $rc=`avrdude2.exe $parms`;\n\nopen(OUT,\">>\",\"C:\\\\keep\\\\avrdude.log\"); print OUT $rc; close(OUT);\nprint $rc;\n\n# Return \"now()\" in mysql default format.\nsub db_now {\n     my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();\n     return sprintf(\"%04d-%02d-%02d %02d:%02d:%02d\",1900+$year,$mon+1,$mday,$hour,$min,$sec);\n}\n</code></pre>\n <p>\n  compiled to a windows .exe using:\n </p>\n <pre><code>perlapp avrdude.pl\n</code></pre>\n <p>\n  enjoy!\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Anon Coward",
            "time": "Feb 19, 2016 at 9:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a way to recompile with this opensource app, called RetDec:\n </p>\n <p>\n  <a href=\"https://github.com/avast-tl/retdec\" rel=\"nofollow noreferrer\">\n   https://github.com/avast-tl/retdec\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": null,
            "time": "May 11, 2018 at 8:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Alas it does not support AVR.</span>",
                    "time": null
                }
            ]
        }
    ]
}