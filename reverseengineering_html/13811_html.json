{
    "title": "What is this protection that seems to prevent ROP when ASLR in ON?",
    "link": "https://reverseengineering.stackexchange.com/questions/13811/what-is-this-protection-that-seems-to-prevent-rop-when-aslr-in-on",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was doing some tests to train myself to ROP when\n  <code>\n   ASLR\n  </code>\n  is\n  <code>\n   ON\n  </code>\n  and\n  <code>\n   NX\n  </code>\n  is enabled.\n </p>\n <p>\n  I created this small program for testing purpose\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char ** argv) {\n    char buff[128];\n\n    gets(buff);\n\n    char *password = \"I am h4cknd0\";\n\n    if (strcmp(buff, password)) {\n        printf(\"You password is incorrect\n\");\n    } else {\n        printf(\"Access GRANTED !\n\");\n    }\n\n    return 0;\n}\n</code></pre>\n <p>\n  And I compiled it on a 64bits Ubuntu with this command\n </p>\n <pre><code>gcc -o rop rop.c -m32 -fno-stack-protector  -Wl,-z,relro,-z,now,-z,noexecstack -static\n</code></pre>\n <p>\n  When I open the beast in\n  <code>\n   gdb\n  </code>\n  and disassemble the main function, I get the following\n </p>\n <pre><code>0x0804887c <+0>:       lea    ecx,[esp+0x4]\n0x08048880 <+4>:       and    esp,0xfffffff0\n0x08048883 <+7>:       push   DWORD PTR [ecx-0x4]\n0x08048886 <+10>:      push   ebp\n0x08048887 <+11>:      mov    ebp,esp\n0x08048889 <+13>:      push   ecx\n0x0804888a <+14>:      sub    esp,0x94\n0x08048890 <+20>:      sub    esp,0xc\n0x08048893 <+23>:      lea    eax,[ebp-0x8c]\n0x08048899 <+29>:      push   eax\n0x0804889a <+30>:      call   0x804f100 <gets>\n0x0804889f <+35>:      add    esp,0x10\n0x080488a2 <+38>:      mov    DWORD PTR [ebp-0xc],0x80bb388\n0x080488a9 <+45>:      sub    esp,0x8\n0x080488ac <+48>:      push   DWORD PTR [ebp-0xc]\n0x080488af <+51>:      lea    eax,[ebp-0x8c]\n0x080488b5 <+57>:      push   eax\n0x080488b6 <+58>:      call   0x8048280\n0x080488bb <+63>:      add    esp,0x10\n0x080488be <+66>:      test   eax,eax\n0x080488c0 <+68>:      je     0x80488d4 <main+88>\n0x080488c2 <+70>:      sub    esp,0xc\n0x080488c5 <+73>:      push   0x80bb395\n0x080488ca <+78>:      call   0x804f280 <puts>\n0x080488cf <+83>:      add    esp,0x10\n0x080488d2 <+86>:      jmp    0x80488e4 <main+104>\n0x080488d4 <+88>:      sub    esp,0xc\n0x080488d7 <+91>:      push   0x80bb3af\n0x080488dc <+96>:      call   0x804f280 <puts>\n0x080488e1 <+101>:     add    esp,0x10\n0x080488e4 <+104>:     mov    eax,0x0\n0x080488e9 <+109>:     mov    ecx,DWORD PTR [ebp-0x4]\n0x080488ec <+112>:     leave  \n0x080488ed <+113>:     lea    esp,[ecx-0x4]\n0x080488f0 <+116>:     ret\n</code></pre>\n <p>\n  It's the first time I have these function prologue and epilogue\n </p>\n <p>\n  <strong>\n   Prologue\n  </strong>\n </p>\n <pre><code>0x0804887c <+0>:       lea    ecx,[esp+0x4]\n0x08048880 <+4>:       and    esp,0xfffffff0\n0x08048883 <+7>:       push   DWORD PTR [ecx-0x4]\n</code></pre>\n <p>\n  <strong>\n   Epilogue\n  </strong>\n </p>\n <pre><code>0x080488e9 <+109>:     mov    ecx,DWORD PTR [ebp-0x4]\n0x080488ec <+112>:     leave  \n0x080488ed <+113>:     lea    esp,[ecx-0x4]\n0x080488f0 <+116>:     ret\n</code></pre>\n <p>\n  Because of these, I need to know\n  <code>\n   ESP\n  </code>\n  value when the\n  <code>\n   main\n  </code>\n  function is called when exploiting the vulnerable binary with ROP, but since\n  <code>\n   ASLR\n  </code>\n  is enabled, it's not possible.\n </p>\n <p>\n  <strong>\n   PS\n  </strong>\n  : I assure you this is a program I wrote myself for training purpose, it's not part of any challenge or CTF.\n </p>\n <p>\n  Thanks for your time and knowledge :)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "rop"
    ],
    "user": "Hackndo",
    "time": "Oct 26, 2016 at 20:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is not a protection but juste a prologue / epilogue that your compiler will produce.\nYou can check the produced assembly with different versions of gcc right there:\n  <a href=\"https://gcc.godbolt.org/\" rel=\"nofollow\">\n   https://gcc.godbolt.org/\n  </a>\n </p>\n <p>\n  And in your context, you can control ECX. But what if you just control the last byte only ? Then you might fall on some of your input in the stack.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "laxa",
            "time": "Oct 25, 2016 at 8:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. That's totally right. I tried to use another compiler and did the following command <code>clang -o rop rop.c -m32 -fno-stack-protector  -Wl,-z,relro,-z,now,-z,noexecstack -static</code> and now I have a perfect well know prologue/epilogue :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While not a part of the official 386 SysV ABI, there is a de-facto requirement that the stack pointer is aligned to 16 bytes at all times when calling system functions (enforced by the de-facto standard compiler (GCC) since several years ago:\n  <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38496\" rel=\"nofollow\">\n   1\n  </a>\n  ,\n  <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=27537\" rel=\"nofollow\">\n   2\n  </a>\n  ). That's why the prolog of the\n  <code>\n   main\n  </code>\n  function contains the\n  <code>\n   and esp,0xfffffff0\n  </code>\n  instruction. Only the\n  <code>\n   main()\n  </code>\n  function needs to do that, other functions usually don't perform stack realignment since they assume they're already called with 16-byte alignment (unless you use\n  <code>\n   -mrealignstack\n  </code>\n  ).\n </p>\n <p>\n  So instead of using another compiler you could try putting the vulnerable code in a separate function, not\n  <code>\n   main\n  </code>\n  directly.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 25, 2016 at 16:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">Thanks for this useful information. I already published my article but I'll think about putting the vulnerable code in a separate function.</span>",
                    "time": null
                }
            ]
        }
    ]
}