{
    "title": "Strings weirdly split in binary",
    "link": "https://reverseengineering.stackexchange.com/questions/21974/strings-weirdly-split-in-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Recently I have come across a few parts in a binary that looked odd to me, and I wanted to ask if this is something common compilers do, and if there is a way to undo it.\n </p>\n <p>\n  (The binary is from a raw flash dump)\n </p>\n <p>\n  A few examples:\n </p>\n <pre><code>In Binary File:\n4C 65 76 FF 65 6C 3D 30 28 4F 46 46 FF 29 2C 31 28 45 52 52 29 FF 2C 32 28 43 4D 44 29 2C FD 33 1C 41 50 52 4F 43 29\nLevÿel=0(OFFÿ),1(ERR)ÿ,2(CMD),ý3.APROC)\n\nWhat it actually should look like:\nLevel=0(OFF),1(ERR),2(CMD),3(....PROC)\n</code></pre>\n <pre><code>Bin:\n45 D2 60 67 65 6E 63 79 DA 50 FF 6F 70 20 54 65 73 74 20 33 4F 4E\nEÒ`gencyÚPÿop Test 3ON\n\nActual:\nEmergency Loop Test ON\n</code></pre>\n <pre><code>Bin:\n53 FF 65 72 76 69 63 65 20 55 FF 6E 61 76 61 69 6C 61 62 E3 6C 65\nSÿervice Uÿnavailabãle\n\nActual:\nService Unavailable\n</code></pre>\n <p>\n  Thanks in advance.\n </p>\n <p>\n  EDIT:\n </p>\n <p>\n  <strong>\n   How do you know what it should look like ?\n  </strong>\n </p>\n <p>\n  Because when the board is running, it is showing the exact same string in the GUI.\n </p>\n <p>\n  <strong>\n   Can you diff your dump and the binary found on disk ?\n  </strong>\n </p>\n <p>\n  Since this image is extracted from a flash, I'd say it actually is stored like that on it.\n </p>\n <p>\n  <strong>\n   Can you update your question with hex bytes in order to aid investigation ?\n  </strong>\n </p>\n <p>\n  Sure.\n </p>\n <p>\n  <strong>\n   Are you aware of the compiler used ?\n  </strong>\n </p>\n <p>\n  No, I do not know what compiler was used. It has to be something for embedded systems tho, since it was running on an mcu.\n </p>\n <p>\n  <strong>\n   Could you provide some environment information ? (OS, arch, compiler...)\n  </strong>\n </p>\n <p>\n  Embedded System Board running some sort of RENESAS Processor (exact model unknown)\n </p>\n <p>\n  UPDATE:\n </p>\n <p>\n  Every 8 bytes there is some sort of indicator. In my case mostly FF (ÿ) which indicates that the next 8 bytes are not encoded/compressed.\nIf the byte is something like FD (ý) which in Binary(MSB) is 10111111, means the 2nd byte is encoded.\n </p>\n <p>\n  Example:\n </p>\n <pre><code>Levÿel=0(OFFÿ),1(ERR)ÿ,2(CMD),ý3.APROC)\n678 12345678 12345678 12345678 12.345678\n</code></pre>\n <p>\n  Meaning (APROC) isn't actually (APROC) but rather something more like (....PROC)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "165",
    "tags": [
        "decompilation",
        "encryption",
        "decompress",
        "gcc"
    ],
    "user": "Lukas S.",
    "time": "Aug 25, 2019 at 22:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Shot in the dark: Maybe this text (or the whole binary image) is compressed. Think something like\n  <a href=\"https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Storer%E2%80%93Szymanski\" rel=\"nofollow noreferrer\">\n   LZSS\n  </a>\n  .\n </p>\n <p>\n  The fact that there is a mystery byte containing eight\n  <code>\n   1\n  </code>\n  bits, followed by eight literal and correct bytes, indicates that maybe the mystery bytes are actually flags that use each bit position to differentiate uncompressed data bytes from pointers to earlier data. Cases where the mystery byte is\n  <em>\n   not\n  </em>\n  <code>\n   FF\n  </code>\n  are followed by text that is more corrupted than the other instances, leading credence to the idea that\n  <code>\n   0\n  </code>\n  bits mean pointer data.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "smitelli",
            "time": "Aug 25, 2019 at 21:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lukas S.",
                    "text": "<span class=\"comment-copy\">I just took a look again at the binary image. It seems you might be right. FF is always followed by 8 correct Bytes. If the next one isn't a FF then some arent right.  I'll try to find out, what encoding it is using.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A quick Google search revelead that\n  <code>\n   ÿ\n  </code>\n  in UTF8 is\n  <code>\n   U+00FF\n  </code>\n  . My guess would be that you're either looking at UTF8 bytes that are not being interpreted correctly or your dump has differences from executable file on disk that cause such corrupted characters. \nI'll ask a couple more questions:\n </p>\n <ul>\n  <li>\n   How do you know what it should look like ?\n  </li>\n  <li>\n   Can you diff your dump and the binary found on disk ?\n  </li>\n  <li>\n   Can you update your question with hex bytes in order to aid investigation ?\n  </li>\n  <li>\n   Are you aware of the compiler used ?\n  </li>\n  <li>\n   Could you provide some environment information ? (OS, arch, compiler...)\n  </li>\n </ul>\n <p>\n  As for undoing the corruption, can't you do it yourself by hand ? In case it is not feasible / you don't want the questions above become more relevant\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "shxdow",
            "time": "Aug 25, 2019 at 19:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Lukas S.",
                    "text": "<span class=\"comment-copy\">I just added the answer to my original question</span>",
                    "time": null
                }
            ]
        }
    ]
}