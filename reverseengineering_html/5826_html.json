{
    "title": "Detecting and/or converting binary endianness (PPE [CELL] to Intel)",
    "link": "https://reverseengineering.stackexchange.com/questions/5826/detecting-and-or-converting-binary-endianness-ppe-cell-to-intel",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am by no means a competent programmer in any sense of the word. I've only ever fiddled with .NET building very, very basic applications. If it's possible to be given step-by-step instructions, then please do.\n </p>\n <p>\n  That said, my issue right now is figuring out a way to convert a binary file compiled for the CELL architecture to Intel. These are\n  <em>\n   binary\n  </em>\n  files rather than\n  <em>\n   executables\n  </em>\n  . I've thoroughly searched the net looking for answers, however all of them seem to refer to PowerPC instead of PPE.\n </p>\n <p>\n  In a perfect world, the preferred solution would entail simply dragging/dropping the big-endian files onto a conversion executable. Since this is not a perfect world, I wont look forward to such a thing.\n </p>\n <p>\n  NOTE 1: The binary files in question are 64 bit, judging from the\n  <a href=\"http://www.psdevwiki.com/ps3/CELL_BE\" rel=\"nofollow\">\n   specs on the CELL architecture\n  </a>\n  .\n </p>\n <p>\n  NOTE 2: Fortunately, I have versions of these binaries in both big and little-endian. Using UltraCompare (albeit taking an ungodly amount of time to compare,) I can verify byte-swapping in the headers when comparing against it's little-endian counterparts.\n </p>\n <p>\n  \"If you have both versions, then why do you need to convert them?\"\n </p>\n <p>\n  There are some binaries not available in little-endian and those are the ones I need.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "125",
    "tags": [
        "binary-analysis"
    ],
    "user": "Steve",
    "time": "Jul 10, 2014 at 12:15",
    "comments": [
        {
            "user": "Dmitry Janushkevich",
            "text": "<html><body><span class=\"comment-copy\">\n If these are not executables, what are they? Some sort of resource bundles? If so, you'd need to know the exact file format. Then, writing a script to convert endianness won't be an issue.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n \"I can verify byte-swapping in the headers\" ... is it just the headers that have their bytes swapped, or the data as well?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Steve",
            "text": "<html><body><span class=\"comment-copy\">\n @GuntramBlohm - As far as I know, and according to research being done by others on this, it seems to indeed be just the headers. I'm not well-versed in this subject, so I can't give you a definitive answer. However, I can give you\n <a href=\"http://i.imgur.com/uwko8Rc.png\" rel=\"nofollow noreferrer\">\n  a screenshot\n </a>\n showing what I mean.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Seems like some stuff is byte-swapped, for example the headers up to byte 0x18; after the 5-byte \"None\\0\", byte-swapping continues. But there are also ranges of bytes that seem wildly different, for example 0x41-0x51. If these two files are indeed reprentations of the same object, it seems conversion between them is much harder that just a few endianness swaps.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}