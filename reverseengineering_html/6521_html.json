{
    "title": "Is it possible to force IDA to acknowledge unusual frame pointer deltas?",
    "link": "https://reverseengineering.stackexchange.com/questions/6521/is-it-possible-to-force-ida-to-acknowledge-unusual-frame-pointer-deltas",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I keep coming across a compiling pattern that IDA doesn't automatically handle well.  Consider the following example:\n </p>\n <pre><code>mov rax, rsp       ; Set rax at the start of the function\n...\nlea rbp, [rax-5Fh] ; Shortly afterward, set rbp as the frame pointer at a nonstandard offset\n...\nmov [rbp+3Fh], rcx ; Reference all stack offsets from rbp for the rest of the function\n...\n</code></pre>\n <p>\n  In this example, it appears that IDA has lost track of\n  <code>\n   rbp\n  </code>\n  's state as an offset into the stack frame, presumably because of the additional indirection.  (We copy from\n  <code>\n   rsp\n  </code>\n  to\n  <code>\n   rax\n  </code>\n  to\n  <code>\n   rbp\n  </code>\n  , rather than just from\n  <code>\n   rsp\n  </code>\n  to\n  <code>\n   rbp\n  </code>\n  )\n </p>\n <p>\n  I would like the above example to look something more like this:\n </p>\n <pre><code>var_20= qword ptr -20h\n...\nmov [rbp+5Fh+var_20], rcx\n</code></pre>\n <p>\n  However, as one would expect, if I change the type of\n  <code>\n   3Fh\n  </code>\n  to be a stack offset, I get the following:\n </p>\n <pre><code>arg_37= qword ptr 3Fh\n...\nmov [rbp+arg_37], rcx\n</code></pre>\n <p>\n  Which is obviously not correct.  I have two questions:\n </p>\n <ul>\n  <li>\n   <strong>\n    Is it possible to generate the desired output?\n   </strong>\n  </li>\n  <li>\n   <strong>\n    If not, how would one normally deal with this?\n   </strong>\n  </li>\n </ul>\n <p>\n  Solutions I am aware of:\n </p>\n <ul>\n  <li>\n   I could create a structure for the stack frame and specify the offset delta (occasionally also adjusting for\n   <a href=\"http://www.hexblog.com/?p=63\">\n    negative offsets\n   </a>\n   ).  The downsides are that I would have to create a structure for each stack frame I analyze, and I would also not have cross-references.\n  </li>\n  <li>\n   I could just use the incorrect offsets in the stack frame.  This would give me cross-references, but I would expect things to break when touching\n   <code>\n    r\n   </code>\n   , the offset storing the return address.\n  </li>\n </ul>\n <p>\n  Also relevant: I'm using IDA Pro 6.2.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida"
    ],
    "user": "user1354557",
    "time": "Oct 22, 2014 at 18:31",
    "comments": [
        {
            "user": "QAZ",
            "text": "<html><body><span class=\"comment-copy\">\n any chance you can share/link to the binary sample, would like to check this out myself :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   Alt+P\n  </code>\n  will bring up the\n  <code>\n   Edit function\n  </code>\n  screen.\n </p>\n <p>\n  Make sure\n  <code>\n   BP based frame\n  </code>\n  is checked, and enter your value\n  <code>\n   0x5F\n  </code>\n  into the box marked\n  <code>\n   Frame pointer delta\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "heinrich5991",
            "time": "Oct 26, 2014 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">That did it, thank you!  Positive <code>0x5F</code> is the correct delta.</span>",
                    "time": null
                }
            ]
        }
    ]
}