{
    "title": "How to edit a type of sound file used with a fruit machine emulator?",
    "link": "https://reverseengineering.stackexchange.com/questions/15964/how-to-edit-a-type-of-sound-file-used-with-a-fruit-machine-emulator",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have two files that have the extension\n  <code>\n   .P1\n  </code>\n  and\n  <code>\n   .P2\n  </code>\n </p>\n <p>\n  These files are ROM sound files from a particular 'real world' fruit machine (also known as a slot machine).\n </p>\n <p>\n  There is some Fruit Machine emulation software (MFME) that reads both the sound ROM files and the game ROM files in order recreate the fruit machine within a PC.\n </p>\n <p>\n  I'm playing around creating my own fruit machine with the editor side of MFME, based on an existing fruit machine, and want to edit the sounds on this machine.\n </p>\n <p>\n  Unfortunately MFME doesn't have the functionality to edit sound files, only to read them.\n </p>\n <p>\n  The sound ROMs are apparently comprise of all the sounds packed one after another with a table at the start pointing to where each sound file is (lots of short beeps, buzzes, pings etc as you would expect from a fruit machine).\n </p>\n <p>\n  Does anyone know what software I would need to edit these files in order to insert my own sounds? I originally thought I would need a disassembler but when I downloaded one it wouldn't open them as they weren't either .exe or .dll files (I tried changing the extension of the file but the disassembler still knew they weren't the correct type of file).\n </p>\n <p>\n  How can I go about reverse engineering these files in order to edit them? Any ideas?\n </p>\n <p>\n  Thanks. :-)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "247",
    "tags": [
        "disassembly"
    ],
    "user": "John T",
    "time": "Jul 31, 2017 at 9:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <a href=\"http://agemame.mameworld.info/?u=/MFME/\" rel=\"nofollow noreferrer\">\n   MFME source code\n  </a>\n  is available to read.\n </p>\n <p>\n  You'll probably want to start with interface.cpp, which has most of the logic for deciding which sound format to load in\n  <code>\n   TForm1::Load(String)\n  </code>\n  . There are at least ten or so different formats from the look of it.\n </p>\n <p>\n  You can then take a look at\n  <code>\n   sample.cpp\n  </code>\n  which has the implementation for loading files.\n  <code>\n   LoadJPMSound\n  </code>\n  is of particular interest, but there are other formats to consider.\n </p>\n <p>\n  Here are the key facts for JPM sounds:\n </p>\n <ul>\n  <li>\n   File starts with a 1-byte sample count prefix (so I guess 255 samples max?)\n  </li>\n  <li>\n   Next comes a 4-byte magic number (0x5569A55A)\n  </li>\n  <li>\n   After that there's some sort of page table which describes the addresses of the sound data within the ROM.\n  </li>\n  <li>\n   Each audio \"page\" has a 1-byte flag value at the start. The two MSBs specify the kind of sound.\n   <ul>\n    <li>\n     00 means silence, where the remainder of the byte (i.e.\n     <code>\n      flag & 0x3F\n     </code>\n     ) specifies how long the silence should be in increments of 20 samples. A zero value here means an empty audio sample.\n    </li>\n    <li>\n     01 means there are 256 \"nibbles\" of audio. I'm not sure if this means 4-bit values but I haven't seen any bit manipulation in the decoding. The sample rate is set to 160000 divided by the remainder of the flag value plus one.\n    </li>\n    <li>\n     10 means the same as above, except the number of \"nibbles\" is stored as a byte following the flag.\n    </li>\n    <li>\n     11 means that the sample is a repeating loop. The number of repeats is computed as\n     <code>\n      (flag & 0x7) + 1\n     </code>\n     .\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  For YMZ samples, the file contains 250 sample entries, each consisting of:\n </p>\n <ul>\n  <li>\n   16-bit masked sample count, compute as\n   <code>\n    count = (((value & 0xFF00) >> 8) / 6) * 1000\n   </code>\n  </li>\n  <li>\n   High byte of buffer pointer.\n  </li>\n  <li>\n   High byte of sample pointer.\n  </li>\n  <li>\n   Mid byte of buffer pointer.\n  </li>\n  <li>\n   Mid byte of sample pointer.\n  </li>\n  <li>\n   Low byte of buffer pointer.\n  </li>\n  <li>\n   Low byte of sample pointer.\n  </li>\n  <li>\n   Sample data in the following format:\n   <ul>\n    <li>\n     4-bit YMZ280B format sample data (channel A)\n    </li>\n    <li>\n     4-bit YMZ280B format sample data (channel B)\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  The YMZ280B format is step-based format where each next signal value in the wave is encoded as the difference from the previous signal value (or 0 for the first sample). The 4-bit value is an index to a lookup table containing the possible steps: The step LUT is calculated as follows:\n </p>\n <pre><code>// nib from 0000 to 1111\nfor (nib = 0; nib < 16; nib++) {\n    int value = (nib & 0x07) * 2 + 1;\n    diff_lookup[nib] = (nib & 0x08) ? -value : value;\n}\n</code></pre>\n <p>\n  That should hopefully get you started. The source code should get you the rest.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Polynomial",
            "time": "Jul 31, 2017 at 11:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John T",
                    "text": "<span class=\"comment-copy\">Some brilliant information there. A massive thank you for taking to the time to put all that together. Thank you. Is there a program you would recommend for editing a sound ROM (assuming I can get my head around what/where I need to change)?</span>",
                    "time": null
                },
                {
                    "user": "Polynomial",
                    "text": "<span class=\"comment-copy\">I would probably write a script to convert the sound files to/from a convenient format like PCM WAV, then hex-edit them back in (assuming they're the same data size or less) with any editor of your choice (I like XVI32).</span>",
                    "time": null
                },
                {
                    "user": "John T",
                    "text": "<span class=\"comment-copy\">Ok, will have a look at XVI32, I'd not heard of that. Thanks for all your help. I'm just reading through interface.cpp at the moment. I'm not sure if I can potentially make a 'local' version of MFME that would allow me to overwrite existing sounds. Probably way beyond my technical ability but will be an avenue I'll explore. Thanks for all the info you've provided, you've really helped me along. Cheers :)</span>",
                    "time": null
                }
            ]
        }
    ]
}