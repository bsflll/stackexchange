{
    "title": "Setting an USB Emulation and Fuzzing Platform?",
    "link": "https://reverseengineering.stackexchange.com/questions/4536/setting-an-usb-emulation-and-fuzzing-platform",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to analyze (and fuzz) a USB device and I need a bit of guidance to setup a full platform to discuss with the device.\n </p>\n <p>\n  First, I would like to know what are the most used hardware cards to emulate and perform fuzzing on USB devices. I've heard about the\n  <a href=\"http://goodfet.sourceforge.net/hardware/facedancer11/\">\n   FaceDancer11 card\n  </a>\n  with a Python API (see a few  blog posts [\n  <a href=\"http://travisgoodspeed.blogspot.fr/2012/07/emulating-usb-devices-with-python.html\">\n   1\n  </a>\n  ,\n  <a href=\"http://travisgoodspeed.blogspot.fr/2012/10/emulating-usb-dfu-to-capture-firmware.html\">\n   2\n  </a>\n  ] from\n  <a href=\"http://travisgoodspeed.blogspot.fr/\">\n   Travis Goodspeed\n  </a>\n  ). But, are they others ?\n </p>\n <p>\n  Also, if someone could come with a list of the needed hardware devices and, maybe, some existing Python libraries that are useful to have and, what development effort is needed to setup such a platform, it would be helpful.\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 2,
    "views": "1k",
    "tags": [
        "hardware",
        "fuzzing",
        "usb"
    ],
    "user": "perror",
    "time": "Jun 5, 2014 at 8:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Apart from the\n  <code>\n   FaceDancer\n  </code>\n  from Goodspeed, I have never been able to find anything similar. I personally use the\n  <code>\n   FaceDancer[11 & 21]\n  </code>\n  and now I built my own emulator (not that easy if your electronics skills are rusty). But depending on the kind of analysis you want to perform you could find different other types of hardware, or software for that matter.\n </p>\n <p>\n  For sniffing I suppose\n  <a href=\"http://openvizsla.org/\" rel=\"nofollow\">\n   <code>\n    OpenVizsla\n   </code>\n  </a>\n  is a great tool (Free & Open). Thought it is not available for sale yet, you can implement it yourself on an\n  <code>\n   FPGA\n  </code>\n  & try it. You also have the\n  <a href=\"http://www.adafruit.com/products/708\" rel=\"nofollow\">\n   Beagle\n  </a>\n  from Total Phase which is quite expensive thought.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "yaspr",
            "time": "Jun 5, 2014 at 9:47",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Page 4 of\n  <a href=\"https://www.nccgroup.com/media/190706/usb_driver_vulnerabilities_whitepaper_january_2013.pdf\" rel=\"nofollow\">\n   https://www.nccgroup.com/media/190706/usb_driver_vulnerabilities_whitepaper_january_2013.pdf\n  </a>\n  gives a good introduction to setting up a USB-fuzzing test platform.\n </p>\n <blockquote>\n  <p>\n   Testing USB drivers on host machines is not a straightforward process,\n  because you either need to emulate a USB device or proxy the traffic\n  between a device and the host. As a result of how the protocol works\n  it would be extremely difficult to convert a USB host e.g. a PC into a\n  USB device and therefore, if you are not modifying the traffic\n  en-route via some kind of hooking or proxy solution, you need to use a\n  hardware-based approach. This section details the various different\n  approaches to testing USB hosts and compares the relative merits of\n  each...\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jun 5, 2014 at 13:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}