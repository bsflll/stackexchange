{
    "title": "Linux x64 Disassembly: single movzwl operand question",
    "link": "https://reverseengineering.stackexchange.com/questions/17060/linux-x64-disassembly-single-movzwl-operand-question",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A quick question regarding a\n  <code>\n   movzwl\n  </code>\n  instruction which do not behave as I expected.\n </p>\n <p>\n  here is the disassembled code:\n </p>\n <pre><code>movzwl (%rax),%eax\n</code></pre>\n <p>\n  Before the instruction,\n  <code>\n   rax\n  </code>\n  is\n  <code>\n   0x7fffffffe410\n  </code>\n  and point to\n  <code>\n   0x5\n  </code>\n  After the instruction, I would expect\n  <code>\n   eax\n  </code>\n  to be\n  <code>\n   0x5\n  </code>\n  (which is the case), but I would not expect that the upper bits of\n  <code>\n   rax\n  </code>\n  be cleared too... However, when debugging,\n  <code>\n   rax\n  </code>\n  values\n  <code>\n   0x5\n  </code>\n  ...\n </p>\n <p>\n  I thought that\n  <code>\n   movzwl\n  </code>\n  would only clear the upper bits of\n  <code>\n   eax\n  </code>\n  , but not the\n  <code>\n   rax\n  </code>\n  ones. Could you explain?\n </p>\n <p>\n  Thank you very very much for your help!\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/hNdeC.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/hNdeC.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "David Labay",
    "time": "Dec 28, 2017 at 11:12",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n \"I thought that ..\": Did you check the official Intel documentation?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a somewhat tricky part of the x64 instruction set and is not mentioned in descriptions of individual instructions but only as a sidenote in the general introduction section. Here's a good answer on it:\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/11177137/why-do-x64-instructions-zero-the-upper-part-of-a-32-bit-register\">\n   https://stackoverflow.com/questions/11177137/why-do-x64-instructions-zero-the-upper-part-of-a-32-bit-register\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 28, 2017 at 23:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}