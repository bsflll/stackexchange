{
    "title": "Secure RE-ing a PHP script",
    "link": "https://reverseengineering.stackexchange.com/questions/310/secure-re-ing-a-php-script",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a very messy PHP script of which I need to determine the function. I can't quite understand the code, it's\n  <em>\n   really\n  </em>\n  messy. Now I thought that I perhaps could reverse engineer this script.\n </p>\n <p>\n  What I want to do is to run this script (eventually with specific parts commented) to gain a better understanding of what part of the script does what. With that information, I should be able to get a full understanding of the script.\n </p>\n <p>\n  However, I do not want to change anything in the database on the server, I do not want that the script is going to mail things, etc. Basically, the script should be totally separated from the world, but I do want to see what it\n  <em>\n   tries\n  </em>\n  to do. So, for example, when the script runs a\n  <code>\n   mail()\n  </code>\n  function, I want to see that a mail would've been sent if the script wasn't separated from the world.\n </p>\n <p>\n  I therefore need a copy of the server installation (Ubuntu Server 12.04), which isn't that hard. The hard part is that I need to have a system which\n  <em>\n   acts\n  </em>\n  like it is the outside world, but actually is a\n  <em>\n   logging system\n  </em>\n  in which I can see what's happening.\n </p>\n <p>\n  Are there any tools that can do this? If not, how should I go in building it myself?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 4,
    "views": "427",
    "tags": [
        "tools",
        "php"
    ],
    "user": null,
    "time": "Mar 27, 2013 at 13:43",
    "comments": [
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n Is the\n <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/software\">\n  software\n </a>\n tag necessary here ?\n <a href=\"http://meta.reverseengineering.stackexchange.com/q/3/189\">\n  meta.reverseengineering.stackexchange.com/q/3/189\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user187",
            "text": "<html><body><span class=\"comment-copy\">\n @AshRj I removed it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would recommend using virtual machines to test your sample.  If the sample is going to be interacting with other machines (for example, if it sends mail but the mail server is located at mail.example.com) then you will probably want to emulate a two machine setup. If everything is already configured on the machine where your sample will be running (so mail calls are made locally) then you will probably only need one virtual machine.\n </p>\n <h2>\n  Set up a Virtual Machine Host Only Network\n </h2>\n <p>\n  You can use VMWare if you have it or you can use the\n  <a href=\"http://www.virtualbox.org\" rel=\"noreferrer\">\n   VirtualBox\n  </a>\n  , which is free. If you use a host only network (\n  <a href=\"http://www.vmware.com/support/ws55/doc/ws_net_configurations_hostonly.html\" rel=\"noreferrer\">\n   VMWare\n  </a>\n  or\n  <a href=\"http://www.virtualbox.org/manual/ch06.html#network_hostonly\" rel=\"noreferrer\">\n   VirtualBox\n  </a>\n  instructions) then you can sniff the network traffic of the VMs from within your host, but the traffic will never leave your host.\n </p>\n <h2>\n  Before running the sample\n </h2>\n <p>\n  If you suspect this php script will change the state of your virtual machine (for example it will drop databases or overwrite files) then I suggest you take a snapshot. This way you can always revert any changes that are made when the script runs.\n  <a href=\"http://www.vmware.com/support/ws4/doc/preserve_snapshot_ws.html\" rel=\"noreferrer\">\n   VMWare\n  </a>\n  or\n  <a href=\"http://www.virtualbox.org/manual/ch01.html#snapshots\" rel=\"noreferrer\">\n   VirtualBox\n  </a>\n  instructions.\n </p>\n <h2>\n  Running the Sample\n </h2>\n <p>\n  Once the virtual network is built, you can run your sample while capturing traffic with a tool like\n  <a href=\"http://www.wireshark.org/\" rel=\"noreferrer\">\n   wireshark\n  </a>\n  . This will capture all the network traffic\n </p>\n <h3>\n  Getting outside feedback\n </h3>\n <p>\n  As you described it, your sample probably won't need to communicate with fake services, but if it does, here are a few applications you can look into.\n </p>\n <ul>\n  <li>\n   Windows\n   <ul>\n    <li>\n     <a href=\"http://sourceforge.net/projects/fakenet/\" rel=\"noreferrer\">\n      FakeNet\n     </a>\n     as mentioned by Mick, this is a good solution if you are running on windows XP SP3.\n    </li>\n   </ul>\n  </li>\n  <li>\n   Linux\n   <ul>\n    <li>\n     <a href=\"http://www.inetsim.org/\" rel=\"noreferrer\">\n      inetsim\n     </a>\n     - This will simulate responses for application level protocols such as HTTP, TCP or SMTP. It can also reply to DNS requests.\n    </li>\n    <li>\n     <a href=\"http://www.honeyd.org/\" rel=\"noreferrer\">\n      honeyd\n     </a>\n     - This is ligheter than inetsim but will also simulate responses for application level protocols such as HTTP, TCP or SMTP. It can also reply to DNS requests.\n    </li>\n    <li>\n     <a href=\"http://nkush.blogspot.com/2010/11/fake-arp-daemon.html\" rel=\"noreferrer\">\n      farpd\n     </a>\n     - This utility is very useful if you don't know the IP address that will be request.  This application can be used to redirect IP traffic to your virtual machine.\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You may be able to use the open-source\n  <a href=\"http://sourceforge.net/projects/fakenet/\">\n   FakeNet\n  </a>\n  to simulate a real network.\n </p>\n <p>\n  However, FakeNet is designed to be run on an\n  <strong>\n   XP SP3 system\n  </strong>\n  , so using it would require you to ensure traffic is routed from your Ubuntu system/VM to an XP sp3 system/VM.\n </p>\n <p>\n  There are likely some Linux based FakeNet alternatives out there, but I've used FakeNet before when analyzing Windows malware and it works very well.\n </p>\n <p>\n  <strong>\n   Features\n  </strong>\n </p>\n <ul>\n  <li>\n   Supports DNS, HTTP, and SSL\n  </li>\n  <li>\n   HTTP server always serves a file and tries to serve a meaningful file; if the malware request a .jpg then a properly formatted .jpg is served, etc.  The files being served are user configurable.\n  </li>\n  <li>\n   Ability to redirect all traffic to the localhost, including traffic destined for a hard-coded IP address.\n  </li>\n  <li>\n   Python extensions, including a sample extension that implements SMTP and SMTP over SSL.\n  </li>\n  <li>\n   Built in ability to create a capture file (.pcap) for packets on localhost.\n  </li>\n  <li>\n   Dummy listener that will listen for traffic on any port, auto-detect and decrypt SSL traffic and display the content to the console.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Mick",
            "time": "Mar 27, 2013 at 14:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A more general solution is to use something like\n  <a href=\"http://php.net/manual/en/book.runkit.php\">\n   runkit\n  </a>\n  , a PHP extension to intercept arbitrary function calls. Rather than trying to simulate a network (the safer option for your situation), if you instead knew the complete set of functions that you wanted to prevent from being called, you could simply\n  <code>\n   runkit_function_redefine\n  </code>\n  each to log a message instead.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Daniel W. Steinbrook",
            "time": "Mar 28, 2013 at 2:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "amccormack",
                    "text": "<span class=\"comment-copy\">The downside to this kind of approach is you have to predefine what you want to catch where you may not know beforehand.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since you already have the source file, I believe that there is a simpler and easier approach (as compared to rerouting network traffic on low levels would be to intercept the methods being called.)\n </p>\n <p>\n  Firstly, identify and replace methods in your php file (remember to make a copy!). For example, if you want to intercept\n  <code>\n   mail()\n  </code>\n  , you can find\n  <code>\n   mail(\n  </code>\n  and replace it with\n  <code>\n   shim_mail(\n  </code>\n  . You can also do so for other\n  <em>\n   interesting\n  </em>\n  methods such as\n  <code>\n   mysql_connect()\n  </code>\n  .\n </p>\n <p>\n  Once you finish, add\n  <code>\n   include 'shim.php';\n  </code>\n  at the top of your file. The \"shim\" will act as a layer between the php script and the actual method, so you can choose to log it to a text file, allow it to execute, or even point it to a replica database!\n </p>\n <p>\n  <strong>\n   shim.php\n  </strong>\n  <pre><code>$logfile = 'log.txt';\n\nfunction shim_mysql_connect($server, $username, $password, $new_link = false, $client_flags = 0)\n{\n    file_put_contents($logfile, file_get_contents($logfile) . \"\\r\nmysql_connect() to \" . $server . \" with username \" . $username . \" and password \" . $password);\n\n    // intercept the command and point it to the 'honeypot'\n    return mysql_connect('your_new_server', 'username', 'password');\n}\n\nfunction shim_mail($to, $subject, $message, $additional_headers = '', $additional_parameters = '')\n{\n    file_put_contents($logfile, file_get_contents($logfile) . \"\\r\nmail() to \" . $to . \" with subject \" . $subject . \" and message \" . $message);\n\n    // don't actually send an email\n}\n\n?>\n</code></pre>\n  <p>\n   In this shim file, you can add functions that you are interested to find out about (simply by copying the same method signature as the original file and printing relevant logs). By observing the log, you can probably find out a lot more about the php script!\n  </p>\n  <p>\n   (while I was midway composing this, I realized that Daniel W. Steinbrook has also come up with a similar method. My method has a slight advantage that it is simpler without adding new dependencies, but runkit sounds like a more\n   <em>\n    correct\n   </em>\n   way. Either way, you can simply pick one that works!)\n  </p>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "jg0",
            "time": "Mar 28, 2013 at 8:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "amccormack",
                    "text": "<span class=\"comment-copy\">The simplicity of this technique is worth noting.</span>",
                    "time": null
                },
                {
                    "user": "Michael Anderson",
                    "text": "<span class=\"comment-copy\">This technique is NOT sufficient.  <a href=\"http://www.php.net/manual/en/functions.variable-functions.php\" rel=\"nofollow noreferrer\">php.net/manual/en/functions.variable-functions.php</a></span>",
                    "time": null
                }
            ]
        }
    ]
}