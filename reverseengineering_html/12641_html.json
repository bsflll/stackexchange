{
    "title": "Extracting textures from a file (Gamecube game)",
    "link": "https://reverseengineering.stackexchange.com/questions/12641/extracting-textures-from-a-file-gamecube-game",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a gamecube videogame (called Winning Eleven) which i want to translate, but i had no success in extracting the textures out of the files which contain them.\n </p>\n <p>\n  I have tried several tools, one of them was a tool for a specific gamecube game (Mario Sunshine iirc), but it didnt work out, most likely because it uses a different, unique decompression method.\n </p>\n <p>\n  The files which contain the textures are .bin files, which i extracted from so called .txs files with the help of a zlib tool.\n </p>\n <p>\n  I would really appreciate it if someone, who is knowledgable in this matter, could take a look into this file.\n </p>\n <p>\n  Someone might recognize it or even knows already how to work this out.\n </p>\n <p>\n  I uploaded 4 of those bin files which ive extracted out of the txs file, and i also added a tool called AFS Explorer.\n </p>\n <p>\n  Download Link:\n  <a href=\"http://s000.tinyupload.com/download.php?file_id=30125217858357016099&t=3012521785835701609927187\" rel=\"nofollow noreferrer\">\n   http://s000.tinyupload.com/download.php?file_id=30125217858357016099&t=3012521785835701609927187\n  </a>\n </p>\n <p>\n  To extract the bin files i used the built-in Zlib Manager of the AFS Explorer.\n </p>\n <p>\n  How to open and explore txs files:\n </p>\n <ol>\n  <li>\n   Open the AFS Explorer\n  </li>\n  <li>\n   Go to \"View\" on the top bar and choose \"Zlib Manager\"\n  </li>\n  <li>\n   Choose \"Load sections from file\" and open the txs file.\n  </li>\n </ol>\n <p>\n  Im just mentioning this for you to see how the bin files were extracted in first place, for a better understanding.\n </p>\n <p>\n  I would appreciate it a lot if you could help me to work this out.\n </p>\n <p>\n  <strong>\n   Edit\n  </strong>\n  : \nThose are definitely no animations, just normal bitmaps with texts as content. I can even show you how they look like, these are from the PS2 Version of the same game, form the exact same file named \"form.txs\", the only difference obviously being that the PS2 Version uses a different compression method which was already discovered.\n </p>\n <ul>\n  <li>\n   <a href=\"https://i.sstatic.net/RL1tC.png\" rel=\"nofollow noreferrer\">\n    https://i.sstatic.net/RL1tC.png\n   </a>\n  </li>\n  <li>\n   <a href=\"https://i.sstatic.net/RmX43.png\" rel=\"nofollow noreferrer\">\n    https://i.sstatic.net/RmX43.png\n   </a>\n  </li>\n  <li>\n   <a href=\"https://i.sstatic.net/oEhSe.png\" rel=\"nofollow noreferrer\">\n    https://i.sstatic.net/oEhSe.png\n   </a>\n  </li>\n  <li>\n   <a href=\"https://i.sstatic.net/uUM9u.png\" rel=\"nofollow noreferrer\">\n    https://i.sstatic.net/uUM9u.png\n   </a>\n  </li>\n </ul>\n <p>\n  There are several tools which work with the PS2 files, but not a single of them with the NGC files, obviously because of the format differences.\n </p>\n <p>\n  Edit 2:\n </p>\n <p>\n  Ive uploaded a Texture Tool which works with the PS2 bin files, but obviously not with the GameCube ones. Despite searching intensively for it (also on old archived websites), i couldnt find the sourcecode of this texture tool. But i thought i still should upload it, it might help too.\nI hope tinyupload.com is ok for uploads.\n </p>\n <p>\n  Download Link:\n  <a href=\"http://s000.tinyupload.com/index.php?file_id=92363414871112387548\" rel=\"nofollow noreferrer\">\n   http://s000.tinyupload.com/index.php?file_id=92363414871112387548\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "file-format",
        "decompress"
    ],
    "user": "Lenko",
    "time": "Jun 8, 2016 at 5:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This looks .. interesting.\n </p>\n <p>\n  When i open the first and second of your files in a hex editor, one has 20240 bytes, the other has 10240 bytes (all numbers in hex). So, 2^16+220 in one case, 2^17+220 in the other case.\n </p>\n <p>\n  Both files have data that \"looks a certain way\" in their first 240 bytes, then the data starts looking differently. Example:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/nEnnb.png\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/nEnnb.png\"/>\n  </a>\n </p>\n <p>\n  To me, this smells like:\n </p>\n <p>\n  0000-003F metadata, whatever\n0040-0240 palette; probably 256d entries of 2 bytes, 565 encoding?\nrest      image data\n </p>\n <p>\n  Notice how regular the pattern looks when you set the width of the hex display. This seems to be a 20x20 (32x32 decimal) pixel bitmap. However, looking further down in the file, there seem to be other widths as well.\n </p>\n <p>\n  So no, this is not a recognizable (by me) format, but it shouldn't be too hard to decode it.\n </p>\n <p>\n  The other 2 files seem to have a different format, they're only 30 bytes larger than a power of 2, and there's not a distinct pattern change 30 bytes into the file. Not sure what to make of that, yet.\n </p>\n <p>\n  Edit:\n </p>\n <p>\n  Interpreting the image data of the AFS73DB.tmp_0.bin file as 32x128 tiles and placing them next to each other yields (some parts omitted):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/G5iUT.png\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/G5iUT.png\"/>\n  </a>\n </p>\n <p>\n  This looks to me like an animation, maybe of an explosion or something similar. The colors are probably way off, though. Does this ring any bells? Do you have a screenshot or two how this should look on the Gamecube?\n </p>\n <p>\n  Also, it seems that the lower part of the texture isn't used and thus filled with random bytes.\n </p>\n <p>\n  If you want to check out my attempt at a decoder, check\n  <a href=\"https://github.com/gbl/GamecubeTextureDisplay\">\n   https://github.com/gbl/GamecubeTextureDisplay\n  </a>\n  .\n </p>\n <p>\n  Edit2:\n </p>\n <p>\n  Having an example what the output should look like helped, a lot, and i was able to update my decoder.\n </p>\n <p>\n  Each block of 32 input bytes is stored as an 8x4 pixel block in the output, with the next block to the right of it, until the whole line length is reached, like this:\n </p>\n <pre><code>00 01 02 03 04 05 06 07     20 21 22 23 24 25 26 27   ....\n08 09 0a 0b 0c 0d 0e 0f     28 29 2a 2b 2c 2d 2e 2f \n10 11 12 13 14 15 16 17     .....\n18 19 1a 1b 1c 1d 1e 1f\n</code></pre>\n <p>\n  Each palette entry seems to be a big endian 2-byte word, with the msb unknown (alpha value?), followed by 5 bits for red, green, blue. So for example a palette entry\n  <code>\n   8CE2\n  </code>\n  translates to\n  <code>\n   1000 1100 1110 0010\n  </code>\n  , split to\n  <code>\n   1|00011|00111|00010|\n  </code>\n  , resulting (when the individual colors are filled to 8 bit) in\n  <code>\n   r=00011000=24\n  </code>\n  ,\n  <code>\n   g=00111000=56\n  </code>\n  ,\n  <code>\n   b=00010000=16\n  </code>\n  .\n </p>\n <p>\n  Using this, your files result in\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/KJw23.png\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/KJw23.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/6GEXJ.png\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/6GEXJ.png\"/>\n  </a>\n </p>\n <p>\n  which looks quite good. However, there are some red pixels in the first image that shouldn't be there, and the letters in the second one almost look like 3D letters with their shifted green/red pixels. Could this have to do with an alpha value?\n </p>\n <p>\n  Still not sure what to make of the b/w pictures.\n </p>\n <p>\n  (to be continued)\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "May 14, 2016 at 18:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Just edit the question if you have more information to share. The image files are interesting: the color files have 1 byte/pixel + 512 bytes (palette?) + 64 bytes header. The b&amp;w files have 1 nibble/pixel + 32 bytes (greyscale palette??) + 64 bytes header. So they definitely aren't compressed. Information like this helps tremendously, even though i can't make sense of the format, yet.</span>",
                    "time": null
                }
            ]
        }
    ]
}