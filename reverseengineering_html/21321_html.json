{
    "title": "Sniffing TCP packets using Wireshark",
    "link": "https://reverseengineering.stackexchange.com/questions/21321/sniffing-tcp-packets-using-wireshark",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer a decoder. The decoder contains a web server that makes sending/receiving information through the Internet possible.\nTo do so I need to sniff the packets that the decoder receives from an Android application installed on my phone, this application is what controls the decoder.\n </p>\n <p>\n  I tried using Wireshark at first, but it turned out that the packets are sent over SSL, so they are all encrypted. I then tried to sniff my TCP packets using mitmproxy, which didn't work since it doesn't sniff TCP packets, it only logs packets sent over HTTP.\n </p>\n <p>\n  After reading the answers to the following question\n  <a href=\"https://github.com/mitmproxy/mitmproxy/issues/2883\" rel=\"nofollow noreferrer\">\n   How can I capture all traffic network by mitmproxy?\n  </a>\n  . I decided to give Wireshark a second try.\n </p>\n <p>\n  However, I need the private key which is stored on the decoder. This will enable me the decrypt the SSL packets.\n </p>\n <p>\n  Is there any way I can get this private key from the decoder? would openssl solve this problem? I am on Linux, Ubuntu.\n </p>\n <p>\n  I would appreciate some help with this!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "789",
    "tags": [
        "linux",
        "decryption",
        "security",
        "sniffing",
        "wireshark"
    ],
    "user": "yosra",
    "time": "May 16, 2019 at 11:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can instead try injecting code into the process to dump the raw data before it is encrypted/after it is decrypted.\n </p>\n <p>\n  You can use Google's\n  <a href=\"https://github.com/google/ssl_logger/\" rel=\"nofollow noreferrer\">\n   <code>\n    ssl_logger\n   </code>\n  </a>\n  for that.\n </p>\n <p>\n  You need to run\n  <code>\n   python ssl_logger.py -pcap log.pcap 123\n  </code>\n  with\n  <code>\n   123\n  </code>\n  being the process ID. Add\n  <code>\n   -verbose\n  </code>\n  to see live output.\n </p>\n <p>\n  (Note that it needs Python2 and not Python3.)\n </p>\n <p>\n  Once you are done, quit with Ctrl+C and analyze the\n  <code>\n   log.pcap\n  </code>\n  file in Wireshark, it will now contain unencrypted data.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "CherryDT",
            "time": "Mar 8, 2020 at 20:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}