{
    "title": "System programming and reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/13539/system-programming-and-reverse-engineering",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Do I need to learn system programming (e.g. WinAPI and Linux API) to be really good in reverse engineering? Or should I treat it as a reference so that whenever I encounter a system call, I go learn about it?\n </p>\n <p>\n  I want to be a reverse engineer as a part of my penetration testing \"hobby\" project and therefore I need advice about this issue.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "316",
    "tags": [
        "operating-systems",
        "system-call"
    ],
    "user": "user3737182917381",
    "time": "Sep 21, 2016 at 10:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Generally a reverse engineer translates assembly code to a higher level language, for that reason it is quite a necessity to be familiar with that language (or at least a similar language), usually understanding the intrinsics of those languages and how common language constructs are translated to the lower level is very helpful.\n </p>\n <p>\n  Understanding system level APIs is required when you try to understand a programs execution (such as network interfaces, file operations, UI, e.g. read(), recv(), etc) but is not required when you're reverse engineering a contained piece of code, i.e. it doesn't read files, send/receive packets. Multiprocessing/threading might complicate things for you if you're uneducated about those, to name one example.\n </p>\n <p>\n  Another topic you should be familiar with if you're interested in reverse engineering and didn't mention is knowing assembly languages for the architectures you'll be reverse engineering (PCs are usually Intel's x86 and AMD's x86_64). There are instruction set manuals for both, which cover the assembly languages in depth and provide both a reverence manual and introduction to general approaches and concepts (such as registers, the stack, etc.).\n </p>\n <p>\n  You can obviously learn as you go, and that's a valid approach towards learning reverse engineering, for that you should really learn by examples.\n </p>\n <p>\n  you could head over to\n  <a href=\"http://crackmes.de\" rel=\"nofollow\">\n   crackmes.de\n  </a>\n  or\n  <a href=\"http://www.tuts4you.com\" rel=\"nofollow\">\n   http://www.tuts4you.com\n  </a>\n  and start on the beginner reverse-engineering binaries and read as many write-ups (solutions) as you can!\n </p>\n <p>\n  Another good novice resource is\n  <a href=\"https://tuts4you.com/download.php?list.17\" rel=\"nofollow\">\n   lena141's series of dynamic RE videos\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Sep 22, 2016 at 15:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Generally system programming is not required, but recommended...\nIt is also important to understand the application flow, the CPU architecture (stack, heap, exceptions), file format (PE, ELF).\nI suggest two good resource:\n  \n\n </p>\n <ul>\n  <li>\n   <p>\n    Crackmes.de\n   </p>\n  </li>\n  <li>\n   <p>\n    Reverse engineering for beginners -\n    <a href=\"https://beginners.re/RE4B-EN.pdf\" rel=\"nofollow\">\n     https://beginners.re/RE4B-EN.pdf\n    </a>\n    \n\n   </p>\n  </li>\n  <li>\n   tuts4you -\n   <a href=\"https://tuts4you.com/download.php?list.17\" rel=\"nofollow\">\n    https://tuts4you.com/download.php?list.17\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "grepNstepN",
            "time": "Sep 29, 2016 at 21:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You need to know the basic general principles behind system programming for each OS you're interested in - e.g. what a system call is and, say, maybe how virtual memory is managed. With time you will identify areas of system programming you are more interested in for your day to day work.\n </p>\n <p>\n  APIs - treat them as reference to look up specifics of each call.\n </p>\n <p>\n  The only way to learn reversing is to reverse a lot. Studying encyclopaedias is a sure way of procrastination :)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Vitaly Osipov",
            "time": "Sep 23, 2016 at 3:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}