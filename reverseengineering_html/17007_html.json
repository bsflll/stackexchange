{
    "title": "Using stdin when debugging with r2pipe",
    "link": "https://reverseengineering.stackexchange.com/questions/17007/using-stdin-when-debugging-with-r2pipe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was using radare2 (2.2.0) with r2pipe (0.9.5) for python3 to debug the code generated by:\n </p>\n <pre><code>#include <stdio.h>\n\nint main(){\n    char entrada[14];\n    gets(entrada);\n    puts(entrada);\n    return 0;\n}\n</code></pre>\n <p>\n  Disassembling the main function with radare2 outputs:\n </p>\n <pre><code>0x00400546      55             pushq %rbp\n0x00400547      4889e5         movq %rsp, %rbp\n0x0040054a      4883ec10       subq $0x10, %rsp\n0x0040054e      488d45f0       leaq local_10h, %rax\n0x00400552      4889c7         movq %rax, %rdi\n0x00400555      b800000000     movl $0, %eax\n0x0040055a      e8e1feffff     callq sym.imp.gets          ; char*gets(char *s)\n0x0040055f      488d45f0       leaq local_10h, %rax\n0x00400563      4889c7         movq %rax, %rdi\n0x00400566      e8c5feffff     callq sym.imp.puts          ; int puts(const char *s)\n0x0040056b      b800000000     movl $0, %eax\n0x00400570      c9             leave\n0x00400571      c3             retq\n</code></pre>\n <p>\n  However, when debugging this program with python using this script\n </p>\n <pre><code>import r2pipe as r2\nprog = r2.open(\"./a.out\")\n\nprog.cmd(\"aaa\")\nprog.cmd(\"doo\")\n\nprog.cmd(\"db 0x0040055f\") #Breakpoint after 'gets' call\n\nprog.cmd(\"dc\")\nprog.cmd(\"dc\")\n</code></pre>\n <p>\n  the execution stucks in the \"gets\" call, no matter which input I use. The same sequence of commands works fine with the radare2's CLI. I also tried using\n  <code>\n   dor stdin=input.txt\n  </code>\n  before\n  <code>\n   doo\n  </code>\n  which, despite the fact it works, it isn't convenient to write files to the disk, and for some uses, is not possible to determine the needed input before the execution.\n </p>\n <p>\n  What is the best way to use stdin with r2pipe?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "radare2"
    ],
    "user": "danielbb",
    "time": "Dec 19, 2017 at 18:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just use i.e. pseudo-terminal as file in the command. I usually create\n  <code>\n   rarun2\n  </code>\n  file\n </p>\n <pre><code>#!/usr/bin/rarun2\nstdin=/dev/pts/20\n</code></pre>\n <p>\n  And in the r2pipe script I run\n </p>\n <pre><code>r2.cmd('e dbg.profile=re2.rr2')\n</code></pre>\n <p>\n  to configure usage of this script by\n  <code>\n   r2\n  </code>\n  debug session.\n </p>\n <p>\n  Then, on one terminal you run your\n  <code>\n   r2pipe\n  </code>\n  and on the other (the one that is\n  <code>\n   /dev/pts/20\n  </code>\n  ) you type\n </p>\n <pre><code>echo \"<input>\" > /dev/pts/20\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Paweł Łukasik",
            "time": "Dec 19, 2017 at 22:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "danielbb",
                    "text": "<span class=\"comment-copy\">Didn't work for me.  After the <code>gets</code> call, the terminal used as stdin (mine was <code>/dev/pts/3</code>) becomes nearly unresponsive, and running <code>echo \"&lt;input&gt;\" &gt; /dev/pts/3</code> in both <code>/dev/pts/3</code> or any other terminal does prints the <code>&lt;input&gt;</code> to that <code>/dev/pts/3</code> terminal, but it isn't passed to process that is being debugged. I think i set the stdin correctly though, because prog.cmd(\"dd\") returns <code>0 0x0 r-C /dev/pts/3  1 0x0 r-P pipe:[254433]  2 0x0 r-C /dev/pts/1</code>.</span>",
                    "time": null
                },
                {
                    "user": "danielbb",
                    "text": "<span class=\"comment-copy\">I'll try again later with a  <a href=\"https://docs.python.org/2/library/os.html#os.openpty\" rel=\"nofollow noreferrer\">pty unlinked to a terminal</a>, and i'll verify if i'm passing the newline character correctly. Thanks for the response :)</span>",
                    "time": null
                },
                {
                    "user": "danielbb",
                    "text": "<span class=\"comment-copy\">I don't fully understand why, but using openpty <a href=\"https://gist.github.com/danielbbruno/197a4ba84749771aeab9cd2a11768e22#file-re-py\" rel=\"nofollow noreferrer\">worked for me</a>. Thanks again</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">@danielbb If it works then please mark this as an answer</span>",
                    "time": null
                }
            ]
        }
    ]
}