{
    "title": "How to verify that an Android Application & Library is correctly obfuscated",
    "link": "https://reverseengineering.stackexchange.com/questions/3037/how-to-verify-that-an-android-application-library-is-correctly-obfuscated",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have developed an Android Application with some data crunching inside a C library (NDK).\n </p>\n <p>\n  In order to protect the library code:\n </p>\n <ul>\n  <li>\n   I have obfuscated the code with ProGuard    and exported it in release version.\n  </li>\n  <li>\n   I have replaced the functions and variables names inside the C Library with random sequence of letters to let it unreadable.\n  </li>\n  <li>\n   I verified the library with\n   <code>\n    readelf -a\n   </code>\n   command.\n  </li>\n  <li>\n   I verify the apk with ApkTool\n  </li>\n </ul>\n <p>\n  How can I verify that it is correctly obfuscated?\n </p>\n <p>\n  Is there any way to explore and reverse the library (\n  <code>\n   .so\n  </code>\n  )?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "android",
        "libraries",
        "apk"
    ],
    "user": "trizioPucci",
    "time": "Mar 19, 2014 at 8:30",
    "comments": [
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n There's always a way to reverse it. The question is whether you make it worth people's while or not. Most likely, people won't even bother trying to steal your code, so unless it's protecting something valuable, you're good.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "trizioPucci",
            "text": "<html><body><span class=\"comment-copy\">\n I know that There's always a way to reverse it. I am looking for a way to do it to verify how hard is this reverse activities. Thank you\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n /* Joke */ And don't forget to check your \"hacker-protection-factor\"!\n <a href=\"http://reverseengineering.stackexchange.com/questions/2384/origin-of-hacker-protection-factor\" title=\"origin of hacker protection factor\">\n  reverseengineering.stackexchange.com/questions/2384/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not sure what you mean by verify if the code has been properly obfuscated, but you could do a simple differential analysis. Compile the source without proguard and identify the important code, and then look at that same code with proguard enabled. You already use some of the tools I use when analyzing Android apps. I would recommend using\n  <a href=\"http://code.google.com/p/dex2jar/\" rel=\"nofollow\">\n   dex2jar\n  </a>\n  in combination with\n  <a href=\"http://jd.benow.ca/\" rel=\"nofollow\">\n   JD-GUI\n  </a>\n  however.\n </p>\n <p>\n  So you have your apk file. Use dex2jar to extract the contents.\n </p>\n <pre><code>sh ~/android_re/dex2jar-0.0.9.15/d2j-dex2jar.sh ~/androidAPKs/myapp.apk\n</code></pre>\n <p>\n  This will generate a jar file for you. You open this jar file with JD-GUI and identify the location of the package and class you obfuscated. If youre able to find the name of that class, your obfuscation was not successful. This information should not be readily available the way you wrote the code.\n </p>\n <p>\n  As far as your .so file is concerned. It can be reversed using IDA pro and a hex editor.\nI am actually in the middle of a research project on creating a technique to successfully add code functionality to the .so files. If my method works, I will be releasing this information publicly to the community. But right now, it requires some skill with ARM assembly. Another drawback is the fact that it is actually slightly difficult to add code since there aren't many empty locations to add useful code to in an elf shared object.\n </p>\n <p>\n  But I have been able to successfully change some logic code in .so files consequently changing the apps behavior, so if you have some critical code, I would be mindful of that.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "gandolf",
            "time": "Apr 18, 2014 at 12:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The only way to verify \"how hard\" reversing something is, is to attempt to reverse it yourself--by hand.  And that's a little tricky if you're the one who wrote it.  There's no automated tool I'm aware of that can do this.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "avgvstvs",
            "time": "Mar 19, 2014 at 3:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\"><b><i><a href=\"http://www.android-decompiler.com/\" rel=\"nofollow noreferrer\">Interactive Android Decompiler</a></i></b> claims to decompile obfuscated android apps.</span>",
                    "time": null
                }
            ]
        }
    ]
}