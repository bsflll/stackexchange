{
    "title": "How to programmatically identify binary calling convention?",
    "link": "https://reverseengineering.stackexchange.com/questions/6280/how-to-programmatically-identify-binary-calling-convention",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a problem where I'm instrumenting stripped binaries; I don't know the start of\n  <code>\n   main()\n  </code>\n  . But there's always an\n  <code>\n   init()\n  </code>\n  , and\n  <code>\n   init()\n  </code>\n  calls\n  <code>\n   libc_start_main()\n  </code>\n  , which receives a pointer to main.\n </p>\n <p>\n  If I can instrument libc with analysis code to intercept the argument, then I can retrieve that address and place another pin callback there so that I can get it's arguments. The problem is, I don't know what the calling convention is; I was thinking, if I could boil this down to a matter of the calling convention, then I do this for any function. I did notice that\n  <code>\n   gdb\n  </code>\n  knows the calling convention of\n  <code>\n   libc_start_main()\n  </code>\n  , in fact it is so good, it knows the order of the arguments as well.\n </p>\n <p>\n  I did read a short note on stackoverflow that stated that the name of the function would yield the calling convention: «\n  <a href=\"https://stackoverflow.com/questions/4162400/how-to-find-the-calling-convention-of-a-third-party-dll\">\n   How to find the calling convention of a third party dll?\n  </a>\n  »\n </p>\n <p>\n  If it's not possible to know the calling convention programmatically, what is the opinion on creating a local build of libc in order to be able to force a particular calling convention onto\n  <code>\n   __libc_start_main()\n  </code>\n  ... you see my chain of thought. Does anybody think that this is a better approach, rather than solving it in the general case ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "c++",
        "calling-conventions"
    ],
    "user": "Adam Miller",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n I am afraid that solving the general case would require to follow the whole initialization function and track the final jump to the\n <code>\n  main()\n </code>\n function. Meaning that it is probably much more efficient to have a collection of standard initialization functions than trying to solve it in the general case.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since you mention\n  <code>\n   __libc_start_main\n  </code>\n  it seems you need to worry only about Linux. In such case, the calling convention is\n  <a href=\"http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html\" rel=\"nofollow\">\n   known and fixed\n  </a>\n  . In most cases it will be\n  <a href=\"http://wiki.osdev.org/System_V_ABI\" rel=\"nofollow\">\n   SystemV ABI\n  </a>\n  or similar.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Sep 22, 2014 at 14:48",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found that (at least on Linux) it was reliable to intercept _init and to read from a constant offset from the stack pointer was pretty reliable. I ended up producing a pintool that would do just that.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Adam Miller",
            "time": "Sep 24, 2014 at 22:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Well, your question was a classical XY problem: you needed to solve a specific, narrow case but you stated it in a very generic way.</span>",
                    "time": null
                },
                {
                    "user": "Adam Miller",
                    "text": "<span class=\"comment-copy\">I agree that your response is a correct/sufficient solution to the problem posed.</span>",
                    "time": null
                }
            ]
        }
    ]
}