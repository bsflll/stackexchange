{
    "title": "Why cant we find ransomware keys?",
    "link": "https://reverseengineering.stackexchange.com/questions/23192/why-cant-we-find-ransomware-keys",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From my understanding  most ransomware has a secret key used for encryption in a server which it contacts to send over the key and use it for encryption\n </p>\n <p>\n  But I am wondering, couldn't someone easily either intercept the WinSock functions or just grab the key themselves and use it to decrypt the encrypted files?\n </p>\n <p>\n  Even if it is encrypted, it couldn't be that hard to find the place where it gets decrypted by debugging the ransomware\n </p>\n <p>\n  So why are people not doing this? Am I missing something?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "320",
    "tags": [
        "windows",
        "ransomware"
    ],
    "user": "SoLux",
    "time": "Feb 5, 2020 at 9:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You really need to read up on\n  <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" rel=\"noreferrer\">\n   public-key cryptography\n  </a>\n  , methinks.\n </p>\n <p>\n  The scheme - if properly (i.e. securely) implemented - could work somewhat like this:\n </p>\n <ol>\n  <li>\n   generate a public/private key pair\n   <em>\n    on\n   </em>\n   the infected/affected machine.\n   <strong>\n    NOTE:\n   </strong>\n   this means each key pair is\n   <em>\n    specific to the machine\n   </em>\n   and there is no single private key that could be used to decrypt everything across a number of machines\n  </li>\n  <li>\n   transfer the private key to the C&C server\n  </li>\n  <li>\n   securely delete (overwrite) the private key (assuming it was even ever on disk ... could have been in memory the whole time)\n  </li>\n  <li>\n   encrypt files\n   <em>\n    against\n   </em>\n   the public key (matching the now unavailable private key)\n  </li>\n  <li>\n   show the ransom note\n  </li>\n </ol>\n <p>\n  ... now, as a victim you don't have a private key at all.\n </p>\n <p>\n  You can vary this further, of course. So this is just\n  <em>\n   one\n  </em>\n  example of how to make sure there is no escape from paying the ransom other than having an (offline) backup in place.\n </p>\n <hr/>\n <p>\n  Now some more comments regarding what seem to be misconceptions on your part:\n </p>\n <blockquote>\n  <p>\n   From my understanding most randomware has a secret key used for\n  encryption in a server which it contacts to send over the key and use\n  it for encryption\n  </p>\n </blockquote>\n <p>\n  In\n  <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography#/media/File:Public_key_encryption.svg\" rel=\"noreferrer\">\n   asymmetric crypto\n  </a>\n  you need\n </p>\n <ul>\n  <li>\n   the\n   <em>\n    public key\n   </em>\n   :\n   <ol>\n    <li>\n     to\n     <em>\n      encrypt\n     </em>\n     data (with the owner of the matching private key being the recipient) or\n    </li>\n    <li>\n     <em>\n      validate\n     </em>\n     a signature (made by the owner of the matching private key)\n    </li>\n   </ol>\n  </li>\n  <li>\n   the\n   <em>\n    private key\n   </em>\n   :\n   <ol>\n    <li>\n     to\n     <em>\n      decrypt\n     </em>\n     data or\n    </li>\n    <li>\n     <em>\n      sign\n     </em>\n     something\n    </li>\n   </ol>\n  </li>\n </ul>\n <p>\n  Why would someone trying to extort a ransom from you give you the private key\n  <em>\n   before\n  </em>\n  payment?\n </p>\n <blockquote>\n  <p>\n   But I am wondering, couldnt someone easily either intercept the\n  winsock functions or just grab the key themselves and use it to\n  decrypt the encrypted files?\n  </p>\n </blockquote>\n <p>\n  Since this is based on the misconception above ... nope. But let's assume for a second that that \"author\" of the ransomware would want to provide a way to prove they are able to decrypt the data, they could simply demand that the victim send them\n  <em>\n   one\n  </em>\n  encrypted file and send back the decrypted file without the victim ever getting to see the private (or \"secret\") key. With this modus operandi I have immediately dismantled your idea of sniffing the private key (by\n  <em>\n   whatever\n  </em>\n  means).\n </p>\n <p>\n  Also, transport encryption (TLS) can be used to make it even harder to sniff the traffic. So good luck with your suggestion. In theory it may work, but only if the \"author\" of the ransomware is patently stupid.\n </p>\n <blockquote>\n  <p>\n   Even if it is encrypted, it couldnt be that hard to find the place\n  where it gets decrypted by debugging the ransomware\n  </p>\n </blockquote>\n <p>\n  You would only ever get the private key from the ransomware \"author\"\n  <em>\n   after payment\n  </em>\n  . So for all practical purposes they could even disclose the source code of their \"client-side\" software and you'd still have to pay to be able to decrypt your files.\n </p>\n <p>\n  The gist is: if properly implemented, modern crypto is rather secure. In this case to the disadvantage of the victims.\n </p>\n <p>\n  Your view on ransomware, and I don't mean this in any denigrating fashion, is rather na√Øve. I hope I have clarified some aspects.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "0xC0000022L",
            "time": "Feb 5, 2020 at 9:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rup",
                    "text": "<span class=\"comment-copy\">Generally you don't encrypt large volumes of data with public/private key pairs: you generate a random value to use as a key for symmetric crypto which you use to encrypt all the data, and then just encrypt the random key with the public key. So I think it's simpler if 1) bundle public key P in the ransomware 2) generate random key K on the infected machine 3) encrypt all the data with K 4) save P(K) and delete K 5) user pays the ransom with P(K) 6) ransom server decrypts P(K) to K for user to decrypt data. Then the ransomware doesn't need to phone home at all.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Rup: Agreed. Sounds like a smart solution. Communication would only be required once the ransom is placed.</span>",
                    "time": null
                }
            ]
        }
    ]
}