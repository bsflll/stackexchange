{
    "title": "identifying function prototype from dll",
    "link": "https://reverseengineering.stackexchange.com/questions/18070/identifying-function-prototype-from-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an exe file and a dll file. This exe file uses the dll to decode input file. This exe file is gui based and does not support command line execution.\n </p>\n <p>\n  So my requirement is to create a program which loads this dll and use the funciton to decode an input file so that I can use this program in some scripts.\n </p>\n <p>\n  The exe expects two inputs. Source file name and destination file name.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/PHUFk.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"exe parameters\" src=\"https://i.sstatic.net/PHUFk.png\"/>\n  </a>\n </p>\n <p>\n  When I disassembled the exe, only 1 parameter is being passed to the dll function call, which is the source file name.\n  <strong>\n   I couldn't find how the destination file name is passed to the function.\n  </strong>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SZQFY.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"dll function call in exe\" src=\"https://i.sstatic.net/SZQFY.png\"/>\n  </a>\n </p>\n <p>\n  Disassembly of dll function shows 2 exported functions.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/kf6ub.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"dll exports\" src=\"https://i.sstatic.net/kf6ub.png\"/>\n  </a>\n </p>\n <p>\n  assembly code for dll function from IDA is as follows\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/yZhLo.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"convert2\" src=\"https://i.sstatic.net/yZhLo.png\"/>\n  </a>\n </p>\n <p>\n  While calling the dll function from exe, the stack is as follows\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/PXbnp.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"stack during function call\" src=\"https://i.sstatic.net/PXbnp.png\"/>\n  </a>\n </p>\n <p>\n  From this I understood that the a pointer to the source file name is passed as the argument. The pointer points to the following memory location.\n  <a href=\"https://i.sstatic.net/W9oO2.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"pointer stack contents\" src=\"https://i.sstatic.net/W9oO2.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/M1Yqq.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"pointer memory contents\" src=\"https://i.sstatic.net/M1Yqq.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   From this much information, is it possible to identify the function prototype of the dll function.\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "823",
    "tags": [
        "ida",
        "disassembly",
        "windows",
        "dll",
        "x64dbg"
    ],
    "user": "John",
    "time": "Apr 27, 2018 at 8:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Itâ€™s hard to say for sure without full binary or all called functions but going by the debugger screens it looks like the argument is pointer to a structure with  layout similar to the following:\n </p>\n <pre><code>struct PARAMS {\n  char *inputfname;\n  int flag1;\n  char *outfname;\n  int flag2;\n};\n</code></pre>\n <p>\n  There maybe other fields not obvious from the posted info, but you could try to start with this.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 23, 2018 at 20:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John",
                    "text": "<span class=\"comment-copy\">I created the program using LoadLibrary and GetProcAddress. I passed this struct as the argument, but the program was crashing.  I used the following post as reference to create the program. <a href=\"https://msdn.microsoft.com/en-us/library/ms686944.aspx\" rel=\"nofollow noreferrer\">MSDN: Using Run-time Dynamic Linking</a>  @igor</span>",
                    "time": null
                },
                {
                    "user": "John",
                    "text": "<span class=\"comment-copy\">I can share more details of the program and the dll, if required</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">add the source of how exactly you call it</span>",
                    "time": null
                },
                {
                    "user": "John",
                    "text": "<span class=\"comment-copy\">added the source code. added the exe, dll and input files also.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">you should pass the struct by pointer. <code>struct PARAMS1*</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}