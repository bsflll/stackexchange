{
    "title": "How to make radare2 work for a large binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/16112/how-to-make-radare2-work-for-a-large-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I compiled\n  <a href=\"https://github.com/python/cpython\" rel=\"noreferrer\">\n   cpython\n  </a>\n  with debugging headers and I want to perform the following\n  <a href=\"https://reverseengineering.stackexchange.com/questions/16081/how-to-generate-the-call-graph-of-a-binary/16082#16082\">\n   analysis\n  </a>\n  using radare2.\n </p>\n <p>\n  The problem I encounter is that it takes forever (at least 27 hours) to perform the\n  <code>\n   aaa\n  </code>\n  (analysis) part.\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 1,
    "views": "6k",
    "tags": [
        "binary-analysis",
        "radare2"
    ],
    "user": "0x90",
    "time": "Nov 13, 2017 at 15:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is not a good practice to run full analysis of your binary at the startup and it also isn't encourged by radare. Running\n  <code>\n   aaa\n  </code>\n  by default is a heavy action and absolutely not recommended or needed in most of the cases.\n </p>\n <p>\n  As stated in\n  <a href=\"http://radare.today/posts/analysis-by-default/\" rel=\"noreferrer\">\n   this execllent post\n  </a>\n  from radare's blog:\n </p>\n <blockquote>\n  <p>\n   Code analysis is not a quick operation, and not even predictable or taking a linear time to be processed. This makes starting times pretty heavy, compared to just loading the headers and strings information like it’s done by default.\n   \n\n   ...\n   \n\n   We enforce users to think about their workflows in order to better understand the problem they are facing and solve it in an optimal way, saving cpu, memory and why not: cats.\n  </p>\n </blockquote>\n <p>\n  To make the analysis process more efficient you can start with configuring different analysis configuration variables in radare. These configuration variables can help you to fit the analysis process to your program and to your needs. Some of the interesting variables are:\n </p>\n <pre><code>anal.afterjmp  \nanal.depth  \nanal.eobjmp  \nanal.esil  \nanal.hasnext  \nanal.nopskip  \nanal.from\nanal.to\n</code></pre>\n <p>\n  <em>\n   See the\n   <code>\n    e??anal.\n   </code>\n   command to get more detailed descriptions for them.\n  </em>\n </p>\n <p>\n  Analysis of a program isn't just performing one action and that's it -- it is combined from different analysis for different needs.\n  \n\n  radare implements many different commands that perform different kind of analysis. Smart use of these command can help you quick the process of the analysis and analyze only the parts which you believe are the most important:\n </p>\n <ul>\n  <li>\n   Find functions by prelude instructions (\n   <code>\n    aap\n   </code>\n   )\n  </li>\n  <li>\n   Identify functions by following calls (\n   <code>\n    aac\n   </code>\n   )\n  </li>\n  <li>\n   Detect jump tables and pointers to code section (\n   <code>\n    /V\n   </code>\n   )\n  </li>\n  <li>\n   Analyze opcode absolute and relative references (\n   <code>\n    aa\\r\n   </code>\n   )\n  </li>\n  <li>\n   Find code/data/string references to a specific address (\n   <code>\n    /r\n   </code>\n   )\n  </li>\n  <li>\n   Emulate code to identify new pointer references (\n   <code>\n    aae\n   </code>\n   )\n  </li>\n  <li>\n   Use binary header information to find public functions (\n   <code>\n    aas\n   </code>\n   )\n  </li>\n  <li>\n   Assume functions are consecutive (\n   <code>\n    aat\n   </code>\n   )\n  </li>\n </ul>\n <p>\n  To sums it up, you should think and plan the analysis process that fits best to your needs:\n </p>\n <blockquote>\n  <p>\n   radare2 is not a click-and-run program, it’s a set of orthogonal tools and commands that allows you to understand, analyze, manipulate and play with a large list of binary types... Only experience and understanding will give you control on what you are doing.\n  </p>\n </blockquote>\n <p>\n  If after reading this answer and the post in radare's blog you believe its a bug and you can point at the problem, feel free to open an\n  <a href=\"https://github.com/radare/radare2/issues\" rel=\"noreferrer\">\n   issue\n  </a>\n  on github.\n </p>\n</div>\n</body></html>",
            "votes": "24",
            "user": "mrexodia",
            "time": "Aug 19, 2017 at 11:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "newlog",
                    "text": "<span class=\"comment-copy\">Given that this answer was set to correct, it would be interesting to know what analysis switches did you use to analyze that binary specifically and how much time it took.</span>",
                    "time": null
                }
            ]
        }
    ]
}