{
    "title": "Extract a global variable [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/4716/extract-a-global-variable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has an answer here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/4710/extracting-a-variable-from-an-executable\">\n      Extracting a variable from an executable\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (1 answer)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2014-06-30 18:13:02Z\">\n      10 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm trying to extact a global variable from an executable. Basically, I'm tryin to reverse an executable that put some python bytecode in a global variable and I'd like to extract it. I found out that the data is in the .data of the PE File, but I can't find a way to get it in all the data segments.\nAny ideas?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "709",
    "tags": [
        "python",
        "executable"
    ],
    "user": "Maxence Henneron",
    "time": "10 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @MaxenceHenneron: if it's a variable that can be found in the\n <code>\n  .data\n </code>\n section that sounds to me like it's an initialized variable. What more than the part in the\n <code>\n  .data\n </code>\n section do you need then?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since you say you are trying to reverse an executable which stores some python bytecode in a variable, it means probably the executable\n  <a href=\"https://docs.python.org/2/extending/embedding.html\" rel=\"nofollow\">\n   <em>\n    embeds python\n   </em>\n  </a>\n  . If the code is likely to be executed at some point of time, you can use a debugger.\n </p>\n <p>\n  Set a breakpoint on\n  <strong>\n   <a href=\"https://docs.python.org/2/c-api/veryhigh.html?highlight=pyeval_evalframeex#PyEval_EvalFrameEx\" rel=\"nofollow\">\n    PyEval_EvalFrameEx\n   </a>\n  </strong>\n  .\n </p>\n <p>\n  It has a prototype of\n  <code>\n   PyObject* PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)\n  </code>\n </p>\n <p>\n  The first parameter\n  <code>\n   PyFrameObject\n  </code>\n  has the following structure.\n </p>\n <pre><code>typedef struct _frame {\n    PyObject_VAR_HEAD\n    struct _frame *f_back;  /* previous frame, or NULL */\n    PyCodeObject *f_code;   /* code segment */\n    PyObject *f_builtins;   /* builtin symbol table (PyDictObject) */\n    PyObject *f_globals;    /* global symbol table (PyDictObject) */\n    PyObject *f_locals;     /* local symbol table (any mapping) */\n    PyObject **f_valuestack;    /* points after the last local */\n    PyObject **f_stacktop;\n    PyObject *f_trace;      /* Trace function */\n    PyObject *f_exc_type, *f_exc_value, *f_exc_traceback;\n    PyThreadState *f_tstate;\n    int f_lasti;        /* Last instruction if called */\n    int f_lineno;       /* Current line number */\n    int f_iblock;       /* index in f_blockstack */\n    PyTryBlock f_blockstack[CO_MAXBLOCKS]; /* for try and loop blocks */\n    PyObject *f_localsplus[1];  /* locals+stack, dynamically sized */\n} PyFrameObject;\n</code></pre>\n <p>\n  The\n  <em>\n   third\n  </em>\n  member of\n  <code>\n   PyFrameObject\n  </code>\n  is\n  <code>\n   PyCodeObject\n  </code>\n  .\n </p>\n <p>\n  <code>\n   PyCodeObject\n  </code>\n  has the following structure.\n </p>\n <pre><code>typedef struct {\n    PyObject_HEAD\n    int co_argcount;        /* #arguments, except *args */\n    int co_nlocals;     /* #local variables */\n    int co_stacksize;       /* #entries needed for evaluation stack */\n    int co_flags;       /* CO_..., see below */\n    PyObject *co_code;      /* instruction opcodes */\n    PyObject *co_consts;    /* list (constants used) */\n    PyObject *co_names;     /* list of strings (names used) */\n    PyObject *co_varnames;  /* tuple of strings (local variable names) */\n    PyObject *co_freevars;  /* tuple of strings (free variable names) */\n    PyObject *co_cellvars;      /* tuple of strings (cell variable names) */\n    /* The rest doesn't count for hash/cmp */\n    PyObject *co_filename;  /* string (where it was loaded from) */\n    PyObject *co_name;      /* string (name, for reference) */\n    int co_firstlineno;     /* first source line number */\n    PyObject *co_lnotab;    /* string (encoding addr<->lineno mapping) */\n    void *co_zombieframe;     /* for optimization only (see frameobject.c) */\n} PyCodeObject;\n</code></pre>\n <p>\n  The\n  <em>\n   sixth\n  </em>\n  member of the above structure is\n  <code>\n   co_code\n  </code>\n  . It is basically a\n  <code>\n   PyStringObject\n  </code>\n  . \nIt has the following structure.\n </p>\n <pre><code>typedef struct {\n    PyObject_VAR_HEAD\n    long ob_shash;\n    int ob_sstate;\n    char ob_sval[1];\n} PyStringObject;\n</code></pre>\n <p>\n  The\n  <code>\n   ob_sval\n  </code>\n  contains the bytecode you are after.\nSo once you hit\n  <code>\n   PyEval_EvalFrameEx\n  </code>\n  follow the structures in memory to get the bytecode.\n </p>\n <p>\n  Another thing to note is you need to know the layout of\n  <code>\n   PyObject_VAR_HEAD\n  </code>\n  and\n  <code>\n   PyObject_HEAD\n  </code>\n  to get the actual offsets. Refer to the\n  <a href=\"http://hg.python.org/cpython/file/3124790c07b4\" rel=\"nofollow\">\n   python source\n  </a>\n  for more information.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xec",
            "time": "Jun 27, 2014 at 7:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}