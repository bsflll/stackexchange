{
    "title": "What does byte_407030[ecx] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/13729/what-does-byte-407030ecx-mean",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I came across the following instruction in IDA:\n </p>\n <pre><code>movsx edx, byte_407030[ecx]\n</code></pre>\n <p>\n  <code>\n   byte_407030\n  </code>\n  is\n  <code>\n   25h\n  </code>\n  . Is it trying to access some memory location? I know that\n  <code>\n   ecx\n  </code>\n  is storing a counter in a for loop.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "282",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "mrQWERTY",
    "time": "Oct 16, 2016 at 4:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Lets go step by step:\n </p>\n <pre><code>movsx\n</code></pre>\n <p>\n  This is a specialized move instruction it moves a value from source of a smaller size (in your case, a byte) to a destination of a potentially larger size (in your case, a double word), preserving the sign bit by an operation called\n  <a href=\"https://en.wikipedia.org/wiki/Sign_extension\" rel=\"nofollow\">\n   sign-extending\n  </a>\n  .\n </p>\n <p>\n  This means that if the byte was a negative integer then the destination will also be a negative integer. This is a bit more complex then simply copying the last bit because of the way negative integers are encoded (which is called\n  <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" rel=\"nofollow\">\n   two's complement\n  </a>\n  ).\n </p>\n <pre><code>edx \n</code></pre>\n <p>\n  The first operand of a\n  <code>\n   mov\n  </code>\n  instruction is the destination target. In this case it's the double-word register\n  <code>\n   edx\n  </code>\n  . This is were the data is moved to.\n </p>\n <pre><code>byte_407030[ecx]\n</code></pre>\n <p>\n  The second operand is the source operand. This is where the data is moved from. Please note that although the instruction is\n  <code>\n   mov\n  </code>\n  , the value also remains in the source location. Calling it \"copy\" might have been a better idea ;).\n </p>\n <p>\n  IDA's syntax here is similar to C's syntax. This will dereference the memory region at address\n  <code>\n   0x407030\n  </code>\n  plus the value of\n  <code>\n   ecx\n  </code>\n  and fetch a byte from there. In case\n  <code>\n   ecx\n  </code>\n  is\n  <code>\n   11h\n  </code>\n  , the final address would be\n  <code>\n   0x407041\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   summary\n  </strong>\n  \n\n  This instruction will take the byte value at memory address of\n  <code>\n   0x407030+ecx\n  </code>\n  , sign extend it to dword (4 bytes in most architectures) and assign that final value into register\n  <code>\n   edx\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Oct 16, 2016 at 4:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}