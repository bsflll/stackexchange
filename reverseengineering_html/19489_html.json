{
    "title": ".NET assembly IDA PRO, using LDSTR IL op code, how to patch a string?",
    "link": "https://reverseengineering.stackexchange.com/questions/19489/net-assembly-ida-pro-using-ldstr-il-op-code-how-to-patch-a-string",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to patch a string. So right now I'm trying to replace instruction\n  <code>\n   LDSTR\n  </code>\n  with\n  <code>\n   LDSTR\n  </code>\n  \"mystring\"; however, I have been unsuccessful. After assembling the\n  <code>\n   LDSTR\n  </code>\n  op code, I don't quite understand what comes after: a pointer address to the string or raw string bytes?\n </p>\n <pre><code>ldstr \"Test\";\nstloc.0\nldloc.0\nret\n</code></pre>\n <p>\n  This is what I'm trying to achieve. Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "hexrays",
        ".net"
    ],
    "user": "Alex Maher",
    "time": "Oct 2, 2018 at 1:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The opcode contains a number that is called\n  <code>\n   mdToken\n  </code>\n  . User-defined strings are located in Storage Stream that is called\n  <code>\n   #US\n  </code>\n  . You can find those while inspecting the file sections.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/wdNQx.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/wdNQx.png\"/>\n  </a>\n </p>\n <p>\n  There's a great series of article on .NET assembly by Simon Coop -\n  <a href=\"https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/\" rel=\"nofollow noreferrer\">\n   Anatomy of a .NET Assembly\n  </a>\n  that should explain more of the internals of .NET assemblies.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Sep 30, 2018 at 21:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to add a couple of comments on top of Pawel's great an concise answer.\n </p>\n <p>\n  First of all, IDA doesn't easily enable editing executables, so you should find another, more appropriate tool, for that task. In the case of replacing constant strings any decent hex editor will do the trick.\n </p>\n <p>\n  Secondly, please let me go over the different instructions, one by one:\n </p>\n <blockquote>\n  <p>\n   ldstr \"Test\"\n  </p>\n </blockquote>\n <p>\n  The\n  <code>\n   ldstr\n  </code>\n  instruction loads the string object in the first argument to the top of the stack.\n </p>\n <blockquote>\n  <p>\n   stloc.0\n  </p>\n </blockquote>\n <p>\n  The\n  <code>\n   stloc\n  </code>\n  instruction pops a single item from the stack and stores it in a register, according to it's index. In this case, register index 0.\n </p>\n <blockquote>\n  <p>\n   ldloc.0\n  </p>\n </blockquote>\n <p>\n  Similarly,\n  <code>\n   ldloc\n  </code>\n  stores a value from a register according to supplied index at the top of the stack. In this case, again, register indexed 0 is used.\n </p>\n <blockquote>\n  <p>\n   ret\n  </p>\n </blockquote>\n <p>\n  This instruction returns to the current function's caller.\n </p>\n <p>\n  As a stack based instruction-set (opposed to a register-based instruction set, for which examples are x86, arm, powerpc, etc...) the stack is frequently used of passing data around in instances where a register-based instruction set will enable register use. This is not to say you\n  <em>\n   cannot\n  </em>\n  use registers or stack for most functionalities in one or the other, but just that the instruction set makes it more native and natural to use either the stack of the registers.\n </p>\n <p>\n  The last paragraph is important for us to understand the nature of the provided function, which simply\n  <em>\n   returns\n  </em>\n  the provided string. As a stack-based instruction set, CIL's calling convention dictates that variables are returned on the stack (and not a designated register). Interestingly, this therefore implies the\n  <code>\n   stloc.0\n  </code>\n  and\n  <code>\n   ldloc.0\n  </code>\n  can simply be optimized out.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Sep 30, 2018 at 23:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}