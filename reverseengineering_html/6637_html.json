{
    "title": "windbg: How to determine the opcode for an assembly language instruction or set of instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/6637/windbg-how-to-determine-the-opcode-for-an-assembly-language-instruction-or-set",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on an assignment to perform an exploit using a rop chain.\nWhile I understand the basics behind rop, I don't know how to convert instructions like\n </p>\n <pre><code>xchg eax, esp; retn;\n</code></pre>\n <p>\n  to their opcodes.\n </p>\n <p>\n  I tried using:\n </p>\n <pre><code>0:005> a\ninput> xchg eax,esp\n</code></pre>\n <p>\n  but the address given just points to a totally different kind of instruction in my program.\nI believe it was an add command.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "6k",
    "tags": [
        "windbg"
    ],
    "user": "dnraikes",
    "time": "Feb 4, 2015 at 6:16",
    "comments": [
        {
            "user": "dnraikes",
            "text": "<html><body><span class=\"comment-copy\">\n @yyVob, thanks this really helped clear up the use of windbg to find the opcodes I need.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://www.woodmann.com/collaborative/tools/index.php/RTA\" rel=\"nofollow noreferrer\">\n   RTA\n  </a>\n  is an easy to use tool that allows you to enter either opcodes or mnemonics and will convert them from one to the other.\n </p>\n <p>\n  In the example below, I entered\n  <code>\n   XCHG EAX,ESP\n  </code>\n  and\n  <code>\n   RETN\n  </code>\n  on the right, and RTA produced\n  <code>\n   94\n  </code>\n  and\n  <code>\n   C3\n  </code>\n  on the left:\n </p>\n <p>\n  <img alt=\"RTA\" src=\"https://i.sstatic.net/FLGrT.png\"/>\n </p>\n <p>\n  If, on the other hand, you really want to use WinDbg, then you need to do the following:\n </p>\n <ol>\n  <li>\n   Load a target into WinDbg\n  </li>\n  <li>\n   Type\n   <kbd>\n    a\n   </kbd>\n   ,\n   <kbd>\n    Enter\n   </kbd>\n   to enter Input mode\n  </li>\n  <li>\n   Type your mnemonics (for example,\n   <code>\n    xchg eax,esp\n   </code>\n   ),\n   <kbd>\n    Enter\n   </kbd>\n  </li>\n  <li>\n   Press\n   <kbd>\n    Enter\n   </kbd>\n   again to escape Input mode\n  </li>\n  <li>\n   Type\n   <kbd>\n    u\n   </kbd>\n   ,\n   <kbd>\n    Enter\n   </kbd>\n   to show the disassembly of what you just assembled\n  </li>\n </ol>\n <p>\n  â€‹See below for an example:\n </p>\n <pre><code>0:000> a\n778e05a6 xchg eax,esp\nxchg eax,esp\n778e05a7 \n\n0:000> u\nntdll!LdrVerifyImageMatchesChecksum+0x633:\n778e05a6 94              xchg    eax,esp\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Nov 15, 2014 at 16:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">Please note that using the <code>a</code> command with no parameters will start overwriting bytes at the instruction pointer. To create scratch space specifically for assembling instructions, use <code>.dvalloc</code>, then call <code>a</code> with the address of the allocated memory.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use assembler. \nOr online assembler such as\n  <a href=\"https://defuse.ca/online-x86-assembler.htm\" rel=\"nofollow\">\n   this\n  </a>\n  Or you can use Ida's Edit-->Patch program-->Assemble submenu if you use Ida.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "w s",
            "time": "Nov 15, 2014 at 9:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}