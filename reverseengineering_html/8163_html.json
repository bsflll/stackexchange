{
    "title": "In a Mach-O executable, how can I find which function a stub targets?",
    "link": "https://reverseengineering.stackexchange.com/questions/8163/in-a-mach-o-executable-how-can-i-find-which-function-a-stub-targets",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Before exposing my problem, here's my understanding of the whole thing, so that you may correct me if I'm saying something wrong.\n </p>\n <p>\n  In a Mach-O file (at least on x86), the\n  <code>\n   __TEXT.__stubs\n  </code>\n  section typically has stubs in it that all consist of a single indirect jump, like this:\n </p>\n <pre><code>; __TEXT.__stubs\n; symbol stub for unlink:\n0x100000f46:  jmpq   *0xc4(%rip)\n; symbol stub for puts:\n0x100000f4c:  jmpq   *0xc6(%rip)\n</code></pre>\n <p>\n  These point to a location inside the\n  <code>\n   __DATA.__nl_symbol_ptr\n  </code>\n  section. The pointer initially goes to a stub helper in the\n  <code>\n   __TEXT.__stub_helper\n  </code>\n  section:\n </p>\n <pre><code>; __TEXT.__stub_helper\n; stub helper for unlink\n0x100000f64:  pushq  $0x0\n0x100000f69:  jmp    0x100000f54\n; stub helper for puts\n0x100000f6e:  pushq  $0xe\n0x100000f73:  jmp    0x100000f54\n</code></pre>\n <p>\n  The stub helper calls\n  <code>\n   dyld_stub_binder\n  </code>\n  , which uses the pushed argument to figure out which stub it is and which function it needs to look up, then replaces the value in\n  <code>\n   __DATA.__nl_symbol_ptr\n  </code>\n  with the resolved address, and then hand over control to the function that was found (which then returns to the calling code normally).\n </p>\n <p>\n  To assist debugging, debuggers find stubs and pretend that they have symbols for them. In this example program, whenever lldb sees\n  <code>\n   call 0x100000f58\n  </code>\n  , it determines that the stub should point to\n  <code>\n   unlink\n  </code>\n  , and says\n  <code>\n   call 0x100000f58 ; symbol stub for: unlink\n  </code>\n  in the disassembly.\n </p>\n <p>\n  However, lldb does not use the pushed value: it appears to\n  <a href=\"https://github.com/llvm-mirror/lldb/blob/5b0324a42cae28a07bc3683c6757dc1533b8fa0d/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp#L4375\" rel=\"noreferrer\">\n   rely on the static linker placing undefined symbols and stubs in the same order\n  </a>\n  , or some variant of that. Just like that, it looks more like a heuristic than a precise way to figure out which stub goes where, unless there's something else preventing you from tampering.\n </p>\n <p>\n  So how do I reliably find which function is called by a stub? In the stub helpers, what do the constants in\n  <code>\n   pushq $constant\n  </code>\n  mean?\n </p>\n</div>\n</body></html>",
    "votes": "16",
    "answers": 2,
    "views": "6k",
    "tags": [
        "osx",
        "symbols",
        "mach-o"
    ],
    "user": "zneak",
    "time": "Feb 5, 2015 at 16:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I\n  <a href=\"https://github.com/zneak/fcd/blob/b29b4ac/scripts/macho.py#L307\" rel=\"noreferrer\">\n   wrote\n  </a>\n  a Python script that parses entry points and imports from a Mach-O executable for one of my projects. The trick is to parse the\n  <code>\n   LC_DYLD\n  </code>\n  or\n  <code>\n   LC_DYLD_ONLY\n  </code>\n  loader commands. These two commands encode three import tables: bound symbols, weak symbols, and lazy symbols.\n </p>\n <pre><code>struct dyld_info_command {\n  uint32_t cmd;\n  uint32_t cmdsize;\n  uint32_t rebase_off;\n  uint32_t rebase_size;\n  uint32_t bind_off;\n  uint32_t bind_size;\n  uint32_t weak_bind_off;\n  uint32_t weak_bind_size;\n  uint32_t lazy_bind_off;\n  uint32_t lazy_bind_size;\n  uint32_t export_off;\n  uint32_t export_size;\n};\n</code></pre>\n <p>\n  The interesting fields are\n  <code>\n   bind_off\n  </code>\n  ,\n  <code>\n   bind_size\n  </code>\n  ,\n  <code>\n   weak_bind_off\n  </code>\n  ,\n  <code>\n   weak_bind_size\n  </code>\n  ,\n  <code>\n   lazy_bind_off\n  </code>\n  and\n  <code>\n   lazy_bind_size\n  </code>\n  . Each pair encodes the offset and size of a block of data, inside the executable file, that contains the import table opcodes.\n </p>\n <p>\n  Each of these tables can be seen as having four (useful) columns: the segment, segment offset, library name and symbol name. Together, the segment and segment offset indicate the address where the symbol's actual address will be written to (so for instance, if you have\n  <code>\n   __TEXT\n  </code>\n  and 0x40, this conceptually means that\n  <code>\n   *(__TEXT+0x40) == resolvedSymbolAddress\n  </code>\n  ).\n </p>\n <p>\n  The table is encoded as a stream of opcodes for compression purposes. The opcodes control a state machine that contains state for a would-be symbol, has operations to manipulate that state, and operations to \"bind\" a symbol (take all that state and make it a part of the symbol table). For instance, you could see:\n </p>\n <ul>\n  <li>\n   set segment to __TEXT\n  </li>\n  <li>\n   set offset to 0x40\n  </li>\n  <li>\n   set library to libSystem.dylib\n  </li>\n  <li>\n   set symbol name to \"printf\"\n  </li>\n  <li>\n   bind symbol\n  </li>\n  <li>\n   set offset to 0x48\n  </li>\n  <li>\n   set symbol name to \"scanf\"\n  </li>\n  <li>\n   bind symbol\n  </li>\n </ul>\n <p>\n  At the end of this sequence, you get two symbols: printf and scanf, whose addresses are located at __TEXT+0x40 and __TEXT+0x48 respectively, from libSystem.dylib. This means that if you see an instruction like\n  <code>\n   jmp [__TEXT+0x48]\n  </code>\n  (an indirect jump to the address contained at\n  <code>\n   __TEXT+0x48\n  </code>\n  ), you know that you're going to\n  <code>\n   scanf\n  </code>\n  . This is how you can tell the destination of stubs.\n </p>\n <p>\n  Each opcode is at least 1 byte, separated as 0xCI (where C is the command name, and I is an immediate value, both 4 bits). When the command needs a larger operand (or more operands), they are encoded in\n  <a href=\"https://en.wikipedia.org/wiki/LEB128\" rel=\"noreferrer\">\n   ULEB-128\n  </a>\n  format (except for\n  <code>\n   BIND_OPCODE_SET_ADDEND_SLEB\n  </code>\n  , which uses signed LEB, but we don't really care about it for the purpose of finding imports).\n </p>\n <pre><code>def readUleb(data, offset):\n    byte = ord(data[offset])\n    offset += 1\n\n    result = byte & 0x7f\n    shift = 7\n    while byte & 0x80:\n        byte = ord(data[offset])\n        result |= (byte & 0x7f) << shift\n        shift += 7\n        offset += 1\n    return (result, offset)\n</code></pre>\n <p>\n  Libraries aren't actually identified by their names in the command stream. Rather, libraries are identified by their\n  <strong>\n   one-based\n  </strong>\n  \"library ordinal\", which is just the index of the library within all the\n  <code>\n   LC_LOAD_DYLIB\n  </code>\n  ,\n  <code>\n   LC_LOAD_WEAK_DYLIB\n  </code>\n  ,\n  <code>\n   LC_REEXPORT_DYLIB\n  </code>\n  and\n  <code>\n   LC_LOAD_UPWARD_DYLIB\n  </code>\n  loader commands. For instance, if an executable has a\n  <code>\n   LC_LOAD_DYLIB\n  </code>\n  command for libSystem and then one for libFoobar, libSystem has ordinal 1 and libFoobar has ordinal 2.\n </p>\n <p>\n  There are three special values: ordinal -2 means that the symbol is looked up in the flat namespace (first library with a symbol with that name wins); ordinal -1 looks for a symbol in the main executable, whatever it is; and ordinal 0 looks for a symbol within this file. As we've said above, ordinal 1 and above refer to libraries.\n </p>\n <p>\n  Symbol names are encoded within the command blob as null-terminated strings.\n </p>\n <p>\n  Each opcode is easily described in code, so I'll spare us the description of each.\n </p>\n <pre><code>BIND_OPCODE_DONE = 0\nBIND_OPCODE_SET_DYLIB_ORDINAL_IMM = 1\nBIND_OPCODE_SET_DYLIB_ORDINAL_ULEB = 2\nBIND_OPCODE_SET_DYLIB_SPECIAL_IMM = 3\nBIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM = 4\nBIND_OPCODE_SET_TYPE_IMM = 5\nBIND_OPCODE_SET_ADDEND_SLEB = 6\nBIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 7\nBIND_OPCODE_ADD_ADDR_ULEB = 8\nBIND_OPCODE_DO_BIND = 9\nBIND_OPCODE_DO_BIND_ADD_ADDR_ULEB = 10\nBIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED = 11\nBIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB = 12\n\ndef parseImports(self, offset, size):\n    pointerWidth = self.bitness / 8\n    slice = self.data[offset:offset+size]\n    index = 0\n\n    name = \"\"\n    segment = 0\n    segmentOffset = 0\n    libOrdinal = 0\n\n    stubs = []\n    def addStub():\n        stubs.append((segment, segmentOffset, libOrdinal, name))\n\n    while index != len(slice):\n        byte = ord(slice[index])\n        opcode = byte >> 4\n        immediate = byte & 0xf\n        index += 1\n\n        if opcode == BIND_OPCODE_DONE:\n            pass\n        elif opcode == BIND_OPCODE_SET_DYLIB_ORDINAL_IMM:\n            libOrdinal = immediate\n        elif opcode == BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB:\n            libOrdinal, index = self.__readUleb(slice, index)\n        elif opcode == BIND_OPCODE_SET_DYLIB_SPECIAL_IMM:\n            libOrdinal = -immediate\n        elif opcode == BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM:\n            nameEnd = slice.find(\"\\0\", index)\n            name = slice[index:nameEnd]\n            index = nameEnd\n        elif opcode == BIND_OPCODE_SET_TYPE_IMM:\n            pass\n        elif opcode == BIND_OPCODE_SET_ADDEND_SLEB:\n            _, index = self.__readUleb(slice, index)\n        elif opcode == BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:\n            segment = immediate\n            segmentOffset, index = self.__readUleb(slice, index)\n        elif opcode == BIND_OPCODE_ADD_ADDR_ULEB:\n            addend, index = self.__readUleb(slice, index)\n            segmentOffset += addend\n        elif opcode == BIND_OPCODE_DO_BIND:\n            addStub()\n        elif opcode == BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB:\n            addStub()\n            addend, index = self.__readUleb(slice, index)\n            segmentOffset += addend\n        elif opcode == BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED:\n            addStub()\n            segmentOffset += immediate * pointerWidth\n        elif opcode == BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB:\n            times, index = self.__readUleb(slice, index)\n            skip, index = self.__readUleb(slice, index)\n            for i in range(times):\n                addStub()\n                segmentOffset += pointerWidth + skip\n        else:\n            sys.stderr.write(\"warning: unknown bind opcode %u, immediate %u\n\" % (opcode, immediate))\n</code></pre>\n</div>\n</body></html>",
            "votes": "7",
            "user": "j04n",
            "time": "Oct 9, 2017 at 19:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">One addition: the list of libraries includes not only <code>LC_LOAD_DYLIB</code> commands but also <code>LC_LOAD_WEAK_DYLIB</code>, <code>LC_REEXPORT_DYLIB</code>, <code>LC_LAZY_LOAD_DYLIB</code> and <code>LC_LOAD_UPWARD_DYLIB</code> (see dyld sources)</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Also, just now found this page: <a href=\"http://newosxbook.com/articles/DYLD.html\" rel=\"nofollow noreferrer\">newosxbook.com/articles/DYLD.html</a></span>",
                    "time": null
                },
                {
                    "user": "zneak",
                    "text": "<span class=\"comment-copy\">I'll look into it later and update the script/answer. Thanks!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the numeric argument is is an offset into the \"compressed dyld info\" stream of bytecodes. see\n  <a href=\"https://stackoverflow.com/a/8836580\">\n   https://stackoverflow.com/a/8836580\n  </a>\n  (iOS/arm but still applies)\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "zneak",
                    "text": "<span class=\"comment-copy\">As this question has been viewed over 500 times, here's an <a href=\"https://github.com/zneak/fcd/blob/b29b4ac/scripts/macho.py\" rel=\"nofollow noreferrer\">implementation of a bytecode decoder</a> that I wrote not long ago.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@zneak: nice, maybe you can write up a more detailed explanation as an answer so that other people know the details? I don't mind if you un-accept my answer for that.</span>",
                    "time": null
                }
            ]
        }
    ]
}