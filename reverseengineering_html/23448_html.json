{
    "title": "Reverse Engineering Javascript - Out of Memory",
    "link": "https://reverseengineering.stackexchange.com/questions/23448/reverse-engineering-javascript-out-of-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found this javascript file on one of those online movie streaming services and was interested in finding out what it does.  However, after trying many deobfuscators I am still stuck.  A major problem preventing me from making progress was that when I tried staying on the page too long, Chromium (Firefox had the same problem) would run out of memory and freeze.  Running it in node resulted in the same thing (\"FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\").  This also prevented me from trying to add console.log statements because it would simply freeze.  I am not experienced enough to see what is actually causing these massive allocations to occur.  Any advice as to where I should look next?\n </p>\n <p>\n  Original File URL:\n  <a href=\"https://videospider.in/js/play2.min.js\" rel=\"nofollow noreferrer\">\n   https://videospider.in/js/play2.min.js\n  </a>\n </p>\n <p>\n  Archived:\n  <a href=\"https://pastebin.com/ycw6MSLQ\" rel=\"nofollow noreferrer\">\n   https://pastebin.com/ycw6MSLQ\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "590",
    "tags": [
        "memory",
        "deobfuscation",
        "javascript"
    ],
    "user": "Christopher",
    "time": "Mar 15, 2020 at 22:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Based on the \"deobfuscated\" output posted by @Supreme, the code appears to be encoding very basic information about the\n  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event\" rel=\"nofollow noreferrer\">\n   click event\n  </a>\n  when the user clicks on a video's play button. Here it is tidied up, with some comments:\n </p>\n <pre><code>var alreadyClicked = false;\n\n$(document).on(\"click\", \"#play\", function(e) {\n    e.preventDefault();\n\n    if (!alreadyClicked) {\n        $(\".loading\").text(\"Loading video... Please wait.\");\n\n        // Generate random numbers between 10-20\n        var idLength1 = Math.floor(Math.random() * (20 - 10 + 1)) + 10;\n        var idLength2 = Math.floor(Math.random() * (20 - 10 + 1)) + 10;\n\n        // Generate random numbers between 0-9\n        var randInt1  = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\n        var randInt2  = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\n\n        // Create \"ID\" with random IDs + the event name and mouse X/Y coordinates\n        var encodedId = randInt1 + \"\" + idLength1 + \"\" + generateId(idLength1) + \"\" + btoa(String(e.originalEvent) + \"*\" + e.pageX + \"*\" + e.pageY) + \"\" + generateId(idLength2) + \"\" + idLength2 + \"\" + randInt2;\n\n        // Prevent submitting the form again if #play is clicked\n        alreadyClicked = true;\n\n        $(\"#playID\").val(encodedId);\n        $(\"#playForm\").submit();\n    }\n})\n\nfunction generateId(length) {\n    var id = \"\";\n    var idCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < length; i++) {\n        id = id + idCharacters.charAt(Math.floor(Math.random() * idCharacters.length));\n    }\n\n    return id;\n}\n</code></pre>\n <p>\n  The\n  <code>\n   encodedId\n  </code>\n  variable would look something like:\n </p>\n <pre><code>\"618iNXtzD0htGiVKXSV9EW29iamVjdCBNb3VzZUV2ZW50XSo4ODYqNzY56i9zvoRJQ16pPj143\"\n</code></pre>\n <p>\n  Reversing this is fairly trivial as we can see how it's constructed in the above code.\n </p>\n <ol>\n  <li>\n   Remove the first and last characters as they will always be a single character. The string is now\n   <code>\n    18iNXtzD0htGiVKXSV9EW29iamVjdCBNb3VzZUV2ZW50XSo4ODYqNzY56i9zvoRJQ16pPj14\n   </code>\n   .\n  </li>\n  <li>\n   Read the first two characters as a number and remove that amount of characters from the beginning. In this case,\n   <code>\n    18\n   </code>\n   , becoming\n   <code>\n    W29iamVjdCBNb3VzZUV2ZW50XSo4ODYqNzY56i9zvoRJQ16pPj14\n   </code>\n   .\n  </li>\n  <li>\n   Do the same again for the last two characters,\n   <code>\n    14\n   </code>\n   -\n   <code>\n    W29iamVjdCBNb3VzZUV2ZW50XSo4ODYqNzY5\n   </code>\n   .\n  </li>\n  <li>\n   Decode from Base64:\n   <code>\n    atob(\"W29iamVjdCBNb3VzZUV2ZW50XSo4ODYqNzY5\") == \"[object MouseEvent]*886*769\"\n   </code>\n   .\n  </li>\n  <li>\n   We can now see the\n   <code>\n    #play\n   </code>\n   element was triggered by a\n   <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\" rel=\"nofollow noreferrer\">\n    MouseEvent\n   </a>\n   at X 886 / Y 769.\n  </li>\n </ol>\n <p>\n  <em>\n   Guess:\n  </em>\n  this is probably a basic method of checking for bots.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user7290573",
            "time": "May 19, 2021 at 14:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  it was obfuscated with obfuscator.io, here it is deobfuscated.\n  \n\n  <a href=\"https://pastebin.com/tdH8Di2u\" rel=\"nofollow noreferrer\">\n   https://pastebin.com/tdH8Di2u\n  </a>\n  \n\n  The function names and variables are still random though.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Supreme",
            "time": "Apr 22, 2020 at 21:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "jumpjack",
                    "text": "<span class=\"comment-copy\">this is not \"deobfuscated\", you just added carriage returns; obfuscation is \"giving random names to functions and variables and removing unneded spaces and carriage returns\".</span>",
                    "time": null
                }
            ]
        }
    ]
}