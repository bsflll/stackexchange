{
    "title": "How to insert asm code in file without overwriting in Radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/29878/how-to-insert-asm-code-in-file-without-overwriting-in-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning reverse engineering tools.\n  \n\n  I notice that when you need to patch some file (at least in visual mode) you need to overwrite instructions, i.e. when using\n  <kbd>\n   Shift\n  </kbd>\n  +\n  <kbd>\n   A\n  </kbd>\n  in visual mode or\n  <kbd>\n   I\n  </kbd>\n  in visual mode.\n </p>\n <p>\n  Is there a way to insert asm code without the need to overwrite some other?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "390",
    "tags": [
        "radare2"
    ],
    "user": "Guilherme",
    "time": "Jan 30, 2022 at 19:36",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n Even if it would work like that, the output (with pushed instruction) probably won't work as offsets would change.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Peter Teoh",
            "text": "<html><body><span class=\"comment-copy\">\n frankly answering this questions has so many dimension.   \"Pawel\"'s offset is just one of them, and \"Silent\" code cave, or \"region of NOPs\" inside the binary is another.   Answering this question will tantamount to writing a book on reverse engineering for beginner.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To accomplish this you first need to create or find a code cave and insert your code then jump back to where you were.\n </p>\n <p>\n  I'm going to put an example here. I'm not familiar with PE files, but I will do an example of ARMv7 and ELF.\n </p>\n <pre><code>0xc8  movs r0, r1\n0xca  b 0xd8\n0xcc  b nowhere\n0xd8  0000 empty bytes to 0xff\n0x100 mov r3, r4\n</code></pre>\n <p>\n  From above if I write an instruction(s) from address\n  <code>\n   0xd8\n  </code>\n  all will be executed until I branch back to\n  <code>\n   0xcc\n  </code>\n  . In ELF, you will need to edit the program headers and change the flags to executable, so all can be possible or just use a code cave in which program headers are executable. Inserting bytes changes offsets, and it's possible the program won't have an entry point. Overwriting works most of the time if what you're patching is simple and needs only a few instructions.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "MarianD",
            "time": "Feb 20, 2022 at 10:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guilherme",
                    "text": "<span class=\"comment-copy\">what is code cave amd?</span>",
                    "time": null
                },
                {
                    "user": "Silent",
                    "text": "<span class=\"comment-copy\">@Guilherme it was a typo its just code cave.</span>",
                    "time": null
                }
            ]
        }
    ]
}