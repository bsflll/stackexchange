{
    "title": "Compression algorithm working with bitstream",
    "link": "https://reverseengineering.stackexchange.com/questions/18590/compression-algorithm-working-with-bitstream",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse decompression algorithm for one of old games. After some reversing I found that it reads bit stream, not byte by byte. It looks like this:\n </p>\n <pre><code>std::vector<uint32_t> TABLE_1 = {0x10, 0x11, 0x12, 0, 8, 7, 9, 6, 0x0A, 5, 0x0B, 4, 0x0C, 3, 0x0D, 2, 0x0E, 1, 0x0F};\n\nuint32_t f1()\n{\n    if (_stream_end < 5)\n    {\n        read_to_stream();\n    }\n\n    uint32_t v1 = read_from_stream(0x1F, 5) + 0x101;\n    std::cout << \"f1:: v1 = \" << v1 << std::endl;\n\n    if (_stream_end < 5)\n    {\n        read_to_stream();\n    }\n\n    uint32_t v2 = read_from_stream(0x1F, 5) + 1;\n    std::cout << \"f1:: v2 = \" << v2 << std::endl;\n\n    if (_stream_end < 4)\n    {\n        read_to_stream();\n    }\n\n    uint32_t v3 = read_from_stream(0xF, 4) + 4;\n    std::cout << \"f1:: v3 = \" << v3 << std::endl;\n\n    if (v1 > 0x11E || v2 > 0x1E)\n    {\n        std::cout << \"f1:: v1 or v2 is above limit\" << std::endl;\n        return 1;\n    }\n\n    std::vector<uint32_t> v4(19, 0);\n\n    if (v3 != 0)\n    {\n        for (uint32_t i = 0; i < v3; i++)\n        {\n            if (_stream_end < 3)\n            {\n                read_to_stream();\n            }\n            v4[TABLE_1[i]] = read_from_stream(0x7, 3);\n        }\n\n        std::cout << \"v4 = [ \";\n        for (auto &item : v4)\n        {\n            std::cout << item << \" \";\n        }\n        std::cout << \"]\" << std::endl;\n    }\n\n    // rest of the code\n}\n\nuint32_t begin(uint32_t *value)\n{\n    if (_stream_end == 0)\n    {\n        read_to_stream();\n    }\n\n    *value = read_from_stream(0x1, 1);\n\n    uint32_t result = read_from_stream(0x3, 2);\n\n    if (result == 2)\n    {\n        f1();\n    }\n\n    if (result == 1)\n    {\n        // execute subroutine\n    }\n\n    if (result == 0)\n    {\n        // execute subroutine\n    }\n\n    // rest of code\n}\n\nuint32_t read_from_stream(uint32_t mask, uint32_t count)\n{\n\n    uint32_t result = _stream & mask;\n\n    _stream = _stream >> count;\n    _stream_end -= count;\n\n    return result;\n}\n\nvoid read_to_stream()\n{\n    uint32_t byte = static_cast<uint32_t>(read_byte() & 0xFF);\n    _stream = _stream | (byte << _stream_end);\n    _stream_end += 8;\n}\n\nchar read_byte()\n{\n    if (_buffer_cursor == _buffer.size())\n    {\n        throw new std::runtime_error(\"read_byte\");\n    }\n\n    return _buffer[_buffer_cursor++];\n}\n</code></pre>\n <p>\n  Also I found that it uses two buffers: A (32768 bytes) and B (4096 bytes). First it fills in A buffer and after that uses it to fill in B buffer. From B buffer it copies data to output buffer so I guess it is uncompressed at this step.\nMaybe you could tell me what algorithms uses same kind of decompression.\n </p>\n <p>\n  Here are some other tables from that code.\n </p>\n <pre><code>byte_5E00E8     db 8 dup(0), 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 4, 0\n                db 4, 0, 5, 0, 5, 0, 6, 0, 6, 0, 7, 0, 7, 0, 8, 0, 8, 0\n                db 9, 0, 9, 0, 0Ah, 0, 0Ah, 0, 0Bh, 0, 0Bh, 0, 0Ch, 0\n                db 0Ch, 0, 0Dh, 0, 0Dh, 0\n\nword_5E00AC     dw 1, 2, 3, 4, 5, 7, 9, 0Dh, 11h, 19h, 21h, 31h, 41h, 61h\n                dw 81h, 0C1h, 101h, 181h, 201h, 301h, 401h, 601h, 801h\n                dw 0C01h, 1001h, 1801h, 2001h, 3001h, 4001h, 6001h\n</code></pre>\n <p>\n  This two tables used together in one of functions (hard to reverse because it is a bit long and complicates). I may be wrong in mu suggestions because I'm not a reverse engineering specialist.\n </p>\n <p>\n  Here are two files:\n  <a href=\"https://www.dropbox.com/s/4km2rjmfwi2dw1e/Archive.zip?dl=0\" rel=\"nofollow noreferrer\">\n   https://www.dropbox.com/s/4km2rjmfwi2dw1e/Archive.zip?dl=0\n  </a>\n </p>\n <p>\n  Update.\n </p>\n <p>\n  Guys, I checked one of previous developer's game (with source code published) and found that they used same library for compression (\n  <a href=\"https://github.com/KranX/Vangers/blob/master/lib/utils/xzip/outzip.cpp\" rel=\"nofollow noreferrer\">\n   library link\n  </a>\n  ).\n </p>\n <p>\n  I think question does not make any sense now but let's keep it here for history.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "322",
    "tags": [
        "c++",
        "file-format",
        "decompress"
    ],
    "user": "John Tracid",
    "time": "Jun 25, 2018 at 11:24",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Have you considered that the game is using Huffman encoding with a fixed Huffman table? The tables you give provide too little detail. Deflate (used by gzip) has been around quite a while under a very liberal license and is one of the compression algos using Huffman encoding.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n It would help if you post a link to at least one of the compressed files (and preferably more, if it is a custom scheme).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John Tracid",
            "text": "<html><body><span class=\"comment-copy\">\n @usr2564301 OK. See link in my update.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}