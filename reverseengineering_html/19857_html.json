{
    "title": "Getting a high level overview of comparative size differences of binary files?",
    "link": "https://reverseengineering.stackexchange.com/questions/19857/getting-a-high-level-overview-of-comparative-size-differences-of-binary-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have two binary files, one of them is pulled from\n  <a href=\"https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/\" rel=\"nofollow noreferrer\">\n   Protostar's (\n   <code>\n    stack0\n   </code>\n   example)\n  </a>\n  . The other one I compiled (\n  <a href=\"http://liveoverflow.com/binary_hacking/protostar/stack0.html\" rel=\"nofollow noreferrer\">\n   from source\n  </a>\n  ) with the latest version of GCC. The size difference is massive. My version is 11.5 Kb. The Protostar distributed version is 21.9 Kb. How would I get a high level overview to work towards an understanding of the massive difference in sizes?\n </p>\n <p>\n  I am compiling my version with\n </p>\n <pre><code>CFLAGS=-m32 -fno-stack-protector -std=c89 -fno-PIE -no-pie -mpreferred-stack-boundary=2 -fno-chkp-use-wrappers -D_FORTIFY_SOURCE=0 -fno-check-pointer-bounds -z execstack -z norelro -Os\n</code></pre>\n <ul>\n  <li>\n   When I use Radare's show info with\n   <code>\n    i\n   </code>\n   <strong>\n    everything\n   </strong>\n   is the same, except for the sizes.\n  </li>\n  <li>\n   The main functions are both very similar.\n  </li>\n </ul>\n <p>\n  I'm just wondering what caused the original to be so much bigger. Is there an option or tool for something like\n  <code>\n   radiff2\n  </code>\n  that can help me drill down to explain what my compiler is now doing differently than the compiler it was compiled with?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "100",
    "tags": [
        "binary-analysis",
        "radare2",
        "bin-diffing"
    ],
    "user": "Evan Carroll",
    "time": "Nov 9, 2018 at 21:49",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n What is protostar and how are the two files related?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "<html><body><span class=\"comment-copy\">\n They're both supposed to be compiled from the same source, but potentially a different set of compiler options or different compiler altogether (I just wanted to generate a similar\n <code>\n  main\n </code>\n so I played with\n <code>\n  gcc\n </code>\n until I got something good. But, I want to understand what else changed.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky see my answer, be curious to know what you think of that and if that's a good place to start to figure out this?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n \"except for the sizes.\"... so which sizes are different and how?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n What does\n <code>\n  file\n </code>\n give you on the two binaries? Perhaps one is stripped and the other isn't? Also one could be statically linked and perhaps not against glibc at all (for example musl-libc comes to mind as libc which is standards-compliant and yields small binaries)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://github.com/google/bloaty\" rel=\"nofollow noreferrer\">\n   Bloaty McBloatFace\n  </a>\n  is a compiled binary size profiler that can provide a breakdown of section sizes as you have there as well as a number of other ways to break things out.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Zhentar",
            "time": "Dec 10, 2018 at 3:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not going to accept this answer, because likely someone else will tell me a better way to do it. But, browsing the site I saw an old picture of Radare that seemed to kind of do what I want with an\n  <code>\n   S=\n  </code>\n  option. This is showing the breakdown by section. That seemed like a good place to start.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/AuSdv.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/AuSdv.png\"/>\n  </a>\n </p>\n <p>\n  Turns out that's now really close to the\n  <a href=\"https://github.com/radare/radare2/issues/12111\" rel=\"nofollow noreferrer\">\n   undocumented\n   <code>\n    iS=\n   </code>\n   option\n  </a>\n  .\n </p>\n <p>\n  Using that on both binaries, I saw the difference\n  <strong>\n   really\n  </strong>\n  quick,\n </p>\n <pre><code>[0x00000000]> iS=\n00  0x00000000 |--------------------------------------------------------------------------------------------------| 0x00000000     0 ---      \n01  0x08048114 |-#------------------------------------------------------------------------------------------------| 0x08048127    19 r--  .interp\n02  0x08048128 |-#------------------------------------------------------------------------------------------------| 0x08048148    32 r--  .note.ABI_tag\n03  0x08048148 |-#------------------------------------------------------------------------------------------------| 0x0804816c    36 r--  .note.gnu.build_id\n04  0x0804816c |-#------------------------------------------------------------------------------------------------| 0x08048198    44 r--  .hash\n05  0x08048198 |-#------------------------------------------------------------------------------------------------| 0x080481b8    32 r--  .gnu.hash\n06  0x080481b8 |-##-----------------------------------------------------------------------------------------------| 0x08048218    96 r--  .dynsym\n07  0x08048218 |--#-----------------------------------------------------------------------------------------------| 0x08048267    79 r--  .dynstr\n08  0x08048268 |--#-----------------------------------------------------------------------------------------------| 0x08048274    12 r--  .gnu.version\n09  0x08048274 |--#-----------------------------------------------------------------------------------------------| 0x08048294    32 r--  .gnu.version_r\n10  0x08048294 |--#-----------------------------------------------------------------------------------------------| 0x0804829c     8 r--  .rel.dyn\n11  0x0804829c |--##----------------------------------------------------------------------------------------------| 0x080482bc    32 r--  .rel.plt\n12  0x080482bc |---#----------------------------------------------------------------------------------------------| 0x080482ec    48 r-x  .init\n13  0x080482ec |---#----------------------------------------------------------------------------------------------| 0x0804833c    80 r-x  .plt\n14  0x08048340 |---###--------------------------------------------------------------------------------------------| 0x080484dc   412 r-x  .text\n15  0x080484dc |-----#--------------------------------------------------------------------------------------------| 0x080484f8    28 r-x  .fini\n16  0x080484f8 |-----#--------------------------------------------------------------------------------------------| 0x08048534    60 r--  .rodata\n17  0x08048534 |-----#--------------------------------------------------------------------------------------------| 0x08048538     4 r--  .eh_frame\n18  0x08049538 |-----#--------------------------------------------------------------------------------------------| 0x08049540     8 rw-  .ctors\n19  0x08049540 |-----#--------------------------------------------------------------------------------------------| 0x08049548     8 rw-  .dtors\n20  0x08049548 |-----#--------------------------------------------------------------------------------------------| 0x0804954c     4 rw-  .jcr\n21  0x0804954c |-----##-------------------------------------------------------------------------------------------| 0x0804961c   208 rw-  .dynamic\n22  0x0804961c |------#-------------------------------------------------------------------------------------------| 0x08049620     4 rw-  .got\n23  0x08049620 |------#-------------------------------------------------------------------------------------------| 0x0804963c    28 rw-  .got.plt\n24  0x0804963c |-------#------------------------------------------------------------------------------------------| 0x08049644     8 rw-  .data\n25  0x08049644 |-------#------------------------------------------------------------------------------------------| 0x0804964c     0 rw-  .bss\n26* 0x00000000 |-------############-------------------------------------------------------------------------------| 0x00000a68  2.6K ---  .stab\n27* 0x00000000 |------------------###################################################################-------------| 0x00003a5c 14.6K ---  .stabstr\n28* 0x00000000 |------------------------------------------------------------------------------------#-------------| 0x00000039    57 ---  .comment\n29* 0x00000000 |------------------------------------------------------------------------------------##------------| 0x000000fd   253 ---  .shstrtab\n30* 0x00000000 |-------------------------------------------------------------------------------------------#####--| 0x00000440    1K ---  .symtab\n31* 0x00000000 |------------------------------------------------------------------------------------------------##| 0x0000020c   524 ---  .strtab\n32  0x08048034 |##------------------------------------------------------------------------------------------------| 0x08048114   224 r-x  PHDR\n33  0x08048114 |-#------------------------------------------------------------------------------------------------| 0x08048127    19 r--  INTERP\n34  0x08048000 |######--------------------------------------------------------------------------------------------| 0x08048538  1.3K r-x  LOAD0\n35  0x08049538 |-----###------------------------------------------------------------------------------------------| 0x0804964c   268 rw-  LOAD1\n36  0x0804954c |-----##-------------------------------------------------------------------------------------------| 0x0804961c   208 rw-  DYNAMIC\n37  0x08048128 |-#------------------------------------------------------------------------------------------------| 0x0804816c    68 r--  NOTE\n38  0x00000000 |--------------------------------------------------------------------------------------------------| 0x00000000     0 rwx  GNU_STACK\n39  0x08048000 |#-------------------------------------------------------------------------------------------------| 0x08048034    52 rw-  ehdr\n=>  0x00000000 |^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^| 0xffffffffffffffff\n</code></pre>\n <p>\n  That\n  <code>\n   .stabstr\n  </code>\n  thing was\n  <strong>\n   huge.\n  </strong>\n  <a href=\"https://stackoverflow.com/a/8657396/124486\">\n   I found this on Stack Overflow\n  </a>\n  ,\n </p>\n <blockquote>\n  <p>\n   I'd be surprised if the debugging format was stabs on either platform unless you had explicitly requested it with\n   <code>\n    -gstabs\n   </code>\n   as an argument to gcc.\n  </p>\n </blockquote>\n <p>\n  I enabled that option and suddenly my new binary had one too, and it was pretty close in size to the old one.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Evan Carroll",
            "time": "Nov 9, 2018 at 22:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}