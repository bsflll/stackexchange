{
    "title": "Linux Kernel for embedded platform - Available Sources but no configuration",
    "link": "https://reverseengineering.stackexchange.com/questions/31566/linux-kernel-for-embedded-platform-available-sources-but-no-configuration",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to recompile the kernel for the Redmi Note 4 (MTK). I have successfully obtained a copy of the stock, pre-compiled kernel, and a variant of sources that seems to coincide quite well with the device's functionality. The kernel sources come from another device for which MediaTek has released the configuration (or rather, a configuration), but despite compiling the default provided configuration (which is presumably incompatible with my device), it will not boot with the newly compiled kernel. From the behavior, it seems that it raises a kernel panic and reboots.\n </p>\n <p>\n  Unfortunately, I do not have a UART connection to the device, so I'm trying to do this blind. My question is, what would be the best approach to attempting to reverse engineer the configuration used for my device?\n </p>\n <p>\n  The steps I've considered include:\n </p>\n <ol>\n  <li>\n   Import the current kernel compiled in Ghidra and use the sources to identify the functions, and by comparing the \"output\" I can manually figure out the configuration used.\n  </li>\n  <li>\n   Write a static binary that opens the framebuffer (which is available!) and outputs the kernel ring buffer log to it. Change the kernel options until I get at least a screen, and see why it reboots. I have started development on this particular idea, but it seems inefficient and improbable to work.\n  </li>\n </ol>\n <p>\n  While I am familiar with C and Linux, it is my first adventure of this kind.\n </p>\n <p>\n  EDIT: The stock kernel seems to be monolithic, as the OS is Android 6.0, and according to\n  <a href=\"https://source.android.com/docs/core/architecture/kernel/loadable-kernel-modules\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  link, it is not a requirement to support modules pre-Android 8.0. I could also not find any evidence of modules in the storage of the device.\n </p>\n <p>\n  EDIT: Among the experiments I've done,\n </p>\n <ul>\n  <li>\n   I have compiled a busybox initramfs, with the initial binary being\n   <code>\n    /bin/sh\n   </code>\n   , for the correct architecture.\n  </li>\n  <li>\n   And used that image to boot the stock kernel. As expected, the device hung and did not reboot.\n  </li>\n  <li>\n   I have concluded that the shell did indeed launch, despite the screen not being initialized.\n  </li>\n  <li>\n   I then proceeded to boot the compiled kernel as well, which with the busybox image did reboot.\n  </li>\n  <li>\n   This confirms the assumption that the kernel panics.\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "149",
    "tags": [
        "decompilation",
        "c",
        "kernel-mode"
    ],
    "user": "KiralyCraft",
    "time": "May 6, 2023 at 20:37",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe the variant of the sources is not close enough, a panic is likely a missing driver, possibly for storage. Is the compiled kernel modular or monolithic? .. in any case, trying to determine which drivers it includes would be my first stop.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "KiralyCraft",
            "text": "<html><body><span class=\"comment-copy\">\n That might be a possibility, indeed. It looks like the pre-compiled kernel is monolithic, as I couldn't find any evidence of modules, and that the stock OS runs a pre-Android 8.0 OS (Android 6 to be exact), which is not mandatory to support modules, according to\n <a href=\"https://source.android.com/docs/core/architecture/kernel/loadable-kernel-modules\" rel=\"nofollow noreferrer\">\n  source.android.com/docs/core/architecture/kernel/â€¦\n </a>\n The kernel I compiled is monolithic as well. I just remembered some details about the experiments I've done, I'll edit the question;\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You could try to compare the symbol tables for the custom kernel and the official kernel either by looking at the\n  <code>\n   system.map\n  </code>\n  file or get it from the running system via\n  <code>\n   /proc/kallsyms\n  </code>\n  (might need to disable some restrictions for reading that file as\n  <code>\n   root\n  </code>\n  ).\n </p>\n <p>\n  This won't give you a config file directly, but you could maybe indirectly figure out the required config options. But as mentioned in the comments there could even be a difference beyond that, since e.g. source code for drivers will simply be different between those devices. So maybe you'll never get a working kernel without the correct source.\n </p>\n <p>\n  If the kernel was compiled with a specific option (seems to be the case at least for some Android devices) you could extract the config file with this script:\n </p>\n <p>\n  <a href=\"https://github.com/torvalds/linux/blob/master/scripts/extract-ikconfig\" rel=\"nofollow noreferrer\">\n   https://github.com/torvalds/linux/blob/master/scripts/extract-ikconfig\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "tripleee",
            "time": "Mar 10, 2023 at 15:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "KiralyCraft",
                    "text": "<span class=\"comment-copy\">This is definitely a good approach; Unfortunately, the kernel doesn't have ikconfig enabled, but comparing the symbols is brilliant - I will give this a try in the upcoming days and report back.</span>",
                    "time": null
                }
            ]
        }
    ]
}