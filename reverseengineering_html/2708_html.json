{
    "title": "A PE packer: issues with the packed image base address",
    "link": "https://reverseengineering.stackexchange.com/questions/2708/a-pe-packer-issues-with-the-packed-image-base-address",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am toying with writing a basic PE packer, whose job is simply to execute the attached target PE in memory. I have spent a couple of days getting intimate with the format, and I think that I have grasped it well enough for the purpose. These are the methods I use:\n </p>\n <ol>\n  <li>\n   Firstly, the target is bundled with the loader by being inserted into the\n   <code>\n    .data\n   </code>\n   section of a\n   <a href=\"http://www.nasm.us/\" rel=\"noreferrer\">\n    nasm\n   </a>\n   generated object file, which is later compiled together with the loader.\n  </li>\n  <li>\n   Upon execution, the Image Data Directory is examined, and the Import Address Table properly bound by loading the needed libraries and functions.\n  </li>\n  <li>\n   The PE and all of its sections need to be properly laid out in memory, hence\n   <code>\n    ImageBase\n   </code>\n   and\n   <code>\n    SizeOfImage\n   </code>\n   are read, and sufficient virtual memory is allocated for the next two operations.\n  </li>\n  <li>\n   PE headers are written into the new location.\n  </li>\n  <li>\n   Section data is gathered via section headers, and every section gets written into the new memory space, each into its designated virtual address. Proper permissions via\n   <code>\n    VirtualProtect()\n   </code>\n   are also set.\n  </li>\n  <li>\n   Finally,\n   <code>\n    OptionalHeader.AddressOfEntryPoint\n   </code>\n   gets called.\n  </li>\n </ol>\n <p>\n  The loader, of course, has an exotic image base, as to not conflict with the standard\n  <code>\n   0x00400000\n  </code>\n  base. My problems lies somewhere along there. Almost every\n  <code>\n   .exe\n  </code>\n  has its relocations table stripped, so there's no way to do a base relocation if the desired base address is unavailable. The loader having a non-standard image base solves the problem to an extent. The target's desired base is only available in about 50% of runs. I've tried to find out what might occupy the memory in the other 50%, and have found out that it's almost always a\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff563684%28v=vs.85%29.aspx\" rel=\"noreferrer\">\n   section view\n  </a>\n  . Of what, or whose, I don't know. I've tried to use both\n  <code>\n   NtUnmapViewOfSection\n  </code>\n  and\n  <code>\n   NtFreeVirtualMemory\n  </code>\n  , but they don't solve the problem. The first seems to introduce memory corruption and the second does nothing. Is there any way of claiming that memory? Here's a screenshot from ProcessHacker:\n  <img alt=\"\" src=\"https://i.sstatic.net/sfrwq.png\"/>\n  .\n </p>\n <p>\n  All ideas are welcome.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "955",
    "tags": [
        "pe",
        "packers"
    ],
    "user": "hauzer",
    "time": "Aug 29, 2013 at 0:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You might want to:\n </p>\n <ol>\n  <li>\n   give your packer stub have the same standard ImageBase\n  </li>\n  <li>\n   allocates memory somewhere else\n  </li>\n  <li>\n   relocate the (EIP-independant, for convenience) stub code there\n  </li>\n  <li>\n   to rebuild the original code at the original ImageBase without any risk.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Ange",
            "time": "Aug 29, 2013 at 7:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "hauzer",
                    "text": "<span class=\"comment-copy\">That's the exact same thing I thought of in between asking the question and coming here to check for answers! Yes, I think that'll do it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try getting code inspiration from process hollowing.\n </p>\n <p>\n  Here's one that remotely runs it on a new space:\n  <a href=\"https://github.com/hasherezade/libpeconv/tree/master/run_pe\" rel=\"nofollow noreferrer\">\n   https://github.com/hasherezade/libpeconv/tree/master/run_pe\n  </a>\n  <a href=\"https://github.com/m0n0ph1/Process-Hollowing\" rel=\"nofollow noreferrer\">\n   https://github.com/m0n0ph1/Process-Hollowing\n  </a>\n </p>\n <p>\n  Try:\n </p>\n <ol>\n  <li>\n   run the packer loader from a newly allocated memory (copy loader shellcode to and run from RWX allocated mem.)\n  </li>\n  <li>\n   unmap loader PE image, realloc, and replace it with new PE image\n  </li>\n  <li>\n   dynamically import functions from new PE image\n  </li>\n  <li>\n   jump to entry point of new PE image\n  </li>\n </ol>\n <p>\n  I haven't dug deep about resource loading yet. But if the new PE image uses LoadResource, it might read the loader's instead.  Not sure about this.\n </p>\n <p>\n  You can get more ideas from debugging a UPX packed sample.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "exp101t",
            "time": "Apr 16, 2020 at 6:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}