{
    "title": "func_name.part.# in objdump disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/11174/func-name-part-in-objdump-disassembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was looking at an executable having GMP linked statically to it. The following seems weird.\n </p>\n <pre><code>Disassembly of section .text:\n\n0000000000400e60 <refmpn_fill.part.4>:\n  400e60:   50                      push   %rax\n  400e61:   ba 55 84 42 00          mov    $0x428455,%edx\n  400e66:   be 92 00 00 00          mov    $0x92,%esi\n  400e6b:   bf a8 81 42 00          mov    $0x4281a8,%edi\n  400e70:   e8 1b 66 00 00          callq  407490 <__gmp_assert_fail>\n\n0000000000400e75 <refmpn_count_leading_zeros.part.19>:\n  400e75:   50                      push   %rax\n  400e76:   ba c2 81 42 00          mov    $0x4281c2,%edx\n  400e7b:   be eb 06 00 00          mov    $0x6eb,%esi\n  400e80:   bf a8 81 42 00          mov    $0x4281a8,%edi\n  400e85:   e8 06 66 00 00          callq  407490 <__gmp_assert_fail>\n  400e8a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n\n0000000000400e90 <main>:\n  400e90:   53                      push   %rbx\n  400e91:   bb e8 03 00 00          mov    $0x3e8,%ebx\n  400e96:   48 83 ec 20             sub    $0x20,%rsp\n  400e9a:   e8 11 03 00 00          callq  4011b0 <tests_start>\n</code></pre>\n <p>\n  As you can see there are disassembly of functions of the form:\n  <code>\n   function_name.part.#\n  </code>\n  where\n  <code>\n   #\n  </code>\n  represents some number. There are no such function having name with\n  <code>\n   part.#\n  </code>\n  appended at the end in the source code. Then how do these objects appear?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "157",
    "tags": [
        "disassembly",
        "objdump"
    ],
    "user": "sherlock",
    "time": "Oct 26, 2015 at 6:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's called\n  <a href=\"http://developerblog.redhat.com/2014/10/29/rhel7-gcc-optimizations-partial-inlining/\" rel=\"nofollow\">\n   partial inlining\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   Partial inlining is closely related to function outlining. Rather than\n  inlining the entire body into a call site, the compiler may choose to\n  inline part of the called function (typically a hot fragment at the\n  start of the function with an early return).\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Nov 2, 2015 at 17:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}