{
    "title": "Techniques for marking memory changes",
    "link": "https://reverseengineering.stackexchange.com/questions/16875/techniques-for-marking-memory-changes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i'm using IDA to reverse some crypto code that seems to derive its key from some hashing functions. I have recognized the algoritm based on magic numbers, but i want to see its changes in memory easily.\n </p>\n <p>\n  Does there exist a way to mark changes in memory in the Hex view in IDA, or another debugger? I'm finding it tiresome to check and remember memory addresses all the time.\n </p>\n <p>\n  I'm imagining some feature that marks memory as it is touched, and lets you mouseover the fields to get more information on what made the change. That shouldn't be that intensive if done only when stepping\n </p>\n <p>\n  \"Such is life, deal with it\" is also an acceptable answer, but i just want to know if i am doing this the stupid cumbersome way, or of there's a better way.\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "231",
    "tags": [
        "memory",
        "debuggers"
    ],
    "user": "Liam S. Crouch",
    "time": "Nov 30, 2017 at 22:43",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure I understood your question properly, but did you try to put Write Hardware breakpoints on addresses of your interest? This will break whenever the program writes to the addresses you've marked.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Liam S. Crouch",
            "text": "<html><body><span class=\"comment-copy\">\n That is correct, and i am already doing this. My issue lies in the fact that i am trying to mark memory locations by name, such that i can easier keep track of what is what in memory. Think of the commenting feature of the IDA view, but for the Hex View\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Probably you could use\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1648.shtml\" rel=\"nofollow noreferrer\">\n   \"Page breakpoints\"\n  </a>\n  for the area where it writes if your target runs in Windows and, then, editing the breakpoint (right click with the mouse over the line with the breakpoint, then click on \"Edit Breakpoint\") you can specify if you want it to be traced (Edit Breakpoint and check \"Trace\") or if you want the process to stop (Edit Breakpoint and check \"Break\").\n </p>\n <p>\n  PS: It will be slow, though.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Mar 1, 2018 at 17:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Don't think there's something. Yet you could implement it yourself. If you know the memory region your code uses, you may mark memory pages as PAGE_GUARD via VirtualProtect(), as Armadillo protector once did :) On each access to the memory STATUS_GUARD_PAGE_VIOLATION will be raised and you'll know who did it and where it tried to access. Then you recover from exception and do it all over again.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Anton Kukoba",
            "time": "Dec 1, 2017 at 12:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Liam S. Crouch",
                    "text": "<span class=\"comment-copy\">Great suggestion! I'm trying not to reinvent the wheel here when we have great tools already, but if something like that us useful, i'l try it out. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "Kerim Can Kalıpcıoğlu",
                    "text": "<span class=\"comment-copy\">I think this is most efficent way to do that, debuggers use that method too. Even operating systems using similar technique for paging mechanisms.</span>",
                    "time": null
                }
            ]
        }
    ]
}