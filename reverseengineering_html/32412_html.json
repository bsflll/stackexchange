{
    "title": "Anyone here capable of removing a launch condition from an old Win32 file having a \"Sony InstallLock\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/32412/anyone-here-capable-of-removing-a-launch-condition-from-an-old-win32-file-having",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to extract the BIOS ROM file it contains, but it refuses to run. Even on the model it is intended for since I lack one or more SONY-custom DLLs on my installation. Since Sony decided to delete all old drivers from their website, I am unable to identify what Sony 3rd party thing are missing.\n </p>\n <p>\n  7zip, UniExtract, WinRAR, ResourceHacker...no luck. I could save a binary aside with ResourceHacker but it was only a WRAPPER.EXE file which is of no use. The actual ROM file is not to be found in WRAPPER.EXE.\n </p>\n <p>\n  File:\n  <a href=\"http://dose.0wnz.at/ftp.vaio-link.com/PUB/VAIO/BIOS/R0232U2.EXE\" rel=\"nofollow noreferrer\">\n   http://dose.0wnz.at/ftp.vaio-link.com/PUB/VAIO/BIOS/R0232U2.EXE\n  </a>\n  (look like Borland Delphi 5/6)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "77",
    "tags": [
        "delphi"
    ],
    "user": "freakedenough",
    "time": "Oct 21, 2023 at 13:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I spend a few minutes looking at this and I can give some hints to help you:\n </p>\n <ul>\n  <li>\n   The executable was indeed written in Delphi\n  </li>\n  <li>\n   The executable has another executable (wrapper.exe) embedded as a resource (you already found this).\n  </li>\n  <li>\n   The executable looks in the registry for HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Sony Corporation\\Shared Info\\Shared DLLs and then for the REG_SZ value PC_INFO.DLL\n  </li>\n  <li>\n   It wants the function\n   <code>\n    _pc_info2\n   </code>\n   from this dll.\n  </li>\n  <li>\n   You can download software from this link:\n   <a href=\"https://www.driverguide.com/driver/detail.php?driverid=1800867\" rel=\"nofollow noreferrer\">\n    https://www.driverguide.com/driver/detail.php?driverid=1800867\n   </a>\n   and inside the zip is Utils Installer 2 Sony Shared Library -> this contains the required dll.\n  </li>\n  <li>\n   Without debugger it looks like it does some checks to see if system is a sony pc etc and errors with\n   <code>\n    Sorry, you do not have permissions to extract this package\n   </code>\n  </li>\n  <li>\n   If the exe detects a debugger it continues without further checks (however it errors out with\n   <code>\n    invalid archive type\n   </code>\n  </li>\n  <li>\n   This patent seems related:\n   <a href=\"https://patents.google.com/patent/US20050240815\" rel=\"nofollow noreferrer\">\n    https://patents.google.com/patent/US20050240815\n   </a>\n  </li>\n </ul>\n <p>\n  If you want to patch the binary to always think a debugger is attached you can make the following changes:\n </p>\n <pre><code>fc /b R0232U2.EXE R0232U2-p.EXE\nComparing files R0232U2.EXE and R0232U2-P.EXE\n0004B368: FF 89\n0004B369: 25 C0\n0004B36A: C8 40\n0004B36B: 67 90\n0004B36C: 46 90\n0004B36D: 00 90\n0004B36E: 8B 90\n0004B36F: C0 90\n</code></pre>\n <p>\n  Here's a PowerShell script to make above patch, it assumes the original file is in the same folder as the script. It saves it as\n  <code>\n   R0232U2-patched.EXE\n  </code>\n  in the script folder.\n </p>\n <pre><code>function Apply-HexDiff {\n    [CmdletBinding()]\n    param (\n        [string]$OriginalFile,\n        [string]$ModifiedFile,\n        [string[]]$HexDiff\n    )\n    \n    # Read the original file into a byte array\n    $originalData = [System.IO.File]::ReadAllBytes($OriginalFile)\n\n    # Apply changes\n    foreach ($line in $HexDiff) {\n        $tokens = $line -split ':| '\n        $address = [Convert]::ToInt32($tokens[0], 16)\n        $originalByte = [Convert]::ToByte($tokens[2], 16)\n        $modifiedByte = [Convert]::ToByte($tokens[3], 16)\n\n        # Check if original byte matches before applying change\n        if ($originalData[$address] -eq $originalByte) {\n            $originalData[$address] = $modifiedByte\n            Write-Host (\"Patched {0:X2} to {1:X2} at offset {2:X}\" -f $originalByte, $modifiedByte, $address)\n        }\n        else {\n            Write-Host \"Byte at address $($address.ToString('X')) does not match original byte $($originalByte.ToString('X2'))\"\n        }\n    }\n\n    # Write the modified data back into the file\n    [System.IO.File]::WriteAllBytes($ModifiedFile, $originalData)\n}\n\n# Example usage:\n$hexDiff = @(\n    \"0004B368: FF 89\",\n    \"0004B369: 25 C0\",\n    \"0004B36A: C8 40\",\n    \"0004B36B: 67 90\",\n    \"0004B36C: 46 90\",\n    \"0004B36D: 00 90\",\n    \"0004B36E: 8B 90\",\n    \"0004B36F: C0 90\"\n)\n\n$originalFile = Join-Path $PSScriptRoot \"R0232U2.EXE\"\n$patchedFile = Join-Path $PSScriptRoot \"R0232U2-patched.EXE\"\nApply-HexDiff -OriginalFile $originalFile -ModifiedFile $patchedFile -HexDiff $hexDiff\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Remko",
            "time": "Oct 24, 2023 at 10:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}