{
    "title": "MachO chained fixups parsing",
    "link": "https://reverseengineering.stackexchange.com/questions/32331/macho-chained-fixups-parsing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm wondering how the info stored in the chained fixups in the Mach-O file is used to resolve binding and rebases?\n </p>\n <p>\n  My question originated from wanting to parse all the Objective-C classes inside a Mach-O and parse their respective\n  <a href=\"https://github.com/opensource-apple/objc4/blob/master/runtime/objc-runtime-new.h#L1012\" rel=\"nofollow noreferrer\">\n   <code>\n    objc_class\n   </code>\n  </a>\n  and get a list of selectors.\n </p>\n <p>\n  In-order to achieve that I started by parsing the Mach-O segments to get to the section\n  <code>\n   __objc_classlist\n  </code>\n  and read the pointers that should point to struct of type\n  <code>\n   objc_class\n  </code>\n  .\n </p>\n <p>\n  What I don't understand is how to use the stored information there to fix these pointers for example. Taking as a ref point I have a binary that the first pointer on disk (\n  <code>\n   0x00231D8\n  </code>\n  ) in the\n  <code>\n   __objc_classlist\n  </code>\n  section points to\n  <code>\n   0x0025EED0\n  </code>\n  which is its related\n  <code>\n   objc_class\n  </code>\n  struct (validated using Ghidra). When I read from\n  <code>\n   0x00231D8\n  </code>\n  I get\n  <code>\n   0x801000000000022a\n  </code>\n  which is not a valid pointer, pointing to the mapped file.\n </p>\n <p>\n  After seeing that the pointers are invalid I was noted that I should parse and use the information stored in the chained fixups load command to fix the pointers.\n </p>\n <p>\n  So I parsed the chained fixups but I'm not sure how to use the parsed binds/rebases\n  <a href=\"https://github.com/apple-opensource/dyld/blob/master/include/mach-o/fixup-chains.h#L190\" rel=\"nofollow noreferrer\">\n   structs\n  </a>\n  in-order to fix the pointers for example at the\n  <code>\n   __objc_classlist\n  </code>\n  .\n </p>\n <p>\n  Taking the ref point I'm working on to validate my work, I use Ghidra to see what symbol the first pointer in the\n  <code>\n   __objc_classlist\n  </code>\n  actually is and I look for any binding info related to that symbol in my parsed result to find the following both in the fixups of the\n  <code>\n   __DATA_CONST\n  </code>\n  and the\n  <code>\n   __DATA\n  </code>\n  segments:\n </p>\n <pre><code>BIND    ordinal: 554    addend: 0   reserved: 0 (_OBJC_METACLASS_$_XYZ)\n</code></pre>\n <p>\n  I understand that the ordinal is the index into the symbol table pointer to\n  <strong>\n   by the\n  </strong>\n  <code>\n   dyld_chained_fixups_header\n  </code>\n  <a href=\"https://github.com/apple-opensource/dyld/blob/master/include/mach-o/fixup-chains.h#L41\" rel=\"nofollow noreferrer\">\n   <code>\n    imports_offset\n   </code>\n  </a>\n  which I also printed to validate the ordinal is correct:\n </p>\n <pre><code>    [553] lib_ordinal: 15   weak_import: 0  name_offset: 13346 (ABC)\n    [554] lib_ordinal: 0    weak_import: 0  name_offset: 13380 (_OBJC_CLASS_$_XYZ)\n    [555] lib_ordinal: 0    weak_import: 0  name_offset: 13429 (_OBJC_CLASS_$_DEF)\n</code></pre>\n <p>\n  Now I'm not sure if what I should be looking for in the chained fixups in-order to fix these class pointers is rebase/bind information. I know rebase is used for ASLR when loading other libs so if the objective-c class list is the binary owned class list there's no reason for rebases at least for these pointers, on the other hand even though I find related binding information to my class I don't see why do we need this information if it's a data owned by the binary and not some other dylib, why do we need to bind it in runtime?\n  \n\n  Even so, how do I even use this information in-order to fix the pointer for example at\n  <code>\n   0x00231D8\n  </code>\n  in the\n  <code>\n   __objc_classlist\n  </code>\n  ? All I have is the binding information which gives an ordinal to the chained fixups imports as-well as\n  <code>\n   addend\n  </code>\n  field which seems to always be 0 and I have no idea what it is used for.\n </p>\n <p>\n  The only logical jump I could've make is that if I look for the same import by its symbol name in the symbol table pointed by the symbol table command and take the\n  <a href=\"https://github.com/apple-oss-distributions/xnu/blob/1031c584a5e37aff177559b9f69dbd3c8c3fd30a/EXTERNAL_HEADERS/mach-o/nlist.h#L92\" rel=\"nofollow noreferrer\">\n   <code>\n    n_value\n   </code>\n  </a>\n  of the symbol I get that elusive\n  <code>\n   0x0025EED0\n  </code>\n  pointer value.\n  \n\n  But that still doesn't answer on how this symbol value should be the pointer in the first address of the\n  <code>\n   __objc_classlist\n  </code>\n  section\n  <code>\n   0x00231D8\n  </code>\n  , what\n  <strong>\n   BIND\n  </strong>\n  s them together?\n </p>\n <p>\n  Continuing on, even if I read the value from disk in address\n  <code>\n   0x0025EED0\n  </code>\n  which should be the\n  <code>\n   objc_class\n  </code>\n  struct of that symbol that resides in\n  <code>\n   __DATA.__objc_data\n  </code>\n  , I get\n  <code>\n   80 10 00 00 00 00 03 c7\n  </code>\n  and by looking at the valid data in Ghidra I see\n  <code>\n   f8 ee 25 00 00 00 00 00\n  </code>\n  , so clearly another discrepancy and maybe this data also need rebase/binding?\n  \n\n  So I tried to take the address of the struct\n  <code>\n   0x0025EED0\n  </code>\n  and see if I can find rebase information (didn't look for binding information since it's not a symbol just a struct data?) on it from the chained fixups but couldn't find any so I'm not sure what needs to be done to fix it?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "360",
    "tags": [
        "ghidra",
        "ios",
        "mach-o",
        "macos"
    ],
    "user": "Jorayen",
    "time": "Sep 29, 2023 at 9:43",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n As Ghidra is open source it's source code may give you the necessary hints on how to parse those structures.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jorayen",
            "text": "<html><body><span class=\"comment-copy\">\n I think actually looking at ghidra source helped me the most. The most crucial part for me missing was that we overwrite the chain address itself by the binded symbol value/ rebase strategy new value, in my mind I didn't understand where the new value should be written to, also it's binding that I need to reconstruct all the objc_class list and data not rebasing as far as my testing went\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (short answer that targets what I think is your main confusion for now)\n </p>\n <blockquote>\n  <p>\n   I know rebase is used for ASLR when loading other libs so if the objective-c class list is the binary owned class list there's no reason for rebases at least for these pointers, on the other hand even though I find related binding information to my class I don't see why do we need this information if it's a data owned by the binary and not some other dylib, why do we need to bind it in runtime?\n  </p>\n </blockquote>\n <p>\n  Conceptually there are two kinds of fixups to distinguish: Bind and Rebases.\n </p>\n <p>\n  Binds will place a pointer to a symbol in another dylib at this location, and they contain the index into the list of imported symbols.\n </p>\n <p>\n  Rebases are for fixing an address that points to something inside the some binary. This is needed because pointers like inside the\n  <code>\n   objc_class\n  </code>\n  structs can't be relative at runtime, and the base address of the binary is only decided once the binary is being loaded. The\n  <a href=\"https://github.com/apple-opensource/dyld/blob/master/include/mach-o/fixup-chains.h#L156\" rel=\"nofollow noreferrer\">\n   <code>\n    target\n   </code>\n   member of the\n   <code>\n    dyld_chained_ptr_64_rebase\n   </code>\n   struct\n  </a>\n  contains a value that can be an\n  <em>\n   offset\n  </em>\n  from the base address of the binary, which the loader can then translate into an absolute address in the virtual memory space.\n </p>\n <p>\n  One problem is that the type of the struct that was used for encoding the value isn't encoded in the value itself (except for minor things like the rebase/bind difference for\n  <code>\n   DYLD_CHAINED_PTR_64\n  </code>\n  ). This information is contained in a struct at the beginning of each fixup chain which is in a different location. So your script will have to run through the chain of\n  <em>\n   all\n  </em>\n  fixups if you want to correctly determine the runtime values inside the\n  <code>\n   objc_class\n  </code>\n  .\n </p>\n <p>\n  You are probably better off writing your script on top of some existing Mach-O parser that supports this already and loads the entire binary into a virtual memory space. Otherwise you will have to re-implement a lot of annoying struct parsing code\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Sep 29, 2023 at 13:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">I have parsed the chain fixup already it's not a problem, I just cant see how all these come together to resolve the values in the section for example in the <code>__objc_classlist</code> so if I take the target of a rebase and adds it to the base of the binary then what?</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">IIRC \"baseaddress + target\" is then the value that will be written to the location. This value is then a valid pointer</span>",
                    "time": null
                },
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">will be written to what address to the address of the rebase structure? Because if so I don't have one rebase in the chain that it's address is <code>0x00231D8</code>. I'm trying to dig in the dyld code but can't find what handles it</span>",
                    "time": null
                }
            ]
        }
    ]
}