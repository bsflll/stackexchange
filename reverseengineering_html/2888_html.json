{
    "title": "How exploit writers find bugs in Java Machine?",
    "link": "https://reverseengineering.stackexchange.com/questions/2888/how-exploit-writers-find-bugs-in-java-machine",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My question is about Java exploits, for example this one:\n  <a href=\"https://www.us-cert.gov/ncas/alerts/TA13-010A\">\n   https://www.us-cert.gov/ncas/alerts/TA13-010A\n  </a>\n  (exploit avaiable here\n  <a href=\"http://www.securityfocus.com/bid/57246/\">\n   http://www.securityfocus.com/bid/57246/\n  </a>\n  )\n </p>\n <p>\n  The victimn should visit the site and accept to run the applet in your computer. Then if the JVM is vulnerable the cracker can execute arbitrary commands.\n </p>\n <p>\n  So my question is: How did the security researcher find this vulnerability? I mean, not specific this one, but how (what tools, method, etc) did he/she use to find these vulnerabilities? Does he/she reverse engineer javaw.exe? What's the methods?\n </p>\n</div>\n</body></html>",
    "votes": "15",
    "answers": 3,
    "views": "2k",
    "tags": [
        "java",
        "exploit",
        "vulnerability-analysis"
    ],
    "user": "jyz",
    "time": "Sep 29, 2014 at 14:24",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n You could read the sources of\n <a href=\"http://openjdk.java.net/\" rel=\"nofollow noreferrer\">\n  openjdk.java.net\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It largely depends on what kind of vulnerability. \nThis particular one you mentione is in SecurityManager, and you could have found it relatively easily by analyzing the Java source code.\n </p>\n <p>\n  To get some idea of how that process is done, take a look at\n  <a href=\"http://immunityproducts.blogspot.com/2013/04/yet-another-java-security-warning-bypass.html\" rel=\"nofollow\">\n   this\n  </a>\n  and\n  <a href=\"http://immunityproducts.blogspot.com.ar/2013/02/keep-calm-and-run-this-applet.html\" rel=\"nofollow\">\n   this\n  </a>\n  articles by Esteban Guillardoy of Immunity.\n </p>\n <p>\n  Jduck has also published some\n  <a href=\"http://media.blackhat.com/bh-ad-11/Drake/bh-ad-11-Drake-Exploiting_Java_Memory_Corruption-WP.pdf\" rel=\"nofollow\">\n   research on memory corruption vulns in JRE\n  </a>\n  .\nYou can get the better picture about how to find a vulnerability by studying the previously published ones.\n </p>\n <p>\n  I remember that LSD-PL folks have done some awesome stuff in this area long time ago, that you can find\n  <a href=\"http://lsd-pl.net/projects/javasecurity.zip\" rel=\"nofollow\">\n   here\n  </a>\n  . It's a little bit outdated, but still relevant.\n </p>\n</div>\n</body></html>",
            "votes": "12",
            "user": "jvoisin",
            "time": "Nov 29, 2013 at 5:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well I myself am an exploit developer. The methods of attack/research are:\n </p>\n <ul>\n  <li>\n   Reversing the input values. Files, network protocols etc etc.\n  </li>\n  <li>\n   Building a Fuzzer with this information\n  </li>\n  <li>\n   Fuzz till crash\n  </li>\n  <li>\n   Analyse the crash\n  </li>\n  <li>\n   Build exploit\n  </li>\n </ul>\n <p>\n  Another method I commonly use is to reverse points of interests (eg SingleSignOne modules, other login methods, database connections (hardcoded passwords etc).\n </p>\n <p>\n  But this should be on Security Exchange not on reverse engineering.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Stolas",
            "time": "Oct 5, 2013 at 20:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">I don't think security exchange would give a better answer than RE.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Agree, as the Security Exchange is not really the technical Security research (exploit development, reversing malware etc) but more the ITIL based, network and common sense security. But still it is not a RCE Question but a security question. I myself still think there should be an exploit development stack exchange.</span>",
                    "time": null
                },
                {
                    "user": "jyz",
                    "text": "<span class=\"comment-copy\">Ok but how do you \"Reverse the input values\" ? Did you reverse iexplorer.exe and then the applet?</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">@jyzus windbg break these kernelbase!ReadFile kinds of Symbols and just run the tool. Reverse the flow your input variables go.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Lots of Java exploits revolve around bypassing the Java sandbox, the Security Manager in Java parlance. Sami Koivu published a lot of interesting work around Java security and exploits, notably his 3 parts introduction to Java security.\n </p>\n <p>\n  <a href=\"http://slightlyrandombrokenthoughts.blogspot.ca/2009/02/java-se-security-part-i_25.html\" rel=\"nofollow\">\n   http://slightlyrandombrokenthoughts.blogspot.ca/2009/02/java-se-security-part-i_25.html\n  </a>\n  <a href=\"http://slightlyrandombrokenthoughts.blogspot.ca/2009/07/java-se-security-part-ii-immutability.html\" rel=\"nofollow\">\n   http://slightlyrandombrokenthoughts.blogspot.ca/2009/07/java-se-security-part-ii-immutability.html\n  </a>\n  <a href=\"http://slightlyrandombrokenthoughts.blogspot.ca/2010/02/java-se-security-part-iii-keys.html\" rel=\"nofollow\">\n   http://slightlyrandombrokenthoughts.blogspot.ca/2010/02/java-se-security-part-iii-keys.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "ekse",
            "time": "Sep 26, 2014 at 16:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}