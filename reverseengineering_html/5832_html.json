{
    "title": "Understanding segment prefixes in assembly for Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/5832/understanding-segment-prefixes-in-assembly-for-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In looking at some assembly, I have come across a few instructions using segment prefixes. For example\n </p>\n <pre><code><address>: ....  mov eax,DWORD PTR gs:0x20\n</code></pre>\n <p>\n  I understand the basics of memory segments, but how could I get the 'absolute' memory address (particularly in GDB) of the data being accessed here? For example, I may want to break on further access, or examine the memory in that area.\n </p>\n <p>\n  Edit: I know how to get the value of\n  <code>\n   $gs\n  </code>\n  , but not sure how to use that information with the given instruction to get the actual address of memory. And yes, this is under Linux.\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "950",
    "tags": [
        "disassembly",
        "linux",
        "gdb"
    ],
    "user": "HenryC",
    "time": "Jul 11, 2014 at 18:28",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n You should specify what operating system you are targeting because the usage of these register is OS dependent (though I suppose this is a Unix-based system because you refer to GDB).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Simeon Pilgrim",
            "text": "<html><body><span class=\"comment-copy\">\n Are you ask how you get the value of GS or how to use that value to make absolute address?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On Linux, in protected mode, the segment registers aren't standard \"segments\" anymore, instead, they're called selectors, and include information if the segment is readable/writable/executable. The real address they're pointing to is \"hidden\" in a table in the kernel and the segment register is used as an index into that table, but the physical address shouldn't matter to you much anyway, since your application deals with virtual memory only, and the virtual address that gs maps to isn't even accessible in your \"normal\", ds/ss-referenced, virtual address space.\n </p>\n <p>\n  Linux uses the gs register to make some per-cpu-information available to the process. The special offset 0x20, which you're using in your example, is initialized to some random value, which the compiler reads whenever it enters a function and writes on the stack, and checks when the functions terminates, to detect buffer overflows.\n </p>\n <p>\n  Read more about the overflow protection on\n  <a href=\"http://en.wikipedia.org/wiki/Buffer_overflow_protection\">\n   wikipedia\n  </a>\n  , and more about the percpu structure in\n  <a href=\"http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/arch/x86/include/asm/stackprotector.h\">\n   the linux kernel source\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Guntram Blohm",
            "time": "Jul 11, 2014 at 17:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">On Windows, you can use <code>GetThreadSelectorEntry()</code> in user-mode to get the base address of a segment. But as @guntram-blohm said above, it looks like there's no such user-mode functionality in Linux.</span>",
                    "time": null
                },
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">In his particular example, as well, it looks like it's just the glibc stack canary code anyways, although thread local storage uses fs or gs typically as well.</span>",
                    "time": null
                }
            ]
        }
    ]
}