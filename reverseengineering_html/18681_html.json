{
    "title": "Which ARM command is influencing the SP position?",
    "link": "https://reverseengineering.stackexchange.com/questions/18681/which-arm-command-is-influencing-the-sp-position",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I do static analysis of ARM assembly code (I can't debug it).\n </p>\n <p>\n  When I look on argument that in\n  <code>\n   SP+0x<SomeOffset>\n  </code>\n  I can find what I'm looking for, but if I look a few lines further down I see that this argument is not there.\n </p>\n <p>\n  Which ARM, command is influencing the stack pointer (SP) position?\n </p>\n <p>\n  I don't see any add/sub to\n  <code>\n   SP\n  </code>\n  , the only commands that I see is\n  <code>\n   ldr\n  </code>\n  and\n  <code>\n   str\n  </code>\n  from\n  <code>\n   SP\n  </code>\n  and to\n  <code>\n   SP\n  </code>\n  +function\n  <code>\n   BL\n  </code>\n  that not touch on this argument.\n </p>\n <p>\n  I think that even I call to function, when I finish it the\n  <code>\n   SP\n  </code>\n  need to be same,  and store to\n  <code>\n   SP+offset\n  </code>\n  or load from\n  <code>\n   SP+offset\n  </code>\n  don't need to change the\n  <code>\n   SP\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "721",
    "tags": [
        "arm",
        "stack",
        "pointer",
        "offset"
    ],
    "user": "pointers",
    "time": "Jul 4, 2018 at 13:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is no specific stack pointer register in ARM. By convention\n  <code>\n   R13\n  </code>\n  is used as the stack pointer. There is no specific push and pop style stack pointer operands either.\n </p>\n <p>\n  Pushing and popping from the stack is carried out using the\n  <code>\n   STM\n  </code>\n  (store to memory) and\n  <code>\n   LDM\n  </code>\n  (load from memory) operands. These operands can be modified with the post fixes\n  <code>\n   IA\n  </code>\n  and\n  <code>\n   DB\n  </code>\n  .\n  <code>\n   IA\n  </code>\n  is increment after, and\n  <code>\n   DB\n  </code>\n  is decrement before.\n </p>\n <p>\n  So\n  <code>\n   STMDB\n  </code>\n  means store to memory, decrementing before the store. I.e. pushing on to a full descending stack. The inverse of this would be\n  <code>\n   LDMIA\n  </code>\n  which is popping from a full descending stack.\n </p>\n <p>\n  Alternatively you can have\n  <code>\n   STMIA\n  </code>\n  and\n  <code>\n   LDMDB\n  </code>\n  which means pushing and popping on to and off of an empty ascending stack.\n </p>\n <p>\n  <code>\n   FD\n  </code>\n  is the synonym for full descending and\n  <code>\n   EA\n  </code>\n  is the synonym for empty ascending. So\n  <code>\n   STMDB\n  </code>\n  and\n  <code>\n   STMFD\n  </code>\n  are the same.\n  <code>\n   LDMIA\n  </code>\n  ,\n  <code>\n   LDMFD\n  </code>\n  are the same. And so on...\n </p>\n <p>\n  So a full instruction would be for example...\n </p>\n <pre><code>STMDB R13!, {R0 - R3}\n</code></pre>\n <p>\n  Which means push\n  <code>\n   R0\n  </code>\n  , then\n  <code>\n   R1\n  </code>\n  , then\n  <code>\n   R2\n  </code>\n  and then\n  <code>\n   R3\n  </code>\n  on to a full descending stack using\n  <code>\n   R13\n  </code>\n  as the stack point. The address being written too is updated for each registered pushed. The\n  <code>\n   !\n  </code>\n  means write back and means that\n  <code>\n   R13\n  </code>\n  is updated with the final address so it can be used again.\n </p>\n <p>\n  <code>\n   BL\n  </code>\n  (branch with link) does NOT affect the stack or the stack pointer. It merely copies the current\n  <code>\n   PC\n  </code>\n  (\n  <code>\n   R15\n  </code>\n  ) in to link (\n  <code>\n   R14\n  </code>\n  ) before the jump. A simple...\n </p>\n <pre><code>MOV R14, R15\n</code></pre>\n <p>\n  ... will return you back to the original address. However many may pop link straight in to PC at the end of a subroutine. For example...\n </p>\n <pre><code>.my_sub_routine\nSTMFD R13!, {R0, R1, R14}\n// Do stuff\nLDMFD R13!, {R0, R1, R15} // pop link straight in to PC meaning return.\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jul 4, 2018 at 13:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">in fact the newer ARM architectures do standardize R13 as SP, and STMFD/ LDMFD  instructions using it as PUSH/POP.</span>",
                    "time": null
                },
                {
                    "user": "cooperised",
                    "text": "<span class=\"comment-copy\">Moreover on most of the Cortex series cores, R13 (or SP) is an alias for one of two hardware-managed stack pointers, MSP or PSP, depending on mode and settings.  Things like interrupt requests cause automatic pushes to the active stack too.  R13 is very much a stack pointer on modern(ish) ARM architectures, and not just by convention.</span>",
                    "time": null
                }
            ]
        }
    ]
}