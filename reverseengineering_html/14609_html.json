{
    "title": "xor eax, eax in x64",
    "link": "https://reverseengineering.stackexchange.com/questions/14609/xor-eax-eax-in-x64",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have following code:\n </p>\n <pre><code>sub rsp, 40                 ; 00000028H\nlea rcx, OFFSET FLAT:$SG4237\ncall    printf\nxor eax, eax\nadd rsp, 40                 ; 00000028H\nret 0\n</code></pre>\n <p>\n  Why there is\n  <code>\n   xor eax, eax\n  </code>\n  , instead of\n  <code>\n   xor rax, rax\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "5k",
    "tags": [
        "disassembly",
        "assembly",
        "x86-64",
        "patch-reversing"
    ],
    "user": "J. Doe",
    "time": "Feb 9, 2017 at 18:13",
    "comments": [
        {
            "user": "newgre",
            "text": "<html><body><span class=\"comment-copy\">\n Because the return value is likely \"int\", which is 32-bit in most compiler models (LP64/LLP64).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://stackoverflow.com/q/11177137/995714\">\n  Why do x86-64 instructions on 32-bit registers zero the upper part of the full 64-bit register?\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In x64, any operation on a 32-bit register clears the top 32 bits of the corresponding 64-bit register too, so there's no need to use\n  <code>\n   xor rax, rax\n  </code>\n  which would necessitate an extra REX byte for encoding.\n </p>\n</div>\n</body></html>",
            "votes": "12",
            "user": "Igor Skochinsky",
            "time": "Feb 9, 2017 at 18:53",
            "is_accepted": true,
            "comments": []
        }
    ]
}