{
    "title": "Undocumented Model-Specific Register on Broadwell Microarchitecture",
    "link": "https://reverseengineering.stackexchange.com/questions/22239/undocumented-model-specific-register-on-broadwell-microarchitecture",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse the BIOS of a machine to learn something.\nThe bigger problem I'm facing is that during early initialization, the code is making heavy usage of MSRs, and most of the time, I found those not documented.\n </p>\n <p>\n  In a specific point of this BIOS, as an example, I found this function:\n </p>\n <pre><code>0000F575                    sub_F575        proc near               \n0000F575 60                                 pusha\n0000F576 B8 01 00 00 00                     mov     eax, 1\n0000F57B 0F A2                              cpuid\n0000F57D C1 C8 04                           ror     eax, 4\n0000F580 66 3D 6F 30                        cmp     ax, 306Fh       ; Haswell\n0000F584 74 06                              jz      short HaswellBroadwellStuffs\n0000F586 66 3D 6F 40                        cmp     ax, 406Fh       ; Broadwell\n0000F58A 75 0E                              jnz     short NoNeed4IvyBridge\n0000F58C\n0000F58C                    HaswellBroadwellStuffs:\n0000F58C B9 FC 01 00 00                     mov     ecx, 1FCh\n0000F591 0F 32                              rdmsr\n0000F593 0D 01 00 20 00                     or      eax, 200001h\n0000F598 0F 30                              wrmsr\n0000F59A\n0000F59A                    NoNeed4IvyBridge:\n0000F59A 61                                 popa\n0000F59B E8 02 06 00 00                     call    DummyProc_1\n0000F5A0 C3                                 retn\n0000F5A0                    sub_F575        endp\n</code></pre>\n <p>\n  Looking thorough the\n  <em>\n   Intel 64 and IA-32 Architectures Software Developerâ€™s Manual Volume 4: Model-Specific Registers\n  </em>\n  I found no evidence this\n  <strong>\n   0x1fc\n  </strong>\n  register existence for\n  <strong>\n   Haswell\n  </strong>\n  ,\n  <strong>\n   Broadwell\n  </strong>\n  or\n  <strong>\n   IvyBridge\n  </strong>\n  this BIOS is for.\nInstead few documentation on this register exists for different Intel versions:\n </p>\n <ul>\n  <li>\n   for\n   <strong>\n    Goldmont\n   </strong>\n   ,\n   <strong>\n    Nehalem\n   </strong>\n   , the register is named\n   <strong>\n    MSR_POWER_CTL\n   </strong>\n   and only bit #1 is documented\n  </li>\n  <li>\n   for\n   <strong>\n    Sandy Bridge\n   </strong>\n   is still named\n   <strong>\n    MSR_POWER_CTL\n   </strong>\n   but no further info are provided, instead it just says refer to\n   <em>\n    <a href=\"http://biosbits.org\" rel=\"noreferrer\">\n     http://biosbits.org\n    </a>\n   </em>\n   , where nothing useful was found.\n  </li>\n  <li>\n   for\n   <strong>\n    Skylake\n   </strong>\n   ,\n   <strong>\n    Kaby Lake\n   </strong>\n   ,\n   <strong>\n    Coffee Lake\n   </strong>\n   and\n   <strong>\n    Cannon Lake\n   </strong>\n   datasheet is more verbose; is still named\n   <strong>\n    MSR_POWER_CTL\n   </strong>\n   and the there bits: #1, #20 and #21 descriptions appears, still no evidences for bits #0 and #21 used in this function.\n  </li>\n </ul>\n <p>\n  <strong>\n   So my question\n  </strong>\n  : If anyone has info on the register I've mentioned, that would be nice if he/her wants to share with me; more important, I would appreciate if anyone would direct me on a reliable source of info on this topic other than Intel official manuals.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "397",
    "tags": [
        "x86-64",
        "bios"
    ],
    "user": "Alessandro",
    "time": "Oct 4, 2019 at 10:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Details of such low-level registers are often disclosed only to Intel's trusted partners under NDA since they're not intended to be accessed by the general application programmer but only by writers of BIOS or other system-level code. That said, sometimes you can find info in\n  <a href=\"https://github.com/tianocore/edk2-platforms/blob/master/Silicon/Intel/PurleyRefreshSiliconPkg/Include/Library/CpuPpmLib.h\" rel=\"nofollow noreferrer\">\n   unexpected places\n  </a>\n  ...\n </p>\n <pre><code>#define MSR_POWER_CTL                           0x1FC\n#define PCH_NEG_DISABLE                         (1 << 30)\n#define PCH_NEG_DISABLE_SHIFT                   30\n#define LTR_SW_DISABLE                          (1 << 29)  //LTR_IIO_DISABLE\n#define LTR_SW_DISABLE_SHIFT                    29\n#define PROCHOT_LOCK                            (1 << 27)\n#define PROCHOT_LOCK_SHIFT                      27\n#define PROCHOT_RESPONSE                    (1 << 26)\n#define PROCHOT_RESPONSE_SHIFT              26\n#define PWR_PERF_TUNING_CFG_MODE                (1 << 25)\n#define PWR_PERF_TUNING_CFG_MODE_SHIFT          25\n#define PWR_PERF_TUNING_ENABLE_DYN_SWITCHING    (1 << 24)\n#define PWR_PERF_TUNING_ENABLE_DYN_SHIFT        24\n#define PWR_PERF_TUNING_DISABLE_EEP_CTRL        (1 << 23)\n#define PWR_PERF_TUNING_DISABLE_EEP_SHIFT       23\n#define PWR_PERF_TUNING_DISABLE_SAPM_CTRL       (1 << 22)\n#define PWR_PERF_TUNING_DISABLE_SAPM_SHIFT      22\n#define DIS_PROCHOT_OUT                         (1 << 21)\n#define DIS_PROCHOT_OUT_SHIFT                   21\n#define EE_TURBO_DISABLE                    (1 << 19)\n#define EE_TURBO_DISABLE_SHIFT              19\n#define ENERGY_EFFICIENT_PSTATE_ENABLE          (1 << 18)\n#define ENERGY_EFFICIENT_PSTATE_ENABLE_SHIFT    18\n#define PHOLD_SR_DISABLE                        (1 << 17)\n#define PHOLD_SR_DISABLE_SHIFT                  17\n#define PHOLD_CST_PREVENTION_INIT               (1 << 16)\n#define PHOLD_CST_PREVENTION_INIT_SHIFT         16\n#define FAST_BRK_INT_EN                         (1 << 4)\n#define FAST_BRK_INT_EN_SHIFT                   4\n#define FAST_BRK_SNP_EN                         (1 << 3)\n#define FAST_BRK_SNP_EN_SHIFT                   3\n#define SAPM_IMC_C2_POLICY_EN                   (1 << 2)\n#define SAPM_IMC_C2_POLICY_SHIFT                2\n#define C1E_ENABLE                              (1 << 1)\n#define C1E_ENABLE_SHIFT                        1\n#define ENABLE_BIDIR_PROCHOT_EN                 (1 << 0)\n#define ENABLE_BIDIR_PROCHOT_EN_SHIFT           0\n#define POWER_CTL_MASK                          (PCH_NEG_DISABLE + LTR_SW_DISABLE + PWR_PERF_TUNING_CFG_MODE + \\\n    PWR_PERF_TUNING_ENABLE_DYN_SWITCHING + PWR_PERF_TUNING_DISABLE_EEP_CTRL + \\\n    PWR_PERF_TUNING_DISABLE_SAPM_CTRL + DIS_PROCHOT_OUT + ENABLE_BIDIR_PROCHOT_EN + C1E_ENABLE)\n</code></pre>\n <p>\n  This is not like a full datasheet but still better than nothing...\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "mirh",
            "time": "Mar 7, 2023 at 15:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}