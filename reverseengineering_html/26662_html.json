{
    "title": "How to split bytes into instructions in binary ELF file for x86",
    "link": "https://reverseengineering.stackexchange.com/questions/26662/how-to-split-bytes-into-instructions-in-binary-elf-file-for-x86",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on a static code injector for ELF files. I need to \"steal\" some bytes in order to write jump to my code on their place and then execute stolen instructions somewhere in the payload. However I don't know how to automate it. I will need to steal at least 5 bytes for my jump instruction, but obviously not always 5 bytes equal to the whole number of instructions, so I might have to\n  <code>\n   nop\n  </code>\n  several bytes.\n </p>\n <p>\n  What are the ways to distinguish instructions, given bytes in ELF binary( C/C++ preferably ) ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "164",
    "tags": [
        "x86",
        "c++",
        "linux",
        "elf",
        "injection"
    ],
    "user": "Nazar Pasternak",
    "time": "Dec 29, 2020 at 20:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The x86/x64 instruction set is variable length and there are no obvious instruction boundaries.  You can make use of a\n  <em>\n   length disassembler\n  </em>\n  to figure out how long each instruction is. There are a bunch of them available, hereâ€™s a few I found by a quick search:\n </p>\n <p>\n  <a href=\"https://github.com/greenbender/lend\" rel=\"nofollow noreferrer\">\n   https://github.com/greenbender/lend\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/Nomade040/length-disassembler\" rel=\"nofollow noreferrer\">\n   https://github.com/Nomade040/length-disassembler\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/GiveMeZeny/fde64\" rel=\"nofollow noreferrer\">\n   https://github.com/GiveMeZeny/fde64\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Dec 29, 2020 at 22:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}