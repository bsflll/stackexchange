{
    "title": "asm snippet to pseudo-code",
    "link": "https://reverseengineering.stackexchange.com/questions/25039/asm-snippet-to-pseudo-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm looking into a way to generate pseudo-code from snippet of assembly,\n </p>\n <p>\n  let's assume I have this ASM\n </p>\n <pre><code>    push    rbp\n    mov     rbp, rsp\n    mov     DWORD PTR [rbp-4], edi\n    mov     DWORD PTR [rbp-8], esi\n    mov     edx, DWORD PTR [rbp-4]\n    mov     eax, DWORD PTR [rbp-8]\n    add     eax, edx\n    pop     rbp\n    ret\n</code></pre>\n <p>\n  is there is a way to turn it into pseudo-code using the available decompilers?\n </p>\n <p>\n  if there is any exported API?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "radare2",
        "ghidra",
        "hexrays"
    ],
    "user": "zerocool",
    "time": "May 16, 2020 at 21:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can take the instructions, assemble them into hex values, for example by using:\n  <a href=\"https://defuse.ca/online-x86-assembler.htm#disassembly\" rel=\"nofollow noreferrer\">\n   Online disassembler\n  </a>\n  .\n </p>\n <p>\n  Then you get the byte representation:\n  <code>\n   \\x55\\x48\\x89\\xE5\\x89\\x7D\\xFC\\x89\\x75\\xF8\\x8B\\x55\\xFC\\x8B\\x45\\xF8\\x01\\xD0\\x5D\\xC3\n  </code>\n </p>\n <p>\n  With this, you can patch bytes in the binary, and then use the normal decompile functionality in\n  <code>\n   Ghidra\n  </code>\n  /\n  <code>\n   Ida\n  </code>\n  on the patched area.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "macro_controller",
            "time": "May 17, 2020 at 12:43",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can actually compile this with NASM depends on your preferred architecture, example command is below (I used  linux):\n </p>\n <pre><code>nasm -f elf64 -o ./sample.asm ./sample.o \nld -o ./sample ./sample.o \n\n\nglobal _start\n\nsection .text\n\n_start:\n\n    push    rbp\n    mov     rbp, rsp\n    mov     DWORD [rbp-4], edi\n    mov     DWORD [rbp-8], esi\n    mov     edx, DWORD [rbp-4]\n    mov     eax, DWORD [rbp-8]\n    add     eax, edx\n    pop     rbp\n    ret\n</code></pre>\n <p>\n  After compiling and linking, I used IDA with pseudo-code support as what @macro_controller mentioned above.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BSPFr.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/BSPFr.png\"/>\n  </a>\n </p>\n <p>\n  Here is the result.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/vk1qz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/vk1qz.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "ismael_akez",
            "time": "May 19, 2020 at 19:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}