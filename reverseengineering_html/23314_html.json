{
    "title": "How to decompile obfuscated Python code?",
    "link": "https://reverseengineering.stackexchange.com/questions/23314/how-to-decompile-obfuscated-python-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an executable file, which I am trying to decompile. I have already deduced that it was originally programmed in Python. I know that it was obfuscated with\n  <a href=\"https://github.com/dashingsoft/pyarmor\" rel=\"nofollow noreferrer\">\n   PyArmor\n  </a>\n  and possibly compiled with\n  <a href=\"https://github.com/pyinstaller/pyinstaller\" rel=\"nofollow noreferrer\">\n   PyInstaller\n  </a>\n  . I have tried multiple attempts at finding the source code, such as:\n </p>\n <ul>\n  <li>\n   Using CheatEngine to read the memory\n  </li>\n  <li>\n   Using IDA to read assembler code\n  </li>\n  <li>\n   Using multiple PyInstaller unpackers to get source code\n  </li>\n </ul>\n <p>\n  But all of them, to no avail. Is there any way I can get the source code of this file, and if so, how?\n </p>\n <p>\n  Here's the Stack Trace I got when I terminated the program with\n  <code>\n   CTRL + C\n  </code>\n  :\n </p>\n <pre><code>Traceback (most recent call last):\n  File \"<dist/obf\\bot.py>\", line 3, in <module>\n  File \"<frozen bot>\", line 798, in <module>\n  File \"<frozen keyvalidation>\", line 243, in checkStuff\n  File \"<frozen keyvalidation>\", line 150, in checkKey\n  File \"site-packages\\requests\\api.py\", line 116, in post\n  File \"site-packages\\requests\\api.py\", line 60, in request\n  File \"site-packages\\requests\\sessions.py\", line 533, in request\n  File \"site-packages\\requests\\sessions.py\", line 646, in send\n  File \"site-packages\\requests\\adapters.py\", line 449, in send\n  File \"site-packages\\urllib3\\connectionpool.py\", line 672, in urlopen\n  File \"site-packages\\urllib3\\connectionpool.py\", line 376, in _make_request\n  File \"site-packages\\urllib3\\connectionpool.py\", line 994, in _validate_conn\n  File \"site-packages\\urllib3\\connection.py\", line 360, in connect\n  File \"site-packages\\urllib3\\util\\ssl_.py\", line 370, in ssl_wrap_socket\n  File \"ssl.py\", line 412, in wrap_socket\n  File \"ssl.py\", line 850, in _create\n  File \"ssl.py\", line 1108, in do_handshake\nKeyboardInterrupt\n[36076] Failed to execute script bot\n</code></pre>\n</div>\n</body></html>",
    "votes": "-2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "decompilation",
        "python",
        "deobfuscation",
        "executable",
        "decompile"
    ],
    "user": "Xiddoc",
    "time": "Feb 22, 2020 at 18:10",
    "comments": [
        {
            "user": "ratchet freak",
            "text": "<html><body><span class=\"comment-copy\">\n it's more likely that it only contains no source code but instead python bytecode that you will need to find and decompile\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n How exactly did you deduce that \"it was originally programmed in Python\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Xiddoc",
            "text": "<html><body><span class=\"comment-copy\">\n Using\n <code>\n  CTRL + C\n </code>\n , I managed to crash the program. The error message matches that of one Python would spit out.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "lostsoul",
            "text": "<html><body><span class=\"comment-copy\">\n i think the possible way it's dump process with \"Windows Process Explorer\". But i don't know how extract deobfuscated bytecode from dump\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From the “frozen” text in the stack trace, it was probably processed with cx_Freeze or a similar tool. Usually they put the compiled Python files into a zip file embedded into the executable, so try looking for one (e.g. with binwalk)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 23, 2020 at 12:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}