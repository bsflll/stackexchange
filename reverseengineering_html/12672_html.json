{
    "title": "reverse engineering methodology",
    "link": "https://reverseengineering.stackexchange.com/questions/12672/reverse-engineering-methodology",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new to reverse engineering and I'm following the on line course provided by the\n  <a href=\"http://opensecurity.info\" rel=\"nofollow\">\n   opensecurity.info\n  </a>\n  site.\n  \n\n  The author provides a methodology for reverse engineering. He recommends to find a function of interest and pseudo code it.\n  \n\n  From the wording used,  it sounds like I should reverse the whole function from the its start to its end.\n  \n\n  <strong>\n   Is this really the recommended practice?\n  </strong>\n  \n\n  If my question isn't clear enough, here an hypothetical case:\nLet's say I want to understand the communication protocol used to exchange data between a malware and the command and control server. Let's say I found the recv call and this call is in the middle of an unknown function.\n  \n\n  <strong>\n   Should I really reverse this unknown function from its start or should I focus on the area of the code inside this function that calls \"recv\" and go from there?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "functions"
    ],
    "user": "Othman",
    "time": "May 23, 2016 at 9:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Should I really reverse this unknown function from its start\n  </p>\n </blockquote>\n <p>\n  <strong>\n   Disclaimer\n  </strong>\n  : This is just my opinion. That said, my answer:\n  <strong>\n   no\n  </strong>\n  , don't do that unless you really need to do that. One of the first things I always say to my students when I teach reverse engineering is actually that: never try to reverse engineer a function line-by-line unless you really need to do so (and my experience says that most of the time you don't need to do so).\n </p>\n <p>\n  My recommendation is a bit different:\n </p>\n <ul>\n  <li>\n   Find \"artifacts\" than can give you an abstract idea about what a function does: called/referenced function names (i.e., APIs), constants, etc...\n  </li>\n  <li>\n   After you have an abstract idea of what the function does, determine if you need to get more information from it.\n  </li>\n  <li>\n   If so, try to determine grouping basic blocks but without analysing line-by-line, what a set of basic blocks do, trying to focus on what you do not understand or what you need to answer.\n  </li>\n  <li>\n   If you still need more details or something is still unclear, do it basic block per basic block following the flow from the point that is not clear or from the point that you start to care.\n  </li>\n  <li>\n   If, still, you need more information or it's still unclear, do it instruction by instruction trying to focus specifically on what you do not understand or what you need to answer and, only if still you cannot answer your questions, resort to reverse the whole function line-by-line.\n  </li>\n </ul>\n <p>\n  Trying to go instruction by instruction or reversing the whole function when we really don't need to do so, it's easier to get lost/confused because we will be focusing on what some obscure instruction does or which flags it changes instead of focusing in answering the real questions. However, it will largely depend on why are you reverse engineering that thing. Are you trying to mimic/copy/extend an algorithm (i.e., a decryption algorithm) or recovering the source code for a binary? Then, yes, you will need to go instruction by instruction. Are you reverse engineering a piece of software/function in order to determine what it does? In general, no, you don't need to go instruction by instruction.\n </p>\n <p>\n  My 2 cents.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "joxeankoret",
            "time": "May 18, 2016 at 14:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">There is no \"methodology\", there are only imaginary constructs written up by random people. If there were a software engineering methodology, you'd just apply that one in reverse :D There are good practices, though, and what Joxean describes is one of them.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I suggest you took a look at the rest code, too. Finding something in specific can definitely be a breakthrough, but one line of code - especially in assembly - can't do a lot on its own. Look at the example you gave. You found how your malware communicates. Is that enough? Probably not. What is the nature of this communication? Is it a reverse shell? Is it used to transfer files? There are many different questions to be answered and - trust me - you will be very lucky if you can find them all at the same point of the code. Always look at the code around the area of interest you have. You might find functions that call other functions that do interesting stuff using the communication channel. One thing brings the other and at the end of the day, it will bring you the full structure and functionality of the malware.\n </p>\n <p>\n  P.S. Always use breakpoints when going from function to function.\n </p>\n <p>\n  Happy hunting!\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Chris Tsiakoulas",
            "time": "May 18, 2016 at 13:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}