{
    "title": "What is the pictured x86 technique/area called?",
    "link": "https://reverseengineering.stackexchange.com/questions/15300/what-is-the-pictured-x86-technique-area-called",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been reverse-engineering Windows PE files and I've discovered this pattern used quite often, making it a little more difficult to follow API calls. First, I'll go to the file's imports and then I will locate a specific import, such as\n  <strong>\n   WSAStartup\n  </strong>\n  , inside of the .idata section of the PE file pictured here:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ZaHCs.png\" rel=\"noreferrer\">\n   <img alt=\"idata section\" src=\"https://i.sstatic.net/ZaHCs.png\"/>\n  </a>\n </p>\n <p>\n  Upon hitting the\n  <code>\n   x\n  </code>\n  or\n  <code>\n   Ctrl-x\n  </code>\n  keys to cross-reference where this function is called, it is only \"called\" in one spot recognized by IDA, which looks like this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/3FhEt.png\" rel=\"noreferrer\">\n   <img alt=\"Jumps to functions\" src=\"https://i.sstatic.net/3FhEt.png\"/>\n  </a>\n </p>\n <p>\n  The question here is,\n  <em>\n   what is the above-pictured structure/technique?\n  </em>\n  It directly contrasts the \"typical\" setup that I come across which is simply going to .idata, cross-referencing a function, and having it show me areas\n  <em>\n   directly called in code\n  </em>\n  . There are also no direct references to the memory addresses in which each of these jumps reside, such as 14658844h.\n </p>\n <p>\n  I'm going to add one more figure here of a different file but similar sighting, in which case, this instance appears on the control-flow graph and is very obvious by the \"orphaned\" jmps you can see just above the red arrow:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SrwIC.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/SrwIC.png\"/>\n  </a>\n </p>\n <p>\n  My hypothesis here is that somehow these memory addresses (function ptrs) pictured in Figure 2 where the jumps reside, are somehow indirectly referenced in the code using some offsets to help mask the usage of these API functions. Is this a compiler feature or is this a manual doing?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "255",
    "tags": [
        "ida",
        "assembly",
        "x86"
    ],
    "user": "the_endian",
    "time": "May 5, 2017 at 17:49",
    "comments": [
        {
            "user": "Ian Cook",
            "text": "<html><body><span class=\"comment-copy\">\n Igor has answered pretty much the same question on Stack Overflow so I can do no better than point you to his answer there and let him answer it here himself!\n <a href=\"http://stackoverflow.com/a/22688670\">\n  stackoverflow.com/a/22688670\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n @IanCook awesome, thanks for that. Do you have any tips or best practices for tracking these calls down in the code? Also, is there a specific area of study which covers this... For example would something like this be in an x86 assembly text or is this specific to the compiler completely?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n This is msvc (and vb6?) specific. The reason is that it saves in the amount of relocations because calls to these apis can be done with the relative call (E8xxxxxxxx) instruction.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Those are indirect jumps caused by the compiler or/and the linker in order to locate an external function.\n </p>\n <p>\n  According to how the function is defined, both the linker and the compiler may end up in emitting a stub, thus making the call stack insanely deep during the analysis.\n </p>\n <p>\n  As stated in the comments, this SO answer\n  <a href=\"https://stackoverflow.com/a/22688670/9139384\">\n   Indirect jumps for DLL function calls\n  </a>\n  precisely explains what is going on under the hood.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Yennefer",
            "time": "Jan 7, 2020 at 10:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}