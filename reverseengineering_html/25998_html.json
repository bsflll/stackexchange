{
    "title": "debugging an older version of libc",
    "link": "https://reverseengineering.stackexchange.com/questions/25998/debugging-an-older-version-of-libc",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to understand heap exploitation better. Therefore, I compiled the following file:\n  <a href=\"https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c\" rel=\"nofollow noreferrer\">\n   https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c\n  </a>\n </p>\n <p>\n  I have the newest libc. How can I debug the following file with an older version? I know I can try to compile it an older one, but it seems to me like a very daunting task. I tried to load an older libc by downloading one from libc.blukat.me with pwntools, but it doesn't see it.\n </p>\n <p>\n  edit: the target cpu arch is x86 64bit.\nThank you!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "684",
    "tags": [
        "elf",
        "libc"
    ],
    "user": "anon",
    "time": "Sep 28, 2020 at 20:29",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Well, this is a tough one and you don't even mention the target CPU. Suppose you can find the original media for\n <a href=\"https://repology.org/project/glibc/versions\" rel=\"nofollow noreferrer\">\n  Fedora 26\n </a>\n , that might work. A chroot and building glibc yourself could also be an option, but you seem reluctant to do that. If you are ready to tinker\n <a href=\"http://www.bitwagon.com/rtldi/rtldi.html\" rel=\"nofollow noreferrer\">\n  this\n </a>\n could be worth a shot.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "anon",
            "text": "<html><body><span class=\"comment-copy\">\n Hi @0xC0000022L, I added the info, thanks. I'm quite surprised that it's so complicated. How do researchers inspect older versions?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Researchers will usually not be afraid to build it from scratch. See, the issue is that even though you may be able to get a version that formally carries the version number 2.25, it stands to reason that - unless you happen to get the earliest available package for that distro - you will get something that is patched\n <i>\n  somehow\n </i>\n . So building stuff from scratch is typically the easiest with your requirements. Projects like LFS, Yocto and Buildroot make it almost trivial to build complete systems (suitable for chroot) tailored to your needs.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   libc\n  </code>\n  versions are tied to the corresponding\n  <code>\n   ld.so\n  </code>\n  (dynamic linker) versions. You have a few options:\n </p>\n <ul>\n  <li>\n   Run the program in a Docker container with an OS that corresponds to the target libc. (For example,\n   <code>\n    docker run -it -v $(pwd):/run ubuntu:20.04 /run/binary\n   </code>\n   ). This has the advantage that if your binary depends on any other system libraries, you can get the right versions via\n   <code>\n    apt\n   </code>\n   or similar.\n  </li>\n  <li>\n   Extract both\n   <code>\n    ld.so\n   </code>\n   and\n   <code>\n    libc.so\n   </code>\n   from a compatible version or libc package (e.g.\n   <a href=\"https://packages.ubuntu.com/focal/amd64/libc6/download\" rel=\"nofollow noreferrer\">\n    https://packages.ubuntu.com/focal/amd64/libc6/download\n   </a>\n   ) and run a command like\n   <code>\n    LD_PRELOAD=./libc.so ./ld.so ./binary\n   </code>\n   .\n  </li>\n </ul>\n <p>\n  Note that if you use a\n  <code>\n   libc\n  </code>\n  without using the corresponding\n  <code>\n   ld.so\n  </code>\n  (for example, if you do\n  <code>\n   LD_LIBRARY_PATH=. ./binary\n  </code>\n  and the\n  <code>\n   libc\n  </code>\n  in the directory does not match your system\n  <code>\n   ld.so\n  </code>\n  ), you will probably get segfaults or unexpected behaviour, as\n  <code>\n   libc\n  </code>\n  and\n  <code>\n   ld.so\n  </code>\n  use shared data structures that change between versions.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "nneonneo",
            "time": "Oct 25, 2021 at 20:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You probably want to set\n  <code>\n   LD_LIBRARY_PATH\n  </code>\n  to point to where you have the other libc version.\n </p>\n <p>\n  You may also need to rename it to be e.g. 'libc.so.6'.  You can see the exact name that your binary loads with\n  <code>\n   ldd\n  </code>\n  .\n </p>\n <pre><code>$ ldd /bin/sh\n    linux-vdso.so.1 =>  (0x00007fff107d8000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fde26974000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007fde26f66000)\n</code></pre>\n <p>\n  You can verify that your environment variable worked in the same way.  For example, if you copy libc to\n  <code>\n   /home/pwntools\n  </code>\n  , you might see this:\n </p>\n <pre><code>$ LD_LIBRARY_PATH=\"$PWD\" ldd /bin/sh\n    linux-vdso.so.1 =>  (0x00007ffda30f5000)\n    libc.so.6 => /home/pwntools/libc.so.6 (0x00007f7b26225000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f7b26817000)\n</code></pre>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "Zach Riggle",
            "time": "Sep 28, 2020 at 21:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "anon",
                    "text": "<span class=\"comment-copy\">Hi! thanks. I downloaded the ld of that version (2.44 9) and put it into the directory as well. When executing <code>LD_LIBRARY_PATH=\"$PWD\" ldd foo</code> I receive a seg fault. Both of the files have necessary permissions. Do you have any idea why?</span>",
                    "time": null
                }
            ]
        }
    ]
}