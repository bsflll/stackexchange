{
    "title": "Length requirement on IOLI crackme input",
    "link": "https://reverseengineering.stackexchange.com/questions/15287/length-requirement-on-ioli-crackme-input",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I'm just starting to learn reverse engineering and binary exploitation and going through the RPI course where the first lab set is drawn from the IOLI crackmes available on\n  <a href=\"https://github.com/Maijin/Workshop2015/tree/master/IOLI-crackme/bin-linux\" rel=\"nofollow noreferrer\">\n   Github\n  </a>\n  . I could post all of the dissassembly here if it would help.\n </p>\n <p>\n  I'm working on number 5 and I'm confused on one aspect. I understand how to get the solution and get the password ok, but there seems to be a length on the input that I can't trace back to any of the assembly.\n </p>\n <p>\n  The numbers can add up to more than the 10h and the last one can be odd, but once the input is passed 9 characters, it's not accepted.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/nHHbl.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/nHHbl.png\"/>\n  </a>\n </p>\n <p>\n  I'm using gdb and ida and whatever other tools seem helpful, but the specific tools don't matter much to me. Post an explanation with a radare output if you want.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "175",
    "tags": [
        "x86",
        "linux",
        "crackme"
    ],
    "user": "Praet",
    "time": "May 4, 2017 at 22:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The reason for your observation is an overflow in the sscanf call that is done in the function checking if the number is even or odd.\nWhile the check for your 9-character password succeeds the 10-character password produces an overflow and the check fails.\n </p>\n <p>\n  To verify, compile and run the following C code:\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\n\n\nint main ( ) \n{\n    int number;\n\n    sscanf ( \"222222222\", \"%d\", &number );\n    printf ( \"Number (9 digits): %d\n\", number ); \n\n    sscanf ( \"2222222222\", \"%d\", &number );\n    printf ( \"Number (10 digits): %d\n\", number );\n\n    if ( number & 0x01 == 0 ) {\n        printf ( \"Even!\n\" );\n    }\n    else {\n        printf ( \"Odd!\n\" );\n    }\n    return 0;\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "bns",
            "time": "May 9, 2017 at 14:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Praet",
                    "text": "<span class=\"comment-copy\">Oh, gotcha. Because it's reading as a signed decimal, the max you get for a 32 bit value isn't enough to store 10 2's. It's not the length of the input but the magnitude overflowing the integer range. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "bns",
                    "text": "<span class=\"comment-copy\">Yes, exactly. If you like my answer, you are free to accept it :-)</span>",
                    "time": null
                }
            ]
        }
    ]
}