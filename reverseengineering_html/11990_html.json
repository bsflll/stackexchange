{
    "title": "Reversing Qt application",
    "link": "https://reverseengineering.stackexchange.com/questions/11990/reversing-qt-application",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to reverse-engineer a Qt crackme written for linux. I would like to follow where introduced text gets. I have found\n  <a href=\"http://silmor.de/qtstuff.printqstring.php\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  <code>\n   gdb\n  </code>\n  macro to print QStrings (Qt5). To test it I wrote a simple helloworld application containing:\n </p>\n <pre><code>QString str(\"almafa\");\nqDebug() << str;\n</code></pre>\n <p>\n  This prints the QString as expected.\n </p>\n <pre><code>(gdb) printqs5static str\n(Qt5 QString)0xffffdf50 length=6: \"almafa\"\n</code></pre>\n <p>\n  After this I tried to inspect QStrings where no variable names are present.\n </p>\n <p>\n  The compiled code looks like (in\n  <code>\n   radare2\n  </code>\n  ):\n </p>\n <pre><code>|           0x00400ab7      488d45b0       leaq -0x50(%rbp), %rax\n|           0x00400abb      488d55c0       leaq -0x40(%rbp), %rdx\n|           0x00400abf      4889d6         movq %rdx, %rsi\n|           0x00400ac2      4889c7         movq %rax, %rdi\n|           0x00400ac5      e816feffff     callq sym.QMessageLogger::debug\n|           0x00400aca      488d55a0       leaq -0x60(%rbp), %rdx\n|           0x00400ace      488d45b0       leaq -0x50(%rbp), %rax\n|           0x00400ad2      4889d6         movq %rdx, %rsi\n|           0x00400ad5      4889c7         movq %rax, %rdi\n|           0x00400ad8      e863020000     callq sym.QDebug::operator__\n</code></pre>\n <p>\n  I do not have experience debugging Qt applications, but I expected that from the above code snippet that at\n  <code>\n   0x400ad8\n  </code>\n  either\n  <code>\n   rsi\n  </code>\n  or\n  <code>\n   rdi\n  </code>\n  will be the QString. Unfortunately\n  <code>\n   printqs5static $rsi\n  </code>\n  is not working.\n  <code>\n   i r $rsi\n  </code>\n  gives\n  <code>\n   0x7ffffffdf50\n  </code>\n  , the address from\n  <code>\n   printqs5static str\n  </code>\n  result.\n </p>\n <p>\n  The question is how to inspect QStrings when only memory addresses are available?\n </p>\n <p>\n  Edit: The web page I am referring is down at this moment, but a cashed version is\n  <a href=\"http://webcache.googleusercontent.com/search?q=cache:http://silmor.de/qtstuff.printqstring.php\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n  <a href=\"https://stackoverflow.com/questions/10492290/gdb-pretty-printers-for-qt5\">\n   <code>\n    gdb\n   </code>\n   pretty printers\n  </a>\n  are also able to print QStrings if there are symbolic names available. Still do not know how to work without them.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "qt"
    ],
    "user": "robert",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "broadway",
            "text": "<html><body><span class=\"comment-copy\">\n I'd take a look at the following related question:\n <a href=\"http://reverseengineering.stackexchange.com/questions/6828/hints-to-reverse-engineering-a-qt-software\" title=\"hints to reverse engineering a qt software\">\n  reverseengineering.stackexchange.com/questions/6828/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Did you try\n  <code>\n   printqs5static $rdi\n  </code>\n  ? Assuming that call goes to the function with the prototype\n  <code>\n   QDebug & QDebug::operator<<(const QString & s)\n  </code>\n  , then it's\n  <code>\n   rdi\n  </code>\n  that should contain the\n  <code>\n   QString\n  </code>\n  , not RSI.\n </p>\n <p>\n  Another option is to dump memory around\n  <code>\n   rdi\n  </code>\n  and\n  <code>\n   rsi\n  </code>\n  . I doubt the object is super complicated, so there should be a pointer to a normal C string nearby.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Gdogg",
            "time": "Feb 19, 2016 at 0:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}