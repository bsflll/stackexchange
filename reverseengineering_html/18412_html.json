{
    "title": "Basic hello world stack manipulation troubles",
    "link": "https://reverseengineering.stackexchange.com/questions/18412/basic-hello-world-stack-manipulation-troubles",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm a beginner in reverse engineering, and as a beginner I started to read\n  <a href=\"https://beginners.re/\" rel=\"nofollow noreferrer\">\n   \"Reverse Engineering for beginers\"\n  </a>\n  .\n  \n\n  Here is the hello world program from the book (taken from chapter 3, page 12) :\n </p>\n <blockquote>\n  <p>\n   Now let’s try to compile the same C/C++ code in the GCC 4.4.1 compiler in Linux:\n  gcc 1.c -o 1 Next, with the assistance of the IDA disassembler, let’s see how\n  the main() function was created. IDA, like MSVC, uses Intel-syntax5.\n  </p>\n </blockquote>\n <pre><code>main proc near\n\nvar_10 = dword ptr -10h\n\n     push ebp\n     mov ebp, esp\n     and esp, 0FFFFFFF0h\n     sub esp, 10h\n     mov eax, offset aHelloWorld ; \"hello, world\n\"\n     mov [esp+10h+var_10], eax\n     call _printf\n     mov eax, 0\n     leave\n     retn\nmain endp\n</code></pre>\n <p>\n  There are two lines I don't understand at all :\n </p>\n <ul>\n  <li>\n   <code>\n    and esp, 0FFFFFFF0h\n   </code>\n  </li>\n  <li>\n   <code>\n    sub esp, 10h\n   </code>\n  </li>\n </ul>\n <p>\n  From what I understood from the book, we add\n  <code>\n   0FFFFFFF0h\n  </code>\n  (equals -16) value to ESP in order to align the stack to a 16byte boundary for optimisation.\n  \n\n  My question is : why do we add -16 and then substract 16 to the stack? It seems pointless to me, can't we substract directly 32?\nSecond, if I'm understanding well:\n </p>\n <ul>\n  <li>\n   the program starts with EBP = ESP, because nothing is on the stack.\n  </li>\n  <li>\n   Then EBP is pushed to the stack. Assuming the program is 64bit, ESP is now EBP - 8 (because of the 64bits). So now we have ESP != EBP.\n  </li>\n  <li>\n   Then we copy the content of ESP into EBP. So we have EBP = ESP, and EBP = fristEBP (EBP when the program started) - 8.\n  </li>\n </ul>\n <p>\n  Why do we need to modify the value of EBP?\n  <a href=\"https://stackoverflow.com/questions/4584089/what-is-the-function-of-the-push-pop-instructions-used-on-registers-in-x86-ass\">\n   PUSH instruction is supposed to change the value of ESP\n  </a>\n  , not EBP, so why would there be any problem not modifying EBP value at the function prolog?\n </p>\n <p>\n  \n\n  \n\n  So now we have EBP = ESP, and both are fristEBP (EBP when the program started) - 8. So now we are adding -16 to the stack, so ESP becomes ESP - 16 (ESP - 24 if we consider that we've been adding -8 to the stack).\n  \n\n  What is -24 have to do with a 16byte boundary?\nWhy do we substract 16 again from the stack with\n  <code>\n   sub esp, 10h\n  </code>\n  ?\n </p>\n <p>\n  \n\n  Notes : I'm sorry for the english, and sorry if I'm asking dumb questions, the book isn't clear enought and I failed to find explainations on the net.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "340",
    "tags": [
        "c",
        "static-analysis",
        "stack",
        "gcc",
        "intel"
    ],
    "user": "Nark",
    "time": "May 31, 2018 at 9:27",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n and not add aligns the stack to 16 byte boundary   ie 123456a1 & fffffff0 will result in 123456a0\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nark",
            "text": "<html><body><span class=\"comment-copy\">\n Isn't there a risk of loosing data?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's not\n  <code>\n   add\n  </code>\n  in the first opcode. It's\n  <code>\n   and\n  </code>\n  . So it will clear the lower nibble for the last byte in the address. This is how the alignment is done and not by adding anything. Only later you\n  <code>\n   sub\n  </code>\n  16 to have room for the local variables.\n </p>\n <blockquote>\n  <p>\n   Why do we need to modify the value of EBP?\n  </p>\n </blockquote>\n <p>\n  We use\n  <code>\n   EBP\n  </code>\n  to store the initial\n  <code>\n   ESP\n  </code>\n  value.\n  <code>\n   EBP\n  </code>\n  is pointing to the current stack frame. This is the place for local variables created withing the function. Before we modify\n  <code>\n   EBP\n  </code>\n  it is stored on the stack so that we can restore it before we leave the function.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "May 31, 2018 at 9:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nark",
                    "text": "<span class=\"comment-copy\">Okay I get it, but why add 0FFFFFFF0h and not 0FFFFFFF0F if we want to clear the lower nibble?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">lower nibble are the bits <code>3-0</code> so why we would want to put 0 on bits <code>7-4</code> to do that?</span>",
                    "time": null
                },
                {
                    "user": "Nark",
                    "text": "<span class=\"comment-copy\">I missread, sorry</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">ok, no worries!</span>",
                    "time": null
                }
            ]
        }
    ]
}