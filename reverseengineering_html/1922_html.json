{
    "title": "Locating Linux Kernel Symbols on ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/1922/locating-linux-kernel-symbols-on-arm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Igor posted a great\n  <a href=\"https://stackoverflow.com/a/14811668/139463\">\n   answer\n  </a>\n  previously on SO about the format of the Linux kernel image on ARM.\n </p>\n <p>\n  Assuming I can't boot my kernel image, can someone give me pointers on finding this compressed symbol table in the binary?\n </p>\n</div>\n</body></html>",
    "votes": "13",
    "answers": 3,
    "views": "11k",
    "tags": [
        "linux",
        "arm"
    ],
    "user": "mrduclaw",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n on what basis do you assume there are symbols? It is possible they have been stripped, because they're only needed - for example - to load kernel modules. If everything is linked into the kernel there is no need to have symbols. ARM being used disproportionately on embedded devices, there could be good reasons to strip symbols out of concern for size. On a (similar)\n <i>\n  running\n </i>\n kernel (or in an emulator like QEMU), have you tried Igor's suggestions to see whether symbols exist?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrduclaw",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L I have a running copy of the kernel and can\n <code>\n  cat /proc/kallsyms\n </code>\n but they don't have the addresses, just the names (addresses appear as 0).  I'm trying to understand (1) where these names are coming from -- I'm assuming it's from that compressed table, but I'm academically interested in seeing it; (2) how to resolve the addresses.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mellowcandle",
            "text": "<html><body><span class=\"comment-copy\">\n 0xC0000022L keeping the symbol is an option you can choose on menu config. Without symbols kernel oops will be meaningless. I have strong reason to believe that the symbols weren't stripped.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrduclaw",
            "text": "<html><body><span class=\"comment-copy\">\n @Mellowcandle do you happen to know which menu config option removes the symbols?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @mrduclaw: fair enough, just trying to make sure we all aren't chasing a ghost ;) - Mellowcandle:\n <i>\n  if\n </i>\n size is a main motivation then kernel OOPS are meaningless by themselves, because if the kernel doesn't fit on the device, it won't run anyway :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After decompressing and loading the kernel, you need to find a couple of tables that encode the compressed symbol table. These are (in the usual order they are placed in binary):\n </p>\n <ul>\n  <li>\n   <code>\n    kallsyms_addresses\n   </code>\n   - a table of addresses to all public symbols in the kernel\n  </li>\n  <li>\n   <code>\n    kallsyms_num_syms\n   </code>\n   - not a table but just an integer with total number of symbols (should match previous table)\n  </li>\n  <li>\n   <code>\n    kallsyms_names\n   </code>\n   - a list of length-prefixed byte arrays that encode indexes into the token table\n  </li>\n  <li>\n   <code>\n    kallsyms_token_table\n   </code>\n   - a list of 256 zero-terminated tokens from which symbol names are built\n  </li>\n  <li>\n   <code>\n    kallsyms_token_index\n   </code>\n   - 256 shorts pointing to the corresponding entry in\n   <code>\n    kallsyms_token_table\n   </code>\n  </li>\n </ul>\n <p>\n  They're not hard to find with some experience. A good way to find the first one is to look for several 0xC0008000 values in a row, because a typical kernel symbol table starts like this:\n </p>\n <pre><code>C0008000 T __init_begin\nC0008000 T _sinittext\nC0008000 T _stext\nC0008000 T stext\n</code></pre>\n <p>\n  After locating the tables the symbol recovery is trivial. I made a script for IDA that does it automatically, you can find it\n  <a href=\"http://www.hexblog.com/?p=130\">\n   here\n  </a>\n  (\n  <code>\n   kallsyms.py\n  </code>\n  in the tools zip).\n </p>\n <p>\n  For more the details of how it's implemented in the kernel, see\n  <code>\n   kernel/kallsyms.c\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "Igor Skochinsky",
            "time": "Apr 25, 2013 at 4:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Ah, this is exactly what I was looking for.  Thank you!  So far I was able to identify the <code>kallsyms_addresses</code>, <code>kallsyms_num_syms</code>, and <code>kall_syms_names</code>.  I <i>thought</i> I had located the other two, but your script failed to decode the names; I'm sure I did something wrong.  It seems difficult to know how large the <code>kallsyms_names</code> table will be.  Do you have any suggestions? Thank you again!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><code>kallsyms_token_table</code> should be pretty obvious - it will look similar to <code>\"tcp_\",0,\"ca\",0,\"unc_\",0,...</code> etc.</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Damn, I think that's the one I found.  I'll play with it some more.  I'm sure it's something incredibly silly on my part.  Thanks again!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You mentioned that you do have a running kernel available.  It is possible to obtain symbol information from a running kernel by reading\n  <code>\n   /proc/kallsyms\n  </code>\n  .  On newer distributions, this information is disabled by default for security reasons (all symbols will be displayed as 0x0 addresses), but you can manually enable it by running the following command as root:\n </p>\n <p>\n  <code>\n   echo 0 > /proc/sys/kernel/kptr_restrict\n  </code>\n </p>\n <p>\n  Once you've obtained the list of kernel symbols/address pairs, it should be easy to convert to any format desired, e.g. an IDA\n  <code>\n   .idc\n  </code>\n  script for import.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "0xC0000022L",
            "time": "Apr 25, 2013 at 14:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mncoppola",
                    "text": "<span class=\"comment-copy\">@0xC0000022L He responded to you in the comments: \"I have a running copy of the kernel and can cat /proc/kallsyms but they don't have the addresses, just the names (addresses appear as 0).\"</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a bit tricky to answer without getting my hands on the file and verifying a few assumptions based on the question and the linked answer. However, let me try, perhaps we can extend it further if you elaborate more on some aspects of the file.\n </p>\n <p>\n  We know it's an ARM file and from your description this pretty much sounds like\n  <a href=\"http://www.stlinux.com/u-boot/mkimage/kernel-images\" rel=\"nofollow noreferrer\">\n   an ARM kernel image for U-Boot\n  </a>\n  . Now the problem is that I cannot know whether that's true, but you could run the oft mentioned\n  <code>\n   binwalk\n  </code>\n  or\n  <code>\n   firmware-mod-kit\n  </code>\n  on the file to see what that gives you.\n </p>\n <p>\n  <strong>\n   If\n  </strong>\n  this is an ARM kernel image for\n  <a href=\"http://www.denx.de/wiki/U-Boot\" rel=\"nofollow noreferrer\">\n   U-Boot\n  </a>\n  , you can likely get to the\n  <code>\n   gzip\n  </code>\n  data by skipping the first 64 Bytes of the image (see\n  <a href=\"https://stackoverflow.com/q/2658995/476371\">\n   this answer over at StackOverflow\n  </a>\n  ). The gist is:\n </p>\n <pre><code>dd if=<image> of=<recovered file> bs=64 skip=1\n</code></pre>\n <p>\n  This skips 1 block of 64 bytes and otherwise writes the data from\n  <code>\n   <image>\n  </code>\n  into\n  <code>\n   <recovered file>\n  </code>\n  . Essentially it reverses - in part - the effects of the\n  <a href=\"http://linux.die.net/man/1/mkimage\" rel=\"nofollow noreferrer\">\n   <code>\n    mkimage\n   </code>\n  </a>\n  tool, which is part of U-Boot.\n </p>\n <p>\n  Now, assuming everything so far works - and that is a huge assumption - you should be able to decompress (\n  <code>\n   gzip -d\n  </code>\n  ) the resulting file and end up with something you can hopefully\n  <code>\n   grep\n  </code>\n  . If I was you I'd then use\n  <code>\n   file\n  </code>\n  to check what kind of file it is and process it further if I happened to get anything meaningful out of it. If not, I would treat the file with\n  <code>\n   binwalk\n  </code>\n  again and failing that run\n  <code>\n   strings\n  </code>\n  on it.\n </p>\n <hr/>\n <p>\n  <strong>\n   Edit x+1:\n  </strong>\n </p>\n <p>\n  Okay, tried the process myself. Downloaded\n  <a href=\"http://maemo.org/packages/package_instance/view/fremantle_extras-devel_free_armel/kernel-power-bootimg/2.6.28-10power51r1/\" rel=\"nofollow noreferrer\">\n   this Debian package\n  </a>\n  , unpacked it, got a\n  <code>\n   zImage-2.6.28.10-power51\n  </code>\n  which I then looked at in 010 Editor and it's true, this is an ARM kernel image according to the marker (see reading section below):\n </p>\n <p>\n  <img alt=\"010 Editor showing the zImage\" src=\"https://i.sstatic.net/bS2Vz.png\"/>\n </p>\n <p>\n  After that I tried to skip the first 64 Byte and then decompress the rest, to no avail. Investigating a bit more.\n </p>\n <p>\n  If you manage to get more information using this incomplete answer, please edit your question and I'll amend my answer once I notice your edit, to add more (hopefully useful) information.\n </p>\n <p>\n  <strong>\n   Edit x+2:\n  </strong>\n </p>\n <p>\n  Okay, for the zImage in question it turns out\n  <a href=\"http://code.google.com/p/binwalk/\" rel=\"nofollow noreferrer\">\n   <code>\n    binwalk\n   </code>\n  </a>\n  , mentioned in my original answer, can at least handle the file and outputs:\n </p>\n <pre><code>12900           0x3264          gzip compressed data, from Unix, last modified: Mon Jul 23 13:41:37 2012, max compression\n</code></pre>\n <p>\n  Lovely. Do let's run\n  <code>\n   dd\n  </code>\n  to extract the\n  <code>\n   gzip\n  </code>\n  stuff and then extract it:\n </p>\n <pre><code>dd if=zImage-2.6.28.10-power51 of=extract.gz bs=12900 skip=1 && gunzip extract.gz && ls -l extract\n</code></pre>\n <p>\n  Once I extracted it, I ran\n  <code>\n   binwalk\n  </code>\n  again after noticing that\n  <code>\n   file\n  </code>\n  didn't yield a result:\n </p>\n <pre><code>DECIMAL         HEX             DESCRIPTION\n-------------------------------------------------------------------------------------------------------\n135456          0x21120         gzip compressed data, from Unix, last modified: Mon Jul 23 13:38:47 2012, max compression\n973460          0xEDA94         ELF\n1070320         0x1054F0        CramFS filesystem, big endian size 2126262976 CRC 0xdc0a0e1, edition 4040895977, 78662882 blocks, 271618533 files\n</code></pre>\n <p>\n  However, I don't want to  proceed now without further input from you. Just an example how it\n  <em>\n   could\n  </em>\n  be investigated. One more thing\n  <code>\n   strings\n  </code>\n  <em>\n   does\n  </em>\n  produce a list of symbols, but since I presume you want symbols and their addresses, I reckon there is more to be investigated.\n </p>\n <hr/>\n <h2>\n  Further reading:\n </h2>\n <ul>\n  <li>\n   <a href=\"http://www.simtec.co.uk/products/SWLINUX/files/booting_article.html\" rel=\"nofollow noreferrer\">\n    this documentation\n   </a>\n   to verify whether this indeed is an ARM kernel image in the format we expect/assume. In particular check the assumption that\n   <code>\n    0x016F2818\n   </code>\n   can be found at offset\n   <code>\n    0x24\n   </code>\n   .\n  </li>\n  <li>\n   <p>\n    <a href=\"http://forum.xda-developers.com/showthread.php?t=871989&page=20\" rel=\"nofollow noreferrer\">\n     this forum entry\n    </a>\n    , in particular the post by user fattire, which mentions\n   </p>\n   <blockquote>\n    <p>\n     There's a 64 byte header you have to cut off of uRamdisk/uRecRam:\n    </p>\n    <p>\n     <code>\n      dd if=uRamdisk of=uRamdisk.cpio.gz bs=64 skip=1\n     </code>\n    </p>\n    <p>\n     <code>\n      gunzip uRamdisk.cpi.gz\n     </code>\n    </p>\n    <p>\n     <code>\n      cpio -i -F uRamdisk.cpio\n     </code>\n    </p>\n   </blockquote>\n   <p>\n    which essentially implies that you have to expect an\n    <code>\n     initrd\n    </code>\n    (hence the CPIO format) at offset 64. That is, the \"kernel image\" would actually turn out to be the old kernel format which embedded the\n    <code>\n     initrd\n    </code>\n    (also see\n    <code>\n     mkimage\n    </code>\n    man page under \"Create old legacy image\").\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}