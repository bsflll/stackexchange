{
    "title": "How can I get xrefs to class member variables in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/26284/how-can-i-get-xrefs-to-class-member-variables-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on a decompilation of a windows PE (with its full debug symbols in a PDB) and I'm using IDA to help with it.\n </p>\n <p>\n  I want to know how I can get a list of all references to a given class member variable. When I press 'X' in a name that is a class member variable in the decompiler window it only shows xrefs to it within the actual function being decompiled. I want to see the references in all of the functions. Is that even possible without coding a script?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "pe"
    ],
    "user": "underthevoid",
    "time": "Nov 11, 2020 at 6:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The other answer is wrong; it's totally possible (assuming the IDB already has a type for the structure in question, and that type has been applied to arguments/variables in Hex-Rays).\n </p>\n <p>\n  In IDA 7.4 and above (I think; might have been 7.3), right-click the variable and press \"Jump to xref globally\", as follows:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/7UOJC.png\" rel=\"noreferrer\">\n   <img alt=\"Jump to xref globally\" src=\"https://i.sstatic.net/7UOJC.png\"/>\n  </a>\n </p>\n <p>\n  You'll get a popup with all global x-refs, as follows:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/oYl5Y.png\" rel=\"noreferrer\">\n   <img alt=\"Global cross references\" src=\"https://i.sstatic.net/oYl5Y.png\"/>\n  </a>\n </p>\n <p>\n  This is based on caching, so the first time you do it, you'll want to right-click and press \"refresh\" as in the image above (which will take a while for large databases, but is totally worth it -- this is one of my most frequently-used features in Hex-Rays).\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Rolf Rolles",
            "time": "Nov 12, 2020 at 4:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "underthevoid",
                    "text": "<span class=\"comment-copy\">Thanks for the answer! Sadly my license expired at 7.1. How feasible would it be to be done through scripting? I don't have much knowledge of IDA scripting.</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Pretty easy. Derive a class off of <code>ctree_visitor_t</code>, whose <code>visit_expr</code> methods looks for <code>cot_memptr</code>/<code>cot_memref</code> expressions. When such an expression <code>x</code> is found, compare <code>x-&gt;type</code> to your desired structure type. If it matches, you've found a place where that structure is used. To find accesses to a specific field, compare <code>x-&gt;m</code> against the offset of the field you want. To find this across the database, apply your <code>ctree_visitor_t</code> derivative to all functions in the database.</span>",
                    "time": null
                },
                {
                    "user": "underthevoid",
                    "text": "<span class=\"comment-copy\">Very nice @Rolf Rolles. Do you know of a plugin that already does that?</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">I don't. Such a plugin is not necessary, as the functionality is built in in later versions (see discussion above).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   referee\n  </code>\n  python plugin from\n  <a href=\"https://github.com/medigateio/ida_medigate\" rel=\"nofollow noreferrer\">\n   https://github.com/medigateio/ida_medigate\n  </a>\n  does it pretty well\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "zed_0xff",
            "time": "Aug 19, 2024 at 13:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - <a href=\"/review/low-quality-posts/24466\">From Review</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's not possible. You have to recover the class instance structure, then pass through all class methods and apply the class structure where it's used. Then you go and see where the class is created and track where all its instances are used and make sure that you found all the access points to the public members of the class. Then you go to the structures window and look at all the xrefs for the member that you need.\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "Anton Kukoba",
            "time": "Nov 11, 2020 at 10:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "underthevoid",
                    "text": "<span class=\"comment-copy\">As I have the PE's PDB all the initial stuff you said can be gathered in the PBE. IDA already recognizes the structures and variables everywhere. The problem is just I can't figure out how to get a list with all the code that access a given variable. I think it should be very easy to do that with a script but I just thought it should be a default feature that I just don't know of.</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">The class structure must be present in the Structures window, then you go and apply it on the assembler, not the decompiled code. There's a video on how to do that <a href=\"https://www.youtube.com/watch?v=X3xCwNt2ZVY\" rel=\"nofollow noreferrer\">youtube.com/watch?v=X3xCwNt2ZVY</a></span>",
                    "time": null
                }
            ]
        }
    ]
}