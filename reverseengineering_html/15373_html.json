{
    "title": "explain the vulnerable code used by EternalBlue SMB attack",
    "link": "https://reverseengineering.stackexchange.com/questions/15373/explain-the-vulnerable-code-used-by-eternalblue-smb-attack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The recent WannaCry ransomware attack exploited a vulnerability in older Windows SMB code. The presumably reverse-engineered function that has been cited\n  <a href=\"https://packetstormsecurity.com/files/142464/MS17-010-SMBv1-SrvOs2FeaToNt-OOB-Remote-Code-Execution.html\" rel=\"nofollow noreferrer\">\n   1\n  </a>\n  as vulnerable is as follows:\n </p>\n <pre><code>unsigned int __fastcall SrvOs2FeaToNt(int a1, int a2)\n# {\n#   int v4; // edi@1\n#   _BYTE *v5; // edi@1\n#   unsigned int result; // eax@1\n#\n#   v4 = a1 + 8;\n#   *(_BYTE *)(a1 + 4) = *(_BYTE *)a2;\n#   *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 1);\n#   *(_WORD *)(a1 + 6) = *(_WORD *)(a2 + 2);\n#   _memmove((void *)(a1 + 8), (const void *)(a2 + 4), *(_BYTE *)(a2 + 1));\n#   v5 = (_BYTE *)(*(_BYTE *)(a1 + 5) + v4);\n#   *v5++ = 0;\n#   _memmove(v5, (const void *)(a2 + 5 + *(_BYTE *)(a1 + 5)), *(_WORD*)(a1 + 6));\n#   result = (unsigned int)&v5[*(_WORD *)(a1 + 6) + 3] & 0xFFFFFFFC;\n#   *(_DWORD *)a1 = result - a1;\n#   return result;\n# }\n</code></pre>\n <p>\n  While it looks like this function copies data from one place to another and we're told the application fails to perform adequate boundary-checks on user-supplied input can someone explain in detail what this function is supposed to do line by line and where it is flawed?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "exploit"
    ],
    "user": "julian",
    "time": "May 19, 2017 at 0:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Please check these links,might help....\n </p>\n <p>\n  <a href=\"https://gist.github.com/worawit/bd04bad3cd231474763b873df081c09a\" rel=\"nofollow noreferrer\">\n   https://gist.github.com/worawit/bd04bad3cd231474763b873df081c09a\n  </a>\n  <a href=\"https://zhuanlan.zhihu.com/p/26592431\" rel=\"nofollow noreferrer\">\n   https://zhuanlan.zhihu.com/p/26592431\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Warm_up",
            "time": "May 19, 2017 at 14:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">answers formed solely from links are likely to be deleted.  Please include in your answer why you think that the information from these links would be helpful.</span>",
                    "time": null
                },
                {
                    "user": "Warm_up",
                    "text": "<span class=\"comment-copy\">I am not able to form a clear overall picture right now,but however these links helped me a bit...I am also in the process to find out.once i get it,i will for sure</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Thanks for those links. The second one references  <a href=\"http://blogs.360.cn/360safe/2017/04/17/nsa-eternalblue-smb\" rel=\"nofollow noreferrer\">blogs.360.cn/360safe/2017/04/17/nsa-eternalblue-smb</a> which I think is more useful. Though the translation from Chinese is pretty garbled I think the problem is in code for a different function (SrvOs2FeaListSizeToNt) that gets called before the quoted function in my original question. Here a DWORD calculation is cast to a WORD. While that sounds unsafe I am still not sure how the EternalBlue exploit takes advantage of this.</span>",
                    "time": null
                }
            ]
        }
    ]
}