{
    "title": "Why does the C compiler generate integer multiplication with large, seemingly random, numbers?",
    "link": "https://reverseengineering.stackexchange.com/questions/12860/why-does-the-c-compiler-generate-integer-multiplication-with-large-seemingly-ra",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hi I want to write those instructions in C, I'm having trouble with\n  <code>\n   SAR EDX,6\n  </code>\n  ,\n </p>\n <p>\n  <strong>\n   ASM\n  </strong>\n </p>\n <pre><code>MOV EDX,8\nMOV EDI,1\nIMUL EDI,EDX\nMOV EAX,ED9CE24E\nIMUL EDI\nSAR EDX,6\n</code></pre>\n <p>\n  <strong>\n   my try\n  </strong>\n </p>\n <pre><code>int edi=1\nint edx=8\nedi*=edx;\nedx=((long long)edi*0xED9CE24E) >> 32 >> 6;\n</code></pre>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "271",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "Gues",
    "time": "Jun 16, 2016 at 13:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, the\n  <code>\n   sar\n  </code>\n  instruction is at least similar enough to\n  <code>\n   >>\n  </code>\n  to be valid in your code. Technically,\n  <code>\n   sar\n  </code>\n  is for\n  <code>\n   shift arithmetric right\n  </code>\n  which treats the carry/sign bit a bit different. But handling edge cases like overflow etc. can't be translated well from assembly to C anyway.\n </p>\n <p>\n  The question that's more interesting is \"what does this do\". In this case, the compiler is using a trick to replace an (expensive) float division by a (cheap) integer multiplication.\n </p>\n <p>\n  For example, calculating\n </p>\n <pre><code>int something=get_an_integer_from_somewhere();\nint result=(int)((double)something/1.2345)\n</code></pre>\n <p>\n  is quite expensive.\n </p>\n <p>\n  But, since\n  <code>\n   1/1.2345 = 0.810044552\n  </code>\n  , this is the same as\n </p>\n <p>\n  <code>\n   result=(int)((double)something*0.810044552)\n  </code>\n  .\n </p>\n <p>\n  Well, we replaced a division by a multiplication, but this is still expensive.\n </p>\n <p>\n  However, we can write\n  <code>\n   0.810044552\n  </code>\n  as\n  <code>\n   3479114859\n  </code>\n  /\n  <code>\n   4294967296\n  </code>\n  . And\n  <code>\n   4294967296\n  </code>\n  \"happens\" to be 2^32. So we can rewrite the whole thing as\n </p>\n <p>\n  <code>\n   result=something*3479114859/4294967296\n  </code>\n  . And suddenly we don't need the floating point multiplication/division anymore; we just need an integer division, which is, in this case, very inexpensive, as it's just a shift right by 32 bits.\n </p>\n <p>\n  And this is what your\n  <em>\n   original\n  </em>\n  C code seems to have been, which was then optimized by the compiler to not use a float division:\n </p>\n <p>\n  <code>\n   result=input/8.619\n  </code>\n </p>\n <p>\n  Try it with some example values.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Jun 16, 2016 at 13:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gues",
                    "text": "<span class=\"comment-copy\">Hi, Thanks for the details explanation, I'm trying to figure out how you calculated its division by <code>8.619</code> by following your instruction in reverse, <code>1/8.619=4983138759/4294967296</code> then what?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">The code multiplies with <code>8</code>, then with <code>3986481742</code> which is <code>ED9CE24E</code> in decimal, so <code>8*3986481742=31891853936</code> altogether. Then it divides by <code>2^38</code> (<code>2^32</code> by using <code>edx</code> and ignoring <code>eax</code>, <code>2^6</code> due to the shift). <code>2^38</code> is <code>274877906944</code>. So the code multplies with <code>31891853936/274877906944</code>, or divides by <code>274877906944/31891853936</code>, which is <code>8.619</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}