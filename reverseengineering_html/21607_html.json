{
    "title": "Determining the hash algorithm used [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/21607/determining-the-hash-algorithm-used",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/21607/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2019-07-05 02:32:13Z\">\n        5 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/21607/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I have some test data:\n </p>\n <ol>\n  <li>\n   Test 1\n  </li>\n </ol>\n <pre><code>Text: pass1234\nSalt: 33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\nHash: 61477724c136fb285918114792685a4d\n</code></pre>\n <ol start=\"2\">\n  <li>\n   Test 2\n  </li>\n </ol>\n <pre><code>Text: test1234\nSalt: 33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\nHash: 00281231e8928af48c34ca03e09eebe5\n</code></pre>\n <ol start=\"3\">\n  <li>\n   Test 3\n  </li>\n </ol>\n <pre><code>Text: simple123\nSalt: b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\nHash: 0c9e564acfe36f51b54b5050741f351c\n</code></pre>\n <ol start=\"4\">\n  <li>\n   Test 4\n  </li>\n </ol>\n <pre><code>Test: pass1234\nSalt: b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\nHash: 0fc692cc78a51a9650c896c735a1b577\n</code></pre>\n <p>\n  They look like MD5 hashes but I could not reproduce them. Does anyone have any idea how to get the algorithm to reproduce these hashes?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "729",
    "tags": [
        "decryption",
        "encryption",
        "cryptography",
        "cryptanalysis"
    ],
    "user": "user11703733",
    "time": "5 years ago",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Have you access to the asm that produce it ? If not, this is almost impossible to guess what is the hash function.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "camp0",
            "text": "<html><body><span class=\"comment-copy\">\n you can try sha-256, sha-1, blake, etc...you can do a python script that do that easly\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n as 0xC0000022L's post below indicates, with the details currently provided, this is less reverse engineering and more an exercise in brute-forcing. Please explain where you got this data from. There isn't anything here that has to do with reverse engineering per-se. Hash cracking and cryptanalysis with insufficient data are not on topic.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user11703733",
            "text": "<html><body><span class=\"comment-copy\">\n @perror [link] (\n <a href=\"https://stackoverflow.com/questions/56880235/how-to-automate-enabling-dhcp-of-hikvision-cameras\" title=\"how to automate enabling dhcp of hikvision cameras\">\n  stackoverflow.com/questions/56880235/…\n </a>\n ) is what I'm trying to do. I do have access to the binary but I'm not so convenient with asm nor OllyDbg (or IDA Pro)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user11703733",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks @0xC0000022L for the the answer with a nice script. It really helps me brute force these hashes\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Lots of possibilities, for all we know there's a chance that some \"other\" salt is used or that either the password or the salt or both are preprocessed in some way. Additionally there could be multiple rounds of hashing one of the combinations ...\n </p>\n <p>\n  So this question literally requires looking at the code and therefore reverse code engineering to give you more than some wild guess.\n </p>\n <p>\n  I tried the most obvious cases and there was no match (tested with DSA, DSA-SHA, MD4, MD5, RIPEMD160, SHA, SHA1, SHA224, SHA256, SHA384, SHA512, dsaEncryption, dsaWithSHA, ecdsa-with-SHA1, md4, md5, ripemd160, sha, sha1, sha224, sha256, sha384, sha512, whirlpool):\n </p>\n <pre><code>#!/usr/bin/env python3\nfrom hashlib import new as hashnew, algorithms_available\n\n# Several possibilities\n# - assuming the password is ASCII and the calculated hash is the hex\n#   representation of the digest (or parts thereof)\n#   1. the salt could be used as ASCII string\n#   2. as array of bytes of 32 bytes size\n#   3. some other nondescript way\n# - Salt could be appended or prepended\n# - Output could be part of the hex digest of some hash algo that yields\n#   larger digests than MD5\nDATA = [\n    (\"pass1234\", \"33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\", \"61477724c136fb285918114792685a4d\"),\n    (\"test1234\", \"33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\", \"00281231e8928af48c34ca03e09eebe5\"),\n    (\"simple123\", \"b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\", \"0c9e564acfe36f51b54b5050741f351c\"),\n    (\"pass1234\", \"b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\", \"0fc692cc78a51a9650c896c735a1b577\"),\n    ]\n\nresults = {}\nprint(\"Testing\", \", \".join(sorted(algorithms_available)))\n# Go through supported hash algos\nfor algo in sorted(algorithms_available):\n    print(algo)\n    for password, salt, expected in DATA:\n        cases = []\n        # password + salt\n        cases.append(password.encode('ascii') + salt.encode('ascii'))\n        # salt + password\n        cases.append(salt.encode('ascii') + password.encode('ascii'))\n        # password + bytes(salt)\n        cases.append(password.encode('ascii') + bytes.fromhex(salt))\n        # bytes(salt) + password\n        cases.append(bytes.fromhex(salt) + password.encode('ascii'))\n        reslist = []\n        for case in cases:\n            h = hashnew(algo, case)\n            hexd = h.hexdigest()\n            if expected.lower() in hexd.lower():\n                highlight = hexd.lower().replace(expected.lower(), \"[%s]\" % (expected.lower()))\n                print(\"Match for algorithm %s: %s\" % (algo, highlight))\n</code></pre>\n <p>\n  Admittedly a naïve approach, but as you can see just from this, there's a multitude of possibilities in which the password and salt can be represented and combined and there are a multitude of hash algorithms to test.\n </p>\n <p>\n  Given the above did not include\n  <a href=\"https://blake2.net\" rel=\"nofollow noreferrer\">\n   BLAKE2\n  </a>\n  , I'd strongly recommend testing that one as well.\n </p>\n <p>\n  Additionally I'd like to draw your attention to key derivation algorithms like those supported in\n  <a href=\"https://docs.python.org/3/library/hashlib.html\" rel=\"nofollow noreferrer\">\n   hashlib\n  </a>\n  :\n  <code>\n   pbkdf2_hmac\n  </code>\n  and\n  <code>\n   scrypt\n  </code>\n  .\n </p>\n <p>\n  Anyway, short of brute-forcing (my above attempt and variations on that) you won't get around looking at the actual code. For starters you may be able to figure out the algorithm used by certain signatures. But moreover you may find out ways by which the password, the salt or both are mutated prior to the hashing.\n </p>\n <p>\n  And considering key derivation algorithms the fact that you can run them an arbitrary number of iterations provides for another \"dimension\" in the permutations possible ...\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Jul 4, 2019 at 16:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}