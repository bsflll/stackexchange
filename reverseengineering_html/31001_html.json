{
    "title": "frida calling method raises error pointer expected",
    "link": "https://reverseengineering.stackexchange.com/questions/31001/frida-calling-method-raises-error-pointer-expected",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i have a java method i am trying to call manually\n </p>\n <p>\n  <code>\n   public static native Object a(int i, int i2, long j, String str, Object obj);\n  </code>\n </p>\n <p>\n  whenever i try to call it and pass the needed arguments it raises a error pointer expected\nthe obj parameter is a string list this is the code i tried\n </p>\n <pre><code>var e = [\"string1\",\"string2\"];\nvar arr = Java.array('java.lang.String', e);\nvar x = Java.use(\"ms.bd.o.k\")\nx.a.overload('int', 'int', 'long', 'java.lang.String', 'java.lang.Object').call(x, 50331649, 0, 140734272498240, url, arr)\n</code></pre>\n <p>\n  i also tried changing the overload to\n  <code>\n   .overload('int', 'int', 'long', 'java.lang.String', '[java.lang.String')\n  </code>\n  this raises the error below\n </p>\n <pre><code>Error: a(): argument types do not match any of:\n        .overload('int', 'int', 'long', 'java.lang.String', 'java.lang.Object')\n    at X (frida/node_modules/frida-java-bridge/lib/class-factory.js:563)\n    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:967)\n    at e (frida/node_modules/frida-java-bridge/lib/class-factory.js:547)\n    at <anonymous> (/script1.js:94)\n    at <anonymous> (frida/node_modules/frida-java-bridge/lib/vm.js:12)\n    at perform (frida/node_modules/frida-java-bridge/index.js:193)\n    at ms_bd_c_h_a (/script1.js:99)\n    at apply (native)\n    at <anonymous> (frida/runtime/message-dispatcher.js:13)\n    at c (frida/runtime/message-dispatcher.js:23)\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "971",
    "tags": [
        "android",
        "frida"
    ],
    "user": "ahmed mani",
    "time": "Oct 15, 2022 at 22:31",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Where do you got the method signature from, are you sure it is correct? And I am not sure how good Frida is able JNi methods (methods that are\n <code>\n  native\n </code>\n ).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ahmed mani",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert i got the method signature from the code after i decompiled the app i also put a wrong overload and copy pasted the one frida provided\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ahmed mani",
            "text": "<html><body><span class=\"comment-copy\">\n i think the problem arises from casting the string list to a\n <code>\n  java.lang.object\n </code>\n since its throws the same error as\n <code>\n  Java.cast(Java.array('java.lang.String', [\"a\"]), Java.use(\"java.lang.Object\"))\n </code>\n Java.array does not returns a pointer and the cast method needs a pointer do you know any way to retrieve the pointer of a array using frida\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alexsize",
            "text": "<html><body><span class=\"comment-copy\">\n This is what I managed to do. But the result is somewhat discouraged. I suggest the author to exchange contacts. Java.perform(function () { var classname = \"ms.bd.o.k\"; var classmethod = \"a\"; var methodsignature = \"public static native java.lang.Object a(int,int,long,java.lang.String,java.lang.Object)\"; var hookclass = Java.use(classname); hookclass.a.overload(\"int\",\"int\",\"long\",\"java.lang.String\",\"java.lang.Object\").implementation = function (v0,v1,v2,v3,v4) { var ret = this.a(v0,v1,v2,v3,v4); console.log(eval(v0)+\"\n\"); console.log(v1+\"\n\"); console.log(v2+\"\n\"); console.log(v3+\"\n\"); consol\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}