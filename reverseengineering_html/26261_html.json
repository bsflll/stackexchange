{
    "title": "I found an arbitrary free, (free(<abitrary address>)), managed to locate a candidate address I wish to free, how do I proceed from here?",
    "link": "https://reverseengineering.stackexchange.com/questions/26261/i-found-an-arbitrary-free-freeabitrary-address-managed-to-locate-a-candi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While doing my first code auditing as a novice vulnerability resarchers I managed to stumble upon\nmy first free() in my target.\nI managed to find a candiate location where I can control this value and thus trick my target to free any address.\n </p>\n <p>\n  Given I can turn this free() to an infoleak, how do I proceed from here with getting code execution?\n </p>\n <p>\n  Should I read Malloc-Demaleficarum and follow one of houses in order to trick malloc into returning my fake chunk? (i can call this free many times once i defeated ASLR).\n </p>\n <p>\n  Any hints and advice will be very welcome, I'm looking for the methodolodgy rather than a full step-by-step solution.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "150",
    "tags": [
        "exploit",
        "heap"
    ],
    "user": "user34866",
    "time": "Nov 6, 2020 at 17:12",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Look into a technique called House of Spirit. More details -\n <a href=\"https://github.com/shellphish/how2heap\" rel=\"nofollow noreferrer\">\n  github.com/shellphish/how2heap\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user34866",
            "text": "<html><body><span class=\"comment-copy\">\n thanks, i'll take a look into it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user34866",
            "text": "<html><body><span class=\"comment-copy\">\n how can i know the version of my malloc? it seem to be linked statically to my target binary and doesn't use the glibc one provided in my system.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Please add this in your post and someone will answer\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user34866",
            "text": "<html><body><span class=\"comment-copy\">\n I figured this out myself :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}