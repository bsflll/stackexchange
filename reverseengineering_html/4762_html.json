{
    "title": "How to match disassembled instructions back to C/C++ source?",
    "link": "https://reverseengineering.stackexchange.com/questions/4762/how-to-match-disassembled-instructions-back-to-c-c-source",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Basically here's what I want to know, if you have a disassembled instruction say:\n </p>\n <pre><code>jz 0x8048e1a\n</code></pre>\n <p>\n  And, you also have the source code. How do you go about figuring out what this instruction relates to in the source code ? At the very least, would it be possible to figure out the basic block that this instruction comes from ?\n </p>\n <p>\n  Basically I have an application that spits out a disassembled instruction for an ELF binary that I have compiled myself (source available), and now I have to find out what/where this disassembled instruction maps to in the source code.\n </p>\n <p>\n  Let's also assume that I do not use any of the optimization flags while compiling.\n </p>\n <p>\n  I should probably mention that I am using Intel's PIN as the application that spits out these disassembled instructions. So, I know which function/routine these instructions belong to. But, I just want to be a bit more precise at the assembly level.\n </p>\n <p>\n  Thanks for any help/hints !\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 6,
    "views": "11k",
    "tags": [
        "decompilation",
        "c++",
        "c",
        "elf"
    ],
    "user": "Faheem",
    "time": "Jul 2, 2014 at 16:16",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<html><body><span class=\"comment-copy\">\n My old question might relate to yours somehow, not saying it's a duplicate, just a heads up :\n <a href=\"http://reverseengineering.stackexchange.com/questions/3166/mapping-an-external-modules-source-code-to-assembly-extracting-information-fr\" title=\"mapping an external modules source code to assembly extracting information fr\">\n  reverseengineering.stackexchange.com/questions/3166/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dmitry Janushkevich",
            "text": "<html><body><span class=\"comment-copy\">\n Is the instruction address available as well? This is not obvious from the example above.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Faheem",
            "text": "<html><body><span class=\"comment-copy\">\n @DmitryYanushkevich Yes, all the addresses are available.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dmitry Janushkevich",
            "text": "<html><body><span class=\"comment-copy\">\n Have you checked\n <a href=\"http://stackoverflow.com/questions/6472777/map-memory-addresses-to-line-numbers-using-dwarf-information\">\n  this\n </a>\n yet?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Hackndo",
            "text": "<html><body><span class=\"comment-copy\">\n May I suggest you a very helpful training website with plenty of small examples\n <a href=\"http://www.binary-auditing.com/\" rel=\"nofollow noreferrer\">\n  binary-auditing.com\n </a>\n : With a very slowly increasing difficulty, you'll manage to extract various HLL (High Level Language) patterns from ASM. It starts with variable assignations, goes through loops, conditions, objects, structures, and so on.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You have to read and interpret the assembly. There is no substitute for reading the assembly. If you know what the assembly instructions mean, and you have the source code the relationship between the two should be quite clear. There will be no direct marker that shall tell what line of the source the assembly came from.\n </p>\n <p>\n  So learn how your basic structures in C/C++  look in ASM.\n </p>\n <p>\n  What does a loop look like? (Hint: There are several ways to write loops in ASM)\n </p>\n <p>\n  What does a struct look like?\n </p>\n <p>\n  What does a function look like?\n </p>\n <p>\n  What does a pointer look like?\n </p>\n <p>\n  If you learn ASM well, this will all be clear.\n </p>\n <p>\n  Also, learn how compilers work, and learn to debug running code.\n </p>\n <p>\n  Edit: \nYou can actually generate debugger symmbols to relate code to individual line numbers, so what I said above is not exactly true.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "MrSynAckSter",
            "time": "Jul 2, 2014 at 15:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">\"There will be no direct marker that shall tell what line of the source the assembly came from.\" -- That's not quite true given that he can generate symbols from his source code.</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">He could. I was assuming that just wanted to work with the assembly without giving himself hints. I edited the post to reflect the truth.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   <em>\n    EDIT:\n   </em>\n  </strong>\n  The answer below is specific to PE files, which doesn't answer the question above now that @Achilles specified that his question is in regard to ELF files.\n </p>\n <p>\n  Given that you have the source code and can produce symbols for your program, you can use the\n  <a href=\"http://msdn.microsoft.com/en-us/library/x93ctkx8.aspx\" rel=\"nofollow\">\n   Debug Interface Access SDK\n  </a>\n  to map assembly code instruction addresses to source code line numbers. In particular, you would want to use the\n  <a href=\"http://msdn.microsoft.com/en-us/library/3zz7bhbs.aspx\" rel=\"nofollow\">\n   IDiaLineNumber class\n  </a>\n  .\n </p>\n <blockquote>\n  <p>\n   The following function displays line numbers used in a function\n  (represented by\n   <code>\n    pSymbol\n   </code>\n   ).\n  </p>\n  <pre><code>void dumpFunctionLines( IDiaSymbol* pSymbol, IDiaSession* pSession ) {\nULONGLONG length = 0;\nDWORD     isect  = 0;\nDWORD     offset = 0;\n\npSymbol->get_addressSection( &isect );\npSymbol->get_addressOffset( &offset );\npSymbol->get_length( &length );\nif ( isect != 0 && length > 0 )\n{\n    CComPtr< IDiaEnumLineNumbers > pLines;\n    if ( SUCCEEDED( pSession->findLinesByAddr(\n                                  isect,\n                                  offset,\n                                  static_cast<DWORD>( length ),\n                                  &pLines)\n                  )\n       )\n    {\n        CComPtr< IDiaLineNumber > pLine;\n        DWORD celt      = 0;\n        bool  firstLine = true;\n\n        while ( SUCCEEDED( pLines->Next( 1, &pLine, &celt ) ) &&\n                celt == 1 )\n        {\n            DWORD offset;\n            DWORD seg;\n            DWORD linenum;\n            CComPtr< IDiaSymbol >     pComp;\n            CComPtr< IDiaSourceFile > pSrc;\n\n            pLine->get_compiland( &pComp );\n            pLine->get_sourceFile( &pSrc );\n            pLine->get_addressSection( &seg );\n            pLine->get_addressOffset( &offset );\n            pLine->get_lineNumber( &linenum );\n            printf( \"\\tline %d at 0x%x:0x%x\n\", linenum, seg, offset );\n            pLine = NULL;\n            if ( firstLine )\n            {\n                // sanity check\n                CComPtr< IDiaEnumLineNumbers > pLinesByLineNum;\n                if ( SUCCEEDED( pSession->findLinesByLinenum(\n                                              pComp,\n                                              pSrc,\n                                              linenum,\n                                              0,\n                                              &pLinesByLineNum)\n                              )\n                   )\n                {\n                    CComPtr< IDiaLineNumber > pLine;\n                    DWORD celt;\n                    while ( SUCCEEDED( pLinesByLineNum->Next( 1, &pLine, &celt ) ) &&\n                            celt == 1 )\n                    {\n                        DWORD offset;\n                        DWORD seg;\n                        DWORD linenum;\n\n                        pLine->get_addressSection( &seg );\n                        pLine->get_addressOffset( &offset );\n                        pLine->get_lineNumber( &linenum );\n                        printf( \"\\t\\tfound line %d at 0x%x:0x%x\n\", linenum, seg, offset );\n                        pLine = NULL;\n                   }\n                }\n                firstLine = false;\n            }\n        }\n    }\n} }\n</code></pre>\n </blockquote>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Jul 2, 2014 at 16:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Faheem",
                    "text": "<span class=\"comment-copy\">Sorry, I forgot to mention, I need to do this on Linux.</span>",
                    "time": null
                },
                {
                    "user": "Dmitry Janushkevich",
                    "text": "<span class=\"comment-copy\">This is not completely true and depends on whether one can reproduce the build perfectly. In case the binary was PGO-optimised, I don't think there is a chance for that. Not to mention having the same version of compiler and build environment.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I assumed he was looking at the build he himself created. I also assumed this was on Windows :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   how do you go about figuring out what this instruction relates to in the source code?\n  </p>\n </blockquote>\n <p>\n  Mostly intuition and experience. Given the high-level overview from the source code, one could spot the function and possibly the line where the instruction belongs, but so far I know no program that could do the same. Having debug info certainly helps a lot, but is not a panacea, and in general, not always available.\n </p>\n <blockquote>\n  <p>\n   At the very least, would it be possible to figure out the basic block that this instruction comes from?\n  </p>\n </blockquote>\n <p>\n  In general, no. In certain cases, yes. Modern compilers tend to optimize code too aggressively. Even having all the debug info the compiler produces is sometimes not enough to map the precise location of the given insn, which can be demonstrated by trying to do source-level debugging on such an application.\n </p>\n <p>\n  EDIT: Didn't properly notice you build the binary by yourself. Then yes, it should be possible to at least map the instruction to a function given the debug info.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Dmitry Janushkevich",
            "time": "Jul 2, 2014 at 15:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Which compiler are you using? My background is more in Windows development (as opposed to Linux/BSD/OSX), so I can only speak to that case.\n </p>\n <p>\n  But in\n  <strong>\n   Visual Studio\n  </strong>\n  , you can see the generated assembly while debugging C/C++.\n  <a href=\"http://msdn.microsoft.com/en-us/library/a3cwf295.aspx\" rel=\"nofollow noreferrer\">\n   See this MSDN article for detail\n  </a>\n  .\n </p>\n <p>\n  If you are only interested in the ASM, you may want to change some of the compilation settings within your Visual Studio project so that it reduces debug information included with the project.\n  <a href=\"http://www.scribd.com/doc/183361038/Setup-Visual-Studio-for-Learning-Reverse-Engineering\" rel=\"nofollow noreferrer\">\n   Detail on how to do that is here\n  </a>\n  .\n </p>\n <p>\n  Primarily involves:\n </p>\n <ul>\n  <li>\n   Disabling C++ exceptions\n  </li>\n  <li>\n   Debug information format set to Program Database (/Zi)\n  </li>\n  <li>\n   Turning off buffer security check (/GS-)\n  </li>\n  <li>\n   Turn off incremental linking (/NCREMENTAL:NO)\n  </li>\n </ul>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/L3ral.png\"/>\n </p>\n <p>\n  Embarcadero\n  <strong>\n   C++ Builder and Delphi\n  </strong>\n  (formerly Borland) offer the same functionality as well.\n  <a href=\"http://docwiki.embarcadero.com/RADStudio/XE6/en/Using_the_CPU_View\" rel=\"nofollow noreferrer\">\n   Usage detail here\n  </a>\n  .\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/xEdjJ.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Mick",
            "time": "Jul 2, 2014 at 15:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you compiled it yourself, and can compile it with dwarf information, then you can use addr2line from gnu binutils.\n </p>\n <p>\n  If you have less information, I just try to get the lay of the land, often using references to arguments or function calls as major landmarks. Obviously, that's not applicable to every binary, though.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "broadway",
            "time": "Jul 2, 2014 at 21:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you have the full source available. Here's what I propose (and currently do):\n </p>\n <ol>\n  <li>\n   <p>\n    Compile the binary\nwith debugging information and disable optimisations. Also make sure\nto disable stripping the binary if you are compiling some\ndistributed code. This would mean: Compile with the following flags\nwith gcc(depending on the level of debugging information you need, I usually compile with ggdb/ggdb3):\n   </p>\n   <pre><code>-g -O0 OR -ggdb -O0 OR -ggdb3 -O0 \n</code></pre>\n  </li>\n  <li>\n   <p>\n    Next, create a dump of the binary with objdump:\n   </p>\n   <pre><code>objdump -dS myBinary > dump\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Now you can just get the instruction address, search for it in the\ndump and match it to source code.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Faheem",
            "time": "Aug 27, 2015 at 13:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mackycheese21",
                    "text": "<span class=\"comment-copy\">Awesome! Thanks!  This solved my problem perfectly and easily.</span>",
                    "time": null
                }
            ]
        }
    ]
}