{
    "title": "Is it possible to \"jump\" to another address when script detects jmp?",
    "link": "https://reverseengineering.stackexchange.com/questions/27310/is-it-possible-to-jump-to-another-address-when-script-detects-jmp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  here is the original C++ source code of the executable that I've created to do simple RE\n </p>\n <pre><code>#include <iostream>\n\nvoid myFunction() {\n\n    printf(\"Hello!\");\n}\n\nint main()\n{\n    myFunction();\n    return 0;\n}\n</code></pre>\n <p>\n  When I disassembled my executable in IDA, this is the first block that I see\n  <a href=\"https://i.sstatic.net/RjQXa.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/RjQXa.png\"/>\n  </a>\n </p>\n <p>\n  With the address being 0x4112c1\n  <a href=\"https://i.sstatic.net/rjSeA.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/rjSeA.png\"/>\n  </a>\n </p>\n <p>\n  I've created a simple IDAPython script to find out what is the next address after the\n  <strong>\n   jump _main_0\n  </strong>\n </p>\n <pre><code>from idautils import *\nfrom idaapi import *\nfrom idc import *\n\ncursor = 0\nstart_addr = 0\nend_addr = 0\nprint(\"----------Starting python script----------\n\")\nfor func in Functions():\n    name = get_func_name(func)\n    if \"_main\" == name:\n        start_addr = get_func_attr(func, FUNCATTR_START)\n        end_addr = get_func_attr(func, FUNCATTR_END)\n        print(\"Start: 0x%x, End: 0x%x\" %(start_addr, end_addr))\n\ncursor = start_addr\nprint('0x%x %s' % (cursor, generate_disasm_line(cursor, 0)))\ncur_addr = next_head(cursor, end_addr)\nprint(\"Next Head: 0x%x\" %cur_addr)\nprint(\"---------Exiting Python script------\")\n</code></pre>\n <p>\n  And this is the following output:\n </p>\n <pre><code>----------Starting python script----------\n\nStart: 0x4112c1, End: 0x4112c6\n0x4112c1 jmp     _main_0\nNext Head: 0xffffffff\n---------Exiting Python script------\n</code></pre>\n <p>\n  I have 2 questions I would like to ask:\n </p>\n <ol>\n  <li>\n   May I ask why isn't the address of the next head 0x411930 (which is the address of _main_0, as shown in the screenshot below) ?\n   <a href=\"https://i.sstatic.net/in2qT.png\" rel=\"nofollow noreferrer\">\n    <img alt=\"enter image description here\" src=\"https://i.sstatic.net/in2qT.png\"/>\n   </a>\n  </li>\n  <li>\n   Is it possible to make the script go to the address of the mentioned function when it detects a jump statement? (because I thought next head will do the trick)\n  </li>\n </ol>\n <p>\n  **\n  <em>\n   Disclaimer: I'm kinda new to RE and IDAPython so do bear with me if I ask too much\n  </em>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "320",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "festivezine",
    "time": "Mar 25, 2021 at 8:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   May I ask why isn't the address of the next head 0x411930 (which is the address of _main_0, as shown in the screenshot below) ?\n  </p>\n </blockquote>\n <p>\n  From\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow noreferrer\">\n   IDAPython docs\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   next_head(ea, maxea=4294967295)\n  </p>\n  <p>\n   Get next defined item (instruction or data) in the program\n  </p>\n </blockquote>\n <p>\n  That will give you the next defined item after the address passed in\n  <code>\n   ea\n  </code>\n  no matter what instruction is at\n  <code>\n   ea\n  </code>\n  .\n </p>\n <blockquote>\n  <p>\n   Is it possible to make the script go to the address of the mentioned function when it detects a jump statement? (because I thought next head will do the trick)\n  </p>\n </blockquote>\n <p>\n  Of course it is possible. One way to do that is to call\n  <code>\n   ida_xref.get_first_cref_from\n  </code>\n  and extract that address from its output. Probably there are some better ways to do that, but this one should work.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "bart1e",
            "time": "Mar 25, 2021 at 17:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "festivezine",
                    "text": "<span class=\"comment-copy\">Hi! Thank you so much for your suggestion! That function works for me and it's good for me (for now :) )</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is untested, and is just a slightly expanded version of an old function\n  <code>\n   GetTarget\n  </code>\n  I have.  It's very low-tech (simple API usage only), and (probably) will only work correctly for the x86/64 platform where all conditional jump mnemonics start with\n  <code>\n   j\n  </code>\n  and no mnemonic starts with\n  <code>\n   j\n  </code>\n  that isn't a jump of some type.\n </p>\n <p>\n  The alternative (which I also have) using NN_* code is harder to grasp for a beginner.\n </p>\n <pre><code>def GetTarget(ea):\n    mnem = GetMnem(ea)\n    if not mnem:\n        return BADADDR\n    \n    opType0 = GetOpType(ea, 0)\n    if mnem == \"jmp\" or mnem == \"call\" or mnem[0] == \"j\":\n        if opType0 != o_near and opType0 != o_mem:\n            print(\"Can't follow opType0 \" + opTypeAsName(opType0))\n            return BADADDR\n        else:\n            return GetOperandValue(ea, 0)\n\n    if NextHead(ea) == ea + ItemSize(ea) and isFlow(GetFlags(NextHead(ea))):\n        return NextHead(ea)\n\ndef opTypeAsName(n):\n    for item in [x for x in dir(idc) if x.startswith('o_')]:\n        if getattr(idc, item) == n: return item\n</code></pre>\n <p>\n  Since the way I used to code is really a little embarrassing, here is the same code in\n  <em>\n   correct pythonic idapython 7\n  </em>\n </p>\n <pre><code>def GetTarget7(ea):\n    mnem = idc.print_insn_mnem(ea)\n    if not mnem:\n        return idc.BADADDR\n    \n    opType0 = idc.get_operand_type(ea, 0)\n    if mnem == \"jmp\" or mnem == \"call\" or mnem[0] == \"j\":\n        if opType0 != o_near and opType0 != o_mem:\n            print(\"Can't follow opType0 \" + opTypeAsName(opType0))\n            return idc.BADADDR\n        else:\n            return idc.get_operand_value(ea, 0)\n\n    if idc.next_head(ea) == ea + idc.get_item_size(ea) and \\\n            idc.is_flow(idc.get_full_flags(idc.next_head(ea))):\n        return idc.next_head(ea)\n</code></pre>\n <p>\n  <em>\n   see\n   <a href=\"https://github.com/sfinktah/sfida\" rel=\"nofollow noreferrer\">\n    my github\n   </a>\n   for vim ultisnips auto-expanding 6 to 7 idapython conversion, and idapython syntax file\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Orwellophile",
            "time": "Apr 2, 2021 at 15:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}