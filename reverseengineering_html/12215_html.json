{
    "title": "Are there assembly instructions which both read from, and write to, memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/12215/are-there-assembly-instructions-which-both-read-from-and-write-to-memory",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is it a safe assumption, say for x86, that an instruction either does not access memory, or only reads from memory, or writes to memory?\n </p>\n <p>\n  I could not find any instruction but I am not sure if this really is the case.\n </p>\n <p>\n  What about ARM and MIPS?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "x86",
        "arm",
        "memory",
        "mips"
    ],
    "user": "langlauf.io",
    "time": "Mar 15, 2016 at 13:43",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  movsb\n </code>\n has been in the x86 family since the venerable 8086 and reads and writes memory.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "<html><body><span class=\"comment-copy\">\n I see. Thanks for the counter example. This means I have to deal with the case.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "<html><body><span class=\"comment-copy\">\n You'll also have to deal with all instructions where the combined source/destination operand can be a memory location, starting with the lowly\n <code>\n  inc [mem]\n </code>\n and\n <code>\n  add [mem], whatever\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n On ARM there only instructions that touch memory is \"read from memory to a register\" and \"write a register to memory, so no.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n In addition to\n <code>\n  movsb\n </code>\n , there's also\n <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_25.html\" rel=\"nofollow noreferrer\">\n  <code>\n   bts\n  </code>\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your question has been answered in comments for x86 -\n  <code>\n   movsb\n  </code>\n  both reads and writes to memory.\n </p>\n <p>\n  On ARM the only instructions that touch memory is \"read from memory to a register\" and \"write a register to memory\", so no there aren't. Same with MIPS.\n </p>\n <p>\n  IIRC all (or almost all?) RISC processors are this \"load and store\" architecture.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Vitaly Osipov",
            "time": "Mar 16, 2016 at 0:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}