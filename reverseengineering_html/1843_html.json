{
    "title": "What are the available libraries to statically modify ELF executables?",
    "link": "https://reverseengineering.stackexchange.com/questions/1843/what-are-the-available-libraries-to-statically-modify-elf-executables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to be able to rewrite or reorganize an ELF binary program directly from the executable format (not at compile-time).\n </p>\n <p>\n  The only library I know to do this is\n  <a href=\"http://hg.secdev.org/elfesteem/\">\n   elfesteem\n  </a>\n  (used in\n  <a href=\"http://code.google.com/p/smiasm/\">\n   Miasm\n  </a>\n  ). But, there must be others. So, what are the libraries or frameworks that you use to statically modify ELF executables ?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 3,
    "views": "7k",
    "tags": [
        "tools",
        "obfuscation",
        "deobfuscation",
        "elf"
    ],
    "user": "perror",
    "time": "Apr 18, 2013 at 10:06",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://meta.reverseengineering.stackexchange.com/questions/88/do-not-accept-an-answer-so-fast\">\n  good read\n </a>\n ;)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Krypton",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe a bit too chatty, I saw perror and 0xC0000022L everywhere in this SE subsite. Anw is there any better tool (preferably python) atm? ERESI suggested in the accepted answer seems not to be actively maintained any more.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Up to my actual knowledge, I do not know anymore libraries than the ones cited in this page... There might be other projects but they are less featured or more cryptic to use than the ones listed here. Anyway, I would be delighted if you prove me wrong !\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<html><body><span class=\"comment-copy\">\n Is there a minimal tutorial of how to open an ELF and modify the assembly with Miasm  somewhere?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just stumbled on this project\n  <a href=\"http://www.eresi-project.org/\" rel=\"noreferrer\">\n   ERESI\n  </a>\n  . The project itself looks quite ambitious and supports mainly Intel and Sparc processors with some support for others. There are lots of tools as well that might come in handy. It does have one specific tool that sounds like if fits the bill exactly and quite a few others that are related:\n </p>\n <blockquote>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/Evarista\" rel=\"noreferrer\">\n    Evarista\n   </a>\n   : A work-in-progress static binary program transformer\n  entirely implemented in the ERESI language.\n  </p>\n </blockquote>\n <p>\n  Patchelf might come in handy for modifying the linker or rpaths specified in an elf:\n </p>\n <blockquote>\n  <p>\n   <a href=\"http://nixos.org/patchelf.html\" rel=\"noreferrer\">\n    PatchELF\n   </a>\n   is a small utility to modify the dynamic linker and RPATH of\n  ELF executables\n  </p>\n </blockquote>\n <p>\n  Also there is this\n  <a href=\"http://www.blackhat.com/presentations/bh-europe-01/shaun-clowes/bh-europe-01-clowes.ppt\" rel=\"noreferrer\">\n   presentation about injectso\n  </a>\n  which seems relevate to the topic static and dynamic patching of elf binaries. Admittedly the coverage on static binaries is limited but that is to be expected as it is more complex that just being a library interposer.\n </p>\n <p>\n  If you are looking for libraries specifically then the ERESI project does use alot of libraries so you could probably take Evarista as a guide and write something more in line with your goals with thier libraries.\n </p>\n <blockquote>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibELFsh\" rel=\"noreferrer\">\n    libelfsh\n   </a>\n   : the binary manipulation library used by ELFsh, Kernsh,\n  E2dbg, and Etrace.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheEmbeddedELFDebugger\" rel=\"noreferrer\">\n    libe2dbg\n   </a>\n   : the embedded debugger library operating within the\n  debuggee program.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibASM\" rel=\"noreferrer\">\n    libasm\n   </a>\n   : the smart disassembling engine (x86, sparc, mips, arm)\n  that gives both syntactic and semantic attributes to instructions and\n  their operands.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibMjollnir\" rel=\"noreferrer\">\n    libmjollnir\n   </a>\n   : the control flow analysis and fingerprinting\n  library.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibReVM\" rel=\"noreferrer\">\n    librevm\n   </a>\n   : the Runtime ERESI virtual machine, that contains the\n  central runtime environment implementation of the framework.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibStdEresi\" rel=\"noreferrer\">\n    libstderesi\n   </a>\n   : the standard ERESI library containing more than\n  100 built-in analysis commands.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibAspect\" rel=\"noreferrer\">\n    libaspect\n   </a>\n   : the aspect library brings its API to reflect code\n  and data structures in the ERESI language.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibEdFmt\" rel=\"noreferrer\">\n    libedfmt\n   </a>\n   : the ERESI debug format library which can convert\n  dwarf and stabs debug formats to the ERESI debug format.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibEtrace\" rel=\"noreferrer\">\n    libetrace\n   </a>\n   : the ERESI tracer library, on which Etrace is based.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibKernsh\" rel=\"noreferrer\">\n    libkernsh\n   </a>\n   : the Kernel shell library is the kernel accessibility\n  library on which Kernsh is based.\n  </p>\n  <p>\n   <a href=\"http://www.eresi-project.org/wiki/TheLibGdbWrap\" rel=\"noreferrer\">\n    libgdbwrap\n   </a>\n   : The GDB serial protocol library, for compatibility\n  between ERESI and GDB/VMware/Bochs/Qemu/OpenOCD.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "7",
            "user": "0xC0000022L",
            "time": "Apr 18, 2013 at 22:08",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think your best bet will be to take a low level ELF library and write a small program to do what you want. I like the\n  <a href=\"http://sourceforge.net/apps/trac/elftoolchain/\" rel=\"noreferrer\">\n   ELF Toolchain Project\n  </a>\n  . I've found the tests and documentation that the team puts together to be pretty good. Regardless of what tool you end up using, you definitely want to read\n  <a href=\"http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html\" rel=\"noreferrer\">\n   A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux\n  </a>\n  which discusses how to modify an ELF executable to be as small as possible (your purpose may be different but there are a lot of general lessons to be had).\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Vehm Stark",
            "time": "Apr 18, 2013 at 18:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "st01",
                    "text": "<span class=\"comment-copy\">+1 for the link to the brilliant \"teensy ELF\" tutorial. I saw this a few years ago and had forgotten about it... What a joy to re-read it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2 id=\"e9patch-et3b\">\n  <a href=\"https://github.com/GJDuck/e9patch\" rel=\"nofollow noreferrer\">\n   e9patch\n  </a>\n </h2>\n <blockquote>\n  <p>\n   E9Patch is different to other tools in that it can statically rewrite x86_64 Linux ELF binaries without modifying the set of jump targets. To do so, E9Patch uses a set of novel low-level binary rewriting techniques, such as instruction punning, padding and eviction that can insert or replace binary code without the need to move existing instructions. Since existing instructions are not moved, the set of jump targets remains unchanged, meaning that calls/jumps do not need to be corrected (including cross binary calls/jumps).\n  </p>\n </blockquote>\n <p>\n  <a href=\"https://i.sstatic.net/Yqb4J.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"e9patch techniques\" src=\"https://i.sstatic.net/Yqb4J.png\"/>\n  </a>\n </p>\n <p>\n  Paper:\n  <a href=\"https://www.comp.nus.edu.sg/%7Egregory/papers/e9patch.pdf\" rel=\"nofollow noreferrer\">\n   Binary Rewriting without Control Flow Recovery\n  </a>\n </p>\n <h2 id=\"projects-based-on-e9patch-z2xw\">\n  Projects based on e9patch:\n </h2>\n <ul>\n  <li>\n   <a href=\"https://github.com/GJDuck/e9afl\" rel=\"nofollow noreferrer\">\n    e9afl\n   </a>\n   - inserts AFL's instrumentation into ELF binaries. I've had success using this to fuzz closed-source binaries in a production environment; however, using AFL++ with QEMU outperformed this approach.\n  </li>\n  <li>\n   <a href=\"https://github.com/GJDuck/e9syscall\" rel=\"nofollow noreferrer\">\n    e9syscall\n   </a>\n   - System call interception using static binary rewriting of libc.so.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "julian",
            "time": "Jul 27, 2021 at 1:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}