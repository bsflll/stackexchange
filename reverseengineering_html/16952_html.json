{
    "title": "Custom image format decoding",
    "link": "https://reverseengineering.stackexchange.com/questions/16952/custom-image-format-decoding",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   TL;DR:\n  </strong>\n  is there any chance of decoding custom picture format in case I have sufficient amount of data? Please see examples at end.\n </p>\n <hr/>\n <p>\n  I have binary files of an\n  <strong>\n   old DOS diskmag (late 90's)\n  </strong>\n  . After couple of weeks playing with 010 Editor, Kaitai Struct and Python I managed to get somehow structured data from these files. It was eventually quite easy, files are innerly indexed and contains all pieces - something like Doom WAD, nothing unexpected for that years.\n </p>\n <p>\n  So now I can extract texts (stored as plaintext), sounds (stored mostly as PCM), music (MOD, XM), fonts (bitmaps) and\n  <strong>\n   pictures\n  </strong>\n  . Some pictures are stored as simple bitmap (not BMP with header and so, just raw pixel data), some pictures are compressed with PCX-like RLE algorithm, which was not a problem for me.\n </p>\n <p>\n  But there is also some other\n  <strong>\n   compression I do not recognize\n  </strong>\n  . Let's say that for every unknown picture i have:\n </p>\n <ul>\n  <li>\n   dimensions in pixels (mostly 640x480)\n  </li>\n  <li>\n   color depth (always High Color)\n  </li>\n  <li>\n   <strong>\n    first binary blob\n   </strong>\n   (small, usually 1-2 kB, exact size differs)\n  </li>\n  <li>\n   <strong>\n    second binary blob\n   </strong>\n   (large, 50-250 kB, exact size differs)\n  </li>\n  <li>\n   screen dump of picture from diskmag running in DOSbox (yay!)\n  </li>\n </ul>\n <p>\n  It seems to me that\n  <strong>\n   sizes of blobs depends on picture complexity\n  </strong>\n  and unique used colors. Also I guess that first blob is a dictionary of some kind (or maybe a Huffman tree?), whereas second blob contains compressed picture content itself.\n </p>\n <p>\n  Above that I suspect there is some weird\n  <strong>\n   home-made lossy compression\n  </strong>\n  , due easily recognisable artifacts around edges and even 8x8 quantization blocks in gradient-filled areas. See below for examples, I have thousands of them.\n </p>\n <p>\n  So my question: is there\n  <strong>\n   any chance of decoding\n  </strong>\n  these pictures? Do I have enough of data, or am I missing something? I think that everything I need is to recognize compression algorithm. Can anybody help me with it? I belive I can do the rest of work in Python as usually.\n </p>\n <p>\n  <em>\n   (Sorry for not linking binary blobs directly, I don't have enough of reputation here...)\n  </em>\n </p>\n <p>\n  <strong>\n   Edit 1:\n  </strong>\n  Added example 06-04002-0004 - the smallest picture I've found (212x160 px).\n </p>\n <p>\n  <strong>\n   Edit 2:\n  </strong>\n  I've realized that diskmag EXE have debug symbols inside! Some interesting function names are:\n </p>\n <ul>\n  <li>\n   RLEDecomp (this one is for RLE packed images, I've already solved it)\n  </li>\n  <li>\n   LZSS_Decompress\n  </li>\n  <li>\n   InitHuffDecomp_\n  </li>\n  <li>\n   HuffDecompress_\n  </li>\n  <li>\n   BuildHuffTree_\n  </li>\n  <li>\n   BuildHuffTreeImg_\n  </li>\n </ul>\n <p>\n  I can not say if it is more likely for decoding videos (yes, diskmag engine have his own format for videos too, I'm not that far yet), but maybe it will help?\n </p>\n <p>\n  <strong>\n   Edit 3:\n  </strong>\n  Diskmag EXE for download:\n  <code>\n   https://filebin.ca/3kL3kgNAqlJI\n  </code>\n </p>\n <hr/>\n <p>\n  <strong>\n   Example 06-04002-0004\n  </strong>\n </p>\n <ul>\n  <li>\n   dimensions: 212x160\n  </li>\n  <li>\n   High Color\n  </li>\n  <li>\n   first binary blob:\n   <code>\n    https://filebin.ca/3kJWIHFLZJ9X\n   </code>\n  </li>\n  <li>\n   second binary blob:\n   <code>\n    https://filebin.ca/3kJWL5SqHlAK\n   </code>\n  </li>\n  <li>\n   screen dump:\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/nlLIl.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"06-04002-0004\" src=\"https://i.sstatic.net/nlLIl.png\"/>\n  </a>\n </p>\n <hr/>\n <p>\n  <strong>\n   Example 06-05000-0004\n  </strong>\n </p>\n <ul>\n  <li>\n   dimensions: 640x480\n  </li>\n  <li>\n   High Color\n  </li>\n  <li>\n   first binary blob:\n   <code>\n    https://filebin.ca/3kF4G2r0DnXT\n   </code>\n  </li>\n  <li>\n   second binary blob:\n   <code>\n    https://filebin.ca/3kF4wopld9QG\n   </code>\n  </li>\n  <li>\n   screen dump:\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/XDyWN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"06-05000-0004\" src=\"https://i.sstatic.net/XDyWN.png\"/>\n  </a>\n </p>\n <hr/>\n <p>\n  <strong>\n   Example 06-05050-0004\n  </strong>\n </p>\n <ul>\n  <li>\n   dimensions: 640x480\n  </li>\n  <li>\n   High Color\n  </li>\n  <li>\n   first binary blob:\n   <code>\n    https://filebin.ca/3kF7hbOexD7D\n   </code>\n  </li>\n  <li>\n   second binary blob:\n   <code>\n    https://filebin.ca/3kF7lLgeaAQ7\n   </code>\n  </li>\n  <li>\n   screen dump:\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/KWnLF.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"06-05050-0004\" src=\"https://i.sstatic.net/KWnLF.png\"/>\n  </a>\n </p>\n <hr/>\n <p>\n  <strong>\n   Example 06-05483-0004\n  </strong>\n </p>\n <ul>\n  <li>\n   dimensions: 312x480\n  </li>\n  <li>\n   High Color\n  </li>\n  <li>\n   first binary blob:\n   <code>\n    https://filebin.ca/3kFAGWNEnNdM\n   </code>\n  </li>\n  <li>\n   second binary blob:\n   <code>\n    https://filebin.ca/3kFAJdwtohzB\n   </code>\n  </li>\n  <li>\n   screen dump:\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/AIZz8.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"06-05483-0004\" src=\"https://i.sstatic.net/AIZz8.png\"/>\n  </a>\n </p>\n <hr/>\n <p>\n  <strong>\n   Example 06-07011-0004\n  </strong>\n </p>\n <ul>\n  <li>\n   dimensions: 640x480\n  </li>\n  <li>\n   High Color\n  </li>\n  <li>\n   first binary blob:\n   <code>\n    https://filebin.ca/3kFGUQGcMZqD\n   </code>\n  </li>\n  <li>\n   second binary blob:\n   <code>\n    https://filebin.ca/3kFGRc37e2pm\n   </code>\n  </li>\n  <li>\n   screen dump:\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/j9pOf.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"06-07011-0004\" src=\"https://i.sstatic.net/j9pOf.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "651",
    "tags": [
        "file-format",
        "decompress"
    ],
    "user": "deefha",
    "time": "Dec 11, 2017 at 16:31",
    "comments": [
        {
            "user": "cimarron",
            "text": "<html><body><span class=\"comment-copy\">\n If you have the program binary, it may be easier just to reverse that and figure out how it is using the data in the files.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "deefha",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, I have program binary. By output of linux \"file\" command it's a\n <code>\n  MS-DOS executable, LE for MS-DOS, DOS4GW DOS extender (embedded)\n </code>\n . According to this answer:\n <a href=\"https://reverseengineering.stackexchange.com/questions/3074/decompiling-a-1990-dos-application\" title=\"decompiling a 1990 dos application\">\n  reverseengineering.stackexchange.com/questions/3074/â€¦\n </a>\n reversing will not be easy... Maybe DOSbox in his debug version can help?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "deefha",
            "text": "<html><body><span class=\"comment-copy\">\n @usr2564301 Added example 06-04002-0004 - the smallest picture I've found (212x160 px). It's the first example now.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "deefha",
            "text": "<html><body><span class=\"comment-copy\">\n Added info about debug symbols I've found in EXE. Sounds interesting!\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "cimarron",
            "text": "<html><body><span class=\"comment-copy\">\n Can you post the exe?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}