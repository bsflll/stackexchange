{
    "title": "Disassembly: Question regarding CMP within a stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/9489/disassembly-question-regarding-cmp-within-a-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently a newbie to assembly. I was looking at a disassembled program and I was wondering:\n </p>\n <p>\n  What does this do?\n </p>\n <pre><code>arg_0 dd 5\n\ncmp [ebp+arg_0],1Eh     ; Subtract the two values - flag either 0 or 1\njnz short loc_blahblah  ; if flag is 0 then jump\n</code></pre>\n <p>\n  I know that it is comparing the two values by subtracting them and keeping the flags.\n </p>\n <p>\n  However when I click on the cmp instruction it shows me :\n  <code>\n   [ebp+arg_0]=00000005\n  </code>\n  . Is this a memory address? Or is it the new value stored within the stack?\n </p>\n <p>\n  I tried making the cmp instruction result in a flag 0, however I can't seem to be able to do it. Could you explain this in simple terms?\n </p>\n <p>\n  Thanks.\n </p>\n <p>\n  P.S: If this is a little vague, I do apologies as I myself am a little confused.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "user36278",
    "time": "Jul 29, 2015 at 7:53",
    "comments": [
        {
            "user": "rev",
            "text": "<html><body><span class=\"comment-copy\">\n If you simply want to make it jump, change the \"jnz\" instruction to \"jmp\"; that'll ignore the flags and always jump\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your\n  <code>\n   arg_0 dd 5\n  </code>\n  seems a bit confusing to me as well, since, if that was an assembler instruction, it would define a global variable, not a stack position. Stack positions aren't initialized at compile time or program start, they get used when a program calls a subroutine. So i'll assume you copied this somehow when the program was running, not from the disassembly itself.\n </p>\n <p>\n  When a subroutine is called, the caller pushes the arguments on the stack - i'll assume a single argument here, and let's assume the value is\n  <code>\n   5\n  </code>\n  . At this moment the stack looks like this:\n </p>\n <pre><code>+----------+\n| 00000005 |\n+----------+     <--- esp\n</code></pre>\n <p>\n  Then, the caller executes the call instruction, which puts the return address onto the stack, and jumps to your subroutine. Now, the stack looks like this:\n </p>\n <pre><code>+----------+\n| 00000005 |\n+----------+\n| ret.addr |\n+----------+     <--- esp\n</code></pre>\n <p>\n  (note the stack grows from high addresses to low addresses on x86 processors, newer entries are below older ones)\n </p>\n <p>\n  And the called subroutine normally starts with saving the old value of\n  <code>\n   ebp\n  </code>\n  by pushing it to the stack, moving the stack pointer to\n  <code>\n   ebp\n  </code>\n  , and subtracting a small value from\n  <code>\n   esp\n  </code>\n  to make room for local variables.\n </p>\n <pre><code>+----------+\n| 00000005 |\n+----------+\n| ret.addr |\n+----------+\n| old_ebp  |\n+----------+     <--- ebp\n|          |\n|  .....   |\n+----------+     <--- esp\n</code></pre>\n <p>\n  So within the subroutine, the argument is always 8 bytes \"above\" the current value of\n  <code>\n   ebp\n  </code>\n  , while the distance to\n  <code>\n   esp\n  </code>\n  varies, depending on how much space local variables need, and how stuff is pushed to the stack within the subroutine. Which is why parameters are accessed by indexing relative to\n  <code>\n   ebp\n  </code>\n  .\n </p>\n <p>\n  Your\n  <code>\n   cmp\n  </code>\n  instruction compares that value from the stack with the number\n  <code>\n   0x1e\n  </code>\n  , or\n  <code>\n   30\n  </code>\n  decimal. The processor fetches the\n  <code>\n   5\n  </code>\n  from its location on the stack, subtracts 30 from it, throws away the result (\n  <code>\n   -25\n  </code>\n  ), and executes the jump instruction depending on whether or not the result was\n  <code>\n   0\n  </code>\n  .\n </p>\n <p>\n  To answer the first question: The\n  <code>\n   5\n  </code>\n  is not the\n  <em>\n   new\n  </em>\n  value within the stack, it's the value that was on the stack before the instruction, and is still on the stack as the instruction didn't change it.\n </p>\n <p>\n  Now, if you want the\n  <code>\n   cmp\n  </code>\n  instruction to result in a set zero flag, you'll have to make the result of the subtraction 0 - which means you need to make the result of\n  <code>\n   5-30\n  </code>\n  zero. To do this, you have two possibilities - either, change the 5 to a 30, or, change the 30 to a 5.\n </p>\n <p>\n  The first approach - changing the 5 to a 30 - is what you use when you're debugging your own program. Assume you noticed your program doesn't work as intended, your start a debugger, run a part of the program, and notice at a certain point in your program that a variable is 5 when you'd expect it to be 30. Obviously, something went wrong up to this point. But if you want to check if the rest of the program works, you'd like to edit the variable in place - which means, change the content of the memory location to 30, then continue running the program.\n </p>\n <p>\n  The second approach - changing the 30 to a 5 - is used when hacking programs that aren't your own. Assume a program that requires a registration number to be entered. You enter a random number - 12345678, debug the program, notice the digits are mangled somehow, and the result of this mangling is 5. The code you disassembled shows you need a 30 instead of the 5, but you don't know which combination of digits yields that 30. So what do you do? You change the\n  <code>\n   cmp [ebp+arg_0],1Eh\n  </code>\n  to\n  <code>\n   cmp [ebp+arg_0],05h\n  </code>\n  , save back that patched program, and suddenly your 12345678 will be a valid serial number.\n </p>\n <p>\n  So to \"make the cmp instruction result in a flag 0\", you'll either have to modify the stack memory to turn the\n  <code>\n   5\n  </code>\n  into a\n  <code>\n   0x1e\n  </code>\n  , or you'll have to modify the program code to turn the\n  <code>\n   cmp [ebp+arg_0],1Eh\n  </code>\n  into a\n  <code>\n   cmp [ebp+arg_0],05h\n  </code>\n  . Since you don't specify what exactly your use case is, i can't tell you which of them is what you need.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Guntram Blohm",
            "time": "Jul 29, 2015 at 8:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user36278",
                    "text": "<span class=\"comment-copy\">Thank-you! This was really helpful (especially the diagrammatic representation of the stack)!</span>",
                    "time": null
                }
            ]
        }
    ]
}