{
    "title": "How's this code able to make use of the stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/25100/hows-this-code-able-to-make-use-of-the-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer software to extend its functionality as expected of me. So I don't have the source code with me. Anyways, I am used to seeing codes that start like the one below, and is clear to me what is actually going on there.\n </p>\n <pre><code>push ebp\nmov ebp,esp\nsub esp,10h\n</code></pre>\n <p>\n  But my worries came when I saw one that looks like this below\n </p>\n <pre><code>mov edi,dword ptr [0E9A474h];\nimul eax,dword ptr [edi+5AF4h],70h;\ncmp dword ptr [ebp+eax-35DCh],0h;\nje some_location\n</code></pre>\n <p>\n  And the prologue for the function doesn't have any instruction like this\n </p>\n <pre><code>sub esp,10h\n</code></pre>\n <p>\n  At least I could have known the size of the stack the function is using for local variable storage.\n </p>\n <p>\n  And additional question is:\n </p>\n <ol>\n  <li>\n   Is this a good programming as far as assembly language is a concern?\n  </li>\n  <li>\n   Can there be any collision in memory between this function and another?\n  </li>\n  <li>\n   Is it possible to know the limit of this function in the stack? Either the Size\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "89",
    "tags": [
        "assembly",
        "x64dbg"
    ],
    "user": "Dexter's",
    "time": "May 23, 2020 at 15:16",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n 1. Unless you know it wasn't written by a compiler, I'm not sure what you mean 2. Why would there be a collision? 3. Why does there need to be any stack usage? Don't take it the wrong way, I just don't understand the questions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dexter's",
            "text": "<html><body><span class=\"comment-copy\">\n It was written by a compiler @multithr3at3d\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dexter's",
            "text": "<html><body><span class=\"comment-copy\">\n Why would there be a collision? Maybe if there's another function accessing data at an address in the range in which this other function is also doing the same, something like in a thread.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dexter's",
            "text": "<html><body><span class=\"comment-copy\">\n So to try and make you understand @multithr3at3d, I am kind of trying to know the size of the stack this function is using and maybe also what's actually going on there with the code. I know is getting some value from the heap, stores multiply it and save the result in the eax register\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dexter's",
            "text": "<html><body><span class=\"comment-copy\">\n And later this value in the eax register is used together with the value in ebp and a constant value 35DCh to reach to a point in the stack, copy a value there and compare to that value. Yes i suspect maybe another function is responsible for setting this value or maybe within the program itself. But what exactly is setting this value in the stack for this other function to test it. I am really confuse here. Any idea i will greatly appreciate\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The function prologue (\n  <code>\n   push ebp\n  </code>\n  , etc.) is common in assembly, but not required.\n  <code>\n   ebp\n  </code>\n  is often used for local varible access, but can as well be used as a general purpose register, just like\n  <code>\n   eax\n  </code>\n  .\n </p>\n <p>\n  Assembly allows the code to manipulate stack pointer at any place and doesn't force it to follow any convention - as long as there are no exceptions, CPU will not care; it will simply execute the instructions pointed by\n  <code>\n   eip\n  </code>\n  register. It will not stop you from accessing (even modifying) other function's memory as long as your program has enough privileges to do that. I think this answers your first two questions.\n </p>\n <p>\n  Regarding your third question, in general, it is not possible. However, usually, you can look for the instructions modifying\n  <code>\n   esp\n  </code>\n  (like\n  <code>\n   push\n  </code>\n  ,\n  <code>\n   pop\n  </code>\n  , etc.) and infer it from them. If you showed us the entire function, it would be easier to tell the size in this particular case.\n </p>\n <p>\n  In fact, the instructions you have shared with us don't seem to access local variables of this function or of any other either. I don't know what are the values stored in\n  <code>\n   edi\n  </code>\n  and\n  <code>\n   ebp\n  </code>\n  registers, but I guess they point to some dynamically allocated data on heap.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "bart1e",
            "time": "May 23, 2020 at 16:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dexter's",
                    "text": "<span class=\"comment-copy\">thanks, yes it does clear thinks out for me. And also they do point to a dynamic data on the heap, very correct.</span>",
                    "time": null
                },
                {
                    "user": "Dexter's",
                    "text": "<span class=\"comment-copy\">I know now that i can't get the size of the stack since the function can actually access any location on the stack, just like that. thanks a lot, i will try to do the mathematics done here <code>cmp dword ptr [ebp+eax-35DCh],0h;</code> in the reserve and see if i can get the return address of the function setting it or maybe something that can help me find the function responsible for setting this value. Indeed you have help me. thanks</span>",
                    "time": null
                }
            ]
        }
    ]
}