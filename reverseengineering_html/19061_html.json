{
    "title": "Obfuscated code analysis - can unused variables be ignored?",
    "link": "https://reverseengineering.stackexchange.com/questions/19061/obfuscated-code-analysis-can-unused-variables-be-ignored",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am analyzing a malicious javascript. The code is encoded and obfuscated in a way that I did not manage to even partially deobfuscate yet and it is filled with long strings. In order to simplify the task I put the code to\n  <a href=\"http://jshint.com/\" rel=\"nofollow noreferrer\">\n   JShint\n  </a>\n  . According to the tool, there are 82 variables that are not used:\n  <a href=\"https://i.sstatic.net/QfaCM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"JShint output\" src=\"https://i.sstatic.net/QfaCM.png\"/>\n  </a>\n </p>\n <p>\n  Given the context, is it safe to assume that the reason these variables exist is most likely to add to obfuscation but not to fulfill any operation? Would it be reasonable to delete declarations of these variables and have a shorter code to work with?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "420",
    "tags": [
        "obfuscation",
        "deobfuscation",
        "javascript"
    ],
    "user": "skooog",
    "time": "Aug 14, 2018 at 15:02",
    "comments": [
        {
            "user": "memo",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, it would be perfectly reasonable. What do you have to lose anyway? If your analysis fails, put them back and start over.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This might be true that those variables are added only to confuse analysis but remember that in Javascript there are so many ways to access the variable that I would take such info from an automated tool with a little grain of salt.\n </p>\n <p>\n  It might be true but it also might be that this code uses non-direct access to those 82 variables.\n </p>\n <p>\n  Having such code:\n </p>\n <pre><code>re = 'testing a variable';\nalert(window['re']);\n</code></pre>\n <p>\n  JSHint will tell you that the variable is not used but it is.\n  <code>\n   eval\n  </code>\n  would be another example of indirect usage the linter can miss.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Paweł Łukasik",
            "time": "Aug 14, 2018 at 22:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Often then unsued variables are unusued only until you make the first deobfuscation step.\n </p>\n <p>\n  After first run, you could see that some code uses these variables, for example using an eval. This because the previous step of obfuscation make  vars look like unusued, only because their use in the code is obfuscated on a (again) previous step.\n </p>\n <p>\n  For example. You could use eval and base64 encoding to hide the use of a piece of code.\n </p>\n <p>\n  In a situation like your I tend to remove apparently unused code using IDE tools, then, if the code is still working I can be sure I removed useless fog from the code.\n </p>\n <p>\n  Person opinion: JsHint fall to detect used cars just when JavaScript coding is confused... An alert using window object to access a variable make JsHint blind. Is not a good help\n  <em>\n   for this specific purpose\n  </em>\n  .\n </p>\n <p>\n  <em>\n   obviously you need to run every sort of sandboxing, sw and hw isolation and emulation when you try a malicious code\n  </em>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "realtebo",
            "time": "Aug 19, 2018 at 11:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a little off-topic but if you are about to analyze malware as your everyday job you will find yourself in the situation that you don't have the time to deobfuscate every script you will stumble upon.\n </p>\n <p>\n  I highly suggest you make yourself familiar with - for example - SpiderMonkey (\n  <a href=\"https://blog.didierstevens.com/programs/spidermonkey/\" rel=\"nofollow noreferrer\">\n   https://blog.didierstevens.com/programs/spidermonkey/\n  </a>\n  ).\n </p>\n <p>\n  Also have a look at\n  <a href=\"https://reverseengineering.stackexchange.com/questions/4561/how-to-deobfuscate-an-obfuscated-javascript-file-like-this\">\n   How to deobfuscate an obfuscated javascript file like this?\n  </a>\n  which might guide you to the right direction.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "hariom",
            "time": "Aug 15, 2018 at 6:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}