{
    "title": "Why is j_free function and free_ptr pointer needed in glibc?",
    "link": "https://reverseengineering.stackexchange.com/questions/15234/why-is-j-free-function-and-free-ptr-pointer-needed-in-glibc",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am disassembling\n  <code>\n   libc-2.23.so\n  </code>\n  , there exists a thunk method called\n  <code>\n   j_free\n  </code>\n  which jumps at the location pointed to by\n  <code>\n   free_ptr\n  </code>\n  pointer in glibc. Why do those even exist while\n  <code>\n   free()\n  </code>\n  itself is exported?\n </p>\n <h2>\n  <a href=\"https://i.sstatic.net/Jrntj.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Jrntj.png\"/>\n  </a>\n </h2>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "289",
    "tags": [
        "libc"
    ],
    "user": "sherlock",
    "time": "Apr 27, 2017 at 22:56",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n what exactly are you disassembling?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n I am disassembling\n <code>\n  libc-2.23.so\n </code>\n , seems that\n <code>\n  j_free\n </code>\n is a thunk method\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In ELF, all symbols are global. it means that a symbol in another module (e.g. main executable) can override the glibc's\n  <code>\n   free\n  </code>\n  . that's why all calls to it go through a GOT pointer. On the first call, the dynamic linker will go through all symbols in all modules and pick up the first one offering\n  <code>\n   free\n  </code>\n  . If no other modules export it, the libc one will be used.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2017 at 5:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Does it make sense to have calls internal to <code>libc</code> to be routed through <code>plt</code> instead of a relative call?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">yes, because it needs to be prepared for possibility that they're overridden by an external module.</span>",
                    "time": null
                }
            ]
        }
    ]
}