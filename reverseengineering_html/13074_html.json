{
    "title": "Debug android shared library interactivly",
    "link": "https://reverseengineering.stackexchange.com/questions/13074/debug-android-shared-library-interactivly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been trying to reverse engineer .so file in android application.I used objdump from android ndk to look at the assembly of the file.I do not have a problem with assembly but analyzing the file statically is just so tedious.I am looking for a method to actually run the application on my phone and set break points and see how the registers and the stack are updated.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "696",
    "tags": [
        "android"
    ],
    "user": "Gray",
    "time": "Jul 18, 2016 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you can afford the paid version of IDA Pro, this is very easy:\n </p>\n <ul>\n  <li>\n   make sure your Windows, Linux or OSX Host is in the same network as your phone via WIFI\n  </li>\n  <li>\n   start\n   <code>\n    android_server\n   </code>\n   on your phone\n  </li>\n  <li>\n   use any tool to find out the WIFI ip of the phone\n  </li>\n  <li>\n   after starting the application on your phone, load the .so in IDA, start the remote debugger, and connect to the IP you found out in step 3\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Jul 19, 2016 at 14:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}