{
    "title": "What is this assembly doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20843/what-is-this-assembly-doing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote a very basic crackme to learn how assembly works.\n </p>\n <p>\n  Even though I wrote it myself, I am having some trouble understanding a few pieces of the assembly:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ZAZZD.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZAZZD.png\"/>\n  </a>\n </p>\n <p>\n  What I know up to now is:\n  <code>\n   [rbp+rax+input_buffer]\n  </code>\n  is basically\n  <code>\n   input_buffer[rax]\n  </code>\n  , xor'ing two of the same registers resets them and that's about it (apart from the very basic stuff like add, mov, inc).\n </p>\n <p>\n  I specifically don't understand what\n  <code>\n   movsx ..\n  </code>\n  and\n  <code>\n   add ecx, 0FFF..\n  </code>\n  is doing.\n </p>\n <p>\n  <s>\n   The input_buffer is filled with\n   <code>\n    _fgets\n   </code>\n   . I'm intentionally not saying a working input to see if you can figure it out (it shouldn't be hard anyways).\n  </s>\n </p>\n <p>\n  A proper input would be\n  <code>\n   0123456789\n\n  </code>\n  , note that I discard the newline via\n  <code>\n   strcspn\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "155",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "G. Ramistella",
    "time": "Mar 10, 2019 at 20:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I guess the original code is something like:\n </p>\n <pre><code>char input_buffer[...];\n// ...\nint c = input_buffer[i];\n</code></pre>\n <p>\n  Since the variable\n  <code>\n   c\n  </code>\n  is a\n  <code>\n   int\n  </code>\n  and\n  <code>\n   input_buffer\n  </code>\n  is a\n  <code>\n   char[]\n  </code>\n  , your compiler has to promote the read\n  <code>\n   char\n  </code>\n  as a\n  <code>\n   int\n  </code>\n  . That's why you have the\n  <code>\n   movsx\n  </code>\n  instruction. It will read the current character and sign extend it, so it'll fit to a\n  <code>\n   int\n  </code>\n  .\n </p>\n <p>\n  About the\n  <code>\n   add\n  </code>\n  , it's common for a compiler to encode a\n  <code>\n   sub dst, imm\n  </code>\n  as\n  <code>\n   add dst, -imm\n  </code>\n  , if you negate\n  <code>\n   0xffffffd0\n  </code>\n  (SHIFT - in IDA), you'll obtain\n  <code>\n   -0x30\n  </code>\n  . This is how you convert the ASCII digit into a integer.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "wisk",
            "time": "Mar 10, 2019 at 22:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}