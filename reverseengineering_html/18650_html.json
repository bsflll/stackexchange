{
    "title": "Fixing up data sections of a malware sample in IDA database?",
    "link": "https://reverseengineering.stackexchange.com/questions/18650/fixing-up-data-sections-of-a-malware-sample-in-ida-database",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a piece of malware dumped by segments. A lot of the data section seems to be screwed up when loaded into IDA Pro.\n </p>\n <p>\n  First of all, pointers are stored in a single array which is incorrect. I want these to be separated and each value have their own pointer which I can xref across the db. Instead of seeing them accessed as\n  <code>\n   array[ index ]\n  </code>\n  which is too hard to keep track of and impossible to xref correctly.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SFYky.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"array\" src=\"https://i.sstatic.net/SFYky.png\"/>\n  </a>\n </p>\n <p>\n  Next, many floating point values ( represented in hex ) are stored like this instead of as a single hex number. I want these values to represent 0x3d4c0cc0cd ( 0.05 ).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/nwsdM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"floats\" src=\"https://i.sstatic.net/nwsdM.png\"/>\n  </a>\n  I'm not all that familiar with IDA and I'm wondering if there is a way to fix this ( preferably in bulk instead of me having to go through each value one by one )\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "172",
    "tags": [
        "ida",
        "dumping"
    ],
    "user": "Bruce Hansworth",
    "time": "Jul 1, 2018 at 16:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA, as an\n  <em>\n   interactive\n  </em>\n  disassembler allows you to change how data is displayed to fit the actual meaning and usage. Although IDA tries to infer data types (among other things) it is not always successful.\n </p>\n <p>\n  Generally, you can place the cursor on a data item or operand and either right click or use the Edit menu.\n </p>\n <p>\n  For example, to address your second issue and to set a data type to a floating point number you'll need to place your cursor on it and click the Edit->Operand->Number->Floating point submenu.\n </p>\n <p>\n  Your first issue is a little more tricky. If the code in front of you uses an offset in an array to get different pointers, there's  no easy and clean way to hide that, and there shouldn't be.\n </p>\n <p>\n  Unlike the floating point case, this time IDA inferred data\n  <em>\n   correctly\n  </em>\n  , and I do not recommend hiding that information from the user (aka you). Instead, you may wanna write a short IDAPython script that would add comments according to the pointer used, as well as actually take the time to understand what those indices mean.\n </p>\n <p>\n  Creating a structure and applying it to the array, giving names to each offset, is something I often do. You can also create an enum with indices named by the pointer's function.\n  <em>\n   If I misunderstood and IDA did infer the pointers array incorrectly please  correct me and make it clearer in your question.\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "NirIzr",
            "time": "Jul 1, 2018 at 8:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Bruce Hansworth",
                    "text": "<span class=\"comment-copy\">@Nirlzr Yes, the structure is incorrect. These pointers should be separate. I edited my question. What can I do to fix this?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@BruceHansworth Are they being accessed directly in the assembly code or are they always being accessed through the same offset (<code>dword_65b64268</code>)?</span>",
                    "time": null
                }
            ]
        }
    ]
}