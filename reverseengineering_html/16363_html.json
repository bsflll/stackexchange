{
    "title": "What does adding 4.294967296e9 to a double do?",
    "link": "https://reverseengineering.stackexchange.com/questions/16363/what-does-adding-4-294967296e9-to-a-double-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reverse engineering an application which commonly adds\n  <code>\n   4.294967296e9\n  </code>\n  to a double if the number is negative. Part of the disassembly:\n </p>\n <pre><code>mov     eax, label_to_memory\nfild    label_to_memory\ntest    eax, eax\njge     short some_label\nfadd    ds:some_double_value\nsome_label:\n</code></pre>\n <p>\n  If I'm correct, it takes the jump if the highest bit isn't set, i.e. its a positive number.\n  <code>\n   some_double_value\n  </code>\n  points to the constant\n  <code>\n   4.294967296e9\n  </code>\n  .\n </p>\n <p>\n  To understand what the piece of code is doing I need to know why it adds this specific number, the only piece of Information I found was a line of code in\n  <a href=\"http://web.mit.edu/~mkgray/afs/bar/afs/net/project/attic/quipu/isode-8.0/others/ntp/ntpsubs.c\" rel=\"noreferrer\">\n   http://web.mit.edu/~mkgray/afs/bar/afs/net/project/attic/quipu/isode-8.0/others/ntp/ntpsubs.c\n  </a>\n  which says\n </p>\n <pre><code>#ifdef  VAX_COMPILER_FLT_BUG\n    if (b < 0.0) b += 4.294967296e9;\n#endif\n</code></pre>\n <p>\n  So, what is the significance of that number?\n </p>\n <p>\n  Additional Info: The number can not be negative, so this can actually never happen.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "626",
    "tags": [
        "disassembly",
        "float"
    ],
    "user": "tkausl",
    "time": "Sep 17, 2017 at 22:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I actually found the answer while writing this question!\n </p>\n <p>\n  This number is exactly\n  <code>\n   UINT_MAX + 1\n  </code>\n  , stored as a double. So it seems this code converts a\n  <strong>\n   unsigned integer\n  </strong>\n  to a double. The\n  <code>\n   fild\n  </code>\n  instruction loads the 32 bit value as\n  <strong>\n   signed\n  </strong>\n  value, after adding the max possible unsigned value + 1, the double contains the same value as the\n  <strong>\n   unsigned\n  </strong>\n  integer.\n </p>\n <p>\n  So the compiler produced this probably automatically from something like this:\n </p>\n <pre><code>unsigned int num; // some arbitrary 32 bit unsigned number\ndouble d = num;\n</code></pre>\n <p>\n  Since it took me some time to figure it out, I thought it may help someone else find the solution faster than me.\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "tkausl",
            "time": "Sep 17, 2017 at 22:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}