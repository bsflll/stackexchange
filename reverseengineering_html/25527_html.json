{
    "title": "Frida not able to trace sub_XXXXX which must have been called",
    "link": "https://reverseengineering.stackexchange.com/questions/25527/frida-not-able-to-trace-sub-xxxxx-which-must-have-been-called",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following pseudocode generated by\n  <code>\n   IDA Pro decompiler\n  </code>\n  :\n </p>\n <pre><code>__int64 *__usercall sub_155B5@<X0>(__int64 *a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)\n{\n  ...\n  result = sub_222E0((__int64 *)a3, 2 * a2, 0x20u); \n  return result;\n}\n</code></pre>\n <p>\n  Using\n  <code>\n   frida-trace\n  </code>\n  , I could verify that\n  <code>\n   sub_155B5\n  </code>\n  is called for every API request. This is the command that I used:\n </p>\n <pre><code>$ frida-trace -U com.app.name -a 'libname.so!0x155b5'\n</code></pre>\n <p>\n  Therefore, I thought I could safely assume that\n  <code>\n   sub_222E0\n  </code>\n  was also executed, because it's contained by\n  <code>\n   sub_155B5\n  </code>\n  which was obviously executed. However, it turned out that I was wrong.\n  <code>\n   frida-trace\n  </code>\n  failed to trace\n  <code>\n   sub_222E0\n  </code>\n  using the same command above.\n </p>\n <p>\n  What are the possible causes for this outcome?\n </p>\n <p>\n  Thank you.\n </p>\n <h2>\n  EDIT\n </h2>\n <p>\n  Here's the declaration of\n  <code>\n   sub_222E0\n  </code>\n  :\n </p>\n <pre><code>__int64 __fastcall sub_222E0(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_4D2EC(*(_QWORD **)(a1 + 64), a2, a3);\n}\n</code></pre>\n <p>\n  And\n  <code>\n   frida-trace\n  </code>\n  does trace\n  <code>\n   sub_4D2EC\n  </code>\n  everytime\n  <code>\n   sub_155B5\n  </code>\n  is executed, but not\n  <code>\n   sub_222E0\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "358",
    "tags": [
        "ida",
        "android",
        "frida"
    ],
    "user": "shinhong",
    "time": "Jul 21, 2020 at 14:05",
    "comments": [
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n I assume this is not full decompiler output. Maybe the code has got \"return\" instruction somewhere upper, or it throws exception so the sub_222E0 is not executed? Remember the decompiler output is not always correct, thats why you should also pay attention to assembly instructions\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "shinhong",
            "text": "<html><body><span class=\"comment-copy\">\n @morsisko thanks for the comment. After some experiment, I found that\n <code>\n  sub_222E0\n </code>\n in fact was a thin wrapper function of another subroutine, which\n <code>\n  frida\n </code>\n was able to trace. Still confused why this is happening.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}