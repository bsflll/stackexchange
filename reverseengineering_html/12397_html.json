{
    "title": "32-bit binary stack layout on a x64 Linux OS",
    "link": "https://reverseengineering.stackexchange.com/questions/12397/32-bit-binary-stack-layout-on-a-x64-linux-os",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Stack layout is well documented in many ways. Especially for\n  <em>\n   x86\n  </em>\n  systems as there were numerous tutorials on how to exploit stack overflow on old 32-bit systems many years ago.\n </p>\n <p>\n  So far we can know that on a 32-bit system, the user stack starts from\n  <em>\n   0xc0000000\n  </em>\n  address (which is the limit between usermode and kernelmode).\n </p>\n <p>\n  This address is not the same if we take an\n  <em>\n   Elf32\n  </em>\n  running on a\n  <em>\n   x86-64\n  </em>\n  linux system.\n </p>\n <p>\n  I cannot find this address but I can figure out it is\n  <em>\n   0xffffe000\n  </em>\n  thanks to gdb:\n </p>\n <p>\n  <code>\n   (gdb) x $esp\n0xffffd4bc: 0xf7e16a83\n(gdb) x/w 0xffffdffc\n0xffffdffc: 0x00000000\n(gdb) x/w 0xffffe000\n0xffffe000: Cannot access memory at address 0xffffe000\n  </code>\n </p>\n <p>\n  We can actually see that the\n  <em>\n   0xffffe000\n  </em>\n  address points to an invalid location (or at least the process doesn't have proper permission to access this memory page).\n </p>\n <p>\n  Yet I cannot especially find a relevant source that tells us that\n  <strong>\n   the gnu stack of a x86 program on a x64 linux starts from 0xffffe000\n  </strong>\n  . Am I doing things wrong?\n </p>\n <p>\n  I can find sources telling us about\n  <em>\n   linux-gate.so.1\n  </em>\n  but I do not think this is the point here.\n </p>\n <p>\n  Any ideas, reversers?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "3k",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "Geoffrey R.",
    "time": "Apr 11, 2016 at 12:10",
    "comments": [
        {
            "user": "Ta Thanh Dinh",
            "text": "<html><body><span class=\"comment-copy\">\n This is a coincidence, I have the same problem with you about the valid address of 32-bit binary stack on x64.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "<html><body><span class=\"comment-copy\">\n What values can you get then?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "<html><body><span class=\"comment-copy\">\n I found something probably relevant here:\n <a href=\"http://stackoverflow.com/questions/29426476/linux-process-virtual-address-spaces-address-range\" title=\"linux process virtual address spaces address range\">\n  stackoverflow.com/questions/29426476/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "<html><body><span class=\"comment-copy\">\n I gets closer here:\n <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.19#L910\" rel=\"nofollow noreferrer\">\n  lxr.free-electrons.com/source/arch/x86/include/asm/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<html><body><span class=\"comment-copy\">\n In\n <a href=\"https://lwn.net/Articles/631631/\" rel=\"nofollow noreferrer\">\n  this article\n </a>\n , the valid range for stack of a process is calculated from\n <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.18#L840\" rel=\"nofollow noreferrer\">\n  TASK_SIZE\n </a>\n for 32-bit processes.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The valid stack access range of a (32 or 64 bit) process can be viewed by looking into its\n  <em>\n   memory map\n  </em>\n  . We can observe the memory map of a process with id\n  <code>\n   pid\n  </code>\n  by\n  <code>\n   cat /proc/pid/maps\n  </code>\n  , an example of a\n  <code>\n   32-bit process\n  </code>\n  on my 64-bit box:\n </p>\n <pre><code>...\n09b58000-09b79000 rw-p 00000000 00:00 0                    [heap]\n...\nf7785000-f7787000 rw-p 001c7000 00:23 592106               /usr/lib/libc-2.20.so\n...\nf77c2000-f77c4000 r--p 00000000 00:00 0                    [vvar]\nf77c4000-f77c5000 r-xp 00000000 00:00 0                    [vdso]\n...\nf77e8000-f77e9000 rw-p 00022000 00:23 592099               /usr/lib/ld-2.20.so\nfff9b000-fffbc000 rw-p 00000000 00:00 0                    [stack]\n</code></pre>\n <p>\n  Then the valid range for\n  <code>\n   stack\n  </code>\n  is\n  <code>\n   [0xfff9b000, 0xfffbc000)\n  </code>\n  , memory access to an address higher or equal than\n  <code>\n   0xfffbc000\n  </code>\n  will trigger\n  <code>\n   memory access violation\n  </code>\n  exception. According to\n  <a href=\"https://lwn.net/Articles/631631/\" rel=\"nofollow\" title=\"How programs get run: ELF binaries\">\n   this article\n  </a>\n  , this range is calculated when the kernel\n  <a href=\"http://lxr.free-electrons.com/source/fs/binfmt_elf.c?v=3.18#L571\" rel=\"nofollow\">\n   maps the binary into the memory\n  </a>\n  , and by\n  <a href=\"http://lxr.free-electrons.com/source/fs/binfmt_elf.c?v=3.18#L555\" rel=\"nofollow\">\n   several\n  </a>\n  <a href=\"http://lxr.free-electrons.com/source/fs/exec.c?v=3.18#L640\" rel=\"nofollow\">\n   functions\n  </a>\n  , the interesting input for them is\n  <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.18#L840\" rel=\"nofollow\">\n   <code>\n    STACK_TOP\n   </code>\n  </a>\n  which is defined by\n  <code>\n   TASK_SIZE\n  </code>\n  for\n  <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.18#L834\" rel=\"nofollow\">\n   32-bit processes\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ta Thanh Dinh",
            "time": "Apr 12, 2016 at 14:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Geoffrey R.",
                    "text": "<span class=\"comment-copy\">Well, I guess this deserves several further investigations. Thanks for your answer.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks @GeoffreyR., you are welcome. In fact, I have the same question with you.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a partial answer.\n </p>\n <p>\n  One can determine wether the memory layout ends up to\n  <strong>\n   0xc0000000\n  </strong>\n  or\n  <strong>\n   0xffffe000\n  </strong>\n  thanks to the\n  <a href=\"http://linux.die.net/man/2/personality\" rel=\"nofollow\">\n   personality system call\n  </a>\n  . By reading the\n  <em>\n   ADDR_LIMIT_3GB\n  </em>\n  flag it is possible to figure out wether a 32-bit process is mapped up to\n  <strong>\n   0xc0000000\n  </strong>\n  or\n  <strong>\n   0xffffe000\n  </strong>\n  .\n </p>\n <p>\n  I could not tell why the\n  <strong>\n   0xffffe000\n  </strong>\n  is relevant, except that it is 8192 bytes shorter that the end of a\n  <em>\n   4GB memory space\n  </em>\n  . Maybe it has something to do with the kernel stack size.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Geoffrey R.",
            "time": "Apr 12, 2016 at 12:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}