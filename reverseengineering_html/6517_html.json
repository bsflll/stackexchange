{
    "title": "blackbox vulnerability assessment",
    "link": "https://reverseengineering.stackexchange.com/questions/6517/blackbox-vulnerability-assessment",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wonder if the tools like AddressSanitizer exist for blackbox analysis.\n </p>\n <p>\n  For instance I've fuzzer that can probe some 100 variants per second and after a few seconds crash was detected. Maybe some tool can say exactly is this vulnerability or just a bug and distinguish the vulns from each other?\n </p>\n <p>\n  This tools are now known to me:\n </p>\n <ol>\n  <li>\n   <a href=\"http://msecdbg.codeplex.com/\" rel=\"nofollow\">\n    !exploitable\n   </a>\n   - it's ok, but maybe standalone tool for such purpose exists?\n  </li>\n  <li>\n   <a href=\"https://code.google.com/p/address-sanitizer/\" rel=\"nofollow\">\n    AddressSanitizer\n   </a>\n   - unfortunately no blackbox testing support(as far as I understood app must be linked with AddressSanitizer and specific routines should be invoked)\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "219",
    "tags": [
        "exploit",
        "fuzzing",
        "vulnerability-analysis"
    ],
    "user": "see ya",
    "time": "Oct 22, 2014 at 6:19",
    "comments": [
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n !exploitable is really awful.. It has LOADS of false postives and negatives. Best is to try by hand.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://peachfuzzer.com/\" rel=\"nofollow\">\n   Peach Fuzzer\n  </a>\n  performs automated exploitability analysis. Though I haven't used it myself and can't say whether or not it's any better than\n  <a href=\"http://msecdbg.codeplex.com/\" rel=\"nofollow\">\n   !exploitable\n  </a>\n  .\n </p>\n <p>\n  If neither Peach Fuzzer nor !exploitable meets your needs and you can't find anything else, you're best off grouping crashes by exception code and exception address (RVA if the program uses ASLR). Then if you have ten variants that share the same exception code and exception address, you only need to manually analyze one of them instead of all ten.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Oct 22, 2014 at 14:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "see ya",
                    "text": "<span class=\"comment-copy\">Thanks for idea, I'll try. FYI Peach ships with !exploitable from Peach v2.3.5 as far as I know.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On Windows you may use\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff549557(v=vs.85).aspx\" rel=\"nofollow\">\n   GFlags\n  </a>\n  that is distributed with Windbg. It allows you to detect heap corruption early but also can be useful in detecting other class of errors. Simple example can be found\n  <a href=\"http://reversingonwindows.blogspot.sg/2012/03/one-byte-heap-overflow.html\" rel=\"nofollow\">\n   here\n  </a>\n  .\n </p>\n <p>\n  <a href=\"http://blog.exodusintel.com/2013/11/26/browser-weakest-byte/\" rel=\"nofollow\">\n   This\n  </a>\n  is a real-life example to use GFlags.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Attila",
            "time": "Oct 23, 2014 at 8:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "see ya",
                    "text": "<span class=\"comment-copy\">Thank you. Seems like this tool can do part of needed job.</span>",
                    "time": null
                }
            ]
        }
    ]
}