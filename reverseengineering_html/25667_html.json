{
    "title": "Encrypted firmware, need some hints",
    "link": "https://reverseengineering.stackexchange.com/questions/25667/encrypted-firmware-need-some-hints",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm relatively new to firmware reverse engineering but it has been a very interesting journey, loved it!\n </p>\n <p>\n  I am currently trying to crack open the firmware of my Panasonic Lumix DC-G9 camera to see if I can bypass a recording limit. However, it seems like they did a great job of encrypting the firmware.\n </p>\n <p>\n  You can download the .bin firmware file\n  <a href=\"https://av.jpn.support.panasonic.com/support/share2/eww/com/dsc/fts/zip/G9___V22.zip\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  I tried Binwalk, but the output only shows one entry, which might be a false positive:\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n26453361      0x193A571       gzip compressed data, has header CRC, has 28967 bytes of extra data, last modified: 2052-10-14 16:14:25 (bogus date)\n</code></pre>\n <p>\n  I tried extracting that, but\n  <code>\n   gunzip\n  </code>\n  only reports that the header checksum is not equal to the computed checksum. So could still be a false positive.\n </p>\n <p>\n  I also tried to plot out the entropy of the firmware:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/YTYq3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Entropy plot\" src=\"https://i.sstatic.net/YTYq3.png\"/>\n  </a>\n </p>\n <p>\n  Seems encrypted to me? Next step was to check if I could read any hints of the basic\n  <code>\n   strings\n  </code>\n  command:\n </p>\n <pre><code>MC471\npanasonic\nMC471\nloader1\nloader2\nloader3\nprogram\nstorage\npostboot1\npostboot2\npostboot3\npostboot4\npostboot5\ndram_sleep\neep_ow_a\neep_ow_b\neep_adj\neep_fix\nmusic\nosdover\nosddata\nkoutei_kao\navchd_info\neep_net_a\neep_net_b\neep_act_a\neep_act_b\nzboot\nzimage\nrootfs1\nrootfs2\napu0_data_i\napu0_data_e\napu0_code_i\napu0_code_e\nusbcharge\nipu_data\nipu_code\nrc_data\nrc_code\nnr_data\nnr_code\nhm_c_prog\n</code></pre>\n <p>\n  Seems like\n  <code>\n   zboot\n  </code>\n  is the bootloader?\n </p>\n <p>\n  Since I'm still pretty new, are there any hints on how I could progress on this? I really hope it's not cracking open the camera and trying to debug any hardware ROM which stores the keys!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "825",
    "tags": [
        "firmware",
        "encryption"
    ],
    "user": "Johnny Verbeek",
    "time": "Aug 13, 2020 at 10:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Assuming this is a firmware file, a good first step would be to identify where execution starts. You could do this by:\n </p>\n <ul>\n  <li>\n   finding the type of processor / microcontroller / system-on-chip and checking for the reset vector (try searching for product approvals, e.g. from the FCC, which might contain interior images).\n  </li>\n  <li>\n   scanning the file for known byte sequences associated with code, for example function prologues.\n  </li>\n  <li>\n   reading the manual for the potential boot loader and looking for code associated with it. For example the linker file might identify where initialisation code lives.\n  </li>\n </ul>\n <p>\n  This would enable analysis of the overall code structure, which is likely compressed or encrypted if your entropy graph is correct.\n </p>\n <p>\n  Depending on how firmware updates are delivered it’s possible this file is encrypted and would be decrypted by the microcontroller.\n </p>\n <p>\n  This could happen:\n </p>\n <ul>\n  <li>\n   during update, if the existing firmware decrypts and validates the update before writing to flash.\n  </li>\n  <li>\n   on boot, if the target system supports encrypted firmware.\n  </li>\n </ul>\n <p>\n  In both of these cases it’s much harder to analyse the system. You’d typically need a combination of hardware hacking and firmware reverse engineering to make progress.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "David",
            "time": "Aug 15, 2020 at 15:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}