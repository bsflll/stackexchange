{
    "title": "How to generate the call graph of a binary file?",
    "link": "https://reverseengineering.stackexchange.com/questions/16081/how-to-generate-the-call-graph-of-a-binary-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a non-stripped ELF binary for which I want to create a call graph as a\n  <a href=\"https://en.wikipedia.org/wiki/DOT_(graph_description_language)\" rel=\"noreferrer\">\n   dot\n  </a>\n  file. Is there such a tool which generates the call graph?\n </p>\n <p>\n  EDIT: Is there away in addition to the conventional call graph to find a call graph between libraries based on the executable. For example showing the call graph only of from\n  <code>\n   libc\n  </code>\n  to\n  <code>\n   pthread\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "18",
    "answers": 4,
    "views": "16k",
    "tags": [
        "binary-analysis",
        "elf",
        "call-graph"
    ],
    "user": "0x90",
    "time": "Aug 6, 2018 at 15:05",
    "comments": [
        {
            "user": "0x90",
            "text": "<html><body><span class=\"comment-copy\">\n Another option would be:\n <a href=\"https://rizin.re\" rel=\"nofollow noreferrer\">\n  rizin.re\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use\n  <a href=\"https://github.com/radare/radare2\" rel=\"noreferrer\">\n   radare2\n  </a>\n  or one of the alternatives below to generate a full call-graph in dot format.\n </p>\n <h2>\n  radare2 Installation\n </h2>\n <p>\n  First of all, install radare2 from git repository:\n </p>\n <pre><code>$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n</code></pre>\n <h2>\n  Analysis\n </h2>\n <p>\n  After you've downloaded and installed radare2, open your binary and perform analysis on it using the\n  <code>\n   aaa\n  </code>\n  command:\n </p>\n <pre><code>$ r2 /bin/ls\n[0x004049a0]> aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Type matching analysis for all functions (afta)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\n <h2>\n  Output visual graph\n </h2>\n <p>\n  The\n  <code>\n   ag\n  </code>\n  command and subcommands can help you to output the visual graph into\n  <a href=\"http://www.webgraphviz.com/\" rel=\"noreferrer\">\n   Graphviz\n  </a>\n  format.\n </p>\n <pre><code>[0x00000000]> ag?\nUsage: ag<graphtype><format> [addr]\nGraph commands:\n| aga[format]             Data references graph\n| agA[format]             Global data references graph\n| agc[format]             Function callgraph\n| agC[format]             Global callgraph\n| agd[format] [fcn addr]  Diff graph\n| agf[format]             Basic blocks function graph\n| agi[format]             Imports graph\n| agr[format]             References graph\n| agR[format]             Global references graph\n| agx[format]             Cross references graph\n| agg[format]             Custom graph\n| ag-                     Clear the custom graph\n| agn[?] title body       Add a node to the custom graph\n| age[?] title1 title2    Add an edge to the custom graph\n\nOutput formats:\n| <blank>                 Ascii art\n| *                       r2 commands\n| d                       Graphviz dot\n... <truncated> ...\n| w [path]                Write to path or display graph image (see graph.gv.format and graph.web)\n</code></pre>\n <p>\n  You're searching for the\n  <code>\n   agCd\n  </code>\n  command. The\n  <code>\n   C\n  </code>\n  specifies to output a full (\"global\") call-graph of the program. The\n  <code>\n   d\n  </code>\n  specifies to output in Graphviz dot format.\n </p>\n <pre><code>[0x004049a0]> agCd > output.dot\n</code></pre>\n <p>\n  The\n  <code>\n   dot\n  </code>\n  utility is part of the Graphviz software which can be installed using\n  <code>\n   sudo apt-get install graphviz\n  </code>\n  .\n  \n\n  You can view your output in any offline\n  <a href=\"http://www.graphviz.org/content/resources\" rel=\"noreferrer\">\n   <em>\n    dot\n   </em>\n   viewer\n  </a>\n  , paste the output into an\n  <a href=\"http://www.webgraphviz.com/\" rel=\"noreferrer\">\n   online Graphviz viewer\n  </a>\n  and even convert the\n  <em>\n   dot\n  </em>\n  file to PNG:\n </p>\n <pre><code>$ r2 /bin/ls\n[0x004049a0]> aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x004049a0]> agCd > output.dot\n[0x004049a0]> !!dot -Tpng -o callgraph.png output.dot\n</code></pre>\n <p>\n  To read more about radare2 it is recommended to read\n  <a href=\"https://radare.gitbooks.io/radare2book\" rel=\"noreferrer\">\n   radare2 book\n  </a>\n  .\n </p>\n <hr/>\n <h2>\n  Alternatives\n </h2>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://github.com/onlyuser/gen-callgraph\" rel=\"noreferrer\">\n      gen-callgraph\n     </a>\n    </strong>\n    - gen-callgraph is a script to generate call graph from elf binary\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"noreferrer\">\n      IDA Pro\n     </a>\n    </strong>\n    - generate GDL (Graph Description File) call graph using CTRL+F12, save it and then convert it to\n    <em>\n     dot\n    </em>\n    file with one of the following options:\n   </p>\n   <ul>\n    <li>\n     <p>\n      <a href=\"http://search.cpan.org/~tels/Graph-Easy/bin/graph-easy\" rel=\"noreferrer\">\n       graph-easy\n      </a>\n      - Convert between graph formats\n     </p>\n    </li>\n    <li>\n     <p>\n      This\n      <a href=\"https://wiki.multimedia.cx/index.php/IDA_Pro#Converting_gdl_flow_graphs_to_dot_files\" rel=\"noreferrer\">\n       perl script\n      </a>\n      from Multimedia Wiki\n     </p>\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  <em>\n   The\n   <a href=\"https://www.hex-rays.com/products/ida/support/download_freeware.shtml\" rel=\"noreferrer\">\n    free version\n   </a>\n   of IDA is also capable of generate GDL of call graph but it is only available as exe, use wine on Linux to run it\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "21",
            "user": "devtty1er",
            "time": "Sep 24, 2018 at 8:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">Is there away to get a call graph between libraries or files rather call graph between functions?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">You can use <code>il</code> to get libraries used by the binary or <code>rabin2 -l /bin/ls</code> which is the same</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">I don't know of a command to generate a call graph of only libraries, sorry</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You might want to give\n  <a href=\"http://angr.io\" rel=\"noreferrer\">\n   angr\n  </a>\n  a try.\n </p>\n <ul>\n  <li>\n   Load the binary. Suppose\n   <code>\n    p\n   </code>\n   is the angr Project instance.\n  </li>\n  <li>\n   Generate a CFG:\n   <code>\n    cfg = p.analyses.CFG(show_progressbar=True)\n   </code>\n   .\n  </li>\n  <li>\n   Access/traverse the call graph (which is a networkx.DiGraph) in whatever way you want:\n   <code>\n    cfg.functions.callgraph\n   </code>\n   .\n  </li>\n </ul>\n <blockquote>\n  <p>\n   For example showing the call graph only of specific address range or specific static library\n  </p>\n </blockquote>\n <p>\n  You can limit the range of CFG generation by passing the\n  <code>\n   regions\n  </code>\n  argument to\n  <code>\n   CFG()\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Fish",
            "time": "Aug 16, 2017 at 23:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use angr-utils in order to generate the graph from angr :\n  <a href=\"https://github.com/axt/angr-utils\" rel=\"nofollow noreferrer\">\n   https://github.com/axt/angr-utils\n  </a>\n </p>\n <p>\n  For more information please see:\n </p>\n <p>\n  <a href=\"https://github.com/axt/angr-utils/blob/master/examples/plot_cg/README.md\" rel=\"nofollow noreferrer\">\n   https://github.com/axt/angr-utils/blob/master/examples/plot_cg/README.md\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ca0T3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ca0T3.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Peter Teoh",
            "time": "Dec 26, 2021 at 0:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You should elaborate a bit...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Check out\n  <a href=\"http://valgrind.org/docs/manual/cl-manual.html\" rel=\"nofollow noreferrer\">\n   Callgrind\n  </a>\n  or\n  <a href=\"https://kcachegrind.github.io/html/Home.html\" rel=\"nofollow noreferrer\">\n   KCachegrind\n  </a>\n  . Much simpler than any other alternative.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "yaspr",
            "time": "Jan 4, 2020 at 9:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rfabbri",
                    "text": "<span class=\"comment-copy\">but are these static analyzers? or only report what is called in some typical run?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Callgrind is based on Valgrind, a serializing dynamic analysis framework.</span>",
                    "time": null
                }
            ]
        }
    ]
}