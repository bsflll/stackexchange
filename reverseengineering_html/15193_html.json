{
    "title": "Radare2 C output",
    "link": "https://reverseengineering.stackexchange.com/questions/15193/radare2-c-output",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I made a simple hello world program, and put it in radare2. I then ran the\n  <code>\n   pc\n  </code>\n  command, which displayed C output. The output was this:\n </p>\n <pre><code>#define _BUFFER_SIZE 256\nconst uint8_t buffer[256] = {\n  0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x8d,\n  0x3d, 0x3b, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xfc, 0x00, 0x00,\n  0x00, 0x00, 0xb0, 0x00, 0xe8, 0x0d, 0x00, 0x00, 0x00, 0x31,\n  0xc9, 0x89, 0x45, 0xf8, 0x89, 0xc8, 0x48, 0x83, 0xc4, 0x10,\n  0x5d, 0xc3, 0xff, 0x25, 0x80, 0x00, 0x00, 0x00, 0x4c, 0x8d,\n  0x1d, 0x71, 0x00, 0x00, 0x00, 0x41, 0x53, 0xff, 0x25, 0x61,\n  0x00, 0x00, 0x00, 0x90, 0x68, 0x00, 0x00, 0x00, 0x00, 0xe9,\n  0xe6, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20,\n  0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0a, 0x00, 0x00, 0x01, 0x00,\n  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,\n  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x0f, 0x00, 0x00,\n  0x34, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x8b, 0x0f,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,\n  0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x10, 0x00,\n  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00,\n  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n</code></pre>\n <p>\n  The issue is that I do not know how to properly use this output (compile it, use it, etc). If anybody can help please do. Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 3,
    "views": "28k",
    "tags": [
        "c",
        "radare2"
    ],
    "user": "LifeInKernelSpace",
    "time": "Apr 20, 2017 at 23:40",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n It will only print the current location as a c-style array. You can use this if you want to use the buffer in your code...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n @mrexodia please consider reformulating the content of your comment as an answer for the sake of other people with similar questions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "LifeInKernelSpace",
            "text": "<html><body><span class=\"comment-copy\">\n @mrexodia yeah I know, but I don't know how to use the buffer...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n Neither do I, why do you want a C buffer?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "LifeInKernelSpace",
            "text": "<html><body><span class=\"comment-copy\">\n @mrexodia I was wondering how to use it...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   pc\n  </code>\n  command will output\n  <em>\n   n\n  </em>\n  bytes from the current seek (\n  <code>\n   s\n  </code>\n  ) as a C array, where\n  <em>\n   n\n  </em>\n  is the Block size (\n  <code>\n   b\n  </code>\n  ) or the length mentioned in the command.\n </p>\n <p>\n  The output is then can be used to, for example, manipulate the array outside of radare2, build a shellcode, decrypt a buffer and so on.\n </p>\n <p>\n  Let's demonstrate it with a simple example.\n  \n\n  Here's a tiny HelloWorld.c program:\n </p>\n <pre><code>#include  <stdio.h>\n\nvoid main()\n{\n        printf(\"Hello, World!\n\");\n}\n</code></pre>\n <p>\n  Let's compile it with\n  <code>\n   gcc HelloWorld.c -o HelloWorld\n  </code>\n  and open it with radare2\n  <code>\n   r2 -A HelloWorld\n  </code>\n </p>\n <p>\n  Now let's seek to\n  <code>\n   main\n  </code>\n  and print the function:\n </p>\n <pre><code>[0x00400400]> s main\n[0x004004d7]> pdf\n            ;-- main:\n/ (fcn) sym.main 17\n|  sym.main ();\n|           ; DATA XREF from 0x0040041d (entry0)\n|       0x004004d7      55             push rbp\n|       0x004004d8      4889e5         mov rbp, rsp\n|       0x004004db      bf74054000     mov edi, str.Hello__World_ ; \"Hello, World!\"\n|       0x004004e0      e80bffffff     call sym.imp.puts          ; int puts(const char *s)\n|       0x004004e5      90             nop\n|       0x004004e6      5d             pop rbp\n\\       0x004004e7      c3             ret\n</code></pre>\n <p>\n  As I said, just a simple Hello World program :)\n </p>\n <p>\n  Now, instead of printing the disassembly let's print only the hex bytes of the function using\n  <code>\n   pxf\n  </code>\n  :\n </p>\n <pre><code>0x004004d7  5548 89e5 bf74 0540 00e8 0bff ffff 905d  UH...t.@.......]\n0x004004e7  c3\n</code></pre>\n <p>\n  These are the hex-bytes which represent the function.\n  \n\n  To the final part, using\n  <code>\n   bf sym.main\n  </code>\n  let's define the current Block size to be as the size of\n  <code>\n   main\n  </code>\n  , and then print the C-array using\n  <code>\n   pc\n  </code>\n  :\n </p>\n <pre><code>[0x004004d7]> bf sym.main\n[0x004004d7]> pc\n#define _BUFFER_SIZE 17\nconst uint8_t buffer[17] = {\n  0x55, 0x48, 0x89, 0xe5, 0xbf, 0x74, 0x05, 0x40, 0x00, 0xe8,\n  0x0b, 0xff, 0xff, 0xff, 0x90, 0x5d, 0xc3\n};\n</code></pre>\n <p>\n  You can easily see that the array is structured from the hex bytes we printed before, from 0x55 (\n  <code>\n   push rbp\n  </code>\n  ) to 0xc3 (\n  <code>\n   return\n  </code>\n  ).  That's it.\n </p>\n <p>\n  Let's say for example that you  disassembled a program and spotted a XOR encrypted data and you want to dump it to a C program and manipulate it there. In such case you need to seek to the offset of the encrypted data (\n  <code>\n   s <addr>\n  </code>\n  ), define the block size to be the length of the data (\n  <code>\n   b 150\n  </code>\n  ) and then dump it as a C-array using\n  <code>\n   pc\n  </code>\n  (or as a python array using\n  <code>\n   pcp\n  </code>\n  ).\n </p>\n <hr/>\n <p>\n  <strong>\n   Decompilation\n  </strong>\n  \n\n  Some people expect the\n  <code>\n   pc\n  </code>\n  command to be a decompilation of the program to C. If you want to decompile a function to C in radare you can use one of the following ways:\n </p>\n <p>\n  The\n  <code>\n   pdc\n  </code>\n  command to print C-like syntax:\n </p>\n <pre><code>function sym.main () {\n    loc_0x4004d7:\n\n     //DATA XREF from 0x0040041d (entry0)\n       push rbp                 \n       rbp = rsp                \n       edi = str.Hello__World ; \"Hello, World!\"                                                                       \n       int puts(const char * s : 0x00400574 = Hello, World!)                                    \n       pop rbp                  \n\n}\n</code></pre>\n <p>\n  Use\n  <a href=\"https://github.com/wargio/r2dec-js\" rel=\"noreferrer\">\n   <code>\n    r2dec\n   </code>\n  </a>\n  - a plugin to radare that can produce a pseudo-C output\n  \n\n  Use\n  <a href=\"https://github.com/radareorg/radeco\" rel=\"noreferrer\">\n   <code>\n    radeco\n   </code>\n  </a>\n  - a radare decompiler tool based on radeco-lib.\n  \n\n  Use\n  <a href=\"https://github.com/radare/radare2-extras/tree/master/r2snowman\" rel=\"noreferrer\">\n   <code>\n    r2snowman\n   </code>\n  </a>\n  - radare2 plugin which integrates the snowman decompiler.\n </p>\n</div>\n</body></html>",
            "votes": "20",
            "user": "Megabeets",
            "time": "Oct 27, 2018 at 6:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanted to expand on MegaBeets awesome answer. I don't see the point of\n  <code>\n   pdc\n  </code>\n  . It seems more wrong and less high-level.\n </p>\n <p>\n  <code>\n   pdf\n  </code>\n  is awesome for my use cases. If I want something high level, I'll use\n  <a href=\"https://github.com/wargio/r2dec-js\" rel=\"nofollow noreferrer\">\n   <code>\n    pdd\n   </code>\n   with r2dec\n  </a>\n  . You can install it with\n  <code>\n   r2pm -i r2dec\n  </code>\n  .\n </p>\n <pre><code>[0x0000063a]> pdd\n/* r2dec pseudo C output */\n#include <stdint.h>\n\nvoid main (void) {\n    puts (\"Hello, World!\");\n}\n</code></pre>\n <p>\n  For more information see\n </p>\n <ul>\n  <li>\n   <a href=\"https://reverseengineering.stackexchange.com/q/17910/22669\">\n    How does r2dec compare to\n    <code>\n     pdc\n    </code>\n    ?\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Evan Carroll",
            "time": "Oct 26, 2018 at 19:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Very late answer -\n  <a href=\"https://github.com/radareorg/r2ghidra\" rel=\"nofollow noreferrer\">\n   r2ghidra\n  </a>\n  is a good choice to decompile as well\n </p>\n <p>\n  Install it\n </p>\n <pre class=\"lang-sh prettyprint-override\"><code>r2pm update\nr2pm -ci r2ghidra\n</code></pre>\n <p>\n  and then analyse and seek to your function\n </p>\n <pre class=\"lang-none prettyprint-override\"><code>$ r2 -AAA elf\n[0x0804851b]> s fcn.08048451\n[0x08048451]> pdg\n\nuint fcn.08048451(void)\n\n{\n    uint uVar1;\n    uint unaff_EBP;\n    uint uStack_4;\n\n    *(*0x10 + -4) = unaff_EBP;\n    if (*0x804a021 == '1') {\n        *0x804a020 = *0x804a020 ^ 0x34;\n        *0x804a022 = *0x804a022 ^ 0x32;\n        *0x804a023 = *0x804a023 ^ 0x88;\n        if (*0x804a024 == 'X') {\n            if (*0x804a025 == '\\0') {\n                if (*0x804a022 == 0x7c) {\n                    if (*0x804a020 == 0x78) {\n                        if (*0x804a023 == 0xdd) {\n                            uVar1 = 1;\n                        }\n                        else {\n                            uVar1 = 0;\n                        }\n                    }\n                    else {\n                        uVar1 = 0;\n                    }\n                }\n                else {\n                    uVar1 = 0;\n                }\n            }\n            else {\n                uVar1 = 0;\n            }\n        }\n        else {\n            uVar1 = 0;\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n</code></pre>\n <p>\n  this will most likely not produce result that can be easily compiled - you'll need to fix it.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "hold-me",
            "time": "Oct 23, 2024 at 7:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}