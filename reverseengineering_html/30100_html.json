{
    "title": "What arguments are passed into a CALL instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/30100/what-arguments-are-passed-into-a-call-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While reverse enginnering a simple C program for training, I asked myself what was the point of those lines :\n </p>\n <pre><code>                         LAB_001006b5                                    XREF[1]:     0010069d(j)  \n    001006b5 48 8b 45 e0     MOV        RAX,qword ptr [RBP + local_28]\n    001006b9 48 83 c0 08     ADD        RAX,0x8\n    001006bd 48 8b 00        MOV        RAX,qword ptr [RAX]\n    001006c0 48 89 c7        MOV        argc,RAX\n    001006c3 e8 98 fe        CALL       <EXTERNAL>::atoi                                 int atoi(char * __nptr)\n             ff ff\n</code></pre>\n <p>\n  I thought that the function atoi called from the CALL instruction just pop the param from the stack (so lines from 001006b5 to 001006c0 were pointless ?)\nAm I getting it right or not?\n </p>\n <p>\n  Last question : what \"MOV argc,RAX\" means ?? I mean, argc is a constant ?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/DvCMJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/DvCMJ.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "392",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "maito",
    "time": "Mar 2, 2022 at 15:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  argc is an argument to the function main()\n </p>\n <p>\n  main is normally prototyped as\n </p>\n <p>\n  <code>\n   int __cdecl main (int argc , char *argv[] )\n  </code>\n  when locale is not used\n </p>\n <p>\n  argc is the number of arguments passed to main  if you pass 5 arguments like\n  \n\n  <code>\n   foo.exe 1 2 3 4 5\n  </code>\n </p>\n <p>\n  then argc will be 6 ( 5 arguments (space delimited ) + 1 program )\n </p>\n <p>\n  argv is a buffer that holds those arguments\n </p>\n <pre><code>argv[0]=\"foo.exe\",argv[1]=\"1\",argv[2]=\"2\",argv[3]=\"3\",argv[4]=\"4\",argv[5]=\"5\"\n</code></pre>\n <p>\n  each of these arguments are 8 byte long in a 64 bit program (size of pointer)\n </p>\n <p>\n  mov [rbp+1c] , argc --> saves the numebr of arguments\n  \n\n  cmp [rbp+1c] , 3 --> checks if you passed 2 arguments (default progname + 2 args)\n  \n\n  if the jz jumps it reaches xxxxx6b5  to load the start of argv buffer\n </p>\n <p>\n  skips the first member argv[0] by adding 8\n  \n\n  dereferences the second member argv\n  <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">\n   1\n  </a>\n  via mov rax , [rax]\n </p>\n <p>\n  the next mov argc , rax is a misrepresentation by ghidra\n </p>\n <p>\n  (you may need to split args and rename it )\n </p>\n <p>\n  it is not argc it is rdi the default first argument that is passed by register in\n  <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">\n   System V AMD64 ABI\n  </a>\n </p>\n <p>\n  you may check it by unlabelling or redefining the function prototype in Ghidra or\n </p>\n <p>\n  disassembling\n  <a href=\"http://shell-storm.org/online/Online-Assembler-and-Disassembler/?opcodes=48%2089%20c7&arch=x86-64&endianness=little&dis_with_addr=True&dis_with_raw=True&dis_with_ins=True#disassembly\" rel=\"nofollow noreferrer\">\n   48 89 c7 in an external disassembler like shell storm\n  </a>\n </p>\n <p>\n  the atoi() takes one parameter a char * and returns an integer\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 4, 2022 at 15:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    <code>\n     MOV   RAX,qword ptr [RBP + local_28]\n    </code>\n    \n\n    \n\n    The address of the array\n    <code>\n     argv\n    </code>\n    (i.e., the pointer to the\n    <code>\n     argv[0]\n    </code>\n    element) is loaded into the RAX register.\n    \n\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     ADD   RAX,0x8\n    </code>\n    \n\n    \n\n    The value in RAX register is incremented by 8 (= length of\n    <code>\n     int\n    </code>\n    in bytes), so now  in RAX is the pointer to the\n    <code>\n     argv[1]\n    </code>\n    element.\n    \n\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     MOV   RAX,qword ptr [RAX]\n    </code>\n    \n\n    \n\n    Now, into the RAX register is loaded the quadruple-word (i.e., 8 bytes) from the address in RAX, i.e., the\n    <em>\n     value\n    </em>\n    of the\n    <code>\n     argv[1]\n    </code>\n    element.\n    \n\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     MOV   argc,RAX\n    </code>\n    \n\n    \n\n    The value in RAX, i.e., the value of\n    <code>\n     argv[1]\n    </code>\n    , is loaded into the\n    <code>\n     argc\n    </code>\n    variable.\n    \n\n   </p>\n  </li>\n </ol>\n <p>\n  The\n  <code>\n   argc\n  </code>\n  means “arguments count”, i.e.,\n  <em>\n   number of arguments\n  </em>\n  .\n </p>\n <p>\n  In this particular case, in\n  <code>\n   argv[0]\n  </code>\n  is the only argument for the\n  <code>\n   atoi()\n  </code>\n  function, and\n  <code>\n   argv[1]\n  </code>\n  is not the (non-existing) second argument – it is in fact\n  <code>\n   argc\n  </code>\n  (1 in this case) immediately following\n  <code>\n   argv[0]\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "MarianD",
            "time": "Mar 3, 2022 at 12:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}