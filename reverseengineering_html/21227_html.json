{
    "title": "IDA remote debugging - non printable characters in parameters",
    "link": "https://reverseengineering.stackexchange.com/questions/21227/ida-remote-debugging-non-printable-characters-in-parameters",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to remote debug a certain binary which gets user-specified command line arguments, which can be non-printable of course.\n  \n\n  My goal is the ability to debug with IDA the process with the command line argument \"\\x11\\x22\\x33\\x44\" which can be done with gdb easily.\n  \n\n  The problem is that the \"Parameters\" field in IDA allows only ASCII characters to be inserted into the process' command line arguments\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/jyItM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA\" src=\"https://i.sstatic.net/jyItM.png\"/>\n  </a>\n </p>\n <p>\n  I looked thoroughly and found\n  <a href=\"https://reverseengineering.stackexchange.com/questions/18777/ida-remote-debug-on-linux\">\n   these\n  </a>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/19723/passing-input-to-program-in-remote-debugging-with-ida-pro\">\n   questions\n  </a>\n  but running:\n </p>\n <pre><code>$ ./linux_server unlink < file\n</code></pre>\n <p>\n  or any other combination does not seem to feed the binary file with my input.\n  \n\n  Also, running StartDebugger in the IDA command line did not help (How does this function know which remote debugger to run?)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "422",
    "tags": [
        "ida",
        "linux",
        "remote"
    ],
    "user": "toothpick",
    "time": "Apr 26, 2019 at 23:32",
    "comments": [
        {
            "user": "Neon Flash",
            "text": "<html><body><span class=\"comment-copy\">\n A quick workaround for this issue would be for you to start the binary on the terminal with those command line arguments (or feed the input through a file.). After that attach the remote debugger to the process. You would need to patch the entry point so that the execution can be resumed after attaching the debugger. You could use: \\xeb\\xfe and patch the bytes at entry point after attaching the debugger.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can work around this by using the IDA API. There is a function\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.set_process_options\" rel=\"nofollow noreferrer\">\n   <code>\n    set_process_options\n   </code>\n  </a>\n  that takes the process arguments as one of the parameters.\n </p>\n <p>\n  Because it sets all process options you have to pass various null arguments (which don't modify the existing value).\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>import ida_dbg\nida_dbg.set_process_options(None, \"\\x11\\x22\\x33\\x44\", None, None, None, 0)\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Florian Magin",
            "time": "Oct 3, 2023 at 15:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}