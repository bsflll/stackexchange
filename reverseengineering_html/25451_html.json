{
    "title": "How can I practically approach VM-obfuscated code with symbolic analysis/execution?",
    "link": "https://reverseengineering.stackexchange.com/questions/25451/how-can-i-practically-approach-vm-obfuscated-code-with-symbolic-analysis-executi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Dealing with VM-obfuscated code and started learning about symbolic analysis but having a hard time wrapping my head around how to practically apply it to a problem. If someone can give me some pointers, I'd greatly appreciate it.\n </p>\n <ul>\n  <li>\n   With dynamic analysis, am I supposed to only emulate the VM to get a symbolic binding? If yes, how can I deobfuscate only that part of a binary without touching the rest and would reconstructing a new binary even work if I only touched a small part (Jump locations might be off or don't point anywhere)? How do I do that? A lot of papers I read synthesize a new C program or use llvm-ir but that's not the entire program but only the VM loop. Now how do I merge it?\n  </li>\n  <li>\n   If I emulate the entire binary to get a symbolic representation of it (like I've seen in some CTF write-ups), wouldn't that mean I only have the representation of the main path that this binary is going? (No inputs). My reconstructed binary would lack the interactions that are not in the main trace from start to finish, no?\n  </li>\n  <li>\n   VM-obfuscated code usually has an encryption key that changes with each opcode that is interpreted. If I have a symbolic representation, I would still not be able to arbitrarily decompile the entire virtual opcode because I don't know the encryption key at that time.\n  </li>\n </ul>\n <p>\n  On top of the confusion, the binary I am looking at right now doesn't just have one obfuscated VM loop but multiple which is apparently not uncommon when using commercial VM obfuscation. A short trace gave me over 4 structures that look like a VM loop. Debugging it showed me that the VM stack/context/registers used for pointers of each machine is different and random. So now,\n </p>\n <ul>\n  <li>\n   Do I deal with the VMs 1-by-1? As in, I reverse one until it calls the second (say VM1 calling VM2 sometime), then recompile a binary without it, then go to the next?\n  </li>\n  <li>\n   Can I emulate the entire thing even though it means it will emulate potential dozens of VM-loops? I am guessing symbolic analysis won't really work if the registers used for internal stack and such are different over time\n  </li>\n  <li>\n   If I have multiple VMs, how do I even know which bytecode is interpreted by which VM? I can take a guess from the sections and analyzing my trace, but again the trace I have is only for the main path and other branches of the app are not in it.\n  </li>\n </ul>\n <p>\n  My understanding from it is something like this:\n </p>\n <ul>\n  <li>\n   Identify the VM loop and analyze where it stores it's context, stack pointer, opcode pointer, vmkey\n  </li>\n  <li>\n   Create a symbolic representation of the loop and how it pulls the next opcodes\n  </li>\n  <li>\n   Find all the handlers of the VM and create a symbol representation of them\n  </li>\n  <li>\n   Somehow use this knowledge then to de-virtualize it\n  </li>\n </ul>\n <p>\n  All in all, I am really confused. I read a handful of papers on it but security researchers don't really like releasing tools/code samples so it's all just theoretical and abstract.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "1k",
    "tags": [
        "deobfuscation",
        "dynamic-analysis",
        "vms"
    ],
    "user": "patchrail",
    "time": "Jul 6, 2020 at 2:21",
    "comments": [
        {
            "user": "auspicious99",
            "text": "<html><body><span class=\"comment-copy\">\n Would you mind listing the relevant papers you read, for context? Sometimes security researchers do provide tools/code samples, e.g., on github, but yes, they often don't.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "patchrail",
            "text": "<html><body><span class=\"comment-copy\">\n \"Deobfuscation of Virtualization-obfuscated Code through Symbolic Execution and Compilation Optimization\", \"A Generic Approach to Automatic Deobfuscation of Executable Code\", \"Symbolic Execution of Obfuscated Code\", \"Unpacking Virtualization Obfuscators\" and \"Symbolic deobfuscation: from virtualized code back to the original\" to name a few (the last one has code on GitHub)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Practical examples: 1)\n <a href=\"https://github.com/JonathanSalwan/Tigress_protection\" rel=\"nofollow noreferrer\">\n  Defeating Tigress with Triton\n </a>\n 2)\n <a href=\"https://miasm.re/blog/2016/09/03/zeusvm_analysis.html\" rel=\"nofollow noreferrer\">\n  Defeating Zeus VM with Miasm\n </a>\n 3)\n <a href=\"https://github.com/malrev/ABD\" rel=\"nofollow noreferrer\">\n  Advanced Binary Deobfuscation\n </a>\n 4)\n <a href=\"https://www.msreverseengineering.com/blog/2019/4/17/an-abstract-interpretation-based-deobfuscation-plugin-for-ghidra\" rel=\"nofollow noreferrer\">\n  Defeating opaque predicates in a virtualization obfuscator with ghidraPAL\n </a>\n 5)\n <a href=\"https://www.msreverseengineering.com/blog/2018/2/21/finspy-vm-unpacking-tutorial-part-3-devirtualization\" rel=\"nofollow noreferrer\">\n  FinSpy VM Devirtualization\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "patchrail",
            "text": "<html><body><span class=\"comment-copy\">\n @julian thanks for these! I already know of the Zeus VM and tigress writeups but then others are new to me. Iâ€™ll read through them\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Another  upcoming project to look at\n <a href=\"https://github.com/vtil-project\" rel=\"nofollow noreferrer\">\n  VTIL\n </a>\n and\n <a href=\"https://0xnobody.github.io/devirtualization-intro/\" rel=\"nofollow noreferrer\">\n  post\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}