{
    "title": "x86 main preamble makes stack aligned on 32-bytes boundaries",
    "link": "https://reverseengineering.stackexchange.com/questions/22109/x86-main-preamble-makes-stack-aligned-on-32-bytes-boundaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For the record, I've read all stackexchange relevant answers on the topic (\n  <a href=\"https://reverseengineering.stackexchange.com/questions/14880/basic-reversing-question-about-local-variable\">\n   here\n  </a>\n  and\n  <a href=\"https://reverseengineering.stackexchange.com/questions/15173/what-is-the-purpose-of-these-instructions-before-the-main-preamble\">\n   here\n  </a>\n  ) plus other articles to fully grasp the concepts of\n  <em>\n   memory alignment\n  </em>\n  and\n  <em>\n   CPU natural boundaries\n  </em>\n  .\n  \n\n  But for some reason, I just can't understand the meaning of the following main preamble (given out by\n  <code>\n   radare2\n  </code>\n  )\n </p>\n <pre><code>(fcn) sym.main 99\n|   sym.main (int argc, char **argv, char **envp);\n|           ; var int local_78h @ ebp-0x78\n|           ; arg int arg_10h @ ebp+0x10\n|           ; var int local_4h @ esp+0x4\n|           ; DATA XREF from entry0 (0x8048417)\n|           0x0804867d      55             push ebp\n|           0x0804867e      89e5           mov ebp, esp\n|           0x08048680      81ec88000000   sub esp, 0x88\n|           0x08048686      83e4f0         and esp, 0xfffffff0\n|           0x08048689      b800000000     mov eax, 0\n|           0x0804868e      83c00f         add eax, 0xf\n|           0x08048691      83c00f         add eax, 0xf\n|           0x08048694      c1e804         shr eax, 4\n|           0x08048697      c1e004         shl eax, 4\n|           0x0804869a      29c4           sub esp, eax\n</code></pre>\n <hr/>\n <h2>\n  Breakdown\n </h2>\n <p>\n  There seems to be a local array on the stack frame that takes up\n  <em>\n   78h = 120d\n  </em>\n  bytes on the stack, indicated by this line :\n </p>\n <pre><code>|           ; var int local_78h @ ebp-0x78\n</code></pre>\n <p>\n  So far so good.\n  \n\n  Now the stack pointer is moved to make space for such an array on the stack, manipulating\n  <code>\n   esp\n  </code>\n  to make sure the stack is aligned on\n  <em>\n   16-bytes boundaries\n  </em>\n  :\n </p>\n <pre><code>|           0x08048680      81ec88000000   sub esp, 0x88\n|           0x08048686      83e4f0         and esp, 0xfffffff0\n</code></pre>\n <p>\n  Which effectively makes\n  <code>\n   esp\n  </code>\n  a multiple of at least\n  <em>\n   16\n  </em>\n  (\n  <strong>\n   least significant nibble\n  </strong>\n  zeroed out), but let's for the sake of mathematical rigor say that\n  <code>\n   esp\n  </code>\n  is now a multiple of\n  <em>\n   16k\n  </em>\n  , with\n  <em>\n   k\n  </em>\n  an arbitrary integer.\n  \n\n  All this makes perfect sense (see\n  <a href=\"http://www.songho.ca/misc/alignment/dataalign.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  and\n  <a href=\"https://stackoverflow.com/questions/16703211/why-128bit-variables-should-be-aligned-to-16byte-boundary\">\n   here\n  </a>\n  to fully understand the need for\n  <em>\n   16-bytes stack alignment\n  </em>\n  , having to do with\n  <em>\n   SSE\n  </em>\n  and whatnot).\n  \n\n  Now what I really can't seem to wrap my head around is the relevance of the subsequent instructions :\n </p>\n <pre><code>|           0x08048689      b800000000     mov eax, 0\n|           0x0804868e      83c00f         add eax, 0xf\n|           0x08048691      83c00f         add eax, 0xf\n|           0x08048694      c1e804         shr eax, 4\n|           0x08048697      c1e004         shl eax, 4\n|           0x0804869a      29c4           sub esp, eax\n</code></pre>\n <p>\n  Which as far as I could understand :\n  \n\n  1 - Made\n  <code>\n   eax\n  </code>\n  equal to\n  <em>\n   10h\n  </em>\n  (by the way why all these instructions to get to such a simple result for\n  <code>\n   eax\n  </code>\n  ? Why not just make a\n  <code>\n   mov eax, 0x10\n  </code>\n  ?)\n  \n\n  2 - Subtract that quantity from\n  <code>\n   esp\n  </code>\n  , which is just gonna zero out the\n  <strong>\n   least significant 1 bit\n  </strong>\n  in\n  <code>\n   esp\n  </code>\n  (given that the\n  <em>\n   first nibble\n  </em>\n  is null anyway) which is just gonna make\n  <code>\n   esp\n  </code>\n  a multiple of\n  <em>\n   16(k+\n   <strong>\n    1\n   </strong>\n   )\n  </em>\n  , thus making the stack aligned on\n  <strong>\n   <em>\n    32\n   </em>\n  </strong>\n  -bytes boundaries if it was aligned on\n  <strong>\n   <em>\n    16\n   </em>\n  </strong>\n  -bytes boundaries, or make it aligned on\n  <strong>\n   <em>\n    64\n   </em>\n  </strong>\n  -bytes boundaries if it was aligned on\n  <strong>\n   <em>\n    32\n   </em>\n  </strong>\n  -bytes boundaries, and so on and so forth.\n </p>\n <p>\n  What do we need that for ?\n  \n\n  Is there something I got wrong in this whole analysis ?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "254",
    "tags": [
        "disassembly",
        "x86",
        "memory",
        "stack"
    ],
    "user": "programmersn",
    "time": "Sep 12, 2019 at 19:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   There seems to be a local array on the stack frame that takes up 78h =\n  120d bytes on the stack, indicated by this line :\n  </p>\n </blockquote>\n <p>\n  no the local var is of type int and it takes 4 bytes on 32 bit machine\n  \n\n  it is located at the address ebp - 0x78\n  \n\n  the other one is again a int and is located at esp+4\n </p>\n <p>\n  the circus is probably some home grown obfuscation may be\n </p>\n <p>\n  all it does is subtract another 0x10 from esp\n </p>\n <p>\n  so basically it is sub esp 0x98\n </p>\n <p>\n  you can check whats going on by emulating it or single stepping through it\n </p>\n <p>\n  simple check using python\n </p>\n <pre><code>>>> eax = 0\n>>> eax\n0\n>>> eax = eax+0xf\n>>> eax\n15\n>>> eax = eax + 0xf\n>>> eax\n30\n>>> eax = eax >> 4\n>>> eax\n1\n>>> eax = eax << 4\n>>> eax\n16\n>>> hex(eax)\n'0x10'\n>>>\n</code></pre>\n <p>\n  subtracting is not for alignment as you seem to be confusing it\nsubtracting is making space in stack\n </p>\n <p>\n  the alignment is done with and esp,0x.....\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Sep 12, 2019 at 19:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "programmersn",
                    "text": "<span class=\"comment-copy\">Fair enough. But then why bother to allocate 98h = 152d  bytes on the stack for two miserable 4-byte integers ?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">cannot infer the reason from the posted snippet may be it is doing some stuff and radare2 didn't find enough evidence to name them as local to the function</span>",
                    "time": null
                }
            ]
        }
    ]
}