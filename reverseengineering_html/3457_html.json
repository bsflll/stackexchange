{
    "title": "Is it possible to convert MIPS ASM to code?",
    "link": "https://reverseengineering.stackexchange.com/questions/3457/is-it-possible-to-convert-mips-asm-to-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow\">\n   IDA\n  </a>\n  can disassemble to assembly. But, reading large assembly blocks with byte shifts, etc, is tedious work. I rather would read pseudo-code.\n </p>\n <p>\n  Are there any documents, tutorials or tools for this work targeting MIPS platform? What methods are you people using ? Sorry if this question is off-topic but normal Google search didn't yield much for MIPS.\n </p>\n <p>\n  Edit: I try to decompile modem firmware image and look for default telnet password actually since WebUI passwords dont work and my ISP does not know it too.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 3,
    "views": "14k",
    "tags": [
        "ida",
        "assembly",
        "decompiler",
        "mips"
    ],
    "user": "user3155036",
    "time": "Jun 4, 2014 at 5:35",
    "comments": [
        {
            "user": "Nihilus",
            "text": "<html><body><span class=\"comment-copy\">\n Well... The MIPS-support for boomerang went just due to NJML not working correctly... Better checkout my fork of smartdec/snowman where I am actively adding support atm.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA's decompiler only supports ARM and x86. With that said, there are a couple you can try:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.backerstreet.com/rec/rec.htm\" rel=\"nofollow noreferrer\">\n    REC\n   </a>\n   - This one has already been mentioned. Last I used it, it would segfault when you issued the 'help' command, so YMMV.\n  </li>\n  <li>\n   <a href=\"http://decompiler.fit.vutbr.cz/decompilation/\" rel=\"nofollow noreferrer\">\n    Retargetable Decompiler\n   </a>\n   - This is an online decompiler that supports various architectures, including MIPS. It's OK at getting a general idea of how the code works, but in my experience misses important details (it showed data being written to undefined pointers, for example).\n  </li>\n  <li>\n   <a href=\"https://www.pnfsoftware.com/jeb2/mips\" rel=\"nofollow noreferrer\">\n    JEB\n   </a>\n   - JEB 2.3 is a professional reverse-engineering platform that supports native decompilation of MIPS 32-bit code. The output is interactive and can be refactored/modified, similarly to Hexrays'.\n  </li>\n </ul>\n <p>\n  Ultimately, you are probably better off learning to read the disassembly. One thing that I commonly do is manually convert individual code blocks to pseudo-code; in IDA you can then right-click on a code block, select 'Group Nodes' and replace the disassembly in that code block with whatever text you want (e.g., the pseudo code). This makes it much easier to break down and understand complex functions.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Nick",
            "time": "May 3, 2017 at 6:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3155036",
                    "text": "<span class=\"comment-copy\">I try to reverse some cable modem firmware . Which is a big single binary (eCos). I did not see any option in REC to specify loading address for raw binary. Retargetable Decompiler appears to only support ELF format. I will try your suggestion with Group Nodes.Hope I can make it. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">ARM <i>and</i> x86, actually.</span>",
                    "time": null
                },
                {
                    "user": "devttys0",
                    "text": "<span class=\"comment-copy\">Whoops, thanks Igor, I edited the post. @user3155036, you can wrap the code in a simple ELF header using objcopy (see example here: <a href=\"http://www.nycresistor.com/2012/08/21/ghosts-in-the-rom/\" rel=\"nofollow noreferrer\">nycresistor.com/2012/08/21/ghosts-in-the-rom</a>) and see how far the Retargetable Decompiler gets. Also a quick tip, since eCos is open source, I've had some success in the past building IDA FLIRT signatures for the eCos libraries; didn't catch everything of course, but it was a big help.</span>",
                    "time": null
                },
                {
                    "user": "user3155036",
                    "text": "<span class=\"comment-copy\">I added ELF header but could not post it to Retargetable Decompiler since 10 MB size limitation. But i was able to decompile the ELF file with RECStudio (GUI is more stable than CLI). And the result: Equally unreadable code maybe a bit shorter though.</span>",
                    "time": null
                },
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Tooting my own horn here. If you'd be willing to supply a MIPS binary, I could use that to improve the MIPS support of my open-source Decompiler project (<a href=\"https://sourceforge.net/projects/decompiler/\" rel=\"nofollow noreferrer\">sourceforge.net/projects/decompiler</a>).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The only MIPS decompiler I know is\n  <a href=\"http://www.backerstreet.com/rec/rec.htm\" rel=\"nofollow\">\n   REC\n  </a>\n  .\nThere is also\n  <a href=\"http://decompiler.fit.vutbr.cz/decompilation/\" rel=\"nofollow\">\n   this\n  </a>\n  , but I didn't try it myself.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "w s",
            "time": "Jan 14, 2014 at 13:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  try use\n  <a href=\"https://github.com/drvink/epanos\" rel=\"nofollow\">\n   https://github.com/drvink/epanos\n  </a>\n  \n\n  from project page\n  <code>\n   ElectroPaint Automatic No-source Object reaSsembler (a MIPS to C decompiler)\nThis is a very dumb MIPS to C static translator. Consider it a proof of concept, as it has successfully worked\n  </code>\n  The decompiler depends on IDA pro\n </p>\n <p>\n  best way is use IDA PRO & your brain\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "adrián",
            "time": "Jul 8, 2015 at 20:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}