{
    "title": "Can I create an object file using gcc that cannot be reverse engineered?",
    "link": "https://reverseengineering.stackexchange.com/questions/47/can-i-create-an-object-file-using-gcc-that-cannot-be-reverse-engineered",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is it possible to create an object file using\n  <code>\n   gcc\n  </code>\n  that cannot be reverse engineered to its source code ?\n </p>\n</div>\n</body></html>",
    "votes": "28",
    "answers": 4,
    "views": "17k",
    "tags": [
        "c",
        "object-code"
    ],
    "user": "asheeshr",
    "time": "Mar 25, 2013 at 14:34",
    "comments": [
        {
            "user": "SnakeDoc",
            "text": "<html><body><span class=\"comment-copy\">\n if a machine can read it... so can a human. you can make it more difficult for the human... but in the end, they can/will still read it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://stackoverflow.com/questions/4111808/c-c-compiler-generating-obfuscated-code\" title=\"c c compiler generating obfuscated code\">\n  stackoverflow.com/questions/4111808/â€¦\n </a>\n ,\n <a href=\"http://stackoverflow.com/questions/1025494/obfuscating-c-c-code\">\n  stackoverflow.com/questions/1025494/obfuscating-c-c-code\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  AFAIK that is not possible. There are other things you can keep in mind however:\n </p>\n <p>\n  Use of the GCC optimization flags will help make the code look much less readable to a human. When you compile with the highest level of optimization\n  <code>\n   gcc -O3\n  </code>\n  the compiler will move things around such that the \"flow\" might not be at all what you expect.\n </p>\n <p>\n  You can also use the flag\n  <code>\n   -static\n  </code>\n  which will force gcc to take small functions and make them inline. This will embed them into your code instead of showing as function calls.. it will make them harder to distinguish.\n </p>\n <p>\n  One thing to keep in mind is too it's important to get rid of any unneeded symbols. Gcc offers\n  <code>\n   -fvisibility=hidden\n  </code>\n  and\n  <code>\n   -fvisibility-inlines-hidden\n  </code>\n  to help with this. You can also pass the\n  <code>\n   -s\n  </code>\n  flag to gcc to strip symbols away.\n </p>\n <p>\n  I think that's about all you can do with\n  <em>\n   gcc\n  </em>\n  to help prevent reverse engineering. Additionally you can use code obfuscation, but there are issues there as well unless you implement it yourself, if you use a readily available method or tool to prevent reverse engineering, there is probably already a tool to counter it.\n </p>\n <p>\n  Keep in mind that the final executable will have information in it as well such as what version of gcc it was compiled with. This too can be removed with the\n  <code>\n   strip\n  </code>\n  command.\n </p>\n <p>\n  If I have an executable (\n  <code>\n   myprog\n  </code>\n  ) I can run\n  <code>\n   objdump\n  </code>\n  on it to check some information:\n </p>\n <pre><code>mike@mike-VirtualBox:~/C$ objdump --full-contents --section=.comment myprog | head\nmyprog:     file format elf64-x86-64\n\nContents of section .comment:\n 0000 4743433a 20285562 756e7475 2f4c696e  GCC: (Ubuntu/Lin\n 0010 61726f20 342e362e 332d3175 62756e74  aro 4.6.3-1ubunt\n 0020 75352920 342e362e 3300               u5) 4.6.3.   \n</code></pre>\n <p>\n  Oops, you can see what version/compiler I used. Well, we can fix that:\n </p>\n <pre><code>mike@mike-VirtualBox:~/C$ strip -R .comment -R .note myprog\nmike@mike-VirtualBox:~/C$ objdump --full-contents --section=.comment myprog | head\nobjdump: \nsection '.comment' mentioned in a -j option, but not found in any input file\nmyprog:     file format elf64-x86-64\n</code></pre>\n <p>\n  There are other portions you can strip as well, such as\n  <code>\n   .note.ABI-tag\n  </code>\n  but you do lose portability\n </p>\n</div>\n</body></html>",
            "votes": "32",
            "user": "Mike",
            "time": "Jun 3, 2013 at 15:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I wouldn't recommend stripping <code>.note.ABI-tag</code> as it will prevent running the executable on FreeBSD or another OS with Linux emulation support.</span>",
                    "time": null
                },
                {
                    "user": "Mike",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky - a good note for portability, I wasn't thinking about that at the time, but have updated now. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">Stripping doesn't remove GCC version from obj file...</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">BTW, I'm not sure why the recommendation about the variable names. If you do it properly, there should be <i>no</i> variable names in the final binary, except possibly publicly exported ones, and those usually do need to have proper, readable names.</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Igor is correct.  Those names should be destroyed by the compiler when the binary object is created.  In that case, there's no difference.  In the case where you're shipping binaries with heavy duty debug symbols in them, you have much bigger problems than what you've named your variables.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Short answer\n  </strong>\n  : No.\n </p>\n <p>\n  <strong>\n   Long answer\n  </strong>\n  :\n  <a href=\"http://www.iacr.org/archive/crypto2001/21390001.pdf\">\n   On the (Im)possibility of Obfuscating Programs\n  </a>\n  by Boaz Barak, Oded Goldreich, Rusell Impagliazzo, Steven Rudich, Amit Sahai, Salil Vadhan, and Ke Yang.\n </p>\n <p>\n  <strong>\n   Medium answer\n  </strong>\n  : If you give your program to a user that control the platform where your program will be executed, there is no way to prevent the reverse-engineering of it. The only thing you can hope for is to force the user to have a black-box analysis approach of your software (meaning that the user will only be able to observe the output of your program on chosen input).\n </p>\n <p>\n  But, even this black-box analysis is extremely difficult to enforce without an additional piece of hardware (eg smartcard) as the user is supposed to be able to take intermediate snapshots of the memory during the execution of your program.\n </p>\n</div>\n</body></html>",
            "votes": "24",
            "user": "perror",
            "time": "Mar 26, 2013 at 17:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Michael Anderson",
                    "text": "<span class=\"comment-copy\">Additionally regarding Hardware Security: Google \"There are no secrets in silicone\"</span>",
                    "time": null
                },
                {
                    "user": "Modoc",
                    "text": "<span class=\"comment-copy\">Don't forget that at some point you are going to need to debug the damned thing too.  The more you obfuscated and rearrange your binary the harder it will be to analyze should something go wrong in the field.  It becomes especially trixy if an unobfuscated version works perfectly but the obfuscated version BSODs due to unforseen timing or other interactions introduced by the obfuscation itself.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, it might be impossible to RE the file to the\n  <em>\n   exact original source code\n  </em>\n  (e.g. there's no way to recover comments or preprocessor macros), but that's probably not what you meant to ask.\n </p>\n <p>\n  It's definitely always possible (though sometimes difficult) to produce an\n  <em>\n   equivalent\n  </em>\n  source code, which behaves the same as the compiled code. With some extra work it might be even possible to produce code which compiles to\n  <em>\n   exactly the same\n  </em>\n  bytecode (as long as there was no additional post-processing of compiled binary).\n  <a href=\"http://www.recon.cx/2011/schedule/events/104.en.html\">\n   This presentation\n  </a>\n  described some of the approaches for this, but I can't find the slides.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "Mar 20, 2013 at 10:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While it's not possible to obfuscate object files, it is possible to obfuscate the underlying assembly file. There is no such thing as name obfuscation in C++ since references are by address, not by name. Using full optimization (-O3 -Ob2 -flto) can also make it hard to reverse engineer your code. Also, you can also use VMProtect/Denuvo to encrypt and obfuscate your executable.\n </p>\n <p>\n  You may find those posts useful\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc\">\n   https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc\n  </a>\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/a/22052/33533\">\n   https://reverseengineering.stackexchange.com/a/22052/33533\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jessie Lesbian",
            "time": "Jan 4, 2021 at 10:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}