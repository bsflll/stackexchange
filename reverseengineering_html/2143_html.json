{
    "title": "E Ink display interface protocol",
    "link": "https://reverseengineering.stackexchange.com/questions/2143/e-ink-display-interface-protocol",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am particularly interested in the ED060XC3 that is in the kindle paperwhite (I think that is the right one anyway).\n </p>\n <p>\n  I can't find a freely available datasheet. Would it be possible to reverse engineer a driver from the kindle firmware?\n </p>\n <p>\n  There are acutally 3 interfaces (display, backlight , touchscreen) but the display interface would be the most important and interesting. I intend to purchase one for use with an FPGA if I can determine if it is possible to operate it first.\n </p>\n <p>\n  From what I understand the module itself may not contain a controller but I would have to implement an EPD controller in my FPGA like\n  <a href=\"https://ieeexplore.ieee.org/document/5373963\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  .\n </p>\n <p>\n  You can see images of the screen here:\n  <a href=\"https://web.archive.org/web/20140412054110/http://www.aliexpress.com:80/item/Screen-e-book-reading-kindle-paperwhite-ED060XC3-lf-plain/884791378.html\" rel=\"nofollow noreferrer\">\n   aliexpress\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "15",
    "answers": 4,
    "views": "14k",
    "tags": [
        "hardware"
    ],
    "user": "cb88",
    "time": "Apr 19, 2022 at 12:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't have an actual answer but here's a few leads.\n </p>\n <p>\n  Freescale has some chips in the i.MX6 family with the EPD interface:\n </p>\n <p>\n  <a href=\"https://community.freescale.com/docs/DOC-93622\">\n   https://community.freescale.com/docs/DOC-93622\n  </a>\n </p>\n <p>\n  I think the signals are described in the CPU datasheet, but not the protocol. Even with the older devices when a dedicated controller had to be used, its datasheet would describe only the controller and not the panel.\n </p>\n <p>\n  Apollo controller datasheet (first generation, used in Sony PRS-500), made by Philips (later PVI):\n  \n\n  <a href=\"http://openinkpot.org/raw-attachment/wiki/Device/V3/Screen/Apollo_eInk_screen_controller_datasheet.pdf\">\n   http://openinkpot.org/raw-attachment/wiki/Device/V3/Screen/Apollo_eInk_screen_controller_datasheet.pdf\n  </a>\n </p>\n <p>\n  The second generation controller (Metronome)\n  <a href=\"http://wayback.archive.org/web/20080515150100/http://www.e-ink.com/products/matrix/metronome.html\">\n   was made by E-Ink\n  </a>\n  but they in fact used an Actel ProASIC3 FPGA as can be seen on my photos of PRS-505 innards:\n </p>\n <p>\n  <a href=\"http://www.flickr.com/photos/21729510@N03/2111017270/in/set-72157603454047408\">\n   http://www.flickr.com/photos/21729510@N03/2111017270/in/set-72157603454047408\n  </a>\n </p>\n <p>\n  So in theory you\n  <em>\n   might\n  </em>\n  be able to extract the bitstream and RE it or just reuse in your own FPGA. However, it would work only with the first-gen Vizplex panels and probably not with the current ones.\n </p>\n <p>\n  Third generation controller was a dedicated chip made by Epson (S1D13521B, codename Broadsheet). Baidu has a copy of internal training from E-Ink which describes some low-level details on how develop with it (but again, not much on the panel itself):\n </p>\n <p>\n  <a href=\"http://wenku.baidu.com/view/187d53956bec0975f465e245.html\">\n   http://wenku.baidu.com/view/187d53956bec0975f465e245.html\n  </a>\n </p>\n <p>\n  In the end, driving EPD panel is even trickier business than driving a generic LCD. So, unless you know this area very well, I would recommend to stick to a proven solution such as Freescale's chips or a dedicated controller.\n </p>\n <p>\n  If you're not dead set on the hi-res screen, you may be interested in this collection of kits with small resolution and segmented E-Ink screens:\n </p>\n <p>\n  <a href=\"http://www.the-digital-reader.com/2013/05/23/e-ink-dives-into-the-diy-market/\">\n   http://www.the-digital-reader.com/2013/05/23/e-ink-dives-into-the-diy-market/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "May 31, 2013 at 0:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Kindle is based on embedded Linux. Thus Amazon is forced to distribute the source code. You might find the actual driver sources there.\n </p>\n <p>\n  You can find the sources here.\n  <a href=\"http://www.amazon.com/gp/help/customer/display.html?nodeId=200203720\" rel=\"noreferrer\">\n   http://www.amazon.com/gp/help/customer/display.html?nodeId=200203720\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Mellowcandle",
            "time": "May 30, 2013 at 23:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">hmm :/ not if they did it in userspace though you have a point there. And if they are using a EPD controller I still won't know how to control the LCD.</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">Always worth a try...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looking at the kernel source for the kindle touch (mx50_yoshi.c, see\n  <a href=\"http://www.amazon.com/gp/help/customer/display.html?nodeId=200203720\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  ) it seems to me that the epd configuration, init sequence and so on is all there.\n </p>\n <p>\n  I only checked for the touch cause the touch eink seems to be currently the cheapest. (ED060SCG)\n </p>\n <h1>\n  Code\n </h1>\n <pre><code>static struct fb_videomode e60_v220_mode = {\n.name = \"E60_V220\",\n.refresh = 85,\n.xres = 800,\n#ifdef CONFIG_FRAMEBUFFER_CONSOLE\n.yres = 800,\n#else\n.yres = 600,\n#endif\n.pixclock = 32000000,\n.left_margin = 8,\n.right_margin = 166,\n.upper_margin = 4,\n.lower_margin = 26,\n.hsync_len = 20,\n.vsync_len = 4,\n.sync = 0,\n.vmode = FB_VMODE_NONINTERLACED,\n.flag = 0,\n};\n\nstatic struct fb_videomode e60_v220_wj_mode = {\n  .name = \"E60_V220_WJ\",\n  .refresh = 85,\n  .xres = 800,\n#ifdef CONFIG_FRAMEBUFFER_CONSOLE\n.yres = 800,\n#else\n.yres = 600,\n#endif\n  .pixclock = 32000000,\n  .left_margin = 17,\n  .right_margin = 172,\n  .upper_margin = 4,\n  .lower_margin = 18,\n  .hsync_len = 15,\n  .vsync_len = 4,\n  .sync = 0,\n  .vmode = FB_VMODE_NONINTERLACED,\n  .flag = 0,\n};\n\nstatic struct mxc_epdc_fb_mode panel_modes[] = {\n{\n    &e60_v220_wj_mode,\n    4,  /* vscan_holdoff */\n    10, /* sdoed_width */\n    20, /* sdoed_delay */\n    10, /* sdoez_width */\n    20, /* sdoez_delay */\n    425,    /* gdclk_hp_offs */\n    20, /* gdsp_offs */\n    0,  /* gdoe_offs */\n    17, /* gdclk_offs */\n    1,  /* num_ce */\n},\n};\n</code></pre>\n <p>\n  I'm also thinking about using an imx6 duallite to drive such a panel.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">This only helps with the software protocol to the <i>controller</i>. The asker is interested in the <i>hardware</i> interface to the E-Ink panel itself (pinout, signaling etc.).</span>",
                    "time": null
                },
                {
                    "user": "b.g.",
                    "text": "<span class=\"comment-copy\">thank you, I have also checked the source code but there are many files. How did you prune out your way into deciding to the \"mx50_yoshi.c\" file, in other words, how did you arrive to that file?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Petteri Aimonen has figured out\n  <a href=\"http://essentialscrap.com/eink/\" rel=\"nofollow\">\n   how to drive the panel\n  </a>\n  and\n  <a href=\"http://spritesmods.com/?art=einkdisplay\" rel=\"nofollow\">\n   Sprite_tm made a wireless display out of one\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Feb 17, 2015 at 23:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">He's using a different panel than ED060XC3 but perhaps the display interface is the same. I think the backlight is probably just PWMed LEDs.</span>",
                    "time": null
                },
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">Also the ED060XD4 is the updated paperwhite 2 screen ... just for reference.</span>",
                    "time": null
                }
            ]
        }
    ]
}