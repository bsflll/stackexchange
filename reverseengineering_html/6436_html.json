{
    "title": "Windbg: going from vftable to c++ class",
    "link": "https://reverseengineering.stackexchange.com/questions/6436/windbg-going-from-vftable-to-c-class",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As part of an assignment, I am delving into the world of Internet Explorer, and am trying to figure out exactly what class(es) are being allocated on the heap.\n </p>\n <p>\n  In the\n  <code>\n   mshtml!CEventObj::GenericGetElement()\n  </code>\n  method, the\n  <code>\n   eax\n  </code>\n  register points to an instance of a class,\n  <code>\n   edi\n  </code>\n  points to the object it references, and\n  <code>\n   esi\n  </code>\n  points to the vftable.\n </p>\n <p>\n  This being said, I inserted a breakpoint that would list these registers each time through the function, and they always point to the same vftable.\n </p>\n <p>\n  The vftable in question is\n  <code>\n   mshtml!CBodyElement\n  </code>\n  , but does this actually mean that all these instances are of the\n  <code>\n   CBodyElement\n  </code>\n  , or could they be for classes derived from\n  <code>\n   CBodyElement\n  </code>\n  .\n </p>\n <p>\n  If they are from derived classes, how do I determine the actual classes being allocated ?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dynamic-analysis",
        "windbg"
    ],
    "user": "dnraikes",
    "time": "Oct 13, 2014 at 8:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A derived class will get its own\n  <code>\n   vtable\n  </code>\n  if it overrides any of the virtual functions.\n </p>\n <p>\n  If the derived class does not override any virtual functions, it will use the original\n  <code>\n   vtable\n  </code>\n  .\n </p>\n <p>\n  I would say that your assumption is correct ~90% of the time.\n </p>\n <p>\n  The best that you can do for\n  <em>\n   static\n  </em>\n  type recovery, is to look at the\n  <code>\n   vtable\n  </code>\n  being used.\n </p>\n <p>\n  What you can do to help a bit is to turn one PageHeap with stack tracking (\n  <code>\n   gflags.exe /i iexplore.exe +hpa +ust\n  </code>\n  ) and look at the address allocated for the object (\n  <code>\n   !heap -p -a 0xaddress\n  </code>\n  ).  This will give you a full stack trace to the allocation-site of the object, which is sometimes to determine the type of object (e.g. if a\n  <code>\n   Factory\n  </code>\n  pattern was used).\n </p>\n <p>\n  Finally, there are additional dynamic analysis tricks you can play.  I wrote a Pin tool and IDA Python plugin,\n  <a href=\"https://github.com/zachriggle/ida-splode\" rel=\"nofollow noreferrer\">\n   ida-splode\n  </a>\n  for almost exactly this application.  By capturing information at runtime, you can enhance your IDA traces.  Below is an example screenshot from the slide deck.  The better symbol information you have (or the better fleshed-out your IDB is), the better the information you get.\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/A0XBu.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Oct 13, 2014 at 21:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}