{
    "title": "Write own obfuscator in Python [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/14246/write-own-obfuscator-in-python",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/14246/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2016-12-27 12:02:39Z\">\n        8 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/14246/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I want to create my own, static obfuscator for any executables. What is the best way to do it with python? How should I start or what sources should I learn to do it? Anyon can give me some tips or links connected with this topic?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "python"
    ],
    "user": "Developus",
    "time": "8 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You should start with reading documents.\nYour problem definition is too broad to be covered by reading sources of already existing solutions.\n </p>\n <ol>\n  <li>\n   You need to learn the executable formats you are intending to work with, \"any executable\" is too broad (ELF, PE, jar, whatever else ?)\n  </li>\n  <li>\n   You need to learn the platform architecture (is it ARM, MIPS, x64 ?)\n  </li>\n  <li>\n   After that you need to define the list of obfuscating transformations you want to apply to the executable of type of your choice .\n  </li>\n  <li>\n   All the rest depends very much on the list of the transformations and information you'll have to apply these transformations.\n  </li>\n </ol>\n <p>\n  Here is the reading list (unfortunately, it is far from being covering the whole problem)\n </p>\n <ol>\n  <li>\n   <a href=\"https://researchspace.auckland.ac.nz/bitstream/handle/2292/3491/TR148.pdf\" rel=\"nofollow noreferrer\">\n    Taxonomy of obfuscating transformations - classic work by Collberg and others\n   </a>\n  </li>\n  <li>\n   <a href=\"https://dspace.mit.edu/handle/1721.1/64489#files-area\" rel=\"nofollow noreferrer\">\n    Studies in program obfuscation - if you want to have some theoretical background on math around the obfuscation\n   </a>\n  </li>\n  <li>\n   <a href=\"https://en.wikipedia.org/wiki/Portable_Executable\" rel=\"nofollow noreferrer\">\n    PE format - go by links from wiki, there are a lot\n   </a>\n  </li>\n  <li>\n   <a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\" rel=\"nofollow noreferrer\">\n    ELF format - the same if you want to obfuscate elf executables\n   </a>\n  </li>\n  <li>\n   <a href=\"https://software.intel.com/en-us/articles/intel-sdm\" rel=\"nofollow noreferrer\">\n    Intel SDM - the best and definitive definition of Intel processors assembly language, replace it with similar document about your platform if you choose to obfuscate non-intel binaries\n   </a>\n  </li>\n  <li>\n   <a href=\"https://tuts4you.com/download.php?list.86\" rel=\"nofollow noreferrer\">\n    tuts2you downloads section related to obfuscation - some articles inside\n   </a>\n  </li>\n  <li>\n   In addition I'd recommend you to follow @Rolf Rolles, he wrote some excellent articles on deobfuscation, such as\n   <a href=\"http://www.openrce.org/articles/full_view/28\" rel=\"nofollow noreferrer\">\n    this\n   </a>\n   or\n   <a href=\"https://www.usenix.org/legacy/events/woot09/tech/full_papers/rolles.pdf\" rel=\"nofollow noreferrer\">\n    this\n   </a>\n   .\n  </li>\n </ol>\n <p>\n  After reading this you'll be able to search for more fine-grained information.\n </p>\n <p>\n  The most approachable methodology to deal with the issue is using\n  <a href=\"http://llvm.org\" rel=\"nofollow noreferrer\">\n   LLVM\n  </a>\n  .\nLLVM has python bindings that probably can be used for this.\nThere are some works related to obfuscation with this methodology, but none of them has complete solution in python, for example\n </p>\n <ol>\n  <li>\n   <a href=\"http://0vercl0k.tuxfamily.org/bl0g/?p=260\" rel=\"nofollow noreferrer\">\n    Example of simple obfuscator with LLVM\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/obfuscator-llvm/obfuscator/\" rel=\"nofollow noreferrer\">\n    You'll probably find something interesting here, more invested LLVM based obfuscator\n   </a>\n  </li>\n  <li>\n   <a href=\"http://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html\" rel=\"nofollow noreferrer\">\n    By the way, here is work on deobfuscating results of one of version of obfuscator mentioned before\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/trailofbits/mcsema\" rel=\"nofollow noreferrer\">\n    McSema - a framework for transforming executable to LLVM IR.\n   </a>\n   - you'll need it to read the executable and transform it into the form related to LLVM.\n  </li>\n </ol>\n <p>\n  Your question is actually huge, and I'm far from covering the topic.\nHowever this topic is very interesting, and I wish you good luck with that :)\n </p>\n <p>\n  UPDATE:\n </p>\n <p>\n  As it appears from comments the topic starter wants to write as a starter something similar to UPX, which looks much simpler.\n </p>\n <p>\n  Here is a list of links that may be helpful for that:\n </p>\n <ol>\n  <li>\n   <a href=\"https://github.com/upx/upx\" rel=\"nofollow noreferrer\">\n    UPX source code\n   </a>\n   - it is not python, but good for reference\n  </li>\n  <li>\n   <a href=\"https://github.com/erocarrera/pefile\" rel=\"nofollow noreferrer\">\n    pefile\n   </a>\n   is a multi-platform Python module to parse and work with Portable Executable (aka PE) files.\n  </li>\n </ol>\n <p>\n  I'd suggest to learn PE format first, and read the code of UPX.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Dec 26, 2016 at 11:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Developus",
                    "text": "<span class=\"comment-copy\">Thanks so much. I know that question is too broad. I want to create an obfuscator for PE files first. Platform architecure is x64. So at the beginning I should understand the form I want to obfuscate and then go deepper? I'm interesting in RE, but in practical side I decided to create something like UPX packer.</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">You need to understand the form (PE) - or you'll not be able to create a valid executable, the platform (x64) - or you'll not be able to add something meaningful to the executable, and you need to choose specific obfuscating transformations set to apply. UPX, by the way, is not obfuscator, but packer: it scrambles and archives IAT and the original code and AFIK unpacks it prior to the execution.</span>",
                    "time": null
                },
                {
                    "user": "Developus",
                    "text": "<span class=\"comment-copy\">So maybe at the begining, write own packer instead of obfuscator would be simpler? I should try same way - learn PE format and go step by step through your list?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I'll update the answer</span>",
                    "time": null
                }
            ]
        }
    ]
}