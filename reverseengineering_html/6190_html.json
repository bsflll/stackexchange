{
    "title": "Reverse-engineering of an Unity dll",
    "link": "https://reverseengineering.stackexchange.com/questions/6190/reverse-engineering-of-an-unity-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on a project which requires me to extract, edit, and reproduce part of a proprietary hash algorithm.. which is contained inside a dll.\n </p>\n <p>\n  The dll is used by an Unity game, and includes Unity between its references too.\n </p>\n <p>\n  This dll invokes some external functions contained in another dll (which I suppose has been written in c++, considering the DllImport etc present in the source code) with all the real hash logic and methods... and here comes the problem.\n </p>\n <p>\n  I've not been able to find and locate that dll: no trace in the folder at all.\n </p>\n <p>\n  So I suppose that Unity (or whatever tool) managed somehow to embed it inside the dll code itself... but after further decompilation, disassemblation etc, the dll does not present any code to eventually extract it!\n </p>\n <p>\n  The fact is that ILSpy is able to show this external dll in the \"parent\" dll references, marking it as a \"module\", but I have no idea about how to proceed to extract it (if it's relly there!).\n </p>\n <p>\n  I also tried to bypass the problem, including the entire dll into a C# project, and invoking its public functions at runtime (like the Unity game does)... but it seems that somehow, this idea is not working at all (read something about the fact that unity can run c# code, but I cannot init Unity via C#... or something like that).\n </p>\n <p>\n  So... After struggling for days, I decided to ask here to some experts.\n </p>\n <p>\n  Anyone can help me?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "9k",
    "tags": [
        "dll",
        "android"
    ],
    "user": "W00dL3cs",
    "time": "Sep 9, 2014 at 8:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   <em>\n    This dll invokes some external functions contained in another dll (which I suppose has been written in c++, considering the DllImport\n  etc present in the source code) with all the real hash logic and\n  methods... and here comes the problem.\n    \n\n    I've not been able to find and\n  locate that dll: no trace in the folder at all.\n   </em>\n  </p>\n </blockquote>\n <p>\n  Use\n  <a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896653\" rel=\"nofollow\">\n   <em>\n    Process Explorer\n   </em>\n  </a>\n  or\n  <a href=\"http://processhacker.sourceforge.net/\" rel=\"nofollow\">\n   <em>\n    Process Hacker\n   </em>\n  </a>\n  to find which modules are loaded in the address space of the process. When you find the required dll, check whether there exists a valid path for that module in disk. If there is one then you may simple copy over the dll for further analysis.\n  <a href=\"http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/\" rel=\"nofollow\">\n   Otherwise the dll may have been loaded from memory\n  </a>\n  . In such case you have to dump that dll from memory.\n </p>\n <p>\n  Next using a PE detection tool such as\n  <a href=\"http://exeinfo.atwebpages.com/\" rel=\"nofollow\">\n   <em>\n    ExeInfo PE\n   </em>\n  </a>\n  ,\n  <a href=\"http://ntinfo.biz/index.php/detect-it-easy\" rel=\"nofollow\">\n   <em>\n    Detect It Easy\n   </em>\n  </a>\n  scan the dll. If it is a managed DLL (aka .net) check if a .net decompiler such as\n  <a href=\"http://www.jetbrains.com/decompiler/\" rel=\"nofollow\">\n   <em>\n    dotPeek\n   </em>\n  </a>\n  or\n  <a href=\"http://www.red-gate.com/products/dotnet-development/reflector/\" rel=\"nofollow\">\n   <em>\n    reflector\n   </em>\n  </a>\n  can decompile it readily. If it is obfuscated, try using\n  <a href=\"https://github.com/0xd4d/de4dot\" rel=\"nofollow\">\n   <em>\n    de4dot\n   </em>\n  </a>\n  before decompiling.\n </p>\n <p>\n  If it is a native dll IDA Pro is your best option for analyzing the dll.\n </p>\n <hr/>\n <p>\n  There are quite a few ways to package a dll inside an executable.\n </p>\n <ul>\n  <li>\n   For native dlls to be embedded inside native executables, you can\nsimply store them as resources, which will be written to disk at\nruntime and loaded subsequently. Another way is to load it completely\nfrom memory as said previously.\n  </li>\n  <li>\n   For native dlls to be embedded inside managed executables, you may\nuse the resource method.\n  </li>\n  <li>\n   For managed dlls to be embedded inside managed executables, you may\nuse the resource method, but writing it to disk is not needed.\n  </li>\n </ul>\n <p>\n  See this article\n  <a href=\"http://www.codeproject.com/Articles/528178/Load-DLL-From-Embedded-Resource\" rel=\"nofollow\">\n   on loading a dll from embedded resource\n  </a>\n  for more info.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xec",
            "time": "Sep 7, 2014 at 5:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "W00dL3cs",
                    "text": "<span class=\"comment-copy\">Unlucky I cannot dump memory unless tools such those you named are available for Android too (as the dll is used by an Unity mobile game, I forgot to mention it). Already tried to check for path at runtime, and also analyzing the dll with dotPeek and Reflector exposed nothing more than those external calls... without actually having access to the un-managed dll at all.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@W00dL3cs Please add the android tag then. For Android it would be a <i>Shared Object (.so)</i> not a <i>dll</i>. Also check <i><a href=\"http://docs.unity3d.com/Manual/PluginsForAndroid.html\" rel=\"nofollow noreferrer\">this</a></i> page.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@W00dL3cs If you have got the <i>apk</i> of the game, Open it in a Archive Editor like WinRAR, and check in the following directory <i>Assets-&gt;Plugins-&gt;Android</i> whether the required file exists.</span>",
                    "time": null
                },
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">It sounds like the android app is using mono so it could well be a DLL rather than a shared object.</span>",
                    "time": null
                },
                {
                    "user": "W00dL3cs",
                    "text": "<span class=\"comment-copy\">I scraped the content of the .apk, and found a .so file with similar name as the dll referenced in the main one... the fact is that decompiling such dll exposes external calls to another dll, not to a shared object!</span>",
                    "time": null
                }
            ]
        }
    ]
}