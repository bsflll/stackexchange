{
    "title": "\"Raw\" offsets to \"disassembler\" offsets?",
    "link": "https://reverseengineering.stackexchange.com/questions/8050/raw-offsets-to-disassembler-offsets",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a very silly question, but surprisingly I've had a problem with this today.\nIn a hex editor, I've found an offset and I wanted to take a look at that code in a disassembler. In the hex-editor, the offset is EBE75, and it looks like this:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/QmuKd.png\"/>\n </p>\n <p>\n  Obviously a CALL, I wanted to find it in IDA/Olly and take a look. This is, however, where I wasn't sure how to translate that to an offset that IDA/Olly could understand. Do I add the imagebase, or maybe the offset of the .text section? I've managed to find the code using IDA's hexscan, and it's located at address\n  <code>\n   004ECA75\n  </code>\n  :\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/flPcg.png\"/>\n </p>\n <p>\n  The difference between these addresses is\n  <code>\n   4ECA75 - EBE75 = 400C00\n  </code>\n  . This is quite surprising to me, where did that number come from? How is this related to the .exe's layout?\n </p>\n</div>\n</body></html>",
    "votes": "17",
    "answers": 2,
    "views": "7k",
    "tags": [
        "hex",
        "offset"
    ],
    "user": "user4520",
    "time": "Jan 19, 2015 at 10:45",
    "comments": [
        {
            "user": "SamB",
            "text": "<html><body><span class=\"comment-copy\">\n Your \"raw offsets\" are also called \"file offsets\"; this might help you find relevant commands.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To convert a raw offset in a PE file to its corresponding \"disassembler offset\" (known as the virtual address or VA), you need to perform the following steps:\n </p>\n <p>\n  <strong>\n   Step 1\n  </strong>\n </p>\n <p>\n  Using a PE editor, look at the PE file's section table to find the section containing the file offset.\n </p>\n <p>\n  For example, let's say your PE file's section table looks like this:\n </p>\n <pre><code>+-----------------------------------------------------------------+\n|  Name  | Virtual Address | Virtual Size | Raw Offset | Raw Size |\n|--------+-----------------+--------------+------------+----------|\n| .text  |    00001000     |   00152CA1   |  00000400  | 00152E00 |\n| .data  |    00154000     |   000040C0   |  00153200  | 00004200 |\n| .rsrc  |    00159000     |   00062798   |  00157400  | 00062800 |\n| .reloc |    001BC000     |   00003B3C   |  001B9C00  | 00003C00 |\n+-----------------------------------------------------------------+\n</code></pre>\n <p>\n  You can see above that the section containing raw offset\n  <code>\n   EBE75\n  </code>\n  is the\n  <code>\n   .text\n  </code>\n  section, since\n  <code>\n   00000400 <= EBE75 < 00153200\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   Step 2\n  </strong>\n </p>\n <p>\n  Using a PE editor, look up the PE file's image base. For example, let's say your file's image base is\n  <code>\n   00400000\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   Step 3\n  </strong>\n </p>\n <p>\n  Perform the following calculation:\n </p>\n <pre><code>(target raw offset) - (raw offset of section) + (virtual address of section) + (image base)\n= (target virtual address)\n</code></pre>\n <p>\n  Filling in the example values above, we find that the virtual address for raw offset\n  <code>\n   EBE75\n  </code>\n  is:\n </p>\n <pre><code>EBE75 - 00000400 + 00001000 + 00400000\n= 4ECA75\n</code></pre>\n</div>\n</body></html>",
            "votes": "17",
            "user": "Jason Geffner",
            "time": "Jan 22, 2015 at 14:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user4520",
                    "text": "<span class=\"comment-copy\">Nice explanation, it's perfectly clear now, thanks :)</span>",
                    "time": null
                },
                {
                    "user": "FRob",
                    "text": "<span class=\"comment-copy\"><code>00000400 &lt;= EBE75 &lt; 00053200</code> umm, no... Rest of answer is nice, though.</span>",
                    "time": null
                },
                {
                    "user": "user4520",
                    "text": "<span class=\"comment-copy\">@FRob Oops, yeah, good point. Doesn't change much though.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Thanks for the catch, @FRob! I've fixed the example section table above.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   ollydbg 1.10\n  </strong>\n </p>\n <p>\n  if you have\n </p>\n <ol>\n  <li>\n   the binary loaded in ollydbg\n  </li>\n  <li>\n   disasm window is in the correct module\n  </li>\n  <li>\n   <p>\n    the binary is also open in hexeditor\n   </p>\n   <p>\n    <strong>\n     Right Click -> View -> Executable File\n    </strong>\n   </p>\n  </li>\n </ol>\n <p>\n  In the New Window do\n  <code>\n   ctrl+g\n  </code>\n  and enter the offset you saw in hexeditor\n  <code>\n   ebe75\n  </code>\n </p>\n <pre><code>right click in new window -> follow in disassembler\n</code></pre>\n <p>\n  in hexeditor 0x1529 has the 0xe8 opcode\n </p>\n <pre><code>xxd -s 0x1520 -l 0x10 -g 1 c:\\WINDOWS\\system32\\calc.exe\n0001520: ff d6 6a 01 a3 4c 4d 01 01 e8 e9 f8 ff ff 6a 69  ..j..LM.......ji\n</code></pre>\n <p>\n  <strong>\n   in ollydbg after rightclick-> view -> executable file and ctrl+g 1520 in new window\n  </strong>\n </p>\n <pre><code>00001520    FFD6            CALL    NEAR ESI\n00001522    6A 01           PUSH    1\n00001524    A3 4C4D0101     MOV     DWORD PTR DS:[1014D4C], EAX\n00001529    E8 E9F8FFFF     CALL    00000E17\n0000152E    6A 69           PUSH    69\n</code></pre>\n <p>\n  <strong>\n   in new window rightclick -> view image in disassembler\n  </strong>\n </p>\n <pre><code>01002120  |.  FFD6                   CALL    NEAR ESI                         ; \\GetProfileIntW\n01002122  |.  6A 01                  PUSH    1                                ; /Arg1 = 00000001\n01002124  |.  A3 4C4D0101            MOV     DWORD PTR DS:[gbUseSep], EAX     ; |\n01002129  |.  E8 E9F8FFFF            CALL    InitSciCalc                      ; \\InitSciCalc\n0100212E  |.  6A 69                  PUSH    69                               ; /TableName = 69\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Jan 19, 2015 at 19:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}