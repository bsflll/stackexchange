{
    "title": "Reverse engineer Android native code",
    "link": "https://reverseengineering.stackexchange.com/questions/3200/reverse-engineer-android-native-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking for an reverse engineering tool or a way to decompile the existing android native code to an human understandable format rather than Assembly language. Can anyone please suggest me as i need to unblock one of my priority task.\n </p>\n <p>\n  Thanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 3,
    "views": "18k",
    "tags": [
        "disassembly",
        "decompilation",
        "assembly",
        "debuggers",
        "android"
    ],
    "user": "msk",
    "time": "Dec 16, 2013 at 4:03",
    "comments": [
        {
            "user": "msk",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks Mialwl.. With hex-rays can we get op-codes for Android as well Though it is based on ARM.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "fileoffset",
            "text": "<html><body><span class=\"comment-copy\">\n That.. makes no sense. Hex-rays is a decompiler, it will give you C-like code (if it works).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "IgorGanapolsky",
            "text": "<html><body><span class=\"comment-copy\">\n Were you referring to\n <b>\n  .so\n </b>\n files compiled into the APK?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Andrew T.",
            "text": "<html><body><span class=\"comment-copy\">\n Does this answer your question?\n <a href=\"https://reverseengineering.stackexchange.com/questions/4624/how-do-i-reverse-engineer-so-files-found-in-android-apks\">\n  How do I reverse engineer .so files found in android APKs?\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ida pro + hexrays for arm.\n </p>\n <p>\n  IDAPro is best disassembler tool for many processors and file types.\nHexRays ARM - plugin for IDAPro (doesn't work separately), which trying to decompile assembler to C-like source code\n </p>\n <p>\n  both not free\n </p>\n <p>\n  <a href=\"https://www.hex-rays.com/index.shtml\">\n   https://www.hex-rays.com/index.shtml\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "mailwl",
            "time": "Dec 16, 2013 at 10:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">please improve your answer, with links and descriptions.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://developer.android.com/tools/sdk/ndk/index.html\" rel=\"noreferrer\">\n   Get the Android NDK\n  </a>\n  and unzip. Use\n  <code>\n   objdump\n  </code>\n  as follows:\n </p>\n <pre><code>android-ndk-r9d\\toolchains\\arm-linux-androideabi-4.6\\prebuilt\\windows-x86_64\\arm-linux-androideabi\\bin\\objdump.exe -d libinquestion_jni.so > libinquestion_jni.txt \n</code></pre>\n <p>\n  While trying different disassemblers, I explored that they are not capable to decode every byte sequence, and even worse, they can decode in a wrong way making you wonder how does it ever work. Different ARMs have different instruction sets and use overlapping byte encodings for them.\n  <code>\n   objdump\n  </code>\n  from the Android NDK is a perfect match for CPUs used in Android products, and it's free.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "perror",
            "time": "Jul 15, 2014 at 9:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Arsen Zahray",
                    "text": "<span class=\"comment-copy\">is it possible to re-compile the output into ready .so file?</span>",
                    "time": null
                },
                {
                    "user": "OCTAGRAM",
                    "text": "<span class=\"comment-copy\">Relative offsets cannot be distinguished from integers, so doing this will make little sense. You are either going to produce the same file or something that won't work because disassembler does not make task of making changes to compiled code sufficiently easier. I haven't estimated dump completely, but from what I see, it was not supposed to compile as is. Human readable annotation like \"Disassembly of section .plt:\" are not commented as they should be in real assembler sources.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The easiest way is to first transfer the APK into a jar file and then decompile the code using your favourite java decompiler (such as\n  <a href=\"http://jd.benow.ca/\" rel=\"nofollow\">\n   jd-gui\n  </a>\n  ).\n </p>\n <p>\n  <a href=\"http://code.google.com/p/dex2jar/\" rel=\"nofollow\">\n   dex2jar\n  </a>\n  has everything you need to have a better representation of your Android application. There is even a\n  <a href=\"http://code.google.com/p/dex2jar/wiki/UserGuide\" rel=\"nofollow\">\n   user guide\n  </a>\n  that explains exactly what you need to do.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "jiboutin",
            "time": "Dec 17, 2013 at 20:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "msk",
                    "text": "<span class=\"comment-copy\">But the application what i am looking is native process, not the APK. The native process is developed in C++</span>",
                    "time": null
                },
                {
                    "user": "IgorGanapolsky",
                    "text": "<span class=\"comment-copy\">Does <b>dex2jar</b> decompile native code?</span>",
                    "time": null
                },
                {
                    "user": "Hao Nguyen",
                    "text": "<span class=\"comment-copy\">dex2jar doesn't decompile native code. It only works for managed Java code.</span>",
                    "time": null
                }
            ]
        }
    ]
}