{
    "title": "Determine if exe is written using Java",
    "link": "https://reverseengineering.stackexchange.com/questions/29726/determine-if-exe-is-written-using-java",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm examining my Windows programs to determine which ones are written in Java, and if so, whether they import a log4j library affected by the\n  <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44228\" rel=\"nofollow noreferrer\">\n   log4shell\n  </a>\n  vulnerability.\n </p>\n <p>\n  Programs that are packaged as JAR files and use the JVM to run are fairly easy to identify.\n </p>\n <p>\n  However, I am less certain about\n  <code>\n   .exe\n  </code>\n  files. Usually these are compiled from say C++, but there are ways to compile Java code into\n  <code>\n   .exe\n  </code>\n  files.\n </p>\n <p>\n  Is there a method to identify whether an\n  <code>\n   .exe\n  </code>\n  was written using Java? Is this method reliable?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "467",
    "tags": [
        "java"
    ],
    "user": "Trent Gm",
    "time": "Dec 18, 2021 at 20:55",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. It's just a guess, but if there is such a thing, I'd look in the resource section of the PE file first and then in the overlay (which could come before or after a potential signature).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n If you run the program and thus have access to the log file you can simply insert a sample\n <a href=\"https://canarytokens.org/generate\" rel=\"nofollow noreferrer\">\n  exploit canary token\n </a>\n and if the url appears in the log but the canary is not triggered you know that the program is safe.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Trent Gm",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks all for the responses - doesn't seem like there's an easy way! I'll check out the PE file for a few exes..\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Been a while since I went back to any Java reversing, but I seem to remember being able to use 7zip to open “Java executables” with a\n  <code>\n   .exe\n  </code>\n  file extension.\n </p>\n <p>\n  Most (if not all?)\n  <code>\n   .jar\n  </code>\n  s have a\n  <code>\n   META-INF\n  </code>\n  folder within them, so this is usually a pretty easily identifiable folder to look for.\n </p>\n <p>\n  This could probably be automated fairly easily. You could write a script that tries to “extract”\n  <code>\n   .exe\n  </code>\n  s and if the base level directory contains\n  <code>\n   META-INF\n  </code>\n  then there is a good chance it's a packaged\n  <code>\n   .jar\n  </code>\n  .\n </p>\n <p>\n  Edit for clarity:\nas 'masterX244' pointed out, I was referring to the .exe files that are essentially a Jar file with a small stub loader of an executable tacked on to the front of it (which handles all the JVM args, etc, internally).\nThe reference I have has the initial stub, and the Jar itself starts at offset\n  <code>\n   0x12A00\n  </code>\n  (location found via the PK magic number).\nI had not considered graalVM as suggested by 'Thorbjørn Ravn Andersen', so this only works under specific circumstances.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Kaden",
            "time": "Mar 9, 2024 at 4:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. The question wasn't about JAR files, though. In fact the question mentions how JAR files are easy to spot and investigate, but the concern lies with .exe files which \"package\" Java applications, so to speak.</span>",
                    "time": null
                },
                {
                    "user": "masterX244",
                    "text": "<span class=\"comment-copy\">There is one variant of Java Exes that is just a JAR with a exe loader for loading the JVM tacked in front.</span>",
                    "time": null
                },
                {
                    "user": "Thorbjørn Ravn Andersen",
                    "text": "<span class=\"comment-copy\">This is most likely only for those wrappers that add a binary launcher to the existing zip files (which the standard allows).  The full compilers like GraalVM behave differently.</span>",
                    "time": null
                },
                {
                    "user": "Kaden",
                    "text": "<span class=\"comment-copy\">I updated my answer to clarify slightly and to add some additional info. As pointed out by Thorbjørn this does not work in cases where cross-compiling/similar has been used. Never the less, knowing about the java .exe executables (and how to remove the .exe stub) is handy to know as a reverse engineer.</span>",
                    "time": null
                }
            ]
        }
    ]
}