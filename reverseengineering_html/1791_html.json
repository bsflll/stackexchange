{
    "title": "Are there any ARM disassemblers that provide structured output?",
    "link": "https://reverseengineering.stackexchange.com/questions/1791/are-there-any-arm-disassemblers-that-provide-structured-output",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Are there any ARM (or other non-x86) disassemblers that decompose an instruction into its component parts in a machine-friendly structure? Ideally it would be something like\n  <a href=\"http://www.cs.virginia.edu/kim/publicity/pin/docs/20751/Xed/html/\" rel=\"noreferrer\">\n   XED\n  </a>\n  or\n  <a href=\"https://code.google.com/p/distorm/\" rel=\"noreferrer\">\n   distorm3\n  </a>\n  , which disassemble into a structure and then provide an API for querying things like \"Is this a call?\" \"Is this a conditional branch?\" etc., or getting the operands of an instruction.\n </p>\n <p>\n  I found\n  <a href=\"https://code.google.com/p/armstorm/\" rel=\"noreferrer\">\n   armstorm\n  </a>\n  , but it currently only supports THUMB.\n </p>\n <p>\n  Edit: To clarify, I'm looking for something that can be called from within another program and hopefully has liberal licensing (GPL-compatible).\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 3,
    "views": "10k",
    "tags": [
        "tools",
        "disassembly",
        "arm"
    ],
    "user": "Brendan Dolan-Gavitt",
    "time": "Apr 17, 2013 at 16:17",
    "comments": [
        {
            "user": "cb88",
            "text": "<html><body><span class=\"comment-copy\">\n For what it is worth I think it is something that will probably be added to ERESI in the near term they already have it for Intel and Sparc and are adding more ARM support.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://github.com/jbremer/darm\">\n   DARM\n  </a>\n  (GitHub) by Jurriaan Bremer is an ARMv7 disassembler written in C and is available under a 3-Clause BSD License.\n </p>\n <p>\n  Note: It currently does not support Thumb mode.\n </p>\n <p>\n  A simple example of using DARM could be as follows:\n </p>\n <pre><code>// The structure which will hold all the metadata about the disassembled instruction...\ndarm_t d;\n\n// disassemble a 32bit opcode...\nif( darm_armv7_disasm( &d, 0xE12FFF14 ) >= 0 )\n{\n    if( d.instr == I_BX )\n    {\n        // do something with a BX instructiuon...\n    }\n\n    // print the disassembled full instruction \n    darm_str_t str;\n    if( darm_str( &d, &str) > 0 )\n        printf( \"%s\n\", str.instr );\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "11",
            "user": "QAZ",
            "time": "Apr 15, 2013 at 22:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">This looks like what I was going for! I suppose I could even use both DARM and armstorm to get full support...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes,\n  <a href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" rel=\"nofollow\">\n   IDA Pro's SDK\n  </a>\n  allows you to access instructions' component parts via the\n  <a href=\"http://books.google.com/books?id=BoFaZ1dB1H0C&pg=PA297&lpg=PA297&dq=insn_t&ots=-HSh_LVbyS&sig=j97GQWhmvOi-QnaJ8ICZ2cGct58&hl=en&sa=X&ei=C31sUeBNk_7wBK7ugKAB&ved=0CEkQ6AEwBQ#v=onepage&q=insn_t\" rel=\"nofollow\">\n   insn_t class\n  </a>\n  (in ua.hpp).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Apr 15, 2013 at 22:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">That's excellent to know, but I'm looking for something that can be called from within another program and hopefully has liberal licensing.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@BrendanDolan-Gavitt: perhaps stating that in the question is a good idea then?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A more up-to-date answer to this question would be to suggest\n  <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow\">\n   Capstone\n  </a>\n  library. I've used it for ARM disassembly and it's quite reliable. IMHO, It's  the best open source library available.\n </p>\n <p>\n  The library is based on LLVM's TabelGen instruction descriptions. Therefore, its ISA support is as complete as LLVM.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Codoka",
            "time": "Feb 16, 2016 at 16:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}