{
    "title": "Run ltrace to avoid detection (on a different PID?)",
    "link": "https://reverseengineering.stackexchange.com/questions/27229/run-ltrace-to-avoid-detection-on-a-different-pid",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to run\n  <code>\n   ltrace\n  </code>\n  on this file:\n </p>\n <blockquote>\n  <p>\n   ./launcher: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=f6f8cf3307e0ee26723f4d03ec68f022d15e56b6, stripped\n  </p>\n </blockquote>\n <p>\n  When I pop it open in ghidra, and view the decompiled c, I can see that it changes the program flow to somewhere I don't want to be when ltrace is running.\n </p>\n <pre><code>  attached_to_ptrace = ptrace(PTRACE_TRACEME,0,1,0);\n  if (attached_to_ptrace == -1) {\n    puts(\"I am not your property!\");\n    exit_code = 1;\n  }\n  else {\n    // execute main loop\n  }\n</code></pre>\n <p>\n  Looking at the man page for\n  <code>\n   ptrace\n  </code>\n  , I see:\n </p>\n <pre><code>long ptrace(enum __ptrace_request request, pid_t pid,\n                   void *addr, void *data);\n</code></pre>\n <p>\n  Meaning that if the program? or ltrace? were to run with a different PID, I would be able to successfully run my program using ltrace.\n </p>\n <p>\n  This is the current output I get when running the program with\n  <code>\n   ltrace\n  </code>\n  :\n </p>\n <pre><code>~/ctf/cyberstart/level13/04 [master|…1] $ ltrace ./launcher\n__libc_start_main(0x565a86f0, 1, 0xff837be4, 0x565a8970 <unfinished ...>\nptrace(0, 0, 1, 0)                                                     = 0xffffffff\nputs(\"I am not your property!\"I am not your property!\n)                                        = 24\n+++ exited (status 1) +++\n</code></pre>\n <p>\n  Without ltrace:\n </p>\n <pre><code>~/ctf/cyberstart/level13/04 [master|…1] $ ./launcher\n\nEnter the password:\npassword\nAway now, you anklebiter!\n\n[1]+  Stopped                 ./launcher\n</code></pre>\n <p>\n  (This is my second buffer overflow CTF challenge, where the main goal is to mess with this block of code:)\n </p>\n <pre><code>  int iVar1;\n  char local_1e [10];\n  int local_14;\n  int local_10;\n  \n  local_10 = 0;\n  puts(\"\nEnter the password: \");\n  gets(local_1e);\n  iVar1 = strcmp(local_1e,\"PAssw0rd\");\n  if (iVar1 == 0) {\n    puts(\"Well done! Unfortunately, you have to try harder.\");\n    local_10 = 0;\n  }\n  else {\n    puts(\"Away now, you anklebiter!\");\n  }\n  if (local_10 != 0) {\n    printf(\"Unexpected error condition. Control char is %d\n\",local_10);\n    local_14 = param_2 * local_10;\n    (*(code *)(local_14 + param_1))();\n  }\n</code></pre>\n <p>\n  <strong>\n   How can I run ltrace in a way such that it isn't detected?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "476",
    "tags": [
        "debugging",
        "buffer-overflow"
    ],
    "user": "Peter Stenger",
    "time": "Mar 13, 2021 at 1:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h3>\n  Ghidra method\n </h3>\n <p>\n  You can modify the binary via Ghidra in the following way:\n </p>\n <ul>\n  <li>\n   load the track\n  </li>\n  <li>\n   move in the assembly code to the point where it checks the result (if statement)\n  </li>\n  <li>\n   you will probably be faced with a jump instruction\n   <code>\n    JNZ\n   </code>\n   , just right click on it and select \"Patch Instruction\" and replace it with the opposite condition\n   <code>\n    JZ\n   </code>\n   (or vice versa).\n  </li>\n  <li>\n   Now save the project (\n   <code>\n    Ctrl\n   </code>\n   +\n   <code>\n    S\n   </code>\n   )\n  </li>\n  <li>\n   Then navigate to\n   <code>\n    File\n   </code>\n   >\n   <code>\n    Export\n   </code>\n   Program and decide where to save the modified binary\n  </li>\n </ul>\n <p>\n  If you have problems with the exported binary, try this script:\n  <a href=\"https://github.com/schlafwandler/ghidra_SavePatch\" rel=\"nofollow noreferrer\">\n   https://github.com/schlafwandler/ghidra_SavePatch\n  </a>\n </p>\n <h3>\n  LD_PRELOAD method\n </h3>\n <ul>\n  <li>\n   Create a file called\n   <code>\n    ptrace.c\n   </code>\n   with the following content:\n  </li>\n </ul>\n <pre><code>long ptrace(int request, int pid, void *addr, void *data) {\n    return 0;\n}\n</code></pre>\n <ul>\n  <li>\n   Now build the file as a shared library:\n   <code>\n    gcc -shared ptrace.c -o ptrace.so\n   </code>\n   ;\n  </li>\n  <li>\n   Now lunch the following command:\n   <code>\n    export LD_PRELOAD=./ptrace.so\n   </code>\n  </li>\n  <li>\n   Run\n   <code>\n    ltrace ./launcher\n   </code>\n  </li>\n </ul>\n <blockquote>\n  <p>\n   Note: you can also use LD_PRELOAD method with GDB\n  </p>\n </blockquote>\n <h1>\n  GDB method\n </h1>\n <ul>\n  <li>\n   use GDB to lunch the binary:\n   <code>\n    gdb ./launcher\n   </code>\n  </li>\n  <li>\n   in the GDB client shell:\n   <code>\n    catch syscall ptrace\n   </code>\n  </li>\n  <li>\n   GDB allows you tun run a series of command when you reach a BP:\n   <code>\n    command 1\n   </code>\n  </li>\n  <li>\n   type:\n   <code>\n    set ($rax) = 0\n   </code>\n   , that will change the value inside the \"return\" register (aka the result of ptrace syscall)\n   <a href=\"https://www.cs.uaf.edu/2017/fall/cs301/lecture/09_11_registers.html\" rel=\"nofollow noreferrer\">\n    x86-registers\n   </a>\n  </li>\n  <li>\n   then enter:\n   <code>\n    continue\n   </code>\n   and\n   <code>\n    end\n   </code>\n   (as two separated commands)\n  </li>\n  <li>\n   place a BP on the main function:\n   <code>\n    b main\n   </code>\n   and then type\n   <code>\n    r\n   </code>\n   to continue the execution\n  </li>\n </ul>\n <p>\n  Another option is to use Qiling framework and hook the function/syscall and always return any other value than \"-1\", but that seems a bit overkill.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "zi0Black",
            "time": "Nov 13, 2021 at 8:09",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can patch the CALL to ptrace with NOPs or use LD_PRELOAD to inject your own fake ptrace code which does nothing but return a value other than -1.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "julian",
            "time": "Nov 12, 2021 at 19:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}