{
    "title": "Decoding unknown ID format parts",
    "link": "https://reverseengineering.stackexchange.com/questions/26101/decoding-unknown-id-format-parts",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a data set where events have a unique ID. Some examples:\n </p>\n <pre><code>CkUKGkNNZmY1TkhObi1zQ0ZWT0h3Z0VkaExJQ0xnEidDSlB0bG9UTG4tc0NGWmhpaXdvZDFxOE5fdzE1OTc1NzY4NzU4Mzg%3D\nCjoKGkNOWHBsX1hJbi1zQ0ZTWks3UW9kRDRNSVdREhxDSXI4emVuSW4tc0NGZm5WVEFJZEVRZ0JrUS0x\nCjkKGkNMTzJ6TkRWbi1zQ0ZUNkh3Z0VkdGVVQnd3EhtDT3ZOajZYVm4tc0NGWUdGY0FvZGJIc09iZzE%3D\nCjkKGkNMcnN4OHZKbi1zQ0ZRMXpnd29kUW9VQll3EhtDSTdfZzVmSm4tc0NGVWFBY0FvZGRsQUhFQTQ%3D\nCjsKGkNMNjlrdFRObi1zQ0ZZMkN3Z0VkVWxnSGxREh1DSktpanFISm4tc0NGVHZCVEFJZEM3a01Udy00OA%3D%3D\nCjkKGkNNQ2ItbzNWbi1zQ0ZkU013Z0VkX2RRRHNBEhtDSlAzcm8zUm4tc0NGV252T0FZZENkUUJyUTU%3D\nCjoKGkNOTzhoZVRRbi1zQ0ZVYTBnZ29kN0VrTnlnEhxDSS1qbmRmUW4tc0NGY1pLaXdvZEgxRUFvUS0w\nCkUKGkNQU0VocjNMbi1zQ0ZaaXNnZ29kQlNjTTZBEidDTVNmbDRiTG4tc0NGWDRBdHdBZF9lQUtPQTE1OTc1NzYyOTkyNDg%3D\nCjkKGkNJLVh3NEhLbi1zQ0ZaV3JEUW9kUzNBSC1BEhtDTmFWeVpuSm4tc0NGZEtSY0FvZFdWNEVvQTE%3D\nCjkKGkNKYnZpb3pSbi1zQ0ZVVkE3UW9kV0xzTnVBEhtDSXlKcktQUW4tc0NGZkhEVEFJZEJtOENGdzQ%3D\nCjsKGkNJRGZsZnpVbi1zQ0ZjM3hnZ29kd1hZRnVREh1DS0t1bE96VW4tc0NGUlQ1V0FvZGE2OElSQS0yNg%3D%3D\nCkUKGkNJVGhuZHpQbi1zQ0ZZMkJ3Z0VkUkk0Q1N3EidDUC1qbDVITm4tc0NGVnBsaXdvZGJ2b0hLUTE1OTc1Nzc0MzU0Mjg%3D\nCkUKGkNPRzc4SkRPbi1zQ0ZkbWhnZ29kckprTWJREidDT2FCdmRUTW4tc0NGYnhDOVFVZExfc0lIQTE1OTc1NzcwMDk0NTQ%3D\nCjoKGkNJN05fZURWbi1zQ0ZZRzJEUW9kamEwTXJ3EhxDTHJ5eVpMVm4tc0NGVWZDVEFJZEkyNEdIQS00\nCkUKGkNNN1F6TERKbi1zQ0ZWbUd3Z0Vkb0RJSzlREidDT3ZBeUszSm4tc0NGU1FfWUFvZEl1UUZ4dzE1OTc1NzU3MzIyNTM%3D\nCjkKGkNJeXlwOV9Kbi1zQ0ZkQzZnZ29kaGdBSWVnEhtDSVdRMzd6Qm4tc0NGWmlDckFJZEFNb05BZzU%3D\nCjoKGkNKQ1YzWnpUbi1zQ0ZjWW5nd29kaUVJRkdREhxDSXVieHBqU24tc0NGVUZrS2dvZElRNElndy0x\nCjkKGkNMVHJrNWpMbi1zQ0ZVa29nd29kSG1FRmtnEhtDS3VXdGRMS24tc0NGUVdIY0FvZFFuWUVfdzA%3D\nCjkKGkNQVDhqOV9Tbi1zQ0ZaUlU3UW9kSGZZQkl3EhtDTV9rak9iUG4tc0NGUkVsandvZFdIa1A5QTg%3D\nCkUKGkNKdmM4S0xRbi1zQ0ZSaktnZ29kdWdRTm5REidDS096NDRQTm4tc0NGUXQ3aXdvZDI1Z0c4dzE1OTc1Nzc1ODMwMDM%3D\nCjoKGkNOM3ZnTXJQbi1zQ0ZaSk03UW9kWmJvQmx3EhxDSUdVcHBMSm4tc0NGWVptTUFvZFg3SVBZUTMy\nCjkKGkNKYjZ6YmZMbi1zQ0ZRNkV3Z0VkaW9FRDZREhtDTV9UcG96TG4tc0NGWWpGY3dFZExiVUp0ZzA%3D\nCjkKGkNPRHZ1Yl9Wbi1zQ0ZZeGU3UW9kMzZ3UG5nEhtDTmYzcFp2R24tc0NGUlpUandvZEt3SUswUTk%3D\nCjkKGkNKcjV3NkRKbi1zQ0ZUNkh3Z0VkT1RZSGtBEhtDUFRJeXB6Sm4tc0NGZmp5T0FZZENqZ1BfZzA%3D\nCkUKGkNOZlM4NlhKbi1zQ0ZRcWhnZ29ka3kwUEt3EidDSVBwcDVUSm4tc0NGZl9GVEFJZGhIa0ZiZzE1OTc1NzU3MDc1Njk%3D\nCjkKGkNONmNsZmJKbi1zQ0ZkYTlnZ29kU3cwRnFBEhtDUEMyOEtMSG4tc0NGZkdDWXdZZDgtTUprUTk%3D\nCkUKGkNLZTJ1TmpSbi1zQ0ZTTGdnZ29kcDJVSkdBEidDTW1YcHF2Um4tc0NGUmhQS2dvZGRPQURUdzE1OTc1Nzc4ODk4NjM%3D\nCjoKGkNOang2NUxUbi1zQ0ZRSlE3UW9kN1JNRUlREhxDSlNRaDZqRm4tc0NGWFJSaFFvZFJmUUlZZzgx\nCkUKGkNLT2dpYXZVbi1zQ0ZRV21EUW9kTngwRy1BEidDSm5lZ3FEUm4tc0NGUzVDaFFvZHlxb0V4dzE1OTc1Nzg2NzI5NjI%3D\nCkUKGkNLaU8tZURKbi1zQ0ZlcUZ3Z0VkRGhrT1V3EidDTFdEcUtISm4tc0NGYXhDaFFvZFlSRUNmUTE1OTc1NzU4MzM3NDM%3D\nCkUKGkNPMkJ1YlBLbi1zQ0ZlUGxnZ29kN3JvUFZBEidDTWlfdlozSm4tc0NGWVBKV0FvZDZwb05hQTE1OTc1NzYwMDY3ODk%3D\nCkUKGkNKR09xS1hTbi1zQ0ZZUkM3UW9kV1FvRzh3EidDUFc2dEkzU24tc0NGUlI0WUFvZGdHb0ZKUTE1OTc1NzgxMjQ0MjY%3D\nCjoKGkNNekd1N2JObi1zQ0ZjeXlnZ29kdmJZTXZBEhxDTnlnN003S24tc0NGVVZDOVFVZFktZ0Zwdy02\nCjoKGkNPemd2cmJPbi1zQ0ZZTnRnd29kbzFvSy1nEhxDTEtMMnFfSm4tc0NGWmRBOVFVZGR5WUVrUTEz\nCjoKGkNLbUxxZXpRbi1zQ0ZaUE1nZ29kbnAwSDRBEhxDTmVqbE96SW4tc0NGUTlIV0FvZDV5QUdaQTEy\nCjsKGkNKcjMzSkhLbi1zQ0ZSaktnZ29kZ2RnS3N3Eh1DT1N3eXBESm4tc0NGYXhTaFFvZExJSUdlUS0xMw%3D%3D\nCkUKGkNKT3luXzdSbi1zQ0ZhSkQ3UW9kLWlRTHNnEidDSUhnaVlqUm4tc0NGWVZCOVFVZFdqc05JQTE1OTc1NzgwNDM3MzE%3D\nCjoKGkNQbWM5UHpQbi1zQ0ZSblBnZ29kTlU0Q3d3EhxDTXVEa3RqS24tc0NGZDVBOVFVZE43MEN1dzIz\nCkUKGkNMX3k5UDdUbi1zQ0ZRU0d3Z0VkQ2tvR2t3EidDSXVqb19IVG4tc0NGU0pEOVFVZGRZMERyZzE1OTc1Nzg1ODAyODI%3D\nCjkKGkNJSGJ0b2pMbi1zQ0ZXSDNnZ29kLW5vTlpREhtDSjNrMV8zS24tc0NGUWJ3T0FZZHlJa01rZzA%3D\nCjoKGkNKT2I4ZHpObi1zQ0ZjcU13Z0VkWjkwRkpBEhxDTUtsc01uTW4tc0NGVnpPVEFJZERmWU9idy0z\nCkUKGkNNSFVtS19Tbi1zQ0ZjT0J3Z0VkcHRVSXBnEidDTnVLbk9mUm4tc0NGYzVQS2dvZG53WURmUTE1OTc1NzgxNDQ2ODg%3D\nCjkKGkNNYXJnS1BKbi1zQ0ZRcVJ3Z0VkemdzSGlREhtDT1RCcTdQQm4tc0NGVWIwT0FZZFFwSUpFUTM%3D\nCkUKGkNJcnFqcGZLbi1zQ0ZVMkh3Z0VkOVpvSHB3EidDS2UyaGZ6Sm4tc0NGWnJIVEFJZDM4a1BjUTE1OTc1NzU5NDY4OTI%3D\nCjkKGkNJdkM4bzdTbi1zQ0ZaV1BnZ29kWWN3SXd3EhtDTGlfby1MSm4tc0NGUXBCaFFvZDMzQU9wZzA%3D\nCkUKGkNKYXRqc1RSbi1zQ0ZaQ2xnZ29kTTAwRGpBEidDSW5mejk3S24tc0NGWVJEaFFvZElNd043dzE1OTc1Nzc5MjE1NTQ%3D\nCkUKGkNMSEgyZGpUbi1zQ0ZZVDBnZ29kOGRzR0tREidDT2lqdTRyUm4tc0NGWWRKWUFvZFg4TU8xdzE1OTc1Nzg1MDA5NDY%3D\nCjoKGkNLQzN3cjNWbi1zQ0ZRRy1nZ29kQXMwSW5REhxDSXV5NXBuR24tc0NGUXotT0FZZHB6a0h5UTE1\nCjkKGkNNXzZpWkRObi1zQ0ZZTHdnZ29kZ0JFRGlREhtDTlRWNElIS24tc0NGVXB3andvZHRoMENfZzQ%3D\nCjoKGkNMNk56dXZQbi1zQ0ZSU3NEUW9kUnRjSGtREhxDTGF0c05yTW4tc0NGUVBoV0FvZHY5Z0xNUS05\nCjkKGkNQVzJsTFRNbi1zQ0ZYNkh3Z0VkY25FTG53EhtDT21CajZmTW4tc0NGZE9CY0FvZHF0b0tsZzA%3D\n</code></pre>\n <p>\n  Starting from the surface, they seem to\n </p>\n <ol>\n  <li>\n   be URL encoded\n  </li>\n  <li>\n   be base64 encoded (although there are only 62 unique characters and\n   <code>\n    =\n   </code>\n   padding)\n  </li>\n  <li>\n   have some struct that contains two URL safe base64 strings\n   <a href=\"https://www.rfc-editor.org/rfc/rfc4648#section-5\" rel=\"nofollow noreferrer\">\n    https://www.rfc-editor.org/rfc/rfc4648#section-5\n   </a>\n   <ul>\n    <li>\n     the format is\n     <code>\n      \n<length byte>\n<length byte><first string>\\x12<length byte><second string>\n     </code>\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  I know what the second string points to, but I'm interested in the first one.\n </p>\n <p>\n  Everything that I've seen so far matches this pattern:\n </p>\n <pre><code>grp1, grp2, grp3 = re.match(b'^\\x08(.{7})\\x02\\x15(.{4})\\x1d(.{4})$', part1_decoded, re.DOTALL).groups()\n</code></pre>\n <p>\n  <code>\n   grp1\n  </code>\n  can have 128 unique characters, but\n  <code>\n   grp2\n  </code>\n  and\n  <code>\n   grp3\n  </code>\n  can have all 256. However, some characters are more common than others.\n </p>\n <ul>\n  <li>\n   In\n   <code>\n    grp1\n   </code>\n   the most common ones (by a large margin) are\n   <code>\n    9f\n   </code>\n   and\n   <code>\n    eb\n   </code>\n   . There's also a spike between\n   <code>\n    c9\n   </code>\n   and\n   <code>\n    d5\n   </code>\n   .\n   <code>\n    9f\n   </code>\n   and\n   <code>\n    eb\n   </code>\n   are usually on the right side, so it might be a sequential little-endian integer such as a database index or a timestamp.\n  </li>\n  <li>\n   In\n   <code>\n    grp2\n   </code>\n   , characters like\n   <code>\n    01\n   </code>\n   <code>\n    \n\n   </code>\n   <code>\n    \\r\n   </code>\n   <code>\n    82\n   </code>\n   <code>\n    c2\n   </code>\n   are common. I can't make anything out of it except that they could be separators.\n  </li>\n  <li>\n   <code>\n    grp3\n   </code>\n   looks otherwise random except characters from\n   <code>\n    00\n   </code>\n   to\n   <code>\n    0f\n   </code>\n   are ~8 times more common than others.\n  </li>\n </ul>\n <hr/>\n <p>\n  I'm looking for any clues or analysis methods to find out what groups 1, 2 and 3 are used for.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "207",
    "tags": [
        "binary-format"
    ],
    "user": "siikamiika",
    "time": "Oct 7, 2021 at 7:34",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n do you have the code which generates or parses them?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "siikamiika",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky This script does something with them, but I believe it doesn't parse them and only uses them to identify the events\n <a href=\"https://www.youtube.com/yts/jsbin/live_chat_polymer-vflyLUH5M/live_chat_polymer.js\" rel=\"nofollow noreferrer\">\n  youtube.com/yts/jsbin/live_chat_polymer-vflyLUH5M/â€¦\n </a>\n . At least\n <code>\n  this.data.id\n </code>\n is probably the ID here. The only code I know to parse the ID is my own.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The entire thing seems to be protobuf after doing the initial unwrapping with urldecode and base64 decode.\n  <code>\n   grp1\n  </code>\n  was a timestamp, but I'm not yet sure what the 32-bit floats are used for. Should be easier to go forward now that the format is known, though.\n </p>\n <p>\n  I found this tool helpful decoding the data:\n  <a href=\"https://github.com/omarroth/protodec\" rel=\"nofollow noreferrer\">\n   https://github.com/omarroth/protodec\n  </a>\n </p>\n <pre><code>> echo 'CkUKGkNNZmY1TkhObi1zQ0ZWT0h3Z0VkaExJQ0xnEidDSlB0bG9UTG4tc0NGWmhpaXdvZDFxOE5fdzE1OTc1NzY4NzU4Mzg%3D' | php -r 'echo urldecode(fgets(STDIN));' | ./protodec -bp | jq\n{\n  \"1:0:embedded\": {\n    \"1:0:base64\": {\n      \"1:0:varint\": 1597576876470215,\n      \"2:1:float32\": 7.14585257493996e-38,\n      \"3:2:float32\": 2.971713153332445e-11\n    },\n    \"2:1:string\": \"CJPtloTLn-sCFZhiiwod1q8N_w1597576875838\"\n  }\n}\n\n# the left part of the above string\n> echo 'CJPtloTLn-sCFZhiiwod1q8N_w' | ./protodec -bp | jq\n{\n  \"1:0:varint\": 1597576176842387,\n  \"2:1:float32\": 1.3422299960259732e-32,\n  \"3:2:float32\": -1.883341397915719e+38\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "siikamiika",
            "time": "Nov 7, 2020 at 3:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}