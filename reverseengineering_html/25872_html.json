{
    "title": "How to find the file address of AddressOfEntryPoint",
    "link": "https://reverseengineering.stackexchange.com/questions/25872/how-to-find-the-file-address-of-addressofentrypoint",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a binary file and in the optional header I have the address of the entry point\n  <code>\n   0x00011046\n  </code>\n  but when I put the file inside HEX editor this address doesn't exist, more than that\n  <code>\n   0x000097f0\n  </code>\n  .\n </p>\n <p>\n  I suppose that this is kind of RVA but I don't know how can I find the real address.\n  \n\n  <a href=\"https://i.sstatic.net/dJoez.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dJoez.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   EDIT:\n  </strong>\n  \n\n  I have the section headers:\n  \n\n  <a href=\"https://i.sstatic.net/oGnuZ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/oGnuZ.png\"/>\n  </a>\n </p>\n <p>\n  I am not sure but the\n  <code>\n   .textbss\n  </code>\n  is\n  <code>\n   0x10000\n  </code>\n  , I tried to do\n  <code>\n   0x11000 - 0x11046 = 0x1046\n  </code>\n  and search for this in the file but it doesn't look like the entry point.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "5k",
    "tags": [
        "binary-analysis",
        "pe",
        "entry-point"
    ],
    "user": "E235",
    "time": "Sep 13, 2020 at 9:19",
    "comments": [
        {
            "user": "josh",
            "text": "<html><body><span class=\"comment-copy\">\n Why has this question been downvoted? Even if the question has not been asked precisely, for me it was clear what the OP wanted to know. Upticked.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tom Charles Zhang",
            "text": "<html><body><span class=\"comment-copy\">\n Out of curiosity - what's the binary inspector program you are using? Looks handy.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In PE file,\n  <code>\n   AddressOfEntryPoint\n  </code>\n  is a relative address to the image base, so you will have\n  <code>\n   0x11046 - 0x10000 = 0x1046\n  </code>\n  value in Optional Header. For more information, see\n  <a href=\"https://www.aldeid.com/wiki/PE-Portable-executable\" rel=\"nofollow noreferrer\">\n   PE format\n  </a>\n  and search for \"AddressOfEntryPoint\".\n </p>\n <p>\n  The reason you see\n  <code>\n   0x00011046\n  </code>\n  being displayed as the entry point (in CFF Explorer I suppose) is that when the file is loaded into memory, this will be the EP address in a process virtual memory - not the offset within PE file itself. The same will hold if you load the file into IDA or radare2, for example - EP will be displayed at\n  <code>\n   0x00011046\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   Note:\n  </strong>\n  another quick way to find the place where EP value is stored, other than searching for\n  <code>\n   0x1046\n  </code>\n  in hex editor is just reading the\n  <em>\n   Offset\n  </em>\n  column value displayed - in this case it equals\n  <code>\n   0x120\n  </code>\n  .\n </p>\n <p>\n  In general, you would have to read the value at offset\n  <code>\n   0x3C\n  </code>\n  (\n  <code>\n   IMAGE_DOS_HEADER.e_lfanew\n  </code>\n  ) and add\n  <code>\n   0x28\n  </code>\n  to it (\n  <code>\n   AddressOfEntryPoint\n  </code>\n  offset relative to PE header).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "Sep 13, 2020 at 9:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From your question it is not quite clear what you want to achieve: I assume you need the address in memory where you can find the \"Address of Entry Point\", as well as the file offset where the code at \"Address of Entry Point\" is stored.\n </p>\n <ol>\n  <li>\n   Let us look at your screenshots for the file offset of \"Address of Entry Point\"\n  </li>\n </ol>\n <p>\n  In your screenshot you find in the \"Meaning\" column that the \"AddressOfEntryPoint\" is contained somewhere in the\n  <code>\n   .text\n  </code>\n  section.\n </p>\n <p>\n  In your screenshot of the section headers you find the start of the\n  <code>\n   .text\n  </code>\n  section at the \"Virtual Address\"\n  <code>\n   0x11000\n  </code>\n  . Likewise you find the start of the\n  <code>\n   .text\n  </code>\n  section in the file at the \"Raw Address\" of\n  <code>\n   0x400\n  </code>\n  . The difference is\n  <code>\n   0x11000 - 0x400 = 0x10C00\n  </code>\n  , meaning the hex value of the RVA is by\n  <code>\n   0x10C00\n  </code>\n  higher than the same position in the file.\n </p>\n <p>\n  Now you have to subtract the value of\n  <code>\n   0x10C00\n  </code>\n  from the \"AddressOfEntryPoint\" to find the corresponding file offset. This should in your case result in\n  <code>\n   0x11046 - 0x10C00 = 0x446\n  </code>\n  . This should be the file offset where to find the code residing at \"AddressOfEntryPoint\". The value of \"AddressOfEntryPoint\" itself (\n  <code>\n   0x11046\n  </code>\n  ) can be found at file offset (the \"Offset\" entry)\n  <code>\n   0x120\n  </code>\n  , as pointed out also by  @bart1e.\n </p>\n <ol start=\"2\">\n  <li>\n   RVA where to find e.g. in Ida the \"AddressOfEntryPoint\n  </li>\n </ol>\n <p>\n  Take the vaue of \"ImageBase\" and add to it the \"Address of entry point\" (as also pointed out by @bart1e), in your case:\n </p>\n <p>\n  <code>\n   0x00400000 + 0x00011046 = 0x411046\n  </code>\n  .\n </p>\n <p>\n  This address will e.g. Ida show you as \"start\" point after having loaded it. However if you are running the debugger, the situation changes as the \"ImageBase\" usually will be changed by the NT loader to some random number (called ASLR). You can find this randomized start address in several ways, e.g. by letting Ida run the binary and \"stop on process entry start\" (Debugger options..) and subtracting your \"Address of entry point\" from the start address shown by Ida.\n </p>\n <p>\n  <strong>\n   Remark:\n  </strong>\n  For investigation of a binary, it is often useful to avoid this ASLR. You can try to achieve this for instance in CFF Explorer by selecting in the \"Optional Header\" window the entry \"Dll Characteristics\" (a little down in the invisible part of your screenshot), click on \"Click here\", and then, in the opening dialog un-select the checkbox \"DLL can move\". The NT loader will now try to avoid ASLR and load the binary at the \"ImageStart\" address. However, in case of another module is to be loaded at tha same base address i.e. having an address collision, the NT loader will move it to somewhere else anyway.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "josh",
            "time": "Oct 13, 2020 at 13:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}