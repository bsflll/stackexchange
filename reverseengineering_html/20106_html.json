{
    "title": "VMProtect anti-debug method",
    "link": "https://reverseengineering.stackexchange.com/questions/20106/vmprotect-anti-debug-method",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently found a nice crackme which uses VMProtect 3.x as defense.\nAfter doing a little research online I found couple of API's VMProtect uses as an anti debug method.\n </p>\n <p>\n  I set software breakpoint on those functions but unfortunately I somehow don't hit them.\nI'm 100% sure the APIs are getting called during the the running of the program.\n </p>\n <p>\n  The APIs including (\n  <code>\n   CheckRemoteDebuggerPresent\n  </code>\n  ,\n  <code>\n   IsDebuggerPresent\n  </code>\n  , etc...).\n </p>\n <p>\n  If someone knows what is the reason to that or what evasion method VMProtect uses I would be more then happy if they could share it.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "5k",
    "tags": [
        "anti-debugging",
        "packers",
        "vmprotect"
    ],
    "user": "anony",
    "time": "Dec 12, 2018 at 14:09",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n It would be more useful if you can attach the executable, and specified exactly where you put the breakpoints.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n it's possible that VMProtect knows what the function prologues should look like and skips a few instructions before calling into the function.  You could try placing the breakpoint somewhere inside the function instead.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  VMProtect uses a few anti-debug techniques. Firstly, you aren't going to want to tackle them on your own because there is quite and exhaustive set of techniques to detect a debugger. Consider using an anti-anti-debug plugin (ScyllaHide)\n </p>\n <p>\n  One you are probably going to encounter that is difficult to work around is the rdtsc instruction.\n </p>\n <p>\n  rdtsc essentially allows the application to measure time that has elapsed in-between a series of instructions executing. The stepping behavior of a debugger will make this period of time large and thus trigger a detection that a debugger is present via some application logic. With heavy code obfuscation there is no way you can manually work around these. You will need to use find some automated approach (however, since rdtsc is not a privileged instruction getting around this can be a huge pain.)\n </p>\n <p>\n  The best approach here is probably write a custom Intel PIN tool to modify the CPU state as the instruction is used (see\n  <a href=\"https://github.com/jingpu/pintools/blob/master/source/tools/InstLib/time_warp.H\" rel=\"noreferrer\">\n   https://github.com/jingpu/pintools/blob/master/source/tools/InstLib/time_warp.H\n  </a>\n  ). There are other approaches too (including using a kernel level driver, but IIRC this approach can be very slow and difficult to get working.)\n </p>\n <p>\n  As far as overall the approach you take with VMProtect, the obfuscation is quite complex and if you have never devirtualized code before than you're going to want to try a simple VM first. Devirtualizing code and reverse engineering Virtual Machines, especially ones as obfuscated as VMProtect, can be a project that takes week.\n </p>\n <p>\n  Also VMProtect has multiple different VM \"archetypes\" per-se. There are some simpler VMs with heavier obfuscation in other areas and some very heavy-weight VMs or multiple layers of vitualization. So it is definitely not a project you want to approach without understanding practical applications of other code obfuscation techniques (control flow flattening, false predicates, and virtualization)\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Jeremy",
            "time": "Dec 11, 2018 at 22:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}