{
    "title": "Find DllMain using IDA Freeware",
    "link": "https://reverseengineering.stackexchange.com/questions/30187/find-dllmain-using-ida-freeware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to use the IDA Freeware Version 7.7 for finding the\n  <strong>\n   DllMain\n  </strong>\n  of a DLL file. The file is from the book Practical Malware Analysis. It is for Lab 05. Name of file is \"Lab05-01.dll\" and you can download that from\n  <a href=\"https://practicalmalwareanalysis.com/labs/\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  (use VM).\n </p>\n <p>\n  So as Practical Malware Analysis mentioned, when I load the DLL at IDA Freeware, then, the first line of instruction at the graph view should be the start of DllMain.\n </p>\n <p>\n  But when I load the DLL file at the IDA Freeware, the first line of graph view is NOT the\n  <code>\n   DllMain\n  </code>\n  . Because I checked from the solutions and my answer and book's answer were not the same.\n </p>\n <h2>\n  Ways that I've Tested\n </h2>\n <ol>\n  <li>\n   Looking at the first line of instruction at the graph view which the book described. (Explained above that didn't worked)\n  </li>\n  <li>\n   So I searched and found\n   <a href=\"https://stackoverflow.com/questions/26345426/donot-know-how-to-find-the-address-of-dllmain\">\n    THIS ARTICLE\n   </a>\n   .\nOne of the ways that was mentioned there was to go and find\n   <code>\n    DllMain\n   </code>\n   at the function windows. There was no function named\n   <code>\n    DllMain\n   </code>\n   (As you see in the picture)\n   <img alt=\"A Picture of Functions\" src=\"https://i.sstatic.net/7mvqJ.png\"/>\n   The\n   <code>\n    DllMain\n   </code>\n   does NOT exist because if it did exist, then it would be above\n   <code>\n    EnumProcessModules\n   </code>\n   and below\n   <code>\n    DllEntryPoint\n   </code>\n   . (Note that I have sorted by name)\n  </li>\n  <li>\n   So next thing I did was to look at the answer and see what is the name of the function which starts at the exact same address which the book says DllMain starts.\nThe book says the answer is\n   <strong>\n    1000D02E\n   </strong>\n   . I look at the function which had started from this location and that function had this name :\n   <strong>\n    sub_1000D02E\n   </strong>\n   , not\n   <code>\n    DllMain\n   </code>\n   .\n   <img alt=\"The Function Highlighted is the DllMain\" src=\"https://i.sstatic.net/W1mmd.png\"/>\n   The function highlighted is the DllMain (I know this because I have looked at the solutions and as you see the function's name is not\n   <code>\n    DllMain\n   </code>\n   and I was unable to find that by myself)\n  </li>\n </ol>\n <hr/>\n <p>\n  <strong>\n   What should I do to find the DllMain?\n  </strong>\n </p>\n <p>\n  Thank you in advance.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "856",
    "tags": [
        "ida",
        "dll"
    ],
    "user": "Hayeri",
    "time": "Mar 30, 2022 at 9:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hmm, so here's the rub. I installed IDA Freeware 7.7 in my Linux VM and tried in parallel in my named license IDA Pro 7.7.\n </p>\n <p>\n  Turns out this seems to be a limitation of IDA Freeware, in all likelihood a conscious one. In particular I can see with the freeware version that\n  <code>\n   DllEntryPoint\n  </code>\n  was not deemed a library function (cyan color), but with the commercial license it was.\n </p>\n <p>\n  Freeware:\n  <a href=\"https://i.sstatic.net/3OCRU.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Freeware\" src=\"https://i.sstatic.net/3OCRU.png\"/>\n  </a>\n </p>\n <p>\n  Commercial:\n  <a href=\"https://i.sstatic.net/O47Lp.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Commercial license\" src=\"https://i.sstatic.net/O47Lp.png\"/>\n  </a>\n </p>\n <p>\n  It appears that based on\n  <code>\n   autoload.cfg\n  </code>\n  my commercial IDA will load FLIRT signatures\n  <code>\n   vc32rtf\n  </code>\n  (Microsoft VisualC 2-14/net runtime), which the freeware version doesn't do on its own.\n </p>\n <p>\n  If you do that manually through\n  <kbd>\n   File\n  </kbd>\n  ->\n  <kbd>\n   Load file\n  </kbd>\n  ->\n  <kbd>\n   FLIRT signature file\n  </kbd>\n  your\n  <code>\n   DllEntryPoint\n  </code>\n  function should get collapsed and its color should indicate it's a\n  <em>\n   library function\n  </em>\n  (cyan). You can toggle collapsed/expanded mode with\n  <kbd>\n   Ctrl\n  </kbd>\n  +\n  <kbd>\n   Num+\n  </kbd>\n  by default.\n </p>\n <p>\n  Now, if you expand the function you will notice it has been recognized as a library function, but so have some of the callees called\n  <em>\n   from\n  </em>\n  this library function. What's more, if you use\n  <kbd>\n   View\n  </kbd>\n  ->\n  <kbd>\n   Open subviews\n  </kbd>\n  ->\n  <kbd>\n   Function calls\n  </kbd>\n  you can see the overview of calls\n  <em>\n   from\n  </em>\n  <code>\n   DllEntryPoint\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/rBZrG.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Function calls subview\" src=\"https://i.sstatic.net/rBZrG.png\"/>\n  </a>\n </p>\n <p>\n  As you can now see, there are only two called \"entities\" which aren't themselves library functions (\n  <code>\n   call eax ; dword_10092E58\n  </code>\n  and\n  <code>\n   call sub_1000D02E\n  </code>\n  ). And after a cursory look under which conditions the function pointer stored in\n  <code>\n   dword_10092E58\n  </code>\n  gets called, we can surmise that\n  <code>\n   sub_1000D02E\n  </code>\n  must be our\n  <code>\n   DllMain\n  </code>\n  .\n </p>\n <p>\n  Knowing this, we can now jump to it and manually rename it to\n  <code>\n   DllMain\n  </code>\n  . Once done it should show up as:\n </p>\n <pre><code>.text:1000D02E ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)\n.text:1000D02E DllMain         proc near               ; CODE XREF: DllEntryPoint+4B↓p\n.text:1000D02E                                         ; DATA XREF: sub_100110FF+2D↓o\n</code></pre>\n <p>\n  ... in the \"IDA View-A\".\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Mar 28, 2022 at 11:38",
            "is_accepted": true,
            "comments": []
        }
    ]
}