{
    "title": "How can I find my variables in the running process?",
    "link": "https://reverseengineering.stackexchange.com/questions/20648/how-can-i-find-my-variables-in-the-running-process",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new with reversing and I did the following experiment just intent to help my understanding. I created a very simple 64-bit c++ program.\n </p>\n <pre><code>#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n    string s1{ \"test\" };\n    cout << s1 << endl;\n    cout << &s1 << endl;\n\n    cout << \"============\" << endl;\n\n    int i{ 10 };\n    cout << i << endl;\n    cout << &i << endl;\n\n    getchar();\n}\n</code></pre>\n <p>\n  I then compiled it and started it. The output is:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/OOJ8y.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/OOJ8y.png\"/>\n  </a>\n </p>\n <p>\n  Now I know the addresses of these two variables and I want to check it in x64dbg. In x64dbg, I attached to the running process and it seems it's not the variables at the aforementioned addresses:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/xRDqY.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/xRDqY.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "c++",
        "memory",
        "local-variables"
    ],
    "user": "Just a learner",
    "time": "Feb 18, 2019 at 18:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Your\n   <code>\n    std::string\n   </code>\n   is not a plain ascii string it is a structure (actually a class) so you cannot take the address and find the string.\n  </li>\n </ol>\n <p>\n  In your specific case since your string test's length is less than the threshold you are lucky you can see it in your screenshot look for\n  <strong>\n   74 65 73 74 as ascii\n  </strong>\n  you will notice it is\n  <strong>\n   \"test\"\n  </strong>\n </p>\n <ol start=\"2\">\n  <li>\n   It appears your\n   <code>\n    int i\n   </code>\n   is visible\ntry looking at\n   <code>\n    0xa == 0n10\n   </code>\n  </li>\n </ol>\n <p>\n  <em>\n   Edit\n  </em>\n </p>\n <p>\n  Your source slightly modified to show the results of above statements\n </p>\n <pre><code>#include <iostream>\n#include <string>\nusing namespace std;\nint main(void)\n{\n    //small string will be embedded inside std::string class \n    // you can see 74657374 (hex for \"test\")\n    string s1{ \"test\" };\n    cout << s1 << endl;\n    cout << &s1 << endl;\n    printf(\"%llx\n\", *(__int64 *)(&s1) );\n    printf(\"%p\n\" , s1.c_str());\n    printf(\"%s\n\" , s1.c_str());\n    \n    cout << \"\n=========================================================================\n\" ;\n    \n    // big string a pointer will be present to the c_str member\n    // you cannot see the string unless you dereference the pointer for c_str() member\n    \n    string s2 { \"this is a very very very very very very biggy biggy biggy stringyyyyyy\" };\n    cout << s2 << endl;\n    cout << &s2 << endl;\n    printf(\"%llx\n\", *(__int64 *)&s2 );\n    printf(\"%p\n\" , s2.c_str());\n    printf(\"%s\n\" , s2.c_str());\n    \n    \n    return getchar();\n}\n</code></pre>\n <p>\n  Results\n </p>\n <pre><code>>ogrish.exe\ntest\n001AF7C8\neafc0074736574  <<<< see the hex embedded\n001AF7C8   << both &std::string and std::strin.c_str() are same\ntest  << c_str()  \n\n=========================================================================\nthis is a very very very very very very biggy biggy biggy stringyyyyyy\n001AF7E0   &std::string \n1af7f000265cf0   << address of std::string and c_str() are different\n00265CF0   & string->c_str()\nthis is a very very very very very very biggy biggy biggy stringyyyyyy  << c_str()\n</code></pre>\n <p>\n  and btw keep in mind if you attach to this console process all the code has already run and everything that is on stack can be  out of scope and contain bogus values you need to step through for checking things on debugger\nnot execute and attach.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Viktor",
            "time": "Jul 4, 2022 at 19:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Does this type of 'address-as-variable' depend on compiler? I have seen this with MSVC compiled binary, not with G++.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">not sure what you are asking  x64dbg is windows specific so i gave op a normal vc compiled std::string details sizeof(std::string) == 0x18 outofwhich 0x10 is a char buffer  this is iirc called short string optimisation and msvc can differ from gcc and gcc can differ from clang</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@Biswapriyo here is an article that discusses the different implementations of std::string wrt msvc,gcc,clang <a href=\"https://shaharmike.com/cpp/std-string/\" rel=\"nofollow noreferrer\">shaharmike.com/cpp/std-string</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Answer of blabb is correct, I will just add some more information.\n </p>\n <p>\n  You are looking at wrong window of x64 for searching values. As you can see in your picture content of this window (CPU) is automaticly trying to disassemble data in memory as code. If you want to see values it is better to look up adresses in dump window (bottom left) or in stack window (bottom right).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rok Tavƒçar",
            "time": "Feb 20, 2019 at 8:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}