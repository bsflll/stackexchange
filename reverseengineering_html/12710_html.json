{
    "title": "How the asm code can be converted to C Language?",
    "link": "https://reverseengineering.stackexchange.com/questions/12710/how-the-asm-code-can-be-converted-to-c-language",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just tried to convert the asm code shown belown, but I failed to get the same result\n </p>\n <pre><code>00ACDE11  /MOV AL,BYTE PTR DS:[EBX]          \n00ACDE13  |MOV EDX,EAX                       \n00ACDE15  |ADD DL,0CF                        \n00ACDE18  |SUB DL,9                          \n00ACDE1B  |JB SHORT 00ACDE46            ;Especially this     \n00ACDE1D  |ADD DL,0F9                        \n00ACDE20  |SUB DL,0E                         \n00ACDE23  |JB SHORT 00ACDE46            ;Especially this     \n00ACDE25  |DEC EDX                           \n00ACDE26  |SUB DL,0B                         \n00ACDE29  |JB SHORT 00ACDE46            ;Especially this     \n00ACDE2B  |XOR EAX,EAX                       \n00ACDE2D  |MOV AL,BYTE PTR SS:[EBP-310]      \n00ACDE33  |DEC EAX                           \n00ACDE34  |CALL 009E2D24                     \n00ACDE39  |MOV EDI,EAX                       \n00ACDE3B  |MOV AL,BYTE PTR SS:[EDI+EBP-30F]  \n00ACDE42  |MOV BYTE PTR DS:[EBX],AL          \n00ACDE44  |JMP SHORT 00ACDE48                \n00ACDE46  |MOV BYTE PTR DS:[EBX],AL          \n00ACDE48  |INC EBX                           \n00ACDE49  |DEC ESI                           \n00ACDE4A  \\JNZ SHORT 00ACDE11                \n</code></pre>\n <p>\n  I already does some research effort on the internet and found that carry flag is set when an overflow is caused.\nThis is what I already tried:\n </p>\n <pre><code>for(int i=0; i < n ;i++)\n{\n    int c = buffer[i] + 0xC6;\n\n    if(c > 0xFF) // <---- this is not producing the same result\n    {\n        c = ((unsigned char) c) + 0xEB;\n\n        if(c > 0xFF) // <---- this is not producing the same result\n        {\n            c = ((unsigned char) c) - 0xC;\n\n            if(c > 0xFF) // <---- this is not producing the same result\n            {\n                //...\n                //func_009E2D24(...);\n\n            }\n        }\n    }\n\n    //...\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "155",
    "tags": [
        "disassembly"
    ],
    "user": "Etor Madiv",
    "time": "Apr 28, 2017 at 12:49",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n C has no concept of overflow (unless you call \"this is undefined behaviour\" a concept), so you can't really translate this to C; you'll have to understand the assembler.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n As checking overflow is \"after the fact\" and not accessible in C, you can invert it by checking for\n <code>\n  < 14\n </code>\n <i>\n  before\n </i>\n doing the subtraction.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is what I wanted so far, this worked fine for me:\n </p>\n <pre><code>for(int i=0; i < n ;i++)\n{\n    int c = buffer[i] + 0xCF;\n    c = (unsigned char)c;\n    c -= 9;\n    if (c > 0)\n    {\n        c += 0xF9;\n        c = (unsigned char)c;\n        c -= 0xE;\n        if (c > 0)\n        {\n            c = (unsigned char)c;\n            c -= 0xC;\n            if (c > 0)\n            {\n                //...\n                //func_009E2D24(...);\n            }\n        }\n\n    }\n    //...\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Etor Madiv",
            "time": "May 22, 2016 at 14:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}