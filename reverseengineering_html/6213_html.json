{
    "title": "Associating Symbol Names with .PLT Entries",
    "link": "https://reverseengineering.stackexchange.com/questions/6213/associating-symbol-names-with-plt-entries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Doing some messing around with ELF (of both the x86 and ARM varieties).\n </p>\n <p>\n  Associating symbol names with entries in the\n  <code>\n   .got\n  </code>\n  section is straightforward.  Find the\n  <code>\n   .got\n  </code>\n  section, find the relocation section\n  <code>\n   .rel.plt\n  </code>\n  /\n  <code>\n   .rela.plt\n  </code>\n  whose\n  <code>\n   .sh_info\n  </code>\n  contains the index of the\n  <code>\n   .got\n  </code>\n  , and find the symbol section\n  <code>\n   .dynsym\n  </code>\n  that contains the symbol names.\n </p>\n <p>\n  Everything lines up nicely between these sections, and I can accurately assign symbol names to entries in the\n  <code>\n   .got\n  </code>\n  .\n </p>\n <p>\n  However, I also want names for the stubs in the\n  <code>\n   .plt\n  </code>\n  section.  A rough percentage of the time, symbols for the\n  <code>\n   .plt\n  </code>\n  can be inferred based on the ordering of\n  <code>\n   .got\n  </code>\n  symbols, and an offset from the base of the\n  <code>\n   .plt\n  </code>\n  section.  For whatever reason, occasionally this is not the case.\n </p>\n <p>\n  Binutils\n  <code>\n   objdump\n  </code>\n  can accurately generate them for x86, and IDA can accurately generate them for x86 and ARM (both without\n  <code>\n   -g\n  </code>\n  debugging symbols).  How are these generated?\n </p>\n <p>\n  In the case of IDA, I could reasonably assume there's some advanced logic going on based on interpretation of the instructions in the\n  <code>\n   .plt\n  </code>\n  , but I know that must not be the case for\n  <code>\n   objdump\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "elf",
        "got",
        "plt"
    ],
    "user": "Zach Riggle",
    "time": "Oct 14, 2014 at 3:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  See\n  <a href=\"http://www.sourceware.org/ml/binutils/2004-04/msg00469.html\" rel=\"nofollow\">\n   this thread\n  </a>\n  . Basically, they rely on the fact that the order of PLT relocations matches the order of the stubs in\n  <code>\n   .plt\n  </code>\n  section, and the stubs are all of the same size.\n </p>\n <p>\n  On some platforms you can also use\n  <code>\n   st_value\n  </code>\n  of the symbol entry in the dynamic symbol table.\n </p>\n <p>\n  IDA indeed usually does not rely on the order of symbols/relocations but checks the actual instructions in the stub.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Sep 10, 2014 at 5:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}