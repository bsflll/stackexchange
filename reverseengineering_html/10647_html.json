{
    "title": "Reverse Engineering a Binary to reset a BIOS password",
    "link": "https://reverseengineering.stackexchange.com/questions/10647/reverse-engineering-a-binary-to-reset-a-bios-password",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a laptop that I recently lost the BIOS Admin password for. I contacted the manufacturer and, after giving them some information about my BIOS (version, uuid), they sent me a file,\n  <code>\n   smc.bin\n  </code>\n  to put on a USB stick and boot in order to reset the BIOS password.\n </p>\n <p>\n  I'm interested in how this works and what the binary file is. I'm skilled with linux, but don't know much about reverse-engineering. What tools can I use to examine this binary? What's a introductory thought-process to determine what a binary file like this is?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "binary",
        "bios"
    ],
    "user": "Jack",
    "time": "Jan 7, 2020 at 15:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As a tool I would recommend\n  <a href=\"https://github.com/radare/radare2\" rel=\"noreferrer\">\n   radare2\n  </a>\n  for this task.\n </p>\n <p>\n  And if you never done something like this before\n  <a href=\"https://sites.google.com/site/pinczakko/pinczakko-s-guide-to-award-bios-reverse-engineering\" rel=\"noreferrer\">\n   this\n  </a>\n  is probably the best tutorial to get you started with.\n </p>\n <p>\n  Just be in mind its not gonna be a quick and dirty job, might take you a while.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "GelosSnake",
            "time": "Aug 18, 2015 at 20:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anton Kochkov",
                    "text": "<span class=\"comment-copy\">That tutorial is for the legacy BIOSes. Modern PC/Laptops firmware usually UEFI-based.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What vendor do you have? If it is UEFI-compatible firmware, you can use\n  <a href=\"https://github.com/LongSoft/UEFITool\" rel=\"nofollow\">\n   UEFITool\n  </a>\n  to unpack it.\nAnd use the\n  <a href=\"https://github.com/radare/radare2\" rel=\"nofollow\">\n   radare2\n  </a>\n  tool to disassemble the code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Anton Kochkov",
            "time": "Aug 26, 2015 at 13:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Without actually knowing more about the system (system vendor), I would suggest to use\n  <code>\n   binwalk\n  </code>\n  to get the basic file layout. Then follow what other have done:\n </p>\n <ul>\n  <li>\n   <a href=\"https://www.reddit.com/r/ReverseEngineering/comments/2a6uyk/reverse_engineering_bios_firmware/\" rel=\"nofollow noreferrer\">\n    Reverse Engineering Bios Firmware\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.richud.com/wiki/Extract_Samsung_BIOS_WPH\" rel=\"nofollow noreferrer\">\n    Extract Samsung BIOS WPH\n   </a>\n  </li>\n </ul>\n <p>\n  You may want to use\n  <a href=\"https://bitbucket.org/haypo/hachoir/wiki/hachoir-subfile\" rel=\"nofollow noreferrer\">\n   hachoir / hachoir-subfile\n  </a>\n  , see for example:\n </p>\n <ul>\n  <li>\n   <a href=\"https://reverseengineering.stackexchange.com/a/9357/3041\">\n    https://reverseengineering.stackexchange.com/a/9357/3041\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}