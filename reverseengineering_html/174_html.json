{
    "title": "Are hardware dongles able to protect your software?",
    "link": "https://reverseengineering.stackexchange.com/questions/174/are-hardware-dongles-able-to-protect-your-software",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Various software companies distribute their software with hardware security, usually a dongle which must be mounted in order for the software to operate.\n </p>\n <p>\n  I don't have experience with them, but I wonder, do they really work?\n </p>\n <p>\n  What is it that the dongle actually does?  I think that the only way to enforce security using this method, and prevent emulation of the hardware, the hardware has to perform some important function of the software, perhaps implement some algorithm, etc.\n </p>\n</div>\n</body></html>",
    "votes": "16",
    "answers": 3,
    "views": "9k",
    "tags": [
        "hardware",
        "security",
        "dongle"
    ],
    "user": "Mellowcandle",
    "time": "Nov 22, 2018 at 8:56",
    "comments": [
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<html><body><span class=\"comment-copy\">\n Please edit your question's title to match the question's body. My\n <a href=\"http://reverseengineering.stackexchange.com/review/suggested-edits/118\">\n  proposal\n </a>\n was rejected. Your question is about copy-protection dongles, not about, say, smartcard or HSM. Those dongles are\n <i>\n  always\n </i>\n about copy protection: even when they're hiding the algorithm, the point is for someone not to be able to duplicate the algorithm. That's a very different problem from, say, hiding cryptographic keys.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<html><body><span class=\"comment-copy\">\n I removed the\n <code>\n  copyprotection\n </code>\n tag; it should be spelled\n <code>\n  copy-protection\n </code>\n , but the system won't let me create that tag until\n <code>\n  copyprotection\n </code>\n has disappeared (which will happen after about a day once it's been removed from all questions).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n I find this question extremely broad at the moment and am voting to close.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Clearly Peter has addressed the main points of proper implementation. Given that I have - without publishing the results - \"cracked\" two different dongle systems in the past, I'd like to share my insights as well. user276 already hints, in part, at what the problem is.\n </p>\n <p>\n  Many software vendors think that they purchase some kind of security for their licensing model when licensing a dongle system. They couldn't be further from the truth. All they do is to get the tools that allow them to implement a relatively secure system (within the boundaries pointed out in Peters answer).\n </p>\n <p>\n  What is the problem with copy protection in general? If a software uses mathematically sound encryption for its licensing scheme this has no bearing on the security of the copy protection as such. Why? Well, you end up in a catch 22 situation. You don't trust the user (because the user could copy the software), so you encrypt stuff or use encryption somehow in your copy protection scheme. Alas, you need to have your private key in the product to use the encryption, which completely contradicts the notion of mistrusting the user. Dongles try to put the private key (and/or algorithm and/or other ingredients) into hardware such that the user has no access in the first place.\n </p>\n <p>\n  However, since many vendors are under the impression that they purchase security out of the box, they don't put effort into the correct implementation. Which brings me to the first example. It's a CAD program my mother was using. Out of the knowledge that dongles connecting to LPT tend to fail more often than their more recent USB counterparts, I set out to \"work around\" this one. That was around 2005.\n </p>\n <p>\n  It didn't take me too long. In fact I used a simple DLL placement attack (the name under which the scenario later became known) to inject my code. And that code wasn't all too elaborate. Only one particular function returned the value the dongle would usually read out (serial number), and that was it. The rest of the functions I would pass through to the original DLL which the dongle vendor requires to be installed along with the driver.\n </p>\n <p>\n  The other dongle was a little before that. The problem here was that I was working for a subcontractor and we had limited access only to the software for which we were supposed to develop. It truly was a matter of bureaucracy between the company that licensed the software and the software vendor, but it caused major troubles for us. In this case it was a little more challenging to work around the dongle. First of all a driver had to be written to sniff the IRPs from and to the device. Then the algorithm used for encryption had to be found out. Luckily not all was done in hardware which provided the loop hole for us. In the end we had a little driver that would pose as the dongle. Its functionality was extended so far as to read out a real dongle, save the data (actually pass it to a user mode program saving it) and then load it back to pose as this dongle.\n </p>\n <p>\n  <strong>\n   Conclusion:\n  </strong>\n  dongles, no matter which kind, if they\n  <em>\n   implement\n  </em>\n  core functionality of the program to which they belong will be hard to crack. For everything else it mostly depends on the determination and willingness to put in time of the person(s) that set out to work around the dongle.\nAs such I would say that dongles pose a considerable hindrance - if implemented correctly - but in cases of negligence on part of the software vendor seeking to protect his creation also mere snake oil.\n </p>\n <p>\n  Take heed from the very last paragraph in Peters answer. But I would like to add one more thought. Software that is truly worth the effort of being protected, because it is unique in a sense, shouldn't be protected on the basis of customer harassment (== most copy protection schemes). Instead consider the example of IDA Pro, which can certainly be considered pretty unique software. They watermark the software to be able to track down the person that leaked a particular bundle. Of course, as we saw with the ESET leak, this doesn't help always, but it creates\n  <a href=\"https://www.hex-rays.com/products/ida/support/hallofshame/index.shtml\">\n   deterrence\n  </a>\n  . It'll be less likely that a cracker group gets their hands on a copy, for example.\n </p>\n</div>\n</body></html>",
            "votes": "15",
            "user": "0xC0000022L",
            "time": "Mar 25, 2013 at 1:11",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Problem description\n  </strong>\n </p>\n <p>\n  Let's make a couple of assumptions. Software is divided into functional components. Licenses are for functional components within that software package. Licenses can be based on time, on version or on a number of uses, i.e you may use the functionality until a set point in time, you may the functionality of the version you purchased or some minor derivative of it or you may use it a number of times. There are two main scenarios you have to solve, where an attacker doesn't have access to a license and where he does.\n </p>\n <p>\n  <strong>\n   Attacker with no license\n  </strong>\n </p>\n <p>\n  The first scenario is where your attacker does not have access to a valid license to your product. This problem is easy to solve. Simply assign a separate encryption key to each of the functional licenseable parts of your software. Encrypt each functional part with the encryption key designed for that part. Now you can distribute your software without worry of someone being able to decrypt functions they have not licensed since you never send them the key.\n </p>\n <p>\n  <strong>\n   Attacker with access to license\n  </strong>\n </p>\n <p>\n  The second scenario, which is much harder to solve, is when your attacker has a valid license to your software but he either wants to redistribute the functions he has licensed or to extend his license time wise.\n </p>\n <p>\n  Now you need a reliable time source, this can be solved by:\n </p>\n <ul>\n  <li>\n   embedding a public key into a dongle and having the dongle issue a random challenge which must be forwarded to a time server. The time server responds by signing the current time and the challenge and returning it to the client which then sends it to the key and the key then updates its internal clock and unlocks.\n  </li>\n  <li>\n   updating the internal clock based on the time it has been plugged into the computer. The USB port supplies power to your dongle all the time while its plugged in.\n  </li>\n  <li>\n   updating the internal clock based on timestamps sent from drivers installed on the machine its attached to. Only allow timestamps forward in time. Only allow movement backwards in time if the time source is a remote trusted time server supplying a signed timestamp.\n  </li>\n </ul>\n <p>\n  If your license is based on versions you actually have an attacked who does not have access to a license because your key derivation function for the functional unit takes both the identifier of the functional unit and the version of it as input.\n </p>\n <p>\n  <strong>\n   Key distribution\n  </strong>\n </p>\n <p>\n  So once you have separate keys for each functional unit your licenses basically becomes a matter of distributing symmetric keys so that they can be sent to the dongle. This is usually done by embedding a secret symmetric key in the dongle, encrypting the license decryption keys with the shared secret key and then signing the encrypted key update files. The signed update files are then passed to the dongle which validates the signature on the update, decrypts the new keys with the shared symmetric key and stores them for later use.\n </p>\n <p>\n  <strong>\n   Key storage\n  </strong>\n </p>\n <p>\n  All dongles must have access to secure storage in order to store license decryption keys, expiration timestamps and so on. In general this is not implemented on external flash memory or EEPROM. If it is it must be encrypted with a key internal to the ASIC or FPGA and signed such that it can not be changed.\n </p>\n <p>\n  <strong>\n   Plain text hole\n  </strong>\n </p>\n <p>\n  Once the user has a license to your functional component, even if he can't extract your secret key, he can use your dongle to decrypt that functional component. This leads to the issue that he may extract all your plain text and replace the decryption call with a direct call to the extracted plain text. Some dongles cover this issue by embedding a processor into the dongle. The functional component is then sent encrypted over to the dongle which decrypts the component and executes it internally. This means that the dongle essentially becomes a black box and the functional components sent to the dongle needs to be probed individually to discover their properties.\n </p>\n <p>\n  <strong>\n   Oracles\n  </strong>\n </p>\n <p>\n  A lot of dongles are encryption and decryption oracles which leads to potential issues with\n  <a href=\"http://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">\n   Chosen-ciphertext attacks\n  </a>\n  , e.g the recent\n  <a href=\"http://en.wikipedia.org/wiki/Padding_oracle_attack\">\n   padding oracle attacks\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Side channel attacks\n  </strong>\n </p>\n <p>\n  Besides the oracle issues you also have a lot of concerns with all of the so far well known\n  <a href=\"http://en.wikipedia.org/wiki/Side_channel_attack\">\n   side channel attacks\n  </a>\n  . You also need to be concerned with any potential but undiscovered side channel.\n </p>\n <p>\n  <strong>\n   Decapsulation\n  </strong>\n </p>\n <p>\n  Be aware that there are a number of companies in the world who specialize in picking apart and auditing secure chips. Some of the most well known companies are probably Chris Tarnovsky of\n  <a href=\"http://www.flylogic.net/\">\n   flylogic\n  </a>\n  , now part of IOActive and\n  <a href=\"http://www.chipworks.com/\">\n   chipworks\n  </a>\n  . This sort of attack is expensive but may be a real threat depending on the value of your target. It would surprise me if but a few, possibly none of, dongles today are able to withstand this sort of high budget attacker.\n </p>\n <p>\n  <strong>\n   Do they work\n  </strong>\n </p>\n <p>\n  Given a dongle which is based on strong encryption, isn't time based since you can not expire encryption keys based on time nor is time an absolute, free of any side channel attacks and executes the code on the chip, yes it will make discovering the underlying code equivalent to probing a black box. Most of the breaks that happen with these dongles are based on implementation weaknesses by the licensees of the hardware licensing system due to the implementer being unfamiliar with reverse engineering and computer security in general.\n </p>\n <p>\n  Also, do realize that even software where a majority of the logic is implemented on an internet facing server has been broken simply by probing the black box and inferring server side code based on client code expectations. Always prepare for your application to be broken and develop a plan for how to deal with it when it happens.\n </p>\n</div>\n</body></html>",
            "votes": "15",
            "user": "Peter Andersson",
            "time": "Mar 23, 2013 at 11:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As Peter has indicated, looking at how the dongle is used for security is the starting point to identify the attack vectors. In most cases, the software developers implementing the dongle security is the weakest point.\n </p>\n <p>\n  In the past when I have tested software with dongles, I have used free tools like ProcessMonitor and RegShot to identify simple vulnerabilities to defeat bad implementations of dongle security.\n </p>\n <p>\n  I have seen software that on startup checks for the presence of dongle and then proceeds with its operation without using the dongle until its restarted. In these cases, patching the application with OllyDbg is not that difficult to tell the app to run with full functionality as long as the dongle is NOT plugged in to the system.\n </p>\n <p>\n  I have also seen software that allows a user to click on a button in the software so that the user doesn't have to have the dongle inserted. The software claimed that is an extra functionality like \"Remember Me\" option. RegShot and ProcessMonitor showed me that a file is written with some information and as long as the file is present in the expected folder, I can run the software on multiple systems without a dongle.\n </p>\n <p>\n  Just because someone uses AES or Hardware Dongles or any XYZ doesn't mean they are secure. All that maters is whether they are implementing those security measure in the right manner assuming that there are now known (or 0-day vulnerabilities) in the security measure.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "rev",
            "time": "Mar 24, 2013 at 13:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}