{
    "title": "Determining endianness of PE files (Windows on ARM?)",
    "link": "https://reverseengineering.stackexchange.com/questions/17922/determining-endianness-of-pe-files-windows-on-arm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For ELF files, there is a field near the start of the ELF header that indicates the endianness of the file:\n  <a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format#File_layout\" rel=\"nofollow noreferrer\">\n   e_ident[EI_DATA]\n  </a>\n  .  If an application wants to extract data from the header of a given ELF binary, this field can be used to know whether\n  <a href=\"http://man7.org/linux/man-pages/man3/endian.3.html\" rel=\"nofollow noreferrer\">\n   endianness adjustments\n  </a>\n  are needed for extracted integer values.\n </p>\n <p>\n  Is there an equivalent process for determining the endianness of a given PE file, or is it safe to assume that all PE files will use little endianness for stored integer values?\n </p>\n <p>\n  The majority of PE files encountered will likely be compiled for x86 or x86_64 (and, thus, will use little endianness), but the question arises for PE files built for Windows on ARM / ARM64, since many ARM processors have big endian and little endian modes of operation.  Also,\n  <a href=\"https://msdn.microsoft.com/en-us/library/ms809762.aspx\" rel=\"nofollow noreferrer\">\n   this article\n  </a>\n  implies that Windows supports/supported running on other architectures like MIPS as well, which may have supported big endianness also.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "arm",
        "pe",
        "file-format"
    ],
    "user": "recvfrom",
    "time": "Aug 3, 2024 at 17:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Windows platforms have a fixed endianness and do not support running different endianness files. The file format itself uses always little-endian fields.\n </p>\n <p>\n  AFAIK the only Windows platform supporting big-endian was the Xbox 360 (aka Xenon), which can be identified by the machine value\n  <code>\n   0x01F2\n  </code>\n  (not publicly documented but probably defined as\n  <code>\n   IMAGE_FILE_MACHINE_PPCBE\n  </code>\n  in source headers). Such files use little-endian headers but contain big-endian instructions and data.\n </p>\n <p>\n  All other Windows platforms (even earlier MIPS and PowerPC NT versions) only supported little-endian configurations.\n </p>\n <p>\n  In addition, the Windows on ARM aka Windows RT platform (ARMv7,\n  <code>\n   IMAGE_FILE_MACHINE_ARMNT=0x01c4\n  </code>\n  ) only officially supports Thumb mode instructions. (earlier Windows CE releases supported classic ARM mode too).\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Apr 7, 2018 at 9:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "recvfrom",
                    "text": "<span class=\"comment-copy\">After posting I also found <a href=\"https://msdn.microsoft.com/en-us/library/dn736986.aspx\" rel=\"nofollow noreferrer\">this</a>:   Windows on ARM executes in little-endian mode. Both the Visual C++ compiler and the Windows runtime expect little-endian data at all times. Although the SETEND instruction in the ARM instruction set architecture (ISA) allows even user-mode code to change the current endianness, doing so is discouraged because it's dangerous for an application. If an exception is generated in big-endian mode, the behavior is unpredictable and may lead to an application fault in user mode, or a bugcheck in kernel mode.</span>",
                    "time": null
                },
                {
                    "user": "Simon Kissane",
                    "text": "<span class=\"comment-copy\">About <code>IMAGE_FILE_MACHINE_PPCBE</code>, here's the code of a Microsoft open source project which says it is actually called <code>IMAGE_FILE_MACHINE_POWERPCBE</code> – <a href=\"https://github.com/microsoft/microsoft-pdb/blob/master/cvdump/dumppdb.cpp#L19\" rel=\"nofollow noreferrer\">github.com/microsoft/microsoft-pdb/blob/master/cvdump/…</a></span>",
                    "time": null
                }
            ]
        }
    ]
}