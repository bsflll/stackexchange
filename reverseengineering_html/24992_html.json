{
    "title": "What is the difference between mapped and private memory segments in xdbg? and what is a reserved segment?",
    "link": "https://reverseengineering.stackexchange.com/questions/24992/what-is-the-difference-between-mapped-and-private-memory-segments-in-xdbg-and-w",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So in xdbg in the memory map, i can see that some segments are mapped and some are private, at first i thought maybe mapped means it has a corresponding file on disk and its the mapped version of that, but there are so many mapped segments which don't have a corresponding file, some of which are reserved\n </p>\n <p>\n  so i have two questions:\n </p>\n <ol>\n  <li>\n   <p>\n    What is the difference between mapped and private segments?\n   </p>\n  </li>\n  <li>\n   <p>\n    What are these (reserved) sections? what does reserved mean?\n   </p>\n   <p>\n    <a href=\"https://i.sstatic.net/W8ae9.jpg\" rel=\"nofollow noreferrer\">\n     <img alt=\"enter image description here\" src=\"https://i.sstatic.net/W8ae9.jpg\"/>\n    </a>\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "925",
    "tags": [
        "windows",
        "debugging",
        "memory"
    ],
    "user": "Mery Ted",
    "time": "May 12, 2020 at 16:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    Private flag is indicator that the particular range of memory isn't shared with any other process\n   </p>\n  </li>\n  <li>\n   <p>\n    Reserved section means that the region of virtual memory is reserved, but not commited yet. This means that the virtual memory region isn't mapped to the physical memory but any other memory allocation calls won't occupy that space until it's released. You may also notice that the debugger doesn't show any protection on the reserved memory regions, this is because the memory needs to be commited in order to be used. To commit the memory you may call the\n    <code>\n     VirtualAlloc\n    </code>\n    again, this time with the MEM_COMMIT flag, now you can access the commited memory and then it will be allocated.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "morsisko",
            "time": "May 15, 2020 at 21:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}