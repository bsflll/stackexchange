{
    "title": "Brute Force USB Fuzzing",
    "link": "https://reverseengineering.stackexchange.com/questions/30632/brute-force-usb-fuzzing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working to reverse engineer a USB based robot arm,  but the operating system for the robot won't allow me to create simple enough moves that I can isolate the commands with a USB Sniffer like Wireshark. So I am looking for two new options.\n </p>\n <ol>\n  <li>\n   <p>\n    Is there a program like Wireshark that allows you to record usb traffic and selectively playback commands in the program? With Wireshark I would have to write the USB command in a python script and then send it to the device but the simplest I can get is ~10,000 commands and that would be difficult. I would like to be able to in the program, just click the command and like a resend button so I can see if that command is the one I need to control a joint or motor.\n   </p>\n  </li>\n  <li>\n   <p>\n    Can I just brute force the system? Could I write a python program that simply steps through all 255 bytes for each spot on the usb command in a reasonable amount of time? I know the math doesn't make that a good option since it would mean A LOT of possible combinations but maybe someone has a method of brute forcing that doesn't require each part of the USB command to be tried?\n   </p>\n  </li>\n </ol>\n <p>\n  Thank you all!!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "184",
    "tags": [
        "python"
    ],
    "user": "bcarroll14",
    "time": "Jul 13, 2022 at 19:45",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. What speeds are we talking about? Given the description, if you don't need too fast speeds, I am inclined to recommend a\n <i>\n  hardware\n </i>\n like the GreatFET which at first you could place in between your USB hub and the device (don't know which is which in your scenario; but I'd guess the arm is the device) to capture communication. Later you could then use that to test your findings rather easily.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Wireshark USB capturing is possible:\n <a href=\"https://wiki.wireshark.org/CaptureSetup/USB\" rel=\"nofollow noreferrer\">\n  wiki.wireshark.org/CaptureSetup/USB\n </a>\n And there are projects for replaying captured traffic like\n <a href=\"https://github.com/JohnDMcMaster/usbrply\" rel=\"nofollow noreferrer\">\n  github.com/JohnDMcMaster/usbrply\n </a>\n (not tested).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}