{
    "title": "gdb setting fs register on Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/4076/gdb-setting-fs-register-on-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm debugging an ELF 64-bit binary using\n  <code>\n   gdb\n  </code>\n  and I notice that the\n  <code>\n   %fs\n  </code>\n  register is set to\n  <code>\n   0x63\n  </code>\n  . For some testing that I'd like to perform I'd like to set the\n  <code>\n   %fs\n  </code>\n  register to\n  <code>\n   0x00\n  </code>\n  .\n </p>\n <p>\n  I tried doing a\n  <code>\n   set $fs=0x0\n  </code>\n  but the value wouldn't change. In some cases I got a:\n </p>\n <pre><code>Couldn't write registers: Input/output error.\n</code></pre>\n <p>\n  Is there any way I could set the value for the\n  <code>\n   %fs\n  </code>\n  register? I'm also open to modifying the binary, adding inline assembly to the source, etc.\n </p>\n <p>\n  <strong>\n   EDIT\n  </strong>\n  : Currently, I'm trying this out by attaching to a process rather than running it from within\n  <code>\n   gdb\n  </code>\n  .\n </p>\n <p>\n  A screenshot to illustrate the problem :\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/sxAdI.png\"/>\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "linux",
        "gdb",
        "x86-64"
    ],
    "user": null,
    "time": "Apr 15, 2014 at 19:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Low 2 bits have to be set or you will get an\n  <code>\n   EIO\n  </code>\n  error. Only the low 16 bits manage to get set anyways.\n </p>\n <p>\n  Snippet from\n  <code>\n   arch/x86_64/kernel/ptrace.c\n  </code>\n  :\n </p>\n <pre><code>case offsetof(struct user_regs_struct,fs):\n    if (value && (value & 3) != 3)\n        return -EIO;\n    child->thread.fsindex = value & 0xffff; \n    return 0;\n</code></pre>\n <p>\n  That said, setting to\n  <code>\n   0x00\n  </code>\n  shouldn't be problematic per the code and per my testing.\n </p>\n <pre><code>(gdb) set $fs=3\n(gdb) info register fs\nfs             0x3      3\n(gdb) set $fs=1\nCouldn't write registers: Input/output error.\n(gdb) set $fs=0\n(gdb) info register fs\nfs             0x0      0\n(gdb) set $fs=0xffffffff\n(gdb) info register fs\nfs             0xffff   65535\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "perror",
            "time": "Apr 15, 2014 at 19:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1743",
                    "text": "<span class=\"comment-copy\">would this behavior vary if a process were being traced?</span>",
                    "time": null
                }
            ]
        }
    ]
}