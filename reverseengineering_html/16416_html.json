{
    "title": "IDA pro 6.9, what does \"lambda\" in type notation mean in C++ reversed code",
    "link": "https://reverseengineering.stackexchange.com/questions/16416/ida-pro-6-9-what-does-lambda-in-type-notation-mean-in-c-reversed-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was looking into a C++ program compiled for aarch64 with ida pro 6.9 and came across something really weird:\n </p>\n <p>\n  <code>\n   somescope::SomeClass<false>::some_name<somescope::SomeClass<false>::other_name(uint,uint,uint)::{lambda(void *,bool)#2}>::SOMETHING\n  </code>\n </p>\n <p>\n  I'm really confused by this notation... Specifically:\n </p>\n <ol>\n  <li>\n   <p>\n    What does\n    <code>\n     {lambda(void *,bool)#2}\n    </code>\n    mean? Is it an indicator for lambda expression? Also, what is\n    <code>\n     #2\n    </code>\n    ?\n   </p>\n  </li>\n  <li>\n   <p>\n    Is\n    <code>\n     other_name(uint,uint,uint)\n    </code>\n    somewhat a scope? What could\n    <code>\n     other_name\n    </code>\n    possibly be if this is the case?\n   </p>\n  </li>\n </ol>\n <p>\n  I'm fairly new to reverse engineering and I've tried to google this for like an hour... Please hint me if you've got clue.\n </p>\n <p>\n  Thanks in advance!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "521",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "hpwsue",
    "time": "Sep 26, 2017 at 14:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  About your first question:\n  <code>\n   what does ...lambda... mean\n  </code>\n  : Yes, obviously, it refers to a lambda function.\n </p>\n <p>\n  The second part of your first question:\n  <code>\n   What is #2\n  </code>\n  : Some experimentation with lambda's shows that this is like a sequence number of lambda's within a function.\nNote that gcc and clang have different ways of encoding this.\n  <code>\n   gcc\n  </code>\n  uses the\n  <code>\n   lambda()#2\n  </code>\n  notation, while\n  <code>\n   clang\n  </code>\n  uses something like\n  <code>\n   $_1\n  </code>\n  .\n </p>\n <p>\n  Your second question:\n  <code>\n   what is other_name\n  </code>\n  : I think that would be the function where the lambda is defined.\n </p>\n <p>\n  And\n  <code>\n   some_name\n  </code>\n  being the function which is passed the lambda as a template parameter.\n </p>\n <p>\n  The lambda's themselves are passed as a struct containing either copies of values or pointers, or from a c++ point of view: references, to the closure defined by the lambda.\n </p>\n <hr/>\n <p>\n  Experimenting with how your compiler treats lambda's is quite easy.\nWrite some test code:\n </p>\n <pre><code>#include <stdio.h>\n\ntemplate<typename FN>\nint test(FN f)\n{\n    return f();\n}\n\nint main(int, char**)\n{\n    int a, b;\n    auto f1 = [](int a, int b) { return a+b; };\n    int c = test([&a, b, &f1]() { return f1(a,b); });\n    auto f2 = [](int a, int b) { return a-b; };\n    int d = test([&a, b, &f2]() { return f2(a,b); });\n\n    printf(\"c=%d, d=%d\n\", c, d);\n    return 0;\n}\n</code></pre>\n <p>\n  Then compile with least optimization, and debug symbols:\n </p>\n <pre><code>g++ -O0 -g yourfile.cpp\n</code></pre>\n <p>\n  And view the resulting binary in\n  <code>\n   ida\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Willem Hengeveld",
            "time": "Sep 26, 2017 at 19:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}