{
    "title": "How to get the address of a glibc private symbol at runtime programmatically?",
    "link": "https://reverseengineering.stackexchange.com/questions/31418/how-to-get-the-address-of-a-glibc-private-symbol-at-runtime-programmatically",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to get the address of a private function in GLIBC.\nFor instance - the function\n  <code>\n   __run_prefork_handlers()\n  </code>\n  .\n </p>\n <p>\n  I have done it with gdb, using\n  <code>\n   info symbol __run_prefork_handlers\n  </code>\n  and\n  <code>\n   info address __run_prefork_handlers\n  </code>\n  And I get the relevant information (relevant so) and address of the function.\n </p>\n <p>\n  I tried to get the address of this function programmatically using\n  <code>\n   dlsym\n  </code>\n  .\n </p>\n <p>\n  Since glibc is loaded by runtime loader at startup I call\n  <code>\n   dlsym(RTLD_GLOBAL, \"__run_prefork_handlers\")\n  </code>\n  without first calling\n  <code>\n   dlopen\n  </code>\n  .\n </p>\n <p>\n  I get a\n  <code>\n   NULL\n  </code>\n  pointer and perror returns:\n </p>\n <blockquote>\n  <p>\n   undefined symbol: __run_prefork_handlers\n  </p>\n </blockquote>\n <p>\n  Running the same code for symbol of an exported function such as\n  <code>\n   fork\n  </code>\n  works well.\n </p>\n <p>\n  Which steps should I take to get this information within a program?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "234",
    "tags": [
        "gdb",
        "symbols",
        "libc"
    ],
    "user": "joepol",
    "time": "Jan 16, 2023 at 20:51",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Do\n <code>\n  nm\n </code>\n ,\n <code>\n  objdump\n </code>\n and/or\n <code>\n  readelf\n </code>\n show that symbol in one of the symbol tables? If not, the debugger has probably used debug symbols to get that address. In theory, though, that's something you could also do: parse the debug data.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}