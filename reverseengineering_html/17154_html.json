{
    "title": "BasicCompiler: wanted binaries which BC.exe or QB.exe (compiler) generates",
    "link": "https://reverseengineering.stackexchange.com/questions/17154/basiccompiler-wanted-binaries-which-bc-exe-or-qb-exe-compiler-generates",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was in charge of analyze and reverse engineering the old unknown EXE for past few month. The binary works on MS-DOS for NEC-PC98 (retro PC), old (20years more ago), nobody knows how it's made.\n </p>\n <p>\n  I done the job and knew the binary had been generated by unknown vendor's basic compiler. The binary has interesting technique; well-designed VM, partial relocated overlaying like a DLL, data-section-compression and self melting. It highly impressed me. So I'd like to know the compiler generates the binary.\n </p>\n <p>\n  For now I guess that the vendor may be Microsoft. I'd try to use QuickBasic's compiler (\n  <del>\n   BC.EXE\n  </del>\n  <code>\n   QB.EXE\n  </code>\n  ) and would generate small binary but unfortunately I'm not owner the old toolchain.\n </p>\n <p>\n  So I'd love to ask someone a favor, if you have any Microsoft's Basic Compiler then goto dig your garage and put an old binary generated by such a compiler on me. I'll see it and want to identify the compiler and vendor.\n </p>\n <p>\n  The binary has following characteristics:\n </p>\n <ul>\n  <li>\n   indicates magicWORD, 0x1e, on its exe header's reloc table offset address field\n  </li>\n  <li>\n   start-up-code/address is in higher address (backward of exe)\n  </li>\n  <li>\n   includes common libraries (such a libc) are relocatable on a single binary\n  </li>\n  <li>\n   generates fully native code not an P-code. a\n   <code>\n    call\n   </code>\n   matches a (unknown) VM-OP-code\n  </li>\n  <li>\n   Character code is ASCII/Shift-JIS big endian(cp932, multibyte code for Japanese)\n  </li>\n  <li>\n   floating points IEEE754 not MS-FP\n  </li>\n  <li>\n   rodata sections are easily compressed (optional?)\n  </li>\n </ul>\n <p>\n  the EXE address map:\n </p>\n <pre><code>00000: MZ HEADER\n00200: module1-header\n00230: module1-code\n00xxx: module1-data (compressed)\n       : (repeats by module-N)\nyyyyy: native libraries \nzzzzz: startup code\nZZZZZ: relocation table (for calling a library)\n</code></pre>\n <hr/>\n <p>\n  <code>\n   BC.EXE\n  </code>\n  , Microsoft PDS, is one of interested products for me.\nPlease compile a simple code like this:\n </p>\n <p>\n  <code>\n   X = 0.5 * 100.0\nPRINT X\nFOR I=0 TO 16 \n    PRINT \"Hello, World\"\nNEXT I\n  </code>\n </p>\n <p>\n  and I would appreciate it if you send me an output executable.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "344",
    "tags": [
        "dos"
    ],
    "user": "roentgen",
    "time": "Jan 11, 2018 at 6:12",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Wasn't QuickBasic called\n <code>\n  qb.exe\n </code>\n ? I remember using both\n <code>\n  bc.exe\n </code>\n (Borland C) and QB, without having to add paths. Also, QuickBasic was a product in itself â€“ I've never seen referred to it as \"Microsoft's Basic Compiler\". OTOH: that\n <a href=\"https://en.m.wikipedia.org/wiki/QuickBASIC\" rel=\"nofollow noreferrer\">\n  wikipedia\n </a>\n startup screen shot looks eerily familiar ...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bill Hileman",
            "text": "<html><body><span class=\"comment-copy\">\n The professional version of MS-DOS BASIC was called PDS (Professional Development System) and it's last version was 7.1  I still use it because I still have clients who run my DOS version of my accounting package.  It's compiler is BC.EXE.  What exactly are you looking for?  A sample program to decompile?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}