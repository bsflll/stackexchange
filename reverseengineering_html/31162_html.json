{
    "title": "ARM (STM32) memory mapping on Ghidra: offset only part of the firmware file",
    "link": "https://reverseengineering.stackexchange.com/questions/31162/arm-stm32-memory-mapping-on-ghidra-offset-only-part-of-the-firmware-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a binary firmware that I'm trying to reverse engineer. I loaded it up on Ghidra, setting the file as raw binary, ARM Cortex, little endian. I used an address offset of zero for the file. And I seem to get good results. Here is the top of the file.\n </p>\n <pre><code>                             //\n                             // ram \n                             // ram:00000000-ram:0005d37f\n                             //\n             assume spsr = 0x0  (Default)\n                             MasterStackPointer\n        00000000 00  00  03  20    addr       DAT_20030000\n                             Reset                                           XREF[1]:     Entry Point (*)   \n        00000004 d5  2b  03  08    addr       DAT_08032bd5\n                             NMI                                             XREF[1]:     Entry Point (*)   \n        00000008 25  2c  03  08    addr       DAT_08032c25\n                             HardFault                                       XREF[1]:     Entry Point (*)   \n        0000000c 25  2c  03  08    addr       DAT_08032c25\n                             MemManage                                       XREF[1]:     Entry Point (*)   \n        00000010 25  2c  03  08    addr       DAT_08032c25\n                             BusFault                                        XREF[1]:     Entry Point (*)   \n        00000014 25  2c  03  08    addr       DAT_08032c25\n                             UsageFault                                      XREF[1]:     Entry Point (*)   \n        00000018 25  2c  03  08    addr       DAT_08032c25\n</code></pre>\n <p>\n  Notice how all the pointers point to\n  <code>\n   DAT_08######\n  </code>\n  ? This is consistent with the well-known\n  <code>\n   0x08000000\n  </code>\n  offset typical on this architecture. But if I analyse the whole file with this offset, then this first part isn't \"decoded\" properly.\n </p>\n <p>\n  I guess I have to split the memory mapping of the file. Currently it's as a single block, as indicated by\n  <code>\n   // ram:00000000-ram:0005d37f\n  </code>\n  .\n </p>\n <p>\n  My question is where should I split the file, adding the offset from that point onward? Any good ways to have an educated guess? The first function, with the file as-is, appears at address\n  <code>\n   0x000001f0\n  </code>\n  , after the IRQ block.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "firmware",
        "ghidra",
        "arm"
    ],
    "user": "Rui Oliveira",
    "time": "Nov 22, 2022 at 10:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recommend creating a memory map similar to the layout of the map of the processor where the code is dumped. It looks like this code was dumped from the flash of the device and should be mapped to that memory space 0x08000000. You can create a byte-mapped mirror to the 0x00000000 memory space if there are unresolved mappings to that memory region. I have not found creating the mirrored memory to be required.\n </p>\n <p>\n  You can re-create the interrupt block by referencing the data sheet for the processor and manually re-mapping. This is a good exercise since the interrupt block will vary from the Ghidra default to what the processor has available.\n </p>\n <p>\n  I recommend using a tool such as SVD-Loader to help fill in all the peripheral information.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/CMpaK.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Memory Map Screen shot\" src=\"https://i.sstatic.net/CMpaK.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ben Mason",
            "time": "Nov 23, 2022 at 4:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rui Oliveira",
                    "text": "<span class=\"comment-copy\">Thank you. I did pretty much that in the end, but I did have to add the flash_mirror section at 0x0 to double map the flash.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To add to Ben's great answer, I double mapped the\n  <code>\n   .bin\n  </code>\n  file to both address\n  <code>\n   0x0\n  </code>\n  and\n  <code>\n   0x800000\n  </code>\n  (first two lines):\n  <a href=\"https://i.sstatic.net/bQwQ8.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/bQwQ8.png\"/>\n  </a>\n  And it now works:\n  <a href=\"https://i.sstatic.net/p8in0.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/p8in0.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/bstss.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/bstss.png\"/>\n  </a>\n </p>\n <p>\n  I learned it from\n  <a href=\"https://www.youtube.com/watch?v=q4CxE5P6RUE\" rel=\"nofollow noreferrer\">\n   this amazing video\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rui Oliveira",
            "time": "Nov 24, 2022 at 20:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}