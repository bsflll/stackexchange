{
    "title": "What types are read from byte array?",
    "link": "https://reverseengineering.stackexchange.com/questions/21971/what-types-are-read-from-byte-array",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I try to understand what data types are read from a byte array. These methods seem to follow a common pattern:\n </p>\n <pre><code>public class Reader {\n\n    static short readA(byte[] bytes, int i) {\n        int s = ((((short) bytes[i]) & 255) << 8)\n                | (((short) bytes[i + 1]) & 255);\n        return (short) s;\n    }\n\n    static int readB(byte[] bytes, int i) {\n        return ((bytes[i] & 255) << 8)\n                | (bytes[i + 1] & 255);\n    }\n\n    static int readC(byte[] bytes, int i) {\n        return ((bytes[i] & 255) << 24)\n                | ((bytes[i + 1] & 255) << 16)\n                | ((bytes[i + 2] & 255) << 8)\n                | (bytes[i + 3] & 255);\n    }\n\n}\n</code></pre>\n <p>\n  Does\n  <code>\n   readC\n  </code>\n  read a signed integer? Does\n  <code>\n   readB\n  </code>\n  read a signed short? What does\n  <code>\n   readA\n  </code>\n  read?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "83",
    "tags": [
        "java"
    ],
    "user": "maiermic",
    "time": "Aug 25, 2019 at 10:06",
    "comments": [
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n I think that your question isn't related to reverse engineering. Nonetheless,\n <code>\n  readA\n </code>\n returns\n <code>\n  short\n </code>\n created as concatenation of\n <code>\n  bytes[i]\n </code>\n and\n <code>\n  bytes[i+1]\n </code>\n (i.e. if\n <code>\n  bytes[i]=00000010\n </code>\n and\n <code>\n  bytes[i+1]=10000011\n </code>\n , it will return\n <code>\n  10100000011\n </code>\n ).\n <code>\n  readB\n </code>\n returns the same except that will be of type\n <code>\n  int\n </code>\n , while\n <code>\n  readC\n </code>\n returns an\n <code>\n  int\n </code>\n representing concatenation of\n <code>\n  bytes[i]\n </code>\n ,\n <code>\n  bytes[i+1]\n </code>\n ,\n <code>\n  bytes[i+2]\n </code>\n and\n <code>\n  bytes[i+3]\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n assume i = 0   bytes = [1,2,3,4]   so bytes[0] is the first byte in array  it is left shifted by 8 so 1 << 8 == 256 | 2   ==  258 the & 255  is there to take only the byte from input ie instead of [1,2,3,4]  the input can be [0x8097abef,....]  the & 255 will strip the 8097ab an will take only ef for left shifting  ie ef << 8 ie the result will be 0xef00 | yy\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @bart1e  please put answers in the answer box, not in comments. Thanks\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb as well.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n understanding code is also reverse engineering, this question is not necessarily offtopic here\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Lets Break the algo into pieces before trying to understand\n </p>\n <p>\n  the algo is broken into pieces using\n  <strong>\n   bodmas\n  </strong>\n  (bracket open ,divide ,multiply ,add, subtract )\n </p>\n <p>\n  and/or\n  <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html\" rel=\"nofollow noreferrer\">\n   <strong>\n    Operator precedence\n   </strong>\n  </a>\n </p>\n <p>\n  lets take the uncasted readB first\n </p>\n <pre><code>static int readB(byte[] bytes, int i) {\n    return ((bytes[i] & 255) << 8)\n            | (bytes[i + 1] & 255);\n}\n</code></pre>\n <p>\n  prototype of function says it takes an array of bytes and an integer does some thing and returns an int back\n </p>\n <pre><code>static int readB(byte[] bytes, int i)\n</code></pre>\n <p>\n  body of the function (where it does the aforementioned something\n </p>\n <pre><code>return ((bytes[i] & 255) << 8) | (bytes[i + 1] & 255);\n</code></pre>\n <p>\n  there are two bracketed expression one of which has a child\n </p>\n <pre><code>1. ((bytes[i] & 255) << 8)    \n          I. (bytes[i] & 255)\n 3. (bytes[i + 1] & 255)  \n</code></pre>\n <p>\n  breaking the child expression apart it has three components  a constant 255 and two variables\n  \n\n  which are arguments or inputs provided to the function\n  \n\n  the byte array bytes[] and\n  \n\n  the integer i\n  \n\n  since i is an int the array can range from 0 to 2^31 -1\n </p>\n <p>\n  ( think what will happen if you provide a null array or\n  \n\n  an array with just 1 value or \nan array with 2^31-1 values\n  \n\n  or int >= array size\n  \n\n  (\n  <a href=\"https://rextester.com/live/ETUY42530\" rel=\"nofollow noreferrer\">\n   bounds checking\n  </a>\n  \n\n  this link has the following code check the results and see the thrown exception\n </p>\n <pre><code>{  \n    static byte foo[] = {1,2,3,4,5,6,7,8 };\n    static int readB(byte[] bytes, int i)\n    {\n        return ((bytes[i] & 255) << 8) | (bytes[i + 1] & 255);\n    }\n    public static void main(String args[])\n    {\n        for(int i = 0; i < foo.length ; i++ ) \n        {\n            System.out.printf(\"bounds check %d %d %d\n\" , i , foo[i] , readB(foo,i));\n        }\n    }\n}\n</code></pre>\n <p>\n  result of running the code\n </p>\n <pre><code>Compilation time: 1.05 sec, absolute running time: 0.22 sec,  \ncpu time: 0.15 sec, memory peak: 18 Mb, absolute service time: 1,27 sec\n\nError(s), warning(s):\n\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 8\n    at Rextester.readB(source.java:12)\n    at Rextester.main(source.java:18)\n\nbounds check 0 1 258\nbounds check 1 2 515\nbounds check 2 3 772\nbounds check 3 4 1029\nbounds check 4 5 1286\nbounds check 5 6 1543\nbounds check 6 7 1800\n</code></pre>\n <p>\n  )\n </p>\n <pre><code>bytes[i] & 255\n</code></pre>\n <p>\n  this actually is superfluous operation\n </p>\n <p>\n  the bytes[i] array is already of BYTE type so the values can never exceed 255 and there is no point stripping the rest \nthis would only make sense if the type is > BYTE like\n  <strong>\n   WORD foo[]\n  </strong>\n  which can hold anything from\n  <strong>\n   0x0000 to 0xffff\n  </strong>\n  or\n  <strong>\n   int foo[]\n  </strong>\n  which can hold anything from\n  <strong>\n   0x00000000 to 0xffffffff\n  </strong>\n  so stripping the hibyte and highwords may make sense .\n </p>\n <p>\n  in this specific code we can safely ignore this\n </p>\n <p>\n  so basically  it takes two bytes from the given position  and folds them into a bigger type\n  \n\n  so readA returns a SHORT and readB returns and INT type\n </p>\n <p>\n  ie readA takes two bytes from a give position and folds it into anything between \n0x0000 and 0xffff\nreadB takes two bytes from a given position and folds into anything between \n0x00000000 and 0xffffffff (actually  it is same as  0x00000 and 0xffff if not for size of type calculation or pointer arithmetic's )\n </p>\n <p>\n  the third readC now should be clear enough for you  ittakes 4 bytes and folds it into anything between 0x00000000 and 0xffffffff (this function utilizes the whole range not unlike the readA() / readB()\n </p>\n <p>\n  see the shifts\n  <strong>\n   24,16,8\n  </strong>\n  which puts\n  \n\n  <strong>\n   byte[ position 1]\n  </strong>\n  at\n  <strong>\n   0xAA-??????\n  </strong>\n  \n\n  <strong>\n   byte[ position 2]\n  </strong>\n  at\n  <strong>\n   0xAA-BB-????\n  </strong>\n  \n\n  <strong>\n   byte [position 3]\n  </strong>\n  at\n  <strong>\n   0xAA-BB-CC-??\n  </strong>\n  and\n  \n\n  <strong>\n   byte [position 4]\n  </strong>\n  at\n  <strong>\n   0xAA-BB-CC-DD\n  </strong>\n  \n\n  and returns back\n  <strong>\n   0xAABBCCDD\n  </strong>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 25, 2019 at 17:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}