{
    "title": "What is the need of the Rotation Operation?",
    "link": "https://reverseengineering.stackexchange.com/questions/15579/what-is-the-need-of-the-rotation-operation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know that\n  <code>\n   shl\n  </code>\n  instruction is like the\n  <code>\n   mul\n  </code>\n  operation and the\n  <code>\n   shr\n  </code>\n  instruction is like the\n  <code>\n   div\n  </code>\n  operation and it's used for optimization.\n </p>\n <p>\n  For example,\n  <code>\n   shl eax, n\n  </code>\n  is a more efficient way to implement\n  <code>\n   eax = (eax)*(2^n)\n  </code>\n  without any multiplication instructions.\n </p>\n <p>\n  Now I am reading about\n  <code>\n   rol\n  </code>\n  and\n  <code>\n   ror\n  </code>\n  assembly instructions and I got how it works, but I don't know what is the point of the rotation operation in general and when to use it?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 4,
    "views": "373",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Ahmad Kouraiem",
    "time": "Jul 12, 2018 at 10:52",
    "comments": [
        {
            "user": "yaspr",
            "text": "<html><body><span class=\"comment-copy\">\n Optimization is a secondary use of these instructions. They are mainly there to reproduce boolean algebra constructs necessary for implementing certain concepts in a more natural way. Generally, these instructions are VERY usefull when doing signal processing, cryptography, ... They are the +, *, /, - you usually use in arithmetics but used on a a binary set {0, 1} rather than an infinite set.\n <a href=\"https://en.wikipedia.org/wiki/Binary_operation\" rel=\"nofollow noreferrer\">\n  en.wikipedia.org/wiki/Binary_operation\n </a>\n <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" rel=\"nofollow noreferrer\">\n  en.wikipedia.org/wiki/Bitwise_operation\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n @yaspr are you able to turn this comment into an answer?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<html><body><span class=\"comment-copy\">\n Sure, I'll set it up with better explanations. @SYS_V\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://stackoverflow.com/q/4976636/995714\">\n  What's the purpose of the rotate instructions (ROL, RCL on x86)?\n </a>\n . On microcontrollers rotate through carry is commonly used to do a multiword shift\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   I know that\n   <code>\n    shl\n   </code>\n   instruction is like\n   <code>\n    mul\n   </code>\n   operation, and\n   <code>\n    shr\n   </code>\n   is like\n   <code>\n    div\n   </code>\n   operation, and it's used for optimization.\n  </p>\n </blockquote>\n <p>\n  It is somewhat of an incorrect statement. Those operations are\n  <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" rel=\"nofollow noreferrer\">\n   bitwise operations\n  </a>\n  . These operations are the basis of\n  <a href=\"https://en.wikipedia.org/wiki/Boolean_algebra\" rel=\"nofollow noreferrer\">\n   Boolean Algebra\n  </a>\n  and  they're used whenever bit level manipulation is required. Applications may include bitfield/flag manipulation, working with hardware devices, network protocols, decoding/encoding, compression and many other uses.\n </p>\n <p>\n  Additionally, logical shifts have the interesting property of being efficient ways to perform multiplication or division of unsigned integers by powers of two. This is a side-effect and not the purpose of those operations. This property is also true for\n  <em>\n   arithmetic\n  </em>\n  shift operations and\n  <em>\n   signed\n  </em>\n  integers.\n </p>\n <p>\n  Similarly,\n  <a href=\"https://en.wikipedia.org/wiki/Circular_shift\" rel=\"nofollow noreferrer\">\n   rotation bitwise operations\n  </a>\n  have their own applications such as in cryptographic models (encryption, hashing), for example.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Jul 12, 2018 at 10:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Rotations of bitfield or '\n  <em>\n   circular shifts\n  </em>\n  ' are very often used in cryptography as an non-linear operator to achieve what they call '\n  <em>\n   confusion\n  </em>\n  ' (trying to break all the statistical links between the clear-text and the cipher-text).\n </p>\n <p>\n  The classical graphical representation of the rotation-left is quite self explanatory:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/NYm8n.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Rotate-left\" src=\"https://i.sstatic.net/NYm8n.png\"/>\n  </a>\n </p>\n <p>\n  But, it also has a meaning in pure arithmetic. It can be seen as a multiplication and an addition like that (\n  <code>\n   n\n  </code>\n  is the size of the bitfield):\n </p>\n <pre><code>rotate-left (a, 0) = a\nrotate-left (a, 1) = 2^(1).a + 2^(-n).a\nrotate-left (a, 2) = 2^(2).a + 2^(1-n).a\n...\nrotate-left (a, n-1) = 2^(n-1).a + 2^(-1).a\nrotate-left (a, n) = a\n</code></pre>\n <p>\n  In C language you might interpret this with only bitwise operators as follow (see the\n  <a href=\"https://en.wikipedia.org/wiki/Circular_shift\" rel=\"nofollow noreferrer\">\n   Wikipedia article about circular shift\n  </a>\n  ):\n </p>\n <pre><code>uint32_t rotl32 (uint32_t value, unsigned int count) \n{\n  return ((value << count) | (value >> (32 - count)));\n}\n</code></pre>\n <p>\n  Anyway, the rotations are often neglected in most of the programming languages. You cannot find it easily in C for example. But, this is mainly because:\n </p>\n <ol>\n  <li>\n   Only cryptography is using it (and few other very low-level domains).\n  </li>\n  <li>\n   It can be implemented as a function with the provided operators (it does not increase the expressive power of the language to add it to the language).\n  </li>\n </ol>\n <p>\n  Yet, all the assembler languages propose rotations operators because they can be source of a lot of optimizations at low-level.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "perror",
            "time": "Jul 12, 2018 at 14:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Data lossy shifts:\n  <code>\n   shl eax,n : eax = ( eax*(2^n) ) %(2^32)\n  </code>\n  and\n  <code>\n   shr eax,n : eax = floor( eax/(2^n) )\n  </code>\n </p>\n <p>\n  Generally found in fast unchecked or logic bound integer arithmetic optimizations on a single data value e.g. address offsets for repeated size records.\n </p>\n <p>\n  Data lossless rotate:\n  <code>\n   rol eax,n : eax = shl eax,n or shr eax,32-n\n  </code>\n </p>\n <p>\n  Generally used in cryptography, checked arithmetic optimizations or arithmetic on a string of data values (search long multiplication) or shifting graphical bit masks e.g.\n  <code>\n   rol eax,8\n  </code>\n  gives:\n  <code>\n   and eax,0xFFFFFF00\n  </code>\n  <code>\n   eax *2^8\n  </code>\n  for this data value and\n  <code>\n   and eax,0x000000FF\n  </code>\n  carry or overflow to next more significant data value.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Jul 12, 2018 at 9:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The other proposed answers are clearly the primary applications of rotate instructions; however, I (perhaps somewhat uniquely) use them as a means to non-destructively\n  <a href=\"http://dsasmblr.com/accessing-and-modifying-upper-half-of-registers/\" rel=\"nofollow noreferrer\">\n   access data in the upper half of 32-bit and 64-bit registers\n  </a>\n  (primarily when dealing with packed data while reversing video game coordinate data).\n </p>\n <p>\n  Since there are no instructions that specifically do that task, it's necessary to shift (destructive) or rotate (non-destructive) that data to the lower half of registers so it can be accessed/modified accordingly.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jul 12, 2018 at 21:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}