{
    "title": "Why does this command crash IDA Android native debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/22032/why-does-this-command-crash-ida-android-native-debugger",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In Android shared library that heavily protected against debugging, I found following code:\n </p>\n <pre><code>CODE32\nldr pc, [pc, #-4]\n</code></pre>\n <p>\n  For me, this instruction looks like\n  <code>\n   NOP\n  </code>\n  ; it just jumps to next instruction in ARM mode. The debugged process crashes on this command, however. I use\n  <code>\n   IDA\n  </code>\n  to debug the process.\n </p>\n <p>\n  Can anyone explain why?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "268",
    "tags": [
        "ida",
        "android",
        "arm"
    ],
    "user": "Vitalii",
    "time": "Sep 3, 2019 at 14:59",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n \"crashes\" how, exactly?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitalii",
            "text": "<html><body><span class=\"comment-copy\">\n Raises\n <code>\n  SIGSEGV\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n IDA itself or the process being debugged?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitalii",
            "text": "<html><body><span class=\"comment-copy\">\n The debugged process.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This instruction is\n  <strong>\n   not\n  </strong>\n  a NOP. It reads memory and jumps to the address loaded. If the memory is inaccessible or the loaded address is invalid/non-executable, you will get an exception, so the debugger's behavior is correct.\n </p>\n <p>\n  a NOP-like instruction involving PC in ARM mode would be something like\n </p>\n <pre><code>ADD PC, PC, #-4\n</code></pre>\n <p>\n  (likely disassembled as\n  <code>\n   sub pc, pc, #4\n  </code>\n  or maybe even\n  <code>\n   ADR PC, next_addr\n  </code>\n  )\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 3, 2019 at 15:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}