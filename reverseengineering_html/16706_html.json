{
    "title": "What causes the need for NOP sleds?",
    "link": "https://reverseengineering.stackexchange.com/questions/16706/what-causes-the-need-for-nop-sleds",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So when taking a simple scenario and exploiting a stack buffer overflow in which I can execute code on the stack, my payload simply is:\n </p>\n <pre><code>NOP Sled -> Shellcode -> Padding -> New RET Address (Pointing to the NOP Sled)\n</code></pre>\n <p>\n  What I get is that we need to have a memory address included in the shellcode which points somewhere into the NOP Sled, which we need because we \"can't be sure\" what the return address is.\n </p>\n <p>\n  Why can't we be sure?\n </p>\n <p>\n  Could it be simple things such as argv[0] being different, eg. on one system the file might be \"/vuln\" and on another \"/home/user/vuln\" and for this reason the stack is already different?\nDo environment Variables play a role? What else is involved?\n </p>\n <p>\n  Basically my question is: Which factors lead to the stack being different every time we execute / executing the vuln program on another machine?\n </p>\n</div>\n</body></html>",
    "votes": "14",
    "answers": 2,
    "views": "4k",
    "tags": [
        "memory",
        "buffer-overflow",
        "security"
    ],
    "user": "L. Heldt",
    "time": "Nov 4, 2017 at 12:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On modern systems the most obvious culprit is probably address space layout randomization, but stack frame layout variablity was problematic for exploit development even before ASLR became widely implemented. This was alluded to in AlephOne's venerable \"Smashing the Stack for Fun and Profit\":\n </p>\n <ul>\n  <li>\n   <blockquote>\n    <p>\n     The problem we are faced when trying to overflow the buffer of another\n  program is trying to figure out at what address the buffer (and thus our\n  code) will be.  The answer is that for every program the stack will\n  start at the same address.  Most programs do not push more than a few hundred or a few thousand bytes into the stack at any one time.  Therefore by knowing where the stack starts we can try to guess where the buffer we are trying to overflow will be.\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     Trying to guess the\n  offset even while knowing where the beginning of the stack lives is nearly\n  impossible.  We would need at best a hundred tries, and at worst a couple of thousand.  The problem is we need to guess\n     <em>\n      exactly\n     </em>\n     where the address of our code will start.  If we are off by one byte more or less we will just get a segmentation violation or a invalid instruction.  One way to increase our chances is to pad the front of our overflow buffer with NOP instructions.\n    </p>\n   </blockquote>\n  </li>\n </ul>\n <p>\n  So this is an issue even without ASLR enabled. Reasons for this involve the following (as far as I know):\n </p>\n <ul>\n  <li>\n   compilers/compiler toolchains and the ABI\n  </li>\n  <li>\n   the runtime environment\n  </li>\n </ul>\n <h1>\n  Compilers, the ABI and Stack Frame Layout\n </h1>\n <p>\n  Interestingly, the code that manages the runtime stack is generated by the compiler and the compiler cannot know what the absolute positions of stack frames during program runtime will be:\n </p>\n <blockquote>\n  <p>\n   While the location of a stack frame cannot be predicted at compile time (the compiler cannot in general tell what other frames may already be on the stack), the offsets of objects within a frame usually can be statically determined. Moreover, the compiler can arrange (in the calling sequence or prologue) for a particular register, known as the frame pointer to always point to a known location within the frame of the current subroutine. Code that needs to access a local variable within\n  the current frame, or an argument near the top of the calling frame, can do so by adding a predetermined offset to the value in the frame pointer.\n   <sup>\n    1\n   </sup>\n  </p>\n </blockquote>\n <p>\n  The way in which memory is allocated and deallocated for stack frames can vary across compilers, as well as different versions of the same compiler toolchain. Why this might be the case is alluded to in the\n  <a href=\"https://refspecs.linuxfoundation.org/elf/abi386-4.pdf\" rel=\"noreferrer\">\n   System V i386 Architecture Processor Supplement\n  </a>\n  (page 36):\n </p>\n <ol>\n  <li>\n   <blockquote>\n    <p>\n     The stack is word aligned. Although the architecture does not require any alignment of the stack, software convention and the operating system\n  requires that the stack be aligned on a word boundary.\n    </p>\n   </blockquote>\n   <p>\n    By default, GCC aligns the stack to a 16-byte boundary on i386 machines (x86):\n   </p>\n   <blockquote>\n    <p>\n     <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.5.3/gcc/i386-and-x86_002d64-Options.html\" rel=\"noreferrer\">\n      <code>\n       -mpreferred-stack-boundary=num\n      </code>\n     </a>\n     \n\n     Attempt to keep the stack boundary aligned to a 2 raised to\n     <code>\n      num\n     </code>\n     byte boundary. If\n     <code>\n      -mpreferred-stack-boundary\n     </code>\n     is not specified, the default is 4 (16 bytes or 128 bits).\n    </p>\n   </blockquote>\n   <p>\n    This means that even if a local variable or argument to a function is 4 bytes in length (such as  an\n    <code>\n     int\n    </code>\n    ), at least 16 bytes of space will be allocated on the stack frame for that function. Since this is a command line argument for\n    <code>\n     gcc\n    </code>\n    , it goes without saying that this can be changed.\n   </p>\n  </li>\n  <li>\n   <blockquote>\n    <p>\n     Other areas depend on the compiler and the code being compiled. The standard calling sequence does not define a maximum stack frame size, nor does it restrict how a language system uses the ‘‘unspecified’’ area of the standard stack frame.\n    </p>\n   </blockquote>\n   <p>\n    This \"unspecified\" area of a stack frame includes all of the frame except for the return address and the saved base pointer of the previous frame:\n   </p>\n   <p>\n    <a href=\"https://i.sstatic.net/qBX1N.png\" rel=\"noreferrer\">\n     <img alt=\"SYS V i386 standard stack frame\" src=\"https://i.sstatic.net/qBX1N.png\"/>\n    </a>\n   </p>\n   <p>\n    The data written to this area can include saved registers, local variables, temporaries, and arguments to the next function\n    <sup>\n     2\n    </sup>\n    . GCC will allocate memory required to store this data in a frame\n    <em>\n     plus\n    </em>\n    space required to maintain stack alignment to the boundary specified when the binary was compiled:\n   </p>\n   <p>\n    <a href=\"https://i.sstatic.net/ZsNJf.png\" rel=\"noreferrer\">\n     <img alt=\"x86 stack frame layout\" src=\"https://i.sstatic.net/ZsNJf.png\"/>\n    </a>\n   </p>\n  </li>\n </ol>\n <p>\n  Here is how all of this ties together:\n </p>\n <ol>\n  <li>\n   <p>\n    It cannot be determined prior to run time what the absolute virtual memory addresses of data on the stack will be, so indirect addressing is used instead (using\n    <code>\n     %ebp\n    </code>\n    and\n    <code>\n     %esp\n    </code>\n    to calculate offsets, for example). However, to control EIP an absolute memory address of executable instructions must be written to EIP. So now one must figure out what this address is without having absolute addresses to work with when disassembling the binary\n   </p>\n  </li>\n  <li>\n   <p>\n    The precise layout of a stack frame, and by extension the runtime stack, is determined by the compiler used to create the binary one seeks to exploit.\n   </p>\n   <ul>\n    <li>\n     This means that the amount of space allocated to variables such as buffers depends at the very least on the boundary to which the compiler aligns stack frames (4 bytes? 8 bytes? 16 bytes? and so on).\n    </li>\n    <li>\n     This can lead to \"slack space\" in stack frames to which no values associated with local variables are written (contains garbage data).\n    </li>\n    <li>\n     In addition to this, the compiler also determines in what order variables are laid out within the stack frame.\n    </li>\n    <li>\n     Compilation with optimization can have adverse effects on calling conventions specified in the architecture-specific ABI and how stack frames are laid out\n    </li>\n    <li>\n     Compilation with stack protection will further influence how data is arranged within stack frame by the compiler\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  In sum, the offset between the buffer being overflowed and the target return address location can vary based on compiler toolchain (GCC, TCC, MSVC, etc), compiler version (3.x, 4.x etc) and the particular options used to compile the binary (alignment value, optimization level, stack protection, etc):\n </p>\n <blockquote>\n  <p>\n   The exact distance between the return address and the start of the [buffer] can change due to different compiler versions and different optimization flags. As long as the start of the buffer is aligned with DWORDs on the stack, this mutability can be accounted for by simply repeating the return address many times. This way, at least one of the instances will overwrite the return address, even if it has shifted around due to compiler optimizations.\n   <sup>\n    3\n   </sup>\n  </p>\n </blockquote>\n <h1>\n  The Runtime Environment\n </h1>\n <p>\n  It has been\n  <a href=\"https://stackoverflow.com/questions/17775186/buffer-overflow-works-in-gdb-but-not-without-it/17775966#17775966\">\n   suggested elsewhere\n  </a>\n  that stack layout indeterminicy can be caused by environmental variables and program arguments:\n </p>\n <blockquote>\n  <p>\n   Exploit development can lead to serious headaches if you don't adequately account for factors that introduce non-determinism into the debugging process. In particular, the stack addresses in the debugger may not match the addresses during normal execution. This artifact occurs because the operating system loader places both environment variables and program arguments before the beginning of the stack\n  </p>\n </blockquote>\n <p>\n  This makes sense if we look at how the stack is laid out in virtual memory:\n  <a href=\"https://i.sstatic.net/DMGgA.png\" rel=\"noreferrer\">\n   <img alt=\"The Linux Programming Interface, page 119\" src=\"https://i.sstatic.net/DMGgA.png\"/>\n  </a>\n </p>\n <p>\n  If there are differences across executions in the environment or arguments, the location of the base of the stack may change as well.\n </p>\n <p>\n  To show that this is not simply idle speculation, we can look at a concrete example. First, we disable ASLR like so:\n </p>\n <p>\n  <code>\n   echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n  </code>\n </p>\n <p>\n  Then we write a quick program in C:\n </p>\n <pre><code>#include <stdio.h>\n\nint test(int a, int b)\n{\n        printf(\"%p\n\", &a);\n        return a*a + b*b;\n}\n\nint main(void)\n{\n        return test(3, 5);\n}\n</code></pre>\n <p>\n  When compiled and then run a few times with steadily increasing argument lengths, it is observed that the position on the stack of one of the local variables changes to lower and lower in virtual memory:\n </p>\n <pre><code>$ gcc -m32 simple.c -o simple\n$ ./simple \n0xffffd210\n$ ./simple AAAAAAAA\n0xffffd200\n$ ./simple AAAAAAAAAAAAAAAA\n0xffffd200\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1f0\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1f0\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1e0\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1e0\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1d0\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1d0\n$ ./simple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n0xffffd1c0\n</code></pre>\n <p>\n  This indicates that changing the sizes of the arguments passed to\n  <code>\n   execve\n  </code>\n  also changes the position of the runtime stack in virtual memory. The weakness of this extremely trivial example is that it does not accurately reflect the complexity of real-world programs or capture how the runtime stack changes throughout execution of more complex processes.\n </p>\n <p>\n  An additional variable influencing the layout of the runtime stack is whether the binary is dynamically linked or not. If it is dynamically linked, process startup is handled by\n  <code>\n   glibc\n  </code>\n  .\n  <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" rel=\"noreferrer\">\n   On x86 Linux systems the C runtime library function call sequence looks similar to this\n  </a>\n  :\n  <a href=\"https://i.sstatic.net/suPwc.png\" rel=\"noreferrer\">\n   <img alt=\"x86 Linux Program Startup\" src=\"https://i.sstatic.net/suPwc.png\"/>\n  </a>\n </p>\n <p>\n  This will depend on what version of\n  <code>\n   glibc\n  </code>\n  the binary is linked against, and the runtime environment will vary across machines. This means that the function call sequence during process startup will vary across systems as well.\n </p>\n <hr/>\n <p>\n  See also:\n </p>\n <ul>\n  <li>\n   <a href=\"https://www.win.tue.nl/~aeb/linux/hh/hh-10.html\" rel=\"noreferrer\">\n    https://www.win.tue.nl/~aeb/linux/hh/hh-10.html\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.win.tue.nl/~aeb/linux/hh/bof-eng.txt\" rel=\"noreferrer\">\n    https://www.win.tue.nl/~aeb/linux/hh/bof-eng.txt\n   </a>\n  </li>\n  <li>\n   <a href=\"https://0xax.gitbooks.io/linux-insides/content/Misc/program_startup.html\" rel=\"noreferrer\">\n    https://0xax.gitbooks.io/linux-insides/content/Misc/program_startup.html\n   </a>\n  </li>\n </ul>\n <hr/>\n <p>\n  <sub>\n   1. Scott, Michael L.\n   <em>\n    Programming Language Pragmatics\n   </em>\n   . 3rd ed. Page 117\n  </sub>\n </p>\n <p>\n  <sub>\n   2. Bryant, O'Hallaron.\n   <em>\n    Computer Systems: A Programmer's Perspective\n   </em>\n   . 2nd ed. Page 220\n  </sub>\n </p>\n <p>\n  <sub>\n   3. Erickson, Jon.\n   <em>\n    Hacking: The Art of Exploitation\n   </em>\n   . 2nd ed. Page 136\n  </sub>\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "julian",
            "time": "Nov 5, 2017 at 23:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you mentioned, many things can leave you with a different memory layout than the one you expect:\n </p>\n <ul>\n  <li>\n   The name of the binary is one.\n  </li>\n  <li>\n   The environment variables the binary gets is another one.\n  </li>\n  <li>\n   If it's being debugged (related to the previous point)\n  </li>\n  <li>\n   Security measures such as stack cookies\n  </li>\n  <li>\n   Etc\n  </li>\n </ul>\n <p>\n  Using hardcoded addresses pointing to the stack as the address that will be taken by\n  <code>\n   EIP\n  </code>\n  is the wrong approach. That's how it was done in the early days. Sketchy approach and no DEP/NX in place.\n </p>\n <p>\n  A more stable approach is that instead of jumping to the middle of the stack, you can directly jump to code that will get executed. There are different techniques to do so such as\n  <a href=\"http://phrack.org/issues/58/4.html\" rel=\"nofollow noreferrer\">\n   return-to-libc/library\n  </a>\n  or\n  <a href=\"https://en.wikipedia.org/wiki/Return-oriented_programming\" rel=\"nofollow noreferrer\">\n   ROP\n  </a>\n  .\n </p>\n <p>\n  Another simpler approach is checking where your registers point in the moment when the overflow happens (actually, when the segfault is triggered). Imagine that\n  <code>\n   ESP\n  </code>\n  points to 0x12345678. If you have control of the contents of 0x12345678 at the moment of the segfault in a stable way, you can just use the address of a\n  <code>\n   JMP ESP\n  </code>\n  -kind instruction as what will be taken by\n  <code>\n   EIP\n  </code>\n  .\n </p>\n <ul>\n  <li>\n   Why is this approach better?\n  </li>\n </ul>\n <p>\n  Because you are certain that the binary itself or the libraries that get loaded (therefore, their instructions) when the binary is executed will always be stored in the same address. (1)\n </p>\n <p>\n  Long story short, the motto goes by... \"If your exploit contains\n  <code>\n   NOP\n  </code>\n  s, you are doing something wrong!\".\n </p>\n <p>\n  To answer the question in your title, there is no need for NOP sleds.\n </p>\n <ol>\n  <li>\n   As far as there's no ASLR or module re-base.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "newlog",
            "time": "Nov 4, 2017 at 17:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}