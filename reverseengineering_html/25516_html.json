{
    "title": "Reconstructing a PE from unpacked memory in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/25516/reconstructing-a-pe-from-unpacked-memory-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I’m trying to byte patch a 12 year old program written in MS Visual C++ V9. However, some of its code has been packed with ‘Lock Express V2.0’. I’ve loaded the executable in IDA and run the Universal PE Unpacker with success. I’m now able to inspect much more of the code and have identified the actual OEP. What I’d like to do is rebuild the unpacked memory into a new PE file so that I can start byte patching. My unpacking skills are poor but I believe I need to reconstruct the Input Address Table and fix the Header? Could I get some recommendations on how to do this? Programs, scripts, tutorials? Any help would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "620",
    "tags": [
        "ida",
        "unpacking"
    ],
    "user": "stackoverflowperson",
    "time": "Jul 18, 2020 at 2:04",
    "comments": [
        {
            "user": "eyal karni",
            "text": "<html><body><span class=\"comment-copy\">\n There used to be a ollydbg plugin that does it, ollydump as far as I remember.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "eyal karni",
            "text": "<html><body><span class=\"comment-copy\">\n You just need to pause the program at the end of the unpacking process. And run it. Works on x86.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rithik Banerjee",
            "text": "<html><body><span class=\"comment-copy\">\n I guess you should look at this(\n <a href=\"http://index-of.es/Varios-2/Reverse%20Engineering%20Code%20with%20IDA%20Pro.pdf\" rel=\"nofollow noreferrer\">\n  index-of.es/Varios-2/…\n </a>\n ) before unpacking.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I you really want to try making the unpacked executable,\n  <a href=\"https://low-priority.appspot.com/ollydumpex/\" rel=\"nofollow noreferrer\">\n   OllyDumpEx\n  </a>\n  works in IDA too.\n </p>\n <p>\n  However, there is an alternative approach: a loader. This is a program which starts the target in paused state, puts breakpoint on OEP or some initially called APIs then lets it run. Once the breakpoint is reached, you can patch anything you need. This way you don’t need to bother with making an unpacked executable and bypassing anti-unpacking protections (if there are any).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 2, 2020 at 14:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}