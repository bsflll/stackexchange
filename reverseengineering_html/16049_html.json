{
    "title": "ESP out of range of \"Stack View\" in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/16049/esp-out-of-range-of-stack-view-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A very similar (or exact) question was asked\n  <a href=\"https://reverseengineering.stackexchange.com/questions/12204/unable-to-view-stack-and-memory-addresses-in-ida-pro\">\n   here\n  </a>\n  , though it was not answered properly.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Mvel0.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Mvel0.png\"/>\n  </a>\n </p>\n <p>\n  I am debugging a process in IDA and am unable to view the dynamic contents of the stack because its value points beyond the address shown in IDA's\n  <code>\n   Stack view\n  </code>\n  . My ESP is shown as pointing to\n  <code>\n   0xFFFFD95C\n  </code>\n  upon entry at\n  <code>\n   main\n  </code>\n  , while the largest address shown by IDA is\n  <code>\n   0xFEFFFFFC\n  </code>\n  .\n </p>\n <p>\n  Is there a way to expand this memory range to the end of memory (i.e.\n  <code>\n   0xFFFFFFFF\n  </code>\n  )?\n </p>\n <p>\n  For those interested, the binary under test is the\n  <code>\n   ELF Crack Me 1 - Time to learn x86 ASM & gdb\n  </code>\n  challenge over at\n  <a href=\"http://ringzer0team.com\" rel=\"nofollow noreferrer\">\n   ringzer0team.com\n  </a>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "debugging",
        "stack"
    ],
    "user": "sherrellbc",
    "time": "Aug 10, 2017 at 4:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems you're using the GDB debugger backend. It does not provide enough information to IDA about available memory ranges, about which you usually get  a warning on startup:\n </p>\n <pre><code>---------------------------\nInformation\n---------------------------\nThe current debugger backend (gdb) does not provide memory information to IDA.\nTherefore the memory contents may be invisible by default.\nPlease use the Debugger/Manual memory regions menu item to configure the memory layout.\nIt is possible to define just one big region for the whole memory\n(IDA will display question marks for missing memory regions in this case).\n---------------------------\nOK   \n---------------------------\n</code></pre>\n <p>\n  So IDA defaults to 0-0xFF000000 (addresses above 0xFF000000 are used by IDA for internal netnode IDs and may lead to issues if used in actual program). So there are two solutions:\n </p>\n <ol>\n  <li>\n   <p>\n    Edit the memory regions made by IDA (Edit-Manual memory regions...) and add  a new one covering the regions you need (e.g. 0 to 0xFFFFFFF0, or a few smaller ones).\n   </p>\n  </li>\n  <li>\n   <p>\n    Instead of GDB, use IDA's own Linux debugger which can properly query the OS about available memory regions.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 10, 2017 at 9:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sherrellbc",
                    "text": "<span class=\"comment-copy\">This is using GDB as shown. Specifically, I was debugging a remote program by running a GDB server elsewhere. Can the Linux debugger still be used in this case? Otherwise, great solution.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">yes, you can use linux remote debug server.</span>",
                    "time": null
                },
                {
                    "user": "sherrellbc",
                    "text": "<span class=\"comment-copy\">Must the <code>Remote Linux debugger</code> be used on a Linux host? I have IDA for Windows, but was remotely debugging a Linux process. Can the remote debugger still be used in this case?</span>",
                    "time": null
                },
                {
                    "user": "sherrellbc",
                    "text": "<span class=\"comment-copy\">Indeed it can. I found this solution suggesting to copy <code>linux_server[x64]</code> to the remote Linux host: <a href=\"https://reverseengineering.stackexchange.com/questions/11516/how-to-setup-ida-pro-linux-server\" title=\"how to setup ida pro linux server\">reverseengineering.stackexchange.com/questions/11516/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}