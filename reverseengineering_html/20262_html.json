{
    "title": "Why are there so much more functions in ida than my source code?",
    "link": "https://reverseengineering.stackexchange.com/questions/20262/why-are-there-so-much-more-functions-in-ida-than-my-source-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to learn how to use IDA Pro 6.8 to analyze binaries. However, there are much more functions in ida function list than my code. For example, there is a function in source code that calls four callee functions, two global functions and two public function of a class. But, in ida, it has more than ten callees, if I print the\n  <code>\n   line.points.size()\n  </code>\n  . It is recognized as a function in ida. line is my class, points is a vector variable of line. The function in ida is named\n  <code>\n   std::vector<std::vector<Point *,std::allocator<Point *>>,std::allocator<std::vector<Point *,std::allocator<Point *>>>>::size(void)\n  </code>\n  . So it caused that the number of callee is not equal to the number in source. Why are there so much more functions that are not defined as function in my source? How can I recognize which function in ida is the function I define and which one is added by ida?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly",
        "c++",
        "c"
    ],
    "user": "greagen",
    "time": "Jan 2, 2019 at 12:20",
    "comments": [
        {
            "user": "user3629249",
            "text": "<html><body><span class=\"comment-copy\">\n this question is not about 'C' so the 'c' tag should be removed\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "greagen",
            "text": "<html><body><span class=\"comment-copy\">\n C programs are also my analysis targets. I don not know whether it is about c/c++ compilation rules. So, I add c tag.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user3629249",
            "text": "<html><body><span class=\"comment-copy\">\n The posted code is using C++ templates, so the code, you posted, is not about 'c'\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You just discovered why templates are accused of code bloat.\n </p>\n <p>\n  That function is not added by IDA but instead by the compiler when it expanded the templated class\n  <code>\n   std::vector<std::vector<Point*>>\n  </code>\n  and generated all its member functions. Every std::vector with a different template parameter is considered a separate type. So\n  <code>\n   std::vector<int>::size()\n  </code>\n  and\n  <code>\n   std::vector<float>::size()\n  </code>\n  are separate functions however a sufficiently smart compiler/linker with high enough optimization settings will see that the code of the two is the exact same and be able to combine them.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "ratchet freak",
            "time": "Jan 2, 2019 at 14:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "greagen",
                    "text": "<span class=\"comment-copy\">Thanks，you helped me solve the first problem, as for the second one, can I distinguish the functions that I defined in my code without function name? I mean that if the binary is stripped, its symbols are not availble, When given the dissasemble functions in ida, is there any difference between functions I defined and that expanded by compiler? For example, some tags?property？ so that I can find my own functions.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A compiler has to translate the language that you know (C++) to the language that the computer knows.  A linker then links together your code with referenced libraries and creates an executable.  In order to turn it back into a form that you can read, IDA reads the computer's language and translates it into a disassembly.  Both compilation and disassembly are complicated processes.\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2580/why-is-disassembly-not-an-exact-science\">\n   Disassembly itself is a hard problem\n  </a>\n  , including function identification and boundary detection.  In addition to inaccuracies in the disassembly process, the executable building process does several things.\n </p>\n <p>\n  First, your source code is translated into machine code, and all modern compilers have various heuristics and rules they use to optimize the code.  Take a look at the\n  <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\" rel=\"nofollow noreferrer\">\n   docs for gcc\n  </a>\n  and the\n  <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/ox-full-optimization?view=vs-2017\" rel=\"nofollow noreferrer\">\n   docs for Visual Studio\n  </a>\n  .  Sometimes this means decreasing the number of functions (for example, inlining), and sometimes it means increasing (for example, thunks).\n </p>\n <p>\n  Second, either implicitly or explicitly, your source code is referencing lots of other source code, with includes, and includes within those included files, and includes within those included files... some of which cause the linker to dynamically link (add references to) libraries, and some of which cause the linker to statically link (copy and append to your code) those libraries.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "knowmalware",
            "time": "Jan 3, 2019 at 0:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}