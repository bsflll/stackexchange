{
    "title": "Cannot call function (properly) in ollydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/3374/cannot-call-function-properly-in-ollydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need some help regarding calls in assembly with Ollydbg.\nI'm messing around with a simple application.\nSo far, so good, I created a codecave for myself to add some code.\n </p>\n <p>\n  But whenever I try to create a call to a function outside my debugged executable module to, for example, a\n  <code>\n   kernel32\n  </code>\n  or\n  <code>\n   msvcrt\n  </code>\n  function, it messes everything up.\n </p>\n <p>\n  Let's look at some random call in the application:\n </p>\n <pre><code>0041D654     FF15 DC714200  CALL DWORD PTR DS:[<&KERNEL32.GetCommandLineA>]\n</code></pre>\n <p>\n  When I double click it, it shows me\n  <code>\n   CALL DWORD PTR DS:[4271DC]\n  </code>\n  So,\n  <code>\n   4271DC\n  </code>\n  seems to point to\n  <code>\n   76FB496D\n  </code>\n  , which is, indeed:\n </p>\n <pre><code>76FB496D >-FF25 60070177    JMP DWORD PTR DS:[<&api-ms-win-core-processenvironment-l1-2-0.Get> ;KERNELBA.GetCommandLineA\n</code></pre>\n <p>\n  Well, I just stole that from the application itself.\nNow I want to create a call to\n  <code>\n   kernel32\n  </code>\n  myself.\nI assemble a line and enter\n  <code>\n   CALL DWORD PTR DS:[Kernel32.GetCommandLineA]\n  </code>\n  Now it's saying:\n </p>\n <pre><code>0041D654     FF15 6D49FB76  CALL DWORD PTR DS:[KERNEL32.GetCommandLineA]\n</code></pre>\n <p>\n  Looking good!\n </p>\n <p>\n  Assemble the line\n  <code>\n   CALL DWORD PTR DS:[76FB496D]\n  </code>\n  . Giving this a run works fine ofcourse, but whenever I run it like this on another pc, all hell breaks loose.\n </p>\n <p>\n  My question is: How can I make such an pointer\n  <code>\n   CALL DWORD PTR DS:[4271DC]\n  </code>\n  , so the code runs on all pc's?\n </p>\n <p>\n  I can of course use\n  <code>\n   CALL DWORD PTR DS:[4271DC]\n  </code>\n  in the application to call the function\n  <code>\n   getcomandlineA\n  </code>\n  whenever I want, but I don't know the (dynamic?) pointer to, let's say,\n  <code>\n   kernel32.lstrcpy\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "Dennis van den Berg",
    "time": "Jan 7, 2014 at 9:05",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n You can disable ASLR by editing in a PE editor such as CFF Explorer. Then it will work on all machines.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n When ASLR is enable you can do something like this to find the LoadLibrary function:\n <a href=\"https://code.google.com/p/w32-dl-loadlib-shellcode/source/browse/trunk/w32-dl-loadlib-shellcode.asm\" rel=\"nofollow noreferrer\">\n  code.google.com/p/w32-dl-loadlib-shellcode/source/browse/trunk/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The address at 004271DC is resolved at the application start via the executable Imports. Those addresses are different for every executable. The address where the module and functions are loaded (here 76FB496D) is also not guaranteed to always stay the same so you shouldn't hardcode them.\n </p>\n <p>\n  A generic method to call a function in any executable is to dynamically import it with LoadLibrary and GetProcAddress as described here :\n  <a href=\"https://stackoverflow.com/questions/8696653/dynamically-load-a-function-from-a-dll\">\n   https://stackoverflow.com/questions/8696653/dynamically-load-a-function-from-a-dll\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you just want to use a single\n  <code>\n   CALL\n  </code>\n  , you need to make sure that your target API function is statically imported. You can use a tool like\n  <a href=\"http://www.woodmann.com/collaborative/tools/index.php/IIDKing\" rel=\"nofollow\">\n   IIDKing\n  </a>\n  to add your target API function to your PE file's static imports.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Jan 7, 2014 at 2:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Call to hard-coded addresses will not work for different reasons, the most obvious is ASLR, which randomizes the base address of every DLL, which means that the function address will be different at every boot.\n </p>\n <p>\n  Solving this issue is far from simple as the use of\n  <code>\n   LoadLibrary\n  </code>\n  and\n  <code>\n   GetProcAddress\n  </code>\n  , classically used by developers to dynamically import DLL will also have a dynamic address, so you can't use them to determine the address of your sought function.\n </p>\n <p>\n  To solve this issue you have to use shellcode techniques; in other words you will have to include assembly code that parse the\n  <code>\n   PEB\n  </code>\n  structure to determine the base address of Kernel32 address, search for your function in export table and finally use the it.\n </p>\n <p>\n  Another more advanced techniques for more complex usage is the use of reflective DLL injection, but it is a bit far from what you are looking for.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "3asm_",
            "time": "Jan 7, 2014 at 14:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}