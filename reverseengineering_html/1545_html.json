{
    "title": "Linux protectors: any good one out there?",
    "link": "https://reverseengineering.stackexchange.com/questions/1545/linux-protectors-any-good-one-out-there",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know no one that works as of today (i.e., kernels not way too old) and I wonder if anybody found or knows any protector for Linux either commercial, open source, used in malware, etc...\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 3,
    "views": "1k",
    "tags": [
        "linux",
        "unpacking"
    ],
    "user": "joxeankoret",
    "time": "Apr 3, 2013 at 16:28",
    "comments": [
        {
            "user": "Denis Laskov",
            "text": "<html><body><span class=\"comment-copy\">\n You also may look on this thread of security.stackexchange.com :\n <a href=\"http://security.stackexchange.com/questions/1069/any-comprehensive-solutions-for-binary-code-protection-and-anti-reverse-engineer\">\n  Any comprehensive solutions for binary code protection and anti-reverse-engineering?\n </a>\n It include both links to external articles and some valuable input. Bit outdated(2010-2011), but still relevant.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "jvoisin",
            "text": "<html><body><span class=\"comment-copy\">\n This is also related to\n <a href=\"http://reverseengineering.stackexchange.com/questions/3184/packers-protectors-for-linux\">\n  this\n </a>\n question.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a nice article on Linux binary code protection at\n  <a href=\"http://www.intel-assembler.it/portale/5/linux-binary-code-protection/linux-binary-code-protection.asp\" rel=\"noreferrer\">\n   http://www.intel-assembler.it/portale/5/linux-binary-code-protection/linux-binary-code-protection.asp\n  </a>\n  .\n </p>\n <p>\n  If your target is to protect your binary Sentinel HASP supports Linux.\n </p>\n <p>\n  As for the old ones as you mention most of them don't work anymore, elf-encrypter Shiva, Burneye etc. IF I had to guess what will be the most common in Linux malware it will be  the most common packer that's is used in windows too, UPX.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Nicolas",
            "time": "Apr 3, 2013 at 19:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">the link is dead</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ZVrba's Phrack article on\n  <a href=\"http://phrack.org/issues.html?issue=63&id=13#article\" rel=\"nofollow noreferrer\">\n   cryptexec: Next-generation runtime binary encryption\n  </a>\n  is a good read and it doesn't rely on additional kernel functionality:\n </p>\n <blockquote>\n  <p>\n   This article describes a\n  method to control the target program that doesn't does not rely on\n  any assistance from the OS kernel or processor hardware. The method\n  is implemented in x86-32 GNU AS (AT&T syntax). Once the controlling\n  method is devised, it is relatively trivial to include on-the-fly\n  code decryption.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "5",
            "user": "0xea",
            "time": "Apr 3, 2013 at 16:53",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The majority of modern ELF binaries are protected using UPX or a variant thereof.\n  <sup>\n   1,2\n  </sup>\n  However, custom packers have been observed in the wild, including both UPX based- and non-UPX based-custom packers.\n </p>\n <ul>\n  <li>\n   The simplest variation of the UPX packer used out in the wild is the\n   <a href=\"https://i.sstatic.net/AUgrm.jpg\" rel=\"nofollow noreferrer\">\n    'LSD' packer\n   </a>\n   , in which the string 'UPX' is changed to 'LSD'. An example of this was a\n   <a href=\"https://www.fortinet.com/blog/threat-research/rocke-variant-ready-to-box-mining-challengers.html\" rel=\"nofollow noreferrer\">\n    XMR coin miner written in Go which targeted systems running Jenkins\n   </a>\n   .\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    <strong>\n     <code>\n      mumblehard\n     </code>\n    </strong>\n    custom protector - not based on UPX\n   </p>\n   <blockquote>\n    <p>\n     The whole packer actually consists of about 200 assembly instructions.\n  Another notable observation: system calls are made directly by using\n     <code>\n      int 80h\n     </code>\n     instructions. Another hint that it was written in assembly is that functions do not have the usual prologue to manage the stack. By doing system calls with interrupts, Mumblehard ELF binaries avoid any external dependency.\n  Furthermore, the packer works on both Linux and BSD systems.\n     <sup>\n      1\n     </sup>\n    </p>\n   </blockquote>\n   <p>\n    samples:\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=6fe8c28022c0acb99ce1c48214043dee\" rel=\"nofollow noreferrer\">\n      20b567084bcc6bd5ac47b2ab450bbe838ec88fc726070eb6e61032753734d233\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=8c0ed8b22000d7493aa94a0c2e587a4c\" rel=\"nofollow noreferrer\">\n      78c19897d08e35c0e50155c87f501e20f2d1dbfd38607fc8e12711d086d52204\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=88b62d23b9f2b6f866774b82962442d7\" rel=\"nofollow noreferrer\">\n      84dfe2ac489ba41dfb25166a983ee2d664022bbcc01058c56a1b1de82f785a43\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=86f0b0b74fe8b95b163a1b31d76f7917\" rel=\"nofollow noreferrer\">\n      747d985d4bd302e974474dc9ab44cb1f60cb06206f3639c5d603db94395b877b\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=3437bd29e5c8fe493603581dbb0285c7\" rel=\"nofollow noreferrer\">\n      9512cd72e901d7df95ddbcdfc42cdb16141ff155e0cb0f8321069212e0cd67a8\n     </a>\n    </li>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=b1338cd9b5a853d8920f5a868108135b\" rel=\"nofollow noreferrer\">\n      a5915c3060f5891242514b7899975393ef3d3cb87b33b6a767cffce4feac215f\n     </a>\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <p>\n    a variant of\n    <strong>\n     <code>\n      tiny XMR mooner\n     </code>\n    </strong>\n    uses a custom packer according to the r2con 2018 presentation\n    <a href=\"https://github.com/radareorg/r2con2018/blob/master/talks/unpacking/Unpacking-a-Non-Unpackables.pdf\" rel=\"nofollow noreferrer\">\n     Unpacking the Non-Unpackable\n    </a>\n    .\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://www.virustotal.com/gui/file/8a0d9c84cfb86dd1f8c9acab87738d2cb82106aee0d88396f6fa86265ff252dd/detection\" rel=\"nofollow noreferrer\">\n      8a0d9c84cfb86dd1f8c9acab87738d2cb82106aee0d88396f6fa86265ff252dd\n     </a>\n    </li>\n    <li>\n     <p>\n      md5sum from presentation:\n      <code>\n       4f1fdacaee8e3c612c9ffbbe162042b2\n      </code>\n     </p>\n     <p>\n      Note this particular file was the subject of\n      <a href=\"https://xorl.wordpress.com/2017/12/21/the-tiny-xml-mooner-linux-cryptominer-malware/\" rel=\"nofollow noreferrer\">\n       The “Tiny XMR mooner” Linux cryptominer malware\n      </a>\n      (the sha256 sum is identical) but no mention is made in this analysis of packing or any other form of binary protection.\n     </p>\n    </li>\n   </ul>\n  </li>\n </ul>\n <hr/>\n <ul>\n  <li>\n   <strong>\n    <code>\n     Tsunami\n    </code>\n   </strong>\n   with custom packer\n   <ul>\n    <li>\n     <a href=\"https://malshare.com/sample.php?action=detail&hash=171edd284f6a19c6ed3fe010b79c94af\" rel=\"nofollow noreferrer\">\n      Malshare sample\n     </a>\n    </li>\n    <li>\n     <a href=\"https://www.virustotal.com/gui/file/f22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863/detection\" rel=\"nofollow noreferrer\">\n      f22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863\n     </a>\n     (Virustotal)\n    </li>\n    <li>\n     there used to be an analysis available at\n     <a href=\"http://pwning.fun/article/2017/11/17/UnPacking_a_Linux_Tsunami_Sample.html\" rel=\"nofollow noreferrer\">\n      pwning.fun\n     </a>\n     but it looks like its been taken down.\n    </li>\n   </ul>\n  </li>\n </ul>\n <h3>\n  References\n </h3>\n <ol>\n  <li>\n   <p>\n    <a href=\"http://www.s3.eurecom.fr/docs/oakland18_cozzi.pdf\" rel=\"nofollow noreferrer\">\n     Understanding Linux Malware\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"http://s3.eurecom.fr/~invano/slides/recon18_linux_malware.pdf\" rel=\"nofollow noreferrer\">\n     Modern Linux Malware Exposed\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://www.welivesecurity.com/wp-content/uploads/2015/04/mumblehard.pdf\" rel=\"nofollow noreferrer\">\n     Unboxing Linux/Mumblehard\n    </a>\n    (2015) - ESET\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "julian",
            "time": "Jul 5, 2019 at 7:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}