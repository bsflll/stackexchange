{
    "title": "How is DS register interpreted in x86-64 assembly instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/20135/how-is-ds-register-interpreted-in-x86-64-assembly-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA disassembled an x86-64 instruction as below:\n </p>\n <pre><code>0000000000000761                 lea     rdx, ds:0[rax*4]\n</code></pre>\n <p>\n  What I know is, segment registers are only relevant in in segmented memory model, while in case of paging they hold an index in GDT/LDT. Why is the above instruction, out of nowhere, referring to the\n  <code>\n   ds\n  </code>\n  segment register?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "segmentation"
    ],
    "user": "sherlock",
    "time": "Dec 14, 2018 at 18:47",
    "comments": [
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n Ubuntu 18.04, 64 bit\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n The fact that you are not using a segmented memory model doesn’t mean the instruction encoding doesn’t allow you to specify the segment :) Basically on x86_64 the only relevant segment is gs, but a disassembler might still show other segment registers (implicitly) encoded in instructions...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Segments are still used on 64 bit long mode and are still set up, except the CPU treats their bases to be 0 (except for gs and fs), and does not perform a limit check. The default segment for rax is indeed\n  <code>\n   ds\n  </code>\n  , but this can be changed with a segment override.\n  <code>\n   lea rdx, ds:0[rax*4]\n  </code>\n  is\n  <code>\n   lea rdx, ds:[rax*4 + 0]\n  </code>\n  , which is\n  <code>\n   lea rdx, ds:[rax*4]\n  </code>\n  , which is the same as\n  <code>\n   lea rdx, [rax*4]\n  </code>\n  in that when that instruction is executed, the AGU uses the\n  <code>\n   ds\n  </code>\n  segment descriptor by default for\n  <code>\n   rax\n  </code>\n  to perform privilege checks, but not limit or base checks. This segment descriptor is either renamed and is placed in the reservation station (and hence it is the job of the decoder and allocator to use the correct segment descriptor based on the prefix override or lack thereof) or is internal to the AGU and the AGU uses the uop opcode which might encode the segment to use. I have also seen\n  <code>\n   lea rdx, [ds:rax]\n  </code>\n  notation, which is the same thing as\n  <code>\n   lea rdx, ds:[rax]\n  </code>\n  , but the problem is\n  <code>\n   lea rdx, [ds:rax*4]\n  </code>\n  would be semantically misleading, as on x86 you can only do\n  <code>\n   lea rdx, ds:[rax*4]\n  </code>\n  . I believe that\n  <code>\n   gs:[0x32]\n  </code>\n  ,\n  <code>\n   gs:0x32\n  </code>\n  and\n  <code>\n   [gs:0x32]\n  </code>\n  all represent the same thing in x86 assemblies / disassemblies, for instance\n  <code>\n   gs:0x32\n  </code>\n  does not mean 'get the calculated linear address of\n  <code>\n   gs:0x32\n  </code>\n  ', because we have\n  <code>\n   lea\n  </code>\n  for that, and\n  <code>\n   gs:[0x32]\n  </code>\n  does not mean 'get the address at value at\n  <code>\n   ds:[0x32]\n  </code>\n  and then use that as an offset into gs and get the calculated linear address', therefore the other 2 forms can safely represent\n  <code>\n   [gs:0x32]\n  </code>\n  , and as mentioned\n  <code>\n   gs:[...]\n  </code>\n  is more clear as it acts as precedence demarcation when a scale or index is involved\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Lewis Kelsey",
            "time": "Feb 21, 2021 at 19:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}