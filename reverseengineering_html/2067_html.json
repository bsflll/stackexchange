{
    "title": "How to view the instruction pipeline?",
    "link": "https://reverseengineering.stackexchange.com/questions/2067/how-to-view-the-instruction-pipeline",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Instruction pipelining is used to execute instructions in a parallel fashion by dividing them into several steps .When I pause the execution in a debugger I am only able to see the location of the eip register but not the current pipeline state. Is there a way to find out ?\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "300",
    "tags": [
        "machine-code"
    ],
    "user": "viv",
    "time": "May 21, 2013 at 21:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  No, a debugger views code sequentially whereas a cpu may reorder code on the fly before it gets executed and even execute more than one instruction at a time. This is the case even for Simulators like Bochs. Simics on the other hand might implement something more in line with reality but I doubt it.\n </p>\n <p>\n  Essentially the pipeline is supposed to be transparent to the programmer. As execution wise it should function the same as a single cycle implementation even though the performance would be much different.\n </p>\n <p>\n  If you want the see the effect of passing different instructions through a pipeline what you want is a profiler.\n </p>\n <p>\n  If you want a tool that will allow you to analyse the progress of the uOPs through the entire pipeline look for things like\n  <a href=\"http://marss86.org/~marss86/index.php/Home\">\n   Marss86\n  </a>\n  which simulates down to the uOp level and will allow you to see the goings on inside the pipeline at least of the architecture they simulate. Note that there are various implementations of the x86 pipelines and your simulator of choice may or may not implement the exact one you are intending to target.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "cb88",
            "time": "May 21, 2013 at 23:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\"><b>Addenda to the cb88 answer</b>: You may also take a look at <a href=\"http://valgrind.org/docs/manual/cg-manual.html\" rel=\"nofollow noreferrer\">cachegrind</a> and <a href=\"http://valgrind.org/docs/manual/cl-manual.html\" rel=\"nofollow noreferrer\">callgrind</a>, which are simulating the execution of your code on a given architecture. If you instrument the code of these tools, you might get some information about the state of the pipeline. But, as cb88 said, you may not implement the exact one you are intending to target.</span>",
                    "time": null
                }
            ]
        }
    ]
}