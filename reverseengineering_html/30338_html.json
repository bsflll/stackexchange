{
    "title": "how to get indirect callsite function return type and arguments",
    "link": "https://reverseengineering.stackexchange.com/questions/30338/how-to-get-indirect-callsite-function-return-type-and-arguments",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using idapython to get function return type and arguments @ an indirect call instruction.\n </p>\n <p>\n  I was able to sync ida disassembler with hexrays decompiler as asked\n  <a href=\"https://reverseengineering.stackexchange.com/questions/30252/idapython-how-to-get-decompiler-output-corresponding-to-the-indirect-call/30258#30258\">\n   here\n  </a>\n  and I can now get decompiled output for specific instruction. For e.g.\n </p>\n <p>\n  for instruction:\n </p>\n <pre><code>call    rdx\n</code></pre>\n <p>\n  I can get:\n </p>\n <pre><code>v4 = ((__int64 (__fastcall *)(_QWORD))fn2)(b) + v3;\n</code></pre>\n <p>\n  My final goal is to get function return type for e.g. in above case it could be the type of variable\n  <code>\n   v4\n  </code>\n  and argument types, for e.g. type of variable\n  <code>\n   b\n  </code>\n  . So, say the function can possibly be:\n </p>\n <pre><code>return type: int\narg1 type: int\n....\n</code></pre>\n <p>\n  I want to get these for indirect callsites.\n </p>\n <p>\n  I checked the hexrays api but I believe there isn't any function which can give me return type and argument types/ count at a certain callsite.\n </p>\n <p>\n  One way to achieve this may be to extract arguments using regex for e.g. in above case\n  <code>\n   b\n  </code>\n  and then hunt their type by searching through\n  <code>\n   lvars\n  </code>\n  method from decompiled object. But, it seems like a lot of work (and maybe error prone) for seemingly easier problem using some internal ida functions.\n </p>\n <p>\n  Could you please give many any directions on how to solve this? really appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "564",
    "tags": [
        "ida",
        "idapython",
        "hexrays"
    ],
    "user": "R4444",
    "time": "Apr 28, 2022 at 3:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Don't use regular expressions. Generally speaking, never use regular expressions to solve problems in IDA. All of the text you'd be operating upon is available as data via the API, which provides a normalized form and can resolve ambiguities. Anyway, your rough plan of attack here is as follows:\n </p>\n <ol>\n  <li>\n   Although it's not strictly necessary, I'm going to strongly recommend\n   <a href=\"https://github.com/patois/HRDevHelper\" rel=\"nofollow noreferrer\">\n    installing HRDevHelper and using it often\n   </a>\n   . Any time you wonder \"how is X represented in the Hex-Rays ctree data structures?\", the fastest way to find out is to invoke HRDevHelper via its keyboard shortcut (default\n   <kbd>\n    ctrl\n   </kbd>\n   +\n   <kbd>\n    .\n   </kbd>\n   ), see the answer visually, and then go to\n   <code>\n    hexrays.hpp\n   </code>\n   in the SDK for more specifics. (Note, you may want to change the default colors in the configuration file for HRDevHelper).\n  </li>\n  <li>\n   After having done so, locate an indirect call in the decompilation, and use HRDevHelper to view its representation. Here's what we see for the following decompilation\n   <code>\n    (*(void (__fastcall **)(struct BINDING_HANDLE *, __int64))(*(_QWORD *)v5 + 8i64))(v5, 1i64);\n   </code>\n   :\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/EY1l2.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"HRDevHelper output\" src=\"https://i.sstatic.net/EY1l2.png\"/>\n  </a>\n </p>\n <ol start=\"3\">\n  <li>\n   <p>\n    Looking at the figure, we see that calls are represented by\n    <code>\n     cot_call\n    </code>\n    expressions, whose\n    <code>\n     .x\n    </code>\n    member describes the destination of the call. For indirect calls (like the one in the figure), we can see that the node for\n    <code>\n     .x\n    </code>\n    (off to the left) has the text\n    <code>\n     ptr.8\n    </code>\n    at the top. This indicates that\n    <code>\n     .x\n    </code>\n    is another expression of type\n    <code>\n     cot_ptr\n    </code>\n    . We can also see that the left\n    <code>\n     ptr.8\n    </code>\n    node has the function type printed inside of it. In fact, the type is stored in a\n    <code>\n     tinfo_t\n    </code>\n    object held within the\n    <code>\n     .x.type\n    </code>\n    member, and HRDevHelper is simply printing it for us.\n   </p>\n  </li>\n  <li>\n   <p>\n    To summarize: find\n    <code>\n     cot_call\n    </code>\n    expressions whose\n    <code>\n     .x\n    </code>\n    member does not have type\n    <code>\n     cot_obj\n    </code>\n    (as this is how direct calls are represented). Look at the\n    <code>\n     .x.type\n    </code>\n    member to determine the type of the indirect call. You're going to want to take a look at the\n    <code>\n     func_type_data_t\n    </code>\n    data type and the\n    <code>\n     tinfo_t::get_func_details\n    </code>\n    member function from\n    <code>\n     typeinf.hpp\n    </code>\n    . The former is derived from a vector of\n    <code>\n     funcarg_t\n    </code>\n    objects, which contain\n    <code>\n     tinfo_t\n    </code>\n    objects for each argument. The\n    <code>\n     rettype\n    </code>\n    field also describes the function's return type.\n   </p>\n  </li>\n  <li>\n   <p>\n    Now that we know how Hex-Rays represents indirect calls, the easiest (but not the only) way to get ahold of them is to use a\n    <code>\n     ctree_visitor_t\n    </code>\n    . There are several examples in\n    <code>\n     %IDADIR%\\python\\examples\\hexrays\n    </code>\n    (grep it for\n    <code>\n     ctree_visitor_t\n    </code>\n    ); the simplest one is\n    <code>\n     vds7.py\n    </code>\n    . Give it a try; add a\n    <code>\n     visit_expr(self,expr)\n    </code>\n    method to its\n    <code>\n     cblock_visitor_t\n    </code>\n    class, try to implement the logic described in the previous bulletpoint, run the plugin, and see what happens.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Apr 28, 2022 at 5:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">this is perfect! thank you!</span>",
                    "time": null
                }
            ]
        }
    ]
}