{
    "title": "ARM shellcode for linux - svc 0 vs svc 1",
    "link": "https://reverseengineering.stackexchange.com/questions/4217/arm-shellcode-for-linux-svc-0-vs-svc-1",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Checking out Linux\n  <code>\n   ARM\n  </code>\n  shellcode I see that the system call is made by using the\n  <code>\n   svc 1\n  </code>\n  instruction. However, I have also seen\n  <a href=\"http://brnz.org/hbr/?m=201102\" rel=\"noreferrer\">\n   examples\n  </a>\n  where they use\n  <code>\n   svc 0\n  </code>\n  as the instruction that calls the system call.\n </p>\n <p>\n  Evidently, system calls in Linux on\n  <code>\n   ARM\n  </code>\n  can be performed using both\n  <code>\n   svc 0\n  </code>\n  and\n  <code>\n   svc 1\n  </code>\n  . Why is this the case as opposed to architectures such as\n  <code>\n   x86\n  </code>\n  . Are the kind of interrupts generated by both these instructions the same?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "7k",
    "tags": [
        "arm",
        "shellcode"
    ],
    "user": null,
    "time": "Apr 30, 2014 at 20:03",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n It's the same interrupt. The #imm parameter part (0, 1 etc) is ignored by Linux IIRC.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I suppose you should check\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0179b/ar01s02s07.html\" rel=\"nofollow\">\n   this\n  </a>\n  part of the\n  <code>\n   ARM\n  </code>\n  documentation, and\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/Cihidabi.html\" rel=\"nofollow\">\n   this\n  </a>\n  description of\n  <code>\n   svc\n  </code>\n  and its parameters. By cross referencing the two links you'll find an answer to your question.\n </p>\n <p>\n  From the links above you'll be able to understand what the parameter of the\n  <code>\n   svc\n  </code>\n  instruction represents. It is supposed to be ignored by the\n  <code>\n   CPU\n  </code>\n  but the exception handler can use that parameter to determine the service being requested :\n  <code>\n   ARM\n  </code>\n  instruction if the value is between 0 & 16777215, or\n  <code>\n   Thumb\n  </code>\n  instruction if the value is between 0 & 255.\n </p>\n <p>\n  The thumb instruction set is a compact 16bit encoding for ARM instructions. It was mainly designed & implemented for compact code-density. You can check the\n  <a href=\"https://en.wikipedia.org/wiki/ARM_Thumb#Thumb\" rel=\"nofollow\">\n   Wikipedia\n  </a>\n  page about the\n  <code>\n   ARM\n  </code>\n  architecture for more information, but I would recommend you going through the\n  <code>\n   ARM\n  </code>\n  documentation for accurate technical details.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "yaspr",
            "time": "May 2, 2014 at 11:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">could you add a short answer derived from those links ?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Here we go :done !</span>",
                    "time": null
                }
            ]
        }
    ]
}