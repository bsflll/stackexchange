{
    "title": "Function Prologue, add esp directive",
    "link": "https://reverseengineering.stackexchange.com/questions/23481/function-prologue-add-esp-directive",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to see how a DLL was written and I am using a x32dbg to do it at run-time. I am a newbie to this reversing stuff, so I am confused with this piece of code:\n </p>\n <pre><code>push    ebp                          ; DllMain entry point\nmov     ebp, esp\nadd     esp, FFFFFFBC\nxor     eax, eax\nmov     dword ptr ss:[ebp-44], eax\nmov     eax, module.8BC3980\ncall    module.8BB8D54\nxor     eax, eax\n</code></pre>\n <p>\n  Wikipedia says the following about function prologues:\n </p>\n <blockquote>\n  <p>\n   A function prologue typically does the following actions if the architecture has a base pointer (also known as frame pointer) and a stack pointer:\n  </p>\n  <p>\n   Pushes current base pointer onto the stack, so it can be restored later.\n  </p>\n  <p>\n   Assigns the value of stack pointer (which is pointed to the saved base pointer) to base pointer so that a new stack frame will be created on top of the old stack frame.\n  </p>\n  <p>\n   Moves the stack pointer further by decreasing or increasing its value, depending on whether the stack grows down or up. On x86, the stack pointer is decreased to make room for the function's local variables.\n  </p>\n  <p>\n   [...]\n  </p>\n  <p>\n   As an example, here′s a typical x86 assembly language function prologue as produced by the GCC\n  </p>\n  <pre><code>push   ebp\nmov    ebp, esp\nsub    esp, N\n</code></pre>\n </blockquote>\n <p>\n  But I have encountered an\n  <code>\n   add esp, N\n  </code>\n  directive which adds a huge number to\n  <code>\n   esp\n  </code>\n  register. It seems something is wrong here, what should I understand from the code exactly?\n </p>\n <p>\n  And the second question is about\n  <code>\n   mov dword ptr ss:[ebp-44], eax\n  </code>\n  directive. Why it is 44 that is subtracted from\n  <code>\n   ebp\n  </code>\n  address (11 ints!) and what does the\n  <code>\n   ss\n  </code>\n  item here?\n </p>\n <p>\n  PS I suspect that the DLL is written in Delphi, but not 100% sure.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "292",
    "tags": [
        "dll",
        "x64dbg",
        "delphi"
    ],
    "user": "StaticZero",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n adding\n <code>\n  FFFFFFBC\n </code>\n is equal to subtracting\n <code>\n  68\n </code>\n as the value will wrap around.\n <code>\n  FFFFFFBC + 0x44 = 0\n </code>\n when we are dealing with dwords.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "StaticZero",
            "text": "<html><body><span class=\"comment-copy\">\n So stack was enlarged to contain 11 dwords (ints), then eax = 0, then this zero is written to the top of the stack entirely as dword, right?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The large integer that is added to ESP is negative and is used to move the stack pointer to a an address that allows 0x44 bytes on the stack for the current function.\n </p>\n <p>\n  At this point, ESP=EBP-0x44. So, EBP-0x44 is essentially, [ESP].\nIt is equivalent to\n  <code>\n   PUSH EAX\n  </code>\n  , as a parameter for the\n  <code>\n   CALL\n  </code>\n  that comes next.\n </p>\n <p>\n  The\n  <code>\n   ss:\n  </code>\n  is a selector which indicates that the \"base\" of the mentioned address is on the stack.\nIn a linear memory system it has no practical meaning.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Yotamz",
            "time": "Mar 21, 2020 at 17:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "StaticZero",
                    "text": "<span class=\"comment-copy\">So eax=0 is pushed onto the stack, then 8BC3980 is loaded into eax and finally the call?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">Yes. Different compilers sometimes produce different or unusual calling conventions. EAX cannot be expected to stay the same after a call but your function does put a value in EAX before the call, therefore we can assume that EAX is one argument and the value on the stack is another one. Delphi may very well generate this unusual convention.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you should normally take a pencil and paper and try solving it\n </p>\n <p>\n  ill use python here\n </p>\n <pre><code>>>> ebp = 0x1000\n>>> esp = ebp\n>>> esp = ( esp + 0xffffffbc )& 0xffffffff\n>>> print(hex(esp),hex(ebp-0x44))\n0xfbc 0xfbc\n>>>\n</code></pre>\n <p>\n  It will write 0 to the Address 0xfbc if ebp were 0x1000 to start with\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 21, 2020 at 9:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}