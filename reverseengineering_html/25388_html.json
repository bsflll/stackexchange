{
    "title": "How to fix Mach-O headers from a memory-dumped binary to make it usable again?",
    "link": "https://reverseengineering.stackexchange.com/questions/25388/how-to-fix-mach-o-headers-from-a-memory-dumped-binary-to-make-it-usable-again",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to restore a binary from memory. I re-constructed the binary and analyzed it with a disassembler and it looks okay, but when inspecting the headers with otool I'm getting:\n </p>\n <pre><code>truncated or malformed object (addr field plus size of section 8 in LC_SEGMENT_64 command 0 greater than than the segment's vmaddr plus vmsize)\n</code></pre>\n <p>\n  Looking at the command:\n </p>\n <pre><code> struct __macho_segment_command_64 {\n  LC_SEGMENT_64,                       // LC_SEGMENT_64\n  0x368,                               // includes sizeof section_64 structs\n  \"__TEXT\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // segment name\n  0x0,                                 // memory address of this segment\n  0x339000,                            // memory size of this segment\n  0x0,                                 // file offset of this segment\n  0x339000,                            // amount to map from the file\n  0x7,                                 // maximum VM protection\n  0x5,                                 // initial VM protection\n  0xa,                                 // number of sections in segment\n  0               \n</code></pre>\n <p>\n  Then section 8 of that command:\n </p>\n <pre><code>struct __macho_section_64 { \n  \"__objc_classname\",                  // name of this section\n  \"__TEXT\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // segment this section goes in\n  0x2dee36,                            // memory address of this section\n  0x6a,                                // size in bytes of this section\n  0x2dee36,                            // file offset of this section\n  0x0,                                 // section alignment (power of 2)\n  0x0,                                 // file offset of relocation entries\n  0x0,                                 // number of relocation entries\n  S_CSTRING_LITERALS,                  // flags (section type and attributes\n  0x0,                                 // reserved (for offset or index)\n  0x0,                                 // reserved (for count or sizeof)\n  0x0                                  // reserved\n}\n</code></pre>\n <p>\n  vmsize of this command is\n  <code>\n   0x339000\n  </code>\n  . Section 8 starts at\n  <code>\n   0x2dee36\n  </code>\n  and is\n  <code>\n   0x6a\n  </code>\n  in size. So the section ends at\n  <code>\n   0x2DEEA0\n  </code>\n  .\n </p>\n <p>\n  I have problems understanding how this is \"addr field plus size of section 8 in LC_SEGMENT_64 command 0 greater than than the segment's vmaddr plus vmsize\" given that the VM size of this command is\n  <code>\n   0x339000\n  </code>\n </p>\n <p>\n  I'm suspecting I'm probably missing something, so my question: What adjustments are needed to restore a binary and make it executable again?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "336",
    "tags": [
        "memory-dump",
        "mach-o"
    ],
    "user": "patchrail",
    "time": "Jun 25, 2020 at 0:58",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n are you counting sections 1-based or 0-based?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "patchrail",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky thanks for this, I was indeed counting 1-based. Offsetting everything by 1 gave me the command that exceeded the VM size.  Towards the original question, would adjusting the command's vmsize and subsequent offsets be enough in header adjustments to make the binary usable again?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   otool\n  </code>\n  uses 0-based indexing for load commands and section numbers so it's probably the next section which is problematic.\n </p>\n <p>\n  Note that the OS loader only uses\n  <em>\n   segments\n  </em>\n  for mapping the image to the memory so even if the file offsets of the sections  are off it should not affect runnability of the program.  Some sections may be used by the runtime components like the dynamic loader or Objective-C runtime but normally they only use memory addresses and not file offsets.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jun 26, 2020 at 9:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}