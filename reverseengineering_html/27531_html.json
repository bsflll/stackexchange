{
    "title": "Reverse Engineering Classes in ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/27531/reverse-engineering-classes-in-arm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I came across this part in the book\n  <a href=\"https://mirrors.ocf.berkeley.edu/parrot/misc/openbooks/programming/ReverseEngineeringForBeginners.en.pdf\" rel=\"nofollow noreferrer\">\n   Reverse Engineering For Beginners\n  </a>\n  book by Denis Yurichev. It writes about reverse engineering Classes in C++, but it doesn't provide any examples in ARM.\n </p>\n <p>\n  Page 546\n </p>\n <pre><code>_this$ = -4\n; size = 4\n??0c@@QAE@XZ PROC ; c::c, COMDAT\n; _this$ = ecx\npush ebp\nmov ebp, esp\npush ecx\nmov DWORD PTR _this$[ebp], ecx\nmov eax, DWORD PTR _this$[ebp]\nmov DWORD PTR [eax], 667\nmov ecx, DWORD PTR _this$[ebp]\nmov DWORD PTR [ecx+4], 999\nmov eax, DWORD PTR _this$[ebp]\nmov esp, ebp\npop ebp\nret 0\n??0c@@QAE@XZ ENDP ; c::c\n_this$ = -4 ; size = 4\n_a$ = 8\n; size = 4\n_b$ = 12\n; size = 4\n??0c@@QAE@HH@Z PROC ; c::c, COMDAT\n; _this$ = ecx\npush ebp\nmov ebp, esp\npush ecx\nmov DWORD PTR _this$[ebp], ecx\nmov eax, DWORD PTR _this$[ebp]\nmov ecx, DWORD PTR _a$[ebp]\nmov DWORD PTR [eax], ecx\nmov edx, DWORD PTR _this$[ebp]\nmov eax, DWORD PTR _b$[ebp]\nmov DWORD PTR [edx+4], eax\nmov eax, DWORD PTR _this$[ebp]\nmov esp, ebp\npop ebp\nret 8\n??0c@@QAE@HH@Z ENDP ; c::c\n</code></pre>\n <p>\n  As you can see\n  <strong>\n   ECX\n  </strong>\n  is used to hold the pointer of this for accessing the members of the class. How is this done in ARM assembly?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "147",
    "tags": [
        "arm",
        "class-reconstruction"
    ],
    "user": "LUser",
    "time": "Apr 22, 2021 at 17:09",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n One way would be to write a simple program and compile for both architectures, and compare them. I believe this behavior may also depend on the compiler and options used.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "LUser",
            "text": "<html><body><span class=\"comment-copy\">\n This is what was done in the end. See answer below.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Because it is compiler specific , it is not required to be internally the same always. It seems though that CLANG and GCC use\n  <strong>\n   R0\n  </strong>\n  to store this.\n </p>\n <p>\n  <strong>\n   C++\n  </strong>\n </p>\n <pre><code>class MyClass {\n  int field_;\n public:\n  void set_field() { this->field_ = 42; }\n};\n\nvoid test() {\n  MyClass x;\n  x.set_field();\n}\n</code></pre>\n <p>\n  <strong>\n   ARM:\n  </strong>\n </p>\n <pre><code>test():\n        push    {r11, lr}\n        mov     r11, sp\n        sub     sp, sp, #8\n        add     r0, sp, #4\n        bl      MyClass::set_field()\n        mov     sp, r11\n        pop     {r11, lr}\n        bx      lr\nMyClass::set_field():\n        sub     sp, sp, #4\n        str     r0, [sp]\n        ldr     r1, [sp]\n        mov     r0, #42\n        str     r0, [r1]\n        add     sp, sp, #4\n        bx      lr\n</code></pre>\n <p>\n  <strong>\n   Intel :\n  </strong>\n </p>\n <pre><code>MyClass::set_field():\n        push    rbp\n        mov     rbp, rsp\n        mov     QWORD PTR [rbp-8], rdi\n        mov     rax, QWORD PTR [rbp-8]\n        mov     DWORD PTR [rax], 42\n        nop\n        pop     rbp\n        ret\ntest():\n        push    rbp\n        mov     rbp, rsp\n        sub     rsp, 16\n        lea     rax, [rbp-4]\n        mov     rdi, rax\n        call    MyClass::set_field()\n        nop\n        leave\n        ret\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "LUser",
            "time": "Apr 24, 2021 at 17:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}