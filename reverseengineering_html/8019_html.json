{
    "title": "Hikvision camera firmware reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/8019/hikvision-camera-firmware-reverse-engineering",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a camera with Hikvision firmware. The firmware file has clear text in it, for example, there's a shell script you can see in there that coincides with a shell script when I tellnet in. There's gzip tarball, but that's OK, that's how they are suppose to end up in the camera as it untars at bootup time.\n </p>\n <p>\n  I tried binwalk but comes up with lots of stuff, none if it valid. What I need to do is map what's in the file, break up the pieces, edit what I want, then reassemble it and run the firmware update.\n </p>\n <p>\n  The files seem to be in a UBIFS file system. I can copy the files out from a camera, but trying to figure out how can I replicate what's on the firmware file. I can send a sample firmware file to anyone that can help.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "14k",
    "tags": [
        "disassembly"
    ],
    "user": "carl",
    "time": "Jan 15, 2015 at 2:16",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n is it one of these?\n <a href=\"http://www.hikvision.com/en/us/download.asp\" rel=\"nofollow noreferrer\">\n  hikvision.com/en/us/download.asp\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "<html><body><span class=\"comment-copy\">\n Which camera is it? I wrote a tool to unpack and \"decrypt\" some of the firmware a year or so ago\n <a href=\"http://pastebin.com/AX88jsCG\" rel=\"nofollow noreferrer\">\n  pastebin.com/AX88jsCG\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looking at the first file from the hikvision.com/en/us/download.asp  page.\n </p>\n <p>\n  It seems to be simply a linux kernel, followed by several gzipped files, all concatenated.\n </p>\n <p>\n  I took DS-96128&256_Super_NVR_USA_Firmware_v3.0.2_141125  for example can be split using this:\n </p>\n <pre><code>dd if=digicap.dav bs=1 skip=$[0x00390790] | gzip -dc   > minixdsk.bin\nmkdir dsk1 dsk2 dsk3\ndd if=digicap.dav bs=1 skip=$[0x00639080] | gzip -dc   | tar tf - -C dsk1\ndd if=digicap.dav bs=1 skip=$[0x00B397D7] count=603  of=initscript.sh\ndd if=digicap.dav bs=1 skip=$[0x00b39a32] | gzip -dc   | tar xf - -C dsk2\ndd if=digicap.dav bs=1 skip=$[0x01585324] | gzip -dc   | tar xf - -C dsk3\ndd if=digicap.dav bs=1 skip=$[0x017E1F31] count=6966 of=1.bmp\ndd if=digicap.dav bs=1 skip=$[0x017e3a67] count=6966 of=2.bmp\ndd if=digicap.dav bs=1 skip=$[0x017E559D]  of=rest.bin\n</code></pre>\n <p>\n  you can find the offsets by looking at the hexdump, and searching for gzip header bytes:\n  <code>\n   1f 8b 08 00\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "Jan 15, 2015 at 8:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "tibar",
                    "text": "<span class=\"comment-copy\">...or use <code>binwalk</code> to dump all <code>gzip</code> offsets.</span>",
                    "time": null
                },
                {
                    "user": "carl",
                    "text": "<span class=\"comment-copy\">First, thanks for your help. Those compressed tarballs and files exists in the firmware, but they are that way in the camera, not as decompressed files (it decompresses them during bootup). So to me, the digicap.dav is a collection of concatenated files and you found the tarballs and some files. Somewhere there has to be mapping of where files start/end and what their name is so it can process them.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can also log straight into at least some of the HIKVISION devices as root while they're live.  I've only tried it on a DS-2CD2512F-IS, but if you enable ssh through the web interface, you can then ssh in direct to the device's IP as the appropriate user (usually admin).  Normally, that'll give you a protected shell with sharply limited commands.  However, ssh will take command arguments, and the DS-2CD2512F-IS (at least) will take /bin/bash as a command - which gives you full access. That'll let you do fun things like get a full file listing, modify... pretty much anything, install custom programs, modify the underlying asp and javascript files, read hardware information, et cetera, without having to deal with customizing the firmware.\n </p>\n <p>\n  So something like:\n </p>\n <p>\n  ssh admin@[Camera IP] '/bin/bash'\n </p>\n <p>\n  does wonders.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jack Simth",
            "time": "Feb 18, 2016 at 18:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jack Simth",
                    "text": "<span class=\"comment-copy\">Sadly, they removed this option from later firmware.</span>",
                    "time": null
                }
            ]
        }
    ]
}