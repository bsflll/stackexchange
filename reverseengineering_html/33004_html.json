{
    "title": "Firmware extraction of U-boot : No filesystem found via binwalk + relation between MTD partitionning and NAND subsystem",
    "link": "https://reverseengineering.stackexchange.com/questions/33004/firmware-extraction-of-u-boot-no-filesystem-found-via-binwalk-relation-betwe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently extracted the firmware (u-boot system) from an old Sagemcom router and analyzed it using the binwalk utility for a personal reverse engineering project.\n </p>\n <p>\n  Despite identifying a root filesystem (likely JFFS2 based on string analysis), binwalk was unable to recognize or extract it.\nI know that the filesystem is JFFS by examining the boot info, and performing strings analysis on my dump. (You can check the git repo given further down)\n </p>\n <h4>\n  Steps Taken:​\n </h4>\n <ol>\n  <li>\n   <strong>\n    Initial Extraction with Binwalk:\n   </strong>\n  </li>\n </ol>\n <ul>\n  <li>\n   Binwalk was used to analyze the firmware, but it failed to identify the root filesystem.\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/LVBQJJdr.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"binwalk x dd\" src=\"https://i.sstatic.net/LVBQJJdr.jpg\"/>\n  </a>\n </p>\n <ol start=\"2\">\n  <li>\n   <strong>\n    Manual Binary Segmentation:\n   </strong>\n  </li>\n </ol>\n <ul>\n  <li>\n   Based on MTD (Memory Technology Device) partitions, I attempted to segment the binary using the dd command.\n  </li>\n  <li>\n   Encountered overlapping addresses and excessive total pages exceeding 65536 (total memory size of 16MB divided by page size of 2048 bytes).\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/fzNvDCW6.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"MTD partitionning\" src=\"https://i.sstatic.net/fzNvDCW6.png\"/>\n  </a>\n </p>\n <h4>\n  Challenges:​\n </h4>\n <ul>\n  <li>\n   Translating MTD addresses to NAND offsets.\n  </li>\n  <li>\n   Understanding the relationship between MTD partitions and NAND subsystems.\n  </li>\n  <li>\n   Ensuring correct memory dumping and assembly.\n  </li>\n  <li>\n   Extracting the JFFS2 rootfs\n  </li>\n </ul>\n <p>\n  <strong>\n   Additional Information:\n  </strong>\n </p>\n <ul>\n  <li>\n   Utilized dd for binary segmentation.\n  </li>\n  <li>\n   Cleaned .dmp files to remove Out-Of-Band (OOB) data and other unnecessary lines.\n  </li>\n </ul>\n <p>\n  <strong>\n   Memory Extraction steps:\n  </strong>\n </p>\n <ul>\n  <li>\n   <strong>\n    <a href=\"https://github.com/valexand-ulb/sagemcom-router-inspection/tree/main/python_script/nand%20pages\" rel=\"nofollow noreferrer\">\n     Script that I used on my git repo\n    </a>\n   </strong>\n  </li>\n </ul>\n <ol>\n  <li>\n   <strong>\n    dump from router through UART :\n   </strong>\n   'dump_nand_memory.py' ; use\n   <code>\n    nand dump offset\n   </code>\n   to dump nand page\n  </li>\n  <li>\n   <strong>\n    assure no error in the file\n   </strong>\n   :\n   <code>\n    assure_140_lines.py\n   </code>\n  </li>\n  <li>\n   <strong>\n    clean .dmp file (dont keep oob)\n   </strong>\n   :\n   <code>\n    clean_dmp.py\n   </code>\n  </li>\n  <li>\n   <strong>\n    concatenate all .dmp file into .bin\n   </strong>\n   :\n   <code>\n    concatenated_all_to_bin.py\n   </code>\n  </li>\n  <li>\n   <strong>\n    Search for magic number in the binary for JFFS2 filesystem\n   </strong>\n   :\n   <code>\n    check_for_JFFS2.py\n   </code>\n  </li>\n </ol>\n <p>\n  <strong>\n   Questions:\n  </strong>\n </p>\n <ul>\n  <li>\n   How do I accurately convert MTD partition addresses into corresponding NAND offsets?\n  </li>\n  <li>\n   Is MTD simply an abstraction layer for NAND, or is there more complexity involved ?\n  </li>\n  <li>\n   Do I have correctly extracted memory, do I need to correct errors using OOB ?\n  </li>\n  <li>\n   Where can I find more info about u-boot, embed system, ... (doc is pretty much non existent)\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "95",
    "tags": [
        "file-format",
        "firmware-analysis",
        "binwalk",
        "dumping",
        "router"
    ],
    "user": "user372517",
    "time": "Jun 12, 2024 at 11:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There's no need for binwalk to be further utilized for JFFS2 extraction.\n </p>\n <p>\n  Since Binwak detect ubi filesystem (and not JFFS2) it is smarter to use tools like ubireader to extract it from the firmware.\n </p>\n <p>\n  So i've installed ubireader from the AUR, and performed\n  <code>\n   ubireader_extract_images firmware.bin\n  </code>\n  which cave me a set of .ubifs files that could be extracted by binwalk.\n </p>\n <p>\n  Further investigation still need to be done sine /etc/passwd & /etc/shadow from ubirootfs does not contain password hash for root user\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user372517",
            "time": "Jun 12, 2024 at 11:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}