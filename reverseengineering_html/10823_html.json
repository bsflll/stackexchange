{
    "title": "How does scanf interact with my code in assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/10823/how-does-scanf-interact-with-my-code-in-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have recently started getting into assembly for the purpose of reverse engineering. I started small with understanding basic datatypes, but I want to move on to more complex datatypes and functions. I am trying to understand what is happening in both methods\n  <code>\n   requestMaxPow\n  </code>\n  and\n  <code>\n   computePowers\n  </code>\n </p>\n <p>\n  Here is the\n  <strong>\n   source\n  </strong>\n  that I use\n </p>\n <pre><code>#include <stdio.h>\n\nint requestMaxPow();\nint computerPowers(int);\nint main(){\n    int max = requestMaxPow();\n    computePowers(max);\n    return 0;\n}\n\nint requestMaxPow(){\n    int maxPow;\n\n    scanf (\"%d\", &maxPow);\n    return maxPow;\n}\n\nint computePowers(int MaxPow){\n    int currentVal = 0;\n    int currentPow = 0;\n\n    for(;currentPow < MaxPow; ++currentPow){\n        currentVal = currentPow * currentPow;\n    }\n}\nCompiled with GCC with the following arguments \"gcc -g -O0 morecomplex.c -o morecoplex\"\n</code></pre>\n <p>\n  The assembly below is for the\n  <strong>\n   requestMaxPow\n  </strong>\n  method, which is the hardest for me to understand. Specifically I don't understand what \"gs\" means at 0xc5, and I have no idea what is going on between lines 0xce - 0x50. could someone well versed explain line by line what is happening?\n </p>\n <pre><code>(gdb) disassemble \nDump of assembler code for function requestMaxPow:\n   0x080484bf <+0>: push   ebp\n   0x080484c0 <+1>: mov    ebp,esp\n   0x080484c2 <+3>: sub    esp,0x18\n=> 0x080484c5 <+6>: mov    eax,gs:0x14\n   0x080484cb <+12>:    mov    DWORD PTR [ebp-0xc],eax\n   0x080484ce <+15>:    xor    eax,eax\n   0x080484d0 <+17>:    sub    esp,0x8\n   0x080484d3 <+20>:    lea    eax,[ebp-0x10]\n   0x080484d6 <+23>:    push   eax\n   0x080484d7 <+24>:    push   0x80485b0\n   0x080484dc <+29>:    call   0x8048380 <__isoc99_scanf@plt>\n   0x080484e1 <+34>:    add    esp,0x10\n   0x080484e4 <+37>:    mov    eax,DWORD PTR [ebp-0x10]\n   0x080484e7 <+40>:    mov    edx,DWORD PTR [ebp-0xc]\n   0x080484ea <+43>:    xor    edx,DWORD PTR gs:0x14\n   0x080484f1 <+50>:    je     0x80484f8 <requestMaxPow+57>\n   0x080484f3 <+52>:    call   0x8048350 <__stack_chk_fail@plt>\n   0x080484f8 <+57>:    leave  \n   0x080484f9 <+58>:    ret    \nEnd of assembler dump.\n</code></pre>\n <p>\n  The assembly for the\n  <strong>\n   computePowers\n  </strong>\n  method is much easier to understand. I include it just in case it has relevance to my main question.\n </p>\n <pre><code>(gdb) disassemble \nDump of assembler code for function computePowers:\n   0x080484fa <+0>: push   ebp\n   0x080484fb <+1>: mov    ebp,esp\n   0x080484fd <+3>: sub    esp,0x10\n=> 0x08048500 <+6>: mov    DWORD PTR [ebp-0x4],0x0\n   0x08048507 <+13>:    mov    DWORD PTR [ebp-0x8],0x0\n   0x0804850e <+20>:    jmp    0x804851e <computePowers+36>\n   0x08048510 <+22>:    mov    eax,DWORD PTR [ebp-0x8]\n   0x08048513 <+25>:    imul   eax,DWORD PTR [ebp-0x8]\n   0x08048517 <+29>:    mov    DWORD PTR [ebp-0x4],eax\n   0x0804851a <+32>:    add    DWORD PTR [ebp-0x8],0x1\n   0x0804851e <+36>:    mov    eax,DWORD PTR [ebp-0x8]\n   0x08048521 <+39>:    cmp    eax,DWORD PTR [ebp+0x8]\n   0x08048524 <+42>:    jl     0x8048510 <computePowers+22>\n   0x08048526 <+44>:    leave  \n   0x08048527 <+45>:    ret    \nEnd of assembler dump.\n</code></pre>\n <p>\n  <strong>\n   Edit 1\n  </strong>\n  After looking at the code for a while longer I realized the xor is happening on eax to \"0\" it out, does that happen so that a return value can be stored into eax?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "12k",
    "tags": [
        "disassembly",
        "c",
        "xor",
        "program-analysis",
        "scanf"
    ],
    "user": "Loligans",
    "time": "Sep 9, 2015 at 10:56",
    "comments": [
        {
            "user": "Loligans",
            "text": "<html><body><span class=\"comment-copy\">\n @GuntramBlohm Thank you for that! That makes complete sense. I looked up the Stack Canary on google and saw that it is a defense mechanism in Linux that helps make stack buffer overflows more difficult. At address 0xd7 why is a seemingly random address (0x80485b0) being pushed onto the stack?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n That's not a random address, that's the address where the compiler put the \"%d\" string for scanf. I changed my comment to an answer to have space to explain more.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The code between\n  <code>\n   80484c5\n  </code>\n  and\n  <code>\n   80484ce\n  </code>\n  sets up the\n  <a href=\"https://reverseengineering.stackexchange.com/questions/6627/segmentation-on-x86-for-stack-canaries\">\n   stack canary\n  </a>\n  , and\n  <code>\n   80484e7\n  </code>\n  to\n  <code>\n   80484f3\n  </code>\n  checks it. gcc omits the stack checking from your second function, since it can determine (uses no pointers, doesn't call subroutines) that there's no way to overwrite the stack here. Your\n  <code>\n   xor eax, eax\n  </code>\n  isn't neccesary per se (you don't need to zero registers before storing something into them), it's just that the compiler wants to make the canary value unknown as soon as possible.\n </p>\n <p>\n  Omitting the stack checking results in:\n </p>\n <pre><code>0x080484d0 <+17>:    sub    esp,0x8            // adjust stack alignment \n0x080484d3 <+20>:    lea    eax,[ebp-0x10]     // move the address of maxRow into eax\n0x080484d6 <+23>:    push   eax                // and push it on the stack as the 2nd function argument\n0x080484d7 <+24>:    push   0x80485b0          // Push the address of your format string as first function argument\n0x080484dc <+29>:    call   0x8048380 <__isoc99_scanf@plt>  // call scanf\n0x080484e1 <+34>:    add    esp,0x10           // remove the added bytes from the stack\n0x080484e4 <+37>:    mov    eax,DWORD PTR [ebp-0x10]  // get the content of maxRow into eax to return it as function return value\n</code></pre>\n <p>\n  3 things might need further explanation:\n </p>\n <ul>\n  <li>\n   The\n   <code>\n    lea\n   </code>\n   instruction calculates an\n   <em>\n    address\n   </em>\n   , while\n   <code>\n    mov\n   </code>\n   loads a value. Thus,\n   <code>\n    lea eax,[ebp-0x10]\n   </code>\n   is like\n   <code>\n    eax=&maxRow\n   </code>\n   , and\n   <code>\n    mov eax, DWORD PTR [ebp-0x10]\n   </code>\n   is like\n   <code>\n    eax=maxRow\n   </code>\n   .\n  </li>\n  <li>\n   In C, function arguments are pushed from behind, i.e. the last argument gets pushed first. This ensures the first argument is always at the same position, which is important for\n   <code>\n    varargs\n   </code>\n   functions like\n   <code>\n    printf\n   </code>\n   and\n   <code>\n    scanf\n   </code>\n   .\n  </li>\n  <li>\n   Since 2 arguments are passed, which needs 8 bytes, ommiting the first\n   <code>\n    sub esp,0x8\n   </code>\n   and replacing the\n   <code>\n    add esp,0x10\n   </code>\n   with\n   <code>\n    add esp, 0x8\n   </code>\n   would be more straightforward. The reason\n   <code>\n    gcc\n   </code>\n   spends these extra bytes is probably that it wants the stack pointer aligned to a multiple of 16 bytes, which speeds up certain things. Not sure about this however, since the total distance between\n   <code>\n    esp\n   </code>\n   at the start of your function and\n   <code>\n    esp\n   </code>\n   at the start of\n   <code>\n    scanf\n   </code>\n   doesn't seem to be a multiple of 16.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Loligans",
                    "text": "<span class=\"comment-copy\">Okay that makes soooo much sense! My last question is how did it know where to find the address of the format string (0x80485b0)? The only thing I can think of is that the format string is a static string.</span>",
                    "time": null
                }
            ]
        }
    ]
}