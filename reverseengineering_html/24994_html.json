{
    "title": "Android packageInfo signature",
    "link": "https://reverseengineering.stackexchange.com/questions/24994/android-packageinfo-signature",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Are there anyways I can learn what packageInfo.signatures[0] is so I can use it to apply the same algorithm in Python.\n </p>\n <p>\n  To further explain:\n </p>\n <pre><code>    private static SecretKeySpec a(Context context) {\n        try {\n            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 64);\n            if (!(packageInfo == null || packageInfo.signatures == null || packageInfo.signatures.length <= 0)) {\n                return new SecretKeySpec(Arrays.copyOf(packageInfo.signatures[0].toByteArray(), 16), \"AES\");\n            }\n        } catch (NameNotFoundException e2) {\n            ThrowableExtension.a(e2);\n        }\n        return null;\n    }\n</code></pre>\n <p>\n  This android app is sending some sort of a key that is changing based on timestamp with every request it is sending. And it is using the above code for creating a SecretKeySpec which then gets used in below.\n </p>\n <pre><code>    @NonNull\n    private synchronized String d(String str) {\n        byte[] digest;\n        try {\n            byte[] bytes = str.getBytes(\"UTF-8\");\n>>>>>>>     this.r.init(2, this.l);\n            byte[] doFinal = this.r.doFinal(this.k);\n            byte[] a2 = Bytes.a(doFinal, this.j, bytes, doFinal, this.n.a().getBytes(\"UTF-8\"));\n            digest = this.q.digest(a2);\n            Arrays.fill(a2, 0);\n            Arrays.fill(doFinal, 0);\n        } catch (Exception e2) {\n            throw new RuntimeException(e2);\n        }\n        return jl.a(digest);\n    }\n</code></pre>\n <p>\n  So, I know that the function argument\n  <code>\n   str\n  </code>\n  is for some reason\n  <code>\n   currentTimeMillis * 1151\n  </code>\n  which gets used in\n  <code>\n   byte[] a2 = ...\n  </code>\n  line then gets hashed with sha1 there comes the time based changing part. What I can't find is what signatures[0] is in this context and how can I achieve it, in the construction of the class,\n  <code>\n   this.l\n  </code>\n  is assigned with SecretKeySpec ( signature[0] ).\n  <code>\n   this.r\n  </code>\n  is an AES Cipher. From the readings I made, I think the \"2\" in\n  <code>\n   init(2, this.l)\n  </code>\n  means decode mode.\n </p>\n <p>\n  And Can you please explain to me what is the effect of filling\n  <code>\n   a2\n  </code>\n  and\n  <code>\n   doFinal\n  </code>\n  variables with\n  <code>\n   0(zeroes)\n  </code>\n  in this context as it doesn't get used anywhere else.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "825",
    "tags": [
        "android",
        "encryption",
        "apk"
    ],
    "user": "Shubidubapp",
    "time": "May 12, 2020 at 21:00",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n AFAIK the\n <code>\n  Signature.toByteArray()\n </code>\n contains the X.509 DER encoded signature certificate that was used for signing the app. See also\n <a href=\"https://stackoverflow.com/a/61403954/150978\">\n  stackoverflow.com/a/61403954/150978\n </a>\n . See also this code that reads the signature data to an X509 certificate:\n <a href=\"https://github.com/linchaolong/ApkToolPlus/blob/master/lib.JiaGu/src/com/linchaolong/apktoolplus/jiagu/utils/SignatureUtils.java#L49-L72\" rel=\"nofollow noreferrer\">\n  github.com/linchaolong/ApkToolPlus/blob/master/lib.JiaGu/src/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In this instance,\n  <code>\n   packageInfo.signatures\n  </code>\n  is the first signature that you find in the APK. Meaning, this is the first signature file that the Android system has read from the\n  <code>\n   META-INF/\n  </code>\n  folder inside the APK.\n </p>\n <p>\n  Basically, what you'll need to do is unzip the APK, look inside the\n  <code>\n   META-INF/\n  </code>\n  and grab whatever file has the extension\n  <code>\n   .RSA\n  </code>\n  (unlikely, but it could be\n  <code>\n   .DSA\n  </code>\n  ). This essentially what the\n  <code>\n   packageInfo.signatures[0]\n  </code>\n  is returning, with the\n  <code>\n   .toByteArray()\n  </code>\n  making a\n  <code>\n   ByteArray\n  </code>\n  object of the data.\n </p>\n <p>\n  If you have any doubts, or are having issues further, I'd sugged using Frida to hook this function call and watch what is actually returned.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "diff",
            "time": "May 18, 2020 at 3:36",
            "is_accepted": true,
            "comments": []
        }
    ]
}