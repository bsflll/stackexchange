{
    "title": "How does new operator internally work in C++?",
    "link": "https://reverseengineering.stackexchange.com/questions/15044/how-does-new-operator-internally-work-in-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The articles explaining the internals of\n  <code>\n   malloc\n  </code>\n  and\n  <code>\n   free\n  </code>\n  in glibc are abundant in number. However, I'd like to know how dynamic memory management works in C++, specifically the nitty gritty of\n  <code>\n   new\n  </code>\n  and\n  <code>\n   delete\n  </code>\n  operators. My interest is in the internal data structure maintained as well as the allocation and de-allocation algorithms. What are a few good resources for the same?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c++",
        "memory"
    ],
    "user": "sherlock",
    "time": "Mar 29, 2017 at 8:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is somewhat compiler-specific but in most cases\n  <code>\n   new\n  </code>\n  and\n  <code>\n   delete\n  </code>\n  are basically thin wrappers around\n  <code>\n   malloc\n  </code>\n  and\n  <code>\n   free\n  </code>\n  (regarding the allocation of memory itself). Some additional C++ specifics regarding\n  <em>\n   new expressions\n  </em>\n  and the sequence of construction/destructions of classes and their members are described in the C++ standard (a nice summary is available at\n  <a href=\"http://en.cppreference.com/w/cpp/language/new\" rel=\"noreferrer\">\n   cppreference\n  </a>\n  ). I have described some of the details pertaining to the MSVC++ implementation\n  <a href=\"http://www.openrce.org/articles/full_view/23\" rel=\"noreferrer\">\n   here\n  </a>\n </p>\n <p>\n  A few additional wrinkles:\n </p>\n <ul>\n  <li>\n   <p>\n    a class can redefine a custom operator\n    <code>\n     new\n    </code>\n    /\n    <code>\n     delete\n    </code>\n    which will be called instead of the global one when constructing instances of that class. This can lead to tricky situations with polymorphic classes so the compiler may need to introduce a hidden\n    <em>\n     virtual destructor\n    </em>\n    function (see again my OpenRCE article).\n   </p>\n  </li>\n  <li>\n   <p>\n    when allocating an array of classes, many compilers also embed a number of elements in the memory allocated for the array so that it can be destructed correctly. This is one of the reasons why mixing\n    <code>\n     delete\n    </code>\n    and\n    <code>\n     delete[]\n    </code>\n    can be  dangerous.\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Mar 29, 2017 at 8:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}