{
    "title": "Identify mod operation in ARM firmware with IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/31881/identify-mod-operation-in-arm-firmware-with-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the firmware in which mod operation must be done. I want to find this part of instructions.\n </p>\n <p>\n  Assume the following logic exist in the firmware:\n </p>\n <pre><code>res = var % 17\n</code></pre>\n <p>\n  I have tried to make search by\n  <code>\n   % 0x11\n  </code>\n  using IDA pseudocode and python but it does not find anything. Also I have tried to use gcc to dissemble this mod operation written in C but without any success.\n </p>\n <p>\n  Architecture: armv7-m\n </p>\n <p>\n  CPU: cortex-m4\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "156",
    "tags": [
        "ida",
        "disassembly",
        "arm"
    ],
    "user": "ALEX",
    "time": "May 18, 2023 at 16:52",
    "comments": [
        {
            "user": "genghiskhan",
            "text": "<html><body><span class=\"comment-copy\">\n I can't say for certain but one thing to look for would be\n <a href=\"https://saml98.github.io/jekyll/update/2020/02/21/weird-division.html\" rel=\"nofollow noreferrer\">\n  division by multiplication\n </a>\n which could be involved in a modulo calculation. In short, look for a multiplication by a weird/large constant then a right shift by floor(log2(17)) = 4.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An option in these cases is to compile a relevant code snippet with appropriate architecture options and see what assembly is generated.\n </p>\n <p>\n  For example, take this code.\n </p>\n <pre><code>long mod17( long x )\n{\n    return x % 17;\n}\n</code></pre>\n <p>\n  Compiling it with\n  <code>\n   gcc -mcpu=cortex-m4 -O2\n  </code>\n  , gives -\n </p>\n <pre><code>mod17(long):\n        ldr     r3, .L3\n        smull   r3, r2, r3, r0\n        asrs    r3, r0, #31\n        rsb     r3, r3, r2, asr #3\n        add     r3, r3, r3, lsl #4\n        subs    r0, r0, r3\n        bx      lr\n.L3:\n        .word   2021161081    // 0x78787879\n</code></pre>\n <p>\n  The output assembly gives some clues that you could look for in your firmware -\n </p>\n <ul>\n  <li>\n   the 'magic' constant\n   <code>\n    0x78787879\n   </code>\n  </li>\n  <li>\n   a multiplication instruction closely followed by 3 instructions containing shifts\n  </li>\n </ul>\n <p>\n  Tests of similar code using\n  <code>\n   int\n  </code>\n  instead of\n  <code>\n   long\n  </code>\n  results in the same magic constant.\n </p>\n <p>\n  However, using unsigned integers results in a different magic constant -\n  <code>\n   0xF0F0F0F1\n  </code>\n  and just 1 shift instruction so you might want to look for these too.\n </p>\n <p>\n  (Compulsory\n  <a href=\"https://godbolt.org/z/r8hEWYoWv\" rel=\"nofollow noreferrer\">\n   godbolt link.\n  </a>\n  )\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "May 19, 2023 at 21:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ALEX",
                    "text": "<span class=\"comment-copy\">As I wrote in my question I tried to do exactly what you have done but I am unable to find any magic constants or similar sequence of commands.</span>",
                    "time": null
                }
            ]
        }
    ]
}