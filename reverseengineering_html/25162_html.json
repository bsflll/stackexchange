{
    "title": "Construct a number from 0-999.9 using 5 data bytes of a MIDI SysEx message",
    "link": "https://reverseengineering.stackexchange.com/questions/25162/construct-a-number-from-0-999-9-using-5-data-bytes-of-a-midi-sysex-message",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm sending MIDI messages to a proprietary turntable that has an LCD screen on it. The normal software sends out updates via MIDI SysEx to display the current tempo on the LCD. The MIDI is being received on a MKL25Z128VLK4, Cortex-M0+/ARMv6-M device. (I did disassemble the firmware .bin after digging in its guts for the type of chip it's using, but the result of that was ~30k lines of assembly) The LCD model number is inaccessible without desoldering\n </p>\n <p>\n  At this point, I can successfully update the screen but I'm having trouble figuring out the pattern from a given number and I'm hoping someone else has experience with this.\n </p>\n <p>\n  Here's what I have found so far:\n </p>\n <p>\n  Setting a single byte to anything from 9-126 results in 00.0\n </p>\n <pre><code>  BPM   B1    B2    B3    B4\n 00.0   0     0     0     0\n 00.0   0     0     0     1\n 00.0   0     0     0     2\n 00.0   0     0     0     3\n 00.0   0     0     0     4\n 00.0   0     0     0     5\n 00.0   0     0     0     6\n 00.0   0     0     0     7\n 00.0   0     0     0     8\n 00.0   0     0     0    16\n 00.0   0     0     0    32\n 00.0   0     0     0    64\n 00.1   0     0     0   127\n 00.1   0     0     1     0\n 00.3   0     0     2     0\n 00.4   0     0     3     0\n 00.6   0     0     4     0\n 00.8   0     0     5     0\n 00.9   0     0     6     0\n 01.1   0     0     7     0\n 01.2   0     0     8     0\n 00.0   0     0    16     0\n 00.0   0     0    32     0\n 00.0   0     0    64     0\n 02.4   0     0   127     0\n 02.5   0     1     0     0\n 05.1   0     2     0     0\n 07.6   0     3     0     0\n 10.2   0     4     0     0\n 12.8   0     5     0     0\n 16.3   0     6     0     0\n 17.9   0     7     0     0\n 20.4   0     8     0     0\n 00.0   0    16     0     0\n 00.0   0    32     0     0\n 00.0   0    64     0     0\n 38.4   0   127     0     0\n 40.9   1     0     0     0\n 81.9   2     0     0     0\n122.8   3     0     0     0\n163.8   4     0     0     0\n204.8   5     0     0     0\n245.7   6     0     0     0\n286.7   7     0     0     0\n327.6   8     0     0     0\n 00.0  16     0     0     0\n 00.0  32     0     0     0\n 00.0  64     0     0     0\n614.4 127     0     0     0\n</code></pre>\n <p>\n  Turning on multiple bytes adds them together with sometimes strange results\n </p>\n <pre><code> 40.9   1     0     0     0\n 00.1   0     0     1     0\n 41.1   1     0     1     0\n\n 81.9   2     0     0     0\n 00.1   0     0     1     0\n 82.0   2     0     1     0\n\n</code></pre>\n <p>\n  I'm wondering if there's some floating point or bitwise maths going on that I'm just not well versed in, and if so what are the real numbers and data types used for the calculations? I feel understanding this is crucial to solving this problem without a massive lookup table or gutting it and writing my own controller\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "183",
    "tags": [
        "debugging",
        "hardware",
        "patching",
        "embedded",
        "math"
    ],
    "user": "chason",
    "time": "Jun 24, 2020 at 11:53",
    "comments": [
        {
            "user": "Bavi_H",
            "text": "<html><body><span class=\"comment-copy\">\n What is the brand and model of the turntable?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Your table of byte values is not clear at all. Maybe just write out the full byte sequence for each display value?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "chason",
            "text": "<html><body><span class=\"comment-copy\">\n @Bavi_H Reloop RP-8000 (mk1 and mk2)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "chason",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky I struggled with that since Stack doesn't support tables. You're right, the full byte sequence is a lot clearer. I've updated the post for clarity and added a bunch of data points. Thanks\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bavi_H",
            "text": "<html><body><span class=\"comment-copy\">\n During your tests of setting only one byte to a non-zero value, are you sure that setting a particular byte to values from 9 to 126 results in a tempo of zero? Does 15 produce the same tempo that 127 does? (I suspect the tempo values will repeat in cycles of 16 values, meaning byte values 0-15, 16-31, 32-47, 48-63, 64-79, 80-95, 96-111, and 112-127 produce the same tempos.)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Binary\n </h2>\n <p>\n  MIDI data bytes are 7 bits, meaning they can have decimal values from 0 to 127.\n </p>\n <p>\n  In a 7-bit binary number:\n </p>\n <ul>\n  <li>\n   the bit on the right represents a decimal value of 1.\n  </li>\n  <li>\n   the next bit to the left represents a decimal value of 2.\n  </li>\n  <li>\n   the next bits to the left represent decimal values of 4, 8, 16, 32, and 64.\n  </li>\n </ul>\n <p>\n  Decimal values from 0 to 127 can be expressed in seven bits, where each bit is a 0 or 1.\n </p>\n <pre><code>binary   decimal\n0000001  1 = 1\n0000010  2 = 2\n0000011  3 = 2 + 1\n0000100  4 = 4\n0000101  5 = 4 + 1\n0000110  6 = 4 + 2\n0000111  7 = 4 + 2 + 1\n0001000  8 = 8\n0001001  9 = 8 + 1\n...\n1111111  127 = 64 + 32 + 16 + 8 + 4 + 2 + 1\n</code></pre>\n <h2>\n  Pattern\n </h2>\n <p>\n  From the results you described, I suspect the turntable only cares about the lowest 4 bits in each byte. In other words, only the bits with decimal values of 1, 2, 4, and 8 will have an effect on the tempo display. This means only byte values 0 to 15 are useful.\n </p>\n <p>\n  I suspect the turntable is using the following pattern:\n </p>\n <pre><code>B1  B2  B3  B4  tempo  display\n 0   0   0   0   .00     .0\n 0   0   0   1   .01      \"\n 0   0   0   2   .02      \"\n 0   0   0   3   .03      \"\n 0   0   0   4   .04      \"\n 0   0   0   5   .05      \"\n 0   0   0   6   .06      \"\n 0   0   0   7   .07      \"\n 0   0   0   8   .08      \"\n 0   0   0   9   .09      \"\n 0   0   0  10   .10     .1\n 0   0   0  11   .11      \"\n 0   0   0  12   .12      \"\n 0   0   0  13   .13      \"\n 0   0   0  14   .14      \"\n 0   0   0  15   .15      \"\n 0   0   1   0   .16      \"\n 0   0   1   1   .17      \"\n 0   0   1   2   .18      \"\n 0   0   1   3   .19      \"\n 0   0   1   4   .20     .2\n...\n</code></pre>\n <p>\n  The byte values represent tempo values in .01 units, but when the turntable displays the tempo, it hides the last digit.\n </p>\n <p>\n  This hidden digit explains why turning on multiple bytes doesn't always produce the sum of the tempos displayed by the individual byte values.\n </p>\n <pre><code>B1  B2  B3  B4  tempo  display\n 1   0   0   0  40.96   40.9\n 0   0   1   0    .16     .1\n 1   0   1   0  41.12   41.1\n</code></pre>\n <h2>\n  Bitwise math\n </h2>\n <p>\n  When only some bits are used, bitwise math is indeed useful.\n </p>\n <p>\n  For example, here's some Javascript to convert a tempo to the needed byte values:\n </p>\n <pre><code>t = 123.4;\n\nv = 100 * t;\n\nb1 = (v >> 12) & 15;\nb2 = (v >> 8) & 15;\nb3 = (v >> 4) & 15;\nb4 = v & 15;\n\nconsole.log(b1, b2, b3, b4);\n</code></pre>\n <p>\n  <code>\n   x & 15\n  </code>\n  is a\n  <strong>\n   bitwise AND\n  </strong>\n  , in this case, to keep only the lowest four bits.\n </p>\n <p>\n  <code>\n   x >> 4\n  </code>\n  is a\n  <strong>\n   right shift\n  </strong>\n  , in this case shifting the value 4 bits to the right, which discards the lowest four bits. This has the same effect as dividing by 16 and discarding the remainder.\n </p>\n <p>\n  Here's some Javascript to convert the byte values to the displayed tempo:\n </p>\n <pre><code>b1 = 3;\nb2 = 0;\nb3 = 3;\nb4 = 4;\n\nb1 = b1 & 15;\nb2 = b2 & 15;\nb3 = b3 & 15;\nb4 = b4 & 15;\n\nv = 16*16*16*b1 + 16*16*b2 + 16*b3 + b4;\n\nt = parseInt(v / 10) / 10;\n\nconsole.log(t);\n</code></pre>\n <p>\n  In your web browser, you can go to about:blank, then press F12 and go to Console to enter these small Javascript calculations. (For your safety, enter about:blank in the address box, and never run code from strangers if you don't understand it.)\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Bavi_H",
            "time": "May 31, 2020 at 9:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "chason",
                    "text": "<span class=\"comment-copy\">\"I would suggest turning on each bit individually and see what tempo value is displayed. \"  Sorry if I wasn't clear, I definitely did that. Byte 3, for example:   0 comes out as 0 on the display. 1 is 2.5, 2 is 5.1, 3 is 7.6, 4 is 10.2, 5 is 10.2, 6 is 12.8. So it seems that the value is 2.5 and the tempo shown is byte * 2.5.... with some weird rounding errors I can't figure out  I forgot about the splitting bytes thing, I've had to deal with that before. Total pain in the butt</span>",
                    "time": null
                },
                {
                    "user": "Bavi_H",
                    "text": "<span class=\"comment-copy\">I see. I don't know of a special pattern that could explain your results. If you want look for a pattern on your own, other ideas I would try if you have all the values written down: try plotting a graph, try calculating the difference from one tempo to the next and look for patterns in the differences, try calculating the multiplication factor from one tempo to the next and look for patterns in the multiplication factors. If you want help looking for patterns, what happens for data byte values of 8, 16, 32 and 64? (Or even, what are all the data values and resulting tempos you have gathered?)</span>",
                    "time": null
                },
                {
                    "user": "chason",
                    "text": "<span class=\"comment-copy\">I did some more point gathering today and re-formatted and updated the post. Anything from 9-126 shows a 00.0 which made creating the table a much less daunting task lol  It's interesting that 127 is special somehow, I have no explanation for that</span>",
                    "time": null
                },
                {
                    "user": "Bavi_H",
                    "text": "<span class=\"comment-copy\">@chason Thanks for the update. I thought my proposed pattern was wrong after your comment which said for byte 3 (which you are now calling byte 2), value 4 causes tempo 10.2, and value 5 also causes tempo 10.2. But your updated question now shows for byte 2, value 4 causes tempo 10.2, and value 5 causes tempo 12.8. So I suspect my pattern may be right after all. I've edited my answer, hopefully it better explains the pattern I see.</span>",
                    "time": null
                },
                {
                    "user": "chason",
                    "text": "<span class=\"comment-copy\">\"which you are now calling byte 2\" Big oof. Too bad I can't edit the title of the post. The hidden digit explains a lot, I should have thought of that. Good call. Thanks for helping me work through it and for such a detailed answer. I wouldn't have made it without your help :)</span>",
                    "time": null
                }
            ]
        }
    ]
}