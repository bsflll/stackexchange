{
    "title": "Mysterious ARM instruction evaluating result to be 0xfe instead of 0xff",
    "link": "https://reverseengineering.stackexchange.com/questions/24923/mysterious-arm-instruction-evaluating-result-to-be-0xfe-instead-of-0xff",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm facing some issues while debugging an iOS application for educational purposes. This is an iOS application found on the App Store and has some anti-debugging capabilities built in it.\n </p>\n <p>\n  <strong>\n   Pretext:\n  </strong>\n  The assembly instruction you see below is a snippet of the anti debugging checks done by the application. The instructions below are going to do the following:\n </p>\n <ol>\n  <li>\n   Load Register X8 with a memory address of (Current PC Register - 0xa70)\n  </li>\n  <li>\n   No Operation\n  </li>\n  <li>\n   Load Byte from register X8 into w8\n  </li>\n  <li>\n   Compare Register w8 if it is equal to 0xff\n  </li>\n </ol>\n <p>\n  <strong>\n   Exact Code block for Instructions as seen in IDA\n  </strong>\n </p>\n <p>\n  <code>\n   ADR             X8, __cB5JgDa_QrhRN_ ; +[cB5JgDa QrhRN]\n NOP\n LDRB            W8, [X8]\n CMP             W8, #0xFF\n  </code>\n </p>\n <p>\n  <strong>\n   Corresponding Byte Code Block for Same Instruction Set\n  </strong>\n </p>\n <p>\n  <code>\n   88 AC FF 10\n 1F 20 03 D5\n 08 01 40 39\n 1F FD 03 71\n  </code>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ji4Dz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Assembly Instructions for anti-debug check\" src=\"https://i.sstatic.net/ji4Dz.png\"/>\n  </a>\n </p>\n <p>\n  Now, let's jump the gun and see what happens when it tries to load the byte from register x8 int w8. As you can see, I did a register read of both w8 and X8. In theory, based on the memory contents of X8, this instruction should have loaded 0xff into w8 through the assembly instruction ldrb w8, [x8]\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/x8bNe.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Problematic Assembly Instruction\" src=\"https://i.sstatic.net/x8bNe.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   Problem Faced\n  </strong>\n  : Upon evaluation of the instruction the actual memory contents in w8 was 0xfe and NOT 0xff. This is really an unexpected behaviour as my ARM knowledge tells me that the correct value for that evaluation should be 0xff and not 0xfe.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/DYsq3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Evaluated result was 0xfe instead of 0xff\" src=\"https://i.sstatic.net/DYsq3.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   Things I have tried  but failed to explain this behaviour\n  </strong>\n </p>\n <ol>\n  <li>\n   Creating mini Xcode iOS app and trying to replicate the same instruction set and memory state\n  </li>\n  <li>\n   Setting watchpoints to observe if any part of the program is editing the memory in-between\n  </li>\n  <li>\n   Looking for memory protections such as mprotect if they have modified that memory region\n  </li>\n </ol>\n <p>\n  I would be highly appreciative of anyone who can point me in any right direction or ways so that I can better understand this mysterious behaviour. If it was my misunderstanding in ARM instruction, please do tell me too. Thank you so much everyone.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "280",
    "tags": [
        "debugging",
        "anti-debugging",
        "ios",
        "arm64"
    ],
    "user": "Max Chee",
    "time": "May 5, 2020 at 18:45",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Can you add the opcode bytes for the instructions? Also, if possible, try to use code blocks instead of (or in addition to) screenshots.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Max Chee",
            "text": "<html><body><span class=\"comment-copy\">\n Have added in the code block as well as the byte code for the same instruction set.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I\n  <em>\n   think\n  </em>\n  that the code is supposed to be checking for hooks.\n </p>\n <p>\n  The\n  <code>\n   adr\n  </code>\n  instruction sets\n  <code>\n   x8\n  </code>\n  to the start of the function so if there was a breakpoint or a jump placed there by a hook library, the byte there would be different from the original value\n  <code>\n   FF\n  </code>\n  .\n </p>\n <p>\n  One possibility is that\n  <strong>\n   there is\n  </strong>\n  a breakpoint there but the debugger is masking it by showing you the original code. If you did place a breakpoint there, try removing it before stepping through the read. You can also try using one-shot breakpoints which are removed automatically after being hit.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "May 6, 2020 at 12:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}