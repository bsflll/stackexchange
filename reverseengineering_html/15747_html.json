{
    "title": "How to find out where an application stores the resolutions it allows?",
    "link": "https://reverseengineering.stackexchange.com/questions/15747/how-to-find-out-where-an-application-stores-the-resolutions-it-allows",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Many applications (in particular most games) offer a set of resolutions to choose from. Some of them are pretty open and allow basically every resolution the underlying system seems to be capable of, others are pretty restrictive and offer just a small set of resolutions. If the difference between offered and native resolution is too big, the application becomes hardly usable.\n </p>\n <p>\n  On my search for a solution, the amount of resolution-mods available and especially\n  <a href=\"http://www.wsgf.org/forums/viewtopic.php?t=28001\" rel=\"nofollow noreferrer\">\n   this thread\n  </a>\n  made me curious: How does one find out where an application stores the resolutions it allows? And also, how does one find out what to insert instead?\n </p>\n <p>\n  Remark: I legally own (bought) the installers for all applications I want to experiment with. They are sold DRM-free and I do not redistribute any parts, it's just for my personal use. Therefore I assume, that my intent is perfectly valid.\n </p>\n <p>\n  EDIT: @BrandonBryant's comment made me realize that my question is to broad and I apologize for this. I don't think that I can improve my question much, since I don't really know what to ask for specifically. If it's not off-topic, any hint on \"How to get started?\" would be highly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "80",
    "tags": [
        "binary-analysis",
        "binary",
        "binary-format",
        "binary-diagnosis"
    ],
    "user": "Wanderer",
    "time": "Jul 3, 2017 at 8:24",
    "comments": [
        {
            "user": "Brandon Bryant",
            "text": "<html><body><span class=\"comment-copy\">\n Can you give us a more specific question? I'm not sure there is one specific way to answer your question. The whole premise deals with reverse engineering and there isn't one single method that is guaranteed to work. Every single time you reverse engineer something, it will require creativity and dedication to decipher the program. Sure there is a set of standards you can take, but there isn't one foolproof method for RE.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Wanderer",
            "text": "<html><body><span class=\"comment-copy\">\n @BrandonBryant I would \"there isn't one single method\" already accept as an answer. I have simply no clue about the topic and don't really know where to start. Please see my edited question.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  One method (theoretical at this point) that comes to mind is searching for constants like resolution numbers in instructions for example, a game uses 600x800 resolution - you might find instructions like\n </p>\n <pre><code>push 0x320 #800 in decimal\npush 0x258 #600 in decimal\ncall initwindowfunction_orsomething\n</code></pre>\n <p>\n  or it might reference integers stored in a data section or allocated memory, or use a completely different method.\nthat is one example however, and of course there are many many different ways they might do this I hope this can get you started or at least help you come up with some ideas.\n </p>\n <p>\n  I have no practical research that supports this yet, but will try to find something in my free time\n </p>\n <p>\n  --EDIT--\n </p>\n <p>\n  Another idea is to look at different open source games, maybe ones similar to your target, and figure out how they do it.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Samson",
            "time": "Jul 4, 2017 at 1:59",
            "is_accepted": true,
            "comments": []
        }
    ]
}