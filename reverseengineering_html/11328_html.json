{
    "title": "Configure and execute Intel's PIN Tool",
    "link": "https://reverseengineering.stackexchange.com/questions/11328/configure-and-execute-intels-pin-tool",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to develop a Pintool on Windows. But so far I have been unable to configure or execute PIN. I have Microsoft Visual Studio 10.0 installed on my system. I have also downloaded and unzipped pin from its website.\n </p>\n <p>\n  On windows, \"pin\" command needs \".dll\" file of pintool to execute. Suppose I want to execute \"icount.cpp\" on \"prog1.exe\". How can I do this?\n </p>\n <p>\n  How can I use Visual Studio to develop my own tools? I have gone through tutorials and I know what to writ, but I am not getting where and how to start?\n </p>\n <p>\n  Thanks you in advance.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "3k",
    "tags": [
        "dynamic-analysis",
        "instrumentation",
        "pintool"
    ],
    "user": "Anurag",
    "time": "Nov 15, 2015 at 8:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The fastest and less cumbersome way I know is to make a copy of\n  <code>\n   MyPinTool\n  </code>\n  directory (under\n  <code>\n   <pin dir>\\source\\tools\\\n  </code>\n  and overwrite the file\n  <code>\n   MyPinTool.cpp\n  </code>\n  with your own code.\n </p>\n <p>\n  Open the\n  <code>\n   MyPinTool.sln\n  </code>\n  in Visual Studio and build your target. After that you can rename the DLL to whatever you want.\n </p>\n <p>\n  It is not an elegant solution but it gets the job done. In the end, you want to spent your time writing your\n  <code>\n   PinTool\n  </code>\n  and not annoyed with compiler specific settings...\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Carlos Garcia",
            "time": "Feb 10, 2016 at 14:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Carlos's answer is more of a workaround, but it's so much spot on. Getting all the right knobs right is an insane job. And even more so with\n  <a href=\"https://groups.io/g/pinheads/message/11967\" rel=\"nofollow noreferrer\">\n   version 3\n  </a>\n  that switched away from whatever native runtime the OS may have, and started to use their own.\n </p>\n <p>\n  After half a day reversing the examples, I could come up with this (I'm assuming a 64 bit Windows target, but it shouldn't be difficult to notice what's architecture specific)\n </p>\n <p>\n  First of all you should get the include folders right (make sure to set\n  <em>\n   PIN_ROOT\n  </em>\n  in the first place though)\n </p>\n <pre><code>$(PIN_ROOT)\\source\\include\\pin;$(PIN_ROOT)\\source\\include\\pin\\gen;$(PIN_ROOT)\\source\\tools\\InstLib;$(PIN_ROOT)\\extras\\xed-intel64\\include\\xed;$(PIN_ROOT)\\extras\\components\\include;$(PIN_ROOT)\\extras\\stlport\\include;$(PIN_ROOT)\\extras;$(PIN_ROOT)\\extras\\libstdc++\\include;$(PIN_ROOT)\\extras\\crt\\include;$(PIN_ROOT)\\extras\\crt;$(PIN_ROOT)\\extras\\crt\\include\\arch-x86;$(PIN_ROOT)\\extras\\crt\\include\\kernel\\uapi;$(PIN_ROOT)\\extras\\crt\\include\\kernel\\uapi\\asm-x86;\n</code></pre>\n <p>\n  Then, set these flags in the compiler:\n  <code>\n   /MT /GR- /GS- /EHs- /EHa- /fp:strict /Oi- /FIinclude/msvc_compat.h\n  </code>\n </p>\n <p>\n  And these defines for the preprocessor:\n  <code>\n   TARGET_IA32E;HOST_IA32E;TARGET_WINDOWS;WIN32;__PIN__=1;PIN_CRT=1;__LP64__\n  </code>\n  (please, really pay attention to the first two.. IA32\n  <strong>\n   <em>\n    E\n   </em>\n  </strong>\n  means x86-64 and their wrong combination can lead to countless ungodly issues with symbols and whatnot).\n </p>\n <p>\n  Remember that with the exception of like 3 headers (\n  <em>\n   [xmm]intrin.h\n  </em>\n  and somewhat limitedly\n  <em>\n   windows.h\n  </em>\n  ) you cannot use any other one outside of pintool.\n </p>\n <p>\n  Next there is the linker. You need these folders\n </p>\n <pre><code>$(PIN_ROOT)\\intel64\\lib;$(PIN_ROOT)\\intel64\\lib-ext;$(PIN_ROOT)\\extras\\xed-intel64\\lib;$(PIN_ROOT)\\intel64\\runtime\\pincrt;\n</code></pre>\n <p>\n  and these libraries, in the absolutest correct order (\n  <code>\n   /NODEFAULTLIB\n  </code>\n  is recommended)\n </p>\n <pre><code>pin.lib;xed.lib;pinvm.lib;kernel32.lib;pincrt.lib;ntdll-64.lib;crtbeginS.obj\n</code></pre>\n <p>\n  (\n  <code>\n   stlport-static.lib\n  </code>\n  ,\n  <code>\n   m-static.lib\n  </code>\n  ,\n  <code>\n   c-static.lib\n  </code>\n  and\n  <code>\n   os-apis.lib\n  </code>\n  may also be needed in more complex situations)\n </p>\n <p>\n  Last but not least, you should add\n  <code>\n   /export:main /SAFESEH:NO /IGNORE:4210 /IGNORE:4049\n  </code>\n  to the linker command line. For anything else give a check to the\n  <a href=\"https://software.intel.com/sites/default/files/managed/8e/f5/PinCRT.pdf\" rel=\"nofollow noreferrer\">\n   PinCRT whitepaper\n  </a>\n  , whose reading I cannot recommend enough.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "mirh",
            "time": "Apr 11, 2020 at 16:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mahmoud Abdelkader",
                    "text": "<span class=\"comment-copy\">FYI, as of Pin 3.19, pinvm.lib and ntdll-64.lib are no longer needed. I think stlport-static.lib may no longer be needed either.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was able to find a blog which helped me configure Visual Studio 10 to develop my own tools.\n  <a href=\"http://reversingonwindows.blogspot.in/2013/06/sample-pintools-for-visual-studio.html?spref=pin\" rel=\"nofollow noreferrer\">\n   Here is the link to blog\n  </a>\n  . The steps mentioned are generalized. But one thing I observed was that few directory names were different in my Pin installation. So please keep in mind to update those names. For some weird reasons I had to add \"\\LIBPATH:(path to additional library directories)\" variable to Command Line Linker Options.\n </p>\n <p>\n  Also in the beginning of each cpp file mention\n </p>\n <blockquote>\n  <p>\n   #define _SECURE_SCL 0\n  </p>\n </blockquote>\n <p>\n  One common error you may face is \"\n  <strong>\n   Error:LNK1104:Cannot open file*\n  </strong>\n  **\". You can refer to\n  <a href=\"https://stackoverflow.com/questions/133698/why-does-fatal-error-lnk1104-cannot-open-file-c-program-obj-occur-when-i-c\">\n   this link\n  </a>\n  to solve the issue.\n </p>\n <p>\n  EDIT: To execute the PIN tool:\n </p>\n <p>\n  Build the solution in\n  <strong>\n   Release\n  </strong>\n  configuration. I have extracted PIN inside my solution directory itself. Go to directory where\n  <strong>\n   pin.exe\n  </strong>\n  exists. Execute command in below format in command prompt:\n </p>\n <blockquote>\n  <p>\n   pin -t [location (with file name) of solution DLL in release direcroty] -- [location (with file name) of application to execute]\n  </p>\n </blockquote>\n <p>\n  Hope this will be helpful for anyone facing this issue in future.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}