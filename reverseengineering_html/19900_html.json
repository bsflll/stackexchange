{
    "title": "Decompile Python for ELF Binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/19900/decompile-python-for-elf-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several solutions available to extract Pyc files from Windows binaries and then decompile them using uncompyle2 or uncompyle6.\n </p>\n <p>\n  However, I have a Linux ELF 64-bit binary which was compiled using one of the Packagers used for Python (might be CX Freeze or PyInstaller). I am not sure of the exact package name.\n </p>\n <p>\n  Update:\n </p>\n <p>\n  File command output:\n </p>\n <pre><code>bin: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=212a49c7fff7342713aec6af6789abbaf3a8014, stripped\n</code></pre>\n <p>\n  I also have a .so file called: libpython2.7.so.1.0 which I believe is the python interpreter.\n </p>\n <p>\n  The binary also has a .pydata section inside it as shown below:\n </p>\n <pre><code> [27] pydata            PROGBITS         0000000000000000  00007a48\n       00000000000a0c47  0000000000000000           0     0     1\n</code></pre>\n <p>\n  The binary has strings inside it as shown below:\n </p>\n <pre><code>Py_SetPythonHome\nCannot dlsym for Py_SetPythonHome\nError loading Python lib '%s': dlopen: %s\nError detected starting Python VM.\nlibpython2.7.so.1.0\n</code></pre>\n <p>\n  So, I'm quite sure that it is Python code compiled to a Linux binary.\n </p>\n <p>\n  Neither of these projects work for me.\n </p>\n <ul>\n  <li>\n   <p>\n    <a href=\"https://github.com/Katharsis/unfrozen_binary\" rel=\"nofollow noreferrer\">\n     <strong>\n      unfrozen_binary\n     </strong>\n    </a>\n    - gives an error because in common.py it imports decompilers library which is not available.\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://github.com/bannsec/pyThaw\" rel=\"nofollow noreferrer\">\n     <strong>\n      pyThaw\n     </strong>\n    </a>\n    - it leverages radare2 however when I use it with my binary, it just hangs and does not extract the source code.\n   </p>\n  </li>\n </ul>\n <p>\n  Are there any alternate solutions to decompile such elf binaries with python byte code for Linux?\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 2,
    "views": "15k",
    "tags": [
        "python",
        "decompiler"
    ],
    "user": "Neon Flash",
    "time": "Nov 18, 2018 at 4:47",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Please clearly describe the file you are trying to reverse. Is it an ELF object file containing x86_64 object code in the\n <code>\n  .text\n </code>\n section, or something else entirely?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Neon Flash",
            "text": "<html><body><span class=\"comment-copy\">\n I'll add some more details. Yes, it is an ELF 64-bit binary. It has a pydata section inside it and I also have a .so file along with which corresponds to the python interpreter.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n You can set a breakpoint on\n <code>\n  PyEval_EvalFrameEx\n </code>\n for starter and dump the bytecode as they are being executed. Not a complete solution though.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "<html><body><span class=\"comment-copy\">\n can you provide the binary?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It can be said with certainty that your binary has been compiled with PyInstaller. Searching for the string \"Error detected starting Python VM.\" leads to the\n  <a href=\"https://github.com/pyinstaller/pyinstaller/blob/6e5c70e067b5ad3fb6516818c9cb19ffdb288b2f/bootloader/src/pyi_pythonlib.c#L555\" rel=\"nofollow noreferrer\">\n   PyInstaller repo\n  </a>\n  .\n </p>\n <p>\n  Now that you know it's PyInstaller, you can have a look\n  <a href=\"https://pyinstaller.readthedocs.io/en/v3.3.1/advanced-topics.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  which describes how PyInstaller works and how the binary is packaged. In short, here are the important parts\n </p>\n <blockquote>\n  <p>\n   Two kinds of archives are used in PyInstaller. One is a ZlibArchive,\n  which allows Python modules to be stored efficiently and, with some\n  import hooks, imported directly. The other, a CArchive, is similar to\n  a .zip file, a general way of packing up (and optionally compressing)\n  arbitrary blobs of data. It gets its name from the fact that it can be\n  manipulated easily from C as well as from Python. Both of these derive\n  from a common base class, making it fairly easy to create new kinds of\n  archives.\n  </p>\n </blockquote>\n <p>\n  The docs recommend using the tool\n  <code>\n   pyi-archive_viewer\n  </code>\n  for inspecting PyInstaller binaries.\n </p>\n <blockquote>\n  <p>\n   Use the\n   <code>\n    pyi-archive_viewer\n   </code>\n   command to inspect any type of archive:\n  </p>\n  <pre><code>pyi-archive_viewer archivefile\n</code></pre>\n  <p>\n   With this command you can examine the contents of any archive built\n  with PyInstaller (a PYZ or PKG), or any executable (.exe file or an\n  ELF or COFF binary)\n  </p>\n </blockquote>\n <p>\n  This is what you can try for now. For Windows, there's the equivalent tool\n  <a href=\"https://sourceforge.net/projects/pyinstallerextractor/\" rel=\"nofollow noreferrer\">\n   <em>\n    pyinstxtractor\n   </em>\n  </a>\n  (I'm the author) but unfortunately there's no support for ELF's at the moment.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xec",
            "time": "Nov 17, 2018 at 6:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Neon Flash",
                    "text": "<span class=\"comment-copy\">I was able to extract the python code however it's not plaintext yet and there's some binary data inside it. I used the \"X\" option of pyi-archive_viewer to extract the contents. It tells me the compressed and uncompressed size of the file. When I extract, the size matches the uncompressed size however the file is not proper python code. I checked the header of the file and ran binwalk on it as well to see if it's in a compressed form. But it is not. I have updated the answer. Could you please check?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@NeonFlash You'd need to fix the header of the extracted pyc file before feeding it to the decompiler. I see that you have already figured that out :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  One such alternative approach is, obviously, to extract the python code/byte code manually.\n </p>\n <p>\n  As integrating a python interpreter and/or bytecode compiler is takes some engineering, a lot of solutions tend to prefer the easy way. Although that may not be the case of a python code that was converted to an executable as an obfuscation measure, it is most definitely the case for most python to executable converters (such as py2exe, PyInstaller, etc).\n </p>\n <p>\n  The easy way I refer to is including a python interpreter as a whole, extracting raw\n  <code>\n   py\n  </code>\n  or\n  <code>\n   pyc\n  </code>\n  files to a temporary directory and executing the extracted code using the python interpreter.\n </p>\n <p>\n  Understanding whether that's the case with your sample should be quite easy to do either by process monitoring or debugging, and should also be possible by statically reverse engineering (which as we all know, is the hardcode way).\n </p>\n <hr/>\n <p>\n  As a side note, that file you're looking at can have been generated using one of the available tools but then tweaked a bit to be unrecognizable or unparseable by common extractors. You can try handling that by trying to see the file structure resembles any of the python executable builders.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Nov 17, 2018 at 2:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}