{
    "title": "When sampling the call stack, what is the point of grouping it just because the function addresses are close?",
    "link": "https://reverseengineering.stackexchange.com/questions/27133/when-sampling-the-call-stack-what-is-the-point-of-grouping-it-just-because-the",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/\" rel=\"nofollow noreferrer\">\n   https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/\n  </a>\n </p>\n <blockquote>\n  <p>\n   Normally Luke would group the same functions together but since I don’t have debugging symbols I had to eyeball nearby addresses to guess if it’s the same place. And what do we see? Not one bottleneck but two of them!\n  </p>\n </blockquote>\n <p>\n  Why does it make sense to group them together just because they are close?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "50",
    "tags": [
        "callstack"
    ],
    "user": "misaki",
    "time": "Mar 2, 2021 at 6:02",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n Since two, or more addresses are part of the same function why would you not group them together?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "misaki",
            "text": "<html><body><span class=\"comment-copy\">\n Why does it make sense to have \"close addresses\" instead of \"same address\"?　If it's the same function, it should have the same address... I think...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n The func A from the lib has calls to\n <code>\n  strcmp@0xDEADBEEF\n </code>\n and\n <code>\n  strlen@ 0xDEADBEAD\n </code>\n in it that are expensive. Since you analyze the lib, you want to see the performance metrics on func A level. Since there are no symbols, the tool cannot say that\n <code>\n  0xDEADBEEF\n </code>\n and\n <code>\n  0xDEADBEED\n </code>\n are both part of func A so you have to do the grouping based on proximity. That's my understanding for the grouping (I would probably do the same) but ofc you could ask the author for his clarification.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}