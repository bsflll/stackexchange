{
    "title": "Help with animation function",
    "link": "https://reverseengineering.stackexchange.com/questions/17092/help-with-animation-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to find the function which is animating a bot ingame (singleplayer). I already figured out the animation state value with Cheat Engine. Freezing that value lets the bot repeat the animation over and over again. Changing that value to the \"jump\"-value, the bot is jumping. So I guess, I'm already at the right location. Looking at this value by \"find out what writes to this address\" gets me into a small function (see image below) where some comparisons are done and the animation state value is set. I'm not very good at reversing, that's why I tried understanding the commands by putting some comments to the disassembly.\n </p>\n <p>\n  Image of the function with my comments:\n  <a href=\"https://i.sstatic.net/J8b5X.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/J8b5X.png\"/>\n  </a>\n </p>\n <p>\n  There are still some commands I'm not understanding right now. I want to call that function later from a DLL injection to play the animations by myself. So how do I know if I'm really in the right function? How do I get the right parameter values?\n </p>\n <p>\n  If I'm changing the jl to jnl command at line 0x232C3 the game stops playing any animation for the bot. Please help me, I don't know how to continue.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "87",
    "tags": [
        "disassemblers",
        "functions"
    ],
    "user": "Haxx0r",
    "time": "Jan 1, 2018 at 17:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How about you breakpoint the function start and take a look at the call stack.\nThis way you can easily find out the calling convention and used arguments.\n </p>\n <p>\n  All in all, this function looks like it's mainly looking up an array and then loading/writing some floating point values where the third parameter is an index.\nThe first conditional checks if that index is >= 0, the second one let's me assume that [eax@2] is the length of the array;\nexpressed with the parameters only this would be: [[param1+0x1C]+0x0].\n </p>\n <p>\n  ebp-0C is some kind of structure, whose second member (assuming dword-sized members) is treated as the base of an array (see line above outlined one).\n </p>\n <p>\n  If edx is the third parameter now, that means that it's an index into an array which holds all the animation states. Therefore the floating point stuff seems k inda uninteresting.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Andrew Mason",
            "time": "Jan 1, 2018 at 20:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Haxx0r",
                    "text": "<span class=\"comment-copy\">Thanks for your answer! Very interesting, I would never have seen this. What do you think, what are the arguments meaning and what do I have to do to call that function from external? The only thing I want is to play the animation for myself.</span>",
                    "time": null
                },
                {
                    "user": "Andrew Mason",
                    "text": "<span class=\"comment-copy\">Well, I guess the first parameter is some player/game structure. That game structure dereferenced at offset +0x1C is another structure holding the array of animation ids beginning at +0x4. The second parameter is the animation index you want to use.  The game structure stored in the first parameter also contains the current animation id (+0x8).</span>",
                    "time": null
                },
                {
                    "user": "Andrew Mason",
                    "text": "<span class=\"comment-copy\">Now, to reverse engineer the calling convention, I'd first start to collect hints inside of this function: - ecx is not used as first parameter, because it is overwritten right at the beginning =&gt; hence neither __thiscall nor __fastcall - function does not deallocate function arguments on the stack =&gt; hence not __stdcall  So my first guess would be __cdecl, but to further strengthen this assumption you could breakpoint the function (push ebp) and look at how it's called (see callstack).</span>",
                    "time": null
                },
                {
                    "user": "Haxx0r",
                    "text": "<span class=\"comment-copy\">Awesome, thank you andrew! I've called the function with the given player pointer and with the jump-animation-state. When calling ingame, the player only \"flickers\". Like it's only playing the first frame of the animation. Do you have any idea about this? You really helped me a lot! :-)</span>",
                    "time": null
                }
            ]
        }
    ]
}