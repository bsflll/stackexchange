{
    "title": "Inverse And operation",
    "link": "https://reverseengineering.stackexchange.com/questions/15873/inverse-and-operation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to write a keygen to a crack me that I'm learning from and I got stuck. What happens there is pretty simple:\n </p>\n <p>\n  Let's say that I entered the password: \"12121212\"\n </p>\n <pre><code>XOR DWORD PTR DS:[ECX+EAX],1234567\nAND BYTE PTR DS:[ECX+EAX],0E\nADD ECX,4\nCMP ECX,8\n</code></pre>\n <p>\n  As we can see, the first\n  <code>\n   DWORD\n  </code>\n  of the password (\n  <code>\n   0x32313231\n  </code>\n  ,\n  <em>\n   notice that x86 processors use\n  </em>\n  <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">\n   <em>\n    little-endian layout\n   </em>\n  </a>\n  ) is being\n  <code>\n   XORed\n  </code>\n  with\n  <code>\n   0x1234567\n  </code>\n  so\n  <code>\n   0x32313231 ^ 0x1234567\n  </code>\n  results with\n  <code>\n   0x56771233\n  </code>\n  .\nThen there is an\n  <code>\n   AND\n  </code>\n  operation on the first byte (\n  <code>\n   0x56\n  </code>\n  ) of the manipulated password and\n  <code>\n   0xe\n  </code>\n  which results with\n  <code>\n   0x6\n  </code>\n  . After that, the program repeats the operations, this time on the second\n  <code>\n   DWORD\n  </code>\n  of the password.\n </p>\n <p>\n  My question is: I know I can reverse\n  <code>\n   XOR\n  </code>\n  but is it possible with\n  <code>\n   AND\n  </code>\n  operation?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "patch-reversing",
        "xor"
    ],
    "user": "Xozu",
    "time": "Jul 21, 2017 at 14:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While there's no way to know with 100% certainty what was the original value before the AND operation, you can find some\n  <em>\n   possible\n  </em>\n  values producing the same result, and sometimes that's enough.\n </p>\n <p>\n  Basically, for\n  <code>\n   x & N = z\n  </code>\n  , you can start from\n  <code>\n   z\n  </code>\n  and set any bits to\n  <code>\n   1\n  </code>\n  where you have are 0 in\n  <code>\n   N\n  </code>\n  .\n  <code>\n   z\n  </code>\n  itself will always work too.\n </p>\n <p>\n  For example, if we know that\n  <code>\n   x & 0xE == 6\n  </code>\n  , then at any of the following values of\n  <code>\n   x\n  </code>\n  will work: 6,7, 0x16, 0x17, 0x26, 0x27 and so on.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 21, 2017 at 16:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Xozu",
                    "text": "<span class=\"comment-copy\">This answer helps me a lot!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The answer is\n  <strong>\n   no\n  </strong>\n  . Unlike bitwise\n  <code>\n   XOR\n  </code>\n  , bitwise\n  <code>\n   AND\n  </code>\n  can't be reversed:\n </p>\n <pre><code>0 & 1 = 0\n0 & 0 = 0\n</code></pre>\n <p>\n  Both\n  <code>\n   AND\n  </code>\n  and\n  <code>\n   OR\n  </code>\n  are not reversible. This is in contrast to\n  <code>\n   XOR\n  </code>\n  and\n  <code>\n   NOT\n  </code>\n  operators which are reversible.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Jul 21, 2017 at 13:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}