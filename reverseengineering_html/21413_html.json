{
    "title": "How does IDA provide function names to dynamic calls?",
    "link": "https://reverseengineering.stackexchange.com/questions/21413/how-does-ida-provide-function-names-to-dynamic-calls",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to compare a binary (a basic hello world exe compiled with MinGW) within Immunity Debugger and IDA. In Immunity I notice a call to EAX which points to\n  <code>\n   004019c0\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ZvjkY.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"immunity eax\" src=\"https://i.sstatic.net/ZvjkY.png\"/>\n  </a>\n </p>\n <p>\n  Looking in IDA I notice this call is identified as\n  <code>\n   ___dyn_tls_init_callback\n  </code>\n  . I want to better understand how IDA gets this name and applies to this address.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/uwuWL.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"ida eax named\" src=\"https://i.sstatic.net/uwuWL.png\"/>\n  </a>\n </p>\n <p>\n  If I follow the function in IDA via xrefs I see a reference to the code with a label provided by IDA but I'm unsure where this name comes from. How can I figure out how IDA got this name? I'd like to understand further so I can do the work myself in Immunity.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/5556T.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"ida xref followed\" src=\"https://i.sstatic.net/5556T.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "169",
    "tags": [
        "ida"
    ],
    "user": "Tom",
    "time": "Jun 3, 2019 at 0:45",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n In short, IDA is disassembler + decompiler which Immunity isn't. That function is a part of C runtime and it's an indirect call.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}