{
    "title": "Reverse engineering ARM PIC",
    "link": "https://reverseengineering.stackexchange.com/questions/14717/reverse-engineering-arm-pic",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm starting to learn reverse engineering so I'm trying to reverse sample app, compiled for ARM(iOS) and now I'm looking into code.\n </p>\n <p>\n  This section is right before\n  <code>\n   WHILE\n  </code>\n  and right at the beginning of function where values are initiated. but I can't find the raw values.\n </p>\n <p>\n  This is the function .h file:\n </p>\n <pre><code>#import \"NSObject.h\"\n\n@interface SampleCalc : NSObject\n\n+ (double)doCalc:(double)arg1;\n\n@end\n</code></pre>\n <p>\n  And this is the ARM code:\n </p>\n <pre><code>+[SampleCalc doCalc:]:\n0002f198         movw       sb, #0x6cb4      ; Objective C Implementation defined at 0x95db8 (class method), :lower16:(0xc5e60 - 0x2f1ac)\n0002f19c         vmov.i32   d18, #0x0\n0002f1a0         movt       sb, #0x9         ; :upper16:(0xc5e60 - 0x2f1ac)\n0002f1a4         vmov       d16, r2, r3\n0002f1a8         add        sb, pc           ; 0xc5e60\n0002f1aa         movs       r2, #0x0\n0002f1ac         add.w      r3, sb, #0x8     ; 0xc5e68\n0002f1b0         vldr       d17, [sb]\n</code></pre>\n <p>\n  If I understand correctly this is ARM PIC (position independent code).\n </p>\n <p>\n  But I don't get the logic here\n  <code>\n   0002f1b0\n  </code>\n  - does the brackets mean\n  <code>\n   sb\n  </code>\n  is storing address and value is loaded in\n  <code>\n   d17\n  </code>\n  ? And what is the address -\n  <code>\n   0xc5e68\n  </code>\n  correct?\n </p>\n <p>\n  The\n  <code>\n   0xc5e60\n  </code>\n  contains:\n </p>\n <pre><code>000c5e60         db  0x00 ;\n000c5e61         db  0x00 ; '.'\n000c5e62         db  0x00 ; '.'\n000c5e63         db  0x00 ; '.'\n000c5e64         db  0x00 ; '.'\n000c5e65         db  0x00 ; '.'\n000c5e66         db  0x33 ; '3'\n000c5e67         db  0x40 ; '@'\n000c5e68         db  0x00 ;\n000c5e69         db  0x00 ; '.'\n000c5e6a         db  0x00 ; '.'\n000c5e6b         db  0x00 ; '.'\n000c5e6c         db  0x00 ; '.'\n000c5e6d         db  0x00 ; '.'\n000c5e6e         db  0x34 ; '4'\n000c5e6f         db  0x40 ; '@'\n000c5e70         db  0x00 ; '.'\n000c5e71         db  0x00 ; '.'\n000c5e72         db  0x00 ; '.'\n000c5e73         db  0x00 ; '.'\n000c5e74         db  0x00 ; '.'\n000c5e75         db  0x00 ; '.'\n000c5e76         db  0x35 ; '5'\n</code></pre>\n <p>\n  So does that mean\n  <code>\n   D17\n  </code>\n  gets value\n  <code>\n   0x00\n  </code>\n  ?\n </p>\n <p>\n  Bonus question, if possible, what are all those\n  <code>\n   .\n  </code>\n  and\n  <code>\n   @\n  </code>\n  .\n </p>\n <p>\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "142",
    "tags": [
        "arm",
        "ios"
    ],
    "user": "Jana Bērziņa",
    "time": "Feb 22, 2017 at 23:08",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n What tool is the output from?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   sb\n  </code>\n  is the alternative name for the ARM register\n  <code>\n   R9\n  </code>\n  used by some disassemblers, similar to\n  <code>\n   ip\n  </code>\n  for\n  <code>\n   R12\n  </code>\n  ,\n  <code>\n   sp\n  </code>\n  for\n  <code>\n   R13\n  </code>\n  or\n  <code>\n   PC\n  </code>\n  for\n  <code>\n   R15\n  </code>\n  .\n </p>\n <p>\n  The main thing you need to look at is this:\n </p>\n <pre><code>0002f1a8         add        sb, pc  \n</code></pre>\n <p>\n  At this point,\n  <code>\n   sb\n  </code>\n  has the value of 0x96cb4 due to the\n  <code>\n   movw\n  </code>\n  and\n  <code>\n   movt\n  </code>\n  before.\nIn ARM, the\n  <code>\n   pc\n  </code>\n  value points two instructions ahead, so here it will have value 0x002f1a8+4 = 0x002f1ac. So, we get 0x002f1ac+0x96cb4=0xC5E60 which matches the comment added by the disassembler. Next,\n  <code>\n   vldr d17, [sb]\n  </code>\n  is executed which loads the double value at\n  <code>\n   sb\n  </code>\n  (or 0xC5E60). Double values are 8 bytes long so all of the bytes from 0xC5E60 till 0xC5E67 will be loaded. The hex for it is 0x4033000000000000 which\n  <a href=\"http://babbage.cs.qc.cuny.edu/IEEE-754.old/64bit.html\" rel=\"nofollow noreferrer\">\n   corresponds to 19.0\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 23, 2017 at 11:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}