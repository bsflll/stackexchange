{
    "title": "What type of function gets called using a register instead of address in the binary? how to find the address statically?",
    "link": "https://reverseengineering.stackexchange.com/questions/21154/what-type-of-function-gets-called-using-a-register-instead-of-address-in-the-bin",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I'm trying to write a reversing tool right now and trying to make a CALL graph\n </p>\n <p>\n  the problem I'm having is some calls are like Call *eax instead Call 'address'\n </p>\n <p>\n  I can easily generate the call-graph with absolute calls, but not with these\n </p>\n <p>\n  so i have three questions :\n </p>\n <ol>\n  <li>\n   <p>\n    what type of functions get called using register instead of absolute? \ni want to only generate call graph for functions inside the main program and not libraries and etc, do i need to worry about register calls or these are only used for special functions? if so, why? ( even if these are only for library functions i dont get why can't they be converted into absolute address during relocation??)\n   </p>\n  </li>\n  <li>\n   <p>\n    if i wanted to check what is the function that is being called aka by reading the register, is this possible using static analysis or i have to do dynamic analysis?\n   </p>\n  </li>\n  <li>\n   <p>\n    can i make a decent call-graph using static analysis, meaning by only reading the binary? do popular tools like IDA use static to generate call graph as well? or will i face real problems if i do so?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "179",
    "tags": [
        "binary-analysis",
        "x86",
        "binary"
    ],
    "user": "Max",
    "time": "Apr 15, 2019 at 12:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    In C++, the pointer of the method associated with an object are stored in something called a vtable. In order to call a specific method, you need to get a pointer to that vtable and get to the proper function. In the end, your going to end with a \"call eax\", even though the function call is not from an external library.\n   </p>\n  </li>\n  <li>\n   <p>\n    Well, it really depends on your case. You can use techniques such as\n    <a href=\"https://en.wikipedia.org/wiki/Symbolic_execution\" rel=\"nofollow noreferrer\">\n     symbolic execution\n    </a>\n    in order to resolve the jump destination. The idea of this technique is to associate a \"symbolic value\" (i.e. a variable) to the registers and compute the equation generated by the assembly. Then you can solve your equation to get the final value of the register you are looking for.\n   </p>\n   <p>\n    This works pretty well with simple equations, but if your code is\n    <a href=\"https://en.wikipedia.org/wiki/Obfuscation_(software)\" rel=\"nofollow noreferrer\">\n     obfuscated\n    </a>\n    (meaning that the code is voluntarily complex), you might not be able to solve the equation and find the call destination without a dynamic analysis. (Which, by the way, might also not give you the call destination if, for example, you don't find an execution path execution the \"call eax\").\n   </p>\n  </li>\n  <li>\n   <p>\n    In IDA, the call graph is generated by performing a static analysis. However, IDA does not resolve dynamic call if the jump are more complicated than \"loc_addr + offset\". It's a \"safe\" choice, because you might end up doing really complicated operation if your code is obfuscated.\nWhat tools usually do, is find a\n    <a href=\"https://en.wikipedia.org/wiki/Heuristic\" rel=\"nofollow noreferrer\">\n     heuristic\n    </a>\n    : it's a technique that does not work for every problem, but it works in some cases (just like the IDA solution).\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Max",
                    "text": "<span class=\"comment-copy\">So even IDA cannot include call *eax in their call graph therefore making it not a complete call-graph? and is this a common thing to happen inside the program and not in the initialization routines? meaning will i miss important calls if i dont include call *register inside my call graph?</span>",
                    "time": null
                },
                {
                    "user": "Caroline",
                    "text": "<span class=\"comment-copy\">IDA does not resolve <i>all</i> of them, only some of them. It is common if you have a C++ code handling objects and calling methods on this object.</span>",
                    "time": null
                }
            ]
        }
    ]
}