{
    "title": "Figure out whether a function has return value of not?",
    "link": "https://reverseengineering.stackexchange.com/questions/12496/figure-out-whether-a-function-has-return-value-of-not",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am doing binary analysis on\n  <code>\n   x86-64bit\n  </code>\n  ELF binaries. All the binaries are compiled from\n  <code>\n   C\n  </code>\n  language. Basically, for a given function, I would like to figure out whether this function has a return value or not. That is, in its corresponding\n  <code>\n   C\n  </code>\n  code, whether a meaningful\n  <code>\n   return\n  </code>\n  exists.\n </p>\n <p>\n  As I am essentially facing the assembly code, it is not feasible to figure out through some type information. However, as for normal\n  <code>\n   x86-64bit\n  </code>\n  assembly program, the calling convention only allows register\n  <code>\n   rax\n  </code>\n  to hold the return value,\n  <strong>\n   so I am thinking to check the usage of\n   <code>\n    rax\n   </code>\n   after a typical function call and decide whether the target function returns a value.\n  </strong>\n </p>\n <p>\n  Here is an example in\n  <code>\n   AT&T\n  </code>\n  syntax:\n </p>\n <pre><code>foo:\n   ...\n   call bar\n   mov 0, %rax  <--- bar should not have a return value\n\nbar:\n   ...\n</code></pre>\n <p>\n  In the above example, as\n  <code>\n   rax\n  </code>\n  is immediately reset, it is unlikely for function\n  <code>\n   bar\n  </code>\n  to return a value.\n </p>\n <p>\n  Another example:\n </p>\n <pre><code>foo:\n   ...\n   call bar\n   jmp *%rax  <----- It is very likely that bar has a return value\n</code></pre>\n <p>\n  For the above case, I suppose without some aggressive inter-procedure optimization, we can say it for sure that\n  <code>\n   bar\n  </code>\n  returns a value (a pointer).\n </p>\n <p>\n  I think this is yet another (ad-hoc) reverse engineering task, but I guess there may be a more \"formal\" way to solve it, any idea on that?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "560",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "elf",
        "functions",
        "x86-64"
    ],
    "user": "lllllllllllll",
    "time": "Apr 21, 2016 at 15:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I see several problems with that approach:\n </p>\n <ul>\n  <li>\n   Functions that return double values don't use\n   <code>\n    eax\n   </code>\n  </li>\n  <li>\n   Functions that return structs don't neccesarily use\n   <code>\n    eax\n   </code>\n   , see\n   <a href=\"http://blog.aaronballman.com/2012/02/describing-the-msvc-abi-for-structure-return-types/\" rel=\"nofollow\">\n    here\n   </a>\n  </li>\n  <li>\n   return values from many functions, like\n   <code>\n    free\n   </code>\n   ,\n   <code>\n    close\n   </code>\n   ,\n   <code>\n    printf\n   </code>\n   are custumarily ignored, so \"caller does not read\n   <code>\n    eax\n   </code>\n   \" does not translate to \"function has no return value\"\n  </li>\n  <li>\n   there are edge cases to \"\n   <code>\n    eax\n   </code>\n   is used\". For example,\n   <code>\n    xor [location], eax\n   </code>\n   probably means\n   <code>\n    eax\n   </code>\n   has a value,\n   <code>\n    xor eax, [location]\n   </code>\n   as well, but\n   <code>\n    xor eax, eax\n   </code>\n   means\n   <em>\n    probably\n   </em>\n   not.\n  </li>\n </ul>\n <p>\n  In the generic case, i think there's no foolproof way. For example, in a function ending in\n </p>\n <pre><code>for (i=0; i<somevar; i++)\n    somearray[i]=0;\nreturn i;\n</code></pre>\n <p>\n  the compiler may just decide to use\n  <code>\n   eax\n  </code>\n  for the loop counter; which means there's no reason to do another\n  <code>\n   mov\n  </code>\n  after the loop. If the caller ignores the value of\n  <code>\n   eax\n  </code>\n  , you have no way to determine, from the assembly alone, if that\n  <code>\n   return\n  </code>\n  statement was present or not. (Of course, in this particular case, any self respecting compiler will generate a variant of\n  <code>\n   rep stosw\n  </code>\n  or\n  <code>\n   sse\n  </code>\n  instructions, but you get the point).\n </p>\n <p>\n  So when the caller\n  <em>\n   does\n  </em>\n  read\n  <code>\n   eax\n  </code>\n  , you can be quite certain that the function has a return value; but a caller that ignores\n  <code>\n   eax\n  </code>\n  basically means nothing.\n </p>\n <p>\n  And even if the caller reads\n  <code>\n   eax\n  </code>\n  , you could construct pathological cases of a function written in assembler, that preserves\n  <code>\n   eax\n  </code>\n  , and a caller that knows about this and makes use of\n  <code>\n   eax\n  </code>\n  even over the function call. But you'll probably not encounter this in software that isn't deliberately obfuscated\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Apr 21, 2016 at 18:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Thank you Guntram. This is a fantastic answer. I learned a lot from it! I guess I will start from checking the usage of <code>eax</code>. Although when considering potential control flow transfer following the <code>call</code> instruction, tracing the usage of <code>eax</code> is by no means as easy as it looks...</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">As I want to implement it like a dataflow analysis task.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The return value is defined by the calling convention used by your compiler, and it usually just means \"the value of\n  <code>\n   eax\n  </code>\n  /\n  <code>\n   rax\n  </code>\n  \".\n </p>\n <p>\n  In your first example,\n  <code>\n   rax\n  </code>\n  is not reset, it's just set to the value\n  <code>\n   0\n  </code>\n  , hence the functions most likely ends with a\n  <code>\n   return 0;\n  </code>\n  .\n </p>\n <p>\n  In your second example, you should check what is the last write on\n  <code>\n   rax\n  </code>\n  in the\n  <code>\n   bar\n  </code>\n  function.\n </p>\n <p>\n  You could try to check whether the next operation on\n  <code>\n   rax\n  </code>\n  after your function is a write or a read, basically if it's a read the return value is used, if it's a write the return value is discarded.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "frogatto",
            "time": "Jun 14, 2016 at 17:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">\"You could try to check whether the next operation on rax after your function is a write or a read\" - that's what he's doing. The first example has a write to <code>rax</code> after the call to <code>bar</code>, the second example reads <code>rax</code>.</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">@GuntramBlohm. Hi, thank you for your reply. Yes, that's basically what I am thinking to do right now ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}