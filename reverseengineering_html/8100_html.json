{
    "title": "Running an optimization pass on an IR",
    "link": "https://reverseengineering.stackexchange.com/questions/8100/running-an-optimization-pass-on-an-ir",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looking around for IR's used for reverse engineering, I find quite a few interesting ones. Assuming that I have a function that I'm trying to reverse engineer, I'm considering the following approach.\n </p>\n <p>\n  Lift the assembly to an IR, run an optimisation pass on it and convert it back into assembly. How hard would it be to implement something like this? Are there any IRs that you'd recommend. I'm guessing that being able to lift the assembly code into an LLVM IR would be pretty useful and one could run the LLVM optimisation passes on it.\n </p>\n <p>\n  Do you have any suggestions on this?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "466",
    "tags": [
        "program-analysis"
    ],
    "user": null,
    "time": "Feb 25, 2015 at 16:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://github.com/trailofbits/mcsema\" rel=\"nofollow noreferrer\">\n   mcsema\n  </a>\n  ('MC-Semantics') translates x86 to LLVM IR so that all the LLVM IR tools can be applied for analysis. It came up in the related topic\n  <em>\n   <a href=\"https://reverseengineering.stackexchange.com/questions/6966/recompiling-optimizing-redundant-code-to-make-analysis-easier\">\n    Recompiling/optimizing redundant code to make analysis easier\n   </a>\n  </em>\n  , which also has pointers to further work/papers.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can try the\n  <em>\n   <a href=\"https://github.com/cea-sec/miasm\" rel=\"nofollow\">\n    Miasm framework\n   </a>\n  </em>\n  which is written in python and has all the capabilities you require. Other than this you have\n  <em>\n   <a href=\"http://metasm.cr0.org/\" rel=\"nofollow\">\n    metasm\n   </a>\n  </em>\n  , written in pure ruby with no dependencies. These frameworks implement their own IR which is different from LLVM.\n </p>\n <p>\n  The book\n  <em>\n   <a href=\"http://rads.stackoverflow.com/amzn/click/1502489309\" rel=\"nofollow\">\n    Practical Reverse Engineering\n   </a>\n  </em>\n  has tutorials on the usage of the frameworks.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xec",
            "time": "Jan 27, 2015 at 3:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1743",
                    "text": "<span class=\"comment-copy\">I had come across the Miasm framework earlier; from what I see, it provides a means to lift assembly to IR and perform symbolic execution -- but not do optimisation passes on it? Just to be clear. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">It really depends on what you call optimization. Miasm can remove some obfuscation at the assembly level. Is that what you mean by optimization?</span>",
                    "time": null
                },
                {
                    "user": "user1743",
                    "text": "<span class=\"comment-copy\">@Dillinur Hi, thanks for commenting. I mainly meant dead code elimination and being able to reduce the number of instructions required to perform a particular operation. I'm also curious if miasm/metasm can work with instruction traces(as opposed to binaries).</span>",
                    "time": null
                }
            ]
        }
    ]
}