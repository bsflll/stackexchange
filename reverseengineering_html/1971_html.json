{
    "title": "Any idea how to decode this binary data?",
    "link": "https://reverseengineering.stackexchange.com/questions/1971/any-idea-how-to-decode-this-binary-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have binary data representing a table.\n </p>\n <p>\n  Here's the data when I print it with Python's\n  <a href=\"http://docs.python.org/2/library/repr.html#module-repr\">\n   repr()\n  </a>\n  :\n  <code>\n   \\xff\\xff\\x05\\x04test\\x02A\\x05test1@\\x04\\x03@@\\x04\\x05@0\\x00\\x00@\\x05\\x05test2\\x03\\x05\\x05test1\\x06@0\\x00\\x01@\\x00\n  </code>\n </p>\n <p>\n  Here's what the table looks like in the proprietary software.\n </p>\n <p>\n  <kbd>\n  </kbd>\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n   test1\n  </kbd>\n  \n\n  <kbd>\n   test\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n   test1\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n   test2\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n  <kbd>\n   test1\n  </kbd>\n  <kbd>\n  </kbd>\n  <kbd>\n  </kbd>\n  \n\n </p>\n <p>\n  I was able to guess some of it:\n </p>\n <ul>\n  <li>\n   It's column by column then cell by cell, starting at the top left cell.\n  </li>\n  <li>\n   The\n   <code>\n    \\x04\n   </code>\n   in\n   <code>\n    \\x04test\n   </code>\n   seems to be the length (in bytes I guess) of the following word.\n  </li>\n  <li>\n   <code>\n    @\n   </code>\n   mean the last value\n  </li>\n </ul>\n <p>\n  Anyone knows if the data is following a standard or have any tips how to decode it?\n </p>\n <p>\n  Thanks!\n </p>\n <p>\n  Here's an example with python :\n </p>\n <pre><code>from struct import unpack\n\n\ndef DecodeData(position):\n    print \"position\", position\n    firstChar = data[position:][:1]\n    size_in_bytes = unpack('B', firstChar)[0]\n    print \"firstChar: {0}. size_in_bytes: {1}\".format(repr(firstChar), size_in_bytes)\n    return size_in_bytes\n\n\ndef ReadWord(position, size_in_bytes):\n    word = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\n    print \"word:\", word\n\ndata = \"\\xff\\xff\\x05\\x04test\\x02A\\x05test1@\\x04\\x03@@\\x04\\x05@0\\x00\\x00@\\x05\\x05test2\\x03\\x05\\x05test1\\x06@0\\x00\\x01@\\x00\"\n\nposition = 0\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\xff - ?\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x05 - ?\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nReadWord(position, size_in_bytes)\n\n\nprint \"\"\nposition += size_in_bytes\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\"\"'2A' : could be to say that \"test\" has 2 empty cells before it\"\"\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nword = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\nprint \"word:\", word\n\nposition += size_in_bytes\n\nDecodeData(position)\nprint \"\"\"@: mean that there's another \"test1\" cell\"\"\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x04\\\\x03 - Could be that the next value is 3 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\"\nposition += 1\nprint \"@@ - Seems to mean 3 repetitions\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x04\\\\x05 - Could be that the next value is 5 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x00\\\\x00 - That could mean to move to the first cell on the next column\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x05 - ?\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nword = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\nprint \"word:\", word\nposition += size_in_bytes\n\nprint \"\"\nDecodeData(position)\nprint \"\\\\x03 - Could be to tell that the pervious word 'test2' is 3 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x05 - ?\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nword = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\nprint \"word:\", word\nposition += size_in_bytes\n\nprint \"\"\nDecodeData(position)\nprint \"\\\\x06 - Could be to tell that the pervious word 'test1' is 6 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\0 - ?\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x00\\\\x01 - Seems to mean, next column second cell\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x00 - end of data or column\"\n</code></pre>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "5k",
    "tags": [
        "unpacking",
        "file-format"
    ],
    "user": "bbigras",
    "time": "May 1, 2013 at 18:00",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Do you have the module itself? It would be almost trivial to disassemble the\n <code>\n  repr\n </code>\n function, assuming this is registered the normal way it is in C extension modules.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bbigras",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure I understand what you mean by \"module\". But here's the data in HEX 0xFFFF050474657374024105746573743140040340400405403000004005057465737432030505746573743106403000014000. I'm using repr() only to get rid of the 'Decode error - output not utf-8' message in python so you can ignore that.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n The data belongs to some kind of object and that usually belongs to a module, such as the ones you\n <code>\n  import\n </code>\n in Python ;)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bbigras",
            "text": "<html><body><span class=\"comment-copy\">\n The data is from a [varbinary](max) field in a MSSQL database which is used by a proprietary and uncooperative software.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n It would make sense to have the software that processes the data.\n <a href=\"http://reverseengineering.stackexchange.com/questions/261\">\n  See here\n </a>\n . Basically\n <b>\n  too little info\n </b>\n to help you.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here's an explanation for what I think the individual symbols mean. I'm basing this around the presumption that a little selector is going through the cells, one by one.\n </p>\n <ul>\n  <li>\n   <code>\n    \\xFF\n   </code>\n   = Null cell\n  </li>\n  <li>\n   <code>\n    \\x05\n   </code>\n   = A string is following, with\n   <code>\n    \\xNumber\n   </code>\n   coming after the string to define how far to displace the string from the selector's current position, if at all.\n  </li>\n  <li>\n   <code>\n    \\xNumber string\n   </code>\n   = A string of length number\n  </li>\n  <li>\n   <code>\n    \\x2A\n   </code>\n   = Could be a byte that says not to displace the current string, and also to assume that the next piece of data is defining a string to be placed in the next cell. Questionable meaning.\n  </li>\n  <li>\n   <code>\n    \\x04 \\xNumber\n   </code>\n   = Move selector ahead\n   <code>\n    \\xNumber\n   </code>\n   cells and place previous string into there.\n  </li>\n  <li>\n   <code>\n    0 \\x00 \\x0Number\n   </code>\n   = New column, move selector into row\n   <code>\n    \\xNumber\n   </code>\n   , and place previous string into there.\n   <code>\n    @\n   </code>\n   = Place previously used string in the cell following the current one.\n  </li>\n </ul>\n <p>\n  So here's my interpretation of the data you're giving us:\n </p>\n <ul>\n  <li>\n   <code>\n    \\xFF\\xFF\n   </code>\n   = two null cells\n  </li>\n  <li>\n   <code>\n    \\x05\n   </code>\n   = A cell, singular, with a string, placed following the null cells, because of the\n   <code>\n    \\x2A\n   </code>\n   following the string\n  </li>\n  <li>\n   <code>\n    \\x04 test\n   </code>\n   = The string.\n  </li>\n  <li>\n   <code>\n    \\x2A \\x05 test1\n   </code>\n   = Another string placed into the cell following. No number needed, since \\x2A implies that it's being placed right after \"test\"\n  </li>\n  <li>\n   <code>\n    @\n   </code>\n   = Place \"test1\" into the cell after the \"test1\" string was first placed.\n  </li>\n  <li>\n   <code>\n    \\x04 \\x03\n   </code>\n   = Move selector ahead three cells and place test1 where it lands.\n  </li>\n  <li>\n   <code>\n    @@\n   </code>\n   = Place into the two cells following also.\n  </li>\n  <li>\n   <code>\n    \\x04 \\x05 @\n   </code>\n   = Skip four cells, place into two cells.\n  </li>\n  <li>\n   <code>\n    0\n   </code>\n   = New column.\n  </li>\n  <li>\n   <code>\n    \\x00 \\x00 @\n   </code>\n   = Using string last defined (test1), place into first two cells of the column.\n  </li>\n  <li>\n   <code>\n    \\x05 \\x05 test2 \\x03\n   </code>\n   = Place a cell three cells afterwords.\n  </li>\n  <li>\n   <code>\n    \\x05\\x05test1\\x06\n   </code>\n   = Place test1 into a cell 6 after test2\n  </li>\n  <li>\n   <code>\n    @\n   </code>\n   = Place test1 again, too.\n  </li>\n  <li>\n   <code>\n    0\n   </code>\n   = move to next column\n  </li>\n  <li>\n   <code>\n    \\x00\\x01\n   </code>\n   = Place previous string at location 01\n  </li>\n  <li>\n   <code>\n    @\n   </code>\n   = And also at location 02\n  </li>\n  <li>\n   <code>\n    \\x00\n   </code>\n   = Done\n  </li>\n </ul>\n <p>\n  Explanation: My method was to look for a pattern, check if the pattern withstood further scrutiny - the first pattern I checked seemed to - and clear up any minor issues I had with it. Seems to have worked.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "0xC0000022L",
            "time": "May 4, 2013 at 2:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">Please format your answers properly. @0xC0000022L did it for you this time.</span>",
                    "time": null
                }
            ]
        }
    ]
}