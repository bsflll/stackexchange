{
    "title": "scanf return value",
    "link": "https://reverseengineering.stackexchange.com/questions/17103/scanf-return-value",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looking this snippet of code I can't figure out where is stored the return value of the\n  <code>\n   scanf()\n  </code>\n  function.\n </p>\n <p>\n  <strong>\n   EDIT\n  </strong>\n  :\n </p>\n <p>\n  From man page,\n  <code>\n   scanf()\n  </code>\n  return an\n  <code>\n   int\n  </code>\n  value representing the number of input items successfully matched and assigned.\n </p>\n <p>\n  I was expecting\n  <code>\n   0x04\n  </code>\n  in the\n  <code>\n   EAX\n  </code>\n  register (user input =\n  <code>\n   AAAA\n  </code>\n  ) but after returning from\n  <code>\n   scanf()\n  </code>\n  ,\n  <code>\n   EAX = 0x00000000\n  </code>\n  :\n </p>\n <pre><code>       0x080483e4      55             push ebp\n       0x080483e5      89e5           mov ebp, esp\n       0x080483e7      83ec18         sub esp, 0x18\n       0x080483ea      83e4f0         and esp, 0xfffffff0\n       0x080483ed      b800000000     mov eax, 0\n       0x080483f2      83c00f         add eax, 0xf\n       0x080483f5      83c00f         add eax, 0xf\n       0x080483f8      c1e804         shr eax, 4\n       0x080483fb      c1e004         shl eax, 4\n       0x080483fe      29c4           sub esp, eax\n       0x08048400      c70424488504.  mov dword [esp], str.IOLI_Crackme_Level_0x02 ; [0x8048548:4]=0x494c4f49 ; \"IOLI Crackme Level 0x02\n\"\n       0x08048407      e810ffffff     call sym.imp.printf         ; int printf(const char *format)\n       0x0804840c      c70424618504.  mov dword [esp], str.Password: ; [0x8048561:4]=0x73736150 ; \"Password: \" ; const char * format\n       0x08048413      e804ffffff     call sym.imp.printf         ; int printf(const char *format)\n       0x08048418      8d45fc         lea eax, ebp - 4\n       0x0804841b      89442404       mov dword [local_4h_2], eax\n       0x0804841f      c704246c8504.  mov dword [esp], 0x804856c  ; [0x804856c:4]=0x50006425 ; const char * format\n       ;-- eip:\n       0x08048426 b    e8e1feffff     call sym.imp.scanf          ; int scanf(const char *format)\n       0x0804842b      c745f85a0000.  mov dword [local_8h], 0x5a  ; 'Z' ; 90\n       0x08048432      c745f4ec0100.  mov dword [local_ch], 0x1ec ; 492\n       0x08048439      8b55f4         mov edx, dword [local_ch]\n       0x0804843c      8d45f8         lea eax, ebp - 8\n       0x0804843f      0110           add dword [eax], edx\n       0x08048441      8b45f8         mov eax, dword [local_8h]\n       0x08048444      0faf45f8       imul eax, dword [local_8h]\n       0x08048448      8945f4         mov dword [local_ch], eax\n       0x0804844b      8b45fc         mov eax, dword [local_4h]\n       0x0804844e      3b45f4         cmp eax, dword [local_ch]\n   ┌─< 0x08048451      750e           jne 0x8048461\n   │   0x08048453      c704246f8504.  mov dword [esp], str.Password_OK_: ; [0x804856f:4]=0x73736150 ; \"Password OK :)\n\" ; const char * format\n   │   0x0804845a      e8bdfeffff     call sym.imp.printf         ; int printf(const char *format)\n  ┌──< 0x0804845f      eb0c           jmp 0x804846d\n  │└─> 0x08048461      c704247f8504.  mov dword [esp], str.Invalid_Password ; [0x804857f:4]=0x61766e49 ; \"Invalid Password!\n\" ; const char * format\n  │    0x08048468      e8affeffff     call sym.imp.printf         ; int printf(const char *format)\n  │       ; JMP XREF from 0x0804845f (main)\n  └──> 0x0804846d      b800000000     mov eax, 0\n       0x08048472      c9             leave\n       0x08048473      c3             ret\n</code></pre>\n <p>\n  Also, I cannot find any reference to the user input (from the previous\n  <code>\n   scanf()\n  </code>\n  call). I think it's in\n  <code>\n   local_4h\n  </code>\n  because it's compared with the flag value (\n  <code>\n   0x00052b24\n  </code>\n  ) stored in\n  <code>\n   local_ch\n  </code>\n  .\n </p>\n <pre><code> var local_4h = 0xffa46fd4  0xf7f66000  ... @eax edi\n var local_8h = 0xffa46fd0  0x00000001  .... esi\n var local_ch = 0xffa46fcc  0x00000000  .... ecx\n</code></pre>\n <p>\n  But, I cannot understand how.\n </p>\n <p>\n  For more info, this is the stack right before the\n  <code>\n   scanf()\n  </code>\n  call:\n </p>\n <pre><code>- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0xffa46fb0  6c85 0408 d46f a4ff 0000 0000 fbb4 ddf7  l....o..........\n0xffa46fc0  dc63 f6f7 f481 0408 0c9f 0408 0000 0000  .c..............\n0xffa46fd0  0100 0000 0060 f6f7 0000 0000 5644 dcf7  .....`......VD..\n</code></pre>\n <p>\n  And registers:\n </p>\n <pre><code> eax = 0xffa46fd4\n ebx = 0x00000000\n ecx = 0x00000000\n edx = 0xf7f67870\n esi = 0x00000001\n edi = 0xf7f66000\n esp = 0xffa46fb0\n ebp = 0xffa46fd8\n eip = 0x08048426\n eflags = 0x00000286\n oeax = 0xffffffff\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "Kartone",
    "time": "Jan 3, 2018 at 20:51",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n This \"scanf return int value representing the total input chars from stdin\" is most certainly not what that page says. It returns the\n <i>\n  successfully matched and assigned\n </i>\n number of arguments. What is the format string for this\n <code>\n  scanf\n </code>\n string? If it's something like\n <code>\n  \"%d\"\n </code>\n then\n <code>\n  0\n </code>\n is a correct result, with your input.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to\n  <code>\n   man scanf\n  </code>\n </p>\n <blockquote>\n  <p>\n   On success, these functions return the number of input items successfully matched and assigned; this can be fewer than provided for,  or  even  zero,  in  the\n         event of an early matching failure.\n  </p>\n  <p>\n   The  value EOF is returned if the end of input is reached before either the first successful conversion or a matching failure occurs.  EOF is also returned if\n         a read error occurs, in which case the error indicator for the stream (see ferror(3)) is set, and errno is set to indicate the error.\n  </p>\n </blockquote>\n <p>\n  Also during a function in x86 the stack looks something like this\n </p>\n <pre><code>► 0x80484f9 <main+62>    call   __isoc99_scanf@plt            <0x80483a0>\n    format: 0x80485e0 ◂— 0x25006425 /* '%d' */\n    vararg: 0xffffcfe8 —▸ 0xffffd0ac —▸ 0xffffd264 ◂— 0x5f474458 ('XDG_')\n[──────────────────────────STACK──────────────────────────]\n00:0000│ esp  0xffffcfc0 —▸ 0x80485e0 ◂— and    eax, 0x64250064 /* '%d' */\n01:0004│      0xffffcfc4 —▸ 0xffffcfe8 —▸ 0xffffd0ac —▸ 0xffffd264 ◂— ...\n02:0008│      0xffffcfc8 —▸ 0xf7f9f244 —▸ 0xf7e07020 (_IO_check_libio) ◂—  call   0xf7f0eb09\n</code></pre>\n <p>\n  The top of the stack is the first parameter\n  <code>\n   format\n  </code>\n  followed by references to variables which will store the values matching with the format string.\nIn your case\n  <code>\n   mov dword [esp], 0x804856c\n  </code>\n  kind of pushes format string to the stack top\n  <code>\n   esp\n  </code>\n  . Somewhere above this snippet you'd have\n  <code>\n   mov dword [esp+4], stack_address_ref\n  </code>\n  to add the variables which will be saving the values parsed.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jongware",
            "time": "Jan 3, 2018 at 17:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Thanks to\n  <a href=\"https://reverseengineering.stackexchange.com/users/14622/sudhackar\">\n   sudhackar\n  </a>\n  comment i was able to understand\n  <code>\n   scanf()\n  </code>\n  :\n </p>\n <p>\n  <code>\n   mov dword [esp], 0x804856c\n  </code>\n </p>\n <p>\n  pushes the format string on the stack:\n </p>\n <pre><code>:> px @ 0x804856c\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  0123456789ABCD\n0x0804856c  2564 0050 6173 7377 6f72 6420 4f4b  %d.Password OK\n0x0804857a  203a 290a 0049 6e76 616c 6964 2050   :)..Invalid P\n0x08048588  6173 7377 6f72 6421 0a00 0000 0000  assword!......\n</code></pre>\n <p>\n  It's a\n  <code>\n   %d\n  </code>\n  so it references a decimal variable. After user input (\n  <strong>\n   in this case password was a number\n   <code>\n    23\n   </code>\n  </strong>\n  ), local variable at\n  <code>\n   ebp-0x04\n  </code>\n  contains its value:\n </p>\n <pre><code>:> afvd\nvar local_4h = 0xffe6cf34  0x00000017  ....\nvar local_8h = 0xffe6cf30  0x00000001  .... eax\nvar local_ch = 0xffe6cf2c  0x00000000  .... ecx\n</code></pre>\n <p>\n  Infact:\n </p>\n <p>\n  <code>\n   0x17=23\n  </code>\n </p>\n <p>\n  What differs from before is that previous password was\n  <code>\n   AAAA\n  </code>\n  ,\n  <strong>\n   not a decimal number\n  </strong>\n  :\n  <code>\n   scanf()\n  </code>\n  was unable to match variables and returned nothing.\n </p>\n <p>\n  I have only a last small doubt: comparing disassembled code between radare2 and objdump I found a small difference but I think it's pretty important though:\n </p>\n <p>\n  from\n  <strong>\n   radare2\n  </strong>\n  :\n </p>\n <pre><code>   0x08048418      8d45fc         lea eax, ebp - 4\n   0x0804841b      89442404       mov dword [local_4h_2], eax\n   0x0804841f      c704246c8504.  mov dword [esp], 0x804856c  \n   0x08048426 b    e8e1feffff     call sym.imp.scanf\n</code></pre>\n <p>\n  from\n  <strong>\n   objdump\n  </strong>\n  :\n </p>\n <pre><code>   8048418: 8d 45 fc                lea    eax,[ebp-0x4]\n   804841b: 89 44 24 04             mov    DWORD PTR [esp+0x4],eax\n   804841f: c7 04 24 6c 85 04 08    mov    DWORD PTR [esp],0x804856c\n</code></pre>\n <p>\n  Is there any reason for that difference in instruction at\n  <code>\n   0x08048418\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Kartone",
            "time": "Jan 4, 2018 at 6:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">That has been raised as issue and <a href=\"https://github.com/radare/radare2/issues/7500\" rel=\"nofollow noreferrer\">reportedly has been fixed</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}