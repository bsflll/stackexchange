{
    "title": "How can valid inputs be generated using the simulation manager in angr?",
    "link": "https://reverseengineering.stackexchange.com/questions/30224/how-can-valid-inputs-be-generated-using-the-simulation-manager-in-angr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a binary compiled for x86_64 that looks like this:\n </p>\n <pre><code>#include <stdio.h>\n#include <string.h>\n\nvoid options(char *input) {\n    if (strcmp(input, \"A\") == 0) {\n        printf(\"You picked 'A'\n\");\n    } else if (strcmp(input, \"B\") == 0) {\n        printf(\"You picked 'B'\n\");\n    } else {\n        printf(\"You picked something That wasn't 'A' or 'B'\n\");\n    }\n    return;\n}\n\nint main(int argc, char **argv) {\n    options(\"Z\");\n    return 0;\n}\n</code></pre>\n <p>\n  It has been compiled with the following command:\n </p>\n <pre><code>gcc main.c -static -o demo\n</code></pre>\n <p>\n  I would now like to use angr to find inputs for as much code coverage as possible.\nThe desired outputs are\n  <code>\n   A\n  </code>\n  ,\n  <code>\n   B\n  </code>\n  , and something similar to\n  <code>\n   Anything\n  </code>\n  .\n </p>\n <p>\n  This article (\n  <a href=\"https://breaking-bits.gitbook.io/breaking-bits/vulnerability-discovery/reverse-engineering/modern-approaches-toward-embedded-research\" rel=\"nofollow noreferrer\">\n   https://breaking-bits.gitbook.io/breaking-bits/vulnerability-discovery/reverse-engineering/modern-approaches-toward-embedded-research\n  </a>\n  ) shows that its possible to do something like this. I've had success with this technique from time to time, but often I'm left with no inputs generated. The following example is based off of the example given in the link. It is the script I am using to attempt to generate inputs:\n </p>\n <pre><code>#! /usr/bin/env python3\n\nimport angr\nimport angr.sim_options as so\nimport claripy\nimport sys\n\nsys.setrecursionlimit(15000)\n\nsymbol = \"options\"\n\n# Create a project with history tracking\np = angr.Project('/home/user/Documents/demo')\nextras = {so.REVERSE_MEMORY_NAME_MAP, so.TRACK_ACTION_HISTORY}\n\n# User input will be 200 symbolic bytes\nuser_arg = claripy.BVS(\"user_arg\", 200*8)\n\n# State starts at function address\nstart_addr = p.loader.find_symbol(symbol).rebased_addr\nstate = p.factory.blank_state(addr=start_addr, add_options=extras)\n\n# Store symbolic user_input buffer\nstate.memory.store(0x100000, user_arg)\nstate.regs.rax = 0x100000\n\n# Run to exhaustion\nsimgr = p.factory.simgr(state)\n\n# Exploration technique to prevent infinite loops\nsimgr.use_technique(angr.exploration_techniques.LoopSeer(bound=50))\n\nsimgr.explore()\n\ni = 0;\n# Print each path and the inputs required\nfor path in simgr.unconstrained:\n    print(\"{} : {}\".format(path,hex([x for x in path.history.bbl_addrs][-1])))\n    u_input = path.solver.eval(user_arg, cast_to=bytes)\n    print(u_input)\n    with open('corpus/output'+str(i)+'.bin', 'wb') as file:\n        file.write(u_input)\n    i = i + 1\n</code></pre>\n <p>\n  The main differences from the article are that this script is to be used for an x86_64 binary (register changed), and discovered inputs are saved to files.\n </p>\n <p>\n  When I run the script, I get a handful of errors and warnings:\n </p>\n <pre><code>WARNING | 2022-04-04 20:23:59,667 | claripy.vsa.strided_interval | Tried to cast_low an interval to an interval shorter than its stride.\nERROR   | 2022-04-04 20:23:59,703 | angr.analyses.cfg.indirect_jump_resolvers.jumptable.JumpTableProcessor | Unsupported Binop Iop_InterleaveHI64x2.\n...\nWARNING | 2022-04-04 20:24:03,531 | claripy.vsa.strided_interval | Tried to cast_low an interval to an interval shorter than its stride.\n...\nERROR   | 2022-04-04 20:24:05,909 | angr.analyses.cfg.cfg_fast | Decoding error occurred at address 0x428b82 of function 0x426e20.\n...\nWARNING | 2022-04-04 20:24:26,416 | angr.analyses.loopfinder | Bad loop: more than one entry point (<BlockNode at 0x46a2d0 (size 19)>, <BlockNode at 0x46a2f4 (size 15)>)\n</code></pre>\n <p>\n  I can provide the full output, but it is rather long and will exceed the post length limit.\n </p>\n <p>\n  When the script finished, it provides no unconstrained outputs.\nThis is the approach I thought I should have taken based on the article I read.\nThis could be the wrong approach entirely, but I'll boil it down to one question.\nWhat can one do to generate a list of inputs that provide maximum coverage using angr?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "553",
    "tags": [
        "angr"
    ],
    "user": "Matthew Tingum",
    "time": "Apr 5, 2022 at 2:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A simple problem I see in your code is\n </p>\n <pre><code>state.regs.rax = 0x100000\n</code></pre>\n <p>\n  if you need to set constraint on a function argument - you 'll need to follow the calling convention. On my machine - Ubuntu Linux - the calling convention says first arg to be present in\n  <code>\n   rdi\n  </code>\n </p>\n <p>\n  so by merely changing it to\n </p>\n <pre><code>state.regs.rdi = 0x100000\n</code></pre>\n <p>\n  I see this as output\n </p>\n <pre><code><SimState @ <BV64 mem_7ffffffffff0000_6980_64{UNINITIALIZED}>> : 0x4006ed\nb'A\\x00\\...'\n<SimState @ <BV64 mem_7ffffffffff0000_6981_64{UNINITIALIZED}>> : 0x4006ed\nb'B\\x00\\...'\n<SimState @ <BV64 mem_7ffffffffff0000_6982_64{UNINITIALIZED}>> : 0x4006ed\nb'\\x80\\x80...'\n</code></pre>\n <p>\n  Which matches correctly with what the code does.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Apr 5, 2022 at 10:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Matthew Tingum",
                    "text": "<span class=\"comment-copy\">Much appreciated! That was clearly the issue in this case.</span>",
                    "time": null
                }
            ]
        }
    ]
}