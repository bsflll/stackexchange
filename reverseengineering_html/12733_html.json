{
    "title": "Mapping Android resource IDs to resource string",
    "link": "https://reverseengineering.stackexchange.com/questions/12733/mapping-android-resource-ids-to-resource-string",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer an Android app. I've tried using several decompilers, and while I'm getting java source codes to varying levels of accuracy, I'm not able to convert the resource IDs to the resource strings. In the Java source, all I'm getting is the 32bit resource ID, which is meaningless to me. Is there anyway to get the resource string from this resource ID? I did not find any R.java in any of the decompiled code.\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "11k",
    "tags": [
        "decompilation",
        "android",
        "static-analysis",
        "java"
    ],
    "user": "user1118764",
    "time": "May 25, 2016 at 2:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using\n  <code>\n   apktool\n  </code>\n  you can decompile a program's resources. Also you can use JEB to view the resource id.\n </p>\n <p>\n  In\n  <code>\n   res/values\n  </code>\n  , you can find the id using name in public.xml (or something similar, e.g. publics.xml or name.xml). That's it.\n </p>\n <p>\n  P.S.: You'll need to convert the 32bit resource id into HEX before you search for it.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "FloatingRock",
            "time": "Mar 11, 2019 at 19:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">why someone gives me an -1? in res/values there are many xmls. Just open them you will find all IDs.</span>",
                    "time": null
                },
                {
                    "user": "user1118764",
                    "text": "<span class=\"comment-copy\">Thanks. Other than JEB, are there any other tools, preferably free, that can extract this xml file with the mapping?</span>",
                    "time": null
                },
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">@user1118764 I have said that apktool could do this too.</span>",
                    "time": null
                },
                {
                    "user": "user1118764",
                    "text": "<span class=\"comment-copy\">I have used apktool to get the resources, but I only see the XML files which give the string names and values, and not the mapping between the string names and the resource ID.</span>",
                    "time": null
                },
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">@user1118764 there are many XML files there.Just open them. You can using calculator convert the id to HEX and then search it in those files.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yunchao Guan's answer is correct.\n </p>\n <p>\n  For example, i recently unpacked an application (zaka.com.amperemeter-1.apk, yes, it's zaka.com, not com.zaka as it shoule be) to improve the bad German translation that had been done by google translate.\n </p>\n <p>\n  Unzipping the .apk, using dex2jar on the .dex, and procyon on the resulting jar gave me, for example:\n </p>\n <pre><code>unzip/procyon/gluapps/Ampere/meter/Activity/MainActivity.java:240\n    return this.getString(2131099670)\n</code></pre>\n <p>\n  ALSO, procyon gave me an R.java that has a name for that number:\n </p>\n <pre><code>unzip/procyon/gluapps/Ampere/meter/R.java:909\n    public static final int Usb_plug_type = 2131099670;\n</code></pre>\n <p>\n  So you really should get a R.java source code from decompiling. In case you don't,\n  <code>\n   apktool d zaka.com.amperemeter-1.apk\n  </code>\n  gives you several files that have the same number, in hex, in smali files:\n </p>\n <pre><code>work/smali/gluapps/Ampere/meter/R$string.smali:20\n   .field public static final Usb_plug_type:I = 0x7f060016\nwork/smali/gluapps/Ampere/meter/Activity/MainActivity.smali:477\n    const v1, 0x7f060016\n</code></pre>\n <p>\n  these are basically the same as in the decompiled java files. Additionally:\n </p>\n <pre><code>work/res/values/public.xml:473\n    <public type=\"string\" name=\"Usb_plug_type\" id=\"0x7f060016\" />\n</code></pre>\n <p>\n  This is the key that maps to the actual, translated, string in the language-dependent file:\n </p>\n <pre><code>work/res/values-de/strings.xml:25\n    <string name=\"Usb_plug_type\">USB</string>\n</code></pre>\n <p>\n  So, with a normal apk, if you use unzip/dex2jar/decompiler/apktool correctly, everthing should be there. If not, it would be best if you provided a link to the apk, because something weird might be going on with yours, but there's no way to tell unless you give us a chance to look at your specific apk.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "May 25, 2016 at 13:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}