{
    "title": "ShellCode not running as expected - showing segmentation fault core dump",
    "link": "https://reverseengineering.stackexchange.com/questions/30098/shellcode-not-running-as-expected-showing-segmentation-fault-core-dump",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I  have already run this command. But my shellcode is not working for me:\n </p>\n <pre><code>gcc -fno-stack-protector -z execstack test.c -o test\n./test\n</code></pre>\n <blockquote>\n  <pre><code>Segmentation fault (core dumped)\n</code></pre>\n </blockquote>\n <p>\n  Here is my shellcode\n </p>\n <pre><code>#include <stdio.h>\n \nunsigned char code[] = \"\\xb8\\x0a\\x00\\x00\\x00\\xc3\";\n \nint main(int argc, char **argv) {   int foo_value = 0;\n \nint (*foo)() = (int(*)())code;   foo_value = foo();\n \nprintf(\"%d\n\", foo_value); }\n</code></pre>\n <p>\n  Here is my operating system:\n </p>\n <pre><code>uname -a\nLinux AAAA 5.13.0-30-generic #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>\n <p>\n  I have already identified the location using the following command:\n </p>\n <pre><code>gcc -c -O3 ex.c\nobjdump ex.o -d\n</code></pre>\n <blockquote>\n  <pre><code>ex.o:     file format elf64-x86-64\n\nDisassembly of section .text:\n\n0000000000000000 <foo>:    \n0:    f3 0f 1e fa             endbr64     \n4:    b8 0a 00 00 00          mov    $0xa,%eax\n9:    c3                      retq\n</code></pre>\n </blockquote>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "shellcode"
    ],
    "user": "Alvin567",
    "time": "Mar 7, 2022 at 0:29",
    "comments": [
        {
            "user": "Michael Karcher",
            "text": "<html><body><span class=\"comment-copy\">\n You have code as a\n <i>\n  global\n </i>\n variable. Global data is not executable (by default). Your GCC parameter only disables the execution prevention of stack contents (\n <i>\n  local\n </i>\n , non-static variables), but not of global variables.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The argument\n  <code>\n   -z execstack\n  </code>\n  only allows stack to execute code, but the\n  <code>\n   code\n  </code>\n  is a global variable, which is not on stack, so you can do some simple changes to make your code work.\n </p>\n <p>\n  For example,\n </p>\n <pre><code>#include <stdio.h>\n\nint main(int argc, char **argv) {\n    int foo_value = 0;\n    unsigned char code[] = \"\\xb8\\x0a\\x00\\x00\\x00\\xc3\";\n    int (*foo)() = (int(*)())code;\n    foo_value = foo();\n    printf(\"%d\n\", foo_value);\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "zeze",
            "time": "Mar 7, 2022 at 16:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A simple\n  <strong>\n   HACK\n  </strong>\n  for\n  <code>\n   gcc\n  </code>\n  would be to make the\n  <code>\n   char\n  </code>\n  array as\n  <code>\n   const\n  </code>\n  That makes the bytes go in\n  <code>\n   .rodata\n  </code>\n  which is usally mapped within the same pages as\n  <code>\n   .text\n  </code>\n  and has the same\n  <code>\n   rx\n  </code>\n  permission.\n </p>\n <p>\n  This worked for me without any additional flag.\n </p>\n <pre><code>[/tmp] cat x.c\n#include <stdio.h>\n\nconst unsigned char code[] = \"\\xb8\\x0a\\x00\\x00\\x00\\xc3\";\n\nint main(int argc, char **argv) {\n  int foo_value = 0;\n\n  int(*foo)() = (int (*) ())&code;\n  foo_value = foo();\n\n  printf(\"%d\n\", foo_value);\n}\n[/tmp] make x\ncc     x.c   -o x\n[/tmp] ./x\n10\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Mar 4, 2022 at 8:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pmor",
                    "text": "<span class=\"comment-copy\">FYI: in my case it leads to <code>Segmentation fault</code> when using <code>-fno-stack-protector -z execstack</code>. GCC 9.4.0, Ubuntu 20.04.5 LTS. Any ideas? The <code>code</code> is in <code>.rodata</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}