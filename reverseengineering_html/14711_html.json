{
    "title": "Identify compression of this ZTE ZXV10 H201L V2 backup config file",
    "link": "https://reverseengineering.stackexchange.com/questions/14711/identify-compression-of-this-zte-zxv10-h201l-v2-backup-config-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This config.bin file is from a ZTE router. I would like to decompress it but I did not identify the compression used in the file. Maybe someone can.\n </p>\n <pre><code>00000000  99 99 99 99 44 44 44 44  55 55 55 55 aa aa aa aa  |....DDDDUUUU....|\n00000010  00 00 00 00 00 00 00 00  00 00 00 04 00 00 00 00  |................|\n00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 40  |...............@|\n00000040  00 02 00 00 00 00 00 80  00 00 4c 84 00 00 00 00  |..........L.....|\n00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000080  04 03 02 01 00 00 00 00  00 00 00 10 5a 58 56 31  |............ZXV1|\n00000090  30 20 48 32 30 31 4c 20  56 32 2e 30 01 02 03 04  |0 H201L V2.0....|\n000000a0  00 00 00 02 00 00 00 00  00 00 4c 68 00 01 00 00  |..........Lh....|\n000000b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000000d0  00 00 00 00 00 00 00 00  00 00 4c 20 00 00 4c 20  |..........L ..L |\n000000e0  00 00 00 00 5d a2 a4 6e  d6 94 bc 97 07 1b 38 17  |....]..n......8.|\n000000f0  ab 66 e7 bc f4 9b 4e 3f  cd 89 b0 c3 b2 11 4a f4  |.f....N?......J.|\n00000100  40 88 2c a1 90 e4 4d 32  d7 9b fa bd ec 39 42 ae  |@.,...M2.....9B.|\n00000110  e6 a9 2f 26 03 6e 70 f4  e5 0f 88 55 3b 1c b0 bb  |../&.np....U;...|\n00000120  b6 04 3e 73 99 15 ef 65  39 8d 85 52 6e 37 0b 5d  |..>s...e9..Rn7.]|\n00000130  6e c2 39 75 a4 94 0c c7  79 72 86 dc 25 38 38 e0  |n.9u....yr..%88.|\n00000140  8f 54 5b 18 a4 76 15 e4  f7 b3 c6 0f d8 91 19 e0  |.T[..v..........|\n00000150  00 22 1d 9c 7d a0 08 42  6f 87 ab 73 4b 17 4c 25  |.\"..}..Bo..sK.L%|\n00000160  40 2f ea 30 6b 80 27 72  db 2b 30 7a 2a 2f 3d b0  |@/.0k.'r.+0z*/=.|\n00000170  46 ca 50 0e ad 99 9a 70  3e 23 b4 b4 e0 ee 3a b3  |F.P....p>#....:.|\n00000180  a8 6a 9d 7c a2 29 17 51  9f 7a 0a 14 90 41 3f e2  |.j.|.).Q.z...A?.|\n00000190  dc 63 52 c8 01 24 6b 46  31 ac 4e c6 54 cb 18 70  |.cR..$kF1.N.T..p|\n000001a0  33 67 0c 06 7e db 00 af  22 ec a1 37 98 01 ef ae  |3g..~...\"..7....|\n000001b0  9b 47 30 48 e3 6d 18 87  ab 34 2d 2b 4e b9 5b eb  |.G0H.m...4-+N.[.|\n000001c0  55 5f 61 ab da eb 39 7e  df 7e 79 fe fd f8 11 66  |U_a...9~.~y....f|\n000001d0  b3 48 fc f8 33 38 fd 1b  1d 00 bd 83 f8 b8 2b 9f  |.H..38........+.|\n000001e0  cf 1e ae 69 ff 5d e3 04  8c 6d cc 19 12 f4 95 03  |...i.]...m......|\n000001f0  3d c8 67 e2 c2 52 d3 a4  44 eb af f5 a0 63 0a ef  |=.g..R..D....c..|\n00000200  d2 3d 82 9e 95 d1 f4 1c  ce 0c 5f 60 49 ab c3 d5  |.=........_`I...|\n00000210  89 d5 53 82 f7 4e ba ae  d3 3c 09 e9 af 52 29 e9  |..S..N...<...R).|\n00000220  d5 9b 02 54 91 e9 ae 0e  12 26 3b ca ca 4e 8f 01  |...T.....&;..N..|\n00000230  a4 52 e1 4e f8 42 7e 0d  9c 99 76 7d 5f 3c de 67  |.R.N.B~...v}_<.g|\n00000240  82 fc 38 97 7b db 06 b3  0a 44 95 64 ab 02 71 1a  |..8.{....D.d..q.|\n00000250  08 cc ca 88 f8 b6 bb 12  d4 fd 4d dd 9b 3f c1 57  |..........M..?.W|\n00000260  bb 54 9c b7 99 c3 9c 69  86 91 ea 82 b7 38 b3 c1  |.T.....i.....8..|\n00000270  f3 71 30 b7 06 82 ea c3  04 93 30 d4 83 56 50 b5  |.q0.......0..VP.|\n00000280  93 39 7a ea a7 1b 38 f0  3a f0 95 57 cb 79 e2 91  |.9z...8.:..W.y..|\n</code></pre>\n <p>\n  Here is the\n  <a href=\"https://mega.nz/#!wVg1gJKQ!PGZaqaaeKanYqxFtNw5FNsmh_R5UR75Nr0rC8MihJJ0\" rel=\"nofollow noreferrer\">\n   file\n  </a>\n </p>\n <p>\n  EDIT:\nI changed the wifi password on the router and backed it up and in picture below is the difference.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/6jTFY.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/6jTFY.png\"/>\n  </a>\n </p>\n <p>\n  EDIT2: At offset 0xE4 starts first header ends at offset 0x105, data of this header it seems to start at 0x134 ?\n </p>\n <p>\n  EDIT3: On my router ZTEZXV10 H201L V2 there is a utility which is in charge of db dackup (its called\n  <a href=\"https://dl.dropboxusercontent.com/u/38454983/cspd\" rel=\"nofollow noreferrer\">\n   cspd\n  </a>\n  ) and here it is so maybe someone can \"see\" how the backup is encrypted:\n  <a href=\"https://i.sstatic.net/owsdd.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"DBbackupXML\" src=\"https://i.sstatic.net/owsdd.png\"/>\n  </a>\n </p>\n <p>\n  And here is\n  <code>\n   dbFileSave\n  </code>\n  . I can't tell which is responsible for saving the file.\n  <a href=\"https://i.sstatic.net/kNnW1.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/kNnW1.png\"/>\n  </a>\n  Do you have any suggestions as to what I should try ?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 4,
    "views": "6k",
    "tags": [
        "firmware",
        "linux",
        "embedded",
        "mips",
        "decompress"
    ],
    "user": "Vido",
    "time": "Mar 3, 2017 at 13:26",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n I hope your Taiwanese is good (see comment section)\n <a href=\"http://blog.leexiaolan.tk/pwn-huawei-hg8120c-ont-upgrade-pack-format-part-3\" rel=\"nofollow noreferrer\">\n  blog.leexiaolan.tk/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vido",
            "text": "<html><body><span class=\"comment-copy\">\n Tnx @Nordwald I did read it but they not say match about backup itself\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vido",
            "text": "<html><body><span class=\"comment-copy\">\n I did tried binwalk, signsrch, quickbms, offzip but with no luck\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "aGGeRReS",
            "text": "<html><body><span class=\"comment-copy\">\n Hi. I am not really familiar with firmware of routers, but just as a matter of interest: what kind of file is it? (e.g. settings, or anything else)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n it does not seem to be compressed, just encrypted/obfuscated.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The encryption for recent ZTE routers' config.bin is AES ECB (Electronic Code Book). The key is stored in the open in\n  <code>\n   /bin/cspd\n  </code>\n  next to string\n  <code>\n   /cfg/db_backup_cfg.xml\n  </code>\n  . The function responsible is\n  <code>\n   CspDBInitPdtInterface\n  </code>\n  , last\n  <code>\n   snprintf\n  </code>\n  call. The key is zero padded if short of 128 bits.\n </p>\n <p>\n  The key very much might be unique to ISP: yours H201L V2 is\n  <code>\n   Renjx%2$CjM\n  </code>\n  , streetster's H298N V1.4 was\n  <code>\n   Wj%2$CjM\n  </code>\n  (but it doesn't work), local H118N V2.3 had\n  <code>\n   MIK@0STzKpB%qJZf\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://jsfiddle.net/dpc2o6kf/\" rel=\"noreferrer\">\n   https://jsfiddle.net/dpc2o6kf/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "user20993",
            "time": "Jul 28, 2017 at 10:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">Tnx @user20993 for sharing but that script does not work for me it says bad magic I do not know whats wrong ?</span>",
                    "time": null
                },
                {
                    "user": "user20993",
                    "text": "<span class=\"comment-copy\"><code>bad magic</code> means it fails to recognize <code>01 02 03 04</code> at 0x9c in your file (see your hexdump). IDK why you got the err, Chrome 48 got me a nice XML from <a href=\"https://mega.nz/#!wVg1gJKQ!PGZaqaaeKanYqxFtNw5FNsmh_R5UR75Nr0rC8MihJJ0\" rel=\"nofollow noreferrer\">your file</a>. BTW, you should remove the file ASAP as it contains sensitive info! &gt;_&lt;</span>",
                    "time": null
                },
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">Why Im getting diferent binary when encrypting db_user_cfg.xml with openssl enc -aes-128-ecb -nosalt ?</span>",
                    "time": null
                },
                {
                    "user": "mkst",
                    "text": "<span class=\"comment-copy\">Just stumbled across <a href=\"https://pastebin.com/tS1ZiDH3\" rel=\"nofollow noreferrer\">this</a> script where the key for the H298N is listed as being <code>Wj</code> rather than <code>Wj%2$CjM</code> due to a bug</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Hypothesis: the file is encrypted\n </h2>\n <p>\n  <strong>\n   1. Absence of Compression Signatures\n  </strong>\n </p>\n <p>\n  The relevant\n  <a href=\"https://github.com/devttys0/binwalk/blob/master/src/binwalk/magic/compressed\" rel=\"noreferrer\">\n   compression formats that Binwalk detects\n  </a>\n  are as follows: bzip2, lzop, lzip, lrzip, LZO, 7z, gzip, rzip, LZMA, zlib, and LZ4. Since running Binwalk against\n  <code>\n   H201LV2.0_Cur_config.bin\n  </code>\n  returns no results even though Binwalk normally will recognize any of these compression formats is the first indicator that something other than or in addition to compression is going on.\n </p>\n <p>\n  Every tool has its limitations however, so I attempted to find byte sequences within the file header indicating the beginning of a sequence of compressed bytes manually by using the information from a zenhax.com forum post called\n  <a href=\"http://zenhax.com/viewtopic.php?f=4&t=27\" rel=\"noreferrer\">\n   How to recognize the compression algorithms with your eyes\n  </a>\n  , looking for Bzip2, zlib, gzip, LZMA, LZMA 86 head, LZMA 86 dec, LZMA 86 dec head, LZMA efs, LZMA headerless, LZMA2 and LZMA2 headerless compression signatures in particular. Here are the first few bytes of each compression signature:\n </p>\n <ul>\n  <li>\n   zlib:\n   <code>\n    78 da\n   </code>\n  </li>\n  <li>\n   gzip:\n   <code>\n    1f 8b\n   </code>\n  </li>\n  <li>\n   LZMA, LZMA 86 head, LZMA 86 dec, LZMA 86 dec head, LZMA efs:\n   <code>\n    5d 00 00 00\n   </code>\n  </li>\n  <li>\n   LZMA headerless:\n   <code>\n    00 44 94 a6\n   </code>\n  </li>\n  <li>\n   LZMA2:\n   <code>\n    18 e0 07 ce\n   </code>\n  </li>\n  <li>\n   LZMA2 headerless:\n   <code>\n    e0 07 ce 02\n   </code>\n  </li>\n </ul>\n <p>\n  The information regarding compression in the answers to this question on SO was also helpful:\n  <a href=\"https://stackoverflow.com/questions/19120676/how-to-detect-type-of-compression-used-on-the-file-if-no-file-extension-is-spe\">\n   How to detect type of compression used on the file? (if no file extension is specified)\n  </a>\n </p>\n <p>\n  By \"file header\", what I mean is the first 300 bytes or so (this question was used as a reference:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/3593/re-compressed-backup-file-router-linux-based-so-is-it-compresed-with-zlib\">\n   RE Compressed backup file,router linux based so is it compresed with zlib?\n  </a>\n  since this question, also by Vido, involved ZTE router firmware and its compression signature was found). Unfortunately, staring at a hex dump of the file did not yield any useful information.\n </p>\n <p>\n  <strong>\n   2. Evidence from Additional Sources\n  </strong>\n </p>\n <p>\n  <a href=\"http://www.forum.cdm.me/showthread.php?136710-ZTE-zxv10-h201l/page3\" rel=\"noreferrer\">\n   Page 3\n  </a>\n  of a thread called\n  <a href=\"http://www.forum.cdm.me/showthread.php?136710-ZTE-zxv10-h201l/page1\" rel=\"noreferrer\">\n   ZTE zxv10 h201\n  </a>\n  on a Montenegrin forum included some relevant posts as well as this buggy python script:\n </p>\n <pre><code>import re\nimport sys\nimport zlib\nimport struct\n\nime_fajla = 'H201LV2.0_Cur_config.bin'\n\ndef extract_config_xml(config_bin):\n    config_xml = b''\n    for zlib_chunk in re.finditer('\\x78\\xda', config_bin):\n        zlib_chunk_start = zlib_chunk.start()\n        zlib_chunk_header = config_bin[zlib_chunk_start - 12: zlib_chunk_start]\n        xml_chunk_length, zlib_chunk_length, config_bin_length = \\\n            struct.unpack('>LLL', zlib_chunk_header)\n        if xml_chunk_length == 0x10000 or config_bin_length == 0:\n            zlib_chunk_end = zlib_chunk_start + zlib_chunk_length\n            zlib_chunk = config_bin[zlib_chunk_start: zlib_chunk_end]\n            xml_chunk = zlib.decompress(zlib_chunk)\n            assert xml_chunk_length == len(xml_chunk)\n            config_xml += xml_chunk\n    return config_xml\n\nwith open(ime_fajla, 'rb') as f:\n    print extract_config_xml(f.read())\n</code></pre>\n <p>\n  Fixed up it looks like this:\n </p>\n <pre><code># decompress.py\nimport re\nimport sys\nimport zlib\nimport struct\n\n\nfilename = \"H201LV2.0_Cur_config.bin\"\ndef extract_config_xml (filename):\n    config_xml = b''\n    for zlib_chunk in re.finditer ('\\x78\\xda', filename):\n        zlib_chunk_start, zlib_chunk.start = ()\n        zlib_chunk_header = filename[zlib_chunk_start - 12: zlib_chunk_start]\n        xml_chunk_length, zlib_chunk_length, config_bin_length, \\\n            struct.unpack ('> LLL', zlib_chunk_header)\n        if xml_chunk_length == 0x10000 or config_bin_length == 0:\n            zlib_chunk_end = zlib_chunk_start + zlib_chunk_length\n            zlib_chunk = filename[zlib_chunk_start: zlib_chunk_end]\n            xml_chunk = zlib.decompress(zlib_chunk)\n            assert xml_chunk_length == len(xml_chunk)\n            config_xml += xml_chunk\n    return config_xml\n\nwith open (filename, 'rb') as f:\n    print extract_config_xml(f.read())\n</code></pre>\n <p>\n  This script does not help in this case, mainly because it searches for the byte sequence\n  <code>\n   78 da\n  </code>\n  , the zlib compression signature, which is not present in the file in question,\n  <code>\n   H201LV2.0_Cur_config.bin\n  </code>\n  .\n </p>\n <p>\n  Similar config.bin files were quite scarce and difficult to find, but some were located and investigated. The most interesting and useful was a file called\n  <code>\n   H201LV2.0.bin\n  </code>\n  , shared via\n  <a href=\"https://www.dropbox.com/s/hhyqni6i0pfx4z3/H201LV2.0.bin\" rel=\"noreferrer\">\n   DropBox\n  </a>\n  . Here is a diff of the headers of the two files:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/47HeA.png\" rel=\"noreferrer\">\n   <img alt=\"diff\" src=\"https://i.sstatic.net/47HeA.png\"/>\n  </a>\n </p>\n <p>\n  Interestingly, there is a 16-byte sequence both have in common at offset\n  <code>\n   0x00003214\n  </code>\n  (is this possible if the files really are encrypted? It seems odd):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/JJjcy.png\" rel=\"noreferrer\">\n   <img alt=\"diff 2\" src=\"https://i.sstatic.net/JJjcy.png\"/>\n  </a>\n </p>\n <p>\n  When Binwalk is run against\n  <code>\n   H201LV2.0.bin\n  </code>\n  it is similarly unsuccessful:\n </p>\n <pre><code>$ binwalk H201LV2.0.bin \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n</code></pre>\n <p>\n  Additionally, there is another RE.SE post titled\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11626/zte-encrypted-backup-config-file\">\n   ZTE encrypted backup config file\n  </a>\n  regarding ZTE config backups of a different product, ZTE Speedport Entry 2i, that are also suspected of being encrypted. One the config.bin files shared in a\n  <a href=\"https://www.dropbox.com/s/k0dprjt17bh5eqn/config.bin?dl=0\" rel=\"noreferrer\">\n   link\n  </a>\n  in the comments under this question also has similar header structure to\n  <code>\n   H201LV2.0_Cur_config.bin\n  </code>\n  but seems to be from an older firmware version. It appears that others are having difficulty with the same issue.\n </p>\n <p>\n  <strong>\n   3. Data Entropy and Entropy Analysis\n  </strong>\n </p>\n <p>\n  There is an\n  <a href=\"http://blog.superuser.com/2011/03/21/compression-and-encryption/\" rel=\"noreferrer\">\n   interesting article on compression and encryption on the SE superuser blog\n  </a>\n  . Here are two points from the text:\n </p>\n <blockquote>\n  <ul>\n   <li>\n    Compression searches for patterns and replaces them with smaller tokens representing those patterns\n   </li>\n   <li>\n    Encryption obfuscates the data ideally creating an output with no discernible patterns in it\n   </li>\n  </ul>\n </blockquote>\n <p>\n  Differentiating between compression and encryption can be attempted using statistical methods. This has been discussed in the context of firmware analysis by\n  <a href=\"https://reverseengineering.stackexchange.com/users/1408/devttys0\">\n   devttys0\n  </a>\n  in 2 articles:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\" rel=\"noreferrer\">\n    Differentiate Encryption From Compression Using Math\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.devttys0.com/2013/06/encryption-vs-compression-part-2/\" rel=\"noreferrer\">\n    Encryption vs Compression, Part 2\n   </a>\n  </li>\n </ul>\n <p>\n  From the first article:\n </p>\n <blockquote>\n  <p>\n   ...there are a few tests that can be performed to quantify the randomness of data. The two that I have found most useful are chi square distribution and Monte Carlo pi approximation. These tests can be used to measure the randomness of data and are more sensitive to deviations in randomness than a visual entropy analysis.\n  </p>\n </blockquote>\n <p>\n  and\n </p>\n <blockquote>\n  <p>\n   Existing tools, such as ent, will perform these\n  calculations for us. The real problem is how to interpret the results;\n  how random is encrypted data vs compressed data? This will depend on\n  both the encryption/compression used, as well as the size of your data\n  set (more data generally means more accurate results). Applying these\n  tests to a (admittedly small) sample of files with varying size which\n  had been put through different compression/encryption algorithms\n  showed the following correlations:\n  </p>\n  <ul>\n   <li>\n    <p>\n     Large deviations in the chi square distribution, or large percentages of error in the Monte Carlo approximation are sure signs\n  of compression.\n    </p>\n   </li>\n   <li>\n    <p>\n     Very accurate pi calculations (< .01% error) are sure signs of encryption.\n    </p>\n   </li>\n   <li>\n    <p>\n     Lower chi values (< 300) with higher pi error (> .03%) are indicative of compression.\n    </p>\n   </li>\n   <li>\n    <p>\n     Higher chi values (> 300) with lower pi errors (< .03%) are indicative of encryption.\n    </p>\n   </li>\n  </ul>\n </blockquote>\n <p>\n  These value ranges can be used as heuristics in the analysis of the file.\n </p>\n <p>\n  This is the result of using Binwalk to perform entropy analysis of\n  <code>\n   H201LV2.0_Cur_config.bin\n  </code>\n  :\n </p>\n <pre><code>$ binwalk -E -J H201LV2.0_Cur_config.bin \n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n1024          0x400           Rising entropy edge (0.972587)\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/xytCt.png\" rel=\"noreferrer\">\n   <img alt=\"entropy 1\" src=\"https://i.sstatic.net/xytCt.png\"/>\n  </a>\n </p>\n <p>\n  And using\n  <code>\n   ent\n  </code>\n  :\n </p>\n <pre><code>$ ent H201LV2.0_Cur_config.bin\nEntropy = 7.981641 bits per byte.\n\nOptimum compression would reduce the size\nof this 19716 byte file by 0 percent.\n\nChi square distribution for 19716 samples is 650.33, and randomly\nwould exceed this value less than 0.01 percent of the times.\n\nArithmetic mean value of data bytes is 126.7613 (127.5 = random).\nMonte Carlo value for Pi is 3.133292757 (error 0.26 percent).\nSerial correlation coefficient is 0.039397 (totally uncorrelated = 0.0).\n</code></pre>\n <p>\n  Synopsis: According to the graph, entropy distribution between byte offsets (decimal) ~1000 to ~19000 is fairly uniform. This is expected with encrypted data:\n </p>\n <blockquote>\n  <p>\n   Encrypted data is typically a flat line with no variation\n  </p>\n </blockquote>\n <p>\n  The chi square distribution is\n  <strong>\n   650.33\n  </strong>\n  and the pi error is\n  <strong>\n   0.26\n  </strong>\n  . The chi square value is on target for what is expected with encrypted data but the pi error value is\n  <em>\n   very\n  </em>\n  far off target, according to devttys0:\n </p>\n <blockquote>\n  <p>\n   Higher chi values (> 300) with lower pi errors (< .03%) are\n  indicative of encryption.\n  </p>\n </blockquote>\n <p>\n  Part of the problem is the small file size of ~20KB and low entropy in the file header, which we know is not encrypted. Excluding data known to be unencrypted from analysis will increase accuracy. Encryption looks like it begins at around offset\n  <code>\n   0x00000124\n  </code>\n  , so a python script can be written to skip past the first 292 bytes and write the rest to an auxiliary file:\n </p>\n <pre><code>#!/usr/lib/python\n\nwith open(\"H201LV2.0_Cur_config.bin\", \"rb\") as input_file:\n    with open(\"auxiliary_H201LV2.0_Cur_config.bin\", \"wb\") as output_file:\n        output_file.write(input_file.read()[292:])\n</code></pre>\n <p>\n  Now analysis can be performed on just the (suspected) encrypted data block without the unencrypted file header:\n </p>\n <pre><code>$ binwalk -E -J auxiliary_H201LV2.0_Cur_config.bin \n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n0             0x0             Rising entropy edge (0.973372)\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/fsNZx.png\" rel=\"noreferrer\">\n   <img alt=\"aux entropy\" src=\"https://i.sstatic.net/fsNZx.png\"/>\n  </a>\n </p>\n <p>\n  With\n  <code>\n   ent\n  </code>\n  :\n </p>\n <pre><code>$ ent auxiliary_H201LV2.0_Cur_config.bin\nEntropy = 7.990521 bits per byte.\n\nOptimum compression would reduce the size\nof this 19424 byte file by 0 percent.\n\nChi square distribution for 19424 samples is 256.03, and randomly\nwould exceed this value 47.01 percent of the times.\n\nArithmetic mean value of data bytes is 128.0505 (127.5 = random).\nMonte Carlo value for Pi is 3.143651529 (error 0.07 percent).\nSerial correlation coefficient is 0.011183 (totally uncorrelated = 0.0).\n</code></pre>\n <p>\n  These results are interesting: the graph indicates approximately uniform entropy throughout the file, but now the chi square distribution (\n  <strong>\n   256.03\n  </strong>\n  ) and the pi approximation error (\n  <strong>\n   0.07%\n  </strong>\n  ) are\n  <em>\n   both\n  </em>\n  within the bounds of what is expected for compressed data!\n </p>\n <blockquote>\n  <p>\n   Lower chi values (< 300) with higher pi error (> .03%) are indicative of compression.\n  </p>\n </blockquote>\n <p>\n  With that said, these new values are relatively close to their respective boundary conditions. That is, 256.03 is relatively close to boundary condition of 300 for the chi square distribution and 0.07% is relatively close to the boundary condition of 0.03% for pi approximation error, so it is difficult to say with confidence that the file really is encrypted or if it is compressed based on this.\n </p>\n <h2>\n  Conclusion\n </h2>\n <p>\n  Evidence supporting the hypothesis that the file is encrypted is confounded by some of the results of the entropy analysis. Therefore I will venture that the file is encrypted but I cannot prove it using the methods I described here.\n </p>\n <p>\n  I hope that these findings (or lack thereof) will prove useful to others performing their own investigation of this file. Perhaps a professional will be able to definitively answer this interesting question.\n </p>\n <h2>\n  Suggestions, Other Paths\n </h2>\n <blockquote>\n  <p>\n   Do you have a suggestion on what should I try ?\n  </p>\n </blockquote>\n <p>\n  <strong>\n   1. More Rigorous Statistical Analysis\n  </strong>\n </p>\n <p>\n  <a href=\"https://www.random.org/statistics/information-entropy/\" rel=\"noreferrer\">\n   Entropy analysis, while useful, is not enough\n  </a>\n  ; additional\n  <a href=\"https://www.random.org/analysis/\" rel=\"noreferrer\">\n   statistical methods\n  </a>\n  should be employed:\n </p>\n <blockquote>\n  <p>\n   Information entropy is often used as a preliminary test for\n  randomness. Generally speaking, random data will have a high level of\n  information entropy, and a low level of information entropy is a good\n  indicator that the data isn't random. (A low level of entropy isn't\n  definitive proof that the data isn't random, but it means you should\n  be suspcious and submit the generator to further tests.)\n  </p>\n  <p>\n   However, the converse relation doesn't hold, meaning a high degree of\n  information entropy is no guarantee of randomness. For example, a\n  compressed file (e.g., a ZIP file) has a high level of information\n  entropy, but is in fact highly structured, and it will fail many other\n  tests for randomness. Hence, you have to be a little careful using\n  information entropy as a metric for randomness. To get meaningful\n  results, you really need to combine it with other tests.\n  </p>\n </blockquote>\n <p>\n  <strong>\n   2. Recovering the encryption module\n  </strong>\n </p>\n <p>\n  This speculation in the answer to\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11626/zte-encrypted-backup-config-file/13808#13808\">\n   ZTE encrypted backup config file\n  </a>\n  may provide an avenue of investigation:\n </p>\n <blockquote>\n  <p>\n   I imagine that the core functionality to perform the encryption is the same across the ZTE reuters (common config.bin suggests this), so imagine it's just a case of figuring out the method, and what keys/iv are used to decrypt it again...\n  </p>\n </blockquote>\n <p>\n  If the module within the firmware responsible for performing the encryption is found, the encryption algorithm can be reverse-engineered. I think access to the device is required for this, given the absence of easily available ZTE router firmware images.\n </p>\n <p>\n  <strong>\n   3. Ciphertext Analysis\n  </strong>\n </p>\n <p>\n  Something I did not pursue was analysis of the (suspected) ciphertext with tools like\n  <a href=\"https://github.com/fwhacking/bfcrypt\" rel=\"noreferrer\">\n   bfcrypt\n  </a>\n  or\n  <a href=\"http://www.hexblog.com/?p=27\" rel=\"noreferrer\">\n   FindCrypt\n  </a>\n  in order to determine the encryption algorithm employed to encrypt the file. A list of more tools can be found on\n  <a href=\"http://fwhacking.blogspot.com.br/2011/03/bfcrypt-crypto-scanner.html\" rel=\"noreferrer\">\n   fwhacking.blogspot.com.br\n  </a>\n  .\n </p>\n <p>\n  Speaking of analyzing ciphertext, I though that this question on Security.SE was interesting:\n  <a href=\"https://security.stackexchange.com/questions/3989/how-to-determine-what-type-of-encoding-encryption-has-been-used\">\n   How to determine what type of encoding/encryption has been used?\n  </a>\n  , especially the\n  <a href=\"https://security.stackexchange.com/questions/3989/how-to-determine-what-type-of-encoding-encryption-has-been-used/4068#4068\">\n   answer\n  </a>\n  .\n </p>\n <hr/>\n <p>\n  quick update:\n </p>\n <p>\n  these encryption libraries are dynamically linked to the\n  <code>\n   cspd\n  </code>\n  MIPS ELF binary:\n </p>\n <pre><code>$ readelf --dyn-syms cspd | grep AES\n   484: 0053ab50  1248 FUNC    GLOBAL DEFAULT    8 AES_set_encrypt_key\n   630: 0053b9d0  1600 FUNC    GLOBAL DEFAULT    8 AES_decrypt\n  1187: 0050d470   552 FUNC    GLOBAL DEFAULT    8 DecryByAES\n  1527: 0053b390  1600 FUNC    GLOBAL DEFAULT    8 AES_encrypt\n  1535: 0053b030   864 FUNC    GLOBAL DEFAULT    8 AES_set_decrypt_key\n</code></pre>\n <p>\n  as are these compression libraries:\n </p>\n <pre><code>$ readelf --dyn-syms cspd | grep compress\n    92: 0053c110   208 FUNC    GLOBAL DEFAULT    8 uncompress\n  1064: 0053c010   216 FUNC    GLOBAL DEFAULT    8 compress2\n</code></pre>\n <p>\n  <a href=\"http://refspecs.linuxbase.org/LSB_3.0.0/LSB-PDA/LSB-PDA/zlib-uncompress-1.html\" rel=\"noreferrer\">\n   <code>\n    uncompress\n   </code>\n  </a>\n  and\n  <a href=\"http://refspecs.linuxbase.org/LSB_3.0.0/LSB-PDA/LSB-PDA/zlib-compress2-1.html\" rel=\"noreferrer\">\n   <code>\n    compress2\n   </code>\n  </a>\n  are associated with\n  <a href=\"https://github.com/madler/zlib/blob/master/zlib.h\" rel=\"noreferrer\">\n   zlib\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "14",
            "user": "julian",
            "time": "Oct 6, 2018 at 2:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">So you are suggesting thats mybe/probably AES_encrypt-ed ?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Im still investigating. There are numerous functions in the cspd ELF binary that have to do with saving db files or encryption. Im trying to find the link between these if there is any.  Encryption by AES seems probable but i have not yet found at which point the encryption of the config file takes place</span>",
                    "time": null
                },
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">Wll done @SYS_V here is function AES_set_encrypt_key <a href=\"http://www.upslike.net/image/5853W\" rel=\"nofollow noreferrer\">upslike.net/image/5853W</a></span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">How did you retrieve the config.bin and cspd files from the router? Does the router write them to a USB stick?</span>",
                    "time": null
                },
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">No it does not write them to usb, I enabled ftp and copied them to /mnt/ via telnet and downloaded thru web browser</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  came across these keys and sharing\n </p>\n <p>\n  Known AES keys:\n </p>\n <pre><code>  zxhn h118n ert5                      - 'MIK@0STzKpB%qJZe'\n  zxhn h118n V2.1.3_ROSCNT?            - 'MIK@0STzKpB%qJZf'\n  zxhn h168n v3                        - '402c38de39bed665'\n  zxhn h298n hv17_fv116_mts?t1         - 'Wj' (due to bug, orig. is 'Wj%2$CjM')\n  zxhn h298a hw1.1.20_fw1.1.20_ros_t1? - 'm8@96&ZG3Nm7N&Iz'\n  zxhn h108n hw1.2_fw2.5.4_eg1t8_ted,\n  zxhn h108n hv11_fv2_5_4_*            - 'GrWM2Hz&LTvz&f^5'\n  zxhn h168n hv10_fv310t3_belt         - 'GrWM3Hz&LTvz&f^9'\n  zxhn h208n hv10_fv1010_belt16t1      - 'Renjx%2$CjM'\n  zxhn h267n hv10_fv100t3_belt         - 'tHG@Ti&GVh@ql3XN'\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user33502",
            "time": "Jun 9, 2020 at 18:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On my router ZTEZXV10 H201L V2 there is utility which is incharge for db dackup and hire it is maybe some one can \"see\" how they encrypt baykup\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/z3RXl.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"DBXMLSAVE\" src=\"https://i.sstatic.net/z3RXl.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Vido",
            "time": "Mar 1, 2017 at 18:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Thanks for sharing this information. Can you put it in the question? That way everyone will see it right away instead of having to scroll to the bottom of my very long post to see it</span>",
                    "time": null
                },
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">I also posted here picture of dbcCfgFileDecry function</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">The <code>encry</code> function is also interesting. Can you make a new question asking how to decrypt the config.bin file and include the <code>cspd </code> ELF binary  as well as information about interesting functions in it? The question here was about identifying the encoding of <code>config.bin</code>, so having a new question just about the encryption/decryption process  in <code>cspd</code> might be a good idea</span>",
                    "time": null
                },
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">Yes I can, thank you for heliping out @SYS_V</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">You are welcome. I enjoyed it. I learned a lot from trying to answer your question so maybe I should thank you too.</span>",
                    "time": null
                }
            ]
        }
    ]
}