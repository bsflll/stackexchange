{
    "title": "Transforming an assembly line into C",
    "link": "https://reverseengineering.stackexchange.com/questions/4416/transforming-an-assembly-line-into-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When I see the assembly line:\n </p>\n <pre><code> MOV ESI, DWORD PTR DS:[EBP+0x8]\n</code></pre>\n <p>\n  And, when Ollydbg shows me that\n  <code>\n   [EBP+0x8] = 00000000\n  </code>\n  , then can I write it in C like this:\n </p>\n <pre><code> int *esi = NULL;\n</code></pre>\n <p>\n  Or, should I use the stack address\n  <code>\n   EBP + 0x8\n  </code>\n  which is\n  <code>\n   0x0012FF43\n  </code>\n  and write something like:\n </p>\n <pre><code> int *esi = &0012FF43\n</code></pre>\n <p>\n  I would say that the first is the right answer, but I am very confused about that.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 5,
    "views": "569",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "user3097712",
    "time": "May 31, 2014 at 11:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Brackets mean 'contents of'... so it would be more like:\n </p>\n <pre><code>int esi = 0;\n</code></pre>\n <p>\n  -or-\n </p>\n <pre><code>int esi = *(ebp+8); /* assuming ebp is correct */\n</code></pre>\n <p>\n  -or-\n </p>\n <pre><code>int esi = (int)*(ebp+8); /* assuming ebp is (void*) or (char*)\n                            we need to pull 4 bytes to get value */\n</code></pre>\n <p>\n  I would hope that\n  <code>\n   (EBP+0x8)\n  </code>\n  would\n  <em>\n   not\n  </em>\n  be\n  <code>\n   0x12FF43\n  </code>\n  , as the stack pointer is supposed to be aligned to 4 or 8 byte addresses (4 for 32bit cpu's, 8 for 64bit, generally 16 byte aligned in 64bit though).\n </p>\n <p>\n  Odd to see a\n  <code>\n   DS:\n  </code>\n  modifier for the EBP register, as it's usually\n  <code>\n   SS:\n  </code>\n  , only works well if\n  <code>\n   DS=SS\n  </code>\n  , or both are\n  <code>\n   0\n  </code>\n  .  Nitpicky, but you have to be when playing that close to the metal.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "lornix",
            "time": "May 23, 2014 at 4:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lornix",
                    "text": "<span class=\"comment-copy\">Yes, can use EBP with DS:, just odd to see it used in a non-stack setting.  It's so very often used to set up a stack frame in functions, sometimes forget it's a regular full register.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">It's pretty common to not have a frame pointer and use EBP as a general purpose register. After all, ia32 is extremely register starved. Btw pointer arithmetic on void pointers is illegal so the (void *) case up there would not work and the (char *) case would simply read a char and cast to int so it would be incorrect. You need to cast to (int *) before reading the value but add to a (char *). It might also be interesting to note that if the second translation of the assembly to C was correct you'd be very likely to see a LEA instruction instead of a MOV.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   [EBX+8]\n  </code>\n  is the second\n  <code>\n   dword\n  </code>\n  variable of this stack frame. If it's being put in\n  <code>\n   esi\n  </code>\n  it's probably a pointer operation so maybe\n  <code>\n   memcpy(dest,src,0x100)\n  </code>\n  would include that line if\n  <code>\n   src\n  </code>\n  was set to\n  <code>\n   NULL\n  </code>\n  after being declared\n  <code>\n   char *src = argument;\n  </code>\n  .\n </p>\n <p>\n  That's the most realistic as you don't generally access esi directly from C.\n </p>\n <p>\n  Of course in my example,\n  <code>\n   memcpy\n  </code>\n  would segfault when\n  <code>\n   NULL\n  </code>\n  was dereferenced.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "perror",
            "time": "May 31, 2014 at 11:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "offbyseveral",
                    "text": "<span class=\"comment-copy\"><a href=\"http://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers\" title=\"purpose of esi edi registers\">stackoverflow.com/questions/1856320/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think there is a misunderstand here.\n  <code>\n   ESI\n  </code>\n  is a register not a variable, so:\n </p>\n <pre><code>int *esi = NULL;\n</code></pre>\n <p>\n  If you want to assign value to\n  <code>\n   esi\n  </code>\n  in C, you should use the inline assembly brackets\n  <code>\n   asm {}\n  </code>\n  .\n </p>\n <p>\n  Also, usually in OllyDbg\n  <code>\n   MOV ESI, DWORD PTR DS:[EBP+0x8]\n  </code>\n  line appears at the beginning of functions like that:\n </p>\n <pre><code>push ebp\nmov ebp, esp\npush esi\nmov esi, [ebp +8]\n...\n</code></pre>\n <p>\n  That means\n  <code>\n   esi\n  </code>\n  will get the pointer of first argument of function. So, to write your line in C language, you should write a function with at least one parameter. The first parameters you pass to this functions will be value of\n  <code>\n   esi\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 3, 2014 at 14:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   MOV ESI, DWORD PTR DS:[EBP+0x8]\n  </code>\n </p>\n <p>\n  <em>\n   Load 4 bytes from\n   <code>\n    EBP+0x8\n   </code>\n   into\n   <code>\n    ESI\n   </code>\n   .\n  </em>\n </p>\n <p>\n  <code>\n   ESI\n  </code>\n  does not become a pointer unless\n  <code>\n   [EBP+0x8]\n  </code>\n  holds an address, so without knowing that, you cant really know if you should set\n  <code>\n   ESI\n  </code>\n  to\n  <code>\n   NULL\n  </code>\n  .\n </p>\n <p>\n  Its helpful while reading assembly to translate each line into C but sometimes you need to understand what types are used in the rest of the code to convert it correctly.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 3, 2014 at 14:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  let's say for example:\n  <code>\n   EBP = 00100000\n  </code>\n </p>\n <p>\n  then:\n  <code>\n   EBP+8 = 00100008\n  </code>\n </p>\n <p>\n  then the code become:\n  <code>\n   MOV ESI, DWORD PTR DS:[00100008]\n  </code>\n </p>\n <p>\n  this means copy to the register\n  <code>\n   ESI\n  </code>\n  the dword that located in the address\n  <code>\n   00100008\n  </code>\n </p>\n <p>\n  so you could write\n  <code>\n   MOV ESI, DWORD PTR DS:[00100008]\n  </code>\n  in c as:\n </p>\n <p>\n  <code>\n   int esi = *0x00100008;\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "dieSdiesneB",
            "time": "Aug 22, 2016 at 16:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}