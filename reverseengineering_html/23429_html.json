{
    "title": "How can I debug code execution on a Native->Unity/Mono/C# Application",
    "link": "https://reverseengineering.stackexchange.com/questions/23429/how-can-i-debug-code-execution-on-a-native-unity-mono-c-application",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reverse engineering a Windows application which has a main executable that appears to run some boilerplate/stub code before calling UnityMain and also using Mono. This means that if I use an assembly debugger like x64Dbg, I get stuck in the boilerplate and runtime code. But, if I view the assemblies in dnSpy, it paints an incomplete picture and makes it difficult or impossible to debug the program because the assemblies I'm viewing in dnSpy are just \"libraries\" and the execution path is initiated from the native code stub which calls\n  <code>\n   UnityMain\n  </code>\n  . What are some strategies to debug code execution of this type of application?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "498",
    "tags": [
        "windows",
        "debugging"
    ],
    "user": "the_endian",
    "time": "Mar 12, 2020 at 17:45",
    "comments": [
        {
            "user": "MazeGen",
            "text": "<html><body><span class=\"comment-copy\">\n Have you seen this?\n <a href=\"https://github.com/0xd4d/dnSpy/wiki/Debugging-Unity-Games\" rel=\"nofollow noreferrer\">\n  github.com/0xd4d/dnSpy/wiki/Debugging-Unity-Games\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n @MazeGen nope, thank you very much!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}