{
    "title": "Retrieving Objective-C Control Flow?",
    "link": "https://reverseengineering.stackexchange.com/questions/11075/retrieving-objective-c-control-flow",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning to disassemble and analyze objective-c binaries. One of my frustrations is that in Hopper, and IDA, it seems that the proper cross-references and control flow are not preserved. I believe this is because of Objective-C's message passing technique.\n </p>\n <p>\n  For instance, here is a keygenme I am working on:\n  <a href=\"https://i.sstatic.net/uIM6J.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/uIM6J.png\"/>\n  </a>\n </p>\n <p>\n  As you can see it is very hard to follow. Everything seems to coalesce on message send, with very little indication of where control flow actually begins. For instance, I am trying to determine what calls mk. Obviously it is being routed through message send, but where does the call originate? Of course, the cross references IDA provides seem to stop at any Objective-C function - making it hard to determine who is calling it.\n </p>\n <p>\n  I have tried this plugin:\n  <a href=\"https://github.com/zynamics/objc-helper-plugin-ida\" rel=\"noreferrer\">\n   https://github.com/zynamics/objc-helper-plugin-ida\n  </a>\n </p>\n <p>\n  But it results in \"nothing to patch.\"\n </p>\n <p>\n  Does IDA have a feature to help with this? How might I trace through this by hand if need be?\n </p>\n <p>\n  Some have already suggested that I just resolve this through dynamic analysis, but I'd prefer to understand the proper way to analyze it statically.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "mach-o",
        "control-flow-graph"
    ],
    "user": "MrSynAckSter",
    "time": "Jul 25, 2016 at 18:28",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n I've been working on a project with the specific goal to reconstruct objective-C control flow. Debugging is a completely different task than reconstruction, because debugging will always only follow one possible path of execution.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<html><body><span class=\"comment-copy\">\n Have anything public?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Brennan Vincent",
            "text": "<html><body><span class=\"comment-copy\">\n @Div it is not always possible to step through code with a debugger, for example, when analyzing system frameworks for an iOS version that doesn't have a jailbreak available.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sadly, there is no out-of-the-box solution. Even in academic research, most projects tackling this issue are heavily restricted.\n </p>\n <p>\n  To be able to reconstruct the control flow graph, you would need information about all possible values for the arguments of\n  <strong>\n   objc_msgSend\n  </strong>\n  in order to figure out which function is invoked on which object. This problem is potentially unsolvable but can be approximated, for example using backward-slicing and taint analysis.\n </p>\n <p>\n  That being said, you should be able to reconstruct most calls in benign software using this method. Based on the recovered parameters, you can insert function stubs and redirect the call in order to generate a more expressive CFG.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Sep 12, 2016 at 6:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Brennan Vincent",
                    "text": "<span class=\"comment-copy\">From my anecodtal experience looking at disassembled objc code: 99.99% of the time, the self and _cmd arguments to a particular objc_msgSend call are always the same and do not depend on the control flow up to that point. In fact, the majority of the time, the selector is loaded into x1 right before the objc_msgSend call. I don't see why it wouldn't be easy to get this right at least a lot of the time, if not all.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">Just play some mind games and I'm pretty sure you'll find a dozen examples, why this is not possible in any case. Just ask yourself what would you do if you try to obfuscate these calls. there is no magic... pointer analiasing and obfuscation were there before Objective-C. A vast portion of reverse engineering does not concern benign software.</span>",
                    "time": null
                }
            ]
        }
    ]
}