{
    "title": "Translating x86-64 assembly to C",
    "link": "https://reverseengineering.stackexchange.com/questions/14078/translating-x86-64-assembly-to-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to convert x86-64 assembly into C code, but am still unsure about some of the lines.\n </p>\n <p>\n  This is the assembly code:\n </p>\n <pre><code>   ....\n  pushq %rbp \n  movq %rsp, %rbp \n  subq $20, %rsp\n  movl %edi, -20(%rbp) \n  movl $2, -4(%rbp) \n\n jmp .L2\n  movl -20(%rbp), %eax //1 Lines 1-3 divide %eax / -4(%rbp)\n  cltd  //2 the quotient is stored in %eax\n  idivl -4(%rbp) //3 Remainder is stored in %edx\n  movl %edx, %eax \n  testl %eax, %eax\n  jne .L3 \n  movl $0, %eax \n  jmp .L4 \n\n.L3: \n  addl $1, -4(%rbp)\n\n.L2: \n  movl -4(%rbp), %eax \n  cmpl -20(%rbp), %eax\n  jl .L5 \n  movl $1, %eax\n\n .L4: \n  leave \n  ret \n  .....\n</code></pre>\n <p>\n  In C, would it be:\n </p>\n <pre><code>int function (int param) {\n   int var1= 2; \n   while (var1 < param) {\n       if (eax != 0) { // instead of eax, should it be var1?\n           eax = eax / var1; // unsure about the body\n   } \nreturn var1; \n}\n</code></pre>\n <p>\n  If anyone can help with guiding me to the right direction or showing me what I'm missing that would be nice.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "x86",
        "c"
    ],
    "user": "Leah",
    "time": "Dec 1, 2016 at 1:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This answer could be better if you provided more context which exact assembler statements you have problems with.\n </p>\n <p>\n  Generally, the compiler often has an instruction that moves a variable to a register at the start of something, works with that register for a while, then stores the variable back. In your case, think of\n  <code>\n   eax\n  </code>\n  as a temporary variable that copies\n  <code>\n   var1\n  </code>\n  , like this:\n </p>\n <pre><code>eax_temp_var1=var1;\neax_temp_var1=eax_temp_var1%var2;  // idivl; movl\nif (eax_temp_var1 == 0)            // testl\n    return 0;                      // movl $0, eax; jmp L4; leave; ret\nvar2++;                            // addl $1\nif (var2<var1)\n    goto L5;                       // movl; cmpl; jl\nreturn 1;\n</code></pre>\n <p>\n  Of course, a C programmer wouldn' write the first three lines like that, it would rather be\n </p>\n <pre><code>if (var1 % var2 == 0)\n</code></pre>\n <p>\n  and part of the challenge of reverse engineering is simplifying code like this to understand what's going on.\n </p>\n <p>\n  Please note that in the code snippet you posted, there's no jump back, as we don't know where L5 is; so there's no reason why this should be a loop. (Actually, i guess the whole thing is a primality test, and L5 ist just after the\n  <code>\n   jmp .L2\n  </code>\n  , which would make it a loop).\n </p>\n <p>\n  Also, when the program arrives at L4,\n  <code>\n   eax\n  </code>\n  will either contain a 0 or a 1, so this will never return var1.\n </p>\n <p>\n  Lastly, i used var1%var2, not var1/var2. You commented \"Remainder in edx\" yourself; then\n  <code>\n   edx\n  </code>\n  is moved to\n  <code>\n   eax\n  </code>\n  , then\n  <code>\n   eax\n  </code>\n  gets tested if it's zero. So, it's the remainder, not the quotient, that gets tested.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Dec 1, 2016 at 4:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The end part is missing but it pretty much looks like a naive function to test for primality. It tries to divide param with every number from 2 to (param - 1). If the remainder is zero, then the function has found a divisor and returns 0. Else it returns 1.\n </p>\n <p>\n  Something like:\n </p>\n <pre><code>bool is_prime(int param)\n{\n    int var1;\n\n    for (var1 = 2; var1 < param; var1++)\n    {\n        if (param % var1 == 0) return false;\n    }\n\n    return true;\n}\n</code></pre>\n <p>\n  -20(%rbp) is the parameter; that would be param.\n </p>\n <p>\n  -4(%rbp) is a local variable; that would be var1.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "xhienne",
            "time": "Dec 1, 2016 at 17:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}