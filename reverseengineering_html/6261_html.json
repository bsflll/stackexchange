{
    "title": "Competitive Types",
    "link": "https://reverseengineering.stackexchange.com/questions/6261/competitive-types",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following lines discovered in a piece of code (using IDA PRO) :\n </p>\n <pre><code> ...\n ...\n push 44h\n pop edi\n push edi        ; size_t\n xor esi, esi\n lea eax, [ebp+StartupInfo]\n push esi        ; int \n push eax        ; void *\n call _memset\n ...\n ...\n</code></pre>\n <p>\n  When I saw the line\n  <strong>\n   lea eax, [ebp+StartupInfo]\n  </strong>\n  I thought, okay eax is a pointer to the structure STARTUPINFO. With int esi = 0 or NULL (see the line\n  <strong>\n   xor esi, esi\n  </strong>\n  ) and with size_t edi = 44h and by calling memset, they must fill the first 44 bytes of STARTUPINFO (that would be the elements cb, lpReserved,....,wShowWindow).\n </p>\n <p>\n  But the line \n     push eax        ; void *\n </p>\n <p>\n  irritates me. How can eax has the type Startupinfo and void at the same time?\n </p>\n <p>\n  After that, I found out that the first parameter of memset()-function must have the type void. And so, the question mark in my mind is now bigger...\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "111",
    "tags": [
        "assembly",
        "struct"
    ],
    "user": "user3097712",
    "time": "Sep 19, 2014 at 16:58",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<html><body><span class=\"comment-copy\">\n its the memset declaration, parameter is a size_to_memset (size_t), value to fill with (int), memory address (void*) and the void*, StartupInfo etc are all just high level concepts.. at the end of the day the chip doesnt care what it is, its just a number..\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA knows that the prototype for the\n  <code>\n   _memset\n  </code>\n  function is\n  <code>\n   _memset(void *, int, size_t)\n  </code>\n  , so it's showing you that the value of\n  <code>\n   eax\n  </code>\n  in\n  <code>\n   push eax\n  </code>\n  is for the\n  <code>\n   void *\n  </code>\n  parameter.\n </p>\n <p>\n  However, later on in this function, a pointer to the\n  <code>\n   StartupInfo\n  </code>\n  structure is likely passed to\n  <code>\n   CreateProcess\n  </code>\n  , which is why IDA named it as such.\n </p>\n <blockquote>\n  <p>\n   How can eax has the type Startupinfo and void at the same time?\n  </p>\n </blockquote>\n <p>\n  <code>\n   eax\n  </code>\n  is just a register that holds a value, which in your disassembly above is the address of the\n  <code>\n   StartupInfo\n  </code>\n  structure. Types are high-level concepts, so when handled by\n  <code>\n   _memset\n  </code>\n  , the value of\n  <code>\n   eax\n  </code>\n  is interpreted as a\n  <code>\n   void *\n  </code>\n  , and when it's handled by\n  <code>\n   CreateProcess\n  </code>\n  , it's interpreted as a pointer to a\n  <code>\n   STARTUPINFO\n  </code>\n  structure.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Sep 19, 2014 at 17:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for your answer. The part \" the value of eax is interpreted as a void *, and when it's handled by CreateProcess, it's interpreted as a pointer to a STARTUPINFO structure.\" was completely new for me. Thx!</span>",
                    "time": null
                }
            ]
        }
    ]
}