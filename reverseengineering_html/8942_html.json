{
    "title": "How to retrieve assembly from a raw memory dump?",
    "link": "https://reverseengineering.stackexchange.com/questions/8942/how-to-retrieve-assembly-from-a-raw-memory-dump",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a running memory dump saved as a raw binary file.  This isn't a standalone executable - it's literally just a snapshot of running memory.\n </p>\n <p>\n  I'm looking for a tool that will help me identify assembly instructions within this binary file.  Does such a tool exist?\n </p>\n <p>\n  I know you can use OllyDebug or IDAPRO to analyze executables.  However, since this is a full memory dump, it'a not clear to me whether these tools are still applicable.  For a raw memory dump there isn't a clear entry point that IDA can start with.\n </p>\n <p>\n  Any suggestions would be very helpful.  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "7k",
    "tags": [
        "assembly",
        "memory",
        "digital-forensics"
    ],
    "user": "Runcible",
    "time": "May 20, 2015 at 23:21",
    "comments": [
        {
            "user": "broadway",
            "text": "<html><body><span class=\"comment-copy\">\n I'd prob start off with something like volatility to analyze the memory dump and isolate the sections of it which may justify deeper analysis.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n How did you get this snapshot ? Which OS is it from? What is its size ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Thomas Weller",
            "text": "<html><body><span class=\"comment-copy\">\n Is it a memory dump of a process (virtual memory, user mode) or of the whole PC (physical memory, kernel dump)?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1743",
            "text": "<html><body><span class=\"comment-copy\">\n Is there anything specific you can tell us about the architecture whose opcodes you are expecting in the memory dump?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ST3",
            "text": "<html><body><span class=\"comment-copy\">\n If I understand question correctly, very likely it is (almost) impossible, because running application modifies its registers, so you need to know at least EIP, but other values is very likely controls execution flow. So you would better attach something like WinDbg to running process instead of creating memory dump.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Disassembling\n </h2>\n <p>\n  You can disassemble in WinDbg at any memory address, e.g.\n </p>\n <pre><code>0:067> db 000007fe`ff4d0000\n000007fe`ff4d0000  4d 5a 90 00 03 00 00 00-04 00 00 00 ff ff 00 00  MZ..............\n000007fe`ff4d0010  b8 00 00 00 00 00 00 00-40 00 00 00 00 00 00 00  ........@.......\n000007fe`ff4d0020  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................\n000007fe`ff4d0030  00 00 00 00 00 00 00 00-00 00 00 00 e0 00 00 00  ................\n000007fe`ff4d0040  0e 1f ba 0e 00 b4 09 cd-21 b8 01 4c cd 21 54 68  ........!..L.!Th\n000007fe`ff4d0050  69 73 20 70 72 6f 67 72-61 6d 20 63 61 6e 6e 6f  is program canno\n000007fe`ff4d0060  74 20 62 65 20 72 75 6e-20 69 6e 20 44 4f 53 20  t be run in DOS \n000007fe`ff4d0070  6d 6f 64 65 2e 0d 0d 0a-24 00 00 00 00 00 00 00  mode....$.......\n\n0:067> u 000007fe`ff4d0000 L1\nadvapi32!WmipBuildReceiveNotification <PERF> (advapi32+0x0):\n000007fe`ff4d0000 4d5a            pop     r10\n</code></pre>\n <p>\n  But as you can see, this is more or less useless (in my example useless to disassemble the\n  <code>\n   MZ\n  </code>\n  magic bytes of a DLL's header).\n </p>\n <p>\n  So, finding the right starting place for a disassembly is the critical part.\n </p>\n <h2>\n  Finding code as part of DLLs\n </h2>\n <p>\n  Code should mainly be in DLLs or EXEs (called images or modules in WinDbg). To find them in a memory dump (kernel or user mode), you can run the WinDbg command\n </p>\n <pre><code>.imgscan\n</code></pre>\n <p>\n  From WinDbg help:\n </p>\n <blockquote>\n  <p>\n   The .imgscan command scans virtual memory for image headers.\n  </p>\n  <p>\n   The .imgscan command displays any image headers that it finds and the header type. Header types include Portable Executable (PE) headers and Microsoft MS-DOS MZ headers.\n  </p>\n </blockquote>\n <p>\n  I was able to verify this in user mode, but with the only Windows XP kernel mode dump I currently have, it does not output anything.\n </p>\n <p>\n  Example output from a user mode dump:\n </p>\n <pre><code>MZ at 000007fe`ff4d0000, prot 00000004, type 00020000 - size db000\n  Name: ADVAPI32.dll\n</code></pre>\n <p>\n  So all the necessary information to get the DLL is available. In case of a user mode dump I have used\n </p>\n <pre><code>.writemem <FileName> <Range>\n</code></pre>\n <p>\n  to write the DLL to disk and analyze later.\n </p>\n <p>\n  <code>\n   <Range>\n  </code>\n  is according the\n  <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax\" rel=\"nofollow noreferrer\">\n   address and range syntax\n  </a>\n  , e.g.\n </p>\n <pre><code>.writemem advapi32.dll 000007fe`ff4d0000 Ldb000\n</code></pre>\n <p>\n  This probably won't work for kernel mode dumps because parts of the module may have been swapped to disk, so the DLL in memory is no longer complete.\n </p>\n <p>\n  This approach will also not find code that was generated on the fly.\n </p>\n <h2>\n  Finding potentially executable code\n </h2>\n <p>\n  Code that can be executed must reside in a memory block that has the\n  <code>\n   executable\n  </code>\n  flag set.\n </p>\n <p>\n  Unfortunately the command\n </p>\n <pre><code>!address -f:<filter>\n</code></pre>\n <p>\n  is broken in WinDbg 6.2.9200. It should work in user mode dumps and output a list of start and end addresses that are executable.\n </p>\n <p>\n  At the moment I only get\n </p>\n <pre><code>0:067> !address -f:PAGE_EXECUTE\n\n        BaseAddress      EndAddress+1        RegionSize     Type       State                 Protect             Usage\n------------------------------------------------------------------------------------------------------------------------\n\n0:067> !address -f:PAGE_EXECUTE_READ\nInvalid filter arguments. Type !address -? to get the list of supported parameters\n0:067> !address -f:PAGE_EXECUTE_READWRITE\nInvalid filter arguments. Type !address -? to get the list of supported parameters\n0:067> !address -f:PAGE_EXECUTE_WRITECOPY\nInvalid filter arguments. Type !address -? to get the list of supported parameters\n</code></pre>\n <p>\n  Although I have a full memory dump\n </p>\n <pre><code>0:067> .dumpdebug\n...\nFlags           40002\n                0002 MiniDumpWithFullMemory\n                40000 MiniDumpWithTokenInformation\n</code></pre>\n <p>\n  But you get the idea and might be able to apply it to other tools.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Thomas Weller",
            "time": "Apr 11, 2020 at 18:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "T.Todua",
                    "text": "<span class=\"comment-copy\">Many thanks! as that doesnt matter, i will remove comment so here will be clean up.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you know the processor type and if its little or big endian you can search for common opcodes used in functions.\n </p>\n <p>\n  for example in x86 its common to see:\n </p>\n <pre><code>push    ebp\nmov     ebp, esp\nadd     esp ...\n</code></pre>\n <p>\n  which is 55 8B EC 83 C4 in binary and then search for it in the dump.\n </p>\n <p>\n  If you'll find areas which contain your opcodes in high density its probably code.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Eli K",
            "time": "May 21, 2015 at 20:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}