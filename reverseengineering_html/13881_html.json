{
    "title": "gdb shows wrong instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/13881/gdb-shows-wrong-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm debugging\n  <code>\n   android jni\n  </code>\n  with\n  <code>\n   gdb\n  </code>\n  . There's a\n  <code>\n   jni\n  </code>\n  function\n  <code>\n   A()\n  </code>\n  , I need to set\n  <code>\n   breakpoint\n  </code>\n  there and step through. I calculated the address with\n  <code>\n   module_base+offset\n  </code>\n  , which is\n  <code>\n   0x99B62C7A\n  </code>\n  , then I tried to verify if it's the right address, with\n  <code>\n   gdb\n  </code>\n  command:\n </p>\n <pre><code>display /5i 0x99B62C7A\n</code></pre>\n <p>\n  It prints some unexpected instructions, which is different from\n  <code>\n   IDA\n  </code>\n  :\n  <a href=\"https://i.sstatic.net/YU1WQ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/YU1WQ.png\"/>\n  </a>\n </p>\n <p>\n  And if I put a\n  <code>\n   breakpoint\n  </code>\n  there and click on the UI to trigger the\n  <code>\n   breakpoint\n  </code>\n  , the process crashes with\n  <code>\n   SIGSEGV\n  </code>\n  .\n </p>\n <p>\n  So why\n  <code>\n   gdb\n  </code>\n  displays different instructions? Is the crash has something to do with the bad instruction?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "android",
        "gdb"
    ],
    "user": "aj3423",
    "time": "Nov 9, 2016 at 8:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your instructions shown by Ida are Thumb-mode instructions. The easiest way to verify this is by checking the addresses - each instruction has 2 bytes. Gdb doesn't know this however, and assumes 4 byte arm instructions. When an object has a symbol table, gdb can detect the instruction mode from that, but will fallback to a default mode when it can't. You can change this fallback mode;\n  <code>\n   set arm fallback-mode thumb\n  </code>\n  should do the trick.\n </p>\n <p>\n  This explains the SIGSEGV as well as breakpoints use different opcodes in arm and thumb mode.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "Nov 8, 2016 at 10:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}