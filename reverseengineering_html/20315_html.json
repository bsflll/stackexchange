{
    "title": "IDA - large jump table, missing cases in analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/20315/ida-large-jump-table-missing-cases-in-analysis",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have come across the following jump table with a large amount of cases (160+). There seems to be cases missing from IDAs analysis though. For example it skips from cases 22 -> 38 -> 91, and I can see about 10 cases total.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/08NEd.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA\" src=\"https://i.sstatic.net/08NEd.png\"/>\n  </a>\n </p>\n <ol>\n  <li>\n   Can I expect all switch cases to take up sequential memory? Is it possible the cases aren't missing, just located elsewhere in memory?\n  </li>\n  <li>\n   If they are normally sequential, is IDA just misinterpreting the cases?\n  </li>\n  <li>\n   Can anyone please explain why there are a large amount of cases belonging to this jumptable but I only see a select few?\n  </li>\n </ol>\n <p>\n  Instructions around\n  <code>\n   0052B970\n  </code>\n  , it is the disasm located immediately above the screenshot:\n </p>\n <pre><code>.text:0052B932                loc_52B932:                             ; CODE XREF: sub_52B920+9↑j\n.text:0052B932 8A 01                          mov     al, [ecx]\n.text:0052B934 3C B5                          cmp     al, 0B5h\n.text:0052B936 73 F3                          jnb     short loc_52B92B\n.text:0052B938 0F B6 D0                       movzx   edx, al\n.text:0052B93B 8B 04 95 E8 0A+                mov     eax, dword_730AE8[edx*4]\n.text:0052B942 85 C0                          test    eax, eax\n.text:0052B944 57                             push    edi\n.text:0052B945 8B 7D 08                       mov     edi, [ebp+arg_0]\n.text:0052B948 89 07                          mov     [edi], eax\n.text:0052B94A 75 06                          jnz     short loc_52B952\n.text:0052B94C 5F                             pop     edi\n.text:0052B94D 5E                             pop     esi\n.text:0052B94E 5D                             pop     ebp\n.text:0052B94F C2 04 00                       retn    4\n.text:0052B952                ; ---------------------------------------------------------------------------\n.text:0052B952\n.text:0052B952                loc_52B952:                             ; CODE XREF: sub_52B920+2A↑j\n.text:0052B952 85 C0                          test    eax, eax\n.text:0052B954 53                             push    ebx\n.text:0052B955 0F 8D DC 01 00+                jge     loc_52BB37\n.text:0052B95B 8D 42 EA                       lea     eax, [edx-16h]  ; switch 158 cases\n.text:0052B95E 3D 9D 00 00 00                 cmp     eax, 9Dh\n.text:0052B963 0F 87 C8 01 00+                ja      loc_52BB31      ; jumptable 0052B970 default case\n.text:0052B969 0F B6 80 80 BB+                movzx   eax, ds:byte_52BB80[eax]\n.text:0052B970 FF 24 85 44 BB+                jmp     ds:off_52BB44[eax*4] ; switch jump\n.text:0052B977                ; ---------------------------------------------------------------------------\n.text:0052B977\n.text:0052B977                loc_52B977:                             ; CODE XREF: sub_52B920+50↑j\n.text:0052B977                                                        ; DATA XREF: .text:off_52BB44↓o\n.text:0052B977 83 FE 0D                       cmp     esi, 0Dh        ; jumptable 0052B970 case 22\n.text:0052B97A 72 4A                          jb      short loc_52B9C6\n.text:0052B97C 0F B7 49 01                    movzx   ecx, word ptr [ecx+1]\n.text:0052B980 5B                             pop     ebx\n.text:0052B981 89 0F                          mov     [edi], ecx\n.text:0052B983 5F                             pop     edi\n.text:0052B984 B8 01 00 00 00                 mov     eax, 1\n.text:0052B989 5E                             pop     esi\n.text:0052B98A 5D                             pop     ebp\n.text:0052B98B C2 04 00                       retn    4\n</code></pre>\n <p>\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "544",
    "tags": [
        "ida",
        "binary-analysis",
        "x86",
        "static-analysis"
    ],
    "user": "user3238415",
    "time": "Jan 10, 2019 at 19:49",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n can you show the place around the indirect jump (0052B970)? If possible, please add a text dump instead of or in addition to a screenshot, so it can be indexed by search engines and parsed by screen readers.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user3238415",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky , added more instructions around that address. Hopefully what I dumped is helpful. Thanks :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is an example of so called sparse switch table - large range of case values with gaps in them. You can see how it first determines the case index by indexing a byte table then jumps to the handler using an index into the address table. So missing values are normal and expected; they’re handled by the default case.\n </p>\n <p>\n  You can check Rolf’s research into compiler switch implementations and their variations in this article series:\n </p>\n <p>\n  <a href=\"https://www.msreverseengineering.com/blog/2014/6/23/switch-as-binary-search-part-0\" rel=\"nofollow noreferrer\">\n   https://www.msreverseengineering.com/blog/2014/6/23/switch-as-binary-search-part-0\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 10, 2019 at 14:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}