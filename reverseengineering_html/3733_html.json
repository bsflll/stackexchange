{
    "title": "Why cl.exe change the extern function name used in my code?",
    "link": "https://reverseengineering.stackexchange.com/questions/3733/why-cl-exe-change-the-extern-function-name-used-in-my-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So basically I my nasm syntax asm code, I use some extern functions like this:\n </p>\n <pre><code>extern _printf\nextern __imp__Sleep@4\n....\ncall _printf\ncall    [__imp__Sleep@4]\n</code></pre>\n <p>\n  Then I use nasm to assemble it into obj:\n </p>\n <pre><code>nasm -f win32 test.asm\n</code></pre>\n <p>\n  Then I use IDA Pro to disassemble test.obj, I can see code like this:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/awMR3.png\"/>\n </p>\n <p>\n  See, extern function name like\n  <strong>\n   _printf\n  </strong>\n  has been kept.\n </p>\n <p>\n  But when I link this obj file:\n </p>\n <pre><code>cl /MT z:\\\\windows\\\\test.obj /link kernel32.lib libcmt.lib /SUBSYSTEM:CONSOLE\n</code></pre>\n <p>\n  Then I use IDA Pro to disassemble test.exe, I can see code like this:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/oGiwm.png\"/>\n </p>\n <p>\n  See, the function name of\n  <strong>\n   _printf\n  </strong>\n  has been changed.\n </p>\n <p>\n  I know basically after static link, the code of _printf has been put into the test.exe, in the subroutine of\n  <strong>\n   sub_409C9B\n  </strong>\n </p>\n <p>\n  But basically\n  <strong>\n   I have to make the name of extern declared functions unchangeable\n  </strong>\n  , because I need to reverse engineering the test.exe and do some modify/remove towards those functions, and once PE exe lost the name info, I can not locate those targeting functions.\n </p>\n <p>\n  So my question is:\n </p>\n <p>\n  Why cl.exe will change the name of those functions, and is there any way to stop the change(I mean keep the function name unchangeable during the link time)?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "458",
    "tags": [
        "ida",
        "winapi",
        "nasm"
    ],
    "user": "lllllllllllll",
    "time": "Feb 20, 2014 at 18:01",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n That is why there exists signatures for IDA (Flirt) to detect such standard library functions. Apply them and see.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You've got some kind of\n  <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">\n   XY-problem\n  </a>\n  .\n </p>\n <p>\n  The truth is: it's IDA who so to say \"changes\" the name of (something she thinks is) a function from absolutely nothing to\n  <code>\n   sub_{address}\n  </code>\n  . Why on earth would\n  <code>\n   PE-file\n  </code>\n  have non-exported symbols stored in it? Some kind of masochism? To give a candy to reversers?\n </p>\n <p>\n  Thus, you have at least three ways of dealing with your problem:\n </p>\n <ul>\n  <li>\n   pray and hope that IDA's\n   <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\" rel=\"nofollow\">\n    FLIRT\n   </a>\n   will heuristically recognize\n   <code>\n    printf\n   </code>\n   ;\n  </li>\n  <li>\n   <code>\n    link\n   </code>\n   your program with debug-info:\n   <a href=\"http://msdn.microsoft.com/en-us/library/aa235413.aspx\" rel=\"nofollow\">\n    <code>\n     -debug\n    </code>\n   </a>\n   which tells linker to generate\n   <a href=\"http://en.wikipedia.org/wiki/Program_database\" rel=\"nofollow\">\n    <code>\n     pdb\n    </code>\n   </a>\n   -file which IDA will query for all the symbols stored for your application;\n  </li>\n  <li>\n   tell linker to\n   <a href=\"http://msdn.microsoft.com/en-us/library/aa235424.aspx\" rel=\"nofollow\">\n    <code>\n     -export:printf\n    </code>\n   </a>\n   so that it's name will be in export directory and you can get it's address easily even programmatically.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Community",
            "time": "Apr 23, 2014 at 13:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When\n  <code>\n   printf()\n  </code>\n  is called as an external function, the Windows loader needs to look up the address of the\n  <code>\n   printf()\n  </code>\n  function by-name at run-time so that the caller can find the\n  <code>\n   printf()\n  </code>\n  code.\n </p>\n <p>\n  When\n  <code>\n   printf()\n  </code>\n  is called as an embedded library function, the compiler already knows the address of the\n  <code>\n   printf()\n  </code>\n  function at compile-time, and thus doesn't need to embed the function's name in the executable.\n </p>\n <p>\n  If you want the\n  <code>\n   printf()\n  </code>\n  name to automatically show in your disassembly, either export debug symbols or stick with using external DLLs. Alternatively, you may be able to use IDA's FLIRT libraries to identify the\n  <code>\n   printf()\n  </code>\n  function in the embedded library code.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Feb 20, 2014 at 18:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}