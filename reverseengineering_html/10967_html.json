{
    "title": "Mapping a high level statement back in assembly dump",
    "link": "https://reverseengineering.stackexchange.com/questions/10967/mapping-a-high-level-statement-back-in-assembly-dump",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Say, I have compiled a large code base, e.g. gzip/gmp/python/php etc. on Linux. Is there any means to map a high level C construct, e.g. assignment/if-else/for/while/Math expression back in the assembly dump produced by\n  <code>\n   objdump\n  </code>\n  or something similar? Please let me know how far it is possible in both the cases when debug information is present and absent.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "336",
    "tags": [
        "disassembly",
        "decompilation",
        "c",
        "objdump"
    ],
    "user": "sherlock",
    "time": "Sep 26, 2015 at 12:15",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Do you want to decompile the code or map assembly to original source ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n It sounds like what you're asking is, \"is it possible to reverse engineer software?\" So if I'm understanding you correctly, the answer is, \"yes.\"\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Note that just about any of your original \"ssignment/if-else/for/while/Math expression\" in the C source may be optimized beyond recognition, or even entirely be omitted. I.e., even with the lowest compiler optimization settings, you won't find the \"5\" of a statement\n <code>\n  i = 100/5;\n </code>\n back in your executable. (Assuming any 21st century compiler was used.)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'll try to outline a possible ways you can go:\n </p>\n <ol>\n  <li>\n   If you compile with debug symbols, you can use\n   <em>\n    objdump\n   </em>\n   to produce a more readable disassembly.\n  </li>\n  <li>\n   if you give\n   <em>\n    gcc\n   </em>\n   the flag\n   <code>\n    -fverbose-asm\n   </code>\n   , the assembler it emits will be a lot clearer to read.\n  </li>\n  <li>\n   Use the\n   <code>\n    -S\n   </code>\n   (note: capital\n   <strong>\n    S\n   </strong>\n   ) switch to\n   <em>\n    gcc\n   </em>\n   , and it will emit the assembly code to a file with a\n   <strong>\n    .s\n   </strong>\n   extension. For example, the following command:\n   <code>\n    gcc -O2 -S -c foo.c\n   </code>\n   will leave the generated assembly code on the file\n   <strong>\n    foo.s\n   </strong>\n   .\n  </li>\n </ol>\n <p>\n  Also, you can generate this in\n  <strong>\n   AT&T\n  </strong>\n  syntax as well as in\n  <strong>\n   Intel\n  </strong>\n  syntax:\n  <code>\n   gcc -S -masm=att code.c\n  </code>\n  <code>\n   gcc -S -masm=intel code.c\n  </code>\n </p>\n <p>\n  Frankly, I've digested the info from\n  <a href=\"https://stackoverflow.com/questions/1289881/using-gcc-to-produce-readable-assembly%22%20here%22\">\n   here\n  </a>\n  . Hope it will help.\n </p>\n <p>\n  EDIT: some useful links:\n </p>\n <p>\n  <a href=\"http://www.limitedwish.org/threethings/2012/05/11/c-objdump-asm/\" rel=\"nofollow noreferrer\">\n   The info that's more specific to your question\n  </a>\n </p>\n <p>\n  <a href=\"http://www.eresi-project.org/browser/trunk/testsuite/elf/etrel_inject/etrel_original\" rel=\"nofollow noreferrer\">\n   Looks very promising except that the project is abandoned\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}