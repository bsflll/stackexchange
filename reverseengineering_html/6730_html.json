{
    "title": "Mechanisms to stop serial console accepting input on a Linux system?",
    "link": "https://reverseengineering.stackexchange.com/questions/6730/mechanisms-to-stop-serial-console-accepting-input-on-a-linux-system",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on a simple embedded system based around an Olinuxino board. This has a serial console header onboard. TX and RX are both connected to the respective pins on the microcontroller (i.e. this isn't a hardware issue).\n </p>\n <p>\n  When connected, I can see the normal output from a booting Linux system, but at no point am I presented with a login. No other input seem\n </p>\n <p>\n  What mechanisms can be used to stop a serial console accepting input on a Linux system?\n </p>\n <h2>\n  Specific situation\n </h2>\n <p>\n  The device is using busybox, and inittab looks like so:\n </p>\n <pre><code># /etc/inittab: init(8) configuration.\n# $Id: inittab,v 1.91 2002/01/25 13:35:21 miquels Exp $\n\n# The default runlevel.\nid:5:initdefault:\n\n# Boot-time system configuration/initialization script.\n# This is run first except when booting in emergency (-b) mode.\nsi::sysinit:/etc/init.d/rcS\n\n# What to do in single-user mode.\n~~:S:wait:/sbin/sulogin\n\n# /etc/init.d executes the S and K scripts upon change\n# of runlevel.\n#\n# Runlevel 0 is halt.\n# Runlevel 1 is single-user.\n# Runlevels 2-5 are multi-user.\n# Runlevel 6 is reboot.\n\nl0:0:wait:/etc/init.d/rc 0\nl1:1:wait:/etc/init.d/rc 1\nl2:2:wait:/etc/init.d/rc 2\nl3:3:wait:/etc/init.d/rc 3\nl4:4:wait:/etc/init.d/rc 4\nl5:5:wait:/etc/init.d/rc 5\nl6:6:wait:/etc/init.d/rc 6\n# Normally not reached, but fallthrough in case of emergency.\nz6:6:respawn:/sbin/sulogin\nS:2345:respawn:/sbin/getty 115200 ttyAMA0\n# /sbin/getty invocations for the runlevels.\n#\n# The \"id\" field MUST be the same as the last\n# characters of the device (after \"tty\").\n#\n# Format:\n#  <id>:<runlevels>:<action>:<process>\n#\n\n1:2345:respawn:/sbin/getty 38400 tty1\n</code></pre>\n <p>\n  /sbin/getty links to /sbin/getty.tinylogin which links to /bin/tinylogin\n </p>\n <p>\n  The options passed to the kernel are:\n </p>\n <pre><code>[    0.000000] Kernel command line: console=ttyAMA0,115200 root=/dev/mmcblk0p2 rw rootwait ssp1=mmc lcd_panel=lms430 no_console_suspend\n</code></pre>\n <p>\n  Not sure if the difference in speed could cause this not to work.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "433",
    "tags": [
        "linux",
        "serial-communication"
    ],
    "user": "Cybergibbons",
    "time": "Nov 29, 2014 at 8:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You don't stop the serial console from accepting input; you make it accept input by placing an appropriate\n  <code>\n   getty\n  </code>\n  entry into\n  <code>\n   /etc/inittab\n  </code>\n  . If that entry is missing, no one will ever start a login process on the serial console.\n </p>\n <p>\n  (That's for classical systems that use classic\n  <code>\n   init\n  </code>\n  to start and respawn background processes. Desktop systems have moved to a new method named\n  <code>\n   upstart\n  </code>\n  that doesn't use\n  <code>\n   /etc/inittab\n  </code>\n  any more. But on a simple embedded system I'd rather expect inittab to be still in use.)\n </p>\n <p>\n  So to answer your question: your manufacturer didn't do anything to stop your Linux from running a login on the serial console (that you can reverse). Instead, they probably didn't do anything to make it run a login at all. Possibly they didn't even provide the\n  <code>\n   getty\n  </code>\n  binary that initiates login.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Peter Mortensen",
            "time": "Apr 16, 2018 at 7:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}