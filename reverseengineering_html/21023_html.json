{
    "title": "Reverse engineering android native packer",
    "link": "https://reverseengineering.stackexchange.com/questions/21023/reverse-engineering-android-native-packer",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  im trying to Reverse engineering an android app and the app have 4 folders in the\n  <strong>\n   /data/data/{package}\n  </strong>\n  folder\n </p>\n <pre><code>├───app_dexprotector\n│       823517D25836B88F1C499C02370A047E.dat\n│       823517D25836B88F1C499C02370A047E.dex\n│\n├───app_outdex\n│       libdexprotector.bpqn57.12456.so\n│\n├───cache\n└───lib\n        libiconv.so\n        libzbarjni.so\n</code></pre>\n <p>\n  and all the files are the same except app_outdex file and when I start the app\n  <strong>\n   app_dexprotector\n  </strong>\n  folder will be modified after that a file will create on app_outdex then will delete immediately I create a copy of that file with\n  <strong>\n   Termux\n  </strong>\n  and\n  <strong>\n   inotify-wait\n  </strong>\n  and the interesting part is always the size of the file is different i searched the java code of the app and there is only an application class with a huge bytecode array and one native method like this :\n </p>\n <pre><code>    public static native int tfAHDD(Object obj, int I, int i2, int i3, int i4, int i5, int i6, int i7, int i8);\n</code></pre>\n <p>\n  the whole class is so long but it's only because of the byte array\n  <a href=\"https://github.com/osairon/android-native-packer/blob/master/ProtectedInitializer.java\" rel=\"noreferrer\">\n   this is the link of the class\n  </a>\n  my main questions are why the file has different sizes every time and why there are not other native methods? how the app will run this method and finally how can I analysis this .so file\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "892",
    "tags": [
        "c++",
        "android",
        "c",
        "java"
    ],
    "user": "Amin",
    "time": "Apr 2, 2019 at 15:06",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n Did you analyze the Java code with Apktool or dex2jar?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Amin",
            "text": "<html><body><span class=\"comment-copy\">\n @Biswapriyo there is nothing to analyze only an application class and i upload it and you can see it too i can understand how the app loads classes without calling in java\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Behroozfar",
            "text": "<html><body><span class=\"comment-copy\">\n The app is using DexProtector. Check this link :\n <a href=\"https://gameguardian.net/forum/topic/17029-how-to-get-the-decrypted-files-from-apk/\" rel=\"nofollow noreferrer\">\n  gameguardian.net/forum/topic/…\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can't analyze native functions with a standard decompiler because native functions are not implemented in the Java Bytecode (\n  <a href=\"https://www.baeldung.com/java-native#:%7E:text=A%20native%20method%20is%20a,%5D%20native%20%5Breturn_type%5D%20method%20()%3B\" rel=\"nofollow noreferrer\">\n   The Java Native Keyword and Methods\n  </a>\n  ).\n </p>\n <p>\n  You have to use common x86 disassemblers (Like IDA, JEB) to analyze the native functions.\n </p>\n <p>\n  At first, search for\n  <code>\n   System.loadLibrary\n  </code>\n  calls, to see which native library gets loaded (should be in a static block)\n </p>\n <p>\n  Once you found the native library you have to open it with a disassembler like IDA and go in\n  <strong>\n   Exports\n  </strong>\n  section:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BNqjO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/BNqjO.png\"/>\n  </a>\n </p>\n <p>\n  Here you can see the implementation of your native functions.\n </p>\n <p>\n  Of couse you cannot expect java bytecode here, but only C pseudocode (if your disassebler supports it)\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/K5PVS.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/K5PVS.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "MarianD",
            "time": "Jun 23, 2021 at 15:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}