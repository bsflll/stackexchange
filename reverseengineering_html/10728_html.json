{
    "title": "What does lea rdx,qword ptr ss:[rbp+50] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/10728/what-does-lea-rdx-qword-ptr-ssrbp50-mean",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What does the code below exactly mean?\n </p>\n <pre><code>lea rdx,qword ptr ss:[rbp+50]\n</code></pre>\n <p>\n  I have difficulty in\n  <code>\n   rbp+50\n  </code>\n  . Is\n  <code>\n   rbp\n  </code>\n  the base pointer in the 64 bit CPU architecture? What is the base pointer refering to? how can I find out the value at\n  <code>\n   rbp+50\n  </code>\n  ? what does\n  <code>\n   ss\n  </code>\n  mean? what does\n  <code>\n   qword\n  </code>\n  mean? I totally confused with these terms.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "7k",
    "tags": [
        "disassembly",
        "x86-64",
        "assembly"
    ],
    "user": "FreeMind",
    "time": "Aug 27, 2015 at 17:45",
    "comments": [
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://reverseengineering.stackexchange.com/q/2006/2563\">\n  How are the segment registers (fs, gs, cs, ss, ds, es) used in Linux?\n </a>\n ,\n <a href=\"http://stackoverflow.com/q/7844963/995714\">\n  How to interpret segment register accesses on x86-64?\n </a>\n ,\n <a href=\"http://stackoverflow.com/q/19502868/995714\">\n  Meaning of CS and SS registers on x86-64 Linux in userland?\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The code means\n  <code>\n   rdx = rbp + 50\n  </code>\n  .\n </p>\n <p>\n  For the explanation, we'll go bottom up...\n </p>\n <p>\n  <code>\n   qword\n  </code>\n  is 8-bytes (64 bits). It stands for quad-word, same as\n  <code>\n   dword\n  </code>\n  stands for double-word. It is the size of every\n  <code>\n   rXX\n  </code>\n  register. The\n  <code>\n   qword ptr\n  </code>\n  means that we are accessing a\n  <code>\n   qword\n  </code>\n  sized memory block (as oppised to a\n  <code>\n   byte\n  </code>\n  ,\n  <code>\n   word\n  </code>\n  or\n  <code>\n   dword\n  </code>\n  ).\n </p>\n <p>\n  <code>\n   ss\n  </code>\n  stands for stack-segment. However, in non 16-bit systems all segments are usually mapped to 0. It is probably shown in the code as an artifact of the dis-assembly as the\n  <code>\n   rbp\n  </code>\n  register is used to point into the stack.\n </p>\n <p>\n  The\n  <code>\n   lea\n  </code>\n  commands mean load-effective-address. It does not take the value at the given address, but rather the address itself. So in pseudo code we can rewrite the entire thing as\n  <code>\n   rdx = rbp + 50\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "tmr232",
            "time": "Aug 27, 2015 at 20:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}