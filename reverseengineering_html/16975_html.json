{
    "title": "What's the difference between an interrupt line and the interrupt number",
    "link": "https://reverseengineering.stackexchange.com/questions/16975/whats-the-difference-between-an-interrupt-line-and-the-interrupt-number",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What's the difference between an interrupt line and an interrupt number (like 0x80) ? Also how are IRQs related to syscalls?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "system-call"
    ],
    "user": "Trey",
    "time": "Dec 14, 2017 at 17:32",
    "comments": [
        {
            "user": "dsasmblr",
            "text": "<html><body><span class=\"comment-copy\">\n I'll leave the answering to someone else, but do yourself a HUGE favor and spend some time rummaging through chapter 6 in vol. 3a of the Intel developer's manual. It's an amazing resource for this topic:\n <a href=\"https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html\" rel=\"nofollow noreferrer\">\n  intel.com/content/www/us/en/architecture-and-technology/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://wiki.osdev.org/Interrupts\" rel=\"nofollow noreferrer\">\n   LMGTFY\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   An interrupt is a signal from a device, such as the keyboard, to the CPU, telling it to immediately stop whatever it is currently doing and do something else. For example, the keyboard controller sends an interrupt when a key is pressed. To know how to call on the kernel when a specific interrupt arise, the CPU has a table called the IDT, which is a vector table setup by the OS, and stored in memory. There are 256 interrupt vectors on x86 CPUs, numbered from 0 to 255 which act as entry points into the kernel. The number of interrupt vectors or entry points supported by a CPU differs based on the CPU architecture.\n  </p>\n  <p>\n   There are generally three classes of interrupts on most platforms:\n  </p>\n  <ul>\n   <li>\n    <p>\n     <strong>\n      Exception\n     </strong>\n     : These are generated internally by the CPU and used to alert the running kernel of an event or situation which requires its attention. On x86 CPUs, these include exception conditions such as Double Fault, Page Fault, General Protection Fault, etc.\n    </p>\n   </li>\n   <li>\n    <p>\n     <strong>\n      Interrupt Request (IRQ) or Hardware Interrupt\n     </strong>\n     : This type of interrupt is generated externally by the chipset, and it is signalled by latching onto the #INTR pin or equivalent signal of the CPU in question. There are two types of IRQs in common use today.\n    </p>\n    <ul>\n     <li>\n      <em>\n       IRQ Lines, or Pin-based IRQs\n      </em>\n      : These are typically statically routed on the chipset. Wires or lines run from the devices on the chipset to an IRQ controller which serializes the interrupt requests sent by devices, sending them to the CPU one by one to prevent races. In many cases, an IRQ Controller will send multiple IRQs to the CPU at once, based on the priority of the device. An example of a very well known IRQ Controller is the Intel 8259 controller chain, which is present on all IBM-PC compatible chipsets, chaining two controllers together, each providing 8 input pins for a total of 16 usable IRQ signalling pins on the legacy IBM-PC.\n     </li>\n     <li>\n      <em>\n       Message Based Interrupts\n      </em>\n      : These are signalled by writing a value to a memory location reserved for information about the interrupting device, the interrupt itself, and the vectoring information. The device is assigned a location to which it wites either by firmware or by the kernel software. Then, an IRQ is generated by the device using an arbitration protocol specific to the device's bus. An example of a bus which provides message based interrupt functionality is the PCI Bus.\n     </li>\n    </ul>\n   </li>\n   <li>\n    <p>\n     <strong>\n      Software Interrupt\n     </strong>\n     : This is an interrupt signalled by software running on a CPU to indicate that it needs the kernel's attention. These types of interrupts are generally used for System Calls. On x86 CPUs, the instruction which is used to initiate a software interrupt is the \"INT\" instruction. Since the x86 CPU can use any of the 256 available interrupt vectors for software interrupts, kernels generally choose one. For example, many contemporary unixes use vector 0x80 on the x86 based platforms.\n    </p>\n   </li>\n  </ul>\n </blockquote>\n</div>\n</body></html>",
            "votes": "1",
            "user": "julian",
            "time": "Dec 14, 2017 at 19:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}