{
    "title": "Strange exception thrown while debugging in Win10, but not Win7",
    "link": "https://reverseengineering.stackexchange.com/questions/29727/strange-exception-thrown-while-debugging-in-win10-but-not-win7",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am disassembling a\n  <em>\n   legacy\n  </em>\n  32-bit (x86) application using IDA Home (7.6) (for x86 disassembly) in a 64-bit Windows 10 environment running in a virtual machine (VMWare Fusion for Mac). The application executes without issue when outside a debugger, however, when running the application using the \"Local Windows Debugger\" in IDA (loaded as a\n  <strong>\n   MetaPC\n  </strong>\n  project), an \"\n  <em>\n   unknown exception code 6A6\n  </em>\n  \" is thrown:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Ddgsa.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA Error Exception Message\" src=\"https://i.sstatic.net/Ddgsa.png\"/>\n  </a>\n </p>\n <p>\n  This exception occurs shortly after the application execution has begun in the debugger (i.e. without any application user input).\n </p>\n <p>\n  To eliminate a possible issue with IDA, I tested using the\n  <a href=\"https://x64dbg.com/#start\" rel=\"nofollow noreferrer\">\n   x32dbg\n  </a>\n  debugger and the\n  <a href=\"https://www.ollydbg.de/\" rel=\"nofollow noreferrer\">\n   Ollydbg\n  </a>\n  debugger. Both debuggers throw the\n  <strong>\n   same\n  </strong>\n  raised exception, namely the\n  <a href=\"https://efmsoft.com/what-is/?code=1702\" rel=\"nofollow noreferrer\">\n   <code>\n    RPC_S_INVALID_BINDING\n   </code>\n  </a>\n  (\n  <code>\n   0x000006A6\n  </code>\n  ) error:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Qp6iE.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"x32dbg Raised Exception\" src=\"https://i.sstatic.net/Qp6iE.png\"/>\n  </a>\n </p>\n <p>\n  I spent some time thinking about why I am facing issues running the application inside a debugger and I came up with a few possible reasons:\n </p>\n <ol>\n  <li>\n   Anti-debugger techniques.\n  </li>\n  <li>\n   64-bit debuggers are loading the wrong DLLs (i.e. they're loading the 64-bit DLL when it should be loading the 32-bit DLL located in\n   <code>\n    C:\\WINDOWS\\SysWOW64\\\n   </code>\n   ).\n   <ul>\n    <li>\n     Reference(s):\n     <ul>\n      <li>\n       <a href=\"https://reverseengineering.stackexchange.com/questions/12194/ida-pro-64-bit-disassembly-error-for-system-dlls\">\n        IDA Pro 64 bit disassembly error for system DLLs\n       </a>\n      </li>\n      <li>\n       <a href=\"https://lucasg.github.io/2016/05/30/Do-not-load-dll-from-System32-directly-into-IDA/\" rel=\"nofollow noreferrer\">\n        Do not load dll from System32 directly into IDA\n       </a>\n      </li>\n     </ul>\n    </li>\n   </ul>\n  </li>\n  <li>\n   <em>\n    Something else\n   </em>\n   (??)\n  </li>\n </ol>\n <p>\n  I am able to disprove that both #1 and #2 are\n  <strong>\n   not\n  </strong>\n  the issues after setting up a 64-bit  Windows 7 with Service Pack 1 environment. I am able to debug the application in IDA\n  <strong>\n   without\n  </strong>\n  issue while in this Windows 7 environment (i.e. the\n  <code>\n   6A6\n  </code>\n  exception is\n  <strong>\n   not\n  </strong>\n  thrown).\n </p>\n <p>\n  So, this leads me to #3 - a head scratching moment. I did some research into the\n  <a href=\"https://efmsoft.com/what-is/?code=1702\" rel=\"nofollow noreferrer\">\n   <code>\n    RPC_S_INVALID_BINDING\n   </code>\n  </a>\n  (\n  <code>\n   0x000006A6\n  </code>\n  ) error and came across\n  <a href=\"https://stackoverflow.com/questions/13987610/qt-in-separate-thread-gives-first-chance-exception-at-0x74f2c41f-infoo-exe-0x\">\n   this StackOverflow question\n  </a>\n  . Naming, the accepted answer notes the following:\n </p>\n <blockquote>\n  <p>\n   Explaining 'The Binding Handle Is Invalid'\n   \n\n   \n\n   Today I want to try to give more insight into the 'Binding Handle Is Invalid' problem that a number of people have reported with the VS 2005 debugger.\n   \n\n   \n\n   First, if all you care about is how to solve the problem: Enable the 'Terminal Services' service and reboot. If you want to know more, read on.\n  </p>\n </blockquote>\n <p>\n  I tried enabling the\n  <code>\n   Terminal Services\n  </code>\n  (now named\n  <code>\n   Remote Desktop Services\n  </code>\n  on Windows 10 [\n  <a href=\"https://docs.microsoft.com/en-us/windows/win32/termserv/terminal-services-is-now-remote-desktop-services\" rel=\"nofollow noreferrer\">\n   reference\n  </a>\n  ]), however, this doesn't solve the issue and I still get an \"\n  <em>\n   unknown exception code 6A6\n  </em>\n  \" error. The\n  <a href=\"https://efmsoft.com/what-is/?code=1702\" rel=\"nofollow noreferrer\">\n   <code>\n    RPC_S_INVALID_BINDING\n   </code>\n  </a>\n  (\n  <code>\n   0x000006A6\n  </code>\n  ) error confuses me quite a bit.\n </p>\n <p>\n  There clearly appears to be something wrong with my environment setup with Windows 10 that isn't allowing me to specifically debug this application. Something changed from Windows 7 that is causing this issue and I'm at a loss here.\n </p>\n <p>\n  <strong>\n   Does anyone know what might be the issue here?\n  </strong>\n </p>\n \n\n <p>\n  Environment Detail(s):\n </p>\n <ul>\n  <li>\n   OSes Tested in VMWare Fusion (12.2.1 (18811640)):\n   <ul>\n    <li>\n     <strong>\n      [❌ - Issue]\n     </strong>\n     Windows 10 (x64) - Build 19042 (20H2 / 20H2)\n    </li>\n    <li>\n     <strong>\n      [❌ - Issue]\n     </strong>\n     Windows 10 (x64) - Build 15063 (1703 / Redstone 2)\n    </li>\n    <li>\n     <strong>\n      [❌ - Issue]\n     </strong>\n     Windows 10 (x64) - Build 14393 (1607 / Redstone 1)\n    </li>\n    <li>\n     <strong>\n      [✅ - No Issue]\n     </strong>\n     Windows 7 Ultimate (x64) - Build 7601 (Service Pack 1)\n    </li>\n   </ul>\n  </li>\n  <li>\n   Tools Used (\n   <em>\n    launched as Administrator\n   </em>\n   ):\n   <ul>\n    <li>\n     IDA Home 7.6 (v7.6.210427) (x64)\n    </li>\n    <li>\n     x32dbg (Release \"July 1 2021, 23:09:08\") (x64)\n    </li>\n    <li>\n     Ollydbg (v2.01) (x86)\n    </li>\n   </ul>\n  </li>\n </ul>\n <h2>\n  Update #1:\n </h2>\n <p>\n  As requested, here is the call stack (a.k.a. stack trace) when the exception occurs:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/WVzBB.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Call stack at the point of the exception\" src=\"https://i.sstatic.net/WVzBB.png\"/>\n  </a>\n </p>\n <p>\n  The application appears to be checking the DirectX9 environment and whether it is supported or not. Although, this is a guess on my part from the name of the DLL,\n  <code>\n   DX9EnvChk.dll\n  </code>\n  , which is included alongside the application in question. I can't find much information about this DLL through a normal web search, but it appears to be present with other applications of the era. This DLL (nor accompanying header file) was\n  <strong>\n   not\n  </strong>\n  part of the\n  <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=6812\" rel=\"nofollow noreferrer\">\n   Microsoft DirectX SDK (June 2010)\n  </a>\n  from what I can see.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "424",
    "tags": [
        "ida",
        "debugging",
        "x64dbg",
        "exception"
    ],
    "user": "Dannon",
    "time": "Dec 19, 2021 at 3:53",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Have you looked at what\n <a href=\"https://www.geoffchappell.com/studies/windows/win32/apphelp/history/index.htm?tx=88\" rel=\"nofollow noreferrer\">\n  shims\n </a>\n get applied? You stress the fact it's a legacy application\n <i>\n  and\n </i>\n we already know it would get to run inside WOW64 on all your tested OSs. Other things I'd look at are 1.) anti-malware solutions, 2.) active mitigations 3.) the event log (oftentimes RPC and COM issues will be logged). Also, have you looked at the call stack at the time of the exception?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dannon",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L - There are no custom shims installed along side this application. I verified no custom shims were applied by checking\n <code>\n  HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\n </code>\n - at the time of installation, this key didn't exist. The app likewise doesn't need to be run in a compatibility mode (when running outside a debugger). I also checked the Event Viewer logs for any RPC/COM logs (3), but nothing is logged. Lastly, I just updated my answer with the call stack. The exception in the debugger appears to be happening during the DirectX9 environment check.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dannon",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L - Can you provide some more insights on #1 and #2 you listed as \"things [to] look at?\" Let me also know if you think of any more insight from the updated information I provided in my comment above. I should also note that I am running these OSes in a virtual machine (i.e. VMWare Fusion on Mac). I updated my post above to reflect this.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for the update. Question 1 was geared at solutions that try to preempt exploits (and since Windows 8 or so more often than not subvert the built-in mechanisms WIndows has gained). If you use Windows Defender, you probably needn't care. Active mitigations come in a number of shapes. I suggest you use Process Explorer and look at the various columns you can activate in the main view as well as the Properties dialog for the process. It's unlikely that mitigations are activated for an old executable image, though. How many functions does the\n <code>\n  DX9EnvChk.dll\n </code>\n export?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}