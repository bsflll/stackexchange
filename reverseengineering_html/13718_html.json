{
    "title": "ARM assembly: Strange instruction pattern (endless loop?)",
    "link": "https://reverseengineering.stackexchange.com/questions/13718/arm-assembly-strange-instruction-pattern-endless-loop",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I noticed a strange instruction pattern. First the value of PC is moved into LR and then a register value is moved into PC.\n </p>\n <p>\n  Here some examples:\n </p>\n <pre><code>.text:00001488                 MOV             LR, PC\n.text:0000148C                 MOV             PC, R2\n ...\n.text:000304E8                 MOVNE           LR, PC\n.text:000304EC                 MOVNE           PC, R3\n</code></pre>\n <p>\n  If this pattern corresponds to a call instruction, wouldn't this result in an endless loop? If this does not correspond to a call, what is this ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "arm"
    ],
    "user": "langlauf.io",
    "time": "Oct 14, 2016 at 10:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not pretty sure if it is a call pattern, but this code is OK because of pipeline and will not create the endless loop. As people quoting\n  <a href=\"https://community.arm.com/thread/2341\" rel=\"nofollow\">\n   here\n  </a>\n  from\n  <a href=\"http://liris.cnrs.fr/~mmrissa/lib/exe/fetch.php?media=armv7-a-r-manual.pdf\" rel=\"nofollow\">\n   here\n  </a>\n </p>\n <blockquote>\n  <p>\n   on page A2-11 (Section A2.3) of the manual (ARM Architecture Reference\n  Manual ARMv7-A and ARMv7-R edition) it's been said that:\n  </p>\n  <p>\n   PC, the program counter\n  </p>\n  <ul>\n   <li>\n    When executing an ARM instruction, PC reads as the address of the current instruction plus 8.\n   </li>\n   <li>\n    When executing a Thumb instruction, PC reads as the address of the current instruction plus 4.\n   </li>\n   <li>\n    Writing an address to PC causes a branch to that address.\n   </li>\n  </ul>\n  <p>\n   Most Thumb instructions cannot access PC. The ARM instruction set\n  provides more general access to the PC, and many ARM instructions can\n  use the PC as a general-purpose register. However, ARM deprecates the\n  use of PC for any purpose other than as the program counter. See\n  Writing to the PC on page A2-46 for more information. Software can\n  refer to PC as R15\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "3",
            "user": "w s",
            "time": "Oct 14, 2016 at 11:37",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This was actually the correct way to perform indirect calls in ARM before the introduction of the\n  <code>\n   BLX\n  </code>\n  instruction (ARMv5 IIRC). ARM(32-bit version) is special in that the value of PC is pointing two instructions ahead when you read it (so +8 in ARM mode and +4 in Thumb mode). So, taking your example:\n </p>\n <pre><code>.text:00001488                 MOV             LR, PC\n</code></pre>\n <p>\n  here, the\n  <code>\n   PC\n  </code>\n  value will be 1488+8 = 1490, so\n  <code>\n   LR=0x1490\n  </code>\n </p>\n <pre><code>.text:0000148C                 MOV             PC, R2\n</code></pre>\n <p>\n  here, the\n  <code>\n   PC\n  </code>\n  will be set to the value in\n  <code>\n   R2\n  </code>\n  and the processor will start fetching instructions from that address. Most likely it will be a function which ends with a return instruction -\n  <code>\n   MOV PC, LR\n  </code>\n  (IDA shows it as\n  <code>\n   RET\n  </code>\n  ), so the execution will resume at the value of\n  <code>\n   LR\n  </code>\n  ï¼ˆ0x1490) which happens to be just after the original\n  <code>\n   MOV PC, R2\n  </code>\n  instruction (0148C+4=0x1490), so in effect that sequence of instruction is equivalent to\n  <code>\n   BLX R2\n  </code>\n  in the newer processors.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Oct 14, 2016 at 17:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}