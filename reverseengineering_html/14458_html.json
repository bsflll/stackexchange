{
    "title": "Removing randomness from program execution",
    "link": "https://reverseengineering.stackexchange.com/questions/14458/removing-randomness-from-program-execution",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I have a program which is highly obfuscated and generates a unique output every time. For ease of reversing I want to make it so that the output is the same for every run (following the logic that if the output is the same, the logic executed will be the same, roughly..)\n </p>\n <p>\n  At one point\n  <code>\n   strace\n  </code>\n  shows that the program does a number of calls to\n  <code>\n   clock_gettime\n  </code>\n  just before it generates an id. So I created a kernel module that makes\n  <code>\n   clock_gettime\n  </code>\n  return exactly the same time. Yet the program is still able to produce a unique output.\n </p>\n <p>\n  In my opinion all programs must make system calls to get unique entropy for seeding random functions and without making any system calls (or if all system calls they did make were made to return non-unique entropy) the program can't produce unique (random) data.\n </p>\n <p>\n  Are there any ways I'm missing that the program can get unique entropy without showing up on\n  <code>\n   strace\n  </code>\n  (i.e. without making a system call)?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "131",
    "tags": [
        "system-call",
        "entropy"
    ],
    "user": "scruffy",
    "time": "Jan 20, 2017 at 8:36",
    "comments": [
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n Can you please upload the program?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "scruffy",
            "text": "<html><body><span class=\"comment-copy\">\n Unfortunately that's not possible in this case. Though I'm looking for a technique I can apply to any program anyway.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Does it read from something like /dev/rand ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "scruffy",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  rt_sigaction\n </code>\n is the only other syscall called before generating the id. No file opens.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n In addition if it is Intel processor reseed and rdrand instructions may be used, it does not require system call.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Generally speaking, yes, there are a lot of ways to generate entropy without system calls (this can be weak entropy, but anyway).\n </p>\n <p>\n  Here is a small (but obviously not even close to pretend to be full) list:\n </p>\n <ul>\n  <li>\n   rdrand, rdseed instructions from intel random generator(btw, supported by AMD since 2015).\n  </li>\n  <li>\n   rdtsc instruction - which gives you a tick count since power up\n  </li>\n  <li>\n   uninitialized memory\n  </li>\n  <li>\n   internal program addresses generated as a result of ASLR\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Jan 20, 2017 at 10:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}