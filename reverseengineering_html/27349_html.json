{
    "title": "How much of the kernel does remote kernel debugging allow you to debug?",
    "link": "https://reverseengineering.stackexchange.com/questions/27349/how-much-of-the-kernel-does-remote-kernel-debugging-allow-you-to-debug",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a theoretical question because I've never set up remote kernel debugging before -- but I will do at some point, which should hopefully answer some of the experimental questions I have.\n </p>\n <p>\n  What happens if you put a breakpoint in the breakpoint trap handling or kdcom / kdnet itself\n </p>\n <p>\n  I can't find a single thing about this, but in the former case, wouldn't the CPU just freeze because the breakpoint is continually being hit without the remote debugger getting chance to remove the breakpoint or iretting to the instruction after the breakpoint.\n </p>\n <p>\n  Also, from what I'm seeing, it seems like a stack trace hides any of the trap handling, and shows the breakpoint as the top frame on the stack.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "143",
    "tags": [
        "windows",
        "debugging",
        "windbg",
        "kernel"
    ],
    "user": "Lewis Kelsey",
    "time": "Mar 29, 2021 at 12:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The earliest break is sxe ibp break on kd communication\n  \n\n  if you want to break earlier than that you need to lookup boot debugging\n  \n\n  you can use ctrl+alt+d for a debug spew of kdcom kdnet packets sent to and fro\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 29, 2021 at 13:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lewis Kelsey",
                    "text": "<span class=\"comment-copy\">I managed to break in at nt!DebugService2+0x5 &lt;- nt!DbgLoadImageSymbols+0x4d &lt;- nt!KdInitSystem+0x429 &lt;- nt!KiSystemStartup+0x12 where only <code>nt</code> was loaded when I set bootdebug on and restarted but I can't reproduce it again, so it only worked the first time and not subsequently. Ctrl+Alt+K only breaks into the debugger at the initial breakpoint and when you select first module load, no breakpoint is hit. I still don't know how I was able to break in if kdcom isn't loaded I don't know how it's communicating with the debugger</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">I answered a similar query here take a look the debugging system is a seperate entity and is active even at winload when nt isnt even loaded <a href=\"https://stackoverflow.com/a/66976337/3622813\">stackoverflow.com/a/66976337/3622813</a></span>",
                    "time": null
                }
            ]
        }
    ]
}