{
    "title": "Unity game: Assembly dll embedded inside the exe",
    "link": "https://reverseengineering.stackexchange.com/questions/21534/unity-game-assembly-dll-embedded-inside-the-exe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer a game made with the Unity engine, and usually all of the games's scripts are in the files\n  <code>\n   \\<Game>_Data\\Managed\\Assembly-CSharp.dll\n  </code>\n  and\n  <code>\n   \\<Game>_Data\\Managed\\Assembly-CSharp-firstpass.dll\n  </code>\n  . However this game doesn't have the assembly dll in the managed directory.\n </p>\n <p>\n  I tried decompiling the exe with dnSpy but it doesn't  look like there is any .NET assembly inside:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/mbWfW.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"\" src=\"https://i.sstatic.net/mbWfW.png\"/>\n  </a>\n </p>\n <p>\n  I also used Process Monitor to check if the game loads any other .dll but it doesn't.\nHowever, using Cheat Engine's mono dissector function I can see the two assembly dll's and all the classes and methods inside:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/eo3Q2.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"\" src=\"https://i.sstatic.net/eo3Q2.png\"/>\n  </a>\n </p>\n <p>\n  So my hypothesis is that the dll is embedded inside the exe somehow and loaded to the memory when the game starts.\n </p>\n <p>\n  I debugged the game's executable with x64dbg, searched for string references for \"Assembly-Csharp\" and put a breakpoint where I think the dll is loaded, and found this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/QOmXt.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"\" src=\"https://i.sstatic.net/QOmXt.png\"/>\n  </a>\n </p>\n <p>\n  I decompiled this part of the program with ghidra and got this:\n(I also decompiled it with x64dbg and got a similar result minus the variables names)\n </p>\n <pre><code>undefined * FUN_1401a0070(undefined *puParm1,void **ppvParm2,undefined8 uParm3,undefined8 uParm4)\n\n{\n  char cVar1;\n  char cVar2;\n  char *pcVar3;\n  longlong lVar4;\n  void **ppvVar5;\n  undefined **ppuVar6;\n  int iVar7;\n  bool bVar8\n;  int iVar9;\n  undefined in_stack_ffffffffffffffb8;\n  undefined uVar10;\n  undefined7 in_stack_ffffffffffffffb9;\n  int in_stack_ffffffffffffffc0;\n  undefined8 local_38;\n  ulonglong local_30;\n\n  iVar7 = 0;\n  ppuVar6 = &PTR_s_Managed/Assembly-CSharp.dll_140f42ad8;\n  do {\n    pcVar3 = (char *)FUN_140007820();\n    iVar9 = (int)uParm4;\n    bVar8 = SUB81(uParm3,0);\n    lVar4 = -(longlong)pcVar3;\n    do {\n      cVar2 = *pcVar3;\n      cVar1 = pcVar3[(longlong)(*ppuVar6 + lVar4)];\n      if (cVar2 != cVar1) break;\n      pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n    if (cVar2 == cVar1) {\n      lVar4 = -1;\n      local_30 = 0xf;\n      local_38 = 0;\n      uVar10 = 0;\n      pcVar3 = (&PTR_s_StreamingAssets/OtherAssets/Back_140f42ae8)[(longlong)iVar7];\n      goto code_r0x0001401a012d;\n    }\n    ppuVar6 = ppuVar6 + 1;\n    iVar7 = iVar7 + 1;\n  } while ((longlong)ppuVar6 < 0x140f42ae8);\n  *(undefined8 *)(puParm1 + 0x18) = 0xf;\n  *(undefined8 *)(puParm1 + 0x10) = 0;\n  *puParm1 = 0;\n  FUN_14000b310(puParm1,ppvParm2);\n  goto LAB_1401a01a0;\n  while( true ) {\n    lVar4 = lVar4 + -1;\n    cVar2 = *pcVar3;\n    pcVar3 = pcVar3 + 1;\n    if (cVar2 == '\\0') break;\n    code_r0x0001401a012d:\n    if (lVar4 == 0) break;\n  }\n  FUN_14000a8f0(&stack0xffffffffffffffb8);\n  cVar2 = FUN_1402d8ab0(&stack0xffffffffffffffb8);\n  *(undefined8 *)(puParm1 + 0x18) = 0xf;\n  *(undefined8 *)(puParm1 + 0x10) = 0;\n  ppvVar5 = (void **)&stack0xffffffffffffffb8;\n  if (cVar2 == '\\0') {\n    ppvVar5 = ppvParm2;\n  }\n  iVar9 = -1;\n  bVar8 = false;\n  *puParm1 = 0;\n  FUN_140009870(puParm1,ppvVar5);\n  if (0xf < local_30) {\n    operator_delete((void *)CONCAT71(in_stack_ffffffffffffffb9,uVar10),(MemLabelId)0x3b,bVar8,iVar9,\n      (char *)CONCAT71(in_stack_ffffffffffffffb9,uVar10),in_stack_ffffffffffffffc0);\n  }\n  local_30 = 0xf;\n  local_38 = 0;\n  in_stack_ffffffffffffffb8 = 0;\n  LAB_1401a01a0:\n  if (&DAT_0000000f < ppvParm2[3]) {\n    operator_delete(*ppvParm2,(MemLabelId)0x3b,bVar8,iVar9,\n      (char *)CONCAT71(in_stack_ffffffffffffffb9,in_stack_ffffffffffffffb8),\n      in_stack_ffffffffffffffc0);\n  }\n  *(undefined **)(ppvParm2 + 3) = &DAT_0000000f;\n  ppvParm2[2] = (void *)0x0;\n  *(undefined *)ppvParm2 = 0;\n  return puParm1;\n}\n</code></pre>\n <p>\n  And now I'm stuck, I'm looking for a way to extract this dll from the exe (if it's inside at all) and then decompile to C#.\nAlternatively I would like to know if there is a way to decompile the IL code that cheat engine provides with the mono dissector tool, and translate it to readable C#.\n </p>\n <p>\n  I'm pretty much a novice in reverse engineering so I'm sure I missed a lot of stuff, any help is welcome.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "17k",
    "tags": [
        "dll",
        ".net",
        "game-hacking"
    ],
    "user": "imad",
    "time": "Jun 23, 2019 at 16:06",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try\n <a href=\"http://www.angusj.com/resourcehacker/\" rel=\"nofollow noreferrer\">\n  Resource Hacker\n </a>\n to extract the dll from exe?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "imad",
            "text": "<html><body><span class=\"comment-copy\">\n Yes I did, among other things. I've pretty much tried every known packer and I think it's going to need a lot more reverse engineering to be extracted.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Nexide, wild guess but your game is complied with il2cpp.\nYou could use Scylla to dump GameAssembly.DLL\nand you'll get a dumb folder and with that you use Il2cppDumper, drag both the Globalmeta.dat file and the GameAssembly.dll-Dumped file inside where all the il2cppdumper dlls are stored, then run Il2cppdumper then press GameAssembly.dll then Globalmeta data and you'll get a dummey dlls with Csharpassembly and everything else, but you won't actually get the actual code out of it, only offsets and methods, You'll have to reverse using Ida Pro to get the native code, I'm not sure if there are any other methods of decompling\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Micro",
            "time": "Jun 25, 2020 at 15:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I successfully dumped all the dlls using\n  <a href=\"https://github.com/CodeCracker-Tools/MegaDumper\" rel=\"nofollow noreferrer\">\n   MegaDumper\n  </a>\n  , I had to compile it myself since there are no binaries provided.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "imad",
            "time": "Jun 25, 2019 at 12:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Benjy",
                    "text": "<span class=\"comment-copy\">Could you share your method and the compiled binary please?</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">binary: <a href=\"https://www.mediafire.com/file/b2zr9cusc6sreom/Mega_Dumper.zip/file\" rel=\"nofollow noreferrer\">mediafire.com/file/b2zr9cusc6sreom/Mega_Dumper.zip/file</a> this is MegaDumper and Universal Fixer and DeObfuscator all SND tools.</span>",
                    "time": null
                },
                {
                    "user": "imad",
                    "text": "<span class=\"comment-copy\">I would not trust that download link (no offense), just open the megadumper project in visual studio and compile it</span>",
                    "time": null
                },
                {
                    "user": "Scott R. Frost",
                    "text": "<span class=\"comment-copy\">After you extracted the file with MegaDumper and made the changes you wanted, how did you recompile / reassemble the file so that the game would recognize and use it?</span>",
                    "time": null
                },
                {
                    "user": "imad",
                    "text": "<span class=\"comment-copy\">@ScottR.Frost I didn't, I just wanted to extract the source code</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use\n  <a href=\"https://github.com/0xd4d/de4dot\" rel=\"nofollow noreferrer\">\n   de4dot\n  </a>\n  , its best to restore a packed assembly, if failed to unpack files try\n  <a href=\"https://x64dbg.com\" rel=\"nofollow noreferrer\">\n   x64dbg\n  </a>\n  and\n  <a href=\"https://github.com/x64dbg/ScyllaHide\" rel=\"nofollow noreferrer\">\n   ScyllaHide\n  </a>\n  plugin to dump and restore the dll.\n </p>\n <p>\n  Edit:\nWin32 dumper doesn't show .Net assembly and need a .Net dumper like\n  <a href=\"https://github.com/CodeCracker-Tools/MegaDumper\" rel=\"nofollow noreferrer\">\n   MegaDumper\n  </a>\n  OR\n  <a href=\"https://github.com/wwh1004/ExtremeDumper\" rel=\"nofollow noreferrer\">\n   ExtremeDumper\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "artoor32",
            "time": "Mar 24, 2020 at 22:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "imad",
                    "text": "<span class=\"comment-copy\">de4dot shows this error \"WARNING: The file isn't a .NET PE file\" and Scylla doesn't show Assembly-CSharp.dll in the dlls list</span>",
                    "time": null
                },
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Yeah de4dot is actually a deobfuscator for .NET FILES... It won't extract a .NET file out of a non-.NET file... You'd need a dumper.. Oh look, your answer below, you used MegaDumper :)</span>",
                    "time": null
                }
            ]
        }
    ]
}