{
    "title": "Instrument memory accesses of python scripts",
    "link": "https://reverseengineering.stackexchange.com/questions/27501/instrument-memory-accesses-of-python-scripts",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My research requires processing memory traces of applications. For C/C++ programs, this is easy using Intel's PIN library. However, as suggested here\n  <a href=\"https://stackoverflow.com/questions/51835532/use-intel-pin-to-instrument-python-scripts\">\n   https://stackoverflow.com/questions/51835532/use-intel-pin-to-instrument-python-scripts\n  </a>\n  , I may need to instrument the Python runtime itself, which I'm not sure will represent the true memory behavior of a given python script due to some overheads(If this is not the case, please comment). Some of the existing python memory profilers only talk about the runtime memory \"usage\" in terms of the heap space usage, etc.\n </p>\n <p>\n  I ended up making an executable from my python script using PyInstaller and running my PINTool over it. However, I'm not sure if this is the right approach.\n </p>\n <p>\n  Is there any way(any library or any hack into the python runtime) that may help in getting the memory traces accessed by the python scripts?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "256",
    "tags": [
        "binary-analysis",
        "instrumentation",
        "pintool"
    ],
    "user": "Harsh Kumar",
    "time": "Apr 18, 2021 at 15:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using\n  <code>\n   pin -t <pintool> -- python <python_script.py>\n  </code>\n  is nearly equivalent to compiling your code using\n  <code>\n   Pyinstaller\n  </code>\n  and then running it using pin.\n  <code>\n   Pyinstaller\n  </code>\n  bundles python runtime and your script together, so that user don't have to install python on their end.\n </p>\n <p>\n  Check\n  <a href=\"https://github.com/joerick/pyinstrument\" rel=\"nofollow noreferrer\">\n   <code>\n    pyinstrument\n   </code>\n  </a>\n  - it is a python profiling project, it provides you stack track by interrupting program every 1ms.\n </p>\n <p>\n  <a href=\"https://github.com/devopspp/pyliveupdate\" rel=\"nofollow noreferrer\">\n   <code>\n    pyliveupdate\n   </code>\n  </a>\n  allows you to modify your code during runtime.\n </p>\n <p>\n  <a href=\"https://github.com/harshitandro/Python-Instrumentation\" rel=\"nofollow noreferrer\">\n   <code>\n    Python-Instrumentation\n   </code>\n  </a>\n  allows you to dynamically instrument python bytecode, which is simlar to pin, but on bytecode level.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "R4444",
            "time": "Apr 19, 2021 at 14:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Harsh Kumar",
                    "text": "<span class=\"comment-copy\">Hey, It seems you forgot to insert link for <code>Python-Instrumentation</code>. The description seems promising. Searching on google gave this project <a href=\"https://pypi.org/project/instrument/\" rel=\"nofollow noreferrer\">pypi.org/project/instrument</a>. Wanted to make sure if this is the one you're referring to?</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">Just updated the link, but there are plenty of others which use runtime hooking techniques</span>",
                    "time": null
                },
                {
                    "user": "Harsh Kumar",
                    "text": "<span class=\"comment-copy\">Doesn't seem like doing memory access instrumentation. Neither does any branch instrumentation.</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">I don't exactly know what your use case is. These are some of the examples which may assist you in what you would like to do. you can read more about them in their documentation. otherwise you can use pin or something like dynamorio.</span>",
                    "time": null
                },
                {
                    "user": "Harsh Kumar",
                    "text": "<span class=\"comment-copy\">I want to look at the memory access behaviour (the extent to which memory divergence can be estimated from the program behaviour). See, I already used the pin. But you do know that PIN requires a binary file. Hence the question. For DynamoRIO, I wonder how different would it be than instrumenting the runtime overheads?</span>",
                    "time": null
                }
            ]
        }
    ]
}