{
    "title": "What is import reconstruction and why is it necessary?",
    "link": "https://reverseengineering.stackexchange.com/questions/2142/what-is-import-reconstruction-and-why-is-it-necessary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When reading about unpacking, I sometimes see an \"import reconstruction\" step. What is this and why is it necessary?\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 1,
    "views": "1k",
    "tags": [
        "unpacking",
        "import-reconstruction"
    ],
    "user": "user2142",
    "time": "Oct 23, 2016 at 20:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In a typical, non-packed Windows PE executable, the header contains metadata that describes to the operating system which symbols from other libraries that the executable depends upon.  The operating system's loader is responsible for loading those libraries into memory (if they are not already loaded), and for placing the addresses of those imported symbols into structures (whose locations are also specified by the metadata) within the executable's memory image.  Packers, on the other hand, often destroy this metadata, and instead perform the resolution stage (which would normally be performed by the loader) itself.  The goal of unpacking is to remove the protections from the binary, including the missing import information.  So the analyst (or unpacking tool) must determine the collection of imports that the packer loads for the executable, and re-create metadata within the unpacked executable's image that will cause the operating system to properly load the imports as usual.\n </p>\n <p>\n  Typically in these situations, the analyst will determine where within the executable's memory image the import information resides.  In particular, the analyst will usually locate the\n  <code>\n   IMAGE_THUNK_DATA\n  </code>\n  arrays, which are\n  <code>\n   NULL\n  </code>\n  -terminated arrays that contain the addresses of imported symbols.  Then, the analyst will run a tool that basically performs the inverse of\n  <code>\n   GetProcAddress\n  </code>\n  :  given one of these pointers to imported symbols, it will determine in which DLL the pointer resides, and which specific exported entry is referred to by the pointer.  So for example, we might resolve\n  <code>\n   0x76AE3F3C\n  </code>\n  to\n  <code>\n   Kernel32!CreateFileW\n  </code>\n  .  Now we use this textual information to recreate\n  <code>\n   IMAGE_IMPORT_DESCRIPTOR\n  </code>\n  structures describing each imported DLL, use the original addresses of the\n  <code>\n   IMAGE_THUNK_DATA\n  </code>\n  arrays, store the names of the DLLs and imported symbols somewhere in the binary (perhaps in a new section), and point the\n  <code>\n   IMAGE_THUNK_DATA\n  </code>\n  entries to those new names.\n </p>\n <p>\n  <a href=\"http://www.woodmann.com/collaborative/tools/index.php/ImpREC%E2%80%8E\">\n   ImpRec\n  </a>\n  is a popular tool that automates most or all of this process, depending upon the packer.  What I just described is reflective of reality in about 95% of cases.  More serious protections such as video game copy protections and tricky custom malware use further tricks that stymie the reconstruction process.\n </p>\n</div>\n</body></html>",
            "votes": "20",
            "user": "0xC0000022L",
            "time": "May 31, 2013 at 0:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}