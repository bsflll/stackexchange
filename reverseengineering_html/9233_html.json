{
    "title": "Why does windows put standard functions base address in Data Segment?",
    "link": "https://reverseengineering.stackexchange.com/questions/9233/why-does-windows-put-standard-functions-base-address-in-data-segment",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From the recent dissasembly of \"HelloWorld.exe\" compiled by MSVC:\n </p>\n <pre><code>.text:00411279                 call    ds:__imp__printf\n</code></pre>\n <p>\n  So, why base address is data segment, not a code segment (which would be a more logical thing to do?)\n </p>\n <p>\n  Project uses Multithreaded Debug Dll as runtime library.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "709",
    "tags": [
        "disassembly",
        "windows"
    ],
    "user": "PaulD",
    "time": "Jun 26, 2015 at 16:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Windows didn't do that; the MSVC compiler did that.\n  </li>\n  <li>\n   The content at\n   <code>\n    __imp__printf\n   </code>\n   is not the function's code; it's a pointer the function's code. Since it's a pointer (which is data, not code), it makes sense for the pointer value to be in a data segment, not in a code segment. More specifically, this pointer value is set at run-time by the loader, so the memory page needs to be writeable, which is even more of a reason for this to be in a data segment instead of in a code segment.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Jason Geffner",
            "time": "Jun 26, 2015 at 16:44",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   ds:\n  </code>\n  was added by IDA, not by the compiler.  If you look at the raw opcode bytes, you will see that there is no DS override prefix in the instruction.  It's silly that it does this.\n </p>\n <p>\n  IDA adds that\n  <code>\n   ds:\n  </code>\n  prefix because otherwise you wouldn't know that this is an indirect call--that is, that it's reading a 32-bit variable at an address named\n  <code>\n   __imp__printf\n  </code>\n  then calling the address stored in that variable.  Without the\n  <code>\n   ds:\n  </code>\n  , it would be just be calling\n  <code>\n   __imp__printf\n  </code>\n  directly.\n </p>\n <p>\n  If IDA used a better assembly language syntax--namely, the nasm syntax--that instruction would look like simply this, using brackets to show that it is a memory read (and\n  <code>\n   dword\n  </code>\n  to distinguish from a few other weird types of\n  <code>\n   call\n  </code>\n  ):\n </p>\n <pre><code>.text:00411279             call dword [__imp__printf]\n</code></pre>\n <p>\n  Windows, like pretty much every other 32-bit OS, has a flat address space.  CS, DS, ES and SS all have the same base address, 0, so it doesn't matter which segment you use as your base.  (Except that you can't do a memory write if CS is your segment.)  FS and GS have different bases, since the major OS's all use them for thread-local storage, but those will always have explicit prefix bytes in the instruction.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Myria",
            "time": "Jun 27, 2015 at 0:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}