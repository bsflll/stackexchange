{
    "title": "Reverse engineering camera blobs in Android [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/13498/reverse-engineering-camera-blobs-in-android",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/13498/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2016-09-21 08:57:38Z\">\n        8 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/13498/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  So I heard that bacon (OnePlus One) got the camera working on custom ROMs by reverse engineering the camera blobs. I tried reading online, but I didn't have a proper link for this matter.\n </p>\n <p>\n  So the problem is the following, I'm owning the Sony Xperia Z3 Compact (codename \"aries\"), which stopped receiving Android updates (starting from Nougat), but in terms of custom ROMs based on CM or AOSP, the camera is not working. The device trees and the other files can be found on the freexperia github (\n  <a href=\"https://github.com/sonyxperiadev?tab=repositories\" rel=\"nofollow\">\n   https://github.com/sonyxperiadev?tab=repositories\n  </a>\n  ).\n </p>\n <p>\n  Reading the posts on XDA Developers I came across someone who claimed that by doing reverse engineering on the camera blobs, the camera might start working.\n </p>\n <p>\n  So my question is: are there any methods or tutorials regarding reverse engineering? Or any solutions for the problem that I asked earlier.\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "android",
        "development"
    ],
    "user": "Dorian Diaconu",
    "time": "8 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n There are no tutorials for this specific task (whatever it is). Ask the person who suggested it what exactly they mean and how to do it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dorian Diaconu",
            "text": "<html><body><span class=\"comment-copy\">\n The person that said about this is not answering their messages...so...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is unlikely you will find any tutorials, and  even if you found one to get started with something simple it may take a couple of years to learn the basics.\n </p>\n <p>\n  That said, reverse-engineering the blobs is probably unnecessary; if the driver is in Sony's kernel tree, that's all you will need, just compile a new kernel and it will work, and if it's not, then you can try to extract the old kernel's driver and patch the kernel version in it so that it loads in the new kernel, that's likely to work in most camera drivers as the surface area for incompatibilities isn't that big (partly because they don't use Video4Linux).\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ismael Luceno",
            "time": "Sep 18, 2016 at 18:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Dorian Diaconu",
                    "text": "<span class=\"comment-copy\">We never had a working kernel that didn't have reverse fish eye camera effect on custom ROMs, either CyanogenMod or AOSP. The camera on stock kernel is protected by DRM keys.</span>",
                    "time": null
                },
                {
                    "user": "Ismael Luceno",
                    "text": "<span class=\"comment-copy\">One thing is to get the camera working on something that's linked against GPL code and another is to violate someone copyright just because it's easy...</span>",
                    "time": null
                },
                {
                    "user": "Ismael Luceno",
                    "text": "<span class=\"comment-copy\">What I mean is that generally the image correction isn't part of the driver, and you don't need it anyway.</span>",
                    "time": null
                },
                {
                    "user": "Ismael Luceno",
                    "text": "<span class=\"comment-copy\">If the camera works, you can fix the image yourself, you can characterize the deformation e.g. with a pattern printed on paper, then build a transformation to fix it, then work on the color distortion.</span>",
                    "time": null
                }
            ]
        }
    ]
}