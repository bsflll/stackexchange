{
    "title": "What does the code keyword in Ghidra mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/25297/what-does-the-code-keyword-in-ghidra-mean",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing a binary and I found this strange keyword I haven't seen before  called 'code'. I looked up the C++ keywords and there doesn't seem to be one. Could anyone provide me with more information about this keyword?\n </p>\n <pre><code>      if (*(int *)(param_1 + 4) != 0) {\n        (*(code *)(&PTR_thunk_FUN_005a7840_008dd8b8)[(int)param_2[4]])(*(int *)(param_1 + 4));\n      }\n</code></pre>\n <p>\n  In Assembly.\n </p>\n <pre><code>00491b95 85  c0           TEST       EAX ,EAX\n00491b97 74  10           JZ         LAB_00491ba9\n00491b99 8b  4e  10       MOV        ECX ,dword ptr [ESI  + 0x10 ]\n00491b9c 8b  14  8d       MOV        EDX ,dword ptr [ECX *0x4  + -> thunk_FUN_005a7840 ] = 00401c30\n         b8  d8  8d \n         00\n00491ba3 50              PUSH       EAX\n00491ba4 ff  d2           CALL       EDX\n</code></pre>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ghidra",
        "decompiler"
    ],
    "user": "DohnJoe",
    "time": "Jun 14, 2020 at 22:42",
    "comments": [
        {
            "user": "Michael Karcher",
            "text": "<html><body><span class=\"comment-copy\">\n Not an answer, because I did no diligent research, but I assume that \"code*\" is supposed to mean \"a function pointer of unspecified type\", just like \"void*\" means \"a data pointer of unspecified type\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DohnJoe",
            "text": "<html><body><span class=\"comment-copy\">\n I see what you're getting at and it does seem like it, but I want more info on it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Yotamz",
            "text": "<html><body><span class=\"comment-copy\">\n (I'm not totally sure about this to post it as an answer). The decompiler concluded that there is a\n <code>\n  CALL\n </code>\n to the address pointed to by your code. It doesn't know its prototype but it does know that this is called as a function. You can't normally\n <code>\n  CALL\n </code>\n a\n <code>\n  void *\n </code>\n , so\n <code>\n  code *\n </code>\n is the way to show it. Consider it a cast to unknown-prototyped function.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There was a function rabbit-hole that I was following in Ghidra that had the\n  <code>\n   (**(code **))\n  </code>\n  as well.\n </p>\n <p>\n  I cross-examined that section in x64dbg and stepped-over the execution and monitored the EAX register to see the result of\n  <code>\n   return uVar3;\n  </code>\n  or\n  <code>\n   return *(undefined4 *)(iVar2 + 0x2c);\n  </code>\n </p>\n <p>\n  The result of this (**(code **)) function was a function pointer (0x040E2B98) which contained a function pointer (0x03DE2D10) which contained a function pointer (0x03B2802B) which FINALLY was an actual function that began with\n  <code>\n   push esi\n  </code>\n  .\n </p>\n <p>\n  Thus, the answer to this question is...\n </p>\n <p>\n  <em>\n   <strong>\n    <code>\n     (code *)\n    </code>\n    is the same as\n    <code>\n     (void *)\n    </code>\n    \n\n    aka - function pointer\n    \n\n    aka - the address location of the beginning of a function\n    \n\n    aka - read this\n    <a href=\"https://docs.microsoft.com/en-us/cpp/cpp/void-cpp?view=msvc-170\" rel=\"nofollow noreferrer\">\n     MSDN VOID PTR DOCUMENTATION\n    </a>\n   </strong>\n  </em>\n </p>\n <pre><code>...\n  if ((iVar2 != 0) && (*(int *)(iVar2 + 0x40) != 0)) {\n    uVar3 = (**(code **)(*(int *)(*(int *)(iVar2 + 0x40) + 0x28) + 0xc70))();\n    return uVar3;\n  }\n  iVar2 = FUN_03b03811();\n  if (iVar2 == 0) {\n    return 0;\n  }\n  return *(undefined4 *)(iVar2 + 0x2c);\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Stryker2k2",
            "time": "Jul 11, 2022 at 14:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}