{
    "title": "Implementing syscalls under Miasm",
    "link": "https://reverseengineering.stackexchange.com/questions/30381/implementing-syscalls-under-miasm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to use Miasm's DSE on a binary. This binary makes use of 2 syscalls: exit and ptrace. Miasm provides an\n  <a href=\"https://github.com/cea-sec/miasm/blob/master/miasm/os_dep/linux/syscall.py#L915\" rel=\"nofollow noreferrer\">\n   implementation of some syscalls\n  </a>\n  , but unfortunately, not of those two.\n </p>\n <p>\n  So I tried to write them myself, using the above link as reference, like this:\n </p>\n <pre><code>def EXIT_syscall(jitter, linux_env):\n    status, = jitter.syscall_args_systemv(1)\n    print(f\"Exit syscall, status {status}.\")\n\n    jitter.running = False\n\n\nis_ptrace_first_call = True\ndef PTRACE_syscall(jitter, linux_env):\n    request, pid, addr, data = jitter.syscall_args_systemv(4)\n    print(request, pid, addr, data)\n\n    global is_ptrace_first_call\n    ptrace_return_value = -1\n\n    if is_ptrace_first_call:\n        ptrace_return_value = 0\n        is_ptrace_first_call = False\n\n    jitter.syscall_ret_systemv(ptrace_return_value)\n\n\nsyscall_callbacks_x86_64[0x3c] = EXIT_syscall\nsyscall_callbacks_x86_64[0x65] = PTRACE_syscall\n# Syscalls are disabled by default\nenable_syscall_handling(sb.jitter, LinuxEnvironment_x86_64(), syscall_callbacks_x86_64)\n</code></pre>\n <p>\n  This exit syscall seems to work fine, but it is not the case for the ptrace one, and I don't know why since it pretty much looks like the other syscalls implemented in the link above.\n </p>\n <p>\n  The code above gives me a\n  <code>\n   miasm.analysis.dse.DriftException: Drift of exception_flags: 16 instead of 0\n  </code>\n  , which seems to correspond to a difference in the states of the concrete and symbolic execution.\n </p>\n <p>\n  How should I proceed ?\n </p>\n <p>\n  EDIT: I can also try something like:\n </p>\n <pre><code>def syscall_handler(jitter):\n    print(f\">>> Received Syscall {jitter.cpu.EAX}\")\n\n    if jitter.cpu.RAX == 0x3c:\n        EXIT_syscall(jitter, None)\n        return False\n    elif jitter.cpu.RAX == 0x65:\n        PTRACE_syscall(jitter, None)\n        return True\n    else:\n        print(f\"Unimplemented syscall ({jitter.cpu.RAX}), exiting. (RIP = {hex(jitter.cpu.RIP)})\")\n        exit()\n\nsb.jitter.add_exception_handler(EXCEPT_SYSCALL, syscall_handler)\n</code></pre>\n <p>\n  It seems to execute properly the ptrace syscall, however the execution doesn't seem to resume properly and the syscall 0 is called (because the ptrace one returned 0).\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "109",
    "tags": [
        "python",
        "x86-64",
        "emulation",
        "system-call"
    ],
    "user": "Katoptriss",
    "time": "May 10, 2022 at 13:10",
    "comments": [],
    "answers_data": []
}