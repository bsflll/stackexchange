{
    "title": "Does x86 instruction SHL/SHR actually rotate the bits?",
    "link": "https://reverseengineering.stackexchange.com/questions/15167/does-x86-instruction-shl-shr-actually-rotate-the-bits",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was debugging a program. When the register di=0x01, cl=0x11,\nThe instruction \"shl  di,cl\" will actually make di=0x1.\n </p>\n <p>\n  Shouldn't the bits that slide off the end disappear?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 3,
    "views": "2k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "user15580",
    "time": "Jul 17, 2017 at 18:24",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n how are your debugging it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n They do not rotate. For rotation you have\n <code>\n  rol\n </code>\n and\n <code>\n  ror\n </code>\n . The instruction\n <code>\n  shr\n </code>\n does however keep the sign bit if it's set.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_31.html\" rel=\"nofollow noreferrer\">\n  CLI is an instruction (\"Clear Interrupt\"), not a register\n </a>\n . What is \"cli=0x11\" supposed to mean?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n I also think your observation is incorrect.  I don't know of any circumstances in which \"shl di,cl\" causes di to be unchanged when cl has any of the low 4 bits set.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (Disregarding the example in the question as it clearly has typos.)\n </p>\n <p>\n  The higher bits of the shift amount are ignored, unless you're running your program on an original 8086:\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_285.html\" rel=\"nofollow noreferrer\">\n   See \"IA-32 Architecture Compatibility\" at the bottom of the page.\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Leo B.",
            "time": "Apr 18, 2017 at 16:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Full disclosure: I am the author of the following article.\n </p>\n <p>\n  <a href=\"http://dsasmblr.com/accessing-and-modifying-upper-half-of-registers/\" rel=\"nofollow noreferrer\" title=\"Accessing and Modifying Upper Bits in x86 and x64 Registers\">\n   Accessing and Modifying Upper Bits in x86 and x64 Registers\n  </a>\n </p>\n <p>\n  The aim of the article is to provide the reader with a detailed, example- and code-laden explanation of exactly how the shift and rotate instructions work in both x86 and x64 contexts. The examples therein are directly applicable to OP's inquiry.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jul 18, 2017 at 17:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  SHL and SHR work using the following syntax dest, count\n </p>\n <p>\n  now di is a 16 bit register and CL is basically the count (3)\n </p>\n <p>\n  so you are right it should be zeroed out and you can prove this by using a online x86 emulator\n </p>\n <p>\n  <a href=\"http://carlosrafaelgn.com.br/asm86/\" rel=\"nofollow noreferrer\">\n   http://carlosrafaelgn.com.br/asm86/\n  </a>\n </p>\n <p>\n  and enter the following asm instructions:\nmov di, 01h\nmov cl, 11h\nshl di, cl\n </p>\n <p>\n  so i dont know what would make it behave this way.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "TJ Nel",
            "time": "Jul 18, 2017 at 14:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}