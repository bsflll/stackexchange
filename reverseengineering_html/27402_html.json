{
    "title": "Why can C# applications be reverse-compiled with variable names while C++ ones can't?",
    "link": "https://reverseengineering.stackexchange.com/questions/27402/why-can-c-applications-be-reverse-compiled-with-variable-names-while-c-ones-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Why can programs written in C# be reverse-compiled essentially to their original form with variables names (such as dnSpy) while C++ decompilers (such as Ghidra) are unable to decode the variable names?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c++",
        "dll",
        "c#"
    ],
    "user": "Polydynamical",
    "time": "Apr 6, 2021 at 18:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Debug Symbol information is often \"stripped off\" from\n  <code>\n   C++\n  </code>\n  binaries. Symbol information stores all user-created names, symbols, and types, bounds, fouction boundary and other function related metadata information (it is generally stored according to a popular and standardized \"dwarf\" format which is widely used and employed in modern compilers). If you want to keep this information then compile your binary with - say\n  <code>\n   -g\n  </code>\n  flag in gcc or clang. For e.g.\n  <code>\n   gcc -g myprog.c\n  </code>\n  . You will find all user-defined symbols rendered by Ghidra.\n </p>\n <p>\n  On the other hand, in\n  <code>\n   C#\n  </code>\n  .NET removal of name symbol metadata is not possible (as reflection requires retrieval of symbol for types at runtime). Thus to work around this,\n  <code>\n   C#\n  </code>\n  symbols are generally\n  <a href=\"https://www.appsealing.com/code-obfuscation-comprehensive-guide/\" rel=\"noreferrer\">\n   obfuscated\n  </a>\n  .\n </p>\n <p>\n  References:\n  <a href=\"https://www.appsealing.com/code-obfuscation-comprehensive-guide/\" rel=\"noreferrer\">\n   https://www.appsealing.com/code-obfuscation-comprehensive-guide/\n  </a>\n  <a href=\"http://www.semdesigns.com/Products/Obfuscators/CSharpObfuscationExample.html\" rel=\"noreferrer\">\n   http://www.semdesigns.com/Products/Obfuscators/CSharpObfuscationExample.html\n  </a>\n  <a href=\"https://help.gapotchenko.com/eazfuscator.net/53/advanced-features/symbol-names-encryption\" rel=\"noreferrer\">\n   https://help.gapotchenko.com/eazfuscator.net/53/advanced-features/symbol-names-encryption\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "R4444",
            "time": "Apr 6, 2021 at 4:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Peter - Reinstate Monica",
                    "text": "<span class=\"comment-copy\">To be more straight: .net assemblies contain roughly the same information that a normal object file has when it was compiled to include all debug information. (Which, in turn, means that regular C/C++ linkers could be much smarter -- about as smart as the .net runtime -- if presented with binaries that contain debug information. But they aren't.)</span>",
                    "time": null
                },
                {
                    "user": "Margaret Bloom",
                    "text": "<span class=\"comment-copy\">I feel this answer is missing the point. In C++, variables (fields, globals, locals, statics and so on) are identified by their address. In C#, like in Java, fields are identified by their fully qualified name. In fact, you can create an assembly without having its dependencies at hand, but you can only compile (but not link) a C++ program without its dependencies. That's why names cannot be removed (but can be renamed) and why local vars in a methods are not reversed to their original names,</span>",
                    "time": null
                },
                {
                    "user": "MSalters",
                    "text": "<span class=\"comment-copy\">On Windows, \"stripping off\" is usually not necessary as the relevant C++ debug information is often stored in an extra file (Program DataBase, <code>.PDB</code>). This file is not shipped to the customers.</span>",
                    "time": null
                },
                {
                    "user": "Flydog57",
                    "text": "<span class=\"comment-copy\">A quick comment re: <i>\"C# symbols are generally obfuscated.\"</i>.  I've been working with C# since way before it shipped (and I was working for Microsoft, doing high end dev support for the first 10 years of .NET).  Other than demos, I've never seen anyone obfuscate their code (I'm not saying no one does, but I dispute <i>generally</i>).</span>",
                    "time": null
                },
                {
                    "user": "Flydog57",
                    "text": "<span class=\"comment-copy\">More comments.  I'm not sure what @MargaretBloom means by <i>\"In C#, ..., fields are identified by their fully qualified name\"</i>.  The IL code uses addresses (and slot numbers) internally.  The symbolic information is part of the metadata that is stored within the assembly, separate from the code. The .NET compilers also produce <code>PDB</code> files that are used by debuggers like Visual Studio (augmenting the symbol info in the metadata). For what it's worth, keeping PDBs around <i>can</i> be a best practice (in C# and particularly C++).  It allows for a more usable post-mortem debug experience</span>",
                    "time": null
                }
            ]
        }
    ]
}