{
    "title": "What are the .cpp files in IDA disassembly [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/17558/what-are-the-cpp-files-in-ida-disassembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has an answer here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/2904/are-those-code-snippets-and-file-paths-in-a-c-binary-some-sort-of-standard-deb\">\n      Are those code snippets and file paths in a C++ binary some sort of standard debug information?\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (1 answer)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2018-03-03 23:48:05Z\">\n      7 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  I opened wsl.exe in IDA Pro v7 and follow some strings. I saw some strings with .cpp extension. Can anyone explain what are those .cpp file in that disassembly? Where can I find it? Are those hidden somewhere?\n </p>\n <p>\n  Here is an example:\n  <code>\n   base\\subsys\\wsl\\lxss\\lxcmdlineshared\\svccomm.cpp\n  </code>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/6OdvJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA_cpp_file\" src=\"https://i.sstatic.net/6OdvJ.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "826",
    "tags": [
        "ida",
        "disassembly",
        "windows-10"
    ],
    "user": "Biswapriyo",
    "time": "7 years ago",
    "comments": [
        {
            "user": "mblw",
            "text": "<html><body><span class=\"comment-copy\">\n Better look in pseudocode, but I suppose\n <code>\n  sub_140004430\n </code>\n is\n <code>\n  assert\n </code>\n or\n <code>\n  log\n </code>\n function not just\n <code>\n  print\n </code>\n . Also notice 0x4A (174 in dec) most likely it is line number.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I commented and then I've read malikcjm answer\n </p>\n <p>\n  So this is basically an extension of malikcjm's answer.\n </p>\n <p>\n  Suppose you have a code like this and load the compiled exe into ida\n </p>\n <pre><code>#include <stdio.h>\nvoid main (void){\n    printf(\"%s\n\" ,__FILE__);\n}\n</code></pre>\n <p>\n  You will get the cpp file reference\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/CxfpV.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/CxfpV.png\"/>\n  </a>\n </p>\n <p>\n  these\n  <code>\n   __FILE__\n  </code>\n  ,\n  <code>\n   __LINE__\n  </code>\n  etc are predefined macros that are defined in the C++ Standard as well as some Microsoft-specific predefined macros\n </p>\n <p>\n  take a look\n  <strong>\n   <a href=\"https://msdn.microsoft.com/en-us/library/b0084kay.aspx\" rel=\"noreferrer\">\n    PRE_DEFINED_MACROS\n   </a>\n  </strong>\n  for a discussion and usage of these predefined macros\n </p>\n <p>\n  these predefined macros are not restricted to debug mode alone; they can be used in release mode also\n </p>\n <p>\n  here is example code that uses them in release mode\n </p>\n <pre><code>#include <windows.h>\n#pragma comment (lib , \"test.lib\")\n#pragma comment (lib , \"kernel32.lib\")\n#pragma comment (lib , \"user32.lib\")\n_declspec (dllexport) int  AddNum(int a, int b);\nchar buff[0x100] = { 0 };\nPCHAR timepass(int a, PCHAR b) {\n    wsprintfA(buff,\"%d %s\n%s\\t%s\\t%s\n\", a,b,__FUNCTION__,__FUNCDNAME__,__FUNCSIG__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff,\"we are done passing time\n\");\n    return buff;    \n}\nint main(void) {\n    wsprintfA(buff, \"3 + 5 = %x\n\", AddNum(3, 5));\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%s\n\", __FILE__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%s\n\", __DATE__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%d\n\", __LINE__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%s\n\", __func__);\n    OutputDebugStringA(buff);\n    OutputDebugStringA(timepass(1337 , \"we are now going to pass time\"));\n    return 0;\n}\n</code></pre>\n <p>\n  compiled and linked with\n </p>\n <pre><code> cl /nologo use%1.cpp /link /ENTRY:main /SUBSYSTEM:windows /RELEASE\n</code></pre>\n <p>\n  executed in debugger would show\n </p>\n <pre><code>>cdb -c \"g;q\" usetest.exe | tail -n 13\nDLL_PROCESS_ATTACH Called\n\n3 + 5 = 8\nusetest.cpp\nMar  1 2018\n20\nmain\n1337 we are now going to pass time\ntimepass        ?timepass@@YAPADHPAD@Z  char *__cdecl timepass(int,char *)\nwe are done passing time\nDLL_PROCESS_DETACH Called\nquit:\n</code></pre>\n <p>\n  If a PDB is available we can get the so called leaks from them too an example of file paths from an ntdll pdb\n </p>\n <pre><code>e:\\cvdump>cvdump -sf e:\\SYMBOLS\ntdll.pdb\\120028FA453F4CD5A6A404EC37396A582\ntdll.pdb >> leaks.txt\n\ne:\\cvdump>wc -l leaks.txt\n860 leaks.txt\n\ne:\\cvdump>grep \"daytona\" leaks.txt  | grep ldrs\n** Module: \"o:\\w7rtm.obj.x86fre\\minkernel\ntdll\\daytona\\objfre\\i386\\ldrstart.obj\"\n** Module: \"o:\\w7rtm.obj.x86fre\\minkernel\ntdll\\daytona\\objfre\\i386\\ldrsnap.obj\"\n</code></pre>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Mar 1, 2018 at 10:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">this might be some kind of debug messages I guess..</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik those are predefined macros they are expanded to thier current values by preprocessor prior to compiling the code i added a link in the answer take a look</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">I know the <b>FILE</b> is a predefined, but I was commenting the fact of the fact of using it in a production code. I would expect to see it in Debug mode</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik  no they are not restricted to debug mode you can happily use them in release mode also  i added a code sample too</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">yes, I also know that :) but I was more wondering why would they be left there for release mode :) it's leaking a bit of info</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are no *.cpp files in disassembly. It looks like automatically generated string file file path. It's sometimes used for logging.\nIt can be generated if somewhere in the source code\n  <code>\n   __FILE__\n  </code>\n  preprocessor directive was used.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 1, 2018 at 10:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is just a string in the binary file that, for some reason represents the file name and in this case a cpp file. Maybe this binary for some reason needs to access it on the system, or checks if they exists and does some work if so (or if not).\n </p>\n <p>\n  They are not hidden and unfortunately not available.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Feb 28, 2018 at 21:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Is it a dead end? Should I care those string values?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">it depends on the binary. Google search gives some links to Ubuntu subsystem for Windows - is that what you are looking at?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">yes wsl.exe is linux subsystem for windows and those file names are src files that were used to compile (it remains there for using __ FILE __  debugprints</span>",
                    "time": null
                }
            ]
        }
    ]
}