{
    "title": "Identifying structures in C++",
    "link": "https://reverseengineering.stackexchange.com/questions/15457/identifying-structures-in-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a large c++ program and I have found a pointer to an object of interest. I want to be able to identidy that object by atleast the constructor. What are some methods I can use to identify the constructor when the object's constructor is \"nowhere in sight\", i.e., it's far back in the program flow?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "c++"
    ],
    "user": "user3210986",
    "time": "May 31, 2017 at 17:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have dabbled in this a little bit in the past, and one way to find the constructor is to try and find the Virtual Function Table for this object (VTable).\n  \n\n  \n\n  Note that not all classes have virtual functions, and so not all classes have virtual tables.\n  \n\n  \n\n  Generally the pointer to the VTable is the first value in the objects memory e.g.\nObject_base_address+0x00\n </p>\n <p>\n  More information on vtables is here\n  \n\n  <a href=\"https://stackoverflow.com/questions/3554909/what-is-vtable-in-c\">\n   https://stackoverflow.com/questions/3554909/what-is-vtable-in-c\n  </a>\n  \n\n  and here\n  \n\n  <a href=\"https://alschwalm.com/blog/static/2016/12/17/reversing-c-virtual-functions/\" rel=\"nofollow noreferrer\">\n   https://alschwalm.com/blog/static/2016/12/17/reversing-c-virtual-functions/\n  </a>\n </p>\n <p>\n  The other way is to explore what compilers do when they generate code for constructors by writing your own code and reverse engineering that.\n  \n\n  This better understanding can then be applied to your larger program in your search for the specific function. It is important to note that code generation varies from compiler to compiler.\n  \n\n  For this method you can use\n  <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">\n   https://godbolt.org/\n  </a>\n  which lets you compile straight to assembly code and explore it.\n  \n\n  \n\n  If you need more information feel free to ask.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Samson",
            "time": "Jun 15, 2017 at 3:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Samson",
                    "text": "<span class=\"comment-copy\">I am currently busy right now, but i will try to update with a bit more information later</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to expand a bit on the previous answer after I have learned some more about decompilation.\nThere are two principle types of objects in c++ (on MS Windows, that is). Those two are objects with vtables and objects without vtables.\n </p>\n <p>\n  In objects without vtables, identifying them is definitely more tricky, but on the plus side, these are usually either very big structures that are declared at compile time, or small structures that are constructed within the scope of the function. So you can either tell the object apart by it's constructor or it's address in the memory. Or at the very least, locally constructed objects without vtables aren't too many function calls behind.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user3210986",
            "time": "Nov 14, 2017 at 18:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}