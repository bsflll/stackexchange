{
    "title": "Improving Ghidra's Auto-Structure creator",
    "link": "https://reverseengineering.stackexchange.com/questions/27932/improving-ghidras-auto-structure-creator",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently attempting to read decompilation in Ghidra. I've identified what I believe to be a \"God object\" that the library is uses to store state for the entire program. It's passed everywhere and has ~216 fields to it. It's far too large to manually figure out the structure of the\n  <code>\n   struct\n  </code>\n  (with my current ability), so I had Ghidra \"Auto create structure\" to define it.\n </p>\n <p>\n  The problem now is, I'm seeing weird behavior where the struct is used. For the initialization of the mutexes that it holds for example, prior to retyping, this is how the code looks in the decompilation window (\n  <code>\n   __arg\n  </code>\n  is a pointer to the newly\n  <code>\n   calloc\n  </code>\n  ed God-object):\n </p>\n <pre><code>undefined4 *god\n. . .\npthread_mutex_init((pthread_mutex_t *)(god + 2),(pthread_mutexattr_t *)0x0);\npthread_mutex_init((pthread_mutex_t *)(god + 0x39),(pthread_mutexattr_t *)0x0);\npthread_mutex_init((pthread_mutex_t *)(god + 0x1c00f2),(pthread_mutexattr_t *)0x0);\n</code></pre>\n <p>\n  Which is ugly, but mostly makes sense. I'm assuming\n  <code>\n   god + 0x39\n  </code>\n  is a reference to a field (although,\n  <code>\n   god + 0x1c00f2\n  </code>\n  is a rather huge field offset) . The problem is, when I retype the field to be of type\n  <code>\n   God\n  </code>\n  (the auto-generated type), it changes to this:\n </p>\n <pre><code>God *god;\n\npthread_mutex_init(&god->mutex1,(pthread_mutexattr_t *)0x0);\npthread_mutex_init(&god[1].mutex1,(pthread_mutexattr_t *)0x0);\npthread_mutex_init((pthread_mutex_t *)&god[0x8258].field_0x28,(pthread_mutexattr_t *)0x0);\n</code></pre>\n <p>\n  My best guess as to this weird result is the struct was created improperly. If I go around to different functions where it's used and have Ghidra attempt to create a struct, the size of the struct changes every time (although, it's always around 210-230 fields).\n </p>\n <p>\n  Is there anything I can do to improve Ghidra's auto-creation of the struct? And am I correct that the array-access notation suggests an improper creation of a struct?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "1k",
    "tags": [
        "decompilation",
        "ghidra"
    ],
    "user": "Carcigenicate",
    "time": "Jul 1, 2021 at 21:21",
    "comments": [
        {
            "user": "hairlessbear",
            "text": "<html><body><span class=\"comment-copy\">\n When I've seen this, it's always meant that the generated structure is too small. I'd recommend checking its size and seeing if it matches the size of memory allocated to create the object. If it's too small, increasing the size to be correct should fix your offsets\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Carcigenicate",
            "text": "<html><body><span class=\"comment-copy\">\n @hairlessbear Thank you. That makes sense. The index is larger than the size of the structure, so it assumes it's indexing into an array? If that's the case though, an index of 0x8258 suggests a massive structure.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hairlessbear",
            "text": "<html><body><span class=\"comment-copy\">\n That would definitely be a massive structure, but in some settings, that's not uncommon. Structures that large generally have multiple large objects as members, although of course that's not a guarantee. Could also have one or more large arrays in it. And I think you're right about Ghidra thinking it's an array, but admittedly that's a guess; I've never investigated why the decompiler has this exact behavior, I just know how to fix it when I encounter it :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}