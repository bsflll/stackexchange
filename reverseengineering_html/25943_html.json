{
    "title": "Modify Strings in a ELF (Executable and Linking Format) that are stored in the .rodata",
    "link": "https://reverseengineering.stackexchange.com/questions/25943/modify-strings-in-a-elf-executable-and-linking-format-that-are-stored-in-the",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have 2 ELF files here, each containing strings in the \".rodata\" for an translation that I want to modify.\nThe first ELF \"(binary1)\" I have already successfully modified from Chinese to German.\nThe second ELF \"(binary2)\" has a slightly different structure.\nIn my first ELF file \"(binary1)\", which I successfully modified, the pointers for the respective strings were in the \".data.rel.ro\" part.\nSo with a short C# code I could output the strings.\n </p>\n <pre><code>    static int start_data_rel_ro = 0x1708; \n    static int end_data_rel_ro = 0x1A3CF; \n\n\n    static void binToConsole(string inputFile)\n    {\n        var data = getData(inputFile);\n        \n        for (int i = start_data_rel_ro; i < end_data_rel_ro;)\n        {\n                var line = \"\";\n\n                    var addr = BitConverter.ToInt32(new byte[] { data[i], data[i + 1], data[i + 2], data[i + 3],0,0,0,0 },0);\n                        i += 4;                        \n                    List<byte> textData = new List<byte>();\n                    do\n                    {\n                        textData.Add(data[addr] == 10 ? ((byte)0x7C) : data[addr]);\n                        addr++;\n                    } while (data[addr] != 0);\n                    line = System.Text.Encoding.UTF8.GetString(textData.ToArray());\n                Console.WriteLine(line);\n        }          \n    }\n  \n    static byte[] getData(string path)\n    {\n        byte[] data;\n\n        using (var file = File.OpenRead(path))\n        using (var ms = new MemoryStream())\n        {\n            file.CopyTo(ms);\n            data = ms.ToArray();                \n        }\n\n        return data;\n    }\n</code></pre>\n <p>\n  For the \"(binary1)\" I already have a finished program which stores the strings in a CSV and afterwards inserts the CSV back into the \"(binary1)\" and patches the pointers. So I can make a string longer if I make a string shorter somewhere else.\n </p>\n <p>\n  Here is an excerpt of my previous file, which I have processed successfully\n </p>\n <p>\n  The\n  <strong>\n   .rodata\n  </strong>\n  contains all strings:\n  <a href=\"https://i.sstatic.net/Q4YEI.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"rodata_example\" src=\"https://i.sstatic.net/Q4YEI.png\"/>\n  </a>\n </p>\n <p>\n  The\n  <strong>\n   .data.rel.ro\n  </strong>\n  contains all pointers to the strings:\n  <a href=\"https://i.sstatic.net/zmIYY.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"data.rel.ro_example\" src=\"https://i.sstatic.net/zmIYY.png\"/>\n  </a>\n </p>\n <p>\n  but the new file \"(binary2)\" I want to edit now looks a bit different.\n </p>\n <p>\n  <strong>\n   .rodata\n  </strong>\n  <a href=\"https://i.sstatic.net/1s7NN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"rodata\" src=\"https://i.sstatic.net/1s7NN.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   .data.rel.ro\n  </strong>\n  <a href=\"https://i.sstatic.net/hZlx3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"data.rel.ro\" src=\"https://i.sstatic.net/hZlx3.png\"/>\n  </a>\n </p>\n <p>\n  My C# code can't work in the second ELF, because it's a bit different. Unfortunately I don't know what to do. Maybe someone has an approach for me, so I can write a new little tool.\n </p>\n <p>\n  Here is a download link to the \"(binary2)\":\n  <a href=\"https://drive.google.com/file/d/12vr-zcTnC3TzCIuvZ9Yt19lbb6dkEFdl/view?usp=sharing\" rel=\"nofollow noreferrer\">\n   https://drive.google.com/file/d/12vr-zcTnC3TzCIuvZ9Yt19lbb6dkEFdl/view?usp=sharing\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "elf",
        "binary",
        "c#",
        "binary-editing"
    ],
    "user": "Alonia",
    "time": "Sep 22, 2020 at 8:09",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Are you limited to C#? Otherwise you could have a look at\n <a href=\"https://sourceware.org/elfutils/\" rel=\"nofollow noreferrer\">\n  elfutils\n </a>\n for writing a tool that understands ELF and can manipulate it. If you're tied to C#, however, you may have to generate a C# binding first.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alonia",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L No, I‘m not limited to C#. It was relatively obvious to me in C# to modify the first ELF. Do you have some experience with this and could give me an approach so that I don‘t have to search many days?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hairlessbear",
            "text": "<html><body><span class=\"comment-copy\">\n I can't personally vouch for either of these, but they may be useful.\n <a href=\"https://github.com/yalue/elf32_string_replace\" rel=\"nofollow noreferrer\">\n  github.com/yalue/elf32_string_replace\n </a>\n <a href=\"https://reverseengineering.stackexchange.com/questions/1843/what-are-the-available-libraries-to-statically-modify-elf-executables\" title=\"what are the available libraries to statically modify elf executables\">\n  reverseengineering.stackexchange.com/questions/1843/…\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}