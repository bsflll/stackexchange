{
    "title": "Do I have to consider virtual function declaration order?",
    "link": "https://reverseengineering.stackexchange.com/questions/12271/do-i-have-to-consider-virtual-function-declaration-order",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I loaded a shared library (I don't know the source of that) and made a header for that with IDA.\n </p>\n <p>\n  Is this\n </p>\n <pre><code>class Tester {\n    public:\n    virtual void test();\n    virtual void replay();\n};\n</code></pre>\n <p>\n  different from this?\n </p>\n <pre><code>class Tester {\n    public:\n    virtual void replay();\n    virtual void test();\n};\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "397",
    "tags": [
        "ida",
        "vtables"
    ],
    "user": "user160368",
    "time": "Mar 22, 2016 at 10:47",
    "comments": [
        {
            "user": "rec",
            "text": "<html><body><span class=\"comment-copy\">\n I guess it depends on the compiler?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<html><body><span class=\"comment-copy\">\n I think also that it should depend on the compiler.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The order of virtual functions is significant; altering the order in the source code will alter the order in the generated machine code. In your example, the two source samples will generate different machine code.\n </p>\n <p>\n  Edit: using the sample code provided by @tathanhdinh below, MSVC generates the two vtables as follows:\n </p>\n <pre><code>;   COMDAT ??_7B@@6B@\nCONST   SEGMENT\n??_7B@@6B@ DD   FLAT:??_R4B@@6B@            ; B::`vftable'\n    DD  FLAT:?bust@B@@UAEXXZ\n    DD  FLAT:?test@B@@UAEXXZ\nCONST   ENDS\n;   COMDAT ??_7A@@6B@\nCONST   SEGMENT\n??_7A@@6B@ DD   FLAT:??_R4A@@6B@            ; A::`vftable'\n    DD  FLAT:?test@A@@UAEXXZ\n    DD  FLAT:?bust@A@@UAEXXZ\nCONST   ENDS\n</code></pre>\n <p>\n  Note that the order of the member function pointers in the two vtables differs. As I mentioned, the order in which virtual functions matters in at least one compiler.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "John Källén",
            "time": "Mar 23, 2016 at 16:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user160368",
                    "text": "<span class=\"comment-copy\">How about normal functions?</span>",
                    "time": null
                },
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Non-virtual member functions won't affect the layout of your class or its vtable in memory. It's the linker that will decide what offset the function bodies will be located in.</span>",
                    "time": null
                },
                {
                    "user": "user160368",
                    "text": "<span class=\"comment-copy\">+ Can I omit one or more virtual function declarations?</span>",
                    "time": null
                },
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">You need to make sure that you don't misalign the vtable. You may omit any virtual function declarations that appear <i>after</i> the function(s) you wish to have disassembled.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">@JohnKällén Thanks for you answer, but it seems to me unintuitive the idea that the order virtual function in source affects the order in machine code. It is hard to me to believe that somewhere in C++ standard (or even in C++ ABI) says that, I think that it should be compiler dependent.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i dont think you mean using the same class name if so it may generate redefinition error if not  the order should be considered\n </p>\n <pre><code>#include <iostream>\nusing namespace std;\nclass A {\n    public:\n    virtual void test() { cout<<\"class A test virtual function \n\"; }\n    virtual void bust() { cout<<\"class A bust virtual function \n\"; }\n};\nclass B {\n    public:\n    virtual void bust() { cout<<\"class B bust virtual function \n\"; }\n    virtual void test() { cout<<\"class B test virtual function \n\"; }\n};\nint main(void) {\n    A *foo = nullptr;\n    B *bla = nullptr;\n    try{        \n    foo = new(A);\n    bla = new(B);\n    foo->bust();\n    bla->bust();\n    delete foo;\n    delete bla;\n    } catch(...){\n    delete foo;\n    delete bla; \n    }\n    return 0;\n}\n</code></pre>\n <p>\n  compiled & linked with\n </p>\n <pre><code>cl /nologo /Zi /EHsc /O1 /analyze /W4 *.cpp /link /release\n</code></pre>\n <p>\n  executed will result in\n </p>\n <pre><code>classmagic.exe\nclass A bust virtual function\nclass B bust virtual function\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Mar 22, 2016 at 10:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since I do not think the order of virtual functions in source could affect their order in machine code, I try to give a counter example. The main idea is first to give a\n  <em>\n   layout\n  </em>\n  for the\n  <code>\n   vtable\n  </code>\n  of a base class\n </p>\n <pre><code>struct A\n{\n  void virtual test() {};\n  void virtual replay() {};\n}\n</code></pre>\n <p>\n  then using two classes which inherit\n  <code>\n   A\n  </code>\n  , but with different order of virtual functions:\n </p>\n <pre><code>struct B : public A\n{\n  void virtual test() {};\n  void virtual replay() {};\n}\n\nstruct C : public A\n{\n  void virtual replay() {};\n  void virtual test() {};\n}\n</code></pre>\n <p>\n  If the order of virtual functions in\n  <code>\n   B\n  </code>\n  and\n  <code>\n   C\n  </code>\n  affects their machine code order, then their pointers in corresponding\n  <code>\n   vtables\n  </code>\n  should be different. But the following generated machine code (I have used\n  <code>\n   clang\n  </code>\n  as the compiler) shows that they are not:\n </p>\n <pre><code>.rodata:0804888C ; vtable for B\n.rodata:0804888C _ZTV1B db    0                   ; DATA XREF: B::B(void)+1Co\n ...\n.rodata:08048894 dd offset _ZN1B4testEv           ; B::test(void)\n.rodata:08048898 dd offset _ZN1B6replayEv         ; B::replay(void)\n ...\n ... \n.rodata:08048904 ; vtable for C\n.rodata:08048904 _ZTV1C db    0                   ; DATA XREF: C::C(void)+1Co\n ...\n.rodata:0804890C dd offset _ZN1C4testEv           ; C::test(void)\n.rodata:08048910 dd offset _ZN1C6replayEv         ; C::replay(void)\n</code></pre>\n <p>\n  The order of virtual functions in\n  <code>\n   B\n  </code>\n  and\n  <code>\n   C\n  </code>\n  are indeed the same (and respects one in\n  <code>\n   A\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ta Thanh Dinh",
            "time": "Mar 22, 2016 at 14:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}