{
    "title": "sub-ghz radio encoding 6 bits",
    "link": "https://reverseengineering.stackexchange.com/questions/3267/sub-ghz-radio-encoding-6-bits",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a usb stick that communicates with a medical device.  I am attempting to decode the communication. I have figured out the basic radio parameters (916.5MHz, ook, bit rate, preamble, sync words), but there is still some encoding I haven't figured out yet.\n </p>\n <p>\n  I can give the USB stick different destination device ids, and can see segments of the short (~12bytes) packet change. In fact, for each character of the 6-digit device id, I see 6 bits change in the packet, with a consistent mapping as follows:\n </p>\n <pre><code>\"010101\" => \"0\",\n\"110001\" => \"1\",\n\"110010\" => \"2\",\n\"100011\" => \"3\",\n\"110100\" => \"4\",\n\"100101\" => \"5\",\n\"100110\" => \"6\",\n\"010110\" => \"7\",\n\"011010\" => \"8\",\n\"011001\" => \"9\"\n</code></pre>\n <p>\n  So device id 123456 is encoded as \"110001110010100011110100100101100110\".\n </p>\n <p>\n  There are some other 6-bit sequences I see in the data as well, like:\n </p>\n <pre><code>001011 => ?\n001101 => ?\n101010 => ?\n101100 => ?\n011100 => ? \n</code></pre>\n <p>\n  The second bit in each code seems to be a parity bit for the remaining 5 bits. The first bit seems special in some way as well, but I haven't figured it out.  The four bits on the right are standard binary encoding for values 1-6. Those values also have the first bit set, which makes me think that when the first bit is not set, it turns on some alternate encoding for the right four bits.\n </p>\n <p>\n  Any ideas?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "397",
    "tags": [
        "encodings"
    ],
    "user": "raaadio",
    "time": "Dec 23, 2013 at 16:07",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Did you look at error correction codes such as\n <a href=\"http://en.wikipedia.org/wiki/Gray_code\" rel=\"nofollow noreferrer\">\n  Grey code\n </a>\n ? It doesn't answer to your question about the meaning of extra signals but, it may explain how the code has been built (incrementally from a subset of elements).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n Similar to what @perror said, you may want to consider\n <a href=\"http://en.wikipedia.org/wiki/Hamming_code\" rel=\"nofollow noreferrer\">\n  Hamming codes\n </a>\n too.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "raaadio",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, I looked at error correction codes (though I hadn't seen Grey code before). I don't think it can be hamming code, since four bits of data would require more than 2 bits parity, if I understand hamming codes correctly (unlikely:).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n I didn't check exhaustively but it seems that every single element of your code is at a hamming distance of two (at least) from any other element. It might be a clue for discovering or invalidating new elements. It might be linked to the number of errors that is supported by your code.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is not a complete answer yet, but perhaps it will be of assistance anyway. First, for every 6-bit code exactly 3 bits are set, strongly suggesting some kind of a 3-of-6 binary channel coding.  I'm inferring the following rules:\n </p>\n <ol>\n  <li>\n   exactly 3 of the 6 bits must be set\n  </li>\n  <li>\n   the last 3 bits must not all be the same value\n  </li>\n </ol>\n <p>\n  Both of these would have valid reasons for channel coding because they'd assure that there are always at least two transitions (1-to-0 or 0-to-1) per symbol period, and therefore assist in synchronization and clock recovery.  At first glance, it looked like Manchester encoding or Differential Manchester, but that does not seem to be the case, not least because it appears to be encoding at least 4 bits per 6-bit symbol.\n </p>\n <p>\n  If both those presumed rules are correct, there are 19 possible values (if only rule 1 is correct, there are 21 possible values).  They're enumerated below in numerical order, followed by the symbol number, followed by the observed symbol meaning (I've assigned the observed but unknown symbols values of uA through uE; theoretically possible but unobserved symbols are marked as ?G through ?I):\n </p>\n <pre><code>000111 00 disallowed by rule 2\n001011 01 uA\n001101 02 uB\n001110 03 ?G\n010011 04 ?H\n010101 05 \"0\"\n010110 06 \"7\"\n011001 07 \"9\"\n011010 08 \"8\"\n011100 09 uC\n100011 10 \"3\"\n100101 11 \"5\"\n100110 12 \"6\"\n101001 13 ?I\n101010 14 uD\n101100 16 uE\n110001 17 \"1\"\n110010 18 \"2\"\n110100 19 \"4\"\n111000 20 disallowed by rule 2\n</code></pre>\n <p>\n  For the symbols\"1\" through \"6\" the low four bits are the encoded value 1-6 and the high two bits are the count of zeroes in the low four bits.  It also works for ?I, uD, and uE if you give those the values of 9,10 and 12, respectively. However, that interpretation, does not work for the other values.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Edward",
            "time": "Jan 6, 2014 at 1:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I eventually figured this out. It's a hexadecimal based encoding. The remaining symbols I was stumped by were 'A' through 'F'.\n </p>\n <pre><code>\"010101\" => \"0\",\n\"110001\" => \"1\",\n\"110010\" => \"2\",\n\"100011\" => \"3\",\n\"110100\" => \"4\",\n\"100101\" => \"5\",\n\"100110\" => \"6\",\n\"010110\" => \"7\",\n\"011010\" => \"8\",\n\"011001\" => \"9\",\n\"101010\" => \"a\",\n\"001011\" => \"b\",\n\"101100\" => \"c\",\n\"001101\" => \"d\",\n\"001110\" => \"e\",\n\"011100\" => \"f\"\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "pschwamb",
            "time": "Aug 7, 2015 at 19:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}