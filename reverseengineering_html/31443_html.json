{
    "title": "What does the function code do",
    "link": "https://reverseengineering.stackexchange.com/questions/31443/what-does-the-function-code-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What does this code do?\n </p>\n <pre><code>.text:0048EBCD                 mov     ecx, dword_4CEAC8\n.text:0048EBD3                 mov     edx, dword_4CEACC\n.text:0048EBD9                 mov     [ebp+var_4], eax\n.text:0048EBDC                 mov     eax, dword_4CEAD0\n.text:0048EBE1                 mov     [ebp+var_28], ecx\n.text:0048EBE4                 mov     cl, byte_4CEAD4\n.text:0048EBEA                 mov     [ebp+var_24], edx\n.text:0048EBED                 mov     [ebp+var_20], eax\n.text:0048EBF0                 mov     [ebp+var_1C], cl\n.text:0048EBF3                 pusha\n.text:0048EBF4                 mov     [ebp+var_18], 4\n.text:0048EBFB                 pushf\n.text:0048EBFC                 pop     eax\n.text:0048EBFD                 mov     ecx, eax\n.text:0048EBFF                 xor     eax, 200000h\n.text:0048EC04                 push    eax\n.text:0048EC05                 popf\n.text:0048EC06                 pushf\n.text:0048EC07                 pop     eax\n.text:0048EC08                 xor     eax, ecx\n.text:0048EC0A                 jz      short loc_48EC5C\n.text:0048EC0C                 mov     [ebp+var_14], 0\n.text:0048EC13                 mov     eax, 0\n.text:0048EC18                 cpuid\n.text:0048EC1A                 mov     [ebp+var_14], eax\n.text:0048EC1D                 mov     [ebp+var_28], ebx\n.text:0048EC20                 mov     [ebp+var_24], edx\n.text:0048EC23                 mov     [ebp+var_20], ecx\n</code></pre>\n <p>\n  What do this numbers mean?\n </p>\n <pre><code>.data:004CEAC8 dword_4CEAC8    dd 6E6F6E41h            ; DATA XREF: DX_Enumerate+1Dr\n.data:004CEAC8                                         ; sub_497290+24r\n.data:004CEACC dword_4CEACC    dd 756F6D79h            ; DATA XREF: DX_Enumerate+23r\n.data:004CEACC                                         ; sub_497290+6r\n.data:004CEAD0 dword_4CEAD0    dd 55504373h            ; DATA XREF: DX_Enumerate+2Cr\n.data:004CEAD0                                         ; sub_497290+Cr\n.data:004CEAD4 byte_4CEAD4     db 0                    ; DATA XREF: DX_Enumerate+34r\n.data:004CEAD4                                         ; sub_497290+2Cr\n</code></pre>\n <p>\n  Why is it done xor?\n </p>\n <pre><code>.text:0048EBFF                 xor     eax, 200000h\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "238",
    "tags": [
        "ida"
    ],
    "user": "black4joss",
    "time": "Jan 20, 2023 at 9:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the string is \"anonymousCPU\"\n </p>\n <p>\n  by pushing the EFLAGS and Xorring with 200000 it is checking if CPUID is usable or not\n </p>\n <p>\n  <a href=\"https://en.wikipedia.org/wiki/FLAGS_register\" rel=\"nofollow noreferrer\">\n   21     0x0020Â 0000     ID  Able to use CPUID instruction (Pentium+)    System\n  </a>\n </p>\n <p>\n  and  proceeds ahead based on result\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 20, 2023 at 12:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is not a function code because a function code is a few lines of code at the beginning of a function, which prepare the stack and registers for use within the function.\n </p>\n <p>\n  I split the assembly code in two parts.\n </p>\n <p>\n  The first part:\n </p>\n <pre><code>mov     ecx, 6E6F6E41h\nmov     edx, 756F6D79h\n...\njz      short loc_48EC5C\n</code></pre>\n <p>\n  Before I will explain what this part does, you can see that I changed\n  <code>\n   dword_4CEAC8\n  </code>\n  to\n  <code>\n   0x6E6F6E41\n  </code>\n  because\n  <code>\n   dword_4CEAC8\n  </code>\n  is a memory location that holds a 4 byte (double word or 32 bit) value, the address\n  <code>\n   dword_4CEAC8\n  </code>\n  is a memory location and it is a variable which holds a is points to a different location, the above does some stuff till the\n  <strong>\n   JZ\n  </strong>\n  instruction and if\n  <strong>\n   ZF\n  </strong>\n  (Zero Flag) is set the\n  <strong>\n   EIP\n  </strong>\n  (instruction pointer) jumps to\n  <code>\n   loc_48EC5C\n  </code>\n  address.\n </p>\n <p>\n  Afterwards, the second part:\n </p>\n <pre><code>mov     [ebp+var_14], 0\nmov     eax, 0\ncpuid\nmov     [ebp+var_14], eax\nmov     [ebp+var_28], ebx\nmov     [ebp+var_24], edx\nmov     [ebp+var_20], ecx\n</code></pre>\n <p>\n  Get the CPU Vendor ID using the\n  <strong>\n   cpuid\n  </strong>\n  instruction which stores the vendor ID string in\n  <strong>\n   EBX, EDX and ECX\n  </strong>\n  registers.\n </p>\n <p>\n  We can say in general, this assembly code appears to be moving specific hexadecimal values into registers, and then storing those registers into memory at specific locations.\nThe values being moved into registers are: 0x6E6F6E41 into\n  <strong>\n   ECX\n  </strong>\n  ,\n  <code>\n   0x756F6D79\n  </code>\n  into\n  <strong>\n   EDX\n  </strong>\n  ,\n  <code>\n   0x55504373\n  </code>\n  into\n  <strong>\n   EAX\n  </strong>\n  , and 0 into CL register.\nIt then appears to be saving the current state of the processor flags on the stack, performing a bitwise XOR operation, and executing the CPUID instruction.\n </p>\n <p>\n  The idea of the CPUID instruction is that you can call it with different values in\n  <strong>\n   EAX\n  </strong>\n  , and it will return different information about the processor.\nFinally, it is moving the contents of the registers back into memory at different locations.\n </p>\n <p>\n  Just a note, I took the explanations about CPUID from osdev website , and advise with chatGPT about the code.\n </p>\n <h2>\n  Read more\n </h2>\n <ol>\n  <li>\n   <a href=\"https://wiki.osdev.org/CPUID\" rel=\"nofollow noreferrer\">\n    CPUID\n   </a>\n  </li>\n  <li>\n   <a href=\"https://en.wikipedia.org/wiki/Function_prologue_and_epilogue\" rel=\"nofollow noreferrer\">\n    function prologue and epilogue\n   </a>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "BadSugar",
            "time": "Jan 20, 2023 at 14:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">Thank you very much, very useful answers. How this code transfers to C++?</span>",
                    "time": null
                }
            ]
        }
    ]
}