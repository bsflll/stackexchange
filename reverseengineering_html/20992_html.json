{
    "title": "Reassembling reversed ASM",
    "link": "https://reverseengineering.stackexchange.com/questions/20992/reassembling-reversed-asm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reassemble code reversed from an executable using radare2. I have managed to extract the asm and am using nasm for reassembling.\n </p>\n <p>\n  The question is, the code also contains commands like\n  <code>\n   byte ptr [esi],pushal, fucomi st(3) and sqrtps xmm5, xmmword [edx - 1]\n  </code>\n  which I'm unfamiliar with.\n </p>\n <p>\n  I tried assembling with the\n  <code>\n   nasm -felf -o\n  </code>\n  command. However, I'm getting the following errors.\n </p>\n <pre><code>test.asm:68: error: comma, colon, decorator or end of line expected after operand\ntest.asm:69: error: comma, colon, decorator or end of line expected after operand\ntest.asm:85: error: comma, colon, decorator or end of line expected after operand\ntest.asm:133: error: comma, colon, decorator or end of line expected after operand\ntest.asm:167: error: impossible combination of address sizes\ntest.asm:167: error: invalid effective address\ntest.asm:298: error: symbol `pushal' redefined\ntest.asm:423: error: comma, colon, decorator or end of line expected after operand\ntest.asm:637: error: comma, colon, decorator or end of line expected after operand\ntest.asm:802: error: symbol `pushal' redefined\n\n</code></pre>\n <p>\n  According to\n  <a href=\"https://stackoverflow.com/a/27600186\">\n   this stackoverflow post\n  </a>\n  , the keyword ptr does not exist in nasm and it suggested that the word be removed. Doing that resolved a few errors. Now I have the following errors:\n </p>\n <pre><code>test.asm:68: error: comma, colon, decorator or end of line expected after operand\ntest.asm:69: error: comma, colon, decorator or end of line expected after operand\ntest.asm:85: error: comma, colon, decorator or end of line expected after operand\ntest.asm:133: error: comma, colon, decorator or end of line expected after operand\ntest.asm:298: error: symbol `pushal' redefined\ntest.asm:423: error: comma, colon, decorator or end of line expected after operand\ntest.asm:637: error: comma, colon, decorator or end of line expected after operand\ntest.asm:802: error: symbol `pushal' redefined\n\n</code></pre>\n <p>\n  Since I have no idea what pushal and sqrtps mean, I'm reluctant to remove them from the code. Could someone please explain what these commands mean?\n </p>\n <p>\n  Additionally suggestions on how I can get this as a compilable error-free code are also welcome.\n </p>\n <p>\n  EDIT:\nFollowing user blabb s suggestion, i replaced pushal with pushad and now I have only 2 errors\n </p>\n <pre><code>test.asm:80: error: comma, colon, decorator or end of line expected after operand\ntest.asm:127: error: comma, colon, decorator or end of line expected after operand\n</code></pre>\n <p>\n  The 2 lines in question are:\n </p>\n <pre><code>fucomi st(3)\nand\nsqrtps xmm5, xmmword [edx - 1]\n</code></pre>\n <p>\n  any suggestions as to how to handle this?\n </p>\n <p>\n  EDIT 2:\nincluding lines 76-83\n </p>\n <pre><code>pop esi\nint3\nsti\nxor ebx,ebx\nfucomi st(0),st(3)\njmp 0x400299\npop es\nxor ebx, ebx\n</code></pre>\n <p>\n  and lines 122-132\n </p>\n <pre><code>add cl, bh\niretd\nmov dr0, ebx\nand eax, ebx\nret\npush 0xf\nsqrtps xmm5, xmmword [edx - 1]\npush ecx\npush 0xffffffffffffffff\ncall dword [ecx + 0x51]\npush ecx\n</code></pre>\n <p>\n  EDIT3:\nBased on user blabb s suggestion and also by referring the\n  <a href=\"https://www.nasm.us/xdoc/2.11/html/nasmdoc2.html#section-2.2.6\" rel=\"nofollow noreferrer\">\n   NASM docs\n  </a>\n  , I found that NASM does not accept st(0),st(3) and instead it accepts st0,st3. Now only one error left.\n </p>\n <pre><code>test.asm:127: error: comma, colon, decorator or end of line expected after operand\n</code></pre>\n <p>\n  Still did not understand how to handle this.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "radare2",
        "reassembly",
        "nasm"
    ],
    "user": "Flipsyde",
    "time": "Mar 30, 2019 at 3:01",
    "comments": [
        {
            "user": "dingo_kinznerhook",
            "text": "<html><body><span class=\"comment-copy\">\n You mean assemble, not recompile? Usually the term compile refers to a high level language. Nasm is an assembler, not a compiler.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "dingo_kinznerhook",
            "text": "<html><body><span class=\"comment-copy\">\n Could you show us lines 79-81 and 126-128? That would make it easier to see what could be causing the problem on adjoining lines.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Flipsyde",
            "text": "<html><body><span class=\"comment-copy\">\n @dingo_kinznerhook, updated the question with the code lines and changed recompiling to reassembling.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  SYNONYMS for Instruction ( PUSH ALL DOUBLE WORDS  / longs)\n </p>\n <p>\n  pushad   intel (masm , yasm , nasm , tasm)\n  \n\n  pushal   at&t with ( gas )\n </p>\n <p>\n  sqrtps = square root of single precision floating point\n </p>\n <p>\n  if you can use intrinsic use\n  <code>\n   SQRTPS __m128 _mm_sqrt_ps (__m128 a);\n  </code>\n </p>\n <p>\n  it takes the 128bit value in src calculates the square rot of it and places the square root in destination xmmword (128 bit register)\n </p>\n <p>\n  you can always find equivalent syntax for all of these instructions and modify the inconsisitent syntax to suit the tool\n </p>\n <p>\n  a cpp src code that illustrates sqrtps usage\n </p>\n <pre><code>//visual studio declares __m128 as union\n// for gcc use _mm_set_xxx intrinsc\n#include <stdio.h>\n#include <intrin.h>\n\nint main(void) {\n    __m128 res;\n    res.m128_f32[0]=256.0;\n    res.m128_f32[1]=64.0;\n    res.m128_f32[2]=16.0;\n    res.m128_f32[3]=4.0;\n    res = _mm_sqrt_ps (res);\n    printf(\"%f %f %f %f\n\",\n    res.m128_f32[0],\n    res.m128_f32[1],\n    res.m128_f32[2],\n    res.m128_f32[3]\n    );\n}\n</code></pre>\n <p>\n  compiled and linked and executed\n </p>\n <pre><code>:\\>cl /Zi /W4 /Ox /analyze /nologo sqrtps.cpp /link /nologo  /release\nsqrtps.cpp\n\n:\\>sqrtps.exe\n16.000000 8.000000 4.000000 2.000000\n</code></pre>\n <p>\n  disassembly\n </p>\n <pre><code>:\\>cdb -c \"uf sqrtps!main;q\" sqrtps.exe | grep -i sqrtps.*xmm\n01081000 0f510db0e10b01  sqrtps  xmm1,xmmword ptr [sqrtps!_xmm (010be1b0)]\n</code></pre>\n <p>\n  relooking at your query it appears you have some problems in the listing\n </p>\n <p>\n  fucomi iirc takes two operands your query shows only one st(3)\n </p>\n <p>\n  edit\n  \n\n  yes it takes two operands the first operand is st0 and is default \nso your listing probably omitted it (dont take my word check confirm and then change to\n  <strong>\n   fucomi st,st(3)\n  </strong>\n </p>\n <p>\n  <strike>\n   and iirc nasm doesnt understand\n   <strong>\n    xmmword\n   </strong>\n   i think it needs\n   <strong>\n    DQWORD\n   </strong>\n  </strike>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/wjwDt.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/wjwDt.jpg\"/>\n  </a>\n </p>\n <p>\n  <strike>\n   and i don't think unaligned access like [edi -1] is possible with sse operations\n  </strike>\n </p>\n <p>\n  no it was not either unaligned access nor dqword \nnasm simply doesnt like any decorator or qualifier\n </p>\n <p>\n  this assembles links and behaves properly\n </p>\n <pre><code>:\\>ls\ntest.asm\n\n:\\>cat test.asm\nsection .text\nglobal main\nmain:\nsqrtps xmm0,[edi-1]\nret\n:\\>nasm -f win32 -o test.obj test.asm\n\n:\\>ls\ntest.asm  test.obj\n\n:\\>link test.obj /debug /entry:main /release /nologo\n\n:\\>ls\ntest.asm  test.exe  test.obj  test.pdb\n\n:\\>..\ndisasm.exe -p intel -b 32 -e 0x200 -k 6,5000 test.exe\n00000000  0F5147FF          sqrtps xmm0,oword [edi-0x1]\n00000004  C3                ret\n00000005  00                db 0x00\n00000006  skipping 0x1388 bytes\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 29, 2019 at 18:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Flipsyde",
                    "text": "<span class=\"comment-copy\"><code>if you can use intrinsic use SQRTPS __m128 _mm_sqrt_ps (__m128 a);</code> Could you please explain/elaborate this line?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i added a c program for intrinsic usage and an asm listing that assembles fine with nasm for sqrtps</span>",
                    "time": null
                },
                {
                    "user": "Flipsyde",
                    "text": "<span class=\"comment-copy\">Tried replacing xmmword with all other options(oword,yword,zword,etc.). Nothing worked. got too many errors like shown below. <code>test.asm:12: warning: register size specification ignored test.asm:64: warning: register size specification ignored test.asm:65: warning: register size specification ignored test.asm:84: warning: register size specification ignored test.asm:89: warning: register size specification ignored test.asm:390: warning: register size specification ignored...</code> What do i write instead of <code>sqrtps xmm5, xmmword [edx - 1]</code>??</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">did you read or see the nasm program i adder</span>",
                    "time": null
                },
                {
                    "user": "Flipsyde",
                    "text": "<span class=\"comment-copy\">My mistake. I should have mentioned that. As suggested I removed the xmmword qualifier. This gave me another bunch of errors <code>;test.asm:890: warning: register size specification ignored; test.asm:1005: warning: register size specification ignored ; test.asm:12: error: invalid combination of opcode and operands; test.asm:64: error: invalid combination of opcode and operands ;... </code> .  Due to this i assumed that that too failed and went back to original error.</span>",
                    "time": null
                }
            ]
        }
    ]
}