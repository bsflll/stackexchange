{
    "title": "Using struct objects and constructors in hooked function",
    "link": "https://reverseengineering.stackexchange.com/questions/29429/using-struct-objects-and-constructors-in-hooked-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Will try to reword the actual question so it is hopefully more descriptive and clear of what I am after:\n </p>\n <p>\n  So, there is a function main, which I have successfully hooked. The hooked version looks like this:\n </p>\n <pre><code>__int64 __fastcall gamemainHooked(gladius::Game* thisptr, int param_1, char** param_2, char** param_3)\n    {       \n\n        gladius::get().initialize(thisptr, param_1, param_2, param_3);\n\n        gladius::gui::get().guiRun(*(GUI**)(thisptr + 0x28));\n\n        gladius::get().quit(thisptr);\n\n        return gladius::get().gamemain(thisptr, param_1, param_2, param_3);\n    }\n</code></pre>\n <p>\n  Now, see there is a Game* thisptr, which is passed in to that function.\n </p>\n <p>\n  When the function is running it populates Game* thisptr instance with\n </p>\n <pre><code>thisptr->GameConstructor (0x0x00000271704c6ec0)\nthisptr->gamemain (0x00000271788a94f0)\nthisptr->initialize(0x000002716d523b90)\nthisptr->quit(0x000002716fdebdd0)\n</code></pre>\n <p>\n  he original main function and the hooked one have a function called guiRun, which takes\n  <strong>\n   thisptr + 0x28\n  </strong>\n  offset and which from the code below is the 5th element of the constructor (Game).\n </p>\n <pre><code>Game * __thiscall gladius::Game::Game(Game *this)\n\n{\n  *(undefined8 *)this = 0;\n  *(undefined8 *)(this + 8) = 0;\n  *(undefined8 *)(this + 0x10) = 0;\n  *(undefined8 *)(this + 0x18) = 0;\n  *(undefined8 *)(this + 0x20) = 0;\n  *(undefined8 *)(this + 0x28) = 0;\n  *(undefined8 *)(this + 0x30) = 0;\n  *(undefined8 *)(this + 0x38) = 0;\n  *(undefined8 *)(this + 0x40) = 0;\n  *(undefined8 *)(this + 0x48) = 0;\n  *(undefined8 *)(this + 0x50) = 0;\n  return this;\n}\n</code></pre>\n <p>\n  Now, what's the best way to reverse this, so that I can have a handle on that 5th element of the Game instance? How should the code look like so that calling guiRun with\n  <strong>\n   thisptr+0x28\n  </strong>\n  succeeds.\n </p>\n <p>\n  Should I reverse constructor completely with all of the pointers inside and then point to it?\n </p>\n <p>\n  The point is that calling\n  <strong>\n   guiRun (thisptr + 0x28)\n  </strong>\n  doesn't work as\n  <strong>\n   thisptr + 0x28\n  </strong>\n  is not pointing to 5th element of the Game* instance...\n </p>\n <p>\n  The current reversed Game struct looks like this:\n </p>\n <pre><code> namespace gladius {\n        struct Game {\n            //virtual int __thiscall main(gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n    \n            using GameConstructor = Game * (__fastcall*) (Game* thisptr);\n            GameConstructor gameConstructor;\n    \n            using GameMain = __int64(__fastcall*) (gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n            GameMain gamemain;\n    \n            using Initialize = void(__fastcall*) (gladius::Game* thisptr, int a2, char** a3, char** a4);\n            Initialize initialize;\n    \n            using Quit = void(__fastcall*) (gladius::Game* thisptr);\n            Quit quit;\n        };\n    \n        Game& get();\n    \n    } /\n</code></pre>\n <p>\n  P.S.\nIt seems that guiRun wants to accept *\n  <strong>\n   thisptr\n  </strong>\n  and not\n  <strong>\n   thisptr\n  </strong>\n  . But this will mean that the original signature of the function has to be changed. Not sure if that will lead to the hook not working.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "335",
    "tags": [
        "c++",
        "function-hooking",
        "proxy",
        "api-reversing"
    ],
    "user": "Irbis77",
    "time": "Oct 20, 2021 at 12:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is been resolved here:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/29541/how-to-declare-a-constructor-in-reversed-class\">\n   Link\n  </a>\n </p>\n <p>\n  So, the solution is to introduce the class structure functionally the same as the original one and then use the original constructor function to populate it.\n </p>\n <p>\n  If the objects of the other classes, i.e. GUI object as a 5th element of the above structure needs to be initialised, then GUI object has to have a proper class constructor as described in the link.\n </p>\n <p>\n  You might need a similar structure as described there to initialise any of the objects you want to populate.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Irbis77",
            "time": "Nov 14, 2021 at 12:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}