{
    "title": "What is a more efficient way to locate disasm patterns in IDAPython?",
    "link": "https://reverseengineering.stackexchange.com/questions/16843/what-is-a-more-efficient-way-to-locate-disasm-patterns-in-idapython",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is my first \"serious\" IDAPython script. As I sorta suspected, it's performing\n  <strong>\n   waaaayyyyy\n  </strong>\n  too slow so I wanted to ask for some pointers on this:\n </p>\n <pre><code>fp = MinEA()\nend = MaxEA()\n\nwhile fp < end:\n    prev_inst = idc.prev_head(fp,MinEA())\n    prev_prev = idc.prev_head(prev_inst,MinEA())\n    next_inst = idc.next_head(fp,MaxEA())\n    if idc.SegName(fp) == '.text' or idc.SegName(fp) == '.code':\n        if idc.GetMnem(fp) == 'call':\n            if (idc.GetOpnd(fp,0) == 'ds:GetProcAddress') or (idc.GetOpnd(fp,1) == 'ds:GetProcAddress'):\n                if(idc.GetMnem(prev_inst) == 'push'):\n                    if(idc.GetMnem(next_inst) == 'mov' and idc.GetMnem(prev_prev) == 'mov'):\n                        print \"GetProcAddress Found at %02X\" % hex(fp)\n</code></pre>\n <p>\n  This code is looking for this type of behavior (dynamic API loads):\n  <a href=\"https://i.sstatic.net/sjkpD.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/sjkpD.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "645",
    "tags": [
        "ida",
        "idapython",
        "python"
    ],
    "user": "the_endian",
    "time": "Nov 26, 2017 at 5:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I typicall solve this by just walking over code references to the import.\n </p>\n <p>\n  Something like\n </p>\n <pre><code>for ref in CodeRefsTo(LocByName('GetTickCount'),True):\n    print \"%08x\" % ref\n</code></pre>\n <p>\n  This is quite powerful because unless I'm mistaken this also references snippets like this properly:\n </p>\n <pre><code>mov     esi, ds:LoadLibraryW\npush    edi             ; lpLibFileName\ncall    esi ; LoadLibraryW\n</code></pre>\n <p>\n  where the code reference is properly returned as the last line, not the first.\n </p>\n <p>\n  Then I typically walk the code backwards with\n  <code>\n   PrevHead\n  </code>\n  and\n  <code>\n   GetMnem\n  </code>\n  until I find the matching arguments.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Johann Aydinbas",
            "time": "Feb 12, 2018 at 20:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a comment esque answer, but I want to give this my best shot.\n </p>\n <p>\n  Also, I'd like you to understand I'm not the best with programming, and reversing itself, so this answer is probably nowhere near the best.\n </p>\n <p>\n  There is something very odd about this assembly that any reverse engineer would probably instantly notice, and I'm very glad you've noticed it to, thats 1 step down. You'll notice there is also at the end of each opcode byte, a pattern of bytes\n  <code>\n   ... 37 12\n  </code>\n  is what I mainly am talking about, this means you can\n  <em>\n   possibly\n  </em>\n  check if the end of the opcode bytes are the same. This is a way to locate disasm patterns. Also, by the way, there are a few find signature libraries lying around for python. Here is one,\n  <a href=\"https://pypi.python.org/pypi/libsigscan-python/20170124\" rel=\"nofollow noreferrer\">\n   https://pypi.python.org/pypi/libsigscan-python/20170124\n  </a>\n  (I'm not sure they work with IDAPyton, who knows, by the way, maybe IDAPython has an opcode byte finding function)\n </p>\n <p>\n  Hope this helped! Good luck :)\n </p>\n <p>\n  References:\n </p>\n <p>\n  <a href=\"http://ask-leo.com/what_is_signature_scanning.html\" rel=\"nofollow noreferrer\">\n   http://ask-leo.com/what_is_signature_scanning.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Graham Best",
            "time": "Dec 14, 2017 at 15:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Uhm, other than that this should really be a comment (as you point out yourself), what's so odd about <code>37 12</code>? The whole instruction looks like an ordinary call with ds selector and an address. Now that the address is <code>0x1237....</code> seems logical looking at the line prefixes shown by IDA and another way to represent that call would be <code>call DWORD PTR ds:0x1237A1AC</code> ...</span>",
                    "time": null
                },
                {
                    "user": "Graham Best",
                    "text": "<span class=\"comment-copy\">Sorry, I meant to put more of the bytecode pattern in, but you'll notice it forms a pattern.</span>",
                    "time": null
                }
            ]
        }
    ]
}