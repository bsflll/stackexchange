{
    "title": "How to reuse symbol/data defined in .bss section?",
    "link": "https://reverseengineering.stackexchange.com/questions/4306/how-to-reuse-symbol-data-defined-in-bss-section",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So basically I am trying to re-use some assembly code/data dumped by\n  <code>\n   objdump\n  </code>\n  from 32 bit ELF binary on Linux.\n </p>\n <p>\n  So basically, in the disassembled binary, I found some symbol referring to\n  <code>\n   .bss\n  </code>\n  section like this:\n </p>\n <pre><code> 80486b7:   mov    0x804b264,%eax   <- 0x804b264 is an addr in .bss\n 80486bc:   movl   $0x0,0x4(%esp)\n 80486c3:\n 80486c4:   mov    %eax,(%esp)\n 80486c7:   call   804876c <sum>\n</code></pre>\n <p>\n  By digging into the original source code, I find out that\n  <code>\n   0x804b264\n  </code>\n  is used for\n  <code>\n   stdin\n  </code>\n  in\n  <code>\n   .bss\n  </code>\n  section.\n </p>\n <p>\n  IMHO, there are basically two situations on\n  <code>\n   .bss\n  </code>\n  section's data:\n </p>\n <ol>\n  <li>\n   <p>\n    uninitialized data, will be uninitialized in the source code\n   </p>\n  </li>\n  <li>\n   <p>\n    some global/system related data (such as\n    <strong>\n     stdin\n    </strong>\n    in the above situation)\n   </p>\n  </li>\n </ol>\n <p>\n  So when trying to re-use\n  <code>\n   .bss\n  </code>\n  section's data, I have tried this way:\n </p>\n <pre><code>.section .bss\nS_0x804B260 : .byte 0x00\n           .byte 0x00\n           .byte 0x00\n          .byte 0x00\nS_0x804B264 : .byte 0x00          <- I lift addr into symbol!\n          .byte 0x00\n         .byte 0x00\n         .byte 0x00\n         .byte 0x00\n</code></pre>\n <p>\n  and in the\n  <code>\n   .text\n  </code>\n  section, I will also lift corresponding addr into symbol.\n </p>\n <p>\n  <strong>\n   same situation works fine for\n   <code>\n    .rodata\n   </code>\n   and\n   <code>\n    .data\n   </code>\n   section\n  </strong>\n </p>\n <p>\n  But the problem is that, there are some global variables (such as\n  <strong>\n   stdin\n  </strong>\n  <strong>\n   stdout\n  </strong>\n  ), locating in\n  <code>\n   .bss\n  </code>\n  section, while are not initialized by\n  <strong>\n   user defined code\n  </strong>\n  , which means that in my re-used asm code, this symbol variable will always be\n  <strong>\n   zero\n  </strong>\n  !\n </p>\n <p>\n  I tried to manually substitute symbols corresponding to\n  <strong>\n   stdin\n  </strong>\n  , and it seems that it works fine.\n </p>\n <p>\n  But the problem is that:\n </p>\n <ol>\n  <li>\n   <p>\n    How can I identify which symbol in the\n    <code>\n     .bss\n    </code>\n    section is some variables that initialized by system? such as\n    <strong>\n     stdin\n    </strong>\n    ,\n    <em>\n     stdout*\n    </em>\n    and others?\n   </p>\n  </li>\n  <li>\n   <p>\n    If it is not possible, then is there anyway that I can enforce system to use memory in the\n    <code>\n     .bss\n    </code>\n    section where I want it to use?\n   </p>\n  </li>\n </ol>\n <p>\n  Am I clear? Could anyone give me some help?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "824",
    "tags": [
        "disassembly",
        "assembly",
        "elf",
        "reassembly"
    ],
    "user": "lllllllllllll",
    "time": "May 10, 2014 at 16:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm afraid you're not too clear when you talk about \"reusing\" some part of a program. What exactly do you want to do? Load the original program into a debugger, then call just one single function of it? Extract a ranged of addresses and turn that into a new program? Or extract one function from the original program, possibly together with everything the function depends on, then embed that function into a larger program?\n </p>\n <p>\n  You're wrong in one thing: the .bss section is NOT initialized at all at program start (at least not to anything but a load of\n  <code>\n   \\0\n  </code>\n  bytes). The initialization of stuff like\n  <code>\n   stdout\n  </code>\n  is done in runtime before main() starts. Stuff that gets initialized with constant data goes into the .data segment.\n </p>\n <p>\n  (On a side note: One of the reasons why the stdout FILE structure isn't put into .data and initialized as constants is most runtimes on unix-like systems will check if their file descriptor goes to a terminal or something else, and turn on/off buffering depending on that check).\n </p>\n <p>\n  When you extract a part of the code, you'll have to check each reference to .data AND .bss (and to .text - the code - as well if the extracted part depends on any libraries etc.). For each of those references, you'll have to decide what to do with them - share them with the new program, keep them for the functions you extracted, whatever.\n </p>\n <p>\n  If you're lucky, and have an unstripped executable, you can use\n  <code>\n   nm\n  </code>\n  to find out which symbol is where; if you're not that lucky, you'll have to disassemble/decompile everything, understand it, rewrite it into new source, and compile it together with whatever you want to embed it in.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 10, 2014 at 18:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}