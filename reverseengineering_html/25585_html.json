{
    "title": "Determine Control-Flow Of A .NET Assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/25585/determine-control-flow-of-a-net-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using DnSpy is great, but it's very awkward to ascertain the control-flow of an executable. Is anyone able to advise on free-of-charge helpful apps that display a control-flow graph?\n </p>\n <p>\n  IDA Home does not work on .NET assemblies, nor does Radare2 sadly.\n </p>\n <p>\n  Hopefully someone can tell what they do?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "272",
    "tags": [
        ".net"
    ],
    "user": "Dalski",
    "time": "Jul 30, 2020 at 12:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I though it would be a nice pet-project so I've started building a PoC tool that can generate a CFG for a given method in the .NET assembly.\n </p>\n <p>\n  The PoC uses\n  <code>\n   Mono.Cecil\n  </code>\n  to inspect the binary and produces a graph in a DOT language than later can be transformed into a picture with\n  <code>\n   dot\n  </code>\n  tool and works on IL level.\n </p>\n <p>\n  A bit of technical info.\n </p>\n <p>\n  First it determines leaders - instructions that will be the first instruction in the basic blocks (BB) - by going through the opcodes and checking the control flow type:\n </p>\n <ul>\n  <li>\n   If the instruction's control flow type is of type\n   <code>\n    Return\n   </code>\n   - the next one (if exists) will be a leader.\n  </li>\n  <li>\n   If the instruction's control flow type is of type\n   <code>\n    Branch\n   </code>\n   - the destination of the branch instruction will be a leader\n  </li>\n  <li>\n   If the instruction's control flow type is of type\n   <code>\n    Cond_Branch\n   </code>\n   - the destination of the branch and the next instruction will be leaders.\n  </li>\n </ul>\n <p>\n  Also doing that we can construct edges between those BBs, there will be different outgoing edges depending on the type of flow:\n </p>\n <ul>\n  <li>\n   If the instruction's control flow type is of type\n   <code>\n    Return\n   </code>\n   there will be no outgoing edge\n  </li>\n  <li>\n   If the instruction's control flow type is of type\n   <code>\n    Branch\n   </code>\n   there will be an outgoing edge from the current instruction's BB to the branch's destination BB\n  </li>\n  <li>\n   If the instruction's control flow type is of type\n   <code>\n    Cond_Branch\n   </code>\n   there will be outgoing edges from the current BB to the destination of the\n   <code>\n    Cond_Branch\n   </code>\n   BB and to the next instruction's BB\n  </li>\n </ul>\n <p>\n  The only thing we need to do having those info, is to generate a graph definition in the DOT langage.\n </p>\n <p>\n  Calling the tool in the following way\n </p>\n <blockquote>\n  <p>\n   <code>\n    ./cfg.exe Mono.Cecil.dll Mono.Cecil.MetadataBuilder.AddCustomDebugInformations | dot -Tpng -o cfg.png\n   </code>\n  </p>\n </blockquote>\n <p>\n  will generate for us a \"nice\" CFG for the method\n  <code>\n   AddCustomDebugInformations\n  </code>\n  .\n </p>\n <p>\n  <img alt=\"\" src=\"https://github.com/pawlos/cfg/raw/master/cfg-add-custom-debug-informations.png\"/>\n </p>\n <p>\n  It might fail for some strange (or normal) edge cases and of course there's a lot to improve but overall CFG is there ;)\n </p>\n <p>\n  Link to the repo:\n  <a href=\"https://github.com/pawlos/cfg\" rel=\"nofollow noreferrer\">\n   https://github.com/pawlos/cfg\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Aug 6, 2020 at 8:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}