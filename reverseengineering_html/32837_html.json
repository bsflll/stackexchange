{
    "title": "Ghidra not displaying member function call",
    "link": "https://reverseengineering.stackexchange.com/questions/32837/ghidra-not-displaying-member-function-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://i.sstatic.net/ZeAXk.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZeAXk.png\"/>\n  </a>\n </p>\n <p>\n  On lines 67, 70 and 77 ghidra makes a call to what I assume is a member function, but it does not show me which member function. Why is that?\n </p>\n <p>\n  Example from line 70:\n </p>\n <p>\n  (**(code **)(*(longlong *)metaStream + 0xd8))(metaStream)\n </p>\n <p>\n  Call in assembly:\n </p>\n <p>\n  qword ptr [RAX + 0xd8]\n </p>\n <p>\n  How can I make ghidra show me which function is being called?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "100",
    "tags": [
        "ghidra",
        "pe"
    ],
    "user": "Proton",
    "time": "Mar 25, 2024 at 19:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem is that Ghidra for whatever reason cannot determine what the actual target of this call is. This might just be a limitation of the C++ support in Ghidra. There are plugins that try to support this better:\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/astrelsky/Ghidra-Cpp-Class-Analyzer\" rel=\"nofollow noreferrer\">\n    https://github.com/astrelsky/Ghidra-Cpp-Class-Analyzer\n   </a>\n  </li>\n  <li>\n   <a href=\"https://insights.sei.cmu.edu/blog/using-ooanalyzer-to-reverse-engineer-object-oriented-code-with-ghidra/\" rel=\"nofollow noreferrer\">\n    https://insights.sei.cmu.edu/blog/using-ooanalyzer-to-reverse-engineer-object-oriented-code-with-ghidra/\n   </a>\n  </li>\n </ul>\n <p>\n  but you can also do this manually if you already know the target function via manual reverse engineering:\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>ref = program.referenceManager.addMemoryReference(\n                    callsite, # FROM, the address of the call instruction\n                    func_address, //TO, the address of the function being called\n                    RefType.UNCONDITIONAL_CALL,\n                    SourceType.USER_DEFINED,\n                    0)\nprogram.referenceManager.setPrimary(ref, true)\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Mar 26, 2024 at 15:16",
            "is_accepted": true,
            "comments": []
        }
    ]
}