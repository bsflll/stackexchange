{
    "title": "Using MIPS EJTAG functionality in OpenOCD",
    "link": "https://reverseengineering.stackexchange.com/questions/2397/using-mips-ejtag-functionality-in-openocd",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to use the\n  <a href=\"http://openocd.sourceforge.net/\">\n   OpenOCD\n  </a>\n  functionality of a\n  <a href=\"http://dangerousprototypes.com/docs/Bus_Blaster_v2_design_overview\">\n   BusBlaster\n  </a>\n  to debug a MIPS target. However, it doesn't look as though my target MIPS chip is defined in the list of sample target chip configurations - in my directory for OpenOCD, version 0.7.0, I am looking in the\n  <code>\n   tcl/target\n  </code>\n  folder.\n </p>\n <ol>\n  <li>\n   How mature is the MIPS EJTAG functionality in OpenOCD? I see in the changelog that MIPS EJTAG support has been improved, but am having trouble finding details in the project about this and I don't yet have the familiarity with OpenOCD or EJTAG to understand what might be missing from the\n   <code>\n    src/target/mips_ejtag\n   </code>\n   files.\n  </li>\n  <li>\n   What configuration steps are involved in setting up OpenOCD to do JTAG debugging on a new MIPS EJTAG target?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "4k",
    "tags": [
        "hardware",
        "jtag",
        "mips"
    ],
    "user": "dingo_kinznerhook",
    "time": "Jun 4, 2014 at 7:30",
    "comments": [
        {
            "user": "Francisco",
            "text": "<html><body><span class=\"comment-copy\">\n Any new hints on this subject? BusBlaster has a new VID/PID and even correcting those, I still cannot \"halt\" the MIPS-4KEc device. Thanks! Francisco\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Chris Stratton",
            "text": "<html><body><span class=\"comment-copy\">\n The answer form may only be used to post answers, not to ask questions.  Typically you need to have some key information about your target, especially the register lengths.  And if you're trying to load your own code, you typically need to know things like how to configure the DRAM controller and clocking, etc.  For one SoC the module vendor sent me a command file for some proprietary tool that was intelligible enough to manually translate into an openocd script.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am going to take a stab at answering my own question, and may update the answer in the future with additional details about OpenOCD.\n </p>\n <p>\n  There are some things that I did not understand about the Bus Blaster and there are some things that I did not understand about OpenOCD, and in both cases reading the documentation better would have helped. I ended up compiling OpenOCD from source under Ubuntu.\n </p>\n <p>\n  The user documentation for OpenOCD is available on the\n  <a href=\"http://openocd.sourceforge.net/documentation/\" rel=\"nofollow\">\n   OpenOCD website\n  </a>\n  , and the instructions for creating configuration files are located\n  <a href=\"http://openocd.sourceforge.net/doc/html/Config-File-Guidelines.html\" rel=\"nofollow\">\n   here\n  </a>\n  . There are three types of configuration files:\n </p>\n <ul>\n  <li>\n   <em>\n    Interface\n   </em>\n   . This is the configuration file which describes the device OpenOCD is connecting with - in my case, a Bus Blaster. The configuration file\n   <code>\n    busblaster.cfg\n   </code>\n   is located in the\n   <code>\n    openocd-0.7.0/tcl/interface/\n   </code>\n   folder. Also, someone described the configuration file online on the\n   <a href=\"http://dangerousprototypes.com/docs/Bus_Blaster_OpenOCD_guide\" rel=\"nofollow\">\n    BusBlaster OpenOCD guide.\n   </a>\n   OpenOCD version 0.5.0 and older don't include the configuration file for the Bus Blaster.\n  </li>\n  <li>\n   <em>\n    Board\n   </em>\n   . This is a configuration file which describes setup particular to the PCB you are connecting to - for example, details about external flash go in this file.\n  </li>\n  <li>\n   <em>\n    Target\n   </em>\n   . These are details about the target processor, in my case a MIPS32 processor. MIPS32 is a variant of MIPS M4K. OpenOCD supports both of these, and the documentation says that MIPS32 is the only supported variant of MIPS M4K. If you allow OpenOCD to autoprobe, which it does if no target is specified, OpenOCD will produce lines like the ones below that describe a new TAP that could be created.\n  </li>\n </ul>\n <p>\n  <code>\n   Warn : AUTO auto0.tap - use \"jtag newtap auto0 tap -expected-id 0x???????? ...\"\n  </code>\n  <code>\n   Warn : AUTO auto0.tap - use \"... -irlen ?\"\n  </code>\n </p>\n <p>\n  You can use the autoprobed TAP lines to create a new target file in\n  <code>\n   openocd-0.7.0/tcl/target\n  </code>\n  . In addition to those lines, add a line declaring a new target (I borrowed this from another target configuration) specifying which architecture and variant it is when creating the TAP.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "dingo_kinznerhook",
            "time": "Aug 12, 2013 at 21:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}