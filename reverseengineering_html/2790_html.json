{
    "title": "Patching PE File - Adding data",
    "link": "https://reverseengineering.stackexchange.com/questions/2790/patching-pe-file-adding-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After opening a PE file with  a disassembler, I know which instructions I have to patch. And if I have to add some data I can adjust the PE file structure manually so that it gets parsed correctly and executes.\n </p>\n <p>\n  Example,\nReplace\n  <code>\n   EB 1C\n  </code>\n  with\n  <code>\n   E9 1C FD\n  </code>\n </p>\n <p>\n  Now, the question. I have to modify multiple locations and manually adjusting values is killing me. Can I do this with\n  <a href=\"http://code.google.com/p/pefile\" rel=\"noreferrer\">\n   code.google.com/p/pefile\n  </a>\n  from python, which I am assuming will help in adjusting? Or is there any other module I can use? Some sample code I can find?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "1k",
    "tags": [
        "pe"
    ],
    "user": "Zingaro",
    "time": "Sep 15, 2013 at 3:39",
    "comments": [
        {
            "user": "Zingaro",
            "text": "<html><body><span class=\"comment-copy\">\n Two changes have been done by editors, which I think are wrong. One changed pefile to PEfile, the other added space and it became PE file. I am referring to\n <a href=\"http://code.google.com/p/pefile/\" rel=\"nofollow noreferrer\">\n  code.google.com/p/pefile\n </a>\n So, it should be all small and one single word.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Karsten Hahn",
            "text": "<html><body><span class=\"comment-copy\">\n LordPE is able to rebuild a PE based on your changes:\n <a href=\"http://www.woodmann.com/collaborative/tools/index.php/LordPE\" rel=\"nofollow noreferrer\">\n  woodmann.com/collaborative/tools/index.php/LordPE\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is not that easy, or it is rather error prone. If you are going to insert 3 bytes in place of 2 bytes, you would be better off if you do a\n  <code>\n   trampoline\n  </code>\n  : jump to some other place, do what you want, then jump back to the next instruction. By employing trampolining, you can also save the registers.\n </p>\n <p>\n  A small sample could be like this:\n </p>\n <pre><code>jmp SomePlace  <---destroy old bytes and insert an unconditional jump  \nNextInst:      <----|_________________________  \n ..                                           |    \nSomePlace:                                    |   \n\"dancing with wolves\"                         |  \njmp NextInst <------- this will jump back to->|  \n</code></pre>\n <p>\n  In the case, if you are interested in replacing two bytes with two bytes, then almost all hex editors have some form of search and replace functionality.\n </p>\n <p>\n  Or you can write a simple script in your favorite utility.\n </p>\n <p>\n  A simple windbg example script for replacing all the\n  <code>\n   push XXXX\n  </code>\n  <code>\n   68 XXXXXX\n  </code>\n  bytes to\n  <code>\n   EB FE\n  </code>\n  . This example is a prototype, you need to tweak it based on the pattern you get:\n </p>\n <pre><code>.foreach /pS4 /ps 9 ( place { # 68?? 401000 l?0x20} ) {u place L1;ew place feeb;u place L1 } \n</code></pre>\n <p>\n  All what this does is\n  <code>\n   search\n  </code>\n  the disassembly for the\n  <code>\n   pattern 68??\n  </code>\n  (blind search can alter unintended data, use with caution).\n </p>\n <p>\n  When it is found, it uses the address where it was found to replace the two bytes\n  <code>\n   68XX\n  </code>\n  with\n  <code>\n   EB FE\n  </code>\n  .\n </p>\n <p>\n  It does this for all the bytes that are found in a given range. In addition to this, it also prints out the assembly prior to modification and after modification:\n </p>\n <pre><code># 68??  pattern search command in windbg \n401000 l?0x20  start search from 0x401000 end at 401020 \nu place l1 disassemble one instruction when pattern found\new place feeb  write word 0xfeeb at found address  \ndis assemble again\nloop with foreach where ps and pS are skip before and skip after bytes \n</code></pre>\n <p>\n  A sample output of the above script:\n </p>\n <pre><code>0:000> .foreach /pS4 /ps 9 ( place { # 68?? 401000 l?0x20} ) {u place L1;ew place feeb;u place L1 } \nmsgbox!start+0x2 [msgbox.asm @ 17]:\n00401002 6800304000      push    offset msgbox!MsgCaption (00403000)\nmsgbox!start+0x2 [msgbox.asm @ 17]:\n00401002 ebfe            jmp     msgbox!start+0x2 (00401002)\nmsgbox!start+0x7 [msgbox.asm @ 17]:\n00401007 6819304000      push    offset msgbox!MsgBoxText (00403019)\nmsgbox!start+0x7 [msgbox.asm @ 17]:\n00401007 ebfe            jmp     msgbox!start+0x7 (00401007)\n</code></pre>\n</div>\n</body></html>",
            "votes": "10",
            "user": "peterh",
            "time": "May 26, 2020 at 23:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Zingaro",
                    "text": "<span class=\"comment-copy\">I understand the part of replacing equal number of bytes but Trampoline is probably what I am looking for then.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">there was an old utility called code snippet creator by iczelion which i remember was useful in adding masm snippets and was able to patch the exe (dont remember if it supported multiple patches or not give it a try and see if it solves your problem  should be available in woodmann's tool repository</span>",
                    "time": null
                }
            ]
        }
    ]
}