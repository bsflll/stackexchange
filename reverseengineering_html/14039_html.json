{
    "title": "How to unpack kkrunchy executables?",
    "link": "https://reverseengineering.stackexchange.com/questions/14039/how-to-unpack-kkrunchy-executables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to figure out how to unpack kkruncy executable,\n  <a href=\"https://github.com/farbrausch/fr_public/tree/master/kkrunchy\" rel=\"nofollow noreferrer\">\n   sources here\n  </a>\n  and\n  <a href=\"http://www.farbrausch.de/~fg/kkrunchy/\" rel=\"nofollow noreferrer\">\n   binaries here\n  </a>\n  , anyone knows how to do it?\n </p>\n <p>\n  My main idea was testing out some little hello world exes compressed with kkrunchy but for some reason the exes will crash. Ie:\n </p>\n <pre><code>#define UNICODE\n\n#include <windows.h>\n\nvoid start()\n{\n    MessageBox(NULL, L\"X\", L\"Y\", MB_OK);\n}\n</code></pre>\n <p>\n  or:\n </p>\n <pre><code>global start\n; kernel32.lib Exports\nextern _ExitProcess@4\nextern _GetStdHandle@4\nextern _WriteFile@20\n\nsection .text\n\nstart:\n    ; DWORD  bytes;\n    mov     ebp, esp\n    sub     esp, 4\n\n    ; hStdOut = GetstdHandle( STD_OUTPUT_HANDLE)\n    push    -11\n    call    _GetStdHandle@4\n    mov     ebx, eax\n\n    ; WriteFile( hstdOut, message, length(message), &bytes, 0);\n    push    0\n    lea     eax, [ebp-4]\n    push    eax\n    push    (message_end - message)\n    push    message\n    push    ebx\n    call    _WriteFile@20\n\n    ; ExitProcess(0)\n    push    0\n    call    _ExitProcess@4\n\n    ; never here\n    hlt\nmessage:\n    db      'Hello', 10, 13, 0\nmessage_end:\n</code></pre>\n <p>\n  I've used the default parameters but the executables are broken. In any case, how could i figure out how to unpack kkrunchy executables?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "tools",
        "unpacking",
        "decompress",
        "packers"
    ],
    "user": "BPL",
    "time": "Nov 24, 2016 at 17:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For my unpacking session I'm using\n  <a href=\"http://x64dbg.com\" rel=\"nofollow noreferrer\">\n   x64dbg\n  </a>\n  and I will unpack the executable in\n  <a href=\"http://www.farbrausch.de/~fg/kkrunchy/kkrunchy_023a2.zip\" rel=\"nofollow noreferrer\">\n   kkrunchy_023a2.zip\n  </a>\n  .\n </p>\n <p>\n  Get to the entry point and enable trace record. Also bind the\n  <code>\n   Trace into beyond trace record\n  </code>\n  option to say\n  <code>\n   Ctrl+/\n  </code>\n  .\n </p>\n <p>\n  <img alt=\"trace record entry point\" src=\"https://i.sstatic.net/35HOF.png\"/>\n </p>\n <p>\n  Next up, press\n  <code>\n   G\n  </code>\n  (for graph) and you should see the return blocks marked in red.\n </p>\n <p>\n  <img alt=\"graph return\" src=\"https://i.sstatic.net/ev4NY.png\"/>\n </p>\n <p>\n  Put a breakpoint on both of them, run, step and you will notice a function with a suspiciously large graph...\n </p>\n <p>\n  <img alt=\"large graph\" src=\"https://i.sstatic.net/H2YV1.png\"/>\n </p>\n <p>\n  Now go ahead and use that\n  <code>\n   Trace into beyond trace record\n  </code>\n  function to keep stepping through while skipping the instructions that were already traced over. You will quickly notice that this algorithm is exhausting the (default)\n  <code>\n   50000\n  </code>\n  step count and a bit of clicking around will tell you where the loop condition is.\n </p>\n <p>\n  <img alt=\"loop condition\" src=\"https://i.sstatic.net/bYy5r.png\"/>\n </p>\n <p>\n  Put a hardware breakpoint on that destination, run and you should see the original entry point.\n </p>\n <p>\n  <img alt=\"oep\" src=\"https://i.sstatic.net/s87Yq.png\"/>\n </p>\n <p>\n  Next up open Scylla\n  <code>\n   Ctrl+I\n  </code>\n  , hit\n  <code>\n   IAT Autosearch\n  </code>\n  ,\n  <code>\n   OK\n  </code>\n  ,\n  <code>\n   Get Imports\n  </code>\n  ,\n  <code>\n   Dump\n  </code>\n  ,\n  <code>\n   Fix Dump\n  </code>\n  and you have an unpacked executable. I will leave it upto you to properly clean out the garbage from that dump...\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "mrexodia",
            "time": "Nov 24, 2016 at 20:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">Thanks for your answer! I've been able to get a dump of the exe following some of your steps but i needed to cheat here (put a hw breakpoint directly :(). I didn't understand the step where you say \"Now go ahead and use that Trace into beyond trace record function to step through while skipping the instructions that were already traced over.\" , I haven't been able to see that label \"OEP Jump\" , look at my <a href=\"http://screencast.com/t/wRShlBtGa8BY\" rel=\"nofollow noreferrer\">screen</a> , i don't see the same labels than you, once i've step after the ret i've pressed \"ctrl+/\" till i've reached <code>0x005F214E</code> , +1</span>",
                    "time": null
                },
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">Btw, with this another <a href=\"https://files.scene.org/get/parties/2012/revision12/pc_64k_intro/gaiamachinafinal.zip\" rel=\"nofollow noreferrer\">executable</a> it seems there isn't those 2 ret blocks in the graph anymore.</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Yes you have to keep stepping with Ctrl+/ until you no longer get to new places. That's where you can see that location. I marked it with comments, but you can see the counts in the info box below. See here for a video <a href=\"https://mega.nz/#!7lpGyZha!20jgbFvV9z2zBIBSujLW694m_meJ70p786LhT4qlP28\" rel=\"nofollow noreferrer\">mega.nz/#!7lpGyZha!20jgbFvV9z2zBIBSujLW694m_meJ70p786LhT4qlP28</a></span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">The other example you linked has a single return block. If you break there and step out, you can see a similar (but different) procedure doing the decompression. You can find the entry point jump at 005EC514 in a similar way.</span>",
                    "time": null
                },
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">Fair enough, in any case, thanks a lot for your nice explanations. I've been using these debuggers for ~2weeks and i've started with olly... after discovering x64dbg i don't miss ollydbg at all :D</span>",
                    "time": null
                }
            ]
        }
    ]
}