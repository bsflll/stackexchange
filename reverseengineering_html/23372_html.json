{
    "title": "Anti-debug clearing hardware breakpoints",
    "link": "https://reverseengineering.stackexchange.com/questions/23372/anti-debug-clearing-hardware-breakpoints",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An application I am debugging somehow manages to clear my hardware breakpoints. I am using TitanHide and x64dbg.\n </p>\n <p>\n  I am observing the following behaviour:\n </p>\n <ul>\n  <li>\n   When placing the first hw breakpoint, it is hit only once - still appears visible in x64dbg but I guess it is disabled in reality and x64dbg doesn't know that.\n  </li>\n  <li>\n   When placing another breakpoint, the\n   <strong>\n    first\n   </strong>\n   breakpoint is hit exactly once.\n  </li>\n </ul>\n <p>\n  I am not sure what causes this obscure behaviour, but what I do know is that my hardware breakpoints are not getting hit, so I researched what could possibly clear them. I have come up with:\n </p>\n <ul>\n  <li>\n   ZwSetInformationThread to hide the thread from the debugger.\n  </li>\n  <li>\n   SetThreadContext to reset the debug registers .\n  </li>\n  <li>\n   Installing a vectored exception handler, cause an exception deliberately, and modify the context from there\n  </li>\n </ul>\n <p>\n  However all 3 methods should be caught by TitanHide, and exceptions should show up in the log of x64dbg (which they don't). Are there any further methods to clear hardware breakpoints?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "790",
    "tags": [
        "windows",
        "anti-debugging",
        "breakpoint"
    ],
    "user": "Whosdatdev",
    "time": "Mar 2, 2020 at 9:12",
    "comments": [
        {
            "user": "Yotamz",
            "text": "<html><body><span class=\"comment-copy\">\n Are you sure that the instruction on which you set the HW breakpoint is actually being executed? The program may detect a HW breakpoint (using GetThreadContext and reading debug registers). The program may then behave differently.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Whosdatdev",
            "text": "<html><body><span class=\"comment-copy\">\n @Yotamz possible, I'll check\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This turned out to be a mixture of hardware breakpoint related bugs in x64dbg (which are fixed by now), and a driver denying access to\n  <strong>\n   some\n  </strong>\n  threads of the target application (meaning the hardware breakpoint could not be set on those). If you encounter this, I suggest updating and checking OpenThread permissions, as x64dbg fails silently here :/\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Whosdatdev",
            "time": "Jun 3, 2020 at 14:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}