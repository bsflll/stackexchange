{
    "title": "Seed/Key Constant Value",
    "link": "https://reverseengineering.stackexchange.com/questions/23256/seed-key-constant-value",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse a seed/key algorithm that has a constant value inside it. and there is different const value for different device that use this algorithm.\ni can give some sample from each device so i have seed/key of devices. \nthe algorithm is :\n </p>\n <pre><code>int SeedKey_Algorithm(int seed){ // sample input: 0x01010101\nfor (int i = 0; i < 0x23; i++)\n{\n    if ((seed & 0x80000000) == 0x80000000)\n    {\n        seed = ( x ^ seed); // x is constant value\n    }\n    seed = seed << 1;\n}\nreturn seed;\n//out = 0xFFAA5550\n}\n</code></pre>\n <p>\n  then if when inject the 0x01010101 as input we get 0xFFAA5550 as output. \nso how i can find this constant value. \nis there any mathematics algorithm for find it? \nis it needed more sample for reverse this?\n </p>\n <p>\n  <strong>\n   UPDATE\n  </strong>\n  \n\n  so i check another device that work with this algorithm and i find 12 true value for 0x01010101.\n  \n\n  <code>\n   0x0d7c76ff,\n 0x1049164d,\n 0x37749eba,\n 0x6071e476,\n 0x6cced1e7,\n 0x7657a4aa,\n 0x8d7c76ff,\n 0x9049164d,\n 0xb7749eba,\n 0xe071e476,\n 0xecced1e7,\n 0xf657a4aa\n  </code>\n </p>\n <p>\n  but for 0x02020202 i can't find any right value :(\n  \n\n  is this possible? or I made a mistake?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "600",
    "tags": [
        "debugging"
    ],
    "user": "Unicornux",
    "time": "Feb 16, 2020 at 10:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The keyspace for x is only\n  <code>\n   2**32\n  </code>\n  . This can be easily bruteforced. Also you can use something like\n  <a href=\"https://github.com/Z3Prover/z3\" rel=\"nofollow noreferrer\">\n   z3\n  </a>\n  a SAT solver to model the equations.\nFor your given pair these were the possible 16 values for x\n </p>\n <pre><code>0x153f11fa, 0x953f11fa\n0x24c66e44, 0xa4c66e44\n0x3bcc14c8, 0xbbcc14c8\n0x3c2918cb, 0xbc2918cb\n0x477bb478, 0xc77bb478\n0x662a1eac, 0xe62a1eac\n0x71539c35, 0xf1539c35\n0x76a55966, 0xf6a55966\n</code></pre>\n <p>\n  With an additional keypair the candidates can be boiled down to 2 values\n </p>\n <pre><code>xxxxxxxxxx:::0x01010101:0x02020202:0x03030303:0x08010101\n0x3bcc14c8:::0xffaa5550:0x88cc8330:0x7766d660:0x87a95f90\n0xbbcc14c8:::0xffaa5550:0x88cc8330:0x7766d660:0x87a95f90\n</code></pre>\n <p>\n  Both of these can be used interchangeably as the 31st bit is inconclusive.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Feb 15, 2020 at 11:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Unicornux",
                    "text": "<span class=\"comment-copy\">thanks @sudhacker, so i need more sample to achieve unique answer. is this ture?</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">Can you provide additional samples?</span>",
                    "time": null
                },
                {
                    "user": "Unicornux",
                    "text": "<span class=\"comment-copy\">absolutely yes.</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">Please add as many as possible pairs you can.</span>",
                    "time": null
                },
                {
                    "user": "Unicornux",
                    "text": "<span class=\"comment-copy\">o0o0om. . .I didn't understand what you mean. but i have some sample for new device that worked with this algorithm but different counter or different constant value. for example: 0x01010101 ==&gt; 0xDFBB4565 and 0x02020202 ==&gt; 0x21028781 and 0x02010101 ==&gt; 0xB1C7ED2B and 0x08010101 ==&gt; 0xFB9718DE</span>",
                    "time": null
                }
            ]
        }
    ]
}