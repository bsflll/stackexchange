{
    "title": "How to find the starting address of text section of a DLL inside a process? (64 bit)",
    "link": "https://reverseengineering.stackexchange.com/questions/22130/how-to-find-the-starting-address-of-text-section-of-a-dll-inside-a-process-64",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There was a question about this a year ago, but the answer doesn't explain how to do it in C/C++:\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/18840/how-to-find-start-of-text-section\">\n   How to find start of .text section?\n  </a>\n </p>\n <p>\n  I'm not talking about module start address, which we can get using GetModuleHandle(module)\n </p>\n <p>\n  I'm talking about the start of text section of a DLL inside a process, so when i inject a process (using dll injection) i can get the starting address of a target DLL and patch part of its instructions, basically i know the offset of a instruction inside the DLL's file on disk, and i just want to find the start of text section and add to it that offset so i can patch it by injecting into the process that loaded it\n </p>\n <p>\n  and the offset of that part inside the PE file is different from disk, for example in a test program that i checked the offset in disk was 0x300 and on memory was 0x1000 (32 bit app)\n </p>\n <p>\n  so how can i do this   that can work in both 32 bit and 64 bit apps?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "6k",
    "tags": [
        "windows",
        "x86",
        "x86-64",
        "windows-10"
    ],
    "user": "Mery Ted",
    "time": "Sep 16, 2019 at 4:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are lots of\n  <a href=\"https://docs.microsoft.com/en-in/windows/win32/api/dbghelp/\" rel=\"nofollow noreferrer\">\n   helper functions\n  </a>\n  in dbghelp.h to fully parse the PE file\n </p>\n <p>\n  if you do not wish to use dbghelp.h almost all of these function has an Rtl Equivalent function in ntdll.dll which you can call dynamically (\n  <code>\n   LoadLibrary\n  </code>\n  ,\n  <code>\n   GetProcAddres\n  </code>\n  )\n </p>\n <p>\n  For example, the function\n  <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-imagentheader\" rel=\"nofollow noreferrer\">\n   <code>\n    ImageNtHeader\n   </code>\n  </a>\n  has an equivalent\n  <code>\n   RtlImageNtHeader\n  </code>\n  in ntdll.dll which you can use with\n  <code>\n   GetProcAddress()\n  </code>\n </p>\n <p>\n  Below is a sample code that dump some pertinent details of all sections in a given module using dbghelp.h:\n </p>\n <pre><code>#include <windows.h>\n#include <dbghelp.h>\n#include <stdio.h>\n#pragma comment(lib, \"dbghelp.lib\")\nint main(void)\n{\n    HMODULE hMod = GetModuleHandleA(\"kernelbase.dll\");\n    if (hMod)\n    {\n        PIMAGE_NT_HEADERS64 NtHeader = ImageNtHeader(hMod);\n        WORD NumSections = NtHeader->FileHeader.NumberOfSections;\n        PIMAGE_SECTION_HEADER Section = IMAGE_FIRST_SECTION(NtHeader);\n        for (WORD i = 0; i < NumSections; i++)\n        {\n            printf(\"%-8s\\t%x\\t%x\\t%x\n\", Section->Name, Section->VirtualAddress,\n                   Section->PointerToRawData, Section->SizeOfRawData);\n            Section++;\n        }\n    }\n    return 0;\n}\n</code></pre>\n <p>\n  compile and linked and executed\n </p>\n <pre><code>cl /Zi /W4 /nologo /analyze /EHsc /Od %1 /link /release\n\nTextSectAddr.exe\n======================================\nName            VA      Raw     Size\n======================================\n.text           1000    400     102600\n.rdata          104000  102a00  155e00\n.data           25a000  258800  1600\n.pdata          25f000  259e00  e800\n.didat          26e000  268600  800\n.rsrc           26f000  268e00  600\n.reloc          270000  269400  22400\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "winapiadmin",
            "time": "Nov 8, 2023 at 23:14",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In order to get the text section of the desired dll, first you need its base address (DOS Header in other words) which leads you to its PE Header (using the\n  <code>\n   e_lfanew\n  </code>\n  field of\n  <code>\n   IMAGE_DOS_HEADER\n  </code>\n  ).\n </p>\n <p>\n  At the PE Header (or in it's structured name\n  <code>\n   IMAGE_NT_HEADERS\n  </code>\n  ) you'll find a field named\n  <code>\n   FileHeader\n  </code>\n  that contain information regarding the number of sections exist in the desired image.\n </p>\n <p>\n  to get to the first section (again it has a structured name\n  <code>\n   IMAGE_SECTION_HEADER\n  </code>\n  ), you need to pass the DOS_HEADER, and NT_HEADERS by adding their size to the image's base address, and then you iterate through the sections checking it's Characteristics field for the values\n </p>\n <pre><code>IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE\n</code></pre>\n <p>\n  which indicates for code/text section.\n </p>\n <p>\n  When you reach the header of the text section, you can use the field\n </p>\n <pre><code>VirtualAddress\n</code></pre>\n <p>\n  to get the start address of the code section\n </p>\n <p>\n  Think of it as this struct\n </p>\n <pre><code> ___________________________\n|                           |\n|      IMAGE_DOS_HEADER     |\n|___________________________|\n|                           |\n|     IMAGE_NT_HEADERS      | <-- Contains FileHeader which has the number of sections exist in the dll\n|___________________________|\n|                           |\n|   IMAGE_SECTION_HEADER    |\n|___________________________|\n|                           |\n|   IMAGE_SECTION_HEADER    |\n|___________________________|\n|                           |\n|   IMAGE_SECTION_HEADER    |\n|___________________________|\n|                           |\n|   IMAGE_SECTION_HEADER    |\n|___________________________|\n|                           |\n|   IMAGE_SECTION_HEADER    |\n|___________________________|\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Sep 15, 2019 at 20:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi @stylo and welcome tom RE.SE. Thanks for contributing on our site. Just as a remark, the inquirer was rather specific about needing some kind of API or C/C++ function rather than merely the description of how to achieve the goal.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is another way to get PE image sections using\n  <a href=\"https://reverseengineering.stackexchange.com/a/22131/23069\">\n   stylo's answer\n  </a>\n  .\nThe following C code uses\n  <code>\n   fopen()\n  </code>\n  ,\n  <code>\n   fread()\n  </code>\n  and\n  <code>\n   fseek()\n  </code>\n  functions.\nSo, this code can be use in any Unix-like systems.\n </p>\n <pre><code>int main(int argc, char* argv[])\n{\n    if (argc < 2)\n        return;\n\n    FILE* file = fopen(argv[1], \"rb\");\n    if (file == NULL)\n        return;\n\n    IMAGE_DOS_HEADER dosHeader = { 0 };\n    fread(&dosHeader, sizeof dosHeader, 1, file);\n    fseek(file, dosHeader.e_lfanew, SEEK_SET);\n\n    IMAGE_NT_HEADERS ntHeader = { 0 };\n    fread(&ntHeader, sizeof ntHeader, 1, file);\n\n    IMAGE_SECTION_HEADER secHeader = { 0 };\n\n    for (int i = 0; i < ntHeader.FileHeader.NumberOfSections; i++)\n    {\n        fread(&secHeader, sizeof secHeader, 1, file);\n        printf(\"%-8s\\t%x\\t%x\\t%x\n\",\n               secHeader.Name,\n               secHeader.VirtualAddress,\n               secHeader.PointerToRawData,\n               secHeader.SizeOfRawData);\n    }\n\n    return 0;\n}\n</code></pre>\n <p>\n  So, what does the code do?\n </p>\n <ul>\n  <li>\n   <a href=\"http://man7.org/linux/man-pages/man3/fdopen.3.html\" rel=\"nofollow noreferrer\">\n    <code>\n     fopen(3)\n    </code>\n   </a>\n   opens the file in binary mode.\n  </li>\n  <li>\n   <a href=\"http://man7.org/linux/man-pages/man3/fread.3.html\" rel=\"nofollow noreferrer\">\n    <code>\n     fread(3)\n    </code>\n   </a>\n   reads\n   <code>\n    IMAGE_DOS_HEADER\n   </code>\n   structure.\n  </li>\n  <li>\n   <a href=\"http://man7.org/linux/man-pages/man3/fseek.3.html\" rel=\"nofollow noreferrer\">\n    <code>\n     fseek(3)\n    </code>\n   </a>\n   sets file position indicator for the\n   <code>\n    file\n   </code>\n   stream to the\nstarting of\n   <code>\n    IMAGE_NT_HEADERS\n   </code>\n   structure using\n   <code>\n    dosHeader.e_lfanew\n   </code>\n   value.\n  </li>\n  <li>\n   <a href=\"http://man7.org/linux/man-pages/man3/fread.3.html\" rel=\"nofollow noreferrer\">\n    <code>\n     fread(3)\n    </code>\n   </a>\n   reads\n   <code>\n    IMAGE_NT_HEADERS\n   </code>\n   structure.\n  </li>\n  <li>\n   Now reads all the section headers in a loop. Remember with\n   <code>\n    fread\n   </code>\n   the\nposition indicator of the stream is advanced by the total amount of bytes read.\nSo, no need to increment\n   <code>\n    secHeader\n   </code>\n   .\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}