{
    "title": "Using Angr's Claripy to bruteforce a number",
    "link": "https://reverseengineering.stackexchange.com/questions/30461/using-angrs-claripy-to-bruteforce-a-number",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to bruteforce an address as part of a CTF challenge using Angr's Claripy.\nThe function is the following:\n </p>\n <pre><code>unsigned __int64 __fastcall sub_555555555310(\n        unsigned __int64 rand_addr,\n        unsigned __int64 const1,\n        unsigned __int64 const2)\n{\n  unsigned __int64 v4; \n\n  v4 = 0LL;\n  while ( rand_addr )\n  {\n    if ( (rand_addr & 1) != 0 )\n      v4 = (const1 + v4) % const2;\n    rand_addr >>= 1;\n    const1 = 2 * const1 % const2;\n  }\n  return v4;\n}\n</code></pre>\n <p>\n  where rand_addr is the address I'm trying to reverse. To be precise, I only need the lower half of the address (32 lower bits). I have v4, const1 and const2 values.\nThis is what I've done so far with Claripy:\n </p>\n <pre><code>def do_op(rand, const1, const2):\n    v4 = claripy.BVV(0, 64)\n    b = claripy.BVV(0, 2)\n    #while(claripy.UGE(rand, 1)):\n    for i in range(64):\n        b = claripy.If(rand & 1 != 0, claripy.BVV(1,1), claripy.BVV(0,1))\n        v4 = claripy.If(b == 1, (const1 + v4) % const2, v4)\n        rand = claripy.If(b == 0, claripy.RotateRight(rand, 1), rand)\n        const1 = claripy.If(b == 0, 2 * const1 % const2, const1)\n    s.add(v4[31:0] == claripy.BVV(<some_value>, 32))\n</code></pre>\n <p>\n  Angr claims that this solver is unsat and I was wondering what am I doing wrong.\n </p>\n <p>\n  Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "300",
    "tags": [
        "angr"
    ],
    "user": "h3llo_world",
    "time": "Jun 1, 2022 at 7:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are some problems with the way you write constraints in claripy. Here's a simple correction\n </p>\n <pre><code>import claripy\ns = claripy.Solver()\nconst1 = claripy.BVS('const1', 64)\nconst2 = claripy.BVS('const2', 64)\nrand = claripy.BVS('rand', 64)\nv4 = claripy.BVS('v4', 64)\nfor i in range(64):\n    v4 = claripy.If(rand & 1 != 0, (const1 + v4) % const2, v4)\n    rand = rand >> 1\n    const1 = 2 * const1 % const2\ns.add(v4 == 12345)\nprint(\"check\")\nprint(s.check_satisfiability())\n</code></pre>\n <p>\n  You don't need to check the\n  <code>\n   If\n  </code>\n  for every statement. In the original code it was used only to change v4.\nFor\n  <code>\n   BVV\n  </code>\n </p>\n <blockquote>\n  <p>\n   Creates a bit-vector value (i.e., a concrete value).\n  </p>\n </blockquote>\n <p>\n  For\n  <code>\n   BVS\n  </code>\n </p>\n <blockquote>\n  <p>\n   Creates a bit-vector symbol (i.e., a variable).\n  </p>\n </blockquote>\n <p>\n  The C code shows right shift, not\n  <code>\n   RotateRight\n  </code>\n  so just use the\n  <code>\n   >>\n  </code>\n  operator since its been implemented with\n  <code>\n   __rshift__\n  </code>\n  in claripy.\n </p>\n <p>\n  Another thing to work on is to search for the constants used in\n  <code>\n   const1\n  </code>\n  and\n  <code>\n   const2\n  </code>\n  - you might get a standard function.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Jun 1, 2022 at 8:13",
            "is_accepted": true,
            "comments": [
                {
                    "user": "h3llo_world",
                    "text": "<span class=\"comment-copy\">Thank you so much! and sorry for the late reply.</span>",
                    "time": null
                }
            ]
        }
    ]
}