{
    "title": "IDA Strings to Functions (ARM, Protected Functions)",
    "link": "https://reverseengineering.stackexchange.com/questions/11779/ida-strings-to-functions-arm-protected-functions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working with an ARM (android apk: libgame.so) file that has protected functions (sub_xxxx, etc). The strings are supposed to have cross references with their function, but most of them reference something like this:\n </p>\n <pre><code> unk_134AB30     DCB 0xD0 ; -            ; DATA XREF: .data:0134AB58o\n.data:0134AB31                 DCB    0\n.data:0134AB32                 DCB    0\n.data:0134AB33                 DCB    0\n.data:0134AB34                 DCD aMlinewidth         ; \"mLineWidth\"\n.data:0134AB38                 DCD aF_0                ; \"f\"\n</code></pre>\n <p>\n  Are these structures? If so, how do I get the actual value or function of \"mLineWidth\"?\n </p>\n <p>\n  To get to here, I looked at the cross-references to the string, and aMlinewidth references it as so:\n </p>\n <pre><code> aLinewidth      DCB \"lineWidth\",0\n</code></pre>\n <p>\n  I then looked at the cross-references to, \"aLinewidth\" and got where I am now. Another example would be going from: \"mCueBallRenderLine\" string:\n </p>\n <pre><code>aMcueballrender DCB \"mCueBallRenderLine\",0\n</code></pre>\n <p>\n  And then the cross-references of aMcueballrender lead to here:\n </p>\n <pre><code>                 DCD aC_0                ; \"c\"\n.data:01625F88 unk_1625F88     DCB 0x32 ; 2            ; DATA XREF: .data:01626004o\n.data:01625F89                 DCB    1\n.data:01625F8A                 DCB    0\n.data:01625F8B                 DCB    0\n.data:01625F8C   \n\nDCD aMcueballrender     ; \"mCueBallRenderLine\"\n</code></pre>\n <p>\n  , Which is similar to the other example in terms of it's structure. All of the unknown references (unk_xxxx) seen above all lead to something like this:\n </p>\n <pre><code>DCD unk_151AB20\n.data:0151C2DC                 DCD unk_151B7C0\n.data:0151C2E0                 DCD unk_151BED0\n.data:0151C2E4                 DCD unk_151A5A0\n.data:0151C2E8                 DCD unk_151BDE0\n.data:0151C2EC                 DCD unk_151B6C0\n.data:0151C2F0                 DCD unk_151AAF0\n.data:0151C2F4                 DCD unk_151BE80\n.data:0151C2F8                 DCD unk_151BF70\n.data:0151C2FC                 DCD unk_151B180\n.data:0151C300                 DCD unk_151BF20\n.data:0151C304                 DCD unk_151ABA0\n.data:0151C308                 DCD unk_151B2E0\n.data:0151C30C                 DCD unk_151B270\n</code></pre>\n <p>\n  I am trying to find the actual function/value of the string, but I can't get to anywhere where it lists sub_xxxxx.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "897",
    "tags": [
        "ida",
        "android",
        "arm",
        "functions"
    ],
    "user": "Aspire",
    "time": "Jan 17, 2016 at 13:32",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Would you post a bit more examples and how exactly these strings are referenced ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n Read up on how JNI works, compile and reverse some JNI code. These functions (and no, they are not protected) look like they are native methods registered via JNI\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ul>\n  <li>\n   These sub_xxx functions are not protected, just stripped, which means that your executable is compiled without debug information.\n  </li>\n  <li>\n   It looks like that access to these strings is centralized and done with some of the functions you did not find yet.\n  </li>\n  <li>\n   Yes, you can represent these similarly organized definitions as structures or array of structures. This will probably make your RE work easier.\n  </li>\n  <li>\n   The last array you referencing should be referenced from somewhere too. Try to find where it is referenced from, and may be this will give you some information about structure of the data. I suggest that there is a function, which returns address of one of these structures or its parts by id and this function references the last array you mentioned or its parts.\n  </li>\n </ul>\n <p>\n  Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Jan 17, 2016 at 14:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}