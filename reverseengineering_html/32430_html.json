{
    "title": "Keystone rust bindings error when assembling \"syscall; ret\" shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/32430/keystone-rust-bindings-error-when-assembling-syscall-ret-shellcode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on a project related to Process Injection for learning Rust. I have to inject shellcode at some points and use the Keystone engine for assembling shellcode from source.\n </p>\n <p>\n  I detected that the rust bindings were not successful assembling\n  <code>\n   syscall; ret\n  </code>\n  shellcode.\n </p>\n <p>\n  I then tried to reproduce by creating a python and rust minimal version and ensuring the syntax in use was the same for both version (also both bindings has the same major and minor versions, which is v0.9)\n </p>\n <p>\n  <strong>\n   Python version:\n  </strong>\n </p>\n <pre><code>from keystone import *\nfrom capstone import *\n\ncode = \"syscall; ret\"\n\nks = Ks(KS_ARCH_X86, KS_MODE_64)\nks.syntax = KS_OPT_SYNTAX_INTEL\nencoding, count = ks.asm(code)\n\ncs = Cs(CS_ARCH_X86, CS_MODE_64)\ndisass = cs.disasm(bytes(encoding), 0x1000)\n\nprint(\"Assembly: %s\" % code)\nprint(\"Binary: %s\" % encoding)\nprint(\"Disassembly:\")\nfor i in disass:\n    print(\"0x%x:\\t%s\\t%s\" % (i.address, i.mnemonic, i.op_str))\n</code></pre>\n <p>\n  <strong>\n   Rust version:\n  </strong>\n </p>\n <pre><code>use keystone::{self, MODE_64};\nuse capstone::{self, prelude::BuildsCapstone};\n\nfn main() {\n    let code = \"syscall; ret\";\n\n    let ks = keystone::Keystone::new(keystone::Arch::X86, MODE_64).unwrap();\n    ks.option(keystone::OptionType::SYNTAX, keystone::OPT_SYNTAX_INTEL).unwrap();\n\n    let encoding = ks.asm(code.to_string(), 0x1000).unwrap();\n\n    let cs = capstone::Capstone::new()\n                .x86()\n                .mode(capstone::arch::x86::ArchMode::Mode64)\n                .build().unwrap();\n    \n    let insns = cs.disasm_all(&encoding.bytes, 0x1000).unwrap();\n    println!(\"Assembly: {}\", code);\n    println!(\"Binary: {:?}\", encoding.bytes);\n    println!(\"Disassembly:\");\n    for i in insns.iter() {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n <p>\n  Here is the result of running the programs:\n  <a href=\"https://i.sstatic.net/9oAxp.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Testing of both programs\" src=\"https://i.sstatic.net/9oAxp.png\"/>\n  </a>\n </p>\n <p>\n  As you can see, the Rust implementation outputs random binary code and I would like to know why.\n </p>\n <p>\n  Is it related to a misunderstanding of rust ? or of the rust bindings ?\nA bug in the rust bindings ?\n </p>\n <p>\n  I'm kinda stuck in my comprehension of the problem so if anyone can help me.\n </p>\n <p>\n  Regards.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "122",
    "tags": [
        "assembly"
    ],
    "user": "MAD KHAJIIT",
    "time": "Oct 24, 2023 at 16:54",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n C:\\>python -c \"from keystone import *;print(Ks(KS_ARCH_X86 , KS_MODE_64).asm(b'syscall;ret')\") ([15, 5, 195], 2) =>0x0f0x050xc3\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a problem with the\n  <code>\n   keystone\n  </code>\n  crate available on\n  <a href=\"https://crates.io/crates/keystone\" rel=\"nofollow noreferrer\">\n   crates.io\n  </a>\n  - It runs with the version 0.9.0 and hasn't been updated for a while. It also has a few bugs which have now been fixed in 0.9.2.\n </p>\n <p>\n  You can use an unofficial binding like\n  <a href=\"https://github.com/impalabs/keystone-bindings\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  which is getting updates.\nOr you can use the ones\n  <a href=\"https://github.com/keystone-engine/keystone/tree/master/bindings/rust\" rel=\"nofollow noreferrer\">\n   https://github.com/keystone-engine/keystone/tree/master/bindings/rust\n  </a>\n  with your project where it'll build the latest compatible binding with\n  <code>\n   cmake\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "sudhackar",
            "time": "Oct 26, 2023 at 9:40",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Cmake Version\n </p>\n <pre><code>D:\\>cmake --version\ncmake version 3.28.0-rc3\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\n</code></pre>\n <p>\n  rust version\n </p>\n <pre><code>D:\\>cargo -V\ncargo 1.73.0 (9c4383fb5 2023-08-26)   \n</code></pre>\n <ol>\n  <li>\n   create a project directory  md dir\n  </li>\n  <li>\n   init the project in the directory  with cargo init\n  </li>\n  <li>\n   add the Dependency \"keystone-engine\" to Cargo.toml with cargo add\n  </li>\n </ol>\n <hr/>\n <pre><code>D:\\>md rustkey\n\nD:\\>cd rustkey\n\nD:\\rustkey>cargo init\n     Created binary (application) package\n\nD:\\rustkey>cargo add keystone-engine\n    Updating crates.io index\n      Adding keystone-engine v0.1.0 to dependencies.\n             Features:\n             + build-from-src\n             + cmake\n             - pkg-config\n             - use-system-lib\n    Updating crates.io index\n</code></pre>\n <p>\n  source to compile\n </p>\n <pre><code>D:\\rustkey>cd src\n\nD:\\rustkey\\src>notepad main.rs\n\nD:\\rustkey\\src>type main.rs\nuse keystone_engine::*;\nfn main() {\n        let engine = Keystone::new(Arch::X86, Mode::MODE_64).expect(\"Could not initialize Keystone engine\");\n        let result = engine.asm(\"syscall;ret\".to_string(),0).expect(\"Could Not Assemble\");\n        println!(\"{}\",result);\n}\n\nD:\\rustkey\\src>cd ..\n</code></pre>\n <p>\n  build the project\n </p>\n <pre><code>D:\\rustkey>cargo build\n   Compiling cc v1.0.83\n   Compiling libc v0.2.149\n   Compiling bitflags v1.3.2\n   Compiling cmake v0.1.50\n   Compiling keystone-engine v0.1.0\n   Compiling rustkey v0.1.0 (D:\\rustkey)\n    Finished dev [unoptimized + debuginfo] target(s) in 5m 49s\n</code></pre>\n <p>\n  running the project multiple times\n </p>\n <pre><code>    D:\\rustkey>cargo -q run\n0f05c3\n\nD:\\rustkey>cargo -q run\n0f05c3\n\nD:\\rustkey>cargo -q run\n0f05c3\n\nD:\\rustkey>cargo -q run\n0f05c3\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Oct 26, 2023 at 12:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\"><code>keystone-engine</code> is the unofficial bindings I recommended in my answer as well. <a href=\"https://github.com/impalabs/keystone-bindings\" rel=\"nofollow noreferrer\">github.com/impalabs/keystone-bindings</a></span>",
                    "time": null
                }
            ]
        }
    ]
}