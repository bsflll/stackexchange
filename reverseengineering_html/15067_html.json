{
    "title": "Safe way to download a malware payload?",
    "link": "https://reverseengineering.stackexchange.com/questions/15067/safe-way-to-download-a-malware-payload",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to analyze a piece of malware that is most-likely a downloader. During dynamic analysis on an isolated VM network, Wireshark registered a\n  <code>\n   GET\n  </code>\n  request to a server for what I believe is the payload (a\n  <code>\n   .bin\n  </code>\n  file).\n </p>\n <p>\n  What is a safe way to download the payload? Is there a tool that will allow me to replicate only the GET request? I do not want to run the malware connected to the internet.\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "916",
    "tags": [
        "windows",
        "malware"
    ],
    "user": "qwersjc",
    "time": "Apr 2, 2017 at 7:53",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Leech the url and use wget , curl to download it ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n use\n <a href=\"https://superuser.com/questions/404732/how-to-use-wget-with-tor-bundle-in-linux\">\n  wget + torsocks\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This sounds like a straightforward question at first glance, but may prove a little more complicated at second thought.\n </p>\n <p>\n  Before we go into how to retrieve the payload, I should highlight the importance of backing up your machine and taking extra precautions. Running malware, even inside a VM, is a dangerous business. Tread safely.\n </p>\n <p>\n  The safest way will probably be using\n  <code>\n   wget\n  </code>\n  or a similar tool to download the payload. There are plenty of\n  <a href=\"https://stackoverflow.com/questions/22676/how-do-i-download-a-file-over-http-using-python\">\n   ways\n  </a>\n  to\n  <a href=\"https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\" rel=\"nofollow noreferrer\">\n   download\n  </a>\n  an\n  <a href=\"https://linux.die.net/man/1/wget\" rel=\"nofollow noreferrer\">\n   asset\n  </a>\n  . There are even some tools that let you \"replay\" a\n  <code>\n   .pcap\n  </code>\n  (network capture) file as if the HTTP client is connected to the original server, but that does not sound like what you're looking for.\n </p>\n <p>\n  However downloading the manually payload from a different computer might not be the\n  <em>\n   best\n  </em>\n  way to do what you're trying to do, for several reasons:\n </p>\n <ol>\n  <li>\n   <p>\n    Server might be only serving correct payloads for specific request nuances.\n   </p>\n   <p>\n    It is possible that the server filter any http request nuances to detect a payload being downloaded outside of the malware. That might happen using a specific\n    <code>\n     UserAgent\n    </code>\n    , specific headers or request parameters (such as post data).\n   </p>\n  </li>\n  <li>\n   <p>\n    Payload might be scrambled in a way that would make it useless without being served to the malware.\n   </p>\n   <p>\n    If you plan on faking web responses from your internal network this is less of an issue (although a simple challenge-response is possible here), but if you plan to download and reverse engineer the payload, you might encounter a scrambled payload that will require further analysis of the original malware downloader before you can continue your research.\n   </p>\n  </li>\n  <li>\n   <p>\n    Malware might rely on further server communication afterwards.\n   </p>\n   <p>\n    If you plan on serving the payload to the malware downloader and continue it's execution, the downloader itself or even the downloaded payload might require further consistent connection to the C&C server. This will make any additional dynamic investigation difficult at best, without a live internet connection.\n   </p>\n  </li>\n  <li>\n   <p>\n    Several download attempts might get your IP/IP range blocked.\n   </p>\n   <p>\n    In case any of the previous steps fail you will attempt to download the payload again several times. Oddly enough, this might get your IP or IP range banned from that malware server precisely to prevent any investigation attempts. This is common practice among malware ops, and often enough you'll simply get a benign executable instead of being bluntly blocked.\n   </p>\n  </li>\n  <li>\n   <p>\n    Connecting a malware to the internet is not\n    <em>\n     that\n    </em>\n    risky.\n   </p>\n   <p>\n    If the malware is running in an up-to-date virtual machine, the risk of letting the downloader download it's payload is minimal. Most samples will not have any VM guest to host zero-days (and those that do, might just as well include it in the first stage executable). You should consider the reasons for and against letting the malware payload connect to the internet and make sure keeping the malware disconnected is right for you. For additional security, you might connect the malware to a different (limited) network interface or one that's even connected to a different ISP/internet account.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "SDsolar",
                    "text": "<span class=\"comment-copy\">And keep good backups of your system before doing this.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. That's important. I'll add that!</span>",
                    "time": null
                },
                {
                    "user": "qwersjc",
                    "text": "<span class=\"comment-copy\">Thanks for the great answer, it's very helpful to know the details.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you've got the GET reply captured in the wireshark session, then I'd suggest you to just extract the binary from it. This also way you also avoid situations where downloader uses some kind of challenge/response or time-based protocol which means second attempt with the same URL would fail or it was a fast-flux or hijacked server which could be down by the time you get to trying the download again.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 3, 2017 at 18:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}