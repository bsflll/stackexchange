{
    "title": "What is a good Java decompiler and deobfuscator?",
    "link": "https://reverseengineering.stackexchange.com/questions/1370/what-is-a-good-java-decompiler-and-deobfuscator",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using\n  <a href=\"http://jd.benow.ca/\">\n   JD-GUI\n  </a>\n  to decompile Java JAR files, but the problem is that it leaves many errors, such as duplicate variables which I have to fix myself and check to see if the program still works (if I fixed the errors correctly).\n </p>\n <p>\n  I also tried Fernflower, but that leaves blank classes if it's missing a dependency.\n </p>\n <p>\n  I'd like to know which decompiler:\n </p>\n <ul>\n  <li>\n   gives the least amount of errors\n  </li>\n  <li>\n   deobfuscates the most.\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "63",
    "answers": 7,
    "views": "136k",
    "tags": [
        "decompilation",
        "tools",
        "java",
        "deobfuscation",
        "jar"
    ],
    "user": null,
    "time": "Jun 20, 2020 at 1:01",
    "comments": [
        {
            "user": "Vince",
            "text": "<html><body><span class=\"comment-copy\">\n Just curious, what features do you expect a deobfuscator will offer? Apart from renaming the variables manually, I don't see any way to actually deobfuscate some code.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is the open source Java decompiler,\n  <a href=\"https://github.com/mstrobel/procyon\" rel=\"nofollow noreferrer\">\n   Procyon\n  </a>\n  .\n </p>\n <p>\n  I have not tested it against any obfuscated code, but I have seen it decompile many methods that JD-GUI failed to handle. Note that it's a work in progress, and I'm sure you will find plenty of code that it will fail to decompile.\n </p>\n</div>\n</body></html>",
            "votes": "41",
            "user": "5 revs, 4 users 36%tylerl",
            "time": "Mar 14, 2022 at 16:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ruffin",
                    "text": "<span class=\"comment-copy\">First, his decompiler is Procyon that you see in other answers. Secondly, though I usually balk at, \"Look at my library that does this!\" answers, that would be a mistake here. Strobel's <a href=\"https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler\" rel=\"nofollow noreferrer\">readme</a> that he links to, above, is worth a close read. It would have been a <i>great</i> answer itself, but is admittedly probably a bit too long for SE.</span>",
                    "time": null
                },
                {
                    "user": "YoungDinosaur",
                    "text": "<span class=\"comment-copy\">+10000 This is truly great work and it just decompiled a class that I spent hours trying to reconstruct after JD-GUI had only gotten half of it.</span>",
                    "time": null
                },
                {
                    "user": "signus",
                    "text": "<span class=\"comment-copy\">Even though I personally hate the +1 comments, I'll have to say that you've got a good project going there that helped me in a tight spot. Keep it up!</span>",
                    "time": null
                },
                {
                    "user": "Mike Strobel",
                    "text": "<span class=\"comment-copy\">@Signus Thanks, I'm glad my work proved useful to you :).</span>",
                    "time": null
                },
                {
                    "user": "Mike Strobel",
                    "text": "<span class=\"comment-copy\">@DavidGomes Ah, BitBucket finally made good on their promise to delete Mercurial repos.  Fixed.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Old and Lacking Entries\n  </strong>\n </p>\n <p>\n  <strong>\n   JAD\n  </strong>\n  Some time ago, everyone’s decompiler of choice was jad. Currently, the project is dead (in addition, it wasn’t open source), but still you see a lot of people referring to it.\n </p>\n <p>\n  <strong>\n   Java DeObfuscator\n  </strong>\n  Also an older tool from fileoffset.com, but still works more or less. The interface is rather clunky to use for larger projects, but the tool is\n  <a href=\"http://sourceforge.net/projects/jdo/\" rel=\"noreferrer\">\n   open source\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   JODE\n  </strong>\n  <a href=\"http://jode.sourceforge.net/\" rel=\"noreferrer\">\n   JODE\n  </a>\n  is a java package containing a decompiler and an optimizer for Java. This package is freely available under the GNU GPL. It hasn’t been updated for quite some time.\n </p>\n <p>\n  <strong>\n   AndroChef\n  </strong>\n  Proprietary tool to decompile Android programs and Java files, available\n  <a href=\"http://www.neshkov.com/ac_decompiler.html\" rel=\"noreferrer\">\n   here\n  </a>\n  . Not worth the money given the alternatives, just as\n  <a href=\"http://www.neshkov.com/dj.html\" rel=\"noreferrer\">\n   DJ Decompiler\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Candle\n  </strong>\n  An open source decompiler by Brad Davis. I’m mentioning it for completeness, but is far away from being feature complete.\n </p>\n <hr/>\n <p>\n  <strong>\n   Modern Tools\n  </strong>\n </p>\n <p>\n  <strong>\n   JD-Gui\n  </strong>\n  Probably one of the most widely used tools for Java decompilation, as it is easy to use and provides a graphical user interface which allows to quickly open up and inspect a class file or JAR. You can find it\n  <a href=\"http://jd.benow.ca/\" rel=\"noreferrer\">\n   over here\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   FernFlower\n  </strong>\n  Very new and promising analytical Java decompiler (becoming an integral part of IntelliJ 14).\n </p>\n <p>\n  It’s a command line tool. This one is able to show the Unicode parameters with their full name.\n </p>\n <p>\n  <a href=\"https://github.com/fesh0r/fernflower\" rel=\"noreferrer\">\n   Download from here.\n  </a>\n  It’s a command line tool. This one is able to show the Unicode parameters with their full name.\n  \n\n  Note that it's also already integrated by default in IntelliJ.\n </p>\n <p>\n  <strong>\n   CFR\n  </strong>\n </p>\n <p>\n  <a href=\"http://www.benf.org/other/cfr/\" rel=\"noreferrer\">\n   Free, and open source\n  </a>\n  . This one aims to decompile modern Java features, including Java 12 switch expressions, Java 8 lambdas (pre and post Java beta 103 changes), Java 7 String switches etc., though is itself written in Java 6.\n </p>\n <p>\n  Also a command line tool. This one does an even better job and is slightly faster.\n </p>\n <p>\n  <strong>\n   Procyon\n  </strong>\n </p>\n <p>\n  <a href=\"https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler\" rel=\"noreferrer\">\n   Open source\n  </a>\n  , and also aims to deal with Java 8 features (lambdas, :: operator). Needs Java 7 to run.\n </p>\n <p>\n  <strong>\n   Krakatau\n  </strong>\n  <a href=\"https://github.com/Storyyeller/Krakatau\" rel=\"noreferrer\">\n   Krakatau\n  </a>\n  is interesting because it has been written in Python. It currently contains three tools: a decompiler and disassembler for Java class files and an assembler to create class files.\n </p>\n <p>\n  Does not yet support Java 8 features.\n </p>\n <p>\n  <strong>\n   Soot\n  </strong>\n </p>\n <p>\n  Soot is a framework for analyzing and transforming Java and Android applications, originally developed by the Sable Research Group of McGill University. It’s not very commonly used “just” as a decompiler, as it also defines an intermediate byte code language.\n </p>\n <p>\n  <strong>\n   Recaf\n  </strong>\n </p>\n <p>\n  A Java Bytecode editor and reverse engineering tool aimed at being intuitive to use. It can present bytecode through multiple decompilers\n  <em>\n   (CFR, FernFlower, Procyon)\n  </em>\n  or in a table layout to allow displaying class elements that are indecipherable in standard decompilers. Recaf uses context-sensitive menus to interact with classes, methods, and fields, allowing users to search for use cases, rename items, and edit definitions in a disassembled format.\n </p>\n <p>\n  It supports jars, wars, classes, and extracting classes from running Java processes.\n </p>\n <p>\n  It is written completely in Java and is fully\n  <a href=\"https://github.com/Col-E/Recaf\" rel=\"noreferrer\">\n   open source\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Konloch’s Bytecode Viewer\n  </strong>\n </p>\n <p>\n  An Advanced Lightweight Java Bytecode Viewer, GUI Java Decompiler, GUI Bytecode Editor, GUI Smali, GUI Baksmali, GUI APK Editor, GUI Dex Editor, GUI APK Decompiler, GUI DEX Decompiler, GUI Procyon Java Decompiler, GUI Krakatau, GUI CFR Java Decompiler, GUI FernFlower Java Decompiler, GUI DEX2Jar, GUI Jar2DEX, GUI Jar-Jar, Hex Viewer, Code Searcher, Debugger and more.\n </p>\n <p>\n  Written completely in Java, and it’s\n  <a href=\"https://github.com/Konloch/bytecode-viewer\" rel=\"noreferrer\">\n   open source\n  </a>\n  .\n </p>\n <p>\n  It uses FernFlower, Procyon and CFR for decompilation, makes this an awesome visual tool using state-of-art decompilers:\n </p>\n <p>\n  <strong>\n   Enigma\n  </strong>\n </p>\n <p>\n  <a href=\"http://www.cuchazinteractive.com/enigma/\" rel=\"noreferrer\">\n   A tool specifically geared for deobfuscation\n  </a>\n  :\n </p>\n <p>\n  Originally used to deobfuscate Minecraft versions. Uses Procyon internally.\n </p>\n <p>\n  A more up to date fork\n  <a href=\"https://github.com/FabricMC/Enigma\" rel=\"noreferrer\">\n   can be found here\n  </a>\n </p>\n <p>\n  <em>\n   It’s fun to note that a lot of effort into decompilers and de-obfuscators for Java is the result of the modding scene around Minecraft, one of the most popular games implemented in Java.\n  </em>\n </p>\n <p>\n  Source:\n  <a href=\"http://blog.macuyiko.com/post/2015/a-quick-look-at-java-decompilers.html\" rel=\"noreferrer\">\n   http://blog.macuyiko.com/post/2015/a-quick-look-at-java-decompilers.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "19",
            "user": "4 revs, 3 users 73%Alexandre Dumont",
            "time": "Aug 20, 2020 at 10:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Gordolio",
                    "text": "<span class=\"comment-copy\">This answer may need to be updated. It appears that JD-Gui is being actively developed as of March 2019. <a href=\"https://java-decompiler.github.io/\" rel=\"nofollow noreferrer\">java-decompiler.github.io</a></span>",
                    "time": null
                },
                {
                    "user": "Gordolio",
                    "text": "<span class=\"comment-copy\">I have some java 7 code that I'm attempting to write some aspects for. The built-in intellij decompiler in some cases has incorrect variable names and can leave out blocks of code. JD-Gui shows those blocks and also displays what appears to be more accurate variable names. It also shows side-by-side the differences between an old version and new version of JD-Gui. It's worth looking at if you're doing some serious reversing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can't speak to which one of these is the best, but there are a few java decompilers out there as indicated by this\n  <a href=\"https://stackoverflow.com/questions/671394/where-can-i-find-a-java-decompiler\">\n   SO question\n  </a>\n  . None of these decompilers appear to attempt to actively handle obfuscation though and many of those projects are abandoned.\n </p>\n <p>\n  I have not tried\n  <a href=\"https://github.com/Storyyeller/Krakatau/\" rel=\"nofollow noreferrer\">\n   Krakatau\n  </a>\n  , but it sounds like it may help with what you are looking for.\n </p>\n <ul>\n  <li>\n   From the readme: \"The Krakatau decompiler takes a different approach to most Java decompilers.\nIt can be thought of more as a compiler whose input language is Java bytecode\nand whose target language happens to be Java source code. Krakatau takes in \narbitrary bytecode, and attempts to transform it to equivalent Java code. This\nmakes it robust to minor obfuscation, though it has the drawback of not\nreconstructing the \"original\" source, leading to less readable output than a \npattern matching decompiler would produce for unobfuscated Java classes.\"\n  </li>\n  <li>\n   This is open source and appears to be actively (as of this writing) maintained.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "10",
            "user": "5 revs, 3 users 72%amccormack",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">That is actually the output of the disassembler. The decompiler decompiles to Java output. (P.S. I'm the developer)</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">JD-GUI is one of the best Java Decompilers at the moment, But it has to be used in conjunctive with deobfuscators on the Bytecode before decompiling the code. The best deobfuscators for java that I know of come from either <a href=\"http://www.rune-server.org\" rel=\"nofollow noreferrer\">rune-server.org</a> or <a href=\"http://www.moparscape.org/smf\" rel=\"nofollow noreferrer\">moparscape.org/smf</a> or <a href=\"http://www.moparisthebest.org/smf\" rel=\"nofollow noreferrer\">moparisthebest.org/smf</a> those are hacking communities for Runescape Game which is completely written in Java and highly obfuscated.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try taking a look at Bytecode Viewer\n  <a href=\"https://github.com/Konloch/bytecode-viewer\" rel=\"nofollow\" title=\"https://github.com/Konloch/bytecode-viewer\">\n   https://github.com/Konloch/bytecode-viewer\n  </a>\n  It has the option to decompile using 5 different decompilers:\n </p>\n <ul>\n  <li>\n   FernFlower\n  </li>\n  <li>\n   Procyon\n  </li>\n  <li>\n   CFR\n  </li>\n  <li>\n   Krakatau\n  </li>\n  <li>\n   JD-GUI\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "3 revsKonloch",
            "time": "Aug 3, 2015 at 7:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "nmu",
                    "text": "<span class=\"comment-copy\">This was a really good suggestion - thanks, way better than just using the fernflower cli!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First of all, there is a fix for Fernflower issue with missing classes\n  <a href=\"https://gist.github.com/agaricusb/4575843\" rel=\"nofollow\">\n   here\n  </a>\n  . You can say thank you to agaricusb for this.\n </p>\n <p>\n  For now Fernflower remains the best Java decompiler even It was not maintained for last few years. I've tried to reach the author recently, but still no luck.\n </p>\n <p>\n  As for AndroChef Java Decompiler, It's uses Fernflower as engine with author's permission. Still not sure If it uses patched/modified version or It's just a GUI.\n </p>\n <p>\n  Procyon decompiler developed by @mike-strobel seem to be good, but Fernflower still got a HUGE advantage and was able to decompile approximately 95% of my application (~3000 classes) while procyon was able to handle only 60% (checked in January of 2014).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Vladimir Protasov",
            "time": "Mar 3, 2014 at 20:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mike Strobel",
                    "text": "<span class=\"comment-copy\">Is your application \"native\" Java, or was it converted from Android format?  If the former, I would be very interested in getting my hands on your binaries to see where Procyon breaks down compared to Fernflower.</span>",
                    "time": null
                },
                {
                    "user": "Vladimir Protasov",
                    "text": "<span class=\"comment-copy\">@MikeStrobel It's \"native\" Java application. It's internal use only, so I can't share It anyways.</span>",
                    "time": null
                },
                {
                    "user": "Mike Strobel",
                    "text": "<span class=\"comment-copy\">any chance you could drop me an email describing what kinds of problems you ran into?  I am always keen to hear how Procyon could be improved.  My contact info is on the project's BitBucket site.</span>",
                    "time": null
                },
                {
                    "user": "Vladimir Protasov",
                    "text": "<span class=\"comment-copy\">@MikeStrobel thanks for the interest. I'll try to provide you with extended information and example classes, but no promises.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using\n  <a href=\"https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler/engine\" rel=\"nofollow noreferrer\">\n   https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler/engine\n  </a>\n  It's the decompiler from IntelliJ, it decompile codes where JD-GUI fail.\n </p>\n <p>\n  It's a unofficial mirror to download:\n  <a href=\"http://files.minecraftforge.net/maven/net/minecraftforge/fernflower/\" rel=\"nofollow noreferrer\">\n   http://files.minecraftforge.net/maven/net/minecraftforge/fernflower/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "David Kennedy",
            "time": "Jun 29, 2018 at 15:24",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to reccomend you\n  <a href=\"http://www.neshkov.com/ac_decompiler.html\" rel=\"nofollow\">\n   AndroChef Java Decompiler\n  </a>\n  AndroChef Java Decompiler successfully decompiles obfuscated Java 6 and Java 7 .class and .jar files.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Atanas",
            "time": "Oct 27, 2013 at 11:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3173",
                    "text": "<span class=\"comment-copy\">PAY ATTENTION WITH ANDROCHEF! AndroChef is only a wrapper for the abandoned fernflower decompiler, don't waste your money with it!</span>",
                    "time": null
                }
            ]
        }
    ]
}