{
    "title": "How do i make gnu as recognize all ARMV7 instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/8971/how-do-i-make-gnu-as-recognize-all-armv7-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I disassembled an android library with IDA, and want to do some extra steps at the end of one of the functions. Currently, the last instruction bytes are\n  <code>\n   BD E8 F0 8F\n  </code>\n  , in thumb mode, which IDA disassembles to\n  <code>\n   POP.W {R4-R11,PC}\n  </code>\n  .\n </p>\n <p>\n  So i found a nice little piece of unused space, replaced the\n  <code>\n   POP.W\n  </code>\n  with a branch there, wrote my extension, remembered to put a\n  <code>\n   .thumb\n  </code>\n  and\n  <code>\n   .arch armv7a\n  </code>\n  at the start of my program, and finished my code with that\n  <code>\n   POP.W {R4-R11,PC}\n  </code>\n  . Unfortunately, using gnu as from an arm toolchain, this results in\n  <code>\n   Error: bad instruction pop.w '{R4-R11,PC}'\n  </code>\n </p>\n <p>\n  Ok, gnu as doesn't like the .w suffix, so i replaced the instruction with\n  <code>\n   POP {R4-R11,PC}\n  </code>\n  . This changes the error message to Error: invalid register list to push/pop instruction --\n  <code>\n   pop {R4-R11,PC}\n  </code>\n </p>\n <p>\n  I know that some older ARM chips had restrictions on what you could do with registers from R8 on, so, just for verification, i replaced the instruction with\n  <code>\n   POP {R4-R7,PC}\n  </code>\n  . And indeed, as assembles this well.\n </p>\n <p>\n  Now I don't know how to continue?\n </p>\n <ul>\n  <li>\n   Maybe I have to give another architecture option to as. But .arch armv7a seems to be the newest which is valid with android armv7a libraries.\n  </li>\n  <li>\n   Maybe i'm completely off track, and the pop instruction is actually a macro for two separate instructions, which pop high and low registers after another. But, the result of entering the individual two-byte instructions (\n   <code>\n    BD E8\n   </code>\n   ,\n   <code>\n    F0 8F\n   </code>\n   ) into the online disassembler seems to have nothing to do with popping from the stack.\n  </li>\n </ul>\n <p>\n  I also tried disabling macros in IDA's processor options, which didn't change anything. So i'm inclined to think the byte sequence is a genuine 4 byte thumb mode opcode.\n </p>\n <p>\n  What else do i need to specify in my program to make gnu as recognize the instruction?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "arm",
        "assembly"
    ],
    "user": "Guntram Blohm",
    "time": "May 24, 2015 at 22:14",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  By default,\n  <code>\n   as\n  </code>\n  , uses the old 'divided' syntax for arm and thumb instructions. Hence it is not recognising your\n  <code>\n   pop.w\n  </code>\n  instruction.\n </p>\n <p>\n  To make it work, add\n  <code>\n   .syntax unified\n  </code>\n  at the start of your program.  This tells it to use the new unified syntax and you should find it assembles\n  <code>\n   pop.w\n  </code>\n  successfully.\n </p>\n <p>\n  See\n  <a href=\"https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html\">\n   https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html\n  </a>\n  for more details.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Ian Cook",
            "time": "May 24, 2015 at 15:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}