{
    "title": "IDA PRO and Dos Load Exec",
    "link": "https://reverseengineering.stackexchange.com/questions/4366/ida-pro-and-dos-load-exec",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse some DOS game in IDA pro (5.0 demo). I get stuck when it tries to load the overlay file. Is it possible to load the 2nd executable into the original namespace?\n </p>\n <p>\n  It has already setup the video, interrupt, and some jump tables for common routines.\n </p>\n <p>\n  I think I tried this years ago, and just dumped the full 1meg of ram via DosBox. It broke the segments etc however.\n </p>\n <hr/>\n <pre><code>seg001:0672                 mov     ax, bx\nseg001:0674                 sub     ax, offset string_of_space ;\nseg001:0677                 mov     byte_108CA, al\nseg001:067A                 mov     bx, offset param_block\nseg001:067D                 mov     dx, cs:filename\nseg001:0682                 mov     ax, 4B00h\nseg001:0685                 mov     cs:saved_ss, ss\nseg001:068A                 mov     cs:saved_sp, sp\nseg001:068F                 int     21h             ; DOS - 2+ - LOAD OR EXECUTE     (EXEC)\nseg001:068F                                         ; DS:DX -> ASCIZ filename\nseg001:068F                                         ; ES:BX -> parameter block\nseg001:068F                                         ; AL = subfunc: load & execute     program\nseg001:0691                 cli\nseg001:0692                 mov     ss, cs:saved_ss\nseg001:0697                 assume ss:nothing\nseg001:0697                 mov     sp, cs:saved_sp\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "decompilation",
        "x86"
    ],
    "user": "anthonyn",
    "time": "Aug 10, 2014 at 9:52",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Do you want to (static)\n <i>\n  analyze\n </i>\n , or (dynamic)\n <i>\n  debug\n </i>\n the file(s)? Since the 2nd program gets loaded by the dos exec call, it's being run in it's own context, and with a bit of luck, doesn't use the 1st one much, so you can just make a second project of it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Pending a native IDA solution, I could solve this for myself with a C program that used the following procedure:\n </p>\n <ol>\n  <li>\n   Read the\n   <em>\n    base\n   </em>\n   executable into memory;\n  </li>\n  <li>\n   Read the\n   <em>\n    overlay\n   </em>\n   into memory. Note that this is a regular executable, in its own right.\n  </li>\n  <li>\n   In the\n   <em>\n    base\n   </em>\n   executable, adjust the following EXE header items:\n   \n\n   a. set\n   <code>\n    bytes_in_last_block\n   </code>\n   to\n   <code>\n    0\n   </code>\n   ,\n   \n\n   b. add the\n   <code>\n    blocks_in_file\n   </code>\n   from the overlay to the base's,\n   \n\n   c. add the\n   <code>\n    num_relocs\n   </code>\n   from the overlay to the base's.\n  </li>\n  <li>\n   Calculate the\n   <em>\n    new\n   </em>\n   executable size; this is the total number of\n   <code>\n    blocks_in_file\n   </code>\n   * 512 -\n   <code>\n    original_header_paragraphs\n   </code>\n   *16. You need this number for the new stack segment\n   <code>\n    ss\n   </code>\n   .\n  </li>\n  <li>\n   The new\n   <code>\n    header_paragraphs\n   </code>\n   size - that is, the original one plus the relocations from the overlay - is going to be\n   <code>\n    reloc_table_offset + 4*num_relocs\n   </code>\n   . Make sure to round up to paragraph size,\n   <code>\n    16\n   </code>\n   .\n  </li>\n </ol>\n <p>\n  At this point the new header should be complete. Write it to a new file. The main executable's relocation table should be unchanged, and you can write it as well.\n </p>\n <p>\n  The\n  <em>\n   overlay's\n  </em>\n  relocation table then needs to be adjusted.\n </p>\n <p>\n  The relocation table itself contains a\n  <code>\n   segment:offset\n  </code>\n  pair for each relocation that points into the binary executable image to the position where a zero-based segment value is stored (i.e., the value for \"the first segment\" would be\n  <code>\n   0000h\n  </code>\n  , and when loaded, the\n  <em>\n   actual\n  </em>\n  segment is added to this value).\n </p>\n <p>\n  Since you added data to the executable part, you need to adjust the linear offset into the file; add the size of the original executable code (which should be rounded upwards to a 512-byte long page). Read the\n  <em>\n   segment\n  </em>\n  at this position, add the size of the original executable code in\n  <em>\n   paragraphs\n  </em>\n  , and write it back. Then add the size of the original executable code to the\n  <code>\n   segment\n  </code>\n  part of the original relocation. Do this for each relocation in the overlay's table.\n </p>\n <p>\n  After adjusting the overlay's relocation table, write this to your output file, immediately followed by the original executable's\n  <em>\n   data\n  </em>\n  (which is totally unchanged). Then add the changed overlay data to the output file.\n </p>\n <p>\n  One thing to note is that the executable I tested with (only one!) stored a very small stack in the executable as well. I cannot tell if that's usual or not; I had to remove the saved stack from the 'main' code, and add it again after the combined main code + overlay code.\n </p>\n <hr/>\n <h3>\n  Important note!\n </h3>\n <p>\n  This procedure worked for me because the program I tested it on uses dynamically-loaded overlays. The main program loads the overlay and copies a number of data and code addresses into the main\n  <code>\n   dseg\n  </code>\n  segment. After that, it calls the overlaid code through these pointers. The overlaid code used\n  <code>\n   ds\n  </code>\n  \"as usual\", it simply used the main's\n  <code>\n   dseg\n  </code>\n  .\n </p>\n <p>\n  Of course, now the \"initialization\" routine did not get called, these pointers to the overlaid routines are uninitialized and you have to find out manually what gets copied to where. But at least all code can be loaded into IDA in one go.\n </p>\n <h3>\n  Will it still run?\n </h3>\n <p>\n  Of course it will. The main code calls\n  <code>\n   LOAD/EXEC\n  </code>\n  , the overlay gets loaded, pointers get copied, and All is Well. The only thing is that the main executable is suddenly a whole lot larger .. but that extra part is never seen nor used by the original code. (Naturally, the main executable may now be so large that there is no more memory left to load overlays.)\n  \n\n  The purpose of this exercise was\n  <em>\n   not\n  </em>\n  to remove the need to\n  <em>\n   load\n  </em>\n  the overlays, only to be able to disassemble the entire thing as one binary.\n </p>\n <p>\n  You can download the C source here:\n  <a href=\"http://www.jongware.com/binaries/combine_exe_ovl.zip\" rel=\"noreferrer\">\n   http://www.jongware.com/binaries/combine_exe_ovl.zip\n  </a>\n  \n\n  - be warned, it's a pretty dirty hackish piece of code, so it comes with\n  <em>\n   no warranties\n  </em>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Jongware",
            "time": "Aug 15, 2014 at 23:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}