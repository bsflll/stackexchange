{
    "title": "What's the fastest way to set a breakpoint when a value I know gets written in memory, if the memory address is different each time due to ASLR?",
    "link": "https://reverseengineering.stackexchange.com/questions/19819/whats-the-fastest-way-to-set-a-breakpoint-when-a-value-i-know-gets-written-in-m",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a 64bit exe I'm debugging with x64dbg.\n </p>\n <p>\n  I'm searching for a specfic string value\n  <code>\n   myvalue\n  </code>\n  that sits encrypted somewhere in the exe (so, searching for\n  <code>\n   myvalue\n  </code>\n  at the beginning returns nothing).\n </p>\n <p>\n  When the value gets decrypted, I can search for it and get current memory address. I could place a breakpoint when that specific address gets written/read but that would serve no purpose as it gets decrypted and loaded only once.\n </p>\n <p>\n  Due to ASLR policy, this memory address is different every time I close and open the program.\n </p>\n <p>\n  My objective is to produce a patch for the exe so that\n  <code>\n   myvalue\n  </code>\n  become\n  <code>\n   anothervalue\n  </code>\n  , either right after\n  <code>\n   myvalue\n  </code>\n  gets written or by identifying the piece of code that writes that value.\n </p>\n <p>\n  Disabling ASLR with\n  <code>\n   link /edit /dynamicbase:NO filename.exe\n  </code>\n  did nothing: memory address is different everytime anyway. Disabling ASLR os-wide seems a bit overkill and dangerous.\n </p>\n <p>\n  I can't put breakpoints before it gets written because I don't know the address.\n </p>\n <p>\n  Ideally, there should be a menu on the \"memory\" page that says \"who wrote here\" and point me to the diassembler line that did so.\n </p>\n <p>\n  How can I do this?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "856",
    "tags": [
        "memory",
        "x64dbg"
    ],
    "user": "Saturnix",
    "time": "Nov 5, 2018 at 2:57",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://reverseengineering.stackexchange.com/questions/6647/how-to-cause-program-to-stop-execution-when-a-particular-value-is-found-in-memor\" title=\"how to cause program to stop execution when a particular value is found in memor\">\n  reverseengineering.stackexchange.com/questions/6647/â€¦\n </a>\n ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can disable ASLR on the executable using a PE editor and disabling IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE in the Dll Characteristics field.\n </p>\n <p>\n  If the value is contained within the executable image, you can calculate its relative address and add it to the executable's base address, assuming this relative address is the same every time.\n </p>\n <p>\n  If it's outside the executable, then it's in a memory page allocated with VirtualAlloc. I don't think page allocations are related to ASLR so disabling it won't help the random address. Maybe you can log calls to VirtualAlloc and find the one that allocates the page you're interested in. Then you can put a breakpoint inside the page at the relative address your value is going to be at.\n </p>\n <p>\n  Another approach - find values you know are written in the same page before your value is written and calculate the target address based on them.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Anonymous",
            "time": "Nov 6, 2018 at 20:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}