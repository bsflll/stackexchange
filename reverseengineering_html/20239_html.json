{
    "title": "What are those instructions doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20239/what-are-those-instructions-doing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm having a hard time figuring out whatever the hell this is doing.\n </p>\n <pre><code>mov     rax, [rbp+var_720]\nmov     [rbp+var_458], rax\nmov     rax, [rbp+var_458]\nmov     [rbp+command_], rax\nmov     rax, [rbp+something_weird_idk]\nmov     [rbp+var_4D8], rax\nmov     rax, [rbp+var_4D8]\nmov     [rbp+var_4D0], rax\nmov     rax, [rbp+var_4D0]\nmov     [rbp+var_4C8], rax\nmov     rax, [rbp+var_4C8]\nmovzx   ecx, byte ptr [rax]\nand     ecx, 1               <- Breakpoint here\ncmp     ecx, 0\njz      loc_100003CFE\n</code></pre>\n <p>\n  What I want to achieve is NOT jumping to loc_1000..., so if I understand correctly the\n  <code>\n   cmp\n  </code>\n  instruction should return 1 (so true).\n </p>\n <p>\n  With the breakpoint there, RAX is this\n </p>\n <pre><code>__common:00000001000181C8 _command:                             \n__common:00000001000181C8                                         \n__common:00000001000181C8 sbb     [rcx+55h], al\n__common:00000001000181CB push    rsp\n__common:00000001000181CC db      48h, 45h\n__common:00000001000181CC push    rsp\n__common:00000001000181D0 db      49h, 43h\n__common:00000001000181D0 push    r12\n__common:00000001000181D4 add     [r8], r8b\n</code></pre>\n <p>\n  Though as always, no idea what this is doing.\n </p>\n <p>\n  Can anyone shed some light on this?\n </p>\n <p>\n  Also, why does assembly move data through multiple variables? For example, before the breakpoint and after the\n  <code>\n   mov rax, [rbp+something_weird_idk]\n  </code>\n  , it's basically moving\n  <code>\n   [rbp+something..]\n  </code>\n  through multiple variables without doing anything. Why is that?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "87",
    "tags": [
        "binary-analysis"
    ],
    "user": "G. Ramistella",
    "time": "Dec 30, 2018 at 14:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   What I want to achieve is NOT jumping to loc_1000..., so if I\n  understand correctly the cmp instruction should return 1 (so true).\n  </p>\n </blockquote>\n <p>\n  You could replace the\n  <code>\n   jz\n  </code>\n  instruction with\n  <code>\n   nop\n  </code>\n  instructions.\n </p>\n <blockquote>\n  <p>\n   With the breakpoint there, RAX is this Though as always, no idea what\n  this is doing. Can anyone shed some light on this?\n  </p>\n </blockquote>\n <p>\n  This memory part is not code, but a string:\n </p>\n <pre><code>cat test.asm\nBITS 64\n\nsbb     [rcx+55h], al\npush    rsp\ndb      48h, 45h\npush    rsp\ndb      49h, 43h\npush    r12\nadd     [r8], r8b\n\nhexdump -Cv test\n00000000  18 41 55 54 48 45 54 49  43 41 54 45 00 00        |.AUTHETICATE..|\n</code></pre>\n <blockquote>\n  <p>\n   Also, why does assembly move data through multiple variables? For\n  example, before the breakpoint and after the mov rax,\n  [rbp+something_weird_idk], it's basically moving [rbp+something..]\n  through multiple variables without doing anything. Why is that?\n  </p>\n </blockquote>\n <p>\n  This is typical from gcc when used without optimization options.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "wisk",
            "time": "Dec 30, 2018 at 14:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}