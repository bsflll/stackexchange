{
    "title": "Find the kernel structure that contains device name",
    "link": "https://reverseengineering.stackexchange.com/questions/3233/find-the-kernel-structure-that-contains-device-name",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using WinDbg to try enumerate drivers and their associated devices. Getting the driver name is very easy. It is found in the\n  <a href=\"http://msdn.moonsols.com/win7rtm_x86/DRIVER_OBJECT.html\" rel=\"nofollow\">\n   _DRIVER_OBJECT\n  </a>\n  structure. Unfortunately, the\n  <a href=\"http://msdn.moonsols.com/win7rtm_x86/DEVICE_OBJECT.html\" rel=\"nofollow\">\n   _DEVICE_OBJECT\n  </a>\n  does not contain the name of the device.\n </p>\n <p>\n  Using the\n  <code>\n   !devobj\n  </code>\n  command I can see the name of the device, but I would like to find the table/structure that contains the name.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "windbg",
        "kernel-mode"
    ],
    "user": "ben_re",
    "time": "Dec 20, 2013 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So assuming like you said, you have the linear address of your device object, use the windbg extension\n  <code>\n   !object 0xlinearaddress\n  </code>\n  . Based on your windows build, it will display the linear address of the object header. Which in memory exists right below the object.\n </p>\n <p>\n  Use windbg to parse the\n  <code>\n   OBJECT_HEADER\n  </code>\n  structure for you. Starting with Windows 7 you are going to have a member called\n  <code>\n   InfoMask\n  </code>\n  , earlier versions have\n  <code>\n   NameInfoOffset\n  </code>\n  .\n </p>\n <p>\n  If you have an earlier build,\n  <code>\n   NameInfoOffset\n  </code>\n  is subtracted from the linear base of the object header, to get you the base of an\n  <code>\n   OBJECT_HEADER_NAME_INFO\n  </code>\n  structure for that object.\n </p>\n <p>\n  If you have a Windows 7 build or later,\n  <code>\n   InfoMask\n  </code>\n  is a bitmask describing other creator structures that exist before the beginning of the header. It is computed using the\n  <code>\n   ObInfoMaskToOffsetTable\n  </code>\n  which contains the offset to the\n  <code>\n   OBJECT_HEADER_NAME_INFO\n  </code>\n  structure for the object. It is always at a constant location but the\n  <code>\n   InfoMask\n  </code>\n  should be used to determine if the object is named, because not all objects are required to be named.\n </p>\n <p>\n  So a quick example for you, let's say you have a device object at\n  <code>\n   fffffa8001234560\n  </code>\n  . Let's also presume you are using Windows 7 x64.\n </p>\n <p>\n  Your name info would be:\n </p>\n <pre><code>dt nt!_object_header_name_info fffffa8001234560-0x30-0x20\n</code></pre>\n <p>\n  -0x30 to base of header\n-0x20 because in this case\n  <code>\n   InfoMask\n  </code>\n  used in the table has an index value of 0x20.\n </p>\n <p>\n  This structure contains the name\n  <strong>\n   relative\n  </strong>\n  to it's object directory.\n </p>\n <p>\n  Also have a look at the exported kernel routine\n  <code>\n   ObQueryNameInfo\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "everdox",
            "time": "Dec 20, 2013 at 18:34",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From what I remember, both XP and Win7 always had this format:\n </p>\n <p>\n  <code>\n   object_directory_followed\n  </code>\n  by\n  <code>\n   object_header\n  </code>\n  whose\n  <code>\n   _QUAD\n  </code>\n  part (opaque do not use this field) points to the\n  <code>\n   OBJECT\n  </code>\n </p>\n <p>\n  If you did\n  <code>\n   dt nt!_Object_header_name_info <address of object> - 0x28\n  </code>\n  :\n </p>\n <pre><code>kd> !devobj \\Device\\Beep;dt nt!_OBJECT_HEADER_NAME_INFO 86884db8-28\nDevice object (86884db8) is for:\n Beep \\Driver\\Beep DriverObject 86e703b8\nCurrent Irp 00000000 RefCount 0 Type 00000001 Flags 00000044\nDacl e1020c34 DevExt 86884e70 DevObjExt 86884ec8 \nExtensionFlags (0000000000)  \nDevice queue is not busy.\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"Beep\"\n   +0x00c QueryReferences  : 1\nkd> !devobj \\Device\\00000013\nDevice object (86fe7cd0) is for:\n 00000013 \\Driver\\PnpManager DriverObject 86fe9328\nCurrent Irp 00000000 RefCount 0 Type 00000004 Flags 00001040\nDacl e1020c34 DevExt 86fe7d88 DevObjExt 86fe7d90 DevNode 86fe7b88 \nExtensionFlags (0x00000010)  DOE_START_PENDING\nDevice queue is not busy.\nkd> dt nt!_OBJECT_HEADER_NAME_INFO 86fe7cd0-28\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"00000013\"\n   +0x00c QueryReferences  : 1\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ange",
            "time": "Dec 23, 2013 at 16:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}