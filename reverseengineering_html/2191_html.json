{
    "title": "What is the integrity check used?",
    "link": "https://reverseengineering.stackexchange.com/questions/2191/what-is-the-integrity-check-used",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following numbers. It is a 14 digit identification number. The first 13 digits  (counting from left) are the number itself, the 14th (the least digit) digit is an integrity check code. I tried many combinations but failed to get the formula which this integrity check is done.\n </p>\n <pre><code>decimal, 14 dig.| hexadecimal  | binary (grouped)\n--------------------------------------\n//effect of the least (decimal) digit\n2840115110085 6 | 19d4a885c7b8 | 1100 1110 1010 0101 0100 0100 0010 1110 0011 1101 1100\n2840115110086 4 | 19d4a885c7c0 | 1100 1110 1010 0101 0100 0100 0010 1110 0011 1110 0000\n2840115110087 2 | 19d4a885c7c8 | 1100 1110 1010 0101 0100 0100 0010 1110 0011 1110 0100\n2840115110088 1 | 19d4a885c7d1 | 1100 1110 1010 0101 0100 0100 0010 1110 0011 1110 1000\n2840115110089 9 | 19d4a885c7e3 | 1100 1110 1010 0101 0100 0100 0010 1110 0011 1111 0001\n//effect of changing 7th digit from left.\n2840113000000 2 | 19d4a743ce82 | 1100 1110 1010 0101 0011 1010 0001 1110 0111 0100 0001\n2840114000000 1 | 19d4a7dc6501 | 1100 1110 1010 0101 0011 1110 1110 0011 0010 1000 0000\n2840115000000 9 | 19d4a874fb89 | 1100 1110 1010 0101 0100 0011 1010 0111 1101 1100 0100\n2840116000000 7 | 19d4a90d9207 | 1100 1110 1010 0101 0100 1000 0110 1100 1001 0000 0011\n2840117000000 5 | 19d4a9a62885 | 1100 1110 1010 0101 0100 1101 0011 0001 0100 0100 0010\n2840118000000 3 | 19d4aa3ebf03 | 1100 1110 1010 0101 0101 0001 1111 0101 1111 1000 0001\n2840119000000 1 | 19d4aad75581 | 1100 1110 1010 0101 0101 0110 1011 1010 1010 1100 0000\n2840110000000 8 | 19d4a57a0b08 | 1100 1110 1010 0101 0010 1011 1101 0000 0101 1000 0100\n</code></pre>\n <hr/>\n <p>\n  Here's a little Python script which was used to produce above listing:\n </p>\n <pre><code>nums = [\n28401151100856, 28401151100864, 28401151100872, 28401151100881,\n28401151100899, 28401130000002, 28401140000001, 28401150000009,\n28401160000007, 28401170000005, 28401180000003, 28401190000001,\n28401100000008,\n]\n\ndef _2fmtdecimal(x):\n        tmp = str(x)\n        return tmp[0:13] + ' ' + tmp[13:]\n\ndef _2fmtbinary(x):\n        tmp = bin(x)[2:]\n        tmp2 = ''\n        for i,j,k,l in zip(tmp[::4], tmp[1::4], tmp[2::4], tmp[3::4]):\n                tmp2 += i+j+k+l + ' '\n        return tmp2\n\nfor i in nums:\n        print \"%s | %s | %s\" % (_2fmtdecimal(i), hex(i), _2fmtbinary(i))\n</code></pre>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "473",
    "tags": [
        "decryption"
    ],
    "user": "Yousf",
    "time": "Jul 12, 2013 at 12:30",
    "comments": [
        {
            "user": "Yousf",
            "text": "<html><body><span class=\"comment-copy\">\n Counting from left (fixed the question). It is a black box, you pass the 13 digits and it gives you the integrity check digit. I want to replace the black box.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n Can you give us the integrity check bits for all 0's and all 1's? maybe other such end-case nubmers?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @NirIzr: it's a decimal\n <i>\n  digit\n </i>\n , not a single\n <i>\n  bit\n </i>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n In what context is this data being used? Can you just brute-force the integrity check code?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<html><body><span class=\"comment-copy\">\n Can you give us more values? At least a range of 20 consecutive values, and also some values with transposed digits, and the effect of systematically varying the next-to-last non-checksum digit.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Most of integrity checks use some\n  <a href=\"http://www.math.niu.edu/~beachy/courses/523/coding_theory.pdf\" rel=\"nofollow\">\n   algebraic coding\n  </a>\n  . Algebraic codings have a basis, so if you have enough samples you can possibly reconstruct the algebraic basis used.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nikos M.",
            "time": "May 25, 2014 at 2:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}