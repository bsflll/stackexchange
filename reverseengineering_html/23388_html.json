{
    "title": "Proper way of implementing DexGuard RASP device checks",
    "link": "https://reverseengineering.stackexchange.com/questions/23388/proper-way-of-implementing-dexguard-rasp-device-checks",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently came across an app that is protected with DexGuard. DexGuard claims to offer Runtime Application Self Protection (RASP), which comprises of app obfuscation and various runtime tampering checks (anti debugger/emulator/hooking/repackage/root/etc). However, while the app I discovered is rather well obfuscated, there were several rather glaring issues. For example, the type of device checks were described in a DeviceCheck class file, which have static variables for each type of check (e.g. EMULATOR = 1, HOOKED = 5, etc). By hooking onto the relevant method and returning false for each of these values, I was able to disable all checks.\n </p>\n <p>\n  This seems trivially simple to bypass given that DexGuard claims to be an enterprise level RASP solution,  so I'm wondering if it was a misconfiguration or incorrect implementation on the developer's part. I'm unable to find any documentation of DexGuard online on implementation guidelines, so I'm hoping someone here who has experience would be able to shed some light.\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "android"
    ],
    "user": "user1118764",
    "time": "Mar 5, 2020 at 6:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, I think it was a poor implementation, because any other cracked dexguard protected app out there, most of them require root to implement patch, i.e., the patcher waits for DexGuard to do its job.\nAnd these are old situations let alone the new protections added.\nI myself cracked a VMP protected app not long ago. And the author VMed important functions and didn't pay attention to return values.\nit was like this\n </p>\n <pre><code>push XXXXX ----->handle\ncall YYYYY  ----->VM\nreturn value ----> x=registered on server Y=registered on another machine Z=no connection P=error registering\n</code></pre>\n <p>\n  The bottom line is, that with a little debugging skill and good tools which are present nowadays, and if the attacker can understand the encryption algorithm, he can inline his patches without any worries.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "auspicious99",
            "time": "Nov 27, 2021 at 20:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1118764",
                    "text": "<span class=\"comment-copy\">Are there any recommended implementations of DexGuard? I couldn't find any documentation presumably because it's a commercial product.</span>",
                    "time": null
                },
                {
                    "user": "shetal",
                    "text": "<span class=\"comment-copy\">well, there are some unpacking tutorials scattered here and there for OLD versions. but for new versions, the reverser doesn't leak any nfo as it means extra work for him on newer versions like securerom whose clean unpacks can be found but no tuts or nfo. I think you can contact android authors who used it. for example if i recall correctly Titanuim backup was using it.</span>",
                    "time": null
                }
            ]
        }
    ]
}