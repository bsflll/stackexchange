{
    "title": "Calling imported DLL functions from an injected DLL?",
    "link": "https://reverseengineering.stackexchange.com/questions/20749/calling-imported-dll-functions-from-an-injected-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If I have injected my own DLL into an executable (a game specifically) which imports a DLL to draw its graphics, camera, etc. How can I go about calling the DLLs functions?\n </p>\n <p>\n  I'm able to find the executables functions and hook them/call them at will, but I'm having trouble wrapping my head around how to do the same thing for the DLL which has the real goodies I want to call/manipulate.\n </p>\n <p>\n  I'm using IDA Pro to decompile the executable to get a good sense of what's happening. I'm still a beginner at this stuff but I think the\n  <code>\n   dword_xxxx\n  </code>\n  references is when the executable is calling DLL functions? Things like this for example:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/tan1E.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/tan1E.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "844",
    "tags": [
        "ida",
        "dll",
        "call"
    ],
    "user": "Nikita Buyevich",
    "time": "Mar 3, 2019 at 12:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I guess you need the base address of the loaded DLL to install your hooks.\nYou can simply call\n  <code>\n   GetModuleHandleA/W\n  </code>\n  if the DLL is already loaded or\n  <code>\n   LoadLibraryA/W\n  </code>\n  if the DLL is loaded later.\nOnce you get the base address, you have to add the RVA to this value, and you'll have the virtual address.\nOr you can use\n  <code>\n   GetProcAddress\n  </code>\n  to retrieve the virtual address of the exported functions.\n </p>\n <p>\n  Regarding your screenshot, I didn't get it sorry. But I can't see any call instruction. I guess this is a pointer store in a global value. Probably not related to a DLL.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "wisk",
            "time": "Mar 1, 2019 at 18:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nikita Buyevich",
                    "text": "<span class=\"comment-copy\">I see. That makes more sense.</span>",
                    "time": null
                },
                {
                    "user": "Nikita Buyevich",
                    "text": "<span class=\"comment-copy\">Hmm so now I'm able to find specific addresses in the external DLLs but everything is obfuscated. What would be the best way for me to find say the camera function?  My main goal is to detach the camera from the player in the game and control it at will.</span>",
                    "time": null
                },
                {
                    "user": "wisk",
                    "text": "<span class=\"comment-copy\">If the DLL is obfuscated, it means it was provided by the game vendor. Normally, graphics library (e.g. DirectX, OpenGL, Vulkan, ...) are not obfuscated. I suggest you identify which library draws 3D scenes and its version, figure out the camera API, and finally see how the game engine uses it.</span>",
                    "time": null
                },
                {
                    "user": "Nikita Buyevich",
                    "text": "<span class=\"comment-copy\">Yes it's their own DirectX implementation. So you're suggesting I look into DirectX into a non-obfuscated build of it and try to see their implementation of the camera to see how their version of DirectX does it?</span>",
                    "time": null
                },
                {
                    "user": "wisk",
                    "text": "<span class=\"comment-copy\">Yes. However, since this is based on DirectX, it can be more challenging to deal with COM (Component Object Model).</span>",
                    "time": null
                }
            ]
        }
    ]
}