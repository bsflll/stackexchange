{
    "title": "Reverse engineer SharePoint hash algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/20847/reverse-engineer-sharepoint-hash-algorithm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer a hash algorithm used by SharePoint 2016 in MSSCrawlUrl database table. I would like to avoid discussions about the idea itself (which I agree goes against SharePoint best practices), the answer is one word: legacy.\n </p>\n <p>\n  In short, that database table contains some URLs and their hashes. SharePoint somehow calculates a hash from values in AccessUrl column (which contains URLs), and puts the result into AccessHash column. The calculation is done by unmanaged (i.e. non-.Net) code.\n </p>\n <p>\n  So far I was able to figure out the following:\n </p>\n <ol>\n  <li>\n   AccessHash column definitely contains a CRC-32. In particular, the function is affine, i.e.\nhash(a ^ b ^ c) = hash(a) ^ hash(b) ^ hash(c)\nwhere ^ means XOR\n  </li>\n  <li>\n   I could find a generating polynomial for the hash function (or I believe I could): 0x82608EDB. I used a technique outlined in this article:\n   <a href=\"http://www.cosc.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html\" rel=\"nofollow noreferrer\">\n    http://www.cosc.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html\n   </a>\n  </li>\n </ol>\n <p>\n  After that I applied some brute force but couldn't figure out other algorithm parameters. The problem is a little bit more complicated because:\n </p>\n <ol>\n  <li>\n   I donâ€™t know the actual encoding that SharePoint uses when it computes hashes. I tried several in my brute force code, but I'm not sure if I'm missing something.\n  </li>\n  <li>\n   I don't have full control over the sample data, because a source string must be a valid URL (otherwise, SharePoint won't calculate a hash from it).\n  </li>\n </ol>\n <p>\n  Here are some examples of URLs and their hashes:\n </p>\n <pre><code>AccessURL       AccessHash\nhttp://a0       2141537348\nhttp://a1      -1380154216\nhttp://a2       -547891125\nhttp://a4        981557741\nhttp://a8       -169013482\nhttp://aq       -319117100\nhttp://aa        -55893049\n</code></pre>\n <p>\n  More examples can be found in this file:\n  <a href=\"https://bitbucket.org/johnnyjob/spreveng/src/master/CrcHack/Program.cs\" rel=\"nofollow noreferrer\">\n   https://bitbucket.org/johnnyjob/spreveng/src/master/CrcHack/Program.cs\n  </a>\n </p>\n <p>\n  The code which performs a brute force can be found here:\n  <a href=\"https://bitbucket.org/johnnyjob/spreveng/src/master/\" rel=\"nofollow noreferrer\">\n   https://bitbucket.org/johnnyjob/spreveng/src/master/\n  </a>\n </p>\n <p>\n  I'm open to any ideas, thanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "124",
    "tags": [
        "crc"
    ],
    "user": "johnnyjob",
    "time": "Mar 11, 2019 at 11:54",
    "comments": [
        {
            "user": "Remko",
            "text": "<html><body><span class=\"comment-copy\">\n I would suggest to have a look at the .net binaries responsible for creating the hash and load those in a disassembler such as JustDecompile.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "johnnyjob",
            "text": "<html><body><span class=\"comment-copy\">\n @Remko I tried actually (using ILSpy), but the problem is that the hash is calculated by unmanaged (native) code.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Avery3R",
            "text": "<html><body><span class=\"comment-copy\">\n If you wanted to look at it in a native code disassembler there are a couple of free ones.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Remko",
            "text": "<html><body><span class=\"comment-copy\">\n As @Avery3R says: if you have already identified the binary, run it through a disassembler. Perhaps public symbols and or trace comments can already point you in the right direction.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n Where is the binary?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}