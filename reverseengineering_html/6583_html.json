{
    "title": "Dictionary attack implementation [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6583/dictionary-attack-implementation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions on\n       <b>\n        software development\n       </b>\n       are off-topic here, but can be asked on\n       <a href=\"http://stackoverflow.com/about\">\n        Stack Overflow\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2014-11-06 23:42:54Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/6583/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I've found a function which takes as input an ASCII type string and return a value (as string). Doing some\n  <code>\n   strings\n  </code>\n  on the DLL I was able to find a couple of keys, however I would like to discover other possibilities.\n </p>\n <p>\n  The function is:\n </p>\n <pre><code>long    GetValue(LPCSTR in_key, LPSTR out_value, long in_buflen);\n</code></pre>\n <p>\n  to test the key is valid:\n </p>\n <pre><code>char buf[512];\nlong ret;\nconst char ref[] = \"ABC\";\nret = GetValue(ref, b, 512);\nif( ret )\n  {\n  printf( \"Ok: [%s -> %s]\n\", ref, b );\n  }\n</code></pre>\n <p>\n  Doing exhaustive search is too slow. What tools can I use (I am on linux+wine) to setup a dictionary based attack on this function ?\n </p>\n <p>\n  So far all keys I've found are upper Camel Case (no space).\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "174",
    "tags": [
        "c"
    ],
    "user": "tibar",
    "time": "10 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Dictionary attacks are not good for this. It is not uncommon for the key to be generated during execution, preventing you from finding the correct key (as it is\n  <em>\n   not\n  </em>\n  written in the binary).\n </p>\n <p>\n  I think that the best way to do that is follow the binary's execution stepping\n  <strong>\n   over\n  </strong>\n  at first sight (to get a better idea of that piece of code) and only then go stepping\n  <strong>\n   into\n  </strong>\n  the calls.\n </p>\n <p>\n  If you're lucky (\n  <em>\n   and the developer was lazy\n  </em>\n  ), you will find a point where the key is strcmp'ed (or something like that) with the input string, relieving you from the task of digging deep into the key generation algorithm.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "DarkLighting",
            "time": "Nov 4, 2014 at 17:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}