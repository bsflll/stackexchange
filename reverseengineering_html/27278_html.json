{
    "title": "What kind of random algorithm is used in this game?",
    "link": "https://reverseengineering.stackexchange.com/questions/27278/what-kind-of-random-algorithm-is-used-in-this-game",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am playing a game for iOS that uses a deck of 48 cards and I would like to reverse engineer the kind of algorithm that is used to generate the random deck of cards such that I can predict which card will show up next. This is what I know about the game.\n </p>\n <ul>\n  <li>\n   The game was likely made using Unity, as I found that the game regularly sends data to the domain config.uca.cloud.unity3d.com.\n  </li>\n  <li>\n   In case it is relevant, the game is basically the japanese card game Koi-Koi.\n  </li>\n  <li>\n   Each card is internally numbered from 1-48 and each deck contains only one of each card.\n  </li>\n  <li>\n   Each game takes 4 unsigned 32-bit integer seeds as input, x, y, z, and w, and generates the random deck.\n  </li>\n  <li>\n   These seeds are retrieved by querying a game API, i. e. they are not generated by the game app, which means it is possible to impersonate the API and send custom seeds to the game.\n  </li>\n  <li>\n   If all seeds are 0, then the deck does not seem to be shuffled at all. It seems to result in a very predictable range of 5-48. (For some reason 1-4, the first ”yaku”, was skipped)\n  </li>\n  <li>\n   I also tried changing just one of each seed to 1 while the rest remained as 0. For example, x = 1, but y = z = w = 0, which resulted in a deck that seemed random and not similar at all to the unshuffled deck generated when all seeds are zero.\n  </li>\n </ul>\n <p>\n  Is there someone with experience in random number generators, especially ones commonly used for iOS apps coded in Unity, who has an idea of what kind of algorithm could be used to generate the decks? Could some sort of shuffle algorithm be used?\n </p>\n <p>\n  Edit: I have attempted to shuffle an array using the .NET System.Random class according to this answer where the random object was initiated using a seed of 0.\n  <a href=\"https://stackoverflow.com/a/108836\">\n   https://stackoverflow.com/a/108836\n  </a>\n </p>\n <p>\n  But the problem is that the array is shuffled pseudo-randomly, unlike the game where the ”array” is ordered. That is why I think that a type of ”Random.next()” call doesn’t seem to be used. Could there be some multiplication involved? It would explain why a zero seed leaves the deck unchanged.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "112",
    "tags": [
        "ios"
    ],
    "user": "Mechakhan",
    "time": "Mar 20, 2021 at 12:52",
    "comments": [
        {
            "user": "Paul Uszak",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://stackoverflow.com/q/4989689\">\n  stackoverflow.com/q/4989689\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paul Uszak",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.random?view=net-5.0\" rel=\"nofollow noreferrer\">\n  docs.microsoft.com/en-us/dotnet/api/system.random?view=net-5.0\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mechakhan",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you for taking the time to respond. I forgot to mention that I did some experimentation in C#. I updated my question with what I tried.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<html><body><span class=\"comment-copy\">\n If you have iOS device you could dump the assembly code of the binary, or in case of Unity maybe even the raw C# and then reverse the algorithm without guessing\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "pythonpython",
            "text": "<html><body><span class=\"comment-copy\">\n Why? It sounds like you're trying to manipulate the score of the game. Use a proxy to ensure the api always returns a known seed.0,0,0,0 for example. You will then know the order of the cards and can play appropriately.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I finally got around to dig through the Android version of the game's APK file, and while I have not managed to obtain the game assembly code due to the crazy amounts of obfuscation in\n  <code>\n   libil2cpp.so\n  </code>\n  ,\n  <code>\n   global-metadata.dat\n  </code>\n  is not obfuscated at all. After looking through it, I can now pretty confidently say that the random algorithm used is\n  <a href=\"https://en.wikipedia.org/wiki/Xorshift\" rel=\"nofollow noreferrer\">\n   Xorshift\n  </a>\n  since I found the string\n  <code>\n   new_Xorshift\n  </code>\n  close to a bunch of other strings related to the minigame. It probably uses 128-bits since there are four 32-bit seeds.\n </p>\n <p>\n  From here on I can either try to deobfuscate the assembly code or try to brute force how exactly Xorshift is used to \"shuffle\" the deck, but either way, I think this answers my question.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Mechakhan",
            "time": "May 9, 2022 at 14:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}