{
    "title": "Cannot understand var passing to function in code compiled with dev c++ [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/11084/cannot-understand-var-passing-to-function-in-code-compiled-with-dev-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has answers here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/6775/why-are-those-instructions-generated\">\n      Why are those instructions generated?\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (1 answer)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/9079/computing-subtracted-stack-space-for-a-function-manually\">\n      Computing subtracted stack space for a function manually\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (1 answer)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2015-10-15 11:26:44Z\">\n      9 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm not understating why the parameters to printf are passed this way.\nmov     [esp+20h+var_1C], eax\nmov     [esp+20h+Format], offset Format ; \"%d\"\n </p>\n <p>\n  Why esp is added with 20h then substracted with 20h and esp doest added to point to next stack location for local vars ?\n </p>\n <p>\n  why the compiler simply didnt generate code like this:\nmove eax, var_4\npush eax\nmove eax, Format\npush eax\ncall printf\n </p>\n <p>\n  Ill be happy i some of you can either explain how push is replaced with this custom mov.\n </p>\n <p>\n  here is the source in c:\n </p>\n <pre><code>#include <stdio.h>\n\n\nint main(void)\n{\n    int a;\n    int b = 5;\n\n    printf(\"%d\", b);\n\n    return 0;\n}\n</code></pre>\n <p>\n  here is the disassembly:\n </p>\n <pre><code>; Attributes: bp-based frame\n\n; int __cdecl main(int argc, const char **argv, const char **envp)\npublic _main\n_main proc near\n\nFormat= dword ptr -20h\nvar_1C= dword ptr -1Ch\nvar_4= dword ptr -4\nargc= dword ptr  8\nargv= dword ptr  0Ch\nenvp= dword ptr  10h\n\npush    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\nsub     esp, 20h\ncall    ___main\nmov     [esp+20h+var_4], 5\nmov     eax, [esp+20h+var_4]\nmov     [esp+20h+var_1C], eax\nmov     [esp+20h+Format], offset Format ; \"%d\"\ncall    _printf\nmov     eax, 0\nleave\nretn\n_main endp\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 4,
    "views": "527",
    "tags": [
        "disassembly",
        "c"
    ],
    "user": "Igal",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n See\n <a href=\"http://reverseengineering.stackexchange.com/questions/6775/why-are-those-instructions-generated\">\n  Why are those instructions generated?\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igal",
            "text": "<html><body><span class=\"comment-copy\">\n This isnt answered my question.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n If\n <a href=\"http://reverseengineering.stackexchange.com/questions/6775/why-are-those-instructions-generated\">\n  Why are those instructions generated?\n </a>\n doesn't answer your question, you may need to clarify what you're asking.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe my\n <a href=\"http://reverseengineering.stackexchange.com/questions/9079/computing-subtracted-stack-space-for-a-function-manually/9087#9087\">\n  answer to this question\n </a>\n will help you, it has some graphics on what the stack looks like when using standard push/pop operations, and how that changes with gcc's optimizations that leave the stack pointer alone.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   push eax\n  </code>\n  is precisely identical to\n </p>\n <pre><code>sub esp, 4\nmov [esp], eax\n</code></pre>\n <p>\n  Rather than using a bunch of\n  <code>\n   push\n  </code>\n  es, they adjusted the stack pointer to where it\n  <em>\n   would\n  </em>\n  have been if they\n  <em>\n   had\n  </em>\n  used\n  <code>\n   push\n  </code>\n  .  Then, they store each datum where it would have been.  The effect is the same, it's just fewer instructions.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "sqykly",
            "time": "Oct 15, 2015 at 14:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igal",
                    "text": "<span class=\"comment-copy\">You mean that this peace of code:                                                        mov     [esp+20h+var_4], 5 mov     eax, [esp+20h+var_4] mov     [esp+20h+var_1C], eax mov     [esp+20h+Format], offset Format ; \"%d\"                                        replaces the pushes before function call ?</span>",
                    "time": null
                },
                {
                    "user": "sqykly",
                    "text": "<span class=\"comment-copy\">@igal yes, but you skipped the <code>sub</code> instruction that reserves stack for those <code>mov</code>s to go into.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a standard GCC-generated prelude of a function.\n </p>\n <pre><code>and     esp, 0FFFFFFF0h\n</code></pre>\n <p>\n  aligns stack on 16-byte boundary, then\n </p>\n <pre><code>sub     esp, 20h\n</code></pre>\n <p>\n  reserves all stack used inside the function (also aligned on 16-byte boundary, see\n  <a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment\" rel=\"nofollow\">\n   https://en.wikipedia.org/wiki/Data_structure_alignment\n  </a>\n  ). Then all operations with current local stack variables, including arguments to called functions, are done as\n </p>\n <pre><code>mov     [esp+20h+XXX]\n</code></pre>\n <p>\n  MSVC 2010 (and probably others) would do more pushes instead of this mov-ing\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Vitaly Osipov",
            "time": "Oct 13, 2015 at 21:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igal",
                    "text": "<span class=\"comment-copy\">I understand, but why the pushes replaced with moves in newer version of the compilers ?</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">@Igal A wild guess - the changed it for x64 and reused the code for x86. Check \"Stack Pointer based local variable access\" in <a href=\"http://www.codemachine.com/article_x64deepdive.html\" rel=\"nofollow noreferrer\">codemachine.com/article_x64deepdive.html</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Why esp is added with 20h then substracted with 20h and esp doest\n  added to point to next stack location for local vars ?\n  </p>\n </blockquote>\n <p>\n  The\n  <code>\n   mov [esp+20h+Format], offset Format\n  </code>\n  instruction is only a modified view of the\n  <code>\n   mov [esp], offset Format\n  </code>\n  . The disassembler tries to visualize the local variables and the stack frame in this way. The\n  <code>\n   +20h\n  </code>\n  is the size of the stack frame and the\n  <code>\n   Format\n  </code>\n  keyword means the offset of the\n  <code>\n   Format\n  </code>\n  parameter (\n  <code>\n   -20h\n  </code>\n  ). Since it is a parameter, which will be passed to a function, it is placed at the top of the stack. It would be the same, if the function allocated only\n  <code>\n   18h\n  </code>\n  stack frame and pushed the parameter values to the stack.\n </p>\n <blockquote>\n  <p>\n   why the compiler simply didnt generate code like this:\n   \n\n  </p>\n  <pre><code>mov eax, var_4\npush eax\nmov eax, Format\npush eax\ncall printf\n</code></pre>\n </blockquote>\n <p>\n  \n\n  Because the stack pointer should not be modified in this way and this form is only 1 instruction and not 2.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "ebux",
            "time": "Oct 15, 2015 at 7:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  HIgh and midlevevel languages has bascically two different calling conentions (assuming datawidth i  max_bits, much faster, but maybe lesss readable, signed values are indicated by, LSHB * 1 and son on.\n </p>\n <p>\n  The assmbly codes not corrrect. The correct code is mov [\"I\"ESP),\ndetermindes the sign. Sihn is entirely determined på software. EVen simple asseblers and compilers havea sign Array/CLT classl\n </p>\n</div>\n</body></html>",
            "votes": "-2",
            "user": "ChristianDyrnesli",
            "time": "Oct 13, 2015 at 5:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I fail to understand your answer, and even if i could understand it, i wouldn't know how it has anything to do with the question.</span>",
                    "time": null
                }
            ]
        }
    ]
}