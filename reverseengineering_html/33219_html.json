{
    "title": "SIM card firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/33219/sim-card-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to look into inner workings of smart cards. I'm familiar with APDUs, PC/SC and the ways of communicating with a smart card. I'm more interested in the firmware (bootloader/OS) that is running inside of a smart card. While I was searching for any binaries I could find, I found the firmware and bootloader for an eSIM on this\n  <a href=\"https://www.estk.me/downloads/\" rel=\"nofollow noreferrer\">\n   website\n  </a>\n  as a free download. After downloading I tried poking it in vain.\n </p>\n <p>\n  I ran the linux file command on it and got \"data\" as the output. Then I ran binwalk entropy measurement and got the result in the picture attached.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/VrwWCsth.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Binwalk entropy\" src=\"https://i.sstatic.net/VrwWCsth.png\"/>\n  </a>\n </p>\n <p>\n  Looking at it makes me think that the file is encrypted (and I'm not sure why the entropy dips towards the end of the file). At this point I have 3 questions.\n </p>\n <ol>\n  <li>\n   What are the chances that the file is encrypted? If it is encrypted, are there ways to decrypt it without having the device (the eSIM) in hand. (Hoping for an easier answer than side-channel!)\n  </li>\n  <li>\n   Suppose the file is encrypted and I manage to decrypt the binary, instructions of which instruction set/architecture would I be looking at?\n  </li>\n  <li>\n   Could someone point me to source code of firmware or binaries of other smart cards, if they exist in the wild?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "43",
    "tags": [
        "binary-analysis",
        "encryption",
        "firmware-analysis",
        "smartcards",
        "entropy"
    ],
    "user": "rawberry",
    "time": "Sep 12, 2024 at 20:45",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n I would start with Osmocom. One starting point is e.g.\n <a href=\"https://downloads.osmocom.org/docs/pysim/master/html/\" rel=\"nofollow noreferrer\">\n  downloads.osmocom.org/docs/pysim/master/html\n </a>\n AFAIK on some hacker events they run custom cellular networks with own SIM cards, I assume they use tools from Osmocom project.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}