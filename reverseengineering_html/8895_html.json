{
    "title": "Decompile erlang .beam files compiled without debug_info",
    "link": "https://reverseengineering.stackexchange.com/questions/8895/decompile-erlang-beam-files-compiled-without-debug-info",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an app that use erlang .beam compiled files without debugging information.\nSomeone have some tips how to decompile or reverse engineering these?\n </p>\n <p>\n  Thanks in advance\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "7k",
    "tags": [
        "patch-reversing",
        "erlang"
    ],
    "user": "itseeder",
    "time": "Oct 30, 2017 at 17:18",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n \"7.11  Is there a \"reverse compiler\" for BEAM files?\" (\n <a href=\"http://www.erlang.org/faq/tools.html\" rel=\"nofollow noreferrer\">\n  erlang.org/faq/tools.html\n </a>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "itseeder",
            "text": "<html><body><span class=\"comment-copy\">\n I already see it. But honestly did you understand how to pass to beam_lib arguments to obtain abstract_code?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user12249",
            "text": "<html><body><span class=\"comment-copy\">\n Can't write comments, yet, so you get the link as an answer. The HelloMike challenge from the 9447 CTF was a beam file without debug_info. This writeup goes through the reversing process of the file:\n <a href=\"https://medium.com/@shanewilton/9447-ctf-2014-hellomike-writeup-ba812f012d5\" rel=\"nofollow noreferrer\">\n  medium.com/@shanewilton/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "itseeder",
            "text": "<html><body><span class=\"comment-copy\">\n Following your advice and link i get that i don't have debug_info and i get an empty file if i try to decompile it with the command: erl -noshell -eval ‘hipe:c(my_beam, [pp_beam]), init:stop().’ > my_beam.disas. Do you have a tip? i get this error: (no error logger present) error: \"Error in process <0.0.0> with exit value: {fun ction_clause,[{init,prepare_run_args,[{eval,[<<11 bytes>>,<<11 bytes>>,<<13 byte s>>]}]},{init,map,2},{init,boot,1}]}\n\"\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can get low-level bytecode source of .beam file with\n  <strong>\n   beam_disasm:file(module_name)\n  </strong>\n </p>\n <p>\n  It's not easy to read it and takes time to figure it out. But it's much verbose and easier to comprehend than any real hardware assembly code. You can give it a try.\n </p>\n <p>\n  For example, if you have a .beam file called \"my_module.beam\", open\n  <em>\n   erl\n  </em>\n  and type\n </p>\n <pre><code>file:write_file(\"/tmp/my_module_disasm\", io_lib:fwrite(\"~p.\n\", [beam_disasm:file(my_module)])).\n</code></pre>\n <p>\n  where\n  <em>\n   '/tmp/my_module_disasm'\n  </em>\n  is the path where you want to save the result.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "pumbo",
            "time": "Jul 7, 2015 at 3:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}