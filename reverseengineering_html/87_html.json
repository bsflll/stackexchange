{
    "title": "Static analysis of C++ binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/87/static-analysis-of-c-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When reverse engineering binaries compiled from C++, it is common to see many indirect calls to function pointers in\n  <a href=\"http://en.wikipedia.org/wiki/Virtual_method_table\">\n   vtables\n  </a>\n  .  To determine where these calls lead, one must always be aware of the object types expected by the\n  <code>\n   this\n  </code>\n  pointer in\n  <a href=\"http://en.wikipedia.org/wiki/Virtual_function\">\n   virtual functions\n  </a>\n  , and sometimes map out a class hierarchy.\n </p>\n <p>\n  In the context of static analysis, what tools or annotation techniques do you use to make virtual functions simpler to follow in your disassembly?  Solutions for all static analysis toolkits are welcome.\n </p>\n</div>\n</body></html>",
    "votes": "23",
    "answers": 1,
    "views": "7k",
    "tags": [
        "static-analysis",
        "ida",
        "c++",
        "vtables",
        "virtual-functions"
    ],
    "user": "user1354557",
    "time": "Mar 20, 2013 at 18:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I gave a talk at Recon in 2011 (\"Practical C++ Decompilation\") on this exact topic.\n  <a href=\"http://www.hexblog.com/wp-content/uploads/2011/08/Recon-2011-Skochinsky.pdf\" rel=\"nofollow noreferrer\">\n   Slides\n  </a>\n  and\n  <a href=\"https://www.youtube.com/watch?v=efkLG8-G3J0\" rel=\"nofollow noreferrer\">\n   video\n  </a>\n  (\n  <a href=\"https://www.youtube.com/watch?v=efkLG8-G3J0\" rel=\"nofollow noreferrer\">\n   mirror\n  </a>\n  ) are available.\n </p>\n <p>\n  The basic approach is simple: represent classes as structures, and vtables as structures of function pointers. There are some tricks I described that allow you to handle inheritance and different vtables for the classes in the same hierarchy. These tricks were also described on\n  <a href=\"http://blog.0xbadc0de.be/archives/67\" rel=\"nofollow noreferrer\">\n   this blog\n  </a>\n  ; I'm not sure if it was based on my talk or an independent work.\n </p>\n <p>\n  One additional thing that I do is add a repeatable comment to each slot in the vtable structure with the implementation's address. This allows you to quickly jump to the implementation when you apply the structure to the vtable slot load:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dAGk2.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "24",
            "user": "Igor Skochinsky",
            "time": "Jun 22, 2017 at 8:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">Questions about this:  1) How do you (personally) annotate indirect calls when the vtable being referenced is undetermined?  (more specifically, when there are multiple possible target addresses for the call?)  2) How do you (personally) name your class structures before determining their purpose, and how far do you let their temporary names propagate throughout the database before you change them?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I (usually) create one vtable struct per actual vtable instance, so the addresses always point to the actual implementation. However, nothing stops you from adding several addresses to the comment. As for naming, I don't really have a fixed rule set, I can mix Hungarian, CamelCase and undescored_words in the single database. Re-renaming stuff is annoying, so I usually defer renaming classes and methods until I'm reasonably sure what the class is doing (or have RTTI or debugging info).</span>",
                    "time": null
                },
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">Excellent.  Regarding the second question, I was asking if you had some systematic way of generating and handling temporary names.  In the absence of contextual information, what I do is choose a \"random\" phonetic three-character name for the class.  Since this temporary name propagates to comments, function names, structure members, variable names, etc. I won't always bother with renaming, but I'll instead make a note in the Notepad subview that explains what the class actually is.</span>",
                    "time": null
                }
            ]
        }
    ]
}