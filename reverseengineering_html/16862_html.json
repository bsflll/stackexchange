{
    "title": "How To Print Addresses in Radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/16862/how-to-print-addresses-in-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm switching over to Radare2 from GDB mixed with peda. One of the things I love about GDB, is the\n  <code>\n   p\n  </code>\n  command. For example,\n  <code>\n   p system\n  </code>\n  prints out the address of system. As well, peda's\n  <code>\n   searchmem\n  </code>\n  function is wonderful for uses such as\n  <code>\n   searchmem SHELL\n  </code>\n  . In Radare2, I have no idea how to achieve this. I've been Google'ing to the high heavens to no avail. Does anyone know if Radare2 has this ability?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "4k",
    "tags": [
        "radare2"
    ],
    "user": "Henry F",
    "time": "Nov 29, 2017 at 3:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To print the address of\n  <code>\n   system\n  </code>\n  export of\n  <code>\n   libc\n  </code>\n  with radare2 you can use\n  <code>\n   dmi libc system\n  </code>\n </p>\n <p>\n  First you need to open radare2 and continue executing until you reach the program’s entrypoint. You have to do this because radare2 is starting its debugging before\n  <code>\n   libc\n  </code>\n  is loaded. When you’ll reach the entrypoint, the library would probably be loaded.\n </p>\n <p>\n  Now use the\n  <code>\n   dmi\n  </code>\n  command and pass it libc and the desired function.\n </p>\n <pre><code>$ r2 -d binary_name\n\n[0xf771ab30]> dcu entry0\nContinue until 0x080483d0 using 1 bpsize\nhit breakpoint at: 80483d0\n\n[0x080483d0]> dmi libc system\n</code></pre>\n <p>\n  Worth to mention here, that after the analysis (see\n  <code>\n   a?\n  </code>\n  ) radare2 associates names to interesting offsets in the file such as Sections, Function, Symbols, Strings, etc. Those names are called ‘flags’. You can print the flags and their addresses with\n  <code>\n   f\n  </code>\n  . For more help see\n  <code>\n   f?\n  </code>\n  and read the\n  <a href=\"https://radare.gitbooks.io/radare2book/content/basic_commands/flags.html\" rel=\"nofollow noreferrer\">\n   \"flags\"\n  </a>\n  chapter in radare2 book.\n </p>\n <p>\n  To know how to print different addresses and flags in different ways I'd recommend trying the\n  <code>\n   p?\n  </code>\n  command and reading the\n  <a href=\"https://radare.gitbooks.io/radare2book/content/basic_commands/print_modes.html\" rel=\"nofollow noreferrer\">\n   \"Printing\"\n  </a>\n  chapter.\n </p>\n <hr/>\n <p>\n  Searching in radare2, including in memory, can be done with the\n  <code>\n   /\n  </code>\n  command. You can get more help about the available search commands by using\n  <code>\n   /?\n  </code>\n  . I highly recommend reading the\n  <a href=\"https://radare.gitbooks.io/radare2book/content/search_bytes/intro.html\" rel=\"nofollow noreferrer\">\n   \"Search\"\n  </a>\n  chapter in radare2 book. See my answer\n  <a href=\"https://reverseengineering.stackexchange.com/a/16760/18698\">\n   here\n  </a>\n  for example.\n </p>\n <hr/>\n <p>\n  <strong>\n   References\n  </strong>\n </p>\n <ul>\n  <li>\n   <a href=\"https://www.gitbook.com/book/radare/radare2book/details\" rel=\"nofollow noreferrer\">\n    radare2 book\n   </a>\n  </li>\n  <li>\n   <a href=\"https://www.megabeets.net/a-journey-into-radare-2-part-2/\" rel=\"nofollow noreferrer\">\n    Exploitation using radare2\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Nov 29, 2017 at 4:29",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From the\n  <a href=\"https://github.com/longld/peda/blob/master/peda.py#L1893\" rel=\"nofollow noreferrer\">\n   <code>\n    peda\n   </code>\n   source code\n  </a>\n  :\n </p>\n <pre><code> def searchmem(self, start, end, search, mem=None):\n        \"\"\"\n        Search for all instances of a pattern in memory from start to end\n        Args:\n            - start: start address (Int)\n            - end: end address (Int)\n            - search: string or python regex pattern (String)\n            - mem: cached mem to not re-read for repeated searches (raw bytes)\n        Returns:\n            - list of found result: (address(Int), hex encoded value(String))\n        \"\"\"\n</code></pre>\n <p>\n  This sounds quite similar to\n  <code>\n   r2\n  </code>\n  's\n  <a href=\"https://radare.gitbooks.io/radare2book/content/search_bytes/intro.html\" rel=\"nofollow noreferrer\">\n   searching capability\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   The radare2 search engine is based on work done by esteve, plus multiple features implemented on top of it. It supports multiple keyword searches, binary masks, and hexadecimal values. It automatically creates flags for search hit locations ease future referencing.\n  </p>\n  <p>\n   Search is initiated by / command.\n  </p>\n  <pre><code>[0x00000000]> /?\n|Usage: /[amx/] [arg]Search stuff (see 'e??search' for options)\n| / foo\\x00           search for string 'foo\\0'\n| /j foo\\x00          search for string 'foo\\0' (json output)\n| /! ff               search for first occurrence not matching\n| /+ /bin/sh          construct the string with chunks\n| /!x 00              inverse hexa search (find first byte != 0x00)\n| //                  repeat last search\n| /h[t] [hash] [len]  find block matching this hash. See /#?\n| /a jmp eax          assemble opcode and search its bytes\n| /A jmp              find analyzed instructions of this type (/A? for help)\n| /b                  search backwards\n| /B                  search recognized RBin headers\n| /c jmp [esp]        search for asm code\n| /C[ar]              search for crypto materials\n| /d 101112           search for a deltified sequence of bytes\n| /e /E.F/i           match regular expression\n| /E esil-expr        offset matching given esil expressions %%= here\n| /f file [off] [sz]  search contents of file with offset and size\n| /i foo              search for string 'foo' ignoring case\n| /m magicfile        search for matching magic file (use blocksize)\n| /o                  show offset of previous instruction\n| /p patternsize      search for pattern of given size\n| /P patternsize      search similar blocks\n| /r[e] sym.printf    analyze opcode reference an offset (/re for esil)\n| /R [grepopcode]     search for matching ROP gadgets, semicolon-separated\n| /v[1248] value      look for an `cfg.bigendian` 32bit value\n| /V[1248] min max    look for an `cfg.bigendian` 32bit value in range\n| /w foo              search for wide string 'f\\0o\\0o\\0'\n| /wi foo             search for wide string ignoring case 'f\\0o\\0o\\0'\n| /x ff..33           search for hex string ignoring some nibbles\n| /x ff0033           search for hex string\n| /x ff43 ffd0        search for hexpair with mask\n| /z min max          search for strings of given size\n</code></pre>\n </blockquote>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}