{
    "title": "How do I extract a copy of an unknown firmware from a hardware device?",
    "link": "https://reverseengineering.stackexchange.com/questions/3526/how-do-i-extract-a-copy-of-an-unknown-firmware-from-a-hardware-device",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Appreciate it's a broad question, but despite days of Googling I haven't found straight forward explanation of the general principle of how to \"capture\" or copy an unkown firmware from a piece of hardware.\n </p>\n <p>\n  I gather once you have it you can begin to use various tools to analyse it, but what I want to understand is how to get it in the first place.\n </p>\n <p>\n  From what i understand you need to connect to it via a JTAG or UART connection , after that I'm a bit lost.\n </p>\n</div>\n</body></html>",
    "votes": "26",
    "answers": 2,
    "views": "70k",
    "tags": [
        "hardware",
        "firmware"
    ],
    "user": "ianfuture",
    "time": "Jan 23, 2014 at 16:55",
    "comments": [
        {
            "user": "vrickson",
            "text": "<html><body><span class=\"comment-copy\">\n I want to buy this tool. Can we have more details with price / unit. Thanks\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you may suspect, it very much depends on the hardware. In general, you are correct, JTAG and/or UARTs can be often be used to get a copy of the firmware (downloading a firmware update from the vendor is usually the easiest way of course, but I'm assuming that is not what you mean).\n </p>\n <p>\n  JTAG implementations typically allow you to read/write memory, and flash chips are typically \"mapped\" into memory at some pre-defined address (finding that address is usually a matter of Googling, experience, and trial and error); thus, you can use tools like\n  <a href=\"http://urjtag.org/\" rel=\"noreferrer\">\n   UrJTAG\n  </a>\n  and\n  <a href=\"http://openocd.sourceforge.net/\" rel=\"noreferrer\">\n   OpenOCD\n  </a>\n  to read the contents of flash.\n </p>\n <p>\n  UART is just a serial port, so what interface or options it provides (if any) is entirely up to the developer who created the system; most bootloaders (e.g.,\n  <a href=\"http://www.denx.de/wiki/U-Boot\" rel=\"noreferrer\">\n   U-Boot\n  </a>\n  ) do allow you to read/write flash/memory, and will dump the ASCII hex to your terminal window. You then would need to parse the hexdump and convert it into actual binary values. Again, YMMV and there may be no way to dump memory or flash via the UART.\n </p>\n <p>\n  Other devices may have other mechanisms that provide similar functionality; for example, Microchip's PIC microcontrollers use\n  <a href=\"http://en.wikipedia.org/wiki/In-circuit_serial_programming\" rel=\"noreferrer\">\n   ICSP\n  </a>\n  (In Circuit Serial Programming) interfaces to read, write, and debug firmware. Such interfaces are usually proprietary, and may or may not be documented (Microchip's is well known).\n </p>\n <p>\n  Vendors may take steps to protect or disable debug interfaces such as JTAG, UART and ICSP, but often you can\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2337/how-to-dump-flash-memory-with-spi\">\n   dump the flash chip\n  </a>\n  directly (this is usually faster than JTAG/UART, but may require some de/soldering). For devices such as microcontrollers that have the flash chip built-in (i.e., the flash chip is not exposed to you), you may need to resort to\n  <a href=\"http://www.bunniestudios.com/blog/?page_id=40\" rel=\"noreferrer\">\n   more advanced techniques\n  </a>\n  for defeating such copy-protections.\n </p>\n <p>\n  Personally, since I don't deal much with microcontroller based systems, dumping the flash chip directly is usually my go-to for grabbing a copy of the firmware from the device.\n </p>\n</div>\n</body></html>",
            "votes": "23",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">+1 It <i>really</i> depends on the hardware though. Try searching the web for a device that was - with design specifications and all - available under NDA but is no more. Speaking from experience.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Extracting the content of a hardware chip is known as \"\n  <strong>\n   snarf\n  </strong>\n  \"ing. (That term may help with your Google searches.)\n </p>\n <p>\n  To snarf the contents of a chip, you need a ROM reader/programmer, such as one of the devices from\n  <a href=\"http://www.needhams.com/programmers.htm\" rel=\"noreferrer\">\n   http://www.needhams.com/programmers.htm\n  </a>\n </p>\n <p>\n  <img alt=\"ROM programmer\" src=\"https://i.sstatic.net/FBeyZ.jpg\"/>\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Jason Geffner",
            "time": "Jan 23, 2014 at 17:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}