{
    "title": "How to reverse engineer a Windows 10 UWP app?",
    "link": "https://reverseengineering.stackexchange.com/questions/17127/how-to-reverse-engineer-a-windows-10-uwp-app",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanted to see what Microsoft are doing when you click \"Restart now\" button in their Settings -> Update window on Windows 10:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/YitFy.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/YitFy.png\"/>\n  </a>\n </p>\n <p>\n  Somehow the results are not the same what is available via\n  <code>\n   InitiateSystemShutdownEx\n  </code>\n  or\n  <code>\n   InitiateShutdown\n  </code>\n  WinAPIs, especially concerning installation of updates.\n </p>\n <p>\n  So I wanted to look into the code they use for that\n  <code>\n   Restart\n  </code>\n  button. Usually I would use Spy++ to look up a parent window's\n  <code>\n   WndProc\n  </code>\n  and then load the process in IDA Pro and put a breakpoint on it. Then trap a condition for the\n  <code>\n   BM_CLICK\n  </code>\n  message.\n </p>\n <p>\n  In this case though, the whole settings is a window of its own. The button does not appear in Spy++:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/eECa5.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/eECa5.png\"/>\n  </a>\n </p>\n <p>\n  Any ideas how do I proceed from there?\n </p>\n</div>\n</body></html>",
    "votes": "35",
    "answers": 4,
    "views": "17k",
    "tags": [
        "ida",
        "debugging",
        "windows-10"
    ],
    "user": "c00000fd",
    "time": "Jan 5, 2018 at 22:54",
    "comments": [
        {
            "user": "dsasmblr",
            "text": "<html><body><span class=\"comment-copy\">\n I'd love to see someone offer an approach to this. Maybe consider starting a bounty at this point to garner more interest from the heavy-hitters?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "<html><body><span class=\"comment-copy\">\n @dsasmblr: Here you go. Wiped out on the points. Hopefully someone can answer it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have thought carefully before adding this as \"\n  <em>\n   Another Answer\n  </em>\n  \" rather than editing my existing answer that I posted above this morning.\n </p>\n <p>\n  I feel that this answer deserves another post of its own as it's not just a simple continuation of the material posted in my answer above.\n </p>\n <p>\n  I have spent over 2 hours on this post to avoid just\n  <em>\n   cutting and pasting\n  </em>\n  content from other sites.\nWhat I have focussed on rather, is on the point that I only include content in this post here, such that this answer  would still remain relevant even if the original websites (from where this content is taken from) would ever go down in the future.\n </p>\n <p>\n  I am  trying to focus on the essentials that would enable us to hook and modify the code  in  UWP Apps, as asked by the OP.\n </p>\n <h1>\n  <strong>\n   Hacking and Modding Windows Universal Apps :\n  </strong>\n </h1>\n <p>\n  DLL-Injection and Function-Hooking, work perfectly fine in UWP-Apps with most, if not all, injection and hooking techniques.\n </p>\n <p>\n  <strong>\n   A couple of main differences regarding Function Hooking and Dll Injection, between the UWP apps and the \"standard\" Win32 apps :\n  </strong>\n </p>\n <p>\n  <strong>\n   First:\n  </strong>\n  \n\n  The Window, in which the UWP app renders its content, is not owned by the Apps\nexecutable.\nInstead “\n  <strong>\n   ApplicationFrameHost\n  </strong>\n  ” does,and so you should not target the Window but rather the process itself.\n  \n\n  Note: Because of this, you cannot create new windows, like message boxes for example, when injected in a UWP-App.\n </p>\n <p>\n  <strong>\n   Second:\n  </strong>\n  \n\n  The DLL you want to inject has to have “Read, Execute” as well as the “Read” permissions\nset for the “ALL APPLICATION PACKAGES”-Group.\nYou can set this via the properties tab of the DLL-file but the name may differ depending on\nyour system language.\n </p>\n <p>\n  You could also just use the following little code snippet  from\n  <a href=\"http://stackoverflow.com/questions/17761826/assigning-folder-permissions-to-all-application-packages-group\">\n   StackOverflow\n  </a>\n  (so don’t mind the “goto”s) to set the permissions programmatically.\n </p>\n <p>\n  <strong>\n   Code-Snippet\n  </strong>\n </p>\n <pre><code>DWORD SetPermissions(std::wstring wstrFilePath) {\n    PACL pOldDACL = NULL, pNewDACL = NULL;\n    PSECURITY_DESCRIPTOR pSD = NULL;\n    EXPLICIT_ACCESS eaAccess;\n    SECURITY_INFORMATION siInfo = DACL_SECURITY_INFORMATION;\n    DWORD dwResult = ERROR_SUCCESS;\n    PSID pSID;\n    // Get a pointer to the existing DACL\n    dwResult = GetNamedSecurityInfo(wstrFilePath.c_str(), SE_FILE_OBJECT, DACL_SECURITY_INFORMATION, NULL, NULL, & pOldDACL, NULL, & pSD);\n    if (dwResult != ERROR_SUCCESS)\n        goto Cleanup;\n    // Get the SID for ALL APPLICATION PACKAGES using its SID string\n    ConvertStringSidToSid(L\"S-1-15-2-1\", & pSID);\n    if (pSID == NULL)\n        goto Cleanup;\n    ZeroMemory( & eaAccess, sizeof(EXPLICIT_ACCESS));\n    eaAccess.grfAccessPermissions = GENERIC_READ | GENERIC_EXECUTE;\n    eaAccess.grfAccessMode = SET_ACCESS;\n    eaAccess.grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;\n    eaAccess.Trustee.TrusteeForm = TRUSTEE_IS_SID;\n    eaAccess.Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;\n    eaAccess.Trustee.ptstrName = (LPWSTR) pSID;\n    // Create a new ACL that merges the new ACE into the existing DACL\n    dwResult = SetEntriesInAcl(1, & eaAccess, pOldDACL, & pNewDACL);\n    if (ERROR_SUCCESS != dwResult)\n        goto Cleanup;\n    // Attach the new ACL as the object's DACL\n    dwResult = SetNamedSecurityInfo((LPWSTR) wstrFilePath.c_str(), SE_FILE_OBJECT, siInfo, NULL, NULL, pNewDACL, NULL);\n    if (ERROR_SUCCESS != dwResult)\n        goto Cleanup;\nCleanup:\n    if (pSD != NULL)\n        LocalFree((HLOCAL) pSD);\n    if (pNewDACL != NULL)\n        LocalFree((HLOCAL) pNewDACL);\n    return dwResult;\n}\n</code></pre>\n <p>\n  Afterward, inject your DLL with your preferred injector/method, and your DLLs code will\nmagically function.\n  \n\n  Since UWP-Apps use the Win32 API under the hood, you can expect KernelBase.dll,\nKernel32.dll, ntdll.dll, and user32.dll to be loaded in them. You will also find d2d1.dll and\neither d3d11.dll or d3d12.dll (used in a handful of apps) loaded in all UWP apps, including\nthe new UWP calculator app.\n </p>\n <p>\n  For function hooking, as you might now expect, it works the same way it does for Win32 Programs.\n </p>\n <p>\n  <strong>\n   Taking control over the (hidden) “C:\\Program Files\\WindowsApps\\” directory :\n  </strong>\n  \n\n  Without taking control over the (hidden) “C:\\Program Files\\WindowsApps\\” directory, or\nwherever you might have it, you cannot access the files of UWP-Apps.\n  \n\n  But you can just take\ncontrol of this, and any subdirectories and its files without any problems.\n </p>\n <p>\n  You could also always just\n  <a href=\"https://mikehowells.wordpress.com/2011/02/12/running-a-command-prompt-as-nt-authoritysystem/\" rel=\"noreferrer\">\n   open up a shell as NT-Authority\n  </a>\n  and access them that way.\n  \n\n  If you just wanted to mod a simple config file or something you should be fine.\nHowever, some Apps, not all of them, check if their files were tampered with. But that’s\neasily circumvented.\n </p>\n <p>\n  All you have to do is Hook the “CreateFileW“-Method in “KernelBase.dll“, monitor the file\naccess and then reroute those access requests to load your modified version from some\ndirectory you can access just fine.\n </p>\n <p>\n  Here’s an example that does exactly what just described, using the previously mentioned MinHook library.\n </p>\n <p>\n  <strong>\n   Code-Snippet :\n  </strong>\n </p>\n <pre><code>#include <Windows.h>\n#include <atlbase.h>\n#include <Shlobj.h>\n#include <string>\n#include \"MinHook.h\"\n// Path to modified game files store in AppData\nstd::wstring MOD_FILES_PATH;\n// Path to the apps protected resources in WindowsApps\n// Don't use the full path name, just keep the Publisher.AppName part\nstd::wstring APP_LOCATION(L\"C:\\\\ProgramFiles\\\\WindowsApps\\\\Publisher.AppName\");\n// Sets a hook on the function at origAddress function and provides a trampoline to the original function\nBOOL setHook(LPVOID * origAddress, LPVOID * hookFunction, LPVOID * trampFunction);\n// Attaches a hook on a function given the name of the owning module and the name of the function\nBOOL attach(LPWSTR wstrModule, LPCSTR strFunction, LPVOID * hook, LPVOID * original);\n// Basic hook setup for CreateFileW\ntypedef HANDLE(WINAPI * PfnCreateFileW)(LPCWSTR lpFilename, DWORD dwAccess,\n    DWORD dwSharing, LPSECURITY_ATTRIBUTES saAttributes, DWORD dwCreation,\n    DWORD dwAttributes, HANDLE hTemplate);\nPfnCreateFileW pfnCreateFileW = NULL; // Will hold the trampoline to the original CreateFileW function\n// CreateFileW hook function\nHANDLE WINAPI HfnCreateFileW(LPCWSTR lpFilename, DWORD dwAccess, DWORD dwSharing, LPSECURITY_ATTRIBUTES saAttributes, DWORD dwCreation, DWORD dwAttributes, HANDLE hTemplate) {\n    std::wstring filePath(lpFilename);\n    // Check if the app is accessing protected resources\n    if (filePath.find(APP_LOCATION) != filePath.npos) {\n        std::wstring newPath(MOD_FILES_PATH);\n        // Windows provides the app the location of the WindowsApps directory, so the first half the file path will use back slashes\n        // After that, some apps will use back slashes while others use forward slashes so be aware of what the app uses\n        newPath += filePath.substr(filePath.find(L\"\\\\\", APP_LOCATION.size()) + 1,\n            filePath.size());\n        // Check if the file being accessed exists at the new path and reroute access to that file\n        // Don't reroute directories as bad things can happen such as directories being ghost locked\n        if (PathFileExists(newPath.c_str()) && !PathIsDirectory(newPath.c_str()))\n            return pfnCreateFileW(newPath.c_str(), dwAccess, dwSharing, saAttributes,\n                dwCreation, dwAttributes, hTemplate);\n    }\n    // Let the app load other files normally\n    return pfnCreateFileW(lpFilename, dwAccess, dwSharing, saAttributes,\n        dwCreation, dwAttributes, hTemplate);\n}\nBOOL Initialize() {\n    // Initialize MinHook\n    if (MH_Initialize() != MH_OK)\n        return FALSE;\n    // Get the path to the apps AppData folder\n    // When inside a UWP app, CSIDL_LOCAL_APPDATA returns the location of the apps AC folder in AppData\n    TCHAR szPath[MAX_PATH];\n    if (SUCCEEDED(SHGetFolderPath(NULL, CSIDL_LOCAL_APPDATA, NULL, 0, szPath))) {\n        // Get the path to the mod files folder\n        std::wstring appData(szPath);\n        appData = appData.substr(0, appData.rfind(L\"AC\")); // Get the base directory\n        appData += L\"LocalState\\\\ModFiles\\\\\"; // Get the location of any new files you want the app to use\n        MOD_FILES_PATH = appData;\n    } else\n        return FALSE;\n    // Attach a hook on CreateProcessW and return the status of the hook\n    BOOL hook = TRUE;\n    hook &= attach(L\"KernelBase.dll\", \"CreateFileW\", (LPVOID * ) & HfnCreateFileW,\n        (LPVOID * ) & pfnCreateFileW);\n    return hook;\n}\nBOOL Uninitialize() {\n    // Uninitialize MinHook\n    if (MH_Uninitialize() != MH_OK)\n        return FALSE; // This status will end up being ignored\n    return TRUE;\n}\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n        return Initialize(); // If initialization failed, the DLL will detach\n        break;\n    case DLL_THREAD_ATTACH:\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        Uninitialize(); // Return value doesn't matter when detaching\n        break;\n    }\n    return TRUE;\n}\nBOOL setHook(LPVOID * origAddress, LPVOID * hookFunction, LPVOID * trampFunction) {\n    if (MH_CreateHook(origAddress, hookFunction,\n            reinterpret_cast < LPVOID * > (trampFunction)) != MH_OK)\n        return FALSE;\n    if (MH_EnableHook(origAddress) != MH_OK)\n        return FALSE;\n    return TRUE;\n}\nBOOL attach(LPWSTR wstrModule, LPCSTR strFunction, LPVOID * hook, LPVOID * original) {\n    HMODULE hModule = GetModuleHandle(wstrModule);\n    if (hModule == NULL)\n        return FALSE;\n    FARPROC hFunction = GetProcAddress(hModule, strFunction);\n    if (hFunction == NULL)\n        return FALSE;\n    return setHook((LPVOID * ) hFunction, hook, original);\n}\n</code></pre>\n <p>\n  <strong>\n   A few more things:\n  </strong>\n  \n\n  You can’t just launch a UWP-App like a regular Win32 Program using CreateProcess.\nLuckily for us, M$ has provided us with the\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/hh706902(v=vs.85).aspx\" rel=\"noreferrer\">\n   IApplicationActivationManager\n  </a>\n  interface which\nlets developers launch UWP apps from regular Win32 programs.\n </p>\n <p>\n  If we want to do something to an App before it is launched, we can suspend it before that using the code below.\n </p>\n <p>\n  <strong>\n   Code Snippet :\n  </strong>\n </p>\n <pre><code>// Gets the current application's UserModelId and PackageId from the registry\n// Substitute your own methods in place of these\nstd::wstring appName = GetApplicationUserModelId();\nstd::wstring appFullName = GetApplicationPackageId();\n\nHRESULT hResult = S_OK;\n\n// Create a new instance of IPackageDebugSettings\nATL::CComQIPtr debugSettings;\nhResult = debugSettings.CoCreateInstance(CLSID_PackageDebugSettings, NULL, CLSCTX_ALL);\nif(hResult != S_OK) return hResult;\n\n// Enable debugging\nhResult = debugSettings->EnableDebugging(appFullName.c_str(), NULL, NULL);\nif(hResult != S_OK) return hResult;\n\n// Launch the application using the function discussed above\nDWORD dwProcessId = 0;\nhResult = LaunchApplication(appName, &dwProcessId);\nif(hResult != S_OK) return hResult;\n\n/* Do more stuff after the app has been resumed */\n\n// Stop debugging the application so it can run as normal\nhResult = debugSettings->DisableDebugging(appFullName.c_str());\nif(hResult != S_OK) return hResult;\n</code></pre>\n <p>\n  Using the code above, your program will hang until the app is resumed as it is waiting on the app to reply back to the IApplicationActivationManager on its launch status. To resume the app, you can simply specify the path to your executable file when enabling debugging:\n </p>\n <p>\n  <strong>\n   Code Snippet:\n  </strong>\n </p>\n <pre><code>// Enable Debugging with a custom debugger executable\nhResult = debugSettings->EnableDebugging(appFullName.c_str(), pathToExecutable.c_str(), NULL);\nif(hResult != S_OK) return hResult;\n</code></pre>\n <p>\n  Windows will pass the process ID for the app process to the executable acting as the debugger using the command line argument -p followed by the process ID. From the debugger executable, you can do whatever you want to while the app is suspended such as injecting mods, and finally resume the app using NtResumeProcess.\n </p>\n <pre><code>#define IMPORT extern __declspec(dllimport)\n\nIMPORT int __argc;\nIMPORT char** __argv;\n//IMPORT wchar_t** __wargv;\n\n// Turning this into a normal Windows program so it's invisible when run\nint CALLBACK WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)\n{\n    DWORD dwProcessId = 0;\n\n    // Process the arguments passed to the debugger\n    for (int i = 1; i < __argc; i += 2)\n    {\n        std::string arg(__argv[i]);\n        if (arg == \"-p\")\n            dwProcessId = atoi(__argv[i + 1]);\n    }\n\n    if(dwProcessId == 0)\n        return E_FAIL;\n\n    // Can do additional error checking to make sure the app is active and not tombstoned\n\n    ModLoader::InjectMods(dwProcessId);\n    ProcessUtils::ResumeProcess(dwProcessId); // Uses NtResumeProcess\n\n    return S_OK;\n}\n</code></pre>\n <p>\n  <strong>\n   Important note:\n  </strong>\n  Call\n </p>\n <pre><code>// Initialize COM objects, only need to do this once per thread\nDWORD hresult = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);\nif (!SUCCEEDED(hresult)) return hresult;\n</code></pre>\n <p>\n  Before you launch an App or do anything call this afterward:\n </p>\n <pre><code>CoUninitialize();\n</code></pre>\n <p>\n  <strong>\n   References:\n  </strong>\n  \n\n  (1)\n  <a href=\"https://www.unknowncheats.me/forum/general-programming-and-reversing/177183-basic-intermediate-techniques-uwp-app-modding.html\" rel=\"noreferrer\">\n   Basic and Intermediate Techniques of UWP App Modding\n  </a>\n  \n\n  (2)\n  <a href=\"https://behind.flatspot.pictures/hacking-windows-universal-apps-uwp/\" rel=\"noreferrer\">\n   Hacking and Modding Windows Universal Apps\n  </a>\n </p>\n <p>\n  I sincerely hope that these two answers of mine would be helpful to anyone searching SE in future on the topics of UWP App hooking/modification.\n </p>\n</div>\n</body></html>",
            "votes": "32",
            "user": "Paul",
            "time": "May 9, 2020 at 0:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "barnaby-b",
                    "text": "<span class=\"comment-copy\">Great answer! I'll make sure to review the code examples and references - kudos.</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Yes, thank you. This answer is closer to answering my original question. (Your other answer is about global hooks. Unfortunately in this case you won't be able to do much with them. I can as well find a click on the UWP app's window, i.e <code>Windows.UI.Core.CoreWindow</code> by trapping a mouse click event in its WndProc with IDA. Unfortunately, it's not easy to proceed further on from that point. Or how to get to <a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.ui.core.corewindow\" rel=\"nofollow noreferrer\">this class</a> that can help route the call further from a button click.)</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">I'll mark it as the answer so that you can receive the bounty for your work. I just want to point out that there's more to it left to be done. Can you contact me <a href=\"https://reverseengineering.stackexchange.com/users/14864/c00000fd?tab=profile\">via email</a>? I'll post an update here when I get it resolved.</span>",
                    "time": null
                },
                {
                    "user": "TechLord",
                    "text": "<span class=\"comment-copy\">Thank you <b>c00000fd</b> ! Had been working overtime a lot these few days (working even this weekend) and hence did not have time to work on the actual \"Restart\" button in the Windows Update that you were mentioning. Hopefully in the next few days I will be able to create a solution for that exact \"Restart\" button issue and update it here. Will also email you as requested.  @barnaby-b - Thank you for the compliment!</span>",
                    "time": null
                },
                {
                    "user": "dsasmblr",
                    "text": "<span class=\"comment-copy\">Awesome job, TechLord, and great feedback and attitude towards this whole thing, c00000fd! I hope to see you follow through with that Restart button solution, TechLord. Also, would quite enjoy an update from you as well once you get things pinned down, c00000fd. Thanks, both of you!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As promised, I am back to post a\n  <strong>\n   more specific answer\n  </strong>\n  to the question that was asked by the OP.\n </p>\n <p>\n  Decided to write this as a separate answer as I believe that this content stands out on its own and would not properly fit in with either of the two answers that I posted above.\n </p>\n <p>\n  <strong>\n   Addressing his first issue :\n  </strong>\n </p>\n <blockquote>\n  <p>\n   In this case though, the whole settings is a window of its own. The\n  button does not appear in Spy++\n  </p>\n </blockquote>\n <p>\n  Well, the button\n  <em>\n   does\n  </em>\n  appear when using tools other than Spy++.\n  \n\n  I am pasting  screenshots of 2 tools with the help of which the properties of the RESTART button can be discovered.\n </p>\n <p>\n  <strong>\n   Using the\n   <a href=\"https://msdn.microsoft.com/en-us/library/dd318521(v=vs.85).aspx\" rel=\"noreferrer\">\n    INSPECT TOOL\n   </a>\n   that is a part of the Microsoft SDK :\n  </strong>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Vp51s.png\" rel=\"noreferrer\">\n   <img alt=\"INSPECT Tool showing Properties of the Button\" src=\"https://i.sstatic.net/Vp51s.png\"/>\n  </a>\n </p>\n <p>\n  and also using the\n  <a href=\"https://msdn.microsoft.com/en-us/library/ms727247(v=vs.100).aspx\" rel=\"noreferrer\">\n   UI Spy Tool\n  </a>\n  (Please note that\n  <a href=\"https://msdn.microsoft.com/en-us/library/dd373661(v=vs.110).aspx\" rel=\"noreferrer\">\n   many other tools\n  </a>\n  can also be used) for this purpose ...\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/3aUwY.png\" rel=\"noreferrer\">\n   <img alt=\"Properties of the RESTART Button using the UI Spy Tool\" src=\"https://i.sstatic.net/3aUwY.png\"/>\n  </a>\n </p>\n <p>\n  Now we will see what code we BREAK ON when we click the RESTART button :\n </p>\n <p>\n  Firstly, Run the\n  <strong>\n   System Settings Manager\n  </strong>\n  (\n  <strong>\n   SystemSettings.exe\n  </strong>\n  would be seen in the Task Manager).\n  \n\n  \"\n  <strong>\n   Attach\n  </strong>\n  \" to the\n  <em>\n   SystemSettings.exe\n  </em>\n  process with a debugger (I used the [excellent] x64dbg Debugger for this purpose).\n  \n\n  Make sure that you tick the\n  <em>\n   Break on DLL Load\n  </em>\n  in the Debugger Settings as shown below :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/zPUtC.png\" rel=\"noreferrer\">\n   <img alt=\"DLL Load\" src=\"https://i.sstatic.net/zPUtC.png\"/>\n  </a>\n </p>\n <p>\n  Now we *click on the\n  <em>\n   RESTART NOW\n  </em>\n  button* (of the\n  <em>\n   Windows Settings\n  </em>\n  Window). We will break in the debugger as the \"\n  <strong>\n   SettingsHandlers_nt.dll\n  </strong>\n  \" gets loaded into the process.\n </p>\n <p>\n  <strong>\n   This is the main dll that handles the events (clicks etc) of the Settings Window.\n  </strong>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/yVLFg.png\" rel=\"noreferrer\">\n   <img alt=\"SettingsHandlers_nt.dll Loaded\" src=\"https://i.sstatic.net/yVLFg.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/WNZmn.png\" rel=\"noreferrer\">\n   <img alt=\"We land here in the SettingsHandlers_nt.dll module\" src=\"https://i.sstatic.net/WNZmn.png\"/>\n  </a>\n </p>\n <p>\n  This is a part of the Control Flow Graph that actually takes the  decision to \ngo for a restart :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/5fiwQ.png\" rel=\"noreferrer\">\n   <img alt=\"Restarts as Single User Mode\" src=\"https://i.sstatic.net/5fiwQ.png\"/>\n  </a>\n </p>\n <blockquote>\n  <p>\n   Somehow the results are not the same what is available via\n  InitiateSystemShutdownEx or InitiateShutdown WinAPIs, especially\n  concerning installation of updates.\n  </p>\n </blockquote>\n <p>\n  The OP is right .\n  \n\n  The\n  <strong>\n   <em>\n    actual Decision-Making Part for the  [Automatic] Restarts after Microsoft Updates\n   </em>\n  </strong>\n  is  handled by the\n  <strong>\n   MusUpdateHandlers.dll\n  </strong>\n  as can be seen below:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/74pQF.png\" rel=\"noreferrer\">\n   <img alt=\"CFG of Forced Reboots after Updates\" src=\"https://i.sstatic.net/74pQF.png\"/>\n  </a>\n </p>\n <p>\n  and also here :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/T9gad.png\" rel=\"noreferrer\">\n   <img alt=\"Code View for Reboots after UPDATES\" src=\"https://i.sstatic.net/T9gad.png\"/>\n  </a>\n </p>\n <p>\n  I have added the last 2 screenshots as the OP had wanted to know what API are invoked when the system restarts after an UPDATE...\n </p>\n <p>\n  I hope that this now concludes the answer to what @c00000fd wanted to know...\n </p>\n</div>\n</body></html>",
            "votes": "22",
            "user": "TechLord",
            "time": "Feb 6, 2018 at 14:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Shayan",
                    "text": "<span class=\"comment-copy\">Hello TechLord, can you help with my question: <a href=\"https://reverseengineering.stackexchange.com/questions/23454/reverse-engineer-listen-to-this-device-on-windows-reverse-engineer-windows-whe\" title=\"reverse engineer listen to this device on windows reverse engineer windows whe\">reverseengineering.stackexchange.com/questions/23454/…</a> Thanks very much :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   \"I'd like to see details on how to hook and step into the function\n  that processes a button click event in a UWP app.\"\n  </p>\n </blockquote>\n <p>\n  I would suggest using the\n  <strong>\n   EventHook Library\n  </strong>\n  which is intended to hook global windows user events.This is available as a\n  <a href=\"https://www.nuget.org/packages/EventHook\" rel=\"noreferrer\">\n   Nuget Package\n  </a>\n  .\n </p>\n <p>\n  The Project Repo (named as\n  <strong>\n   Windows User Action Hook\n  </strong>\n  )  is available on Github and my fork can be accessed\n  <a href=\"https://github.com/TechLord-Forever/Windows-User-Action-Hook\" rel=\"noreferrer\">\n   here\n  </a>\n  . This is for the same Library (EventHook Library) that I mentioned above. You can visit the Github repo  if you want to get hold of the source code.\n </p>\n <p>\n  From the\n  <a href=\"https://github.com/TechLord-Forever/Windows-User-Action-Hook/blob/develop/README.md\" rel=\"noreferrer\">\n   Github Project's README page\n  </a>\n  , just let me excerpt a few details :\n </p>\n <p>\n  <strong>\n   Supported Events :\n  </strong>\n  (These are the events that you can hook\n  <em>\n   globally\n  </em>\n  )\n </p>\n <blockquote>\n  <ul>\n   <li>\n    Keyboard Events\n   </li>\n   <li>\n    Mouse Events\n   </li>\n   <li>\n    Clipboard Events\n   </li>\n   <li>\n    Application events\n   </li>\n   <li>\n    Print events\n   </li>\n  </ul>\n </blockquote>\n <p>\n  <strong>\n   Usage - Install by nuget\n  </strong>\n </p>\n <blockquote>\n  <p>\n   Install-Package EventHook\n  </p>\n </blockquote>\n <p>\n  <strong>\n   SAMPLE CODE:\n  </strong>\n </p>\n <pre><code>KeyboardWatcher.Start();  \nKeyboardWatcher.OnKeyInput += (s, e) =>  \n{  \n    Console.WriteLine(string.Format(\"Key {0} event of key {1}\", e.KeyData.EventType, e.KeyData.Keyname));  \n};  \n\nMouseWatcher.Start();  \nMouseWatcher.OnMouseInput += (s, e) =>  \n{  \n    Console.WriteLine(string.Format(\"Mouse event {0} at point {1},{2}\", e.Message.ToString(), e.Point.x, e.Point.y));    \n};  \n\nClipboardWatcher.Start();  \nClipboardWatcher.OnClipboardModified += (s, e) =>  \n{  \n    Console.WriteLine(string.Format(\"Clipboard updated with data '{0}' of format {1}\", e.Data, e.DataFormat.ToString()));  \n};  \n\nApplicationWatcher.Start();  \nApplicationWatcher.OnApplicationWindowChange += (s, e) =>  \n{  \n    Console.WriteLine(string.Format(\"Application window of '{0}' with the title '{1}' was {2}\", e.ApplicationData.AppName, e.ApplicationData.AppTitle, e.Event));    \n};  \n\nPrintWatcher.Start();  \nPrintWatcher.OnPrintEvent += (s, e) =>  \n{  \n    Console.WriteLine(string.Format(\"Printer '{0}' currently printing {1} pages.\", e.EventData.PrinterName, e.EventData.Pages));    \n};  \n\nConsole.Read();  \nKeyboardWatcher.Stop();  \nMouseWatcher.Stop();  \nClipboardWatcher.Stop();  \n\nApplicationWatcher.Stop();  \nPrintWatcher.Stop();  \n</code></pre>\n <p>\n  Sample Output (Screenshot) :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/044uM.png\" rel=\"noreferrer\">\n   <img alt=\"https://raw.githubusercontent.com/justcoding121/Windows-User-Action-Hook/stable/EventHook.Examples/EventHook.ConsoleApp.Example/Capture.PNG\" src=\"https://i.sstatic.net/044uM.png\"/>\n  </a>\n </p>\n <p>\n  I am sure that once you can see how we are able to\n  <em>\n   globally\n  </em>\n  hook various Windows User Events.\nIn your case, using this library, we'd be able to code a tiny C# program for example, which would hook the mouse-press event for the \"\n  <strong>\n   Restart Now\n  </strong>\n  \" button and thus allow us to take control of the subsequent events.\n </p>\n <p>\n  Since this question was about hooking\n  <strong>\n   UWP Apps\n  </strong>\n  , I would like to give an example where this library was used to\n  <em>\n   specifically\n  </em>\n  hook UWP apps so that the code from that repo can be used as an example if required. \nPlease note that I am not excerpting anything directly from that repo as I only wanted to show that this library works very well with UWP Apps as well.  You can visit my fork of the\n  <a href=\"https://github.com/TechLord-Forever/UWPHook\" rel=\"noreferrer\">\n   Github Repo UWPHook here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "TechLord",
            "time": "Jan 14, 2018 at 19:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I searched in the System32 folder inside every file named SystemSettting*.* for the word Shutdown. I used Total Commander as it can search with multiple encodings such as ASCII and Unicode:\n  <a href=\"https://i.sstatic.net/RHXfr.png\" rel=\"noreferrer\">\n   <img alt=\"Total Commander | Find Files\" src=\"https://i.sstatic.net/RHXfr.png\"/>\n  </a>\n </p>\n <p>\n  Then builtin viewer showed a reference to\n  <code>\n   InitiateSystemShutdownExW\n  </code>\n  :\n  <a href=\"https://i.sstatic.net/eXwnZ.png\" rel=\"noreferrer\">\n   <img alt=\"Total Commander Lister\" src=\"https://i.sstatic.net/eXwnZ.png\"/>\n  </a>\n  .\n </p>\n <p>\n  From MSDN:\n </p>\n <blockquote>\n  <p>\n   <strong>\n    InitiateSystemShutdownEx function\n   </strong>\n   Initiates a shutdown and optional restart of the specified computer, and optionally records the\n  reason for the shutdown.\n  </p>\n </blockquote>\n <pre><code>BOOL WINAPI InitiateSystemShutdownEx(\n  _In_opt_ LPTSTR lpMachineName,\n  _In_opt_ LPTSTR lpMessage,\n  _In_     DWORD  dwTimeout,\n  _In_     BOOL   bForceAppsClosed,\n  _In_     BOOL   bRebootAfterShutdown,\n  _In_     DWORD  dwReason\n);\n</code></pre>\n <p>\n  To verify, a next step would be to set a breakpoint on this API using a tool like Ida Pro or API Monitor.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Remko",
            "time": "Jan 9, 2018 at 18:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">I'm not sure if <code>SystemSettingsThresholdAdminFlowUI.dll</code> is even mapped into <code>C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe</code> process at the time.</span>",
                    "time": null
                },
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">You can check that with e.g. Process Explorer but you could be right that it's calling this api in another way.</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Do debug a UWP app you will have to use PLMDebug, you can use windbg or x64dbg for that.</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">@mrexodia: Well, yeah, obviously you need to use PLMDebug to turn off <code>Process Lifetime Management</code> on UWP app. In other words, so that it doesn't get suspended by the broker when it's in the background. But you don't debug with it, per se. It's not a debugger.</span>",
                    "time": null
                }
            ]
        }
    ]
}