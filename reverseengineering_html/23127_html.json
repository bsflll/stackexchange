{
    "title": "Type reconstruction ambiguity",
    "link": "https://reverseengineering.stackexchange.com/questions/23127/type-reconstruction-ambiguity",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In\n  <em>\n   <a href=\"https://pdfs.semanticscholar.org/4815/f4122fa6c83b1691fde8b4ce21775d400c59.pdf\" rel=\"nofollow noreferrer\">\n    TIE: Principled Reverse Engineering of Types in Binary Programs\n   </a>\n  </em>\n  , Lee J. et al claim to solve most of the challenges in the process of C code decompilation that come with type reconstruction.\n </p>\n <p>\n  While producing a complex type where maybe a\n  <code>\n   void *\n  </code>\n  could fit is definitely non-trivial, I was just thinking about a possible type recovery ambiguity for what merely concerns a variable of type\n  <code>\n   int\n  </code>\n  or\n  <code>\n   int *\n  </code>\n  .\n </p>\n <pre><code>int foo(int *a, int sz) {\n    int res = 0;\n    for (int *q = a; q < &a[sz]; q++)\n        res += *q;\n    return res;\n}\n</code></pre>\n <p>\n  In 32-bit architectures, the above code shows an example of such ambiguity for variable\n  <code>\n   res\n  </code>\n  , as both\n  <code>\n   int\n  </code>\n  and\n  <code>\n   int *\n  </code>\n  are compatible with a 32-bit register, and the disassembled code is the same. If\n  <code>\n   res\n  </code>\n  was a pointer though, it would be improperly used since we would be returning the address of an automatic variable (and would lead to undefined behaviour).\n </p>\n <p>\n  So can this example really be taken into account (is a valid instance)? Can you come up with an example where these two types generate ambiguity but are correctly used? Can we conclude that a variable can be inferred to be a pointer or not if it just gets dereferenced?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "206",
    "tags": [
        "ida",
        "decompilation",
        "type-reconstruction"
    ],
    "user": "Antonio Frighetto",
    "time": "Jan 28, 2020 at 9:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  One common issue I’ve seen in real programs is the NULL pointer which has the same value as the integer 0. For example, currently (2020) the Hex-Rays decompiler does not support one variable holding different types so for example when a register initialized with zero is used as integer in one branch and as pointer in another, you might see “funny” output. Alas I don’t have an example at hand but if I see it again I’ll add it here.\n </p>\n <p>\n  Another thing that comes to mind is the “clever” implementation of double linked list using one field to store both next and previous pointers, known as\n  <a href=\"https://en.wikipedia.org/wiki/XOR_linked_list\" rel=\"nofollow noreferrer\">\n   XOR Linked List\n  </a>\n  . This pattern is probably about impossible to recover automatically but luckily it seems to be more of a theoretical curiosity than  practical construct.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 29, 2020 at 21:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Antonio Frighetto",
                    "text": "<span class=\"comment-copy\">The first example is something I'd thought of (which kinda boils down to the one above, since <code>res</code> could be really a NULL pointer as far as we know from the disassembly), but in that case, wouldn't it suffice to just force the variable to be a pointer if there's at least a case where it is used as such? Yeah, would be interesting to see an example.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In fact, type-reconstruction is mainly looking at\n  <em>\n   how the program is using the data\n  </em>\n  and tries to deduce the type based on this. Your example is really not a problem for most of the decompiler because\n  <code>\n   res\n  </code>\n  is only used as an\n  <code>\n   int\n  </code>\n  (the code always dereference the pointer when storing it to\n  <code>\n   res\n  </code>\n  ).\n </p>\n <p>\n  But, at the assembly level you may enforce the usage of a constant to be both an integer value\n  <strong>\n   and\n  </strong>\n  an address if the part of the program you are in is totally static. For example:\n </p>\n <pre><code>mov 0xdeadbeef, %eax\nxor %ebx, %eax       <-- bitwise operators are almost never used on addresses\nmov (%ebx), $ecx     <-- Yet, %ebx is an address\n</code></pre>\n <p>\n  The heuristics of the decompiler will give contradictory information here, is\n  <code>\n   %ebx\n  </code>\n  a data or an address ? So, one decision will be taken but both types (data and address) cannot be kept and backported to the decompiled code. Somehow, this is lost in translation.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "perror",
            "time": "Jan 28, 2020 at 9:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}