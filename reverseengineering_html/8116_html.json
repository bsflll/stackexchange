{
    "title": "at the rpcrt4!NdrClientCall2 function - how does it know which pipe to use in order to transfer data to another process?",
    "link": "https://reverseengineering.stackexchange.com/questions/8116/at-the-rpcrt4ndrclientcall2-function-how-does-it-know-which-pipe-to-use-in-or",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hey i have a very time consuming problem, and i thought i might find someone here with better experience than mine that could help me out.\n </p>\n <p>\n  I am reverse-engineering an application which at some point uses the\n  <em>\n   NdrClientCall2\n  </em>\n  api to use a remote procedure of some other service (which i dont know which one that is)\n </p>\n <p>\n  Now before i hear comments about not trying anything my self\nThere are some\n  <strong>\n   really good applications\n  </strong>\n  to accomplish what i want like\n  <em>\n   <strong>\n    NtTrace\n   </strong>\n  </em>\n  ,\n  <em>\n   <strong>\n    Strace\n   </strong>\n  </em>\n  and roughly\n  <em>\n   <strong>\n    oSpy\n   </strong>\n  </em>\n  can achieve the same result aswell eventually.\nBut my application has some really hard anti-debugging techniques which force me to do everything manually.\n </p>\n <p>\n  What eventually i want to achieve is know what procedure is being called and on what service \\ process.\n </p>\n <p>\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa374215%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">\n   Here is the NdrClientCall2 Decleration by MSDN\n  </a>\n </p>\n <pre><code>CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall2(\n  __in          PMIDL_STUB_DESC pStubDescriptor,\n  __in          PFORMAT_STRING pFormat,\n  __in_out       ...\n);\n</code></pre>\n <p>\n  so it uses the\n  <strong>\n   PMIDL_STUB_DESC\n  </strong>\n  struct which its definition is as the following:\n </p>\n <pre><code>typedef struct _MIDL_STUB_DESC {\n  void                                 *RpcInterfaceInformation;\n  void*                                (__RPC_API *pfnAllocate)(size_t);\n  void                                 (__RPC_API *pfnFree)(void*);\n  union {\n    handle_t              *pAutoHandle;\n    handle_t              *pPrimitiveHandle;\n    PGENERIC_BINDING_INFO pGenericBindingInfo;\n  } IMPLICIT_HANDLE_INFO;\n  const NDR_RUNDOWN                    *apfnNdrRundownRoutines;\n  const GENERIC_BINDING_ROUTINE_PAIR   *aGenericBindingRoutinePairs;\n  const EXPR_EVAL                      *apfnExprEval;\n  const XMIT_ROUTINE_QUINTUPLE         *aXmitQuintuple;\n  const unsigned char                  *pFormatTypes;\n  int                                  fCheckBounds;\n  unsigned long                        Version;\n  MALLOC_FREE_STRUCT                   *pMallocFreeStruct;\n  long                                 MIDLVersion;\n  const COMM_FAULT_OFFSETS             *CommFaultOffsets;\n  const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;\n  const NDR_NOTIFY_ROUTINE             *NotifyRoutineTable;\n  ULONG_PTR                            mFlags;\n  const NDR_CS_ROUTINES                *CsRoutineTables;\n  void                                 *Reserved4;\n  ULONG_PTR                            Reserved5;\n} MIDL_STUB_DESC, *PMIDL_STUB_DESC;\n</code></pre>\n <p>\n  And here is how it looks like in windbg, when i put a breakpoint in the NdrClientCall2 function\n </p>\n <pre><code>0:006> .echo \"Arguments:\"; dds esp+4 L5\nArguments:\n06d9ece4  74cc2158 SspiCli!sspirpc_StubDesc\n06d9ece8  74cc2322 SspiCli!sspirpc__MIDL_ProcFormatString+0x17a\n06d9ecec  06d9ed00\n06d9ecf0  91640000\n06d9ecf4  91640000\n0:006> .echo \"PMIDL_STUB_DESC:\"; dds poi(esp+4) L20\nPMIDL_STUB_DESC:\n74cc2158  74cc2690 SspiCli!sspirpc_ServerInfo+0x24\n74cc215c  74cca1cd SspiCli!MIDL_user_allocate\n74cc2160  74cca1e6 SspiCli!MIDL_user_free\n74cc2164  74ce0590 SspiCli!SecpCheckSignatureRoutineRefCount+0x4\n74cc2168  00000000\n74cc216c  00000000\n74cc2170  00000000\n74cc2174  00000000\n74cc2178  74cc1c52 SspiCli!sspirpc__MIDL_TypeFormatString+0x2\n74cc217c  00000001\n74cc2180  00060001\n74cc2184  00000000\n74cc2188  0700022b\n74cc218c  00000000\n74cc2190  00000000\n74cc2194  00000000\n74cc2198  00000001\n74cc219c  00000000\n74cc21a0  00000000\n74cc21a4  00000000\n74cc21a8  48000000\n74cc21ac  00000000\n74cc21b0  001c0000\n74cc21b4  00000032\n74cc21b8  00780008\n74cc21bc  41080646\n74cc21c0  00000000\n74cc21c4  000b0000\n74cc21c8  00020004\n74cc21cc  00080048\n74cc21d0  21500008\n74cc21d4  0008000c\n0:006> .echo \"PFORMAT_STRING:\"; db poi(esp+8)\nPFORMAT_STRING:\n74cc2322  00 48 00 00 00 00 06 00-4c 00 30 40 00 00 00 00  .H......L.0@....\n74cc2332  ec 00 bc 00 47 13 08 47-01 00 01 00 00 00 08 00  ....G..G........\n74cc2342  00 00 14 01 0a 01 04 00-6e 00 58 01 08 00 08 00  ........n.X.....\n74cc2352  0b 00 0c 00 20 01 0a 01-10 00 f6 00 0a 01 14 00  .... ...........\n74cc2362  f6 00 48 00 18 00 08 00-48 00 1c 00 08 00 0b 00  ..H.....H.......\n74cc2372  20 00 2c 01 0b 01 24 00-a2 01 0b 00 28 00 b8 01   .,...$.....(...\n74cc2382  13 41 2c 00 a2 01 13 20-30 00 f8 01 13 41 34 00  .A,.... 0....A4.\n74cc2392  60 01 12 41 38 00 f6 00-50 21 3c 00 08 00 12 21  `..A8...P!<....!\n</code></pre>\n <p>\n  So how exactly do i figure out what is the remote process it is going to communicate with, or what pipe it is using to communicate?\n </p>\n <p>\n  As far as i understand from the MSDN, it is supposed to call a remote procedure. if i understand that right, it means it should call a remote function as if its an exported dll function. How can i set a breakpoint there?\n </p>\n <p>\n  P.S:\n </p>\n <p>\n  The main reason im posing this function is because the NdrClientCall2 seems to be pretty huge.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "4k",
    "tags": [
        "windbg",
        "anti-debugging"
    ],
    "user": "0xAK",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   So how exactly do i figure out what is the remote process it is going\n  to communicate with, or what pipe it is using to communicate?\n  </p>\n </blockquote>\n <p>\n  The first step is to find the RPC client interface. This can be found via the first argument to\n  <code>\n   NdrClientCall2()\n  </code>\n  , named\n  <code>\n   pStubDescriptor\n  </code>\n  . In your question,\n  <code>\n   pStubDescriptor\n  </code>\n  points to\n  <code>\n   SspiCli!sspirpc_StubDesc\n  </code>\n  :\n </p>\n <blockquote>\n  <p>\n   And here is how it looks like in windbg, when i put a breakpoint in\n  the NdrClientCall2 function\n  </p>\n  <pre><code>0:006> .echo \"Arguments:\"; dds esp+4 L5\nArguments:\n06d9ece4  74cc2158 SspiCli!sspirpc_StubDesc\n</code></pre>\n </blockquote>\n <p>\n  <code>\n   SspiCli!sspirpc_StubDesc\n  </code>\n  is a\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa374178(v=vs.85).aspx\" rel=\"noreferrer\">\n   <code>\n    MIDL_STUB_DESC\n   </code>\n  </a>\n  , and on my computer, here are its associated values (via IDA Pro):\n </p>\n <pre><code>struct _MIDL_STUB_DESC const sspirpc_StubDesc MIDL_STUB_DESC\n<\n    offset dword_22229B8,\n    offset SecClientAllocate(x),\n    offset MIDL_user_free(x),\n    <offset unk_22383F4>,\n    0,\n    0,\n    0,\n    0,\n    offset word_22224B2,\n    1,\n    60001h,\n    0,\n    700022Bh,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0\n>\n</code></pre>\n <p>\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa374178(v=vs.85).aspx\" rel=\"noreferrer\">\n   As documented on MSDN\n  </a>\n  , the first field in the structure above \"points to an RPC client interface structure\". Thus, we can parse the data at that address as an\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa378503(v=vs.85).aspx\" rel=\"noreferrer\">\n   <code>\n    RPC_CLIENT_INTERFACE\n   </code>\n  </a>\n  struct:\n </p>\n <pre><code>stru_22229B8    dd 44h                  ; Length\n                dd 4F32ADC8h            ; InterfaceId.SyntaxGUID.Data1\n                dw 6052h                ; InterfaceId.SyntaxGUID.Data2\n                dw 4A04h                ; InterfaceId.SyntaxGUID.Data3\n                db 87h, 1, 29h, 3Ch, 0CFh, 20h, 96h, 0F0h; InterfaceId.SyntaxGUID.Data4\n                dw 1                    ; InterfaceId.SyntaxVersion.MajorVersion\n                dw 0                    ; InterfaceId.SyntaxVersion.MinorVersion\n                dd 8A885D04h            ; TransferSyntax.SyntaxGUID.Data1\n                dw 1CEBh                ; TransferSyntax.SyntaxGUID.Data2\n                dw 11C9h                ; TransferSyntax.SyntaxGUID.Data3\n                db 9Fh, 0E8h, 8, 0, 2Bh, 10h, 48h, 60h; TransferSyntax.SyntaxGUID.Data4\n                dw 2                    ; TransferSyntax.SyntaxVersion.MajorVersion\n                dw 0                    ; TransferSyntax.SyntaxVersion.MinorVersion\n                dd offset RPC_DISPATCH_TABLE const sspirpc_DispatchTable; DispatchTable\n                dd 0                    ; RpcProtseqEndpointCount\n                dd 0                    ; RpcProtseqEndpoint\n                dd 0                    ; Reserved\n                dd offset _MIDL_SERVER_INFO_ const sspirpc_ServerInfo; InterpreterInfo\n                dd 4000000h             ; Flags\n</code></pre>\n <p>\n  From the\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa378503(v=vs.85).aspx\" rel=\"noreferrer\">\n   <code>\n    RPC_CLIENT_INTERFACE\n   </code>\n  </a>\n  struct above, we can extract the\n  <code>\n   InterfaceId\n  </code>\n  GUID:\n  <code>\n   4F32ADC8-6052-4A04-8701-293CCF2096F0\n  </code>\n </p>\n <p>\n  We can now look up that interface GUID with\n  <a href=\"http://www.rpcview.org/\" rel=\"noreferrer\">\n   RpcView\n  </a>\n  to find the associated DLL, running process, and endpoints:\n </p>\n <p>\n  <img alt=\"Interfaces\" src=\"https://i.sstatic.net/T4JZp.png\"/>\n  <img alt=\"Process\" src=\"https://i.sstatic.net/b1JI5.png\"/>\n  <img alt=\"Endpoints\" src=\"https://i.sstatic.net/XRV4Z.png\"/>\n </p>\n <p>\n  To find out which specific endpoint is being used by the SSPI RPC server in the LSASS process, we can reverse engineer\n  <code>\n   sspisrv.dll\n  </code>\n  . In the exported function\n  <code>\n   SspiSrvInitialize()\n  </code>\n  , we see the following call:\n </p>\n <pre><code>RpcServerUseProtseqEpW(L\"ncalrpc\", 0xAu, L\"lsasspirpc\", 0);\n</code></pre>\n <p>\n  To figure out which specific function is being called in\n  <code>\n   sspisrv.dll\n  </code>\n  , we need to look at the\n  <code>\n   pFormat\n  </code>\n  data passed to\n  <code>\n   NdrClientCall2\n  </code>\n  . In your example code above, the\n  <code>\n   pFormat\n  </code>\n  data is:\n </p>\n <pre><code>00 48 00 00 00 00 06 00-4c 00 30 40 00 00 00 00 ...\n</code></pre>\n <p>\n  If we parse the\n  <code>\n   pFormat\n  </code>\n  data as an\n  <a href=\"http://doxygen.reactos.org/d5/d5b/structNDR__PROC__HEADER__RPC.html\" rel=\"noreferrer\">\n   NDR_PROC_HEADER_RPC\n  </a>\n  structure, we get:\n </p>\n <pre><code>handle_type = 0x00\nOi_flags    = 0x48\nrpc_flags   = 0x00000000\nproc_num    = 0x0006\nstack_size  = 0x004C\n</code></pre>\n <p>\n  From\n  <code>\n   proc_num\n  </code>\n  , we can see that this RPC call is calling the 6th RPC function in\n  <code>\n   sspisrv.dll\n  </code>\n  . We can use RpcView again to get the address for the 6th RPC function:\n </p>\n <p>\n  <img alt=\"Procedures\" src=\"https://i.sstatic.net/ihKKv.png\"/>\n </p>\n <p>\n  And with IDA Pro, we can see the function in\n  <code>\n   sspisrv.dll\n  </code>\n  at address\n  <code>\n   0x7573159D\n  </code>\n  :\n </p>\n <pre><code>.text:7573159D __stdcall SspirProcessSecurityContext(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x) proc near\n</code></pre>\n <p>\n  RpcView also shows us a decompilation of that function's prototype:\n </p>\n <p>\n  <img alt=\"Decompilation\" src=\"https://i.sstatic.net/yP5dk.png\"/>\n </p>\n <p>\n  (Note that on your computer, the 6th function might not be at virtual address\n  <code>\n   0x7573159D\n  </code>\n  , and furthermore, the 6th function might not be\n  <code>\n   SspirProcessSecurityContext()\n  </code>\n  , but this is the approach you would use nonetheless.)\n </p>\n <p>\n  As such, we can now say the following:\n </p>\n <ul>\n  <li>\n   The RPC server code for your\n   <code>\n    NdrClientCall2()\n   </code>\n   call is in\n   <code>\n    sspisrv.dll\n   </code>\n  </li>\n  <li>\n   The RPC server for your\n   <code>\n    NdrClientCall2()\n   </code>\n   call is running in LSASS's process\n  </li>\n  <li>\n   The endpoint for your\n   <code>\n    NdrClientCall2()\n   </code>\n   call is named\n   <code>\n    lsasspirpc\n   </code>\n  </li>\n  <li>\n   The RPC server function called by your\n   <code>\n    NdrClientCall2()\n   </code>\n   call in\n   <code>\n    sspisrv.dll\n   </code>\n   is\n   <code>\n    SspirProcessSecurityContext()\n   </code>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Jason Geffner",
            "time": "Jan 31, 2015 at 1:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">Alright, this thought me a lot! thanks for that. But for the second part of my question, Is there a way to know what is the -final- called procedure?  What you eventually found was the exported Initialization function which calls RpcServerUseProtseqEpW(), this is not the real function which is called. or am i missing something?</span>",
                    "time": null
                },
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">Or better yet, where is the place i should place a BreakPoint at?</span>",
                    "time": null
                },
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">Yes this was exactly what i was looking for. Just for future reference.. how did you figure out the Struct parameters type?  How did you know that  <b><i>MIDL_STUB_DESC.RpcInterfaceInformation</i></b> is of type   The msdn just says it points to a ** RPC client interface structure ** and i couldnt see anywhere on the msdn the \"<b>RPC_CLIENT_INTERFACE</b>\". Where did you find that?  And by the way thanks for the awesome answer</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">With regard to <code>RPC_CLIENT_INTERFACE</code>, I actually relied on previous research I had done (see page 27 in <a href=\"https://www.nccgroup.com/media/18478/exporting_non-exportable_rsa_keys.pdf\" rel=\"nofollow noreferrer\">Exporting Non-Exportable RSA Keys</a>). When I did the initial research, I think I determined this by either by looking at the <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa378654(v=vs.85).aspx\" rel=\"nofollow noreferrer\">documented RPC structures</a> and noticing the name <code>RPC_CLIENT_INTERFACE</code>, or by finding <a href=\"http://doxygen.reactos.org/d5/d86/ndr__es_8c_source.html#l00285\" rel=\"nofollow noreferrer\">this</a> in ReactOS's code.</span>",
                    "time": null
                },
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">i guess there is noting compared to real experience. Thanks a ton</span>",
                    "time": null
                }
            ]
        }
    ]
}