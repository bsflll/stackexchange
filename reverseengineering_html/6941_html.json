{
    "title": "PE .rdata section contents",
    "link": "https://reverseengineering.stackexchange.com/questions/6941/pe-rdata-section-contents",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to MSDN, the\n  <code>\n   .rdata\n  </code>\n  section of a PE should contain the debug directory and the description string. I've read elsewhere that it contains read-only program data. Dumping several files, I found that\n  <code>\n   .rdata\n  </code>\n  contains the IAT, load configuration table, and safe exception handler table. Can someone please clarify the purpose of\n  <code>\n   .rdata\n  </code>\n  and why what I find in there disagrees with both descriptions? Also, shouldn't the import information be in\n  <code>\n   .idata\n  </code>\n  ?\n </p>\n <p>\n  I'm assuming different compilers and different versions of the same compiler treat the same sections differently. If that's the case, where can I get more information on this?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 2,
    "views": "14k",
    "tags": [
        "pe",
        "compilers",
        "section"
    ],
    "user": "asdf",
    "time": "Jan 2, 2015 at 3:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is\n  <strong>\n   customary\n  </strong>\n  for read-only data of all kinds to be lumped into .rdata. However, that's a matter of expedience, not necessity. Compiler and linker can put any data anywhere they like, as long as it is referenced correctly in the data directory.\n </p>\n <p>\n  The first point of call should be Microsoft's\n  <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx\" rel=\"noreferrer\">\n   PE COFF specification\n  </a>\n  (currently v8.3). Remarks and pointers regarding the divergence between theory and practice can be found\n  <a href=\"https://reverseengineering.stackexchange.com/questions/6874/is-not-valid-win32-application-why/6878#6878\">\n   in another topic\n  </a>\n  here on RE.\n </p>\n <p>\n  If you just want to extract/parse the information then you can ignore the section names completely; just use the info in the data directory.\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Okay so basically, it's convenient to have as few sections as possible because each section must start on a new physical page, so you could waste a few KiB of physical memory here and there. Also, it takes up more kernel memory with more subsection objects required and more subsections to set up means more code to execute so the load time will be marginally longer. The import table\n  <strong>\n   must\n  </strong>\n  be in a read only section but doesn't need to be in a section of its own because it's accessed using a pointer in the PE header. It needs to be read only because otherwise the user code could modify the IAT and hijack calls to gadgets in the code or injected dlls. As for the loader, it needs to modify the IAT itself. This means it momentarily needs to change the PTEs from read only to COW, write to it which causes new physical pages to be allocated as read/write, and once its done, write protect those allocated pages and hence the PTEs. Similarly, .pdata is sometimes its own section, but it does not need to be and can be included in any read only section, so long as the exception directory RVA is in the optional PE header.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Lewis Kelsey",
            "time": "Feb 12, 2021 at 11:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}