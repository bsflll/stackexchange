{
    "title": "What does the cs register do here?",
    "link": "https://reverseengineering.stackexchange.com/questions/27924/what-does-the-cs-register-do-here",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've come across this sequence of bytes:\n  <code>\n   2e 88 38\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://www.hopperapp.com/\" rel=\"nofollow noreferrer\">\n   Hopper\n  </a>\n  disassembles this as:\n </p>\n <pre><code>mov    byte [cs:rax], bh\n</code></pre>\n <p>\n  <a href=\"https://defuse.ca/online-x86-assembler.htm#disassembly\" rel=\"nofollow noreferrer\">\n   This online disassembler\n  </a>\n  gives slightly different output:\n </p>\n <pre><code>mov    BYTE PTR cs:[rax],bh \n</code></pre>\n <p>\n  Either way, I can't make heads nor tails of what the intended result of this instruction is.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "321",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "MTCoster",
    "time": "Jul 1, 2021 at 11:39",
    "comments": [
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n I think it's the same meaning with slightly different syntax.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MTCoster",
            "text": "<html><body><span class=\"comment-copy\">\n @macro_controller That was my assumption, but given I couldn't tell what either meant I didn't want to jump to that conclusion and leave something potentially important out of the question\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n It might not even be a valid instruction -- that is to say, does it make sense in the context of the surrounding instructions, or are they nonsensical?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In 16- and 32-bit modes the  memory accesses used the ds or ss registers, but by using\n  <em>\n   segment override\n  </em>\n  , you could force usage of another segment (selector in protected mode). For example, in 16-bit real mode\n </p>\n <pre><code> mov bx, [si]\n</code></pre>\n <p>\n  Would access the address ds*16 + si\n </p>\n <p>\n  While\n </p>\n <pre><code> mov bx, cs:[si]\n</code></pre>\n <p>\n  Would access cs*16+si\n </p>\n <p>\n  The distinction was less useful in most 32-but OSes, which usually set up memory so that cs, ds, es, ss all pointed to the same flat 32-bit memory space although in theory they could be different (and often they did have different permissions). In 64-bit mode the segment registers are even less useful - in it the segment overrides are officially ignored except for fs and gs.\n </p>\n <p>\n  So in your example the cs prefix (2e) is completely redundant and serves no useful purpose: the instruction has the same effect as\n </p>\n <pre><code>mov  byte [rax], bh\n</code></pre>\n <p>\n  However the disassembler still prints\n  <code>\n   cs:\n  </code>\n  to show that the prefix is  present in the instruction.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 3, 2021 at 12:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  char * rax; = bh\n  \n\n  or byte* rax = bh or\nsimply mov the\n  <strong>\n   [8..16]\n  </strong>\n  bit component  of rbx register into the address pointed by 64 bit register rax  at\n  <strong>\n   [0..7]\n  </strong>\n  bit place and zero out the remaining bits\n </p>\n <p>\n  or in other words if address\n  <strong>\n   12345678`9abcdef\n  </strong>\n  contains\n  <strong>\n   0x0\n  </strong>\n </p>\n <p>\n  and register rbx contains\n  <strong>\n   0x00000000`0000ffff\n  </strong>\n </p>\n <p>\n  then after this operation address\n  <strong>\n   12345678`9abcdef\n  </strong>\n  will contain\n  <strong>\n   0xff\n  </strong>\n </p>\n <p>\n  see below a simulation of operation with windbg\n </p>\n <pre><code>0:000> ? @rip\nEvaluate expression: 140705686294668 = 00007ff8`9873108c\n0:000> dq @rip l1\n00007ff8`9873108c  c338c483`4800ebcc\n0:000> r @rax = @rip\n0:000> r @rbx = 0xffff\n0:000> r @bh\nbh=ff\n0:000> eq @rax\n00007ff8`9873108c c338c483`4800ebcc @bh\n00007ff8`98731094 cccccccc`cccccccc\n0:000> dq @rip l1\n00007ff8`9873108c  00000000`000000ff\n0:000>  \n</code></pre>\n <p>\n  and cs, ds, es , ss segment registers do not matter much in flat memory model.\n </p>\n <p>\n  only fs and gs segment registers matters\n </p>\n <p>\n  a sample code that demonstrates the write using various segment prefixes in x64\n  \n\n  ml64 wont encode the instruction so need to emit raw bytes using define byte\n </p>\n <p>\n  c code with inline assembly usage follows\n </p>\n <p>\n  cpp file\n </p>\n <pre><code>:\\>type inline_cpp.cpp\n\n#include <windows.h>\nextern \"C\" void segregtest(ULONG64 *addr ,BYTE value);\nULONG64 myaddr = 0x77;\nint main (void)\n{\n        segregtest(&myaddr,0x88);\n        return 0;\n}\n</code></pre>\n <p>\n  asmfile\n </p>\n <pre><code>:\\>type inline_asm.asm\nPUBLIC segregtest\n.code\nsegregtest PROC\nmov rax,rcx\nmov bh,dl\ndb 2Eh\nmov byte ptr [rax] ,    bh\nadd bh,11h\ndb 3Eh\nmov byte ptr [rax] ,    bh\nadd bh,11h\ndb 36h\nmov byte ptr [rax] ,    bh\nadd bh,11h\ndb 26h\nmov byte ptr [rax] ,    bh\nadd bh,11h\ndb 64h\nmov byte ptr [rax] ,    bh\nadd bh,11h\ndb 65h\nmov byte ptr [rax] ,    bh\nret\nsegregtest ENDP\nEND\n</code></pre>\n <p>\n  compile link with\n </p>\n <pre><code>:\\>type assemble_compile_link.bat\nml64 /c /Zi /nologo %1_asm.asm\n\ncl /Zi /W4 /Od /analyze /nologo /GS- /EHsc %1_cpp.cpp /link /release /subsystem:windows /fixed /entry:main %1_asm.obj\n</code></pre>\n <p>\n  execution and tracing\n </p>\n <pre><code>:\\>assemble_compile_link.bat inline\n\n:\\>cdb -c \"g inline_cpp!segregtest;t 10;q\" inline_cpp.exe | awk /Reading/,/quit/\n0:000> cdb: Reading initial command 'g inline_cpp!segregtest;t 10;q'\ninline_cpp!segregtest+0x3:\n00000001`40001003 8afa            mov     bh,dl\ninline_cpp!segregtest+0x5:\n00000001`40001005 2e8838          mov     byte ptr cs:[rax],bh cs:00000001`40003000=77\ninline_cpp!segregtest+0x8:\n00000001`40001008 80c711          add     bh,11h\ninline_cpp!segregtest+0xb:\n00000001`4000100b 3e8838          mov     byte ptr ds:[rax],bh ds:00000001`40003000=88\ninline_cpp!segregtest+0xe:\n00000001`4000100e 80c711          add     bh,11h\ninline_cpp!segregtest+0x11:\n00000001`40001011 368838          mov     byte ptr ss:[rax],bh ss:00000001`40003000=99\ninline_cpp!segregtest+0x14:\n00000001`40001014 80c711          add     bh,11h\ninline_cpp!segregtest+0x17:\n00000001`40001017 268838          mov     byte ptr es:[rax],bh es:00000001`40003000=aa\ninline_cpp!segregtest+0x1a:\n00000001`4000101a 80c711          add     bh,11h\ninline_cpp!segregtest+0x1d:\n00000001`4000101d 648838          mov     byte ptr fs:[rax],bh fs:00000001`40003000=bb\ninline_cpp!segregtest+0x20:\n00000001`40001020 80c711          add     bh,11h\ninline_cpp!segregtest+0x23:\n00000001`40001023 658838          mov     byte ptr gs:[rax],bh gs:00000001`40003000=cc\n(1b44.cf8): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Jul 2, 2021 at 18:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MTCoster",
                    "text": "<span class=\"comment-copy\">\"<i>and cs ds es segemtn registers do not matter much in flat memory model</i>\" - This is the part my question was about - I understand the <code>mov</code> instruction works usually, what I can't figure out (or search for apparently) is what <code>[cs:rax]</code> (or <code>cs:[rax]</code>) means</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">added a snippet that shows usage</span>",
                    "time": null
                }
            ]
        }
    ]
}