{
    "title": "What are @PAGE and @PAGEOFF symbols in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/14385/what-are-page-and-pageoff-symbols-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://i.sstatic.net/ngBHx.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ngBHx.png\"/>\n  </a>\n </p>\n <p>\n  The above is the disassembly of a 64 bit ARM firmware image. Does anybody know what those\n  <code>\n   @PAGE\n  </code>\n  and\n  <code>\n   @PAGEOFF\n  </code>\n  symbols mean?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "sherlock",
    "time": "Jan 12, 2017 at 23:16",
    "comments": [
        {
            "user": "Olsonist",
            "text": "<html><body><span class=\"comment-copy\">\n These are assembler directives to calculate the offset at link time\n <a href=\"http://stackoverflow.com/q/38711058/4603507\">\n  stackoverflow.com/q/38711058/4603507\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n the image is not showing; reupload it or, even better, just paste the text as a code block.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n I can see the image:\n <a href=\"https://i.sstatic.net/ngBHx.png\" rel=\"nofollow noreferrer\">\n  i.sstatic.net/ngBHx.png\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n hm yeah, it appeared now. but it's still better to\n <a href=\"https://unix.meta.stackexchange.com/questions/4086/psa-please-dont-post-images-of-text\">\n  use text instead of screenshots\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n I know that text would be searchable, but rendering could get destroyed.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  in AArch64, all instructions are 32-bit long. Obviously, this is not enough to encode 64-bit addresses which AArch64 may need to process. So there's two options:\n </p>\n <ol>\n  <li>\n   <p>\n    use 64-bit pointers placed in the constant pool near the instruction and load them with the\n    <code>\n     LDR\n    </code>\n    instruction. This is doable but such pointers need to be updated (relocated) if the image is loaded at a non-default address.\n   </p>\n  </li>\n  <li>\n   <p>\n    Use PC-relative addressing to load addresses at a fixed offset from the current location (PIC code). This is the more common approach but the offset is still limited by the instruction size. So ARM designers came up with a clever hack: use two instructions to allow for a much wider range.\n   </p>\n  </li>\n </ol>\n <p>\n  The ADRP instruction loads the address of the 4KB\n  <em>\n   page\n  </em>\n  anywhere in the +/-4GB (33 bits) range of the current instruction (which takes 21 high bits of the offset). this is denoted by the\n  <code>\n   @PAGE\n  </code>\n  operator. \nthen, we can either use\n  <code>\n   LDR\n  </code>\n  or\n  <code>\n   STR\n  </code>\n  to read or write any address inside that page or\n  <code>\n   ADD\n  </code>\n  to to calculate the final address using the remaining 12 bits of the offset (denoted by\n  <code>\n   @PAGEOFF\n  </code>\n  ).\n </p>\n <p>\n  So basically you can consider those instruction pairs as if the last one directly accesses the final address of the location before the\n  <code>\n   @\n  </code>\n  and you can ignore the suffixes if you don't plan to reassemble the file.\n </p>\n <p>\n  See also\n  <a href=\"https://stackoverflow.com/questions/34003338/llvm-arm64-assembly-getting-a-symbol-label-address\">\n   https://stackoverflow.com/questions/34003338/llvm-arm64-assembly-getting-a-symbol-label-address\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "17",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}