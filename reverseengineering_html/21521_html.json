{
    "title": "pyelftools relocation section symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/21521/pyelftools-relocation-section-symbols",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been trying to get into reverse engineering as of late and after playing with Radare2 I realized I was playing with a lot of things without really understanding what I was doing. In an effort to rectify this I decided to do something a little more hands on and do some simple reversing exercises with python. I started by following this somewhat dated post.\n </p>\n <pre><code>https://anee.me/reversing-an-elf-from-the-ground-up-4fe1ec31db4a\n</code></pre>\n <p>\n  I was attempting to look up symbols in the relocation section and it seems that one section provides accurate addresses but another does not and i'm at a bit of a loss as to why.\n </p>\n <p>\n  <strong>\n   My Code:\n  </strong>\n </p>\n <pre><code>import sys\nfrom elftools.elf.elffile import ELFFile\nfrom elftools.elf.relocation import RelocationSection\nfrom elftools.elf.descriptions import describe_reloc_type\n\n\ndef process_file(fname):\n    with open(fname, 'rb') as f:\n        e = ELFFile(f)\n        for section in e.iter_sections():\n            if not isinstance(section, RelocationSection):\n                continue\n            print(f'\n{section.name} with {section.num_relocations()} Sections: ')\n            symbol_table = e.get_section(section['sh_link'])\n            for relocation in section.iter_relocations():\n                symbol = symbol_table.get_symbol(relocation['r_info_sym'])\n                addr = hex(relocation['r_offset'])\n                type = describe_reloc_type(relocation['r_info_type'], e)\n                print(f'{addr}\\t{type}\\t{symbol.name}')\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 2:\n        process_file(sys.argv[1])\n</code></pre>\n <p>\n  <strong>\n   Returns:\n  </strong>\n </p>\n <pre><code>.rela.dyn with 9 Sections: \n0x3de8  R_X86_64_RELATIVE   \n0x3df0  R_X86_64_RELATIVE   \n0x4048  R_X86_64_RELATIVE   \n0x3fd8  R_X86_64_GLOB_DAT   _ITM_deregisterTMCloneTable\n0x3fe0  R_X86_64_GLOB_DAT   __libc_start_main\n0x3fe8  R_X86_64_GLOB_DAT   __gmon_start__\n0x3ff0  R_X86_64_GLOB_DAT   _ITM_registerTMCloneTable\n0x3ff8  R_X86_64_GLOB_DAT   __cxa_finalize\n0x4050  R_X86_64_COPY       stdin\n\n.rela.plt with 5 Sections: \n0x4018  R_X86_64_JUMP_SLOT  puts\n0x4020  R_X86_64_JUMP_SLOT  printf\n0x4028  R_X86_64_JUMP_SLOT  fgets\n0x4030  R_X86_64_JUMP_SLOT  strcmp\n0x4038  R_X86_64_JUMP_SLOT  malloc\n</code></pre>\n <p>\n  All of the addresses under '.rela.plt' have addresses that do not match the calls I know are being made to them.\n </p>\n <p>\n  For Example:\n </p>\n <pre><code>--cut--\n0x11f0: mov eax, 0\n0x11f5: call    0x1040 <<-- This is a call to printf\n0x11fa: mov rdx, qword ptr [rip + 0x2e4f]       ** RIP + Offset: 0x4050  - calls: stdin\n0x1201: mov rax, qword ptr [rbp - 8]\n0x1205: mov esi, 0xa\n0x120a: mov rdi, rax\n0x120d: call    0x1050 <<-- This is a call to fgets\n0x1212: mov rdx, qword ptr [rbp - 0x10]\n--cut--\n</code></pre>\n <p>\n  I have verified this with Radare2, and the correct addresses seem to be as follows.\n </p>\n <pre><code> 0x1030     sym.imp.puts                             \n 0x1040     sym.imp.printf\n 0x1050     sym.imp.fgets\n 0x1060     sym.imp.strcmp\n 0x1070     sym.imp.malloc\n</code></pre>\n <p>\n  From what little I can find this may be due to dynamic linking but i'm not sure. I have been unable to find a way to get my script to output this section with what I believe are the appropriate addresses. Any information on how this process works, or how to retrieve the needed addresses with pyelftools would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "989",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "python"
    ],
    "user": "Wheat1ey",
    "time": "Jun 20, 2019 at 3:39",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n What is your question, though? Typically such a thing ends with a question mark and requests particular information or similar ...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   R_X86_64_JUMP_SLOT\n  </code>\n  relocations are applied to the GOT (global offset table) slots,\n  <em>\n   not\n  </em>\n  to the call instructions you're seeing.\n </p>\n <p>\n  The call instructions go to the PLT (Program linkage table) stubs in the .plt section, and those, in turn, use the GOT and the\n  <code>\n   .rela.plt\n  </code>\n  relocations to resolve and jump to the final symbol in the external shared object. This process happens with the help of the dynamic linker (\n  <code>\n   ld.so\n  </code>\n  ) and is a little too complicated to explain in this answer box, but you can find more information by searching for these terms.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jun 20, 2019 at 7:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Wheat1ey",
                    "text": "<span class=\"comment-copy\">Thanks for the information, that gives me a good place to start. I tried give you an up-vote but apparently my account, being new, does not have enough rep to do so.</span>",
                    "time": null
                }
            ]
        }
    ]
}