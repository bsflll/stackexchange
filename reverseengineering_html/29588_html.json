{
    "title": "What is the data on the start of .rdata segment?",
    "link": "https://reverseengineering.stackexchange.com/questions/29588/what-is-the-data-on-the-start-of-rdata-segment",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been doing some reverse engineering lately trying to improve my skills and came across the following bytes on the start of\n  <code>\n   .rdata\n  </code>\n  segment.\n </p>\n <p>\n  Filename:\n  <code>\n   C:/cygwin64/bin/xkbcomp.exe\n  </code>\n </p>\n <p>\n  <strong>\n   Bytes:\n  </strong>\n </p>\n <pre><code>70 D3 FD FF 50 D3 FD FF  28 D3 FD FF 00 D3 FD FF\nE0 D2 FD FF B8 D2 FD FF  90 D2 FD FF 68 D2 FD FF\n48 D2 FD FF 30 D2 FD FF  18 D2 FD FF F8 D1 FD FF\nD0 D1 FD FF B0 D1 FD FF  90 D1 FD FF 78 D1 FD FF\n58 D1 FD FF 30 D1 FD FF  08 D1 FD FF F0 D0 FD FF\nD0 D0 FD FF B0 D0 FD FF  A0 D3 FD FF 00 00 00 00\n56 61 6C 75 65 20 6F 66  20 25 73 20 66 69 65 6C\n64 20 6D 75 73 74 20 62  65 20 6F 66 20 74 79 70\n</code></pre>\n <p>\n  Note: There had been other DLL files that contained similar data.\n </p>\n <p>\n  As you may have noticed, the ASCII characters start on line 7 after 4 null bytes. As per my knowledge,\n  <code>\n   .rdata\n  </code>\n  segment is meant to contain read-only data, but the initial number of bytes makes no sense to me.\n </p>\n <p>\n  Can anyone tell me what this is, and why is it there?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "880",
    "tags": [
        "assembly",
        "pe"
    ],
    "user": "Neehack",
    "time": "Nov 21, 2021 at 4:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  it appeared to be some sort of switch data\nsince you haven't provided much details I googled for the binary and found one.\n </p>\n <pre><code>:\\>file xkbcomp64.exe\nxkbcomp64.exe: PE32+ executable (console) x86-64, for MS Windows\n\n:\\>certutil -hashfile xkbcomp64.exe MD5 | grep -iv hash\naba2c2755017f4d11bf99964e87f4427\n</code></pre>\n <p>\n  whose .rdata start contains differnt bytes\n </p>\n <pre><code>:\\>dumpbin /section:.rdata xkbcomp64.exe\nMicrosoft (R) COFF/PE Dumper Version 14.16.27045.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file xkbcomp64.exe\n\nFile Type: EXECUTABLE IMAGE\n\nSECTION HEADER #3\n  .rdata name\n    A7C0 virtual size\n   22000 virtual address (0000000100422000 to 000000010042C7BF)\n    A800 size of raw data\n   20800 file pointer to raw data (00020800 to 0002AFFF)\n       0 file pointer to relocation table\n       0 file pointer to line numbers\n       0 number of relocations\n       0 number of line numbers\n40600040 flags\n         Initialized Data\n         RESERVED - UNKNOWN\n         RESERVED - UNKNOWN\n         Read Only\n\n  Summary\n\n        B000 .rdata\n</code></pre>\n <p>\n  actual data at .rdata start location\n </p>\n <pre><code>:\\>xxd -s 0x20800 -g 4 -l 0x100 xkbcomp64.exe\n00020800: 63796767 636a2d31 362e646c 6c005f4a  cyggcj-16.dll._J\n00020810: 765f5265 67697374 6572436c 61737365  v_RegisterClasse\n00020820: 73000000 00000000 00000000 00000000  s...............\n00020830: 00000000 00000000 00000000 00000000  ................\n00020840: 62f3fdff 42f3fdff 22f3fdff 00f3fdff  b...B...\".......\n00020850: e0f2fdff b4f2fdff 92f2fdff 70f2fdff  ............p...\n00020860: 52f2fdff 41f2fdff 30f2fdff 14f2fdff  R...A...0.......\n00020870: f0f1fdff d0f1fdff b0f1fdff 91f1fdff  ................\n00020880: 74f1fdff 50f1fdff 23f1fdff 10f1fdff  t...P...#.......\n00020890: f0f0fdff d0f0fdff 90f3fdff 00000000  ................\n000208a0: 56616c75 65206f66 20257320 6669656c  Value of %s fiel\n000208b0: 64206d75 73742062 65206f66 20747970  d must be of typ\n000208c0: 65202573 0a004163 74696f6e 20257320  e %s..Action %s\n000208d0: 64656669 6e697469 6f6e2069 676e6f72  definition ignor\n000208e0: 65640a00 696e7465 67657220 2872616e  ed..integer (ran\n000208f0: 67652031 2e2e3829 00000000 00000000  ge 1..8)........\n</code></pre>\n <p>\n  since i could see the pattern you posted at offset 0x40 from start of .rdata\ni tossed it into ghidra to look if this is referenced somewhere\nand obviously it is referenced as switch data\n </p>\n <pre><code> switchD_100401109::switchdataD_100422040     XREF[2]:     FUN_1004010f0:1004010f9(*), \n                                                           FUN_1004010f0:100401102(R)  \n   100422040 62 f3 fd ff            uint     FFFDF362h\n   100422044 42 f3 fd ff            uint     FFFDF342h\n   100422048 22 f3 fd ff            uint     FFFDF322h\n   10042204c 00 f3 fd ff            uint     FFFDF300h\n   100422050 e0 f2 fd ff            uint     FFFDF2E0h\n   100422054 b4 f2 fd ff            uint     FFFDF2B4h\n</code></pre>\n <p>\n  function that is referencing this Switchdata\n </p>\n <pre><code>**************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined * __fastcall FUN_1004010f0(uint param_1)\n         undefined *       RAX:8          <RETURN>\n         uint              ECX:4          param_1\n FUN_1004010f0                                XREF[5]:     FUN_100401410:10040141e(c), \n                                                           FUN_100401570:100401587(c), \n                                                           FUN_100401810:100401827(c), \n                                                           10040373a(c), 10042e03c(*)  \n   1004010f0 83 f9 16               CMP      param_1,0x16\n   1004010f3 0f 87 f9 02            JA       LAB_1004013f2\n             00 00\n   1004010f9 48 8d 05 40            LEA      RAX,[switchD_100401109::switchdataD_100422040]        = FFFDF362h\n             0f 02 00\n   100401100 89 c9                  MOV      param_1,param_1\n   100401102 48 63 14 88            MOVSXD   RDX,dword ptr [RAX + param_1*0x4]=>switchD_100401109  = FFFDF362h\n   100401106 48 01 d0               ADD      RAX,RDX\n switchD_100401109::switchD\n   100401109 ff e0                  JMP      RAX\n</code></pre>\n <p>\n  EDIT\n </p>\n <p>\n  these are the offsets in my binary as posted above\n </p>\n <pre><code>00020840: 62f3fdff 42f3fdff 22f3fdff 00f3fdff  b...B...\".......\n00020850: e0f2fdff b4f2fdff 92f2fdff 70f2fdff  ............p...\n00020860: 52f2fdff 41f2fdff 30f2fdff 14f2fdff  R...A...0.......\n00020870: f0f1fdff d0f1fdff b0f1fdff 91f1fdff  ................\n00020880: 74f1fdff 50f1fdff 23f1fdff 10f1fdff  t...P...#.......\n00020890: f0f0fdff d0f0fdff 90f3fdff 00000000  ................\n</code></pre>\n <p>\n  the code based on param_1 value (0 to 16) will jump to the resultant location of script below\n </p>\n <pre><code>LEA      RAX,100422040 \nMOVSXD   RDX,dword ptr [RAX + param_1*0x4] \nADD      RAX,RDX\nJMP      RAX\n</code></pre>\n <p>\n  jump addresses\n </p>\n <pre><code>>>> import ghidra\n>>> staddr = getMemoryBlock(\".rdata\").start.add(0x40)\n>>> for i in range(0,16,1):\n...         hex((currentProgram.getMemory().getInt(staddr.add(i*4)))+ staddr.offset)\n... \n'0x1004013a2L'\n'0x100401382L'\n'0x100401362L'\n'0x100401340L'\n'0x100401320L'\n'0x1004012f4L'\n'0x1004012d2L'\n'0x1004012b0L'\n'0x100401292L'\n'0x100401281L'\n'0x100401270L'\n'0x100401254L'\n'0x100401230L'\n'0x100401210L'\n'0x1004011f0L'\n'0x1004011d1L'\n</code></pre>\n <p>\n  switch case 0 to 4 as screen shot\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/4n3wH.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/4n3wH.jpg\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 22, 2021 at 14:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Neehack",
                    "text": "<span class=\"comment-copy\">by switch do you mean the switch statement, as in <code>switch(blah): case; case; default</code>?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">yes these are the indexes or entries in the jump table used like address + (index * ptr(.rdata[i])) so if index is 0 it will result in address + (-0xff,,,,362).  being the resolved location i have posted the relevent function in my answer for the googled binary</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i edited the answer and added further details take a look</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The first bytes are indeed a jump table for a switch, and the string constants start after an alignment padding:\n </p>\n <pre><code>.rdata:0000000100424000             _rdata          segment align_32 public 'DATA' use64\n.rdata:0000000100424000                             assume cs:_rdata\n.rdata:0000000100424000                             ;org 100424000h\n.rdata:0000000100424000 42 D3 FD FF+jpt_1004010A9   dd offset loc_100401342 - 100424000h\n.rdata:0000000100424000 22 D3 FD FF+                                        ; DATA XREF: fieldText+9↑o\n.rdata:0000000100424000 02 D3 FD FF+                                        ; fieldText+12↑r\n.rdata:0000000100424000 E0 D2 FD FF+                dd offset loc_100401322 - 100424000h ; jump table for switch statement\n.rdata:0000000100424000 C0 D2 FD FF+                dd offset loc_100401302 - 100424000h\n.rdata:0000000100424000 94 D2 FD FF+                dd offset loc_1004012E0 - 100424000h\n.rdata:0000000100424000 72 D2 FD FF+                dd offset loc_1004012C0 - 100424000h\n.rdata:0000000100424000 50 D2 FD FF+                dd offset loc_100401294 - 100424000h\n.rdata:0000000100424000 32 D2 FD FF+                dd offset loc_100401272 - 100424000h\n.rdata:0000000100424000 21 D2 FD FF+                dd offset loc_100401250 - 100424000h\n.rdata:0000000100424000 10 D2 FD FF+                dd offset loc_100401232 - 100424000h\n.rdata:0000000100424000 F4 D1 FD FF+                dd offset loc_100401221 - 100424000h\n.rdata:0000000100424000 D0 D1 FD FF+                dd offset loc_100401210 - 100424000h\n.rdata:0000000100424000 B0 D1 FD FF+                dd offset loc_1004011F4 - 100424000h\n.rdata:0000000100424000 90 D1 FD FF+                dd offset loc_1004011D0 - 100424000h\n.rdata:0000000100424000 71 D1 FD FF+                dd offset loc_1004011B0 - 100424000h\n.rdata:0000000100424000 54 D1 FD FF+                dd offset loc_100401190 - 100424000h\n.rdata:0000000100424000 30 D1 FD FF+                dd offset loc_100401171 - 100424000h\n.rdata:0000000100424000 03 D1 FD FF+                dd offset loc_100401154 - 100424000h\n.rdata:0000000100424000 F0 D0 FD FF+                dd offset loc_100401130 - 100424000h\n.rdata:0000000100424000 D0 D0 FD FF+                dd offset loc_100401103 - 100424000h\n.rdata:0000000100424000 B0 D0 FD FF+                dd offset loc_1004010F0 - 100424000h\n.rdata:0000000100424000 70 D3 FD FF                 dd offset loc_1004010D0 - 100424000h\n.rdata:0000000100424000                             dd offset loc_1004010B0 - 100424000h\n.rdata:0000000100424000                             dd offset loc_100401370 - 100424000h\n.rdata:000000010042405C 00 00 00 00                 align 20h\n.rdata:0000000100424060             ; const char s[]\n.rdata:0000000100424060 56 61 6C 75+s               db 'Value of %s field must be of type %s',0Ah,0\n.rdata:0000000100424060 65 20 6F 66+                                        ; DATA XREF: ReportMismatch+18↑o\n</code></pre>\n <p>\n  Because the jump table itself does not change depending on input data, it is effectively read-only and can be placed into\n  <code>\n   .rdata\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Nov 21, 2021 at 18:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Neehack",
                    "text": "<span class=\"comment-copy\">can you please tell me what this jump table and switch is? is it something to do with some function in <code>.code/.text</code> segment?</span>",
                    "time": null
                },
                {
                    "user": "Neehack",
                    "text": "<span class=\"comment-copy\">or do you mean the switch statement as in <code>switch(n): case; case case;</code></span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Neehack yes, see the function <code>fieldText()</code> in the source code (<code>action.c</code>)</span>",
                    "time": null
                }
            ]
        }
    ]
}