{
    "title": "Why does IDA give variables a different name in Assembly and Pseudocode?",
    "link": "https://reverseengineering.stackexchange.com/questions/32602/why-does-ida-give-variables-a-different-name-in-assembly-and-pseudocode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Why does IDA give variables a different name in Assembly and Pseudocode?\n </p>\n <p>\n  In the picture below, you can see that IDA gives the stack location\n  <code>\n   -38h\n  </code>\n  the name\n  <code>\n   var_38\n  </code>\n  in the Assembly view, but in the Pseudoview it's called\n  <code>\n   v8\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/A2VmM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/A2VmM.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "61",
    "tags": [
        "ida"
    ],
    "user": "Daniel",
    "time": "Dec 28, 2023 at 13:27",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n This is because the disassembler's frame view is based around the structure API using the simplex method to determine min size and op access to determine storage, whereas the decompiler plugin is instead focused on combining instruction semantics to assist you in dealing with type information. Var storage (regs/mem) can be repurposed by different sets of instructions, resulting in some code using a var with one type, and others using the same storage with a different type. Struct API doesn't really support this. In essence, the plugin uses different tools entirely to do its decompilation work.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}