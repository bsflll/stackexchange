{
    "title": "Unknown game data compression method (Gamecube)",
    "link": "https://reverseengineering.stackexchange.com/questions/6527/unknown-game-data-compression-method-gamecube",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I got some game compression data which I couldn't find any clue.\nAll compressed file signature start with: [\n  <em>\n   SK_ASC\n  </em>\n  ] and unknown compression method.\n </p>\n <p>\n  I got some information from RAM/Executive file but still didn't work.\nI think the compression is the lossless format (But it's not a LZO nor ZLIB).\nCan anyone help me figure out the compression, and how to decompress?\n </p>\n <ul>\n  <li>\n   All of example file above can be found here:\n   <strong>\n    <a href=\"http://goo.gl/JJQfl4\" rel=\"nofollow\">\n     http://goo.gl/JJQfl4\n    </a>\n   </strong>\n  </li>\n </ul>\n <p>\n  <strong>\n   === 10.25.14 ADDED ===\n  </strong>\n </p>\n <p>\n  The list below compression method that I tested, but doesn't match:\n </p>\n <ul>\n  <li>\n   LZ10\n  </li>\n  <li>\n   LZ11\n  </li>\n  <li>\n   LZ77\n  </li>\n  <li>\n   LZO1x-1\n  </li>\n  <li>\n   LZO1x-999\n  </li>\n  <li>\n   LZSS\n  </li>\n  <li>\n   LZW\n  </li>\n  <li>\n   LZMA\n  </li>\n  <li>\n   HUFF blocksize 4 & 8 byte\n  </li>\n  <li>\n   RLE\n  </li>\n  <li>\n   ZLIB\n  </li>\n </ul>\n <p>\n  <strong>\n   === 10.26.14 ADDED ===\n  </strong>\n </p>\n <p>\n  Today I analysis something via memory dump.\n </p>\n <p>\n  First of all, compressed\n  <code>\n   EMnMenu.cmp\n  </code>\n  file could be loaded when I enter the main menu by guessing it's file name. and there are very similar files which is unused. (\n  <code>\n   EKisokMenu.cmp\n  </code>\n  ,\n  <code>\n   EE3Menu.cmp\n  </code>\n  )\n </p>\n <p>\n  So I try to check memory dump by replacing file each other. and I got\n  <code>\n   dump_menu.ram\n  </code>\n  ,\n  <code>\n   dump_e3menu.ram\n  </code>\n  ,\n  <code>\n   dump_kioskmenu.ram\n  </code>\n  . By comparing three different ram dump data,\n  \n\n  I found out only specific offset data is changed.\n </p>\n <p>\n  By using this method, I finally got a decompression data dumped via offset:\n  <strong>\n   0x80CA6980\n  </strong>\n  . Decompressed data is well known texture which was first 4 byte signature  start with 0x00 0x20 0xAF 0x30. (check texture format here:\n  <em>\n   <a href=\"http://goo.gl/UqLz3m\" rel=\"nofollow\">\n    http://goo.gl/UqLz3m\n   </a>\n  </em>\n  )\n </p>\n <p>\n  I try to find compression algorithm by compressing the decompression data and compare with original data. but non of algorithm that I test above doesn't match.\n </p>\n <p>\n  Anyway, I uploaded several decompressed data via ram dump and compressed data so you can check here:\n  <strong>\n   goo.gl/JJQfl4\n  </strong>\n </p>\n <ul>\n  <li>\n   <strong>\n    CMP\n   </strong>\n   is a compressed data which always start with\n   <em>\n    SK_ASC\n   </em>\n   .\n  </li>\n  <li>\n   <strong>\n    BIN\n   </strong>\n   is a same as CMP.\n  </li>\n  <li>\n   <strong>\n    DCMP\n   </strong>\n   is a instant copy from memory file, which was extracted from offset 0x80CA6980.\n  </li>\n  <li>\n   <strong>\n    DMP\n   </strong>\n   is a data value correction by subtracted 0x80CA6980 because there so many memory scrapping dummy (so this is the cleaned decompressed data if I guess right)\n  </li>\n </ul>\n <p>\n  <strong>\n   ADDED\n  </strong>\n  Didn't work with regular deflate/zlib all compress level.\n </p>\n <p>\n  <strong>\n   == 11.09.14 ==\n  </strong>\n </p>\n <p>\n  I posted several forum to help, but no clue for weeks :(\n </p>\n <ul>\n  <li>\n   <a href=\"http://zenhax.com/viewtopic.php?f=9&t=313&sid=3172c154c5da95476795ac742501fec1\" rel=\"nofollow\">\n    http://zenhax.com/viewtopic.php?f=9&t=313&sid=3172c154c5da95476795ac742501fec1\n   </a>\n  </li>\n  <li>\n   <a href=\"http://encode.ru/threads/2074-Identifying-compression-method?p=41188&posted=1#post41188\" rel=\"nofollow\">\n    http://encode.ru/threads/2074-Identifying-compression-method?p=41188&posted=1#post41188\n   </a>\n  </li>\n </ul>\n <p>\n  <strong>\n   == 11.15.14 ==\n  </strong>\n </p>\n <p>\n  Other forum user said to me there are Gamecube DOL (executive file) plugin for IDA.\nSo I use them and now I've found decompression main/algorithm subroutine.\nWould anyone help me find out describe how it works?\n </p>\n <p>\n  (I'm not well in dis-assembly, So I'm learning now)\n </p>\n <p>\n  <a href=\"http://goo.gl/2bQNfj\" rel=\"nofollow\">\n   http://goo.gl/2bQNfj\n  </a>\n </p>\n <p>\n  <strong>\n   Power PC based Dis-Assembly skill Required\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "1k",
    "tags": [
        "file-format",
        "decompress"
    ],
    "user": "NGC_KOR",
    "time": "Oct 6, 2015 at 4:53",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n You should run\n <code>\n  signsrch\n </code>\n on the binary doing decompression, not the compressed data. Though it's quite likely the algorithm is completely custom and you'll just have to reverse it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n According to\n <a href=\"http://webcache.googleusercontent.com/search?q=cache:G32DNOBV_QoJ:forum.xentax.com/viewtopic.php%3Ff%3D21%26t%3D12093\" rel=\"nofollow noreferrer\">\n  webcache.googleusercontent.com/â€¦\n </a>\n ,\n <code>\n  SK_ASC\n </code>\n is used for at least one game developed by\n <a href=\"http://en.wikipedia.org/wiki/Silicon_Knights\" rel=\"nofollow noreferrer\">\n  Silicon Knights\n </a>\n . The\n <code>\n  SK\n </code>\n suggests that this is using an algorithm that's proprietary to Silicon Knights, as @IgorSkochinsky suggested.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NGC_KOR",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky, I used 'signsrch' on Executive/Memory file, not a compressed data. Anyway, algorithm is quite mess and still no clue.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Are you sure you uploaded the correct files? At a glance, they look very similar, and neither starts with\n <code>\n  SK_ASC\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n What I mean is it seems you uploaded the memory dump twice. I don't see the signature in either.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}