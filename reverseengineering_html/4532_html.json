{
    "title": "Why are values passed through useless copies?",
    "link": "https://reverseengineering.stackexchange.com/questions/4532/why-are-values-passed-through-useless-copies",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, say that I have the following code, which gives three examples of what I believe to be unnecessary copies of values.\n </p>\n <pre><code>mov    QWORD PTR [rbp-0x18],rdi\nmov    rdx,QWORD PTR [rbp-0x18]\nlea    rax,[rbp-0x10]\nmov    rsi,rdx\nmov    rdi,rax\ncall   4003e0 <strcpy@plt>\n</code></pre>\n <p>\n  Why is the value in\n  <code>\n   rdi\n  </code>\n  copied to memory at\n  <code>\n   rbp-0x18\n  </code>\n  , then copied back to\n  <code>\n   rdx\n  </code>\n  ?  It's then copied to\n  <code>\n   rsi\n  </code>\n  (2 extra copies).\n </p>\n <p>\n  Finally, why the\n  <code>\n   lea + mov\n  </code>\n  for\n  <code>\n   rbp-0x10\n  </code>\n  to\n  <code>\n   rax\n  </code>\n  , then to\n  <code>\n   rdi\n  </code>\n  ?  Is there any reason the following code wasn't generated ?\n </p>\n <pre><code>mov    rsi,rdi\nlea    rdi,[rbp-0x10]\ncall   4003e0 <strcpy@plt>\n</code></pre>\n <p>\n  (My guess is that this is just an artifact of the code generation in the compiler, but I'm making sure there's not some rules of x86-64 that I'm missing.)\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "917",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "David",
    "time": "Jun 5, 2014 at 6:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are no artifacts and surely the compiler, and I mean\n  <code>\n   GCC\n  </code>\n  , can generate a better and faster code if told so. The first version of your generated code is non optimized. Why ? Either because\n  <code>\n   -O0\n  </code>\n  flag (0 level optimizations ==> No optimizations) was specified, or because no optimization flags were specified and by default\n  <code>\n   GCC\n  </code>\n  turns optimizations off.\n </p>\n <p>\n  Below you'll find two versions of the same code. Version 1 with\n  <code>\n   -O0\n  </code>\n  flag. Version 2 with\n  <code>\n   -O2\n  </code>\n  flag.\n </p>\n <ul>\n  <li>\n   <p>\n    <strong>\n     Version 1:\n    </strong>\n   </p>\n   <pre><code> 55                      push   rbp\n 48 89 e5                mov    rbp,rsp\n 48 81 ec 10 04 00 00    sub    rsp,0x410\n 89 bd fc fb ff ff       mov    DWORD PTR [rbp-0x404],edi\n 48 89 b5 f0 fb ff ff    mov    QWORD PTR [rbp-0x410],rsi\n 48 8b 85 f0 fb ff ff    mov    rax,QWORD PTR [rbp-0x410]\n 48 83 c0 08             add    rax,0x8\n 48 8b 10                mov    rdx,QWORD PTR [rax]\n 48 8d 85 00 fc ff ff    lea    rax,[rbp-0x400]\n 48 89 d6                mov    rsi,rdx\n 48 89 c7                mov    rdi,rax\n e8 40 fe ff ff          call   400400 <strcpy@plt>\n 48 8d 85 00 fc ff ff    lea    rax,[rbp-0x400]\n 48 89 c7                mov    rdi,rax\n e8 41 fe ff ff          call   400410 <puts@plt>\n b8 00 00 00 00          mov    eax,0x0\n c9                      leave\n c3                      ret\n 66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]\n 00 00 00  \n</code></pre>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Version 2:\n    </strong>\n   </p>\n   <pre><code> 48 81 ec 08 04 00 00    sub    rsp,0x408\n 48 8b 76 08             mov    rsi,QWORD PTR [rsi+0x8]\n 48 89 e7                mov    rdi,rsp\n e8 ad ff ff ff          call   400400 <strcpy@plt>\n 48 89 e7                mov    rdi,rsp\n e8 b5 ff ff ff          call   400410 <puts@plt>\n 31 c0                   xor    eax,eax\n 48 81 c4 08 04 00 00    add    rsp,0x408\n c3                      ret\n 0f 1f 00                nop    DWORD PTR [rax]\n</code></pre>\n  </li>\n </ul>\n <p>\n  If you're interested in the optimizations performed by\n  <code>\n   GCC\n  </code>\n  you should read\n  <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\">\n   this\n  </a>\n  link, and\n  <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.6.1/gnat_ugn_unw/Optimization-Levels.html\">\n   this\n  </a>\n  one too. You can also check the\n  <a href=\"ftp://ftp.uvsq.fr/pub/gcc/summit/\">\n   <code>\n    GCC\n   </code>\n   summit publications\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "yaspr",
            "time": "Jun 5, 2014 at 6:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">Ok, seems to be what I was assuming.  I was posting code from a wargame challenge, and I suppose no optimization makes sense there.</span>",
                    "time": null
                }
            ]
        }
    ]
}