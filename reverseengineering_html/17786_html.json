{
    "title": "Arm ldr diffrent between # and =",
    "link": "https://reverseengineering.stackexchange.com/questions/17786/arm-ldr-diffrent-between-and",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In ARM assembly, what is the difference between\n </p>\n <p>\n  <code>\n   ldr r4, =0x44454433\n  </code>\n </p>\n <p>\n  and\n </p>\n <p>\n  <code>\n   ldr r4, #0x44454433\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "arm"
    ],
    "user": "Hcjf",
    "time": "Mar 25, 2018 at 19:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the first one\n  <strong>\n   ldr r4, =0x44454433\n  </strong>\n  is a valid pseudo instuction\n </p>\n <p>\n  the second one is invalid\n </p>\n <p>\n  btw the syntax is not for a real instruction but an alias a pseudo instruction\n </p>\n <p>\n  the assembler creates proper instruction with respect to immediate values\n </p>\n <p>\n  most of these questions can be answered by assembling a single instruction and \ndisassembling it\n  \n\n  you can use armasm from msvc \nor you can use keystone with python or\n  \n\n  use the innumerable online assembler disassembler sites\n </p>\n <pre><code>import sys\nfrom keystone import *\ninstruction = raw_input(\"Enter your arm instruction :  \")\nprint instruction\n\nks = Ks(KS_ARCH_ARM,KS_MODE_ARM|KS_MODE_THUMB)\nblah = ks.asm(instruction)\nfor i in blah[0]:\n    print \"%02x \" % i, \nprint \"\n\"\n</code></pre>\n <p>\n  executed the script to get\n </p>\n <pre><code>:\\>python asmarm.py\nEnter your arm instruction :  ldr r4,=0x44455533\nldr r4,=0x44455533\n00  4c  00  bf  33  55  45  44\n</code></pre>\n <p>\n  on the other hand if you try assembling the second instruction it will raise an error unexpected token\n </p>\n <pre><code>:\\>python asmarm.py\nEnter your arm instruction :  ldr r4,=#0x44554533\nldr r4,=#0x44554533\nTraceback (most recent call last):\n  File \"asmarm.py\", line 7, in <module>\n    blah = ks.asm(instruction)\n  File \"c:\\python27\\lib\\site-packages\\keystone\\keystone.py\", line 198, in asm\n    raise KsError(errno, stat_count.value)\nkeystone.keystone.KsError: Unknown token in expression (KS_ERR_ASM_EXPR_TOKEN)\n</code></pre>\n <p>\n  or you can use capstone to disassemble a hex byte sequence\n </p>\n <p>\n  as below\n </p>\n <pre><code>import sys\nfrom capstone import *\nimport binascii\ninp = binascii.unhexlify( ''.join(sys.argv[1].split()))\ncs = Cs(CS_ARCH_ARM , CS_MODE_THUMB)\ncs.Detail = True\ndis = cs.disasm( inp,  int(sys.argv[2],16))\nfor i in dis:\n    print(\"0x%x:\\t\" % i.address),\n    print(binascii.hexlify(i.bytes)),\n    print(\"\\t%s\\t%s\" %(i.mnemonic, i.op_str)) \n</code></pre>\n <p>\n  executing the script\n </p>\n <pre><code>:\\>discap.py \"00  4c  00  bf  33  55  45  44\" 0x440000\n0x440000:       004c    ldr     r4, [pc, #0]\n0x440002:       00bf    nop\n0x440004:       3355    strb    r3, [r6, r4]\n0x440006:       4544    add     r5, r8\n</code></pre>\n <p>\n  if you use msvc route you need to open a vsdev cmdprompt with a proper architecxture and simple use armasm with an input file  as below\n </p>\n <p>\n  set correct arch and host\n </p>\n <pre><code>C:\\>cat bld.bat\npushd ..    \ncall \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\vsdevcmd.bat\" -arch=arm -host_arch=x86   \n</code></pre>\n <p>\n  src file contents\n </p>\n <pre><code>C:\\>cat myasm.asm\n    AREA .text, CODE, ARM\ntest PROC\n    ldr r4,=0x44455533\n    ENDP    \n    END\n</code></pre>\n <p>\n  execute and open a msvc arm devprompt\n </p>\n <pre><code>C:\\>bld.bat\n\nC:\\>pushd ..\n\nC:\\>call \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\vsdevcmd.bat\" -arch=arm -host_arch=x86\n**********************************************************************\n** Visual Studio 2017 Developer Command Prompt v15.6.1\n** Copyright (c) 2017 Microsoft Corporation\n**********************************************************************\nC:\\>popd\n</code></pre>\n <p>\n  assemble the input file\n </p>\n <pre><code>C:\\>armasm myasm.asm\nMicrosoft (R) ARM Macro Assembler Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n</code></pre>\n <p>\n  disassemble the obj file\n </p>\n <pre><code>C:\\>dumpbin /disasm myasm.obj\nMicrosoft (R) COFF/PE Dumper Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file myasm.obj\n\nFile Type: COFF OBJECT\n\ntest:\n  00000000: 4C00      ldr         r4,00000004\n  00000002: 0000      movs        r0,r0\n  00000004: 5533      strb        r3,[r6,r4]\n  00000006: 4445      add         r5,r5,r8\n\n  Summary\n\n          60 .debug$S\n           8 .text\n\nC:\\> \n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Mar 26, 2018 at 18:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "not2qubit",
                    "text": "<span class=\"comment-copy\">Exactly what I was looking for. Thanks for showing <i>capstone</i> and <i>keystone</i>.</span>",
                    "time": null
                },
                {
                    "user": "not2qubit",
                    "text": "<span class=\"comment-copy\">What pip <a href=\"https://github.com/keystone-engine/keystone\" rel=\"nofollow noreferrer\">package</a> is <i>keystone</i>?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Although this is be a simple\n  <a href=\"http://lmgtfy.com\" rel=\"nofollow noreferrer\">\n   LMGTFY\n  </a>\n  question, I'm going to answer since it took me some time to find it.\n </p>\n <p>\n  Assuming it's 32bit ARM all the opcodes are 4 bytes long so this poses a question how one can include a 32bit value in the opcode if opcode with such big data would not fit in 4 bytes.\n </p>\n <pre><code>ldr r4, =0x44454433\n</code></pre>\n <p>\n  is a pseudo-instruction.\n </p>\n <blockquote>\n  <p>\n   The LDR Rd,=const pseudo-instruction generates the most efficient single instruction to load any 32-bit number. - page\n   <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.100069_0610_00_en/armasm_user_guide_100069_0610_00_en.pdf\" rel=\"nofollow noreferrer\">\n    6-111\n   </a>\n  </p>\n </blockquote>\n <p>\n  The other const\n  <code>\n   #0x44454433\n  </code>\n  is just a const value, but with this form (having 32 bit value in it and just the value) seems invalid (not an expert on ARM).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Mar 25, 2018 at 6:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Correct. It just a convenient <i>shorthand</i> notation for \"load a large constant from a nearby address\". It is not an instruction in itself; a disassembler may choose to show it that way, but the actual code is something different.</span>",
                    "time": null
                },
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">If you're curious about what immediate values can be represented in the instruction directly, I thought this was a nice resource: <a href=\"https://alisdair.mcdiarmid.org/arm-immediate-value-encoding/\" rel=\"nofollow noreferrer\">alisdair.mcdiarmid.org/arm-immediate-value-encoding</a></span>",
                    "time": null
                }
            ]
        }
    ]
}