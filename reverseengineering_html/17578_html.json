{
    "title": "Converting object file to LLVM bitcode",
    "link": "https://reverseengineering.stackexchange.com/questions/17578/converting-object-file-to-llvm-bitcode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Frameworks like\n  <a href=\"https://github.com/trailofbits/mcsema\" rel=\"nofollow noreferrer\">\n   mcsema\n  </a>\n  is used to convert an executable file into LLVM bitcode which can be further used to perform program analysis.\n </p>\n <p>\n  Is there any way to convert an object file in the similar way?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "923",
    "tags": [
        "binary-analysis"
    ],
    "user": "ashish",
    "time": "Mar 2, 2018 at 14:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Certainly, there are at least two ways I can think of:\n </p>\n <ul>\n  <li>\n   <p>\n    Add support for object file parsing to McSema\n   </p>\n  </li>\n  <li>\n   <p>\n    Link the object file into a dummy executable and parse that.\n   </p>\n  </li>\n </ul>\n <p>\n  You could also write your own lifter to llvm IR that works on object files :)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Mar 2, 2018 at 22:56",
            "is_accepted": true,
            "comments": []
        }
    ]
}