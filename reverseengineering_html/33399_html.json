{
    "title": "How to decode this zip data",
    "link": "https://reverseengineering.stackexchange.com/questions/33399/how-to-decode-this-zip-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a commercial MS Excel add-in which generates this type of binary data:\n </p>\n <pre><code>UEsDBBQACAgIANF2Y1oAAAAAAAAAAAAAAAABAAAAMGVSTW8TMRDNmV9RWeKWSNl80GZvbdKKqClFNEWqqgrN2rMbK157sWdRoyp3DhyQ4AZ/AXHl0n9D+jvwejcJUn2b957Hz2/mdHLSetFqtR4Y3hfG0tjoVGYsfmACUygVzUBnJWTIYsY1azMhXaFgdWFEBYl8qoXkQNJUpNSpOUcsrgsB5Pmuh9yx4ywmW2JVvJYCTxTo5RYqHc5KDZbFKSiH63ZjZC5J4WURGns3oFRAThXmqMk18jbjptRkV7taoONWNvcaLLX4sUTN9yrvQpNMJdod5CAvFO5LVMgJRXj1HFcz6YjFt3eeMaXleyFBovAN5Huk1PI/g2XIYhLy2H4xR7LSp3L7wD54FiYyC1d6bZZgJnWtZtHo6LAb9SOfLF/4OeA75MaK2gavJ3DR9edV1PMa1LUNNl5IDfHB+O00PrgxN4G69qY89ZKFgEELFDuLeE8WOM0h206lSozFgzbLrCmLQDTaJfoU2SjqIiTY6wyPEDoDTKAzGvaHHTHiR4O0G0UiGfmXdO3n759fmx+PceVn8/jt6efnzdcvT7+/e0EB1g9iKsKqWHRk7D5HS89iDT9Y31Vab9Et5quiXjOSOZ5ZL79CIqnDBvMF8uV7UHL/UwWOLpMq6UFd1A2YqlC0n8IiO2/MJO7MmtxTvW4v8gEf1uAVgaVjeobPTQ31G6hAK41ouhdV99Buvf4HUEsHCArmhWsPAgAAcQMAAA==\n</code></pre>\n <p>\n  BASE64 decoded:\n </p>\n <pre><code>PK\\x03\\x04\\x14\\x00\\x08\\x08\\x08\\x00\\xd1vcZ\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x000eRMo\\x131\\x10\\xcd\\x99_QY\\xe2\\x96H\\xd9|\\xd0fom\\xd2\\x8a\\xa8)E4E\\xaa\\xaa\n\\xcd\\xda\\xb3\\x1b+^{\\xb1gQ\\xa3*w\\x0e\\x1c\\x90\\xe0\\x06\\x7f\\x01q\\xe5\\xd2\\x7fC\\xfa;\\xf0z7\\tR}\\x9b\\xf7\\x9e\\xc7\\xcfo\\xe6tr\\xd2z\\xd1j\\xb5\\x1e\\x18\\xde\\x17\\xc6\\xd2\\xd8\\xe8Tf,~`\\x02S(\\x15\\xcd@g%d\\xc8b\\xc65k3!]\\xa1`uaD\\x05\\x89|\\xaa\\x85\\xe4@\\xd2T\\xa4\\xd4\\xa99G,\\xae\\x0b\\x01\\xe4\\xf9\\xae\\x87\\xdc\\xb1\\xe3,&[bU\\xbc\\x96\\x02O\\x14\\xe8\\xe5\\x16*\\x1d\\xceJ\\r\\x96\\xc5)(\\x87\\xebvcd.I\\xe1e\\x11\\x1a{7\\xa0T@N\\x15\\xe6\\xa8\\xc95\\xf26\\xe3\\xa6\\xd4dW\\xbbZ\\xa0\\xe3V6\\xf7\\x1a,\\xb5\\xf8\\xb1D\\xcd\\xf7*\\xefB\\x93L%\\xda\\x1d\\xe4 /\\x14\\xeeKT\\xc8\\tEx\\xf5\\x1cW3\\xe9\\x88\\xc5\\xb7w\\x9e1\\xa5\\xe5{!A\\xa2\\xf0\\r\\xe4{\\xa4\\xd4\\xf2?\\x83e\\xc8b\\x12\\xf2\\xd8~1G\\xb2\\xd2\\xa7r\\xfb\\xc0>x\\x16&2\\x0bWzm\\x96`&u\\xadf\\xd1\\xe8\\xe8\\xb0\\x1b\\xf5#\\x9f,_\\xf89\\xe0;\\xe4\\xc6\\x8a\\xda\\x06\\xaf\\'p\\xd1\\xf5\\xe7U\\xd4\\xf3\\x1a\\xd4\\xb5\\r6^H\\r\\xf1\\xc1\\xf8\\xed4>\\xb817\\x81\\xba\\xf6\\xa6<\\xf5\\x92\\x85\\x80A\\x0b\\x14;\\x8bxO\\x168\\xcd!\\xdbN\\xa5J\\x8c\\xc5\\x836\\xcb\\xac)\\x8b@4\\xda%\\xfa\\x14\\xd9(\\xea\"$\\xd8\\xeb\\x0c\\x8f\\x10:\\x03L\\xa03\\x1a\\xf6\\x87\\x1d1\\xe2G\\x83\\xb4\\x1bE\"\\x19\\xf9\\x97t\\xed\\xe7\\xef\\x9f_\\x9b\\x1f\\x8fq\\xe5g\\xf3\\xf8\\xed\\xe9\\xe7\\xe7\\xcd\\xd7/O\\xbf\\xbf{A\\x01\\xd6\\x0fb*\\xc2\\xaaXtd\\xec>GK\\xcfb\\r?X\\xdfUZo\\xd1-\\xe6\\xab\\xa2^3\\x929\\x9eY/\\xbfB\"\\xa9\\xc3\\x06\\xf3\\x05\\xf2\\xe5{Pr\\xffS\\x05\\x8e.\\x93*\\xe9A]\\xd4\\r\\x98\\xaaP\\xb4\\x9f\\xc2\";o\\xcc$\\xee\\xcc\\x9a\\xdcS\\xbdn/\\xf2\\x01\\x1f\\xd6\\xe0\\x15\\x81\\xa5cz\\x86\\xcfM\\r\\xf5\\x1b\\xa8@+\\x8dh\\xba\\x17U\\xf7\\xd0n\\xbd\\xfe\\x07PK\\x07\\x08\n\\xe6\\x85k\\x0f\\x02\\x00\\x00q\\x03\\x00\\x00\n</code></pre>\n <p>\n  Looks like zip format with PK\\x03\\x04 and PK\\x07\\x08 (unusual). Failed to extract with normal zip lib because of missing PK\\x06\\x07. I assume the raw data would be a string text, not a file.\n </p>\n <p>\n  After searched I found someone got similar format from MS Graph API:\n  <a href=\"https://learn.microsoft.com/en-us/answers/questions/767209/how-can-i-use-one-drive-file-content-into-my-code\" rel=\"nofollow noreferrer\">\n   https://learn.microsoft.com/en-us/answers/questions/767209/how-can-i-use-one-drive-file-content-into-my-code\n  </a>\n </p>\n <p>\n  I can provide more data if you need, like:\n </p>\n <pre><code>UEsDBBQACAgIAO52Y1oAAAAAAAAAAAAAAAABAAAAMGVSTWvbQBD1ub8iLPRmg+SPxtYtsWMakjShcQohhDLaHcmLV7vq7qjEGN9z6KHQ3tq/UHrtJf+mye/oauXYheg2772defM0R5PD1qtWq7VieFcaS2OjM5mzZMUEZlApOgWdV5AjSxjXrM2EdKWC5ZkRNSSKYy0kB5KmJqXOzAlieVUKIM9HHnIHjrOEbIV18VYKPFSgFw20bm/mziQpPC9DHz8clArIkcICNTmWZKCc78BNpckut7VAx63cvNtgmcVPFWq+U/mhmmQm0W4hB0WpcFeiQk4owtQTXJ5KRyy5ufWMqSzfCQlShe+g2CGVlv8ZrMLqk7B+gPyKBZKVPoSbFfvoWZjIPDzptlmKudSNmsWj4X4U92IfJJ/72PE9cmNFY4M3gZ9F/nsTd70GdWODjedSQ7I3vjhO9q7NdaCuvClPvWYhYNACxdYi3pEFTjPIn/9LnRhL+m2WW1OVgdhoF+hTZKM4Qkix2xkMETp9TKEzGvQGHTHiw34WxbFIR36Sbvz8/fPr8cdDUvt5fPj29PP+8euXp9/fvcCiI2PxeaylF0EGz+vbWupNuflsWTZ3RLLAqfXySySSOpwonyNffAAld7spcHSe1tn2m6JpwFSNov0cLtV5KyZ1U2sKT3Wjbuwj3W/ASwJLB/QCn5kG6m2gEq00YtO9pGml1EWA2Hr9D1BLBwjqXNTEBAIAAFUDAAA=\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "151",
    "tags": [
        "file-format",
        "unpacking"
    ],
    "user": "Hanwei Tang",
    "time": "Mar 4 at 9:49",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n There are two ways to read a ZIP file. 1. use the ZIP central directory from the end (most ZIP tools use this way) 2. process the ZIP stream and each entry one-by-one. The second method should work for your data. Most programming languages have a zip stream implementation, e.g. java\n <code>\n  ZipInputStream\n </code>\n . Not sure about other languages.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<html><body><span class=\"comment-copy\">\n PK\\x03\\x04 is in\n <a href=\"https://support.pkware.com/pkzip/application-note-archives\" rel=\"nofollow noreferrer\">\n  the ZIP appnote\n </a>\n as \"local file header\". (It's there as 0x04034b50 which becomes PK\\x03\\x04 when stored as little-endian.)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Hanwei Tang",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert thank you, Java\n <code>\n  ZipInputStream\n </code>\n really works on it!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  your file appears to be spanned or multipart but it is not so\nbased on this conflict   description in PKWARE doc\n </p>\n <blockquote>\n  <p>\n   8.5.5 The signature value 0x08074b50 is also used by some\nZIP implementations as a marker for the Data Descriptor\nrecord.  Conflict in this alternate assignment can be\navoided by ensuring the position of the signature\nwithin the ZIP file to determine the use for which it\nis intended.\n  </p>\n </blockquote>\n <p>\n  the  checksum\n  <strong>\n   0A E6 85 6B\n  </strong>\n  \n\n  compressed size\n  <strong>\n   0F 02 00 00\n  </strong>\n  \n\n  uncompressed size\n  <strong>\n   71 03 00 00\n  </strong>\n  \n\n  are on the data descriptor with signature PK0708  at the end of file\n </p>\n <p>\n  the file starts with a local header as follows\n </p>\n <pre><code>00000000: 504b 0304                                PK.. signature \n00000004: 1400                                     ..   version \n00000006: 0808                                     ..   flags \n00000008: 0800                                     ..   type\n0000000a: d176                                     .v   time   14:54:34\n0000000c: 635a                                     cZ   date    03-03-2025\n0000000e: 0000 0000                                .... checksum\n00000012: 0000 0000                                .... comp size\n00000016: 0000 0000                                .... decomp size\n0000001a: 0100                                     ..   file name len\n0000001c: 0000                                     ..   extra field len\n</code></pre>\n <p>\n  since bit 3 is set the checksum , comp size , and uncomp size are 0  and are entered in the data descriptor record as stated above\n </p>\n <p>\n  the compressed data starts at 0x1f after file name of length 1 \"0\"\nand ends at 0x22d which matches the compressed data size\n </p>\n <p>\n  using this python script and running 7z as subprocess\n </p>\n <pre><code>import base64\nimport subprocess\nfin = open(\"b64in.txt\" , \"rb\")\nfou = open(\"b64ou\" , \"wb\")\nbase64.decode(fin,fou)\nfin.close()\nfou.close()\nsubprocess.run(['7z','x','b64ou'])\n</code></pre>\n <p>\n  the data can be successfully decompressed  as follows\n </p>\n <pre><code>EDB \n   {\"exportConfig\":{\"defaultLanguage\":\"cn\",\"displayMode\":\"dmIndication\",\"infoKeepUpdate\":0,\"isAsc\":true,\"isHideBlank\":true,\"useLunar\":false},\"exportTitleOption\":{\"allTitleElements\":false,\"country\":false,\"description\":false,\"frequency\":false,\"identifier\":false,\"sample\":false,\"selectedTitleKeyList\":[],\"source\":false,\"tableName\":false,\"units\":false,\"updateDate\":false},\"metric\":[{\"_dataDigits\":2,\"beginDate\":\"19870131\",\"changeRecord\":[],\"code\":\"M0000612\",\"enName\":\"China: CPI: YoY\",\"enUnit\":\"%\",\"expanded\":false,\"extractTag\":true,\"freq\":4,\"groupTag\":false,\"key\":\"910eabe2-58ea-4eba-9535-d9c84f011db9\",\"name\":\"中国:CPI:当月同比\",\"parentId\":0,\"restore\":false,\"rtName\":false,\"unit\":\"%\"}],\"refreshType\":0,\"timeFrameSetting\":{\"checkValid\":false,\"lastObs\":24,\"lastType\":\"ltObservations\",\"obsFrom\":\"20210617\",\"obsStartAt\":\"20210617\",\"obsTo\":\"20230617\",\"periodType\":\"ptObsFrom\"}}\n</code></pre>\n <p>\n  the uncompressed size is 881 or 0x371 which matches the dd record and checksum also matches\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/lGYsAea9.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/lGYsAea9.png\"/>\n  </a>\n </p>\n <p>\n  the difference between the first data stream and the 2nd data stream as follows\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/o5fgGzA4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/o5fgGzA4.png\"/>\n  </a>\n </p>\n <p>\n  to answer the comment zlib doesnt seem to work\n </p>\n <p>\n  rip the compressed data without the headers or trailer\nin this case the bytes from 0x1f to 0x22d == the size of compressed data 0x20f and pass it to zlib.decompress with wbits = -15\n </p>\n <pre><code>:\\>xxd -l 0x10 RAW_COMPRESSED_BLOB\n00000000: 6552 4d6f 1331 10cd 995f 5159 e296 48d9  eRMo.1..._QY..H.\n\n:\\>xxd -l 0x10 -s 0x200 RAW_COMPRESSED_BLOB\n00000200: 1ba8 402b 8d68 ba17 55f7 d06e bdfe 07    ..@+.h..U..n...\n</code></pre>\n <p>\n  then pass the data to zlib.decompress()\n </p>\n <pre><code>>>> import zlib;zlib.decompress(open(\"raw_compressed_blob\",\"rb\").read(),wbits=-15)\n\nb'EDB\\x00\n\\x00\\x00\\x00{\"exportConfig\":{\"defaultLanguage\":\"cn\",\"displayMode\":\"dmIndication\",\"infoKeepUpdate\":0,\"isAsc\":t\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Mar 5 at 19:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Hanwei Tang",
                    "text": "<span class=\"comment-copy\">Thank you very much. I found <code>ZipInputStream</code> in Java can successfully extract this data (Thanks @Robert ), but <code>zlib</code> and <code>zipfile</code> in Python can't. Finally I found <a href=\"https://pypi.org/project/stream-unzip/\" rel=\"nofollow noreferrer\">pypi.org/project/stream-unzip</a> works for this.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@HanweiTang zlib with wbits=-15 should work for raw data ripped without headers or trailers ie the the bytes from 0x1f to 0x22d edited  my answer to include this</span>",
                    "time": null
                }
            ]
        }
    ]
}