{
    "title": "Why is there in a nop in the while loop",
    "link": "https://reverseengineering.stackexchange.com/questions/2876/why-is-there-in-a-nop-in-the-while-loop",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I have the following C code I wrote:\n </p>\n <pre><code>#include <stdio.h>\n\n\nint main() {\n    int i = 1;\n\n    while(i) {\n        printf(\"in loop\n\");\n        i++;\n\n        if(i == 10) {\n            break;\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n <p>\n  Compiled with gcc (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 it disassembles to this:\n </p>\n <pre><code>   0x000000000040051c <+0>: push   %rbp\n   0x000000000040051d <+1>: mov    %rsp,%rbp\n   0x0000000000400520 <+4>: sub    $0x10,%rsp\n   0x0000000000400524 <+8>: movl   $0x1,-0x4(%rbp)\n   0x000000000040052b <+15>:    jmp    0x400541 <main+37>\n   0x000000000040052d <+17>:    mov    $0x400604,%edi\n   0x0000000000400532 <+22>:    callq  0x4003f0 <puts@plt>\n   0x0000000000400537 <+27>:    addl   $0x1,-0x4(%rbp)\n   0x000000000040053b <+31>:    cmpl   $0xa,-0x4(%rbp)\n   0x000000000040053f <+35>:    je     0x400549 <main+45>\n   0x0000000000400541 <+37>:    cmpl   $0x0,-0x4(%rbp)\n   0x0000000000400545 <+41>:    jne    0x40052d <main+17>\n   0x0000000000400547 <+43>:    jmp    0x40054a <main+46>\n   0x0000000000400549 <+45>:    nop\n   0x000000000040054a <+46>:    mov    $0x0,%eax\n   0x000000000040054f <+51>:    leaveq \n   0x0000000000400550 <+52>:    retq  \n</code></pre>\n <p>\n  Why is there a\n  <code>\n   nop\n  </code>\n  on +45? And why does not\n  <code>\n   je\n  </code>\n  on +35 just jump right to +46?\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly"
    ],
    "user": "Sindre Smistad",
    "time": "Oct 3, 2013 at 22:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It might be for function alignment. As it is now it returns on\n  <code>\n   0x400550\n  </code>\n  , which can be divided by 8. If it returned on\n  <code>\n   0x40054f\n  </code>\n  it isn't aligned. Just a speculation, though.\n </p>\n</div>\n</body></html>",
            "votes": "15",
            "user": "perror",
            "time": "Oct 13, 2013 at 8:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sindre Smistad",
                    "text": "<span class=\"comment-copy\">I Googled function alignment and found <a href=\"http://stackoverflow.com/questions/7912464/why-does-gcc-pad-functions-with-nops\">this</a> post on SO, and it seems to answer my question in some more detail. Thank you for your help.</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Sorry, I'm not convinced this is <i>function</i> alignment. This only applies to function starts, not ends. It's not <code>-falign-labels</code> either (there is a <code>nop</code> inserted as per <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options\" rel=\"nofollow noreferrer\">description of <code>falign-labels</code></a> but the adjusted address is not used). I rather think this is caused by the compiler reserving some bytes for longer representation of opcodes and not cleaned up.</span>",
                    "time": null
                },
                {
                    "user": "microtherion",
                    "text": "<span class=\"comment-copy\">Yes, this just appears to be unoptimized code. Try comparing the code generated by <code>-O3</code> or <code>-Os</code> to the code generated by <code>-O0</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Most microprocessors fetch code in aligned 16-byte or 32-byte blocks.\n  If an important subroutine entry or jump label happens to be near the\n  end of a 16-byte block then the microprocessor will only get a few\n  useful bytes of code when fetching that block of code. It may have to\n  fetch the next 16 bytes too before it can decode the first\n  instructions after the label. This can be avoided by aligning\n  important subroutine entries and loop entries by 16. Aligning by 8\n  will assure that at least 8 bytes of code can be loaded with the first\n  instruction fetch, which may be sufficient if the instructions are\n  small.\n  </p>\n </blockquote>\n <p>\n  via Optimizing subroutines in assembly language by Agner Fog.\n  <a href=\"http://www.agner.org/optimize/optimizing_assembly.pdf\" rel=\"nofollow\">\n   PDF\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "alexanderh",
            "time": "Oct 18, 2013 at 22:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Can you point out this better alignment in the OP's disassembly? I don't get why the <code>nop</code>s place would be an improvement.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Another reason for NOP insertion is due to pipeline scheduling. If it takes a cycle for branch prediction to determine whether it was correct or not (and if not to flush the pipe), then you'd need a cycle delay before results are committed to registers.\n </p>\n <p>\n  Regarding the specific example where the jump equal goes to a NOP, it appears to me that the processor needs a cycle to determine whether it got the right answer or not and adjust the pipe as necessary.\n </p>\n <p>\n  Great job digging in to the code and understanding what is going on. :)\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "bitsdanceforme",
            "time": "Mar 19, 2014 at 16:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}