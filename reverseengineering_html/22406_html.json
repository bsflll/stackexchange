{
    "title": "Multiple memory regions mapped to same data",
    "link": "https://reverseengineering.stackexchange.com/questions/22406/multiple-memory-regions-mapped-to-same-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm analyzing a Seagate HDD that provides a serial boot console that allows reading/writing bytes to memory and setting an address pointer.\n </p>\n <p>\n  There's a block of memory from\n  <code>\n   0x0\n  </code>\n  to\n  <code>\n   0x20000\n  </code>\n  and then it\n  <em>\n   repeats\n  </em>\n  all the way to\n  <code>\n   0x100000\n  </code>\n  . This isn't just a copy - if I write a byte to\n  <code>\n   0x20000\n  </code>\n  or\n  <code>\n   0x40000\n  </code>\n  the data at location\n  <code>\n   0x0\n  </code>\n  also changes. At\n  <code>\n   0x100000\n  </code>\n  there's another\n  <code>\n   128k\n  </code>\n  block that is mirrored over and over until\n  <code>\n   0x200000\n  </code>\n  . From\n  <code>\n   0x400000\n  </code>\n  the first block of memory is mirrored again and again.\n </p>\n <p>\n  Here's a map:\n </p>\n <pre><code>1) 0x000000 - 0x020000\n*) (mirrors of block 1)\n2) 0x100000 - 0x120000\n*) (mirrors of block 2)\n3) 0x200000 - 0x300000\n4) 0x300000 - 0x400000\n*) (mirrors of block 1)\n</code></pre>\n <p>\n  The\n  <code>\n   MCU\n  </code>\n  is some kind of\n  <code>\n   ARM\n  </code>\n  processor. Is this some hardware memory-mapping feature of\n  <code>\n   ARM\n  </code>\n  , is it setup by the\n  <code>\n   OS\n  </code>\n  , or something else?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "54",
    "tags": [
        "firmware",
        "memory"
    ],
    "user": "Reinstate Monica",
    "time": "Oct 28, 2019 at 7:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The block selection logic just looks at the 4 most significant bits of the address, this is easily implemented by a multiplexer whose outputs feed into the enable pin of each memory chip. An 3 bit multiplexer and an OR gate (if active high) is enough to implement this scheme.\n </p>\n <p>\n  The mirroring within a block happens by not connecting the next set of significant bits to the memory chip, (likely because it just doesn't have the address space).\n </p>\n <p>\n  tl;dr it's a hardware memory map based on how the controller and memory chips are connected on the PCB. And it's something that needs a redesign to adjust.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "ratchet freak",
            "time": "Oct 28, 2019 at 15:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">It's probably worth mentioning that this is called partial address decoding.</span>",
                    "time": null
                }
            ]
        }
    ]
}