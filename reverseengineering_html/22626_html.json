{
    "title": "What are some useful strategies for understanding undocumented assembly language?",
    "link": "https://reverseengineering.stackexchange.com/questions/22626/what-are-some-useful-strategies-for-understanding-undocumented-assembly-language",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What are some useful strategies for tackling a list of undocumented assembly language instructions? Even as someone who writes assembly code, I find it to be challenging at times to understand someone\n  <em>\n   else's\n  </em>\n  code because the nature of assembly language means mentally having to keep track of CPU state at various points during the program. I've seen some success with getting a notepad and a pen and working through the program by hand. What are some other strategies? Let's take for example this function:\n </p>\n <pre><code> ; cmp     edx,10\n       ; jae     internal_error\n    push    ebx ecx\n    push    eax\n    mov    ebx,eax\n    mov    ecx,edx\n    shld    edx,eax,2\n    sub    ebx,edx\n    sbb    ecx,0\n    mov    eax,ebx\n    mov    ebx,1999999Ah\n    mul    ebx\n    mov    eax,ecx\n    imul    eax,ebx\n    add    eax,edx\n    pop    edx\n    imul    ecx,eax,10\n    sub    edx,ecx\n    cmp    edx,10\n    jb    somewhere\n    sub    edx,10\n    inc    eax\n    pop    ecx ebx\n    retn\n</code></pre>\n <p>\n  Due to the nature of assembly language, it is not immediately apparent \"what this code actually does\" at a high level. To me, the process of understanding this is true \"reverse engineering\" but it doesn't necessarily need to apply to reading from a disassembler, it could just be someone else's assembler source code as well. In fact, sometimes without the help of IDA Pro or Binary Ninja disassembling a binary written in a HLL, reverse engineering assembly written in aassembly is more difficult.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "156",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "the_endian",
    "time": "Nov 27, 2019 at 1:34",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n push ebx ecx ?? is that typo\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb no this is not a disassembled program, it's a flat assembler program.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My strategy is:\n </p>\n <ul>\n  <li>\n   <p>\n    not to be ashamed to use decompilers\n   </p>\n  </li>\n  <li>\n   <p>\n    don't spend time on understanding each instruction. Analyzing which result the code gives with various input data is a much faster way to understand, what the function does as a whole.\n   </p>\n  </li>\n  <li>\n   <p>\n    google for \"magic constant 0x1999999A\" and look at the fourth result\n   </p>\n  </li>\n  <li>\n   <p>\n    enable autocomments in IDA\n   </p>\n  </li>\n </ul>\n <p>\n  p.s. if you need to write down what each instruction does, you're either don't have the proper tools, or doing reversing wrong.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Anton Kukoba",
            "time": "Nov 27, 2019 at 11:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}