{
    "title": "windbg shows different instruction at address when you set the breakpoints in 2 different breaks but not the same break (nvd3d9wrapx thunk in user32)",
    "link": "https://reverseengineering.stackexchange.com/questions/30596/windbg-shows-different-instruction-at-address-when-you-set-the-breakpoints-in-2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the first example I only set a breakpoint on\n  <code>\n   user32!CreateWindowExW\n  </code>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/gj71A.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/gj71A.png\"/>\n  </a>\n </p>\n <p>\n  In the second example, I set 2 breakpoints at the same time on\n  <code>\n   user32!CreateWindowExW\n  </code>\n  and\n  <code>\n   notepad!WinMain\n  </code>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/dfUzN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dfUzN.png\"/>\n  </a>\n </p>\n <p>\n  In the 3rd example I place a breakpoint on\n  <code>\n   notepad!WinMain\n  </code>\n  , wait for it to break, and then I place the breakpoint on\n  <code>\n   user32!CreateWindowExW\n  </code>\n  , and this time it shows the jump instruction.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/LDDCy.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/LDDCy.png\"/>\n  </a>\n </p>\n <p>\n  I confirmed that it does indeed jump to that address by stepping through, and I confirmed that the jump isn't there in the first 2 examples by unassembling as well as stepping to the next instruction. The callstack is identical in all 3 scenarios.\n </p>\n <p>\n  It reproduces every time. This is Windows 7 btw Windbg x64 10.0\n </p>\n <p>\n  What is going on ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "100",
    "tags": [
        "windows",
        "windbg"
    ],
    "user": "Lewis Kelsey",
    "time": "Jul 5, 2022 at 11:47",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n what's mapped at this\n <code>\n  0x6fff00340\n </code>\n address? This looks like some hooking and\n <code>\n  jmp\n </code>\n trampoline\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Lewis Kelsey",
            "text": "<html><body><span class=\"comment-copy\">\n @PawełŁukasik from !address: + 06fff0000 070000000 000010000 MEM_PRIVATE MEM_COMMIT PAGE_EXECUTE_READ <unknown> [dtrR............]. It's clearly some trampoline block allocated by the nvd3d9wrapx  because it then injects the jump instruction to the trampoline but I do not know why windbg is behaving like that\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Lewis Kelsey",
            "text": "<html><body><span class=\"comment-copy\">\n It's not a trampoline function exactly. What it jumps to is just a single rip-relative memory indirect jump to an address, the address is stored with it. This is an address of a procedure  loc_7FEFA2C3E40 in nvd3d9wrapx that I haven't got the symbols for\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}