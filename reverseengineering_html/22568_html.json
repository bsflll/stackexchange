{
    "title": "jmp to 4 byte address in shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/22568/jmp-to-4-byte-address-in-shellcode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm playing around with the PE header and the Import Address Table. I wrote a dummy program that calls\n  <code>\n   MessageBoxA\n  </code>\n  with some retard parameters. After successfully replacing the\n  <code>\n   MessageBoxA\n  </code>\n  function address with an address inside a cave with\n  <code>\n   PAGE_EXECUTE_READWRITE\n  </code>\n  access, I tried running the program. The shellcode is just messing with the pushed arguments and afterwards it's jumping to the original\n  <code>\n   MessageBoxA\n  </code>\n  function address.\n </p>\n <p>\n  If the address is\n  <code>\n   75FD0CD0\n  </code>\n  then the Little Endian representation would be\n  <code>\n   D00CFD75\n  </code>\n  , right?\n </p>\n <p>\n  After running it and the program successfully calling the code inside the cave, it would crash. I opened Cheat Engine to compare the values. The instruction that was supposed to jump to the\n  <code>\n   MessageBoxA\n  </code>\n  function was showing a jump to a different function. After opening the edit option, the instruction was:\n  <code>\n   jmp 76552F20\n  </code>\n  instead of\n  <code>\n   jmp 75FD0CD0\n  </code>\n  . I edited that and put the correct address inside and the bytes that were written were\n  <code>\n   80EAA475\n  </code>\n  which was somehow pointing to the\n  <code>\n   MessageBoxA\n  </code>\n  function.\n </p>\n <p>\n  How did Cheat Engine get\n  <code>\n   80EAA475\n  </code>\n  from\n  <code>\n   75FD0CD0\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "288",
    "tags": [
        "assembly",
        "pe32"
    ],
    "user": "LaurentiuS",
    "time": "Nov 18, 2019 at 4:17",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Can you also show what were the exact opcodes of the instruction that you and cheat engine wrote?\n <code>\n  jmp\n </code>\n is usually relative to current\n <code>\n  rip\n </code>\n . e.g\n <code>\n  eb08\n </code>\n disassembles to\n <code>\n  jmp 0xa\n </code>\n i.e. jump 10(8+2(size of instruction)) if the base address is 0.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "LaurentiuS",
            "text": "<html><body><span class=\"comment-copy\">\n @sudhackar You're right. The\n <code>\n  EIP\n </code>\n is currently\n <code>\n  0x008A224B\n </code>\n and the address\n <code>\n  0x75CB0CD0\n </code>\n =>\n <code>\n  0x75CB0CD0-0x008A224B-0x5\n </code>\n and it gives\n <code>\n  0x7540ea80\n </code>\n , which is exactly what CE formatted. Thanks\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Anton Kukoba",
            "text": "<html><body><span class=\"comment-copy\">\n Do you take into account ASLR? Do you generate your jump according to the USER32.DLL current address, or just hope that next time the process starts the offset will be the same?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "LaurentiuS",
            "text": "<html><body><span class=\"comment-copy\">\n @AntonKukoba Yes. I get the base from\n <code>\n  PEB\n </code>\n , halt the process on entry with\n <code>\n  jmp -2\n </code>\n so that the loader can fill the\n <code>\n  LDR\n </code>\n structure (where I get the base of modules), parse the IAT and get the absolute function address.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}