{
    "title": "Help reversing code which uses ATL::CStringT",
    "link": "https://reverseengineering.stackexchange.com/questions/17873/help-reversing-code-which-uses-atlcstringt",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm attempting to learn reversing techniques using IDA on an exe built with VC/MFC, and could use a little initial help learning some patterns for simplifying the decompiled code.\n </p>\n <p>\n  IDA found approximately 30K subroutines in my exe, and they make heavy use of the CString class, so that seems like a good place to start. I've read a lot of IDA tutorials and articles, but haven't found anything that covers this specifically.\n </p>\n <p>\n  Here's a relatively simple example, unmodified by me:\n </p>\n <pre><code>void __cdecl sub_428258(int a1, int a2, int a3)\n{\n  int v3; // esi\n  int v4; // eax\n  int v5; // eax\n  char v6; // [esp+10h] [ebp-10h]\n  int v7; // [esp+1Ch] [ebp-4h]\n\n  v7 = 0;\n  v3 = ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::ReverseFind(&a1, 92);// Find '\\'\n  if ( v3 < 0\n    && (v3 = ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::ReverseFind(&a1, 47), v3 < 0) )// Find '/'\n  {\n    ATL::CSimpleStringT<wchar_t,1>::Empty(a2);\n    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::operator=(a3, &a1);// Return empty string in a3\n  }\n  else\n  {\n    v4 = ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::Left(&a1, &v6, v3);\n    LOBYTE(v7) = 1;\n    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::operator=(a2, v4);\n    LOBYTE(v7) = 0;\n    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&v6);\n    v5 = ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::Right(\n           &a1,\n           &v6,\n           *(_DWORD *)(a1 - 12) - v3 - 1);\n    LOBYTE(v7) = 2;\n    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::operator=(a3, v5);\n    LOBYTE(v7) = 0;\n    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&v6);\n  }\n  v7 = -1;\n  ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&a1);\n}\n</code></pre>\n <p>\n  Because IDA was able to use the MFC PDB file and RTTI, the logic is pretty easy to follow in this case. It seems to be doing something like splitting the first CString param on '\\' or '/', and returning the split strings in the second and third CString params, i.e.:\n </p>\n <pre><code>void Split(CString source, CString &left, CString &right);\n</code></pre>\n <p>\n  Questions:\n </p>\n <ol>\n  <li>\n   Is this likely a class member function, and if so, how do you know?\n  </li>\n  <li>\n   Why is V7 being set before each call to the CString functions?\n  </li>\n  <li>\n   What is \"*(_DWORD *)(a1 - 12) - v3 - 1\" doing?\n  </li>\n  <li>\n   Is there a way to tell IDA to just use \"CString\" instead of the fully expanded type?\n  </li>\n  <li>\n   Can I define a CString struct to help simplify the code?\n  </li>\n </ol>\n <p>\n  My guess is that it\n  <em>\n   is\n  </em>\n  a member function, and that the answers to #2 and #3 have to do with the class definition, but I'm just not sure. An example of the simplified code would really help.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "c++",
        "msvc",
        "mfc"
    ],
    "user": "Chris Olsen",
    "time": "Apr 2, 2018 at 15:47",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n It might be helpful to know that a CString is a struct with a single pointer in it (it points to the string directly, but in front of it there is extra data). The decompiler doesn’t deal with this nicely at all. Defining the struct can be done but you won’t get much better output other than better CString in front of the casts.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n Oh and I think V7 is used for exception handling (detection of which state the program is in). I’ll write a full answer later.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   to know that, it's better to look at assembler, not pseudocode. If there's an argument passed to sub_428258 through ECX, most likely yes, this should be a method of some class.\n  </li>\n  <li>\n   maybe error code, which should be returned by the function. I.e. current function definition might be wrong. Can't tell without seeing the assembler.\n  </li>\n  <li>\n   seems like it's accessing to some member of the class, pointer to which is stored in a1, so I suppose it's something in ATLString.\n  </li>\n  <li>\n   if I understand it correct, those long names - are imported functions, so IDA just demangles and shows the names as is. You may only rename them manually.\n  </li>\n  <li>\n   Yes, it would help you with 3.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Apr 5, 2018 at 12:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Chris Olsen",
                    "text": "<span class=\"comment-copy\">Thanks Anton. I have learned a lot more in the 2 days since posting the question, and your answers confirm what I've learned so far. #2 is still a mystery to me, so thanks for the error code suggestion. Will check it out.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   What is \"*(_DWORD *)(a1 - 12) - v3 - 1\" doing?\n  </p>\n </blockquote>\n <p>\n  this is probably undocumented or poorly documented i don't know\n </p>\n <p>\n  these are from memory of my fiddling with this Cstring (be aware for misinterpretation from my part too )\n </p>\n <p>\n  it is trying to return you the substring after\n  <code>\n   *\\*\n  </code>\n </p>\n <p>\n  the Cstring when initialized is normally a part of a bigger structure or class or whatever its terminology is  you can use windbg to follow on any generic Cstring Constructor\n </p>\n <pre><code>0:000> ?? &s\nclass ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t> > > * 0x0016fb2c\n   +0x000 m_pszData        : 0x00584630  \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\"\n\n0:000> $$ your a1 is == 0x584630 \n0:000> $$ your (a1-12) is == (0x584630 - 0n12) = 0x584624 \n0:000> $$ it is accessing the length of cstring->m_pszData because it is a part of bigger structure \n\n0:000> dt -r cstr!ATL::CNilStringData (0x584630-10)\n   +0x000 pStringMgr       : 0x56dc1578 ATL::IAtlStringMgr\n      +0x000 __VFN_table : 0x567a3458 \n   +0x004 nDataLength      : 0n69\n   +0x008 nAllocLength     : 0n69\n   +0x00c nRefs            : 0n1\n   +0x010 achNil           : [2]  \"C:\"\n\n0:000> $$ CNilStringData is also a part of bigger struct/class but not relevent to present discussion\n\n0:000> ??  (wchar_t *)(( cstr!ATL::CNilStringData *) @@(0x584630-10))->achNil\nwchar_t * 0x00584630\n \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\"\n\n0:000> ??  (wchar_t *)(( cstr!ATL::CNilStringData *) @@(poi(s)-10))->achNil\nwchar_t * 0x00584630\n \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\"\n0:000> $$ so *(dword *) (a1-12) is accessing the nDataLength\n</code></pre>\n <p>\n  you can test with some code like this\n </p>\n <pre><code>int main()\n{\n    CString s(_T(\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2017\\\\Community\\\\Common7\\\\Tools\"));\n    CString t(_T(\"C:\\\\Program Files\"));\n    CString u(_T(\"C:\\\\Program Files\\\\Microsoft Visual Studio\"));\n    CString v(_T(\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2017\"));\n    CString w(_T(\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2017\\\\Community\"));\n    CString x(_T(\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2017\\\\Community\\\\Common7\"));\n    int found;\n    CString temp[6] = { s,t,u,v,w,x };\n    for (int i = 0; i < 6; i++) {\n        printf(\"%x\n\", wcslen(temp[i].GetBuffer()));\n        if ((found = temp[i].ReverseFind(_T('\\\\'))) != -1) {\n            printf(\"%S\n\", (LPCWSTR)temp[i].Mid(found));\n            printf(\"%S\n\", (LPCWSTR)temp[i].Right(found));\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n <p>\n  compiled and executed you would get\n </p>\n <pre><code>45\n\\Tools\ngram Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\n10\n\\Program Files\nes\n28\n\\Microsoft Visual Studio\nft Visual Studio\n2d\n\\2017\nogram Files\\Microsoft Visual Studio\\2017\n37\n\\Community\n Files\\Microsoft Visual Studio\\2017\\Community\n3f\n\\Common7\nam Files\\Microsoft Visual Studio\\2017\\Community\\Common7\nPress any key to continue . . .\n</code></pre>\n <p>\n  put the compiled exe in windbg and give it a stir\n </p>\n <pre><code>0:000> .for(r $t0=0; @$t0<6; r $t0 = @$t0+1) { dx  wcslen(temp[@$t0].m_pszData)}\nwcslen(temp[@$t0].m_pszData) : 0x45\nwcslen(temp[@$t0].m_pszData) : 0x10\nwcslen(temp[@$t0].m_pszData) : 0x28\nwcslen(temp[@$t0].m_pszData) : 0x2d\nwcslen(temp[@$t0].m_pszData) : 0x37\nwcslen(temp[@$t0].m_pszData) : 0x3f\n0:000> .for(r $t0=0; @$t0<6; r $t0 = @$t0+1) {dt cstr!ATL::CNilStringData nDataLength @@C++(*(int *)(&temp[@$t0]) - 0x10)}\n   +0x004 nDataLength : 0x45\n   +0x004 nDataLength : 0x10\n   +0x004 nDataLength : 0x28\n   +0x004 nDataLength : 0x2d\n   +0x004 nDataLength : 0x37\n   +0x004 nDataLength : 0x3f\n0:000> .for(r $t0=0; @$t0<6; r $t0 = @$t0+1) {.printf \"%mu\n\" , @@c++((wchar_t *) temp[@$t0].m_pszData)}\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\nC:\\Program Files\nC:\\Program Files\\Microsoft Visual Studio\nC:\\Program Files\\Microsoft Visual Studio\\2017\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 8, 2018 at 12:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yep, I know it would be \"necroanswer\" but still may be someone find this answer usefull.\n </p>\n <ol>\n  <li>\n   If we have suggestion that decompiler skipped an argument (especially\n   <code>\n    this\n   </code>\n   ) you can go into function and return back (then F5), IDA Pro automatically resolve it. No need to check assembler. This commonly happens when arguments passed through registers.\n  </li>\n  <li>\n   <code>\n    v7\n   </code>\n   is just compiler \"metainformation\" it's common for MSVC, for my reverse-engineer career I suggests: looks like MSVC set ups points where program goes through function. Just ignore variables like that.\n  </li>\n  <li>\n   This kinda fishy because all functions of\n   <code>\n    CStringT\n   </code>\n   called against\n   <code>\n    a1\n   </code>\n   accept\n   <code>\n    a1\n   </code>\n   with\n   <code>\n    &\n   </code>\n   . But others arguments passed into\n   <code>\n    CStringT\n   </code>\n   without\n   <code>\n    &\n   </code>\n   . This means\n   <code>\n    a2\n   </code>\n   and\n   <code>\n    a3\n   </code>\n   are\n   <code>\n    CStringT\n   </code>\n   pointers (Please see NOTE 1 below). Concerning\n   <code>\n    a1\n   </code>\n   it looks like you have parent structure with\n   <code>\n    CStringT\n   </code>\n   embedded into it. Expression\n   <code>\n    *(_DWORD *)(a1 - 12) - v3 - 1)\n   </code>\n   most likely be\n   <code>\n    PARENT(a1)->Size - v3 - 1\n   </code>\n   in source code. Where PARENT is a macros returning parent of some variable and\n   <code>\n    a1\n   </code>\n   some struct containing\n   <code>\n    CStringT\n   </code>\n   . Something like that:\n  </li>\n </ol>\n <pre class=\"lang-cpp prettyprint-override\"><code>struct Container {\n    int Size;\n    int Unk0;\n    int Unk1;\n    CStringT String;  // <- a1 points here and CStringT here not a pointer but a part of structure\n    // other fields\n}\n</code></pre>\n <p>\n  It's also commonly used practice. You could mitigate it in reverse pseudocode with\n  <a href=\"https://hex-rays.com/products/ida/support/idadoc/1695.shtml\" rel=\"nofollow noreferrer\">\n   shifted pointers\n  </a>\n </p>\n <p>\n  Also some words about\n  <code>\n   v6\n  </code>\n  - it's also a\n  <code>\n   CStringT\n  </code>\n  and because type haven't been defined for it, IDA Pro showed incorrect stack and I suppose other fields present there:\n </p>\n <pre><code>char v6; // [esp+10h] [ebp-10h]\nint v7; // [esp+1Ch] [ebp-4h]\n</code></pre>\n <p>\n  You could notice\n  <code>\n   v6\n  </code>\n  passed with\n  <code>\n   &\n  </code>\n  - it means\n  <code>\n   CStringT\n  </code>\n  for\n  <code>\n   v6\n  </code>\n  allocated in stack and not a pointer.\n </p>\n <ol start=\"4\">\n  <li>\n   <p>\n    You could rename it to just\n    <code>\n     CString\n    </code>\n    but you lose information and in program can be other\n    <code>\n     CString\n    </code>\n    templated function. I'd rather said it is quite bad practice to rename \"purple\" functions. But in some case IDA Pro can goes mad then, yep it required :)\n   </p>\n  </li>\n  <li>\n   <p>\n    See NOTE 1, if you have to reverse-engineer quite a large program (may be also not large)\n    <strong>\n     you must define structures and names\n    </strong>\n    . Otherwise you will look just at mess.\n   </p>\n  </li>\n </ol>\n <p>\n  NOTE 1: For nice and accurate reverse-engineering you should always set types (otherwise you always be in mess). If you not sure for now how type is look likes you could just set it as\n  <code>\n   struct CStringT\n  </code>\n  (\n  <code>\n   struct\n  </code>\n  is necessary!). For IDA Pro it like\n  <code>\n   void*\n  </code>\n  but you note actual type and when\n  <code>\n   CStringT\n  </code>\n  structure will be created IDA Pro substitute it.\n </p>\n <p>\n  NOTE 2: Using assembler for reverse-engineering at state of art of IDA Pro decompile is mostly unnecessary. Yeap, IDA Pro have errors and we need to fix them in assembler (for example \"immediates\" instead of \"addresses\" for PPC) and also layout firmware into database, etc. But mostly you should use power of decompiler; programs nowaday too large and complex to fiddling with assembler instructions.\nNOTE 3: Yep, you need reverse-engineering to find out another comp\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mblw",
            "time": "Jun 5, 2023 at 8:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}