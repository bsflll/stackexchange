{
    "title": "How to execute gum functions when attached to a program using Frida core",
    "link": "https://reverseengineering.stackexchange.com/questions/33223/how-to-execute-gum-functions-when-attached-to-a-program-using-frida-core",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using frida-core to attach to a program and execute js code.\n </p>\n <p>\n  I would like to use\n  <code>\n   gum\n  </code>\n  functions and get results in the attached program's pid.\nAny way to accomplish this once I'm attached to the program via\n  <code>\n   device.attach\n  </code>\n  ?\n </p>\n <p>\n  In the next code you can see I execute\n  <code>\n   frida_gum_sys::gum_process_enumerate_ranges\n  </code>\n  and I do get results, but the result is from the current process instead of the attached one, even though I'm attached to the program\n  <code>\n   let session = local_device.attach(crackme_pid).unwrap();\n  </code>\n </p>\n <pre class=\"lang-rust prettyprint-override\"><code>use std::ptr;\n\nuse frida::Frida;\nuse frida_gum_sys::{gboolean, gpointer, GumRangeDetails};\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref FRIDA: Frida = unsafe { Frida::obtain() };\n}\n\nunsafe extern \"C\" fn process_range(\n    range: *const GumRangeDetails,\n    _user_data: gpointer,\n) -> gboolean {\n    let r = &*range;\n\n    println!(\n        \"range = {:?}, protection = {:?}, file = {:?}\",\n        r.range, r.protection, r.file\n    );\n    true as gboolean // Return true to continue enumeration\n}\n\nfn main() {\n    let device_manager = frida::DeviceManager::obtain(&FRIDA);\n    let local_device = device_manager.get_local_device().unwrap();\n    let processes = local_device.enumerate_processes();\n\n    let crackme_pid: Vec<&frida::Process> = processes\n        .iter()\n        .filter(|p| p.get_name() == \"crackme-01\")\n        .collect();\n    let crackme_pid = crackme_pid.first().unwrap().get_pid();\n    let session = local_device.attach(crackme_pid).unwrap();\n\n    let script_source = r#\"\n        console.log(\"test\");\n    \"#;\n\n    let mut script_option = frida::ScriptOption::default();\n    let script = session\n        .create_script(script_source, &mut script_option)\n        .unwrap();\n\n    script.load().unwrap();\n\n    unsafe {\n        frida_gum_sys::gum_process_enumerate_ranges(1 | 2, Some(process_range), ptr::null_mut());\n    }\n\n    script.unload().unwrap();\n}\n</code></pre>\n <p>\n  I am currently using Frida rust bindings but I just need to know how to do this in any bindings.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "27",
    "tags": [
        "frida"
    ],
    "user": "Ricardo",
    "time": "Sep 14, 2024 at 15:17",
    "comments": [],
    "answers_data": []
}