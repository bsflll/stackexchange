{
    "title": "How is .NET related to Windows system calls?",
    "link": "https://reverseengineering.stackexchange.com/questions/14901/how-is-net-related-to-windows-system-calls",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My understanding is that .NET (C#) code compiles to Common Intermediate Language (CIL) code, which then (usually) gets Just-In-Time compiled to native machine code at run-time on the deployment machine in conjunction with the common language runtime.\n </p>\n <p>\n  My question is,\n  <em>\n   how does the actual work that gets done on the deployment machine at runtime relate with standard native WinAPI calls, assuming we're talking about a Win NT deployment machine?\n  </em>\n  If I were to open a .NET file in OllyDbg for example, am I going to still see system calls to ntdll and or Kernel32 showing up, coming from the JITC'd code? .NET is also\n  <em>\n   occasionally\n  </em>\n  said to be \"running in a virtual machine\" similar to Java Bytecode. But still, at the end of the day, must the program still leave a signature of system calls in memory, even though the binary itself may not be able to be viewed properly by IDA?\n </p>\n <p>\n  I've been doing research into this and for example, I found\n  <a href=\"https://en.wikipedia.org/wiki/CryptGenRandom\" rel=\"nofollow noreferrer\">\n   this article\n  </a>\n  on CryptGenRandom which is used by\n  <a href=\"https://stackoverflow.com/questions/22591882/which-psudo-random-number-generation-algorithm-does-rngcryptoserviceprovider-use\">\n   .NET's RNGCryptoServiceProvider\n  </a>\n  . However, I've never heard of anyone using a native debugger to try to view these calls from JIT'd/interpreted/VM code.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "207",
    "tags": [
        "windows",
        ".net"
    ],
    "user": "the_endian",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n Using a 'normal' debugger in .NET code is possible, but tedious: You would have to debug the highly optimized virtual environment executing (interpreting) the given CIL code. It is very(!) complex\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe I'll just have to take a look, but are there any recognizable functions that could be traced back to actual behavior patterns in the program or is it basically extremely cluttered with random calls from the VM such that recognizing any behavioral patterns is very obfuscated?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n Of course. Think about gargabe collection, JIT compiling, memory management and other functionalities of the vm. With smart heuristics, it could be possible, but still boils down to a tremendous amount of work\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "conio",
            "text": "<html><body><span class=\"comment-copy\">\n What's the real question here? \"How is .NET related to Windows system calls?\" is\n <b>\n  <i>\n   way\n  </i>\n </b>\n too broad and the answer is \"it (.NET) sometimes makes them (system calls).\" Does that help you? The answer to \"But still, at the end of the day, must the program still leave a signature of system calls in memory, even though the binary itself may not be able to be viewed properly by IDA?\" is \"yes, obviously (except for the leave part).\" Does that help you?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "conio",
            "text": "<html><body><span class=\"comment-copy\">\n If you really \"ever heard of anyone using a native debugger to try to view these calls from JIT'd/interpreted/VM code\" it just means that you didn't really look. The .NET Framework even comes with an extension for WinDbg to help debug managed code. Googling \"windbg .net\" finds stuff like\n <a href=\"https://blogs.msdn.microsoft.com/kaevans/2011/04/11/intro-to-windbg-for-net-developers/\" rel=\"nofollow noreferrer\">\n  Intro to WinDBG for .NET Developers\n </a>\n and\n <a href=\"https://docs.google.com/document/d/1yMQ8NAQZEBtsfVp7AsFLSA_MkIKlYNuSowG72_nU0ek/edit\" rel=\"nofollow noreferrer\">\n  Debugging .NET with WinDbg\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can debug .NET code with an assembly debugger of your choice, it's fun, and sometimes, the only way to spot rare and nasty issues. However you'll end up on having a lot of noise since you'll debug the virtual machine of the .NET runtime, losing what the original .NET code was intended to do.\n </p>\n <p>\n  To debug .NET code and assembly at the very same time you can use Visual Studio (provided you disable\n  <code>\n   Just My Code\n  </code>\n  and enable\n  <code>\n   Allow .NET source stepping\n  </code>\n  (or similar)).\n </p>\n <p>\n  Alternatively, you can use\n  <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-managed-code\" rel=\"nofollow noreferrer\">\n   WinDBG\n  </a>\n  with\n  <code>\n   sos\n  </code>\n  (my personal choice). This way you can see the native calls of your code, and you can also inspect the .NET code.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "the_endian",
            "time": "Jan 6, 2020 at 0:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}