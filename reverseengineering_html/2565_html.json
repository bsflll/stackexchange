{
    "title": "Trace assisted code identification?",
    "link": "https://reverseengineering.stackexchange.com/questions/2565/trace-assisted-code-identification",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on an RE project and had an idea for a tool that would help me greatly and wanted to see if it already exists.\n </p>\n <p>\n  I'd like to find a specific part of code in the binary. Searching for strings, etc is not helping much. So, I had the thought, what if I could run the program twice, once I would have the program do the thing that corresponds to the code I'm looking for, and the second time I would not perform that action.\n </p>\n <p>\n  If I had a trace of say basic blocks executed during both runs, I might be able to do a \"diff\" and use that to narrow down where the functionality lies in the binary.\n </p>\n <p>\n  Does such a tool already exist, or is there a better way to narrow down the part of code executing.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 2,
    "views": "933",
    "tags": [
        "tools",
        "debugging"
    ],
    "user": "mikeazo",
    "time": "Aug 5, 2013 at 13:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This approach is commonly called \"differential debugging\". I know of the following tools that can help with it:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.openrce.org/downloads/details/208/PaiMei-Reverse-Engineering-Framework\">\n    PaiMei\n   </a>\n   from Pedram Amini\n  </li>\n  <li>\n   <a href=\"http://code.google.com/p/mynav/\">\n    MyNav\n   </a>\n   by Joxean Koret\n  </li>\n  <li>\n   IDA's\n   <a href=\"https://www.hex-rays.com/products/ida/support/tutorials/replayer/trace_replayer.pdf\">\n    trace replayer\n   </a>\n   allows diffing two execution traces (also implemented by Joxean)\n  </li>\n  <li>\n   <a href=\"http://blog.zynamics.com/2010/01/19/binnavi-3-0-preview-improved-differential-debugging/\">\n    BinNavi\n   </a>\n   has this feature\n  </li>\n  <li>\n   <a href=\"http://dion.t-rexin.org/notes/2009/09/29/differential-reversing/\">\n    simple differ\n   </a>\n   by @dionthegod\n  </li>\n  <li>\n   <a href=\"https://brundlelab.wordpress.com/2012/08/19/small-and-cute-execution-tracer/\">\n    a script\n   </a>\n   from Carlos Garcia which uses WinAppDbg framework by Mario Vilas\n  </li>\n </ul>\n <p>\n  It's not too hard to implement something quick in any debugger that allows scriptable breakpoints:\n </p>\n <ol>\n  <li>\n   Put breakpoints on every function/basic block/instruction (depending on your preference and what the debugger allows). In the breakpoint handler, record the hit then disable/remove the breakpoint.\n  </li>\n  <li>\n   Run the program and do everything you can\n   <em>\n    except\n   </em>\n   for the part you're interested in.\n  </li>\n  <li>\n   Exit the program.\n  </li>\n  <li>\n   Change the breakpoint handler to stop execution, or record it in a separate log file.\n  </li>\n  <li>\n   Run the program again and exercise the part you need. One or more of the remaining breakpoints should hit. They will point you to the interesting code.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "Aug 1, 2013 at 18:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you may check out an ollydbg plugin\n  <code>\n   conditional branch logger\n  </code>\n </p>\n <p>\n  <a href=\"http://www.woodmann.com/collaborative/tools/index.php/Conditional_Branch_Logger\" rel=\"nofollow\">\n   http://www.woodmann.com/collaborative/tools/index.php/Conditional_Branch_Logger\n  </a>\n </p>\n <p>\n  it parses the executable for conditional branches\n  <code>\n   (je , jne .... jecxz....loopd etc)\n  </code>\n  sets logging breakpoints on them and logs the results to a txt which can be used to diff the \ndiversion in paths between two different execution scenarios\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Aug 1, 2013 at 18:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}