{
    "title": "Find Dereference And Write to Offset of Pointer",
    "link": "https://reverseengineering.stackexchange.com/questions/32956/find-dereference-and-write-to-offset-of-pointer",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to find objects within a large C++ codebase that have a function that writes to 16 bytes offset off a pointer stored in an instance variable.\n </p>\n <p>\n  So for example given the code has:\n </p>\n <pre><code>MyClass object1 = new MyClass(pointer1);\nobject1.dereferenceAndWrite16BytesOffMyPointer(); // This would dereference the instance's pointer and write to 16 bytes past that pointer\n</code></pre>\n <p>\n  I would want to detect the object1 and its targeted dereferenceAndWrite16BytesOffMyPointer function.\n </p>\n <p>\n  I tried using manual inspection of mov and other instructions with 0x16 offsets via objdump but this is difficult and time consuming. Is there a better approach?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "46",
    "tags": [
        "decompilation",
        "c++"
    ],
    "user": "098029384098",
    "time": "May 6, 2024 at 22:45",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Can you give a bit more context? Are you able to compile this codebase? Which processor and OS it is compiled for? How much time do you have for this task? For example if you're able to compile it for Linux with debug information you have pahole utility (\n <a href=\"https://linux.die.net/man/1/pahole\" rel=\"nofollow noreferrer\">\n  linux.die.net/man/1/pahole\n </a>\n ) to detect pointers in such an offset.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rotem.salinas",
            "text": "<html><body><span class=\"comment-copy\">\n Not sure if you are using IDA Pro or not, if you have access to IDA Pro you could cross-reference the pointer and then sort the list to focus on dereferences of the said pointer and then see where exactly it is being written with 16 bytes. Also, this can be done using IDAPython by enumerating the cross-references for the pointer and following the same logic.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "098029384098",
            "text": "<html><body><span class=\"comment-copy\">\n @ws pahole keeps failing and not analyzing the shared library\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "098029384098",
            "text": "<html><body><span class=\"comment-copy\">\n @rotem.salinas I will try IDAPython\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n @098029384098 Are you compiling with -g option? Pahole extracts data from debug information.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}