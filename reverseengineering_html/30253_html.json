{
    "title": "Frida hook InsertMenuItemW",
    "link": "https://reverseengineering.stackexchange.com/questions/30253/frida-hook-insertmenuitemw",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to get information about menu items in an application. Experimentally established that InsertMenuItemW is called. Thanks to the documentation, I set the number of input parameters and wrote this hook.\n </p>\n <pre><code>var InsertMenuItemW = Module.findExportByName(\"user32.dll\", \"InsertMenuItemW\");\nconst oInsertMenuItemW = new NativeFunction(InsertMenuItemW, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']);\nInterceptor.replace(oInsertMenuItemW, new NativeCallback((pathPtr, pathPtr1, pathPtr2, pathPtr3) => {\n    console.log(\" \"+pathPtr, pathPtr1, pathPtr2, pathPtr3);\n    const fd = oInsertMenuItemW(pathPtr, pathPtr1, pathPtr2, pathPtr3);\n    return fd;\n}, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']));\n</code></pre>\n <p>\n  According to the documentation, I can get information about the new menu item by calling MENUITEMINFOA. But I can't figure out how to do it with Frida.\n </p>\n <p>\n  <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitemw\" rel=\"nofollow noreferrer\">\n   https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitemw\n  </a>\n </p>\n <p>\n  <strong>\n   Question update\n  </strong>\n </p>\n <p>\n  I was advised in the comments to use Memory.alloc.\n </p>\n <p>\n  On the Internet, I found this example where the hook allows you to read downloaded files.\n </p>\n <pre><code>var pGetFileInformationByHandleEx = Module.findExportByName(\"kernel32.dll\", \"GetFileInformationByHandleEx\");\n\nvar fGetFileInformationByHandleEx = new NativeFunction(pGetFileInformationByHandleEx, \"bool\",[\"pointer\", \"uint\", \"pointer\", \"uint\"]);\n\nfunction getNameFromHandle(hFile) {\n    var lpFileInformation = Memory.alloc(0x200);\n    // 0x2 -> FILE_NAME_INFO\n    var callRes = fGetFileInformationByHandleEx(hFile, 0x2, lpFileInformation, 0x200);\n    if (callRes) {\n        console.log(\"|_ hFile: \" + (lpFileInformation.add(0x4)).readUtf16String());\n    } else {\n        console.log(\"|_ hFile: N/A\");\n    }\n}\n</code></pre>\n <p>\n  According to the documentation the third parameter (output).\n </p>\n <pre><code>BOOL GetFileInformationByHandleEx(\n  [in]  HANDLE                    hFile,\n  [in]  FILE_INFO_BY_HANDLE_CLASS FileInformationClass,\n  [out] LPVOID                    lpFileInformation,\n  [in]  DWORD                     dwBufferSize\n);\n</code></pre>\n <p>\n  in the code you can see that we are passing the third parameter:\n  <code>\n   Memory.alloc(0x200);\n  </code>\n </p>\n <pre><code>var callRes = fGetFileInformationByHandleEx(hFile, 0x2, lpFileInformation, 0x200)\n</code></pre>\n <p>\n  But according to the InsertMenuItem documentation the fourth parameter is\n  <code>\n   [in, out]\n  </code>\n </p>\n <pre><code>BOOL GetMenuItemInfoA(\n  [in]      HMENU           hmenu,\n  [in]      UINT            item,\n  [in]      BOOL            fByPosition,\n  [in, out] LPMENUITEMINFOA lpmii\n);\n</code></pre>\n <p>\n  As I understand it, we must pass the lpmi of our InsertMenuItem as the fourth parameter. But how do we get out?\n </p>\n <p>\n  <strong>\n   My current code\n  </strong>\n </p>\n <pre><code>var InsertMenuItemW = Module.findExportByName(\"user32.dll\", \"InsertMenuItemW\");\nvar GetMenuItemInfoW = Module.findExportByName(\"user32.dll\", \"GetMenuItemInfoW\");\n\n\nvar fGetMenuItemInfoW = new NativeFunction(GetMenuItemInfoW, \"bool\",[\"pointer\", \"pointer\", \"pointer\", \"pointer\"]);\nfunction getHandle(hmenu, item, fByPosition, lpmi) {\n    var lpFileInformation = lpmi || Memory.alloc(0x200);\n    var lpFileInformation2 = Memory.alloc(0x200);\n    var callRes = fGetMenuItemInfoW(hmenu, item, fByPosition, lpmi);\n    console.log(lpFileInformation2);\n    console.log(\"-----------\");\n}\nconst oInsertMenuItemW = new NativeFunction(InsertMenuItemW, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']);\nInterceptor.replace(oInsertMenuItemW, new NativeCallback((hmenu, item, fByPosition, lpmi) => {\n    \n    //call GetMenuItemInfoW\n    getHandle(hmenu, item, fByPosition, lpmi);\n    const fd = oInsertMenuItemW(hmenu, item, fByPosition, lpmi);\n    return fd;\n}, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']));\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "131",
    "tags": [
        "javascript",
        "winapi",
        "frida"
    ],
    "user": "user123",
    "time": "Apr 13, 2022 at 11:15",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n I would start by importing\n <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuiteminfoa\" rel=\"nofollow noreferrer\">\n  InsertMenuItemW\n </a>\n the same way you imported\n <code>\n  InsertMenuItemW\n </code>\n . For the out parameter you will have to allocate memory using\n <code>\n  Memory.alloc\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user123",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for the answer. Can you explain why I need to use GetMenuItemInfoA and not GetMenuItemInfoW ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n It doesn't matter which version you use. Unless your system language uses multi-byte characters you don't need to use the\n <code>\n  W\n </code>\n version. Usually handling of\n <code>\n  W\n </code>\n ide strings (UTF-16) is often more complicated. Not sure about Frida if wide strings are well supported.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert doesn't it still matter whether the applications against which you use it uses the\n <code>\n  A\n </code>\n <i>\n  or\n </i>\n the\n <code>\n  W\n </code>\n variety? I don't quite get your reasoning here. Unless you hook the underlying functionality from\n <code>\n  win32u.dll\n </code>\n (previously\n <code>\n  user32.dll\n </code>\n ) these would be different code paths. Also note: ECMAscript uses UTF-32 internally, so I'd expect UTF-16 to be no issue.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user123",
            "text": "<html><body><span class=\"comment-copy\">\n From the documentation, it's not entirely clear to me how to get out. The documentation says that the fourth parameter is both input and output. I found an example on the Internet but it does not quite fit this case. Updated the question.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}