{
    "title": "Cannot call function (properly) in C++",
    "link": "https://reverseengineering.stackexchange.com/questions/6863/cannot-call-function-properly-in-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am developing a DLL for the purpose of injecting it into a running process for a game. I've found the memory addresses to some key functions(via Immunity Debugger) and I am trying to call those functions from within' my injected DLL.\n </p>\n <p>\n  So far whenever I inject my DLL and press the hotkey combination of ALT+T, the game client stops responding and crashes. At one particular instance it showed a debug error saying: \"The process was not able to resume execution because the ESP value was changed\", or something similar.\n </p>\n <p>\n  Do I have to alter the ESP value before and after I call the process function from within' my DLL? If so, how would I do this properly.\n </p>\n <p>\n  Here is the source code of my DLL:\n </p>\n <pre><code>// Warband_Chat.cpp : Defines the exported functions for the DLL application.\n\n#include \"stdafx.h\"\n#include <windows.h> // Include the functions we are going to use like Sleep and hInstance etc...\n#include <fstream> // Allows us to work with files on the hard drive.\n#include <iostream>\n\n#define MAX_BUFFER_SIZE 300 // Maximum chat message size: 300 characters.\n#define ThreadMake(x) CreateThread(NULL,NULL,(LPTHREAD_START_ROUTINE)&x,NULL,NULL,NULL); // Makes creating threads easy, it just requires 1 parameter(the function).\nusing namespace std;\n\n// Define process(Warband) function based on its parameters and its location in memory.\ntypedef void(__cdecl* ChatFunc)(char*);\nChatFunc Chat = (ChatFunc)0x00450C60;\n\n\nwchar_t *convertCharArrayToLPCWSTR(const char* charArray)\n/* Converts a char array to a LCPWSTR string. */\n{\n    wchar_t* wString=new wchar_t[4096];\n    MultiByteToWideChar(CP_ACP, 0, charArray, -1, wString, 4096);\n    return wString;\n}\n\n\nint getkey(char x) // A function I made to get 1 key and automatically check ALT(vk_menu,0x12)\n{\n    if(GetAsyncKeyState(VK_MENU)&0x8000 && GetAsyncKeyState(x)&0x8000)//Check if we are pressing ALT and what ever is inside x\n    {\n        return 1; // if we are then return true.\n    }\n    return 0; // If the condition is not met then return false\n}\n\n\nvoid main() // the main function\n{\n    while(1) // the main loop\n    {\n        if(getkey('T')) // If we are pressing ALT + T then do\n        {\n                        ifstream file(\"chat.txt\");\n                        if (!file.is_open())\n                        {\n                                MessageBox(NULL, L\"Failed to open chat.txt. Make sure its on your root Mount & Blade: Warband folder.\", L\"Failed\", MB_OK);\n                        }\n                        else\n                        {\n                                char buffer[MAX_BUFFER_SIZE];\n                                file.getline(buffer, MAX_BUFFER_SIZE-1);\n                                Chat(buffer); // Call chat function\n                                LPCWSTR newbuffer = convertCharArrayToLPCWSTR(buffer);\n                                MessageBox(NULL, newbuffer, L\"Success\", MB_OK); // Post a message if we injected.\n                                // the L before the messages is just to tell MSVS that those are LPCTSTR characters.\n                        }\n                        file.close();\n            Sleep(20); // Sleep so we don't lag\n        }\n                Sleep(20); // no lag.\n    }\n}\n\n\nextern \"C\" // DLL Hook\n{\n    __declspec(dllexport) BOOL __stdcall DllMain(HINSTANCE hInst,DWORD reason,LPVOID lpv)\n    {\n        if (reason == DLL_PROCESS_ATTACH)\n        {\n            DisableThreadLibraryCalls(hInst);\n            ThreadMake(main); // Creates a new thread on the process.\n        }\n    return true;\n    }\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "888",
    "tags": [
        "c++",
        "dll",
        "immunity-debugger",
        "dll-injection"
    ],
    "user": "SuperA",
    "time": "Dec 20, 2014 at 19:20",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Have you made sure the function you're calling is not subject to ASLR?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ST3",
            "text": "<html><body><span class=\"comment-copy\">\n Not the problem you want to hear about, but your\n <code>\n  main\n </code>\n function should be\n <code>\n  LRESULT\n </code>\n instead of\n <code>\n  void\n </code>\n and should have return statement.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   At one particular instance it showed a debug error saying: \"The\n  process was not able to resume execution because the ESP value was\n  changed\", or something similar.\n  </p>\n  <p>\n   ...\n  </p>\n  <pre><code>typedef void(__cdecl* ChatFunc)(char*);\nChatFunc Chat = (ChatFunc)0x00450C60;\n</code></pre>\n </blockquote>\n <p>\n  It sounds like the function at\n  <code>\n   0x00450C60\n  </code>\n  is not a\n  <code>\n   __cdecl\n  </code>\n  function and/or it doesn't take exactly one function argument. Re-analyze the disassembly of that function and fix your prototype.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Dec 20, 2014 at 19:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "SuperA",
                    "text": "<span class=\"comment-copy\">How would I determine what type of function that is via Olly Debugger?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">You can determine the function's calling convention by looking at its assembly code. You can check out <a href=\"http://en.wikibooks.org/wiki/X86_Disassembly/Calling_Conventions\" rel=\"nofollow noreferrer\">en.wikibooks.org/wiki/X86_Disassembly/Calling_Conventions</a> for reference.</span>",
                    "time": null
                }
            ]
        }
    ]
}