{
    "title": "Importing C header file with memory location definitions",
    "link": "https://reverseengineering.stackexchange.com/questions/6651/importing-c-header-file-with-memory-location-definitions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Bear with me as I am new to IDA and have not managed to find an answer to my question on google or other related outlets.\n </p>\n <p>\n  I am reversing a firmware blob from an ARM device of which I have a c header file defining various memory locations as follows:\n </p>\n <pre><code>#define IO_LCD_OUT 0x4000000\n</code></pre>\n <p>\n  Is there a way I can load this header file into IDA in order to redefine immediate values?\n </p>\n <p>\n  For Example, instead of:\n </p>\n <pre><code>MOV     R12, #0x4000000\n</code></pre>\n <p>\n  Could IDA instead print:\n </p>\n <pre><code>MOV     R12, IO_LCD_OUT\n</code></pre>\n <p>\n  Are there other ways to acheive this outcome aside from how I am trying to approach this? I have the header file with memory locations defined and would like to load that information into ida!\n </p>\n <p>\n  I have tried to parse it using File -> Load File -> Parse C Header File and have had no luck!\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "Thomas",
    "time": "Nov 18, 2014 at 14:44",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n What error message(s) are you getting when you try\n <code>\n  Parse C Header File\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Thomas",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not getting any error messages, it loads the file perfectly fine. I just don't know how to change the way the immediate values are displayed. When I right click 0x4000000 for example, there are no options that allow me to define it as the variable in the header file\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use custom enumerations here.\n </p>\n <ol>\n  <li>\n   Go to Enums list (\n   <kbd>\n    Shift\n   </kbd>\n   +\n   <kbd>\n    F10\n   </kbd>\n   ).\n  </li>\n  <li>\n   Add a new enum for you list of constants (\n   <kbd>\n    Ins\n   </kbd>\n   )\n  </li>\n  <li>\n   Add constant(s) to the list (\n   <kbd>\n    N\n   </kbd>\n   ), e.g. name\n   <code>\n    IO_LCD_OUT\n   </code>\n   and value\n   <code>\n    0x4000000\n   </code>\n  </li>\n  <li>\n   Now you should be able to replace these constants in the disassembly, using\n   <kbd>\n    M\n   </kbd>\n   or the context menu.\n  </li>\n </ol>\n <p>\n  You can speed up things by:\n </p>\n <ol>\n  <li>\n   Generating an IDC file from the header to build the enum programmatically (use functions\n   <code>\n    AddEnum\n   </code>\n   and\n   <code>\n    AddConstEx\n   </code>\n   ). The\n   <a href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" rel=\"noreferrer\">\n    <code>\n     h2enum.idc\n    </code>\n    script\n   </a>\n   might work too.\n  </li>\n  <li>\n   Converting those defines to a C style\n   <code>\n    enum\n   </code>\n   , parsing the header, then using the imported enum from your disassembly (you will need to first perform\n   <code>\n    Synchronize to idb\n   </code>\n   step in the Local Types).\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Nov 18, 2014 at 12:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Will you have ability to cross reference addresses mentioned in defined constants ( for example #define IO_LCD_OUT 0x4000000 ) ? If yes, how is it possible ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">No, currently cross-references to enums are not maintained, though we're considering adding this feature.</span>",
                    "time": null
                },
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky How can one perform <code>Synchronize to idb</code> from IDAPython?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Importing header files will not do this work because there is no general way to find out meaning of any defined constant.\n </p>\n <p>\n  You'll need to do some manual work for it.\n </p>\n <p>\n  I handling this problem as follows (it requires some IDA scripting, but it should be easy):\n </p>\n <ol>\n  <li>\n   For all required memory regions (for example LCD) data segment should be created by using\n   <code>\n    idc.AddSeg\n   </code>\n   IDAPython api or via IDA UI. Addresses of those regions can be gathered from datasheets or by analysis of header files.\n  </li>\n  <li>\n   All those address-meaning-defines should be extracted from header files and converted to global variable names by\n   <code>\n    idc.MakeName\n   </code>\n   IDAPython api.\n  </li>\n  <li>\n   Binary should be reanalyzed (Options-->General-->Analisys-->Reanalyze program). If addresses are still not recognized, you will need to write IDAPython script that converts these addresses to offsets by\n   <code>\n    idc.OpOff\n   </code>\n   IDAPython api.\n  </li>\n </ol>\n <p>\n  As far as I know there is no general solution for this problem in IDA for now.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "w s",
            "time": "Nov 18, 2014 at 7:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">When the values are referring to memory and are not just flags or whatnot, this is probably the better approach.</span>",
                    "time": null
                }
            ]
        }
    ]
}