{
    "title": "Converting a virtual table from .rdata into an IDA struct",
    "link": "https://reverseengineering.stackexchange.com/questions/3116/converting-a-virtual-table-from-rdata-into-an-ida-struct",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is there a way to convert a\n  <code>\n   .rdata\n  </code>\n  vtable entry to an IDA struct? An example of the vtable entry:\n </p>\n <p>\n  <img alt=\"\" src=\"https://puu.sh/5yBWu.png\"/>\n </p>\n <p>\n  And what the resulting struct should look like (but with all entries - this vtable specifically, should have 109 vfuncs):\n </p>\n <p>\n  <img alt=\"\" src=\"https://puu.sh/5yD79.png\"/>\n </p>\n <p>\n  I would assume there's some option to give IDA an address, and vtable length, I think I am just missing it. Or maybe there's a script I don't know of, which does this?\n </p>\n <p>\n  I'm using IDA v6.1.\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 4,
    "views": "14k",
    "tags": [
        "ida",
        "struct",
        "vtables"
    ],
    "user": "Jarryd Le Breton",
    "time": "Mar 10, 2017 at 9:42",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<html><body><span class=\"comment-copy\">\n World of Warcraft eh? :) May I ask your name on Ownedcore? I'ld like to talk to you.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a great IDA plugin called\n  <a href=\"https://github.com/REhints/HexRaysCodeXplorer\" rel=\"nofollow\">\n   HexRaysCodeXplorer\n  </a>\n  that does\n  <a href=\"http://rehints.com/2013-09-02-Type-REconstruction-in-HexRaysCodeXplorer.html\" rel=\"nofollow\">\n   automatic type reconstruction\n  </a>\n  for C++ objects . It should do what you need.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "jvoisin",
            "time": "Dec 1, 2013 at 21:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jarryd Le Breton",
                    "text": "<span class=\"comment-copy\">This looks great! But unfortunately, I think I have the wrong version of IDA (I'm still on 6.1.) I probably should have mentioned, sorry.</span>",
                    "time": null
                },
                {
                    "user": "RobotHumans",
                    "text": "<span class=\"comment-copy\">It is source available.  Did you try building it against the 6.1 SDK?</span>",
                    "time": null
                },
                {
                    "user": "Jarryd Le Breton",
                    "text": "<span class=\"comment-copy\">I didn't, it's not all that important to me at the moment. I think I'll just wait until I can get a hold of 6.5 for the official implementation as joxeankoret mentioned.</span>",
                    "time": null
                },
                {
                    "user": "ivan_pozdeev",
                    "text": "<span class=\"comment-copy\">@hbdgaf: It doesn't compile against 6.1 'cuz it uses features that are new in 6.2 - e.g. <a href=\"http://www.hexblog.com/?p=536\" rel=\"nofollow noreferrer\">code viewer</a>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the next version, 6.5, it should be as easy as selecting the corresponding VTable area, right click and selecting the menu option \"Create struct from data\" (leak from IDA Beta testing). In the meantime, you can use\n  <a href=\"http://pastebin.com/zsGNa6h7\" rel=\"nofollow\">\n   this IDAPython script\n  </a>\n  I use myself. I hope you'll find it helpful.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "joxeankoret",
            "time": "Dec 2, 2013 at 8:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DCoder",
                    "text": "<span class=\"comment-copy\">The \"Create struct from data\" command has been available for a while now - what changed in 6.5 that makes it more useful in this case?</span>",
                    "time": null
                },
                {
                    "user": "Jarryd Le Breton",
                    "text": "<span class=\"comment-copy\">Awesome! Hopefully I can get my hands on 6.5 in the future. I don't have IDA available at the moment, but I'll definitely check out that script when I get a chance. :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If scripting this with IDAPython is desired (for some reason), one can use the minsc plugin at\n  <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">\n   https://github.com/arizvisa/ida-minsc\n  </a>\n  to simplify this.\n </p>\n <p>\n  <em>\n   Disclaimer: I'm the maintainer of that plugin.\n  </em>\n </p>\n <p>\n  This can be done using a\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure-t\" rel=\"nofollow noreferrer\">\n   <code>\n    structure_t\n   </code>\n  </a>\n  combined with the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-address\" rel=\"nofollow noreferrer\">\n   <code>\n    database.address\n   </code>\n  </a>\n  and\n  <a href=\"https://github.com/arizvisa/ida-minsc/blob/persistence-refactor/base/database.py#L8351\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.type\n   </code>\n  </a>\n  functions. To start out, we can use the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.new\" rel=\"nofollow noreferrer\">\n   <code>\n    structure.new\n   </code>\n  </a>\n  function to create a\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure-t\" rel=\"nofollow noreferrer\">\n   <code>\n    structure_t\n   </code>\n  </a>\n  that we want to assign to.\n </p>\n <pre><code>Python>ea = h()\nPython>ea\n0x283e8\n\n# Use the address as part of the name to ensure it's unique.\nPython>st = struc.new('vftable', ea)\nPython>st\n<class 'structure' name='vftable_283e8' size=0x0> \n</code></pre>\n <p>\n  At this point, we just need an interval for the range of addresses that we want to provide to\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-address\" rel=\"nofollow noreferrer\">\n   <code>\n    database.address\n   </code>\n  </a>\n  . However, we can also just select the addresses that we want to create the structure for. This is because the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-address\" rel=\"nofollow noreferrer\">\n   <code>\n    database.address\n   </code>\n  </a>\n  has a variation which returns the current selection.\n </p>\n <pre><code>Python>db.a()\n[0x283e8, 0x283ec, 0x283f0, 0x283f4, 0x283f8, 0x283fc, 0x28400, 0x28404, 0x28408, 0x2840c, 0x28410, 0x28414, 0x28418, 0x2841c]\n</code></pre>\n <p>\n  Next we'll want to use the type to determine the boundaries for each structure member. This requires us to pass the\n  <a href=\"https://github.com/arizvisa/ida-minsc/blob/persistence-refactor/base/database.py#L8351\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.type\n   </code>\n  </a>\n  function to each address. Once we have each type, we can then assign them to the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#members-t\" rel=\"nofollow noreferrer\">\n   <code>\n    structure_t.members_t\n   </code>\n  </a>\n  property of the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure-t\" rel=\"nofollow noreferrer\">\n   <code>\n    structure_t\n   </code>\n  </a>\n  that we created. The following python uses a list-comprehension to accomplish this.\n </p>\n <pre><code>Python>st.members[:] = [db.get.type(ea) for ea in db.a()]\n\nPython>st.members\n<class 'structure' name='vftable_283e8' size=0x38>\n[0]   0+0x4  int 'field_0'  (<class 'int'>, 4)\n[1]   4+0x4  int 'field_4'  (<class 'int'>, 4)\n[2]   8+0x4  int 'field_8'  (<class 'int'>, 4)\n[3]   c+0x4  int 'field_C'  (<class 'int'>, 4)\n[4]  10+0x4  int 'field_10' (<class 'int'>, 4)\n[5]  14+0x4  int 'field_14' (<class 'int'>, 4)\n[6]  18+0x4  int 'field_18' (<class 'int'>, 4)\n[7]  1c+0x4  int 'field_1C' (<class 'int'>, 4)\n[8]  20+0x4  int 'field_20' (<class 'int'>, 4)\n[9]  24+0x4  int 'field_24' (<class 'int'>, 4)\n[10] 28+0x4  int 'field_28' (<class 'int'>, 4)\n[11] 2c+0x4  int 'field_2C' (<class 'int'>, 4)\n[12] 30+0x4  int 'field_30' (<class 'int'>, 4)\n[13] 34+0x4  int 'field_34' (<class 'int'>, 4)\n</code></pre>\n <p>\n  However, it would be better if we copied the name and the\n  <a href=\"https://hex-rays.com/products/ida/support/sdkdoc/classtinfo__t.html\" rel=\"nofollow noreferrer\">\n   <code>\n    tinfo_t\n   </code>\n  </a>\n  associated with the address. The name can be fetched for an address using\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.name\" rel=\"nofollow noreferrer\">\n   <code>\n    database.name\n   </code>\n  </a>\n  , whereas the type can be fetched using\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database-type\" rel=\"nofollow noreferrer\">\n   <code>\n    database.type\n   </code>\n  </a>\n  . These attributes can then be assigned to each desired member to make a copy of the current selection.\n </p>\n <pre><code>Python>for ea in db.a():\nPython> print(db.name(ea), db.type(ea))\nPython>\ndword_283E8 int\ndword_283EC int\ndword_283F0 int\n...\ndword_28408 int\nNone int\n</code></pre>\n <p>\n  The listed example just copies fields from addresses in the database. This, however, is not actually useful for a virtual function table. This is because a virtual function table is better treated as an array where each member of the array points to a target function that contains our desired name and type.\n </p>\n <p>\n  Hence, we can use the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/database.html#database.get.array\" rel=\"nofollow noreferrer\">\n   <code>\n    database.get.array\n   </code>\n  </a>\n  function to fetch each element and then use the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/function.html#function.name\" rel=\"nofollow noreferrer\">\n   <code>\n    function.name\n   </code>\n  </a>\n  and\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/function.html#function-type\" rel=\"nofollow noreferrer\">\n   <code>\n    function.type\n   </code>\n  </a>\n  functions to fetch the desired name and type we want to use for each member. The following python does this.\n </p>\n <pre><code>Python>db.disasm()\n'180897198: dq offset Mso30Win32Client_3636\n1808971a0: dq offset sub_18012FA80\n1808971a8: dq offset sub_18011FAB0\n1808971b0: dq offset sub_180682430\n1808971b8: dq offset sub_1801D0D80' \n\n# Print out each attribute that we want.\nPython>for ea in db.get.array():\nPython> print(hex(ea), func.name(ea), func.type(ea))\nPython>\n1801663a0 Mso30Win32Client_3636 __int64()\n18012fa80 sub_18012FA80 __int64 __fastcall(__int64)\n18011fab0 sub_18011FAB0 __int64 __fastcall(volatile signed __int32 *)\n180682430 sub_180682430 __int64 __fastcall(__int64, __int64 *)\n1801d0d80 sub_1801D0D80 __int64 __fastcall(__int64, char)\n</code></pre>\n <p>\n  After fetching the desired attributes, we can then assign the name and type to their corresponding member using the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.member_t.name\" rel=\"nofollow noreferrer\">\n   <code>\n    member_t.name\n   </code>\n  </a>\n  and the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.member_t.typeinfo\" rel=\"nofollow noreferrer\">\n   <code>\n    member_t.typeinfo\n   </code>\n  </a>\n  properties. By combining everything described, we can do the following to make a virtual function table from the current selection.\n </p>\n <p>\n  <em>\n   Note: If we want to assign the type destructively, we can assign a\n   <a href=\"https://hex-rays.com/products/ida/support/sdkdoc/classtinfo__t.html\" rel=\"nofollow noreferrer\">\n    <code>\n     tinfo_t\n    </code>\n   </a>\n   directly to the\n   <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.member_t.type\" rel=\"nofollow noreferrer\">\n    <code>\n     member_t.type\n    </code>\n   </a>\n   property.\n  </em>\n </p>\n <pre><code>Python>st=struc.new('vftable', h())\nPython>st\n<class 'structure' name='vftable_180897198' size=0x0>\n\n# Create each field.\nPython>st.members[:] = [db.get.type(ea) for ea in db.a()]\n\n# Assign the function name and type (as a pointer) to each field.\nPython>for ea, m in zip(db.get.array(), st.members):\nPython> m.name = func.name(ea), ea\nPython> m.typeinfo = db.types.pointer(func.type(ea))\nPython>\n\nPython>st.members\n<class 'structure' name='vftable_180897198' size=0x28>\n[0]  0+0x8                                    __int64 (*)() 'Mso30Win32Client_3636_1801663a0' (<class 'type'>, 8)\n[1]  8+0x8                   __int64 (__fastcall*)(__int64) 'sub_18012FA80_18012fa80'         (<class 'type'>, 8)\n[2] 10+0x8  __int64 (__fastcall*)(volatile signed __int32*) 'sub_18011FAB0_18011fab0'         (<class 'type'>, 8)\n[3] 18+0x8         __int64 (__fastcall*)(__int64, __int64*) 'sub_180682430_180682430'         (<class 'type'>, 8)\n[4] 20+0x8             __int64 (__fastcall*)(__int64, char) 'sub_1801D0D80_1801d0d80'         (<class 'type'>, 8)\n</code></pre>\n <p>\n  The convention for these should really be\n  <code>\n   __thiscall\n  </code>\n  . To fix these, we can use the\n  <a href=\"https://arizvisa.github.io/ida-minsc/modules/function.html#function.type.convention\" rel=\"nofollow noreferrer\">\n   <code>\n    function.type.convention\n   </code>\n  </a>\n  function. This function can apply the convention to an address or transform a\n  <a href=\"https://hex-rays.com/products/ida/support/sdkdoc/classtinfo__t.html\" rel=\"nofollow noreferrer\">\n   <code>\n    tinfo_t\n   </code>\n  </a>\n  directly.\n </p>\n <pre><code>Python>for m in st.members:\nPython> m.typeinfo = function.convention(m.typeinfo, 'thiscall')\nPython>\n\nPython>st.members\n<class 'structure' name='vftable_180897198' size=0x28>\n[0]  0+0x8                          __int64 (__thiscall*)() 'Mso30Win32Client_3636_1801663a0' (<class 'type'>, 8)\n[1]  8+0x8                   __int64 (__thiscall*)(__int64) 'sub_18012FA80_18012fa80'         (<class 'type'>, 8)\n[2] 10+0x8  __int64 (__thiscall*)(volatile signed __int32*) 'sub_18011FAB0_18011fab0'         (<class 'type'>, 8)\n[3] 18+0x8         __int64 (__thiscall*)(__int64, __int64*) 'sub_180682430_180682430'         (<class 'type'>, 8)\n[4] 20+0x8             __int64 (__thiscall*)(__int64, char) 'sub_1801D0D80_1801d0d80'         (<class 'type'>, 8) \n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ali Rizvi-Santiago",
            "time": "Aug 15, 2024 at 1:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Answer as of IDA 7.6 (can't guarantee it's correct):\n </p>\n <ol>\n  <li>\n   Select your whole vtable in IDA View\n  </li>\n  <li>\n   Click Edit -> Structs -> Create struct from selection\n  </li>\n </ol>\n <p>\n  I don't know of a better way currently, but the problems with this approach is that function names aren't synchronized back to the struct if you rename some subroutine, and also in my case the first member's name was also wrong...\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "p0358",
            "time": "Feb 13, 2023 at 14:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}