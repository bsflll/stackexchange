{
    "title": "An issue when unpacking UPX",
    "link": "https://reverseengineering.stackexchange.com/questions/5889/an-issue-when-unpacking-upx",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since I love to play with the WinAPI or debugging in general, I decided to write a small unpacker for the open source PE executable packer\n  <a href=\"http://upx.sourceforge.net/\" rel=\"nofollow\">\n   UPX\n  </a>\n  today (Windows version).\n </p>\n <p>\n  In order to accomplish this, I proceeded as follow:\n </p>\n <ul>\n  <li>\n   <code>\n    CreateProcess\n   </code>\n   API all with\n   <code>\n    DEBUG\n   </code>\n   and\n   <code>\n    DEBUG_ONLY_THIS_PROCESS\n   </code>\n   flags.\n  </li>\n  <li>\n   <code>\n    GetThreadContext\n   </code>\n   API call in order to read value of\n   <code>\n    EIP\n   </code>\n   .\n  </li>\n  <li>\n   <code>\n    ReadProcessMemory\n   </code>\n   API call loop searching for the last\n   <code>\n    JMP\n   </code>\n   instruction.\n  </li>\n  <li>\n   Overwriting the\n   <code>\n    E9\n   </code>\n   with\n   <code>\n    CC\n   </code>\n   in order to set an\n   <code>\n    INT3\n   </code>\n   breakpoint on the address.\n  </li>\n  <li>\n   Entering\n   <code>\n    DebugEvent\n   </code>\n   loop waiting for the breakpoint. Once reached, reset byte back to\n   <code>\n    E9\n   </code>\n   , decrease\n   <code>\n    EIP\n   </code>\n   by one and jump to the address (\n   <code>\n    OEP\n   </code>\n   ) of the target.\n  </li>\n </ul>\n <p>\n  After reaching the\n  <code>\n   OEP\n  </code>\n  , I proceed as follows in order to dump the process:\n </p>\n <ul>\n  <li>\n   Read ImageBase, Base of code, ImageSize, ... from original PE headers\n  </li>\n  <li>\n   <code>\n    ReadProcessMemory(hProcess, header32.ImageBase, buffer, header32.SizeOfImage, bytes_read)\n   </code>\n  </li>\n  <li>\n   Save buffer content to payload.bin, update the PE header of the file with new EntryPoint (\n   <code>\n    OEP\n   </code>\n   ) and set\n   <code>\n    RawDataOffset\n   </code>\n   and\n   <code>\n    RawDataSize\n   </code>\n   of each section to its corresponding\n   <code>\n    VirtualAddress\n   </code>\n   /\n   <code>\n    VirtualSize\n   </code>\n   .\n  </li>\n </ul>\n <p>\n  After creating the dump with fixed\n  <code>\n   OEP\n  </code>\n  & RAW offsets/sizes for the sections, I fix the dump with ImpREC (right now manually, but I plan to use\n  <code>\n   ImpREC.dll\n  </code>\n  or the ImpREC lite source in order to assemble everything in one tool at a later point).\n </p>\n <p>\n  The thing that confuses me though, is the fact, that the resulting binaries worked perfectly fine (exact match with the MUP) for one test case (a small hello world fasm application) and my dump file was exactly the same I had received through OllyDump, but when I tried to do the same unpacking with an UPX packed version of\n  <code>\n   putty.exe\n  </code>\n  , my dumped memory varied from the one OllyDump had dumped starting at RAW offset\n  <code>\n   0x73970\n  </code>\n  (exact match before that address).\n </p>\n <p>\n  However - the file size is again the same one (and all bytes before that offset match), just after that certain address the bytes magically won't match anymore (they are still non-zero though).\n </p>\n <p>\n  I studied the source code in\n  <code>\n   OllyDump.c\n  </code>\n  thoroughly regarding this difference, but as for now I didn't find my mistake... In some cases my dumps are equal to the ones generated by OllyDump and in some they aren't. Or is the mistake probably in my approach already?\n </p>\n <p>\n  <strong>\n   Note:\n  </strong>\n  Source code omitted on purpose, since it's a few hundred lines long and super messy as for now. Can/will add further details if required or if I missed something, please just let me know in the comments.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "unpacking",
        "dumping",
        "upx"
    ],
    "user": "beta",
    "time": "Jul 18, 2014 at 20:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hard to tell what the reason for the differences might be without actually seeing the differences, but one guess is that you're doing\n  <code>\n   ReadProcessMemory(hProcess, header32.ImageBase, buffer, header32.SizeOfImage, bytes_read)\n  </code>\n  , while the other tool may be doing\n  <code>\n   foreach(section) {ReadProcessMemory(hProcess, header32.ImageBase + section.RVA, buffer, section.VirtualSize, bytes_read)}\n  </code>\n  ; this may cause the \"caves\" between sections to differ.\n </p>\n <p>\n  (BTW, I assume your\n  <code>\n   header32.ImageBase\n  </code>\n  is the actual base address of the module in memory, not just the image base address from the PE headers, since ASLR could relocate it at runtime.)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jul 18, 2014 at 14:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "beta",
                    "text": "<span class=\"comment-copy\">Thank you I gotta check this out next week (forgot my laptop at the office).</span>",
                    "time": null
                }
            ]
        }
    ]
}