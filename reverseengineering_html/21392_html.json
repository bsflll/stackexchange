{
    "title": "Large number of exports defined in a PE .exe file",
    "link": "https://reverseengineering.stackexchange.com/questions/21392/large-number-of-exports-defined-in-a-pe-exe-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a (non-malicious) PE exe that I'm analyzing, which is using the Themida/WinLicense packer and noticed that it has 479 defined exports, which seems odd for an exe. Some of the functions are specific to the application, others are from the boost and QT libraries. Any idea why this would be? Is it a side effect of Themida, or a mistake by the app developers?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "146",
    "tags": [
        "pe",
        "unpacking"
    ],
    "user": "Chris",
    "time": "May 30, 2019 at 14:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Most of the time it is just a benign side effect of linking in code that exposes their APIs as DLL exports. It is fairly common for 3rd party middleware/libraries to do this so that their code will work in both DLLs and EXEs without modification.\n </p>\n <p>\n  For boost, any of their methods that are marked with\n  <code>\n   BOOST_SYMBOL_EXPORT\n  </code>\n  will get tagged for DLL export:\n </p>\n <blockquote>\n  <p>\n   Defines the syntax of a C++ language extension that indicates a symbol is to be exported from a shared library. If the compiler has no such extension, the macro is defined with no replacement text.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  I have seen some EXE binaries explicitly export function entry points for easier communication back and forth between DLL plugins, but this is a lot more rare the the above case.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "josh poley",
            "time": "May 30, 2019 at 15:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}