{
    "title": "Rebuilding a symbol table for a firmware binary",
    "link": "https://reverseengineering.stackexchange.com/questions/15128/rebuilding-a-symbol-table-for-a-firmware-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer the\n  <a href=\"http://www.linksys.com/EU/en/support/WAG120N\" rel=\"nofollow noreferrer\">\n   Linksys WAG120N\n  </a>\n  router firmware. I've been able to unpack it and extract the bootloader, kernel and filesystem.\n </p>\n <p>\n  The kernel is MIPS big endian. I loaded the kernel into IDA pro with start address of\n  <code>\n   0x80002000\n  </code>\n  . The entry point is\n  <code>\n   0x801B2040\n  </code>\n  .\n </p>\n <p>\n  The problem I have now is that all the functions are named as\n  <code>\n   sub_\n  </code>\n  . I need a symbol table to help me reverse this binary. Binwalk doesn't find any symbol tables and I'm not sure how to rebuild a symbol table, as I am new to  this sort of stuff.\n </p>\n <p>\n  I read a post\n  <a href=\"https://reverseengineering.stackexchange.com/questions/4549/rebuild-symbol-table\">\n   Rebuild symbol table\n  </a>\n  , but that was about static and shared libraries, which my kernel is not.\n </p>\n <p>\n  Running\n  <code>\n   file\n  </code>\n  on my kernel gives\n </p>\n <pre><code>kernel: data\n</code></pre>\n <p>\n  I don't know if the binary has a symbol table, but if it does, I don't know how to extract it. Or is there another way of reversing the binary?\n </p>\n <p>\n  Any help is appreciated.\n </p>\n <p>\n  EDIT: I have found what appears to be a symbol table. It has the libc string functions and lots of other functions. But there aren't many cross references to these function names in the disassembly. How do I use this?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly",
        "symbols",
        "kernel"
    ],
    "user": "Aaron Garton",
    "time": "Apr 10, 2017 at 10:05",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n does\n <code>\n  strings\n </code>\n produce anything that looks like function names?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Aaron Garton",
            "text": "<html><body><span class=\"comment-copy\">\n @Igor Skochinsky Running the command\n <code>\n  strings kernel | grep \"()\"\n </code>\n seems to give a few functions arguments. Here is the output:\n <a href=\"https://pastebin.com/XeMxQU19\" rel=\"nofollow noreferrer\">\n  pastebin.com/XeMxQU19\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Aaron Garton",
            "text": "<html><body><span class=\"comment-copy\">\n <i>\n  names\n </i>\n not\n <i>\n  arguments\n </i>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Aaron Garton",
            "text": "<html><body><span class=\"comment-copy\">\n I have found what appears to be a symbol table. It has many of the libc functions and lots of other functions. How do I use this?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n add details to the post\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It sounds like you aren't sure what you want to do exactly. Is there any part of the firmware you want to reverse engineer in particular? I suggest you first start by reading some blog posts on\n  <a href=\"http://www.devttys0.com\" rel=\"nofollow noreferrer\">\n   devttys0.com\n  </a>\n  , as he seems like an excellent source for information about reverse-engineering router firmwares.\n </p>\n <p>\n  If a binary contains symbols, IDA Pro should automatically load them for you. Very often router firmwares have had their symbols stripped. However, the Linux kernel is licensed under the GPL, meaning that the manufacturer is obligated to provide the source code for the kernel. And Linksys\n  <a href=\"http://www.linksys.com/us/support-article?articleNum=114663\" rel=\"nofollow noreferrer\">\n   does provide the source code\n  </a>\n  for your router's kernel; you can start by looking at that.\n </p>\n <p>\n  Often, however, interesting stuff is in kernel modules and/or binaries in the rootfs, not the kernel itself. I downloaded the\n  <a href=\"http://www.linksys.com/us/support-article?articleNum=156227\" rel=\"nofollow noreferrer\">\n   firmware for your router\n  </a>\n  and extracted it with\n  <code>\n   binwalk -Mrev\n  </code>\n  , and binwalk was indeed able to extract the rootfs. Look through it to see if you can find anything interesting.\n </p>\n <p>\n  As an example, let's look at the main web CGI binary,\n  <code>\n   usr/sbin/setup.cgi\n  </code>\n  . Running\n  <code>\n   file\n  </code>\n  against this file gives the following:\n </p>\n <pre><code>usr/sbin/setup.cgi: ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped\n</code></pre>\n <p>\n  The binary has been stripped, but looking at the symbol table  with\n  <code>\n   readelf -s usr/sbin/setup.cgi\n  </code>\n  , we can still see quite a few interesting function names. Next, we can look at the strings in the binary with\n  <code>\n   strings\n  </code>\n  . (I personally prefer using\n  <code>\n   strings -n8\n  </code>\n  because often strings less than 8 characters are false positives, and when they aren't, they are usually unimportant anyways.) Often the strings of a binary can reveal quite a bit about what the binary does and how the binary works, and this is made easier by the fact that router manufacturers love using\n  <code>\n   system(3)\n  </code>\n  to run Linux shell commands.\n </p>\n <p>\n  Once you know that you have found an interesting binary, you can then load it into IDA Pro to disassemble it and start reverse-engineering it.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Hitechcomputergeek",
            "time": "Jun 6, 2017 at 14:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Aaron Garton",
                    "text": "<span class=\"comment-copy\">Thanks for the thorough answer :) Is <code>binwalk -Mrev</code> the same as <code>binwalk -eM</code>? And what is <code>system(3)</code>, is it the same as <code>system(cmd)</code>?</span>",
                    "time": null
                },
                {
                    "user": "Hitechcomputergeek",
                    "text": "<span class=\"comment-copy\">@user2556381 They are basically the same thing, <code>-r</code> deletes leftover files like .squashfs filesystems once they've been extracted and <code>-v</code> is just verbose mode. The <code>(3)</code> in <code>system(3)</code> refers to the manpage section number; numbers are specified to differentiate between different manpages with the same names, such as the <code>unlink</code> shell command vs the syscall. To view the manpage for <code>system(3)</code>, you would type <code>man 3 system</code> at the shell. (See <code>man man</code> for a list of these section numbers; this is the same as <code>man 1 man</code>.) The <code>system()</code> syscall is indeed called as <code>system(\"command\")</code> from C.</span>",
                    "time": null
                }
            ]
        }
    ]
}