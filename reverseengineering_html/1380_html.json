{
    "title": "How can you reliably unpack a Windows driver manually?",
    "link": "https://reverseengineering.stackexchange.com/questions/1380/how-can-you-reliably-unpack-a-windows-driver-manually",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When you unpack manually a Windows user-mode executable, you can easily break at its EntryPoint (or TLS), then trace until you reach the original EntryPoint. However that's not possible with a packed driver.\n </p>\n <p>\n  How can you reliably unpack a Windows driver manually?\n </p>\n</div>\n</body></html>",
    "votes": "17",
    "answers": 4,
    "views": "4k",
    "tags": [
        "windows",
        "unpacking",
        "driver"
    ],
    "user": "Ange",
    "time": "Mar 29, 2013 at 20:59",
    "comments": [
        {
            "user": "user1156544",
            "text": "<html><body><span class=\"comment-copy\">\n Who doesn't miss the greatest of all of them, Softice\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I kind of like your answer about changing the subsystem, especially if you're not a fan of kernel debugging.  I'm a big fan of Windbg, though.  The way I do this is:\n </p>\n <ol>\n  <li>\n   Hook up my kernel debugger to a VM\n  </li>\n  <li>\n   Change the first byte of the driver's entry point to be an INT3 (0xCC).\n  </li>\n  <li>\n   Fix-up the PE checksum (I'm a fan of letting\n   <a href=\"https://code.google.com/p/pefile/\">\n    pefile\n   </a>\n   do this work for me).\n  </li>\n  <li>\n   Load the driver in the VM (\n   <a href=\"http://www.osronline.com/article.cfm?article=157\">\n    OSR\n   </a>\n   has a great driver loader )\n  </li>\n </ol>\n <p>\n  The kernel should call\n  <code>\n   DriverEntry()\n  </code>\n  on your driver and break into your debugger for you.  Then you can trace the code until you find the OEP as you would have done anyway.  The main advantage I see to this method is that you don't have to fake kernel DLLs or calls that the driver might do during unpacking, and it works on x64.\n </p>\n</div>\n</body></html>",
            "votes": "16",
            "user": "mrduclaw",
            "time": "Mar 30, 2013 at 2:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">You might hit the wall on newer Windows versions, though. The answer of the OP is more versatile in that sense, but yours is certainly more professional :) ... also don't forget <code>devcon</code> for the driver loading needs (comes with source in the DDKs/WDKs)</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">@0xC0000022L I haven't had a problem with this on newer versions of Windows; just do the normal stuff like enable test signing, etc.  Admittedly, I haven't tried it on Windows 8, though.  Did something change?</span>",
                    "time": null
                },
                {
                    "user": "AminM",
                    "text": "<span class=\"comment-copy\">@mrduclaw how do i Change the first byte of the driver's entry point to be an INT3?!??</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">@AminM Sorry for the late response, I haven't checked this account in a long time.  Open the file in IDA, find the bytes of where the entry-point is.  Open it in a hex editor and chnage it to a 0xCC (break-point).  Or, you can probably edit it directly in IDA these days.  Good luck!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   change the driver subsystem to GUI (turning it into a user-mode binary)\n  </li>\n  <li>\n   clear the imports' RVA, or use a\n   <a href=\"http://corkami.googlecode.com/files/usermode_drivers2.zip\">\n    set of fake kernel DLLs\n   </a>\n   (only in 32 bits) to enable imports loading\n  </li>\n  <li>\n   launch in your debugger and proceed as if it was user-mode - you'll probably need to simulate some API calls before reaching the original EntryPoint.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "11",
            "user": "Ange",
            "time": "Mar 29, 2013 at 20:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An alternative to patching the DriverInit function with an INT3 is to put a breakpoint in the\n  <strong>\n   IopLoadDriver\n  </strong>\n  function which is responsible for calling DriverInit. On Windows XP SP3, the breakpoint should be added at\n  <strong>\n   IopLoadDriver+0x66a\n  </strong>\n  which is\n  <code>\n   call    dword ptr [edi+2Ch]\n  </code>\n  (0x2C is _DRIVER_OBJECT.DriverInit).\n </p>\n <ol>\n  <li>\n   Find IopLoadDriver with\n   <code>\n    x nt!IopLoadDriver\n   </code>\n  </li>\n  <li>\n   Add a breakpoint at IopLoadDriver+0x66a\n  </li>\n  <li>\n   Load and start your driver\n  </li>\n </ol>\n <p>\n  Offsets for other Windows versions:\n </p>\n <ul>\n  <li>\n   Windows 7 Pro SP1 32-bit German: nt!IopLoadDriver+0x7eb\n  </li>\n  <li>\n   Windows 7 Ultimate 64-bit US: nt!IopLoadDriver+0xA04\n  </li>\n  <li>\n   Windows 10 Pro x64 US: nt!IopLoadDriver+0x51C (Build 10586.420)\n  </li>\n </ul>\n <p>\n  (If you have offsets for other versions of Windows, please edit this answer)\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "user9000",
            "time": "Jul 11, 2016 at 17:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Nice bit of info. It is always valuable to have bits and pieces which you can put together as reverser. Also remember you can get a good guess of the implementation details in Windows by looking at the ReactOS source code.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   nt!IopLoadDriver\n  </code>\n  indirect call is used only for SERVICE_DEMAND start driver entry\n </p>\n <p>\n  for boot loading drivers you would need to break on\n  <code>\n   nt!IopInitializeBuiltInDriver\n  </code>\n  indirect call as well\n </p>\n <p>\n  you can see a short example on message #17 & #18 in this link\n </p>\n <p>\n  <a href=\"http://www.osronline.com/showthread.cfm?link=231280\" rel=\"nofollow\">\n   http://www.osronline.com/showthread.cfm?link=231280\n  </a>\n </p>\n <p>\n  this is a dormant script (slightly edited to use gc (go from conditional instead of go as recommended ) that keeps waiting forever and will print out the !drvobj details\nwhen ever any driver is loaded in a kernel debugging session\n </p>\n <p>\n  no word wraps the command should be in a single line\n </p>\n <pre><code>.foreach /pS 1 /ps 10 ( place { # call*dword*ptr*\\[*\\+*\\] nt!IopInitializeBuiltinDriver} ) {bu place \".printf  \\\"%msu\\\n\\\", poi(esp+4);r $t0 = poi(esp); gu; !drvobj $t0 2;gc\"}\n.foreach /pS 1 /ps 10 ( place { # call*dword*ptr*\\[*\\+*\\] nt!IoploadDriver} ) {bu place \".printf  \\\"%msu\\\n\\\", poi(esp+4);r $t1 = poi(esp); gu; !drvobj $t1 2;gc\"}\n</code></pre>\n <p>\n  xp sp3 vm\n </p>\n <p>\n  in a connected kd session \ndo\n  <code>\n   sxe ibp; .reboot\n  </code>\n  kd will request an initial break on rebooting (equivalent to /break switch in boot.ini)\nwhen broken \nrun this script\n </p>\n <pre><code>$$>a< \"thisscript.extension\"\n</code></pre>\n <p>\n  in addition to printing all the system driver entry points and their driver objects\n </p>\n <p>\n  if your application loads an additional driver their details will be printed too\n </p>\n <p>\n  a sample output for sysinternals dbgview opened in the target vm\n </p>\n <p>\n  the dbgv.sys entry point is called when you\n  <code>\n   check mark the enable kernel capture  (ctrl+k)\n  </code>\n </p>\n <pre><code>\\REGISTRY\\MACHINE\\SYSTEM\\ControlSet001\\Services\\DBGV\n*** ERROR: Module load completed but symbols could not be loaded for Dbgv.sys\nDriver object (ffbd6248) is for:\n \\Driver\\DBGV\nDriverEntry:   f6d89185 Dbgv\nDriverStartIo: 00000000 \nDriverUnload:  00000000 \nAddDevice:     00000000 \n\nDispatch routines:\n[00] IRP_MJ_CREATE                      f6d87168    Dbgv+0x1168\n[01] IRP_MJ_CREATE_NAMED_PIPE           804fa87e    nt!IopInvalidDeviceRequest\n[02] IRP_MJ_CLOSE                       f6d87168    Dbgv+0x1168\n[03] IRP_MJ_READ                        804fa87e    nt!IopInvalidDeviceRequest\n[04] IRP_MJ_WRITE                       804fa87e    nt!IopInvalidDeviceRequest\n[05] IRP_MJ_QUERY_INFORMATION           804fa87e    nt!IopInvalidDeviceRequest\n[06] IRP_MJ_SET_INFORMATION             804fa87e    nt!IopInvalidDeviceRequest\n[07] IRP_MJ_QUERY_EA                    804fa87e    nt!IopInvalidDeviceRequest\n[08] IRP_MJ_SET_EA                      804fa87e    nt!IopInvalidDeviceRequest\n[09] IRP_MJ_FLUSH_BUFFERS               804fa87e    nt!IopInvalidDeviceRequest\n[0a] IRP_MJ_QUERY_VOLUME_INFORMATION    804fa87e    nt!IopInvalidDeviceRequest\n[0b] IRP_MJ_SET_VOLUME_INFORMATION      804fa87e    nt!IopInvalidDeviceRequest\n[0c] IRP_MJ_DIRECTORY_CONTROL           804fa87e    nt!IopInvalidDeviceRequest\n[0d] IRP_MJ_FILE_SYSTEM_CONTROL         804fa87e    nt!IopInvalidDeviceRequest\n[0e] IRP_MJ_DEVICE_CONTROL              f6d87168    Dbgv+0x1168\n[0f] IRP_MJ_INTERNAL_DEVICE_CONTROL     804fa87e    nt!IopInvalidDeviceRequest\n[10] IRP_MJ_SHUTDOWN                    804fa87e    nt!IopInvalidDeviceRequest\n[11] IRP_MJ_LOCK_CONTROL                804fa87e    nt!IopInvalidDeviceRequest\n[12] IRP_MJ_CLEANUP                     804fa87e    nt!IopInvalidDeviceRequest\n[13] IRP_MJ_CREATE_MAILSLOT             804fa87e    nt!IopInvalidDeviceRequest\n[14] IRP_MJ_QUERY_SECURITY              804fa87e    nt!IopInvalidDeviceRequest\n[15] IRP_MJ_SET_SECURITY                804fa87e    nt!IopInvalidDeviceRequest\n[16] IRP_MJ_POWER                       804fa87e    nt!IopInvalidDeviceRequest\n[17] IRP_MJ_SYSTEM_CONTROL              804fa87e    nt!IopInvalidDeviceRequest\n[18] IRP_MJ_DEVICE_CHANGE               804fa87e    nt!IopInvalidDeviceRequest\n[19] IRP_MJ_QUERY_QUOTA                 804fa87e    nt!IopInvalidDeviceRequest\n[1a] IRP_MJ_SET_QUOTA                   804fa87e    nt!IopInvalidDeviceRequest\n[1b] IRP_MJ_PNP                         804fa87e    nt!IopInvalidDeviceRequest\n</code></pre>\n</div>\n</body></html>",
            "votes": "6",
            "user": "blabb",
            "time": "Aug 14, 2013 at 12:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}