{
    "title": "Static Linking as an anti-RE method?",
    "link": "https://reverseengineering.stackexchange.com/questions/13556/static-linking-as-an-anti-re-method",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A lot of reverse engineering tutorials I've seen involve using the import address table to determine what functions a program calls based on which libraries it imports.  But doesn't static linking a binary cause the libraries to be copied directly into the image, thus leaving the IAT blank?  If so, wouldn't linking an executable statically at least make reverse engineering more difficult?\n </p>\n <p>\n  I'm asking because I haven't seen static linking mentioned as an anti-RE method.  Is it effective in that role, or are libraries still listed in the IAT despite static linking?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "820",
    "tags": [
        "disassembly",
        "windows",
        "binary-analysis",
        "x86",
        "decompilation"
    ],
    "user": "exosphere3",
    "time": "Sep 23, 2016 at 2:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can't really use static linking for system APIs on Windows because syscall numbers change from one release to another. You pretty much have to go through one of the system DLLs in the end.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 23, 2016 at 8:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">While this is true (refer to <a href=\"http://j00ru.vexillium.org/ntapi/\" rel=\"nofollow noreferrer\">j00ru.vexillium.org/ntapi</a>), nothing prevents you from doing this for a specific windows version. Consider malware</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Is having a system call number for a specific version sufficient  where would you get the actual code that would be executed setting aside the syscall number changes</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Its true function symbols are a great help when reversing unknown executables and static linking omits these symbols. On the other hand, there are techniques like\n  <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\" rel=\"nofollow\">\n   IDA F.L.I.R.T\n  </a>\n  .\n </p>\n <p>\n  These techniques try to determine if a function is a known library function through the use of signatures. In recent research, there are other approaches using machine learning.\n </p>\n <p>\n  So effectively, you won't trick a reverse engineer with it. Dynamic loading is a whole other method and may take more time to reverse, depending on its implementation.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Sep 23, 2016 at 5:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}