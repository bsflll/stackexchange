{
    "title": "IDA decompiler macro",
    "link": "https://reverseengineering.stackexchange.com/questions/11621/ida-decompiler-macro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What is the purpose of\n  <code>\n   COERCE_FLOAT\n  </code>\n  and\n  <code>\n   COERCE_UNSIGNED_INT\n  </code>\n  macros in the Hex Rays decompiled code below?\n </p>\n <pre><code>double __cdecl sub_401580(float a1)\n{\n  unsigned int v1; // eax@1\n  double v2; // st7@1\n  float v4; // [sp+10h] [bp+4h]@1\n  float v5; // [sp+10h] [bp+4h]@1\n\n  v1 = LODWORD(a1) & 0x80000000;\n  v4 = 1.273239493370056 * a1 - a1 * 0.4052847325801849 * COERCE_FLOAT(LODWORD(a1) & 0x7FFFFFFF);\n  v2 = v4;\n  v5 = v4 * v4;\n  return (float)(v5\n               * ((v5 * COERCE_FLOAT(v1 ^ COERCE_UNSIGNED_INT(-0.0032225901))\n                 + COERCE_FLOAT(v1 | COERCE_UNSIGNED_INT(0.015124941)))\n                * v5\n                + COERCE_FLOAT(v1 | COERCE_UNSIGNED_INT(0.20363937)))\n               + v2 * 0.7844448685646057);\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "hexrays",
        "decompiler",
        "float"
    ],
    "user": "Arun",
    "time": "Dec 30, 2015 at 19:15",
    "comments": [
        {
            "user": "tmr232",
            "text": "<html><body><span class=\"comment-copy\">\n What is the question?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n that is the question :P\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Arun",
            "text": "<html><body><span class=\"comment-copy\">\n macro doing ? COERCE_FLOAT and COERCE_UNSIGNED_INT\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Arun",
            "text": "<html><body><span class=\"comment-copy\">\n please help me to simply the code\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   COERCE_TYPE(x)\n  </code>\n  is the same thing as\n  <code>\n   *(TYPE *)&x\n  </code>\n  . Hex-Rays uses\n  <code>\n   COERCE_...\n  </code>\n  macros when\n  <code>\n   &x\n  </code>\n  is illegal. For example:\n </p>\n <pre><code>COERCE_DOUBLE(__PAIR__(i1,i2))\n</code></pre>\n <p>\n  Is the same as\n  <code>\n   *(double *)&__PAIR__(i1, i2)\n  </code>\n  , but since\n  <code>\n   &\n  </code>\n  can not be applied to calls, we end up seeing\n  <code>\n   COERCE\n  </code>\n  .\n </p>\n <p>\n  Its name correctly conveys its meaning.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "perror",
            "time": "Jan 17, 2019 at 16:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Are You The Ilfak Guilfanov ?  Welcome to RESE</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   I'd read this (and probably it is a mistake) as\n  </strong>\n  treating binary content of the variable as a variable of another type, something like this:\n </p>\n <ul>\n  <li>\n   coerce float is\n   <code>\n    *((float*)&var)\n   </code>\n   , where var was of the same size as float, supposedly 4 bytes.\n  </li>\n  <li>\n   coerce unsigned int is\n   <code>\n    *((unsigned int*)&var)\n   </code>\n   , where var was of the same size as unsigned int.\n  </li>\n </ul>\n <p>\n  As far as I remember 32 bit platforms treating unsigned int and float as a values of 4 bytes length.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Jan 18, 2016 at 14:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Arun",
                    "text": "<span class=\"comment-copy\">Thanx for Your Answer, where all these macro defined in ida decompiler, is there any header file</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I don;t know anything about header file where ii is defined. It is only suggestion.</span>",
                    "time": null
                },
                {
                    "user": "bravosierra99",
                    "text": "<span class=\"comment-copy\">I'm with @Arun, I would love to know where these macros are defined so I can go look them up.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  coerce_* functions are generally a little more coercive that a simple casting, I would assume their meaning as follows:\n </p>\n <pre><code>   #define VALUE_SIZE (sizeof(int))\n\nstruct VALUE_TYPE {\n    char contents[VALUE_SIZE];\n};\n\nstruct VALUE_TYPE COERCE_FLOAT(float arg) {\n    struct VALUE_TYPE rv;\n    memcpy(&arg, rv.contents, sizeof arg);\n    return rv;\n}\n\nstruct VALUE_TYPE COERCE_INT(int arg) {\n    struct VALUE_TYPE rv;\n    memcpy(&arg, rv.contents, sizeof arg);\n    return rv;\n}\n\nstruct VALUE_TYPE COERCE_UNSIGNED_INT(unsigned int arg) {\n    struct VALUE_TYPE rv;\n    memcpy(&arg, rv.contents, sizeof arg);\n    return rv;\n}\n</code></pre>\n <p>\n  source:\n  <a href=\"https://stackoverflow.com/a/37198532/912236\">\n   https://stackoverflow.com/a/37198532/912236\n  </a>\n </p>\n <p>\n  The reason for their use may relate to how the ABI passes floats vs how it passes integers.  There is no difference in Windows 32-bit code (either stdcall or cdecl), but in x64 float's and integers are passed in different registers.\n </p>\n <p>\n  It's possible that those macro may make no difference to compilation of a 32-bit target, and are just there to ensure (or inform the reader/compiler) of the expected type, but that's pure conjecture on my part.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}