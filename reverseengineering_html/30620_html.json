{
    "title": "strange arm construct in objective-c application",
    "link": "https://reverseengineering.stackexchange.com/questions/30620/strange-arm-construct-in-objective-c-application",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reversing the objective-c application and stumbled upon an assembler construction that I don't understand:\n </p>\n <p>\n  This is call of some function with SP register (+ 0x18 offset) as parameter. (Picture1).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/b6lOP.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Picture1\" src=\"https://i.sstatic.net/b6lOP.png\"/>\n  </a>\n </p>\n <p>\n  This is part of that(sub_10015B4C8) function. X0 register is using for some calculations(which using for next jump) (Picture2).\n  <a href=\"https://i.sstatic.net/tcsbR.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Picture2\" src=\"https://i.sstatic.net/tcsbR.png\"/>\n  </a>\n </p>\n <p>\n  Picture3 shows the pseudo code generated by ida. As I said above there is jumpout that is calculated dinamycally. v0 shown by ida as x22 which as you can see in the last picture gets the value from the x0 register.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/aAkeI.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Picture3\" src=\"https://i.sstatic.net/aAkeI.png\"/>\n  </a>\n </p>\n <p>\n  The question is the following:\n </p>\n <p>\n  There are two options either x0 register is equal to SP + 0x18 or __chkstk_darwin changed the x0 register value (But I did not find any documentation for this function). With the first option it's hard for me to understand how the jump is calculated if x0 depends by the SP register?\n </p>\n <p>\n  Picture4 is end of function(with jump).\n  <a href=\"https://i.sstatic.net/M6x3h.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Picture4\" src=\"https://i.sstatic.net/M6x3h.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "152",
    "tags": [
        "ios",
        "arm64"
    ],
    "user": "CABAL",
    "time": "Jul 12, 2022 at 15:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem is the call to\n  <code>\n   _chkstk_darwin\n  </code>\n  . It is an internal compiler helper which probes the stack to make sure there’s enough space for local variables and does not modify\n  <code>\n   X0\n  </code>\n  , however IDA currently does not know that and assumes that\n  <code>\n   X0\n  </code>\n  is the return value as for any normal function.\n </p>\n <p>\n  If you modify the prototype of\n  <code>\n   _chkstk_darwin\n  </code>\n  to specify\n  <code>\n   void\n  </code>\n  return type and an empty spoiled registers list (\n  <code>\n   __spoiled<>\n  </code>\n  ), then X0 should be properly preserved across the call.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jul 15, 2022 at 9:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "CABAL",
                    "text": "<span class=\"comment-copy\">Then the X0 register depends by the SP register which is even weirder</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">That’s not weird. Looks like it’s used to take an address of a local variable.</span>",
                    "time": null
                },
                {
                    "user": "CABAL",
                    "text": "<span class=\"comment-copy\">Yes, but v2 using v1 which using v0(X0) by value so is jump dependent by localvar address?</span>",
                    "time": null
                }
            ]
        }
    ]
}