{
    "title": "Finding hidden string location using radare2 on ELF binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/14718/finding-hidden-string-location-using-radare2-on-elf-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working through some reverse engineering sample programs (IOLI crackmes) crackme0x00 - crackme0x09 which are gcc compiled ELF format binaries.  I was provided these by a colleague and can be downloaded from radare's github site (I can't add the link as I do not have the reputation points).  I think I can provide enough information to ask a properly formatted question.\n </p>\n <p>\n  I'm currently working on crackme0x09 and have run across a hurdle.  I disassemble the main:\n  <a href=\"https://i.sstatic.net/osYHT.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"disassembled main\" src=\"https://i.sstatic.net/osYHT.png\"/>\n  </a>\n </p>\n <p>\n  I notice that the first call to\n  <code>\n   sym.imp.printf\n  </code>\n  is taking it's input from the\n  <code>\n   ebx\n  </code>\n  register which is referenced by an offset\n  <code>\n   [ebx - 0x178b]\n  </code>\n  .\n </p>\n <p>\n  The\n  <code>\n   ebx\n  </code>\n  register is set, first, in\n  <code>\n   fcn.08048766\n  </code>\n  which I disassemble:\n  <a href=\"https://i.sstatic.net/nIclC.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"disassembled fcn.08048766\" src=\"https://i.sstatic.net/nIclC.png\"/>\n  </a>\n </p>\n <p>\n  So, in order:\n1)\n  <code>\n   0x84\n  </code>\n  is subtracted from the\n  <code>\n   esp\n  </code>\n  2)\n  <code>\n   ebx\n  </code>\n  is set equal to the location\n  <code>\n   esp\n  </code>\n  contains in\n  <code>\n   fcn.08048766\n  </code>\n  with:\n  <code>\n   mov ebx, dword[esp]\n  </code>\n  3)\n  <code>\n   0x18f7\n  </code>\n  is added to the new value of the\n  <code>\n   ebx\n  </code>\n  4)\n  <code>\n   eax\n  </code>\n  is loaded with this new address minus and offset\n  <code>\n   lea eax, [ebx - 0x178b]\n  </code>\n  5)  This is then pushed onto the stack for\n  <code>\n   sym.imp.printf\n  </code>\n  to print\n </p>\n <p>\n  If I print all the strings in the data section of the program (using\n  <code>\n   iz\n  </code>\n  command) I can see them there, but I'm having a hard time understanding how to interpret the results:\n </p>\n <pre><code>vaddr=0x08048838 paddr=0x00000838 ordinal=000 sz=5 len=4 section=.rodata type=ascii string=LOLO\nvaddr=0x0804883d paddr=0x0000083d ordinal=001 sz=21 len=20 section=.rodata type=ascii string=Password Incorrect!\n\nvaddr=0x08048855 paddr=0x00000855 ordinal=002 sz=14 len=13 section=.rodata type=ascii string=Password OK!\n\nvaddr=0x08048863 paddr=0x00000863 ordinal=003 sz=6 len=5 section=.rodata type=ascii string=wtf?\n\nvaddr=0x08048869 paddr=0x00000869 ordinal=004 sz=25 len=24 section=.rodata type=ascii string=IOLI Crackme Level 0x09\n\nvaddr=0x08048882 paddr=0x00000882 ordinal=005 sz=11 len=10 section=.rodata type=ascii string=Password:\n</code></pre>\n <p>\n  My question:  How can I tell what string is referenced by\n  <code>\n   [ebx - 0x178b]\n  </code>\n  and subsequent\n  <code>\n   ebx\n  </code>\n  offsets?\n </p>\n <p>\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "elf",
        "radare2"
    ],
    "user": "corporateWhore",
    "time": "Feb 23, 2017 at 0:46",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n This is a crackme from the IOLI series. They can be downloaded from radare's Github repo\n <a href=\"https://github.com/radare/radare2-regressions/tree/master/bins/elf/ioli\" rel=\"nofollow noreferrer\">\n  radare2-regressions\n </a>\n . One of the users of this site,\n <a href=\"http://reverseengineering.stackexchange.com/users/1485/jvoisin\">\n  jvoisin\n </a>\n , has\n <a href=\"https://dustri.org/b/defeating-ioli-with-radare2.html\" rel=\"nofollow noreferrer\">\n  written up how to solve all of them except crackme0x09\n </a>\n , the one in the question, using r2.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "corporateWhore",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, thanks.  I know the solution, but I'd like to figure out how to read these strings as they appear in the assembly.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "corporateWhore",
            "text": "<html><body><span class=\"comment-copy\">\n Would the solution be to check the GOT (I read\n <a href=\"http://grantcurell.com/2015/09/21/what-is-the-symbol-table-and-what-is-the-global-offset-table/\" rel=\"nofollow noreferrer\">\n  this\n </a>\n )?  Rather than referring to the absolute memory address, it refers to the GOT, who's address is know, as an offset.  But then how do I know where the GOT is in memory?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n I do not know how to use r2, but if you are able to dynamically analyze the program then all you have to do to read the strings being printed is look at the memory addresses in either\n <code>\n  eax\n </code>\n or\n <code>\n  esp\n </code>\n when a call to\n <code>\n  printf\n </code>\n is made. These addresses are of strings in the\n <code>\n  .rodata\n </code>\n section, not the GOT.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n The file is stripped. The only symbols in the binary will be those corresponding to functions called from dynamically linked libraries. These symbols will be in the\n <code>\n  .dynsym\n </code>\n section. This is why calls to\n <code>\n  printf\n </code>\n and\n <code>\n  scanf\n </code>\n are labelled but other function calls are not.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You are looking at so-called position-independent code (PIC). The program uses a helper function to get its current execution address into\n  <code>\n   ebx\n  </code>\n  and then adds a delta to it to calculate the address of the GOT (this works because even after the file has been moved in memory, the data segment including the GOT is still at the same offset from the function). To calculate\n  <code>\n   ebx\n  </code>\n  , you just need to remember that the\n  <code>\n   call\n  </code>\n  instruction pushes the return address onto the stack, so inside\n  <code>\n   fcn.08048766\n  </code>\n  <code>\n   [esp]\n  </code>\n  will contain\n  <code>\n   0x80486fd\n  </code>\n  .  Adding\n  <code>\n   0x18f7\n  </code>\n  , we get\n  <code>\n   0x8049FF4\n  </code>\n  which should be the GOT address, and then you can subtract\n  <code>\n   0x178b\n  </code>\n  to get\n  <code>\n   0x8048869\n  </code>\n  which should be the string.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Feb 23, 2017 at 7:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "corporateWhore",
                    "text": "<span class=\"comment-copy\">I was confusing the address inside <code>esp</code> when inside <code>fcn.08048766</code> with the current execution address when <code>call</code> is..called.  So I thought it would be <code>0x80486f2 - 0x84</code> going into <code>fcn.08048766</code>.  Thank you for the clarification.</span>",
                    "time": null
                }
            ]
        }
    ]
}