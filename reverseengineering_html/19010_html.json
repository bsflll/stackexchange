{
    "title": "extract zImage from MS-DOS executable",
    "link": "https://reverseengineering.stackexchange.com/questions/19010/extract-zimage-from-ms-dos-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an aarch64 kernel image with the following magic number:\n </p>\n <pre><code>root@localhost:/# cat msImage|xxd -l4  \n00000000: 4d5a 0091                                MZ..\n\nroot@localhost:/# file msImage \nmsImage: MS-DOS executable, MZ for MS-DOS\n</code></pre>\n <p>\n  Is it possible to extract the bootable zImage from this ? and also extract the aarch64 elf binary? how?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "4k",
    "tags": [
        "linux",
        "kernel"
    ],
    "user": "MOHAMMAD RASIM",
    "time": "Aug 7, 2018 at 21:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The overall format of an AArch64 Linux kernel can be found in\n  <a href=\"https://www.kernel.org/doc/Documentation/arm64/booting.txt\" rel=\"nofollow noreferrer\">\n   https://www.kernel.org/doc/Documentation/arm64/booting.txt\n  </a>\n </p>\n <p>\n  Of particular note (emphasis mine):\n </p>\n <blockquote>\n  <p>\n   The AArch64 kernel\n   <strong>\n    does not currently provide a decompressor\n   </strong>\n   and\ntherefore requires decompression (gzip etc.) to be performed by the\nboot loader if a compressed Image target (e.g. Image.gz) is used.  For\nbootloaders that do not implement this requirement, the uncompressed\nImage target is available instead.\n  </p>\n </blockquote>\n <p>\n  and indeed, I downloaded a\n  <a href=\"https://releases.linaro.org/archive/14.09/openembedded/aarch64/\" rel=\"nofollow noreferrer\">\n   sample image from Linaro\n  </a>\n  and its header matches the structure in section 4, i.e. the image is uncompressed.\n </p>\n <p>\n  hex dump of the header:\n </p>\n <pre><code>0000000000: 4D 5A 00 91 57 00 00 14 │ 00 00 08 00 00 00 00 00  MZ.............\n0000000010: 00 70 A8 00 00 00 00 00 │ 00 00 00 00 00 00 00 00  ...............\n0000000020: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00  ...............\n0000000030: 00 00 00 00 00 00 00 00 │ 41 52 4D 64 40 00 00 00  ........ARMd@...\n</code></pre>\n <p>\n  You can see the\n  <code>\n   magic\n  </code>\n  field at offset 0x38 (\n  <code>\n   0x644d5241\n  </code>\n  or \"ARM\\x64\" as text).\n </p>\n <p>\n  The \"MS-DOS executable\" text shown by\n  <code>\n   file\n  </code>\n  is a red herring: the overall image format is actually Portable Executable (PE), which has to start with the\n  <code>\n   MZ\n  </code>\n  signature. Linux kernel employs a few tricks to appear like a valid PE file so that it can be\n  <a href=\"https://github.com/torvalds/linux/commit/3c7f255039a2ad6ee1e3890505caf0d029b22e29\" rel=\"nofollow noreferrer\">\n   booted by a UEFI-compliant firmware\n  </a>\n  .\n </p>\n <p>\n  There is no \"elf bibnary\" to extract because the kernel has been linked into the PE file format and does not contain any ELF headers anymore. IF you want to disassemble it, just disassemble it as raw AArch64 binary (e.g. pass\n  <code>\n   -bbinary -maarch64\n  </code>\n  flags to an ARM\n  <code>\n   objdump\n  </code>\n  ) - the second instruction will jump to the real entrypoint:\n </p>\n <pre><code>0000 4D 5A 00 91    ADD             X13, X18, #0x16\n0004 57 00 00 14    B               stext\n</code></pre>\n <p>\n  (see\n  <code>\n   arch/arm64/kernel/head.S\n  </code>\n  in kernel sources for more details).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Yves Lhuillier",
            "time": "Jul 10, 2020 at 15:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MOHAMMAD RASIM",
                    "text": "<span class=\"comment-copy\">\"just disassemble it as raw AArch64 binary\" How? I'm trying to run it through objdump and I get <code>File format not recognized</code>. also, in addition to disassembling it, I also want to boot the image and the device I'm booting this on has problems with this type of image and I have to use a zImage to boot</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">What device? are you sure it needs an aarch64 kernel and not plain arm?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Please add all relevant details to the question or make a new one; I answered what was asked</span>",
                    "time": null
                }
            ]
        }
    ]
}