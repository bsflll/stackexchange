{
    "title": "Debug process that use /dev/watchdog",
    "link": "https://reverseengineering.stackexchange.com/questions/25050/debug-process-that-use-dev-watchdog",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to debug a process with gdb into Linux system, but the problem is that process pings\n  <code>\n   /dev/watchdog\n  </code>\n  so when I tried to debug it, it stop the process for longer than the watchdog interval so the system is rebooting.\n </p>\n <p>\n  One solution is to patch the binary so it will not use\n  <code>\n   /dev/watchdog\n  </code>\n  and than reboot the system so the \"new\" binary will run.\n </p>\n <p>\n  But sometime I can't do this solution because I don't want to reboot the system. And I don't control on system's startup script(that activate the watchdog)\n </p>\n <p>\n  Is there another solution?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "233",
    "tags": [
        "linux",
        "gdb",
        "dynamic-analysis"
    ],
    "user": "yfr24493AzzrggAcom",
    "time": "Apr 15, 2021 at 5:54",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n The question is if you're in control of starting said process. Also you don't mention if this is Linux. If you are and if it is, what I'd be doing first of all would be to see which libc function is used to open\n <code>\n  /dev/watchdog\n </code>\n . Suppose it's\n <a href=\"https://linux.die.net/man/3/open\" rel=\"nofollow noreferrer\">\n  <code>\n   open\n  </code>\n </a>\n for a second. In this case you could overwrite it and open your own \"whatever\" (return some magic number) and overwrite\n <code>\n  read\n </code>\n /\n <code>\n  write\n </code>\n as appropriate. The - by far - simplest solution would be to use\n <a href=\"https://linux.die.net/man/8/ld.so\" rel=\"nofollow noreferrer\">\n  <code>\n   LD_PRELOAD\n  </code>\n </a>\n and provide your own mock versions of those functions. Depends...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Abdullah Mohamed",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L You are referring to system calls hooking, is that correct?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Nope, I don't know how you'd do that from userland or if that's even possible on Linux.\n <code>\n  LD_PRELOAD\n </code>\n (ab)uses the fact that symbols defined by a shared object take precedence by load order. And therefore if you preload a particular custom shared object you can hook functions used by a binary or (other) shared object.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "yfr24493AzzrggAcom",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L see my edit. That Linux,and I don't control on system startup script.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Still too little information then, sorry. You seem to be willing to only give information piecemeal, but for a comprehensive answer you have to give comprehensive information. For example on a modern system you could use bubblewrap or similar to effectively deny your application to be debugged the ability to reboot, so even though\n <code>\n  /dev/watchdog\n </code>\n would be an issue it won't inside a namespace or without the capability to reboot the system. Either way, if you don't control the startup script (of what ...\n <code>\n  /etc/rc\n </code>\n ?) what\n <i>\n  do you control\n </i>\n ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Assuming you are using Linux and a loadable watchdog module (like\n  <code>\n   ipmi_watchdog\n  </code>\n  ), you could try to modify the value of the corresponding module's\n  <code>\n   action\n  </code>\n  parameter, like using\n  <code>\n   none\n  </code>\n  instead of\n  <code>\n   reset\n  </code>\n  .\n </p>\n <p>\n  Then the watchdog will fire, but nothing will happen (except an event log message in the BMC, maybe).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "U. Windl",
            "time": "Apr 13, 2021 at 13:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}