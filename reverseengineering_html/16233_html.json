{
    "title": "IDA Pro: Define local variables from non-standard powerpc stack register",
    "link": "https://reverseengineering.stackexchange.com/questions/16233/ida-pro-define-local-variables-from-non-standard-powerpc-stack-register",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using IDA pro 6.95 (paid version) to RE some PowerPC code. The PowerPC normally uses\n  <code>\n   r1\n  </code>\n  as the stack pointer, so IDA builds the stack frame and local variables from\n  <code>\n   r1\n  </code>\n  . Parameters are passed in\n  <code>\n   r3\n  </code>\n  ,\n  <code>\n   r4\n  </code>\n  ,\n  <code>\n   r5\n  </code>\n  , etc. The problem I am having that I see this:\n </p>\n <pre><code>.text: foo:\n.text:.set back_chain, -0x30                     // Stack frame\n.text: .set var_4, -4\n.text: .set sender_lr,  4\n<<<function preamble snipped>>>\n.text:               mr        r31, r1        // Copy stack pointer to r31\n.text:               stw       r3, 8(r31)     // All local variables are relative\n.text:               stw       r4, 0xC(r31)   //  to r31, instead of r1, so IDA\n                                              //  doesn't recognize them.\n</code></pre>\n <p>\n  And I want to see this:\n </p>\n <pre><code>.text: foo:\n.text:.set back_chain, -0x30                     // Stack frame\n.text: .set var_C, -C\n.text: .set var_8, -8\n.text: .set var_4, -4\n.text: .set sender_lr,  4\n<<<function preamble snipped>>>\n.text:                  mr        r31, r1        // Copy stack pointer to r31\n.text:                  stw       r3, var_8(r31) // All local variables are\n.text:                  stw       r4, var_C(r31) //  recognized and nameable.\n</code></pre>\n <p>\n  What I want is to convert all, e.g.\n  <code>\n   8(r31)\n  </code>\n  local variable references in the function to normal\n  <code>\n   var_8(r31)\n  </code>\n  syntax. I do not want to have to change each reference manually.  Is there a way to:\n </p>\n <ul>\n  <li>\n   Convince IDA that\n   <code>\n    r31\n   </code>\n   is the stack pointer?\n  </li>\n  <li>\n   Change all\n   <code>\n    8(31)\n   </code>\n   to\n   <code>\n    var_8(r31)\n   </code>\n   in a single command?\n  </li>\n  <li>\n   Otherwise get the effect I am looking for in a way I haven't thought of?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "948",
    "tags": [
        "ida",
        "disassembly",
        "powerpc"
    ],
    "user": "bangaboo",
    "time": "Sep 1, 2017 at 15:20",
    "comments": [
        {
            "user": "user22967",
            "text": "<html><body><span class=\"comment-copy\">\n The old PPC ELF spec (\n <a href=\"http://refspecs.linuxbase.org/elf/elfspec_ppc.pdf\" rel=\"nofollow noreferrer\">\n  refspecs.linuxbase.org/elf/elfspec_ppc.pdf\n </a>\n ) defines r31 as 'Used for local variables or \"environment pointers\"', so maybe this is what you are seeing in this code. So it might help to specify which platform the code you are analyzing is supposed to run on.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "LÃ©o Lam",
            "text": "<html><body><span class=\"comment-copy\">\n @MichaelEngel Not OP, but I'm also seeing this in the\n <code>\n  main()\n </code>\n function of an executable that was compiled using CodeWarrior. It does the same thing as OP's function: the SP is copied to r31, and r31 is used as the SP in the rest of the function.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   Disclaimer: I'm not going to create a working code example here, and I did not test this on PowerPC for your specific purpose. YMMV\n  </em>\n </p>\n <p>\n  I could think of two ways of doing that. First will be the manual approach by using some IDAPython magicry to manually force all offsets based on\n  <code>\n   r31\n  </code>\n  to the stack frame structure. Second (which is the one likely used) is using a designated API just for that.\n </p>\n <p>\n  You'll need to:\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     Get the hidden stack frame structure ID for the function you're running on\n    </strong>\n    \n\n    This can easily be done by calling the\n    <code>\n     ida_frame.get_frame\n    </code>\n    function with any address within the desired function. This function returns an ID used to identify this structure in the IDB.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     go over instruction by instruction and identify all dereferences of\n     <code>\n      r31\n     </code>\n    </strong>\n    \n\n    There are many approaches here. From getting the disassembly string and parsing actual text to operand specific APIs and more. So i'll leave this as the first exercise for the reader.\n   </p>\n  </li>\n  <li>\n   <strong>\n    Set those dereferences to dereferencing the stack structure\n   </strong>\n   \n\n   This, again, has several APIs to pick from,\n   <code>\n    OffOpEx\n   </code>\n   is an example. If you need to create new stack variables as you go, there are multiple functions for this as well.\n  </li>\n </ol>\n <p>\n  The second approach would be using one of two APIs designed for the purpose. the two APIs are called\n  <code>\n   idc.define_local_var\n  </code>\n  and\n  <code>\n   ida_frame.add_regvar\n  </code>\n  .\n </p>\n <p>\n  <code>\n   define_local_var\n  </code>\n  is defined as follows:\n </p>\n <pre><code>def define_local_var(start, end, location, name):\n    \"\"\"\n    Create a local variable\n    @param start: start of address range for the local variable\n    @param end: end of address range for the local variable\n    @param location: the variable location in the \"[bp+xx]\" form where xx is\n                     a number. The location can also be specified as a\n                     register name.\n    @param name: name of the local variable\n    @return: 1-ok, 0-failure\n    @note: For the stack variables the end address is ignored.\n           If there is no function at 'start' then this function.\n           will fail.\n    \"\"\"\n</code></pre>\n <p>\n  And will do all the work of locating the stack structure and defining new members if needed. This is probably the first thing you want to play with, however you'll still need to iterate over all the instructions and identify\n  <code>\n   r31\n  </code>\n  offsets manually.\n </p>\n <p>\n  The\n  <code>\n   add_regvar\n  </code>\n  function is called by\n  <code>\n   define_local_var\n  </code>\n  and is responsible to applying the variable created by\n  <code>\n   define_local_var\n  </code>\n  to instructions. You can read more about it\n  <a href=\"https://www.hex-rays.com/products/ida/support/sdkdoc/group__regvar.html#ga5f77d2c231f8faeb5939be2bc8e2a298\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jan 27, 2018 at 20:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was faced with similar issue and found the following workaround:\n </p>\n <ol>\n  <li>\n   Create specific structure with field offset equal to your\n   <code>\n    r31\n   </code>\n   offset\n  </li>\n  <li>\n   Use \"Structure offset (T)\" for each interesting instruction.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Jul 2, 2018 at 11:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}