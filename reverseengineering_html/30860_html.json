{
    "title": "How to select an item in IDAPython, in decompilation view?",
    "link": "https://reverseengineering.stackexchange.com/questions/30860/how-to-select-an-item-in-idapython-in-decompilation-view",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to automate calling the DeepScanVariable function from the HexRaysPyTools right-click menu (that serves to reconstruct structures).\n </p>\n <p>\n  I have changed the arguments types for a list of functions, based on data gathered at run-time. Now, I would like to go over that list of functions, and for each argument of a given type, select that argument, right-click, and select Deep Scan Variable.\n </p>\n <p>\n  What that HexRaysPyTools function does is roughly:\n </p>\n <pre><code>def activate(self, ctx):\n    hx_view = idaapi.get_widget_vdui(ctx.widget)\n    obj = api.ScanObject.create(hx_view.cfunc, hx_view.item)\n    (...)\n</code></pre>\n <p>\n  I already found the action name by calling\n  <code>\n   idaapi.get_registered_actions()\n  </code>\n  .\nThen I give focus to the decompilation view, to make\n  <code>\n   get_widget_vdui\n  </code>\n  happy and fire the action:\n </p>\n <pre><code>widget = idaapi.find_widget('Pseudocode-A')\nidaapi.activate_widget(widget, 1)\nidaapi.process_ui_action('HexRaysPyTools:DeepScanVariable')\n</code></pre>\n <p>\n  What's missing is that I'm supposed to select the item, so that\n  <code>\n   hx_view.item\n  </code>\n  has the correct value and I cannot find any way to do that. I can iterate over arguments of a decompiled function just fine, I just cannot find a way to actually mark an item as selected.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "377",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "overflo",
    "time": "Sep 7, 2022 at 15:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you\n  <a href=\"https://github.com/igogo-x86/HexRaysPyTools/blob/master/HexRaysPyTools/api.py#L21\" rel=\"nofollow noreferrer\">\n   look closer at that code in HexRaysPyTools\n  </a>\n  , you'll see the following:\n </p>\n <pre><code>    def create(cfunc, arg):\n        # Creates object suitable for scaning either from cexpr_t or ctree_item_t\n        if isinstance(arg, idaapi.ctree_item_t):\n            # ... code for ctree_item_t ...\n        else:\n            cexpr = arg\n\n        if cexpr.op == idaapi.cot_var:\n            lvar = cfunc.get_lvars()[cexpr.v.idx]\n            result = VariableObject(lvar, cexpr.v.idx)\n            result.ea = ScanObject.get_expression_address(cfunc, cexpr)\n            return result\n</code></pre>\n <p>\n  So if you can get your hands on a\n  <code>\n   cexpr_t\n  </code>\n  containing the\n  <code>\n   lvar_t\n  </code>\n  that you want, you're good to go. For example, you could write a small visitor class whose\n  <code>\n   visit_expr\n  </code>\n  method looks for\n  <code>\n   cexpr_t\n  </code>\n  objects of type\n  <code>\n   cot_var\n  </code>\n  , whose\n  <code>\n   .var\n  </code>\n  field refers to the\n  <code>\n   lvar_t\n  </code>\n  object that you want. Alternatively, you could perhaps edit the code to accept a raw\n  <code>\n   lvar_t\n  </code>\n  (though pay close attention to the call to\n  <code>\n   ScanObject.get_expression_address\n  </code>\n  ).\n </p>\n <p>\n  What I would do would be to edit the code so that it reads as follows:\n </p>\n <pre><code>def create(cfunc, arg):\n    # Creates object suitable for scaning either from cexpr_t or ctree_item_t OR lvar_t\n    if isinstance(arg, idaapi.lvar_t):\n        index = list(cfunc.get_lvars()).index(arg)\n        return VariableObject(arg, index)\n    # ... rest of function as before ...\n</code></pre>\n <p>\n  Then you can simply call the function above with an\n  <code>\n   lvar_t\n  </code>\n  object you get from\n  <code>\n   mba_t::vars\n  </code>\n  . You can use\n  <code>\n   mba_t::argidx\n  </code>\n  to look up arguments by their index, and if you need to look up a variable by location, note that\n  <code>\n   lvar_t\n  </code>\n  derives from\n  <code>\n   lvar_locator_t\n  </code>\n  , which in turn contains a\n  <code>\n   vdloc_t\n  </code>\n  (which derives from\n  <code>\n   argloc_t\n  </code>\n  ). I.e., you can use\n  <code>\n   lvar_t::location\n  </code>\n  to inspect the physical location of a given\n  <code>\n   lvar_t\n  </code>\n  if you need to look up arguments by location instead of by numeric index.\n </p>\n <p>\n  In general, it seems like you've made a lot of progress getting to this point. Don't let the Hex-Rays SDK scare you; if\n  <code>\n   HexRaysPyTools\n  </code>\n  doesn't do what you want, try modifying it. If that still doesn't work, read the code deeper to figure out why not, and reimplement the logic if you have to.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Sep 8, 2022 at 20:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}