{
    "title": "How to get all the references to function using PyDBG?",
    "link": "https://reverseengineering.stackexchange.com/questions/2180/how-to-get-all-the-references-to-function-using-pydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to get all the addresses in the binary that some function is called from using PyDbg. The address of the function will be supplied as a parameter.\n </p>\n <p>\n  Do I have actually to scan all the code, looking for the call that is calling that function or is there a more elegant way?\n </p>\n <p>\n  <strong>\n   Update:\n  </strong>\n </p>\n <p>\n  The function is not exported or imported.\n </p>\n <p>\n  <strong>\n   Update 2:\n  </strong>\n </p>\n <p>\n  For example\n  <strong>\n   ImmDbg\n  </strong>\n  how can it find all the references and show them?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "451",
    "tags": [
        "malware",
        "debuggers"
    ],
    "user": "PhoeniX",
    "time": "Jun 3, 2013 at 19:26",
    "comments": [
        {
            "user": "0xea",
            "text": "<html><body><span class=\"comment-copy\">\n im not sure pydbg has any static analysis built into it and so i don't think it could do much more than what Igor suggested\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n For update 2: it does that using static analysis. Roughly the same as IDA. Disassemble the entire binary and note every immediate destination.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n presumably I still do not know about\n <b>\n  radare\n </b>\n capabilities, is there some \"cheep\" static disassembler library that can be connected to PyDbg and produce some sort of \"ImmDbg\" result?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @ph0sec: you shouldn't amend your question with things that\n <i>\n  broaden\n </i>\n instead of narrow down the scope of it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L: So, how do you suggest to ask this question? In my opinion, this will help to understand the matter and resolve the problem I have.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since you want all the\n  <code>\n   call\n  </code>\n  instructions (and possibly fake\n  <code>\n   call\n  </code>\n  s using\n  <code>\n   push\n  </code>\n  and\n  <code>\n   jmp\n  </code>\n  and similar using opaque predicates) you won't get around static analysis (\n  <a class=\"post-tag\" href=\"/questions/tagged/static-analysis\" rel=\"tag\" title=\"show questions tagged 'static-analysis'\">\n   static-analysis\n  </a>\n  ) of the binary. And if the binary is in any way packed or encrypted that means you need to get through that layer first.\n </p>\n <p>\n  Igor's solution will be your best bet short of loading the file into a good disassembler and finding all the cross-references to the function you are interested in. But it has the limitation that Igor already pointed out.\n </p>\n <p>\n  Static analysis has to deal with a lot of ambiguities and issues when distinguishing data and code. But\n  <em>\n   good\n  </em>\n  disassemblers are fairly good at making the right guess and will offer to interactively mark items one way or the other in case of doubt.\n </p>\n <h3>\n  Conclusion\n </h3>\n <p>\n  What this means is that PyDbg is probably not the right tool for the problem at hand unless you manage to coerce it into making use of a proper full-fledged disassembler to get all cross-references. But the better choice is probably something like\n  <a href=\"http://radare.org/\">\n   radare2\n  </a>\n  and then, if you are more familiar with PyDbg, applying the gained knowledge to the debugged target in PyDbg.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "0xC0000022L",
            "time": "Jun 3, 2013 at 17:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Ok thanks, I understand your point and I'll take a look @ radare. I'd like to understand another thing - in the main question</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@ph0sec: if it's closely related, edit your question, otherwise better ask a new question :) ... it's better than changing the scope of an existing question after people answered.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Put a breakpoint on the function address.\n  </li>\n  <li>\n   When hit, get the dword at\n   <code>\n    ESP\n   </code>\n   - that would be the return address.\n  </li>\n </ol>\n <p>\n  This, obviously, will catch only the actual calls, not all potential ones.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jun 3, 2013 at 17:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Thanks, this is indeed the obvious one. But I need all of them :).</span>",
                    "time": null
                }
            ]
        }
    ]
}