{
    "title": "C representation of simple assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/17754/c-representation-of-simple-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following very simple X86 assembly:\n </p>\n <pre><code>shr cx, 1\njae short <addr>\n</code></pre>\n <p>\n  So basically, the jump will be taken if the Carry flag is not set. In the case of\n  <code>\n   shr\n  </code>\n  , CF will be set to the value of the bit shifted out of the register.\n </p>\n <p>\n  I was wondering how the same will look like in C (I know it has to be something like\n  <code>\n   if ((num >>> 1) <SOME COMPARISON>)\n  </code>\n  , as obviously you cannot check for the carry flag, and the value of the shifted bit is unknown.\n </p>\n <p>\n  I understand I'm probably missing something pretty obvious, but still can't figure out the answer.\n </p>\n <p>\n  Update: Thanks to all the comments and answers, although they don't really show what I need. I understand what the code does (checks for odd/even, then jumps if it's one of those). My question is really what kind of C code can generate exactly the instructions I specified (doesn't matter if 16/32/64 bits), which is shift + jump. I'm starting to think that either this is just ASM (which is unlikely, given the amount of times I've found the construct, but certainly possible) or some C code that does everything separate, but gets really optimized at some point, like bit rotation in modern compilers\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 5,
    "views": "416",
    "tags": [
        "x86",
        "decompilation",
        "c"
    ],
    "user": "Edu Garcia",
    "time": "Mar 22, 2018 at 8:29",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n This is equivalent to checking if the considered value is odd or even. And, it jumps if odd.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Okay:\nJAE is synonym to JNC (jump if no carry flag).\n </p>\n <p>\n  And the docs for SHR say:”Bits shifted beyond the destination are first shifted into the CF flag.”\n </p>\n <p>\n  So you jump when the rightmost bit (before shifting) is 0.\n </p>\n <p>\n  For simplicity without the changing of cx:\n </p>\n <pre><code>if (cx & 1 == 0) ...         \n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "manduca",
            "time": "Mar 21, 2018 at 12:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Uwe Plonus",
                    "text": "<span class=\"comment-copy\">This is only part of the solution as the shift also divides CX by 2 which could be relevant in the following program flow.</span>",
                    "time": null
                },
                {
                    "user": "manduca",
                    "text": "<span class=\"comment-copy\">You are correct. That is what I was trying to say with “for simplicity without the changing of cx”.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  normally jae will be used when comparing unsigned type with a negative type\n </p>\n <p>\n  jge will be used when comparing an unsigned type with a positive type\n </p>\n <p>\n  you can try short , byte , char etc etc instead of unsigned int in the code below to get the cx register instead of eax register in the disassenbly that follows the code\n </p>\n <p>\n  for example this code will get a jae as below\n </p>\n <pre><code>#include <windows.h>\n#include <stdio.h>\nint  main (void)\n{\n    unsigned int a = 1;\n    unsigned int b = ( ( (a >> 1) < -1 )  ? 0x1337 : 0xdead );\n    return b;    \n}\n</code></pre>\n <p>\n  disassembly\n </p>\n <pre><code>cdb -c \"g shotcmp!main;uf .\" shotcmp.exe\n\nMicrosoft (R) Windows Debugger Version 10.0.16299.15 X86\n\n0:000> cdb: Reading initial command 'g shotcmp!main;uf .'\n\nshotcmp!main:\n012a6830 55              push    ebp\n012a6831 8bec            mov     ebp,esp\n012a6833 83ec0c          sub     esp,0Ch\n012a6836 c745f801000000  mov     dword ptr [ebp-8],1\n012a683d 8b45f8          mov     eax,dword ptr [ebp-8]\n012a6840 d1e8            shr     eax,1  <<<<<<<<<<<<<<<<\n012a6842 83f8ff          cmp     eax,0FFFFFFFFh <<<<<<<<<<<<<<<<\n012a6845 7309            jae     shotcmp!main+0x20 (012a6850) <<<<<<<<<<<<<<\n\nshotcmp!main+0x17:\n012a6847 c745fc37130000  mov     dword ptr [ebp-4],1337h\n012a684e eb07            jmp     shotcmp!main+0x27 (012a6857)\n\nshotcmp!main+0x20:\n012a6850 c745fcadde0000  mov     dword ptr [ebp-4],0DEADh\n\nshotcmp!main+0x27:\n012a6857 8b4dfc          mov     ecx,dword ptr [ebp-4]\n012a685a 894df4          mov     dword ptr [ebp-0Ch],ecx\n012a685d 8b45f4          mov     eax,dword ptr [ebp-0Ch]\n012a6860 8be5            mov     esp,ebp\n012a6862 5d              pop     ebp\n012a6863 c3              ret\n0:000>\n</code></pre>\n <p>\n  an even or odd testing code in c and asm the asm function uses jae to branch \nwhile c use je to branch\ntesting for carry flag in c is not done usually\n </p>\n <pre><code>#include <stdio.h>\nchar *str[] = {\"odd\",\"even\"} ;\nvoid c_eve_or_odd( int num){\n    (num & 1 ) ? printf(\"%4d%5s\\t\",num,str[0]) : printf (\"%4d%5s\\t\",num,str[1]) ;  \n}\nvoid asm_eve_or_odd(int num) {\n    __asm {\n        mov ecx , num\n        and ecx,1\n        shr ecx ,1\n        jae myeven\n    }\n    printf(\"%4d%5s\\t\",num,str[0]);\n    goto doexit;\nmyeven:\n    printf (\"%4d%5s\\t\",num,str[1]);\n    goto doexit;\ndoexit: \n    return;   \n}\nvoid main(void) {\n    for(int i =-5; i<=5; i++) { \n        c_eve_or_odd(i);\n        asm_eve_or_odd(i);\n        printf(\"\n\"); \n    }\n}\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/2OimD.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/2OimD.png\"/>\n  </a>\n </p>\n <p>\n  just to satisfy my curiosity i grepped all windows binary in system32 for the pattern and i couldn't find one instance of\n  <strong>\n   shr cx,1 jae\n  </strong>\n  there are indeed\n  <strong>\n   shr cx ,1\n  </strong>\n  but none followed by a jae\n </p>\n <p>\n  just a followup\n </p>\n <p>\n  grep all exe in c:\\windows\\system32\\ for shr cx,1  sort and print uniq\n </p>\n <pre><code>for /f %i in ( 'dir /b *.exe ' ) do grep -obUaPH \\x66\\xd1\\xe9 %i  >> checkforshrcx1.txt\nuniq -w  5 checkforshrcx1.txt | sort\n\nappidpolicyconverter.exe:18846:f╤Θ\nautochk.exe:247427:f╤Θ\nautofmt.exe:236801:f╤Θ\ncleanmgr.exe:51672:f╤Θ\nconhost.exe:86983:f╤Θ\ndxcap.exe:479138:f╤Θ\nkrnl386.exe:34661:f╤Θ\nntkrnlpa.exe:52959:f╤Θ\nntoskrnl.exe:72750:f╤Θ\nntvdm.exe:215256:f╤Θ\nPresentationSettings.exe:105027:f╤Θ\nRelPost.exe:79287:f╤Θ\nrstrui.exe:186600:f╤Θ\nsmss.exe:12952:f╤Θ\nsppsvc.exe:2635363:f╤Θ\nTVWSetup.exe:5441147:f╤Θ\n</code></pre>\n <p>\n  grep all exe in c:\\windows\\system32\\ for shr cx,1  followed by jae  sort and print uniq\n </p>\n <pre><code>for /f %i in ( 'dir /b *.exe ' ) do grep -obUaPH \\x66\\xd1\\xe9\\x73 %i  >> checkforshrcx1jae.txt\nls -l checkforshrcx1jae.txt\n-rw-rw-rw-  1  0 0 2018-03-23 10:53 checkforshrcx1jae.txt\n\ncat checkforshrcx1jae.txt\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 23, 2018 at 5:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Edu Garcia",
                    "text": "<span class=\"comment-copy\">Thank you for your answer! However, as you can see in my code, there is no extra <code>cmp</code> instruction. With the <code>cmp</code> is obvious to understand, but I still can't figure out what my example C code can be.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">shr shifts the discarded bit into cf flag  and checking carry flag is not easily codable in c ( are you sure if this snippet is not a part of handmade asm inlined etc i edited my answer and added a  c evenorodd versus asm_evenoradd   asm code uses jae   and both code are comaparably similar</span>",
                    "time": null
                },
                {
                    "user": "Edu Garcia",
                    "text": "<span class=\"comment-copy\">Well, I'm analyzing some binary code, I cannot assume this was not hand made, but my current assumption is that the code was C and heavily optimized. I just can't think of that piece of code that this might have come from, and given the answers I guess nobody thinks this came from C either.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">well goodluck and update the question or write a self answer if you find out  just to whet my curiosity i grepped for the pattern in all windows exes and i didnt happen to find an exe that used the construct</span>",
                    "time": null
                },
                {
                    "user": "Edu Garcia",
                    "text": "<span class=\"comment-copy\">Thanks for all your help and great examples. Well, this actually came from an MS-DOS executable, so maybe new compilers do different tricks. I'm trying to find out what compiler was used for this, but that's also becoming a bit difficult. I'll update here if I ever find out, thanks again!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I cannot say if this is certanly the case here, but shift right is basicly divide by 2 so posted code is actualy testing for odd numbers.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Rokta",
            "time": "Mar 21, 2018 at 7:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You cannot write C code which produces exactly the given assembly sequence.\n </p>\n <p>\n  C is a higher level language which does also manage more than assembly.\n </p>\n <p>\n  Basically the given instruction sequence in assembly\n </p>\n <pre><code>shr cx, 1\njae short <addr>\n</code></pre>\n <p>\n  Does the following\n </p>\n <pre><code>cx_temp = cx;\ncx >>= 1;\nif (cx_temp & 0x01) {\n}\n</code></pre>\n <p>\n  The problem is that such shortcuts like in assembly are not available in higher level languages as each assembly is different and higher level languages (like C) hide this differences to you and therefore create assembly level constructs that are more extensive than needed...\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Uwe Plonus",
            "time": "Apr 10, 2018 at 8:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Edu Garcia",
                    "text": "<span class=\"comment-copy\">The question I'm trying to answer is what would the original C code (if this was indeed C) could look like. It might as well be like your example, if you think a C compiler could take what you wrote and optimize it to look like my assembly code.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is the value of\n  <code>\n   cx\n  </code>\n  used again in both branches? If not, this can just be an optimization where the compiler is basically allowed to change the value of variables willy-nilly if they are never used again.\n </p>\n <p>\n  So something like:\n </p>\n <pre><code>int f(int x) {\n    if((x&1)==0) {\n        x>>=1;\n        //Do stuff with x\n    }\n    return 0;\n}\n</code></pre>\n <p>\n  could compile to something like what you have. In one branch of the C code, from a high-level perspective\n  <code>\n   x\n  </code>\n  shouldn't be changed. But since\n  <code>\n   x\n  </code>\n  is never used again in that branch, the compiler is free to change it if that helps with optimization.\n </p>\n <p>\n  Even if\n  <code>\n   cx\n  </code>\n  is used again later, this kind of optimization is still possible, it's just a little harder to find a specific example.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Chris",
            "time": "Apr 10, 2018 at 22:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Edu Garcia",
                    "text": "<span class=\"comment-copy\">I'll need to check the specific example again, but I think this code is done in multiple places in a loop, so the CX value is maintained and shifted until there is a 0 there, so I'd say yes, the value is reused. I'll reply back if it's not.</span>",
                    "time": null
                },
                {
                    "user": "Chris",
                    "text": "<span class=\"comment-copy\">@EduGarcia Either way, posting more of the code would help. It's hard to say what code may have compiled to that with such a small snippet.</span>",
                    "time": null
                }
            ]
        }
    ]
}