{
    "title": "ghidra: how to run a python 3 script with headless analyzer",
    "link": "https://reverseengineering.stackexchange.com/questions/21630/ghidra-how-to-run-a-python-3-script-with-headless-analyzer",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I read the documentation of\n  <a href=\"https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html#examples\" rel=\"noreferrer\">\n   headleass analyzer\n  </a>\n  . It is used to perform analysis on existing binaries. I know that\n  <code>\n   -postscript\n  </code>\n  flag allows to enter the analysis script. I have a java script which works fine. But, I want to use python 3 for the analysis. I want to run that like:\n </p>\n <pre><code>./analyzeHeadless ghidra-project-directory -import binary-file -postscript yourpythonscript\n</code></pre>\n <p>\n  Is it possible to run python script for the analysis? Also, is there any documentation available to do that?\n </p>\n <blockquote>\n  <p>\n   Edit:\n  </p>\n  <p>\n   I made a following script and it does work fine (but it gives me not\n  found errors for DecompInterface):\n  </p>\n  <pre><code>import ghidra.app.util.headless.HeadlessScript;\nimport ghidra.app.decompiler.ClangNode;\nimport ghidra.app.decompiler.ClangToken;\nimport ghidra.app.decompiler.ClangLine;\nimport ghidra.app.decompiler.ClangTokenGroup;\nimport ghidra.app.decompiler.DecompInterface;\nimport ghidra.app.decompiler.DecompileResults;\nimport ghidra.program.model.address.Address;\nimport ghidra.program.model.listing.CodeUnit;\nimport ghidra.program.model.listing.Function;\nimport ghidra.program.model.listing.FunctionIterator;\nimport ghidra.program.model.listing.InstructionIterator;\nimport ghidra.program.model.listing.Program;\nimport ghidra.program.model.listing.Variable;\nimport ghidra.program.model.pcode.HighFunction;\nimport ghidra.program.model.pcode.HighSymbol;\nimport ghidra.program.model.pcode.HighVariable;\nimport ghidra.program.model.pcode.LocalSymbolMap;\nimport ghidra.program.model.pcode.PcodeOp;\nimport ghidra.program.model.pcode.Varnode;\nimport ghidra.program.model.symbol.Symbol;\nimport ghidra.program.model.symbol.Reference;\nimport ghidra.program.model.symbol.ReferenceIterator;\nimport ghidra.util.task.ConsoleTaskMonitor;\n\nargs = getScriptArgs()\n\nprint(args)\n\np = currentProgram\nprint(p)\n\nfilename = \"/projects/zephyr/Ruturaj/ghidra_learning/\" + p.getName() + \".txt\"\nprint(filename)\n\n#di = DecompInterface()\n#print(di)\n</code></pre>\n </blockquote>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ghidra"
    ],
    "user": "R4444",
    "time": "Jul 8, 2019 at 17:42",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n AFAIK Ghidra relies on Jython which does not support Python 3. You'll have to use Python 2.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "R4444",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks @IgorSkochinsky I'll note that down in the answer\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I turns out that the python script can be used with headless analyzer script.\n </p>\n <p>\n  Using the following command I can run it, just like the java file:\n </p>\n <pre><code>./analyzeHeadless ghidra-project-directory -import binary-file -postscript yourpythonscript\n</code></pre>\n <p>\n  Apparently all the classes defined for java can be used directly in the python script.\n </p>\n <p>\n  Particular class can be imported with\n  <code>\n   from import statements\n  </code>\n  , for example in java looks like:\n </p>\n <pre><code>import ghidra.program.model.listing.Variable;\n</code></pre>\n <p>\n  And using python:\n </p>\n <pre><code>from ghidra.program.model.listing import Variable;\n</code></pre>\n <p>\n  To import the\n  <code>\n   variable\n  </code>\n  class. The variable class can be imported just like java (see the import statement above). But, then you have to use the whole path name to access it. For example:\n </p>\n <pre><code>something = ghidra.program.model.listing.Variable()\n</code></pre>\n <p>\n  So, in conclusion, the same script can be written using python by importing the classes without any issue. Hope this helps someone.\n </p>\n <blockquote>\n  <p>\n   Edit:\n  </p>\n  <p>\n   As @igor said in the comment, it works only with python 2.7 (as ghidra\n  relies on\n   <code>\n    Jython\n   </code>\n   ). For python 3.x, something like\n   <a href=\"https://github.com/justfoxing/ghidra_bridge\" rel=\"noreferrer\">\n    <code>\n     ghidra_bridge\n    </code>\n   </a>\n   can be\n  used.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "8",
            "user": "R4444",
            "time": "Jul 9, 2019 at 15:17",
            "is_accepted": true,
            "comments": []
        }
    ]
}