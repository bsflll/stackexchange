{
    "title": "How to interpret entries from Exports tab in ProcessHacker",
    "link": "https://reverseengineering.stackexchange.com/questions/3704/how-to-interpret-entries-from-exports-tab-in-processhacker",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use\n  <a href=\"http://processhacker.sourceforge.net/\" rel=\"nofollow noreferrer\">\n   ProcessHacker\n  </a>\n  version 2.33 to inspect the functions which are exported by DLLs in running processes. In the screen-shot below you can see a few exported functions from a C++ application, along with their Ordinal number and virtual address (VA):\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/a2kFv.png\"/>\n </p>\n <p>\n  This is a pretty cool feature of ProcessHacker, which I was not able to find in ProcessExplorer. However, regarding the entries you can see in this screen-shot, I was not able to find what do the\n  <code>\n   ?\n  </code>\n  (question marks) and the number, which prefixes the names of the functions, mean. Also, I'm not sure what the single and double\n  <code>\n   @\n  </code>\n  (at) symbols in the name, followed by a group of capital letters or number, mean.\n </p>\n <p>\n  <strong>\n   Question 1:\n  </strong>\n  What do the symbols (\n  <code>\n   ?, @\n  </code>\n  ), number-prefix and capital letter suffixes represent? How can one interpret them?\n </p>\n <p>\n  <strong>\n   Question 2:\n  </strong>\n  What does the \"Ordinal\" column mean?\n </p>\n <p>\n  <strong>\n   Question 3:\n  </strong>\n  Does the \"VA\" column show the offset of the procedure entry point, with respect to the base address of the\n  <code>\n   .text\n  </code>\n  segment of the DLL? If not, what does it represent?\n </p>\n <p>\n  <strong>\n   Question 4:\n  </strong>\n  How can one compute the absolute address of any function from the Exports tab?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "569",
    "tags": [
        "dll",
        "libraries",
        "processhacker"
    ],
    "user": "Benny",
    "time": "Feb 18, 2014 at 10:45",
    "comments": [
        {
            "user": "alexanderh",
            "text": "<html><body><span class=\"comment-copy\">\n Here is a quick comparison of the export of a DLL found by Process Hacker and the exports identified by IDA. Hopefully the below answers and the side by side will be helpful.\n <a href=\"https://i.sstatic.net/T7VYk.png\" rel=\"nofollow noreferrer\">\n  i.sstatic.net/T7VYk.png\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<html><body><span class=\"comment-copy\">\n @alexanderh thanks for the photo. It sheds some light on the matter.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xea",
            "text": "<html><body><span class=\"comment-copy\">\n It's better to open new questions than add new ones.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<html><body><span class=\"comment-copy\">\n @0xea I did want to do that, however, the title of the question and the intro + picture would have been the same for the new question.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Those are C++ name decorations.\n </p>\n <blockquote>\n  <p>\n   Name decoration usually refers to C++ naming conventions, but can apply to a number of C cases as well. By default, C++ uses the function name, parameters, and return type to create a linker name for the function.\n  </p>\n </blockquote>\n <p>\n  See\n  <a href=\"http://msdn.microsoft.com/en-us/library/deaxefa7.aspx\" rel=\"nofollow\">\n   Name Decoration\n  </a>\n  on MSDN for more info.\n </p>\n <p>\n  Question 2: Ordinals are just another way of making exports. You either export a function by name or by ordinal. It is unique in that binary only. You get functions by ordinals by using\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms683212%28v=vs.85%29.aspx\" rel=\"nofollow\">\n   GetProcAddress()\n  </a>\n  just the same as you would with a name.\n </p>\n <p>\n  I could recommend\n  <a href=\"http://rads.stackoverflow.com/amzn/click/0735624240\" rel=\"nofollow\">\n   \"Windows via C/C++\"\n  </a>\n  book for many more details about those mechanisms.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xea",
            "time": "Feb 18, 2014 at 11:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">That page doesn't really offer a good explanation. OTOH, the remark at the bottom \"There is currently no standard for C++ naming between compiler vendors or even between different versions of a compiler\" is <i>crucial</i>. You can only guess what version was used by trying to decode.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd  recommend loading the dll file into PE Explorer (View->Export), which will undecorate the names for you and show you the corresponding parameters/return value/calling convention.\n </p>\n <p>\n  You may also want to check out\n  <a href=\"https://stackoverflow.com/questions/9177591/how-to-undecorate-name-from-decorated-name\">\n   this question\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}