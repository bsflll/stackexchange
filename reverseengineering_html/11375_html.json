{
    "title": "Calculating check sum of m-bus data frame",
    "link": "https://reverseengineering.stackexchange.com/questions/11375/calculating-check-sum-of-m-bus-data-frame",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to calculate the check sum of a m-bus data frame. In page 1 of\n  <a href=\"http://bg-etech.de/download/manual/SDM630-Mbus-protocol.pdf\" rel=\"nofollow\">\n   this PDF\n  </a>\n  I'm able to read that the frame's check sum \"is calculated from the arithmetical sum of the data mentioned above, without taking carry digits into account\". The data I have above are the bytes:\n </p>\n <ol>\n  <li>\n   Start\n  </li>\n  <li>\n   L Field\n  </li>\n  <li>\n   L Field\n  </li>\n  <li>\n   Start\n  </li>\n  <li>\n   C Field\n  </li>\n  <li>\n   A Field\n  </li>\n  <li>\n   CI Field\n  </li>\n  <li>\n   Check sum\n  </li>\n  <li>\n   Stop\n  </li>\n </ol>\n <p>\n  In page 2 we can find that one example of a valid data frame is:\n </p>\n <pre><code>68 03 03 68 53 01 BB 0F 16\n</code></pre>\n <p>\n  In hexadecimal, being 0F the check sum. Unfortunately I must be doing something wrong because I'm not able to reach that value.\n </p>\n <p>\n  Could someone explain how this algorithm, to find the check sum, works?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "hex",
        "protocol",
        "binary-format",
        "hexadecimal"
    ],
    "user": "Rui Lima",
    "time": "Nov 21, 2015 at 18:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  just one sample is never sufficient to answer a checksum query you need a bunch of samples to corelate and find patterns\n </p>\n <p>\n  so looking at the linked pdf it seems it is clear enough\n </p>\n <p>\n  skip the start and sum the data and extract the least two bytes\n </p>\n <pre><code>skip     sum     mask \nx,x,x,x | y,y,... 0x000000ff = checksum\n</code></pre>\n <p>\n  so the sample you posted would be\n </p>\n <pre><code>skip         | sum            \n68 , 3 ,3 68 | 53 , 01 , bb |  =\n</code></pre>\n <p>\n  checksum\n </p>\n <pre><code>\"{0:X2}\" -f ((0x53+0x1+0xbb) -band 0x000000ff) = 0x0f seems to match \n</code></pre>\n <p>\n  running this on other sequnces in the pdf seem to tally\n </p>\n <pre><code>PS C:\\> $a = \"{0:X2}\" -f ((0x53+0xfe+0x51+0x01+0x7a+0x01) -band 0x000000ff) ; $a\n1E \nPS C:\\> $a = \"{0:X2}\" -f ((0x73+0x01+0x51+0x01+0x7A+0x02 ) -band 0x000000ff) ; $a\n42\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Nov 22, 2015 at 8:22",
            "is_accepted": true,
            "comments": []
        }
    ]
}