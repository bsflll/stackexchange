{
    "title": "Identifying code that accesses encrypted overlay in PE",
    "link": "https://reverseengineering.stackexchange.com/questions/18296/identifying-code-that-accesses-encrypted-overlay-in-pe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I’m reviewing a malware sample that stores an encrypted PE file in its overlay. I’m attempting to identify in IDA pieces of x86 that may be responsible for accessing the overlay and performing the decryption routine.\n </p>\n <p>\n  My first attempt was identifying uses and locations in the x86 for\n  <code>\n   VirtualAlloc\n  </code>\n  as I know memory will need to be allocated to perform the decryption. Is there anything else I should look for at the x86 level for code that will attempt to access this PE overlay?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "131",
    "tags": [
        "x86",
        "malware",
        "pe"
    ],
    "user": "Chuck",
    "time": "May 17, 2018 at 1:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd look for crypto code or API calls like\n  <code>\n   GetModuleFileName\n  </code>\n  and\n  <code>\n   CreateFile(GENERIC_READ,....)\n  </code>\n  because overlays aren't mapped into memory if I remember correctly. Therefore the malware has to open its own file on disk.\n </p>\n <p>\n  It then would need to parse the PE structure to find the end-of-image, unless the overlay has some kind of start/end marker, so looking for the constant 0x3C (\n  <code>\n   e_lfanew\n  </code>\n  in DOS header) or 'EP' or 'ZM' (reversed\n  <code>\n   MZ\n  </code>\n  and\n  <code>\n   PE\n  </code>\n  due to endianness) might locate such code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Johann Aydinbas",
            "time": "May 17, 2018 at 2:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}