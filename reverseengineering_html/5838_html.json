{
    "title": "How to reserve certain amount of memory and using segment register to access?",
    "link": "https://reverseengineering.stackexchange.com/questions/5838/how-to-reserve-certain-amount-of-memory-and-using-segment-register-to-access",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So basically I am trying to re-implement a memory protection technique, with the description like this:\n </p>\n <ul>\n  <li>\n   A 256M segment is reserved for application code and\n  </li>\n  <li>\n   A 512M segment is reserved for some special data (can't be modified during runtime)\n  </li>\n  <li>\n   ...\n  </li>\n  <li>\n   <code>\n    %fs\n   </code>\n   register is used to access the 512M memory of special data.\n  </li>\n </ul>\n <p>\n  I am thinking to leverage some segmentation based protection on 32bit x86, however, I am trapped in the first step,\n  <strong>\n   how to reserve some memory for the special data mentioned above ?\n  </strong>\n </p>\n <p>\n  So basically what i am trying to do is very similar with Google's Native Client, I \nquote some thing for its\n  <a href=\"http://en.wikipedia.org/wiki/Google_Native_Client\" rel=\"nofollow\">\n   wiki\n  </a>\n  .\n </p>\n <blockquote>\n  <p>\n   The x86-32 implementation of Native Client is notable for its novel \n      sandboxing method which makes use of the x86 architecture's rarely \n      used segmentation facility.\n  </p>\n  <p>\n   Native Client sets up x86 segments to restrict the memory range \n      that the sandboxed code can access.\n  </p>\n </blockquote>\n <p>\n  Could anyone give me some help on this issue ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "341",
    "tags": [
        "x86",
        "memory",
        "protection"
    ],
    "user": "lllllllllllll",
    "time": "Jul 13, 2014 at 13:57",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n In Virtual Memory Operating Systems memory protection is implemented by the OS, which application code has no control over. Unless you are writing some emulator or a virtual machine you cannot guarantee that memory will always be available at some specific address.  Even the\n <code>\n  VirtualAlloc\n </code>\n will not reserve memory at any adress.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<html><body><span class=\"comment-copy\">\n @ExtremeCoders, I modified the question, I made something wrong before. anyway, there should be some methods, thinking of Google's\n <a href=\"https://code.google.com/p/nativeclient/\" rel=\"nofollow noreferrer\">\n  NaCI\n </a>\n <a href=\"http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/34913.pdf\" rel=\"nofollow noreferrer\">\n  paper\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n Google's NaCl implementation is complex and uses many techniques. See\n <a href=\"http://stackoverflow.com/questions/5026794/x86-segmentation-in-user-mode\">\n  this\n </a>\n related qs on SO.\n <a href=\"https://media.blackhat.com/bh-us-12/Briefings/Rohlf/BH_US_12_Rohlf_Google_Native_Client_Slides.pdf\" rel=\"nofollow noreferrer\">\n  This\n </a>\n pdf analyzes the NaCl architecture.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JamalS",
            "text": "<html><body><span class=\"comment-copy\">\n There are certain limitations, but you should have a look at the Windows API, and specifically functions such as VirtualProtect(). Some methods for virtual memory management are also used for anti-debugging purposes, e.g. using VirtualProtect() and ZeroMemory() an application may strip its PE header.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If this is for Linux then take a look at\n  <a href=\"http://linux.die.net/man/2/arch_prctl\" rel=\"nofollow\">\n   http://linux.die.net/man/2/arch_prctl\n  </a>\n  , specifically at the\n  <code>\n   ARCH_SET_FS\n  </code>\n  option.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Peter Goodman",
            "time": "Jul 17, 2014 at 20:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}