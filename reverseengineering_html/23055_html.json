{
    "title": "Help to understand what's inside base64 string",
    "link": "https://reverseengineering.stackexchange.com/questions/23055/help-to-understand-whats-inside-base64-string",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While performing a file upload, a\n  <code>\n   template\n  </code>\n  parameter is sent together with file. Service acts differently when different parameters are passed.\nI need help to figure out what this parameter contains.\nHere are two examples:\n </p>\n <p>\n  <code>\n   7b0fc4f83d3fc320ef3865a1b472caeba3f0b60e09f257c61f34af77a7ff57adTB5QO8kXU18KUIgZGXblGYAOC7qbRzizHLGpGdUPbywggHncAkwJVe4M/0w7Dy9svucGrEgYbud0OY5iCFlTalho9j9SWzGMXlWjqU0wrFApBh+/Rqy8v93q1gBlpwLsuj7WBppuWItBmhoOyxkyKLv8Vm6AVVeXxndd4kklq+E=\n  </code>\n  - allows uploading any file\n </p>\n <p>\n  <code>\n   8849c262187451b5f558f4c2f150ec67efaafc192f51b1b8983754090e0c767bb+5SL0SVpqqHUB7zPYvNzEMSanK9r2uL7xUe/TK+9rofXD6gqQpsIKB2P7aECihmfEwEdQaLG6Kz3W5B1wiwxZRbdutdBbRYClAAoZ/bhaTdm2VnPBVZKuisi3cVVM91p2/pjb/qSPor7/026fq9PitSBizAtSbf858/BcTu7sw=H2pFMj+uoRaSnqqPdNbdrZzh3AF9H0uhagE9V7R6V8Ed67HFvGYS/Cg9DReGtlj1n1HtjpV14qqfYt5l/tVesG2B/Xh84tkr14t/RgTUA7cXwn3bWEWUcjxCFWlmAs2RXLs6g1Up3e/g4rolmGO8JAbFwRXWhFQQvZMx1+D5tjM=Tie6y7lK/q6Vlw9ssVYUYDP5Il5dYZxGPtkJSkaOPNGjkin81azLZFdtU7K6wUBcHYOoZzhthYdFMIK8K30UMGPMQI9/d4AKJsATT1PXaw/A1bjkMnapCdJl4IWGNs55IgHEs6mMPENlBuVodjQXJNodIkXOFa+I+q+MlGu0Rls=\n  </code>\n  - allows uploading only images\n </p>\n <p>\n  My guess is that this is a serialized object that contains upload configuration. Are there any ideas how to understand and maybe deserialize these strings?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "180",
    "tags": [
        "python"
    ],
    "user": "ardabada",
    "time": "Jan 19, 2020 at 20:41",
    "comments": [
        {
            "user": "user10216038",
            "text": "<html><body><span class=\"comment-copy\">\n The base64 decode is binary that I don't recognize.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n It could be just a string representation of an internal binary object, like a struct...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   Just a brief analyze of data samples you provided.\n  </em>\n </p>\n <ul>\n  <li>\n   <p>\n    First:\n    <code>\n     7b0fc4f83d3fc320ef3865a1b472caeba3f0b60e09f257c61f34af77a7ff57adTB5QO8kXU18KUIgZGXblGYAOC7qbRzizHLGpGdUPbywggHncAkwJVe4M/0w7Dy9svucGrEgYbud0OY5iCFlTalho9j9SWzGMXlWjqU0wrFApBh+/Rqy8v93q1gBlpwLsuj7WBppuWItBmhoOyxkyKLv8Vm6AVVeXxndd4kklq+E=\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    Second:\n    <code>\n     8849c262187451b5f558f4c2f150ec67efaafc192f51b1b8983754090e0c767bb+5SL0SVpqqHUB7zPYvNzEMSanK9r2uL7xUe/TK+9rofXD6gqQpsIKB2P7aECihmfEwEdQaLG6Kz3W5B1wiwxZRbdutdBbRYClAAoZ/bhaTdm2VnPBVZKuisi3cVVM91p2/pjb/qSPor7/026fq9PitSBizAtSbf858/BcTu7sw=H2pFMj+uoRaSnqqPdNbdrZzh3AF9H0uhagE9V7R6V8Ed67HFvGYS/Cg9DReGtlj1n1HtjpV14qqfYt5l/tVesG2B/Xh84tkr14t/RgTUA7cXwn3bWEWUcjxCFWlmAs2RXLs6g1Up3e/g4rolmGO8JAbFwRXWhFQQvZMx1+D5tjM=Tie6y7lK/q6Vlw9ssVYUYDP5Il5dYZxGPtkJSkaOPNGjkin81azLZFdtU7K6wUBcHYOoZzhthYdFMIK8K30UMGPMQI9/d4AKJsATT1PXaw/A1bjkMnapCdJl4IWGNs55IgHEs6mMPENlBuVodjQXJNodIkXOFa+I+q+MlGu0Rls=\n    </code>\n   </p>\n  </li>\n </ul>\n <hr/>\n <ol>\n  <li>\n   <p>\n    First 64 symbols. It could be\n    <em>\n     sha256\n    </em>\n    hash of file you upload or key for decryption data which encoded in\n    <em>\n     base64\n    </em>\n    ;\n   </p>\n  </li>\n  <li>\n   <p>\n    <em>\n     First\n    </em>\n    part contains single\n    <em>\n     base64\n    </em>\n    which contains\n    <strong>\n     128\n    </strong>\n    bytes of data.\n    <em>\n     Second\n    </em>\n    example contains 2 parts encoded in\n    <em>\n     base64\n    </em>\n    separately (splitting data into chunks could be caused by limits for data size of selected encrypting algorithm):\n   </p>\n   <ul>\n    <li>\n     <p>\n      First part (decoded data length:\n      <strong>\n       256\n      </strong>\n      )\n      <code>\n       b+5SL0SVpqqHUB7zPYvNzEMSanK9r2uL7xUe/TK+9rofXD6gqQpsIKB2P7aECihmfEwEdQaLG6Kz3W5B1wiwxZRbdutdBbRYClAAoZ/bhaTdm2VnPBVZKuisi3cVVM91p2/pjb/qSPor7/026fq9PitSBizAtSbf858/BcTu7sw=H2pFMj+uoRaSnqqPdNbdrZzh3AF9H0uhagE9V7R6V8Ed67HFvGYS/Cg9DReGtlj1n1HtjpV14qqfYt5l/tVesG2B/Xh84tkr14t/RgTUA7cXwn3bWEWUcjxCFWlmAs2RXLs6g1Up3e/g4rolmGO8JAbFwRXWhFQQvZMx1+D5tjM=\n      </code>\n     </p>\n    </li>\n    <li>\n     <p>\n      Second part (decoded data length:\n      <strong>\n       128\n      </strong>\n      )\n      <code>\n       Tie6y7lK/q6Vlw9ssVYUYDP5Il5dYZxGPtkJSkaOPNGjkin81azLZFdtU7K6wUBcHYOoZzhthYdFMIK8K30UMGPMQI9/d4AKJsATT1PXaw/A1bjkMnapCdJl4IWGNs55IgHEs6mMPENlBuVodjQXJNodIkXOFa+I+q+MlGu0Rls=\n      </code>\n     </p>\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    Decoded data of each this parts looks too random, so I suppose that data encoded using one of\n    <em>\n     block cipher symmetric-key algorithms\n    </em>\n    . Why? Because:\n   </p>\n   <ul>\n    <li>\n     If data is not encoded 99% of developers will use\n     <em>\n      JSON\n     </em>\n     or\n     <em>\n      XML\n     </em>\n     or whatever else instead of custom structures which means additional work on serializer (all developers are lazy);\n    </li>\n    <li>\n     Length of each block of data is exactly divisible by 16;\n    </li>\n    <li>\n     Weird hash on the start of sample which could be a key or any other input for decryption (length -\n     <strong>\n      64\n     </strong>\n     , btw).\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  It's all interesting information which can be extracted from your samples. Maybe I noticed something you haven't yet, who knows  ¯\\_(ツ)_/¯\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Olvin Roght",
            "time": "Jan 20, 2020 at 13:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}