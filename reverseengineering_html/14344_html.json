{
    "title": "How to decompress a custom game data file?",
    "link": "https://reverseengineering.stackexchange.com/questions/14344/how-to-decompress-a-custom-game-data-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So here's the rundown:\n </p>\n <p>\n  The files in themselves are .spc. Normally, you'd think this is a spectrum file, but it's a custom file made by the developer themselves. It contains an image that is used/will be used in the game, and me and a group is trying to figure out how to decode it.\n </p>\n <p>\n  Here's things we've tried and know so far:\n </p>\n <p>\n  -Initially, we thought that it was a PKSC7 certificate envelope. It was not, as it was a custom file. They were unpacked from a general .cpk file, which all games in the series have utilized.\n </p>\n <p>\n  -The game in question is a PSVITA and PS4 (although our files are from the Vita version) game and is called New Danganronpa V3\n </p>\n <p>\n  -We received info from a third party that does not want to share how to decompress the files. They were the ones that taught us the SPC file is NOT a certificate or spectrum file, and that the method to decompress it was backwards and strange, and was found out mostly by accident\n </p>\n <p>\n  -We found out some strange stuff in hex files, but the most relevant information is that the .spc files are CPS., a little-endian compression method. According to some help we've found elsewhere in the internet, this is a big hint on how to decrypt said files - we've tried switching it to big-endian, but we haven't found much other than the hex data changes to be more coherent.\n </p>\n <p>\n  -Other things we've found in the hexdata include stuff like filepaths (such as a thing called \"SPCpack\", a few things ending in .srdi and .srd, and -BEGIN CERTIFICATE- at the top of one. Here's an image:\n  <a href=\"https://i.sstatic.net/RQLHe.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Hexdata with first three digits\" src=\"https://i.sstatic.net/RQLHe.png\"/>\n  </a>\n </p>\n <p>\n  If the files themselves are needed, they are available here:\n </p>\n <p>\n  <a href=\"https://mega.nz/#!6xtmgBzQ!RNfIUlC94bQs4YPTVD0GuMFTi3LfqeIMrKdaxqRtCp8\" rel=\"nofollow noreferrer\">\n   https://mega.nz/#!6xtmgBzQ!RNfIUlC94bQs4YPTVD0GuMFTi3LfqeIMrKdaxqRtCp8\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "1k",
    "tags": [
        "file-format",
        "decompress"
    ],
    "user": "Neptz",
    "time": "Jan 7, 2017 at 11:46",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n As you can clearly see plain text in this dump, it is not\n <i>\n  encrypted\n </i>\n , so please\n <a href=\"https://reverseengineering.stackexchange.com/posts/14344/edit\">\n  edit\n </a>\n that out of your question for clarity. Since the plain text strings are interrupted by other codes - see\n <code>\n  chara?_black.b?mp\n </code>\n -, it probably is an LZ/ARC-like derivative (bytewise, rather than the more modern bitwise, compression).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}