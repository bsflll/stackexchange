{
    "title": "Disable optimization of for loops in Hex Rays Decompiler",
    "link": "https://reverseengineering.stackexchange.com/questions/29847/disable-optimization-of-for-loops-in-hex-rays-decompiler",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Are there any good ways of splitting up a very long for loop or if statement in IDA into larger chunks to make it more readable? Disabling\n  <code>\n   use fast structure analysis\n  </code>\n  in the Hex Rays decompiler options did not help. Nor did setting the\n  <code>\n   Max commas\n  </code>\n  option to 1, as explained by Rolf Rolles in this\n  <a href=\"https://twitter.com/rolfrolles/status/1345512891667992578\" rel=\"nofollow noreferrer\">\n   Twitter post\n  </a>\n  .\n </p>\n <pre><code>for ( i = four - 1; file_size > i + tmp + 1 && match_buffer(&buf[tmp], i + 1, buf_num, idx) != -1; ++i )\n{\n   ;\n}\n</code></pre>\n <p>\n  What I am trying to achieve is getting this on multiple lines. For reference I am using IDA Free v7.7 for Linux.\n </p>\n <p>\n  The equivalent in Ghidra looks like this and I was hoping to get the same result in IDA:\n </p>\n <pre><code>for (i = four - 1; tmp + i + 1 < file_size; i += 1) {\n    var1 = match_buffer(buf + tmp,i + 1,buf + num,tmp - num); // == match_buffer(buf[tmp], i + 1, buf[num], tmp - num);\n    if (var1 == -1) \n        break;\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "232",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "Nicolai Prebensen",
    "time": "Jan 11, 2022 at 12:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sadly, Hex-Rays control flow structuring algorithms are a black box with exactly two knobs on the outside of it: the two options that you listed. If those two knobs don't improve the behavior you're experiencing, then there's nothing you can do as a user. Not even writing a plugin; control flow structuring is only mentioned once in the SDK, and none of the relevant data structures are defined in the headers. You're going to have to live with whatever Hex-Rays gives you, unfortunately.\n </p>\n <p>\n  (More technically: the behavior you're seeing with combining the two if-statements into a compound is very fundamental to the way that Hex-Rays structures control flow, and there's nothing you can do to influence it short of reverse engineering the control flow structuring implementation and reimplementing it. Even if you do that (which I have), you only have very limited influence to prevent the compound from being re-created during the next phase of ctree analysis.)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Jan 11, 2022 at 18:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nicolai Prebensen",
                    "text": "<span class=\"comment-copy\">Thank you very much for the informative and technical feedback, Rolf!   Perhaps we will see and update on this in the future. It definitely would be nice to have some options to control this for readability.   I'll stick to primarily using IDA as it works most great most of the time, but will continue to use Ghidra second hand if I encounter similar control flow structures in the future (until impemented in IDA and the Hex-Rays decompiler).</span>",
                    "time": null
                }
            ]
        }
    ]
}