{
    "title": "How to compile c, cpp and python code as \"Released/Final\" version?",
    "link": "https://reverseengineering.stackexchange.com/questions/3752/how-to-compile-c-cpp-and-python-code-as-released-final-version",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to know if there are ways to compile C, C++ and Python code in order to not be able to reverse engineering it over Linux or not?\n </p>\n <p>\n  I have heard there are some ways over Windows to do it, but I am working on Linux.\n </p>\n <p>\n  I want to compile my code securely, as released or final version.\n </p>\n <p>\n  <strong>\n   UPDATE\n  </strong>\n </p>\n <p>\n  At least I want to make it hard for usual users to disassemble,\n </p>\n <p>\n  I am using GCC for C and C++, also I would be thankful if you introduce me best compiler for Python.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "736",
    "tags": [
        "python",
        "c",
        "c++",
        "compilers",
        "software-security"
    ],
    "user": "MLSC",
    "time": "Feb 24, 2014 at 10:18",
    "comments": [
        {
            "user": "Kevin",
            "text": "<html><body><span class=\"comment-copy\">\n Bruce Schneier's column today linked to an article about research in this field:\n <a href=\"http://eprint.iacr.org/2013/451.pdf\" rel=\"nofollow noreferrer\">\n  eprint.iacr.org/2013/451.pdf\n </a>\n The paper will probably not tell you how to solve this, but it will give you a good idea of just how much research there is into your problem.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You cannot prevent reverse engineering. You can make it more or less harder but you cannot prevent it. No.\n </p>\n <p>\n  <strong>\n   Update\n  </strong>\n </p>\n <p>\n  Ok, as the author updated it with a more clearer question... this is what one can do:\n </p>\n <ol>\n  <li>\n   Strip symbols from the binaries. At the very least.\n  </li>\n  <li>\n   Obfuscate the code. This may help:\n   <a href=\"https://stackoverflow.com/questions/4111808/c-c-compiler-generating-obfuscated-code\">\n    https://stackoverflow.com/questions/4111808/c-c-compiler-generating-obfuscated-code\n   </a>\n   .\n  </li>\n  <li>\n   Pack or protect the binary. I know no good available protector for Linux, sorry.\n  </li>\n </ol>\n <p>\n  As for the Python code... If you're lucky enough, you can use\n  <a href=\"https://code.google.com/p/shedskin/\" rel=\"nofollow noreferrer\">\n   Shedskin\n  </a>\n  to compile to native code and then apply the same techniques discussed before. If not, you may give a try to Cython instead of Python. Also, there is a question\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs\">\n   here\n  </a>\n  about obfuscating Python code.\n </p>\n <p>\n  PS: Anyway, in my opinion, code protection is overrated. You cannot prevent a decided person or group from reverse engineering a piece of software and, sometimes, it's a lose of time and money.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MLSC",
                    "text": "<span class=\"comment-copy\">Ok ..that's exactly what I want..How is it possible with compiler? Thanks</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As for C compiler (gcc), first make sure you do not make a mistake of compiling it with\n  <code>\n   -g\n  </code>\n  option (adds symbols for debugging, basically whole source code).\n </p>\n <blockquote>\n  <p>\n   -g  Produce debugging information in the operating system's native format\n  </p>\n </blockquote>\n <p>\n  Secondly, try with\n  <code>\n   -s\n  </code>\n  option:\n </p>\n <blockquote>\n  <p>\n   -s  Remove all symbol table and relocation information from the executable.\n  </p>\n </blockquote>\n <p>\n  Without function names is would be harder to reverse engineer it. Take a look at\n  <code>\n   man strip\n  </code>\n  . I haven't tried it, but something like\n </p>\n <blockquote>\n  <p>\n   strip --strip-debug objfile\n  </p>\n </blockquote>\n <p>\n  or:\n </p>\n <blockquote>\n  <p>\n   strip --strip-unneeded objfile\n  </p>\n </blockquote>\n <p>\n  on your object files could be useful.\n </p>\n <p>\n  Turn on as much optimisation as you can\n  <code>\n   -O3\n  </code>\n  . It is really hard to read an optimized assembly, making it another impediment. There is really no good way of preventing disassembly and reverse-engineering, but it makes it harder.\n </p>\n <p>\n  As for Python, it is absolutely OK to ship only\n  <code>\n   .pyc\n  </code>\n  bytecode files. It is compiled version of source code for Python Virtual Machine.\n  <a href=\"http://effbot.org/pyfaq/how-do-i-create-a-pyc-file.htm\" rel=\"nofollow\">\n   How do I create a .pyc file?\n  </a>\n  . Try this one, maybe it is what you need. User can run bytecode file using\n  <code>\n   python\n  </code>\n  just as easily as a source code file.\n </p>\n <p>\n  Lastly, try to google for code obfuscation. It makes no sense to obfuscate C++ code, but maybe someone knows if code obfuscation is a good strategy for Python.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "user2622016",
            "time": "Feb 24, 2014 at 13:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}