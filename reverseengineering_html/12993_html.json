{
    "title": "How to quickly distinguish PE/DLL/DOS-MZ files based on magic numbers?",
    "link": "https://reverseengineering.stackexchange.com/questions/12993/how-to-quickly-distinguish-pe-dll-dos-mz-files-based-on-magic-numbers",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know that the specifications of the Microsoft PE/DLL/DOS-MZ files states that the two first bytes of a PE/DLL/DOS-MZ file is\n  <code>\n   MZ\n  </code>\n  (0x4d,0x5a\n  <code>\n   ) or\n  </code>\n  ZM\n  <code>\n   (\n  </code>\n  0x5a,0x4d`).\n </p>\n <p>\n  The problem with such a small signature is that a lot of other files may match the same specification and a test based only on this two first bytes quickly tends to be inconclusive.\n </p>\n <p>\n  So, my question is simple, after testing that the two first bytes are\n  <code>\n   MZ\n  </code>\n  (or\n  <code>\n   ZM\n  </code>\n  ), what other, more reliable, test can be performed to check that the file is a PE/DLL/DOS-MZ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "7k",
    "tags": [
        "pe",
        "dll",
        "file-format",
        "dos-exe"
    ],
    "user": "perror",
    "time": "Jul 5, 2016 at 15:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  That would be\n  <code>\n   e_lfanew\n  </code>\n  in the\n  <code>\n   MZ\n  </code>\n  header itself. For simple (16 bit) MSDOS software, this ought to be\n  <code>\n   0\n  </code>\n  , and for any extended format it should point right to one of the specific\n  <code>\n   LE\n  </code>\n  ,\n  <code>\n   PE\n  </code>\n  , or\n  <code>\n   NE\n  </code>\n  headers' identifiers (which all are exactly those two characters). As in all of these cases the header itself is a mere stub,\n  <code>\n   e_cp\n  </code>\n  (the total size of this executable in pages) should not be larger than the offset of\n  <code>\n   e_lfanew\n  </code>\n  . (Plus or minus that infernal\n  <code>\n   e_cblp\n  </code>\n  , the \"bytes on last page of file\" â€“ I always forget which one it is.)\n </p>\n <p>\n  See\n  <a href=\"https://msdn.microsoft.com/en-us/library/ms809762.aspx\" rel=\"nofollow\">\n   Peering inside the PE\n  </a>\n  , an article that despite its age still is very useful.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jongware",
            "time": "Jul 5, 2016 at 14:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">This is exactly it, I need to clarify a bit about the <code>e_cblp</code> but I feel this is the way to go. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">@perror: checking the rest of the header stub may be overkill. You could write a quick-and-dirty routine that checks all of your local EXE files, and list out the ones that pass the basic <code>e_lfanew</code> test, and then check if there are any false positives (falsely marked \"yes\"). I could be wrong but don't think there can be false <i>negatives</i> - a 32-bit executable that does <i>not</i> use that offset.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">Windows executables (both 32-bit and 64-bit) must use that offset, but DOS files can, too, for other purposes.  The check that you need is the secondary signature shown above, plus \"LX\" for OS/2 files.  Note that the \"PE\" signature is 4 bytes long, not 2 like the others.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An old DOS EXE header is only 28 (\n  <code>\n   0x1C\n  </code>\n  ) bytes long and is usually followed by the DOS relocation table if present.  The\n  <code>\n   IMAGE_DOS_HEADER\n  </code>\n  <code>\n   struct\n  </code>\n  of the NT PE header is much larger at 64 (0x40) bytes as it has been extended for the various other Windows executable formats.\n </p>\n <p>\n  Trying to interpret\n  <code>\n   e_lfanew\n  </code>\n  at offset 60 (\n  <code>\n   0x3C\n  </code>\n  ) for a plain DOS executable as suggested by the recommended answer is incorrect as this pulls in whatever data happens to be at that offset, usually from the DOS relocation table but it can vary between valid DOS executables.  Using a handful of old DOS executables, the value at this position might not be zero, thus any logic that tries to use this as a distinguishing marker may crash or work incorrectly.\n </p>\n <p>\n  When trying to distinguish a plain DOS EXE, you can't reliably look at any members past\n  <code>\n   e_ovno\n  </code>\n  (overlay number) of the\n  <code>\n   IMAGE_DOS_HEADER\n  </code>\n  <code>\n   struct\n  </code>\n  because they are Windows and OS/2 extensions to the DOS EXE header and do not exist in plain DOS executables.\n </p>\n <p>\n  As far as distinguishing between a DOS executable and a PE executable, I have used the following logic with success:\n </p>\n <ol>\n  <li>\n   <p>\n    If the beginning of the file does not begin with \"MZ\" or \"ZM\", it is not an DOS or Windows executable image.  Otherwise you may have one of the following types of executable formats: plain DOS, NE (Windows 16-bit), LE (16-bit VXD), PE32, or PE32+ (PE64).\n   </p>\n  </li>\n  <li>\n   <p>\n    Determine if you have a plain DOS executable by looking at the\n    <code>\n     e_lfanew\n    </code>\n    value.  A plain DOS executable will have an out-of-range\n    <code>\n     e_lfanew\n    </code>\n    pointing outside of the limits of the file, a zero, or if the offset happens to be in range, the signature at its offset won't match any signatures below.\n   </p>\n  </li>\n  <li>\n   <p>\n    Try to match the signature of the \"in-range\" offset pointed to by\n    <code>\n     e_lfanew\n    </code>\n    with the following WORD or DWORD values:\n   </p>\n   <pre><code>\"PE\" followed by two zero bytes if the image is a PE32 or PE32+ (PE64) and is further determined by the \"magic\" in the NT Optional Header\n\"NE\" indicates the image is a 16-bit Windows executable\n\"LE\" indicates the image is a 16-bit Virtual Device Driver (VXD)\n</code></pre>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "4",
            "user": "byteptr",
            "time": "Nov 28, 2016 at 8:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}