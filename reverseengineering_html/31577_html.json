{
    "title": "Cannot load libvulkan.so on Linux chroot running on Android while normal Android apps can load it",
    "link": "https://reverseengineering.stackexchange.com/questions/31577/cannot-load-libvulkan-so-on-linux-chroot-running-on-android-while-normal-android",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Environment\n </h1>\n <p>\n  First I will give a quick summary of my environment\n </p>\n <p>\n  Device: Samsung Galaxy M20 (m20lte)\n  \n\n  SoC:\n  <a href=\"https://semiconductor.samsung.com/processor/mobile-processor/exynos-7-series-7904/\" rel=\"nofollow noreferrer\">\n   Exynos 7904\n  </a>\n  (with Mali-G71 GPU)\n  \n\n  OS: Android 10 (Stock ROM with root using\n  <a href=\"https://github.com/topjohnwu/Magisk/\" rel=\"nofollow noreferrer\">\n   Magisk\n  </a>\n  )\n  \n\n  Kernel: 4.4.177\n  \n\n  SELinux is disabled (set to permissive mode)\n  \n\n  Vulkan API version: 1.1.108\n </p>\n <p>\n  Chroot environment: Debian 11 (arm64) running on\n  <a href=\"https://github.com/meefik/linuxdeploy\" rel=\"nofollow noreferrer\">\n   Linux Deploy\n  </a>\n  , with full root access. Directories like\n  <code>\n   /dev\n  </code>\n  ,\n  <code>\n   /proc\n  </code>\n  ,\n  <code>\n   /data\n  </code>\n  ,\n  <code>\n   /system\n  </code>\n  ,\n  <code>\n   /sdcard\n  </code>\n  are mounted into the chroot.\n </p>\n <h1>\n  Vulkan availability\n </h1>\n <p>\n  I know this device support Vulkan API (Vulkan loader avaliable at\n  <code>\n   /system/lib64/libvulkan.so\n  </code>\n  ).\n </p>\n <p>\n  Normal Android apps can load and use Vulkan APIs without any problems. For example:\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/SaschaWillems/VulkanCapsViewer\" rel=\"nofollow noreferrer\">\n    Vulkan Caps Viewer\n   </a>\n   can display Vulkan information on this device\n  </li>\n  <li>\n   GeekBench 5,\n   <code>\n    Compute\n   </code>\n   section has an option to compute with GPU using Vulkan API, and it works well\n  </li>\n </ul>\n <h1>\n  Problem\n </h1>\n <p>\n  I cannot load\n  <code>\n   libvulkan.so\n  </code>\n  from\n  <code>\n   /system/lib64/libvulkan.so\n  </code>\n  by running program in the chroot.\n </p>\n <p>\n  For example, I created a simple c source (named\n  <code>\n   dlopen.c\n  </code>\n  ):\n </p>\n <pre><code>#include <stdio.h>\n#include <dlfcn.h>\n\nint main() {\n        void *handle = dlopen(\"libvulkan.so\", RTLD_LAZY);\n        if (!handle) {\n                printf(\"Cannot load libvulkan.so\n\");\n        } else {\n                printf(\"Loaded libvulkan.so\n\");\n        }\n\n        return 0;\n}\n</code></pre>\n <p>\n  Compile it using gcc:\n  <code>\n   gcc dlopen.c -ldl -o dlopentest\n  </code>\n  \n\n  Setup the environment variable\n  <code>\n   LD_LIBRARY_PATH=/system/lib64/\n  </code>\n  or symlink\n  <code>\n   /system/lib64/libvulkan.so\n  </code>\n  to (folder in chroot)\n  <code>\n   /lib/aarch64-linux-gnu/libvulkan.so\n  </code>\n  and\n  <code>\n   /lib/aarch64-linux-gnu/libvulkan.so.1\n  </code>\n  \n\n  Finally run it using\n  <code>\n   ./dlopentest\n  </code>\n  , the program always print\n  <code>\n   Cannot load libvulkan.so\n  </code>\n </p>\n <p>\n  Using\n  <code>\n   strace\n  </code>\n  , but nothing weird found (\n  <a href=\"https://gist.github.com/raspiduino/32a35cee634a4ef33208ec11485ecac6#file-strace1-txt\" rel=\"nofollow noreferrer\">\n   log link\n  </a>\n  )\n </p>\n <p>\n  I'm not sure about\n  <code>\n   /lib/aarch64-linux-gnu/libc.so\n  </code>\n  , since instead of being a symlink to\n  <code>\n   libc.so.6\n  </code>\n  or a real\n  <code>\n   .so\n  </code>\n  file, it's some kind of ld script. But replacing it with a symlink to\n  <code>\n   libc.so.6\n  </code>\n  makes no change.\n </p>\n <p>\n  <code>\n   vulkaninfo\n  </code>\n  also reports an error:\n </p>\n <pre><code>ERROR at /build/vulkan-tools-3Ouhix/vulkan-tools-1.2.162.0+dfsg1/vulkaninfo/vulkaninfo.h:628: Failed to initialize: Vulkan loader is not installed, not found, or failed to load.\n</code></pre>\n <p>\n  <code>\n   strace\n  </code>\n  result is pretty much the same as my\n  <code>\n   dlopentest\n  </code>\n  , so I won't include it here.\n </p>\n <h1>\n  EDIT 1:\n </h1>\n <p>\n  (actually I don't know what section to put this, so I put it here)\n </p>\n <p>\n  Running\n  <code>\n   file\n  </code>\n  on\n  <code>\n   /system/lib64/libvulkan.so\n  </code>\n  :\n </p>\n <pre><code>/system/lib64/libvulkan.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[md5/uuid]=e749d3c10d92fcef9b84402783d311f8, stripped\n</code></pre>\n <p>\n  It's\n  <code>\n   dynamically linked\n  </code>\n  , so I run\n  <code>\n   ldd\n  </code>\n  on it and notice the following line:\n </p>\n <pre><code>/system/lib64/libvulkan.so: /lib/aarch64-linux-gnu/libc.so: version `LIBC' not found (required by /system/lib64/libvulkan.so)\n/system/lib64/libvulkan.so: /lib/aarch64-linux-gnu/libdl.so: version `LIBC' not found (required by /system/lib64/libvulkan.so)\n</code></pre>\n <p>\n  And other lines from\n  <code>\n   .so\n  </code>\n  libraries in\n  <code>\n   /system/lib64\n  </code>\n  claimed the same thing.\n </p>\n <p>\n  So I check the\n  <code>\n   /system/lib64/libc.so\n  </code>\n  , and found that it's a symbolic link to\n  <code>\n   /apex/com.android.runtime/lib64/bionic/libc.so\n  </code>\n  .\n </p>\n <p>\n  So I mounted\n  <code>\n   /apex/com.android.runtime\n  </code>\n  to chroot.\n </p>\n <p>\n  After doing so, ldd found no more problem (\n  <a href=\"https://gist.github.com/raspiduino/32a35cee634a4ef33208ec11485ecac6#file-ldd1-txt\" rel=\"nofollow noreferrer\">\n   log link\n  </a>\n  )\n </p>\n <p>\n  But, when I run the program:\n </p>\n <pre><code>root@localhost:~# ./dlopentest\nTrace/breakpoint trap\n</code></pre>\n <p>\n  Running\n  <code>\n   strace\n  </code>\n  (\n  <a href=\"https://gist.github.com/raspiduino/32a35cee634a4ef33208ec11485ecac6#file-strace2-txt\" rel=\"nofollow noreferrer\">\n   log link\n  </a>\n  )\n </p>\n <p>\n  Using\n  <code>\n   gdb\n  </code>\n  , I found that it was a trap signal from\n  <code>\n   /system/lib64/ld-android.so\n  </code>\n </p>\n <pre><code>Program received signal SIGTRAP, Trace/breakpoint trap.\n0x0000007fb7fef000 in rtld_db_dlactivity () from /system/lib64/ld-android.so\n</code></pre>\n <p>\n  When I check that file:\n </p>\n <pre><code>root@localhost:~# file /system/lib64/ld-android.so\n/system/lib64/ld-android.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[md5/uuid]=62f4de8cdef6f71d65c403ac59427c51, stripped\nroot@localhost:~# ldd /system/lib64/ld-android.so\n        statically linked\n</code></pre>\n <h1>\n  Question\n </h1>\n <ul>\n  <li>\n   Why it does not work (why I cannot load\n   <code>\n    libvulkan.so\n   </code>\n   properly)?\n  </li>\n  <li>\n   How to fix it?\n  </li>\n </ul>\n <h1>\n  Real purpose\n </h1>\n <p>\n  I know this section might not related to the question, but I still want to include it, to avoid possible XY problem.\n </p>\n <p>\n  I want to run\n  <a href=\"https://warthunder.com/en\" rel=\"nofollow noreferrer\">\n   War Thunder\n  </a>\n  (a game, and it supports x86_64 Linux). I run it on\n  <a href=\"https://github.com/ptitSeb/box64\" rel=\"nofollow noreferrer\">\n   box64\n  </a>\n  and it runs until report cannot initialize Vulkan. FYI, Vulkan is the only supported render backend for the game on Linux, so I can't use OpenGL or something.\n </p>\n <p>\n  The game require the real libc (not Android one), so I can't run it on proot, and distro-proof on Termux is too complicated compared to Linux Deploy.\n </p>\n <p>\n  Finally, thank you for reading this\nI just want to run War Thunder :)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "559",
    "tags": [
        "android",
        "linux",
        "shared-object"
    ],
    "user": "raspiduino",
    "time": "Feb 23, 2023 at 18:35",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<html><body><span class=\"comment-copy\">\n Ok, I think this crash because\n <code>\n  /lib/aarch64-linux-gnu/libc.so.6\n </code>\n is loaded, then another libc\n <code>\n  /system/lib64/libc.so\n </code>\n is loaded. I don't think libc can be loaded with multiple instances\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "<html><body><span class=\"comment-copy\">\n Possible solution: 1) (unlikely) If we can call vulkan api from vulkan kernel driver without using Android libs, then write a simple vulkan loader than redirect the calls. 2) Write a \"Vulkan server\" that create an IPC (pipeline), read Vulkan commands from that pipeline, then calls to Android's libvulkan.so, then compile it using Android NDK. Then write a \"client\" libvulkan.so that communicate through the IPC to redirect the calls from program. Compile it using gcc in chroot.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}