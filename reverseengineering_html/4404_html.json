{
    "title": "Insert logging into existing binary code, ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/4404/insert-logging-into-existing-binary-code-arm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to add logging to some function(s) in the shared (\n  <code>\n   .so\n  </code>\n  ) library. (ARM, Android, a mix of Arm and Thumb modes; C++, some functions are virtual and therefore nameless, invoked via VFT.)\n </p>\n <p>\n  <strong>\n   <em>\n    Does anyone already have code that does this or almost this? (Adds logging to existing functions.)\n   </em>\n  </strong>\n </p>\n <p>\n  (I am thinking about patching at run-time (on-the-fly), but you may suggest something static.)\n </p>\n <p>\n  The procedures usually start with a\n  <code>\n   PUSH\n  </code>\n  /\n  <code>\n   STM\n  </code>\n  instruction, but it's difficult to place a branch into just one instruction, at least in the thumb mode.\n  <strong>\n   <em>\n    How do I modify existing procedures?\n   </em>\n  </strong>\n </p>\n <p>\n  One more issue is to detect code residing in PLT.\n  <strong>\n   <em>\n    How do I detect code in PLT, how do I \"dereference\" the plt entry?\n   </em>\n  </strong>\n </p>\n <p>\n  Related info:\n </p>\n <p>\n  The caching issues are discussed here:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/3728/patching-arm7-code-during-runtime\">\n   Patching ARM7 code during runtime\n  </a>\n  (but no code at the moment).\n </p>\n <p>\n  Qt-specific stuff:\n  <a href=\"http://www.ntcore.com/files/qtrev.htm\" rel=\"nofollow noreferrer\">\n   http://www.ntcore.com/files/qtrev.htm\n  </a>\n  or (the same)\n  <a href=\"http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing\" rel=\"nofollow noreferrer\">\n   http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing\n  </a>\n  and\n  <a href=\"http://qt-project.org/doc/qt-4.8/signalsandslots.html\" rel=\"nofollow noreferrer\">\n   about Qt signals&slots\n  </a>\n  .\n </p>\n <p>\n  About\n  <a href=\"https://reverseengineering.stackexchange.com/a/4329/4398\">\n   printing out RTTI\n  </a>\n  (when it's available, of course).\n </p>\n <p>\n  UPD:\n  <a href=\"https://github.com/18446744073709551615/reDroid\" rel=\"nofollow noreferrer\">\n   <strong>\n    reDroid\n   </strong>\n   : reverse-engineering tools for Android NDK/C++/Qt (source at github)\n  </a>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "c++",
        "arm",
        "patching"
    ],
    "user": "18446744073709551615",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://github.com/crmulliner/adbi\" rel=\"nofollow\">\n   The Android Dynamic Binary Instrumentation Toolkit (adbi)\n  </a>\n  should allow you to do what you need to do.\n </p>\n <blockquote>\n  <p>\n   Simple binary instrumentation toolkit for Android ARM + Thumb.\n  </p>\n  <p>\n   Instrumentation is based on library injection and hooking function\n  entry points (in-line hooking).\n  </p>\n  <p>\n   The toolkit consists of two main components the hijack tool and the\n  base library.\n  </p>\n  <p>\n   <strong>\n    hijack\n   </strong>\n  </p>\n  <p>\n   The hijack tool provides the injection functionality. It supports a\n  number of modes for supporting older and newer Android devices. hijack\n  provides help on the command line.\n  </p>\n  <p>\n   <strong>\n    libbase\n   </strong>\n  </p>\n  <p>\n   The base library provides the hooking and unhooking functionality. The\n  base library is compiled as a static library so it can be directly\n  included in the actual instrumentation library. This is done so we can\n  keep everything in /data/local/tmp.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "May 22, 2014 at 13:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use Dynamic Binary Instrumentation to achieve what you want as suggested by\n  <a href=\"https://reverseengineering.stackexchange.com/users/1562/jason-geffner\">\n   Jason Geffner\n  </a>\n  .\n </p>\n <p>\n  You can use\n  <a href=\"https://software.intel.com/sites/default/files/article/256671/pindroid-tutorial.pdf\" rel=\"nofollow noreferrer\">\n   PINdroid\n  </a>\n  by Intel. Read this presentation on\n  <a href=\"http://www.mulliner.org/android/feed/binaryinstrumentationandroid_mulliner_summercon12.pdf\" rel=\"nofollow noreferrer\">\n   Android Binary Instrumentation\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "18446744073709551615",
                    "text": "<span class=\"comment-copy\">As to Pin, is there ARM support? <i>Pin is used for the instrumentation of programs. It supports Linux*,Windows*, macOS and  Android* executables for IA-32, and Intel(R) 64.</i></span>",
                    "time": null
                },
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">If I'm not wrong then yes, you can use Pindroid for ARM too. I have not used it in Android. But according to me, yes you can. <a href=\"https://software.intel.com/sites/default/files/article/256671/pindroid-tutorial-01_1.pdf\" rel=\"nofollow noreferrer\">Pindroid Tutorial</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What i usually do, is find a suitable BL or BLX  instruction, and replace it with a BL to my logging code,  at the end of my logginghook, then jump to the original target.\n </p>\n <p>\n  original code:\n </p>\n <pre><code>MOV R0, #123\nBLX  somefunction\n</code></pre>\n <p>\n  then in\n  <code>\n   C\n  </code>\n  i write some function:\n </p>\n <pre><code>int hooksomefunction(int arg)\n{\n     // insert logging code here\n\n     return somefunction(arg);\n}\n</code></pre>\n <p>\n  and change the original code to:\n </p>\n <pre><code>MOV R0, #123\nBLX  hooksomefunction\n</code></pre>\n <p>\n  Other methods of inserting a call of your own:\n </p>\n <ul>\n  <li>\n   insert your code over some error handling code, which is unlikely to be actually used.\n  </li>\n  <li>\n   write a jump over some instructions, copy those instructions to the start of your hook, call your logging code, jump back.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "May 22, 2014 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}