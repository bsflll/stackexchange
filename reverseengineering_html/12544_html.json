{
    "title": "x86 Bytecode Reference",
    "link": "https://reverseengineering.stackexchange.com/questions/12544/x86-bytecode-reference",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently reverse engineering a small native library from an Android Phone. I have the .so file in x86, ARM and some others but I decided to take the x86 because it's probably the easiest to disassemble.\n </p>\n <p>\n  I have manually disassembled it and slowly see what it's doing but then I ran into a problem. I tried different disassemblers and they sometimes give unconsistent results. There are sometimes very weird instructions that don't make any sense, especially with the LEA command. So I thought I can manually look up how the bytes for that instruction are encoded and get my own correct solution. Sadly I haven't found any description how native bytecode looks and is encoded. There are many large databases for the Opcodes but they just give a description and not how the bytecode for it is encoded. Maybe I have searched the wrong terms but I would be glad if you could link me something more detailed so I can verify the instructions by hand when they seem obscure.\n </p>\n <p>\n  Thanks in advance, SkryptX\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "542",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "SkryptX",
    "time": "Apr 27, 2016 at 18:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The tables at\n  <a href=\"http://www.sandpile.org/\" rel=\"nofollow\">\n   sandpile.org\n  </a>\n  are always handy for things like that but on the whole you're much better off using an existing disassembler, like the\n  <a href=\"https://www.hex-rays.com/products/ida/support/download_freeware.shtml\" rel=\"nofollow\">\n   free version of IDA\n  </a>\n  .\n </p>\n <p>\n  Working manually you can usually look up all the prefixes and the primary opcode, but then you've still got to decode additional bytes like the mod/rm byte and also apply all the modal information: decoding differences between the various operating modes of the x86 architecture, different meaning of modifiers like address and operand size overrides, and a gazillion other things. A good disassembler does all that boring work for you and makes several orders of magnitude fewer mistakes. That leaves you free to ponder the meaning of the disassembly...\n </p>\n <p>\n  Last but not least, good disassemblers like IDA are scriptable so that you can have your computer do all kinds of things for you that the disassembler cannot do right out of the box.\n </p>\n <p>\n  Free IDA can be scripted in IDA C script but not in Python (at least not without jumping through major hoops). So you could turn things around and load a disassembler library into Python, like the excellent\n  <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow\">\n   Capstone\n  </a>\n  . Python also has craptons of utility libraries for processing binaries, so almost all of the work has already been done for you.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "DarthGizka",
            "time": "Apr 27, 2016 at 19:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}