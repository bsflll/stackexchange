{
    "title": "Reverse engineering the PluginKit MacOS framework",
    "link": "https://reverseengineering.stackexchange.com/questions/16185/reverse-engineering-the-pluginkit-macos-framework",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been tasked with an assignment requiring a thorough reverse engineering effort on the PluginKit framework in modern Mac operating system, and I'm looking for information to start off, instead of starting from scratch.\n </p>\n <p>\n  More specifically, I need to get a decent understanding of the internal storage and configuration layout and format of PluginKit, as well as how it's being manipulated, updated and read.\n </p>\n <p>\n  The only resource I've managed to come up with is\n  <a href=\"https://medium.com/@avaidyam/nsextension-pluginkit-a-brief-intro-2803be91a777\" rel=\"noreferrer\">\n   this\n  </a>\n  medium short article from over a year ago, by a person called Aditya Vaidyam.\n </p>\n <p>\n  I found no relevant information (according to table of contents) in Mac OSX Internals by Amit Singh or in MacOS and *OS Internals by Jonathan Levin, and didn't find anything else to look at.\n </p>\n <p>\n  My question therefore is two-fold:\n </p>\n <ol>\n  <li>\n   Are there any other resources available that describe in-detail the OSX frameworks and the PluginKit framework specifically?\n  </li>\n  <li>\n   What other resources, pointers, tips and previous research would you suggest I read before going into the task?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "1k",
    "tags": [
        "osx",
        "macos"
    ],
    "user": "NirIzr",
    "time": "Aug 30, 2017 at 11:43",
    "comments": [
        {
            "user": "Aditya Vaidyam",
            "text": "<html><body><span class=\"comment-copy\">\n That post was indeed written by me. It covers from a high level into the internals of how\n <code>\n  NSExtension\n </code>\n bootstraps and operates, less so on how to deal with\n <code>\n  PlugInKit\n </code>\n . There are actually zero other resources AFAIK but grab yourself a disassembler (provided you know some assembly) and go to town on the binary (which is actually located at\n <code>\n  /System/Library/PrivateFrameworks/PlugInKit.framework/Contents/MacOS/PlugInKit\n </code>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, of course I could reverse engineer the file, but before doing so myself I searched for existing material I could rely on.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Aditya Vaidyam",
            "text": "<html><body><span class=\"comment-copy\">\n @Nirlzr Ah, understood!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My offers won't be specific for your task, so I will try to answer your second question. I hope these helps to you or anyone having a similar task. Since your task is on a quite specific subject, I will offer you searching for something similar, and solve the puzzle by combining these details.\n </p>\n <p>\n  I don't know if you have previous MacOS/iOS reversing experience. So\n  <a href=\"https://davidwalsh.name/reverse-engineer-os-ios-software\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  is a good tutorial to start for understanding platform details (Binary format etc.)\n </p>\n <p>\n  And you can start with basic understanding of Objective-C runtime details. This information will be quite helpful when you face some (dis)assembly\n </p>\n <p>\n  For exp;\n </p>\n <ul>\n  <li>\n   <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html\" rel=\"nofollow noreferrer\">\n    Method calls via send message\n   </a>\n  </li>\n  <li>\n   <a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html\" rel=\"nofollow noreferrer\">\n    Automatic Reference\nCounting\n   </a>\n   (retain/release method calls)\n  </li>\n </ul>\n <p>\n  This post (\n  <a href=\"https://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction\" rel=\"nofollow noreferrer\">\n   Introduction to LLDB and Hopper\n  </a>\n  ) can be quite helpful since it provides an example of decompilation of an Apple's UIKit framework. By using that approach I decompiled PluginKit, but didn't focus on internals.\n </p>\n <p>\n  You can also check interface of PluginKit via\n  <a href=\"https://github.com/nst/RuntimeBrowser/\" rel=\"nofollow noreferrer\">\n   Runtime Browser\n  </a>\n  and search methods to focus on, or check pre-generated intefaces which are available on github page\n </p>\n <p>\n  Good luck\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "qwerty",
            "time": "Sep 6, 2017 at 13:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Thanks. Upvoted. When you say \"I decompiled PluginKit\", could you elaborate on that? Is there something I can read about your experience?</span>",
                    "time": null
                },
                {
                    "user": "qwerty",
                    "text": "<span class=\"comment-copy\">Actually not that much, I just followed the guide and disassembled the iOS binary for PluginKit. (MacOS binary is placed at <code>/usr/bin/pluginkit</code> ) If you have an issue until that part of course I can help. Rest is depends on what you are looking for. I think u need a real use case for PluginKit to understand, what it does and how it works. Then you can focus on specific parts for details and we can exchange knowledge.</span>",
                    "time": null
                }
            ]
        }
    ]
}