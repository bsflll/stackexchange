{
    "title": "Simple Question About Reversing a Python",
    "link": "https://reverseengineering.stackexchange.com/questions/32197/simple-question-about-reversing-a-python",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, detect it easy, shows that the .exe is a python 3.9 compiled on visual studio and the compiler was MS Visual C/C++. Trying to unpack it using\n  <code>\n   pyinstxtractor\n  </code>\n  fails, and shows me the error of\n </p>\n <blockquote>\n  <p>\n   cookie missing etc.\n  </p>\n </blockquote>\n <p>\n  That happens when you are trying to unpack a .NET application, but I'm kind of confused now. I can't unpack it and it's a python. How is that? Even on\n  <code>\n   DnSpy\n  </code>\n  , it only shows me the header. What should I do now?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "255",
    "tags": [
        "disassembly",
        "idapython",
        "python"
    ],
    "user": "Roy Guzman",
    "time": "Sep 3, 2023 at 22:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   If the executable is indeed a pyinstaller binary, then you generally need to make sure that you're running\n   <code>\n    pyinstxractor\n   </code>\n   inside the same version of python as produced the executable. Try to verify that is the case.\n  </li>\n  <li>\n   The executable might not be a pyinstaller binary, as there are multiple python \"compiler\" options. The other major one is\n   <code>\n    py2exe\n   </code>\n   (\n   <a href=\"https://pypi.org/project/py2exe/\" rel=\"nofollow noreferrer\">\n    https://pypi.org/project/py2exe/\n   </a>\n   ), and there's another project\n   <code>\n    unpy2exe\n   </code>\n   for dealing with that format(\n   <a href=\"https://pypi.org/project/unpy2exe/\" rel=\"nofollow noreferrer\">\n    https://pypi.org/project/unpy2exe/\n   </a>\n   ) Like pyinstxractor, I've found that it's generally better to run this project with the same python version.\n  </li>\n  <li>\n   If you want to ID what version of python it's using, you can use\n   <code>\n    strings\n   </code>\n  </li>\n  <li>\n   DnSpy won't help you with python binaries. It only decompiles .NET CIL. Instead, once you've got the python executable unpacked into its requisite .pyc files, you'll want to run a separate decompiler utility like\n   <code>\n    uncompyle6\n   </code>\n   (\n   <a href=\"https://pypi.org/project/uncompyle6/\" rel=\"nofollow noreferrer\">\n    https://pypi.org/project/uncompyle6/\n   </a>\n   ) or\n   <code>\n    decompyle3\n   </code>\n   (\n   <a href=\"https://github.com/rocky/python-decompile3\" rel=\"nofollow noreferrer\">\n    https://github.com/rocky/python-decompile3\n   </a>\n   ). Then you can open the produced .py files in your favorite editor.\n  </li>\n </ol>\n <p>\n  Here's another reference that's helpful if you aren't familiar with analyzing python:\n  <a href=\"https://betterprogramming.pub/analysis-of-compiled-python-files-629d8adbe787\" rel=\"nofollow noreferrer\">\n   https://betterprogramming.pub/analysis-of-compiled-python-files-629d8adbe787\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mayahustle",
            "time": "Sep 11, 2023 at 9:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}