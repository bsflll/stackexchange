{
    "title": "IDA Pro's Super-Complicated Function Pointer Definition",
    "link": "https://reverseengineering.stackexchange.com/questions/16699/ida-pros-super-complicated-function-pointer-definition",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have recently been debugging a binary and at a point I started to decompile a function. One of the lines of the decompiled file is this:\n </p>\n <pre><code>v14 = (int (__cdecl *)(signed int))sub_8048FB6(1);\n</code></pre>\n <p>\n  I have been told it is a function pointer but I have no clue to what function it is pointing to. I will appreciate if someone breaks this absolutely vague string to me into pieces with elaboration.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "pointer"
    ],
    "user": "Newbie",
    "time": "Nov 5, 2017 at 19:36",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n how is v14 being used? Also show the assembly at both places\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe you should start a new question with his.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "<html><body><span class=\"comment-copy\">\n @WillemHengeveld Ok. I will right now.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The variable being assigned to:\n </p>\n <pre><code>v14 = \n</code></pre>\n <p>\n  The type cast needed to convert the result of the subroutine to the type of\n  <code>\n   v14\n  </code>\n  :\n </p>\n <pre><code>(int (__cdecl *)(signed int))\n</code></pre>\n <p>\n  The subroutine call, with one argument:\n  <code>\n   1\n  </code>\n  :\n </p>\n <pre><code>sub_8048FB6(1);\n</code></pre>\n <p>\n  The typecast is needed because hexrays did not figure out automatically what the return type of\n  <code>\n   sub_8048FB6\n  </code>\n  is, so it probably defaulted to\n  <code>\n   int\n  </code>\n  , instead of the function pointer.\n </p>\n <hr/>\n <p>\n  Now the type:\n </p>\n <p>\n  The outer brackets denote a type cast:\n </p>\n <pre><code>(int (__cdecl *)(signed int))\n^                           ^\n</code></pre>\n <p>\n  The calling convention\n  <code>\n   cdecl\n  </code>\n  is cpu specific, commonly, a couple of arguments in registers, the rest on the stack, with the last argument pushed first:\n </p>\n <pre><code>(int (__cdecl *)(signed int))\n      ^^^^^^^\n</code></pre>\n <p>\n  It is a function pointer, denoted by the bracketed\n  <code>\n   (...*)\n  </code>\n </p>\n <pre><code>(int (__cdecl *)(signed int))\n     ^        ^^\n</code></pre>\n <p>\n  A function taking one argument, a signed integer:\n </p>\n <pre><code>(int (__cdecl *)(signed int))\n                ^^^^^^^^^^^^\n</code></pre>\n <p>\n  And the function returning an integer:\n </p>\n <pre><code>(int (__cdecl *)(signed int))\n ^^^\n</code></pre>\n <hr/>\n <p>\n  This is the same as you would declare a function pointer in C:\n </p>\n <pre><code>typedef  int (*myfunctype)(signed int);\nint afunction(signed int arg);\nmyfunctype  fp = afunction;\n</code></pre>\n <hr/>\n <p>\n  If you want to know what function pointer it is that is returned, you will have to look inside\n  <code>\n   sub_8048FB6\n  </code>\n  , to see where it gets it’s return value from.\n </p>\n <p>\n  For example,\n  <code>\n   sub_8048FB6\n  </code>\n  may something look like this:\n </p>\n <pre><code>(int (__cdecl *)(signed int)) sub_8048FB6(int a1)\n{\n     switch(a1) {\n        case 1:\n            return sub_80123456;\n        case 2:\n            return sub_80456789;\n    }\n}\n</code></pre>\n <p>\n  And elsewhere, the returned functions:\n </p>\n <pre><code>int sub_80123456(signed int)\n{\n   …\n}\n\nint sub_80456789(signed int)\n{\n   …\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Willem Hengeveld",
            "time": "Nov 3, 2017 at 21:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">Thanks for the clear response. What I understood from it is that the return value of the sub_8048FB6(1) call actually provides the address of the function which the function pointer is supposed to point to. Some of the function's arguments are located on the stack while others may be in registers and finally the input output type for the function is determined. What I still don't know is that where in the binary am I supposed to find the function's actual code?</span>",
                    "time": null
                }
            ]
        }
    ]
}