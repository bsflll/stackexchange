{
    "title": "What is copy_block struct in Tricore Arch?",
    "link": "https://reverseengineering.stackexchange.com/questions/26289/what-is-copy-block-struct-in-tricore-arch",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Recently I work on Tricore Arch to reverse an algorithm. But I had a problem to find a constant value(4 byte). the line of code shown below:\n </p>\n <pre><code>ld32.w          d4, [a0]-0x68D4\n</code></pre>\n <p>\n  I know\n  <code>\n   a0 = 0xD00032E0\n  </code>\n  but it seems I need to find the equivalent\n  <code>\n   copy_block\n  </code>\n  that tells I where\n  <code>\n   d000032e0\n  </code>\n  was copied to.\n </p>\n <p>\n  <strong>\n   1- basically what is Copy_Block in tricore?\n  </strong>\n  \n\n  <strong>\n   2- How I can find copy_block?\n  </strong>\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "201",
    "tags": [
        "ida",
        "disassembly",
        "memory",
        "address"
    ],
    "user": "Unicornux",
    "time": "Nov 11, 2020 at 11:48",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Where did you see this term?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Unicornux",
            "text": "<html><body><span class=\"comment-copy\">\n Recently I saw this issue in some forum like :\n <a href=\"http://nefariousmotorsports.com/forum/index.php?topic=6990.msg87488#msg87488\" rel=\"nofollow noreferrer\">\n  nefariousmotorsports.com/forum/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, the term\n  <em>\n   copy_block\n  </em>\n  seems to be an invention of the  forum poster. It is\n  <strong>\n   not\n  </strong>\n  specific to Tricore but a general approach used in many embedded firmwares to solve the following problem:\n </p>\n <p>\n  The firmware runs from read-only flash memory, but in some situations you need parts of it in RAM, either because you need writable data, or for speed (often code in RAM runs much faster than from flash).\n </p>\n <p>\n  To solve this, usually there is some code which performs copying of blocks of data from flash to RAM, and it can us either hardcoded addresses or a separate table. Generally, such table would consist of multiple records (which are called\n  <code>\n   copy_block\n  </code>\n  by the poster) with the following information:\n </p>\n <ol>\n  <li>\n   <p>\n    Source address (address of original data in flash)\n   </p>\n  </li>\n  <li>\n   <p>\n    Target address (destination in RAM)\n   </p>\n  </li>\n  <li>\n   <p>\n    Size of data to copy\n   </p>\n  </li>\n </ol>\n <p>\n  There is no standard procedure to find such routines; basically you need to look for functions that copy data around and possibly get the addresses and size from a table. Usually such functions are called early in the firmware initialization process.\n </p>\n <p>\n  After identifying the routine you can simulate its behavior by copying the bytes from FLASH to RAM segments using information from the table. A script similar to memcpy.idc shipped with IDA could be used for this.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 16, 2020 at 14:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}