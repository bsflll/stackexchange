{
    "title": "Batch decompile using IDA Pro 7.5",
    "link": "https://reverseengineering.stackexchange.com/questions/25652/batch-decompile-using-ida-pro-7-5",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to batch disassemble and decompile 500 binaries using the IDA Pro 7.5 disassember and Hex rays decompiler. I can get the .i64 output from the disassembler, but I do not have a way to batch decompile this. Does anyone have an easy way to get the .c pseudocode directly from a binary, like one can do with Ghidra?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "hexrays"
    ],
    "user": "cal_decom",
    "time": "Aug 11, 2020 at 4:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Please see\n  <a href=\"https://hex-rays.com/products/decompiler/manual/batch.shtml\" rel=\"nofollow noreferrer\">\n   Batch Operation\n  </a>\n  In the decompilerâ€™s manual.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Aug 11, 2020 at 5:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  @cal_decom hello, I wrote this script which may help you in your what you want to achieve.\n </p>\n <pre><code>import os\nimport sys\nsys.path.append(os.getcwd())\n\npwd = os.getcwd()\nfor dirpath, dirnames, filenames in sorted(os.walk(pwd)):\n    for file in filenames:\n        ext = os.path.splitext(file)[-1]\n        name = os.path.splitext(file)[0]\n        if os.path.splitext(file)[-1] == \".out\":\n            os.system(f\"/mnt/d/idapro-7.5/idat64 -Ohexrays:{os.path.join(dirpath, name)}:ALL  -A {os.path.join(dirpath, file)} -nosave\")\n# you might want to change this for sub directories\nos.system(\"rm *.i64\")\n</code></pre>\n <p>\n  You can change the path accordingly. This script scans through current directory and sub directories to find binaries with \"out\" extension and generates pseudocode if found. You can read the link provided by @Igor Skochinsky for other options available.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "R4444",
            "time": "Aug 11, 2020 at 12:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}