{
    "title": "How do I get the all the basic binary blocks containing a special instruction like 'CALL' or 'RET' using python in Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/26724/how-do-i-get-the-all-the-basic-binary-blocks-containing-a-special-instruction-li",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using Ghidra to do reverse engineering of an ARM binary. I want to print the disassembly of all blocks across all functions containing a specific instruction like 'CALL' or 'RET'. How do I do that?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ghidra",
        "python"
    ],
    "user": "user35445",
    "time": "Jan 7, 2021 at 16:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can do something like:\n </p>\n <pre><code># get all functions\nfunctions = program.getFunctionManager().getFunctions(True)\nfor function in functions:\n    cur = function.getEntryPoint()\n    while cur:\n        inst = getInstructionAt(cur)\n        if inst:\n            # add similar check for call instruction\n            if \"RET\" in inst.getMnemonicString():\n                #do something\n                print(inst)\n                # this will break when function returns\n                break\n        cur = cur.next()\n</code></pre>\n <p>\n  I wrote this script for x86 binaries, but it would work fine with arm as well (you may have to do minor changes), as the api is identical.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "R4444",
            "time": "Jan 8, 2021 at 4:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}