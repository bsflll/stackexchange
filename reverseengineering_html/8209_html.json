{
    "title": "Unknown Mac OSX 10.10 HFS+ compression",
    "link": "https://reverseengineering.stackexchange.com/questions/8209/unknown-mac-osx-10-10-hfs-compression",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to decompress a Mach-O binary which has been compressed using one of the compression algorithms in Mac 10.10's HFS+ implementation. Basically the file has the \"com.apple.decmpfs\" attribute on it, which says that it is compression type 8. Then the compressed contents of the file are stored in the file's resource fork.\n </p>\n <p>\n  It doesn't seem to have any identifiable header on it. Does anyone recognize it, or have any ideas what it might be? Below is a dump of the first 0x200 bytes of the compressed version of\n  <code>\n   /bin/bash\n  </code>\n  , and the first 0x200 bytes of the same file as viewed under Mac OS.\n </p>\n <p>\n  The Mach-O header (\n  <code>\n   CF FA ED FE\n  </code>\n  ) and some executable's strings (e.g.\n  <code>\n   __PAGEZERO\n  </code>\n  ) can be seem in the compressed version.\n </p>\n <h3>\n  Compressed (first 0x200 bytes of\n  <code>\n   /bin/bash\n  </code>\n  ):\n </h3>\n <pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F \n\n00000000  E0 01 CF FA ED FE 07 00 00 01 03 00 00 80 02 00  à.Ïúíþ.......€.. \n00000010  00 00 12 00 04 E8 E8 06 00 00 85 00 20 00 08 01  .....èè...…. ... \n00000020  40 04 19 46 48 EB 5F 5F 50 41 47 45 5A 45 52 4F  @..FHë__PAGEZERO \n00000030  00 38 01 F7 9E 01 00 F0 0C 08 48 8E 28 02 E5 54  .8.÷ž..ð..HŽ(.åT \n00000040  45 58 54 00 38 01 F3 10 40 9E 60 08 F8 20 10 46  EXT.8.ó.@ž`.ø .F \n00000050  07 46 05 48 0D 06 10 88 E5 74 65 78 74 00 30 01  .F.H...ˆåtext.0. \n00000060  38 50 F6 9E EC 0B C8 10 5F 1C 07 F5 50 0A 02 20  8Pöžì.È._..õP.. \n00000070  01 E4 04 00 80 00 FA F1 E8 5F 5F 73 74 75 62 73  .ä..€.úñè__stubs \n00000080  00 F8 38 50 F6 CE 4C 28 07 F1 CE 62 04 00 F1 28  .ø8PöÎL(.ñÎb..ñ( \n00000090  10 28 01 60 50 08 6E 06 F5 E7 5F 68 65 6C 70 65  .(.`P.n.õç_helpe \n000000A0  72 FA F9 9E B0 2C 9E 5E 07 08 10 38 A0 F0 04 E7  rúùž°,ž^...8 ð.ç \n000000B0  63 73 74 72 69 6E 67 FA FD 9E 0E 34 9E 61 F8 08  cstringúýž.4žaø. \n000000C0  10 38 01 F2 38 5C F3 18 50 C9 41 6F 6E 73 F6 38  .8.ò8\\ó.PÉAonsö8 \n000000D0  50 F6 CE 70 2C 08 F1 9E F0 21 08 10 20 FB 38 01  PöÎp,.ñžð!.. û8. \n000000E0  FB ED 5F 5F 75 6E 77 69 6E 64 5F 69 6E 66 6F 38  ûí__unwind_info8 \n000000F0  50 F9 9E 60 4E 9E 94 11 08 10 38 94 F6 38 01 F2  Pùž`Nž”...8”ö8.ò \n00000100  0A 28 56 78 E4 44 41 54 41 FA F1 58 48 60 9E 00  .(VxäDATAúñXH`ž. \n00000110  E0 32 30 5E B0 08 F6 60 08 03 08 01 E4 5F 5F 67  à20^°.ö`....ä__g \n00000120  6F 3A 27 F1 38 50 FF 9E 38 01 F4 58 0A 03 10 01  o:'ñ8Pÿž8.ôX.... \n00000130  09 D0 98 01 BB 00 F4 EF 5F 5F 6E 6C 5F 73 79 6D  .Ð˜.».ôï__nl_sym \n00000140  62 6F 6C 5F 70 74 72 38 50 F7 9E 38 61 9E 10 00  bol_ptr8P÷ž8až.. \n00000150  08 10 38 50 F6 6E E2 F5 9E 6C 61 F0 06 66 48 9E  ..8Pönâõžlað.fHž \n00000160  D8 05 6E 48 F7 08 E8 98 01 E4 00 F4 39 D8 F8 38  Ø.nH÷.è˜.ä.ô9Øø8 \n00000170  50 F4 9E 20 67 9E 88 26 08 10 39 D8 F0 04 E5 64  Pôž gžˆ&..9Øð.åd \n00000180  61 74 61 00 30 01 38 50 F6 9E B0 8D 9E 04 79 08  ata.0.8Pöž°.ž.y. \n00000190  10 38 50 F0 04 E6 63 6F 6D 6D 6F 6E FA FE CE C0  .8Pð.æcommonúþÎÀ \n000001A0  06 09 F1 C8 01 68 0E 00 F5 38 50 F2 6E 01 F9 9B  ..ñÈ.h..õ8Pòn.ù› \n000001B0  B6 62 73 F4 38 50 F8 9E 30 15 9E 10 21 F0 10 3C  ¶bsô8Pøž0.ž.!ð.< \n000001C0  E8 E7 4C 49 4E 4B 45 44 49 2A C4 58 48 40 9E 00  èçLINKEDI*ÄXH@ž. \n000001D0  A0 F1 90 07 10 09 96 A0 87 11 88 38 4C F2 45 48   ñ....– ‡.ˆ8LòEH \n000001E0  22 48 09 30 00 28 41 B1 50 C8 3B 50 13 09 F5 08  \"H.0.(A±PÈ;P..õ. \n000001F0  01 40 10 F0 EA 08 0C 00 00 F8 1F 09 00 F8 33 1B  .@.ðê....ø...ø3. \n</code></pre>\n <h3>\n  Uncompressed (first 0x200 bytes of\n  <code>\n   /bin/bash\n  </code>\n  ):\n </h3>\n <pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F \n\n00000000  CF FA ED FE 07 00 00 01 03 00 00 80 02 00 00 00  Ïúíþ.......€.... \n00000010  12 00 00 00 E8 06 00 00 85 00 20 00 00 00 00 00  ....è...…. ..... \n00000020  19 00 00 00 48 00 00 00 5F 5F 50 41 47 45 5A 45  ....H...__PAGEZE \n00000030  52 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00  RO.............. \n00000040  00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  ................ \n00000050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................ \n00000060  00 00 00 00 00 00 00 00 19 00 00 00 28 02 00 00  ............(... \n00000070  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... \n00000080  00 00 00 00 01 00 00 00 00 60 08 00 00 00 00 00  .........`...... \n00000090  00 00 00 00 00 00 00 00 00 60 08 00 00 00 00 00  .........`...... \n000000A0  07 00 00 00 05 00 00 00 06 00 00 00 00 00 00 00  ................ \n000000B0  5F 5F 74 65 78 74 00 00 00 00 00 00 00 00 00 00  __text.......... \n000000C0  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... \n000000D0  EC 0B 00 00 01 00 00 00 5F 1C 07 00 00 00 00 00  ì......._....... \n000000E0  EC 0B 00 00 02 00 00 00 00 00 00 00 00 00 00 00  ì............... \n000000F0  00 04 00 80 00 00 00 00 00 00 00 00 00 00 00 00  ...€............ \n00000100  5F 5F 73 74 75 62 73 00 00 00 00 00 00 00 00 00  __stubs......... \n00000110  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... \n00000120  4C 28 07 00 01 00 00 00 62 04 00 00 00 00 00 00  L(......b....... \n00000130  4C 28 07 00 01 00 00 00 00 00 00 00 00 00 00 00  L(.............. \n00000140  08 04 00 80 00 00 00 00 06 00 00 00 00 00 00 00  ...€............ \n00000150  5F 5F 73 74 75 62 5F 68 65 6C 70 65 72 00 00 00  __stub_helper... \n00000160  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... \n00000170  B0 2C 07 00 01 00 00 00 5E 07 00 00 00 00 00 00  °,......^....... \n00000180  B0 2C 07 00 02 00 00 00 00 00 00 00 00 00 00 00  °,.............. \n00000190  00 04 00 80 00 00 00 00 00 00 00 00 00 00 00 00  ...€............ \n000001A0  5F 5F 63 73 74 72 69 6E 67 00 00 00 00 00 00 00  __cstring....... \n000001B0  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... \n000001C0  0E 34 07 00 01 00 00 00 61 F8 00 00 00 00 00 00  .4......aø...... \n000001D0  0E 34 07 00 00 00 00 00 00 00 00 00 00 00 00 00  .4.............. \n000001E0  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................ \n000001F0  5F 5F 63 6F 6E 73 74 00 00 00 00 00 00 00 00 00  __const......... \n00000200  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... \n</code></pre>\n <p>\n  Thanks in advance!\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "2k",
    "tags": [
        "file-format",
        "osx",
        "decompress"
    ],
    "user": "Luke Quinane",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n This smells like an older LZ/LZW compression. Unlike modern implementations, which use\n <i>\n  bits\n </i>\n , this compresses per\n <i>\n  byte\n </i>\n . That's why you can identify fragments of the original text inside the compressed data.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Luke Quinane",
            "text": "<html><body><span class=\"comment-copy\">\n @Jongware those were my thoughts too. I haven't had any luck pinning it down to a particular algorithm though.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  OK... it seems to be LZVN compression. Following on from Igor's suggestions I ran\n  <code>\n   kextstat\n  </code>\n  on my Mac, however that only listed:\n </p>\n <ul>\n  <li>\n   <code>\n    com.apple.AppleFSCompression.AppleFSCompressionTypeZlib\n   </code>\n  </li>\n  <li>\n   <code>\n    com.apple.AppleFSCompression.AppleFSCompressionTypeDataless\n   </code>\n  </li>\n </ul>\n <p>\n  Looking at the strings inside the 'dataless' compression it turned out to be type 5:\n  <a href=\"https://github.com/dimones/Clevo-W370ET-Mavericks/blob/master/Extensions/AppleFSCompressionTypeDataless.kext/Contents/Info.plist#L53\" rel=\"nofollow\">\n   AppleFSCompressionTypeDataless.kext\n  </a>\n  . Searching for the same string with type 8, I found this log:\n </p>\n <pre><code>com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN  <class com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN, id 0x10000025d, !registered, !matched, active, busy 0, retain 4>\n      |   {\n      |     \"IOProbeScore\" = 0x0\n      |     \"CFBundleIdentifier\" = \"com.apple.AppleFSCompression.AppleFSCompressionTypeLZVN\"\n      |     \"IOMatchCategory\" = \"com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN\"\n      |     \"IOClass\" = \"com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN\"\n      |     \"IOProviderClass\" = \"IOResources\"\n      |     \"com.apple.AppleFSCompression.providesType10\" = Yes\n      |     \"com.apple.AppleFSCompression.providesType9\" = Yes\n      |     \"com.apple.AppleFSCompression.providesType8\" = Yes\n      |     \"IOResourceMatch\" = \"IOBSD\"\n      |     \"com.apple.AppleFSCompression.providesType7\" = Yes\n      |   }\n</code></pre>\n <p>\n  Which seems to be something the Chameleon guys already worked out:\n  <a href=\"http://forge.voodooprojects.org/p/chameleon/source/tree/HEAD/trunk/CHANGES#L27\" rel=\"nofollow\">\n   trunk/CHANGES\n  </a>\n </p>\n <p>\n  <strong>\n   Edit:\n  </strong>\n  Apple has just released an open source implementation:\n  <a href=\"https://github.com/lzfse/lzfse\" rel=\"nofollow\">\n   https://github.com/lzfse/lzfse\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Luke Quinane",
            "time": "Jun 18, 2016 at 6:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Graham Perrin",
                    "text": "<span class=\"comment-copy\"><a href=\"http://forge.voodooprojects.org/p/chameleon/source/tree/HEAD/trunk/CHANGES#L27\" rel=\"nofollow noreferrer\">forge.voodooprojects.org/p/chameleon/source/tree/HEAD/trunk/…</a> currently relates to UFS. Elsewhere in that CHANGES file I see \"- ErmaC : Rename decompress_lzvn function to lzvn_decode follow Apple source name.\".</span>",
                    "time": null
                },
                {
                    "user": "Thomas Tempelmann",
                    "text": "<span class=\"comment-copy\">Not sure if this matters, but I just learned that the newest disk image format uses lzfse for compressed images as well (see <code>man hdiutil</code>).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  according to\n  <a href=\"http://hints.macworld.com/article.php?story=20090902223042255\" rel=\"nofollow\">\n   this post\n  </a>\n  , you can use\n  <a href=\"http://www.unix.com/man-page/osx/1/afscexpand/\" rel=\"nofollow\">\n   <code>\n    afscexpand\n   </code>\n   tool\n  </a>\n  to decompress such files.if you prefer the hard way,\n  <a href=\"http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/kern/decmpfs.c\" rel=\"nofollow\">\n   xnu source code\n  </a>\n  may be of help.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Feb 12, 2015 at 20:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Luke Quinane",
                    "text": "<span class=\"comment-copy\">Hi Igor, unfortunately that article doesn't go into the details of the compression algorithm. You can see in the <a href=\"https://github.com/darwin-on-arm/xnu/blob/master/bsd/kern/decmpfs.c#L1781\" rel=\"nofollow noreferrer\">decompfs.c</a> source that they support registering many types of compression algorithms. Type 1 is no compression, type 4 uses zlib. This data is marked as type 8 and seems to be lacking any header which I know of.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">then i guess you need to find all calls to <code>register_decmpfs_decompressor</code> and find the one that registers type 8. i'm guessing it will be one of the kexts.</span>",
                    "time": null
                }
            ]
        }
    ]
}