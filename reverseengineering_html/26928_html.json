{
    "title": "Using GDB to find the address of a buffer in a stripped C binary",
    "link": "https://reverseengineering.stackexchange.com/questions/26928/using-gdb-to-find-the-address-of-a-buffer-in-a-stripped-c-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working with a crackmes binary called\n  <a href=\"https://crackmes.one/crackme/5f05ec3c33c5d42a7c66792b\" rel=\"nofollow noreferrer\">\n   Simple Overflow\n  </a>\n  . It has two buffers with sizes 0x10 and 0x8, and it uses malloc to allocate two contiguous memory blocks (see <+25> and <+39> on the screenshot).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/NIywv.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/NIywv.png\"/>\n  </a>\n </p>\n <p>\n  A solution provided by escalatedquickly stated that “By debugging the program we can see where on the heap the two buffers are allocated. In my case, they are allocated at ‘0x000056050A21F670’ and ‘0x000056050A21F690’ respectively”. I’ve searched how to get these addresses, but I have only found solutions for cases when the variable names are known (e.g.,\n  <a href=\"https://stackoverflow.com/questions/4462915/find-the-exact-address-of-variable-buf\">\n   here\n  </a>\n  and\n  <a href=\"https://stackoverflow.com/questions/10835822/finding-address-of-a-local-variable-in-c-with-gdb\">\n   here\n  </a>\n  ).\n </p>\n <p>\n  How do I find the buffers’ addresses in GDB to replicate what escalatedquickly did?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "736",
    "tags": [
        "disassembly",
        "debugging",
        "gdb",
        "static-analysis",
        "buffer-overflow"
    ],
    "user": "Ronald Rivera",
    "time": "Feb 2, 2021 at 17:40",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n malloc returns the address and it is stored in [rbp-10] and [rbp-8] these address are dynamic and wont have any names single step and grab the address from rax after the malloc call if that is what you are looking for\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ronald Rivera",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you @blabb. It worked.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}