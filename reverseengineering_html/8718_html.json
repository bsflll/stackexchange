{
    "title": "How should I approach debugging a PE which create a large database?",
    "link": "https://reverseengineering.stackexchange.com/questions/8718/how-should-i-approach-debugging-a-pe-which-create-a-large-database",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am reversing several modules which are dynamically and statically linked into an executable.  I have started learning active analysis by attaching one of my database files to the win32 exe using the local win32 debugger (default settings).\n </p>\n <p>\n  Relocating my idb's annotations to map correctly to the exe seems to be taking longer than it should.   I am currently doing static analysis by comparing one idb against a memory snapshot because the relocation time does not seem to be worth the wait.  This creates, what I think may be, unnecessary work because I have to manually copy the annotations from the single module idb to the snapshot idb.\n </p>\n <p>\n  I want to find out if I can change how I use IDA to speed up relocation.  I have no notion of how long this should take given the database's and exe's size.\n </p>\n <pre><code>idb:  ~133 Mb\nexe:  ~650 Mb     Size taken from task manager\nrelocation time:  ~15+ minutes\n</code></pre>\n <p>\n  This is very open ended.  I guess I'm looking for debugger settings, hidden annotation performance hits, etc.  If this is normal I will try to adjust my debugging practice to get the most out of a session.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "581",
    "tags": [
        "ida",
        "debugging",
        "dynamic-analysis"
    ],
    "user": "question_asker_777",
    "time": "Apr 17, 2015 at 22:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If the problem is the time it takes for IDA to rebase the IDB when debugging, then some possible solutions:\n </p>\n <ol>\n  <li>\n   <p>\n    Disable ASLR from module, so it keeps loading at the same base address (same base address from the IDB)\n   </p>\n   <ul>\n    <li>\n     Pros: Works well for main executable\n    </li>\n    <li>\n     Cons: might be a problem for DLLs (see 3.); alter file.\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  How to: Remove\n  <code>\n   IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE\n  </code>\n  (0x40) from\n  <code>\n   IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics\n  </code>\n  .\n </p>\n <ol start=\"2\">\n  <li>\n   <p>\n    [\n    <strong>\n     Dangerous\n    </strong>\n    ] Disable ASLR system wide (would be possible in a spare VM).\n   </p>\n   <ul>\n    <li>\n     Pros: same as 1.\n    </li>\n    <li>\n     Cons: Same as 1. ; Lower whole system protection\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  How to: change\n  <code>\n   HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\MoveImages\n  </code>\n </p>\n <ol start=\"3\">\n  <li>\n   <p>\n    Rebase all DLLs so they don't collide (apply this with 1.)\n   </p>\n   <ul>\n    <li>\n     Pros: all DLLs will have different address base\n    </li>\n    <li>\n     cons: alter files.\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  How-to:\n </p>\n <ul>\n  <li>\n   <code>\n    Rebase\n   </code>\n   tool (rebase.exe; deprecated by editbin.exe)\n  </li>\n  <li>\n   <a href=\"https://msdn.microsoft.com/en-us/library/xd3shwhf.aspx\" rel=\"noreferrer\">\n    editbin.exe\n   </a>\n   with\n   <code>\n    /REBASE\n   </code>\n   option\n  </li>\n  <li>\n   <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa363364%28v=vs.85%29.aspx\" rel=\"noreferrer\">\n    ReBase API\n   </a>\n  </li>\n </ul>\n <p>\n  Simply use different base addresses for all the DLLs (do not apply this on system DLLs).\n </p>\n <ol start=\"4\">\n  <li>\n   Use external debugger and synchronize IDB with it.\n  </li>\n </ol>\n <p>\n  How-to:\n </p>\n <ul>\n  <li>\n   <p>\n    use\n    <a href=\"https://github.com/quarkslab/qb-sync\" rel=\"noreferrer\">\n     QB-sync\n    </a>\n    : it allows you to debug a binary from a debugger (windbg, ollydbg, gdb, etc.) and synchronize the database with the debugger\n    <strong>\n     without\n    </strong>\n    rebasing the IDB.\n   </p>\n  </li>\n  <li>\n   <p>\n    Pros: works well, lots of things can be done from debugger\n   </p>\n  </li>\n  <li>\n   Cons: Needs to be confident with an external debugger\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Neitsa",
            "time": "Apr 18, 2015 at 12:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}