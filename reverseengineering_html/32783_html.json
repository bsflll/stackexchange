{
    "title": "Potential vulnerabilities in a binary run as root",
    "link": "https://reverseengineering.stackexchange.com/questions/32783/potential-vulnerabilities-in-a-binary-run-as-root",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am given a vulnerable 64-bit stripped application, it conducts basic password strength checks on linux(/etc/shadow). The application receives workers(which creates worker process for performing the check) as argument checks if the EUID is 0, creates two POSIX message queues, one for password hashes read by a child process using the shadow API, and the other for worker child processes (number defined by the user) attempting decryption. Another queue is used for workers to send weak passwords to a child process responsible for printing them on screen.\n </p>\n <p>\n  reversing:\n </p>\n <p>\n  main --> open message queues(hash, results) -->\n </p>\n <ol>\n  <li>\n   <p>\n    fork --> read /etc/shadow and send it to hash queue and exit.\n   </p>\n  </li>\n  <li>\n   <p>\n    fork --> receive data from results queue and exit.\n   </p>\n  </li>\n  <li>\n   <p>\n    fork --> opens n worker child(program's 1st argument) and reads from the hashes queue and checks passwords strength and sends it to results queue.\n   </p>\n  </li>\n </ol>\n <p>\n  I am able to leak the /etc/shadow by reading from the hashes queue before it is been read by the password checker child process(mentioned in (3)). But i'm more interested in knowing can we perform any kind of write to /etc/shadow as we know the hashes of entire users. AFAIK there are no buffer overflows or RW primitives except reading from POSIX message queues. Are there any other approaches and attacks possible on this?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "45",
    "tags": [
        "binary-analysis",
        "x86-64",
        "exploit"
    ],
    "user": "emotional_piper",
    "time": "Mar 3, 2024 at 0:25",
    "comments": [],
    "answers_data": []
}