{
    "title": "Help disassembling a simple 16-bit NE function",
    "link": "https://reverseengineering.stackexchange.com/questions/31756/help-disassembling-a-simple-16-bit-ne-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently attempting to reverse engineer a simple function from within a 16-Bit Windows 3.1 (NE) DLL, which from what I can tell is used to display a message box when required.\n </p>\n <p>\n  I would assume that the two arguments of the\n  <code>\n   ShowMessageBox\n  </code>\n  function are used to set the Title and Message (this is a DLL so I assume it doesn't bother with a HWND?). I can see that those two parameters get passed in and are pushed to the stack, but can't quite work out how they are passed into the system call.\n </p>\n <p>\n  Ghidra seems a little confused as the C source ignores the two parameters and passes in the two other values that are added into the stack (\n  <code>\n   0x41\n  </code>\n  and\n  <code>\n   0x41b\n  </code>\n  ).\n </p>\n <p>\n  I have added the following function signature into the MessageBox system call:\n </p>\n <pre><code>int MessageBox (HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, uint uType)\n</code></pre>\n <p>\n  An example of the message box produced by this function is:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/KAkxM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Message Box Example\" src=\"https://i.sstatic.net/KAkxM.png\"/>\n  </a>\n </p>\n <p>\n  Any suggestions would be greatly appreciated.\n </p>\n <p>\n  The assembly and Ghidra generated C source are included below.\n </p>\n <pre><code>**************************************************************\n*                          FUNCTION                          *\n**************************************************************\nvoid __cdecl16far ShowMessageBox(undefined param_1,undefined param_2)\n                       assume DS = 0x1008\n             void              <VOID>         <RETURN>\n             undefined         Stack[0x4]:1   param_1\n             undefined         Stack[0x6]:1   param_2                                  \n       1000:001c c8 00 00 00     ENTER      0x0,0x0\n       1000:0020 57              PUSH       DI\n       1000:0021 56              PUSH       SI\n       1000:0022 6a 00           PUSH       0x0\n       1000:0024 ff 76 08        PUSH       word ptr [BP + param_2]\n       1000:0027 ff 76 06        PUSH       word ptr [BP + param_1]\n       1000:002a 1e              PUSH       DS\n       1000:002b 68 1b 04        PUSH       0x41b\n       1000:002e 6a 41           PUSH       0x41\n       1000:0030 9a 5c 00        CALLF      USER::MessageBox\n                 18 10\n       1000:0035 e9 00 00        JMP        LAB_1000_0038\n\n</code></pre>\n <pre><code>void __cdecl16far ShowMessageBox(undefined param_1,undefined param_2)\n{\n  HWND unaff_CS;\n  \n  MessageBox(unaff_CS,(LPCTSTR)0x41,(LPCTSTR)0x41b,0x1008);\n  return;\n}\n\n</code></pre>\n <p>\n  Thanks,\nJames.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "622",
    "tags": [
        "disassembly",
        "windows",
        "decompilation",
        "ghidra",
        "ne"
    ],
    "user": "jttri777",
    "time": "Apr 6, 2023 at 16:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've not looked at 16-bit windows in a while but I'd interpret the assembly as follows -\n </p>\n <pre><code>void ShowMessageBox( LPCSTR text )\n{\n    MessageBox( NULL,     // no owner window\n                text,     // text to display in box\n                DS:041B,  // caption\n                MB_ICONINFORMATION | MB_OKCANCEL /* 0x41 */ );\n    ...\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Apr 11, 2023 at 20:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "jttri777",
                    "text": "<span class=\"comment-copy\">Thanks, that seems accurate and lines up with the message box that is output by the DLL at runtime. Is there an easy way to get Ghidra to see it like this in the decompiled C source? Thanks.</span>",
                    "time": null
                },
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">Sorry, I've not used Ghidra much and not at all with 16-bit code. Perhaps telling it that param1 is an LPCTSTR might help ?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Iirc windows api are _stdcallfar16 not cdecl. You can edit the function signature of Messagebox. And redefine the arg 2 , arg 3 as segoffset that will make ghidra to either get the string if it is data section like 1068:0f2a. Or ghidra will concat the push ds push ax into a single argument</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">added an answer take a look</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">edited the answer to add concat of SEG:OFFSET</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A Typical listing in ghidra  of USER!MESSAGEBOX in a 16 Bit NE Exe post analysis\n </p>\n <pre><code>   LAB_1000_07f0                        XREF[2]:     1000:0770(j), 1000:0775(j)  \n   1000:07f0 ff 76 0e               PUSH       word ptr [BP + param_3]\n   1000:07f3 1e                     PUSH       DS\n   1000:07f4 68 c4 01               PUSH       0x1c4\n   1000:07f7 1e                     PUSH       DS\n   1000:07f8 68 c0 01               PUSH       0x1c0\n   1000:07fb 6a 00                  PUSH       0x0\n   1000:07fd 9a 9c 00 50 10         CALLF      USER::MESSAGEBOX     undefined MESSAGEBOX()\n</code></pre>\n <p>\n  and its decompilation\n </p>\n <pre><code>uVar7 = param_3;\nMESSAGEBOX((int)&DAT_1008_1050,0,0x1c0,(int)s_run-time_error_1008_1001 + 7,0x1c4,\n           (int)s_run-time_error_1008_1001 + 7);\n</code></pre>\n <p>\n  as you can see the MESSAGEBOX is undefined()\n </p>\n <p>\n  Right click on the MESSAGEBOX (in decompiled window or in listing) and edit the function signature as shown in screen shot and see the Decompiled output\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/DFs8s.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/DFs8s.png\"/>\n  </a>\n </p>\n <p>\n  that is far better but it still misses the Caption String\n  \n\n  double click the 32bit addres 100801c0\n </p>\n <p>\n  you will see this an undefined ascii string (probably coz ghidra default str length is > 3)\n </p>\n <pre><code>   1008:01c0 53                     ??         53h    S\n   1008:01c1 50                     ??         50h    P\n   1008:01c2 59                     ??         59h    Y\n   1008:01c3 00                     ??         00h\n</code></pre>\n <p>\n  define it as a string using right click -> Data ->Terminatedcstring\n </p>\n <p>\n  to make the listing\n </p>\n <pre><code>   1008:01c0 53 50 59 00            ds         \"SPY\"\n</code></pre>\n <p>\n  and the decompilation will be\n </p>\n <pre><code>  if ((local_8[0] < 1) || (0xfa < local_8[0])) {\n    MESSAGEBOX(0,s_SPY_1008_01c0,s_Window_lines_should_be_between_1_1008_01c4,param_3);\n</code></pre>\n <p>\n  ANOTHER EXAMPLE WHERE THE STRING IS DYNAMIC and cant be found statically MESSAGEBOX that shows the concat of seg:offset\n </p>\n <p>\n  listing and decompilation\n </p>\n <pre><code>   LAB_1020_2b78                   XREF[1]:     1020:2b6f(j)  \n   1020:2b78 57                     PUSH       DI\n   1020:2b79 ff 76 12               PUSH       word ptr [BP + param_7]\n   1020:2b7c ff 76 10               PUSH       word ptr [BP + param_6]\n   1020:2b7f ff 76 0e               PUSH       word ptr [BP + param_5]\n   1020:2b82 ff 76 0c               PUSH       word ptr [BP + param_4]\n   1020:2b85 ff 76 0a               PUSH       word ptr [BP + param_3]\n   1020:2b88 9a 54 02 c0 1b         CALLF      USER::MESSAGEBOX  \n\n   MESSAGEBOX(param_3,CONCAT22(param_5,param_4),CONCAT22(param_7,param_6),wVar1);\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Apr 10, 2023 at 18:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "jttri777",
                    "text": "<span class=\"comment-copy\">Thanks for that! That's a great help, and has got it perfect apart from the fact that the parameters are the wrong way around again. <code>MessageBox(0x41,s_XSPY_1008_041b,param_1,0);</code> It's got the caption parameter in there now though, and it's pulling in the text parameter from the outer function's argument.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the last pushed value is 0x41in your disasm so it would be the first argument i dont know why a hardcoded value is passed to hwnd maybe it is not stdcall but some esiteric custom storage ?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Look up pascal calling convention it passes ltr (left to right) instead of rtl( right to lreft ) as in stdcalk btw if it is pascal the param from outer can be a variable message  and caption a static string</span>",
                    "time": null
                },
                {
                    "user": "jttri777",
                    "text": "<span class=\"comment-copy\">Yes that's it! I remember seeing some of the header files at some point for this application and it did use the Pascal calling convention. That would match up as the function always sets the window caption to \"XSPY\" which is what is contained within the static string, and the window message is variable, as the multiple possibilities are passed into this function throughout the program. I think that's it all about solved then! Thanks for all your help. From what I can gather, Ghidra doesn't directly support the pascal calling convention, so I'll have to do that manually. Thanks again.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As per the comment made by @blabb on his answer, I looked at the Win16 WINDOWS.H header file (from the Windows 3.1 Driver Development Kit (DDK)) to see which calling conventions were used for the Win16 API functions at the time.\n </p>\n <p>\n  At the beginning of the file, the following macro is defined:\n </p>\n <p>\n  <code>\n   #define WINAPI              _far _pascal\n  </code>\n </p>\n <p>\n  This macro is then appended to the beginning of most of the functions in the file, for example:\n </p>\n <p>\n  <code>\n   int     WINAPI MessageBox(HWND, LPCSTR, LPCSTR, UINT);\n  </code>\n </p>\n <p>\n  <code>\n   UINT    WINAPI GetPrivateProfileInt(LPCSTR, LPCSTR, int, LPCSTR);\n  </code>\n </p>\n <p>\n  <code>\n   LPSTR   WINAPI lstrcpy(LPSTR, LPCSTR);\n  </code>\n </p>\n <p>\n  So it seems as though most of the Win16 API functions were defined with the Pascal calling convention, which explains why I can see the parameters being\n  <code>\n   PUSH\n  </code>\n  ed backwards onto the stack before the\n  <code>\n   CALL\n  </code>\n  instruction is utilised.\n </p>\n <p>\n  So by implementing the function this way:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/aeR1K.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Ghidra implementation of the WIN16 MessageBox function with the Pascal calling convention.\" src=\"https://i.sstatic.net/aeR1K.png\"/>\n  </a>\n </p>\n <p>\n  The parameters are pulled in correctly and the decompilation is accurate.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/sgJbz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Ghidra decompilation of the WIN16 MessageBox function using the Pascal calling convention.\" src=\"https://i.sstatic.net/sgJbz.png\"/>\n  </a>\n </p>\n <p>\n  Currently, I'm having to setup the parameter storage manually as Ghidra does not support the Pascal calling convention, an issue on GitHub has been opened here:\n  <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/496\" rel=\"nofollow noreferrer\">\n   https://github.com/NationalSecurityAgency/ghidra/issues/496\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "jttri777",
            "time": "Apr 11, 2023 at 16:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}