{
    "title": "What are the some of the special usecases of general purpose registers",
    "link": "https://reverseengineering.stackexchange.com/questions/8973/what-are-the-some-of-the-special-usecases-of-general-purpose-registers",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Some of the general purpose registers are used for some specific reasons. For example\n  <code>\n   EAX\n  </code>\n  is used as an accumulator and to store return values,\n  <code>\n   ECX\n  </code>\n  is used as a counter,\n  <code>\n   ESI\n  </code>\n  and\n  <code>\n   EDI\n  </code>\n  are used to store the src and dst address, respectively. similarly,\n  <code>\n   ESP\n  </code>\n  and\n  <code>\n   EBP\n  </code>\n  .\n </p>\n <p>\n  Is there any specific use case for\n  <code>\n   EBX\n  </code>\n  register? and Is there anything else that I have missed special use cases of general purpose registers?\n </p>\n <p>\n  Thank you.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "231",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Maggie",
    "time": "May 24, 2015 at 8:00",
    "comments": [
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://stackoverflow.com/a/51347294/995714\">\n  Implicit uses and special-ness for each register\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  • AX/EAX/RAX: Accumulator\n </p>\n <p>\n  • BX/EBX/RBX: Base index (for use with arrays)\n </p>\n <p>\n  • CX/ECX/RCX: Counter\n </p>\n <p>\n  • DX/EDX/RDX: Data/general\n </p>\n <p>\n  • SI/ESI/RSI: Source index for string operations.\n </p>\n <p>\n  • DI/EDI/RDI: Destination index for string operations.\n </p>\n <p>\n  • SP/ESP/RSP: Stack pointer for top address of the stack.\n </p>\n <p>\n  • BP/EBP/RBP: Stack base pointer for holding the address of the current stack frame.\n </p>\n <p>\n  • IP/EIP/RIP: Instruction pointer. Holds the program counter, the current instruction address.\n </p>\n <p>\n  Segment registers:\n </p>\n <p>\n  • CS: Code Segment (used for IP)\n </p>\n <p>\n  • DS: Data Segment (used for MOV)\n </p>\n <p>\n  • SS: Stack Segment (used for SP)\n </p>\n <p>\n  • ES: Destination Segment (used for MOVS, etc.)\n </p>\n <p>\n  • FS: local store\n </p>\n <p>\n  • GS: local store\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Sigtran",
            "time": "May 24, 2015 at 8:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Note that the original 8086 design had a lot more limitations on what you could do with which register that current processors have. There's still stuff like <code>loop</code> which works on <code>cx</code> or its extensions, but most instructions that needed a specific (set of) register(s) on 8086 work with any, or almost any, register now.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">specific case for [E/R]BX: xlat.</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">RIP is not a general purpose register. R11 also has a special purpose in kernel code. And even the above registers have a lot more special purposes than what you listed</span>",
                    "time": null
                }
            ]
        }
    ]
}