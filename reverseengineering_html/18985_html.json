{
    "title": "What does ds mean in mov instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/18985/what-does-ds-mean-in-mov-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am reversing a 32-bits ELF executable.\n </p>\n <p>\n  I see something like:\n </p>\n <pre><code>mov al, byte ptr ds:xxxxx\n</code></pre>\n <p>\n  <code>\n   xxxxx\n  </code>\n  is an absolute address.\nWhat is the meaning of\n  <code>\n   ds\n  </code>\n  here?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 3,
    "views": "8k",
    "tags": [
        "assembly"
    ],
    "user": "Bob5421",
    "time": "Aug 5, 2018 at 18:59",
    "comments": [
        {
            "user": "Bob5421",
            "text": "<html><body><span class=\"comment-copy\">\n Yes but the address is absolute so i do not understand why there is this notion of segment there\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n Segment registers have a different use in protected mode (32 bit). Most segments have a base address of 0 but control protection.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bob5421",
            "text": "<html><body><span class=\"comment-copy\">\n So you mean if i change ds to another segment, it wonâ€™t change address but only restriction ? How can i change ds value ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n @Bob5421\n <code>\n  mov ds, ax\n </code>\n should work for\n <code>\n  ds\n </code>\n and other segment registers.\n <code>\n  cs\n </code>\n can only be manipulated with far jmp/far call/far ret/iret\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n Duplicate on\n <a href=\"https://stackoverflow.com\">\n  Stack Overflow\n </a>\n :\n <a href=\"https://stackoverflow.com/questions/30050527/meaning-of-ds-in-assembly-language\">\n  2\n </a>\n <a href=\"https://stackoverflow.com/questions/3819699/what-does-ds40207a-mean-in-assembly\">\n  1\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  this answer is just to address the query in comment\n </p>\n <blockquote>\n  <p>\n   And for example fs[0] on win32 points on TIb structure. Is there\n  another way to get this address ? (I mean where is it in the 4Gb\n  address Space of process?)\n  </p>\n </blockquote>\n <p>\n  in user mode the thread environment block is pointed by fs:[0]\n </p>\n <p>\n  you can view it in the virtual address space using any of the following commands under windbg\n </p>\n <pre><code>0:000> ? fs\nEvaluate expression: 59 = 0000003b\n0:000> dd fs:[0] l 8\n003b:00000000  0012f5b0 00130000 0012d000 00000000\n003b:00000010  00001e00 00000000 7ffdf000 00000000\n0:000> dd 3b:00000000 l8\n003b:00000000  0012f5b0 00130000 0012d000 00000000\n003b:00000010  00001e00 00000000 7ffdf000 00000000\n0:000> dd @$thread l8\n7ffdf000  0012f5b0 00130000 0012d000 00000000\n7ffdf010  00001e00 00000000 7ffdf000 00000000\n0:000> dd @$teb l8\n7ffdf000  0012f5b0 00130000 0012d000 00000000\n7ffdf010  00001e00 00000000 7ffdf000 00000000\n0:000> ? @$teb\nEvaluate expression: 2147348480 = 7ffdf000\n0:000> ? @$thread\nEvaluate expression: 2147348480 = 7ffdf000\n</code></pre>\n <p>\n  confirming using ds selector\n </p>\n <pre><code>0:000> ? ds\nEvaluate expression: 35 = 00000023\n0:000> dd ds:[7ffdf000] l8\n0023:7ffdf000  0012f5b0 00130000 0012d000 00000000\n0023:7ffdf010  00001e00 00000000 7ffdf000 00000000\n</code></pre>\n <p>\n  in x86 cs es ds and ss all will point to same virtual address \nbut fs and gs wont as seen below\n </p>\n <pre><code>0:000> ? ds\nEvaluate expression: 35 = 00000023\n0:000> dd ds:[7ffdf000] l8\n0023:7ffdf000  0012f5b0 00130000 0012d000 00000000\n0023:7ffdf010  00001e00 00000000 7ffdf000 00000000\n0:000> ? cs\nEvaluate expression: 27 = 0000001b\n0:000> dd cs:[7ffdf000] l8\n001b:7ffdf000  0012f5b0 00130000 0012d000 00000000\n001b:7ffdf010  00001e00 00000000 7ffdf000 00000000\n0:000> dd es:[7ffdf000] l8\n0023:7ffdf000  0012f5b0 00130000 0012d000 00000000\n0023:7ffdf010  00001e00 00000000 7ffdf000 00000000\n0:000> dd ss:[7ffdf000] l8\n0023:7ffdf000  0012f5b0 00130000 0012d000 00000000\n0023:7ffdf010  00001e00 00000000 7ffdf000 00000000\n0:000> dd fs:[7ffdf000] l8\n003b:7ffdf000  ???????? ???????? ???????? ????????\n003b:7ffdf010  ???????? ???????? ???????? ????????\n0:000> dd gs:[7ffdf000] l8\n0000:f000  ???????? ???????? ???????? ????????\n0000:f010  ???????? ???????? ???????? ????????\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 7, 2018 at 21:47",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just to clarify the answer of memo (which lacks of a good example).\n </p>\n <p>\n  When speaking about the segment registers (\n  <code>\n   cs\n  </code>\n  ,\n  <code>\n   ds\n  </code>\n  ,\n  <code>\n   es\n  </code>\n  ,\n  <code>\n   ss\n  </code>\n  ), the semantic of the syntax\n  <code>\n   cs:0xdeadbeef\n  </code>\n  must be interpreted as the concatenation of the prefix stored in\n  <code>\n   cs\n  </code>\n  and the value appended to it. But, if we step back to see the big picture, it can be seen as:\n </p>\n <blockquote>\n  <p>\n   The address\n   <code>\n    0xdeadbeef\n   </code>\n   in the memory segment pointed by\n   <code>\n    cs\n   </code>\n   .\n  </p>\n </blockquote>\n <p>\n  In fact, since Intel 8086, the memory model of these CPU is\n  <em>\n   segment based\n  </em>\n  , meaning that each segment register store a prefix for the memory address that will allow to reach one block of memory for a specific usage.\n </p>\n <p>\n  As you can see on the picture below (courtesy to\n  <a href=\"https://en.wikipedia.org/wiki/X86_memory_segmentation\" rel=\"nofollow noreferrer\">\n   Wikipedia page about Intel x86 memory segmentation\n  </a>\n  ), the main memory is sliced into several memory segments and accessed through calls to several segment registers (not on the picture, but you can guess that these registers are initialized with the LDT).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/NheT4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Intel 8086 memory model based on segment registers\" src=\"https://i.sstatic.net/NheT4.png\"/>\n  </a>\n </p>\n <p>\n  In your case:\n </p>\n <pre><code>mov al, byte ptr ds:xxxxx\n</code></pre>\n <p>\n  Does probably means that you are moving a variable from the data segment to your\n  <code>\n   al\n  </code>\n  register.\n </p>\n <p>\n  But, this kind of code is not needed in normal mode as the\n  <code>\n   ds\n  </code>\n  registers is often set to zero (and have no effect when used like that). On the contrary, in protected mode, the\n  <code>\n   ds\n  </code>\n  segment register will be needed to point onto the right memory segment. And, that is probably a line which comes from an assembly code which is executed in protected mode (except if it has been obfuscated, then they break the rules all the time and we cannot tell anymore what was the intent without knowing what is the value of\n  <code>\n   ds\n  </code>\n  ).\n </p>\n <p>\n  I hope this was a bit more clear this way!\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "perror",
            "time": "Aug 7, 2018 at 7:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In protected mode DS is a selector, not a segment. It defines physical address, permissions and other properties. \nNormally, an instruction such as the one in your example, uses DS by default, but this can be overridden (by instruction prefixes) to use a different one (ES, FS, GS, SS etc.)\n </p>\n <p>\n  Have a look at the programming manual from Intel:\n  <a href=\"https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-1-manual.html\" rel=\"nofollow noreferrer\">\n   https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-1-manual.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "memo",
            "time": "Aug 6, 2018 at 8:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">I do not understand something: On a 32 bits x86 system, the process has an adress space of 4GB starting 000000 to FFFFFFFF. If i write mov al, byte ptr 12341234 for example, i do not understand this notion of selector...</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Bob5421 even though most OSes use flat memory layout, the selectors are still supported by the processor. And, for example, the <code>fs</code> and <code>gs</code> selectors often have non-zero base.</span>",
                    "time": null
                },
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">And for example fs[0] on win32 points on TIb structure. Is there another way to get this address ? (I mean where is it in the 4Gb address Space of process?)</span>",
                    "time": null
                }
            ]
        }
    ]
}