{
    "title": "Trying to rip the sprites of this game",
    "link": "https://reverseengineering.stackexchange.com/questions/24742/trying-to-rip-the-sprites-of-this-game",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently trying to rip the sprites from an Nintendo DS game called Cookie Shop - Create Your Dream Shop but they are all in _LZ.bin files.\n </p>\n <p>\n  When I've unpacked its compression, I could see lots of files titles spr.bin and pal.bin\n  <a href=\"https://i.sstatic.net/KExdL.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 1: The file list after unpacking the _LZ.bin\" src=\"https://i.sstatic.net/KExdL.png\"/>\n  </a>\n </p>\n <p>\n  I know that these files are the sprites as well as their corresponding palettes but I had zero idea to open them.\n </p>\n <p>\n  I tried using CrystalTile2, but all it came out was garbled mess, both the palette and sprite.\n </p>\n <p>\n  Here are the hexadecimals for the palettes and sprites respectively.\n  <a href=\"https://i.sstatic.net/CpHSe.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 2: Palette hex\" src=\"https://i.sstatic.net/CpHSe.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/hhuCN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 3(1): Sprite hex\" src=\"https://i.sstatic.net/hhuCN.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/PdfoB.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 3(2): Sprite hex (continued)\" src=\"https://i.sstatic.net/PdfoB.png\"/>\n  </a>\n </p>\n <p>\n  Now this is what the sprite and pallete looked like in NO$GBA.\n  <a href=\"https://i.sstatic.net/Xkih1.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 4: Output sprite\" src=\"https://i.sstatic.net/Xkih1.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/GVQcP.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 5: Output palette\" src=\"https://i.sstatic.net/GVQcP.png\"/>\n  </a>\n </p>\n <p>\n  Pallette table OBP C (from left to right, RGB Format)\n001010\n0F0604\n130B09\n191311\n1D1816\n1A0C10\n1C1013\n1F1518\n1F1C1D\n1F1F1F\n0F1808\n151E0D\n130508\n1A0A0F\n1D0F12\n000000 (not used)\n </p>\n <p>\n  Also, the max color hex is 1F, not FF.\n001010 is used as a transparency filter if I assume.\n </p>\n <p>\n  I also found sprites that were never used in the game, and I went to change the names of the characters, but it ended up freezing the game after I pressed continue.\n </p>\n <p>\n  Is it possible to extract the sprites? Because I want to use it to create a sprite sheet, as well as creating a story using these characters.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "binary",
        "binary-format",
        "binary-editing"
    ],
    "user": "COR3Z",
    "time": "Apr 18, 2020 at 8:13",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Provide a download link for a small sample of these files.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "COR3Z",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://mega.nz/file/8TJ2TKKB#gBuobegEWDIsBf5Zz2Puitu0GKGWBjZZITCclKykbdc\" rel=\"nofollow noreferrer\">\n  mega.nz/file/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Super451",
            "text": "<html><body><span class=\"comment-copy\">\n Can you upload the cookie shop sprites in PNG file\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Both files are prepended with a 4 bytes large number; apparently the total size of the data that follows. I am ignoring it because the file sizes seem fixed. (Also, for the images the\n  <em>\n   other\n  </em>\n  important data, its width and height, are not stored in the file.)\n </p>\n <h2>\n  Palette\n </h2>\n <p>\n  The palette is a 5 bits per channel BGR, with the highest bit unused. The two bytes are stored in little-endian order. Converting to True Color RGB is therefore a matter of bit shifting; you end up with 16 RGB color triplets.\n </p>\n <h2>\n  Image\n </h2>\n <p>\n  The image is stored in 16 x 16 blocks, each 8 x 8 pixels, and every two consecutive pixels are packed into a single byte, right pixel first. Every pixel value ranges from 0..15 and maps immediately to the palette.\n </p>\n <p>\n  To unpack a single 8x8 block, all it takes is\n </p>\n <pre><code>for y in range(8):\n    for x in range(4):\n        print (img[4*y+x]])\n</code></pre>\n <p>\n  which yields a series of 2-pixel data. I found it more convenient, below, to unpack each two nibbles immediately into 2 separate pixels; then it's a matter of looping over the right x and y axis to reassemble the entire image in a coherent, linear, 128x128 pixel bitmap.\n </p>\n <p>\n  The code below then stores the RGB values for each pixel in a True-color PNG image; alternatively, you could save it as a palettized PNG image as well (or really any other image format you'd like).\n </p>\n <h2>\n  Python 3.x code\n </h2>\n <p>\n  This code needs\n  <a href=\"https://pypi.org/project/pypng/\" rel=\"nofollow noreferrer\">\n   <code>\n    pypng\n   </code>\n  </a>\n  . Adjust the fixed part of the path to your folder structure -- it should end with a slash. Save as\n  <code>\n   cookie2png.py\n  </code>\n  and call from a command line with\n </p>\n <pre><code>python cookie2png.py Rose/bu_strawberry_LZ.bin\\bu_strawberry_anger\n</code></pre>\n <p>\n  i.e., leave off the parts\n  <code>\n   _pal.bin\n  </code>\n  and\n  <code>\n   _spr.bin\n  </code>\n  so the script can find them on its own.\n </p>\n <pre><code>import sys,png\nfrom struct import unpack\n\npath = \"/Sprites/Character files/\"\n# base = 'bu_strawberry2'\nbase = sys.argv[1]\n\nwith open (path+base+'_pal.bin', 'rb') as p:\n    pal = p.read()\n\npal = unpack('<I16H', pal)[1:]\npal = [bin(p)[2:].zfill(15) for p in pal]\nrgb = [(int(p[10:15]+p[10:13],2),int(p[5:10]+p[5:8],2),int(p[0:5]+p[0:3],2)) for p in pal]\nprint ('rgb palette', *['%02x%02x%02x' % (r,g,b) for r,g,b in rgb])\n\nwith open (path+base+'_spr.bin', 'rb') as i:\n    img = i.read()\n\n# Strip header\nimg = img[4:]\n# Convert nibbles to bytes\nimg = [[b & 0x0f,b >> 4] for b in img]\n# Unpack list\nimg = [b for a in img for b in a]\n\n# Linearize image\ntarget = []\nfor y in range(16):\n    for yy in range(8):\n        for x in range(16):\n            for xx in range(8):\n                target.append(rgb[img[16*64*y+64*x+8*yy+xx]])\n\n# Convert from palettized into True color\ntarget = [color for rgb in target for color in rgb]\n\n# Split into rows, required by pypng\ntarget = [target[i:i + 3*128] for i in range(0, len(target), 3*128)]\n\nw = png.Writer(128, 128, greyscale=False, bitdepth=8)\nwith open(path+base+'.png', 'wb') as f:\n    w.write(f, target)\n</code></pre>\n <p>\n  and the results are as expected. Here is your\n  <code>\n   bu_strawberry\n  </code>\n  , and a smattering of interesting others:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/kQKFz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"bu_strawberry\" src=\"https://i.sstatic.net/kQKFz.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/JFd1e.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"bu_bitter\" src=\"https://i.sstatic.net/JFd1e.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/ACh2i.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"bu_crunchy\" src=\"https://i.sstatic.net/ACh2i.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/jO7i3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"bu_maccha\" src=\"https://i.sstatic.net/jO7i3.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/OMeQX.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"bu_opera\" src=\"https://i.sstatic.net/OMeQX.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jongware",
            "time": "Apr 18, 2020 at 22:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "COR3Z",
                    "text": "<span class=\"comment-copy\">Well, I am amazed! Thank you so much! P.S. 2 of those images aren’t even used in the game!</span>",
                    "time": null
                },
                {
                    "user": "COR3Z",
                    "text": "<span class=\"comment-copy\">I have found some sprites that require 8bpp formatting, and have a 256x192 resolution. how is it possible to extract it by changing this code?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   .bin\n  </code>\n  files hold the data for the sprite in bytes. You can easily dump each\n  <code>\n   .bin\n  </code>\n  file and interpret it as sprite data.\n </p>\n <p>\n  Back when I was writing my NES emulator, it had an extremely outdated way of handling sprites. It had a \"left side\" of the full list of sprites in the cartridge, which lies in\n  <code>\n   0x0000-0x1000\n  </code>\n  and then a \"right side\", which respectively lies in\n  <code>\n   0x1000-0x1FFF\n  </code>\n </p>\n <p>\n  Example being in range\n  <code>\n   0x0000-0x0010\n  </code>\n  there would respectively lie the left side of some sprite (each side was 16-bytes long). You would combine those bytes in that portion with\n  <code>\n   0x1000-0x1010\n  </code>\n  which would be the right side of the sprite.\n </p>\n <p>\n  Anyways, enough off-topic chatter. I just figured that would be interesting to you due to the similarities in structure.\n </p>\n <p>\n  You'll want to extract each byte inside of each\n  <code>\n   .bin\n  </code>\n  file and store each one in a separate\n  <code>\n   std::uint8_t\n  </code>\n  array. Then you can use something like SFML to render the pixels as raw data. I used\n  <code>\n   sf::Texture::loadFromMemory\n  </code>\n  to go about doing this.\n </p>\n <p>\n  If you want to raw rip the textures to image files. You'll have to convert the bytes in each\n  <code>\n   .bin\n  </code>\n  to a texture then output that texture as a\n  <code>\n   .bmp\n  </code>\n  file.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Graham",
            "time": "Apr 18, 2020 at 15:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}