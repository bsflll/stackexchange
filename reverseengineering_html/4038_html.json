{
    "title": "Reversing Engineering ZKM",
    "link": "https://reverseengineering.stackexchange.com/questions/4038/reversing-engineering-zkm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I am attempting to reverse engineer a jar obfuscated with Zelix Klass-Master. I have been using JMD, although it crashes whenever it attempts to crack the bytecode, saying \"Could not locate control field\" and giving me a NullPointerException. Here is one of the classes in the said jar:\n </p>\n <pre><code>   // ERROR //\n   public void s()\n   {\n    // Byte code:\n    //   0: getstatic 115   g2b:Cb  Z\n    //   3: istore_2\n    //   4: aload_0\n    //   5: invokevirtual 25    e2b:i   ()Z\n    //   8: ifne +5 -> 13\n    //   11: return\n    //   12: athrow\n    //   13: aload_0\n    //   14: getfield 28    e2b:g   Lvbb;\n    //   17: getfield 32    vbb:t   Lcv;\n    //   20: invokevirtual 38   cv:e    ()Z\n    //   23: ifeq +270 -> 293\n    //   26: aload_0\n    //   27: getfield 28    e2b:g   Lvbb;\n    //   30: getfield 32    vbb:t   Lcv;\n    //   33: getfield 43    cv:w    Z\n    //   36: ifeq +257 -> 293\n    //   39: goto +4 -> 43\n    //   42: athrow\n    //   43: aload_0\n    //   44: getfield 28    e2b:g   Lvbb;\n    //   47: getfield 32    vbb:t   Lcv;\n    //   50: invokevirtual 47   cv:s    ()Z\n    //   53: ifne +240 -> 293\n    //   56: goto +4 -> 60\n    //   59: athrow\n    //   60: aload_0\n    //   61: getfield 28    e2b:g   Lvbb;\n    //   64: getfield 32    vbb:t   Lcv;\n    //   67: getstatic 49   bbb:z   Lbbb;\n    //   70: invokevirtual 55   cv:a    (Lbbb;)Z\n    //   73: ifne +220 -> 293\n    //   76: goto +4 -> 80\n    //   79: athrow\n    //   80: aload_0\n    //   81: getfield 28    e2b:g   Lvbb;\n    //   84: getfield 32    vbb:t   Lcv;\n    //   87: getstatic 59   bbb:i   Lbbb;\n    //   90: invokevirtual 55   cv:a    (Lbbb;)Z\n    //   93: ifne +200 -> 293\n    //   96: goto +4 -> 100\n    //   99: athrow\n    //   100: aload_0\n    //   101: getfield 28   e2b:g   Lvbb;\n    //   104: getfield 32   vbb:t   Lcv;\n    //   107: getfield 61   cv:Dc   Lg7;\n    //   110: invokevirtual 65  g7:a    ()Lx9;\n    //   113: invokevirtual 70  x9:a    ()Lh7;\n    //   116: instanceof 75\n    //   119: ifeq +174 -> 293\n    //   122: goto +4 -> 126\n    //   125: athrow\n    //   126: aload_0\n    //   127: getfield 28   e2b:g   Lvbb;\n    //   130: getfield 32   vbb:t   Lcv;\n    //   133: sipush 7200\n    //   136: putfield 77   cv:hd   I\n    //   139: aload_0\n    //   140: getfield 28   e2b:g   Lvbb;\n    //   143: invokevirtual 81  vbb:y   ()Lmeb;\n    //   146: new 85    wfb\n    //   149: dup\n    //   150: iconst_m1\n    //   151: iconst_m1\n    //   152: iconst_m1\n    //   153: sipush 255\n    //   156: aload_0\n    //   157: getfield 28   e2b:g   Lvbb;\n    //   160: getfield 32   vbb:t   Lcv;\n    //   163: getfield 61   cv:Dc   Lg7;\n    //   166: invokevirtual 65  g7:a    ()Lx9;\n    //   169: fconst_1\n    //   170: fconst_1\n    //   171: fconst_1\n    //   172: invokespecial 87  wfb:<init>  (IIIILx9;FFF)V\n    //   175: invokevirtual 90  meb:c   (Lcfb;)V\n    //   178: iconst_0\n    //   179: istore_1\n    //   180: iload_2\n    //   181: ifeq +37 -> 218\n    //   184: aload_0\n    //   185: getfield 28   e2b:g   Lvbb;\n    //   188: invokevirtual 81  vbb:y   ()Lmeb;\n    //   191: new 96    nfb\n    //   194: dup\n    //   195: aload_0\n    //   196: getfield 28   e2b:g   Lvbb;\n    //   199: getfield 32   vbb:t   Lcv;\n    //   202: getfield 43   cv:w    Z\n    //   205: invokespecial 98  nfb:<init>  (Z)V\n    //   208: invokevirtual 90  meb:c   (Lcfb;)V\n    //   211: goto +4 -> 215\n    //   214: athrow\n    //   215: iinc 1 1\n    //   218: iload_1\n    //   219: bipush 20\n    //   221: if_icmplt -37 -> 184\n    //   224: aload_0\n    //   225: getfield 28   e2b:g   Lvbb;\n    //   228: invokevirtual 81  vbb:y   ()Lmeb;\n    //   231: new 101   vfb\n    //   234: dup\n    //   235: iconst_5\n    //   236: iconst_0\n    //   237: iconst_0\n    //   238: iconst_0\n    //   239: sipush 255\n    //   242: invokespecial 103 vfb:<init>  (IIIII)V\n    //   245: invokevirtual 90  meb:c   (Lcfb;)V\n    //   248: aload_0\n    //   249: getfield 28   e2b:g   Lvbb;\n    //   252: invokevirtual 81  vbb:y   ()Lmeb;\n    //   255: new 85    wfb\n    //   258: dup\n    //   259: iconst_m1\n    //   260: iconst_m1\n    //   261: iconst_m1\n    //   262: iconst_m1\n    //   263: aload_0\n    //   264: getfield 28   e2b:g   Lvbb;\n    //   267: getfield 32   vbb:t   Lcv;\n    //   270: getfield 61   cv:Dc   Lg7;\n    //   273: invokevirtual 65  g7:a    ()Lx9;\n    //   276: fconst_0\n    //   277: fconst_0\n    //   278: fconst_0\n    //   279: invokespecial 87  wfb:<init>  (IIIILx9;FFF)V\n    //   282: invokevirtual 90  meb:c   (Lcfb;)V\n    //   285: iload_2\n    //   286: ifne -71 -> 215\n    //   289: goto +4 -> 293\n    //   292: astore_1\n    //   293: return\n    //\n    // Exception table:\n    //   from   to  target  type\n    //   4  12  12  java/lang/Exception\n    //   13 39  42  java/lang/Exception\n    //   26 56  59  java/lang/Exception\n    //   43 76  79  java/lang/Exception\n    //   60 96  99  java/lang/Exception\n    //   80 122 125 java/lang/Exception\n    //   180    211 214 java/lang/Exception\n    //   126    285 292 java/lang/Exception\n  }\n</code></pre>\n <p>\n  Could anybody help me out? Thanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "java"
    ],
    "user": "Jamie Laverty",
    "time": "Apr 8, 2014 at 15:47",
    "comments": [
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n Is it a jar you have permission to share and RE? If so send it to me and I can deobfsucate it for you.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n Do you know which libraries it depends on?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jamie Laverty",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not quite sure. I don't necessarily need the JAR file to be runnable, I just want to remove the string encryption and bytecode.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n I think I got all the dependencies, but now I'm getting a verification error in one of the classes. It shouldn't be runnable in the first place.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jamie Laverty",
            "text": "<html><body><span class=\"comment-copy\">\n If you could just send me the deobf minus the class with an error that would be great thanks.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use\n  <a href=\"https://github.com/Storyyeller/Krakatau\" rel=\"nofollow\">\n   Krakatau\n  </a>\n  to deobfuscate most jar's.  It's not perfect but it gets you pretty close.  It works a little different than other deobfuscators from what I understand.  It reads the bytecode and simply produces the java necessary to run it.  To get it to run I had to use it in linux, and it does require that python is installed.  Although I think the bug making it only work in linux is now fixed.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "CamHart",
            "time": "May 8, 2014 at 3:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You may use\n  <a href=\"https://github.com/java-deobfuscator/deobfuscator\" rel=\"nofollow noreferrer\">\n   java-deobfuscator\n  </a>\n  or its\n  <a href=\"https://github.com/java-deobfuscator/deobfuscator-gui\" rel=\"nofollow noreferrer\">\n   gui version\n  </a>\n  . It has some ZKM transformers but you should also use a optimizer transformer. Make sure to use peephole optimizer.\n </p>\n <p>\n  P.S. Before deobfuscating the jar, you have to look for the imports and download library jars and add them as libraries to the deobfuscator.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "subv3rsion",
            "time": "Jan 4, 2020 at 12:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}