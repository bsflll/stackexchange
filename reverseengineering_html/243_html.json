{
    "title": "How does GDB's process recording work?",
    "link": "https://reverseengineering.stackexchange.com/questions/243/how-does-gdbs-process-recording-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A curious and useful feature of GDB is\n  <a href=\"http://sourceware.org/gdb/current/onlinedocs/gdb/Process-Record-and-Replay.html#Process-Record-and-Replay\">\n   process recording\n  </a>\n  , allowing an analyst to step forwards and backwards through execution, writing a continuous log of the changes to program state that allow for remarkably accurate playback of program code.\n </p>\n <p>\n  Although we can all safely say the process recording log contains the executable's changes to the various data and control registers, the functionality is much more than keeping some serialized representation of the current continuation. For example, I've been able to reify the state of an executable that uses threads to modify shared memory.\n </p>\n <p>\n  Certainly we can't expect time dependent code to work, but if threading code modifying shared state can, in general, be stepped through backwards and\n  <em>\n   still work reliably again\n  </em>\n  , what limitations does process recording have beyond the purely architectural challenges (i.e displaced stepping) specified in the documentation?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "698",
    "tags": [
        "gdb",
        "debuggers"
    ],
    "user": "zetavolt",
    "time": "Mar 24, 2013 at 17:46",
    "comments": [
        {
            "user": "Peter Andersson",
            "text": "<html><body><span class=\"comment-copy\">\n Is this really reverse engineering? It seems to me that it relates more to forward engineering and reading code as the GDB source is open.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "zetavolt",
            "text": "<html><body><span class=\"comment-copy\">\n Point taken, I believe the topic is certainly of interest to reverse engineers so I was banking on it being considered appropriate.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n AFAIK it is based on a relatively new CPU feature in Intel x86 CPUs. It is the same feature that is used for \"recording\" in VMware.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "zetavolt",
            "text": "<html><body><span class=\"comment-copy\">\n I think we can all agree that the question (generally) is of immediate interest to reverse engineers. Additionally, the chance of receiving a thoughtful and intelligent response relating to this particular question is much greater here than on StackOverflow, which I think merits your consideration Peter.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<html><body><span class=\"comment-copy\">\n While this question isn't directly about doing RE, it's of particular interest to people doing RE and it's about understanding a tool of RE in a way that helps understand RE techniques. So I think it is on-topic on this site.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The feature is described in a bit more detail on\n  <a href=\"http://sourceware.org/gdb/wiki/ProcessRecord\" rel=\"noreferrer\">\n   GDB wiki\n  </a>\n  :\n </p>\n <blockquote>\n  <h2>\n   How it works\n  </h2>\n  <p>\n   Process record and replay works by logging the execution of each\nmachine instruction in the child process (the program being debugged),\ntogether with each corresponding change in machine state (the values\nof memory and registers). By successively \"undoing\" each change in\nmachine state, in reverse order, it is possible to revert the state of\nthe program to an arbitrary point earlier in the execution. Then, by\n\"redoing\" the changes in the original order, the program state can be\nmoved forward again.\n  </p>\n </blockquote>\n <p>\n  <a href=\"http://www.ckernel.org/news/hellogcc/prec.pdf\" rel=\"noreferrer\">\n   This presentation\n  </a>\n  describes even more of the internals.\n </p>\n <p>\n  In addition to above, for some remote targets GDB can make use of their \"native\"\n  <a href=\"http://sourceware.org/gdb/current/onlinedocs/gdb/Reverse-Execution.html\" rel=\"noreferrer\">\n   reverse execution\n  </a>\n  by sending Remote Serial Protocol\n  <a href=\"http://sourceware.org/gdb/current/onlinedocs/gdb/Packets.html\" rel=\"noreferrer\">\n   packets\n  </a>\n  <code>\n   bc\n  </code>\n  (backward continue) and\n  <code>\n   bs\n  </code>\n  (backward step). Such targets\n  <a href=\"http://sourceware.org/gdb/news/reversible.html\" rel=\"noreferrer\">\n   include\n  </a>\n  :\n </p>\n <ul>\n  <li>\n   moxie-elf simulator\n  </li>\n  <li>\n   Simics\n  </li>\n  <li>\n   VMware Workstation 7.0\n  </li>\n  <li>\n   the SID simulator (xstormy16 architecture)\n  </li>\n  <li>\n   chronicle-gdbserver using valgrind\n  </li>\n  <li>\n   UndoDB\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}