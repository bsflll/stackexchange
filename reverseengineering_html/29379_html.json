{
    "title": "Branching in arm assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/29379/branching-in-arm-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is an example assembly code:\n </p>\n <pre><code>     function0()\n 0x0.mov r0, #1\n 0x8.mov r1, #20\n0x10.mov r2, #6\n0x18.cmp r1, #16\n0x20.b function1\n\n     function1()\n0x28.cmp r0, #1\n0x30.b functionX\n\n     functionX()\n0x38.bx lr\n</code></pre>\n <p>\n  As far as I know,\n  <code>\n   function0\n  </code>\n  moved those values into the first 3 registers. In\n  <code>\n   function1\n  </code>\n  no values were moved into registers.\n </p>\n <p>\n  What I don't understand is:\n </p>\n <ol>\n  <li>\n   <p>\n    after branching to\n    <code>\n     function1\n    </code>\n    do registers\n    <code>\n     r1\n    </code>\n    and\n    <code>\n     r2\n    </code>\n    still have those values or those registers have been zeroed out?\n   </p>\n  </li>\n  <li>\n   <p>\n    After branching to\n    <code>\n     functionX\n    </code>\n    , is the link register still the same as the one in function0?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "115",
    "tags": [
        "assembly",
        "arm",
        "functions",
        "register"
    ],
    "user": "Silent",
    "time": "Oct 7, 2021 at 14:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It looks like you confuse between functions and blocks. It looks like what you call\n  <code>\n   function0\n  </code>\n  ,\n  <code>\n   function1\n  </code>\n  and\n  <code>\n   functionX\n  </code>\n  are in fact parts of the same function, and just different basic blocks within the function.\n </p>\n <p>\n  To your specific questions:\n </p>\n <ol>\n  <li>\n   <p>\n    Nothing changes\n    <code>\n     r0\n    </code>\n    ,\n    <code>\n     r1\n    </code>\n    , and\n    <code>\n     r2\n    </code>\n    between\n    <code>\n     0x20.b function1\n    </code>\n    and\n    <code>\n     0x28.cmp r0 #1\n    </code>\n    . So yes, they still hold the values from what you called\n    <code>\n     function0\n    </code>\n    . There is nothing in the code, or in assembly as general that implicitly zero out all registers.\n   </p>\n  </li>\n  <li>\n   <p>\n    This is the place where the lr is fetched, and jumped to - it is supposed to hold the value of the caller function - The instruction after the call to what you called\n    <code>\n     function0\n    </code>\n    . the\n    <code>\n     lr\n    </code>\n    didn't change between what you called\n    <code>\n     function0\n    </code>\n    ,\n    <code>\n     function1\n    </code>\n    and\n    <code>\n     functionX\n    </code>\n    .\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "0",
            "user": "macro_controller",
            "time": "Oct 7, 2021 at 14:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Silent",
                    "text": "<span class=\"comment-copy\">Since you mentioned functions an blocks, would there be a difference if those functions were actually 3 different functions and not blocks from the same function?</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">About the first question - there will be no difference. About the second - the <code>lr</code> will change on each call (assuming <code>call</code> instruction is used, instead of <code>b</code>)</span>",
                    "time": null
                }
            ]
        }
    ]
}