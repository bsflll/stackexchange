{
    "title": "how to deobfuscate to java zkm?",
    "link": "https://reverseengineering.stackexchange.com/questions/25608/how-to-deobfuscate-to-java-zkm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I will have a question for you, dear forum residents. I have a .jar file encrypted with ZKM which I think will work for me. I don't know how to decrypt this, can you help me?\n </p>\n</div>\n</body></html>",
    "votes": "-3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "java",
        "jar"
    ],
    "user": "SONIC NIX",
    "time": "Aug 4, 2020 at 22:50",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n ZKM (Zelix KlassMaster) by default obfuscates code, not encrypts it (exception: strings). Therefore there is no decryption. The names that have been obfuscated are gone unless ZKM forgot some identifier which can be used to reconstruct the original class name (but I don't think that the ZKM authors made such a mistake).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SONIC NIX",
            "text": "<html><body><span class=\"comment-copy\">\n So we can't remove it from this software?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n Iâ€™m voting to close this question because not related to reverse-engineering.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ikaerom",
            "text": "<html><body><span class=\"comment-copy\">\n I also vote to close this question. In case the OP wanted to know how to decompile the JAR file, I suggest\n <a href=\"http://www.benf.org/other/cfr/\" rel=\"nofollow noreferrer\">\n  benf.org/other/cfr\n </a>\n with obfuscation mapping files.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Col-E",
            "text": "<html><body><span class=\"comment-copy\">\n I don't agree with closing the issue. OP made a grammatical mistake, using\n <i>\n  \"decrypt\"\n </i>\n instead of\n <i>\n  \"deobfuscate\"\n </i>\n . There clearly exist solutions for this sort of problem and I don't see how this could possibly be justified for closure under the premise of\n <i>\n  \"not related to reverse-engineering\"\n </i>\n aside from the lack of awareness of the subject matter.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are a few open source tools that make removing obfuscation patterns quite easy. Some have explicit support for ZKM. Here are are the two popular ones:\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/java-deobfuscator/deobfuscator\" rel=\"nofollow noreferrer\">\n    https://github.com/java-deobfuscator/deobfuscator\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/GraxCode/threadtear\" rel=\"nofollow noreferrer\">\n    https://github.com/GraxCode/threadtear\n   </a>\n  </li>\n </ul>\n <p>\n  And here is one specifically for android:\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/CalebFenton/simplify\" rel=\"nofollow noreferrer\">\n    https://github.com/CalebFenton/simplify\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Col-E",
            "time": "Aug 18, 2020 at 17:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}