{
    "title": "Modifying Control Flow of a running program",
    "link": "https://reverseengineering.stackexchange.com/questions/4785/modifying-control-flow-of-a-running-program",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on the binary bomb labs and i just disarmed the bomb i am planning on solving it through a debugger and work start to work on my dynamic analysis skills \nor i.e debugging my real question is how to patch or modify assembly instructions in gdb?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "3k",
    "tags": [
        "debugging",
        "gdb"
    ],
    "user": "user3286303",
    "time": "Jul 4, 2014 at 17:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As a GDB method has been presented, I will draw attention to other methods which are generally easier with other software to alter the program.\n </p>\n <p>\n  <strong>\n   Hopper Disassembler (Linux, OS X)\n  </strong>\n </p>\n <p>\n  Move the cursor to the instruction to be modified, and in the edit menu select either patch to NOP (i.e. nullify instruction) or 'assemble instruction' which accepts x86 and ARM instructions.\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/OWdtb.jpg\"/>\n </p>\n <p>\n  It inserts the appropriate operation codes, and takes care of any offset adjustments to ensure the insertions do not affect the rest of the program. You can then run the program as modified and debug, or produce a new executable (ELF, Macho-O, PE/COFF).\n </p>\n <p>\n  <strong>\n   IDA Pro (Linux, Windows, OS X)\n  </strong>\n </p>\n <p>\n  Enable the patching menu by editing the\n  <code>\n   idagui.cfg\n  </code>\n  (with an editor with elevated privileges):\n </p>\n <pre><code>DISPLAY_PATCH_SUBMENU    = YES          // Display the Edit,Patch submenu\n</code></pre>\n <p>\n  Use the patching menu under Edit to insert raw operation codes. Note by default IDA only auto-assembles for the IBM PC; see the Intel or ARM manuals for opcodes. IDA can then produce a new executable but often it may not work, and instead you need to resort to producing a\n  <code>\n   .dif\n  </code>\n  .\n </p>\n <hr/>\n <p>\n  <strong>\n   Patchers\n  </strong>\n </p>\n <p>\n  If you would like to create a patcher, I recommend\n  <em>\n   dup2 patcher\n  </em>\n  . Once you have your new executable, compare the old and new for differences in the raw hex, and then specify the changes that need to be made into the patcher creator. (Either it replaces something at a specific offset, or searches for a set of bytes and replaces those.)\n </p>\n <hr/>\n <p>\n  <strong>\n   Alternate Methods\n  </strong>\n </p>\n <p>\n  Remember that manually editing the assembly instructions of a program is not the only way to alter control flow. Instead, you could use a DLL hook; see for example the InfoSec article\n  <a href=\"http://resources.infosecinstitute.com/api-hooking-and-dll-injection-on-windows/\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "JamalS",
            "time": "Aug 5, 2014 at 12:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ddddavidee",
                    "text": "<span class=\"comment-copy\">is there a way with radare2 <a href=\"http://www.radare.org/r/\" rel=\"nofollow noreferrer\">radare.org/r</a> ?</span>",
                    "time": null
                },
                {
                    "user": "JamalS",
                    "text": "<span class=\"comment-copy\">@ddddavidee At the time this was posted, I had hours of trouble installing radare2 and so I never tried it. It seems it's easier to install and get the GUI working now, so I'll give it a go. In principle, of course it should be able to do it, it's just a matter of how much may not be automated for you.</span>",
                    "time": null
                },
                {
                    "user": "ddddavidee",
                    "text": "<span class=\"comment-copy\">Acutally Hopper way seems to be the faster and easier, but I would need the full version to be able to save the modified file... So I'm looking for alternatives...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use the set command to enable writing to the executable's .text section:\n </p>\n <pre><code>set write on\n</code></pre>\n <p>\n  And then you can use the set command again to set the actual memory\n </p>\n <pre><code>set {int}0xdeadc0de = 0Ã—90909090\n</code></pre>\n <p>\n  But keep in mind gdb doesn't have a built-in assembler so you'll need to know the bytes that you need to patch in ahead of time (via nasm or some other method). Depending on how complex what you're trying to do is it might be easier to just modify the necessary registers.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Fewmitz",
            "time": "Jul 4, 2014 at 18:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}