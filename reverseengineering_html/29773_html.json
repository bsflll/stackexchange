{
    "title": "Parse offset to PE struct",
    "link": "https://reverseengineering.stackexchange.com/questions/29773/parse-offset-to-pe-struct",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Im trying make my idb beautier. I want to parse the offset to PE structure. Here is some example:\n  <a href=\"https://i.sstatic.net/0S5O5.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"My example code\" src=\"https://i.sstatic.net/0S5O5.png\"/>\n  </a>\n </p>\n <p>\n  I want to parse (module + 60) to (module_base->e_lfanew) but when i change the type of module_base variable, i got the result. But the problem is the next line, IDA cant convert it to (module_base->OptionalHeader.DataDirectory[0].VirtualAddress).\n </p>\n <p>\n  But if i change the type of module_base to PIMAGE_NT_HEADERS, it look like this:\n  <a href=\"https://i.sstatic.net/YS58I.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"result\" src=\"https://i.sstatic.net/YS58I.png\"/>\n  </a>\n </p>\n <p>\n  Now the first line is wrong. So what can i do to fix the first line. Thanks\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "pe",
        "struct"
    ],
    "user": "Brian MJ",
    "time": "Dec 24, 2021 at 7:03",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n can you add definitions of the involved variables (at the start of the function)? Also please try to use code blocks instead of screenshots.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Declare a new type in the local types window:\n </p>\n <pre><code>union MZ_or_PE {\n  IMAGE_DOS_HEADER *MZ;\n  IMAGE_NT_HEADERS *PE;\n};\n</code></pre>\n <p>\n  Then change the type of what you're currently calling\n  <code>\n   module_base\n  </code>\n  to\n  <code>\n   MZ_or_PE\n  </code>\n  . This will allow you to choose which interpretation you want that variable to have at every place where it's used.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Dec 29, 2021 at 17:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The first line can't be changed how you have it. I think you're misunderstanding the layout of the data structures or what your code is doing.\n </p>\n <p>\n  module_base points to the base of the module and assuming it's of PE format, that's where the PE header should be. For backwards compatibility reasons, Microsoft kept the old DOS header as the root data structure. Up there is maintained the tiniest of DOS programs that just prints something like \"This program cannot run in DOS\". As an aside, you could technically craft your own PE header and include a fully functioning DOS program along side your modern PE program.\n </p>\n <p>\n  The DOS header is defined as IMAGE_DOS_HEADER in winnt.h as so:\n </p>\n <pre><code>typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header\n    WORD   e_magic;                     // Magic number\n    WORD   e_cblp;                      // Bytes on last page of file\n    WORD   e_cp;                        // Pages in file\n    WORD   e_crlc;                      // Relocations\n    WORD   e_cparhdr;                   // Size of header in paragraphs\n    WORD   e_minalloc;                  // Minimum extra paragraphs needed\n    WORD   e_maxalloc;                  // Maximum extra paragraphs needed\n    WORD   e_ss;                        // Initial (relative) SS value\n    WORD   e_sp;                        // Initial SP value\n    WORD   e_csum;                      // Checksum\n    WORD   e_ip;                        // Initial IP value\n    WORD   e_cs;                        // Initial (relative) CS value\n    WORD   e_lfarlc;                    // File address of relocation table\n    WORD   e_ovno;                      // Overlay number\n    WORD   e_res[4];                    // Reserved words\n    WORD   e_oemid;                     // OEM identifier (for e_oeminfo)\n    WORD   e_oeminfo;                   // OEM information; e_oemid specific\n    WORD   e_res2[10];                  // Reserved words\n    LONG   e_lfanew;                    // File address of new exe header\n} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;\n</code></pre>\n <p>\n  Anyway, since DOS is gone for the most part the only useful field up there is a field called\n  <code>\n   e_lfanew\n  </code>\n  (not elfnew). It's an offset to the new NT PE header, hence the name. The comment 'File address of new exe header' is how we know it's an offset. Without going into too much detail, the header doesn't really know where in memory it's going to get loaded. But it does know it's at the top (aka address 0) of the file. So a 'file address' is the distance from the top of the module to where ever you're attempting to go.\n </p>\n <p>\n  The DOS header on its own does not have a field called\n  <code>\n   OptionalHeader\n  </code>\n  therefor you can't\n  <code>\n   module_base->OptionalHeader\n  </code>\n  .\n  <code>\n   OptionalHeader\n  </code>\n  is a field in the new NT Header that\n  <code>\n   e_lfanew\n  </code>\n  points to.\n </p>\n <p>\n  Again in winnt.h the NT header is defined as\n </p>\n <pre><code>typedef struct _IMAGE_NT_HEADERS64 {\n    DWORD Signature;\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER64 OptionalHeader;\n} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;\n</code></pre>\n <p>\n  So to get to the NT header you need to do something like\n  <code>\n   PIMAGE_NT_HEADERS nt_headers = (PIMAGE_NT_HEADERS)(module_base + ((PIMAGE_DOS_HEADER)module_base)->e_lfanew);\n  </code>\n </p>\n <p>\n  Reading between the lines it looks like where you're actually trying to go is the IMAGE_DIRECTORY_ENTRY_EXPORT (defined as the 0 index into the DataDirectory, also in winnt.h). So once you have your nt_headers pointer, you can do\n  <code>\n   PIMAGE_EXPORT_DIRECTORY export_dir = (PIMAGE_EXPORT_DIRECTORY)(module_base + nt_headers->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n  </code>\n </p>\n <p>\n  All of these data structures are defined in winnt.h but Microsoft doesn't like to document them much online. They\n  <em>\n   kind of\n  </em>\n  talk about the PE format\n  <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#optional-header-image-only\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  but it stays general enough to require a lot of reading between the lines. There are plenty of others who have documented parts of this header, but I hesitate to link any without taking the time to thoroughly read through because they're often just out of date enough to be confusing.\n </p>\n <p>\n  Comment to let me know if you need any more clarification.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Thomas Mouton",
            "time": "Dec 29, 2021 at 11:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}