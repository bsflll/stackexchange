{
    "title": "Getting started with dynamic reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/6755/getting-started-with-dynamic-reverse-engineering",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been doing a lot of reading into how to find vulnerabilities in closed source applications. And the term that comes up a lot is \"fuzzing\".\n </p>\n <p>\n  I want to get started with fuzzing and I looking for any tips and hints on where and how to start. What tools to use, etc .\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "449",
    "tags": [
        "fuzzing"
    ],
    "user": "Sreyan",
    "time": "Dec 3, 2014 at 7:51",
    "comments": [
        {
            "user": "Cybergibbons",
            "text": "<html><body><span class=\"comment-copy\">\n Fuzzing is very much a dynamic analysis technique.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just find points of interest and reverse the flow back to find if there is something in the environment you can manipulate to your will alter the poi.\n </p>\n <p>\n  Eg, if you find a\n  <code>\n   memcpy(a, b, c);\n  </code>\n  check where b and c are coming from, are they from user generated input or system generated input, maybe they are statics.\nIf it they are generated from user input you can manipulate the flow of the program as you can copy arbitrary data into the memory. This\n  <strong>\n   might\n  </strong>\n  allow you to alter the stack and thus alter the flow of the program.\n </p>\n <p>\n  Leading into a security vulnerability.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Stolas",
            "time": "Dec 3, 2014 at 7:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sreyan",
                    "text": "<span class=\"comment-copy\">Are there any such tutorials describing techniques like what you have described. Your answer is okay but only describes one technique and not in very much detail.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Sreyan, Vulnerability Research has many shapes. This is a common technique. Another one is to write a fuzzer and do fault injection, hoping the program will crash after which you try to find a way to use this crash to gain code execution.  Fuzzing however is done so much that it yields way worse results than hand analysis. For training materials have a look at <a href=\"http://www.binary-auditing.com/\" rel=\"nofollow noreferrer\">binary-auditing.com</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A small list of tools often used to dynamic RE:\n </p>\n <ol>\n  <li>\n   <a href=\"https://github.com/pwndbg/pwndbg\" rel=\"nofollow noreferrer\">\n    PWNGDB\n   </a>\n   - plug-in to one of the most popular debugger DBG. It gives you the ability to check registers values, asm code, set breakpoints, look up stack, and much more.\n  </li>\n  <li>\n   (AFL)\n   <a href=\"https://github.com/google/AFL\" rel=\"nofollow noreferrer\">\n    American Luzzy Lop\n   </a>\n   - It's a very popular tool used to fuzzing binaries with genetic algorithms, It helps you find bugs and strange behavior which can be used in exploitation. For example when AFL detects that when you send a specific message to the fuzzed app then it will crash. And this information can be used to DoS attack.\n  </li>\n  <li>\n   Ltrace - linux debugging utility used to display calls to shared libraries (for example libc).\n  </li>\n  <li>\n   Ptrace - linux debugging system call that allows you to get control the execution of another process and debug it.\n  </li>\n  <li>\n   <a href=\"https://x64dbg.com/#start\" rel=\"nofollow noreferrer\">\n    x64dbg\n   </a>\n   - 64 bit debugger with many extensions like scyllahide\n  </li>\n  <li>\n   Cheat Engine - mostly used in game hacking offer debugging, memory scanning, and code injection.\n  </li>\n  <li>\n   <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools\" rel=\"nofollow noreferrer\">\n    Windbg\n   </a>\n   - advanced windows debugger works in user and kernel space\n  </li>\n  <li>\n   <a href=\"https://lldb.llvm.org/\" rel=\"nofollow noreferrer\">\n    Lldb\n   </a>\n   - high-performance debugger that is part of LLVM project\n  </li>\n </ol>\n <p>\n  Where to learn:\n  \n\n  I learned a lot from\n  <a href=\"https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w\" rel=\"nofollow noreferrer\">\n   LiveOverflow\n  </a>\n  and\n  <a href=\"https://www.youtube.com/c/GynvaelEN/videos\" rel=\"nofollow noreferrer\">\n   Gynvael Coldwind\n  </a>\n  videos on YouTube and participants in CTF-s and read\n  <a href=\"https://github.com/Ret2Me/WriteUps/blob/main/CTFs/ImaginaryCTF/Speed.md\" rel=\"nofollow noreferrer\">\n   write-ups\n  </a>\n  .\nYou can practice at: HackTheBox, Crackmes, CTF-s competitions, applications that allow you to do RE without breaking their ToS/license.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Filip Poplewski",
            "time": "Sep 14, 2021 at 21:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}