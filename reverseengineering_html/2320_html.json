{
    "title": "How do you optimise AST's or convert them to a real language",
    "link": "https://reverseengineering.stackexchange.com/questions/2320/how-do-you-optimise-asts-or-convert-them-to-a-real-language",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been interested in automatic vulnerability assessment and decompilation of code for a while now. And as a result I have been building parsers in Python that reads a bin, disassembles it instruction by instruction while tracing the execution (the way IDA does it).\n </p>\n <p>\n  I have been tracing the polluted registers (polluted as in user input) to check when such registers allow us to setup a call or a jump.\n </p>\n <p>\n  This research has grown to the point, where I want to transform it to a decompiler. I had a look at boomerang and other open source decompilers. I have also had a quick peek inside the dragon book (I don't own it). I would like to hear what you guys think about this idea. Below is my outline:\n </p>\n <ol>\n  <li>\n   Open the binary file to decompile.\n  </li>\n  <li>\n   Detect a filetype (PE or ELF) to select the EP and memory layout.\n  </li>\n  <li>\n   Jump to the EP and follow execution path of the code while disassembling. \nI use udis86 for it. This execution is in a libemu kind of way.\n  </li>\n  <li>\n   Parse the resulting assembly an middle language. To get\nsimpler instructions, (e.g. always remove things like\n   <code>\n    SHL EAX, 0x02\n   </code>\n   and\nchange those things to\n   <code>\n    MUL\n   </code>\n   instructions).\n  </li>\n  <li>\n   Parse it into a Abstract Syntax Tree.\n  </li>\n  <li>\n   Optimize the AST (although, I have no idea how).\n  </li>\n  <li>\n   Transform the AST to something that looks like C.\n  </li>\n </ol>\n <p>\n  I am having issues with the last 2 steps. How does someone parse AST to a real language or something that looks like it? How do you optimize ASTs? Are there build C or Python libraries to accomplish it?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "decompiler",
        "ast"
    ],
    "user": "Stolas",
    "time": "Jun 26, 2013 at 6:16",
    "comments": [
        {
            "user": "QAZ",
            "text": "<html><body><span class=\"comment-copy\">\n You may be interested in reading the Python source code for the recently released ida-decompiler:\n <a href=\"https://github.com/EiNSTeiN-/ida-decompiler\" rel=\"nofollow noreferrer\">\n  github.com/EiNSTeiN-/ida-decompiler\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ul>\n  <li>\n   The classic work on the decompilation is Cristina Cifuentes' PhD thesis\n   <a href=\"https://web.archive.org/web/20151227193610/http://zyloid.com/recomposer/files/decompilation_thesis.pdf\" rel=\"nofollow noreferrer\">\n    \"Reverse Compilation Techniques\"\n   </a>\n   . She describes generation of C code in Chapter 7.\n  </li>\n  <li>\n   The author of the REC decompiler also has\n   <a href=\"http://www.backerstreet.com/decompiler/introduction.htm\" rel=\"nofollow noreferrer\">\n    a nice summary about the decompilation process\n   </a>\n   , though it's more informal.\n  </li>\n  <li>\n   For completeness, here's\n   <a href=\"https://web.archive.org/web/20191011055350/https://hex-rays.com/products/ida/support/ppt/decompilers_and_beyond_white_paper.pdf\" rel=\"nofollow noreferrer\">\n    Ilfak's whitepaper on the Hex-Rays decompiler\n   </a>\n   , though he glances over this specific issue, only mentioning that it's \"Very straightforward and easy\" :).\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Ray",
            "time": "2 days ago",
            "is_accepted": true,
            "comments": []
        }
    ]
}