{
    "title": "How to find specific function in IDA pro",
    "link": "https://reverseengineering.stackexchange.com/questions/30130/how-to-find-specific-function-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Apologies if this account question may sound a bit stupid but I really need help with something\n </p>\n <p>\n  Let's say I had a function that looks something like this :\n </p>\n <pre><code>#undef curl_easy_setopt\nCURLcode curl_easy_setopt(struct Curl_easy *data, CURLoption tag, ...)\n{\n  va_list arg;\n  CURLcode result;\n\n  if(!data)\n    return CURLE_BAD_FUNCTION_ARGUMENT;\n\n  va_start(arg, tag);\n\n  result = Curl_vsetopt(data, tag, arg);\n\n  va_end(arg);\n  return result;\n}\n</code></pre>\n <p>\n  How could I go about the proccess of finding this function in IDA?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "c++"
    ],
    "user": "CoolNite",
    "time": "Mar 11, 2022 at 11:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As it happens, I recently reverse engineered (\n  <a href=\"https://www.msreverseengineering.com/blog/2022/1/25/an-exhaustively-analyzed-idb-for-comlook\" rel=\"nofollow noreferrer\">\n   and published an analysis of\n  </a>\n  ) a program that uses Curl, and I had the IDB open in the background. I decided to see if I could find the function in question. Here's how I did it.\n </p>\n <ol>\n  <li>\n   First, by searching for\n   <code>\n    CURLE_BAD_FUNCTION_ARGUMENT\n   </code>\n   , we\n   <a href=\"https://curl.se/libcurl/c/libcurl-errors.html\" rel=\"nofollow noreferrer\">\n    determine\n   </a>\n   that the value of the numeric constant is 43.\n  </li>\n  <li>\n   Under\n   <code>\n    Search->Immediate value\n   </code>\n   , input the number 43.\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/svPCe.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/svPCe.png\"/>\n  </a>\n </p>\n <ol start=\"3\">\n  <li>\n   IDA then displays a list of locations in the binary that use the immediate constant 43:\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/JLHRk.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/JLHRk.png\"/>\n  </a>\n </p>\n <ol start=\"4\">\n  <li>\n   <p>\n    Although there are 189 results in the code section, I didn't need to look at all of them. For example, in the second line of the image above, the value is being compared with an 8-bit register; I'm assuming\n    <code>\n     CURLcode\n    </code>\n    is an integer, so that's not the one we want. In the bottom three lines, we can see that one single function contains the constant three (actually, many) times; your snippet shows the number one single time, so that's not the one we want. I exclude many of the possibilities with reasoning like this; anything that is not\n    <code>\n     mov eax, 2Bh\n    </code>\n    , or anywhere that instruction appears more than once in a single function, is placed on the backburner for later analysis (if necessary).\n   </p>\n  </li>\n  <li>\n   <p>\n    I briefly look at each good-looking result to see if it has a similar control flow shape to the one from your question. Quickly, I find one that looks right (and as it happens, IDA had already named the function\n    <code>\n     curl_easy_setopt\n    </code>\n    due to its Lumina renaming feature):\n   </p>\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/guOS9.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/guOS9.png\"/>\n  </a>\n </p>\n <p>\n  Note that this trick would not have worked very well if the numeric value of\n  <code>\n   CURLE_BAD_FUNCTION_ARGUMENT\n  </code>\n  had been something like\n  <code>\n   1\n  </code>\n  ,\n  <code>\n   2\n  </code>\n  ,\n  <code>\n   4\n  </code>\n  ,\n  <code>\n   8\n  </code>\n  ,\n  <code>\n   16\n  </code>\n  ,\n  <code>\n   32\n  </code>\n  , etc. I exploited the fact that the number 43 does not appear extremely often in most programs in order to narrow down my search.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Mar 10, 2022 at 19:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "CoolNite",
                    "text": "<span class=\"comment-copy\">Thanks for this answer . Just a small question because I'm a bit new to this stuff. How do you search for CURLE_BAD_FUNCTION_ARGUMENT</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">In my example above, I just searched for it on Google. In general, given that your question was about a piece of open-source software, I'd go to the source code and find the enumeration or definition for that name, and determine its numeric value that way.</span>",
                    "time": null
                },
                {
                    "user": "CoolNite",
                    "text": "<span class=\"comment-copy\">What if when I try looking for the value 43 ,  I can't find anything that resembles what I'm looking for it  At all  And I did check in the source and I am certain I am supposed to be searching for 43</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Maybe it's not in there -- either because the program is not using Curl at all, or it's not using that function (or anything that calls that function). Or maybe the function has been inlined, and the return value was deleted because the compiler was able to prove that that return path could never be taken. It might be a good idea to see if you can find either functions that call the one you want, or functions that are called by the one you want -- maybe there are strings in those functions? -- and find yours via cross-references.</span>",
                    "time": null
                },
                {
                    "user": "CoolNite",
                    "text": "<span class=\"comment-copy\">Idk if I can find any function that calls curl_easy_setopt</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not a stupid question at all. Even the most seasoned reverse engineers run into issues with this task under sub optimal conditions. Like many challenges in this dark art, the solution, or strategies are \"reversed\" from conventional problem solving. Very poor attempt at humor... This is what happens to you 30 years later when you've been staring at a 8gb idb of anti-* for two sunsets, as a hobby.\n </p>\n <p>\n  So... You're probably thinking: If there were some strings or easily identifiable numbers I could search for them, and get a cross-reference to the code I'm searching for. That would be nice wouldn't it.\n </p>\n <p>\n  In reality the various metadata is often optimized or obfuscated in the targets of your analysis. Much later you'll cry tears of joy when you find a pdb sitting next to a large heavily obfuscated cpp executable.\n </p>\n <p>\n  Old man tip: Massive malware analysis repos, e.g. VirusTotal, allow you to do some interesting searches. You could for example do a search for: The string Release\\TargetApp64.pdb, Signer:\"TargetVendor\", File version:1.2.x. While malware analysis sites specifically do not directly support the uploading of pdb files due to the obvious disclosure risks, they do however maintain the compressed archive where the TargetExe.exe originated, which usually is where the pdb would also be located. ;)\n </p>\n <p>\n  Without strings and easily identifiable constants you have a wide variety of other characteristics you can pursue and that often will be even more effective in locating what it is you seek.\n </p>\n <h2>\n  Constants\n </h2>\n <p>\n  If the routine you are examining incorporates a little mathmatics the compiler will optimize the algorithmic code written by the developer into reduced expressions using specific, optimized constant values and data structures.\nThere are quite a few good papers and tools out there now on this topic. You could go after a few PHD(s) and spend a few years studying them write a plugin that will be not run on the next version of IDA or do what I do: Find a genuine subject matter expert in that field that has already done and use their wares, or bribe them with copious amounts of booze, and/or money and high octane life experiences. Everyone wins. Every reverse engineer needs a bad ass math ninja in their corner, especially one with a little swagger and grit. They do exist, and good luck on that. Seriously, bring me the five most brilliant mathematicians and I'll show you a dinner tab that isn't getting paid because they're arguing for an hour over how much each one should pay. Hire the one that pays the whole bill and slow walks to the bar.\nFor now a nice gentleman has been carrying the torch on the original Sigsrch/signsrch/Signsrch:\n  <a href=\"https://github.com/ajkhoury/IDA_Signsrch-7.0\" rel=\"nofollow noreferrer\">\n   https://github.com/ajkhoury/IDA_Signsrch-7.0\n  </a>\n </p>\n <h2>\n  Machine Code Signatures\n </h2>\n <p>\n  Machine code and data themselves area a great resource for applying a signature solution. An offset value from a register is can be a characteristic of the size of data structure or the location of a member within that data structure. The larger and more complex the structure or class, the easier it is to identify as the signature can be further enhanced.  There are a lot of variations to this but I'm sure you get the idea. For this strategy I'd suggest three things:\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     Lightweight Wildcard Lib\n    </strong>\n   </p>\n   <p>\n    Integrate a lightweight popular third party signature solution into\nyour project that is used by people to solve the exact problem\nyou're faced with. Game hackers have to solve this constantly to get\ntheir offsets for routines they need to hook and data that they need\nto manipulate. Check out something like this:\n    <a href=\"https://github.com/wanttobeno/x64_AOB_Search/blob/master/AobScan/Demo.cpp\" rel=\"nofollow noreferrer\">\n     https://github.com/wanttobeno/x64_AOB_Search/blob/master/AobScan/Demo.cpp\n    </a>\n   </p>\n  </li>\n  <li>\n   <h4>\n    F.L.I.R.T.\n   </h4>\n   <p>\n    Ilfak's and team provided a solid framework to tackle this a while\nago and it's been one of my key tools ever since. I crawl repos for\npopular libraries and SDK's then I generate signatures for\ntheroutines. Crypto, netcode, Compression/Algorithmic, runtimes,even\nfocused components like ML engines, sandboxes and crashhandlers. You\nhave to tune it a little bit and defniitely avoid making signatures\nfor routines that are only a few instructions in size, you'll wreck\na good workspace with ambiguous symbols.\n   </p>\n  </li>\n  <li>\n   <h4>\n    Ignore Him\n   </h4>\n   <p>\n    Ignore the person that replies to this thread and suggests an\nalternative.\n   </p>\n   <p>\n    If\n    <strong>\n     Mr. Miyagi\n    </strong>\n    could read machine code in a few thousand\ndifferent architectures he\n    <em>\n     might\n    </em>\n    be able to paint Ilfak's fence.\nI've had Ilfak's tools in my kit before cybersecurity was even a\nword and Hackers was a hipster movie trying to be like Sneakers that\nwanted to group into Wargames.\n   </p>\n  </li>\n </ol>\n <h2>\n  Relationships, Cross References and RTTI\n </h2>\n <p>\n  C++ is a real pain when you first encounter it and will be for a while down the road. If you want to get of the curve and do something I should've done the first few years into my career. C/C++ ABI: Think of it as a basic set of guidelines that OS and compiler vendors try to adhere to for the benefit of compatibility. The benefit to us is its one of the few sources of insight into how object oriented languages are consumed and laid out in memory. From a brief search I found this.:\n  <a href=\"https://www.oracle.com/technical-resources/articles/it-infrastructure/stable-cplusplus-abi.html\" rel=\"nofollow noreferrer\">\n   https://www.oracle.com/technical-resources/articles/it-infrastructure/stable-cplusplus-abi.html\n  </a>\n </p>\n <p>\n  If any other readers have a link to a modern introduction and overview of the primary ABI(s), it would surely be appreciated here as a reference.\n </p>\n <h4>\n  Class Informer (IDA Plugin)\n </h4>\n <p>\n  <a href=\"https://sourceforge.net/projects/classinformer/\" rel=\"nofollow noreferrer\">\n   https://sourceforge.net/projects/classinformer/\n  </a>\n </p>\n <p>\n  While IDA does have support for parsing RTTI structures to annotate c++ classes this plugin's last update took it up a notch and it does a great job analyzing virtual tables like those used by C++ classes.\n </p>\n <h4>\n  Devirtualize\n </h4>\n <p>\n  <a href=\"https://github.com/ALSchwalm/devirtualize\" rel=\"nofollow noreferrer\">\n   https://github.com/ALSchwalm/devirtualize\n  </a>\n </p>\n <p>\n  A few years back I stumbled on this IDA plugin, well written, lightweight and relatively easy to customize if needed:\n </p>\n <p>\n  I'd recommend installing it and debug step through it to get an idea how the author detects c++ classes and builds the relationships of its members to something useful in IDA. Then, if you want to really dig in, take on optimizing the code to detect things and solve problems that the original developer did not. Everybody see's things differently, that's the reason that for over 25 years now,  there have been dozens of remote root vulnerabilities found in the exact same hundred lines of Sendmail code, a single routine that countless auditors have reviewed previously.\n </p>\n <h2>\n  Symbol Porting\n </h2>\n <p>\n  If you have partial source code that was compiled into your analysis target you can build an executable or library with symbols, then port those over using something like BinDiff. Over several major version those guys have greatly simplified an otherwise very challenging and tedious task. The best part is they decided to release it as a free to download product now.\n </p>\n <p>\n  <strong>\n   BinDiff\n  </strong>\n  <a href=\"https://www.zynamics.com/software.html\" rel=\"nofollow noreferrer\">\n   https://www.zynamics.com/software.html\n  </a>\n </p>\n <p>\n  I'd recommend using whatever tools you have at your disposal to identify the OS version (major/minor), architecture, compiler version, and run time version (e.g. msvcrtX) on your analysis target. Then replicate those as closely as possible in the environment you are building your code with symbols. If the code your are porting symbols for is almost always integrated as a library (e.g. zlib.lib), rather than source, then you're in luck. Libs will be much better targets due to the reduction of compiler steps that may otherwise produce different target code.\n </p>\n <h2>\n  Runtime Analysis\n </h2>\n <p>\n  There are a lot of run time solutions that will observe data (e.g. class istance pointers) as it flows through code and use those records to dress up code. There are some interesting and heavy computer science/mathematics areas of study that have attracted some real bright folks into further solving this. In all the data flow, taint analysis, tracing, emulation, and other run time methods I've deployed over the years, I find myself doing it statically by hand now. A little code here and there to automate redundant tasks of course. If the code can be executed without requiring a secret, everything needed to execute it is in there somewhere, or somewhere close by. I'm very likely a masochist when it comes to reverse engineering but I think you have to be if you enjoy spending your life living inside a \"black box\".\nIf anyone ever gives you grief over a what you feel, is a simple question, they are either very young, or very talent less and will\n  <em>\n   never\n  </em>\n  truly shine. The most awe-striking, brilliant people I've had the pleasure to work with were\n  <em>\n   always\n  </em>\n  wide-eyed and exponentially humble. They'd drop everything, miss a critical deadline just to transfer knowledge, learn something themselves, share the experience and tackle an old demon once again. If it wasn't for them this reply wouldn't have been remotely possible.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Riley",
            "time": "Mar 10, 2022 at 2:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}