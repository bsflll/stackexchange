{
    "title": "What do the following AARCH64 LDR and STR instructions do exactly?",
    "link": "https://reverseengineering.stackexchange.com/questions/26542/what-do-the-following-aarch64-ldr-and-str-instructions-do-exactly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The following instructions are part of a IDA's disassembly of an AARCH64 binary. While it is fairly obvious that the\n  <code>\n   #\n  </code>\n  represent pure numbers and the\n  <code>\n   []\n  </code>\n  probably refer to the memory address referred to by the elements in the\n  <code>\n   []\n  </code>\n  , I don't quite understand what is the role of the \",\". I appreciate a description of the following load and store instructions.\n </p>\n <pre><code>LDR             X1, [X28,#0x10]\nSTR             X0, [SP,#0x30+arg_8]\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "assembly",
        "arm64",
        "aarch64"
    ],
    "user": "Newbie",
    "time": "Dec 15, 2020 at 6:55",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n IDA allows you to enable commentary to remind you of what particular instructions do. I'm not sure\n <a href=\"https://developer.arm.com/documentation/dui0802/a/A32-and-T32-Instructions/LDR-and-STR--immediate-offset-\" rel=\"nofollow noreferrer\">\n  what exactly is unclear from the documentation\n </a>\n (A32), i.e.\n <i>\n  what it is you're asking\n </i>\n . Also what is the exact opcode you are asking about? I'm thinking\n <a href=\"https://developer.arm.com/documentation/dui0802/a/A64-Data-Transfer-Instructions/LDR--register-?lang=en\" rel=\"nofollow noreferrer\">\n  this one\n </a>\n but it's not a 100% clear.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a pretty standard assembly syntax and not particular to AArch64.\n </p>\n <p>\n  The general pattern looks like:\n </p>\n <pre><code>[reg, displacement]\n</code></pre>\n <p>\n  (In some assemblers parentheses are used instead of square brackets)\n </p>\n <p>\n  The operation performed is approximately equivalent to the C expression:\n </p>\n <pre><code>*(reg+displacement)\n</code></pre>\n <p>\n  In other words, the displacement is added to the value of the register and the resulting value is\n  <em>\n   dereferenced\n  </em>\n  as if it was a pointer. For load instruction (LDR), the memory is\n  <em>\n   read\n  </em>\n  from and the result is stored in the destination register; for the store (STR), the source register’s value is\n  <em>\n   written\n  </em>\n  to the memory at the calculated address.\n </p>\n <p>\n  In case of the SP reference, IDA converted the raw displacement value to a\n  <em>\n   stack variable\n  </em>\n  reference. This is done so it’s easier to track accesses to the same area of the stack frame across the whole function.\nWhile the SP value may change at runtime, the  stack variables will be stored at the same offset from it on each run of the program.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Dec 15, 2020 at 21:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}