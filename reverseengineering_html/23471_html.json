{
    "title": "How can I retrieve the encryption key in this code?",
    "link": "https://reverseengineering.stackexchange.com/questions/23471/how-can-i-retrieve-the-encryption-key-in-this-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  can anyone explain the following code? is it possible to retrieve the encryption key?\nI think the code was heavily obfuscated in addition to obfuscation, I can recognize it is using algorithms like\n  <strong>\n   DESEDE\n  </strong>\n  with\n  <em>\n   CBC\n  </em>\n  and\n  <em>\n   PKCS5Padding\n  </em>\n  to encrypt http post traffic from the app. my question is does any one know how to retrieve the key here?\n </p>\n <pre><code>package c.e.a.a.g;\n\nimport a.a;\nimport android.util.Base64;\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Random;\nimport java.util.regex.Pattern;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class b {\n\n    /* renamed from: a reason: collision with root package name */\n    private static volatile b f4799a;\n\n    /* renamed from: b reason: collision with root package name */\n    private byte[] f4800b = null;\n\n    /* renamed from: c reason: collision with root package name */\n    private String f4801c;\n\n    private b() {\n        try {\n            this.f4801c = a.a(new byte[]{97, 110, 100, 95, 50, 51, 116, 107, 108, 35, 95, 97, 105, 116, 33}, new byte[]{75, 24, 109, 27, -24, -51, 22, -58, -44, -74, 21, 91, -88, 48, -52, -63, 69, -67, 71, 17, 116, 77, 70, -94, 41, 121, 20, 120, 8, 121, 33, 77});\n        } catch (GeneralSecurityException e2) {\n            e2.printStackTrace();\n        }\n        this.f4800b = e(this.f4801c);\n    }\n\n    public static b a() {\n        if (f4799a == null) {\n            synchronized (b.class) {\n                if (f4799a == null) {\n                    f4799a = new b();\n                }\n            }\n        }\n        return f4799a;\n    }\n\n    private final String c(String str) {\n        try {\n            Cipher instance = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n            instance.init(2, new SecretKeySpec(this.f4800b, \"DESede\"));\n            return a(instance.doFinal(new a().a(str)));\n        } catch (Exception e2) {\n            e2.printStackTrace();\n            return null;\n        }\n    }\n\n    private final String d(String str) {\n        try {\n            Cipher instance = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n            instance.init(1, new SecretKeySpec(this.f4800b, \"DESede\"));\n            try {\n                return Base64.encodeToString(instance.doFinal(str.getBytes()), 0);\n            } catch (IllegalBlockSizeException e2) {\n                e2.printStackTrace();\n                return \"\";\n            } catch (BadPaddingException e3) {\n                e3.printStackTrace();\n                return \"\";\n            }\n        } catch (NoSuchAlgorithmException e4) {\n            e4.printStackTrace();\n        } catch (NoSuchPaddingException e5) {\n            e5.printStackTrace();\n        } catch (InvalidKeyException e6) {\n            e6.printStackTrace();\n        }\n    }\n\n    private final byte[] e(String str) {\n        try {\n            return MessageDigest.getInstance(\"MD5\").digest(str.getBytes(\"UTF-8\"));\n        } catch (NoSuchAlgorithmException e2) {\n            e2.printStackTrace();\n            return null;\n        } catch (UnsupportedEncodingException e3) {\n            e3.printStackTrace();\n            return null;\n        }\n    }\n\n    public String b(String str) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(str);\n        sb.append(b());\n        return d(sb.toString());\n    }\n\n    private String b() {\n        int nextInt = new Random().nextInt(999999);\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"|\");\n        sb.append(nextInt);\n        return sb.toString();\n    }\n\n    public String a(String str) {\n        return c(str).split(Pattern.quote(\"|\"))[0];\n    }\n\n    public b(String str) {\n        this.f4800b = e(str);\n    }\n\n    private final String a(byte[] bArr) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for (byte b2 : bArr) {\n            stringBuffer.append((char) b2);\n        }\n        return stringBuffer.toString();\n    }\n}\n</code></pre>\n <p>\n  an example of encrypted http post request produced by this code is like following:\n </p>\n <pre><code>{\"MobileUsersBE\":{\"AppVersion\":\"vB0gg8dKw8/ssTAXDUHLDw==\n\",\"DeviceCode\":\"NUIDvs43seBumI3SU7Q1R/NWzO0ylo08jPjWcGUxZsFCjEu/IEjcEUYM4V6zswVc\n\",\"DeviceType\":\"android\",\"GCMCellId\":\"\",\"Password\":\"P4fM264BxQXhd3RQu5vk8w==\n\",\"UserName\":\"i2WZyhFJ9CZTx40Th83siw==\n\"},\"ServiceUsersBE\":{\"AppVersion\":\"ZA+PaD1HcAVZ384ENwEWBw==\n\",\"DeviceCode\":\"NUIDvs43seBumI3SU7Q1R/NWzO0ylo08jPjWcGUxZsFOFoCbYVotoPrT8YV4yEHL\n\",\"DeviceType\":\"android\",\"Password\":\"t1h6/ATZ26VA8nS+fcnvkv0wtPbV8onO\n\",\"TransactionCode\":\"vfTVe1PFdoFSMOdyYSxAI33cLtBw3z3uUrzOGlZJafQYzgg+Te+n/sDv/nyll3T2\",\"UserName\":\"N67a2TEuY68jsRadkP0JGrh64aKxVin1\n\"}}\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "610",
    "tags": [
        "android",
        "encryption",
        "java",
        "patch-reversing",
        "apk"
    ],
    "user": "hanan",
    "time": "Mar 20, 2020 at 10:41",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n With ref. to the code you posted, the key is derived as\n <code>\n  md5(this.f4801c)\n </code>\n . You need to find out what the function\n <code>\n  a.a\n </code>\n is doing with the two byte arrays.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hanan",
            "text": "<html><body><span class=\"comment-copy\">\n hello bro @0xec , I have posted the source code of a.a in here [\n <a href=\"https://pastebin.com/L03kwbpj\" rel=\"nofollow noreferrer\">\n  pastebin.com/L03kwbpj\n </a>\n ] , appreciate your help, in some cases in this method code looked like it makes decryption. take a look and i appreciate your help.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The encryption key is stored in the variable\n  <code>\n   f4800b\n  </code>\n  . It comes out to the following byte array.\n </p>\n <pre><code>43, 57, 97, -68, -63, -61, -40, 9, 50, 87, -104, 101, 63, 34, -78, 60\n</code></pre>\n <p>\n  The cipher algorithm used is Triple-DES in ECB mode. It can be decrypted by the following snippet. Note that it requires the BouncyCastle Crypto provider for Java.\n </p>\n <pre><code>import java.security.*;\nimport java.util.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class Main\n{\n    public static void main(String args[]) throws Exception\n    {\n        Security.addProvider(new BouncyCastleProvider());\n        byte key[] = new byte[] {43, 57, 97, -68, -63, -61, -40, 9, 50, 87, -104, 101, 63, 34, -78, 60};\n\n        //Base64 encoded cipher text here\n        byte ct[] = Base64.getDecoder().decode(\"i2WZyhFJ9CZTx40Th83siw==\");\n\n        Cipher instance = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n        instance.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \"DESede\"));\n        String pt = new String(instance.doFinal(ct));\n        System.out.println(pt);\n    }\n}\n\n</code></pre>\n <h2>\n  Sample output\n </h2>\n <p>\n  Using the JSON snippet you provided\n </p>\n <pre><code>{\n   \"MobileUsersBE\":{\n      \"AppVersion\":\"vB0gg8dKw8/ssTAXDUHLDw==\n\",\n      \"DeviceCode\":\"NUIDvs43seBumI3SU7Q1R/NWzO0ylo08jPjWcGUxZsFCjEu/IEjcEUYM4V6zswVc\n\",\n      \"DeviceType\":\"android\",\n      \"GCMCellId\":\"\",\n      \"Password\":\"P4fM264BxQXhd3RQu5vk8w==\n\",\n      \"UserName\":\"i2WZyhFJ9CZTx40Th83siw==\n\"\n   },\n   \"ServiceUsersBE\":{\n      \"AppVersion\":\"ZA+PaD1HcAVZ384ENwEWBw==\n\",\n      \"DeviceCode\":\"NUIDvs43seBumI3SU7Q1R/NWzO0ylo08jPjWcGUxZsFOFoCbYVotoPrT8YV4yEHL\n\",\n      \"DeviceType\":\"android\",\n      \"Password\":\"t1h6/ATZ26VA8nS+fcnvkv0wtPbV8onO\n\",\n      \"TransactionCode\":\"vfTVe1PFdoFSMOdyYSxAI33cLtBw3z3uUrzOGlZJafQYzgg+Te+n/sDv/nyll3T2\",\n      \"UserName\":\"N67a2TEuY68jsRadkP0JGrh64aKxVin1\n\"\n   }\n}\n</code></pre>\n <p>\n  Shown below are the ciphertexts and the corresponding plaintext to which it decrypts to.\n </p>\n <pre><code>vB0gg8dKw8/ssTAXDUHLDw==\n2.3|138771\n</code></pre>\n <pre><code>NUIDvs43seBumI3SU7Q1R/NWzO0ylo08jPjWcGUxZsFCjEu/IEjcEUYM4V6zswVc\n8f850645-36ec-350a-8bb3-09c004daeb14|36159\n</code></pre>\n <pre><code>P4fM264BxQXhd3RQu5vk8w==\ntest1234|364081\n</code></pre>\n <pre><code>i2WZyhFJ9CZTx40Th83siw==\ntest|55664\n</code></pre>\n <p>\n  Note that each plain text has a random number appended at the end after the\n  <code>\n   |\n  </code>\n  sign. This acts like a salt so that identical plain-texts do not encrypt to the same ciphertext.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "0xec",
            "time": "Mar 21, 2020 at 10:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Comments are not for extended discussion; this conversation has been <a href=\"https://chat.stackexchange.com/rooms/105860/discussion-on-answer-by-0xec-how-can-i-retrieve-the-encryption-key-in-this-code\">moved to chat</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}