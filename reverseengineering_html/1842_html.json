{
    "title": "What are the main features of radare2?",
    "link": "https://reverseengineering.stackexchange.com/questions/1842/what-are-the-main-features-of-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://radare.org/y/\">\n   Radare2\n  </a>\n  is a framework for reverse-engineering gathering several tools (see this\n  <a href=\"http://www.phrack.org/issues.html?issue=66&id=14#article\">\n   Phrack article\n  </a>\n  about radare1 to know a bit more about the framework).\n </p>\n <p>\n  I would like to know if someone could point out the main useful features of the framework for reverse engineering ? And, particularly what makes radare2 different from other tools or frameworks ?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 1,
    "views": "3k",
    "tags": [
        "tools",
        "binary-analysis",
        "radare2"
    ],
    "user": "perror",
    "time": "Apr 18, 2013 at 9:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  from its\n  <a href=\"http://radare.org/y/?p=features\">\n   feature\n  </a>\n  page:\n </p>\n <ul>\n  <li>\n   Multi-architecture and multi-platform\n   <ul>\n    <li>\n     GNU/Linux, Android, *BSD, OSX, iPhoneOS, Windows{32,64} and Solaris\n    </li>\n    <li>\n     x86{16,32,64}, dalvik, avr, arm, java, powerpc, sparc, mips, bf, csr, m86k, msil, sh\n    </li>\n    <li>\n     pe{32,64}, [fat]mach0{32,64}, elf{32,64}, te, dex and java classes\n    </li>\n   </ul>\n  </li>\n  <li>\n   Highly scriptable\n   <ul>\n    <li>\n     Vala, Go, Python, Guile, Ruby, Perl, Lua, Java, JavaScript, sh, ..\n    </li>\n    <li>\n     batch mode and native plugins with full internal API access\n    </li>\n    <li>\n     native scripting based in mnemonic commands and macros\n    </li>\n   </ul>\n  </li>\n  <li>\n   Hexadecimal editor\n   <ul>\n    <li>\n     64bit offset support with virtual addressing and section maps\n    </li>\n    <li>\n     Assemble and disassemble from/to many architectures\n    </li>\n    <li>\n     colorizes opcodes, bytes and debug register changes\n    </li>\n    <li>\n     print data in various formats (int, float, disasm, timestamp, ..)\n    </li>\n    <li>\n     search multiple patterns or keywords with binary mask support\n    </li>\n    <li>\n     checksumming and data analysis of byte blocks\n    </li>\n   </ul>\n  </li>\n  <li>\n   IO is wrapped\n   <ul>\n    <li>\n     support Files, disks, processes and streams\n    </li>\n    <li>\n     virtual addressing with sections and multiple file mapping\n    </li>\n    <li>\n     handles gdb:// and rap:// remote protocols\n    </li>\n   </ul>\n  </li>\n  <li>\n   Filesystems support\n   <ul>\n    <li>\n     allows to mount ext2, vfat, ntfs, and many others\n    </li>\n    <li>\n     support partition types (gpt, msdos, ..)\n    </li>\n   </ul>\n  </li>\n  <li>\n   Debugger support\n   <ul>\n    <li>\n     gdb remote and\n     <strong>\n      brainfuck\n     </strong>\n     debugger support\n    </li>\n    <li>\n     software and hardware breakpoints\n    </li>\n    <li>\n     tracing and logging facilities\n    </li>\n   </ul>\n  </li>\n  <li>\n   Diffing between two functions or binaries\n   <ul>\n    <li>\n     graphviz friendly code analysis graphs\n    </li>\n    <li>\n     colorize nodes and edges\n    </li>\n   </ul>\n  </li>\n  <li>\n   Code analysis at opcode, basicblock, function levels\n   <ul>\n    <li>\n     embedded simple virtual machine to emulate code\n    </li>\n    <li>\n     keep track of code and data references\n    </li>\n    <li>\n     function calls and syscall decompilation\n    </li>\n    <li>\n     function description, comments and library signatures\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "15",
            "user": "Anton Kochkov",
            "time": "Apr 20, 2013 at 13:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}