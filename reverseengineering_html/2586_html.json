{
    "title": "What is this 'mathematical jigsaw puzzles' obfuscation?",
    "link": "https://reverseengineering.stackexchange.com/questions/2586/what-is-this-mathematical-jigsaw-puzzles-obfuscation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You must have heard about it, it all over the on-line newspapers. Some researchers from UCLA claims to have achieved a\n  <a href=\"http://newsroom.ucla.edu/portal/ucla/ucla-computer-scientists-develop-247527.aspx\">\n   breakthrough in software obfuscation\n  </a>\n  through 'mathematical jigsaw puzzles'.\n </p>\n <p>\n  Their\n  <a href=\"http://eprint.iacr.org/2013/451.pdf\">\n   scientific paper\n  </a>\n  can be found on\n  <a href=\"http://eprint.iacr.org/2013/451\">\n   IACR eprint website\n  </a>\n  .\n </p>\n <p>\n  Can someone sum-up what is really the content of the paper (and does is really worth it) ?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 2,
    "views": "2k",
    "tags": [
        "obfuscation",
        "cryptography",
        "whitebox-crypto"
    ],
    "user": "perror",
    "time": "Aug 5, 2013 at 8:51",
    "comments": [
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n Why not read the paper?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n Anyway, I doubt it has any practical applications, but it might be interesting theoretically.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @Antimony: I am on it ! But, it's a long one... and I am not a specialist of circuits complexity theory. So, if somebody finish before me and give a perfect explanation, I'll be happy. And, if I finish it before any answer is given, then I will answer to my own question.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mikeazo",
            "text": "<html><body><span class=\"comment-copy\">\n Related:\n <a href=\"http://crypto.stackexchange.com/questions/9497/practical-consequences-of-using-functional-encryption-for-software-obfuscation\" title=\"practical consequences of using functional encryption for software obfuscation\">\n  crypto.stackexchange.com/questions/9497/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Good shot mikeazo ! I should have looked at Crypto SE... So, it seems that it tries to get the software as close as possible to a black-box analysis. I will try to investigate the practical aspects a bit more in details (implementability and so on). If I find something interesting to say, I'll write an answer here (in a more \"Reverse Engineering\" way, though).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are three main contributions of the research\n </p>\n <ol>\n  <li>\n   <p>\n    A proposed indistinguishability obfuscation for NC\n    <sup>\n     1\n    </sup>\n    circuits where the security is based on the so called\n    <em>\n     Multilinear Jigsaw Puzzles\n    </em>\n    (a simplified variant of multilinear maps).\n   </p>\n  </li>\n  <li>\n   <p>\n    Pair the contribution in 1 with Fully Homomorphic Encryption and you get indistinguishability obfuscation for all circuits.\n   </p>\n  </li>\n  <li>\n   <p>\n    Combine 2 with public key encryption and non-interactive zero-knowledge proofs and you functional encryption for all circuits. I believe that prior to this functional encryption for\n    <strong>\n     all\n    </strong>\n    circuits was not possible.\n   </p>\n  </li>\n </ol>\n <p>\n  So, lets look at these in turn.\n </p>\n <p>\n  <strong>\n   Indistinguishability obfuscation\n  </strong>\n  (contributions 1 and 2)\n  \n\n  From the paper\n </p>\n <blockquote>\n  <p>\n   It is important to note that unlike simulation-based definitions of obfuscation, it is not immediately\n  clear how useful indistinguishability obfuscators would be. Perhaps the strongest philosophical justification\n  for indistinguishability obfuscators comes from the work of Goldwasser and Rothblum [GR07], who showed\n  that (efficiently computable) indistinguishability obfuscators achieve the notion of Best-Possible Obfuscation [GR07]: Informally, a best-possible obfuscator guarantees that its output hides as much about the input circuit as any circuit of a certain size.\n  </p>\n </blockquote>\n <p>\n  Thus, the main contributions when it comes to Indistinguishability obfuscation of this paper is to show a construction for IO that works on all circuits, then pair that with a few other things to get functional encryption for any circuits.\n </p>\n <p>\n  Note that the usefulness of IOs will only become greater as time goes one. As seen in\n  <a href=\"http://eprint.iacr.org/2013/454.pdf\" rel=\"nofollow\">\n   another paper by some of the same authors\n  </a>\n  and hopefully they will become more practical as new constructions are proposed.\n </p>\n <p>\n  <strong>\n   Functional Encryption\n  </strong>\n  (contribution 3)\n  \n\n  Prior to this work FE has only been possible on small circuits. Using 1 and 2, with some other crypto primitives, the authors were able to build FE on all circuits. That is a very significant result.\n </p>\n <p>\n  <strong>\n   What does this mean for Anti-RE\n  </strong>\n  \n\n  It would appear that by itself, indistinguishability obfuscation means very little for anti-reverse engineering. FE on any circuit, however, could be significant. Here is the reason. FE allows for results of a computation to be in plaintext. Compare this with fully homomorphic encryption (FHE) where results will be encrypted or with Multiparty Comptuation were we require multiple parties (but can have plaintext results). Thus, I could give you a key which would allow you to, say, AES decrypt any data I send to you. You would never know the AES key though. There are techniques that also allow you to\n  <a href=\"http://eprint.iacr.org/2013/283.pdf\" rel=\"nofollow\">\n   hide the function\n  </a>\n  (not just the inputs).\n </p>\n <p>\n  Imagine if you had the ability to allow someone to compute only a specific function(s) on private data that I send you and still get plaintext results. Furthermore, the function is hidden, so they can't reverse engineer the function. That is the contribution of FE, and FE on any circuit is what this work enables.\n </p>\n <p>\n  <strong>\n   Practicality\n  </strong>\n  \n\n  From what I see in the paper, contribution 1 could be practical for real world use, though I am not completely sure. Multilinear maps are pretty inefficient at the moment, but the construction used here is somewhat simplified. Since 2 uses FHE, it isn't practical yet. Since 3 uses 2 and some other heavy-weight crypto, it is also, not practical at the time.\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "mikeazo",
            "time": "Jun 12, 2014 at 18:33",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I still wonder should I add a comment on this because my knowledge on the cryptography is extremely limited. The paper on the jigsaw obfuscation uses a term named\n  <em>\n   functional encryption\n  </em>\n  , that means with the private key in hand the obfuscator can design some functions working on the encrypted data. And someone without the private key can use these functions on the encrypted data, but still know nothing about the data.\n </p>\n <p>\n  For example, the obfuscator designs a function plus1 satisfying:\n </p>\n <blockquote>\n  <p>\n   plus1(encrypted(x)) = encrypted(x+1)\n  </p>\n </blockquote>\n <p>\n  the attacker will know that if he uses plus1, he can increase x by 1, but he does not know anything about the value of x.\n </p>\n <p>\n  Now with the jigsaw obfuscation, given a program P with some input a, the obfuscator will encrypt the obfuscated program p as p = encrypt(P), then design a function F with input is some pair (p, a) satisfying:\n </p>\n <blockquote>\n  <p>\n   F(p,a) = decrypt(p)(a) = P(a)\n  </p>\n </blockquote>\n <p>\n  (note that F satisfies the equivalence above but the design of F is not trivial like that), and that means the attacker can always use F and p to get the output P(a), but he does not know anything about P.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ta Thanh Dinh",
            "time": "Nov 24, 2013 at 21:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}