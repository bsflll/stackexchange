{
    "title": "How to include these exception handle symbols in x86 assembly code?",
    "link": "https://reverseengineering.stackexchange.com/questions/6393/how-to-include-these-exception-handle-symbols-in-x86-assembly-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The test is on 32bit x86 Linux, with\n  <code>\n   g++\n  </code>\n  4.6.3.\n </p>\n <p>\n  So basically I use a\n  <a href=\"https://reverseengineering.stackexchange.com/questions/6311/how-to-recover-the-exception-info-from-gcc-except-table-and-eh-handle-sections\">\n   IDA pro script\n  </a>\n  to recover the\n  <code>\n   .gcc_excpt_table\n  </code>\n  and\n  <code>\n   .eh_frame\n  </code>\n  sections from binary compiled from\n  <code>\n   C++\n  </code>\n  language.\n </p>\n <p>\n  Basically I want to reuse the dumped information of these two exception handling tables in a new assembly code disassembled from this\n  <code>\n   C++\n  </code>\n  ELF binary.\n </p>\n <p>\n  I put these two tables into the assembly code produced by disassembler, solving all intra-module address issue (basically translate concrete addresses into symbols) and re-compile it like this:\n </p>\n <pre><code>g++ final.s\n</code></pre>\n <p>\n  However, there are three symbols that can not be found or I just don't know how to define it.\n </p>\n <ol>\n  <li>\n   <code>\n    _Unwind_Resume\n   </code>\n   are undefined\n  </li>\n  <li>\n   <code>\n    __FRAME_END__\n   </code>\n   are undefined\n  </li>\n  <li>\n   It seems that\n   <code>\n    eh_frame\n   </code>\n   requires the beginning address of\n   <code>\n    .plt\n   </code>\n   table, but is there anyway to get the beginning address of\n   <code>\n    .plt\n   </code>\n   table during compiling? I know I can use the symbol\n   <code>\n    _GLOBAL_OFFSET_TABLE_\n   </code>\n   to represent the beginning address of table\n   <code>\n    .got.plt\n   </code>\n   , but after a quick search, I just don't know whether there is a similar symbol representing\n   <code>\n    .plt\n   </code>\n   table.\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "286",
    "tags": [
        "disassembly",
        "x86",
        "c++",
        "reassembly",
        "exception"
    ],
    "user": "lllllllllllll",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": []
}