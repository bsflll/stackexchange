{
    "title": "How to remove bytes/opcodes within IDA Pro database",
    "link": "https://reverseengineering.stackexchange.com/questions/22508/how-to-remove-bytes-opcodes-within-ida-pro-database",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am dealing with a heavily obfuscated binary, with certain portions of it having an abundance of junk code when it attempts to set a value at certain offsets to esp/ebp.  My question, having identified the junk code from the actual code, is how can I remove the junk opcodes entirely and shorten the disassembly to the direct operation that it is employing?  I have found no delete/remove bytes in the SDK, and short of a processor module, I am not sure if IDA has this capability, which would be a shame if it didn't.\n </p>\n <ul>\n  <li>\n   from:\n  </li>\n </ul>\n <pre><code>add     ecx, 4  \nmov     edi, 32F88Eh    ; junk  \nand     edi, 34h        ; junk  \nadd     edi, 0aB0b2cE6h ; junk  \nmov     ebx, 98761234h  ; junk  \nmov     [ebp+edi+47652784], ecx; [ebp+0xa0]\n</code></pre>\n <p>\n  The manipulations to\n  <code>\n   edi\n  </code>\n  are junk in the sense their value is actually static once you apply constant folding to it\n </p>\n <ul>\n  <li>\n   to:\n  </li>\n </ul>\n <pre><code>add ecx, 4  \nmov [ebp+0xa0], ecx\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "deobfuscation"
    ],
    "user": "Plug Loafsley",
    "time": "Nov 11, 2019 at 13:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can't just remove bytes since that would shift the following opcodes and invalidate all relative jumps/calls. The usual approach in such cases is patching the junk instructions with NOPs (0x90 for x86/x64). You can write a smalls script to do it (e.g. using\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/713.shtml\" rel=\"nofollow noreferrer\">\n   <code>\n    patch_byte\n   </code>\n  </a>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Nov 11, 2019 at 18:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Plug Loafsley",
                    "text": "<span class=\"comment-copy\">Thanks for response, which in a way, answers my question.  I have been doing it exactly the way you mentioned, but was hoping that if patched correctly, and re-analyzed, the disassembly could be reconstructed accordingly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Answering my own question as an additional one to Igor's.\n </p>\n <p>\n  Using nops excessively is perhaps fine for a single routine, or certain instances (at least for me), but the solution I prefer in this case is just cleaning up the code manually outside of IDA, and then adding a separate segment for it into the idb.  That way I don't have to modify the obfuscated code at all, and can have both (clean/dirty) versions, with the clean one becoming the target for further analysis.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Plug Loafsley",
            "time": "Nov 12, 2019 at 9:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}