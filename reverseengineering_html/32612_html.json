{
    "title": "How to analyze changing sections before the entry point?",
    "link": "https://reverseengineering.stackexchange.com/questions/32612/how-to-analyze-changing-sections-before-the-entry-point",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently looking at a packed binary that modifies the\n  <code>\n   .text\n  </code>\n  and other sections on startup. The sections in question are empty when stored on disk (only a non-zero virtual size).\n </p>\n <p>\n  Interestingly, the application seems to unpack itself at a very early point of execution. I've set all possible breakpoints in the OllyDBG menu (thread create, TLS callbacks, DLL entry, etc.), and the first BP that hits when running the application is a thread entry. At that point the instructions in\n  <code>\n   .text\n  </code>\n  are already present.\n </p>\n <p>\n  My question is where the unpacking could happen before all of the above-mentioned steps, and how I could find the location of the code that is responsible for the unpacking?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "72",
    "tags": [
        "ollydbg",
        "unpacking"
    ],
    "user": "Bobface",
    "time": "Jan 3, 2024 at 15:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have you tried setting a hardware watchpoint on the address of the section being unpacked ? The debugger will stop when this address is being accessed.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "HellDiner",
            "time": "Jan 4, 2024 at 14:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}