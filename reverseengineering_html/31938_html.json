{
    "title": "Dumpbin show function names",
    "link": "https://reverseengineering.stackexchange.com/questions/31938/dumpbin-show-function-names",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is there any way I can use\n  <code>\n   dumpbin\n  </code>\n  like\n  <code>\n   objdump\n  </code>\n  , where I can just look at the functions machine instructions that I implemented in my\n  <code>\n   Source.c\n  </code>\n  file, which I compiled to\n  <code>\n   source.exe\n  </code>\n  ?\nIf I use\n  <code>\n   dumpbin \\DISASM\n  </code>\n  with the section\n  <code>\n   .text\n  </code>\n  it shows me a lot of machine instructions, but it's impossible to find the machine instructions I am looking for.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "754",
    "tags": [
        "disassembly"
    ],
    "user": "killertoge",
    "time": "Jun 15, 2023 at 11:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You could utilize debug symbols to search for the disassembled code of interest. Here's a TL;DR from\n  <code>\n   dumpbin\n  </code>\n  's docs:\n </p>\n <ol>\n  <li>\n   <code>\n    dumpbin\n   </code>\n   <a href=\"https://learn.microsoft.com/en-us/cpp/build/reference/disasm?view=msvc-170#remarks\" rel=\"nofollow noreferrer\">\n    always searches for embedded symbols\n   </a>\n   within the file:\n  </li>\n </ol>\n <blockquote>\n  <p>\n   The /DISASM option displays disassembly of code sections in the file. It uses debug symbols if they are present in the file.\n  </p>\n </blockquote>\n <ol start=\"2\">\n  <li>\n   <code>\n    dumpbin\n   </code>\n   tries to\n   <a href=\"https://learn.microsoft.com/en-us/cpp/build/reference/nopdb?view=msvc-170#remarks\" rel=\"nofollow noreferrer\">\n    load debug symbol information\n   </a>\n   for the disassembled binary (works with PDB, no information on support for DWARF and other formats):\n  </li>\n </ol>\n <blockquote>\n  <p>\n   By default, DUMPBIN attempts to load PDB files for its target executables. DUMPBIN uses this information to match addresses to symbol names.\n  </p>\n </blockquote>\n <p>\n  If your\n  <code>\n   source.exe\n  </code>\n  was compiled with MSVC, simply put\n  <code>\n   .pdb\n  </code>\n  file in the same directory and use:\n </p>\n <pre><code>dumpbin /DISASM source.exe\n</code></pre>\n <p>\n  The output will have symbol names applied - example disassembly fragment:\n </p>\n <pre><code>??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z:\n  0000000140011870: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx\n  0000000140011875: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx\n  000000014001187A: 55                 push        rbp\n  000000014001187B: 57                 push        rdi\n  000000014001187C: 48 81 EC 28 02 00  sub         rsp,228h\n                    00\n  0000000140011883: 48 8D 6C 24 20     lea         rbp,[rsp+20h]\n  0000000140011888: 48 8D 7C 24 20     lea         rdi,[rsp+20h]\n  000000014001188D: B9 52 00 00 00     mov         ecx,52h\n  0000000140011892: B8 CC CC CC CC     mov         eax,0CCCCCCCCh\n  0000000140011897: F3 AB              rep stos    dword ptr [rdi]\n  0000000140011899: 48 8B 8C 24 48 02  mov         rcx,qword ptr [rsp+248h]\n                    00 00\n  00000001400118A1: 48 8B 05 58 B7 00  mov         rax,qword ptr [__security_cookie]\n                    00\n  00000001400118A8: 48 33 C5           xor         rax,rbp\n  00000001400118AB: 48 89 85 F8 01 00  mov         qword ptr [rbp+1F8h],rax\n                    00\n  00000001400118B2: 48 8D 0D AA 17 01  lea         rcx,[140023063h]\n                    00\n  00000001400118B9: E8 11 FB FF FF     call        @ILT+970(__CheckForDebuggerJustMyCode)\n  00000001400118BE: C7 45 04 00 00 00  mov         dword ptr [rbp+4],0\n                    00\n  00000001400118C5: 48 8B 8D 28 02 00  mov         rcx,qword ptr [rbp+228h]\n                    00\n  00000001400118CC: E8 79 F8 FF FF     call        @ILT+325(?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z)\n\n...\n</code></pre>\n <p>\n  If you find decorated names confusing, you can use\n  <a href=\"https://learn.microsoft.com/en-us/cpp/build/reference/decorated-names?view=msvc-170#Undecorated\" rel=\"nofollow noreferrer\">\n   <code>\n    undname\n   </code>\n  </a>\n  to decipher decorated/mangled symbol names into their signatures:\n </p>\n <pre><code>undname <decorated name>\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "mimak",
            "time": "Jun 4, 2023 at 19:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}