{
    "title": "What is the difference between MOV and LEA in example?",
    "link": "https://reverseengineering.stackexchange.com/questions/23285/what-is-the-difference-between-mov-and-lea-in-example",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Looking at an assembly code snippet I see:\n </p>\n <pre><code>lea rax, [rbp-0x50]\n</code></pre>\n <p>\n  Which tells me that the\n  <code>\n   rax\n  </code>\n  register now points to whatever value is in rbp-hex(50).\n </p>\n <p>\n  <strong>\n   Question. Would I achieve the same result doing this?\n  </strong>\n  :\n </p>\n <pre><code>mov rax, dword ptr [rbp-0x50]\n</code></pre>\n <p>\n  If so, what is the need for the\n  <code>\n   lea\n  </code>\n  instruction anyways?\n </p>\n <p>\n  Thank you for your patience as I am diving into 64b assembler.\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 4,
    "views": "10k",
    "tags": [
        "x86-64",
        "assembly",
        "pointer",
        "nasm"
    ],
    "user": "user3732445",
    "time": "Feb 18, 2020 at 18:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  lea = address\n  \n\n  mov = contents\n </p>\n <p>\n  if address 0x401000 contains 0xDeadBeef  like ef be ad de\n </p>\n <p>\n  lea MySecretPlace, [401000]  MySecretPlace will be 0x401000\n  \n\n  Mov MySecretPlace, [401000]  MySecretPlace will be  DeadBeef\n </p>\n <p>\n  mov MySecretPlace, byte ptr [401000] MySecretPlace will be 0xef 0r 0xef depending on EndianNess\n </p>\n <p>\n  mov MySecretPlace, word ptr [401000] MySecretPlace will be 0xdead 0r 0xadde depending on EndianNess\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Rwb62.gif\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Rwb62.gif\"/>\n  </a>\n </p>\n <p>\n  find below a  small demo\n  \n\n  source\n </p>\n <pre><code>:\\>cat lea.cpp\n#include <stdio.h>\nint main (void) {\n    unsigned int secret = 0xdeadbeef;\n    printf(\"DWORD PTR ds:[%p] == %x\n\" , &secret,*(unsigned int   *)&secret);\n    printf(\"WORD  PTR ds:[%p] == %x\n\" , &secret,*(unsigned short *)&secret);\n    printf(\"BYTE  PTR ds:[%p] == %x\n\" , &secret,*(unsigned char  *)&secret);\n        return 0;\n}\n</code></pre>\n <p>\n  compiled and linked with\n </p>\n <pre><code>:\\>bld.bat lea\n\n:\\>cl /Zi /W4 /O1 /analyze /EHsc /nologo  lea.cpp /link /release\nlea.cpp\n</code></pre>\n <p>\n  executed\n </p>\n <pre><code>:\\>lea.exe\nDWORD PTR ds:[0030F7DC] == deadbeef\nWORD  PTR ds:[0030F7DC] == beef\nBYTE  PTR ds:[0030F7DC] == ef\n</code></pre>\n <p>\n  disassembled\n </p>\n <pre><code>:\\>cdb -c \"uf lea!main;q\" lea.exe \n0:000> cdb: Reading initial command 'uf lea!main;q'\nlea!main:\n00fe1029 55              push    ebp\n00fe102a 8bec            mov     ebp,esp\n00fe102c 51              push    ecx\n00fe102d b8efbeadde      mov     eax,0DEADBEEFh\n00fe1032 50              push    eax\n00fe1033 8945fc          mov     dword ptr [ebp-4],eax\n00fe1036 8d45fc          lea     eax,[ebp-4]\n00fe1039 50              push    eax\n00fe103a 6890010201      push    offset lea!`string' (01020190)\n00fe103f e82d000000      call    lea!printf (00fe1071)\n00fe1044 0fb745fc        movzx   eax,word ptr [ebp-4]\n00fe1048 50              push    eax\n00fe1049 8d45fc          lea     eax,[ebp-4]\n00fe104c 50              push    eax\n00fe104d 68ac010201      push    offset lea!`string' (010201ac)\n00fe1052 e81a000000      call    lea!printf (00fe1071)\n00fe1057 0fb645fc        movzx   eax,byte ptr [ebp-4]\n00fe105b 50              push    eax\n00fe105c 8d45fc          lea     eax,[ebp-4]\n00fe105f 50              push    eax\n00fe1060 68c8010201      push    offset lea!`string' (010201c8)\n00fe1065 e807000000      call    lea!printf (00fe1071)\n00fe106a 83c424          add     esp,24h\n00fe106d 33c0            xor     eax,eax\n00fe106f c9              leave\n00fe1070 c3              ret\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "8",
            "user": "blabb",
            "time": "Feb 19, 2020 at 12:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is basic. Assume that rpb has a value of 55h (Assembler syntax). then\n  <code>\n   lea rax, [rbp-50h]\n  </code>\n  would result in 5.\n </p>\n <p>\n  On the other hand,\n  <code>\n   mov rax, [rbp-50h]\n  </code>\n  would most probable crash your application, as it would try to read the content of the address 5 and put it into rax.\n </p>\n <p>\n  Thus, the difference is that the first is direct, the second indirect.\nBTW, you can easily try it out yourself!\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "josh",
            "time": "Feb 18, 2020 at 21:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3732445",
                    "text": "<span class=\"comment-copy\">thanks, but what would \"dword ptr\" do? Can we just ignore it? I was under the impression that the <code>dword ptr [rbp-0x50]</code> would only return the address as a value, not the actual data on it</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">The prefix dword ptr usually means that your source operand in the brackets is a pointer to a doubleword, i.e. 32 bits. Your suggested code seems to be invalid, as on the left side you have a 64-Bit register, and on the right side a 32-bit value. The assembler (VS2019) complains \"Instructions operands must be the same size\". Thus, either you write mov rax, [rbp-50h] to transfer 64-Bit values, or mov eax, dword ptr [rbp-50h].for 32-bit transfer. eax is the low 32 bit of rax.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Warning: Illegal instruction used for explanation.\n  </strong>\n  \n\n  If you are wondering if\n  <code>\n   mov\n  </code>\n  can do the work of\n  <code>\n   lea\n  </code>\n  ,\n  \n\n  <code>\n   mov eax, esp+4\n  </code>\n  and\n  <code>\n   lea eax, [esp+4]\n  </code>\n  copies the same value to\n  <code>\n   eax\n  </code>\n  .\n  \n\n  However,\n  <code>\n   mov eax, esp+4\n  </code>\n  is not a legal instruction! (\n  <code>\n   esp+4\n  </code>\n  is not a legal addressing mode.)\n  \n\n   But then, can you replace\n   <code>\n    lea eax, [esp+4]\n   </code>\n   with the following?\n  </br>\n </p>\n <pre><code>mov eax, esp\nadd eax, 4\n</code></pre>\n <p>\n  Not really! The value of\n  <code>\n   eax\n  </code>\n  after executing the above instructions will match\n  <code>\n   lea eax, [esp+4]\n  </code>\n  . But they are still not the same! this is because\n  <code>\n   add\n  </code>\n  instruction may modify flags while\n  <code>\n   lea\n  </code>\n  does not.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jithin Pavithran",
            "time": "Jan 26, 2021 at 22:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The difference is that\n  <code>\n   lea\n  </code>\n  only calculates the address while\n  <code>\n   mov\n  </code>\n  actually moves the data. If you know C or C++, itâ€™s somewhat similar to:\n </p>\n <ol>\n  <li>\n   Lea:\n   <code>\n    rax = rbp + 0x50;\n   </code>\n  </li>\n  <li>\n   Mov:\n   <code>\n    rax = rbp[0x50];\n   </code>\n  </li>\n </ol>\n <p>\n  (Not equivalent to assembly because of different way of counting)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Feb 18, 2020 at 21:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}