{
    "title": "Find out how an Android app controls my AV Receiver",
    "link": "https://reverseengineering.stackexchange.com/questions/8865/find-out-how-an-android-app-controls-my-av-receiver",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an Onkyo Audio Receiver (AR), and there is an Android app that I can use to control it, change the volume, the channel etc. As a little project at home, I'm working on an app that can control certain functions on my computer.\n </p>\n <p>\n  I'd like to add the same functionality with my receiver into my app, purely as a technical challenge to myself. I know what IP the AR is assigned to (192.168.0.2), but I don't know how the app controls it.\n </p>\n <p>\n  Are there any beginning tips on what I can do to figure out how this app works?\n </p>\n <p>\n  The receiver model is TX-NR515, and the app is called OnkyoRemote.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "136",
    "tags": [
        "android",
        "networking"
    ],
    "user": "TMH",
    "time": "May 10, 2015 at 22:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would start by tracing all the traffic coming in and out of your application. A good summary of ways to do that are well documented in\n  <a href=\"https://stackoverflow.com/questions/9555403/capturing-mobile-phone-traffic-on-wireshark\">\n   this\n  </a>\n  stack overflow answer ().\n </p>\n <p>\n  Once you capture the traffic, examine it, what type of protocol does it use? Chances are, it's something wireshark will recognize, like http.\n </p>\n <p>\n  The next step I'd try is to examine what traffic is generated per each component in your app, for example, start the capture, press only the up command, than examine the traffic to identify the exact command on the wire\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "TMH",
                    "text": "<span class=\"comment-copy\">Thanks for that link, I'll give a few of those suggestions a go. I've also managed to decompile the apk file, so hopefully with capturing traffic, and the source I should be able to figure this out.</span>",
                    "time": null
                },
                {
                    "user": "Ishay Peled",
                    "text": "<span class=\"comment-copy\">It will be interesting to hear what you dig out and how you did it. Every reverse engineer has a quirk on how to examine things and it will benefit further readers to learn about a different approach. Anyhow, good luck!</span>",
                    "time": null
                },
                {
                    "user": "TMH",
                    "text": "<span class=\"comment-copy\">Well if I manage to get any headway with this I'll update here to show what method I ended up using.</span>",
                    "time": null
                },
                {
                    "user": "Coldblackice",
                    "text": "<span class=\"comment-copy\">Very interested in this, as well! Please post any developments or progress.</span>",
                    "time": null
                },
                {
                    "user": "Ishay Peled",
                    "text": "<span class=\"comment-copy\">I had to do some digging myself as this was interesting. I did not trace the traffic, but after decompiling the apk, it is obvious the whole thing relies on upnp. If you have a working setup, try capturing the upnp data that is transmitted from the device using the approach from my answer (I can only test the outgoing requests as I use a Denon receiver (;)</span>",
                    "time": null
                }
            ]
        }
    ]
}