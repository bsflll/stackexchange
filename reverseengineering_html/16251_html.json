{
    "title": "IDA: Two calls of a same function",
    "link": "https://reverseengineering.stackexchange.com/questions/16251/ida-two-calls-of-a-same-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reversing some executable and came across to this code:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/jLOeM.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/jLOeM.png\"/>\n  </a>\n </p>\n <p>\n  As I found out later, it's using function pointer to call function\n  <code>\n   sub_4011C0\n  </code>\n  and that could be the reason.\n </p>\n <p>\n  My question is why does dissambler show this kind of output? why doesn't it recognize the function pointer and call the function twice? thanks.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "222",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "c++",
        "c"
    ],
    "user": "Ojs",
    "time": "Sep 3, 2017 at 8:42",
    "comments": [
        {
            "user": "conio",
            "text": "<html><body><span class=\"comment-copy\">\n I don't understand the question. What's the problem?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Pittino",
            "text": "<html><body><span class=\"comment-copy\">\n What makes you think the output is wrong?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "<html><body><span class=\"comment-copy\">\n why is it calling two times? when the reference shows only one call?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Pittino",
            "text": "<html><body><span class=\"comment-copy\">\n Sorry I can't follow you. What do you mean by\n <code>\n  the reference\n </code>\n ? The application stores the address of the function in\n <code>\n  [ebp+var_4]\n </code>\n and then calls whatever is at\n <code>\n  [ebp+var_4]\n </code>\n 2 times. In this case it's the function it moved there. The original code could have been something like that:\n <a href=\"https://pastebin.com/0S83zEhp\" rel=\"nofollow noreferrer\">\n  pastebin.com/0S83zEhp\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "<html><body><span class=\"comment-copy\">\n Thats the point, in original source code there is only one call to the function, even if you look at the picture above\n <code>\n  sub_4011C0\n </code>\n function has only one reference. In reference I mean IDA only recognizes one call to the function which is from\n <code>\n  DATA XREF: sub_4011D0+5o\n </code>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In assembly there is\n  <em>\n   only one\n  </em>\n  explicit reference to the target function, and that's where its address is moved to the variable at point 1 (you can see that the reference is marked\n  <strong>\n   'o'\n  </strong>\n  (offset) and not\n  <strong>\n   'p'\n  </strong>\n  ([procedure] call)). While IDA could in theory track stack var assignments and add xrefs also at the points the variable is used for an indirect call (2 and 3), this:\n </p>\n <ol>\n  <li>\n   would increase analysis time for negligible benefit (an experienced user can easily see that\n   <code>\n    var_4\n   </code>\n   is called twice)\n  </li>\n  <li>\n   is prone to false positives (e.g. if there's a function call before initialization and use of the variable, you can't be sure that it's not overwritten by the side-effects of the function)\n  </li>\n  <li>\n   is easily defeatable (e.g. do some simple math on the pointer and IDA will be fooled).\n  </li>\n </ol>\n <p>\n  So it's better to add only explicit cross-references and let the human decide if extra ones need to be added manually.\n </p>\n <p>\n  That said, IDA does some limited amount of register tracking to handle the most common situations, e.g.:\n </p>\n <pre><code>mov     esi, ds:__imp__sprintf\npush    edi\nlea     edx, [esp+0BCh+szOffset]\npush    offset Format   ; \"%08X\"\npush    edx             ; Dest\ncall    esi ; __imp__sprintf\n</code></pre>\n <p>\n  You can see that it added a comment at the\n  <code>\n   call esi\n  </code>\n  instruction with the actual destination loaded earlier into\n  <code>\n   esi\n  </code>\n  . (it also adds a call xref in such case).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 3, 2017 at 17:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}