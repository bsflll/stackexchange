{
    "title": "How to declare a constructor in reversed class?",
    "link": "https://reverseengineering.stackexchange.com/questions/29541/how-to-declare-a-constructor-in-reversed-class",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wonder how to declare the reference to a constructor to a reversed class, i.e. I have a class say Game and it has a constructor at a certain address.\n </p>\n <p>\n  It is declared like this:\n </p>\n <p>\n  <strong>\n   game.h\n  </strong>\n </p>\n <pre><code>namespace gladius {\n    struct Game {\n        //virtual int __thiscall main(gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n\n        using GameConstructor = Game * (__fastcall*) (Game* thisptr);\n        GameConstructor gameConstructor;\n\n..........\n\n}\n</code></pre>\n <p>\n  <strong>\n   game.cpp\n  </strong>\n </p>\n <pre><code>namespace gladius {\n    static std::array<Game, 1> functions = { {\n                Game{\n\n            (Game::GameConstructor)(AddressHelper::getInstance().GetBaseAddress() + 0x331b0 / (2 * sizeof(DWORD))),\n</code></pre>\n <p>\n  Now let's imagine I want an instance of the Game object. How do I get one as something like this\n </p>\n <pre><code>Game gameObj = gameConstructor; \n</code></pre>\n <p>\n  is not going to work as gameObj and gameConstructor have different type. Without reversing the constructor is there any way to call it (by address) and assign the reversed class instance to it?\n </p>\n <p>\n  And\n </p>\n <pre><code> namespace gladius {\n        struct Game {\n              using Game = Game * (__fastcall*) (Game* thisptr);\n              Game gameConstructor;\n</code></pre>\n <p>\n  doesn't work as a declaration as you can't  declare type the same as the type of the class / structure and I don't know how to modify the above to keep it as a reference to the addressed method rather than a fully reversed function.\n </p>\n <p>\n  Basically the question is, how to do\n </p>\n <pre><code>Game objInst = new Game();\n</code></pre>\n <p>\n  where\n  <code>\n   new Game();\n  </code>\n  points to existing Game constructor (accessible by address offset)?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "370",
    "tags": [
        "c++",
        "dll",
        "function-hooking",
        "dll-injection",
        "api-reversing"
    ],
    "user": "Irbis77",
    "time": "Nov 13, 2021 at 15:08",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n You've been asking similar questions for a while, and all of them are very confusing and don't demonstrate much in the way of understanding how C++ gets compiled into assembly language. Why don't you put this project down for now, get some C++ source code off the Internet, compile it, and inspect the binaries that result? You'll be able to see exactly what the source code for a constructor looks like, and what it looks like in a binary.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<html><body><span class=\"comment-copy\">\n I suppose there are several points here from my point of view:   a) You are right, I should learn more on how C++ works in general and in reversing in particular. On the course of this project I've learned by long short more about it though than was able to with just studying b) There is little to almost non-existent info on the subject. People who do presentations on class reversing often do it either on \"Hello World\" or are reversing the classes completely, which is impractical in this case\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<html><body><span class=\"comment-copy\">\n c) I learn better by asking questions. Sometimes simple case of asking question triggers my thought process better than sitting and looking at code or / and reading documentation. Also, this platform is not particularly developed. So, asking questions helps it (I hope).  d) I don't have a particular motivation on learning c++ except for completing the project I am doing. As I said, I understand your point, but learning how C++ looks say in assembly might lead to the same problems as I am currently facing, i.e. luck of info on the subject and lack of general community support.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Do you learn better from asking, or from the answers? I could give advice, but it wouldn't be appropriate as an \"answer\", as the first line would say \"stop doing what you are doing\". I've written hundreds of thousands of lines of C++, and have never written anything similar to your snippets. Classes, member/virtual functions, constructors, etc. are less complicated as your questions indicate. I'd advise you to learn more about C++, or ask more generic questions, as there's no point in answering questions about an approach that will never work, and is unrelated to how anybody writes C++.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Anyway, you may want to read this:\n <a href=\"https://reverseengineering.stackexchange.com/questions/26006/how-to-use-class-member-function-defined-in-a-exe-within-a-dll/26025\" title=\"how to use class member function defined in a exe within a dll\">\n  reverseengineering.stackexchange.com/questions/26006/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A cleaner and safer(no mem leaks) solution to this problem would be:\n </p>\n <pre class=\"lang-cpp prettyprint-override\"><code>struct Game {\n    // Define fields so that the size matches the original struct size\n    \n    using ConstructorT = Game*(__fastcall)(Game* thisptr);\n    static ConstructorT* Constructor = 0x1405A0F8;\n\n    static Game Create() {\n        Game Game{};\n        Constructor(&Game);\n        return Game;\n    }\n}\n\nint main() {\n    Game Game = Game::Create();\n}\n</code></pre>\n <p>\n  The difference between this solution and the one presented is that this one doesn't require you to manage memory by yourself and doesn't have any memory leaks.\n </p>\n <pre><code>        gladius::GameStruct* thisptr = (gladius::GameStruct*)malloc(sizeof(gladius::GameStruct));\n        gladius::get().gameConstructor(thisptr);\n</code></pre>\n <p>\n  If something here throws, you have a memory leak and you need to make sure you clean this memory. In my solution if something later throws, it will be automatically cleaned by the compiler once the scope ends, which is at the end of the function in this example. Also instead of returning an object, you can create and return unique or shared pointer and then do whatever you want with it, which is going to also be nice and safe:\n </p>\n <pre><code>    static std::shared_ptr<Game> Create() {\n        std::shared_ptr<Game> Game = std::make_shared<Game>();\n        Constructor(Game.get());\n        return Game;\n    }\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "KulaGGin",
            "time": "Apr 2, 2024 at 15:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Irbis77",
                    "text": "<span class=\"comment-copy\">Thank you for sharing. It looks certainly better.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is the solution:\n </p>\n <p>\n  The constructor can be called like this:\n </p>\n <pre><code>    gladius::GameStruct* thisptr = (gladius::GameStruct*)malloc(sizeof(gladius::GameStruct));\n    gladius::get().gameConstructor(thisptr);\n</code></pre>\n <p>\n  where sizeof(GameStruct)\n  <strong>\n   must match\n  </strong>\n  the size of the original constructor. In my case the Game structure should be re-written to have something like:\n </p>\n <pre><code>struct GameStruct : Game{\n        \n        DWORD_PTR* unknownPtrA = 0;\n\n        DWORD_PTR* unknownPtrB = 0;\n\n        DWORD_PTR* unknownPtrC = 0;\n\n        DWORD_PTR* unknownPtrD = 0;\n\n        DWORD_PTR* guiObjPtr = 0;\n\n        DWORD_PTR* unknownPtrE = 0;\n\n        DWORD_PTR* unknownPtrF = 0;\n\n        DWORD_PTR* unknownPtrG = 0;\n\n        DWORD_PTR* unknownPtrH = 0;\n\n        DWORD_PTR* unknownPtrI = 0;\n\n        DWORD_PTR* unknownPtrJ = 0;\n\n    };\n</code></pre>\n <p>\n  to bring the pointers in constructor outside of the Game struct. This way it matches the original constructor in what it does and in size (i.e. 11 members 8 bytes each = 88 bytes of size)\n </p>\n <p>\n  Or / and the pointers to the functions should be placed inside the standard C++ functions and be called from there as that way they won't occupy the additional memory space which needs to be allocated.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Irbis77",
            "time": "Nov 14, 2021 at 12:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}