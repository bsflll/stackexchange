{
    "title": "Bresser Water Leakage sensor checksum algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/32152/bresser-water-leakage-sensor-checksum-algorithm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to decode the Bresser Water Leakage sensor, the current state of work can be found in\n  <a href=\"https://github.com/matthias-bs/rtl_433/blob/master/src/devices/bresser_leakage.c\" rel=\"nofollow noreferrer\">\n   https://github.com/matthias-bs/rtl_433/blob/master/src/devices/bresser_leakage.c\n  </a>\n </p>\n <p>\n  I have also created an\n  <a href=\"https://github.com/merbanan/rtl_433/issues/2576\" rel=\"nofollow noreferrer\">\n   issue\n  </a>\n  with some background information for integrating the decoder in the rtl_433 project.\n </p>\n <p>\n  Decoding the payload works fine, but I did not find out how the checksum is calculated. The data layout and samples are provided in\n  <a href=\"https://github.com/matthias-bs/rtl_433/blob/master/src/devices/bresser_leakage.c\" rel=\"nofollow noreferrer\">\n   bresser_leakage.c\n  </a>\n  .\n </p>\n <p>\n  I have already tried the following:\n </p>\n <ol>\n  <li>\n   Digest calculations used in\n   <a href=\"https://github.com/merbanan/rtl_433\" rel=\"nofollow noreferrer\">\n    rtl_433\n   </a>\n   decoders for other Bresser sensors\n  </li>\n </ol>\n <ul>\n  <li>\n   with varying payload lengths)\n  </li>\n  <li>\n   with iterating the key in the range 0...0xFFFF\n  </li>\n </ul>\n <ol start=\"4\">\n  <li>\n   <p>\n    <a href=\"https://github.com/triq-org/revdgst\" rel=\"nofollow noreferrer\">\n     revdgst\n    </a>\n    (with varying payload lengths)\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://sourceforge.net/projects/reveng/\" rel=\"nofollow noreferrer\">\n     reveng\n    </a>\n    (with varying payload lengths) - no meaningful result at all\n   </p>\n  </li>\n  <li>\n   <p>\n    CRC calculators on\n    <a href=\"https://crccalc.com/\" rel=\"nofollow noreferrer\">\n     https://crccalc.com/\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    Simple checksum algorithms like ADD, XOR, SUB\n   </p>\n  </li>\n </ol>\n <ul>\n  <li>\n   on bytes\n  </li>\n  <li>\n   on nibbles\n  </li>\n  <li>\n   on 16-bit chunks\n  </li>\n </ul>\n <ol start=\"8\">\n  <li>\n   Parity\n  </li>\n </ol>\n <ul>\n  <li>\n   bits set - byte wise/nibble wise, first/second half of message, ...\n  </li>\n </ul>\n <p>\n  None of these attempts were successful.\n </p>\n <p>\n  I would be happy if anyone could help.\n </p>\n <p>\n  Thank you very much in advance!\n </p>\n <p>\n  Matthias\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "51",
    "tags": [
        "crc",
        "checksum"
    ],
    "user": "Matthias",
    "time": "Aug 9, 2023 at 19:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The checksum has been found!\nIt's a CRC16/xmodem covering the 5 bytes following the CRC.\n </p>\n <p>\n  See\n  <a href=\"https://github.com/merbanan/rtl_433/issues/2576#issuecomment-1751134478\" rel=\"nofollow noreferrer\">\n   https://github.com/merbanan/rtl_433/issues/2576#issuecomment-1751134478\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Matthias",
            "time": "Oct 27, 2023 at 12:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}