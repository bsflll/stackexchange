{
    "title": "How to find the first function that sets the value currently stored in a given register?",
    "link": "https://reverseengineering.stackexchange.com/questions/30403/how-to-find-the-first-function-that-sets-the-value-currently-stored-in-a-given-r",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm interested in a general approach to the following problem:\n  \n\n  The function\n  <strong>\n   F_Init\n  </strong>\n  allocates a byte buffer called\n  <strong>\n   Buffer\n  </strong>\n  with a size called\n  <strong>\n   BufSize\n  </strong>\n  . The\n  <strong>\n   Buffer\n  </strong>\n  is allocated with each frame/iteration resulting in different values for\n  <strong>\n   Buffer\n  </strong>\n  and\n  <strong>\n   BufSize\n  </strong>\n  .\n </p>\n <p>\n  There are approximately 50 different functions that pass both values as parameters in an arbitrary order, eg. assuming this is a\n  <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170\" rel=\"nofollow noreferrer\">\n   x64 calling convention\n  </a>\n  (left to right -> rcx, rdx, r8, r9), while\n  <strong>\n   Buffer\n  </strong>\n  is stored in r8 register, sometimes other functions pass it in rdx register.\n </p>\n <p>\n  Let's say I stopped the execution of the program inside 35th function that processes the\n  <strong>\n   Buffer\n  </strong>\n  how can I quickly figure out where is\n  <strong>\n   F_Init\n  </strong>\n  function? So far I've been manually tracing back the values by looking at the\n  <strong>\n   mov\n  </strong>\n  instructions, eg. currently\n  <strong>\n   Buffer\n  </strong>\n  pointer value is in rdx, but there was a\n  <strong>\n   mov rdx, r9\n  </strong>\n  , so the buffer was previously in r9 register and so on. Doing it manually although a great fun, it takes a lot of time so I'd like to know how to automate this process.\n </p>\n <p>\n  Second question, if the allocation and manipulation happens in a one giant function, how to quickly locate the call from which those values originate? The question also applies to other data types like integers, eg. some function calculated the number of files in a directory and returning 5.\nAt some point in a different place in the code I see the value 5 in register r8 and I would like to know where is the first function that created the value 5?\n </p>\n <p>\n  How to do it in x64dbg?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "185",
    "tags": [
        "x64dbg",
        "dynamic-analysis"
    ],
    "user": "01101111",
    "time": "May 27, 2022 at 13:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know if you are using window or linux but the general solution i can think of is this.\n </p>\n <p>\n  Every new allocate buffer must call through function such as VirtualAlloc or NtAllocateVirtualMemory (low level) or malloc for linux.\n </p>\n <p>\n  Hook the allocate function (for window it is VirtualAlloc, malloc for linux) and get the following info:\n </p>\n <ul>\n  <li>\n   The length of the newly allocated buffer in the argument.\n  </li>\n  <li>\n   The address of the allocate memory from the return of that function.\n  </li>\n  <li>\n   The return address of the VirtualAlloc.\n  </li>\n </ul>\n <p>\n  And store to a struct and avl tree (you can check the first 10 min of this video for how the structure look like:\n  <a href=\"https://www.youtube.com/watch?v=icJ8HV22cbc&ab_channel=BlackHat\" rel=\"nofollow noreferrer\">\n   https://www.youtube.com/watch?v=icJ8HV22cbc&ab_channel=BlackHat\n  </a>\n  ) or you can just log it.\n </p>\n <p>\n  So now you can find the f_init by searching through the log manually.\n </p>\n <p>\n  If you want to automate the process then you must build a balance tree like the video i provided above and search in it.\n </p>\n <p>\n  For you second question it is very hard and i don't think x64dbg can do it, because it require backward slicing. You should ask a new question for that but the answer may not deal with x64dbg.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "KishouYusa",
            "time": "May 15, 2022 at 10:42",
            "is_accepted": true,
            "comments": []
        }
    ]
}