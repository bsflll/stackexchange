{
    "title": "Division on ARM [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/8994/division-on-arm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has answers here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/1397/how-can-i-reverse-optimized-integer-division-modulo-by-constant-operations\">\n      How can I reverse optimized integer division/modulo by constant operations?\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (3 answers)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2018-08-25 21:27:13Z\">\n      6 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  When performing division on ARM, this is the code snippet that I encountered.\n </p>\n <pre><code>   0x83d8 <main+12>:    mov r3, #10\n   0x83dc <main+16>:    str r3, [r11, #-8]\n   0x83e0 <main+20>:    ldr r3, [r11, #-8]\n=> 0x83e4 <main+24>:    ldr r2, [pc, #40]   ;; 0x8414 <main+72>\n   0x83e8 <main+28>:    smull   r1, r2, r2, r3\n   0x83ec <main+32>:    asr r3, r3, #31\n   0x83f0 <main+36>:    rsb r3, r3, r2\n   0x83f4 <main+40>:    str r3, [r11, #-8]\n</code></pre>\n <p>\n  In the original program, I store the value\n  <code>\n   10\n  </code>\n  to a variable, divide it by\n  <code>\n   3\n  </code>\n  and store it in the same variable.\n </p>\n <p>\n  <code>\n   [r11, #-8]\n  </code>\n  in the above example has the value\n  <code>\n   0xa\n  </code>\n  . After\n  <code>\n   0x83e4\n  </code>\n  , r2 is loaded up as\n  <code>\n   0x55555556\n  </code>\n  . My doubts are as follows :-\n </p>\n <ol>\n  <li>\n   Is this a common way of performing division without the\n   <code>\n    div\n   </code>\n   instruction?\n  </li>\n  <li>\n   What are the other ways you have encountered in which division is performed without using an instruction that performs division?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "arm"
    ],
    "user": null,
    "time": "6 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Optimizing compilers will typically use the method above for compiling division by a constant.\n </p>\n <p>\n  You can read more about it at the following links:\n </p>\n <ul>\n  <li>\n   <a href=\"https://web.archive.org/web/20160114090130/http://blogs.msdn.com/b/devdev/archive/2005/12/12/502980.aspx\" rel=\"nofollow noreferrer\">\n    Integer division by constants\n   </a>\n  </li>\n  <li>\n   <a href=\"https://reverseengineering.stackexchange.com/questions/1397/how-can-i-reverse-optimized-integer-division-modulo-by-constant-operations\">\n    How can I reverse optimized integer division/modulo by constant operations?\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.nynaeve.net/?p=115\" rel=\"nofollow noreferrer\">\n    Compiler tricks in x86 assembly\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Glorfindel",
            "time": "Apr 7, 2021 at 19:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}