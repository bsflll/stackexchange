{
    "title": "How to decompile a C# .exe on macOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/15351/how-to-decompile-a-c-exe-on-macos",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It this even possible? Are there any free tools?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 4,
    "views": "20k",
    "tags": [
        "decompilation",
        "c#"
    ],
    "user": "ttt",
    "time": "May 15, 2017 at 15:26",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try those\n <a href=\"https://github.com/aerror2/ILSpy-For-MacOSX\" rel=\"nofollow noreferrer\">\n  github.com/aerror2/ILSpy-For-MacOSX\n </a>\n or\n <a href=\"http://tirania.org/blog/archive/2011/Feb-04.html\" rel=\"nofollow noreferrer\">\n  tirania.org/blog/archive/2011/Feb-04.html\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ttt",
            "text": "<html><body><span class=\"comment-copy\">\n I did, but after i build the project and run the .exe with mono, i get an error. I get this:\n <code>\n  Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object\n </code>\n . I may debug the project in the future to find the issue if no easier solution will arise till then. :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n It depends on the complexity of the original executable, but in general debugger is the way to solve the problem.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Visual Studio for Mac can do the job. Just hit\n  <code>\n   File / Open\n  </code>\n  and then choose the\n  <code>\n   executable or library\n  </code>\n  you want. It'll open the\n  <code>\n   Assembly Browser\n  </code>\n  window.\n </p>\n <p>\n  If you need more detailed code change the\n  <code>\n   Visibility\n  </code>\n  to\n  <code>\n   All members\n  </code>\n  and the Language to\n  <code>\n   C#\n  </code>\n  .\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SmAUj.png\" rel=\"noreferrer\">\n   <img alt=\"Visibility\" src=\"https://i.sstatic.net/SmAUj.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ZpT6F.png\" rel=\"noreferrer\">\n   <img alt=\"Language\" src=\"https://i.sstatic.net/ZpT6F.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/QL7FI.png\" rel=\"noreferrer\">\n   <img alt=\"decompiled\" src=\"https://i.sstatic.net/QL7FI.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "gandarez",
            "time": "Feb 14, 2019 at 22:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">but this way doesn't give you the code. Only the signatures of the methods.</span>",
                    "time": null
                },
                {
                    "user": "gandarez",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik yes you can do, just take a look at my updated post.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Yup. My mistake.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Best free tool for the job is ILSpy, but it runs on Windows. This gives you a limited list of options:\n </p>\n <ol>\n  <li>\n   <p>\n    create a windows virtual machine (with virtualbox or vmware player) and run it in there\n   </p>\n  </li>\n  <li>\n   <p>\n    install WINE on mac, to allow you run .exe files.\n   </p>\n  </li>\n  <li>\n   <p>\n    get visual studio for mac and use ikdasm\n   </p>\n  </li>\n  <li>\n   <p>\n    if you feel hardcore, open it in a disassembler ;)\n   </p>\n  </li>\n </ol>\n <p>\n  Being an IT guy myself, I would go for the first solution. Check them all out briefly and go for one!\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Chris Tsiakoulas",
            "time": "May 21, 2017 at 8:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">for point 3, there's no tool called ildasm. The tools that are included VS for Mac are called ikdasm or monodis</span>",
                    "time": null
                },
                {
                    "user": "Chris Tsiakoulas",
                    "text": "<span class=\"comment-copy\">Thnks for the notice! I corected it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can use Jetbrains' Rider. It has a 30 day free trial period.\n </p>\n <ol>\n  <li>\n   Open Rider and open or create a C# project\n  </li>\n  <li>\n   Add a dependency to the .exe file (naturally, this also works for .dll).\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/d1vwd.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/d1vwd.png\"/>\n  </a>\n </p>\n <ol start=\"3\">\n  <li>\n   In a class in your project, import the package and type the class you want to inspect.\n  </li>\n </ol>\n <p>\n  <a href=\"https://i.sstatic.net/2lA0A.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/2lA0A.png\"/>\n  </a>\n </p>\n <ol start=\"4\">\n  <li>\n   Do Command+click or Command+B on the class name to trigger Rider's decompile option. Confirm if necessary.\n  </li>\n </ol>\n <p>\n  The disadvantage is that we have to repeat step 4 for each class we want to decompile.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "jbarrameda",
            "time": "Mar 15, 2018 at 12:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">it looks like you were too fast. Point 4 is incomplete and 5 is missing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Is this even possible?\n  </p>\n </blockquote>\n <p>\n  Generally yes, with a couple of exceptions:\n </p>\n <ul>\n  <li>\n   Starting with .NET Core and now .NET the\n   <code>\n    .exe\n   </code>\n   files produced by the compilation of applications are not CLR assemblies but native assemblies. CLR assemblies contain\n   <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">\n    IL\n   </a>\n   and are decompilable to C# while native assemblies contain machine code and cannot be decompiled to C#.\n  </li>\n </ul>\n <p>\n  <em>\n   Hint: in that scenario one should decompile the\n   <code>\n    .dll\n   </code>\n   with the same name. That's the file that contains the compiled C# code.\n  </em>\n </p>\n <ul>\n  <li>\n   <a href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\" rel=\"nofollow noreferrer\">\n    Ahead-of-Time\n   </a>\n   compiled\n   <code>\n    .exe\n   </code>\n   files are also not CLR assemblies and cannot be decompiled to C#\n  </li>\n </ul>\n <blockquote>\n  <p>\n   Are there any free tools?\n  </p>\n </blockquote>\n <p>\n  Yes, there are. One such tool is\n  <a href=\"https://decompiler.codemerx.com\" rel=\"nofollow noreferrer\">\n   CodemerxDecompile\n  </a>\n  - the spiritual successor of the popular JustDecompile. While JustDecompile is Windows only, CodemerxDecompile is a multi-platform decompiler that runs on Windows, Linux and MacOS.\n </p>\n <p>\n  <em>\n   Disclosure: I'm part of the team behind CodemerxDecompile.\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Alexander Dimitrov",
            "time": "Mar 22, 2024 at 14:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}