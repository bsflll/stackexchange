{
    "title": "Tools for statistical analysis of binary streams",
    "link": "https://reverseengineering.stackexchange.com/questions/23036/tools-for-statistical-analysis-of-binary-streams",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm in the process of decoding the semantics of an unknown binary stream\n  <sup>\n   1\n  </sup>\n  . I've come to a point where I understand the overall structure: A\n  <code>\n   tag\n  </code>\n  byte, followed by a size field, and a blob of bytes of that size, e.g.\n  <code>\n   80 02 42 0a\n  </code>\n  (type: 0x80, size: 2 bytes, data: 66, 10).\n </p>\n <p>\n  To help me drill deeper I'm looking for a tool that allows me to extract the individual chunks of data, run queries against those, and arbitrarily transform the results. I'm looking for simple queries (like\n  <em>\n   \"all packets with a specific tag\"\n  </em>\n  ), but also need more complex filters (e.g.\n  <em>\n   \"distribution of all size values for packets with a specific tag\"\n  </em>\n  ).\n </p>\n <p>\n  Are there any tools that allow me to easily perform those queries, given the following requirement?\n </p>\n <ul>\n  <li>\n   Needs to understand the overall stream structure.\n  </li>\n  <li>\n   Needs to have basic decoding capabilities (e.g. to extract base128-encoded\n   <code>\n    varint\n   </code>\n   s as used by\n   <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\" rel=\"nofollow noreferrer\">\n    Protocol Buffers\n   </a>\n   ).\n  </li>\n  <li>\n   Needs customizable filters (e.g. by tag, size, or data).\n  </li>\n  <li>\n   [Optional] Ability to control display of data, like 64-bit\n   <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime\" rel=\"nofollow noreferrer\">\n    FILETIME\n   </a>\n   values.\n  </li>\n  <li>\n   [Optional] Ability to render graphs.\n  </li>\n  <li>\n   Needs to run on Windows (preferably free).\n  </li>\n </ul>\n <hr/>\n <p>\n  <sup>\n   1\n  </sup>\n  <em>\n   The data is streamed off of an embedded device. I have access to fully self-contained chunks of that data as binary files.\n  </em>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "229",
    "tags": [
        "binary-analysis",
        "tools"
    ],
    "user": "IInspectable",
    "time": "Jan 17, 2020 at 20:58",
    "comments": [
        {
            "user": "Dvd848",
            "text": "<html><body><span class=\"comment-copy\">\n You might be able to use WireShark if you write a custom dissector. Kaitai Struct might be helpful as well. Here's a basic script that allows converting from a Kaitai Struct to a Wireshark LUA dissector:\n <a href=\"https://github.com/joushx/kaitai-to-wireshark\" rel=\"nofollow noreferrer\">\n  github.com/joushx/kaitai-to-wireshark\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "IInspectable",
            "text": "<html><body><span class=\"comment-copy\">\n @dvd:\n <i>\n  \"Stream\"\n </i>\n was possibly a misleading term. I do have fully self-contained chunks of the stream available as files, so I'm not looking to analyze network traffic. I also played with Kaitai Struct today. It's a great tool, but it will only become useful to me, once I know the meaning of the data. I'm not there yet. Right now I'm looking at\n <code>\n  tag\n </code>\n <code>\n  size\n </code>\n <code>\n  <blob of data>\n </code>\n . I don't understand\n <code>\n  <blob of data>\n </code>\n yet, and I need help with that. To get there, I need to test hypotheses, by collecting statistical data.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "<html><body><span class=\"comment-copy\">\n WireShark isn't limited to network traffic, it can dissect any data given the correct dissector (try using it to open a PNG file for example). However, if all else fails and you can't find a better tool or strategy, it might be useful to think of your data as a network stream nonetheless. Write a simple script to combine all of the different binary files to a pcap file, where the data of each packet is the contents of a single binary file. Then, create a basic dissector that is able to dissect \"tag, size, blob\". You can then use WireShark's/tshark's filtering capabilities for analysis/stats.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "IInspectable",
            "text": "<html><body><span class=\"comment-copy\">\n @dvd: I got it eventually to work, writing a tool to convert the binary stream into a pcap file, and jotting up a Lua dissector. While helpful in finding patterns I wasn't even looking for, Wireshark ultimately turned out not to be suitable for the task. It really is meant for communication protocols, and that's really where it shines. I went on to write up a custom tool that does what I need. The advice was still helpful.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "<html><body><span class=\"comment-copy\">\n Impressive! Glad to hear you were able to solve your problem.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}