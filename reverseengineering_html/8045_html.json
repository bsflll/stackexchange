{
    "title": "Can't seem to figure out what this binary is",
    "link": "https://reverseengineering.stackexchange.com/questions/8045/cant-seem-to-figure-out-what-this-binary-is",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've downloaded the firmware for my router and ran binwalk on it:\n </p>\n <p>\n  root@max-VirtualBox:~/src/wrt54g-4.21.5# binwalk firmware.bin\n </p>\n <pre><code>DECIMAL     HEX         DESCRIPTION\n-------------------------------------------------------------------------------------------------------\n32          0x20        TRX firmware header, little endian, header size: 28 bytes,  image size: 3362816 bytes, CRC32: 0xE3ABE901 flags/version: 0x10000\n60          0x3C        gzip compressed data, was \"piggy\", from Unix, last modified: Tue Feb  7 21:40:02 2012, max compression\n700660      0xAB0F4     Squashfs filesystem, little endian, version 2.0, size: 2654572 bytes,  502 inodes, blocksize: 65536 bytes, created: Tue Feb  7 21:43:28 2012 \n</code></pre>\n <p>\n  So it looks like we have a simple header, some compressed data and a squashfs filesystem. I extracted the compressed data into a file called\n  <code>\n   piggy\n  </code>\n  .\n </p>\n <p>\n  I ran binwalk again on\n  <code>\n   piggy\n  </code>\n  and got the following:\n </p>\n <p>\n  root@max-VirtualBox:~/src/wrt54g-4.21.5/piggy# binwalk piggy\n </p>\n <pre><code>DECIMAL     HEX         DESCRIPTION\n-------------------------------------------------------------------------------------------------------\n1304240     0x13E6B0    Linux kernel version \"2.4.20 (crazy@sw1) (gcc version 3.2.3 with Broadcom modificatio 3.2.3 with Broadcom modifications) #3 Wed Feb 8 11:39:49 HKT 2ons) #3 Wed Feb 8 11:39:49 HKT 20122012\"\n1563820     0x17DCAC    LZMA compressed data, properties: 0x04, dictionary size: 16777216 bytes, uncompressed size: 117440512 bytes\n1567553     0x17EB41    LZMA compressed data, properties: 0x02, dictionary size: 2097152 bytes, uncompressed size: 524288 bytes\n1606440     0x188328    LZMA compressed data, properties: 0x01, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes\n</code></pre>\n <p>\n  So we have a Linux kernel and come LZMA compressed data. Rerunning binwalk with the\n  <code>\n   -e\n  </code>\n  flag automatically extracts the compressed sections out for me.\n </p>\n <p>\n  However, this is where I'm stuck.\n </p>\n <p>\n  Once I've got these three compressed sections, I can't uncompress them with\n  <code>\n   unlzma\n  </code>\n  ,\n  <code>\n   7zr\n  </code>\n  or anything. The\n  <code>\n   file\n  </code>\n  utility says they're still data objects too.\n </p>\n <p>\n  I'm new to this so any guidance would be appreciated. Where should I go from here?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "708",
    "tags": [
        "disassembly",
        "firmware"
    ],
    "user": "nopcorn",
    "time": "Jan 17, 2015 at 23:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The LZMA results in the Linux kernel are likely false positives. FWIW, the latest version of binwalk (from github repo) does a much better job of filtering out LZMA false positives.\n </p>\n <p>\n  Where you go from here depends on what you want to do, but for Linux based firmware most of the interesting applications and logic are in user space, so you will probably want to extract the SquashFS file system and start taking a look at the executables, scripts and configuration files there.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "devttys0",
            "time": "Jan 18, 2015 at 16:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Denys Vitali",
                    "text": "<span class=\"comment-copy\">Unsquash with <code>unsquashfs</code></span>",
                    "time": null
                }
            ]
        }
    ]
}