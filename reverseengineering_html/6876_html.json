{
    "title": "Becoming A Better Reverse Engineer",
    "link": "https://reverseengineering.stackexchange.com/questions/6876/becoming-a-better-reverse-engineer",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been looking on the net and all I see when it comes to reverse engineering are a bunch of silly crackme tutorials. I want to be better at taking code from assembly to c or c++. I am getting the feeling that I am going to have to have to pick this all in time and or make a bunch of small programs and break them apart.I would like to build on what might be already out there. I am already some what proficient in what I am doing just I want to be better.\n </p>\n <p>\n  For example:\n </p>\n <pre><code>mov     eax, DDrawPtr\npush    8\npush    1E0h\npush    280h\nmov     ecx, [eax]\npush    eax\ncall    dword ptr [ecx+54h]\n</code></pre>\n <p>\n  Hex-rays translates this as\n </p>\n <pre><code>v1 = (*(**DDrawPtr + 0x54))(*DDrawPtr, 640, 480, 8)\n</code></pre>\n <p>\n  which is ok.... It should be .\n </p>\n <pre><code>HANDLE v1 = DDrawPtr -> SetDisplayMode(640,480,8);\n</code></pre>\n <p>\n  or sometimes IDA makes mistakes and will say\n </p>\n <pre><code>int __cdecl sub_41B869()\n</code></pre>\n <p>\n  Where as this code doesn't return anything and is supposed to be a void....\n </p>\n <p>\n  I found a neat question and answer here\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2096/convert-this-x86-asm-to-c\">\n   Stackoverflow question/answer\n  </a>\n  .\nI am wanting to learn more like this because I am realizing that IDA makes mistakes. I want to know how to recognize function types and more importantly do this by hand, because I am seeing IDA make mistakes and I feel that I should learn to recognize better these mistakes and see how I can manually if need bring it back.\n </p>\n <p>\n  Here is a book that does this somewhat but it goes from C to assembly not the other way around.\n  <a href=\"http://beginners.re/RE_for_beginners-en.pdf\" rel=\"nofollow noreferrer\">\n   reverse engineering pdf\n  </a>\n </p>\n <p>\n  Any suggestions?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "c++",
        "c"
    ],
    "user": "LUser",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These suggestions may help.  One sure way of becoming a better reverse engineer is to become a better \"forward engineer\"!  Here's what I would suggest:\n </p>\n <ol>\n  <li>\n   <strong>\n    Examine the assembly output of various compilers.\n   </strong>\n   Write test programs of increasing complexity and examine the assembly language output so that you get a sense of what the compiler does for any given high level construct.\n  </li>\n  <li>\n   <strong>\n    Try running binaries through a decompiler.\n   </strong>\n   This will allow you to see how those same programs are interpreted by a tool and allow you to begin to see the kinds of errors that the tools make.\n  </li>\n  <li>\n   <strong>\n    Try completely reverse engineering a small project.\n   </strong>\n   It's not hard to find source code for all kinds of things these days.  Pick an open source project that you are\n   <em>\n    not\n   </em>\n   familiar with, compile it without peeking at the code and try to reverse engineer it entirely.  Alternatively, try reverse engineering some particular routine or aspect (which is more usual).\n  </li>\n  <li>\n   <strong>\n    Try to write code to fool the decompiler.\n   </strong>\n   Open source projects typically don't take any anti-disassembly measures but other kinds of software (e.g. malware) often does.  Learn these techniques in the forward direction and then look at the results with your reverse engineering tools.  You'll get a feel for which techniques are successful and why.\n  </li>\n </ol>\n <p>\n  Hope that helps.\n </p>\n</div>\n</body></html>",
            "votes": "15",
            "user": "Edward",
            "time": "Dec 23, 2014 at 15:22",
            "is_accepted": true,
            "comments": []
        }
    ]
}