{
    "title": "Open-Source library for Complete Binary Disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/3443/open-source-library-for-complete-binary-disassembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  One of the major hurdles of x86 disassembly is separating code from data. All available open-source disassembly library only perform a straight line disassembly (starts from the top and skips errors by 1 byte), compared with OllyDBG which apparently uses a control flow disassembly (using opcodes like CALL and JMP) or IDA using heuristics and emulation. However these two aren't open-source.\n </p>\n <p>\n  My question is, is there any open-source library or project that uses a better technique than simple straight line disassembly (control flow or heuristics based) ?\n </p>\n <p>\n  I stumbled upon a paper using a machine learning approach ? is there an open-source implementation of this approach ?\n </p>\n</div>\n</body></html>",
    "votes": "16",
    "answers": 4,
    "views": "4k",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "3asm_",
    "time": "Jan 12, 2014 at 22:56",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n I don't know of any open-source libraries for this, but if you want to write your own, see\n <a href=\"http://reverseengineering.stackexchange.com/questions/2347/what-is-the-algorithm-used-in-recursive-traversal-disassembly\" title=\"what is the algorithm used in recursive traversal disassembly\">\n  reverseengineering.stackexchange.com/questions/2347/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://radare.org/\" rel=\"noreferrer\">\n   Radare 2\n  </a>\n  is a GPL software, with a good API, and is not using linear disassembling.\n </p>\n <p>\n  See visual mode (Vp command) example:\n  <img alt=\"example r2 x86 session\" src=\"https://i.sstatic.net/B3077.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "21",
            "user": "Anton Kochkov",
            "time": "Jan 13, 2014 at 12:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "3asm_",
                    "text": "<span class=\"comment-copy\">Thanks, do you happen to have a link or documentation on the disassembly appraoch they are using ?</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">@3asm_ Pancake and the rest of the radare2 team. Has the philosophy 'writing-documention is overrated when you can read the source'. Thus, read the source ;)</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Stolas: well, that sounds similar to the big fat \"f... you\" the Git docs give <i>users</i> trying to merely make use of Git without studying ten semesters of Gitology first.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">@0xC0000022L not sure if you are insulting me or not. But it is understandable that the radare2 team does it. As they want to spend there time write code instead of creating the documentation. Also because when they finished the documentation of radare1 the took got an overhaul...   I once started with writing the documentation myself, in form of a book (like the animal books of O'Reilly) but it's just too much work.</span>",
                    "time": null
                },
                {
                    "user": "Anton Kochkov",
                    "text": "<span class=\"comment-copy\">@0xC0000022L In fact you can use internal help for radare2 commands - just type '?' and/or '&lt;command name&gt;?'</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reposting my comment which I wrote for perror's\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2347/what-is-the-algorithm-used-in-recursive-traversal-disassembly\">\n   question\n  </a>\n </p>\n <p>\n  <a href=\"http://lida.sourceforge.net\" rel=\"nofollow noreferrer\">\n   Lida\n  </a>\n  (a tool based on Bastard's\n  <a href=\"http://bastard.sourceforge.net/libdisasm.html\" rel=\"nofollow noreferrer\">\n   libdisasm\n  </a>\n  ),\n  <a href=\"http://code.google.com/p/distorm/\" rel=\"nofollow noreferrer\">\n   distorm\n  </a>\n  and\n  <a href=\"http://www.beaengine.org/home\" rel=\"nofollow noreferrer\">\n   beaengine\n  </a>\n  are some open source disassembly engines that use recursive disassembly.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Distorm is a linear disassembler AFAIK (used if for several projects)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Another option is (sorry for the spam!)\n  <a href=\"http://pyew.googlecode.com\">\n   http://pyew.googlecode.com\n  </a>\n  . This is a static analyser written in Python that is used, mainly, for malware analysis. Depending on what you need, you may find it useful (it only supports yet 16, 32 and x64 Intel code). You can write your own scripts using\n  <a href=\"https://code.google.com/p/pyew/wiki/BatchExample\">\n   Pyew's API\n  </a>\n  (here you have a more complex\n  <a href=\"https://code.google.com/p/pyew/source/browse/gcluster.py\">\n   example\n  </a>\n  ). I use (and used it) for masive malware analysis. Indeed, when I was working for them, Pyew was analysing all the VirusTotal traffic. We used it to discard some very similar looking samples from some expensive analysis.\n </p>\n <p>\n  Pyew does recursive traversal code analysis (explanation\n  <a href=\"https://code.google.com/p/pyew/wiki/CodeAnalysis\">\n   here\n  </a>\n  ). Pyew it's not going to be fooled like linear-sweeps disassemblers. Anyway, it isn't as smart as it's IDA. Pyew is Open Source (GPL) and depending on your needs I even give, sometimes, LGPL licenses for it.\n </p>\n <p>\n  PS: If you're looking for something that support anything which is not Intel based and you want something Open Source you really need to check out\n  <a href=\"http://radare.org\">\n   radare\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "joxeankoret",
            "time": "Jan 15, 2014 at 16:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "3asm_",
                    "text": "<span class=\"comment-copy\">Thanks very insightful, the fact it is in Python will help a lot in my project, many thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Another OpenSource library that might of interest.\n </p>\n <p>\n  <a href=\"http://www.capstone-engine.org\" rel=\"nofollow noreferrer\">\n   Capstone Engine\n  </a>\n </p>\n <p>\n  It supports several architectures, such as x86 (+AMD64), ARM, PowerPC and SPARC.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Nocturnal",
            "time": "Mar 7, 2017 at 19:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "3asm_",
                    "text": "<span class=\"comment-copy\">Doesn't capstone only use straight line disassembly and is more focused on supporting multiple architectures instead ?</span>",
                    "time": null
                }
            ]
        }
    ]
}