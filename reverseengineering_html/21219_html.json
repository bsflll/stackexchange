{
    "title": "How to find the starting address of main function when the binary is stripped and _start doesn't push the absolute address value of main?",
    "link": "https://reverseengineering.stackexchange.com/questions/21219/how-to-find-the-starting-address-of-main-function-when-the-binary-is-stripped-an",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So let's say the ELF binary is stripped - meaning no symbol table - and the\n  <code>\n   _start\n  </code>\n  function doesn't push the address of main before calling\n  <code>\n   __libc_start_main\n  </code>\n  .\n </p>\n <p>\n  This happened in a binary when compiled for both 32-bit and 64-bit architectures, not sure why sometimes\n  <code>\n   _start\n  </code>\n  doesn't push the absolute value and instead pushes a register value (if anyone knows please let me know).\n </p>\n <p>\n  Is there any way in this situation that I can generate the call-graph (without names) of the binary starting from main? Is there any way I can find the address of\n  <code>\n   main\n  </code>\n  ? because right now it pushes a register value on the stack and the absolute address of\n  <code>\n   main\n  </code>\n  doesn't appear in any instruction!\n </p>\n <p>\n  I've added the a sample of the startup routine for a 32 bit version of a simple C program, compiled with gcc  with\n  <code>\n   -m32\n  </code>\n  (the 64 bit version is kinda the same in this section, no absolute address).\n </p>\n <p>\n  I'm not sure why some of my 32 bit programs push the absolute address of main before calling\n  <code>\n   __libc_main_start\n  </code>\n  and some don`t. Please let me know if you know the answer.\n </p>\n <pre><code>00001070 <_start>:\n    1070:       31 ed                   xor    ebp,ebp\n    1072:       5e                      pop    esi\n    1073:       89 e1                   mov    ecx,esp\n    1075:       83 e4 f0                and    esp,0xfffffff0\n    1078:       50                      push   eax\n    1079:       54                      push   esp\n    107a:       52                      push   edx\n    107b:       e8 22 00 00 00          call   10a2 <_start+0x32>\n    1080:       81 c3 80 2f 00 00       add    ebx,0x2f80\n    1086:       8d 83 50 d4 ff ff       lea    eax,[ebx-0x2bb0]\n    108c:       50                      push   eax\n    108d:       8d 83 f0 d3 ff ff       lea    eax,[ebx-0x2c10]\n    1093:       50                      push   eax\n    1094:       51                      push   ecx\n    1095:       56                      push   esi\n    1096:       ff b3 f8 ff ff ff       push   DWORD PTR [ebx-0x8]\n    109c:       e8 9f ff ff ff          call   1040 <__libc_start_main@plt>\n    10a1:       f4                      hlt\n    10a2:       8b 1c 24                mov    ebx,DWORD PTR [esp]\n    10a5:       c3                      ret\n    10a6:       66 90                   xchg   ax,ax\n    10a8:       66 90                   xchg   ax,ax\n    10aa:       66 90                   xchg   ax,ax\n    10ac:       66 90                   xchg   ax,ax\n    10ae:       66 90                   xchg   ax,ax\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "x86",
        "elf",
        "static-analysis",
        "binary"
    ],
    "user": "OneAndOnly",
    "time": "Apr 26, 2019 at 11:50",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Please share either the binaries themselves or disassembly of the relevant code so that we know what you are looking at.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "OneAndOnly",
            "text": "<html><body><span class=\"comment-copy\">\n @julian added a picture for a 32 bit version of a simple C program, compiled with gcc  with -m32 ( the 64 bit version is kinda the same in this section, no absolute address )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Please add the code as text rather than as a screenshot\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "OneAndOnly",
            "text": "<html><body><span class=\"comment-copy\">\n @julian alright done.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The binary appears to be a\n  <em>\n   position-independent executable\n  </em>\n  (PIE).\n </p>\n <p>\n  This means absolute addresses cannot be pushed onto the stack: the purpose of position independent code is for code to be loaded to a random location in virtual memory upon process creation via\n  <em>\n   address space layout randomization\n  </em>\n  (ASLR) (implemented by the kernel), so no absolute addresses can be known prior to runtime. Instead,\n  <em>\n   program counter-relative\n  </em>\n  addressing is used, in which relocations are calculated in reference to the CPU instruction pointer.\n  <sup>\n   1\n  </sup>\n </p>\n <p>\n  Note:\n </p>\n <ol>\n  <li>\n   the absolute address of\n   <code>\n    main\n   </code>\n   can be found at runtime\n  </li>\n  <li>\n   the absolute address of\n   <code>\n    main\n   </code>\n   will be different every time the program is executed\n  </li>\n  <li>\n   A call graph can be generated statically if the binary is unstripped, and a CFG can be generated whether a binary is stripped or not.\n  </li>\n </ol>\n <p>\n  I was able to produce similar code when I compiled a C program with GCC using the\n  <code>\n   -pie\n  </code>\n  and\n  <code>\n   fPIE\n  </code>\n  options. Full command:\n </p>\n <p>\n  <code>\n   gcc -m32 -pie -fPIE [source_file] -o [output_file_name]\n  </code>\n </p>\n <hr/>\n <p>\n  The offsets of the instructions in the provided assembly snippet are a big clue to what is going on here.\n </p>\n <p>\n  In a vanilla x86 ELF32 binary, the offset of the program initialization code (the first instruction of which is pointed to by the value in the\n  <code>\n   e_entry\n  </code>\n  field in the ELF header, aka the\n  <em>\n   program entry point\n  </em>\n  ) will not be far from the canonical entry point of\n  <code>\n   0x8048000\n  </code>\n  . Here is a sample, which we can use as a baseline for comparison:\n </p>\n <pre><code>080482f0 <_start>:\n 80482f0:       31 ed                   xor    ebp,ebp\n 80482f2:       5e                      pop    esi\n 80482f3:       89 e1                   mov    ecx,esp\n 80482f5:       83 e4 f0                and    esp,0xfffffff0\n 80482f8:       50                      push   eax\n 80482f9:       54                      push   esp\n 80482fa:       52                      push   edx\n 80482fb:       68 70 84 04 08          push   0x8048470\n 8048300:       68 00 84 04 08          push   0x8048400\n 8048305:       51                      push   ecx\n 8048306:       56                      push   esi\n 8048307:       68 ed 83 04 08          push   0x80483ed\n 804830c:       e8 cf ff ff ff          call   80482e0 <__libc_start_main@plt>\n 8048311:       f4                      hlt    \n 8048312:       66 90                   xchg   ax,ax\n 8048314:       66 90                   xchg   ax,ax\n</code></pre>\n <p>\n  Now let us compare these instruction offsets with the offsets in the position-independent code:\n </p>\n <pre><code>00000530 <_start>:\n 530:   31 ed                   xor    ebp,ebp\n 532:   5e                      pop    esi\n 533:   89 e1                   mov    ecx,esp\n 535:   83 e4 f0                and    esp,0xfffffff0\n 538:   50                      push   eax\n 539:   54                      push   esp\n 53a:   52                      push   edx\n 53b:   e8 22 00 00 00          call   562 <_start+0x32>       <------------\n 540:   81 c3 c0 1a 00 00       add    ebx,0x1ac0\n 546:   8d 83 80 e7 ff ff       lea    eax,[ebx-0x1880]        <------------\n 54c:   50                      push   eax\n 54d:   8d 83 10 e7 ff ff       lea    eax,[ebx-0x18f0]        <------------\n 553:   50                      push   eax\n 554:   51                      push   ecx\n 555:   56                      push   esi\n 556:   ff b3 f4 ff ff ff       push   DWORD PTR [ebx-0xc]     <------------\n 55c:   e8 bf ff ff ff          call   520 <__libc_start_main@plt>\n 561:   f4                      hlt    \n 562:   8b 1c 24                mov    ebx,DWORD PTR [esp]     <------------\n 565:   c3                      ret    \n 566:   66 90                   xchg   ax,ax\n 568:   66 90                   xchg   ax,ax\n</code></pre>\n <p>\n  Here we notice that the offsets here are completely different from those in the non-PIE ELF binary. Additionally, the arrows highlight similarities with the code snippet in the question that are particularly relevant in this context. Just like the code sample provided in the question, the code here is entirely devoid of absolute addresses.\n </p>\n <p>\n  <hr/>\n  References:\n </p>\n <ol>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld\">\n    What is the -fPIE option for position-independent executables in gcc and ld?\n   </a>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "julian",
            "time": "Apr 26, 2019 at 14:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">So how can i generate a call graph statically if i cant find the address of main and code is PIE? also why is compiled in PIE considering i didnt specify any option wtih GCC? i thought we had to say -fPIE for it to become PIE?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@OneAndOnly I was able to generate a callgraph using Cutter just fine. PIC has no bearing on the ability to generate call graphs. GCC's behavior is deterministic - the same source will compile the same way each time the same flags/options are used. The simplest explanation  for the behavior you are seeing would be user error, but I cannot explain to you why you are seeing what you are seeing unless you provide much more precise information about what you are doing.</span>",
                    "time": null
                },
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">but Im not looking for a tool, I'm writing my own tool and usually i find the main function address and start a recursive call generation from there, but now that i cant find it idk, and i cant just do it from the start of .text section since a lot of calls are indirect and i cant do it statically(don't know where to jump to when its indirect like call [eax])</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@OneAndOnly this issue is entirely separate from the question above. My advice is to do some meaningful research before attempting to design your own implementation. PIC is not the problem (in fact, why would it be?); the problem is that the binary is stripped. Are you aware of the fact that <a href=\"https://binary.ninja/2017/11/06/architecture-agnostic-function-detection-in-binaries.html\" rel=\"nofollow noreferrer\">in stripped binaries, finding function boundaries is an undecidable problem</a>? Tools such as radare/Cutter and IDA use basic blocks, not function calls, to map program logic.</span>",
                    "time": null
                }
            ]
        }
    ]
}