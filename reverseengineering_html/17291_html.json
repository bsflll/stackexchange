{
    "title": "What is the difference between a GLOBAL symbol and NONE?",
    "link": "https://reverseengineering.stackexchange.com/questions/17291/what-is-the-difference-between-a-global-symbol-and-none",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm playing with a pe32 file. With\n  <code>\n   is\n  </code>\n  , Some of my symbols say\n  <code>\n   GLOBAL\n  </code>\n  others say\n  <code>\n   NONE\n  </code>\n  ,\n </p>\n <pre><code>006 0x00027514 0x100428114 GLOBAL   FUNC    0 k.exe_asdf\n....\n002 0x0002a808 0x10042c008   NONE   FUNC    0 imp.foo.dll_bar\n</code></pre>\n <p>\n  Are the only two options\n  <code>\n   GLOBAL\n  </code>\n  and\n  <code>\n   NONE\n  </code>\n  ? Where can I find the output definition of this screen. If I run the same executable under\n  <code>\n   objdump -t\n  </code>\n  it just shows\n </p>\n <pre><code>./k.exe:     file format pei-x86-64\n\nSYMBOL TABLE:\nno symbols\n</code></pre>\n <p>\n  <code>\n   nm\n  </code>\n  also shows no symbols. I'm guessing though that\n  <code>\n   radare2\n  </code>\n  is just better working with pe32+ files?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "524",
    "tags": [
        "radare2",
        "symbols"
    ],
    "user": "Evan Carroll",
    "time": "Jan 25, 2018 at 17:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  PE Binding\n </h2>\n <p>\n  \"GLOBAL\" and \"NONE\" are values of the \"Bind\" column in radare2's symbol table. As @blabb correctly described, whenever you look at the \"Exports\" through radare2 you'll see the value\n  <code>\n   \"GLOBAL\"\n  </code>\n  assigned to\n  <code>\n   ptr->bind\n  </code>\n  and you'll see\n  <code>\n   \"NONE\"\n  </code>\n  assigned to each import. The thing is, that this is only relevant for PE files and I'll soon explain it deeper. For now, let's look at the implemented code in radare2.\n </p>\n <p>\n  @blabb mentioned that you can easily spot this in the code, that's true. Here's how the implementation of\n  <code>\n   bind\n  </code>\n  is for PE\n  <strong>\n   exports\n  </strong>\n  :\n </p>\n <pre><code>if ((symbols = PE_(r_bin_pe_get_exports)(bf->o->bin_obj))) {\n        for (i = 0; !symbols[i].last; i++) {\n            if (!(ptr = R_NEW0 (RBinSymbol))) {\n                break;\n            }\n            ptr->name = strdup ((char *)symbols[i].name);\n            ...\n            ptr->bind = r_str_const (\"GLOBAL\");\n            ptr->type = r_str_const (\"FUNC\");\n            ptr->size = 0;\n            ...\n            ...\n</code></pre>\n <p>\n  You can see that\n  <code>\n   ptr->bind\n  </code>\n  is unconditionally assigned to be \"GLOBAL\".\n </p>\n <p>\n  That's how the implementation of\n  <code>\n   bind\n  </code>\n  is looking like for PE\n  <strong>\n   import\n  </strong>\n  :\n </p>\n <pre><code>if ((imports = PE_(r_bin_pe_get_imports)(bf->o->bin_obj))) {\n        for (i = 0; !imports[i].last; i++) {\n            if (!(ptr = R_NEW0 (RBinSymbol))) {\n                break;\n            }\n            ...\n            ptr->name = r_str_newf (\"imp.%s\", imports[i].name);\n            ptr->bind = r_str_const (\"NONE\");\n            ptr->type = r_str_const (\"FUNC\");\n            ptr->size = 0;\n            ...\n            ...\n</code></pre>\n <p>\n  Again, it is unconditionally assigned to \"NONE\".\n </p>\n <hr/>\n <h2>\n  Symbol Binding\n </h2>\n <p>\n  Symbol binding is a subject that thoroughly was already answered by @SYS_V in this incredibly good\n  <a href=\"https://reverseengineering.stackexchange.com/a/14904/18698\">\n   answer\n  </a>\n  .\n </p>\n <p>\n  To quote from his answer:\n </p>\n <blockquote>\n  <p>\n   There must be a way for the link editor (ld) to determine the scope of\n  a symbol during link-time. In other words, symbol binding allows the\n  link editor to differentiate between symbols visible only within a\n  particular file being linked (local scope) vs. symbols that can be\n  referenced from within functions located in other files (global\n  scope).\n  </p>\n </blockquote>\n <p>\n  For ELF files, GLOBAL binding means the symbol is visible outside the file. LOCAL binding is visible only in the file. WEAK is like global, the symbol can be overridden.\n </p>\n <p>\n  There are many more binding values for ELF as you can see in\n  <a href=\"https://docs.oracle.com/cd/E19683-01/816-1386/6m7qcoblj/index.html#chapter6-tbl-21\" rel=\"nofollow noreferrer\">\n   this table\n  </a>\n  :\n </p>\n <pre><code>+------------+-------+\n|    Name    | Value |\n+------------+-------+\n| STB_LOCAL  |     0 |\n| STB_GLOBAL |     1 |\n| STB_WEAK   |     2 |\n| STB_LOOS   |    10 |\n| STB_HIOS   |    12 |\n| STB_LOPROC |    13 |\n| STB_HIPROC |    15 |\n+------------+-------+\n</code></pre>\n <p>\n  And radare2 implemented it as well in\n  <a href=\"https://github.com/radare/radare2/blob/f15618a7061eb9fcb860ac00e88a074321f6270a/libr/bin/format/elf/elf.c#L2551\" rel=\"nofollow noreferrer\">\n   <code>\n    fill_symbol_bind_and_type\n   </code>\n  </a>\n  :\n </p>\n <pre><code>switch (ELF_ST_BIND(sym->st_info)) {\ncase STB_LOCAL:  s_bind (\"LOCAL\"); break;\ncase STB_GLOBAL: s_bind (\"GLOBAL\"); break;\ncase STB_WEAK:   s_bind (\"WEAK\"); break;\ncase STB_NUM:    s_bind (\"NUM\"); break;\ncase STB_LOOS:   s_bind (\"LOOS\"); break;\ncase STB_HIOS:   s_bind (\"HIOS\"); break;\ncase STB_LOPROC: s_bind (\"LOPROC\"); break;\ncase STB_HIPROC: s_bind (\"HIPROC\"); break;\ndefault:         s_bind (\"UNKNOWN\");\n}\n</code></pre>\n <h2>\n  Further reading\n </h2>\n <p>\n  I highly recommend @SYS_V's answer for more information. You can also read more about Symbol Resolution\n  <a href=\"https://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/chapter2-93321/index.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  and you can find more information about Symbol visibility in\n  <a href=\"https://www.technovelty.org/code/why-symbol-visibility-is-good.html\" rel=\"nofollow noreferrer\">\n   this link\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Megabeets",
            "time": "Jan 25, 2018 at 21:31",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  exported functions in a binary are denoted by GLOBAL\nimported function in a binary are denoted by NONE\n </p>\n <pre><code>:\\>rabin2  -i ..\\..\\miscinfo\\Debug\\tzinfo.dll | grep -i Mod\n003 0x10016008 NONE FUNC KERNEL32.dll_GetModuleFileNameA\n011 0x10016028 NONE FUNC KERNEL32.dll_GetModuleHandleW\n009 0x10016088 NONE FUNC VCRUNTIME140D.dll___vcrt_GetModuleFileNameW\n010 0x1001608c NONE FUNC VCRUNTIME140D.dll___vcrt_GetModuleHandleW\n\n:\\>rabin2  -E ..\\..\\miscinfo\\Debug\\tzinfo.dll\n[Exports]\n000 0x0000bb80 0x1000c780 GLOBAL   FUNC    0 tzinfo.dll_DebugExtensionInitialize\n001 0x0000bc10 0x1000c810 GLOBAL   FUNC    0 tzinfo.dll_DebugExtensionNotify\n002 0x0000bbb0 0x1000c7b0 GLOBAL   FUNC    0 tzinfo.dll_DebugExtensionUninitialize\n003 0x0000bad0 0x1000c6d0 GLOBAL   FUNC    0 tzinfo.dll_help\n004 0x00000670 0x10001270 GLOBAL   FUNC    0 tzinfo.dll_tzinfo\n</code></pre>\n <p>\n  btw you can get the source for radare  and grep through the src to find most of the answers\n </p>\n <pre><code>>grep -r \"\\\"GLOBAL\\\"\" *\nlibr/bin/format/elf/elf.c:      case STB_GLOBAL: s_bind (\"GLOBAL\"); break;\nlibr/bin/p/bin_mach0.c:                 \"LOCAL\":\"GLOBAL\");\nlibr/bin/p/bin_pe.c:                ptr->bind = r_str_const (\"GLOBAL\");\nlibr/core/bin.c:        return (strcmp (s->bind, \"GLOBAL\") == 0);\nshlr/java/class.c:                      sym->bind = r_str_const (\"GLOBAL\");\nshlr/java/class.c:                      sym->bind = r_str_const (\"GLOBAL\");\n</code></pre>\n <p>\n  and actual srccode\n </p>\n <pre><code>>grep -r -B 10 -A 5 \"\\\"GLOBAL\\\"\"  .\\libr\\bin\\p\\bin_pe.c\n        if (!(ret = r_list_new ()))\n                return NULL;\n        ret->free = free;\n        if ((symbols = PE_(r_bin_pe_get_exports)(arch->o->bin_obj))) {\n                for (i = 0; !symbols[i].last; i++) {\n                    if (!(ptr = R_NEW0 (RBinSymbol)))\n                        break;\n                    ptr->name = strdup ((char *)symbols[i].name);\n                    ptr->forwarder = r_str_const ((char *)symbols[i].forwarder);\n                    //strncpy (ptr->bind, \"NONE\", R_BIN_SIZEOF_STRINGS);\n                    ptr->bind = r_str_const (\"GLOBAL\");\n                    ptr->type = r_str_const (\"FUNC\");\n                    ptr->size = 0;\n                    ptr->vaddr = symbols[i].vaddr;\n                    ptr->paddr = symbols[i].paddr;\n                    ptr->ordinal = symbols[i].ordinal;\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 25, 2018 at 19:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Though I'm not sure, I think\n  <code>\n   NONE\n  </code>\n  means\n  <code>\n   IMPORTED\n  </code>\n  as the Symbol list of the NONE can be reproduced with\n  <code>\n   rabin -i\n  </code>\n  where\n  <code>\n   -i\n  </code>\n  means show imported symbols,\n </p>\n <pre><code>2 0x10042c008    NONE    FUNC NETAPI32.dll_NetUserModalsSet\n</code></pre>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "Evan Carroll",
            "time": "Jan 25, 2018 at 17:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}