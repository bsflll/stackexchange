{
    "title": "Redirecting Program Output from /dev/*char_device* to Text File",
    "link": "https://reverseengineering.stackexchange.com/questions/16506/redirecting-program-output-from-dev-char-device-to-text-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently trying to reverse an IoT machine running the 2.6 Linux Kernel on which I have root. On this machine, software writes to /dev/\n  <em>\n   some_device\n  </em>\n  to control what I believe to be are GPIO pins for a serial bus. In order to take control of these GPIO pins, I have been attempting to reverse the on-board software to grasp how the drivers are looking for input, but the decompilation has been messy/missing parts.\n </p>\n <p>\n  Thus, my question:\n  <strong>\n   Am I able to redirect program output intended for /dev/\n   <em>\n    some_device\n   </em>\n   to a text file for analysis?\n  </strong>\n </p>\n <p>\n  For example, the current mapping:\n </p>\n <pre>\nProgram -> (char sequence) -> /dev/*char_device*\n</pre>\n <p>\n  I am looking for a way to redirect the program output from the device to a text file, or better, any writes to the device to a text file. Example:\n </p>\n <pre>\nProgram -> (char sequence) --\\       /dev/*char_device*\n                              \\\n                               \\-----> *my_text_file*\n</pre>\n <p>\n  Again, my motivation to do so is to analyze how the driver is expecting input. I already know my logical input/output/return communications on the serial bus, I just need to be able to determine the specifics of the device driver. Any help is appreciated. Let me know if more information is required.\n </p>\n <p>\n  -Update-\nHere is a method I tracked down in the source code decompliation. While I cannot verify that this is the exact handler for the devices I'm targeting, it used by devices with similar names.\n </p>\n <pre>\n// Address range: 0x1000c470 - 0x1000c6f7\nint32_t function_1000c470(int32_t * a1, int32_t a2, int32_t a3, char * path) {\n    int32_t v1 = (int32_t)a1;\n    int32_t v2; // bp-144\n    int32_t v3 = &v2 // 0x1000c470_0\n    v2 = v3;\n    g602 = v3;\n    int32_t fd = open(path, O_RDWR);\n    int32_t * fd2 = (int32_t *)(v1 + 4); // 0x1000c4a8_0\n    *fd2 = fd;\n    if (*fd2  0x1000c6d8\n    } else {\n        // 0x1000c500\n        fprintf(g94, \"opening serial device %s with fd %d\n\", path, *fd2);\n        int32_t termios_p;\n        tcgetattr(*fd2, (struct termios *)&termios_p);\n        cfmakeraw((struct termios *)&termios_p);\n        cfsetospeed((struct termios *)&termios_p, 9);\n        cfsetispeed((struct termios *)&termios_p, 9);\n        tcsetattr(*fd2, TCSANOW, (struct termios *)&termios_p);\n        ioctl(*fd2, 0x5415);\n        g1 &= -0x2000001;\n        ioctl(*fd2, 0x5418);\n        *(int32_t *)(v1 + 16) = 0;\n        *(int32_t *)(v1 + 20) = 0;\n        int32_t * v4 = (int32_t *)(4 * *fd2 / 32 + v1 + 1668); // 0x1000c630_0\n        *v4 = 1  0x1000c674\n        }\n        // 0x1000c674\n        *(int32_t *)(v1 + 8) = v7 + 1;\n        *(int32_t *)(v1 + 1624) = 0;\n        *(int32_t *)(v1 + 1620) = 0;\n        *(int32_t *)(v1 + 1628) = 0;\n        memset((char *)(v1 + 120), 0, 1500);\n        function_1000c6f8(*fd2, 0);\n        // branch -> 0x1000c6d8\n    }\n    int32_t v8 = v2; // 0x1000c6dc\n    g602 = *(int32_t *)(v8 - 4);\n    return *(int32_t *)(v8 + 4);\n}\n</pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "120",
    "tags": [
        "firmware",
        "linux",
        "driver"
    ],
    "user": "J. Bednard",
    "time": "Oct 9, 2017 at 1:01",
    "comments": [
        {
            "user": "J. Bednard",
            "text": "<html><body><span class=\"comment-copy\">\n To add, the /dev/device I am targeting is a character device. It'd like to divert its input steam to an output file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "J. Bednard",
            "text": "<html><body><span class=\"comment-copy\">\n Part of my thought believes that the /dev device is just a pointer to the driver handler. If that is case, would I be able to overwrite the pointer to my own device?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<html><body><span class=\"comment-copy\">\n It is also a file. Which interface this software use for accessing device? Is it uses open(2)?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "J. Bednard",
            "text": "<html><body><span class=\"comment-copy\">\n @de6f I have updated the original post with the decompiled source code which is working on the device file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "J. Bednard",
            "text": "<html><body><span class=\"comment-copy\">\n Ideally, I should be able to take the supplied code and recompile it into my own program and try to harness termios to setup a serial connection. I'm a bit weary on this being the correct code those as the /dev/device I am trying to target is an IBM SDLC serial bus. In fact, I'm going to make the assumption that the code in the post is not for the device that I am targetting.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have used\n  <a href=\"https://linux.die.net/man/4/pts\" rel=\"nofollow noreferrer\">\n   <code>\n    /dev/ptmx\n   </code>\n  </a>\n  for that purpose:\n </p>\n <p>\n  Say i want to intercept data written to\n  <code>\n   /dev/somedevice\n  </code>\n </p>\n <ul>\n  <li>\n   First i open the master:\n   <code>\n    /dev/ptmx\n   </code>\n   .\n  </li>\n  <li>\n   Then i allocate a slave by calling\n   <code>\n    ptsname\n   </code>\n   .\n  </li>\n  <li>\n   Now rename\n   <code>\n    /dev/somedevice\n   </code>\n   to\n   <code>\n    /dev/somedevice.orig\n   </code>\n  </li>\n  <li>\n   Symlink\n   <code>\n    /dev/somedevice\n   </code>\n   to the pts slave.\n  </li>\n  <li>\n   <p>\n    open the original device\n    <code>\n     /dev/somedevice.orig\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    start copying data between the master and the original device.\nrecording data to a log file.\n   </p>\n  </li>\n </ul>\n <p>\n  Make sure the interceptor gets started before the original program opens the device.\n </p>\n <p>\n  Also, i think you may run into problems handling\n  <code>\n   ioctl\n  </code>\n  s this way.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Willem Hengeveld",
            "time": "Oct 9, 2017 at 19:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "J. Bednard",
                    "text": "<span class=\"comment-copy\">Thank you William. I'll give this a try when I sit down next. I'll report back.</span>",
                    "time": null
                }
            ]
        }
    ]
}