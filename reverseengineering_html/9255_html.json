{
    "title": "How does PeID calculate entropy?",
    "link": "https://reverseengineering.stackexchange.com/questions/9255/how-does-peid-calculate-entropy",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm curious about the entropy field value that shows up when a binary is dropped into PeID. Does someone know how it arrives upon this value?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "3k",
    "tags": [
        "obfuscation",
        "entropy"
    ],
    "user": null,
    "time": "Jun 29, 2015 at 18:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is exactly a problem I dealt with several years ago because we also wanted to implement a close-as-possible solution for a project formerly based on PeID.\n </p>\n <p>\n  Fortunately, in those days I found an old discussion in the PeID forum where someone asked the same question and got some hints from the author (not the exact code). I still have the link, but the entire site has ceased to exist :(\n </p>\n <p>\n  Those days I managed to re-implement a version of that algorithm which yielded the same values most of the time. The core points of original PeID's entropy implementation are:\n </p>\n <ul>\n  <li>\n   It indeed uses the (Order-0) Shannon formula (see Guntrams hint) as core algorithm\n  </li>\n  <li>\n   Such an entropy is calculated for each PE section independently\n  </li>\n  <li>\n   use the raw size of each PE section (i.e. size on disk) as starting point for the data amount, then subtract all 0-Bytes at the very end from this value before calculating the Shannon entropy.\n  </li>\n  <li>\n   sections may be ignored in the further calculation if following conditions apply:\n  </li>\n  <li>\n   <ul>\n    <li>\n     the section is the resource section\n    </li>\n   </ul>\n  </li>\n  <li>\n   <ul>\n    <li>\n     no (remaining) data in the section (after null byte subtraction)\n    </li>\n   </ul>\n  </li>\n  <li>\n   the overall entropy is built by a weighted combination of all single section entropy values based on their (effective) lengths.\n  </li>\n </ul>\n <p>\n  This way you should be able to get very similar results. But expect deviations in non-standard samples (e.g. corruped/tampered PE files), i.e. you should expect and handle cases like implausible section sizes or files where all sections are excluded from the calculation...\n </p>\n <p>\n  I hope this helps a bit and you can now successfully try this yourself... ;)\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Chris14",
            "time": "Jun 29, 2015 at 21:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Did you check the Wayback Machine for that page?</span>",
                    "time": null
                },
                {
                    "user": "Chris14",
                    "text": "<span class=\"comment-copy\">Yes, it's not indexed :(</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You'd have to ask the creator of PeID which algorithm he uses.\n </p>\n <p>\n  The standard formula for this is the\n  <a href=\"https://en.wikipedia.org/wiki/Entropy_(information_theory)\" rel=\"nofollow\">\n   Shannon formula\n  </a>\n  : H(x) = - sum i=1 to n p(i)*log2(p(i)).\n </p>\n <p>\n  <em>\n   Why can't i use LaTeX here?\n  </em>\n </p>\n <p>\n  An easy way to determine the entropy of a file is trying to compress it, using one of the standard compression Tools. Low entropies lead to better compression.\n </p>\n <p>\n  Especially when you try to determine which sections are code and which are data, the compression test is a better indicator. The original shannon formula does not take into account if there are combinations of multiple bytes that occur often (like the push/pop sequences of function starts/ends), but compression algorithms recognize those.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jun 29, 2015 at 20:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  a generic entropy calculation looks like this\n </p>\n <p>\n  create a histogram of the contents of the binary \nmax 256 different bytes (0x0..0xff)\n  \n\n  calculate (log base 2 of probability of each byte  multiplied by its count)\nadd them all up and divide by filesize\n </p>\n <pre>\n<h3><em>byte   count freq?        log<sub>2</sub></em> * count</h3>\n0x00     100   (100/filesize)     log<sub>2</sub>(freq[0]?)*count   \n0x01     045   (045/filesize)     log<sub>2</sub>(freq[1]?)*count    \n................................................    \n0xfe     020   (020/filesize)     log<sub>2</sub>(freq[0xfe]?)*count    \n0xff     180   (180/filesize)     log<sub>2</sub>(freq[0xfF]?)*count \n<h2>entropy =            ^sum(0x0..0xff)^/filesize       </h2></pre>\n <p>\n  a sample code\n </p>\n <pre>\n#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\nint main (int argc,char *argv[]) {\n  if(argc !=2 ){ printf (\"usage %s file\",argv[0]);return 0;}\n  FILE * fp = 0;errno_t err = 0; unsigned long fsize = 0; float ent =0;\n  if (((err = fopen_s(&fp,argv[1],\"rb\")) == 0)  && (fp !=0)){\n    fseek(fp,0,SEEK_END);\n    fsize = ftell(fp);\n    fseek(fp,0,SEEK_SET);\n    unsigned char * buff = (unsigned char *)calloc(fsize,sizeof(char));\n    if(buff){\n      fread(buff,fsize,sizeof(char),fp);\n      fclose(fp);\n      unsigned long hist[256]= {0};\n      for(unsigned int i =0; i < fsize; i++){\n        hist[buff[i]]++;        \n      }\n      for(unsigned int i=0;i<256;i++){//log b2 (n) = loge(n)/loge(2)\n        ent+=((log((float)hist[i]/fsize)/log((float)2))*hist[i]);\n      }\n      printf(\"%f\n\",-ent/fsize);\n      free(buff);\n    }    \n  }   \n}\n</pre>\n <p>\n  result\n </p>\n <pre>\n:\\>ls -l *\n-rw-rw-rw-  1 Admin 0 867 2015-06-30 03:30 entropy.cpp \n\n:\\>..\\compile.bat    \n:\\>if \"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\\" == \"\" ()    \n:\\>cl /Zi /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE\nentropy.cpp  \n\n:\\>ls -l *\n-rw-rw-rw-  1 Admin 0     867 2015-06-30 03:30 entropy.cpp\n-rwxrwxrwx  1 Admin 0  135680 2015-06-30 03:32 entropy.exe\n-rw-rw-rw-  1 Admin 0    5804 2015-06-30 03:32 entropy.obj\n-rw-rw-rw-  1 Admin 0 1297408 2015-06-30 03:32 entropy.pdb\n-rw-rw-rw-  1 Admin 0   53248 2015-06-30 03:32 vc100.pdb    \n\n<h2>:\\>entropy.exe entropy.exe\n6.577609 </h2>\n</pre>\n <p>\n  was tinkering with powershell and these two lines of script will calculate the same entropy as the c code above\n </p>\n <pre>\nPS > cat .\\entropy.ps1\n$s=($f=gc -Encoding Byte $args)|measure;$g=$f|group -AsHashTable\n 0..255|%{ $e+=(((([math]::Log( $g[$_].count / $s.count)) /\n                    [math]::Log(2.0)) * $g[$_].count)/$s.count)};-$e\nPS > .\\entropy.ps1 .\\entropy.exe\n<h1>6.57760952796101</h1>\n</pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 30, 2015 at 20:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mistika",
                    "text": "<span class=\"comment-copy\">There's a problem with such method. If you create a file that consists of 256 blocks, each one 256 bytes long and filled with the same byte value (256 zeros, 256 0x01s, .., 256 0xFFs),  it will give the result of 8.0 - the highest entropy, however such a file is very well compressible (64K become 420 bytes with Winrar).  This method doesn't count the distribution of bytes within a file.</span>",
                    "time": null
                }
            ]
        }
    ]
}