{
    "title": "Avatao R3v3rs3 2",
    "link": "https://reverseengineering.stackexchange.com/questions/17064/avatao-r3v3rs3-2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found\n  <a href=\"https://platform.avatao.com/paths/a0dc20fc-f1b5-43c9-89fc-3a5fccfb5f0b/challenges/d80d53ed-597a-4b7e-9897-b85784489029\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  platform and its course path into Reverse Engineering.\n </p>\n <p>\n  Although very easy (at first) I'm kinda stuck in this binary n.2. Binary looks pretty easy and straightforward, but I can't figure it out how the code can count the length of user's password. I can see in the disassembled code that:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BQiFV.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Program block that is supposed to count user password\" src=\"https://i.sstatic.net/BQiFV.png\"/>\n  </a>\n </p>\n <p>\n  Just before\n  <code>\n   strlen\n  </code>\n  call,\n  <code>\n   EAX\n  </code>\n  will point always to command line:\n </p>\n <pre><code>r2 -Ad ./reverse2.dms AAAAAAAAAAAAAAAAAAAAAAAAAAA\n</code></pre>\n <p>\n  It will count always\n  <code>\n   0x0e\n  </code>\n  chars because of the length of string\n  <code>\n   ./reverse2.dms\n  </code>\n  and not the length of the submitted password.\n </p>\n <p>\n  I don't know if is it a bug or ... maybe ... I simply don't get it. But as for this situation, interesting loop is never reached because\n  <code>\n   0x0e < 0x15\n  </code>\n  .\n </p>\n <p>\n  I can rename the binary and jump over the first block but... honestly I'm afraid it's not the right way.\n </p>\n <p>\n  Am I wrong?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "239",
    "tags": [
        "assembly",
        "radare2"
    ],
    "user": "Kartone",
    "time": "Dec 29, 2017 at 8:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As your initial instincts told you, it is quite a simple challenge and you are close. Let's understand together the logic of the program. As you did, I used radare2.\n </p>\n <p>\n  Let's open the program in radare2:\n </p>\n <pre><code>$ r2 reverse2\n</code></pre>\n <p>\n  Analyze the binary and print the main function:\n </p>\n <pre><code>[0x08048350]> aa\n[0x08048350]> pdf @ main\n</code></pre>\n <p>\n  If you want to, you can use radare's great Visual Graph Mode to easily detect the function's flow:\n </p>\n <pre><code>[0x08048350]> VV @ main\n</code></pre>\n <p>\n  First the program checks whether you pass at least one argument to the program, i.e\n  <code>\n   num_of_arguments > 1\n  </code>\n  . Remember that the filename counts as 1 argument so you'll need another one.\n </p>\n <pre><code>0x08048456      837d0801       cmp dword [arg_8h], 1\n0x0804845a      7f16           jg 0x804847\n</code></pre>\n <p>\n  Then it checks if the file name is more than 15 characters long:\n </p>\n <pre><code>0x08048472      8b450c         mov eax, dword [arg_ch]     ; [0xc:4]=-1 ; 12\n0x08048475      8b00           mov eax, dword [eax]\n0x08048477      89442418       mov dword [local_18h], eax\n0x0804847b      8b442418       mov eax, dword [local_18h]  ; [0x18:4]=-1 ; 24\n0x0804847f      890424         mov dword [esp], eax\n0x08048482      e8a9feffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n0x08048487      8944241c       mov dword [local_1ch], eax\n0x0804848b      837c241c15     cmp dword [local_1ch], 0x15 ; [0x15:4]=-1 ; 21\n</code></pre>\n <p>\n  So, you need to change the file name to be more than 15 characters long and pass it at least one argument.\n </p>\n <p>\n  Now for the interesting part. In the following conditions, the program is checking whether\n  <code>\n   filename[some_offset] == chr(0x??)\n  </code>\n  and if yes, it goes to another offset in the file name and checks the value there.\n  \n\n  So, for example, in the first check you can see:\n </p>\n <pre><code>0x080484a7      8b442418       mov eax, dword [local_18h]\n0x080484ab      83c014         add eax, 0x14\n0x080484ae      0fb600         movzx eax, byte [eax]\n0x080484b1      3c73           cmp al, 0x73                ; 's' ; 115\n</code></pre>\n <p>\n  In this block it checks whether\n  <code>\n   filename[0x14] == chr(0x73)\n  </code>\n  which radare hints you that 0x73 equals the letter 's'.\n </p>\n <p>\n  If yes, it jumps to another block:\n </p>\n <pre><code>0x080484b9      8b442418       mov eax, dword [local_18h]\n0x080484bd      83c008         add eax, 8\n0x080484c0      0fb600         movzx eax, byte [eax]\n0x080484c3      3c67           cmp al, 0x67                ; 'g' ; 103\n</code></pre>\n <p>\n  In this block the program checks whether\n  <code>\n   filename[8]=='g'\n  </code>\n  .\n  \n\n  And so on until it checks all the offsets.\n </p>\n <p>\n  I'll leave it to you to solve it and figure out what should be the name of the program.\n  \n\n  Good luck!\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Megabeets",
            "time": "Dec 28, 2017 at 23:22",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well it looks like this is exactly what you should do as the code check for the name of the binary and not the parameters passed to it, as\n  <code>\n   argv[0]\n  </code>\n  is the \"file name of the binary\".\n </p>\n <p>\n  So you solution is to either change the name to be longer than\n  <code>\n   0x15\n  </code>\n  or to patch the binary. Maybe later there will be something that will steer to one of those solutions (i.e. checking the name) but for now it's looks like you can pick any.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Dec 28, 2017 at 16:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">Ok, got it. I will proceed. But, the first conclusion is that published write-up is wrong.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">I don't know what's in the write-up but looking at the rest of code it is obvious that the flag is in the binary name</span>",
                    "time": null
                }
            ]
        }
    ]
}