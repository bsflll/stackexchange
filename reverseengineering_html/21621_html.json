{
    "title": "IDA 7 not dissasembling NEC v20 code",
    "link": "https://reverseengineering.stackexchange.com/questions/21621/ida-7-not-dissasembling-nec-v20-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I have an embedded machine from the late 80s I want to mess around with. It uses a NEC v20HL which is an 8088 compatible with some extra 80186 instructions tossed in. I know it uses 64k code segments, reset vector at 0xFFFF0 and ISRs at 0x00 on even addresses.\n </p>\n <p>\n  I have tried a bunch of different architectures and the only one that looks like 8088/x86 old school is the x86 real 16bit.\n </p>\n <p>\n  I don't understand how to actually use that information as IDA disassembled even the reset jmpl wrong (EA 0000 FDAF) is clearly a far jump to seg 0 add 0xFDAF but IDA makes it seg000:0xDAF0. What is even worse is 0xFDAF jumps to a faulty instruction?..\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "373",
    "tags": [
        "ida"
    ],
    "user": "uMinded",
    "time": "Jul 6, 2019 at 0:38",
    "comments": [
        {
            "user": "Ricardo",
            "text": "<html><body><span class=\"comment-copy\">\n Do you have IDA pro?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "uMinded",
            "text": "<html><body><span class=\"comment-copy\">\n @Ricardo No, 7 Free\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n how did you load your binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ricardo",
            "text": "<html><body><span class=\"comment-copy\">\n I don't see any 8088 or 80186 in the supported processor list of IDA.\n <a href=\"https://www.hex-rays.com/products/ida/processors.shtml\" rel=\"nofollow noreferrer\">\n  hex-rays.com/products/ida/processors.shtml\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "uMinded",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky The file is a binary dump from an EPROM. I load it like any other and select x86 16bit. From there I am not sure how to create the proper sections so that far jumps actually map properly.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, it's a little difficult to describe it without the actual file but I'll try. For proper disassembly, you should load code so that it matches the expected addresses. For example, last 64K should normally be loaded into segment F000, so that the first byte of that segment is at F000:0000, or linear address 0xF0000 (seg<<4 + ofs).\n </p>\n <p>\n  Some simple rules of thumb:\n </p>\n <ol>\n  <li>\n   64KB binary: load at F000:0000 (0xF0000)\n  </li>\n  <li>\n   128KB binary: load at E000:0000 (0xE0000)\n  </li>\n  <li>\n   256KB binary: load at C000:0000 (0xC0000)\n  </li>\n  <li>\n   512KB binary: load at 8000:0000 (0x80000)\n  </li>\n </ol>\n <p>\n  Next, you'll need to create segments based on far jumps and calls, for example:\n </p>\n <p>\n  EA 00 00 FD AF    jmp     far ptr 0AFFDh:0\n </p>\n <p>\n  means there is a segment with the base 0xAFFD, so, create the following segment:\n </p>\n <pre><code> start address: 0xAFFD0 (base<<4)\n end address: 0xBFFD0 (maximum 64KB long)\n base: 0xAFFD\n (*) 16-bit\n</code></pre>\n <p>\n  next, go through disassembly and look for other far jumps/calls to gather other possible segment bases (a good source for that is the problems list). Create corresponding segments (you will likely have to truncate some of the previously created ones; this is normal as segments using full 64KB are not very common). You may also need to use a start address not at seg:0 but small offset, e.g. seg:7 (so seg<<4 + 7).\n </p>\n <p>\n  For most BIOS ROMs it may be be useful to create at least the last two segments (E000 and F000) straight away.\n </p>\n <p>\n  For more info on how segmentation works in IDA,\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/508.shtml\" rel=\"nofollow noreferrer\">\n   see here\n  </a>\n  .\n </p>\n <p>\n  Related question:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/6067/\">\n   Segments in IDA. How to overcome NONAME problem\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 9, 2019 at 9:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "uMinded",
                    "text": "<span class=\"comment-copy\">From that related question this cleared things up for me: \"What seemed to be happening was that the linker was placing every object file into its own segment, so every inter-object function invocation was rendered in the binary as a far call, where the segment base was the base given to all functions within the module. I.e., the case you mention in your reply to Igor's comment did not materialize for me.\" Essentially the asm/ld is just being efficent, unless the coder is trying to obfuscate manually it should have no overloaps.</span>",
                    "time": null
                },
                {
                    "user": "uMinded",
                    "text": "<span class=\"comment-copy\">As an aside, this may actually be useful as each code segment, if linked in the above way would make obviously related code chunks quite visible. Combine this with the fact I see strange chunks of 0x00 padding in the rom this may be the case.</span>",
                    "time": null
                },
                {
                    "user": "uMinded",
                    "text": "<span class=\"comment-copy\">Would a good tactic be to make a segment 64k, find the first far jump and shrink the segment you are leaving to end at that jump. Then keep wandering the code making  segments and shrinking as I go. Once I run out of far jumps I can expand the tail end of segments to the start of the next? It would be easier if you could just have a bazillion overlapping segments by paragraph and then have IDA mark the only ones used...</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I'd probably make a script to scan the database for all EA/9A opcodes, gather and sort all segment and offset values, then make a sort of a map to create non-overlapping segments.</span>",
                    "time": null
                },
                {
                    "user": "uMinded",
                    "text": "<span class=\"comment-copy\"><a href=\"https://reverseengineering.stackexchange.com/questions/21654/dealing-with-x86-segmentation-overlaps\">I started a new question for that specifically</a></span>",
                    "time": null
                }
            ]
        }
    ]
}