{
    "title": "Real PE32(+) entry point - is it documented anywhere?",
    "link": "https://reverseengineering.stackexchange.com/questions/6905/real-pe32-entry-point-is-it-documented-anywhere",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Microsoft documentation gives\n  <a href=\"https://learn.microsoft.com/en-gb/windows/win32/api/winbase/nf-winbase-winmain\" rel=\"nofollow noreferrer\">\n   WinMain()\n  </a>\n  as the entry point for a Windows program, but unlike\n  <a href=\"https://learn.microsoft.com/en-gb/windows/win32/dlls/dllmain\" rel=\"nofollow noreferrer\">\n   DllMain()\n  </a>\n  it seems to be a pure fiction arranged by the compiler-provided startup code.\n </p>\n <p>\n  I've looked at the output of a few Win32 compilers (32-bit and 64-bit) and in all cases the information passed to\n  <code>\n   WinMain()\n  </code>\n  was synthesised by the startup code and not based on any parameters passed to the entry point by the Windows loader. Also, all the samples I analysed - and all the examples I remember seeing on the 'net - used\n  <code>\n   ExitProcess()\n  </code>\n  even though a simple return from the entry point seems to have exactly the same effect.\n </p>\n <p>\n  Does anyone know of any documentation - official or otherwise - regarding the game rules for PE32(+) entry points?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "4k",
    "tags": [
        "windows",
        "pe",
        "entry-point"
    ],
    "user": "DarthGizka",
    "time": "Nov 29, 2022 at 7:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Microsoft documentation gives\n   <a href=\"https://learn.microsoft.com/en-gb/windows/win32/api/winbase/nf-winbase-winmain\" rel=\"nofollow noreferrer\">\n    WinMain()\n   </a>\n   as the entry point for a\nWindows program\n  </p>\n </blockquote>\n <p>\n  No, Microsoft's documentation doesn't give WinMain() as\n  <em>\n   the\n  </em>\n  entry point for a Windows program.\n </p>\n <p>\n  From the WinMain() documentation to which you linked above (emphasis mine) - \"WinMain entry point [is] the\n  <strong>\n   user-provided entry point\n  </strong>\n  for a graphical Windows-based application... Depending on the programming framework,\n  <strong>\n   the call to the WinMain function can be preceded and followed by additional activities specific to that framework\n  </strong>\n  .\"\n </p>\n <p>\n  In other words, if you're building a native application, your compiler will likely build your executable file such that its framework initialization code is executed before your WinMain() function.\n </p>\n <blockquote>\n  <p>\n   Does anyone know of any documentation - official or otherwise -\nregarding the game rules for PE32(+) entry points?\n  </p>\n </blockquote>\n <p>\n  Yes, from the\n  <a href=\"https://learn.microsoft.com/en-gb/windows/win32/debug/pe-format\" rel=\"nofollow noreferrer\">\n   Microsoft PE and COFF Specification\n  </a>\n  , the\n  <code>\n   AddressOfEntryPoint\n  </code>\n  field in the PE header is defined as \"For program images, this is the starting address.\" It's this field that will typically point to the framework initialization code described above.\n </p>\n <p>\n  Note that despite\n  <code>\n   AddressOfEntryPoint\n  </code>\n  being the starting address of the program, the code at that address will be executed\n  <em>\n   after\n  </em>\n  TLS callback functions (also documented in the PE/COFF documentation) if they exist, and after statically loaded DLLs' DllMain() functions.\n </p>\n <blockquote>\n  <p>\n   parameters passed to the entry point by the Windows loader\n  </p>\n </blockquote>\n <p>\n  As explained\n  <a href=\"https://stackoverflow.com/a/6029691\">\n   here\n  </a>\n  by @igor-skochinsky, \"the registers at the entry point of PE file do not have defined values.\" However, as he points out,\n  <code>\n   EAX\n  </code>\n  often points to the\n  <code>\n   AddressOfEntryPoint\n  </code>\n  and\n  <code>\n   EBX\n  </code>\n  often points to the PEB.\n </p>\n <p>\n  You may want to refer to @Ange's\n  <a href=\"https://code.google.com/archive/p/corkami/wikis/InitialValues.wiki\" rel=\"nofollow noreferrer\">\n   Initial values\n  </a>\n  documentation to find other unofficial register values at entry point.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "sudhackar",
            "time": "Nov 29, 2022 at 7:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">Thanks for pointing out igorsk's post; if he says that there are no defined parameters then that is good enough for me, since he knows his stuff and his research is always very thorough. It seems that much of what we know about things going on under the hood (post-Pietrek/Schulman) we know only because of his excellent work... The reminder regarding TLS callbacks will be useful for people dealing with unknown packers and similar stuff.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What do you mean by real PE entry point?\n </p>\n <p>\n  I think you are confused with WinMain and AddressOfEntryPoint.\n </p>\n <p>\n  WinMain is not the AddressOfEntryPoint they are different things.\n </p>\n <p>\n  AddressOfEntryPoint\n </p>\n <blockquote>\n  <p>\n   Address of entry point, relative to image base, when executable file\nis loaded into memory. For program images, this is the starting\naddress. For device drivers, this is the address of the initialization\nfunction. An entry point is optional for DLLs. When none is present\nthis field should be 0.\n  </p>\n </blockquote>\n <p>\n  AddressOfEntryPoint has no parameters it is simply the starting address of the executable. (except on Windows Vista+ maybe, I have seen that the PEB address is passed as a parameter by kernel32.BaseThreadInitThunk)\n </p>\n <p>\n  You are right. A simple RET from entry point would be enough to exit the process. But I guess that way you have to keep the stack balanced.\n </p>\n <p>\n  Have a look at Microsoft Portable Executable and Common Object File Format\n </p>\n <p>\n  <a href=\"https://web.archive.org/web/20141013183154/http://download.microsoft.com/download/e/b/a/eba1050f-a31d-436b-9281-92cdfeae4b45/pecoff.doc\" rel=\"nofollow noreferrer\">\n   PE File Format\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "AJM",
            "time": "Nov 29, 2022 at 7:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">Clarification: for DllMain(), the user-visible contract realised by compiler startup code is <b>exactly</b> the same as that for the real DLL entry point that is called by Windows, which is what's documented under DllMain() on MSDN. For WinMain() that may have been the case in 16-bit Windows but in 32-bit/64-bit Windows it is definitely <b>not</b> the case. I'm interested in finding out what's really going on at the process entry point, whether there are any dependable (documented) invariants or not, and whether there are any contracts that the entry point code needs to adhere to.</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">My debugger tells me that EBX (32-bit) and RCX (64-bit) do indeed hold a pointer to the PEB while most other registers are equal to the entry point, on the system I'm currently playing with (Win 8.1 x64). But the only thing I can take away from that experiment is that the WinMain() contract does definitely not hold for the real entry point, at least not on this particular system. That's why I was trying to find out what we really now about the PE32 entry point...</span>",
                    "time": null
                }
            ]
        }
    ]
}