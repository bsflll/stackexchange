{
    "title": "Attaching GDB to a specific fork",
    "link": "https://reverseengineering.stackexchange.com/questions/2313/attaching-gdb-to-a-specific-fork",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer a Linux binary that makes several\n  <code>\n   fork()\n  </code>\n  calls. I am using GDB 7.5 on Ubuntu. What I am trying to do with GDB is attach to a certain\n  <code>\n   fork()\n  </code>\n  (say the second call). Is the only way to do this to set\n  <code>\n   follow-fork-mode\n  </code>\n  to\n  <code>\n   child\n  </code>\n  and catch all calls to\n  <code>\n   fork\n  </code>\n  and manually switch it each time?\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 2,
    "views": "3k",
    "tags": [
        "linux",
        "gdb",
        "multi-process"
    ],
    "user": "Compster",
    "time": "Jun 22, 2013 at 1:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can also use\n  <code>\n   set detach-on-fork off\n  </code>\n  , as said in the documentation:\n </p>\n <blockquote>\n  <p>\n   <code>\n    set detach-on-fork MODE\n   </code>\n   Tells gdb whether to detach one of the processes after a fork, or\n       retain debugger control over them both.\n  </p>\n </blockquote>\n <p>\n  The documentation says also this:\n </p>\n <blockquote>\n  <p>\n   If you choose to set\n   <code>\n    detach-on-fork\n   </code>\n   mode off, then GDB will retain\n  control of all forked processes (including nested forks).  You can list\n  the forked processes under the control of GDB by using the\n   <code>\n    info inferiors\n   </code>\n   command, and switch from one fork to another by using\n  the\n   <code>\n    inferior\n   </code>\n   command\n  </p>\n  <p>\n   To quit debugging one of the forked processes, you can either detach\n  from it by using the\n   <code>\n    detach inferiors\n   </code>\n   command (allowing it to run\n  independently), or kill it using the\n   <code>\n    kill inferiors\n   </code>\n   command.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "5",
            "user": "jvoisin",
            "time": "Jul 15, 2013 at 10:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What you describe is how I've typically approached this.  Setting a breakpoint on\n  <code>\n   fork\n  </code>\n  itself provides a nice spot to change this mode, if necessary.\n </p>\n <p>\n  Or, if the child threads / processes are \"stable\", you can switch to them after the fact with the\n  <a href=\"http://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html\" rel=\"nofollow\">\n   <code>\n    inferior\n   </code>\n   command\n  </a>\n  .\n </p>\n <p>\n  <a href=\"http://sourceware.org/gdb/onlinedocs/gdb/Forks.html\" rel=\"nofollow\">\n   http://sourceware.org/gdb/onlinedocs/gdb/Forks.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jonathon Reinhart",
            "time": "Jun 28, 2013 at 5:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}