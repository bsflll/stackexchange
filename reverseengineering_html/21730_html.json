{
    "title": "Bochs x86 16bit and IDA dissasembly",
    "link": "https://reverseengineering.stackexchange.com/questions/21730/bochs-x86-16bit-and-ida-dissasembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been trying a figure out how to get Bochs to run an x86 embeded firmware rom so I can disassemble while emulating. When I start the debug in ida bochs just says \"wrong segmentation\". Loading in the bin strait into IDA causes a lot of sement and register assumpsions that are wrong.\n </p>\n <p>\n  The issue is the first string of code pages in 512k of ram at 0x00 the sets sp. Then all segments are set to 0. From there it starts pointong to ds:offsets and calls but ida is not automatically joining the two and i have the manually write down the code pointed to and how the function interacts. After a few calls everything is so garbled i might as well be doing things on pen and paper.\n </p>\n <p>\n  Is there any tutorials on using IDA for embeded dissasembly? Can Bochs even run non-pc hardware embeded firmwares?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "964",
    "tags": [
        "ida"
    ],
    "user": "uMinded",
    "time": "Jul 21, 2019 at 16:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Default IDA setting for Bochs is “\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1331.shtml\" rel=\"nofollow noreferrer\">\n   IDB mode\n  </a>\n  ” for emulating independent code snippets (32-bit or 64-bit). For emulating 16-bit code you need to use\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1330.shtml\" rel=\"nofollow noreferrer\">\n   Disk Image mode\n  </a>\n  , even if you don’t really have a disk image. By default Bochs uses its own BIOS ROM, but by making a custom\n  <a href=\"https://www.systutorials.com/docs/linux/man/5-bochsrc/\" rel=\"nofollow noreferrer\">\n   .bochsrc file\n  </a>\n  with a\n  <code>\n   romimage\n  </code>\n  statement pointing to your ROM you can force it to emulate that one instead. Just specify that file in Debugger -> Process Options -> Application and enable “Stop on debugging start” in Debugging options so that you can start debugging from the reset vector. \nOne possible problem is that Bochs only maps 128K of the ROM (segments E000 and F000). The segment C000 is used to map the Video BIOS OPTION ROM. So what you can do is to cut out the area corresponding to that region and map it via the\n  <code>\n   vgaromimage\n  </code>\n  statement. Possibly you can also map the rest of the file by using the\n  <code>\n   optromimage1\n  </code>\n  statement and a matching address.\n </p>\n <p>\n  Note that in general the Bochs emulated machine only works well with its own BIOS and you will likely run into all kinds of issues when using it with another ROM. QEMU or MAME with a customized machine definition could be another option, and QEMU can be connected to IDA via the built in GDB stub.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 22, 2019 at 20:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA needs to be aware of the binary format to accurately map things. Try and collect more information about the binary ( 16/32/64 bit, OS of device, file-format, alignment requirements , etc). You may have to rebase a few things and then have IDA re-analyze.\n </p>\n <p>\n  I haven't used Bochs, does it emulate user-mode binaries for different platforms? Also, it is strange that an embedded device is using x86. That doesn't occur often. Do you know that it is x86 for certain?\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "in70x",
            "time": "Jul 22, 2019 at 16:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are lots of embedded devices with x86. VIA used to clone Intel's architecture, got sued at some time and the CPUs produced landed on many embedded systems. They actually perform better at performance per watt.\n </p>\n <p>\n  About the disassemble of 16bit opcodes, I use to  manually follow from the first instruction at FFFF:FFF0 until it gets switched to protected mode in 32bit.\n </p>\n <p>\n  There will be a fixed offset between the memory map of the CPU and your dump address for this 16 bit instructions. I use to boot MS-DOS first and use the debug tool to find this offset.\nFor example: if i find a jump from FFFF:FFF0 to F000:5000 in memory map, i manually search the 10 bytes or more around F000:5000 in the firmware dump. (with a hex editor in a windows machine) Then i find this bytes at 35000, now i know that a jump in memory at F000:1234 will be at 31234 in the dump, and from now on i can trace the code in IDA 16bit disassembled code... \"Undefine\" the address and press \"C\", folow the next jump and calculate the next address.\nAnd i copy-paste all snippets of code, from jmp to jmp one under the other in a text file. Finally my txt file will reveal the entire code..\nI know there is debugging, but it never works till the end.. IDA stops from single stepping and it lets the emulator run free.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Puțureanu Ștefan",
            "time": "May 25, 2024 at 21:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}