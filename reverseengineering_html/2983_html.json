{
    "title": "How to predict address space layout differences between real and gdb-controlled executions?",
    "link": "https://reverseengineering.stackexchange.com/questions/2983/how-to-predict-address-space-layout-differences-between-real-and-gdb-controlled",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's something that puzzle me for a long time. I can observe that there is a difference between the real execution of a program and the\n  <code>\n   gdb\n  </code>\n  -controlled one.\n </p>\n <p>\n  But, here is an example:\n </p>\n <ol>\n  <li>\n   <p>\n    First, here is the example code (we use an automatic variable to get the location of the stack):\n   </p>\n   <pre><code>#include <stdio.h>\n#include <stdlib.h>\n\nint main ()\n{\n  char c = 0;\n\n  printf (\"Stack address: %p\n\", &c);\n\n  return EXIT_SUCCESS;\n}\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Then, we disable the ASLR (we use the personality flags of the process and not the system-wide method through\n    <code>\n     /proc/sys/kernel/randomize_va_space\n    </code>\n    ):\n   </p>\n   <pre><code>$> setarch `uname -m` -R /bin/bash\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Then, get a run in the real memory environment:\n   </p>\n   <pre><code>Stack address: 0x7fffffffe1df\n</code></pre>\n  </li>\n  <li>\n   <p>\n    And, the same through\n    <code>\n     gdb\n    </code>\n    :\n   </p>\n   <pre><code> (gdb) r\n Starting program: ./gdb-against-reality\n Stack address: 0x7fffffffe17f\n [Inferior 1 (process 5374) exited normally]\n (gdb) \n</code></pre>\n  </li>\n </ol>\n <p>\n  So, here we have a difference of 96 bytes between the two runs. But, how can I predict this difference for a given program without having it running in the\n  <em>\n   real\n  </em>\n  memory layout (just by knowing the\n  <code>\n   gdb\n  </code>\n  memory layout) ?\n </p>\n <p>\n  And, also, from where/what is coming this difference ?\n </p>\n</div>\n</body></html>",
    "votes": "19",
    "answers": 2,
    "views": "15k",
    "tags": [
        "gdb",
        "memory"
    ],
    "user": "perror",
    "time": "Oct 30, 2013 at 11:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There could be other factors involved, but my guess would be that changes in the process environment variables, which are stored on the stack, are what's causing this issue.\n </p>\n <p>\n  Running a small\n  <a href=\"https://stackoverflow.com/questions/2085302/printing-all-environment-variables-in-c-c\">\n   program\n  </a>\n  that just prints out the environment variables reveals a couple variations in environment variables when run inside vs outside gdb on my system.\n </p>\n <pre><code>int main(int argc, char **argv, char** envp)\n{\n  char** env;\n  for (env = envp; *env != 0; env++)\n  {\n    char* thisEnv = *env;\n    printf(\"%s\n\", thisEnv);    \n  }\n}\n</code></pre>\n <p>\n  First, when running under gdb, there is a LINES variable that isn't present when the process is started outside of gdb:\n </p>\n <pre><code>LINES=83\n</code></pre>\n <p>\n  Secondly, the underscore environment variable is different. When running outside of gdb, it is set to the name of the executable:\n </p>\n <pre><code>_=./gdbtest\n</code></pre>\n <p>\n  But when started from inside gdb, it is set to the path of the gdb binary:\n </p>\n <pre><code>_=/usr/bin/gdb\n</code></pre>\n <p>\n  You can try to run the program normally, then attach to it with gdb/gdbserver, which should avoid these variations in environment variables (assuming that is in fact what is causing your problem).\n </p>\n <p>\n  If your process is short-lived, it can be hard to pause the process before it exits. Maybe someone else has some good suggestions on starting a process in a paused state; I usually use a second program like\n  <a href=\"https://code.google.com/p/botox/source/browse/trunk/src/botox.c\" rel=\"nofollow noreferrer\">\n   this one\n  </a>\n  to catch the process as it is starting and pause it so I can attach a debugger to it.\n </p>\n</div>\n</body></html>",
            "votes": "17",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">This answer on stackoverflow shows how to run gdb with a controlled environment <a href=\"https://stackoverflow.com/a/17775966\">stackoverflow.com/a/17775966</a>. You can simply use his script (remember to run <code>unset</code> commands inside <code>gdb</code>)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just to add to the answers, I can tell how to get close to a clean environment despite\n  <code>\n   gdb\n  </code>\n  . In fact, there are two methods to reach this:\n </p>\n <ol>\n  <li>\n   <p>\n    We can get rid of the extra environment variables added by\n    <code>\n     gdb\n    </code>\n    as follow:\n   </p>\n   <pre><code>(gdb) unset environment LINES\n(gdb) unset environment COLUMNS\n</code></pre>\n   <p>\n    Write these commands before running the program, and you should be close to the normal environment. Note that you still have to take care of the\n    <code>\n     _\n    </code>\n    variable.\n   </p>\n  </li>\n  <li>\n   <p>\n    One can also generate a memory core of the vulnerable program and analyze it with\n    <code>\n     gdb\n    </code>\n    :\n   </p>\n   <pre><code>$> gdb vuln_program core\n</code></pre>\n   <p>\n    You should just look at the memory and never\n    <code>\n     run\n    </code>\n    ,\n    <code>\n     next\n    </code>\n    ,\n    <code>\n     step\n    </code>\n    , ... because doing so will force you to restart the program with a fresh memory (with the shift).\n   </p>\n  </li>\n </ol>\n <p>\n  That was two methods you can use with\n  <code>\n   gdb\n  </code>\n  to follow a program without too much differences with the real execution. But, they are many others!\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "perror",
            "time": "Aug 10, 2017 at 9:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}