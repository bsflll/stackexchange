{
    "title": "C# Hidden Method through transparent proxy object?",
    "link": "https://reverseengineering.stackexchange.com/questions/19580/c-hidden-method-through-transparent-proxy-object",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm dealing with an interesting form of obfuscation. A C# program I am reversing has a central API, let's call it \"Central API\". This Central API has several functions that aren't exactly defined.\n </p>\n <p>\n  For example, all functions in this Central API class go something like this:\n </p>\n <pre><code>    public string SomeFunction(string name)\n    {\n        IServiceInterface interface = base.\\u0001();\n        try\n        {\n            if (interface != null)\n            {\n                return interface.SomeFunction(name);\n            }\n        }\n        catch (Exception ex)\n        {\n            ...\n        }\n        finally\n        {\n            ServiceInterface.Close(interface);\n        }\n        return string.Empty;\n    }\n</code></pre>\n <p>\n  <code>\n   base.\\u0001\n  </code>\n  does this:\n </p>\n <pre><code>    internal IServiceInterface \\u0001()\n    {\n        IServiceInterface result = null;\n        try\n        {\n            result = this.ChannelFactoryClient.CreateChannel();\n        }\n        catch (Exception ex)\n        {\n            ...\n        }\n        return result;\n    }\n</code></pre>\n <p>\n  <code>\n   base.\\u0001()\n  </code>\n  returns an object with the type\n  <code>\n   \"System.Runtime.Remoting.Proxies.__TransparentProxy\"\n  </code>\n  (found while debugging), but  when I viewed the value while debugging, there was no member function\n  <code>\n   \"SomeFunction\"\n  </code>\n  or any other functions. The object includes various information, but nothing that seems to hint to the true location of \"SomeFunction\".\n </p>\n <p>\n  Does anyone know the next steps I should take to find\n  <code>\n   \"SomeFunction\"\n  </code>\n  's true location (maybe what to look for in the object)? For reference, some modules of this project were obfuscated with SmartAssembly, and even after de4dot \"successfully\" cleaned them, nothing changed.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "800",
    "tags": [
        "obfuscation",
        ".net",
        "c#"
    ],
    "user": "Rob Gates",
    "time": "Oct 10, 2018 at 3:59",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n as far as I remember\n <code>\n  ChannelFactoryClient\n </code>\n was used with WCF communication to send/receive requests to i.e. web services. Does this program communicate with an external service? Maybe the code you are looking for is there? Can you share the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rob Gates",
            "text": "<html><body><span class=\"comment-copy\">\n Hi @PawełŁukasik , upon looking further into the object, I see a uri that accesses a net.pipe//. Could it be that the actual code is running in a different process? Thanks.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n Yup. Might be the case\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rob Gates",
            "text": "<html><body><span class=\"comment-copy\">\n @PawełŁukasik Hmm, checking out the process in Process Hacker 2 shows no handles to named pipes with the same name (or other file handles too). Any tips on how to track down the second process and find the handler there?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n it could be in the same process too. As for the tracking down the code - not really sure if there's one way. Just analyzing the binary and slowly building the knowledge about it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}