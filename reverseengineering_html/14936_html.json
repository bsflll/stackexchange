{
    "title": "How can I change the values in esp?",
    "link": "https://reverseengineering.stackexchange.com/questions/14936/how-can-i-change-the-values-in-esp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>   0x08048785 <+344>:   movl   $0x0,0xc(%esp)\n   0x0804878d <+352>:   movl   $0x804896c,0x8(%esp)\n   0x08048795 <+360>:   movl   $0x8048973,0x4(%esp)\n   0x0804879d <+368>:   movl   $0x8048973,(%esp)\n=> 0x080487a4 <+375>:   call   0x8048470 <execlp@plt>\n</code></pre>\n <p>\n  I am wondering is it possible to alter the argument that is going to the function execlp() in order to execute a shell? and if it is possible how can I change those values like 0x8(%esp)?\n </p>\n <p>\n  Thanks a lot.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "968",
    "tags": [
        "disassembly",
        "debugging",
        "binary-analysis",
        "gdb"
    ],
    "user": "mylifeisdark",
    "time": "Mar 18, 2017 at 5:30",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n It's not quite clear if you're interested in manually changing that assembly code by patching or are you're asking about exploitation.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   I am wondering is it possible to alter the argument that is going to the function execlp() in order to execute a shell?\n  </p>\n </blockquote>\n <p>\n  Yes, this is possible. The strings located at the memory addresses written to the stack prior to calling\n  <code>\n   execlp\n  </code>\n  can be patched such that\n  <code>\n   /bin/sh\n  </code>\n  is executed instead. If there is not enough space for the pathname of the program to execute and/or its arguments between the current memory references, the memory addresses being written to the stack will have to be patched as well to reflect the lengths of the new strings they reference.\n </p>\n <p>\n  The memory addresses being written to the stack prior to calling\n  <code>\n   execlp\n  </code>\n  are pointers to strings in the\n  <code>\n   .rodata\n  </code>\n  section of the binary, where  the string pointed to by the first argument (\n  <code>\n   0x8048973\n  </code>\n  in the snippet of disassembled code above) is the pathname of the program to execute (we can think of\n  <code>\n   execlp\n  </code>\n  as \"exec\n  <em>\n   load path\n  </em>\n  \"). If this string is changed,\n  <code>\n   execlp\n  </code>\n  will load the program located at the new pathname.\n </p>\n <p>\n  For reference, here is the prototype for\n  <code>\n   execlp\n  </code>\n  and its description from the\n  <a href=\"http://man7.org/linux/man-pages/man3/exec.3.html\" rel=\"nofollow noreferrer\">\n   man page\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   <code>\n    int execlp(const char *file, const char *arg, ... /* (char  *) NULL */);\n   </code>\n  </p>\n  <p>\n   The\n   <code>\n    const char *arg\n   </code>\n   and subsequent ellipses in the execl(), execlp(), and execle() functions can be thought of as\n   <em>\n    arg0, arg1, ..., argn\n   </em>\n   . Together they describe a list of one or more pointers to null-terminated strings that represent the argument list available to the executed program.  The first argument, by convention, should point to the filename associated with the file being executed.  The list of arguments must be terminated by a null pointer, and, since these are variadic functions, this pointer must be cast\n   <code>\n    (char *) NULL\n   </code>\n   .\n  </p>\n </blockquote>\n <p>\n  Here is a good explanation of how\n  <code>\n   execlp\n  </code>\n  works:\n  <a href=\"https://stackoverflow.com/questions/21558937/i-do-not-understand-how-execlp-works-in-linux/21559499#21559499\">\n   I do not understand how execlp() works in Linux\n  </a>\n </p>\n <p>\n  Note also that since the ISA is x86 and the compiler is GCC, the arguments to a function are written to the stack in the reverse order of their corresponding parameters in the function prototype. This means that the last argument written to the stack corresponds to the first parameter in the function prototype. In the case of\n  <code>\n   execlp\n  </code>\n  , the last argument written to the stack prior to calling\n  <code>\n   execlp\n  </code>\n  will be the pointer to the pathname of the program to load.\n </p>\n <blockquote>\n  <p>\n   and if it is possible how can I change those values like 0x8(%esp)?\n  </p>\n </blockquote>\n <p>\n  Patching strings in the\n  <code>\n   .rodata\n  </code>\n  section and patching instructions and memory addresses in the\n  <code>\n   .text\n  </code>\n  section can be accomplished using a hex editor like\n  <a href=\"http://www.linuxjournal.com/content/doing-reverse-hex-dump\" rel=\"nofollow noreferrer\">\n   <code>\n    xxd\n   </code>\n  </a>\n  or\n  <a href=\"https://www.pacificsimplicity.ca/blog/modifying-linux-elf-binaries-changing-callq-addresses\" rel=\"nofollow noreferrer\">\n   <code>\n    hexedit\n   </code>\n  </a>\n  , or by using\n  <a href=\"https://monosource.gitbooks.io/radare2-explorations/content/tut1/tut1_-_simple_patch.html\" rel=\"nofollow noreferrer\">\n   radare2\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Resources\n  </strong>\n </p>\n <p>\n  For using GDB to patch the binary, see these:\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/8200/using-gdb-to-modify-an-executable\">\n   Using GDB to modify an executable\n  </a>\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/26173850/use-gdb-to-modify-binary\">\n   Use gdb to Modify Binary\n  </a>\n </p>\n <p>\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Patching.html\" rel=\"nofollow noreferrer\">\n   Debugging with GDB: Patching\n  </a>\n </p>\n <p>\n  ELF binary modification:\n </p>\n <p>\n  <a href=\"http://www.blackhat.com/presentations/bh-usa-02/clowes/bh-us-02-clowes-binaries.ppt\" rel=\"nofollow noreferrer\">\n   Fixing/Making Holes in ELF Binaries/Programs - Black Hat\n  </a>\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/185/how-do-i-add-functionality-to-an-existing-binary-executable\">\n   How do I add functionality to an existing binary executable?\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/thorkill/eresi/wiki/TheELFsh\" rel=\"nofollow noreferrer\">\n   The ELF shell\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}