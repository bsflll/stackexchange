{
    "title": "Extracted router file execution",
    "link": "https://reverseengineering.stackexchange.com/questions/19469/extracted-router-file-execution",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to run an executable file that I dug out from an extracted file system of a DSL modem router. So first of all I needed to either have a MIPS Linux box or take the emulation path. After some research and effort I got QEMU running a Debian MIPS system with network access and USB support to copy the file in the emulated file system:\n </p>\n <pre><code>qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append \"root=/dev/sda1 console=tty0\" -net nic -net tap -usb -device usb-host,hostbus=1,hostaddr=8\n</code></pre>\n <p>\n  So I copied the file, changed the\n  <code>\n   rwx\n  </code>\n  attributes and tried to execute it, but without success\n </p>\n <pre><code>root@debian-mips:~/myfiles/# ./generator\n-bash: ./generator: No such file or directory\n</code></pre>\n <p>\n  The file actually exists if I list the contents of the directory.\nAfter that I did notice some missing libraries :\n </p>\n <pre><code>root@debian-mips:~/myfiles# ldd generator\n    libcrypto.so.0.9.8 => /usr/lib/libcrypto.so.0.9.8 (0x2aaad000)\n    libc.so.0 => not found\n    libd1.so.2 => /lib/libd1.so.2 (0x2ac2d000)\n    libz.so.1 => /usr/lib/libz.so.1 (0x2ac41000)\n    libc.so.6 => /lib/libc.so.6 (0x2ac67000)\n    /lib/ld-uClibc.so.0 => /lib/ld.so.1 (0x55550000)\n</code></pre>\n <p>\n  So I copied the missing\n  <code>\n   libc.so.0\n  </code>\n  from the extracted router firmware files:\n </p>\n <p>\n  <code>\n   cp libc.so.0 /usr/lib\n  </code>\n </p>\n <p>\n  Then there was another missing file:\n </p>\n <pre><code>root@debian-mips:~/myfiles# ldd generator\n    libcrypto.so.0.9.8 => /usr/lib/libcrypto.so.0.9.8 (0x2aaad000)\n    libc.so.0 => /usr/lib/libc.so.0 (0x2ac2d00)\n    libd1.so.2 => /lib/libd1.so.2 (0x2ac8f000)\n    libz.so.1 => /usr/lib/libz.so.1 (0x2aca3000)\n    libc.so.6 => /lib/libc.so.6 (0x2acc9000)\n    /lib/ld-uClibc.so.0 => /lib/ld.so.1 (0x55550000)\n    ld-uClibc.so.0 => not found\n</code></pre>\n <p>\n  Copied it again from the router extracted firmware:\n </p>\n <p>\n  <code>\n   cp ld-uClibc.so.0 /usr/lib\n  </code>\n </p>\n <p>\n  Everything seemed OK at this point:\n </p>\n <pre><code>root@debian-mips:~/myfiles# ldd generator\n    libcrypto.so.0.9.8 => /usr/lib/libcrypto.so.0.9.8 (0x2aaad000)\n    libc.so.0 => /usr/lib/libc.so.0 (0x2ac2d00)\n    libd1.so.2 => /lib/libd1.so.2 (0x2ac8f000)\n    libz.so.1 => /usr/lib/libz.so.1 (0x2aca3000)\n    libc.so.6 => /lib/libc.so.6 (0x2acc9000)\n    ld-uClibc.so.0 => /usr/lib/ld-uClibc,so,0 (0x2ae4b000)\n    /lib/ld-uClibc.so.0 => /lib/ld.so.1 (0x55550000)\n</code></pre>\n <p>\n  However, I am still unable to execute the file.\nSome additional info about it:\n </p>\n <pre><code>root@debian-mips:~/myfiles# file generator\ngenerator: ELF 32-bit MSB executable, MIPS, MIPS32 version 1 (SYSV), dynamically linked (uses shared libs), stripped\n</code></pre>\n <p>\n  I did mess around a bit more with the library files deleting those i copied and tried something like this :\n </p>\n <pre><code>ln -s /lib/libc.so.6 /lib/libc.so.0\n\nroot@debian-mips:~/myfiles# ldd generator\n    libcrypto.so.0.9.8 => /usr/lib/libcrypto.so.0.9.8 (0x2aaad000)\n    libc.so.0 => /lib/libc.so.0 (0x2ac2d000)\n    libd1.so.2 => /lib/libd1.so.2 (0x2adaf000)\n    libz.so.1 => /usr/lib/libz.so.1 (0x2adc3000)\n    /lib/ld-uClibc.so.0 => /lib/ld.so.1 (0x55550000)\n</code></pre>\n <p>\n  Still the same disappointing \"no such file or directory message\"...\nAny kind of help would be appreciated cause it feels like a dead end after all this...\n </p>\n <hr/>\n <p>\n  @ SYS_V It appear that the Debian Mips distro didnt have strace and apt-get install was failing. I had to manually find it and dpkg it so after all that gives :\n </p>\n <pre><code>[11036.872000] ------------[ cut here ]------------\n\n[11036.884000] WARNING: at /build/linux-2.6-KrPu_f/linux-2.6-2.6.32/debian/build/source_mips_none/kernel/sched.c:2628 wake_up_process+0x48/0x50()\n\n[11036.904000] Modules linked in: ipv6 loop mtdchar uhci_hcd ehci_hcd cfi_cmdset_0001 cfi_probe gen_probe cfi_util sg physmap mtd psmouse i2c_piix4 usbcore se_mood chipreg serio_raw evdev map_funcs nls_base cdrom i2c_core\n\n[11037.180000] Call Trace:\n\n[11037.196000] [<8010bb24>] dump_stack+0x8/0x34\n\n[11037.208000] [<80138a10>] warn_slowpath_common+0x70/0xb0\n\n[11037.216000] [<8013534c>] wake_up_process+0x48/0x50\n\n[11037.232000] [<801116ac>] arch_ptrace+0x214/0x770\n\n[11037.244000] [<801457e8>] sys_ptrace+0x9c/0x260\n\n[11037.256000] [<80102210>] stack_done+0x20/0x3c\n\n[11037.268000]\n\n[11037.280000] ---[ end trace a7daf16cd1f695f3 ]---\n\n[11823.624000] CE: MIPS Increasing min_delta_ns to 51830 nsec\n\n[11823.624000] CE: MIPS Increasing min_delta_ns to 77744 nsec\n</code></pre>\n <p>\n  and prompts right there infinitely and needs ctrl+c to return to linux prompt.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 3,
    "views": "1k",
    "tags": [
        "linux",
        "embedded",
        "mips",
        "qemu"
    ],
    "user": "Cyrax",
    "time": "Oct 1, 2018 at 23:55",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n can you show us the the output of\n <code>\n  strace ./generator\n </code>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user464014",
            "text": "<html><body><span class=\"comment-copy\">\n Make sure all dependencies for .sos are resolved recursively\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Hyeonseo Yang",
            "text": "<html><body><span class=\"comment-copy\">\n How did you dug it out?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As far as I understand, you need to execute just one MIPS binary.\nThere is an easy route and a hard (relatively) route.\n </p>\n <p>\n  <strong>\n   Easy route:\n  </strong>\n </p>\n <p>\n  For executing just one MIPS binary, you might get away with Qemu Usermode emulation.\n </p>\n <p>\n  I've written a\n  <a href=\"https://secnigma.wordpress.com/a-beginners-guide-into-router-hacking-and-firmware-emulation/\" rel=\"nofollow noreferrer\">\n   blog post\n  </a>\n  about this in detail.\n </p>\n <p>\n  Zerodayinitiative also have a great\n  <a href=\"https://www.zerodayinitiative.com/blog/2020/5/27/mindshare-how-to-just-emulate-it-with-qemu\" rel=\"nofollow noreferrer\">\n   blog post\n  </a>\n  about this.\n </p>\n <p>\n  Since you are dealing with a binary compiled for MSB (Big Endian) systems, you need to extract the router's compressed filesytem from the firmware,then chroot into the extacted file system and run\n  <code>\n   qemu-mips-static\n  </code>\n  from inside the file system.\n </p>\n <p>\n  <em>\n   This toolset can be installed using\n   <code>\n    sudo apt install qemu-user-static\n   </code>\n   in Debian based systems.\n  </em>\n </p>\n <p>\n  For instance, if the\n  <code>\n   generator\n  </code>\n  MIPS binary you want to run was statically compiled, then you can execute the binary using the following comamnds, without fully emulating the firmware.\n </p>\n <pre><code>cd filesystem/\ncp $(which qemu-mips-static) .\nsudo chroot . ./qemu-mips-static bin/ls\n</code></pre>\n <p>\n  Now, since your binary is a dynamically linked binary, we can specify the path to the missing library file using the\n  <code>\n   LD_PRELOAD\n  </code>\n  or\n  <code>\n   LD_LIBRARY_PATH\n  </code>\n  environment variable to\n  <code>\n   qemu-user-static\n  </code>\n  .\n </p>\n <p>\n  Eg:\n </p>\n <pre><code>sudo chroot . ./qemu-mips-static -E LD_LIBRARY_PATH=\"/lib/\" bin/ls\n</code></pre>\n <p>\n  If the\n  <code>\n   generator\n  </code>\n  binary doesn't require any network traffic or some weird state for the router to work correctly, then passing the\n  <code>\n   LD_PRELOAD\n  </code>\n  or\n  <code>\n   LD_LIBRARY_PATH\n  </code>\n  environment variables might just solve your issue.\n </p>\n <p>\n  However, if the binary requires some specific state, that can only be acheived through full system emulation, then you have to go the harder route.\n </p>\n <p>\n  <strong>\n   Hard route:\n  </strong>\n </p>\n <p>\n  I'm going to be honest with you.\n </p>\n <p>\n  I've tried emulating firmwares using QEMU and from my personal experience, it was very hard.\nSo, for easier emulation experience, we have to rely on tools like\n  <a href=\"https://github.com/attify/firmware-analysis-toolkit\" rel=\"nofollow noreferrer\">\n   Firmware Analysis Toolkit\n  </a>\n  and\n  <a href=\"https://github.com/firmadyne/firmadyne\" rel=\"nofollow noreferrer\">\n   Firmadyne\n  </a>\n  .\n </p>\n <p>\n  This topic was also covered in detail on my\n  <a href=\"https://secnigma.wordpress.com/a-beginners-guide-into-router-hacking-and-firmware-emulation/\" rel=\"nofollow noreferrer\">\n   blog post\n  </a>\n  . Read that if you want an elaborate explanation and some basic troubleshooting tips.\n </p>\n <p>\n  Firmware Analysis Toolkit is the easiest to work with and it is an automator script for Firmadyne.\nEither clone FAT from the\n  <a href=\"https://github.com/attify/firmware-analysis-toolkit\" rel=\"nofollow noreferrer\">\n   github repo\n  </a>\n  , or you can just download\n  <a href=\"https://drive.google.com/drive/folders/1C5BKrpoCtxqZODbF0A-tt0UNjx-UmKt3\" rel=\"nofollow noreferrer\">\n   AttifyOSâ€˜s Virtual machine file\n  </a>\n  for a pre-configured environment.\n </p>\n <p>\n  Once FAT has been installed, copy the firmware file into FATâ€™s directory. We just need to edit the\n  <code>\n   fat.config\n  </code>\n  file and enter the sudo password in it.\n </p>\n <p>\n  Running FAT is a\n  <strong>\n   ONE-TIME PROCESS\n  </strong>\n  and once the initial extraction and emulation is succesful, we can run further emulations from Firmadyneâ€™s folder.\n </p>\n <p>\n  Now run the python script named\n  <code>\n   fat.py\n  </code>\n  and pass the firmwareâ€™s name to it.\nEg:\n </p>\n <pre><code>./fat.py firmware.tar\n</code></pre>\n <p>\n  If everything went right, then you will see a login console to the emulated router!\n  <a href=\"https://i.sstatic.net/laYPO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/laYPO.png\"/>\n  </a>\n </p>\n <p>\n  Login to the router with the console or access the emulated router's web interface by the IP address shown by FAT.\n </p>\n <p>\n  For the subsequent executions, run\n  <code>\n   firmadyne/scratch/<image-id>/run.sh\n  </code>\n  script; where the\n  <code>\n   image-id\n  </code>\n  is the number shown, when running FAT for the first time.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "secnigma",
            "time": "Feb 9, 2022 at 17:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try to compare your firmware binary and any \"malta\" binary using\n  <code>\n   readelf\n  </code>\n  to find differences.\n </p>\n <p>\n  Example:\n </p>\n <pre><code>$ readelf -a gdb | more\nELF Header:\n  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, big endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           MIPS R3000\n  Version:                           0x1\n  Entry point address:               0x431fd0\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          4016720 (bytes into file)\n  Flags:                             0x5, noreorder, cpic, mips1\n...\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "julian",
            "time": "Sep 26, 2018 at 22:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Matyuh",
                    "text": "<span class=\"comment-copy\">I have enough reputation to comment myself only :)  @Cyrax:  vmlinux-2.6.32-5-4kc-malta is quite specific ELF-file. I meant compare your extracted file (generator) with any regular file (/bin/bash) from your debian-mips environment.  Pay attention to string <b>\"Requesting program interpreter\"</b> in <b>\"Program Headers\"</b> section for both files.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A simpler way, since you have the firmware image, is to\n  <code>\n   chroot\n  </code>\n  into the device's root file system (e.g.\n  <code>\n   # chroot path/to/firmware /bin/sh\n  </code>\n  ). This will alleviate any dynamic loading issues that may be tedious to fix.\n </p>\n <p>\n  The only requirement is that you have the qemu binary installed for the correct architecture.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "multithr3at3d",
            "time": "May 16, 2020 at 17:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}