{
    "title": "Is it possible to completely reverse this code?",
    "link": "https://reverseengineering.stackexchange.com/questions/22956/is-it-possible-to-completely-reverse-this-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i have this code i'm trying to deobfuscate\n  <a href=\"https://pastebin.com/g5mHpWE4\" rel=\"nofollow noreferrer\">\n   https://pastebin.com/g5mHpWE4\n  </a>\n </p>\n <p>\n  I used\n  <a href=\"https://beautifier.io/\" rel=\"nofollow noreferrer\">\n   https://beautifier.io/\n  </a>\n  and\n  <a href=\"http://www.jsnice.org/\" rel=\"nofollow noreferrer\">\n   http://www.jsnice.org/\n  </a>\n </p>\n <p>\n  but the result is still not good, current code:\n  <a href=\"https://pastebin.com/whfqanxx\" rel=\"nofollow noreferrer\">\n   https://pastebin.com/whfqanxx\n  </a>\n </p>\n <p>\n  much remains coded\nexample:\n  <code>\n   window [$ (\" 0x128 \")] [$ (\" 0x11 \")] [$ (\" 0x7 \")]\n  </code>\n </p>\n <p>\n  Is it possible to leave this code 100% clean?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "309",
    "tags": [
        "obfuscation",
        "deobfuscation",
        "javascript"
    ],
    "user": "Bruno Andrade",
    "time": "Jan 9, 2020 at 14:39",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n do you really need to make it clean or your goal is to understand the code?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Bruno Andrade",
            "text": "<html><body><span class=\"comment-copy\">\n My goal is to understand the code but with it obfuscated I can not.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n yes, I agree but to understand the code you don't need 100% cleanness.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Having such code the first thing to do is to analyze what part is the obfuscation algorithm and what's the actual code. Here' it's not that difficult as all the code is on top. So let's analyze it step by step:\n </p>\n <pre><code>var norm = [\"cookie\", \"toUTCString\",...\n</code></pre>\n <p>\n  defines an array with string that will be used in the application. Having them in an array and not in the code makes the code more difficult for human to understand but the machine will still managed to parse the code correctly.\n </p>\n <p>\n  So we have an array...\n </p>\n <p>\n  What's next? Following the array there's this function\n </p>\n <pre><code>(function(value, count) {\n var fn = function(selected_image) {\n   for (; --selected_image;) {\n     value[\"push\"](value[\"shift\"]());\n   }\n };\n fn(++count);\n})(norm, 144);\n</code></pre>\n <p>\n  What it does it creates a function that can shuffle an array and in the last line\n  <code>\n   (norm, 144)\n  </code>\n  it is being executed with our aforementioned array of strings and the constant value of\n  <code>\n   144\n  </code>\n  that will be used to count the number of rounds of the shuffling (\n  <code>\n   +1\n  </code>\n  ->\n  <code>\n   fn(++count)\n  </code>\n  ).\n </p>\n <p>\n  So after this we no longer know the order of string in our defined array\n  <code>\n   norm\n  </code>\n  . In order to know it we would have to execute those two instructions (\n  <strong>\n   it might be dangerous if you don't understand what your are doing\n  </strong>\n  ) or mimic similar behavior in another language and get the result. (\n  <code>\n   [\"object\", \"exports\", \"./IPv6\",...]\n  </code>\n  ).\n </p>\n <p>\n  So now comes the third part of the obfuscation - this function:\n </p>\n <pre><code>var $ = function(i, fn) {\n  i = i - 0;\n  var id = norm[i];\n  return id;\n};\n</code></pre>\n <p>\n  It simply defines a function named\n  <code>\n   $\n  </code>\n  that, when passed an argument\n  <code>\n   i\n  </code>\n  returns the string from our shuffled array\n  <code>\n   norm\n  </code>\n  .\n </p>\n <p>\n  Now comes the actual code part. Whenever you see code like this\n  <code>\n   $(\"0x1b1\")\n  </code>\n  you would have to replace it by running (or simulating) the call to function\n  <code>\n   $\n  </code>\n  with the argument and get the result. In this case it would be for\n  <code>\n   0x1b1 = \"hxxps://www.bitonclick.com/jump/next.php?r=1967903\"\n  </code>\n  (without xx - a proper address) and for example for\n  <code>\n   $(\"0x114\") = \"FuckAdBlock\"\n  </code>\n  . And so on...\n </p>\n <p>\n  Doing this of all the calls you would get all of the code extracted, but going over this manually can be mundane and error prone so it would be nice to have some kind of automated way of performing this activities.\n </p>\n <p>\n  Doing that (not even for the whole file) would allow to more easily understand the code but from parts of it, it looks like it might be injecting some ads on the page (it might not be the only purpose of it) - as one can see in the strings \"Ad\", \"FuckAdBlock\" and some\n  <code>\n   iframes\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Jan 13, 2020 at 7:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Bruno Andrade",
                    "text": "<span class=\"comment-copy\">Thank you so much this gave me a great insight into how everything works.</span>",
                    "time": null
                }
            ]
        }
    ]
}