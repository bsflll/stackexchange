{
    "title": "What means sym prefix before functions name in radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/14207/what-means-sym-prefix-before-functions-name-in-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What means sym prefix in disassembly? For examle,\n  <code>\n   sym.main\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "radare2"
    ],
    "user": "Alex T",
    "time": "Dec 20, 2016 at 22:45",
    "comments": [
        {
            "user": "yaspr",
            "text": "<html><body><span class=\"comment-copy\">\n RTFM ! wx 90 @@ sym.*  Writes a nop on every symbol (\n <a href=\"https://github.com/pwntester/cheatsheets/blob/master/radare2.md\" rel=\"nofollow noreferrer\">\n  github.com/pwntester/cheatsheets/blob/master/radare2.md\n </a>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alex T",
            "text": "<html><body><span class=\"comment-copy\">\n Ok, wx 90 @@ sym.* writes a nop on every symbol. But what means sym? Acronym or what?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<html><body><span class=\"comment-copy\">\n Sym ==> symbol ! RTFM again.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  What means sym prefix\n </code>\n It means you need to understand file formats before you try to disassemble them.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As pointed out by users in comments\n  <code>\n   sym\n  </code>\n  stands for\n  <code>\n   symbol\n  </code>\n  .\n </p>\n <p>\n  From\n  <a href=\"https://en.wikipedia.org/wiki/Debug_symbol\" rel=\"nofollow noreferrer\">\n   Wikipedia:\n  </a>\n </p>\n <blockquote>\n  <p>\n   A debug symbol is information that expresses which\n  programming-language constructs generated a specific piece of machine\n  code in a given executable module. Sometimes the symbolic information\n  is compiled together with the module's binary file, or distributed in\n  a separate file, or simply discarded during the compilation and/or\n  linking. This information enables a person using a symbolic debugger\n  to gain additional information about the binary, such as the names of\n  variables and\n   <strong>\n    <em>\n     routines\n    </em>\n   </strong>\n   from the original source code. This information\n  can be extremely helpful while trying to investigate and fix a\n  crashing application or any other fault.\n  </p>\n </blockquote>\n <p>\n  As previously stated, a\n  <em>\n   symbol\n  </em>\n  may be used to referer to a specific address in the binary (i.e.\n  <code>\n   sym.main\n  </code>\n  =>\n  <code>\n   main function\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "shxdow",
            "time": "Dec 23, 2016 at 13:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here are symbol prefixes with examples, as output by the Radare2 command \"axj\" from C:\\Windows\\system32\\gdi32.dll:\n </p>\n <ul>\n  <li>\n   sym.imp.* : \"sym.imp.KERNEL32.dll_UnhandledExceptionFilter\"\n  </li>\n  <li>\n   sub.* : \"sub.KERNEL32.dll_RtlCaptureContext_614+410\" or \"sym.imp.ole32.dll_ReleaseStgMedium+56\" (Note the library name in upper- or lowercase)\n  </li>\n  <li>\n   fcn.* : \"fcn.18000587c+41\"\n  </li>\n  <li>\n   str.* : \"str.._AUIDropTarget+584\" or \"str.PyShellExt::GetArguments___failed_to_lock_CF_HDROP_hGlobal+124\" or \"str.memset\" (One or two dots)\n  </li>\n  <li>\n   section.* : \"section..data+16\"\n  </li>\n  <li>\n   switch.* : \"switch.0x180004860\"\n  </li>\n  <li>\n   case.* : \"case.default.0x180004820\"\n  </li>\n  <li>\n   resource.* : \"resource.1\"\n  </li>\n </ul>\n <p>\n  The only explanation I could find is:\n </p>\n <p>\n  <a href=\"https://monosource.gitbooks.io/radare2-explorations/content/intro/navigation.html\" rel=\"nofollow noreferrer\">\n   \"Flags generally have a prefix in their name, such as str., sym., sub., fcn.\"\n  </a>\n </p>\n <p>\n  <a href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\" rel=\"nofollow noreferrer\">\n   Those names are called ‘flags’. Flags can be grouped into ‘flag spaces’\n  </a>\n  .\n </p>\n <p>\n  As suggested, \"fs\" command displays:\n </p>\n <pre><code>[0x180005218]> fs\n0  247 * strings\n1    5 * symbols\n2    8 * sections\n3    0 * segments\n4   79 * relocs\n5   79 * imports\n6    2 * resources\n7  104 * functions\n</code></pre>\n <p>\n  More information about flags and flagspaces here:\n  <a href=\"https://radare.gitbooks.io/radare2book/content/basic_commands/flags.html\" rel=\"nofollow noreferrer\">\n   Radare2, basic commands, flags\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "remi.chateauneu",
            "time": "Jan 4, 2019 at 8:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}