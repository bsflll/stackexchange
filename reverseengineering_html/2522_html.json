{
    "title": "Binary instrumentation with Python",
    "link": "https://reverseengineering.stackexchange.com/questions/2522/binary-instrumentation-with-python",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm interested in performing (dynamic) binary instrumentation using Python to be able to analyze the binary by instructions during execution for\n </p>\n <ul>\n  <li>\n   <p>\n    Windows\n   </p>\n  </li>\n  <li>\n   <p>\n    Linux\n   </p>\n   <p>\n    Can someone suggest such tool/framework? Does it even exist or possible?\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis"
    ],
    "user": "PhoeniX",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Man ... that is going to be hella slow.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n I know, but currently I do not really care :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"https://code.google.com/p/processtap/\">\n   https://code.google.com/p/processtap/\n  </a>\n  -\n </p>\n <blockquote>\n  <p>\n   <strong>\n    ProcessTap\n   </strong>\n   is a dynamic tracing framework for analyzing closed\n  source-applications. ProcessTap is inspired by\n   <a href=\"http://opensolaris.org/os/community/dtrace/\">\n    DTrace\n   </a>\n   and\n   <a href=\"http://sourceware.org/systemtap/\">\n    SystemTap\n   </a>\n   ,\n  but it is specific for analyzing closed-source user-space\n  applications. ProcessTap leverages dynamic binary instrumentation to\n  intercept the events of interest (e.g., function calls, system call,\n  memory accesses, and conditional control transfers). Although the\n  current implementation relies on\n   <a href=\"http://www.pintool.org/\">\n    PinTool\n   </a>\n   , alternative back-ends for\n  instrumentation (e.g.,\n   <a href=\"http://www.valgrind.org/\">\n    Valgrind\n   </a>\n   ,\n   <a href=\"http://www.qemu.org/\">\n    Qemu\n   </a>\n   , or\n   <a href=\"http://code.google.com/p/dynamorio/\">\n    DynamoRIO\n   </a>\n   ) can be used. The\n  language used in ProcessTap for writing scripts to instrument\n  applications is\n   <a href=\"http://www.python.org/\">\n    Python\n   </a>\n   .\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Jul 22, 2013 at 22:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Despite being an afternoon hack,\n  <a href=\"https://github.com/pgoodman/Python-Binary-Instrumenter\" rel=\"nofollow\">\n   this static binary instrumenter\n  </a>\n  might get you part way there. However, consider these crucial limitations:\n </p>\n <ul>\n  <li>\n   It's not dynamic insofar as it runs at compile time, not at runtime.\n  </li>\n  <li>\n   It is also not comprehensive, in the sense that shared and dynamically loaded libraries will not be instrumented by this.\n  </li>\n  <li>\n   It provides no mechanisms for maintaining state, except by linking in your own code (exampled in the\n   <code>\n    gc\n   </code>\n   directory and\n   <code>\n    Makefile\n   </code>\n   ). There isn't a good way of connecting instrumentation to that code, except by perhaps declaring and using an\n   <code>\n    extern\n   </code>\n   symbol whose mangled name you know.\n  </li>\n </ul>\n <p>\n  BUT, it is in python ;-)\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Peter Goodman",
            "time": "Sep 9, 2013 at 20:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}