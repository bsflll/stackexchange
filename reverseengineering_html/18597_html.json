{
    "title": "What does a C++ identifier ending in $_## mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/18597/what-does-a-c-identifier-ending-in-mean",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In trying to understand a .so from an Android game made with Cocos2d-x, I've come across identifiers like the following (after demangling):\n </p>\n <p>\n  <code>\n   SceneActionMap::updateTalkMode(float)::$_37\n  </code>\n  <code>\n   SceneActionMap::onTouchEndedTalk(cocos2d::Touch*, cocos2d::Event*)::$_38\n  </code>\n </p>\n <p>\n  I'm still a little shaky on ELF & the C++ ABI, but these names are found in\n  <code>\n   .rodata\n  </code>\n  and are referred to by some kind of structure in\n  <code>\n   .data.rel.ro\n  </code>\n  that seems RTTI related.\n </p>\n <p>\n  What kind of entities are $_37 and $_38? Are these anonymous functions generated by the NDK, or are they some kind of metadata about other functions?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "125",
    "tags": [
        "c++",
        "android",
        "elf",
        "shared-object"
    ],
    "user": "Squ",
    "time": "Jun 26, 2018 at 1:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  its a lambda function,\nas example stack trace in google\n  <a href=\"https://github.com/Microsoft/vscode-cpptools/issues/2117\" rel=\"nofollow noreferrer\">\n   https://github.com/Microsoft/vscode-cpptools/issues/2117\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": null,
            "time": "Jun 26, 2018 at 6:59",
            "is_accepted": true,
            "comments": []
        }
    ]
}