{
    "title": "How to interpret binary instruction using the intel manual",
    "link": "https://reverseengineering.stackexchange.com/questions/22371/how-to-interpret-binary-instruction-using-the-intel-manual",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  OK. So I am really trying to figure out how to use the \"Intel 64 and IA-32 Architectures Software Developer's Manual\" for myself, since it seems like the authoritative source for x86(_64) machine code.\n </p>\n <p>\n  I am looking at a program in Ghidra (specifically, a dynamically linked .so file to the program I actually care about). File info for the .so file:\n </p>\n <pre><code>ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked\n</code></pre>\n <p>\n  I come to the following instruction in Ghidra:\n </p>\n <pre><code>ff 25 de ad be ef  --- deadbeef being a substitute for the real bytes.\n</code></pre>\n <p>\n  I have Ghidra set up so that I can right click on the instruction and go to the relevant page in the processor manual, which brings me to the JMP reference (p.590 in the version of the manual I have). Cool.\n </p>\n <p>\n  From looking through the options there, I find the\n  <code>\n   ff\n  </code>\n  opcode rows that correspond to the instruction I am looking at. Further, I know that my\n  <code>\n   ModR/M\n  </code>\n  byte is\n  <code>\n   25H\n  </code>\n  which corresponds to\n  <code>\n   MOD = 00B\n  </code>\n  ,\n  <code>\n   REG = 100B\n  </code>\n  and\n  <code>\n   R/M = 101B\n  </code>\n  so I know that this narrows it down to the\n  <code>\n   FF /4\n  </code>\n  rows in the\n  <code>\n   JMP\n  </code>\n  instruction description table. But how do I know if it is referring to\n  <code>\n   JMP r/m16\n  </code>\n  or\n  <code>\n   JMP r/m32\n  </code>\n  or\n  <code>\n   JMP r/m64\n  </code>\n  ? Also what is the difference between those three? And further, I know from looking at tables 2-1 through 2-3 (combined with how Ghidra interprets the instruction) that\n  <code>\n   de ad be ef\n  </code>\n  actually ends up being a disp32 that gets added to the index. But how would I have known which table to reference in tables 2-1 to 2-3, and how does that information correspond to choosing between\n  <code>\n   JMP r/m16\n  </code>\n  or\n  <code>\n   JMP r/m32\n  </code>\n  or\n  <code>\n   JMP r/m64\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "318",
    "tags": [
        "ghidra",
        "x86-64",
        "intel"
    ],
    "user": "pooley1994",
    "time": "Oct 22, 2019 at 22:37",
    "comments": [
        {
            "user": "smitelli",
            "text": "<html><body><span class=\"comment-copy\">\n The\n <code>\n  r\n </code>\n in\n <code>\n  r/m16\n </code>\n et al means\n <b>\n  r\n </b>\n egister.\n <code>\n  m16\n </code>\n /\n <code>\n  m32\n </code>\n /\n <code>\n  m64\n </code>\n means\n <b>\n  m\n </b>\n emory, either 16- 32- or 64-bit address width. If mod is 11,\n <code>\n  r/m\n </code>\n is interpreted as\n <code>\n  r\n </code>\n , otherwise\n <code>\n  m\n </code>\n . If the CPU were operating in 16-bit mode, only\n <code>\n  ff 25\n </code>\n would contribute to the instruction, resulting in\n <code>\n  jmp [di]\n </code>\n followed by four gibberish bytes. For differentiating 32/64, it depends on the operating mode -- it's probably going to be 64-bit based on your .so info and question tags.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @smitelli please post this in the answer box. comments should be used for clarifications, not for answers\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}