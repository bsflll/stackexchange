{
    "title": "Retrieve & dump type information from IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/32271/retrieve-dump-type-information-from-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to retrieve IDA Pro .idb database's each type info, such as:\n </p>\n <ul>\n  <li>\n   <em>\n    size and name of a structure;\n   </em>\n  </li>\n  <li>\n   <em>\n    each member variable type and name;\n   </em>\n  </li>\n  <li>\n   <em>\n    each member variable size and offset;\n   </em>\n  </li>\n </ul>\n <p>\n  And dump it to a .h file in a formatted manner. (\"Create C header file...\" just dumps without sizes and offsets and does not allow to pre-format it.) How to do this?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "292",
    "tags": [
        "ida",
        "c++",
        "idapython",
        "dumping",
        "script"
    ],
    "user": "void_17",
    "time": "Sep 8, 2023 at 6:06",
    "comments": [
        {
            "user": "mimak",
            "text": "<html><body><span class=\"comment-copy\">\n You can use\n <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_struct.html\" rel=\"nofollow noreferrer\">\n  ida_struct\n </a>\n API to retrieve the needed information via Python terminal/plugins\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's obviously doable (you already noted the\n  <code>\n   Create C header file\n  </code>\n  functionality), but if you want to customize the output, you'll have to code it yourself.\n </p>\n <p>\n  Here's what you'll need:\n </p>\n <ul>\n  <li>\n   <code>\n    ida_typeinf.first_named_type\n   </code>\n   and\n   <code>\n    ida_typeinf.next_named_type\n   </code>\n   to iterate through all of the type names in a TIL (i.e., the main TIL for an IDB).\n  </li>\n  <li>\n   To retrieve a\n   <code>\n    tinfo_t\n   </code>\n   type object from a type name, create\n   <code>\n    tif = ida_typeinf.tinfo_t()\n   </code>\n   , then do\n   <code>\n    tif.get_named_type(name)\n   </code>\n   with the name returned from the functions above.\n  </li>\n  <li>\n   Once you have the\n   <code>\n    tinfo_t tif\n   </code>\n   object, if\n   <code>\n    tif.is_struct()\n   </code>\n   returns\n   <code>\n    True\n   </code>\n   , you can get the structure details via the function\n   <code>\n    tif.get_udt_details\n   </code>\n   by passing it a new\n   <code>\n    ida_typeinf.udt_type_data_t\n   </code>\n   data structure.\n  </li>\n  <li>\n   <code>\n    ida_typeinf.udt_type_data_t\n   </code>\n   is a vector of\n   <code>\n    udt_member_t\n   </code>\n   objects (plus additional information, e.g. size and alignment). Each\n   <code>\n    udt_member_t\n   </code>\n   object describes one field in a\n   <code>\n    struct\n   </code>\n   or\n   <code>\n    union\n   </code>\n   . You can retrieve member names via the\n   <code>\n    .name\n   </code>\n   field, and each field's\n   <code>\n    tinfo_t\n   </code>\n   type via the\n   <code>\n    .type\n   </code>\n   field.\n  </li>\n </ul>\n <p>\n  That's all you need. However, if you've never worked with types programmatically before, you're going to find it tricky. It is already evident from the above that\n  <code>\n   tinfo_t\n  </code>\n  is a mutually recursive data structure, i.e., the\n  <code>\n   tinfo_t\n  </code>\n  for a structure contains other data structures (like\n  <code>\n   udt_type_data_t\n  </code>\n  ) that themselves contain\n  <code>\n   tinfo_t\n  </code>\n  objects to describe structure field types. Due to the mutual recursion in the data structures, functions involving\n  <code>\n   tinfo_t\n  </code>\n  objects are often mutually recursive.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Rolf Rolles",
            "time": "Sep 8, 2023 at 20:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "void_17",
                    "text": "<span class=\"comment-copy\">Thank you so much for such a detailed answer! I will try this</span>",
                    "time": null
                },
                {
                    "user": "KulaGGin",
                    "text": "<span class=\"comment-copy\">Very nice. Thanks for the explanation. It took me like 2 hours to find your answer and only then I managed to understand how I have to walk up the inheritance tree all the classes and also walk all the members of classes.</span>",
                    "time": null
                }
            ]
        }
    ]
}