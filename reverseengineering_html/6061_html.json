{
    "title": "What is the meaning of '!' in ldm arm assembler instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/6061/what-is-the-meaning-of-in-ldm-arm-assembler-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am quite new to ARM assembly, I already saw that the bang (\n  <code>\n   !\n  </code>\n  ) is used to really update a register after a computation in the addressing mode syntax, but I can't figure out what is the difference of semantics between (this output is from\n  <code>\n   objdump\n  </code>\n  so it uses\n  <code>\n   gas\n  </code>\n  syntax):\n </p>\n <pre><code>ldm r4!, {r0, r1, r2, r3}\n</code></pre>\n <p>\n  And:\n </p>\n <pre><code>ldm r4, {r0, r1, r2, r3}\n</code></pre>\n <p>\n  Any idea ?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "8k",
    "tags": [
        "assembly",
        "arm",
        "gas"
    ],
    "user": "perror",
    "time": "Aug 12, 2014 at 16:38",
    "comments": [
        {
            "user": "JamalS",
            "text": "<html><body><span class=\"comment-copy\">\n By the way, you can use Intel syntax with objdump, just specify\n <code>\n  objdump -M intel\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @JamalS: there's no Intel syntax for ARM\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @JamalS: You should have noticed that register list is not something common in x86 operands. :-)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JamalS",
            "text": "<html><body><span class=\"comment-copy\">\n @perror: Yes, I forgot x86 starts at r8 instead of r0 :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   !\n  </code>\n  denotes\n  <em>\n   writeback of the base register\n  </em>\n  .\n  <strong>\n   Base register\n  </strong>\n  is the register used to address the memory to be read or written - in your case it's\n  <code>\n   R4\n  </code>\n  .\n  <strong>\n   Writeback\n  </strong>\n  means that the base register will be updated with the delta equal to the size of transferred data.\n </p>\n <p>\n  So, the instruction\n </p>\n <pre><code>ldm r4!, {r0, r1, r2, r3}\n</code></pre>\n <p>\n  can be represented by the following pseudocode:\n </p>\n <pre><code>r0 = *(int)(r4) \nr1 = *(int)(r4+4) \nr2 = *(int)(r4+8) \nr3 = *(int)(r4+12) \nr4 = r4 + 16 // writeback (16 bytes transferred)\n</code></pre>\n <p>\n  In the variant without\n  <code>\n   !\n  </code>\n  the writeback doesn't happen so\n  <code>\n   R4\n  </code>\n  retains the original value.\n </p>\n <p>\n  In the\n  <code>\n   LDR\n  </code>\n  and\n  <code>\n   STR\n  </code>\n  instructions you may also encounter\n  <em>\n   pre-indexed\n  </em>\n  and\n  <em>\n   post-indexed\n  </em>\n  notation:\n </p>\n <pre><code>LDR R0, [R4, #4]  ; simple offset: R0 = *(int*)(R4+4); R4 unchanged\nLDR R0, [R4, #4]! ; pre-indexed:   R0 = *(int*)(R4+4); R4 = R4+4\nLDR R0, [R4], #4  ; post-indexed:  R0 = *(int*)(R4+0); R4 = R4+4\n</code></pre>\n <p>\n  For more information see the\n  <a href=\"http://www.keil.com/support/man/docs/armasm/\">\n   ARM Assembler Guide\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Aug 12, 2014 at 17:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}