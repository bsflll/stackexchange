{
    "title": "Can I search floats / doubles in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/8685/can-i-search-floats-doubles-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have two versions of the same binary, and I know that both are using a float (\n  <code>\n   127.0\n  </code>\n  ) which is stored in a variable like\n  <code>\n   ds:dbl_7F5A28\n  </code>\n  (offset from binary #1).\n </p>\n <p>\n  There's only one xref to that\n  <code>\n   dbl_\n  </code>\n  in both binaries, but I don't know how to find\n  <code>\n   127.0\n  </code>\n  in binary #2, so I can xref it and find the function that's using it.\n </p>\n <p>\n  So, is there a way to search for float / double values in IDA?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "rev",
    "time": "Apr 11, 2015 at 15:49",
    "comments": [
        {
            "user": "user1743",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure if this helps at all, but would it be easier to search for the instructions that manipulate floating point values?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<html><body><span class=\"comment-copy\">\n @blahfish I'm analyzing a game, and floating point values are (ab)used a lot, so that wouldn't help\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are some ways to do this.\n </p>\n <ol>\n  <li>\n   Text search. Just press Alt-T in the disassembly window and enter 127.0. This will probably not work if in your current idb version this value is not recognized as floating point number.\n  </li>\n  <li>\n   Binary search. Go to the binary where your known value resides, go to the address of this value and undefine it/see its byte contents any other way. You will see the binary representation on the same place. Search it as a binary on the second binary and you'll probably find desirable.\n  </li>\n </ol>\n <p>\n  Good luck\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Apr 12, 2015 at 5:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">The problem is that the binary is kinda big (200MB+), so text search is really, really slow and not effective. Binary search didn't work (searched for <code>0x42fe0000</code> -&gt; <code>127.0</code>)</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">what does it mean didn't work ? Gave too much alternatives or did not find anything ? Did you try binary search on first executable ?</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">Did not find anything, however, I just found the function by xref-ing other known functions, and it does use the number (as I supposed). Therefore, not a reliable way to search for floats.</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Does binary representation looks the same in both executables ?</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">It 'does': in one binary it's like <code>127.0</code>, in the other one it's in hexadecimal form. I can, of course, make both be <code>127.0</code> or <code>0x42fe0000 </code> by redefining the type, but if I need to find it first, there's no way I can do this.</span>",
                    "time": null
                }
            ]
        }
    ]
}