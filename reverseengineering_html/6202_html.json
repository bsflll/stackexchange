{
    "title": "What kind of obfuscate is this?",
    "link": "https://reverseengineering.stackexchange.com/questions/6202/what-kind-of-obfuscate-is-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to deobfuscate a .NET exe file, using\n  <a href=\"http://de4dot.com/\" rel=\"nofollow\">\n   de4dot\n  </a>\n  . I have many dll files, when I open the dll file with\n  <a href=\"http://www.red-gate.com/products/dotnet-development/reflector/\" rel=\"nofollow\">\n   .NET Reflector\n  </a>\n  , it appears like this:\n </p>\n <p>\n  <img alt=\"Step 1\" src=\"https://dl.dropboxusercontent.com/u/10907501/bc/1.PNG\"/>\n </p>\n <p>\n  And when I did the deobfuscation again with\n  <code>\n   de4dot\n  </code>\n  , some stuff are cleaned:\n </p>\n <p>\n  <img alt=\"Step 2\" src=\"https://dl.dropboxusercontent.com/u/10907501/bc/2.PNG\"/>\n </p>\n <p>\n  When I open that cleaned-dll, all the variables and class name look very strange, it's not related with the code inside that function.\n </p>\n <p>\n  <img alt=\"Step 3\" src=\"https://dl.dropboxusercontent.com/u/10907501/bc/3.PNG\"/>\n </p>\n <p>\n  Have you guys seen this before? How can I get the real name of functions and variables ? Did they use 2 times obfuscation ?\n </p>\n <p>\n  Link to download application files :\n  <a href=\"https://dl.dropboxusercontent.com/u/10907501/bc/UW.rar\" rel=\"nofollow\">\n   https://dl.dropboxusercontent.com/u/10907501/bc/UW.rar\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "deobfuscation",
        ".net"
    ],
    "user": "user8490",
    "time": "Jul 10, 2015 at 15:44",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<html><body><span class=\"comment-copy\">\n I doubt you could get the original name of the functions. I think the obfuscation technique used randomly switched the function names within the assembly, or used random function names from a list. If the prior happend, you could guess which function name belongs to a certain function, after observing what it does. I don't know which obfuscation software has this \"func name switching\" feature, but if you find out, maybe you can observe what it uses to decide  the switching and restore it manually.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n Find out how the RNG worked what seed used etc.. and you will be able to compile a list of RNG values which could aid in the reverse process, consider a set of values\n <code>\n  [0,1,2,3,4]\n </code>\n etc.. before they were randomized, to attempt to find their offsets. It's possible that in the RNG the value\n <code>\n  [3,4,0,1,2]\n </code>\n is really positions\n <code>\n  [4,5,1,2,3]\n </code>\n The more dedicated you are to figuring this out then you will actually figure it out.. because nothing is really lost, it's just computed/swapped :) You will need to find the string table then re-order it back and if it's correct everything will go back in place\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is definitely one of the naming schemes from Crypto Obfuscator.\n </p>\n <p>\n  <a href=\"http://www.ssware.com/cryptoobfuscator/features.htm\" rel=\"nofollow\">\n   As listed on their features page:\n  </a>\n </p>\n <blockquote>\n  <p>\n   <strong>\n    Fake Renaming Scheme\n   </strong>\n  </p>\n  <p>\n   Crypto Obfuscator also has a renaming mode which renames all classes, fields, methods, etc to fake but realistic names like Domain/Log/Stream/etc (for classes) or Open/Close/Clear/Delete/etc for methods and so on. This makes it extremely difficult to differentiate between symbols excluded from obfuscation and obfuscated symbols.\n  </p>\n </blockquote>\n <p>\n  Also, running de4dot through Command Prompt should display the detected obfuscator.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "svick",
            "time": "Oct 16, 2014 at 11:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "T.Todua",
                    "text": "<span class=\"comment-copy\">can you answer the case, where the obfuscator is not detected? <a href=\"https://reverseengineering.stackexchange.com/questions/20007/how-to-detect-obfuscator-de4dot-shows-detected-unknown-obfuscator\" title=\"how to detect obfuscator de4dot shows detected unknown obfuscator\">reverseengineering.stackexchange.com/questions/20007/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}