{
    "title": "Which JSON object compact binary serialization is this?",
    "link": "https://reverseengineering.stackexchange.com/questions/22723/which-json-object-compact-binary-serialization-is-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse engineer an unknown JSON binary serialization format found in a request-response pair between a mobile app, and a server.\n </p>\n <p>\n  Does anyone recognize this? I've attached the first 640B of 68 request and response pairs\n </p>\n <p>\n  Request data:\n  <a href=\"https://termbin.com/4atc\" rel=\"nofollow noreferrer\">\n   https://termbin.com/4atc\n  </a>\n </p>\n <p>\n  Response data:\n  <a href=\"https://termbin.com/04ib\" rel=\"nofollow noreferrer\">\n   https://termbin.com/04ib\n  </a>\n </p>\n <p>\n  Update:\nResponse data(ungz):\n  <a href=\"https://termbin.com/31va\" rel=\"nofollow noreferrer\">\n   https://termbin.com/31va\n  </a>\n </p>\n <p>\n  One full req:\n  <a href=\"https://termbin.com/5sa7\" rel=\"nofollow noreferrer\">\n   https://termbin.com/5sa7\n  </a>\n </p>\n <p>\n  One full resp:\n  <a href=\"https://termbin.com/m2wy\" rel=\"nofollow noreferrer\">\n   https://termbin.com/m2wy\n  </a>\n </p>\n <p>\n  Based on the embedded string, I thought the encoding was CBOR RFC7049 based on the Type, Length, Value encoding, 0x78 0x6b followed by 107 characters.\n </p>\n <pre><code>00000180: e807 4100 0878 6b4e 4641 4e44 524f 4944 312d 5052 562d 502d 4c33 2d53 414d 5355  ..A..xkNFANDROID1-PRV-P-L3-SAMSU\n000001a0: 534d 2d47 3933 3546 2d34 3434 352d 3030 3030 3030 3030 3030 3030 3030 3030 3030  SM-G935F-4445-000000000000000000\n000001c0: 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030 3030  00000000000000000000000000000000\n000001e0: 3030 3030 3030 3030 3030 3030 3030 305f 3531 0950 7673 c75e e626 663d b4f0 5e93  000000000000000_51.Pvs.^.&f=..^.\n</code></pre>\n <p>\n  According to RFC7049 Table 5, this is a UTF-8 string.\n </p>\n <pre><code>   +-----------------+-------------------------------------------------+\n   | Byte            | Structure/Semantics                             |\n   +-----------------+-------------------------------------------------+\n   | 0x78            | UTF-8 string (one-byte uint8_t for n, and then  |\n   |                 | n bytes follow)                                 |\n</code></pre>\n <p>\n  However, I am still unable to decode the entire message. Any pointers appreciated!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "156",
    "tags": [
        "binary-analysis",
        "encodings",
        "binary-format",
        "networking"
    ],
    "user": "Joe",
    "time": "Dec 12, 2019 at 18:20",
    "comments": [
        {
            "user": "pythonpython",
            "text": "<html><body><span class=\"comment-copy\">\n Are the responses all 640 Bytes or are they longer?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try to look at the Android application? Odds are they just use a lib so either it's directly visible in decompiled code or possibly a native binary which might give it away.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  1f 8b is gzip header magic so try decompressing it first, it may just be raw json\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 12, 2019 at 7:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">Thanks Igor for your response. That's correct, the resp was gzipped encoded. The responses now has the same header d9d9 as the requests. I've updated the description with the unzipped responses, and a full request/response pair.</span>",
                    "time": null
                }
            ]
        }
    ]
}