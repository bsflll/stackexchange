{
    "title": "Disassembly - First steps",
    "link": "https://reverseengineering.stackexchange.com/questions/23161/disassembly-first-steps",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I decided that I need to understand this more thoroughly, so am working in parallel with two resources: one more modern and one original from @Aleph1.\n </p>\n <p>\n  In the essay, there is a basic code snippet, called\n  <code>\n   example1.c\n  </code>\n  , thus:\n </p>\n <pre><code>void function(int a, int b, int c) { \n    char buffer1[5];\n    char buffer2[10];\n}\nvoid main() { \n    function(1,2,3);\n}\n</code></pre>\n <p>\n  In the illustrated disassembly of that, once complied obvs, thus:\n </p>\n <pre><code>pushl %ebp\nmovl %esp,%ebp\nsubl $20,%esp\n</code></pre>\n <p>\n  where\n  <code>\n   $20\n  </code>\n  is the size due to word size, as the 5 char buffer takes 8 bytes (2 words) and the 10 char buffer takes 12 bytes (3 words). So far so simple. This makes perfect sense to me.\n </p>\n <p>\n  While playing along on Ubuntu 12.04 - 32bit version [chosen due to the other parallel disassembly blog post] - the same disassembly comes out as:\n </p>\n <pre><code>push   %ebp\nmov    %esp,%ebp\nsub    $0xc,%esp\n</code></pre>\n <p>\n  where\n  <code>\n   $0xc\n  </code>\n  is 12 in decimal. What is the reason for this discrepancy, assuming that I've copied the code properly. It's not really holding up my progress, but I feel that I should be able to understand why my code is subtracting by 12 bytes, and the example by 20. My best guess is that it's down to the architecture of the OS that I'm using in some way, but would like someone with more experience to validate this or tell me why.\n </p>\n <p>\n  <strong>\n   Update\n  </strong>\n </p>\n <p>\n  I was comparing apples with oranges, which I've just realised. The code from Aleph1's essay where it talks about the\n  <code>\n   subl $20\n  </code>\n  came from the -S (assembly) output from gcc, and is discussing the\n  <em>\n   prolog\n  </em>\n  whereas the code I took the\n  <code>\n   sub 0xc\n  </code>\n  came from within\n  <code>\n   gdb\n  </code>\n  and running\n  <code>\n   disassemble main\n  </code>\n  .\n </p>\n <p>\n  I have run gcc -S to produce example1.s - but that produces a different result again, although I suspect it's down to Johan's comment about gcc options, which happen to be\n  <code>\n   gcc -g -fno-stack-protector -z execstack -S -o example1.s example1.c\n  </code>\n  . Looking in the\n  <em>\n   prolog\n  </em>\n  , the result that I get here is\n  <code>\n   subl %16\n  </code>\n  (which in dec is 22).\n </p>\n <p>\n  It has simply raised more questions! :D\n </p>\n <p>\n  <strong>\n   Update 2\n  </strong>\n </p>\n <p>\n  Dump of assembler code within\n  <code>\n   gdb\n  </code>\n  is:\n </p>\n <pre><code> 0x080483bc <+0>:   push   %ebp\n 0x080483bd <+1>:   mov    %esp,%ebp\n 0x080483bf <+3>:   sub    $0xc,%esp\n</code></pre>\n <p>\n  Is that why we see\n  <code>\n   $0xc\n  </code>\n  (12 in decimal) because it's showing as\n  <code>\n   <+3>\n  </code>\n  (i.e. +3 words, 12 bytes)?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "105",
    "tags": [
        "disassembly",
        "x86",
        "gdb"
    ],
    "user": "FiddleDeDee",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n What are your compilation flags for the 2nd snippet? As\n <code>\n  function\n </code>\n doesn't use either buffer, it's likely the compiler did some optimization on the code. I could see the compiler recognizing it's okay to overlap the buffers so it chose the smallest DWORD-aligned buffer to hold both (=12 bytes).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "FiddleDeDee",
            "text": "<html><body><span class=\"comment-copy\">\n Good shout:\n <code>\n  -g -fno-stack-protector -z execstack -o\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "FiddleDeDee",
            "text": "<html><body><span class=\"comment-copy\">\n I tried taking out the\n <code>\n  -o\n </code>\n so that gcc output\n <code>\n  a.out\n </code>\n and then gdb'd that - same sub amount of\n <code>\n  $0xc\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n Try adding\n <code>\n  -O0\n </code>\n (letter O followed by number zero) or\n <code>\n  -Og\n </code>\n and see if it changes something. Another trick\n <i>\n  might\n </i>\n be adding the\n <code>\n  volatile\n </code>\n keyword in front of your buffers. That way the compiler cannot reason about use of them and try to optimize stuff but I'm not 100% it works here. Quick edit: Apparently gdb defaults to\n <code>\n  -O0\n </code>\n when nothing is specified.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}