{
    "title": "Are there any tools or scripts for identifying compression algorithms in executables?",
    "link": "https://reverseengineering.stackexchange.com/questions/1463/are-there-any-tools-or-scripts-for-identifying-compression-algorithms-in-executa",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know there are tools for identifying common ciphers and hash algorithms in code, but are there any similar scripts / tools / plugins for common compression algorithms such as gzip, deflate, etc? Primarily aimed at x86 and Windows, but answers for other platforms are welcomed too.\n </p>\n <p>\n  Note that I'm looking to find\n  <em>\n   code\n  </em>\n  , not\n  <em>\n   data\n  </em>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "19",
    "answers": 3,
    "views": "13k",
    "tags": [
        "tools",
        "windows",
        "x86"
    ],
    "user": "Polynomial",
    "time": "Apr 2, 2013 at 7:31",
    "comments": [
        {
            "user": "cb88",
            "text": "<html><body><span class=\"comment-copy\">\n I wouldn't be supprised it many compression/decompression tools have this since 7zip can often open things regardless of the extension. Althought it is possible it is relying on meta data.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Polynomial",
            "text": "<html><body><span class=\"comment-copy\">\n Tools such as 7zip simply rely on metadata within the executable file in order to detect SFX binaries, but even if it was using heuristics it'd be looking for compressed data, not the compression algorithm. I'm looking for ways to detect the address of the code for common compression algorithms.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ange",
            "text": "<html><body><span class=\"comment-copy\">\n 1/ I don't know any tool that does that 2/ it really depends if you want to match C code or optimized ASM code: if you want to match compiled code, it would be better to have a FLIRT-like signature for specific functions. To match hand-optimized ASM (something people rarely alter when copy/pasting), then either match the complete block, or at least, rely on specific constants (\n <a href=\"https://code.google.com/p/kabopan/source/browse/trunk/kbp/comp/aplib.py#14\" rel=\"nofollow noreferrer\">\n  example\n </a>\n )\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://aluigi.altervista.org/mytoolz.htm#signsrch\" rel=\"noreferrer\">\n   <code>\n    signsrch\n   </code>\n  </a>\n  by Luigi Auriemma has signatures for tables used in common compression libraries (zlib etc.).\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/kNa4o.png\"/>\n </p>\n <p>\n  It has been ported as plugins for\n  <a href=\"http://www.autistici.org/ratsoul/iss.html\" rel=\"noreferrer\">\n   ImmDbg\n  </a>\n  and\n  <a href=\"http://www.macromonkey.com/bb/viewtopic.php?f=65&t=886\" rel=\"noreferrer\">\n   IDA\n  </a>\n  .\n </p>\n <p>\n  He also has the\n  <a href=\"http://aluigi.altervista.org/mytoolz.htm#offzip\" rel=\"noreferrer\">\n   <code>\n    offzip\n   </code>\n  </a>\n  tool which tries to identify and unpack compressed streams inside a binary.\n </p>\n</div>\n</body></html>",
            "votes": "23",
            "user": "Igor Skochinsky",
            "time": "Apr 2, 2013 at 3:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Polynomial",
                    "text": "<span class=\"comment-copy\">This tool is awesome. Looks cross-platform too. Sweet!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm a big fan of\n  <a href=\"https://code.google.com/p/binwalk/\">\n   binwalk\n  </a>\n  , but sadly it doesn't help you much on Windows.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "mrduclaw",
            "time": "Apr 2, 2013 at 1:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ixje",
                    "text": "<span class=\"comment-copy\">their release notes say:  \" Version 1.0 is a complete re-write in Python and includes new features and a scriptable Python module\"  Although their FAQ mentions it is not tested on Windows, it should take to much effort to get it working if it isn't.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If a binary uses deflate or gzip (which uses deflate), the code is generally linked in as a library and thus easy to detect based on string artifacts. This can certainly be automated, e.g., you could simply search for the respective strings. Manually matching functions against the source code is a somewhat tedious process, but it usually works nicely. The process is much more difficult for less common algorithms or when you don't have any artifacts. In that case you have to identify the algorithm by its semantics (things like word size, constants, data structures may provide hints).\n </p>\n <p>\n  In addition to the already mentioned FLIRT signatures: If you use IDA Pro with the Hex-Rays plugin and you are lucky, you may be able to find an algorithm on\n  <a href=\"http://crowd.re\" rel=\"nofollow\">\n   http://crowd.re\n  </a>\n  . There are a few annotations for compression algorithms available. Apart from that, I am not aware of any tools or scripts that do what you want.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "til",
            "time": "Apr 2, 2013 at 8:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}