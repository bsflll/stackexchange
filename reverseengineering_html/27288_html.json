{
    "title": "Can I ignore this Ghidra USTACK var?",
    "link": "https://reverseengineering.stackexchange.com/questions/27288/can-i-ignore-this-ghidra-ustack-var",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new to ghidra but best I can tell the decompiler here is just plain wrong. Just want to make sure that I'm not somehow missing some x64 or fastcall concept here and that I'm right that I can safely ignore this output.\n </p>\n <p>\n  Machine Code + ASM:\n </p>\n <pre><code>...  \n1800170da    8b fa           - MOV EDI, EDX\n1800170dc    48 8b d9        - MOV RBX, RCX\n1800170df    ba 01 00 00 00  - MOV EDX, 1\n1800170e4    3b fa           - CMP EDI, EDX  \n1800170e6    75 05           - JNZ some_label  \n1800170e8    e8 a7 d2 00 00  - CALL some_function  \nsome_label:  \n1800170ed    8b d7           - MOV EDX, EDI  \n...\n</code></pre>\n <p>\n  What I think this should equate to:\n </p>\n <pre><code>if (param_2 == 1) {\n    some_function(); // function definition and args don't matter\n}\n</code></pre>\n <p>\n  What Ghidra gives:\n </p>\n <pre><code>if (param2 == 1) {\n    uStack47 = 0x1800170ed;\n    some_function();\n}\n</code></pre>\n <p>\n  Since this uStack47 looks like it's just the EIP value after some_label I'm not sure why ghidra would even bother showing this. As far as I can tell you would just \"fall through\" the control statement right into the label with EIP incrementing as normal. Is this just a case of decompilers being not very good?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "968",
    "tags": [
        "ghidra",
        "decompiler"
    ],
    "user": "Perolan",
    "time": "Mar 22, 2021 at 19:11",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Is\n <code>\n  uStack47\n </code>\n used again later in the function?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Is param2 auto or manual param2 must be rdx not edx iirc also iirc jnz != ==\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Perolan",
            "text": "<html><body><span class=\"comment-copy\">\n It is never used again. As far as I know jnz is essentially the same as jne.. They both check the zero. Param2 may be passed as rdx but if it's known to be a DWORD size then only edx will be used. Either way I don't see either of those things are relevant.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Michael Karcher",
            "text": "<html><body><span class=\"comment-copy\">\n The call instruction pushes the return address to the stack. So ghidra is in fact right that this store happens. The actual question is\n <i>\n  why does ghidra show this store to the user\n </i>\n ? I guess ghidra is unable to prove that the stack location used for the return address is not used as part of a structure, is is thus hesitant to hide it from you.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Perolan",
            "text": "<html><body><span class=\"comment-copy\">\n Don't know why I didn't consider ghidra was just showing me call's push. This makes total sense. The decompiler doesn't show it for any other functions that I've noticed but maybe something about the control logic made ghidra want to err on the side of caution. Thanks Michael!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}