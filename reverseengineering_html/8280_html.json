{
    "title": "How to accurately virtualize bespoke hardware?",
    "link": "https://reverseengineering.stackexchange.com/questions/8280/how-to-accurately-virtualize-bespoke-hardware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here's my situation:\n </p>\n <p>\n  I hate firewalls, load balancers, routers etc... want to root em all!\n </p>\n <p>\n  Anyway, I can't\n  <em>\n   buy\n  </em>\n  em all, and a lot of people think that it's dumb to buy them anyway. Why? So the common wisdom goes, they all run some kind of linux, so just analyse linux for some flaws.\n </p>\n <p>\n  People even say that testing against snort is as good as testing against a Cisco IDS device that might run snort or something like it....\n </p>\n <p>\n  So here's what I want to do:\n </p>\n <p>\n  I want to at least recreate the hardware conditions of a network device, and match that up to firmware and a pre-flashed device?\n </p>\n <p>\n  <strong>\n   Objective Question\n  </strong>\n </p>\n <p>\n  How would I go about about ensuring that the hardware environment I create with a virtual machine accurately mimics the real deal so that I might reverse engineer the system (using dynamic analysis to find binary flaw)?\n </p>\n <p>\n  <strong>\n   Extra questions in case you decide to give me advice\n  </strong>\n </p>\n <p>\n  Am I making this a more complicated problem than it needs to be?\n </p>\n <p>\n  Is this something that can be objectively proven?\n </p>\n <p>\n  Ultimately is it preferable to RE the physical device?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "109",
    "tags": [
        "hardware",
        "virtualizers"
    ],
    "user": "MrSynAckSter",
    "time": "Feb 19, 2015 at 4:25",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n You'll need to re the physical device before you can emulate it correctly.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<html><body><span class=\"comment-copy\">\n I believe you, although a more extensive answer might better satisfy my critics :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First, note that most industrial-strength networking devices don't use Linux. If they did, mosts parts of the software would have to be provided in source code to comply with GPL requirements. So while your $100 Linksys router might use Linux, your $3000 Cisco router won't, and it won't be running snort either.\n </p>\n <p>\n  (Cisco's IDS and Snort might have several ideas in common, and\n  <em>\n   maybe\n  </em>\n  the IDS devs even copied a dozen of lines of code from Snort, but testing against snort to find vectors of attack against IDS is quite silly).\n </p>\n <p>\n  Most routers use some kind of MIPS, or ARM, processor. However, the IP of them is sublicensed to different hardware fabs, and the processor in your router might have some enhancements to the \"official\" versions. Maybe they added some silicon to enhance DMA transfers to route network packets faster. Maybe they added a hardware TCP checksum generator. Your MIPS QEMU / ARM QEMU processor won't know about those, so your emulation just won't work.\n </p>\n <p>\n  Now, even if you knew your router is running linux, and even if you knew about a linux bug, you couldn't be sure if this particular bug is exploitable on your particular hardware.\n  <a href=\"http://en.wikipedia.org/wiki/Shellshock_%28software_bug%29\" rel=\"nofollow\">\n   Shellshock\n  </a>\n  requires bash; it won't hurt busybox shell, and even if your router uses bash (unlikely), it might be a stripped-down version. You have to run the linux kernel from the official firmware, and the tools from your official firmware, on an emulated processor that fits your actual hardware, to check if your bug is exploitable.\n </p>\n <p>\n  But, chances are the official kernel won't even boot. The kernel will, at some point, try to read some configuration values from non-volatile storage. This might be a specialized chip on an I2C bus. Your emulation will have to emulate that I2C bus at the correct hardware addresses. But you don't know how to do this unless you've reversed the hardware.\n </p>\n <p>\n  The kernel will initialize each of the router ports. Which, again, means it will access specific hardware in a specific way. If it doesn't find the router ports, it will probably turn on a red 'hardware error' LED and enter an endless loop. So if you don't emulate the router ports, your kernel won't boot, and unless you emulate the LED, you won't even know why. Again, you need hardware information.\n </p>\n <p>\n  Last, knowing details about the hardware might help you exploit something. Assume each of the router ports has a corresponding /dev/portXX device, that accepts\n  <code>\n   ioctl\n  </code>\n  s to set bitrate, duplex, and similar parameters. Assume all those /dev/portXX devices had the same major id, and minor ids from 0 to 31.\n </p>\n <p>\n  Maybe the port driver uses the minor id to calculate a hardware address, and doesn't sanity-check the minor id first. Creating a device node with a minor id between 32 and 255 might allow you to write to hardware registers after the ethernet ports, that have different meanings. Maybe the ports use addresses 0x8000000 to 0x8000001f, and 0x80000040 is the address of the configuration cmos. Creating /dev/port64 with a minor ID of 64 might allow you to use the port ioctl to read/write the cmos. However, you will never find that vulerability unless you have definite, deep knowledge about the hardware.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Feb 19, 2015 at 13:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">I think the gist of your comment is that is extremely advantageous to just have the hardware in your possession, which was my intuition in the first place. Of course, in that case the question becomes: How do I come into possession of enterprise grade networking gear? Great answer.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Fantastic answer, Guntram; it's always a pleasure reading what you write. @baordog, regarding coming \"into possession of enterprise grade networking gear\", do what everyone does who wants to play with pricey software/hardware -- ask your employer to buy it for you.</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">I'll try! In the meantime, I guess I can look on E-bay.</span>",
                    "time": null
                }
            ]
        }
    ]
}