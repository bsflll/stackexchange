{
    "title": "What is Data Interleaving? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/1766/what-is-data-interleaving",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item mr8\">\n      <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n       <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n       </path>\n      </svg>\n     </div>\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        This question is unlikely to help any future visitors; it is only relevant to a small geographic area, a specific moment in time, or an extraordinarily narrow situation that is not generally applicable to the worldwide audience of the internet. For help making this question more broadly applicable,\n        <a href=\"/help/reopen-questions\">\n         visit the help center\n        </a>\n        .\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2013-04-15 07:28:51Z\">\n      12 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  What is data interleaving? Is this something I can use to obfuscate collections of variables?\n </p>\n</div>\n</body></html>",
    "votes": "-6",
    "answers": 1,
    "views": "748",
    "tags": [
        "obfuscation"
    ],
    "user": "dyasta",
    "time": "12 years ago",
    "comments": [
        {
            "user": "Ange",
            "text": "<html><body><span class=\"comment-copy\">\n if you do (ask and answer yourself), it should at least be a question that others are likely to ask too - I've never heard of Data Interleaving until now. otherwise we can't expect anyone else to answer, which is not why 'answering your own question' is encouraged.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Can you provide an example of a protection that uses such a technique?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n I may be wrong, but shouldn't something you just thought and may have applications in the field belong in a blog post, or in certain cases a technical paper rather than a Q&A here ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ange",
            "text": "<html><body><span class=\"comment-copy\">\n I see your point, but if it's a new idea not seen anywhere else before, it's 'too early' for it for QA (which is the format here), and @RolfRolles is right, if there is not even a PoC somewhere, there's hardly no experience about it.. for this, I'd write a blog post somewhere or present in conference, submit to reddit, let people learn first about it. then individual problems related to that idea could be discussed here. SE is not for any discussion, but more for problem solving (I know, the interwebs can't make things simply).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "dyasta",
            "text": "<html><body><span class=\"comment-copy\">\n You guys really need to vote this down 6 times?  Is it that offensive? I think I could post some pr0n and get less votes down\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Data Interleaving is a term I made up to reflect an idea I've been contemplating lately; interleaving the bits of a set of variables into a single binary blob. Any number and types of variables could be interleaved together. Access to variables in the interleaved blob can even be on-demand, with a controller class encoding or decoding variables on the fly.\n </p>\n <h2>\n  What in the World?\n </h2>\n <p>\n  Data Interleaving is the process of translating any number of variables to a single binary blob by interleaving the bits of the variables. This obfuscates the variables in memory or external storage. The entire blob need not be decoded to access member variables, though it can be for improved performance.\n </p>\n <h2>\n  Why?\n </h2>\n <p>\n  This will help complicate reverse engineering of code. It will particularly deter identifying data types and variables. Plaintext is also well obfuscated with this interleave.\n </p>\n <h2>\n  Interleave Map\n </h2>\n <p>\n  The variables to be encoded could be defined by an array of byte sizes of those variables and, optionally, pointers to a location in memory to retrieve or store their reconstituted form. In the case of on-demand access to an interleaved blob, individual variables can be decoded and re-encoded on the fly, so buffers for reconstituted storage are optional (though they may be temporarily reconstituted by the controller class as members are modified).\n </p>\n <p>\n  The members of the bitwise interleave can be referenced in the source code via their indices. For instance, index 0 may be MY_VARIABLE_INSTANCE. By passing the variable index to an interleave blob controller class, it knows the size and, optionally, a pointer for constituted storage.\n </p>\n <p>\n  Member data types can be anything. They need not be similar. When one variable ends, it is simply ended. See a few paragraphs below for what happens when a single variable is longer than the others.\n </p>\n <pre><code>/* member information */\n/* optional pointer to its normal, constituted storage location */\n/*  (for use in encoding and decoding the member) */\n/* and the size of the member */\nclass CInterleaveMember\n{\n  void *pvConstitutedStore;\n  unsigned long nMemberByteSize;\n};\n\n/* INTERLEAVE MAP */\nCInterleaveMember aInterleaveMap[]\n  { szSomeString, sizeof(szSomeString) },\n  { &nIntegerMan, sizeof(nIntegerMan) },\n  { &cMyClass , sizeof(cMyClass) };\n\nvoid *pBLOB;  /* interleaved data stored in a dynamically allocated blob */\n</code></pre>\n <p>\n  The total size of the blob need not be stored, as it is the sum of all member sizes in the interleave map. The interleave map provides everything we need to know.\n </p>\n <h2>\n  The Process\n </h2>\n <p>\n  In case it is not clear, the process for the interleave would go something like this: The array of members is 'walked', putting or getting the current bit index from each member variable, advancing to the next bit index after the entire array has been walked. When a member variable is full of bits (exhausted), it is skipped in subsequent interleave iterations (more on long vars later).\n </p>\n <p>\n  For simplicity, let me define a few variables in bits only (not matching above):\n </p>\n <pre><code>szSomeString 0 1 1 1 0 0 1 0 \nnIntegerMan  1 1 1 0 0 0 1 1 1 0 0 1 0 0 0 1\ncMyClass     0 0 0 1\n</code></pre>\n <p>\n  For the interleave, a bit is taken from each variable in succession.\n </p>\n <pre><code>First iteration of the interleave, get first bit from each ...\n 0 1 0\nNext iteration(s), get the next bit from each ...\n 0 1 0 1 1 0\n 0 1 0 1 1 0 1 1 0\n ...\n</code></pre>\n <h2>\n  When a Member is Longer than the Others\n </h2>\n <p>\n  In the case where one variable is much longer than the others, thus having no pair to encode with, one could use a simple XOR, and/or toss in redundant, unused data from the prior members. Any number of strategies are possible to prevent plaintext storage in the case of an abnormally long variable not having an interleave partner for its ending bits.\n </p>\n <h2>\n  Sample Code\n </h2>\n <p>\n  For example, the following pseudo-code represents this algorithm:\n </p>\n <pre><code>/* PROTECTED VARIABLES */\n/* These get stored in an bitwise interleave in the binary blob */\nchar szSomeString = \"Is there anybody out there?\";\nunsigned long nIntegerMan = 0x9090; \nMyClass cMyClass(\"whoopie\");\n\nclass CInterleaveMember\n{\n  void *pvConstitutedStore;\n  unsigned long nMemberByteSize;\n};\n\n/* INTERLEAVE MAP */\nCInterleaveMember aInterleaveMap[]\n  { szSomeString, sizeof(szSomeString) },\n  { &nIntegerMan, sizeof(nIntegerMan) },\n  { &cMyClass , sizeof(cMyClass) };\n\n/* NOTE: Total size of the resultant bitwise interleave is the sum of the members of a Interleave Map */\n\n/* INTERLEAVE REFS */\ntypedef enum \n{\n  _szSomeString=0,\n  _nIntegerMan,\n  _cMyClass,\n} InterleavedVariables;\n\nvoid *pBinaryBlob;  /* dynamically allocated blob storage */\n\n/* Fictional class constructor, passing the interleave map to it */\n/* From the interleave map, it can calculate the total blob size, */\n/* then dynamically allocate storage for the blob. */\nCBitInterleaver cBitInterleave(aInterleaveMap);\n\n/* If the blob is externally loaded, or needs externally stored, we */\n/* may need to get access to the blob buffer. Fictional example: */\n/* We know the blob size from map! The input size is for safety. */\ncBitInterleave.SetBlob(pIncomingBlob, nSrcBufferSize);  \n\n/* Or we can get the blob */\nnBlobSize=cBitInterleave.GetBlob(ppOutgoingBlob);\n\n/* Example to encode or decode the entire blob to constituted */\n/* storage. We already provided the map, and it decodes or encodes */\n/* to the listed pointers.\ncBitInterleave.EncodeBlob();\ncBitInterleave.DecodeBlob();\n\n/* Example call to decode a member of the array */\n/* We pass it the INDEX into the MAP, and dest buffer */\n/* From the Index of _nIntegerman, we ALREADY know the size */\n/* The out size is for safety. */\ncBitInterleave.GetVariable(_nIntegerMan, &nIntegerMan, sizeof(nIntegerMan));\n\n/* OR we can use the default storage address in the interleave map */      \ncBitInterleave.GetVariable(_nIntegerMan);\n\n/* Example call to encode a member of the array */\n/* We pass it the INDEX into the MAP, and input reference */\ncBitInterleave.SetVariable(_szSomeString, &szSomeString, sizeof(szSomeString));\n\n/* And so on... I'm literally coding this in this answer, like a fool */\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "dyasta",
            "time": "Apr 14, 2013 at 18:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">And why vote the answer down? You should have been accountants if you enjoy classification, lol. It discourages anything to be posted, off topic or not.</span>",
                    "time": null
                }
            ]
        }
    ]
}