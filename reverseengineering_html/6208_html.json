{
    "title": "Detecting packed 64-bit Windows Portable Executable (EXE) files",
    "link": "https://reverseengineering.stackexchange.com/questions/6208/detecting-packed-64-bit-windows-portable-executable-exe-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What programs are the most useful to detect if a 64-bit PE file has been packed (main focus is on EXE files).\nI am not interested in the packer used I would just like to know if the file is packed or not.\n </p>\n <p>\n  I am aware of various PE file properties such as checking entropy, imports, etc.\nPeID is generally recommended but unfortunately does not support 64-bit files, is there a program that is similar and supports 64-bit files (I have a large number of files to be checked)? Any other advise to solve this problem?\n </p>\n <p>\n  I have come across a few programs but I am not sure if they are good.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "4k",
    "tags": [
        "disassembly",
        "windows",
        "malware",
        "pe",
        "packers"
    ],
    "user": "Raphael",
    "time": "Apr 28, 2017 at 12:53",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://ntinfo.biz/index.php/detect-it-easy\" rel=\"nofollow noreferrer\">\n  Detect It Easy\n </a>\n supports 64-bit PE files.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  protectionid supports x64 files no problem... and if you can think of anything i could add to it, just let me know and i'll see what i can do (new build is planned for halloween and it'll be a spooky 'theme').. just dont tell anyone, its a secret\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "evlncrn8",
            "time": "Sep 10, 2014 at 19:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">what version was the first to support PE32+ ?</span>",
                    "time": null
                },
                {
                    "user": "evlncrn8",
                    "text": "<span class=\"comment-copy\">hmm, version 6, or possibly version 5, its supported pe32+ for quite some time</span>",
                    "time": null
                },
                {
                    "user": "Raphael",
                    "text": "<span class=\"comment-copy\">does protectionid use the features of the file (entropy, number of imports, etc) as well or is it only signature based?</span>",
                    "time": null
                },
                {
                    "user": "evlncrn8",
                    "text": "<span class=\"comment-copy\">its a lot more than signature based, entropy, imphash, analysis of sections, characteristics and so on... its a bit more than just the simple ep signature scan other scanners do</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am only aware of two more packer detectors,\n  <a href=\"http://pid.gamecopyworld.com/\" rel=\"nofollow\">\n   Protection iD\n  </a>\n  , and DiE(Detect it Easy) as Extreme Coders has mentioned.\n </p>\n <p>\n  However you are on to something. 64-bit reverse engineering is still in its infancy, apart from IDA, tools are just now being developed to work on 64-bit applications, as it is a new architecture(relative to the number of 64bit applications out there), and on Windows in particular, comes with its own set of quirks(Driver signing, PatchGuard) which significantly slows a reversing down.\nBut even IDA have not yet released a 64-bit decompiler(though they claim it is almost ready) which is further confirmation of what I said.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "farmdve",
            "time": "Sep 9, 2014 at 17:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\"><a href=\"https://www.hex-rays.com/products/ida/6.6/\" rel=\"nofollow noreferrer\">IDA 6.6 already has a x64 decompiler</a></span>",
                    "time": null
                },
                {
                    "user": "farmdve",
                    "text": "<span class=\"comment-copy\">Ah thanks for catching that, but this is IDA 6.6, x64 has been around for over a decade(though only recently did its use start to go up). My point still stands that 64-bit RE is still in its infancy.</span>",
                    "time": null
                },
                {
                    "user": "Mick",
                    "text": "<span class=\"comment-copy\">@farmvde - \"My point still stands that 64-bit RE is still in its infancy\". You've only asserted the point, not provided evidence to support it. While there may not be <i>as many</i> 64-bit RE tools, it does not mean it is in its infancy. There are many RE tools supporting 64-bit (radare2, Hopper, IDA Pro, x64_dbg, WinDbg, gdb, Visual DuxDebugger, Capstone, diStorm64, C4Decompiler, etc).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use the following ones:\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.rdgsoft.net/\" rel=\"nofollow\">\n    RDG\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/horsicq/Detect-It-Easy\" rel=\"nofollow\">\n    DiE\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/plusvic/yara\" rel=\"nofollow\">\n    Yara\n   </a>\n   with\n   <a href=\"https://github.com/radare/radare2/tree/master/shlr/yara\" rel=\"nofollow\">\n    this\n   </a>\n   set of rules\n  </li>\n  <li>\n   <a href=\"http://handlers.dshield.org/jclausing/packerid.py\" rel=\"nofollow\">\n    this\n   </a>\n   Python script that uses PEiD rules (like\n   <a href=\"http://research.pandasecurity.com/blogs/images/userdb.txt\" rel=\"nofollow\">\n    this\n   </a>\n   one).\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "0",
            "user": "jvoisin",
            "time": "Oct 4, 2014 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}