{
    "title": "Packed PE file and weird Header",
    "link": "https://reverseengineering.stackexchange.com/questions/16087/packed-pe-file-and-weird-header",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new to reverse engineering, so I don't know if my question will be easy or not.\nRight now I have an exe file, but it seems packed. In the hex Dump I do have the followings :\n </p>\n <pre><code>000003d0: 0055 5058 3000 0000 0000 e028 0000 1000  .UPX0......(....\n000003e0: 0000 0000 0000 0200 0000 0000 0000 0000  ................\n000003f0: 0000 0000 0080 0000 e055 5058 3100 0000  .........UPX1...\n00000400: 0000 4014 0000 f028 0000 3814 0000 0200  ..@....(..8.....\n00000410: 0000 0000 0000 0000 0000 0000 0040 0000  .............@..\n00000420: e02e 7273 7263 0000 0000 a007 0000 303d  ..rsrc........0=\n00000430: 0000 9207 0000 3a14 0000 0000 0000 0000  ......:.........\n00000440: 0000 0000 0040 0000 c033 2e39 3300 5550  .....@...3.93.UP\n00000450: 5821 0d09 0201 4482 f819 2707 6e6b 290d  X!....D...'.nk).\n</code></pre>\n <p>\n  I guess that my file is packed using UPX.\nBut I'm stuck with the rest of the file because I do have an altered header it seems :\n </p>\n <pre><code>00000000: 4d5a 9000 0300 0000 0400 0000 ffff 0000  MZ..............\n00000010: b800 0000 0000 0000 4000 0000 0000 0000  ........@.......\n00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000030: 0000 0000 0000 0000 0000 0000 8000 0000  ................\n00000040: 0e1f ba0e 00b4 09cd 21b8 014c cd21 5468  ........!..L.!Th\n00000050: 6973 2070 726f 6772 616d 2063 616e 6e6f  is program canno\n00000060: 7420 6265 2072 756e 2069 6e20 444f 5320  t be run in DOS\n00000070: 6d6f 6465 2e0d 0d0a 2400 0000 0000 0000  mode....$.......\n00000080: 5045 0000 4c01 0300 a505 f358 0000 0000  PE..L......X....\n[...]\n00000250: 4e71 e81b 0068 e81b 004d 5a90 0003 0000  Nq...h...MZ.....\n00000260: 0004 0000 00ff ff00 00b8 0000 0000 0000  ................\n00000270: 0040 0000 0000 0000 0000 0000 0000 0000  .@..............\n00000280: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000290: 0000 0000 0080 0000 000e 1fba 0e00 b409  ................\n000002a0: cd21 b801 4ccd 2154 6869 7320 7072 6f67  .!..L.!This prog\n000002b0: 7261 6d20 6361 6e6e 6f74 2062 6520 7275  ram cannot be ru\n000002c0: 6e20 696e 2044 4f53 206d 6f64 652e 0d0d  n in DOS mode...\n000002d0: 0a24 0000 0000 0000 0050 4500 004c 0103  .$.......PE..L..\n</code></pre>\n <p>\n  Using objdump, I got the following :\n </p>\n <pre><code>architecture: i386, flags 0x0000012f:\nHAS_RELOC, EXEC_P, HAS_LINENO, HAS_DEBUG, HAS_LOCALS, D_PAGED\nstart address 0x0078353e\n\nCharacteristics 0x102\n    executable\n    32 bit words\n\nTime/Date       XXXXXXXXXXXXXXXXXXXXX\nMagic           010b    (PE32)\nMajorLinkerVersion  11\nMinorLinkerVersion  0\nSizeOfCode      00381600\nSizeOfInitializedData   00000800\nSizeOfUninitializedData 00000000\nAddressOfEntryPoint 0038353e\nBaseOfCode      00002000\nBaseOfData      00384000\nImageBase       00400000\nSectionAlignment    00002000\nFileAlignment       00000200\nMajorOSystemVersion 4\nMinorOSystemVersion 0\nMajorImageVersion   0\nMinorImageVersion   0\nMajorSubsystemVersion   4\nMinorSubsystemVersion   0\nWin32Version        00000000\nSizeOfImage     00388000\nSizeOfHeaders       00000200\nCheckSum        00000000\nSubsystem       00000002    (Windows GUI)\nDllCharacteristics  00008540\nSizeOfStackReserve  00100000\nSizeOfStackCommit   00001000\nSizeOfHeapReserve   00100000\nSizeOfHeapCommit    00001000\nLoaderFlags     00000000\nNumberOfRvaAndSizes 00000010\n\nThe Data Directory\nEntry 0 00000000 00000000 Export Directory [.edata (or where ever we found it)]\nEntry 1 003834e8 00000053 Import Directory [parts of .idata]\nEntry 2 00384000 00000598 Resource Directory [.rsrc]\nEntry 3 00000000 00000000 Exception Directory [.pdata]\nEntry 4 00000000 00000000 Security Directory\nEntry 5 00386000 0000000c Base Relocation Directory [.reloc]\nEntry 6 003833b0 0000001c Debug Directory\nEntry 7 00000000 00000000 Description Directory\nEntry 8 00000000 00000000 Special Directory\nEntry 9 00000000 00000000 Thread Storage Directory [.tls]\nEntry a 00000000 00000000 Load Configuration Directory\nEntry b 00000000 00000000 Bound Import Directory\nEntry c 00002000 00000008 Import Address Table Directory\nEntry d 00000000 00000000 Delay Import Directory\nEntry e 00002008 00000048 CLR Runtime Header\nEntry f 00000000 00000000 Reserved\n\nThere is an import table in .text at 0x7834e8\n\nThe Import Tables (interpreted .text section contents)\n vma:            Hint    Time      Forward  DLL       First\n                 Table   Stamp     Chain    Name      Thunk\n\n\nPE File Base Relocations (interpreted .reloc section contents)\n\nThere is a debug directory in .text at 0x7833b0\n\nType                Size     Rva      Offset\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         00381544  00402000  00402000  00000200  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .rsrc         00000598  00784000  00784000  00381800  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  2 .reloc        0000000c  00786000  00786000  00381e00  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\nSYMBOL TABLE:\nno symbols\n</code></pre>\n <p>\n  So is this exe file a false one (hidden payload i.e.) or is it an obfuscated one ?\n </p>\n <p>\n  On virustotal, the actual file got a 10% detection rate.\n  <a href=\"https://www.virustotal.com/en/file/e49be065137b8bd199848e334c3a4c2399bed97e71dd4f10e7d4a7f39e1c9e61/analysis/\" rel=\"nofollow noreferrer\">\n   https://www.virustotal.com/en/file/e49be065137b8bd199848e334c3a4c2399bed97e71dd4f10e7d4a7f39e1c9e61/analysis/\n  </a>\n </p>\n <p>\n  Here is the md5 if you need :  48b0bd483d80617d6f4b33731811d248\n </p>\n <p>\n  EDIT:\nFound out how this malware landed here, it was an attempts to download agony rootkit using a malicious thread spawned into lsass.exe. The initial attack vector was using Eternal Blue.\nThe file is corrupted because of the AV that stopped the download.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "windows",
        "malware",
        "pe",
        "unpacking"
    ],
    "user": "Wheatstone",
    "time": "Sep 21, 2017 at 12:04",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Seems like the file is corrupted. For example, as you pointed out - it has duplicate PE dos header and stub. Even if you remove the prepended header the file would still be corrupted and UPX won't be able to decompress it. Both versions don't even succeeded to run on my tests. So based on my quick and not comprehensive check - I don't think your binary is doing some magic or smart manipulations. If the payload itself isn't totally corrupted then you should probably be able to statically unpack it though...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Polynomial",
            "text": "<html><body><span class=\"comment-copy\">\n How did you get this executable? Have you verified that it actually runs? (in an isolated VM, of course)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Wheatstone",
            "text": "<html><body><span class=\"comment-copy\">\n Each time SEP quarantine it onto the workstation and says that he made a call with lsass.exe to contact a specific IP to download a dll but it does not run by itself. What I'm thinking it's a payload and not an exe.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If the file is being detected, then it seems likely that the first header is a decoy, sufficient to allow the file to load, and that the code that runs is a dropper for the content that begins with the second header.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Aug 18, 2017 at 21:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Wheatstone",
                    "text": "<span class=\"comment-copy\">what kind of approach to reverse such kind of malware could be adopted ?</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Try to load the second PE header starting at +0x259 ?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">try deleting the first 0x259 bytes from the file, leaving only one MZ header and everything after it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The malware was partly downloaded before the SEP client stop the attempt. That's why it gave no results.\nThank you for your help tho.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Wheatstone",
            "time": "Oct 11, 2017 at 13:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">is it a valid answer to your primary question?</span>",
                    "time": null
                }
            ]
        }
    ]
}