{
    "title": "Reverse engineer CAN-Bus checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/17847/reverse-engineer-can-bus-checksum",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to figure out a checksum algorithm.\nD1 to D6 is data, D7 is a counter obviously and byte 8 must be a CRC, but I didnt have any idea on how to build it. Tried to check if it fits any standard, but no clue yet. Would be awesome if anyone had an idea :)\n </p>\n <pre><code>    D1  D2  D3  D4  D5  D6  D7  D8\n    20  0E  20  00  04  FF  F0  1F\n    20  0E  20  00  04  FF  00  60\n    20  0E  20  00  04  FF  10  AD\n    20  0E  20  00  04  FF  20  E7\n    20  0E  20  00  04  FF  30  2A\n    20  0E  20  00  04  FF  40  73\n    20  0E  20  00  04  FF  50  BE\n    20  0E  20  00  04  FF  60  F4\n    20  0E  20  00  04  FF  70  39\n    20  0E  20  00  04  FF  80  46\n    20  0E  20  00  04  FF  90  8B\n    20  0D  20  00  04  FF  A0  0B\n    20  0D  20  00  04  FF  B0  C6\n    20  0D  1F  FF  04  FF  C0  6A\n    20  0D  1F  FF  04  FF  D0  A7\n    20  0D  1F  FE  04  FF  E0  70\n    20  0C  1F  FD  04  FF  F0  41\n    20  0C  1F  FD  04  FF  00  3E\n    20  0C  1F  FC  04  FF  10  6E\n    20  0B  1F  FB  04  FF  20  1F\n    20  0B  1F  FB  04  FF  30  D2\n    20  0B  1F  FB  04  FF  40  8B\n    20  0A  1F  FA  04  FF  50  9D\n    20  0A  1F  FA  04  FF  60  D7\n    20  0A  1F  F9  04  FF  70  A0\n    20  09  1F  F9  04  FF  80  15\n    20  09  1F  F9  04  FF  90  D8\n    20  09  1F  FA  04  FF  A0  28\n    20  08  1F  F9  04  FF  B0  19\n    20  08  1F  FA  04  FF  C0  FA\n    20  08  1F  F9  04  FF  D0  8D\n    20  07  1F  F8  04  FF  E0  9F\n    20  07  1F  F8  04  FF  F0  52\n    20  06  1F  F8  04  FF  00  6B\n    20  05  1F  F7  04  FF  10  04\n    20  05  1F  F7  04  FF  20  4E\n    20  04  1F  F6  04  FF  30  58\n    20  03  1F  F5  04  FF  40  74\n    20  03  1F  F5  04  FF  50  B9\n    20  03  1F  F5  04  FF  60  F3\n    20  02  1F  F5  04  FF  70  78\n    20  02  1F  F6  04  FF  80  BD\n    20  02  1F  F7  04  FF  90  ED\n    20  02  1F  F8  04  FF  A0  CF\n    20  02  1F  F9  04  FF  B0  9F\n    20  02  1F  FB  04  FF  C0  E1\n    20  02  1F  FC  04  FF  D0  D8\n    20  02  1F  FD  04  FF  E0  0F\n    20  02  1F  FE  04  FF  F0  78\n    20  02  1F  FF  04  FF  00  9A\n    20  02  1F  FF  04  FF  10  57\n    20  02  20  00  04  FF  20  E8\n    20  02  20  00  04  FF  30  25\n    20  02  20  00  04  FF  40  7C\n    20  02  20  00  04  FF  50  B1\n    20  02  20  00  04  FF  60  FB\n    20  02  20  00  04  FF  70  36\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decryption",
        "encodings",
        "crc",
        "networking"
    ],
    "user": "mike",
    "time": "Mar 30, 2018 at 8:44",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Ok, lets start from scratch! How did you capture this dump? Did you use the\n <a href=\"https://github.com/eerimoq/cantools\" rel=\"nofollow noreferrer\">\n  cantools\n </a>\n sniffer for that?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As can be demonstrated by\n  <a href=\"http://www.sunshine2k.de/coding/javascript/crc/crc_js.html\" rel=\"nofollow noreferrer\">\n   this page\n  </a>\n  :\n </p>\n <ul>\n  <li>\n   CRC width: CRC-8\n  </li>\n  <li>\n   CRC parametrization: Predefined, CRC8_SAE_J1850 (Polynomial: 0x1d, Initial value: 0xff, Final xor: 0xff)\n  </li>\n  <li>\n   CRC Input Data: Bytes, D1-D7\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "3",
            "user": "booto",
            "time": "Jun 29, 2018 at 10:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}