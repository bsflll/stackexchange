{
    "title": "Are there any static binary rewriting tools？",
    "link": "https://reverseengineering.stackexchange.com/questions/14841/are-there-any-static-binary-rewriting-tools",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My goal is to modify some instructions and make some instrumentation in ELF executables or libraries(For example, modifying all memory writes instructions). Since there're so many instructions, I want to find them automatically and apply some modification. Are there any tools that I can leverage?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "4k",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "instrumentation"
    ],
    "user": "liubenxi",
    "time": "Mar 7, 2017 at 8:56",
    "comments": [
        {
            "user": "liubenxi",
            "text": "<html><body><span class=\"comment-copy\">\n @w s I mean static instrumentation, and I want to modify elf files.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n does it\n <i>\n  have\n </i>\n to be static? there are many  tools for dynamic instrumentation, why do you need specifically binary rewriting?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "liubenxi",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky I want to change ELF files, and run them without any tools.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just extracted the following list during my research of this paper:\n </p>\n <blockquote>\n  <p>\n   <strong>\n    \"Reassembleable Disassembling\"\n   </strong>\n   Shuai Wang, Pei Wang, and Dinghao Wu,\n  The Pennsylvania State University\n  </p>\n </blockquote>\n <p>\n  The following list consits of all mentioned tools (dynamic and static), perhaps there is something useful:\n </p>\n <hr/>\n <p>\n  <strong>\n   UROBOROS\n  </strong>\n  <em>\n   (Static, x86/x64 ELF)\n  </em>\n </p>\n <p>\n  So the paper itself introduces UROBOROS. I think it's one of the best options for you:\n </p>\n <p>\n  <a href=\"https://github.com/s3team/uroboros\" rel=\"nofollow noreferrer\">\n   https://github.com/s3team/uroboros\n  </a>\n </p>\n <blockquote>\n  <p>\n   <strong>\n    \"Reassembleable Disassembling\"\n   </strong>\n   Shuai Wang, Pei Wang, and Dinghao Wu,\n  The Pennsylvania State University\n  </p>\n  <p>\n   In this paper, we present UROBOROS, a tool that can disassemble\n  executables to the extent that the gener- ated code can be assembled\n  back to working binaries without manual effort. [...]\n  </p>\n  <p>\n   We have implemented a prototype of UROBOROS in OCaml and Python, with\n  a total of 13,209 lines of code. Our prototype works for both x86 and\n  x64 ELF binaries. [...]\n  </p>\n  <p>\n   We have presented UROBOROS, a tool that can disassem- ble stripped\n  binaries and produce reassembleable assem- bly code in a fully\n  automated manner. We call this tech- nique reassembleable\n  disassembling and have developed a prototype called UROBOROS. Our\n  experiments show that reassembled programs incur negligible execution\n  overhead, and thus UROBOROS can be potentially used as a foundation\n  for binary-based software retrofitting.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   Dyninst [10, 20]\n  </strong>\n  <em>\n   (Static+Dynamic)\n  </em>\n </p>\n <blockquote>\n  <p>\n   BUCK, B., AND HOLLINGSWORTH, J. K. An API for runtime code patching.\n  Int. J. High Perform. Comput. Appl. 14, 4 (2000), 317–329.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   Vulcan [16]\n  </strong>\n  <em>\n   (Static, binaries compiled by special compilers, not stripped)\n  </em>\n </p>\n <blockquote>\n  <p>\n   EDWARDS, A., VO, H., SRIVASTAVA, A., AND SRIVASTAVA, A. Vulcan binary\n  transformation in a distributed environment. Tech. Rep.\n  MSR-TR-2001-50, Microsoft Research, 2001.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   Alto [35]\n  </strong>\n  <em>\n   (Static, binaries compiled by special compilers, not stripped)\n  </em>\n </p>\n <blockquote>\n  <p>\n   MUTH, R., DEBRAY, S. K., WATTERSON, S., AND DE BOSS- CHERE, K. Alto: A\n  link-time optimizer for the Compaq Alpha. Softw. Pract. Exper. 31, 1\n  (2001), 67–101.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   Diablo [13]\n  </strong>\n  <em>\n   (Static, binaries compiled by special compilers, not stripped)\n  </em>\n </p>\n <blockquote>\n  <p>\n   DE SUTTER, B., DE BUS, B., AND DE BOSSCHERE, K. Link- time binary\n  rewriting techniques for program compaction. ACM Trans. Program. Lang.\n  Syst. 27, 5 (2005), 882–945.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   SecondWrite [3]\n  </strong>\n  <em>\n   (Static)\n  </em>\n </p>\n <blockquote>\n  <p>\n   ANAND, K., SMITHSON, M., ELWAZEER, K., KOTHA, A., GRUEN, J., GILES,\n  N., AND BARUA, R. A compiler-level inter- mediate representation based\n  binary analysis and rewriting sys- tem. In Proceedings of the 8th ACM\n  European Conference on Computer Systems (2013), ACM, pp. 295–308.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   Pin [31]\n  </strong>\n  <em>\n   (Dynamic)\n  </em>\n </p>\n <blockquote>\n  <p>\n   LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A., LOWNEY, G.,\n  WALLACE, S., REDDI, V. J., AND HAZELWOOD, K. Pin: Building customized\n  program analysis tools with dy- namic instrumentation. In Proceedings\n  of the 2005 ACM SIG- PLAN Conference on Programming Language Design\n  and Im- plementation (2005), ACM, pp. 190–200.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   DynamoRIO [7]\n  </strong>\n  <em>\n   (Dynamic)\n  </em>\n </p>\n <blockquote>\n  <p>\n   BRUENING, D. L. Efficient, transparent, and comprehensive runtime code\n  manipulation. PhD thesis, Massachusetts Institute of Technology, 2004.\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   miasm2\n  </strong>\n </p>\n <blockquote>\n  <p>\n   Miasm is a free and open source (GPLv2) reverse engineering framework.\n  Miasm aims to analyze / modify / generate binary programs.\n   <a href=\"https://github.com/cea-sec/miasm\" rel=\"nofollow noreferrer\">\n    https://github.com/cea-sec/miasm\n   </a>\n  </p>\n </blockquote>\n <hr/>\n <p>\n  <strong>\n   VxStripper\n  </strong>\n  <em>\n   (dynamic)\n  </em>\n </p>\n <blockquote>\n  <p>\n   Josse, Sébastien. \"Malware Dynamic Recompilation.\" System Sciences\n  (HICSS), 2014 47th Hawaii International Conference on. IEEE, 2014.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "6",
            "user": "knx",
            "time": "Mar 9, 2017 at 6:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\"><a href=\"https://github.com/cea-sec/miasm\" rel=\"nofollow noreferrer\">Miasm2</a> is also able to rewrite binary code.</span>",
                    "time": null
                },
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">I added miasm2 and VxStripper.</span>",
                    "time": null
                },
                {
                    "user": "liubenxi",
                    "text": "<span class=\"comment-copy\">The authors have extended their work, UROBOROS, and it is also able to rewrite binary code.</span>",
                    "time": null
                },
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">I read the paper yesterday and I will add it to my answer. I think it's probably a good option for you.</span>",
                    "time": null
                }
            ]
        }
    ]
}