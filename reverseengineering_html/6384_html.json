{
    "title": "Making operand an offset in IDA Python",
    "link": "https://reverseengineering.stackexchange.com/questions/6384/making-operand-an-offset-in-ida-python",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I working with ARM executable.\nSometimes I have something like this\n  <code>\n   MOV\n  </code>\n  instruction:\n </p>\n <pre><code>MOV R0, #0xCD548A40\n</code></pre>\n <p>\n  where the number\n  <code>\n   #0xCD548A40\n  </code>\n  is a valid offset but IDA doesn't recognize it as such automatically.\nI tried to reanalyze the executable with enabled option \"\n  <em>\n   Automatically convert data to offsets\n  </em>\n  \" without of any suitable result.\nI also tried to write IDAPython script to fix this, but the only possibility of conversion to offset that I found was:\n </p>\n <pre><code>idaapi.jumpto(address)\nidaapi.process_ui_action(\"OpOffset\", 0)\n</code></pre>\n <p>\n  Which is not too much convenient to use.\n </p>\n <h2>\n  Question\n </h2>\n <blockquote>\n  <p>\n   Given an instruction at specific address and one of its operands in a valid offset range is it possible to convert such numbers to offsets using IDA Python ?\n  </p>\n  <p>\n   Which IDAPython API should I use for it ?\n  </p>\n </blockquote>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "6k",
    "tags": [
        "idapython"
    ],
    "user": "w s",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been using the Ida\n  <code>\n   OpOff\n  </code>\n  function for that. That was\n  <code>\n   idc\n  </code>\n  , not\n  <code>\n   idapython\n  </code>\n  , but\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#OpOff\" rel=\"noreferrer\">\n   https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#OpOff\n  </a>\n  says there's\n  <code>\n   OpOff\n  </code>\n  in\n  <code>\n   idapython\n  </code>\n  as well. In addition, there's another function,\n  <code>\n   OpOffEx\n  </code>\n  , that lets you specify more details. I think one of those is what you need.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Oct 5, 2014 at 20:23",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I happen to just run into this exact issue.\n </p>\n <p>\n  Here's what I did. Replace the\n  <code>\n   for\n  </code>\n  bits with the\n  <code>\n   if\n  </code>\n  bits to just test it on a small bit.\n </p>\n <pre><code>from idautils import *\nfrom idaapi import *\nfrom idc import *\n\n#if True:\n#    if True:\n#        if True:\n#            startea = 0x0F9109DC\n#            endea = 0x0F9109F\nfor segea in Segments():\n    for funcea in Functions(segea, SegEnd(segea)):\n        functionName = GetFunctionName(funcea)\n        for (startea, endea) in Chunks(funcea):\n            for ea in Heads(startea, endea):\n                if idc.GetMnem(ea) != \"MOV\" or idc.get_operand_type(ea, 1) != 5 or  idc.get_str_type(idc.get_operand_value(ea, 1)) != 0:\n                    continue\n                print \"0x%08x\"%(ea), \":\", idc.GetOpnd(ea, 1), idc.get_operand_type(ea, 1)\n                idc.op_plain_offset(ea,1,0)\n</code></pre>\n <p>\n  ```\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Erik Smit",
            "time": "Feb 23, 2018 at 15:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}