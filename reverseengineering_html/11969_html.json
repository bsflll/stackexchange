{
    "title": "KeygenMe - My output has one wrong character",
    "link": "https://reverseengineering.stackexchange.com/questions/11969/keygenme-my-output-has-one-wrong-character",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to get into reverse engineering and am beginning with .NET, attempting various CrackMes and KeygenMes that I've found on the internet. Until now, I haven't really struggled but this latest one is driving me mad:\n </p>\n <p>\n  <a href=\"https://tuts4you.com/download.php?view.1894\" rel=\"nofollow\">\n   https://tuts4you.com/download.php?view.1894\n  </a>\n </p>\n <p>\n  VT link if needed:\n  <a href=\"https://www.virustotal.com/en/file/9bd07d7cbd053f6ad27792487679b18b2f72b589440d8ab81f9cdc4d84301178/analysis/1454947890/\" rel=\"nofollow\">\n   https://www.virustotal.com/en/file/9bd07d7cbd053f6ad27792487679b18b2f72b589440d8ab81f9cdc4d84301178/analysis/1454947890/\n  </a>\n </p>\n <p>\n  Decompiling with ILSpy reveals the license check performed:\n </p>\n <pre><code>    FileStream fileStream = new FileStream(\"key.dat\", FileMode.Open, FileAccess.Read);\n    StreamReader streamReader = new StreamReader(fileStream);\n    string text = streamReader.ReadToEnd();\n    byte[] bytes = Encoding.Unicode.GetBytes(this.TextBox1.Text);\n    SHA512 sHA = new SHA512Managed();\n    sHA.ComputeHash(bytes);\n    if (Operators.ConditionalCompareObjectEqual(this.CodeCrypt(text), Convert.ToBase64String(sHA.Hash), true))\n    {\n        Interaction.MsgBox(\"Good job, make a keymaker\", MsgBoxStyle.Information, \"Done\");\n    }\n    else\n    {\n        Interaction.MsgBox(\"Try again, it is very simple\", MsgBoxStyle.Critical, \"No ....\");\n    }\n    streamReader.Close();\n    fileStream.Close();\n</code></pre>\n <p>\n  Here is the CodeCrypt method:\n </p>\n <pre><code>Key = \"AoRE\";\npublic string CodeCrypt(string text)\n{\n    string text2 = \"\";\n    int arg_0F_0 = 1;\n    int num = Strings.Len(text);\n    checked\n    {\n        for (int i = arg_0F_0; i <= num; i++)\n        {\n            int num2 = i % Strings.Len(this.Key);\n            if (num2 == 0)\n            {\n                num2 = Strings.Len(this.Key);\n            }\n            text2 += Conversions.ToString(Strings.Chr(Strings.Asc(Strings.Mid(this.Key, num2, 1)) ^ Strings.Asc(Strings.Mid(text, i, 1)) - 6));\n        }\n        return text2;\n    }\n}\n</code></pre>\n <p>\n  Seemed quite straight forward to reverse, so I generated my own key generation method:\n </p>\n <pre><code>    private static string Key(string name)\n    {\n        string key = \"\";\n\n        SHA512 sHA = new SHA512Managed();\n        string hash = Convert.ToBase64String(sHA.ComputeHash(Encoding.Unicode.GetBytes(name)));\n\n\n        for (int i = 1; i <= hash.Length; i++)\n        {\n            int num2 = i % 4;\n            if (num2 == 0)\n            {\n                num2 = 4;\n            }\n            var test = Convert.ToChar((\"AoRE\"[num2 - 1] ^ hash[i - 1]) + 6);\n            key += test;\n        }\n        return key;\n\n    }\n</code></pre>\n <p>\n  Then I wrote my license:\n </p>\n <pre><code> using (StreamWriter sw = new StreamWriter(File.Open(\"key.dat\", FileMode.Create), Encoding.Unicode))\n        sw.Write(Key(\"Tom\"));\n</code></pre>\n <p>\n  But it fails. I set a breakpoint to see what the output from CodeCrypt() and the SHA512 hash was, and saw this:\n </p>\n <p>\n  CodeCrypt: 8dmVQYHqap7MbFngePjLSxvaC9\n  <strong>\n   k\n  </strong>\n  VgaDiyR2p550IFO2kzGAuC9yWufBs5LZGbKeR/KAFGVTBb47z4sa686eBTA==\nSHA512: 8dmVQYHqap7MbFngePjLSxvaC9/VgaDiyR2p550IFO2kzGAuC9yWufBs5LZGbKeR/KAFGVTBb47z4sa686eBTA==\n </p>\n <p>\n  The 27th character differs in these outputs and I just don't understand why. What am I missing here?\n </p>\n <p>\n  Thanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "242",
    "tags": [
        "decompilation"
    ],
    "user": "tom982",
    "time": "Feb 8, 2016 at 21:59",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n may be you have some problems implementing the mid thingy  powershell returns this for \"Tom\"  [convert]::ToBase64String(([system.security.cryptography.SHA512Managed]::Create(\"SHA512\")).ComputeHash([Text.encoding]::Unicode.GetBytes(\"Tom\"))) 8dmVQYHqap7MbFngePjLSxvaC9/VgaDiyR2p550IFO2kzGAuC9yWufBs5LZGbKeR/KAFGVTBb47z4sa686eBTA==\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tom982",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for your reply. In the answer below, someone managed to identify that this was an encoding issue with my usage of Convert.ToChar().\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n yeah saw that answer by mike nice find indeed\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your algorithm calculates the correct byte for each character of the base64 encoded hash, however your implementation of that byte's string encoding is not correct.\n </p>\n <p>\n  <code>\n   Convert.ToChar()\n  </code>\n  simply casts the byte to a char.\n </p>\n <p>\n  VB's\n  <code>\n   Strings.Chr()\n  </code>\n  converts the byte to unicode, using the system's current default code page. This is most likely Windows-1252 for US/Western Europe.\n </p>\n <p>\n  For bytes\n  <code>\n   0x00-0x7F\n  </code>\n  , UTF-8 and Windows-1252 have the same binary representation. But things are different for bytes 0x80-0xFF, and it just so happens that the / character is the only character XOR'd to a value greater than 0x7F (it's 0x83).\n </p>\n <p>\n  In Windows-1252, 0x80-0xFF represent single-byte extended characters.\nIn UTF-8, these extended characters require two bytes of storage: 0x01 0x92.\n </p>\n <p>\n  This means that the crackme is buggy, because the license file depends on the system's character encoding (which could change).  The license file should have used unicode consistently.\n </p>\n <p>\n  To fix your code, replace\n  <code>\n   Convert.ToChar()\n  </code>\n  with\n  <code>\n   Encoding.Default.GetString()\n  </code>\n </p>\n <pre><code>var test = Encoding.Default.GetString(\n               new[] { (byte)((\"AoRE\"[num2 - 1] ^ hash[i - 1]) + 6) });\n</code></pre>\n <p>\n  <strong>\n   Edited to add\n  </strong>\n </p>\n <p>\n  One thing I want to point out is that a char in C# is 2 bytes and stores a 16-bit unicode character (unlike C where a char is 1 byte). This is why casting and using the default encoding are different operations.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Mike Haboustak",
            "time": "Feb 9, 2016 at 15:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "tom982",
                    "text": "<span class=\"comment-copy\">Thank you so much! This worked perfectly. My first thought was that it was an encoding problem and I was careful to make everything unicode, but obviously missed this line. Thanks again for restoring my sanity.</span>",
                    "time": null
                }
            ]
        }
    ]
}