{
    "title": "Capstone: What's the purpose of the 'address' argument in cs_disasm()?",
    "link": "https://reverseengineering.stackexchange.com/questions/17946/capstone-whats-the-purpose-of-the-address-argument-in-cs-disasm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to play around with the Capstone Disassembler in C.\n </p>\n <p>\n  In the documentation they show the following use of the\n  <code>\n   cs_disasm()\n  </code>\n  function:\n  <a href=\"http://www.capstone-engine.org/lang_c.html\" rel=\"nofollow noreferrer\">\n   from here\n  </a>\n </p>\n <pre><code>count = cs_disasm(handle, CODE, sizeof(CODE)-1, 0x1000, 0, &insn)\n</code></pre>\n <p>\n  The thing that bugs me is that\n  <code>\n   0x1000\n  </code>\n  . In the documentation (\n  <a href=\"https://github.com/aquynh/capstone/blob/master/include/capstone.h\" rel=\"nofollow noreferrer\">\n   source code actually\n  </a>\n  ) it says:\n </p>\n <blockquote>\n  <p>\n   @address: address of the first instruction in given raw code buffer.\n  </p>\n </blockquote>\n <p>\n  I can't really understand what does that really mean, because from what I understand the\n  <code>\n   insn\n  </code>\n  array is being dynamically allocated and filled, and that's where the instructions will reside (or are they?)\n </p>\n <p>\n  Why is it a fixed value like\n  <code>\n   0x1000\n  </code>\n  ? is that actually address in the memory of the program? (isn't that an illegal address space for a C program to use?)\n </p>\n <p>\n  Thanks in advance\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c",
        "disassemblers",
        "capstone"
    ],
    "user": "shaqed",
    "time": "Apr 10, 2018 at 10:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  that address is the\n  <strong>\n   virtual address\n  </strong>\n  you want to disassemble\n </p>\n <p>\n  for example you have a relative jump\n </p>\n <p>\n  the opcodes will be say\n  <strong>\n   0x74 {imm }\n  </strong>\n  where\n  <strong>\n   {imm}\n  </strong>\n  is relative to the current address \neither in positive direction or in negative direction\n </p>\n <p>\n  so if the  current address is 0x1000  a relative jump with\n  <strong>\n   {5} imm  from 0x1000\n  </strong>\n  in positive direction  should land you in in 0x1005\n </p>\n <p>\n  if the address was 0x2000 it should land you in 0x2005\n </p>\n <p>\n  that is the disassembly on the current line should state\n </p>\n <p>\n  jmp 0x1005 or jmp 0x2005 etc etc\n </p>\n <p>\n  if you do not give the address the disassembly will just say\n  <strong>\n   jmp 5\n  </strong>\n </p>\n <p>\n  here is a piece of similar python code\n </p>\n <pre><code>Python 2.7 (32-bit) interactive window [PTVS 15.6.18072.2-15.0]\n\n>>> from capstone import *\n>>> CODE = b\"\\x74\\xd9\"\n>>> md = Cs(CS_ARCH_X86,CS_MODE_32)\n>>> for i in md.disasm(CODE , 0x1000):\n...     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n... \n0x1000: je  0xfdb  <<<< (0x1000 - 0x25)\n\n>>> for i in md.disasm(CODE , 0x25):\n...     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n... \n0x25:   je  0    <<<< (0x25 - 0x25) \n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Apr 10, 2018 at 11:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}