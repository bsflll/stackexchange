{
    "title": "Arm custom u-boot reversing",
    "link": "https://reverseengineering.stackexchange.com/questions/29478/arm-custom-u-boot-reversing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse a custom u-boot that implements cryptography for the Kernel at runtime (the Kernel at rest is encrypted also in a flash). I can probably ask the IoT vendor to provide the modified code of u-boot, but I want to learn something from this experience.\n </p>\n <p>\n  Some info I gathered:\n </p>\n <ul>\n  <li>\n   <a href=\"https://support.hkvstar.com/file/Hi3519_Datasheet.pdf\" rel=\"nofollow noreferrer\">\n    SOC Data Sheet\n   </a>\n   (with memory layouts)\n  </li>\n  <li>\n   Ram start at 0x8000_0000 (2Â GB)\n  </li>\n  <li>\n   BOOTROM at 0x0400_0000 (64K)\n  </li>\n  <li>\n   BOOTRAM at 0x0401_0000 (64K)\n  </li>\n  <li>\n   Remapable area from 0x0000_0000 to 0x03FF_FFFF (64 Mb)\n  </li>\n  <li>\n   <em>\n    Strings\n   </em>\n   on the\n   <em>\n    u-boot.bin\n   </em>\n   file return:\n   <code>\n    bootcmd=kload 0x82000000; bootm 0x82000000\n   </code>\n  </li>\n  <li>\n   The CPU is Arm Cortex A7 (the SOC have also an A17 but is not the \"default\" one)\n  </li>\n </ul>\n <p>\n  Steps I'm doing to load the binary in IDA:\n  <a href=\"https://i.sstatic.net/9NRae.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Step 1 IDA\" src=\"https://i.sstatic.net/9NRae.png\"/>\n  </a>\n </p>\n <p>\n  IDA asked me for the disassembly memory organizations; I tried a couple of things without success. I think this is the part where I messed up something, and later I can find proper addresses when I try to rebuild the Interrupt Vector Table to start defining functions later.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/sJSdh.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Step 2 IDA\" src=\"https://i.sstatic.net/sJSdh.png\"/>\n  </a>\n </p>\n <p>\n  Which address I should choose in this case based on the information I have?\n </p>\n <p>\n  An example, if I chose to use\n  <code>\n   0x8000_0000\n  </code>\n  as a loading address and redefine some variables to\n  <em>\n   double word\n  </em>\n  (any Interrupt vector table entry is a double word), this is what I get:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/qsf6s.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA example\" src=\"https://i.sstatic.net/qsf6s.png\"/>\n  </a>\n </p>\n <p>\n  I get something unusable (I can't jump at those addresses); I need to understand how to set up IDA in the early stages.\n </p>\n <p>\n  Any help, especially with some theory, is appreciated :)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "982",
    "tags": [
        "ida",
        "disassembly",
        "firmware",
        "arm"
    ],
    "user": "zi0Black",
    "time": "Oct 30, 2021 at 12:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The reset vector location is the address right after\n  <code>\n   0xDEADBEEF\n  </code>\n  (not shown in your snippet).\n </p>\n <p>\n  It is the function that the first instruction's relative branch is branching to.\n </p>\n <p>\n  Tell IDA to load the segment at that address (\n  <code>\n   0x8080xxxx\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "MarianD",
            "time": "Nov 13, 2021 at 4:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "zi0Black",
                    "text": "<span class=\"comment-copy\">I didn't update the post, but I found that <code>0x8080_0000</code> (looking at DATA ref after an auto analysis). I found a forum where someone analyzed the code, of the custom u-boot, under a developing point of view and <code>0x8080_0000</code> is referenced as the loading address, so I guess it's confirmed. A user on Reddit (blessthe28) suggested turning all the <code>0xEXXX</code> into code since those are unconditional ARM codes, and effectively I got some <code>LD</code> to <code>PC</code> register in the order suggested by the user.  <a href=\"https://imgur.com/a/uf8jsya\" rel=\"nofollow noreferrer\">actual IDA status</a></span>",
                    "time": null
                }
            ]
        }
    ]
}