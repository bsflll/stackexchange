{
    "title": "Program Analysis on a Wargame Binary",
    "link": "https://reverseengineering.stackexchange.com/questions/31524/program-analysis-on-a-wargame-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've recently took it upon myself to research more about reverse engineering, I'm currently testing my intermediate skills on various CTF hosting sites. Interestingly enough I have come across a challenge on this particular site:\n </p>\n <p>\n  <a href=\"https://0x0539.net/play/mordor\" rel=\"nofollow noreferrer\">\n   0x0539.net\n  </a>\n </p>\n <p>\n  Now the challenge I'm focused on at this moment in time is\n  <code>\n   Very_Malicious\n  </code>\n </p>\n <p>\n  So far what I've gathered about this challenge is that it has some form of program obfuscation, in this case the obfuscation I've identified is a VM (Virtual Machine) which fetches and decodes a large set of opcodes. The opcodes are stored within the same function as the entry point of the program.\n </p>\n <p>\n  Now I have identified each of the custom VM instructions and have created a very short IDA Python script to extract the bytecode. It isn't ideal but it does what it is suppose to do.\n </p>\n <pre><code>dism_addr = list(FuncItems(0x1b4c))\nfor addr in dism_addr:\n    if \"mov     byte ptr [rax],\" in GetDisasm(addr):\n        print(GetDisasm(addr))\n</code></pre>\n <p>\n  After creating a disassembler for the challenge, I'm curious if there is a better way to solve this challenge rather than spending a couple of hours (2/3) reverse engineering. I've read about Symbolic Execution and my question is:\n </p>\n <p>\n  How would a reverse engineer solve a challenge like this using Symbolic Execution?\n </p>\n <p>\n  Please refrain from posting flags, I just want a thorough explanation on what I could do to solve this more efficiently and quickly.\n </p>\n <p>\n  Any help is appreciated, thank you for taking the time to read my question!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "96",
    "tags": [
        "ida",
        "elf",
        "deobfuscation",
        "x86-64",
        "virtualizers"
    ],
    "user": "Gregory",
    "time": "Feb 8, 2023 at 15:59",
    "comments": [],
    "answers_data": []
}