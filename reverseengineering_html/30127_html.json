{
    "title": "IDA API: obtain operand size prefix (x64)",
    "link": "https://reverseengineering.stackexchange.com/questions/30127/ida-api-obtain-operand-size-prefix-x64",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to tell apart the following two instructions:\n </p>\n <pre><code>8D 02      lea     eax, [rdx]  // auxfix = 0x1810\n67 8D 02   lea     eax, [edx]  // auxfix = 0x810\n</code></pre>\n <p>\n  The only difference is in the insn_t.auxfix field, which seems to hold some operand size flag related to modr/m.\n </p>\n <p>\n  As you can see bit 1 << 12 seems to tell me something ... but how exactly can I interpret this field for x86 and x64?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "138",
    "tags": [
        "ida",
        "assembly",
        "idapython",
        "x86-64",
        "idapro-sdk"
    ],
    "user": "bernd feinman",
    "time": "Mar 9, 2022 at 2:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Open up\n  <code>\n   intel.hpp\n  </code>\n  that ships with the SDK. The aux prefix flags are defined at the top; the one you're interested in is as follows:\n </p>\n <pre><code>#define aux_natad       0x00001000  // addressing mode is not overridden by prefix\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Mar 9, 2022 at 3:13",
            "is_accepted": true,
            "comments": [
                {
                    "user": "bernd feinman",
                    "text": "<span class=\"comment-copy\">Thanks! Seems it's not exposed in ida python.</span>",
                    "time": null
                }
            ]
        }
    ]
}