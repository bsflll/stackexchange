{
    "title": "automatically find and nop an instruction in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/3797/automatically-find-and-nop-an-instruction-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These are my first steps in IDA script, so please be kind.\n </p>\n <p>\n  I want to create some sort of script that, every time it finds the following instruction:\n </p>\n <p>\n  <code>\n   MOV R1, #0x4D080\n  </code>\n </p>\n <p>\n  to automatically replace it with\n </p>\n <p>\n  <code>\n   NOP\n  </code>\n </p>\n <p>\n  I could do it statically (hex edit), but I'm looking for a way to do it on the fly during dynamic debugging.\n </p>\n <p>\n  Any ideas?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "patching",
        "patch-reversing"
    ],
    "user": "newbieReversing",
    "time": "Mar 5, 2014 at 17:56",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n What is the processor and instruction set you working with? What do you mean by \"on the fly\"? Do you expect some kind of self modifying code ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "newbieReversing",
            "text": "<html><body><span class=\"comment-copy\">\n its ARM, android device. I'm using remote debugging (android_server). On the fly I mean 'in-memory', to run a script to do that while attached to the process, not before the library loads.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Actually you can do the following:\n </p>\n <p>\n  Assuming that you know when and where this instruction is located and where it can appear:\n </p>\n <pre><code>#I didn't check this code, use carefully, beware errors\n#You can use idc.FindBinary instead of text search if you know \n#how your assembly instruction is encoded\nimport idautils\nimport idc\n\n\n#static nopification of ARM address\ndef static_nopify_arm(ea):\n    nop = [0xe1, 0xa0, 0x00, 0x00]  # it is a nop encoding taken from wikipedia\n    for i in range(len(nop)):\n        idc.PatchByte(ea + i, nop[i])\n\n\n#searches assembly command by its text\n#generally bad idea, but should work\n#start and end means search area boundaries\ndef static_search_text_and_nopify(asmline, start, end):\n    for h in idautils.Heads(start, end):\n        disasm = idc.GetDisasm(h)\n        if asmline == disasm:\n            static_nopify_arm(h)\n\n\n#The same with dynamic (memory during debugging)\n#Dynamic nopification of ARM address\ndef dynamic_nopify_arm(ea):\n    nop = [0xe1, 0xa0, 0x00, 0x00]  # it is a nop encoding taken from wikipedia\n    for i in range(len(nop)):\n        #I'm not sure that it will work, may be you should do something with memory protection\n        idc.PatchDbgByte(ea + i, nop[i])\n\n\n#searches assembly command by its text\n#generally bad idea, but should work\n#start and end means search area boundaries\n#Code should be recognized by IDA as code before running the function\ndef dynamic_search_text_and_nopify(asmline, start, end):\n    for h in idautils.Heads(start, end):\n        disasm = idc.GetDisasm(h)\n        if asmline == disasm:\n            dynamic_nopify_arm(h)\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Mar 6, 2014 at 12:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Chris Eagle",
                    "text": "<span class=\"comment-copy\">A couple of notes. Be careful with byte order when you patch on ARM. On a little endian architecture, your bytes above would be backward. Second, if the area you are interested in is in a shared library loaded in the process (ie, not loaded in your IDB), IDA may not be able to generate a list of Head bytes as it has done no prior analysis.</span>",
                    "time": null
                }
            ]
        }
    ]
}