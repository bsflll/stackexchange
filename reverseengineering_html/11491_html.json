{
    "title": "Manual Segmentation of Objects in non-Intel Firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/11491/manual-segmentation-of-objects-in-non-intel-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently working on reversing a firmware file for the older TMS320C5 16-bit microprocessor. I'm using IDA pro to do so and I need to manually create segments for each object contained in the file. I'm asking for a step-by-step procedure to do so. Below is more information on why/what.\n </p>\n <p>\n  The TMS320C5, like many other processors, access an internal cache, called the \"Fast Memory\" which is a single 64K page. It loads this memory from the contents of an outside, bigger and slower memory.\n </p>\n <p>\n  The firmware file contains a memory image, which is written directly to the slow memory of the device. It operates using a multi-tasking RTOS. Each tasks/process is stored at different locations in the binary file and do not appear to be in any particular order. From my understanding, each task within the file is preceded by 4 words, one of them indicating the base address where the current task will be loaded in fast memory. In some cases, 2 or 3 tasks can be loaded at the same base address in fast memory.\n </p>\n <p>\n  It seems that each branch/call instruction within a task uses a direct address within the current page (see figure 3). So they are not relative to the PC (Program Counter) or the contents of some other register.\n </p>\n <p>\n  Of course, I'd now like that branching and calling instructions be aligned with the proper functions and sections within their segment. While I do not have a strong grasp on segmentation in IDA, I read some other thread such as\n  <a href=\"https://reverseengineering.stackexchange.com/questions/10957/how-to-deal-with-code-that-change-its-address-among-different-execution/10958#10958\">\n   How to deal with code that change its address among different execution\n  </a>\n  ,\n  <a href=\"https://reverseengineering.stackexchange.com/questions/6907/ida-segmentation-problem/6924#6924\">\n   IDA segmentation problem\n  </a>\n  and\n  <a href=\"https://reverseengineering.stackexchange.com/questions/6067/segments-in-ida-how-to-overcome-noname-problem\">\n   Segments in IDA. How to overcome NONAME problem\n  </a>\n  , but none offer a complete solution to what I need, as I do not believe CS/DS and other Intel segments apply here. I could not find any really useful in the IDA PRO book either.\n </p>\n <p>\n  So far, it seems I have accomplish 50% of what I need by doing the following:\n </p>\n <ol>\n  <li>\n   Creating a new selector using the Selector subview:\n   <strong>\n    View > Open Subviews > Selectors\n   </strong>\n   .\n  </li>\n  <li>\n   Right-click in the subview, select\n   <strong>\n    Add Selector\n   </strong>\n   .\n  </li>\n  <li>\n   Created some examples as per figure 1 below.\n  </li>\n  <li>\n   Using the command-line and\n   <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/312.shtml\" rel=\"nofollow noreferrer\">\n    SetSegmentAttr\n   </a>\n   function, I've change the selector of one of the segment:\n   <strong>\n    SetSegmentAttr(ScreenEA(), SEGATTR_SEL, 1)\n   </strong>\n  </li>\n </ol>\n <p>\n  As an example, there is a task within the firmware which starts at linear address\n  <em>\n   0xCAEFD\n  </em>\n  . This tasks is loaded at\n  <em>\n   0x2C00\n  </em>\n  in fast memory. As such, I'd like to create a segment containing this task and for which the base address is 0x2C00. While I changed the segment of the block using the procedure above, the offset starts at\n  <em>\n   0x9EF02\n  </em>\n  (see figure 2). I expected it to starts at\n  <em>\n   0x0\n  </em>\n  .\n </p>\n <p>\n  Figure 1:\n  <a href=\"https://i.sstatic.net/kONJt.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 1: Creating a new selector\" src=\"https://i.sstatic.net/kONJt.png\"/>\n  </a>\n </p>\n <p>\n  Figure 2:\n  <a href=\"https://i.sstatic.net/CnxyF.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Figure 2: Resulting addresses of the segment\" src=\"https://i.sstatic.net/CnxyF.png\"/>\n  </a>\n </p>\n <p>\n  I suspect I somewhat need to change the offset somehow. I'm aware of the\n  <strong>\n   Move Segment\n  </strong>\n  option, but it seems it \"physically\" change the segment to the address, which I do not want since some tasks share the same base address in fast memory (or are close to each other and will overwrite another task). What are the steps I need to complete in order to isolate each task into its own segment so that branches and calls align? For example, in figure 3, I would like IDA to link the\n  <code>\n   BCND 2C1Dh, geq\n  </code>\n  to the corresponding\n  <em>\n   0x2C1D\n  </em>\n  location within the segment, rather than the corresponding linear address.\n </p>\n <p>\n  Figure 3:\n  <a href=\"https://i.sstatic.net/Xo9lv.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Example of a branching instruction within the task\" src=\"https://i.sstatic.net/Xo9lv.png\"/>\n  </a>\n </p>\n <p>\n  Thanks for any help\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "457",
    "tags": [
        "ida",
        "disassembly",
        "firmware",
        "segmentation"
    ],
    "user": "InfectedPacket",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/508.shtml\" rel=\"nofollow noreferrer\">\n  this\n </a>\n may be of help, especially the examples.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not an answer, really, but too long for a comment; also, i know the x86 architecture well, but have no idea about the TMS320C5, so please take this with a grain of salt.\n </p>\n <p>\n  I'm afraid that what you're trying to do doesn't match well with how IDA segmentation works, which basically stems from the 80x86 way of doing things. Which means that segment registers contain the upper 16 bit of the 20 bit address, offsets contain the lower 16 bit; and to calculate the physical address, you'd do\n  <code>\n   segment<<4 | offset\n  </code>\n  .\n </p>\n <p>\n  That means that an address like, say,\n  <code>\n   1234:0020\n  </code>\n  is equivalent to\n  <code>\n   1236:0000\n  </code>\n  - both map to the physical address of\n  <code>\n   12360\n  </code>\n  . Now if your binary gets loaded at segment\n  <code>\n   1234\n  </code>\n  - physical address\n  <code>\n   12340\n  </code>\n  - there is no \"intrinsic\" way of telling what the offset of\n  <code>\n   12360\n  </code>\n  is; it could be\n  <code>\n   0020\n  </code>\n  within the\n  <code>\n   1234\n  </code>\n  segment, or\n  <code>\n   0000\n  </code>\n  in the\n  <code>\n   1236\n  </code>\n  segment. IDA segmentation will just tell the disassembler that a new segment starts at the\n  <code>\n   12360\n  </code>\n  physical address, so if the\n  <code>\n   ds\n  </code>\n  register is set to that segment, then\n  <code>\n   ds:0\n  </code>\n  accesses the variable that\n  <code>\n   s defined at that\n  </code>\n  12360` address.\n </p>\n <p>\n  This is different to your processor insofar that code will never be swapped in or out, code regions never overlap in\n  <em>\n   physical\n  </em>\n  memory, and offsets within segments always start at\n  <code>\n   0000\n  </code>\n  . Even if, in pathological cases, the metainfo .EXE file states to load a segment to offset\n  <code>\n   0200\n  </code>\n  , the loader will generate a new segment, fill the first 0x200 bytes with\n  <code>\n   00\n  </code>\n  , and load the contents from the .EXE file behind this zero'd out block.\n </p>\n <p>\n  What IDA can't do - as far as i know - is something like \"make\n  <code>\n   0000-CAEFD\n  </code>\n  one segment; then start another segment at\n  <code>\n   C82FD\n  </code>\n  in which the address\n  <code>\n   CAEFD\n  </code>\n  has an offset of\n  <code>\n   2C00\n  </code>\n  , because that would make the meaning of the file part between\n  <code>\n   C82FD\n  </code>\n  and\n  <code>\n   CAEFD\n  </code>\n  ambigous, you wouldn't know which segment it belongs to.\n </p>\n <p>\n  In your case, when you said the base address should be\n  <code>\n   2C00\n  </code>\n  , you told IDA that address\n  <code>\n   2C00\n  </code>\n  in the file should equal address\n  <code>\n   0000\n  </code>\n  in the segment. This is why it was showing offset\n  <code>\n   9EF02\n  </code>\n  ; if\n  <code>\n   2C00\n  </code>\n  (file position) corresponds to\n  <code>\n   0000\n  </code>\n  (segment start), then\n  <code>\n   CAEFD-2C00=9EF02\n  </code>\n  (file position) corresponds to\n  <code>\n   9EF02\n  </code>\n  (position within segment). Try using\n  <code>\n   9EF02\n  </code>\n  as segment start; the byte at\n  <code>\n   CAEFD\n  </code>\n  is\n  <code>\n   2C00\n  </code>\n  bytes into that segment so it has an offset of\n  <code>\n   2C00\n  </code>\n  .\n </p>\n <p>\n  If that doesn't work for you, i'd do the following:\n </p>\n <ul>\n  <li>\n   If the size of my original firmware isn't a multiple of 64K, append\n   <code>\n    \\0\n   </code>\n   bytes until it is.\n  </li>\n  <li>\n   When i identify a task and the offset it should be executed at, append as many\n   <code>\n    0\n   </code>\n   bytes as are needed to reach the start address of that task, copy the task itself, and append more\n   <code>\n    \\0\n   </code>\n   bytes to reach a multiple of 64K again.\n  </li>\n </ul>\n <p>\n  Doing this, you'll get a file that has one big block that contains the original firmware, and multiple 64-KB-blocks that contain just one task and a bunch of zeroes each.\n </p>\n <p>\n  Now, when you load that file, define one segment for the first big block, and one segment for each of the appended 64 KB chunks. That way, you can have one segment per task; segments are easy to define since each of them starts at a multiple of\n  <code>\n   10000\n  </code>\n  and all but the first are exactly\n  <code>\n   10000\n  </code>\n  bytes in size, and you have a 1:1 relation between\n  <code>\n   file byte\n  </code>\n  and\n  <code>\n   memory byte\n  </code>\n  which should make IDA happy.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Dec 10, 2015 at 8:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "InfectedPacket",
                    "text": "<span class=\"comment-copy\">Hello. So I finally made it happen. I noticed that the firmware appears to be a live snapshot of the memory, as such, I noticed heap management blocks reoccurring around each 1K. Each block contained a value indicating where exactly in the page the next instruction was. Combined with your proposition and IDAPython I was able to cut the file using these blocks. I wrote an empty 64K page, then using this \"bookmark\" and the file.seek(), I wrote the blocks in the 64k file. Everything aligns perfectly now. Thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}