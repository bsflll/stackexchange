{
    "title": "Debugging of any x86(_64) executable producing strange results under Parallels + Windows on Arm",
    "link": "https://reverseengineering.stackexchange.com/questions/32087/debugging-of-any-x86-64-executable-producing-strange-results-under-parallels",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Recently, I have been experimenting with using an M1 (Arm64) Mac full-time for RE work, including Windows on Arm under Parallels with x86(_64) binaries. From several online sources discussing this use case, such as blogs, I was made confident that this would work without much headache. Instead however, I have been unable to debug a single executable.\n </p>\n <p>\n  So far, I have tried frida-tools, Binary Ninja and x64dbg with the latter being my primary tool. All tools have exhibited similar errors or behaviours.\n </p>\n <p>\n  The tl;dr is that all binaries I have tried to debug end up producing at least one\n  <code>\n   STATUS_INSTRUCTION_MISALIGNMENT\n  </code>\n  followed by\n  <code>\n   EXCEPTION_ACCESS_VIOLATION\n  </code>\n  very early in process load, ending up trying to access an address in the first page of memory (< 0x1000). CLI-only tools don't seem to be affected - only those with a GUI.\nOriginally I thought this was some exception-vectoring related anti-debug technique to detect debuggers, but it is also happening with benign applications, such as Windows internal tools and ShellExView. I have also had it happen with 32-bit applications. Importantly, all of these apps work fine without debugging.\n </p>\n <p>\n  Attached is an example call stack from x64dbg:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/7ieyO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Call stack from example\" src=\"https://i.sstatic.net/7ieyO.png\"/>\n  </a>\n </p>\n <p>\n  (top line shows the 0xC7F address which ultimately faults)\n </p>\n <p>\n  Trying to investigate these call sites confuses me more. Some of it is located in executable sections, but many of the instructions are shown in red \"???\". Other parts are seemingly located in RW heap memory according to the memory map... I can't make heads or tails of it.\nAny ideas?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "252",
    "tags": [
        "debugging",
        "x86-64"
    ],
    "user": "Benjamin Crawford Ctrl-Alt-Tut",
    "time": "Jul 22, 2023 at 20:44",
    "comments": [
        {
            "user": "Adam Craig",
            "text": "<html><body><span class=\"comment-copy\">\n I need to have 50 rep to comment so here goes with an answer .. Did you find a solution to this?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So it's not well documented - but it looks like this setup isn't possible, as effectively you're debugging an x86_64 executable being JIT recompiled to Arm64. This is why the memory seems corrupt and nothing seems to make sense.\n </p>\n <p>\n  The only valid setup is to run the entire OS under emulation e.g. via QEMU. All solutions for this at the moment are, however, dog slow.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Benjamin Crawford Ctrl-Alt-Tut",
            "time": "Jul 23, 2023 at 15:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have you tried\n  <a href=\"https://customerconnect.vmware.com/downloads/get-download?downloadGroup=FUS-PUBTP-22H2\" rel=\"nofollow noreferrer\">\n   vmware fusion\n  </a>\n  ? I think you should have better results with it for this purpose.\n </p>\n <p>\n  Also you might want to watch\n  <a href=\"https://youtu.be/0eR8yrDLV5M\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  , this youtube video basically describes how to setup the m1 macbook for malware analysis which means debugging x86-64 binaries, and they seem to have it working for them.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "rotem.salinas",
            "time": "May 5, 2024 at 21:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}