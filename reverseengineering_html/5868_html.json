{
    "title": "How can I view FS:[0] with windbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/5868/how-can-i-view-fs0-with-windbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems that Windows 8 broke Ollydbg as several\n  <code>\n   ntdll\n  </code>\n  functions keep throwing exception\n  <code>\n   0xC0000008\n  </code>\n  and crashing my debugger.\n </p>\n <p>\n  I am now using Windbg.  But, I am unable to view\n  <code>\n   FS\n  </code>\n  (specifically\n  <code>\n   FS:[0]\n  </code>\n  ).  How can I get a dump of\n  <code>\n   FS\n  </code>\n  via Windbg? I've tried googling to no avail.  I am specifically interested in SEH, but all I can find is dumping TEB or PEB.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 3,
    "views": "9k",
    "tags": [
        "x86",
        "windbg"
    ],
    "user": "Jason",
    "time": "Jul 16, 2014 at 7:23",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n 0xc0000008 is triggered by a call to CloseHandle() with an invalid handle value, while a debugger is present.  It is not a fatal exception, and is a common anti-debugging trick.  Why do you think that Windows 8 is responsible?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason",
            "text": "<html><body><span class=\"comment-copy\">\n Debugging the same app under Windows 7 with the same debugger does not cause any problems.  I figured it was something with the OS.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  SEH chain can be viewed in WinDbg by issuing\n  <code>\n   !exchain\n  </code>\n  command.\n </p>\n <pre><code>0:000> !exchain    # display the SEH chain\n0012ffb0: wireshark!_except_handler4+0 (00522555)\n0012ffe0: kernel32!_except_handler3+0 (7c839ac0)\n  CRT scope  0, filter: kernel32!BaseProcessStart+29 (7c843882)\n                func:   kernel32!BaseProcessStart+3a (7c843898)\nInvalid exception stack at ffffffff\n</code></pre>\n <p>\n  <code>\n   FS:[0]\n  </code>\n  is the pointer to the start of\n  <strong>\n   SEH chain\n  </strong>\n  . You can walk through the output produced by\n  <code>\n   !exchain\n  </code>\n  to find\n  <code>\n   FS:[0]\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "john4tech",
            "time": "Jul 16, 2014 at 8:55",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you're looking to find the base address of a segment based on its selector, you can use\n  <code>\n   dg\n  </code>\n  <em>\n   <code>\n    <selector>\n   </code>\n  </em>\n  ; in this context you would use\n  <code>\n   dg fs\n  </code>\n  :\n </p>\n <pre><code>0:000> dg fs\n                                  P Si Gr Pr Lo\nSel    Base     Limit     Type    l ze an es ng Flags\n---- -------- -------- ---------- - -- -- -- -- --------\n003B 7ffdf000 00000fff Data RW Ac 3 Bg By P  Nl 000004f3\n</code></pre>\n <p>\n  You can see above that the\n  <code>\n   Base\n  </code>\n  of\n  <code>\n   fs\n  </code>\n  is\n  <code>\n   7ffdf000\n  </code>\n  , so\n  <code>\n   FS:[0] == [7ffdf000]\n  </code>\n  .\n </p>\n <pre><code>0:000> db 7ffdf000\n7ffdf000  1c f7 1d 00 00 00 1e 00-00 f0 1c 00 00 00 00 00  ................\n7ffdf010  00 1e 00 00 00 00 00 00-00 f0 fd 7f 00 00 00 00  ................\n7ffdf020  0c 13 00 00 bc 0f 00 00-00 00 00 00 2c f0 fd 7f  ............,...\n7ffdf030  00 a0 fd 7f 00 00 00 00-00 00 00 00 00 00 00 00  ................\n7ffdf040  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................\n7ffdf050  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................\n7ffdf060  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................\n7ffdf070  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................\n</code></pre>\n</div>\n</body></html>",
            "votes": "16",
            "user": "Jason Geffner",
            "time": "Jul 16, 2014 at 13:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If your intersted in viewing SEH, consider using\n  <a href=\"http://pedramamini.com/PaiMei/docs/PyDbg/public/pydbg.pydbg.pydbg-class.html#seh_unwind\" rel=\"nofollow\">\n   pydbg SEH unwinding\n  </a>\n  for that kind of purposes.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "see ya",
            "time": "Jul 16, 2014 at 4:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}