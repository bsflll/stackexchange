{
    "title": "move with sign extension in c code",
    "link": "https://reverseengineering.stackexchange.com/questions/13904/move-with-sign-extension-in-c-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm quite confused with the\n </p>\n <blockquote>\n  <p>\n   movsx(move with sign extension)\n  </p>\n </blockquote>\n <p>\n  I'm trying to convert assembly code to C. \nbut stuck with movsx part.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Y0ujT.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Y0ujT.png\"/>\n  </a>\n </p>\n <p>\n  this is the code I got so far.\n </p>\n <pre><code>#include <stdio.h>\n#include <windows.h>\n\nint main(){\n    char str[24] = \"Aegisone security\";//17+1\n\n    char *a;\n    a = &str[24]-24;\n    char a2 = -*(a+6);\n\n\n    //str[32] = *(a+6);\n\n    //char str2[4]=a;\n    MessageBox(0,\"Hello\",\"reversing\",0);\n    return 0;\n}\n</code></pre>\n <p>\n  can you help show me some example to usage of movsx thing in c code?\nthe part I troubled is\n </p>\n <pre><code>MOVSX EDX , BYTE PTR DS:[ECX+6]\nMOV DWORD PTR SS: [EBP-20],EDX'\n</code></pre>\n <p>\n  I need some more detail explanation about this part\n  \n\n  my C-code above showing little bit different\n </p>\n <pre><code>MOVESX EDX,BYTE PTR DS:[ECX+6]\nNEG EDX\nMOV BYTE PTR SS:[EBP-20],DL\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "702",
    "tags": [
        "disassembly",
        "assembly",
        "decompilation",
        "c"
    ],
    "user": "Mike Kim",
    "time": "Nov 12, 2016 at 16:12",
    "comments": [
        {
            "user": "Mike Kim",
            "text": "<html><body><span class=\"comment-copy\">\n guys, always it is I found answer myself after 30 minutes I asked a question. change char a2 = -*(a+6) to   int a2 = *(a+6)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The C compiler handles sign extension automatically for signed variables when they're converted into bigger/wider signed variables. However, you defined that variable as a\n  <code>\n   char\n  </code>\n  which the standard does not enforce sign-ness for, so the compiler is not obligated to sign-extend that variable assignment.\n </p>\n <p>\n  But the most important part is that only when you replaced the\n  <code>\n   char\n  </code>\n  with an\n  <code>\n   int\n  </code>\n  you created a variable 4 bytes long that could actually be sign extended.\n </p>\n <p>\n  Last but not least, removing the minus mark obviously removed the\n  <code>\n   NEG EDX\n  </code>\n  instruction.\n </p>\n <p>\n  If you didn't, looks like you still need to change the assignment line (\n  <code>\n   str[32] = *(a+6);\n  </code>\n  ) to treat the destination as a dword sized array, because you're interested in assigning the entire dword. Your code will still have\n  <code>\n   MOV BYTE PTR SS:[EBP-20],DL\n  </code>\n  instead of\n  <code>\n   MOV DWORD PTR SS: [EBP-20],EDX\n  </code>\n  unless you have something like\n  <code>\n   (int*)str[8] = *(a+6);\n  </code>\n </p>\n <p>\n  I replaced the 32 with an 8 because we're indexing 4-byte long array instead of a single byte long array.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Nov 12, 2016 at 16:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}