{
    "title": "How to efficiently simplify obfuscated formula in QF_BV logic with Z3?",
    "link": "https://reverseengineering.stackexchange.com/questions/3606/how-to-efficiently-simplify-obfuscated-formula-in-qf-bv-logic-with-z3",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to know if there are efficient ways to simplify arithmetic formula expression over bit-vectors with\n  <a href=\"http://z3.codeplex.com/\" rel=\"nofollow\">\n   Microsoft Z3\n  </a>\n  . But, first, I would like to explain a bit the problem. Lets start with an example:\n </p>\n <pre><code>x + y == (x ^ y) + 2 * (x & y)\n</code></pre>\n <p>\n  Both\n  <code>\n   x + y\n  </code>\n  and\n  <code>\n   (x ^ y) + 2 * (x & y)\n  </code>\n  are, in fact, coding the addition over bit-vectors. Of course, the right hand formula is used to confuse a reverser when found in the binary program. I try to find tools and techniques to simplify the obfuscated formula and find the simpler form of the formula (left-hand).\n </p>\n <p>\n  For this, I looked at the Python interface of Z3, trying to see what I can get out of it. So, defining the obfuscated formula is done like this:\n </p>\n <pre><code>>>> from z3 import *\n>>> x = BitVec('x', 32)\n>>> y = BitVec('y', 32)\n>>> fun1 = (x ^ y) + 2 * (x & y)\n</code></pre>\n <p>\n  Now, lets try to simplify this function with the help of the built-in function\n  <code>\n   simplify\n  </code>\n  :\n </p>\n <pre><code>>>> simplify((x ^ y) + 2 * (x & y))\n(x ^ y) + 2*~(~x | ~y)\n</code></pre>\n <p>\n  Not really convincing... But, lets try to prove the equivalence with\n  <code>\n   x + y\n  </code>\n  :\n </p>\n <pre><code>>>> prove((x ^ y) + 2 * (x & y) == x + y)\nproved\n>>> prove((x ^ y) + 2 * (x & y) == x - y)\ncounterexample\n[y = 2164268032, x = 2139094080]\n</code></pre>\n <p>\n  I added a negative result to show that it is also possible to disqualify a formula.\n </p>\n <p>\n  So, if the\n  <code>\n   simplify\n  </code>\n  function is not really convincing, it is still possible to try, in a brute-force manner to compare the unknown formula with a list of simpler and usual formula one after one. But, this way seems extremely inefficient to me. I guess I am missing some smarter algorithms to simplify formula.\n </p>\n <p>\n  I would like to know if there are some already existing tools or well-known techniques to perform in a more efficient manner than the brute-force approach. So, if someone has some hints or comments about this, it would be more than welcome.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "deobfuscation"
    ],
    "user": "perror",
    "time": "Feb 3, 2014 at 8:27",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n Try\n <code>\n  help_simplify()\n </code>\n - some of the options may do what you are looking for.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n I already tried several of these tactics (\n <code>\n  simplify(fun1, som=True)\n </code>\n ), but with no success either. Maybe I missed the right set of tactics to use. If you have such a list, I would be happy to know your suggestion !\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n The question isn't very clear.  What does \"efficiently\" mean, and what makes\n <code>\n  simplify\n </code>\n \"inefficient\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n You're right. I meant more efficiently than a brute-force approach where you check all formula against the one you are investigating.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Z3 is an SMT solver.  Its job is to decide the satisfiability of formulas passed in by a user, where the formulas may mix terms from the various theories that Z3 supports.  Coincidentally, in order to make its own job easier by producing a \"simpler\" formula than the one passed in by the user, it implements a simplifier which is not very sophisticated technologically and largely consists of term rewriting rules.\n </p>\n <p>\n  Although the user could pose a query regarding the equivalence of two expressions, Z3's only involvement would be to solve the formula.  I.e. Z3 will not generate candidates for you.  It is your job as the user to provide the candidates and query an SMT solver as to their satisfiability.\n </p>\n <p>\n  In general, synthesizing functions is a challenging task in program synthesis.  These queries are naturally posed in second-order logic, but modern SMT solvers support only restrictions of first-order logic.  To sidestep this problem, some published work takes the route of eliminating most candidates from consideration ahead of time, thereby keeping the number of equivalence queries small.  See for example\n  <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.93.8843&rep=rep1&type=pdf\">\n   this paper\n  </a>\n  or\n  <a href=\"http://spinroot.com/spin/Workshops/ws13/spin2013_submission_16.pdf\">\n   this one\n  </a>\n  .  Another approach is to specify a template describing what the candidate functions are allowed to look like; a simple example is\n  <a href=\"http://theory.stanford.edu/~ataly/Papers/pldi12.pdf\">\n   this paper\n  </a>\n  .  These approaches keep the formula to first-order logic, or even quantifier-free.\n </p>\n <p>\n  In general, you should research program synthesis.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Rolf Rolles",
            "time": "Feb 3, 2014 at 9:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}