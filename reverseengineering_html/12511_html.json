{
    "title": "Dump a child process created by malware with an ALTERNATIVE process hollowing process",
    "link": "https://reverseengineering.stackexchange.com/questions/12511/dump-a-child-process-created-by-malware-with-an-alternative-process-hollowing-pr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing a malware which uses a variant of Process Hollowing to create a process which I can't dump. I don't know what I'm doing wrong. I always see the suggestion to stop at GetContextThread , but this process hollowing doesn't call to that Api.\n </p>\n <p>\n  This is the exactly what happens:\n </p>\n <ul>\n  <li>\n   <p>\n    CreateProcessA: creates a new process and the process creation flag            0x00000004 is used to create the process in the suspended state\n   </p>\n   <ul>\n    <li>\n     <p>\n      ReadProcessMemory: reads image base of the suspended process\n     </p>\n    </li>\n    <li>\n     <p>\n      NtCreateSection: creates two read/write/execute sections\n     </p>\n    </li>\n    <li>\n     <p>\n      ZwMapViewOfSection: maps the read/write/execute sections into the malware’s address space\n     </p>\n    </li>\n    <li>\n     <p>\n      ZwMapViewOfSection: maps the second section into the suspended process’s address space (this section is therefore shared between both processes).\n     </p>\n    </li>\n    <li>\n     <p>\n      ReadProcessMemory: reads image base of the suspended process’s image into section 1\n     </p>\n    </li>\n    <li>\n     <p>\n      ReadProcessMemory: reads image base of the malware’s image into section 2\n     </p>\n    </li>\n    <li>\n     <p>\n      NtMapViewOfSection: overwrites the suspended process's entry point code by mapping section 1 to the new process base address\n     </p>\n    </li>\n    <li>\n     <p>\n      ResumeThread: resumes the thread of the suspended process executing the injected code\n     </p>\n    </li>\n   </ul>\n  </li>\n </ul>\n <p>\n  Knowing this, and due english its my not maternal language and there are too much technical words... which call of the apis above should I have a look to find the EP? Probably the last NtMapViewOfSection ?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ollydbg",
        "malware",
        "dumping"
    ],
    "user": "Peterlagunas",
    "time": "Apr 23, 2016 at 17:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The technique you described above is known as\n  <a href=\"https://www.google.com/?q=%22dynamic%20forking%22%20OR%20%22process%20hollowing%22\" rel=\"nofollow noreferrer\">\n   \"dynamic forking\" or \"process hollowing\"\n  </a>\n  .\n </p>\n <p>\n  You can find the entry point of the child process by following the steps described in\n  <a href=\"https://reverseengineering.stackexchange.com/a/8431/1562\">\n   https://reverseengineering.stackexchange.com/a/8431/1562\n  </a>\n  , though I'd recommend setting a breakpoint on\n  <a href=\"http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FThread%20Context%2FNtSetContextThread.html\" rel=\"nofollow noreferrer\">\n   <code>\n    NtSetContextThread()\n   </code>\n  </a>\n  instead of on\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680632.aspx\" rel=\"nofollow noreferrer\">\n   <code>\n    SetThreadContext()\n   </code>\n  </a>\n  since the malware may skip the latter and instead directly call the former.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peterlagunas",
                    "text": "<span class=\"comment-copy\">I don't have any call to that API, what's more the process I have its like that appears in here: <a href=\"https://www.lexsi.com/securityhub/overview-kronos-banking-malware-rootkit/?lang=en\" rel=\"nofollow noreferrer\">lexsi.com/securityhub/overview-kronos-banking-malware-rootkit/…</a> After creating the process with CreateProcessInternalW there are calls to the API's I posted , and finally this ones: CreateThreadEx   Calling NtResumeThread() to run the new process.  maybe Im missing something ?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Great, then the \"entry point\" is likely the <code>lpStartAddress</code> parameter passed to <code>CreateThreadEx()</code>.</span>",
                    "time": null
                },
                {
                    "user": "Peterlagunas",
                    "text": "<span class=\"comment-copy\">Thank you for replaying. The 5th argument points me to nowhere As you can see here <a href=\"http://imgur.com/Nd3Iwze\" rel=\"nofollow noreferrer\">imgur.com/Nd3Iwze</a>, those are the parameters and that direction doesn't even exist in my memory map. I'm sorry for failing over and over again and probably bugging you but I really need to get through this</span>",
                    "time": null
                },
                {
                    "user": "Peterlagunas",
                    "text": "<span class=\"comment-copy\">Okay, about the last comment, I imaginated that I couldn't access cause of a kind of protection ? Because as I have readed again the post you told me , it appears as I have not rights to enter in the memory of the process. So my new question is some of the API's before could protect it? Where would you recommend me to take a look ? and thank you so much again</span>",
                    "time": null
                },
                {
                    "user": "Peterlagunas",
                    "text": "<span class=\"comment-copy\">Thank you very much!!! I have dumped it already :) thank you again !</span>",
                    "time": null
                }
            ]
        }
    ]
}