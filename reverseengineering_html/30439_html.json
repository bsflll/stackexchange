{
    "title": "What does the code do?",
    "link": "https://reverseengineering.stackexchange.com/questions/30439/what-does-the-code-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://challenges.re/64/\" rel=\"nofollow noreferrer\">\n   Challenge #64\n  </a>\n </p>\n <p>\n  What does this code do?\n </p>\n <p>\n  An array of\n  <code>\n   array[x][y]\n  </code>\n  form is accessed here. Try to determine the dimensions of the array, at least partially, by finding y.\n </p>\n <pre><code>_array$ = 8\n_x$ = 12\n_y$ = 16\n_f  PROC\n    mov eax, DWORD PTR _x$[esp-4]\n    mov edx, DWORD PTR _y$[esp-4]\n    mov ecx, eax\n    shl ecx, 4\n    sub ecx, eax\n    lea eax, DWORD PTR [edx+ecx*8]\n    mov ecx, DWORD PTR _array$[esp-4]\n    fld QWORD PTR [ecx+eax*8]\n    ret 0\n_f  ENDP\n</code></pre>\n <p>\n  At first I think there is a mistake in the question. Because I only see three variables here, one for array address, the one x and one y, so I assume it's actually a 2d array of double, not a 3d as in\n  <em>\n   \"An array of\n   <code>\n    array[x][y]\n   </code>\n   \"\n  </em>\n  .\n </p>\n <p>\n  Then I was stuck because eventually the program loads\n  <code>\n   array[8y+192x]\n  </code>\n  , and x and y can be anything.\n </p>\n <p>\n  So I figured this must be a 3d array of double, with the third dimension given. I still couldn't figure it out so I tried to write my own program and use Godbolt to give me assembly. After a few trials I got something pretty close to the original program:\n </p>\n <p>\n  <a href=\"https://godbolt.org/z/bT7bq8exa\" rel=\"nofollow noreferrer\">\n   Something close\n  </a>\n </p>\n <p>\n  However I'm still having difficulty to match my program with the original question. I think I'm pretty close but how do I proceed from here? I have a hunch that y is also 24 in the original question, but not 100% sure.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "169",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "Nicholas Humphrey",
    "time": "Jun 6, 2022 at 19:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is somewhat of a symbolic simplification. If you execute code from start of the procedure, then just before ret these are the relevant changes to the state of the program - ignoring registers\n </p>\n <pre><code>float_st0          = @64[array + (y + x * 0x78) * 0x8]\nfloat_stack_ptr    = float_stack_ptr + 0x1\n</code></pre>\n <p>\n  where\n  <code>\n   st0\n  </code>\n  has been loaded with a 64bit value from a location.\n </p>\n <pre><code>array + (y + x * 0x78) * 0x8\n</code></pre>\n <p>\n  In a 1D array the way you access any index is\n </p>\n <pre><code>array + index * sizeof(member)\n</code></pre>\n <p>\n  The size of the array member is 8\n  <code>\n   sizeof(double)\n  </code>\n  here so the index is\n </p>\n <pre><code>y + x * 0x78\n</code></pre>\n <p>\n  2D arrays are laid out linearly in memory. Accessing second dimension requires the size of first dimension to be known -\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/35lGz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/35lGz.png\"/>\n  </a>\n </p>\n <p>\n  In the above example to access\n  <code>\n   array[1][2]\n  </code>\n  we need to access it like\n </p>\n <pre><code>array + sizeof(int) * (2 + 1 * 3)\n</code></pre>\n <p>\n  In the op\n  <code>\n   x\n  </code>\n  is getting multiplied by 0x78 - so the size of the\n  <code>\n   y\n  </code>\n  dimension is 0x78 members.\n </p>\n <p>\n  Additionally I could replicate the problem code to an extent\n  <a href=\"https://godbolt.org/z/8n74safKd\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n <p>\n  With this code and x86 MSVC v19.0, optimization flag /Ox\n </p>\n <pre><code>double load(double array[][0x78], int x, int y) {\n    return array[x][y];\n}\n</code></pre>\n <p>\n  we get\n </p>\n <pre><code>_array$ = 8                                   ; size = 4\n_x$ = 12                                                ; size = 4\n_y$ = 16                                                ; size = 4\n_load   PROC\n        mov     ecx, DWORD PTR _x$[esp-4]\n        mov     eax, DWORD PTR _y$[esp-4]\n        shl     ecx, 4\n        sub     ecx, DWORD PTR _x$[esp-4]\n        lea     ecx, DWORD PTR [eax+ecx*8]\n        mov     eax, DWORD PTR _array$[esp-4]\n        fld     QWORD PTR [eax+ecx*8]\n        ret     0\n_load   ENDP\n</code></pre>\n <p>\n  PS : I ran this through a miasm based simplification - code\n  <a href=\"https://gist.github.com/sudhackar/6590295409de25599cb409b3af6ebf9b\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "sudhackar",
            "time": "May 26, 2022 at 7:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nicholas Humphrey",
                    "text": "<span class=\"comment-copy\">Thanks a lot! I'll read through and take notes. BTW also thanks for introducing the miasm tool, I had no idea it exists.</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">@NicholasHumphrey If this solves the question you asked, you can accept it. See <a href=\"https://stackoverflow.com/help/someone-answers\">What should I do when someone answers my question?</a></span>",
                    "time": null
                },
                {
                    "user": "Nicholas Humphrey",
                    "text": "<span class=\"comment-copy\">Done! Thanks man</span>",
                    "time": null
                }
            ]
        }
    ]
}