{
    "title": "Understanding pseudocode containing a math operation in a variable assignment [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8655/understanding-pseudocode-containing-a-math-operation-in-a-variable-assignment",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions on\n       <b>\n        software development\n       </b>\n       are off-topic here, but can be asked on\n       <a href=\"http://stackoverflow.com/about\">\n        Stack Overflow\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2015-04-10 15:43:18Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8655/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  So I'm trying to reverse engineer a LFSR encryption scheme using IDA, and am (hopefully) pretty close to cracking it.\n </p>\n <p>\n  The code in particular iterates through every byte of the encrypted file, decrypts it and stores it in memory (var v22). What stumps me however, is the way the pseudocode seems to do some operations on the variable before declaring it â€“ which I have no idea how to \"translate\" into something a bit less cryptic.\n </p>\n <p>\n  I've included the code below:\n </p>\n <pre><code>file = fopen((const char *)&bin_filename, \"rb\");\nfseek(file, 0, 0);\n\nmemset(&v22, 0, 0x80000u);\ni = 0;\nwhile ( feof(file) == 0 ){\n    fread(&byte, 1u, 1u, file);\n\n    if ( i % 4 ){\n        decryptedByte = DecryptByte(byte);\n\n        // What happens here on the left hand side of the bitwise OR assignment?\n        *(&v22 + i / 4) |= decryptedByte << 8 * (i - ((i + ((unsigned int)(i >> 31) >> 30)) & 0x1C));\n    }\n    else {\n        decryptedByte = DecryptByte(byte);\n        *(&v22 + i / 4) = decryptedByte;\n    }\n\n    ++i;\n}\n</code></pre>\n <p>\n  As indicated by my comment above, what I don't understand is the meaning of\n  <code>\n   *(&v22 + i / 4) =\n  </code>\n  in the context of a variable assignment.\n </p>\n <p>\n  How does\n  <code>\n   decryptedByte\n  </code>\n  get assigned to a math equation?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "113",
    "tags": [
        "decompilation",
        "deobfuscation",
        "decryption"
    ],
    "user": "Bjarke",
    "time": "10 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   v22\n  </code>\n  is the first byte of an 0x80000-byte buffer.\n </p>\n <p>\n  <code>\n   &v22\n  </code>\n  is a pointer to that buffer.\n </p>\n <p>\n  <code>\n   &v22 + i / 4\n  </code>\n  is a pointer to the\n  <code>\n   i/4\n  </code>\n  'th byte in that buffer.\n </p>\n <p>\n  <code>\n   *(&v22 + i / 4) |= ...\n  </code>\n  ORs the\n  <code>\n   i/4\n  </code>\n  'th byte in that buffer with\n  <code>\n   decryptedByte << 8 * (i - ((i + ((unsigned int)(i >> 31) >> 30))\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Apr 8, 2015 at 0:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Bjarke",
                    "text": "<span class=\"comment-copy\">That makes sense! But since <code>i</code> is an integer, won't <code>i/4</code> mean only 25% of the file will get decrypted?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Note that your <code>*(&amp;v22 + i / 4)</code> would be better written as <code>v22[i/4]</code>. You're omitting the declaration of <code>v22</code>, but it seems to me that <code>v22</code> was declared <code>int *</code> where it should better have been declared <code>char *</code> so every array index is multiplied by 4 implicitly (thus divided by 4 explicitly by the decompiler). Also, how much of the file gets decrypted is based on <code>feof</code> and doesn't have anything to do with the buffer size at all. (And the code makes the common mistake of using <code>feof</code>  instead of checking the return value of <code>fread</code>).</span>",
                    "time": null
                }
            ]
        }
    ]
}