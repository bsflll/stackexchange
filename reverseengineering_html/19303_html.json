{
    "title": "Reversing Arduino mega bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/19303/reversing-arduino-mega-bytecode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an hex dump of the 256k of my arduino mega's flash memory.\n </p>\n <p>\n  I do not understand where is the bootloader. I see at 0x0000 address an interupt vector for reset but i do not understand how the bootloaders jumps to the main program.\n </p>\n <p>\n  Is there a way to identity\n  <code>\n   setup()\n  </code>\n  and\n  <code>\n   loop()\n  </code>\n  functions addresses?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "171",
    "tags": [
        "arduino"
    ],
    "user": "Bob5421",
    "time": "Sep 12, 2018 at 7:33",
    "comments": [
        {
            "user": "Anton Kukoba",
            "text": "<html><body><span class=\"comment-copy\">\n there must be the way, but how do you suppose to get the answer without providing the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<html><body><span class=\"comment-copy\">\n Examining the ATmega1280 datasheet and comparison with Arduino Mega memory mapping may be a solution.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}