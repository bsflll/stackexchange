{
    "title": "How is this adversarial process crashing Wireshark?",
    "link": "https://reverseengineering.stackexchange.com/questions/33311/how-is-this-adversarial-process-crashing-wireshark",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is the setup. I have Wireshark.exe open and then I open this executable eCWUrlLaunch.exe. Somehow, this second program is able to crash Wireshark.exe. I have recorded a trace, using Procmon.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Fm4S96Vo.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"procmon trace\" src=\"https://i.sstatic.net/Fm4S96Vo.png\"/>\n  </a>\n </p>\n <p>\n  You can see on the highlighted line, eCWUrlLaunch.exe calls QueryNameInfo (via RtlGetAppContainerNamedObjectPath) for some information about Wireshark. It also tries looking in the registry for Wireshark-related keys.\n </p>\n <p>\n  Immediately after, Wireshark shuts down.\n </p>\n <p>\n  I'm looking for plausible theories of how this one process is able to forcibly terminate another process, given the trace above. I'm surprised that the Windows API would offer such capabilities.\n </p>\n <p>\n  The OS is Windows 10 Pro x64.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "82",
    "tags": [
        "windows",
        "wireshark"
    ],
    "user": "Mark",
    "time": "Nov 17, 2024 at 20:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Considering what the application appears to be based on path it is likely a security mechanism rather than malicious, but to really understand what is going on you can try to analyze the executable in IDA or other application, but I see you are observing higher level behavior.\n </p>\n <p>\n  It is possible to use the winapi to terminate a process, and the registry keys it is accessing are interesting.\n </p>\n <p>\n  Have you checked the value of the registry key that had the REPARSE status. It is possible that there is a value created for this key at some earlier point and is checking it.\n </p>\n <p>\n  The IFEO registry keys would allow you to attach a debugger or other program to the software potentially allowing to monitor execution, debug, and/or control.  This could be a security feature especially if its healthcare related application, but I am unsure context and if you know this to not be a legitimate application.\n </p>\n <p>\n  Games may also do similar checking for debuggers and other software that may be used to cheat or alter gameplay.\n </p>\n <p>\n  Here is a link to more info on the particular registry keys it checks:\n  <a href=\"https://learn.microsoft.com/en-us/previous-versions/windows/desktop/xperf/image-file-execution-options\" rel=\"nofollow noreferrer\">\n   https://learn.microsoft.com/en-us/previous-versions/windows/desktop/xperf/image-file-execution-options\n  </a>\n </p>\n <p>\n  Here is a link to example of attacks using IFEO:\n  <a href=\"https://attack.mitre.org/techniques/T1546/012/\" rel=\"nofollow noreferrer\">\n   https://attack.mitre.org/techniques/T1546/012/\n  </a>\n </p>\n <p>\n  You could also check crashlogs of wireshark, windows, and the other logs that are written by the program you are executing, but again, to really get insight you should try to analyze the executable.\n </p>\n <p>\n  I am thinking it could be security measure, but you would have to spend more time looking at other aspects such as I what I suggested, eg.) check that registry key and see if there's a value and what it points to, also check the logs and analyze the application to see what its actually doing.\n </p>\n <p>\n  edit: Also in regards to the 2nd answer you provided, it could be that it is setting up some sort of kernel level monitor, something also common in games as security mechanism to avoid tampering, but can also be used  maliciously.\n  <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts\" rel=\"nofollow noreferrer\">\n   https://learn.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts\n  </a>\n </p>\n <p>\n  This is interesting, and I hope this is helpful comment.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "jonk",
            "time": "Dec 15, 2024 at 21:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Now I think this is not an adversarial program, but maybe a bug in Wireshark. Look at the associated stack trace. The\n  <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts\" rel=\"nofollow noreferrer\">\n   filter manager\n  </a>\n  is being loaded and somewhere down the line an exception is triggered (Frame 23) and then TerminateProcess is called (Frame 25).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/2HEfwGM6.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"stacktrace\" src=\"https://i.sstatic.net/2HEfwGM6.png\"/>\n  </a>\n </p>\n <p>\n  I'm guessing that Wireshark registers itself with the filter manager in an incorrect way that is exposed by the second \"adversarial\" process. At this point I'm a little out of my depth in Windows and reverse engineering knowledge so if anyone leaves a more enlightening answer I'll accept it.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Mark",
            "time": "Nov 18, 2024 at 1:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}