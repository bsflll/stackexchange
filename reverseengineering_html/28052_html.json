{
    "title": "Finding (or building) a kernel for Huawei EchoLife EG8145V5",
    "link": "https://reverseengineering.stackexchange.com/questions/28052/finding-or-building-a-kernel-for-huawei-echolife-eg8145v5",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a Huawei EchoLife EG8145V5 for which I am trying to build some software. It has a built-in Linux distro of some sort, but I would like to add to it, as there is \"plenty\" of storage space available. The system is built around BusyBox.\n </p>\n <p>\n  However, to build the software, I need to set up a build environment that matches the CPU architecture, and this is where I come up short, as I am unable to find a kernel that I can use with QEMU. I did find one kernel, but it did not produce a compatible binary.\n </p>\n <p>\n  The only thing I know is what I get from\n  <code>\n   cat /proc/cpuinfo\n  </code>\n  :\n </p>\n <pre><code>processor   : 0\nmodel name  : ARMv7 Processor rev 1 (v7l)\nBogoMIPS    : 1594.16\nFeatures    : swp half thumb fastmult edsp thumbee tls \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x4\nCPU part    : 0xc09\nCPU revision    : 1\nCPU physical    :0\n\nprocessor   : 1\nmodel name  : ARMv7 Processor rev 1 (v7l)\nBogoMIPS    : 1594.16\nFeatures    : swp half thumb fastmult edsp thumbee tls \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x4\nCPU part    : 0xc09\nCPU revision    : 1\nCPU physical    :1\n\nHardware    : Hisilicon A9\nRevision    : 0000\nSerial      : 0000000000000000\n</code></pre>\n <p>\n  I am unable to find the kernel image itself stored anywhere, which would make this a whole lot easier. So, what should be my next step? Anything else I can do to find the details I need to set up a good qemu dev environment?\n </p>\n <p>\n  I do have a setup based around the\n  <code>\n   cortex-a9\n  </code>\n  and the\n  <code>\n   vexpress-a9\n  </code>\n  machine, plus some kernel I found somewhere (can't remember where) and it is working to some degree. It's just that dynamically linked binaries won't work, even after patching it with\n  <code>\n   patchelf --set-soname\n  </code>\n  and\n  <code>\n   patchelf --set-soname\n  </code>\n  - I either get segfault or permission denied.\n </p>\n <p>\n  <strong>\n   EDIT 1:\n  </strong>\n </p>\n <p>\n  I did manage to find the kernel config. It's a bit too long to paste here, but are there any lines I should look for that should lead me on the right track?\n </p>\n <p>\n  <strong>\n   EDIT 2:\n  </strong>\n </p>\n <p>\n  I've managed to extract the busybox binary from the router.\n  <code>\n   file busybox\n  </code>\n  produces this:\n </p>\n <pre><code>ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /mnt/jffs2/app/output/ld-linux.so.3, for GNU/Linux 2.6.26, BuildID[sha1]=736041808c34871ed689d38e7cacfe18b1e65736, stripped\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "289",
    "tags": [
        "arm",
        "qemu",
        "kernel"
    ],
    "user": "Jarmund",
    "time": "Jul 28, 2021 at 19:01",
    "comments": [],
    "answers_data": []
}