{
    "title": "Help with working out a checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/27726/help-with-working-out-a-checksum",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to work out how to reverse engineer the checksum on infrared remote data stream for a heat pump.  I've established that it's not a CRC, and I've tried methods found on this forum.  It doesn't appear in other works like\n  <a href=\"https://github.com/crankyoldgit/IRremoteESP8266\" rel=\"nofollow noreferrer\">\n   this one\n  </a>\n  .\n </p>\n <p>\n  I'm tearing my hair out because it appears to be XOR, and it works some of the time. I'm reaching out to see if anyone here can give me some pointers.\n </p>\n <pre><code>0xCB8830C000191B\n0xCB8830200019FB\n0xCB8830A000197B\n0xCB8830600019BB\n0xCB8830E000193B\n0xCB8830100019C3\n0xCB883090001943\n</code></pre>\n <p>\n  For info, the data changing is the selected temperature. The 4th byte,\n  <code>\n   0xC0\n  </code>\n  in the top item is 19\n  <sup>\n   o\n  </sup>\n  C, the one below –\n  <code>\n   0x20\n  </code>\n  – is 20\n  <sup>\n   o\n  </sup>\n  C. If you reverse all the bytes, the temperature makes more sense and needs 16 decimal adding.\n </p>\n <p>\n  The checksum is the last byte. Working on\n  <code>\n   0xCB8830C000191B\n  </code>\n  and taking\n  <code>\n   0xCB\n  </code>\n  as the 1st byte, XOR bytes D1, D3, D4, D5, D6 =\n  <code>\n   0x22\n  </code>\n  . XOR this with\n  <code>\n   0x39\n  </code>\n  and you get the desired checksum of\n  <code>\n   0x1B\n  </code>\n  . This works for all the ones ending in\n  <code>\n   B\n  </code>\n  , but is off by 8 for the last 2. I can't find any data such as counting bits that gives me this difference.\n </p>\n <p>\n  Anyone with some ideas please?\n </p>\n <p>\n  To help other people trying to do the same, the stream comes from a Airton heat pump, which is only sold in France. It's also sold under Ferroli and Lamborghini (really!)\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "224",
    "tags": [
        "checksum"
    ],
    "user": "Jonesy",
    "time": "Apr 9, 2022 at 18:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Ferroli and Lamborghini heat pumps are built by Gree, so why not yours, too?\n </p>\n <p>\n  For some IR remote from Gree with 8Byte of data in 2 pulse trains you will find\n  <a href=\"https://forum.mysensors.org/uploads/files/1469565493670-gree.pdf\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  a description of checksum calculation. Location of Temp in the stream is different, but calculation by\n  <code>\n   16 + 0x0\n  </code>\n  to\n  <code>\n   16+0xF\n  </code>\n  is the same.\nI think, your wording \"The 4th byte, 0xC0 in the top item is 19C, the one below 0x20 is 20C.\" is not correct here.\n </p>\n <p>\n  However the following works for the small number of provided codes, above 4 bits are used for Temp and data are presented in 14 nibbles, thereof 12 data\nI assume that last byte is 1 nibble checksum and 1 nibble parity, then\n </p>\n <ul>\n  <li>\n   when last bit for Temp is even (2, 6, A, C, E), the nibble(13) at the end is\n   <code>\n    B\n   </code>\n   . When odd (1, 3) then\n   <code>\n    3\n   </code>\n   , just like a parity information.\n  </li>\n  <li>\n   xor all nibbles (0) to (11), then xor(13) gives checksum nibble(12)\n  </li>\n </ul>\n <p>\n  Nevertheless it needs to be noted that considering just parity might be not good enough, when other bits in code are changing.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "dieter reichl",
            "time": "Feb 6, 2022 at 13:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  @dieter reichl. Thank you for the suggestion.\nAnother solution that has been found is based on ordering the data LSBF, i.e.\n  <code>\n   0xDB9800000C11D3\n  </code>\n </p>\n <p>\n  Packet structure is\n  <code>\n   |CS|D0|D1|D2|D3|D4|D5|\n  </code>\n </p>\n <p>\n  Checksum calculation formula is\n  <code>\n   CS = ((0x7F - (D0+D1+D2+D3+D4+D5)) % 0x100) ^ 0x2C\n  </code>\n  .\n </p>\n <p>\n  Credit to PtilopsisLeucotis for this solution posted\n  <a href=\"https://github.com/crankyoldgit/IRremoteESP8266/issues/1670#issuecomment-974285433\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "MarianD",
            "time": "Mar 6, 2022 at 15:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}