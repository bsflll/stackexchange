{
    "title": "What 8051 instruction extensions are there?",
    "link": "https://reverseengineering.stackexchange.com/questions/29301/what-8051-instruction-extensions-are-there",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm helping reverse engineer a small embedded device. We've successfully extracted some code fragments, which have been identified as 8051 machine code. However, it's using some kind of instruction set extension using a 0xa5 opcode prefix. I know this is used by several different instruction set extensions, so I need to look these up and see which ones make sense.\n </p>\n <p>\n  So far I've found and ruled out:\n </p>\n <ul>\n  <li>\n   Philips/NXP 51MX\n  </li>\n  <li>\n   Intel MCS-251\n  </li>\n </ul>\n <p>\n  What others are there?\n </p>\n <p>\n  For interest value, here are some of the extended instructions:\n </p>\n <pre><code>  0023 A5               DB 85h  ; illegal opcode\n  0024 6130             AJMP L0002\n\n  005F A5               DB 85h  ; illegal opcode\n  0060 817C             AJMP L0010\n\n  0065 A5               DB 85h  ; illegal opcode\n  0066 00               NOP\n\n  0068 A5               DB 85h  ; illegal opcode\n  0069 A674             MOV @R0, 74h\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "263",
    "tags": [
        "8051"
    ],
    "user": "David Given",
    "time": "Sep 18, 2021 at 9:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Check out bunnie’s work on\n  <a href=\"https://www.bunniestudios.com/blog/?p=3554\" rel=\"nofollow noreferrer\">\n   SD card controllers\n  </a>\n  . One family they looked at (AX211) was actually\n  <a href=\"https://github.com/xobs/ax2xx-code/blob/ax215/doc/ax211.md\" rel=\"nofollow noreferrer\">\n   using a5 for extended opcodes\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 18, 2021 at 16:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David Given",
                    "text": "<span class=\"comment-copy\">It's not an AX211, but this looks extremely like the AX208, complete with the ability to run code out of RAM. There seem to be a whole family of these with very similar features to the one we've got here, so that looks very plausible. Unfortunately the AX208 datasheet doesn't actually contain the instruction encoding so I can't tell for sure!</span>",
                    "time": null
                },
                {
                    "user": "David Given",
                    "text": "<span class=\"comment-copy\">Also, if anyone knows of any more 8051 extensions, I'd love to know about them. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">The page I linked has some details on the instructions although they don’t seem to match your examples. Maybe you can inject a debugger stub like they did and observe how the cpu state changes when these opcodes are executed.</span>",
                    "time": null
                },
                {
                    "user": "David Given",
                    "text": "<span class=\"comment-copy\">Apparently I wasn't looking closely enough; I don't think it's an AXC51 core. The disassembled code looks fine from a distance but when you look more closely it doesn't appear to make a lot of sense. Yes, this is probably going to need a debugger stub.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The CPU actually turned out to be an AC1082 from JL: it's intended for the MP3 player market. It's an 8051 clone with (I think) 8 kB of RAM and a combined XDATA/CODE address space, allowing it to run code out of RAM; plus, it's got a really good set of 16-bit extension instructions which include direct XDATA access using an address in a register pair, so you don't have to indirect through DPTR. It looks like a really interesting thing.\n </p>\n <p>\n  It's not documented as such that anyone can find, but\n  <a href=\"https://github.com/gitzzc/JieLi\" rel=\"nofollow noreferrer\">\n   here is an SDK for it\n  </a>\n  .  It's got macros for generating the extended instructions, but there's no documentation on what they actually do and some of them aren't obvious. I'm still trying to get my hands on hardware to actually do some testing with.\n </p>\n <p>\n  You can find the reverse engineering effort in the Reddit thread\n  <a href=\"https://old.reddit.com/r/BigCliveDotCom/comments/pmt390/buddha_machine_teardown_with_flash_dump\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "MarianD",
            "time": "Dec 30, 2021 at 9:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}