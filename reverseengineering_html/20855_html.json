{
    "title": "NSA Ghidra 9 - Is the decompiler open source?",
    "link": "https://reverseengineering.stackexchange.com/questions/20855/nsa-ghidra-9-is-the-decompiler-open-source",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently downloaded Ghidra (\n  <a href=\"https://ghidra-sre.org/\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  ) ver 9 on windows.\n </p>\n <p>\n  The decompiler feature is presumable found at\n </p>\n <pre><code><GHIDRA_HOME>\\Ghidra\\Features\\Decompiler\n</code></pre>\n <p>\n  There is a lib folder containing the Java code. Then there is an os folder containing binaries for 3 different platforms (win, mac and linux) around 2.4 - 2.9 MB each per platform.\n </p>\n <p>\n  My questions\n </p>\n <ol>\n  <li>\n   <p>\n    This makes Ghidra not truly portable. If there is a reason to do this, then why not use JNI/JNA instead? Why take the dirty route of launching an executable?\n   </p>\n  </li>\n  <li>\n   <p>\n    Is the decompiler open source but written in native code? Can you point out the source codes location for such? If its not provided then can we say its truly open source (read backdoors!) If the decompiler's job is just to spit out pseudo-c code from the dissembly, then 2+ MB is an overkill for such a component, assuming a low-level language like C/C++ is used to write it.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassemblers",
        "decompiler",
        "ghidra"
    ],
    "user": "Nederealm",
    "time": "Mar 12, 2019 at 8:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    I guess that the\n    <em>\n     debugger part\n    </em>\n    of the IDE needed to be close to the system at some point in order to trigger a\n    <code>\n     ptrace()\n    </code>\n    call or equivalent in other systems. So, these binary libraries are perfectly legitimate to me (there is probably no other way around, I think in my humble opinion).\n   </p>\n  </li>\n  <li>\n   <p>\n    It will be Open Source with an\n    <a href=\"https://github.com/NationalSecurityAgency/ghidra/blob/master/LICENSE\" rel=\"nofollow noreferrer\">\n     Apache 2.0 License\n    </a>\n    . But, the code is still being reworked at NSA before being published (at least, this is what they say on their\n    <a href=\"https://github.com/NationalSecurityAgency/ghidra\" rel=\"nofollow noreferrer\">\n     GitHub page\n    </a>\n    ).\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "2",
            "user": "perror",
            "time": "Mar 12, 2019 at 16:09",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For posterity: the decompiler was open-sourced not too long after the initial release of Ghidra. Its code is\n  <a href=\"https://github.com/NationalSecurityAgency/ghidra/tree/master/Ghidra/Features/Decompiler/src/decompile\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "hairlessbear",
            "time": "Dec 2, 2020 at 19:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}