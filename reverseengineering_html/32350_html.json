{
    "title": "Making zero terminated string WATCOM compiler",
    "link": "https://reverseengineering.stackexchange.com/questions/32350/making-zero-terminated-string-watcom-compiler",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is WATCOM compiler. Assembler code below try create random 8 letters to compose zero terminated string.\n </p>\n <pre><code>cseg01:0001F544 Try_Write_To_Disk proc near             ; CODE XREF: Check_CDRom+46p\ncseg01:0001F544\ncseg01:0001F544 var_19          = byte ptr -19h\ncseg01:0001F544 var_10          = byte ptr -10h\ncseg01:0001F544\ncseg01:0001F544                 push    ebx\ncseg01:0001F545                 push    edx\ncseg01:0001F546                 sub     esp, 10h\ncseg01:0001F549                 xor     ebx, ebx\ncseg01:0001F54B\ncseg01:0001F54B loc_1F54B:                              ; CODE XREF: Try_Write_To_Disk+26j\ncseg01:0001F54B                 call    GetRandomControl ; get random number\ncseg01:0001F550                 imul    edx, eax, 1Ah\ncseg01:0001F553                 mov     eax, edx\ncseg01:0001F555                 sar     edx, 1Fh\ncseg01:0001F558                 shl     edx, 0Fh\ncseg01:0001F55B                 sbb     eax, edx\ncseg01:0001F55D                 sar     eax, 0Fh\ncseg01:0001F560                 inc     ebx\ncseg01:0001F561                 add     al, 41h ; 'A'\ncseg01:0001F563                 mov     [esp+ebx+18h+var_19], al\ncseg01:0001F567                 cmp     ebx, 8\ncseg01:0001F56A                 jl      short loc_1F54B\ncseg01:0001F56C                 xor     ah, ah\ncseg01:0001F56E                 mov     [esp+18h+var_10], ah ; zero terminated string\n\n</code></pre>\n <p>\n  This code could be converted to C++ code below:\n </p>\n <pre><code>bool Try_Write_To_CDRom()\n{\n    char buff[9]; //8 letters + terminated 0 = 9\n\n    for ( int i = 0; i < 8; i++ )\n    {\n\n        int val = GetRandomControl(); //get random number\n\n        val = val % 27;//26 letters in alphabet\n    \n        char ch = (unsigned char) val + 0x41; //0x41 is capital A letter\n\n        buff[i] = ch;\n    }\n\n    buff[8] = 0;\n\n    //printf(buff);\n\n\n</code></pre>\n <p>\n  I have question about this line of code:\n </p>\n <pre><code>cseg01:0001F56E                 mov     [esp+18h+var_10], ah\n</code></pre>\n <p>\n  I think this line of code above is wrong because terminated zero is writes at 10 position of char buffer and it is not correct, and should be as:\n </p>\n <pre><code>cseg01:0001F56E                 mov     [esp+ebx+18h+var_19], ah\n</code></pre>\n <p>\n  or should be as:\n </p>\n <pre><code>cseg01:0001F56E                 mov     [esp+8h+18h+var_19], ah\n</code></pre>\n <p>\n  Because in this way:\n </p>\n <pre><code>cseg01:0001F56E                 mov     [esp+18h+var_10], ah\n</code></pre>\n <p>\n  terminated zero is writes to 10 position of char buff[10] = ah, and should be like this buff[8] = ah. I.e. 8 chars letters writes to buff[0] ... buff[7] and terminated zero is writes to buff[8] i.e. 9 position.\n </p>\n <p>\n  Am I right in my speculations?\n </p>\n <p>\n  Thank in advance!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "47",
    "tags": [
        "c++"
    ],
    "user": "black4joss",
    "time": "Oct 3, 2023 at 15:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Inc ebx ebx=>1.\n </p>\n <p>\n  [esp+ebx+18h+var_19]=>  [esp+1+18h+-19] is [esp+0]\n </p>\n <p>\n  So it writes at 0,1,2,3,4,5,6,7 total 8 bytes\n </p>\n <p>\n  Then writes zero esp+8 the ninth byte. See screenshot\n  <a href=\"https://i.sstatic.net/tJTi4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/tJTi4.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Oct 4, 2023 at 5:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}