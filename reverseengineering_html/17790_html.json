{
    "title": "Why IDA shows return statement in separate subroutine?",
    "link": "https://reverseengineering.stackexchange.com/questions/17790/why-ida-shows-return-statement-in-separate-subroutine",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA shows this following code in separate subroutine.\n </p>\n <p>\n  Assembly:\n </p>\n <pre><code>sub_180049410 proc near\njmp     rax\nsub_180049410 endp\n</code></pre>\n <p>\n  Pseudo-Code:\n </p>\n <pre><code>__int64 __usercall sub_180049410@<rax>(__int64 (*a1)(void)@<rax>)\n{\n  return a1();\n}\n</code></pre>\n <p>\n  The previous subroutine calls it as (off_180052510 and sub_180049410 are same)\n </p>\n <pre><code>mov     rcx, [rsp+0C8h+var_88]\nmov     rax, [rcx]\nmov     r8, rsi\nmov     edx, 5\nmov     rax, [rax+18h]\ncall    cs:off_180052510\nmov     rcx, [rsp+0C8h]\ntest    eax, eax\njs      loc_18000969B\n</code></pre>\n <p>\n  So, why IDA shows it in separate subroutine? Can I join that in it's previous function?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "201",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "Mar 25, 2018 at 6:06",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n off_180052510 and sub_180049410 appears to be two distinct addresses what do you mean when you write they are same\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n I mean to say that the offset points to that subroutine.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  No. Ofc, you can modify assembly in IDA with API funcs by yourself, but there is no need in this.\n  <code>\n   call\n  </code>\n  instruction is not just jumping to code, it also modifies stack, pushing there return address, so called function can correctly return (read\n  <a href=\"https://c9x.me/x86/html/file_module_x86_id_26.html\" rel=\"nofollow noreferrer\">\n   https://c9x.me/x86/html/file_module_x86_id_26.html\n  </a>\n  ). Thats why this code is shown in another subroutine, and thats why just inlining\n  <code>\n   jmp rax\n  </code>\n  to code won't be correct in this case.\n </p>\n <p>\n  Also, rax value will be known only in runtime, so IDA's static analysis can't provide information, which function exactly will be called here. So\n  <code>\n   sub_180049410\n  </code>\n  its just function to call some other function via pointer to it.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Scher Khan",
            "time": "Mar 25, 2018 at 9:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Is there any relation with this subroutine and COM vtable/function pointer?</span>",
                    "time": null
                }
            ]
        }
    ]
}