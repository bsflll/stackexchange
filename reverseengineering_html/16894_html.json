{
    "title": "Difficulty decrypting nested PKCS #7 / AES router configuration file",
    "link": "https://reverseengineering.stackexchange.com/questions/16894/difficulty-decrypting-nested-pkcs-7-aes-router-configuration-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to decrypt a\n  <a href=\"http://www.oxygenbroadband.com/oxygen-multigateway.html\" rel=\"nofollow noreferrer\">\n   router\n  </a>\n  configuration backup file that appears to be a combination of a 128-byte header, a PKCS #7 encrypted file, and another OpenSSL salted format encrypted file.  I think the file encrypts a single data chunk in a nested way in order to hinder its decryption.\n </p>\n <p>\n  I can decrypt the first part with the following command.\n </p>\n <pre><code>dd if=file skip=128 iflag=skip_bytes |\nopenssl smime -decrypt -inform der -in - -inkey server.key -out part1\n</code></pre>\n <p>\n  This gives me 5550 base-64 encoded bytes, which I can then convert into a 4096 byte binary file.  The distribution of byte values within the file is random: similar to that I obtain from\n  <code>\n   openssl rand\n  </code>\n  .\n </p>\n <p>\n  My initial guess is that the first part file is a (too long?) key for decrypting the second part file.  Based on commands used in the router's firmware, I tried to decrypt the second part with the decrypted first part as a key, both before and after decoding it with\n  <em>\n   base64\n  </em>\n  .\n </p>\n <pre><code>dd if=file skip=$(grep -abo Salted__ file | cut -d: -f 1) iflag=skip_bytes |\nopenssl enc -d -aes-256-cbc -out decrypted -pass file:part1\n\ndd if=file skip=$(grep -abo Salted__ file | cut -d: -f 1) iflag=skip_bytes |\nopenssl enc -d -aes-256-cbc -out decrypted -pass file:<(base64 -d <part1)\n</code></pre>\n <p>\n  In both cases I get a\n  <code>\n   bad decrypt\n  </code>\n  error, and the decrypted file appears to contain random bytes.  Any other ideas on how the file could be encrypted?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "237",
    "tags": [
        "firmware",
        "decryption"
    ],
    "user": "Diomidis Spinellis",
    "time": "Dec 3, 2017 at 9:52",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "<html><body><span class=\"comment-copy\">\n Can you provide more details, like what router model is this for. And can you post a sample file?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Diomidis Spinellis",
            "text": "<html><body><span class=\"comment-copy\">\n I hyperlinked the router in the question.  I'd have to perform a factory reset in order to post a sample file, because the configuration backup contains sensitive authentication information\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  I think the file encrypts a single data chunk in a nested way in order to hinder its decryption.\n </code>\n - If you have access to the code that performs the encryption, it should be possible to reverse engineer this code to recover the algorithm used\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}