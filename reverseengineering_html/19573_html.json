{
    "title": "Inversion of input parameters in ASM",
    "link": "https://reverseengineering.stackexchange.com/questions/19573/inversion-of-input-parameters-in-asm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  the code is:\n </p>\n <pre><code>.global asm0\nasm0:\n    push    ebp\n    mov ebp,esp\n    mov eax,DWORD PTR [ebp+0x8]\n    mov ebx,DWORD PTR [ebp+0xc]\n    mov eax,ebx\n    mov esp,ebp\n    pop ebp\n</code></pre>\n <p>\n  The entry is: asm0(0x2a,0x4f)\n </p>\n <p>\n  The output is: 0x4f2a\n </p>\n <p>\n  Why is the input parameters reversed?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "242",
    "tags": [
        "nasm",
        "assembly"
    ],
    "user": "Ricardo Prieto",
    "time": "Oct 8, 2018 at 18:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Calling Conventions\n  </strong>\n  :\n </p>\n <p>\n  You may be referring to calling conventions and order of parameters being pushed. If so,\n  <strong>\n   <a href=\"https://stackoverflow.com/questions/31100614/why-is-order-of-function-arguments-reversed#answers\">\n    here is an answer\n   </a>\n  </strong>\n  addressing as such. You can read more about calling conventions in general\n  <strong>\n   <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">\n    here\n   </a>\n  </strong>\n  .\n </p>\n <p>\n  <strong>\n   Endianness\n  </strong>\n  :\n </p>\n <p>\n  You may also be interested in reading about endianness from the NASM documentation:\n </p>\n <blockquote>\n  <p>\n   <strong>\n    3.4.3 Character Constants\n   </strong>\n  </p>\n  <p>\n   A character constant consists of a string up to eight bytes long, used\n  in an expression context. It is treated as if it was an integer.\n  </p>\n  <p>\n   A character constant with more than one byte will be arranged with\n  little-endian order in mind: if you code\n  </p>\n  <pre><code>mov eax,'abcd'\n</code></pre>\n  <p>\n   then the constant generated is not 0x61626364, but 0x64636261, so that if you were then to store the value into memory,\n  it would read abcd rather than dcba. This is also the sense of\n  character constants understood by the Pentium's CPUID instruction.\n  </p>\n </blockquote>\n <p>\n  <strong>\n   Source:\n  </strong>\n  <a href=\"https://www.nasm.us/doc/nasmdoc3.html\" rel=\"nofollow noreferrer\">\n   https://www.nasm.us/doc/nasmdoc3.html\n  </a>\n </p>\n <p>\n  More research on your behalf to better understand this can be done by reading about the topic of\n  <strong>\n   <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">\n    endianness\n   </a>\n  </strong>\n  . It's confusing when you first run into it, but there are many charts like this one to help demonstrate it:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/B3WJE.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/B3WJE.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   Image source\n  </strong>\n  :\n  <a href=\"https://agilescientific.com/blog/2017/3/31/little-endian-is-legal\" rel=\"nofollow noreferrer\">\n   https://agilescientific.com/blog/2017/3/31/little-endian-is-legal\n  </a>\n </p>\n <p>\n  Finally, there's an excellent video from OpenSecurityTraining that does a great job of explaining endianness and order of parameters/arguments with calling conventions.\n  <a href=\"https://youtu.be/H4Z0S9ZbC0g?t=1015\" rel=\"nofollow noreferrer\">\n   Click here to view it\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "dsasmblr",
            "time": "Oct 8, 2018 at 18:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}