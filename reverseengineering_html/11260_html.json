{
    "title": "Memory segment in IDA - ARM kernel",
    "link": "https://reverseengineering.stackexchange.com/questions/11260/memory-segment-in-ida-arm-kernel",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just loaded up an ARM kernel image into IDA. When I boot up the ARM kernel and inspect the kernel symbols, I can see the following :-\n </p>\n <pre><code>/ $ cat /proc/kallsyms | head -n 10\n00000000 t __vectors_start\n80008240 T asm_do_IRQ\n80008240 T _stext\n80008240 T __exception_text_start\n80008244 T do_undefinstr\n80008408 T do_IPI\n8000840c T do_DataAbort\n800084a8 T do_PrefetchAbort\n80008544 t gic_handle_irq\n800085a0 T secondary_startup\n</code></pre>\n <p>\n  When I load the kernel image into IDA, I am presented with functions with a memory segment that is loaded at 0x8000. As the kernel symbols are not present in the ARM kernel, this is making analysis hard.\n </p>\n <p>\n  How can I map the addresses I see in the ARM image(I'm running it in Qemu, and could debug the kernel using gdb-multiarch) with the addresses I see in IDA? I'm guessing rebasing the\n  <code>\n   .text\n  </code>\n  section in IDA would be the way to go. If so, how could I go about finding the address to which I would have to rebase the segment?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "linux",
        "kernel-mode",
        "segmentation"
    ],
    "user": null,
    "time": "Nov 6, 2015 at 16:48",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Would you post a list of segments you see in IDA ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I figured out a solution. Here is what I did.\n </p>\n <ol>\n  <li>\n   Export the content of /proc/kallsyms to a text file.\n  </li>\n  <li>\n   From the zImage kernel file look for the gz file format header, copy it out and extract. Load the file into IDA.\n  </li>\n  <li>\n   As the file is a binary file, you need to tell IDA how to work with it. You set the architecture to ARM(as was in my case), set the RAM segment to load at 0x80008000.\n  </li>\n  <li>\n   Write an IDApython script to read the text file from [1] and do a MakeName(address, name).\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "4",
            "user": null,
            "time": "Nov 7, 2015 at 9:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}