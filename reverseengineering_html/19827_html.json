{
    "title": "Debugging a process running in a Virtual Machine with Radare2?",
    "link": "https://reverseengineering.stackexchange.com/questions/19827/debugging-a-process-running-in-a-virtual-machine-with-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is there anyway to debug a process running on a Virtual Machine (guest) with Radare2 from the host? I'm currently using VirtualBox. It provides a\n  <a href=\"https://www.virtualbox.org/manual/ch12.html#ts_debugger\" rel=\"nofollow noreferrer\">\n   built in debugger\n  </a>\n  . I'm not sure if it's possible for radare2 to integrate with it.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "921",
    "tags": [
        "radare2",
        "virtual-machines"
    ],
    "user": "Evan Carroll",
    "time": "Nov 5, 2018 at 19:38",
    "comments": [
        {
            "user": "pudi",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not sure what your goal is, do you want to debug the process running inside the VM on your host system?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "<html><body><span class=\"comment-copy\">\n @pudi yes, clarified.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i'm the developer of r2vmi, and found your topic by googling my own project.\n </p>\n <p>\n  I have been working on an improved version by reimplementing a GDB stub:\n </p>\n <p>\n  <a href=\"https://github.com/Wenzel/pyvmidbg\" rel=\"nofollow noreferrer\">\n   https://github.com/Wenzel/pyvmidbg\n  </a>\n </p>\n <p>\n  The README contains a demo if you want a quick look.\n </p>\n <p>\n  I'm able to debug a Windows XP VMs, both kernel and userland, given you have the right symbols, with radare2.\n </p>\n <p>\n  I presented the project at Insomni'Hack conference last week, if you want to take a look at the slides:\n  <a href=\"https://drive.google.com/file/d/1ZMUszfwWDOljdDfPOJgkEfSabNy0UAJR/view\" rel=\"nofollow noreferrer\">\n   https://drive.google.com/file/d/1ZMUszfwWDOljdDfPOJgkEfSabNy0UAJR/view\n  </a>\n </p>\n <p>\n  Hope this helps !\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Wenzel",
            "time": "Mar 28, 2019 at 20:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Radare is able to connect to gdb remote sessions. So if you use something like qemu for your virtualization you would be able to connect to this. The problem will be to find the desired process inside the whole memory. At first you need to understand how your guest operating system handles processes inside it's kernel and then you need to find the kernel inside this memory region.\n </p>\n <p>\n  There are two interesting projects about this topic: zdbg and r2vmi\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "defragger",
            "time": "Nov 6, 2018 at 6:27",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Also make sure that to accurately reverse any sort of WindowsVM you make sure you point\n  <code>\n   gdb\n  </code>\n  to the proper\n  <code>\n   .pdb\n  </code>\n  so it can read the symbols for better debugging.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "user847763",
            "time": "Nov 7, 2018 at 0:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">In this case the VM is a Linux live cd..</span>",
                    "time": null
                }
            ]
        }
    ]
}