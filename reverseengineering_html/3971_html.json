{
    "title": "Understanding x86 C main function preamble created by Visual C++",
    "link": "https://reverseengineering.stackexchange.com/questions/3971/understanding-x86-c-main-function-preamble-created-by-visual-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was debugging a simple x86-64 program in Visual Studio 2010 and I noticed that the\n  <code>\n   main\n  </code>\n  function preamble is different from the GNU GCC compiled version of the same C program.\n </p>\n <p>\n  To illustrate what I mean here is the C code for the\n  <code>\n   main\n  </code>\n  function:\n </p>\n <pre><code>int main() {\n  int a,b,c;\n  a=1;\n  b=2;\n  c=proc(a,b);\n  return c;\n}\n</code></pre>\n <p>\n  The Visual Studio 2010 disassembly of the\n  <code>\n   main\n  </code>\n  function\n  <strong>\n   preamble\n  </strong>\n  for the  VC++ version is:\n </p>\n <pre><code>01211410  push        ebp  \n01211411  mov         ebp,esp  \n01211413  sub         esp,0E4h  \n01211419  push        ebx  \n0121141A  push        esi  \n0121141B  push        edi  \n0121141C  lea         edi,[ebp-0E4h]  \n01211422  mov         ecx,39h  \n01211427  mov         eax,0CCCCCCCCh  \n0121142C  rep stos    dword ptr es:[edi]\n</code></pre>\n <p>\n  The rest of the function code of the VC++ version is:\n </p>\n <pre><code>0081141E  mov         dword ptr [a],1  \n00811425  mov         dword ptr [b],2  \n0081142C  mov         eax,dword ptr [b]  \n0081142F  push        eax  \n00811430  mov         ecx,dword ptr [a]  \n00811433  push        ecx  \n00811434  call        proc (81114Fh)  \n00811439  add         esp,8  \n0081143C  mov         dword ptr [c],eax  \n0081143F  mov         eax,dword ptr [c]  \n00811442  pop         edi  \n00811443  pop         esi  \n00811444  pop         ebx  \n00811445  add         esp,0E4h  \n0081144B  cmp         ebp,esp  \n0081144D  call        @ILT+300(__RTC_CheckEsp) (811131h)  \n00811452  mov         esp,ebp  \n00811454  pop         ebp  \n00811455  ret \n</code></pre>\n <p>\n  The disassembly of the\n  <code>\n   main\n  </code>\n  function\n  <strong>\n   preamble\n  </strong>\n  for the GCC compiled version is:\n </p>\n <pre><code>00400502  push   rbp\n00400503  mov    rbp,rsp\n00400506  sub    rsp,0x10\n</code></pre>\n <p>\n  The rest of the\n  <code>\n   main\n  </code>\n  function code of the GCC version is:\n </p>\n <pre><code>004004e8  mov    DWORD PTR [rbp-0xc],0x1\n004004ef  mov    DWORD PTR [rbp-0x8],0x2\n004004f6  mov    edx,DWORD PTR [rbp-0x8]\n004004f9  mov    eax,DWORD PTR [rbp-0xc]\n004004fc  mov    esi,edx\n004004fe  mov    edi,eax\n00400500  call   0x4004cc <proc>\n00400505  mov    DWORD PTR [rbp-0x4],eax\n00400508  mov    eax,DWORD PTR [rbp-0x4]\n0040050b  leave\n0040050c  ret\n</code></pre>\n <p>\n  The same disassembly is given by\n  <code>\n   objdump\n  </code>\n  version 2.22.90.20120924.\n </p>\n <p>\n  I realize that the first 3 instructions for both preambles do the following:\n </p>\n <ol>\n  <li>\n   Save old EBP (later needed to remove stack frame)\n  </li>\n  <li>\n   Top of old stack frame becomes EBP of new frame\n  </li>\n  <li>\n   Reserve space for local variables. The function has 3 integer local variables.\n  </li>\n </ol>\n <p>\n  <strong>\n   Question 1:\n  </strong>\n  What is the purpose of 4th instruction in the VC++ version? I see its saving EBX, but why? It never uses it afterwards.\n </p>\n <p>\n  For the remaining instructions of the VC++ version preamble, I relized that it initializes\n  <code>\n   39h\n  </code>\n  dwords with the value\n  <code>\n   0CCCCCCCCh\n  </code>\n  . Which makes sense because\n  <code>\n   39h * 4h = 0E4h\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   Question 2:\n  </strong>\n  Why is this space initialized with the value\n  <code>\n   0CCCCCCCCh\n  </code>\n  ? Is this value better than\n  <code>\n   00000000h\n  </code>\n  in some way?\n </p>\n <p>\n  <strong>\n   Question 3:\n  </strong>\n  Why does the VC++ version allocate\n  <code>\n   0E4h\n  </code>\n  bytes for 3 local variables? Is this number random? If not, how is it computed?\n </p>\n <p>\n  <strong>\n   Question 4:\n  </strong>\n  Is this space used for something else beside local variables? If yes, for what?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "2k",
    "tags": [
        "windows",
        "decompilation",
        "x86",
        "c"
    ],
    "user": "Benny",
    "time": "Mar 27, 2014 at 7:45",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n I suggest you post separate questions, one for each of your subquestions above. And for each question, post the function's source code and the function's full disassembly. This will make it easier to respond with confidence instead of guessing.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner I posted the C source of the function. It is extremely simple. I think the 4 sub-questions are quite related. I don't see the point in posting 4 different questions with the same initial description and also very similar title.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n There's definitely some interesting \"optimization\" going on there... for example, notice that the disassembled VC++ code will always return\n <code>\n  0\n </code>\n , not the value of\n <code>\n  c\n </code>\n ...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://stackoverflow.com/questions/370195/when-and-why-will-an-os-initialise-memory-to-0xcd-0xdd-etc-on-malloc-free-new\">\n  MSVC initializes uninitialized memories with 0xCC in debug mode\n </a>\n . This helps debugging some problem much easier\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n You should change the MSVC project to x64. Compare MSVC 32-bit code and GCC 64-bit code is pointless\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The extra space on the stack is there to support the Edit and Continue functionality and can be eliminated by changing /Zl to /Zi. The saved ebx and initialization of the stack to 0xcc is done by the\n  <a href=\"http://msdn.microsoft.com/en-us/library/8wtf2dfz.aspx\" rel=\"nofollow noreferrer\">\n   /RTC Runtime Checking Option\n  </a>\n  .\n </p>\n <p>\n  There was a\n  <a href=\"https://stackoverflow.com/questions/2077074/understanding-the-c-function-call-prolog-with-cdecl-on-windows\">\n   similar question\n  </a>\n  asked on SO.\n </p>\n <p>\n  The windows example, by the way, is clearly a 32 bit binary. x64 windows calling convention uses RCX, RDX, R8, and R9 as the first 4 integer/pointer arguments (instead of the stack).\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">Yes. In x86_64 there's no way to <code>push ebp</code>. The OP should change the project to x86_64 and see</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Not sure, perhaps it's 'standard' so that the compiler can use ebx as a matter of course, (without needing to check if it can).\n  </li>\n  <li>\n   As you should know, 0x0CC is int 3, a debug breakpoint. It might be that if you suddenly jump to uninitialized memory, you will get an int 3 instead of an A/V or similar exception. Just a guess though. One thing that wasn't mentioned was the compiler flags. Was it debug build?\n  </li>\n  <li>\n   Not sure\n  </li>\n  <li>\n   Not sure, try turning off the stack guards and see if you still get the big 0x0E4 allocation\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "2",
            "user": "fileoffset",
            "time": "Mar 27, 2014 at 0:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}