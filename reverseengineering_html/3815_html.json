{
    "title": "Reversing ELF 64-bit LSB executable, x86-64 ,gdb",
    "link": "https://reverseengineering.stackexchange.com/questions/3815/reversing-elf-64-bit-lsb-executable-x86-64-gdb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm a newbie and just got into RE.\nI got a ELF 64-bit LSB executable, x86-64. I'm trying to reverse it.\nFirst I tried to set a break point on line 1 using\n </p>\n <pre><code>gdb ./filename\nbreak 1\n</code></pre>\n <p>\n  The gdb says\n </p>\n <pre><code>No symbol table is loaded.  Use the \"file\" command.\n</code></pre>\n <p>\n  OKie so gave out file command\n </p>\n <pre><code>(gdb) file filename\nReading symbols from /media/Disk/filename...(no debugging symbols found)...done.\n</code></pre>\n <p>\n  How could a set a break point to see the execution..?\n </p>\n</div>\n</body></html>",
    "votes": "28",
    "answers": 1,
    "views": "113k",
    "tags": [
        "gdb",
        "elf",
        "x86-64"
    ],
    "user": "nkg",
    "time": "Mar 7, 2014 at 6:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Getting the entrypoint\n </h2>\n <p>\n  If you have no useful symbol, you first need to find the entrypoint of the executable. There are several ways to do it (depending on the tools you have or the tools you like the best):\n </p>\n <ol>\n  <li>\n   <p>\n    Using\n    <code>\n     readelf\n    </code>\n   </p>\n   <pre><code>$> readelf -h /bin/ls\nELF Header:\nMagic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \nClass:                             ELF64\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              EXEC (Executable file)\nMachine:                           Advanced Micro Devices X86-64\nVersion:                           0x1\nEntry point address:               0x40489c\nStart of program headers:          64 (bytes into file)\nStart of section headers:          108264 (bytes into file)\nFlags:                             0x0\nSize of this header:               64 (bytes)\nSize of program headers:           56 (bytes)\nNumber of program headers:         9\nSize of section headers:           64 (bytes)\nNumber of section headers:         27\nSection header string table index: 26\n</code></pre>\n   <p>\n    So, the entrypoint address is\n    <code>\n     0x40489c\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    Using\n    <code>\n     objdump\n    </code>\n   </p>\n   <pre><code>$> objdump -f /bin/ls\n\n/bin/ls:     file format elf64-x86-64\narchitecture: i386:x86-64, flags 0x00000112:\nEXEC_P, HAS_SYMS, D_PAGED\nstart address 0x000000000040489c\n</code></pre>\n   <p>\n    Again, the entrypoint is\n    <code>\n     0x000000000040489c\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    Using\n    <code>\n     gdb\n    </code>\n   </p>\n   <pre><code>$> gdb /bin/ls\nGNU gdb (GDB) 7.6.2 (Debian 7.6.2-1)\n...\nReading symbols from /bin/ls...(no debugging symbols found)...done.\n(gdb) info files\nSymbols from \"/bin/ls\".\nLocal exec file:\n    `/bin/ls', file type elf64-x86-64.\n    Entry point: 0x40489c\n    0x0000000000400238 - 0x0000000000400254 is .interp\n    0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag\n    0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id\n    0x0000000000400298 - 0x0000000000400300 is .gnu.hash\n    0x0000000000400300 - 0x0000000000400f18 is .dynsym\n    0x0000000000400f18 - 0x00000000004014ab is .dynstr\n    0x00000000004014ac - 0x00000000004015ae is .gnu.version\n    0x00000000004015b0 - 0x0000000000401640 is .gnu.version_r\n    0x0000000000401640 - 0x00000000004016e8 is .rela.dyn\n    0x00000000004016e8 - 0x0000000000402168 is .rela.plt\n    0x0000000000402168 - 0x0000000000402182 is .init\n    0x0000000000402190 - 0x00000000004028a0 is .plt\n    0x00000000004028a0 - 0x0000000000411f0a is .text\n    0x0000000000411f0c - 0x0000000000411f15 is .fini\n    0x0000000000411f20 - 0x000000000041701c is .rodata\n    0x000000000041701c - 0x0000000000417748 is .eh_frame_hdr\n    ...\n</code></pre>\n   <p>\n    Entrypoint is still\n    <code>\n     0x40489c\n    </code>\n    .\n   </p>\n  </li>\n </ol>\n <h2>\n  Locating the\n  <code>\n   main\n  </code>\n  procedure\n </h2>\n <p>\n  Once the entrypoint is known, you can set a breakpoint on it and start looking for the\n  <code>\n   main\n  </code>\n  procedure. Because, you have to know that all the programs will start by a\n  <code>\n   _start()\n  </code>\n  procedure in charge of initializing the memory for the process and loading the dynamic libraries. In fact, this first procedure is a convention in the Unix World.\n </p>\n <p>\n  What exactly does this initialization procedure is quite tedious to follow and, most of the time, of no interest at all to understand your program. The\n  <code>\n   main()\n  </code>\n  procedure will only start after all the memory is set-up and ready to go.\n </p>\n <p>\n  Lets see how to do that (I assume that the executable has been compile with\n  <code>\n   gcc\n  </code>\n  ):\n </p>\n <pre><code>(gdb) break *0x40489c\nBreakpoint 1 at 0x40489c\n(gdb) run\nStarting program: /bin/ls \nwarning: Could not load shared library symbols for linux-vdso.so.1.\n\nBreakpoint 1, 0x000000000040489c in ?? ()\n</code></pre>\n <p>\n  Okay, so we stopped at the very beginning of the executable. At this time, nothing is ready, everything need to be set-up. Let see what are the first steps of the executable:\n </p>\n <pre><code>(gdb) disas 0x40489c,+50\nDump of assembler code from 0x40489c to 0x4048ce:\n=> 0x000000000040489c:  xor    %ebp,%ebp\n   0x000000000040489e:  mov    %rdx,%r9\n   0x00000000004048a1:  pop    %rsi\n   0x00000000004048a2:  mov    %rsp,%rdx\n   0x00000000004048a5:  and    $0xfffffffffffffff0,%rsp\n   0x00000000004048a9:  push   %rax\n   0x00000000004048aa:  push   %rsp\n   0x00000000004048ab:  mov    $0x411ee0,%r8\n   0x00000000004048b2:  mov    $0x411e50,%rcx\n   0x00000000004048b9:  mov    $0x4028c0,%rdi\n   0x00000000004048c0:  callq  0x4024f0 <__libc_start_main@plt>\n   0x00000000004048c5:  hlt    \n   0x00000000004048c6:  nopw   %cs:0x0(%rax,%rax,1)\nEnd of assembler dump.\n</code></pre>\n <p>\n  What follow the\n  <code>\n   hlt\n  </code>\n  is just rubbish obtained because of the linear sweep performed by\n  <code>\n   gdb\n  </code>\n  . So, just ignore it. What is relevant is the fact that we are calling\n  <code>\n   __libc_start_main()\n  </code>\n  (I won't comment on the\n  <code>\n   @plt\n  </code>\n  because it would drag us out of the scope of the question).\n </p>\n <p>\n  In fact, the procedure\n  <code>\n   __libc_start_main()\n  </code>\n  initialize the memory for a process running with the\n  <code>\n   libc\n  </code>\n  dynamic library. And, once done, jump to the procedure located in\n  <code>\n   %rdi\n  </code>\n  (which usually is the\n  <code>\n   main()\n  </code>\n  procedure). See the following picture to have a global view of what does the\n  <code>\n   __libc_start_main()\n  </code>\n  procedure [\n  <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" rel=\"noreferrer\">\n   1\n  </a>\n  ]\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/4S3MC.png\" rel=\"noreferrer\">\n   <img alt=\"ELF complete callgraph\" src=\"https://i.sstatic.net/4S3MC.png\"/>\n  </a>\n </p>\n <p>\n  So, indeed, the address of the\n  <code>\n   main()\n  </code>\n  procedure is at\n  <code>\n   0x4028c0\n  </code>\n  . Let disassemble a few instructions at this address:\n </p>\n <pre><code>(gdb) x /10i 0x4028c0\n   0x4028c0:    push   %r15\n   0x4028c2:    push   %r14\n   0x4028c4:    push   %r13\n   0x4028c6:    push   %r12\n   0x4028c8:    push   %rbp\n   0x4028c9:    mov    %rsi,%rbp\n   0x4028cc:    push   %rbx\n   0x4028cd:    mov    %edi,%ebx\n   0x4028cf:    sub    $0x388,%rsp\n   0x4028d6:    mov    (%rsi),%rdi\n   ...\n</code></pre>\n <p>\n  And, if you look at it, this is indeed the\n  <code>\n   main()\n  </code>\n  procedure. So, this where to really start the analysis.\n </p>\n <h2>\n  Words of warning\n </h2>\n <p>\n  Even if this way of looking for the\n  <code>\n   main()\n  </code>\n  procedure will work in most the cases. You have to know that we strongly rely on the following hypothesis:\n </p>\n <ol>\n  <li>\n   <p>\n    Programs written in pure assembly language and compiled with\n    <code>\n     gcc -nostdlib\n    </code>\n    (or directly with\n    <code>\n     gas\n    </code>\n    or\n    <code>\n     nasm\n    </code>\n    ) won't have a first call to\n    <code>\n     __libc_start_main()\n    </code>\n    and will start straight from the entrypoint. Therefore, for these programs, the\n    <code>\n     _start()\n    </code>\n    procedure is the\n    <code>\n     main()\n    </code>\n    procedure. In fact, it is important to understand that the\n    <code>\n     main()\n    </code>\n    procedure is just a convention introduced by the C language as the first function (written by the programmer) to be run in the program. Of course, you can find this convention replicated in many other languages such as Java, C++, and others. But, all these languages derive from C.\n   </p>\n  </li>\n  <li>\n   <p>\n    We also strongly rely on a knowledge on the way\n    <code>\n     __libc_start_main()\n    </code>\n    works. And, how this procedure has been designed by the\n    <code>\n     gcc\n    </code>\n    team. So, if the program you are analyzing has been compiled with another compiler, you may have to investigate a bit further about this compiler and how it perform the set-up of the memory before running the\n    <code>\n     main()\n    </code>\n    procedure.\n   </p>\n  </li>\n </ol>\n <p>\n  Anyway, you should now be able to track down a program with no symbol at all if you read this answer carefully.\n </p>\n <p>\n  Finally, you can find an excellent summary about the starting of an executable by reading \"\n  <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" rel=\"noreferrer\">\n   Linux x86 Program Start Up or - How the heck do we get to\n   <code>\n    main()\n   </code>\n   ?\n  </a>\n  \" by Patrick Horgan.\n </p>\n</div>\n</body></html>",
            "votes": "60",
            "user": "perror",
            "time": "Jun 27, 2018 at 9:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Revolucion for Monica",
                    "text": "<span class=\"comment-copy\">Thanks for your answer, <i>Monsieur</i>. I followed your steps but when running I always have a zsh:1: permission denied. It seems similar to launch gdb over non compiled .o files. Do I need to compile it first?</span>",
                    "time": null
                }
            ]
        }
    ]
}