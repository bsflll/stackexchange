{
    "title": "What are the first 16 bytes in .rodata section?",
    "link": "https://reverseengineering.stackexchange.com/questions/19127/what-are-the-first-16-bytes-in-rodata-section",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What are the first 16 bytes in the\n  <code>\n   .rodata\n  </code>\n  section?\n </p>\n <p>\n  For example, I have the following code:\n </p>\n <pre><code>#include <cstdio>\n\nvoid myprintf(const char* ptr) {\n        printf(\"%p\n\", ptr);\n}\n\nint main() {\n        myprintf(\"hello world\");\n        myprintf(\"\\0\\0\");\n        myprintf(\"ab\\0cde\");\n        static char hi[] = \"hi\";\n        myprintf(hi);\n}\n</code></pre>\n <p>\n  I compiled:\n </p>\n <pre><code>$ g++ -Wall test_elf.cpp -o test_elf -O3 -std=c++17\n</code></pre>\n <p>\n  And then\n </p>\n <pre><code>$ readelf -W -p .rodata test_elf \n\nString dump of section '.rodata':\n  [    10]  %p^J\n  [    14]  hello world\n  [    23]  ab\n  [    26]  cde\n</code></pre>\n <p>\n  As you can see, there are 16 bytes before the first constant string literal.  I use\n  <code>\n   elf.h\n  </code>\n  to parse, and I also see there are 16 bytes before the first constant string literal.  14 bytes of them are just zero.  1 non zero byte is\n  <code>\n   1\n  </code>\n  .  Another is\n  <code>\n   2\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c++",
        "elf",
        "compilers"
    ],
    "user": "HCSF",
    "time": "Aug 25, 2018 at 19:48",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://stackoverflow.com/questions/34733136/why-static-string-in-rodata-section-has-a-four-dots-prefix-in-gcc\">\n  Possible duplciate on Stack Overflow\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   Trying to provide a more general answer that would hopefully complement\n   <a href=\"https://stackoverflow.com/questions/34733136/why-static-string-in-rodata-section-has-a-four-dots-prefix-in-gcc\">\n    this\n   </a>\n   answer linked in the comments.\n  </em>\n </p>\n <p>\n  To those who are unsure, the\n  <code>\n   .rodata\n  </code>\n  section in an executable contains all\n  <em>\n   read-only\n  </em>\n  variables and constants with a global scope (i.e. will be defined for the entire duration of the program's execution) although the lines are becoming a little blurry and there are exceptions to the rules which are not actually enforced, the\n  <code>\n   .rodata\n  </code>\n  section usually hold all global and static variables that are read only. This is obviously the reason the strings you defined are there.\n </p>\n <p>\n  Although your code does not\n  <em>\n   directly\n  </em>\n  define any constructs except those few string literals, the\n  <code>\n   .rodata\n  </code>\n  section will hold all data deemed\n  <em>\n   globally scoped\n  </em>\n  and\n  <em>\n   read-only\n  </em>\n  by the compiler and linker, regardless of whether it was defined in your code or an additional variable/object your program uses explicitly or implicitly.\n </p>\n <p>\n  <strong>\n   Now to your question;\n  </strong>\n  I mentioned additional objects can be explicitly and implicitly defined in your code, without you actually writing them. One explicit example is all the code\n  <code>\n   #include\n  </code>\n  ed in your program (\n  <code>\n   cstdio\n  </code>\n  in this case). Code implicitly included in your program is, for example, the code GCC adds that wraps and calls your defined\n  <code>\n   main\n  </code>\n  function and handles different operating system interfaces (setting up functions related stdin, stderr, stdout) as well as set up and teardown of program objects (that code is where globally scoped objects are initialized by calling their constructor in C++).\n </p>\n <p>\n  Although this is explained in depth in the linked answer, the actual values (\n  <code>\n   1\n  </code>\n  and\n  <code>\n   2\n  </code>\n  ) appear to be for a constant defined by GCC's\n  <a href=\"http://repo.or.cz/glibc.git/blob/HEAD:/csu/init.c#l24\" rel=\"nofollow noreferrer\">\n   <code>\n    init.c\n   </code>\n  </a>\n  :\n </p>\n <pre><code>const int _IO_stdin_used = 0x20001;\n</code></pre>\n <p>\n  That file is part of GCC's initialization code mentioned above, and is used to control the version of a input/output library GCC implements input/output in programs with.\n </p>\n <p>\n  <em>\n   it's worth noting that an hex-dump will help increase confidence in whether that is indeed the reason for the additional bytes you're seeing, as well as following the compilation and linking process, of course\n  </em>\n </p>\n <p>\n  A difference worth mentioning between your example and the one in the\n  <a href=\"https://stackoverflow.com/questions/34733136/why-static-string-in-rodata-section-has-a-four-dots-prefix-in-gcc\">\n   SO question\n  </a>\n  if the 14 zero bytes, which are of course padding to a boundary of 16 bytes, which is something compilers often do to optimize for execution time.\n  <s>\n   Replacing the\n   <code>\n    -O3\n   </code>\n   with\n   <code>\n    -Os\n   </code>\n   (optimize for size) will probably drop the 14 null bytes, although that is not guaranteed and may depend on the version of GCC you're using.\n  </s>\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Aug 23, 2018 at 0:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user202729",
                    "text": "<span class=\"comment-copy\"><a href=\"https://tio.run/##bVBNa8MwDL3rVwiX0a6ZS3baYWn/wo49NGWotjMbXNvY2tYx@tuzEEoIrLrpfYind6Ji@14R79gUfje@26iUmmZpYreEhQvKf2qDjSqsXdwBfEWn8fyTsgvcrVQMhVFZymtMnB/xF/A2N4V4SG0QTyP7CleAAcUzubCai6eDwhrvI37H7LUYDP8Fbd3W9xk6tbXSZk4WJnZqDIjWHY64RWGduOO2bow3vA3wUVUo9@Q9zktBGacd5VtBOXSyVVX1/ALZkB7hPcoLbnLUxDSp@/4P\" rel=\"nofollow noreferrer\">No it doesn't</a>.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes, I made clear that was just an assumption I made. Thanks for following it through with a test.</span>",
                    "time": null
                },
                {
                    "user": "HCSF",
                    "text": "<span class=\"comment-copy\">Thanks for expanding the answer in another post.  Just a side question -- is it possible to figure out programmatically (e.g. parsing with elf.h) whether a given virtual memory address/offset is a string literal instead of other constants?  Thanks!</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">That question might not be as simple as it sounds and additionally more about programing than reverse engineering, I suggest you open a new question over at stackoverflow.com</span>",
                    "time": null
                }
            ]
        }
    ]
}