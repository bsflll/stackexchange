{
    "title": "What type of disassembler is distorm?",
    "link": "https://reverseengineering.stackexchange.com/questions/14665/what-type-of-disassembler-is-distorm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In\n  <a href=\"http://web.uvic.ca/~salam/PhD/Alam_Shahid_PhD_2014.pdf\" rel=\"noreferrer\">\n   Alam\n  </a>\n  you can find the classical differentiation between disassemblers. The author explains in general the two well known types of disassemblers:\n </p>\n <blockquote>\n  <ol>\n   <li>\n    <p>\n     The\n     <strong>\n      Linear Sweep\n     </strong>\n     technique starts from the first byte of the code and disassembles one instruction at a time until the end. [...]\n    </p>\n   </li>\n   <li>\n    <p>\n     The\n     <strong>\n      Recursive Traversal\n     </strong>\n     technique relies on the control flow of the program and decodes the bytes by following the control flow of the\n  program. [...]\n    </p>\n   </li>\n  </ol>\n </blockquote>\n <p>\n  Afterwards, the author introduces\n  <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">\n   distorm\n  </a>\n  and he makes the following statement:\n </p>\n <blockquote>\n  <p>\n   Both techniques have some deficiencies. To overcome these deficiencies\n   <strong>\n    a good disassembler would combine both techniques\n   </strong>\n   . One such open\n  source disassembler, for non-commercial use, is distorm.\n  </p>\n </blockquote>\n <p>\n  After reading the docs of\n  <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">\n   distorm\n  </a>\n  , I'm not able to confirm this last statement. In my opinion, distorm seems to work like a classic Linear-Sweep version, and also will struggle with fake instructions and obfuscation (see\n  <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">\n   1\n  </a>\n  ). It calls itself \"stream disassembler\", where I was not able to fully clarify this expression.\n </p>\n <p>\n  <strong>\n   With these facts, I have two questions:\n  </strong>\n </p>\n <ol>\n  <li>\n   <p>\n    Is distorm really a combination of linear sweep and recursive\ntraversal as mentioned by the author?\n   </p>\n  </li>\n  <li>\n   <p>\n    What is your formal understanding of a \"stream disassembler\"?\n   </p>\n  </li>\n </ol>\n <hr/>\n <p>\n  <a href=\"http://web.uvic.ca/~salam/PhD/Alam_Shahid_PhD_2014.pdf\" rel=\"noreferrer\">\n   0\n  </a>\n  Page 47 in Alam, Shahid, et al. \"A framework for metamorphic malware analysis and real-time detection.\" computers & security 48 (2015): 212-233.\n </p>\n <p>\n  <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">\n   1\n  </a>\n  <a href=\"https://github.com/gdabah/distorm/wiki/StreamDisassembler\" rel=\"noreferrer\">\n   https://github.com/gdabah/distorm/wiki/StreamDisassembler\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassemblers"
    ],
    "user": "knx",
    "time": "Feb 16, 2017 at 17:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  DiStorm does\n  <strong>\n   not\n  </strong>\n  implement recursive traversal, however you can use distorm (or others, e.g. capstone) to implement your own recursive traversal algortihm.\n </p>\n <p>\n  There are a range of tools available doing something like this for you: IDA, BinaryNinja, JakStab (claims 'Iterative Disassembly') etc.\n </p>\n <p>\n  Since retrieving the ControlFlowGraph is a hard problem, people tend to separate between the translation from machine code to assembler and the useage of those frameworks to retrieve the actual control flow.\n </p>\n <p>\n  Cite from\n  <a href=\"https://github.com/gdabah/distorm/wiki/FlowControlSupport\" rel=\"noreferrer\">\n   diStorms Github:\n  </a>\n </p>\n <blockquote>\n  <p>\n   This is the time to say that diStorm, as a stream disassembler, doesn't do the flow control analysis work for you, but it will help you do that more easily.\n  </p>\n </blockquote>\n <p>\n  Disassemblers try to help by indicating which instructions may change the control flow and supplying direct targets, but implementing control flow recovery is non-trivial due to indriect jumps and anti-disassembler techniques.\n </p>\n <p>\n  Regarding the second part of the question: It disassembles a given stream of bytes (buffer object). That doesn't seem any different from any disassembler out there.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Nordwald",
            "time": "Feb 16, 2017 at 7:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">Okay, that totally confirmed my understandings. Danke f√ºr die schnelle Antwort!</span>",
                    "time": null
                }
            ]
        }
    ]
}