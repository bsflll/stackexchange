{
    "title": "Reverse Engineering Java - Deobfuscating symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/24598/reverse-engineering-java-deobfuscating-symbols",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new to Java and working on cleaning up a fairly large Java .jar sample where the obfuscator has renamed symbols into invalid names. For example:\n </p>\n <pre><code>import org.lib.00.0.2;\n\npublic final class 90\nextends 2 {\n    public 90() {\n        90 iiIIiiiiiIiIi;\n        90 v0 = iiIIiiiiiIiIi;\n    ...\n}\n</code></pre>\n <p>\n  Using Recaf I am renaming these symbols that are using numbers but after doing so Recaf isn't able to find the renamed classes/packages and subsequent compiles with my code changes fail.\n </p>\n <p>\n  Are there any tools that will automate restoring the symbols to legal names? If not, how can I rename things in a way that won't break package/class paths?\n </p>\n <p>\n  Additionally, I'm considering if I should be using the decompiler at all and maybe just altering the ASM/instructions. I'm pretty comfortable with regular assembly and it seems this might dodge some of the obfuscation measures?\n </p>\n <p>\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "504",
    "tags": [
        "disassembly",
        "obfuscation",
        "java",
        "deobfuscation",
        "decompile"
    ],
    "user": "user3238415",
    "time": "Apr 3, 2020 at 10:17",
    "comments": [
        {
            "user": "Yotamz",
            "text": "<html><body><span class=\"comment-copy\">\n Is this a single class file or a package that consists of more than one file? (ex. JAR).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user3238415",
            "text": "<html><body><span class=\"comment-copy\">\n Jar. Updated question to include this detail.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Col-E",
            "text": "<html><body><span class=\"comment-copy\">\n I understand how woefully late I am, but I develop Recaf. I believe I've resolved renaming breaking recompilation in the pre-releases. Anyways please consider opening bug report on actual project pages for proper support. Us dev's would appreciate getting bug reports like this first-hand.  But as Antimony has mentioned, you should use a disassembler for this, which the Recaf redesign also supports (And it is intended over recompiling anyways).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not sure about tools specifically for your first question, but as for your second question, yes, definitely!\n </p>\n <p>\n  Decompilation is useful for\n  <em>\n   understanding\n  </em>\n  code, but it is terrible for\n  <em>\n   modifying\n  </em>\n  code. Compilation and decompilation are both lossy processes. Also, there's a lot of things you can do in bytecode that have no Java equivalent, so you shouldn't expect obfuscated bytecode to even decompile cleanly in the first place.\n </p>\n <p>\n  Disassembly and assembly by contrast doesn't lose any information and can cleanly roundtrip even to obfuscated bytecode, at least if you use a good disassembler like\n  <a href=\"https://github.com/Storyyeller/Krakatau\" rel=\"nofollow noreferrer\">\n   Krakatau\n  </a>\n  . So if you are comfortable working with bytecode and are working with highly obfuscated bytecode, I would strongly recommend using Krakatau. For regular or moderately obfuscated bytecode (the most common case), other tools such as ASM will work as well, in case you want to use that instead. There are some bytecode quirks that ASM doesn't support properly, but I am not aware of any obfuscators in the wild that exploit them, so this is unlikely to be an issue in practice.\n </p>\n <p>\n  Note that the code you are working with may also be using introspection to try to detect tampering, so watch out for that. For example, some old versions of Stringer that I looked at would load themselves and count the number of constant pool entries in the classfile, so modifications would likely break them. (Krakatau makes it possible to avoid adding or removing constant pool entries if you're careful, but your best bet is to just analyze the code to find and remove the tamper checks)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Antimony",
            "time": "Apr 3, 2020 at 13:27",
            "is_accepted": true,
            "comments": []
        }
    ]
}