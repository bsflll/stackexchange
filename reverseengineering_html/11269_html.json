{
    "title": "Decompiling, changing, compiling and using a program which can damage my computer",
    "link": "https://reverseengineering.stackexchange.com/questions/11269/decompiling-changing-compiling-and-using-a-program-which-can-damage-my-compute",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to change a program which updates firmware on a computer. I want to decompile it, make changes in it, then compile it and use it for updating my computer's firmware.\n </p>\n <p>\n  I wonder if it is possible to make it right, I don't want to damage my computer, I also don't want to waste my time. I mean, is it possible to make just one small change, so the code I have after decompilation, change and compilation will be almost the same and safe?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "159",
    "tags": [
        "decompilation"
    ],
    "user": "Someone",
    "time": "Nov 7, 2015 at 16:15",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Um, yes. Just make a tiny, tiny change. But how could you be sure?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n If you want to make just one small change, patch the existing executable. Decompiling to something that's compilable and works like the original needs a\n <i>\n  lot\n </i>\n of manual work. But, please note that any such change might be disastrous. For example, if the firmware updater updates an ABC-XY-1 type mainboard, and you change the check to work with an ABC-XY-2, your updater will allow you to flash the ABC-XY-1 firmware to the non-matching mainboard, which will\n <i>\n  possibly\n </i>\n result in a board that refuses to boot.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The safest way is to have Dual BIOS or BIOS EEPROM in removable socket and appropriate HW programmer with original binary hex file at disposal so if anything goes wrong you have a safe way returning to operational state.\n </p>\n <p>\n  So prior to anything you do make a copy of your EEPROM image and store to\n  <strong>\n   safe removable medium\n  </strong>\n  in Intels HEX format. So if anything goes wrong you can try flash the EEPROM in a programmer (or seek someone that has one). Do not forget to check the content of the image (if you get wrong version of EEPROM utility the resulting image can be blank !!!)\n </p>\n <p>\n  Also if you by firmware refer to something else then BIOS please specify there are a lot of firmwares in nowadays PC's ...\n </p>\n <p>\n  If you are lucky and have Emulator for the device you want try this on that first. If working well than you should be fine (but you never can be 100% sure with emulators).\n </p>\n <p>\n  If you do not have access to HW programmer you can try HOT-SWAP as a last resort but it is a bit dangerous (if you shortcut anything you can burn out your device) ... for that you need spare EEPROM chip ... so boot from original one ... then swap chips and reprogram ... try if it works if not turn of swap again and you're back ...\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Spektre",
            "time": "Nov 9, 2015 at 8:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}