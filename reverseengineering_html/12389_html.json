{
    "title": "Intel PIN: InsertPredicatedCall and INS_InsertCall",
    "link": "https://reverseengineering.stackexchange.com/questions/12389/intel-pin-insertpredicatedcall-and-ins-insertcall",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The intel PIN manual (section Memory Reference Trace) says:\n </p>\n <blockquote>\n  <p>\n   We also use\n   <code>\n    INS_InsertPredicatedCall\n   </code>\n   instead of\n   <code>\n    INS_InsertCall\n   </code>\n   to\n  avoid generating references to instructions that are predicated when\n  the predicate is false\n   <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/76991/Pin/html/index.html#MAddressTrace\" rel=\"nofollow\">\n    see here.\n   </a>\n  </p>\n </blockquote>\n <p>\n  _\n </p>\n <blockquote>\n  <p>\n   When the instruction has a predicate and the predicate is false, the\n  analysis function is not called\n   <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/76991/Pin/html/group__INS__INST__API.html#g446df8cbefd4950b78cba7c9e7346053\" rel=\"nofollow\">\n    see here.\n   </a>\n  </p>\n </blockquote>\n <p>\n  If I want to analyze all instructions that are actually executed, which of the two shall I pick?\n </p>\n <p>\n  I assume\n  <code>\n   INS_InsertPredicatedCall\n  </code>\n  but I am not sure because I have seen\n  <code>\n   INS_InsertCall\n  </code>\n  more often. But why would somebody use it, i.e., why would somebody want to analyze instructions\n </p>\n <blockquote>\n  <p>\n   that are predicated when the predicate is false\n  </p>\n </blockquote>\n <p>\n  ? Maybe a minimal example of how the two functions lead to different results would be helpful here...\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "x86",
        "instrumentation",
        "pintool"
    ],
    "user": "langlauf.io",
    "time": "Apr 9, 2016 at 17:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You are correct, we should use\n  <code>\n   INS_InsertPredicatedCall\n  </code>\n  instead of\n  <code>\n   INS_InsertCall\n  </code>\n  in your case. It is quite intuitive to distinguish one from the other, consider the following code\n </p>\n <pre><code>cond:\n  xor eax, eax\n  mov edx, 0x1\n  cmp word [esp + 0x4], 0x5\n  cmovz eax, edx\n  ret\n</code></pre>\n <p>\n  whose\n  <code>\n   C\n  </code>\n  code is something likes\n </p>\n <pre><code>int cond(int input)\n{\n  return input == 0x5 ? 1 : 0;\n}\n</code></pre>\n <p>\n  If you use\n  <code>\n   INS_InsertCall\n  </code>\n  to trace executed instructions of\n  <code>\n   cond(input)\n  </code>\n  , then\n  <strong>\n   for any value\n  </strong>\n  of\n  <code>\n   input\n  </code>\n  , you observe always the trace:\n </p>\n <pre><code>xor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\ncmovz eax, edx\nret\n</code></pre>\n <p>\n  But if you use\n  <code>\n   INS_InsertPredicateCall\n  </code>\n  , then for\n  <code>\n   input != 0x5\n  </code>\n  , you will observe only:\n </p>\n <pre><code>xor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\nret\n</code></pre>\n <p>\n  since\n  <code>\n   cmovz\n  </code>\n  is a predicated instruction, it is executed only if\n  <code>\n   ZF = 1\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Ta Thanh Dinh",
            "time": "Apr 10, 2016 at 5:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}