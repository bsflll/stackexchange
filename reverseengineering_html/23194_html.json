{
    "title": "ELF imported symbols colision",
    "link": "https://reverseengineering.stackexchange.com/questions/23194/elf-imported-symbols-colision",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From what I understand, the\n  <code>\n   ELF\n  </code>\n  format doesn't specify which symbols come from which file - Every\n  <code>\n   ELF\n  </code>\n  that uses import has a list of symbols to import and list of file names, and the loader is trying to locate those symbols in the file names.\n </p>\n <p>\n  But what happens if there is a collision - the same symbol appears twice, in different files? Is it possible to somehow force by the\n  <code>\n   ELF\n  </code>\n  format the destination file to look for a specific symbol?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "233",
    "tags": [
        "elf"
    ],
    "user": "macro_controller",
    "time": "Feb 5, 2020 at 12:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This should be the problem of the linker at compile time. These things are not solved dynamically but statically. It should produce an error of the kind\n  <code>\n   multiple definition\n  </code>\n  as illustrated on the following example (taken from\n  <a href=\"https://stackoverflow.com/questions/36209788/gcc-multiple-definition-of-error\">\n   here\n  </a>\n  ):\n </p>\n <pre><code>/tmp/ccscmcbS.o:(.bss+0x0): multiple definition of `global_base'\n/tmp/ccyjhjQC.o:(.bss+0x0): first defined here\n/tmp/ccscmcbS.o: In function `find_free_block':\nsupport.c:(.text+0x0): multiple definition of `find_free_block'\n/tmp/ccyjhjQC.o:main.c:(.text+0x0): first defined here\n/tmp/ccscmcbS.o: In function `request_space':\nsupport.c:(.text+0x55): multiple definition of `request_space'\n/tmp/ccyjhjQC.o:main.c:(.text+0x55): first defined here\n/tmp/ccscmcbS.o: In function `get_block_ptr':\nsupport.c:(.text+0xfe): multiple definition of `get_block_ptr'\n/tmp/ccyjhjQC.o:main.c:(.text+0xfe): first defined here\ncollect2: error: ld returned 1 exit status\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "perror",
            "time": "Feb 5, 2020 at 15:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">I understand the compile-time, but my question is about the run time because then It's possible to do some naughty stuff</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Well, it can't be possible at runtime because it would be stopped at compile time... except if you use <code>dlopen</code>. But, in this case, the first loaded symbol will stay and anything with the same name will be rejected.</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">So basically the resolve order is the key? If the symbol name is found, the search is over, and there is no chance for the other name to be loaded too?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">The thing is that two same symbols cannot be loaded. I one is already present, the second won't make it. At build time or at run time... Collisions are avoided at any price.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@macr0controller correct. You may want to check out <a href=\"http://man7.org/linux/man-pages/man8/ld.so.8.html\" rel=\"nofollow noreferrer\"><code>LD_PRELOAD</code></a> and friends. macOS has a similar facility (<code>DYLD_INSERT_LIBRARIES</code>).</span>",
                    "time": null
                }
            ]
        }
    ]
}