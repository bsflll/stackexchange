{
    "title": "Unable to resolve the symbols for a statically linked binary in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/19695/unable-to-resolve-the-symbols-for-a-statically-linked-binary-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a statically linked binary which is stripped. When I load it in IDA Pro, I don't see the function names as expected.\n </p>\n <p>\n  I generated the sig file for libc on the Linux machine on which the program was compiled and then used this sig file in IDA Pro, most of the function names are resolved, however few functions are still not resolved. I want to know the following:\n </p>\n <ol>\n  <li>\n   Why are some function names not resolved even though I have used the sig file for libc from the machine on which the program was compiled?\n  </li>\n  <li>\n   How do I resolve all the function names?\n  </li>\n </ol>\n <p>\n  I have marked the functions in the disassembly below which I hope to resolve using the sig file:\n </p>\n <pre><code>push    rbp\nmov     rbp, rsp\nsub     rsp, 20h\nmov     [rbp+var_14], edi\nmov     [rbp+var_20], rsi\nmov     [rbp+var_8], 0\nmov     [rbp+var_4], 0\nlea     rax, [rbp+var_8]\nmov     rsi, rax\nmov     edi, offset unk_4937E4\nmov     eax, 0\ncall    sub_407FF0  // should be scanf function\nmov     edx, [rbp+var_8]\nmov     eax, [rbp+var_8]\nimul    eax, edx\nmov     [rbp+var_4], eax\nmov     eax, [rbp+var_4]\nmov     esi, eax\nmov     edi, offset aTheResultIsD ; \"the result is: %d\n\"\nmov     eax, 0\ncall    sub_407EC0 // should be printf function\nmov     eax, 0\nleave\nretn\n</code></pre>\n <p>\n  Specifically, the functions, scanf and printf.\n </p>\n <p>\n  Now, to generate the sig file, I used flair tools of IDA Pro and on the Linux machine, I generated using the following commands:\n </p>\n <pre><code>./pelf /usr/lib/x86_64-linux-gnu/libc.a libc.pat\n\n./sigmake libc.pat libc.sig\n</code></pre>\n <p>\n  from the exc file generated by sigmake, I removed the first 4 lines:\n </p>\n <pre><code>;--------- (delete these lines to allow sigmake to read this file)\n; add '+' at the start of a line to select a module\n; add '-' if you are not sure about the selection\n; do nothing if you want to exclude all modules\n\n__iswctype                                          32 49F3 31C04885F674498B0E89FAD3EA3B5604733E83C2058B149685D274348B4E0841\n__iswctype_l                                        32 49F3 31C04885F674498B0E89FAD3EA3B5604733E83C2058B149685D274348B4E0841\n\n__chk_fail                                          00 0000 4883EC08BF........E8............................................\n__stack_chk_fail                                    00 0000 4883EC08BF........E8............................................\n</code></pre>\n <p>\n  I then, ran sigmake once again to generate the sig file:\n </p>\n <pre><code>./sigmake libc.pat libc.sig\n</code></pre>\n <p>\n  Then, I placed this sig file inside the sig folder of IDA Pro and applied the signature (Shift + F5 in IDA pro). Now, 783 functions were resolved.\n </p>\n <p>\n  However, in the main subroutine,\n  <code>\n   scanf\n  </code>\n  and\n  <code>\n   printf\n  </code>\n  functions are still not resolved.\n </p>\n <p>\n  If someone wants to take a look at the statically compiled binary, I have uploaded it here:\n </p>\n <p>\n  <a href=\"https://www.sendspace.com/file/j9piey\" rel=\"nofollow noreferrer\">\n   https://www.sendspace.com/file/j9piey\n  </a>\n </p>\n <p>\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "509",
    "tags": [
        "ida",
        "elf"
    ],
    "user": "Neon Flash",
    "time": "Oct 23, 2018 at 0:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   the library you parsed was not an exact match for the binary. Check the bytes in the binary against the bytes in the library/pattern.\n  </li>\n  <li>\n   there was some other issue that prevented matching the signature. You can run IDA with\n   <code>\n    -z4\n   </code>\n   switch to see extra debug output during FLIRT processing, it may give some clues.\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Oct 24, 2018 at 10:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Neon Flash",
                    "text": "<span class=\"comment-copy\">Thanks, I will try it. The libc file which I used to generate the sig file is exactly the same as the one used to compile the binary. I will try starting IDA with -z4 option and see if I can get more details about it.</span>",
                    "time": null
                }
            ]
        }
    ]
}