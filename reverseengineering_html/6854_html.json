{
    "title": "Win64 .pdata required to be a separate COFF section?",
    "link": "https://reverseengineering.stackexchange.com/questions/6854/win64-pdata-required-to-be-a-separate-coff-section",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems that Windows usually finds its support structures inside PEs by looking at the header information (especially OptionalHeader.DataDirectory[]), which means that there is no mandatory mapping between these data blocks and certain COFF sections (even though it is somewhat customary, as with .rsrc). As a consequence the COFF sections and their names tend to be all over the place when an executable has been mangled by a packer, 'protector' or some such.\n </p>\n <p>\n  However, it seems that Windows determines location and size of the .pdata (array of\n  <a href=\"http://msdn.microsoft.com/en-us/library/ft9x1kdx.aspx\" rel=\"nofollow\">\n   RUNTIME_FUNCTION\n  </a>\n  ) via the .pdata COFF section header. Is that correct?\n </p>\n <p>\n  That would make this section unique in that even the most hare-brained 'protector' would have to emit accurate information under the correct name, or register that information dynamically...\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "pe",
        "seh",
        "binary-format"
    ],
    "user": "DarthGizka",
    "time": "Dec 19, 2014 at 12:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  No, the Windows loader doesn't care about the name of the\n  <code>\n   .pdata\n  </code>\n  section. It doesn't find the\n  <code>\n   RUNTIME_FUNCTION\n  </code>\n  structs based on the section name, but rather based on the content of\n  <code>\n   NtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION]\n  </code>\n  .\n </p>\n <p>\n  Furthermore, the\n  <code>\n   RUNTIME_FUNCTION\n  </code>\n  structs don't need to be in \"a separate COFF section\".\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Dec 19, 2014 at 15:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">Thanks, somehow I missed the Exception Table which used to be empty for x86 PEs. It seems that x64 use of this table was documented in v8 of the PE COFF specification; MSDN currently has version 8.3 for download (<a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx\" rel=\"nofollow noreferrer\">pecoff_v83.docx</a>). Anyway, thanks again! I should have looked more closely at the header info.</span>",
                    "time": null
                }
            ]
        }
    ]
}