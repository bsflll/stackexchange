{
    "title": "WinDbg Debugging without symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/6266/windbg-debugging-without-symbols",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I am trying to learn how to debug files that I don't have the symbol files for.  The most common advice is to issue\n  <code>\n   bp $exentry\n  </code>\n  or\n  <code>\n   bu @$exentry\n  </code>\n  .  However, neither of these work.  Once I\n  <code>\n   g\n  </code>\n  the executable it breaks on\n  <code>\n   ntdll32!LdrpDoDebuggerBreak+0x2c\n  </code>\n  .  Nothing in the call stack gives any useful information.  If I issue\n  <code>\n   g\n  </code>\n  again, the executable runs to termination.\n </p>\n <p>\n  Any advice on how to get to\n  <code>\n   main()\n  </code>\n  without manually stepping through all the startup code?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "debugging",
        "windbg",
        "symbols"
    ],
    "user": "Robert Mason",
    "time": "Sep 19, 2014 at 21:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Make sure if you have the correct breakpoint address\n </p>\n <p>\n  issue\n  <code>\n   lm\n  </code>\n  an exe without symbol will be shown as\n </p>\n <pre><code>0:000> lm\nstart    end        module name\n00400000 0040f000   image00400000   (no symbols)    \n</code></pre>\n <p>\n  compare the\n  <code>\n   NtHeader->AddresssOfEntrypoint\n  </code>\n  with\n  <code>\n   @$exentry\n  </code>\n </p>\n <pre><code>0:000> r $t0 = image00400000\n0:000> ?? ((ntdll!_IMAGE_NT_HEADERS *) @@( poi( @$t0 + 0x3c ) + @$t0 ))->OptionalHeader.AddressOfEntryPoint + @$t0\nunsigned int64 0x401280\n0:000> ? @$exentry\nEvaluate expression: 4199040 = 00401280\n</code></pre>\n <p>\n  if they are same setting a breakpoint with\n  <code>\n   bp @$exentry\n  </code>\n  or\n  <code>\n   bp 401280\n  </code>\n  should both break properly at that address only if there is no Debugger Detection in you Binary\n </p>\n <p>\n  if your binary has Debugger Detection then you may need to examine the DllInitRoutines Tls Callbacks and other cute tricks\n </p>\n <p>\n  output sample exe without any Anti Debugging Tricks breaking properly at @$exentry below\n </p>\n <pre><code>0:000> .lastevent\nLast event: bc.a70: Break instruction exception - code 80000003 (first chance)\n  debugger time: Sun Sep 21 01:10:42.015 2014 (UTC + 5:30)\n0:000> lm M *im*\nstart    end        module name\n00400000 0040f000   image00400000   (no symbols)\n0:000> $ binary without symbols whose module name is normally shown as imageXXXXXX\n\n0:000> r $t0 = image00400000 ; $ set Pseudo Register to start\n\n0:000> r $t1 = poi(@$t0+3c)  ; $ find pointer to Ntheader\n\n0:000> r? $t2 = (ntdll!_IMAGE_NT_HEADERS *) (@$t0 + @$t1)  ; set c++ pseudo Register\n\n0:000> ?? @$t2->OptionalHeader.AddressOfEntryPoint + @$t0  ; Find AddressofEntryPoint\nunsigned int64 0x401280\n\n0:000> ? @$exentry\nEvaluate expression: 4199040 = 00401280\n\n0:000> bp @$exentry\n\n0:000> bl\n 0 e 00401280     0001 (0001)  0:**** image00400000+0x1280\n\n0:000> g\nBreakpoint 0 hit    \nimage00400000+0x1280:\n00401280 55              push    ebp\n0:000>\n</code></pre>\n <p>\n  this is\n  <code>\n   not main()\n  </code>\n  it will be the start of\n  <code>\n   c runtime init code\n  </code>\n  usually termed as\n  <code>\n   XYZ_MainCrtStartUp()\n  </code>\n  you may need to inspect the binary to find the Main() if you know the compiler you can usually spot the initialisation code it would be common code\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "blabb",
            "time": "Sep 20, 2014 at 22:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}