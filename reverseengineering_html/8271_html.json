{
    "title": "Studying Zeus 2.X",
    "link": "https://reverseengineering.stackexchange.com/questions/8271/studying-zeus-2-x",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm doing some study on Zeus 2.x, trying to wrap my head around how it works. By using\n  <a href=\"https://github.com/Visgean/Zeus\" rel=\"nofollow\">\n   this code\n  </a>\n  . I've built my own builder to work on my test environment.\n </p>\n <p>\n  Right know I want to do a very specific thing, which is extracting from memory the webinjects configuration. The first experiments I did was to attach to IExplorer and monitor calls to functions I know Zeus hooks, like\n  <code>\n   HttpSendRequest*\n  </code>\n  . I was expecting that at some point while stepping through those executions I'd see the injections configuration loaded into memory. I've tried to automate the proccess setting a breakpoint upon call of this function and using OllyDbg's Memory Watch plugin, which dumps every string it encounters.\n </p>\n <blockquote>\n  <p>\n   So now I want to pinpoint and understand exactly where should I look to see this decrypted configuration in memory.\n  </p>\n </blockquote>\n <p>\n  My assumptions so far:\n </p>\n <ul>\n  <li>\n   I'm unable to see anything strange because the\n   <code>\n    HttpSendRequestX\n   </code>\n   function I'm setting a breakpoint is actually the original, unchanged from Wininet;\n  </li>\n  <li>\n   Dumping memory of the machine and analysing it offline is not enough, since the structure which holds the webinjects (BinStorage) is loaded in memory when it's needed and then discarded (free'd)\n  </li>\n </ul>\n <p>\n  At this point I was thinking to monitor calls to\n  <code>\n   VirtualAlloc\n  </code>\n  and place a breakpoint on memory write on those newly allocated areas (at some point Zeus is bound to place there the encrypted configuration and then decrypt it).\n </p>\n <p>\n  But this is still a long shot. Any ideas? Also I'm doing most of this work by attaching on\n  <code>\n   IExplore.exe\n  </code>\n  , should I do it on\n  <code>\n   explorer.exe\n  </code>\n  instead?\n </p>\n <p>\n  Any tips are appreciated !\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "856",
    "tags": [
        "disassembly",
        "windows",
        "ollydbg",
        "malware"
    ],
    "user": "Fisher",
    "time": "Feb 18, 2015 at 15:26",
    "comments": [
        {
            "user": "alexanderh",
            "text": "<html><body><span class=\"comment-copy\">\n If you haven't read it, IOActives zeus analysis is worth checking out\n <a href=\"http://www.ioactive.com/pdfs/ZeusSpyEyeBankingTrojanAnalysis.pdf\" rel=\"nofollow noreferrer\">\n  link\n </a>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Answering my own question for further reference:\n </p>\n <p>\n  Zeus and many other MiTB capable trojans use API hooking as preferred method to inject malicious code in the webpages before they are rendered by the victim. API hooking is sort of like doing a MiTM of a system call, whereby the bot intercepts the call, takes ownership and control, performs some malicious action and then returns control to the original function. Something like:\n </p>\n <p>\n  call\n  <code>\n   network_function\n  </code>\n  :\n </p>\n <pre><code>JMP XYZ ----> JMPs to malicious code \n..                |\n..                |\n...           <---- returns to the original function\n</code></pre>\n <p>\n  So, in this scenario, in order to extract the web injects, the best bet was to understand the logic of the trojan. That is, after a user opens a URL in the browser, this URL will be matched with a list containing the configuration of which URLs to inject. This will surely be performed on Wininet functions such as\n  <code>\n   HttpSendRequest\n  </code>\n  ,\n  <code>\n   HttpOpenRequest\n  </code>\n  , etc. If we breakpoint on that function in the main process of\n  <code>\n   IExplore.exe\n  </code>\n  (in an infected machine) we'll see the first instruction to be that\n  <code>\n   JMP\n  </code>\n  instruction we've talked about. If we then proceed to step into, we'll access the actual instructions using the structure BinStorage and other, all related to Zeus. Since there is still a lot of code to go through and the interest was to retrieve the webinjects, one approach is to monitor for decryption / decode instructions (Zeus's configuration is stored encrypted; it only makes sense that if we monitor the instructions responsible for this operation will lead us to the actual decrypted content).\n </p>\n <p>\n  In this case searching for the sequence of bytes\n </p>\n <pre><code> MOV ANY, ANY\n XOR ANY, ANY\n INC EAX\n DEC ESI\n</code></pre>\n <p>\n  If we breakpoint after the last instruction and then inspect the contents of the memory address pointed by the destination operands in the\n  <code>\n   MOV\n  </code>\n  /\n  <code>\n   XOR\n  </code>\n  operations we will most likely find the decrypted payload (i.e. our dynamic configuration section).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "perror",
            "time": "Apr 28, 2015 at 18:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}