{
    "title": "How can I analyze a potentially harmful binary safely?",
    "link": "https://reverseengineering.stackexchange.com/questions/23/how-can-i-analyze-a-potentially-harmful-binary-safely",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've recently managed to isolate and archive a few files that managed to wreak havoc on one of my client's systems. So I was wondering what software and techniques make the best sandbox for isolating the code and digging into it to find out how it works.\n </p>\n <p>\n  Usually, up to this point in time I would just fire up a new VMWare or QEMU instance and dig away, but I am well aware that some well-written malware can break out of a VM relatively easily. So I am looking for techniques (Like using a VM with a different emulated CPU architecture for example.) and software (Maybe a sandbox suite of the sorts?) to mitigate the possibility of the code I am working on \"breaking out\".\n </p>\n <p>\n  What techniques do you recommend? What software do you recommend?\n </p>\n</div>\n</body></html>",
    "votes": "67",
    "answers": 4,
    "views": "6k",
    "tags": [
        "virtual-machines",
        "malware",
        "sandbox",
        "security"
    ],
    "user": "Archenoth",
    "time": "Mar 21, 2013 at 7:03",
    "comments": [
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://security.stackexchange.com/questions/12546/is-it-safe-to-install-malware-in-a-vm\">\n  Is it safe to install malware in a VM\n </a>\n provides some background.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<html><body><span class=\"comment-copy\">\n Also\n <a href=\"http://security.stackexchange.com/questions/9011/does-a-virtual-machine-stop-malware-from-doing-harm\">\n  Does a Virtual Machine stop malware from doing harm?\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hippietrail",
            "text": "<html><body><span class=\"comment-copy\">\n Be aware that questions of the form \"What X do you all use?\" would be regarded as a polling question, a kind of question poorly regarded on Stack Exchange as more befitting the forum format than our Q&A format.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Archenoth",
            "text": "<html><body><span class=\"comment-copy\">\n Noted... Also someone suggested an edit to remedy that, so I accepted it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The title mentions \"sandbox\" but VMWare or QEMU is usually not called that, so the question seems to be more about \"how do I analyze it without a danger of infection?\"\n </p>\n <p>\n  There are three broad categories of tools and approaches you could take here.\n </p>\n <h1>\n  1. User-mode sandboxes\n </h1>\n <p>\n  A user-mode sandbox basically runs the sample being investigated but intercepts all or at least the most critical APIs that access the host OS, neutralizes them and modifies the results to fool the software into thinking it's running all alone. One of the most popular such tools seems to be\n  <a href=\"http://www.sandboxie.com/\">\n   Sandboxie\n  </a>\n  , but there exist others such as\n  <a href=\"http://code.google.com/p/pyboxed/\">\n   PyBox\n  </a>\n  . Usually can be detected by the malware pretty easily and there's always a danger that an unemulated API will let the code to run amok.\n </p>\n <h1>\n  2. Virtual machines and emulators\n </h1>\n <p>\n  These go a bit deeper and try to emulate not only APIs but execution of the actual code. As well, usually you need to run a full OS inside the emulator and can't use the host OS as is (could be an advantage or disadvantage depending on your goals). These can be further subdivided in three categories by approach used for emulation:\n </p>\n <h3>\n  a)  virtualization\n </h3>\n <p>\n  These include VMWare, VirtualBox and VirtualPC. They use virtualization features of the recent processors to run most of the code natively and only emulate memory or hardware accesses. This makes them fast but in theory can lead to code escaping the VM in case of implementation bugs.\n </p>\n <h3>\n  b) dynamic translation\n </h3>\n <p>\n  This approach is used by QEMU. It translates each basic block into a sequence of native CPU's instructions and executes that. This approach allows it to reasonably fast emulate many different architectures, however the timing may differ quite a lot from the original. I don't think I've heard of any VM escaping bugs but it's possible to detect it.\n </p>\n <h3>\n  c) full emulation\n </h3>\n <p>\n  This is used by Bochs. It fully emulates each separate instruction one by one, as they're being executed. This makes it somewhat slower than other solutions but allows it to achieve almost perfect emulation of even the most low-level details. It's also probably the safest regarding to VM escaping bugs. There were some implementation bugs that could be used to detect it but I think most of them have been fixed.\n </p>\n <h1>\n  3. Static analysis\n </h1>\n <p>\n  The best way to avoid the break out is to not run the code at all! Also, static analysis allows you to look at the complete code of the binary and see all of it, even the code paths which are not taken by running it and you sidestep all runtime checks and detections.\n </p>\n <p>\n  Unfortunately, static analysis can be hampered by packing or obfuscation used in the malware. So it's often necessary to combine several approaches. I'm not a professional analyst, but I do dabble in some malware analysis. My workflow usually goes like this:\n </p>\n <ol>\n  <li>\n   Open sample in IDA.\n  </li>\n  <li>\n   if it looks packed or encrypted, use\n   <a href=\"https://hex-rays.com/video/bochs_video_1.html\">\n    Bochs debugger\n   </a>\n   to emulate its execution and let it unpack itself.\n  </li>\n  <li>\n   When it's finished (usually it's obvious), I take a memory snapshot, stop debugging, and continue analysis statically.\n  </li>\n  <li>\n   If the unpacked code contains another embedded file (pretty common situation), saved it into a separate file and go to step 1\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "67",
            "user": "Igor Skochinsky",
            "time": "Mar 20, 2013 at 0:41",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://bochs.sourceforge.net/\">\n   Bochs\n  </a>\n  if you don't need speed but lots of flexibility. You can use\n  <a href=\"http://bochs.sourceforge.net/doc/docbook/user/debugging-with-gdb.html\">\n   Bochs with GDB\n  </a>\n  .\n </p>\n <p>\n  <a href=\"http://wiki.qemu.org/Main_Page\">\n   Qemu\n  </a>\n  if you need more speed and less flexibility (it does dynamic translation so you gain bit of speed but lose the acutal sequence of the instructions) possibly  a bit less safe than bochs. Its similar to Vmware and virtualbox actually derives from it. You can use\n  <a href=\"http://wiki.osdev.org/GDB\">\n   GDB with Qemu\n  </a>\n  .\n </p>\n <p>\n  Xen a friend of mine is quite confident in the Xen hypervisor as long as you set it up correctly which means using a serial loopback for configuration and other complex setup. However it would be very fast but still isolated and from what I understand it would garrantee your security as long as you controled the serial connection. Still Bochs is probably safest.\n </p>\n <p>\n  Also while not an emulator/virtualization solution debuggers like\n  <a href=\"http://en.wikipedia.org/wiki/SoftICE\">\n   SoftICE\n  </a>\n  might be useful even though many softwares now detect and circumvent it.\n </p>\n</div>\n</body></html>",
            "votes": "24",
            "user": "cb88",
            "time": "Mar 19, 2013 at 22:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Gilles provided some great links and I want to discuss the use a virtual machines for malware analysis a bit more. While a VM breakout certainly is a possibility, I have yet to come across  such a case or even heard about one and I assume this would make some buzz should someone find one. To be safe, simply run your VM software on an isolated computer and network like you would when using a debugger.\n </p>\n <p>\n  I encourage you to try\n  <a href=\"http://www.cuckoosandbox.org/about.html\">\n   Cuckoo Sandbox\n  </a>\n  . It automates the process of running the malware in a VM (VMware, VirtualBox & KVM are supported) and extract data such as modified files, memory dumps or network traffic. It even supports API tracing via DLL injection which is pretty neat.\n </p>\n</div>\n</body></html>",
            "votes": "16",
            "user": "ekse",
            "time": "Mar 20, 2013 at 0:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Literally, for a first look on malware, you won't need anything special locally installed.\nThere are enough online sandboxes you may use:\n </p>\n <ul>\n  <li>\n   <a href=\"https://www.virustotal.com/\" rel=\"noreferrer\">\n    virustotal.com\n   </a>\n   have their sandbox implemented using\n   <a href=\"http://www.cuckoosandbox.org/\" rel=\"noreferrer\">\n    Cuckoo Sandbox\n   </a>\n   . When you apply new sample, it automatically executed as part of analysis. After about 10-15 mins you can see the result in \"Behavioural information\"\n  </li>\n  <li>\n   <a href=\"http://anubis.iseclab.org/\" rel=\"noreferrer\">\n    anubis.iseclab.org\n   </a>\n   is another place you may submit binary to see it behavior before executing it locally. Here you got report and pcap file of network activity, if any.\n  </li>\n </ul>\n <p>\n  As a result - you may get basic idea of what a binary does and how to analyse it.\nBut - please note, that sophisticated malware checks its environment for sandbox traces and VM presence. So there is a chance that the seemingly \"harmless binary\" turns out to be sophisticated malware under real conditions.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "0xC0000022L",
            "time": "Apr 7, 2013 at 15:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}