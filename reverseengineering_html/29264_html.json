{
    "title": "How to get offset of specific function in exe?",
    "link": "https://reverseengineering.stackexchange.com/questions/29264/how-to-get-offset-of-specific-function-in-exe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Suppose I have self-compiled exe-file (aka portable executable), its source (c/c++) and generated pdb-file. And what if I want to get offset of its function (non-winapi function) in debugger (x64dbg, whatever) to set breakpoint on it? I would like to know/learn about existing reversing techniques to do it.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "debugging",
        "x64dbg",
        "executable",
        "x86-64"
    ],
    "user": "ruakh",
    "time": "Sep 8, 2021 at 13:11",
    "comments": [
        {
            "user": "ruakh",
            "text": "<html><body><span class=\"comment-copy\">\n I followed this thread\n <a href=\"https://reverseengineering.stackexchange.com/questions/26083/how-to-find-the-address-offset-of-specific-driver-function?rq=1\" title=\"how to find the address offset of specific driver function\">\n  reverseengineering.stackexchange.com/questions/26083/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guillaume",
            "text": "<html><body><span class=\"comment-copy\">\n Two options. First one: you open up the binary in a disassembler (let's say IDA), you find the function you are interested in. Grab it's address, subtract it from the base address and you'll have the relative offset. Then fire up x64dbg, add this offset to the loaded base address and you can put a bp on it. Second option: load the binary in x64dbg, open the 'Symbols' tab, and search for your target function (if it have a meaningful name). You can also break on this and you are good to go :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  x64dbg can load the pdb and list all the function names if you have pdb for your executable\n </p>\n <p>\n  view->modules->download symbols for this module\n  <a href=\"https://i.sstatic.net/Zk34H.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Zk34H.png\"/>\n  </a>\n  also x64dbg can use the source file (ctrl+shift+s)\n  <a href=\"https://i.sstatic.net/1JiC5.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/1JiC5.png\"/>\n  </a>\n </p>\n <p>\n  just for completion sake windbg usage\n </p>\n <pre><code>:\\>cdb -c \".lines;bp `winchk.cpp:17`\" winchk.exe\n\nMicrosoft (R) Windows Debugger Version 10.0.17763.132 AMD64\n\n\nCommandLine: winchk.exe\n\n\nntdll!LdrpDoDebuggerBreak+0x30:\n00007ffa`055f108c cc              int     3\n0:000> cdb: Reading initial command '.lines;bp `winchk.cpp:17`'\nLine number information will be loaded\n0:000> bl\n 0 e 00007ff7`ad0f1090     0001 (0001)  0:**** winchk!main\n0:000> g\nBreakpoint 0 hit\nwinchk!main:\n00007ff7`ad0f1090 4883ec38        sub     rsp,38h\n0:000>\n</code></pre>\n <p>\n  you can use the dbh.exe in windbg installation folder to rebase and get exact address\n </p>\n <pre><code>winchk [1000000]: x *\n\n index            address     name\n     1            1001090 :   main\n     3            1001060 :   atest\n     5            1001000 :   ctest\n     6            1001030 :   btest\n\nwinchk [1000000]: base 0x400000\n\n\nwinchk [400000]: x *\n\n index            address     name\n     1             401090 :   main\n     3             401060 :   atest\n     5             401000 :   ctest\n     6             401030 :   btest\n\nwinchk [400000]:\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Sep 8, 2021 at 12:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ruakh",
                    "text": "<span class=\"comment-copy\">That's exactly what I needed, thank you!</span>",
                    "time": null
                }
            ]
        }
    ]
}