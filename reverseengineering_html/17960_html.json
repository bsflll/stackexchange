{
    "title": "gdb not opening exe file",
    "link": "https://reverseengineering.stackexchange.com/questions/17960/gdb-not-opening-exe-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to open an exe with gdb but although it seems to run I'm unable to list or disas anything. The file is obfuscated, and I may be answering my own question here, with nine rays .net obfuscator.\n </p>\n <p>\n  Does this mean I'm unable to use a debugger or should I be able to open with a debugger such as idapro or gdb but have stuff missing?\n </p>\n <p>\n  When in gdb I run (gdb)file name.exe I get the message 'Reading symbols from name.exe...(no debugging symbols found)...done.'\n </p>\n <p>\n  The output from linux files command is 'PE32 excutable (console Intel 80386 Mono/.Net Assembly, for MS Windows'\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly"
    ],
    "user": "Jay",
    "time": "Apr 10, 2018 at 23:34",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n No binary format handler is defined in the Linux kernel for PE binary files. As a result the kernel will not compose a process image in virtual memory from a PE binary. No process image means no debugging since there is nothing for ptrace to attach to.\n <a href=\"https://lwn.net/Articles/630727/\" rel=\"nofollow noreferrer\">\n  lwn.net/Articles/630727\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you just want a quick and dirty raw disassembly of a short snippet, you can load the relevant part of the exe using gdb's\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Dump_002fRestore-Files.html#Dump_002fRestore-Files\" rel=\"nofollow noreferrer\">\n   restore\n  </a>\n  command.  It is easier to first, extract the snippet, for example:\n </p>\n <pre><code>tail -c +4096 the-program-with-the-snippet.exe | head -c 1024 > snippet\n</code></pre>\n <p>\n  Then, you need to start debugging a dummy program and replace its main function with the snippet you want to disassemble.  For example::\n </p>\n <pre><code>~/tmp$ gdb -q dummy\nReading symbols from dummy...done.\n(gdb) break main\nBreakpoint 1 at 0x79f: file dummy.c, line 9.\n(gdb) run\nStarting program: /home/ale/tmp/dummy \n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe2b8) at dummy.c:9\n9       for (int i = 1; i < argc; ++i)\n(gdb) restore snippet binary main\nRestoring binary file snippet into memory (0x555555554790 to 0x555555554b90)\n(gdb) disass\nDump of assembler code for function main:\n   0x0000555555554790 <+0>:     add    %bh,-0x35(%rdi)\n   0x0000555555554793 <+3>:     movabs 0xa1cba872a376f272,%eax\n   0x000055555555479c <+12>:    jb     0x555555554806 <main+118>\n   0x000055555555479e <+14>:    cmp    0x72a270b7(%rdx,%rsi,2),%esp\n   0x00005555555547a5 <+21>:    loopne 0x5555555547c2 <main+50>\n   0x00005555555547a7 <+23>:    movabs 0xa1cd0572a12b0f72,%eax\n   0x00005555555547b0 <+32>:    jb     0x5555555547c2 <main+50>\n   0x00005555555547b2 <+34>:    pop    %rsi\n   0x00005555555547b3 <+35>:    movabs %eax,0xa1d13272a1cd3a72\n   0x00005555555547bc <+44>:    jb     0x5555555547b5 <main+37>\n   0x00005555555547be <+46>:    loopne 0x555555554760 <frame_dummy>\n   0x00005555555547c0 <+48>:    jb     0x5555555547a6 <main+22>\n   0x00005555555547c2 <+50>:    iret   \n...\n---Type <return> to continue, or q <return> to quit---\n</code></pre>\n <p>\n  Of course, any format information (symbols and the like) is lost.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ale",
            "time": "Aug 13, 2018 at 12:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You wouldn't be able to debug a Windows executable on a Linux machine with\n  <code>\n   gdb\n  </code>\n  without installing and configuring components that are required. @SYS_V explained it very well in his comment.\n </p>\n <p>\n  If you want to debug a Windows executable on Linux you have several ways to do so. I recommend you to check out a specific one -\n  <a href=\"https://wiki.winehq.org/Winedbg\" rel=\"nofollow noreferrer\">\n   Winedbg\n  </a>\n  .\n </p>\n <hr/>\n <p>\n  In addition, since you mentioned that you want to debug a\n  <code>\n   .net\n  </code>\n  application I'd suggest you check out\n  <a href=\"https://github.com/0xd4d/de4dot\" rel=\"nofollow noreferrer\">\n   de4dot\n  </a>\n  and\n  <a href=\"https://github.com/0xd4d/dnSpy\" rel=\"nofollow noreferrer\">\n   dnSpy\n  </a>\n  , both are for Windows systems. de4dot can be used to deobfuscate\n  <code>\n   .net\n  </code>\n  obfuscated applications where dnSpy will allow you to decompile and debug\n  <code>\n   .net\n  </code>\n  applications.\n </p>\n <p>\n  Disassembling a\n  <code>\n   .net\n  </code>\n  applications is not a best practice since usually you'll only see the Intermediate Language (\n  <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">\n   CIL/MSIL\n  </a>\n  ).\n  <code>\n   .net\n  </code>\n  decompilers are able to show you the original source code of the application.\n </p>\n <p>\n  If you want to decompile\n  <code>\n   .net\n  </code>\n  applications on Linux you can try with\n  <a href=\"https://github.com/icsharpcode/ILSpy\" rel=\"nofollow noreferrer\">\n   ILSpy\n  </a>\n  or\n  <a href=\"http://tirania.org/blog/archive/2011/Feb-04.html\" rel=\"nofollow noreferrer\">\n   Mono decompiler\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Megabeets",
            "time": "Apr 11, 2018 at 6:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}