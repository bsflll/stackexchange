{
    "title": "Difficulty in debugging with dnSpy",
    "link": "https://reverseengineering.stackexchange.com/questions/21215/difficulty-in-debugging-with-dnspy",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a dotnet malware sample that I'm trying to debug with\n  <code>\n   dnSpy\n  </code>\n  . It has string obfuscation (contains function names such as\n  <code>\n   BarriersBottomed\n  </code>\n  , etc.) I cleaned the sample using\n  <code>\n   de4dot\n  </code>\n  and renamed functions to make them more understandable.\n </p>\n <p>\n  I placed a breakpoint on\n  <code>\n   Main\n  </code>\n  and also specified in the debug settings to break at\n  <code>\n   Entry Point\n  </code>\n  , but the program never hits the breakpoint. When I click on\n  <code>\n   Start\n  </code>\n  , it runs for a few seconds and then I get a\n  <code>\n   dnSpy\n  </code>\n  error:\n </p>\n <pre><code>An unhandled exception occurred in kahjvb-cleaned.exe (2160)\nException: ???\nMessage: \"<no exception message>\"\n</code></pre>\n <p>\n  So, in the\n  <code>\n   Debug\n  </code>\n  options I checked the\n  <code>\n   Ignore unhandled exceptions\n  </code>\n  and restarted debugging with the same options as before. Now, the debugger just runs for a few seconds and the debugging process completes. It still doesn't hit the breakpoint.\n </p>\n <p>\n  Has anyone faced an issue of this type before or has any insights into this problem? Thanks for the help!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "malware",
        "dynamic-analysis"
    ],
    "user": "Nikhil",
    "time": "Apr 25, 2019 at 12:26",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n It might be difficult to propose anything without looking into this specific binary.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Debugging a \"cleaned\" binary is typically hard.  Many cleaning techniques will leave you with a malformed binary that is easy to \"read\" but won't execute properly.  I suggest statically analyzing the \"cleaned\" version and then using what you learn to debug the original version.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "knowmalware",
            "time": "Apr 30, 2019 at 1:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nikhil",
                    "text": "<span class=\"comment-copy\">Right, that's what I ended up doing. Thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}