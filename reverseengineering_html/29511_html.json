{
    "title": "Reverse engineering STM32F303 firmware udpate",
    "link": "https://reverseengineering.stackexchange.com/questions/29511/reverse-engineering-stm32f303-firmware-udpate",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an .exe file, which connects via USB to a STM32F303 peripheral with unknown firmware. The .exe is able to update the STM32 firmware via the USB. The firmware update is also provided, and its extension is .fwu (I would assume that stands for firmware update).\n </p>\n <p>\n  I have no knowledge on what bootloader is used in the STM32. Unfortunately I don't have the peripheral itself. My insights on the .exe are also quite limited, as it will not work if the peripheral is not connected; all I know is that it attaches to the STM32, which provides a virtual COM port.\n </p>\n <p>\n  What I did so far:\n </p>\n <ul>\n  <li>\n   Ran\n   <code>\n    binwalk\n   </code>\n   on the firmware update - no hits\n  </li>\n  <li>\n   Tried to extract .bin file from the firmware update, hoping that it is a plain .dfu file - failed\n  </li>\n  <li>\n   Ran\n   <code>\n    strings\n   </code>\n   on the firmware update - no hits. Maybe the file is encrypted - here's the entropy analysis result:\n  </li>\n </ul>\n <pre><code>    DECIMAL       HEXADECIMAL     ENTROPY\n    --------------------------------------------------------------------------------\n    0             0x0             Rising entropy edge (0.974136)\n    36864         0x9000          Falling entropy edge (0.838064)\n</code></pre>\n <ul>\n  <li>\n   Did same on the .exe - it is not encrypted, strings are plain text\n  </li>\n </ul>\n <p>\n  My aim here is to see what is the protocol used between the .exe and the STM32; that would have been easier if I had the peripheral, but I have no way of obtaining it at the moment. Initially I thought I would be able to reverse-engineer the firmware update and flash my own device, but the (probably) custom bootloader is stopping me.\n </p>\n <p>\n  I'd like to hear suggestions on how to proceed with the analysis.\n  \n\n  Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "325",
    "tags": [
        "binary-analysis",
        "firmware"
    ],
    "user": "Slav",
    "time": "Nov 6, 2021 at 13:56",
    "comments": [
        {
            "user": "Rok Tavƒçar",
            "text": "<html><body><span class=\"comment-copy\">\n One of possible configuration is that there is separate USB to UART converter on board (that is how most of STM development boards do it) which then do normal firmware update.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Slav",
            "text": "<html><body><span class=\"comment-copy\">\n There's no converter on the board - I have a picture of the hardware where I can see that signals USB_DP and USB_DM are connected from the MCU to the USB port.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}