{
    "title": "Artifacts similar to \"@YAXPAX@\" within memory and IDA sessions",
    "link": "https://reverseengineering.stackexchange.com/questions/3174/means-of-different-call-label-formats-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When reversing binaries and parsing memory, I often run across strings like\n  <code>\n   \"@YAXPAX@\"\n  </code>\n  used to reference procedures.  Is there a name for this type of convention?\n </p>\n <p>\n  I believe theses strings are symbol references.\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 5,
    "views": "3k",
    "tags": [
        "disassembly",
        "ida"
    ],
    "user": "Ariyan",
    "time": "Jul 4, 2013 at 22:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I believe this strange stuff comes up due to\n  <a href=\"http://en.wikipedia.org/wiki/Name_mangling\">\n   Name Mangling\n  </a>\n  it is also known as\n  <em>\n   name decoration\n  </em>\n  .\n  <em>\n   Name Mangling\n  </em>\n  is mechanism used by compilers to pass semantically relevant information from compilers to linkers.\n </p>\n <p>\n  This is how Wikipedia describes\n  <a href=\"http://en.wikipedia.org/wiki/Visual_C++_name_mangling\">\n   Name Mangling for Visual C++ series of compilers\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   Visual C++ name mangling is a mangling (decoration) scheme used in Microsoft Visual C++ series of compilers. It provides a way of encoding name and additional information about a function, structure, class or another datatype in order to pass more semantic information from the Microsoft Visual C++ compiler to its linker. Visual Studio and the Windows SDK (which includes the command line compilers) come with the program undname which may be invoked to obtain the C-style function prototype encoded in a mangled name. The information below has been mostly reverse-engineered. There is no official documentation for the actual algorithm used.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "14",
            "user": "PSS",
            "time": "Jul 1, 2013 at 20:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rekav0k",
                    "text": "<span class=\"comment-copy\">Thank you.  This helps a lot.  I would vote up, but I lack the reputation.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (Slightly off-topic)\n </p>\n <p>\n  c++filt is a very useful utility for de-mangling on Unix. I am not sure it is available in Visual Studio as well, but\n  <a href=\"http://ishiboo.com/~danny/Projects/vc++filt/\" rel=\"nofollow\">\n   this\n  </a>\n  is a simple implementation you can compile. Compare output (g++, not VC):\n </p>\n <pre><code> $ nm a.out\n 0000000100001040 S _NXArgc\n 0000000100001048 S _NXArgv\n 0000000100000d40 T __ZN6complxC1Edd\n 0000000100000d10 T __ZN6complxC2Edd\n 0000000100000d70 T __ZNK6complxplERKS_\n 0000000100001058 S ___progname\n 0000000100000000 T __mh_execute_header\n 0000000100001050 S _environ\n                  U _exit\n 0000000100000e20 T _main\n 0000000100001000 s _pvars\n                  U dyld_stub_binder\n 0000000100000cd0 T start\n</code></pre>\n <p>\n  With c++filt:\n </p>\n <pre><code> $ nm a.out |c++filt\n 0000000100001040 S _NXArgc\n 0000000100001048 S _NXArgv\n 0000000100000d40 T complx::complx(double, double)\n 0000000100000d10 T complx::complx(double, double)\n 0000000100000d70 T complx::operator+(complx const&) const\n 0000000100001058 S ___progname\n 0000000100000000 T __mh_execute_header\n 0000000100001050 S _environ\n                  U _exit\n 0000000100000e20 T _main\n 0000000100001000 short _pvars\n                  U dyld_stub_binder\n 0000000100000cd0 T start\n</code></pre>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Vitaly Osipov",
            "time": "Aug 11, 2013 at 6:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Just a small tip in case you didn't know: You can demangle the names inside IDA via\n  <strong>\n   Options\n  </strong>\n  ->\n  <strong>\n   Demangled names..\n  </strong>\n  .\n </p>\n <p>\n  I believe default is demangle the name in the comments, but you can also change that to the function name itself. Takes away some clutter!\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "ixje",
            "time": "Jul 5, 2013 at 5:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  for vc++ name demangling you can use\n </p>\n <p>\n  <a href=\"http://ishiboo.com/~danny/Projects/vc++filt/\" rel=\"nofollow\">\n   vc++filt\n  </a>\n </p>\n <p>\n  it is a small wrapper over dbghelp Function UnDecorateSymbolname() that takes the mangled string and prints out demangled names back to the console see below for a snippet\n </p>\n <pre><code>??3@YAXPAX@Z\nvoid __cdecl operator delete(void *)\n?AFXSetTopLevelFrame@@YAXPAVCFrameWnd@@@Z\nvoid __cdecl AFXSetTopLevelFrame(class CFrameWnd *)\n</code></pre>\n <p>\n  snippet\n </p>\n <pre><code>int _tmain(int argc, _TCHAR* argv[])\n{\n    char buff[0x100];\n    UnDecorateSymbolName(\"??3@YAXPAX@Z\",buff,0xf0,UNDNAME_COMPLETE);\n    printf(\"%s\n\",buff);\n    return 0;\n}\n</code></pre>\n <p>\n  output\n </p>\n <pre><code>void __cdecl operator delete(void *)\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Jul 10, 2013 at 10:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">\"undname.exe\" is included with Visual Studio, no need for any extra tools.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a\n  <a href=\"http://zed.0xff.me/2013/05/06/demangle-msvc-delphi-and-c-builder-mangled-function-names-with-pure-ruby\" rel=\"nofollow\">\n   ruby gem\n  </a>\n  that unmangles C++ names. Its doesn't support GCC yet though what you have there is MSVC.\n </p>\n <p>\n  You could drop this in a ruby shoes app have a name unmangler gui pretty quickly.\n </p>\n <p>\n  Usage:\n </p>\n <pre><code>require 'unmangler'\n\nputs Unmangler.unmangle \"??3@YAXPAX@Z\"\nputs Unmangler.unmangle \"?AFXSetTopLevelFrame@@YAXPAVCFrameWnd@@@Z\"\n\n# output:\n# void __cdecl operator delete(void *)\n# void __cdecl AFXSetTopLevelFrame(class CFrameWnd *)\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "cb88",
            "time": "Jul 3, 2013 at 14:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}