{
    "title": "Determining file format of an OBB",
    "link": "https://reverseengineering.stackexchange.com/questions/19077/determining-file-format-of-an-obb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to unpack an obb file used in an android game. From my initial google searches, it's my understanding that an obb can be basically any type of file. The only lead I have is the magic bytes at the start of the file spell out \"AP_Pack!\", but I couldn't find any format matching it.\n </p>\n <p>\n  This is where I'm currently stumped so any next steps would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "file-format"
    ],
    "user": "Andrew Jones",
    "time": "Aug 16, 2018 at 3:46",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n May be related:\n <a href=\"https://reverseengineering.stackexchange.com/q/1560\">\n  reverseengineering.stackexchange.com/q/1560\n </a>\n or\n <a href=\"https://reverseengineering.stackexchange.com/q/2161\">\n  reverseengineering.stackexchange.com/q/2161\n </a>\n . // If you want this to be a general \"what to do in general to figure out a file format\" it should either be fine (like the question above) or closed as 'too broad' (like\n <a href=\"https://reverseengineering.stackexchange.com/q/11612\">\n  reverseengineering.stackexchange.com/q/11612\n </a>\n ), I'm not sure; if you ask a specific question for this particular file like\n <a href=\"https://reverseengineering.stackexchange.com/q/11126\">\n  reverseengineering.stackexchange.com/q/11126\n </a>\n , then be careful of link rot.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Decompile the app and look for references to the magic signature. Unless it is obfuscated, it should not be too difficult to recover the format details from the code.\n </p>\n <p>\n  P.S.\n  <a href=\"https://github.com/flamewing/sorcery-xtractobb/blob/master/xtractobb.cc\" rel=\"nofollow noreferrer\">\n   this project\n  </a>\n  seems to have  an unpacker referencing the magic string.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 17, 2018 at 9:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andrew Jones",
                    "text": "<span class=\"comment-copy\">Thanks! I was able to figure it out from the project you linked.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have you tried to open the file with a HEX editor - for example - 010 Editor (\n  <a href=\"https://www.sweetscape.com/010editor/\" rel=\"nofollow noreferrer\">\n   https://www.sweetscape.com/010editor/\n  </a>\n  ) ? You can then see the first bytes of the file and look them up here:\n  <a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\" rel=\"nofollow noreferrer\">\n   https://en.wikipedia.org/wiki/List_of_file_signatures\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Remko",
            "time": "Aug 16, 2018 at 7:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Andrew Jones",
                    "text": "<span class=\"comment-copy\">Sorry, I think I used some of the wrong terms. When I said the magic bytes are \"AP_Pack!\", I meant that I had opened the file in a hex and looked at the first bytes and that's what they were. I had checked a couple of list of file signatures, but I couldn't find any that matched. If it's any help the hex version of the first bytes is 41:50:5f:50:61:63:6b:21.</span>",
                    "time": null
                }
            ]
        }
    ]
}