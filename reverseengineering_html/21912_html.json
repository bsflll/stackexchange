{
    "title": "How do I find the address of a data location at runtime?",
    "link": "https://reverseengineering.stackexchange.com/questions/21912/how-do-i-find-the-address-of-a-data-location-at-runtime",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using ghidra and cheat engine to reverse engineer a game's function. In ghidra's decompiler this function references two locations known as _DAT_XXX. I know the addresses of these locations in the binary.\n </p>\n <p>\n  But how do I find the addresses of the locations when the process is running?\n </p>\n <pre><code>  if (_DAT_00dd5c44 <= DAT_00dd5c3c) {\n    return 0;\n  }\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "6k",
    "tags": [
        "debugging",
        "static-analysis",
        "dynamic-analysis",
        "ghidra"
    ],
    "user": "DohnJoe",
    "time": "Aug 17, 2019 at 4:25",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Maybe you could start by letting us know what kind of executable this is and what OS is being targeted. Since you only provide decompiler output, none of that is obvious (and the tags have no such info either). CheatEngine sounds like Windows, so may we\n <i>\n  assume\n </i>\n it's a PE file? There is a clear correlation between\n <a href=\"https://stackoverflow.com/q/2170843/476371\">\n  the RVA and the VA\n </a>\n . So it's perhaps not trivial but relatively straightforward to calculate the offset from the image base (of the loaded image) and correlate that to the RVA.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Position dependent code\n </h1>\n <p>\n  If the executable was compiled as\n  <em>\n   position dependent code\n  </em>\n  , the addresses will not change - they will remain the same in process' virtual memory each time you run it. In this case, it simply suffices to find these addresses once during the runtime and they won't change.\n </p>\n <h1>\n  Position independent code\n </h1>\n <p>\n  In this (more likely) case, the addresses will change during each execution because of\n  <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">\n   ASLR\n  </a>\n  . The thing that won't change however is their\n  <em>\n   relative offset to each other\n  </em>\n  . Since at compilation time, compiler has to take into account, that the resulting program can be loaded at different addresses it will use the relative offsets when accessing functions and data. For example, you will see something like\n  <code>\n   mov rax, [rip+0x1234]\n  </code>\n  instead of\n  <code>\n   mov rax, [0x555555655655]\n  </code>\n  . So you will need to find out the address of the data by calculating this relative offset.\n </p>\n <p>\n  To avoid the problems related to ASLR, you may simply disable it for the time you need. In Linux you can do it by:\n </p>\n <p>\n  <code>\n   echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n  </code>\n </p>\n <p>\n  and you can enable it once again by running:\n </p>\n <p>\n  <code>\n   echo 2 | sudo tee /proc/sys/kernel/randomize_va_space\n  </code>\n </p>\n <p>\n  Finally, to get the address of the data referenced like\n  <code>\n   mov, rax, [rip+0x1234]\n  </code>\n  you will have to debug your program, place a breakpoint at that line and simply read the\n  <code>\n   rip\n  </code>\n  value and add the relevant offset to it (in this case\n  <code>\n   rip+0x1234\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "DohnJoe",
                    "text": "<span class=\"comment-copy\">Would you know how to disable ASLR on Windows?</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">I haven't tried it, but I would go for the third answer in <a href=\"https://stackoverflow.com/questions/9560993/how-do-you-disable-aslr-address-space-layout-randomization-on-windows-7-x64\">question</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}