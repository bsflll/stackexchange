{
    "title": "Is not valid win32 application. Why?",
    "link": "https://reverseengineering.stackexchange.com/questions/6874/is-not-valid-win32-application-why",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Now I'm developing an unpacker and reached testing stage. Sometimes I got a message which says that unpacked file is invalid Win32 executable, however it is not informative.\n </p>\n <p>\n  I would like to ask if there is a tool which identifies reason, why Windows exe's loader \"doesn't like\" file. So I would be able to easily detect bug in unpacking scripts.\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "executable"
    ],
    "user": "ST3",
    "time": "Dec 22, 2014 at 13:58",
    "comments": [
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n Would you like to work on such a tool? I want to (using Python) and I think it would be very helpful to the community.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are many PE/header dumpers out there but as far as I know none is suitable for vetting an image; their goal is usually the extraction and display of information, not validation.\n </p>\n <p>\n  The best approach would be to write a small program or script in your favourite Swiss Army Knife language for validating the integrity of your output image, with a focus on flexibility and clarity in the section where you define your rules. In many languages there are libraries that you can call on, like\n  <a href=\"https://code.google.com/p/pefile/\" rel=\"noreferrer\">\n   pefile\n  </a>\n  in python.\n </p>\n <p>\n  There is no place on the 'net where all the rules concerning PE images are collected in a comprehensive fashion. Many rules are not enforced by current incarnations of the Windows loader, or at least not consistently, even though they are mentioned somewhere on MSDN or in the\n  <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx\" rel=\"noreferrer\">\n   PE COFF specification\n  </a>\n  . Consequently, many packers and protectors violates certain existing rules with impunity. For the moment.\n </p>\n <p>\n  By the same token, if your output image happens to run on your current incarnation of Windows there's no guarantee that it will do so on another copy of Windows with a different version, patch level or bitness. Let alone on WINE or ReactOS, whatever.\n </p>\n <p>\n  Excellent sources of information - besides Google - are the\n  <a href=\"http://www.reactos.de/\" rel=\"noreferrer\">\n   ReactOS project\n  </a>\n  and the\n  <a href=\"http://wiki.osdev.org/Main_Page\" rel=\"noreferrer\">\n   OS dev wiki\n  </a>\n  .\n </p>\n <p>\n  Two things to look out for specifically - besides correctness of the header info, the data directory and the section table - are the image checksum and file/section alignment. Also, for some tasks - like computing the checksum - you can call upon functions in Microsoft's\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms680321%28v=vs.85%29.aspx\" rel=\"noreferrer\">\n   imagehlp.dll\n  </a>\n  .\n </p>\n <p>\n  For a quick look at your PE you can always use Microsoft's dumpbin utility, which is included in Windows SDKs (at least those that ship with a compiler, i.e. those that predate the current 8.1) and many editions of Visual Studio, including the free Community Edition. I also found Daniel Pistelli's free\n  <a href=\"http://icerbero.com/peinsider/\" rel=\"noreferrer\">\n   PE Insider\n  </a>\n  quite handy, and the\n  <a href=\"http://www.ntcore.com/exsuite.php\" rel=\"noreferrer\">\n   CFF Explorer\n  </a>\n  suite is free as well.\n </p>\n <p>\n  P.S.: probably the best resource documenting the reality (as opposed to the theory) of PE structure is\n  <a href=\"https://code.google.com/p/corkami/wiki/PE\" rel=\"noreferrer\">\n   corkami's PE wiki\n  </a>\n  . It is certainly the most comprehensive PE documentation that I've ever seen... ReversingLabs have compiled a document named\n  <a href=\"https://media.blackhat.com/bh-us-11/Vuksan/BH_US_11_VuksanPericin_PECOFF_WP.pdf\" rel=\"noreferrer\">\n   Undocumented PECOFF\n  </a>\n  which gives an excellent overview over actual requirements vs. the theory. Although their focus is on the security implications, the pdf is also an excellent resource for making PEs work.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "DarthGizka",
            "time": "Dec 23, 2014 at 21:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}