{
    "title": "How is subtraction performed on unsigned numbers within the CPU?",
    "link": "https://reverseengineering.stackexchange.com/questions/22145/how-is-subtraction-performed-on-unsigned-numbers-within-the-cpu",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning about various flag states for the cmp instruction. From reading, the cmp instruction is really just a sub instruction that sets the various flags (OF, CF, ZF) accordingly depending on the result of the sub.\n </p>\n <p>\n  As I understand it, there is no pure \"subtraction (sub)\" instruction implementation in x86, rather, the second operand is negated, and then the two numbers are added; i.e. 8-4 becomes 8+(-4).\n </p>\n <p>\n  If this is true, then how is subtraction implemented for unsigned numbers? For example, if we are limited to 8 bits and want to subtract 255-254, the 2's compliment representation of 254 is well outside of the range of 8 bits.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "x86"
    ],
    "user": "MisterMister",
    "time": "Sep 17, 2019 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Signed and unsigned numbers are added / subtracted\n  <em>\n   in exactly the same way\n  </em>\n  (add / sub will set both\n  <code>\n   OF\n  </code>\n  and\n  <code>\n   CF\n  </code>\n  flag). The only difference is how you interpret the result. See\n  <a href=\"https://www.felixcloutier.com/x86/sub\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  and\n  <a href=\"https://www.cs.uaf.edu/2008/fall/cs301/lecture/10_17_signed_unsigned.html\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  .\n </p>\n <p>\n  When you subtract two\n  <code>\n   8\n  </code>\n  bit numbers, say\n  <code>\n   a - b\n  </code>\n  , it's like you were adding\n  <code>\n   256 - b = 0b11111111 - b + 1 = NOT(b) + 1\n  </code>\n  to\n  <code>\n   a\n  </code>\n  . In case of\n  <code>\n   a = 255\n  </code>\n  ,\n  <code>\n   b = 254\n  </code>\n  ,\n  <code>\n   a - b = 255 + NOT(0b11111110) + 1\n  </code>\n  .\n </p>\n <p>\n  For any\n  <code>\n   8\n  </code>\n  bit number\n  <code>\n   n\n  </code>\n  :\n  <code>\n   n + NOT(n) + 1 = 0\n  </code>\n  , so\n  <code>\n   NOT(n) + 1\n  </code>\n  is the inverse of\n  <code>\n   n\n  </code>\n  (in additive group) modulo\n  <code>\n   256\n  </code>\n  no matter if you interpret it as signed or unsigned.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "Sep 17, 2019 at 17:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MisterMister",
                    "text": "<span class=\"comment-copy\">Ok. So I guess you negate the number by simply taking the 2's compliment of it, minus the MSB sign bit (which isn't relevant for addition anyway) and then add as normal</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Yes. First, you negate the number you want to subtract by changing all 1s to 0s and vice versa and then add 1 to it. Then the addition is performed.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>a = 255\nb = 254\nc = int(bin(~b),2)\nprint (\"subtracting is equal to not (input) + 1\")\nprint (\"254 = 0b11111110  flipped 254= 0b00000001 adding one makes it 0n00000010\")\nprint (\"adding 0b11111111 to 0b00000010 will leave 0b00000001 \")\nprint (\"a =\", a , \"b =\" , b , \"not b =\", c , \"a+b =\", a+c , \"final result =\" , a+c+1 )\n</code></pre>\n <p>\n  result\n </p>\n <pre><code>:\\>python sub.py\nsubtracting is equal to not (input) + 1\n254 = 0b11111110  flipped 254= 0b00000001 adding one makes it 0n00000010\nadding 0b11111111 to 0b00000010 will leave 0b00000001\na = 255 b = 254 not b = -255 a+b = 0 final result = 1\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 17, 2019 at 19:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}