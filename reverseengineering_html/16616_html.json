{
    "title": "Emulation Project - GameGuard Protected Client",
    "link": "https://reverseengineering.stackexchange.com/questions/16616/emulation-project-gameguard-protected-client",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm not new to MMO Server Emulation, but I am new to working with a protected Client, and have very basic RCE skills. I would appreciate some direction, and maybe this won't be possible, given the requirements.\n </p>\n <p>\n  The target is Uncharted Waters Online, now published by Papaya Play, utilizing GameGuard (instead of X-Trap, as the previous publisher).\n </p>\n <p>\n  Two Priorities:\n </p>\n <ol>\n  <li>\n   Prevent the Client from loading or attempting to refer to GameGuard.\n  </li>\n  <li>\n   Understand the client-server communication through Packet Analysis. Obviously, impossible with Encrypted Packets.\n  </li>\n </ol>\n <p>\n  My Questions:\n </p>\n <ol>\n  <li>\n   <p>\n    How entrenched is GameGuard? Will simply bypassing the loading routines be enough?? Or must I allow it to load, but Bypass all the functions that it alters? Obviously, I would like the Client to not have to load GameGuard when accessing the Emulated Server.\n   </p>\n  </li>\n  <li>\n   <p>\n    Encrypted Packets. A major task will be to see the unencrypted packet contents while connected to Live Servers. Does anyone have experience with this? My thoughts are to find and detour the encryption and decryption functions, to output the raw packet information somewhere else. Is this a viable approach? Is this practical, or is there an easier way for me to understand the network communication?\n   </p>\n  </li>\n </ol>\n <p>\n  Thanks all. All I'm looking for is an approach. I can research on my own how to achieve that, but at this point, I don't know enough about GameGuard and Reversing Packet Encryption to know where to start.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "encryption"
    ],
    "user": "Lokked",
    "time": "Oct 24, 2017 at 19:32",
    "comments": [
        {
            "user": "Lokked",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks to the 2 answers and some help from another, I was able to bypass GameGuard, discover the crypt routines (Blowfish) and now I have a stream of unencrypted packets to analyze. Thank you, all! I know this is old, but I just wanted to show my appreciation.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Game hacker here.\n </p>\n <p>\n  To address your first question, forums like\n  <a href=\"https://www.elitepvpers.com/\" rel=\"nofollow noreferrer\">\n   ElitePVPers\n  </a>\n  ,\n  <a href=\"http://www.ownedcore.com/\" rel=\"nofollow noreferrer\">\n   OwnedCore\n  </a>\n  ,\n  <a href=\"https://unknowncheats.me/\" rel=\"nofollow noreferrer\">\n   UnknownCheats\n  </a>\n  ,\n  <a href=\"http://www.mpgh.net/\" rel=\"nofollow noreferrer\">\n   MPGH\n  </a>\n  , etc. are going to be your absolute best friend. The people you'll find in those places are steeped in exactly this type of reversing, so starting with a Google search like\n  <a href=\"https://www.google.com/search?q=unknowncheats%20gameguard\" rel=\"nofollow noreferrer\">\n   UnknownCheats GameGuard\n  </a>\n  will yield results like\n  <a href=\"https://www.unknowncheats.me/wiki/GameGuard\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  . That alone should give you a well-rounded summary of the technology and some of its current exploits (meaning you may not have to do very much heavy lifting on your own).\n </p>\n <p>\n  As for your second question, yes, that's a viable approach, but it can be extremely tough to find your way to decrypted data depending on how well-guarded they keep it (whether through odd Assembly instruction/sub-routine obfuscation, VMs, ridiculous looping, etc., etc.). Once again, those forums should really take you far. It sounds like you already have a good grasp on the language of reversing, so you positing questions around those places should be taken to by the more intelligent and experienced folks.\n </p>\n <p>\n  Finally, I highly recommend the book\n  <a href=\"https://www.nostarch.com/networkprotocols\" rel=\"nofollow noreferrer\">\n   Attacking Network Protocols\n  </a>\n  if that's one of the key areas that interests you with reversing.\n </p>\n <p>\n  Good luck!\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "dsasmblr",
            "time": "Oct 25, 2017 at 20:43",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't think this question will get much traction here given it's a very specific, while still being quite broad. That being said some input for general game hacking:\n </p>\n <ol>\n  <li>\n   <p>\n    Your first step would be to figure out how the anti-cheat is being loaded: is it being streamed from a secure server, is it a DLL which is loaded at runtime, etc. Once you've found out how the anti-cheat is loaded, you can implement a workaround, i.e load order hijacking, or patching the stream routine.\n   </p>\n  </li>\n  <li>\n   <p>\n    Your assumption is correct, hooking the networking functions is easiest way of altering/decoding packets. Look for a specific function calls (i.e createsocket, send, recv etc) and work backwards from there.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": null,
            "time": "Oct 25, 2017 at 13:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Lokked",
                    "text": "<span class=\"comment-copy\">Can you point me to what win32 APIs could possibly be used to either load (LoadLibrary?) or Stream (just Send/Recv?)?</span>",
                    "time": null
                },
                {
                    "user": "user15338",
                    "text": "<span class=\"comment-copy\">This is where the actual reversing comes in as the game could use any number of library functions to achieve these tasks. Although it is common for games to use third party networking libraries rather than roll their own (compress/encryption is complicated). Check the games import table, and function calls for clues. Two common networking libraries are Raknet, and Oodle Network, although it could be any number of other libraries - as a general rule of thumb, if you don't know what a DLL or function does, google it.</span>",
                    "time": null
                }
            ]
        }
    ]
}