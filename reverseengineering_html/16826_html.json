{
    "title": "What are some ways in which virtual machines make native static and dynamic reversing of a binary more difficult?",
    "link": "https://reverseengineering.stackexchange.com/questions/16826/what-are-some-ways-in-which-virtual-machines-make-native-static-and-dynamic-reve",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is practically common knowledge in reverse engineering that trying to use a native debugger or disassembler on a \"VM protected\" or virtualized program is much more difficult to analyze. However, I would like to know specific, concrete ways in which this is the case and why. Please list some reasons along with any relevant work on whether the various reasons have been overcome manually (not using a script).\n </p>\n <p>\n  In case this question is perceived as being too general, let us focus on a specific example. The example is we are trying to use a native debugger (such as x64Dbg) to locate a call to the Windows API CreateFile and find out the location of a file write. In an unprotected program, we could open it up, place a breakpoint on CreateFile and locate the call after examining cross-referenced calls.\n </p>\n <p>\n  How would this process successfully be obstructed by Themida Protector? Obviously, at the end of the day, the program must still write the file, but what steps severely hamper analysis?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "421",
    "tags": [
        "unpacking",
        "virtual-machines"
    ],
    "user": "the_endian",
    "time": "Nov 23, 2017 at 11:38",
    "comments": [
        {
            "user": "EWD-0-",
            "text": "<html><body><span class=\"comment-copy\">\n It's not just about using a debugger/disassembler being more difficult it's the whole analysis processes. The question is not focused.  As I see the subject it's too much to say about this. Specifically about the last part. If you have an example please add it to the question to make it easier to answer.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n @EWD-0- you mean a specific file to be examined or a specific type of vm?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<html><body><span class=\"comment-copy\">\n See added example\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://static.usenix.org/event/woot09/tech/full_papers/rolles.pdf\" rel=\"nofollow noreferrer\">\n  static.usenix.org/event/woot09/tech/full_papers/rolles.pdf\n </a>\n ,\n <a href=\"http://ieeexplore.ieee.org/document/5207639/\" rel=\"nofollow noreferrer\">\n  ieeexplore.ieee.org/document/5207639\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://www.msreverseengineering.com/blog/2018/1/23/a-walk-through-tutorial-with-code-on-statically-unpacking-the-finspy-vm-part-one-x86-deobfuscation\" rel=\"nofollow noreferrer\">\n  msreverseengineering.com/blog/2018/1/23/â€¦\n </a>\n ,\n <a href=\"https://www.welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf\" rel=\"nofollow noreferrer\">\n  welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It depends on your goal. If all you care about is side-effects (as in API calls, written files, network stuff and so on), they don't really make life difficult. As you said, in the end the API has to be used and you will be able to catch it.\n </p>\n <p>\n  The purpose of virtualization is preventing people from understanding internal processes of the target. As such, often times people virtualize only specific code blocks to lessen the overall negative performance impact and just protect for example code that reads a license file, code that does cryptography and so on.\n </p>\n <p>\n  This makes it very tedious to extract algorithms from the target. If your question is what happens inside, VM protections are the worst. If you just care about what the target\n  <em>\n   does\n  </em>\n  , well, they do nothing.\n </p>\n <p>\n  Basically, their goal is turning an executable into a black box, not shroud their doings.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Mar 30, 2018 at 9:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So as I understood the question has two main parts.\nFirst why it is hard to reverse/analyze a virtualized code. Standard assembly instructions have particular byte code which by that you can understand what is happening in the program. By using virtualization one can create arbitrary byte codes which then is translated to the original code that system can understand. This means by viewing the code you can't understand what goes on.\n </p>\n <p>\n  This goes further when we encounter virtualization machines which produce the original code part by part at run time not all the code at once. So as an analyst you see small parts of the real assembly at run time.\n </p>\n <p>\n  The second part about CreateFile/WriteFile. If by this example you mean analyzing behavior of a program, there is no difference between virtualized or normal executable most of the time. In both cases you can put BP on CreateFile/WriteFile in the debugger or a better way just do black box monitoring.\n </p>\n <p>\n  It's worth mentioning that the other problem we face reversing virtualized code is that they mostly benefit from heavy protectors/anti debugging techniques too.\n </p>\n <p>\n  <a href=\"http://resources.infosecinstitute.com/reverse-engineering-virtual-machine-protected-binaries/#gref\" rel=\"nofollow noreferrer\">\n   http://resources.infosecinstitute.com/reverse-engineering-virtual-machine-protected-binaries/#gref\n  </a>\n </p>\n <p>\n  <a href=\"http://resources.infosecinstitute.com/tutorial-building-reverse-engineering-simple-virtual-machine-protection/#gref\" rel=\"nofollow noreferrer\">\n   http://resources.infosecinstitute.com/tutorial-building-reverse-engineering-simple-virtual-machine-protection/#gref\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "EWD-0-",
            "time": "Nov 27, 2017 at 12:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}