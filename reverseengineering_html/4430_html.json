{
    "title": "How to find the version number of Android Ad libraries from reverse engineered apps?",
    "link": "https://reverseengineering.stackexchange.com/questions/4430/how-to-find-the-version-number-of-android-ad-libraries-from-reverse-engineered-a",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am analysing Android ad libraries. I have downloaded apps from Google play and used\n  <a href=\"http://code.google.com/p/dex2jar/\" rel=\"nofollow\">\n   dex2jar\n  </a>\n  and\n  <a href=\"http://jd.benow.ca/\" rel=\"nofollow\">\n   JDGUI\n  </a>\n  to recover the Java code of the app. As expected a lot of apps use ad libraries (such ad Google Ads, Inmobi, Millenalmedia etc.). As one would expect, ad libraries come in different versions (for eg. the latest version of inmobi is\n  <a href=\"http://www.inmobi.com/products/sdk/\" rel=\"nofollow\">\n   4.3\n  </a>\n  ). Some apps that I downloaded use Inmobi 4.3 but a larger no. of apps use older versions of Inmobi (staring from version 3.6).\n </p>\n <p>\n  Hence, I wish to\n  <strong>\n   find the version of the ad library\n  </strong>\n  contained in apps. One novice approach is to search for the string \"version\" inside the app. Is there any better way of doing it? Will the ad libraries typically mention/register their version with Android framework through some code snippet? If so, I could search for that.\n </p>\n <p>\n  Please suggest some professional/appropriate way of doing it.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "196",
    "tags": [
        "android",
        "java",
        "libraries",
        "software-security"
    ],
    "user": "Annamalai N",
    "time": "Jul 21, 2014 at 15:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is no perfect answer for this, it will greatly depend on your tolerance to false positives. Though there are three answers that come to mind depending on you level of effort you're willing to put in. The options are listed from easiest/least work to hardest/most work - if each one is done correctly - the risk of FP also should go down as well.\n </p>\n <ol>\n  <li>\n   The novice approach you mention, looking for versioning strings, is not a bad way. Though you are relying on the developer of the SDK to properly increment this value and trusting that they are correct. It is possible that this value changes or does not change when the Ad SDK itself changes. I've personally seen some that only change these types of values when API styling has changed.\n  </li>\n  <li>\n   A \"simplistic\" approach you could take is to model the ad SDK's you want to profile. Grab the SDK, run it through\n   <em>\n    dx\n   </em>\n   to get the Davlik code and then\n   <em>\n    baksmali\n   </em>\n   this. When performing a comparison against an application with this ad network code, you could in theory - compare it to each iteration of the SDK that you have collected. Assuming the SDK was not changed in any ways (ProGuard/DexGuard/etc may have changed something) - this could show you which iteration of the SDK it is most like. This would be a bit more trustable than simply looking for strings, though it would be more work to catalog the SDK's and building a script to do the comparisons automatically.\n  </li>\n  <li>\n   Using an off-the-shelf difference finder, such as\n   <a href=\"https://code.google.com/p/androguard/source/browse/androdiff.py\" rel=\"nofollow\">\n    AndroDiff\n   </a>\n   . This might be a bit heavy for what you are attempting to do, though all the code is there to both create signatures and find the differences between Android APKs. While this was mainly developer for malware/rip-off applications, you could modify it to compare the Ad SDK's you have previously extracted and run new applications against these.\n  </li>\n </ol>\n <p>\n  Depending on what the exact output you want is, you might choose a different answer. Though the first step would definitely to be start cataloging the SDKs you want and find the actual different between them.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "diff",
            "time": "Jul 21, 2014 at 4:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have you tried JEB's library signatures?\n </p>\n <p>\n  <a href=\"https://www.pnfsoftware.com/blog/jeb-1-3-how-to-sign-and-match-third-party-library-code/\" rel=\"nofollow noreferrer\">\n   https://www.pnfsoftware.com/blog/jeb-1-3-how-to-sign-and-match-third-party-library-code/\n  </a>\n </p>\n <p>\n  This was implemented in the earliest versions of that decompiler platform and I think will only get better over time\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Nederealm",
            "time": "Feb 12, 2019 at 17:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}