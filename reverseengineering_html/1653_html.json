{
    "title": "What are the differences between BitBlaze and BAP?",
    "link": "https://reverseengineering.stackexchange.com/questions/1653/what-are-the-differences-between-bitblaze-and-bap",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"http://bitblaze.cs.berkeley.edu/\">\n   BitBlaze\n  </a>\n  and\n  <a href=\"http://bap.ece.cmu.edu/\">\n   BAP\n  </a>\n  are two platforms to perform binary analysis. And, if I understand well, they are sharing lots of common features. What are their respective main features and in what do they differ from each other ?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "2k",
    "tags": [
        "tools",
        "static-analysis",
        "dynamic-analysis",
        "binary-analysis"
    ],
    "user": "perror",
    "time": "Apr 8, 2013 at 12:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  BAP is mostly a rewrite of BitBlaze, so feature-wise there are many common features.  However, many of these have been re-written or re-designed for BAP.\n </p>\n <p>\n  <strong>\n   Common features:\n  </strong>\n </p>\n <ul>\n  <li>\n   Lifting of usermode, x86 instructions\n  </li>\n  <li>\n   Datafow analysis module\n  </li>\n  <li>\n   Dominator analysis\n  </li>\n  <li>\n   CFG and SSA representations\n  </li>\n  <li>\n   Optimization framework\n  </li>\n  <li>\n   Verification condition generation\n  </li>\n  <li>\n   Dependency graphs\n  </li>\n  <li>\n   Slicing\n  </li>\n </ul>\n <p>\n  I am a BAP developer, so I can mainly attest to what is new in BAP since we split.  However, I don't think BitBlaze has (publicly) added new features since then.\n </p>\n <p>\n  <strong>\n   New in BAP\n  </strong>\n  :\n </p>\n <ul>\n  <li>\n   Formally defined semantics for the IL\n  </li>\n  <li>\n   PIN-based user-level taint tracking and tracing tool\n  </li>\n  <li>\n   Integration with LLVM\n  </li>\n  <li>\n   Native instruction lifting (i.e., in OCaml)\n  </li>\n </ul>\n <p>\n  <strong>\n   Only in BitBlaze:\n  </strong>\n </p>\n <ul>\n  <li>\n   TEMU system-level taint tracking and tracing tool\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "11",
            "user": "Ed McMan",
            "time": "Apr 8, 2013 at 20:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Denis Laskov",
                    "text": "<span class=\"comment-copy\">thx for technical details, Ed. +1 :)</span>",
                    "time": null
                }
            ]
        }
    ]
}