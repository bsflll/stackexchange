{
    "title": "What is replay debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/2500/what-is-replay-debugging",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've read some info\n  <a href=\"http://www.replaydebugging.com/\" rel=\"noreferrer\">\n   here\n  </a>\n  but looks like the site concerned itself only with vmware and moreover it has abandoned the idea. How can this concept be used with existing debugging environments like IDA and gdb.If it has already been implemented, I would like links about the same.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "debugging"
    ],
    "user": "viv",
    "time": "Jul 18, 2013 at 10:16",
    "comments": [
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n The link you have provided clearly explains what replay debugging is. Please clarify your question?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "viv",
            "text": "<html><body><span class=\"comment-copy\">\n I want to know how it can be used as an aid in debugging. For example can it be integrated in existing debugging environment and to what benefit? If it was such popular idea then why the site dropped it ?can we ,for example make replay files and then share it with fellow analysts?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "viv",
            "text": "<html><body><span class=\"comment-copy\">\n The site provided a lot of info. The reason I asked it here was to create new knowledge. Moreover, the product is merely for vmware. What about integration with gdb and ida and how.Information from a single source cannot help me progress further.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n Great questions! You should edit your original question to include all that. Otherwise, it sounds to broad. Plus, you answered the original question with your link.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n GDB includes\n <a href=\"http://sourceware.org/gdb/current/onlinedocs/gdb/Process-Record-and-Replay.html\" rel=\"nofollow noreferrer\">\n  a form of this\n </a>\n since version 7 and allows also \"reverse debugging\". VMware on the other hand has abandoned it (despite complaints) with the move from version 7.x to 8.x. I'm not aware that IDA has such capabilities built-in. Perhaps with the GDB stub it could work?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Please excuse the shameless plug, but do check out UndoDB -\n  <a href=\"http://undo-software.com/\" rel=\"nofollow\">\n   http://undo-software.com/\n  </a>\n </p>\n <p>\n  It's functionally pretty similar to gdb 7's reversible debugging, but with radically improved performance. Recording slow-down is typically in the 2x-5x range, with memory usage typically around 10MB per second of recording.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user1839284",
            "time": "Jul 20, 2013 at 10:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Mozilla rr\n  </strong>\n </p>\n <p>\n  In addition to the closed source Undo mentioned at\n  <a href=\"https://reverseengineering.stackexchange.com/a/2503/12321\">\n   https://reverseengineering.stackexchange.com/a/2503/12321\n  </a>\n  , we now also have an amazing open source working implementation:\n  <a href=\"https://github.com/mozilla/rr\" rel=\"nofollow noreferrer\">\n   https://github.com/mozilla/rr\n  </a>\n </p>\n <p>\n  I have given a minimal runnable example of it at:\n  <a href=\"https://stackoverflow.com/questions/1206872/how-to-go-to-the-previous-line-in-gdb/46996380#46996380\">\n   https://stackoverflow.com/questions/1206872/how-to-go-to-the-previous-line-in-gdb/46996380#46996380\n  </a>\n </p>\n <p>\n  As seen in that example, you first record, and then replay, and the replay makes every non-deterministic event (e.g. thread switch timings, random number generation) deterministic to match the previous run.\n </p>\n <p>\n  One huge advantage of that is that it allows you to step back in time, which is extremely often what you want to do when debugging applications, to go from crash back to the real cause that happened in the past.\n </p>\n <p>\n  <strong>\n   QEMU reverse debugging\n  </strong>\n </p>\n <p>\n  Besides the userland reverse debugging which uses hardware and Linux kernel features, simulators can also implement a reverse debugging of course since they control everything.\n </p>\n <p>\n  In particular, QEMU has had a reverse debugging mode which allows for this: It is not necessarily \"replay based\", but it achieves the same thing: you can step back in time. The cool thing about doing it in an emulator, is that you can also reverse\n  <a href=\"https://stackoverflow.com/a/44226360/895245\">\n   step debug the Linux kernel itself\n  </a>\n  if you are developing it on QEMU.\n </p>\n <p>\n  See also:\n  <a href=\"https://stackoverflow.com/questions/29153178/is-it-possible-to-do-reverse-debugging-with-qemu/46499855#46499855\">\n   https://stackoverflow.com/questions/29153178/is-it-possible-to-do-reverse-debugging-with-qemu/46499855#46499855\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ciro Santilli OurBigBook.com",
            "time": "Apr 10, 2020 at 8:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}