{
    "title": "Confusion between different ARM architectures",
    "link": "https://reverseengineering.stackexchange.com/questions/25611/confusion-between-different-arm-architectures",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to develop a machine learning model to help with the process of reverse engineering. As the first stage, we are currently trying to train an embedding model that understand the dependencies and relationships between the insrtuctions. As usual, embedding model does need huge amount of data to be smart.\n </p>\n <p>\n  Our work is more focused upon microcontroller based systems and the architectures of ARMv7-m and ARMv6-m are the most important for our work. However, as finding binaries related to these architectures that could be useful for training the embedding model, I was thinking to use ARMv7 from a debian packages so that I could use already compiled binaries and train the embedding model.\n </p>\n <p>\n  However, these binaries are compiled with ARMv7-a architecture and as I know ARMv7-a does not include the thumb instruction set (correct me if I am wrong). Could somebody explained me whether ARMv7-a does include thumb instructions in its ISA? Will training on ARMv7-a would help to understand relationships between ARMv7-m and ARMv6-m instructions? Is it going to be an issue if I use ARMv7-a as my goal is to work with the ARMv7-m systems?\n </p>\n <p>\n  I really had trouble understanding these and any help or thoughts are much appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "147",
    "tags": [
        "disassembly",
        "binary-analysis",
        "arm"
    ],
    "user": "hEShaN",
    "time": "Aug 5, 2020 at 21:31",
    "comments": [
        {
            "user": "Rok Tavčar",
            "text": "<html><body><span class=\"comment-copy\">\n Why dont you use provided example code from various MCU makers or compile them yourself so you have more variety with different IDEs and settings?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While ARMv7-A does include the Thumb-2 subset used in ARMv7-M, the actually used instructions in ARMv7-A binaries will likely be pretty different from those used in ARMv7-M microcontrollers.\n </p>\n <p>\n  For one example, microcontrollers rarely use NEON floating-point or vector instructions from ARMv7-A (Cortex-M4F has FPU but IIRC it’s single precision only). Conversely, there are some instructions which are only used in Cortex-M but not Cortex-A (e.g. instructions accessing some system registers) and of course the A variants support the “classic” ARM instructions not supported at all by the M subset. ARMv6-M is even more different since it mostly uses the 16-bit (Thumb-1) subset and not the more powerful Thumb-2.\n </p>\n <p>\n  One more difference: Debian packages mostly contain user-mode code running in an OS environment but microcontrollers usually run monolithic firmware running on “bare metal”, implementing either a simple state machine or some kind of RTOS with the  OS functionality, interrupt handlers and the “user payload” tasks all combined in the same binary.\n </p>\n <p>\n  Summary: while there\n  <em>\n   may\n  </em>\n  be some intersection between ARMv7-A and ARMv7-M, they’re used in quite different environments and training on armv7 Debian packages is unlikely to give good results on ARMv7-M firmware.\n </p>\n <p>\n  P.S. the compilers are usually different as well. Linux software is usually compiled with GCC (sometimes Clang) but the consumer devices firmware is often compiled with commercial compilers such as ARM’s own Keil, IAR, or GHS (Green Hills Software).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 6, 2020 at 18:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}