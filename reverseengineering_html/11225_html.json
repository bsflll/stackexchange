{
    "title": "using GDB and dealing with breakpoint detection",
    "link": "https://reverseengineering.stackexchange.com/questions/11225/using-gdb-and-dealing-with-breakpoint-detection",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to solve a reverse engineering challenge using using\n  <code>\n   gdb\n  </code>\n  . I can run the program inside it but when I set a breakpoint at\n  <code>\n   main\n  </code>\n  then I get\n </p>\n <pre><code>Program received signal SIGSEGV, Segmentation fault.\n</code></pre>\n <p>\n  Setting it at something even earlier like\n  <code>\n   _init\n  </code>\n  (there are two BTW) also was not very fruitful, could it be that the program might be corrupting itself at some point that I didn't catch? Have a look at the\n  <code>\n   backtrace\n  </code>\n  for that matter:\n </p>\n <pre><code>#0  0x47048474 in ?? ()\n#1  0x0804864a in __handle_global_ctors ()\n#2  0x080488c5 in __do_global_ctors_aux ()\n#3  0x08048349 in _init ()\n</code></pre>\n <p>\n  Now I tried to statically decompile it using a simple recursive traversal disassembler (not IDA) but I couldn't find any traces of\n  <code>\n   CC\n  </code>\n  (INT 3) so I guess another layer of obfuscation has been added.\n </p>\n <p>\n  I also tried\n  <code>\n   record\n  </code>\n  with no success:\n </p>\n <pre><code>Breakpoint 5, 0x0804833a in _init ()\n(gdb) record\n(gdb) c\nContinuing.\n(null)Process record: failed to record execution log.\n</code></pre>\n <p>\n  Oh and I couldn't find the hex string \"47048474\" either.\n </p>\n <p>\n  <strong>\n   Any more ideas what can help in such a situation? Maybe detecting the self-modification?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "linux",
        "gdb",
        "anti-debugging"
    ],
    "user": "phk",
    "time": "Nov 1, 2015 at 21:16",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try to use hardware breakpoints (hbreak gdb command) ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phk",
            "text": "<html><body><span class=\"comment-copy\">\n Good idea! But sadly it says: \"No hardware breakpoint support in the target.\" :/ (x86 executable on x86_64, file says\n <code>\n  ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.4.1, not stripped\n </code>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phk",
            "text": "<html><body><span class=\"comment-copy\">\n Oops, as mentioned at\n <a href=\"http://reverseengineering.stackexchange.com/questions/11225/using-gdb-and-dealing-with-breakpoint-detection\" title=\"using gdb and dealing with breakpoint detection\">\n  reverseengineering.stackexchange.com/questions/11225/â€¦\n </a>\n the prog simply has to be started first for\n <code>\n  hbreak\n </code>\n to work. Finally I can continue.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "savram",
            "text": "<html><body><span class=\"comment-copy\">\n What challenge is it? Can you link it?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, just to clarify what is already present in the comments:\n </p>\n <p>\n  <code>\n   gdb\n  </code>\n  's\n  <code>\n   break\n  </code>\n  will place an ordinary breakpoint, which works by taking the in-memory image of the process and swapping its original instruction for a specific interrupt instruction. If I understand correctly,\n  <code>\n   hbreak\n  </code>\n  tells the OS to monitor every instruction an compare the address of current instruction to the address of breakpoint (i.e. no modification of the in-memory image). However, the number of hardware breakpoints available at a time is limited.\n </p>\n <p>\n  To place a hardware breakpoint with\n  <code>\n   hbreak\n  </code>\n  , your program must be already running with\n  <code>\n   gdb\n  </code>\n  's\n  <code>\n   run\n  </code>\n  . To achieve that, you should place an ordinary breakpoint somewhere at the very beginning (let's say,\n  <code>\n   _start\n  </code>\n  function), successfully break there, place a hardware breakpoint and then remove the original ordinary breakpoint.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "alisianoi",
            "time": "Oct 30, 2017 at 9:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "phk",
                    "text": "<span class=\"comment-copy\">Is the OS really the one doing the monitoring? I thought this is where the hardware assistance comes into play.</span>",
                    "time": null
                }
            ]
        }
    ]
}