{
    "title": "What is an easy way to update the addresses of hooked functions in an exe",
    "link": "https://reverseengineering.stackexchange.com/questions/12720/what-is-an-easy-way-to-update-the-addresses-of-hooked-functions-in-an-exe",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have hooked into some functions in an exe. I was wondering if there were any simple ways to detect the memory addresses of these functions after the exe has a new build (not my exe). Is the best way to just scan the exe for the bytes of the function and compare to the previous result? Can this be achieved fast enough to add it to my injection code?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "122",
    "tags": [
        "c++",
        "dll-injection",
        "function-hooking"
    ],
    "user": "pokerguy",
    "time": "May 23, 2016 at 3:12",
    "comments": [
        {
            "user": "tmr232",
            "text": "<html><body><span class=\"comment-copy\">\n Just to be clear - you are trying to automatically find the addresses of functions in a new exe, based on the addresses in the old one, right?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "pokerguy",
            "text": "<html><body><span class=\"comment-copy\">\n Yeah, I need the new address of the function.  I tried scanning memory and comparing bytes, but that didn't work out so well. Do you have any suggestions?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It really depends on the functions you're hooking. If they're not likely to be changed, then scanning for the bytes would be the naive solution. It should be relatively fast and work perfectly fine.\n </p>\n <p>\n  If it's likely that the functions will have changed (patches, removal, different compiler/build env, etc) then you could try to find a bytestring 'signature' for those functions. Ideally that signature would be unique (only in that function), but also as small as possible (to reduce the likelihood that those bytes were patched in the new binary). This is going to be fairly hack-y.\n </p>\n <p>\n  Just a note: if it was a DLL, you could walk the PE export table fairly trivially to find the new offsets.\n </p>\n <p>\n  There's also Bindiff, which is now free:\n  <a href=\"https://security.googleblog.com/2016/03/bindiff-now-available-for-free.html\" rel=\"nofollow\">\n   https://security.googleblog.com/2016/03/bindiff-now-available-for-free.html\n  </a>\n </p>\n <p>\n  Bindiff is an IDA plugin that would probably solve your problem as well.\n </p>\n <p>\n  I would say try scanning for the bytes, and see how many you're successful in locating. The easy solution is the best solution! :)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Tom Cornelius",
            "time": "May 23, 2016 at 5:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}