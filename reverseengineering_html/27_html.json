{
    "title": "Reverse engineering a Solaris driver",
    "link": "https://reverseengineering.stackexchange.com/questions/27/reverse-engineering-a-solaris-driver",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have several Solaris 2.6 era drivers I would like to reverse engineer.\n </p>\n <p>\n  I have a Sparc disassembler which provides some info but it isn't maintained anymore so I think it may not give me all the information possible.\n </p>\n <p>\n  The drivers are for an Sbus graphics accelerator I own. Namely the\n  <a href=\"http://www.hyperstation.de/SBus-Framebuffer/SUN_Leo_ZX/sun_leo_zx.html\" rel=\"noreferrer\">\n   ZX aka Leo\n  </a>\n  one of the early 3d accelerators.\n </p>\n <p>\n  So what are some ways I can go about reverse engineering this driver? I can disassemble it but I am not sure what to make of the output. I also have Solaris of course so perhaps there are things I can do there as well.\n </p>\n <p>\n  The final goal is to have enough information to design a driver for an Operating System. There are drivers for NetBSD, although incomplete as the hardware documentation that does exist (isn't free to access) does not have the Window ID encoding as it is missing. Also, since the hardware uses an Sbus interface on a double wide\n  <a href=\"http://en.wikipedia.org/wiki/PCI_Mezzanine_Card\" rel=\"noreferrer\">\n   mezzanine card\n  </a>\n  , it would be impractical to use it on anything but a SparcStation or early UltraSparc machine.\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 1,
    "views": "582",
    "tags": [
        "sparc",
        "solaris",
        "driver",
        "sbus"
    ],
    "user": "cb88",
    "time": "May 15, 2013 at 2:05",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n You probably should add what is your final goal. Do you want to use the card in another machine? Make a driver for another OS on the same box? Just curiosity?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "cb88",
            "text": "<html><body><span class=\"comment-copy\">\n @Igor Skochinsky Good suggestion I have taken you up on it! And yes just for curiosity and fun.. Vintage SparcStations are my hobby you might say.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n If you have drivers for NetBSD I'd recommend looking at them and trying to find matches with what the Solaris driver does. This should speed up the process.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "cb88",
            "text": "<html><body><span class=\"comment-copy\">\n Indeed however as I said...the NetBsd driver for the ZX is incomplete and it certainly doesn't cover the opengl 1.1 capability that the device has so I'll almost definitly have to get a copy of IDA or have a friend dump the assembly for me. I also have a TGS opengl driver for it that would be intersting I am sure however it requires a flexlm license which sadly I do not have.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n I also found some kind of a\n <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/drivers/video/leo.c\" rel=\"nofollow noreferrer\">\n  Linux driver\n </a>\n that might be useful.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, since it's a Solaris driver, first you need to find up some docs on how Solaris drivers communicate with the kernel (or kernel with them). A quick search turned up\n  <a href=\"http://docs.oracle.com/cd/E19455-01/806-0638/6j9vrvct2/index.html\" rel=\"nofollow\">\n   this\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   <code>\n    _init()\n   </code>\n   initializes a loadable module. It is called before any other routine in a loadable module.\n   <code>\n    _init()\n   </code>\n   returns the value returned by\n   <code>\n    mod_install(9F)\n   </code>\n   . The module may optionally perform some other work\n  before the\n   <code>\n    mod_install(9F)\n   </code>\n   call is performed. If the module has done\n  some setup before the\n   <code>\n    mod_install(9F)\n   </code>\n   function is called, then it\n  should be prepared to undo that setup if\n   <code>\n    mod_install(9F)\n   </code>\n   returns an\n  error.\n  </p>\n  <p>\n   <code>\n    _info()\n   </code>\n   returns information about a loadable module.\n   <code>\n    _info()\n   </code>\n   returns the value returned by\n   <code>\n    mod_info(9F)\n   </code>\n   .\n  </p>\n  <p>\n   <code>\n    _fini()\n   </code>\n   prepares a loadable module for unloading. It is called when the system wants to unload a module. If the module determines that it\n  can be unloaded, then\n   <code>\n    _fini()\n   </code>\n   returns the value returned by\n   <code>\n    mod_remove(9F)\n   </code>\n   . Upon successful return from\n   <code>\n    _fini()\n   </code>\n   no other routine\n  in the module will be called before\n   <code>\n    _init()\n   </code>\n   is called.\n  </p>\n </blockquote>\n <p>\n  There's a nice code sample below.\n </p>\n <p>\n  <a href=\"http://docs.oracle.com/cd/E18752_01/html/816-4855/config12-9.html\" rel=\"nofollow\">\n   This guide\n  </a>\n  also seems relevant.\n </p>\n <p>\n  Once you found the entry points, it's just a matter of following the calls and pointers.\n </p>\n <p>\n  Here's how it looks in IDA:\n </p>\n <pre><code>.text:00000000 _init:                                  ! DATA XREF: leo_attach+5A8o\n.text:00000000                                         ! leo_attach+5BCo ...\n.text:00000000                 save    %sp, -0x60, %sp\n.text:00000004                 sethi   %hi(leo_debug), %i2\n.text:00000008                 ld      [leo_debug], %o0\n.text:0000000C                 cmp     %o0, 4\n.text:00000010                 bl      loc_38\n.text:00000014                 sethi   %hi(leo_state), %o0\n.text:00000018                 set     aLeoCompiledSS, %o0 ! \"leo: compiled %s, %s\n\"\n.text:00000020                 set     a141746, %o1    ! \"14:17:46\"\n.text:00000028                 sethi   %hi(aLeo_c6_6Jun251), %l0 ! \"leo.c 6.6 Jun 25 1997 14:17:46\"\n.text:0000002C                 call    leo_printf\n.text:00000030                 set     aJun251997, %o2 ! \"Jun 25 1997\"\n.text:00000034                 sethi   %hi(leo_state), %o0\n.text:00000038\n.text:00000038 loc_38:                                 ! CODE XREF: _init+10j\n.text:00000038                 set     leo_state, %i1\n.text:0000003C                 sethi   %hi(0x1800), %l0\n.text:00000040                 mov     %i1, %o0\n.text:00000044                 set     0x1980, %o1\n.text:00000048                 call    ddi_soft_state_init\n.text:0000004C                 mov     1, %o2\n.text:00000050                 orcc    %g0, %o0, %i0\n.text:00000054                 bne,a   loc_80\n.text:00000058                 ld      [%i2+(leo_debug & 0x3FF)], %o0\n.text:0000005C                 sethi   %hi(0x14C00), %l0\n.text:00000060                 call    mod_install\n.text:00000064                 set     modlinkage, %o0\n.text:00000068                 orcc    %g0, %o0, %i0\n.text:0000006C                 be,a    loc_80\n.text:00000070                 ld      [%i2+(leo_debug & 0x3FF)], %o0\n.text:00000074                 call    ddi_soft_state_fini\n.text:00000078                 mov     %i1, %o0\n.text:0000007C                 ld      [%i2+(leo_debug & 0x3FF)], %o0\n.text:00000080\n.text:00000080 loc_80:                                 ! CODE XREF: _init+54j\n.text:00000080                                         ! _init+6Cj\n.text:00000080                 cmp     %o0, 4\n.text:00000084                 bl      locret_9C\n.text:00000088                 nop\n.text:0000008C                 set     aLeo_initDoneRe, %o0 ! \"leo: _init done, return(%d)\n\"\n.text:00000094                 call    leo_printf\n.text:00000098                 mov     %i0, %o1\n.text:0000009C\n.text:0000009C locret_9C:                              ! CODE XREF: _init+84j\n.text:0000009C                 ret\n.text:000000A0                 restore\n.text:000000A0 ! End of function _init\n</code></pre>\n <p>\n  At 0x60 you can see\n  <code>\n   mod_install\n  </code>\n  being called with a pointer to\n  <code>\n   modlinkage\n  </code>\n  , so you can follow there and see what the fields are pointing to.\n </p>\n <p>\n  But you don't even have to do that all the time. In this case, the programmers very thoughtfully left intact all the symbols and debug output. This should help you in your work :)\n </p>\n <p>\n  Depending on situation, you may skip straight to the helpfully-named functions like\n  <code>\n   leo_blit_sync_start\n  </code>\n  or\n  <code>\n   leo_init_ramdac\n  </code>\n  . I personally prefer the first way, top-down, but to each his own.\n </p>\n <p>\n  <strong>\n   EDIT\n  </strong>\n  : one rather simple thing you can do is to patch the\n  <code>\n   leo_debug\n  </code>\n  variable at the start of\n  <code>\n   .data\n  </code>\n  section to 5 or so. That should produce a lot of debug output about the operations the driver is performing.\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "Igor Skochinsky",
            "time": "Mar 20, 2013 at 15:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">Clearly IDA pro speaks for itself :) ... that said I can't afford a license for now. It is a bit off topic but per architecture licensing might be interesting for people like myself.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@cb88: I reckon it'd still be more expensive than you will like. IDA is unique. The price is fair, but not to everyone. They have student licenses, however. But I think you need someone to know you and vouch for you (if they still do that). In the past too many leaks have caused financial damage to DataRescue and later Hex-Rays.</span>",
                    "time": null
                },
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">0xC0000022L $75 would be 3x what they charge per arch in the full software and if you could later upgrade it to the full version for the full price - the single arch price that would be quite fair but I suppose it is too much to ask. I don't doubt its worth every pennny I just don't need a battleship for my paddle boat ride of a job :D</span>",
                    "time": null
                }
            ]
        }
    ]
}