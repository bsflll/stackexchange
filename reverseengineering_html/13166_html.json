{
    "title": "Why 0xc(%ebp) becomes dword [ebp+arg_3]?",
    "link": "https://reverseengineering.stackexchange.com/questions/13166/why-0xcebp-becomes-dword-ebparg-3",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing an x86 binary and I have an instruction that using the at&t syntax is\n </p>\n <pre><code>movl 0xc(%ebp), %eax\n</code></pre>\n <p>\n  while using the intel syntax is\n </p>\n <pre><code>mov eax, dword [ebp+arg_3]\n</code></pre>\n <p>\n  I'm using radare2, and at the start of the function it prints\n </p>\n <pre><code>; arg int arg_0_1      @ ebp+0x1\n; arg int arg_3        @ ebp+0xc\n</code></pre>\n <p>\n  Why\n  <code>\n   [ebp+arg_3]\n  </code>\n  instead of a simple substitution like\n  <code>\n   [arg_3]\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "482",
    "tags": [
        "radare2"
    ],
    "user": "Giuseppe Crinò",
    "time": "Jul 29, 2016 at 15:39",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n your question has a typo - the '-' should be '+'.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The reference to\n  <code>\n   ebp\n  </code>\n  makes explicit which register is being used to access the variable, and also the fact that the reference is relative, not absolute.  A compiler might have produced an instruction using\n  <code>\n   esp\n  </code>\n  instead, if no stack frame exists, or any other register if the code were written by hand.\n </p>\n <p>\n  Further, to show only\n  <code>\n   [arg_3]\n  </code>\n  implies that the access is equivalent to another memory location such as\n  <code>\n   [401000h]\n  </code>\n  , but with a name instead of a number.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "jvoisin",
            "time": "Oct 23, 2016 at 21:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Giuseppe Crinò",
                    "text": "<span class=\"comment-copy\">Could you add a generic expression using the syntax used in the OP?</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">@giuscri it's simply a convention chosen by authors of a disassembler you're using. They seem to simply equate arg3 to 0xc and not bother with details :) If your question is about \"; arg int arg_3        @ ebp+0xc\" - then yeah I agree it's a bit illogical but hey, ask them to fix it :)</span>",
                    "time": null
                },
                {
                    "user": "u185619",
                    "text": "<span class=\"comment-copy\">hi I am one of the authors, the reason why we made it like this is that many of the arguments/variables manipulating commands requires prior knowledge of that base register you will use, so think of the <code>[ebp+arg_3]</code> as if I was trying to say arg_3 is offsetted  with respect to ebp instead of regular + operator</span>",
                    "time": null
                }
            ]
        }
    ]
}