{
    "title": "indirect return value address",
    "link": "https://reverseengineering.stackexchange.com/questions/22701/indirect-return-value-address",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have\n  <code>\n   usercall\n  </code>\n  with calling convention I do not fully understand, it returns\n  <code>\n   std::string\n  </code>\n  but IDA recognize it as\n  <code>\n   void\n  </code>\n  .\n </p>\n <p>\n  I've noticed that every calle reads from\n  <code>\n   x8/w8\n  </code>\n  afterwards, from\n  <a href=\"https://en.wikipedia.org/wiki/Calling_convention#ARM_(A64)\" rel=\"nofollow noreferrer\">\n   wikipedia\n  </a>\n  ;\n </p>\n <blockquote>\n  <p>\n   x8: used to hold indirect return value address\n  </p>\n </blockquote>\n <p>\n  Can someone explain \"\n  <em>\n   indirect return value address\n  </em>\n  \" ?\n </p>\n <p>\n  From\n  <a href=\"https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions?view=vs-2019\" rel=\"nofollow noreferrer\">\n   https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions?view=vs-2019\n  </a>\n </p>\n <blockquote>\n  <p>\n   Return values\n  </p>\n  <p>\n   Integral values are returned in x0.\n  </p>\n  <p>\n   Floating-point values are returned in s0, d0, or v0, as appropriate.\n  </p>\n  <p>\n   HFA and HVA values are returned in s0-s3, d0-d3, or v0-v3, as\n  appropriate.\n  </p>\n  <p>\n   Types returned by value are handled differently depending on whether\n  they have certain properties. Types which have all of these\n  properties,\n  </p>\n  <p>\n   they're aggregate by the C++14 standard definition, that is, they have\n  no user-provided constructors, no private or protected non-static data\n  members, no base classes, and no virtual functions, and they have a\n  trivial copy-assignment operator, and they have a trivial destructor,\n  use the following return style:\n  </p>\n  <p>\n   Types less than or equal to 8 bytes are returned in x0. Types less\n  than or equal to 16 bytes are returned in x0 and x1, with x0\n  containing the lower-order 8 bytes.\n  </p>\n  <p>\n   <strong>\n    For types greater than 16 bytes,\n  the caller shall reserve a block of memory of sufficient size and\n  alignment to hold the result. The address of the memory block shall be\n  passed as an additional argument to the function in x8. The callee may\n  modify the result memory block at any point during the execution of\n  the subroutine. The callee isn't required to preserve the value stored\n  in x8.\n   </strong>\n  </p>\n  <p>\n   All other types use this convention:\n  </p>\n  <p>\n   The caller shall reserve a block of memory of sufficient size and\n  alignment to hold the result. The address of the memory block shall be\n  passed as an additional argument to the function in x0, or x1 if $this\n  is passed in x0. The callee may modify the result memory block at any\n  point during the execution of the subroutine. The callee returns the\n  address of the memory block in x0.\n  </p>\n </blockquote>\n <p>\n  Update 2:\n </p>\n <p>\n  From\n  <a href=\"https://static.docs.arm.com/den0024/a/DEN0024A_v8_architecture_PG.pd\" rel=\"nofollow noreferrer\">\n   ARM docs\n  </a>\n </p>\n <blockquote>\n  <p>\n   Registers with a special purpose\n  </p>\n  <p>\n   â€¢ X8 is the indirect result\n  register. This is used to pass the address location of an indirect\n  result, for example, where a function returns a large structure.\n  ...\n  </p>\n  <p>\n   ... the structure contains more than 16 bytes. According to the AAPCS for\n  AArch64, the returned object is written to the memory pointed to by XR.\n  </p>\n </blockquote>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "c++",
        "calling-conventions",
        "arm64"
    ],
    "user": "James W.",
    "time": "Dec 9, 2019 at 19:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md\" rel=\"nofollow noreferrer\">\n   https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md\n  </a>\n </p>\n <blockquote>\n  <p>\n   x8 pointer to where to write the return value if >128 bits, otherwise scratch register\n  </p>\n </blockquote>\n <p>\n  So it seems x8 is used to pass an address at which the return value will land if it's too big, rather than the return value directly, hence indirect I suppose.\n </p>\n <p>\n  I couldn't find official documentation as the ARM page was barely loading for me.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Johann Aydinbas",
            "time": "Dec 9, 2019 at 15:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">why not return a pointer in <code>x0</code>?</span>",
                    "time": null
                },
                {
                    "user": "Johann Aydinbas",
                    "text": "<span class=\"comment-copy\">I have no idea, it's a convention after all. If I had to make up a reason, I'd say this allows some performance optimization. If you dedicate one register as a register that's likely going to contain an address, you could physically optimize the wiring so fetching data from memory pointed at by <code>x8</code> is fast. You don't want to do that for all of them, so you pick one register with special treatment and make using it as a memory-pointing register a convention.</span>",
                    "time": null
                }
            ]
        }
    ]
}