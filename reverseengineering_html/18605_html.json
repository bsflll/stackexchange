{
    "title": "How identify witch cpu run assembly [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/18605/how-identify-witch-cpu-run-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         This question already has answers here\n        </b>\n        :\n       </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"flex--item mb0 mt4\">\n     <a dir=\"ltr\" href=\"/questions/2897/tool-or-data-for-analysis-of-binary-code-to-detect-cpu-architecture\">\n      Tool or data for analysis of binary code to detect CPU architecture\n     </a>\n     <span class=\"question-originals-answer-count\">\n      (6 answers)\n     </span>\n    </div>\n    <div class=\"flex--item mb0 mt8\">\n     Closed\n     <span class=\"relativetime\" title=\"2018-06-27 13:08:47Z\">\n      6 years ago\n     </span>\n     .\n    </div>\n   </div>\n  </aside>\n </div>\n <p>\n  I have around 300 bytes of binary machine code.\n </p>\n <p>\n  I don't know which instruction set the code is for so I can't open it with IDA.\n </p>\n <p>\n  Is there any tool that can help identify the instruction set?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "machine-code"
    ],
    "user": "FIF9K9J",
    "time": "6 years ago",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Developing techniques for identification of the target architecture of object code is a challenge being actively researched. The approach used by\n <code>\n  binwalk\n </code>\n is scanning for opcode signatures. See\n <a href=\"https://www.sciencedirect.com/science/article/pii/S1742287615000523\" rel=\"nofollow noreferrer\">\n  Automatic classification of object code using machine learning\n </a>\n as an example of a different approach.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several tools to identify the opcodes in a file.\n </p>\n <ol>\n  <li>\n   <p>\n    <code>\n     binwalk\n    </code>\n   </p>\n   <p>\n    If your blob is an archive and mix several files or has no magic numbers at the beginning, then try to run\n    <code>\n     binwalk\n    </code>\n    on it with the following options (see\n    <a href=\"https://github.com/ReFirmLabs/binwalk/wiki/Usage\" rel=\"nofollow noreferrer\">\n     binwalk's documentation\n    </a>\n    for more details):\n   </p>\n   <pre><code>#> binwalk --opcodes myfile.bin\n</code></pre>\n   <p>\n    If you are using IDA, you can also use this\n    <a href=\"https://github.com/ReFirmLabs/binwalk/wiki/Using-the-Binwalk-IDA-Plugin\" rel=\"nofollow noreferrer\">\n     binwalk IDA plugin\n    </a>\n    .\n   </p>\n   <p>\n    <a href=\"https://i.sstatic.net/4aGnG.png\" rel=\"nofollow noreferrer\">\n     <img alt=\"Binwalk IDA Plugin Menu\" src=\"https://i.sstatic.net/4aGnG.png\"/>\n    </a>\n   </p>\n   <p>\n    <a href=\"https://i.sstatic.net/5sqfr.png\" rel=\"nofollow noreferrer\">\n     <img alt=\"Result of the Binwalk IDA Plugin\" src=\"https://i.sstatic.net/5sqfr.png\"/>\n    </a>\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     file\n    </code>\n   </p>\n   <p>\n    If your file has some magic numbers, then the easiest way would be to run a\n    <code>\n     file\n    </code>\n    on it. This program identify a lot of different file formats and display a lot of information about each format.\n   </p>\n   <pre><code>#> file myfile.bin\n</code></pre>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "perror",
            "time": "Jun 26, 2018 at 17:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "FIF9K9J",
                    "text": "<span class=\"comment-copy\">I don't have a bin fie,  I just have 400 bytes of hex  , I can copy it to bin file</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Then, <code>binwalk</code>...</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Ah, you can also use this <a href=\"https://github.com/ReFirmLabs/binwalk/wiki/Using-the-Binwalk-IDA-Plugin\" rel=\"nofollow noreferrer\">binwalk IDAplugin</a>.</span>",
                    "time": null
                },
                {
                    "user": "zerocool",
                    "text": "<span class=\"comment-copy\">what if the code is a vm code this method won't work special if it is handmade vm @perror</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">If you can see the bytes, then you can extract it... there is no magic here.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You might try to use\n  <a href=\"https://github.com/airbus-seclab/cpu_rec\" rel=\"nofollow noreferrer\">\n   <strong>\n    cpu_rec\n   </strong>\n  </a>\n  it claims to be able to identify a wide variety of architectures by analyzing the raw binary data ( 70 architectures).\n </p>\n <p>\n  cpu_rec is a tool that recognizes cpu instructions in an arbitrary binary file. It can be used as a standalone tool, or as a plugin for\n  <a href=\"https://github.com/ReFirmLabs/binwalk\" rel=\"nofollow noreferrer\">\n   binwalk\n  </a>\n  .\n </p>\n <h1>\n  How to use the tool\n </h1>\n <h2>\n  As a binwalk module\n </h2>\n <p>\n  Add the flag\n  <code>\n   -%\n  </code>\n  when using binwalk.\n </p>\n <p>\n  Be patient. Waiting a few minutes for the result is to be expected.\nOn my laptop the tool takes 25 seconds and 1 Gb of RAM\nto create the signatures for 70 architectures, and then the analysis\nof a binary takes one minute per Mb.\nIf you want the tool to be faster, you can remove some architectures,\nif you know that your binary is not one of them (typically Cray or\nMMIX are not found in a firmware).\n </p>\n <h2>\n  As a standalone tool\n </h2>\n <p>\n  Just run the tool, with the binary file(s) to analyze as argument(s)\nThe tool will try to match an architecture for the whole file, and\nthen to detect the largest binary chunk that corresponds to a CPU\narchitecture; usually it is the right answer.\n </p>\n <p>\n  If the result is not satisfying, prepending twice\n  <code>\n   -v\n  </code>\n  to the arguments\nmakes the tool very verbose; this is helpful when adding a new\narchitecture to the corpus.\n </p>\n <p>\n  If\n  <a href=\"https://github.com/LRGH/elfesteem\" rel=\"nofollow noreferrer\">\n   https://github.com/LRGH/elfesteem\n  </a>\n  is installed, then the\ntool also extract the text section from ELF, PE, Mach-O or COFF\nfiles, and outputs the architecture corresponding to this section;\nthe possibility of extracting the text section is also used when\nbuilding a corpus from full binary files.\n </p>\n <p>\n  Option\n  <code>\n   -d\n  </code>\n  followed by a directory dumps the corpus in that directory;\nusing this option one can reconstruct the default corpus.\n </p>\n <h1>\n  Examples\n </h1>\n <p>\n  Running the tool as a binwalk module typically results in:\n </p>\n <pre><code>shell_prompt> binwalk -% corpus/PE/PPC/NTDLL.DLL corpus/MSP430/goodfet32.hex\n\nTarget File:   .../corpus/PE/PPC/NTDLL.DLL\nMD5 Checksum:  d006a2a87a3596c744c5573aece81d77\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             None (size=0x5800, entropy=0.620536)\n22528         0x5800          PPCel (size=0x4c800, entropy=0.737337)\n335872        0x52000         None (size=0x1000, entropy=0.720493)\n339968        0x53000         IA-64 (size=0x800, entropy=0.491011)\n342016        0x53800         None (size=0x22000, entropy=0.727501)\n\nTarget File:   .../corpus/MSP430/goodfet32.hex\nMD5 Checksum:  4b295284024e2b6a6257b720a7168b92\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             MSP430 (size=0x5200, entropy=0.472185)\n20992         0x5200          None (size=0xe00, entropy=0.467086)\n</code></pre>\n <p>\n  We can notice that during the analysis of\n  <code>\n   PPC/NTDLL.DLL\n  </code>\n  a small chunk has been identified as\n  <code>\n   IA-64\n  </code>\n  .\nThis is an erroneous detection, due to the fact that\nthe IA-64 architecture has statistical properties similar\nto data sections.\n </p>\n <p>\n  If the entropy value is above 0.9, it is probably encrypted or compressed\ndata, and therefore the result of cpu_rec should be meaningless.\n </p>\n <p>\n  Known architectures in the default corpus\n  \n\n  <a href=\"https://en.wikipedia.org/wiki/Freescale_68HC08\" rel=\"nofollow noreferrer\">\n   <code>\n    68HC08\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Freescale_68HC11\" rel=\"nofollow noreferrer\">\n   <code>\n    68HC11\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Intel_MCS-51\" rel=\"nofollow noreferrer\">\n   <code>\n    8051\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/DEC_Alpha\" rel=\"nofollow noreferrer\">\n   <code>\n    Alpha\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/ARC_(processor)\" rel=\"nofollow noreferrer\">\n   <code>\n    ARcompact\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/ARM_architecture\" rel=\"nofollow noreferrer\">\n   <code>\n    ARM64\n   </code>\n   <code>\n    ARMeb\n   </code>\n   <code>\n    ARMel\n   </code>\n   <code>\n    ARMhf\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Atmel_AVR\" rel=\"nofollow noreferrer\">\n   <code>\n    AVR\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/ETRAX_CRIS\" rel=\"nofollow noreferrer\">\n   <code>\n    AxisCris\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Blackfin\" rel=\"nofollow noreferrer\">\n   <code>\n    Blackfin\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Cell_(microprocessor)\" rel=\"nofollow noreferrer\">\n   <code>\n    Cell-SPU\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Clipper_architecture\" rel=\"nofollow noreferrer\">\n   <code>\n    CLIPPER\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/CompactRISC\" rel=\"nofollow noreferrer\">\n   <code>\n    CompactRISC\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Cray\" rel=\"nofollow noreferrer\">\n   <code>\n    Cray\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Adapteva\" rel=\"nofollow noreferrer\">\n   <code>\n    Epiphany\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/FR-V_(microprocessor)\" rel=\"nofollow noreferrer\">\n   <code>\n    FR-V\n   </code>\n  </a>\n  <a href=\"http://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/hm91101-cm71-10102-2e.pdf\" rel=\"nofollow noreferrer\">\n   <code>\n    FR30\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/FTDI\" rel=\"nofollow noreferrer\">\n   <code>\n    FT32\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/H8_Family\" rel=\"nofollow noreferrer\">\n   <code>\n    H8-300\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/HP_FOCUS\" rel=\"nofollow noreferrer\">\n   <code>\n    HP-Focus\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/PA-RISC\" rel=\"nofollow noreferrer\">\n   <code>\n    HP-PA\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Intel_i860\" rel=\"nofollow noreferrer\">\n   <code>\n    i860\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/IA-64\" rel=\"nofollow noreferrer\">\n   <code>\n    IA-64\n   </code>\n  </a>\n  <a href=\"http://www.ic72.com/pdf_file/v/165699.pdf\" rel=\"nofollow noreferrer\">\n   <code>\n    IQ2000\n   </code>\n  </a>\n  <a href=\"https://www.renesas.com/en-eu/products/microcontrollers-microprocessors/m16c.html\" rel=\"nofollow noreferrer\">\n   <code>\n    M32C\n   </code>\n  </a>\n  <a href=\"https://www.renesas.com/en-eu/products/microcontrollers-microprocessors/m32r.html\" rel=\"nofollow noreferrer\">\n   <code>\n    M32R\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Motorola_68000_series\" rel=\"nofollow noreferrer\">\n   <code>\n    M68k\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Motorola_88000\" rel=\"nofollow noreferrer\">\n   <code>\n    M88k\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/M%C2%B7CORE\" rel=\"nofollow noreferrer\">\n   <code>\n    MCore\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/LatticeMico32\" rel=\"nofollow noreferrer\">\n   <code>\n    Mico32\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/MicroBlaze\" rel=\"nofollow noreferrer\">\n   <code>\n    MicroBlaze\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/MIPS_instruction_set\" rel=\"nofollow noreferrer\">\n   <code>\n    MIPS16\n   </code>\n   <code>\n    MIPSeb\n   </code>\n   <code>\n    MIPSel\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/MMIX\" rel=\"nofollow noreferrer\">\n   <code>\n    MMIX\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/MN103\" rel=\"nofollow noreferrer\">\n   <code>\n    MN10300\n   </code>\n  </a>\n  <a href=\"http://moxielogic.org/blog/\" rel=\"nofollow noreferrer\">\n   <code>\n    Moxie\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/TI_MSP430\" rel=\"nofollow noreferrer\">\n   <code>\n    MSP430\n   </code>\n  </a>\n  <a href=\"http://osdk.andestech.com/index.html\" rel=\"nofollow noreferrer\">\n   <code>\n    NDS32\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Nios_II\" rel=\"nofollow noreferrer\">\n   <code>\n    NIOS-II\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/OCaml\" rel=\"nofollow noreferrer\">\n   <code>\n    OCaml\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/PDP-11\" rel=\"nofollow noreferrer\">\n   <code>\n    PDP-11\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/PIC_microcontroller\" rel=\"nofollow noreferrer\">\n   <code>\n    PIC10\n   </code>\n   <code>\n    PIC16\n   </code>\n   <code>\n    PIC18\n   </code>\n   <code>\n    PIC24\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/PowerPC\" rel=\"nofollow noreferrer\">\n   <code>\n    PPCeb\n   </code>\n   <code>\n    PPCel\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/RISC-V\" rel=\"nofollow noreferrer\">\n   <code>\n    RISC-V\n   </code>\n  </a>\n  <a href=\"https://www.renesas.com/en-eu/products/microcontrollers-microprocessors/rl78.html\" rel=\"nofollow noreferrer\">\n   <code>\n    RL78\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/ROMP\" rel=\"nofollow noreferrer\">\n   <code>\n    ROMP\n   </code>\n  </a>\n  <a href=\"https://www.renesas.com/en-eu/products/microcontrollers-microprocessors/rx.html\" rel=\"nofollow noreferrer\">\n   <code>\n    RX\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/IBM_System/390_ES/9000_Enterprise_Systems_Architecture_ESA_family\" rel=\"nofollow noreferrer\">\n   <code>\n    S-390\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/SPARC\" rel=\"nofollow noreferrer\">\n   <code>\n    SPARC\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/STM8\" rel=\"nofollow noreferrer\">\n   <code>\n    STM8\n   </code>\n  </a>\n  <a href=\"https://sourceware.org/cgen/gen-doc/xstormy16.html\" rel=\"nofollow noreferrer\">\n   <code>\n    Stormy16\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/SuperH\" rel=\"nofollow noreferrer\">\n   <code>\n    SuperH\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/TILEPro64\" rel=\"nofollow noreferrer\">\n   <code>\n    TILEPro\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Toshiba_TLCS#90\" rel=\"nofollow noreferrer\">\n   <code>\n    TLCS-90\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Texas_Instruments_TMS320\" rel=\"nofollow noreferrer\">\n   <code>\n    TMS320C2x\n   </code>\n   <code>\n    TMS320C6x\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/V850\" rel=\"nofollow noreferrer\">\n   <code>\n    V850\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/VAX\" rel=\"nofollow noreferrer\">\n   <code>\n    VAX\n   </code>\n  </a>\n  <a href=\"https://www.slideshare.net/AdaCore/controls-and-dataservices\" rel=\"nofollow noreferrer\">\n   <code>\n    Visium\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Bellmac_32\" rel=\"nofollow noreferrer\">\n   <code>\n    WE32000\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/X86-64\" rel=\"nofollow noreferrer\">\n   <code>\n    X86-64\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/X86\" rel=\"nofollow noreferrer\">\n   <code>\n    X86\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Tensilica\" rel=\"nofollow noreferrer\">\n   <code>\n    Xtensa\n   </code>\n  </a>\n  <a href=\"https://en.wikipedia.org/wiki/Zilog_Z80\" rel=\"nofollow noreferrer\">\n   <code>\n    Z80\n   </code>\n  </a>\n  <a href=\"https://github.com/cc65/cc65\" rel=\"nofollow noreferrer\">\n   <code>\n    #6502#cc65\n   </code>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user22363",
            "time": "Jun 26, 2018 at 22:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">This tool is unreliable due to its tendency to produce false positives. This is due in large part to a lack of binary file preprocessing required to identify and differentiate between data and code regions (\"de-noising\"). It is telling that in the only example given a false positive is produced.</span>",
                    "time": null
                }
            ]
        }
    ]
}