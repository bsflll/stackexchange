{
    "title": "how could i follow a system call from a dll -> kernel driver syscall",
    "link": "https://reverseengineering.stackexchange.com/questions/25515/how-could-i-follow-a-system-call-from-a-dll-kernel-driver-syscall",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  basically i would like to follow (system calls / internal calls) that basically lands in the kernel i would like for example to debug a specific dll ex : ntdll.dll and follow it to (NtXXX) function where its located in XXX.sys driver i hope that my question was clear also if its possible doing this with windbg would be a lot better for me instead of using a 3rd part software.\n </p>\n <p>\n  i also tried to use Rohitab api monitor but i couldn't understand how does it actually works\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "798",
    "tags": [
        "windows",
        "assembly",
        "c",
        "kernel",
        "syscall"
    ],
    "user": "zeroaceee",
    "time": "Jul 17, 2020 at 16:37",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. You need to be more specific. Are you exclusively interested in those calls that will end up in one of the SSDTs or are you interested in general in tracing code execution from user mode to kernel mode and back? I am asking because while opening a file, for example, results in a system call, this isn't where the journey ends in kernel mode. Actually that's more the point where it starts, where arguments get re-packaged, get sent to the correct device object where a driver untangles the name and makes sense of it (e.g. inside a file system). So that's a difference.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "zeroaceee",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L hi there i basically want to know what function in user mode (ex : user32.dll) calls what internal api like (\"NtXXX\") and i want to know where is it calling it from is it ntoskrnl.exe is it win32kbase.sys that's all what i want to find a function in a dll that will end up being called in 1 of the kernel system drivers i hope that i made it clear enough.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Assuming You Wrote this code\n  \n\n  This opens a file in the current Directory\n  \n\n  Reads its contents and counts the content length and\n  \n\n  Prints to console contents and count\n </p>\n <p>\n  This is a crt function it transistions from\n  \n\n  <strong>\n   crt\n  </strong>\n  to\n  <strong>\n   kernel32.dll , kernelbase.dll and ntdll.dll\n  </strong>\n  in user mode. and\n  \n\n  from ntdll it transitions into kernel mode via a\n  <strong>\n   syscall\n  </strong>\n  to\n  <strong>\n   NtCreateFile in ntoskrnl/ntkrnlmp.exe\n  </strong>\n </p>\n <pre><code>#include <stdio.h>\nint main (void) \n{\n    int c=0,n=0;\n    FILE *fp = NULL;\n    errno_t err = fopen_s(&fp,\"test.txt\",\"rb\");\n    if(fp != NULL && err == 0)\n    {\n        do\n        {\n            n++;\n            c = fgetc(fp);\n            printf(\"%c\" , c);\n        }while(c !=EOF);\n        fclose(fp);\n    }\n    printf(\"\nfile has %d charecters\n\" ,n );\n    return n;    \n}\n</code></pre>\n <p>\n  you can use windbg\n  <strong>\n   uf /c\n  </strong>\n  command to create a flow map as shown below\n  \n\n  i use dynamic analysis as there are many indirect calls and it is easy to\n  \n\n  find the destination dynamically\n </p>\n <p>\n  open fopen.exe in windbg set a break on call fopen_s and hit\n  <strong>\n   f5\n  </strong>\n  to break on the call\n </p>\n <pre><code>0:000> rM0\nfopen!main+0x29:\n00a21029 e892a50000      call    fopen!fopen_s (00a2b5c0)\n</code></pre>\n <p>\n  enter this call and issue a uf /c . (note the .denotes current IP)\n </p>\n <pre><code>0:000> t\nfopen!fopen_s:\n00a2b5c0 8bff            mov     edi,edi\n\n0:000> uf /c .\nfopen!fopen_s (00a2b5c0)\n  fopen!fopen_s+0xd (00a2b5cd):\n    call to fopen!_errno (00a42ffd)\n  fopen!fopen_s+0x17 (00a2b5d7):\n    call to fopen!_invalid_parameter_noinfo (00a42ed6)\n  fopen!fopen_s+0x29 (00a2b5e9):\n    call to fopen!common_fsopen<char> (00a2b383) <<<<<<<<<<<<<<\n  fopen!fopen_s+0x37 (00a2b5f7):\n    call to fopen!_errno (00a42ffd)\n</code></pre>\n <p>\n  you will notice a call to fopen!common_fsopen\n </p>\n <p>\n  get inside that function and repeat the procedure until you reach the syscall\nnote if the function is inlined you may need to set a  bm breakpoint as shown below\n </p>\n <pre><code>0:000> g fopen!common_fsopen<char>\nCouldn't resolve error at 'fopen!common_fsopen<char>'\nThe breakpoint expression \"fopen!common_fsopen<char>\" evaluates to the inline function.\nPlease use bm command to set breakpoints first, then g.\n                                 ^ Syntax error in 'g fopen!common_fsopen<char>'\n0:000> bm fopen!common_fsopen<char>;g\n  1: 00a2b383          @!\"fopen!common_fsopen<char>\"\nBreakpoint 1 hit \n</code></pre>\n <p>\n  the result of procedure thus repeated until crt transitions from itself to kernel32 is shown below scroll to the end\n </p>\n <pre><code>0:000> uf /c .\nfopen!common_fsopen<char> (00a2b383)\n  fopen!common_fsopen<char>+0x7 (00a2b38a):\n    call to fopen!__SEH_prolog4 (00a21b30)\n  fopen!common_fsopen<char>+0x13 (00a2b396):\n    call to fopen!_errno (00a42ffd)\n  fopen!common_fsopen<char>+0x1e (00a2b3a1):\n    call to fopen!_invalid_parameter_noinfo (00a42ed6)\n  fopen!common_fsopen<char>+0x38 (00a2b3bb):\n    call to fopen!_errno (00a42ffd)\n  fopen!common_fsopen<char>+0x49 (00a2b3cc):\n    call to fopen!__acrt_stdio_allocate_stream (00a44b46)\n  fopen!common_fsopen<char>+0x55 (00a2b3d8):\n    call to fopen!_errno (00a42ffd)\n  fopen!common_fsopen<char>+0x72 (00a2b3f5):\n    call to fopen!_openfile (00a45529)\n  fopen!common_fsopen<char>+0x86 (00a2b409):\n    call to fopen!common_fsopen<char>+0x96 (00a2b419)\n  fopen!common_fsopen<char>+0x8d (00a2b410):\n    call to fopen!__SEH_epilog4 (00a21b76)\n0:000> g fopen!_openfile\neax=0016f870 ebx=7ffd5000 ecx=0016f870 edx=0017a89b esi=00a62194 edi=00a62190\neip=00a45529 esp=0016f848 ebp=0016f88c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nfopen!_openfile:\n00a45529 8bff            mov     edi,edi\n0:000> uf /c .\nfopen!_openfile (00a45529)\n  fopen!common_openfile<char>+0x11 (00a4519e):\n    call to fopen!__acrt_stdio_parse_mode<char> (00a44cef)\n  fopen!common_openfile<char>+0x3a (00a451c7):\n    call to fopen!_sopen_s (00a5320a)\n0:000> g fopen!_sopen_s\neax=0016f840 ebx=7ffd5000 ecx=00a62190 edx=0017a89b esi=00a62194 edi=00a62190\neip=00a5320a esp=0016f810 ebp=0016f844 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nfopen!_sopen_s:\n00a5320a 8bff            mov     edi,edi\n0:000> uf /c .\nfopen!_sopen_s (00a5320a)\n  fopen!_sopen_s+0x16 (00a53220):\n    call to fopen!common_sopen_dispatch<char> (00a528eb)\n0:000> g fopen!common_sopen_dispatch<char>\nCouldn't resolve error at 'fopen!common_sopen_dispatch<char>'\nThe breakpoint expression \"fopen!common_sopen_dispatch<char>\" evaluates to the inline function.\nPlease use bm command to set breakpoints first, then g.\n                                         ^ Syntax error in 'g fopen!common_sopen_dispatch<char>'\n0:000> bm fopen!common_sopen_dispatch<char>;g\n  2: 00a528eb          @!\"fopen!common_sopen_dispatch<char>\"\nBreakpoint 2 hit\neax=0016f840 ebx=7ffd5000 ecx=00a62190 edx=0017a89b esi=00a62194 edi=00a62190\neip=00a528eb esp=0016f7f0 ebp=0016f80c iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nfopen!common_sopen_dispatch<char>:\n00a528eb 6a10            push    10h\n0:000> uf /c .\nfopen!common_sopen_dispatch<char> (00a528eb)\n  fopen!common_sopen_dispatch<char>+0x7 (00a528f2):\n    call to fopen!__SEH_prolog4 (00a21b30)\n  fopen!common_sopen_dispatch<char>+0x13 (00a528fe):\n    call to fopen!_errno (00a42ffd)\n  fopen!common_sopen_dispatch<char>+0x1d (00a52908):\n    call to fopen!_invalid_parameter_noinfo (00a42ed6)\n  fopen!common_sopen_dispatch<char>+0x5d (00a52948):\n    call to fopen!_sopen_nolock (00a5319a)\n  fopen!common_sopen_dispatch<char>+0x71 (00a5295c):\n    call to fopen!common_sopen_dispatch<char>+0x8b (00a52976)\n  fopen!common_sopen_dispatch<char>+0x7f (00a5296a):\n    call to fopen!__SEH_epilog4 (00a21b76)\n0:000> g fopen!_sopen_nolock\neax=0016f7cc ebx=7ffd5000 ecx=00a62190 edx=0017a89b esi=0016f840 edi=00a62190\neip=00a5319a esp=0016f79c ebp=0016f7ec iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nfopen!_sopen_nolock:\n00a5319a 8bff            mov     edi,edi\n0:000> uf /c .\nfopen!_sopen_nolock (00a5319a)\n  fopen!_sopen_nolock+0x1d (00a531b7):\n    call to fopen!__acrt_get_utf8_acp_compatibility_codepage (00a4a841)\n  fopen!_sopen_nolock+0x2a (00a531c4):\n    call to fopen!__acrt_mbs_to_wcs_cp<__crt_win32_buffer_internal_dynamic_resizing> (00a49bea)\n  fopen!_sopen_nolock+0x50 (00a531ea):\n    call to fopen!_wsopen_nolock (00a53282)\n  fopen!_sopen_nolock+0x63 (00a531fd):\n    call to fopen!_free_base (00a430ff)\n0:000> g fopen!_wsopen_nolock\neax=00000000 ebx=7ffd5000 ecx=8b190463 edx=00000009 esi=0016f840 edi=00a62190\neip=00a53282 esp=0016f75c ebp=0016f798 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nfopen!_wsopen_nolock:\n00a53282 8bff            mov     edi,edi\n0:000> uf /c .\nfopen!_wsopen_nolock (00a53282)\n  fopen!_wsopen_nolock+0x18 (00a5329a):\n    call to fopen!decode_options (00a52e85)\n  fopen!_wsopen_nolock+0x32 (00a532b4):\n    call to fopen!__doserrno (00a42fea)\n  fopen!_wsopen_nolock+0x3f (00a532c1):\n    call to fopen!_errno (00a42ffd)\n  fopen!_wsopen_nolock+0x4b (00a532cd):\n    call to fopen!_alloc_osfhnd (00a4cc8a)\n  fopen!_wsopen_nolock+0x59 (00a532db):\n    call to fopen!__doserrno (00a42fea)\n  fopen!_wsopen_nolock+0x63 (00a532e5):\n    call to fopen!_errno (00a42ffd)\n  fopen!_wsopen_nolock+0xa4 (00a53326):\n    call to fopen!create_file (00a52d97)\n  fopen!_wsopen_nolock+0xe9 (00a5336b):\n    call to fopen!create_file (00a52d97)\n  fopen!_wsopen_nolock+0x114 (00a53396):\n    call to kernel32!GetLastErrorStub (75eccde0)\n  fopen!_wsopen_nolock+0x11b (00a5339d):\n    call to fopen!__acrt_errno_map_os_error (00a42fc7)\n  fopen!_wsopen_nolock+0x127 (00a533a9):\n    call to kernel32!GetFileTypeImplementation (75ed6ab4)\n  fopen!_wsopen_nolock+0x131 (00a533b3):\n    call to kernel32!GetLastErrorStub (75eccde0)\n  fopen!_wsopen_nolock+0x13a (00a533bc):\n    call to fopen!__acrt_errno_map_os_error (00a42fc7)\n  fopen!_wsopen_nolock+0x15a (00a533dc):\n    call to kernel32!CloseHandleImplementation (75ece868)\n  fopen!_wsopen_nolock+0x168 (00a533ea):\n    call to fopen!_errno (00a42ffd)\n  fopen!_wsopen_nolock+0x194 (00a53416):\n    call to fopen!__acrt_lowio_set_os_handle (00a4cbd3)\n  fopen!_wsopen_nolock+0x1e0 (00a53462):\n    call to fopen!truncate_ctrl_z_if_present (00a53096)\n  fopen!_wsopen_nolock+0x1ee (00a53470):\n    call to fopen!_close_nolock (00a45761)\n  fopen!_wsopen_nolock+0x215 (00a53497):\n    call to fopen!configure_text_mode (00a52b42)\n  fopen!_wsopen_nolock+0x2a7 (00a53529):\n    call to kernel32!CloseHandleImplementation (75ece868)\n  fopen!_wsopen_nolock+0x2ca (00a5354c):\n    call to fopen!create_file (00a52d97)\n  fopen!_wsopen_nolock+0x2d9 (00a5355b):\n    call to kernel32!GetLastErrorStub (75eccde0)\n  fopen!_wsopen_nolock+0x2e0 (00a53562):\n    call to fopen!__acrt_errno_map_os_error (00a42fc7)\n  fopen!_wsopen_nolock+0x300 (00a53582):\n    call to fopen!_free_osfhnd (00a4cd93)\n0:000> g fopen!create_file\neax=0016f744 ebx=0016f840 ecx=00000000 edx=00000000 esi=0016f744 edi=0016f708\neip=00a52d97 esp=0016f6e4 ebp=0016f758 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nfopen!create_file:\n00a52d97 8bff            mov     edi,edi\n0:000> uf /c .\nfopen!create_file (00a52d97)\n  fopen!create_file+0x1d (00a52db4):\n    call to kernel32!CreateFileWImplementation (75ece8a5)  <<<<<<<<<<<<<<<<<\n</code></pre>\n <p>\n  kernel32.dll to kernelbase.dll\n </p>\n <pre><code>0:000> uf /c 75ece8a5\nkernel32!CreateFileWImplementation (75ece8a5)\n  kernel32!CreateFileWImplementation+0xe (75ece8b3):\n    call to ntdll!RtlInitUnicodeStringEx (77a76f0a)\n  kernel32!CreateFileWImplementation+0x2a (75ece8c8):\n    call to kernel32!BaseIsThisAConsoleName (75ece903)\n  kernel32!CreateFileWImplementation+0x64 (75ece8ea):\n    call to kernel32!CreateFileW (75ece8f8)\n  kernel32!CreateFileWImplementation+0x48 (75eea050):\n    call to kernel32!OpenConsoleW (75ec0853)\n  kernel32!CreateFileWImplementation+0x19 (75eebe96):\n    call to kernel32!BaseSetLastNTError (75ecf790)\n0:000> uf /c kernel32!CreateFileW\nFlow analysis was incomplete, some code may be missing\nkernel32!CreateFileW (75ece8f8)\n    no calls found\n0:000> uf kernel32!CreateFileW\nFlow analysis was incomplete, some code may be missing\nkernel32!_imp__CreateFileW:\n75e819e0 68a7d9755e      push    5E75D9A7h\n75e819e5 44              inc     esp\n\nkernel32!CreateFileW:\n75ece8f8 ff25e019e875    jmp     dword ptr [kernel32!_imp__CreateFileW (75e819e0)]\n</code></pre>\n <p>\n  as shown below the transition from kernelbase to ntdll and from ntdll to kernelmode\nsince there are many indirect calls you may need to evaluate each of them  using\n  <strong>\n   run to call\n  </strong>\n  <strong>\n   (pc)\n  </strong>\n  command\n </p>\n <pre><code>0:000> uf /c poi(75e819e0)\nKERNELBASE!CreateFileW (75d9a768)\n  KERNELBASE!CreateFileW+0x68 (75d9a799):\n    call to ntdll!RtlInitUnicodeStringEx (77a76f0a)\n  KERNELBASE!CreateFileW+0x9e (75d9a7d3):\n    call to ntdll!RtlDosPathNameToRelativeNtPathName_U_WithStatus (77a7a6a1)\n  KERNELBASE!CreateFileW+0x312 (75d9a8ed):\n    call to KERNELBASE!SbSelectProcedure (75d9a755)\n  KERNELBASE!CreateFileW+0x31f (75d9a8fa):\n    unresolvable call: call    eax\n  KERNELBASE!CreateFileW+0x35c (75d9a937):\n    unresolvable call: call    esi\n  KERNELBASE!CreateFileW+0x3c8 (75d9a94c):\n    call to ntdll!RtlReleaseRelativeName (77a77f7a)\n  KERNELBASE!CreateFileW+0x3e6 (75d9a96a):\n    unresolvable call: call    esi\n  KERNELBASE!CreateFileW+0x3f8 (75d9a97c):\n    unresolvable call: call    esi\n  KERNELBASE!CreateFileW+0x44e (75d9a997):\n    call to ntdll!RtlSetLastWin32Error (77a730fb)\n  KERNELBASE!CreateFileW+0x3ff (75d9a9b2):\n    call to KERNELBASE!BaseSetLastNTError (75d96b4d)\n  KERNELBASE!CreateFileW+0xb8 (75d9f441):\n    call to ntdll!RtlSetLastWin32Error (77a730fb)\n  KERNELBASE!CreateFileW+0x1a8 (75da16c6):\n    call to ntdll!NtQueryInformationFile (77a66058)\n  KERNELBASE!CreateFileW+0xc1 (75da446c):\n    call to KERNELBASE!BaseSetLastNTError (75d96b4d)\n  KERNELBASE!CreateFileW+0x423 (75da73e3):\n    call to ntdll!RtlSetLastWin32Error (77a730fb)\n  KERNELBASE!CreateFileW+0x46f (75db80bd):\n    call to ntdll!ZwSetInformationFile (77a66678)\n  KERNELBASE!CreateFileW+0x2f (75dbd130):\n    call to KERNELBASE!BaseSetLastNTError (75d96b4d)\n  KERNELBASE!CreateFileW+0x1bf (75dbd158):\n    call to KERNELBASE!KernelBaseGetGlobalData (75d96843)\n  KERNELBASE!CreateFileW+0x1d6 (75dbd16f):\n    call to ntdll!RtlAllocateHeap (77a72dd6)\n  KERNELBASE!CreateFileW+0x1f8 (75dbd18d):\n    call to ntdll!ZwQueryEaFile (77a66008)\n  KERNELBASE!CreateFileW+0x213 (75dbd1a8):\n    call to ntdll!RtlFreeHeap (77a72c6a)\n  KERNELBASE!CreateFileW+0x2c2 (75dbd1d5):\n    call to ntdll!RtlReleaseRelativeName (77a77f7a)\n  KERNELBASE!CreateFileW+0x2d8 (75dbd1eb):\n    call to ntdll!RtlFreeHeap (77a72c6a)\n  KERNELBASE!CreateFileW+0x2e3 (75dbd1f6):\n    call to KERNELBASE!BaseSetLastNTError (75d96b4d)\n  KERNELBASE!CreateFileW+0x3a2 (75dbd247):\n    unresolvable call: call    esi\n  KERNELBASE!CreateFileW+0x3b8 (75dbd265):\n    call to KERNELBASE!AitLogFeatureUsageByApp (75dd0aef)\n  KERNELBASE!CreateFileW+0x47a (75dbd27e):\n    call to KERNELBASE!BaseSetLastNTError (75d96b4d)\n  KERNELBASE!CreateFileW+0x482 (75dbd286):\n    call to ntdll!NtClose (77a65508)\n0:000> bp poi(75e819e0);g\nBreakpoint 0 hit\neax=00000000 ebx=0016f840 ecx=75ece9b9 edx=00000074 esi=0016f744 edi=0016f708\neip=75d9a768 esp=0016f694 ebp=0016f6bc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nKERNELBASE!CreateFileW:\n75d9a768 8bff            mov     edi,edi\n0:000> pc\neax=0016f668 ebx=0016f840 ecx=75ece9b9 edx=00000074 esi=0017a8d8 edi=0016f708\neip=75d9a799 esp=0016f61c ebp=0016f690 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nKERNELBASE!CreateFileW+0x68:\n75d9a799 ff15ec11d975    call    dword ptr [KERNELBASE!_imp__RtlInitUnicodeStringEx (75d911ec)]\nds:0023:75d911ec={ntdll!RtlInitUnicodeStringEx (77a76f0a)}\n0:000> pc\neax=0016f668 ebx=00000000 ecx=00000008 edx=00000000 esi=0017a8d8 edi=0016f708\neip=75d9a7d3 esp=0016f614 ebp=0016f690 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nKERNELBASE!CreateFileW+0x9e:\n75d9a7d3 ff150414d975    call    dword ptr [KERNELBASE!_imp__RtlDosPathNameToRelativeNtPathName_U_WithStatus\n(75d91404)] ds:0023:75d91404={ntdll!RtlDosPathNameToRelativeNtPathName_U_WithStatus (77a7a6a1)}\n0:000> pc\neax=00200000 ebx=00000000 ecx=00000000 edx=00000080 esi=00000020 edi=00000000\neip=75d9a8ed esp=0016f610 ebp=0016f690 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206\nKERNELBASE!CreateFileW+0x312:\n75d9a8ed e863feffff      call    KERNELBASE!SbSelectProcedure (75d9a755)\n0:000> pc\neax=75d9a760 ebx=00000000 ecx=0016f698 edx=00000000 esi=00000020 edi=00000000\neip=75d9a8fa esp=0016f61c ebp=0016f690 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206\nKERNELBASE!CreateFileW+0x31f:\n75d9a8fa ffd0            call    eax {KERNELBASE!CreateFileDowngrade_Vista (75d9a760)}\n0:000> pc\neax=0016f688 ebx=00000000 ecx=0016f62c edx=00000000 esi=77a65608 edi=00000000\neip=75d9a937 esp=0016f5f4 ebp=0016f690 iopl=0         nv up ei ng nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000282\nKERNELBASE!CreateFileW+0x35c:\n75d9a937 ffd6            call    esi {ntdll!ZwCreateFile (77a65608)}\n0:000> t\neax=0016f688 ebx=00000000 ecx=0016f62c edx=00000000 esi=77a65608 edi=00000000\neip=77a65608 esp=0016f5f0 ebp=0016f690 iopl=0         nv up ei ng nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000282\nntdll!ZwCreateFile:\n77a65608 b842000000      mov     eax,42h\n0:000> pc\neax=00000042 ebx=00000000 ecx=0016f62c edx=7ffe0300 esi=77a65608 edi=00000000\neip=77a65612 esp=0016f5f0 ebp=0016f690 iopl=0         nv up ei ng nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000282\nntdll!ZwCreateFile+0xa:\n77a65612 ff12            call    dword ptr [edx]      ds:0023:7ffe0300={ntdll!KiFastSystemCall (77a670f0)}\n0:000>\n</code></pre>\n <p>\n  for mapping kernel mode calls you need a kernel debugging session with two machines\na host and a target (physical/vm or vm /vm or physial / physical  )\n </p>\n <p>\n  set a process specific Break on nt!NtCreateFile and repeat the procedure\nit willmost likely reach Object Manager calls  ObCreateObject() etc before returning back to usermode .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jul 18, 2020 at 19:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}