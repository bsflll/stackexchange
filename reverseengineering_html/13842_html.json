{
    "title": "Do any of these details contradict the idea that theory that this file is encrypted with Blowfish?",
    "link": "https://reverseengineering.stackexchange.com/questions/13842/do-any-of-these-details-contradict-the-idea-that-theory-that-this-file-is-encryp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a file which has been encrypted with some unknown algorithm. Doing research on the file format, I stumbled across a website that claimed (without explaining why) that these files were encrypted with 32bit Blowfish. This website also speculates that the magic smoke is contained in a .iff file with a specific name.\n </p>\n <p>\n  It turns out that the .iff file is embedded in a plaintext portion of the encrypted file. I have clawed this out, and it hints at it being Blowfish.\n </p>\n <p>\n  The 4 byte header is \"BLFS\". The next int32 after that is 0x80. Then follows 16 bytes of random binary string (128 bits). Then, two more int32s... 0x75 and 0x01. Following that, 120 bytes of binary string (not 117?), and 4 nulls. The last bit I think is safe to assume as padding, as the parent file requires some weird byte-alignment scheme.\n </p>\n <p>\n  I have many examples of these encrypted files. The 128bit string changes, file to file. The 120byte string changes, file to file. BLFS, 0x80, 0x75, and 0x01 all remain constant.\n </p>\n <p>\n  I am a cryptography noob. The 120byte string is far too long to be a Blowfish key, which maxes out at 56 bytes. The 128bit string is a better bet (it has that nice round power-of-two number that the original implementor would have liked). I know that an algorithm like this would also require an iv, but aren't those short? In some cases, just a byte?\n </p>\n <p>\n  Is this iff file I've extracted the magic sauce, and is it the sort that I think it is? I'm not able to make sense of what I'm seeing, and I'm not sure what research I need to do next to accomplish that.\n </p>\n <p>\n  Apologies if this question isn't a fit for this SE, please comment and let me know that before closing.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "96",
    "tags": [
        "file-format",
        "decryption",
        "cryptanalysis"
    ],
    "user": "John O",
    "time": "Oct 31, 2016 at 18:47",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n My first guess, seeing the BLFS, is blowfish as well. However, as long as there are no obvious clues to the format within the file itself, it's a \"everything is possible, nothing is certain\" thing. Do you happen to have the application that reads or writes these files? Reversing that application is likely to be the only way to go any further.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John O",
            "text": "<html><body><span class=\"comment-copy\">\n I have access to two applications that read this. It was released for both Windows and Mac. The Windows version may actually have anti-debugger features, but I haven't tried. Not yet anyway.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n First thin I'd do is run the program with procmon active, check how it reads the file (does it seek to where the BLFS string is and read a fixed number of bytes before rewinding the file and reading the rest?) and check the stack when these calls happen. This alone might give you some clues about how the file \"works\", which could help in determining which parts to reverse.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n run\n <code>\n  nm\n </code>\n /\n <code>\n  strings\n </code>\n on the Mac program and see if you see any mention of blowfish (or other cipher). Many Mac developers are lazy/careless and don't strip their binaries.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ilmari Karonen",
            "text": "<html><body><span class=\"comment-copy\">\n Since you have a program that can read the files, a useful test would be to try to modify the files (e.g. by flipping a single bit in either the 16-byte or the 120-byte string) and see what happens. If you're lucky, the resulting output is only partly garbled; the way it changes (e.g. just one bit in the decoded data flipped, a whole 8-byte block garbled, everything after the flipped bit garbled, etc.) should indicate what encryption mode is used. If you're less lucky, the decryption will simply fail, which suggests the presence of some kind of a checksum or a MAC, but even that's useful info.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}