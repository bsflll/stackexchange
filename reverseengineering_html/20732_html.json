{
    "title": "What is this function doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20732/what-is-this-function-doing",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have this function, named\n  <code>\n   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm\n  </code>\n  .\n </p>\n <p>\n  And this is the relevant assembly:\n </p>\n <pre><code>mov     rdi, [rbp+var_A80]\nmov     rsi, [rbp+var_A88] \nmov     rdx, [rbp+string_length]\ncall    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm \n</code></pre>\n <p>\n  From what I've noticed by looking at the registers before and after calling the function, the address of RSI is incremented by string_length, but I still have no idea what RDI is doing.\n </p>\n <p>\n  Another weird thing is that the string length reported by the register is 0x046, but the address is incremented by 0x040.\n </p>\n <p>\n  The RDI is\n  <code>\n   00007FFEEFBFF240\n  </code>\n  before the call,\n  <code>\n   0000000100400040\n  </code>\n  after it.\n </p>\n <p>\n  EDIT:\n </p>\n <p>\n  IDA is not letting me debug the function, as it throws SIGBUS.\n </p>\n <p>\n  I am slowly reversing the function, i'll update here with progress.\n </p>\n <p>\n  RDI is compared with 0FFFFFFFFFFFFFFF0h (Why?)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "295",
    "tags": [
        "ida",
        "binary-analysis"
    ],
    "user": "G. Ramistella",
    "time": "Feb 27, 2019 at 16:05",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n This is most likely just a\n <code>\n  std::string\n </code>\n constructor. From personal experience with STL code, take educated guesses and move on. You'll turn crazy if you reverse all of it. I usually just check xrefs to some function and if it looks like it may be simply creating an\n <code>\n  std::string\n </code>\n from a C string, I treat the function as such until further context shows it doesn't.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n One more tip to make code more readable: Go to\n <code>\n  Options -> Demangled names -> Select names\n </code>\n so you don't have to look at 500 character mangled names all day.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n it is a gcc demangled name _std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init(char const*, unsigned long) as suggested turn on demangling in options and iirc ida should probably show it as standard function using flirt\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}