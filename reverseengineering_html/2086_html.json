{
    "title": "Is there any tool for decompiling raw binary files to C code for the Motorola 68000 processor series?",
    "link": "https://reverseengineering.stackexchange.com/questions/2086/is-there-any-tool-for-decompiling-raw-binary-files-to-c-code-for-the-motorola-68",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the ROM dump (.bin files) targeted for the MC68008 processor. Need to convert them into a high level source code. I have already found tools for disassmbling them into assembly code. The next step is converting them to C code. But I could not find any tool that works. I have already tried the following decompilers with no success: RecStudio, Boomerang, Decompiler 0.2.4, IDA Pro with Hex-Rays.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 4,
    "views": "25k",
    "tags": [
        "decompilation",
        "binary-analysis",
        "decompiler"
    ],
    "user": "Vishu Mahajan",
    "time": "May 23, 2013 at 9:17",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n Crosspost\n <a href=\"http://stackoverflow.com/q/16663440/422797\">\n  from SO\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky\n <a href=\"http://stackoverflow.com/questions/16663440/is-there-any-tool-for-decompiling-raw-binary-files-to-c-code-for-the-motorola-68#comment24060864_16663440\" title=\"is there any tool for decompiling raw binary files to c code for the motorola 68%23comment24060864_16663440\">\n  stackoverflow.com/questions/16663440/…\n </a>\n Since its been closed there, we can keep it open. It is on-topic here.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't think any public tool for decompilation of M68K exists. You will probably need to do it yourself (write a decompilation tool) or do manual decompilation.\n </p>\n <p>\n  I recommend you to give a try to writing a decompiler for your project if it's worth the effort: even if your decompiler is not very good, it will help you a lot in manual decompilation.\n </p>\n <p>\n  BTW, manual decompilation is very tedious; perhaps \"horrible\" is a better definition... In my opinion, it's probably the most tedious task in RE.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "joxeankoret",
            "time": "May 23, 2013 at 9:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">One of the most tedious tasks, yes.  Although it is satisfying to get it right.  The worst is, I think, VM reverse engineering.</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Maybe, but fortunately to myself, I only needed to do it once and it was an easy one.</span>",
                    "time": null
                },
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">An anonymous user posted this as an edit: \"I think it would be a good idea to write your decompiler parallel with manual decompiling the code, assuming you have no prior knowledge of M68K assembly. Not only will you understand the assembly better personally, but you'll fully understand what the decompiler is doing with each step, making it easier to improve as your knowledge improves.\"</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (reposting\n  <a href=\"https://stackoverflow.com/a/16668936/422797\">\n   answer from SO\n  </a>\n  )\n </p>\n <p>\n  MicroAPL offers a tool called\n  <a href=\"http://www.microapl.com/asm2c/index.html\" rel=\"nofollow noreferrer\">\n   Relogix\n  </a>\n  which is supposedly able to do it:\n </p>\n <p>\n  <a href=\"http://www.microapl.com/asm2c/sample.html\" rel=\"nofollow noreferrer\">\n   http://www.microapl.com/asm2c/sample.html\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's not very surprising that Hex-Rays was unable to decompile those files, seeing as Hex-Rays supports the x86 and ARM processor families (in separate editions).  If you do find a tool for decompiling code for that processor family, it will be subject to the limitations that I laid out in\n  <a href=\"https://reverseengineering.stackexchange.com/questions/311/why-are-machine-code-decompilers-less-capable-than-for-example-those-for-the-clr\">\n   this answer\n  </a>\n  .  In fact, for ROM dumps, the situation will be even more dire than what was described therein.  In short, machine code decompilation is not a point-and-click type of affair as it is for managed languages.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Latecomer answer here. I noticed that you mentioned Decompiler 0.2.4 above: I'm the author of that project. I realize a couple of years have passed since you posed this question. During that time support for the 680xx family has been much improved. The current version (0.4.5) should be able to disassemble and decompile those binaries. The menu command\n  <code>\n   File\n  </code>\n  >\n  <code>\n   Open as...\n  </code>\n  should allow you to open the a raw binary.\n </p>\n <p>\n  Decompiler is available here:\n  <a href=\"https://sourceforge.net/projects/decompiler\" rel=\"nofollow\">\n   https://sourceforge.net/projects/decompiler\n  </a>\n  (depending on whether SourceForge is back from its very prolonged outage).\n </p>\n <p>\n  If you find any bugs or have suggestions for improvements / feature requests, don't hesitate to add them to the issue tracker.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "John Källén",
            "time": "Jul 24, 2015 at 22:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}