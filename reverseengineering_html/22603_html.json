{
    "title": "Arrangement of variables on the stack - out of order?",
    "link": "https://reverseengineering.stackexchange.com/questions/22603/arrangement-of-variables-on-the-stack-out-of-order",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was practicing some reverse engineering crack-mes as part of our university curriculum, and I have a question around the arrangement of variables on the stack.\n </p>\n <p>\n  I have a very basic C++ code, like so:\n </p>\n <pre><code>void foo(int x){\n    int a=0;\n    int b=x;\n    int c=3;\n    int z=a+b+c;\n    return;\n}\n\nint main(){\n     foo(5);\n     return 0;\n}\n</code></pre>\n <p>\n  I compile the program, like so:\n </p>\n <pre><code>g++ program.cpp -o program -ggdb \n</code></pre>\n <p>\n  I run gdb with\n </p>\n <pre><code>gdb -q program\n</code></pre>\n <p>\n  And inside gdb\n </p>\n <pre><code>set disassembly-flavor intel\ndisass foo\n</code></pre>\n <p>\n  I expect the stack frame layout of\n  <code>\n   foo\n  </code>\n  to have the variable\n  <code>\n   a\n  </code>\n  on top of\n  <code>\n   b\n  </code>\n  , followed by\n  <code>\n   c\n  </code>\n  and then\n  <code>\n   z\n  </code>\n  . But that does not seem to be the case.\n </p>\n <p>\n  I have stumbled across\n  <a href=\"https://cs.stackexchange.com/a/76901\">\n   this\n  </a>\n  answer in which the explanation shows a similar layout of how variables are arranged. I'd expect that\n  <code>\n   x\n  </code>\n  would be at the highest address in the frame, right below\n  <code>\n   ebp\n  </code>\n  . But the answer clearly shows\n  <code>\n   z\n  </code>\n  being the closest to\n  <code>\n   ebp\n  </code>\n  , given that it is at\n  <code>\n   ebp - 4\n  </code>\n  but\n  <code>\n   x\n  </code>\n  is at\n  <code>\n   ebp - 12\n  </code>\n  , which seems counter intuitive to me.\n </p>\n <p>\n  I have read a bunch of books, and have seen a couple of online videos on buffer overflows where it is said that the first variable the compiler encounters is the first to be placed on the stack; and order of variable declaration can effect what variables are overwritten in case there is a buffer next to them that's overflown. Is this still a valid statement to make?\n </p>\n <p>\n  Why do I see variables arranged in such an order? Kindly help me out, I'm not sure if my facts are outdated or am I missing something fundamental.\n </p>\n <p>\n  PS: I am using Ubuntu 16.04 Desktop, with the latest version of GCC/G++\n </p>\n <p>\n  Edit 1: Adding disassembly of function\n  <code>\n   foo\n  </code>\n </p>\n <pre><code>ubuntu@Ubuntu:~$ gdb -q program \nReading symbols from program... \n(gdb) set disassembly intel \n(gdb) disass foo \nDump of assembler code for function foo(int): \n    0x0000000000001125 <+0>:    push rbp    \n    0x0000000000001126 <+1>:    mov rbp,rsp \n    0x0000000000001129 <+4>:    mov DWORD PTR [rbp-0x14],edi \n    0x000000000000112c <+7>:    mov DWORD PTR [rbp-0x10],0x0 \n    0x0000000000001133 <+14>:   mov eax,DWORD PTR [rbp-0x14]\n    0x0000000000001136 <+17>:   mov DWORD PTR [rbp-0xc],eax\n    0x0000000000001139 <+20>:   mov DWORD PTR [rbp-0x8],0x3\n    0x0000000000001140 <+27>:   mov edx,DWORD PTR [rbp-0x10]\n    0x0000000000001143 <+30>:   mov eax,DWORD PTR [rbp-0xc]\n    0x0000000000001146 <+33>:   add edx,eax \n    0x0000000000001148 <+35>:   mov eax,DWORD PTR [rbp-0x8]\n    0x000000000000114b <+38>:   add eax,edx \n    0x000000000000114d <+40>:   mov DWORD PTR [rbp-0x4],eax  \n    0x0000000000001150 <+43>:   nop \n    0x0000000000001151 <+44>:   pop rbp \n    0x0000000000001152 <+45>:   ret \nEnd of assembler dump. \n(gdb) b *foo+43 \nBreakpoint 1 at 0x1150: file program.cpp, line 6. \n(gdb) r Starting program: /home/ubuntu/program Breakpoint 1, foo (x=5) at program.cpp:6 \n6    return; \n(gdb) p &a \n$1 = (int *) 0x7fffffffdfb0 \n(gdb) p $rbp-0x10 \n$2 = (void *) 0x7fffffffdfb0 \n\n(gdb) p &b \n$3 = (int *) 0x7fffffffdfb4 \n(gdb) p $rbp-0xc \n$4 = (void *) 0x7fffffffdfb4 \n\n(gdb) p &c \n$5 = (int *) 0x7fffffffdfb8 \n(gdb) p $rbp-0x8 \n$6 = (void *) 0x7fffffffdfb8 \n\n(gdb) p &z \n$7 = (int *) 0x7fffffffdfbc \n(gdb) p $rbp-0x4 \n$8 = (void *) 0x7fffffffdfbc \n(gdb)\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "357",
    "tags": [
        "c++",
        "gdb",
        "gcc"
    ],
    "user": "user148898",
    "time": "Nov 22, 2019 at 16:43",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Please include the disassembly of the foo function\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user148898",
            "text": "<html><body><span class=\"comment-copy\">\n Added the disassembly. I use x64 machine, btw. I'd expect to see variable a to have the highest address and closest to RBP, but that is not the case apparently.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Keep in mind Your program as is when compiled with -O will become just\n </p>\n <pre><code>mov eax,0\nreturn\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/tke03.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/tke03.jpg\"/>\n  </a>\n </p>\n <p>\n  every thing out there in your Source is Dead Code and Will be eliminated\n </p>\n <p>\n  since you are compiling this in debug mode without  any optimizations the compiler provides you all those variables\n </p>\n <p>\n  i am not sure what you mean by nearer to ebp\n </p>\n <p>\n  in debugmode compiler as far as possible allocates the variables in the same order \nas it encounters  them\n </p>\n <p>\n  here is a colour coded nonoptimzed output for the same code\n </p>\n <p>\n  as you can see compiler first instruction in white color is your int a=0;  which is at rbp-4\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/rF7FZ.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/rF7FZ.jpg\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/1102049/order-of-local-variable-allocation-on-the-stack\">\n   but the std iirc does not specify any standard for allocation of variable addresses\n  </a>\n </p>\n <p>\n  quoting from standard linked in that thread\n </p>\n <blockquote>\n  <p>\n   Each parameter has automatic storage duration; its identifier is an\n  lvalue.164) The layout of the storage for parameters is unspecified.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 22, 2019 at 20:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}