{
    "title": "Reverse engineering MQTT payload in a (apparently) sophisticated smart lamp",
    "link": "https://reverseengineering.stackexchange.com/questions/32566/reverse-engineering-mqtt-payload-in-a-apparently-sophisticated-smart-lamp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Background\n </h1>\n <p>\n  I have recently bought a (quite expensive) smart lamp. It is not from a known producer, it's a relatively small company, but they seem to have implemented MQTT in a quite serious way.\n </p>\n <h1>\n  Initial analysis\n </h1>\n <p>\n  Through packet inspection, I have extracted the following relevant MQTT messages exchanged between the lamp and the server.\n </p>\n <ul>\n  <li>\n   Authentication: the password is hashed, but the username is clear: let's say it is\n   <code>\n    123456789012&randString\n   </code>\n   (yes, the username is comprised of my account number and an apparently random string)\n  </li>\n  <li>\n   MQTT broker address: let's say it is\n   <code>\n    randString.server.inchina.com\n   </code>\n   (the randString matches the one in the username)\n  </li>\n  <li>\n   Payload of lamp turn on, off, change color, change brightness, etc.\n  </li>\n  <li>\n   MQTT topic: let's say it is\n   <code>\n    /randString/123456789012/user/devices/pese/sub\n   </code>\n   (randString matches the one in the username and the 12 chars number is my account number)\n  </li>\n </ul>\n <h1>\n  First approach to the problem\n </h1>\n <p>\n  What I did is the following, in order to communicate with the lamp via MQTT:\n </p>\n <ul>\n  <li>\n   Set up my mqtt broker at\n   <code>\n    my.mqtt.broker\n   </code>\n  </li>\n  <li>\n   Added a\n   <code>\n    dnsmasq\n   </code>\n   rule on my openWRT router so that all traffic to\n   <code>\n    randString.server.inchina.com\n   </code>\n   is redirected to\n   <code>\n    my.mqtt.broker\n   </code>\n  </li>\n  <li>\n   Wrote a\n   <code>\n    mosquitto\n   </code>\n   <code>\n    auth_plugin\n   </code>\n   in C that allows clients to authenticate with\n   <code>\n    username123\n   </code>\n   only, but can use any password (yeah very safe)\n  </li>\n </ul>\n <h1>\n  Testing the set-up\n </h1>\n <p>\n  I have tested everything and, if I send (certain) payloads to the lamp, it answers (sometimes with an error message if the message contains weird values).\n </p>\n <p>\n  Now, I have tried to send the exact payload I have sniffed to turn on and off the lamp, it answers by sending its status (like RSSI etc.) but nothing happens.\n </p>\n <p>\n  Here is the payload I have sniffed when I turn on the light (username and topic are redacted, if they will be necessary I'll post a pastebin link so that I can later delete it and spread information as little as possible as it contains my username).\n </p>\n <pre><code>{\"id\":49,\"jsonrpc\":\"2.0\",\"method\":\"SetOrControlDevices\",\"params\":{\"data\":[{\"data\":{\"dps\":{\"1\":true},\"time\":{\"1\":2}},\"node_id\":17,\"sn\":33333}],\"frame_status\":0,\"from_account\":\"123456789012\",\"md5\":\"F8CC42572A96E337034CB982282C91BA\",\"rand\":\"D8SN8R6J\",\"time\":\"1702424815396\"}}\n</code></pre>\n <h1>\n  The problem\n </h1>\n <p>\n  After a quick research, I have realized that the fields\n  <code>\n   md5\n  </code>\n  and\n  <code>\n   rand\n  </code>\n  are not there for pure aesthetic purposes. They are evidence of an implementation of MQTT enhanced authentication through DIGEST-MD5. It is an authentication method that uses the MD5 hash and a challenge-response mechanism to secure communication between client and server. This method avoids transmitting passwords in plain text over the network. When a client wants access, the server sends a challenge, and the client responds with a hashed result. If the server's expected result matches the client's response, authentication succeeds, enhancing security against password exposure and replay attacks.\n </p>\n <h1>\n  The question\n </h1>\n <p>\n  Now here is my question: how can I approach (and possibly \"hack\") this novel type of MQTT authentication?\n </p>\n <h1>\n  Other options to consider\n </h1>\n <p>\n  I have considered other options such as:\n </p>\n <ul>\n  <li>\n   Reverse engineering the firmware: however, it uses a very very peculiar Chinese (not exported it seems) microchip, not a classic (still Chinese) ESP32 nor ESP8266 et similia.\n  </li>\n  <li>\n   \"Decrypting\" (is this the right word?) the hashed password: however, these people clearly know what they are doing and it is not a commonly known password. On top of that it would violate T&Cs and would probably configure some sort of crime that I don't want to commit.\n  </li>\n  <li>\n   Brute for... ehmm never mind. Not an option.\n  </li>\n  <li>\n   MITM attack? Isn't what I have already tried a MITM? Are there other ways?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "56",
    "tags": [
        "networking",
        "smart-devices"
    ],
    "user": "user3161330",
    "time": "Dec 13, 2023 at 9:52",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n Is there a companion app to control the lamp? If so that might reveal more information.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user3161330",
            "text": "<html><body><span class=\"comment-copy\">\n There is for iOS and Android. I decompiled the one for android, but I found nothing concerning MQTT. The device comes with a touch screen that controls the light via BLE and updates its firmware via WiFi. I downloaded a .bin file and a .img file when updating its firmware but I have no idea on where to start reverse engineering those.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n The firmware files can be a place to start. Run binwalk and see if it is able to extract or find anything interesting.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}