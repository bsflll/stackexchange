{
    "title": "Reversing an encoded key with a given cipher - figuring out the reverse algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/23101/reversing-an-encoded-key-with-a-given-cipher-figuring-out-the-reverse-algorith",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I have an ancient application for a company that has since gone bust and I thought I'd look at how it works; it provides a key, and requires a key given to it. Both these keys are encoded in a certain way and then parts of the encoded value are compared for equality. Firstly I'll explain the encoding process as I have remade it in javascript\n </p>\n <p>\n  This appears to be a caesar cipher in some shape or form and I'm pretty sure it equates to the formula:\n  <code>\n   C(x) = (P(b - a - x + 284) mod 26) + 48\n  </code>\n  where\n  \n\n  x = character number\n  \n\n  b = current characters index in alphabet\n  \n\n  a = previous letters index in alphabet\n </p>\n <pre><code>const alphabet = `SDHACENOIFKXQLBMPJTZURWVGY`\n\nfunction encodeString(s) {\n    var result = s.charAt(0),\n        lastLetterIdx = alphabet.indexOf(s.charAt(0)) \n\n    for(let i = 0; i < s.length - 1; i++) {\n        let thisLetterIdx = alphabet.indexOf(s.charAt(i + 1)) \n        let cypherNum = thisLetterIdx - lastLetterIdx - i\n        cypherNum += 284\n        let modNum = cypherNum % 26\n        let encChar = String.fromCharCode(modNum + 48)\n\n        result += encChar\n\n        lastLetterIdx = thisLetterIdx\n    }\n\n    return result\n}\n</code></pre>\n <p>\n  A key provided by the software is\n  \n\n  <code>\n   ALVMGRCTQQEYMNAHDANKPGKPO\n  </code>\n  \n\n  which gets encoded to\n  \n\n  <code>\n   A87>4A26;@8833898:::;<?8B\n  </code>\n </p>\n <p>\n  The code is then checksumed by skipping the first character and adding the ascii values up, so in this case that number is 1378, mod 25 = 3 and the alphabet character at position 3 (0 indexed) is\n  <code>\n   A\n  </code>\n  which matches the first character of the key.\n </p>\n <p>\n  For encoding step 2 the software takes characters 1-12 (87>4A26;@883) and encodes it into a number via the following:\n </p>\n <pre><code>function encodedStringToNumber(str) {\n    var number = 0,\n        letterMulti = 1\n    for(let i = str.length; i > 0; i--) {\n        if(i < str.length)\n            letterMulti = letterMulti * 19\n\n        let letter = str.charCodeAt(i-1)\n        letter -= 48\n        letter *= letterMulti\n\n        number += letter\n    }\n    return number\n}\n</code></pre>\n <p>\n  It then converts the number to a string and pads left with\n  <code>\n   0\n  </code>\n  to ensure its 15 characters long, after doing that with both half's it string concats the numbers to get a result of\n  \n\n  <code>\n   979440403325666401568800000018\n  </code>\n </p>\n <p>\n  If we do the same thing with a random test key I made of\n  <code>\n   VABCDEFGHIJKLMNOPQRSTUVWXYZABK\n  </code>\n  \n\n  we get an encrypted key of\n  \n\n  <code>\n   V48<BHG7EFH7@>2;B4@;G661@>C88B\n  </code>\n  \n\n  that gets checksumd as before and then gets converted to a string with 11 characters from index 1, 11 characters from index 12 and 7 characters from index 23, so:\n </p>\n <pre><code>48<BHG7EFH7\n@>2;B4@;G66\n1@>C88B\n</code></pre>\n <p>\n  We convert them to numbers then ensure string lengths of 14, 14 and 7 by padding the left with\n  <code>\n   0\n  </code>\n  again. So a result of\n  \n\n  <code>\n   2732684617734210265934650819588621338\n  </code>\n </p>\n <p>\n  We now split this number and the number provided in the software down to some key elements and compare the values.\n </p>\n <p>\n  Lets say key A is the software provided key of\n  <code>\n   979440403325666401568800000018\n  </code>\n  and key B is the key I'm randomly using of\n  <code>\n   2732684617734210265934650819588621338\n  </code>\n </p>\n <p>\n  From key A take characters (indexes are 1 based here):\n </p>\n <pre><code>3-4   (94)\n28-29 (01)\n6-7   (04)\n8-9   (03)\n10-15 (325666)\n5     (4)\n17-22 (015688)\n</code></pre>\n <p>\n  From key B take:\n </p>\n <pre><code>3-4   (32)\n1-2   (27)\n29-30 (58)\n15-16 (10)\n31-36 (862133)\n28    (9)\n17-22 (265934)\n</code></pre>\n <p>\n  Those values need to be the same and as an added check key B 6-8 needs to be \"999\" (i think this is an install flag and 000 is an uninstall flag)\n </p>\n <p>\n  So with the key given by application I know I need to make a key that encrypts to the following number (where X can be anything):\n  \n\n  <code>\n   0194x999xxxxxx03015688xxxxx404325666x\n  </code>\n </p>\n <p>\n  This number needs to satisfy the comparisons, have the 999 in the correct place and when encoded as letters needs to validate the checksum mentioned earlier along with each letter of the encoded value being >= '0', by that I mean the ascii value is at or above 48.\n </p>\n <p>\n  The problem I have is given the way it encrypts the key I can't for the life of me work out how they could make a program which does the reverse, the first step seems easy if I knew how to do modular arithmetic, but converting a number to letters is straight up beyond me.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "255",
    "tags": [
        "decryption"
    ],
    "user": "Julian",
    "time": "Jan 26, 2020 at 12:04",
    "comments": [
        {
            "user": "John Greene",
            "text": "<html><body><span class=\"comment-copy\">\n Make your own rainbow table and hope you hit something.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Julian",
            "text": "<html><body><span class=\"comment-copy\">\n @JohnGreene I actually tried that approach but its surprisingly not a fast approach. but I'm more curious how a generator would work\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "<html><body><span class=\"comment-copy\">\n encodedStringToNumber(\"@>2;B4@;G66\") = 102659346508195, which is 15 characters long, not 14. Am I missing something?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "<html><body><span class=\"comment-copy\">\n Also, there's a missing index in \"31-35 (862133)\" and you should probably explicitly state that the indexes are 1-based.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "<html><body><span class=\"comment-copy\">\n You might be able to use Z3 in order to find an appropriate input. Basically you need to translate your constraints using the Z3 syntax. You can search for \"Z3 KeyGen / CrackMe\" for some examples. I gave it a shot but I'm not sure how to express some constraints, you can find my attempt here if it helps:\n <a href=\"https://pastebin.com/hdbhTkRy\" rel=\"nofollow noreferrer\">\n  pastebin.com/hdbhTkRy\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm write keygen random:\n  <code>\n   keygen('ALVMGRCTQQEYMNAHDANKPGKPO')\n  </code>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/wSLNc.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"run\" src=\"https://i.sstatic.net/wSLNc.png\"/>\n  </a>\n </p>\n <pre><code>GSFLOWZJOEWPOQFXFHVASFTPNBNTEJ      ->      G060?9@@7>684A8<712<2=<0A8A::8\n\n060?9@@7>68           4A8<712<2=<            0A8A::8\n01949999431597        030156882999840        43256662 (length 14 + 15 + 8 = 37)\n</code></pre>\n <p>\n  <strong>\n   0194999943159703015688299984043256662\n  </strong>\n  this satisfy with\n  <strong>\n   0194x999xxxxxx03015688xxxxx404325666x\n  </strong>\n  :D\n </p>\n <pre><code>// example\nkeygen('ALVMGRCTQQEYMNAHDANKPGKPO')\n// source\nfunction keygen(code) {\n let indexes = [\n  [3, 4, 28, 29,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  5, 17, 18, 19, 20, 21, 22],\n  [3, 4,  1,  2, 29, 30, 15, 16, 31, 32, 33, 34, 35, 36, 28, 17, 18, 19, 20, 21, 22]\n ]\n code = encodeString(code)\n let num = encodeNumber(code.substr(1, 12)).toString().padStart(15,0)+encodeNumber(code.substr(13, 12)).toString().padStart(15,0)\n let key = [...Array(37)].map((e,i)=>[5,6,7].indexOf(i) >= 0 ? '9' : Math.floor(Math.random()*10).toString())\n indexes[0].forEach((e,i)=>key[indexes[1][i]-1]=num[e-1]), key = key.join('')\n\n let result = decodeNumber(key.substr(0, 14)).padStart(11,0)+decodeNumber(key.substr(14, 15)).padStart(11,0)+decodeNumber(key.substr(29, 8)).padStart(7,0)\n return decodeString(sum(result,0)+result)\n}\n\nvar alphabet = `SDHACENOIFKXQLBMPJTZURWVGY`\nfunction encodeString(s) {\n let result = s.charAt(0), idx = alphabet.indexOf(s.charAt(0))\n for (let i=0; i<s.length-1; i++) {\n  result += String.fromCharCode((alphabet.indexOf(s.charAt(i + 1))-idx-i+284)%26+48) \n  idx = alphabet.indexOf(s.charAt(i + 1))\n }\n return result\n}\nfunction decodeString(s) {\n let result = s.charAt(0), idx = alphabet.indexOf(s.charAt(0))\n for (let i=0; i<s.length-1; i++) {\n  let num = (s.charCodeAt(i + 1) - 48)\n  idx = [...alphabet].findIndex((x,y) => (y-idx-i+284)%26 == num)\n  result += alphabet[idx]\n }\n return result\n}\nfunction encodeNumber(s) {\n let n = 0, l = 1\n for (let i=s.length; i>0; i--) {\n  let c = (s.charCodeAt(i-1)-48)*l\n  n += c, l *= 19\n }\n return n\n}\nfunction decodeNumber(n) {\n let c = 0, s = []\n for (let i=0; c != n; i++) {\n  let v = (n % 19**(i+1))\n  s.push((v-c)/19**i+48)\n  c = v\n }\n return String.fromCharCode.apply(null, s.reverse())\n}\nfunction sum(s, idx = 1) {\n let cs = 0\n for (; idx < s.length; idx++) cs+=s.charCodeAt(idx)\n return alphabet[cs%25]\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "xax",
            "time": "Jan 27, 2020 at 8:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Julian",
                    "text": "<span class=\"comment-copy\">Oh my! That's an ingenious way to do it. I was trying out the number to string conversion and got something working but I was doing trial and error on the string conversion, this really has opened my eyes lol. It works btw! gonna be debugging this for a while</span>",
                    "time": null
                }
            ]
        }
    ]
}