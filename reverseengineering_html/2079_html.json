{
    "title": "Difference between DllMain and DllEntryPoint",
    "link": "https://reverseengineering.stackexchange.com/questions/2079/difference-between-dllmain-and-dllentrypoint",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a piece a malware to analyze. It is a DLL according to the\n  <code>\n   IMAGE_FILE_HEADER->Characteristics\n  </code>\n  . I was trying to do some dynamic analysis on it. I have done the following:\n </p>\n <ul>\n  <li>\n   Run it with\n   <code>\n    rundll32.exe\n   </code>\n   , by calling its exports. Nothing.\n  </li>\n  <li>\n   Changed the binary's characteristics to an exe. Nothing.\n  </li>\n </ul>\n <p>\n  So I moved on to static analysis, Loaded on IDA and OllyDbg.\nWhich brings me to my question. :)\n </p>\n <p>\n  <strong>\n   What is the main difference between\n   <code>\n    DllMain\n   </code>\n   and\n   <code>\n    DllEntryPoint\n   </code>\n   ?\n  </strong>\n </p>\n <p>\n  <strong>\n   When/How does one get call vs the other?\n  </strong>\n </p>\n <p>\n  <strong>\n   [EDIT]\n  </strong>\n </p>\n <p>\n  So after reading MSDN and a couple of books on MS programming. I understand\n  <code>\n   DllEntryPoint\n  </code>\n  .\n  <code>\n   DllEntryPoint\n  </code>\n  is your\n  <code>\n   DllMain\n  </code>\n  when writing your code. Right?!\nSo then why have\n  <code>\n   DllMain\n  </code>\n  . In other words, when opening the binary in IDA you have\n  <code>\n   DllEntryPoint\n  </code>\n  and\n  <code>\n   DllMain\n  </code>\n  .\n </p>\n <p>\n  I know it is probably something easy but I am visual person, so obviously not seeing something here.\n </p>\n</div>\n</body></html>",
    "votes": "16",
    "answers": 3,
    "views": "23k",
    "tags": [
        "windows",
        "malware",
        "dll"
    ],
    "user": "k0ng0",
    "time": "Jun 22, 2020 at 11:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Both,\n  <code>\n   DllMain\n  </code>\n  and\n  <code>\n   DllEntryPoint\n  </code>\n  are merely symbolic names of the same\n  <em>\n   concept\n  </em>\n  . They even share the same prototype. But they aren't the same:\n </p>\n <blockquote>\n  <p>\n   The function must be defined with the\n   <code>\n    __stdcall\n   </code>\n   calling convention.\n  The parameters and return value must be defined as documented in the\n  Win32 API for\n   <code>\n    WinMain\n   </code>\n   (for an .exe file) or\n   <code>\n    DllEntryPoint\n   </code>\n   (for a DLL).\n  It is recommended that you let the linker set the entry point so that\n  the C run-time library is initialized correctly, and C++ constructors\n  for static objects are executed.\n  </p>\n  <p>\n   (MSDN Library from Visual Studio 2005)\n  </p>\n </blockquote>\n <p>\n  The entry point in a DLL is the same as in an EXE\n  <em>\n   technically\n  </em>\n  , but with different semantics and prototype (EXE vs. DLL). Both are to be found at\n  <code>\n   IMAGE_OPTIONAL_HEADER::AddressOfEntryPoint\n  </code>\n  . However, in a DLL this entry point is optional (although usually supplied by the runtime library).\n  <strong>\n   The entry point isn't explicitly exported through the export directory\n  </strong>\n  (although IDA for example shows them under \"Exports\"). Most of the time there is no public name attached to this entry point, which is why the documentation refers to it as\n  <code>\n   DllEntryPoint\n  </code>\n  . If you find this name in the export directory of the PE file it's probably not the actual entry point from the PE optional header (this would have to be confirmed by looking at the exact sample, though). The last point, btw, holds for\n  <code>\n   DllMain\n  </code>\n  as well.\n </p>\n <p>\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583%28v=vs.85%29.aspx\" rel=\"noreferrer\">\n   <code>\n    DllMain\n   </code>\n  </a>\n  is the name the\n  <strong>\n   runtime library\n  </strong>\n  (ATL, MFC ...) implementation expects you to supply. It's a name the linker will see\n  <em>\n   referenced\n  </em>\n  from the default implementation of\n  <code>\n   DllEntryPoint\n  </code>\n  which is named\n  <code>\n   _DllMainCRTStartup\n  </code>\n  in the runtime implementations. See the CRT source files\n  <code>\n   crtdll.c\n  </code>\n  and\n  <code>\n   dllcrt0.c\n  </code>\n  if you have Visual Studio.\n </p>\n <p>\n  This means that\n  <code>\n   DllEntryPoint\n  </code>\n  <strong>\n   calls\n  </strong>\n  <code>\n   DllMain\n  </code>\n  - assuming default behavior. The runtime-implemented entry point function (\n  <code>\n   _DllMainCRTStartup\n  </code>\n  ) does other initialization.\n </p>\n <p>\n  You can override this name by using the\n  <a href=\"http://msdn.microsoft.com/en-us/library/f9t8842e%28v=vs.80%29.aspx\" rel=\"noreferrer\">\n   <code>\n    /entry\n   </code>\n   command line switch\n  </a>\n  to the linker. Again, it's just a name and you can choose whatever you fancy. The limitations (not being able to load another DLL using\n  <code>\n   LoadLibrary\n  </code>\n  from within the entry point and so on) are independent of the name you give the function.\n </p>\n <hr/>\n <p>\n  Side-note: in an EXE the TLS callbacks run before the entry point code, which can be dangerous in malware research.\n  <s>\n   I don't think this is relevant to DLLs, though, but if someone has more knowledge in that area I'm interested to see pointers to material.\n  </s>\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/users/1323/peter-ferrie\">\n   Peter Ferrie\n  </a>\n  , a distinguished reverser and malware analyst, pointed out in a comment to this answer:\n </p>\n <blockquote>\n  <p>\n   TLS callbacks always run in statically-linked DLLs, and since Vista,\n  they also run in dynamically-linked DLLs! For more information, see my\n   <a href=\"http://pferrie.host22.com/papers/com2008.htm\" rel=\"noreferrer\">\n    TLS presentations\n   </a>\n   , and of\n  course my\n   <a href=\"http://pferrie.host22.com/papers/unp2011.htm\" rel=\"noreferrer\">\n    \"Ultimate\" Anti-Debugging Reference\n   </a>\n  </p>\n </blockquote>\n <p>\n  Thanks Peter.\n </p>\n</div>\n</body></html>",
            "votes": "14",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">TLS callbacks always run in statically-linked DLLs, and since Vista, they also run in dynamically-linked DLLs!  For more information, see my TLS presentations (<a href=\"http://pferrie.host22.com/papers/com2008.htm\" rel=\"nofollow noreferrer\">pferrie.host22.com/papers/com2008.htm</a>), and of course my \"Ultimate\" Anti-Debugging Reference (<a href=\"http://pferrie.host22.com/papers/unp2011.htm\" rel=\"nofollow noreferrer\">pferrie.host22.com/papers/unp2011.htm</a>).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   <code>\n    DllEntryPoint\n   </code>\n  </strong>\n  - is the address from which the execution will start (but does not have to if we are speaking about malware) after the loader had finished the loading process of the PE image. This address is specified inside the PE optional header. Please look\n  <a href=\"http://www.csn.ul.ie/~caolan/publink/winresdump/winresdump/doc/pefile.html\" rel=\"noreferrer\">\n   here\n  </a>\n  . The other name for\n  <code>\n   DllEntryPoint\n  </code>\n  is\n  <code>\n   AddressOfEntryPoint\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   <code>\n    DllMain\n   </code>\n  </strong>\n  - is the default function name that is given during DLL development and it is how the compiler knows that it should take the address of this function and put it inside PE\n  <code>\n   AddressOfEntryPoint\n  </code>\n  field. The developer can change this name to whatever he wants but he should instruct the compiler then, what function to use in that case. In addition, if the library is just a bunch of functions (let's say not an application ), then the compiler will provide default implementation of the\n  <code>\n   DllMain\n  </code>\n  function. Please look further\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583%28v=vs.85%29.aspx\" rel=\"noreferrer\">\n   here\n  </a>\n  in remarks.\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "0xC0000022L",
            "time": "May 23, 2013 at 12:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">To what <b>MMavipc</b> has written, I'd add that DllMain is needed to prepare the environment or react differently to various events (Thread creation, loading dll into process, process termination) before the actual dll logic can be called. The call to the actual Dll logic sometimes can be seen in IDA as <i>StartAddress</i>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When loading time is involved the entry point is DllMain.\n  \n\n  (Ex. COM in-process server DLL).\n  \n\n  When running time is involved the entry point is DllEntryPoint.\n  \n\n  (Ex. LoadLibrary get called).\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "GoUkraineGo",
            "time": "Jul 5, 2018 at 8:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}