{
    "title": "Executing an IDAPython script with arguments within IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/13286/executing-an-idapython-script-with-arguments-within-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an IDAPython script x.py which takes some arguments, which prevents me from simply using\n  <kbd>\n   alt\n  </kbd>\n  +\n  <kbd>\n   F7\n  </kbd>\n  and selecting my script.\n </p>\n <p>\n  How can I execute this script within IDA Pro and specify the arguments for the script?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "9k",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin"
    ],
    "user": "Fee",
    "time": "Sep 12, 2016 at 8:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Naturally, the best way would be editing the script and have it ask the user for those parameters. IDA has quite a few ways of doing that. You could use one or several of the many\n  <code>\n   idc.Ask*\n  </code>\n  functions. Such as:\n  <code>\n   AskYN\n  </code>\n  ,\n  <code>\n   AskLong\n  </code>\n  ,\n  <code>\n   AskSelector\n  </code>\n  ,\n  <code>\n   AskFunction\n  </code>\n  ,\n  <code>\n   AskFile\n  </code>\n  and others. Sometimes when multiple input parameters are needd, it becomes inconvenient to ask for many speciif values, you could then create a full blown dialog instead.\n </p>\n <p>\n  You could create a new process using\n  <code>\n   popen\n  </code>\n  or something similar, but I can't say I recommend doing that.\n </p>\n <p>\n  If depends on how the python script you're trying to execute is implemented, but you're probably better off trying to include/import it in one pythonic way or another.\n </p>\n <h2>\n  Importing a protected module\n </h2>\n <p>\n  If the script is properly written, it probably wraps any execution functionality with an\n  <code>\n   if __name__ == \"__main__\"\n  </code>\n  clause, protecting such cases as executing when imported. If that's the case, simply import it with an\n  <code>\n   import modulename\n  </code>\n  and then call its main/whatever.\n </p>\n <h2>\n  Importing a\n  <code>\n   sys.argv\n  </code>\n  module\n </h2>\n <p>\n  If the module directly uses\n  <code>\n   sys.argv\n  </code>\n  and you cannot/would not prevent it from doing so, you can mock your\n  <code>\n   sys.argv\n  </code>\n  before importing the module. Simply doing something like the following should work:\n </p>\n <p>\n  <code>\n   sys.argv = ['./script.py', 'command', 'parameter1', 'parameter2', 'optional']\nimport script\n  </code>\n </p>\n <h2>\n  Calling\n  <code>\n   execfile\n  </code>\n  of the file\n </h2>\n <p>\n  If neither of those approaches works for you, you can always directly call\n  <code>\n   execfile\n  </code>\n  and completely control the context in which the python script is executed. You should read the documentation of\n  <code>\n   execfile\n  </code>\n  and\n  <code>\n   eval\n  </code>\n  <a href=\"https://docs.python.org/2/library/functions.html#execfile\" rel=\"nofollow\">\n   here\n  </a>\n  and\n  <a href=\"https://docs.python.org/2/library/functions.html#eval\" rel=\"nofollow\">\n   here\n  </a>\n  , respectively.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Sep 12, 2016 at 8:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}