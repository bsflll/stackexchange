{
    "title": "Stack buffer size is different between C and ASM",
    "link": "https://reverseengineering.stackexchange.com/questions/17075/stack-buffer-size-is-different-between-c-and-asm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Given that function:\n </p>\n <pre><code>void vuln( char * arg ) {\n    char buf[256];\n    strcpy(buf, arg);\n}\n</code></pre>\n <p>\n  Disassembled in:\n </p>\n <pre><code>       0x0804842b      55             push ebp                                                                                                                                                                                          \n       0x0804842c      89e5           mov ebp, esp                                                                                                                                                                                      \n       0x0804842e      81ec08010000   sub esp, 0x108                                                                                                                                                                                    \n       0x08048434      83ec08         sub esp, 8                                                                                                                                                                                        \n       0x08048437      ff7508         push dword [arg_8h]                                                                                            \n       0x0804843a      8d85f8feffff   lea eax, ebp - 0x108                                                                                                                                                                              \n       0x08048440      50             push eax                                                                                                           \n       0x08048441      e8bafeffff     call sym.imp.strcpy                                                                                             \n       0x08048446      83c410         add esp, 0x10                                                                                                                                                                                     \n       0x08048449      c9             leave                                                                                                                                                                                             \n       0x0804844a      c3             ret             \n</code></pre>\n <p>\n  It overflows when the argument is 264 = 0x108 chars and I was expecting 256 bytes. Why compiler adds 8 bytes with\n  <code>\n   sub esp,8\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly"
    ],
    "user": "Kartone",
    "time": "Dec 29, 2017 at 18:27",
    "comments": [
        {
            "user": "Trey",
            "text": "<html><body><span class=\"comment-copy\">\n It's probably because of\n <b>\n  strcpy\n </b>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Kartone",
            "text": "<html><body><span class=\"comment-copy\">\n Why ? What ? How ? :-)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ul>\n  <li>\n   <p>\n    According to the\n    <a href=\"https://refspecs.linuxfoundation.org/elf/abi386-4.pdf\" rel=\"nofollow noreferrer\">\n     SYS V i386 ABI\n    </a>\n    the stack must be at minimum operating system word aligned prior to execution of the\n    <a href=\"https://c9x.me/x86/html/file_module_x86_id_26.html\" rel=\"nofollow noreferrer\">\n     <code>\n      CALL\n     </code>\n    </a>\n    instruction.\n   </p>\n   <p>\n    Excerpt from Peter Cordes' answer to\n    <a href=\"https://stackoverflow.com/questions/40307193/responsiblity-of-stack-alignment-in-x86-assembly\">\n     Responsiblity of stack alignment in x86 assembly\n    </a>\n    :\n   </p>\n   <blockquote>\n    <p>\n     The i386 System V ABI has guaranteed/required for years that ESP+4 is 16B-aligned on entry to a function. (i.e. ESP must be 16B-aligned before a CALL instruction, so args on the stack start at a 16B boundary. This is the same as for x86-64 System V.)\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <p>\n    Additionally, GCC aligns the stack to a 16-byte boundary by defualt. To accomplish this, GCC will allocate additional space in an area within a function's stack frame that is considered unrestricted by the ABI:\n   </p>\n   <blockquote>\n    <p>\n     Other areas depend on the compiler and the code being compiled. The standard calling sequence does not define a maximum stack frame size, nor does it restrict how a language system uses the ‘‘unspecified’’ area of the standard stack frame.\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <p>\n    in the ABI the function return address is considered to be part of the current stack frame:\n   </p>\n  </li>\n </ul>\n <p>\n  <a href=\"https://i.sstatic.net/I0vwk.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"i386 stack frame layout\" src=\"https://i.sstatic.net/I0vwk.png\"/>\n  </a>\n </p>\n <p>\n  This is enough information to allow us to determine why the compiler generates code that creates unused space on the stack. Let us examine the code, focusing on instructions that result in stack frame memory allocation:\n </p>\n <pre><code>   0x0804842b      55             push ebp                     ( 1 )                                                                                                                                                                     \n   0x0804842c      89e5           mov ebp, esp                                                                                                                                                                                      \n   0x0804842e      81ec08010000   sub esp, 0x108               ( 2 )                                                                                                                                                                     \n   0x08048434      83ec08         sub esp, 8                   ( 3 )                                                                                                                                                                    \n   0x08048437      ff7508         push dword [arg_8h]          ( 4 )                                                                                  \n   0x0804843a      8d85f8feffff   lea eax, ebp - 0x108                                                                                                                                                                              \n   0x08048440      50             push eax                     ( 5 )                                                                                      \n   0x08048441      e8bafeffff     call sym.imp.strcpy          ( 6 )                                                                                   \n   0x08048446      83c410         add esp, 0x10                                                                                                                                                                                     \n   0x08048449      c9             leave                                                                                                                                                                                             \n   0x0804844a      c3             ret             \n</code></pre>\n <hr/>\n <ol>\n  <li>\n   <p>\n    We now know that the return address is considered to be part of the current stack frame. i386 machines have 32-bit architecture, so the return address takes up 4 bytes of space and execution of the instruction\n    <code>\n     push ebp\n    </code>\n    will decrement the stack pointer by 4 bytes.\n   </p>\n   <ul>\n    <li>\n     4 + 4 = 8, so at this point the stack frame is 8 bytes in size.\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    As you noted, this creates 264 bytes of space.\n   </p>\n   <ul>\n    <li>\n     8 +  264 = 272\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    <code>\n     sub esp, 8\n    </code>\n    - the specific instruction in question. Creates 8 additional bytes of space on the stack frame.\n   </p>\n   <ul>\n    <li>\n     272 + 8 = 280\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    As before,\n    <code>\n     push\n    </code>\n    has the effect of adding 4 bytes of space.\n   </p>\n   <ul>\n    <li>\n     280 + 4 = 284\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    Another\n    <code>\n     push\n    </code>\n    .\n   </p>\n   <ul>\n    <li>\n     284 + 4 = 288\n    </li>\n   </ul>\n  </li>\n  <li>\n   <p>\n    Now it is time for execution of the\n    <code>\n     call\n    </code>\n    instruction. At this point the stack frame is 288 bytes in size. Let us check for alignment to a 16-byte boundary:\n   </p>\n   <ul>\n    <li>\n     288 % 16 = 0 (thanks RadLexus). The stack frame is correctly aligned.\n    </li>\n   </ul>\n  </li>\n </ol>\n <p>\n  <hr/>\n  Conclusion:\n </p>\n <p>\n  The compiler uses\n  <code>\n   sub esp, 8\n  </code>\n  to maintain stack frame alignment to a 16-byte boundary.\n </p>\n <p>\n  See also:\n </p>\n <ul>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/4175281/what-does-it-mean-to-align-the-stack\">\n    https://stackoverflow.com/questions/4175281/what-does-it-mean-to-align-the-stack\n   </a>\n  </li>\n  <li>\n   <a href=\"https://software.intel.com/en-us/forums/intel-isa-extensions/topic/291241\" rel=\"nofollow noreferrer\">\n    https://software.intel.com/en-us/forums/intel-isa-extensions/topic/291241\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "5",
            "user": "julian",
            "time": "Dec 29, 2017 at 23:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@usr2564301 yes, good point. I will change it. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">Superb answer @SYS_V. Thank you. Can you explain me why it reserve 0x108 (264) bytes for a char buf[256] and not 0x100 ?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@Kartone The best I can do is guess: if 264 bytes are allocated for the buffer, we have 8 + 264 + 8 + 4 + 4 = 288, where 288 % 16 = 0. However, if 256 bytes are allocated for the buffer, with the given code we instead have 8 + 256 + 8 + 4 + 4 = 280, where 280 % 16 = 8, which means the stack is not correctly aligned to a 16-byte boundary.  To correct for this, the compiler would have to generate additional instructions to align the stack.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@Kartone no problem, you are welcome</span>",
                    "time": null
                }
            ]
        }
    ]
}