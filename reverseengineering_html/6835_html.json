{
    "title": "Setting a breakpoint at system call",
    "link": "https://reverseengineering.stackexchange.com/questions/6835/setting-a-breakpoint-at-system-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to modify my teamspeak server (linux), I'm particulary interested in the connection with clients (UDP), so I figured I need to set a breakpoint at the linux socket function to start reversing. How can I achieve this?\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 1,
    "views": "20k",
    "tags": [
        "linux",
        "operating-systems"
    ],
    "user": "Hugo Kiiski",
    "time": "Dec 16, 2014 at 20:18",
    "comments": [
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<html><body><span class=\"comment-copy\">\n For write:\n <a href=\"http://stackoverflow.com/questions/8235436/how-can-i-monitor-whats-being-put-into-the-standard-out-buffer-and-break-when-a\" title=\"how can i monitor whats being put into the standard out buffer and break when a\">\n  stackoverflow.com/questions/8235436/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In\n  <code>\n   gdb\n  </code>\n  you can set a syscall breakpoint with\n  <code>\n   catch syscall\n  </code>\n  .\n </p>\n <p>\n  If this is in 32-bit x86 (IA-32), check the syscall number in\n  <code>\n   your_linux_source_dir/usr/include/asm/unistd_32.h\n  </code>\n  . There is no syscall called\n  <code>\n   socket\n  </code>\n  in 32-bit x86, do you mean\n  <code>\n   socketcall\n  </code>\n  ? Its number is 102.\n </p>\n <p>\n  If this is in x86-64 (AMD64), check the syscall number in\n  <code>\n   your_linux_kernel_source_dir/usr/include/asm/unistd_64.h\n  </code>\n  . The syscall called\n  <code>\n   socket\n  </code>\n  is 41.\n </p>\n <p>\n  Then run the executable in\n  <code>\n   gdb\n  </code>\n  :\n </p>\n <pre><code>$ gdb myexecutable\n</code></pre>\n <p>\n  And set the syscall breakpoint (41 is the\n  <code>\n   socket\n  </code>\n  syscall number in x86-64, change to appropriate syscall number for you):\n </p>\n <pre><code>(gdb) catch syscall 41\n</code></pre>\n <p>\n  And then run the program:\n </p>\n <pre><code>(gdb) r\n</code></pre>\n <p>\n  Using the name of syscall (such as\n  <code>\n   socket\n  </code>\n  ) instead of the number (eg.\n  <code>\n   41\n  </code>\n  ) may also work, depending on your configuration.\n </p>\n</div>\n</body></html>",
            "votes": "15",
            "user": "nrz",
            "time": "Jan 16, 2015 at 18:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Celelibi",
                    "text": "<span class=\"comment-copy\">I have no idea when this was added. But now you can use the syscall name instead of its number. So, just <code>catch syscall socket</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}