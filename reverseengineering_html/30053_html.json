{
    "title": "C++, Windows UI Automation and DaVinci Resolve",
    "link": "https://reverseengineering.stackexchange.com/questions/30053/c-windows-ui-automation-and-davinci-resolve",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been researching this topic for a while, but the information is extremely limited and very confusing.\n </p>\n <p>\n  DaVinci Resolve is an editing and color grading software, its tools are so many and so specialized that external hardware has been created to speed up the workflow.\n </p>\n <p>\n  Now, such tools are crazy expensive, so I wanted to create my own version with a microcontroller. The microcontroller programming isn't the hard part, making it interact with the UI is.\n </p>\n <p>\n  I have tried Cheat Engine to check the parameters in memory, and that worked, however I can write a bit of C++ but definitely not assembly, also manually changing values in a memory address during execution probably isn't the right way of doing it, so I was looking for another solution: UI automation.\n </p>\n <p>\n  It's crazy how there is no API documentation for Microsoft's UIA, and if there is, they've done a great job at hiding it. I just don't know how to start writing code for it.\n </p>\n <p>\n  Also, the \"Inspector\" tool in Windows shows that the parameters in the UI have no value, but rather the value is written in the name of the parameter.\n </p>\n <p>\n  I know that DaVinci Resolve is written using QT5, I tried looking for documentation about it, but it took me to 3rd party paid software and that's not what I need.\n </p>\n <p>\n  I have the most experience with Python, and I did try pywinauto. I managed to attach to the process and print the entire UI tree. The problem is that 99% of the elements show up as \"Custom\" elements without name, value, or any kind of control.\n </p>\n <p>\n  With all of this considered, I would like some help on how to approach programmatically control a 3rd party software.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "586",
    "tags": [
        "c++",
        "python"
    ],
    "user": "Cinematic Galaxy Ita",
    "time": "Jun 2, 2023 at 19:18",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://reverseengineering.stackexchange.com/questions/27522/reverse-engineer-sticky-notes-to-allow-external-script-to-open-new-notes\">\n  take a look at this answer which dabbles with uiautomation in python\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Qt does UI rendering on its own instead of relying on standard Win32 APIs, so accessibility APIs rarely work with Qt apps unless they implemented necessary interfaces. You may have better luck hooking Qt APIs inside the app. This could be a start:\n </p>\n <p>\n  <a href=\"https://github.com/robertknight/Qt-Inspector\" rel=\"nofollow noreferrer\">\n   https://github.com/robertknight/Qt-Inspector\n  </a>\n </p>\n <p>\n  See also\n  <a href=\"https://ntcore.com/files/qtrev.htm\" rel=\"nofollow noreferrer\">\n   this article\n  </a>\n  , although itâ€™s likely outdated.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 19, 2022 at 10:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For Windows environments, you can easily use WinAppDriver to manipulate UI elements. It relies on the mentioned paths, and heavily on XPATHs format.\n </p>\n <p>\n  WinAppDriver works like a server, making the manipulation of UI elements (click, write, read, select, etc) easily by JSON messages. Several thirth party programs help doing that creating JSON messages with requests for the kind of manipulation and simplifing the use of the server.\n </p>\n <p>\n  Client application that wants to manipulate the UI connect via socket to the WinAppDriver port and send command, as mentioned, to click, move mouse, type like keyboard. Example client applications:\n </p>\n <ul>\n  <li>\n   WinUIRecorder, used to identify buttons and dialog boxes path\n  </li>\n  <li>\n   Appium to automate tasks in a more friendly UI\n  </li>\n  <li>\n   RobotFramework together with WADLibrary to easily write natural language UI manipulation scripts.\n  </li>\n </ul>\n <p>\n  All these work on top of the socket as clients. After you learn how the socket communication is estabilished and requests are made, you can easily create your own requests in the language of your choice. The requests are all in JSON, easily to be understand by anyone with basic programmming knowledge.\n </p>\n <p>\n  WinAppDriver works fine on Windows 10 or above. I already ised on UWP apps, WPF, and other applications. This kind of UI manipulation in client/server, with UI elements mapped via XPATHs are available on other platforms too, like Android and Apple, to help automate tasks and testing.\n </p>\n <p>\n  Microsoft also release in 2021 or 2022 a tool to help automate tasks, based on the same infrastructure, but I can recall the name of it.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "HFK",
            "time": "Mar 24, 2022 at 13:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}