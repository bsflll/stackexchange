{
    "title": "Why is there a difference in offset between ida and gdb?",
    "link": "https://reverseengineering.stackexchange.com/questions/15066/why-is-there-a-difference-in-offset-between-ida-and-gdb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A PIE binary, when loaded in IDA shows an offset (\n  <code>\n   0x202010\n  </code>\n  ) different from gdb (\n  <code>\n   0x2013a1\n  </code>\n  ) for instruction located at\n  <code>\n   0x555555554c68\n  </code>\n  in (gdb) and\n  <code>\n   0xc68\n  </code>\n  (in IDA). How can I explain this discrepancy?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/XjNPm.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/XjNPm.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/zMbMo.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/zMbMo.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "gdb"
    ],
    "user": "sherlock",
    "time": "Apr 2, 2017 at 0:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For \"Position Independent Executable\" binaries, the loader is free to relocate the binary using some base address. In the case of GDB, the binary is mapped already into memory, the offset\n  <code>\n   0x2013a1\n  </code>\n  in the memory operand is\n  <em>\n   calculated relatively with the current\n   <code>\n    RIP\n   </code>\n  </em>\n  (which is the address of the next instruction). The current instruction size is\n  <code>\n   0x6f - 0x68 = 0x7\n  </code>\n  bytes, so in considering with the address of the current instruction, we have an offset:\n </p>\n <pre><code>0x2013a1 + 0x7 = 0x2013a8\n</code></pre>\n <p>\n  In the case of\n  <code>\n   IDA\n  </code>\n  , you see the \"static\" virtual address, the offset\n  <code>\n   0x202010\n  </code>\n  in the memory operand is\n  <em>\n   calculated relatively with the base address of the code segment\n  </em>\n  , so in considering with the address of the current instruction, we have an offset:\n </p>\n <pre><code>0x202010 - 0xc68 = 0x2013a8\n</code></pre>\n <p>\n  These values are coherent for both cases.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Ta Thanh Dinh",
            "time": "Apr 2, 2017 at 18:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">The offset, which is rip relative, should be the same irrespective of the base address.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">In the case of IDA, the offset <code>0x20210</code> of the memory operand and the offset <code>0xc68</code> of the instruction are counted from the same base address of the code segment. This is different from the case of DBG, the number <code>0x2013a1</code> is relative with the current <code>RIP</code>. I give more detail in the answer.</span>",
                    "time": null
                },
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">This makes perfect sense now. I didn't understand that IDA calculates the offset <i>relative to the base address of the code segment</i>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA shows a simplified operand, with the\n  <code>\n   rip+<delta>\n  </code>\n  value resolved, so you don't have to calculate it yourself. If you prefer, you can view the original form of rip-relative instructions by enabling \"explicit RIP addressing\" in processor-specific options.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 2, 2017 at 19:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\"><code>IDA shows a simplified operand, with the rip+&lt;delta&gt; value resolved</code> - and this value is relative to the base of the code segment. Right?</span>",
                    "time": null
                },
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">And thanks for <code>explicit RIP addressing</code>, I didn't know about that.</span>",
                    "time": null
                }
            ]
        }
    ]
}