{
    "title": "How are the segment registers (fs, gs, cs, ss, ds, es) used in Linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/2006/how-are-the-segment-registers-fs-gs-cs-ss-ds-es-used-in-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I try to understand the process of memory segmentation for the i386 and amd64 architectures on Linux. It seems that this is heavily related to the segment registers\n  <code>\n   %fs\n  </code>\n  ,\n  <code>\n   %gs\n  </code>\n  ,\n  <code>\n   %cs\n  </code>\n  ,\n  <code>\n   %ss\n  </code>\n  ,\n  <code>\n   %ds\n  </code>\n  ,\n  <code>\n   %es\n  </code>\n  .\n </p>\n <p>\n  Can somebody explain how these registers are used, both, in user and kernel-land programs ?\n </p>\n</div>\n</body></html>",
    "votes": "88",
    "answers": 3,
    "views": "134k",
    "tags": [
        "linux",
        "x86",
        "assembly",
        "amd64"
    ],
    "user": "perror",
    "time": "Jun 9, 2015 at 23:29",
    "comments": [
        {
            "user": "Mellowcandle",
            "text": "<html><body><span class=\"comment-copy\">\n You need to be OS specific\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, you are right. I edited to question to be Linux-specific.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mellowcandle",
            "text": "<html><body><span class=\"comment-copy\">\n I would like to suggest you read Assembly Langauge Step By Step -\n <a href=\"http://www.duntemann.com/assembly.html\" rel=\"nofollow noreferrer\">\n  duntemann.com/assembly.html\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "viv",
            "text": "<html><body><span class=\"comment-copy\">\n Google's Native Client technology uses segmentation to enforce sandboxing.You can check out the\n <a href=\"http://code.google.com/p/nativeclient/\" rel=\"nofollow noreferrer\">\n  implementation\n </a>\n to gain more insight.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Kernel perspective:\n  </strong>\n </p>\n <p>\n  I will try to answer from the kernel perspective, covering various OS's.\n </p>\n <p>\n  <a href=\"http://en.wikipedia.org/wiki/Memory_segmentation\" rel=\"noreferrer\">\n   Memory segmentation\n  </a>\n  is the old way of accessing memory regions.\nAll major operating systems including OSX, Linux, (from version 0.1) and Windows (from NT) are now using\n  <a href=\"http://en.wikipedia.org/wiki/Paging\" rel=\"noreferrer\">\n   paging\n  </a>\n  which is a better way (IMHO) of accessing memory.\n </p>\n <p>\n  Intel, has always introduced backward compatibility in its processors (except IA-64, and we saw how it failed...)\nSo, in its initial state (after reset) the processor starts in a mode called\n  <a href=\"http://en.wikipedia.org/wiki/Real_mode\" rel=\"noreferrer\">\n   real mode\n  </a>\n  , in this mode, segmentation is enabled by default to support legacy software.\nDuring the boot process of the operating system, the processor is changed into\n  <a href=\"http://en.wikipedia.org/wiki/Protected_mode\" rel=\"noreferrer\">\n   protected mode\n  </a>\n  , and then in enabled paging.\n </p>\n <p>\n  Before paging, the segment registers were used like this\n </p>\n <blockquote>\n  <p>\n   In real mode each logical address points directly into physical memory\n  location, every logical address consists of two 16 bit parts: The\n  segment part of the logical address contains the base address of a\n  segment with a granularity of 16 bytes, i.e. a segments may start at\n  physical address 0, 16, 32, ..., 2\n   <sup>\n    20\n   </sup>\n   -16. The offset part of the\n  logical address contains an offset inside the segment, i.e. the\n  physical address can be calculated as\n   <code>\n    physical_address := segment_part × 16 + offset\n   </code>\n   (if the address line A20 is enabled),\n  respectively\n   <code>\n    (segment_part × 16 + offset`) mod 2\n    <sup>\n     20\n    </sup>\n   </code>\n   (if A20 is off) Every segment has a size of 2\n   <sup>\n    16\n   </sup>\n   bytes. [Wikipedia]\n  </p>\n </blockquote>\n <p>\n  <strong>\n   Let's see some examples (286-386 era) :\n  </strong>\n </p>\n <p>\n  The 286 architecture introduced 4 segments:\n  <strong>\n   CS\n  </strong>\n  (code segment)\n  <strong>\n   DS\n  </strong>\n  (data segment) SS (stack segment)\n  <strong>\n   ES\n  </strong>\n  (extra segment)\nthe 386 architecture introduced two new general segment registers\n  <strong>\n   FS\n  </strong>\n  ,\n  <strong>\n   GS\n  </strong>\n  .\n </p>\n <p>\n  typical assembly opcode (in Intel syntax) would look like:\n </p>\n <pre><code>mov dx, 850h\nmov es, dx     ; Move 850h to es segment register\nmov es:cx, 15h ; Move 15 to es:cx\n</code></pre>\n <p>\n  Using paging (protected mode) the segment registers weren't used anymore for addressing memory locations.\n </p>\n <blockquote>\n  <p>\n   In protected mode the\n   <code>\n    segment_part\n   </code>\n   is replaced by a 16 bit selector,\n  the 13 upper bits (bit 3 to bit 15) of the selector contains the index\n  of an entry inside a descriptor table. The next bit (bit 2) specifies\n  if the operation is used with the GDT or the LDT. The lowest two bits\n  (bit 1 and bit 0) of the selector are combined to define the privilege\n  of the request; where a value of 0 has the highest priority and value\n  of 3 is the lowest. [wikipedia]\n  </p>\n </blockquote>\n <p>\n  The segments however still used to enforce hardware security in the GDT\n </p>\n <blockquote>\n  <p>\n   The Global Descriptor Table or GDT is a data structure used by Intel\n  x86-family processors starting with the 80286 in order to define the\n  characteristics of the various memory areas used during program\n  execution, including the base address, the size and access privileges\n  like executability and writability. These memory areas are called\n  segments in Intel terminology. [wikipedia]\n  </p>\n </blockquote>\n <p>\n  So, in practice the segment registers in protected mode are used to store indexes to the GDT.\n </p>\n <p>\n  Several operating systems such as Windows and Linux, use some of the segments for internal usage. for instance Windows x64 uses the\n  <code>\n   GS\n  </code>\n  register to access the TLS (thread local storage) and in Linux it's for accessing cpu specific memory.\n </p>\n <p>\n  <strong>\n   User perspective:\n  </strong>\n </p>\n <p>\n  From the user perspective, in recent operating system that uses paging, the memory works in so called \"flat mode\".\nEvery process access its own memory (4GB) in linear fashion, so basically the segment registers are not needed.\n </p>\n <p>\n  They are still registers, so they can of course be used for various other assembly operations.\n </p>\n</div>\n</body></html>",
            "votes": "69",
            "user": "phuclv",
            "time": "Apr 26, 2020 at 18:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lorenzo Dematté",
                    "text": "<span class=\"comment-copy\">Nice answer, but I would add one bit of clarification wrt <code>All major operating system ... use paging</code>. I don't know about linux, but as you later pointed out in your answer, NT still use segments, for protection (on x86 at least). Privilege levels, or rings, are linked to segments. Hence the subdivision of the address space in (at least) four segments. The address space still look like 4gb flat, but the lower 2 (or 3) GB are one segment with ring 3 access, the upper 2(or 1) is a segment with ring 0 access.</span>",
                    "time": null
                },
                {
                    "user": "Lorenzo Dematté",
                    "text": "<span class=\"comment-copy\">The other two segments are (short - 64kb long) regions at the low end and upper end of the user space (0-2GB); they help in catching null pointers and mark the \"finish of usable user space\".  Overall, this memory management technique is called \"Paged segmentation\", IIRC: there are segments (just a few) and each segment is paged.</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">@LorenzoDematté You're correct... feel free to edit my answer with your insight.</span>",
                    "time": null
                },
                {
                    "user": "Lorenzo Dematté",
                    "text": "<span class=\"comment-copy\">Yes, that's why I think an edit is not necessary and a comment is sufficient :)</span>",
                    "time": null
                },
                {
                    "user": "user2127",
                    "text": "<span class=\"comment-copy\"><code>mov es, 850h; Move 850h to es segment register</code>This instruction above does not exist. Because it is not possible to load a segment register with an immediate value. It is only possible to load a segment register with a content of an other non segment register, with the content of a ram location, or with popping a value from our stack <code>mov es:cx, 15h ; Move 15 to es:cx</code> This instruction above also does not exist. Because we can not use <code>CX</code> as an adress register, we can only use <code>ECX</code> as an adress register.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  FS points to the exception handling chain, CS and DS are filled from the OS with code and data segment. SS is the battery/stack segment. From what I remember, GS and ES are free.\n  \n\n  It shouldn't matter much if kernel or user mode (they are used by some instructions like XLAT, MOVS, and some others, so you have to use them in the same way), but just in case I'm talking about programming in user space.\n </p>\n <p>\n  I had not noticed before, but you're using the notation %fs, not FS, so probably you're meaning Linux, which is another story (also you could be more clear on protected/real mode). You can see also from other answers on stackexchange that linux apparently gives you, in FS and GS, 'thread local storage' and 'processor data area'. CS, DS, and SS should still be code/data/stack.\n </p>\n <p>\n  For the sake of the argument, I have no idea how on a Mac you use those registers.\n </p>\n <p>\n  For 64 bit it depends: if not in compatibility mode (where you can execute 64 and 32 bit code) then DS, ES, and SS are ignored, and instructions like POP SS give an error. There is no segmentation (the memory model is flat), there should be no real mode (but I think you only mean protected mode?), and if I'm not wrong there isn't hardware task switching.\n  \n\n  There are further details on CS, FS, and GS (expecially the hidden part) in 64 bit mode, but since it's not used often maybe it's better to omit them.\n </p>\n <p>\n  You can check the manuals for the AMD family of processors especially in the case of 64 bit legacy mode:\n  \n\n  <a href=\"http://developer.amd.com/resources/documentation-articles/developer-guides-manuals/\" rel=\"noreferrer\">\n   http://developer.amd.com/resources/documentation-articles/developer-guides-manuals/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "14",
            "user": "13 revs, 2 users 81%lunadir",
            "time": "Jan 2, 2014 at 22:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lunadir",
                    "text": "<span class=\"comment-copy\">it's weird not having 'enough reputation' for posting images...</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">it's new to me that the Itanium (IA-64) has segment registers. Can you explain?!</span>",
                    "time": null
                },
                {
                    "user": "lunadir",
                    "text": "<span class=\"comment-copy\">well, yes, effectively there shouldn't be any, because there aren't segments... anyway in the transition from ia-32 to ia-64 programming the segment registers are mapped to application registers GR16-GR17 (or so it's written)</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">Linux never used segmentation, it was always used paging. regarding Windows, since NT, it also uses paging, so what you described here is not relevant anymore, unless you're doing DOS programming / reversing</span>",
                    "time": null
                },
                {
                    "user": "L0j1k",
                    "text": "<span class=\"comment-copy\">I, for one, happen to be reversing a DOS binary, so finding this information was invaluable.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i wrote a windows specific answer to a question that was marked as duplicate and closed and the close flag referred to this thread so i post an answer here\n </p>\n <p>\n  <strong>\n   os win7 sp1 32 bit machine\n   \n\n   kernel dump using livekd from sysinternals\n  </strong>\n </p>\n <p>\n  a 16 bit segment register contains\n  \n\n  13 bits of selector\n  \n\n  1 bit of table descriptor\n  \n\n  2 bits of requester_privilege_level\n </p>\n <pre><code>Selector        tl  rpl \n0000000000000----0---00 \n</code></pre>\n <p>\n  so cs and  fs converted to binary will be\n </p>\n <pre><code>kd> r cs;r fs\ncs=00000008  = 0b 00001 0 00\nfs=00000030  = 0b 00110 0 00\n</code></pre>\n <p>\n  2 bits rpl means 0,1,2,3 rings  ( so 00 = 0 = ring zero)\n </p>\n <p>\n  gdt = 1 bit means 0,1     (0 is for\n  <strong>\n   GDT\n  </strong>\n  and 1 is for\n  <strong>\n   LDT\n  </strong>\n  )\n </p>\n <p>\n  global descriptor table and local descriptor table\n </p>\n <p>\n  the high 13 bits represent segment selector\n </p>\n <p>\n  so cs = 0x08 has a segment selector of 0b 001 = 0x1 ie gdtr@1\n  \n\n  &  fs = 0x30 has a segment selector 0f 0b 110 = 0x6 ie gdtr@6\n </p>\n <p>\n  the kernel cs,fs are different from user cs,fs\n as can be noticed from dg command from windbg\n </p>\n <pre><code>kd> dg @cs  <<<<<<<--- kernel \n                                  P Si Gr Pr Lo\nSel    Base     Limit     Type    l ze an es ng Flags\n---- -------- -------- ---------- - -- -- -- -- --------\n0008 00000000 ffffffff Code RE Ac 0 Bg Pg P  Nl 00000c9b\n\n0:000> dg @cs <<<<<<<<----user \n                                  P Si Gr Pr Lo\nSel    Base     Limit     Type    l ze an es ng Flags\n---- -------- -------- ---------- - -- -- -- -- --------\n001B 00000000 ffffffff Code RE Ac 3 Bg Pg P  Nl 00000cfb\n\nkd> dg @fs <<<<<<<<------- kernel\n                                  P Si Gr Pr Lo\nSel    Base     Limit     Type    l ze an es ng Flags\n---- -------- -------- ---------- - -- -- -- -- --------\n0030 82f6dc00 00003748 Data RW Ac 0 Bg By P  Nl 00000493\n\n0:000> dg @fs\n                                  P Si Gr Pr Lo\nSel    Base     Limit     Type    l ze an es ng Flags\n---- -------- -------- ---------- - -- -- -- -- --------\n003B 7ffdf000 00000fff Data RW Ac 3 Bg By P  Nl 000004f3\n</code></pre>\n <p>\n  you can glean sufficient information about gdt from\n  \n\n  <a href=\"http://wiki.osdev.org/Global_Descriptor_Table\" rel=\"noreferrer\">\n   osdevwiki_gdt\n  </a>\n  \n\n  <a href=\"http://www.rcollins.org/ddj/Aug98/Aug98.html\" rel=\"noreferrer\">\n   robert-collins_ddj_article\n  </a>\n </p>\n <p>\n  to do that manually im using livekd here\n </p>\n <p>\n  using windbg you can get the Descriptor and Task Gate Registers\n </p>\n <pre><code>kd> rM 100\ngdtr=80b95000   gdtl=03ff idtr=80b95400   idtl=07ff tr=0028  ldtr=0000\n</code></pre>\n <p>\n  each gdtr entry is 64 bits so you can have 7f gdtr entries as you can see gdtl is 3ff 0x80*0x08-1 = 0x400-1 = 0x3ff (index starts from 0 not 1)\n </p>\n <p>\n  so gdtr entry @1,@2 are @gdtr+(0x1*0x8) @gdtr+(0x2*0x08=0x10) and so on\n </p>\n <pre><code>kd> dq @gdtr+8 l1    gdtr@1 = gdtr+0n1*0x8 =0n8  = 0x8    \n80b95008  00cf9b00`0000ffff = gdtr+0n6*0x8 =0n48 = 0x30    \nkd> dq @gdtr+30 l1   \n80b95030  824093f6`dc003748   \nkd> dq @gdtr+38 l1   \n80b95038  7f40f3fd`e0000fff   \n</code></pre>\n <p>\n  lets bit game the last two gdtr entries manually\n </p>\n <pre><code>-------------------------------------------------------------------------------------------\ngdtrentry        [63:     [55:  [51:  [47:          [39:                  [15:             \n                  56]      52]   48]   40]           16]                    0]             \n                 base     gdrs  L     p d  t     Base     Base             Limit           \n                 Hi       rb0y  h     r l  y     Mid      Low                              \n-------------------------------------------------------------------------------------------\nbit position     66665555 5555  5544  4 44 44444 33333333 3322222222221111 1111110000000000\n                 32109876 5432  1098  7 65 43210 98765432 1098765432109876 5432109876543210\n-------------------------------------------------------------------------------------------\n824093f6dc003748 10000010 0100  0000  1 00 10011 11110110 1101110000000000 0011011101001000\nas hex           0x82     0100  0     1 0  0x13  0xF6     0xDC00           0x3748          \n--------------------------------------- ---------------------------------------------------\n7f40f3fde0000fff 01111111 0100  0000  1 11 10011 11111101 1110000000000000 0000111111111111\nas hex           0x7F     0100  0     1 3  0x13  0xFD     0xE000           0x0FFF          \n-------------------------------------------------------------------------------------------\n</code></pre>\n</div>\n</body></html>",
            "votes": "8",
            "user": "blabb",
            "time": "Jun 13, 2017 at 19:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "greenpiece",
                    "text": "<span class=\"comment-copy\">This answer was originally written for <a href=\"https://reverseengineering.stackexchange.com/questions/15542/what-does-fs-register-value-mean-in-x86-application\">this question</a>.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@blabb: Strange! Why didn't you post your answer on the other question? This question is Linux-specific and your answer is Windows-specific. Somehow, your answer would much better fit to the other question. Don't you think ? (nice answer, though!)</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Ah, the other question has been closed!!! I vote for a reopen, then.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@perror yes tbe question was closed as duplicate and the comment referred to this thread so i had to post it here</span>",
                    "time": null
                }
            ]
        }
    ]
}