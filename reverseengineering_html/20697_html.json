{
    "title": "Tricore debugging tools",
    "link": "https://reverseengineering.stackexchange.com/questions/20697/tricore-debugging-tools",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am new in the reverse engineering, I have a good experience in programming MCUs like c51 and ARM.\nNow I would like to learn about Tricore reverse engineering... ECUs mainly.\nI can obtain the ECU flash as bin files, my question is: what IDE and debugger hardware (jtag) is best for this job?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "debuggers"
    ],
    "user": "Ramin",
    "time": "Mar 3, 2019 at 9:14",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. This question is unfortunately primarily opinion-based and therefore not a good fit for our Q&A format.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ul>\n  <li>\n   <b>\n    IDE:\n   </b>\n   <a href=\"https://hightec-rt.com/en/\" rel=\"nofollow noreferrer\">\n    High Tech RT\n   </a>\n   but it is usually tied up to one TriCore processor with other limitations. However you can compile your C into TriCore executable\n   <li>\n    <b>\n     JTAG Debugger:\n    </b>\n    <a href=\"https://www.infineon.com/cms/en/product/evaluation-boards/kit_miniwiggler_3_usb/\" rel=\"nofollow noreferrer\">\n     Mini Wiggler\n    </a>\n    from Infineon or if your budget allows that, Lauterbach. However ECUs are safety critical devices, so they use a system of internal and external watchdogs. If you set a breakpoint in TriCore, after hitting the breakpoint ECU usually reset itself. So OCDS can be (on production ECUs) used only as RAM monitor at best.\n    \n\n    Second problem which you will come across is, that most of TriCore ECUs has JTAG interface disabled because UCB0 is set.\n   </li>\n  </li>\n </ul>\n <p>\n  It should be obvious that you should first buy some development kit,\n  <a href=\"https://www.ehitex.de/en/application-kits/infineon/2523/aurix-application-kit-tc224-tft\" rel=\"nofollow noreferrer\">\n   like this application kit which has integrated debugger\n  </a>\n  and understand how TriCore's internals are working. It is going to be less frustrating for you than develop anything on security hardened production ECUs.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jarda52005",
            "time": "Feb 24, 2019 at 12:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  for RE work where you have the binary file already I would just use IDA PRO or build your own tool for flow analysis, etc\n </p>\n <p>\n  If  you actually need to pull the binary file, then the other answer is correct - but, in addition, openOCD may work for you for simple binary copy which is a much cheaper open source option.\n </p>\n <p>\n  Understanding code/data flow in an ECU is a fairly difficult task given how code is designed and the complex safety eco system and peripheral set of tricore.   Be prepared to study that and understand the features before delving in.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Alex Novickis",
            "time": "Oct 29, 2020 at 2:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}