{
    "title": "Code based Yara rule",
    "link": "https://reverseengineering.stackexchange.com/questions/25106/code-based-yara-rule",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have to write a Yara rules for malwares that is based on assember code. Suppose I have an unpacked malware sample. To avoid false positives, the selected code must be unique. Can anyone tell me which code is suitable and which is not? For example mov eax,1 would not be a good choice. But what code would be a good criterion? What are the criterions for Yara rules based assembler codes?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "215",
    "tags": [
        "malware",
        "yara"
    ],
    "user": "fellower4",
    "time": "May 24, 2020 at 7:55",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Nobody can tell you. Even big Antivirus companies have released scanner patterns that detect false positives (some times even components of Windows were affected). The common way to avoid false positives is having a large software pool of known benign software you can check your rules with.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Agree with Robert - The common way to avoid false positives is having a large software pool of known benign software you can check your rules with.\n </p>\n <p>\n  If you are just starting to write yara rules then concentrate on the easy way that is strings, write yara rules based on the unique strings.\n </p>\n <p>\n  To answer this:\nCan anyone tell me which code is suitable and which is not? What are the criterions for Yara rules based assembler codes?\n </p>\n <p>\n  Some of the criteria which you can use:\n </p>\n <ul>\n  <li>\n   Any single line assembly code will be bad choice, you will need few lines of assembly code\n  </li>\n  <li>\n   Write yara rule based on custom encryption/decryption loop with\nunique key\n  </li>\n  <li>\n   Don't take standard encryption/decryption like RC4 for\nyara rule, that's why I said custom in above point\n  </li>\n  <li>\n   Don't include yara rule with too many address offset as it may not hit another hash\n  </li>\n  <li>\n   Wild card address offset to hit different hashes of the same malware family\n  </li>\n  <li>\n   Take a code pattern which is performing some unique steps which is\nspecific to this malware sample\n  </li>\n  <li>\n   Mixture of few strings and assembly code should give you good result\n  </li>\n </ul>\n <p>\n  This above list is not a comprehensive criteria but you will learn more by doing it and looking through existing Yara rules.\n </p>\n <p>\n  Check this repository for different type of Yara Rules, you will get some idea for strings and assembly code Yara rules:\n  <a href=\"https://github.com/Yara-Rules/rules\" rel=\"nofollow noreferrer\">\n   https://github.com/Yara-Rules/rules\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Securityinbits",
            "time": "May 26, 2020 at 0:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}