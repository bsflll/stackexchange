{
    "title": "structures defined on stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/24637/structures-defined-on-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While reading\n  <a href=\"https://link.springer.com/article/10.1134/S0361768809020066\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  paper on type recovery from executables, I came across following paragraph:\n </p>\n <blockquote>\n  <p>\n   It is worth noting that the domain of parameters of a function can be\n  considered as a structure placed on the stack; in this case, the\n  register %ebp points to the beginning of this structure.\n  For that reason, the automatic detection of the structured types\n  located at the stack (local variables and function parameters of a\n  structured type) is very complicated and is not considered in this\n  paper.\n  </p>\n </blockquote>\n <p>\n  And they mentioned that they don't consider such structures in their analysis. Do they simply mean programs like these?\n </p>\n <pre><code>#include <stdio.h>\n\nstruct P\n{\n  int a;\n  int b;\n};\n\nint main()\n{\n  struct P p, *pp;\n  pp = &p;\n  pp->a = 4;\n  printf(\"%d\n\", pp->a);\n  return 0;\n}\n</code></pre>\n <p>\n  Or is there any other way which resonates their statement?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "52",
    "tags": [
        "decompilation",
        "type-reconstruction"
    ],
    "user": "R4444",
    "time": "Apr 7, 2020 at 3:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Consider a function like this:\n </p>\n <pre><code>int func1(int x)\n{\n  int y;\n  char buf[16];\n  y = x;\n  buf[0]=x&0xff;\n  return y+buf[0];\n}\n</code></pre>\n <p>\n  If the compiler uses a naive variable allocation algorithm and does not try to use registers for variables, it will likely lay out the variables sequentially in the stack:\n </p>\n <pre><code>off|\n00 | y dd ?\n04 | buf db 16 dup ?\n</code></pre>\n <p>\n  Which can be thought of as a structure:\n </p>\n <pre><code> struct frame_func1\n {\n    int y;\n    char buf[16];\n };\n</code></pre>\n <p>\n  In reality, the \"base\" of the structure will not be\n  <code>\n   ebp\n  </code>\n  , since usually it points between local variables and incoming arguments, i.e \"after\" this pseudo-structure.\n </p>\n <p>\n  I'm not quite sure why the paper goes to the conclusion mentioned in your quote. Maybe the authors mean that detecting local variables which are structures would be akin to detecting structure members in a structure an thus out of scope? Not sure....\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 7, 2020 at 12:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">Although this doesn't ans the question, thanks for this great explanation</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">@R4444 I understand the paper the same as Igor. Why it doesn't answer your question?</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">hmmm, I take it back it does answer the question, though the conclusion (of paper authors) is convoluted. thanks</span>",
                    "time": null
                }
            ]
        }
    ]
}