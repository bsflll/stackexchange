{
    "title": "ghidra scripting: how to distinguish between function and global symbol",
    "link": "https://reverseengineering.stackexchange.com/questions/25989/ghidra-scripting-how-to-distinguish-between-function-and-global-symbol",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a following program:\n </p>\n <pre><code>int b2[4];\nint foo()\n{\n  static int b2[10];\n  b2[5] = 4;\n}\nint main()\n{\n  static int b2[10];\n  int b[5];\n  b[0] = 1;\n  b2[9] = 4;\n  int *ptr = b;\n  int c = *(ptr + 10);\n  foo();\n  return 0;\n}\n</code></pre>\n <p>\n  I want to distinguish between different b2 arrays defined in functions foo, main and globally. I can collect all the symbols using:\n </p>\n <pre><code>symbols = set(currentProgram.getSymbolTable().getAllSymbols(True))\n    for s in symbols:\n        print(s.getName())\n</code></pre>\n <p>\n  But, there is no way to distinguish between static (in functional namespace) and global symbols.\n </p>\n <p>\n  Ghidra GUI shows me something like:\nb2.1913 <- main , b2.1917 <- foo, b2 <- global.\n </p>\n <p>\n  Thus I can easily distinguish between these symbols using GUI.\n </p>\n <p>\n  Thanks in advanced for your help.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ghidra"
    ],
    "user": "R4444",
    "time": "Sep 27, 2020 at 19:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   Symbol\n  </code>\n  object has a couple different ways you could go about this. Here are a few options.\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>symbols = set(currentProgram.getSymbolTable().getAllSymbols(True))\nfor s in symbols:\n    if s.getName() == \"b2\":\n        print(s.getName(), s.getName(True), s.getParentSymbol().getName(), s.getParentNamespace())\n\n</code></pre>\n <p>\n  Output:\n </p>\n <pre><code>GetSymbolType.py> Running...\n(u'b2', u'b2', u'global', Global)\n(u'b2', u'foo()::b2', u'foo()', foo())\n(u'b2', u'main::b2', u'main', main)\n</code></pre>\n <p>\n  Explanation:\n </p>\n <ol>\n  <li>\n   <code>\n    s.getName(true)\n   </code>\n   - Includes the parent namespace in the output (you'll notice that for global symbols, this has no effect)\n  </li>\n  <li>\n   <code>\n    s.getParentSymbol().getName()\n   </code>\n   , name of the parent\n   <code>\n    Symbol\n   </code>\n   , which will be the namespace\n   <code>\n    Symbol\n   </code>\n   that contains\n   <code>\n    s\n   </code>\n  </li>\n  <li>\n   <code>\n    s.getParentNamespace()\n   </code>\n   - return the parent\n   <code>\n    Namespace\n   </code>\n   object\n  </li>\n </ol>\n <p>\n  More details in the\n  <a href=\"https://ghidra.re/ghidra_docs/api/ghidra/program/model/symbol/Symbol.html\" rel=\"nofollow noreferrer\">\n   API docs\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "hairlessbear",
            "time": "May 22, 2023 at 2:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}