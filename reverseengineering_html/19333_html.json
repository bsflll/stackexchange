{
    "title": "What are the difference syscall and int 0x2E instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/19333/what-are-the-difference-syscall-and-int-0x2e-instructions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From this question:\n  <a href=\"https://reverseengineering.stackexchange.com/q/16075/23069\">\n   How does the Windows Native API communicate with the kernel?\n  </a>\n </p>\n <p>\n  Here is an example of\n  <code>\n   ZwClose(HANDLE Handle);\n  </code>\n  system call in NTDLL.DLL in Windows 10 X86_64:\n </p>\n <pre><code>NtClose         proc near\nmov     r10, rcx\nmov     eax, 0Fh\ntest    byte ptr ds:7FFE0308h, 1\njnz     short loc_a\nsyscall\nretn\n\nloc_a:\nint     2Eh\nretn\nNtClose         endp\n</code></pre>\n <p>\n  My question is, why there is two different instruction\n  <code>\n   syscall\n  </code>\n  and\n  <code>\n   int 0x2E\n  </code>\n  in one subroutine? The\n  <code>\n   0xF\n  </code>\n  value in EAX is the ID of\n  <code>\n   ZwClose()\n  </code>\n  and/or\n  <code>\n   NtCose()\n  </code>\n  . While debugging, code execution never goes to\n  <code>\n   int 0x2E\n  </code>\n  ,\n  <code>\n   syscall\n  </code>\n  instruction is always executed and\n  <a href=\"http://www.osronline.com/article.cfm?id=257\" rel=\"noreferrer\">\n   <code>\n    ds:7FFE0308h\n   </code>\n   becomes zero\n  </a>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 2,
    "views": "8k",
    "tags": [
        "windows",
        "x86",
        "kernel-mode",
        "system-call"
    ],
    "user": "Biswapriyo",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   7FFE0308h\n  </code>\n  is a pointer inside the\n  <code>\n   KUSER_SHARED_DATA\n  </code>\n  struct.\n </p>\n <blockquote>\n  <p>\n   The pre-set address for access from kernel mode is defined symbolically in WDM.H as KI_USER_SHARED_DATA. It helps when debugging to remember that this is 0xFFDF0000 or 0xFFFFF780`00000000, respectively, in 32-bit and 64-bit Windows. Also defined is a convenient symbol, SharedUserData, which casts this constant address to a KUSER_SHARED_DATA pointer.\n  </p>\n  <p>\n   The read-only user-mode address for the shared data is 0x7FFE0000, both in 32-bit and 64-bit Windows.\n  </p>\n </blockquote>\n <p>\n  Ref:\n  <a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/structs/kuser_shared_data.htm\" rel=\"nofollow noreferrer\">\n   https://www.geoffchappell.com/studies/windows/km/ntoskrnl/structs/kuser_shared_data.htm\n  </a>\n </p>\n <p>\n  We see from that ref above that SharedUserData+0x308 is\n </p>\n <blockquote>\n  <p>\n   0x0308 ULONG SystemCall\n  </p>\n </blockquote>\n <p>\n  for Windows versions 1511 and higher.\n </p>\n <p>\n  So what does it do?\n </p>\n <pre><code>//\n// On AMD64, this value is initialized to a nonzero value if the system\n// operates with an altered view of the system service call mechanism.\n//\n\nULONG SystemCall;\n</code></pre>\n <p>\n  from recent ntddk.h\n </p>\n <p>\n  ...not very helpful.\n </p>\n <p>\n  So what's the difference between int 2e and syscall\n  <strong>\n   in this context?\n  </strong>\n </p>\n <p>\n  Ref:\n  <a href=\"https://twitter.com/honorary_bot/status/966609444674162688\" rel=\"nofollow noreferrer\">\n   https://twitter.com/honorary_bot/status/966609444674162688\n  </a>\n </p>\n <blockquote>\n  <p>\n   Might be a clue: 'int 2e' instruction can be trapped by vmx, syscall not\n  </p>\n </blockquote>\n <p>\n  More info here:\n  <a href=\"https://www.amossys.fr/fr/ressources/blog-technique/windows10-th2-int2e-mystery/\" rel=\"nofollow noreferrer\">\n   https://www.amossys.fr/fr/ressources/blog-technique/windows10-th2-int2e-mystery/\n  </a>\n </p>\n <hr/>\n <p>\n  <strong>\n   In the context of your question\n  </strong>\n  the\n  <code>\n   ntdll.dll\n  </code>\n  <code>\n   int 0x2e\n  </code>\n  system calls probably have something to do with Virtualization Based Security. They have been present in Windows 10 since version 1511, after having been removed as a syscall method since Windows 8.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "Gehock",
            "time": "Feb 14, 2023 at 14:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   int 2Eh\n  </code>\n  is used on 32bit OS to enter the kernel mode. On 64-bit, the same is obtained by using\n  <code>\n   syscall\n  </code>\n  . The check done on memory address\n  <code>\n   0x7ffe0300\n  </code>\n  is one of\n  <a href=\"http://www.rohitab.com/discuss/topic/40881-a-quick-way-to-detect-64-bit-windows/\" rel=\"noreferrer\">\n   the ways to detect the bitness\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Paweł Łukasik",
            "time": "Sep 13, 2018 at 16:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}