{
    "title": "Use Android Shared library (.so) files in Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/8823/use-android-shared-library-so-files-in-linux",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I decompiled an APK file,and that program have native codes in a\n  <code>\n   .so\n  </code>\n  file.\n </p>\n <p>\n  I want to use that\n  <code>\n   .so\n  </code>\n  file in Linux in order to use inline functions.\nThese codes have functions to connect to a server and perform encryption/decryption on the data transfered.\n </p>\n <p>\n  I decompiled that with IDA Pro too. Can I decompile and recompile ARM codes to a x64 CPU and run it in Linux ?\n </p>\n <p>\n  Or, do I need a light simulator to run that ARM\n  <code>\n   *.so\n  </code>\n  file ?\n </p>\n <p>\n  IDA Pro decompile the codes, I see the assembly functions but I'm not used to assembly, nor to reverse engineering. How to translates these functions to C or python functions ?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 3,
    "views": "12k",
    "tags": [
        "ida",
        "disassembly",
        "linux",
        "android"
    ],
    "user": "IrajTaghlidi",
    "time": "May 7, 2015 at 15:46",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n You need an emulator. There is an ARM VM here -\n <a href=\"http://opensecuritytraining.info/IntroARM.html\" rel=\"nofollow noreferrer\">\n  opensecuritytraining.info/IntroARM.html\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Danil",
            "text": "<html><body><span class=\"comment-copy\">\n You shouldn't use IDA anymore as Ghidra decompiles it a lot better to pure C code without any remainder in form of inline ARM and such. This enables you to recompile C code to x86-64 architecture or anything else you need. And there is no such language as x64, I don't know who started using this, the only language which exists is x86-64/IA64 which is just the same thing.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @Danil I converted your comment to a comment as it wasn't an answer. x64 is indeed\n <i>\n  a thing\n </i>\n . In particular Microsoft was using that term for x86-64 early on as they supported AMD\n <i>\n  and\n </i>\n Intel CPUs.\n <a href=\"https://en.wikipedia.org/wiki/X86-64\" rel=\"nofollow noreferrer\">\n  Wikipedia even mentions x64\n </a>\n . Oh and sorry to break it to you, but x86-64 and\n <a href=\"https://en.wikipedia.org/wiki/IA-64\" rel=\"nofollow noreferrer\">\n  IA-64\n </a>\n <b>\n  are not\n </b>\n the same thing ... and \"IA64\" is even less of\n <i>\n  a thing\n </i>\n . x(86-)64 is a 64-bit extension of IA-32. So while your advice with Ghidra may be valid in general,\n <i>\n  that\n </i>\n wasn't available in 2015 to the public either.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First, extract the whole APK (it's a renamed ZIP) and check whether there's not a x86 version of the binary, in addition of the ARM. It will depend on the best option to choose.\n </p>\n <p>\n  The following options assume that you have analyzed the binary using a tool such as IDA, Hex-Rays or Hopper and that you could identify the functions that you want to reach.\n </p>\n <hr/>\n <p>\n  <strong>\n   If you need to emulate the calling conventions between a GLIB-based Linux system and a\n   <code>\n    .so\n   </code>\n   Android-targeted library, and that emulating the architecture is not a problem, for example because you have a x86 version of the library available in the APK:\n  </strong>\n </p>\n <ul>\n  <li>\n   <p>\n    One quite common, but sometimes painful option is using\n    <strong>\n     <a href=\"https://github.com/libhybris/libhybris\" rel=\"nofollow noreferrer\">\n      libhybris\n     </a>\n    </strong>\n    , a thin wrapper around Android's custom libc (Bionic) calling conventions that will allow you to call functions from the reverse engineered JNI from a regular GCC or Clang-compiled GLIBC program. Tutorials for libhybris are not numerous, but you'll find a couple of open source projects on the Internet that rely on it and will serve as sample code.\n   </p>\n   <p>\n    However, libhybris will emulate the calling conventions but not the architecture.\n   </p>\n  </li>\n </ul>\n <hr/>\n <p>\n  <strong>\n   If you need to emulate both the architecture and the Android ABIs:\n  </strong>\n </p>\n <ul>\n  <li>\n   You have a few options here, either running your part of the program on an ARM host - this could be the Android emulator, your smartphone, a cheap ARM VPS, a Raspberry Pi or something else - either using an emulator such as\n   <a href=\"http://nairobi-embedded.org/qemu_usermode.html\" rel=\"nofollow noreferrer\">\n    <strong>\n     QEMU in user mode\n    </strong>\n   </a>\n   (that allows you to emulate a single ELF file in a chrooted environment without emulating a whole system). Also, you'll likely have to cross-compile your code.\n  </li>\n </ul>\n <hr/>\n <p>\n  <strong>\n   If you need to emulate the architecture, the Android ABIs and you wish to have more control over the emulated binary at the expense of parsing the ELF/handling the memory layout with code yourself:\n  </strong>\n </p>\n <ul>\n  <li>\n   <p>\n    Another option is using\n    <a href=\"http://www.unicorn-engine.org/\" rel=\"nofollow noreferrer\">\n     <strong>\n      Unicorn engine\n     </strong>\n    </a>\n    , a library based on QEMU's code that allows you to emulate machine code on a foreign host in a way similar to using a debugger, by reading/writing registers, memory and setting breakpoints.\n   </p>\n   <p>\n    Unicorn's API is pretty bare-metal: to use it, you parse the\n    <a href=\"http://man7.org/linux/man-pages/man5/elf.5.html\" rel=\"nofollow noreferrer\">\n     <strong>\n      elf(5)\n     </strong>\n    </a>\n    structure yourself, then, you allocate and write the relevant sections of the binary yourself, you set the registers (PC for the target function, SP at a point with free space, R0, R1 and so forth for the arguments, LR at a point where you set a hook) and your start the emulator.You can find a few easy-to-understand examples\n    <a href=\"http://www.unicorn-engine.org/docs/tutorial.html\" rel=\"nofollow noreferrer\">\n     here, in C and in Python\n    </a>\n    .\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "6",
            "user": "CÃ©cile Bertau",
            "time": "Dec 23, 2020 at 11:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For decompile a APK file, you can use different tools(\n  <a href=\"https://mobilesecuritywiki.com/\" rel=\"nofollow\">\n   https://mobilesecuritywiki.com/\n  </a>\n  ).\nIf you use python this is the best:\n </p>\n <p>\n  <a href=\"https://github.com/androguard/androguard\" rel=\"nofollow\">\n   https://github.com/androguard/androguard\n  </a>\n  or\n  <a href=\"https://code.google.com/p/androguard/(see\" rel=\"nofollow\">\n   https://code.google.com/p/androguard/(see\n  </a>\n  also this example:\n  <a href=\"https://github.com/androguard/androguard/tree/master/demos\" rel=\"nofollow\">\n   https://github.com/androguard/androguard/tree/master/demos\n  </a>\n  )\n </p>\n <p>\n  You can decompile for ARM, but for test you should be use quemu (for ARM) or eclipse.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "invictus85",
            "time": "May 7, 2015 at 13:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Have a look at NativeFunction API of\n  <a href=\"http://frida.re/\" rel=\"nofollow noreferrer\">\n   frida\n  </a>\n  . It helps you call any native function. With a little bit of reversing, you'll have something like\n </p>\n <pre><code>var func = new NativeFunction(Module.findExportByName('libxx.so', 'fun'), 'uint32', []);\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Aug 4, 2017 at 13:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}