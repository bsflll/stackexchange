{
    "title": "how to represent -1 in assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/17022/how-to-represent-1-in-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h3>\n  Question:\n </h3>\n <blockquote>\n  <p>\n   You are given\n   <code>\n    eax = 0x1\n   </code>\n   . Could you set\n   <code>\n    eax\n   </code>\n   to zero using only one\n   <code>\n    add\n   </code>\n   instruction ?\n  </p>\n </blockquote>\n <h3>\n  Answer:\n </h3>\n <pre><code>add %eax, 0xffffffff\n</code></pre>\n <p>\n  Why is that ?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "5k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Wong",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n I fail to see a direct link with RE. It's very basic x86 code; first thing I thought was \"what an odd way to zero eax\".\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html\" rel=\"nofollow noreferrer\">\n   Reference:\n  </a>\n </p>\n <blockquote>\n  <h2>\n   Conversion from Two's Complement\n  </h2>\n  <p>\n   Use the number 0xFFFFFFFF as an example. In binary, that is:\n  </p>\n  <p>\n   <code>\n    1111 1111 1111 1111 1111 1111 1111 1111\n   </code>\n  </p>\n  <p>\n   What can we say about this\n  number? It's first (leftmost) bit is 1, which means that this\n  represents a number that is negative. That's just the way that things\n  are in two's complement: a leading 1 means the number is negative, a\n  leading 0 means the number is 0 or positive.\n  </p>\n  <p>\n   To see what this number is a negative of, we reverse the sign of this\n  number. But how to do that? The class notes say (on 3.17) that to\n  reverse the sign you simply invert the bits (0 goes to 1, and 1 to 0)\n  and add one to the resulting number.\n  </p>\n  <p>\n   The inversion of that binary number is, obviously:\n  </p>\n  <p>\n   <code>\n    0000 0000 0000 0000 0000 0000 0000 0000\n   </code>\n  </p>\n  <p>\n   Then we add one.\n  </p>\n  <p>\n   <code>\n    0000 0000 0000 0000 0000 0000 0000 0001\n   </code>\n  </p>\n  <p>\n   So the negative of 0xFFFFFFFF is\n  0x00000001, more commonly known as 1. So 0xFFFFFFFF is -1.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Mick",
            "time": "Dec 20, 2017 at 16:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Wong",
                    "text": "<span class=\"comment-copy\">oh, I see! I'm really a newbie on RE, thanks for your help!</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@A.W. no problem. This book will help you: <a href=\"http://csapp.cs.cmu.edu/3e/students.html\" rel=\"nofollow noreferrer\">csapp.cs.cmu.edu/3e/students.html</a></span>",
                    "time": null
                },
                {
                    "user": "Wong",
                    "text": "<span class=\"comment-copy\">ok, I will try fetching the book it sounds nice~ Many thanks! :D</span>",
                    "time": null
                },
                {
                    "user": "fpmurphy",
                    "text": "<span class=\"comment-copy\">@SYS_V. The first question you need to ask about <code>0xFFFFFFFF</code>, is it a signed or unsigned integer. You assume signed - which may not be valid.</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">@fpmurphy1: please explain what result you get when it is <i>unsigned</i>. I'd also like to know how a CPU knows if the value stored in a register is signed or unsigned. It's not as if there is a flag stored along, outside the value itself.</span>",
                    "time": null
                }
            ]
        }
    ]
}