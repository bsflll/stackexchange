{
    "title": "What do these 2 Ghidra warnings mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/25917/what-do-these-2-ghidra-warnings-mean",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When disassembling ARM binaries in Ghidra, I often see these warnings:\n </p>\n <pre><code>                /* WARNING: Could not recover jumptable at 0x0747c198. Too many branches */\n                /* WARNING: Treating indirect jump as call */\n</code></pre>\n <p>\n  What do they mean? What's the underlying architectural concept I should learn about to understand the cause of these issues?\n </p>\n <p>\n  Here's an example from a real program, seen in Ghidra's disassembly:\n </p>\n <pre><code>    if (param_2 == 0x78) {\n                /* WARNING: Could not recover jumptable at 0x0747c198. Too many branches */\n                /* WARNING: Treating indirect jump as call */\n      uVar3 = (*DAT_0747c19c)();\n      return uVar3;\n    }\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "7k",
    "tags": [
        "ida",
        "disassembly",
        "arm",
        "ghidra",
        "exploit"
    ],
    "user": "adg",
    "time": "Sep 17, 2020 at 9:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"https://ghidra.re/courses/GhidraClass/Advanced/improvingDisassemblyAndDecompilation.pdf\" rel=\"noreferrer\">\n   Ghidra.re\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   Sometimes you will see warnings in the decompiler view stating that there are too many branches to recover a jumptable.\nOne reason for this is that there actually is a jump table, but the decompiler can’t determine bounds on the switch variable\n  </p>\n </blockquote>\n <p>\n  For your example, this is saying there may a jump table (which is really just an array of pointers), but the decompiler can't figure out what the different possibilities for\n  <code>\n   param2\n  </code>\n  are.\n </p>\n <p>\n  Ghidra recommends:\n </p>\n <blockquote>\n  <p>\n   In such cases, you can add the jump targets manually and then run the script SwitchOverride.java.\nNote: To ﬁnd such locations in a program, run the script FindUnrecoveredSwitchesScript.java.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Shane Reilly",
            "time": "Sep 17, 2020 at 12:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Phil Strenski",
                    "text": "<span class=\"comment-copy\">I tried that but makes no difference. In my case, the template for at least some switches is (segmented Intel code): switch_table: array of (16b value, 16b code offset) switch_code: MOV SI,(#cases-1)*4 next_case: CMP AX, word ptr CS:[SI+switch_table] JNZ no_match JMP word ptr CS:[SI+switch_table+2] no_match: SUB SI,4 JNS next_case I selected the JMP instruction in disassembler, added the switch addresses manually with RE, ran the SwitchOverride.java code, recompiled the function. No difference. Well one difference, I do see the switch addresses in the function graph, so it does seem to have pi</span>",
                    "time": null
                }
            ]
        }
    ]
}