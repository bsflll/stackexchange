{
    "title": "xor eax,3 why does the input change the way it does?",
    "link": "https://reverseengineering.stackexchange.com/questions/23364/xor-eax-3-why-does-the-input-change-the-way-it-does",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am new to reverse engineering and I am trying to figure out exactly what xor is doing in this little program. I know if I put any number other than 0 I get a xor eax,3 so if I put in 1 I get 2 if I input 2 I get 1 if I input 7 I get 4 I am just trying to understand why.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/6FpHB.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/6FpHB.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "241",
    "tags": [
        "assembly",
        "debugging",
        "x64dbg",
        "xor"
    ],
    "user": "Parzi",
    "time": "Mar 1, 2020 at 8:47",
    "comments": [
        {
            "user": "knx",
            "text": "<html><body><span class=\"comment-copy\">\n Hi Landon! First impression: you are stripping relevant parts needed for further inference. Basically it's an conditional xor (3/2).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Parzi",
            "text": "<html><body><span class=\"comment-copy\">\n @kn0x yes I am just trying to figure out what exactly xor does. Is there more info you need to answer that question? I can get the function before the jne. But basically it's just checking if the int entered by the user == 0 if it is then it goes to the xor ecx,2 if not then it does xor eax,3 on whatever number the user entered.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n if(abc) {x = x^3;printf(\"%d\n\",x)} else {x = x ^2;printf(\"%d\n\",x)}\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In\n  <code>\n   C\n  </code>\n  , this function would look like this:\n </p>\n <pre><code>int fun()\n{\n    int a;\n    // some code you haven't pasted here; probably scanf(\"%d\", &a);...\n    if (some_condition)\n        a ^= 3; // xor a with 3\n    else\n        a ^= 2; // xor a with 2\n    printf(\"a = %d.\n\", a);\n    return 0;\n}\n</code></pre>\n <p>\n  I cannot say anything more about it having only the snipped you shared with us. If there is some magic, it is contained in the part you haven't uploaded.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "bart1e",
            "time": "Mar 1, 2020 at 19:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Parzi",
                    "text": "<span class=\"comment-copy\">This is very helpful. I am just trying to understand what xor does exactly. I assume its the a ^= 3 part? I am not familier with ^= could you add that part into your answer and then I think you have answered my question. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Yes <code>a ^= 3</code> stands for <code>a = a^3</code>, that is <code>a xor 3</code>. I have updated my answer. Basically, <code>xor</code> with <code>2</code> changes second least significant bit to its negation, and <code>xor</code> with <code>3</code> changes both first and second least significant bit of <code>a</code>. They are just bit operations that act like sum modulo <code>2</code> on each bit. You can read more about <code>xor</code> <a href=\"https://www.felixcloutier.com/x86/xor\" rel=\"nofollow noreferrer\">here</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}