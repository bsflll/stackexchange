{
    "title": "Why aren't compilers using registers for their intended purpose?",
    "link": "https://reverseengineering.stackexchange.com/questions/30283/why-arent-compilers-using-registers-for-their-intended-purpose",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seem to be well known that x86 registers names have a purpose and indicate on how the register should be use (see\n  <a href=\"https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm\" rel=\"nofollow noreferrer\">\n   this website for example\n  </a>\n  ).\n </p>\n <p>\n  According to this,\n  <code>\n   ecx\n  </code>\n  should be the register holding my\n  <code>\n   i\n  </code>\n  variable on the code bellow :\n </p>\n <pre><code>int main()\n{\n    register int i = 0;\n    for(i = 0 ; i <= 10 ; i++){}\n    return 0;\n}\n</code></pre>\n <p>\n  Objdump disassemble:\n </p>\n <pre><code>\n0000000000001138 <main>:\n    1138:       f3 0f 1e fa             endbr64\n    113c:       55                      push   rbp\n    113d:       48 89 e5                mov    rbp,rsp\n    1140:       53                      push   rbx\n    1141:       bb 00 00 00 00          mov    ebx,0x0\n    1146:       f3 0f 1e fa             endbr64\n    114a:       bb 00 00 00 00          mov    ebx,0x0\n    114f:       eb 03                   jmp    1154 <main+0x1c>\n    1151:       83 c3 01                add    ebx,0x1\n    1154:       83 fb 0a                cmp    ebx,0xa\n    1157:       7e f8                   jle    1151 <main+0x19>\n    1159:       b8 00 00 00 00          mov    eax,0x0\n    115e:       5b                      pop    rbx\n    115f:       5d                      pop    rbp\n    1160:       c3                      ret\n</code></pre>\n <p>\n  We clearly see that\n  <code>\n   ebx\n  </code>\n  is holding\n  <code>\n   i\n  </code>\n  , not\n  <code>\n   ecx\n  </code>\n  .\nIs there an historical reason to this? Did compiler used theoretical purpose or registers back then or was it just for humans?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "118",
    "tags": [
        "compilers",
        "register",
        "history"
    ],
    "user": "Qwark",
    "time": "Apr 18, 2022 at 7:42",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Those are mostly just recommendations - ebx and ecx aren't different by any means and are \"general purpose\"\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<html><body><span class=\"comment-copy\">\n There's still the REP string operations that assume specific registers, e.g. REP MOVSQ copies ECX 64-bit words from ESI to EDI. If you're using those then you have to use ECX as the counter. Otherwise they're all broadly general purpose, yes.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The \"intended purpose\" of a processor register is generally irrelevant to a compiler, unless something fundamental about the instruction set or architecture makes use of that aspect of the register. For example, on x86, the\n  <code>\n   esp\n  </code>\n  register is implicitly used by instructions such as\n  <code>\n   push\n  </code>\n  ,\n  <code>\n   pop\n  </code>\n  ,\n  <code>\n   call\n  </code>\n  , and\n  <code>\n   ret\n  </code>\n  . As a result, the\n  <code>\n   esp\n  </code>\n  register cannot be repurposed as a general-purpose register. Similarly, some other instructions use fixed registers: there is a\n  <code>\n   shl eax, cl\n  </code>\n  instruction, but no\n  <code>\n   shl eax, bl\n  </code>\n  instruction;\n  <code>\n   rep movsb\n  </code>\n  moves\n  <code>\n   ecx\n  </code>\n  bytes from\n  <code>\n   esi\n  </code>\n  to\n  <code>\n   edi\n  </code>\n  ; and there are other examples like this.\n  <code>\n   ebp\n  </code>\n  is technically only tied to its role as the frame pointer through instructions like\n  <code>\n   enter\n  </code>\n  and\n  <code>\n   leave\n  </code>\n  , so it can be used as a general purpose register, although it is often still used as a frame pointer to make debugging easier.\n </p>\n <p>\n  Outside of examples like this, where the compiler has no choice but to obey the intended purposes of registers in order interoperate with the architecture and broader platform, the compiler has no reason to care what somebody wrote in a manual 40 years ago recommending that\n  <code>\n   eax\n  </code>\n  be used as an accumulator and\n  <code>\n   ecx\n  </code>\n  be used as a counting register. Not only does the compiler have no sound way of determining in general which category a variable in the source code belongs to, no benefit would be obtained by putting variables into their \"proper\" register. In fact, having those unnecessary extra constraints would only serve to burden the compiler's job of producing performant code by making register allocation more difficult. Almost any register can be used for almost any purpose, and the compiler will exploit this in order to produce better code, which is a good thing.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Rolf Rolles",
            "time": "Apr 19, 2022 at 18:16",
            "is_accepted": true,
            "comments": []
        }
    ]
}