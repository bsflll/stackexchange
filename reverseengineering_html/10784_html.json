{
    "title": "Does anybody know which tools allow to get (pseudo) code from a Moscow ML executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/10784/does-anybody-know-which-tools-allow-to-get-pseudo-code-from-a-moscow-ml-execut",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've decompiled\n  <strong>\n   Win32\n  </strong>\n  executable that is the result of compilation of a program written in Moscow ML language.\n </p>\n <p>\n  The resulting listing contains standard\n  <strong>\n   C\n  </strong>\n  <code>\n   main\n  </code>\n  function that contains the call to\n  <code>\n   caml_main\n  </code>\n  that (as I understand) calls bytecode interpreter which interprets the bytecode containing in the executable.\n </p>\n <p>\n  So my questions are:\n </p>\n <ol>\n  <li>\n   <p>\n    How to extract the bytecode without a lots of manual work?\n   </p>\n  </li>\n  <li>\n   <p>\n    How to decompile the Moscow ML bytecode?\n   </p>\n  </li>\n </ol>\n <p>\n  Any help is appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "217",
    "tags": [
        "binary-analysis",
        "decompilation",
        "byte-code"
    ],
    "user": "Anton Danilov",
    "time": "Sep 3, 2015 at 13:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <ol>\n   <li>\n    How to extract the bytecode without a lots of manual work\n   </li>\n  </ol>\n </blockquote>\n <p>\n  As per\n  <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L62\" rel=\"nofollow noreferrer\">\n   https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L62\n  </a>\n  , the last 20 bytes of the EXE make up an\n  <code>\n   exec_trailer\n  </code>\n  structure:\n </p>\n <pre><code>static int read_trailer(int fd, struct exec_trailer * trail)\n{\n  unsigned char buffer[TRAILER_SIZE];\n\n  lseek(fd, (long) -TRAILER_SIZE, 2);\n  if (read(fd, (char*)buffer, TRAILER_SIZE) < TRAILER_SIZE) \n    return TRUNCATED_FILE;\n  trail->code_size = read_size(buffer);\n  trail->data_size = read_size(buffer+4);\n  trail->symbol_size = read_size(buffer+8);\n  trail->debug_size = read_size(buffer+12);\n  trail->magic = read_size(buffer+16);\n  if (trail->magic == EXEC_MAGIC) return 0; else return BAD_MAGIC_NUM;\n}\n</code></pre>\n <p>\n  And as per\n  <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L229\" rel=\"nofollow noreferrer\">\n   https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L229\n  </a>\n  , the bytecode begins at\n  <code>\n   (20 + trail.code_size + trail.data_size + trail.symbol_size + trail.debug_size)\n  </code>\n  bytes before the end of the file.\n </p>\n <blockquote>\n  <ol start=\"2\">\n   <li>\n    How to decompile the Moscow ML bytecode?\n   </li>\n  </ol>\n </blockquote>\n <p>\n  The bytecode interpreter is defined here:\n  <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/interp.c#L87\" rel=\"nofollow noreferrer\">\n   https://github.com/kfl/mosml/blob/master/src/runtime/interp.c#L87\n  </a>\n </p>\n <p>\n  However, even if you were to leverage the parser in that interpreter, the best you'd get is an intermediate representation of the code (consisting of the instructions in\n  <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/instruct.h\" rel=\"nofollow noreferrer\">\n   https://github.com/kfl/mosml/blob/master/src/runtime/instruct.h\n  </a>\n  ), not the decompiled ML code itself.\n </p>\n <p>\n  If you want to convert the intermediate instructions to an actual decompilation, that question would probably be better asked at\n  <a href=\"https://stackoverflow.com/\">\n   https://stackoverflow.com/\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}