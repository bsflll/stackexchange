{
    "title": "ASM Debuggers that visualize the stack (beginner friendly)",
    "link": "https://reverseengineering.stackexchange.com/questions/25913/asm-debuggers-that-visualize-the-stack-beginner-friendly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  (Cross-posted from Stack Overflow)\n </p>\n <p>\n  Are there any debuggers that constantly show a visual of the stack and where everything is within it? For example, taking some random image:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/zE81T.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/zE81T.png\"/>\n  </a>\n </p>\n <p>\n  I use\n  <code>\n   gdb\n  </code>\n  for most debugging/learning, and while it does show the registers, I have to do something like\n  <code>\n   x/8gx $rbp-32\n  </code>\n  everytime I want to see the stack -- and from that I usually figure out how I want the data to show.\n </p>\n <p>\n  Are there any debuggers that make this information friendlier and more visual? I am very, very new to asm and the visual does help when debugging the information. (I'm hoping some off-the-shelf product such as Hopper, IDA, x86db, etc.)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "906",
    "tags": [
        "disassembly",
        "assembly",
        "debuggers",
        "stack",
        "stack-variables"
    ],
    "user": "David542",
    "time": "Sep 16, 2020 at 19:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I assume you are using *nix based systems since you mentioned\n  <code>\n   gdb\n  </code>\n  . If you just want to print the stack/registers when you hit a break point, you can use\n  <code>\n   command\n  </code>\n  to set up some print statements. See\n  <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Break-Commands.html#Break-Commands\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Installing\n  <a href=\"https://github.com/pwndbg/pwndbg\" rel=\"nofollow noreferrer\">\n   pwndbg\n  </a>\n  makes it a lot less exhausting as it prints out the stack and registers every time you step, with  labels on the stack identifying\n  <code>\n   rbp\n  </code>\n  and\n  <code>\n   rsp\n  </code>\n  . Additionally there are tools like\n  <a href=\"https://github.com/hugsy/gef\" rel=\"nofollow noreferrer\">\n   GEF\n  </a>\n  and\n  <a href=\"https://github.com/longld/peda\" rel=\"nofollow noreferrer\">\n   PEDA\n  </a>\n  that are similar, but I don't have any firsthand experience with them.\n  <a href=\"https://i.sstatic.net/bGeAy.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"pwndbg\" src=\"https://i.sstatic.net/bGeAy.png\"/>\n  </a>\n </p>\n <p>\n  Additionally, there are a few debuggers with GUIs, if that is what you are looking for:\n </p>\n <ul>\n  <li>\n   <p>\n    <a href=\"https://www.gnu.org/software/ddd/\" rel=\"nofollow noreferrer\">\n     ddd\n    </a>\n    : graphical front end for\n    <code>\n     gdb\n    </code>\n    , but you'll still see the stack as a list of values.\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://github.com/eteran/edb-debugger\" rel=\"nofollow noreferrer\">\n     edb\n    </a>\n    : similar to\n    <code>\n     ollydbg\n    </code>\n    , but for Linux.\n   </p>\n  </li>\n  <li>\n   <p>\n    <a href=\"https://github.com/cs01/gdbgui\" rel=\"nofollow noreferrer\">\n     gdbgui\n    </a>\n    : browser based frontend for\n    <code>\n     gdb\n    </code>\n    .\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Shane Reilly",
            "time": "Sep 18, 2020 at 12:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David542",
                    "text": "<span class=\"comment-copy\">thanks for all these tips. I'm currently using <code>gdbgui</code> but I have to use the print each time I want to see the stack!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Borland's Turbo Debugger also has a text-window-based UI, with the stack in its own window and showing which values in which locations.  It doesn't tell you what those values represent, but at least it's always visible.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Sep 19, 2020 at 4:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}