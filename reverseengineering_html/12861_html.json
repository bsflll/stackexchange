{
    "title": "CreateProcess - First thread routine - where is the memory allocated for the thread?",
    "link": "https://reverseengineering.stackexchange.com/questions/12861/createprocess-first-thread-routine-where-is-the-memory-allocated-for-the-thr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When calling\n  <code>\n   CreateProcess\n  </code>\n  internally it will call (obviously\n  <code>\n   ZwCreateProcessEx\n  </code>\n  and then)\n  <code>\n   ZwCreateThread\n  </code>\n  with a\n  <code>\n   CreateSuspended\n  </code>\n  set to\n  <code>\n   True\n  </code>\n  , then i assume final initialization is taking place. Afterwards it is calling\n  <code>\n   ZwResumeThread\n  </code>\n  and then everything is working as it should.\n </p>\n <p>\n  My question is focused on the\n  <code>\n   ZwCreateThread\n  </code>\n  function:\n  <a href=\"http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FNtCreateThread.html\" rel=\"noreferrer\">\n   http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FNtCreateThread.html\n  </a>\n </p>\n <p>\n  Where exactly in this whole\n  <code>\n   CreateProcess\n  </code>\n  Routine, it is allocating the memory in the remote process for the\n  <code>\n   ThreadStartRoutine\n  </code>\n  Parameter, which in the ZwCreateThread, is the parameter\n  <code>\n   ThreadContext->EAX\n  </code>\n  , i have seen a couple of NtAllocateVirtualMemory with\n  <code>\n   Protect\n  </code>\n  of value\n  <code>\n   PAGE_EXECUTE_READWRITE - 0x40\n  </code>\n  but none of them is allocating the memory for the\n  <code>\n   NewThreadRoutine\n  </code>\n  .. so where exactly the Thread entrypoint is being allocated?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "memory",
        "winapi",
        "thread",
        "process"
    ],
    "user": "0xAK",
    "time": "Jun 16, 2016 at 12:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Disclaimer:  The implementation of these APIs is likely to change between versions of Windows.  I will be referencing 32-bit Windows XP SP3 in my answer.  Your results may vary.\n </p>\n <h2>\n  How thread creation works\n </h2>\n <p>\n  There are three structures that must be initialized before calling\n  <a href=\"http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FNtCreateThread.html\" rel=\"noreferrer\">\n   <code>\n    NtCreateThread\n   </code>\n  </a>\n  :\n </p>\n <ol>\n  <li>\n   <a href=\"http://processhacker.sourceforge.net/doc/struct___i_n_i_t_i_a_l___t_e_b.html\" rel=\"noreferrer\">\n    <code>\n     INITIAL_TEB\n    </code>\n   </a>\n   : Contains pointers to the stack region\n  </li>\n  <li>\n   <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms679284(v=vs.85).aspx\" rel=\"noreferrer\">\n    <code>\n     CONTEXT\n    </code>\n   </a>\n   : Contains the register state\n  </li>\n  <li>\n   <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff557749(v=vs.85).aspx\" rel=\"noreferrer\">\n    <code>\n     OBJECT_ATTRIBUTES\n    </code>\n   </a>\n   : Contains security attributes for the thread\n  </li>\n </ol>\n <p>\n  In my implementation, there are dedicated functions that handle each of these tasks:\n  <code>\n   BaseCreateStack\n  </code>\n  ,\n  <code>\n   BaseInitializeContext\n  </code>\n  , and\n  <code>\n   BaseFormatObjectAttributes\n  </code>\n  , respectively.\n </p>\n <p>\n  The\n  <code>\n   BaseInitializeContext\n  </code>\n  function is the one you're interested in, however, since the new thread will begin at\n  <code>\n   CONTEXT.Eip\n  </code>\n  .\n </p>\n <p>\n  Interestingly,\n  <code>\n   BaseInitializeContext\n  </code>\n  instead puts the thread's start address (i.e. the entry point of the new process) in\n  <code>\n   CONTEXT.Eax\n  </code>\n  .  And\n  <code>\n   CONTEXT.Eip\n  </code>\n  is set to the address of\n  <code>\n   BaseProcessStartThunk\n  </code>\n  .  (Since\n  <code>\n   kernel32\n  </code>\n  is mapped at the same address in every process, we know this will also be the address of\n  <code>\n   BaseProcessStartThunk\n  </code>\n  in the other process)\n </p>\n <p>\n  So when we call\n  <code>\n   NtCreateThread\n  </code>\n  , we start a new thread in the other process at\n  <code>\n   BaseProcessStartThunk\n  </code>\n  with\n  <code>\n   eax\n  </code>\n  equal to the entry point.\n </p>\n <p>\n  <code>\n   BaseProcessStartThunk\n  </code>\n  saves the start address from register\n  <code>\n   eax\n  </code>\n  . It sets the start address internally by calling\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff567101(v=vs.85).aspx\" rel=\"noreferrer\">\n   <code>\n    NtSetInformationThread\n   </code>\n  </a>\n  with a\n  <code>\n   ThreadInformationClass\n  </code>\n  of\n  <code>\n   ThreadQuerySetWin32StartAddress\n  </code>\n  (see\n  <code>\n   ntddk.h\n  </code>\n  ).  It then calls the start address.  Finally, when the thread returns, it calls\n  <code>\n   ExitThread\n  </code>\n  .\n </p>\n <h2>\n  How the executable image is mapped into the new process\n </h2>\n <p>\n  If you want to know the process was created in the first place, we have to go back a few steps.\n </p>\n <p>\n  First, a handle to the new process executable is opened via\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff567011(v=vs.85).aspx\" rel=\"noreferrer\">\n   <code>\n    NtOpenFile\n   </code>\n  </a>\n  .\n </p>\n <p>\n  The file handle is used to create a\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff563684(v=vs.85).aspx\" rel=\"noreferrer\">\n   section\n  </a>\n  object via\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff566428(v=vs.85).aspx\" rel=\"noreferrer\">\n   <code>\n    NtCreateSection\n   </code>\n  </a>\n  .\n </p>\n <p>\n  A call to\n  <a href=\"http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FSection%2FNtQuerySection.html\" rel=\"noreferrer\">\n   <code>\n    NtQuerySection\n   </code>\n  </a>\n  with\n  <code>\n   InformationClass\n  </code>\n  set to\n  <code>\n   SectionImageInformation\n  </code>\n  is made.  This parses the the section object and fills out a\n  <a href=\"http://undocumented.ntinternals.net/index.html?page=UserMode%2FStructures%2FSECTION_IMAGE_INFORMATION.html\" rel=\"noreferrer\">\n   <code>\n    SECTION_IMAGE_INFORMATION\n   </code>\n  </a>\n  structure, which most notably includes fields the\n  <code>\n   EntryPoint\n  </code>\n  field.  This is how the entry point of the new process is determined.\n </p>\n <p>\n  Eventually,\n  <a href=\"https://doxygen.reactos.org/d2/d9f/ntoskrnl_2ps_2process_8c_source.html\" rel=\"noreferrer\">\n   <code>\n    NtCreateProcessEx\n   </code>\n  </a>\n  is called, given the section handle from\n  <code>\n   NtCreateSection\n  </code>\n  as a parameter.  This is what actually creates the new process and maps the executable image into the new process' address space, among many other things.\n  <code>\n   NtCreateProcessEx\n  </code>\n  also provides the process handle that we pass to\n  <code>\n   NtCreateThread\n  </code>\n  to create the new thread.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "user1354557",
            "time": "Jun 16, 2016 at 16:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">this is hilarious, microsoft were the first to implement injection methods ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Ok so ZwCreateThread has it in the context structure (PCONTEXT + 0xB0)\n </p>\n <p>\n  The api calls to receive the address are like this:\n  <code>\n   CreateSection(..SectionInformation..)\n  </code>\n  - Probably to create to initial address\n </p>\n <p>\n  <code>\n   NtQuerySection(Handle, x, SectionInformation, x, x)\n  </code>\n </p>\n <p>\n  This SectionInformation is containing the address of the EntryPoint of the remote process, later initializing the\n  <code>\n   ThreadContext\n  </code>\n  with the function\n  <code>\n   _BaseInitializeContext@20\n  </code>\n  and then using\n  <code>\n   ZwCreateThread\n  </code>\n  ...\n </p>\n <p>\n  This was all checked under windows xp, hopefully it will be of use for someone\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xAK",
            "time": "Jun 16, 2016 at 15:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}