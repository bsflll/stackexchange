{
    "title": "Where Ida Pro is using my defined structures",
    "link": "https://reverseengineering.stackexchange.com/questions/8898/where-ida-pro-is-using-my-defined-structures",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm have many functions that has a structure pointer as a function parameter (e.g. \"VecInt *\"). Ida knows that each function uses this type (because decompile window works fine). The same will happen if this function uses this type in a local variable.\n </p>\n <p>\n  Now I would like to see all functions that are using this particular structure (as parameter or local variable). I believe Ida maintains this information (\"functions where this structure is used\") as internal data.\n </p>\n <p>\n  Is possible to extract or have access to this data?.\n </p>\n <p>\n  The structures window don't show this information as \"XREF: etc etc\", even when I increase cross reference depth.\n </p>\n <p>\n  Thanks in advance!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "717",
    "tags": [
        "ida",
        "disassembly",
        "struct"
    ],
    "user": "IdaNewUser",
    "time": "May 15, 2015 at 14:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Cross references to structures are only available when used directly in the disassembly view. For retrieving them when used exclusively in the pseudo-code or in the function's prototype, I'm afraid you have no other chance but walking the functions (for function in Functions()), getting the prototype (GetType(function)) and parsing it.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "May 15, 2015 at 14:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Carlos Garcia",
                    "text": "<span class=\"comment-copy\">Alternatively, you could use a specific IDA API (discussed recently [here] (<a href=\"http://reverseengineering.stackexchange.com/questions/8870/extracting-arguments-from-ida\" title=\"extracting arguments from ida\">reverseengineering.stackexchange.com/questions/8870/â€¦</a>) to avoid parsing the GetType() result.</span>",
                    "time": null
                }
            ]
        }
    ]
}