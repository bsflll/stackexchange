{
    "title": "IDA Processor Module: How to maintain register values if instruction doesn't modify them directly (ex. STATUS register, FLAGS, etc.)?",
    "link": "https://reverseengineering.stackexchange.com/questions/31636/ida-processor-module-how-to-maintain-register-values-if-instruction-doesnt-mod",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm developing a processor module for a specific microcontroller. There are cases, when instruction modifies some register (lets call it STATUS) indirectly. By indirectly, I mean, that STATUS is not one of the operands for this instruction. As an example, let's take\n  <code>\n   rlc\n  </code>\n  instruction:\n </p>\n <pre><code>rlc A\n</code></pre>\n <p>\n  It basically rotates A left with Carry (C). C is part of STATUS register (just one bit). I cannot modify anything within the\n  <code>\n   ev_ana_insn\n  </code>\n  callback as per IDA Pro documentation, so it looks like that:\n </p>\n <pre><code>def ev_ana_insn(self, insn):\n    if b == 0x67:  # rlc\n        insn.size = 1\n        insn.itype = self.itype_rlc\n        insn.Op1.type = ida_ua.o_reg\n        insn.Op1.reg = self.ireg_A\n</code></pre>\n <p>\n  That's fine. But in\n  <code>\n   ev_emu_insn\n  </code>\n  I don't understand how and where should I modify the\n  <code>\n   STATUS\n  </code>\n  register, since it is missing (and shouldn't be there in the first place) from\n  <code>\n   insn\n  </code>\n  .\n </p>\n <p>\n  I had a couple of thoughts, but they are not good enough in my opinion:\n </p>\n <ol>\n  <li>\n   Use\n   <code>\n    auxprefs\n   </code>\n   in\n   <code>\n    insn\n   </code>\n   or\n   <code>\n    specvals\n   </code>\n   in\n   <code>\n    Op1\n   </code>\n   and save the information about needed changes to the\n   <code>\n    STATUS\n   </code>\n   register. But still, I need to make these changes and track them somewhere during the analysis and emulation stages.\n  </li>\n  <li>\n   Map the\n   <code>\n    STATUS\n   </code>\n   register to RAM segment and modify it there. Here as example of such an implementation:\n   <a href=\"https://github.com/Treeki/TM155-tools/blob/master/ida-module/ht68fb560.py#L470\" rel=\"nofollow noreferrer\">\n    https://github.com/Treeki/TM155-tools/blob/master/ida-module/ht68fb560.py#L470\n   </a>\n   , but I don't know if it's the correct approach.\n  </li>\n  <li>\n   Put another\n   <code>\n    Op2\n   </code>\n   in my\n   <code>\n    insn\n   </code>\n   , assign it to the\n   <code>\n    STATUS\n   </code>\n   register and modify it during the emulation stage. However, this approach breaks the whole disassembler, since it expects 2 operands, but really there is only 1. I can play around with that during the output stage, but I don't think that it is a correct approach and is more like a hack.\n  </li>\n </ol>\n <p>\n  So, any input is much appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "181",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "none32",
    "time": "Mar 8, 2023 at 9:50",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Do you actually need to do that? What negative effects are you experiencing by not modelling the changes to the\n <code>\n  STATUS\n </code>\n register? This is common on other processors also, such as\n <code>\n  adc\n </code>\n and\n <code>\n  sbb\n </code>\n on x86, and I think the dependency and modifications to\n <code>\n  eflags\n </code>\n are simply not modelled.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "none32",
            "text": "<html><body><span class=\"comment-copy\">\n Actually, I do. Some instructions with completely the same opcode have different mode of operation on operands (byte or word) based on flag in STATUS register. So, by not tracking this flag I don't know which instruction to display.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Is it possible to track the value of the\n <code>\n  STATUS\n </code>\n register statically? Suppose\n <code>\n  A\n </code>\n is loaded with the result of calling a random number generator before invoking some instruction that modifies the\n <code>\n  STATUS\n </code>\n register based upon the contents of\n <code>\n  A\n </code>\n . How would you model the update to the\n <code>\n  STATUS\n </code>\n register?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "none32",
            "text": "<html><body><span class=\"comment-copy\">\n Result of A is irrelevant. The only thing that could modify the STATUS register is a set of specific instructions, independent of the operand(s) contents. Also, it is being initialized during the RESET event to the predefined value. Therefore, it could be statically tracked.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Suppose every possible instruction that could modify the\n <code>\n  STATUS\n </code>\n register was in a\n <code>\n  switch\n </code>\n statement, whose\n <code>\n  switch\n </code>\n expression was the result of calling a randon number generator. How would you track the value of the\n <code>\n  STATUS\n </code>\n register? (I realize this is probably not what's happening in your binary, but the questions are intended to be Socratic.)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}