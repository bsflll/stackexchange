{
    "title": "ARM - Understanding a \"base address\" when reversing firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/30157/arm-understanding-a-base-address-when-reversing-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've read that when reversing firmware from an embedded system it's important to get the right base address of the firmware to make sure cross references to things such as strings work when looking at the firmware in a disassembler (e.g. Ghidra)\n </p>\n <p>\n  So a few questions...\n </p>\n <ol>\n  <li>\n   What exactly is a base address when it comes to firmware and embedded systems and why is it important?\n  </li>\n  <li>\n   Is finding the base address relevant if the firmware is compiled as position independent code?\n  </li>\n  <li>\n   If the base address is wrong what cross references won't work? (just strings?)\n  </li>\n </ol>\n <p>\n  I'm mainly interested in the\n  <code>\n   ARM\n  </code>\n  architecture\n </p>\n <p>\n  Thank you\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "firmware",
        "arm",
        "memory",
        "embedded",
        "firmware-analysis"
    ],
    "user": "BeepBeepComputer",
    "time": "Mar 19, 2022 at 9:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Any code is mapped or loaded at a specific address, from which it is then executed. This can be called base address, load address, or image base. For firmware which is usually optimized to run from flash or other kind of ROM, the fixed address means it can use hardcoded (fixed at compile or link time) addresses to refer to other parts of code or data such as string constants.\n </p>\n <p>\n  Position-independent code\n  <em>\n   in theory\n  </em>\n  can be loaded at any address, but in practice there may be hardware limitations, or it could still refer to fixed addresses for some reason. Making the code position-independent often makes it bigger for little benefit, so it is rarely encountered in embedded devices.\n </p>\n <p>\n  Besides strings, other address references may be missing or wrong if the load address is incorrect: jump tables, function pointers, pointers to other kinds of data and so on.\n </p>\n <p>\n  NOTE: sometimes startup code of the firmware copies parts of itself to predetermined addresses in RAM (for speed or when the data needs to be writable). For example, see\n  <a href=\"https://stackoverflow.com/a/5435043\">\n   this post\n  </a>\n  . In such situations, you may need to copy or remap parts of the input firmware at the final addresses so the pointers line up properly.\n </p>\n <p>\n  For some hints on determining the correct load address, see my\n  <a href=\"https://github.com/skochinsky/papers/blob/master/2010-07%20%5BRecon%5D%20Intro%20to%20Embedded%20Reverse%20Engineering%20for%20PC%20reversers.pdf\" rel=\"nofollow noreferrer\">\n   Recon 2010 presentation\n  </a>\n  (from page 48).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Mar 21, 2022 at 13:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}