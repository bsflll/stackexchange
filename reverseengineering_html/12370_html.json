{
    "title": "How return type works [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12370/how-return-type-works",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions on\n       <b>\n        software development\n       </b>\n       are off-topic here, but can be asked on\n       <a href=\"http://stackoverflow.com/about\">\n        Stack Overflow\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2016-04-08 20:37:12Z\">\n        9 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/12370/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I declared this\n </p>\n <pre><code>int returnDummy() {\n    return 0x100;\n}\n</code></pre>\n <p>\n  and compile as a static libray.\nWhat result will be returned if I declare the prototype like this,\n </p>\n <pre><code>bool returnDummy();\n</code></pre>\n <p>\n  and link upper static library and call that?\n </p>\n <p>\n  Does it simply\n  <strong>\n   casts\n  </strong>\n  0x100 to true, or does it read just lowest 1 byte 0x00 and return false?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "114",
    "tags": [
        "c++"
    ],
    "user": "user160368",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Jacen",
            "text": "<html><body><span class=\"comment-copy\">\n I think this question belongs more to stackoverflow than to reverseengineering.stackexchange. It's about C++ language implementation, not about reverse engineering.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  That's undefined behavior. Aka the compiler/linker is allowed to break all the rules or make up their own.\n </p>\n <p>\n  However the typical function call ABI will put the return value into EAX if it fits (which both bool and int will). With bool either being defined as 0 for false and non zero for true or as zero for false and a specific value (like 0xffffffff or 1) for true.\n </p>\n <p>\n  So after the function call the return register will contain\n  <code>\n   0x100\n  </code>\n  but the compiler could assume it was a specific value (if the ABI said so) and then use that assumption for further optimization.\n </p>\n <p>\n  For example if true was defined as 0xffffffff then a ternary\n  <code>\n   returnDummy()?val1:val2\n  </code>\n  can be implemented as\n </p>\n <pre><code>int mask = returnDummy();\nres = (mask&val1) | (~mask&val2);\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "ratchet freak",
            "time": "Apr 8, 2016 at 9:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}