{
    "title": "How do I view the call stack of an executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/22968/how-do-i-view-the-call-stack-of-an-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Basically I'm trying to edit memory (replace branch with a nop so the executable can't branch to auth function). I've done successful reverse engineering on gaming consoles, but I don't really know where to start on PC. WinDbg? VS2010 debugger? I would really appreciate any tips or pointers, thanks :)\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "330",
    "tags": [
        "memory"
    ],
    "user": "J. Doe",
    "time": "Jan 12, 2020 at 3:05",
    "comments": [
        {
            "user": "Kennet Celeste",
            "text": "<html><body><span class=\"comment-copy\">\n What you are looking for is not suitable for here but rather tutorial websites and/or youtube videos.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think that what you are looking for is a disassembler for\n  <code>\n   PE\n  </code>\n  format files (Windows Portable Executable format). The call stack itself has nothing to do with it - you need to modify the flow of a program.\n </p>\n <p>\n  <code>\n   Windbg\n  </code>\n  and\n  <code>\n   X64dbg\n  </code>\n  are great debugging tools for PC, as well as\n  <code>\n   IDA\n  </code>\n  and\n  <code>\n   Ghidra\n  </code>\n  for static analysis and patching.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "macro_controller",
            "time": "Jan 12, 2020 at 11:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}