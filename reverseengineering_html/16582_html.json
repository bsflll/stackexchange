{
    "title": "Help with LDRD Instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/16582/help-with-ldrd-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to documentation, the LDRD instruction works, as follows\n </p>\n <pre><code>LDRD    R8, R9, [R3, #0x20];  load r8 from a word 32 bytes above the address in R3, and load r9 from  a word 36 bytes above the address in R3\n</code></pre>\n <p>\n  I understand the first part, R8 loads from a word 32 bytes(0x20) above R3. Its the second part I don't understand. Why is it 36 bytes instead of 32?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly",
        "arm"
    ],
    "user": "user1698144",
    "time": "Oct 20, 2017 at 4:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Please referr to the actual\n  <a href=\"https://www.scss.tcd.ie/~waldroj/3d1/arm_arm.pdf\" rel=\"noreferrer\">\n   instruction manual\n  </a>\n  .\n </p>\n <p>\n  from page A4-50:\n </p>\n <blockquote>\n  <p>\n   LDRD (Load Registers Doubleword) loads a pair of ARM registers from two consecutive words of memory.\n  The pair of registers is restricted to being an even-numbered register and the odd-numbered register that\n  immediately follows it (for example, R10 and R11).\n  </p>\n </blockquote>\n <p>\n  tl/dr: 36 is 32 + 4 (it loads to concecutive words)\nbasically it says at offset 0x20 to r3, get two words for r8 and r9.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Nordwald",
            "time": "Oct 20, 2017 at 7:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}