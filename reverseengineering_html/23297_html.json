{
    "title": "Hash from pseudocode [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/23297/hash-from-pseudocode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs\n        <a href=\"/help/closed-questions\">\n         details or clarity\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Add details and clarify the problem by\n       <a href=\"/posts/23297/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2020-02-28 20:54:06Z\">\n        5 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/23297/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  What is the hash? Generated from ida pro\n </p>\n <pre><code>int __fastcall hash(_BYTE *a1)\n{\n  _BYTE *v1; // r4@1\n  int v2; // r5@1\n  int v3; // r6@1\n\n  v1 = a1;\n  v2 = 0;\n  v3 = 1;\n  while ( *v1 )\n  {\n    v3 = (*v1 + v3) % 51407;\n    v2 = (v3 + v2) % 51407;\n    ++v1;\n  }\n  return ~(v3 | (v2 << 16));\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "-2",
    "answers": 1,
    "views": "107",
    "tags": [
        "ida",
        "c++",
        "c"
    ],
    "user": "William E. Conger",
    "time": "5 years ago",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n Ways to solve this on your own: 1. Research code for hash algorithms, compare to this decompilation 2. Run an input through this function, compare it to the output of the same input through known hash functions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<html><body><span class=\"comment-copy\">\n It is important that you include in the question what you've already tried and the research you've done.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  for an\n  <strong>\n   array x[]\n  </strong>\n  whose\n  <strong>\n   count is n\n  </strong>\n </p>\n <p>\n  the series for v3 without the mod()  will be\n </p>\n <p>\n  n * (1 + x[0]) +  (n-1) * x[1] +  (n-2) * x[2] + (n-3) * x[3] + .... (n-r) * x[r] +...+ x[n]\n </p>\n <p>\n  the series for v2 without the mod() will be\n </p>\n <p>\n  1+x[0]+x[1]+x[2]+....x[r]+...x[n]\n </p>\n <p>\n  assuming \"secret\" is passed as input\n  \n\n  then hash will be 0xf72efd78\n </p>\n <p>\n  redone in python\n </p>\n <pre><code>input = \"secret\"\nl = len(input)\nv2 = 0\nv3 = 1\nfor i in range(0,l,1):\n    v3 = (ord(input[i]) + v3)\n    v2 = v3 + v2\n    print(hex(v2),hex(v3))\nprint (\"hash for input %s = %08x\" %(input,(~(v2 << 16 | v3)) & 0xffffffff))\n</code></pre>\n <p>\n  result\n </p>\n <pre><code>0x74 0x74  \n0x14d 0xd9 \n0x289 0x13c\nconforming the series for v2\n>>> hex( 3 * (1 + ord(\"secret\"[0])) + 2 * ord(\"secret\"[1]) + 1 * ord(\"secret\"[2]))\n'0x289'\n0x437 0x1ae\n0x64a 0x213\n0x8d1 0x287\nhash for input secret = f72efd78\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Feb 20, 2020 at 17:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "William E. Conger",
                    "text": "<span class=\"comment-copy\">It is Adler-32 with custom base number 51407</span>",
                    "time": null
                }
            ]
        }
    ]
}