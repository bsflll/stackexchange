{
    "title": "Operand address in Capstone disassembly is not the same as in IDA/HIEW",
    "link": "https://reverseengineering.stackexchange.com/questions/17178/operand-address-in-capstone-disassembly-is-not-the-same-as-in-ida-hiew",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to disassembly x64 executable (dll) using\n  <a href=\"http://www.capstone-engine.org\" rel=\"nofollow noreferrer\">\n   Capstone\n  </a>\n  . But operand address returned by it doesn't match disassembly from IDA/HIEW.\n </p>\n <p>\n  Here is the machine code:\n </p>\n <pre><code>0x48, 0x8D, 0x0D, 0xED, 0x44, 0x01, 0x00\n</code></pre>\n <p>\n  In IDA/HIEW the disassembly is:\n </p>\n <pre><code>lea  rcx,[0000148F8]\n</code></pre>\n <p>\n  But by using Capstone (with PowerShell bindings) I get different address\n  <code>\n   0x144ed\n  </code>\n  :\n </p>\n <pre><code>Get-CapstoneDisassembly -Architecture CS_ARCH_X86 -Mode CS_MODE_64 -Bytes (\n    0x48, 0x8D, 0x0D, 0xED, 0x44, 0x01, 0x00\n) -Address 0x1800000004096 -Detailed\n\nSize     : 7\nAddress  : 0x180001000\nMnemonic : lea\nOperands : rcx, qword ptr [rip + 0x144ed]\nBytes    : {72, 141, 13, 237, 68, 1, 0, 148, 204, 148, 0, 17, 0, 128, 0, 0}\nRegRead  :\nRegWrite :\n</code></pre>\n <p>\n  You can verify this online by using\n  <a href=\"https://alexaltea.github.io/capstone.js/\" rel=\"nofollow noreferrer\">\n   Capstone.js\n  </a>\n  and\n  <code>\n   488D0DED440100\n  </code>\n  as input.\n </p>\n <p>\n  I've also tried\n  <a href=\"https://github.com/spazzarama/SharpDisasm\" rel=\"nofollow noreferrer\">\n   SharpDisasm\n  </a>\n  , but result is the same:\n </p>\n <pre><code>lea rcx, [rip+0x144ed]\n</code></pre>\n <p>\n  Could somebody help me to understand what's happening here?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "346",
    "tags": [
        "disassembly",
        "address",
        "capstone"
    ],
    "user": "beatcracker",
    "time": "Jan 12, 2018 at 0:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is\n  <a href=\"https://en.wikipedia.org/wiki/X86#Addressing_modes\" rel=\"nofollow noreferrer\">\n   RIP-relative addressing\n  </a>\n  . Basically, it is adding 0x144ed to the address of the very next instruction - i.e. rcx =\n  <code>\n   rip\n  </code>\n  + 7 (since this instruction is 7 bytes) + 0x144ed. In IDA, that instruction is located at 0x404 so it is adding 0x144ed to (0x404+7) = 0x148f8\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "cimarron",
            "time": "Jan 12, 2018 at 1:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}