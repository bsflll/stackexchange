{
    "title": "To what points [esp+2Ch]?",
    "link": "https://reverseengineering.stackexchange.com/questions/12805/to-what-points-esp2ch",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am analyzing a Windows executable file(PE Format), probably written in Borland Delphi. The program starts with the following instructions:\n </p>\n <pre><code>    pusha                      (1)\n    pushf                      (2)\n    xor ebp, ebp\n    jmp add_eh\n\nadd_eh:\n    mov eax, ss:off_4025E5[ebp]\n    mov dword ptr ss:(loc_402159+1)[ebp], eax\n    push offset loc_40215f                (3)\n    push dword ptr fs:0\n    mov fs:0, esp                        (4)\n    mov eax, [esp+2Ch]                    (5)\n    cmp [eax+IMAGE_DOS_HEADER.e_magic], 'ZM'\n    jnz short loc_40206C\n</code></pre>\n <p>\n  I reproduced on paper the stack until the instruction marked with (5), it seems that at (5) the esp+2Ch is pointing above the first register(AX) pushed by (1).\n </p>\n <p>\n  Where does esp+2Ch point and what can be it's value?\n </p>\n <p>\n  Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "650",
    "tags": [
        "windows",
        "assembly",
        "pe",
        "esp"
    ],
    "user": "c70u",
    "time": "Jun 8, 2016 at 6:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  based on the corrected sequence that instruction\n  <strong>\n   fetches the dword\n  </strong>\n  prior to all the pushes\n </p>\n <pre><code>pusha pushes 8 general purpose register  = 0x20   = 0x20\npushf pushes 1 flag register             = 0x04   = 0x24\n</code></pre>\n <p>\n  ebp is 0\n  \n\n  mov eax, is/can/maybe junk anyway doesn't alter the stack\n  \n\n  the next instuction also doesnt alter the stack\n </p>\n <pre><code>the next 2 pushes alter the stack        = 0x08   = 0x2c\n</code></pre>\n <p>\n  the next instruction sets the seh handler\n </p>\n <p>\n  so it fetches the DWORD from the stack prior to pusha\n </p>\n <p>\n  if this was starting of a call this DWORD could be return address of the call    it can be from a earlier push instruction or moved to stack prior to pusha\n </p>\n <p>\n  just to clarify i assembled the instuction in place somewhere in ollydbg and traced through it see the output below\n </p>\n <pre><code>main    ntdll.76E96F51  NOP\nmain    ntdll.76E96F52  NOP\nmain    ntdll.76E96F53  NOP\nmain    ntdll.76E96F54  NOP\nmain    ntdll.76E96F55  PUSH    0BA0000 [0020F99C]=00000000 ESP=0020F99C\nmain    ntdll.76E96F5A  PUSHAD      ESP=0020F97C\nmain    ntdll.76E96F5B  PUSHFD  [0020F978]=76E212AD ESP=0020F978\nmain    ntdll.76E96F5C  XOR     EBP, EBP\nmain    ntdll.76E96F5E  MOV     EAX, DWORD PTR SS:[EBP+calc.0BA25E5]    [00BA25E5]=0F087E3B EAX=0F087E3B\nmain    ntdll.76E96F64  MOV     DWORD PTR SS:[EBP+calc.ULongAdd], EAX   [00BA215A]=0F087E3B\nmain    ntdll.76E96F6A  PUSH    0BA215F [0020F974]=0020F9F4 ESP=0020F974\nmain    ntdll.76E96F6F  PUSH    DWORD PTR FS:[0]    [7FFDF000]=0020F9A0 ESP=0020F970\nmain    ntdll.76E96F76  MOV     DWORD PTR FS:[0], ESP   [7FFDF000]=0020F9A0\nmain    ntdll.76E96F7D  MOV     EAX, DWORD PTR SS:[ESP+2C]  [0020F99C]=00BA0000 EAX=00BA0000 \n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 8, 2016 at 10:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Unless the op messed up some instructions (however it seems he did, looking at that strange push referencing <code>fs</code>), the [esp+2C] isn't in <code>fs</code>. Without actually calculating offsets, i'd have assumed this restores <code>eax</code> which gets smashed a few instructions earlier. In cases like this, it's much easier to single-step a debugger a few times than trying to figure out manually.</span>",
                    "time": null
                },
                {
                    "user": "c70u",
                    "text": "<span class=\"comment-copy\">I have added two new instructions that possibly make it easier to understand the ASM snippet.</span>",
                    "time": null
                },
                {
                    "user": "c70u",
                    "text": "<span class=\"comment-copy\">Added the correct sequence of instructions, sorry for the mistake.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@ner0x652  edited my answer  you need to know what was on the stack prior to pusha to know what will be in eax after all these instruction</span>",
                    "time": null
                }
            ]
        }
    ]
}