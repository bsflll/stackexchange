{
    "title": "How can I quickly tell which ARM Thumb version a particular piece of code is using?",
    "link": "https://reverseengineering.stackexchange.com/questions/31275/how-can-i-quickly-tell-which-arm-thumb-version-a-particular-piece-of-code-is-usi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working with an ARM processor: an STM32F407VGT6 board, which IIUC powers a 32-bit Arm® Cortex®-M4. I need to inspect the binary weight of some instruction, so I used\n  <code>\n   objdump\n  </code>\n  like this:\n </p>\n <pre><code>arm-none-eabi-objdump -b binary --adjust-vma=0x08000000 --start-address=0x08000002 \\\n  -marm --disassembler-options=force-thumb -D binary_program.bin > /tmp/binary_program-bin.s\n</code></pre>\n <p>\n  First, I tested a loop of instructions like this:\n </p>\n <pre><code>adds    r0, r0, #255\n</code></pre>\n <p>\n  and I got in the\n  <code>\n   .s\n  </code>\n  file\n </p>\n <pre><code> 80002e4:   30ff        adds    r0, #255    ; 0xff\n</code></pre>\n <p>\n  After a\n  <strong>\n   long\n  </strong>\n  search in\n  <a href=\"https://developer.arm.com/documentation/ddi0487/latest\" rel=\"nofollow noreferrer\">\n   the ARM manual\n  </a>\n  (and I hope I found the correct one), I could map that binary as:\n </p>\n <pre><code>instruction: 001_10_000_11111111\nbit mask:    111_11_198_76543210\n             543_21_0\n</code></pre>\n <p>\n  where\n </p>\n <ul>\n  <li>\n   <code>\n    111\n   </code>\n   = \"Add, subtract, compare, move (one low register and immediate)\", page F3-7301\n  </li>\n  <li>\n   <code>\n    10\n   </code>\n   = \"ADD, ADDS (immediate)\", version T2 is at page F5-7453\n  </li>\n  <li>\n   <code>\n    000\n   </code>\n   =\n   <code>\n    r0\n   </code>\n   , source and destination register\n  </li>\n  <li>\n   <code>\n    11111111\n   </code>\n   = 255, the immediate operand\n  </li>\n </ul>\n <p>\n  This, IIUC, is\n  <strong>\n   Thumb-2\n  </strong>\n  . So far so good, but the problem is that other instructions, which are not representable with Thumb-2, get mapped to\n  <strong>\n   Thumb-3\n  </strong>\n  , like\n </p>\n <pre><code>adds    r0, r0, #256\n</code></pre>\n <p>\n  which becomes\n </p>\n <pre><code> 80002e4:   f510 7080   adds.w  r0, r0, #256    ; 0x100\n</code></pre>\n <p>\n  Obviously this is no more T2, and the bit encoding should be something like\n </p>\n <pre><code>      i 0 op1  S Rn   0 imm3 Rd   imm8\n11110_1_0_1000_1_0000_0_111__0000_10000000\n33222_2_2_2222_2_1111_1_111__1198_76543210\n10987_6_5_4321_0_9876_5_432__10\n</code></pre>\n <p>\n  as reported at \"Data-processing (modified immediate)\", pages F3-7310 and F3-7311. This lead me to pages F5-7452 to 55, \"ADD, ADDS (immediate)\".\nSearching a lot, I found it should be T3: the mnemonic matches (\n  <code>\n   adds.w\n  </code>\n  ). This would mean the processor expands the bits\n  <code>\n   11:0\n  </code>\n  like this:\n </p>\n <ol>\n  <li>\n   it concatenates a\n   <code>\n    1\n   </code>\n   with the bits\n   <code>\n    6:0\n   </code>\n   ,\n   <code>\n    1 0000000\n   </code>\n  </li>\n  <li>\n   extends with\n   <code>\n    0\n   </code>\n   s to get a 32 bit word:\n   <code>\n    00000000000000000000000010000000\n   </code>\n  </li>\n  <li>\n   it rotates right the integer of the amount specified in bits\n   <code>\n    11:7\n   </code>\n   , which is\n   <code>\n    11111\n   </code>\n   , or 31, getting\n   <code>\n    00000000000000000000000100000000 = 256\n   </code>\n   .\n  </li>\n </ol>\n <p>\n  The point is, since I'm using the same compiler for both the codes, and they end up to use different ISAs to translate the instructions,\n  <strong>\n   how can I tell which one is which\n  </strong>\n  , without dwelling the depths of the ARM manual every time?\n </p>\n <p>\n  Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "81",
    "tags": [
        "disassembly",
        "binary-analysis",
        "arm",
        "binary-format",
        "thumb2"
    ],
    "user": "Alessandro Bertulli",
    "time": "Dec 14, 2022 at 16:19",
    "comments": [],
    "answers_data": []
}