{
    "title": "Understanding Hex-Rays pseudo code",
    "link": "https://reverseengineering.stackexchange.com/questions/20353/understanding-hex-rays-pseudo-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What is the meaning of the following pseudo-code?:\n </p>\n <ol>\n  <li>\n   <p>\n    <code>\n     BYTE1(v2)\n    </code>\n    or\n    <code>\n     BYTE1(v2)\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     HIBYTE(v2)\n    </code>\n   </p>\n  </li>\n </ol>\n <p>\n  Is there any explanation for those macros? How can I implement those macros in C code?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "hexrays"
    ],
    "user": "psudoCode",
    "time": "Jan 14, 2019 at 9:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   BYTE1(v2)\n  </code>\n  is the second byte of value v2. according to\n  <a href=\"https://github.com/nihilus/hexrays_tools/blob/master/code/defs.h\" rel=\"nofollow noreferrer\">\n   the reference\n  </a>\n  it's Zero-Indexed. defined as:\n </p>\n <pre><code>#define BYTEn(x, n)   (*((_BYTE*)&(x)+n))\n#define BYTE1(x)   BYTEn(x,  1)         // byte 1 (counting from 0)\n</code></pre>\n <p>\n  for example\n  <code>\n   BYTE1(0x1213141516)\n  </code>\n  is 0x15. (according to Little Endian Byte Order)\n </p>\n <p>\n  <code>\n   HIBYTE(v2)\n  </code>\n  is the higher byte of value v2. defined as:\n </p>\n <pre><code>#define HIBYTE(x)   (*((_BYTE*)&(x)+1))\n</code></pre>\n <p>\n  for example\n  <code>\n   HIBYTE(0x1213)\n  </code>\n  is 0x12. (according to Little Endian Byte Order)\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "arman",
            "time": "Jan 13, 2019 at 12:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">Note: HIBYTE <b>used</b> to mean that, but it has changed (contrary to IDA 7.0 defs.h and minwindef.h) to mean <i>the highest byte</i>, e.g., BYTE7 in an __int64.  Not sure when this happened, but somewhere between 7.1 and 7.5.  Not cool IDA.  After C++ conversion, it now looks like this: <code>*(reinterpret_cast&lt;uint8*&gt;(&amp;x)+(sizeof x/sizeof(uint8) - 1))</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Open your IDA installation folder open plugins\\defs.h, this file contains all of the macros used by the hexrays decompiler. It can also be found at the github in arman's answer.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Zman37",
            "time": "Jan 14, 2019 at 22:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Important\n  </strong>\n  -- this definition has changed in recent versions of IDA, both in\n  <code>\n   defs.h\n  </code>\n  and in the decompiler output.\n </p>\n <p>\n  As of (some version of IDA between 7.1 and 7.5) the meaning of HIBYTE means something different, I guess you would call it the\n  <em>\n   most significant byte\n  </em>\n  , or\n  <em>\n   highest byte\n  </em>\n  , or\n  <em>\n   last byte\n  </em>\n  .\n </p>\n <p>\n  e.g., in an\n  <code>\n   __int32\n  </code>\n  it now means\n  <code>\n   BYTE3\n  </code>\n  , in an\n  <code>\n   __int64\n  </code>\n  it would mean\n  <code>\n   BYTE7\n  </code>\n  .\n </p>\n <p>\n  This is contrary to the default windows definition and older versions of IDA.\n </p>\n <pre><code>    // minwindef.h\n    auto result_win = static_cast<BYTE>(static_cast<uintptr_t>(x) >> 8 & 0xff);\n\n    // ida_defs_70.h\n    auto result_ida70 = *(reinterpret_cast<uint8*>(&x)+1);\n\n    // ida_defs_75.h\n    auto result_ida75 = *(reinterpret_cast<uint8*>(&x)+(sizeof x/sizeof(uint8) - 1));\n</code></pre>\n <p>\n  Make sure that you are using the definition that applies to your version of IDA, which can be found in\n  <code>\n   defs.h\n  </code>\n  in your IDA executable's path under\n  <code>\n   plugins/\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Orwellophile",
            "time": "Jan 15, 2021 at 20:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}