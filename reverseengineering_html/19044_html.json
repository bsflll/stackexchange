{
    "title": "How can you explore behavior in malware that is not being performed?",
    "link": "https://reverseengineering.stackexchange.com/questions/19044/how-can-you-explore-behavior-in-malware-that-is-not-being-performed",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a malware sample that I know is acting as a bot and connects to a botnet. The problem is that it uses no known protocol that I am familiar with (it's IRC-like) and doesn't actually do anything until it is issued commands.\n </p>\n <p>\n  How can I explore behavior that can be issued to it via a C&C server? I was thinking of possibly using symbolic execution on the part of the program that receives commands? Static analysis would be tedious since the code is obfuscated.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "116",
    "tags": [
        "malware"
    ],
    "user": "Jeremy",
    "time": "Aug 14, 2018 at 21:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would recommend to use a Debugger like x32dbg and change the parameters on the fly to trigger the behaviour you are looking for.\n </p>\n <p>\n  Additionally you could use a service like INetSim to make it respond to the queries of your malware sample.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "hariom",
            "time": "Aug 13, 2018 at 8:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">I ended up locating the subroutine that accepted the command string and also locating the fail procedure (i.e, unrecognized command) and, using angr symbolic execution engine, was able to explore all routes that did not reach the fail. With a bit of hackish code I was able to get several commands out of the binary.  I had previously already tried simulating the network with INetSim, but stepping through the code was too tedious to do for each command.</span>",
                    "time": null
                }
            ]
        }
    ]
}