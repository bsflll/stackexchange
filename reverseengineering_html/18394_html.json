{
    "title": "Confuse with MOVZX",
    "link": "https://reverseengineering.stackexchange.com/questions/18394/confuse-with-movzx",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer an app. I can't understand some instructions:\n </p>\n <pre><code>EBP-4h=>Self\nEBP-8h=>OptionData\n...\nmov     eax, [ebp+var_4]\nmovzx   eax, byte ptr [eax+1Ch]      // (1)\nmov     edx, [ebp+var_8]\nmov     [edx+8], eax\nmov     eax, [ebp+var_4]\nmovzx   eax, byte ptr [eax+1Dh]     // (2)\nmov     edx, [ebp+var_8]\nmov     [edx+0Ch], eax\nmov     eax, [ebp+var_8]\nmov     dword ptr [eax+10h], 1F41h  // (3)\n...\n</code></pre>\n <p>\n  Based on reversing other parts of the app, I believe edx+8, edx+0C, edx+10 are all integers; eax+1C is 'scP8B' and eax+1D is 'ocDynamicMR2'.\n </p>\n <p>\n  I don't understand instructions (1) and (2).\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly",
        "delphi"
    ],
    "user": "baohiep",
    "time": "May 28, 2018 at 16:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n did you try to look up this instruction in any documentation?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tuantm",
            "text": "<html><body><span class=\"comment-copy\">\n If you are using IDA, you can turn on Auto comments, this option will explain some \"basic information\" for you. The answer for this question is @Henno Brandsma's response!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   eax + 0x1c\n  </code>\n  is a pointer to bytes, and the value of the byte at that address is put into the register\n  <code>\n   eax\n  </code>\n  where the byte value is “zero-extended” (hence the mov\n  <em>\n   zx\n  </em>\n  ), so that e.g. a byte\n  <code>\n   0xdf\n  </code>\n  would become a dword\n  <code>\n   0x000000df\n  </code>\n  , so not sign-extended. So in C:\n  <code>\n   eax = (unsigned int) b[0x1c]\n  </code>\n  , where\n  <code>\n   unsigned char *b\n  </code>\n  is the pointer stored in\n  <code>\n   var_4\n  </code>\n  , say.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Henno Brandsma",
            "time": "May 28, 2018 at 18:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">A nice link to some place where the questioner could <a href=\"http://ref.x86asm.net/\" rel=\"nofollow noreferrer\">look up opcodes</a> in the future would have been awesome. After all none of this is magic and the question is at the level of \"please do my homework\".</span>",
                    "time": null
                }
            ]
        }
    ]
}