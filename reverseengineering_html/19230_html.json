{
    "title": "Debug a windows service entry without windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/19230/debug-a-windows-service-entry-without-windbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  An\n  <a href=\"https://reverseengineering.stackexchange.com/questions/10910/reversing-a-windows-service\">\n   answer to a similar question here\n  </a>\n  mentions that the entry of a windows service can be patched to allow attaching a debugger (in my case x64dbg). Google searches on the topic are all related to setting a breakpoint in the source.\n </p>\n <p>\n  I'd like to know how exactly this is done when only a binary is available.\n </p>\n <p>\n  I'm trying to port a windows service to Linux. I'm not very familiar with the windows OS. While I can step through normal routines, the service probes the hardware and sets up a few global values. For this reason I need to know exactly what is being sent/received during its initialization.\n </p>\n <p>\n  I did try\n  <code>\n   windbg\n  </code>\n  but found it to be very difficult to use when no source code is present.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "kernel-mode",
        "x64dbg",
        "windows-10"
    ],
    "user": "Twifty",
    "time": "Sep 2, 2018 at 17:25",
    "comments": [
        {
            "user": "Devender Singh Rana",
            "text": "<html><body><span class=\"comment-copy\">\n Does x64dbg support kernel level debugging like windbg?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'll post my own answer here so I can find this again in the future.\n </p>\n <ol>\n  <li>\n   Using\n   <a href=\"https://ntcore.com/?page_id=388\" rel=\"nofollow noreferrer\">\n    CFF Explorer\n   </a>\n   open the service binary.\n  </li>\n  <li>\n   Find the\n   <code>\n    AddressOfEntryPoint\n   </code>\n   in the\n   <code>\n    Optional Header\n   </code>\n   .\n  </li>\n  <li>\n   Find the\n   <code>\n    .text\n   </code>\n   entry in\n   <code>\n    Section Headers\n   </code>\n   .\n  </li>\n  <li>\n   Calculate\n   <code>\n    raw_offset = raw_address - virtual_address + AddressOfEntryPoint\n   </code>\n   .\n  </li>\n  <li>\n   Within the built-in hex editor, navigate to\n   <code>\n    raw_address\n   </code>\n   .\n  </li>\n  <li>\n   Change the two bytes there to\n   <code>\n    EB FE\n   </code>\n   .\n  </li>\n  <li>\n   Save and exit.\n  </li>\n  <li>\n   Modify\n   <code>\n    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ServicesPipeTimeout\n   </code>\n   to\n   <code>\n    0xFFFFFFFF\n   </code>\n   (requires reboot).\n  </li>\n  <li>\n   Replace service with patched version and start (its status should become 'starting').\n  </li>\n  <li>\n   In\n   <code>\n    x64dbg\n   </code>\n   check\n   <code>\n    Enable Debug Privilege\n   </code>\n   , restart\n   <code>\n    x64dbg\n   </code>\n   .\n  </li>\n  <li>\n   Attach to the service.\n  </li>\n  <li>\n   Replace the\n   <code>\n    EB FE\n   </code>\n   bytes with their original values.\n  </li>\n  <li>\n   The entry point can now be debugged.\n  </li>\n </ol>\n <p>\n  Other notes -\n  <code>\n   x64dbg\n  </code>\n  will not stop at the entry point of a running service. Use the command\n  <code>\n   :EntryPoint\n  </code>\n  to display its address and scroll into view.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "ProGM",
            "time": "Oct 9, 2018 at 15:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}