{
    "title": "Is it possible to hook CPU instructions without severe performance impact?",
    "link": "https://reverseengineering.stackexchange.com/questions/13613/is-it-possible-to-hook-cpu-instructions-without-severe-performance-impact",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been working on some unpackers, and I noticed that at their end, they mostly use this:\n </p>\n <pre><code>mov edx, [ebp+oep]\ncall edx ; now, you're at the OEP of the original binary\n</code></pre>\n <p>\n  Or this:\n </p>\n <pre><code>mov ecx, [ebp+oep]\njmp ecx\n</code></pre>\n <p>\n  Or this:\n </p>\n <pre><code>mov eax, [ebp+oep]\npush eax\nret\n</code></pre>\n <p>\n  Knowing that, with a quick hook on absolute jumps/calls you'd unpack stuff in literally seconds. Apart from that, some software uses\n  <code>\n   cpuid\n  </code>\n  and\n  <code>\n   rdstc\n  </code>\n  to identify you, while protecting the assembly heavily with a lot of obfuscation. Put an \"instruction breakpoint\" on either, and you just bypassed everything faster than your eye blinks!\n </p>\n <p>\n  Is what I'm saying possible, without severe performance hits? I am aware of tracing, but that's really really slow so it's not an option.\n </p>\n <p>\n  Edit: I am aware of the existence of hypervisors, I just have no idea if they fit my situation, and if so, I wouldn't know how to apply those techniques to work, so any pointers, even if Google keywords, would be great.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "breakpoint",
        "hooking",
        "hypervisor"
    ],
    "user": null,
    "time": "Oct 4, 2018 at 4:25",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n you can put a physical breakpoint somewhere like that, but it might be detected by the program.  Using a hypervisor-level debugger, you can place a virtual breakpoint, and the performance is good, but the hypervisor might be detected by the program.  There is no single solution.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Writing an hypervisor\n </h1>\n <p>\n  The best way to currently do this is by creating a micro-hypervisor, exploiting technologies originally created to support faster virtualization to monitor usermode as well as kernelmode code. This became quite a common replacement for AVs once\n  <code>\n   SSDT\n  </code>\n  hooking was protected by Microsoft using patch-guard. Additionally, a few security companies sprung out, using hypervisors and micro-kernels to protect and separate different components of the OS (an example is\n  <a href=\"https://www.bromium.com/\" rel=\"nofollow noreferrer\">\n   Bromium\n  </a>\n  ), and Microsoft recently announced their\n  <a href=\"https://blogs.windows.com/msedgedev/2016/09/27/application-guard-microsoft-edge/#f0wG5LXKQPklAx2D.97\" rel=\"nofollow noreferrer\">\n   Application Guard\n  </a>\n  which uses the same technique and actually installs an hypervisor when windows is installed.\n </p>\n <h2>\n  Technical implementation\n </h2>\n <p>\n  Although setting up an  hypervisor might seem like a silver bullet, it has many disadvantages:\n </p>\n <ol>\n  <li>\n   Although most CPUs today support hypervisors, not all do.\n  </li>\n  <li>\n   Windows does not yet support nested-virtualization and is installing a hypervisor. Nexted virtualization has multiple complications and makes the hypervisor development process more complex. There can only be one hypervisor unless the first one installed supports nesting.\n  </li>\n  <li>\n   Virtualization software heavily relies on virtualization support by the CPU, and running a VM and a hypervisored host might become tricky. Same goes for running a hypervisor inside a virtual machine (so you can debug it properly).\n   <a href=\"https://4sysops.com/archives/how-to-run-hyper-v-under-vmware-workstation/\" rel=\"nofollow noreferrer\">\n    This\n   </a>\n   is a decent explanation of how to do that in VMWare.\n  </li>\n </ol>\n <p>\n  Today, there are several open source hypervisors available, most for experimentation purposes and don't include a lot of actual features past the infrastructure needed to set up a functional hypervisor.\n </p>\n <p>\n  Here are some of those open source proof of concepts, that could be used as a starting point:\n </p>\n <ol>\n  <li>\n   <a href=\"https://github.com/hzqst/Syscall-Monitor\" rel=\"nofollow noreferrer\">\n    https://github.com/hzqst/Syscall-Monitor\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/ionescu007/SimpleVisor\" rel=\"nofollow noreferrer\">\n    https://github.com/ionescu007/SimpleVisor\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/asamy/ksm\" rel=\"nofollow noreferrer\">\n    https://github.com/asamy/ksm\n   </a>\n  </li>\n  <li>\n   <a href=\"https://github.com/tandasat/HyperPlatform\" rel=\"nofollow noreferrer\">\n    https://github.com/tandasat/HyperPlatform\n   </a>\n  </li>\n </ol>\n <h1>\n  overwriting IVT/IDT/SSTD\n </h1>\n <p>\n  Hooking the\n  <a href=\"https://en.wikipedia.org/wiki/Interrupt_vector_table\" rel=\"nofollow noreferrer\">\n   Interrupt Vector Table\n  </a>\n  ,\n  <a href=\"https://en.wikipedia.org/wiki/Interrupt_descriptor_table\" rel=\"nofollow noreferrer\">\n   Interrupt Descriptor Table\n  </a>\n  or the\n  <a href=\"https://en.wikipedia.org/wiki/System_Service_Descriptor_Table\" rel=\"nofollow noreferrer\">\n   System Service Dispatch Table\n  </a>\n  was very common in the not so distant past. Although this does not give the same granularity a hypervisor has and you won't be able to detect specific instructions, it was common practice that was partially replaced by hypervisors to get low level monitoring not provided by the OS.\n </p>\n <p>\n  The basic idea behind it is to override the list of addresses a CPU executes when certain interrupts are triggered. This is usually the OS's responsibility to handle interrupts and how many low level functionality is provided by the OS (such as managing memory and permissions, paging, multiple task support, input/output with peripherals etcetera). This technique was made somewhat irrelevant on certain OSes using techniques like\n  <a href=\"https://en.wikipedia.org/wiki/Kernel_Patch_Protection\" rel=\"nofollow noreferrer\">\n   PatchGuard\n  </a>\n  .\n </p>\n <h1>\n  An\n  <code>\n   rdtsc\n  </code>\n  trick\n </h1>\n <p>\n  The\n  <code>\n   rtdsc\n  </code>\n  instruction is a bit special in a way not may other instructions are. Quoted from\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_278.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   When in protected or virtual 8086 mode, the time stamp disable (TSD) flag in register CR4 restricts the use of the RDTSC instruction as follows. When the TSD flag is clear, the RDTSC instruction can be executed at any privilege level; when the flag is set, the instruction can only be executed at privilege level 0.\n  </p>\n </blockquote>\n <p>\n  It is special because it has it's own disabling control bit(\"time stamp disable\") in\n  <code>\n   CR4\n  </code>\n  . When that control bit is set, only kernelmode code is allowed to execute the\n  <code>\n   rdtsc\n  </code>\n  instruction, but what's more interesting is that when this control bit is set, using\n  <code>\n   rdtsc\n  </code>\n  from usermode will trigger a\n  <a href=\"https://en.wikipedia.org/wiki/General_protection_fault\" rel=\"nofollow noreferrer\">\n   General Protection Fault\n  </a>\n  , thus making such instructions detectable by the kernel.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Apr 14, 2017 at 16:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">Windows does support <a href=\"https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/nested-virtualization\" rel=\"nofollow noreferrer\">nested virtualization</a>. Not sure the exact time but at least since <a href=\"https://www.interfacett.com/blogs/nested-virtualization-in-windows-10-what-is-it-and-how-to-enable-it/\" rel=\"nofollow noreferrer\">before this answer</a></span>",
                    "time": null
                }
            ]
        }
    ]
}