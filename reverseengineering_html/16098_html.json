{
    "title": "Find out how a program is reading a file",
    "link": "https://reverseengineering.stackexchange.com/questions/16098/find-out-how-a-program-is-reading-a-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to manually \"pull out\" information of files of a specific file format. Needless to say, they were encoded in some form or another - I couldn't access a \"plaintext\" version of them. However, the program associated with the file obviously is able to read them - And I was wondering if I could somehow reverse engineer that program and thus find out how they're being encoded, to read the content myself.\n </p>\n <p>\n  It's a broad question - But I'm not sure where else to start.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "1k",
    "tags": [
        "decompilation",
        "file-format",
        "encodings"
    ],
    "user": "user2065501",
    "time": "Aug 16, 2017 at 0:22",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Hello, try to specify what OS and what architecture the software is using! Access to a file is strongly linked to the OS and giving the architecture used is always a good idea.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Which OS? Which file format? Maybe there's already a parser available online.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is what I would do given the very limited information:\n </p>\n <ol>\n  <li>\n   Start by examining the file in a hex editor like HxD or 010 Editor. Take note of any \"constants.\" For example, all Windows exe files start with the bytes 4D 5A or \"MZ\". Do these files start with a consistent byte signature? Scroll down in the hex editor and find out what other patterns you can find.\n  </li>\n  <li>\n   Use a tool such as Detect It Easy or PortEx Analyzer to measure the entropy on the file's bytes and/or map them out. Is the entropy very high such that the tool indicates the file is packed, or is it lower? This can give you clues on whether or not is encoded and perhaps even what type of encoding may be used.\n  </li>\n </ol>\n <p>\n  I would take the above information gathered and search the Internet for any constants or patterns that I found across the files. See if you can find anyone else discussing these files or any programs which use them. If you can find other programs using the files, try and locate source code or something on GitHub.\n </p>\n <p>\n  As you said, this is open-ended and there isn't much room for discussion here other than comments, but this is how I would start the process. Do you know which program is encoding the files? If so, get ahold of the program's executable and use a tool like PEiD KANAL and/or signsrch on it to search for common encoding algorithms, then get the addresses of those algorithms and open the program executable in a disassembler and examine the memory addresses. Last but not least, another trick you can use is if you can figure out which type of info may be in the file (such as URLs), you can use the Didier Stevens tool called XORSearch and search for \"http\" and the program will try a bunch of different XOR keys for that pattern and if it is able to crack an http somewhere, you may be able to find out the encoding that way.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "the_endian",
            "time": "Aug 16, 2017 at 5:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2065501",
                    "text": "<span class=\"comment-copy\">Thank you very much for your answer, it was very helpful! When viewing the file in the hex editor, it actually looked to me as if the \"decoded\" file was in plain JSON format (A first part of the file had small chunks of json in them, and curly brackets were scattered throughout the file). However, the \"weird symbols\" were still scattered throughout the file, so I'm not sure how to decode that. I already googled a lot, and the file is only used by that one program, which happens to be a game.. I'll try out to use the encoding-algorithm-searching tools, thanks a lot!</span>",
                    "time": null
                },
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">@user2065501 keep in mind, all the \"weird symbols\" mean is that you are looking at a binary file (rather than a text file) even if there is indeed some plaintext scattered throughout. This is totally normal and there's no guarantee that it is actually encrypted because of this. Measure the entropy of the file and that will tell you more.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would advise you to use a dynamic analysis of the software by tracing it using tools such as the\n  <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow noreferrer\">\n   Intel PIN tool\n  </a>\n  (I am assuming you are dealing with x86 assembly).\n </p>\n <p>\n  With this tool you can trace each executed instruction by the software (see\n  <a href=\"http://www.ic.unicamp.br/~rodolfo/mo801/04-PinTutorial.pdf\" rel=\"nofollow noreferrer\">\n   this tutorial on PIN\n  </a>\n  ).\n </p>\n <p>\n  Then, your point will be to find\n  <a href=\"https://en.wikipedia.org/wiki/System_call\" rel=\"nofollow noreferrer\">\n   system call\n  </a>\n  that open the correct file (one of the parameter of the system call will be the path to the file, so you should be able to find it with a simple\n  <code>\n   grep\n  </code>\n  ).\n </p>\n <p>\n  Once you have located the instruction that open the file, I would advise you to start disassembling from this point (use software such as\n  <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">\n   IDA pro\n  </a>\n  ,\n  <a href=\"http://rada.re/r/\" rel=\"nofollow noreferrer\">\n   Radare2\n  </a>\n  , or even gdb/Ollydbg could do it).\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "perror",
            "time": "Aug 16, 2017 at 7:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2065501",
                    "text": "<span class=\"comment-copy\">That sounds very logical, thanks a lot for the advice! While I'm very very new at all of this (Even though I've been programming for a long time, I've barely touched assembly up to this point), I'll try to do my best.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try to take a look at\n  <code>\n   strace\n  </code>\n  and syscall monitor program likes .\n  \n\n  With those tools it will give you more information and details.\n </p>\n <p>\n  China has a folk adage：\"If a worker wants to do a good job, he must sharpen his tools first\".\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "jdir.s",
            "time": "Aug 20, 2020 at 9:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}