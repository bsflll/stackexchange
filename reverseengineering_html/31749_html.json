{
    "title": "How to bypass anti debugger? IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/31749/how-to-bypass-anti-debugger-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Im new to reverse engineering and doing a crackme that requires me to make a keygen, yes i know making a keygen isn't a beginner task however im stuborn, i am trying to debug the program to understand what it does to check for a valid key but i continue to get hit with the \"A debugger is present on your computer\" text the program prints out, I am aware of where it is checking for the debugger (i think), i just don't know how to avoid it, i can't patch the file so ive got to avoid it without tampering with the original code, anybody know how to get past this or? Thanks i'd really appreciate it.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/wG86w.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/wG86w.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "assembly",
        "c++",
        "c"
    ],
    "user": "alias",
    "time": "Apr 4, 2023 at 10:59",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n See\n <a href=\"https://reverseengineering.stackexchange.com/questions/10888/modify-memory-without-patching-the-database\" title=\"modify memory without patching the database\">\n  reverseengineering.stackexchange.com/questions/10888/â€¦\n </a>\n for a possible solution. If the bugger test functions return properly (and don't kill the process) you could just overwrite the result in\n <code>\n  eax\n </code>\n or patch the whole call to the debugger test methods..\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'll try to \"teach you to fish\" and provide a good general process to bypass these checks while debugging (without patching the binary)\n </p>\n <ol>\n  <li>\n   Set a breakpoint on the call of interest (e.g.\n   <code>\n    IsDebuggerPresent\n   </code>\n   )\n  </li>\n  <li>\n   Single step in your debugger\n  </li>\n  <li>\n   Identify which register was modified (and how) based upon the return value of the call e.g. perhaps it was\n   <code>\n    eax\n   </code>\n   . (<< this is probably architecture specific)\n  </li>\n  <li>\n   Single step in your debugger. At this point if you're using a debugger like IDA free and viewing in graph mode (hit spacebar to toggle between the listing view and graph view) you should see a flashing line that connects the current code block to the \"bad\" code block. In this case \"bad\" just means the code block that you DON'T want to reach aka the\n   <code>\n    exit()\n   </code>\n   block, etc.\n  </li>\n  <li>\n   Modify value that was identified in step 3. If you're using IDA free you can right click on the register > modify value. If it's currently a 0 and the bad branch is flashing, generally you can just change it to a non-zero value (e.g. 1) to get the good branch to flash\n  </li>\n </ol>\n <p>\n  Note: it is helpful to actually understand how the function works. e.g., if a debugger is present this function will return XX, otherwise it will return YY. That way you're not arbitrarily modifying values... you can do so with intention.\n </p>\n <p>\n  Hope this helps!\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Kayla0x41",
            "time": "Apr 4, 2023 at 15:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Use an \"anti-anti-debugger\" plugin (like\n  <code>\n   ScyllaHide\n  </code>\n  ), which simply injects code into\n  <code>\n   IsDebuggerPresent\n  </code>\n  , yes that's possible, since each executable loads API separetly into RAM, which's one of reasons why newer Chrome versions eat RAM (each tab is a process).\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Top-Master",
            "time": "Jan 26, 2024 at 12:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}