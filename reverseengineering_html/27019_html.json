{
    "title": "Ghidra add data types from open source project",
    "link": "https://reverseengineering.stackexchange.com/questions/27019/ghidra-add-data-types-from-open-source-project",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know that the program I am decompiling uses openSSL.\n  \n\n  I'd like to add the types from the\n  <code>\n   include\n  </code>\n  folder of the project to the data types.\n  \n\n  To do that, I use File => Parse C Source.\n  \n\n  I then select the\n  <code>\n   include\n  </code>\n  folder from\n  <a href=\"https://github.com/openssl/openssl\" rel=\"nofollow noreferrer\">\n   the openSSL project\n  </a>\n </p>\n <p>\n  For every parse configuration I get\n </p>\n <pre><code>Encountered \"<EOF>\" at line 0 column 0\nWas expecting one of:\n\"#line\"...\n<LINEALT>...\n\";\"...\n</code></pre>\n <p>\n  And if I try to import a subset of the .h files I get the following error because some types are not defined directly in the file.\n </p>\n <pre><code>C parser: Encountered errors during parsing\n</code></pre>\n <p>\n  Is there a way to import all the types from the source of a project ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ghidra"
    ],
    "user": "lblenner",
    "time": "Feb 16, 2021 at 0:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The C parser of Ghidra has various issues, e.g. it has a less extensive list of sane preprocessor variables and it just completely chokes on GCC attributes. I personally tried some approaches to make this work better, e.g. using the clang/gcc preprocessor to dump one giant header file, but they are still highly experimental and probably require a lot of tinkering, so I would overall just declare the C Parser as an nonviable approach for your problem.\n </p>\n <p>\n  The best way that I have heard of so far is to compile the library with full debug symbols in the version and target you need, then import that into Ghidra. Ghidra should then parse all the PDB/DWARF type information, create all the relevant types and apply the function signatures. Then you can link the library file to the binary you want to analyze in the first place, and propagate that information to it.\n  <s>\n   I don't know a tutorial for that right now, but Ghidra has good support for such projects that involve multiple binaries. If you encounter any issues with that, those are most likely worth a separate dedicated question, because this is then the same process as propagating type information from a library that you had to reverse engineer too.\n  </s>\n </p>\n <p>\n  Edit:\nI needed to do this recently and wrote it up as a\n  <a href=\"https://reversing.technology/2021/06/16/ghidra_DWARF_gdt.html\" rel=\"nofollow noreferrer\">\n   small blogpost\n  </a>\n  .\n </p>\n <p>\n  The general approach is like I described, but the blogpost itself isn't in a format and as polished as I'd like a StackExchange answer to be, so I don't think that copying it here would be appropriate.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Florian Magin",
            "time": "Jun 18, 2021 at 6:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Yet Another User",
                    "text": "<span class=\"comment-copy\">For anyone else who got here and is lost, check out the page \"Data Type Manager\" in the built in help under \"Help-&gt;Contents\". Or search for \"archive\" in the help.</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">I find it hilarious that I got a reminder <i>email</i> because of your comment that made me remember this post, after I published a blogpost about this yesterday. Edited the post to include this</span>",
                    "time": null
                }
            ]
        }
    ]
}