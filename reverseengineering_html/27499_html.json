{
    "title": "Why PTRACE_POKEDATA returns I/O error?",
    "link": "https://reverseengineering.stackexchange.com/questions/27499/why-ptrace-pokedata-returns-i-o-error",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I learning usage of ptrace.\n  \n\n  I tried following simple example but raises a I/O Error.\n </p>\n <p>\n  I would like to overwrite \"Hello, world\" (printing string) from other process.\n  \n\n  A target program prints \"Hello, world\" string until stop then I want to change this prints string from another program that use ptrace.\n </p>\n <p>\n  However the ptrace program failed to POKEDATA with I/O Error.\n  \n\n  I have no idea why it failed.\n </p>\n <p>\n  I have tried on:\n  \n\n  x86_64 Linux 5.11.\n  \n\n  AMD Ryzen 7 4750U\n </p>\n <p>\n  ptrace code: (This ptrace code refer from\n  <a href=\"http://0xcc.net/blog/archives/000077.html\" rel=\"nofollow noreferrer\">\n   http://0xcc.net/blog/archives/000077.html\n  </a>\n  (Japanese))\n </p>\n <pre><code>#include <assert.h>\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <stdio.h>\n\nint\nmain (int argc, char **argv)\n{\n    assert(argc == 4);\n    pid_t pid = atoi(argv[1]);\n    void *addr = (void *)strtol(argv[2], NULL, 0);\n    void *word = (void *)strtol(argv[3], NULL, 0);\n\n    assert(ptrace(PTRACE_ATTACH, pid, NULL, NULL) == 0);\n    wait(NULL);\n    if (ptrace(PTRACE_POKEDATA, pid, addr, word) != 0) {\n        printf(\"Error: %s\n\", strerror(errno));\n        return 0;\n\n    }\n    assert(ptrace(PTRACE_DETACH, pid, NULL, NULL) == 0);\n    return 0;\n}\n</code></pre>\n <p>\n  target code:\n </p>\n <pre><code>#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    while (true) {\n        printf(\"%s\n\", \"Hello, world\");\n    }\n}\n</code></pre>\n <p>\n  A address of target string in target binary (in my environment):\n </p>\n <pre><code>Contents of section .rodata:\n 2000 01000200 48656c6c 6f2c2077 6f726c64  ....Hello, world\n</code></pre>\n <p>\n  exection (shell):\n </p>\n <pre><code>./ptrace target_process_id 0x2004 0x60616263   //try to replace from Hell to abcdl \n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "401",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "KiYugadgeter",
    "time": "Apr 18, 2021 at 13:17",
    "comments": [
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<html><body><span class=\"comment-copy\">\n you need an actual address of this string in the process' memory\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "KiYugadgeter",
            "text": "<html><body><span class=\"comment-copy\">\n @Pawe≈Ç≈Åukasik How to get it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<html><body><span class=\"comment-copy\">\n one way is, you can compile w/o PIE and the\n <code>\n  objdump\n </code>\n will give you the address\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<html><body><span class=\"comment-copy\">\n <code>\n  gcc -no-pie -o target target.c\n </code>\n works for me\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "KiYugadgeter",
            "text": "<html><body><span class=\"comment-copy\">\n Oops I was misunderstandeding that pie and pic!   It works fine for me.  „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüüòÄ\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}