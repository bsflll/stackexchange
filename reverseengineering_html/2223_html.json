{
    "title": "Can a debug-apk be reverse engineered to make it a release-apk?",
    "link": "https://reverseengineering.stackexchange.com/questions/2223/can-a-debug-apk-be-reverse-engineered-to-make-it-a-release-apk",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am making a system in which the users can create Android applications. I want them to give an option to download a\n  <a href=\"http://developer.android.com/tools/building/building-cmdline.html#DebugMode\" rel=\"noreferrer\">\n   debug apk\n  </a>\n  so that they can try it out first. After that, they have to pay for it to get the\n  <a href=\"http://developer.android.com/tools/building/building-cmdline.html#ReleaseMode\" rel=\"noreferrer\">\n   apk in release mode\n  </a>\n  , so that it can be distributed in the Google Play Store.\n </p>\n <p>\n  I of course don't want them to be able to reverse-engineer the debug apk so that they can extract the needed files from it and then sign it themselves. Hence my question:\n </p>\n <p>\n  <strong>\n   Is it possible to reverse engineer a debug apk to extract the classes and everything needed to build it in release mode?\n  </strong>\n </p>\n <p>\n  If so, would there be any way to secure the debug versions so that it isn't possible anymore?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "decompilation",
        "unpacking",
        "android",
        "copy-protection",
        "apk"
    ],
    "user": null,
    "time": "Jun 10, 2013 at 16:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The difference between a debug apk and a release apk is that a debug apk is signed by a particular key which is provided with the SDK, whereas a release apk is signed by some other key. There's nothing to reverse engineer: all you have to do to make a release apk and sign it.\n </p>\n <p>\n  Nobody but you can create an apk signed by you. But anyone can make their own release apk by signing them.\n </p>\n <p>\n  A solution in your case would be to produce a binary including some DRM and refuse to run except on your customer's pre-registered device. How to implement such DRM, especially while letting your customer debug his applications, is left as an exercise to the reader.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Gilles 'SO- stop being evil'",
            "time": "Jun 10, 2013 at 19:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Of course, we all know how reliable client side DRM is.</span>",
                    "time": null
                },
                {
                    "user": "Gilles 'SO- stop being evil'",
                    "text": "<span class=\"comment-copy\">@Antimony I didn't say it was an easy (or indeed solvable) exercise.</span>",
                    "time": null
                },
                {
                    "user": "Mehul Joisar",
                    "text": "<span class=\"comment-copy\">@Antimony: I don't understand the solution.can you please explain it?</span>",
                    "time": null
                }
            ]
        }
    ]
}