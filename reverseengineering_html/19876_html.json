{
    "title": "Is this a good way to get past anti-debugging measures?",
    "link": "https://reverseengineering.stackexchange.com/questions/19876/is-this-a-good-way-to-get-past-anti-debugging-measures",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This program I am analyzing is full of anti-debugging.  It won't even run if most debuggers are loaded before I start the app.\n </p>\n <p>\n  I tried using IDA to static analyze it, but it was written in a OOP language, and has many calls to pointers inside registers; so I keep getting stuck digging in.\n </p>\n <p>\n  So, I'm wondering if it's possible to patch the .exe with code above the calls to record the register values, and maybe the line of the instruction. and then I can see what functions/methods are being called.\n </p>\n <p>\n  I added a bunch of zero bytes to the end of the .exe, and it ran, so it doesn't seem to have any checksum verification.\n </p>\n <p>\n  Will this be possible?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "assembly",
        "static-analysis"
    ],
    "user": "DeyMac",
    "time": "Nov 13, 2018 at 8:45",
    "comments": [
        {
            "user": "defragger",
            "text": "<html><body><span class=\"comment-copy\">\n You could try something like ScyllaHide for x64dbg. A lot of anti debugging tricks are covered by this plugin already. There's also a good text by Peter Ferrie \"The Ultimate Anti-Debugging Reference\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DeyMac",
            "text": "<html><body><span class=\"comment-copy\">\n i'm using that; I still can't get passed putting in break points, whenever I set a break point on a button, the software alerts me, and stopps executing..when I remove it, it works fine...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "defragger",
            "text": "<html><body><span class=\"comment-copy\">\n Right at the moment the  breakpoint is hit or directly after setting it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DeyMac",
            "text": "<html><body><span class=\"comment-copy\">\n I set the break point at the beginning of a button click event, and the APP alerts me after I click the button, but it doesn't crash the app...I can remove the break point and the app continues as normal\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DeyMac",
            "text": "<html><body><span class=\"comment-copy\">\n it does the same for memory and hardware break points\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   I would try to determine the OOP language it was written there might be tools/IDA scripts to help with static analysis\n  </li>\n  <li>\n   I have found the easiest way to reverse this kind of app is using time travel debugging trace (or similar) On Windows platform this is achieved by downloading WinDbg Preview from Windows 10 store. Once downloaded you can copy the files and run them without install to a machine without windows store if required. More info is available at\n   <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview\" rel=\"nofollow noreferrer\">\n    Time Travel\n   </a>\n   documentation. These traces once generated you can then step backwards/forwards instruction by instruction or to breakpoints.\n  </li>\n </ol>\n <p>\n  For example I used this command to show the time travel position for all text written to a file I could then click the hyperlink generated to go to exact register/thread/memory state when that text was written to file\n </p>\n <p>\n  <code>\n   bp kernel32!WriteFile \"!position;.printf \\\"%mu\\\",@rdx;g\"\n  </code>\n </p>\n <p>\n  To go forwards use\n  <code>\n   g\n  </code>\n  command, to go backwards\n  <code>\n   g-\n  </code>\n  , to step single instruction forward\n  <code>\n   t\n  </code>\n  and step instruction backwards\n  <code>\n   t-\n  </code>\n </p>\n <ol start=\"3\">\n  <li>\n   Also consider identifying the anti debugging technique used then hide from it, some examples\n   <a href=\"https://reverseengineering.stackexchange.com/questions/2082/debugger-hiding-plugin-for-windbg\">\n    here\n   </a>\n   .\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Yennefer",
            "time": "Jan 8, 2020 at 9:55",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It depends on what you are trying to achieve:\n </p>\n <ol>\n  <li>\n   source code extraction (say to replicate it with minor modifications)\n  </li>\n  <li>\n   program patching\n  </li>\n </ol>\n <p>\n  For the first case, I normally try to use a non invasive debugger attached after suspending the process. If this does not work, I dump the whole process with\n  <code>\n   SysInternals\n  </code>\n  <code>\n   Process Explorer\n  </code>\n  or\n  <code>\n   WinDbg\n  </code>\n  after suspending the process. The I use\n  <code>\n   Ghidra\n  </code>\n  do analyze the whole dump. I noted that\n  <code>\n   IDA\n  </code>\n  has issues in analyzing those dumps (sometimes peculiar parts are not detected) but you can combine them. This would give you the ability to analyze the code. If the code is self modifying you should use the second approach.\n </p>\n <p>\n  For the second case (and as last resort) I use a specially modified VM to remotely debug the application in non invasive mode. The VM is crafted with a custom rootkit that hides the processes you want (in particular, debuggers), this way you can debug the whole system in kernel mode without being detected.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "May 28, 2022 at 20:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think CRC routine is inside code, maybe more than one for different part  of code. It's not necessary checksum at the end of whole of file. For  example its possible count sum of bytes and  compare it with a value  inside a register. Do you are debugging win32/64 or android file?\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Silvius",
            "time": "Nov 12, 2018 at 18:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DeyMac",
                    "text": "<span class=\"comment-copy\">what do you mean? I didn't ask about that, I asked if it would work in theory, if I were to patch the exe to add code to get register values at certain places</span>",
                    "time": null
                }
            ]
        }
    ]
}