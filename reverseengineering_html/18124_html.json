{
    "title": "OSX User level application Preferences (plist) are not loaded after binary modification",
    "link": "https://reverseengineering.stackexchange.com/questions/18124/osx-user-level-application-preferences-plist-are-not-loaded-after-binary-modif",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on a project that requires to modify an existing OSX application's\n  <code>\n   dylib\n  </code>\n  binary (few bytes to correct an obsolete URL). I do not have access to the application source code nor the code signing certificates. After patching the application everything works perfectly except it does not load its application\n  <code>\n   plist\n  </code>\n  file from\n  <code>\n   ~/Library/Preferences\n  </code>\n  .\n </p>\n <p>\n  Even without patching/modifying the application if I do:\n </p>\n <pre><code>codesign -s \"Local Codesign\" -f ./lib<name>.dylib\n</code></pre>\n <p>\n  and execute the application it does not read its properties from\n </p>\n <pre><code>~/Library/Preferences/<application id>.plist\n</code></pre>\n <p>\n  including previously opened files or connected servers. If I copy back the original (developer signed)\n  <code>\n   dylib\n  </code>\n  then everything works fine: properties are read back again.\n </p>\n <p>\n  One strange thing: even with my local signed binary which is unable to read the\n  <code>\n   plist\n  </code>\n  file if I change something the changes are written back. So if this is an OSX security related stuff seems it's only affects reads.\n </p>\n <p>\n  Now my questions and assumptions:\n </p>\n <ul>\n  <li>\n   Am I right when I am assuming that this is some kind of OSX security mechanism that ensures application\n   <code>\n    plist\n   </code>\n   data cannot be accessed from a non-same-developer signed binary? If yes, why can it write and protects reads only?\n  </li>\n  <li>\n   Does any of you find similar issue when modified an OSX binary?\n  </li>\n  <li>\n   How can I debug this behaviour?\n  </li>\n  <li>\n   And yes: any solutions?\n  </li>\n </ul>\n <p>\n  Any comments and feedbacks are welcome.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "125",
    "tags": [
        "osx",
        "patching",
        "binary-editing",
        "macos"
    ],
    "user": "Tamas Foldi",
    "time": "Apr 29, 2018 at 9:53",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n how did you determine that the application does not load the plist from that location and that it did before?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tamas Foldi",
            "text": "<html><body><span class=\"comment-copy\">\n If I change the signature of any of the libraries then the UI does not show \"Recent files\" and \"Recent connections\". If I change back the libraries to the original signed ones everything works well. Also, in case I change the libraries I see security exceptions in OSX Console:\n <code>\n  code requirement check failed (-67063), client is not Apple-signed\n </code>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I could find some hints by googling the error message, e.g.:\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/a/40705362/422797\">\n   https://stackoverflow.com/a/40705362/422797\n  </a>\n </p>\n <p>\n  Looks like it's not related to the plist but possibly to some security APIs (e.g. keychain access or\n  <code>\n   SecCodeCheckValidity\n  </code>\n  ) used by the program.\nApparently the OS caches signing info based on the file's vnode, and if you replace it in-place that invalidates the signature. The linked answer suggests some workarounds.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "May 2, 2018 at 8:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tamas Foldi",
                    "text": "<span class=\"comment-copy\">This was one of the issue. After I changed the process flow to 1) move the file 2) sign it in /Application folder with a proper apple signed signature it was able to read the plist. Thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}