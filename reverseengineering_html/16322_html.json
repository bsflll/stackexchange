{
    "title": "Weird looking assembly-code bunch",
    "link": "https://reverseengineering.stackexchange.com/questions/16322/weird-looking-assembly-code-bunch",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently analysing some crackme with Olly and IDA. Initially it was packed. I managed to find the OEP (a JMP soon after POPAD and right before a bunch of nulls):\n </p>\n <pre><code>0040E978    .  53                    PUSH    EBX\n0040E979    .  57                    PUSH    EDI\n0040E97A    .  FFD5                  CALL    NEAR EBP\n0040E97C    .  58                    POP     EAX\n0040E97D    .  61                    POPAD\n0040E97E    .  8D4424 80             LEA     EAX, DWORD PTR SS:[ESP-80]\n0040E982    >  6A 00                 PUSH    0\n0040E984    .  39C4                  CMP     ESP, EAX\n0040E986    .^ 75 FA                 JNZ     SHORT crackme_.0040E982\n0040E988    .  83EC 80               SUB     ESP, -80\n0040E98B    .- E9 7062FFFF           JMP     crackme_.00404C00\n0040E990       00                    DB      00\n0040E991       00                    DB      00\n0040E992       00                    DB      00\n</code></pre>\n <p>\n  But I might have done something incorrectly or, may be, it's some sort of obfuscation technique, cause the unpacked program is full of something like that:\n </p>\n <pre><code>                lea     ecx, ds:2186C225h ; Load Effective Address\nUPX0:00403042   mov     ebx, 0C11A8EBBh\nUPX0:00403047   lea     ebx, [ebx-6CFE17B8h] ; Load Effective Address\nUPX0:0040304D   add     ecx, ecx        ; Add\nUPX0:0040304F   lea     ebx, [eax-68FB1E76h] ; Load Effective Address\nUPX0:00403055   sub     ecx, eax        ; Integer Subtraction\nUPX0:00403057   lea     eax, [ebp-6Ch]  ; Load Effective Address\nUPX0:0040305A   push    eax\nUPX0:0040305B   call    $+5             ; Call Procedure\nUPX0:0040305B   \nUPX0:00403060   pop     eax\nUPX0:00403061   add     eax, 0Ah        ; Add\nUPX0:00403064   push    eax\nUPX0:00403065   jmp     loc_408EF0      ; Jump\n</code></pre>\n <p>\n  What confuses me most (other than UPX prefix, although it seems to be unpacked), are instructions like these:\n </p>\n <pre><code>UPX0:00403047   lea     ebx, [ebx-6CFE17B8h] ; Load Effective Address   \nUPX0:0040304F   lea     ebx, [eax-68FB1E76h] ; Load Effective Address\n</code></pre>\n <p>\n  Moreover, throughout the code there are lots of call-jumps, that point to the next instruction, rather than somewhere else in the code (which is much more common):\n </p>\n <pre><code>0040327B     50                      PUSH    EAX\n0040327C     E8 00000000             CALL    crackme2.00403281\n00403281     58                      POP     EAX\n...\n0040321A     50                      PUSH    EAX\n0040321B     8B45 08                 MOV     EAX, DWORD PTR SS:[EBP+8]\n0040321E     50                      PUSH    EAX\n0040321F     E8 00000000             CALL    crackme2.00403224\n00403224     58                      POP     EAX\n</code></pre>\n <p>\n  How common is that?\n </p>\n <p>\n  I thought, that may be I did the unpacking wrongly, but the program seems to work properly. My next though was that it might be self-modifying, but when I put BP on GetWindowTextA, where first, last names and serial are loaded, and then go through the code, it doesn't seem to be changing.\n </p>\n <p>\n  Is it possible, that there are addresses like this?:\n </p>\n <pre><code>lea     ecx, ds:2186C225h ; Load Effective Address\n...\nlea     ebx, [eax-68FB1E76h] ; Load Effective Address\n</code></pre>\n <p>\n  Or may be there is something wrong with the OllyDbg's interpretation of the code?\n </p>\n <p>\n  Thank you in advance!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "192",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "ollydbg",
        "crackme"
    ],
    "user": "ShHolmes",
    "time": "Sep 11, 2017 at 18:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you follow the flow, you will see that the result of the first \"lea ebx, []\" is replaced by the result of the \"lea ebx, []\", with no intervening use of ebx.  While they can serve a meaningful purpose (consider position-independent code), that's not their use here.  These are garbage instructions that exist only to confuse someone looking at the disassembly.\n </p>\n <p>\n  As far as the call to the next instruction, the call saves on the stack the pointer to the return address, so popping that value into a register will allow the code to know its location in memory.  That can be for the purpose of position-independent code, or just a way to avoid using constants to make the disassembly more difficult.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Sep 11, 2017 at 23:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ShHolmes",
                    "text": "<span class=\"comment-copy\">Thank you very much, Peter! But there is this part still: lea     ecx, ds:2186C225h ; Load Effective Address</span>",
                    "time": null
                },
                {
                    "user": "ShHolmes",
                    "text": "<span class=\"comment-copy\">I now realize, that some of the instructions are just garbage, but there are still some that are less \"garbage-obvious\":  lea     ecx, ds:2186C225h ; Load Effective Address.   And as we can see from the code after that instruction, the ecx is used pretty much. But still it's not a valid address. Is this also some kind of useless code, that makes no sense at all? Or may be the machine code was interpreted wrongly?</span>",
                    "time": null
                },
                {
                    "user": "ShHolmes",
                    "text": "<span class=\"comment-copy\">I've traced the operations and it turns out, that that     \"lea ecx, ds:2186C225h\"  just equals \"mov ecx, 2186C225h\" (going by the result stored).</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">yes, \"lea\" can be used to perform arithmetic combining multiplication and addition on constant values.  It doesn't have to yield an actual address afterwards.</span>",
                    "time": null
                }
            ]
        }
    ]
}