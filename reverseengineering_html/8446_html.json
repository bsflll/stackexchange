{
    "title": "How to find what code created some data?",
    "link": "https://reverseengineering.stackexchange.com/questions/8446/how-to-find-what-code-created-some-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'd like to be able to point to a buffer in memory likely on the heap and have a tool tell me which part of the binary created the data in the file.\nWhat tools can do that for me?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "243",
    "tags": [
        "tools",
        "binary-analysis"
    ],
    "user": "user1636717",
    "time": "Mar 11, 2015 at 17:14",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<html><body><span class=\"comment-copy\">\n If the data is always at the same address, you could use a breakpoint at that address trough a debugger (Olly, Immunity, Cheat engine) and see what function accesses that part of the memory. If it has a dynamic address I'ld examine what's in that memory location, and try to figure out when/what put's it there. Start with setting a global breakpoint on memory related APIs.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you are using a debugger like gdb, you could set a hardware breakpoint at the heap address. From the\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Breaks.html\" rel=\"nofollow noreferrer\">\n   gdb manual\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   hbreak args\n  </p>\n  <p>\n   Set a hardware-assisted breakpoint. ... These targets will generate traps when a program accesses some data or instruction address that is assigned to the debug registers.\n  </p>\n </blockquote>\n <p>\n  After setting a hardware breakpoint, the debugger will trap when the memory is accessed for a read or a write.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you are debugging\n  <code>\n   PE\n  </code>\n  executable (Windows), you can use the\n  <code>\n   !heap -p\n  </code>\n  options of\n  <code>\n   WinDbg\n  </code>\n  .\n </p>\n <p>\n  You can read about it\n  <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-heap\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Note that you will have to enable it using\n  <code>\n   gflags.exe\n  </code>\n  - It's also mentioned in the document above.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "macro_controller",
            "time": "Feb 2, 2020 at 9:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}