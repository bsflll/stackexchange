{
    "title": "How to debug a NSIS installer in order to find where the compressed data is?",
    "link": "https://reverseengineering.stackexchange.com/questions/6463/how-to-debug-a-nsis-installer-in-order-to-find-where-the-compressed-data-is",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  NISIS installers compress data using\n  <code>\n   bizp2\n  </code>\n  ,\n  <code>\n   lzma\n  </code>\n  or\n  <code>\n   zlib\n  </code>\n  -- I don't know if there are others algorithms--.\n </p>\n <p>\n  At some point in the installation process one of those algorithms has to be applied to certain buffer of data. Of course, that data was readed from the disk --contained into the installer--.\n </p>\n <p>\n  How can I debug a NISIS installer in order to know where the installer files are? What I have to look for?\n </p>\n <p>\n  Note: I can work with OllyDbg or IDAPro.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 4,
    "views": "5k",
    "tags": [
        "debugging"
    ],
    "user": "Raydel Miranda",
    "time": "Oct 15, 2014 at 13:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Generally speaking, you can either detect when the data is read from the file (by monitoring functions as\n  <code>\n   ReadFile\n  </code>\n  ), or when it's being decompressed (by monitoring the decompression function once you find it). In some cases the program may read the compressed data directly and pass it to the decompression function, but in others it could read some chunk of file together with the header/metadata, parse that header, and then pass only the trailing compressed data to the decompressor. There is no single \"right way\" to figure out where exactly the compressed data is in the file.\n </p>\n <p>\n  That said, NSIS is open-source and you can just look\n  <a href=\"http://nsis.sourceforge.net/Development_Files\">\n   at the source code\n  </a>\n  to see how it works. There are also\n  <a href=\"http://nsis.sourceforge.net/Can_I_decompile_an_existing_installer\">\n   ready-made tools\n  </a>\n  to extract files from NSIS installers.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Oct 15, 2014 at 14:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Raydel Miranda",
                    "text": "<span class=\"comment-copy\">I look for the <code>ReadFile</code> API call and in fact, I was able to find the routine that search the offset for the start of compressed data.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Quick google yields\n  <a href=\"http://nsis.sourceforge.net/Can_I_decompile_an_existing_installer\" rel=\"nofollow\">\n   Extract / decompile NSIS\n  </a>\n </p>\n <p>\n  As a more general answer to finding embedded resources, try\n  <a href=\"http://exeinfo.atwebpages.com/\" rel=\"nofollow\">\n   ExeInfo\n  </a>\n  and its \"Rip\" feature which scans exe for various file type headers (PE, JPG, AVI....) and then allows to rip the found resources out.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "pHiL",
            "time": "Oct 15, 2014 at 14:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For NSIS installers, you can simply use 7-zip or UniExtract -\n  <a href=\"http://legroom.net/software/uniextract\" rel=\"nofollow\">\n   http://legroom.net/software/uniextract\n  </a>\n  to extract all the files in the NSIS installer\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Gunther",
            "time": "Oct 15, 2014 at 15:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, without reject Igor Skochinsky's answer I want to post this more landed in the fact of\n  <strong>\n   how to find where compressed data is\n  </strong>\n  .\n </p>\n <p>\n  Peter Kankowski wrote:\n </p>\n <blockquote>\n  <p>\n   NSIS authors found a fast solution using marker. It's so simple that you will say: \"Why didn't I think about it?!\"\n  </p>\n  <p>\n   Just remember that data in an exe file is aligned by 512 or 4096 bytes. So you don't need to scan the whole exe for a marker, you just need to read 512-byte chunks and look for marker at their start. In pseudocode:\n  </p>\n </blockquote>\n <pre><code>BYTE buff[512];\nwhile(not end of file) {\n   ReadFile( 512 bytes into buff)\n   if(*(long*)buff == marker) {\n       // Marker found!\n   }\n   // else read another 512-byte chunk in the loop\n}\n</code></pre>\n <blockquote>\n  <p>\n   I believe it's the simplest method; it's also faster than other methods with marker.\n  </p>\n </blockquote>\n <p>\n  So as you can see NSIS installer have some sort of marker. So, just look for the\n  <code>\n   ReadFile\n  </code>\n  API call, follow the program flow until the loops start again an watch for the last jump before the loop repeat it has to have a comparision around.\n </p>\n <p>\n  And there you have the\n  <strong>\n   marker\n  </strong>\n  .\n </p>\n <p>\n  If you want read more you can visit this very useful article:\n  <a href=\"http://www.strchr.com/creating_self-extracting_executables\" rel=\"nofollow noreferrer\">\n   Self-extracting executables\n  </a>\n  , thanks to Peter for a good adn clean explanation.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Well, strictly speaking NSIS uses this approach to find the start of the <i>installation data</i>; and the actual <i>compressed file data</i> is somewhere in the middle of it.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">However the article (or rather the comments) do mention one case I missed: when <code>MapViewOfFile</code> is used to map the whole file into memory, instead of reading it with <code>ReadFile</code>.</span>",
                    "time": null
                },
                {
                    "user": "Raydel Miranda",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky You are totally right, thats why I tried to apply the extracting algorithms to the data and all of them have failed, because the <i>installation data</i> is not the <i>compressed data</i> the last is some whare inside the former. I have to find the exact offset of the <b>compressed file</b>. Can you help?</span>",
                    "time": null
                }
            ]
        }
    ]
}