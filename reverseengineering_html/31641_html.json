{
    "title": "Make IDA pro decompiler to show me the destination of trampoline calls instead of the trampoline function?",
    "link": "https://reverseengineering.stackexchange.com/questions/31641/make-ida-pro-decompiler-to-show-me-the-destination-of-trampoline-calls-instead-o",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Right now I have a obfuscated driver, that in order to call something like KeDelayExecutionThread, it does the following:\n </p>\n <pre><code>mov     rax, cs:KeDelayExecutionThrea\nlea     r8, [rsp+28h+arg_0]\nxor     edx, edx\nxor     ecx, ecx\ncall    cs:trampolineFunction_Address  \n</code></pre>\n <p>\n  and:\n </p>\n <pre><code>trampolineFunction_Address dq offset trampolineFunction\n \ntrampolineFunction proc near\njmp     rax\ntrampolineFunction endp\n</code></pre>\n <p>\n  So it just pushes the destination function in rax, and calls this trampolineFunction indirectly using\n  <code>\n   call    cs:trampolineFunction_Address\n  </code>\n  .\n </p>\n <p>\n  The problem is, in the decompiled output, every call is now shown as\n  <code>\n   trampolineFunction_Address( ... )\n  </code>\n  :\n </p>\n <pre><code>if ( trampolineFunction_Address(&v34, 1i64, &v22, v31, 0i64, v13, v16) >= 0 )\n        {\n          *&v20 = trampolineFunction_Address(v7, v6, v8, v9, v11, v14, v17);\n          if ( trampolineFunction_Address(&v33, 64i64, &v27, &v20, v12, v15, v18) >= 0 )\n...\n</code></pre>\n <p>\n  So how can I make IDA's decompiler to show me the correct function name?\n </p>\n <p>\n  Note that for example, KeDelayExecutionThread in above assembly is basically the address of KeDelayExecutionThread, which this rootkits resolves during initialization and puts it in its data section, and as you can see after I renamed that address to that, IDA correctly knows the function definition:\n </p>\n <pre><code>.data:FFFFF80019E5F000 ; NTSTATUS (*KeDelayExecutionThread)(KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Interval)\n.data:FFFFF80019E5F000 KeDelayExecutionThread dq 0FFFFF8001A2CFB30h\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "61",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "OneAndOnly",
    "time": "Mar 7, 2023 at 11:40",
    "comments": [],
    "answers_data": []
}