{
    "title": "Elf file format finding .got and .got.plt segments",
    "link": "https://reverseengineering.stackexchange.com/questions/17258/elf-file-format-finding-got-and-got-plt-segments",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm writing ELF parser and simple disassembler x86. Having code like this\n </p>\n <pre><code>.text:000B5A2A      call 0000B470 ;e.g. _glXSwapBuffers\n...\n...\ngot.plt:0000B470    jmp     dword ptr [ebx+240h] ;jump to .got@_glXSwapBuffers\n</code></pre>\n <p>\n  I wonder how can I recognize\n  <strong>\n   .got\n  </strong>\n  ,\n  <strong>\n   .got.plt\n  </strong>\n  segments at ELF parsing time ? Simple way is to just check the segment \\ section name but this can be fooled easily.\n </p>\n <p>\n  Anyone knows what's the proper way to identify\n  <strong>\n   .got\n  </strong>\n  ,\n  <strong>\n   .got.plt\n  </strong>\n  segments \\ sections during ELF file format parsing ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "static-analysis",
        "elf",
        "disassemblers"
    ],
    "user": "krusty",
    "time": "Jan 23, 2018 at 14:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   .got\n  </code>\n  and\n  <code>\n   .got.plt\n  </code>\n  are examples of labels that will always describe sections and never segments.\n </p>\n <p>\n  There is a critical conceptual difference between sections and segments. Sections provide information about how information is organized within a binary, and segments describe to the program loader (and if the binary is dynamically linked, the dynamic linker) how a process image should be composed in virtual memory from the binary. Take a look at the SysV ABI (generic) and the output of\n  <code>\n   readelf -SW -l <binary>\n  </code>\n  for more on the difference between sections and segments.\n </p>\n <p>\n  Information about sections is stored in the section header table, so to find information about sections in a binary, parse the section header table. Note that the section header table is not required to be present in the binary - the loader only uses segment information to accomplish process creation.\n </p>\n <p>\n  Familiarize yourself with ELF structure by exploring this excellent diagram:\n  <a href=\"https://github.com/corkami/pics/blob/master/binary/elf101/elf101-64.pdf\" rel=\"nofollow noreferrer\">\n   https://github.com/corkami/pics/blob/master/binary/elf101/elf101-64.pdf\n  </a>\n </p>\n <p>\n  See\n  <a href=\"https://reverseengineering.stackexchange.com/questions/16829/disassemblers-resolving-elf-section-names/16830#16830\">\n   Disassemblers resolving (ELF) section names\n  </a>\n  for more about the section header table.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "julian",
            "time": "Jan 24, 2018 at 14:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "krusty",
                    "text": "<span class=\"comment-copy\">thanks for answer and clarifying section vs segment but it's not exactly what I was asking about.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">the answer to your question is parse the section header table, as I said. See <a href=\"https://reverseengineering.stackexchange.com/questions/16829/disassemblers-resolving-elf-section-names/16830#16830\" title=\"disassemblers resolving elf section names\">reverseengineering.stackexchange.com/questions/16829/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}