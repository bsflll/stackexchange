{
    "title": "OllyDbg and XMM0 vs MM0 registers",
    "link": "https://reverseengineering.stackexchange.com/questions/4362/ollydbg-and-xmm0-vs-mm0-registers",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can I view the\n  <code>\n   XMM0\n  </code>\n  -\n  <code>\n   XMM7\n  </code>\n  registers within OllyDbg? I can right click on the registers window and go to\n  <code>\n   view MMX\n  </code>\n  registers, but I'm not exactly sure that these are the same. I see an instruction:\n  <code>\n   MOVSS DWORD PTR DS:[ESI+8],XMM0\n  </code>\n  and as step through that instruction, the value shown in\n  <code>\n   MM0\n  </code>\n  on the register window does not become the value stored at\n  <code>\n   [ESI+8]\n  </code>\n  .\n </p>\n <p>\n  So, I suppose another question is:\n  <em>\n   Are the\n   <code>\n    XMM0\n   </code>\n   and\n   <code>\n    MM0\n   </code>\n   registers different?\n  </em>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "zz3star90",
    "time": "May 18, 2014 at 7:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To answer properly your question, yes.\n  <code>\n   xmm\n  </code>\n  registers were introduced by Intel with the\n  <code>\n   SSE\n  </code>\n  instruction set (IS) in 1999 with the Pentium III CPU.\n  <code>\n   SSE\n  </code>\n  stands for Streaming SIMD Extension and is a set of vector instructions.\n  <code>\n   xmm\n  </code>\n  registers are 128bit wide and can hold 4\n  <code>\n   floats\n  </code>\n  , 2\n  <code>\n   doubles\n  </code>\n  , or 16\n  <code>\n   chars\n  </code>\n  .\n  <code>\n   SSE\n  </code>\n  can speed up signal processing applications (image processing, sound processing, compression, ...), encryption, and others quite dramatically when used properly.\n </p>\n <p>\n  On the other hand,\n  <code>\n   mm\n  </code>\n  registers are part of the\n  <code>\n   MMX\n  </code>\n  IS, another vector instruction set older than\n  <code>\n   SSE\n  </code>\n  (1997 I suppose), and are 64bit wide. \nNowadays the vector instruction sets are becoming quite a\n  <em>\n   fashion\n  </em>\n  in a certain way (vector\n  <code>\n   CPUs\n  </code>\n  were the standard for supercomputers back in the 70s & 80s - Cray's, ThinkingMachine's, ... computer were all vector based). In the past few years, Intel came up with many versions of\n  <code>\n   SSE\n  </code>\n  and two new IS called\n  <code>\n   AVX\n  </code>\n  &\n  <code>\n   AVX2\n  </code>\n  (Advanced Vector Extension) with 256bit wide vectors implemented on SandyBridge/IvyBridge/Haswell, and\n  <code>\n   AVX-512\n  </code>\n  first implemented on the KNC (Knight's Corner) of the Xeon Phi processor & co-processor line.\n </p>\n <p>\n  I encourage you to check the Intel documentation & Wikipedia for more information.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "yaspr",
            "time": "May 18, 2014 at 18:17",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So it turns out the\n  <a href=\"http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions\" rel=\"nofollow\">\n   SSE Registers (XMM0-7)\n  </a>\n  are not supported within OllyDbg v1.10, but are in v2.0 which I found,\n  <a href=\"http://www.ollydbg.de/version2.html\" rel=\"nofollow\">\n   and downloaded here\n  </a>\n  , and works great so far. The newest version does not, however, support plugins.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "zz3star90",
            "time": "May 18, 2014 at 4:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}