{
    "title": "Reverse Engineering SCE .pkg Files",
    "link": "https://reverseengineering.stackexchange.com/questions/13426/reverse-engineering-sce-pkg-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To elaborate, I need help decompressing SCE (Sony Computer Entertainment) .pkg files. I've found several common patterns between multiple versions of the same file (released over the span of two years by Sony) using 010 Editor, but don't quite know what I'm looking at.\n </p>\n <p>\n  Here are the matches between two versions of 'package_data02.pkg', released two days apart:\n  \n\n  \n\n  <a href=\"https://i.sstatic.net/ETpbY.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"The addresses and sizes of the matches\" src=\"https://i.sstatic.net/ETpbY.jpg\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/7eKW5.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/7eKW5.jpg\"/>\n  </a>\n  \n\n  The files use little endian and these are using ANSI character sets (I've looked at them using UTF-8 and Unicode as well)\n </p>\n <p>\n  I've discerned that the matches are part of the file structure, as their starting address and depth are shared across all ~300 .pkg files that have been released over the past two years.\n </p>\n <p>\n  My question is this: can I use the information I've gathered so far to find a way to decompress the data in the .pkg? (If it helps, I'm hoping to find either an executable or .c source files)\n </p>\n <p>\n  About the originally posted question:\n </p>\n <blockquote class=\"spoiler\">\n  <p>\n   I originally was asking for a way to use the hex dumps to exploit my way through AES encryption, and later found out that not only were the .pkgs only compressed, but I also had access to the encryption keys. Oops...\n  </p>\n </blockquote>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "653",
    "tags": [
        "firmware",
        "file-format",
        "decompress",
        "binary-diagnosis"
    ],
    "user": "JRM",
    "time": "Sep 5, 2016 at 21:17",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n Why do you think its encrypted? Please provide more details about the file. A sample could be helpful.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JRM",
            "text": "<html><body><span class=\"comment-copy\">\n I need to update this, as the files are purely compressed - the reason I though they were encrypted due to lack of knowledge and a poor assumption that Sony likes encrypting everything. I'll try to get a sample hex dump of one of the packages into the post\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n You should try understanding the header values. Mapping out each field there. Be aware that diagnosing compression algorithms is usually not an easy task. Especially if you're not familiar with compression related ideas and common schemes.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JRM",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks, I've been learning as I go, given this is my first time trying anything like this\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}