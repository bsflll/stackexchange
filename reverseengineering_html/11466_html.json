{
    "title": "How does disassembler really work?",
    "link": "https://reverseengineering.stackexchange.com/questions/11466/how-does-disassembler-really-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  a simple portable executable file looks like :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Jj8Bn.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Jj8Bn.png\"/>\n  </a>\n </p>\n <p>\n  I'm wondering how a disassembler works to parse the .text...to produce assembly code ?\n </p>\n <p>\n  Because the PE file in his raw format seems to be unusable and does not contain machine instructions in readable format.\n </p>\n <p>\n  I was thinking about either a tier program is used, or the program is loaded into memory and a dump is performed by the disassembler.\n </p>\n <p>\n  Thanks !\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 3,
    "views": "4k",
    "tags": [
        "assembly",
        "executable",
        "disassemblers"
    ],
    "user": "Duke Nukem",
    "time": "Dec 6, 2015 at 11:27",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n The instructions do not immediately follow that text\n <code>\n  .text\n </code>\n . You are looking at a table of contents; the binary numbers after the name indicate the offset and length where, in the total file, the actual code can be found.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n Google \"PE format\". That's what loaders in IDA Pro are partially for.\n <a href=\"https://msdn.microsoft.com/en-us/library/ms809762.aspx\" rel=\"nofollow noreferrer\">\n  msdn.microsoft.com/en-us/library/ms809762.aspx\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ratchet freak",
            "text": "<html><body><span class=\"comment-copy\">\n It probably has a byte pattern to match against a function preamble and starts from there. Not to mention the start address is explicitly stated in the file somewhere\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You have basically two options:\n </p>\n <p>\n  <strong>\n   Linear Sweep\n  </strong>\n </p>\n <p>\n  Read the first N-bytes until you get a correct opcode (e.g., 05 14 00 00 00 decompiles to add eax,0x14). Disassemble the next opcode. You will read some data sections and get invalid opcodes. You may skip the process or mark these \"instructions\" as bad and proceed until you get the next valid opcode and resume as described.\n </p>\n <p>\n  <strong>\n   Recursive Traversal\n  </strong>\n </p>\n <p>\n  Read the first N-bytes until you get a correct opcode. Proceed until you disassemble any sort of jump, store your current position, follow the jump and proceed as described. Stop disassembly when you get an invalid opcode and resume at the previously stored position.\n </p>\n <p>\n  Both approaches require some basic information like\n </p>\n <ul>\n  <li>\n   Where does your program code start?\n  </li>\n  <li>\n   What architecture is the code for?\n  </li>\n </ul>\n <p>\n  Some of these information are part of the header (e.g., in PE- oder ELF-Files).\n </p>\n <p>\n  The Linux Interactive DisAssembler (LIDA) has a short introduction how the program disassembles the code and how objdump does its work. This is a good starting point to get familiar with the topic.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "user3422070",
            "time": "Dec 9, 2015 at 18:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are a number of ways to disassemble a file. And note that .text is only a name for the segment, you can call it .flups for all the OS cares.\n </p>\n <p>\n  The things that are interesting is that:\n </p>\n <ul>\n  <li>\n   The OEP is within that section\n  </li>\n  <li>\n   The section has Read and Execute rights.\n  </li>\n </ul>\n <p>\n  A disassembler can just jump to EOP and start reading bytes (opcodes) (\n  <a href=\"http://ref.x86asm.net/\" rel=\"nofollow\">\n   http://ref.x86asm.net/\n  </a>\n  ). It can just start reading from the top down or it can also enumerate the results, eg follow calls/jmps in order to find weird code.\n </p>\n <p>\n  Also, in the DosHeader there is a reference to where the PE here starts. This one has the OEP for you.\n </p>\n <p>\n  Reading the radare source code can help you really understanding disassemblers.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Stolas",
            "time": "Dec 8, 2015 at 14:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There's indeed a bunch of processing happens between having a raw PE, ELF, etc. file, to be able to disassemble it and show in a nice UI: loading and parsing a file, processing executable sections, converting offsets to virtual addresses, mnemonic disassembly itself, annotation of parts of disassembled instructions to allow e.g. to crossreference different parts of code/data and easily navigate among them, etc.\n </p>\n <p>\n  There're number of open-source disassemblers whose code you can study to get more insight into inner workings (or to improve for your needs!). For example,\n  <a href=\"https://github.com/pfalcon/ScratchABit\" rel=\"nofollow noreferrer\">\n   ScratchABit\n  </a>\n  is written in Python, is very easy to study and hack on.\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/hIr9o.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "pfalcon",
            "time": "Dec 26, 2017 at 11:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}