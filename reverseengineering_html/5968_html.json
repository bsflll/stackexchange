{
    "title": "Command Injection in Windows ShellExecuteA()?",
    "link": "https://reverseengineering.stackexchange.com/questions/5968/command-injection-in-windows-shellexecutea",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Imagine that we have the following pseudo-code in a Windows application:\n </p>\n <pre><code>ShellExecuteA(0, \"open\", &File, &Parameters, &Directory, 1); \n</code></pre>\n <p>\n  And, imagine that you can gain control over the\n  <code>\n   Parameters\n  </code>\n  argument. Does that mean it is exploitable ?\n </p>\n <p>\n  I know that\n  <code>\n   ShellExecute()\n  </code>\n  is vulnerable to command injection. But, in this case, is it also vulnerable in the same manner ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "c",
        "winapi"
    ],
    "user": "osmund sadler",
    "time": "Jul 29, 2014 at 10:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It depends on the\n  <code>\n   lpFile\n  </code>\n  argument. If\n  <code>\n   lpFile\n  </code>\n  is a command-line interpreter (such as\n  <code>\n   cmd.exe\n  </code>\n  or\n  <code>\n   powershell.exe\n  </code>\n  ) or a program that can accept code as a command line argument (such as\n  <code>\n   perl.exe\n  </code>\n  or\n  <code>\n   ruby.exe\n  </code>\n  ), then yes, you could supply arbitrary commands for a command injection attack.\n </p>\n <p>\n  However, if the\n  <code>\n   lpFile\n  </code>\n  program doesn't execute command line arguments (for example,\n  <code>\n   notepad.exe\n  </code>\n  ,\n  <code>\n   pbrush.exe\n  </code>\n  , etc.), then there is no command injection vulnerability. Note that even in these cases though, if the\n  <code>\n   lpFile\n  </code>\n  program tries to open the file path supplied in the command line, this could still be seen as a security issue.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jul 29, 2014 at 14:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">There is obviously a potential issue regarding the length of the parameter field, but even data files can be vectors for exploitation - malformed graphics, too long configuration strings, ...</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Right, assuming this is a server application, even if you can't upload a malformed data file to a predictable file path, you may be able to feed the application a URI or a UNC path to a malformed data file.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As Jason already mentioned, everything depends on file. But I want to say something more.\n </p>\n <p>\n  You said:\n </p>\n <blockquote>\n  <p>\n   And, imagine that you can gain control over the Parameters argument.\n  Does that mean it is exploitable ?\n  </p>\n </blockquote>\n <p>\n  In the same manner control of other\n  <code>\n   ShellExecute\n  </code>\n  parameters\n  <em>\n   might\n  </em>\n  be gain... You probably understand why I said\n  <em>\n   might\n  </em>\n  , not\n  <em>\n   can\n  </em>\n  .\n </p>\n <p>\n  You didn't included info in question, but I think you meant that control of\n  <code>\n   parameters\n  </code>\n  is gained editing executable. If so there is such thing.\n </p>\n <p>\n  Imagine file is\n  <code>\n   cmd.exe\n  </code>\n  and you can control parameters, but in app parameter is\n  <code>\n   C:\\file.txt\n  </code>\n  it has 11 characters, so you could change it into some other up-to 11 characters parameter (if it is smaller then 11, you need to add\n  <code>\n   NULL\n  </code>\n  s).\n </p>\n <p>\n  However in real situations\n  <code>\n   ShellExecute\n  </code>\n  parameters are partially hard-coded and are build dynamically during program flow. So answering to your question,\n  <code>\n   ShellExecute\n  </code>\n  is vulnerable to command injection, however, not every app that uses\n  <code>\n   ShellExecute\n  </code>\n  could be taken as a target and actual injecting could be not so easy task.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "ST3",
            "time": "Aug 7, 2014 at 9:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}