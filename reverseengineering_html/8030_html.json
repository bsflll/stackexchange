{
    "title": "Purpose of NOP immediately after CALL instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/8030/purpose-of-nop-immediately-after-call-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are a lot of\n </p>\n <pre><code>... code ...\ncall sub_...\nnop\n... code ...\n</code></pre>\n <p>\n  patterns in an executable dump I am working on. They appear in the middle of subroutines and I believe don't serve alignment purposes. I am curious about the origins of this construct.\n </p>\n <p>\n  The program was packed, so I am not sure if call-nop pair was there initially or appeared after unpacking.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "x86-64"
    ],
    "user": "uranix",
    "time": "Jan 16, 2015 at 13:34",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n It might be part of an anti-debugger scheme - the function could check what's at its return address. If it isn't a\n <code>\n  nop\n </code>\n , it's probably a debugger breakpoint. This defeats debuggers that hide by using something else than the customary\n <code>\n  int 3\n </code>\n instruction for a breakpoint.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "uranix",
            "text": "<html><body><span class=\"comment-copy\">\n Interesting trick, but it doesn't seem to be used here - since I spoof the return address as a part of hooking technique and the program works flawlessly.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Since you already accepted the other answer, i thought the anti-debugging trick probably doesn't apply to you. But i wanted to add it in case someone googles the question in a year or two.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Till Ulen",
            "text": "<html><body><span class=\"comment-copy\">\n Here is a\n <a href=\"https://stackoverflow.com/questions/44854497/why-does-64-bit-vc-compiler-add-nop-instruction-after-function-calls\">\n  similar question\n </a>\n on Stack Overflow.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The packer may have replaced an indirect call to an imported function with a direct (relative) call to another function. This would make the instruction shorter by one byte, necessitating the padding with one NOP:\n </p>\n <pre><code>FF 15 ?? ?? ?? ??  call cs:[__imp_foo] ; RIP-relative offs32 indirect\nE8 ?? ?? ?? ??     call foo            ; RIP-relative offs32\n</code></pre>\n</div>\n</body></html>",
            "votes": "5",
            "user": "DarthGizka",
            "time": "Jan 16, 2015 at 14:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "uranix",
                    "text": "<span class=\"comment-copy\">But the call is within the same module. Why use import for that?</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">Some packers ('protectors') stay resident and offer an API to the wrapped executable. The executable is built against a DLL exporting the wrapper API, hence the indirect calls emitted by the compiler, through the address slots in the IAT. But the wrapper may choose to resolve those imports to direct calls during the loading/unpacking process. That way the loaded process won't have a treacherous IAT telling tales. 'Minimal rebuild' debug builds tend to use strange thunking/reserve mechanisms as well, but debug builds are rarely wrapped and shipped...</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">In 32-bit mode all indirect calls to fixed targets can be converted to direct calls (again, to ditch the IAT) but in 64-bit mode that would require trampoline thunks for distances exceeding 2^31 bytes.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">likely just the linker, not packer. <a href=\"https://blogs.msdn.microsoft.com/russellk/2005/03/20/lnk4217/\" rel=\"nofollow noreferrer\">blogs.msdn.microsoft.com/russellk/2005/03/20/lnk4217</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is likely that the first instruction\n  <em>\n   after\n  </em>\n  the NOP is the target of a different branch/jump somewhere else. Jumping to aligned targets is normally preferable both for better i-cache utilization and for better BTB predictions:\n </p>\n <blockquote>\n  <p>\n   <strong>\n    11.5 Alignment of code\n   </strong>\n  </p>\n  <p>\n   Most microprocessors fetch code in aligned 16-byte or 32-byte blocks.\n  </p>\n  <p>\n   If an important subroutine entry or jump\n  label happens to be near the end of a 16-byte block then the\n  microprocessor will only get a few useful bytes of code when fetching\n  that block of code. It may have to fetch the next 16 bytes too before\n  it can decode the first instructions after the label. This can be\n  avoided by aligning important subroutine entries and loop entries by\n  16.\n  </p>\n  <p>\n   Aligning by 8 will assure that at least 8 bytes of code can be loaded with the first instruction fetch, which may be sufficient if\n  the instructions are small.\n  </p>\n  <p>\n   We may align subroutine entries by the\n  cache line size (typically 64 bytes) if the subroutine is part of a\n  critical hot spot and the preceding code is unlikely to be executed in\n  the same context.\n  </p>\n </blockquote>\n <p>\n  <a href=\"http://agner.org/optimize/optimizing_assembly.pdf#page=86\" rel=\"nofollow noreferrer\">\n   http://agner.org/optimize/optimizing_assembly.pdf#page=86\n  </a>\n </p>\n <p>\n  This would make that NOP just a padding to align the following instructions. As pointed out elsewhere, adding padding for this must be done carefully because adding padding blindly is likely to lead to\n  <em>\n   worse\n  </em>\n  i-cache usage and therefore a decrease in performance. Always measure.\n </p>\n <hr/>\n <p>\n  note: in other architectures (i.e. not x86/x86-64) NOPs after calls are sometimes required; since the question is about x86-64 this shouldn't apply.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "CAFxX",
            "time": "May 12, 2018 at 2:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}