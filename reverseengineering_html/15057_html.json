{
    "title": "IDA ignoring register changes in pseudocode",
    "link": "https://reverseengineering.stackexchange.com/questions/15057/ida-ignoring-register-changes-in-pseudocode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The Watcom compiler uses a fairly unusual calling convention, and IDA seems to be discarding some of the changes as irrelevant to its built-in pseudo-code. In my experience, that usually means I'm doing something wrong, as opposed to IDA :)\n </p>\n <p>\n  For example, in the following function fragment, the changes to\n  <code>\n   ebx\n  </code>\n  and\n  <code>\n   edx\n  </code>\n  are ignored in the pseudo-code.\n </p>\n <pre><code>; void __usercall RunScrIncDec(GeneralObject *object@<eax>, int *bufPtr@<edx>, int value@<ebx>)\nRunScrIncDec    proc near\n                cmp     byte ptr [edx], 0Ah\n                jnz     short loc_164288\n\n                inc     ebx\n                inc     edx\n                retn\n...\n</code></pre>\n <p>\n  Note here that bufPtr and value are both incremented, and value is indeed passed by value, not by reference.\n </p>\n <p>\n  If I change the function's return type so that it's an int by replacing the\n  <code>\n   void\n  </code>\n  return type with an\n  <code>\n   int\n  </code>\n  and appending the value location\n  <code>\n   @<ebx>\n  </code>\n  , then IDA includes\n  <code>\n   ebx\n  </code>\n  one in the pseudo-code, but still ignores\n  <code>\n   edx\n  </code>\n  .\n </p>\n <p>\n  Is there any way to tell IDA to pay attention to these changes?\nThat\n  <code>\n   edx\n  </code>\n  and\n  <code>\n   ebx\n  </code>\n  aren't merely spoiled by the function, and that they're notable changes that should be reversed to bufPtr++ and value++ rather than not showing any pseudo-code at all?\nOr is this just something that IDA isn't built to handle?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "492",
    "tags": [
        "ida",
        "functions"
    ],
    "user": "RobinHood70",
    "time": "Apr 2, 2017 at 8:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you rightfully figured out, IDA only takes into account changes it understands are related to the rest of the code. It will consider those values only in the case they're indeed return values the calling function.\n </p>\n <p>\n  What you'll need to do, as you've figured out yourself, is to make IDA understand those are returned values.\n </p>\n <p>\n  Here's a trick to let you do that, by setting that function to return a\n  <em>\n   structure\n  </em>\n  of two DWORDs (or any other type defined in the structure).\n </p>\n <p>\n  First, create an IDA structure by going to the structures view (\n  <kbd>\n   shift\n  </kbd>\n  +\n  <kbd>\n   F9\n  </kbd>\n  ) and then create a new structure (\n  <kbd>\n   INS\n  </kbd>\n  ).\n </p>\n <p>\n  In that structure, define two DWORD integers (either by using\n  <kbd>\n   D\n  </kbd>\n  on the bottom of the structure or\n  <kbd>\n   CTRL\n  </kbd>\n  +\n  <kbd>\n   E\n  </kbd>\n  to increase the structure's size first).\n </p>\n <p>\n  Then go back to the function, and modify the function's prototype. replace the\n  <code>\n   void\n  </code>\n  return type with the name of your structure, and append the\n  <em>\n   value location\n  </em>\n  specifier after the function's name. To specify two registers, in our case\n  <code>\n   EBX\n  </code>\n  and EDX`, use colons in between.\n </p>\n <p>\n  The final result should look like this, assuming you named your struct\n  <code>\n   s_ret\n  </code>\n  :\n </p>\n <pre><code>s_ret __usercall RunScrIncDec@<eax:ecx>(GeneralObject *object@<eax>, int *bufPtr@<edx>, int value@<ebx>)\n^^^^^                        ^^^^^^^^^^\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Apr 2, 2017 at 9:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "RobinHood70",
                    "text": "<span class=\"comment-copy\">Thank you! I'd figured out I could sort of hack a pointer with a double register return value in a similar manner, but of course, that's not quite the same, and produced all kinds of wonky results. This is the bit I was missing.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">You're welcome! Glad I could help</span>",
                    "time": null
                },
                {
                    "user": "RobinHood70",
                    "text": "<span class=\"comment-copy\">Follow-up question: I'm now getting some uses of <code>__PAIR__</code> as IDA tries to treat the double DWORD as 64-bit value. Is there any way around this?</span>",
                    "time": null
                }
            ]
        }
    ]
}