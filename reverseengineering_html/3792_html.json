{
    "title": "Generate a sig file from ELF executable",
    "link": "https://reverseengineering.stackexchange.com/questions/3792/generate-a-sig-file-from-elf-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a mipsel executable (DvdPlayer from a RTD1283 firmware). I know that IDA is able to identify many functions. Then, I would like to generate a\n  <code>\n   .sig\n  </code>\n  file with signatures of these functions for use with other executable DVDPlayer (from other firmwares).\n </p>\n <p>\n  Would it be possible to convert the executable in a library ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "firmware",
        "mips"
    ],
    "user": "usr100001",
    "time": "Jun 6, 2014 at 15:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can try the\n  <a href=\"http://www.openrce.org/blog/browse/darko\" rel=\"nofollow\">\n   IDB_2_SIG\n  </a>\n  plugin that generates signature files from the IDB itself.\n </p>\n <p>\n  One thing to note is that with gcc-built MIPS ELF files, many non-library symbols/function names (basically anything in a .o file) get entries in the dynamic symbol table and thus survive strip/sstrip as long as the binary is dynamically linked. So you\n  <em>\n   probably\n  </em>\n  won't need to generate signatures against this ELF in order to identify those same functions in similar ELF files from other DVDPlayer firmwares - they'll just be there and IDA will do its thing.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "devttys0",
            "time": "Mar 5, 2014 at 15:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "usr100001",
                    "text": "<span class=\"comment-copy\">I'm using IDA 6.1 for windows on linux but I have no windows compiler. I searched for an IDB2Sig executable and found <a href=\"http://woodmann.com/collaborative/tools/index.php/Fast_IDB2Sig_and_LoadMap_IDA_plugins\" rel=\"nofollow noreferrer\">woodmann.com/collaborative/tools/index.php/â€¦</a> but no luck (bad .pat file).  I have DVDPlayer executables in both formats, static and dynamically linked. The idea was to generate a .sig file with the dynamically linked version of DvdPlayer and use it to identify the same functions in the static DvdPlayer.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, either use IDA's FLAIR tools or use one of the tools mentioned here:\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1347/tools-to-work-cooperatively-on-the-same-binary/\">\n   Tools to work cooperatively on the same binary\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "usr100001",
                    "text": "<span class=\"comment-copy\">How? I can generate a .sig file from a library with: pelf library library.pat and sigmake library.pat library.sig, but if I try pelf with an executable then I get \"non-relocatable elf module, skipped\" message and .pat file is not created.</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">No, you can't generate a FLIRT signature out of a non relocatable ELF module as far as I remember.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">In that case, follow the link I posted above instead.</span>",
                    "time": null
                },
                {
                    "user": "usr100001",
                    "text": "<span class=\"comment-copy\">I think you misunderstood my problem. I work with SEVERAL executable FILES and I want to use the information I get from one in the other. Sorry for my bad english.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I understood your question. Most of the tools to which I linked (such as <a href=\"https://crowdre.crowdstrike.com/\" rel=\"nofollow noreferrer\">crowdre.crowdstrike.com</a>) support that scenario.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IIRC, you cannot generate a FLIRT signature from a non relocatable ELF binary. You may have better luck using BinDiff to export the function names and comments. If this is all you need it should be enough, I use it a lot for this very same purpose.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Mar 5, 2014 at 15:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "usr100001",
                    "text": "<span class=\"comment-copy\">Is it useful for files with many differences? I tried <a href=\"https://code.google.com/p/patchdiff2/\" rel=\"nofollow noreferrer\">code.google.com/p/patchdiff2</a> but only got results with similar files (dynamically linked with function names included in the executable).</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">BinDiff works with partially similar files. This is why this tool was wrote, I think.</span>",
                    "time": null
                }
            ]
        }
    ]
}