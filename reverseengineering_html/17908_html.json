{
    "title": "Arm function save registers r0 and r1",
    "link": "https://reverseengineering.stackexchange.com/questions/17908/arm-function-save-registers-r0-and-r1",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I see arm 32 bits assembly code.\n </p>\n <p>\n  Usually each function do\n  <code>\n   push { r4-r9,lr}\n  </code>\n  ( save 6 registers on stack ).  And in the end of function pop them .\n </p>\n <p>\n  I see function that save\n  <code>\n   push {r0,r1,r4-r9,lr}\n  </code>\n  but in the end of function pop only r4-r9\nWhy is that? R0 and r1 suppost to be args, why to push them to stack?\n </p>\n <p>\n  By the way, what\n  <code>\n   lr\n  </code>\n  meam?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "667",
    "tags": [
        "disassembly",
        "binary-analysis",
        "x86",
        "arm"
    ],
    "user": "arm",
    "time": "Apr 5, 2018 at 14:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The compiler generates this code depending on which registers it needs to be preserved in the caller function. So usually r4-r9 are saved and then restored in the end of the function. r0 and r1 may be saved to stack in order to reuse them later.\n </p>\n <p>\n  Ex:\n </p>\n <pre><code>void main(argc, argv)\n{\n  ParseStringArguments(&stringArguments, argc, argv);\n  ParseNumericArguments(&numericArguments, argc, argv);\n}\n</code></pre>\n <p>\n  main will get argc and argv through r0 and r1. Then it will be necessary to call ParseStringArguments. stringArguments will be passed through r0, argc through r1 and argv through r2. So the compiler will have to rewrite r0 and r1 with the new values. Where will it get the values of argc and argv when it comes to the call of ParseNumericArguments? So compiler generates the code to store argc and argv to stack, then load them back right before the call.\n </p>\n <p>\n  LR holds return address.\n  <a href=\"https://en.wikipedia.org/wiki/Link_register\" rel=\"nofollow noreferrer\">\n   https://en.wikipedia.org/wiki/Link_register\n  </a>\n  function uses it to return to the caller function via\n </p>\n <pre><code>MOV PC, LR \n</code></pre>\n <p>\n  or\n </p>\n <pre><code>BX LR\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Anton Kukoba",
            "time": "Apr 5, 2018 at 15:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}