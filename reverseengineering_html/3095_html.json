{
    "title": "Proprietary MS SQL server based file format",
    "link": "https://reverseengineering.stackexchange.com/questions/3095/proprietary-ms-sql-server-based-file-format",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse engineer an application that uses SQL server but somehow hides the database files inside its own proprietary file format. What I'm aiming to do is to write my own app that can extract the data from the application files so I can work on it using my own preferred tools.\n </p>\n <p>\n  I can use WinDbg to intercept the SQL but I can't see how the application connects its datafile with the SQL server. Can anyone suggest where I might look?\n </p>\n <p>\n  Cheers!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "317",
    "tags": [
        "file-format",
        "mssql"
    ],
    "user": "Jonathan",
    "time": "Nov 27, 2013 at 4:52",
    "comments": [
        {
            "user": "Devolus",
            "text": "<html><body><span class=\"comment-copy\">\n Does this help maybe?\n <a href=\"http://technet.microsoft.com/en-us/library/ms139941.aspx\" rel=\"nofollow noreferrer\">\n  technet.microsoft.com/en-us/library/ms139941.aspx\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Justin Dearing",
            "text": "<html><body><span class=\"comment-copy\">\n I'm not familiar with tracing T-SQL statements with WinDbg, are you just setting breakpoints at the function calls in which the Sql native provider are about to send a query over the TDS to the server?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the unlikely event that the file in question is just an mdf with a weird name, you can look at it with\n  <a href=\"https://github.com/improvedk/OrcaMDF\" rel=\"nofollow\">\n   OrcaMDF\n  </a>\n  by Mark S. Rasmussen.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Justin Dearing",
            "time": "Dec 7, 2013 at 19:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Run Sysinternals\n  <a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx\" rel=\"nofollow noreferrer\">\n   Process Monitor\n  </a>\n  and look for operation on that file, by any process. Something other than sqlserver.exe might be reading it. Once you see whats reading the file,\n  <a href=\"https://docs.microsoft.com/en-us/archive/blogs/vijaysk/getting-better-stack-traces-in-process-monitor-process-explorer\" rel=\"nofollow noreferrer\">\n   look at the stacktrace leading to the file io calls\n  </a>\n  in process monitor. Attach to that process that is reading the files with WinDbg and set the appropriate breakpoints to continue reverse engineering.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Glorfindel",
            "time": "Feb 27, 2021 at 0:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  MS SQL DBA here... \"Hides the database files in it's own proprietary format\" sounds a little off.\n </p>\n <p>\n  SQL Server can use anything Windows can use as a datasource. So you can have SQL Server making queries against a plain text file joined against an excel spreadsheet, joined against data is mysql, or sqlite. This is one of the strengths of SQL Server, it can wire in almost anything.\n </p>\n <p>\n  SQL Server also has MANY options for encryption of the underlying files.\n </p>\n <p>\n  My suspicion is that SQL Server is either A) connecting to a well known file type that it supports as a linked server / linked data source which is something you didn't realize it can connect to, or B) using a regular SQL Server file but using the encryption options to ensure that the data is secure at rest.\n </p>\n <p>\n  I would tend toward the latter B). If you don't want people to be able to snag the database file and dump the data,\n  <a href=\"https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/sql-server-encryption?view=sql-server-ver15\" rel=\"nofollow noreferrer\">\n   SQL Server encryption will handle that easily\n  </a>\n  . No need to create a special file format. A SQL Server developer would know that and go that route first.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "pythonpython",
            "time": "Feb 27, 2021 at 16:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}