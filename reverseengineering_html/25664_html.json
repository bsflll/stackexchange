{
    "title": "How do we decompile java so easy?",
    "link": "https://reverseengineering.stackexchange.com/questions/25664/how-do-we-decompile-java-so-easy",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have seen a lot of videos where everyone is decompiling the jar files so easily. but I learnt that we cannot decompile any compiled file so easily. I have a little bit of experience in Gidhra. I have analyzed some C compiled binaries. the C compiled binaries aren't that easy to decompile, I have seen it myself. but how does java decompilation works? tools just extract all source code written in it. you can take this video as an example,\n  <a href=\"https://www.youtube.com/watch?v=3bvKLj0akMM\" rel=\"nofollow noreferrer\">\n   Youtube IPPSEC\n  </a>\n  Please tell me the difference between C and Java compiled files decompilation.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "decompilation",
        "c",
        "java"
    ],
    "user": "lucky thandel",
    "time": "Aug 13, 2020 at 4:55",
    "comments": [
        {
            "user": "Antimony",
            "text": "<html><body><span class=\"comment-copy\">\n Have you tried searching online for \"Why is Java easier to decompile than C\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Col-E",
            "text": "<html><body><span class=\"comment-copy\">\n To add/showcase this phenomenon\n <i>\n  (ease of decompilation)\n </i>\n , here is a paper\n <i>\n  (2019 - August)\n </i>\n containing tables that showcase the accuracy of current Java decompilers:\n <a href=\"https://arxiv.org/pdf/1908.06895.pdf\" rel=\"nofollow noreferrer\">\n  arxiv.org/pdf/1908.06895.pdf\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In short, the difference is in the format into which Java and native code are compiled and executed. Compilation into native code formats eliminates from resulting executable a lot of information that Java code keeps by design, including, but not limited to the following list:\n </p>\n <ul>\n  <li>\n   Class names\n  </li>\n  <li>\n   Method names\n  </li>\n  <li>\n   Properties names and types\n  </li>\n  <li>\n   Methods borders\n  </li>\n  <li>\n   Exact exception definitions\n  </li>\n  <li>\n   Class structure\n  </li>\n  <li>\n   So called\n   <a href=\"https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings\" rel=\"nofollow noreferrer\">\n    bytecode\n   </a>\n   code of the methods in language which is very easy to understand and decompile because it is reference-based language and contains exact signatures of other called methods by design\n  </li>\n </ul>\n <p>\n  The more we know about the code, the easier it is for us to understand (and decompile) it.\n </p>\n <p>\n  Java code is executed in Java Virtual Machine (JVM). Native code is executed on the processor directly.\n </p>\n <p>\n  <a href=\"https://en.wikipedia.org/wiki/Java_virtual_machine\" rel=\"nofollow noreferrer\">\n   JVM\n  </a>\n  is executing\n  <a href=\"https://en.wikipedia.org/wiki/JAR_(file_format)\" rel=\"nofollow noreferrer\">\n   .jar\n  </a>\n  files.\n.jar files are zip archives that contain\n  <a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html\" rel=\"nofollow noreferrer\">\n   .class\n  </a>\n  files with definitions of classes.\nThis format is defined\n  <a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  and we can find in the referenced document everything that class file contains. Most of information we know about java bytecode is lost during  the native code compilation.\n </p>\n <p>\n  If you want to understand a bit more about java classes internals I'd suggest you to write some simple java class, compile it and then disassemble it with\n  <a href=\"https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html\" rel=\"nofollow noreferrer\">\n   javap\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "w s",
            "time": "Aug 13, 2020 at 5:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}