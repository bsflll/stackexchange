{
    "title": "Register flags abbreviations in Windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/33249/register-flags-abbreviations-in-windbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I used trace (t) command in Windbg but I don't see the flag values, except this:\n </p>\n <p>\n  nv up ei pl nz na pe nc\n </p>\n <p>\n  I suppose these are some abbreviations of flag states but I cannot find what they mean. Is there some reference of this?\n </p>\n <p>\n  Thanks in adv,\nAdi\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "52",
    "tags": [
        "windbg"
    ],
    "user": "Uddie",
    "time": "Oct 6, 2024 at 22:22",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://github.com/MicrosoftDocs/windows-driver-docs/blob/staging/windows-driver-docs-pr/debugger/x86-architecture.md#x86-flags\" rel=\"nofollow noreferrer\">\n  check x86 flags registers\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  in x86 the flag is denoted by\n  <strong>\n   EFLAGS\n  </strong>\n  \n\n  in x64 the flag is denoted by\n  <strong>\n   RFLAGS\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 0\n  </strong>\n  is\n  <strong>\n   Carry Flag\n  </strong>\n  \n\n  <strong>\n   CF\n  </strong>\n  and can be either\n  <strong>\n   NC (No Carry)\n  </strong>\n  or\n  <strong>\n   CY (Carry)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 1\n  </strong>\n  is\n  <strong>\n   reserved Flag\n  </strong>\n  and is normally set to 1\n </p>\n <p>\n  <strong>\n   Bit 2\n  </strong>\n  is\n  <strong>\n   Parity Flag\n  </strong>\n  \n\n  <strong>\n   PF\n  </strong>\n  and can be either\n  <strong>\n   PE (Parity EVEN)\n  </strong>\n  or\n  <strong>\n   PO (Parity Odd)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 3\n  </strong>\n  is\n  <strong>\n   reserved Flag\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 4\n  </strong>\n  is\n  <strong>\n   Auxillary Carry\n  </strong>\n  \n\n  <strong>\n   AF\n  </strong>\n  and can be either\n  <strong>\n   AC (Aux Carry)\n  </strong>\n  or\n  <strong>\n   NA (No Aux Carry)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 5\n  </strong>\n  is\n  <strong>\n   reserved Flag\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 6\n  </strong>\n  is\n  <strong>\n   Zero Flag\n  </strong>\n  \n\n  <strong>\n   ZF\n  </strong>\n  and can be either\n  <strong>\n   ZR (Zero)\n  </strong>\n  or\n  <strong>\n   NZ (Not Zero)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 7\n  </strong>\n  is\n  <strong>\n   Sign Flag\n  </strong>\n  \n\n  <strong>\n   SF\n  </strong>\n  and can be either\n  <strong>\n   NG (Negative )\n  </strong>\n  or\n  <strong>\n   PL (Positive)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 8\n  </strong>\n  is\n  <strong>\n   Trap Flag\n  </strong>\n  \n\n  <strong>\n   TF\n  </strong>\n  and is used for single Step Trap\n </p>\n <p>\n  <strong>\n   Bit 9\n  </strong>\n  is\n  <strong>\n   Interrupt Enable\n  </strong>\n  \n\n  <strong>\n   IF\n  </strong>\n  and can be either\n  <strong>\n   EI (Enable Interrupt)\n  </strong>\n  or\n  <strong>\n   DI (Disable Interrupt)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 10\n  </strong>\n  is\n  <strong>\n   Direction Flag\n  </strong>\n  \n\n  <strong>\n   DF\n  </strong>\n  and can be either\n  <strong>\n   DN (DOWN )\n  </strong>\n  or\n  <strong>\n   UP (UP)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 11\n  </strong>\n  is\n  <strong>\n   OverFlow Flag\n  </strong>\n  \n\n  <strong>\n   OF\n  </strong>\n  and can be either\n  <strong>\n   OV (OverFlow )\n  </strong>\n  or\n  <strong>\n   NV (No OverFlow)\n  </strong>\n </p>\n <p>\n  <strong>\n   Bit 12 & 13\n  </strong>\n  is\n  <strong>\n   IOPL Flag\n  </strong>\n  \n\n  used for Privilege level  (user privileges and kernel privileges)\n </p>\n <p>\n  in windbg you can set the efl to 0 and check the register display as below\n </p>\n <pre><code>0:000> r efl =0\n0:000> r\niopl=0         nv up di pl nz na pe nc\nefl=00000000\n</code></pre>\n <p>\n  since all bits are 0  the display shows\n </p>\n <pre><code>nc = No Carry\npe = Parity Even\nna = No Auxillary Carry\nnz = Not Zero\npl = Positive\ndi = Disable Interrupt\nup = Direction Up\nnv = No Overflow\n</code></pre>\n <p>\n  and then set each flag individually to check the display\n  \n\n  setting carry flag changes nc to cy\n </p>\n <pre><code>0:000> r cf =1\n0:000> r\niopl=0         nv up di pl nz na pe cy\n</code></pre>\n <p>\n  setting the parity flag changes pe to po\n </p>\n <pre><code>0:000> r pf =1\n0:000> r\niopl=0         nv up di pl nz na po cy\n</code></pre>\n <p>\n  and so on\n </p>\n <pre><code>0:000> r af =1\n0:000> r zf =1\n0:000> r sf =1\n0:000> r tf =1\n0:000> r if =1\n0:000> r df =1\n0:000> r of =1\n0:000> r\niopl=0         ov dn ei ng zr ac po cy\n</code></pre>\n <p>\n  for other esetoric flags check the link as commented or\n  <a href=\"https://en.wikipedia.org/wiki/FLAGS_register\" rel=\"nofollow noreferrer\">\n   wikipedia here\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Oct 7, 2024 at 12:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Uddie",
                    "text": "<span class=\"comment-copy\">Thank you very, very much! Your answer exceeds what I wanted to know :-)</span>",
                    "time": null
                }
            ]
        }
    ]
}