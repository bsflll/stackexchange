{
    "title": "How to reach functions triggered by non-standard buttons?",
    "link": "https://reverseengineering.stackexchange.com/questions/19161/how-to-reach-functions-triggered-by-non-standard-buttons",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've already read related posts such as:\n </p>\n <ul>\n  <li>\n   link1:\n   <a href=\"https://stackoverflow.com/questions/24138087/how-can-i-set-a-breakpoint-for-a-button-click-using-ollydbg\">\n    https://stackoverflow.com/questions/24138087/how-can-i-set-a-breakpoint-for-a-button-click-using-ollydbg\n   </a>\n  </li>\n  <li>\n   link2:\n   <a href=\"https://reverseengineering.stackexchange.com/questions/3288/how-can-i-set-a-breakpoint-for-a-button-click\">\n    How can I set a breakpoint for a button click?\n   </a>\n  </li>\n </ul>\n <p>\n  Unfortunately, none of them helped me out to solve my doubts. My goal here is learning the most possible generic method to jump onto routines triggered by non standard buttons (created by any kind of UI framework).\n </p>\n <p>\n  In order to ilustrate my concern I've created a dummy\n  <a href=\"https://www.dropbox.com/s/g2oq37jz1p8vhwj/crackme1.exe?dl=1\" rel=\"nofollow noreferrer\">\n   crackme\n  </a>\n  - (in a range 0-10 I'd say level -1 :))\n </p>\n <p>\n  For this exercise to be really useful let's assume:\n </p>\n <ul>\n  <li>\n   The \"crackme\" doesn't contain any hardcoded serial you can use\n  </li>\n  <li>\n   The \"crackme\" doesn't contain any activation message you can use to inspect the code around\n  </li>\n  <li>\n   BMSG such as WM_PARAM/WM_LBUTTONUP, BT_CLICK won't do it\n  </li>\n </ul>\n <p>\n  I've created this little mcve to ilustrate better my real concern, on the real-world case I'm working on I'd like to read the routine triggered by a button from the beginning to end in order to decode the algorithm used.\n </p>\n <p>\n  So yeah, the question would be, what are the methods to deal with this particular problem?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "650",
    "tags": [
        "windows",
        "x64dbg",
        "crackme"
    ],
    "user": "BPL",
    "time": "Aug 27, 2018 at 2:26",
    "comments": [
        {
            "user": "user22970",
            "text": "<html><body><span class=\"comment-copy\">\n I've also failed to break on buttons multiple times. a small workaround I usually take is breaking on GetDlgItemText and GetWindowText. It usually breaks when they read the input to verify it's content.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user22970",
            "text": "<html><body><span class=\"comment-copy\">\n I remember doing something like that in olly. i manully added a conditional breakpoint of \"argument is not the one i'm looking for\" (something like [esp+4] != ADDR). that's a lot of manual work so i'd also like to know if someone has a better idea\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  open crackme in windbg set a bp on GetWindowTextW and run enter some fake \ndata and hot register button  on break go up to the next frame which called the function\n </p>\n <pre><code>:\\>cdb crackme1.exe\n\nMicrosoft (R) Windows Debugger Version 10.0.16299.15 X86\n0:000> bp USER32!GetWindowTextW\n0:000> g\n\n\nBreakpoint 0 hit\n*** WARNING: Unable to verify timestamp for D:\\crackme1.exe\n*** ERROR: Module load completed but symbols could not be loaded for D:\\crackme1.exe\n\nUSER32!GetWindowTextW:\n772db8c5 6a08            push    8\n0:000> dd esp l4\n015ef760  005312bf 000603a8 000bb324 0000000c\n0:000> dc bb324 l8\n000bb324  00650052 00690067 00740073 00720065  R.e.g.i.s.t.e.r.\n000bb334  00690000 00000074 00000000 abababab  ..i.t...........\n\n0:000> gu\neax=0000000b ebx=00118988 ecx=772db928 edx=00000030 esi=015efa4c edi=015efa5c\neip=005312bf esp=015ef770 ebp=015ef7b0 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\ncrackme1+0x1312bf: <<<<<<<<<<<<<<<<<<\n005312bf 8945f4          mov     dword ptr [ebp-0Ch],eax ss:0023:015ef7a4=0000000b\n0:000> dc bb324 l8\n000bb324  00610079 006b006b 00200075 00610062  y.a.k.k.u. .b.a.\n000bb334  006b006b 00000075 00000000 abababab  k.k.u...........\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 27, 2018 at 20:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">it is not some kind of protection any super classed or subclassed routines always behave that way (they are called constantly for every message that is pumped in so your debugger breaks you can always add multiple conditions to breaks</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">use winspy or spy++ to find the window handle and set a condition with message</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if it is an edit box the system needs to retrieve it with apis try WM_GETTEXT  get deep into system set a break in Translate / Dispatch Message Apis or inside ntdll win32k system services like ntUserOneParam  some where it needs to show up</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">so doesnt like extensded comments in your screen shot all the hwnd have one common WinProc 0x455578  set a break there and filter message in call stack</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem here is not to solve the crackme, but to find the handler of the \"Register\" button. I describe what could be done to find the button handler. There is probably no \"generic\" standard procedure working in all similar cases.\n </p>\n <p>\n  However, although this is a special case, I assumed normal \"generic\" windows message behaviour. In that case I can expect somewhere a\n  <code>\n   WM_LBUTTONX\n  </code>\n  message, X being\n  <code>\n   UP\n  </code>\n  or\n  <code>\n   DOWN\n  </code>\n  , with values\n  <code>\n   0x201\n  </code>\n  or\n  <code>\n   0x202\n  </code>\n  . Thus I searched statically for the value\n  <code>\n   200h\n  </code>\n  in Ida, this being the start  of the \"Mouse group\" in the Windows\n  <code>\n   WM_\n  </code>\n  messages set.\n </p>\n <p>\n  There are a number of locations found where a compare is made with\n  <code>\n   0x200\n  </code>\n  . On these I set a breakpoint. Two of these are hit on mouseclicks, and one of them investigates explicitely\n  <code>\n   0x201 (WM_LBUTTONDOWN)\n  </code>\n  and\n  <code>\n   0x202 (WM_LBUTTONUP)\n  </code>\n  :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/9Qqkr.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/9Qqkr.jpg\"/>\n  </a>\n </p>\n <p>\n  If you step futher down the\n  <code>\n   WM_LBUTTONUP\n  </code>\n  path you come directly to the following location, with a call to\n  <code>\n   f_someMsgHandler\n  </code>\n  (as I called it):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/i0D6J.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/i0D6J.jpg\"/>\n  </a>\n </p>\n <p>\n  This function is called on several occasions, but the one corresponding to the mouse event is easily found, e.g. by setting a selective breakpoint. In this function, the following location leads directly to the handler of\n  <code>\n   WM_LBUTTONUP\n  </code>\n  of the \"Register\" button, being located at address\n  <code>\n   0x4fead0\n  </code>\n  (that address unfortunately hidden in the tooltip):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/qHu5l.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/qHu5l.jpg\"/>\n  </a>\n </p>\n <p>\n  To solve the crackme, it would possibly be easier to look for something like \"GetWindowText\".\n </p>\n <p>\n  This shows, that in contrast to the OP's remark, it is very well possible to follow the trace of the standard windows mouse messages in order to find the proper handler.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "josh",
            "time": "Aug 27, 2018 at 23:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}