{
    "title": "my question is what means proc near?",
    "link": "https://reverseengineering.stackexchange.com/questions/15906/my-question-is-what-means-proc-near",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>sub_123434 proc near \nmov esi, [ebp-1Ch] \nsub_123434 endp\n</code></pre>\n <p>\n  What means proc near? Can someone possibly explain also the whole\nfunction?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "disassembly",
        "debugging"
    ],
    "user": "Yoonisj",
    "time": "Jul 24, 2017 at 13:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Insofar as\n  <code>\n   proc\n  </code>\n  and\n  <code>\n   endp\n  </code>\n  , start\n  <a href=\"https://msdn.microsoft.com/en-us/library/01d2az3t.aspx\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  . A good explanation for\n  <code>\n   near\n  </code>\n  can be found from\n  <a href=\"http://spot.pcc.edu/~wlara/asmx86/asmx86_manual_8.pdf\" rel=\"nofollow noreferrer\">\n   this document\n  </a>\n  , which states as follows:\n </p>\n <blockquote>\n  <p>\n   Attribute is NEAR if the Procedure is in the same code segment as the\n  calling program; or FAR if in a different code segment.\n  </p>\n </blockquote>\n <p>\n  The meat of the code is this:\n </p>\n <pre><code>mov esi,[ebp-1Ch]\n</code></pre>\n <p>\n  This bit of code is moving a value from the stack into the\n  <code>\n   esi\n  </code>\n  register. Depending on the compiler used and context, you might stand to glean additional information from\n  <a href=\"http://www.swansontec.com/sregisters.html\" rel=\"nofollow noreferrer\">\n   register conventions\n  </a>\n  where a value being moved into the\n  <code>\n   esi\n  </code>\n  register is concerned. More specifically, consider the accepted answer from\n  <a href=\"https://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers\">\n   this post\n  </a>\n  .\n </p>\n <p>\n  Also,\n  <code>\n   ebp-\n  </code>\n  (as opposed to\n  <code>\n   ebp+\n  </code>\n  ) is a typical sign of arguments that have been passed to a function--of which those values reside on the stack within memory addresses that can be referenced as long as that particular\n  <a href=\"https://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell\">\n   stack frame\n  </a>\n  exists.\n </p>\n <p>\n  Regarding\n  <code>\n   [ebp-1Ch]\n  </code>\n  , that's a pointer. In this case, the\n  <code>\n   ebp\n  </code>\n  register contains a memory address (or, more specifically, the value in\n  <code>\n   ebp\n  </code>\n  is treated as a reference to a memory address instead of a literal value), and\n  <code>\n   -1Ch\n  </code>\n  is an offset from that memory address. The lowercase 'h' is just a pneumonic meaning \"hex,\" and to that end, you might also sometimes see offsets and/or hex-based values referenced with a preceding 0x, like this:\n  <code>\n   [ebp-0x1C]\n  </code>\n  . Bearing that in mind, you can really think of that as\n  <code>\n   [ebp-1C]\n  </code>\n  .\n </p>\n <p>\n  Do note that\n  <code>\n   ebp\n  </code>\n  and\n  <code>\n   [ebp]\n  </code>\n  are different things.\n  <code>\n   [ebp]\n  </code>\n  means the value inside of\n  <code>\n   ebp\n  </code>\n  is treated as a reference to a memory address. Let's assume\n  <code>\n   ebp\n  </code>\n  has\n  <code>\n   0xD34DC0DE\n  </code>\n  in it. Now consider the following:\n </p>\n <pre><code>mov esi,ebp\nmov esi,[ebp]\nmov esi,[ebp-1C]\n</code></pre>\n <p>\n  The results of each of these would be the following:\n </p>\n <p>\n  <code>\n   mov esi,ebp\n  </code>\n  // esi now contains the literal value 0xD34DC0DE\n </p>\n <p>\n  <code>\n   mov esi,[ebp]\n  </code>\n  // esi now contains whatever is inside the memory address 0xD34DC0DE\n </p>\n <p>\n  <code>\n   mov esi,[ebp-1C]\n  </code>\n  // esi now contains whatever is inside the memory address 0xD34DC0C2 (which is 0xD34DC0DE - 1C)\n </p>\n <p>\n  Overall, it looks like that subroutine isn't doing anything but moving data from the stack into a register. As a completely blind assumption, if we assume that each argument passed to its respective function is 4-bytes wide, then\n  <code>\n   [ebp-1C]\n  </code>\n  references the 8th argument passed to perhaps a parent routine of this subroutine. In this case, other values of interest could potentially reside in\n  <code>\n   [ebp]\n  </code>\n  ,\n  <code>\n   [ebp-04]\n  </code>\n  ,\n  <code>\n   [ebp-08]\n  </code>\n  ,\n  <code>\n   [ebp-0C]\n  </code>\n  ,\n  <code>\n   [ebp-10]\n  </code>\n  ,\n  <code>\n   [ebp-14]\n  </code>\n  , and/or\n  <code>\n   [ebp-18]\n  </code>\n  .\n </p>\n <p>\n  Ultimately, we're lacking context here to gather what the purpose of this function you've provided is--though, again, a combination of the aforementioned conventions can possibly tell you a lot about what that mov instruction is potentially a part of. Look into\n  <a href=\"https://docs.microsoft.com/en-us/cpp/assembler/masm/proc\" rel=\"nofollow noreferrer\">\n   calling conventions\n  </a>\n  for additional clarity. You should be able to infer and research the rest based on the information herein.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "dsasmblr",
            "time": "Jul 24, 2017 at 14:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Yoonisj: please post a new question about that and provide relevant code snippets</span>",
                    "time": null
                },
                {
                    "user": "Yoonisj",
                    "text": "<span class=\"comment-copy\">call ds: RegOpenKyEx                                                                               call ds: RegEnumKey                                                                                         mov edi,ds:RegCloseKey                                                                                                                                                                                                          what this malware do in this function, if these three function are below each other</span>",
                    "time": null
                }
            ]
        }
    ]
}