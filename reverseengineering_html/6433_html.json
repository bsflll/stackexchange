{
    "title": "Disassemble instruction with a variable as an offset",
    "link": "https://reverseengineering.stackexchange.com/questions/6433/disassemble-instruction-with-a-variable-as-an-offset",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking to disassemble an instruction at an address. I know that there are many instructions that can accomplish this such as\n  <code>\n   idc.GetDisasm()\n  </code>\n  ,\n  <code>\n   idc.GetDisasmEx()\n  </code>\n  ,\n  <code>\n   idaapi.generate_disassembly()\n  </code>\n  , etc.\n </p>\n <p>\n  When I disassemble a line that has a variable in it, the variable appears in the disassembly. ie\n  <code>\n   38 81 00 38\n  </code>\n  disassembles as\n  <code>\n   addi r4, r1, 0x80+var_48\n  </code>\n  instead of\n  <code>\n   addi r4, r1, 0x38\n  </code>\n  .\n </p>\n <p>\n  Is there any way to disassemble this in the latter form ?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "691",
    "tags": [
        "disassembly",
        "idapython"
    ],
    "user": "Bambu",
    "time": "Oct 13, 2014 at 8:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You'll have to set the operand type, there are various functions to accomplish that.\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#OpHex\" rel=\"nofollow\">\n   OpHex\n  </a>\n  is most likely what you want to use.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Oct 12, 2014 at 20:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bambu",
                    "text": "<span class=\"comment-copy\">Thanks for the feedback. This could work if it is called for each instruction. However, two problems arise with it. A) I would like to restore it to the way it was prior to converting it with OpHex. B) OpHex/OpOff etc.. does not convert the operand of a branch.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  not idapython but idc\n </p>\n <pre><code>auto i;\n\nfor (  i = MinEA() ; i < MaxEA() ; i = NextHead(i, MaxEA()) )\n{\n    OpHex(i,-1);\n}\n</code></pre>\n <p>\n  take a look here for bit more details\n </p>\n <p>\n  <a href=\"https://stackoverflow.com/questions/23199403/differences-in-ollydbg-and-ida-pro-for-movsx-edx-byte-ptr-especx8-command/23604013#23604013\">\n   Convert [arg8+foo-blah+28] to [ebp+38]\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}