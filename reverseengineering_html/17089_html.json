{
    "title": "Reverse Intel hex to programming code",
    "link": "https://reverseengineering.stackexchange.com/questions/17089/reverse-intel-hex-to-programming-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a file in the Intel hex format, which was taken of from a pic16F1705 chip. I need to find a way to disassemble it into some form of human friendly programming language in order to make some modifications to it. I tried running it through a x86 and x64 dissembler, but in both cases I got an output, which looked like assembler code, but there were around 4000 bad lines in both cases.\nMy question is how should I disassemble this file, so I can read it in some human friendly programming language and modify it?\n </p>\n <pre><code>0:  02 00                   add    al,BYTE PTR [eax]\n2:  00 04 00                add    BYTE PTR [eax+eax*1],al\n5:  00 fa                   add    dl,bh\n7:  10 00                   adc    BYTE PTR [eax],al\n9:  00 00                   add    BYTE PTR [eax],al\nb:  80 31 0f                xor    BYTE PTR [ecx],0xf\ne:  28 ff                   sub    bh,bh\n10: 3f                      aas\n11: ff                      (bad)\n12: 3f                      aas\n13: 7e 14                   jle    0x29\n15: 80 31 20                xor    BYTE PTR [ecx],0x20\n18: 00 7f 08                add    BYTE PTR [edi+0x8],bh\n1b: a2 10 00 10 00          mov    ds:0x100010,al\n20: f0 00 04 2e             lock add BYTE PTR [esi+ebp*1],al\n24: 70 08                   jo     0x2e\n</code></pre>\n <p>\n  These are some example lines of the output I get after running the hex through a x86/x64 dissembler.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "3k",
    "tags": [
        "assembly",
        "disassemblers",
        "hex",
        "intel"
    ],
    "user": "Radi",
    "time": "Dec 31, 2017 at 14:33",
    "comments": [
        {
            "user": "broadway",
            "text": "<html><body><span class=\"comment-copy\">\n you'll need to use a pic disassembler -- it's not x86 or x64. I know ida supports pic 16xx cpus and there's this disassembler (but I haven't tried it)\n <a href=\"https://github.com/fredimachado/PICHexDisassembler\" rel=\"nofollow noreferrer\">\n  github.com/fredimachado/PICHexDisassembler\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Radi",
            "text": "<html><body><span class=\"comment-copy\">\n I tried it using ida and got some results, so I will continue working from here. Thank you really much for your help!\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n iirc radare2 understands ihex format files i think i had a post but cant find it atm\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Should work with radare2. Install radare2\n <a href=\"https://github.com/radare/radare2\" rel=\"nofollow noreferrer\">\n  from git\n </a>\n and execute\n <code>\n  r2 ihex://filename\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb,\n <a href=\"https://reverseengineering.stackexchange.com/a/11692/18698\">\n  this answer\n </a>\n , I assume\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}