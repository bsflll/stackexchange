{
    "title": "How to analyze a child process created by malware by process hollowing mechanism using immunity debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/13809/how-to-analyze-a-child-process-created-by-malware-by-process-hollowing-mechanism",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When I analyzed this malware sample it was invoking api's related to creating additional processes. With the process explorer I saw the debugged process is creating a new process. Please suggest any method to analyze this child process using immunity debugger?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/9yZmN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/9yZmN.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ollydbg",
        "debugging",
        "malware",
        "immunity-debugger",
        "winapi"
    ],
    "user": "wolverinegptg",
    "time": "Oct 25, 2016 at 4:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  using ollgdbgv2's debug child processes feature\n </h2>\n <p>\n  Instead of using Immunity Debugger (which is a forked from\n  <a href=\"http://ollydbg.de/\" rel=\"nofollow noreferrer\">\n   OllyDbg1.10\n  </a>\n  ), you might want to consider using\n  <a href=\"http://ollydbg.de/version2.html\" rel=\"nofollow noreferrer\">\n   OllyDbg2.0\n  </a>\n  .\n </p>\n <p>\n  One of the new features in ollydbg 2 is the Debug Child Processes feature shown here:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/GDxO5.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"debug child processes\" src=\"https://i.sstatic.net/GDxO5.png\"/>\n  </a>\n </p>\n <p>\n  When this checkbox is on when you start debugging a process, a new instance of ollydbg will automatically start whenever the debugged process creates a new process. This cannot be nested though, as a process started/debugged that way is not started by ollydbg.\n </p>\n <h2>\n  Catching the process creation\n </h2>\n <p>\n  Additionally, you can search for all imported functions, go over them manually and add a breakpoint on each API used to create processes, there shouldn't be more than a few of those.\n </p>\n <p>\n  Then, just let the process run until it hits one of those breakpoints and make the API call create the process in a suspended state (look up the specific API's documentation for the specifics).\n </p>\n <p>\n  You won't be able to attach to the process (because it's suspended) until it's resumed by calling\n  <code>\n   ResumeThread\n  </code>\n  on the process single thread. there's a common trick here that involves several steps:\n </p>\n <ol>\n  <li>\n   Create the process as suspended (The process you're debugging did that for you after you changed the parameters to the process creation API call appropriately).\n  </li>\n  <li>\n   Find the executable's entry point and take note of the two first bytes at that address.\n  </li>\n  <li>\n   Replace those bytes with the 2 byte representation of\n   <code>\n    jmp $\n   </code>\n   (byte code is\n   <code>\n    EB FE\n   </code>\n   ). This is an infinite loop as the instruction jumps to itself.\n  </li>\n  <li>\n   Resume the process.\n  </li>\n  <li>\n   Now that the process is \"running\" you can attach to it, suspend it, restore the original two bytes and run it.\n  </li>\n </ol>\n <p>\n  Keep in mind that a process might be creating additional threads in the child process, and those might get past the suspension. Use at your own risk :)\n </p>\n <p>\n  There are ollydbg v1.1 plugins (which means immunity plugins) that will do that for you, but you'll have to find them because I can't recall the name. tuts4you.com is a good place to start.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}