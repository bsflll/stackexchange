{
    "title": "Lego NXT Exploitation and Vulnerabilities?",
    "link": "https://reverseengineering.stackexchange.com/questions/12501/lego-nxt-exploitation-and-vulnerabilities",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First, I wasn't sure if I should post this on the Lego Stack Exchange site or here, and I decided this site had more to do with the question (I hope I don't get bad rep for this). OK, my friends and I have Lego NXT sumo bot competions for fun. Basically, you build a robot that waits five seconds and competes against a robot to stay on a board. We normally focus on the mechanical side to win against other robots (find them and push them off the board), but I had the idea to try a software attack. My idea was too:\n </p>\n <ol>\n  <li>\n   Find some sort of Bluetooth vulnerability that I could exploit from another NXT (I write my programs in NXC).\n  </li>\n  <li>\n   Upload a malicious program that makes the robot drive backwards forever.\n  </li>\n  <li>\n   Somehow execute the program(and win!).\n  </li>\n </ol>\n <p>\n  I have tried testing the NXT Bluetooth for vulnerabilities (I have knowledge of Windows/Linux exploitation and debugging) and I can't find anything. The main problem is that the NXT firmware handles Bluetooth connections, in other words you connect the devices with a pass code\n  <strong>\n   before\n  </strong>\n  running the program that requires Bluetooth. So, my questions are:\n </p>\n <ul>\n  <li>\n   Is this even slightly possible or a waste of time?\n  </li>\n  <li>\n   If there was a NXT Bluetooth vulnerability, could I even send it from another NXT that's not connected?\n  </li>\n  <li>\n   Was this the right place to post this question?\n  </li>\n  <li>\n   Would NXT debugging even be possible?\n  </li>\n </ul>\n <p>\n  <strong>\n   Update\n  </strong>\n  First, thanks for all of the ideas and answers. Secondly, several of the answers note about the legality of what I am trying to do. Yes, it is legal where I live. Third, I talked with main guy and judge of the competition and he said that he would love to see a software attack like this.\n </p>\n <p>\n  <strong>\n   Where I'm at now\n  </strong>\n  I have Kali Linux and the mac address has been found. I also found a paper\n  <a href=\"http://joanna.iwr.uni-heidelberg.de/projects/NXT_DAME/data/nxt_direct_command.pdf\" rel=\"nofollow\">\n   here\n  </a>\n  on the control protocols. The main dilemma I am still facing is the fact that a Bluetooth passcode has to be entered\n  <strong>\n   on\n  </strong>\n  the device I intend to connect to. Any updates will be posted here!\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "377",
    "tags": [
        "debugging",
        "exploit"
    ],
    "user": "Starwarsfan2099",
    "time": "Jun 27, 2016 at 1:11",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n It sounds like that stack is actually well designed. BTW this is not an \"exploits and vulnerabilities\" site, it's a reversing site.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Starwarsfan2099",
            "text": "<html><body><span class=\"comment-copy\">\n Since it is a reversing site, was this the right place to post this question?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n Given the lack of answers, and even comments re content, it probably wasn't. Do try Lego Stack Exchange, at least they are into that particular hardware.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Starwarsfan2099",
            "text": "<html><body><span class=\"comment-copy\">\n Ok, I'll post it there.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "grepNstepN",
            "text": "<html><body><span class=\"comment-copy\">\n as an aside, security.stackexchange.com would be the best place to ask this question. Out of curiousity, try to crack your friends' pairing codes for their NXT and robots and let us know how it turns out\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Two primary concerns: If your competition is with a formal organization/people who are \"friends\" but you never drank beer together, then for starters you want to see if this is even legal in your country. In the ole' US-of-A as this\n  <em>\n   could\n  </em>\n  be in violation of the CFAA, but I'm not a lawyer. Also, would this disqualify you from the (informal) competition?\n </p>\n <p>\n  Second, think about it: the following (cheeky) attack is notoriously hard to defend against and would require you and your friends changing your pairing codes immediately before AND after each match IN PRIVATE, which is a pain.\n </p>\n <p>\n  With that aside, there are quite a few ways to compromise the enemy team with\n  <strong>\n   <em>\n    <a href=\"https://www.youtube.com/watch?v=CN3iXGsK9YM\" rel=\"nofollow\">\n     features\n    </a>\n   </em>\n  </strong>\n  , not bugs :D Why go through the trouble of fuzzing the NXT's bluetooth stack and seeing if it has a JTAG port for you to debug it when you can do it the easy way?\nFor instance, before the match starts (if they already have their NXT on and are in range) you can pair to it, browse its saved connections and control their NXT, their robot AND yours! Or just directly pair to their robot. However, you need the pairing code!\n </p>\n <p>\n  To perform this attack, you absolutely need a device that you can sniff (high-speed) bluetooth traffic with. A software defined radio like hackRF comes\n  <strong>\n   <em>\n    highly\n   </em>\n  </strong>\n  recommended because its one of the only bluetooth devices I know that\n  <a href=\"https://penturalabs.wordpress.com/2013/09/01/ubertooth-open-source-bluetooth-sniffing/\" rel=\"nofollow\">\n   can\n  </a>\n  capture high speed bluetooth data packets. These are the steps I would take to exploit an enemy team's lego NXT or robot:\n </p>\n <p>\n  <strong>\n   For Steps 1-4, try it out on your own devices first, NOT theirs. Its always best to have a \"dry\" run (steps 1-4) before the \"live\" run (against their NXT/robot in step 5).\n  </strong>\n </p>\n <ol>\n  <li>\n   get Kali linux, as most of the tools comes with the image\n  </li>\n  <li>\n   Use bluesniff/blueScanner/etc. to grab the devices' address (looks like a mac address)\n  </li>\n  <li>\n   From there, use\n   <a href=\"http://tools.kali.org/wireless-attacks/bluesnarfer\" rel=\"nofollow\">\n    bluesnarf\n   </a>\n   to send custom ([-c]) commands. In this case, they would adhere to the Lego NXT Communication Protocol\n   <a href=\"http://www.robotappstore.com/Knowledge-Base/Introduction-To-Lego-NXT-Programming/32.html\" rel=\"nofollow\">\n    LCP specification\n   </a>\n   . Or, you could use bluesniff, log/save the bluetooth packets and use\n   <a href=\"http://www.security-sleuth.com/sleuth-blog/2015/9/6/now-i-wanna-sniff-some-bluetooth-sniffing-and-cracking-bluetooth-with-the-ubertoothone\" rel=\"nofollow\">\n    crackle\n   </a>\n   to crack your pairing code\n  </li>\n  <li>\n   OPTIONAL: the normal LCP commands you would send to your robot from your Lego NXT kit can probably be replayed, so I would try to sniff and replay them first using bluesnarf and a SDR.\n  </li>\n  <li>\n   Once you figure out the format of the bluetooth commands sent to the Lego NXT, now is the time to finish reconnaissance/enumeration.You'll want to go to one of your enemy team's previous matches and perform the former steps (obtain their NXT's/robot's address, sniff with your SDR, log/save the bluetooth packets) and use\n   <a href=\"http://www.security-sleuth.com/sleuth-blog/2015/9/6/now-i-wanna-sniff-some-bluetooth-sniffing-and-cracking-bluetooth-with-the-ubertoothone\" rel=\"nofollow\">\n    crackle\n   </a>\n   to crack their pairing codes.\n  </li>\n </ol>\n <p>\n  Armed with the enemy team's pairing codes, knowledge on how to send custom LCP commands via SDR and/or bluesnarf, in the next round you should be able to cheat quite a few different ways:\n </p>\n <ol>\n  <li>\n   Make their robot play Frogger: Pairing with the enemy team's NXT device as a master (it being a slave) and edit the NXC script that gets pushed via bluetooth to their robot\n  </li>\n  <li>\n   Lock 'em out: Change their pairing code for their robot at the beginning of the match\n  </li>\n  <li>\n   BONUS: Use what you learned regarding LPC and the SDR to write a lightweight bluetooth fuzzer that sends bluetooth data to the NXT or robot. More than likely you'll need a JTAG debugger. Bonus points if you can find a Remote Code Execution (RCE) vulnerability in the NXT's bluetooth stack that you can leverage to to draw Pikachu to their NXT's screen\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "grepNstepN",
            "time": "Jun 23, 2016 at 19:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Starwarsfan2099",
                    "text": "<span class=\"comment-copy\">I already have Kali, and have gotten Mac addresses. I'll start trying to get the protocol down. I also found some Lego papers on the bluetooth protocol,  I'll edit the post later with a link.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know which version of NXT you are using, since I'm not experienced with 3.0, but if you have a 2.0 brick you are able to install a custom firmware which would allow you to code in different languages.\n </p>\n <p>\n  There are two main cfw, one allows you to program in java and the other one in C.\n </p>\n <p>\n  From\n  <a href=\"http://www.teamhassenplug.org/NXT/NXTSoftware.html\" rel=\"nofollow\">\n   here\n  </a>\n  I would suggest you to install RobotC because it's quite powerful; while you can run standard lego binaries (the ones created with the block ide) you have the power of C.\n </p>\n <p>\n  From there, you should read the RobotC docs and learn the API used for bluetooth, and from there, try to implement a public exploit (if exists) or develop your own.\n </p>\n <p>\n  My opinion is that it would require lots of time and probably the bluetooth protocol is secure (not in the way it is not safe (cause it isn't and traffic can be sniffed), but I think it's difficult to achieve code execution on the remote lego)\n </p>\n <p>\n  Also, take a look at stack smash vulnerabilities.\n </p>\n <p>\n  EDIT: Also consider using those technics in a competition may be ilegal, and in your country it can be ilegal also to search for vulnerabilities.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "78dtat78da",
            "time": "Jun 24, 2016 at 11:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}