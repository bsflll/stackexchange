{
    "title": "How to write [sp+local_variable] in radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/18525/how-to-write-splocal-variable-in-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hello I'm playing with my native android library, everything was going smoothly till now. I have problem with opcodes, i don't know how to tell radare2 to write str opcode with specifc registry,  and point it to stack pointer and local variable.\n </p>\n <p>\n  Details below:\n </p>\n <p>\n  Lib loaded via :\n </p>\n <blockquote>\n  <p>\n   r2 -Aw lib/arm64-v8a/libnative-lib.so\n  </p>\n </blockquote>\n <p>\n  Before changes\n </p>\n <pre><code>|           ; var int local_ch @ sp+0xc\n|           ; var int local_10h @ sp+0x10\n|           ; var int local_18h @ sp+0x18\n[...]\n|           0x0000946c      e00f00f9       str x0, [sp + local_18h]\n|           0x00009470      e10b00f9       str x1, [sp + local_10h]\n</code></pre>\n <p>\n  Applying changes\n </p>\n <pre><code>[0x00009470]> wa str x1,sp+local_10h\nWritten 4 byte(s) (str x1,sp+local_10h) = wx e10300f9\n</code></pre>\n <p>\n  Unwanted output\n </p>\n <pre><code>[0x00009470]> pd 1\n|           0x00009470      e10300f9       str x1, [sp]\n</code></pre>\n <p>\n  Output that i want but don't know how to get it (note the  \"\n  <strong>\n   + local_10h\n  </strong>\n  \" label)\n </p>\n <pre><code>  [0x00009470]> pd 1\n  |           0x00009470     e10b00f9       str x1, [sp + local_10h]\n</code></pre>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 1,
    "views": "1k",
    "tags": [
        "arm",
        "radare2"
    ],
    "user": "TheKalin",
    "time": "Jun 14, 2018 at 14:46",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try to use \"wx e10b00f9\"? Also, seems like your \"before changes\" snippet already contains what you are trying to write\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "TheKalin",
            "text": "<html><body><span class=\"comment-copy\">\n Yeah \"before changes\" contains the output that i want because it is original state, i'm asking this question because i have changed it and now i'm unable to restore it. The command that you have provided works, but exactly as i wanted. However it pointed me in the right direction. I can write it by \"wa str x1,sp,0x10\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "TheKalin",
            "text": "<html><body><span class=\"comment-copy\">\n @Megabeets. Thanks for help! BTW. I was hoping that \"wa str x1,sp,local_10h \" will results in the same output as wa str x1,sp,0x10 (local_10h is a label for 0x10) but it doesn't work this way.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Sure! You are welcome :)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So to make an order from the comments - you can do it by using two approaches.\n </p>\n <ol>\n  <li>\n   <p>\n    Use the original opcodes and write them using\n    <code>\n     wx\n    </code>\n    which stands for \"\n    <strong>\n     w\n    </strong>\n    rite\n    <strong>\n     h\n    </strong>\n    ex\":\n   </p>\n   <pre><code>wx e10b00f9\n</code></pre>\n  </li>\n  <li>\n   <p>\n    If you still want to use\n    <code>\n     wa\n    </code>\n    you can do this like this:\n   </p>\n   <pre><code>wa str x1,sp,0x10\n</code></pre>\n  </li>\n </ol>\n <p>\n  In general, handling function's local variables can be done using the\n  <code>\n   afv\n  </code>\n  command and subcommands. Execute\n  <code>\n   afv?\n  </code>\n  to see its subcommands:\n </p>\n <pre><code>[0x00000000]> afv?\n|Usage: afv[rbs]\n| afvr[?]                     manipulate register based arguments\n| afvb[?]                     manipulate bp based arguments/locals\n| afvs[?]                     manipulate sp based arguments/locals\n| afv*                        output r2 command to add args/locals to flagspace\n| afvR [varname]              list addresses where vars are accessed (READ)\n| afvW [varname]              list addresses where vars are accessed (WRITE)\n| afva                        analyze function arguments/locals\n| afvd name                   output r2 command for displaying the value of args/locals in the debugger\n| afvn [old_name] [new_name]  rename argument/local\n| afvt [name] [new_type]      change type for given argument/local\n| afv-([name])                remove all or given var\n</code></pre>\n <p>\n  By executing\n  <code>\n   afv\n  </code>\n  you'll see a list of all arguments, and both\n  <code>\n   bp\n  </code>\n  and\n  <code>\n   sp\n  </code>\n  based local variables. For example, by executing\n  <code>\n   afvs\n  </code>\n  you'll see a list of all stack-pointer based variables. Use\n  <code>\n   afvb\n  </code>\n  to see variables that are base-pointer based.\n </p>\n <p>\n  After executing these commands, you'll see how these variable names were defined:\n </p>\n <pre><code>var int local_8h @ rsp+0x8\nvar int local_10h @ rsp+0x10\n</code></pre>\n <p>\n  For example, you can see that\n  <code>\n   local_8h\n  </code>\n  is defined for\n  <code>\n   rsp+0x8\n  </code>\n  , and\n  <code>\n   local_10h\n  </code>\n  for\n  <code>\n   rsp+0x10\n  </code>\n  .\n  \n\n  While debugging, you can use\n  <code>\n   afvd [var_name]\n  </code>\n  to shed more light on the variable.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Megabeets",
            "time": "Jun 15, 2018 at 7:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "TheKalin",
                    "text": "<span class=\"comment-copy\">I would add a small note about variable address, you can get it by typing:  afvd local_10h  and it will result in the output like this \"pxr $w @sp+0x10\".  \"</span>",
                    "time": null
                }
            ]
        }
    ]
}