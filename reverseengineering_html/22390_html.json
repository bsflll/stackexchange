{
    "title": "What is the difference between malware that is 'dumped' and one that is 'unpacked'?",
    "link": "https://reverseengineering.stackexchange.com/questions/22390/what-is-the-difference-between-malware-that-is-dumped-and-one-that-is-unpacke",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On malware sharing communities, I have been noticing that the samples shared are marked as\n  <em>\n   unpacked\n  </em>\n  or\n  <em>\n   dumped\n  </em>\n  . I have tried to load the\n  <em>\n   dumped\n  </em>\n  malware in\n  <code>\n   IDAFree\n  </code>\n  , however, there is nothing in the\n  <code>\n   imports\n  </code>\n  table. The malware samples are usually marked as\n  <code>\n   <hash>_dump_0x00980000\n  </code>\n  for instance.\n  <code>\n   0x00980000\n  </code>\n  seems like a memory address. But what does it mean for me trying to analyze it in IDA Free? Do I have to use that information somehow in\n  <code>\n   IDA\n  </code>\n  to load the sample correctly?\n </p>\n <p>\n  What I know: I realize that most real-world malware are packed. I understand the motivation behind this obfuscation and I understand how it can either be automatically unpacked if we know which packer was used, or it can be manually unpacked by stepping through it in a debugger and dumping relevant memory sections.\n </p>\n <p>\n  However, I do not understand how to analyze these \"dumped\" samples in IDA free. Most of the time, I see nothing in imports section and that makes the sample really hard to analyze. Is there a difference between\n  <em>\n   unpacked\n  </em>\n  and\n  <em>\n   dumped\n  </em>\n  that I should know about while loading it in\n  <code>\n   IDA\n  </code>\n  to see the actual imports section?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 3,
    "views": "815",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "malware",
        "ghidra"
    ],
    "user": "learnerX",
    "time": "Oct 25, 2019 at 7:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Is there a difference between unpacked and dumped that I should know about while loading it in IDA to see the actual imports section?\n  </p>\n </blockquote>\n <p>\n  You can dump anything not only packed binaries, but with packed ones it usually comes with stripped imports table just to make it hard(-er) to analyze.\n </p>\n <p>\n  After sample is unpacked it usually rebuild its import table so it can run correctly. So for you to be able to analyze the sample correctly in IDA, Ghidra or any other too, you should dump it after it's being done (it's usually the first call in the unpacked binary) or rebuild it on your own in your dump after it's being unpacked. Also it might be required to map this file to correct address so that memory addresses are resolved correctly.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Oct 25, 2019 at 8:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "learnerX",
                    "text": "<span class=\"comment-copy\">Is there any resource that explains how to map the files to correct addresses in IDA or Ghidra? I searched, but in vain.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">well in IDA you can specify this offset already when you load the file as an offset. In Ghidra, when importing the file you open <code>Options</code> and specify Base Address. You can alos do that later manipulating the memory map.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would say this really depends on your definition of\n  <em>\n   packing\n  </em>\n  . Typically packing is limited to compression moreso than protection. In this case the binary is updated to maintain virtual memory while minimizing file size. The entry point will decompress everything so, despite the files differing, the virtual memory at the point of executing the original entry point is identical to the original.\n </p>\n <p>\n  Dumping from memory is never enough by itself (in most cases) even for something as basic as compression. You will still need to rebuild the decompressed file properly (i.e adding imports, fixing section headers, etc.) These basics are done by most dumpers though, so I would say a typical dump is enough for a typical packer. What about further protection though?\n </p>\n <p>\n  In cases where a file is not only compressed but also obfuscated, the newly generated binary from a generic dump will still be exceedingly broken. For example the imports table may not only be removed but also dynamically relocated and encrypted. This will cause the dump to fail rebuilding imports which can significantly slow down reversing. Similarly the packer could strip relocations, remap sections, etc.\n </p>\n <p>\n  <strong>\n   Dumping\n  </strong>\n  \n\n  Typically refers to very generic unpacking. If the packer is simple compression then this is usually all that's needed for a proper copy of the original.\n </p>\n <p>\n  <strong>\n   Unpacking\n  </strong>\n  \n\n  Typically refers to more specialized unpacking. Various areas of the packer in this case will generate an image in memory different than the original copy, all changes of which need to be detected and reversed.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Pickle Rick",
            "time": "Oct 26, 2019 at 6:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "learnerX",
                    "text": "<span class=\"comment-copy\">Thanks. That last part about mapping of addresses back to original after unpacking, any good resources on it to read for IDA? I have looked but in vain.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A dumped file is, as the name suggests, a memory dumped process.\nMemory dumped means written to disk exactly as it is mapped in memory.\n </p>\n <p>\n  If there are any relocations, dynamic mapping, rebasing etc. that are done by the loader or by the program - they will be reflected in the file.\nBecause of this, the loader will not be able to load a dumped process out-of-the-box.\n </p>\n <p>\n  Unpacked files are generally files that have their protections removed but may run (or at least, load).\n </p>\n <p>\n  Note that, by definition, a dumped process may or may not be unpacked and an unpacked file may or may not have been dumped from memory.\n </p>\n <p>\n  At the very least, in order to make the dumped file loadable you need to:\n </p>\n <ol>\n  <li>\n   <p>\n    Copy the VirtualAddress and VirtualSize of all sections over their RawAddress and RawSize.\n   </p>\n  </li>\n  <li>\n   <p>\n    Make sure the directories (import, export, reloc etc.) point to addresses inside available memory. They may be incorrect/corrupted, but must be inside process mapping.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Yotamz",
            "time": "Nov 21, 2019 at 9:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}