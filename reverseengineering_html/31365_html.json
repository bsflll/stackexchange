{
    "title": "Unable to determine what esp is pointing to",
    "link": "https://reverseengineering.stackexchange.com/questions/31365/unable-to-determine-what-esp-is-pointing-to",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm going through the book Practical Malware Analysis (specifically, Lab07-03) and I've been stuck on a rather simple problem. I've divided the code section of\n  <code>\n   main()\n  </code>\n  into three parts to ease my analysis. (Note: I'm assuming the stack is growing downwards here.)\n </p>\n <pre><code>Part 1) mov eax, [esp+argc]\nsub esp, 44h\ncmp eax, 2\n\nPart 2) push ebx\npush ebp\npush esi\npush edi\njnz ExitProgram\n\nPart 3) mov eax, [esp+54h+argv]\nmov esi, offset hardcodedString\nmov eax, [eax+4]\n</code></pre>\n <p>\n  Part 1:\n </p>\n <p>\n  This looks simple enough, the stack pointer (\n  <code>\n   esp\n  </code>\n  ) is added with the memory location of\n  <code>\n   argc\n  </code>\n  and the value at that address is saved in the\n  <code>\n   eax\n  </code>\n  register. Then\n  <em>\n   44h\n  </em>\n  is subtracted from\n  <code>\n   esp\n  </code>\n  to make room for some local variables of the main function. Finally,\n  <code>\n   eax\n  </code>\n  is compared to 2 and the appropriate flags are set in the flag register (the value of\n  <code>\n   eax\n  </code>\n  is not modified).\n </p>\n <p>\n  Part 2: Based on a\n  <a href=\"https://stackoverflow.com/questions/12736437/why-does-gcc-push-rbx-at-the-beginning-of-main\">\n   similar\n  </a>\n  question on StackOverFlow, it seems that the registers are pushed in Part 2 as they are callee save registers. This seems to be true as when main exits, it is popping these\n  <em>\n   exact\n  </em>\n  registers. Is my understanding of this correct?\n </p>\n <p>\n  Part 3: I'm adding the variables below if that helps in correcting me.\n </p>\n <pre><code>.text:00401440 var_44          = dword ptr -44h\n.text:00401440 var_40          = dword ptr -40h\n.text:00401440 var_3C          = dword ptr -3Ch\n.text:00401440 var_38          = dword ptr -38h\n.text:00401440 var_34          = dword ptr -34h\n.text:00401440 var_30          = dword ptr -30h\n.text:00401440 var_2C          = dword ptr -2Ch\n.text:00401440 var_28          = dword ptr -28h\n.text:00401440 var_24          = dword ptr -24h\n.text:00401440 var_20          = dword ptr -20h\n.text:00401440 var_1C          = dword ptr -1Ch\n.text:00401440 var_18          = dword ptr -18h\n.text:00401440 var_14          = dword ptr -14h\n.text:00401440 var_10          = dword ptr -10h\n.text:00401440 var_C           = dword ptr -0Ch\n.text:00401440 hObject         = dword ptr -8\n.text:00401440 var_4           = dword ptr -4\n.text:00401440 argc            = dword ptr  4\n.text:00401440 argv            = dword ptr  8\n.text:00401440 envp            = dword ptr  0Ch\n</code></pre>\n <p>\n  I also don't understand the instruction\n  <code>\n   mov eax, [esp+54h+argv]\n  </code>\n  . It looks like the first argument that is passed to the program is being saved in\n  <code>\n   eax\n  </code>\n  , so wouldn't\n  <code>\n   mov eax, [esp+44h+argv]\n  </code>\n  make more sense? I recognize the function of the instruction\n  <code>\n   mov eax, [eax+4]\n  </code>\n  is to fetch the actual input passed to the program (i.e.\n  <code>\n   argv[1]\n  </code>\n  ), which is what makes the previous instruction's indexing so confusing.\n </p>\n <p>\n  The\n  <code>\n   mov esi, offset hardcodedString\n  </code>\n  is just moving the address of the first character of the string into\n  <code>\n   esi\n  </code>\n  , so it looks good to me.\n </p>\n <p>\n  I'd appreciate some help here!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "142",
    "tags": [
        "x86"
    ],
    "user": "smellyourbooks",
    "time": "Jan 8, 2023 at 8:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  esp had 0x44 subtracted, then an additional three registers pushed, so esp is now -0x50.  Then the access is 0x50+argv+4, which is argv[1].\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Jan 9, 2023 at 4:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "smellyourbooks",
                    "text": "<span class=\"comment-copy\">But extended registers are 4 bytes in size, so after pushing the three registers, esp should be -56h right? Adding [54h+argv] would then bring esp to 06h, which is in the middle of argv?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">0x44+(3*4=0x0c)=0x50.</span>",
                    "time": null
                },
                {
                    "user": "smellyourbooks",
                    "text": "<span class=\"comment-copy\">apologies for the late reply - looks like I accepted your solution only in my mind. ðŸ˜…. I do not know why I messed up such a simple calculation!</span>",
                    "time": null
                }
            ]
        }
    ]
}