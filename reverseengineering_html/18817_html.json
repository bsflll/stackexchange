{
    "title": "Lea instruction on datasegment",
    "link": "https://reverseengineering.stackexchange.com/questions/18817/lea-instruction-on-datasegment",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote simple program(was built in release mode(x86)) to practise re skills but I can not understand one part of it.\n </p>\n <p>\n  C++ program:\n </p>\n <pre><code>int doSub(int a, int b) \n{\n    int result = a + b;\n    result -= 2;\n    return result;\n}\n\nint doSum(int a, int b)\n{\n    int result = a + b;\n    result += 2;\n    return result;\n}\n\nint main(int argc, char** argv)\n{      \n    int wynik = 0;\n    int liczbaA = atoi(argv[1]);\n    int liczbaB = atoi(argv[2]);\n\n    if (liczbaA > 3)\n    {\n        wynik = doSum(liczbaA, liczbaB);\n    }\n    else\n    {\n        wynik = doSub(liczbaA, liczbaB);\n    }\n\n    std::cout << \"Result\" << wynik;\n    return 0;\n}\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/Lkorz.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Lkorz.png\"/>\n  </a>\n </p>\n <p>\n  And my question is: what is happening here?\n </p>\n <pre><code>lea     ecx, ds:0FFFFFFFEh[ecx*4] ; ??\n</code></pre>\n <p>\n  I supposed to see here two instructions like sub/add. Can someone explain me how it's handled here operation +2 and -2?\n </p>\n <p>\n  @edit\n </p>\n <pre><code>loc_401052:\nmov     edi, [ebp+argv]\npush    dword ptr [edi+4] ; Str\ncall    ds:__imp__atoi\nadd     esp, 4\nmov     ebx, eax\npush    dword ptr [edi+8] ; Str\ncall    ds:__imp__atoi\nxor     ecx, ecx\nadd     esp, 4\nadd     eax, ebx\nmov     edx, offset aResult ; \"Result\"\ncmp     ebx, 3\nsetnle  cl\nlea     ecx, ds:0FFFFFFFEh[ecx*4]\nadd     eax, ecx\npush    eax\npush    ecx\nmov     ecx, ds:__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout\ncall    std__operator___std__char_traits_char___\nadd     esp, 4\nmov     ecx, eax\ncall    ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)\npop     edi\nxor     eax, eax\npop     ebx\nmov     esp, ebp\npop     ebp\nretn\nmain endp\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Mroczny Arturek",
    "time": "Jul 17, 2018 at 17:19",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n don't put assembly as an image. Please put some effort and use text. It's easier for everyone\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Mroczny Arturek",
            "text": "<html><body><span class=\"comment-copy\">\n sorry for that, when I will come back home, I will change it\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n A suggestion for future explorations: submit your code at\n <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">\n  Godbolt.org\n </a>\n where you can see what different compilers produce for the same code.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   0FFFFFFFEh\n  </code>\n  is\n  <code>\n   -2\n  </code>\n  in decimal format\n </p>\n <p>\n  ecx= is 1 if liczbaA is more than 3 and 0 otherwise\n </p>\n <p>\n  instruction LEA (load effective address) can do special arithmetic operation:\n  <code>\n   a + b*X + Y\n  </code>\n  where\n  <code>\n   a\n  </code>\n  and\n  <code>\n   b\n  </code>\n  are registers,\n  <code>\n   Y\n  </code>\n  is constant and\n  <code>\n   X\n  </code>\n  is 1, 2, 4 or 8.\n </p>\n <p>\n  In your case you calculate:\n  <code>\n   -2+4*ecx\n  </code>\n  or\n  <code>\n   -2+4*(liczbaA>3)\n  </code>\n </p>\n <p>\n  if liczbaA is more than 3 then result is 2 if less then it is -2\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jul 17, 2018 at 10:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mroczny Arturek",
                    "text": "<span class=\"comment-copy\">It make sense. Two questions from my side: 1. \"-2 + 4*ecx\", is there always add operator(between number and register)? 2. Does \"ds:\" have special meaning here? or on (x86) can I ignore it?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Release mode optimises. if you want to see simple unoptimised asm blow-by-blow - turn off all optimisations or compile your code in debug mode (not sure the latter will work tho).\n </p>\n <p>\n  The whole segment from\n </p>\n <pre><code>cmp ebx,3\n</code></pre>\n <p>\n  to\n </p>\n <pre><code>add eax, ecx\n</code></pre>\n <p>\n  looks like the equivalent of the original\n  <em>\n   if\n  </em>\n  with your two functions inlined and the condition flattened into a series of arithmetic operations.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Jul 17, 2018 at 5:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">A minor note: even when <i>not</i> specifying full optimization, a lot of current compilers already optimize as much as possible in the initial compiling run. Gone are the days you could quite literally \"read\" the translation of one C instruction in a coherent series of ASM statements.</span>",
                    "time": null
                }
            ]
        }
    ]
}