{
    "title": "Compare call graphs of two dll's Using IDAPython comand line",
    "link": "https://reverseengineering.stackexchange.com/questions/12742/compare-call-graphs-of-two-dlls-using-idapython-comand-line",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to generate call graph for two DLL's and compare it using IDApython and it must be executed automatically in command line.\n </p>\n <p>\n  How to generate and save call graph and immediately open next DLL and generate and save callgraph and then compare?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "idapython",
        "call-graph",
        "compare"
    ],
    "user": "user3264821",
    "time": "May 26, 2016 at 7:16",
    "comments": [
        {
            "user": "tmr232",
            "text": "<html><body><span class=\"comment-copy\">\n You can use Diaphora to automatically do comparisons. But if you want to do it yourself - you can use Sark to generate networkx graphs of the idb -\n <a href=\"http://sark.readthedocs.io/en/latest/api/IDB-Graphs.html\" rel=\"nofollow noreferrer\">\n  sark.readthedocs.io/en/latest/api/IDB-Graphs.html\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As @tmr232 says, you can use\n  <a href=\"https://github.com/joxeankoret/diaphora\" rel=\"nofollow\">\n   Diaphora\n  </a>\n  which does it automatically for you. Otherwise, if you prefer a command line tool (which, BTW, doesn't require IDA), you can use\n  <a href=\"https://github.com/joxeankoret/pyew\" rel=\"nofollow\">\n   Pyew\n  </a>\n  and the\n  <a href=\"https://github.com/joxeankoret/pyew/blob/VERSION_3X/gcluster.py\" rel=\"nofollow\">\n   gcluster.py\n  </a>\n  script.\n </p>\n <p>\n  If you prefer to write something yourself, please remember that comparing 2 binaries is not a trivial task. That said, I will explain how the comparison of the call graphs of 2 binaries works in both gcluster.py and Diaphora:\n </p>\n <ol>\n  <li>\n   First, a binary is loaded in a tool and code analysed. The tool can be Pyew (gcluster) or IDA (Diaphora).\n  </li>\n  <li>\n   The code analysis step gathers information relative to functions, the call graph and flow graphs (basic blocks of each function and their relationships as well as function's relationships).\n  </li>\n  <li>\n   Using that information, I calculate the cyclomatic complexity of each function that has more than 1 basic block.\n  </li>\n  <li>\n   Using\n   <a href=\"https://en.wikipedia.org/wiki/G%C3%B6del_numbering\" rel=\"nofollow\">\n    Gödel numbering\n   </a>\n   I assign a prime number corresponding to each\n   <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\" rel=\"nofollow\">\n    cyclomatic complexity\n   </a>\n   (that's it, for each function).\n  </li>\n  <li>\n   Then, with all these prime numbers corresponding to all functions, I multiply them to have a large number \"hash\". This step is what the inventors, Halvar Flake and @rolfrolles, call \"Small Primes Product\" in their \"\n   <a href=\"https://static.googleusercontent.com/media/www.zynamics.com/es//downloads/bindiffsstic05-1.pdf\" rel=\"nofollow\">\n    Graph-based comparison of Executable Objects\n   </a>\n   \" paper.\n  </li>\n  <li>\n   The result of the multiplication is the program's call graph signature.\n  </li>\n  <li>\n   If the call graph signature is equal for 2 binaries, the call graph is very likely the same for both binaries. I say \"very likely\" because small functions are ignored and, also, using the cyclomatic complexity of a function as a fuzzy identifier is, fuzzy: 2 totally different functions can have the same cyclomatic complexity. In any case, the call graph signature is more than good enough in most cases (I'm yet to see a case were it isn't).\n  </li>\n  <li>\n   If the call graph signature is different, factor the primes (which you already have calculated), remove these in both sets (i.e., in both binaries) and calculate the % of difference with the remaining primes (which correspond to functions) in both binaries.\n  </li>\n </ol>\n <p>\n  Another way of comparing call graphs is doing it by traversing both graphs and calculating the differences between 2 graphs (considering that you have some way to determine that a function F in binary A is equal to function F' in binary B, something that is not trivial). I don't recommend you doing so unless solving how to do so is your problem/what you want to do.\n </p>\n <p>\n  My 2 cents.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "joxeankoret",
            "time": "Jun 7, 2016 at 8:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is very broad question, which consists from some simpler ones.\n </p>\n <p>\n  <strong>\n   How to operate IDA from command line ?\n  </strong>\n </p>\n <p>\n  According to\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/417.shtml\" rel=\"nofollow\">\n   this link\n  </a>\n  you can invoke IDA from the command line with\n  <code>\n   -S\n  </code>\n  switch to run specific script after auto-analysis is complete. You can create shell script to run multiple ida instances from the command line.\n </p>\n <p>\n  <strong>\n   How to generate function graph and save it?\n  </strong>\n </p>\n <pre><code>#not tested, beware of errors, use on your own risk\n# if you find GDL format problematic you can use ODT format\n# by replacing idaapi.CHART_GEN_GDL to idaapi.CHART_GEN_ODT\nimport idaapi\nimport idc \nimport idautils\n\nfor ea in idautils.Functions():\n    idc.GenFuncGdl(\"%s.gdl\" % idc.GetFunctionName(ea), idc.GetFunctionName(ea), ea , idc.BADADDR, idaapi.CHART_GEN_GDL)\n</code></pre>\n <p>\n  <strong>\n   How to generate the whole call graph ?\n  </strong>\n </p>\n <p>\n  It is simple:\n </p>\n <pre><code>idc.GenCallGdl(\"z:\\\\callgdl.gdl\", \"TheTitle\", CHART_GEN_GDL)\n</code></pre>\n <p>\n  Note the possibility to use CHART_WINGRAPH and CHART_NOLIBFUNCS as flags.\n </p>\n <p>\n  If you want to use functions from\n  <code>\n   idaapi\n  </code>\n  module instead, \nlook at\n  <code>\n   idaapi.gen_simple_call_chart\n  </code>\n  and\n  <code>\n   idaapi.gen_complex_call_chart\n  </code>\n  documentation\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow\">\n   here\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   How to compare call graphs ?\n  </strong>\n </p>\n <p>\n  It depends what exactly you are trying to get from the comparison.\n </p>\n <p>\n  Hope it helps.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "w s",
            "time": "Jun 6, 2016 at 10:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3264821",
                    "text": "<span class=\"comment-copy\">Gives error on running script : \" can't open file <a class=\"__cf_email__\" data-cfemail=\"bd82828efde4fce5edfce593dad9d1\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a> for writing\" and not generating graph</span>",
                    "time": null
                },
                {
                    "user": "user3264821",
                    "text": "<span class=\"comment-copy\">thank you its not giving errors now but no output or graph file generated ?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Search for the generated files, they are generated in ida current directory. If you'll replace \"%s.gdl\" to \"\"c:\\\\your_folder\\\\%s.gdl\" it will generate files in \"c:\\your_folder\\.</span>",
                    "time": null
                },
                {
                    "user": "user3264821",
                    "text": "<span class=\"comment-copy\">Its generating wingraph for each function but i want one callgraph or function call flow for entire dll file to compare with another dll file</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">For this you can use idc.GenCallGdl(outfile, title, flags). I updated the answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}