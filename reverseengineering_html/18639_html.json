{
    "title": "How to detect internal and shared libraries used in an executable file?",
    "link": "https://reverseengineering.stackexchange.com/questions/18639/how-to-detect-internal-and-shared-libraries-used-in-an-executable-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Problem\n  </strong>\n  : We want to be able to tell with some certainty that specific versions of internal libraries are being used by a program. For example, if a software uses old, deprecated libraries internally. Also, we would like to be able to tell what shared libraries it is using on the host system.\n </p>\n <p>\n  <strong>\n   What we have done so far\n  </strong>\n  : we used\n  <code>\n   strings2\n  </code>\n  to look at UNICODE and ASCII strings in the executable. Manual analysis of these strings may provide library versions being used internally some times. As you can imagine, this is an inefficient method and not very reliable. We also looked at\n  <a href=\"http://www.dependencywalker.com/\" rel=\"noreferrer\">\n   'Dependency Walker'\n  </a>\n  to build a tree of all dependencies. This doesn't allow us to know if outdated libraries are being used internally though. We also read two research papers around the subject:\n </p>\n <ul>\n  <li>\n   <a href=\"http://dro.deakin.edu.au/view/DU:30028345\" rel=\"noreferrer\">\n    An automated classification system based on the strings of trojan and virus families\n   </a>\n   , by Tian, Batten, Islam and Versteeg, MALWARE 2009.\n  </li>\n  <li>\n   <a href=\"https://arxiv.org/pdf/1703.00298.pdf\" rel=\"noreferrer\">\n    Automatic Library Version Identification, an Exploration of Techniques\n   </a>\n   , by Thomas Rinsma, 2017.\n  </li>\n </ul>\n <p>\n  <strong>\n   Question\n  </strong>\n  : Is there a better way or an approach to be able to determine if an executable is using outdated libraries internally? For example, looking at strings is one possible way but is there a way to automate this? Because otherwise, looking at 1000s of lines of ASCII and UNICODE strings can get time consuming.\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "416",
    "tags": [
        "static-analysis",
        "dynamic-analysis",
        "executable",
        "binary",
        "libraries"
    ],
    "user": "learnerX",
    "time": "Aug 1, 2018 at 13:54",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<html><body><span class=\"comment-copy\">\n What do you mean by internal libraries?   Static libraries?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "learnerX",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, static libraries that the software brings with itself as opposed to calling a shared library at host.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can see two paths for moving forward.\n </p>\n <p>\n  First, following your current approach, you can probably detect version information and library automatically in the strings you find. This is not a bulletproof solution but will save you the time of manually reading thousands of strings.\n </p>\n <p>\n  Go through the task of creating FLIRT, or\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1879/how-can-i-diff-two-x86-binaries-at-assembly-code-level\">\n   one of the many function level binary diffing\n  </a>\n  tools out there with different versions of various libraries.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jul 2, 2018 at 11:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "learnerX",
                    "text": "<span class=\"comment-copy\">\"...you can probably detect version information and library automatically in the strings you find...\" That's what we were thinking as well. Is there a tool that already does something similar or do we need to write a<code>sed</code> / <code>awk</code> / <code>grep</code> query instead?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">I'm not familiar with anything specifically for <i>versions</i>, but I do think that should be easy enough to do and improve as more input/data arrives.</span>",
                    "time": null
                },
                {
                    "user": "fpmurphy",
                    "text": "<span class=\"comment-copy\">IDA FLIRT will not work if a function's 'signature' does not change between library versions.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@fpmurphy1 You can manually edit the autogenerated flirt signature to be more precise.</span>",
                    "time": null
                },
                {
                    "user": "fpmurphy",
                    "text": "<span class=\"comment-copy\">@NirIzr. Just checked the FLIRT toolset.  You can use the <code>-p##</code> switch with <code>pct</code>, <code>plb</code>, etc., to specify a length other than the default 32 bytes. And, yes, you can manually sppend additional byes to a specific signature.</span>",
                    "time": null
                }
            ]
        }
    ]
}