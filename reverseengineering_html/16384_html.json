{
    "title": "What kind of assembly language construct is this?",
    "link": "https://reverseengineering.stackexchange.com/questions/16384/what-kind-of-assembly-language-construct-is-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am reversing an ELF64 executable created on AMD X86-64. I encountered this line near the end of the file and am puzzled to its meaning:\n </p>\n <pre><code>nop    WORD PTR cs:[rax+rax*1+0x0]\n</code></pre>\n <p>\n  In this case\n  <code>\n   rax\n  </code>\n  contains\n  <code>\n   0x2329\n  </code>\n  .  However,\n  <code>\n   nop\n  </code>\n  means '\n  <em>\n   do nothing\n  </em>\n  ', so I am puzzled as to why there are arguments included on the line.  The code is loaded with\n  <code>\n   libc\n  </code>\n  function calls so I am assuming the source code is C/C++ and not GAS.\n </p>\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11971/nop-with-argument-in-x86-64\">\n   This post\n  </a>\n  has good content but perror's explanation is more apropos and contains more \"why\" than a mere recital of the Intel docs.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "539",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Not a machine",
    "time": "Sep 22, 2017 at 14:27",
    "comments": [
        {
            "user": "TkTech",
            "text": "<html><body><span class=\"comment-copy\">\n Possible duplicate of\n <a href=\"https://reverseengineering.stackexchange.com/questions/11971/nop-with-argument-in-x86-64\">\n  nop with argument in x86_64\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Not a machine",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you.  I missed that posting somehow.    It is similar however I believe the response \"The one-byte NOP instruction is an alias mnemonic for the XCHG (E)AX, (E)AX instruction\" is not valid on IA-32 and 64 processors.  At least according to the Intel documents.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are mainly two usage of the\n  <code>\n   nop\n  </code>\n  instructions:\n </p>\n <ol>\n  <li>\n   <p>\n    They are quite often used as padding at the end of assembly procedures or in-between procedures. And, in this case one may want to pad with \"\n    <em>\n     more than one byte at the time\n    </em>\n    \", this is why they added extra arguments (that are just ignored most of the time).\n   </p>\n   <p>\n    See:\n    <a href=\"https://en.wikipedia.org/wiki/NOP\" rel=\"nofollow noreferrer\">\n     NOP instruction\n    </a>\n    (Wikipedia) and\n    <a href=\"http://www.felixcloutier.com/x86/NOP.html\" rel=\"nofollow noreferrer\">\n     NOPâ€”No Operation\n    </a>\n    (x86 Instruction Set Reference).\n   </p>\n  </li>\n  <li>\n   <p>\n    They can also be used to delay a bit the ALU in between two memory fetches in order to give the pipeline a chance to get a correct prediction of the data values. And, this is probably your case because this instruction perform a small arithmetic computation when computing\n    <code>\n     rax+rax*1+0x0\n    </code>\n    , therefore the ALU has is really delayed because of this operation.\n   </p>\n   <p>\n    See:\n    <a href=\"https://en.wikipedia.org/wiki/Delay_slot\" rel=\"nofollow noreferrer\">\n     Delay Slot\n    </a>\n    (Wikipedia).\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Not a machine",
                    "text": "<span class=\"comment-copy\">Thank you.  Looking at the surrounding code the delay slot answer makes complete sense.  It very much resembles the   <code>NOP DWORD ptr [EAX + EAX *1 +  0x0</code>   8 byte eample in the Intel docs.</span>",
                    "time": null
                }
            ]
        }
    ]
}