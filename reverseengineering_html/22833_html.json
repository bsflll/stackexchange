{
    "title": "Methods for preventing IDA decompiler",
    "link": "https://reverseengineering.stackexchange.com/questions/22833/methods-for-preventing-ida-decompiler",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to write a C function, such that\n  <code>\n   hex-rays\n  </code>\n  decompiler will fail on it. I want to do it for study purposes, and not for an actual anti-reversing method. Do you have any recommendations/approaches how can I write such a function, that will compile with\n  <code>\n   gcc\n  </code>\n  or similar compiler, but won't be decompilable by\n  <code>\n   hex-rays\n  </code>\n  ?\n </p>\n <p>\n  <strong>\n   EDIT:\n  </strong>\n  My goal is to make the code disassemblable, but not decompilable. I'm not looking for obfuscators that will hide the code completely, but a way to make IDA not to be able to decompile. for example, by somehow messing with the stack pointer.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "c",
        "hexrays",
        "decompile"
    ],
    "user": "macro_controller",
    "time": "Dec 26, 2019 at 15:04",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n There's a concept called obfuscation. That's what you're looking for. Try giving the tag by the name name a peek:\n <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/obfuscation\">\n  reverseengineering.stackexchange.com/questions/tagged/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks, my question wasn't very clear, but I edited it now. Anyways I will go through your link and maybe find something relevant.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n why are you be interested specifically in preventing decompilation and not disassembly? for the record, though, obfuscated code\n <i>\n  is\n </i>\n disassembleable, just not to anything too intelligible.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<html><body><span class=\"comment-copy\">\n Does the example in\n <a href=\"https://reverseengineering.stackexchange.com/questions/22827/type-inference-inconsistency\">\n  my question\n </a>\n count? Or you want another example? I observe that IDA does not care much in detecting function types.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<html><body><span class=\"comment-copy\">\n @NirIzr I think much effort have focused on anti-disassembly. While it's correct that anti-disassembly will help anti-decompilation, they are not the same.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can check \"\n  <a href=\"https://www.hex-rays.com/products/decompiler/manual/failures.shtml#grace\" rel=\"nofollow noreferrer\">\n   graceful failures\n  </a>\n  \" for some common problems that can prevent decompilation and try to induce them deliberately. However, most of them can be worked around with a bit of effort so don’t expect them to stop a motivated person.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 27, 2019 at 10:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The answer of @igor says about algorithm failures of IDA. Beside, I think you can use a function which is not type-able in the type system of the decompilation target language of IDA (I believe it's a subset of C), e.g.\n </p>\n <pre><code>int foo(void *f, int i) {\n    return ((int (*)(void*, int))(f))(foo, i);\n}\n\nclang -c test.c\n</code></pre>\n <p>\n  then IDA decompilers gives something likes\n </p>\n <pre><code>__int64 __fastcall foo(__int64 (__fastcall *a1)(__int64 (__fastcall *)(), _QWORD), unsigned int a2)\n{\n  return a1(foo, a2);\n}\n</code></pre>\n <p>\n  which is obviously not correct:\n  <code>\n   foo\n  </code>\n  is recognized simultaneously as a function of two params and one param.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ta Thanh Dinh",
            "time": "Dec 28, 2019 at 10:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}