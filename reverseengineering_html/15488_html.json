{
    "title": "Are Windows Store Apps in a VM and can they be identified by PE header info?",
    "link": "https://reverseengineering.stackexchange.com/questions/15488/are-windows-store-apps-in-a-vm-and-can-they-be-identified-by-pe-header-info",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have no experience with Windows Store Apps and there appears to be limited info out because they are still relatively new.\n </p>\n <p>\n  I have 3 questions:\n </p>\n <ol>\n  <li>\n   When I open a store app in analysis tools such as PE Studio and IDA Pro, it's got quite a jungle of symbols. Are these apps running in a VM?\n  </li>\n  <li>\n   <p>\n    Is there any constant unique way to identify a Windows Store app by its header info? It appears to be a standard PE to me, however, it definitely is \"corrupt\" as far as Windows 7 and before is concerned. Of course is isn't designed to be run in those environments, but I'm studying the format.\n   </p>\n  </li>\n  <li>\n   <p>\n    Are there any good papers or other info on reversing or otherwise technical studies on the Windows Store Apps?\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "121",
    "tags": [
        "windows"
    ],
    "user": "the_endian",
    "time": "Jun 6, 2017 at 5:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Windows Store Apps are .NET applications so probably better would be to open them in .NET Disassembler (like\n  <a href=\"https://github.com/0xd4d/dnSpy\" rel=\"nofollow noreferrer\">\n   dnSpy\n  </a>\n  ).\n </p>\n <ol>\n  <li>\n   <p>\n    They are executed by .NET runtime so VM is a good way of calling what's going on there. Read about the JIT compiler.\n   </p>\n  </li>\n  <li>\n   <p>\n    There will be a\n    <code>\n     .NET Directory\n    </code>\n    present inside the PE (\n    <a href=\"https://www.codeproject.com/articles/12585/the-net-file-format\" rel=\"nofollow noreferrer\">\n     .net file format\n    </a>\n    )\n   </p>\n  </li>\n  <li>\n   <p>\n    Search for any info about .NET apps - a lot of them is available.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Jun 6, 2017 at 6:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Are you sure about this that they are ALWAYS .NET? I ask because I'm used to .NET having a single import of _corlibmain which fires up the CLR stuff. However, many of these store apps contain standard W32 imports as well. ILSpy also cannot open any of them, it says they \"are not managed assemblies.\" I'm going to try dnSpy next. You're probably right it's just these have different characteristics from regular .NET assemblies it seems.  Also, by .NET are you also meaning Visual C++ managed? In Detect-It-Easy a lot of these show as VC++ too.</span>",
                    "time": null
                },
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">dnSpy can't get any .NET symbols from them at all. Just gives PE Header.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">\"ALWAYS\" might not be the correct but word here as I know that at some point it was possible to write them in JS too.</span>",
                    "time": null
                },
                {
                    "user": "Chris Tsiakoulas",
                    "text": "<span class=\"comment-copy\">Microsoft promotes .Net languages to develop apps for their app store, so the greatest number actually is. There are some well-known older programs included in the store, which are mostly for computers that they were included as-are, so these might need different tools. But almos 90% of apps is in .Net, so ILSpy, a good hew editor and some PE header tools is the best way to wander around the code.</span>",
                    "time": null
                }
            ]
        }
    ]
}