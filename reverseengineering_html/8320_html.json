{
    "title": "Windows VEH - catch and discard a single step exception",
    "link": "https://reverseengineering.stackexchange.com/questions/8320/windows-veh-catch-and-discard-a-single-step-exception",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In a 3rd party application I'm modifying by means of DLL injection, there's a chunk of code that throws an EXCEPTION_SINGLE_STEP exception if it detects changes to the code. To bypass this countermeasure, I wish to catch that exception and discard it completely. However, Windows keeps rethrowing it and therefore my exception handler is stuck in an endless loop.\n </p>\n <p>\n  My code currently:\n </p>\n <pre><code>LONG WINAPI VEH_Handler(struct _EXCEPTION_POINTERS *ExceptionInfo)\n{\n    printf(\"Got an exception %X at address %X\n\", ExceptionInfo->ExceptionRecord->ExceptionCode, ExceptionInfo->ExceptionRecord->ExceptionAddress);\n\n    if (ExceptionInfo->ExceptionRecord->ExceptionCode == EXCEPTION_SINGLE_STEP)\n    {\n        return EXCEPTION_CONTINUE_EXECUTION;\n    }\n\n    return EXCEPTION_CONTINUE_SEARCH;\n}\n\n//...\n\n//in DllMain\nAddVectoredExceptionHandler(1, VEH_Handler);\n</code></pre>\n <p>\n  <strong>\n   Is there a way for me to force Windows to forget about the exception and continue execution?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "exception"
    ],
    "user": "user4520",
    "time": "Feb 23, 2015 at 12:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I assume this is a follow-up on\n  <a href=\"https://reverseengineering.stackexchange.com/questions/8314/single-step-exception-at-the-beginning-of-an-unrelated-function\">\n   this question\n  </a>\n  .\n </p>\n <p>\n  If the program you're injecting the DLL into is setting the processor's trap flag, then returning from the exception will restore the trap flag as well, which would explain why the trap exception is thrown again and windows will keep calling your exception handler.\n </p>\n <p>\n  You might check the stack, find where the pushed flags from the exception are saved, and clear the trap flag before returning (\n  <code>\n   *flagptr &= ~0x100\n  </code>\n  ).\n </p>\n <p>\n  However, the fact that your application sets the trap flag in the first place might mean one of those two things:\n </p>\n <ul>\n  <li>\n   The application has detected that you're trying to crack it, and sets the trap flag to make it crash, or enter the debugger in an inconvenient way. It might do anything else to your program as well.\n  </li>\n  <li>\n   The application installs a trap exception handler, sets the trap flag, and has the trap handler modify the code that's being executed (25 years ago, i've seen this in a dos application, where the trap handler decrypted instructions just before they got executed, and re-encrypted them immediately afterwards, so you never saw the real assembly in a whole, so that's hardly a new technique).\n  </li>\n </ul>\n <p>\n  Both possibilities probably mean that just ignoring the traps won't help you much; you should find the code that sets the trap flag, check why it's doing this, and continue your analysis from there.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user4520",
                    "text": "<span class=\"comment-copy\">It is, indeed. Okay, thanks for your suggestions, I'll play around with it.</span>",
                    "time": null
                }
            ]
        }
    ]
}