{
    "title": "Addresses of dlls in Kernel Space",
    "link": "https://reverseengineering.stackexchange.com/questions/16770/addresses-of-dlls-in-kernel-space",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote a code that hooks the\n  <code>\n   SSDT\n  </code>\n  . Currently I can hook functions exported only from\n  <code>\n   ntdll\n  </code>\n  :\n  <code>\n   NtCreateFile\n  </code>\n  ,\n  <code>\n   NtClose\n  </code>\n  etc. since they are the only ones that have entries in SSDT. I wanna know if there is a table or some kind of place where the other dll functions reside. Let's say I wanna hook\n  <code>\n   Advapi32!CryptEncrypt\n  </code>\n  function in Kernel Mode. How can this be done?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "475",
    "tags": [
        "kernel-mode",
        "function-hooking"
    ],
    "user": "rustam Shirinov",
    "time": "Nov 16, 2017 at 6:19",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n can you be more specific - do you want to hook user-mode functions from within kernel-mode?  Or do you want to hook kernel-mode functions (in which case, there is no Advapi32!CryptEncrypt, for example - it's a purely user-mode function)?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "rustam Shirinov",
            "text": "<html><body><span class=\"comment-copy\">\n I wanna hook CryptEncrypt from kernel-mode. Or a kernel-mode function which CryptEncrypt calls in itself like CreateFile does for NtCreateFile.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n then you're out of luck.  As I said, CryptEncrypt is purely user-mode.  It does not rely on kernel code for its work.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It feels like there are two questions here. 1) Finding addresses of system DLLs and 2) Hooking a specific function in the discovered DLL. I'll answer the first question, since it is the title of this post.\n </p>\n <p>\n  To find the address of all DLLs, call one of the following functions from your own custom application:\n </p>\n <p>\n  <code>\n   EnumProcessModules\n  </code>\n  :\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms682631(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   https://msdn.microsoft.com/en-us/library/windows/desktop/ms682631(v=vs.85).aspx\n  </a>\n </p>\n <p>\n  <code>\n   EnumProcessModulesEx\n  </code>\n  :\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms682633(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   https://msdn.microsoft.com/en-us/library/windows/desktop/ms682633(v=vs.85).aspx\n  </a>\n </p>\n <p>\n  The tradeoff here is that\n  <code>\n   EnumProcessModules\n  </code>\n  only fetches modules of the same bit-ness (ie if calling from a 64-bit program, only 64-bit modules are fetched)\n </p>\n <p>\n  <code>\n   EnumProcessModulesEx\n  </code>\n  gives more control and allows fetching all modules, but is a bit trickier to use.\n </p>\n <p>\n  You can then check the module base address to see if is in user mode space or kernel mode space. Unfortunately this can vary depending on how the target program was compiled. 32-bit programs are generally kernel mode from 0x80000000 to 0xFFFFFFFF, and 64-bit programs are generally kernel mode from 0xFFFF0800'00000000 to 0xFFFFFFFF'FFFFFFFF. Additional information can be found below:\n </p>\n <p>\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366912(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   https://msdn.microsoft.com/en-us/library/windows/desktop/aa366912(v=vs.85).aspx\n  </a>\n  and\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366778(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n   https://msdn.microsoft.com/en-us/library/windows/desktop/aa366778(v=vs.85).aspx\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Zachary Canann",
            "time": "Nov 16, 2017 at 20:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">imho op wants to muck with usermode from kernelmode and wants to do it on arbitrary functions  i dont think he can use usermoode function like enumxxx</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">more than that, I got the impression that he wants to hook kernel-mode functions, not user-mode ones, and that he means drivers rather than DLLs.</span>",
                    "time": null
                },
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">no I mean functions which other dlls export like <code>MessageBox</code> which is exported by <code>user32.dll</code> , <code>CryptEncrypt</code> which is exported by <code>advapi32.dll</code>. I wanna know the offsets to these functions like we have for <code>NtCreateFile</code>, <code>NtQuerySystemInformation</code> in SSDT.</span>",
                    "time": null
                }
            ]
        }
    ]
}