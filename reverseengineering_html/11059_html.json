{
    "title": "What does a C++ class look like in assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/11059/what-does-a-c-class-look-like-in-assembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am planning to do some reverse engineering on an application that was written in a object oriented way. And now I'm kind of curious what a C++ class would look like in assembly. I already found out the basics about functions and their calling conventions. But classes are probably way more complex, right?\n </p>\n <p>\n  So let's say we have this class:\n </p>\n <pre><code>class Rectangle {\n    int width, height;\n  public:\n    void set_values (int,int);\n    int area() {return width*height;}\n};\n\nvoid Rectangle::set_values (int x, int y) {\n  width = x;\n  height = y;\n}\n</code></pre>\n <p>\n  and this object:\n </p>\n <pre><code>Rectangle rect;\nrect.set_values (3,4);\n</code></pre>\n <p>\n  What would/could it look like in assembly?\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "9k",
    "tags": [
        "assembly",
        "c++"
    ],
    "user": "Forivin",
    "time": "Oct 8, 2015 at 12:29",
    "comments": [
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n even for simple C code, the assembly output depends on compiler and compiler options. To see how the output is in various compilers, use\n <a href=\"https://gcc.godbolt.org/\" rel=\"nofollow noreferrer\">\n  GCC Godbolt compiler explorer\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As discussed in\n  <a href=\"https://reverseengineering.stackexchange.com/a/5957/1562\">\n   https://reverseengineering.stackexchange.com/a/5957/1562\n  </a>\n  , it's compiler-dependent (different compilers will generate different machine code and data structures).\n </p>\n <p>\n  However, you may want to refer to\n  <a href=\"https://www.blackhat.com/presentations/bh-dc-07/Sabanal_Yason/Paper/bh-dc-07-Sabanal_Yason-WP.pdf\" rel=\"nofollow noreferrer\">\n   Reversing C++\n  </a>\n  , as it does a pretty good job showing how most compilers compile C++ classes.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user15338",
                    "text": "<span class=\"comment-copy\">The reversing C++ paper is invaluable.</span>",
                    "time": null
                },
                {
                    "user": "Herz3h",
                    "text": "<span class=\"comment-copy\">In the microsoft x64 convention where RCX, RDX, R8, R9 are used are arguments, is RCX still used by c++ for the this pointer ?</span>",
                    "time": null
                }
            ]
        }
    ]
}