{
    "title": "Reducing PE Headers",
    "link": "https://reverseengineering.stackexchange.com/questions/8794/reducing-pe-headers",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to create a compiler and I will start doing the part of the code generation. To become more simple to generate the executable, I want the PE headers remain as small as possible.\n </p>\n <p>\n  For me understand better what I will do I am compiling and analyzing programs with OllyDbg.\n </p>\n <p>\n  I made a program using FASM and used some macros that I found on the Internet to reduce the size of imports. Everything is in one section as well.\n </p>\n <p>\n  The executable was generated with 1024 bytes. Then I used a PEiD plugin which reduced the file to 722 bytes.\n </p>\n <p>\n  I do not understand much about it yet, but looking at some articles on the internet seems to have some unnecessary things in headers of my file. So I want to help to reduce the size of headers without compromising the program. If possible I want help to reduce the size of imports too!\n </p>\n <p>\n  Here is the source code:\n </p>\n <pre><code>format PE console\nentry start\n\ninclude 'win32a.inc'\n\nmacro import_part1 library, [api]\n{ \n  common\n    library#_str: db `library \n  forward \n    if rva $ mod 2 = 0\n     ; db 0\n    end if\n    ; When align is right, one byte from previous import name \n    ; is used as byte for next import's hint. \n    api#_str = $-1 \n    db 0, `api \n  common\n    db 0\n} \n\nimport_part2_first = 0\n\nmacro import_part2 library, [api]\n{ \n  common\n    if import_part2_first = 0\n      align 4\n      import_part2_first = 1\n    else\n      dd 0\n    end if\n    library#_import: \n  forward \n    api dd rva api#_str \n} \n\nmacro import_part3 [library]\n{ \n  common\n    data import\n  forward \n    dd 0, 0, 0, rva library#_str, rva library#_import \n  common\n    rd 5\n    end data \n} \n\nimport_list equ\nimport_libraries equ\n\nmacro import library,[api]\n{ \n  common\n    import_list equ import_list import_#library \n    import_#library equ library,api \n    import_libraries equ import_libraries,library \n} \n\nmacro importend \n{ \n  match a, import_list \n  \\{ \n    irps b, a \\\\{ match c, b \\\\\\{ import_part1 c \\\\\\} \\\\} \n    irps b, a \\\\{ match c, b \\\\\\{ import_part2 c \\\\\\} \\\\} \n  \\} \n  match =,a,import_libraries \\{ import_part3 a \\} \n}\n\n\nstart:\n\n         push var\n         call [printf]\n\n\n         push 0\n         call [ExitProcess]\n\n         var db 'Test', 0\n\nimport kernel32.dll, ExitProcess, AttachConsole\nimport msvcrt.dll, printf, scanf\nimportend\n</code></pre>\n <p>\n  I used RebuildPE plugin to reduce de exe size.\nHere is the compiled code:\n </p>\n <pre><code>CPU Disasm\nAddress   Hex dump                                       Command                           Comments\n00401000   .  68 13104000                                PUSH 00401013                     ; /format = \"Test\"\n00401005   .  FF15 80104000                              CALL DWORD PTR DS:[<&msvcrt.print ; \\MSVCRT.printf\n0040100B   .  6A 00                                      PUSH 0                            ; /ExitCode = 0\n0040100D   .  FF15 74104000                              CALL DWORD PTR DS:[<&kernel32.Exi ; \\KERNEL32.ExitProcess\n00401013   .  54                                         PUSH ESP\n00401014   .  65:73 74                                   JAE SHORT 0040108B                ; Superfluous segment override prefix\n00401017   .  006B 65                                    ADD BYTE PTR DS:[EBX+65], CH\n0040101A   .  72 6E 65 6C 33 32 2E 64 6C 6C 00           ASCII \"rnel32.dll\",0              ; ASCII \"rnel32.dll\"\n00401025   .  45 78 69 74 50 72 6F 63 65 73 73 00        ASCII \"ExitProcess\",0             ; ASCII \"ExitProcess\"\n00401031   .  41 74 74 61 63 68 43 6F 6E 73 6F 6C 65 00  ASCII \"AttachConsole\",0           ; ASCII \"AttachConsole\"\n0040103F   .  6D 73 76 63 72 74 2E 64 6C 6C 00           ASCII \"msvcrt.dll\",0              ; ASCII \"msvcrt.dll\"\n0040104A   .  70 72 69 6E 74 66 00                       ASCII \"printf\",0                  ; ASCII \"printf\"\n00401051   .  73 63 61 6E 66 00                          ASCII \"scanf\",0                   ; ASCII \"scanf\"\n00401057   .  70 75 74 73 00                             ASCII \"puts\",0                    ; ASCII \"puts\"\n0040105C   .  75 73 65 72 33 32 2E 64 6C 6C 00           ASCII \"user32.dll\",0              ; ASCII \"user32.dll\"\n00401067   .  4D 65 73 73 61 67 65 42 6F 78 41 00        ASCII \"MessageBoxA\",0             ; ASCII \"MessageBoxA\"\n00401073      90                                         NOP\n00401074   .  647FA577                                   DD 77A57F64\n00401078   .  1878A577                                   DD 77A57818\n0040107C   .  00000000                                   DD 00000000\n00401080   .  C4D2B777                                   DD 77B7D2C4\n00401084   .  BF16C077                                   DD 77C016BF\n00401088   .  9C3BC077                                   DD 77C03B9C\n0040108C   .  00000000                                   DD 00000000\n00401090   .  9E278B77                                   DD 778B279E\n00401094   .  00000000                                   DD 00000000                       ; Struct 'IMAGE_IMPORT_DESCRIPTOR'\n00401098   .  00000000                                   DD 00000000\n0040109C   .  00000000                                   DD 00000000\n004010A0   .  18100000                                   DD 00001018\n004010A4   .  74100000                                   DD 00001074\n004010A8   .  00000000                                   DD 00000000                       ; Struct 'IMAGE_IMPORT_DESCRIPTOR'\n004010AC   .  00000000                                   DD 00000000\n004010B0   .  00000000                                   DD 00000000\n004010B4   .  3F100000                                   DD 0000103F\n004010B8   .  80100000                                   DD 00001080\n004010BC   .  00000000                                   DD 00000000                       ; Struct 'IMAGE_IMPORT_DESCRIPTOR'\n004010C0   .  00000000                                   DD 00000000\n004010C4   .  00000000                                   DD 00000000\n004010C8   .  5C100000                                   DD 0000105C\n004010CC   .  90100000                                   DD 00001090\n004010D0   .  00000000                                   DD 00000000                       ; Struct 'IMAGE_IMPORT_DESCRIPTOR'\n004010D4   .  00000000                                   DD 00000000\n004010D8   .  00000000                                   DD 00000000\n004010DC   .  00000000                                   DD 00000000\n004010E0   .  00000000                                   DD 00000000\n</code></pre>\n <p>\n  And the headers:\n </p>\n <pre><code>CPU Disasm\nAddress   Hex dump                                       Command                           Comments\n00400000  /.  4D 5A                                      ASCII \"MZ\"                        ; DOS_Signature[2] = \"MZ\"\n00400002  |.  8000                                       DW 80                             ; DOS_PartPag = 128.\n00400004  |.  0100                                       DW 1                              ; DOS_PageCnt = 1\n00400006  |.  0000                                       DW 0                              ; DOS_ReloCnt = 0\n00400008  |.  0400                                       DW 4                              ; DOS_HdrSize = 4\n0040000A  |.  1000                                       DW 10                             ; DOS_MinMem = 16.\n0040000C   .  50 45 00 00                                ASCII \"PE\",0,0                    ; IMAGE_NT_SIGNATURE[4] = \"PE\"\n00400010  /.  4C01                                       DW 14C                            ; Machine = IMAGE_FILE_MACHINE_I386\n00400012  |.  0100                                       DW 1                              ; DOS_ChkSum = 1\n00400014  |.  76264555                                   DD 55452676                       ; DOS_ExeIP = 55452676\n00400018  |.  00000000                                   DD 00000000                       ; DOS_RelocOffset = 0\n0040001C  |.  00000000                                   DD 00000000                       ; DOS_Reserved1[4] = 00000000\n00400020  |.  E000                                       DW 0E0                            ; SizeOfOptionalHeader = 224.\n00400022  \\.  0F01                                       DW 10F                            ; Characteristics = EXECUTABLE_IMAGE|32BIT_MACHINE|RELOCS_STRIPPED|LINE_NUMS_STRIPPED|LOCAL_SYMS_STRIPPED\n00400024  /.  0B01                                       DW 10B                            ; DOS_OEM_ID = 10B\n00400026  |.  0147                                       DW 4701                           ; DOS_OEM_Info = 4701\n00400028  |.  00020000                                   DD 00000200                       ; SizeOfCode = 512.\n0040002C  |.  00020000                                   DD 00000200                       ; SizeOfInitializedData = 512.\n00400030  |.  00000000                                   DD 00000000                       ; SizeOfUninitializedData = 0\n00400034  |.  00100000                                   DD 00001000                       ; AddressOfEntryPoint = 1000\n00400038  |.  00100000                                   DD 00001000                       ; BaseOfCode = 1000\n0040003C  |.  0C000000                                   DD 0000000C                       ; DOS_PEOffset = 0C\n00400040  |.  00004000                                   DD 00400000                       ; ImageBase = 400000\n00400044  |.  00100000                                   DD 00001000                       ; SectionAlignment = 1000\n00400048  |.  00020000                                   DD 00000200                       ; FileAlignment = 200\n0040004C  |.  0100                                       DW 1                              ; MajorOSVersion = 1\n0040004E  |.  0000                                       DW 0                              ; MinorOSVersion = 0\n00400050  |.  0000                                       DW 0                              ; MajorImageVersion = 0\n00400052  |.  0000                                       DW 0                              ; MinorImageVersion = 0\n00400054  |.  0300                                       DW 3                              ; MajorSubsystemVersion = 3\n00400056  |.  0A00                                       DW 0A                             ; MinorSubsystemVersion = 10.\n00400058  |.  00000000                                   DD 00000000                       ; Win32VersionValue = 0\n0040005C  |.  E4100000                                   DD 000010E4                       ; SizeOfImage = 4324.\n00400060  |.  00020000                                   DD 00000200                       ; SizeOfHeaders = 512.\n00400064  |.  53C80000                                   DD 0000C853                       ; CheckSum = 0C853\n00400068  |.  0300                                       DW 3                              ; Subsystem = IMAGE_SUBSYSTEM_WINDOWS_CUI\n0040006A  |.  0000                                       DW 0                              ; DLLCharacteristics = 0\n0040006C  |.  00100000                                   DD 00001000                       ; SizeOfStackReserve = 4096.\n00400070  |.  00100000                                   DD 00001000                       ; SizeOfStackCommit = 4096.\n00400074  |.  00000100                                   DD 00010000                       ; SizeOfHeapReserve = 65536.\n00400078  |.  00000000                                   DD 00000000                       ; SizeOfHeapCommit = 0\n0040007C  |.  00000000                                   DD 00000000                       ; LoaderFlags = 0\n00400080  \\.  10000000                                   DD 00000010                       ; NumberOfRvaAndSizes = 16.\n00400084  /.  00000000                                   DD 00000000                       ; Export Table address = 0\n00400088  |.  00000000                                   DD 00000000                       ; Export Table size = 0\n0040008C  |.  94100000                                   DD 00001094                       ; Import Table address = 1094\n00400090  |.  50000000                                   DD 00000050                       ; Import Table size = 80.\n00400094  |.  00000000                                   DD 00000000                       ; Resource Table address = 0\n00400098  |.  00000000                                   DD 00000000                       ; Resource Table size = 0\n0040009C  |.  00000000                                   DD 00000000                       ; Exception Table address = 0\n004000A0  |.  00000000                                   DD 00000000                       ; Exception Table size = 0\n004000A4  |.  00000000                                   DD 00000000                       ; Certificate File pointer = 0\n004000A8  |.  00000000                                   DD 00000000                       ; Certificate Table size = 0\n004000AC  |.  00000000                                   DD 00000000                       ; Relocation Table address = 0\n004000B0  |.  00000000                                   DD 00000000                       ; Relocation Table size = 0\n004000B4  |.  00000000                                   DD 00000000                       ; Debug Data address = 0\n004000B8  |.  00000000                                   DD 00000000                       ; Debug Data size = 0\n004000BC  |.  00000000                                   DD 00000000                       ; Architecture Data address = 0\n004000C0  |.  00000000                                   DD 00000000                       ; Architecture Data size = 0\n004000C4  |.  00000000                                   DD 00000000                       ; Global Ptr address = 0\n004000C8  |.  00000000                                   DD 00000000                       ; Reserved = 00000000\n004000CC  |.  00000000                                   DD 00000000                       ; TLS Table address = 0\n004000D0  |.  00000000                                   DD 00000000                       ; TLS Table size = 0\n004000D4  |.  00000000                                   DD 00000000                       ; Load Config Table address = 0\n004000D8  |.  00000000                                   DD 00000000                       ; Load Config Table size = 0\n004000DC  |.  00000000                                   DD 00000000                       ; Bound Import Table address = 0\n004000E0  |.  00000000                                   DD 00000000                       ; Bound Import Table size = 0\n004000E4  |.  00000000                                   DD 00000000                       ; Import Address Table address = 0\n004000E8  |.  00000000                                   DD 00000000                       ; Import Address Table size = 0\n004000EC  |.  00000000                                   DD 00000000                       ; Delay Import Descriptor address = 0\n004000F0  |.  00000000                                   DD 00000000                       ; Delay Import Descriptor size = 0\n004000F4  |.  00000000                                   DD 00000000                       ; COM+/CLI Header address = 0\n004000F8  |.  00000000                                   DD 00000000                       ; COM+/CLI Header size = 0\n004000FC  |.  00000000                                   DD 00000000                       ; Reserved = 00000000\n00400100  \\.  00000000                                   DD 00000000                       ; Reserved = 00000000\n00400104  /.  2E 66 6C 61 74 00 00 00                    ASCII \".flat\",0,0,0               ; Name[8] = \".flat\"\n0040010C  |.  E4000000                                   DD 000000E4                       ; VirtualSize = 228.\n00400110  |.  00100000                                   DD 00001000                       ; VirtualAddress = 1000\n00400114  |.  D2000000                                   DD 000000D2                       ; SizeOfRawData = 210.\n00400118  |.  00020000                                   DD 00000200                       ; PointerToRawData = 200\n0040011C  |.  00000000                                   DD 00000000                       ; PointerToRelocations = 0\n00400120  |.  00000000                                   DD 00000000                       ; PointerToLineNumbers = 0\n00400124  |.  0000                                       DW 0                              ; NumberOfRelocations = 0\n00400126  |.  0000                                       DW 0                              ; NumberOfLineNumbers = 0\n00400128  \\.  600000E0                                   DD E0000060                       ; Characteristics = CODE|INITIALIZED_DATA|EXECUTE|READ|WRITE\n</code></pre>\n <p>\n  <strong>\n   So my question: what can I remove from headers and improve on imports to make them smaller?\n  </strong>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Jorge",
    "time": "May 2, 2015 at 19:45",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n I don't think you can equate \"reducing a PE header\" with \"making it as simple as possible\". Reducing a PE header's size requires a lot of knowledge of its various parts, way beyond the regular documentation.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You need to know about the\n  <code>\n   PE\n  </code>\n  format in detail. There are quite a few header entries which can be removed to make the\n  <code>\n   PE\n  </code>\n  as small as possible. However doing this is generally not recommended as this is an undocumented feature and may break compatibility across various Windows versions. Moreover, your file is more likely to trigger alerts from Anti-Virus products.\n </p>\n <p>\n  <em>\n   <a href=\"http://www.phreedom.org/research/tinype/\" rel=\"nofollow\">\n    Here\n   </a>\n  </em>\n  is a great article about creating the smallest possible\n  <code>\n   PE\n  </code>\n  . Much of the information had been obtained by fuzzing the file format, so the previous warnings apply.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "yaspr",
            "time": "May 5, 2015 at 9:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, if your purpose is to generate small binaries, headers are definitely not what you should be playing with since most of the header entries, whatever the binary format is (\n  <code>\n   PE\n  </code>\n  ,\n  <code>\n   ELF\n  </code>\n  ,\n  <code>\n   Mach-O\n  </code>\n  , ...), are designed to handle certain weird cases which you might possibly never think of. And, you can't really go very far in terms of size optimization, at most you'll save couple hundred bytes.\n </p>\n <p>\n  On the other hand, if you want your compiler to generate small binary files you should optimize the generated code (the\n  <strong>\n   -Os\n  </strong>\n  optimization flag does that in\n  <strong>\n   GCC\n  </strong>\n  ). You'll find helpful information in\n  <a href=\"https://wiki.wxwidgets.org/Reducing_Executable_Size#Windows_Specific\" rel=\"nofollow\">\n   this link\n  </a>\n  , and also\n  <a href=\"http://www.nopcode.com/index.shtml\" rel=\"nofollow\">\n   this one\n  </a>\n  (under the\n  <em>\n   Aggressive Optimizations\n  </em>\n  section).\nAnother interesting thing would be to check\n  <strong>\n   GCC\n  </strong>\n  's or\n  <strong>\n   LLVM\n  </strong>\n  's size optimization pass. The source codes are freely available on the compilers' respective websites.\n </p>\n <p>\n  Usually, code size optimization is critical for embedded systems since they're most likely to pack a small memory. Here is a very interesting scientific\n  <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.12.9201&rep=rep1&type=pdf\" rel=\"nofollow\">\n   article\n  </a>\n  that tackles code size optimization for embedded systems by smartly picking instructions using a\n  <em>\n   DAG\n  </em>\n  (Directed Acyclic Graph) covering algorithm. Since you're writing a compiler, this sounds like a better option than cutting off entries in the binary format header. Your can reasonably implement the algorithm provided in the above publication in your compiler's back-end.\nFor a lengthier and complete reference, check\n  <a href=\"https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-607.pdf\" rel=\"nofollow\">\n   this\n  </a>\n  document by Neil. E. Johnson from the\n  <em>\n   University of Cambridge\n  </em>\n  . It's a gold mine.\n </p>\n <p>\n  <strong>\n   APPENDIX :\n  </strong>\n </p>\n <p>\n  A pure reverse engineering trick would be to perform a differential analysis by compiling a simple program using code optimization flags (\n  <strong>\n   -O2\n  </strong>\n  for\n  <strong>\n   GCC\n  </strong>\n  ), then size optimization flags (\n  <strong>\n   -Os\n  </strong>\n  for\n  <strong>\n   GCC\n  </strong>\n  ), and then comparing the two binaries. Using this techniques, you'll most likely be able to spot the differences in headers, if there are any, and also the different code size optimizations.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "yaspr",
            "time": "May 5, 2015 at 9:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Surely <i>executable headers</i> are not optimized by <code>gcc</code>? I'm guessing the only relevant difference in the headers would be \"this file has a larger amount of code\".</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Well they are rarely reduced... the gain isn't considerably large compared to code. Some sections are deleted if not used, but it is mainly related to the binary and the compiler version.</span>",
                    "time": null
                }
            ]
        }
    ]
}