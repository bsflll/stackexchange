{
    "title": "Function's signature with unmatching parameters",
    "link": "https://reverseengineering.stackexchange.com/questions/22780/functions-signature-with-unmatching-parameters",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have following code disassembled by ghidra:\n </p>\n <pre><code>PUSH      EBX\nPUSH      dword ptr [EBP + param_1]             wchar_t * _Format for swprintf\nPUSH      u_%s\\%s_0040eb88                      size_t _Count for swprintf\nPUSH      dword ptr [EBP + param_3]             wchar_t * _String for swprintf\nCALL      dword ptr [->MSVCRT.DLL::swprintf]\n</code></pre>\n <p>\n  The 2nd parameter is unicode string %s\\%s, but it should be size_t parameter, because\n  <a href=\"http://www.cplusplus.com/reference/cwchar/swprintf/\" rel=\"nofollow noreferrer\">\n   swprintf\n  </a>\n  function requires count parameter\n </p>\n <p>\n  This is another code which uses the same function:\n </p>\n <pre><code>LEA       EAX=>local_4dc,[0xfffffb28 + EBP]\nPUSH      EAX                                        wchar_t * _Format for swprintf\nLEA       EAX=>windowsDir,[0xfffffd30 + EBP]\nPUSH      _Count_0040f40c                            size_t _Count for swprintf\nPUSH      EAX                                        wchar_t * _String for swprintf\nCALL      EDI=>MSVCRT.DLL::swprintf\n</code></pre>\n <p>\n  Again,\n  <code>\n   _Count_0040f40c\n  </code>\n  is unicode string %/Program Data detected as\n  <code>\n   _Count\n  </code>\n </p>\n <p>\n  Ghidra has correct function signature:\n </p>\n <pre><code>int swprintf (wchar_t * _String, size_t _Count, wchar_t * _Format, ...)\n</code></pre>\n <p>\n  Normal count parameter is always missing, what Ghidra detects doesn't refer to number type variable. It looks like if all functions were compiled without it. All those memory variables ghidra detects as count parameters are actually format parameters. If there was actual count parameter every time swprintf was called, everything would be looking good.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "functions",
        "ghidra"
    ],
    "user": "M. Kalter",
    "time": "Dec 19, 2019 at 7:40",
    "comments": [
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n Are you sure that the actually called function is\n <code>\n  swprintf\n </code>\n ? Maybe Ghidra got this wrong, and the actually called function is\n <code>\n  sprintf\n </code>\n or similar?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "M. Kalter",
            "text": "<html><body><span class=\"comment-copy\">\n no, this is swprintf, I checked it with ht disassembler\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems the  picked prototype is incorrect. The original version of\n  <code>\n   swprintf\n  </code>\n  does not have the count parameter.  From the VS 9.0 (2008) CRT sources:\n </p>\n <pre><code>#ifndef _COUNT_\n\nint __cdecl _swprintf (\n        wchar_t *string,\n        const wchar_t *format,\n        ...\n        )\n#else  /* _COUNT_ */\n\n#ifndef _SWPRINTFS_ERROR_RETURN_FIX\n/* Here we implement _snwprintf without the\nreturn value bugfix */\n\nint __cdecl _snwprintf (\n        wchar_t *string,\n        size_t count,\n        const wchar_t *format,\n        ...\n        )\n#else  /* _SWPRINTFS_ERROR_RETURN_FIX */\nint __cdecl _swprintf_c (\n        wchar_t *string,\n        size_t count,\n        const wchar_t *format,\n        ...\n        )\n#endif  /* _SWPRINTFS_ERROR_RETURN_FIX */\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 20, 2019 at 14:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "M. Kalter",
                    "text": "<span class=\"comment-copy\">Where did you find this? I can't find info about deprecated VS versions on MSDN. Modern versions use prototype with count argument: <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l?view=vs-2019\" rel=\"nofollow noreferrer\">docs.microsoft.com/en-us/cpp/c-runtime-library/reference/…</a>  And how can VS 9.0 use custom version with modified arguments list although swprintf is defined by C standard library headers?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Msvcrt.dll dates from VC 6.0 days(win95/win2k); at that time the function was not standardized yet and Microsoft provided their own version with the underscore prefix. For compatibility they have to keep it as is, with the old prototype.</span>",
                    "time": null
                },
                {
                    "user": "M. Kalter",
                    "text": "<span class=\"comment-copy\">Still, how did you learn this?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><a href=\"https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-6.0/aa272937(v=vs.60)\" rel=\"nofollow noreferrer\">docs.microsoft.com/en-us/previous-versions/visualstudio/…</a></span>",
                    "time": null
                }
            ]
        }
    ]
}