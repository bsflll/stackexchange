{
    "title": "Router Firmware Reverse Engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/33301/router-firmware-reverse-engineering",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanted to reverse engineer my router's firmware and potentially modify its functionalities.\n </p>\n <p>\n  I know about opensource firmwares like OpenWRT like softwares but I cant use that.\nI started with tracking down the firmware my router is using with the exact version. Eventually I found\n  <a href=\"https://www.tendacn.com/download/detail-4216.html\" rel=\"nofollow noreferrer\">\n   one\n  </a>\n  on the vender's website V2.0.\n </p>\n <p>\n  Searching through the internet, I came across this article-\n  <a href=\"https://www.zerodayinitiative.com/blog/2020/2/6/mindshare-dealing-with-encrypted-router-firmware\" rel=\"nofollow noreferrer\">\n   https://www.zerodayinitiative.com/blog/2020/2/6/mindshare-dealing-with-encrypted-router-firmware\n  </a>\n  .\n </p>\n <p>\n  But the Firmware is not encrypted, its just compressed with LZMA into the .bin file.\nThe Binwalk output:-\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n10292         0x2834          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 2768760 bytes\n</code></pre>\n <p>\n  Its later version V5.0\n  <a href=\"https://www.tendacn.com/in/download/detail-3921.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  has some more information. Inspecting it with binwalk shows:\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n28            0x1C            uImage header, header size: 64 bytes, header CRC: 0x55717000, created: 2020-04-30 14:40:49, image size: 1005874 bytes, Data Address: 0x80000000, Entry Point: 0x800001BC, data CRC: 0x55717040, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"eCosAP\"\n60            0x3C            eCos RTOS string reference: \"eCosAP\"\n92            0x5C            LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3118960 bytes\n</code></pre>\n <p>\n  An older version V1.0 which I got from searching on internet show some other thing:\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             TRX firmware header, little endian, image size: 942080 bytes, CRC32: 0xA239E569, flags: 0x0, version: 1, header size: 28 bytes, loader offset: 0x1C, linux kernel offset: 0x0, rootfs offset: 0x0\n28            0x1C            LZMA compressed data, properties: 0x5D, dictionary size: 65536 bytes, uncompressed size: 2529180 bytes\n</code></pre>\n <p>\n  I decompressed the LZMA data of the original V2.0 and It had some files inside it but no such filesystem. I am stuck here.\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             eCos kernel exception handler, architecture: MIPS, exception vector table base address: 0x80000200\n128           0x80            eCos kernel exception handler, architecture: MIPS, exception vector table base address: 0x80000200\n134911        0x20EFF         GPG key trust database version 93\n198940        0x3091C         SHA256 hash constants, big endian\n1463384       0x165458        eCos RTOS string reference: \"eCos Release: %d.%d.%d\"\n1489752       0x16BB58        Unix path: /dev/net/dhcpc\n1490680       0x16BEF8        Unix path: /dev/net/dhcpd\n1492256       0x16C520        Unix path: /dev/net/ipl\n1502392       0x16ECB8        eCos RTOS string reference: \"ecos_name\"\n1502404       0x16ECC4        eCos RTOS string reference: \"ecos\"\n1511184       0x170F10        XML document, version: \"1.0\"\n1511800       0x171178        eCos RTOS string reference: \"ECOS\"\n1514232       0x171AF8        XML document, version: \"1.0\"\n1515000       0x171DF8        XML document, version: \"1.0\"\n1521128       0x1735E8        XML document, version: \"1.0\"\n1523396       0x173EC4        Unix path: /dev/net/ppp/ppp%d\n1526592       0x174B40        Unix path: /dev/net/pppoe/%s\n1533779       0x176753        HTML document footer\n1534744       0x176B18        HTML document footer\n1534852       0x176B84        HTML document header\n1535624       0x176E88        HTML document header\n1535731       0x176EF3        HTML document footer\n1535756       0x176F0C        eCos RTOS string reference: \"ecos_pw=%s:language=%s; path=/\"\n1535856       0x176F70        HTML document header\n1536016       0x177010        HTML document footer\n1538300       0x1778FC        eCos RTOS string reference: \"ecos_cgi/cgi_devManage.c\"\n1541756       0x17867C        eCos RTOS string reference: \"ecos_pw=\"\n1558984       0x17C9C8        Base64 standard index table\n1565160       0x17E1E8        SHA256 hash constants, big endian\n1576440       0x180DF8        Base64 standard index table\n1577228       0x18110C        CRC32 polynomial table, big endian\n1582401       0x182541        eCos RTOS string reference: \"ecos-work/../ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/swNic_poll.c\"\n1582414       0x18254E        eCos RTOS string reference: \"ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/swNic_poll.c\"\n1584313       0x182CB9        eCos RTOS string reference: \"ecos-work/../ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/swTable.c\"\n1584326       0x182CC6        eCos RTOS string reference: \"ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/swTable.c\"\n1585297       0x183091        eCos RTOS string reference: \"ecos-work/../ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/vlanTable.c\"\n1585310       0x18309E        eCos RTOS string reference: \"ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/vlanTable.c\"\n1585445       0x183125        eCos RTOS string reference: \"ecos-work/../ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/rtl865x_igmpsnooping_new.c\"\n1585458       0x183132        eCos RTOS string reference: \"ecos-3.0/packages/devs/eth/rltk/819x/switch/v3_0/src/rtl865x_igmpsnooping_new.c\"\n1630142       0x18DFBE        XML document, version: \"1.0\"\n1630320       0x18E070        HTML document header\n1630385       0x18E0B1        HTML document footer\n1630556       0x18E15C        Base64 standard index table\n1630834       0x18E272        HTML document header\n1630959       0x18E2EF        HTML document footer\n1631240       0x18E408        HTML document header\n1631380       0x18E494        HTML document footer\n1631392       0x18E4A0        HTML document header\n1631422       0x18E4BE        HTML document footer\n1631876       0x18E684        XML document, version: \"1.0\"\n1638240       0x18FF60        eCos RTOS string reference: \"eCos_node\"\n1646208       0x191E80        Unix path: /var/log/alias.log\n1690660       0x19CC24        XML document, version: \"1.0\"\n1701188       0x19F544        XML document, version: \"1.0\"\n1704232       0x1A0128        XML document, version: \"1.0\"\n1705204       0x1A04F4        XML document, version: \"1.0\"\n1711196       0x1A1C5C        XML document, version: \"1.0\"\n2228680       0x2201C8        Zlib compressed data, default compression\n2228732       0x2201FC        Zlib compressed data, default compression\n2228800       0x220240        Zlib compressed data, default compression\n2229120       0x220380        Zlib compressed data, default compression\n2234836       0x2219D4        Zlib compressed data, default compression\n2234888       0x221A08        Zlib compressed data, default compression\n2234920       0x221A28        Zlib compressed data, default compression\n2235072       0x221AC0        Zlib compressed data, default compression\n2235104       0x221AE0        Zlib compressed data, default compression\n2235444       0x221C34        Zlib compressed data, default compression\n2266010       0x22939A        Base64 standard index table\n2273032       0x22AF08        Copyright string: \"Copyright 2013 Scott Jehl\"\n2326473       0x237FC9        HTML document header\n2326479       0x237FCF        HTML document footer\n2327221       0x2382B5        HTML document header\n2327227       0x2382BB        HTML document footer\n2327836       0x23851C        Copyright string: \"Copyright 2014 ET.W\"\n2331409       0x239311        Copyright string: \"Copyright 2013 reasy Foundation and other contributors\"\n2334491       0x239F1B        Copyright string: \"Copyright 2013 reasy Foundation and other contributors\"\n2338597       0x23AF25        Copyright string: \"Copyright 2013 reasy Foundation and other contributors\"\n2345422       0x23C9CE        Copyright string: \"Copyright 2013 reasy Foundation and other contributors\"\n2346228       0x23CCF4        Copyright string: \"C\n2532356       0x26A404        GIF image data, vers\n2533764       0x26A984        PNG image, 160 x 160\n2533805       0x26A9AD        Zlib compressed data\n2535448       0x26B018        PNG image, 80 x 12, \n2536448       0x26B400        PNG image, 24 x 10, \n2536824       0x26B578        PNG image, 32 x 20, \n2537372       0x26B79C        PNG image, 20 x 20, \n2537580       0x26B86C        PNG image, 133 x 30,\n2540400       0x26C370        PNG image, 116 x 26,\n2548511       0x26E31F        HTML document header\n2551874       0x26F042        HTML document footer\n2551899       0x26F05B        HTML document header\n2552916       0x26F454        HTML document footer\n2560523       0x27120B        HTML document header\n2568797       0x27325D        HTML document footer\n2579095       0x275A97        HTML document header\n2585129       0x277229        HTML document footer\n2609636       0x27D1E4        AES S-Box\n</code></pre>\n <p>\n  I can access all the files inside with dd (and they work and open as intended the PNGs, HTML files, etc). But I want to inject some files in it.\n </p>\n <p>\n  Also suggest a way to emulate the firmware and check for its integrity (Its a router firmware, so no GUI, the way to check it will be accessing the web management portal).\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "660",
    "tags": [
        "firmware-analysis",
        "mips",
        "binwalk",
        "qemu",
        "router"
    ],
    "user": "bitz-22",
    "time": "Nov 24, 2024 at 12:52",
    "comments": [
        {
            "user": "secfren",
            "text": "<html><body><span class=\"comment-copy\">\n Router model? Link to firmware? The decompressed stuff (binwalk output?) at least partially looks like what you would expect from a router firmware. There also seems to be more compressed data.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bitz-22",
            "text": "<html><body><span class=\"comment-copy\">\n @secfren sorry, my bad. I have now added the firmware link. You can test it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n You could try to extract all the files with\n <code>\n  binwalk -eM\n </code>\n and insert the modified files in the hierarchy, finally rebuild the archive with\n <code>\n  lzma\n </code>\n . You may need to find the CRC of the archive and change it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "bitz-22",
            "text": "<html><body><span class=\"comment-copy\">\n @perror the thing is binwalk -eM just output a number of zlib data and nothing else. i tried to extract thst too but its again a number of further zlib data\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}