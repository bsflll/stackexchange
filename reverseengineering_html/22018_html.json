{
    "title": "Force a firmware updater to flash any drive model",
    "link": "https://reverseengineering.stackexchange.com/questions/22018/force-a-firmware-updater-to-flash-any-drive-model",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For a self-learning project, I want to patch an exe file.\n </p>\n <p>\n  I have a firmware updater (exe file) that updates a 20-year old DVD drive (Matsushita model SW-9586-T).\nI own a commercial version of the drive (SW-9586-C) and the software updater does not update it.\n </p>\n <p>\n  I want to patch the exe file to force the flashing of any drive, but I don't know where to start.\n </p>\n <p>\n  Is decompiling > Modifying > Recompiling the firmware updater a good or bad idea ?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "77",
    "tags": [
        "exe"
    ],
    "user": "Vincent",
    "time": "Sep 1, 2019 at 17:29",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. Your question is pretty much asking for opinions and that's not generally thought to be a good fit for Q&A. However, I think there is actually a consensus that these days decompilers hardly ever will enable you to get code that will recompile and yield something remotely similar to the original binary. Sure, decompilers are getting better year by year, but I think you are better off learning how to modify an executable without outright trying to recompile the results of some decompiler (some of which call their output\n <i>\n  pseudo\n </i>\n -code for a good reason).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You don't need to decompile/recompile it, if you know how to read the assembler code. You just need to find the place in the code, which does the model check, and patch it to let the code execute further. Yet to find, where the check is, you need to know how the model is read from the device. Most probably it's some IDE Disk I/O commands. Thus you need to know how those commands are usually sent, and then search for them in the disassembled code. And so on... This rabbit hole is really deep.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Sep 2, 2019 at 11:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}