{
    "title": "Symbolic gloabal variables in angr",
    "link": "https://reverseengineering.stackexchange.com/questions/27139/symbolic-gloabal-variables-in-angr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning angr and for that I wrote a code containing two global variables.\n </p>\n <pre><code>char pwd[8];\nchar flag[16];\nint main()\n{\n        printf(\"\n\nEnter your password and the flag: \");\n        validator();\n        return 0;\n}\nvoid validator()\n{ \n        scanf(\"%s %s\",pwd,flag);\n        printf(\"\nThank You\n\");//want to start the symbolic execution from here\n        cipher_function();//works on pwd\n        shuffle_function();//works on flag\n        ...\n       }\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/Tw8dG.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Tw8dG.png\"/>\n  </a>\n </p>\n <p>\n  and here is the solution script:\n </p>\n <pre><code> project = angr.Project(path_to_binary)\n\n  start_address = 0x004011BB  \n  initial_state = project.factory.blank_state(addr=start_address)\n \n  initial_state.regs.rbp = initial_state.regs.rsp\n  initial_state.regs.rdx = 0x00404080\n  initial_state.regs.rsi = 0x00404070\n \n  pwd = claripy.BVS('pwd', 8*8)\n  flag = claripy.BVS('flag',16*8)\n\n  initial_state.memory.store(0x00404070, pwd)\n  initial_state.memory.store(0x00404080, flag)\n\n  simulation = project.factory.simgr(initial_state) \n\n</code></pre>\n <p>\n  Finally, the angr output is:\n </p>\n <pre><code>WARNING | 2021-03-02 08:11:19,750 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing memory or registers with an unspecified value. This could indicate unwanted behavior.\nWARNING | 2021-03-02 08:11:19,750 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:\nWARNING | 2021-03-02 08:11:19,750 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state\nWARNING | 2021-03-02 08:11:19,750 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null\nWARNING | 2021-03-02 08:11:19,750 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to suppress these messages.\nWARNING | 2021-03-02 08:11:19,750 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x40125e (cipher_function+0x2d in out2 (0x40125e))\n</code></pre>\n <p>\n  can anyone please take a look and help me find what I am doing wrong.\nThank you\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "483",
    "tags": [
        "angr"
    ],
    "user": "youtab",
    "time": "Mar 2, 2021 at 20:05",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n Is there a typo in your code? In the screenshot, what you have in your code as\n <code>\n  start_address\n </code>\n is not, in fact, a valid instruction address. Notice that it ends in a\n <code>\n  6\n </code>\n , whereas in the screenshot, valid last nibbles are\n <code>\n  3\n </code>\n and\n <code>\n  A\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "youtab",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you for the head up and sorry for the inconsistency in the code and screenshot. However, This is not the source of the issue, as I run it several time and got the same result.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n I wrote my own symbolic execution framework, but have never used angr. That said, its output is telling to me. The final line indicates that the instruction at\n <code>\n  0x40125e\n </code>\n tried to read from memory that had not previously been initialized. Figure out which function/line of code that is and see if it's accessing something like another global variable. Alternatively, hopefully it has a more verbose output method -- instruction by instruction -- that can give you clues about what it's trying to read, and why it's trying to read it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Florian Magin",
            "text": "<html><body><span class=\"comment-copy\">\n I wrote a tool/angr plugin to help with debugging in such cases:\n <a href=\"https://github.com/fmagin/angr-cli\" rel=\"nofollow noreferrer\">\n  github.com/fmagin/angr-cli\n </a>\n With this you should be able to easily find out at what point this happens and what is being read and then decide if this is even an issue.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}