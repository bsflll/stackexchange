{
    "title": "What does this custom piece of frame manipulation code from a router binary do?",
    "link": "https://reverseengineering.stackexchange.com/questions/26641/what-does-this-custom-piece-of-frame-manipulation-code-from-a-router-binary-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've decompiled a custom router ELF binary using Hex-Rays and have recently come across the following function in the binary:\n </p>\n <pre><code>pkt_hdr_t *__cdecl pkt_hdr_from_frame(frame_t *frame, uint16_t *remaining)\n{\n  uint16_t *remaininga; // [xsp+10h] [xbp+10h]\n  frame_t *framea; // [xsp+18h] [xbp+18h]\n  uint16_t frame_sz; // [xsp+26h] [xbp+26h]\n\n  framea = frame;\n  remaininga = remaining;\n  if ( !frame || !remaining )\n    return 0LL;\n  frame_sz = ntohs(frame->sz.inner);\n  if ( frame_sz <= 1u )\n    return 0LL;\n  *remaininga = frame_sz - 2;\n  return (pkt_hdr_t *)&framea[1];\n}\n</code></pre>\n <p>\n  While it's a pretty short piece of code, I'll appreciate it if the role of\n  <code>\n   remaining\n  </code>\n  and the\n  <code>\n   return\n  </code>\n  line can be figured out. I know that a frame is created from a packet by appending the length of a packet to the beginning of it and the length field is 2 bytes long itself. This seems related to\n  <code>\n   remaining\n  </code>\n  which is a pointer to a 16 bit (2 byte) unsigned integer. According to the line before\n  <code>\n   return\n  </code>\n  it seems to me that initially the value pointed to by\n  <code>\n   remaining\n  </code>\n  is the length of the frame, i.e., length of packet + 2 bytes of length field but the function\n  <code>\n   pkt_hdr_from_frame\n  </code>\n  removes those 2 bytes and returns a pointer to the field in the frame located after the packet-length field (which is the beginning of the packet itself). Nevertheless, I'm confused with\n  <code>\n   framea[1]\n  </code>\n  as I don't understand the indexing here, especially considering the fact that the\n  <code>\n   frame_t\n  </code>\n  type is unknown to me. Thank you for your help!\n </p>\n <p>\n  <strong>\n   EDIT 1:\n  </strong>\n  IDA Pro Local Types tab gives (Ordinal, Name, Size, Sync, Description) as\n </p>\n <pre><code>31  frame_t 00000002        struct {uint16_n sz;uint8_t data[];}\n63  _pkt_hdr_t  00000002        struct {pkt_flags_t flags;msg_type_t msgtype;}\n64  pkt_hdr_t   00000002        typedef _pkt_hdr_t\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "68",
    "tags": [
        "ida",
        "elf",
        "hexrays",
        "pointer"
    ],
    "user": "Newbie",
    "time": "Dec 28, 2020 at 2:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ntohs basically converts a netshort to hostshort\n </p>\n <pre><code>>>> import socket\n>>> print (hex(socket.ntohs(0x1337)))\n0x3713\n>>> print (hex(socket.ntohs(0x3713)))\n0x1337\n>>>\n</code></pre>\n <p>\n  it will write back\n0x3713-0x2 = 0x3711  or  0x1337 - 0x2 = 0x1335\n  \n\n  in the address pointed by remaining if it is > 1u\n </p>\n <p>\n  and return back an address a pointer to pkt_hdr_t\n </p>\n <p>\n  comment edit\n </p>\n <p>\n  no remaining is an incoming pointer\n  \n\n  it is a writable address\n  \n\n  this function writes back whatever is remaining from the result of ntohs() call - 2 to this pointer\n  \n\n  it is like *blah = foo where foo is an unsigned short and blah is a pointer to unsigned short\n </p>\n <p>\n  so it may be called like unsigned short * xyz = 0;\npkt_whatever(abc,xyz) {\nxyz = some unsigned short whose value is 123xxyy\n}\n </p>\n <p>\n  so on incoming xyz will be holding 0 when it goes out of the function xyz will be holding  123xxyy\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Dec 28, 2020 at 16:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">So essentially my interpretation may be right, correct? In particular if the value pointed to by remaining is larger than 1, it will subtract 2 from it and write it to the same location. Also, can you comment on the indexing in <code>framea[1]</code>? Thanks for the brief illustration of <code>ntohs()</code> as well!</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">no you have a misunderstanding it is an incoming pointer it can be holding garbage or any value it was initialised with and most of the time it would be initialised with 0 and when the function returns it will hold whatever is the result of ntohs()-2 i also edited the answer</span>",
                    "time": null
                },
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">I'm so sorry, what I said made absolutely no sense. I actually meant what you just mentioned. No matter what the value pointed to by <code>remaining</code> is it will get updated to the value <code>ntohs()-2</code> if in fact the return value of <code>ntohs()</code> is larger than 1.</span>",
                    "time": null
                }
            ]
        }
    ]
}