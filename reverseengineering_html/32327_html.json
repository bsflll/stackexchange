{
    "title": "APK Reversing. Some code is hidden?",
    "link": "https://reverseengineering.stackexchange.com/questions/32327/apk-reversing-some-code-is-hidden",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sorry for my English. I accepted a challenge (part of the partial exams of the year) from my university professor of IT Security and Privacy. He gave me an APK and I need to find out how the login is handled, therefore how the data is sent to an endpoint I don't know.\n </p>\n <p>\n  I currently have the APK installed on the Genymotion emulator. I extracted the installed APK with APK Extractor. At this point I converted the dex files to jar with dex2jar and opened the two jar classes in jd-gui.\n </p>\n <p>\n  The strange thing is that I can't find any reference to login or passwords. The only thing I find is:\n </p>\n <pre class=\"lang-java prettyprint-override\"><code>public final class PasswordAuthentication {\n    private String userName;\n    private char[] password;\n\n    public PasswordAuthentication(String userName, char[] password) {\n        this.userName = userName;\n        this.password = (char[])password.clone();\n    }\n\n    public String getUserName() {\n        return this.userName;\n    }\n\n    public char[] getPassword() {\n        return this.password;\n    }\n}\n</code></pre>\n <p>\n  I wonder if somehow this information could be hidden or if I'm doing something wrong. Also jd-gui is a very poor string search editor.\n </p>\n <p>\n  How should I proceed, in your opinion?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "250",
    "tags": [
        "disassembly",
        "apk",
        "jar"
    ],
    "user": "Mr Ciccio",
    "time": "Sep 28, 2023 at 12:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are two possibilities:\n </p>\n <h1>\n  Decompiler can fail\n </h1>\n <p>\n  The used decompiler is wrong or fails to decode certain classes. Community driven decompilers like dex2jar aren't perfect decompilers, they often fail or create incorrect output. Therefore in case of problems it is always a good idea to use more than one decompiler and compare the results.\n </p>\n <p>\n  For example I would use\n  <a href=\"https://github.com/skylot/jadx\" rel=\"nofollow noreferrer\">\n   Jadx-Gui\n  </a>\n  as a second decompiler. It also decompiles whole APK files to Java code and has an integrated full-text search engine for code and XML resources.\n </p>\n <p>\n  And as a third decompiler I would recommend\n  <a href=\"https://apktool.org/\" rel=\"nofollow noreferrer\">\n   Apktool\n  </a>\n  . It does decompile to Smali instead of Java code so the generated code is more like assembler, however if you are just searching for where a certain class is referenced apktool + grep or a similar search tool can be very helpful. Note that class names in Smali are not written as\n  <code>\n   com.example.packagename.Classname\n  </code>\n  but as\n  <code>\n   Lcom/example/packagename/Classname;\n  </code>\n  . My recommendation is to search for both variants, the first may capture usages via dynamic class loading, the second via static class references.\n </p>\n <h1>\n  Apps developed using other languages than Java/Kotlin\n </h1>\n <p>\n  Another possibility is that the decompiled APK file is not a pure Java/Kotlin (thus DEX)  code APK file. Nowadays there are quite a few alternative languages and compiler systems which can build APK files. Those generated APK files will still contain some DEX code files, but other parts are implemented in different languages common decompiler like dex2jar and Jadx-Gui can not decompile. From within this alternative code resources it is possible to instantiate classes present in the DEX files.\n </p>\n <ul>\n  <li>\n   Native .so files containing armv7/armv8a/x86/x86_64 code (-> use e.g. Ghidra or IDA Pro,.. to decompile).\n  </li>\n  <li>\n   React-Native allows to develop Android Applications using JavaScript that is in the end packed into some special byte code and interpreted using a JS-Runtime\n  </li>\n  <li>\n   Xamarin allows to develop Android apps using .Net/Mono code (C#, F#..). Usually you will see some .dll files inside the APK or a file named\n   <code>\n    assemblies.blob\n   </code>\n   .\n  </li>\n  <li>\n   Flutter ...\n  </li>\n  <li>\n   ...\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Robert",
            "time": "Sep 29, 2023 at 12:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}