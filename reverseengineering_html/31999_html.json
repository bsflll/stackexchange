{
    "title": "How to debug armel and armhf binaries on x86-64 Ubuntu simultaneously?",
    "link": "https://reverseengineering.stackexchange.com/questions/31999/how-to-debug-armel-and-armhf-binaries-on-x86-64-ubuntu-simultaneously",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on the challenges on\n  <a href=\"https://ropemporium.com/\" rel=\"nofollow noreferrer\">\n   ROP Emporium\n  </a>\n  . For the ARMv5 version of the\n  <a href=\"https://ropemporium.com/challenge/callme.html\" rel=\"nofollow noreferrer\">\n   callme\n  </a>\n  challenge, we are given two binaries and two shared libraries:\n  <code>\n   callme_armv5\n  </code>\n  with\n  <code>\n   libcallme_armv5.so\n  </code>\n  and\n  <code>\n   callme_armv5-hf\n  </code>\n  with\n  <code>\n   libcallme_armv5-hf.so\n  </code>\n  . The first pair appears to be using the armel EABI, while the second pair is using the armhf EABI.\n </p>\n <p>\n  In\n  <a href=\"https://ropemporium.com/guide.html#Appendix%20B\" rel=\"nofollow noreferrer\">\n   Appendix B\n  </a>\n  of ROP Emporium's Beginner's Guide, they show how to set up an environment for cross-platform debugging for ARM like so:\n </p>\n <pre><code>$ sudo apt install qemu-user libc6-armel-cross gdb-multiarch\n$ sudo mkdir /etc/qemu-binfmt\n$ sudo ln -s /usr/arm-linux-gnueabi /etc/qemu-binfmt/arm\n</code></pre>\n <p>\n  That works great for armel, but it doesn't work for armhf. So I found this\n  <a href=\"https://reverseengineering.stackexchange.com/a/8917/43351\">\n   post\n  </a>\n  , showing how to set up an environment for cross-platform debugging of armhf binaries.\n </p>\n <pre><code>$ sudo apt install qemu-user libc6-armhf-cross gdb-multiarch\n$ sudo mkdir /etc/qemu-binfmt\n$ sudo ln -s /usr/arm-linux-gnueabihf /etc/qemu-binfmt/arm\n</code></pre>\n <p>\n  This works fine for armhf, but not for armel ...\n </p>\n <pre><code>$ qemu-arm ./callme_armv5-hf  # Okay\n...\n$ qemu-arm ./callme_armv5     # FAIL\n./callme_armv5: error while loading shared libraries: libcallme_armv5.so: cannot open shared object file: No such file or directory\n</code></pre>\n <p>\n  The problem is that both setups create the same symlink, but to different directories, so I can debug armel and armhf binaries individually, but each time I want to switch, I have to change the symlink. Is there some way to set up an environment so I can debug both binaries simultaneously?\n </p>\n <p>\n  In case it's relevant, I'm running Ubuntu 20.04 under WSL2.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "131",
    "tags": [
        "debugging",
        "arm",
        "qemu"
    ],
    "user": "jinscoe123",
    "time": "Jun 25, 2023 at 22:59",
    "comments": [],
    "answers_data": []
}