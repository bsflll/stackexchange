{
    "title": "Extracting a firmware image via U-Boot",
    "link": "https://reverseengineering.stackexchange.com/questions/6300/extracting-a-firmware-image-via-u-boot",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a inexpensive Chinese IP-Camera that runs a linux (busybox, to be precise) off a 8-MB SPI flash IC.\n </p>\n <p>\n  I'm trying to get access to the device.\n </p>\n <p>\n  It has a hardware serial port, and I've gotten access to it, but the linux terminal appears to be disabled or simply turned off. Basically, I get the \"loading linux kernel\" message, and then the serial port becomes unresponsive.\n </p>\n <p>\n  Is there any way to\n  <em>\n   retrieve\n  </em>\n  the firmware image on a device using U-Boot?\n </p>\n <p>\n  U-Boot log:\n </p>\n <pre><code>U-Boot 2010.06-svn (Jun 16 2014 - 09:36:52)\n\nDRAM:  256 MiB\nCheck spi flash controller v350... Found\nSpi(cs1) ID: 0xC2 0x20 0x17 0xC2 0x20 0x17\nSpi(cs1): Block:64KB Chip:8MB Name:\"MX25L6406E\"\nenvcrc 0x5878e4b2\nENV_SIZE = 0xfffc\nIn:    serial\nOut:   serial\nErr:   serial\nPress Ctrl+C to stop autoboot\nCFG_BOOT_ADDR:0x58040000\n8192 KiB hi_sfc at 0:0 is now current device\n\n### boot load complete: 1884992 bytes loaded to 0x82000000\n### SAVE TO 80008000 !\n## Booting kernel from Legacy Image at 82000000 ...\n   Image Name:   linux\n   Image Type:   ARM Linux Kernel Image (uncompressed)\n   Data Size:    1884928 Bytes = 1.8 MiB\n   Load Address: 80008000\n   Entry Point:  80008000\n\n\nload=0x80008000,_bss_end=80829580,image_end=801d4300,boot_sp=807c71d8\n   Loading Kernel Image ... OK\nOK\n\nStarting kernel ...\n\nUncompressing Linux... done, booting the kernel.\n</code></pre>\n <p>\n  And the u-boot environment:\n </p>\n <pre><code>hisilicon # printenv\nbootcmd=fload;bootm 0x82000000\nbaudrate=115200\nbootfile=\"uImage\"\nda=mw.b 0x82000000 ff 1000000;tftp 0x82000000 u-boot.bin.img;sf probe 0;flwrite\ndu=mw.b 0x82000000 ff 1000000;tftp 0x82000000 user-x.cramfs.img;sf probe 0;flwrite\ndr=mw.b 0x82000000 ff 1000000;tftp 0x82000000 romfs-x.cramfs.img;sf probe 0;flwrite\ndw=mw.b 0x82000000 ff 1000000;tftp 0x82000000 web-x.cramfs.img;sf probe 0;flwrite\ndc=mw.b 0x82000000 ff 1000000;tftp 0x82000000 custom-x.cramfs.img;sf probe 0;flwrite\nup=mw.b 0x82000000 ff 1000000;tftp 0x82000000 update.img;sf probe 0;flwrite\nua=mw.b 0x82000000 ff 1000000;tftp 0x82000000 upall_verify.img;sf probe 0;flwrite\ntk=mw.b 0x82000000 ff 1000000;tftp 0x82000000 uImage; bootm 0x82000000\ndd=mw.b 0x82000000 ff 1000000;tftp 0x82000000 mtd-x.jffs2.img;sf probe 0;flwrite\nipaddr=192.168.1.10\nserverip=192.168.1.107\nnetmask=255.255.255.0\nethaddr=00:12:12:4b:6b:b6\nHWID=8043420004048425\nob_start=0\nob_data=7b\nappSystemLanguage=SimpChinese\nappVideoStandard=PAL\nbootdelay=5\nbootargs=mem=40M console=ttyAMA1,115200 console=ttyAMA0,115200 root=/dev/mtdblock1 rootfstype=cramfs mtdparts=hi_sfc:256K(boot),3520K(romfs),2560K(user),1280K(web),256K(custom),320K(mtd)\nstdin=serial\nstdout=serial\nstderr=serial\nverify=n\nver=U-Boot 2010.06-svn (Jun 16 2014 - 09:36:52)\n\nEnvironment size: 1272/65532 bytes\n</code></pre>\n <p>\n  U-Boot help prompt (I think you can build u-boot with optional modules. This shows what's built into this instance of u-boot?):\n </p>\n <pre><code>hisilicon # help\n?       - alias for 'help'\nbase    - print or set address offset\nboot    - boot default, i.e., run 'bootcmd'\nbootd   - boot default, i.e., run 'bootcmd'\nbootm   - boot application image from memory\nbootp   - boot image via network using BOOTP/TFTP protocol\ncmp     - memory compare\ncp      - memory copy\ncrc32   - checksum calculation\nfload   - fload  - load binary file from a filesystem image for system boot\n\nflwrite - SPI flash sub-system\ngetinfo - print hardware information\ngo      - start application at address 'addr'\nhelp    - print command description/usage\nlip     - lip      - set local ip address but not save to flash\n\nloadb   - load binary file over serial line (kermit mode)\nloady   - load binary file over serial line (ymodem mode)\nloop    - infinite loop on address range\nmac     - mac      - set mac address and save to flash\n\nmd      - memory display\nmii     - MII utility commands\nmm      - memory modify (auto-incrementing address)\nmtest   - simple RAM read/write test\nmw      - memory write (fill)\nnm      - memory modify (constant address)\nping    - send ICMP ECHO_REQUEST to network host\nprintenv- print environment variables\nrarpboot- boot image via network using RARP/TFTP protocol\nreset   - Perform RESET of the CPU\nrun     - run commands in an environment variable\nsaveenv - save environment variables to persistent storage\nsetenv  - set environment variables\nsf      - SPI flash sub-system\nsip     - sip      - set server ip address but not save to flash\n\ntftp    - tftp  - download or upload image via network using TFTP protocol\nversion - print monitor version\n</code></pre>\n <p>\n  Note that the consoles specified in the\n  <code>\n   bootargs\n  </code>\n  variable are from my experimentation. I've tried both\n  <code>\n   ttyAMA0\n  </code>\n  ,\n  <code>\n   ttyAMA1\n  </code>\n  ,\n  <code>\n   tty0\n  </code>\n  , and lots of other similar variables.\n </p>\n <p>\n  The processor is a HiSilicon Hi3518, which is a ARM SoC.\n </p>\n <p>\n  Right now, the only thing I can think of is to hot-air the flash IC off the board and dump it that way, but that's a lot of work, and I'd rather see if there is a software option first.\n </p>\n</div>\n</body></html>",
    "votes": "14",
    "answers": 3,
    "views": "42k",
    "tags": [
        "hardware",
        "firmware"
    ],
    "user": "Fake Name",
    "time": "Sep 24, 2014 at 9:15",
    "comments": [
        {
            "user": "devttys0",
            "text": "<html><body><span class=\"comment-copy\">\n Desoldering is usually not necessary:\n <a href=\"http://www.digikey.com/product-detail/en/5250/501-1311-ND/745102\" rel=\"nofollow noreferrer\">\n  digikey.com/product-detail/en/5250/501-1311-ND/745102\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user11964",
            "text": "<html><body><span class=\"comment-copy\">\n Author of this topic tell - you have this camera work? In reality, the Kernel is loaded, you can log in to the web interface of the camera?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user12712",
            "text": "<html><body><span class=\"comment-copy\">\n Any success on that business yet? :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user12917",
            "text": "<html><body><span class=\"comment-copy\">\n I can confirm that user2177319's approach works. I extracted romfs for my IP camera\n <a href=\"https://dl.dropboxusercontent.com/u/74153172/romfs.cramfs\" rel=\"nofollow noreferrer\">\n  here\n </a>\n . What's not obvious to me is the location for the CGI scripts that serve the web / management interfaces over HTTP. I guess Linux must boot and then mount some more files from Flash?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The way\n  <a href=\"http://igorsk.blogspot.be/2007/12/hacking-kindle-part-2-bootloader-and.html\" rel=\"noreferrer\">\n   I did it on the Kindle\n  </a>\n  was to load the flash partitions into memory and then using memory dump commands to dump them in hex format (and then some Python script to convert hex back to binary). It was kinda slow but did achieve the goal.\n </p>\n <p>\n  Your U-Boot does not seem to have the\n  <code>\n   bbm\n  </code>\n  command but\n  <code>\n   fload - load binary file from a filesystem image for system boot\n  </code>\n  and\n  <code>\n   sf - SPI flash sub-system\n  </code>\n  sounds promising, I'd suggest exploring them. You may also be able to use\n  <code>\n   tftp\n  </code>\n  to send the images over the network and not have to dump them using the console.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Sep 24, 2014 at 10:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Fake Name",
                    "text": "<span class=\"comment-copy\">I'd be ok with either, really. How do you determine where the flash partition even is?</span>",
                    "time": null
                },
                {
                    "user": "Fake Name",
                    "text": "<span class=\"comment-copy\">Ok, issuing a empty <code>fload</code> command appears to have loaded the kernel into RAM. <code>### boot load complete: 1884992 bytes loaded to 0x82000000</code>, and the kernel is specified as <code>1884928</code> in the boot messages.</span>",
                    "time": null
                },
                {
                    "user": "Fake Name",
                    "text": "<span class=\"comment-copy\">And <code>fload</code> does not appear to accept parameters. No matter what I pass it, it just loads the kernel.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">What about <code>sf</code>?</span>",
                    "time": null
                },
                {
                    "user": "Fake Name",
                    "text": "<span class=\"comment-copy\">AFICT, <code>sf</code> just mounts the SPI flash. The only verb I can find is <code>sf probe</code>, which seems to test for the presence of a device and/or make it available: <code>hisilicon # sf probe 0</code> <code>8192 KiB hi_sfc at 0:0 is now current device</code> Unfortunately, there seems to be no help, so if it accepts other verbs, I don't know how to discover them.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use\n  <code>\n   sf read\n  </code>\n  and it works pretty good.  It can be called as follows\n </p>\n <pre><code>sf read [addr] [offset] [len]\n</code></pre>\n <p>\n  So for your case, reading romfs would look like this:\n </p>\n <pre><code>sf probe 0; sf read 0x82000000 0x40000 0x370000\n</code></pre>\n <p>\n  Then you can transfer the file to tftp server:\n </p>\n <pre><code>tftp 0x82000000 romfs.cramfs 0x370000\n</code></pre>\n <p>\n  You can also use\n  <code>\n   sf\n  </code>\n  to write to the SPI flash (more info can be found\n  <a href=\"http://felipe.astroza.cl/hacking-hi3518-based-ip-camera/\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "perror",
            "time": "Feb 3, 2020 at 10:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Lexx Luxx",
                    "text": "<span class=\"comment-copy\">I am wondering, is this <i>actually working</i>? Which U-Boot version? tftp in u-boot is one way transfer to upload files into memory. If you mean Busybox, then which vers? Busybox tftp have no such command syntax.</span>",
                    "time": null
                },
                {
                    "user": "ogurets",
                    "text": "<span class=\"comment-copy\">It does! Version \"U-Boot 2010.06 (Jan 05 2015 - 15:46:28)\", I've just dumped 128M NAND flash from the device using this answer.</span>",
                    "time": null
                },
                {
                    "user": "Serge",
                    "text": "<span class=\"comment-copy\">@triwo <code>tftp</code> <code>u-boot</code> command is bi-directional: if you specify an address and a file name then it downloads the file from <code>tftp</code> server. if you additionally specify length then it uploads the file to a <code>tftp</code> server</span>",
                    "time": null
                },
                {
                    "user": "Lexx Luxx",
                    "text": "<span class=\"comment-copy\">@Serge This depends on u-boot implementation on a particular device. In all CPE modems and routers I used, u-boot supported only one-way file transfer, from external tftp into device memory.</span>",
                    "time": null
                },
                {
                    "user": "Serge",
                    "text": "<span class=\"comment-copy\">@triwo of course it does: you could customise/remove any part of <code>u-boot</code>'s UI. I meant the base version as it comes with SDK for hi35xx for quite a while</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you are really lucky, you might be able to create a Linux initramfs image from another system (e.g. OpenWrt) if you can find one that supports the chipset, or enough of the chipset, that will boot over TFTP or\n  <code>\n   ymodem\n  </code>\n  to get you a serial console.\n </p>\n <p>\n  There seems to be some kind of support for\n  <code>\n   hisilicon\n  </code>\n  in (\n  <a href=\"http://www.gossamer-threads.com/lists/linux/kernel/1958531\" rel=\"nofollow noreferrer\">\n   or coming to\n  </a>\n  ) the kernel, so you may also be able to spin up a buildroot image.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Feb 5, 2020 at 9:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}