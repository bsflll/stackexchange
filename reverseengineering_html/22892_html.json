{
    "title": "Static analysis obfuscated code",
    "link": "https://reverseengineering.stackexchange.com/questions/22892/static-analysis-obfuscated-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing a code that is heavily obfuscated. It uses opaque predicates, call stack tampering, junk code and control flow flattering.\nCall stack tampering uses indirect branches (push register / retn) calculated with complex operations at runtime.\nIt seems near impossible to reverse engineer. \nWhat would be the correct way to deal with code that uses many obfuscation techniques?\nI know some people use dynamic symbolic execution but I want to know if there are other ways to deal with this.\nHere is an example of one obfuscated function hex-ray output:\n  <a href=\"https://i.sstatic.net/RKfuO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"\" src=\"https://i.sstatic.net/RKfuO.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "obfuscation",
        "deobfuscation"
    ],
    "user": "Francisco Linan",
    "time": "Jan 2, 2020 at 22:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Usually, I try to detect which obfuscator has been used. Knowing your enemy is the first step towards the victory. If you can detect the obfuscator, you may be lucky and find the corresponding \"deobfuscator\". You won't have the original source, but you'll significantly decrease the entropy and the noise.\n </p>\n <p>\n  A good starting point is to look at how the strings are handled. Every obfuscator has its own way to do that, and it could be a clear indicator.\n </p>\n <p>\n  Another place I usually look for is the binary initialization: each obfuscator bootstraps it's own helper functions in a different way.\n </p>\n <p>\n  When I am unlucky, I tend to rely on symbolic execution combined with dynamic analysis via ollydbg and radare2.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Yennefer",
            "time": "Jan 4, 2020 at 22:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To add on too Yennefer's wonderful and respectable answer:\n </p>\n <p>\n  Going through the\n  <em>\n   <a href=\"https://www.geeksforgeeks.org/memory-layout-of-c-program/\" rel=\"nofollow noreferrer\">\n    memory segments\n   </a>\n  </em>\n  can definitely help, a lot of times obfuscators will tamper with those. Giving a possible clue as to what the obfuscator is.\n </p>\n <p>\n  Also look at the\n  <em>\n   imported functions\n  </em>\n  , how do those look? Some obfuscators mess around with the\n  <em>\n   <a href=\"https://en.wikipedia.org/wiki/Portable_Executable#Import_table\" rel=\"nofollow noreferrer\">\n    IAT\n   </a>\n  </em>\n  , and some of the functions inside of the IAT can be tampered with, but \"signature\" code from those functions can be found, which can\n  <em>\n   lead\n  </em>\n  to what the obfuscator is.\n </p>\n <p>\n  <em>\n   Sometimes\n  </em>\n  , there is even pre-built programs lying around the web that can automatically deobfuscate the program for you.\n </p>\n <p>\n  Good luck! :-)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Graham",
            "time": "Jan 5, 2020 at 9:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Francisco Linan",
                    "text": "<span class=\"comment-copy\">I can see some function imports like VirtualQuery, Sleep, ExitProcess. As far as I know the obfuscation and the packer are coded by the owners of the game. Its a dll that unpacks the game. My goal is to understand how it unpacks the game and how it detects cheats, so basically I need to understand every line of assembly and doing that on obfuscated assembly seems near impossible.</span>",
                    "time": null
                },
                {
                    "user": "Graham",
                    "text": "<span class=\"comment-copy\">Well, usually obfuscators are built as a separate executable. Fully reversing an obfuscator is a <i>VERY</i> daunting task, when you don't have access to the obfuscator especially. Normally when people reverse stuff like this they just search for opcode patterns, and how it compares to whats in IDA disassembly, then make conclusions about the obfuscator from there.</span>",
                    "time": null
                },
                {
                    "user": "Yennefer",
                    "text": "<span class=\"comment-copy\">Usually, games in particular are protected as last step by using an in-process stub, or, if you when used in platforms, by an extrernal library. However cheat detection is usually part of the game itself, therefore you have to go through two rather different paths.</span>",
                    "time": null
                }
            ]
        }
    ]
}