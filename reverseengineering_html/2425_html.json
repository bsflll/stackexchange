{
    "title": "How to get virus body of Polymorphic Malware",
    "link": "https://reverseengineering.stackexchange.com/questions/2425/how-to-get-virus-body-of-polymorphic-malware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to decrypt polymorphic malware and want to get actual virus body which is going to do infection. I tried to decrypt virut.ce (this is one polymorphic malware) in ollyDbg but it is using anti debugging and anti emulation technique and so it is very hard to find virus body.\n </p>\n <p>\n  I am able to get virus body of encrypted virus. But in case of polymorphic virus, decryption routine is morphed and hence it is difficult to obtain virus body.\n </p>\n <p>\n  Can anyone suggest me better approach to get virus body. Or can suggest other simple polymorphic malware which I can debug in OllyDbg. My goal is to get virus body from polymorphic malware.\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 3,
    "views": "1k",
    "tags": [
        "malware"
    ],
    "user": "user1744108",
    "time": "Jul 13, 2013 at 4:50",
    "comments": [
        {
            "user": "Grijesh Chauhan",
            "text": "<html><body><span class=\"comment-copy\">\n If you have IVT enable PC (today's most PCs are) then you can get install\n <a href=\"http://ether.gtisc.gatech.edu/\" rel=\"nofollow noreferrer\">\n  Ether\n </a>\n : Malware Analysis via Hardware Virtualization Extensions with Debia-lenny-5 The web also provides Unpacking Service. As I am aware only viruses made for research purpose can bypass Ether tool. I have used this tool in my research work. its awesome\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Grijesh Chauhan",
            "text": "<html><body><span class=\"comment-copy\">\n Did you tried this tool most of your crypt viruses can be decrypt. May I know what is your source of viruses??\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Grijesh Chauhan",
            "text": "<html><body><span class=\"comment-copy\">\n Because your question is also related to Security you could post your question at\n <a href=\"http://security.stackexchange.com/questions/tagged/malware?sort=votes&pagesize=15\">\n  IT-Security:tag:Malware\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1744108",
            "text": "<html><body><span class=\"comment-copy\">\n I am taking polymorphic viruses from offensive computing . I took viruses like virut.ce, Bolzano. Now I am trying the tool you mentioned. But as you said only viruses made for research purpose can bypass Ether, I am not sure whether these viruses will be passed. Where can I see the viruses which are used for research purpose or which can pass ether ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Grijesh Chauhan",
            "text": "<html><body><span class=\"comment-copy\">\n Ether is very good tool, it give you a dump for each entry point in\n <b>\n  host\n </b>\n machine. Yes it bit hard to start work with it but it will pay back your time cost. By bypass my means some virus can detect even ether and prevent itself to decrypt. Some virus\n <a href=\"http://www.offensivecomputing.net/?q=blog/4\" rel=\"nofollow noreferrer\">\n  Danny Quist\n </a>\n 's paper about this. --  My data set was consist of (1) real-viruses: licenced data(by a company),  Some viruses I got from\n <a href=\"http://www.cs.sjsu.edu/~stamp/cv/mss.html\" rel=\"nofollow noreferrer\">\n  Mark Stamp\n </a>\n sir (2) I also did tool analysis on synthetic  viruses. Industry peoples know less about this tool\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  Sounds like a fun challenge!\n </h2>\n <p>\n  To get the malware body I'd recommend you use IDA Pro instead of Olly (but it is really your own choice). \nAnyway, first I'd recommend to trace what it does, do this by using a sandbox. Learn how malware detects this and think of a way around this detection mechanism. Read other papers and study how polymorphic and even metamorphic code works. I have always liked the metamorphism paper on OpenRCE\n  <a href=\"http://www.openrce.org/articles/full_view/29\" rel=\"noreferrer\">\n   http://www.openrce.org/articles/full_view/29\n  </a>\n </p>\n <h2>\n  Getting there\n </h2>\n <p>\n  In order to get this going I'd recommend writing a lot of unpacker plugins etc for IDA. See malware as unions. First analyse the first layer, build a plugin to automatically (staticly) unpack it (again IDA) and continue doing this till you get the entire thing to reverse. Remove the (bytepatch) anti-debug techniques and really get to know how this thing functions.\n </p>\n <p>\n  Basicly hard malware is a long tedious process that can not be automated. Making it really fun to analyse them. If you want quicker analyses you can look at TitaniumCore or submit the sample to a VirusExchange site like offensive computing :)\n </p>\n <p>\n  <em>\n   <strong>\n    Have fun and goodluck!\n   </strong>\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Stolas",
            "time": "Jul 8, 2013 at 10:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1744108",
                    "text": "<span class=\"comment-copy\">Thanks for your inputs. Can you suggest which sandbox I can install and use. Because I searched for that and found some sandboxes like Anubis, threattrack. But there I can submit and can not see whats going on.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Well as you need to defeat the anti-emulation techniques in the malware. A 3th party solution is not acceptable as you can't tinker with it's internals.   I'd recommend to do this either by hand or use open source software (Cuckoo box comes to mind as does ZeroWine).</span>",
                    "time": null
                },
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">Great link, do you have the first one orr the author refer to? <code>This paper is a direct descendent of my previous one...</code></span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\"><a href=\"http://www.openrce.org/articles/full_view/27\" rel=\"nofollow noreferrer\">openrce.org/articles/full_view/27</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There isn't an easy way to extract the virus body from a polymorphic virus, because that's the nature of polymorphic malware.  The more recent polymorphic malware also carry, as you see, anti-emulator and anti-debugger tricks.\n </p>\n <p>\n  If you want \"easier\" polymorphic malware, try some of the older ones, like Marburg, HPS, Magistr, Chiton (the \"EfishNC\" one, but the problem is to find the entrypoint), Bagif, Bounds (also has the tricky entrypoint problem - there's a good article about it, it's a linear decryptor but the first instruction that you see is not the first instruction of the decryptor), ...\nThey can be emulated without issue.  However, in the case of Marburg and HPS, the decryptors are very large (and in the case of Bounds,\n  <em>\n   very\n  </em>\n  large).\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "peter ferrie",
            "time": "Jul 7, 2013 at 18:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would hesitate to categorically state that you cannot get the body of a polymorphic virus.  It really does depend on the malware.\n </p>\n <p>\n  Here's an approach that will work in many cases where the malware is encrypted, packed, etc.\n </p>\n <ol>\n  <li>\n   Get the malware on a VM (or otherwise isolated box).\n  </li>\n  <li>\n   Get the malware running.\n  </li>\n  <li>\n   Dump the process memory using a tool like volatility or ProcDump (\n   <a href=\"http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx\" rel=\"nofollow\">\n    http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx\n   </a>\n   )\n  </li>\n </ol>\n <p>\n  You will need to do some analysis to figure out precisely where the code entry point is in that memory dump but once you have it you will have a much easier time pulling it into something like IDA since the malware will most likely have already decrypted itself.\n </p>\n <p>\n  Of course, there are some techniques that involve just in time decryption/encryption while the  malware is running, but these are more unusual to find.  For -these- pieces of malware there is no quick and easy way to extract the decrypted body unless you have the algorithm and key already.\n </p>\n <p>\n  Hope this helps!\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "David Hoelzer",
            "time": "Jul 13, 2013 at 11:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1744108",
                    "text": "<span class=\"comment-copy\">What if I debug malware manually in OllyDbg/IDAPro. Malware should decrypt itself at certain point of time right ? and form there I can take its body. Is it feasible idea ?</span>",
                    "time": null
                },
                {
                    "user": "David Hoelzer",
                    "text": "<span class=\"comment-copy\">Yes and no. This is actually sort of close to what my answer is suggesting.  The trouble is that a fair amount of malware includes anti-re beyond encryption, including techniques to detect or at least react to the presence of a debugger.  This means that while your idea is a good one it will not work in all cases because the malware may not successfully decrypt itself under a debugger.  This is why dumping the process is a more reliable approach though it is more difficult to then analyze the binary.</span>",
                    "time": null
                }
            ]
        }
    ]
}