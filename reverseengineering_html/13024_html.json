{
    "title": "How to locate module_init() offset from ELF header of Linux kernel module?",
    "link": "https://reverseengineering.stackexchange.com/questions/13024/how-to-locate-module-init-offset-from-elf-header-of-linux-kernel-module",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The header is self explanatory but to explain myself better.\nI have an ELF binary - loadable kernel module, compiled with symbols.\nI want to know how to locate the offset of the\n  <code>\n   module_init()\n  </code>\n  function.\n  \n\n  Can I find this info using\n  <em>\n   <code>\n    readelf\n   </code>\n  </em>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "linux",
        "elf",
        "driver",
        "entry-point"
    ],
    "user": "TakashiYamamoto",
    "time": "Dec 12, 2019 at 8:06",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n For example,\n <a href=\"https://lwn.net/Articles/531148/\" rel=\"nofollow noreferrer\">\n  lwn.net/Articles/531148\n </a>\n Also, module_init is not a real function, it's a macro as described in that article.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n @TakashiYamamoto: Tell me if I am wrong, but I always thought that the\n <code>\n  init_module()\n </code>\n function was located at the start of the module address... Have you examples where it is not the case? I am interested to know about!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To read with\n  <em>\n   readelf\n  </em>\n  the parameter is \"-s\":\n </p>\n <pre><code> Options are:\n    -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I\n    -h --file-header       Display the ELF file header\n    -l --program-headers   Display the program headers\n        --segments          An alias for --program-headers\n    -S --section-headers   Display the sections' header\n       --sections          An alias for --section-headers\n    -g --section-groups    Display the section groups\n    -t --section-details   Display the section details\n    -e --headers           Equivalent to: -h -l -S\n    -s --syms              Display the symbol table\n       --symbols           An alias for --syms\n    --dyn-syms             Display the dynamic symbol table\n    -n --notes             Display the core notes (if present)\n</code></pre>\n <p>\n  So, with\n  <em>\n   readelf -s module.ko\n  </em>\n  is enough to read the symbols.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "sinkmanu",
            "time": "Aug 27, 2017 at 11:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First disassemble your module\n </p>\n <pre><code>objdump -xDsl module.ko > disassemble.txt\n</code></pre>\n <p>\n  Then edit the file and search for section init. It look like this:\n </p>\n <p>\n  Disassembly of section\n  <code>\n   .init.text\n  </code>\n  :\n </p>\n <pre><code>002bdb01 <init_module>:\ninit_fct():\n</code></pre>\n</div>\n</body></html>",
            "votes": "-3",
            "user": "0xC0000022L",
            "time": "Dec 17, 2019 at 23:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">This answer looks like it has great potential for improvement. @laurent can I suggest you edit it to elaborate a bit more?</span>",
                    "time": null
                }
            ]
        }
    ]
}