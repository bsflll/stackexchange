{
    "title": "Analyse a statically linked binary and extract syscall from it using angr",
    "link": "https://reverseengineering.stackexchange.com/questions/32526/analyse-a-statically-linked-binary-and-extract-syscall-from-it-using-angr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How to extract all syscalls from analysing a statically linked binary.\nI have a script written using angr(Latest - v9.2.78) but when I start my script I get few syscalls and the analysis is like hung up or like going to recursion and it runs until memory is exhausted and eventually it is killed by OS(Ubuntu 22 LTS).\nMy project is very similar to this\n  <a href=\"https://reverseengineering.stackexchange.com/q/30853/45311\">\n   thread\n  </a>\n </p>\n <p>\n  Any help will be beneficial :)\n </p>\n <p>\n  Thanks in advance\n </p>\n <p>\n  Edit ->\nHere is the script i'm using\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>import angr\nimport logging\n\nlogging.getLogger('angr').setLevel('INFO')\n\ndef syscall_action_builder(fd):\n    def syscall_action_func(state):\n        simproc = state.inspect.simprocedure\n        fd.write(\"{}\n\".format(simproc.display_name))\n    return syscall_action_func\n\nif __name__ == '__main__':\n    FILE_NAME = 'path/to/binary'\n\n    trace_fd = open('syscall.log', 'w')\n\n    proj = angr.Project(FILE_NAME, load_options={'auto_load_libs': True, 'except_missing_libs': True},\n                        use_sim_procedures=False)\n\n    start_state = proj.factory.full_init_state()\n    start_state.inspect.b('syscall', when=angr.BP_AFTER, action = syscall_action_builder(trace_fd))\n\n    simgr = proj.factory.simgr(start_state)\n    simgr.run()\n</code></pre>\n <p>\n  Output of above script\n </p>\n <pre><code>geteuid\ngetuid\ngetegid\ngetgid\narch_prctl\nbrk\nbrk\narch_prctl\nset_tid_address\nset_robust_list\nsys_334\nuname\nuname\nprlimit64\nprlimit64\nreadlink\nreadlink\nreadlink\nreadlink\nreadlink\nreadlink\ngetrandom\ngetrandom\nclock_gettime\nclock_gettime\ngetrandom\ngetrandom\nclock_gettime\nclock_gettime\n</code></pre>\n <p>\n  logging of 'clock_gettime', 'getrandom' continues until memory is exhausted or killed by OS or me.\n </p>\n <p>\n  Script used is from this\n  <a href=\"https://github.com/angr/angr/issues/2603\" rel=\"nofollow noreferrer\">\n   angr's github issue thread\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "176",
    "tags": [
        "binary-analysis",
        "x86",
        "static-analysis",
        "x86-64",
        "angr"
    ],
    "user": "0x4E4F4F42",
    "time": "Nov 30, 2023 at 0:23",
    "comments": [],
    "answers_data": []
}