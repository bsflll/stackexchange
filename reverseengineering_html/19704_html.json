{
    "title": "Find out string encoding/shift of proprietary binary file format",
    "link": "https://reverseengineering.stackexchange.com/questions/19704/find-out-string-encoding-shift-of-proprietary-binary-file-format",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse-engineer a proprietary file format to be able to extract certain strings from files in this format. I have the application, that writes the files, at hand.\n </p>\n <p>\n  By trial-and-error I found out a few characters, however I'm currently clueless what kind of encoding this is or if there exists some kind of shift to obfuscate things.\n </p>\n <p>\n  The alphabet I found out by saving strings with the proprietary application looks like this:\n </p>\n <pre><code>0x3B: 'a'\n0x38: 'b'\n0x39: 'c'\n0x3E: 'd'\n0x3F: 'e'\n0x3C: 'f'\n0x3D: 'g'\n0x32: 'h'\n0x33: 'i'\n0x30: 'j'\n0x31: 'k'\n0x36: 'l'\n0x37: 'm'\n0x34: 'n'\n0x35: 'o'\n0x2A: 'p'\n0x2B: 'q'\n0x28: 'r'\n0x29: 's'\n0x2E: 't'\n0x2F: 'u'\n0x2C: 'v'\n0x2D: 'w'\n0x22: 'x'\n0x23: 'y'\n0x20: 'z'\n</code></pre>\n <p>\n  I tried looking at the shift from the Unicode codepoints. Going from\n  <code>\n   a\n  </code>\n  onwards you get a shift of 38, 42, 42, 38, 38, 42, 42, 54, 54, 58, 58, 54, 54, etc.\n </p>\n <p>\n  Do you see any pattern? Any idea on how to proceed except continuing to complete all characters by manual trial-and-error? Would really like to get some basic hints / other things I could try as this is the first time I am doing this.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "305",
    "tags": [
        "file-format",
        "deobfuscation",
        "encodings",
        "strings"
    ],
    "user": "user1683766",
    "time": "Oct 27, 2018 at 18:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's a simple exclusive-or (^) operation with the byte 0x5A.\n </p>\n <p>\n  With your examples -\n </p>\n <pre><code>'a' 0x61 ^ 0x5A = 0x3B\n'b' 0x62 ^ 0x5A = 0x38\n'z' 0x7A ^ 0x5A = 0x20\n</code></pre>\n <p>\n  Plus some others you should be able to check -\n </p>\n <pre><code>'!' 0x21 ^ 0x5A = 0x7B\n'4' 0x34 ^ 0x5A = 0x6E\n'Q' 0x51 ^ 0x5A = 0x0B\n']' 0x5D ^ 0x5A = 0x07\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Oct 23, 2018 at 22:14",
            "is_accepted": true,
            "comments": []
        }
    ]
}