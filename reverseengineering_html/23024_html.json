{
    "title": "VC 6 C++ Exception handling, nTryBlocks=0, pTryBlockMap=0 , how?why?",
    "link": "https://reverseengineering.stackexchange.com/questions/23024/vc-6-c-exception-handling-ntryblocks-0-ptryblockmap-0-howwhy",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to decompile an old binary (about 20 year old).\n </p>\n <p>\n  The program uses exceptions.\n </p>\n <p>\n  I found some FuncInfo but they do not contain any pTryBlockMap and nTryBlocks is 0.\n </p>\n <p>\n  I've tried many options on the VC6 compiler but I could not get this result.\n </p>\n <p>\n  The stack doesn't look like a regular stack:\n </p>\n <pre><code>...\nSEH handler\nscope table\nTry Level\nsaved EBP\nreturn address\n</code></pre>\n <p>\n  But it looks like:\n </p>\n <pre><code>...\nSEH handler\nTry level\nreturn address\n</code></pre>\n <p>\n  Do you have any idea how to achieve this and why it would have been like that ?\n </p>\n <p>\n  SEH Handler is :\n </p>\n <pre><code>MOV        EAX,DAT_00412c90\nJMP        ___CxxFrameHandler\n</code></pre>\n <p>\n  FuncInfo@00412c90\n </p>\n <pre><code>19930520\n00000005\n00412cb0\n00000000\n00000000\n00000000\n00000000\n00000000\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "163",
    "tags": [
        "decompilation",
        "c++",
        "callstack"
    ],
    "user": "picryott",
    "time": "Jan 16, 2020 at 22:10",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n What is the SEH handler called? Do you have a link to the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "picryott",
            "text": "<html><body><span class=\"comment-copy\">\n @Igor Skochinsky Sorry, I can't provide a link to the binary.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Even when there are no try/catch blocks in a function, the compiler may generate a FunctionInfo structure and register a C++EH handler (such as\n  <code>\n   __CxxFrameHandler\n  </code>\n  ). This is necessary, for example, to destruct automatic (stack-allocated) C++ objects going out of scope, or cleaning up a partially constructed object in a constructor. In such functions there will be no try blocks but you should see non-zero\n  <code>\n   pUnwindMap\n  </code>\n  with pointers to unwind funclets containing calls to destructors of stack objects, i.e. something like:\n </p>\n <pre><code>lea ecx, [ebp-2Ch]\njmp std::string::~string\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jan 16, 2020 at 22:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "picryott",
                    "text": "<span class=\"comment-copy\">That's it. Thank you. And the difference in the stack seems to be an optimization option for the compiler (/Ox).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Actually it was so obvious - I just haven't read the C++ standard and was writing\n  <code>\n   throw()\n  </code>\n  specification thinking it would allow all exceptions - instead it turned out it was the exact opposite.\n </p>\n <p>\n  And yes this\n  <code>\n   throw\n  </code>\n  function specification is what is causing those zero TryBlockMap  with more than one Unwind entries. Here is a VC++ 6.0 (and later) compilable example (view dissasembly of\n  <code>\n   f\n  </code>\n  ):\n </p>\n <pre><code>#include <stdio.h>\n\nstruct B {\n    int a, b;\n};\n\nstruct B1 {\n    B1() {};\n    B1(const B1& tmp) {\n        a1 = tmp.a1;\n        printf(\"B1::B1 copy constr\n\");\n    }\n    ~B1() {\n        printf(\"~B1()\n\");\n    }\n    int a1, b1;\n};\n\nstruct A : B, B1 {\n    int b, c;\n};\n\nstruct A f() throw(int) {\n    struct A tmp;\n    return tmp;\n}\n\nint main() {\n    f();\n}\n</code></pre>\n <p>\n  With two unwind entries. The tricky part in that scenario is that\n  <code>\n   throw\n  </code>\n  specification is not added to the type of the function so even if you have debug symbols (PDB) - you still will have your head banging against the wall.\n </p>\n <p>\n  EDIT: Actually the above example won't work for newer versions of MSVC - if you want to do it there you would need to add a\n  <code>\n   try\n  </code>\n  -\n  <code>\n   catch\n  </code>\n  block encapsulating the\n  <code>\n   f()\n  </code>\n  call.\n </p>\n <p>\n  Also the\n  <code>\n   class A\n  </code>\n  and all of it's parents were a test case for\n  <a href=\"https://reverseengineering.stackexchange.com/questions/24804/what-is-the-mdisp-field-in-rtti-for-throw-used-for\">\n   another question\n  </a>\n  related to the topic of C++ exception if you want to learn more but otherwise I don't think this exact structure is necessary to trigger the generation of FunctionInfo with zero TryBlocks. There just need to be something going on in\n  <code>\n   f\n  </code>\n  I think.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "rec",
            "time": "Apr 25, 2020 at 10:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}