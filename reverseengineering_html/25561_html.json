{
    "title": "Is there any way to get predicted variables using python script?",
    "link": "https://reverseengineering.stackexchange.com/questions/25561/is-there-any-way-to-get-predicted-variables-using-python-script",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a simple program:\n </p>\n <pre><code>#include <stdio.h>\n\nint main()\n{\n  int a;\n  a = func(15, 3);\n  return a;\n}\n\nint func(int i, int j)\n{\n  int b1[5], b2[10];\n\n  b2[i] = 1;\n  printf(\"%d\n\", b1[j]);\n\n  return 0;\n}\n</code></pre>\n <p>\n  I am using python script to get local variables from the stripped binary, compiled using above program.\n </p>\n <p>\n  I use:\n  <code>\n   function.getLocalVariables()\n  </code>\n  or something like\n  <code>\n   function.getStackFrame().getStackVariables()\n  </code>\n  to get the local variables. Interestingly I observed that, this script doesn't give me all the variables which can be seen in the decompiler window. For e.g., in the above case, I get following in the decompiled window (for function\n  <code>\n   func\n  </code>\n  ):\n </p>\n <p>\n  <img alt=\"image\" src=\"https://user-images.githubusercontent.com/17796905/88557533-f0a99380-cfef-11ea-9dfa-f2bd4e870266.png\"/>\n </p>\n <p>\n  Here, the predicted buffers can be seen. But instead I get:\n </p>\n <pre><code>FUN_004004d6\narray(ghidra.program.model.listing.Variable, [[undefined4 local_5c@Stack[-0x5c]:4], [undefined4 local_60@Stack[-0x60]:4]])\n</code></pre>\n <p>\n  which are clearly not the predicted buffers. Is there any way to get those buffers?\n </p>\n <p>\n  Note: I also posted the same on ghidra github's forum.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "521",
    "tags": [
        "ghidra"
    ],
    "user": "R4444",
    "time": "Jul 27, 2020 at 15:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In case anyone wondering, I posted this question on ghidra github as well and @cetfor posted a very good way to do this. You can find that question\n  <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/2143\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  I tried to reproduce it and I was able to do this successfully.\n </p>\n <blockquote>\n  <pre><code>from ghidra.app.decompiler import DecompileOptions\nfrom ghidra.app.decompiler import DecompInterface\n\nifc = DecompInterface()\nifc.setOptions(DecompileOptions())\nifc.openProgram(currentProgram)\n\nfor function in functions:\n    res = ifc.decompileFunction(function, 60, monitor)\n    high_func = res.getHighFunction()\n    lsm = high_func.getLocalSymbolMap()\n    symbols = lsm.getSymbols()\n\n    for i, symbol in enumerate(symbols):\n      print(\"Symbol {}: {} (size: {})\".format(i+1, symbol.getName(), symbol.size))\n</code></pre>\n </blockquote>\n <p>\n  Check out\n  <a href=\"https://ghidra.re/ghidra_docs/api/ghidra/program/model/pcode/HighFunction.html\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  endpoint for more information on highfunction. Note that I found differences in variables given by this decompiler interface and listing. Also, I couldn't find any api endpoint which gives address references by these variables (something like\n  <code>\n   getReferencesTo\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "R4444",
            "time": "Aug 3, 2020 at 21:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BoRRis",
                    "text": "<span class=\"comment-copy\">I am still not getting the meaning of getHighFunction(). What is the use of this basically?</span>",
                    "time": null
                }
            ]
        }
    ]
}