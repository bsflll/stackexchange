{
    "title": "Memory modified at jump far",
    "link": "https://reverseengineering.stackexchange.com/questions/22987/memory-modified-at-jump-far",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Observing a trace of Wow64 switching on Windows 7, the following situation makes me confused\n </p>\n <pre><code>...\n0x77491dbe  64 ff 15 c0 00 00 00  call fs:[0xc0]          ; syswow64\ntdll.dll\n0x74632320  ea 1e 27 63 74 33 00  jmp far 0x33:0x7463271e ; system32\\wow64cpu.dll\n0x7463271e  67 44 8b 04 24        mov r8d, [esp]          ; system32\\wow64cpu.dll\n...\n</code></pre>\n <p>\n  The first instruction is something similar with\n  <a href=\"http://blog.rewolf.pl/blog/?p=102\" rel=\"nofollow noreferrer\">\n   X86SwitchTo64BitMode\n  </a>\n  , the second one is a switch back to 64-bit mode. So\n  <code>\n   wow64cpu.dll\n  </code>\n  has been actually mapped into two different code segments:\n  <code>\n   cs = 23\n  </code>\n  for compat mode (second instruction) and\n  <code>\n   cs = 33\n  </code>\n  for 64-bit mode (third instruction).\n </p>\n <p>\n  However I cannot find the second instruction (\n  <code>\n   jmp far...\n  </code>\n  ) in the corresponding dll. There are\n  <code>\n   ea 1e 27 b6 78...\n  </code>\n  at\n  <code>\n   0x74632320\n  </code>\n  , not\n  <code>\n   ea 1e 27 64...\n  </code>\n  as being observed in the trace.\n </p>\n <p>\n  Was\n  <code>\n   wow64cpu.dll\n  </code>\n  modified when being mapped into the memory?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "138",
    "tags": [
        "windows",
        "x86",
        "x86-64",
        "tracing"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Jan 13, 2020 at 16:10",
    "comments": [],
    "answers_data": []
}