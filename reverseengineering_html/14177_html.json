{
    "title": "Memory dump analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/14177/memory-dump-analysis",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to learn firmware analysis. The device I chosen was my Motorola SBG901 modem. I managed to dump the memory contents via JTAG using the FlashcatUSB adapter. The memory dump is about 8MB in size. Now this is where I am lost I'm trying to analyze the dump. But I don't know where to start. I have used binwalk on it which I believe brought back false positives as the output was as follow:\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n67434         0x1076A         Certificate in DER format (x509 v3), header length: 4, sequence length: 803\n68243         0x10A93         Certificate in DER format (x509 v3), header length: 4, sequence length: 1024\n70361         0x112D9         Certificate in DER format (x509 v3), header length: 4, sequence length: 808\n71175         0x11607         Certificate in DER format (x509 v3), header length: 4, sequence length: 988\n81036         0x13C8C         Certificate in DER format (x509 v3), header length: 4, sequence length: 866\n81908         0x13FF4         Certificate in DER format (x509 v3), header length: 4, sequence length: 983\n82897         0x143D1         Certificate in DER format (x509 v3), header length: 4, sequence length: 864\n89278         0x15CBE         Certificate in DER format (x509 v3), header length: 4, sequence length: 803\n90087         0x15FE7         Certificate in DER format (x509 v3), header length: 4, sequence length: 1024\n92205         0x1682D         Certificate in DER format (x509 v3), header length: 4, sequence length: 808\n93019         0x16B5B         Certificate in DER format (x509 v3), header length: 4, sequence length: 988\n102880        0x191E0         Certificate in DER format (x509 v3), header length: 4, sequence length: 866\n103752        0x19548         Certificate in DER format (x509 v3), header length: 4, sequence length: 983\n104741        0x19925         Certificate in DER format (x509 v3), header length: 4, sequence length: 864\n111122        0x1B212         Certificate in DER format (x509 v3), header length: 4, sequence length: 803\n111931        0x1B53B         Certificate in DER format (x509 v3), header length: 4, sequence length: 1024\n114049        0x1BD81         Certificate in DER format (x509 v3), header length: 4, sequence length: 808\n114863        0x1C0AF         Certificate in DER format (x509 v3), header length: 4, sequence length: 988\n124724        0x1E734         Certificate in DER format (x509 v3), header length: 4, sequence length: 866\n125596        0x1EA9C         Certificate in DER format (x509 v3), header length: 4, sequence length: 983\n126585        0x1EE79         Certificate in DER format (x509 v3), header length: 4, sequence length: 864\n</code></pre>\n <p>\n  I believe binwalk gave false postive output as the dump probably isn't a packed image. I say this because I also ran strings on the dump and received a lot of readable strings a snippet is shown below:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/lWkFJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Out from running strings on dump\" src=\"https://i.sstatic.net/lWkFJ.png\"/>\n  </a>\n </p>\n <p>\n  I'm tryring to extract the firmware so I can use QEMU and try to do some vulnerability findings. I'm doing this for knowledge sake but I am inexperience with reading dump files. Can someone point me in the direction that would teach me how to decipher the memory dump and eventually extract the firmware. I really want to learn how to read the dump because I plan to analyze other firmwares hence I want to learn the essentials. For instance I know that there are firmwares that are packed/unpacked and/or encrypted/unencrypted. They usually consist of bootloaders, OS, filesystem, libraries, and apps (such as webserver). Can some point me in the direction of some useful resource that will teach me how to read dump and determine how to get the firmware out with all right files (filesystem, bootloader, apps, etc...)?\n </p>\n <p>\n  Thanks in advance\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "firmware",
        "memory-dump"
    ],
    "user": "user1803784",
    "time": "Dec 15, 2016 at 5:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   I believe binwalk gave false postive output\n  </p>\n </blockquote>\n <p>\n  It is likely the output is not false positive. You can see the strings used in certificates.\n </p>\n <blockquote>\n  <p>\n   For instance I know that there are firmwares that are packed/unpacked and/or encrypted/unencrypted\n  </p>\n </blockquote>\n <p>\n  This is the direction you would want to check. Binwalk has an entropy analysis option, and it can display a graph of it. Encrypted or packed files will have high and uniform entropy.\n </p>\n <blockquote>\n  <p>\n   I'm tryring to extract the firmware so I can use QEMU and try to do some vulnerability findings.\n  </p>\n </blockquote>\n <p>\n  While the CPU architecture might be well-known, device like this will likely have a custom SoC with little to none available documentation. I don't think you will be to do a complete emulation of the device, so static analysis can be a preferred option.\n </p>\n <blockquote>\n  <p>\n   Can someone point me in the direction\n  </p>\n </blockquote>\n <p>\n  If you really have JTAG access, you can try dumping RAM, since it may contain unpacked/decrypted code. However, I suspect this is in fact a dump of SPI flash chip. Actual JTAG access may have been disabled by manufacturer.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Vladislav Ivanov",
            "time": "Dec 16, 2016 at 10:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">Yea I guess its not false positive after all. I also have used the binwalk -E position to produce an entropy graph. An it mainly had two high entropy points. It seems to be encryption or LZMA compression. I am currently reading on finding out which it is (<a href=\"http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\" rel=\"nofollow noreferrer\">devttys0.com/2013/06/…</a>). I just don't know where to start to get into firmware analysis so I chosen to just try my hand at extracting a firmware from a dump. I know its a long journey but its what grab my interest. Thanks</span>",
                    "time": null
                },
                {
                    "user": "Vladislav Ivanov",
                    "text": "<span class=\"comment-copy\">The thing about entropy graph is how uniform it is — if it's all flat with high entropy, there is likely encryption or compression present.</span>",
                    "time": null
                },
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">You were right from the start it is a dump of the flash. Its not the packed firmware. Thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you only want the firmware, you can find it in this\n  <a href=\"http://sourceforge.net/projects/sbg901.arris/\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  .\nAnd this\n  <a href=\"https://wikidevi.com/wiki/Motorola_SURFboard_SBG901\" rel=\"nofollow noreferrer\">\n   link\n  </a>\n  might be of use. Apparently the chip on your box is a BCM3361, a MIPS32 according to Broadcom. I think you can emulate it with QEMU, no obvious issues there.\n </p>\n <p>\n  Your dump is more likely to be a mix of code and data. It's pretty hard to dissociate data from code; you'll have to go in with a substantial entropy analysis (data and code entropy are very different). You can check the different Binwalk options\n  <a href=\"https://github.com/devttys0/binwalk/wiki/Usage\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  , the explanations are pretty clear.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "yaspr",
            "time": "Jun 2, 2017 at 21:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">Thanks the files you gave me are very helpful. I haven't gotten a chance to actually try he emulation though. My main goal is just to learn how to identify the data from the dump and extract firmware files if possible. I can use the firmware file you gave me to look for vulnerabilities. But my main goal is to learn how to start from scratch with firmware analysis. I think I will just analyze the firmware in the tutorials I have found was trying to use my own .bin file. But I am learning so I shouldn't make it so difficult. Thanks again</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Well, now that you got the firmware and you can run it on an emulator, you can study its memory mapping (data &amp; instructions) : where is it stored and what is stored. In case you don't wanna use the firmware, you'll have to analyze the format using all available format reversing tools and techniques : intuition.</span>",
                    "time": null
                },
                {
                    "user": "user1803784",
                    "text": "<span class=\"comment-copy\">The link to the firmware is no longer available by chance do you have another one I just learned how to emulate firmware with firmadyne I want to try out this firmware if possible.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Check the link again!</span>",
                    "time": null
                }
            ]
        }
    ]
}