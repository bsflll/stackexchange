{
    "title": "Tracing function call args with IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/9029/tracing-function-call-args-with-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Right now I'm trying to place a trace point and hook it with the Python code that pulls all relevant stuff from the stack. Unfortunately it just gives me the garbage all the time, because the value in cpu.esp is being updated\n  <strong>\n   after\n  </strong>\n  this code is getting executed, while I need it to happen before.\n </p>\n <pre><code>class TraceRegisters(DBG_Hooks):\n    def dbg_bpt(self, tid, ea):\n        fn = GetFunctionName(ea)\n        if fn.startswith(\"Read\"):\n            print \"%s(0x%x)\" % (fn, Dword(cpu.esp+4))\n        elif fn.startswith(\"Write\"):\n            print \"%s(0x%x, 0x%x)\" % (fn, Dword(cpu.esp+4), Dword(cpu.esp+8))\n        return 0\n</code></pre>\n <p>\n  I'm feeling sorry for doing it in a callback that is intended for deciding if the debugger should stop, but I just couldn't find anything better.\n </p>\n <p>\n  Is there a way to do what I want with just the power of IDAPython and/or plain IDA?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "functions"
    ],
    "user": "vdudouyt",
    "time": "May 30, 2015 at 11:40",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n If the instruction where you place your trace point is a\n <code>\n  call\n </code>\n , just subtract 4 from each of your\n <code>\n  esp\n </code>\n offsets, since the\n <code>\n  call\n </code>\n will subtract 4 from\n <code>\n  esp\n </code>\n . Likewise, if your trace point is on a\n <code>\n  ret\n </code>\n , add 4 to each offset. And if it's anything else, put your trace point at the next instruction.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "vdudouyt",
            "text": "<html><body><span class=\"comment-copy\">\n The problem is that the value contained in cpu.esp is absolutely garbage. That's because this callback runs before IDA pro actually breaks, while I'd love it to run after.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "vdudouyt",
            "text": "<html><body><span class=\"comment-copy\">\n By the way, I managed to overcome this problem by attaching this callback to a hotkey in debugger. So that it stops on a breakpoint first, then I press F12, and then it logs this message and continues forward. And - voila! - it's working fine. The only problem is that now I have to tap this hotkey like crazy.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n I'm\n <b>\n  very\n </b>\n astonished to read that the CPU registers doesn't seem to be updated when the breakpoint condition runs. This is against all my experience, and\n <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1407.shtml\" rel=\"nofollow noreferrer\">\n  Hex-Rays explicitly mentions evaluating register variables in a breakpoint condition\n </a>\n . Maybe it's a python problem, did you try idc directly? What happens if you print cpu.esp in your function, then compare it with what IDA shows in the breakpoint? Oh, and\n <i>\n  maybe\n </i>\n you need to call RefreshDebuggerMemory if the memory configuration has changed.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "javs",
            "text": "<html><body><span class=\"comment-copy\">\n Had the exact same problem, RefreshDebuggerMemory at the top of the callback does indeed resolve the issue.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}