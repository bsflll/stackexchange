{
    "title": "Can a Windows process check if it has been injected by another process?",
    "link": "https://reverseengineering.stackexchange.com/questions/3487/can-a-windows-process-check-if-it-has-been-injected-by-another-process",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are many tutorials which show how to detect injected code into process memory. However, this generally requires using a debugger.\n </p>\n <p>\n  Is it possible for a process to somehow detect if it has been injected by another process using winapi? If so, how?\n </p>\n <p>\n  More specifically, are there any \"fixed/likely\" characteristics of injected code? For instance, from\n  <a href=\"https://reverseengineering.stackexchange.com/questions/3482/does-code-injected-into-process-memory-always-belong-to-a-page-with-rwx-access\">\n   this question\n  </a>\n  it appears that injected code can be characterized by always appearing in pages that have the following protection flags set: PAGE_READWRITE_EXECUTE, PAGE_EXECUTE_READ, PAGE_EXECUTE_WRITECOPY and possibly (but unlikely) PAGE_EXECUTE. Can you point out other characteristics of injected code?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "4k",
    "tags": [
        "windows",
        "memory",
        "winapi"
    ],
    "user": "Benny",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n What if the injected code resets the page protection to something less suspicious?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L could you please give me an example of something less suspicious?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Injected code could represented by, but not limited to:\n </p>\n <p>\n  <strong>\n   Remotely created thread\n  </strong>\n  could be detected by several techniques:\n </p>\n <ol>\n  <li>\n   Periodically check if process threads were created by current process using\n   <code>\n    NtQueryProcessInformation\n   </code>\n   .\n  </li>\n  <li>\n   <p>\n    For each thread check if it is running from the address space of the original executable and not from some orphaned memory page:\n   </p>\n   <ol start=\"3\">\n    <li>\n     <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684283%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">\n      <code>\n       NtQueryInformationThread\n      </code>\n     </a>\n    </li>\n    <li>\n     Set second parameter to\n     <code>\n      ThreadQuerySetWin32StartAddress\n     </code>\n    </li>\n    <li>\n     <code>\n      GetModuleInformation\n     </code>\n     - check if the thread starting address is in the range of each of the loaded modules and those modules are legit (by known list/by path).\n    </li>\n    <li>\n     Check\n     <a href=\"https://stackoverflow.com/questions/10887866/how-to-retrieve-start-address-of-a-thread-using-its-id\">\n      here\n     </a>\n     too.\n    </li>\n   </ol>\n  </li>\n  <li>\n   <p>\n    Monitor thread creating API inside current process and also check if the creating PID belong to current process -\n    <code>\n     NtQueryProcessInformation\n    </code>\n    ,\n    <code>\n     CreateToolhelp32Snapshot\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   Monitor memory protection APIs (\n   <code>\n    VirtualProtect\n   </code>\n   ) to detect if someone tries to modify your code and then check if that \"someone\" belongs to legit process address space.\n  </li>\n  <li>\n   By keeping the list of legit loaded modules, one also can check if each thread in process belong to address space of a legit module from the list.\n  </li>\n  <li>\n   Monitor\n   <code>\n    LoadLibrary\n   </code>\n   for a chance someone trying to load unknown module into your process.\n  </li>\n </ol>\n <p>\n  <strong>\n   Injected code without thread\n  </strong>\n </p>\n <ol start=\"10\">\n  <li>\n   <p>\n    Check the integrity of your process - look for hot patching of various APIs, depends on the process. Injected code could be triggered by some patch inside current process.\n   </p>\n  </li>\n  <li>\n   <p>\n    Monitor APC creating API\n    <a href=\"http://www.cs.miami.edu/~burt/journal/NT/processinit.html\" rel=\"nofollow noreferrer\">\n     (\n     <code>\n      KiUserApcDispatcher\n     </code>\n     )\n    </a>\n    if the target code belongs to current process. OS's APC also could be filtered out.\n   </p>\n  </li>\n </ol>\n <p>\n  There are other ways to inject code, even before the legit process will start to run and place its protections - using combination of\n  <code>\n   WriteProcessMemory\n  </code>\n  /\n  <code>\n   GetThreadContext\n  </code>\n  /\n  <code>\n   SetThreadContext\n  </code>\n  which theoretically could bypass all your implemented protections. When your code and injected one are only running in the same ring (user mode), it all goes down to who is gaining control first. Look for\n  <a href=\"http://resources.infosecinstitute.com/code-injection-techniques/\" rel=\"nofollow noreferrer\">\n   code cave method\n  </a>\n  and think for example when malcode is injected into explorer.exe and you are starting your program :-).\n </p>\n <p>\n  Of cause, you can load your driver into kernel, which will give you more solid control over the code injection to your process and a good protection, but that of cause depends on the skills and what you are trying to protect.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. I'm far from being an expert in winapi, therefore, I would really appreciate if you could please add some API keywords, which I can search for, in each of the items of your enumerations from above. For instance, in the second item you mentioned checking for orphaned memory pages. How is that done using winapi?</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">in the enumeration above, you say \"Monitor ... API ...\" for several winapi functions. Do you mean monitoring by hooking those APIs for all running processes, or some other way?</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">You can monitor those APIs inside your own process, no need to span on all system.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  One way that a process can detect the presence of injected threads is by the use of Thread Local Storage.  When a thread is injected, the host's Thread Local Storage callbacks will be called unless the injector takes care to disable that.  If the callbacks are called, then the host can query the start address of the new thread and determine if it is within the host's defined code region (which only the host would know)  See the Thread Local Storage section in my \"Ultimate\" Anti-Debugging Tricks paper (\n  <a href=\"http://pferrie.host22.com/papers/antidebug.pdf\">\n   http://pferrie.host22.com/papers/antidebug.pdf\n  </a>\n  ) for an example of that.\n </p>\n <p>\n  While this does not detect everything (some malware use cavities within the host's existing code section in order to perform the injection), it will certainly catch some things.\n </p>\n <p>\n  However, the short answer to your question is actually \"no\".  There isn't a way for a process to \"know\" in\n  <em>\n   all\n  </em>\n  cases that something has been injected.  It is \"yes\" for most cases, but not all of them.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "peter ferrie",
            "time": "Jan 20, 2014 at 4:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">+1 for referring to the awesome Ultiate Anti-Debugging Tricks Paper :)</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for the adding this additional was of checking for code injection</span>",
                    "time": null
                }
            ]
        }
    ]
}