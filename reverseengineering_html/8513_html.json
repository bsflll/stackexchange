{
    "title": "How can i reverse engineer and patch a USB driver to recognize similar hardware?",
    "link": "https://reverseengineering.stackexchange.com/questions/8513/how-can-i-reverse-engineer-and-patch-a-usb-driver-to-recognize-similar-hardware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I used to have a Logitech G700 mouse that used a wireless proprietary usb receiver. I was using the Logitech setpoint software to customize the mouse's acceleration, macros, and other things. The mouse started double clicking and I had to get a replacement from Logitech but they only the G700s (the G700 was discontinued) so they sent me that mouse. The problem is that the G700s does not work with the setpoint software despite being almost the same as the G700.\n </p>\n <p>\n  Instead, it uses the Logitech Gaming Software which is terrible and lacks many options that are found in the setpoint software. So I want to be able to use my G700s with the setpoint software. I've tried changing the vendor id and product id in regedit but it has no effect and it resets every time the mouse is restarted.\n </p>\n <p>\n  There's no file that contains a list of compatible devices that can be edited. I think the list of compatible devices is written directly into the software. I opened the setpoint.exe file in IDA Pro and searched for the string G700 and found a line that had it. It was in unicode. How can I edit this line or block of lines to work with the G700s?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "assembly",
        "ollydbg"
    ],
    "user": "chroncile",
    "time": "Mar 22, 2015 at 7:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Use a hex editor. There are many of them, my favourite is\n  <a href=\"http://www.wxhexeditor.org/\" rel=\"nofollow\">\n   wxHexEditor\n  </a>\n  .\n </p>\n <p>\n  However, there's at least 3 reasons why this may not work:\n </p>\n <ul>\n  <li>\n   The string\n   <code>\n    G700s\n   </code>\n   is one byte longer than\n   <code>\n    G700\n   </code>\n   , so you might not have enough space. If there is a list of more than one mouse model, you might be able to rename one of them to\n   <code>\n    G700s\n   </code>\n   , and the following one to a one-letter name.\n  </li>\n  <li>\n   The software will probably get the device id over the USB bus, check it against a list of IDs, and use the string for user output only. You'll have to find and change this list, not the output string. Search for repeated occurances of\n   <code>\n    6d\n   </code>\n   <code>\n    04\n   </code>\n   (Logitech's USB id, byte reversed since the processor is little endian) in your software.\n  </li>\n  <li>\n   The G700s might use a different protocol on the USB bus (probably not for normal mouse interaction, but for macros and similar things), so the setpoint software just won't be able to use any of the advanced features of the mouse.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Mar 22, 2015 at 7:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    <strong>\n     USB devices are recognized by VID/PID instead of strings\n    </strong>\n   </p>\n   <p>\n    that string you found there is most likely only to print to screen purposes so try to find\n    <strong>\n     VID PID\n    </strong>\n    identification of old mouse and replace by new one. The\n    <strong>\n     VID\n    </strong>\n    will be most likely the same and\n    <strong>\n     PID\n    </strong>\n    is usually just an increment.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     if your mouse start double/miss clicking/glitching\n    </strong>\n   </p>\n   <p>\n    then may be it is just wrong micro-switch. If you replace it (way much simpler them changing software) then it should work as new (of coarse if you still have the old mouse and no other bug is there).\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     if nothing helps and the protocol is compatible\n    </strong>\n   </p>\n   <p>\n    then you could make\n    <strong>\n     USB-USB\n    </strong>\n    bridge. Make\n    <strong>\n     USB\n    </strong>\n    device with\n    <strong>\n     VID PID\n    </strong>\n    and info strings of old mouse on\n    <strong>\n     PC\n    </strong>\n    side (\n    <strong>\n     USB\n    </strong>\n    client) and\n    <strong>\n     USB\n    </strong>\n    host on the other to which you will connect the real mouse. The bridge should just forwarding packets between new mouse and PC. That will cause a small delay of the mouse but should work.\n   </p>\n   <p>\n    You will need some\n    <strong>\n     MCU\n    </strong>\n    with 2\n    <strong>\n     USB\n    </strong>\n    's (and\n    <strong>\n     USB\n    </strong>\n    host capability) or network 2\n    <strong>\n     MCU\n    </strong>\n    's with single\n    <strong>\n     USB\n    </strong>\n    by other connection like\n    <strong>\n     RS232,SPI\n    </strong>\n    or whatever. My favorites are\n    <strong>\n     ATMEL UC3\n    </strong>\n    chips but there are many other out there too\n   </p>\n  </li>\n </ol>\n <p>\n  <strong>\n   [Notes]\n  </strong>\n </p>\n <p>\n  taken from:\n  <a href=\"http://www.linux-usb.org/usb.ids\" rel=\"nofollow noreferrer\">\n   USB VID/PID list\n  </a>\n </p>\n <pre><code>VID = 046D [hex] ... Logitech\nPID = C06B [hex] ... G700 Wireless Gaming Mouse\n</code></pre>\n <p>\n  look in device manager for the\n  <strong>\n   VID/PID\n  </strong>\n  of the new mouse or inside its driver\n  <code>\n   inf\n  </code>\n  file ...\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Spektre",
            "time": "Nov 11, 2017 at 10:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "chroncile",
                    "text": "<span class=\"comment-copy\">Here's what I've done: <a href=\"http://www.reddit.com/r/HowToHack/comments/2zsb8q/how_to_trick_logitech_setpoint_into_thinking_my/\" rel=\"nofollow noreferrer\">reddit.com/r/HowToHack/comments/2zsb8q/â€¦</a>  I've changed the PID in the nfo file and it didn't work. The setpoint software seems to detect the mouse directly, and without looking at the drivers installed. I still have the old mouse, but the double clicking issue is hardware related, not software. How do I make a USB-USB bridge?</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@chroncile I would first  check out the (Hardware) micro switches on old mouse it is the fastest &amp; easiest  approach they are located directly under the buttons cover they should distinctly click if the spring plate is deformed or broken then it creates glitches (multiple clicks per one push or noise and no click in the end of life of it similar to how light switch will end) it is usually 3 pins part so it is easy to change it. I usually canibalise old mouses for these they are mostly interchangeable. if you do not have spare micro switch then change the bad one with middle button</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@chroncile middle is not used that much ... and you will see if the bad button works again to check if it is really just an micro switch or something else. If not then it could be bad capacitors or in worse  case bad IC. Nowdays mostly SMD parts are used and they do not last that much but I do not encourage you to change them find someone with experience or you can permanently damage the PCB if you do not know what you doing.</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">The bridge is last possibility (it is a lot of work) you will need to create computer based on some MCU with input and output USB (one is HOST) if you do not have experience then try to buy some easy cheap development kit and nest 2 of them together (if only one USB present). The MCU;must support USB your mouse is using I bet USB 2.0 FS or HS. sadly there are not that many MCU;s usable for this with are suited for home made devices. After very long research few years back We decided to use Atmel UC3XX chips because they have USB HS (almost no other chip have it) have enough RAM and is in TQFP</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@chroncile so they can be welded to PCB without expensive robotics. Then you will need to write OS for both chips one will serve as USB Host for mouse and second will serve as USB client for PC. you need to interconnect them by some connection (like serial port do not be confused serial link on MCUs can operate even on 30MHz unlike 115200Hz limit on PC,or use any other interface) then just forwars the packets between PC an mouse ... only thing that will change is the USB id. Set the USB for PC as VID PID of old mouse and VID PID of host USB to any</span>",
                    "time": null
                }
            ]
        }
    ]
}