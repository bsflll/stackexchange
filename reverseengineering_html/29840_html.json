{
    "title": "Will \"Reset decompiler information\"+\"All caches\" invalidate functions marked as decompiled?",
    "link": "https://reverseengineering.stackexchange.com/questions/29840/will-reset-decompiler-informationall-caches-invalidate-functions-marked-as",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In his answer to a question, Rolf pointed me to the\n  <kbd>\n   Edit\n  </kbd>\n  ->\n  <kbd>\n   Other\n  </kbd>\n  ->\n  <kbd>\n   Reset decompiler information\n  </kbd>\n  functionality, suggesting that \"All caches\" will force the decompiler to pick up\n  <em>\n   immediately\n  </em>\n  on changes I made to the disassembly.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/s2eYZ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Reset decompiler information dialog\" src=\"https://i.sstatic.net/s2eYZ.png\"/>\n  </a>\n </p>\n <p>\n  This sounds like a sensible idea. However, he cautions that the resetting will also mean that the decompiler has more work to do on subsequent decompilations. Makes sense.\n </p>\n <p>\n  <strong>\n   Now the question I have is:\n  </strong>\n  when I use the\n  <kbd>\n   Mark as decompiled\n  </kbd>\n  menu item on the pseudo code and only\n  <em>\n   then\n  </em>\n  use the\n  <kbd>\n   Reset decompiler information\n  </kbd>\n  functionality, will the functions marked decompiled be exempt from the clearing of caches?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ARCry.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Mark as decompiled menu item\" src=\"https://i.sstatic.net/ARCry.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "401",
    "tags": [
        "hexrays"
    ],
    "user": "0xC0000022L",
    "time": "Jan 10, 2022 at 14:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  They are not exempt from the caches being cleared; marking something as decompiled simply changes the color of the function in the\n  <code>\n   func_t\n  </code>\n  , and does not affect the caches in any way. However, this is not a big deal. The \"caches\" referred to by that menu item simply mean the saved\n  <code>\n   cfunc_t\n  </code>\n  and\n  <code>\n   mba_t\n  </code>\n  data structures for that function, which Hex-Rays uses to accelerate subsequent decompilations of functions you've already looked at. You won't lose any annotations (names, comments, types, having marked a function as decompiled, etc.) by clearing the caches. I clear the caches multiple times a day on databases that are important to me; don't worry about losing your work. If you're really paranoid, save your database or create a snapshot first before giving it a try; you'll see that you don't lose any of your work.\n </p>\n <p>\n  The only negative effect is the slowdown on re-decompiling unrelated functions that you otherwise have no interest in clearing the cache entries for. If you don't like that slowdown, an IDAPython one-liner\n  <code>\n   ida_hexrays.mark_cfunc_dirty(funcEa)\n  </code>\n  will clear the\n  <code>\n   cfunc_t\n  </code>\n  cache entry for the function at address\n  <code>\n   funcEa\n  </code>\n  (though I'm not sure if it will also purge the\n  <code>\n   mba_t\n  </code>\n  cache entry, which is likely necessary to trigger the changes stemming from the disassembly listing).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Jan 10, 2022 at 19:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}