{
    "title": "Generating function signatures based on source code WITHOUT compiling",
    "link": "https://reverseengineering.stackexchange.com/questions/9031/generating-function-signatures-based-on-source-code-without-compiling",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently exploring some binaries in IDA aided by source code for some of the functions.\nSome functions are easily found using strings, while others are less easily found.\n </p>\n <p>\n  I don't have access to the compiler due to various reasons. Meaning I can't use the obvious solution of compiling the source and creating signatures with something like IDB2PAT or rizzo.\n </p>\n <p>\n  How can I create function signatures from the sources without compiling?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Eli K",
    "time": "May 30, 2015 at 18:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Creating signature files for IDA is a 2-step process:\n </p>\n <ol>\n  <li>\n   Create a PAT file\n  </li>\n  <li>\n   Compile the PAT file to a SIG file\n  </li>\n </ol>\n <p>\n  The tools that come with IDA's\n  <a href=\"https://www.hex-rays.com/products/ida/support/ida/flair68.zip\" rel=\"nofollow\">\n   FLAIR toolset\n  </a>\n  allow you to automatically generate PAT files for OMF, COFF, ELF, PSX, and Trimedia libraries. The toolset also includes the PAT-to-SIG compiler.\n </p>\n <p>\n  Even though you don't have the library binaries (and thus can't automatically generate the PAT files), given the fact that the PAT file format is documented in the\n  <a href=\"https://www.hex-rays.com/products/ida/support/ida/flair68.zip\" rel=\"nofollow\">\n   FLAIR toolset\n  </a>\n  's pat.txt file, you can write your own tool to generate a PAT file or even create the PAT file manually (and then compile it to create your signatures file).\n </p>\n <p>\n  However, since the patterns are based on the compiled bytes, you'd still need a binary form of the library code, so you'd still might as well use IDB2PAT or IDB2SIG. In other words, if you can't compile the source code and can't (or don't want to) identify the library functions in your IDB, then you're not going to be able to create traditional IDA signature files for that library code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "May 30, 2015 at 20:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">(Note that you need to be a licensed IDA user in order to have the credentials to download the FLAIR toolset linked above.)</span>",
                    "time": null
                },
                {
                    "user": "Eli K",
                    "text": "<span class=\"comment-copy\">The PAT file relies on the first 32 bytes of the function and several other features. As you already said it requires knowledge of the compiled bytes (and specific compiler flags for optimization btw) so your solution is not really a solution to my problem. using IDB2PAT will require manually identifying hundreds of functions. I'm looking for an automated process.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I didn't promise a solution to your problem; I answered the question you asked. <b>Q:</b> \"How can I create function signatures from the sources without compiling?\" <b>A:</b> \"if you can't compile the source code and can't (or don't want to) identify the library functions in your IDB, then you're not going to be able to create traditional IDA signature files for that library code.\"</span>",
                    "time": null
                }
            ]
        }
    ]
}