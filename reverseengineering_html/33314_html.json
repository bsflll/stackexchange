{
    "title": "How to merge or manage builtin data types in Ghidra with GDTs?",
    "link": "https://reverseengineering.stackexchange.com/questions/33314/how-to-merge-or-manage-builtin-data-types-in-ghidra-with-gdts",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to understand how Ghidra's GDTs are supposed to be used, particularly the case of builtin data types.\n </p>\n <p>\n  When I create a data type library in\n  <strong>\n   Data Type Manager\n  </strong>\n  (->\n  <strong>\n   Create File Archive\n  </strong>\n  ) and import function prototypes to it from a binary with debug information—testing with\n  <code>\n   libm.so.6\n  </code>\n  —that library gets copies of the builtin data types like\n  <strong>\n   bool\n  </strong>\n  ,\n  <strong>\n   float\n  </strong>\n  ,\n  <strong>\n   int16\n  </strong>\n  etc. in addition to the ones specific to the binary:\n </p>\n <pre><code>├── BuiltinTypes\n│   ├── double\n│   ├── float\n├── test_library\n│   ├── _CAPTURED_FROM_libm.so.6\n│   │   ├── __acosf: float __stdcall __acosf(float __x)\n│   │   ├── ...\n│   ├── double\n│   ├── float\n</code></pre>\n <p>\n  When I use these libraries to import signatures into programs without full debug symbols, the function definitions often end up containing types like\n  <strong>\n   float.conflict\n  </strong>\n  . I assume this happens because of the multiple copies of\n  <strong>\n   float\n  </strong>\n  .\n </p>\n <p>\n  Now, I think I can be fairly sure that all my\n  <strong>\n   float\n  </strong>\n  s are the same float, which makes me think I would want to make all floats always refer to\n  <strong>\n   BuiltinTypes::float\n  </strong>\n  .\n </p>\n <p>\n  Here my first attempt was to right click\n  <strong>\n   test_library::float\n  </strong>\n  , select\n  <strong>\n   Replace...\n  </strong>\n  and replace it with the\n  <strong>\n   float\n  </strong>\n  in\n  <strong>\n   BuiltinTypes\n  </strong>\n  . Unfortunately, doing that changes the\n  <strong>\n   __acosf\n  </strong>\n  prototype from\n </p>\n <p>\n  <code>\n   float __stdcall __acosf(float __x)\n  </code>\n </p>\n <p>\n  to\n </p>\n <p>\n  <code>\n   undefined __stdcall __acosf(undefined __x)\n  </code>\n </p>\n <p>\n  , which obviously defeats the purpose.\n </p>\n <p>\n  <strong>\n   Questions:\n  </strong>\n </p>\n <ol>\n  <li>\n   Is the intended way of using this to have duplicates of the standard data types in the GDT libraries?\n  </li>\n  <li>\n   If the answer to (1) is \"yes\", should I just ignore the\n   <strong>\n    .conflict\n   </strong>\n   renames? Or get rid of them some other way? How?\n  </li>\n  <li>\n   If the answer to (1) is \"no\", how should I get the function prototypes imported so that the types refer to the builtin types?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "43",
    "tags": [
        "ghidra",
        "symbols"
    ],
    "user": "Sami Liedes",
    "time": "Nov 21, 2024 at 17:28",
    "comments": [],
    "answers_data": []
}