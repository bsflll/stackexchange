{
    "title": "How to check proprietary firmware for GPL violation",
    "link": "https://reverseengineering.stackexchange.com/questions/17001/how-to-check-proprietary-firmware-for-gpl-violation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a proprietary binary (firmware), and I'd like to check whether it contains opensource components. I'm thinking about extracting what it contains - probably binaries - and use\n  <code>\n   strings\n  </code>\n  ,\n  <code>\n   grep\n  </code>\n  and a couple of automated github/bitbucket/etc. searches to identify potential GPL violations.\n </p>\n <p>\n  I know this approach is very limited, that's why I'm looking for advices and/or existing tools that could be relevant?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "215",
    "tags": [
        "firmware",
        "binary"
    ],
    "user": "sho6eeX6",
    "time": "Dec 19, 2017 at 7:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Use\n  <a href=\"https://github.com/ReFirmLabs/binwalk\" rel=\"nofollow noreferrer\">\n   binwalk\n  </a>\n  .\n </p>\n <blockquote>\n  <p>\n   The ability to analyze a firmware image and extract data from it is extremely useful. It can allow you to analyze an embedded device for bugs, vulnerabilities, or GPL violations without ever having access to the device. (\n   <a href=\"http://www.devttys0.com/2011/05/reverse-engineering-firmware-linksys-wag120n/\" rel=\"nofollow noreferrer\">\n    http://www.devttys0.com/2011/05/reverse-engineering-firmware-linksys-wag120n/\n   </a>\n   )\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "3",
            "user": "julian",
            "time": "Dec 19, 2017 at 16:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}