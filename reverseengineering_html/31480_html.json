{
    "title": "Check if libc.so use tcache",
    "link": "https://reverseengineering.stackexchange.com/questions/31480/check-if-libc-so-use-tcache",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have ARM libc.so (GLIBC), How can I check if that libc.so used tcache, and what is the value of\n  <code>\n   arena_max\n  </code>\n  ?\n </p>\n <p>\n  Can I check that information offline?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "189",
    "tags": [
        "c",
        "linux",
        "libraries",
        "heap"
    ],
    "user": "Kokomelom",
    "time": "Jan 27, 2023 at 14:36",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Does the libc have symbols? Is it part of a standard package?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Kokomelom",
            "text": "<html><body><span class=\"comment-copy\">\n @sudhackar no. There is no symbols in that libc. I got that libc from device that I research\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can check if the libc.so uses tcache and determine the value of arena_max by using a reverse engineering tool such as gdb. The following steps can be used to check for tcache:\n </p>\n <ul>\n  <li>\n   <p>\n    Launch gdb:\n    <code>\n     gdb -q libc.so\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    Load symbols:\n    <code>\n     set environment LD_PRELOAD=\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    Run the following commands in gdb:\n   </p>\n  </li>\n </ul>\n <pre><code>  break main\n\n  run\n\n  p ((struct malloc_state*)main_arena)->tcache_bins\n</code></pre>\n <p>\n  To determine the value of arena_max, use the following command in gdb:\n </p>\n <pre><code>p ((struct malloc_state*)main_arena)->top\n</code></pre>\n <p>\n  This will give you the address of the current top of the main arena, which you can use to determine its size. Keep in mind that these commands are for GLIBC, and the exact values and structure of the main arena may differ for different implementations of the libc.\n </p>\n <p>\n  Note: The above steps are contingent on the presence of debugging symbols in the target libc.so. In the absence of these symbols, alternative reverse engineering methods, such as BA, may be required to establish the usage of tcache and determine the value of arena_max.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rohit Gupta",
            "time": "Feb 5, 2023 at 0:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}