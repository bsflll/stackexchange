{
    "title": "How ret know where eip is saved?",
    "link": "https://reverseengineering.stackexchange.com/questions/14411/how-ret-know-where-eip-is-saved",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm learning assembly and I have one question.\nExample:\n </p>\n <pre><code>int main()\n{\n    foo(a);\n}\n\nint foo (x)\n{\n    return 0;\n}\n</code></pre>\n <p>\n  when the\n  <code>\n   foo\n  </code>\n  function returns to\n  <code>\n   main\n  </code>\n  the\n  <code>\n   ret\n  </code>\n  instruction is executed. How does the\n  <code>\n   ret\n  </code>\n  instruction knows where the pushed\n  <code>\n   EIP\n  </code>\n  register is saved?\n </p>\n <p>\n  I know that before the\n  <code>\n   foo\n  </code>\n  function is called the\n  <code>\n   EIP\n  </code>\n  is pushed to the stack, but when\n  <code>\n   ret\n  </code>\n  in\n  <code>\n   foo\n  </code>\n  is executed, what the\n  <code>\n   ret\n  </code>\n  really does?\n </p>\n <p>\n  Thanks for your help\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "ciccio",
    "time": "Jan 15, 2017 at 18:49",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n That is all over the Intel manuals. Short answer (those manuals are quite long): there is only\n <i>\n  one\n </i>\n place where such a value is stored, the\n <b>\n  stack\n </b>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://www.felixcloutier.com/x86/ret\" rel=\"nofollow noreferrer\">\n  felixcloutier.com/x86/ret\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   ret\n  </code>\n  instruction actually performs quite a simple task.\n </p>\n <p>\n  It is composed of two operations in the CPU:\n </p>\n <ol>\n  <li>\n   It pops the topmost value off the stack.\n  </li>\n  <li>\n   It sets the\n   <code>\n    eip\n   </code>\n   register to that popped value.\n  </li>\n </ol>\n <p>\n  Therefore, the\n  <code>\n   ret\n  </code>\n  instruction never really \"knows\" or \"finds out\" where the previous\n  <code>\n   eip\n  </code>\n  value is stored.\n  <code>\n   ret\n  </code>\n  just assumes the topmost stack variable\n  <em>\n   is\n  </em>\n  the previous\n  <code>\n   eip\n  </code>\n  .\n </p>\n <p>\n  It is the responsibility for the developer (or, more commonly now - the compiler) to make sure that assumption is met whenever a\n  <code>\n   ret\n  </code>\n  instruction is executed by the CPU.\n </p>\n <p>\n  Making sure that assumption is valid is one of what some might say is the worst constraint enforced on the stack, and the reason why every function must make sure it leaves the stack in the same state it entered it.\n </p>\n <p>\n  It also makes some assembly tricks (such as hooking) a bit more complex, but I won't go into that here.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Feb 23, 2020 at 9:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}