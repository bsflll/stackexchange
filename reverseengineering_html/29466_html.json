{
    "title": "libuv - spoofing user-agent problem",
    "link": "https://reverseengineering.stackexchange.com/questions/29466/libuv-spoofing-user-agent-problem",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Im trying to give an app \"second life\" (gamedev \"banned\" User-Agent of this tool to avoid requests from it).\nThis app is using websocket to get real-time result and then use this result in a GET request.\n </p>\n <p>\n  Where is header data stored in libuv (what function is using header data - more specified)?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "97",
    "tags": [
        "c++"
    ],
    "user": "CospriMalice",
    "time": "Oct 27, 2021 at 20:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A quick review of\n  <a href=\"https://github.com/libuv/libuv\" rel=\"nofollow noreferrer\">\n   libuv\n  </a>\n  , if that's the one you are referring to, does not show any HTTP functionality. So you may be looking in the wrong place for header information. My suggestion is to recover the original string, then\n  <code>\n   grep\n  </code>\n  for it in the binaries you have. Looking at other strings that are also referenced nearby may make it easier to identify the component that uses this string. If you do not know what the string is, at least trying\n  <code>\n   User-Agent\n  </code>\n  itself will lead you to the HTTP library. You can also try\n  <code>\n   Mozilla\n  </code>\n  ,\n  <code>\n   curl\n  </code>\n  , etc. as those are often contained in user agent strings.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "exampl3",
            "time": "Oct 28, 2021 at 13:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "CospriMalice",
                    "text": "<span class=\"comment-copy\">User-Agent is {AppName}/{AppVersion}, it's not hardcoded and I dont know yet how I can find AppName/AppVersion function. About the libuv, when this program failed to connect (for example because of 403 error) it tries to reconnect (and there is \"uv_tcp_connect\" to reconnect - this function is used \"in loop\" per ~5sec). About the Websocket, as far as I remember when the program worked fine the function \"ws2_32 send\" was called, but now it's not.  Thats why I thought libuv is used atleast to \"check if server is available\" then start a websocket and then send GET request.</span>",
                    "time": null
                }
            ]
        }
    ]
}