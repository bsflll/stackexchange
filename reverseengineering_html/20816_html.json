{
    "title": "Is it possible to change a signed byte to an int in compiled assembly code?",
    "link": "https://reverseengineering.stackexchange.com/questions/20816/is-it-possible-to-change-a-signed-byte-to-an-int-in-compiled-assembly-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to mess around with an old game and I want to reposition a UI element.\n </p>\n <p>\n  I found the address of where the x and y position get set (It's set to an X position of 90 and a Y position of 358) but it appears that because the 90 value is less than 128, the compiler optimized the assembly and changed the assembly from a push int (68 ? ? ? ?) to a push signed byte (6a ?).\n </p>\n <p>\n  This means that I'm unable to extend the X position beyond 128.\n </p>\n <p>\n  Is there any way for me to set the X position to something like 1000? I would need to somehow be able to change the assembly code to do a push int instead, correct? Will asm help me achieve that? Or what other methods could I use?\n </p>\n <p>\n  Here's what I'm talking:\n  <a href=\"https://i.sstatic.net/RFyQm.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/RFyQm.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "83",
    "tags": [
        "assembly",
        "patching"
    ],
    "user": "Nikita Buyevich",
    "time": "Mar 7, 2019 at 21:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you mentioned, 0x6a is the instruction\n  <code>\n   push Ib\n  </code>\n  , in this case, the operand is encoded in only one byte and it's signed (i.e. 0x6a 0xff â†’ push -1). You need to promote to the instruction 0x68\n  <code>\n   push Iz\n  </code>\n  which means expand the instruction. Your choice is rather limited. I suggest you try to find some\n  <code>\n   code cave\n  </code>\n  and jump on it to setup the stack as you want.\n </p>\n <p>\n  To do so:\n </p>\n <ul>\n  <li>\n   the first part is to find some free executable space. You might find that at the end of the\n   <code>\n    .text\n   </code>\n   section. Because of the alignment, you'll find some unused space padded with\n   <code>\n    nop\n   </code>\n   .\n  </li>\n  <li>\n   Once you find one, patch these pushes with a\n   <code>\n    jmp\n   </code>\n   to this location.\n  </li>\n  <li>\n   In this free space, you can freely encode your 0x68 pushes.\n  </li>\n  <li>\n   Finally, encode another\n   <code>\n    jmp\n   </code>\n   from this free space to jump back to the initial point.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "wisk",
            "time": "Mar 7, 2019 at 23:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}