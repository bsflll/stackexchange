{
    "title": "Get certain instruction count for multi-architecture binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/22082/get-certain-instruction-count-for-multi-architecture-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to get an ELF binary's total count of\n </p>\n <ol>\n  <li>\n   Function call instruction\n  </li>\n  <li>\n   conditional jump (branch) instruction\n  </li>\n </ol>\n <p>\n  The binary could be any CPU architecture, like x64, ARM, MIPS, Motorola 68K, etc.\n </p>\n <p>\n  It would be best if the disassembly tool can provide an intermediate representation/language.\n </p>\n <p>\n  I found there are several candidate options for that, like IDA Pro, Binary Ninja, Radare2, Capstone, Angr, Bap.\n </p>\n <p>\n  Finally feel Radare2 is a good tool to implement that.\nBut I searched on the Internet, most tutorials show how to investigate specific code pieces for a specific function (e.g., main).\nHow to directly get the whole IR (called ESIL) after disassembly?\n </p>\n <p>\n  Or any suggestions on accomplishing this task?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 3,
    "views": "638",
    "tags": [
        "disassembly",
        "radare2",
        "arm",
        "mips",
        "angr"
    ],
    "user": "I Wonder",
    "time": "Sep 9, 2019 at 7:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can also do this with a Ghidra script:\n </p>\n <ul>\n  <li>\n   <p>\n    Iterate through the instructions with an\n    <code>\n     InstructionIterator\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    Get the instruction's\n    <code>\n     FlowType\n    </code>\n    with\n    <code>\n     getFlowType()\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    Use Ghidra's\n    <code>\n     isCall()\n    </code>\n    and\n    <code>\n     isConditional()\n    </code>\n    <a href=\"https://ghidra.re/ghidra_docs/api/ghidra/program/model/symbol/FlowType.html\" rel=\"nofollow noreferrer\">\n     methods\n    </a>\n   </p>\n  </li>\n </ul>\n <p>\n  Ghidra is free, open-source and this approach works on various architectures.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Shane Reilly",
            "time": "Nov 5, 2020 at 15:52",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can do it using\n  <code>\n   angr\n  </code>\n  and their IL -\n  <code>\n   vex\n  </code>\n  .\n </p>\n <p>\n  The general logic will be:\n </p>\n <ul>\n  <li>\n   Create angr project from the binary.\n  </li>\n  <li>\n   Create angr cfg.\n  </li>\n  <li>\n   Run on all cfg nodes.\n  </li>\n  <li>\n   Get the vex representation of each instruction from the cfg node.\n  </li>\n  <li>\n   On each instruction representation, check its\n   <code>\n    jumpkind\n   </code>\n   . For example\n   <code>\n    'Ijk_Call'\n   </code>\n   is a call, regardless of the CPU architecture.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "0",
            "user": "macro_controller",
            "time": "Sep 10, 2019 at 14:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a really interesting question actually, there's several options and all have issues they need to overcome. I'm not very familiar with ELF (primarily Windows here) but the file format shouldn't make any difference regardless. Static analysis crawling the code section(s), which can be retrieved from the file format, and using a disassembler library such as DiStorm, is enough in many cases. For this you need something smart enough to skip past data in code (i.e embedded jump tables). Symbolic execution is another alternative, but what happens if you have obfuscated control flow branches relying on some dynamic value? Then there's further obfuscation in terms of complete junk being thrown into code which all needs to be skipped. You can also use runtime debugging, which of course has its own flaws, namely limitations on only following branches that have been executed, speed, and evading detection. I would say that in most cases the simplest solution is to write your own static analysis tool or taking advantage of something like IDA scripting. Assuming the majority of your targets are largely unobfuscated, this should be an effective and nearly universal tool (per CPU implementation). If your targets are protected then something like angr is probably more suited to your needs. If you're dealing with virtualization then that's an entirely different question that deserves an answer of its own.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Pickle Rick",
            "time": "Oct 10, 2019 at 23:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "I Wonder",
                    "text": "<span class=\"comment-copy\">What do you mean by <i>targets are protected</i>? Also, is there any way to know the <i>dynamic values</i> if obfuscated?</span>",
                    "time": null
                },
                {
                    "user": "Pickle Rick",
                    "text": "<span class=\"comment-copy\">So what you essentially want is to build a Control Flow Graph (CFG) of the code in a binary. There are really only two ways to do this -- statically or dynamically. Using a static approach (specifically processing all code sections with a disassembler library, skipping data in code, etc.) is both the fastest and simplest to implement. However, if the target is protected (i.e obfuscated, virtualized, etc.) then static analysis will usually completely break because there are so many cases that will break the disassembler.</span>",
                    "time": null
                }
            ]
        }
    ]
}