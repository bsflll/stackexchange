{
    "title": "JEB Community Edition - Difference between Script vs Plugin?",
    "link": "https://reverseengineering.stackexchange.com/questions/32475/jeb-community-edition-difference-between-script-vs-plugin",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've downloaded JEB CE (community edition) and according to the\n  <a href=\"https://www.pnfsoftware.com/jeb/#features-matrix\" rel=\"nofollow noreferrer\">\n   feature matrix\n  </a>\n  , it supports both script and plugin functionality:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Th6bK.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Th6bK.png\"/>\n  </a>\n </p>\n <p>\n  I would like to know if there is any difference in the 2 and any advantage of using one over the other? In version 5.X+, there is a /coreplugins folder which shows plugins written in both Python and Java:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/iCuu7.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/iCuu7.png\"/>\n  </a>\n </p>\n <p>\n  A Java plugin :\n </p>\n <pre><code>import com.pnfsoftware.jeb.core.Version;\nimport com.pnfsoftware.jeb.core.units.code.asm.decompiler.ast.opt.AbstractCOptimizer;\n\n/**\n * A sample gendec AST optimizer plugin.\n * \n * @author Nicolas Falliere\n *\n */\npublic class COptSampleJava extends AbstractCOptimizer {\n\n    public COptSampleJava() {\n        super();\n    }\n\n    @Override\n    public int perform() {\n        logger.debug(\"COptSampleJava: the optimizer is running\");\n        return 0;\n   }\n}\n</code></pre>\n <p>\n  would look identical to the Python version\n </p>\n <pre><code>from com.pnfsoftware.jeb.core.units.code.asm.decompiler.ast.opt import AbstractCOptimizer\n\n'''\nSkeleton for an Java Abstract Syntax Tree (AST) optimizer plugin for gendec, JEB's generic decompiler.\nThis Python plugin is executed during the decompilation pipeline of a method.\n\nHow to use:\n- Drop this file in your JEB's coreplugins/scripts/ sub-directory\n- Make sure to have the setting `.LoadPythonPlugins = true` in your JEB's bin/jeb-engines.cfg file\n\nFor additional information regarding dexdec AST optimizer plugins, refer to:\n- the Manual (www.pnfsoftware.com/jeb/manual)\n- the API documentation: TODO\n'''\nclass COptSamplePython(AbstractCOptimizer):\n  # note: Python script optimizers are singleton instances!\n  # the engine will instantiate and provide a single instance for all decompilation threads\n  # therefore, if you are using object attributes, make sure to provide support for concurrency\n  # (this restriction does not apply to Java script optimizers, as well as full-blown jar optimizers;\n  # each decompilation thread has its own unique instance of such optimizer objects)\n  # for this reason (as well as others), moderately complex AST optimizers should be written in Java\n\n  def __init__(self):\n    self.logger.debug('COptSamplePython: instantiated')\n\n  def perform(self):\n    self.logger.debug('COptSamplePython: executed')\n\n    # if a value >0 is returned, the decompiler will assume that AST is being transformed and this AST optimizer will be called again\n    return 0  # no optimization is performed\n</code></pre>\n <p>\n  Can both languages be used for both plugin and script?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "103",
    "tags": [
        "jeb"
    ],
    "user": "dazzleworth",
    "time": "Nov 6, 2023 at 11:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found the answer\n  <a href=\"https://www.pnfsoftware.com/jeb/manual/dev/introducing-jeb-extensions/#scripts-vs-plugins\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Scripts...\n </p>\n <blockquote>\n  <ul>\n   <li>\n    Implement IScript\n   </li>\n  </ul>\n  <ol>\n   <li>\n    Example: modify some code, navigate somewhere, display some info,\netc.\n   </li>\n  </ol>\n </blockquote>\n <blockquote>\n  <ul>\n   <li>\n    Are called by users to achieve small tasks\n   </li>\n   <li>\n    Must be written in Python (they are run in a Jython VM)\n   </li>\n  </ul>\n  <ol start=\"2\">\n   <li>\n    Ideal for rapid development and prototyping\n   </li>\n  </ol>\n </blockquote>\n <blockquote>\n  <ul>\n   <li>\n    Are executed by JEB on-demand\n   </li>\n  </ul>\n  <ol start=\"3\">\n   <li>\n    In the GUI client, can be executed via the File menu\n   </li>\n  </ol>\n </blockquote>\n <p>\n  Plugins...\n </p>\n <blockquote>\n  <ul>\n   <li>\n    Implement a specialized sub-type of IPlugin\n   </li>\n   <li>\n    Can perform a variety of tasks, from input processing, disassembling, decompiling, adding functionality to other plugins,\nevent-triggered actions, etc.\n   </li>\n   <li>\n    May be compiled as jar; some plugin types may be written as scripts (Java or Python)\n   </li>\n  </ul>\n </blockquote>\n <p>\n  Hope this reference is useful too all who use this software package.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "dazzleworth",
            "time": "Nov 10, 2023 at 9:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}