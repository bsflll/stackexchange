{
    "title": "Any \"simple\" way to disassemble a block of hex for a 80C188?",
    "link": "https://reverseengineering.stackexchange.com/questions/22828/any-simple-way-to-disassemble-a-block-of-hex-for-a-80c188",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have used IDA to disassemble a big EPROM (27020) but there remain a large number of code sections which haven't been disassembled.  Here is a typical one where I have identified the beginning and end (it was probably written in C):\n </p>\n <pre><code>            db  55h      push bp\n            db  8Bh      mov bp, sp\n            db 0ECh\n            db 0A0h\n            db  96h\n            db  11h\n            db 0FEh\n            db 0C0h\n            db 0A2h\n            db  96h\n            db  11h\n            db  3Ch\n            db    3\n            db  75h\n            db    5\n            db 0C6h\n            db    6\n            db  96h\n            db  11h\n            db    0\n            db  8Ah\n            db  1Eh\n            db  96h\n            db  11h\n            db 0B7h\n            db    0\n            db  8Ah\n            db  87h\n            db  2Fh\n            db  13h\n            db  5Dh     pop bp\n            db 0C3h     retn\n</code></pre>\n <p>\n  My question is, is there any easy disassembler I could feed this (or a pure hex version) into which will disassemble for me?  Yes I can do it manually but there are hundreds like this so it would be really impractical and besides, this is only the first step in figuring out this code.  I tried to search but after a few days figured it was time to ask those more knowledgeable than myself.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "207",
    "tags": [
        "disassembly"
    ],
    "user": "Peter Gottlieb",
    "time": "Dec 26, 2019 at 3:19",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n how did you load it into IDA and what CPU type did you use? IDA disassembles this byte sequence just fine (both in metapc and  80286 modes).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Peter Gottlieb",
            "text": "<html><body><span class=\"comment-copy\">\n First I loaded the hex file but that was a mess.  I am more a hardware guy so I just followed the advice of someone who apparently wasn't too sure.  In any case I converted to binary and tried that and got much better results.  The problem is that this is a large (27020) EPROM so there is a very large amount of code, and of course there is a lot of data mixed in along with it.  This means I have to go through IDA somewhat manually to identify what is code and what seems like data.  This is a very long process with this large a file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Peter Gottlieb",
            "text": "<html><body><span class=\"comment-copy\">\n As I have some specific tasks I want to perform, my initial focus is on identifying where in the code the options are set.  I have 2 different versions of code which (so far as I know) only differ by options selected at startup, however, the code has a lot of areas which disagree, so either routines are different or simply rearranged on linking.  Too early to tell.  I have the EPROM in the device and hooked to a logic analyzer so can see the startup and have already identified many of the setup routines from basic (loading interrupt vectors) to more complex (programming the associated FPGA).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can open\n  <code>\n   IDA\n  </code>\n  , go to the beginning of the file, press\n  <code>\n   shift\n  </code>\n  , hold it, scroll to the end of the file - which will result that the whole code is selected, and press 'c' for analysis.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "macro_controller",
            "time": "Dec 26, 2019 at 8:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Since you mentioned hex files, one additional issue you could have hit is difference between 16-bit and 32-bit code. Hex file loader probably defaults to 32-bit while this code seems to be 16-bit. \nEditing segment properties to mark it as 16-bit after loading should give you better results.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Dec 27, 2019 at 8:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Gottlieb",
                    "text": "<span class=\"comment-copy\">Thank you Igor.  Yes, the code is almost certainly 16 bit.</span>",
                    "time": null
                }
            ]
        }
    ]
}