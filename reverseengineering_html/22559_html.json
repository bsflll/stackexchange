{
    "title": "Abusing the strlen output",
    "link": "https://reverseengineering.stackexchange.com/questions/22559/abusing-the-strlen-output",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My question is related to the\n  <code>\n   strlen\n  </code>\n  function from the C and C++.\n </p>\n <p>\n  I am reversing a program, that reads a byte data from allocated memory and sends to the\n  <code>\n   strlen\n  </code>\n  directly. To be completely honest this data is the hash value, so bytes could vary from 00 to FF.\n </p>\n <p>\n  I have found out that I can abuse this function with zero bytes to make\n  <code>\n   strlen\n  </code>\n  outputting less value than it should (as an example the string is 10 bytes long, but\n  <code>\n   strlen\n  </code>\n  output is 6).\n </p>\n <p>\n  Is there any way to abuse the function with any byte data inputted to\n  <code>\n   strlen\n  </code>\n  to output a bigger value(lets say 14)?\n </p>\n <p>\n  Thank you.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "730",
    "tags": [
        "disassembly",
        "c++",
        "c",
        "exploit",
        "strings"
    ],
    "user": "Matthew Darens",
    "time": "Nov 17, 2019 at 5:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, if the input is not 0-terminated. If that's the case,\n  <code>\n   strlen\n  </code>\n  will happily continue counting bytes until it finds one, moving out of the input's bounds. It then depends on how clean the memory is where the input is allocated.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Johann Aydinbas",
            "time": "Nov 17, 2019 at 10:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Matthew Darens",
                    "text": "<span class=\"comment-copy\">Thank you, it looks very logical. Also, do you know anything about the cases when strlen negative return happens? Or should I better create another question for it?</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">Well <code>man strlen</code> says that signature is <code>size_t strlen(const char *s);</code>. <code>size_t</code> is unsigned so it should not return negative values @MatthewDarens It could have been casted to a signed value.</span>",
                    "time": null
                }
            ]
        }
    ]
}