{
    "title": "CRC8 CAN message reverse engineering II",
    "link": "https://reverseengineering.stackexchange.com/questions/32421/crc8-can-message-reverse-engineering-ii",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the same situation as in question\n  <a href=\"https://reverseengineering.stackexchange.com/questions/20484/crc8-reverse-engineering\">\n   CRC8 reverse engineering\n  </a>\n  .\nBut changing the final XOR value seems not to solve my problem and reveng does not help as well.\n </p>\n <p>\n  I am copying the text from the original question here again:\n </p>\n <blockquote>\n  <p>\n   I am creating a CAN Bus on-bench testing solution which replicates the\nentire vehicle to test a single module. I have a number of messages\nthat require a CRC byte in order to be valid. The messages are in\nlittle-endian byte order, and the CRC value is held in byte 0. I have\ncollected valid messages with a changing 4 bit alive-counter along\nwith their CRC byte with the hope someone can help. I have tried CRC\nreveng, but either do not know hot to use it correctly or it is unable\nto find the polynomial, as it shows \"No models found\" when searching.\n  </p>\n  <p>\n   For reference, I found documentation that suggests the polynomial used\nis the standard SAE J1850 CRC8 polynomial x^8 + x^4 + x^3 + x^2 + 1,\nwith a CRC-ID in decimal of 166 (stated as used for the low byte). I\nhave also tried with the online calculator available here:\n   <a href=\"http://www.sunshine2k.de/coding/javascript/crc/crc_js.html\" rel=\"nofollow noreferrer\">\n    http://www.sunshine2k.de/coding/javascript/crc/crc_js.html\n   </a>\n   , but cannot\nget the correct result.\n  </p>\n  <p>\n   If anyone could provide some assistance, I would greatly appreciate\nit. I would like help in clarifying the correct polynomial, along with\nany other relevant parameters.\n  </p>\n </blockquote>\n <p>\n  Here my messages (can provide different, more complex data if required):\n </p>\n <pre><code>CRC   DATA\nDE    10 FF FF FF FF FF FF      \nCB    11 FF FF FF FF FF FF      \nA3    12 FF FF FF FF FF FF      \n48    13 FF FF FF FF FF FF      \n96    14 FF FF FF FF FF FF      \n36    15 FF FF FF FF FF FF      \nEB    16 FF FF FF FF FF FF      \n1C    17 FF FF FF FF FF FF      \n6A    18 FF FF FF FF FF FF      \n9D    19 FF FF FF FF FF FF   \n40    1A FF FF FF FF FF FF   \nE0    1B FF FF FF FF FF FF   \n3E    1C FF FF FF FF FF FF   \n43    1D FF FF FF FF FF FF   \n9E    1E FF FF FF FF FF FF   \n69    1F FF FF FF FF FF FF  \n</code></pre>\n <p>\n  CAN trace is from a 9G automatic transmission but most of the messages on this powertrain bus seem to use the same mechanism (counter in the same 4 bits, CRC in the first byte, etc.). Any help with finding out how this CRC byte is calculated is highly appreciated : )\n </p>\n <p>\n  Here some more data from another message (id 0x37):\n </p>\n <pre><code>CRC   DATA\nFC  20 88 04 21 00 0F 00   \n88  21 88 05 21 00 0F 00   \n95  22 88 04 21 00 0F 00   \n79  23 88 05 21 00 0F 00   \n66  24 88 04 21 00 0F 00   \n56  25 88 04 21 00 0F 00   \n56  26 88 05 21 00 0F 00   \n8A  27 88 04 21 00 0F 00   \n17  28 88 05 21 00 0F 00   \n76  29 88 04 21 00 0F 00   \nD3  2A 88 05 21 00 0F 00   \n4C  2B 88 04 21 00 0F 00   \nEE  2C 88 05 21 00 0F 00   \nE9  2D 88 04 21 00 0F 00   \nA2  2E 88 05 21 00 0F 00   \n1B  2F 88 04 21 00 0F 00   \n</code></pre>\n <p>\n  Just found this table in the Damos for the corresponding ECU:\n </p>\n <pre><code>Unique identifier array for the CRC calculation of the signal group TCM_EngIntrvntn_Pr2 of the message TCM_EngIntrvntn_AR2\n56  5E  66  6E  76  7E  86  8E  96  9E  A6  AE  B6  BE  C6  CE\n</code></pre>\n <p>\n  Maybe a different initial of final value is used for every counter value? Will try to generate messages with changing data for the same counter value.\n </p>\n <p>\n  Only thing I have in my logs is this one at the moment:\n </p>\n <pre><code>CRC Data (counter value '2')\n95  22 88 04 21 00 0F 00   \nC1  22 88 05 21 00 0F 00\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "263",
    "tags": [
        "crc"
    ],
    "user": "Peter Fischer",
    "time": "Nov 3, 2023 at 10:57",
    "comments": [
        {
            "user": "Alexey Esaulenko",
            "text": "<html><body><span class=\"comment-copy\">\n Looks like most reliable way to find that - reverse algo from binary, if you have that. Fortunatelly you already know some checksum constants locations (I hope damos not lie here).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  seems like I finally found it:\n </p>\n <p>\n  CRC is calculated with polynomial 0x2F, inital 0xFF and final 0xFF.\nAs data are the bytes 1 to 7 used and as an 8th byte the value from table for the current message for the current counter value.\nYes, there is one table for each message (Unique identifier array for the CRC calculation of the signal group xyz)...\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Peter Fischer",
            "time": "Dec 16, 2023 at 21:13",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Peter Fischer",
                    "text": "<span class=\"comment-copy\">I wrote some lines of code to create these tables for all messages on the bus. The code just adds all possible values for the 8th data byte (brute force) and checks if the calculated crc8 value maches that of the logged message. While doing that I found that some messages don't use all 7 bytes but only 3,4 or 6 of the data bytes to calculate the crc value - weird stuff... ;-)</span>",
                    "time": null
                }
            ]
        }
    ]
}