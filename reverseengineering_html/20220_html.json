{
    "title": "Find function in a stripped dynamic ELF library",
    "link": "https://reverseengineering.stackexchange.com/questions/20220/find-function-in-a-stripped-dynamic-elf-library",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Im currently reverse engineering an android app and this app calls a function named \"getUserInfo\" in an\n  <strong>\n   ARM 32bit ELF library\n  </strong>\n  called\n  <a href=\"https://download1494.mediafire.com/3p93kb4d39mg/6uutljplmxnsxvn/libcms.so\" rel=\"nofollow noreferrer\">\n   \"libcms.so\"\n  </a>\n  (from TikTok) via the\n  <a href=\"https://www.baeldung.com/jni\" rel=\"nofollow noreferrer\">\n   Java Native Interface\n  </a>\n  .\n </p>\n <p>\n  My Problem is: The function cant be found with\n  <code>\n   readelf --syms libcms.so\n  </code>\n  or\n  <code>\n   readelf --dyn-syms libcms.so\n  </code>\n  because libcms.so is stripped and the funtion is not contained in the symbol table.\n </p>\n <p>\n  The app can call this function, so i know the function is there. How can i find the hex location of the function?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "android",
        "arm",
        "elf",
        "java",
        "symbols"
    ],
    "user": "SinOfficial",
    "time": "Dec 2, 2019 at 15:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There're two broad ways in which you can declare\n  <code>\n   JNI\n  </code>\n  functions.\n </p>\n <p>\n  The first is the more obvious way in which the\n  <code>\n   JNI\n  </code>\n  function has to follow a specific naming convention like\n  <code>\n   JNIEXPORT void JNICALL Java_com_app_foo_bar\n  </code>\n  . You can easily identify such functions using\n  <code>\n   readelf\n  </code>\n  .\n </p>\n <p>\n  The other not so obvious way is to use\n  <code>\n   RegisterNatives\n  </code>\n  . Here your functions can have any signature and further they not need be exported from the shared library. Typically, you would call\n  <code>\n   RegisterNatives\n  </code>\n  from\n  <code>\n   JNI_OnLoad\n  </code>\n  to register the native functions to the Java Run-time.\n </p>\n <p>\n  For your binary\n  <code>\n   libcms.so\n  </code>\n  , it uses the second method.\n </p>\n <p>\n  <code>\n   RegisterNatives\n  </code>\n  has the following prototype\n </p>\n <pre><code>jint RegisterNatives(JNIEnv *env, jclass clazz, const JNINativeMethod *methods, jint Methods);\n</code></pre>\n <p>\n  If you analyze the code of\n  <code>\n   JNI_OnLoad\n  </code>\n  you will come across\n  <code>\n   RegisterNatives\n  </code>\n  call like below.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/0vbAK.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/0vbAK.png\"/>\n  </a>\n </p>\n <p>\n  The third argument points to an array of\n  <code>\n   JNINativeMethod\n  </code>\n  structures which is declared as\n </p>\n <pre><code>typedef struct {\n    char *name; \n    char *signature;\n    void *fnPtr;\n} JNINativeMethod;\n</code></pre>\n <p>\n  The first member is a pointer to a null terminated string denoting the function name. However, in your case all the names and signatures are encrypted.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/Kyyh5.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Kyyh5.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/dkmEL.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dkmEL.png\"/>\n  </a>\n </p>\n <p>\n  These are decrypted at run-time by the\n  <code>\n   .datadiv_decodeXXXXXXXX\n  </code>\n  family of functions. The\n  <code>\n   .init_array\n  </code>\n  section contain pointers to these decryptor functions which implies they will be called at startup.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/02J4L.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/02J4L.png\"/>\n  </a>\n </p>\n <p>\n  However, that is not all. The binary also employs\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2221/what-is-a-control-flow-flattening-obfuscation-technique\">\n   Control Flow Flattening\n  </a>\n  Obfuscation throughout, hence the execution path may not be easily discernible as shown below.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SgpWR.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/SgpWR.png\"/>\n  </a>\n </p>\n <p>\n  To analyze the binary you're better off resorting to dynamic analysis techniques using a tool such as\n  <a href=\"https://www.frida.re/\" rel=\"noreferrer\">\n   Frida\n  </a>\n  .\n </p>\n <p>\n  <strong>\n   Further Read:\n  </strong>\n </p>\n <ul>\n  <li>\n   <a href=\"https://developer.android.com/training/articles/perf-jni#native-libraries\" rel=\"noreferrer\">\n    https://developer.android.com/training/articles/perf-jni#native-libraries\n   </a>\n  </li>\n  <li>\n   <a href=\"https://reverseengineering.stackexchange.com/questions/19024/finding-registernatives-function-calls-in-jni-onloads-assembly-code\">\n    Finding RegisterNatives function calls in JNI_OnLoad's assembly code\n   </a>\n  </li>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/13509961/which-method-eventually-calls-jni-onload\">\n    https://stackoverflow.com/questions/13509961/which-method-eventually-calls-jni-onload\n   </a>\n  </li>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/51811348/find-manually-registered-obfuscated-native-function-address\">\n    https://stackoverflow.com/questions/51811348/find-manually-registered-obfuscated-native-function-address\n   </a>\n  </li>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do\">\n    https://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do\n   </a>\n  </li>\n  <li>\n   <a href=\"https://reverseengineering.stackexchange.com/questions/6285/how-to-recover-information-stored-in-ctors-section\">\n    How to recover information stored in .ctors section?\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "9",
            "user": "0xec",
            "time": "Dec 29, 2018 at 22:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gin May",
                    "text": "<span class=\"comment-copy\">I don't understand, can dynamically load it get the function or anyway? or am I missing the point?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@GinMay To decrypt the function names you can run/emulate the <code>.datadiv_decode</code> series of functions.</span>",
                    "time": null
                }
            ]
        }
    ]
}