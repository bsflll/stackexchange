{
    "title": "what is COERCE_FLOAT in ida Hex-Rays' C++ pseudocode?",
    "link": "https://reverseengineering.stackexchange.com/questions/14143/what-is-coerce-float-in-ida-hex-rays-c-pseudocode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reversing and then i've found a definition as COERCE_FLOAT:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BLD6k.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"\" src=\"https://i.sstatic.net/BLD6k.png\"/>\n  </a>\n </p>\n <pre><code>float v28;\nfloat v29;\n\nv29 = COERCE_FLOAT(&v30);\nv28 = COERCE_FLOAT(&v31); // what is this?\n</code></pre>\n <p>\n  I've searched and\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11621/ida-decompiler-macro\">\n   found\n  </a>\n  that it was a simple casting method, but really like it would be in C++?\n </p>\n <p>\n  the value of v30 pass to v29 without the pointer? i don't understand.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "c++",
        "float"
    ],
    "user": "MindLerp",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n The installation folder should have some header file with macro, type and constant declarations.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I assume it's just a simple cast.\n </p>\n <p>\n  <code>\n   v29 = *reinterpret_cast< float* >( &v30 );\n  </code>\n </p>\n <p>\n  It would be easier if you'd share the generated assembly instead of the pseudo code.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "WasserEsser",
            "time": "Dec 11, 2016 at 13:10",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's probably just a simple cast like WasserEsser said. I encountered this same type of cast while trying to decompile the q_rsqrt function. You could probably recreate the same type of behaviour by using an cast, like WasserEsser suggested, but you could probably also use an union, like in this code :\n </p>\n <pre><code>float Q_rsqrt( float number )\n{\n    union {\n        float f;\n        uint32_t i;\n    } conv;\n\n    float x2;\n    const float threehalfs = 1.5F;\n\n    x2 = number * 0.5F;\n    conv.f  = number;\n    conv.i  = 0x5f3759df - ( conv.i >> 1 );\n    conv.f  = conv.f * ( threehalfs - ( x2 * conv.f * conv.f ) );\n    return conv.f;\n}\n</code></pre>\n <p>\n  Which then decompiles to this :\n </p>\n <pre><code>float __stdcall Q_rsqrt(float a1)\n{\n  return (flt1Point5\n        - a1\n        * flt0Point5\n        * COERCE_FLOAT(0x5F3759DF - (SLODWORD(a1) >> 1))\n        * COERCE_FLOAT(0x5F3759DF - (SLODWORD(a1) >> 1)))\n       * COERCE_FLOAT(0x5F3759DF - (SLODWORD(a1) >> 1));\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Gabriel Ravier",
            "time": "Jun 22, 2018 at 14:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}