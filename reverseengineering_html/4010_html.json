{
    "title": "Find register value of a remote process - pydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/4010/find-register-value-of-a-remote-process-pydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can I find the register value of another process at a specific address using python pydbg or any other module that can do that?\n </p>\n <p>\n  Lets say that:\n </p>\n <pre><code>Address               opcode\n006122CB              mov eax, [ecx+08]\n</code></pre>\n <p>\n  So, I want to find the value of the ecx register at this address.\n </p>\n <p>\n  Windows 7 x64 bit\n </p>\n <p>\n  Program x32 bit\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "814",
    "tags": [
        "debugging",
        "python"
    ],
    "user": "A.Sherif",
    "time": "Apr 3, 2014 at 1:58",
    "comments": [
        {
            "user": "A.Sherif",
            "text": "<html><body><span class=\"comment-copy\">\n The other question is about how to trace a function, but this one is about how to find the register value at a specific address. I dont think its a duplicate.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n I was to soon to act. Sorry\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jonathon Reinhart",
            "text": "<html><body><span class=\"comment-copy\">\n Note that the function in which this instruction lives might be called many times in different contexts. So the value in ecx might be different every time this code is executed.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>:\\>cat memaccess.py\nfrom pydbg import *\nfrom pydbg.defines import *\n\ndef handler_breakpoint (pydbg):\n   if pydbg.first_breakpoint:\n      return DBG_CONTINUE\n\n   context = dbg.get_thread_context(dbg.h_thread)\n   print \"eip = %08x\" % context.Eip\n   print \"edi = %08x\" % context.Edi\n   return DBG_CONTINUE\n\ndbg = pydbg()\ndbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)\ndbg.load(\"c:\\\\windows\\\\system32\\\\calc.exe\")\ndbg.bp_set(0x101248a)\ndbg.resume_all_threads()\npydbg.debug_event_loop(dbg)\n\n:\\>python memaccess.py\neip = 0101248a\nedi = 7c80b741\n</code></pre>\n <p>\n  confirming with windbg\n </p>\n <p>\n  <strong>\n   :>cdb -c \"bp 0x101248a;g;r Edi;q\" calc\n  </strong>\n </p>\n <pre><code>0:000> cdb: Reading initial command 'bp 0x101248a;g;r Edi;q'\n\nBreakpoint 0 hit\nedi=7c80b741\nquit:\n\n:\\>\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "blabb",
            "time": "Apr 3, 2014 at 4:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "A.Sherif",
                    "text": "<span class=\"comment-copy\">This worked really well, thanks alot!! can you tell me where can I learn more about pydbg so that I dont have to ask anymore questions? Thanks again.</span>",
                    "time": null
                },
                {
                    "user": "shebaw",
                    "text": "<span class=\"comment-copy\">@Boody, I recommend 'Gray Hat Python'. It shows you how debuggers work by building a simple debugger in python and also has a dedicated chapter on pydbg.</span>",
                    "time": null
                }
            ]
        }
    ]
}