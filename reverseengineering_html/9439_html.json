{
    "title": "What does this combination SCAS and STOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/9439/what-does-this-combination-scas-and-stos",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a simple snippet with several instructions:\n </p>\n <pre><code>01:    mov   edi, [ebp+8]\n02:    mov   edx, edi\n03:    xor   eax, eax\n04:    or    ecx, 0FFFFFFFFh\n05:    repne scasb\n06:    add   ecx, 2\n07:    neg   ecx\n08:    mov   al, [ebp+0Ch]\n09:    mov   edi, edx\n10:    rep   stosb\n11:    mov   eax, edx\n</code></pre>\n <p>\n  I should explain:\n </p>\n <blockquote>\n  <p>\n   1.\n   <em>\n    What is the type of the\n    <code>\n     [ebp+8]\n    </code>\n    in line\n    <code>\n     01\n    </code>\n    and\n    <code>\n     [ebp+C]\n    </code>\n    in\n  line\n    <code>\n     08\n    </code>\n    , respectively.\n   </em>\n  </p>\n  <p>\n   2.\n   <em>\n    What this code does?\n   </em>\n  </p>\n </blockquote>\n <ol>\n  <li>\n   <p>\n    Line\n    <code>\n     01\n    </code>\n    is something like\n    <code>\n     edi = *(ebp+8)\n    </code>\n    , it stores destination address, not sure. But i can't explain line\n    <code>\n     08\n    </code>\n   </p>\n  </li>\n  <li>\n   <p>\n    By following the\n    <code>\n     intel\n    </code>\n    manual\n    <code>\n     SCASB (scan byte string)\n    </code>\n    i assume what this code does initialize a buffer for the string, repeatedly writes\n    <code>\n     0\n    </code>\n    byte\n    <code>\n     eax\n    </code>\n    times, then assign\n    <code>\n     al\n    </code>\n    to\n    <code>\n     edi\n    </code>\n    .\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "822",
    "tags": [
        "assembly",
        "x86",
        "decompile"
    ],
    "user": "Roman Kiselenko",
    "time": "Jul 25, 2015 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ul>\n  <li>\n   <code>\n    ebp\n   </code>\n   points to the stack, which is where function parameters are stored.\n   <code>\n    ebp+8\n   </code>\n   is your first parameter, and\n   <code>\n    ebp+0C\n   </code>\n   the second one.\n  </li>\n  <li>\n   The first parameter is a pointer to a 0-terminated string, and gets loaded into\n   <code>\n    edi\n   </code>\n   .\n  </li>\n  <li>\n   The\n   <code>\n    repne scasb\n   </code>\n   instruction will increment\n   <code>\n    edi\n   </code>\n   , and decrement\n   <code>\n    ecx\n   </code>\n   , until either\n   <code>\n    ecx\n   </code>\n   is zero or\n   <code>\n    edi\n   </code>\n   points to a byte that is equal to the one in\n   <code>\n    al\n   </code>\n   - 0 in your case, so this scans for the end of a C string.\n  </li>\n  <li>\n   Adding 2 to\n   <code>\n    ecx\n   </code>\n   , then negating it, will make it equal to the string length. Try it out yourself on paper with an example or two.\n  </li>\n  <li>\n   <code>\n    eax\n   </code>\n   gets the second pararmeter of the function, from\n   <code>\n    ebp+0C\n   </code>\n   .\n  </li>\n  <li>\n   The string (the address of the string has been saved in\n   <code>\n    edx\n   </code>\n   and is back in\n   <code>\n    edi\n   </code>\n   ) gets overwritten with the byte in\n   <code>\n    al\n   </code>\n   - your second function parameter.\n  </li>\n </ul>\n <p>\n  So what this function does is overwrite a null-terminated string of unknown length (parameter 1) with a sequence of identical bytes (parameter 2).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jul 25, 2015 at 8:56",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  emulating the sequence with powershell\n </p>\n <pre><code>cat scasb.ps1\n$edx=$edi=$args[0];  $eax=0; $ecx=-1;\nwhile($edi[$ecx--]){}; $ecx+=2;  $ecx=-$ecx;\n\"length of string using .net method \"+$edi.length;\n\"length of string using repne scasb \"+$ecx;\n$edi=$edx.tochararray()\nwhile($ecx){$edi[--$ecx]=$args[1]};  $ofs=\"\"; $edx;[string]$edi\n</code></pre>\n <p>\n  result\n </p>\n <pre><code>powershell -f scasb.ps1 \"abracadabra gili gili choo\" r\nlength of string using .net method 26\nlength of string using repne scasb 26\nabracadabra gili gili choo\nrrrrrrrrrrrrrrrrrrrrrrrrrr\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Jul 27, 2015 at 14:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}