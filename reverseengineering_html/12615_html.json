{
    "title": "how to calculate this distance?",
    "link": "https://reverseengineering.stackexchange.com/questions/12615/how-to-calculate-this-distance",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I dont know how to calculate the jump distances :\n </p>\n <pre><code>[Address | Binary value| ollydbg(jmp, call...)]\n\n004014B6   $- FF25 30114000 JMP DWORD PTR DS:[<&MSVBVM60.#100>]      ;  MSVBVM60.ThunRTMain\n004014C1   .  E8 **F0FFFFFF**   CALL [JMP.&MSVBVM60.#100]\n</code></pre>\n <p>\n  other examples: random jmps to 004014C1\n </p>\n <pre><code>0040752A    ^\\E9 **929FFFFF**   JMP stub2.004014C1\n00407561    ^\\E9 **5B9FFFFF**   JMP stub2.004014C1\n00407582    ^\\E9 **3A9FFFFF**   JMP stub2.004014C1\n</code></pre>\n <p>\n  as you can see the bold number changes, I can see its a distance but I don't know how to calculate it.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg"
    ],
    "user": "Charles",
    "time": "May 10, 2016 at 10:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First, you should read about\n  <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow\">\n   little endianness\n  </a>\n  . In a nutshell, the x86/x64 processors store the least significant byte first, so\n  <code>\n   F0FFFFFF\n  </code>\n  is really the value\n  <code>\n   FFFFFFF0\n  </code>\n  , and\n  <code>\n   3A9FFFFF\n  </code>\n  is the value\n  <code>\n   FFFF9F3A\n  </code>\n  .\n </p>\n <p>\n  Second, read about\n  <a href=\"https://en.wikipedia.org/wiki/Signed_number_representations\" rel=\"nofollow\">\n   integer representations of negative values\n  </a>\n  , and how overflow works when adding/subtracting numbers. In short,\n  <code>\n   FFFFFFF0\n  </code>\n  can either mean\n  <code>\n   4294967280\n  </code>\n  or\n  <code>\n   -16\n  </code>\n  , but when you add hex numbers, you don't really care; you just add them and ignore overflow.\n </p>\n <p>\n  Third, remember that jump offsets are calculated from the byte\n  <em>\n   after\n  </em>\n  the\n  <code>\n   jmp\n  </code>\n  /\n  <code>\n   call\n  </code>\n  instruction.\n </p>\n <p>\n  So, in your first example:\n </p>\n <ul>\n  <li>\n   start with\n   <code>\n    4014B6\n   </code>\n  </li>\n  <li>\n   add 6 bytes for the instruction, result\n   <code>\n    4014BA\n   </code>\n  </li>\n  <li>\n   add the value\n   <code>\n    401130\n   </code>\n   , result\n   <code>\n    8025EA\n   </code>\n  </li>\n </ul>\n <p>\n  and the first of your random examples:\n </p>\n <ul>\n  <li>\n   start with\n   <code>\n    40752A\n   </code>\n  </li>\n  <li>\n   add 5 bytes for the instruction, result\n   <code>\n    40752F\n   </code>\n  </li>\n  <li>\n   add\n   <code>\n    FFFF9F92\n   </code>\n   , result\n   <code>\n    1004014C1\n   </code>\n  </li>\n  <li>\n   ignore overflow, result\n   <code>\n    004014C1\n   </code>\n   which is the target Olly shows you.\n  </li>\n </ul>\n <p>\n  Your other examples work in the same way, you should be able to figure them out now.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 10, 2016 at 10:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}