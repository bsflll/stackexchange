{
    "title": "Generating an elf header",
    "link": "https://reverseengineering.stackexchange.com/questions/25879/generating-an-elf-header",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To get a basic understanding of the\n  <a href=\"https://refspecs.linuxfoundation.org/elf/elf.pdf\" rel=\"nofollow noreferrer\">\n   ELF format\n  </a>\n  , I'm writing a basic program to generate a valid elf file from the most basic assembly output. I'm going step-by-step so I'll probably ask a few questions here as I make my way through it. I've generated the first 16-bytes of the header and verified that it's the same from a gcc-compiled program on my machine (nothing special, since those first 16-bytes are almost always the same). Here is what I have so far (using python):\n </p>\n <pre><code># https://refspecs.linuxfoundation.org/elf/elf.pdf\nb = bytearray()\n\n# (1) magic header\nb.append(0x7F) # starting number\nb.extend([ord('E'), ord('L'), ord('F')])\n\n# (2) ei-class ('capacity') -- 1 for 32-bit, 2 for 64-bit\n# uname -m # x86_64\nBITS_32 = 1\nBITS_64 = 2\nb.append(BITS_64)\n\n# (3) ei-data ('data-encoding') -- 1 for little-endian (standard), 2 for big-endian\nLITTLE_ENDIAN = 1\nBIG_ENDIAN    = 2\nb.append(LITTLE_ENDIAN)\n\n# (4) ei-version -- always will be 1 -- \nEV_CURRENT = 1\nb.append(EV_CURRENT)\n\n# (5) ei-pad -- padding --> pad 0's up to 16 bytes\nb.extend([0,] * (16-len(b)))\n\nprint('%s\nLength: %s' % (b, len(b)))\n</code></pre>\n <p>\n  And I get:\n </p>\n <pre><code>bytearray(b'\\x7fELF\\x02\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\nLength: 16\n</code></pre>\n <p>\n  I have a few questions about this:\n </p>\n <ul>\n  <li>\n   What is the most common way to get whether a machine is\n   <code>\n    32\n   </code>\n   or\n   <code>\n    64\n   </code>\n   bits? Is doing\n   <code>\n    uname -m\n   </code>\n   or one of the\n   <code>\n    uname\n   </code>\n   variants the suggested way?\n  </li>\n  <li>\n   How do you determine if the machine is little- or big-endian?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "563",
    "tags": [
        "elf",
        "executable",
        "binary-format"
    ],
    "user": "David542",
    "time": "Sep 14, 2020 at 4:24",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n for python, why not use the\n <code>\n  platform\n </code>\n module?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "David542",
            "text": "<html><body><span class=\"comment-copy\">\n @PawełŁukasik oh, and even if not, it mentions all the ways it gathers the data so I can use that:\n <a href=\"https://github.com/python/cpython/blob/2.7/Lib/platform.py\" rel=\"nofollow noreferrer\">\n  github.com/python/cpython/blob/2.7/Lib/platform.py\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n Which machine? The host machine you are developing software on? Or the target of the ELF binary? If you want details about the environment you are working in, you can use utility programs or a language's library functions as mentioned by Paweł and Shane.  As currently written, it's not clear what this question has to do with the ELF format or reverse engineering.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On Linux machines, the\n  <code>\n   lscpu\n  </code>\n  command will tell you both the endianness of the CPU and whether it is 32/64 bit.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Shane Reilly",
            "time": "Sep 14, 2020 at 12:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}