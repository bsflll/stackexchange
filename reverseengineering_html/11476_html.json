{
    "title": "IDA Pro and recognized library functions",
    "link": "https://reverseengineering.stackexchange.com/questions/11476/ida-pro-and-recognized-library-functions",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I start by saying that I'm completely new to the topic of reversing although I have many years of experience with programming in general.\n </p>\n <p>\n  I've some problems with automatic recognition of library functions of a DOS executable compiled with Borland C++ 3.1.\n </p>\n <p>\n  Actually the signatures are correctly identified as bc31rtd (and it states 199 as the actual number of applied signatures). So for example\n  <code>\n   strcmp\n  </code>\n  is correctly identified, colored and such.\n </p>\n <p>\n  Starting from this I was relying blindly on these library function in the rest of the code until I realized that there was something wrong, this is, for example what I see in for\n  <code>\n   strcpy\n  </code>\n  :\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/bLRE2.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/bLRE2.png\"/>\n  </a>\n </p>\n <p>\n  Which doesn't make sense to me since\n  <code>\n   src\n  </code>\n  is not used at all. Then\n  <code>\n   repne scasb\n  </code>\n  should scan for the length of the string but the last value placed in\n  <code>\n   di\n  </code>\n  is\n  <code>\n   [bp+dest+2]\n  </code>\n  like if both\n  <code>\n   const char*\n  </code>\n  were not\n  <code>\n   dd\n  </code>\n  but\n  <code>\n   dw\n  </code>\n  (so just the offset, without any specified segment, and\n  <code>\n   ds\n  </code>\n  is used implicitly).\n </p>\n <p>\n  Since this was getting me crazy I checked the original implementation of the function by opening CC.LIB of BC++3.1 with IDA Pro directly and implementation is different indeed:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/dSj1z.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dSj1z.png\"/>\n  </a>\n </p>\n <p>\n  So where's the problem here?\n </p>\n <p>\n  How can I alter the function as I want? I tried modifying directly stack variables (Ctrl+K) but then offsets become faulty (eg\n  <code>\n   [bp+8]\n  </code>\n  marked as red).\n </p>\n <p>\n  I ask sorry if I'm making some trivial wrong assumption that I'm not realizing.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "dos",
        "flirt-signatures"
    ],
    "user": "Jack",
    "time": "Dec 8, 2015 at 14:18",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<html><body><span class=\"comment-copy\">\n Generally speaking,\n <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\" rel=\"nofollow noreferrer\">\n  hex-rays.com/products/ida/tech/flirt/in_depth.shtml\n </a>\n is how IDA Pro recognizes compiled-in functions.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Oh, the happyness of near functions vs. far functions, near pointers vs. far pointers, and mixed models (far functions, near pointers)\n </p>\n <p>\n  Back in the 16 bit world, programs could either\n </p>\n <ul>\n  <li>\n   use a maximum of 64 KB code, and 64 KB data, have all pointers use 16 bit, and ignore segment registers. This was called the\n   <code>\n    near\n   </code>\n   model, because all offsets were within the same segment\n  </li>\n </ul>\n <p>\n  or\n </p>\n <ul>\n  <li>\n   choose to be able to have more than 64 KB code, and more than 64 KB data; make pointers 32 bit (16 bit segment and 16 bit offset), and mess with segment registers whenever using a pointer. This was called the\n   <code>\n    far\n   </code>\n   model since pointers could point to different segments, in fact, the whole address space\n  </li>\n </ul>\n <p>\n  or\n </p>\n <ul>\n  <li>\n   use a mixed model - near pointers for code, and far pointers for data (more commonly used) or vice versa (i don't know of a single program that used that).\n  </li>\n </ul>\n <p>\n  Now, the problem is, that the\n  <code>\n   strcpy\n  </code>\n  function from your program seems to be the far-code-near-data version, and the\n  <code>\n   strcpy\n  </code>\n  from the library seems to be the near-code-far-data version.\n </p>\n <p>\n  You see how the first function makes sure that\n  <code>\n   es\n  </code>\n  =\n  <code>\n   ds\n  </code>\n  (\n  <code>\n   push ds; pop es\n  </code>\n  ) but doesn't mess with segments otherwise. This would make it use 16 bit pointers. The\n  <code>\n   retf\n  </code>\n  at the end suggests it uses the\n  <code>\n   far\n  </code>\n  code convention.\n </p>\n <p>\n  The second function uses\n  <code>\n   LES di, [bp+src]\n  </code>\n  , which loads\n  <code>\n   es\n  </code>\n  and\n  <code>\n   di\n  </code>\n  at the same time. This means it uses\n  <code>\n   far\n  </code>\n  data pointers on the stack, the\n  <code>\n   retn\n  </code>\n  at the end means it uses the\n  <code>\n   near\n  </code>\n  code model.\n </p>\n <p>\n  What happened is that, in your disassembled program, IDA saw the\n  <code>\n   retf\n  </code>\n  , deducted\n  <code>\n   far code\n  </code>\n  , and probably assumed\n  <code>\n   far data\n  </code>\n  as well - which is wrong. If data was indeed\n  <code>\n   far\n  </code>\n  , you'd have 4 bytes for\n  <code>\n   src\n  </code>\n  , and another 4 bytes for\n  <code>\n   dst\n  </code>\n  , and this is what ida is showing on your stack. But in fact, the pointers have just 2 bytes each, so\n  <code>\n   dest\n  </code>\n  is at offset 6, but\n  <code>\n   src\n  </code>\n  is at offset 8, not 0x0a (10). Which is why accessing\n  <code>\n   src\n  </code>\n  is shown as\n  <code>\n   dest+2\n  </code>\n  , and the (wrong) offset 0x0a, which IDA falsely assumes to be\n  <code>\n   src\n  </code>\n  , isn't used at all.\n </p>\n <p>\n  Shown as a picture:\n </p>\n <pre><code>This is what IDA thinks:           and this is the real stack layout:\n\n+----------------------------+     +--------------------------------+\n|000c src  segment           |     |                                |\n|000a src  offset            |     |                                |\n|0008 dest segment           |     |0008 src                        |\n|0006 dest offset            |     |0006 dest                       |\n|0004 saved bp               |     |0004 saved bp                   |\n|0002 return address segment |     |0002 return address segment     |\n|0000 return address offset  |     |0000 return address offset      |\n+----------------------------+     +--------------------------------+\n</code></pre>\n <p>\n  To fix this, open the function prototype dialog, and change the pointer definitions to\n  <code>\n   char near *\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Dec 9, 2015 at 14:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jack",
                    "text": "<span class=\"comment-copy\">Everythins is clear, thanks for taking the time to give me precise and complete answers because they're really useful in getting some expertise of this new world. So assuming this, the binary library object of Borland C++ compiler should contain multiple implementations of the same function and choose the one accordingly to the program model specified? I see I can tell IDA to use far code/data or near code/data in compiler options but other methods look like with far data so I wonder if in reality it's like mixed far/near data mode according to the function involved, is it plausible?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Well, you can't link in the <code>near</code> <i>and</i> <code>far</code> versions of <code>strcpy</code> at the same time (at least not without a lot of tricks involving changing the names of functions in standard libraries). But even if you compile for the near data model, you could explicitly define some big data arrays as <code>far</code>, while keeping the rest of your data <code>near</code>. You won't be able to use standard functions on these data arrays in that case, but this might be ok depending on your application. When speed is important, keeping as much as possible <code>near</code> helps, so there's a valid reason to do this.</span>",
                    "time": null
                }
            ]
        }
    ]
}