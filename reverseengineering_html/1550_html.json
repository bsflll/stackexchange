{
    "title": "What techniques are used in reverse engineering embedded firmware?",
    "link": "https://reverseengineering.stackexchange.com/questions/1550/what-techniques-are-used-in-reverse-engineering-embedded-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   This question is related to another question I posted\n   <a href=\"https://reverseengineering.stackexchange.com/questions/1523\">\n    here\n   </a>\n   .\n  </p>\n </blockquote>\n <p>\n  I'm working with a small public transit agency on a neat open-source project that will help us to offer realtime data to local developers. A key piece of data we need is the current bus route a given vehicle is on. Currently, there is only a single electronic system that knows this information: the vehicle logic unit (VLU) that each vehicle is equipped with.\n </p>\n <p>\n  When a bus driver begins a route, they type its ID number into the keypad on the operator control unit (OCU). This ID number is sent to the VLU, which then displays the appropriate text on the LED signs on the bus.\n </p>\n <p>\n  On the OCU, there are two DB9F ports. In the manual, they are described as \"J1708 PORTS\". One of them is connected to the VLU, and the other one is available for me to plug in to. Connecting to it gets me some data that you can read about in\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1523\">\n   my other question\n  </a>\n  .\n </p>\n <p>\n  What I'd like to do is reverse engineer the firmware of the VLU and see how it decides what data to send or how to interpret received data. From what I can tell, the firmware is using\n  <a href=\"http://www.on-time.com/rttarget-32.htm\" rel=\"nofollow noreferrer\">\n   RTTarget-32\n  </a>\n  as a base. I believe this is the case because the following strings can be found in the firmware file:\n </p>\n <pre><code>RTTarget-32 5.0 16-Bit Boot Code (c) 1996,2006 On Time Informatik\nOn Time RTOS-32 5.0 Disk Loader (c) 1996,2009 On Time\n</code></pre>\n <p>\n  I didn't post a link to the firmware file because I know linking to external files is generally frowned upon on SE sites. If I should upload it, though, what file host should I use?\n </p>\n <p>\n  So, as my question title states, what techniques should I be using to begin reverse engineering this firmware file?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 2,
    "views": "4k",
    "tags": [
        "firmware"
    ],
    "user": "drewbug",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Reversing the firmware format can involve many different things, depending on the level of difficulty.\n </p>\n <p>\n  You would start with manual analysis with a hex editor.\n </p>\n <p>\n  If the data appears nicely structured, except for blocks that appear compressed (a few plaintext characters visible here and there), then it's probably not obfuscated.\n </p>\n <p>\n  If it appears like all gibberish with little or no structure (e.g. few runs of 0s), you'll need to disassemble the boot loader (dumped from the device) to extract the obfuscation algorithm, assuming you can't guess at it.\n </p>\n <p>\n  From there, start identifying the header fields and component parts of the firmware image. Most will have a kernel and a compressed file system. Often times there are offsets in the header, pointing to the components of the firmware.\n </p>\n <p>\n  You would want to try\n  <a href=\"https://code.google.com/p/binwalk/\">\n   BinWalk\n  </a>\n  , to see if it identifies any common components to the file format. It is designed for exactly this task. It generally works best on linux firmwares, which use common open source filesystems like squashfs or jffs2, but it's worth a try here.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "dyasta",
            "time": "Apr 4, 2013 at 21:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">you should probably mention as well your very own: <a href=\"https://code.google.com/p/firmware-mod-kit/\" rel=\"nofollow noreferrer\">code.google.com/p/firmware-mod-kit</a> ... in fact it appears <code>binwalk</code> relies in part on some scripts from <code>firmware-mod-kit</code>. And the inverse also holds true, your project <i>includes</i> <code>binwalk</code> :) ... just used <code>extract-firmware.sh</code> a few minutes ago, so I couldn't help commenting. +1</span>",
                    "time": null
                },
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">I always feel odd about mentioning things I have involvement in. Yes, the newer scripts of the Firmware Mod Kit rely on Binwalk to identify firmware segments, then acts based on the Binwalk identifications. Recording the layout, it then can later reconstruct them. Binwalk itself can now extract embedded file systems. Craig Heffner works on both, so credits to him.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On Time has an evaluation kit\n  <a href=\"http://www.on-time.com/rtos-32-eval.htm\" rel=\"nofollow\">\n   here\n  </a>\n  that might help you learn more about it. It looks like it would be running on fairly standard hardware. Worst case you might have to dump an eeprom and decompile that with IDA or the like.\n </p>\n <p>\n  <a href=\"http://en.wikipedia.org/wiki/J1708\" rel=\"nofollow\">\n   http://en.wikipedia.org/wiki/J1708\n  </a>\n </p>\n <p>\n  The protocol for those ports is open. So you could even communicate with it from your own code. Odd that it is RS-485 rather that RS-232 (its a bus version of RS-232 basically and you would probably need a different card to use it). The wiki page there lists possible higher level protocols you might try invesigating.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "cb88",
            "time": "Apr 3, 2013 at 19:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}