{
    "title": "Help with FISTP and FILD interpretation",
    "link": "https://reverseengineering.stackexchange.com/questions/33176/help-with-fistp-and-fild-interpretation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need some help with understanding what is being actualy done in those two assembly lines:\n </p>\n <p>\n  fistp   qword ptr [esp+10h]\nss:0023:0013be80=0000000000001cf8\n </p>\n <p>\n  fild    qword ptr [esp+10h]\nss:0023:0013be80=0000000000002c36\n </p>\n <p>\n  What is the underlying operetion that changes 1cf8 to 2c36\n </p>\n <p>\n  Thanks in adv\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "62",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Uddie",
    "time": "Aug 22, 2024 at 22:12",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n Intel's floating point instructions are based on a stack.\n <code>\n  fist\n </code>\n stores a 16-32-64-bit floating point number (IEEE) to the operand address, whereas\n <code>\n  fild\n </code>\n loads from an address into the stack. The\n <code>\n  p\n </code>\n suffix, is the variation of\n <code>\n  fist\n </code>\n that pops the first value,\n <code>\n  ST(0)\n </code>\n , from said stack. The values you're seeing are not the underlying operand changing the address, but rather that before\n <code>\n  fistp\n </code>\n is run, the value is 0x1cf8. After executing\n <code>\n  fistp\n </code>\n , however,\n <code>\n  ST(0)\n </code>\n is popped and written to\n <code>\n  [esp+0x10]\n </code>\n as 0x2c36. When execution gets to\n <code>\n  fild\n </code>\n , the previous value of\n <code>\n  ST(0)\n </code>\n was already written.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n ...that is assuming that there's no other instructions tampering with\n <code>\n  [esp+0x10]\n </code>\n in between the two instructions you listed. (Related question:\n <a href=\"https://reverseengineering.stackexchange.com/questions/20559/what-is-this-assembly-code-fld-qword-ptr-code-here-doing-also-how-do-i-store\" title=\"what is this assembly code fld qword ptr code here doing also how do i store\">\n  reverseengineering.stackexchange.com/questions/20559/…\n </a>\n , link for answer is archived at\n <a href=\"https://web.archive.org/web/20071006182549/http://www.ray.masmcode.com/tutorial/index.html\" rel=\"nofollow noreferrer\">\n  web.archive.org/web/20071006182549/http://www.ray.masmcode.com/…\n </a>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Uddie",
            "text": "<html><body><span class=\"comment-copy\">\n First of all, sorry for late reply. Yes, you are right, it all seems clear for me now. Thank you for explanation.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html\" rel=\"nofollow noreferrer\">\n   download software developer manual volume 2 for intel\n  </a>\n </p>\n <p>\n  volume 2 is instruction set reference\n </p>\n <p>\n  <a href=\"https://www.felixcloutier.com/x86/fist:fistp#tbl-3-27\" rel=\"nofollow noreferrer\">\n   or as a second choice use online references\n  </a>\n </p>\n <p>\n  search fistp or any other instruction and read for better understanding\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/3EOkIRlD.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/3EOkIRlD.png\"/>\n  </a>\n </p>\n <p>\n  basically FISTP takes what is in st[0]  converts it to a signed integer and stores it in destination and pops the st[0] (empties st[0])\n </p>\n <p>\n  suppose st[0] contains a valid float like 486.87 (using 32 bit ollydbg here)\n  <a href=\"https://i.sstatic.net/YFTSCRMx.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/YFTSCRMx.png\"/>\n  </a>\n </p>\n <p>\n  and your instruction pointer contains  fistp qword ptr [esp+10]\n  <a href=\"https://i.sstatic.net/YjnLlEWx.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/YjnLlEWx.png\"/>\n  </a>\n </p>\n <p>\n  on executing this instruction\nesp+10 will hold 487  (486.87 rounded to 487 and positive signed)\nprior to execution\n  <a href=\"https://i.sstatic.net/fVlkIg6t.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/fVlkIg6t.png\"/>\n  </a>\n </p>\n <p>\n  post execution\n  <a href=\"https://i.sstatic.net/3GP9Xhfl.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/3GP9Xhfl.png\"/>\n  </a>\n </p>\n <p>\n  an the stack has been popped\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/OuH3De18.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/OuH3De18.png\"/>\n  </a>\n </p>\n <p>\n  hope you will be able to follow this for FILD\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 23, 2024 at 19:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Uddie",
                    "text": "<span class=\"comment-copy\">So sorry for late reply. I've got the procedure. I can manage on my own now. Thanks a lot!</span>",
                    "time": null
                }
            ]
        }
    ]
}