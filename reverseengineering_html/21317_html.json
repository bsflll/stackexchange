{
    "title": "Explanation of heap shaping technique and how it is different from heap spraying",
    "link": "https://reverseengineering.stackexchange.com/questions/21317/explanation-of-heap-shaping-technique-and-how-it-is-different-from-heap-spraying",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Recent RDP\n  <a href=\"https://research.checkpoint.com/reverse-rdp-attack-code-execution-on-rdp-clients/\" rel=\"nofollow noreferrer\">\n   vulnerability\n  </a>\n  and exploits have mentioned the use of heap shaping technique. \nCan anyone please explain in details what is actually involved in using this tactic.\n </p>\n <p>\n  Thanks\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "exploit",
        "heap"
    ],
    "user": "GelosSnake",
    "time": "May 15, 2019 at 16:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Heap shaping (also called heap grooming, for a more passive approach) is the slightly more intelligent sibling of heap spraying while developing exploits. Therefore, to properly explain heap shaping one must first be familiar with\n  <a href=\"https://en.wikipedia.org/wiki/Heap_spraying\" rel=\"nofollow noreferrer\">\n   heap spraying\n  </a>\n  .\n </p>\n <h2>\n  heap spraying\n </h2>\n <p>\n  Heap spraying is the act of intentionally filling (spraying) a target process's heap space with recurring/sequential data, using an external attack primitive.\n </p>\n <p>\n  Say for example, you've found a uninitialized-variable bug, where a variable is not initialized when it should, and is then used in a manner that could be dangerous depending on it's the actual value.\n </p>\n <p>\n  An example might make it clearer:\n </p>\n <pre><code>typedef struct __struct_cmd {\n    int type;\n    char shell_cmd[1024];\n} struct_cmd;\n\nvoid safe_cmd(struct_cmd* cmd)\n{\n    switch (cmd->type)\n    {\n    case CMD_1:\n        strcpy(cmd->shell_cmd, SAFE_CMD1);\n        break;\n    case CMD_2:\n        strcpy(cmd->shell_cmd, SAFE_CMD2);\n        break;\n    }\n    system(cmd->shell_cmd);\n}\n</code></pre>\n <p>\n  In the above example, it's easy to notice that if a user provides any value other than\n  <code>\n   CMD_1\n  </code>\n  or\n  <code>\n   CMD_2\n  </code>\n  for\n  <code>\n   cmd.type\n  </code>\n  ,\n  <code>\n   shell_cmd\n  </code>\n  will not be uninitialized and an unknown value will be passed on to the lucrative\n  <code>\n   system\n  </code>\n  call.\n </p>\n <p>\n  Being able to set\n  <code>\n   cmd->shell_cmd\n  </code>\n  to a specific value that is a valid (and malicious) shell command will potentially give us code execution on the target. Simply put, heap spraying is the act of getting a lot of heap memory space filled with the specific shell command we'd like to execute.\n </p>\n <h2>\n  heap shaping\n </h2>\n <p>\n  Now that was a relatively trivial case, and quite frequently heap spraying/shaping are used to exploit memory corruption bugs but that's irrelevant. Usually, you'd be addressing many more constraints to successfully exploit a memory corruption, and \"filling the heap with data\" simply won't be enough.\n </p>\n <p>\n  Double-free and use-after-free bugs will require specific objects/structs be allocated at the same space  a different object previously reside in. You'd then need to make sure the heap has a specific\n  <em>\n   shape\n  </em>\n  , in a way, so that a different object will \"fit\" into a\n  <a href=\"https://en.wikipedia.org/wiki/Coalescing_(computer_science)\" rel=\"nofollow noreferrer\">\n   coalescing heap\n  </a>\n  (or high fragmentation heap, as opposed to\n  <a href=\"https://docs.microsoft.com/en-us/windows/desktop/Memory/low-fragmentation-heap\" rel=\"nofollow noreferrer\">\n   low fragmentation heap\n  </a>\n  ). You may need to make sure a specific instance you control through a primitive is allocated in the right spot. Getting the heap to be in that specific way is what's called \"heap shaping\"\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "May 15, 2019 at 16:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}