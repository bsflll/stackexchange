{
    "title": "Reverse Engineering an Encryption Algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/2938/reverse-engineering-an-encryption-algorithm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a program that has the ability to encrypt files and I want to be able to create a program that can read these files. I believe it uses a Blowfish encryption, but I'm not certain on that. How can I find the type of encryption used and its key?\n </p>\n <p>\n  Using Reflector, I was able to find the following code:\n </p>\n <pre><code>public static unsafe string Encrypt(string text)\n{\n    string str;\n    basic_string<char,std::char_traits<char>,std::allocator<char> > local2;\n    sbyte modopt(IsSignUnspecifiedByte)* numPtr = (sbyte modopt(IsSignUnspecifiedByte)*) Marshal.StringToHGlobalAnsi(text);\n    std.basic_string<char,std::char_traits<char>,std::allocator<char> >.{ctor}(&local2, numPtr);\n    try\n    {\n        basic_string<char,std::char_traits<char>,std::allocator<char> > local;\n        IntPtr hglobal = new IntPtr(numPtr);\n        Marshal.FreeHGlobal(hglobal);\n        basic_string<char,std::char_traits<char>,std::allocator<char> >* localPtr = _Encrypt(&local, (basic_string<char,std::char_traits<char>,std::allocator<char> > modopt(IsConst)* modopt(IsImplicitlyDereferenced)) &local2);\n        try\n        {\n            str = new string(std.basic_string<char,std::char_traits<char>,std::allocator<char> >.c_str((basic_string<char,std::char_traits<char>,std::allocator<char> > modopt(IsConst)* modopt(IsConst) modopt(IsConst)) localPtr));\n        }\n        fault\n        {\n            ___CxxCallUnwindDtor(std.basic_string<char,std::char_traits<char>,std::allocator<char> >.{dtor}, (void*) &local);\n        }\n        std.basic_string<char,std::char_traits<char>,std::allocator<char> >.{dtor}(&local);\n    }\n    fault\n    {\n        ___CxxCallUnwindDtor(std.basic_string<char,std::char_traits<char>,std::allocator<char> >.{dtor}, (void*) &local2);\n    }\n    std.basic_string<char,std::char_traits<char>,std::allocator<char> >.{dtor}(&local2);\n    return str;\n}\n</code></pre>\n <p>\n  I notice it also references this, but I don't understand what it does at all...\n </p>\n <pre><code>[PreserveSig, MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType=MethodCodeType.Native), SuppressUnmanagedCodeSecurity]\ninternal static unsafe basic_string<char,std::char_traits<char>,std::allocator<char> >* modreq(IsUdtReturn) modopt(CallConvCdecl) _Encrypt(basic_string<char,std::char_traits<char>,std::allocator<char> >*, basic_string<char,std::char_traits<char>,std::allocator<char> > modopt(IsConst)* modopt(IsImplicitlyDereferenced));\n</code></pre>\n <p>\n  I'm still new to desktop programming, my only programming experience is mostly with web-based technologies and the absolute basics of C++. I've never gotten into reverse engineering before either. So please be gentle and thorough in your response as I'd really like to learn.\n </p>\n <p>\n  -------------- EDIT\n </p>\n <p>\n  I've finally been able to find the same function call in OllyDBG. However, setting a breakpoint and making it run the code does not cause it to break.\n </p>\n <p>\n  What might I be doing wrong? :/\n </p>\n <pre><code>CPU Disasm\nAddress   Hex dump          Command                            Comments\n00A088D8  /$  02            ldarg.0\n00A088D9  |.  7B CC000004   ldfld openFileDialog3\n00A088DE  |.  02            ldarg.0\n00A088DF  |.  6F D101000A   callvirt ShowDialog\n00A088E4  |.  17            ldc.i4.1\n00A088E5  |.- 2E 01         beq.s 0A088E8\n00A088E7  |.  2A            ret\n00A088E8  |>  02            ldarg.0\n00A088E9  |.  7B CC000004   ldfld openFileDialog3\n00A088EE  |.  6F 8501000A   callvirt get_FileName\n00A088F3  |.  28 D201000A   call ReadAllText\n00A088F8  |.  0A            stloc.0\n00A088F9  |.  06            ldloc.0\n00A088FA  |.  6F 9000000A   callvirt Trim\n00A088FF  |.  6F 3900000A   callvirt get_Length\n00A08904  |.- 2D 01         brtrue.s 0A08907\n00A08906  |.  2A            ret\n00A08907  |>  06            ldloc.0\n00A08908  |.  6F 9000000A   callvirt Trim\n00A0890D  |.  72 99340070   ldstr \"ENCRYPTED\"                  ; UNICODE \"ENCRYPTED\"\n00A08912  |.  6F D301000A   callvirt StartsWith\n00A08917  |.- 2C 1F         brfalse.s 0A08938\n00A08919  |.  02            ldarg.0\n00A0891A  |.  72 AD340070   ldstr \"File is already encrypted\"  ; UNICODE \"File is already encrypted\"\n00A0891F  |.  28 14000006   call Translate\n00A08924  |.  72 E1340070   ldstr \"Error\"                      ; UNICODE \"Error\"\n00A08929  |.  28 14000006   call Translate\n00A0892E  |.  16            ldc.i4.0\n00A0892F  |.  1F 10         ldc.i4.s 10\n00A08931  |.  28 D401000A   call Show\n00A08936  |.  26            pop\n00A08937  |.  2A            ret\n00A08938  |>  06            ldloc.0\n00A08939  |.  28 D501000A   call Encrypt\n00A0893E  |.  0A            stloc.0\n00A0893F  |.  06            ldloc.0\n00A08940  |.  6F 9000000A   callvirt Trim\n00A08945  |.  6F 3900000A   callvirt get_Length\n00A0894A  |.- 2D 01         brtrue.s 0A0894D\n00A0894C  |.  2A            ret\n00A0894D  |>  02            ldarg.0\n00A0894E  |.  7B CC000004   ldfld openFileDialog3\n00A08953  |.  6F 8501000A   callvirt get_FileName\n00A08958  |.  02            ldarg.0\n00A08959  |.  7B CC000004   ldfld openFileDialog3\n00A0895E  |.  6F 8501000A   callvirt get_FileName\n00A08963  |.  72 ED340070   ldstr \".bak\"                       ; UNICODE \".bak\"\n00A08968  |.  28 3A00000A   call Concat\n00A0896D  |.  17            ldc.i4.1\n00A0896E  |.  28 B700000A   call Copy\n00A08973  |.  02            ldarg.0\n00A08974  |.  7B CC000004   ldfld openFileDialog3\n00A08979  |.  6F 8501000A   callvirt get_FileName\n00A0897E  |.  06            ldloc.0\n00A0897F  |.  28 A200000A   call WriteAllText\n00A08984  |.  02            ldarg.0\n00A08985  |.  72 F7340070   ldstr \"File encrypted\"             ; UNICODE \"File encrypted\"\n00A0898A  |.  28 14000006   call Translate\n00A0898F  |.  72 15350070   ldstr \"Info\"                       ; UNICODE \"Info\"\n00A08994  |.  28 14000006   call Translate\n00A08999  |.  16            ldc.i4.0\n00A0899A  |.  1F 40         ldc.i4.s 40\n00A0899C  |.  28 D401000A   call Show\n00A089A1  |.  26            pop\n00A089A2  \\.  2A            ret\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "encryption",
        "decryption"
    ],
    "user": "user1960364",
    "time": "Oct 24, 2013 at 5:45",
    "comments": [
        {
            "user": "Stolas",
            "text": "<html><body><span class=\"comment-copy\">\n I just skipped over your post and I read the part where you said you can't write basic desktop applications. I'd recommend you learn the bare basics of this first. Reverse Engineering a car for example would require some knowledge on mechanical engineering.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>[PreserveSig, MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType=MethodCodeType.Native), SuppressUnmanagedCodeSecurity]\n</code></pre>\n <p>\n  You see the first part saying unmanaged? .net is a 'managed' environment. As this is referred to the memory, I can tell you C and C++ are not (beware of C++.net as that is managed C++.\n </p>\n <p>\n  Anyway, by the looks of this I'd say it calls the function from an external source (I'd suspect a DLL).\n </p>\n <pre><code>internal static unsafe basic_string<char,std::char_traits<char>,std::allocator<char> >* modreq(IsUdtReturn) modopt(CallConvCdecl) _Encrypt(basic_string<char,std::char_traits<char>,std::allocator<char> >*, basic_string<char,std::char_traits<char>,std::allocator<char> > modopt(IsConst)* modopt(IsImplicitlyDereferenced));\n</code></pre>\n <p>\n  This says things about the method it is called\n  <code>\n   Cdecl\n  </code>\n  the function is called _Encrypt and has a few arguments.\n </p>\n <p>\n  Hope this helped, now you should first learn the basics, especially when you are going to dive into disassembling this native code.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Stolas",
            "time": "Oct 24, 2013 at 5:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1960364",
                    "text": "<span class=\"comment-copy\">Stolas, thanks. That helps shed some like on things. I had a hunch that it was in an external library, but wasn't sure. What would be the next step in locating it? I've found the function in OllyDBG but don't know how to break and step through it.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Try process monitor for example. Have a look on this Stack Exchange as there are some Questions about the basics and how to continue after installing OllyDBG.</span>",
                    "time": null
                }
            ]
        }
    ]
}