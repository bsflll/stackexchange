{
    "title": "Is there any tool which parses ollydbg run trace?",
    "link": "https://reverseengineering.stackexchange.com/questions/2412/is-there-any-tool-which-parses-ollydbg-run-trace",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently working on a tool to automate several actions which relate to unpacking software. I would like to use the run trace of Ollydbg (1.10 preferred since it has many antidebug/usage/etc plugins). However, I do not seem to know any library which offers parsing Ollydbg run trace.\n </p>\n <p>\n  Does anyone know of any library which can do that or any project which has already done it?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "1k",
    "tags": [
        "unpacking",
        "ollydbg"
    ],
    "user": "parser",
    "time": "Jul 4, 2013 at 16:55",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n The run trace log file is a simple text file with fixed-width (or tab-delimited, based on options) fields. Why do you need a special library to parse that?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner: on the contrary why reinvent the wheel when someone could have done it already? :) +1\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n @0xC0000022L: My point was that nobody has created a library for parsing an OllyDbg Run Trace string because parsing that string is already trivial. Why create a library when you can already parse the string with a single line of code?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner Totally agree +1\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner: even simple formats can be intricate to parse so the question isn't at all unwarranted. Reuse is usually encouraged everywhere, so discourage it here selectively?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have found that parsing the run trace is not as trivial as one would wish (and as I assumed too, like the people who commented your question). There are a few reasons for this:\n </p>\n <ol>\n  <li>\n   <p>\n    Fields are separated by a variable number of spaces. If one of the fields is too long, a single semicolon is used as a separator instead. However a variable number of spaces is not guaranteed to be a field separator.\n   </p>\n  </li>\n  <li>\n   <p>\n    One of the first fields is the address of the executed instruction. Instead of a hex address, this can also be a (possibly demangled C++) symbol. The lines can include beasts like\n   </p>\n   <pre><code>main  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >::~basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;push 0;0018EB38=0;ESP=0018EB38\n</code></pre>\n   <p>\n    Of course, demangled names can occur in the assembler instruction too as well, not only in the address field. Also, I believe that ABCDEF0 would be both a valid hex address and a valid symbol name, and they cannot be told apart since the trace only reports\n    <em>\n     either\n    </em>\n    the demangled name\n    <em>\n     or\n    </em>\n    the hex address.\n   </p>\n  </li>\n  <li>\n   <p>\n    When the data pointed to as indicated in the comments field of the trace contains ASCII or unicode data according to OllyDbg's heuristics, the contained string is displayed. At least newlines inside the strings are not escaped, so you have to deal with split lines.\n   </p>\n  </li>\n  <li>\n   <p>\n    Relevant at least if you would like to extract a call trace: It is not in general trivial do determine without referring to surrounding instructions whether a call was traced into (the normal case) or traced over (in case of Windows DLL calls). You can use heuristics like whether the \"call instruction\" is shown to modify other registers beyond ESP. By tracking ESP, it should be possible to determine this.\n   </p>\n  </li>\n  <li>\n   <p>\n    The precise format of the dump trace apparently depends heavily on the options, including things like whether the assembly mnemonic is separated from the operands by spaces or a tab, and whether the assembly displayed is all caps or in lower case.\n   </p>\n  </li>\n </ol>\n <p>\n  Everything above pertains to OllyDbg 2.01; I suspect there are bound to be differences between different versions (and I for one would not mind if the format was made more parseable in future versions).\n </p>\n <p>\n  Having said all that, I have written some (Haskell) code to parse the output that works for me right now with my particular options and the particular application dumped. Here's a PERL-compatible regular expression (won't work as is in a POSIX regex context) I use to match lines:\n </p>\n <pre><code>^main  ([0-9A-F]{8}|(?:unsigned |operator |vbase destructor|[^ ;]| >)+)(?: +|;)((?:[^=; ]|operator.{0,2}=| (?! ))+)(?:(?: +|;)([^ ]+=.*))?$\n</code></pre>\n <p>\n  The 1st capturing group is the address/symbolic name, the 2nd group is the assembly instruction, and the 3rd group is the \"comment\" portion of the line containing memory contents and register changes.\n </p>\n <p>\n  I think I will proceed to make my Haskell program into a filter which parses run traces and outputs them in a more readily machine-parseable format (maybe CSV or something); I can share the code if someone is interested. (Sorry about using Haskell; I just need performance that scripted languages don't give. The size of my dump is 2 gigabytes, and my Haskell parser consumes it at roughly 50 Mb/s.)\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Sami Liedes",
            "time": "Jan 4, 2014 at 2:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ollydbg runtrace has a profiling option inbuilt \nit can profile the runtrace either module wise \nor globally\n </p>\n <p>\n  go to run trace window\n  <code>\n   (...)icon\n  </code>\n  right click and select\n  <code>\n   profile module\n  </code>\n  or\n  <code>\n   global profile\n  </code>\n </p>\n <p>\n  a simple messagebox.exe (iczelions tutorial 2) will execute\n  <code>\n   1087946\n  </code>\n  instructions from system breakpoint to original entry point\n  <code>\n   skipping string commands repmovsb ... movsd\n  </code>\n  in\n  <code>\n   xpsp3\n  </code>\n </p>\n <pre><code>Run trace, selected line\n Back=1087946. \n Thread=Main\n Module=ntdll\n Address=7C90120F\n Command=RETN\n Modified registers=ESP=0013FB24\n</code></pre>\n <p>\n  and call _LdrSnapThunk about 1000 times\n </p>\n <pre><code>Profile of whole memory, item 30\n Count=1012.\n Address=7C917BF1 LdrpSnapThunk\n First command=MOV     EDI, EDI\n</code></pre>\n <p>\n  will call zwCreateFile 4 times\n </p>\n <pre><code>Profile of whole memory, item 1046\n Count=4.\n Address=7C90D0AE ZwCreateFile\n First command=MOV     EAX, 25\n</code></pre>\n <p>\n  from this global profile you can\n  <code>\n   hop back to disassembly window\n  </code>\n  or\n  <code>\n   run trace window\n  </code>\n  <code>\n   mark this position in run trace window\n  </code>\n  and\n  <code>\n   jump to next marked position\n  </code>\n </p>\n <p>\n  the details of\n  <code>\n   4 ZwCreateFile\n  </code>\n  from global profile to runtrace window correlated below\n </p>\n <pre><code>Run trace, selected line\n Back=978309. <-------------------\n Thread=Main\n Module=ntdll\n Address=7C90D0AE ZwCreateFile\n Command=MOV     EAX, 25\n Modified registers=EAX=00000025\n\nRun trace, selected line\n Back=975485. <----------------------\n Thread=Main\n Module=ntdll\n Address=7C90D0AE ZwCreateFile\n Command=MOV     EAX, 25\n Modified registers=EAX=00000025\n\n\nRun trace, selected line\n Back=956331. <-----------------------\n Thread=Main\n Module=ntdll\n Address=7C90D0AE ZwCreateFile\n Command=MOV     EAX, 25\n Modified registers=EAX=00000025\n\n\nRun trace, selected line\n Back=874497. <----------------------\n Thread=Main\n Module=ntdll\n Address=7C90D0AE ZwCreateFile\n Command=MOV     EAX, 25\n Modified registers=EAX=00000025\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Jul 10, 2013 at 10:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}