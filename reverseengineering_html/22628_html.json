{
    "title": "Why can I inherit handles from WSASocketA and not from socket?",
    "link": "https://reverseengineering.stackexchange.com/questions/22628/why-can-i-inherit-handles-from-wsasocketa-and-not-from-socket",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to write some custom shellcode to obtain a shell from a program.\nLooking at the program intermodular calls, I found a call to\n  <code>\n   socket()\n  </code>\n  , and my initial plan was to use that to create a new socket, connect back and spawn a shell.\n </p>\n <p>\n  I am able to to get a connection back, but unfortunately when I call\n  <code>\n   CreateProcessA\n  </code>\n  , I don't get any shell.\n </p>\n <p>\n  After the call to\n  <code>\n   socket()\n  </code>\n  I have the socket descriptor in EAX:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/8lqMR.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/8lqMR.png\"/>\n  </a>\n </p>\n <p>\n  And then, after\n  <code>\n   connect()\n  </code>\n  (which works, I get the connection back on my netcat listener), I call\n  <code>\n   CreateProcessA()\n  </code>\n  and this are the parameters:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/oWHjp.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/oWHjp.png\"/>\n  </a>\n </p>\n <p>\n  <code>\n   InheritHandles\n  </code>\n  is correctly set to TRUE. On the left panel I have dumped the\n  <code>\n   StartUpInfo\n  </code>\n  structure and as you can see the file descriptor is correctly added for all handles (first 3 bytes of the structure are all set to 200). Also the flag\n  <code>\n   STARTF_USESTDHANDLES\n  </code>\n  is correctly set.\n </p>\n <p>\n  Unfortunately, this doesn't work. What surprises me is that if instead of using the address of the intermodular call to\n  <code>\n   socket()\n  </code>\n  , I use the address of\n  <code>\n   WSASocketA\n  </code>\n  (found using arwin), and without changing anything else (apart from adding the extra null arguments required for WSASocketA), I can get my shell.\n </p>\n <p>\n  I don't understand why this is not happening with\n  <code>\n   socket()\n  </code>\n  , in fact, according to the documentation for the flag\n  <code>\n   WSA_FLAG_NO_HANDLE_INHERIT\n  </code>\n  of the\n  <code>\n   WSASocketA\n  </code>\n  :\n </p>\n <blockquote>\n  <p>\n   Create a socket that is non-inheritable.\n  </p>\n  <p>\n   A socket handle created by the WSASocket or the socket function is\n  inheritable by default. When this flag is set, the socket handle is\n  non-inheritable.\n  </p>\n </blockquote>\n <p>\n  So I assumed that by default it should work with both functions.\n </p>\n <p>\n  I don't know if this is relevant, but I'm testing it against a Windows 7 machine.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "393",
    "tags": [
        "windows",
        "shellcode"
    ],
    "user": "Zagorax",
    "time": "Nov 27, 2019 at 10:39",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n This isn't really a reverse engineering question. My guess would be that - given you compare WinSock with the socket implementation inherited from BSD - that's your answer right there ...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Windows\n  <code>\n   socket()\n  </code>\n  creates a socket with\n  <code>\n   WSA_FLAG_OVERLAPPED\n  </code>\n  flag set and inheritable by default.\n </p>\n <p>\n  Windows\n  <code>\n   WSASocket()\n  </code>\n  allows you to specify\n  <code>\n   WSA_FLAG_OVERLAPPED\n  </code>\n  and\n  <code>\n   WSA_FLAG_NO_HANDLE_INHERIT\n  </code>\n  .  If you\n  <strong>\n   omit\n  </strong>\n  both flags to\n  <code>\n   WSASocket()\n  </code>\n  , then the resulting socket will be inheritable and will not have\n  <code>\n   WSA_FLAG_OVERLAPPED\n  </code>\n  flag set.\n </p>\n <p>\n  Unlike on Unix, Windows\n  <code>\n   SOCKET\n  </code>\n  is different from file descriptors or pipes.  If you pass a socket to Windows\n  <code>\n   CreateProcess\n  </code>\n  using\n  <code>\n   STARTF_USESTDHANDLES\n  </code>\n  , the socket\n  <strong>\n   must not\n  </strong>\n  have\n  <code>\n   WSA_FLAG_OVERLAPPED\n  </code>\n  flag set.\n </p>\n <p>\n  You managed to (accidentally) use\n  <code>\n   WSASocket()\n  </code>\n  without flags, so created an inheritable socket without\n  <code>\n   WSA_FLAG_OVERLAPPED\n  </code>\n  , so it worked for you!\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "gstrauss",
            "time": "Feb 24, 2023 at 11:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}