{
    "title": "Unpacking a Digi Connect ME bin file",
    "link": "https://reverseengineering.stackexchange.com/questions/4331/unpacking-a-digi-connect-me-bin-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working with a Digi Connect ME serial to Ethernet bridge, which runs a \"Plug and Play\" firmware by default.\n </p>\n <p>\n  The specific product page is\n  <a href=\"http://www.digi.com/products/wireless-wired-embedded-solutions/solutions-on-module/digi-connect/digiconnectme\" rel=\"nofollow\">\n   here\n  </a>\n  . The part number is DC-ME-01T-S. It appears to be an ARM based board - a NS7520 specifically. This is not the product with NET+OS or a JTAG port.\n </p>\n <p>\n  The support page is\n  <a href=\"http://www.digi.com/support/productdetail?pid=2466\" rel=\"nofollow\">\n   here\n  </a>\n  - contains firmware, documentation, drivers.\n </p>\n <p>\n  Digi provide .bin files, but no source code.\n </p>\n <p>\n  I am trying to unpack the .bin files but I am not having much luck. binwalk doesn't pick up anything, mkimage from u-boot doesn't find the magic number (some other Digi products use U-boot), file just indicates it is data.\n </p>\n <p>\n  There seem to be two firmwares - the large EOS file and a smaller POST file. I suspect the POST one might be a bootloader - it doesn't look compressed.\n </p>\n <p>\n  Here is a link to the most recent EOS firmware:\n  <a href=\"http://ftp1.digi.com/support/firmware/82001120_M.bin\" rel=\"nofollow\">\n   http://ftp1.digi.com/support/firmware/82001120_M.bin\n  </a>\n </p>\n <p>\n  And the post firmware:\n  <a href=\"http://ftp1.digi.com/support/firmware/82000867_H.bin\" rel=\"nofollow\">\n   http://ftp1.digi.com/support/firmware/82000867_H.bin\n  </a>\n </p>\n <p>\n  Entropy analysis of the EOS firmware shows high entropy throughout the file.\n </p>\n <p>\n  The NET+OS version of the Digi Connect ME runs Digi's NET+OS network operating system which is based on ThreadX's RTOS. I am not sure if the Plug and Play firmware is just a specific variant of this.\n </p>\n <p>\n  The Digi Connect Me is used in a lot of embedded devices to provide network connectivity and a lot of them are open to the Internet, hence the interest.\n </p>\n <p>\n  It's not like anything I have seen before.\n </p>\n <p>\n  My first goal is to run strings against the firmware as I suspect it has undocumented functionality when running in modem emulation mode.\n </p>\n <p>\n  Any hints?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "firmware",
        "unpacking",
        "binary"
    ],
    "user": "Cybergibbons",
    "time": "May 14, 2014 at 13:12",
    "comments": [
        {
            "user": "ixje",
            "text": "<html><body><span class=\"comment-copy\">\n Can you link us the exact product you're using? There's quite some datasheets floating around for digi products. Maybe there's some hint for code protection in there. The high entropy of the binary file suggest to me it's compressed or encrypted/scrambled some how (starting from ~0x8F0). Therefore I'd like to understand if there's a chip build in feature for something like this.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "<html><body><span class=\"comment-copy\">\n Yes - bulking out question now.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ixje",
            "text": "<html><body><span class=\"comment-copy\">\n From the POST file I assume the EOS can be updated through TFTP. The \"Put TFTP'd OS file into flash\" together with some other hints suggest a console with programming abilities. I'd start by analyzing the POST file and focus around the logic related to this function to see if it does anything special before programming the data to flash (quick fyi; flash is at 0x02000000). Quick scanning the datasheet I did not find any references to hardware blocks that do any on the fly (de)obfuscation, so software based it most likely.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ixje",
            "text": "<html><body><span class=\"comment-copy\">\n any progress or stuck somewhere?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "<html><body><span class=\"comment-copy\">\n Not had a chance to look yet - hope to have a look this weekend. The POST firmware does seem to make some sense, but I can't see an obvious decompression routine.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The POST firmware is raw ARM big-endian code. Load address is 0x02020000. There doesn't seem to be any embedded sub-files or filesystems.\n </p>\n <p>\n  The EOS firmware has a few ARM instructions at the beginning, and then some compressed or encrypted data. You'll probably need to analyze the POST firmware to figure out how to decompress it.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "May 15, 2014 at 0:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}