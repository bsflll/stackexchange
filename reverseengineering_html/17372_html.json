{
    "title": "ELF64 Reflective Loading [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17372/elf64-reflective-loading",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/17372/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2018-02-04 20:21:32Z\">\n        7 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/17372/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm looking for an ELF64 reflective loader, so I can download an ELF and execute it without saving to disk?\n </p>\n <p>\n  Is anyone able to point me at one please?  Or a clear one for ELF32 so I can translate?\n </p>\n <p>\n  thanks\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "580",
    "tags": [
        "malware",
        "elf"
    ],
    "user": "user7282391",
    "time": "7 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Code for diskless loading of ELF Shared Library using Reflective DLL Injection\n  \n\n  <a href=\"https://github.com/nsxz/ReflectiveELFLoader\" rel=\"nofollow noreferrer\">\n   https://github.com/nsxz/ReflectiveELFLoader\n  </a>\n </p>\n <blockquote>\n  <p>\n   Code for diskless loading of ELF Shared Library using Reflective DLL\n  Injection technique. Currently, this is only designed to work on\n  x86_64 (AMD64) architecture on Linux. I was originally hoping to be\n  able to expand this to other architectures and FreeBSD. However, I do\n  not have time to implement this on other architectures and since I\n  only need it to work on x86_64 on Linux this is the only portion I\n  have implemented.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user22363",
            "time": "Feb 3, 2018 at 19:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user7282391",
                    "text": "<span class=\"comment-copy\">Hi thanks. I've seen your code already, I'm looking to load a static binary into a process which is already mapped to 0x40000, will it remap the code for whether it gets malloced?</span>",
                    "time": null
                },
                {
                    "user": "user22363",
                    "text": "<span class=\"comment-copy\">You should mention that you already see the code in your question, and it's not my code.</span>",
                    "time": null
                }
            ]
        }
    ]
}