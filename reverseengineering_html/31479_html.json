{
    "title": "Java bytecode dynamic analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/31479/java-bytecode-dynamic-analysis",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been trying to patch a certain functionality of a jar file, that's essentially a GUI app. I've tried numerous java agents -as it seems to be the only viable option for java- for such a task, however quite a few limitations arose. Namely:\n </p>\n <ul>\n  <li>\n   Previously loaded classes don't fire up again during logging (causes plot holes).\n  </li>\n  <li>\n   Specific method calls are often omitted.\n  </li>\n  <li>\n   Real time decompilation is unheard of when it comes this approach, even though it's generally feasible.\n  </li>\n </ul>\n <p>\n  I was wondering if there's a better approach -or an alternative that addresses those 'issues'- to go about dynamically analyse java executables, and not just instrumentation; as it seems to be geared more towards debugging during development rather than reverse engineering.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "103",
    "tags": [
        "java",
        "jar"
    ],
    "user": "kqvanity",
    "time": "Jan 28, 2023 at 2:51",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n So your question is a bout temporarily modifying a Java program? Because for a permanent modification it would be easier to directly modify the class files. For temporary modification\n <a href=\"https://frida.re\" rel=\"nofollow noreferrer\">\n  frida.re\n </a>\n should be suitable. Hooking and modifying method arguments and return values should be easier with Frida than using an JavaAgent.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "kqvanity",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert\n <code>\n  your question is a bout temporarily modifying a Java program?\n </code>\n It's more about understanding the obfuscated code, by interacting with certain functionalities at the app itself then simultaneously seeing which specific portions are getting called, and selectively inspect them (that's why i was asking for concurrent deobfuscation to omit this separate inspection stage).\n <code>\n  should be easier with Frida than using an JavaAgent.\n </code>\n Aw. I thought it was only confined to Android.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Since Frida 12.10 there is also support for HotSpot JVM (non-Android)\n <a href=\"https://frida.re/news/2020/06/29/frida-12-10-released/\" rel=\"nofollow noreferrer\">\n  frida.re/news/2020/06/29/frida-12-10-released\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "kqvanity",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks. Will look into frida as of now, as I've never dealt with it before.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}