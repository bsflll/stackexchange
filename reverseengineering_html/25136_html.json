{
    "title": "X86 access to global strings pattern",
    "link": "https://reverseengineering.stackexchange.com/questions/25136/x86-access-to-global-strings-pattern",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While reversing some\n  <code>\n   x86\n  </code>\n  executables, I came across a pattern of addressing globals, that I don't familiar with, but it looks like IDA is, and I would like to know more about it.\n </p>\n <pre><code>.text:00002560             public start\n.text:00002560             start proc near\n.text:00002560 mov     ebx, [esp+0]\n.text:00002563 ret          \n\n.text:0001D233 push    ebx\n.text:0001D234 call    start ; ebx is initialized here \n.text:0001D239 add     ebx, 1805Bh \n\n.text:0001D25A lea     edi, (aLsi_0 - 35294h)[ebx] ; \"lsi\" <---- Ida recognizes here an access to global string.\n</code></pre>\n <p>\n  I saw this pattern in many different binaries. Does anyone know what is the name of this kind of access and where can I read more about it?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "127",
    "tags": [
        "ida",
        "disassembly",
        "x86"
    ],
    "user": "macro_controller",
    "time": "May 28, 2020 at 9:25",
    "comments": [
        {
            "user": "macro_controller",
            "text": "<html><body><span class=\"comment-copy\">\n I understand what happens, but I wonder what is the name of this kind of pattern\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n It is a variant of position-independent code. A more common construction (and much harder to disassemble) is\n <code>\n  call _next; _next: pop ebx\n </code>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The function you (or IDA) labeled\n  <code>\n   start\n  </code>\n  is commonly called\n  <code>\n   __x86.get_pc_thunk.bx\n  </code>\n  and is used by GCC and other compilers to calculate the current execution address for\n  <em>\n   Position independent code\n  </em>\n  (PIC). Usually the\n  <code>\n   add\n  </code>\n  instruction after the call results in\n  <code>\n   ebx\n  </code>\n  gettng the value of the GOT (Global offset table) so that external calls can be done without extra setup (the PLT stubs for external calls in PIC executables assume that\n  <code>\n   ebx\n  </code>\n  points to the GOT), but also global data can be addressed using a fixed offset relative to the GOT. This way the code can run regardless of the actual address at which it has been loaded by the OS (i.e. it is position independent).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 28, 2020 at 12:10",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have seen code like this, but it was quite a while ago!  It only ever relates to the accessing of global variables: often called a Global Offset Table.  More info here:\n  <a href=\"https://stackoverflow.com/questions/55587313/why-use-the-global-offset-table-for-symbols-defined-in-the-shared-library-itself\">\n   https://stackoverflow.com/questions/55587313/why-use-the-global-offset-table-for-symbols-defined-in-the-shared-library-itself\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Dave Jewell",
            "time": "May 28, 2020 at 10:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}