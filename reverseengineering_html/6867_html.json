{
    "title": "Trying to reverse GPS Watch firmware image with binwalk",
    "link": "https://reverseengineering.stackexchange.com/questions/6867/trying-to-reverse-gps-watch-firmware-image-with-binwalk",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm in the process of trying to reverse engineer a GPS-watch firmware image in purpose of adding a new feature to the watch. Here's what I got so far\n </p>\n <ul>\n  <li>\n   I have the firmware image (.gcd file). AFAIK it's no common image, I couldn't find\n   <em>\n    any\n   </em>\n   information about it from googling\n  </li>\n </ul>\n <p>\n  Here's the\n  <code>\n   binwalk\n  </code>\n  output:\n </p>\n <pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n344446        0x5417E         Zlib compressed data, default compression\n548342        0x85DF6         Zlib compressed data, default compression\n548698        0x85F5A         Zlib compressed data, default compression\n548849        0x85FF1         Zlib compressed data, compressed\n549789        0x8639D         Zlib compressed data, compressed\n550677        0x86715         Zlib compressed data, compressed\n550878        0x867DE         Zlib compressed data, default compression\n551849        0x86BA9         Zlib compressed data, default compression\n551871        0x86BBF         Zlib compressed data, best compression\n552002        0x86C42         Zlib compressed data, default compression\n552145        0x86CD1         Zlib compressed data, compressed\n552274        0x86D52         Zlib compressed data, default compression\n552425        0x86DE9         Zlib compressed data, compressed\n552778        0x86F4A         Zlib compressed data, default compression\n553056        0x87060         Zlib compressed data, default compression\n553199        0x870EF         Zlib compressed data, compressed\n554875        0x8777B         Zlib compressed data, compressed\n555202        0x878C2         Zlib compressed data, default compression\n555341        0x8794D         Zlib compressed data, compressed\n555600        0x87A50         Zlib compressed data, default compression\n555778        0x87B02         Zlib compressed data, default compression\n555928        0x87B98         Zlib compressed data, default compression\n556221        0x87CBD         Zlib compressed data, compressed\n556502        0x87DD6         Zlib compressed data, default compression\n556612        0x87E44         Zlib compressed data, default compression\n556953        0x87F99         Zlib compressed data, compressed\n559176        0x88848         Zlib compressed data, default compression\n559922        0x88B32         Zlib compressed data, default compression\n560116        0x88BF4         Zlib compressed data, default compression\n560292        0x88CA4         Zlib compressed data, default compression\n560417        0x88D21         Zlib compressed data, compressed\n560774        0x88E86         Zlib compressed data, default compression\n561567        0x8919F         Zlib compressed data, default compression\n562207        0x8941F         Zlib compressed data, best compression\n670601        0xA3B89         Zlib compressed data, best compression\n673859        0xA4843         Zlib compressed data, compressed\n678389        0xA59F5         Zlib compressed data, default compression\n797326        0xC2A8E         Zlib compressed data, default compression\n811248        0xC60F0         Zlib compressed data, compressed\n850955        0xCFC0B         Zlib compressed data, best compression\n1023917       0xF9FAD         Zlib compressed data, best compression\n1079306       0x10780A        Zlib compressed data, default compression\n1278786       0x138342        Zlib compressed data, default compression\n1278986       0x13840A        Zlib compressed data, default compression\n1279066       0x13845A        Zlib compressed data, default compression\n1279106       0x138482        Zlib compressed data, default compression\n1279186       0x1384D2        Zlib compressed data, default compression\n1279226       0x1384FA        Zlib compressed data, default compression\n1281321       0x138D29        Copyright string: \" 2002-2009n\"\n1284386       0x139922        XML document, version: \"1.0\"\n1294150       0x13BF46        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 754974720 bytes\n1294166       0x13BF56        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes\n1294182       0x13BF66        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes\n1294206       0x13BF7E        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes\n1294222       0x13BF8E        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes\n1370193       0x14E851        Zlib compressed data, default compression\n</code></pre>\n <p>\n  It all seems like a false positive because when I run\n  <code>\n   binwalk -e\n  </code>\n  I get these files as output:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/jrxCN.png\"/>\n </p>\n <p>\n  All files without file suffixes are empty and the zip files give an error. ( I can't unzip the zlib files)\n </p>\n <p>\n  From\n  <code>\n   hexdump\n  </code>\n  output I see quite a lot of ascii which I guess indicates it's not encrypted. Especially I've found that there seems to be some sort of language files between\n  <code>\n   0x10780A\n  </code>\n  and\n  <code>\n   0x138342\n  </code>\n </p>\n <p>\n  I've included the hexdump as hex2.out\n </p>\n <p>\n  <a href=\"https://www.dropbox.com/sh/60fl2temsvbf29i/AAAAX1-vz-M-LWhnGs5aAsvCa?dl=0\" rel=\"nofollow noreferrer\">\n   All the files can be found here\n  </a>\n </p>\n <p>\n  <strong>\n   My question is:\n  </strong>\n  Where do I go from here? Please help, I've no idea.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "3k",
    "tags": [
        "firmware",
        "embedded"
    ],
    "user": "Markus",
    "time": "Dec 22, 2014 at 5:47",
    "comments": [
        {
            "user": "Kenji Noguchi",
            "text": "<html><body><span class=\"comment-copy\">\n Someone wrote a tool in Python3.\n <a href=\"https://github.com/mbirth/gcd-parser\" rel=\"nofollow noreferrer\">\n  github.com/mbirth/gcd-parser\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The Garmin GCD file format is documented\n  <a href=\"http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=115804#777367\" rel=\"noreferrer\">\n   here\n  </a>\n  , with some additional information\n  <a href=\"http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=115804#777367\" rel=\"noreferrer\">\n   here\n  </a>\n  and\n  <a href=\"http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=117239\" rel=\"noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Furthermore, it looks like somebody already wrote a\n  <a href=\"http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=137838\" rel=\"noreferrer\">\n   tool\n  </a>\n  (mirrored\n  <a href=\"http://garminmontanagpsr.wikispaces.com/file/view/RGN_Tool.exe/333010964/RGN_Tool.exe\" rel=\"noreferrer\">\n   here\n  </a>\n  ) for handling and manipulating Garmin GCD files:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/StceH.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Jason Geffner",
            "time": "Dec 21, 2014 at 17:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Markus",
                    "text": "<span class=\"comment-copy\">Thank you, just what I was looking for! Next step was to find  a tool to further disassemble the bin files to which I found <a href=\"http://sourceforge.net/projects/garminidaloader/\" rel=\"nofollow noreferrer\">garmin-ida-loader</a> a loader for IDA. I'm not that familiar with IDA so do you know a better tool for it?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">When it comes to disassembling, there is no better tool than IDA. However, the Garmin devices are apparently running ARM processors, so any ARM disassembler should be able to handle the extracted files.</span>",
                    "time": null
                },
                {
                    "user": "Jonas Stein",
                    "text": "<span class=\"comment-copy\">@JasonGeffner The links are no longer available</span>",
                    "time": null
                }
            ]
        }
    ]
}