{
    "title": "how to flash image.bin with uboot using serial or tftp",
    "link": "https://reverseengineering.stackexchange.com/questions/21815/how-to-flash-image-bin-with-uboot-using-serial-or-tftp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hello I have a 4G LTE router which is blocked. and I have already dumped the partitions before via\n  <code>\n   telnet\n  </code>\n  from another device of the same model.\n </p>\n <pre><code>    U-Boot 2010.09 (Sep 06 2016 - 10:08:39)GCT GDM7243\n\n\n\nBuild Info:\n\n  date: 2016/09/06-10:08:44\n\n  user: root@ubuntu-will\n\n  svnr: \n\n  src: /home/will/DEVELOPMENT/LTE_Router/B5328_FDD/SDK/work/uboot\n\n  ver: 0.46e\n\n\n\nDRAM:  128 MiB (wbd-p2)\n\nNAND:  Built-in ECC Nand\nmaf_id : 0x00000098, dev_id : 0x000000a1\nPagesize : 2Kbytes\nAddress cycle : 4\n128 MiB\nBad block table found at page 65472, version 0x01\nBad block table found at page 65408, version 0x01\nnand_read_bbt: Bad block at 0x000006000000\nIn:    serial\nOut:   serial\nErr:   serial\nNet:    001cc910 Realtek8211  PHYCR1: 0000211c  Rx delay: 0x00802300 \n    PHYCR2:0x842  mii0\nHit ENTER key to stop autoboot:  5  4  3  2  1  0 \nGPIO RESET KEY OFF\n00420000\n---------------------\nhdr chksum  : 0xffffffff\nmagic       : 0xffffffff\ntimstamp    : 0xffffffff\ndata chksum : 0xffffffff\ndata size   : 0xffffffff\n---------------------\nimage header magic is invalid\n00440000\n---------------------\nhdr chksum  : 0xa6160741\nmagic       : 0xcafebabe\ntimstamp    : 0x00000003\ndata chksum : 0xf314f304\ndata size   : 0x0001ffdc\n---------------------\ncmnnv current block is : 1\npesifwcheck=1\nErasing Nand...\n\nErasing at 0x80000 --  25% complete.\nErasing at 0xa0000 --  50% complete.\nErasing at 0xc0000 --  75% complete.\nErasing at 0xe0000 -- 100% complete.\nWriting to Nand... done\n\nboot from part_idx: 2\ndo_check_partition() type:linux2, ---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\nno valid header(0)\nThere are no valid headers\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\nno valid header(1)\nThere are no valid headers\nErasing Nand...\n\nErasing at 0x80000 --  25% complete.\nErasing at 0xa0000 --  50% complete.\nErasing at 0xc0000 --  75% complete.\nErasing at 0xe0000 -- 100% complete.\nWriting to Nand... done\n\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\nno valid header(0)\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\nno valid header(2)\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\n---------------------\nhdr chksum  : 0x00000000\nmagic       : 0x00000000\ntimstamp    : 0x00000000\ndata chksum : 0x00000000\ndata size   : 0x00000000\n---------------------\n  ## Booting kernel from Legacy Image at d05fffc0 ...\n   Image Name:   Linux-3.10.0-uc0\n   Image Type:   ARM Linux Kernel Image (uncompressed)\n   Data Size:    2317840 Bytes = 2.2 MiB\n   Load Address: d0600000\n   Entry Point:  d0600000\n   Verifying Checksum ... Bad Data CRC\nERROR: can't get kernel image!\n</code></pre>\n <p>\n  If I try to boot from TFTP the image loads just fine and everything is working.\n </p>\n <p>\n  I flashed the\n  <code>\n   linux.bin\n  </code>\n  image to the respective partition but I don't know what I need to do to be able to get the device working again. Maybe flashing from U-Boot will get it to work .\n </p>\n <p>\n  Here's the boot process information from TFTP:\n </p>\n <pre><code>    Using mii0 device\nTFTP from server 192.168.0.10; our IP address is 192.168.0.1\nFilename 'linux.bin'.\nLoad address: 0xd05fffc0\nLoading: *##T ###############################################################\n     #################################################################\n     #################################################################\n     #################################################################\n     ##########################\ndone\nBytes transferred = 4194304 (400000 hex)\nAutomatic boot of image at addr 0xD05FFFC0 ...\n## Booting kernel from Legacy Image at d05fffc0 ...\n   Image Name:   Linux-3.10.0-uc0\n   Image Type:   ARM Linux Kernel Image (uncompressed)\n   Data Size:    2317840 Bytes = 2.2 MiB\n   Load Address: d0600000\n   Entry Point:  d0600000\n   Verifying Checksum ... OK\n   Loading Kernel Image ... OK\nOK\n\nStarting kernel ...\n\nUncompressing Linux... done, booting the kernel.\ngipc-protocol address: d4880010\nipc config: 00000004\n  router-device\ns-ch_enabled: 0x10010001\ns-ch_enabled: 0x10010001\ns-ch_enabled: 0x10010001\nipc magic=0x40540103(12)\ns-ch_enabled: 0x10010003\n</code></pre>\n <p>\n  Here's the partition layout:\n </p>\n <pre><code>device nand0 <gdm7243>, # parts = 17\n #: name        size        offset      mask_flags\n 0: u-boot              0x00080000  0x00000000  0\n 1: env                 0x00080000  0x00080000  0\n 2: rev0                0x00100000  0x00100000  0\n 3: ltenv               0x00100000  0x00200000  0\n 4: wmnv                0x00100000  0x00300000  0\n 5: cmnnv               0x00100000  0x00400000  0\n 6: cmnnv2              0x00100000  0x00500000  0\n 7: rev1                0x00400000  0x00600000  0\n 8: linux               0x00400000  0x00a00000  0\n 9: linux2              0x00400000  0x00e00000  0\n10: rootfs              0x01e00000  0x01200000  0\n11: rootfs2             0x01e00000  0x03000000  0\n12: tk                  0x00500000  0x04e00000  0\n13: tk2                 0x00500000  0x05300000  0\n14: customize           0x00080000  0x05800000  0\n15: log                 0x00280000  0x05880000  0\n16: update              0x02000000  0x05b00000  0\n\nactive partition: nand0,0 - (u-boot) 0x00080000 @ 0x00000000\n\ndefaults:\nmtdids  : nand0=gdm7243\nmtdparts: mtdparts=gdm7243:512k(u-boot),512k(env),1m(rev0),1m(ltenv),1m(wmnv),1m(cmnnv),1m(cmnnv2),4m(rev1),4m(linux),4m(linux2),30m(rootfs),30m(rootfs2),5m(tk),5m(tk2),512k(customize),2560k(log),32m(update)\n</code></pre>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "linux",
        "flash"
    ],
    "user": "coolirc",
    "time": "Dec 18, 2019 at 12:59",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. This is borderline off-topic. But I sympathize, having been there. Have you checked the (U-Boot) environment? Typically the checksum will be stored there. Try to set the checksum value on the \"bricked\" device to the value of the working one (assuming that's the kernel you are trying to boot). I may be completely wrong here, but I have had devices working like that. The checksum is just that: a way to check the integrity of the kernel image, not primarily tamper-proofing a device. Alternatively try U-Boot's\n <code>\n  crc32\n </code>\n command on the address at which you loaded the kernel.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n For showing the environment, try\n <code>\n  printenv\n </code>\n and be sure that you have a valid U-Boot image (the\n <code>\n  file\n </code>\n command may be of help).\n <code>\n  setenv\n </code>\n and\n <code>\n  saveenv\n </code>\n can be used to manipulate the environment and save your changes.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>kernel_load_addr=0xd0600000\nfilesize=400000\n</code></pre>\n <p>\n  then reset the device . it should be working.\n </p>\n <pre><code>Starting kernel ...\n\nUncompressing Linux... done, booting the kernel.\ngipc-protocol address: d4880010\nipc config: 00000004\n  router-device\ns-ch_enabled: 0x10010001\ns-ch_enabled: 0x10010001\ns-ch_enabled: 0x10010001\nipc magic=0x40540103(12)\ns-ch_enabled: 0x10010003\n</code></pre>\n <p>\n  Still the issue persist after the second reboot. \nif I reboot after typing these commands the device actually boots up normally but if i restart a second time the error will reappear again . still something to investigate on the problem.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "coolirc",
            "time": "Dec 18, 2019 at 12:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}