{
    "title": "Setting an IDA function pointer in a struct via script",
    "link": "https://reverseengineering.stackexchange.com/questions/4750/setting-an-ida-function-pointer-in-a-struct-via-script",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The ordinary, manual way of redefining a\n  <code>\n   struct\n  </code>\n  member to become a function pointer would be to press on it, hit '\n  <kbd>\n   Y\n  </kbd>\n  ', and enter the proper declaration in the popup box. For example, for\n  <code>\n   struct\n  </code>\n  member\n  <code>\n   fncQuery\n  </code>\n  , I would change the string to:\n  <code>\n   BOOL (__cdecl *fncQuery)(char *cmdID)\n  </code>\n </p>\n <p>\n  This would be helpful; When I next identify a call to this function pointer, I would mark the appropriate\n  <code>\n   call [reg+offset]\n  </code>\n  line as this function pointer, and IDA will re-analyze and comment the parameters for me.\n </p>\n <p>\n  I have a thousand\n  <code>\n   struct\n  </code>\n  each with at least one such function pointer member, and corresponding lists of the descriptions of these functions' parameters and return values. Understandably, I want to match them up by an IDAPython script rather than by hand. However, I can't find an equivalent for the '\n  <kbd>\n   Y\n  </kbd>\n  ' button for scripts:\n </p>\n <ul>\n  <li>\n   <p>\n    <code>\n     AddStrucMember\n    </code>\n    does not cut it as far as I know - I can declare a member to become a pointer to a\n    <code>\n     struct\n    </code>\n    by giving it a\n    <code>\n     structID\n    </code>\n    , but that's not what I need.\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     SetMemberType\n    </code>\n    is the same as the previous.\n   </p>\n  </li>\n  <li>\n   <p>\n    <code>\n     SetType\n    </code>\n    requires a linear address and a type string - which would be perfect except linear addresses are exclusive to the code section, so I can't touch structure member definitions with\n    <code>\n     SetType\n    </code>\n    .\n   </p>\n  </li>\n </ul>\n <p>\n  In my search I've found someone who conjured up dark magic, incorporating low level\n  <code>\n   idaapi\n  </code>\n  into his IDAPython script, to detect if a\n  <code>\n   struct\n  </code>\n  member has the same name as a known function, and if it does, \"\n  <em>\n   gets\n  </em>\n  \" the type of that function and \"\n  <em>\n   sets\n  </em>\n  \" it onto the member. Specifically, such horrible calls are seen (taken out of context of its definitions, you'll have to trust me when I say this runs properly and the first function call fills up its many outparameters with meaningful values):\n </p>\n <pre><code>get_named_type = g_dll.get_named_type\nget_named_type.argtypes = [\n  ctypes.c_void_p, #const til_t *ti,\n  ctypes.c_char_p, #const char *name,\n  ctypes.c_int, #int ntf_flags,\n  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const type_t **type=NULL,\n  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const p_list **fields=NULL,\n  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const char **cmt=NULL,\n  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const p_list **fieldcmts=NULL,\n  ctypes.POINTER(ctypes.c_ulong), #sclass_t *sclass=NULL,\n  ctypes.POINTER(ctypes.c_ulong), #uint32 *value=NULL);\n]\n\nget_named_type(\n            til,\n            funcname,\n            idaapi.NTF_SYMM,\n            ctypes.byref(typ_type),\n            ctypes.byref(typ_fields),\n            ctypes.byref(typ_cmt),\n            ctypes.byref(typ_fieldcmts),\n            ctypes.byref(typ_sclass),\n            ctypes.byref(value)\ntype_arr = ctypes.create_string_buffer(0x400)\n            type_arr[0] = chr(idaapi.BT_PTR)\n            manualTypeCopy(type_arr, 1, len(type_arr), typ_type)\n            ret = g_dll.set_member_tinfo(\n                til,\n                struc,\n                memb,\n                ctypes.c_uint(0),\n                type_arr,\n                typ_fields,\n                ctypes.c_uint(0),\n            )\n</code></pre>\n <p>\n  The work behind the scenes on \"\n  <code>\n   get_named_type\n  </code>\n  \" eludes me, and looking into its source (and fashioning something from it for my use) may be strong headed and premature.\n </p>\n <p>\n  Do you know of an easier way my need can be fulfilled ? I just need to define structure members as function pointers from an IDAPython script. Please help !\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "idapython",
        "struct"
    ],
    "user": "Sleeptime",
    "time": "Jul 1, 2014 at 17:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <kbd>\n   Y\n  </kbd>\n  key equivalent is indeed the\n  <code>\n   SetType\n  </code>\n  (or, rather,\n  <code>\n   ApplyType\n  </code>\n  ) function, and it normally accepts addresses. However, you actually can pass the structure member ID as the \"address\" to set the member's type info.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jul 2, 2014 at 10:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sleeptime",
                    "text": "<span class=\"comment-copy\">I tried and couldn't get it to succeed. Unless the type syntax needs to be fundamentally different somehow, SetType(memberid, \"int\") failed whereas SetType(linear_address_of_some_data, \"int\") succeeded.  Edit: ApplyType() at least seems to return True as opposed to SetType(), but when I detect such a fptr call in my code and tag it as such it still does not automatically mark the parameters as the IDs I gave to them Second edit: SetType() succeeds despite the False return value (and the documentation that claims that's a failure.) So this works. Thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a better way to do it which does not involve setting particular type to structure member.\n </p>\n <p>\n  You can create a header file with corresponding structure definition and import it by calling\n </p>\n <pre><code>idc.ParseTypes(filename, idc.PT_FILE | idc.PT_PAK1)\nidc.Til2Idb(-1, strname)\n</code></pre>\n <p>\n  In addition you can try to look to source code of Milan Bohacek's hexrays_tools plugin and try to export corresponding functions to your own python module.\n </p>\n <p>\n  Source of the plugin is available\n  <a href=\"https://hex-rays.com/contests/2013/hexrays_tools.zip\" rel=\"nofollow\">\n   here, link from hex-rays plugin contest page\n  </a>\n </p>\n <p>\n  Explanation of how to export Hexrays internal into python calls can be found in\n  <a href=\"http://www.hexblog.com/?p=126\" rel=\"nofollow\">\n   hexrays blog\n  </a>\n  but you should take specific care of GIL (see\n  <a href=\"http://www.hexblog.com/?p=788\" rel=\"nofollow\">\n   here\n  </a>\n  )\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Jul 2, 2014 at 7:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}