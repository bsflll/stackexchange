{
    "title": "Identifying jump table of a switch statement",
    "link": "https://reverseengineering.stackexchange.com/questions/11695/identifying-jump-table-of-a-switch-statement",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using a linear disassembler (beaEngine), and whenever I get to a jump table section, I get an error (or an incorrect decode since beaEngine mistakenly thinks it is code).\n </p>\n <p>\n  How can I recognize this section as a jump table? What is the characteristic of a jump table?\n </p>\n <p>\n  An example of a jump table which was found via a 3rd party application:\n </p>\n <pre>\n.text:600F49CB                 dd offset loc_600F496E  \n.text:600F49CB                 dd offset loc_600F4984  \n.text:600F49CB                 dd offset loc_600F4979  \n.text:600F49CB                 dd offset loc_600F4979  \n.text:600F49CB                 dd offset loc_600F4984  \n.text:600F49CB                 dd offset loc_600F499E   \n.text:600F49CB                 dd offset loc_600F499E   \n.text:600F49CB                 dd offset loc_600F498F   \n.text:600F49CB                 dd offset loc_600F498F   \n</pre>\n <p>\n  In order to clarify and to answer a question raised in a comment: this executable does have a relocation table. beaEngine does not seem to use it, though, since I feed it a stream of bytes and not the whole binary.\n </p>\n <p>\n  Can I use the relocation table to comprehend whether it's a jump table and calculate its length? For a single example I've checked, it does seem to work.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 4,
    "views": "3k",
    "tags": [
        "disassemblers"
    ],
    "user": "user14614",
    "time": "Jan 5, 2016 at 14:55",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Try, at least, to provide an example of a jump table you found.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Does this executable have a Relocation Table? Does beaEngine use it when it finds one?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Jump tables stand out in relocation tables because they are arrays of tightly packed code addresses whereas 'normal' code references are much more spaced out, with opcodes or other data between.\n </p>\n <p>\n  However, vtables (virtual function tables for C++ style objects) and function tables (for C-style objects, heavily used in some libraries) look almost exactly the same as jump tables when viewed through the lens of relocations. The difference is that the latter two types of 'code address arrays' contain function addresses whereas jump table entries usually point\n  <strong>\n   into\n  </strong>\n  functions.\n </p>\n <p>\n  However, it is difficult to analyse jump tables without analysing the code that references them. This means that the info gleaned from the relocation tables is more suited for auxiliary duties in this case, like telling you about potential jump tables that your disassembler might have missed, rather than for primary analysis.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "DarthGizka",
            "time": "Jan 5, 2016 at 14:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ratchet freak",
                    "text": "<span class=\"comment-copy\">unless a local/relative jump is used in the jump table. Then it won't be in the relocation table.</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">@ratchet freak: Yes, indeed. That's why it pays to study the behaviour of the target compiler(s) in question, since they tend to utilise only a small fraction of the possibilities offered by the targetted processor architecture in their jump dispatch code. Often they use very fixed code patterns for this - much more.fixed than if the dispatch code had been written in the source language and compiled.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IMHO no easy way to do it. The best is to write smart disassembler so it will find and deduce the table size. For example one of the characteristic of a jump table code:\n </p>\n <pre><code>and eax, NUMBER_OF_CASES\njmp dword ptr ds:[eax*4 + switch_table_start_addr]\n</code></pre>\n <p>\n  Another quick and error-prone way might be to look for a row of DWORDs with min and max RVA range e.g. :\n </p>\n <pre><code>dd IMAGEBASE+0x1000\ndd IMAGEBASE+0xXXXX\ndd IMAGEBASE+0xYYYY\ndd IMAGEBASE+0xFFFF\n...\n</code></pre>\n <p>\n  but this will probably find more data not related to switch table, especially in large applications.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "krusty",
            "time": "Jan 5, 2016 at 9:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  well.. i did find that indeed a jmp as you stated indicates a jump table.\n </p>\n <p>\n  so what i do now is\n </p>\n <ol>\n  <li>\n   looking for those jumps\n  </li>\n  <li>\n   parsing the prior opcodes and looking for \"cmp\" which indicates the \"default\" part in a switch statement (and so, indicates the size of the jump table, since it is the number of cases * 4 (on 32 bit)).\n  </li>\n  <li>\n   calculating the start address and end address of the jump table.\n  </li>\n </ol>\n <p>\n  now i have a different problem though..\nwhat i've described usually suits for contiguous values for the switch (lets say 1-10). but when it is not contiguous, than the compiler creates an \"indirect table for switch statement\" which looks a bit different, and i don't know how to calculate its size.\n </p>\n <p>\n  any ideas? isn't there a standard for those things? how can i tell whether i've covered all the options of a jump table?\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "user5188701",
            "time": "Jan 5, 2016 at 11:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">The size of the index table is implied by the instructions preceding the lookup instruction; the general case is an 'anchoring' subtraction and a comparison to the highest index into the table (or its size, as the case may be). The highest value found in the index table - with the lowest value almost invariably being 0 - implies the size of the actual jump table.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The paper \"Recovery of Jump Table Case Statements from Binary Code\" by Cristina Cifuentes and Mike Van Emmerik (\n  <em>\n   Proceedings of the 7th International Workshop on Program Comprehension\n  </em>\n  , 1999) discusses this issue in some detail.  It's an interesting read.\n </p>\n <p>\n  From a reverse engineering perspective, it can also be useful to understand how compilers typically map switch statements to machine code (they don't always get mapped to a single jump table).  The paper \"Producing good code for the case statement\" by Robert Bernstein (\n  <em>\n   Software: Practice and Experience\n  </em>\n  , Oct. 1985) discusses this in some detail.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "debray",
            "time": "Jan 6, 2016 at 22:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}