{
    "title": "Which python library for parsing Linux ELF files?",
    "link": "https://reverseengineering.stackexchange.com/questions/8824/which-python-library-for-parsing-linux-elf-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to be able to parse 32 and 64 bit ELF files - but not create or modify them (e.g. as discussed in\n  <a href=\"https://reverseengineering.stackexchange.com/questions/1843/what-are-the-available-libraries-to-statically-modify-elf-executables\">\n   this thread\n  </a>\n  ). The ELF binaries may possibly come from embedded Linux systems, that is, the library should not be irritated by MIPS, ARM and other non-x86 architectures.\n </p>\n <p>\n  What I have considered:\n </p>\n <ul>\n  <li>\n   <a href=\"https://github.com/eliben/pyelftools\" rel=\"noreferrer\">\n    pyelftools\n   </a>\n   (my currently favored option)\n  </li>\n  <li>\n   <a href=\"https://github.com/crackinglandia/pylibelf\" rel=\"noreferrer\">\n    pylibelf\n   </a>\n  </li>\n  <li>\n   <a href=\"https://code.google.com/p/pydevtools/\" rel=\"noreferrer\">\n    pydevtools\n   </a>\n  </li>\n  <li>\n   Also an option: using a C library and ctypes.\n  </li>\n </ul>\n <p>\n  Do I have forgotten something?\nWhich of the above options would you prefer?\n </p>\n <p>\n  For those who had some practical experience with pylibelf or pydeftools: These seem no longer updated (last commit: 2013 and 2012), are they mature enough?\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 2,
    "views": "16k",
    "tags": [
        "binary-analysis",
        "linux",
        "idapython",
        "elf",
        "python"
    ],
    "user": "langlauf.io",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Take a look at radare2. It can parse file formats (see\n  <a href=\"http://radare.today/parsing-a-fileformat-with-radare2/\" rel=\"noreferrer\">\n   here\n  </a>\n  for an example of parsing the ELF header).\n </p>\n <p>\n  Radare2 supports multiple architectures and is being actively developed. On top of that it has bindings for a lot of languages, including Python of course. Read through the\n  <a href=\"https://github.com/radare/radare2-bindings\" rel=\"noreferrer\">\n   bindings source code\n  </a>\n  to see it is pretty straightforward to script it.\n </p>\n <p>\n  HTH!\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Carlos Garcia",
            "time": "May 6, 2015 at 11:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Thank you for your pointer! Radare2 seems to be a powerful framework but may be a bit too heavy for my task. Have you tried one of the mentioned libraries whose main/only objective is to parse ELF files? In case their parsing capabilities are as good the ones of Radare2, I would prefer a more light-weight solution ...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://lief-project.github.io/\" rel=\"nofollow noreferrer\">\n   LIEF\n  </a>\n  is a good choice for parsing ELF binaries. It's written in C++, but comes with proper\n  <a href=\"https://pypi.org/project/lief/\" rel=\"nofollow noreferrer\">\n   Python bindings\n  </a>\n  and is readily\n  <a href=\"https://pypi.org/project/lief/\" rel=\"nofollow noreferrer\">\n   available via PyPi\n  </a>\n  . Besides parsing ELF files it also supports Windows PE and MacOS binaries, reading\n  <em>\n   and\n  </em>\n  modifying and writing all of them, that is.\n </p>\n <p>\n  It's available since 2017 and is\n  <a href=\"https://lief-project.github.io/blog/2022-01-23-new-elf-builder/\" rel=\"nofollow noreferrer\">\n   actively maintained (example)\n  </a>\n  .\n </p>\n <p>\n  LIEF is pretty light-weight and doesn't require many dependencies.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "maxschlepzig",
            "time": "Apr 23, 2022 at 11:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}