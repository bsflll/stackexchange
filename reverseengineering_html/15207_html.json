{
    "title": "Get list of functions (including non-exported functions!) in running executable",
    "link": "https://reverseengineering.stackexchange.com/questions/15207/get-list-of-functions-including-non-exported-functions-in-running-executable",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm working on a native binary patching library. It currently works on Linux and I'm trying to add Windows support.\n </p>\n <p>\n  For that, I need to implement a way to enumerate all functions in a PE binary (EXE) or shared library (DLL). For libraries, iterating exported functions is good enough.\n </p>\n <p>\n  However, I need a way to get a list of functions in the running executable, together with addresses that I can call.\n </p>\n <p>\n  On Linux, I used\n  <code>\n   libelf\n  </code>\n  for this, but I have no idea what to use for PEs.\n </p>\n <p>\n  The target executable is unstripped, but there's no source code.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "pe",
        "patching"
    ],
    "user": "Zatherz",
    "time": "Apr 23, 2017 at 15:59",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n why do you need to implement this? Isn't it the library user's task to provide proper function addresses? Also, if the executable is \"unstripped\", does this mean you have debug info?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<html><body><span class=\"comment-copy\">\n scan the executable for architecture specific function Prologues (e.g. push ebp, mov ebp, esp) - that should be good enough. If you want more sophisticated methods, please referr to the published literature (dissertions etc)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Zatherz",
            "text": "<html><body><span class=\"comment-copy\">\n The executable is unstripped. It has debug info and symbol info.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  On Windows, unstripped executables may have a\n  <code>\n   IMAGE_DIRECTORY_ENTRY_DEBUG\n  </code>\n  directory. You can learn more about the PE format\n  <a href=\"https://msdn.microsoft.com/en-us/library/ms809762.aspx\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Sadly this directory only contains information about where the corresponding metadata (\n  <code>\n   .pdb\n  </code>\n  file) is. A pdb may be generated when compiling along with the executable / library.\n </p>\n <p>\n  A\n  <code>\n   pdb\n  </code>\n  file is composed from different\n  <a href=\"https://code.google.com/archive/p/pdbparse/wikis/StreamDescriptions.wiki\" rel=\"nofollow noreferrer\">\n   Streams\n  </a>\n  . You are most propably interessted in the\n  <code>\n   Global Symbol Stream\n  </code>\n  .\n </p>\n <p>\n  I would suggest trying any\n  <code>\n   .pdb\n  </code>\n  parser (I don't think there is a complete implementation out there) to parse it. (Be sure to translate the addresses via\n  <code>\n   OMAP stream\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Apr 24, 2017 at 17:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zatherz",
                    "text": "<span class=\"comment-copy\">Question (and excuse my lack of Windows knowledge) - I compiled a test program through MinGW's GCC, and objdump/nm were able to list all the symbols even though I haven't exported any. There was no pdb file either. Is this something specific to MinGW?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Zatherz Only Microsoft toolchain produces PDB files. MinGW uses old style COFF symbols (see <code>IMAGE_FILE_HEADER.PointerToSymbolTable</code> in <code>winnt.h</code>).</span>",
                    "time": null
                }
            ]
        }
    ]
}