{
    "title": "Debugging Win32.Upatre - why does Ollydbg fail to analyze this?",
    "link": "https://reverseengineering.stackexchange.com/questions/9182/debugging-win32-upatre-why-does-ollydbg-fail-to-analyze-this",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I've been looking at this thread -\n  <a href=\"https://reverseengineering.stackexchange.com/questions/206/where-can-i-as-an-individual-get-malware-samples-to-analyze\">\n   Where can I, as an individual, get malware samples to analyze?\n  </a>\n  And grabbed myself a binary sample of Win32.Upatre from\n  <a href=\"http://addxorrol.blogspot.com/2013/01/encouraging-female-reverse-engineers.html\" rel=\"nofollow noreferrer\">\n   Halvar Flake's blog\n  </a>\n  .\n </p>\n <p>\n  I started analyzing the file in my VM (Win XP SP 3) and loaded up the malware in Olly.\nWhat I noticed is that the code looks encrypted - I searched for all the calls in the code and got this:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/XzmpQ.jpg\"/>\n </p>\n <p>\n  Which doesn't seem quite normal.\n </p>\n <p>\n  So I went ahead and started stepping from the EP hopefully landing on some decryption procedure -\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/KOhwN.jpg\"/>\n </p>\n <p>\n  I'll briefly explain what I concluded from debugging this code:\n </p>\n <h2>\n  1 - Gets the arguments passed to this executable - I'm pretty sure any code before this is irrelevant, but I might be wrong.\n </h2>\n <h2>\n  2 - Calls GetStartupInfo - not quite sure why\n </h2>\n <h2>\n  3 - Call 00401C80 passing the EP as a parameter\n </h2>\n <p>\n  So I went ahead jumping to\n  <code>\n   00401C80\n  </code>\n  to check what this is all about and found this code which kinda looks like junk code to me -\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/Oe3So.jpg\"/>\n </p>\n <p>\n  I suspect because there are some instructions that just don't seem logic to me like:\n </p>\n <pre><code>MOV EAX, 64\nCMP EAX,3E8\n</code></pre>\n <p>\n  But I might be wrong.\n </p>\n <p>\n  The problem is that after at the end of the function a value is copied into\n  <code>\n   ECX\n  </code>\n  and then\n  <code>\n   CALL ECX\n  </code>\n  is called which eventually ends in memory access violation:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/03UlY.jpg\"/>\n </p>\n <p>\n  No matter what I do or how I play with the flags inside this function I get an access violation or the code exits.\n </p>\n <p>\n  SOOOOOOOOO, my first thought was that I'm dealing with some kinda anti-debugging technique, so I tried to run the malware inside the VM and intercept some data from it -\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/s9tOz.jpg\"/>\n </p>\n <p>\n  And it seems like it's running alright and even created a UDP socket, no access violation or something like that.\n </p>\n <p>\n  I tried looking online for reports about this virus but I couldn't found any resources about how to bypass this obstacle.\n </p>\n <p>\n  Anyone got an idea how I should approach this? why is Olly failing? How does this code knows that it's being debugged? It doesn't seem like it uses some kind of API for that (like IsDebuggerPresent).\n </p>\n <p>\n  Thanks for everyone in advance.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "774",
    "tags": [
        "ollydbg",
        "malware",
        "obfuscation",
        "anti-debugging",
        "deobfuscation"
    ],
    "user": "FigureItOut",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "user2823000",
            "text": "<html><body><span class=\"comment-copy\">\n Did you look at the\n <a href=\"https://docs.google.com/file/d/0B5hBKwgSgYFaVmxTaFk3OXl4cjg/edit?usp=sharing\" rel=\"nofollow noreferrer\">\n  Marion Marschalek's report\n </a>\n on the same blog? It's the winning entry, and IIRC she's doing a fine job of explaining it all\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "FigureItOut",
            "text": "<html><body><span class=\"comment-copy\">\n @Dillinur, yes I did :) and she did a great job indeed, but she doesn't go into details of how she unpacked it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  About the \"??3@YAXPAX\" calls, it is called\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2388/artifacts-similar-to-yaxpax-within-memory-and-ida-sessions\">\n   Name Mangling\n  </a>\n  , take a look at this thread for more explanation.\n </p>\n <p>\n  \"YAXPAX\" calls are actually the\n  <code>\n   delete\n  </code>\n  C++ operator.\n </p>\n <p>\n  About the\n  <code>\n   __set_app_type\n  </code>\n  ,\n  <code>\n   __getmainargs\n  </code>\n  ,\n  <code>\n   GetStartupInfo\n  </code>\n  etc, those calls are generated by the compiler and usally called before the\n  <code>\n   main\n  </code>\n  function. They aren't part of the source code of the program you are willing to analyze, so you shouldn't have to analyze them.\n </p>\n <p>\n  Your main seems to be located at\n  <code>\n   00401C80\n  </code>\n  , as it is usually right before a call to\n  <code>\n   exit\n  </code>\n  . This is where you start analyzing things seriously.\n </p>\n <p>\n  Concerning the anti-debug protection, there are few instructions that let me think there is something that catches the exception in the program :\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/RcbWT.jpg\"/>\n </p>\n <p>\n  <code>\n   cmp [0], 0\n  </code>\n  is supposed to crash, so maybe there is some custom exception handlers installed somewhere. I would say to check for TLS callback functions, but I may be wrong. You should be able to pass the exception by pressing Shift+F7,\n  <a href=\"https://reverseengineering.stackexchange.com/questions/8813/how-to-bypass-zwcontinue/8814#8814\">\n   break on NtContinue, read the CONTEXT\n  </a>\n  structure and continue the execution of the program.\n </p>\n <p>\n  <a href=\"http://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf\" rel=\"nofollow noreferrer\">\n   Here\n  </a>\n  is a listing of the most frequent anti debug tricks you may find - including the Thread Local Storage trick.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>import base64\nimport zipfile\nimport os\nimport hashlib\ninfile = open(\"c:\\\\halvar\\\\halvfem.bin\",\"rb\")\noutfile = open(\"c:\\\\halvar\\\\halvfem.zip\",\"wb\")\nbase64.decode(infile,outfile)\ninfile.close()\noutfile.close()\nif (zipfile.is_zipfile(\"c:\\\\halvar\\\\halvfem.zip\")):\n    myzip = zipfile.ZipFile(\"c:\\\\halvar\\\\halvfem.zip\",'r')\n    myzip.extractall('c:\\\\halvar\\\\',myzip.namelist(),'infected')\n    os.rename(myzip.namelist()[0],\"halvar_challenge.exe\")\n    print hashlib.md5(open('c:\\\\halvar\\\\halvar_challenge.exe','rb').read()).hexdigest()\n</code></pre>\n <p>\n  is this the file you are talking about\n </p>\n <pre><code>C:\\halvar>python decode.py\n172aed81c4fde1cf23f1615acedfad65\n\nC:\\halvar>f:\\odbg110\\OLLYDBG.EXE halvar_challenge.exe\n</code></pre>\n <p>\n  the exe is setting up a Structured Exception Handler prior to call ecx \nyou should follow the Exception handler may be several times\n </p>\n <p>\n  hint check this function in msvcrt\n </p>\n <pre><code>77C2275C MSVCRT._JumpToContinuation    $  8BFF          MOV     EDI, EDI\n</code></pre>\n <p>\n  if you followed them you should be able to see  0x89 imports being resolved with LoadLibrary and GetProcAddress\n </p>\n <p>\n  i followed till CreateEvent before posting this\n </p>\n <pre><code>0013FD90   0040F520  /CALL to CreateEventA from halvar_c.0040F51D\n0013FD94   00000000  |pSecurity = NULL\n0013FD98   00000001  |ManualReset = TRUE\n0013FD9C   00000000  |InitiallySignaled = FALSE\n0013FDA0   0013FDCC  \\EventName = \"{AB8D393B-9177-440d-B3F8-1C1FE0CF9692}\"\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 20, 2015 at 10:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}