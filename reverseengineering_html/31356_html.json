{
    "title": "How to dump PE from Injected Code using x32dbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/31356/how-to-dump-pe-from-injected-code-using-x32dbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How do I extract or dump injected executable code/payload from malware using the x32dbg trick?\nMy malware sample is injecting an Exe PE file in a legitimate File like \"Explorer.exe\".\nHow do I dump the File?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "809",
    "tags": [
        "malware"
    ],
    "user": "David L. Wilson",
    "time": "Jan 6, 2023 at 0:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First of all you can attach x32dbg to the process where PE was injected. Next you must trace the address of allocated memory where the malicious PE was written to. If you got that informations you can select bytes that PE consists of from Dump Window in x32dbg, then Right-Click and select \"Dump to file\" option.\n </p>\n <p>\n  In my opinion the whole process is even easier with Process Hacker tool, where you have to just spot the address where PE was written and then dump all pages to file.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "r4v1ck",
            "time": "Jan 6, 2023 at 0:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "David L. Wilson",
                    "text": "<span class=\"comment-copy\">Could you please explain in detail? Thanks a lot!</span>",
                    "time": null
                },
                {
                    "user": "David L. Wilson",
                    "text": "<span class=\"comment-copy\">This means if the malware injects into \"Explorer.exe\" then I have to do The Process hacker tool trick on Explorer.exe . Right?</span>",
                    "time": null
                },
                {
                    "user": "strannyi",
                    "text": "<span class=\"comment-copy\">Find all calls of WinAPI function WriteProcessMemory, determine its arguments. Find the place in code where it is called. This can help you to find injector code, process name and the address.</span>",
                    "time": null
                },
                {
                    "user": "r4v1ck",
                    "text": "<span class=\"comment-copy\">@DavidL.Wilson yes, exactly. Because this is the target where code will exist after injection and also after possible unpacking or decrypting routines. That space in \"explorer.exe\" can be found in \"memory\" tab of Process Hacker. Moreover it should be marked as \"Private\" type of memory and its protection flags should be \"RX\" or \"RWX\".</span>",
                    "time": null
                },
                {
                    "user": "r4v1ck",
                    "text": "<span class=\"comment-copy\">@DavidL.Wilson As I said, you have to track down by yourself address of allocated memory space. You can do it by debugging injector. Specificaly you can put a breakpoint on all VirtualAllocEx, VirtualProtect, WriteProcessMemory (as it was stated by strannyi), CreateRemoteThread calls, etc.  Take a look at all API functions that are used by malware to perform injections, then put BPs on them.</span>",
                    "time": null
                }
            ]
        }
    ]
}