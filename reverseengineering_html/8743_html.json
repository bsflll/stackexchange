{
    "title": "About the VB P-CODE mode reverse-engineer",
    "link": "https://reverseengineering.stackexchange.com/questions/8743/about-the-vb-p-code-mode-reverse-engineer",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have to reverse-engineer a VB P-CODE mode program. I had the program's P-CODE, but I don't know what it means. For example:\n </p>\n <pre><code>Proc: 421840\n421100: 04 FLdRfVar                local_0098\n421103: 04 FLdRfVar                local_0094\n421106: 05 ImpAdLdRf:              435aec\n421109: 24 NewIfNullPr             408868\n42110C: 0d VCallHresult            CVBApplication::get_\n</code></pre>\n <p>\n  I have to find the tools to reverse a program.I want to know what the P-CODE means.Thanks\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "visual-basic"
    ],
    "user": "soul chen",
    "time": "Apr 28, 2015 at 8:16",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n google first hit says p-code means packed-code\n <a href=\"http://en.wikipedia.org/wiki/Microsoft_P-Code\" rel=\"nofollow noreferrer\">\n  en.wikipedia.org/wiki/Microsoft_P-Code\n </a>\n supposed to be executed by a visual basic virtual machine (msvbvmXXX.dll abandoned after vb6 in favour of clr and .net and a hunch search yields several decompiers for that code like p32dasm , vb-decompiler etc\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here are the two best free and available resources about Microsoft's VB P-Code.\nFirst one, the list of opcodes (\n  <a href=\"http://web.archive.org/web/20101127044116/http://vb-decompiler.com/pcode/opcodes.php?t=1\" rel=\"nofollow\">\n   here\n  </a>\n  ). Second one, a 12 pages document written by\n  <em>\n   Alex Ionescu\n  </em>\n  on how to decompile and analyze VB binaries (\n  <a href=\"http://web.archive.org/web/20071020232030/http://www.alex-ionescu.com/vb.pdf\" rel=\"nofollow\">\n   here\n  </a>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "yaspr",
            "time": "Apr 22, 2015 at 12:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://www.vb-decompiler.org/products.htm\" rel=\"nofollow noreferrer\">\n   VB Decompiler Pro\n  </a>\n  decompiles VB P-Code to Visual Basic code. See below for an example of the decompilation output:\n </p>\n <p>\n  <img alt=\"Decompilation\" src=\"https://i.sstatic.net/qnyDw.png\"/>\n </p>\n <p>\n  Alternatively, if you're looking for help in analyzing the raw P-Code itself, you can check out the following links in addition to the links that\n  <a href=\"https://reverseengineering.stackexchange.com/users/4437/yaspr\">\n   yaspr\n  </a>\n  <a href=\"https://reverseengineering.stackexchange.com/a/8745/1562\">\n   posted\n  </a>\n  :\n </p>\n <ul>\n  <li>\n   <a href=\"http://www.woodmann.com/crackz/Tutorials/Vbpcode.htm\" rel=\"nofollow noreferrer\">\n    VB P-code Information by Mr Silver\n   </a>\n  </li>\n  <li>\n   <a href=\"http://www.woodmann.com/crackz/Archives/Vbpcode.zip\" rel=\"nofollow noreferrer\">\n    Info about P-code\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In addition to the Alex Ionescu paper, there's also a useful 27-page paper,\n  <a href=\"http://www.reteam.org/papers/e46.pdf\" rel=\"nofollow\">\n   VISUAL BASIC REVERSED - A decompiling approach\n  </a>\n  by Andrea Geddon.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "ThunderFrame",
            "time": "Sep 18, 2016 at 4:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}