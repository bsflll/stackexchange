{
    "title": "Opening an undocumented 90s graphics format",
    "link": "https://reverseengineering.stackexchange.com/questions/26594/opening-an-undocumented-90s-graphics-format",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've managed to extract some graphics files from an archive of an old game. Haven't found anything about it online, so I'm trying my luck here, prehaps someone knows a similar format that can help me. It's a somehow encrypted/compressed graphics format that uses an external palette. I've managed to display a different graphics format from the game, .raw files, that were very similar to NetPBM files. This format however isn't as straight forward.\n </p>\n <h2>\n  Here's what I know:\n </h2>\n <p>\n  File extension: .cgf\n  \n\n  File magic: CGFF\n  \n\n  <code>\n   file\n  </code>\n  : data\n  \n\n  <code>\n   binwalk -E\n  </code>\n  : 0.5 or 0.75, depends on \"compression type\", pretty much uniform across file\n  \n\n  <code>\n   binwalk -X\n  </code>\n  : DEFLATE streams, sometimes only 1 bit long (?)\n </p>\n <p>\n  Header structure is as follows. Names are an educated guess on what the field could be. Every field is 4 bytes long, numbers are signed ints stored in little endian.\n  \n\n  Each line is 4 bytes in the file:\n </p>\n <pre><code>String CGFF (file magic)\nCompression type, either \"1\" or \"9\" across all files\nNumber of layers\nNumber of layers, multiplied by 24\nFile size. If my guess is right, this is probably an unsigned int\n\"0\" across all files but one, where it is \"250\"\n\"0\" across all files\nX Position                                      |\nY Position                                      |\nWidth                                           |\nHeight                                          |\n\"38\" across all files                           |\nOffset into the file starting after the headers |\n</code></pre>\n <p>\n  The last 6 entries seem to make up a unit that repeats once for every layer.\n </p>\n <p>\n  Here's how I got to my guesses:\n </p>\n <ul>\n  <li>\n   Compression type: 1-files have a different entropy and structure than 9-files.\n  </li>\n  <li>\n   Number of layers: Observarions like this: A file called \"Ballammo\" is loaded in a game where you have 10 snowballs to throw at targets. The header contains a \"10\" in this field. This works for other files too.\n  </li>\n  <li>\n   Filesize: I had to guess this since the archive I extracted the files from stored incorrect file lengths, but in most cases the numbers are similar enough\n  </li>\n  <li>\n   Position/Size: Files called \"Background\" always have the values 0 0 640 480. In some cases they were 640 480 -640 -480, hence my guess with the position. The size makes sense for a game of that time running in 4:3\n  </li>\n  <li>\n   Layer offset: Guess, since the first entry is always 0 and the subsequent are bigger numbers. Also it lines up nicely like this.\n  </li>\n </ul>\n <p>\n  Regarding the file structure, 1-files have higher entropy and don't really show any pattern. In 9-files however, most of the time a byte is followed by 0xff, rarely by something else. It's not RLE, I've tried that.\n </p>\n <p>\n  As requested, here's two hexdumps. One 9-compressed, one 1-compressed.\n  \n\n  <a href=\"https://pastebin.com/NGY79UgU\" rel=\"nofollow noreferrer\">\n   https://pastebin.com/NGY79UgU\n  </a>\n </p>\n <p>\n  Oh right, I should say how these are supposed to look like. \"Cursor.cgf\" should contain a two hand-like cursors, one pointing and one grabbing. Regarding \"Kid.cgf\", the data says it contains 8 layers. Given the minigame the file loads in, this should contain 4 grinning mouths and 4 pairs of eyes.\n </p>\n <p>\n  I also forgot to mention that both images have transparency, this could however be implemented using the palette the game loads.\n </p>\n <p>\n  NOTE: I can't guarantee that these files are complete. They may contain garbage at the end or be incomplete. As I said, chances are good that the archive's stored file lengths are wrong, as I found a palette that contained the .wav header of the next file after extraction.\n </p>\n <p>\n  Here's how some of the layers of the files given should look like when correctly loaded. Three \"Kid.cgf\"-layers are lined in red, while one of the \"Cursor.cgf\"-layers is lined in green. Boxes are not exact.\n  \n\n  <a href=\"https://i.sstatic.net/NzkW4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/NzkW4.png\"/>\n  </a>\n </p>\n <h2>\n  UPDATE\n </h2>\n <p>\n  I managed to point the game to an extracted file instead of an archived file and it loads just fine. After also writing a program that fully parses the header, extracting the layer data into seperate files and some minor experiments, here's my results\n  <strong>\n   on a type 1 image\n  </strong>\n  :\n </p>\n <ul>\n  <li>\n   The game doesn't mind files being too long.\n  </li>\n  <li>\n   The data isn't just a bitmap. Assuming I correctly found the fields for width, height and layer offset, the lengths of the fields (= diff between two layer offsets) is always smaller than width*height. Also, randomly changing some bytes in the image section crashes that game on load.\n  </li>\n  <li>\n   The x and y pos isn't relative to the screen but to something else. This was revealed by swapping two images; both were still drawn in the correct location.\n  </li>\n  <li>\n   @pythonpython found the value 0x26 to be interesting. This value also is stored in the layer entries (I wrote '\"38\" in all files', see above).\n  </li>\n  <li>\n   The image data contains info on where a \"pixel line\" ends. Example: Let a layer be 32x64. Swapping the header values for the image to be 64x32 results in an image that is cut off in the middle but gets displayed correctly.\n  </li>\n </ul>\n <p>\n  I'll keep experimenting and update accordingly.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "451",
    "tags": [
        "file-format",
        "unknown-data"
    ],
    "user": "mindoverflow",
    "time": "Jan 2, 2021 at 14:47",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n The comments have been\n <a href=\"https://chat.stackexchange.com/rooms/117508/discussion-on-question-by-mindoverflow-opening-an-undocumented-90s-graphics-form\">\n  moved to chat\n </a>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "pythonpython",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks for moving.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The images are packed, data is little-endian where it matters.\n </p>\n <p>\n  General format:\n </p>\n <pre><code>struct CGFHeader {\n  uint32_t magic;\n  uint32_t flags;\n  uint32_t frame_count;\n  uint32_t frame_metadata_size;\n  uint32_t frame_payload_size;\n  uint32_t unk1;\n  uint32_t unk2; \n};\n</code></pre>\n <p>\n  Then repeated\n  <code>\n   frame_count\n  </code>\n  times, starting at\n  <code>\n   +0x1c\n  </code>\n  :\n </p>\n <pre><code>struct FrameMeta {\n  uint32_t unk1;\n  uint32_t unk2;\n  uint32_t width;\n  uint32_t height;\n  uint32_t unk3;\n  uint32_t payload_offset;\n};\n</code></pre>\n <p>\n  For frame N, the payload data starts at\n  <code>\n   sizeof(CGFHeader) + cgf_header.frame_count*sizeof(FrameMeta) + frame_meta[N].payload_offset\n  </code>\n  (i.e. at the corresponding\n  <code>\n   payload_offset\n  </code>\n  , based immediately after the metadata structs).\n </p>\n <p>\n  Each line/row of the packed image data is packed independently. Each line is prefixed by a\n  <code>\n   uint32_t\n  </code>\n  of that line's length (including the length field). Process the packed data as follows:\n </p>\n <p>\n  Read a method\n  <code>\n   uint8_t\n  </code>\n  and a length\n  <code>\n   uint8_t\n  </code>\n  (referred to\n  <code>\n   n\n  </code>\n  below), and process per the below table.\n </p>\n <div class=\"s-table-container\">\n  <table class=\"s-table\">\n   <thead>\n    <tr>\n     <th>\n      Method\n     </th>\n     <th>\n      How to process\n     </th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>\n      <code>\n       0x00\n      </code>\n     </td>\n     <td>\n      Append\n      <code>\n       n\n      </code>\n      transparent pixels. If\n      <code>\n       n\n      </code>\n      is 0, pad the line with transparent pixels to expected width.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       0x01\n      </code>\n     </td>\n     <td>\n      Read\n      <code>\n       n\n      </code>\n      pairs of (palette_index, alpha) values from the packed data, appending to the line.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       0x02\n      </code>\n     </td>\n     <td>\n      Read a single (palette_index, alpha) pair from the packed data. Append it to the line\n      <code>\n       n\n      </code>\n      times.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       0x03\n      </code>\n     </td>\n     <td>\n      Read\n      <code>\n       n\n      </code>\n      palette_index values from the packed data, appending to the line.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       0x04\n      </code>\n     </td>\n     <td>\n      Read a single palette_index from the packed data. Append it to the line\n      <code>\n       n\n      </code>\n      times.\n     </td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <p>\n  Keep processing method\n  <code>\n   uint8_t\n  </code>\n  and a length\n  <code>\n   uint8_t\n  </code>\n  bytes from the packed data until you have the full line width.\n </p>\n <p>\n  In order to interpret the actual color values, you'll need the corresponding palette. The two formats you've mentioned:\n </p>\n <ul>\n  <li>\n   <code>\n    CPAL254X3STD\n   </code>\n   just has (in this case) 254 RGB triplets appended after that header value.\n  </li>\n  <li>\n   <code>\n    CPAL254X3ALPHA\n   </code>\n   is the same, but with a 0x100000 byte structure appended that gets referred to as an \"alpha map\". I have not bothered to look at it at all.\n  </li>\n </ul>\n <p>\n  Rough python3 example of processing, dumping frames to 0.png, 1.png, etc in subdirectory:\n </p>\n <pre><code>import errno\nimport os\nimport struct\nimport sys\n\nfrom PIL import Image\n\nclass HugoPalette(object):\n  def __init__(self, rawdat):\n    assert(len(rawdat) >= 12)\n    assert(rawdat[0:4] == b'CPAL') # palette\n    self.alpha_map = None\n    self.entries = None\n    num_entries = int(rawdat[4:7])\n    assert(rawdat[7:9] == b'X3') # rgb triples\n    if rawdat[9:12] == b'STD': # palette\n      assert(len(rawdat) >= 12 + num_entries*3)\n      self.entries = []\n      offset = 12\n      for n in range(num_entries):\n        self.entries.append(struct.unpack_from(\"BBB\" ,rawdat, offset))\n        offset = offset + 3\n    elif rawdat[9:14] == b'ALPHA': # palette and alphamap\n      assert(len(rawdat) >= 14 + num_entries*3 + 0x100000)\n      self.entries = []\n      offset = 14\n      for n in range(num_entries):\n        self.entries.append(struct.unpack_from(\"BBB\" ,rawdat, offset))\n        offset = offset + 3\n      self.alphamap = rawdat[14 + num_entries*3:14 + num_entries*3 + 0x100000] # not sure how to interpret\n    else:\n      raise NotImplementedError(\"unknown palette type\")\n\n\nclass HugoImage(object):\n  def __init__(self, width, height, rawdat, offset):\n    self.width = width\n    self.height = height\n\n    rows = []\n    for n in range(height):\n      (packed_line_length,) =  struct.unpack_from(\"<L\", rawdat, offset)\n      assert(len(rawdat) >= offset + packed_line_length)\n      packed_line = rawdat[offset+4:offset+packed_line_length]\n      line = []\n      index = 0\n      # unpacking:\n      # 00 nn                   = skip nn pixels [nn=00: skip to end of line]\n      # 01 nn pp aa [pp aa ...] = insert nn entries from trailing pp, replacing alpha with aa\n      # 02 nn pp aa             = repeat pp for nn pixels, replacing alpha with aa\n      # 03 nn pp [pp ...]       = insert nn entries from trailing pp\n      # 04 nn pp                = repeat pp for nn pixels\n      while True:\n        method = packed_line[index]\n        pixel_count = packed_line[index+1]\n        index = index + 2\n        if method == 0:\n          if pixel_count == 0:\n            while(len(line) < self.width):\n              line.append((0, 0))\n            break\n          line.extend([(0,0)]*pixel_count)\n        elif method == 1:\n          for p in range(pixel_count):\n            line.append((packed_line[index], packed_line[index+1]))\n            index = index + 2\n        elif method == 2:\n          line.extend([(packed_line[index], packed_line[index+1])]*pixel_count)\n          index = index + 2\n        elif method == 3:\n          for p in range(pixel_count):\n            line.append((packed_line[index],0xff))\n            index = index + 1\n        elif packed_line[index] == 4:\n          line.extend([(packed_line[index], 0xff)]*pixel_count)\n          index = index + 1\n      assert(len(line) == self.width)\n      rows.append(line)\n      offset = offset + 4 + index\n    self.rows = rows\n\ndef load_images(rawdat):\n  HEADER_STRUCT_SIZE=0x1c\n  METADATA_STRUCT_SIZE=0x18\n  offset = 0\n  assert(len(rawdat) >= offset + HEADER_STRUCT_SIZE)\n  (magic, _, count, metadata_size, payload_size, _, _) = struct.unpack_from(\"<LLLLLLL\", rawdat, offset)\n  offset = offset + HEADER_STRUCT_SIZE\n  assert(magic == 0x46464743)\n  assert(metadata_size == count * METADATA_STRUCT_SIZE)\n  metadata = []\n  for n in range(count):\n    assert(len(rawdat) >= offset + METADATA_STRUCT_SIZE)\n    metadata.append(struct.unpack_from(\"<LLLLLL\", rawdat, offset))\n    offset = offset + METADATA_STRUCT_SIZE\n  images = []\n  for im in metadata:\n    images.append(HugoImage(im[2], im[3], rawdat, offset + im[5]))\n  return images\n\n\ndef main(args):\n  if len(args) != 3:\n    print(f\"usage: python3 {args[0]} palette.pal image.cgf\")\n    sys.exit(1)\n  with open(args[1], \"rb\") as infile:\n    dat = infile.read()\n  pal = HugoPalette(dat)\n\n  with open(args[2], \"rb\") as infile:\n    dat = infile.read()\n  images = load_images(dat)\n\n  output_dir = args[2] + \".extracted\"\n  output_index = 0\n\n  try:\n    os.makedirs(output_dir)\n  except OSError as e:\n    if e.errno != errno.EEXIST:\n      raise\n\n  for i in images:\n    img = Image.new('RGBA', (i.width, i.height))\n    for y in range(i.height):\n      for x in range(i.width):\n        (index, alpha) = i.rows[y][x]\n        pal_entry = pal.entries[index]\n        col = (pal_entry[0], pal_entry[1],pal_entry[2], alpha)\n        img.putpixel((x,y), col)\n    img.save(os.path.join(output_dir, str(output_index) + \".png\"), \"PNG\")\n    output_index = output_index + 1\n\nif __name__ == '__main__':\n  main(sys.argv)\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "booto",
            "time": "Jan 4, 2021 at 23:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mindoverflow",
                    "text": "<span class=\"comment-copy\">How did you figure this out? Incredible work, thanks a lot!</span>",
                    "time": null
                },
                {
                    "user": "mindoverflow",
                    "text": "<span class=\"comment-copy\">Finally found the time to implement it and test it with more files. Works great for most files, the one that fail are probably incomplete which is a fault on my part. Interestingly enough, the <code>CPAL254X3ALPHA</code> palettes work the same way as the <code>...X3STD</code> palettes, I should be able to figure the details out myself. Thanks again!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Some interesting structure if you break the files by value 0x26.\n </p>\n <p>\n  How did you derive the number of layers?\n </p>\n <p>\n  I don't think these are compressed. There's lots of redundancy in the data which compression would destroy. You also wouldn't see the same values in the compressed result of two different inputs.\n </p>\n <p>\n  What is the game system?\n </p>\n <p>\n  What are the pixel sizes of the displayed kid.cgf and cursor.cgf on the device?\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/sWOSK.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Analysis of hex.\" src=\"https://i.sstatic.net/sWOSK.jpg\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "pythonpython",
            "time": "Dec 21, 2020 at 1:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I appreciate you taking the time to tend to the question, but your \"answer\" contains almost more questions than the real question here. However, I understand that it is impossible to put a screenshot into a comment and there is a limit to what can be done in comments. So I am converting your non-answer into a community wiki. Use that - for now - to figure out the details about the subject matter and write up an alternative answer once you are ready to answer.</span>",
                    "time": null
                },
                {
                    "user": "mindoverflow",
                    "text": "<span class=\"comment-copy\">Thanks for the effort! I don't know what you mean by \"game system\", also getting the pixel size of these particular images is difficult, but I can try. I've found \"Background.cgf\" files with the values 640 and 480 stored as singed little endian ints (4 bytes) at offsets 32/0x20 and 36/0x24 respectively, so I assume these fields contain the image's size.</span>",
                    "time": null
                },
                {
                    "user": "mindoverflow",
                    "text": "<span class=\"comment-copy\">About the layers: Observation from ingame sprites. I've written about it in the question, but here's another example: The same minigame loads \"Present.cgf\", containing a value of 8. There are 8 different present sprites in that minigame. All \"Cursor.cgf\" files have a value of 2: One for the default image and one used when hovering above something clickable. \"Keycursor.cgf\" has a value of 3. There are 3 unlockable keys.</span>",
                    "time": null
                },
                {
                    "user": "mindoverflow",
                    "text": "<span class=\"comment-copy\">The cursor's about 32x23 px, matching the fields in cursor.cgf. No luck with \"Kid.cgf\" though</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">Do these sprites have transparency? the 0x26000000 values made me think it's the Alpha set to 15% part of an ARGB32 pixel.</span>",
                    "time": null
                }
            ]
        }
    ]
}