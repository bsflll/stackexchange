{
    "title": "Make Ghidra recognize thread-local variables",
    "link": "https://reverseengineering.stackexchange.com/questions/30065/make-ghidra-recognize-thread-local-variables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse an ELF binary that makes use of thread-local variables. I can't figure out how to make Ghidra display them in a friendlier way (something like declaring a struct or similar).\n </p>\n <p>\n  For example, this is how a call to scanf with a FILE* stored in TLS looks like:\n </p>\n <pre><code>scanf(*(FILE **)(in_FS_OFFSET + 0xfffffff0),\"%d\",&num);\n</code></pre>\n <p>\n  Ideally, I would like this to look something like:\n </p>\n <pre><code>scanf(tls->outfile, \"%d\", &num);\n</code></pre>\n <p>\n  Is it possible to make it more user-friendly? I looked around but I haven't seen anyone complaining about this.\n </p>\n <p>\n  Here's an example code:\n </p>\n <pre><code>#include <threads.h>\n#include <stdio.h>\n#include <assert.h>\n\nthread_local int foo = 0;\n\nint main(void) {\n    assert(scanf(\"%d\", &foo) == 1);\n    printf(\"foo is: %d\n\", foo);\n    return 0;\n}\n</code></pre>\n <p>\n  <code>\n   tls.c\n  </code>\n  compile with\n  <code>\n   CFLAGS=\"-std=c11 -Wall -Wextra -O0 -ggdb -Werror\" make tls\n  </code>\n </p>\n <p>\n  And here's the decompiled code:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/n2vme.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Ghidra's decompiler output for tls binary\" src=\"https://i.sstatic.net/n2vme.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "569",
    "tags": [
        "ghidra",
        "thread"
    ],
    "user": "Marco",
    "time": "Feb 22, 2022 at 23:19",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://godbolt.org/z/Gfeda38E9\" rel=\"nofollow noreferrer\">\n  Okay, so it\n  <i>\n   does\n  </i>\n  indeed handle it differently at\n  <code>\n   -O0\n  </code>\n </a>\n (and even at\n <code>\n  -O3\n </code>\n for that matter) to\n <code>\n  static\n </code>\n or a mere global variable. However, what's shown as\n <code>\n  in_FS_OFFSET\n </code>\n presumably is\n <code>\n  fs:0\n </code>\n and\n <a href=\"https://stackoverflow.com/a/33827186\">\n  this answers\n </a>\n how and why -4 is needed here. Given your answer, I think however, you're conflating things a bit.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Marco",
            "text": "<html><body><span class=\"comment-copy\">\n In my answer, they propose a way to support having pointers to the middle of a struct, enabling having negative offsets. If that were supported, you could retype\n <code>\n  in_FS_OFFSET\n </code>\n as a pointer to the end of your struct, and then it would automatically recognize your thread_local fields.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n yes you could do that. However, just like when you see access to the TEB or PEB via one of the selectors on Windows,\n <i>\n  this\n </i>\n is a particular \"well-known construct\" particular to Linux that should be handled (and is, evidently handled, given the name it is assigned) accordingly. That doesn't make this a struct, however. I really don't see it as of yet.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It seems like this feature is\n  <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/573\" rel=\"nofollow noreferrer\">\n   not yet implemented in Ghidra\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "Marco",
            "time": "Feb 22, 2022 at 23:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">What does this have to do with thread-local variables? All I can see in the defect report is that there is no way to properly access structs from a linked list, where the linked list members have an <code>LIST_ENTRY</code> as their member. This is a common scheme in NT and support for <code>CONTAINING_RECORD</code> therefore a sensible request. But where is the connection to thread-local variables?</span>",
                    "time": null
                },
                {
                    "user": "Marco",
                    "text": "<span class=\"comment-copy\">The question is about supporting pointers to the middle of a struct, it has nothing to do with lists. In this case, if you define a struct that would be \"thread_local_vars\", and get your pointer to the end of it, you should be able to get Ghidra to recognize it, right?</span>",
                    "time": null
                }
            ]
        }
    ]
}