{
    "title": "Confusing syntax found in malware",
    "link": "https://reverseengineering.stackexchange.com/questions/26076/confusing-syntax-found-in-malware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am confused by what the following command is doing:\n </p>\n <pre><code>00401234  mov     dword [esp+0x35], sub_408678\n</code></pre>\n <p>\n  For context, I'm reversing a piece of malware and am using Binary Ninja, which to my knowledge typically uses the following syntax for low level IL commands:\n </p>\n <pre><code>mov    dest, src\n</code></pre>\n <p>\n  Is the first command executing the subroutine specified in the\n  <code>\n   src\n  </code>\n  parameter (sub_408678) and storing the result of that command in [esp + 35]? Or just moving the address for later use? I have never seen this syntax before, I'm wondering if someone else has seen a program do this / can tell me what the purpose of writing it this way is. Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "144",
    "tags": [
        "binary-analysis"
    ],
    "user": "n00bsauce",
    "time": "Oct 7, 2020 at 1:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  src sub_408678 is probably a label given by your tool to the address 408678\n </p>\n <p>\n  [esp+0x35] the destination is a pointer to a 32 bit value\n </p>\n <p>\n  it can take anything from 0x0 to 0xffffffff\n </p>\n <p>\n  so after executing this instruction\n  <code>\n   00401234  mov     dword [esp+0x35], sub_408678\n  </code>\n  [esp+0x35 will point to 0x408678\n </p>\n <p>\n  in high level construct this will be\n </p>\n <pre><code><sometype *>foo ; // here sometype can be int,long,in your cse function_ptr etc \nfoo = &blah \n</code></pre>\n <p>\n  a sample code and disassembly\n </p>\n <pre><code>unsigned long global = 0xdeadbeef;\nint main (void) {\n    unsigned long *foo;\n    foo = &global;\n    return *foo;\n}\n</code></pre>\n <p>\n  disassembly\n </p>\n <pre><code>:\\>cdb -c \"uf ptr!main;q\" ptr.exe | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command 'uf ptr!main;q'\nptr!main:\n01381000 55              push    ebp\n01381001 8bec            mov     ebp,esp\n01381003 51              push    ecx\n01381004 c745fc00903c01  mov     dword ptr [ebp-4],offset ptr!global (013c9000) <<<<<<<\n0138100b 8b45fc          mov     eax,dword ptr [ebp-4]\n0138100e 8b00            mov     eax,dword ptr [eax]\n01381010 8be5            mov     esp,ebp\n01381012 5d              pop     ebp\n01381013 c3              ret\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "6",
            "user": "blabb",
            "time": "Oct 7, 2020 at 14:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}