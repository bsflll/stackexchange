{
    "title": "Position-independent code dectection",
    "link": "https://reverseengineering.stackexchange.com/questions/18357/position-independent-code-dectection",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is it possible to detect whether a given executable is a PIC by looking at the disassembler's output? If not, what are other valid ways to go about this?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "564",
    "tags": [
        "elf",
        "pie"
    ],
    "user": "Trey",
    "time": "May 25, 2018 at 6:11",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<html><body><span class=\"comment-copy\">\n What's the basis for the question? As is, it is a bit odd, so maybe if you explain your motivation it's possible to give a more helpful answer. If code is PIC, you usually see some typical patterns like\n <code>\n  call $+, pop\n </code>\n to get the current address, or\n <code>\n  call xxx, pop\n </code>\n to push some address on the stack.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Trey",
            "text": "<html><body><span class=\"comment-copy\">\n @JohannAydinbas I don't really have a reason... I was just trying to understand the differences between ET_DYN and ET_EXEC(compiled with -fPIC) and that made me wonder whether I could detect this kind of thing\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  Detection by analysing assembly\n </h1>\n <p>\n  It will highly depend on the compiler used, but here are some constructions that will differ between position independent and position dependent code:\n </p>\n <ul>\n  <li>\n   if you spot a\n   <code>\n    jmp\n   </code>\n   to an absolute address, that will mean that it is PDC (only jumps relative to\n   <code>\n    RIP\n   </code>\n   will be used in PIC)\n  </li>\n  <li>\n   when some data is referenced by absolute address, it is PDC\n  </li>\n  <li>\n   as @Johann Aydinbas noticed, when you see patterns like\n   <code>\n    cal $+, pop\n   </code>\n   or\n   <code>\n    call xxx, pop\n   </code>\n   to push some absolute address onto the stack, it will likely be PIC\n  </li>\n </ul>\n <h1>\n  Detection by opening with debugger\n </h1>\n <p>\n  You may also take advantage of the fact, that when you load position independent program and check address of some function,\n  <code>\n   main\n  </code>\n  for example, it will change each time you load it (because of\n  <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">\n   ASLR\n  </a>\n  ). The same won't be true for PDC - all addresses will remain the same.\n </p>\n <h1>\n  Detection by reading the ELF header\n </h1>\n <p>\n  Why making your job hard analysing the executable, while it provides explicitly the information you need. As you noted in the comment,\n  <code>\n   ET_EXEC\n  </code>\n  value of\n  <code>\n   e_type\n  </code>\n  will be present in PDC, while\n  <code>\n   ET_DYN\n  </code>\n  will appear in PIC. And, according to the second answer to this\n  <a href=\"https://stackoverflow.com/questions/34519521/why-does-gcc-create-a-shared-object-instead-of-an-executable-binary-according-to\">\n   question\n  </a>\n  , this is the information used to determine whether\n  <code>\n   ASLR\n  </code>\n  may be used, in\n  <code>\n   Linux\n  </code>\n  .\n </p>\n <h1>\n  Other methods\n </h1>\n <p>\n  You may of course use other tools for this purpose, like\n  <code>\n   file\n  </code>\n  or\n  <code>\n   readelf\n  </code>\n  for instance.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}