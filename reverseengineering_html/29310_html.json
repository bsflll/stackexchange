{
    "title": "When patching static software, is there a preferred patching strategy?",
    "link": "https://reverseengineering.stackexchange.com/questions/29310/when-patching-static-software-is-there-a-preferred-patching-strategy",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Suppose you have something like this (in x86-like asm)\n </p>\n <pre><code>10 | mov ebx 1 // good response from function \"check\" below\n20 | call check() // modifies eax\n30 | test eax ebx\n40 | jeq good\n50 | bad:   call lose()\n60 | jmp finish\n70 | good:  call win()\n80 | finish:    push/pop stuff from stack\n90 | retn 0\n</code></pre>\n <p>\n  Suppose I want to modify the logic so that it always executes some\n  <code>\n   win()\n  </code>\n  . From what we have, there are multiple ways to accomplish this. Here are strategies I can see:\n </p>\n <ol>\n  <li>\n   NOP 10-60 (but then maybe important registers/stack are not set because\n   <code>\n    check()\n   </code>\n   isn't called as well as registers/stack may not be set properly)\n  </li>\n  <li>\n   30 - make it\n   <code>\n    test eax eax\n   </code>\n   or something along these lines. Seems like a solid way, but isn't it then better to do (3)\n  </li>\n  <li>\n   40 - make jump unconditional. This is what I do currently, but I wonder if the CPU overhead (for things like\n   <code>\n    30 | test eax ebx\n   </code>\n   are acceptable)\n  </li>\n  <li>\n   50 or 60 - make either perform\n   <code>\n    jmp good\n   </code>\n   -- seems  like the destructive/potentially crash inducing approach due to registers/stack being already pre-set for lose() function\n  </li>\n  <li>\n   Create a ROP chain/inject my own logic to just call win() -- isn't it too much for this situation?\n  </li>\n  <li>\n   modify\n   <code>\n    10 | mov ebx 1\n   </code>\n   to be set to\n   <code>\n    0\n   </code>\n   -- but then in case\n   <code>\n    win()\n   </code>\n   should be called, it won't be\n  </li>\n </ol>\n <p>\n  I wonder if there is a standard strategy recommended for patching like this.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "88",
    "tags": [
        "binary",
        "assembly"
    ],
    "user": "TAbdiukov",
    "time": "Sep 20, 2021 at 5:27",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n mov ebx,0 ; jq good maybe ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The better solution (on my opinion) is\n </p>\n <ol>\n  <li>\n   the simpler,\n  </li>\n  <li>\n   less influencing other program logic,\n  </li>\n  <li>\n   provides length equality of opcodes you want to replace and those you want to insert.\n  </li>\n </ol>\n <p>\n  By my experience the less painful way is to switch conditional jump (\n  <code>\n   je\n  </code>\n  ) to unconditional\n  <code>\n   jmp\n  </code>\n  , as opcodes are always the same length (\n  <code>\n   74 0a\n  </code>\n  vs\n  <code>\n   eb 0a\n  </code>\n  ):\n </p>\n <pre><code>;addr  opcode                  instruction\n0:     bb 01 00 00 00          mov    ebx,0x1\n5:     e8 00 00 00 00          call   sub_check\na:     85 d8                   test   eax,ebx\nc:     74 0a                   je     18 <good>\n000000000000000e <bad>:\ne:     e8 00 00 00 00          call   sub_lose\n13:    e9 00 00 00 00          jmp    18 <good>\n0000000000000018 <good>:\n18:    e8 00 00 00 00          call   sub_win\n</code></pre>\n <p>\n  and\n </p>\n <pre><code>;addr  opcode               instruction\n0:     bb 01 00 00 00       mov    ebx,0x1\n5:     e8 00 00 00 00       call   sub_check\na:     85 d8                test   eax,ebx\nc:     eb 0a                jmp    18 <good>\n000000000000000e <bad>:\ne:     e8 00 00 00 00       call   sub_lose\n13:    e9 00 00 00 00       jmp    18 <good>\n0000000000000018 <good>:\n18:    e8 00 00 00 00       call   sub_win\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ornstein89",
            "time": "Sep 29, 2021 at 17:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}