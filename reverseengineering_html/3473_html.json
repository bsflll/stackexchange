{
    "title": "What is the difference between static disassembly and dynamic disassembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/3473/what-is-the-difference-between-static-disassembly-and-dynamic-disassembly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am told that tools like\n  <strong>\n   IDA Pro\n  </strong>\n  are static disassembly tool,\nand tools like\n  <strong>\n   OllyDbg\n  </strong>\n  are dynamic disassembly tool.\n </p>\n <p>\n  But from the using experiences on these tools, I don't think there \nis any difference between the tools in\n  <strong>\n   disassembly\n  </strong>\n  procedure.\n </p>\n <p>\n  Basically all you need to do is load binary file into IDA or OllyDbg, \nand they will use certain recursive disassembly algorithm to disassembly\nthe binary and give you the output.\n </p>\n <p>\n  Am I wrong..? Then what is the difference between static disassembly \nand dynamic disassembly..?\n </p>\n <p>\n  Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 2,
    "views": "10k",
    "tags": [
        "ida",
        "disassembly",
        "ollydbg",
        "disassemblers"
    ],
    "user": "lllllllllllll",
    "time": "Apr 28, 2017 at 12:57",
    "comments": [
        {
            "user": "jvoisin",
            "text": "<html><body><span class=\"comment-copy\">\n Aren't you talking instead of \"static analysis\" versus \"dynamic analysis\" ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n And look, there are even tag wikis\n <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/static-analysis\">\n  static-analysis\n </a>\n and\n <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/dynamic-analysis\">\n  dynamic-analysis\n </a>\n that may or may not have extra information, depending on whether someone sat down to do it.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You have a mix up here. There is no such thing as dynamic disassembly and static disassembly but rather\n  <a href=\"http://en.wikipedia.org/wiki/Dynamic_program_analysis\">\n   dynamic\n  </a>\n </p>\n <blockquote>\n  <p>\n   Dynamic program analysis is the analysis of computer software that is performed by executing programs on a real or virtual processor.\n  </p>\n </blockquote>\n <p>\n  and\n  <a href=\"http://en.wikipedia.org/wiki/Static_program_analysis\">\n   static analysis\n  </a>\n  of a binary.\n </p>\n <blockquote>\n  <p>\n   Static program analysis is the analysis of computer software that is performed without actually executing programs\n  </p>\n </blockquote>\n <p>\n  What do the mentioned tools have are different disassembly engines which sometimes produce different results, mainly from binaries which incorporate anti-disassembly techniques.\n </p>\n</div>\n</body></html>",
            "votes": "16",
            "user": "PhoeniX",
            "time": "Jan 17, 2014 at 21:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Yes, I think I have made the mistake before, now I know it and thank you a lot!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I actually don't think that there was any mix up. In fact, there exist two disassembly techniques : static & dynamic. The definitions provided here come from this 2003 publication on code obfuscation :\n  <a href=\"http://www.cs.arizona.edu/solar/papers/CCS2003.pdf\" rel=\"noreferrer\">\n   http://www.cs.arizona.edu/solar/papers/CCS2003.pdf\n  </a>\n </p>\n <ul>\n  <li>\n   <p>\n    <strong>\n     Static disassembly\n    </strong>\n    is where the file being disassembled isn't executed during the course of disassembly.\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Dynamic disassembly\n    </strong>\n    is where the file is being executed on some input and the execution is being monitored by an external tool (debugger, ...) to identify the instructions being executed.\n   </p>\n  </li>\n </ul>\n <p>\n  This link (\n  <a href=\"http://www.maqao.org/publications/madras_techreport.pdf\" rel=\"noreferrer\">\n   http://www.maqao.org/publications/madras_techreport.pdf\n  </a>\n  ) provides an interesting coverage of techniques used by some disassemblers & binary instrumenters. Though it is not exhaustive and doesn't directly answer your question, you'll find more references to check.\n </p>\n <p>\n  About dynamic & static binary analysis, these  two techniques are mainly performed for profiling applications. The purpose is to acquire information about hot spots, memory access patterns, ...\n </p>\n <ul>\n  <li>\n   <p>\n    The\n    <strong>\n     static analysis\n    </strong>\n    is usually based on analyzing the program without the need to execute it. It is mostly based on finding patterns, counting memory references, ... The Wikipedia page about\n    <em>\n     Static program analysis\n    </em>\n    is, from my point of view, incomplete but still a good read.\n   </p>\n  </li>\n  <li>\n   <p>\n    The\n    <strong>\n     dynamic analysis\n    </strong>\n    , on the other hand, involves executing the program and requires instrumentation of basic blocks such as loops, functions, ... The instrumentation consists of inserting probes at the entry and exit of a basic block which will measure the time according to a certain metric (CPU cycles, time in Âµs, ...). The information gathered after analysis is usually used to optimize the application by performing loop unrolling with a suitable unroll factor, vectorization if possible (SSE, AVX, Altivec, ...), etc.\n   </p>\n  </li>\n </ul>\n <p>\n  Many tools perform both the latter techniques : Intel's VTune, MAQAO, DynInst, gprof, ...\n </p>\n <p>\n  I myself have written a\n  <strong>\n   GCC\n  </strong>\n  plugin, which you can find on my Github under the path\n  <strong>\n   /yaspr/zebuprof\n  </strong>\n  , which does instrumentation at the source level and performs static & dynamic analysis.\n </p>\n <p>\n  I hope this clarifies things a bit.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "yaspr",
            "time": "Apr 23, 2014 at 15:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}