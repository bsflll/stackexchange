{
    "title": "Heap address Calculation",
    "link": "https://reverseengineering.stackexchange.com/questions/13727/heap-address-calculation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can see in the windbg disassembly the handle to the process heap on, allocated by the Windows (WINDOWS 10) for my process:\n </p>\n <pre><code>0:000> dt nt!_PEB 0106c000\nntdll!_PEB\n   +0x000 InheritedAddressSpace : 0 ''\n   +0x001 ReadImageFileExecOptions : 0 ''\n   +0x002 BeingDebugged    : 0x1 ''\n   +0x003 BitField         : 0x4 ''\n   +0x003 ImageUsesLargePages : 0y0\n   +0x003 IsProtectedProcess : 0y0\n   +0x003 IsImageDynamicallyRelocated : 0y1\n   +0x003 SkipPatchingUser32Forwarders : 0y0\n   +0x003 IsPackagedProcess : 0y0\n   +0x003 IsAppContainer   : 0y0\n   +0x003 IsProtectedProcessLight : 0y0\n   +0x003 IsLongPathAwareProcess : 0y0\n   +0x004 Mutant           : 0xffffffff Void\n   +0x008 ImageBaseAddress : 0x00840000 Void\n   +0x00c Ldr              : 0x77a4ebe0 _PEB_LDR_DATA\n   +0x010 ProcessParameters : 0x03b885e0 _RTL_USER_PROCESS_PARAMETERS\n   +0x014 SubSystemData    : (null) \n   +0x018 ProcessHeap      : 0x03b70000 Void\n</code></pre>\n <p>\n  Now i want to examine the heap header, and apply the\n  <code>\n   dt !_HEAP\n  </code>\n  to the\n  <strong>\n   ProcessHeap      : 0x03b70000\n  </strong>\n  , but i can see that i get totaly invalid data in result.\n  <code>\n   !heap -s\n  </code>\n  gives me totally different results for the heap,\n </p>\n <pre><code>LFH Key                   : 0xd5ec6951\nTermination on corruption : ENABLED\n  Heap     Flags   Reserv  Commit  Virt   Free  List   UCR  Virt  Lock  Fast \n                    (k)     (k)    (k)     (k) length      blocks cont. heap \n-----------------------------------------------------------------------------\n05e90000 00000002    1020      4   1020      2     1     1    0      0      \n00ff0000 00001002      60      4     60      2     1     1    0      0     \n</code></pre>\n <p>\n  I understand, that the address where the heap header starts must be calculated  from this handle,\n  <strong>\n   ProcessHeap      : 0x03b70000 Void\n  </strong>\n  but i don't understand how it is calculated. its not a va, because 00840000 + 03b70000 != 05e90000 , so how to get from the heap handle, to the actual address of _HEAP structure header?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "memory",
        "process",
        "address",
        "heap"
    ],
    "user": "Vlad",
    "time": "Oct 15, 2016 at 20:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  this is from win7 but that shouldn't matter much\n </p>\n <p>\n  <strong>\n   ProcessHeap From Peb of current Process\n  </strong>\n </p>\n <pre><code>0:000> dt ntdll!_PEB ProcessHeap @$proc \n   +0x018 ProcessHeap : 0x00430000 Void\n</code></pre>\n <p>\n  heap Stat For the same\n </p>\n <pre><code>0:000> !heap -s @$proc->ProcessHeap\n\n\n****************************************************************************\n                                              NT HEAP STATS BELOW\n****************************************************************************\nNtGlobalFlag enables following debugging aids for new heaps:\n    tail checking\n    free checking\n    validate parameters\nLFH Key                   : 0x20cb0363\nTermination on corruption : ENABLED\n  Heap     Flags   Reserv  Commit  Virt   Free  List   UCR  Virt  Lock  Fast \n                    (k)     (k)    (k)     (k) length      blocks cont. heap \n-----------------------------------------------------------------------------\n00430000 40000062    1024     24   1024      3     7     1    0      0      \n00010000 40008060      64      4     64      2     1     1    0      0      \n-----------------------------------------------------------------------------\n</code></pre>\n <p>\n  HeapEntryStructure\n </p>\n <pre><code>0:000> dt nt!_Heap Entry.* @@(@$proc->ProcessHeap)\nntdll!_HEAP\n   +0x000 Entry  : \n      +0x000 Size   : 0xda5a\n      +0x002 Flags  : 0x5b '['\n      +0x003 SmallTagIndex : 0xa9 ''\n      +0x000 SubSegmentCode : 0xa95bda5a Void\n      +0x004 PreviousSize : 0x2d79\n      +0x006 SegmentOffset : 0 ''\n      +0x006 LFHFlags : 0 ''\n      +0x007 UnusedBytes : 0x1 ''\n      +0x000 FunctionIndex : 0xda5a\n      +0x002 ContextValue : 0xa95b\n      +0x000 InterceptorValue : 0xa95bda5a\n      +0x004 UnusedBytesLength : 0x2d79\n      +0x006 EntryOffset : 0 ''\n      +0x007 ExtendedBlockSignature : 0x1 ''\n      +0x000 Code1  : 0xa95bda5a\n      +0x004 Code2  : 0x2d79\n      +0x006 Code3  : 0 ''\n      +0x007 Code4  : 0x1 ''\n      +0x000 AgregateCode : 0x01002d79`a95bda5a\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Oct 16, 2016 at 5:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vlad",
                    "text": "<span class=\"comment-copy\">This is really weird... for some reason my heaps doesnt match, i think this is because no CRT is used in application. I just created the default c console application and there is exactly 1 heap by <code>!heap -s @$proc-&gt;ProcessHeap</code> which does match <code>dt ntdll!_PEB ProcessHeap @$proc </code> value. So crt does setup the heaps properly.. But isnt the process supposed to have the default heap header already created by the OS?</span>",
                    "time": null
                },
                {
                    "user": "Vlad",
                    "text": "<span class=\"comment-copy\">Nevermind, it was my fault. The Page heap verifier messed with the PEB's heap handle</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem was due to the Page Heap verification, enabled by\n  <code>\n   Gflags\n  </code>\n  . I forgot about that, and the heap verifier was messing with the heap handles. When i disabled it, the handle at the PEB became valid.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Vlad",
            "time": "Oct 16, 2016 at 20:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}