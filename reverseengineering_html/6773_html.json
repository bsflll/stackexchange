{
    "title": "Unpacking a backdoor program for studying",
    "link": "https://reverseengineering.stackexchange.com/questions/6773/unpacking-a-backdoor-program-for-studying",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanted to learn something about unpacking malware manuelly and found the following link:\n </p>\n <pre><code>  writequit.org/blog/?p=165.\n</code></pre>\n <p>\n  As you can see, the malware in that example begins with the PUSHAD instruction. (I thought it would be a good link because 2 days ago I started to analyze a malware which begins with the same PUSHAD instruction. It was also packed with UPX like the malware in that example of the given link)\n </p>\n <p>\n  So, I downloaded the malware of the example for testing purpose.\n </p>\n <p>\n  What I did:\n </p>\n <p>\n  When I step into PUSHAD instruction(pressing F7), double-clicking ESP in combination with \"Following in Dump\", then I choose the first 4 bytes of the first row (ESP address) in the hex window. Then I go to Breakpoint -> Hardware, on access -> Dword. Then F9. \n(I hope I could explain it right but you can be sure that I did exactly the same things as in the example of the link)\n </p>\n <p>\n  My problem:\n </p>\n <p>\n  The first thing:\n </p>\n <p>\n  After I click ESP -> \"Follow in Dump\" , the 4 bytes of the first row looks like this: 00 00 00 00.\n(So, only zeros. Not the same like in the example which was 08 02 91 7c as you can see)\n </p>\n <p>\n  The second thing:\n </p>\n <p>\n  When I choose the 00 00 00 00 -> Breakpoint -> Hardware, on access -> Dword, then I let it run (F9) but the malware does not run to a location where I can find POPAD or JMP .... as in the example. \nIn my case, after all that it runs to a location (especially, running ends in a LEAVE instruction) with the following:\n </p>\n <pre><code>   ...\n   ...\n   LEA EAX, DWORD PTR SS:[EBP-3C]\n   PUSH EAX\n   CALL DWORD PTR DS: [<&ntdll.RtlRaiseException>]\n   LEAVE                                             <----- here, it ends\n   RETN 10\n   MOV DWORD PTR SS: [EBP-40], EAX\n   ...\n   ...\n</code></pre>\n <p>\n  So, even if I scroll hundreds of lines upwards or downwards, I could not find a POPAD instruction.\n </p>\n <p>\n  My question:\n </p>\n <p>\n  Why it is so? Do I need to configure something in the ollydbg settings ?\n </p>\n <p>\n  I hope someone can help me in that case, because although I do the same steps as in the example, I have different results.\n </p>\n <p>\n  best regards,\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "malware",
        "unpacking"
    ],
    "user": "user3097712",
    "time": "Dec 6, 2014 at 21:41",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<html><body><span class=\"comment-copy\">\n 0. What OS do you have on research machine? 1. Restart the Olly session and you should break on 0x424231. 2. Note the EDI register, before execution\n <code>\n  pushed\n </code>\n . 3. Do you see, that EDI has 7c910208? 4. In addition, scroll down from 0x424231 and you should find\n <code>\n  popad\n </code>\n at 0x424386.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Your mistake is that you put the breakpoint while being on the\n  <code>\n   PUSHAD\n  </code>\n  instruction (meaning it wasn't executed yet).\n </p>\n <hr/>\n <p>\n  I just unpacked the file, and this is how you do it:\n </p>\n <h1>\n  1. Drop the file in Olly and find the\n  <code>\n   PUSHAD\n  </code>\n  instruction\n </h1>\n <p>\n  Simply do what you did before, and end up here:\n </p>\n <p>\n  <img alt=\"Step 1\" src=\"https://i.sstatic.net/OW0TO.png\"/>\n </p>\n <h1>\n  2. Step once to skip the\n  <code>\n   PUSHAD\n  </code>\n </h1>\n <p>\n  Now, you got everything pushed, and the decompression can start.\n </p>\n <p>\n  <img alt=\"Step 2\" src=\"https://i.sstatic.net/Zl1xB.png\"/>\n </p>\n <h1>\n  3. Put a breapoint on the stack\n </h1>\n <p>\n  Now, you've arrived to the point where the stack looks like:\n </p>\n <pre><code>## original ESP\n## some register's value\n## some register's value\n## some register's value\n## ...\n## you are here\n</code></pre>\n <p>\n  Now, on the\n  <code>\n   you are here\n  </code>\n  point, the decompressor uses the stack, and it grows downwards (to lower addresses).\nWhen it is done using it, it clears the stack, and reaches again your\n  <code>\n   original ESP\n  </code>\n  point, where the\n  <code>\n   popad\n  </code>\n  instruction writes, and which is what causes the breakpoint to hit.\n </p>\n <h1>\n  4. Run\n </h1>\n <p>\n  Pretty much self-explanatory.\nYou'll end up here after running:\n </p>\n <p>\n  <img alt=\"Step 3\" src=\"https://i.sstatic.net/zA4IX.png\"/>\n </p>\n <h1>\n  5. Step again\n </h1>\n <p>\n  Done, you found the OEP!\n </p>\n <p>\n  <img alt=\"OEP\" src=\"https://i.sstatic.net/EmKZr.png\"/>\n </p>\n <p>\n  Now you can dump. I used\n  <a href=\"http://low-priority.appspot.com/ollydumpex/#download\" rel=\"noreferrer\">\n   OllyDumpEx\n  </a>\n  :\n  <img alt=\"OllyDumpEx\" src=\"https://i.sstatic.net/Dzetg.png\"/>\n </p>\n <p>\n  Simply click\n  <kbd>\n   Get EIP as OEP\n  </kbd>\n  while being on the\n  <code>\n   PUSH EBP\n  </code>\n  instruction, and then dump: (also write down the EIP\n  <sup>\n   1\n  </sup>\n  )\n  <img alt=\"dump\" src=\"https://i.sstatic.net/Eh9lw.png\"/>\n  <img alt=\"fix OEP\" src=\"https://i.sstatic.net/VUZ60.png\"/>\n </p>\n <h1>\n  6. Fix IAT\n </h1>\n <p>\n  Now, you want to fix the IAT to properly see the used APIs!\nDo not close Olly and don't step, just dump and leave it as is.\n </p>\n <p>\n  Open\n  <code>\n   ImportREC\n  </code>\n  , pick the process, and press\n  <kbd>\n   IAT AutoSearch\n  </kbd>\n  , then\n  <kbd>\n   Get Imports\n  </kbd>\n  .\n </p>\n <p>\n  <img alt=\"IAT fixing\" src=\"https://i.sstatic.net/z5lOq.png\"/>\n </p>\n <p>\n  Sometimes it may not find the OEP automatically, so just take the OEP you found before\n  <sup>\n   1\n  </sup>\n  , put it there, and click\n  <kbd>\n   IAT AutoSearch\n  </kbd>\n  and then\n  <kbd>\n   Get Imports\n  </kbd>\n  again, and then dump.\n </p>\n <h1>\n  7. Taking a look at the file in IDA\n </h1>\n <p>\n  Now you can analyze the file.\n </p>\n <p>\n  This is how it looks like when manually unpacked:\n </p>\n <p>\n  <img alt=\"dumped\" src=\"https://i.sstatic.net/eLLXH.png\"/>\n </p>\n <p>\n  And this is how the UPX unpacked (\n  <code>\n   upx -d\n  </code>\n  ) version looks like:\n </p>\n <p>\n  <img alt=\"upx unpacked\" src=\"https://i.sstatic.net/9gtbb.png\"/>\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "rev",
            "time": "Feb 14, 2015 at 18:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you mentioned, UPX was used and it can be unpacked by UPX itself\n  <a href=\"http://m0rphiz3.tk/?p=12\" rel=\"nofollow\">\n   see this example\n  </a>\n  .\nTo address scrolling to find the entry point, its because you are in a different module loaded by the binary. You're probably getting into ntdll.dll module disassembly.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "RoraÎ–",
            "time": "Dec 12, 2014 at 22:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">the question clearly stated that the user wanted to unpack manually so the tool for unpacking is not really relevant.</span>",
                    "time": null
                }
            ]
        }
    ]
}