{
    "title": "How to understand the \"lpStartAddress\"-Parameter of the function CreateThread",
    "link": "https://reverseengineering.stackexchange.com/questions/5880/how-to-understand-the-lpstartaddress-parameter-of-the-function-createthread",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following assembly code :\n </p>\n <pre><code>.....\nlea eax, [ebp+ThreadID]\npush eax              ; lpThreadID\npush 0                ; dwCreationFlags\npush 0                ; lpParameter\npush offset StartAddress  ; lpStartAddress\npush 0                ; dwStackSize\ncall CreateThread\n....\n</code></pre>\n <p>\n  So, I try to translate it in a C-like pseudocode:\n </p>\n <pre><code>DWORD* LPWORD eax_lpThreadID = NULL;\nDWORD dwCreationFlags;\nvoid *LPVOID lpParameter;\nSIZE_T dwStackSize;\nLPSECURITY ATTRIBUTES lpThreadAttributes;\n\nHANDLE handle_to_new_Thread = CreateThread(lpThreadAttributes, dwStackSize, ..., lpParameter, dwCreationFlags, eax_lpThreadID );\n</code></pre>\n <p>\n  As you can see, I do not include the 3rd parameter, namely the parameter\n  <code>\n   LPTHREAD_START_ROUTINE lpStartAddress\n  </code>\n  , because I have problems understanding it.\nIn\n  <a href=\"https://stackoverflow.com/questions/19472837/what-is-a-lpthread-start-routine\">\n   this SO thread\n  </a>\n  i have read that a\n  <code>\n   LPTHREAD_START_ROUTINE\n  </code>\n  is a function pointer defined as:\n </p>\n <pre><code>typedef DWORD (__stdcall *LPTHREAD_START_ROUTINE) (\n  [in] LPVOID lpThreadParameter\n);\n</code></pre>\n <p>\n  That would mean that the 4th parameter\n  <code>\n   lpThreadParameter\n  </code>\n  is a parameter of this. \nBut how can I integrate that information into my pseudo C code program ?\nI am little bit confused about that. Can someone explain it to me? The other attributes/parameters are clear....\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 3,
    "views": "2k",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "user3097712",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In C pseudocode let's say you have a function called\n  <code>\n   doJob\n  </code>\n  . You want to create a thread to executes it.\n </p>\n <pre><code>DWORD WINAPI doJob(LPVOID lpParameter){\n    // Do some work. You can only pass one parameter.\n    // If you need more parameters, define a structure\n    // and send it though it's pointer.\n    return statuscode;\n}\n\nHandle hThread = \n   CreateThread(&attributes,dwStackSize,&doJob,&paramstruct,flags,&newThreadIdBuffer);\n</code></pre>\n <p>\n  Or in asm (nasm syntax, if I still remember it):\n </p>\n <pre><code>lea eax, newThreadIdBuffer\npush eax\npush 0 ; or 4 or 0x00010000 or 0x00010004\nlea eax, paramstruct\npush eax\nlea eax, doJob\npush eax\npush dwStackSize ; 0 will use default\nlea eax, attributes\npush eax\ncall CreateThread\n</code></pre>\n <p>\n  This can be done cleaner, but I believe it demonstrates the concept.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Jul 18, 2014 at 19:58",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms682453(v=vs.85).aspx\" rel=\"nofollow\">\n   MSDN\n  </a>\n </p>\n <blockquote>\n  <p>\n   <strong>\n    lpStartAddress\n   </strong>\n   is a pointer to the application-defined function to be\n  executed by the thread. This pointer represents the starting address\n  of the thread.\n  </p>\n </blockquote>\n <p>\n  Basically\n  <code>\n   lpStartAddress\n  </code>\n  is the entry point of the thread. This is a callback function. It will be called when the thread is created and executed.\n </p>\n <p>\n  More on this,\n </p>\n <blockquote>\n  <p>\n   The CreateThread function creates a new thread for a process. The\n  creating thread must specify the starting address of the code that the\n  new thread is to execute. Typically, the starting address is the name\n  of a function defined in the program code (for more information, see\n  ThreadProc). This function takes a single parameter and returns a\n  DWORD value. A process can have multiple threads simultaneously\n  executing the same function.\n  </p>\n </blockquote>\n <p>\n  See\n  <em>\n   <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms682516(v=vs.85).aspx\" rel=\"nofollow\">\n    this\n   </a>\n  </em>\n  page, for an example on creating threads.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xec",
            "time": "Jul 17, 2014 at 4:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>lea eax, [ebp+ThreadID]\npush eax              ; lpThreadID\npush 0                ; dwCreationFlags\npush 0                ; lpParameter\npush offset StartAddress  ; lpStartAddress\npush 0                ; dwStackSize\ncall CreateThread\n</code></pre>\n <p>\n  the first argument is pushed last so you have got it all reversed up also it seems during copy paste you missed one argument lpSecurtiyAttributes\n </p>\n <p>\n  cpp\n </p>\n <pre><code>Handle hThread = CreateThread(&lpThreadId,NULL,NULL,&lpStartAddress,NULL,NULL); \n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Jul 17, 2014 at 6:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}