{
    "title": "Android malware reversing : constant values",
    "link": "https://reverseengineering.stackexchange.com/questions/9402/android-malware-reversing-constant-values",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was trying to reverse engineer an Android Malware sample and I find the following sample when decompiling the jar file I obtained by running\n  <code>\n   dex2jar\n  </code>\n  .\n </p>\n <blockquote>\n  <pre><code>  if (i >= paramBundle.length())\n  {\n    ((TextView)findViewById(2131034112)).setText(((StringBuilder)localObject).toString());\n    return;\n  }\n</code></pre>\n </blockquote>\n <p>\n  How can I find the string that\n  <code>\n   2131034112\n  </code>\n  refers to?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "357",
    "tags": [
        "android"
    ],
    "user": null,
    "time": "Jul 19, 2015 at 21:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The jar file produced by\n  <code>\n   dextojar\n  </code>\n  should include a class named\n  <code>\n   R\n  </code>\n  , which contains subclasses with resource id definitions:\n </p>\n <pre><code>public final class R {\n...\n    public static final class list {\n        public static final int filename=0x7f050001;\n        public static final int type=0x7f050000;\n    }\n...\n}\n</code></pre>\n <p>\n  The (sub)class name, and variable names, correspond to the ids from the resource definitions in the apk file (res/layout/*.xml). In the above example, the R.java was autogenerated from these entries in res/layout/main.xml:\n </p>\n <pre><code> <TextView\n   android:id=\"@+list/type\"\n   android:layout_width=\"20dip\"\n   android:layout_height=\"20dip\"\n   android:textSize=\"16sp\"\n    />\n <TextView\n   android:id=\"@+list/filename\"\n   android:layout_width=\"0dp\"    android:layout_weight=\"1\"\n   android:layout_height=\"wrap_content\"\n   android:textSize=\"16sp\"\n    />\n</code></pre>\n <p>\n  So, since\n  <code>\n   2131034112\n  </code>\n  equals\n  <code>\n   0x7F050000\n  </code>\n  , with my\n  <code>\n   R.java\n  </code>\n  and\n  <code>\n   main.xml\n  </code>\n  , your code would set the\n  <code>\n   @+list/type\n  </code>\n  textview content.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jul 20, 2015 at 2:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}