{
    "title": "Which environmental variables can be used alter control flow and keep suid?",
    "link": "https://reverseengineering.stackexchange.com/questions/15000/which-environmental-variables-can-be-used-alter-control-flow-and-keep-suid",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am working on a challenge where it is possible to manipulate environmental variables (in C).\n </p>\n <p>\n  I know that with\n  <code>\n   PATH\n  </code>\n  it is possible to execute arbitrary programs when relative path is used, for example:\n  <code>\n   execv(\"ls\", 0);\n  </code>\n </p>\n <p>\n  <code>\n   export PATH=path/to/attackers/dir/:$PATH\n  </code>\n  (This works as well by changing the PATH environmental within the program's memory, e.g\n  <code>\n   char **envp\n  </code>\n  )\n </p>\n <p>\n  I have read something about\n  <code>\n   IFS\n  </code>\n  but I think is only applicable on scripts.\n </p>\n <p>\n  <code>\n   export IFS=/\n  </code>\n  (so /bin/ls will become\n  <code>\n   bin ls\n  </code>\n  )\n </p>\n <p>\n  Is there any other environmental that can be used for exploitation?\n </p>\n <p>\n  I was trying for example to mess with\n  <code>\n   PWD\n  </code>\n  in order to influence\n  <code>\n   fopen(\"file\")\n  </code>\n  with a file in different directory than the current but it didn't work. (the\n  <code>\n   fopen\n  </code>\n  eventually calls\n  <code>\n   getcwd\n  </code>\n  which I could not identify how exactly it operates).\n </p>\n <p>\n  <code>\n   export PWD=new/pwd\n  </code>\n  (It changes the prompt but the\n  <code>\n   pwd\n  </code>\n  command returns the right current working directory)\n </p>\n <p>\n  Operating system: Ubuntu (latest kernel)\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "93",
    "tags": [
        "c"
    ],
    "user": "Anton Paragas",
    "time": "Mar 24, 2017 at 10:36",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n most of these tricks only apply to shell scripts, not C programs\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How exactly did you set the path? Can you confirm the output of\n  <code>\n   pwd\n  </code>\n  changes?\n </p>\n <blockquote>\n  <p>\n   <code>\n    get_current_dir_name()\n   </code>\n   will\n   <code>\n    malloc(3)\n   </code>\n   an array big enough to hold the absolute pathname of the current working directory. If the environment variable\n   <code>\n    PWD\n   </code>\n   is set, and its value is correct, then that value will be returned.\n  </p>\n </blockquote>\n <p>\n  <a href=\"https://linux.die.net/man/3/getcwd\" rel=\"nofollow noreferrer\">\n   Source\n  </a>\n </p>\n <p>\n  Which operating system do you use?\n </p>\n <blockquote>\n  <p>\n   Under Linux, the function getcwd() is a system call (since 2.1.92).\n         On older systems it would query /proc/self/cwd.\n  Straight from the kernel source:\n  </p>\n </blockquote>\n <pre><code>/*\n * NOTE! The user-level library version returns a\n * character pointer. The kernel system call just\n * returns the length of the buffer filled (which\n * includes the ending '\\0' character), or a negative\n * error value. So libc would do something like\n *\n *  char *getcwd(char * buf, size_t size)\n *  {\n *      int retval;\n *\n *      retval = sys_getcwd(buf, size);\n *      if (retval >= 0)\n *          return buf;\n *      errno = -retval;\n *      return NULL;\n *  }\n */\nSYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)\n{\n    int error;\n    struct path pwd, root;\n    char *page = (char *) __get_free_page(GFP_USER);\n\n    if (!page)\n        return -ENOMEM;\n\n    get_fs_root_and_pwd(current->fs, &root, &pwd);\n\n    error = -ENOENT;\n    spin_lock(&dcache_lock);\n    if (!d_unlinked(pwd.dentry)) {\n        unsigned long len;\n        struct path tmp = root;\n        char *cwd = page + PAGE_SIZE;\n        int buflen = PAGE_SIZE;\n\n        prepend(&cwd, &buflen, \"\\0\", 1);\n        error = prepend_path(&pwd, &tmp, &cwd, &buflen);\n        spin_unlock(&dcache_lock);\n\n        if (error)\n            goto out;\n\n        /* Unreachable from current root */\n        if (!path_equal(&tmp, &root)) {\n            error = prepend_unreachable(&cwd, &buflen);\n            if (error)\n                goto out;\n        }\n\n        error = -ERANGE;\n        len = PAGE_SIZE + page - cwd;\n        if (len <= size) {\n            error = len;\n            if (copy_to_user(buf, cwd, len))\n                error = -EFAULT;\n        }\n    } else\n        spin_unlock(&dcache_lock);\n\nout:\n    path_put(&pwd);\n    path_put(&root);\n    free_page((unsigned long) page);\n    return error;\n}\n</code></pre>\n <p>\n  TL;DR\n </p>\n <p>\n  glibc only specifies a stub looking up the PWD variable, it it is not set, the filesystem implementation has to handle the job\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Mar 24, 2017 at 7:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}