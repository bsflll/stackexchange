{
    "title": "How to extract port number from shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/25981/how-to-extract-port-number-from-shellcode",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I saw\n  <a href=\"https://github.com/rapid7/metasploit-framework/blob/e6a741011fed35d97ceb734e1b31e6e58507a9a3/external/source/shellcode/windows/x86/src/block/block_reverse_tcp.asm#L41\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  shellcode and when they use the\n  <code>\n   connect\n  </code>\n  function they pass the port number 4444:\n </p>\n <pre><code>set_address:\n  push byte 0x05         ; retry counter\n  push 0x0100007F        ; host 127.0.0.1\n  push 0x5C110002        ; family AF_INET and port 4444\n  mov esi, esp           ; save pointer to sockaddr struct\n</code></pre>\n <p>\n  Or in\n  <a href=\"https://coffeegist.com/security/slae-exam-5-shellcode-analysis-part-3/\" rel=\"nofollow noreferrer\">\n   other website\n  </a>\n  like that:\n </p>\n <pre><code>0000001A      push dword 0x5c110002   ; [0x5c110002, 0x81caa8c0, 0x1, 0x0] // sin_port and sin_family (4444, 0x0002)\n</code></pre>\n <p>\n  But they push\n  <code>\n   0x5C110002\n  </code>\n  , how they extract 4444 from\n  <code>\n   0x5C110002\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "261",
    "tags": [
        "assembly",
        "shellcode"
    ],
    "user": "E235",
    "time": "Sep 27, 2020 at 9:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <code>\n   connect\n  </code>\n  syscall takes a\n  <code>\n   sockaddr\n  </code>\n  structure as an argument, which looks something like this:\n </p>\n <pre><code>struct sockaddr_in {\n        short   sin_family;\n        u_short sin_port;\n        struct  in_addr sin_addr;\n        char    sin_zero[8];\n};\n</code></pre>\n <p>\n  They aren't extracting 4444, it's simply passed on the stack as a two-byte short. You are passing to\n  <code>\n   connect\n  </code>\n  , in little-endian order:\n </p>\n <ul>\n  <li>\n   <code>\n    sin_family: 0x0002 (AF_INET)\n   </code>\n  </li>\n  <li>\n   <code>\n    sin_port: 0x5c11 (4444 in hex, little endian)\n   </code>\n  </li>\n  <li>\n   <code>\n    sin_addr: 0x0100007F ([127] [0] [0] [1], little endian)\n   </code>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Shane Reilly",
            "time": "Sep 28, 2020 at 0:30",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found\n  <a href=\"https://www.exploit-db.com/exploits/39152\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  how to convert it with python.\n </p>\n <pre><code>import socket\nport = 4444\nhex(socket.htons(port))\nResult : 0x5c11 \n</code></pre>\n <p>\n  The opposite is like that:\n </p>\n <pre><code>socket.htons(0x5c11)\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "E235",
            "time": "Sep 27, 2020 at 9:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}