{
    "title": "Unexpected SEGFAULT when there's apparently nothing that would cause it",
    "link": "https://reverseengineering.stackexchange.com/questions/21503/unexpected-segfault-when-theres-apparently-nothing-that-would-cause-it",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a from a CTF problem I'm working on. Hopefully it's appropriate to ask this question here.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/iODPl.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"GDB output when segmentation fault happens\" src=\"https://i.sstatic.net/iODPl.png\"/>\n  </a>\n </p>\n <p>\n  Above is the GDB output when the segfault goes off.\n  <code>\n   movaps\n  </code>\n  is the offending instruction, meaning that\n  <code>\n   rsp+0x40\n  </code>\n  is most likely pointing to unmapped memory.\n </p>\n <p>\n  However, a closer look at the memory allocated for the stack\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/C5Evh.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"stack memory map\" src=\"https://i.sstatic.net/C5Evh.png\"/>\n  </a>\n </p>\n <p>\n  and\n  <code>\n   rsp=0x00007ffde19d78a8\n  </code>\n  from the GDB output, shows that\n  <code>\n   rsp+0x40\n  </code>\n  is well within the allocated bounds. This is really confusing for me, is there something I'm missing here? Something else I can look into to debug this?\n </p>\n <p>\n  Finally the output when running this under\n  <code>\n   strace\n  </code>\n </p>\n <pre><code>[pid 32671] --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=NULL} ---\n[pid 32671] +++ killed by SIGSEGV (core dumped) +++\n</code></pre>\n <p>\n  shows that it's apparently a null pointer dereference (\n  <code>\n   si_addr=NULL\n  </code>\n  ), which doesn't make any sense to me because the offending instruction\n  <code>\n   movaps XMMWORD PTR [rsp+0x40],xmm0\n  </code>\n  isn't accessing a NULL pointer?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "linux"
    ],
    "user": "Filip Kilibarda",
    "time": "Jun 17, 2019 at 22:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to\n  <a href=\"https://c9x.me/x86/html/file_module_x86_id_180.html\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  the address should be aligned by 16, which is not happen. Your\n  <code>\n   rsp\n  </code>\n  value is ending by\n  <code>\n   0xa8\n  </code>\n  , so\n  <code>\n   [rsp + 0x40]\n  </code>\n  will be aligned by 8, not 16.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Jun 18, 2019 at 7:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Filip Kilibarda",
                    "text": "<span class=\"comment-copy\">Should've read that 2nd paragraph! Thanks a lot, actually had no idea misalignment could trigger hardware faults, always thought it was <i>just</i> less efficient.</span>",
                    "time": null
                }
            ]
        }
    ]
}