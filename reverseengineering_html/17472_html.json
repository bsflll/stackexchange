{
    "title": "Windows x86 compability on x64 operating system",
    "link": "https://reverseengineering.stackexchange.com/questions/17472/windows-x86-compability-on-x64-operating-system",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know some about wow64 system, in x64 windows version, and i looked up into this wow64* dlls, to see how the actual syscall transition happen, but something i can't find, and this is probably done by windows kernel, is how the actual x86 assembler instruction processing works? I know that there are two selectors for process, 0x23 for x86, and 0x33 for x64, how does kernel handles the assembly code in 0x23 selector for the process ? Is there some sort of virtual machine, that emulates x86 instructions, using x64 instructions?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "205",
    "tags": [
        "windows",
        "x86",
        "x86-64",
        "kernel",
        "emulation"
    ],
    "user": "FriedChineseDumplings",
    "time": "Feb 14, 2018 at 23:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is no need for emulation because x64 processors can execute x86 (32-bit) code natively using so-called\n  <em>\n   compatibility mode\n  </em>\n  . You only need to set up proper\n  <a href=\"https://www.codeproject.com/Articles/45788/The-Real-Protected-Long-mode-assembly-tutorial-for\" rel=\"noreferrer\">\n   descriptors in the GDT\n  </a>\n  (L=0 for 32-bit code, L=1 for 64-bit code) and it \"just works\". This is what Windows does. E.g. from\n  <a href=\"https://www.osronline.com/showthread.cfm?link=246643\" rel=\"noreferrer\">\n   this OSR post\n  </a>\n  , the windows 7 x64 GDT has these entries:\n </p>\n <pre><code>GDT[0x04] = 32 bit ring 3 Code: Execute/Read\nGDT[0x05] = 32 bit ring 3 Data: Read/Write, Accessed\nGDT[0x06] = 64 bit ring 3 Code: Execute/Read, Accessed\n</code></pre>\n <p>\n  Index 4 corresponds to the selector 0x23 (4*8=0x20) and 6 to 0x33 (6*8=0x30).\n </p>\n <p>\n  So by switching to selector 0x23 you can have the CPU execute your code as x86, and then go back to x64 by switching to 0x33.\n </p>\n <p>\n  <code>\n   wow64cpu.dll\n  </code>\n  contains both 32-bit and 64-bit code and is responsible for most of house-keeping necessary when switching between x64 and x86. Kernel itself is x64 only AFAIK, 32-bit code is supported only in user mode.\n </p>\n <p>\n  For more details on Wow64 implementation see this nice article by George Nicolaou:\n </p>\n <p>\n  <a href=\"http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/\" rel=\"noreferrer\">\n   http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Feb 15, 2018 at 19:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}