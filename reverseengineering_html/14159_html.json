{
    "title": "Control a black box \"Traffic Light\" type device using USB",
    "link": "https://reverseengineering.stackexchange.com/questions/14159/control-a-black-box-traffic-light-type-device-using-usb",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a black box device with three LED's that can be turned on and off, and an also black box application that has six buttons that turn each individual LED on and off. I don't know the source code for the application, not what input does the \"traffic light\" expect.\n </p>\n <p>\n  I really want to find out that inputs are sent to the device so that I can control it on my own, preferably without disassembling the device in question :)\n </p>\n <p>\n  I tried to install Wireshark with USBPcap, and managed to capture what happens when buttons are pressed, but the logs are confusing and overwhelming. Can someone please recommend a direction of attack?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "232",
    "tags": [
        "usb"
    ],
    "user": "user1838817",
    "time": "Dec 13, 2016 at 15:43",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Learn about the USB protocol to separate control bytes from the payload; possibly write a wireshark dissector to dump/analyze the payload. Not an easy or fast route to go. Probably more rewarding: use a disassembler like IDA on the application, and check what happens between the button presses and sending stuff to USB. However, if you want to write a program to control the device yourself, you'll probably have to do some of the status stuff as well, so you really need to learn more about how USB works.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The way I see it, you have three options :\n </p>\n <ol>\n  <li>\n   Debug & Disassemble the application in order to figure out which\nfunction does what, then locate the exchange protocol and packets\nformat. Hopefully, you'll be able to find something that looks like a payload/command. This will take a lot of time and efforts, especially if the\napplication has been through compiler optimizations or obfuscation.\n  </li>\n  <li>\n   Sniff out the USB traffic - which you already did - and\nreverse the payload format after identifying what data fields belong\nto the USB transfer protocol and which don't.\n   <a href=\"http://www.beyondlogic.org/usbnutshell/usb3.shtml\" rel=\"nofollow noreferrer\">\n    This\n   </a>\n   link\nprovides everything you need to know about USB protocols.\n  </li>\n  <li>\n   Invest in a\n   <a href=\"https://en.wikipedia.org/wiki/Logic_analyzer\" rel=\"nofollow noreferrer\">\n    logic analyzer\n   </a>\n   . It's a miracle machine that can help reverse almost any protocol. If you look at the price range it's quite high for very efficient and professional machines (\n   <a href=\"http://cp.literature.agilent.com/litweb/pdf/5990-7513EN.pdf\" rel=\"nofollow noreferrer\">\n    example\n   </a>\n   ), but you can build your own using an\n   <a href=\"http://playground.arduino.cc/Main/LogicAnalyzer\" rel=\"nofollow noreferrer\">\n    Arduino\n   </a>\n   or even get a software based one. You also have\n   <a href=\"http://openvizsla.org/\" rel=\"nofollow noreferrer\">\n    OpenVizsla\n   </a>\n   which is an open source FPGA based USB logic analyzer/sniffer. Or, you can buy a\n   <a href=\"http://www.totalphase.com/products/beagle-usb12/\" rel=\"nofollow noreferrer\">\n    Beagle USB\n   </a>\n   , quite pricey but worth it.\n  </li>\n </ol>\n <p>\n  If you go for solution 2, you'll have to separate the signal in time. By that I mean :\n </p>\n <ul>\n  <li>\n   At t0 : Reset the device\n  </li>\n  <li>\n   At t1 : Set the light to RED and sniff\n  </li>\n  <li>\n   At t2 : Reset the device\n  </li>\n  <li>\n   At t3 : Set the light to GREEN and sniff\nSo on a so forth ...\n  </li>\n </ul>\n <p>\n  This way you can have time-stamped data which can help you remove the redundant data and only keep the core values (the payload).\n </p>\n <p>\n  Hope this helps.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "yaspr",
            "time": "Dec 16, 2016 at 0:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}