{
    "title": "how to calculate max possible stack size utilization",
    "link": "https://reverseengineering.stackexchange.com/questions/18727/how-to-calculate-max-possible-stack-size-utilization",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Is there any elegant way to calculate the maximum possible stack depth utilization of a program, using IDAPython?\n </p>\n <p>\n  currently my best approach is iterating through all functions and counting stack-increasing instructions.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "391",
    "tags": [
        "ida",
        "idapython",
        "stack"
    ],
    "user": "Yoav Danieli",
    "time": "Jul 8, 2018 at 14:05",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n Are you looking for the max depth available to the program or the max depth actually utilized by the program? Also, what OS are you focused on?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Yoav Danieli",
            "text": "<html><body><span class=\"comment-copy\">\n looking for max depth utilized by the program and it isn't OS dependent (lets say linux)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n @YoavDanieli maximum depth actually utilized by a program is not the same as maximum possible stack depth utilization, as @NirIzr has pointed out. Please clarify what you are asking. Resource limits such as maximum stack size available to a process are OS dependent. See\n <a href=\"http://man7.org/linux/man-pages/man2/getrlimit.2.html\" rel=\"nofollow noreferrer\">\n  <code>\n   getrlimit(2)\n  </code>\n </a>\n for more on this.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Yoav Danieli",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, thanks, i think @NirIzr clarified this form me :)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n What's worse is, they're context-dependent even on a single OS. Taking Windows, the limits vary vastly between what's allowed for a thread in user mode, in kernel mode\n <i>\n  without\n </i>\n using user32 facilities and in kernel mode\n <i>\n  with\n </i>\n using said facilities. The only thing that works, by my experience, is guesstimation.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDAPython-function\n  <code>\n   get_frame_size(ea)\n  </code>\n  gives size of stack in bytes.\nSo you can get max stack through all available functions:\n </p>\n <pre><code>\"0x%04X\" % max(get_frame_size(f) for f in Functions(0, BADADDR))\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "prusanov",
            "time": "Apr 6, 2020 at 13:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">Nite that it would be worth calculating the worst possible call depth (using cross references, likely as a directed graph). Special attention should be paid to recursive functions. You should also factor in a worst case for API calls.</span>",
                    "time": null
                }
            ]
        }
    ]
}