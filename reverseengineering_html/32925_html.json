{
    "title": "Seemingly useless instruction inside function body",
    "link": "https://reverseengineering.stackexchange.com/questions/32925/seemingly-useless-instruction-inside-function-body",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to reverse RtlInitUnicodeStringEx from ntdll.dll as an exercise to myself. Here is dissambled version from x64dbg.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/bZNKZ1DU.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/bZNKZ1DU.png\"/>\n  </a>\n </p>\n <p>\n  I was able to produce almost exactly the same binary from my own code, except for the\n  <code>\n   int3\n  </code>\n  instruction in line\n  <code>\n   0x00007FFDE53AA856\n  </code>\n  .\n </p>\n <p>\n  I have analysed the module using both ghidra and x64dbg but I was not able to find any jumps to that line. I also considered it is used to align, but next instruction is not aligned to any power of two boundary.\n </p>\n <p>\n  My search online led to\n  <code>\n   __debugbreak\n  </code>\n  intrinsic. According to Microsoft docs it \"Causes a breakpoint in your code, where the user will be prompted to run the debugger.\". However, It doesn't make sense that extra\n  <code>\n   int3\n  </code>\n  is caused by\n  <code>\n   __debugbreak\n  </code>\n  as it is in an unreachable position.\n </p>\n <p>\n  I assume existence of that instruction means something is going on that I am not aware of, because compiler wouldn't have put it there if it weren't for a reason. So, what is the reason compiler would\n  <code>\n   int3\n  </code>\n  instruction at a unreachable position?\n </p>\n <p>\n  I am using cl.exe version 19.30.30715 and compiling with\n  <code>\n   /c /O2s\n  </code>\n  flags. I am viewing the result by using\n  <code>\n   dumpbin /disasm\n  </code>\n  on .obj file. Also tried to create a .dll from\n  <code>\n   cl.exe /LD /O2s\n  </code>\n  but it didn't make any difference.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "172",
    "tags": [
        "msvc"
    ],
    "user": "yasar",
    "time": "Apr 30, 2024 at 18:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This instruction is inserted after the functions\n  <code>\n   ret\n  </code>\n  , it is\n  <em>\n   normally\n  </em>\n  unreachable.\n </p>\n <p>\n  In case the\n  <code>\n   ret\n  </code>\n  instruction caused a memory access violation (or some other exception) - the exception handler will be called and the current state saved.\n </p>\n <p>\n  The exception handler can return execution to the original state, that is, to the instruction after the one that threw the exception, which is after the function's end.\n </p>\n <p>\n  In this case the\n  <code>\n   int3\n  </code>\n  will run and either:\n </p>\n <p>\n  Crash (if there is no debugger attached or available) or break to the debugger.\n </p>\n <p>\n  The debugger, in turn, can \"handle\" (ignore) the\n  <code>\n   int3\n  </code>\n  and continue, running the next instruction that effectively returns\n  <code>\n   0xC0000106\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Apr 30, 2024 at 19:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yasar",
                    "text": "<span class=\"comment-copy\">Interesting, it doesn't appear on my version though, any idea what compiler flags I might be missing?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\"><code>int3</code> is added between functions code by compilers when compiling <code>debug</code> builds (as opposed to <code>release</code>builds). This code in <code>ntdll</code> specifically returns <code>STATUS_NAME_TOO_LONG</code> error value, that makes sense in this context, not something generic that a compiler would add automatically.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you look through other functions in\n  <code>\n   NTDLL.DLL\n  </code>\n  you will see the addition of\n  <code>\n   int3\n  </code>\n  s after\n  <code>\n   ret\n  </code>\n  instructions is common.\n </p>\n <p>\n  This would appear to be a mitigation for straight-line speculation vulnerabilities. Originally discovered on\n  <code>\n   ARM\n  </code>\n  , the\n  <code>\n   x86\n  </code>\n  architecture was also found to be vulnerable.\n </p>\n <p>\n  For more information see\n  <a href=\"https://lwn.net/Articles/877845/\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n </p>\n <p>\n  The\n  <code>\n   -mharden-sls=all\n  </code>\n  compiler option can be used in gcc and clang to include these extra int3 instructions.\nI'm not sure what MSVC's equivalent option is.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ian Cook",
            "time": "May 2, 2024 at 8:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yasar",
                    "text": "<span class=\"comment-copy\">Closest option I could find was /Qspectre-jmp that puts int3 after jmp instruction. There is no mention of any option that puts int3 after ret anywhere.</span>",
                    "time": null
                }
            ]
        }
    ]
}