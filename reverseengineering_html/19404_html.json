{
    "title": "Is there any way to capture the state of an application so as to restore execution of it later?",
    "link": "https://reverseengineering.stackexchange.com/questions/19404/is-there-any-way-to-capture-the-state-of-an-application-so-as-to-restore-executi",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are certain older, non-DirectX-based games that I can hack inside of a VM, which is amazing because I can save snapshots of states to then restore if, say, the game crashes after I attempt something. The time savings here are fantastic, what with not having to redo what I did to get to a certain point.\n </p>\n <p>\n  The issue is that I would like to achieve the same sort of thing, but with games that utilize DirectX 10+. You can't do that with VMs due to a lack of support, graphically. (You can\n  <em>\n   technically\n  </em>\n  do it with VMWare, but you also need to buy a hardware GPU unit of theirs, which is thousands of dollars.)\n </p>\n <p>\n  Bearing that in mind, are there any applications that can help achieve this? Short of that, is there any theoretical (possibly even practical) way that, on a host, one could pause an application, then capture the state of execution such that it could be resumed later on said host? Something like a memory dump plus gathering context of threads, register states, and whatever else might be needed--as well as what steps might be to restore that full state?\n </p>\n <p>\n  I know this is probably a bit of an outlandish question, but I appreciate any insight on the matter. Thank you!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "122",
    "tags": [
        "binary-analysis",
        "virtual-machines"
    ],
    "user": "dsasmblr",
    "time": "Sep 20, 2018 at 3:33",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723/\" rel=\"nofollow noreferrer\">\n  blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n To contribute some more information, Microsoft did implement time travel debugging. This doesn’t exactly restore the state, but it does allow you to inspect state at any point in time:\n <a href=\"https://youtu.be/l1YJTg_A914\" rel=\"nofollow noreferrer\">\n  youtu.be/l1YJTg_A914\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "TechLord",
            "text": "<html><body><span class=\"comment-copy\">\n From what I understand, VMWare Workstation 15 supports DirectX 10.1. Quoting from their site:\n <i>\n  \"\n  <b>\n   Enhanced 3D Hardware Accelerated Graphics Engine: DirectX 10.1:\n  </b>\n  New in Workstation is Direct3D 10.1 capabilities, allowing games and applications which require DirectX 10.1 to run where they could not before. D3D 10.1 was an important step beyond D3D 10 because it adds Ant-Aliasing, Geometry and Compute shaders, and serves as a fallback for many DX11 games and applications that otherwise would not run.\"\n </i>\n Contd..\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "TechLord",
            "text": "<html><body><span class=\"comment-copy\">\n (Contd) See this pic here of\n <a href=\"https://blogs.vmware.com/workstation/files/2018/09/03-ws-gpu2.png\" rel=\"nofollow noreferrer\">\n  DirectX 10.1 Graphics in Workstation 15\n </a>\n <b>\n  LINK TO ORIG PAGE:\n </b>\n <a href=\"https://blogs.vmware.com/workstation/2018/09/workstation-15-is-here.html\" rel=\"nofollow noreferrer\">\n  blogs.vmware.com/workstation/2018/09/…\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "dsasmblr",
            "text": "<html><body><span class=\"comment-copy\">\n Thanks, TechLord! Talk about hot off the presses...that post looks like it went live\n <i>\n  today\n </i>\n . Going to have to dive into this and take a look. Thanks for the heads-up! Super-exciting if this pans out.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}