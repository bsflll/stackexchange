{
    "title": "McDonald's receipt codes",
    "link": "https://reverseengineering.stackexchange.com/questions/32129/mcdonalds-receipt-codes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Receipts from McDonald's in the UK include a code that allows you to complete an online survey as shown in the attached image (in the green box):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/pBh00.jpg\" rel=\"noreferrer\">\n   <img alt=\"McDonald's receipt\" src=\"https://i.sstatic.net/pBh00.jpg\"/>\n  </a>\n </p>\n <p>\n  After gathering and comparing several receipts I have deduced that the codes use a base 25 alphanumeric system consisting of the following characters:\n </p>\n <pre><code>C M 7 W D 6 N 4 R H  F  9  Z  L  3  X  K  Q  G  V  P  B  T  J  Y\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n</code></pre>\n <p>\n  25 would therefore be\n  <code>\n   MC\n  </code>\n  , 26\n  <code>\n   MM\n  </code>\n  , 27\n  <code>\n   M7\n  </code>\n  , etc.\n </p>\n <p>\n  The code for this receipt is\n  <code>\n   7MXW-NLH4-ZQ3K\n  </code>\n  and can be broken down as follows:\n </p>\n <div class=\"s-table-container\">\n  <table class=\"s-table\">\n   <thead>\n    <tr>\n     <th>\n      Code\n     </th>\n     <th>\n      Decimal\n     </th>\n     <th>\n      Meaning\n     </th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>\n      <code>\n       7MX\n      </code>\n     </td>\n     <td>\n      1290\n     </td>\n     <td>\n      Store ID.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       W\n      </code>\n     </td>\n     <td>\n      3\n     </td>\n     <td>\n      Not sure, but the vast majority of receipts always seem to have\n      <code>\n       W\n      </code>\n      here.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       NL\n      </code>\n     </td>\n     <td>\n      163\n     </td>\n     <td>\n      Order ID: last two digits + 125, so can be reversed by\n      <code>\n       163 % 125\n      </code>\n      which is 38.\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       H4ZQ3K\n      </code>\n     </td>\n     <td>\n      90,823,491\n     </td>\n     <td>\n      Probably the date/time of purchase - more below.\n     </td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <p>\n  I have noticed that the last number (i.e. what I assume is the purchase date/time) increases with time when comparing receipts.\n </p>\n <p>\n  For example, another code's last 6 characters are\n  <code>\n   H4F6XN\n  </code>\n  (90,784,756) and the order was placed on 2022-12-27 19:10:05, just over a day before. A quick comparison:\n </p>\n <div class=\"s-table-container\">\n  <table class=\"s-table\">\n   <thead>\n    <tr>\n     <th>\n      Order 1\n     </th>\n     <th>\n      Order 2\n     </th>\n     <th>\n      Difference\n     </th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>\n      90,823,491\n     </td>\n     <td>\n      90,784,756\n     </td>\n     <td>\n      38,735\n     </td>\n    </tr>\n    <tr>\n     <td>\n      2022-12-28 20:59:51\n     </td>\n     <td>\n      2022-12-27 19:10:05\n     </td>\n     <td>\n      92,986 (seconds)\n     </td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <p>\n  Dividing the difference of seconds by the difference of the 6 character number:\n </p>\n <pre><code>92,986 ÷ 38,735 = 2.4 (approx.)\n</code></pre>\n <p>\n  It would therefore seem that the number increases by 1 every 2.4 seconds. The result of 60 ÷ 25 also happens to be 2.4 which means 1/25th of a minute can be represented by a character from the base 25 system.\n </p>\n <p>\n  Following the assumption of the number increasing by 1 every 2.4 seconds it seems that the first datetime (or \"epoch\") is approximately\n  <code>\n   2016-02-01 00:00:00\n  </code>\n  .\n </p>\n <p>\n  Therefore to decipher the final value of\n  <code>\n   H4ZQ3K\n  </code>\n  in the first receipt:\n </p>\n <ol>\n  <li>\n   90,823,491 × 2.4 = 217,976,378.4 seconds\n  </li>\n  <li>\n   2016-02-01 00:00:00 + 217,976,378.4 seconds = 2022-12-28 20:59:38.4\n  </li>\n </ol>\n <p>\n  ...but note how the predicted timestamp is incorrect - off by 12.6 seconds (the other receipt comes out at 2022-12-27 19:10:14.4 - 9.4 seconds ahead).\n </p>\n <p>\n  I'm stumped as to what's causing the error - does anyone have any ideas?\n </p>\n <p>\n  Some more codes for reference (note how the predicted timestamp is never more or less than 60 seconds):\n </p>\n <div class=\"s-table-container\">\n  <table class=\"s-table\">\n   <thead>\n    <tr>\n     <th>\n      Code\n     </th>\n     <th>\n      Last 6 chars (decimal)\n     </th>\n     <th>\n      Purchased\n     </th>\n     <th>\n      Predicted\n     </th>\n     <th>\n      Ahead by (seconds)\n     </th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>\n      <code>\n       7MXW-NLH4-ZQ3K\n      </code>\n     </td>\n     <td>\n      90,823,491\n     </td>\n     <td>\n      2022-12-28 20:59:51\n     </td>\n     <td>\n      2022-12-28 20:59:38.4\n     </td>\n     <td>\n      -12.6\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       M3NW-YRH4-F6XN\n      </code>\n     </td>\n     <td>\n      90,784,756\n     </td>\n     <td>\n      2022-12-27 19:10:05\n     </td>\n     <td>\n      2022-12-27 19:10:14.4\n     </td>\n     <td>\n      +9.4\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       MNKW-M6H4-7FQX\n      </code>\n     </td>\n     <td>\n      90,662,940\n     </td>\n     <td>\n      2022-12-24 09:57:46\n     </td>\n     <td>\n      2022-12-24 09:57:36\n     </td>\n     <td>\n      -10\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       CRGW-ZYHN-KHBP\n      </code>\n     </td>\n     <td>\n      90,490,545\n     </td>\n     <td>\n      2022-12-19 15:01:03\n     </td>\n     <td>\n      2022-12-19 15:01:48\n     </td>\n     <td>\n      +45\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       CQMW-L9HN-KNC7\n      </code>\n     </td>\n     <td>\n      90,488,127\n     </td>\n     <td>\n      2022-12-19 13:25:56\n     </td>\n     <td>\n      2022-12-19 13:25:04.8\n     </td>\n     <td>\n      -51.2\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       M9JW-QCH6-PT3Z\n      </code>\n     </td>\n     <td>\n      90,170,362\n     </td>\n     <td>\n      2022-12-10 17:34:42\n     </td>\n     <td>\n      2022-12-10 17:34:28.8\n     </td>\n     <td>\n      -13.2\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       7NLW-NFH6-7XLV\n      </code>\n     </td>\n     <td>\n      89,884,719\n     </td>\n     <td>\n      2022-12-02 19:08:02\n     </td>\n     <td>\n      2022-12-02 19:08:45.6\n     </td>\n     <td>\n      +43.6\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       MLZW-Y3HD-YTP9\n      </code>\n     </td>\n     <td>\n      89,842,386\n     </td>\n     <td>\n      2022-12-01 14:55:38\n     </td>\n     <td>\n      2022-12-01 14:55:26.4\n     </td>\n     <td>\n      -11.6\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       MBQW-RCHD-YNQ9\n      </code>\n     </td>\n     <td>\n      89,832,311\n     </td>\n     <td>\n      2022-12-01 08:12:04\n     </td>\n     <td>\n      2022-12-01 08:12:26.4\n     </td>\n     <td>\n      +22.4\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       MP4W-6DHM-QNNC\n      </code>\n     </td>\n     <td>\n      88,550,775\n     </td>\n     <td>\n      2022-10-26 17:51:16\n     </td>\n     <td>\n      2022-10-26 17:51:00\n     </td>\n     <td>\n      -16\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       7HGW-RFRG-9JX9\n      </code>\n     </td>\n     <td>\n      85,342,886\n     </td>\n     <td>\n      2022-07-29 15:15:30\n     </td>\n     <td>\n      2022-07-29 15:15:26.4\n     </td>\n     <td>\n      -3.6\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       MJFW-YNRK-P66H\n      </code>\n     </td>\n     <td>\n      84,690,759\n     </td>\n     <td>\n      2022-07-11 12:30:01\n     </td>\n     <td>\n      2022-07-11 12:30:21.6\n     </td>\n     <td>\n      +20.6\n     </td>\n    </tr>\n    <tr>\n     <td>\n      <code>\n       CRFD-NZRZ-JZGP\n      </code>\n     </td>\n     <td>\n      83,179,845\n     </td>\n     <td>\n      2022-05-30 13:13:26\n     </td>\n     <td>\n      2022-05-30 13:13:48\n     </td>\n     <td>\n      +22\n     </td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <hr/>\n <p>\n  Python functions for encoding/decoding:\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>CHARS = \"CM7WD6N4RHF9ZL3XKQGVPBTJY\"\nBASE = len(CHARS)\n\ndef encode(num):\n    encoded = \"\"\n    while num >= BASE:\n        encoded = CHARS[num % BASE] + encoded\n        num //= BASE\n    return CHARS[num] + encoded\n\ndef decode(encoded):\n    num = 0\n    for x, c in enumerate(encoded):\n        exp = len(encoded) - x - 1\n        num += (BASE**exp) * CHARS.find(c)\n    return num\n</code></pre>\n</div>\n</body></html>",
    "votes": "14",
    "answers": 1,
    "views": "5k",
    "tags": [
        "decryption",
        "encryption"
    ],
    "user": "user7290573",
    "time": "Aug 5, 2023 at 6:59",
    "comments": [
        {
            "user": "Rup",
            "text": "<html><body><span class=\"comment-copy\">\n My first thought is that the last digit is really some sort of checksum and not part of the timestamp. Does the survey website validate and reject codes if you change the last letter to ‘correct’ the timestamp? None of your examples change the minute, only the seconds, and an order number and time to the nearest minute would be enough to identify a given order.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<html><body><span class=\"comment-copy\">\n Huge kudos for getting as far as you have with this BTW, particularly the base 25 and the characters.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user7290573",
            "text": "<html><body><span class=\"comment-copy\">\n @Rup Thanks! Yeah, the survey website rejects my predicted codes and only accepts the printed ones. I thought about the possibility of it being check digit as well - but then I wonder how that could work - did they invent their own check digit system for base 25 or modify an existing decimal one (if that would even work) etc. - might be a dead end, sadly.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user7290573",
            "text": "<html><body><span class=\"comment-copy\">\n I made a spreadsheet which contained order data/codes for just under 200 receipts, most of which I found by scraping the McDonald's UK Twitter account. It still took me a while to figure out, but by sorting the data by the \"order number\" column I eventually noticed some characters repeated every 25 orders. It was pretty trivial to fill in the blanks from there.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<html><body><span class=\"comment-copy\">\n What's been patched?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As suggested in a comment, the final character is indeed a check digit. It appears to be calculated using the\n  <a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\" rel=\"noreferrer\">\n   Luhn algorithm\n  </a>\n  with 25 as the base instead of 10.\n </p>\n <p>\n  Using the code in photo as an example:\n </p>\n <ol>\n  <li>\n   The code without a check digit:\n   <code>\n    7MXWNLH4ZQ3\n   </code>\n   .\n  </li>\n  <li>\n   Convert to decimal:\n   <code>\n    [2, 1, 15, 3, 6, 13, 9, 7, 12, 17, 14]\n   </code>\n   .\n  </li>\n  <li>\n   Start from the right and double every number in an even position.\n  </li>\n  <li>\n   If a number exceeds 24, re-encode it and sum the digits (e.g. 14 × 2 = 28, which becomes\n   <code>\n    MW\n   </code>\n   , which becomes\n   <code>\n    [1, 3]\n   </code>\n   , which becomes 4).\n  </li>\n  <li>\n   Sum all the digits.\n  </li>\n  <li>\n   If\n   <code>\n    (total % 25) > 0\n   </code>\n   , the check digit is\n   <code>\n    25 - (total % 25)\n   </code>\n   , otherwise it's\n   <code>\n    0\n   </code>\n   .\n  </li>\n  <li>\n   In this case, it's 16, or\n   <code>\n    K\n   </code>\n   in the base 25 character set.\n  </li>\n </ol>\n <hr/>\n <p>\n  <strong>\n   Update:\n  </strong>\n  I've created a script to do all this, available on GitHub\n  <a href=\"https://github.com/sapphire-bt/mcdonalds-uk-survey-codes\" rel=\"noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "user7290573",
            "time": "Aug 12, 2023 at 14:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rup",
                    "text": "<span class=\"comment-copy\">Huh, I looked at <a href=\"https://en.wikipedia.org/wiki/Luhn_mod_N_algorithm\" rel=\"nofollow noreferrer\">Luhn mod N</a> last night and it said it didn't work for odd Ns so I discounted it. As you've got there numbers that overflow end up as even too so the doubled digits will only end up even, meaning that you could swap the trailing 3 for a 7 and the checksum wouldn't change. But glad you've solved it!</span>",
                    "time": null
                }
            ]
        }
    ]
}