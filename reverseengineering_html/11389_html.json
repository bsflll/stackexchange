{
    "title": "Stepping through a program to figure out what subroutines are being called?",
    "link": "https://reverseengineering.stackexchange.com/questions/11389/stepping-through-a-program-to-figure-out-what-subroutines-are-being-called",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've loaded a program into IDA + Hex-Rays, and decompiled it down to some C-like pseudo-code. Now, I am trying to figure out, for a single action that I am taking in the program, what code is being run. The code that I am interested in comes from a DLL the program uses.\n </p>\n <p>\n  How does one go about tracing something like, \"I click on this button, this is the code that corresponds to it\"?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "319",
    "tags": [
        "ida",
        "ollydbg",
        "dll"
    ],
    "user": "Franz Kafka",
    "time": "Nov 24, 2015 at 14:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What you are really looking for is a debugger.  GDB for Linux or OllyDbg for windows PE's.  Get to the point where you want to click a button on the program and then conduct a trace from there.  You should be able to see all the instructions executed immediately following you \"clicking the button\".  You can then identify what code is being executed and go back to IDA to look at it there.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "bravosierra99",
            "time": "Nov 24, 2015 at 14:42",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can load your executable that loads the DLL using OllyDbg or Immunity Debugger.\n </p>\n <p>\n  You can then check which modules imported are loaded via\n  <strong>\n   View->Executable Modules\n  </strong>\n  or with the keyboard shortcut\n  <strong>\n   Alt+E\n  </strong>\n  (at least on Immunity Debugger).\n </p>\n <p>\n  Then, select your DLL which was imported and right click it. Select\n  <strong>\n   View Names\n  </strong>\n  or hit\n  <strong>\n   Ctrl+N\n  </strong>\n  .\n </p>\n <p>\n  You will be prompted with a sub menu where you can select the DLL's export you are interested in. Select the export and hit\n  <strong>\n   F2\n  </strong>\n  to set a software breakpoint on it or right click and select\n  <strong>\n   Toggle Breakpoint\n  </strong>\n  .\n </p>\n <p>\n  When you run your program, hopefully, your DLL import will be called and your breakpoint will be hit, pausing execution. You can then view your call stack with\n  <strong>\n   View->Call Stack\n  </strong>\n  or you can use the shortcut\n  <strong>\n   Alt+K\n  </strong>\n  . You will likely be interested in the\n  <strong>\n   returns to\n  </strong>\n  column because that will represent the address where your DLL import will return to. Note that the most recently called functions will be located on the top of the stack.\n </p>\n <p>\n  You can then use IDA to search for that address in the disassembly. When you are in graph view, press\n  <strong>\n   g\n  </strong>\n  and paste the address that you copied from the\n  <strong>\n   returns to column\n  </strong>\n  from the call stack in your debugger.\n </p>\n <p>\n  Happy hunting! :)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "itsbriany",
            "time": "Nov 26, 2015 at 4:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}