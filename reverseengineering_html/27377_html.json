{
    "title": "How can I view the output of printf calls without a console window?",
    "link": "https://reverseengineering.stackexchange.com/questions/27377/how-can-i-view-the-output-of-printf-calls-without-a-console-window",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using IDA to poke around in an old video game and noticed there are lots of calls to the\n  <code>\n   printf\n  </code>\n  function:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/EF1eK.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"\" src=\"https://i.sstatic.net/EF1eK.png\"/>\n  </a>\n </p>\n <p>\n  I can see in another function that\n  <code>\n   dword_5CE914\n  </code>\n  is a bitmask comprising various startup arguments (e.g.\n  <code>\n   debug\n  </code>\n  ,\n  <code>\n   nofullscreen\n  </code>\n  , etc). As you may have guessed,\n  <code>\n   0x4000000\n  </code>\n  is the value that indicates the\n  <code>\n   debug\n  </code>\n  switch was present; despite enabling this, there is no visible debug output.\n </p>\n <p>\n  As someone new to software programming, I\n  <em>\n   assume\n  </em>\n  that during the game's development the\n  <code>\n   printf\n  </code>\n  calls would have been outputting to a debugger/console window which were disabled for production.\n </p>\n <p>\n  My question is: how can I view the output now that there is no debugger window?\n </p>\n <p>\n  My current thought process would be to:\n </p>\n <ol>\n  <li>\n   Create a custom DLL containing a function to output arbitrary text to a .txt file\n  </li>\n  <li>\n   Inject the DLL into the game's address space\n  </li>\n  <li>\n   Hook into\n   <code>\n    printf\n   </code>\n   and pass the argument into my function which saves the output\n  </li>\n </ol>\n <p>\n  Does that sound like a plausible approach, or can someone recommend a better way?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "dll-injection"
    ],
    "user": "user7290573",
    "time": "Apr 1, 2021 at 23:11",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n Set the dword @ 5ce914 to 0xffffffff\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user7290573",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb I can easily change the dword and view the output with breakpoints, but I'm asking how to save the output to a log file or print to a console window.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n oh i see  have you checked using an AttachConsole() to the pid  of the process\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The approach you outlined seems plausible; I'd probably do something similar to that if I were approaching this problem. If\n  <code>\n   printf\n  </code>\n  is being called via function pointer -- say, it's an import from another .DLL -- you could simply overwrite its IAT entry with the one in your DLL. Otherwise, I'd go with hooking\n  <code>\n   printf\n  </code>\n  directly, and passing the arguments onto\n  <code>\n   vfprintf\n  </code>\n  in my DLL.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Apr 2, 2021 at 7:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user7290573",
                    "text": "<span class=\"comment-copy\">Thank you; I'll give this a try later and see how I get on.</span>",
                    "time": null
                },
                {
                    "user": "user7290573",
                    "text": "<span class=\"comment-copy\"><code>vfprintf</code> works perfectly. Thanks again.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you convert the program to a console one (e.g. using EDITBIN), you should be able to run it from a console window and see everything it prints.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 3, 2021 at 15:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ok I was wondering how one could include printf() intact but run without console\n  \n\n  it seems if one uses WinMain() and compile with /subsystem:windows one can achieve this\n  \n\n  here is a sample code\n </p>\n <pre><code>#include <stdio.h>\n#include <windows.h>\nint pringlob = 0;\nint a = 9;\nint b = 10;\nint c = 33;\nint WINAPI WinMain(_In_ HINSTANCE,_In_opt_ HINSTANCE,_In_ LPSTR, _In_ int)\n{\n    if ((pringlob & 0x400000) != 0)\n    {\n        printf(\"this is mytest\n\");\n        if ((pringlob & 0x400000) != 0)\n        {\n            printf(\"this is mytest 1 %d\n\", a);\n            if ((pringlob & 0x400000) != 0)\n            {\n                printf(\"this is mytest 2 %d\n\", b);\n                if ((pringlob & 0x400000) != 0)\n                {\n                    printf(\"this is mytest 3 %d\n\", c);\n                }\n            }\n        }\n    }\n    MessageBoxA(NULL,\"NO CONSOLE TEST\",\"NO CONSOLE USE ATTACHCONSOLE\",MB_OK);\n}\n</code></pre>\n <p>\n  compiling this with in vs 2017 community\n </p>\n <pre><code>cl /Zi /W4 /analyze /Od /nologo /EHsc foo.cpp /link /release /subsystem:windows  user32.lib  \n</code></pre>\n <p>\n  this runs without console but keeps printf intact which prints to the console that is Created By AttachConsole() on the pid of binary\n </p>\n <p>\n  open foo.exe in x64dbg run to\n  \n\n  WinMainCrtStartup or @$exentry aka  PEHeader->AddressOFEntryPoint\n  \n\n  so that all dll init are done\n  \n\n  open file->attach and note the pid of foo.exe\n  \n\n  in the stack use push qword\n  \n\n  and push pid\n  \n\n  push return address which is WinmainCRTStartup\n  \n\n  use Ctrl+g to go to kernelbase.AllocConsole\n  \n\n  step over the function and return to WinMainCRTStartup\n  \n\n  pop the pid using pop qword in stack\n </p>\n <p>\n  set the global to 0xffffffff\n  \n\n  f9 to run the exe\n  \n\n  you will get all the printfs in  the newly created console\n  \n\n  see the attached screenshot\n  \n\n  <a href=\"https://i.sstatic.net/cNbYr.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/cNbYr.jpg\"/>\n  </a>\n </p>\n <p>\n  edit :\n </p>\n <p>\n  what igorsk suggested in his answer is a better option adding a test of the same\n </p>\n <pre><code>:\\>ls -lg\ntotal 2\n-rw-r--r-- 1 197121  91 Apr  3 02:01 complink.bat\n-rw-r--r-- 1 197121 595 Apr  2 23:45 fook.cpp\n\n:\\>complink.bat\n\n:\\>cl /Zi /W4 /Od /EHsc /nologo /analyze fook.cpp /link /release /subsystem:windows user32.lib\nfook.cpp\n\n:\\>dumpbin /headers fook.exe | grep -i subsystem\n            6.00 subsystem version\n               2 subsystem (Windows GUI)\n\n:\\>editbin /subsystem:console fook.exe\nMicrosoft (R) COFF/PE Editor Version 14.16.27045.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\n:\\>dumpbin /headers fook.exe | grep -i subsystem\n            6.00 subsystem version\n               3 subsystem (Windows CUI)\n\n:\\>cdb -c \"ed fook!pringlob 0xffffffff;g;q\" fook.exe | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command 'ed fook!pringlob 0xffffffff;g;q'\nxxxxxxxxxx\nthis is mytest\nthis is mytest 1 9\nthis is mytest 2 10\nthis is mytest 3 33\nquit:\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 3, 2021 at 15:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}