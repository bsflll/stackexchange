{
    "title": "Call instruction - preceding ?@_ in references?",
    "link": "https://reverseengineering.stackexchange.com/questions/13351/call-instruction-preceding-in-references",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Seems to be a question of no importance, but I'm just curious: Is there a deeper meaning of the preceeding (single/double)\n  <code>\n   ?\n  </code>\n  -marks,\n  <code>\n   @\n  </code>\n  -signs or\n  <code>\n   __\n  </code>\n  underscores in these different\n  <code>\n   call\n  </code>\n  instructions?\n </p>\n <pre><code>call ??2@YAPAXI@Z\ncall ??0CAdviseObject@CBLObject@@QAE@PAUIDispatch@@PAVCBLInstance@@@Z\ncall ?StartAutoReconnect@CBLObject@@IAEXIH@Z\ncall @__security_check_cookie@4\ncall __SEH_epilog\n</code></pre>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "470",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "call"
    ],
    "user": "knx",
    "time": "Aug 24, 2016 at 14:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The leading\n  <code>\n   ?\n  </code>\n  identifies a C++ name mangled symbol. Two\n  <code>\n   ??\n  </code>\n  signify operators, constructors, destructors, constant strings, and various compiler generator functions. For example\n  <code>\n   ??0\n  </code>\n  is a constructor.\n  <a href=\"http://www.geoffchappell.com/studies/msvc/language/decoration/index.htm\" rel=\"nofollow\">\n   This site\n  </a>\n  has a good breakdown of the mangling pieces used by MSVC.\n </p>\n <p>\n  A leading underscore\n  <code>\n   _\n  </code>\n  can either be due to the calling convention or due to the CRT/compiler identification standard. They will prefix all of their symbols with\n  <a href=\"https://msdn.microsoft.com/en-us/library/2e6a4at9.aspx\" rel=\"nofollow\">\n   two leading underscores\n  </a>\n  <code>\n   __\n  </code>\n  as a way to help prevent name collisions:\n </p>\n <blockquote>\n  <p>\n   In Microsoft C++, identifiers with two leading underscores are\n  reserved for compiler implementations.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "3",
            "user": "josh poley",
            "time": "Aug 24, 2016 at 16:13",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These are so-called \"mangled\" or \"decorated\" names. You can use undname utility from Visual Stduio to demangle them:\n </p>\n <pre><code>void * __cdecl operator new(unsigned int)\npublic: __thiscall CBLObject::CAdviseObject::CAdviseObject(struct IDispatch *,cl\nass CBLInstance *)\nprotected: void __thiscall CBLObject::StartAutoReconnect(unsigned int,int)\n</code></pre>\n <p>\n  For more info:\n  <a href=\"https://en.wikipedia.org/wiki/Name_mangling\" rel=\"nofollow\">\n   Wikipedia\n  </a>\n  ,\n  <a href=\"https://msdn.microsoft.com/en-us/library/deaxefa7.aspx\" rel=\"nofollow\">\n   MSDN\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 24, 2016 at 15:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}