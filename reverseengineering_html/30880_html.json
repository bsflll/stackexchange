{
    "title": "Frida script returning different instruction at address compared to entering commands in repl",
    "link": "https://reverseengineering.stackexchange.com/questions/30880/frida-script-returning-different-instruction-at-address-compared-to-entering-com",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an iOS device on 14.2 and am using frida 15.2.2 on Ubuntu 18.04.\n </p>\n <p>\n  If I launch an app via frida, in the repl I can get the base address of the module, add an offset to that address, and print the instruction at that new address.  Doing it like this I get the instruction I expect.  The commands I entered were:\n </p>\n <pre><code>var baseAddress = Process.enumerateModules()[0].base;\nvar instructionOffset = 0x100004ce8-0x100000000;\nvar targetAddress = baseAddress.add(instructionOffset);\nInstruction.parse(targetAddress).toString();\n</code></pre>\n <p>\n  and the instruction I expect, based on ghidra, is\n  <code>\n   cbz        param_1,LAB_100004d08\n  </code>\n  which I get.\n </p>\n <p>\n  However, if I try and do the same by loading a script when I launch the app:\n </p>\n <pre><code>var baseAddress = Process.enumerateModules()[0].base;\nvar instructionOffset = 0x100004ce8-0x100000000;\nvar targetAddress = baseAddress.add(instructionOffset);\n\nInterceptor.attach(targetAddress, {\n    onEnter: function(args) {\n        console.log(\"[+] Current instruction: \" + (Instruction.parse(targetAddress).toString()));\n    },\n});\n</code></pre>\n <p>\n  it prints a different instruction.  I'm not sure if there is something I've misunderstood or it is expected to work differently doing this from a script?  Or if I need to take in to account the script being loaded in to memory?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "791",
    "tags": [
        "disassembly",
        "ios",
        "frida"
    ],
    "user": "Jon",
    "time": "Sep 14, 2022 at 10:54",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n I think the second case returns a different value because you have hoked the address. That means Frida has replaced the code at that address by it's hooking code to redirect execution flow to it's hooking handler.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jon",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you @Robert, I think you are correct and that I was trying to do something in an unintended way.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jon",
            "text": "<html><body><span class=\"comment-copy\">\n @Robert if you would like to add something along those lines as an answer I'm happy to mark that as the solution.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This was down to my misunderstanding.  I was wanting to either nop out an instruction or modify a register value. I had been trying to print the instruction to verify I was at the correct address but not considered that frida would obviously have to insert code to redirect execution flow, thank you @Robert.\n </p>\n <p>\n  At the point of attaching the register value can still be read or modified and will be handled correctly.\n </p>\n <p>\n  Alternatively, launching the app and loading a script but not attaching with interceptor let's me print the correct instruction at the offset via the script, e.g. just doing:\n </p>\n <pre><code>var baseAddress = Process.enumerateModules()[0].base;\nvar instructionOffset = 0x100004ce8-0x100000000;\nvar targetAddress = baseAddress.add(instructionOffset);\n\nconsole.log(Instruction.parse(targetAddress).toString());\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jon",
            "time": "Sep 14, 2022 at 14:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}