{
    "title": "Trace back function call",
    "link": "https://reverseengineering.stackexchange.com/questions/20776/trace-back-function-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm learning reverse engineering and I'm trying to find where an error message is called.\nI want to get in the part of the code, in the main module, where it decides to display the error message or the succeed message, but I'm having problems tracing back to the function call because I get in a point of nowhere.\nThis is what I do:\n </p>\n <ul>\n  <li>\n   Set breakpoint on MessageBoxW\n  </li>\n  <li>\n   Breakpoint on MessageBoxW\n  </li>\n  <li>\n   See the stack for the return address or run till return\n  </li>\n </ul>\n <p>\n  But the address I get is something like: system.windows.forms.ni.123456.\nIf I keep tracing back I get in a point of nowhere (somewhere in user32.dll).\nHopefully someone has a better way to trace back this function or its familiar with \"system.windows.forms\" and can explain me how it works.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "x64dbg"
    ],
    "user": "Francisco Linan",
    "time": "Mar 4, 2019 at 15:19",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n system.windows.forms suggest that this is a .net executable. Maybe use dnSpy instead of x64dbg\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It may be easily done using\n  <a href=\"http://www.ollydbg.de/\" rel=\"nofollow noreferrer\">\n   OllyDbg\n  </a>\n  . Just load the executable and press\n  <code>\n   F9\n  </code>\n  - execution should be passed to the main module of application. Then, in the panel where the instructions are displayed, right click, then select\n  <code>\n   Search for\n  </code>\n  ->\n  <code>\n   All intermodular calls\n  </code>\n  like below:\n  <a href=\"https://i.sstatic.net/Mydit.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Olly-intermodular_calls\" src=\"https://i.sstatic.net/Mydit.png\"/>\n  </a>\n </p>\n <p>\n  You should see the window looking similar to this:\n  <a href=\"https://i.sstatic.net/1z0Ax.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Olly-intermodular_calls_window\" src=\"https://i.sstatic.net/1z0Ax.png\"/>\n  </a>\n  After that click the\n  <code>\n   Destination\n  </code>\n  tab (that will sort the list alfabetically) and search for\n  <code>\n   MessageBoxW\n  </code>\n  function. Then choose any of the references to this function and double click on it - you will see a call to it in the main window highlighted on grey. Then press\n  <code>\n   F2\n  </code>\n  to set a software breakpoint there, then click\n  <code>\n   View\n  </code>\n  ->\n  <code>\n   Call stack\n  </code>\n  and finally\n  <code>\n   F9\n  </code>\n  to continue execution to that breakpoint.\n </p>\n <p>\n  When the execution hits it, the\n  <code>\n   Call stack\n  </code>\n  window will contain the list of subsequent function calls that led to\n  <code>\n   MessageBoxW\n  </code>\n  call.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "May 31, 2019 at 14:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}