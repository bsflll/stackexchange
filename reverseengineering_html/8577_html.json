{
    "title": "Where can I learn about code instrumentation?",
    "link": "https://reverseengineering.stackexchange.com/questions/8577/where-can-i-learn-about-code-instrumentation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Currently I am learning about profiling parallel programs. All the profilers heavily use all kinds of instrumentations but this topic is not well explained. Do you know any good sources from which I could learn about instrumentation (static, binary, dynamic)?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "282",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "dynamic-analysis",
        "instrumentation"
    ],
    "user": "Kris",
    "time": "Mar 27, 2015 at 16:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Before jumping straight to interesting articles and sources I'll start by defining the key words, just in case.\n </p>\n <ul>\n  <li>\n   <p>\n    <strong>\n     Static analysis :\n    </strong>\n    consists in analyzing the target binary file without executing it. Hence the\n    <code>\n     static\n    </code>\n    . Such analysis can be used in order to build a first draft of the application's\n    <strong>\n     Control Flow Graph\n    </strong>\n    ,\n    <strong>\n     Call Graph\n    </strong>\n    , ...\nFor example, building the\n    <strong>\n     CFG\n    </strong>\n    consists of cutting the code into\n    <em>\n     basic blocks\n    </em>\n    and then linking them using the branch targets (if they're not indirect branches).\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Dynamic analysis :\n    </strong>\n    consists in inserting probes (function calls) around key areas of the binary, running the binary and dumping the probes' results. Such probes can be\n    <strong>\n     rdtsc\n    </strong>\n    instructions on x86, or any other hardware counter.\nFor example, dynamic analysis is used by\n    <strong>\n     Gprof\n    </strong>\n    to assess the amount of time spent in each function. Many other profilers such as\n    <strong>\n     VTune\n    </strong>\n    ,\n    <strong>\n     MAQAO\n    </strong>\n    ,\n    <strong>\n     DynInst\n    </strong>\n    , ... use dynamic analysis to locate hotspots.\n   </p>\n  </li>\n </ul>\n <p>\n  Both of these analyses can be applied to a binary file (meaning an executable program), and that's what we call binary analysis.\nOn the other hand, static analysis can be applied on source code as well as binary.\n  <a href=\"http://en.wikipedia.org/wiki/Lint_%28software%29\" rel=\"nofollow\">\n   Lint\n  </a>\n  , for example, performs static analysis in order to find buggy code constructs.\n </p>\n <p>\n  There aren't many detailed references I can cite, rather a set of scientific publications which span the use and benefits of those techniques, along with some interesting algorithms.\n </p>\n <p>\n  For static analysis I would recommend this collection of articles :\n  <a href=\"http://www.springer.com/fr/book/9783642388552?cm_mmc=EVENT-_-BookAuthorEmail-_-&wt_mc=event.BookAuthor.Congratulation\" rel=\"nofollow\">\n   Static Analysis 20th International Symposium, SAS 2013, Seattle, WA, USA, June 20-22, 2012, Proceedings.\n  </a>\n </p>\n <p>\n  For dynamic analysis I would recommend you going through the publications around of\n  <a href=\"http://maqao.org/\" rel=\"nofollow\">\n   MAQAO\n  </a>\n  ,\n  <a href=\"http://www.dyninst.org/\" rel=\"nofollow\">\n   DynInst\n  </a>\n  ,\n  <a href=\"https://silc.zih.tu-dresden.de/scorep-current/html/\" rel=\"nofollow\">\n   ScoreP\n  </a>\n  , and\n  <a href=\"https://www.cs.uoregon.edu/research/tau/news.php\" rel=\"nofollow\">\n   TAU\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "yaspr",
            "time": "Mar 28, 2015 at 6:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}