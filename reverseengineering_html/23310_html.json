{
    "title": "Review a collection of executable binaries to determine similarity",
    "link": "https://reverseengineering.stackexchange.com/questions/23310/review-a-collection-of-executable-binaries-to-determine-similarity",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a collection of different binaries I want to review for code similarity and classification, but I would rather not have to open each of them in IDA and manually review the code in 15 different samples.\n </p>\n <p>\n  What tools or techniques can I use to automatically classify and determine code similarity/reuse between samples? My first thought is to use ssdeep, but I was wondering if there were any other open source tools or frameworks that could do the same.\n </p>\n <p>\n  I would also like to request that a classification tag be added in case there are other people who want to ask questions about classifying files into different groups based on different binary features.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "198",
    "tags": [
        "disassembly",
        "binary-analysis",
        "tools",
        "automation"
    ],
    "user": "solumnant",
    "time": "Feb 20, 2020 at 19:54",
    "comments": [
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n I am not sure if there is a general answer to your question. I would assume that this depends on how different the binaries are. Do you just want to compare different versions of normal binaries or are they randomly re-ordered, obfuscated or may be even protected with encrypted parts that decrypt at run-time?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "solumnant",
            "text": "<html><body><span class=\"comment-copy\">\n These are collections of malware, intended to be of the same family, but I don't know anything about their internals. There are known to be different variants based on small behaviors. I am looking to examine the code that is common to all samples to write yara rules as my use case.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "solumnant",
            "text": "<html><body><span class=\"comment-copy\">\n I would like to have a framework to apply to any such group of samples I receive, since that's how I spend a lot of my time.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user34310",
            "text": "<html><body><span class=\"comment-copy\">\n Look up \"Tracelet Based Code Search\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @user34310 feel free to write up a proper answer. I converted your \"answer\" to a comment as it was mere commentary. I appreciate the fact you took the time to write commentary and it may actually prove helpful, but it was definitely below the answer quality threshold. Still, since you lack the reputation to write an actual comment, I understand why you wrote it as an answer ...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have done some academic research in the field of malware classification. It is not an easy task, and I don't know what similarity you are looking for, but I can list mostly used static features for binary classification, at least for malicious/unknown software.\n </p>\n <ul>\n  <li>\n   Header information: dynamic libraries, sections\n  </li>\n  <li>\n   File size\n  </li>\n  <li>\n   Debug information\n  </li>\n  <li>\n   Executable code: disassembled instructions, opcodes, bytes (as arrays, probability vectors, and n-grams), code flow graph\n  </li>\n  <li>\n   Data and strings\n  </li>\n  <li>\n   Entropy can be used for different sections or a whole file\n  </li>\n  <li>\n   Mapping one-dimensional byte array to two-dimensional grayscale image and using image classification methods\n  </li>\n </ul>\n <p>\n  We are not at a point where we can fully use these binary features and machine learning models in commercial products. It may help you if you can tolerate some false-positive classification. GitHub has lots of malware classification examples you can work on.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Aug 2, 2020 at 17:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}