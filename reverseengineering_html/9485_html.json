{
    "title": "How to apply IDA structure to a pointer of a structure",
    "link": "https://reverseengineering.stackexchange.com/questions/9485/how-to-apply-ida-structure-to-a-pointer-of-a-structure",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've encountered this function, which accepts a pointer to what I believe is a custom C struct. I came to this conclusion based on subsequent access to it.\n </p>\n <pre><code>arg_0= dword ptr  4   ;struct passed in\n\npush    ebx\npush    ebp\nmov     ebp, [esp+8+arg_0]  ; store pointer of struct in ebp\npush    esi\npush    edi\nxor     ebx, ebx\n</code></pre>\n <p>\n  and, not too far from above, I see it being populated:\n </p>\n <pre><code>mov     [ebp+0D4h], bl\nmov     [ebp+0F4h], bl\nmov     [ebp+114h], bl\nxor     eax, eax\nmov     [ebp+0B8h], eax\nmov     [ebp+0BCh], eax\nmov     [ebp+0C0h], eax\n</code></pre>\n <p>\n  I do not know the size of the structure, but I've seen\n  <code>\n   [ebp+0f14h]\n  </code>\n  . Therefore, I've defined a custom IDA sturct of size\n  <code>\n   0xF14\n  </code>\n  . Now I'm having trouble with applying this custom structure to this pointer. I've tried\n  <code>\n   Alt+Q\n  </code>\n  then selecting my own custom struct, but it is not working. The  output window says\n  <code>\n   Command \"DeclareStructVar\" failed\n  </code>\n </p>\n <p>\n  My custom struct:\n </p>\n <pre><code>00000000 custom_sturct   struc ; (sizeof=0xF14)\n00000000                 db ? ; undefined\n00000001                 db ? ; undefined\n00000002                 db ? ; undefined\n[...same stuff...]\n00000F11                 db ? ; undefined\n00000F12                 db ? ; undefined\n00000F13 field_F13       db ?\n00000F14 custom_sturct   ends\n00000F14\n</code></pre>\n <p>\n  I'm using IDA Pro 6.3\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "struct"
    ],
    "user": "vincentleest",
    "time": "Sep 12, 2016 at 0:08",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n \"but it is not working\" -- what's \"not working\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n You can't tell IDA \"ebp is a structure pointer\" and have every instruction that uses\n <code>\n  ebp\n </code>\n use the structure automatically. You'll have to right-click each of the offsets, select \"Structure offset\" from the context menu, then select your\n <code>\n  custom_struct\n </code>\n field. (Or, as a shortcut, use the\n <code>\n  T\n </code>\n key).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "vincentleest",
            "text": "<html><body><span class=\"comment-copy\">\n @JasonGeffner and @GuntramBlohm thank you both for your responses. After applying the \"T\" operation, IDA did not complain. However, the custom structure is still not showing up. I then realized that I gave\n <code>\n  ebp\n </code>\n register a custom name. The\n <code>\n  custom_struct\n </code>\n showed up after I've removed the custom name for the register.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n @GuntramBlohm, want to create a new answer to this from your comment and mine? I'm happy for you to get the full credit for this one ;)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user1354557",
            "text": "<html><body><span class=\"comment-copy\">\n To add to @GuntramBlohm's comment:  You can also select an area of text and hit\n <code>\n  t\n </code>\n . A different menu will appear which will allow you to select a register (choose\n <code>\n  ebp\n </code>\n ) and a structure (choose\n <code>\n  custom_struct\n </code>\n ) and it will convert each offset from\n <code>\n  ebp\n </code>\n within the selection to an offset of\n <code>\n  custom_struct\n </code>\n . This works best in the\n <b>\n  linear view\n </b>\n .\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  To set register as an offset to a structure in a sequence of assembly code, you'll need to select that sequence and then hit\n  <kbd>\n   T\n  </kbd>\n  . A pop up dialog called \"Structure offsets\" will appear, where you can supply the register and structure it points to, and you'll see all references IDA recognized using it.\n </p>\n <p>\n  Lets take the following code snippet taken from calc.exe for example:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/abcBG.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Example of initial state\" src=\"https://i.sstatic.net/abcBG.png\"/>\n  </a>\n </p>\n <p>\n  After selecting the relevant code and hitting\n  <kbd>\n   T\n  </kbd>\n  IDA automatically identified we're setting the\n  <code>\n   ECX\n  </code>\n  register, suggests possible valid structures to the left and the offsets and the selected structure's values.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/VrXAH.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Structure offsets dialog\" src=\"https://i.sstatic.net/VrXAH.png\"/>\n  </a>\n </p>\n <p>\n  After assigning a valid structure, the code looks like this:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/wWyYN.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"code after structure offset assignment\" src=\"https://i.sstatic.net/wWyYN.png\"/>\n  </a>\n </p>\n <p>\n  Please notice the following caveats/remarks:\n </p>\n <ol>\n  <li>\n   IDA completely ignored the\n   <code>\n    add ecx, 4\n   </code>\n   line and additionally did not handle the\n   <code>\n    mov [ecx+eax*2], dx\n   </code>\n   too well because of that. Hitting\n   <kbd>\n    T\n   </kbd>\n   for that specific line and suppling a non-zero offset delta will let you handle that properly, albeit manually.\n  </li>\n  <li>\n   As mentioned in the comments, manually setting a register's name completely disables all IDA's representation of the register and instead displays the user supplied free text. This means any offset definitions will be hidden by any register custom name.\n  </li>\n  <li>\n   If you've seen\n   <code>\n    [ebp+0f14h]\n   </code>\n   , the structure's size is\n   <em>\n    at least\n   </em>\n   0xF15 bytes, as the structure is being written to at offset\n   <code>\n    0x0F14\n   </code>\n   , meaning at least 0xF15 bytes are available to it. If you've seen\n   <code>\n    DWORD [ebp+0f14h]\n   </code>\n   the structure is at least\n   <code>\n    0x0F18\n   </code>\n   bytes long.\n  </li>\n </ol>\n <p>\n  Those caveats are at least partially mitigated by third party tools like\n  <a href=\"https://sark.readthedocs.io/en/latest/plugins/autostruct.html\" rel=\"nofollow noreferrer\">\n   Autostruct\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "NirIzr",
            "time": "Sep 29, 2016 at 8:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}