{
    "title": "Extract resources from compiled \"resource file\"",
    "link": "https://reverseengineering.stackexchange.com/questions/9290/extract-resources-from-compiled-resource-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am facing a compiled resource file for a mobile app (an Android one), built using moSync Framework (\n  <a href=\"http://www.mosync.com\" rel=\"nofollow noreferrer\">\n   http://www.mosync.com\n  </a>\n  ). This resource file contains media(images, audio), strings, JS/HTML code for that app. It is built using the resource compiler from moSync framework.\n </p>\n <p>\n  The resource file starts with\n  <code>\n   4D 41 52 53\n  </code>\n  or\n  <code>\n   MARS\n  </code>\n  as a signature/identifier.\n </p>\n <p>\n  Would it be possible to extract the resources, to apply some modifications to them and to repack the file ?\n </p>\n <p>\n  Later edit (publishing file header, and first bytes for further analysis):\n </p>\n <pre><code>4D 41 52 53 E0 1C 4D A9 04 3D 72 85 78 56 34 22 10 00 00 00 3F 01 00\n00 D7 25 B1 89 00 52 6F 6F 74 00 05 00 00 00 01 64 65 66 61 75 6C 74\n2E 63 73 73 00 00 00 00 00 51 0E 00 00 01 48 74 74 70 49 6E 66 6F 45\n4E 2E 68 74 6D 6C 00 51 0E 00 00 2C 7A 00 00 01 48 74 74 70 49 6E 66\n6F 52 4F 2E 68 74 6D 6C 00 7D 88 00 00 2B 7A 00 00 00 69 6D 61 67 65\n73 00 09 00 00 00 01 63 6C 69 65 6E 74 2E 70 6E 67 00 A8 02 01 00 A5\n02 00 00 01 64 65 73 74 69 6E 61 74 69 65 2E 70 6E 67 00 4D 05 01 00\nAA 03 00 00 01 74 61 78 69 2E 70 6E 67 00 F7 08 01 00 2F 0E 00 00 01\n74 61 78 69 30 2E 70 6E 67 00 26 17 01 00 F6 02 00 00 01 74 61 78 69\n31 2E 70 6E 67 00 1C 1A 01 00 76 04 00 00 01 74 61 78 69 32 2E 70 6E\n67 00 92 1E 01 00 5F 04 00 00 01 74 61 78 69 33 2E 70 6E 67 00 F1 22\n01 00 A7 05 00 00 01 74 61 78 69 34 2E 70 6E 67 00 98 28 01 00 0B 05\n00 00 01 74 61 78 69 35 2E 70 6E 67 00 A3 2D 01 00 02 06 00 00 00 6A\n73 00 01 00 00 00 01 6D 6F 73 79 6E 63 2D 62 72 69 64 67 65 2E 6A 73\n00 A5 33 01 00 59 44 00 00\n</code></pre>\n <p>\n  If you convert this data from hex to ascii, you will clearly see that the compiled file is a concatenation of several other files(eg:mosync-bridge.js, HttpInfoEN.html, default.css, taxi0.png). After finding that out, i continued analysing the file. After the last png file inside i found serveral audio/mpeg , audio/x-wav file headers. Those aren't referenced anywhere in the file, but loaded within the app sucessfully.\n </p>\n <p>\n  I also tried to hex-edit the file (eg change an attribute in a css file, without preserving attribute name length), repack and sign the APK. I installed it onto one device, and it would complain that it could not load the resources and crash.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "1k",
    "tags": [
        "decompilation",
        "unpacking",
        "pe-resources"
    ],
    "user": "Sir.pOpE",
    "time": "Mar 26, 2017 at 9:06",
    "comments": [
        {
            "user": "Maurice",
            "text": "<html><body><span class=\"comment-copy\">\n Have you tried\n <a href=\"http://ibotpeaches.github.io/Apktool/\" rel=\"nofollow noreferrer\">\n  Apktool\n </a>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sir.pOpE",
            "text": "<html><body><span class=\"comment-copy\">\n Yes i have tried. It outputs nothing interesting but smali code and a folder named \"assets\" which contains two files program.mp3 and resources.mp3. Those are mis-named as being MPEG Layer3 Audio files. Those are compiled resource files as i stated in my question\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "glampert",
            "text": "<html><body><span class=\"comment-copy\">\n The crash is very likely due to the archive having a\n <a href=\"https://en.wikipedia.org/wiki/Checksum\" rel=\"nofollow noreferrer\">\n  checksum\n </a>\n of its contents. If you alter the individual files inside it, then you would also have to find this checksum and update it accordingly.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sir.pOpE",
            "text": "<html><body><span class=\"comment-copy\">\n I am pretty sure it's not a checksum but file offsets in this \"archive\". I mean the audio files inside aren't refered anywhere in the header like others are, so i suspect the app or the library (moSync) knows where to look for a certain audio resource. if i alter a single bit in a css or html file the app runs ok and my change is visible( i.e.: altering a string from foo to bar, preserving number of chars, initially the app was writing foo now it writes bar)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "fileoffset",
            "text": "<html><body><span class=\"comment-copy\">\n It's unlikely the file offsets are hard-coded into the loader. It's more likely the file offsets/object sizes are stored inside the resource file. The most common way to do this is to store all the offsets either in a table (at the start, or end of the file), or as part of a resource 'header'. One way to tell, is to try and find the start and end boundary of a recognizable resource (say your CSS file), then calculate the actual size of the object, convert it to little-endian HEX and search for that word/dword in the file.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}