{
    "title": "How to inform Hex-Rays decompiler (7.0) of known register values?",
    "link": "https://reverseengineering.stackexchange.com/questions/26118/how-to-inform-hex-rays-decompiler-7-0-of-known-register-values",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm currently working on a binary that has encrypted strings, using IDA 7.0. The encrypted data is copied to another location in memory, which is then decrypted. I have already decrypted the strings in-place, but due to the way the strings are accessed the decompiler is having trouble resolving them.\n </p>\n <p>\n  This is an example of ASM that accesses a decrypted string:\n </p>\n <pre><code>mov     rcx, cs:StringTableOffset\nlea     rax, cs:180000000h\nlea     rcx, [rcx+rax+130A4h]\ncall    cs:GetModuleHandleA\n</code></pre>\n <p>\n  For the purpose of reversing,\n  <code>\n   StringTableOffset\n  </code>\n  can be considered 0, so the final\n  <code>\n   lea\n  </code>\n  instruction effectively just moves the value\n  <code>\n   0x1800130A4\n  </code>\n  into\n  <code>\n   rcx\n  </code>\n  . The decompiler doesn't know that, though, and shows pointer arithmetic instead.\n </p>\n <p>\n  <code>\n   || ((v11 = GetModuleHandleA((LPCSTR)(StringTableOffset + 0x1800130A4i64))\n  </code>\n </p>\n <p>\n  Is there any way to signal to the decompiler that the value of\n  <code>\n   rcx\n  </code>\n  (the argument to GetModuleHandleA) is known, so that it can display the defined string?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "274",
    "tags": [
        "ida",
        "decompilation"
    ],
    "user": "quickgame",
    "time": "Oct 15, 2020 at 18:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The answer to the specific question that you asked is: not directly through the UI, but it's possible with a plugin.\n  <a href=\"https://www.hex-rays.com/products/decompiler/manual/sdk/hexrays_sample18_8cpp-example.shtml\" rel=\"nofollow noreferrer\">\n   Sample plugin #18 in the Hex-Rays SDK\n  </a>\n  . The comment at the top of the plugin says:\n </p>\n <pre><code>* It shows how to specify a register value at a desired location.\n* Such a functionality may be useful when the code to decompile is\n* obfuscated and uses opaque predicates.\n</code></pre>\n <p>\n  However, there's a better answer to your question. The assembly code that you displayed is commonly generated by MSVC when accessing global arrays or data structures on x64. Basically, one register will be set to the base address of the containing module (\n  <code>\n   rax\n  </code>\n  in your snippet above), and then array accesses will be encoded as\n  <code>\n   [rax+r64+RVA_of_array]\n  </code>\n  , where\n  <code>\n   r64\n  </code>\n  is some register being used for indexing purposes.\n </p>\n <p>\n  Hex-Rays trips over snippets like this one, but there is a way to fix it: namely, by turning the numeric offset in the memory expression into an RVA. As far as I know, there's currently no way to do that through the GUI (EDIT: in the comments below, Igor Skochinsky informs us how to do this through the GUI), but you can do it through a small IDAPython script.\n </p>\n <pre><code>def make_rva(ea, n):\n    idaapi.op_offset(ea, n, ida_nalt.REFINFO_RVAOFF | ida_nalt.REF_OFF64, idaapi.BADADDR, idaapi.get_imagebase(), 0)\n</code></pre>\n <p>\n  Now, you can run the\n  <code>\n   make_rva\n  </code>\n  function by providing the address of the instruction with the memory expression as the first argument. The second argument is the operand number: 0 for left-hand side, 1 for right-hand side. Here's an example from a database I have open. Before:\n </p>\n <pre><code>0000000180019AEC cmp     byte ptr [rcx+rdx+138C84h], 0\n</code></pre>\n <p>\n  After executing\n  <code>\n   make_rva(0x0000000180019AEC,0)\n  </code>\n  :\n </p>\n <pre><code>0000000180019AEC cmp     rva stru_180138C80.sectors_per_cluster[rcx+rdx], 0\n</code></pre>\n <p>\n  I recently released a database of a malware sample that I had analyzed exhaustively, where I used these tricks as part of the analysis.\n  <a href=\"https://www.msreverseengineering.com/blog/2020/8/31/an-exhaustively-analyzed-idb-for-comrat-v4\" rel=\"nofollow noreferrer\">\n   You can get the database here\n  </a>\n  , and then jump to address\n  <code>\n   0000000180014607\n  </code>\n  to check out the effects.\n </p>\n <p>\n  EDIT, 08/24/2021: I reported the issue discussed above to Hex-Rays, who fixed it as of 7.6.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Aug 24, 2021 at 17:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "quickgame",
                    "text": "<span class=\"comment-copy\">This is exactly what I was looking for. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">via UI: Ctrl-R,  OFF64 and \"use imagebase as offser base\"</span>",
                    "time": null
                }
            ]
        }
    ]
}