{
    "title": "Unable to dump a process",
    "link": "https://reverseengineering.stackexchange.com/questions/9347/unable-to-dump-a-process",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to reverse a malware sample with the following MD5: ef668a0cd0755c67930ece13d28a6bda.\n </p>\n <p>\n  Obvious, this is a packed malware. On a first look, it seems to bee some GUI Programm, but at some point(0x4013E6) it modifies itself and turns to completely another program(malicious one).\n </p>\n <p>\n  I'm preety sure that the OEP is at 0x401265. But the problem is - I can not dump the process at this point and it makes the analysis difficult, because I can analyze only in a debugger. I tried to use the OllyDump and it throws the\n  <em>\n   Unable to read memory of debugged process(00400000..00408FFF)\n  </em>\n  followed by\n  <em>\n   Bad DOS Signature!!\n  </em>\n  . I also tried the dump.py in ImmunityDBG but it did not helped.\n </p>\n <p>\n  I also tried to change memory acccess right on every section in Olly before I dumped the process. Unfortunately it was not possible to change it at all sections. Also, consider that this malware sample creates new sections while modifying itself, may be it causes the problem?\n </p>\n <p>\n  If you want to take a look on the malware sample by yourself than set a first hardware breakpoint at 0x40220F(it is where the unpacking stub starts). After that set another one at 0x401265(OEP in my opinion).\n </p>\n <p>\n  It would be great if you count give me a hint how could I dump the process or what am I doing not correctly.\n </p>\n <p>\n  Thank you in advance :-)\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "tools",
        "debugging",
        "malware",
        "packers",
        "dumping"
    ],
    "user": "0xDEADC0DE",
    "time": "Jul 14, 2015 at 10:03",
    "comments": [
        {
            "user": "mayahustle",
            "text": "<html><body><span class=\"comment-copy\">\n Did you try dumping with Volatility's procdump plugin?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "fileoffset",
            "text": "<html><body><span class=\"comment-copy\">\n I used to have good success with LordPE's process dumper\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xDEADC0DE",
            "text": "<html><body><span class=\"comment-copy\">\n Yes I could dump the process with several other tools like procdump(volatilitiy's one and from Sysinternals). But I have another problem. I cannot repair the IAT. I tried to use\n <i>\n  ImportRec\n </i>\n and volatility's\n <i>\n  impscan\n </i>\n . And that is why I cannot see in\n <i>\n  IDA\n </i>\n which functions are called. If I use\n <i>\n  MakeName\n </i>\n in Python it just adds a comment. But I would like to somehow rename functions... Do you know how can I achieve that?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Malware can be removing/manipulating its own PE Header.\n </p>\n <pre><code>void destroyPEHeaders(){\n        DWORD OldProtect = 0;\n        char *pBaseAddr = (char*)GetModuleHandle(NULL);\n        VirtualProtect(pBaseAddr, 4096,\n            PAGE_READWRITE, &OldProtect);\n        srand(time(NULL));\n        ZeroMemory(pBaseAddr, 4096);\n        srand(time(NULL));\n        for (int i = 0; i < 4096; i++){\n            char *x = pBaseAddr;\n            x += i;\n            *x = rand() % 255;\n        }\n    }\n</code></pre>\n <p>\n  Something like this normally blocks stuff like CreateRemoteThread calls, so maybe it does the same thing to dumps?\n </p>\n <p>\n  Maybe you should try rewriting the original PE?\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "user2596732",
            "time": "Jul 16, 2015 at 9:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xDEADC0DE",
                    "text": "<span class=\"comment-copy\">Actually your assumption is right. The malware writes 120 Bytes of its header to zero before it starts a new instance of itself in a new process(it copies itself to Temp-Folder and executes from there). I tried to recover this 120 Bytes of header (in a debugger) before it starts a new process but it just causes an error!</span>",
                    "time": null
                }
            ]
        }
    ]
}