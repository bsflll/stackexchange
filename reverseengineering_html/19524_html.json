{
    "title": "Need help understanding XOR cipher",
    "link": "https://reverseengineering.stackexchange.com/questions/19524/need-help-understanding-xor-cipher",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to modify a save file for a game.  I think it is using an XOR cipher to encrypt it.  Looking though the disassembly I think I found the function that decrypts it.  I ran the assembly through a decompiler to get a better grip on what is going on.\n </p>\n <p>\n  I am a C# programmer with some knowledge of C/C++.  I generally understand what is accomplished by this code, but there are some details I don't understand.\n </p>\n <pre><code>int __fastcall DecryptBuffer(unsigned __int8 *a1, int a2, int a3, unsigned int a4, int a5)\n{\n  unsigned __int8 *v5;\n  unsigned __int8 *v6;\n  int result;\n  int v8;\n\n  v5 = a1;\n  v6 = &a1[a2];\n  result = a5;\n  v8 = a5 - (_DWORD)v5;\n  while ( v5 != v6 )\n  {\n    result = *v5 ^ *(unsigned __int8 *)(a3 + (unsigned int)&v5[v8] % a4);\n    *v5++ = result;\n  }\n  return result;\n}\n</code></pre>\n <p>\n  It accepts as parameters:\n </p>\n <ul>\n  <li>\n   <code>\n    a1\n   </code>\n   - a byte array\n  </li>\n  <li>\n   <code>\n    a2\n   </code>\n   - the length of the array\n  </li>\n  <li>\n   <code>\n    a3\n   </code>\n   -\n   <code>\n    0xB19D425B\n   </code>\n  </li>\n  <li>\n   <code>\n    a4\n   </code>\n   -\n   <code>\n    0x107\n   </code>\n  </li>\n  <li>\n   <code>\n    a5\n   </code>\n   -\n   <code>\n    0x00\n   </code>\n  </li>\n </ul>\n <p>\n  First, I can't figure out the value of\n  <code>\n   v8\n  </code>\n  .  I don't know what\n  <code>\n   (_DWORD)v5\n  </code>\n  means, or why it is subtracted from zero.\n </p>\n <p>\n  Second, I don't know what\n  <code>\n   (unsigned int)&v5[v8]\n  </code>\n  is actually doing.  I take it to mean it is looking up a byte somewhere in the array, but is it retrieving a single byte and casting to an uint, or four bytes?\n </p>\n <p>\n  Here is the disassembly:\n </p>\n <pre><code>sub_301E44\nPUSH.W          {R4-R8,LR}\nMOV             R4, R0\nADDS            R6, R0, R1\nLDR             R0, [SP,#0x18+arg_0]\nMOV             R7, R2\nMOV             R8, R3\nSUBS            R5, R0, R4\nloc_301E54\nCMP             R4, R6\nBEQ             locret_301E6C\nADDS            R0, R5, R4\nMOV             R1, R8\nBL.W            __aeabi_uidivmod\nLDRB            R0, [R4]\nLDRB            R3, [R7,R1]\nEORS            R0, R3\nSTRB.W          R0, [R4],#1\nB               loc_301E54\nlocret_301E6C\nPOP.W           {R4-R8,PC}\n</code></pre>\n <p>\n  This is the function that calls the above:\n </p>\n <pre><code>PUSH            {R0-R2,LR}\nMOVS            R3, #0\nLDR             R2, =(dword_8749EF - 0x301E80)\nSTR             R3, [SP,#0x10+var_10]\nMOVW            R3, #0x107\nADD             R2, PC  ; dword_8749EF\nBL              sub_301E44\nADD             SP, SP, #0xC\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "447",
    "tags": [
        "c++",
        "arm"
    ],
    "user": "Chet",
    "time": "Oct 4, 2018 at 0:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   (_DWORD)v5\n  </code>\n  is simply casting the\n  <code>\n   __int8*\n  </code>\n  pointer to\n  <code>\n   _DWORD\n  </code>\n  . Decompilations tend to be quite messy if you don't fix variable types, so let's ignore types for a moment.\n </p>\n <p>\n  To understand the value of v8, substitute it into the expression bellow:\n  <code>\n   &v5[a5 - v5_old]\n  </code>\n  . We can also understand this as\n  <code>\n   v5 + a5 - v5_old\n  </code>\n  .\n  <code>\n   v5\n  </code>\n  is being incremented with each iteration of the loop, so the above expression is basically the current index plus\n  <code>\n   a5\n  </code>\n  .\n </p>\n <p>\n  The current index plus\n  <code>\n   a5\n  </code>\n  modulo\n  <code>\n   a4\n  </code>\n  (presumably the length of the buffer pointed to by\n  <code>\n   a3\n  </code>\n  ) is then added to\n  <code>\n   a3\n  </code>\n  and the corresponding byte is XOR'd to the byte currently pointed to by\n  <code>\n   v5\n  </code>\n  .\n </p>\n <p>\n  Here's my take on the algorithm:\n </p>\n <pre><code>void DecryptBuffer ( char *buffer, int buffer_len, char *key, int key_len, int key_start )\n{ \n    int i;\n    for ( i = 0; i < buffer_len; i++ )\n        buffer [ i ] ^= key [ ( key_start + i ) % key_len ];\n}\n</code></pre>\n <p>\n  Or in other words, XOR with the key repeating over and over.\n </p>\n <p>\n  This is quite standard, so it's probably right, but it could be wrongâ€”as I said, the decompilation is quite messy. If you want a sure answer, either clean it up by fixing variable types or post the disassembly as well.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "user2347953",
            "time": "Oct 3, 2018 at 20:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Chet",
                    "text": "<span class=\"comment-copy\">Thanks so much, that works.  I would never have realized that <code>key</code> was a pointer to an array (rather than just an integer) and that <code>v8</code> was being used to determine how far into the buffer we were.  I attached the disassembly for completeness.</span>",
                    "time": null
                }
            ]
        }
    ]
}