{
    "title": "Using NAND flash dump with OOB data",
    "link": "https://reverseengineering.stackexchange.com/questions/22125/using-nand-flash-dump-with-oob-data",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have NAND flash memory dump, as a separate MTD partitions copied from NAND flash chip use built-in nanddump commands. I need to reflash some corrupted MTD partitions. In order to reflash partitions properly, should I use the partition dump that contain only the\n  <em>\n   actual data\n  </em>\n  , cleaned first from OOB data dummy chunks?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "firmware",
        "flash",
        "memory-dump"
    ],
    "user": "minto",
    "time": "Sep 14, 2019 at 14:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This depends very much on how exactly you plan to write the data back; some options would accept only \"payload\", others may need OOB too.\n </p>\n <p>\n  If you use U-Boot's\n  <code>\n   nand write\n  </code>\n  , it seems it accepts data without OOB but\n  <a href=\"https://elinux.org/Didj_U_Boot_Flashing_Primer\" rel=\"nofollow noreferrer\">\n   you need to erase target pages manually first\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 16, 2019 at 9:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">I used U-boot built-in commands <code>nand erase</code> and <code>nand write</code>. Before flashing I used python script to process dump and separate the actual data from OOB data. The test was unsuccessful, when I tried write data, an error was shown <code>Attempt to write non page aligned data. 13548080 bytes written: ERROR</code>. Before this I tried also write raw partition dump (with OOB), but linux kernel didn't loaded, not sure what was wrong with my dump.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@minto maybe this will help <a href=\"https://e2e.ti.com/support/legacy_forums/embedded/linux/f/354/t/48176?Unable-to-boot-from-kernel-stored-in-NAND-Flash\" rel=\"nofollow noreferrer\">e2e.ti.com/support/legacy_forums/embedded/linux/f/354/t/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">Cleaned dump is 13548080 bytes in size. NAND device have <code>Block size 16384, page size 512, OOB size 16 bytes</code>. 13548080 bytes is incomplete 26462 pages. A complete 26462 pages is 26462 x 512 = 13548544 bytes. The difference is 464 bytes: so need I append these 464 bytes for the complete page?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It depends. For example Samsung XSR stores information about the blocks in spare area, thus you need to have to dump both data and spare.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Oct 16, 2019 at 10:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}