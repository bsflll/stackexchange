{
    "title": "(de4dot) The file isn't a .NET PE file",
    "link": "https://reverseengineering.stackexchange.com/questions/20008/de4dot-the-file-isnt-a-net-pe-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Probably, many of you have ever seen the message from\n  <code>\n   de4dot\n  </code>\n  while trying to deobfuscate app/dll:\n </p>\n <pre><code>WARNING: The file isn't a .NET PE file:\n</code></pre>\n <p>\n  What steps to take in such cases to proceed? How to make the\n  <code>\n   .exe\n  </code>\n  file to be detected as valid\n  <code>\n   .NET PE\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "8k",
    "tags": [
        "deobfuscation",
        "de4dot"
    ],
    "user": "T.Todua",
    "time": "Nov 29, 2018 at 18:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   As a programmer myself, I have to again and again tell and shout, that if the purpose is cracking/stealing, then you should not do that for the sake of honesty. If the purpose is good, then I'll share my solutions.\n  </strong>\n </p>\n <p>\n  At first, the language should be determined, if it's either a real\n  <code>\n   .NET\n  </code>\n  file or not.\n </p>\n <ul>\n  <li>\n   <p>\n    You can use the \"PEiD\" tool (or if you do not have a good custom signature database for \"PEiD\", then use \"TridNet\") to analyze the file and determine the language (that will be approximation).\n   </p>\n  </li>\n  <li>\n   <p>\n    Open it with CFF Explorer. If you don't see the .NET Directory, then this is a native dll, not .NET. Check what language is that. ( sometimes, use \"Dependances\" to view, if you reference MSCEERE.DLL, it contains managed code, if you reference MSVCR100.DLL, it contains Native Code.)\n   </p>\n  </li>\n </ul>\n <p>\n  Now, there seems to be 2 possible scenarios:\n </p>\n <h1>\n  Scenario 1 - The original file is not\n  <code>\n   .NET\n  </code>\n  program:\n </h1>\n <ul>\n  <li>\n   <code>\n    de4dot\n   </code>\n   is made for\n   <code>\n    .NET\n   </code>\n   files. So, your executable might be a shell packed file, or\n   <code>\n    Win32\n   </code>\n   exe, or program is not written by\n   <code>\n    .NET\n   </code>\n   languages. For example, Visual C++ (i.e. written in Delphi or etc) has nothing to do with the\n   <code>\n    .NET\n   </code>\n   Framework, so you can discard the\n   <code>\n    .NET decompiler\n   </code>\n   (Reflector, ILSpy, etc) to get some code. In that case, you will have to go for the most complicated route and get back to reversing (with IDA, OllyDbg or any other similar and see what you can get in ASM, + HexRays Decompiler ).\n  </li>\n </ul>\n <h1>\n  Scenario 2 - The original file is\n  <code>\n   .NET\n  </code>\n  program, but hardened:\n </h1>\n <ul>\n  <li>\n   <p>\n    At first, you might try to unpack (if it's packed with i.e. UPX or etc..), like with\n    <code>\n     Universal Extractor\n    </code>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    You might try to find the obfuscator name using the \"DNiD\" tool.\n   </p>\n  </li>\n  <li>\n   <p>\n    .exe file may be a .net assembly and only after unpacking it becomes readable.\n   </p>\n  </li>\n  <li>\n   <p>\n    Dump that exe from runtime using jitDumper3/MegaDumper ( the output will be .NET insted of c++) , And then use your dumped file with de4dot    (or Fix the dumped exe which has invalid metadatas! You might try \"universal fixer\" for that.\n   </p>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "3",
            "user": "T.Todua",
            "time": "Nov 30, 2018 at 18:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I agree with T.Todua on likely causes, but the tools referenced are a bit dated. \n I'd recommend:\n </p>\n <ul>\n  <li>\n   for packer identification, try PEiD plus custom userdb's (\n   <a href=\"https://www.aldeid.com/wiki/PEiD\" rel=\"nofollow noreferrer\">\n    https://www.aldeid.com/wiki/PEiD\n   </a>\n   ), ExeInfo-PE (\n   <a href=\"http://exeinfo.pe.hu/plugins.htm\" rel=\"nofollow noreferrer\">\n    http://exeinfo.pe.hu/plugins.htm\n   </a>\n   ), and the Packer rules from Yara-Rules/rules git repository (\n   <a href=\"https://github.com/Yara-Rules/rules\" rel=\"nofollow noreferrer\">\n    https://github.com/Yara-Rules/rules\n   </a>\n   )\n  </li>\n  <li>\n   for dumping and fixing, OllyDumpEx (\n   <a href=\"https://low-priority.appspot.com/ollydumpex/\" rel=\"nofollow noreferrer\">\n    https://low-priority.appspot.com/ollydumpex/\n   </a>\n   ) and Scylla Import Reconstructor (\n   <a href=\"https://github.com/NtQuery/Scylla\" rel=\"nofollow noreferrer\">\n    https://github.com/NtQuery/Scylla\n   </a>\n   ) for native Windows code or dnSpy for managed code (\n   <a href=\"https://github.com/0xd4d/dnSpy\" rel=\"nofollow noreferrer\">\n    https://github.com/0xd4d/dnSpy\n   </a>\n   )\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "knowmalware",
            "time": "Dec 31, 2018 at 1:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}