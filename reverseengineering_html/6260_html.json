{
    "title": "Red Alert 2 Windows 8 DirectDraw compatibility",
    "link": "https://reverseengineering.stackexchange.com/questions/6260/red-alert-2-windows-8-directdraw-compatibility",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The game Red Alert 2 runs on Windows 8, but as soon as I inject a DLL (via ddraw.dll or an extra DLL) it stops drawing buttons on the main menu. With the DLL it still work fine in windowed mode and it still works fine on Windows 7. \nThe DLL is basically just\n </p>\n <pre><code>typedef HRESULT(WINAPI* LPDIRECTDRAWCREATE)(GUID*, LPDIRECTDRAW*, IUnknown*);\nHMODULE dd_dll = LoadLibrary(\"system32/ddraw.dll\");\nLPDIRECTDRAWCREATE dd_create = reinterpret_cast<LPDIRECTDRAWCREATE>(GetProcAddress(dd_dll, \"DirectDrawCreate\"));\nreturn dd_create(lpGUID, lplpDD, pUnkOuter);\n</code></pre>\n <p>\n  I'm guessing some kind of automatic compatibility mode is activated for the original game that gets disabled by the DLL, but how do I find out what's causing this?\nIt's important as the DLL provides improvements for gamers that should also be available on Windows 8 (and beyond).\n </p>\n</div>\n</body></html>",
    "votes": "9",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "c++",
        "dll-injection",
        "windows-8"
    ],
    "user": "XTF",
    "time": "Sep 19, 2014 at 14:06",
    "comments": [
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n Do you always inject the same DLL? Does the same thing happen if you inject a completely different DLL?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n Possibly\n <code>\n  system32/ddraw.dll\n </code>\n is different location on windows 8? it might be the way you inject the dll that causes this problem.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n It also might be the way you inject the dll that causes this problem. I found when injecting dll files its always best to set debug privileges with AdjustTokenPrivileges before using OpenProcess. Also sometimes allocating the dll into heap of target doesn't work at all because WriteProcessMemory is protected but then again just allocating path of the dll works just fine. Also in the end try using CreateRemoteThread method. Check to see if your hooked kernel32.dll LoadLibraryA actually works right when it Loads your dll file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n Perhaps use another method to inject your DLL that does not require DLL Hijacking? Also, executing the direct draw code in your DLL's main function could also cause troubles. perhaps create a thread and do that there?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n If a shim is used for the game to work properly, it stands to reason that some other version of said DLL from SxS is picked or that some patching happens unbeknownst to you. There are tools to investigate the shims applied and this should give you a clue where to look ...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    The easiest way to see if a compatibility SHIM is applied, is to examine the Process Environment Block (PEB) of the process and check __COMPAT_LAYER environment variable if it is set. If it's set it will have space delimited name of SHIMs applied. You can do this with a tool such as\n    <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer\" rel=\"nofollow noreferrer\">\n     Process Explorer\n    </a>\n    ,\n    <a href=\"https://processhacker.sourceforge.io/\" rel=\"nofollow noreferrer\">\n     Process Hacker\n    </a>\n    right clicking the  EXE when running, selecting Properties and checking Environment tab. You can also find this with\n    <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools\" rel=\"nofollow noreferrer\">\n     WinDbg\n    </a>\n    with\n    <strong>\n     !peb\n    </strong>\n    command when attached to the process.\n   </p>\n  </li>\n  <li>\n   <p>\n    You can view the compatibility database as well as create/test your own SHIM settings with the Application Compatibility Toolkit, which is part of the\n    <a href=\"https://docs.microsoft.com/en-us/windows-hardware/get-started/adk-install\" rel=\"nofollow noreferrer\">\n     Windows ADK\n    </a>\n    Using Compatibility Administrator you can view/create SHIMs. This tool is located at \"C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Application Compatibility Toolkit\\Compatibility Administrator (32-bit)\\Compatadmin.exe\" for 32-bit processes and \"C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Application Compatibility Toolkit\\Compatibility Administrator (64-bit)\\Compatadmin.exe\" for 64-bit processes.\n   </p>\n  </li>\n </ol>\n <ol start=\"3\">\n  <li>\n   <p>\n    You can automatically query the app compat database yourself via the APIs referenced in Microsoft's\n    <a href=\"https://docs.microsoft.com/en-us/windows/win32/devnotes/application-compatibility-database\" rel=\"nofollow noreferrer\">\n     Application Compatibility Database Developer Notes\n    </a>\n    or use this open source app\n    <a href=\"https://github.com/heaths/sdb2xml\" rel=\"nofollow noreferrer\">\n     Sdb2Xml\n    </a>\n    If you find in the first step you are having SHIMs applied then this query in the database will help you identify why. The databases are located in  C:\\Windows\\apppatch and C:\\Windows\\apppatch\\CustomSDB and have SDB file extension. If you can rename the EXE or change the version info on the EXE so it doesn't match in the database will stop it from getting the SHIM. You can also try hooking at lower level APIs (sometimes undocumented) to ensure you are not overwritten by SHIMs, although this needs a low level understanding.\n   </p>\n  </li>\n  <li>\n   <p>\n    This may not work depending on the applications anti-debugging techniques, but I have been able to work out complicated hooking issues using the\n    <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview\" rel=\"nofollow noreferrer\">\n     Time Travel Debugging feature of WinDbg\n    </a>\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "1",
            "user": "chentiangemalc",
            "time": "Nov 29, 2020 at 23:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}