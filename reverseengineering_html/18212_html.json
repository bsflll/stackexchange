{
    "title": "how to understand branch arm instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/18212/how-to-understand-branch-arm-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have this instruction\n  <code>\n   F6F700B8\n  </code>\n  I know that it\n  <code>\n   b #-0xA000\n  </code>\n  but how I can understand from\n  <code>\n   F6F700B8\n  </code>\n  that is\n  <code>\n   b #-0xA000\n  </code>\n  ? .\n </p>\n <p>\n  When I tried to translate  it on\n  <a href=\"http://armconverter.com/hextoarm/\" rel=\"nofollow noreferrer\">\n   http://armconverter.com/hextoarm/\n  </a>\n  I get\n  <code>\n   B.W #0xFFFF6004\n  </code>\n  how\n  <code>\n   0xFFFF6004\n  </code>\n  came to\n  <code>\n   -0xA000\n  </code>\n  ?\n </p>\n <p>\n  thank\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "954",
    "tags": [
        "assembly",
        "binary-analysis",
        "arm"
    ],
    "user": "ARMisKing",
    "time": "May 8, 2018 at 17:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  answer is for point 2 of your question  regarding the conversion by hextoarm\n </p>\n <p>\n  it is pc relative\n </p>\n <p>\n  you did not give a starting offset  so it is assumed as 0x0\n </p>\n <p>\n  the pc will be 4 bytes ahead\n </p>\n <p>\n  so PC  would be 0x4\n </p>\n <p>\n  therefore offset would be (4 - 0xa000) ==  0xffff6004\n </p>\n <p>\n  <strong>\n   0xffff6004 is == - (minus) 0x9ffc  read about  2's complement\n  </strong>\n </p>\n <pre><code>C:\\>e:\\GNUWIN32\\bin\\calc.exe\nC-style arbitrary precision calculator (version 2.11.10.1)\nCalc is open software. For license details type:  help copyright\n[Type \"exit\" to exit, or \"help\" for help.]\n\n; base(16)\n        0xa\n; -0x9ffc\n        -0x9ffc\n; 0xffff6004 - 0x100000000\n        -0x9ffc\n;\n</code></pre>\n <p>\n  if your current address were 0x9ffc  your PC would be 0xa000  and the disassembly would have been b.w #0\n </p>\n <p>\n  but since you didn't give a  start address hextoarm subtracted 0x9ffc from 0 \nand provided you a negative offset  0xffff6004  which is 2s complement of 0x9ffc\n </p>\n <p>\n  C:>python -c \"print \\\"%x\\\" % (0x100000000 - 0xffff6004 +4 )\"\na000\n </p>\n <p>\n  before you ask what 2,s complement is here is a simple python script that shows what 2's complement is\n </p>\n <pre><code>print(\"2's complement Notation is\")\nprint(\"take the input number and flip all bits and add 1 to the result\")\nprint(\"xorring with 0xffffffff flips all the 32 bits in a given number\")\nimport sys\narm_opcode = input(\"provide a number : \" )\nprint ( \"you entered \" +  hex(arm_opcode))\nprint (\"flipping the bits and adding 1 to \" + hex(arm_opcode) )\ntwoscomp =  hex(int( arm_opcode ^ 0xffffffff ) + 1)\nprint (\"2's complement for \" + hex(arm_opcode) + \" is \" + twoscomp )\n</code></pre>\n <p>\n  executing it\n </p>\n <p>\n  C:>python twoscompdemo.py\n </p>\n <pre><code>2's complement Notation is\ntake the input number and flip all bits and add 1 to the result\nxorring with 0xffffffff flips all the 32 bits in a given number\nprovide a number : 0xffff6004\nyou entered 0xffff6004L\nflipping the bits and adding 1 to 0xffff6004L\n2's complement for 0xffff6004L is 0x9ffc\n</code></pre>\n <p>\n  ==========================================================================\n </p>\n <p>\n  for your f6f700b8  you should state what your current address is \nif it is as you say b #-0xa000  then address happens to be -0x4 which appears illogical\n </p>\n <pre><code>C:\\>python\n>>> from keystone import *\n>>> for i in (Ks(KS_ARCH_ARM,KS_MODE_THUMB).asm(\"b.w #-0xa000\" , -0x4 ))[0]:\n...     print \"%02x \" % i,\n...\nf6  f7  00  b8\n>>>\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "May 9, 2018 at 13:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ARMisKing",
                    "text": "<span class=\"comment-copy\">if I only have <code>0xffff6004</code> how do I come to <code>0xa000</code> please?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">you should read a lot this is a simple 2 s complement notation you are asking the wrong questions  if you are trying to reverse something  you should know this by heart and should be able to recognize 2s complements just by seeing them any way i have added details to my answer</span>",
                    "time": null
                }
            ]
        }
    ]
}