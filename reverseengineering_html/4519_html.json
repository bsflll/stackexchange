{
    "title": "Reversing .Net CLR exceptions handlers chain",
    "link": "https://reverseengineering.stackexchange.com/questions/4519/reversing-net-clr-exceptions-handlers-chain",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I investigating .Net Framework JITter compilation results and I want to get programmatically exceptions handlers chain. May be somebody can help me with this investigation?\n </p>\n <p>\n  To make task easier, I debug following code:\n </p>\n <pre><code>class Program\n{\n    static void Main(string[] args) { MethodA(); }\n\n    static void MethodA() { MethodB(); }\n\n    static void MethodB() \n    {\n        try { MethodC(); } \n          catch (Exception exception)  { MethodC(); }\n    }\n\n    static void MethodC() { MethodD(); }\n\n    static void MethodD()\n    {\n        try { MethodE(); }\n          catch (Exception exception) { MethodE(); }\n    }\n\n    static void MethodE() { throw new Exception(); }\n}\n</code></pre>\n <p>\n  What's found?\n </p>\n <ol>\n  <li>\n   JITter uses standart way to build stack frames (locals,\n   <code>\n    EBP\n   </code>\n   ,\n   <code>\n    EIP\n   </code>\n   , params)\n  </li>\n  <li>\n   First parameters moves to method via registers (fastcall)\n  </li>\n  <li>\n   Where is try-catch-finally ? I have no idea. Really. Method have no any code to deregister last handler from chain.\n  </li>\n  <li>\n   Static methods pushes to stack only\n   <code>\n    EBP\n   </code>\n   and\n   <code>\n    EIP\n   </code>\n   . This means, stack cannot contain chain and chain is out of stack.\n  </li>\n </ol>\n <p>\n  What I use: MS Visual Studio 2010, SOS extension for resolving .Net objects and metadata by address. VMMap to understand, what type of memory page by given address and (hehe) MS OneNote to mark memory dump with different colors to mark as resolved (that means, I understand what I found)\n </p>\n <p>\n  I'll be happy to understand where is this chain, but I have no experience to do it.\n </p>\n <p>\n  Important note: CLR don't uses SEH for exceptions (many articles, where authors write about SEH in CLR lies. CLR only wraps SEH to translate its exceptions into CLR types)\n </p>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "528",
    "tags": [
        "disassembly",
        ".net"
    ],
    "user": "Alexus",
    "time": "Jun 4, 2014 at 7:36",
    "comments": [
        {
            "user": "mikalai",
            "text": "<html><body><span class=\"comment-copy\">\n I assume\n <a href=\"http://stackoverflow.com/q/19111108/731115\">\n  stackoverflow.com/q/19111108/731115\n </a>\n could help you.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Alexus",
            "text": "<html><body><span class=\"comment-copy\">\n Thx, but I looking for complex answer. Like in SEH (Structured Exceptions Handling): to obtain chain head, we need to read FS:0, where we will find.......\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mikalai",
            "text": "<html><body><span class=\"comment-copy\">\n As it's a very narrow domain, I'd suggest searching at clr-relared resources - there is a very little chance you'll get the answer here..\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can't tell you straight up how it works but maybe this will help find the answer.\n </p>\n <p>\n  Firstly you want to be debugging on the CLR level - this is all about the CLR instructions that correspond to your code and how they install new exception handlers. Once you can do it in the debugger you can automate using the CLR debugging API.\n </p>\n <p>\n  <a href=\"http://msdn.microsoft.com/en-gb/library/vstudio/bb397953%28v=vs.100%29.aspx\" rel=\"nofollow\">\n   http://msdn.microsoft.com/en-gb/library/vstudio/bb397953(v=vs.100).aspx\n  </a>\n </p>\n <p>\n  \"The CLR debugging services provide several ways to control the execution of a program. These include breakpoints, single stepping, exception notification, function evaluation, and other events that relate to the startup and shutdown of a program.\"\n </p>\n <p>\n  Basically if you can understand the mechanisms of installing a new handler and looking up the handler when an exception is raised, then you can expand from there. Maybe this api will help maybe not.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "offbyseveral",
            "time": "Jun 26, 2014 at 22:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}