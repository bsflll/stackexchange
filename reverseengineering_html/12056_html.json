{
    "title": "Find main() function of executable with windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/12056/find-main-function-of-executable-with-windbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have an executable without debug symbols, and I want to get to its'\n  <code>\n   main()\n  </code>\n  function.\n </p>\n <p>\n  What I do is putting breakpoint at\n  <code>\n   $exentry\n  </code>\n  address, but this address of some CRT-initialization. To get to the\n  <code>\n   main()\n  </code>\n  I need to single-step until I see some changes in working application.\n </p>\n <p>\n  Is there any other procedure to skip CRT code?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "6k",
    "tags": [
        "windbg"
    ],
    "user": "Hanik",
    "time": "Feb 17, 2016 at 12:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  no there is no shortcut loader knows only about the $exentry because it is an embedded pointer in the PeHeader\n  \n\n  from there to main is mostly traversed by either single stepping or observing and recognizing known functions by practice and experience\n  \n\n  the crt code is fairly common and the source for crt is available in crt folder of any visual studio installation  (this will help if you have the binary with debug info\n </p>\n <p>\n  if the binary is stripped or built without debuginfo in release mode crt src wont help you pinpoint the main()\n </p>\n <p>\n  in those case you should be able to recognize certain standard calls that the crt is going to make for example it would normally call\n  <strong>\n   kernel32!GetCommandLineXXXX\n  </strong>\n  settig a bp on that function brings you closer to the main() another function you can set a breakpoint is\n  <strong>\n   kernel32!GetEnvironemStringXXXX\n  </strong>\n  and then set hardware breaks on the results \nonce you have hit these breakpoints you can\nyou can use the standard prototype of main \nint main (int argc , char **argv , char* envp) construct to \nidentify your main\n </p>\n <pre><code>:\\>cdb -c \"bp $exentry;g;bp kernel32!GetCommandlineA;g;g poi(@esp)\" hell.exe\n\n0:000> cdb: Reading initial command 'bp $exentry;g;bp kernel32!GetCommandlineA;g;g poi(@esp)'\nBreakpoint 0 hit\nBreakpoint 1 hit\neax=002b36d8 ebx=7ffdf000 ecx=002b47e8 edx=002b4813 esi=00000000 edi=00000000\neip=01314082 esp=0024f9b0 ebp=0024f9e4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nimage01310000+0x4082:\n01314082 a3c4933201      mov     dword ptr [image01310000+0x193c4 (013293c4)],ea\nx ds:0023:013293c4=00000000\n</code></pre>\n <p>\n  the same area and the distance between exec_main and getcommandline function as an image of ollydbg debugging the same executable\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/eYXZ8.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/eYXZ8.png\"/>\n  </a>\n </p>\n <p>\n  the same src built with debuginfo\n  <strong>\n   /Zi msvc compiler\n  </strong>\n  and snap shotted\n  <a href=\"https://i.sstatic.net/MvIx3.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/MvIx3.png\"/>\n  </a>\n </p>\n <p>\n  to get more nearer you can employ the int argc \nyou execute the binary so you know how many arguments you passed \nif you passed no arguments to the binary then int argc will be equal to 1 \nif you passed 8 arguments int argc will be equal to 9\n </p>\n <p>\n  with that in mind once you reached the breakpoint as enumerated above you can run a loop that enumerates the int argc in stack\n </p>\n <pre><code>bp $exentry\nbp kernel32!GetCommandLineA\ng\ng\ng poi(@esp)\n.while(@$t0= 0) {\npc \n.if ( poi(@esp) == 1) {r $t0 = 1} .else { r $t0 = 0}\n}  \n</code></pre>\n <p>\n  result of running the script  notice the address in screen shot above you have just one call to step to the wrapper for main()\n </p>\n <pre><code>cdb -c \"$$>a< findwmain.txt\" hell.exe\n\n0:000> cdb: Reading initial command '$$>a< findwmain.txt'\nBreakpoint 0 hit\nBreakpoint 1 hit\n\neax=00000000 ebx=7ffd3000 ecx=00461228 edx=00461228 esi=00000000 edi=00000000\neip=000a40b5 esp=0034fb5c ebp=0034fb94 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nimage000a0000+0x40b5:\n000a40b5 e8e4420000      call    image000a0000+0x839e (000a839e)\n</code></pre>\n</div>\n</body></html>",
            "votes": "8",
            "user": "blabb",
            "time": "Feb 18, 2016 at 9:51",
            "is_accepted": true,
            "comments": []
        }
    ]
}