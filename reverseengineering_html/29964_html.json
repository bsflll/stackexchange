{
    "title": "Prevention of reverse engineering of a microcontroller's firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/29964/prevention-of-reverse-engineering-of-a-microcontrollers-firmware",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What steps may I take to make it more expensive to reverse engineer a firmware I want to use on a cheap microcontroller?\n </p>\n <p>\n  Options I see so far:\n </p>\n <ol>\n  <li>\n   Flood it with epoxy with quartz or metal dust to make physical access or x-ray harder\n  </li>\n  <li>\n   keep device always-on, and store important part in energy-dependent memory. Ideally a key that decrypts firmware\n  </li>\n  <li>\n   Use detection of disasembling process, and erase firmware if triggered. For example a light sensor inside the box or conductivity test or shake sensor.\n  </li>\n  <li>\n   Use firmware obfuscation\n  </li>\n  <li>\n   Use a particular MC that has an option to disallow firmware read. Is there something in stm32f0 family with this property?\n  </li>\n  <li>\n   Add physical parts and firmware code that are not actually needed\n  </li>\n  <li>\n   Erase the text from the microcontroller's body\n  </li>\n </ol>\n <p>\n  What points would make your life harder? What other options can you think of?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "200",
    "tags": [
        "firmware",
        "firmware-analysis"
    ],
    "user": "Surprised Seagull",
    "time": "Feb 1, 2022 at 19:03",
    "comments": [
        {
            "user": "dcom-launch",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://www.riscure.com/uploads/2017/09/Practical-optical-fault-injection-on-secure-microcontrollers.pdf\" rel=\"nofollow noreferrer\">\n  riscure.com/uploads/2017/09/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}