{
    "title": "How to replace statically linked library in ELF with dynamic library",
    "link": "https://reverseengineering.stackexchange.com/questions/33148/how-to-replace-statically-linked-library-in-elf-with-dynamic-library",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a proprietary ELF binary that I am trying to run. It is dynamically linked, but only against the normal libc stuff:\n </p>\n <pre><code>$ file binary\nbinary: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e02a29757b79db68a7bd41a731c6eb7d3e2a0382, with debug_info, not stripped\n$ ldd binary\n    linux-vdso.so.1 (0x00007f5556bc1000)\n    libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f5556b7f000)\n    libm.so.6 => /lib64/libm.so.6 (0x00007f5556a9e000)\n    libdl.so.2 => /lib64/libdl.so.2 (0x00007f5556a99000)\n    librt.so.1 => /lib64/librt.so.1 (0x00007f5556a94000)\n    libc.so.6 => /lib64/libc.so.6 (0x00007f55568b2000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f5556bc3000)\n</code></pre>\n <p>\n  The part I care about is the SDL2 library, which has been statically linked in:\n </p>\n <pre><code>$ nm binary | grep SDL\n...\n0000000000482610 T SDL_VideoInit\n0000000000478110 t SDL_VideoInit_DEFAULT\n00000000004b61a0 T SDL_VideoInit_REAL\n0000000000482620 T SDL_VideoQuit\n000000000047d400 t SDL_VideoQuit_DEFAULT\n00000000004b5f80 T SDL_VideoQuit_REAL\n0000000000480de0 T SDL_WaitEvent\n0000000000480df0 T SDL_WaitEventTimeout\n000000000047bab0 t SDL_WaitEventTimeout_DEFAULT\n00000000004845e0 T SDL_WaitEventTimeout_REAL\n000000000047bae0 t SDL_WaitEvent_DEFAULT\n00000000004842f0 T SDL_WaitEvent_REAL\n00000000004824d0 T SDL_WaitThread\n00000000004782a0 t SDL_WaitThread_DEFAULT\n00000000004a6760 T SDL_WaitThread_REAL\n...\n</code></pre>\n <p>\n  <strike>\n   <em>\n    (SDL is LGPL, so AFAIK it should not be statically linked, but it has been.)\n   </em>\n  </strike>\n  Actually SDL2 is no longer LGPL.\n </p>\n <p>\n  In order to get this to run on my system I want to replace the SDL library that was statically linked. The binary is not stripped, and the debug symbols are clearly in place, so I have some hope that this is possible.\n </p>\n <p>\n  Is there some tool that I can use to remove these symbols and replace them with a dynamic reference to an SDL .so file?\n </p>\n <p>\n  I know that there is no guarantee of success (for instance some functions may have been inlined), but is there a reasonable way to try?\n </p>\n <p>\n  <em>\n   bonus question:\n  </em>\n  Why are the symbols duplicated with\n  <code>\n   _REAL\n  </code>\n  and\n  <code>\n   _DEFUALT\n  </code>\n  suffixes? I thought those were for versioning with .so files. What would they be doing when statically linked?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "58",
    "tags": [
        "elf",
        "dynamic-linking"
    ],
    "user": "Sudo Bash",
    "time": "Aug 9, 2024 at 17:10",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n wrt symbols, \"t\" vs \"T\" just represents the scope of the symbols (global-binding vs local-binding). unless the binary is being tricky, only the \"T\" ones should be relevant (outside their module). some minor search-engine'ing says SDL defines a preprocessor macro to change the entrypoint of some of its functionality, and it's documented in\n <code>\n  README-dynapi.md\n </code>\n .\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n actually, skimming that documentation says that it's specifically for patching SDL similar to preloading with the runtime linker. essentially it's something like a function table that you can use to hijack SDL entrypoints (or something). perhaps this supports whatever it is you're trying to do with said game.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Sudo Bash",
            "text": "<html><body><span class=\"comment-copy\">\n @AliRizvi-Santiago Wow! I didn't know about that. That looks like it could do just what I need.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n don't forget to select the answer before you leave.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't think there is an easy way for doing this. What I would do myself is the following:\n </p>\n <ul>\n  <li>\n   Create your own library in C or C++ that does\n   <code>\n    dlopen(\"your_new_sdl_lib.so\")\n   </code>\n   .\n  </li>\n  <li>\n   Inject the library into your binary or patch it so it loads this library at startup.\n  </li>\n  <li>\n   Hook every single\n   <code>\n    SDL_XXX()\n   </code>\n   call and forward the call to your new SDL library (or, alternatively, patch every\n   <code>\n    SDL_XXX()\n   </code>\n   function so that they call into your new library).\n  </li>\n </ul>\n <p>\n  While I am sure you can get it to work, consider it's not guaranteed it will without a hard to measure amount of work. Not only because some functions might be in-lined, but because you might also have the problem of global variables being used outside of the\n  <code>\n   SDL_XXX()\n  </code>\n  functions.\n </p>\n <p>\n  In the case of some functions being in-lined, you would need to patch these calls to forward to your new functions (finding which registers or memory positions contain whatever is required for the appropriate call), or cross your fingers and hope the function versions are still compatible (my experience says that in so many cases they are).\n </p>\n <p>\n  Hope it helps.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Aug 9, 2024 at 10:56",
            "is_accepted": true,
            "comments": []
        }
    ]
}