{
    "title": "DLL Injection search for procedures/variables",
    "link": "https://reverseengineering.stackexchange.com/questions/6833/dll-injection-search-for-procedures-variables",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning DLL injection basics and different techniques to achieve it, like using\n  <code>\n   CreateProcess\n  </code>\n  and\n  <code>\n   LoadLibrary\n  </code>\n  for example, or simply replacing a .dll in folder where the application to inject into resides. \nI was able to perform some basic tasks after having loaded the .dll into application's memory space like invoking a\n  <code>\n   MessageBox\n  </code>\n  on\n  <code>\n   DLLEntry\n  </code>\n  and some others. \nBut how can one manipulate with the code of the application itself, eg. calling a certain procedure that is part of the application, or simply modifying a variable? \nMost tutorials I have read online discuss only injection process itself, but not the actual manipulations with applications. Or at least I am having trouble finding that information.\n </p>\n <p>\n  So, how to find/extract the memory parts of the application you are interested in and then modify/alter them?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dll",
        "winapi",
        "dll-injection",
        "function-hooking"
    ],
    "user": "astralmaster",
    "time": "Dec 16, 2014 at 12:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you want to use a function in the application the bottom line is that you need to know where it's located.  Without ASLR you can hardcode the address of the function into your DLL, and use a function pointer to call it.  If you want to modify data from a function in a loaded library then you would need to hook that function, and call your own code for its operations.\n </p>\n <p>\n  If an application's function is at 0x0041A000 you can create a function pointer if you know all the information about the function; the call convention, return value, and parameters.  Assume it's a\n  <code>\n   __stdcall\n  </code>\n  , two\n  <code>\n   VOID *\n  </code>\n  parameters, and returns a\n  <code>\n   DWORD\n  </code>\n  .\n </p>\n <pre><code>typedef DWORD (WINAPI *FunctionType)(VOID *a, VOID *b);\n\nDllEntry(...)\n{\n    FunctionType function = (FunctionType) 0x0041A000;\n\n    function(your_param1, your_param2);\n}\n</code></pre>\n <p>\n  You can also hook that function by using the\n  <a href=\"http://research.microsoft.com/en-us/projects/detours/\" rel=\"nofollow noreferrer\">\n   Windows Detours\n  </a>\n  library.  Again you would hardcode the address of the function you want to hook, and write your own version of the function.  You need to make sure that it returns the same type of value as the real function to ensure nothing breaks in the calling function.  Using\n  <code>\n   GetProcAddress\n  </code>\n  you can hook a function call of a library rather than the application's function.\n </p>\n <p>\n  This all gets complicated with ASLR.  As the application might not be at the location you think it is.\n  <a href=\"https://stackoverflow.com/a/11564232/3714897\">\n   This answer\n  </a>\n  can help with the calculations of certain sections determined by the base address of the program.\n </p>\n <p>\n  Modifying global variables is the same kind of deal.  You'll need to find their offset in the program.  You can then create pointer to that memory address for manipulating it.\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}