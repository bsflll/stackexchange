{
    "title": "Identifying/debugging code parts responsible for features in Windows",
    "link": "https://reverseengineering.stackexchange.com/questions/27706/identifying-debugging-code-parts-responsible-for-features-in-windows",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  New to the area, i am trying to identify the code responsible for example for the search functionality in Windows when you start typing in the start menu.\nWhat are some generic ways of identifying the file/code where that functionality is implemented?\n </p>\n <p>\n  Some ideas i had are:\n </p>\n <ol>\n  <li>\n   <p>\n    Check out procmon to identify whether your action is causing any events and identify the process, then one can go from there using potentially the corresponding symbols to find the appropriate functions.\n   </p>\n  </li>\n  <li>\n   <p>\n    Once we have the appropriate functions, see if possible to set a hardware breakpoint in kernel debugging in the address where the associate code is mapped. (easy when the code resides in kernel space, for userspace functionalities we may be lucky in case of system libraries mapped in the same virtual address for all processes)\n   </p>\n  </li>\n </ol>\n <p>\n  Not sure whether the above is the most optimal/effective methodology, any other ideas are welcome\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "75",
    "tags": [
        "windows"
    ],
    "user": "tturbox",
    "time": "May 22, 2021 at 21:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  procmon can help in locating an entry point or a point of ingress\n </p>\n <p>\n  start procmon\n </p>\n <p>\n  remove all filters\n </p>\n <p>\n  enable capturing\n </p>\n <p>\n  try typing something like \"turbox the t\" in the start menu\n </p>\n <p>\n  stop capturing\n </p>\n <p>\n  go to tools->file summary->extension tab and expand the wildcard (*) entry\n </p>\n <p>\n  you may notice this file has been searched on the PATH paths\n </p>\n <p>\n  click one entry and you may see the relevant searches over the\n  \n\n  whole  time period between  capture enable and capture disable\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/eSB6m.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/eSB6m.png\"/>\n  </a>\n </p>\n <p>\n  as you can see in the image above the 6 captures that pertain to search in\n  \n\n  c:\\windows\\system32 folder\n </p>\n <p>\n  double clicking the entry will yield the searches that span 2 seconds of interval\nas below\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/U9PGs.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/U9PGs.png\"/>\n  </a>\n </p>\n <p>\n  you can then click anyone of these capture to look at the call stack\n </p>\n <p>\n  as below\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/I2lpc.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/I2lpc.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "May 23, 2021 at 16:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}