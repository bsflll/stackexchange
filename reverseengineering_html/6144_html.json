{
    "title": "Tracing int 0x80 instructions using PIN",
    "link": "https://reverseengineering.stackexchange.com/questions/6144/tracing-int-0x80-instructions-using-pin",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wrote this small pintool that tries to record the number of\n  <code>\n   int 0x80\n  </code>\n  instructions executed. I did this roughly as follows :-\n </p>\n <p>\n  <code>\n   xed_iclass_enum_t iclass = static_cast<xed_iclass_enum_t>(INS_Opcode(ins));\n  </code>\n </p>\n <p>\n  I then compare iclass against XED_ICLASS_INT and print out the EIP if found. I'm doing this on a statically compiled test binary that :-\n </p>\n <pre><code>1. Prints hello world\n2. Makes a call to mprotect\n</code></pre>\n <p>\n  However, the number of\n  <code>\n   int 0x80\n  </code>\n  instructions encountered is just one. Is there something obvious I'm doing wrong? I tried using XED_ICLASS_SYSCALL too but that did not help.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "727",
    "tags": [
        "instrumentation"
    ],
    "user": null,
    "time": "Aug 31, 2014 at 15:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h1>\n  PIN_AddSyscallEntryFunction\n </h1>\n <p>\n  Why not just use\n  <code>\n   PIN_AddSyscallEntryFunction\n  </code>\n  ?  This is an ABI-agnostic way of doing things, that lets you use\n  <code>\n   PIN_GetSyscallArgument\n  </code>\n  and related functions rather than manually inspecting the stack and register context.\n </p>\n <h1>\n  INS_IsInterrupt\n </h1>\n <p>\n  You could also use\n  <code>\n   INS_IsInterrupt\n  </code>\n  at instrumentation time to gather the information at analysis time.  Note that this won't catch any systemm calls made via the\n  <code>\n   syscall\n  </code>\n  or\n  <code>\n   sysenter\n  </code>\n  instructions.\n </p>\n <h1>\n  Examples\n </h1>\n <p>\n  As a simple example, if you look at the file\n  <a href=\"https://github.com/JonathanSalwan/stuffz/blob/master/binary_analysis_with_ins_counts/inscount0.cpp#L48\" rel=\"nofollow\">\n   <code>\n    inscount0.cpp\n   </code>\n  </a>\n  that comes with Pin, if you add the following check, you'll only instrument syscalls.\n </p>\n <h3>\n  INS_IsInterrupt\n </h3>\n <p>\n  In\n  <code>\n   inscount0.cpp\n  </code>\n  , change the routines as shown below.  The module will now count the number of\n  <code>\n   int\n  </code>\n  instructions executed, rather than the total number of instructions executed.\n </p>\n <pre><code>VOID Instruction(INS ins, VOID *v)\n{\n    if(INS_IsSyscall(ins))\n    {\n        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);\n    }\n}\n</code></pre>\n <p>\n  Now all syscall instructions will be counted.  You can use the standard\n  <code>\n   INS_InsertCall\n  </code>\n  arguments to inspect the stack or register context.\n </p>\n <h3>\n  PIN_AddSyscallEntryFunction\n </h3>\n <p>\n  Add this function before\n  <code>\n   main\n  </code>\n </p>\n <pre><code>void OnSyscall(THREADID threadIndex, CONTEXT *ctxt, SYSCALL_STANDARD std, VOID *v)\n{\n    printf(\"Made syscall #%i\n\", PIN_GetSyscallNumber(ctxt, std));\n}\n</code></pre>\n <p>\n  and add this line to\n  <code>\n   main\n  </code>\n  before\n  <code>\n   PIN_StartProgram\n  </code>\n  .\n </p>\n <pre><code>PIN_AddSyscallEntryFunction(OnSyscall, 0);\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Aug 31, 2014 at 17:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}