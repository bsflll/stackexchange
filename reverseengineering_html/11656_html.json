{
    "title": "iOS Detect Function Hooking",
    "link": "https://reverseengineering.stackexchange.com/questions/11656/ios-detect-function-hooking",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would like to find out if there's a way to detect if a C function is hooked in iOS? So for example let's say I hook SSLHandshake,\n </p>\n <pre><code>OSStatus (*orig_SSLHandshake) (SSLContextRef context);\n\nOSStatus replaced_SSLHandshake (SSLContextRef context)\n{\n    OSStatus result = orig_SSLHandshake(context);\n    if (result == errSSLServerAuthCompleted)\n    {\n        return orig_SSLHandshake(context);\n    }\n    else\n        return result;\n    }\n}\n</code></pre>\n <p>\n  Is there anyway to detect if this function has been hooked?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ios",
        "function-hooking"
    ],
    "user": "d123",
    "time": "Dec 30, 2015 at 17:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h3>\n  Basic way to do it\n </h3>\n <p>\n  The concept is simple (but implementing it to protect your app from a hacker is a hassle).\n  <strong>\n   Function implementations are stored in memory and hence have a memory address\n  </strong>\n  . That's why you can use a function pointer in your example.\n </p>\n <p>\n  \n\n  In order to see if a function has been hooked, you would just :\n </p>\n <ol>\n  <li>\n   Save the address of the original function implementation (get the address of the function pointer using\n   <code>\n    &orig_SSLHandshake\n   </code>\n   ). The implementation are all loaded in memory when the app calls the first\n   <code>\n    ApplicationDelegate\n   </code>\n   method.\n  </li>\n  <li>\n   Each time you need it, compare the address of the current implementation with the original address you stored.\n  </li>\n </ol>\n <p>\n  If you do not care about being hooked from the outside, then this solution may satisfy you.\n </p>\n <h3>\n  Protecting your app against hooking done by an attacker\n </h3>\n <p>\n  Here I assume you want to protect your app against a function hook done by a hacker (and not hook the function yourself).\n </p>\n <p>\n  One of the easiest ways to hook functions in iOS is using MobileSubstrate. It can hook function implementations early in the application launching process (already hooked when in\n  <code>\n   application:didFinishLaunching...\n  </code>\n  ), so that when you would try to get the address of your original function (\n  <code>\n   & originalFunction\n  </code>\n  ) you would in fact get the address of the hooked function. You would never be able to get the address of the original one.\n </p>\n <p>\n  Because function hooking can happen very early in the application launching process, you would have to use some tricks.\n </p>\n <p>\n  Basically, you would verify that the implementation you want to store as the\n  <em>\n   original\n  </em>\n  function is really the original one.\n  \n\n  You could decide to have some global variables (despite it is not a good programming style) and make your original function perform some operations on them and output an expected value.\n  \n\n  Then if an attacker has already hooked your function, you would know it (after having called your function) because it would not produce the expected output on the global variable.\n  <em>\n   You may add an extra parameter to your function for these checks\n  </em>\n  .\n </p>\n <p>\n  However, it is important to note that a hacker have access to both your original function implementation and the arguments you pass when trying to call that function.\n  \n\n  Hence, although the previous solution makes the verification secure in cases where the attacker does not call your original function (with the expected arguments), it does not help if he calls your function before or after having done his own modifications.\n </p>\n <pre><code>void hookedImplementation (type1 arg1, type2 arg2){\n    // ... the hacker does stuffs\n    \n    // he calls your original function with the arguments you passed.\n    originalFunction(arg1,arg2);\n    \n    // .. other hooking\n}\n</code></pre>\n <p>\n  In regards of all this, my only reply is that you cannot be 100% sure that your original function has not been hooked by an attacker. However, you may discourage most hackers, and maybe\n  <em>\n   that\n  </em>\n  is sufficient for your case.\n  \n\n  <em>\n   Just be councious about that if you work in the IT department of a worldwide bank institute (since it would then matter).\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}