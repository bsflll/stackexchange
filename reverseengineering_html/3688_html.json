{
    "title": "Forcing a call to an object instance method",
    "link": "https://reverseengineering.stackexchange.com/questions/3688/forcing-a-call-to-an-object-instance-method",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've instrumented an application using Frida.RE. I can hook the constructor of a C++ class of my interest, let's call this MyClass::MyClass().\n </p>\n <p>\n  I want to call the non-static MyClass::SomeMethod() on an object instance. To do this I need to have the address of the object instance so I can pass it to the method as the implicit 'this' argument.\n </p>\n <p>\n  Is there a way to monitor the addresses of the created instances of MyClass?\n </p>\n <p>\n  Or is there some other way to call the SomeMethod() method of an already instantiated object?\n </p>\n <p>\n  <strong>\n   Update:\n  </strong>\n </p>\n <p>\n  I tried to simply record the 0th argument passed to the constructor with Frida (args[0]), but I couldn't access the\n  <code>\n   this\n  </code>\n  pointer, only the first \"real\" argument (passed explicitly by the caller).\n </p>\n <p>\n  I can think of two things:\n </p>\n <ol>\n  <li>\n   Frida doesn't care about the implicit\n   <code>\n    this\n   </code>\n   argument, or\n  </li>\n  <li>\n   things are messed up because of the thiscall scheme used  in Windows programs (I'm experimenting on 32-bit Windows). I couldn't figure out a way to get the value of ECX with Frida though...\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "c++",
        "instrumentation"
    ],
    "user": "buherator",
    "time": "Feb 20, 2014 at 13:40",
    "comments": [
        {
            "user": "buherator",
            "text": "<html><body><span class=\"comment-copy\">\n @DCoder correct\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  First parameter of the constructor is the memory allocated for the object.\n(Usually stored at r0 for ARM and thumb).\nSo the way to monitor it is simple: instrument all constructors of the class and watch the first constructor parameter.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Feb 17, 2014 at 12:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "buherator",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. Unfortunately it doesn't fit my problem, I'm updating my question with the details about why.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was also struggling with this, until I realized that if the function uses a custom calling convention. args[n] assumes the default calling convention. For custom calling conventions, in this case __thiscall scheme, the pointer to this is on ecx register (accessible through this.context.ecx).\n </p>\n <p>\n  Hope this helps anyone!\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jossec101",
            "time": "May 7, 2020 at 22:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}