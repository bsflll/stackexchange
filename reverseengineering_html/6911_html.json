{
    "title": "What is the benefit or reason of using a static disassembler over a dynamic disassembler in terms of malware analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/6911/what-is-the-benefit-or-reason-of-using-a-static-disassembler-over-a-dynamic-disa",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know that\n </p>\n <blockquote>\n  <p>\n   Dynamic program analysis is the analysis of computer software that\n  is performed by executing programs on a real or virtual processor.\n  </p>\n </blockquote>\n <p>\n  while\n </p>\n <blockquote>\n  <p>\n   Static program analysis is the analysis of computer software that is\n  performed without actually executing programs\n  </p>\n </blockquote>\n <p>\n  But what i don't understand is that why would someone use a static disassembler like ida pro over a dynamic disassembler or debugger like ollydbg and vice versa.\n </p>\n <p>\n  P.S This is not a duplicate of\n  <a href=\"https://reverseengineering.stackexchange.com/questions/3473/what-is-the-difference-between-static-disassembly-and-dynamic-disassembly\">\n   What is the difference between static disassembly and dynamic disassembly?\n  </a>\n </p>\n <p>\n  Because this is not asking for the difference but it is asking for the reason and benefits why someone would choose static disassembler over a dynamic disassembler and vice versa in terms of malware analysis.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "ollydbg",
        "malware",
        "static-analysis"
    ],
    "user": "MalwareTeachHead",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "MalwareTeachHead",
            "text": "<html><body><span class=\"comment-copy\">\n So what is difference between  debugger and disassembler then\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In most cases, you won't confine yourself to one of them, instead, you'll use both.\n </p>\n <p>\n  Dynamic analysis means running the software. You don't want to do this with a piece of software that you suspect of being malware, except in a controlled environment.\n </p>\n <p>\n  Also, before running the software, you want to know a bit about it. Is the executable packed in some way? Does it use anti-debugging techniques? Does the software contain any pieces of some well-known / open source library? There are lots of tools out there that answer some of these questions - Ida pro is only one of them.\n </p>\n <p>\n  To further improve your understanding of the software, you want a tool that helps you find dependencies between its parts. Which parts of the binary are actually code, and which are data? If the software contains strings, or other data, that looks interesting, where are those referenced? Which function is called where? This is where the cross-referencing of IDA comes in handy.\n </p>\n <p>\n  On the other hand, in many cases, you don't really need to understand every single instruction of a subroutine to know what it does. You might want to know which files and which registry keys get read and written by your software. Or, you might want to know if it accesses the internet, and which sites it connects to. Running the software with stuff like\n  <code>\n   procmon\n  </code>\n  or\n  <code>\n   wireshark\n  </code>\n  enabled is the fastest way to find out - i'd consider that dynamic analysis as well, even though\n  <code>\n   procmon\n  </code>\n  and\n  <code>\n   wireshark\n  </code>\n  aren't debuggers. Or, while analyzing your software, you come across a function that contains lots of bit operations - this might be some kind of encryption or hashing. Fire up a debugger, set breakpoints on the function, and check its parameters and return values. This can confirm your assumption much faster than trying to understand the function.\n </p>\n <p>\n  Now, you've confirmed the function really decrypts something, and you want to know how it works. You'll probably want to annotate individual opcodes with comments like 'at this point,\n  <code>\n   eax\n  </code>\n  contains all bytes of the input string, xor'red with each other' or 'this doesn't do anything and seems to be nothing but obfuscation'. Tools like IDA allow you to do exactly this.\n </p>\n <p>\n  So the answer is: unless you have a very trivial piece of software, you won't choose one over the other. Analyzing the software consists of many tasks; for some of them, static analysis is easier, for others, dynamic analysis. Any self respecting reverse engineer will have lots of tools at his disposal and pick the right one depending on the task at hand, and quite often, will write his own tool as well to tackle some problems he has with the specific software he's working on right now.\n </p>\n <p>\n  Note that i've never always used the term\n  <code>\n   software\n  </code>\n  instead of\n  <code>\n   malware\n  </code>\n  , as this relates to any kind of reverse engineering, not just malware analysis.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Dec 28, 2014 at 18:09",
            "is_accepted": true,
            "comments": []
        }
    ]
}