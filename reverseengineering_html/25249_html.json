{
    "title": "Is there a list of Ghidra's variable prefixes?",
    "link": "https://reverseengineering.stackexchange.com/questions/25249/is-there-a-list-of-ghidras-variable-prefixes",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In Ghidra, the decompiler prepends various prefixes to variable names. For instance,\n  <code>\n   iVar1\n  </code>\n  is an integer. However, there are a lot of prefixes that aren't immediately obvious, find some below, but I'm looking for a complete dictionary if anyone knows where it is:\n </p>\n <ul>\n  <li>\n   <code>\n    local_31\n   </code>\n  </li>\n  <li>\n   <code>\n    auStack8320\n   </code>\n  </li>\n  <li>\n   <code>\n    uStack4\n   </code>\n  </li>\n  <li>\n   <code>\n    DAT_<addr>\n   </code>\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ghidra",
        "decompiler"
    ],
    "user": "Axel Persinger",
    "time": "Jun 9, 2020 at 11:57",
    "comments": [
        {
            "user": "Felix PK",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe this\n <a href=\"https://en.wikipedia.org/wiki/Hungarian_notation\" rel=\"nofollow noreferrer\">\n  wikipedia article about hungarian notation\n </a>\n helps too.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is annoyingly hard to find the answer to. This is a good starting point, but I don't think I found everything yet.\n </p>\n <ol>\n  <li>\n   Variable names\n   <ol>\n    <li>\n     From\n     <a href=\"https://github.com/NationalSecurityAgency/ghidra/blob/0cdc722921cef61b7ca1b7236bdc21079fd4c03e/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/listing/Function.java#L39\" rel=\"noreferrer\">\n      Function.java\n     </a>\n     :\n     <ol>\n      <li>\n       <code>\n        param_\n       </code>\n      </li>\n      <li>\n       <code>\n        local_\n       </code>\n      </li>\n      <li>\n       <code>\n        local_res\n       </code>\n      </li>\n      <li>\n       <code>\n        temp_\n       </code>\n      </li>\n     </ol>\n    </li>\n    <li>\n     From\n     <a href=\"https://github.com/NationalSecurityAgency/ghidra/blob/0cdc722921cef61b7ca1b7236bdc21079fd4c03e/Ghidra/Features/Decompiler/src/decompile/cpp/database.cc#L2330\" rel=\"noreferrer\">\n      database.cc\n     </a>\n     <-- this function has most (maybe all?) of the variable naming logic. There are multiple pieces of this function that I don't yet understand; I'm pretty confident there are additional variable naming conventions hiding in there.\n     <ol>\n      <li>\n       <code>\n        unaff_retaddr\n       </code>\n      </li>\n      <li>\n       <code>\n        unaff_\n       </code>\n      </li>\n      <li>\n       <code>\n        in_\n       </code>\n      </li>\n      <li>\n       <code>\n        param_\n       </code>\n       <ol>\n        <li>\n         While also referenced in\n         <code>\n          Function.java\n         </code>\n         , I believe this is where the name is actually generated.\n        </li>\n       </ol>\n      </li>\n      <li>\n       <code>\n        extraout_\n       </code>\n      </li>\n      <li>\n       <code>\n        Var\n       </code>\n       <ol>\n        <li>\n         Seems to usually be prefixed by something else (like\n         <code>\n          i\n         </code>\n         in your example)\n        </li>\n       </ol>\n      </li>\n     </ol>\n    </li>\n    <li>\n     I think\n     <a href=\"https://github.com/NationalSecurityAgency/ghidra/blob/0cdc722921cef61b7ca1b7236bdc21079fd4c03e/Ghidra/Features/Decompiler/src/decompile/cpp/varmap.cc#L407\" rel=\"noreferrer\">\n      this function in\n      <code>\n       varmap.cc\n      </code>\n     </a>\n     is the one that creates stack variables, but I haven't yet confirmed.\n    </li>\n   </ol>\n  </li>\n  <li>\n   Label names (from\n   <a href=\"https://github.com/NationalSecurityAgency/ghidra/blob/0cdc722921cef61b7ca1b7236bdc21079fd4c03e/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/symbol/SymbolUtilities.java#L44\" rel=\"noreferrer\">\n    SymbolUtilities.java\n   </a>\n   ):\n   <ol>\n    <li>\n     <code>\n      SUB_\n     </code>\n    </li>\n    <li>\n     <code>\n      LAB_\n     </code>\n    </li>\n    <li>\n     <code>\n      DAT_\n     </code>\n    </li>\n    <li>\n     <code>\n      UNK_\n     </code>\n    </li>\n    <li>\n     <code>\n      EXT_\n     </code>\n    </li>\n    <li>\n     <code>\n      FUN_\n     </code>\n    </li>\n    <li>\n     <code>\n      OFF_\n     </code>\n    </li>\n   </ol>\n  </li>\n </ol>\n <p>\n  Also useful, the\n  <a href=\"https://github.com/NationalSecurityAgency/ghidra/blob/0cdc722921cef61b7ca1b7236bdc21079fd4c03e/Ghidra/Features/Decompiler/ghidra_scripts/FindPotentialDecompilerProblems.java\" rel=\"noreferrer\">\n   FindPotentialDecompilerProblems.java\n  </a>\n  script has some explanations for what some of these mean. Namely, some of the variants of\n  <code>\n   extraout\n  </code>\n  ,\n  <code>\n   in_\n  </code>\n  , and\n  <code>\n   unaff_\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "11",
            "user": "hairlessbear",
            "time": "Dec 2, 2020 at 2:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}