{
    "title": "Which libraries exist for PDB (symbol file) generation?",
    "link": "https://reverseengineering.stackexchange.com/questions/11734/which-libraries-exist-for-pdb-symbol-file-generation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I know that there are many libraries that parse PDB files and allow extracting debug information from them.\n </p>\n <p>\n  For a project I am working on, I need to generate PDB files. Are there any publicly available libraries that can do that?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 3,
    "views": "285",
    "tags": [
        "debugging",
        "symbols",
        "pdb"
    ],
    "user": "tmr232",
    "time": "Jan 10, 2016 at 16:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  microsoft recently released some headers in github to help the clang / llvm toolset take a look\n  <a href=\"https://github.com/Microsoft/microsoft-pdb\" rel=\"nofollow\">\n   Microsoft Pdb Information in GitHub\n  </a>\n  \n\n  <a href=\"http://lists.llvm.org/pipermail/cfe-dev/2015-October/045780.html\" rel=\"nofollow\">\n   clang llvm codeview emission rfc mailing list thread\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Jan 10, 2016 at 17:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  LLVM supports generating PDB. There is a tool,\n  <a href=\"https://llvm.org/docs/CommandGuide/llvm-pdbutil.html\" rel=\"nofollow noreferrer\">\n   llvm-pdbutil\n  </a>\n  , that can generate them from YAML.\n </p>\n <p>\n  Also, the compiler pipeline can generate CodeView debuginfo from LLVM IR's standard DWARF 2-style debug info format (apparently this happens during llvm CodeGen, not to be confused with clang CodeGen which is a way earlier process), and\n  <strong>\n   link.exe\n  </strong>\n  or (eventually)\n  <strong>\n   lld\n  </strong>\n  can slurp up that codeview and build a PDB out of it (de-duplicating type info in the process).\n </p>\n <p>\n  <a href=\"https://llvm.org/docs/SourceLevelDebugging.html#codeview-debug-info-format\" rel=\"nofollow noreferrer\">\n   https://llvm.org/docs/SourceLevelDebugging.html#codeview-debug-info-format\n  </a>\n  says a bit about this, and the rest of that page discusses debug info in LLVM in general. Obviously clang has code to create type info, line number info, variable location/scope info, etc.  Again, the same DWARF 2-based debuginfo format is used regardless of intended output format, though there are a number of places in clang/lib/CodeGen/ that do something slightly different when CodeView is requested, and the clang \"driver\" does set some other options when codeview is enabled.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "SamB",
            "time": "Jan 22 at 21:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you manage to produce CodeView info (which is partially documented/RE'd) or DWARF, you can try this project:\n  <a href=\"https://github.com/rainers/cv2pdb\" rel=\"nofollow\">\n   https://github.com/rainers/cv2pdb\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jan 10, 2016 at 21:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}