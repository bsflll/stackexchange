{
    "title": "XCHG RAX, RAX: 0x03, what does this code do and how does it work?",
    "link": "https://reverseengineering.stackexchange.com/questions/19730/xchg-rax-rax-0x03-what-does-this-code-do-and-how-does-it-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://rads.stackoverflow.com/amzn/click/1502958082\" rel=\"nofollow noreferrer\">\n   <em>\n    \"XCHG RAX, RAX\"\n   </em>\n  </a>\n  is a kind of riddle book that provides assembly code for you to reverse and undercover the meaning. Some of the examples calculate the Fibonacci sequence others bit-twiddle to toggle ASCII case. The\n  <a href=\"https://www.xorpd.net/pages/xchg_rax/snip_03.html\" rel=\"nofollow noreferrer\">\n   snippet (riddle) on\n   <code>\n    0x03\n   </code>\n  </a>\n  is,\n </p>\n <pre><code>sub  rdx,rax\nsbb  rcx,rcx\nand  rcx,rdx\nadd  rax,rcx\n</code></pre>\n <p>\n  How does this code work, and what does it do?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "468",
    "tags": [
        "x86",
        "x86-64"
    ],
    "user": "Evan Carroll",
    "time": "Oct 26, 2018 at 18:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This code boils down to,\n </p>\n <pre><code>rax = min(rdx,rax)\nrdx = sub(rdx,rax) ; store the difference in rdx\n</code></pre>\n <p>\n  That is essentially,\n </p>\n <ul>\n  <li>\n   <code>\n    rdx - 0\n   </code>\n   (if\n   <code>\n    rdx\n   </code>\n   is the min)\n  </li>\n  <li>\n   <code>\n    rdx - (rdx-rax)\n   </code>\n   (if\n   <code>\n    rax\n   </code>\n   is the min)\n  </li>\n </ul>\n <p>\n  The\n  <code>\n   sbb\n  </code>\n  and\n  <code>\n   and\n  </code>\n  here just move into\n  <code>\n   rcx\n  </code>\n  either\n </p>\n <ul>\n  <li>\n   <code>\n    0\n   </code>\n  </li>\n  <li>\n   <code>\n    rdx-rax\n   </code>\n  </li>\n </ul>\n <p>\n  What determines what gets moved into\n  <code>\n   rcx\n  </code>\n  ? That's determined by the result of the\n  <code>\n   sbb\n  </code>\n  .\n  <strong>\n   The\n   <code>\n    sbb\n   </code>\n   is doing\n   <code>\n    reg - reg - CF\n   </code>\n   .\n  </strong>\n  So you're either\n  <code>\n   AND\n  </code>\n  ing against all\n  <code>\n   1\n  </code>\n  s or all\n  <code>\n   0\n  </code>\n  s.\n </p>\n <p>\n  This is how I reasoned about it\n </p>\n <pre><code># CF=0; rdx > rax\nif ( rdx > rax ) {\n  rdx -= rax\n  rcx = 0     ; all bits off\n\n\n              ; AND 0 (rcx) with anything (in rdx) is nop here.\n              ; ADDing 0 (rcx) to rax is a nop\n}\n\n\n\n# CF=1; rax > rdx\nelse {\n  rdx -= rax\n  rcx = -1    ; all bits on\n\n\n  rcx = rdx   ; code is rcx &= rdx\n              ; remember -1 & x == x\n  rax += rcx\n\n}\n</code></pre>\n <p>\n  Note regardless of the carry flag,\n  <strong>\n   this code will store the difference in\n   <code>\n    rdx\n   </code>\n  </strong>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Evan Carroll",
            "time": "Oct 26, 2018 at 1:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}