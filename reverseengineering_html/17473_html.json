{
    "title": "How does this EB F2 x86 instruction work?",
    "link": "https://reverseengineering.stackexchange.com/questions/17473/how-does-this-eb-f2-x86-instruction-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the following code snippet, the EB F2 instruction is causing execution to jump back up to the line indicated by the arrow. How is this the case given that there is no address supplied to EB and the jmp is less than F2 away in terms of address distance?\n  <a href=\"https://i.sstatic.net/WGdoU.png\" rel=\"noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/WGdoU.png\"/>\n  </a>\n  These two locations are 0xC from each other.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "x64dbg"
    ],
    "user": "the_endian",
    "time": "Feb 15, 2018 at 5:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  from google\n  <a href=\"http://thestarman.pcministry.com/asm/2bytejumps.htm\" rel=\"noreferrer\">\n   starmans\n  </a>\n  realm\n </p>\n <p>\n  quoting relevant info\n </p>\n <pre><code>These are also known as SHORT Relative Jumps. Programs using only Relative    \nJump  instructions can be relocated anywhere in memory without having to     \nchange the    machine code for the Jumps. The first byte of a SHORT Jump is    \nalways EB and the    second is a relative offset from 00h to 7Fh for Forward    \njumps, and from 80h to    FFh for Reverse (or Backward) jumps. [Note: The    \noffset count always begins at    the byte immediately after the JMP    \ninstruction for any type of Relative Jump!] \n</code></pre>\n <p>\n  so\n  <strong>\n   eb 01 to eb 7f\n  </strong>\n  jumps forward\n  \n\n  <strong>\n   eb fe to eb 80\n  </strong>\n  jumpf backward\n </p>\n <p>\n  so current instruction is at 0x172b066 adding the opcode length 2 the current instruction ends at xxxx68  or the next instruction starts at 0xxxxx68 \n0xf2 == -0xe (read about twos complement notation)\n </p>\n <p>\n  0xxxxx68 - 0xe = 0xxxxx5A\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "blabb",
            "time": "Feb 15, 2018 at 5:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}