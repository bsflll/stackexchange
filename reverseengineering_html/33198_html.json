{
    "title": "Log addresses of every called function in Ollydbg/x64dbg in multi-threaded program",
    "link": "https://reverseengineering.stackexchange.com/questions/33198/log-addresses-of-every-called-function-in-ollydbg-x64dbg-in-multi-threaded-progr",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have 2 programs: one 32bit and the second one 64bit. I use Ollydbg/x64dbg to debug them, respectively. These programs are multi-threaded and I have a difficulty when debugging: when an important function with set breakpoint is called in some other thread, the context changes between threads which makes reverse engineering more difficult. There is also a risk of missing something important going on in some of the other threads as it is \"silently\" proceeded in another thread, not caught by the debugger. I am currently pausing other threads to fix context changes and to focus on one. My question is: is there a way (plugin to ollydbg/x64dbg) or something to log address of every called function in every running thread? Like it's logging the function address upon call and its respecting thread ID?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 0,
    "views": "27",
    "tags": [
        "debugging",
        "ollydbg",
        "x64dbg",
        "thread",
        "plugin"
    ],
    "user": "thelastcure",
    "time": "Sep 2, 2024 at 19:22",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n Probably worth dropping Ollydbg/x64dbg in favor of WinDbg and TTD (Time-Travel Debugging). This way you can just record the period of execution you want to capture, and then identify which thread of execution accesses/tampers with a particular piece of data. If you screw up the address you were trying to break at, you can then go back to your previous anchor point, correct your memory access breakpoints and try again.  However, I think x64dbg has support for tracing..and I'd be surprised if it was limited by number of threads, rather than the sheer performance hit of capturing everything.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}