{
    "title": "Convert MIPS assembly code to C? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3959/convert-mips-assembly-code-to-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions asking for help\n       <b>\n        reverse-engineering a specific system\n       </b>\n       are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2014-03-29 05:07:28Z\">\n        11 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/3959/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  Can someone help me convert the following MIPS code back to C?\n </p>\n <p>\n  Assume that the variables\n  <code>\n   f\n  </code>\n  ,\n  <code>\n   g\n  </code>\n  ,\n  <code>\n   h\n  </code>\n  ,\n  <code>\n   i\n  </code>\n  , and\n  <code>\n   j\n  </code>\n  are assigned to registers\n  <code>\n   $s0\n  </code>\n  ,\n  <code>\n   $s1\n  </code>\n  ,\n  <code>\n   $s2\n  </code>\n  ,\n  <code>\n   $s3\n  </code>\n  , and\n  <code>\n   $s4\n  </code>\n  , respectively. Base address of the arrays\n  <code>\n   A\n  </code>\n  and\n  <code>\n   B\n  </code>\n  are in registers\n  <code>\n   $s6\n  </code>\n  and\n  <code>\n   $s7\n  </code>\n  , respectively.\n </p>\n <pre><code>sll $t0, $s0, 2      # $t0 = f * 4\nadd $t0, $s6, $t0    # $t0 = &A[f]\nsll $t1, $s1, 2      # $t1 = g * 4\nadd $t1, $s7, $t1    # $t1 = &B[g]\nlw $s0, 0($t0)       # f = A[f]\naddi $t2, $t0, 4 \nlw $t0, 0($t2)\nadd $t0, $t0, $s0\nsw $t0, 0($t1)\n</code></pre>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "24k",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "Pete",
    "time": "11 years ago",
    "comments": [
        {
            "user": "avgvstvs",
            "text": "<html><body><span class=\"comment-copy\">\n What have you already come up with?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Seems like your h, i and j aren't used at all.\n </p>\n <p>\n  Here is your code including my comments:\n </p>\n <pre><code>sll $t0, $s0, 2         # $t0 = f * 4\nadd $t0, $s6, $t0       # $t0 = &A[f]\nsll $t1, $s1, 2         # $t1 = g * 4\nadd $t1, $s7, $t1       # $t1 = &B[g]\nlw $s0, 0($t0)          # f = A[f]\naddi $t2, $t0, 4        # $t2=$t0+4 => $t2 points to A[f+1] now\nlw $t0, 0($t2)          # $t0 = A[f+1]\nadd $t0, $t0, $s0       # $t0 = $t0 + $s0  => $t0 is now A[f] + A[f+1]\nsw $t0, 0($t1)          # store the result into B[g]\n</code></pre>\n <p>\n  So the whole snipped could have been\n </p>\n <pre><code>B[g] = A[f] + A[f+1];\n</code></pre>\n <p>\n  in C. Assuming, of course, that A and B are arrays of 4-byte integers.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Mar 25, 2014 at 21:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}