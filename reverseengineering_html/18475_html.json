{
    "title": "Is IDA resolving ELF relocations correctly?",
    "link": "https://reverseengineering.stackexchange.com/questions/18475/is-ida-resolving-elf-relocations-correctly",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While working on this\n  <a href=\"https://transfer.sh/xKTok/rootkit\" rel=\"nofollow noreferrer\">\n   kernel module\n  </a>\n  , I noticed IDA somehow resolves some ELF relocations statically. Consider the symbol\n  <code>\n   sys_renameat\n  </code>\n  , which, according to IDA, resides at\n  <code>\n   0x8000720\n  </code>\n  in\n  <code>\n   .bss\n  </code>\n  segment.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/9EHhS.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/9EHhS.png\"/>\n  </a>\n </p>\n <p>\n  The raw hex bytes corresponding to the\n  <code>\n   mov\n  </code>\n  instruction at\n  <code>\n   0x800328\n  </code>\n  are\n  <code>\n   A3 20 07 00 08\n  </code>\n </p>\n <p>\n  However, looking at bytes at that specific offset with a hex-editor reveals\n  <code>\n   A3 00 00 00 00\n  </code>\n  . Clearly, there is a relocation which IDA is resolving somehow.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/vW1N8.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/vW1N8.png\"/>\n  </a>\n </p>\n <p>\n  <code>\n   readelf -r rootkit\n  </code>\n  confirms this.\n </p>\n <pre><code>Relocation section '.rel.init.text' at offset 0x119c contains 26 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n.\n00000059  00001701 R_386_32          00000000   sys_renameat\n.\n</code></pre>\n <p>\n  The symbol information as returned by\n  <code>\n   readelf -s rootkit\n  </code>\n </p>\n <pre><code>Symbol table '.symtab' contains 44 entries:\nNum:    Value  Size Type    Bind   Vis      Ndx Name\n.\n23: 00000000     4 OBJECT  GLOBAL DEFAULT   15 sys_renameat\n.\n</code></pre>\n <p>\n  However, if I\n  <code>\n   strip\n  </code>\n  the binary, suddenly IDA fails to resolve (\n  <code>\n   mov\n  </code>\n  instruction at\n  <code>\n   0x800328\n  </code>\n  ) the relocations any more.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/K5Bx9.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/K5Bx9.png\"/>\n  </a>\n </p>\n <p>\n  My understanding is, resolving dynamic relocations never depends on symbol information which\n  <code>\n   strip\n  </code>\n  removes. I tried to compute how IDA was computing\n  <code>\n   R_386_32\n  </code>\n  type relocation for\n  <code>\n   sys_renameat\n  </code>\n  according to\n  <a href=\"https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-79797.html\" rel=\"nofollow noreferrer\">\n   ELF specification\n  </a>\n  , but couldn't figure out what's going on.\n </p>\n <p>\n  Is IDA resolving relocation correctly in this case/ If so, can someone please explain this behavior?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "elf"
    ],
    "user": "sherlock",
    "time": "Jun 7, 2018 at 15:05",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi. Two things. Could you please - either in addition or as replacement -copy&paste the\n <i>\n  actual\n </i>\n textual contents of the disassembly instead of the screenshots. And then, what was the output for the various places that ELF has to store symbols\n <i>\n  after\n </i>\n you stripped the binary?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<html><body><span class=\"comment-copy\">\n I don't know if IDA allows us to copy raw disassembly. I have linked the original binary in my post though.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n yep, IDA can easily do that. The point behind this request is that this makes your question easier to index for search engines. They won't recognize keywords from the screenshots.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Linux kernel modules are\n  <strong>\n   not\n  </strong>\n  shared objects and don't use dynamic relocations, although they may look a little similar.\n </p>\n <p>\n  <code>\n   file\n  </code>\n  :\n </p>\n <blockquote>\n  <p>\n   rootkit: ELF 32-bit LSB\n   <strong>\n    relocatable\n   </strong>\n   , Intel 80386, version 1 (SYSV), BuildID[sha1\n  ]=5552f893cf02ce13e9a183af3b6717e884493ead, not stripped\n  </p>\n </blockquote>\n <p>\n  <code>\n   readelf -h\n  </code>\n  :\n </p>\n <blockquote>\n  <p>\n   <code>\n    Type:                              REL (Relocatable file)\n   </code>\n  </p>\n </blockquote>\n <p>\n  So it's a\n  <strong>\n   relocatable object\n  </strong>\n  , and by stripping it you remove information necessary for its functioning.\n </p>\n <p>\n  From the\n  <a href=\"https://www.tldp.org/HOWTO/html_single/Module-HOWTO/\" rel=\"nofollow noreferrer\">\n   Linux Loadable Kernel Module HOWTO\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   How that relocation happens is fundamentally different between Linux\n  2.4 and Linux 2.6. In 2.6,\n   <code>\n    insmod\n   </code>\n   pretty much just passes the verbatim contents of the LKM file (.ko file) to the kernel and\n   <strong>\n    the kernel does the relocation.\n   </strong>\n  </p>\n </blockquote>\n <p>\n  About relocation resolution by IDA:\n </p>\n <p>\n  Since the real address of the symbols is not known until runtime but the user expects to see nice names in the disassembly, IDA's ELF loader creates a fake segment (\"extern\") and fills it with placeholders for the external symbols. The relocatable bytes are then patched to point to those fake symbols.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Jun 7, 2018 at 20:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Does it essentially mean that the address <code>0x080000720</code> (as the destination of <code>mov</code> instruction at <code>0x08000328</code>) I am seeing in the first disassembly is plain wrong, and no way the real one?</span>",
                    "time": null
                },
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Also the symbol <code>sys_renameat</code> lands in <code>.bss</code>, not in <code>.extern</code></span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">well, local symbols are obviously resolved locally.  as for the addresses, “wrong” depends on your point of view. they probably don’t match the real addresses at runtime but the logical connections should be the same.</span>",
                    "time": null
                }
            ]
        }
    ]
}