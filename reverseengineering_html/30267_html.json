{
    "title": "IDA Free: How to patch a memory address",
    "link": "https://reverseengineering.stackexchange.com/questions/30267/ida-free-how-to-patch-a-memory-address",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a disassembly line showing:\n </p>\n <pre><code>lea rcx, Format\n</code></pre>\n <p>\n  In which\n  <code>\n   Format\n  </code>\n  is a memory address named by IDA. The address is at 0x1400132E0 and points to a C-String \"hello, my dear\n\".\n </p>\n <p>\n  What I want to do is to patch the address of\n  <code>\n   Format\n  </code>\n  to 0x1400132E1 so that the string would become \"ello, my dear\n\". However,\n  <strong>\n   Edit->Patch Program->Assembly\n  </strong>\n  does not allow operand such as [0x1400132E1]. What can I do?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "446",
    "tags": [
        "ida"
    ],
    "user": "Nicholas Humphrey",
    "time": "Apr 16, 2022 at 4:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have never used IDA free but the documentation I found is mostly\n  <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/529.shtml\" rel=\"nofollow noreferrer\">\n   pointed\n  </a>\n  towards supporting only IBM PC\n </p>\n <blockquote>\n  <p>\n   Currently, only the IBM PC processors provide an assembler, nonetheless, plugin writers can extend or totally replace the built-in assembler by writing their own.\n  </p>\n </blockquote>\n <p>\n  So your option is only to assemble and patch bytes since IDA Free doesn't support plugins.\n </p>\n <p>\n  Example\n </p>\n <pre><code>.text:000000000000063A                      ; int __cdecl main(int argc, const char **argv, const char **envp)\n.text:000000000000063A                      public main\n.text:000000000000063A                      main proc near\n.text:000000000000063A 55                   push    rbp\n.text:000000000000063B 48 89 E5             mov     rbp, rsp\n.text:000000000000063E 48 8D 3D 9F 00 00 00 lea     rdi, s          ; \"hello, my dear\"\n.text:0000000000000645 E8 C6 FE FF FF       call    _puts           ; Call Procedure\n.text:000000000000064A B8 00 00 00 00       mov     eax, 0\n.text:000000000000064F 5D                   pop     rbp\n.text:0000000000000650 C3                   retn                    ; Return Near from Procedure\n.text:0000000000000650                      main endp\n</code></pre>\n <p>\n  It shows that the actual instruction bytes are\n </p>\n <pre><code>48 8D 3D 9F 00 00 00\n</code></pre>\n <p>\n  which translate to\n </p>\n <pre><code>48 8d 3d 9f 00 00 00     lea    rdi,  [rip+0x9f]\n</code></pre>\n <p>\n  You can then select the instruction you want to edit and then go to Hex-View > Press F2 to edit bytes and change to\n </p>\n <pre><code>48 8d 3d a0 00 00 00     lea    rdi,  [rip+0xa0]\n</code></pre>\n <p>\n  Press F2 again to apply changes to db which would take disassembly to\n </p>\n <pre><code>.text:000000000000063E 48 8D 3D A0 00 00 00 lea     rdi, s+1        ; \"ello, my dear\"\n</code></pre>\n <p>\n  Then Edit>Patch Program> Apply patches to input file to push changes back to original file.\n </p>\n <p>\n  TLDR : Assemble using other tool and change bytes in IDA Free. I use\n  <a href=\"https://book.rada.re/tools/rasm2/assemble.html\" rel=\"nofollow noreferrer\">\n   rasm\n  </a>\n  or\n  <a href=\"https://github.com/Gallopsled/pwntools\" rel=\"nofollow noreferrer\">\n   pwntools asm\n  </a>\n  for quick testing  otherwise\n  <a href=\"https://www.keystone-engine.org/\" rel=\"nofollow noreferrer\">\n   keystone\n  </a>\n </p>\n <pre><code>[/tmp] rasm2 -a x86 -b 64 \"lea rdi, [rip+0xa0]\"\n488d3da0000000\n[/tmp] asm -c amd64 \"lea rdi, [rip+0xa0]\"\n488d3da0000000\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Apr 16, 2022 at 11:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nicholas Humphrey",
                    "text": "<span class=\"comment-copy\">Thanks! I think I need to learn how to translate opcode to assembly language, but this is a good start.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <kbd>\n   Edit\n  </kbd>\n  ->\n  <kbd>\n   Patch Program\n  </kbd>\n  ->\n  <kbd>\n   Assembly\n  </kbd>\n  is not the best choice because it does not work for all processors and all instructions.\nI agree with\n  <code>\n   sudhackar\n  </code>\n  , but you can also use\n  <kbd>\n   Edit\n  </kbd>\n  ->\n  <kbd>\n   Patch Program\n  </kbd>\n  ->\n  <kbd>\n   Change byte...\n  </kbd>\n  to change the relative address (in your case it will 4th byte).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Apr 21, 2022 at 21:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}