{
    "title": "exploit - Why not execute shellcode with the inline assembler?",
    "link": "https://reverseengineering.stackexchange.com/questions/6289/exploit-why-not-execute-shellcode-with-the-inline-assembler",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The typical structure of executing shell code is the following-: (The code snippet is taken from\n  <a href=\"http://lucifer.phiral.net/shellcode.htm\" rel=\"nofollow\">\n   here\n  </a>\n  )\n </p>\n <pre><code>char shellcode[] = \"\";             /* global array */\nint\nmain (int argc, char **argv)\n{\n        int (*ret)();              /* ret is a function pointer */\n        ret = (int(*)())shellcode; /* ret points to our shellcode */\n                                   /* shellcode is type caste as a function */\n        (int)(*ret)();             /* execute, as a function, shellcode[] */\n        exit(0);                   /* exit() */\n}\n</code></pre>\n <p>\n  Why not use\n  <a href=\"http://en.wikipedia.org/wiki/Inline_assembler\" rel=\"nofollow\">\n   asm(inline assembler)\n  </a>\n  to execute shellcode ? It is then much more simpler than doing pointer acrobatics such as converting an array to a function pointer and then executing that array as a function ?\n </p>\n <p>\n  Is there any drawbacks of using the assembler ? And are there any particular advantage of using an array to execute shell code ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "c",
        "exploit",
        "shellcode"
    ],
    "user": "Sreyan",
    "time": "Sep 23, 2014 at 9:42",
    "comments": [
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<html><body><span class=\"comment-copy\">\n Inline assembly is compiler dependent and even you fit for every syntax with macros, it may behave different because optimization. Using this way is more easy and predictable.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This\n  <em>\n   execute-from-array\n  </em>\n  method is used to test shellcodes in bytes format, which is often the way shellcodes are provided (see\n  <a href=\"http://shell-storm.org/shellcode/\" rel=\"nofollow\">\n   http://shell-storm.org/shellcode/\n  </a>\n  ). It also emulates the usual way shellcodes are being used in an exploit.\n </p>\n <p>\n  Inline assembly is compiler dependent and shellcode developers might use assemblers directly such as nasm or MASM. However if you are developing your own shellcode there is nothing stopping you from using inline assembly, just keep in mind that the shellcode must be position independent.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "ekse",
            "time": "Sep 23, 2014 at 17:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sreyan",
                    "text": "<span class=\"comment-copy\">Why is it necessary to have the array declared as global ? Will any harm come if it is declared locally in <code>main()</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The article you quote is about writing new shellcode to be used in exploits later. The specific snippet is about testing the shellcode. It does not really matter much how you jump to it in your test rig.\n </p>\n <p>\n  In addition, the method from the article lets you test binary shellcode, which is usually all you have when creating an exploit payload.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Vitaly Osipov",
            "time": "Sep 24, 2014 at 1:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Because, this technique would require to rewrite the code of the program...\n </p>\n <p>\n  And, most of the time, you cannot rewrite the\n  <code>\n   .text\n  </code>\n  section... You only have access to the data stored in the stack and/or the heap. That is why we use ROP.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "perror",
            "time": "Sep 23, 2014 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sreyan",
                    "text": "<span class=\"comment-copy\">why is it so important to execute our code from the .TEXT section? What harm will come if we execute it from the .CODE section ?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\"><code>.text == .code</code></span>",
                    "time": null
                },
                {
                    "user": "Sreyan",
                    "text": "<span class=\"comment-copy\">In real life do all shellcodes need to be executed from the <code>.TEXT</code> section ? What is the matter if I patch the <code>.CODE</code> section of an executable and place my shellcode there ? Does that destroy position independency ? Why use ROP in the first place ?</span>",
                    "time": null
                }
            ]
        }
    ]
}