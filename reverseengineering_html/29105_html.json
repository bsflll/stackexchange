{
    "title": "determine proprietary 16-bit floating-point format",
    "link": "https://reverseengineering.stackexchange.com/questions/29105/determine-proprietary-16-bit-floating-point-format",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   Background / Introducion\n  </strong>\n </p>\n <p>\n  CAN message Mercedes-Benz, cannot determine 16-bit data type for temperature.\n </p>\n <pre><code>7E 00 32 01 37 00\n</code></pre>\n <p>\n  According to\n  <a href=\"https://github.com/rnd-ash/W203-canbus/blob/master/DAT_TRANSLATOR/DECODED/w211_w219%20CAN%20B%20ENGLISH.txt#L814\" rel=\"nofollow noreferrer\">\n   @rnd-ash\n  </a>\n  (who has reverse engineered ACTIA Basic XS Monitor Software) message is structured data type composed of four values. Now we have bit length + offset but unfortunately data type is unknown.\n </p>\n <pre><code>ECU NAME: SAM_V_A2, ID: 0x0017. MSG COUNT: 4\n    MSG NAME: T_AUSSEN_B - (°C) (° C) Outside air temperature, OFFSET 0, LENGTH 8\n    MSG NAME: P_KAELTE - (bar) (Bar) pressure refrigerant R134a, OFFSET 8, LENGTH 16\n    MSG NAME: T_KAELTE - (°C) (° C) temperature refrigerant R134a, OFFSET 24, LENGTH 16\n    MSG NAME: I_KOMP - (mA) (MA) current compressor main control valve, OFFSET 40, LENGTH 8\n</code></pre>\n <p>\n  <a href=\"https://stackoverflow.com/users/9178992/projectphysx\">\n   @ProjectPhysX\n  </a>\n  suggested it is probably 8/16-bit integer and big endian, so I created that struct. Figured out how to calculate value 0, 1, 3 but unfortunately struggling with value 2\n </p>\n <pre><code>typedef struct SAM_V_A2_t {\n  uint8_t T_AUSSEN_B;\n  uint16_t P_KAELTE;\n  uint16_t T_KAELTE;\n  uint8_t I_KOMP;\n} SAM_V_A2_t;\n</code></pre>\n <p>\n  Based on that pictures I can confirm the calculation except for T_KAELTE, which is target of this question (see below).\n </p>\n <pre><code>std::cout << \"T_AUSSEN_B = \" << +( (SAM_V_A2.T_AUSSEN_B - 80) / 2 ) << \" (°C) Outside air temperature\"               << std::endl;\nstd::cout << \"P_KAELTE = \"   << +( SAM_V_A2.P_KAELTE / 10 )         << \" (bar) pressure refrigerant R134a\"           << std::endl;\nstd::cout << \"T_KAELTE = \"   << +( (SAM_V_A2.T_KAELTE - 80) / 2 )   << \" (°C) temperature refrigerant R134a\"         << std::endl;\nstd::cout << \"I_KOMP = \"     << +( SAM_V_A2.I_KOMP * 10 )           << \" (mA) current compressor main control valve\" << std::endl;\n</code></pre>\n <p>\n  <a href=\"https://i.sstatic.net/O2YqU.jpg\" rel=\"nofollow noreferrer\">\n   <img height=\"120\" src=\"https://i.sstatic.net/O2YqU.jpg\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/QlCge.jpg\" rel=\"nofollow noreferrer\">\n   <img height=\"120\" src=\"https://i.sstatic.net/QlCge.jpg\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/069Ye.jpg\" rel=\"nofollow noreferrer\">\n   <img height=\"120\" src=\"https://i.sstatic.net/069Ye.jpg\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/anx9F.jpg\" rel=\"nofollow noreferrer\">\n   <img height=\"120\" src=\"https://i.sstatic.net/anx9F.jpg\"/>\n  </a>\n </p>\n <pre><code>  7E             00 32               01 37             00\n\n01111110   00000000 00110010   00000001 00110111   00000000\n\n 126               50                 311               0\n\n 126 - 80 / 2      50 / 10             ?                0 * 10\n\n  23°C              5 bar              ? °C             0 mA\n</code></pre>\n <hr/>\n <p>\n  <strong>\n   Question\n  </strong>\n </p>\n <p>\n  My last hope was it could be\n  <code>\n   binary16\n  </code>\n  or\n  <code>\n   bfloat16\n  </code>\n  but no luck. Maybe it is some proprietary 16-bit floating-point format with different bits for exponent / mantissa\n </p>\n <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/IEEE_754r_Half_Floating_Point_Format.svg/175px-IEEE_754r_Half_Floating_Point_Format.svg.png\"/>\n <p>\n  Maybe we can brute force all permutations for exponent / mantissa to determine data type.\n  \n\n  <strong>\n   Question:\n  </strong>\n  How can we decode\n  <code>\n   01 37\n  </code>\n  so it gives expected value ~ 21.10 °C\n </p>\n <p>\n  (more sample data\n  <a href=\"https://forum.pjrc.com/threads/56035-FlexCAN_T4-FlexCAN-for-Teensy-4?p=284462&viewfull=1#post284462\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  )\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "137",
    "tags": [
        "c++",
        "file-format",
        "serial-communication",
        "float",
        "type-reconstruction"
    ],
    "user": "alecxs",
    "time": "Aug 7, 2021 at 12:47",
    "comments": [
        {
            "user": "alecxs",
            "text": "<html><body><span class=\"comment-copy\">\n @ProjectPhysX temperature T_KAELTE must be sensor B12/2 on picture 3 and i believe hardware is in voltage\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "alecxs",
            "text": "<html><body><span class=\"comment-copy\">\n this is the hardware\n <a href=\"http://www.hehlhans.de/sl55amg-sam-1.htm#b21\" rel=\"nofollow noreferrer\">\n  hehlhans.de/sl55amg-sam-1.htm#b21\n </a>\n and the sensor\n <a href=\"https://www.google.com/search?q=A2038300372\" rel=\"nofollow noreferrer\">\n  google.com/search?q=A2038300372\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "alecxs",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"https://pdf1.alldatasheet.com/pdfjsview/web/viewer.html?file=//pdf1.alldatasheet.com/datasheet-pdf/view/4191/MOTOROLA/MC68HC908AZ60/+3182uplRMROLDdRHw.OlpzIMnK.+/datasheet.pdf#G26.429033\" rel=\"nofollow noreferrer\">\n  datasheet\n </a>\n seems not helpful (DATA SEGMENT REGISTER 3 + 4 looks like\n <a href=\"https://pastebin.com/jZ6Xzrsx\" rel=\"nofollow noreferrer\">\n  this\n </a>\n )\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "alecxs",
            "text": "<html><body><span class=\"comment-copy\">\n think i got it. it is (x - 100) / 10 have confirmed with other records 0x01C4 = 35.2 °C, 0x01D6 = 37.0 °C\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Maybe it is the temperature in Kelvin: 311 - 80/2 = 217K = -2.15°C\n </p>\n <p>\n  Or the offset is different than 80/2. A 16-bit floating-poitn format, especially a different one from IEEE-754 is highly unlikely. Such measurement chips are not more but simple ADCs, they lack the capabilities to convert their reading to floating-point.\n </p>\n <p>\n  To be sure, you would have to take several readings. If you expect that temperature fluctuates by a few °C between measurements, then in\n  <code>\n   00000001 00110111\n  </code>\n  only the last few bits should change.\n </p>\n <p>\n  If you have access to the hardware, read the serial number off the chip package and look it up, maybe you find the data sheet that documents the data format of measurements.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "ProjectPhysX",
            "time": "Aug 7, 2021 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}