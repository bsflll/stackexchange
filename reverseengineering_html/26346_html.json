{
    "title": "Analyse structure from memory dump",
    "link": "https://reverseengineering.stackexchange.com/questions/26346/analyse-structure-from-memory-dump",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to extract master key from OpenSSL 1.0.2l (statically linked without debug symbols).\n </p>\n <p>\n  I'm using x64dbg, I was able to locate\n  <code>\n   int SSL_connect(SSL *s)\n  </code>\n  method, so I have a breakpoint there (the breakpoint gets hit). In the result, I have a pointer to\n  <code>\n   SSL\n  </code>\n  parameter that contains\n  <code>\n   SSL_SESSION *session\n  </code>\n  member, in which the master key is located.\n </p>\n <p>\n  The\n  <code>\n   SSL\n  </code>\n  pointer points me the following place in dump:\n  <a href=\"https://i.sstatic.net/KkgLe.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/KkgLe.png\"/>\n  </a>\n </p>\n <p>\n  Is there any easy way to find my poiner to\n  <code>\n   SSL_SESSION *session\n  </code>\n  member here? Any other tool suggestions?\n </p>\n <p>\n  Useful links to OpenSSL source code:\n </p>\n <p>\n  <a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl_lib.c#L1002\" rel=\"nofollow noreferrer\">\n   <code>\n    int SSL_connect(SSL *s)\n   </code>\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl.h#L1422\" rel=\"nofollow noreferrer\">\n   <code>\n    SSL\n   </code>\n   structure\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl.h#L1539\" rel=\"nofollow noreferrer\">\n   <code>\n    SSL_SESSION *session\n   </code>\n   member in\n   <code>\n    SSL\n   </code>\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl.h#L505\" rel=\"nofollow noreferrer\">\n   <code>\n    SSL_SESSION\n   </code>\n   structure\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "778",
    "tags": [
        "debugging",
        "memory-dump",
        "openssl"
    ],
    "user": "Iks Ski",
    "time": "Nov 22, 2020 at 14:04",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n Try looking at pykd. See\n <a href=\"https://githomelab.ru/pykd/pykd/-/wikis/API-Reference#getTypeFromSource\" rel=\"nofollow noreferrer\">\n  this\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n @sudhacker does pykd work on x64dbg  i wasn't aware of that\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<html><body><span class=\"comment-copy\">\n @blabb OP was looking for suggestions to other tools too.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would use the x64dbg methods to add a custom type:\n </p>\n <ol>\n  <li>\n   You can do this using a combination of these\n   <a href=\"https://help.x64dbg.com/en/latest/commands/types/index.html\" rel=\"nofollow noreferrer\">\n    commands\n   </a>\n   :\n  </li>\n </ol>\n <ul>\n  <li>\n   DataUnknown\n  </li>\n  <li>\n   DataByte/db\n  </li>\n  <li>\n   DataWord/dw\n  </li>\n  <li>\n   DataDword/dw\n  </li>\n  <li>\n   DataFword\n  </li>\n  <li>\n   DataQword/dq\n  </li>\n  <li>\n   DataTbyte\n  </li>\n  <li>\n   DataOwordD\n  </li>\n  <li>\n   DataMmword\n  </li>\n  <li>\n   DataXmmword\n  </li>\n  <li>\n   DataYmmword\n  </li>\n  <li>\n   DataFloat/DataReal4/df\n  </li>\n  <li>\n   DataDouble/DataReal8\n  </li>\n  <li>\n   DataLongdouble/DataReal10\n  </li>\n  <li>\n   DataAscii/da\n  </li>\n  <li>\n   DataUnicode/du\n  </li>\n  <li>\n   DataCode/dc\n  </li>\n  <li>\n   DataJunk\n  </li>\n  <li>\n   DataMiddle\n  </li>\n  <li>\n   AddType\n  </li>\n  <li>\n   AddStruct\n  </li>\n  <li>\n   AddUnion\n  </li>\n  <li>\n   AddMember\n  </li>\n  <li>\n   AppendMember\n  </li>\n  <li>\n   AddFunction\n  </li>\n  <li>\n   AddArg\n  </li>\n  <li>\n   AppendArg\n  </li>\n  <li>\n   SizeofType\n  </li>\n  <li>\n   VisitType\n  </li>\n  <li>\n   ClearTypes\n  </li>\n  <li>\n   RemoveType\n  </li>\n  <li>\n   EnumTypes\n  </li>\n  <li>\n   LoadTypes\n  </li>\n  <li>\n   ParseTypes\n  </li>\n </ul>\n <ol start=\"2\">\n  <li>\n   Create a type definition in types\n   <a href=\"https://gist.github.com/mrexodia/e949ab26d5986a5fc1fa4944ac68147a#file-types-json\" rel=\"nofollow noreferrer\">\n    JSON\n   </a>\n   example:\n  </li>\n </ol>\n <p>\n  {\n\"types\": [\n{\n\"type\": \"unsigned int\",\n\"name\": \"DWORD\"\n},\n{\n\"type\": \"_FILETIME*\",\n\"name\": \"LPFILETIME\"\n}\n],\n\"structs\": [\n{\n\"name\": \"ST\",\n\"members\": [\n{\n\"type\": \"char\",\n\"name\": \"a\",\n\"arrsize\": 0,\n\"offset\": -1\n},\n{\n\"type\": \"int\",\n\"name\": \"y\",\n\"arrsize\": 0,\n\"offset\": -1\n}\n]\n},\n{\n\"name\": \"_FILETIME\",\n\"members\": [\n{\n\"type\": \"DWORD\",\n\"name\": \"dwLoDateTime\"\n},\n{\n\"type\": \"DWORD\",\n\"name\": \"dwHighDateTime\"\n}\n]\n},\n{\n\"name\": \"BLUB\",\n\"members\": [\n{\n\"type\": \"short\",\n\"name\": \"c\"\n},\n{\n\"type\": \"int\",\n\"name\": \"d\",\n\"arrsize\": 2\n}\n]\n},\n{\n\"name\": \"TEST\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"a\"\n},\n{\n\"type\": \"char\",\n\"name\": \"b\"\n},\n{\n\"type\": \"BLUB\",\n\"name\": \"e\"\n},\n{\n\"type\": \"int\",\n\"name\": \"f\"\n}\n]\n},\n{\n\"name\": \"POINTEE\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"n\"\n},\n{\n\"type\": \"TEST\",\n\"name\": \"t\"\n}\n]\n},\n{\n\"name\": \"POINTER\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"x\"\n},\n{\n\"type\": \"POINTEE*\",\n\"name\": \"next\"\n},\n{\n\"type\": \"int\",\n\"name\": \"y\"\n}\n]\n},\n{\n\"name\": \"LIST_ENTRY\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"x\"\n},\n{\n\"type\": \"LIST_ENTRY*\",\n\"name\": \"next\"\n},\n{\n\"type\": \"int\",\n\"name\": \"y\"\n}\n]\n},\n{\n\"name\": \"STRINGTEST\",\n\"members\": [\n{\n\"type\": \"const char*\",\n\"name\": \"str\"\n},\n{\n\"type\": \"const wchar_t*\",\n\"name\": \"wstr\"\n}\n]\n}\n],\n\"unions\": [\n{\n\"name\": \"UT\",\n\"members\": [\n{\n\"type\": \"char\",\n\"name\": \"a\"\n},\n{\n\"type\": \"short\",\n\"name\": \"b\"\n},\n{\n\"type\": \"int\",\n\"name\": \"c\"\n},\n{\n\"type\": \"long long\",\n\"name\": \"d\"\n}\n]\n}\n],\n\"functions\": [\n{\n\"rettype\": \"int\",\n\"callconv\": \"cdecl\",\n\"noreturn\": false,\n\"name\": \"strcasecmp\",\n\"arguments\": [\n{\n\"type\": \"const char*\",\n\"name\": \"s1\"\n},\n{\n\"type\": \"const char*\",\n\"name\": \"s2\"\n}\n]\n}\n]\n}\n </p>\n <ol start=\"3\">\n  <li>\n   Load a\n   <a href=\"https://gist.github.com/mrexodia/e949ab26d5986a5fc1fa4944ac68147a#file-context32-h\" rel=\"nofollow noreferrer\">\n    simple C header definition\n   </a>\n   of the type\n  </li>\n </ol>\n <p>\n  Once a type is imported you can use\n  <a href=\"https://help.x64dbg.com/en/latest/commands/types/VisitType.html\" rel=\"nofollow noreferrer\">\n   VisitType\n  </a>\n  cmd to view it.\nAdditional info:\n  <a href=\"https://x64dbg.com/blog/2016/12/04/type-system.html\" rel=\"nofollow noreferrer\">\n   x64dbg type system\n  </a>\n  <a href=\"https://x64dbg.com/blog/2016/11/27/weekly-digest-14.html#types\" rel=\"nofollow noreferrer\">\n   Weekly Digest 14 - Types\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "chentiangemalc",
            "time": "Nov 22, 2020 at 23:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}