{
    "title": "Need help with a USB gaming mouse",
    "link": "https://reverseengineering.stackexchange.com/questions/16392/need-help-with-a-usb-gaming-mouse",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a Chinese USB gaming mouse (\n  <em>\n   04d9:a070\n  </em>\n  ) which has 4 color modes and 4 light levels. I know for a fact that this mouse is capable for showing at least 5 different color so it must be an RGB led (4 legs). The software is the worst I've ever seen and it's incredibly hard to change the color, brightness and mode so it works and doesn't just turn off. Now I'm planning to make my own control software (for Linux first).\n </p>\n <p>\n  I have started with a simple guide \"Reverse Engineering a USB mouse (Updated 3rd May 2017)\" at Bytepunk (can't post a link but Google or DuckDuckGo should find that guide)\n </p>\n <p>\n  I have already sniffed most of the things I need. I used USBlyzer on Windows with the awful control software and got a few hex strings and figured out how to change the color, brightness and mode in the hex strings.\nI pasted the data I discovered\n  <a href=\"https://pastebin.com/UjdPG7t9\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  (Pastebin)\n </p>\n <pre><code>Clicking turn on lights from the Windows control software\n\nout: 07 07 01 00 00 00 00 00 <-- Is this a \"Commands coming in call\"?\nout: 07 09 01 02 00 00 00 00 <-- 07 09 01 0X where X is the color\nout: 07 0C 01 04 00 00 00 00 <-- 07 0Y 01 0Z where Y is the brightness and Z is the mode \nout: 07 13 04 00 00 00 00 00 <-- Is this a \"Commands sent call\"?\n\nX - OFF: 0 RED: 1 BLUE: 2 GREEN: 3 PINK: 4\nY - LOW: B MED: 9 HIGH: C \nZ - STATIC: 1 SLOW PULSE: 2 MED PULSE: 3 FAST PULSE: 4\n</code></pre>\n <p>\n  My problem is that when I try to \"write\" anything to the device it just hangs and I get a \"[Errno2] Entity not found\" error and the mouse needs to be replugged in order to make it work again. It doesn't \"disconnect\" but it stays in\n  <code>\n   lsusb\n  </code>\n  and nothing special shows up in\n  <code>\n   dmesg\n  </code>\n  .\n </p>\n <p>\n  I pasted my modified python script to\n  <a href=\"https://pastebin.com/GXSYZdPD\" rel=\"nofollow noreferrer\">\n   Pastebin\n  </a>\n </p>\n <p>\n  I also applied a custom\n  <em>\n   udev rule\n  </em>\n </p>\n <p>\n  <code>\n   SUBSYSTEM==\"usb\", ATTR{idVendor}==\"04d9\", ATTR{idProduct}==\"a070\", GROUP:=\"plugdev\", MODE=\"0666\"\n  </code>\n </p>\n <p>\n  I'm new to serial communications and reverse engineering so I don't know what to search for.\nI think I can post pictures and more data from the USBlyzer in the comments. This is my first post here so I don't have the reputation to give more links.\n </p>\n <p>\n  Greetings, Santeri\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "linux",
        "serial-communication",
        "usb"
    ],
    "user": "user1475122",
    "time": "Sep 24, 2017 at 7:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  my understanding of\n  <strong>\n   USB\n  </strong>\n  is very low at best (even if I do develop some simple\n  <strong>\n   USB\n  </strong>\n  devices for a living) so read this with major prejudice...\n </p>\n <ol>\n  <li>\n   <p>\n    <strong>\n     Your driver class and configuration must match the USB (mouse) device\n    </strong>\n   </p>\n   <p>\n    I do not know how your\n    <strong>\n     USB\n    </strong>\n    mouse is programmed but interface must be the same (\n    <strong>\n     CDC\n    </strong>\n    class can have more interfaces) and if not match then the\n    <strong>\n     USB\n    </strong>\n    will not work properly.\n   </p>\n   <p>\n    So you need to know which pipes are used and which are input and output, if they use bulk or interrupt transfers.\n   </p>\n   <p>\n    My bet is your mouse will be a\n    <strong>\n     HID\n    </strong>\n    class with use of only interrupt transfers. But if it is some crazy multimedia ergonomic multi feature sillyness it might be even\n    <strong>\n     CDC\n    </strong>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    <strong>\n     Transfer of data\n    </strong>\n   </p>\n   <p>\n    Let assume you got\n    <strong>\n     HID\n    </strong>\n    so the device is communicating by control pipe0 and or interrupt pipes(1,2...).\n   </p>\n   <p>\n    Now depending on the mouse firmware it might need a specific order of read/write commands otherwise the firmware will freeze or hang up till timeout.\n   </p>\n   <p>\n    For example some commands do not return any data and can be send at any time ...\n   </p>\n   <p>\n    Some commands return data in specific pipe and if not read back by host in time the firmware can crash/freeze.\n   </p>\n   <p>\n    Another problem the mouse might be configurable and requesting some initialization sequence of codes/commands determining the mouse purpose/specs/whatever. Again if the firmware expects that first, sending any other command can freeze your mouse.\n   </p>\n   <p>\n    Also some firmwares expect commands with timing and sending too often or too rarely is wrong in such case.\n   </p>\n   <p>\n    Your sniffing data does not take into account any of this. Try to sniff also the other pipes (maybe with time stamps) and log all to something like this:\n   </p>\n   <ul>\n    <li>\n     <a href=\"https://reverseengineering.stackexchange.com/a/9381/4709\">\n      Putting an application in between client and server\n     </a>\n    </li>\n   </ul>\n   <p>\n    Once done you should see what the device is sending back. It is important to see how many bytes an in what pipe. Then you can update your script and after you send your command read appropriate number of bytes back to host so your firmware on the mouse will not freeze up.\n   </p>\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Spektre",
            "time": "Sep 24, 2017 at 7:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1475122",
                    "text": "<span class=\"comment-copy\">1. pretty much solved my problem. I had the wrong <i>bmRequestType</i> value. I'm not sure why but I got an invalid value from <i>USBlyzer</i>. I used <i>Wireshark</i> this time and got the correct value (0x21). Now I'm able to control the LEDs and other settings. Thank you for the explanation!</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@user1475122 glad to be of help.</span>",
                    "time": null
                }
            ]
        }
    ]
}