{
    "title": "What does _acmdln_dll?",
    "link": "https://reverseengineering.stackexchange.com/questions/4400/what-does-acmdln-dll",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Does somebody knows what\n  <code>\n   _acmdln_dll\n  </code>\n  is ? I could not find any useful documentation about that.\n </p>\n <p>\n  I am asking because I have the following line in the assembly which I try to analyze:\n </p>\n <pre><code> MOV EAX, DWORD PTR DS : [_acmdln_dll]\n</code></pre>\n <p>\n  After that line I have in register\n  <code>\n   EAX\n  </code>\n  the path of the current process. So my assumption is now the\n  <code>\n   _acmdln_dll\n  </code>\n  stores somehow the path as string sequence.\nIs that true ?\n </p>\n <p>\n  Can someone confirm that or does someone know more informations about\n  <code>\n   _acmdln_dll\n  </code>\n  ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "683",
    "tags": [
        "disassembly",
        "windows",
        "x86"
    ],
    "user": "user3097712",
    "time": "May 22, 2014 at 10:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These are global variables provided by the Microsoft run time library. Here is an excerpt of\n  <em>\n   <a href=\"http://msdn.microsoft.com/en-us/library/ff770586.aspx\" rel=\"nofollow noreferrer\">\n    MSDN\n   </a>\n  </em>\n  on-line documentation speaking about the\n  <code>\n   _acmdln\n  </code>\n  variable:\n </p>\n <blockquote>\n  <p>\n   <strong>\n    <code>\n     _acmdln\n    </code>\n   </strong>\n   ,\n   <code>\n    _tcmdln\n   </code>\n   ,\n   <code>\n    _wcmdln\n   </code>\n  </p>\n  <p>\n   <strong>\n    These variables store the complete command line.\n    <code>\n     _acmdln\n    </code>\n    stores the data as a character string\n   </strong>\n   .\n   <code>\n    _wcmdln\n   </code>\n   stores the data as a wide character string.\n   <code>\n    _tcmdln\n   </code>\n   can be defined as either\n   <code>\n    _acmdln\n   </code>\n   or\n   <code>\n    _wcmdln\n   </code>\n   , depending on which is appropriate.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <strong>\n   well after rereading the original question it appears both my answer\n   \n\n   and the answer i followed up do not give an answer to the original question\n   \n\n   original question asks about acmdln_dll which is nowhere to be found in vs crt\n   \n\n   i leave the answer as it is assuming the suffix __dll to be in code that is not native ms like from reactos here\n  </strong>\n </p>\n <p>\n  <a href=\"http://code.google.com/p/reactos-mirror/source/browse/trunk/reactos/lib/crtdll/misc/GetArgs.c?spec=svn271&r=271\" rel=\"nofollow\">\n   http://code.google.com/p/reactos-mirror/source/browse/trunk/reactos/lib/crtdll/misc/GetArgs.c?spec=svn271&r=271\n  </a>\n </p>\n <p>\n  <strong>\n   the answer below is pertinent to _acmdln without the suffix _dll see edit 3 also\n  </strong>\n </p>\n <p>\n  the\n  <code>\n   complete source code\n  </code>\n  is available to you for\n  <code>\n   acmdln\n  </code>\n  if you have installed even the\n  <code>\n   express version of visual studio\n  </code>\n  .\n </p>\n <p>\n  <code>\n   compile a simple hello world with debug info\n  </code>\n  <strong>\n   /Zi\n  </strong>\n  and view the source code as to what it is\n </p>\n <p>\n  source file in crt directory of visual studio\n </p>\n <pre><code>DS:[00408018]=7C812FBD (kernel32.GetCommandLineA)\nJump from __tmainCRTStartup+9B\ncrt0.c:252.  _tcmdln = (_TSCHAR *)GetCommandLineT();\n</code></pre>\n <p>\n  here is a relevent disassembly\nnotice the result of GetCommandline being moved to acmdln a global\n </p>\n <pre><code>/*\n * command line, environment, and a few other globals\n */\n\n    #ifdef WPRFLAG\n    wchar_t *_wcmdln;           /* points to wide command line */\n    #else  /* WPRFLAG */\n    char *_acmdln;              /* points to command line */\n    #endif  /* WPRFLAG */\n\n    char *_aenvptr = NULL;      /* points to environment block */\n    wchar_t *_wenvptr = NULL;   /* points to wide environment block */\n</code></pre>\n <p>\n  disassembly\n </p>\n <pre><code>004014D9           CALL    newheapt._amsg_exit\n004014DE           POP     ECX\n004014DF           CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetCommandLineA>]      ; _tcmdln = (_TSCHAR *)GetCommandLineT();\n004014E5           MOV     DWORD PTR DS:[_acmdln], EAX\n004014EA           CALL    newheapt.__crtGetEnvironmentStringsA                 ; _tenvptr = (_TSCHAR *)GetEnvironmentStringsT();\n004014EF           MOV     DWORD PTR DS:[_aenvptr], EAX\n004014F4           CALL    newheapt._setargv                                    ; if ( _tsetargv() < 0 )\n004014F9           TEST    EAX, EAX\n004014FB           JNS     SHORT newheapt.00401505\n004014FD           PUSH    8                                                    ; _amsg_exit(_RT_SPACEARG);\n004014FF           CALL    newheapt._amsg_exit\n00401504           POP     ECX\n00401505           CALL    newheapt._setenvp                                    ; if ( _tsetenvp() < 0 )\n0040150A           TEST    EAX, EAX\n0040150C           JNS     SHORT newheapt.00401516\n0040150E           PUSH    9                                                    ; _amsg_exit(_RT_SPACEENV);\n</code></pre>\n <p>\n  <strong>\n   edit 3\n  </strong>\n </p>\n <p>\n  from a general search it seems that this is defined in crtdll.dll\n </p>\n <pre><code>C:\\WINDOWS\\system32>grep -rs _acmdln_dll *\nBinary file crtdll.dll matches\nBinary file dllcache/crtdll.dll matches\n^C\nC:\\WINDOWS\\system32>\n</code></pre>\n <p>\n  loading the dll in ollydbg _acmdln_dll is exactly same as _acmdln\n </p>\n <pre><code>73D91D02                   |> \\FF15 4410>CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetCommandLineA>]      ; [GetCommandLineA\n73D91D08                   |.  A3 CC3EDB>MOV     DWORD PTR DS:[_acmdln_dll], EAX\n73D91D0D                   |.  FF15 4010>CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetEnvironmentStrings>>; [GetEnvironmentStrings\n73D91D13                   |.  A3 D03EDB>MOV     DWORD PTR DS:[73DB3ED0], EAX\n73D91D18                   |.  FF15 0411>CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetVersion>]           ;  kernel32.GetVersion\n</code></pre>\n <p>\n  and this crtdll.dll seems to be from an older windows sdk a brief google yields one page which alludes crtdll.lib belonging to windows sdk 3.5 era\n </p>\n <p>\n  <a href=\"http://support.microsoft.com/kb/94248\" rel=\"nofollow\">\n   http://support.microsoft.com/kb/94248\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "May 22, 2014 at 11:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}