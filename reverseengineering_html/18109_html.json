{
    "title": "ELF .text infection test",
    "link": "https://reverseengineering.stackexchange.com/questions/18109/elf-text-infection-test",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to implement an example of an ELF .text infection as described in \"Learning Linux Binary Analysis\". I'm currently having a problem where I successfully injected my data into the .text section, readelf displays no errors but the program terminates during startup.\n </p>\n <p>\n  My process so far is:\n </p>\n <ol>\n  <li>\n   Increased sh_size of the .text section header by the size of the data I want to inject.\n  </li>\n  <li>\n   Shifted all sections after the .text section by the size of the injected data (Modifying sh_offset and sh_addr in section headers).\n  </li>\n  <li>\n   Find the program header where the .text section resides by checking p_type, p_flags, and p_offset; then increasing p_filesz and p_memsz by the size of injected data.\n  </li>\n  <li>\n   For all other program headers afterwards, add the size of the injected data to p_offset.\n  </li>\n </ol>\n <p>\n  The entry point to the file has not been modified.\n </p>\n <p>\n  When I try to debug the resulting file in radare2, it outputs:\n </p>\n <pre><code>[0x7fd315665007]> aa\n[Cannot find function 'entry0' at 0xffffffffff600530(aa)\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x7fd315665007]> \n</code></pre>\n <p>\n  If I list the number of functions I see a lot are missing:\n </p>\n <pre><code>[0x7f05c7bff007]> afl\n0xffffffffff600000    1 10           sym.imp..6\n0xffffffffff600800    1 10           fcn.ffffffffff600800\n[0x7f05c7bff007]> \n</code></pre>\n <p>\n  Compare to the original file:\n </p>\n <pre><code>[0x7f3700c6dea0]> afl\n0x55daca36a000    3 73   -> 75   sym.imp.__libc_start_main\n0x55daca36a4e8    3 23           sym._init\n0x55daca36a510    1 6            sym.imp.puts\n0x55daca36a520    1 6            fcn.55daca36a520\n0x55daca36a530    1 43           entry0\n0x55daca36a560    4 50   -> 40   sym.deregister_tm_clones\n0x55daca36a5a0    4 66   -> 57   sym.register_tm_clones\n0x55daca36a5f0    4 49           sym.__do_global_dtors_aux\n0x55daca36a630    1 10           entry1.init\n0x55daca36a63a    1 34           sym.main\n0x55daca36a660    4 101          sym.__libc_csu_init\n0x55daca36a6d0    1 2            sym.__libc_csu_fini\n0x55daca36a6d4    1 9            sym._fini\n0x55daca56afe0    1 1020         reloc.__libc_start_main\n[0x7f3700c6dea0]> \n</code></pre>\n <p>\n  Listing the section headers using readelf also show that some sections are missing:\n </p>\n <pre><code>Segment Sections...\n   00\n   01     .interp\n   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame\n   03     .init_array .fini_array .dynamic .got .data\n   04\n   05     .note.gnu.build-id\n   06\n   07\n   08     .init_array .fini_array .dynamic\n</code></pre>\n <p>\n  Compared to the original file:\n </p>\n <pre><code>Segment Sections...\n   00\n   01     .interp\n   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame\n   03     .init_array .fini_array .dynamic .got .data .bss\n   04     .dynamic\n   05     .note.ABI-tag .note.gnu.build-id\n   06     .eh_frame_hdr\n   07\n   08     .init_array .fini_array .dynamic .got\n</code></pre>\n <p>\n  I think there's a problem in the way the section headers are being moved, but I haven't found the problem.\n </p>\n <p>\n  <strong>\n   UPDATE\n  </strong>\n  I found a bug in the process which would edit a section/program header offset even if it was after the .text section. After fixing this, radare2 was able to find all functions including entry0. However, one function's name is different:\n </p>\n <pre><code>0x00000510    1 6            sym.imp.puts\n</code></pre>\n <p>\n  Becomes:\n </p>\n <pre><code>0x00000510    1 6            fcn.00000510\n</code></pre>\n <p>\n  this is clearly a call to the puts() functions. Maybe I need to modify an offset here as well.\n </p>\n <p>\n  The missing sections problem still happens even with the fix.\n </p>\n <p>\n  <strong>\n   UPDATE 2\n  </strong>\n  I found that the p_vaddr value of a program header also should be increased along with p_offset. This fixed the problem where sections would be missing from readelf -l. The resulting program will now successfully start but hits a segmentation fault at runtime.\n </p>\n <p>\n  <strong>\n   UPDATE 3\n  </strong>\n  I added procedures to update the .rel* sections by increasing the offsets of each rel by the virus size. This makes r2 list all of the function names correctly. The executable starts, but hits another segmentation fault at runtime.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "491",
    "tags": [
        "elf",
        "malware"
    ],
    "user": "Andrew",
    "time": "Apr 26, 2018 at 20:25",
    "comments": [],
    "answers_data": []
}