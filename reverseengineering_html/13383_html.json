{
    "title": "How can I set breakpoint and get value of a register with IDApython",
    "link": "https://reverseengineering.stackexchange.com/questions/13383/how-can-i-set-breakpoint-and-get-value-of-a-register-with-idapython",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How can I set a breakpoint and get the value of the\n  <code>\n   EAX\n  </code>\n  register with IDApython?\n </p>\n <p>\n  I want to set a breakpoint, for example at address\n  <code>\n   00b27223\n  </code>\n  , and at each break before execution of that specific address I want to get the value of the\n  <code>\n   EAX\n  </code>\n  register as text.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/LQhPa.png\" rel=\"noreferrer\">\n   <img alt=\"example\" src=\"https://i.sstatic.net/LQhPa.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "12k",
    "tags": [
        "ida",
        "debugging",
        "idapython",
        "debuggers",
        "ida-plugin"
    ],
    "user": "user121314",
    "time": "Sep 3, 2016 at 7:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can think of two methods to achieve this:\n </p>\n <ol>\n  <li>\n   Using\n   <code>\n    RunTo\n   </code>\n   .\n  </li>\n  <li>\n   Setting a breakpoint, hooking debugger events and implementing\n   <code>\n    dbg_bpt\n   </code>\n  </li>\n </ol>\n <h1>\n  1. Using\n  <code>\n   RunTo\n  </code>\n </h1>\n <p>\n  This is nearly trivial to do, but does not give the same amount of control as the second approach. It might be better for quick and dirty type of solutions, if that's what you're after.\n </p>\n <p>\n  Calling\n  <code>\n   idc.RunTo(ea)\n  </code>\n  will execute the process until an\n  <code>\n   ea\n  </code>\n  is reached, allowing you to then call\n  <code>\n   idc.GetRegValue(name)\n  </code>\n  to get the value of\n  <code>\n   EAX\n  </code>\n  .\n </p>\n <p>\n  Certain conditions (like an exception thrown or a different breakpoint being hit) will cause\n  <code>\n   RutTo\n  </code>\n  to return before the provided\n  <code>\n   ea\n  </code>\n  is reached. You could then call\n  <code>\n   idc.GetDebuggerEvent\n  </code>\n  to figure out what happened, but if you're gonna do that I suggest switching to the second approach.\n </p>\n <p>\n  Note\n  <code>\n   RunTo\n  </code>\n  will also start up a process if there's no running process.\n </p>\n <h1>\n  2. Setting a breakpoint, hooking debugger events and implementing\n  <code>\n   dbg_bpt\n  </code>\n </h1>\n <p>\n  This is the safer and would be my recommended approach, while being harder to implement it allows properly handling other breakpoints and more control.\n </p>\n <p>\n  For this, you'll have to do three things:\n </p>\n <ol>\n  <li>\n   Set up a breakpoint at given address.\n  </li>\n  <li>\n   Monitor for the breakpoint's trigger.\n  </li>\n  <li>\n   And finally act upon it.\n  </li>\n </ol>\n <h2>\n  Set up a breakpoint at given address\n </h2>\n <p>\n  The most basic method of achieving this is by calling the\n  <code>\n   idc.AddBpt(ea)\n  </code>\n  , which sets a software on execution breakpoint at that address.\n </p>\n <p>\n  Additional methods you could use include:\n </p>\n <ol>\n  <li>\n   <code>\n    idc.AddBptEx(ea, size, bpttype)\n   </code>\n   to have more control on the type of breakpoint you're creating.\n  </li>\n  <li>\n   <code>\n    idc. SetBptAttr(address, bptattr, value)\n   </code>\n   to set the breakpoint's available attributes.\n  </li>\n  <li>\n   <code>\n    idc.SetBptCnd(ea, cnd)\n   </code>\n   /\n   <code>\n    idc. SetBptCndEx(ea, cnd, is_lowcnd)\n   </code>\n   to set the breakpoint's trigger condition.\n  </li>\n </ol>\n <p>\n  Read the documentation for the exact details.\n </p>\n <h2>\n  Monitor for the breakpoint's trigger\n </h2>\n <p>\n  For that, you'll need to install a Debugger Hooking class (any class that inherits\n  <code>\n   idaapi.DBG_Hooks\n  </code>\n  ), which implements the\n  <code>\n   dbg_bpt(tid, ea)\n  </code>\n  method, which describe the thread id and linear address in which the breakpoint triggered. Returning 0 from\n  <code>\n   dbg_bpt\n  </code>\n  should prevent IDA from notifying the user it was triggered (assuming you'll handle it internally).\n </p>\n <p>\n  You'll have to instantiate your class and call the instance's\n  <code>\n   Hook\n  </code>\n  and\n  <code>\n   Unhook\n  </code>\n  methods for it to actually function. Please note it's better practice to install the hooks before creating the breakpoint.\n </p>\n <h2>\n  And finally act upon it\n </h2>\n <p>\n  While the debugger is running, you can call\n  <code>\n   idc.GetRegValue(name)\n  </code>\n  providing the register name to receive it's immediate value at that time.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "NirIzr",
            "time": "Sep 3, 2016 at 21:51",
            "is_accepted": true,
            "comments": []
        }
    ]
}