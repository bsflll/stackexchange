{
    "title": "How to determine what code created a string, in a live debugger session?",
    "link": "https://reverseengineering.stackexchange.com/questions/22845/how-to-determine-what-code-created-a-string-in-a-live-debugger-session",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm using IDA 7 to debug a running application that must be a child of another application, which means I can't start it from IDA (using Debugger->Run). Instead, I have to run the application normally, and then attach IDA's debugger to the application after the application is already running. But, by the time I get the debugger attached, there are some important strings that the application has already created in the memory. These strings are not something I can find by any kind of simple hex search in the static exe binary, they only seem to appear in the memory after the application is running, so I assume they are being decompressed from somewhere. So I'm trying to determine what code is responsible for creating these strings, so that I can track down where these strings come from. Each time I run the application, the strings are found at different memory addresses. Since I can't debug the program prior to the creation of these strings, I can't step forward to see these strings as they are being created, I can only see them after it's too late. Is there a way to work backwards from a string that's already been created at a variable spot in the memory, and from there, work backwards to determine what code created it?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "128",
    "tags": [
        "ida",
        "disassembly",
        "debugging",
        "strings",
        "x86-64"
    ],
    "user": "NERL",
    "time": "Dec 27, 2019 at 17:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know IDA debugger very well, but I can tell how it can be done in GDB.\n </p>\n <p>\n  First of all, I would suggest disabling ASLR (\n  <code>\n   echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n  </code>\n  ) to prevent address space randomization. If the string you are looking for is at the same location each time, then simply\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\" rel=\"nofollow noreferrer\">\n   setting watchpoint\n  </a>\n  at that location will do the job.\n </p>\n <p>\n  If that is not the case, the only easy way I see, to achieve your goal will be to debug your application from its start. In GDB, you can do this using\n  <code>\n   set detach-on-fork off\n  </code>\n  option before executing the program, which does the following:\n </p>\n <blockquote>\n  <p>\n   Both processes will be held under the control of GDB. One process (child or parent, depending on the value of follow-fork-mode) is debugged as usual, while the other is held suspended.\n  </p>\n </blockquote>\n <p>\n  So, if\n  <code>\n   follow-fork-mode\n  </code>\n  is set to\n  <code>\n   parent\n  </code>\n  , GDB will only execute parent process while child will be frozen until you run it in another GDB instance for example (you can also use IDA debugger to attatch to the newly created process).\n </p>\n <p>\n  I'm posting the links you may find useful while using GDB as I decribed above:\n </p>\n <ul>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/6637448/how-to-find-the-address-of-a-string-in-memory-using-gdb\">\n    searching for strings in GDB\n   </a>\n  </li>\n  <li>\n   <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\" rel=\"nofollow noreferrer\">\n    debugging forks\n   </a>\n  </li>\n  <li>\n   <a href=\"https://stackoverflow.com/questions/6223786/how-can-i-switch-between-different-processes-fork-ed-in-gdb\">\n    similar question on stackoverflow\n   </a>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bart1e",
            "time": "Dec 28, 2019 at 17:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}