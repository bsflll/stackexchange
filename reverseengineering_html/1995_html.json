{
    "title": "Better explanation of different x86 CALL variations",
    "link": "https://reverseengineering.stackexchange.com/questions/1995/better-explanation-of-different-x86-call-variations",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hoping to get a better explanation of x86\n  <code>\n   call\n  </code>\n  instruction. I sort of understand the call near and call far. But I don't fully understand the segment part. A little insight into my main problem,  I am looking at a binary in IDA and its start code is:\n </p>\n <pre><code>push 0xdeadbeef\ncall near 0xdeadbeef\n</code></pre>\n</div>\n</body></html>",
    "votes": "13",
    "answers": 2,
    "views": "14k",
    "tags": [
        "x86",
        "assembly"
    ],
    "user": "k0ng0",
    "time": "May 3, 2013 at 20:20",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n This is very\n <code>\n  1337\n </code>\n code, if it has\n <code>\n  deadbeef\n </code>\n in it ;)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  99% of the calls you'll encounter in modern binaries are\n  <code>\n   near\n  </code>\n  .\n </p>\n <ul>\n  <li>\n   call\n   <code>\n    near\n   </code>\n   (with opcode\n   <code>\n    E8\n   </code>\n   ) is a call relative to the current address, and only affects\n   <code>\n    ?IP\n   </code>\n   . Thus it will add the operand (word or double word) to the next instruction pointer. it's\n   <em>\n    adding\n   </em>\n   the operand to\n   <code>\n    ?IP\n   </code>\n  </li>\n  <li>\n   call\n   <code>\n    far\n   </code>\n   (with opcode\n   <code>\n    9A\n   </code>\n   ) jumps to an\n   <a href=\"http://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm#1792\">\n    absolute segment and offset\n   </a>\n   . ie, it's like\n   <em>\n    setting\n   </em>\n   <code>\n    CS\n   </code>\n   and\n   <code>\n    ?IP\n   </code>\n   at once.\n  </li>\n </ul>\n <p>\n  The memory is actually organized in segments. In modern OSes, you usually don't mess with segments (\n  <code>\n   CS\n  </code>\n  has a fixed value in User mode and Kernel mode), so you don't change them for any reason.\n </p>\n <p>\n  The rare cases of actual segment changes are as\n  <a href=\"http://code.google.com/p/corkami/source/browse/trunk/wip/MakePE/examples/asm/jumps.asm#173\">\n   anti-debugs\n  </a>\n  or\n  <a href=\"http://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm#2242\">\n   messing\n  </a>\n  <a href=\"http://blog.rewolf.pl/blog/?p=443\">\n   with\n  </a>\n  32/64b modes\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "Ange",
            "time": "May 3, 2013 at 16:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Isn't it related with the <a href=\"http://en.wikipedia.org/wiki/Setjmp.h\" rel=\"nofollow noreferrer\">setjmp/lngjmp</a> C functions (see this <a href=\"http://web.eecs.utk.edu/~huangj/cs360/360/notes/Setjmp/lecture.html\" rel=\"nofollow noreferrer\">tutorial</a>) ?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@perror: AFAIK not directly.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">no, \"long\" in the sense of \"longjmp\" has nothing to do with far jump.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A segment is a \"window\" into a section of memory. You can map all or part of memory into a single segment, and multiple segments can have overlapping views of the same memory.  A far call or jump allows you to move between or within those windows.  A near call or jump allows you to move only within the current window.\n </p>\n <p>\n  The only difference between the call and the jump is that the call saves the return address on the stack.  For a far call, the return selector is saved on the stack, too.\n </p>\n <p>\n  However, your question lacks sufficient detail of what exactly you want to know.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "peter ferrie",
            "time": "May 5, 2013 at 3:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">how does the call memory segment specified in the opcode e.g. <code>E8 D2 12 00 00    call    sub_402390</code> how does 000012D2 relate to 402390? That's where I'm lost.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the 12D2 is added to the memory address immediately after the end of the instruction, so the call instruction ends at 4010BE + 12D2 = 402390.</span>",
                    "time": null
                }
            ]
        }
    ]
}