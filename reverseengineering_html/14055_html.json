{
    "title": "What encryption/compression is this, and how to encode/decode from it?",
    "link": "https://reverseengineering.stackexchange.com/questions/14055/what-encryption-compression-is-this-and-how-to-encode-decode-from-it",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've been trying to reverse engineer an Android app's communication protocol using a combination of Xposed and Packet sniffing. \nMost of the packets the app sends have this header set:\n </p>\n <pre><code>Content-Type: application/octet-stream\n</code></pre>\n <p>\n  which leads me to beleive it is some sort of byte array. The sniffed packet body is encoded in something I do not recognize, but thanks to Xposed, I can get the decoded version. This is what I receive from the server:\n  <a href=\"https://i.sstatic.net/2koqy.png\" rel=\"nofollow noreferrer\">\n   https://i.sstatic.net/2koqy.png\n  </a>\n  (raw data is at\n  <a href=\"http://bit.ly/2g5JKgH\" rel=\"nofollow noreferrer\">\n   http://bit.ly/2g5JKgH\n  </a>\n  ). I've tried various ways of decoding it to no avail. After hooking some methods in Xposed which receive the final, decoded data, I found that the decoded version of the data I was sniffing is this:\n </p>\n <pre><code>{\"miis\":[{\"owner_player_id\":\"12bea2c3d7654b66\",\"position\":\"12bea2c3d7654b66\"}],\"SAKASHO_CURRENT_ASSET_REVISION\":\"\",\"SAKASHO_CURRENT_MASTER_REVISION\":\"b324a24d2cf7cd0effb2941e9f5e515456e9e82d\",\"SAKASHO_CURRENT_DATE_TIME\":1480231467}\n</code></pre>\n <p>\n  I'm not sure how it got decoded, but I have some clues.\nFirst, the encoded packet has a size of 183 bytes, while the decoded version has a size of 231 bytes. This leads me to believe it's using some sort of compression. The client also sends an Accept-Encoding: gzip to the server which supports this, but after decoding it using gzip, I still get unreadable data, which I think means there is some sort of encryption going on. Looking at the app's code, translated from smali into a rough java equivalent, this is the method that supposedly takes in a byte array and spits out a String\n </p>\n <pre><code>public static String a(byte[] bArr) {\n        if (bArr == null) {\n            return null;\n        }\n        try {\n            return new String(bArr, \"UTF-8\");\n        } catch (Throwable e) {\n            throw new RuntimeException(\"Can't happen!\", e);\n        }\n    }\n</code></pre>\n <p>\n  however, while trying to replicate this in my own Java program, I always get the original strange character representation of the data.\n </p>\n <p>\n  What I'm wondering is, how does the original packet data get to the final, uncompressed json structure, and if it's a general encoding method, or one the app developers made themselves.\n </p>\n <p>\n  Thanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "426",
    "tags": [
        "encryption",
        "decompress",
        "function-hooking",
        "sniffing"
    ],
    "user": "dylanpdx",
    "time": "Nov 27, 2016 at 8:16",
    "comments": [
        {
            "user": "user10070",
            "text": "<html><body><span class=\"comment-copy\">\n Is Xposed open source and/or does it have a \"verbose\" flag so you can see what it's doing?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "dylanpdx",
            "text": "<html><body><span class=\"comment-copy\">\n Xposed is\n <a href=\"https://github.com/rovo89/Xposed\" rel=\"nofollow noreferrer\">\n  open source\n </a>\n , but it is not the app i'm trying to reverse engineer, it's what i'm using to see what that encrypted text turns into, by hooking methods in the app I am looking at\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}