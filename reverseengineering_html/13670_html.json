{
    "title": "Winapi ReadFile monitor",
    "link": "https://reverseengineering.stackexchange.com/questions/13670/winapi-readfile-monitor",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to make a small proxy dll that will be able to print out all the files that a game tries to access from disk.\n </p>\n <p>\n  I'm using a dinput8 wrapper dll as my proxy dll, from where I've managed to attach a console and print out stuff. But I think I don't understand how exactly I am supposed to hook the ReadFile function.\n </p>\n <p>\n  First of all I am not sure if this is possible at all, considering that I want to create and export a wrapper function for ReadFile, whose declaration is in a completely different dll from the one I'm wrapping.\n </p>\n <p>\n  What I'm trying right now (and its not working) is to declare a ReadFile_wrapper function, which is practically calling the original function right now:\n </p>\n <pre><code>extern \"C\" BOOL WINAPI ReadFile_wrapper(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead,\n                        LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)\n{\n    MessageBoxA(NULL, \"Reading\", \"\", 0);\n    return ReadFile(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);\n}\n</code></pre>\n <p>\n  Also I'm declaring a definition in the .def file, so that the export function is named like the original ReadFile function\n </p>\n <pre><code>...\nReadFile=ReadFile_wrapper\n</code></pre>\n <p>\n  I'm obviously missing something critical here, so any help is highly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "winapi",
        "function-hooking"
    ],
    "user": "Greg",
    "time": "Oct 8, 2016 at 17:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Why not use existing tools to do the job?\n </p>\n <p>\n  If you're just trying to monitor which files get accessed I would suggest to use\n  <a href=\"https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx\" rel=\"nofollow noreferrer\">\n   Process Monitor\n  </a>\n  :\n  <em>\n   Process Monitor\n  </em>\n  is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/EJhl3.gif\" rel=\"nofollow noreferrer\">\n   <img alt=\"Process Monitor screenshot\" src=\"https://i.sstatic.net/EJhl3.gif\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/mPzqY.gif\" rel=\"nofollow noreferrer\">\n   <img alt=\"Process Monitor Process details screenshot\" src=\"https://i.sstatic.net/mPzqY.gif\"/>\n  </a>\n </p>\n <p>\n  If you want to see what data is being read or written I would suggest\n  <a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow noreferrer\">\n   Rohitab API Monitor\n  </a>\n  :\n  <em>\n   API Monitor\n  </em>\n  is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/fmwT4.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Rohitab API Monitor screenshot\" src=\"https://i.sstatic.net/fmwT4.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/ueBwX.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Rohitab ReadFile\" src=\"https://i.sstatic.net/ueBwX.png\"/>\n  </a>\n  <a href=\"https://i.sstatic.net/0LnAQ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Rohitab View Buffer\" src=\"https://i.sstatic.net/0LnAQ.png\"/>\n  </a>\n </p>\n <p>\n  Both tools are free.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Remko",
            "time": "Oct 11, 2016 at 6:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I would suggest utilizing\n  <em>\n   hooking\n  </em>\n  .\n </p>\n <p>\n  When hooking, you patch some bytes at the start of the function you want to hook in memory to redirect to your own code. Upon completion of whatever you wanted to you, you can just return to the original implementation.\n </p>\n <p>\n  There have been various tutorials and implementations which will do this for you.\n </p>\n <p>\n  Maybe\n  <a href=\"http://www.codeproject.com/Articles/2082/API-hooking-revealed\" rel=\"nofollow\">\n   this\n  </a>\n  is a good resource to start you off. Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Oct 10, 2016 at 8:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Here is my detour function:\n </p>\n <pre><code>const void* DetourFunc(BYTE* const src, const BYTE* dest, const DWORD length)\n    {\n        BYTE* jump = new BYTE[length + 5];\n        for (int i = 0; i < sizeof(detourBuffer) / sizeof(void*); ++i)\n        {\n            if (!detourBuffer[i])\n            {\n                detourBuffer[i] = jump;\n                break;\n            }\n        }\n\n        DWORD dwVirtualProtectBackup;\n        VirtualProtect(src, length, PAGE_READWRITE, &dwVirtualProtectBackup);\n\n        memcpy(jump, src, length);\n        jump += length;\n\n        jump[0] = 0xE9;\n        *(DWORD*)(jump + 1) = (DWORD)(src + length - jump) - 5;\n\n        src[0] = 0xE9;\n        *(DWORD*)(src + 1) = (DWORD)(dest - src) - 5;\n\n        VirtualProtect(src, length, dwVirtualProtectBackup, &dwVirtualProtectBackup);\n\n        return jump - length;\n    }\n</code></pre>\n <p>\n  Usage:\n  <code>\n   DetourFunc ((BYTE*)oFuncAddr, (BYTE*)&hkFunc, 5);\n  </code>\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "nrocboc",
            "time": "Oct 11, 2016 at 7:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}