{
    "title": "Function prototypes given by Ghidra is not consistent",
    "link": "https://reverseengineering.stackexchange.com/questions/24633/function-prototypes-given-by-ghidra-is-not-consistent",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is a follow up question to the question I posted over\n  <a href=\"https://reverseengineering.stackexchange.com/questions/24614/way-to-get-all-the-function-prototype-using-ghidra?answertab=oldest#tab-top\">\n   here\n  </a>\n  . According to the answer, I was able to get all the function prototypes from the binary. However, the problem I am having is most of the function signatures I am getting does not have parameters while the actual decompiled version of the same function (with the use of decompile script which is already provided by Ghidra) have parameters.\n </p>\n <p>\n  For example, I have a function signature as\n  <code>\n   undefined HAL_TIMEx_OnePulseN_Stop_IT(void)\n  </code>\n  that was given by the above linked answer, while in the decompiled file (taken from running the ghidra provided Decompile.java script) I have it's signature as\n  <code>\n   undefined4 HAL_TIMEx_OnePulseN_Stop_IT(uint **param_1,uint param_2)\n  </code>\n  which I believe to be more accurate as I cross-checked with the actual source of the binary.\n </p>\n <p>\n  What would be the reason for such an inconsistency? Is there anyway that I could get the function parameters in the form of decompiled version? I was trying to use\n  <code>\n   DecompInterface\n  </code>\n  but I could not figure out the way to extract the prototypes as if they were in decompiled version. Sorry I am a beginner and just started to work with Ghidra. Thank you for your time.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "firmware",
        "radare2",
        "ghidra"
    ],
    "user": "hEShaN",
    "time": "Apr 6, 2020 at 18:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, I found out the reason. By default when the ghidra asks for options when we load the binary,\n  <code>\n   Decompiler Parameter ID\n  </code>\n  option is disabled. Once you enable it, you will have the function parameters correctly. It will take longer time to make the analysis once this option is enabled.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "hEShaN",
            "time": "Apr 6, 2020 at 21:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You noted that\n  <code>\n   Decompiler Parameter ID\n  </code>\n  fixes the discrepancy, but I suspect that the relevant logic is the one behind the context menu action\n  <code>\n   Commit Params/Return\n  </code>\n  .\n </p>\n <p>\n  The Ghidra Advanced Class slides state:\n </p>\n <blockquote>\n  <p>\n   Decompiler Parameter ID\n  </p>\n  <p>\n   The Decompiler Parameter ID Analyzer (Analysis → One\n  Shot → Decompiler Parameter ID) uses the decompiler\n  and an exploration of the call tree to determine parameter,\n  return type, and calling convention information about\n  functions in a program. This analyzer can be quite useful\n  when you have some rich type information, such as known\n  types from library calls. However, if you run this analyzer too\n  early or before fixing problems, you can end up propagating\n  bad information all over the program.\n  </p>\n  <p>\n   Note:\n   <strong>\n    this analyzer will commit the signature of each function.\n   </strong>\n  </p>\n </blockquote>\n <p>\n  (emphasis mine)\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Florian Magin",
            "time": "May 10, 2020 at 21:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}