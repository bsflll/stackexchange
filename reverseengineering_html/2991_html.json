{
    "title": "Struct with negative offset in IDA possible",
    "link": "https://reverseengineering.stackexchange.com/questions/2991/struct-with-negative-offset-in-ida-possible",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a structure which looks like this:\n </p>\n <pre><code> RefString struct\n     RefCount dd ?\n     StrLen   dd ?\n     CString  db...\n RefString ends\n</code></pre>\n <p>\n  When the code passes around a pointer, it doesn't point to the beginning of the struct (RefCount), instead it points to CString, which is allocated as a normal C-String with a zero terminating character, as well as having the strlen and a refcount. So when the code accesses the strlen or refcount it uses\n  <code>\n   ptr-4\n  </code>\n  respectively\n  <code>\n   ptr-8\n  </code>\n  .\n </p>\n <p>\n  Actually that's quite a nice construct, because this way the string can be used as a delphistring, but also directly passed to some system functions without the need of converting back and forth.\n </p>\n <p>\n  Now I wonder though, if it is possible in IDA to create a struct with the basepointer to the string and it knows that the other fields are with the negative offset.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "struct"
    ],
    "user": "Devolus",
    "time": "Oct 31, 2013 at 11:39",
    "comments": [
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n the main purposes of struct is to organize data in a logical container and pass it around. What would be the point of having to reference the struct from the end of it?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<html><body><span class=\"comment-copy\">\n There is no rule that prohibits negative offsets, it's just a common practice to use positive ones. ;) And as I showed, I have such code which uses this kind of addressing, which makes it a bit annyoing to track in IDA.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<html><body><span class=\"comment-copy\">\n I see. I just I think of it in a different way. For me it was always a lot more straight forward to ref structs from the \"head\".\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<html><body><span class=\"comment-copy\">\n Well, the code was not written by me. It makes sense, how it was done, but I also would prefer to have it straightforward. But the code did it like this, so when a pointer is passed around, it points \"in the middle\" of the struct and when IDA does automatica updates it screwes up stuff, because of this.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Kinda sounds like Delphi strings, where hints about the actual length (as in a counted string) and the allocated size are kept in front of the actual data. Except that in such a case the data directly follows the length/size fields.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  What you referring to as ptr-4 and ptr-8 are in fact location of singled out variables on stack. IDA has to know the structure in order to recognize it automatically. If you setup custom structure in \"Structures\" subview. Subsequently, You can manually set whatever variable you choose to be the type of that particular variable. Thereafter, IDA will replace references within disassembly view with appropriate offsets to the structure members.\n </p>\n <p>\n  If IDA \"lands\" in what seems to be the middle of the structure. You could follow the work around below to make it display it differently:\n </p>\n <blockquote>\n  <ol>\n   <li>\n    invert the operand sign by pressing _ (underscore)\n   </li>\n   <li>\n    select the instruction\n   </li>\n   <li>\n    press T. provide calculated delta, select the desired structure and its field\n   </li>\n  </ol>\n </blockquote>\n <p>\n  For details consult\n  <a href=\"http://www.hexblog.com/?p=63\" rel=\"nofollow\">\n   Negative structure offsets\n  </a>\n  of\n  <a href=\"http://www.hexblog.com\" rel=\"nofollow\">\n   Hex Blog\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "PSS",
            "time": "Nov 6, 2013 at 4:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Devolus",
                    "text": "<span class=\"comment-copy\">This strcuture is not a stackpointer object, it is indeed how the strcuture is setup. Your solution works at least partway, because with this I can assign the member names, which helps. A drawback is still that a globabl structure pointer causes some problems, because it points not there, but as you said, it's a workaround.</span>",
                    "time": null
                }
            ]
        }
    ]
}