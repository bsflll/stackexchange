{
    "title": "Determine Encryption Algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/1423/determine-encryption-algorithm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm analyzing some software that appears to encrypt its communications over the network, but it does not appear to be SSL.  How can I easily determine what encryption algorithm its using, and maybe find the key?\n </p>\n</div>\n</body></html>",
    "votes": "19",
    "answers": 4,
    "views": "22k",
    "tags": [
        "tools",
        "cryptography"
    ],
    "user": "omghai2u",
    "time": "Mar 31, 2013 at 5:37",
    "comments": [
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n Just to make it clear. Do you want to identify the encryption algorithm based on the assembly code of the encryption algorithm or based only on the encrypted packets ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "omghai2u",
            "text": "<html><body><span class=\"comment-copy\">\n @perror I have access to the binaries and its resulting network traffic.  So which ever is easier.  Using the IDA plugins suggested fixed my immediate problem, but is there an easier way, for future reference, to do it based solely on network traffic?  I would have assumed that since the traffic had no header or identifiable information that it would not be possible.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Maybe check out\n  <a href=\"http://www.hexblog.com/?p=27\">\n   this\n  </a>\n  IDA plugin.\n </p>\n <p>\n  After you locate the crypto functions, doing a cross-reference in IDA should allow you to see where the functions are called and likely the key is nearby.  If you can set a break-point on those functions and see what is being passed in for the key, this, of course, would be the easiest way.\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "mrduclaw",
            "time": "Mar 31, 2013 at 3:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">I this there is an updated version, FindCrypt2 <a href=\"http://www.hexblog.com/?p=28\" rel=\"nofollow noreferrer\">hexblog.com/?p=28</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For a bit more advanced way of automatic crypto identification see Felix Gröbert's work on\n  <a href=\"https://kerckhoffs.googlecode.com/files/Groebert-Automatic.Identification.of.Cryptographic.Primitives.in.Software.pdf\">\n   Automatic Identification of Cryptographic Primitives in Software\n  </a>\n  . He uses a pintool to dynamically instrument the code which can allow to even recover keys. The code is also\n  <a href=\"https://code.google.com/p/kerckhoffs/\">\n   available\n  </a>\n  . The repository contains other tools used in comparison , such as PeID and OllyDBG plugins.\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "0xea",
            "time": "Mar 31, 2013 at 10:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have not used it but there is an open source tool called\n  <a href=\"https://code.google.com/p/aligot/\">\n   Aligot\n  </a>\n  that may help when the encryption algorithms have been obfuscated. According to its authors, Aligot can idenfity TEA, MD5, RC4 and AES.\n </p>\n <p>\n  Aligot does have an important disclaimer:\n </p>\n <blockquote>\n  <p>\n   Aligot was build as a proof-of-concept to illustrate the principles\n  described in the\n   <a href=\"http://www.loria.fr/~calvetjo/papers/ccs12.pdf\">\n    associated paper\n   </a>\n   . In particular it is not currently\n  suitable to automatically analyze large programs. If you are\n  interested in such project, please contact the author ;)\n  </p>\n </blockquote>\n <p>\n  Despite the disclaimer, the results indicated in the paper suggest that Aligot  is worth looking into.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "amccormack",
            "time": "Mar 31, 2013 at 3:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A nice combination of findcrypt2 by HexRays and the work done by Felix Gröbert is\n  <a href=\"https://bitbucket.org/daniel_plohmann/simplifire.idascope\">\n   IDAScope\n  </a>\n  . It's very useful for searching for and identifying encryption algorithms. For more information on IDAScope's Crypto Identification I'd recommend the following\n  <a href=\"http://pnx-tf.blogspot.com/2012/08/idascope-update-crypto-identification.html\">\n   link\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "alexanderh",
            "time": "Apr 2, 2013 at 16:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Lizz",
                    "text": "<span class=\"comment-copy\">How does it improve on findcrypt2 and HexRays? What makes it better, faster, etc.?</span>",
                    "time": null
                }
            ]
        }
    ]
}