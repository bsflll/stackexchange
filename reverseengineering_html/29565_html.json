{
    "title": "How does PIE mitigate exploits?",
    "link": "https://reverseengineering.stackexchange.com/questions/29565/how-does-pie-mitigate-exploits",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I read a tutorial where they compiled with the\n  <code>\n   -no-pie\n  </code>\n  option. Is it because the\n  <code>\n   .text\n  </code>\n  segment will be loaded at a random address, therefore making the address of gadgets founds inside it useless ?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "301",
    "tags": [
        "rop",
        "pie"
    ],
    "user": "hehehe",
    "time": "Nov 17, 2021 at 19:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The PIE abbreviation means \"Position Independent Executable\". Such an executable\n  <em>\n   may ask or not ask\n  </em>\n  the OS for the Address Space Layout Randomization (ASLR), when the OS loader loads the binary and dependencies into a random location of virtual memory.\n </p>\n <p>\n  ASLR itself,\n  <em>\n   not PIE\n  </em>\n  , protects executable from\n  <em>\n   specific\n  </em>\n  malware (which rely on fixed virtual address of a particular code and tries changing it in an\n  <em>\n   already running\n  </em>\n  program). Asking for ASLR is\n  <em>\n   another\n  </em>\n  flag beside the PIE flag.\n </p>\n <p>\n  The\n  <code>\n   -no-pie\n  </code>\n  option of the GCC compiler means \"no PIE\" - it's only one bit in the executable header, signaling the loader that the code is position-dependent. (The loader will then load the code always into the same, fixed virtual memory location indicated in the executable's header.)\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "MarianD",
            "time": "Nov 16, 2021 at 4:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}