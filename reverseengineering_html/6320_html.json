{
    "title": "What is the problem with using inner classes in a class enclosing sensitive information?",
    "link": "https://reverseengineering.stackexchange.com/questions/6320/what-is-the-problem-with-using-inner-classes-in-a-class-enclosing-sensitive-info",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently heard that using Java inner classes in a class that enclose sensitive information is causing the\n  <code>\n   private\n  </code>\n  data of the class to be changed to\n  <code>\n   protected\n  </code>\n  at the bytecode level (meaning that any other class of the package may access it).\n </p>\n <p>\n  As I do not have any expertise in bytecode reading I would like to know if it is true, and get some explanation of this problem.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "324",
    "tags": [
        "exploit",
        "java"
    ],
    "user": "perror",
    "time": "Sep 26, 2014 at 14:51",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n FYI, source code for the Java compiler @\n <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/langtools/file/1ff9d5118aae/src/share/classes/com/sun/tools/javac\" rel=\"nofollow noreferrer\">\n  hg.openjdk.java.net/jdk8/jdk8/langtools/file/1ff9d5118aae/src/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The problem is that there is no notion of inner classes at the bytecode level. Each inner class is compiled to a separate class with no special privileges compared to any other class in the same package.\n </p>\n <p>\n  So in order to support the functionality of inner classes, the compiler has to add getter methods behind the scenes. Every time you access a field in the outer class from the inner class, the compiler needs to generate a getter in the outer class. However, these getters cannot be private because then nothing could call them! Therefore, the getter is always at least protected, meaning any class in the same package can access it.\n </p>\n <p>\n  Update:\n  <a href=\"https://openjdk.java.net/jeps/181\" rel=\"nofollow noreferrer\">\n   Java 11 added a new bytecode feature to address this issue\n  </a>\n  , so this does not apply to recent versions of Java.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Antimony",
            "time": "Feb 29, 2020 at 17:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}