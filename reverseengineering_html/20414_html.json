{
    "title": "Unable to figure out how to map segments in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/20414/unable-to-figure-out-how-to-map-segments-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a 2 MB executable that I'm attempting to reverse engineer. It's executed on a 16-bit 8086 CPU.\n </p>\n <p>\n  The segments go from 4000 (0x140000) to F000 (0x1F0000).\n </p>\n <p>\n  I'm attempting to map the segments in the Program Segmentation window, but when doing so, addresses for call / jump operations fail to resolve when converting the entrypoint to code.\n </p>\n <p>\n  Taking the final segment as an example, I set the Start Address to 0x1F0000, and the End Address to 0x200000. I set the base to 0xF000, as this is how it's referred to in the machine code.\n </p>\n <p>\n  I do the same with the other segments, including the problem segment (0xD000 -> 0x1D0000).\n </p>\n <p>\n  When converting to code, the resulting line is resolved as follows:\n </p>\n <pre><code>jmp far ptr 0D000h:1Ah\n</code></pre>\n <p>\n  This is as expected, jumping to segment 0xD000, with an offset of 0x1A, however IDA is not happy with this, complaining about it with the NONAME and BOUNDS errors.\n </p>\n <p>\n  I have no idea how to properly map this in IDA. Can someone point me in the right direction?\n </p>\n <p>\n  [edit]\n </p>\n <p>\n  For reference, I already have the full list of segments I want to map along with their binary addresses:\n </p>\n <p>\n  2000:0x1F0000\n </p>\n <p>\n  3000:0x1F0000\n </p>\n <p>\n  4000:0x140000\n </p>\n <p>\n  5000:0x150000\n </p>\n <p>\n  6000:0x160000\n </p>\n <p>\n  7000:0x170000\n </p>\n <p>\n  8000:0x180000\n </p>\n <p>\n  9000:0x190000\n </p>\n <p>\n  A000:0x1A0000\n </p>\n <p>\n  B000:0x1B0000\n </p>\n <p>\n  C000:0x1C0000\n </p>\n <p>\n  D000:0x1D0000\n </p>\n <p>\n  E000:0x1E0000\n </p>\n <p>\n  F000:0x1F0000\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "505",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "lyptt",
    "time": "Jan 19, 2019 at 11:35",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n How did you get 0x140000 from 4000?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "lyptt",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky 140000 is the file offset, 4000 is the base segment offset.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "lyptt",
            "text": "<html><body><span class=\"comment-copy\">\n For this architecture, segments are mapped from the end of the file - 64kb (F000, 0x1F0000) backwards, in 64kb chunks.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n On a normal 8086, segment 4000 would be mapped to 40000. You also have dupes in your list. I think youâ€™re not explaining everything.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "lyptt",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky It's not a normal 8086, it's an 8086 compatible clone. On this architecture the first two segments are mapped to the same offset as the last one.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}