{
    "title": "Updating legacy library in an already compiled binary",
    "link": "https://reverseengineering.stackexchange.com/questions/32369/updating-legacy-library-in-an-already-compiled-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm dealing with a reverse engineering challenge involving a binary application that was statically compiled with a legacy library. While the legacy library is not vulnerable, it lacks certain features that would significantly improve the functionality of the binary. Importantly, I have access to the open-source code of this library.\n </p>\n <p>\n  My goal is to enhance the binary by incorporating these missing features from the new version of the library. Specifically, I want to:\n </p>\n <ol>\n  <li>\n   Take the binary compiled with the legacy library.\n  </li>\n  <li>\n   Integrate the additional features from the new version of the library into the binary.\n  </li>\n  <li>\n   Rebuild or modify the binary so that it utilizes the enhanced library functionality.\n  </li>\n </ol>\n <p>\n  Is this feasible, and if so, what are the general steps or techniques involved in achieving this task? Have you ever heard about something like that?\n </p>\n <p>\n  Any advice or insights would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "78",
    "tags": [
        "c++",
        "c",
        "linux",
        "elf",
        "patching"
    ],
    "user": "st0l4s",
    "time": "Oct 6, 2023 at 13:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is what I have done in similar cases but adapted to your scenario:\n </p>\n <ul>\n  <li>\n   Build the new open source library as a standard SO or DLL that is loadable by your target. If you're unlucky, you might need to use an old compiler...\n  </li>\n  <li>\n   Patch the entry point of your target to load the SO/DLL as soon as it's safe or, alternatively, directly modify the binary to add a new library to it so you don't have to load it yourself.\n  </li>\n  <li>\n   Hook the exported functions of the library statically linked inside your binary and forward them to the newly built library. If you're unlucky, the functions are in-lined and then your life would not be so nice (but most likely the functions aren't in-lined).\n  </li>\n </ul>\n <p>\n  By doing this you minimize the number of pure assembler patches you need to write and once it's working, you will almost \"magically\" have your target working with newest versions of your target library (but you will have to test to verify it's compatible and they didn't break something).\n </p>\n <p>\n  Oh, by the way! Naturally, you will need to find first where the library is inside the binary. You can diff with\n  <a href=\"https://github.com/joxeankoret/diaphora\" rel=\"nofollow noreferrer\">\n   Diaphora\n  </a>\n  a version of your open source library against your target and import the symbols you need.\n </p>\n <p>\n  Hope it helps.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Oct 6, 2023 at 16:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}