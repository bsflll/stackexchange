{
    "title": "Why darwin kernel crashes on function call via lldb while debugging the process?",
    "link": "https://reverseengineering.stackexchange.com/questions/9560/why-darwin-kernel-crashes-on-function-call-via-lldb-while-debugging-the-process",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I wanted to debug the hanging ruby process, but instead my kernel crashes each time when I'm doing the following steps:\n </p>\n <ol>\n  <li>\n   <p>\n    I'm re-running my ruby script (vagrant) which hangs:\n   </p>\n   <pre><code>$ vagrant destroy -f && VAGRANT_LOG=info vagrant up\n...\nINFO ssh: Setting SSH_AUTH_SOCK remotely: /tmp/ssh-FP9viQfD9J/agent.1425\n(process hanging)\nload: 2.48  cmd: ruby 1384 waiting 2.90u 0.62s\n</code></pre>\n  </li>\n  <li>\n   <p>\n    I'm attaching\n    <code>\n     lldb\n    </code>\n    into the running process (on different terminal):\n   </p>\n   <pre><code>$ lldb -p $(pgrep -fn ruby)\n</code></pre>\n   <blockquote>\n    <p>\n     Popup: Developer Tools Access needs to take control of another process for debugging to continue. Type your password.\n     <strong>\n      Continue.\n     </strong>\n    </p>\n   </blockquote>\n   <pre><code>(lldb) process attach --pid 1442\nProcess 1442 stopped\nExecutable module set to \"/opt/vagrant/bin/../embedded/bin/ruby\".\nArchitecture set to: x86_64-apple-macosx.\n\n(lldb) thread list\nProcess 1442 stopped\n* thread #1: tid = 0x2427, 0x00007fff84f3f716 libsystem_kernel.dylib`__psynch_cvwait + 10, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\n  thread #2: tid = 0x245d, 0x00007fff84f3f9aa libsystem_kernel.dylib`__select + 10\n  thread #3: tid = 0x2a8d, 0x00007fff84f4094a libsystem_kernel.dylib`poll + 10\n  thread #4: tid = 0x2a9a, 0x00007fff84f3f716 libsystem_kernel.dylib`__psynch_cvwait + 10\n</code></pre>\n  </li>\n  <li>\n   <p>\n    I'm calling\n    <code>\n     rb_backtrace()\n    </code>\n    for thread #1:\n   </p>\n   <pre><code>(lldb) call (void)rb_backtrace()\n</code></pre>\n   <p>\n    which prints for me the ruby backtrace as expected (on process foreground):\n   </p>\n   <pre><code>from /opt/vagrant/embedded/gems/gems/vagrant-1.7.2/plugins/communicators/ssh/communicator.rb:566:in `block in shell_execute'\nfrom /opt/vagrant/embedded/gems/gems/vagrant-1.7.2/plugins/communicators/ssh/communicator.rb:566:in `loop'\n</code></pre>\n  </li>\n  <li>\n   <p>\n    Since ruby is using different threads, I wanted to do the same for thread #2 (which failed):\n   </p>\n   <pre><code>(lldb) thread select 2\n* thread #2: tid = 0x245d, 0x00007fff84f3f9aa libsystem_kernel.dylib`__select + 10\n    frame #0: 0x00007fff84f3f9aa libsystem_kernel.dylib`__select + 10\nlibsystem_kernel.dylib`__select + 10:\n-> 0x7fff84f3f9aa:  jae    0x7fff84f3f9b4            ; __select + 20\n   0x7fff84f3f9ac:  movq   %rax, %rdi\n   0x7fff84f3f9af:  jmp    0x7fff84f3c19a            ; cerror\n   0x7fff84f3f9b4:  retq   \n\n(lldb) thread list\nProcess 1442 stopped\n  thread #1: tid = 0x2427, 0x00007fff84f3f716 libsystem_kernel.dylib`__psynch_cvwait + 10, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\n* thread #2: tid = 0x245d, 0x00007fff84f3f9aa libsystem_kernel.dylib`__select + 10\n  thread #3: tid = 0x2a8d, 0x00007fff84f4094a libsystem_kernel.dylib`poll + 10\n  thread #4: tid = 0x2a9a, 0x00007fff84f3f716 libsystem_kernel.dylib`__psynch_cvwait + 10\n\n(lldb) call (void)rb_backtrace()\n</code></pre>\n   <blockquote>\n    <p>\n     Kernel panic screen:\n     <em>\n      You need to restart your computer.\n     </em>\n    </p>\n   </blockquote>\n  </li>\n  <li>\n   <p>\n    At this point the kernel crashed with the following backtrace found in log:\n   </p>\n   <pre><code>panic(cpu 2 caller 0xffffff80022dcc1d): Kernel trap at 0xffffff80025f69e4, type 14=page fault, registers:\nFault CR2: 0x0000000001f6d695, Error code: 0x0000000000000000, Fault CPU: 0x2\nBacktrace (CPU 2), Frame : Return Address\n0xffffff81f0ca3aa0 : 0xffffff8002223139 \n0xffffff81f0ca3b20 : 0xffffff80022dcc1d \n...\nBSD process name corresponding to current thread: ruby\n\nMac OS version:\n13F1077\n\nKernel version:\nDarwin Kernel Version 13.4.0: Wed Mar 18 16:20:14 PDT 2015; root:xnu-2422.115.14~1/RELEASE_X86_64\nlast loaded kext at 244023643290: com.apple.filesystems.msdosfs 1.9 (addr 0xffffff7f8308c000, size 65536)\nloaded kexts:\nfoo.tap 1.0\nfoo.tun 1.0\norg.virtualbox.kext.VBoxNetAdp  4.3.12\norg.virtualbox.kext.VBoxNetFlt  4.3.12\norg.virtualbox.kext.VBoxUSB 4.3.12\norg.virtualbox.kext.VBoxDrv 4.3.12\ncom.apple.filesystems.msdosfs   1.9\n...\n</code></pre>\n  </li>\n </ol>\n <p>\n  This happened already twice.\n </p>\n <p>\n  What was the reason for a kernel crash? Is it a\n  <code>\n   lldb\n  </code>\n  /\n  <code>\n   kernel\n  </code>\n  bug, or expected behaviour by doing something wrong? If so, what should be the correct safer approach of calling\n  <code>\n   rb_backtrace()\n  </code>\n  on different threads (without crashing the kernel)?\n </p>\n <p>\n  For clarification, ruby script (vagrant) was run without\n  <code>\n   sudo\n  </code>\n  , the same as\n  <code>\n   lldb\n  </code>\n  .\n </p>\n <p>\n  I'm using lldb-320.4.160.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "591",
    "tags": [
        "debugging",
        "osx",
        "kernel-mode",
        "callstack",
        "lldb"
    ],
    "user": "kenorb",
    "time": "Aug 5, 2015 at 22:41",
    "comments": [
        {
            "user": "Div",
            "text": "<html><body><span class=\"comment-copy\">\n If you are running\n <code>\n  kdumpd\n </code>\n on your main machine, then you can catch the panic dumps that way if you are but you also need to set the nvram properly as well. So on the remote machine you need to have setup ahead of time in the nvram: boot-args=-v debug=0xd44 _panicd_ip=127.55.56.29 replace\n <code>\n  127.55.56.59\n </code>\n with your IP address. See\n <a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2118.html\" rel=\"nofollow noreferrer\">\n  Apple document describing how to do it here\n </a>\n . Is there a reason why you can't just run\n <code>\n  lldb\n </code>\n directly on your debug machine? If you could you could just do a\n <code>\n  bt\n </code>\n directly on the other thread. If\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}