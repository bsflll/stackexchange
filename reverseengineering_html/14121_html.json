{
    "title": "How to find obfuscated hidden command line parameters?",
    "link": "https://reverseengineering.stackexchange.com/questions/14121/how-to-find-obfuscated-hidden-command-line-parameters",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The Amazon KindleGen command line app (\n  <a href=\"https://www.amazon.com/gp/feature.html?docId=1000765211\" rel=\"noreferrer\">\n   Windows, macOS, Linux\n  </a>\n  download links) has several undocumented command line parameters that I'm curious about. One of these hidden command line parameters is:\n </p>\n <pre><code>-dont_append_source\n</code></pre>\n <p>\n  However, this string can't be found with the\n  <strong>\n   strings\n  </strong>\n  app or any of the many dissassemblers that I tried. It's therefore highly likely that some of the command line parameters have been obfuscated.\n </p>\n <p>\n  There are at least 8 of them:\n </p>\n <pre><code>option: (hidden) Skip the HTML cleanup\noption: (hidden) creates json position map file for debugging purpose.\noption: (hidden) creates mobi for older devices.\noption: (hidden) Using manual(tag based) fragmentation mode for building Webkit reader compatible mobi.\noption: (hidden) Webkit reader Compatible mobi will be built\noption: (hidden) fragsize\noption: (hidden) custom image size will be used for resizing\noption: (hidden) amazon creator tool or pipeline\n</code></pre>\n <p>\n  Are there any special tools out there that I could use to deobfuscate these hidden command line parameters?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassemblers",
        "command-line"
    ],
    "user": "Nemo XXX",
    "time": "Dec 7, 2016 at 8:53",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n You'll have to disassemble the code and check how the app does its argument processing. If they really wanted to hide those hidden parameters, they could run a hash function over the parameter and compare the result to a blob within the binary, in which case you can't even find out what the original command string was.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n I'd suggest to create a memory dump of the process when it is running and running strings uility on it. There is a chance that these obfuscated parameters are deobfuscated/decrypted during program start-up and you'll find those switches in the memory dump\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Nemo XXX",
            "text": "<html><body><span class=\"comment-copy\">\n <b>\n  @w s:\n </b>\n Unfortunately creating a memory dump didn't help me find the parameters.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Rough attempt (you never know): a simple incremental XOR find. But not only does it not locate your example\n <code>\n  dont_append_source\n </code>\n anywhere, it\n <i>\n  also\n </i>\n does not find the 'regular' options, other than in the descriptions of the options themselves. Here is a tip, though: the Windows version seems to use Unicode throughout, but the Mac version does not. It may make things (fractionally) easier.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n – sorry, scratch that. The regular options are simple strings and tested inside a single routine. I don't see obvious testing of other strings, encrypted or not, though.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  those command line switches seems to be plainly visible in several languages\n </p>\n <p>\n  <strong>\n   kind:>kindlegen.exe -dont_append_source\n  </strong>\n </p>\n <pre><code>Info:I9018:option: -donotaddsource: Source files will not be added\n</code></pre>\n <p>\n  <strong>\n   kind:>strings -o kindlegen.exe | grep -i donotaddsource\n  </strong>\n </p>\n <pre><code>5130184:option: -donotaddsource: Source files will not be added\n5208360:Option: -donotaddsource: Quelldateien werden nicht hinzugef\n5287768:option: -donotaddsource: Les fichiers sources se seront pas ajout\n5367504:opzione: -donotaddsource: I file sorgente non verranno aggiunti\n5448722:n: -donotaddsource: no se agregan los archivos fuente\n5482150:-donotaddsource\n5524610:: -donotaddsource:\n5595760:o:-donotaddsource: Os arquivos de origem n\n5673552:: -donotaddsource:\n5748880:optie: -donotaddsource: bronbestanden worden niet toegevoegd\n</code></pre>\n <p>\n  binary dump at offset as shown by strings.exe\n </p>\n <pre><code>kind:\\>xxd -s 5130184 -g1 -l0x70 kindlegen.exe\n04e47c8: 6f 00 70 00 74 00 69 00 6f 00 6e 00 3a 00 20 00  o.p.t.i.o.n.:. .\n04e47d8: 2d 00 64 00 6f 00 6e 00 6f 00 74 00 61 00 64 00  -.d.o.n.o.t.a.d.\n04e47e8: 64 00 73 00 6f 00 75 00 72 00 63 00 65 00 3a 00  d.s.o.u.r.c.e.:.\n04e47f8: 20 00 53 00 6f 00 75 00 72 00 63 00 65 00 20 00   .S.o.u.r.c.e. .\n04e4808: 66 00 69 00 6c 00 65 00 73 00 20 00 77 00 69 00  f.i.l.e.s. .w.i.\n04e4818: 6c 00 6c 00 20 00 6e 00 6f 00 74 00 20 00 62 00  l.l. .n.o.t. .b.\n04e4828: 65 00 20 00 61 00 64 00 64 00 65 00 64 00 00 00  e. .a.d.d.e.d...\n</code></pre>\n <p>\n  <strong>\n   searching in  windbg\n  </strong>\n </p>\n <pre><code>kindle:\\>echo get bounds of exe & cdb -c \"lm m kin*;q\" kindlegen.exe | grep def\nget bounds of exe\n00400000 00bdd000   kindlegen   (deferred)\nkindle:\\>echo search string within bounds & cdb -c \"lm m kin*;s -u kindlegen L?(0xbdd000\n-0x400000) donotaddsource: ; q\" kindlegen.exe | grep quit: -B 11\nsearch for emitted string within bounds\nstart    end        module name\n00400000 00bdd000   kindlegen   (deferred)\n008e59da  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n008f8b3a  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n0090c16a  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n0091f8e4  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n0093361a  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n00945e88  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n00957476  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n0096a456  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\n0097caa0  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.\nquit:\n</code></pre>\n <p>\n  <strong>\n   maybe all the commandline switches\n  </strong>\n </p>\n <p>\n  <strong>\n   0:000> .foreach (place { s -[1]u 400000 bdd000 option:}) {du /c100 place }\n  </strong>\n </p>\n <pre><code>00839650  \"option: {0}\"\n008e5478  \"option: -preserve_img: Original Image size will be preserved\"\n008e54f8  \"option: -image64K: The maximum size of the image is restricted to 64K\"\n008e5588  \"option: -image128K: The maximum size of the image is restricted to 128K\"\n008e5618  \"option: -gif: gif image conversion (no jpeg)\"\n008e5674  \"option: -c0: No compression\"\n008e56b0  \"option: -c1: Standard DOC compression\"\n008e5700  \"option: -c2: Kindle Huffdic compression\"\n008e5750  \"option: -allscript: Authorize all scripting\"\n008e57a8  \"option: -western: Forced Windows-1252 output\"\n008e5808  \"option: -verbose: Verbose output\"\n008e5850  \"option: -noparseback: Parse back won't be built\"\n008e58b0  \"option: -regserver: The XOPFPlugin type library has been registered\"\n008e5938  \"option: -unregserver: The XOPFPlugin type library has been unregistered\"\n008e59c8  \"option: -donotaddsource: Source files will not be added\"\n008e5a38  \"option: (hidden) Skip the HTML cleanup\"\n008e5a88  \"option: (hidden) creates json position map file for debugging purpose.\"\n008e5b18  \"option: (hidden) creates mobi for older devices.\"\n008e5b80  \"option: (hidden) Using manual(tag based) fragmentation mode for building Webkit reader compatible mobi.\"\n008e5c50  \"option: (hidden) Webkit reader Compatible mobi will be built\"\n008e5ccc  \"option: (hidden) fragsize\"\n008e5d00  \"option: (hidden) custom image size will be used for resizing\"\n008e5d80  \"option: (hidden) amazon creator tool or pipeline\"\n008e5de8  \"option: -genhdcontainers: eMM will be built with given resolutions\"\n0090bbc0  \"option: -preserve_img: La taille d'origine de l'image sera préservée\"\n0090bc50  \"option: -image64K: La taille maximum de l'image est limitée à 64K\"\n0090bcd8  \"option: -image128K: La taille maximum de l'image est limitée à 128K\"\n0090bd60  \"option: -gif: Conversion d'image gif (pas jpeg)\"\n0090bdc0  \"option: -c0: Aucune compression\"\n0090be00  \"option: -c1: Compression DOC standard\"\n0090be50  \"option: -c2: Compression Kindle Huffdic\"\n0090bea0  \"option: -allscript: Autorise toutes les scénarisations\"\n0090bf10  \"option: -western: Sortie Windows-1252 forcée\"\n0090bf70  \"option: -verbose: Sortie Verbose\"\n0090bfb8  \"option: -noparseback: Parse back ne sera pas construit\"\n0090c028  \"option: -regserver: Le type de bibliothèque XOPFPlugin a été enregistré\"\n0090c0b8  \"option: -unregserver: Le type de bibliothèque XOPFPlugin a été désenregistré\"\n0090c158  \"option: -donotaddsource: Les fichiers sources se seront pas ajoutés\"\n0090c1e0  \"option: (masquée) Sauter le nettoyage HTML\"\n0090c238  \"option: (masquée) Crée fichier de carte de position json dans le but d'un débogage.\"\n0090c2e0  \"option: (masquée) crée un mobi pour les appareils plus anciens.\"\n0090c360  \"option: (masquée) Utilisation du mode de fragmentation manuelle (basé sur les balises) pour construire un lecteur Webkit compatible mobi.\"\n0090c478  \"option: (masquée) Un lecteur Webkit compatible mobi sera construit\"\n0090c500  \"option: (masquée) fragsize\"\n0090c538  \"option: (masquée) la taille d'image personnalisée sera utilisée pour redimmensionement\"\n0090c5e8  \"option: (caché) amazon créateur outil ou d'un pipeline\"\n009bbe70  \"option: {0}\"\n</code></pre>\n <p>\n  the argument strings are hashed with md5 and compared to blob it appears as Guntram blohm commented to your original query\n </p>\n <p>\n  with a fleet glance it appears the hashing function is an MD5 implementation\n </p>\n <pre><code>CPU Disasm\nAddress                                    Hex dump          Command                                       Comments\n006836F0 thiscallhashestheargstring (MD5)  /$  83EC 68       SUB     ESP, 68                               ; kindlegen.thiscallhashestheargstring (MD5)(guessed Arg1)\n006836F3                                   |.  8B50 08       MOV     EDX, DWORD PTR DS:[EAX+8]\n006836F6                                   |.  8B48 04       MOV     ECX, DWORD PTR DS:[EAX+4]\n</code></pre>\n <p>\n  the possible md5 constants are visible inside the procedure\n </p>\n <pre><code>CPU Disasm\nAddress   Command                                       Comments\n006838FD  LEA     EAX, [EBX+EAX+D76AA478]<<<<<<<<<<<<<<<<<<<<<<<\n00683904  ROL     EAX, 7\n00683907  ADD     EAX, EDX\n00683909  AND     EDI, EAX\n0068390B  MOV     ECX, EAX\n0068390D  NOT     ECX\n0068390F  AND     ECX, ESI\n00683911  OR      ECX, EDI\n00683913  ADD     ECX, DWORD PTR SS:[ESP+3C]\n00683917  MOV     DWORD PTR SS:[ESP+18], EBX\n0068391B  LEA     ECX, [EBP+ECX+E8C7B756] <<<<<<<<<<<<<<<<<<<<<<\n00683922  ROL     ECX, 0C\n00683925  ADD     ECX, EAX\n00683927  MOV     EDI, ECX\n00683929  NOT     EDI\n0068392B  AND     EDI, EDX\n0068392D  MOV     EBX, ECX\n0068392F  AND     EBX, EAX\n00683931  OR      EDI, EBX\n00683933  ADD     EDI, DWORD PTR SS:[ESP+40]\n00683937  MOV     DWORD PTR SS:[ESP+30], ESI\n0068393B  LEA     ESI, [ESI+EDI+242070DB] <<<<<<<<<<<<\n</code></pre>\n <p>\n  the MD5 hash for some arg strings are\n </p>\n <pre><code>cat dontapp.py\nimport md5\nprint md5.md5(\"-dont_append_source\").hexdigest()\nprint md5.md5(\"-intermediate_only\").hexdigest()\nprint md5.md5(\"-releasenotes\").hexdigest()\n\npython dontapp.py\n8465b444e1fe29390e2bb6b98b878829\nf837e7c59aeba2cfa4a0ccb7c941e1b8\n2368d23829ad7e680cd23385b9fcff6a \n</code></pre>\n <p>\n  <strong>\n   and hash is compared to blob bytes here\n  </strong>\n </p>\n <p>\n  Note passing invalid args like -abracadabra doesnt land in this comparison function so it is possible there is a pre check like argstr len etc\n </p>\n <pre><code>CPU Disasm\nAddress                  Command                                       Comments\n006832B0 whoknowswhat    PUSH    EBP                                   ; kindlegen.whoknowswhat(guessed Arg1,Arg2)\n006832B1                 MOV     EBP, DWORD PTR SS:[ESP+8]\n</code></pre>\n <p>\n  <strong>\n   a logging breakpoints yields this\n  </strong>\n </p>\n <p>\n  <strong>\n   -dont_append_source hash\n  </strong>\n </p>\n <pre><code>006832B0  INT3: [esp+4] = 84 (132.)\n006832B0  INT3: [esp+4] = 65 (101.)\n006832B0  INT3: [esp+4] = 0B4 (180.)\n006832B0  INT3: [esp+4] = 44 (68.)\n006832B0  INT3: [esp+4] = 0E1 (225.)\n006832B0  INT3: [esp+4] = 0FE (254.)\n006832B0  INT3: [esp+4] = 29 (41.)\n006832B0  INT3: [esp+4] = 39 (57.)\n006832B0  INT3: [esp+4] = 0\n006832B0  INT3: [esp+4] = 0E (14.)\n006832B0  INT3: [esp+4] = 2B (43.)\n006832B0  INT3: [esp+4] = 0B6 (182.)\n006832B0  INT3: [esp+4] = 0B9 (185.)\n006832B0  INT3: [esp+4] = 8B (139.)\n006832B0  INT3: [esp+4] = 87 (135.)\n006832B0  INT3: [esp+4] = 88 (136.)\n006832B0  INT3: [esp+4] = 29 (41.)\n</code></pre>\n <p>\n  <strong>\n   -intermediate_only hash\n  </strong>\n </p>\n <pre><code>006832B0  INT3: [esp+4] = 0F8 (248.)\n006832B0  INT3: [esp+4] = 37 (55.)\n006832B0  INT3: [esp+4] = 0E7 (231.)\n006832B0  INT3: [esp+4] = 0C5 (197.)\n006832B0  INT3: [esp+4] = 9A (154.)\n006832B0  INT3: [esp+4] = 0EB (235.)\n006832B0  INT3: [esp+4] = 0A2 (162.)\n006832B0  INT3: [esp+4] = 0CF (207.)\n006832B0  INT3: [esp+4] = 0A4 (164.)\n006832B0  INT3: [esp+4] = 0A0 (160.)\n006832B0  INT3: [esp+4] = 0CC (204.)\n006832B0  INT3: [esp+4] = 0B7 (183.)\n006832B0  INT3: [esp+4] = 0C9 (201.)\n006832B0  INT3: [esp+4] = 41 (65.)\n006832B0  INT3: [esp+4] = 0E1 (225.)\n006832B0  INT3: [esp+4] = 0B8 (184.)\n</code></pre>\n <p>\n  <strong>\n   --releasenotes\n  </strong>\n </p>\n <pre><code>006832B0  INT3: [esp+4] = 23 (35.)\n006832B0  INT3: [esp+4] = 68 (104.)\n006832B0  INT3: [esp+4] = 0D2 (210.)\n006832B0  INT3: [esp+4] = 38 (56.)\n006832B0  INT3: [esp+4] = 29 (41.)\n006832B0  INT3: [esp+4] = 0AD (173.)\n006832B0  INT3: [esp+4] = 7E (126.)\n006832B0  INT3: [esp+4] = 68 (104.)\n006832B0  INT3: [esp+4] = 0\n006832B0  INT3: [esp+4] = 0C (12.)\n006832B0  INT3: [esp+4] = 0D2 (210.)\n006832B0  INT3: [esp+4] = 33 (51.)\n006832B0  INT3: [esp+4] = 85 (133.)\n006832B0  INT3: [esp+4] = 0B9 (185.)\n006832B0  INT3: [esp+4] = 0FC (252.)\n006832B0  INT3: [esp+4] = 0FF (255.)\n006832B0  INT3: [esp+4] = 6A (106.)\n</code></pre>\n</div>\n</body></html>",
            "votes": "7",
            "user": "blabb",
            "time": "Dec 10, 2016 at 8:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">If you look in your list, you will find the \"option: <b>(hidden)</b> ...\" command line options that OP is asking about. (And in several languages: 'masquée', 'verborgen', 'скрыто'.)</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">dinotaddsource isnt hidden as said by op</span>",
                    "time": null
                },
                {
                    "user": "Nemo XXX",
                    "text": "<span class=\"comment-copy\"><b>@blabb:</b> Thanks for looking into this. I really appreciate it! As other commenters have already pointed out, -donotaddsource is not one the hidden options. Actually, if <b>-dont_append_source</b> is specified, kindlegen will display <b>-donotaddsource</b>. I.e. they must have changed the name of this hidden option later.  I.e. <b>-donotaddsource</b> is rejected as a command line parameter.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the args are md5ed it appears see the updated answer</span>",
                    "time": null
                },
                {
                    "user": "Nemo XXX",
                    "text": "<span class=\"comment-copy\"><b>@blabb:</b> Thanks for the update!!! If you post the md5 hashes for: <b>option: (hidden) creates mobi for older devices.</b> and <b>option: (hidden) Webkit reader Compatible mobi will be built</b>, I'll accept the answer and award you the bounty.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you have basic reversing skills, then load the target in a debugger and put a breakpoint on GetCommandLine and start tracing from there until you reach where the app compares your command line parameter with the obfuscated ones.\n </p>\n</div>\n</body></html>",
            "votes": "-1",
            "user": "JKnot",
            "time": "Dec 7, 2016 at 12:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}