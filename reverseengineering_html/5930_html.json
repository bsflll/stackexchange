{
    "title": "Why jump to unconditional jumps?",
    "link": "https://reverseengineering.stackexchange.com/questions/5930/why-jump-to-unconditional-jumps",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have noticed many times whilst disassembling executables that often the compiler will produce jumps to other unconditional jumps, rather than simply jumping to the final destination. For example:\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/rlCkX.png\"/>\n </p>\n <p>\n  Notice instead of\n  <code>\n   jmp 0x100001634\n  </code>\n  it would have written\n  <code>\n   jmp 0x100001681\n  </code>\n  and skipped the two other jumps in between. Is there a particular reason for not doing so?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "574",
    "tags": [
        "disassembly",
        "assembly",
        "compilers"
    ],
    "user": "JamalS",
    "time": "Jul 24, 2014 at 10:39",
    "comments": [
        {
            "user": "Dmitry Janushkevich",
            "text": "<html><body><span class=\"comment-copy\">\n Likely due to a crappy optimizer. Noticed this on a few occasions as well. I could see a point where a conditional branch jumps to an unconditional one due to limited range, but in this case it clearly looks like compiler being stupid.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Paul",
            "text": "<html><body><span class=\"comment-copy\">\n If this is a release version it's like Dmitry said. Otherwise, it could be just jump table in debug PE.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Could this code be produced by an Optimized for Size compiler setting? I.e., if these labels are used anyway, the compiler chose to replace one 6-byte long jump with 2 2-byte short ones?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "JamalS",
            "text": "<html><body><span class=\"comment-copy\">\n @Jongware: Good idea; perhaps. The code was compiled with g++, with default settings.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In addition to what others have already mentioned with respect to Compiler Optimizations, there is another possibility. At times, malwares can perform control flow obfuscations by making use of a lot of opaque predicates (in this case, unconditional jumps).\n </p>\n <p>\n  In fact, if you perform an instruction trace using a pintool (DBI) on a malware, at times you will observe a lot of jmp instructions executed in sequence. You can observe these type of subroutines in malwares which make use of polymorphic engines. It can help deter reverse engineering as it alters the control flow while stepping through the code.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "c0d3inj3cT",
            "time": "Jul 28, 2014 at 16:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}