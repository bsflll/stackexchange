{
    "title": "What are the best practice methods for documenting research into the reverse engineering of a file format?",
    "link": "https://reverseengineering.stackexchange.com/questions/1579/what-are-the-best-practice-methods-for-documenting-research-into-the-reverse-eng",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I a conduct research requiring the reverse engineering file formats, and I am currently looking at ways of documenting that work.\n </p>\n <p>\n  On the web you will find resources that use box diagrams and free text. For example, this attempt to look at Microsoft Access:\n  <a href=\"https://github.com/brianb/mdbtools/blob/master/HACKING\">\n   https://github.com/brianb/mdbtools/blob/master/HACKING\n  </a>\n </p>\n <p>\n  This is fairly consistent with the approach taken in ISO specs for formats.\n </p>\n <p>\n  This type of work is part of what I do professionally but I haven't come across anything to help me store my information in a consistent and useful manner for anyone else - months down the line it might not even be useful to me.\n </p>\n <p>\n  Is there a 'community' best practice (methods, tools, authoring tools etc.) to help document research into a file format?\n </p>\n</div>\n</body></html>",
    "votes": "13",
    "answers": 4,
    "views": "1k",
    "tags": [
        "tools",
        "file-format",
        "digital-archeology"
    ],
    "user": "Ross Spencer",
    "time": "Apr 5, 2013 at 0:28",
    "comments": [
        {
            "user": "dyasta",
            "text": "<html><body><span class=\"comment-copy\">\n I haven't heard of anything along those lines; no standardized way to document file formats, and no specialized application to assist you.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Concur with V and only throwing out some thoughts.\n </p>\n <p>\n  In general would say that one, (of course), has to clearly denote holes\nas black or gray. As in\n  <em>\n   \"no idea\"\n  </em>\n  or\n  <em>\n   \"several possibilities\"\n  </em>\n  .\n </p>\n <p>\n  Beside file format specifications openly distributed I find the style\nused by RFC's to be one I adapt frequently. All depending on context\nusing such things as\n  <a href=\"http://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_Form\" rel=\"nofollow noreferrer\">\n   Augmented Backus–Naur Form\n  </a>\n  as shown\n  <a href=\"https://www.rfc-editor.org/rfc/rfc3986#appendix-A\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Use truth tables and logical expressions to assert unambiguity.\n </p>\n <p>\n  Else there is e.g.\n  <a href=\"http://www.3gpp.org/ftp/Specs/html-info/23040.htm\" rel=\"nofollow noreferrer\">\n   3GPP\n  </a>\n  and the like which one also can learn from.\n </p>\n <p>\n  If you want to go for the good ASCII style use tools like\n  <a href=\"http://www.asciiflow.com/\" rel=\"nofollow noreferrer\">\n   asciiflow\n  </a>\n  for flow diagrams etc. Have found myself that using ASCII\noften helps me writing more clear documents and split diagrams into\nlayers of more understandable form. Perhaps one can learn something from\n  <a href=\"http://www.phrack.org/archives/63/p63_0x0b_Advanced%20antiforensics%20:%20SELF_by_ripe%20&%20pluf.txt\" rel=\"nofollow noreferrer\">\n   phrack\n  </a>\n  as well.\n </p>\n <p>\n  If not plain text then LaTeX as it is very nice for organizing documents.\nSeparate out each section into own files that one include. Shuffling\naround sections become easy as do indexing etc. And the product looks\ngreat on paper. – This can of course also be done in some way with plain\ntext.\n </p>\n <p>\n  As with any approach (I) always use Git and commit very frequently with\nshort concise comments.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Community",
            "time": "Oct 7, 2021 at 6:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">+1 for <code>asciiflow</code>, very useful, and Augmented BNF</span>",
                    "time": null
                },
                {
                    "user": "hlovdal",
                    "text": "<span class=\"comment-copy\">An offline alternative to asciiflow is the editor JavE, <a href=\"http://jave.de/\" rel=\"nofollow noreferrer\">jave.de</a> (a standalone java application).</span>",
                    "time": null
                },
                {
                    "user": "Runium",
                    "text": "<span class=\"comment-copy\">@hlovdal:Great. That one brings back memories :). Long live the King btw ;)</span>",
                    "time": null
                },
                {
                    "user": "KulaGGin",
                    "text": "<span class=\"comment-copy\">Excuse me, what do you mean by \"Concur with V\"? There is no one named V and no one's name starts with V here.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In the past my reverse engineering efforts of file formats were\n  <em>\n   documented in source\n  </em>\n  , i.e.\n  <a href=\"http://www.sweetscape.com/010editor/templates.html\" rel=\"nofollow\">\n   010 Editor binary templates\n  </a>\n  . If you know C, this is pretty descriptive, but it has its limitations and at times it can get a bit convoluted when trying to express certain more exotic concepts. Another issue with the tool as such is the slowness with larger scripts on larger files and the lack of an extension mechanism beyond the scripts and binary templates (such as plugins).\n </p>\n <p>\n  A widely used alternative, to mentioned\n  <a href=\"http://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_Form\" rel=\"nofollow\">\n   Augmented BNF\n  </a>\n  , is\n  <a href=\"http://en.wikipedia.org/wiki/X.690\" rel=\"nofollow\">\n   ASN.1\n  </a>\n  (\n  <a href=\"http://en.wikipedia.org/w/index.php?title=X.690&oldid=546054870\" rel=\"nofollow\">\n   permalink\n  </a>\n  ). I prefer the BER encoding (see previous link to Wikipedia article), but your mileage may vary.\n </p>\n <p>\n  For graphical representations I have used LaTeX (with\n  <a href=\"http://www.tug.org/texlive/Contents/live/texmf-dist/doc/latex/bytefield/bytefield.pdf\" rel=\"nofollow\">\n   <code>\n    bytefield\n   </code>\n  </a>\n  , PDF) and Visio.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Apr 5, 2013 at 3:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Like @0xC0000022L, I tend to document first in source, or in something that can immediately be re-used in a tool (unlike a pure text documentation).\n </p>\n <p>\n  A generic approach is to use a hex editor that has some abilities to annotate or describe structures\n </p>\n <h2>\n  with coloring abilities\n </h2>\n <ul>\n  <li>\n   <a href=\"http://sourceforge.net/projects/wxhexeditor/\" rel=\"nofollow\">\n    wxHexEditor\n   </a>\n   nice, simple, good\n  </li>\n  <li>\n   <a href=\"http://phenoelit.org/BinID/BinID2.exe\" rel=\"nofollow\">\n    BinID2\n   </a>\n   lightweight, straightforward\n  </li>\n </ul>\n <h2>\n  with templates\n </h2>\n <ul>\n  <li>\n   <a href=\"http://www.sweetscape.com/010editor/\" rel=\"nofollow\">\n    010 editor\n   </a>\n   many templates available, lacks easy manual coloring, but recommended\n  </li>\n  <li>\n   <a href=\"http://www.hexworkshop.com/\" rel=\"nofollow\">\n    hex workshop\n   </a>\n   nice competitor, limited scripting and availability\n  </li>\n  <li>\n   <a href=\"http://www.hhdsoftware.com/free-hex-editor\" rel=\"nofollow\">\n    Hex editor Neo\n   </a>\n   interesting features (multiple selections) but heavy\n  </li>\n </ul>\n <h2>\n  with structures\n </h2>\n <ul>\n  <li>\n   <a href=\"https://www.hex-rays.com/products/ida/index.shtml\" rel=\"nofollow\">\n    IDA\n   </a>\n   : this can sound weird to use IDA as a hex editor, but you can create structures (or import them from a .H file), then apply them, create a script to chain them - and in the end you have a ready-made IDAPython script and the structures ready to use for the next time you encounter that format: you build the future tools progressively and skip the documentation text part ;)\n   <ul>\n    <li>\n     even better, it enables you to re-create the file from scratch with these defined structures, which is good for experimenting/fuzzing afterwards.\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Ange",
            "time": "Apr 15, 2013 at 4:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Neo looks promising.</span>",
                    "time": null
                },
                {
                    "user": "Ross Spencer",
                    "text": "<span class=\"comment-copy\">Thanks for the info. IDA disassembler? <a href=\"https://www.hex-rays.com/products/ida/index.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/index.shtml</a></span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">obviously - added the link</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">ok, maybe not so obvious then - I'm officially weird now ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I can't think of anything more \"standard\" than block diagrams, a pseudo-code implementation, and possibly a reference implementation.\n </p>\n <p>\n  Take for example the FIPS standard\n  <a href=\"http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\" rel=\"nofollow\">\n   here\n  </a>\n  or the LUKS standard document.  They provide a basic narrative of functionality, pseudo-code, and in the case of OGG/OGV even a full reference implementation.  A standard you took apart, in my opinion, should be documented the same way a standard you designed is documented.  Some fields may be \"unknown\" or \"seems to be magic, just leave it\".\n </p>\n <p>\n  I don't think you'll find anything more standard than that is.  If you don't mind posting a document and a parser, github/bitbucket/etc are great.  Some of the other file format questions point to Wotsit.org (I look there), so submitting a link there could be a good thing as well.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "RobotHumans",
            "time": "Apr 5, 2013 at 0:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}