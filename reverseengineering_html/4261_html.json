{
    "title": "Difference between 'add' and 'adds' in ARM assembler?",
    "link": "https://reverseengineering.stackexchange.com/questions/4261/difference-between-add-and-adds-in-arm-assembler",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am starting to look a bit more precisely at ARM assembler and I looked up some dumps from\n  <code>\n   objdump\n  </code>\n  . I saw a lot of instruction (\n  <code>\n   add\n  </code>\n  is not the only one) with an extra\n  <code>\n   s\n  </code>\n  at the end (\n  <code>\n   adds\n  </code>\n  ,\n  <code>\n   subs\n  </code>\n  , ...).\n </p>\n <p>\n  I looked a bit to the ARM documentation and it seems to mean something significant, but I can't figure out exactly what (the documentation I found about it seemed extremely obscure to me).\n </p>\n <p>\n  Has somebody some insight on what is the meaning of this extra\n  <code>\n   s\n  </code>\n  added at the end of some ARM instructions ?\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "60k",
    "tags": [
        "arm",
        "gas"
    ],
    "user": "perror",
    "time": "May 4, 2014 at 18:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Usual\n  <code>\n   ADD\n  </code>\n  doesn't update flags.\n  <code>\n   ADDS\n  </code>\n  does.\nSee better documentation at\n  <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/Cihcjfjg.html\" rel=\"noreferrer\">\n   arm infocenter\n  </a>\n  .\nAs it wrote there:\n </p>\n <blockquote>\n  <p>\n   If S is specified, these instructions update the N, Z, C and V flags according to the result.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "11",
            "user": "perror",
            "time": "May 5, 2014 at 22:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Iwillnotexist Idonotexist",
                    "text": "<span class=\"comment-copy\">@perror If you want another concrete example, consider a loop <code>while(--i){...}</code>. One way to implement it is to have <code>sub reg, #1</code> followed by an explicit compare to zero (which will set the <code>Z</code> zero flag when reg becomes 0), then a predicated branch. With <code>subs reg, #1</code> the <code>Z</code> flag is implicitly updated, therefore no explicit comparison is required.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The extra\n  <code>\n   s\n  </code>\n  character added to the ARM instruction mean that the\n  <strong>\n   APSR\n  </strong>\n  (Application Processor Status Register) will be updated depending on the outcome of the instruction.\n </p>\n <p>\n  The status register (APSR) contain four flags\n  <code>\n   N\n  </code>\n  ,\n  <code>\n   Z\n  </code>\n  ,\n  <code>\n   C\n  </code>\n  and\n  <code>\n   V\n  </code>\n  which means the following:\n </p>\n <ul>\n  <li>\n   <code>\n    N == 0\n   </code>\n   : The result is greater or equal to 0, which is considered positive, and so the\n   <code>\n    N\n   </code>\n   (negative) bit is set to 0.\n  </li>\n  <li>\n   <code>\n    Z == 1\n   </code>\n   : The result is 0, so the\n   <code>\n    Z\n   </code>\n   (zero) bit is set to 1.\n  </li>\n  <li>\n   <code>\n    C == 1\n   </code>\n   : We lost some data because the result did not fit into 32 bits, so the processor indicates this by setting\n   <code>\n    C\n   </code>\n   (carry) to 1.\n  </li>\n  <li>\n   <code>\n    V = 0\n   </code>\n   : From a two's complement signed-arithmetic viewpoint, 0xffffffff really means -1, so the operation we did was really (-1) + 1 = 0. That operation clearly does not overflow, so\n   <code>\n    V\n   </code>\n   (overflow) is set to 0.\n  </li>\n </ul>\n <p>\n  More information about the\n  <em>\n   condition flags\n  </em>\n  in the ARM architecture can be found\n  <a href=\"http://community.arm.com/groups/processors/blog/2010/07/16/condition-codes-1-condition-flags-and-codes\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "13",
            "user": "perror",
            "time": "May 4, 2014 at 22:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">One additional point: depending on the disassembler/settings, the Thumb-1 instructions (short, 16-bit encodings for a subset of instructions) may be displayed without the S suffix, even though they, in fact, do update flags. See Table 4-9 <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.dui0473j/dom1359731157381.html\" rel=\"nofollow noreferrer\">here</a>.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Is it because it is the default behavior of the instruction in thumb mode, or the opcodes are really different but the mnemonic does not show up the difference ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">The former. In Thumb-1, all ALU instructions set the flags and so I guess the creators dropped the suffix as \"unnecessary\". With Thumb-2, full equivalence with the ARM set was achieved and you can choose if you want to set flags or not. Thus the move to UAL and explicit S suffix.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Shouldn't the explanation to <code>N == 0</code> be <code>The result is greater than or equal to 0 ...</code> ?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">@perror There is another tricky thing about flags which is called flexible second operand: C flag can be updated in some cases even if S suffix does not exist in the command, see <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/CIHDDCIF.html\" rel=\"nofollow noreferrer\">infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/â€¦</a> for more details</span>",
                    "time": null
                }
            ]
        }
    ]
}