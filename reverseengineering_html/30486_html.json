{
    "title": "TP-Link Manual Installation",
    "link": "https://reverseengineering.stackexchange.com/questions/30486/tp-link-manual-installation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Before starting my researches, i was just curious about how my router could work. I found some posts about reversing and emulating TP-LINK routers, so i bought one.\nFirst, i successfully extracted the .bin firmware, i have the rootfs and access to all files of the firmware. (i used the firmware-mod-kit to extract)\nI tried to modify the web server and install php on it.\n </p>\n <p>\n  Firmware :\n  <a href=\"https://www.tp-link.com/en/support/download/tl-wr841n/#Firmware\" rel=\"nofollow noreferrer\">\n   https://www.tp-link.com/en/support/download/tl-wr841n/#Firmware\n  </a>\n </p>\n <p>\n  So i had a lot of questions (and i'll do others posts for them) but one of them was simply : can I manually 'install' anything inside the firmware/inside the router/inside the rootfs. For example, to install php, you would do :\n </p>\n <pre><code>sudo apt install php<version>\n</code></pre>\n <p>\n  But at the time i can't have a shell and a router don't have a package manager, can i manually install PHP, nmap or any other package. I know every packages are not installed the same way, but how can I know which i can install, and which i cannot ?\n </p>\n <p>\n  And how to know the way to install them manually ?\n </p>\n <p>\n  Thanks everyone before everything!\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "259",
    "tags": [
        "firmware"
    ],
    "user": "le_pabo",
    "time": "Jun 9, 2022 at 1:19",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<html><body><span class=\"comment-copy\">\n I have just checked and found that\n <a href=\"https://openwrt.org/toh/views/toh_minimal_all?dataflt%5B0%5D=brand_%3DTP-Link\" rel=\"nofollow noreferrer\">\n  OpenWRT support your device\n </a>\n . So if you want to get a shell, install OpenWRT (the easiest way I can think of). But the problem is, PHP is big and may not fit your router's internal storage. Nmap might be OK\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<html><body><span class=\"comment-copy\">\n Commercial router firmware usually don't come with apt or dpkg support so you won't find a package manager there because they are not designed to be changed at run-time. Embedded devices are usually shipped with a firmware that does not change, if you get an update then this update updates the whole firmware. If you want to install something you have to do it manually by replacing binaries and dependent files.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If and when you can get shell on the device, you will probably not be able to use\n  <code>\n   apt\n  </code>\n  to install software.\n  <code>\n   apt\n  </code>\n  is a package manger that several Linux distributions include, namely Debian and its derivatives like Ubuntu.\n  <code>\n   apt\n  </code>\n  has a configuration file that points to servers that contain software built for your distribution. For example, Ubuntu uses the file\n  <code>\n   /etc/apt/sources.list\n  </code>\n  to find the servers containing software that will work on specifically\n  <em>\n   your\n  </em>\n  version of Ubuntu.\n </p>\n <p>\n  Dynamically linked software must be linked against your existing (on your machine) libraries in order to work properly. There's a team of people behind the scenes making this happen. Many of them them are doing it just for the love of the sport.\n </p>\n <p>\n  <code>\n   apt\n  </code>\n  is simply a package manager. It looks at some servers you've told it to look at, then downloads and attempts to install some software you ask it to. On most common distributions like Debian or Ubuntu, that list of servers has been preconfigured. If you run\n  <code>\n   apt\n  </code>\n  with the same configuration on a different distribution, the software downloaded will fail to run because that machine doesn't have the same libraries (or architecture).\n </p>\n <p>\n  There may be some exceptions.\n </p>\n <p>\n  Maybe a source that you can configure that downloads and installs\n  <em>\n   static\n  </em>\n  builds of software. Static builds don't require you to have a specific library, only a specific architecture. This requires that you install a static build of\n  <code>\n   apt\n  </code>\n  or another package manager and are actually able to find one of these sources. I'm personally not aware of any, but haven't looked.\n </p>\n <p>\n  DD-WRT and friends (completely custom firmware for routers -- none of the original firmware remains) have their own package managers. These can be used to install a limited range of software. This is not what you are asking about, but I thought it was good to  include.\n </p>\n <p>\n  All of the above is informational.\nTake it in, but ignore it in regards to your main question.\n </p>\n <blockquote>\n  <p>\n   can I manually 'install' anything inside the firmware/inside the router/inside the rootfs.\n  </p>\n </blockquote>\n <p>\n  There are 2 ways I can think of to \"install\" or run a program on your router.\n </p>\n <h3>\n  1: Get a shell, upload to /tmp/ or external storage\n </h3>\n <p>\n  Get a shell. Preferably a root shell.\n </p>\n <p>\n  Maybe there's an existing vulnerability that will help you get a shell.\n </p>\n <p>\n  Maybe you can crack open the router and discover a serial connection that prompts you with a login or a straight up shell?\n </p>\n <p>\n  If you can get a shell on the router, you can probably download some statically linked software to\n  <code>\n   /tmp/\n  </code>\n  . A tool like curl, wget, an ssh server supporting scp, tftp, ftp, or a mechanism present on the web interface to upload a file may help you.\n </p>\n <p>\n  Once you get a file on the system, you can hope the tool that helped you get it there made it\n  <em>\n   executable\n  </em>\n  . See\n  <a href=\"https://linux.die.net/man/1/chmod\" rel=\"nofollow noreferrer\">\n   chmod\n  </a>\n  . The command\n  <code>\n   ls -la\n  </code>\n  will help you determine if your file is executable. If you can run\n  <code>\n   chmod +x YOUR_FILE\n  </code>\n  , you're in business. Run the program.\n </p>\n <p>\n  This approach has the limitation that you must store your file in RAM. Statically linked binaries are large. SOHO routers don't have much RAM beyond what they need. If your router has a USB port, put your binary (program) on a flash drive and plug it in. With the right formatting, your router should see it. You may need to do some more research to figure out where it is or how to mount it. Even this way, you may run in to RAM limitations. It probably won't be obvious if this is the case. There typically isn't a simply massage stating as much.\n </p>\n <h3>\n  2: Modify and flash the firmware\n </h3>\n <p>\n  This is a very big rabbit hole.\n </p>\n <p>\n  It usually involves rebuilding the filesystem archive format.\nSometimes companies use custom variations of\n  <code>\n   squashfs\n  </code>\n  .\n  <code>\n   sasquatch\n  </code>\n  in conjunction with\n  <code>\n   binwalk\n  </code>\n  is often used to extract from these filesystems.\nYou'll have a harder time putting the filesystems back together.\nAfter that You'll have to repackage in to the (most likely) proprietary firmware format.\nThis will be at a minimum checksummed and possibly signed.\nIn its most simplistic form, signing means that the vendor can prove that they provided the firmware and that you didn't.\n </p>\n <p>\n  If you can modify the firmware, you either have to upload it through some interface (web server, tftp, etc), or flash it directly. The former presents a high risk of bricking your device.\n </p>\n <h3>\n  3: Conclusion\n </h3>\n <ul>\n  <li>\n   Compile a static binary for the router's architecture\n  </li>\n  <li>\n   Try to get a shell\n  </li>\n  <li>\n   Figure our how to upload a binary\n   <ul>\n    <li>\n     Hope there's enough RAM for it\n     <ul>\n      <li>\n       A simple \"Hello World\" would be a good start\n      </li>\n     </ul>\n    </li>\n    <li>\n     Make it executable\n    </li>\n    <li>\n     Execute your binary\n     <ul>\n      <li>\n       If you have a shell, you might even be able to see it\n      </li>\n     </ul>\n    </li>\n   </ul>\n  </li>\n </ul>\n <h3>\n  Future Askings (asked or researched)\n </h3>\n <ul>\n  <li>\n   How does one search for existing vulnerabilities that provide shell on a platform?\n   <ul>\n    <li>\n     What mechanisms prevent one from downgrading firmware on a router?\n    </li>\n   </ul>\n  </li>\n  <li>\n   How is it possible to determine the architecture of my machine?\n  </li>\n  <li>\n   How can a program be statically linked in Linux?\n   <ul>\n    <li>\n     Can statically linked programs be reduced in size?\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Matthew Tingum",
            "time": "Jun 8, 2022 at 7:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "le_pabo",
                    "text": "<span class=\"comment-copy\">Hello Matthew, first of all thanks for taking your time to answer me. I tried to inject a reverse shell inside the firmware by modifying it and it did not work and now, thanks to you, i know why. I just checked and they were all dynamically linked. And i'm sure at 70% that one of the lib could be missing. I'll now look for static linked binaries.</span>",
                    "time": null
                },
                {
                    "user": "Matthew Tingum",
                    "text": "<span class=\"comment-copy\">How did you inject the reverse shell? It's possible that this may have failed for additional reasons. I'm interested to know the model of the device you're working on to better help.</span>",
                    "time": null
                },
                {
                    "user": "le_pabo",
                    "text": "<span class=\"comment-copy\">I did not really injected it, I added it to the /bin/ folder and rebuilt the firmware to upload it. I use a TL WR841N, you can find the firmware [here](tp-link.com/en/support/download/tl-wr841n/#Firmware).  I downloaded netcat <a href=\"https://github.com/darkerego/mips-binaries\" rel=\"nofollow noreferrer\">from this repo</a>.  After adding netcat, I edited the 'rcS' script in '/etc/init.d/' folder and added a netcat command, but bot listener  (-lvnp) and reverse shell (connect to my listener) seems to be ignored. I'll try to check if my command are executed by using echo or something else</span>",
                    "time": null
                },
                {
                    "user": "Matthew Tingum",
                    "text": "<span class=\"comment-copy\">I think we're far apart on our mutual understanding of <i>how</i> the firmware was rebuilt and re-flashed. My biggest concern is that your code isn't actually running. Maybe you flashed through the web interface. It could have given you a success message but actually failed. IPTables rules could be standing in your way. Maybe an exercise for you is figuring out how to write a program that will discard all IPTables rules. I don't think that's your problem but its a start.</span>",
                    "time": null
                },
                {
                    "user": "Matthew Tingum",
                    "text": "<span class=\"comment-copy\">Try to find a simple success indicator for your reflash. Change a letter in a static HTML page. Verify that it changes.</span>",
                    "time": null
                }
            ]
        }
    ]
}