{
    "title": "GDB find string strange results",
    "link": "https://reverseengineering.stackexchange.com/questions/14746/gdb-find-string-strange-results",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm playing with gdb and strange things are happening. I wanted to find some address in memory where string \"/bin/sh\" is located, and gdb says it found it. But when I examine the memory there, the string there is totally different.\n </p>\n <p>\n  Can you please help me to find out what this behaviour means, and how can I really find the adress of the string?\n </p>\n <pre><code>(gdb) find 0xb7ecffb0,+999999, \"/bin/sh\"\n0xb7fba23f\n1 pattern found.\n(gdb) x/s 0xb7fba23f\n0xb7fba23f:  \"KIND in __gen_tempname\\\"\"\n</code></pre>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "3k",
    "tags": [
        "debugging",
        "gdb",
        "memory",
        "strings"
    ],
    "user": "Michal Sládeček",
    "time": "Feb 24, 2017 at 19:27",
    "comments": [
        {
            "user": "Sc0ttyD",
            "text": "<html><body><span class=\"comment-copy\">\n Protostar 6? I'm getting exactly the same problem. Did you solve it?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  GDB couldn't find real strings most of the time. But, you can find the offset of the string from the local object file and adjust it with dynamic loading information.\n </p>\n <p>\n  From\n  <code>\n   info proc map\n  </code>\n  :\n </p>\n <pre><code>Mapped address spaces:\n\nStart Addr   End Addr       Size     Offset objfile\n 0x8048000  0x8049000     0x1000          0        /opt/protostar/bin/stack6\n 0x8049000  0x804a000     0x1000          0        /opt/protostar/bin/stack6\n 0x804a000  0x806b000    0x21000          0           [heap]\n0xb7e96000 0xb7e97000     0x1000          0        \n0xb7e97000 0xb7fd5000   0x13e000          0         /lib/libc-2.11.2.so\n0xb7fd5000 0xb7fd6000     0x1000   0x13e000         /lib/libc-2.11.2.so\n0xb7fd6000 0xb7fd8000     0x2000   0x13e000         /lib/libc-2.11.2.so\n0xb7fd8000 0xb7fd9000     0x1000   0x140000         /lib/libc-2.11.2.so\n                                      ...   \n</code></pre>\n <p>\n  And from\n  <code>\n   /lib/libc-2.11.2.so\n  </code>\n  file:\n </p>\n <pre><code>user@protostar:/opt/protostar/bin$ xxd -u /lib/libc-2.11.2.so |grep -B 1 bin/sh\n011f3b0: 6600 696E 6974 7900 6E61 6E00 2D63 002F  f.inity.nan.-c./\n011f3c0: 6269 6E2F 7368 0065 7869 7420 3000 6361  bin/sh.exit 0.ca\n</code></pre>\n <p>\n  Use this info to find static address of\n  <code>\n   /bin/sh\n  </code>\n  string in virtual address space:\n </p>\n <pre><code>(gdb) x/s 0xb7e97000+0x011f3bf\n0xb7fb63bf:  \"/bin/sh\"\n</code></pre>\n <p>\n  I know this is not an answer to your first question about why GDB find shows this behavior when finding strings. I couldn't find anything about that. I used Protostar Stack6 challenge binary and exploit-exercises-protostar-2.iso environment, so addresses must be the same. There is also\n  <code>\n   /bin/csh\n  </code>\n  string in the same shared object file. You can try to find that address using this method.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Aug 2, 2020 at 11:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}