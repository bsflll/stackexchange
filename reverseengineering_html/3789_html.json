{
    "title": "Decompilation techniques for DOS .COM files",
    "link": "https://reverseengineering.stackexchange.com/questions/3789/decompilation-techniques-for-dos-com-files",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've found a binary copy of a DOS freeware game I was fond of back in the day (\n  <a href=\"http://dosgamer.com/firefighter/\">\n   Firefighter\n  </a>\n  , downloadable as\n  <code>\n   FIRE.COM\n  </code>\n  ) but the source code is not available. I'd like to re-implement it in C or Python using Unix curses and while I'm fully competent to do that part, I know almost nothing about tools for reverse-engineering and decompiling DOS .COM file binaries.\n </p>\n <p>\n  Going by documentation that says .COM is headerless raw machine code, I tried running\n  <code>\n   objdump -D -b binary -m i386\n  </code>\n  on it. The result didn’t look valid.\n  <code>\n   objdump -D -b binary -m i8086 –adjust-vma=0×100\n  </code>\n  appeared to do the trick as did using NASM with\n  <code>\n   ndisasm -b 16 -a -o 0×100\n  </code>\n  and both of those do seem to produce plausible\n  <em>\n   assembly\n  </em>\n  listings.\n </p>\n <p>\n  Ideally, though, I'm looking for something that decompiles and renders to C in\n  <em>\n   as-if-it-were-assembler\n  </em>\n  style with generated variable names and useful annotations on the DOS traps. I understand that such a beast may not exist, but on the chance one does I'm seeking recommendations.\n </p>\n</div>\n</body></html>",
    "votes": "16",
    "answers": 6,
    "views": "15k",
    "tags": [
        "tools",
        "decompilation",
        "decompiler",
        "dos-com"
    ],
    "user": "ESR",
    "time": "Mar 8, 2014 at 21:26",
    "comments": [
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n Welcome to RE! Have you searched and looked at the existing questions on the site?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ESR",
            "text": "<html><body><span class=\"comment-copy\">\n How is this not in scope under \"tools commonly used for reverse engineering hardware or software\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://reverseengineering.stackexchange.com/q/1854/189\">\n  Have you looked through the existing questions?\n </a>\n Have you tried out any of the solutions already provided? Where/Why have the existing questions failed? This question shows absolutely no previous research.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "grkvlt",
            "text": "<html><body><span class=\"comment-copy\">\n I have updated the question; Can the on hold status be removed?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "aybe",
            "text": "<html><body><span class=\"comment-copy\">\n Maybe you can get some hints here\n <a href=\"http://www.program-transformation.org/Transform/MachineCodeDecompilers\" rel=\"nofollow noreferrer\">\n  program-transformation.org/Transform/MachineCodeDecompilers\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My answer is a little late; newcomer to this site. The Decompiler project was initiated in order to decompile MS-DOS EXE and COM binaries. The project has both a command-line and a GUI tool:\n </p>\n <p>\n  <a href=\"https://sourceforge.net/projects/decompiler/\" rel=\"noreferrer\">\n   https://sourceforge.net/projects/decompiler/\n  </a>\n </p>\n <p>\n  Use the following command with the command-line tool to decompile COM programs:\n </p>\n <pre><code>decompile --default-to ms-dos-com myprog.com\n</code></pre>\n <p>\n  In the GUI, use the menu command\n  <code>\n   File\n  </code>\n  >\n  <code>\n   Open as...\n  </code>\n  to open the COM file and specify a start address like 0800:0100.\n </p>\n</div>\n</body></html>",
            "votes": "7",
            "user": "John Källén",
            "time": "Jul 25, 2015 at 8:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA Pro and a number of other disassemblers will disassemble your file, assuming that it isn't compressed or otherwise obfuscated.  But this is only the first step in producing a working assembly language program, which you will need if you are to translate it into a higher language.\n </p>\n <p>\n  Essentially you are looking at two projects.  The first is to produce a working assembly language version of your game.  The second is to translate the game mechanics and logic into C++ or whatever.  The first is easier than the second.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Paddywhacker",
            "time": "Apr 14, 2014 at 4:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I recently found a DOS program which turns .COM and .EXE into a simple \"pseudo-code\".\nThe program is   ---   exe2c.zip\n </p>\n <p>\n  <a href=\"http://www.codeforge.com/dlpre/201558/cb2e19437871.zip__.html\" rel=\"nofollow\">\n   http://www.codeforge.com/dlpre/201558/cb2e19437871.zip__.html\n  </a>\n </p>\n <p>\n  Not an \"excellent\" tool, but i found it useful.\nStart by executing    ENVMNU.EXE    and then entering the .COM or .EXE filename.\n---(hint?)  If better results are necessary, use the individual modules\n( such as the DOS to ASM module ) and hand-edit ASM discrepancies \nthen feed them to the ASM to C module and observe the results.\n </p>\n <p>\n  -- William Gallant\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "user4069",
            "time": "Aug 29, 2014 at 8:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  no beast exist that will decompile 16 bit com program\n  \n\n  if you prefer to debug it look for grdb from ladsoft\n  \n\n  also have in hand a copy of ralf browns interrupt list for all the\n  \n\n  int 21 / int 10 SetCursor / GetCursor calls\n </p>\n <p>\n  also make sure you rename the downloaded exe to be 8dot3 compatible\n  \n\n  (name less than 8 charecters)\n </p>\n <pre><code>GRDB.EXE firefi.com    \n\nGet Real Debugger Version 9.6  Copyright (c) 1997-2009 David Lindauer (LADSoft)\nGRDB comes with ABSOLUTELY NO WARRANTY, for details type `?g'\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `?gr' for details\n\nDPMI Start code hooked\nHistory enabled\neax:00000000 ebx:00000000 ecx:00007500 edx:00000000 esi:00000000 edi:00000000\nebp:00000000 esp:0000FFEE eip:00000100 flag:00000202 NV UP EI PL NZ NA PO NC\nds:1F25 es:1F25 fs:1F25 gs:1F25 ss:1F25 cs:1F25\n1F25:0100 E9 25 27       jmp          2828\nSize: 00007500\n->  \n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 21, 2014 at 0:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As I review your application (Fire.COM), I think you should use some DOS debugger like Turbo Debugger 5.0 to debug and reverse this application because I have some encrypted stage in it. If you want to \"decompile\" these application to C code, it's very hard, I had tried some tools in the past (2008) but there was not a good tool to do it. I also got a C source but there was many inline assembly in it.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "tuantm",
            "time": "Aug 29, 2014 at 7:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For\n  <code>\n   .com\n  </code>\n  (MS DOS) programs I use ndisasm (Netwide Disassembler) as mentioned in\n  <a href=\"https://stackoverflow.com/a/4404700/851957\">\n   this\n  </a>\n  answer. It is very simple, just work without any magic.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "MarianD",
            "time": "Nov 4, 2021 at 11:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}