{
    "title": "Detect deadloop in PinTool",
    "link": "https://reverseengineering.stackexchange.com/questions/12290/detect-deadloop-in-pintool",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am writing a PinTool, which can manipulate certain register/memory value. However, after manipulation, one challenge I am facing now, is the\n  <code>\n   deadloop\n  </code>\n  .\n </p>\n <p>\n  In particular, due to the frequent manipulation of certain register value, it is indeed common to create\n  <code>\n   deadloop\n  </code>\n  in the execution trace. I am thinking to detect such case, and terminate the execution.\n </p>\n <p>\n  <strong>\n   So here is my question, what is a good practice to detect a\n   <code>\n    deadloop\n   </code>\n   in a PinTool?\n  </strong>\n  I can come up with some naive solutions, say, record the executed instructions, and if certain instruction has been executed for a large amount of times, just terminate the execution.\n </p>\n <p>\n  Could anyone help me on this issue? Thank you.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "394",
    "tags": [
        "pintool"
    ],
    "user": "lllllllllllll",
    "time": "Mar 25, 2016 at 17:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   <p>\n    Open debugger and attach to the pin executable to check if the dead loop is in the pin itself. This is highly unlikely and the most probable cause is the tool you've written.\n   </p>\n  </li>\n  <li>\n   <p>\n    Do the same for the pintool. Pintool is in the target process. So attache debugger to it.\n   </p>\n  </li>\n </ol>\n <p>\n  The debugger should show you where the problem is. Once the area identified, you can open the tool in IDA to do further inspection or \"connect\" your source to debugger.\n </p>\n <p>\n  Another way, is to log every Trace or basic block that is executing - check in the examples. This log should also show you the problematic area.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "PhoeniX",
            "time": "May 27, 2017 at 14:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I assume by deadloop you mean infinite loop.\n </p>\n <p>\n  Generally, the loop should have one or more exit condition. The exit condition has one of the control-transfer instructions (jz, jg, ja...) that keeps the loop going. So it's enough to log the control-transfer instructions.\n </p>\n <p>\n  Logging the instructions can be expensive, and you may need to narrow the algorithm to specific thread and module.\n </p>\n <p>\n  You may also want to consider to diagnose the infinite loops to know more about the cause before implementing algorithm to detect it.\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Attila",
            "time": "Apr 2, 2016 at 0:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">I think that by dead loop he meant dead loop code which isn't executed after registry manipulation.</span>",
                    "time": null
                }
            ]
        }
    ]
}