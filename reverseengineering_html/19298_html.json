{
    "title": "Where can I find documentation for the name mangling scheme used by SunPro CC",
    "link": "https://reverseengineering.stackexchange.com/questions/19298/where-can-i-find-documentation-for-the-name-mangling-scheme-used-by-sunpro-cc",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a few SPARC binaries that have been compiled with what seems to be the SunPro CC compiler. The symbols in the binary are referring to a very early C++ implementation (pre-namespaces) and look like this:\n </p>\n <pre><code>__0oHistreamrsRUl.\n__0oHistreamrsRi.\n__0oHistreamrsRf.\n__0oKistrstreamdtv.\n__0oHistreamrsPc.\n__0oKistrstreamctPCc.\n__0oNIostream_initdtv.\n__0oNIostream_initctv.\n</code></pre>\n <p>\n  Looking at these, I'm guessing that they correspond to the following methods:\n </p>\n <pre><code>istream::operator >>(unsigned long);\nistream::operator >>(int);\nistream::operator >>(float);\nistream::~istream();\nistream::operator >>(char *);\nistream::operator(const char *);\nostream_init::~ostream_init();\nostream_init::ostream_init();\n</code></pre>\n <p>\n  To make further progress, I want to understand the mangling scheme used here, but my Google-fu is too weak. Where can I find documentation on the name mangling scheme used here?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "197",
    "tags": [
        "c++",
        "sparc",
        "name-mangling"
    ],
    "user": "John Källén",
    "time": "Sep 9, 2018 at 11:44",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<html><body><span class=\"comment-copy\">\n No namespace support?  That has to be back in the Sun Workshop days.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "John Källén",
            "text": "<html><body><span class=\"comment-copy\">\n The binary is over 15 years old. I can make some guesses as to the mangling scheme (\n <code>\n  __0\n </code>\n prefix,\n <code>\n  H\n </code>\n = symbol of 7 chars follows, etc) but it would be nice to have a reference. I've searched open source repositories hoping to find a demangler but haven't found one that understands this particular demangling scheme.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n I wonder if someone on Retrocomputing can find the info...\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I found the following documentation on archive.org, as part of Sun WorkShop™ for Solaris 2.x\n </p>\n <p>\n  <a href=\"https://archive.org/download/SunWorkshopVol5No1/Sun%20WorkShop%E2%84%A2%20for%20Solaris%202.x%20Volume%205%20Number%201.iso/SPROmrcpl%2Freloc%2FSUNWspro%2FSC4.2%2FREADMEs%2Fmangling.ps\" rel=\"nofollow noreferrer\">\n   mangling.ps\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Smx",
            "time": "Jun 4, 2020 at 22:18",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You should be able to use\n  <code>\n   c++filt\n  </code>\n  directly. Pay attention to not use the one from\n  <code>\n   binutils\n  </code>\n  . Make sure to use the right install path, eg:\n </p>\n <ul>\n  <li>\n   <code>\n    /opt/SolarisStudio/solarisstudio12.3/prod/bin/c++filt\n   </code>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "2",
            "user": "tibar",
            "time": "Sep 10, 2018 at 7:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">while this helps with the specific problem, it does not actually address the question as asked; are there any docs on the mangling scheme used?</span>",
                    "time": null
                },
                {
                    "user": "tibar",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky That's an actual pretty good exercise to do then ! If OP has access to compiler, it should be possible to write the documentation (eg. <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling\" rel=\"nofollow noreferrer\">itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling</a>)</span>",
                    "time": null
                }
            ]
        }
    ]
}