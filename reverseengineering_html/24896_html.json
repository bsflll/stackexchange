{
    "title": "How to use Ghidra to work with VM obfuscated binaries?",
    "link": "https://reverseengineering.stackexchange.com/questions/24896/how-to-use-ghidra-to-work-with-vm-obfuscated-binaries",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  By \"VM obfuscated binary\", I mean a binary that contains one or more implementations of a VM internally, and also some bytecode that can run on this VM. One of the reasons why this binary is this way, is to obfuscate some logic in the byte code. I see that\n  <a href=\"https://reverseengineering.stackexchange.com/questions/3969/can-ida-pro-automatically-deal-with-vm-obfuscated-binaries\">\n   a similar question\n  </a>\n  has been asked for IDA Pro. The answer to that question indicated that IDA Pro does not support disassembly of such bytecode out of the box, but that there is a plugin that can help.\n  <a href=\"https://reverseengineering.stackexchange.com/questions/21375/custom-virtual-machine-protection\">\n   Another question\n  </a>\n  is more general, not specific to any tool like IDA Pro, Ghidra, etc.\n </p>\n <p>\n  NB: I'm not asking about the case where a binary is run in a virtual machine, say, Virtual Box, for example because it is suspected of being malware and running it in a virtual machine\n  <a href=\"https://reverseengineering.stackexchange.com/questions/23/how-can-i-analyze-a-potentially-harmful-binary-safely\">\n   is a form of protection\n  </a>\n  . Various questions have been asked on how to use IDA Pro,\n  <a href=\"https://reverseengineering.stackexchange.com/questions/19827/debugging-a-process-running-in-a-virtual-machine-with-radare2\">\n   radare2\n  </a>\n  , etc., to reverse engineer such a binary being run in a virtual machine. In the case of interest, we are talking about a binary that implements its own VM internally, and not about some external VM like Virtual Box.\n </p>\n <p>\n  So, it is not a problem disassembling the parts of the binary that implement the VM. The problem at hand is the bytecode. The bytecode architecture is not natively supported by Ghidra, so I'm working on using sleigh to specify it, etc.; that is another question.\n </p>\n <p>\n  The present question --\nassuming I have a complete disassembler for the bytecode:\n </p>\n <ol>\n  <li>\n   <p>\n    Is there a good way to programmatically figure out that the code may be implementing a VM?\n   </p>\n  </li>\n  <li>\n   <p>\n    Is there a good way to programmatically figure out where the bytecode begins and where it ends? Like, looking for patterns in the code that implements the VM?\n   </p>\n  </li>\n  <li>\n   Should I be trying to implement it with Ghidra scripts? Or write a Ghidra analyser? Or something else?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "1k",
    "tags": [
        "disassembly",
        "deobfuscation",
        "ghidra",
        "virtual-machines"
    ],
    "user": "auspicious99",
    "time": "May 2, 2020 at 17:04",
    "comments": [],
    "answers_data": []
}