{
    "title": "x64dbg how to debug a DLL called from an application",
    "link": "https://reverseengineering.stackexchange.com/questions/15572/x64dbg-how-to-debug-a-dll-called-from-an-application",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a 64 bit application that when runs will load a dll (plugin) I want to debug only this plugin, I have tried setting x64dbg to break on dll load, but two issues, this app loads hundreds of other dlls, and when I do get to my dll and try and step through I seem to get stuck in ntdll.dll rather than the one of my interest.\n </p>\n <p>\n  Is there are a better way of doing this? or any other debugger that is better suited for this job? I do have IDA pro aswell but I am more familiar with the olly/x64 program.\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 3,
    "views": "30k",
    "tags": [
        "debugging"
    ],
    "user": "Raz Razman",
    "time": "Jun 17, 2017 at 7:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm going to add my findings as an answer as it turns out its actually very simple in the new debuggers (I don't believe ollyDBG has this function).\n </p>\n <p>\n  X32DBG and X64DBG can be used with the same process\n </p>\n <p>\n  1) Open the executable file (exe) in the debugger (depending on whether exe is 32bit or 64 bit choose the right debugger)\n </p>\n <p>\n  2) select the \"breakpoints\" tab\n </p>\n <p>\n  3) find the section titled \"dll breakpoints\"\n </p>\n <p>\n  4) Right click in this section and choose \"add\" type in the name of the dll file. Eg \"module.dll\"\n </p>\n <p>\n  5) Now run your process, the debugger will break when this dll is loaded\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Raz Razman",
            "time": "Jul 10, 2017 at 2:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">that is nice feature addition to x64dbg exodia and the team keeps on improving  x64dbg</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There are several easy steps to do it:\n </p>\n <ul>\n  <li>\n   If you have a source code, you can create a very basic endless loop at the beginning of your code and once this dll will load, hitting a break will eventually bring you to that loop. At that point you can just manually step out from it and continue your debugging.\n  </li>\n  <li>\n   If you do not have a source, the you can patch the dll at the entry point with\n   <code>\n    0xcc\n   </code>\n   for break point or\n   <code>\n    0xEB 0xFE\n   </code>\n   (\n   <code>\n    jmp 0x0\n   </code>\n   ) for endless loop. In the case of break point opcode, you will trigger debugger on execution. In the second case, you can do what I've described previously.\n   <ul>\n    <li>\n     for patching you can use any hex editor.\n     <a href=\"http://www.ntcore.com/exsuite.php\" rel=\"nofollow noreferrer\">\n      CFF Explorer\n     </a>\n     could be very convenient for that where it can point you to entry point and with internal hex editor you can add the patch. Do not forget to write aside the original bytes to restore after the debugger breaks.\n    </li>\n   </ul>\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "4",
            "user": "PhoeniX",
            "time": "Jun 18, 2017 at 5:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Raz Razman",
                    "text": "<span class=\"comment-copy\">Thanks for your reply, so am I understanding correctly that i should add \"0xcc\" to the entry point line (replace the EP with that command?) which will trigger a breakpoint? I should have also pointed out this file is packed with upx, and I am having no end of trouble trying to unpack it, (there's no PUSHAD and a LOT of different PUSH commands)</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">yes, if you replace the original byte with 0xcc. Load your application with the debugger and once the dll will be loaded, the bp will trigger. If this is indeed UPX, try to look for an indirect control transfer like \"jmp reg\" and set the BP on it (after you start debugging the target dll).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  debugging a dll is kinda tougher than debugging a stand alone executable. as none of tbe functions that are exported will have a call to them thetefore finding the argument and then type of tbe argument type of return calling convention all becomes tougher than a refetenced function.\n </p>\n <p>\n  some ways to debug them standalone\nisto write a wrapper exe with load library call and take on from there combined with static analysis.\n </p>\n <p>\n  you can also load a dll in a standalone manner if you have windbg. with.  windbg -z foo.dll. this will load the dll as a dump file and will stop in the AddressOfEntryPoint.\n </p>\n <p>\n  if it were 32 i could have said use ollydbg with loaddll and call export function but since you say 64 bit i dont know if x64dbg has a similar functionality\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "blabb",
            "time": "Jun 19, 2017 at 2:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}