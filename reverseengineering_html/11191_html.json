{
    "title": "How do cmd arguments are loaded to process memory before they're passed to main?",
    "link": "https://reverseengineering.stackexchange.com/questions/11191/how-do-cmd-arguments-are-loaded-to-process-memory-before-theyre-passed-to-main",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  My question is how cmd arguments are passed from the shell to the process memory ?\nHow the loader loads them and if there are passed with some sort of syscall ?\nill be happy if some one can explain in details or point to a relevant article.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "120",
    "tags": [
        "command-line"
    ],
    "user": "Igal Gokhman",
    "time": "Oct 28, 2015 at 7:48",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Which OS are you speaking about ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igal Gokhman",
            "text": "<html><body><span class=\"comment-copy\">\n Linux mainly, but windows will be helpful to\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  For windows, the Loader will copy the parameters into the process' address space during process setup. Specifically it happens when the Address Space is initialized\n </p>\n <p>\n  See Stage 3D Step 8 in\n  <a href=\"https://books.google.com/books?id=w65CAwAAQBAJ&pg=PT584&lpg=PT584&dq=windows%20internals%20%22The%20user%20process%20parameters%20are%20written%20into%20the%20process%22&source=bl&ots=4Wn5n4Sg0u&sig=F8TVaIpJaDa2buSPQUKsX0PzRyw&hl=en&sa=X&ved=0CB0Q6AEwAGoVChMIrouQ4bnlyAIViCqICh3D3ACU#v=onepage&q=windows%20internals%20%22The%20user%20process%20parameters%20are%20written%20into%20the%20process%22&f=false\" rel=\"nofollow\">\n   Windows Internals\n  </a>\n  :\n </p>\n <blockquote>\n  <ol start=\"8\">\n   <li>\n    The user process parameters are written into the process, copied, and fixed up (meaning converted from absolute form to a relative form\n  so that a single memory block is needed).\n   </li>\n  </ol>\n </blockquote>\n</div>\n</body></html>",
            "votes": "1",
            "user": "josh poley",
            "time": "Oct 28, 2015 at 15:14",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can read about system calls called\n  <code>\n   fork\n  </code>\n  and\n  <code>\n   execve\n  </code>\n  including kernel implementation.\n </p>\n <p>\n  User land implementations:\n </p>\n <p>\n  <a href=\"http://www.yolinux.com/TUTORIALS/ForkExecProcesses.html\" rel=\"nofollow\">\n   fork and other usage examples\n  </a>\n </p>\n <p>\n  <a href=\"http://man7.org/linux/man-pages/man2/execve.2.html\" rel=\"nofollow\">\n   man page of execve including example\n  </a>\n </p>\n <p>\n  <a href=\"https://github.com/torvalds/linux/blob/097f70b3c4d84ffccca15195bdfde3a37c0a7c0f/fs/exec.c\" rel=\"nofollow\">\n   Kernel implementation\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Oct 28, 2015 at 9:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}