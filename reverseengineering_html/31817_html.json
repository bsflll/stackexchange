{
    "title": "Replace a function in a Windows 32-bit binary with a custom C function",
    "link": "https://reverseengineering.stackexchange.com/questions/31817/replace-a-function-in-a-windows-32-bit-binary-with-a-custom-c-function",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am reverse engineering a\n  <a href=\"https://github.com/entomorph/reverse-engineering\" rel=\"noreferrer\">\n   Windows game\n  </a>\n  from 1995 using Ghidra, and I'm currently documenting all the decompiled functions. My goal is to replace a function in the original binary with a custom C function, test the game, and proceed incrementally, one function at a time, rather than attempting to get all the decompiled C code working at once.\n </p>\n <p>\n  Some challenges I'm facing:\n </p>\n <ul>\n  <li>\n   The game was compiled with Watcom, so it's using its \"non-standard\" calling convention.\n  </li>\n  <li>\n   There are global variables everywhere, so the replaced function must be able to access those in the main executable.\n  </li>\n </ul>\n <p>\n  I'm aware of projects like KeeperFX and Syndicate Wars port (\n  <a href=\"http://swars.vexillium.org/\" rel=\"noreferrer\">\n   http://swars.vexillium.org/\n  </a>\n  ), which managed to achieve similar goals (e.g., by converting the executable into a DLL).\n </p>\n <p>\n  What are my options for replacing a function in the original binary with a custom C function while addressing the challenges mentioned above?\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "250",
    "tags": [
        "windows",
        "decompilation"
    ],
    "user": "Cesar Canassa",
    "time": "Apr 24, 2023 at 12:44",
    "comments": [
        {
            "user": "Cesar Canassa",
            "text": "<html><body><span class=\"comment-copy\">\n @rce Yes, the \"EXE to DLL\" technic looks promising, but I don't know how they solve the shared global variables problem.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Watcom lives on as\n <a href=\"https://github.com/open-watcom/open-watcom-v2\" rel=\"nofollow noreferrer\">\n  OpenWatcom\n </a>\n ... check it out. If you want to get closer to the original, you could try 1.9 or 1.8, too.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n @rce: may not be relevant for this particular case, but there are some issues when using data exports and delay-loading together.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  When trying to renew an old game, it's important to have a working thing relatively soon - otherwise, there's a great chance of your work getting wasted. So it's good you've turned towards RE ideas with potential of having full game usable without having it fully remade.\n </p>\n <p>\n  The DLL approach taken in KeeperFX:\n </p>\n <ul>\n  <li>\n   Works only if your executable has a relocation table - later versions of both Visual C and Watcom started to remove these. Without relocation table, the DLL will have ability to load only at one specific address in the virtual address space of the game - which means sometimes it will work, and sometimes not, depending on versions of other DLLs and their base addresses.\n  </li>\n  <li>\n   Requires you to do your C rewrite from\n   <code>\n    main()\n   </code>\n   and outer layers, towards the central functions which you will likely want to modify. Unless you will mix the DLL approach with some binary patching.\n  </li>\n </ul>\n <p>\n  The ASM approach taken in SW Port:\n </p>\n <ul>\n  <li>\n   Allows you to modify / rewrite to C any function at any time - no need to start with the\n   <code>\n    main()\n   </code>\n   . Because if you have the whole game disassembled, you can do calls back and forth between C and ASM.\n  </li>\n  <li>\n   Allows you to port to other OSes without a full rewrite - ie, SW Port supports Linux and Mac OS (as long as they run on i386 arch with 32-bit user space)\n  </li>\n  <li>\n   The 32-bit user space restriction will be easier to overcome in case OSes would stop supporting that. While it would require assembly changes, it is doable without a full rewrite.\n  </li>\n  <li>\n   Achieving the first runnable state this way is a bit more labour-intense that with the DLL approach.\n  </li>\n </ul>\n <p>\n  There's also a 3rd approach - you'd find it in Magic Carpet HD. That project author just used Ida Pro to generate C code out of the whole game, and then continued fixing the generated C until it started working. I consider this approach very risky - you need to put a lot of effort to make the game work. Also, the generated C code has a very low quality this way, and it may negatively influence further progress of the project. Plus, the brute-force C conversion introduced a lot of bugs.\n </p>\n <p>\n  General points:\n </p>\n <ul>\n  <li>\n   For both methods, you will find useful tools already developed in the respective projects (ie. export table updated for DLL approach, and C-to-watcom bi-directional calling wrapper for ASM approach).\n  </li>\n  <li>\n   The DLL approach required some specific conditions to work, while disassembling the whole game is a general approach which can be used for any game.\n  </li>\n </ul>\n <p>\n  For accessing global variables and functions between original game and remade C code:\n </p>\n <ul>\n  <li>\n   In KeeperFX, the variables and functions from within DLL were just exported with a prefix (\n   <code>\n    _DK_\n   </code>\n   specifically), and could be easily used outside, like any DLLIMPORT. Calling convention change was handled outside of the DLL, as an ASM block within C. Not sure if there was a helper macro to hide the details.\n  </li>\n  <li>\n   In SW Port, any variables/functions which are used in assembly but also in C, need to be properly defined (as\n   <code>\n    .global\n   </code>\n   with decor) - the port source has macros for that already made. And for C-to-Watcom conversion, there is a tool which generates a wrapper C function - you need to add the function to the wrapper, and then you call it normally in C. The wrapper will get arguments from\n   <code>\n    _cdecl\n   </code>\n   call and put them into proper registers (you have to define the arguments when adding function to the wrapper).\n  </li>\n </ul>\n <p>\n  Basically:\n </p>\n <ul>\n  <li>\n   C variables are decorated, so to access ASM-defined vars in C you need to add that decoration to your ASM vars.\n  </li>\n  <li>\n   For C-to-Watcom calls, you get up to 4 vars from stack and place it into registers, and that's it.\n  </li>\n  <li>\n   For Watcom-to-C calls, you have to modify the assembly to just use stack and no registers.\n  </li>\n  <li>\n   While juggling the stack and registers, you need to mind clobbering/spoiling value within registers by functions. Watcom convention says - any register which was used as parameter, can have its value overwritten.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mefistotelis",
            "time": "Nov 10, 2023 at 13:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}