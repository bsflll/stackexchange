{
    "title": "Why are there absolute jmps in disassembly of position independent code?",
    "link": "https://reverseengineering.stackexchange.com/questions/17931/why-are-there-absolute-jmps-in-disassembly-of-position-independent-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm playing around with Hopper and am looking at the disassembly of a binary that\n  <code>\n   otool\n  </code>\n  reports as having the\n  <code>\n   PIE\n  </code>\n  flag.\n </p>\n <p>\n  It's my understanding that as a result, the executable base address will be randomized, and so jumps have to be relative to the current instruction pointer.\n </p>\n <p>\n  However, looking at the output of this PIE binary in Hopper, I see absolute jumps like so:\n </p>\n <pre><code>00000001000021df    mov      rbx, rax\n00000001000021e2    test     rbx, rbx\n00000001000021e5    je       0x1000021c0\n</code></pre>\n <p>\n  Is Hopper just translating the relative jumps into an absolute jump assuming the text segment is loaded at the standard virtual address of\n  <code>\n   0x100000000\n  </code>\n  , or am I missing something conceptual with regards to how position independent executables work?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "osx",
        "mach-o",
        "macos",
        "pie"
    ],
    "user": "1110101001",
    "time": "Apr 9, 2018 at 21:14",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<html><body><span class=\"comment-copy\">\n Mind to attach the corresponding opcodes? The hexbytes which represent the instructions.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "1110101001",
            "text": "<html><body><span class=\"comment-copy\">\n Hopper reports that the instruction at 0x1000021e5 is encoded as\n <code>\n  74 D9\n </code>\n @Megabeets . I see that this corresponds to a relative jump according to the intel reference. I'm guessing then that Hopper is just converting the relative jump into its equivalent for easy viewing?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As mentioned in your comment, the corresponding opcode to\n  <code>\n   je 0x1000021c0\n  </code>\n  is\n  <code>\n   74 D9\n  </code>\n  . Thus, there's no doubt that you are facing a relative JMP. Hopper is translating the relative JMP so it'll be easier for a reverse engineer to understand the flow of the code without having to calculate addresses.\n </p>\n <p>\n  I'll demonstrate what Hopper does with a simple example using radare2 (although you can use your favorite tool to do the same).\n </p>\n <p>\n  First, we'll open radare2 with 10000 empty bytes allocated in\n  <code>\n   rwx\n  </code>\n  permissions so we'll have a \"sandbox\" to play in:\n </p>\n <pre><code>$ r2 malloc://10000\n</code></pre>\n <p>\n  Since our base address is\n  <code>\n   0x00000000\n  </code>\n  we'll seek (go to) to\n  <code>\n   0x000021e5\n  </code>\n  so it'll be easier for us to see the relative jump:\n </p>\n <pre><code>[0x00000000]> s 0x21e5\n[0x000021e5]>\n</code></pre>\n <p>\n  See how our current address changed to\n  <code>\n   0x21e5\n  </code>\n  ? good !\n </p>\n <p>\n  Now, let's write our hex-bytes (\n  <code>\n   74 d9\n  </code>\n  ) in the current address:\n </p>\n <pre><code>[0x000021e5]> wx 74d9\n</code></pre>\n <p>\n  And disassemble one instruction in this address:\n </p>\n <pre><code>[0x000021e5]> pd 1\n        ╰─< 0x000021e5      74d9           je 0x21c0\n</code></pre>\n <p>\n  As you can see, radare2, as Hopper does, translated the jump in address\n  <code>\n   0x????21e5\n  </code>\n  to\n  <code>\n   je 0x????21c0\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Apr 9, 2018 at 5:36",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  well megabeets was faster \nhere is how to check it in windbg\n </p>\n <pre><code>0:000> ? .\nEvaluate expression: 1999570342 = 772f05a6\n0:000> EB . 74 D9\n0:000> U . L1\nntdll!LdrpDoDebuggerBreak+0x2c:\n772f05a6 74d9            je      ntdll!LdrpDoDebuggerBreak+0x7 (772f0581)\n0:000> ? 772F0581 - .\nEvaluate expression: -37 = ffffffdb\n0:000> ? 21E5-21C0\nEvaluate expression: 37 = 00000025\n0:000>\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 9, 2018 at 5:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}