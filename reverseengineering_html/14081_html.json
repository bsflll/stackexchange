{
    "title": "What are 'var_8', 'var_C' actually mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/14081/what-are-var-8-var-c-actually-mean",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am sorry if this is really a silly question. I am trying to learn reverse engineering. What I can't understand is those 'var_8', 'var_12'. Are they just variables? What are the use of them in the following code? If someone give me an overview of what this piece of code actually does then it will boost up my learning process. I know the first four instructions which are really just setting up the stack frame for the function and I know all the registers used in here. I need to know what this function actually doing so that I can judge if I am figuring it out right or wrong.\n </p>\n <pre><code>00611e63 8BFF                            mov        edi, edi                ; XREF=0x611721\n00611e65 55                              push       ebp\n00611e66 8BEC                            mov        ebp, esp\n00611e68 83EC10                          sub        esp, 0x10\n00611e6b A174897000                      mov        eax, dword [ds:0x708974]\n00611e70 8365F800                        and        dword [ss:ebp-0x10+var_8], 0x0\n00611e74 8365FC00                        and        dword [ss:ebp-0x10+var_12], 0x0\n00611e78 53                              push       ebx\n00611e79 57                              push       edi\n00611e7a BF4EE640BB                      mov        edi, 0xbb40e64e\n00611e7f BB0000FFFF                      mov        ebx, 0xffff0000\n00611e84 3BC7                            cmp        eax, edi\n00611e86 740D                            je         0x611e95\n</code></pre>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "Tahseen Adit",
    "time": "Dec 1, 2016 at 6:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The given answer is already great but I think it could be nice to clarify something.\n </p>\n <p>\n  You are saying:\n </p>\n <blockquote>\n  <p>\n   I know the first four instructions which are really just setting up the stack frame for the function\n  </p>\n </blockquote>\n <p>\n  In fact the first instruction (\n  <code>\n   mov edi, edi\n  </code>\n  ) is not part of the stack frame mecanism. It is a hot-patch point often used in Windows DLL.\n  <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20110921-00/?p=9583\" rel=\"nofollow noreferrer\">\n   This page\n  </a>\n  could give you insight about how it works.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "W. Bruneau",
            "time": "Dec 1, 2016 at 11:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">please use comments or edits for clarifications, don't post \"answers\" that don't answer the question asked.</span>",
                    "time": null
                },
                {
                    "user": "W. Bruneau",
                    "text": "<span class=\"comment-copy\">OK sorry. It seemed right to me because I do not have enought reputation to do a comment and an edit did not seem right to me.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These\n  <code>\n   var_*\n  </code>\n  are numeric offsets of something which Ida detected as variables on the stack.\n </p>\n <p>\n  In one of the lines with these constants you can see the following:\n </p>\n <pre><code>dword [ss:ebp-0x10+var_8]\n</code></pre>\n <p>\n  This actually references a dword (4 bytes) from address which is computed in the following way:\n </p>\n <p>\n  from a stack segment (\n  <code>\n   ss\n  </code>\n  ) a value of register\n  <code>\n   ebp\n  </code>\n  -\n  <code>\n   0x10\n  </code>\n  +\n  <code>\n   var_8\n  </code>\n  constant (which is defined at the start of the function (you'll see there something like\n  <code>\n   var_8 = dword ptr -8h\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "w s",
            "time": "Dec 1, 2016 at 6:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Tahseen Adit",
                    "text": "<span class=\"comment-copy\">Thank you for your reply. Can you tell me why are we doing those two and operations? What is this function doing, is it comparing the length of two strings? Is it comparing two int values?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">\"and\" instruction is used for zeroing local variables var_8 and var_12 by \"binary and\" operation. The code snippet you provided is not a full function,   and the comparison operation compares dword at address ds:0x708974 with value 0xbb40e64e .</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  They are the local variables in a function. The rules of them are:\n </p>\n <ol>\n  <li>\n   <p>\n    Ordered on the stack frame.\n   </p>\n  </li>\n  <li>\n   <p>\n    Pointer by ESP register.\n   </p>\n  </li>\n </ol>\n <p>\n  Eg. var_4 = SS:[ESP - 4], var_8 = [ESP - 8], var_C = SS:[ESP - C], ...\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Vic P.",
            "time": "Dec 3, 2016 at 16:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">No, they are just variables with a negative value, and definitely <i>not</i> constraned to the ESP register. For an example of that, just look at OP's dump: <code>ebp-0x10+var_8</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}