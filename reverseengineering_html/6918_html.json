{
    "title": "What could this time format be? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6918/what-could-this-time-format-be",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions asking for help\n       <b>\n        reverse-engineering a specific system\n       </b>\n       are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2015-01-02 15:10:07Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/6918/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm reverse engineering a file format in which (amongst a whole lot of other things I have already decoded) the 'length' of the file is being stored.\nIt is displayed to the user as minutes:seconds.\nDoing a little bit of experimenting by altering the file and loading it up in the program, I've gathered the following possibilities:\n </p>\n <pre><code>Original:\n5d42: 0:55\n\nAltered:\n5240: 0:03\n0000: 0:00\n003f: 0:00\n0040: 0:02\n0041: 0:18\n0042: 0:32\n0043: 2:08\n0044: 8:32\n0045: 34:08\n1045: 38:24\n0046: 136:32\n0047: 564:08\n0048: 2184:32\n0049: 8738:08\n004a: 34952:32\n004b: invalid\n004c: 559240:33\n004d: 2236962:15\n004e: 8947849:00\n004f: 35791396:00\n0050: 143165584:00\n0051: 572662336:00\n0052: 2290649344:00\n\n0142: 0:32\n0242: 0:32\n0342: 0:32\n0442: 0:33\n0542: 0:33\n0642: 0:33\n0742: 0:33\n0842: 0:34\n0942: 0:34\n0a42: 0:34\n0b42: 0:34\n0c42: 0:35\n0d42: invalid\n0e42: 0:35\n0f42: 0:35\n1042: 0:36\n1142: 0:36\n</code></pre>\n <p>\n  My guess is this is some sort of floating point, but I'm too limited in my skills to know what kind.\nI know all other numbers in the files are stored as little-endian.\n </p>\n <p>\n  Does anyone have any clue?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "95",
    "tags": [
        "file-format"
    ],
    "user": "Tom Wood",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Why the close votes? This seems to be a case of the \"Reverse engineering a specific system, but stuck on a clearly defined problem\", especially as the OP performed the logical first steps - try different values, check the results - and gave this information to us.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Tom Wood",
            "text": "<html><body><span class=\"comment-copy\">\n I'd like to agree with Guntram Blohm, I don't think this is off topic. I've demonstrated a basic understanding of the concepts involved and have clearly identified a problem. The fact that I'm a beginner and thus had problems identifying even a basic float should not be held against me by abusing the policy.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This seems very much like the\n  <a href=\"http://de.wikipedia.org/wiki/IEEE_754\">\n   IEEE754\n  </a>\n  format, and i'd assume each of your two byte timecodes to be preceded by two zero-bytes, which make a 4 byte (32 bit) value.\n </p>\n <p>\n  You can calculate the exponent using the formula\n </p>\n <pre><code>exponent=(byte2 * 2 - 127)\n</code></pre>\n <p>\n  and the value in seconds using\n </p>\n <pre><code>value=2^exponent*(1+byte1/128)\n</code></pre>\n <p>\n  assuming the high-order bit of byte1 is clear; if you set the highest bit in byte1, you'll probably get a negative value. (If byte1 is zero, as in most of your examples, value is equal to the exponent, as the multiplicand is 1)\n </p>\n <p>\n  Note you have a typo in your value for\n  <code>\n   0041\n  </code>\n  , that should be\n  <code>\n   0:08\n  </code>\n  , not\n  <code>\n   0:18\n  </code>\n  , and you probably made a mistake when checking the\n  <code>\n   004b\n  </code>\n  value, that should be\n  <code>\n   8388608\n  </code>\n  seconds, or\n  <code>\n   139810:08\n  </code>\n  minutes.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Dec 30, 2014 at 0:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tom Wood",
                    "text": "<span class=\"comment-copy\">Ah, that's why I was stumped! They seemed to be preceded by two junk bytes which could be set to any value without seemingly affecting anything. Thank you. Turns out the invalid value was indeed an error on my part, the program decided to crash just at that value just that once.</span>",
                    "time": null
                }
            ]
        }
    ]
}