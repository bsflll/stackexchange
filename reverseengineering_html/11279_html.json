{
    "title": "Find out which libraries were (statically) linked",
    "link": "https://reverseengineering.stackexchange.com/questions/11279/find-out-which-libraries-were-statically-linked",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Where would I look if I wanted to know which third party libraries an application (win32) has used?\n </p>\n <p>\n  I found this info yesterday (with Ollydbg, I think) but for the love of me just can't figure out anymore how I did it. All I remember is that the format was easily readable, not hex.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 2,
    "views": "932",
    "tags": [
        "disassembly"
    ],
    "user": "vic",
    "time": "Nov 9, 2015 at 1:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i believe this cant be done easily without debug information \\ symbols.\n </p>\n <p>\n  Statically linked libraries means that part of the code of the program contains the functions of the third party libraries.\n </p>\n <p>\n  Lets take for example an open ssl library.\n </p>\n <p>\n  Once you compile your code with the openssl code attached (as part of your code solution), in the assembly you cant really know which part of the code is part of the library and which one is the code of your main program.\n </p>\n <p>\n  If you want a way to figure out if a library is linked into your program, you might want to try to look for debug strings that were left behind during compilation that would help out.\n </p>\n <p>\n  Also for future reference and finding dynamically linked libraries, i would suggest CFF-explorer\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xAK",
            "time": "Nov 9, 2015 at 21:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">Thanks. I came to the same conclusion. I must have deducted the use of libraries based on some strings I found in the disassembly and later mixed this up in my own memory. That one also seems to need some serious reversing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I think you are referring to the executable modules view in Olly.\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/PjZvJ.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"Executable modules\" src=\"https://i.sstatic.net/PjZvJ.png\"/>\n  </a>\n </p>\n <p>\n  You might also be interested in\n  <a href=\"http://www.dependencywalker.com/\" rel=\"nofollow noreferrer\">\n   Dependency Walker\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Dominik Antal",
            "time": "Nov 9, 2015 at 8:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">No, not dependencies, statically linked libraries. I found something in the code that mentioned these, one by one. I need that info to get those libraries and map the symbols. I was doing so many things on that code that I just forgot how I got there.</span>",
                    "time": null
                },
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">My bad, misunderstood your question.</span>",
                    "time": null
                }
            ]
        }
    ]
}