{
    "title": "GDB MI output vs. stdout",
    "link": "https://reverseengineering.stackexchange.com/questions/19652/gdb-mi-output-vs-stdout",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am using GDBs machine interface (mi) to write some simple tracers/loggers.\n </p>\n <p>\n  Now I ran into the problem of telling apart GDB output from text the target-program itself wrote to stdout.\n </p>\n <p>\n  If I look into the documentation here:\n  <a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html\" rel=\"nofollow noreferrer\">\n   https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html\n  </a>\n </p>\n <p>\n  it says\n </p>\n <blockquote>\n  <p>\n   target-stream-output is the output produced by the target program.\n  All the target output is prefixed by `@'.\n  </p>\n </blockquote>\n <p>\n  This is not what I observe, however. Consider this example session of running ls like so:\n </p>\n <pre><code>gdb -i mi ls\nstart\n</code></pre>\n <p>\n  which gives this output:\n </p>\n <pre><code>...\n...\n~\"[Thread debugging using libthread_db enabled]\n\"\nfile1.jpg  file2.jpg  file3.jpg  dir1  dir2   <---(!!!)\n~\"[Inferior 1 (process 22233) exited normally]\n\"\n=thread-exited,id=\"1\",group-id=\"i1\"\n=thread-group-exited,id=\"i1\",exit-code=\"0\"\n*stopped,reason=\"exited-normally\"\n(gdb) \n</code></pre>\n <p>\n  As you can see, the output of the ls command was just randomly dumped into the console. Great.\n </p>\n <p>\n  How can I parse this?\n </p>\n <p>\n  Thanks!\n </p>\n <p>\n  gdb version is 8.1\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "609",
    "tags": [
        "gdb",
        "debuggers"
    ],
    "user": "bernd feinman",
    "time": "Oct 17, 2018 at 15:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  According to\n  <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Input_002fOutput.html\" rel=\"nofollow noreferrer\">\n   this documentation page\n  </a>\n  you can redirect your program stdout where-ever you want by using\n  <code>\n   run>out_file_name\n  </code>\n  . This will not solve the parsing problem, but should avoid it. Using other tty then gdb's is also described there.\n </p>\n <p>\n  In addition there is a simpler way to do it, with output redirection (see the first line of gdb output below). I checked it with simple program that prints to different strings to stderr and stdout :\n </p>\n <pre><code>#include <stdio.h>\n\nint main(int argc, char ** argv)\n{\n    printf (\"\ntest\n\");\n    fprintf (stderr, \"stderr\n\");\n    return 0;\n}\n</code></pre>\n <p>\n  and here is my small debugging session results:\n </p>\n <pre><code>(gdb) set args 1>/home/ubuntu/out.txt 2> /home/ubuntu/err.txt\n(gdb) b main\nBreakpoint 1 at 0x4005b5: file ./gt.c, line 5.\n(gdb) run\nStarting program: /home/ubuntu/unittest/gt 1>/home/ubuntu/out.txt 2> /home/ubuntu/err.txt\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe1f8) at ./gt.c:5\n5       printf (\"\ntest\n\");\n(gdb) c\nContinuing.\n[Inferior 1 (process 8659) exited normally]\n(gdb) shell cat /home/ubuntu/out.txt\n\ntest\n(gdb) shell cat /home/ubuntu/err.txt\nstderr\n(gdb)\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "w s",
            "time": "Oct 18, 2018 at 11:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}