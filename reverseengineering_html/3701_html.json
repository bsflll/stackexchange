{
    "title": "What do the first 16 bytes on the stack represent?",
    "link": "https://reverseengineering.stackexchange.com/questions/3701/what-do-the-first-16-bytes-on-the-stack-represent",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Whenever I attach a process in OllyDbg v1.10 on my Windows 7 64-bit machine, I notice that the first saved EBP on the stack doesn't point to the very base of the stack. Instead it points 16 bytes before it.\n </p>\n <p>\n  To illustrate what I mean, see the following screenshot:\n  <img alt=\"screen-shot of OllyDbg stack window\" src=\"https://i.sstatic.net/VYfxb.png\"/>\n </p>\n <p>\n  The EBP (highlighted in gray), which is right above the\n  <code>\n   RETURN to ntdll.76FC9F45\n  </code>\n  , is pointing to\n  <code>\n   1B05FFEC\n  </code>\n  . Note that this address ends with\n  <strong>\n   <code>\n    EC\n   </code>\n  </strong>\n  , not\n  <code>\n   FC\n  </code>\n  .\n </p>\n <p>\n  <strong>\n   Question 1:\n  </strong>\n  Why isn't the EBP pointing to\n  <code>\n   1B05FFFC\n  </code>\n  ?\n </p>\n <p>\n  <strong>\n   Question 2:\n  </strong>\n  What do the first 16 bytes on the stack represent?\n </p>\n <p>\n  <strong>\n   Question 3:\n  </strong>\n  Is the number of bytes (16), which are between\n  <code>\n   StackBase\n  </code>\n  and the address to where the first\n  <code>\n   EBP\n  </code>\n  points to, fixed for Windows OSs?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "558",
    "tags": [
        "windows",
        "ollydbg",
        "debuggers",
        "x86",
        "callstack"
    ],
    "user": "Benny",
    "time": "Feb 18, 2014 at 7:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   <strong>\n    Question 1:\n   </strong>\n   Why isn't the EBP pointing to\n   <code>\n    1B05FFFC\n   </code>\n   ?\n  </p>\n </blockquote>\n <p>\n  Because\n  <code>\n   1B05FFFC\n  </code>\n  is not the base address of the stack frame.\n </p>\n <p>\n  The only reason that OllyDbg shows\n  <code>\n   1B05FFFC\n  </code>\n  as the last address in the stack-view is that it's the address of the last DWORD in the stack's memory page.\n </p>\n <blockquote>\n  <p>\n   <strong>\n    Question 2:\n   </strong>\n   What do the first 16 bytes on the stack represent?\n  </p>\n </blockquote>\n <p>\n  It depends on the debugger.\n </p>\n <p>\n  For example, from my limited testing...\n </p>\n <p>\n  When attaching WinDbg to a 32-bit EXE on Windows 7 x64,\n  <code>\n   [ESP]\n  </code>\n  is the return address back into\n  <code>\n   ntdll!DbgUiRemoteBreakin\n  </code>\n  from the call to\n  <code>\n   ntdll!DbgBreakPoint\n  </code>\n  .\n </p>\n <p>\n  When attaching OllyDbg v2.01 to a 32-bit EXE on Windows 7 x64 or Windows 7 x86, the debugger suspends the debuggee in the middle of an executing debuggee thread, so the value of\n  <code>\n   ESP\n  </code>\n  is whatever\n  <code>\n   ESP\n  </code>\n  was in the debuggee's thread at the moment OllyDbg attached to it.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Feb 17, 2014 at 18:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Hmm, that's strange... because the following code snippet should return the base of the stack, right? <code>NtQueryInformationThread(remoteThread,(THREADINFOCLASS) 0, &amp;tbi, sizeof(THREAD_BASIC_INFORMATION), &amp;bytes_read); if (bytes_read != sizeof(THREAD_BASIC_INFORMATION)) return 1; NT_TIB *teb = (NT_TIB*) tbi.TebBaseAddress; stackBase = (DWORD) teb-&gt;StackBase;</code> The <code>teb-&gt;stackBase</code> actually ends in <code>FF</code>, not <code>EF</code>.</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">In your answer to Question2 you mentioned that the 16 bytes depend on the debugger. However, I've used the code snipped from my previous comment to get the stack base address. Then I read DWORD after DWORD using <code>memcpy</code>, from base to top, and those 16 bytes at the beginning are still there.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">The Thread Information Block's <code>StackBase</code> and <code>StackLimit</code> refer to the memory reserved for the thread's initial stack space (see <a href=\"http://doxygen.reactos.org/de/dbc/lib_2rtl_2thread_8c_a9055b1b6f3f1f85b3c2ba41b1c38c4a8.html#a9055b1b6f3f1f85b3c2ba41b1c38c4a8\" rel=\"nofollow noreferrer\">doxygen.reactos.org/de/dbc/â€¦</a>). <code>EBP</code> (typically) points to the base of the current function's stack frame; it does not point to the base of the memory reserved for the thread's initial stack space.</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for this insight Jason Geffner. Could you also please answer the following question for the sake of completeness? Question 3: Is the number of bytes (16) which are between <code>StackBase</code> and the address to where the first <code>EBP</code> points to, fixed for Windows OSs? I will edit my question above to include Question 3.</span>",
                    "time": null
                }
            ]
        }
    ]
}