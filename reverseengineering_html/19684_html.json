{
    "title": "Reverse-engineering a weird 24-bit possibly not CRC checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/19684/reverse-engineering-a-weird-24-bit-possibly-not-crc-checksum",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Yes, it's one of these!\n </p>\n <p>\n  I have a 199mumble Brother integrated word processor, with a very weird non-PC floppy format. I've built a floppy controller and have successfully read the flux off the disk, decoded\n  <em>\n   both\n  </em>\n  kinds of GCR, and reassembled the result into a disk image. But I need to be able to check the checksums in the sectors to know whether I've done it right. (Eyeballing it looks good.)\n </p>\n <p>\n  Each sector is 256 bytes and is followed by three bytes which vary depending on the contents of the sector --- identical sectors produce identical values, so I'm assuming it's a checksum. Interestingly, the all-zero sector produces an all-zero checksum, so I suspect it's not a regular CRC.\n </p>\n <p>\n  I have 100 different examples but there may be some incorrect results in there (due to misread sectors); the full list is at\n  <a href=\"https://pastebin.com/0HZrUVPR\" rel=\"noreferrer\">\n   https://pastebin.com/0HZrUVPR\n  </a>\n  but here are a few selected examples, in what's hopefully reveng format so the checksum is in the last three bytes:\n </p>\n <pre><coden000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005750314120464c4f505059080000000000000000000000000000000000000000616161616161616120202020000000000000000000000000000002000a5d000064656d6f20202020a4ca1a\nb38af\n414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141de6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738394141414141414141414141414141414141414141414141414141414141de4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141de4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141415a6ea1\n41414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141de4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141de6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738394141414141414141414141414141414141414141414141414141414141de41414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141413362ac\n</code></pre>\n <p>\n  Note that the last two contain the same data, rotated right a whole number of bytes.\n </p>\n <p>\n  So, I'm stumped. There are some 24 bit CRCs but they appear to be quite rare. reveng had nothing, but I'm not entirely sure I'm driving it correctly --- it appeared to execute more quickly than anything which does a brute force search ought to. I've tried some trivial summing methods but the easy ones didn't work and there are too many variations just to guess.\n </p>\n <p>\n  How would I go about figuring this out?\n </p>\n</div>\n</body></html>",
    "votes": "6",
    "answers": 1,
    "views": "1k",
    "tags": [
        "crc"
    ],
    "user": "David Given",
    "time": "Oct 22, 2018 at 13:14",
    "comments": [
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n Wait a minute, I don't understand the background. What's on the floppy disk - the word processor or the document editable by the word processor? What is supposed to reads the floppy disk? Besides, what's GCR?\n <a href=\"https://en.wikipedia.org/wiki/Group_coded_recording\" rel=\"nofollow noreferrer\">\n  This\n </a>\n ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "David Given",
            "text": "<html><body><span class=\"comment-copy\">\n Ah, right, context. This dates back from the days when word processors were things, not programs --- it's an electric typewriter with a screen and a floppy drive. Pictures are annoying hard to find but\n <a href=\"https://gizmodo.com/what-was-the-first-piece-of-tech-you-saved-up-to-buy-1720698840\" rel=\"nofollow noreferrer\">\n  gizmodo.com/â€¦\n </a>\n is a slightly later model than mine. The floppy format used to save files was very very not PC, with 256-byte sectors, GCR rather than MFM (your link is correct), a different low level disk format, etc. I have some custom hardware to read these with a modern PC floppy drive. But that stuff's all figured out.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<html><body><span class=\"comment-copy\">\n Try producing some sectors with low Hamming distance (number of different bits)? That way it may be possible to determine how individual bits affect the checksum, just in case the checksum algorithm is linear (or close to linear enough).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "David Given",
            "text": "<html><body><span class=\"comment-copy\">\n I'll give that a try, but right now the machine is 9000km away, so it'll have to wait until next week. If I can figure this out from just my disk image that'd be awesome.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The answer turns out to be very simple,\n  <a href=\"https://stackoverflow.com/questions/2587766/how-is-a-crc32-checksum-calculated\">\n   once you understand what CRC is\n  </a>\n  .\n </p>\n <p>\n  It's similar to a CRC -- the checksum is the remainder when dividing the input by the polynomial with truncated representation\n  <code>\n   0x000201\n  </code>\n  .\n </p>\n <p>\n  I wrote a quick Python script to validate checksum:\n </p>\n <pre><code>def crc(data, poly):\n    # width = 24 bit\n    # data len = 2048 bit\n    assert poly<(1<<24)\n    for i in range(2048-1,24-1,-1):\n        if data>>i&1:\n            data^=1<<i\n            data^=poly<<(i-24)\n    assert i==24\n    assert data<(1<<24)\n    return data\n\nimport sys\nfor line in sys.stdin.read().splitlines():\n    line = int(line,16)\n    print(crc(line>>24,0x000201) == line&~(-1<<24))\n</code></pre>\n <p>\n  <a href=\"https://tio.run/##7V3rbhu7Ef7PpzBQ4MABkoD3SxHnUQrw2iMgdQLbRXv@9NXTmSFXkhMfHyeOE1vkLrKSlsPhXL4ZcoeS8@mPm98/XqrPn0ttZ/kqn5d4E1@fffr44Y9Xf2dncPzt7D@7cvP72cWZ1GdpdzNuIt3Zh3qJ97n2@5Z4fV2vbojBu3Px7p3Ur@h@@3h1tjvbXZ5dxct/1nPs80a8lhoub8QYCo9dI9bv3@9@E4e7eODtf1wAy90dt2m8d@e7N9t4Q47dxYXUxzeQ/JZgV/Xm31eXdJ@x3b8@fQSi6z@uGQr8YXdZUWb4/Pb6puwu317VWM5fvb3@9GF3g63X50N2Ir0A4ptzfPta2M7@0xXeQsvi7ffvpX7N/8s5l1y8Oru4oH6//e/8TZfo1efPfB3r4GyZ4OcexhmuhBaQmKzOuhkOZ@D@of2tuH1K3s97D2yOplB/bY0ttm39os5RRICBgwbnnZYZiKQzTsOrh3vSGngXnKLBa0nQuThkkq1AOhVBreQyDgAC3dWWsM2ZO9sK9YM24K7wvjW9Re05WgdSCGexpSToU/d9jlqwj8E@oJcWjjvoi9LbCjyzCxzvGNvgmrtOtkIf5Rxop10kXTPqaDUZqtkqHdmhQj@Dd4FTw6sLyGtIt5fbKVlxdKPBcgJ7Am/RLcc3ecSQGaxLFs0WLd5QFpIDqRv0q@gJePUgp0JaB1doMdCj@6aRPpbugH7gGZQlDX8hjcHRSXOSGzjpYY8A/cJBJq9lqI3RgNCVRCu9I6kKprJOZhhiQAOEUdCx4dC9FWCGcLE4QGdsHYoC9JxUkoe7wEcPJWEMMrpECuAECgLv7q6jMdAsg9ORg5AD8BLEA6Ugl5DqgpQOYBIDTuEaMA@yDUk3LTsENucMyQbUgYZM212qBcpAzkfn6R4aKBNwrPh@445A7O0cYzxAlJstpFwHFdjxlmNJa9JPkcU6yFQH9mY70DegRchheuvlJPFC2yUKXZKeuG@hi5BTNgEQOL0zBGjsUTr80NbYT1Ylc/COKaGkUkorgx5QXgUtvvcs9fv7/qjzechAIFcUgYAscn@EaM3gBnQHd@BYcJIGp0KKgFwcXFT8V/jCiaiUZ8v5Mzr/cHovBYdssEAwMQjwjKIIdlfDWs/Pc/ikfGxsxfLLjuXHnrDCbTmy5YC5J7asc6iOLRDMvbox0dYo2JoM5oahUlbGzBYI5s5FjedkLFsumHuBbEywVbIFgrmfkrjWQXG2QDD56iipYH/@EnGtCZ4XDKtJsii2QDB3LpJCeP9zJ4XlgOcXDM3ln103WDB4TjKUiN7QOZf487LBmg6eJwyz0lUZtkAwdy4qJcn4c8pHCwTPd0KCJWJJni0HzD0tKpWEe@qN5oeo/tQgWRC4TwavjXZPWzdYk8HzB2L0oT7pDuNywEsIhiqCecKtpQWCl5ERuZWQEdiaCuYGoRA26h9fPloOeFnBwK0QNT8BDEpc2eDlgJHzBjMDO8UYWA@pD5dBtgKzAltROPejsldVmB@ZDdbS8CXCsNbkf2D5aIHgZeYimWL1iS0HzP2wrGIR7cdMCgsELzcjauWNDWxNBnPDEAzC82OzwQLBS89FTdqmHrensBzw8oNBcuvSY759tBxwCsFgm0hKPQoG/butKxu8aDC24tX37zAu85/GxOhDzfx7v4S2HHAqweBV8eH7HhgXCE4oI6ZQ6/csEZcDTikYXJAlfns2WA44rWCAXNCqYSsXzA3F1Az0YMsBc69MXC6@fRsMlgNOLxhUyS1/yw/bFwhOMSOakqLxbLlg7kkpZnhQeHj5aIHgRHNiyCo/9IFxOeBUgyHkHB/4i@YFgtPNiCZo1cIDYfA8foKygPDj7SAaV/kh/5/CMv8p50RVqgqVLRDMvTpyopoHPDAuF5x2OCgXtPurtcECwannRPyPGs39X0ldDjj9YAgm3v87hQWCGTIiqCXv/dXScsEM4WDRMn/@Zy4WCObIiUWFxv8MBssBswRDTSaGu2GwQDBPRsxBJ39X@Wg5YKZgUDFG/vV3ERcI5sqIyjtuvtxT@HV/Gmprwdft34Lj08PReelaYSsO516ZJK1D/RoG668azgUE4Wwut792ssw/X05Uqtl6/AX15YAZg4GnlotnKxfMDUWrfT76r7qXA@YMBlszzApsOWDubMRVaKH/0ZsFgnkzIi9BW8uWC@aelGK13OIScYFg5omxKWVyYsYZYKKF5NrqrJvhcAbu@QMPK26fkvfz3gOboynUHxUutm39HtJfCc6N4I6v4/GHbk0JZnyDgyuNt4zFqyMMhIjXlPFaKl4b/BMCHA1XpBcC6YVAeiGQXgikFwLp8YcQ4HCJ9FIivZRILyXSS4n0UiK9lEgvJdKr1uAVgU3vacx1PCUKkuEysTUZzL1AVrrqotkCwdxPScbFoCWDgSH/wnAwEAgQbHVK1pJ0cFo6p2COUDA4t8bJkkhMC1cQyQYH72Sm9UGGzx4ENqgE0LneaiHbU4twerwLTkE7cHIRVG80rqY1QoN7MB4prmUGKkGfLdLgKPhJB3inYESQ0aHZss0kA44BI5I0FSV1HugyfELdQFrgX/eaJqDonwNKduAKOqM00hrgz4Gydd1BQ6TpXAONrFFC1AHsozsnWXFhEzwvOPMZPxY5Fl7x0cxjuYb0C2hpsBJx/Wp0C63O4aioz8Yf7evIiq0kjrKBvazZW9bQvYAecF/4FObcgueBEiwDvnSQC4RUlsFwEshhEFQeWYM4CaEA4o2Bj5WFgRsMAEYCYRvQk5HJzKCWatRrUyB0GPUeYJbkM7k@W@0LLhGlJ@Dp3sOpjQ@aB527V0@RESR8RlBqgpIgaTfTDfcOWLc9AFEOBEW4BTqSfaNAY8owNL5T9pJA9gggr7bLmklOGoukB8P7ZArxQFdrgib0QJ2668jVHkPIpiOnug7lvSyBHG/HKOAZDAi0nI/2C@nIK7p7rlu1BwFJdYesvgwZAapm2MY7WIBltqaCuQtmCSAUArsjUg6R1COC3mGM7lEoLAmHk0FPa66nKMgKhGYHPFqPCOcohfrjyKNkitEbN77QD/rIYhWhGjMPxSomOUcJbJ8R9D66FcbKkKf2SBgPoAqzxIGSot9g1G3T3cgeoaf/MSVRxjqSV1EcUURRbMueD3WQrsfvYSLq0Q5XgSPeSr1h2BQOmsbaSPpd4i3hb9lJ9angMLmAJOLrycUcvMPJb@KQ1UsakqFlNN3tWVZt/gI5MI@iB1WppUTPVhaYu2weYwiqsAWCufdOcuKw9mDL/XNvnXETYKplCwRz75@m1JKLbLl/@u3zatyCwQQwuO/b5sUJrSpbIJg7F6RipcrMw0OoqELAQ6ZUx5u5uBccuRFKCFG38qjXXH1ZHl0Of5gMv@4XYff@TsHGKOqjYbAVJUEJQyWKNIrSzTmq2WNhBgtPoDJQlFHwGeXSW4UW4eIo9TTnqSxbRzH7UMbqpZlwXM7uexpUzhllKyoObfsZvYi7FYe2Mo8fuw/74s4RfyrIYCGMZAhEh9V4R8WsUe7uOxquV@@pVDPKN1hw6vsPYpR3GjhXWSzRbWWwtm/t8h3KUEPS45LdoMmkW6Ii@tflctzhAdujxIfS0r7Y14vVZOO@w0DWJk1CijxKVpLeqtD6ULMedaduXBxgq9wLYnLntg0IOOr6ZD6q0vUa3WHrpG8U9Uob9gFncaLu7tz3AV59g6n@1TdY1vG4IxpwiWF9p22UUUcBEgvLG3a3EmqP3hGtiHjCPKFPWQ8txjos1Up/2JscxV2BQIIU52hjxfQdQYTGfkSMKr7tW/ZY6zDYx4Ic0btFVL97iO19hPSNFwJloOIulnMVbpXJgAVavWl7u0S@7aYetMQCbY90fbTRpFzfxMn7nGAcPypn6y0LIn/KibTneituG26P9XxFQOebxUaRd5R8qRR/9HmUt4H/cZ9uFcoiGT2F9sVy8ShYd7/6nhtp481Qxup5Bt6LpmJobH0Tce4lZbQyB8tqajVwLbXWzSgISAnMMFsImv3hFb@eFj1XxtO6IFMbHTmspPrSD59y9YL9Hw\" rel=\"noreferrer\" title=\"Python 3 â€“ Try It Online\">\n   Try it online!\n  </a>\n </p>\n <p>\n  The\n  <code>\n   crc\n  </code>\n  function may be used to generate missing checksum values.\n </p>\n <h2>\n  How?\n </h2>\n <p>\n  First, I assumed that the checksum function satisfies the property: for all\n  <code>\n   x\n  </code>\n  and\n  <code>\n   y\n  </code>\n  , we have\n  <code>\n   checksum(x) xor checksum(y) == checksum(x xor y)\n  </code>\n  .\n </p>\n <p>\n  Using Gaussian elimination on the provided data, I can deduce that the hash of\n  <code>\n   000000...000000bb0301\n  </code>\n  is\n  <code>\n   bb0301\n  </code>\n  . Looks pretty reasonable.\n </p>\n <p>\n  Then, I read about existing hash functions and see what method they uses. I note that CRC uses polynomial remainder mod 2, so I guess that the hash is the input as a polynomial modulo some polynomial with degree 25 (because the output has 24 bits).\n </p>\n <p>\n  With simple brute force, I conclude that the polynomial is\n  <code>\n   000201\n  </code>\n  . Testing reveals that it's correct.\n </p>\n <blockquote>\n  <p>\n   reveng had nothing, but I'm not entirely sure I'm driving it correctly --- it appeared to execute more quickly than anything which does a brute force search ought to.\n  </p>\n </blockquote>\n <h2>\n  Why reveng executes so quickly?\n </h2>\n <p>\n  It's because there are only 2\n  <sup>\n   width\n  </sup>\n  possible polynomials. reveng only takes small time to try each polynomial. In this case width = 24, so there are only 1048576 polynomials, which is not very large for a computer.\n </p>\n <h2>\n  Why reveng returns no output? What's the difference between this and CRC?\n </h2>\n <p>\n  CRC appends\n  <code>\n   width\n  </code>\n  (in this case - 24) bits to the input before computing polynomial remainder, this algorithm doesn't.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "user202729",
            "time": "Oct 24, 2018 at 5:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "David Given",
                    "text": "<span class=\"comment-copy\">Wow --- thank you so much! I was expecting to have to pick away at it myself once I got back to the machine and could generate source data. Yes, this works fine (I have a C implementation and the results match). I'm a bit surprised reveng didn't detect this; it seems like a fairly standard variation to the standard algorithm.</span>",
                    "time": null
                },
                {
                    "user": "David Given",
                    "text": "<span class=\"comment-copy\">Also, would you like a credit in my code, and if so, how?</span>",
                    "time": null
                },
                {
                    "user": "Silicomancer",
                    "text": "<span class=\"comment-copy\">Does reveng always/completely use brute force to find a CRC polynomial? For a CRC32 it needs about 10 minutes. Imagine how long it would take for a CRC64. Are there no methods to reduce the computation effort in a non-brute-force manner?</span>",
                    "time": null
                },
                {
                    "user": "user202729",
                    "text": "<span class=\"comment-copy\">@Silicomancer I think so. / I think <a href=\"https://www.cosc.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html\" rel=\"nofollow noreferrer\">cosc.canterbury.ac.nz/greg.ewing/essays/â€¦</a> may have a method.</span>",
                    "time": null
                },
                {
                    "user": "Silicomancer",
                    "text": "<span class=\"comment-copy\">@user202729: It seems the author uses a very special method to calculate the polynomial. I think in most cases this will not work since it requires very specific modification of the payload data (namely repeated changing the data by a single, walking bit). Do you have an idea if there is a non-brute-force method that uses random payload/checksum pairs to reconstruct the polynomial?</span>",
                    "time": null
                }
            ]
        }
    ]
}