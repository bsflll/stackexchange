{
    "title": "What Can Be a Fast Way to Count Basic-Blocks Dynamically?",
    "link": "https://reverseengineering.stackexchange.com/questions/5958/what-can-be-a-fast-way-to-count-basic-blocks-dynamically",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to add basic-block counting to a static analyzer. This analyzer itself uses\n  <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow\">\n   PIN\n  </a>\n  as default tool for this kind of works.\n </p>\n <p>\n  So, I wrote a pintool for counting basic-blocks. But, when I try to open a complex PDF (\n  <em>\n   eg.\n  </em>\n  with 3D) or Excel, it takes about 5 minutes to proceed.\n </p>\n <p>\n  I am also working on\n  <a href=\"http://www.dynamorio.org/\" rel=\"nofollow\">\n   DynamoRIO\n  </a>\n  , but still no luck!\n </p>\n <p>\n  Any solution to count basic-blocks faster?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "711",
    "tags": [
        "windows",
        "binary-analysis"
    ],
    "user": "sealed...",
    "time": "Jul 28, 2014 at 17:49",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n @yaspr, you're mistaken. He's talking about the number of basic blocks being executed when his/her target opens a PDF or Excel file.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n Posting the source of the PIN/DynamoRIO tool would help. Without the source code, we cannot determine what are you doing that causes it to take that long. In any case, binary instrumentation is\n <i>\n  always\n </i>\n slower than normal, non instrumented, execution.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n You MUST definitely tell more about the method you are using to\n <i>\n  count basic blocks\n </i>\n . The problem may lie in your algorithm... But, it might also be that this overhead is strongly connected with the problem (yet, I don't think that you can count basic blocks at all... just the number of intervals between two conditional jumps in an execution trace... which is something\n <b>\n  totally different\n </b>\n ).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Does your pintool remove the calls to the instrumentation function from a block after it's called once? This could help with performance for blocks that are called very often if you are only interested in knowing which blocks are reached and not how many times they are.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "ekse",
            "time": "Jul 28, 2014 at 16:55",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The\n  <em>\n   bbcount\n  </em>\n  example in DynamoRIO should give you a very good starting point, assuming that you really want to count the number of times a basic block is executed at runtime.\nThe instrumentation inserted by this example is very close to the bare minimum you can achieve (it directly inserts an increment instruction pointing to a global buffer and tries to do so at a location where flags are dead, so it can overwrite them safely without restoring them).\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "newgre",
            "time": "Jul 28, 2014 at 18:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "jmiserez",
                    "text": "<span class=\"comment-copy\">The <a href=\"http://dynamorio.org/docs/samples/bbcount.c\" rel=\"nofollow noreferrer\">bbcount example</a> should run at near native speeds. I don't have benchmarks for the raw bbcount example, but my own project built upon that code (with some additional computation) runs at around 66%-85% of the native speed. So just counting basic blocks should <i>never</i> be slower than that! I've tried Excel, Word, etc. as well and they all run smoothly.</span>",
                    "time": null
                }
            ]
        }
    ]
}