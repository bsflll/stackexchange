{
    "title": "Expressing trace semantics as a solution for a fixpoint equation",
    "link": "https://reverseengineering.stackexchange.com/questions/8830/expressing-trace-semantics-as-a-solution-for-a-fixpoint-equation",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was reading through the chapter on Obfuscation in \"Practical Reverse Engineering\" I encountered the following statement.\n </p>\n <blockquote>\n  <p>\n   Where X is the set of execution traces (finite and infinite), you can\n  express the trace semantics as the least solution (for the\n  computational partial ordering) of a fixpoint equation X = F( X).\n  </p>\n </blockquote>\n <p>\n  Could someone explain what that means in simple terms? If you could point me towards any resources for further reading and learning, that'd be great too.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "115",
    "tags": [
        "obfuscation",
        "program-analysis"
    ],
    "user": null,
    "time": "May 6, 2015 at 19:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You may consult pages 39-41 in the thesis\n </p>\n <blockquote>\n  <p>\n   \"Code Obfuscation and Malware Detection by Abstract Interpretation\"\n  </p>\n </blockquote>\n <p>\n  of M. Dalla Preda about formal obfuscation; or sections 4.4 and 4.5 in the orignal paper\n </p>\n <blockquote>\n  <p>\n   \"Systematic Design of Program Transformation Frameworks by Abstract\n  Interpretation\"\n  </p>\n </blockquote>\n <p>\n  of Cousot and Cousot.\n </p>\n <p>\n  The theory is formal and requires much more technical details than the following interpretation, but the idea is that:\n </p>\n <p>\n  The \"finite trace\" semantics of a program\n  <code>\n   P\n  </code>\n  is defined by the set of all finite traces of\n  <code>\n   P\n  </code>\n  . A trace is nothing but a finite sequence of states of\n  <code>\n   P\n  </code>\n  , obtained when running\n  <code>\n   P\n  </code>\n  , step-by-step over \"commands\" of\n  <code>\n   P\n  </code>\n  .\n </p>\n <p>\n  (You may note that, from a state, we can get a set of possible next states, because the command at this state can be nondeterministic: it can receive some value from environment).\n </p>\n <p>\n  To calculate the finite trace semantics of\n  <code>\n   P\n  </code>\n  , one way (which one is refered in your book) is to use a function\n  <code>\n   F\n  </code>\n  defined from FinSeqs to FinSeqs:\n </p>\n <pre><code>F : FinSeq -> FinSeq\n</code></pre>\n <p>\n  where\n  <code>\n   FinSeqs\n  </code>\n  is the set of all \"sub-set of finite sequences of states of\n  <code>\n   P\n  </code>\n  \" (you may think that each sub-set is a possible value for the \"finite trace\" semantics of\n  <code>\n   P\n  </code>\n  ).\n </p>\n <p>\n  This function\n  <code>\n   F\n  </code>\n  map a sub-set\n  <code>\n   X\n  </code>\n  to a sub-set\n  <code>\n   X'\n  </code>\n  so that each trace\n  <code>\n   x'\n  </code>\n  of\n  <code>\n   X'\n  </code>\n  has a trace\n  <code>\n   x\n  </code>\n  of\n  <code>\n   X\n  </code>\n  as suffix (that is the reason why it is called \"backward\" in the paper of Cousot and Cousot). Particularly, we have that\n </p>\n <pre><code>x' = sj . x\nx = si . x1\n</code></pre>\n <p>\n  and\n  <code>\n   sj\n  </code>\n  must be able to be a next state of\n  <code>\n   si\n  </code>\n  . The least fixpoint of the function\n  <code>\n   F\n  </code>\n  , namely some set\n  <code>\n   Xp\n  </code>\n  so that\n </p>\n <pre><code>F(Xp) = Xp\n</code></pre>\n <p>\n  is called the trace semantics of\n  <code>\n   P\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Ta Thanh Dinh",
            "time": "May 7, 2015 at 0:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}