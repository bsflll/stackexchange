{
    "title": "nop with argument in x86_64",
    "link": "https://reverseengineering.stackexchange.com/questions/11971/nop-with-argument-in-x86-64",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A program I'm investigating has the following code (disassembled by IDA with some light censorship by me):\n </p>\n <pre><code>__text:....B9                 call    <redacted>\n__text:....BE                 nop\n__text:....BF                 nop     dword ptr [rax+00h]\n</code></pre>\n <p>\n  I have two questions. First, why would the compiler have inserted these\n  <code>\n   nop\n  </code>\n  s? They don't appear to be for any alignment purpose.\n </p>\n <p>\n  Second, what is that\n  <code>\n   nop\n  </code>\n  with a relative addressing argument? Its hex is\n  <code>\n   0F 1F 40 00\n  </code>\n  . Looking at\n  <a href=\"http://ref.x86asm.net/\" rel=\"noreferrer\">\n   http://ref.x86asm.net/\n  </a>\n  , this does appear to be an instruction called \"hintable NOP\", but I'm having trouble finding relevant information about it.\n </p>\n <p>\n  By the way, the next instruction starts at\n  <code>\n   ....C3\n  </code>\n  and is a real/productive instruction (that is, not a\n  <code>\n   nop\n  </code>\n  or anything morally equivalent to a\n  <code>\n   nop\n  </code>\n  ).\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 2,
    "views": "15k",
    "tags": [
        "x86"
    ],
    "user": "Brennan Vincent",
    "time": "Feb 8, 2016 at 20:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These are multi byte\n  <code>\n   nop\n  </code>\n  instructions.\n  \n\n  From\n  <a href=\"http://www.felixcloutier.com/x86/NOP.html\" rel=\"noreferrer\">\n   http://www.felixcloutier.com/x86/NOP.html\n  </a>\n </p>\n <blockquote>\n  <p>\n   <strong>\n    Description\n   </strong>\n  </p>\n  <p>\n   This instruction performs no operation. It is a one-byte or multi-byte\n  NOP that takes up space in the instruction stream but does not impact\n  machine context, except for the EIP register.\n  </p>\n  <p>\n   The multi-byte form of NOP is available on processors with model\n  encoding:\n  </p>\n  <p>\n   The multi-byte NOP instruction does not alter the content of a\n  register and will not issue a memory operation. The instruction’s\n  operation is the same in non-64-bit modes and 64-bit mode.\n  </p>\n  <p>\n   <strong>\n    Operation\n   </strong>\n  </p>\n  <p>\n   The one-byte NOP instruction is an alias mnemonic for the XCHG (E)AX,\n  (E)AX instruction.\n  </p>\n  <p>\n   The multi-byte NOP instruction performs no operation on supported\n  processors and generates undefined opcode exception on processors that\n  do not support the multi-byte NOP instruction.\n  </p>\n  <p>\n   The memory operand form of the instruction allows software to create a\n  byte sequence of “no operation” as one instruction. For situations\n  where multiple-byte NOPs are needed, the recommended operations\n  (32-bit mode and 64-bit mode) are:\n  </p>\n  <pre><code>+---------+--------------------------------+------------------------------+\n| LENGTH  |           ASSEMBLY             |         BYTE SEQUENCE        |\n+---------+--------------------------------+------------------------------+\n|         |                                |                              |\n| 2 bytes |  66 NOP                        |  66 90H                      |\n|         |                                |                              |\n| 3 bytes |  NOP DWORD ptr [EAX]           |  0F 1F 00H                   |\n|         |                                |                              |\n| 4 bytes |  NOP DWORD ptr [EAX + 00H]     |  0F 1F 40 00H                |\n|         |                                |                              |\n| 5 bytes |  NOP DWORD ptr [EAX + EAX*1 +  |  0F 1F 44 00 00H             |\n|         | 00H]                           |                              |\n|         |                                |                              |\n| 6 bytes |  66 NOP DWORD ptr [EAX + EAX*1 |  66 0F 1F 44 00 00H          |\n|         |  + 00H]                        |                              |\n|         |                                |                              |\n| 7 bytes |  NOP DWORD ptr [EAX + 00000000 |  0F 1F 80 00 00 00 00H       |\n|         | H]                             |                              |\n|         |                                |                              |\n| 8 bytes |  NOP DWORD ptr [EAX + EAX*1 +  |  0F 1F 84 00 00 00 00 00H    |\n|         | 00000000H]                     |                              |\n|         |                                |                              |\n| 9 bytes |  66 NOP DWORD ptr [EAX + EAX*1 |  66 0F 1F 84 00 00 00 00 00H |\n|         |  + 00000000H]                  |                              |\n+---------+--------------------------------+------------------------------+\n</code></pre>\n </blockquote>\n</div>\n</body></html>",
            "votes": "11",
            "user": "0xec",
            "time": "Feb 9, 2016 at 8:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Nitpick: this same table appears in Intel's official reference (and unless my memory deceives me, the description is very similar). Perhaps it's better to point OP to that instead.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Jongware: the linked site is generated from Intel docs</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Regarding your first question,\n  <code>\n   NOP\n  </code>\n  s are issued by the compiler when it's interested in aligning the code following it, usually because that code is target of a jump (such as in a loop) and it's beneficial for it to be aligned to a paragraph (16-byte boundary) or a cache line (32-byte boundary).\n </p>\n <p>\n  In other words, it does so to increase performance.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Watcom",
            "time": "Dec 31, 2017 at 14:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}