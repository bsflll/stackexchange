{
    "title": "How do you find and set a BP on OutputDebugString calls in OllyDBG?",
    "link": "https://reverseengineering.stackexchange.com/questions/14528/how-do-you-find-and-set-a-bp-on-outputdebugstring-calls-in-ollydbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a binary that is utilizing OutputDebugString as an anti-debugging technique. I want to find the calls and patch up the jump table or something similar. Normally I can find an API call by using the \"Names\" window. Also I have tried searching for all intermodular calls. The OutputDebugString API is found in neither, but I know it is being called. How do I find the calls to this API and set a BP on them?\n </p>\n <p>\n  Note: This software is packed and protected using Armadillo, which uses some API redirections, so maybe it is using LoadLib/GetProcAddr to call the API by offset instead of by name?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 0,
    "views": "444",
    "tags": [
        "ollydbg"
    ],
    "user": "typedeaf",
    "time": "Jan 30, 2017 at 21:25",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n In the case of armadillo the module that calls these apis is decrypted and loaded in memory at runtime. With x64dbg you can name this module and correctly restore your breakpoints in it. Try finding it by placing a breakpoint on the api itself and then look in the callstack. Also, x64dbg is not susceptible to this anti debug trick so that might help you too...\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "typedeaf",
            "text": "<html><body><span class=\"comment-copy\">\n @mrexodia Okay, so I tried the method of\n <code>\n  Ctrl+G\n </code>\n and \"OutputDebugStringA\". This took me to, presumably, the first line of the API in kernel32.dll. If I\n <code>\n  Alt+F9\n </code>\n to run until user code, then I land before a call made to an address loaded in the DS. I guess at some point it uses\n <code>\n  GetProcAddr\n </code>\n and saves it there? Still, in the comment section, Olly detects it as a call to\n <code>\n  OutputDebugStringA\n </code>\n . Is the reason it is not being found with\n <code>\n  Ctrl+N\n </code>\n because its generated at runtime? That would mean all calls made by discovery via\n <code>\n  GetProcAddr\n </code>\n are not listed in the names list?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<html><body><span class=\"comment-copy\">\n Olly doesn't work well with modules that are dynamically allocated. Who knows what's going on.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}