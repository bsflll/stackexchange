{
    "title": "Printing bytecode in bytes given a string of assembly for Radare to disassemble?",
    "link": "https://reverseengineering.stackexchange.com/questions/18009/printing-bytecode-in-bytes-given-a-string-of-assembly-for-radare-to-disassemble",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://reverseengineering.stackexchange.com/users/18698/megabeets\">\n   Megabeets\n  </a>\n  determined\n  <a href=\"https://reverseengineering.stackexchange.com/a/18008/22669\">\n   in this answer\n  </a>\n  that depending on\n  <code>\n   asm.bits\n  </code>\n  Radare may show either\n </p>\n <pre><code>lea edx, [0x80490c8]         (asm.bits=32)\nlea edx, [rip + 0x80490c8]   (asm.bits=64)\n</code></pre>\n <p>\n  If I want to see what the byte-code would look like for\n  <code>\n   lea edx, [0x80490c8]\n  </code>\n  in x86_64, how would I go about getting that?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "554",
    "tags": [
        "assembly",
        "x86",
        "radare2",
        "x86-64"
    ],
    "user": "Evan Carroll",
    "time": "Aug 9, 2019 at 14:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Actually, there is no\n  <code>\n   lea edx, [0x80490c8]\n  </code>\n  for 64-bits addressing modes. Since, afaik, in all 64-bits addressing modes\n  <code>\n   lea\n  </code>\n  is a register relative opcode.\n </p>\n <blockquote>\n  <p>\n   <strong>\n    LEA - Load Effective Address\n   </strong>\n   \n\n   Computes the effective address of the second operand (the\n  source operand) and stores it in the first operand (destination\n  operand). The source operand is a memory address (offset part)\n  specified with one of the processors addressing modes; the destination\n  operand is a general-purpose register.\n  </p>\n  <p>\n   Source: Intel®\n   <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf\" rel=\"nofollow noreferrer\">\n    64 and IA-32 Architectures\n  Software Developer’s Manual\n   </a>\n  </p>\n </blockquote>\n <hr/>\n <p>\n  Anyway, if you want to know the bytecodes that represent an instruction using radare2 you can use the\n  <code>\n   pa\n  </code>\n  command.\n </p>\n <p>\n  In 32-bits mode it'll look like this:\n </p>\n <pre><code>[0x00000000]> e asm.bits=32\n[0x00000000]> pa lea edx, [0x80490c8]\n8d15c8900408\n[0x00000000]> pad 8d15c8900408\nlea edx, [0x80490c8]\n</code></pre>\n <p>\n  In 64-bits mode it'll look like this:\n </p>\n <pre><code>[0x00000000]> e asm.bits=64\n[0x00000000]> pa lea edx, [0x80490c8]\n488d15c8900408\n[0x00000000]> pad 488d15c8900408\nlea rdx, [rip + 0x80490c8]\n</code></pre>\n <p>\n  You can see that radare2 knows that\n  <code>\n   lea edx, [0x80490c8]\n  </code>\n  can't be expressed in 64bits so it uses a RIP relative expression.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Megabeets",
            "time": "Apr 16, 2018 at 5:46",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  32\n </p>\n <pre><code>radare2  -a x86 -b 32 -c \"wa lea edx,[0x80490c8] ; pd 1 ; exit()\" -\nWritten 6 byte(s) (lea edx,[0x80490c8]) = wx 8d15c8900408\n            0x00000000      8d15c8900408   lea edx, [0x80490c8]\n -- Are you a wizard?\n[0x00000000]> q\n</code></pre>\n <p>\n  64\n </p>\n <pre><code>radare2  -a x86 -b 64 -c \"wa lea edx,[rip+0x80490c8] ; pd 1 ; exit()\" -\nWritten 7 byte(s) (lea edx,[rip+0x80490c8]) = wx 488d98c8900408\n            0x00000000      488d98c89004.  lea rbx, [rax + 0x80490c8]\n -- SHALL WE PLAY A GAME?\n[0x00000000]> q\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "blabb",
            "time": "Apr 16, 2018 at 5:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}