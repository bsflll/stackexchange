{
    "title": "Hiding shared library calls from ltrace",
    "link": "https://reverseengineering.stackexchange.com/questions/11453/hiding-shared-library-calls-from-ltrace",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to implement some antidebug methods. Although I have encrypted texts,\n  <code>\n   ltrace\n  </code>\n  reveals them, for example:\n </p>\n <pre><code>strstr(\"Name:\\tltrace\n\", \"ltrace\") \n</code></pre>\n <p>\n  A solution would be static linking, but I do not want to statically link everything. Is there a way to select which functions to link statically, or to prevent\n  <code>\n   ltrace\n  </code>\n  from revealing these information?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "513",
    "tags": [
        "c",
        "dynamic-linking"
    ],
    "user": "robert",
    "time": "Dec 3, 2015 at 15:06",
    "comments": [
        {
            "user": "robert",
            "text": "<html><body><span class=\"comment-copy\">\n Thank you downvoter. Can you write a comment too or just pressing the downvote button?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Is there a way to select which functions to link statically\n  </p>\n </blockquote>\n <p>\n  That's a question for\n  <a href=\"https://stackoverflow.com/\">\n   https://stackoverflow.com/\n  </a>\n </p>\n <blockquote>\n  <p>\n   or to prevent\n   <code>\n    ltrace\n   </code>\n   from revealing these information\n  </p>\n </blockquote>\n <p>\n  You could have your program try to find and terminate running\n  <code>\n   ltrace\n  </code>\n  processes. But this has limited use if your process doesn't have sufficient privileges or if the user renames\n  <code>\n   ltrace\n  </code>\n  or if the user patches out (disables) your\n  <code>\n   ltrace\n  </code>\n  -termination code.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">(And as a side comment, having your program terminate or interfere with users' other processes at runtime is likely to make for very unhappy users.)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   ltrace\n  </code>\n  uses\n  <code>\n   ptrace\n  </code>\n  to patch instructions in the original binary to a breakpoint. This is specifically done to every\n  <code>\n   plt\n  </code>\n  entry in the dynamically linked binary. The\n  <code>\n   plt\n  </code>\n  entries contain a small piece of code to resolve and jump to the function being called.\n </p>\n <p>\n  You can probably write code in your program to do the opposite and restore every breakpoint after\n  <code>\n   ltrace\n  </code>\n  has patched it. See\n  <a href=\"https://gitlab.com/cespedes/ltrace/-/blob/main/sysdeps/linux-gnu/breakpoint.c?ref_type=heads#L41\" rel=\"nofollow noreferrer\">\n   <code>\n    arch_enable_breakpoint\n   </code>\n  </a>\n  in the\n  <code>\n   ltrace\n  </code>\n  source\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Aug 24, 2023 at 15:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}