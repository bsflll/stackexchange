{
    "title": "IAT vs GOT address resolving: which of them resolve during runtime and which during load time by default?",
    "link": "https://reverseengineering.stackexchange.com/questions/22509/iat-vs-got-address-resolving-which-of-them-resolve-during-runtime-and-which-dur",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So based on my knowledge on windows apps, as far as i know the IAT gets filled  with correct addresses when the library gets loaded (correct me if I'm wrong)\n </p>\n <p>\n  now in linux, they use GOT, and again based on my knowledge the GOT gets filled in run time by default, meaning first we jump into PLT, then the first time i use a function (for example puts) we first call the dynamic loader by jumping in the beginning of PLT and that fills the corresponding address in GOT, and next time i call puts then i directly jump into it after going into PLT\n </p>\n <p>\n  so this means that by default, windows fills all the addresses in the IAT in load time but linux doesn't, correct?\n </p>\n <p>\n  and if so, then isn't this a security risk for linux? because in windows IAT is inside the rdata section and is read only, but in linux is read and write! and for example if we have a format string exploit then we can write on GOT but this doesnt happen in windows, am i missing something here?\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 1,
    "views": "817",
    "tags": [
        "windows",
        "linux",
        "memory",
        "pe",
        "elf"
    ],
    "user": "OneAndOnly",
    "time": "Nov 11, 2019 at 14:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You understanding is correct:\n </p>\n <ul>\n  <li>\n   <p>\n    PE's IAT is resolved by the system loader and can be made read-only afterwards.\n   </p>\n  </li>\n  <li>\n   <p>\n    ELF's GOT entries initially point to PLT stubs and are overwritten with the final address on the first call.. meaning GOT needs to remain writable.\n   </p>\n  </li>\n </ul>\n <p>\n  Writable GOT is indeed a known source of vulnerabilities which is why mitigations like\n  <a href=\"https://mudongliang.github.io/2016/07/11/relro-a-not-so-well-known-memory-corruption-mitigation-technique.html\" rel=\"nofollow noreferrer\">\n   RELRO\n  </a>\n  have been introduced.\n </p>\n <p>\n  Note that PEs can also use\n  <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/delayload-delay-load-import\" rel=\"nofollow noreferrer\">\n   delay-loaded imports\n  </a>\n  which work similar to GOT+PLT (resolution on first call) and may be subject to similar issue.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 11, 2019 at 18:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">But why they didn't load the entire thing by default? considering windows does it and there is no big performance impact, why not just do it and improve security?</span>",
                    "time": null
                }
            ]
        }
    ]
}