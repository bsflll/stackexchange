{
    "title": "Why is JMP used with CALL?",
    "link": "https://reverseengineering.stackexchange.com/questions/2857/why-is-jmp-used-with-call",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to analyze an old malware sample in OllyDbg. It has instruction of the format\n  <code>\n   CALL <JMP.&KERNEL32.SetUnhandledExceptionFilter>\n  </code>\n </p>\n <p>\n  I am not an expert in Assembly. I know that CALL is used to call a sub-routine and JMP is used to jump to a particular address in the memory but what is the result of using CALL with JMP? Could anyone clarify on it? Even pointers to where I could find answers would be very helpful. Thanks.\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "malware",
        "assembly"
    ],
    "user": "TheRookierLearner",
    "time": "Sep 29, 2013 at 15:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Seeing a call in the form\n  <code>\n   CALL <JMP.&KERNEL32.SetUnhandledExceptionFilter>\n  </code>\n  suggests that the binary was compiled with Visual C++'s\n  <strong>\n   <a href=\"http://msdn.microsoft.com/en-us/library/4khtbfyf%28VS.80%29.aspx\">\n    /INCREMENTAL\n   </a>\n  </strong>\n  option, hence the table of jump thunks.\n </p>\n <blockquote>\n  <p>\n   ... an incrementally linked executable (.exe) file or dynamic-link library (DLL):\n  </p>\n  <p>\n   ...\n  </p>\n  <ul>\n   <li>\n    May contain jump thunks to handle relocation of functions to new addresses.\n   </li>\n  </ul>\n  <p>\n   ...\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "13",
            "user": "Jason Geffner",
            "time": "Sep 29, 2013 at 17:12",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you're right, it could be called directly instead of being jumped after a call.\n </p>\n <p>\n  However, it makes it easier if the address of the API is referenced only once, and this single reference should be a\n  <code>\n   JMP\n  </code>\n  (otherwise, it would alter the stack).\n </p>\n <p>\n  So, there is only one memory reference to the API, via a single\n  <code>\n   JMP\n  </code>\n  . Each time the API is used, this\n  <code>\n   JMP\n  </code>\n  is\n  <code>\n   CALL\n  </code>\n  -ed, so execution is transferred transparently, and at the end of the API, the original address of the caller being still on the stack, the caller will be transparently returned to.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Ange",
            "time": "Sep 29, 2013 at 16:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "TheRookierLearner",
                    "text": "<span class=\"comment-copy\">Is this what constitues the Jump table?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The reason is for loading performance - the jumps are gathered into a single region that is made temporarily writable for the purpose of placing the API addresses, and is usually only a single page in size.  This avoids multiple calls to VirtualProtect() by the loader, in order to write all over the code space to every reference to any given API.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "peter ferrie",
            "time": "Sep 30, 2013 at 2:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}