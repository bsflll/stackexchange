{
    "title": "What is the correct disassembly for ARM opcode E1F322D1?",
    "link": "https://reverseengineering.stackexchange.com/questions/10609/what-is-the-correct-disassembly-for-arm-opcode-e1f322d1",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm adapting the\n  <a href=\"https://github.com/uxmal/reko\" rel=\"nofollow\">\n   reko decompiler\n  </a>\n  to use Capstone for its disassembler, instead of rolling my own. I'm using the .NET bindings provided by\n  <a href=\"https://github.com/9ee1/Capstone.NET\" rel=\"nofollow\">\n   Capstone.NET\n  </a>\n  .\n </p>\n <p>\n  The strategy is to replace the old ARM disassembler with the Capstone disassembler and then run the old unit tests to make sure nothing broke. I'm at a point where most test are passing, but the opcode\n  <code>\n   E1F322D1\n  </code>\n  , which both the old reko disassembler and ODA disassemble to:\n </p>\n <pre><code> ldrsb r2, [r3, #33]!\n</code></pre>\n <p>\n  But, Capstone responds with:\n </p>\n <pre><code>ldrsb r2,[r3,#&221]!\n</code></pre>\n <p>\n  I don't have other disassemblers handy, so I'm uncertain who to trust!\n </p>\n <p>\n  What's the correct disassembly?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "823",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "John Källén",
    "time": "Aug 11, 2015 at 18:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  IDA agrees with the first one:\n </p>\n <p>\n  <code>\n   LDRSB           R2, [R3,#33]!\n  </code>\n </p>\n <p>\n  Capstone might be trying to display something like #0x21, which would be equivalent, but it seems that something went wrong.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Aug 11, 2015 at 18:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Indeed, after some further troubleshooting I narrowed down the problem to Capstone.NET and reported it. Hopefully a fix will be forthcoming soon.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From\n  <a href=\"http://bear.ces.cwru.edu/eecs_382/ARM7-TDMI-manual-pt2.pdf\" rel=\"nofollow noreferrer\">\n   http://bear.ces.cwru.edu/eecs_382/ARM7-TDMI-manual-pt2.pdf\n  </a>\n  :\n </p>\n <p>\n  <img alt=\"LDRSB\" src=\"https://i.sstatic.net/dygTF.png\"/>\n </p>\n <p>\n  <code>\n   E1F322D1\n  </code>\n  equals\n  <code>\n   11100001111100110010001011010001\n  </code>\n  in binary.\n </p>\n <p>\n  Your question is specific to the offset, so we can examine the last dozen bits of that binary string with regard to the decomposition rules in the screenshot above:\n </p>\n <pre><code>... Offset 1 SH 1 Offset\n...  0010  1 10 1  0001\n</code></pre>\n <p>\n  Thus, the high nibble is\n  <code>\n   0010\n  </code>\n  and the low nibble is\n  <code>\n   0001\n  </code>\n  . If we combine them, we get\n  <code>\n   00100001\n  </code>\n  in binary, or\n  <code>\n   33\n  </code>\n  in decimal.\n </p>\n <p>\n  So the correct disassembly is\n  <code>\n   ldrsb r2, [r3, #33]!\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Aug 11, 2015 at 18:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}