{
    "title": "`af` vs `afr` in Radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/27322/af-vs-afr-in-radare2",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to understand the difference between\n  <code>\n   analyze functions\n  </code>\n  and\n  <code>\n   analyze functions recursively\n  </code>\n  in Radare2. Given a code snippet like this:\n </p>\n <pre><code>#include <stdio.h>\n\nvoid b() {\n    printf(\"b is called\n\");\n}\n\nvoid a() {\n   printf(\"a is called\n\");\n   b();\n}\n\n\nint main() {\n    a();\n    return 0;\n}\n</code></pre>\n <p>\n  When I run\n  <code>\n   afr\n  </code>\n  on the main function, it finds the following functions:\n </p>\n <pre><code>0x0000066a    1 21           main\n0x0000064d    1 29           sym.a\n0x00000510    1 6            sym.imp.puts\n0x0000063a    1 19           sym.b\n</code></pre>\n <p>\n  However, when I run\n  <code>\n   af\n  </code>\n  on the main function, it again finds the same functions:\n </p>\n <pre><code>0x0000066a    1 21           main\n0x0000064d    1 29           sym.a\n0x00000510    1 6            sym.imp.puts\n0x0000063a    1 19           sym.b\n</code></pre>\n <p>\n  I have not changed the default value of\n  <code>\n   anal.calls\n  </code>\n  which is set to\n  <code>\n   false\n  </code>\n </p>\n <p>\n  So, my question is what extra is\n  <code>\n   afr\n  </code>\n  finding that\n  <code>\n   af\n  </code>\n  isn't?\n </p>\n <p>\n  I am using Radare2 version 5.1.1\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "169",
    "tags": [
        "radare2"
    ],
    "user": "user1720897",
    "time": "Mar 27, 2021 at 4:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   af\n  </code>\n  and\n  <code>\n   afr\n  </code>\n  are different. Check radare's code base for deep understanding -\n  <a href=\"https://github.com/radareorg/radare2/blob/8d678888a97d9aed4049d1a7467132c41ad6ffa7/libr/core/cmd_anal.c\" rel=\"nofollow noreferrer\">\n   https://github.com/radareorg/radare2/blob/8d678888a97d9aed4049d1a7467132c41ad6ffa7/libr/core/cmd_anal.c\n  </a>\n  .\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/HbTax.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/HbTax.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/rZwL1.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/rZwL1.png\"/>\n  </a>\n </p>\n <p>\n  Now, consider following example to understand how they differ.\n </p>\n <pre><code>#include <stdio.h>\n\nint one()\n{\nreturn 1;\n}\n\nint fact(int n) {\n   if (n==0)\n      return 1;\n   else if (n==1)\n      return one();\n   else\n      return n*fact(n-1);\n}\n\nint main(void) {\n      return fact(5);\n}\n</code></pre>\n <p>\n  I just used\n  <a href=\"https://www.cs.mcgill.ca/%7Ecs573/fall2002/notes/lec273/lecture16/16_3.htm\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  factorial code and modified it a little. And following is the radare2 output.\n </p>\n <pre><code>$ radare2 a.out\n -- This page intentionally left blank.\n[0x00401020]> afl\n[0x00401020]> s main\n[0x0040114e]> afl\n[0x0040114e]> af main\n[0x0040114e]> afl\n0x0040114e    1 16           main\n0x00401111    6 61           sym.fact\n[0x0040114e]> afr main\n[0x0040114e]> afl\n0x0040114e    1 16           main\n0x00401111    6 61           sym.fact\n0x00401106    1 11           sym.one\n</code></pre>\n <p>\n  Note the detection of additional function when recursive analysis is used.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "R4444",
            "time": "Mar 27, 2021 at 5:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1720897",
                    "text": "<span class=\"comment-copy\">I am still now sure why my code isn't able to produce different results.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">R is for recursive your function is not recursive a recursive function is function that calls itself until it is stopped by an external condition. Like in the answer above fact (n) calls itself until n is 1 so if n is 10 fact will be calked 9 times like main fact10,9,8,7,6,5,4,3,2,1 return to main</span>",
                    "time": null
                }
            ]
        }
    ]
}