{
    "title": "What steps are needed to decode a Base64 binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/15279/what-steps-are-needed-to-decode-a-base64-binary",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I've found what appears to be Base64 inside of a\n  <strong>\n   PE header resource (.rsrc)\n  </strong>\n  which I've placed in\n  <a href=\"https://pastebin.com/04UjNGVB\" rel=\"nofollow noreferrer\">\n   this Gist\n  </a>\n  .\n </p>\n <p>\n  However, if I use a Base64 decoder, I end up getting a lot of binary data which appears as \"gibberish\" in the Base64 decoder web app. This means that either it is not Base64, it is modified Base64 OR it is deciphered to binary data (an embedded PE file).\n </p>\n <p>\n  I am not sure how to take that binary data and parse it into its own separate PE file. I'm only familiar with Base64 when it comes to ASCII text. I've tried copying the data and pasting into a hex editor like HxD and WinHex but neither have allowed me to paste the decoded data in.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "pe",
        "encodings"
    ],
    "user": "the_endian",
    "time": "May 4, 2017 at 9:58",
    "comments": [
        {
            "user": "seebiscuit",
            "text": "<html><body><span class=\"comment-copy\">\n Did you ever figure out how to decode  this?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is indeed base64 encoded string, it cannot possibly be so long and randomly follow the base64 acceptable characters and\n  <code>\n   =\n  </code>\n  padding.\n </p>\n <p>\n  The best way to figure out how that base64 decoded data is used is obviously to reverse engineer the code in charge of reading that data. There are only a handful of resource reading APIs which are most likely used to get a mapping of the resource by the executable.\n </p>\n <p>\n  After running base64 decoding on the entire string, this does look like a compress/encrypted message with an header. I couldn't recognize the header itself, so your best bet is indeed to reverse engineer the code processing the resource.\n </p>\n <p>\n  Also please not this does not necessarily mean there's a PE file hidden there, it could just as well be a configuration (either enrypted, compressed or both), an inject-able piece of code, or an actual resource such as an HTML or JPG.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "NirIzr",
            "time": "May 4, 2017 at 9:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}