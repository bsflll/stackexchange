{
    "title": "Restoring an Infected appending virus EXE file by",
    "link": "https://reverseengineering.stackexchange.com/questions/13728/restoring-an-infected-appending-virus-exe-file-by",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to restore a file that was infected by a virus (gaelicum or tenga)\n </p>\n <p>\n  It's an appending virus.\n </p>\n <p>\n  This is the warning I get when opening it in OllyDbg\n </p>\n <pre><code>: ---------------------------\nEntry Point Alert\n---------------------------\nModule 'SUPER_GAY_NIGGERS' has entry point outside the code (as specified in the PE header). Maybe this file is self-extracting or self-modifying. Please keep it in mind when setting breakpoints!\n---------------------------\nOK   \n---------------------------\n</code></pre>\n <p>\n  My questions are:\n </p>\n <ol>\n  <li>\n   How can I figure out what was the original Entry Point?\n  </li>\n  <li>\n   How can I restore the original entry point once I recover it?\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "900",
    "tags": [
        "ollydbg",
        "pe",
        "malware",
        "entry-point"
    ],
    "user": "BingBang32",
    "time": "Oct 16, 2016 at 17:16",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<html><body><span class=\"comment-copy\">\n It isn't too clear what you actual question is - are you trying to discover what was the previous entry point? are you trying to figure out how to change an executable's entry point? both?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "BingBang32",
            "text": "<html><body><span class=\"comment-copy\">\n yeeeeeeeeeeee both\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It is important to do the entire process inside a virtual machine to avoid any additional file infections and/or suffer the malicious effects of the virus.\n </p>\n <h1>\n  Finding the original entry point\n </h1>\n <p>\n  This is not a trivial task, since once the PE's entry point changes it is no longer recorded anywhere in the PR header. The only way to find the original entry point is through debugging the PE's execution throughout the malicious code added, until the additional code reaches to the original entry point.\n </p>\n <p>\n  Doing that depends heavily on how complex and protected the malicious code is. A simple approach (that might work) could be using a debugger such as\n  <a href=\"http://www.ollydbg.de/version2.html\" rel=\"nofollow\">\n   ollydbg\n  </a>\n  to run the code until it reached the original code's memory region (this can be done by opening the memory window and pressing\n  <kbd>\n   f12\n  </kbd>\n  after selecting the relevant memory regions).\n </p>\n <p>\n  If the malicious code implements any anti-debugging protections you might need to bypass those.\n </p>\n <h1>\n  Changing the entry point back\n </h1>\n <p>\n  If you've used ollydbg in the previous part, you could use PE dump plugin (\n  <a href=\"https://low-priority.appspot.com/ollydumpex/\" rel=\"nofollow\">\n   OllyDumpEx\n  </a>\n  for example) to dump the PE with the entry point by using the plugin when EIP points to that entry point.\n </p>\n <p>\n  Alternatively, you can use any PE editing tool (like\n  <a href=\"http://www.heaventools.com/overview.htm\" rel=\"nofollow\">\n   PEExplorer\n  </a>\n  ,\n  <a href=\"http://www.woodmann.com/collaborative/tools/index.php/LordPE\" rel=\"nofollow\">\n   LordPE\n  </a>\n  or\n  <a href=\"http://www.ntcore.com/exsuite.php\" rel=\"nofollow\">\n   CFFExplorer\n  </a>\n  ) or advanced hex editor (My personal preference is\n  <a href=\"http://www.sweetscape.com/010editor/\" rel=\"nofollow\">\n   010Editor\n  </a>\n  ) to edit the Entry Point field in the PE header directly.\n </p>\n <h1>\n  Removing residues\n </h1>\n <p>\n  Although the malicious code should no longer run it is still inside your file. As an optional third step, you might want to remove the file infector's residue. According to the error message, it seems the file infector added it's own section, so by using a PE editor you could remove that new section in order to remove at least most of the virus's residues in your file.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Oct 16, 2016 at 17:11",
            "is_accepted": true,
            "comments": []
        }
    ]
}