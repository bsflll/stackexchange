{
    "title": "Information provided by Hex-Rays after @ symbol in variable declarations",
    "link": "https://reverseengineering.stackexchange.com/questions/4118/information-provided-by-hex-rays-after-symbol-in-variable-declarations",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Could you explain to me the information provided after the\n  <code>\n   @\n  </code>\n  symbol in Hex-Rays decompilation ? For examples\n  <code>\n   @1\n  </code>\n  and\n  <code>\n   @5\n  </code>\n  in the following output:\n </p>\n <pre><code>struct WSAData wsadata; // [sp+0h] [bp-1A0h]@1\nint v6; // [sp+198h] [bp-8h]@5\nint v7; // [sp+19Ch] [bp-4h]@5\n</code></pre>\n <p>\n  <img alt=\"Hexrays Decompilation: Variable Declarations\" src=\"https://i.sstatic.net/wB4ct.png\"/>\n </p>\n</div>\n</body></html>",
    "votes": "10",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "Minh-Triet Pham Tran",
    "time": "Apr 22, 2014 at 9:50",
    "comments": [
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n <a href=\"http://stackoverflow.com/questions/14728764/ida-pro-hex-rays-function-reconstruction-variables-eax34-etc\" title=\"ida pro hex rays function reconstruction variables eax34 etc\">\n  stackoverflow.com/questions/14728764/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<html><body><span class=\"comment-copy\">\n Like I said in the linked question, it seems to indicate the number of the basic block where this variable is first referenced. (To see basic blocks, switch to disassembly graph mode.)\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The numbers denote the basic block number in the microcode where the variable was first used. Microcode basic blocks do not necessarily match the basics block in the disassembly, because during optimization steps the microcode basic blocks may be split, merged, added, or removed.\n </p>\n <p>\n  You can see some samples of microcode in Ilfak's\n  <a href=\"http://www.hex-rays.com/idapro/ppt/decompilers_and_beyond_white_paper.pdf\">\n   whitepaper on the decompiler\n  </a>\n  or in some of the old blog posts:\n  <a href=\"http://www.datarescue.com/laboratory/vd.htm\">\n   1\n  </a>\n  <a href=\"http://www.hexblog.com/?p=39\">\n   2\n  </a>\n  (block number is the first number on the line).\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Apr 22, 2014 at 9:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Minh-Triet Pham Tran",
                    "text": "<span class=\"comment-copy\">Hi, thanks for your answer, I think the link to the whitepaper on the decompiler should be updated :) .</span>",
                    "time": null
                }
            ]
        }
    ]
}