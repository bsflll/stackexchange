{
    "title": "Why would MSVC pass a constant \"2\" for an unused this parameter?",
    "link": "https://reverseengineering.stackexchange.com/questions/18366/why-would-msvc-pass-a-constant-2-for-an-unused-this-parameter",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Hex-Rays decompiled (with the assistance of pdb symbols) a piece of code as such:\n  <code>\n   XPerfAddIn::CFramesInfoSource::MatchEventDescriptor( (XPerfAddIn::CFramesInfoSource *)2\n  </code>\n </p>\n <p>\n  And by my following of the assembly, it is correct:\n </p>\n <pre><code>xor     r15d, r15d\ntest    rax, rax\njz      loc_1800224C7\nlea     r13, [rax+20h]\ncmp     [r13+0], r15\njz      loc_1800224C7\nlea     r12, [r14+28h]\nmov     rax, [rsp+260h+a3]\nmov     rcx, [rax]\ncmp     rcx, cs:qword_180044990\njnz     loc_1800224C7\nmov     rax, [rax+8]\ncmp     rax, cs:qword_180044998\njnz     loc_1800224C7\nlea     ecx, [r15+2]\nmov     r9d, ecx        ; a4\nlea     r8, MSHTML_CDOC_ONPAINT_START_V1 ; a3\nmov     rdx, r12        ; a2\ncall    ?MatchEventDescriptor@CFramesInfoSource@XPerfAddIn\n</code></pre>\n <p>\n  MatchEventDescriptor does not use the 'this' parameter in rcx, so it doesn't really matter what gets passed in. So\n  <em>\n   why\n  </em>\n  would the compiler emit an extra lea instruction to pass in a constant 2 instead of just leaving it 0... or passing in the actual, correct this value?\n </p>\n</div>\n</body></html>",
    "votes": "-1",
    "answers": 1,
    "views": "135",
    "tags": [
        "ida",
        "disassembly",
        "msvc"
    ],
    "user": "Zhentar",
    "time": "May 26, 2018 at 15:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n add the call to the disassembly\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Zhentar",
            "text": "<html><body><span class=\"comment-copy\">\n @IgorSkochinsky edited it in\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Apparently\n  <code>\n   ecx\n  </code>\n  is just used as a temporary for calculating the value 2 which is copied to\n  <code>\n   r9d\n  </code>\n  and is probably used later in the function.\n </p>\n <p>\n  When  the decompiler does not have reliable information about function prototype, it has to resort to heuristics, or guessing.  Since the demangled function name looks like a C++ method, it assumes that it’s a method of a class\n  <code>\n   XPerfAddIn::CFramesInfoSource\n  </code>\n  and since it’s not marked\n  <code>\n   static\n  </code>\n  , it probably takes in the class instance in\n  <code>\n   rcx\n  </code>\n  as common for the\n  <code>\n   thiscall\n  </code>\n  calling convention, thus the value in\n  <code>\n   rcx\n  </code>\n  (\n  <code>\n   ecx\n  </code>\n  ) is assumed to be the\n  <code>\n   this\n  </code>\n  pointer.\n </p>\n <p>\n  If you analyzed the function and deduced that it does not actually use\n  <code>\n   rcx/ecx\n  </code>\n  , you can edit the function prototype, remove the\n  <code>\n   this\n  </code>\n  argument and\n  <code>\n   __thiscall\n  </code>\n  calling convention to get “proper” decompilation.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 26, 2018 at 16:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Zhentar",
                    "text": "<span class=\"comment-copy\">This is x86-64, so it's it's expecting the first argument to be in rcx whether or not it's <code>this</code>. I tried manually defining the registers ( <code>bool __fastcall XPerfAddIn__CFramesInfoSource__MatchEventDescriptor(_EVENT_DESCRIPTOR *a2&lt;rdx&gt;, _EVENT_DESCRIPTOR *a3&lt;r8&gt;, EDVersionCheckType a4&lt;r9&gt;)</code>) , but that just gave me the error \"Argument location rdx is not allowed here\"</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">explicit argument locations only work for <code>__usercall</code></span>",
                    "time": null
                }
            ]
        }
    ]
}