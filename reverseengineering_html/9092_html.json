{
    "title": "Replacing small length instruction with larger length instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/9092/replacing-small-length-instruction-with-larger-length-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Basically I want to replace\n  <code>\n   MOVS R1, #0x0\n  </code>\n  with\n  <code>\n   MOV.W R1, #0x123\n  </code>\n  , since later instruction requires 4 bytes it is impossible to simply replace in HEX code.\n </p>\n <p>\n  I am using IDA Pro for analyzing native android library. I read about codecaves but my text segment don't have free space to add new data.\n </p>\n <p>\n  Since i'm newbie to this, any tutorials are welcome.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "android",
        "arm",
        "hex",
        "patching"
    ],
    "user": "user2578525",
    "time": "Jun 8, 2015 at 11:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As you need just 2 more bytes, you don't need a large code cave. Out of the box, there are four things you can try:\n </p>\n <ul>\n  <li>\n   It's very likely you have a function or 2 in your text segment that are present in some source code, but never called. Look for\n   <code>\n    loc_XXXX\n   </code>\n   labels that have the standard function prefix (\n   <code>\n    push ....,LR\n   </code>\n   ) and the suffix (\n   <code>\n    pop ....,PC\n   </code>\n   ) a few dozen bytes later. Reuse these functions for your code cave.\n  </li>\n  <li>\n   Check if there are any redundant instructions in your code. Maybe you can omit 2 bytes somewhere nearby and move the rest around.\n  </li>\n  <li>\n   Often, function starts are aligned to 16 byte boundaries. There might be a few spare bytes between your current function and the next. These can show up like\n   <code>\n    nop.w\n   </code>\n   in assembly, or\n   <code>\n    f3af 8000\n   </code>\n   in hex.\n  </li>\n  <li>\n   You could use the text of a rarely used error message for your code cave. Replace \"ThisIsALongErrorMessage\\0\" with \"LongError\\0\" and you've gained some bytes, at the expense of the clarity of an error message you're never likely to see anyway. This is a bit harder, since your text is probably in some section that isn't marked executable, and you'll have to fiddle with the ELF headers to fix this.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Jun 8, 2015 at 10:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2578525",
                    "text": "<span class=\"comment-copy\">Thanks.. I've found some debugging messages in same function so i'll omit calls to __android_log_print for getting some space.</span>",
                    "time": null
                }
            ]
        }
    ]
}