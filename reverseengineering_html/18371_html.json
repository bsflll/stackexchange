{
    "title": "Parse Opcodes from Binary Code",
    "link": "https://reverseengineering.stackexchange.com/questions/18371/parse-opcodes-from-binary-code",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have been using the\n  <a href=\"https://github.com/gdabah/distorm\" rel=\"nofollow noreferrer\">\n   Distorm\n  </a>\n  library, using the\n  <code>\n   distorm_decode()\n  </code>\n  function in x64 to retrieve Opcode and Operands from binary code. For example,\n  <code>\n   44 0F45 C8\n  </code>\n  is decoded to\n  <code>\n   cmovne r9d,eax\n  </code>\n  .\n </p>\n <p>\n  I would like to have a way to parse the hex binary instruction to extract the opcode part of it, in the example\n  <code>\n   44 *0F45* C8\n  </code>\n  , would like to extract\n  <code>\n   *0F45*\n  </code>\n  which is the\n  <code>\n   cmovne\n  </code>\n  opcode part.\n </p>\n <p>\n  I was looking at\n  <a href=\"http://ref.x86asm.net/coder64.html\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  and I was thinking of maybe doing a lookup at a given Hex Opcode, given a mnemonic string.\n </p>\n <p>\n  Are there any other built in libraries like Distorm that can achieve this? As far as I understand, Distorm has a\n  <a href=\"https://github.com/gdabah/distorm/wiki/DecomposeInterface\" rel=\"nofollow noreferrer\">\n   distorm_decompose\n  </a>\n  function and interface, but I can't reach to the\n  <code>\n   cmovne\n  </code>\n  binary representation\n  <code>\n   *0F45*\n  </code>\n  from the\n  <code>\n   struct _DInst\n  </code>\n  returned from that call.\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly"
    ],
    "user": "fred26",
    "time": "May 28, 2018 at 12:18",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<html><body><span class=\"comment-copy\">\n You should take a look to\n <a href=\"https://www.capstone-engine.org/\" rel=\"nofollow noreferrer\">\n  capstone-engine.org\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Basically your usual x86_64 Intel CISC instructions have 2 different opcode formats legacy and VEX.\n </p>\n <hr/>\n <h2>\n  Common opcodes\n </h2>\n <p>\n  The legacy opcodes which includes the most common ones used consists of:\n </p>\n <ul>\n  <li>\n   1 - 4 bytes legacy prefixes which are optional\n  </li>\n  <li>\n   1 byte of a REX prefix which is sometimes required\n  </li>\n  <li>\n   1 - 3 bytes of opcode\n  </li>\n  <li>\n   1 - 18 bytes of additional operand/mode data\n  </li>\n </ul>\n <p>\n  If I understand correctly, you are only interested in the sequence of the 1 - 3 bytes\nIn order to extract it from a single instruction you need to determine whether the prefixes \"ended\" and how long the opcode is.\n </p>\n <p>\n  The second point is pretty simple, the opcode pattern is as such:\nLet # denote a single byte\nA sequence of bytes is a legacy x86 opcode can only be in one of the following patterns:\n </p>\n <ul>\n  <li>\n   #\n  </li>\n  <li>\n   0x0F # ‚Üê This is the pattern in your example\n  </li>\n  <li>\n   0x0F 0x3A #\n  </li>\n </ul>\n <p>\n  The second part appears more tricky since there are theoretically many combinations for those 5 prefix bytes (legacy + prefix).\n </p>\n <p>\n  Legacy prefix bytes were used by certain operations to mark another meaning, for example to make an operation on other memory segment, this is a limited set which consists (according to\n  <a href=\"https://wiki.osdev.org/X86-64_Instruction_Encoding\" rel=\"nofollow noreferrer\">\n   this\n  </a>\n  ) of:\n0xF0, 0xF2, 0xF3, 0x2E, 0x36, 0x3E, 0x26, 0x64, 0x65, 0x66 and 0x67\n </p>\n <p>\n  So, a 1-4 byte sequence of these bytes at the start should be ignored.\n </p>\n <p>\n  The REX prefix is used to operate in long mode and is usually used when 64 bit register operands are present or when an extended register is used R8 - R15. As this is also a prefix, this also should be ignored\nA REX prefix always starts with the bit sequence\n  <code>\n   0100\n  </code>\n  being the\n  <em>\n   most significant nibble\n  </em>\n  of the byte (0x4X).\n </p>\n <p>\n  Althogh it does not cover  all instructions this should should suffice for most of the daily x86 instructions you encounter.\n </p>\n <hr/>\n <h2>\n  Example\n </h2>\n <p>\n  Let's apply the method above to analyze the instruction:\n0x44 0F 45 C8\n </p>\n <p>\n  First of all prefixes, 0x44 isn't in the legacy set, but it is obvious from the most significant (left) nibble 4 digit that this is a REX prefix. (0100 0100 here). Which means we're done with prefixes, next is the opcode, 0x0F and a byte, done matching 2-byte opcode, and it's indeed\n  <code>\n   0F45\n  </code>\n  as you can\n  <a href=\"http://www.felixcloutier.com/x86/CMOVcc.html\" rel=\"nofollow noreferrer\">\n   verify\n  </a>\n  . The remaining trailing opcode data is ignored. Done.\n </p>\n <p>\n  The other type of operations is VEX / XOP which are used mainly for vector / floating point operations but their detection is more complex. You can learn more about them\n  <a href=\"https://en.m.wikipedia.org/wiki/VEX_prefix#Technical_description\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Elian Kamal",
            "time": "May 28, 2018 at 7:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "fred26",
                    "text": "<span class=\"comment-copy\">Thanks so much, this provides a good start on how to approach it.</span>",
                    "time": null
                },
                {
                    "user": "Elian Kamal",
                    "text": "<span class=\"comment-copy\">@fred26 Glad to be of assistance :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Elian posted a nice answer that explains the theory\n </p>\n <p>\n  here is an implementation using capstone and python\n </p>\n <pre><code>import sys\nimport capstone\n\nprint ( \"dissecting a stram of hex pairs to its components in x86\")\n\nif(len(sys.argv) < 2):\n    sys.exit(\"usage python %s quoted_hex_pairs like %s\" % ( sys.argv[0] ,\n    \"\\\"F0 0D 15 F0 0D BA D0 12 50 0D\\\"\"))\n\nCODE = []\na = sys.argv[1].split(' ')\nfor i in range(0,len(a),1):\n    CODE.append( chr(int(a[i],16)))\nCODESTR = ''.join(CODE)\n\nmd = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_64)\nmd.detail = True\n\nfor i in md.disasm(CODESTR, 0x1000):\n    print \"TLDR:\"\n    for j in range( 0,len(i.opcode),1):\n        if(i.opcode[j] !=0):\n            print \"%02x\" % i.opcode[j],\n    print \"\n\"            \n    print ( \"FULL DETAILS\"              )\n    print ( \"i.address\",    i.address   );    print ( \"i.mnemonic\",   i.mnemonic    ) \n    print ( \"i.op_str\" ,    i.op_str    );    print (   \"i.id\" ,        i.id        ) \n    print ( \"i.size\" ,      i.size      );    print (   \"i.bytes\" ,     i.bytes     ) \n    print ( \"i.prefix\" ,    i.prefix    );    print (   \"i.opcode\" ,    i.opcode    )\n    print ( \"i.rex\" ,       i.rex       );    print (   \"i.addr_size\" , i.addr_size ) \n    print ( \"i.modrm\" ,     i.modrm     );    print (   \"i.sib\" ,       i.sib       ) \n    print ( \"i.disp\" ,      i.disp      );    print (   \"i.sib_index\" , i.sib_index ) \n    print ( \"i.sib_scale\" , i.sib_scale );    print (   \"i.sib_base\" ,  i.sib_base  )\n    print ( \"i.sse_cc\" ,    i.sse_cc    );    print (   \"i.avx_cc\" ,    i.avx_cc    ) \n    print ( \"i.avx_sae\" ,   i.avx_sae   );    print (   \"i.avx_rm\" ,    i.avx_rm    ) \n</code></pre>\n <p>\n  output\n </p>\n <pre><code>python capstest.py \"44 0f 45 c8\"\ndissecting a stram of hex pairs to its components in x86\nTLDR:\n0f 45\n\nFULL DETAILS\n('i.address', 4096L)\n('i.mnemonic', u'cmovne')\n('i.op_str', u'r9d, eax')\n('i.id', 83L)\n('i.size', 4)\n('i.bytes', bytearray(b'D\\x0fE\\xc8'))\n('i.prefix', [0, 0, 0, 0])\n('i.opcode', [15, 69, 0, 0])\n('i.rex', 68)\n('i.addr_size', 8)\n('i.modrm', 200)\n('i.sib', 0)\n('i.disp', 0)\n('i.sib_index', 0L)\n('i.sib_scale', 0)\n('i.sib_base', 0L)\n('i.sse_cc', 0L)\n('i.avx_cc', 0L)\n('i.avx_sae', False)\n('i.avx_rm', 0L)\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "May 29, 2018 at 22:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "fred26",
                    "text": "<span class=\"comment-copy\">Thanks, I see how capstone can parse it as well.</span>",
                    "time": null
                }
            ]
        }
    ]
}