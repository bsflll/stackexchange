{
    "title": "Find vtable without complete object locator",
    "link": "https://reverseengineering.stackexchange.com/questions/19825/find-vtable-without-complete-object-locator",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am learning to reverse Visual C++ objects.\n </p>\n <p>\n  I usually find the vtable (or VMT of VFT, however you call it) of the object using a cross reference to its\n  <code>\n   CompleteObjectLocator\n  </code>\n  that I found in the disassembled binary before (using a cross reference to the object's\n  <code>\n   TypeDescriptor\n  </code>\n  or\n  <code>\n   ClassHierarchyDescriptor\n  </code>\n  ). The pointer to\n  <code>\n   CompleteObjectLocator\n  </code>\n  is the -1st field of the vtable.\n </p>\n <p>\n  However, as some classes are probably abstract in my program, they do not have\n  <code>\n   CompleteObjectLocator\n  </code>\n  s.\n  <strong>\n   How do I find their vtables?\n  </strong>\n </p>\n <p>\n  I know that the program writes the pointer to the vtable down to\n  <code>\n   this\n  </code>\n  in the object's constructor, however in my program the constructors are inlined in the child class constructors and there I do not see work with memory that could be the vtable of the parent.\n </p>\n <p>\n  For example:\n </p>\n <ul>\n  <li>\n   <code>\n    ClassA\n   </code>\n   inherits from\n   <code>\n    ClassB\n   </code>\n   (probably abstract) that inherits from\n   <code>\n    ClassC\n   </code>\n   that inherits from\n   <code>\n    ClassD\n   </code>\n   (probably abstract). I found this information in the\n   <code>\n    BaseClassArray\n   </code>\n   of each of the classes.\n  </li>\n  <li>\n   I am able to find vtable of\n   <code>\n    ClassA\n   </code>\n   and using a cross reference on it, I find its constructor\n  </li>\n  <li>\n   In the constructor of\n   <code>\n    ClassA\n   </code>\n   I see the program work with vtable of\n   <code>\n    ClassC\n   </code>\n   and vtable of\n   <code>\n    ClassA\n   </code>\n   (constructors are inlined, pointer to vtable of\n   <code>\n    ClassC\n   </code>\n   is written to a location and three instructions later it is rewritten by the pointer to vtable of\n   <code>\n    ClassA\n   </code>\n   )\n  </li>\n  <li>\n   I would expect to see some work with vtables of\n   <code>\n    ClassB\n   </code>\n   and\n   <code>\n    ClassD\n   </code>\n   in the constructor of\n   <code>\n    ClassA\n   </code>\n   as well. I would expect the pointer to vtable of\n   <code>\n    ClassB\n   </code>\n   to be written do the memory somewhere between the work with vtables of\n   <code>\n    ClassA\n   </code>\n   and\n   <code>\n    ClassC\n   </code>\n   , but there are only instructions that basically do nothing, only move some content from register to register.\n  </li>\n  <li>\n   Or, if the constructor of\n   <code>\n    ClassA\n   </code>\n   wouldn't work with vtables of\n   <code>\n    ClassB\n   </code>\n   and\n   <code>\n    ClassD\n   </code>\n   , I would expect at least calling their constructors from there, which does not happen as well.\n  </li>\n </ul>\n <p>\n  I know I could find a vtable dynamically, because it would be the first element of\n  <code>\n   this\n  </code>\n  , but I do not know where (if anywhere)\n  <code>\n   this\n  </code>\n  of\n  <code>\n   ClassB\n  </code>\n  and\n  <code>\n   ClassD\n  </code>\n  is used. Can I find their vtables and constructors statically?\n </p>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 0,
    "views": "578",
    "tags": [
        "c++",
        "vtables",
        "virtual-functions"
    ],
    "user": "Topper Harley",
    "time": "Nov 5, 2018 at 14:51",
    "comments": [
        {
            "user": "Ian Cook",
            "text": "<html><body><span class=\"comment-copy\">\n Don't forget that vtables might not exist for all classes as MSVC can be told not to produce a vtable by declaring a class with __declspec(notable)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<html><body><span class=\"comment-copy\">\n __declspec(novtable) that is\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Topper Harley",
            "text": "<html><body><span class=\"comment-copy\">\n @IanCook I see, thank you very much for the comment. Is it possible that this is not the case and the vtables exist somewhere even though I do not see them used in the constructors of the derived classes?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<html><body><span class=\"comment-copy\">\n Add some C++ code for example to understand clearly.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}