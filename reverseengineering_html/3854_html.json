{
    "title": "Directed call inside recv",
    "link": "https://reverseengineering.stackexchange.com/questions/3854/directed-call-inside-recv",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In tracing how the recv function works on Windows, I observe the following trace:\n </p>\n <pre><code>...\n0x743817d2  push eax                      C:\\windows\\system32\\WSOCK32.dll recv                     \n0x743817d3  push dword ptr [ebp+0x8]      C:\\windows\\system32\\WSOCK32.dll recv                     \n0x743817d6  call 0x7438193e               C:\\windows\\system32\\WSOCK32.dll recv                     \n0x7438193e  jmp dword ptr [0x74381000]    C:\\windows\\system32\\WSOCK32.dll setsockopt               \n0x77287089  mov edi, edi                  C:\\windows\\syswow64\\WS2_32.dll  WSARecv                  \n0x7728708b  push ebp                      C:\\windows\\syswow64\\WS2_32.dll  WSARecv                  \n0x7728708c  mov ebp, esp                  C:\\windows\\syswow64\\WS2_32.dll  WSARecv  \n...\n</code></pre>\n <p>\n  Unfortunately, once again I found it quite strange. First, there is a direct call:\n </p>\n <pre><code>call 0x7438193e\n</code></pre>\n <p>\n  inside\n  <code>\n   recv\n  </code>\n  . I still do not understand why that works: since the\n  <code>\n   WSOCK32.dll\n  </code>\n  (containing\n  <code>\n   recv\n  </code>\n  ) will be loaded \"arbitrarily\" in the user-space, how does\n  <code>\n   recv\n  </code>\n  guarantee that the\n  <code>\n   setsockopt\n  </code>\n  locates at this address?.\n </p>\n <p>\n  Second, I see nowhere in the application (here it is wget) can modify the memory at\n  <code>\n   0x74381000\n  </code>\n  (that is the target of\n  <code>\n   jmp\n  </code>\n  inside\n  <code>\n   setsockopt\n  </code>\n  ), so normally the value at this address is always\n  <code>\n   0x77287089\n  </code>\n  and that means\n  <em>\n   <code>\n    recv\n   </code>\n   calls always\n   <code>\n    WSARecv\n   </code>\n  </em>\n  (!!!). I doubt that is not true because there is no official document (i.e. MSDN) saying that.\n </p>\n <p>\n  Many thanks for any consideration.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "314",
    "tags": [
        "binary-analysis",
        "debugging"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Mar 14, 2014 at 21:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   how does recv know that the setsockopt locates at this address?\n  </p>\n </blockquote>\n <p>\n  The relative virtual address of the function\n  <code>\n   setsockopt\n  </code>\n  is in\n  <code>\n   WSOCK32.dll\n  </code>\n  's Export Table, so your disassembler/debugger was smart enough to match the virtual address\n  <code>\n   0x74381000\n  </code>\n  to the relative virtual address of\n  <code>\n   setsockopt\n  </code>\n  .\n </p>\n <blockquote>\n  <p>\n   \"recv calls always WSARecv\"\n  </p>\n </blockquote>\n <p>\n  That's correct; in Winsock,\n  <code>\n   recv\n  </code>\n  is a wrapper around\n  <code>\n   WSARecv\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Mar 12, 2014 at 2:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks a lot Jason. For the virtual address of setsockopt, is it always located at 0x74381000 even when the ALSR is enabled?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No, it's not.​​</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks again Jason, but this is actually what I found strange: because the address 0x7438193e is hard-coded inside recv, so does that mean recv will not work when ALSR is enabled?.</span>",
                    "time": null
                },
                {
                    "user": "jbh",
                    "text": "<span class=\"comment-copy\">When PE files are compiled, they are compiled using a preferred base address. Within the PE file is a relocation table which has all the calls that have used this preferred base address. When the binary is loaded, the loader compares the preferred base address to the actual base address and applies a delta to all the addresses in the relocation table.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks a lot jbh. As far as I understand, the relocation table is used in linking and not loading, so when I \"see\" an absolute address in the target of JMP, that means no loader can modify it.</span>",
                    "time": null
                }
            ]
        }
    ]
}