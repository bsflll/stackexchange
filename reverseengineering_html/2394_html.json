{
    "title": "How can I change the Read/Write/Execute flags on a segment in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/2394/how-can-i-change-the-read-write-execute-flags-on-a-segment-in-ida",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Sometimes when you load a binary manually in IDA you wind up with segments that have unknown read write and execute flags. You can see them under the Segments subview (\n  <kbd>\n   Shift\n  </kbd>\n  +\n  <kbd>\n   F7\n  </kbd>\n  ). Is there a way to change these flags from within the GUI of IDA without running a script and modifying them?\n </p>\n <p>\n  It seems like such a basic piece of functionality which is very important for the proper operation of the Hex Rays decompiler. I've been using the class to express segment rights which just seems wrong considering these flags exist.\n </p>\n <p>\n  Although I would appreciate the question being answered in the general case, in this particular case I'm dealing with flat binary ARM files with code and data intermixed. All page level permissions are set up by the software when it loads by directly mapping them via the MMU.\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 4,
    "views": "8k",
    "tags": [
        "ida",
        "segmentation"
    ],
    "user": "Peter Andersson",
    "time": "Jul 2, 2013 at 17:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know of anything natively built into the GUI that allows you to change the segment permissions, but you can easily change the segment permissions with IDC.\n </p>\n <p>\n  From IDA's help file:\n </p>\n <pre><code>SetSegmentAttr  \n\n***********************************************\n** set segment attribute\n        arguments:      segea - any address within segment\n                        attr  - one of SEGATTR_... constants\n                        value - the new value of the attribute\n\nsuccess SetSegmentAttr(long segea, long attr, long value);\nSEGATTR_ALIGN          alignment\nSEGATTR_COMB           combination\nSEGATTR_PERM           permissions\nSEGATTR_FLAGS          segment flags\nSEGATTR_SEL            segment selector\nSEGATTR_ES             default ES value\nSEGATTR_CS             default CS value\nSEGATTR_SS             default SS value\nSEGATTR_DS             default DS value\nSEGATTR_FS             default FS value\nSEGATTR_GS             default GS value\nSEGATTR_TYPE           segment type\nSEGATTR_COLOR          segment color\n</code></pre>\n <p>\n  From segment.hpp:\n </p>\n <pre><code>/* 22 */  uchar perm;           // Segment permissions (0-no information)\n#define SEGPERM_EXEC  1 // Execute\n#define SEGPERM_WRITE 2 // Write\n#define SEGPERM_READ  4 // Read\n</code></pre>\n <p>\n  As such, if you wanted to set the permissions of a segment that begins at VA 0x00400000 to both Read and Execute, you could just run the following IDC command:\n </p>\n <p>\n  <code>\n   SetSegmentAttr(0x00400000, SEGATTR_PERM, 4 | 1);\n  </code>\n </p>\n <p>\n  Alternatively, if you're\n  <em>\n   just\n  </em>\n  looking to deal with warnings from Hex-Rays, it\n  <em>\n   may\n  </em>\n  suffice to use the Segments view in the GUI to change a segment's class from\n  <code>\n   CODE\n  </code>\n  to\n  <code>\n   DATA\n  </code>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Jason Geffner",
            "time": "Jul 2, 2013 at 15:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Cream Cracker",
                    "text": "<span class=\"comment-copy\">Very ellegant solution.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">Thanks, I'm aware of the scripting solutions as well as writing your own importer. Regarding your second solution (which is what I'm currently using), this isn't warning related. It has to do with data and code being intermixed. Hex Rays has issues with constant pools that are embedded in certain segment types which has significant negative impact on the decompilation when dealing with low level software. I'm leaning towards there being nothing built into IDA and the scripting solution mapped to a hotkey being the easiest.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Time to write a Plugin =D I vaguely recall contacted Ilfak with this on a support matter while RCE-ing a Symbian Application. I recall that I had to remove the segments and rebuild them.</span>",
                    "time": null
                },
                {
                    "user": "tmr232",
                    "text": "<span class=\"comment-copy\">Another solution would be to directly change the <code>.perm</code> member of a <code>segment_t</code> structure representing the segment.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  These so called flags are imported from binary. Let's take\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/gg463119.aspx\" rel=\"noreferrer\">\n   Microsoft's PE/COFF\n  </a>\n  format binary for example. This is basic layout of PE:\n </p>\n <p>\n  <img alt=\"PE/COFF Layout\" src=\"https://i.sstatic.net/1XAik.png\"/>\n </p>\n <p>\n  Each segment that you see in IDA is a loaded in accordance to\n  <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms680341%28v=vs.85%29.aspx\" rel=\"noreferrer\">\n   IMAGE_SECTION_HEADER\n  </a>\n  structure of the particular section/segment. The structure has the following format:\n </p>\n <pre><code>typedef struct _IMAGE_SECTION_HEADER {\n  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];\n  union {\n    DWORD PhysicalAddress;\n    DWORD VirtualSize;\n  } Misc;\n  DWORD VirtualAddress;\n  DWORD SizeOfRawData;\n  DWORD PointerToRawData;\n  DWORD PointerToRelocations;\n  DWORD PointerToLinenumbers;\n  WORD  NumberOfRelocations;\n  WORD  NumberOfLinenumbers;\n  DWORD Characteristics;\n} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;\n</code></pre>\n <p>\n  <strong>\n   <code>\n    DDWORD Characteristics\n   </code>\n  </strong>\n  member of the structure holds flags that indicate permission levels for the section/segment. There are lots different flags available, but to name few:\n  <strong>\n   <code>\n    IMAGE_SCN_MEM_READ\n   </code>\n  </strong>\n  ,\n  <strong>\n   <code>\n    IMAGE_SCN_MEM_WRITE\n   </code>\n  </strong>\n  , and\n  <strong>\n   <code>\n    IMAGE_SCN_MEM_EXECUTE\n   </code>\n  </strong>\n  .\n </p>\n <p>\n  As IDA loads executable, all work thereafter is done within the database. No changes are made to executable by IDA. I believe you will have to patch your executable in order to change read/write/execute permissions on a segment permanently. Unless, there is a script or plug-in to do it.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "PSS",
            "time": "Jul 2, 2013 at 15:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">In this case the binary isn't using a standard format. It's imported from a flat binary file. The file is ARM code and some data from start to finish. It's a low level loader which maps its own segment directly by changing the MMU mappings and permissions.</span>",
                    "time": null
                },
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">@PeterAndersson \"...a low level loader which maps its own segment directly by changing the MMU mappings and permissions.\" Could you possible patch the binary to modify necessary permissions during mapping process?</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">it's more of an issue with how the Hex Rays decompiler treats various segment types and flags in this particular case but the question really is more general.  When you first import the binary the RWX flags are in an unknown state, as you reverse engineer it you discover their true attributes when the segment is mapped by the MMU. As a matter of fact I don't think there's even a way of importing a binary flat file as a segment and setting the flags.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can do it using Sark (\n  <a href=\"https://github.com/tmr232/Sark\" rel=\"nofollow\">\n   code\n  </a>\n  ,\n  <a href=\"http://sark.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">\n   docs\n  </a>\n  ):\n </p>\n <pre><code>import sark\n\n# Get the segment\nsegment = sark.Segment(ea=0x00400000)\n\n# Set the permissions\nsegment.permissions.write = True\n</code></pre>\n <p>\n  <em>\n   Disclaimer: I am the author of Sark.\n  </em>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "tmr232",
            "time": "Jul 1, 2015 at 16:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Adding to previous responses, you can copy attributes from another segment via a python script:\n </p>\n <pre><code>       try:\n            attributes = [\n                SEGATTR_ALIGN,\n                SEGATTR_PERM,\n                SEGATTR_BITNESS,\n                SEGATTR_FLAGS,\n                SEGATTR_SEL,\n                SEGATTR_TYPE\n            ]\n\n            from_seg_ea = list(Segments())[SegByName(attrs_from)]\n            if from_seg_ea == BADADDR:\n                print \"Error in copying attributes\"\n\n            for attr in attributes:\n                SetSegmentAttr(startea,\n                               attr,\n                               GetSegmentAttr(from_seg_ea, attr))\n        except Exception as e:\n            print e\n            SegDelete(startea, 1)\n</code></pre>\n <p>\n  @startea is the start address of your segment,\n@attrs_from is a string representing the segment you want to copy attributes from (e.g., \".text\")\n </p>\n</div>\n</body></html>",
            "votes": "0",
            "user": "nettrino",
            "time": "Jun 29, 2015 at 14:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}