{
    "title": "Viewing 32-bit floats in Internal Call disassembly from .NET 2.0 DLL in x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/15732/viewing-32-bit-floats-in-internal-call-disassembly-from-net-2-0-dll-in-x64dbg",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm new to using x32/64dbg and I have an EXE with PDB symbols and want to disassemble and debug an unmanaged function call. It's from an x86 .NET 2.0 DLL where the unmanaged code sits compiled inside the EXE.\n </p>\n <p>\n  I have looked up the internal call that I want to debug in the symbols, and set up breakpoints on the entry and exit of the function.\n </p>\n <p>\n  The function takes a set of 3 32-bit floats in the .NET DLL method call as inputs through an internal call that runs some calculations and then outputs a set of 4 32-bit floats back to .NET.\n </p>\n <p>\n  The function basically does a few sin/cos/atan2 calls on the parameters, along with some other math that I want to review for accuracy. Is there a way to read the parameter values as floats? I couldn't seem to find this in the docs anywhere. Basically I just need to get the values of the inputs and outputs to the function.\n </p>\n <p>\n  In the lack of finding a method I tried to whip up a quick app to input 4 bytes as hex and output the sign/exponent/significand based on some docs here (\n  <a href=\"https://msdn.microsoft.com/en-us/library/system.single(v=vs.110).aspx\" rel=\"nofollow noreferrer\">\n   https://msdn.microsoft.com/en-us/library/system.single(v=vs.110).aspx\n  </a>\n  ) but my results aren't matching up with the app's input, I'm sure I'm not doing something right.\n </p>\n <p>\n  Disassembly of the function looks like so:\n </p>\n <pre><code>push ebp\nmov ebp,esp\nmov eax,dword ptr ss:[ebp+8]\nsub esp,10\npush 4\npush eax\nlea ecx,dword ptr ss:[ebp-10]\npush ecx\ncall <testapp.ConversionFunction>\nmovq xmm0,qword ptr ds:[eax]\nmov ecx,dword ptr ss:[ebp+C]\nmovq dword ptr ds:[ecx],xmm0\nmovq xmm0,qword ptr ds:[eax+8]\nadd esp,C\nmovq qword ptr ds:[ecx+8],xmm0\nmov esp,ebp\npop ebp\nret\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "179",
    "tags": [
        "disassembly",
        "float"
    ],
    "user": "John Ernest",
    "time": "Jul 1, 2017 at 6:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  After a little digging I got it. Right click your Dump to change data types between address and float. You have to follow the address of the address pointed to by esp-4 to get the parameters.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "John Ernest",
            "time": "Jul 1, 2017 at 21:56",
            "is_accepted": true,
            "comments": []
        }
    ]
}