{
    "title": "What does the `TEST` instruction do",
    "link": "https://reverseengineering.stackexchange.com/questions/15184/what-does-the-test-instruction-do",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm having trouble understanding the TEST instruction and its use. I'm looking at the following code at the end of a loop\n </p>\n <pre><code>0040A3D1   A9 00010181           TEST EAX,81010100\n0040A3D6   74 E8                 JE SHORT JinKu_ke.0040A3C0\n</code></pre>\n <p>\n  I understand how it works TEST AL,AL or TEXT EAX,EAX,but I do not know how it works with numbers Because the JE instruction does not jump when I use 0x810100FE and also even when we use 0x81010102, but when I use 0x60E0FEFC and below JE instruction jump.\n </p>\n</div>\n</body></html>",
    "votes": "14",
    "answers": 1,
    "views": "60k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Marek",
    "time": "Apr 18, 2017 at 21:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <h2>\n  1. TEST\n </h2>\n <p>\n  According to the\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_315.html\" rel=\"nofollow noreferrer\">\n   x86 Instruction Set Reference entry for TEST\n  </a>\n  found at\n  <a href=\"http://x86.renejeschke.de/\" rel=\"nofollow noreferrer\">\n   http://x86.renejeschke.de/\n  </a>\n  ,\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/uHR2k.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"TEST\" src=\"https://i.sstatic.net/uHR2k.png\"/>\n  </a>\n </p>\n <blockquote>\n  <p>\n   [TEST] computes the bit-wise logical AND of first operand (source 1 operand) and the second operand (source 2 operand) and sets the SF, ZF, and PF status flags according to the result. The result is then discarded.\n  </p>\n </blockquote>\n <p>\n  More succinctly:\n </p>\n <blockquote>\n  <p>\n   AND imm32 with EAX; set SF, ZF, PF according to result.\n  </p>\n </blockquote>\n <p>\n  Even more succinctly:\n </p>\n <blockquote>\n  <p>\n   the AND instruction without storing the result\n  </p>\n </blockquote>\n <p>\n  So for\n </p>\n <blockquote>\n  <p>\n   <code>\n    0040A3D1   A9 00010181           TEST EAX,81010100\n   </code>\n  </p>\n </blockquote>\n <p>\n  the value in\n  <code>\n   EAX\n  </code>\n  and\n  <code>\n   81010100\n  </code>\n  are ANDed together.\n </p>\n <p>\n  If the value in\n  <code>\n   EAX\n  </code>\n  is\n  <code>\n   0x810100FE\n  </code>\n  , the operation looks like this:\n </p>\n <pre><code>EAX:                    10000001000000010000000011111110\n0x81010100:         AND 10000001000000010000000100000000\n                    ------------------------------------\n0x81010000:             10000001000000010000000000000000\n</code></pre>\n <p>\n  The result,\n  <code>\n   81010000\n  </code>\n  , is not 0, so the zero flag is not set.\n </p>\n <p>\n  If the value in\n  <code>\n   EAX\n  </code>\n  is\n  <code>\n   0x60E0FEFC\n  </code>\n  the operation looks like this:\n </p>\n <pre><code>EAX:                    01100000111000001111111011111100\n0x81010100:         AND 10000001000000010000000100000000\n                    ------------------------------------\n                        00000000000000000000000000000000\n</code></pre>\n <p>\n  Here the result is 0, so the zero flag (ZF) is set to 1.\n </p>\n <h2>\n  2. JE\n </h2>\n <p>\n  According to the\n  <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_146.html\" rel=\"nofollow noreferrer\">\n   x86 Instruction Set Reference entry for JE\n  </a>\n  found at\n  <a href=\"http://x86.renejeschke.de/\" rel=\"nofollow noreferrer\">\n   http://x86.renejeschke.de/\n  </a>\n  ,\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/ZG53X.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"JE\" src=\"https://i.sstatic.net/ZG53X.png\"/>\n  </a>\n </p>\n <blockquote>\n  <p>\n   [JCC] checks the state of one or more of the status flags in the EFLAGS register (CF, OF, PF, SF, and ZF) and, if the flags are in the specified state (condition), performs a jump to the target instruction specified by the destination operand. A condition code (cc) is associated with each instruction to indicate the condition being tested for. If the condition is not satisfied, the jump is not performed and execution continues with the instruction following the Jcc instruction.\n  </p>\n </blockquote>\n <p>\n  In the case of 'JE' specifically,\n </p>\n <blockquote>\n  <p>\n   Jump short if equal (ZF=1).\n  </p>\n </blockquote>\n <p>\n  For the operation\n </p>\n <blockquote>\n  <p>\n   <code>\n    0040A3D1   A9 00010181           TEST EAX,81010100\n   </code>\n  </p>\n </blockquote>\n <ul>\n  <li>\n   <p>\n    if the value in\n    <code>\n     EAX\n    </code>\n    is\n    <code>\n     0x81010102\n    </code>\n    , the zero flag (ZF) does not get set (see above), so flow of control does not branch here.\n   </p>\n  </li>\n  <li>\n   <p>\n    if the value in\n    <code>\n     EAX\n    </code>\n    is\n    <code>\n     0x60E0FEFC\n    </code>\n    , the zero flag (ZF) is set to 1 (see above). As a result, flow of control branches at this point.\n   </p>\n  </li>\n </ul>\n <h2>\n  Summary\n </h2>\n <ul>\n  <li>\n   <code>\n    TEST\n   </code>\n   is like\n   <code>\n    AND\n   </code>\n   , but the results of the operation are not saved. Only the PF, SF and ZF flags are set.\n  </li>\n  <li>\n   the zero flag (ZF) is set to 1 if the results of an arithmetic or logical operation (like\n   <code>\n    TEST\n   </code>\n   ) are 0.\n  </li>\n  <li>\n   <code>\n    JE\n   </code>\n   causes\n   <code>\n    EIP\n   </code>\n   to be updated if ZF = 1.\n  </li>\n  <li>\n   if the value in\n   <code>\n    EAX\n   </code>\n   is\n   <code>\n    0x81010102\n   </code>\n   , the zero flag (ZF) does not get set, so flow of control does not branch here.\n  </li>\n  <li>\n   if the value in\n   <code>\n    EAX\n   </code>\n   is\n   <code>\n    0x60E0FEFC\n   </code>\n   , the zero flag (ZF) is set to 1. As a result, flow of control branches at this point.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "22",
            "user": "julian",
            "time": "Aug 16, 2024 at 16:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user47208",
                    "text": "<span class=\"comment-copy\">EIP?? Now there's one register that I have never heard of. Nor is it anything that can \"jump\", as far as I know.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@user47208 Thanks for the comment, I've edited the post. EIP does not jump, as you've pointed out. For more on EIP and JMP, feel free to take a look at <a href=\"https://www.felixcloutier.com/x86/jmp\" rel=\"nofollow noreferrer\">felixcloutier.com/x86/jmp</a>, or use your search engine of choice.</span>",
                    "time": null
                }
            ]
        }
    ]
}