{
    "title": "How to get IDA and Hex-Rays to forcibly sync their knowledge of the sample on-demand?",
    "link": "https://reverseengineering.stackexchange.com/questions/29838/how-to-get-ida-and-hex-rays-to-forcibly-sync-their-knowledge-of-the-sample-on-de",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>; PCWSTR __stdcall RtlGetNtSystemRoot()\n                public RtlGetNtSystemRoot\nRtlGetNtSystemRoot proc near            ; CODE XREF: LdrpBuildSystem32FileName+1A↑p\n                                        ; _IsOverlaySupportedPath+2B↓p ...\n\n; FUNCTION CHUNK AT .text:00000001800B5A2A SIZE 00000019 BYTES\n\n                sub     rsp, 28h\n                call    RtlGetCurrentServiceSessionId\n                test    eax, eax\n                jnz     ReadFromPEB\n                mov     eax, offset UserSharedData.NtSystemRoot ; was 7FFE0030h instead of the offset\n\nloc_18003C806:                          ; CODE XREF: RtlGetNtSystemRoot+7924E↓j\n                add     rsp, 28h\n                retn\n; ---------------------------------------------------------------------------\n                db 0CCh\nRtlGetNtSystemRoot endp\n</code></pre>\n <p>\n  (NB:\n  <code>\n   ReadFromPEB\n  </code>\n  is uninteresting for this discussion.)\n </p>\n <p>\n  When I originally decompiled this code, it looked somewhat like this (even without the cast on the second\n  <code>\n   return\n  </code>\n  ):\n </p>\n <pre><code>PCWSTR __stdcall RtlGetNtSystemRoot()\n{\n  if ( RtlGetCurrentServiceSessionId() )\n    return (NtCurrentPeb()->SharedData + 0x30);\n  else\n    return 0x7ffe0030i64;\n}\n</code></pre>\n <p>\n  The color of the second\n  <code>\n   return\n  </code>\n  value suggested something was wrong, so I went ahead and made the address known to IDA.\n </p>\n <p>\n  Now,\n  <code>\n   UserSharedData\n  </code>\n  is a struct (based on the imported standard struct\n  <code>\n   _KUSER_SHARED_DATA\n  </code>\n  ) which resides in its own segment which I declared at 0x7FFE0000. I declared the segment with the current size of the struct (0x720) to fit it snugly.\n </p>\n <p>\n  It looks like this:\n </p>\n <pre><code>_user_shared_data segment para public '' use64\n                assume cs:_user_shared_data\n                ;org 7FFE0000h\n                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing\nUserSharedData  _KUSER_SHARED_DATA <?>  ; DATA XREF: LdrpGenSecurityCookie+4A↓r\n                                        ; LdrpGenSecurityCookie+53↓r ...\n_user_shared_data ends\n</code></pre>\n <p>\n  After that I changed the original disassembly line:\n </p>\n <pre><code>mov     eax, 7FFE0030h\n</code></pre>\n <p>\n  to:\n </p>\n <pre><code>mov     eax, offset UserSharedData.NtSystemRoot\n</code></pre>\n <p>\n  Alas, when I closed all the \"Pseudocode\" windows and then hit\n  <kbd>\n   F5\n  </kbd>\n  again, the output remained the same. Thinking I'd be able to adjust it through the Edit menu I found all relevant menu items disabled there.\n </p>\n <p>\n  However, then I went ahead typing up my question here (which in the end had to be changed completely once again) just to go back to IDA and see that the Peudocode view had finally caught up to my change of the segment and the disassembly:\n </p>\n <pre><code>PCWSTR __stdcall RtlGetNtSystemRoot()\n{\n  if ( RtlGetCurrentServiceSessionId() )\n    return (NtCurrentPeb()->SharedData + 30);\n  else\n    return UserSharedData.NtSystemRoot;\n}\n</code></pre>\n <p>\n  I've had this lag before and found it somewhat annoying. I assume it's perhaps an expensive operation that runs in the background every now and then.\n </p>\n <p>\n  <strong>\n   Question:\n  </strong>\n  But can I perhaps also\n  <strong>\n   force IDA to sync\n  </strong>\n  the knowledge the disassembler has with that of the decompiler so such changes take effect immediately in the pseudo-code?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "489",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "0xC0000022L",
    "time": "Oct 31, 2023 at 9:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A \"heavy-weight\" answer to this question would be that you can force the decompiler to flush all decompilation caches that it maintains via\n  <code>\n   Edit->Other->Reset decompiler information\n  </code>\n  , then selecting (only)\n  <code>\n   All caches\n  </code>\n  . This does what it sounds like, and forces Hex-Rays to re-decompile every function rather than relying upon cached results the next time around. Of course, this will increase the amount of time it takes for Hex-Rays to decompile any function the next time around, since it won't be able to use cached results.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jan 10, 2022 at 2:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}