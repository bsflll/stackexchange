{
    "title": "How to debug binary which doesn't have executable flags?",
    "link": "https://reverseengineering.stackexchange.com/questions/9582/how-to-debug-binary-which-doesnt-have-executable-flags",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to debug the binary which is not executable.\n </p>\n <p>\n  As sample I'm using\n  <code>\n   /bin/true\n  </code>\n  with 644 permission:\n </p>\n <pre><code>install -m 644 /bin/true .\n</code></pre>\n <p>\n  and I'm trying to run it as:\n </p>\n <pre><code>$ lldb true\n(lldb) target create \"true\"\nCurrent executable set to 'true' (x86_64).\n(lldb) process launch\n</code></pre>\n <p>\n  But I've got the following error:\n </p>\n <blockquote>\n  <p>\n   error: error: ::posix_spawnp ( pid => 29052, path = '/Foo/Bar/true', file_actions = 0x7fff5d015e98, attr = 0x7fff5d015ed8, argv = 0x7fd6396507f0, envp = 0x7fd6396512d0 ) err = Permission denied (0x0000000d)\n  </p>\n </blockquote>\n <p>\n  Is it something possible using lldb without giving the executable flag to the binary?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "359",
    "tags": [
        "linux",
        "lldb"
    ],
    "user": "kenorb",
    "time": "Aug 8, 2015 at 17:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  No.\n  <code>\n   lldb\n  </code>\n  wants to run the program using a combination of\n  <code>\n   fork\n  </code>\n  and\n  <code>\n   exec\n  </code>\n  , then control the progam with\n  <code>\n   ptrace\n  </code>\n  . But the kernel will refuse to\n  <code>\n   exec\n  </code>\n  the program unless it has the correct x bit (your user/group ids define which one is the correct one) set. You can set the x bit for yourself, the owner, only (if you want to prevent others from executing the binary); or you can set the x bit, start the process, and remove the x bit again (if you want to prevent yourself from running it accidentially). But to start a process that runs the binary, you need the x bit.\n </p>\n <p>\n  If you really really want to execute the binary's code without setting it executable, you could probably write a program to read its header,\n  <code>\n   mmap\n  </code>\n  the sections you need, read the binary into those sections, possibly fix up relocations, and jump to the entry point. But you'll have a long, arduous way in front of you to get this right, and it probably won't be possible to get\n  <code>\n   llvm\n  </code>\n  recognize any symbols in the binary. So while doing this might be a theoretical possibility, there's really no point in trying.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Aug 8, 2015 at 14:23",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As for workaround (per this\n  <a href=\"https://unix.stackexchange.com/q/83862/21471\">\n   post\n  </a>\n  ), on Linux the non-executable binary can be invoked by dynamic linker/loader as below:\n </p>\n <pre><code>lldb -- /lib64/ld-linux-x86-64.so.2 foo_binary\n</code></pre>\n <p>\n  and for 32-bit version use\n  <code>\n   ld-linux.so\n  </code>\n  found in\n  <code>\n   /lib\n  </code>\n  instead.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}