{
    "title": "How does Borland C++ 5 exception handling work?",
    "link": "https://reverseengineering.stackexchange.com/questions/29080/how-does-borland-c-5-exception-handling-work",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, I'm still working on reverse-engineering an 1996 game. I have cleared a lot of roadblocks, but one thing that continues to annoy me is exception handling and RTTI metadata.\n </p>\n <p>\n  There is a function\n  <code>\n   extern void _ExceptInit(void *);\n  </code>\n  that is declared from\n  <code>\n   BC5/SOURCE/RTL/SOURCE/THREADS/WIN32/THREAD.C\n  </code>\n  , but its implementation is nowhere to be found - all in the\n  <em>\n   entire\n  </em>\n  BC5 source that contains ExceptInit are a bunch of pre-compiled .OBJ files (\n  <code>\n   NOXX.OBJ\n  </code>\n  /\n  <code>\n   XXV.OBJ\n  </code>\n  ) that have no corresponding source attached. They are dis-assemblable in Ghidra and contain labels, I grant Borland that, but there are obviously no comments on how exactly that entire mechanism works.\n </p>\n <p>\n  Same goes for RTTI metadata that lives inside compiled binaries. The \"Borland Open Architecture Handbook\" aka\n  <code>\n   bc4boa.zip\n  </code>\n  doesn't contain information about either, too (probably because it's too old?), and the Borland books also don't go into detail on implementation.\n </p>\n <p>\n  Any idea where I could go on to search?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "232",
    "tags": [
        "c++",
        "exception"
    ],
    "user": "Skynet",
    "time": "Aug 1, 2021 at 18:21",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<html><body><span class=\"comment-copy\">\n You've got the\n <code>\n  .OBJ\n </code>\n files? Dig in! What are you waiting for?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Skynet",
            "text": "<html><body><span class=\"comment-copy\">\n The ASM files for the startup code contained a boatload of comments on how exactly the stuff works and what it does, I had hoped for a similar load of information on exceptions and RTTI since that ain't documented anywhere\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try to find Borland C++ Builder runtime sources, IIRC it included EH and RTTI details, albeit updated for Win32. Long time ago I made\n  <a href=\"https://www.openrce.org/downloads/details/86/Typeinfo_IDC_scripts_collection\" rel=\"nofollow noreferrer\">\n   scripts\n  </a>\n  for parsing and labeling those structures (see\n  <code>\n   bcc.idc\n  </code>\n  ); they probably wonâ€™t work as is for DOS code but could be useful for reference.\n </p>\n <p>\n  <strong>\n   EDIT\n  </strong>\n  : see\n  <code>\n   struct tpid\n  </code>\n  (RTTI) and\n  <code>\n   struct ERRbc\n  </code>\n  (EH) in\n  <a href=\"https://github.com/earthsiege2/borland-cpp-ide/blob/master/SOURCE/RTL/RTLINC/XX.H\" rel=\"nofollow noreferrer\">\n   XX.H\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 7, 2022 at 19:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}