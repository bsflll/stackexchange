{
    "title": "Can a Data Type Span Multiple Virtual Pages? (Windows)",
    "link": "https://reverseengineering.stackexchange.com/questions/16804/can-a-data-type-span-multiple-virtual-pages-windows",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Can a multi-byte primitive data type (ie int, double, float, etc) span multiple virtual pages on Windows?\n </p>\n <p>\n  ex) The first 4-bytes of a double on a virtual page, and the next 4-bytes of a double on the next virtual page. Is this possible*?\n </p>\n <p>\n  What about structs? Arrays?\n </p>\n <hr/>\n <p>\n  *I presume it is technically possible to just cast the address of the last 4-bytes of arbitrary memory in a virtual page to a double pointer, as long as there is another virtual page that follows -- but I'm more curious if this can happen naturally in a compiled/interpreted program.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "113",
    "tags": [
        "windows",
        "compilers",
        "virtual-memory"
    ],
    "user": "Zachary Canann",
    "time": "Nov 21, 2017 at 0:44",
    "comments": [
        {
            "user": "yaspr",
            "text": "<html><body><span class=\"comment-copy\">\n The remarks section:\n <a href=\"https://msdn.microsoft.com/fr-fr/library/windows/desktop/ff544501(v=vs.85).aspx\" rel=\"nofollow noreferrer\">\n  msdn.microsoft.com/fr-fr/library/windows/desktop/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n It's not hard to imagine a single struct spanning more than a single memory page, and even more so for arrays. So I'd say the answer is \"well yes why not\".\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't see why not.\n </p>\n <p>\n  For instance, if I'm mapping a binary file into memory, I may configure its structure as such:\n </p>\n <pre><code>//Visual Studio code\n\n#pragma pack(push,1)\nstruct STRUCT1{\n    char dummy[0x1000 - 4];\n    double fDouble;\n};\n#pragma pack(pop)\n\nstruct STRUCT2{\n    STRUCT1 __declspec(align(0x1000)) s1;\n};\n\n\nint main()\n{\n    STRUCT2 s2 = {0};\n    s2.s1.fDouble = -123.124;\n\n    //This construct is just to give you the direct pointer\n    double* pD = (double*)((BYTE*)&s2 + offsetof(STRUCT2, s1.fDouble));\n    double fDVal = *pD;\n\n}\n</code></pre>\n <p>\n  Then if we break with a debugger on the last line and check the value of\n  <code>\n   pD\n  </code>\n  (that is in the\n  <code>\n   RAX\n  </code>\n  register in this screenshot):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/qEXr1.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/qEXr1.png\"/>\n  </a>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/xGX6J.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/xGX6J.png\"/>\n  </a>\n </p>\n <p>\n  You will see that the\n  <code>\n   double\n  </code>\n  variable is straddling the page boundary (marked in red):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/OF5zO.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/OF5zO.png\"/>\n  </a>\n </p>\n <p>\n  This is far from ideal from the efficiency standpoint (due to those SSE2 instructions not \"liking\" being unaligned) but it is quite possible.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "c00000fd",
            "time": "Apr 25, 2019 at 1:45",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  While it can happen as a result of hand-coded code, it is unlikely in practice to occur as a result of compiled code.  Compilers generally align data appropriately such that a 4-bytes value will begin on a 4-bytes-aligned address, 8-bytes at 8-bytes, etc, to avoid alignment exceptions.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Nov 24, 2017 at 23:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}