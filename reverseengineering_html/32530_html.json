{
    "title": "How to make a plugin python function available to IDA's console?",
    "link": "https://reverseengineering.stackexchange.com/questions/32530/how-to-make-a-plugin-python-function-available-to-idas-console",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to have utility functions shared between all databases, for example:\n </p>\n <pre class=\"lang-py prettyprint-override\"><code>from idautils import *\nfrom idaapi import *\nfrom idc import *\nfrom ida_name import *\n\ndef FindFunctionImpl(FunctionNameToFind):\n    for SegmentAddress in Segments():\n        for FunctionAddress in Functions(SegmentAddress, get_segm_end(SegmentAddress)):\n            FunctionName = get_func_name(FunctionAddress)\n            DemangledName = get_long_name(FunctionAddress)\n            if DemangledName.find(FunctionNameToFind) != -1:\n                print(f\"0x{FunctionAddress:x}:{DemangledName}\")\n\nclass ExamplePlugin(idaapi.plugin_t):\n    flags = idaapi.PLUGIN_DRAW\n    comment = \"\"\n    help = \"\"\n    wanted_name = \"Example\"\n\n    def init(self):\n        print(\"ExamplePlugin initialized\")\n        global FindFunction = FindFunctionImpl\n        return idaapi.PLUGIN_KEEP # On garde le plugin chargé en mémoire\n\n    def run(self, arg):\n        return\n\n    def term(self):\n        pass\n\ndef PLUGIN_ENTRY():\n    return ExamplePlugin()\n</code></pre>\n <p>\n  But it doesn't want to let me use neither\n  <code>\n   FindFunction\n  </code>\n  nor\n  <code>\n   FindFunctionImpl\n  </code>\n  from the console. Says \"name isn't defined\" in the console. It prints in the console that the plugin is initialized.\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "202",
    "tags": [
        "idapython",
        "ida-plugin"
    ],
    "user": "KulaGGin",
    "time": "Nov 28, 2023 at 14:55",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<html><body><span class=\"comment-copy\">\n Put your function definitions inside the idapythonrc.py file that IDAPython executes on startup. This is one of the installation methods of the minsc plugin that I maintain which is a library that provides something similar to what you're starting to do (\n <a href=\"https://arizvisa.github.io/ida-minsc/install.html#installation-of-ida-minsc\" rel=\"nofollow noreferrer\">\n  arizvisa.github.io/ida-minsc/…\n </a>\n ). The idapythonrc.py method for initiailzing the Python interpreter is also documented at the Hex-Rays blog (\n <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-33-idas-user-directory-idausr/\" rel=\"nofollow noreferrer\">\n  hex-rays.com/blog/…\n </a>\n ).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @AliRizvi-Santiago please add this as an answer\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <ol>\n  <li>\n   Separate out\n   <code>\n    FindFunctionImpl\n   </code>\n   into its own\n   <code>\n    .py\n   </code>\n   file, say\n   <code>\n    FuncUtil.py\n   </code>\n   .\n  </li>\n  <li>\n   Put the directory containing that file into your system's\n   <code>\n    $PYTHONPATH\n   </code>\n   .\n  </li>\n  <li>\n   Invoke it from the IDAPython console as\n   <code>\n    FuncUtil.FindFunctionImpl\n   </code>\n   .\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Nov 28, 2023 at 16:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can add a path to your plugin script in one of the\n  <code>\n   plugins.list\n  </code>\n  files, this will tell IDA to load the plugin everytime you open an IDB. You can run plugins from\n  <code>\n   Edit/Plugins\n  </code>\n  menu.\n </p>\n <p>\n  It's a shame HexRays haven't put up any docs on that to this day, but you can find a decent explanation in\n  <a href=\"https://sark.readthedocs.io/en/latest/plugins/installation.html\" rel=\"nofollow noreferrer\">\n   Sark's reference\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "mimak",
            "time": "Nov 28, 2023 at 15:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><code>plugins.list</code> is not used by IDA but seems to be a Sark feature.</span>",
                    "time": null
                }
            ]
        }
    ]
}