{
    "title": "​Why output is disabled in console when using int3?",
    "link": "https://reverseengineering.stackexchange.com/questions/30688/why-output-is-disabled-in-console-when-using-int3",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  ​I am using NASM(2.15) assembler to generate code. But I am unable to figure out why it does not show output in the console(windows system) when using\n  <code>\n   int3\n  </code>\n  - software breakpoint, it only shows output in the debugger console while debugging.\n </p>\n <p>\n  code:\n </p>\n <pre><code>global _main\nextern _printf\n\nsection .text\n_main:\n    int3             ; [*] Comment/Uncomment this to enable/disable output\n    push dword[esp+4]    \n    push fmt_d\n    call _printf\n    add esp, 8\n    xor eax, eax\n    ret\n\nsection .data\nfmt_d: db 'argc = %d', 10, 0\n</code></pre>\n <p>\n  However, when\n  <code>\n   int3\n  </code>\n  is disabled, we get output as usual in both the consoles(windows system, debugger console).\n </p>\n <p>\n  What is special about the\n  <code>\n   int3\n  </code>\n  command that inhibits the printf's output capability?\n </p>\n <p>\n  I assembled and linked both cases once\n  <code>\n   int3\n  </code>\n  enabled and then disabled into\n  <code>\n   pf_disable.exe\n  </code>\n  ,\n  <code>\n   pf_enable.exe\n  </code>\n  using NASM & MinGW 4.8.2-\n  <code>\n   gcc.exe\n  </code>\n  .\nThen I matched the assembly output(\n  <code>\n   .asm\n  </code>\n  ) generated by IDA for 2 cases, but there were only 3 differences,\n </p>\n <ul>\n  <li>\n   Hash of files(CRC,MD5) are different.\n  </li>\n  <li>\n   Different offset of\n   <code>\n    fmt_d\n   </code>\n   in the\n   <code>\n    .data section\n   </code>\n   , which is obvious as\n   <code>\n    int3\n   </code>\n   was introduced in one case and absent in another in\n   <code>\n    _main\n   </code>\n   function.\n  </li>\n </ul>\n <p>\n  <code>\n   .obj\n  </code>\n  files for both the cases are almost same except, one has\n  <code>\n   int3\n  </code>\n  while other hasn't in\n  <code>\n   _main\n  </code>\n  function.\n </p>\n <p>\n  With above differences, I understand it has to do something more than just\n  <code>\n   int3\n  </code>\n  but I am unable to figure out.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 0,
    "views": "71",
    "tags": [
        "assembly",
        "breakpoint",
        "exception",
        "nasm"
    ],
    "user": "Viktor",
    "time": "Jul 23, 2022 at 14:36",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Isn't\n <code>\n  int3\n </code>\n a breakpoint? If I understand this correctly it does not disable the output, it just suspends.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Viktor",
            "text": "<html><body><span class=\"comment-copy\">\n @ws Indeed it is breakpoint a software breakpoint. But if we can get output in debugger console then why not in default console.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Uhm, so you have a debugger attached and a proper debugger loop consuming those breakpoints? Otherwise the\n <code>\n  int 3\n </code>\n is merely going to end up ending your program, I reckon. Even if you placed the\n <code>\n  printf\n </code>\n before the\n <code>\n  int 3\n </code>\n , chances are that the output buffer doesn't get flushed before the breakpoint either.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}