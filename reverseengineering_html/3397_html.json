{
    "title": "Why does the Java compiler add an extra try-catch block?",
    "link": "https://reverseengineering.stackexchange.com/questions/3397/why-does-the-java-compiler-add-an-extra-try-catch-block",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Suppose we compile this method using Java 6+ compiler:\n </p>\n <pre><code>void test(int x) {\n    try {\n        x += 777;\n    } finally {\n        x -= 333;\n    }\n}\n</code></pre>\n <p>\n  The disassembled code would look like this:\n </p>\n <pre><code>test(I)V\n    TRYCATCHBLOCK L0 L1 L2 null\n    TRYCATCHBLOCK L2 L3 L2 null\n   L0              // Start of try block\n    IINC 1 777     // The body of try block\n   L1              // Start of finally block in case of successful execution \n    IINC 1 -333    // Body of finally block\n    GOTO L4        // End of 'success' finally block \n   L2              // Start of finally block in case of exception\n    ASTORE 2       // Remember exception\n   L3\n    IINC 1 -333    // Duplicated body of finally block\n    ALOAD 2        // Load remembered exception\n    ATHROW         // Rethrow the exception \n   L4              // End of try/finally  \n    RETURN\n   L5\n</code></pre>\n <p>\n  Obviously, this declaration specifies the \"try\" section and the beginning of the \"finally\" block:\n </p>\n <pre><code>    TRYCATCHBLOCK L0 L1 L2 null\n</code></pre>\n <p>\n  But the next declaration looks strange:\n </p>\n <pre><code>    TRYCATCHBLOCK L2 L3 L2 null\n</code></pre>\n <p>\n  Why does the Java compiler protect the exception while remembering it, and why does it specify itself as the handler recursively (i.e. the two\n  <code>\n   L2\n  </code>\n  s)?\n </p>\n</div>\n</body></html>",
    "votes": "12",
    "answers": 2,
    "views": "1k",
    "tags": [
        "java",
        "byte-code"
    ],
    "user": "ponomandr",
    "time": "Jan 8, 2014 at 7:54",
    "comments": [
        {
            "user": "Devolus",
            "text": "<html><body><span class=\"comment-copy\">\n Does the same happen if you use\n <code>\n  catch\n </code>\n instead of finally?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "ponomandr",
            "text": "<html><body><span class=\"comment-copy\">\n @Devolus No. It adds single\n <code>\n  TRYCATCHBLOCK L0 L1 L2 java/lang/Exception\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Daniel W. Steinbrook",
            "text": "<html><body><span class=\"comment-copy\">\n Same question on SO a few years ago:\n <a href=\"http://stackoverflow.com/questions/6386917/strange-exception-table-entry-produced-by-suns-javac\" title=\"strange exception table entry produced by suns javac\">\n  stackoverflow.com/questions/6386917/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "<html><body><span class=\"comment-copy\">\n I agree with Devolus.  I've never actually seen try{}finally{} in production code.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "<html><body><span class=\"comment-copy\">\n Daniel, not the same question.  The question \"from a few years ago\" explicitly states that his case occurs even with the presence of a catch block.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A guess. As we can can see there is no actual duplication of code, the multiple trycatch blocks function as goto labels under different cases of what failed or not (since a finally clause is also present). If you follow the program flow you can see that no duplication  takes place.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Nikos M.",
            "time": "May 25, 2014 at 2:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just disassembled this using java 8 compiler and the second trycatchblock is no longer being generated\n </p>\n <pre><code>test(I)V\n   TRYCATCHBLOCK L0 L1 L2 null\n  L0\n   IINC 1 777\n  L1\n   IINC 1 -333\n  L3\n   GOTO L4\n  L2\n   FRAME SAME1 java/lang/Throwable\n   ASTORE 2\n   IINC 1 -333\n   ALOAD 2\n   ATHROW\n  L4\n   FRAME SAME\n   RETURN\n  L5\n</code></pre>\n <p>\n  My guess is this is some legacy handling that is ignored by the JVM\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "bvella",
            "time": "Feb 1, 2018 at 19:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}