{
    "title": "IDA python, write to specific memory location",
    "link": "https://reverseengineering.stackexchange.com/questions/16800/ida-python-write-to-specific-memory-location",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am looking for a way to modify memory location in IDA python script. We can read memory with these functions:\n </p>\n <pre><code>Byte(address)\nWord(address)\nDword(address)\n</code></pre>\n <p>\n  When I try to do something like this:\n </p>\n <pre><code>Byte(address) = value\n</code></pre>\n <p>\n  IDA says that it is not valid to assign to a function call. I tried to use ctypes, however IDA says about unhandled exception on the line:\n </p>\n <pre><code>include ctypes\n</code></pre>\n <p>\n  So how can I write to specific memory location? Thank you.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 2,
    "views": "10k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "user22310",
    "time": "Nov 20, 2017 at 18:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <a href=\"https://github.com/EiNSTeiN-/idapython/blob/master/python/idc.py#L1736\" rel=\"noreferrer\">\n   <code>\n    Byte()\n   </code>\n  </a>\n  ,\n  <a href=\"https://github.com/EiNSTeiN-/idapython/blob/master/python/idc.py#L1837\" rel=\"noreferrer\">\n   <code>\n    Word()\n   </code>\n  </a>\n  and\n  <a href=\"https://github.com/EiNSTeiN-/idapython/blob/master/python/idc.py#L1850\" rel=\"noreferrer\">\n   <code>\n    Dword()\n   </code>\n  </a>\n  are idapython's functions and every try to assign a value to a function call in python will end up with \"SyntaxError: can't assign to function call\".\n </p>\n <p>\n  These 3 functions you have mentioned are used to\n  <em>\n   read\n  </em>\n  the value of a given address, whether it's a byte, word or a dword. You can't use them to set a value to an address.\n </p>\n <hr/>\n <h2>\n  Patching\n </h2>\n <p>\n  In order to modify a memory location you can use one of the following functions:\n </p>\n <p>\n  <strong>\n   Prior IDA 7.0:\n  </strong>\n </p>\n <pre><code>PatchByte(ea, value)\n</code></pre>\n <blockquote>\n  <p>\n   Change value of a program byte\n   \n\n   If debugger was active then the debugged process memory will be patched too\n  </p>\n </blockquote>\n <pre><code>PatchWord(ea, value)\n</code></pre>\n <blockquote>\n  <p>\n   Change value of a program word (2 bytes)\n  </p>\n </blockquote>\n <pre><code>PatchDword(ea, value)\n</code></pre>\n <blockquote>\n  <p>\n   Change value of a double word\n  </p>\n </blockquote>\n <pre><code>PatchDbgByte(ea, value)\n</code></pre>\n <blockquote>\n  <p>\n   Change a byte in the debugged process memory only\n  </p>\n </blockquote>\n <p>\n  In case you want to get the original byte that was existed before any changes occurred, you should use:\n </p>\n <pre><code>GetOriginalByte(ea)\n</code></pre>\n <blockquote>\n  <p>\n   Get original value of program byte\n  </p>\n </blockquote>\n <p>\n  <strong>\n   IDA 7.0:\n  </strong>\n </p>\n <p>\n  Since\n  <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"noreferrer\">\n   IDA 7.0\n  </a>\n  has arrived idapython made some changes that worth to mention.\n </p>\n <p>\n  The names of the functions has changed to\n  <code>\n   patch_byte()\n  </code>\n  ,\n  <code>\n   patch_word()\n  </code>\n  ,\n  <code>\n   patch_dword()\n  </code>\n  ,\n  <code>\n   patch_dbg_byte()\n  </code>\n  and\n  <code>\n   get_original_byte()\n  </code>\n  accordingly, but, as for now, you still can use the old names since \"\n  <em>\n   IDA 7.0/Python/idc_bc695.py\n  </em>\n  \", which is responsible to compatibility, contains a wrapper to these functions.\n </p>\n <p>\n  Moreover, another function was added:\n </p>\n <pre><code>patch_qword(ea, value)\n</code></pre>\n <blockquote>\n  <p>\n   Change value of a quad word\n  </p>\n </blockquote>\n <p>\n  Notice that\n  <code>\n   PatchQword()\n  </code>\n  won't work for you since it was not existed in older versions so there's no reason to create it as a wrapper to\n  <code>\n   patch_qword()\n  </code>\n  for compatibility.\n </p>\n <hr/>\n <h2>\n  Coding\n </h2>\n <p>\n  Patching a single byte is very intuitive:\n </p>\n <pre><code>from idaapi import *\n\naddress= 0x67643021 \nnew_value = 0xCC\n\nPatchByte(address, new_value)\n</code></pre>\n <p>\n  This will edit the IDB file to set the value of\n  <em>\n   0x67643021\n  </em>\n  to\n  <em>\n   0xCC\n  </em>\n  . This won't affect the origianl file. In case that you only want to edit the value of the address in the memory and not in the IDB file, you should use\n  <code>\n   PatchDbgByte()\n  </code>\n  instead of\n  <code>\n   PatchByte()\n  </code>\n  .\n </p>\n <p>\n  If you want your changes to affect the original file you'll need to make it by yourself like this:\n </p>\n <pre><code>address= 0x67643021 \nnew_value = 0xCC\n\n# Open the file\nf = open(\"my_binary.exe\", \"rb+\")\n\n# Seek to the address you want to patch\nf.seek(address)\n\n# Write the new value to this address\nf.write(new_value)\n\n# Close the file\nf.close()\n</code></pre>\n <hr/>\n <p>\n  You can check\n  <a href=\"https://bitbucket.org/Alexander_Hanel/fwrapper/src/b3f389c926e7?at=master\" rel=\"noreferrer\">\n   fwrapper.py\n  </a>\n  by Alexander Hanel and\n  <a href=\"https://github.com/iphelix/ida-patcher\" rel=\"noreferrer\">\n   ida-patcher\n  </a>\n  by Peter Kacherginsky to see some code examples that you may find helpful.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Nov 21, 2017 at 12:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <pre><code>from idaapi import *\nfrom idautils import *\nprint Byte(ScreenEA())\nPatchByte(ScreenEA(),100) <--- this will patch the byte at current address to 0x64\nprint Byte(ScreenEA())\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 20, 2017 at 23:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}