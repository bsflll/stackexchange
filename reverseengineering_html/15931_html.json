{
    "title": "Trying to reverse function to generate certain color strings from an HMAC signature - decompiled code LOOKS right, but my results differ",
    "link": "https://reverseengineering.stackexchange.com/questions/15931/trying-to-reverse-function-to-generate-certain-color-strings-from-an-hmac-signat",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This might be a bit difficult to follow without context, but the gist of it is the following; I'm trying to reverse a certain application, and part of what I\"m attempting to reverse in the app generates 3 unique colors based on a string passed via API requests. I know that I've successfully reversed the API properly as the other data I receive works perfectly and I've built out a clone of the client that properly interacts with the API. What I'm stuck on is three color codes that are generated every day, based on a specific key passed by the API.\n </p>\n <p>\n  Today, 7/26/17, the color codes are\n  <code>\n   [#c698c8, #72555f, #2f1021]\n  </code>\n  , created from the string that the API passed -\n  <code>\n   87gs4\n  </code>\n  .\n </p>\n <p>\n  I've disassembled the Java code and traced the generation of these colors to the following set of functions. I've verified that it is indeed the string I grabbed from the API responsible for generating these. The\n  <code>\n   SALT\n  </code>\n  mentioned in the functions is generated from a datetime formatted as\n  <code>\n   yyyyMd\n  </code>\n  - in the case of today's colors, the salt is\n  <code>\n   20170727\n  </code>\n  , or as the HMAC signature function generates it,\n  <code>\n   20170727\n  </code>\n  is the input with\n  <code>\n   87gs4\n  </code>\n  as the key.\n </p>\n <p>\n  The resulting signature is then taken (64 hex characters), and only the first 18 are saved, then split up into 3 to form the color codes. Therefore, I know the signature I'm looking for (for today) begins with\n  <code>\n   c698c872555f2f1021\n  </code>\n  - but for some reason, my results do not achieve this. I've checked to make sure I\"m using the right key/input order (even reversed it just in case), and I'm getitng\n  <code>\n   9a0ca25fff8eeccdbaf741436ddacf364f517adcb28299f0544c72a67dca2089\n  </code>\n  or\n  <code>\n   30c21ae7995415220e427588e451cbdd58d84785bcd58f8e3f0db2ca0fc104c4\n  </code>\n  . I've also checked lettercase to no avail.\n </p>\n <p>\n  I don't have tomorrow's colors, but I have the data from the API and know the salt - tomorrow it will be\n  <code>\n   20170728\n  </code>\n  and\n  <code>\n   kRG86\n  </code>\n  .\n </p>\n <p>\n  I have verified that there's no external manipulation via\n  <code>\n   getColorBand()\n  </code>\n  or\n  <code>\n   getSalt()\n  </code>\n  before the values are passed to create the signature, and I've even had another pair of eyes take a look at this - someone who is fairly experienced with this kind of stuff - he thinks that maybe we're missing something in the byte to hex (and vice versa) conversation that is causing incorrect results, but that we're on the right track and that an HMAC-SHA256 hash generator using the yyyyMd salt and the data I received is correct in that it\n  <em>\n   should\n  </em>\n  be generating the right data.\n </p>\n <p>\n  Code for the actual string manipulation and generation:\n </p>\n <pre><code>        String color = this.hexFortmat.substring(0, 6);\n        ImageView colorBand1 = ((ImageView) DecompiledFile.this.findViewById(R.id.image_view1));\n        ImageView colorBand2 = ((ImageView) DecompiledFile.this.findViewById(R.id.image_view2));\n        ImageView colorBand3 = ((ImageView) DecompiledFile.this.findViewById(R.id.image_view3));\n        String hexFortmat = DecompiledFile.bin2hex(this.mdbytes);\n        byte[] mdbytes = DecompiledFile.generateHmacSHA256Signature(DecompiledFile.this.getSalt(), DecompiledFile.this.getColorBand());\n        boolean performAllTimerFunctions = true;\n        TextView specialInstruction = ((TextView) DecompiledFile.this.findViewById(R.id.textView9));\n        boolean visibleColorBand = false;\n        boolean visibleSpecialInstruction = false;\n</code></pre>\n <p>\n  Relevant signature code:\n </p>\n <pre><code>public static byte[] generateHmacSHA256Signature(String data, String key) throws GeneralSecurityException, IOException {\n    try {\n        SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(StringEncodings.UTF8), HMAC_SHA_256);\n        Mac mac = Mac.getInstance(HMAC_SHA_256);\n        mac.init(secretKey);\n        return mac.doFinal(data.getBytes(StringEncodings.UTF8));\n    } catch (UnsupportedEncodingException e) {\n        throw new GeneralSecurityException(e);\n    }\n}\n\nstatic String bin2hex(byte[] data) {\n    return String.format(\"%0\" + (data.length * 2) + \"X\", new Object[]{new BigInteger(1, data)});\n}\n</code></pre>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "258",
    "tags": [
        "java",
        "hash-functions"
    ],
    "user": "Thirk",
    "time": "Jul 28, 2017 at 15:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you possibly have an extra 0 in the month\n </p>\n <p>\n  <a href=\"https://www.freeformatter.com/hmac-generator.html#ad-output\" rel=\"nofollow noreferrer\">\n   https://www.freeformatter.com/hmac-generator.html#ad-output\n  </a>\n </p>\n <p>\n  2017727\n </p>\n <p>\n  87gs4\n </p>\n <p>\n  c698c872565f2f1021645993fe29eff6adba41cb1260b7e671fc1752ae8d94a0\n </p>\n <p>\n  it is padded according to format string\n </p>\n <p>\n  <a href=\"http://www.fileformat.info/tip/java/simpledateformat.htm\" rel=\"nofollow noreferrer\">\n   http://www.fileformat.info/tip/java/simpledateformat.htm\n  </a>\n </p>\n <p>\n  !\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZppOS.jpg\"/>\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Jul 28, 2017 at 4:13",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Thirk",
                    "text": "<span class=\"comment-copy\">How would this work on later months? It will change to 2 digits if formatted as yyyyMd?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">maybe hex month possibly the hash matches the input and output so it is close you may have to look somewhere near</span>",
                    "time": null
                },
                {
                    "user": "Ilya O.",
                    "text": "<span class=\"comment-copy\">For those curious: the number of <code>M</code>s and <code>d</code>s specifies the <i>minimum</i> number of digits, any number of digits less than the amount of <code>M</code>s or <code>d</code>s will be left zero-padded. So in this particular case, Oct, Nov, Dec will be two digits. And days with a single digit will be single digit. Source: <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#number\" rel=\"nofollow noreferrer\">docs.oracle.com/javase/7/docs/api/java/text/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">ilya beat me  and  commented  that explains the format i also added a screenshot to the answer  which shows how padding seems to work</span>",
                    "time": null
                }
            ]
        }
    ]
}