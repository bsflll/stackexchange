{
    "title": "Using GDB to trace guest OS inside a hypervisor, the whole running on Qemu - kvm",
    "link": "https://reverseengineering.stackexchange.com/questions/21024/using-gdb-to-trace-guest-os-inside-a-hypervisor-the-whole-running-on-qemu-kvm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I use Gdb to trace the execution (breakpoint, single stepping, ...) of a hypervisor OS in Qemu and it works fine so far.\n </p>\n <pre><code>qemu-system-x86_64 -enable-kvm -display sdl -cpu host -serial my: stdio -m 8192 --bios ../../tool/boot/tianocore.bin -drive format = raw, file = var / run /hypervisor.img -machine q35 -s -S\ngdb path/to/hypervisor\ntarget remote: 1234\n</code></pre>\n <p>\n  Now, I need to trace the execution of a guest OS in the hypervisor, all run by Qemu. And it does not work.\nYet I added the debugging symbols files related to the OS and I also modified the architecture of the instructions.\n </p>\n <pre><code>add-symbol-file ~ / Tinycore / vmlinux 0x100000\nadd-symbol-file bin / munich 0x18000\nset architecture i386: x64_32 // because the guest OS is compiled in 32 bits\n</code></pre>\n <p>\n  But when execution passes the instructions vmresume, vmlauch and continues in the guest OS, Gdb gets confused, single-stepping does not work anymore and breakpoints end up at uncertain addresses.\n  \n\n  Does anyone have an idea of ​​what I missed?\n  \n\n  Or is it really impossible?\n  \n\n  Is there another way to achieved this?\n  \n\n  The hypervisor I'm working on is\n  <a href=\"https://github.com/genodelabs/genode\" rel=\"nofollow noreferrer\">\n   Genode\n  </a>\n  and the guest OS is T\n  <a href=\"http://tinycorelinux.net/10.x/x86/release/src/kernel/\" rel=\"nofollow noreferrer\">\n   inycore Linux\n  </a>\n  .\n </p>\n <hr/>\n <ol>\n  <li>\n   <a href=\"http://os.inf.tu-dresden.de/~kauer/oslo/\" rel=\"nofollow noreferrer\">\n    munich\n   </a>\n   is a 32 bits bootloader used to boot the Tinycore Linux.\n  </li>\n  <li>\n   hypervisor, vmlinux and munich are the binaries compiled with debugging symbols.\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 0,
    "views": "375",
    "tags": [
        "debugging",
        "gdb",
        "breakpoint",
        "qemu",
        "hypervisor"
    ],
    "user": "Mahouk",
    "time": "Apr 2, 2019 at 18:08",
    "comments": [],
    "answers_data": []
}