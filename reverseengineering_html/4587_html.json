{
    "title": "Storing a value by using the ADD and SUB assembly operation. Why?",
    "link": "https://reverseengineering.stackexchange.com/questions/4587/storing-a-value-by-using-the-add-and-sub-assembly-operation-why",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following assembly line(I also added a C code implementation how I would do it in C):\n </p>\n <pre><code>     .................\nA:   MOVSX EAX, BYTE PTR DS:[ECX]     |   while(ecx != NULL){\n     ADD EDX, EAX                     |   \n     INC ECX                          |   char *eaxPtr = *ecx;\n     CMP BYTE PTR DS:[ECX], 0x0       |   int  edxValue += *(int *)eaxPtr;\n     JNZ SHORT A                      |   ecx++;\n     ADD EDX,0xB                      |\n     MOV EAX,EDX                      |   }\n     SUB EAX,0xB                      |   int eaxValue = edxValue;\n     RETN                             |\n</code></pre>\n <p>\n  The thing is that I have stored the string \"30;,;1,73,:2\" in the register ECX. What the routine above does is to go through the string and add the components of the string like 30 or the ANSCII representation of for example ; and so on in the register EDX. \nAs result, I have the value 00000264 in EDX. \nWhat I do not understand is the end of the assembly line. Especially the lines:\n </p>\n <pre><code>     ADD EDX,0xB                      \n     MOV EAX,EDX                      \n     SUB EAX,0xB \n</code></pre>\n <p>\n  Why we first add 0xB to the register edx, then store it to eax, and then subtract 0xB from eax ?\nThe whole is equivalent to the line:\n </p>\n <pre><code>     MOV EAX,EDX\n</code></pre>\n <p>\n  Does somebody know why the compiler do it like that ? Because of optimization ? Or there any other reasons?\n </p>\n <p>\n  By the way: Is my C code implementation correct ?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Jun 10, 2014 at 17:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The assembler code you posted is a do-while loop, not a while loop. I guess there's a few instructions in front of it that belong to the function but which you didn't post.\n </p>\n <p>\n  Unfortunately, you didn't post the preceding instructions, so we can just assume there was something there. For example, the programmer might have wanted to return -11 as an error code for an empty string, as in:\n </p>\n <pre><code>int sum=0;\nif (*ecx) {\n    do {\n        sum+=*ecx;\n        ecx++;\n    } while (*ecx != '\\0');\n    sum+=11;\n}\nreturn sum-11;\n</code></pre>\n <p>\n  However, this is guesswork, because your code doesn't show the if condition.\nHow anyone would want to write his sourcecode like this, i don't know.\n </p>\n <p>\n  I could think of three reasons for the compiler to produce this code:\n </p>\n <ol>\n  <li>\n   No optimizations at all, and source code like mine above\n  </li>\n  <li>\n   Intelligent avoidance of a conditional jump (these are evil because the processor instruction pipeline must be cleared if branch prediction fails), although i can't imagine a source code that would use it here.\n  </li>\n  <li>\n   Optimization for space. Replace, in my example above, the\n   <code>\n    sum+=11\n   </code>\n   with\n   <code>\n    return sum\n   </code>\n   . This would translate into a\n   <code>\n    MOV EAX, EDX\n   </code>\n   and\n   <code>\n    RETN\n   </code>\n   .\n   <code>\n    ADD EDX, 0XB\n   </code>\n   needs a byte less and accomplishes the same.\n  </li>\n </ol>\n <p>\n  Edit: I just tested it:\n  <code>\n   MOV EAX, EDX\n  </code>\n  and\n  <code>\n   RETN\n  </code>\n  need 3 bytes,\n  <code>\n   ADD EDX, 0xB\n  </code>\n  needs 3 bytes as well. So Optimization for space is not an issue here.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jun 10, 2014 at 18:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The other answer is good and relatively complete, but there may be one other reason such code is used, and that is to obfuscate the code for the purpose of helping to prove future patent infringement or copyright violation.  Because it's certainly not a usual way to do this operation, any code which duplicates it verbatim would likely be used in a court of law as evidence of copying.\n </p>\n <p>\n  See\n  <a href=\"http://link.springer.com/chapter/10.1007%2F11427995_42#page-1\" rel=\"nofollow\">\n   this article on software watermarking\n  </a>\n  for a survey of current techniques and motivations for using them.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Edward",
            "time": "Jun 11, 2014 at 14:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}