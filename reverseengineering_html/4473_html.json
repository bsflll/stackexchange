{
    "title": "IDA doesn't understand -0.0f (0x80000000)?",
    "link": "https://reverseengineering.stackexchange.com/questions/4473/ida-doesnt-understand-0-0f-0x80000000",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm relatively new to IDA. Recently I was disassembling an ARM binary that contains some signal processing routines. One of the data tables used by the routine is an array of floats, and one of those floats is -0.0 (encoded as 0x80000000). When I try to get IDA to convert this into a float, it refuses and just yields \"DB 0,0,0,0x80\".\n </p>\n <p>\n  The problem is that this single \"invalid\" entry is making it impossible for me to convert the region into an array. Instead I have to split the array into two halves, which is awkward.\n </p>\n <p>\n  Is this a known issue? Can I force an array to be created even if some of the elements are invalid?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "arm"
    ],
    "user": "nneonneo",
    "time": "May 28, 2014 at 18:17",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n You'll probably get a better answer from Igor later, but i'd just convert the bytes to 0x00000000 (press F2 in hex view, edit, then F2 again) to make them valid.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n Convert it to\n <code>\n  dq\n </code>\n instead problem solved or better\n <code>\n  Edit-> Operand type -> Number -> Floating point\n </code>\n sometimes are just manually need to be fixed.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<html><body><span class=\"comment-copy\">\n Also press Alt+D or (Options -> Setup data types...) and check float/double and whatever else you need so you can now do the\n <code>\n  D\n </code>\n key\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "nneonneo",
            "text": "<html><body><span class=\"comment-copy\">\n @SSpoke: I have already checked float there. Conversions using\n <code>\n  D\n </code>\n work for most of the other floats in the array, just not this one.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "nneonneo",
            "text": "<html><body><span class=\"comment-copy\">\n @SSpoke:\n <code>\n  DQ\n </code>\n is a quadword, right? How does that help me?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Ok, I find an area in a ARM bin, that was\n </p>\n <pre><code>RAM0:100DE337                 DCB    0\nRAM0:100DE338                 DCB    0\nRAM0:100DE339                 DCB    0\nRAM0:100DE33A                 DCB 0x80 ; Ã‡\n</code></pre>\n <p>\n  selecting\n  <code>\n   Edit | Operand type | Number | Floating point\n  </code>\n  results in:\n </p>\n <pre><code>RAM0:100DE337                 DCB 0, 0, 0, 0x80\n</code></pre>\n <p>\n  Using\n  <kbd>\n   Alt\n  </kbd>\n  -\n  <kbd>\n   D\n  </kbd>\n  means I can now toggle between byte, word, dword, and above 'float'\n </p>\n <p>\n  having it in above form, then going to Hex View, pressing\n  <kbd>\n   F2\n  </kbd>\n  to edit to all\n  <code>\n   0x00\n  </code>\n  ,\n  <kbd>\n   F2\n  </kbd>\n  , and returning to Asm View and\n  <code>\n   0.0\n  </code>\n  is shown, then returning to Hex and resetting\n  <code>\n   0x80\n  </code>\n  value, results in above float format again.\n </p>\n <p>\n  changing the\n  <code>\n   0x80\n  </code>\n  to\n  <code>\n   0x70\n  </code>\n  shows\n  <code>\n   1.5846e29\n  </code>\n  which matches what an\n  <a href=\"http://www.binaryconvert.com/result_float.html?hexadecimal=80000000\" rel=\"nofollow\">\n   Online Float converter\n  </a>\n  shows for\n  <code>\n   0x70000000\n  </code>\n  , and on that site\n  <code>\n   0x80000000\n  </code>\n  is\n  <code>\n   -0.0\n  </code>\n  as in original question. Given the value is\n  <code>\n   -0\n  </code>\n  , Guntram's suggest of just turning it to zero makes the most sense to manage the \"issue\"\n </p>\n <p>\n  Tested with Version 6.6.140605 (32-bit)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "perror",
            "time": "Jun 24, 2014 at 7:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "nneonneo",
                    "text": "<span class=\"comment-copy\">OK, so this is a workaround. I guess it'll have to do...but it's a bit of a PITA with arrays that have a few \"-0\" in the middle.</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">Yes, but it would seem worth reporting on the IDA forum is you want a real answer/it fixed.</span>",
                    "time": null
                },
                {
                    "user": "offbyseveral",
                    "text": "<span class=\"comment-copy\">You again? Email Ilfak. Or find the bit in IDA that handles this and patch it.</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">@offbyseveral is that comment aimed at me or @nneonneo?</span>",
                    "time": null
                },
                {
                    "user": "offbyseveral",
                    "text": "<span class=\"comment-copy\">OP, unless different from recent asker of same question and if it's a different person from last time then sorry for the 'you again'. I guess I meant the bug. Sorry I don't have the reference for the previous question. Yes it's a bug, yes it does suck. Luckily it hasn't troubled me directly. There'll probably be a good response if it gets reported.</span>",
                    "time": null
                }
            ]
        }
    ]
}