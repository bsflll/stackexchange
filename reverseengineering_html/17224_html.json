{
    "title": "re-construction of c code: movsx with test instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/17224/re-construction-of-c-code-movsx-with-test-instruction",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I just started learning about reconstructing C code from assembler instructions.\n </p>\n <p>\n  I have the following piece of assembler code:\n </p>\n <pre><code>mov eax dword ptr [ebp+8]\nadd eax, dword ptr[ebp-4]\nmovsx ecx, byte ptr [eax]\ntest ecx, ecx\njne XXXXX\ncomp dword ptr [ebp-4], ffh\njle XXXX\n</code></pre>\n <p>\n  I want to reconstruct the condition of these lines but I have some problems or things I am not sure about:\nI re-constructed the following:\n </p>\n <p>\n  Let,\n  <code>\n   ebp+8= param1\n  </code>\n  and\n  <code>\n   ebp-4 = i\n  </code>\n </p>\n <pre><code>if(param1[i]!=’\\0’ || i<=0xff){\n…\n}\n</code></pre>\n <p>\n  But I am wondering about this line:\n </p>\n <pre><code>movsx ecx, byte ptr [eax]\n</code></pre>\n <p>\n  As I understand\n  <code>\n   movsx\n  </code>\n  it moves a signed value into a register and sign-extends it with 1. Thus,\n  <code>\n   ecx\n  </code>\n  shouble look something like\n  <code>\n   0xFFFFFF<eax>\n  </code>\n  . Because only the lower bytes (\n  <code>\n   byte ptr eax\n  </code>\n  ) of eax are moved and ecx is 1 extended. Where am I wrong?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "678",
    "tags": [
        "x86",
        "c",
        "static-analysis"
    ],
    "user": "alive-and-well",
    "time": "Jan 17, 2018 at 14:41",
    "comments": [
        {
            "user": "malikcjm",
            "text": "<html><body><span class=\"comment-copy\">\n Its loading one byte from memory address pointed by value stored inne eax. Ecx = (char)*eax\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<html><body><span class=\"comment-copy\">\n and it will become 0xFFFFFFxx only if the bit 7 of [eax] is set, otherwise it will be 0x000000xx.  The point being that the array being read has been defined as a signed char *\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "alive-and-well",
            "text": "<html><body><span class=\"comment-copy\">\n I have one more question: Is the reconstruction to \"||\" correct?, or should it be a \"&&\"?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "cimarron",
            "text": "<html><body><span class=\"comment-copy\">\n There is not enough context in the disassembly you gave to say definitively (i.e. where are the jumps going to and what code is being executed for each condition). In general for a null-terminated string/array, it would be\n <code>\n  if (array[i] != 0 && i < MAXCOUNT)\n </code>\n -- AND instead of OR\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "alive-and-well",
            "text": "<html><body><span class=\"comment-copy\">\n @cimarron the\n <code>\n  jne\n </code>\n jumps right after the\n <code>\n  jle\n </code>\n . The\n <code>\n  jle\n </code>\n jumps to the function prolog. I know that usually it would be\n <code>\n  if (array[i] != 0 && i < MAXCOUNT)\n </code>\n but to me it looks differently.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You may want to familiarize yourself with\n  <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" rel=\"nofollow noreferrer\">\n   two's complement\n  </a>\n  notation. It will only extend the sign bit (msb) into the larger register. So, the msb will be extended into all the additional bits -- sxxxxxxx -> sssssssssssssssssssssssssxxxxxxx\n </p>\n <p>\n  For example, if the byte value pointed to by\n  <code>\n   eax\n  </code>\n  was 1 (0b00000001),\n  <code>\n   ecx\n  </code>\n  would be 1 (0b00000000000000000000000000000001). Similarly, if it was the most positive number possible in a two's complement byte, 127 (0b01111111),\n  <code>\n   ecx\n  </code>\n  would be 127 as well (0b00000000000000000000000001111111).\n </p>\n <p>\n  Where the sign extension is needed is to maintain the value for negative numbers. If the value were -1 (0b11111111), then if you just simply zero-extended into a 32-bit value you would get 255 (0b00000000000000000000000011111111) in\n  <code>\n   ecx\n  </code>\n  instead of -1 (0b11111111111111111111111111111111).\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "cimarron",
            "time": "Jan 17, 2018 at 16:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}