{
    "title": "How is IDAPython API structured?",
    "link": "https://reverseengineering.stackexchange.com/questions/14430/how-is-idapython-api-structured",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  In IDA's documentation, there are references to modules named\n  <code>\n   ida_*\n  </code>\n  , as well as\n  <code>\n   idc\n  </code>\n  ,\n  <code>\n   idaapi\n  </code>\n  and\n  <code>\n   idautils\n  </code>\n  . The former modules seem to be the lower level ones. Almost always it says that\n  <code>\n   IDA Plugin SDK API wrapper: <some_module>\n  </code>\n  .\n </p>\n <p>\n  I have a few specific questions about the documentation and IDAPython:\n </p>\n <ol>\n  <li>\n   What is this IDA plugin SDK? Is it the C like API available in IDC?\n  </li>\n  <li>\n   Do the higher level API allow access to all the lower level functionalities?\n  </li>\n  <li>\n   What can't I seem to load lower level modules? (When I try to\n   <code>\n    import ida_lines\n   </code>\n   , IDA says\n   <code>\n    ImportError: No module named ida_lines\n   </code>\n   )\n  </li>\n </ol>\n</div>\n</body></html>",
    "votes": "8",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "idapython",
        "idapro-sdk"
    ],
    "user": "sherlock",
    "time": "Jan 17, 2017 at 22:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <em>\n   A bit of history:\n  </em>\n  (aka an aging guy blabbering about)\n </p>\n <p>\n  In the old days, we didn't have python in IDA and when an individual wanted to develop an IDA plugin he had to implement it in C and use the SDK available from hex-ray's\n  <a href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" rel=\"nofollow noreferrer\">\n   download center\n  </a>\n  using credentials received when you purchase an IDA license. We did have, however, IDC. IDC is IDA's old, proprietary and somewhat deprecated scripting language, this is not related to C however there is evident effort using a C-like syntax. It was commonly used in the past but IDAPython nearly replaced it completely. The only reason to see IDC now is for old code, that precedes IDAPython.\n </p>\n <p>\n  Since then, IDAPython was developed (originally as a plugin using the aforementioned SDK, and then adopted by hex-rays and made part of IDA). Up until the recent IDA 6.95, we only had a single module exposing all of IDA's C SDK in python. That module was\n  <code>\n   idaapi\n  </code>\n  .\n  <code>\n   idc\n  </code>\n  is implementing higher level functions that were migrated from IDC into IDAPython.\n  <code>\n   idautils\n  </code>\n  implements some more high level functions, that weren't there before. those are rough divisions, and not entirely accurate. The important point here is that there was a single (long) python file exposing all SDK functions (that are exposed to python using\n  <a href=\"http://www.swig.org/\" rel=\"nofollow noreferrer\">\n   SWIG\n  </a>\n  ).\n </p>\n <p>\n  In IDA 6.95 we still have that, but it was also the first version to include multiple\n  <code>\n   ida_*\n  </code>\n  modules where are to replace the broad\n  <code>\n   idaapi\n  </code>\n  .\n  <code>\n   idaapi\n  </code>\n  is only included in 6.95 for backwards compatibility and should be expected to be dropped in IDA 7. Generally, the names of the modules (what follows the\n  <code>\n   ida_\n  </code>\n  prefix) are the names of the header files in which those functions are defined. For example,\n  <code>\n   ida_lines\n  </code>\n  will expose functions defined in\n  <code>\n   lines.h\n  </code>\n  .\n </p>\n <p>\n  <em>\n   Actual answers\n  </em>\n  :\n </p>\n <ol>\n  <li>\n   The IDA plugin SDK is a collection of C header files and binary libraries that allow a third party develop IDA plugins using the provided API. It can be downloaded from the\n   <a href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" rel=\"nofollow noreferrer\">\n    download center\n   </a>\n   and it's documentation is available\n   <a href=\"https://www.hex-rays.com/products/ida/support/sdkdoc/\" rel=\"nofollow noreferrer\">\n    here\n   </a>\n   .\n  </li>\n  <li>\n   While the C SDK is pretty well documented, the IDAPython not so much. I often find browsing the SDK useful when developing IDAPython plugins, as functions are usually exposed to python but not documented or described as well as they are in the SDK. basically most of the functions correspond and you'll find the same functions having the same name in both IDAPython and the SDK (as this is mostly automatically generated code by/for\n   <a href=\"http://www.swig.org/\" rel=\"nofollow noreferrer\">\n    SWIG\n   </a>\n   ).\n  </li>\n  <li>\n   First guess would be you're using an older version of IDA, where\n   <code>\n    ida_*\n   </code>\n   modules don't yet exist. generally, using\n   <code>\n    idaapi\n   </code>\n   instead of every other module will do just fine.\n  </li>\n </ol>\n <p>\n  <em>\n   Developing for IDA:\n  </em>\n </p>\n <p>\n  A person interested in developing for IDA has three options:\n </p>\n <ul>\n  <li>\n   Writing C code using the IDA SDK and compiling it, having a\n   <code>\n    plw\n   </code>\n   or a\n   <code>\n    p64\n   </code>\n   binary as output.\n  </li>\n  <li>\n   Writing IDC code. This is a decent scripting language resembling a simplified C in syntax. output would be a text file. This was the scripting language of choice for IDA before IDAPython became popular and ownership was transferred to hexrays.\n  </li>\n  <li>\n   Writing IDAPython code. This is mostly python using the additional modules available when running from within IDA, plus a simple IDA plugin interface required to register as a plugin.\n  </li>\n </ul>\n</div>\n</body></html>",
            "votes": "11",
            "user": "NirIzr",
            "time": "Feb 11, 2019 at 14:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">\"idc is implementing higher level functions that were migrated from IDC into IDAPython\" - what is <code>IDC</code> in (CAPITAL) here? Can you please edit your original answer to make it clearer?</span>",
                    "time": null
                },
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Can plugins be written in both <code>C</code> and <code>Python</code>?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">(Edited) See 2nd half of first paragraph for what's IDC. Yes, you can develop IDA plugins in C. Plugin developers seem to prefer python over C however.</span>",
                    "time": null
                },
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Is IDC different from IDA's C-based SDK? I'm asking because the documentation says IDC to be 'C-like' (which is different from the language being 'C' itself). Could IDC be used for writing plugins? In that case, one can theoretically write a plugin in either of the three languages: IDC, IDA C-based SDK, IDAPython.  Please update your answer above. It's already so precise, clean and to-the-point that I just want it to be better for future readers.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">See additional edit.</span>",
                    "time": null
                }
            ]
        }
    ]
}