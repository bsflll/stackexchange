{
    "title": "How to debug an obfuscated self hashing program?",
    "link": "https://reverseengineering.stackexchange.com/questions/30657/how-to-debug-an-obfuscated-self-hashing-program",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to understand what the following obfuscated application does:\n </p>\n <pre><code>interpreter.py:\n    string = \"lambda x : obfuscated_code_to_interpret_variable_x\"\n    interpreter = eval(string)\n\n    instructions = read_instructions(argv[1])\n    interpreter(instructions)\n\ninstructions.txt:\n    04GFUHSDSLGHLDFIHGLDSHLFHGLSDGHFLFSHGLIFSHLGFLGFIIGFL...\n</code></pre>\n <p>\n  You run the application typing the command\n  <code>\n   python3 interpreter.py instructions.txt\n  </code>\n </p>\n <p>\n  <code>\n   instructions.txt\n  </code>\n  contains machine code (of some hypothetical machine).\n  <code>\n   interpreter.py\n  </code>\n  contains an interpreter that runs the machine code.\n </p>\n <p>\n  I want to modify the interpreter by adding\n  <code>\n   print(variable)\n  </code>\n  statements inside the\n  <code>\n   string\n  </code>\n  ,\nto see what the code does.\n </p>\n <p>\n  The problem is that somewhere in the\n  <code>\n   instructions.txt\n  </code>\n  file, a file\n  <code>\n   interpreter.py\n  </code>\n  is read as a string, hashed, and checked that the hash equals to a predefined value. Thus, any modification to the\n  <code>\n   interpreter\n  </code>\n  variable will invalidate the hash.\n </p>\n <p>\n  I also have no idea what the numbers inside the\n  <code>\n   instructions.txt\n  </code>\n  file mean, because only the obfuscated interpreter understands the meaning of those numbers. So I can't remove the hash check from the\n  <code>\n   instructions.txt\n  </code>\n  file, because I don't know where it is.\n </p>\n <p>\n  Any ideas, how to deobfuscate such application?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "109",
    "tags": [
        "obfuscation",
        "deobfuscation",
        "hash-functions"
    ],
    "user": "mercury0114",
    "time": "Jul 19, 2022 at 9:35",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Can you elaborate on how the obfuscated code obfuscated_code_to_interpret_variable_x looks like?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mercury0114",
            "text": "<html><body><span class=\"comment-copy\">\n e.g.\n <code>\n  def x(y): return z(y+1)\n </code>\n <code>\n  def z(x): return x if x ^ 234 < 10 else 0\n </code>\n ...  and so on, like 200 functions, with if/else statements, maths expressions, such as\n <code>\n  (x || y && z ^ 2)\n </code>\n , all of that to construct one big function F, which is then evaluated with an argument x, so\n <code>\n  string = \"lambda x : F(x)\"\n </code>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "mercury0114",
            "text": "<html><body><span class=\"comment-copy\">\n @ws basically, the whole interpreter processing is hidden behind\n <code>\n  F(x)\n </code>\n . I would add\n <code>\n  print\n </code>\n statements to print the variables of the inner functions of the implementation of\n <code>\n  F(x)\n </code>\n , if I see that some variable is a constant, then I can delete the code computing that variable to simplify the function, and keep iterating. This technique has worked for me before.  But now adding\n <code>\n  print\n </code>\n statements changes the value of\n <code>\n  string\n </code>\n , and thus the hash(string).\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Are you sure that the integrity checking relies on reading the actual file ? Do you see something like such a file reading and hashing inside the obfuscated code?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If your suggestion that \"the obfuscated code actually reads the file and checks the kind of checksum of it\" is correct you can do the following (or at least that's the order of the actions I'd perform):\n </p>\n <ul>\n  <li>\n   First' I'd check that it really reads the file and not takes its contents from somewhere else. For this I'd run this on linux with\n   <code>\n    strace\n   </code>\n   and check how the python interpreter deals with this file on a level of system calls. If additional read exists, the option may be real. In addition it is possible that it loads some libraries, which can be seen when python interpreter is running with command line options\n   <code>\n    -d\n   </code>\n   (debug) and\n   <code>\n    -v\n   </code>\n   (verbose).\n  </li>\n  <li>\n   If it opens \"interpreter.py\" I'd copy the script and run the copy from the same folder with changes. If it reads it\n   <strong>\n    by name\n   </strong>\n   and checks\n   <strong>\n    only its checksum\n   </strong>\n   the problem is solved.\n  </li>\n  <li>\n   If this doesn't work, I'd suggest that it takes the file name from\n   <code>\n    __FILE__\n   </code>\n   constant, and change it in the copy to point to the original file. If the same assumptions remain, problem solved.\n  </li>\n  <li>\n   If this doesn't work, I'd try to check for a library function that computes checksum and override it. If it exists, overridden function will return the required value, and same assumptions remain, problem solved.\n  </li>\n  <li>\n   In addition I'd check if it imports\n   <code>\n    inspect\n   </code>\n   module and calls something like\n   <code>\n    inspect.getsource\n   </code>\n   (this gets the source of the function). If it is so - just override it with something that will return the original function.\n  </li>\n  <li>\n   If this doesn't work, I'd seriously try to understand the obfuscated function, but there is one more option: it is possible to write LD_PRELOAD like library which will override all the file IO, and will push to the obfuscated code the original version for computing the checksum.\n  </li>\n </ul>\n <p>\n  Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Jul 19, 2022 at 12:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}