{
    "title": "How is it possible to generate C++ class header from a .dll or ELF file?",
    "link": "https://reverseengineering.stackexchange.com/questions/29631/how-is-it-possible-to-generate-c-class-header-from-a-dll-or-elf-file",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I loaded a dynamic library file to IDA. I can clearly see the function signatures from the \"Function name list\". There are RTTI items in the \"Structures\" tab as well, but I don't really understand it. I would like to generate a\n  <code>\n   .hpp\n  </code>\n  header file from the library, so I could use this DLL from my C++ projects.\n </p>\n <p>\n  My final goal would be to rewrite this library in a way, that it can be used from the programs, that depend on the original dll.\n </p>\n <p>\n  I tried to use the\n  <a href=\"https://sourceforge.net/projects/classinformer/\" rel=\"nofollow noreferrer\">\n   IDA ClassInformer PlugIn\n  </a>\n  , but I get this result:\n </p>\n <pre><code>>> Class Informer: v: 2.5, built: Jul 13 2018, By Sirmabus\nWorking..\n** Failed to load the IDA TypeDescriptor type, generating one **\n\nProcessing C/C++ ctor & dtor tables..\n-------------------------------------------------\n0000000010705194 I: \"_initterm\", 6 bytes.\n00000000107061B8 import: \"__imp__initterm\".\n \n0000000010705194 processInitterm: \"_initterm\" \n  0000000010704FF2 \"_initterm\" xref.\n  ** arguments not located!\n \n00000000107061B8 processInitterm: \"__imp__initterm\" \n \nProcessing time: 2.52 milliseconds.\n\nScanning for for RTTI Complete Object Locators..\n-------------------------------------------------\n N: \".data\", A: 000000001080A000 - 000000001080C000, S: 8 KB.\n N: \".rdata\", A: 00000000108061CC - 000000001080A000, S: 15.6 KB.\n N: \".idata\", A: 0000000010806000 - 00000000108061CC, S: 460 bytes.\n N: \".text\", A: 0000000010801000 - 0000000010806000, S: 20 KB.\n     Total COL: 0\nCOL scan time: 0.001\n\nScanning for Virtual Function Tables..\n-------------------------------------------------\n N: \".data\", A: 000000001080A000 - 000000001080C000, S: 8 KB.\n N: \".rdata\", A: 00000000108061CC - 000000001080A000, S: 15.6 KB.\n N: \".idata\", A: 0000000010806000 - 00000000108061CC, S: 460 bytes.\n N: \".text\", A: 0000000010801000 - 0000000010806000, S: 20 KB.\nVftable scan time: 0.003\n \n\n=========== Stats ===========\n  RTTI vftables: 0\nProcessing time: 6.27 milliseconds\nDone.\n</code></pre>\n <p>\n  It does not show anything. What do I wrong?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "834",
    "tags": [
        "ida",
        "c++",
        "ida-plugin",
        "dynamic-linking",
        "class-reconstruction"
    ],
    "user": "Iter Ator",
    "time": "Nov 28, 2021 at 12:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you expect something like full class definitions with field and method names, it’s simply not possible: all such information is not necessary for program execution and is discarded by the compiler.\n  <em>\n   Sometimes\n  </em>\n  runtime type information (RTTI) with class names may remain if the program uses classes with virtual functions and RTTI has not been disabled by the developer. However, it seems your target is lacking even that. So probably the only way is to analyze the code and try to recover possible classes by manual inspection.\n </p>\n <p>\n  See also:\n  <a href=\"https://reverseengineering.stackexchange.com/q/311/60\">\n   Why are machine code decompilers less capable than for example those for the CLR and JVM?\n  </a>\n </p>\n <p>\n  It may also be the case that the target doesn’t use any classes but consists only of standalone functions, each one doing its own job.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 1, 2021 at 23:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}