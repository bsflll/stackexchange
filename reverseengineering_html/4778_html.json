{
    "title": "How to find a login packet structure (client-side only)? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/4778/how-to-find-a-login-packet-structure-client-side-only",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs\n        <a href=\"/help/closed-questions\">\n         details or clarity\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Add details and clarify the problem by\n       <a href=\"/posts/4778/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2014-07-09 07:49:16Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/4778/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  As Google did not yield any results, I decided to ask it here.\n </p>\n <p>\n  I'd like to reverse the login sequence of a game (using gamespy). \nIn this login sequence, first the game uses the gamespy protocol (that can be easily resolved with Aluigi's tool).\n </p>\n <p>\n  After this it sends a network packet to what seems to be a Master Server (This packet not encrypted). \nThen the game (I assume) is looking for an answer from the Master server (a challenge or some infos I don't know). \nThe only problem is that the game's server is not public, so I only have the game's code to work with.\n </p>\n <p>\n  Is that something achievable or should I forget about it? \nI tried to mess around the typical winsocket functions (send, receive...) but apart the Gamespy protocol, I can't find any clues about the packet to the master server (except for the first packet the client sends).\n </p>\n <p>\n  If anyone could help, I'd really appreciate!\n </p>\n <p>\n  Cheers.\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 0,
    "views": "968",
    "tags": [
        "ollydbg",
        "protocol",
        "packet"
    ],
    "user": "Speed",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n If you don't have a way to access a working server, or get some samples of real communication with the server, you need a crystal ball, not reverse-engineering tools.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "john4tech",
            "text": "<html><body><span class=\"comment-copy\">\n See this seems to be achievable. What you need to do is, reverse engineer the login sequence. Next find what kind of response it is expecting from the server. Then, once you have this knowledge, you can create a fake server and return the desired response when the game asks for.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Dominik Antal",
            "text": "<html><body><span class=\"comment-copy\">\n This is what World of Warcraft private servers developers do. They reversed the packet structures too, so you can find some articles about it. You should be able to utilize that knowledge for your purpose. I'ld reverse the client and find out how it handles / builds the packets, then start to analyze them, when are they get sent, what does it contain, etc... Use wireshark, you can write a custom protocol  parser for your packets.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "see ya",
            "text": "<html><body><span class=\"comment-copy\">\n Seems like you'll need to write your own dissector for protocol and then analyze with it .pcap data, gathered by Wireshark. By the way, if your protocol works via https you'll need to extract .pem file in addition to actually decrypt raw packets.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "hololeap",
            "text": "<html><body><span class=\"comment-copy\">\n Apart from what others have said, you might look into using\n <a href=\"http://www.secdev.org/projects/scapy/\" rel=\"nofollow noreferrer\">\n  Scapy\n </a>\n to capture packets beings sent to the server, tweak them, and see what kind of response the server gives.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": []
}