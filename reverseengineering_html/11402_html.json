{
    "title": "IDA Pro: Program parameters",
    "link": "https://reverseengineering.stackexchange.com/questions/11402/ida-pro-program-parameters",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I am currently playing around with simple buffer overflows in a C program and I am trying to understand the program by stepping through it in IDA Pro.\n </p>\n <p>\n  The program takes an argument and writes it into a buffer with\n  <code>\n   strcpy()\n  </code>\n  . I can pass a simple argument like\n  <code>\n   AAAA...\n  </code>\n  to the program in IDA Pro (Debugger->process options) and see how the return address gets overwritten.\n </p>\n <p>\n  What I would like to do now is pass some shellcode as a parameter and see in IDA Pro how the program writes the shellcode in the buffer and overwrites the return address.\n </p>\n <p>\n  In a shell, I would execute something like:\n </p>\n <pre><code>$ ./vuln \\`perl -e 'print \"\\x55\\x89\\xe5...\"'`\n</code></pre>\n <p>\n  or\n </p>\n <pre><code>$ ./vuln \\`cat shellcode.txt`\n</code></pre>\n <p>\n  So my question is: how can I pass non-printable characters as an argument to a program in IDA Pro?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "shellcode"
    ],
    "user": "Jan",
    "time": "Mar 25, 2018 at 19:21",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Is it Linux or Windows ? Which debugger are you using ?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jan",
            "text": "<html><body><span class=\"comment-copy\">\n Its a Linux system and i am using the built-in debugger of IDA. So my debugging process looks like this: opening the program \"vuln\" in IDA (File->open), Debugger->Process options enter \"AAA...\" in the field \"Process parameters\" then hit F9 to run it.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "<html><body><span class=\"comment-copy\">\n You can try and use a shellcode encoder like\n <a href=\"https://code.google.com/p/alpha3/\" rel=\"nofollow noreferrer\">\n  code.google.com/p/alpha3\n </a>\n to encode it in printable characters.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Try using IDC function\n  <code>\n   StartDebugger\n  </code>\n  . You can pass a C-style string (e.g.\n  <code>\n   \"\\x55\\x89\\xe5\"\n  </code>\n  )for program arguments:\n </p>\n <pre><code>***********************************************\n** Launch the debugger\n   arguments:\n        path - path to the executable file.\n        args - command line arguments\n        sdir - initial directory for the process\nfor all args: if empty, the default value from the database will be used\n   returns: -1-failed, 0-cancelled by the user, 1-ok\n   See the important note to the StepInto() function\n\nlong StartDebugger(string path, string args, string sdir);\n</code></pre>\n</div>\n</body></html>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Nov 26, 2015 at 21:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Infinity",
                    "text": "<span class=\"comment-copy\">when I start debuuger using following command idc.StartDebugger(\"/root/Documents/remote_debug/heapoverflow\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0001020304\\x92\\x91\\x04\\x08\", \"\") IDA places hex charcters EFBDBFEF instead of that particular address</span>",
                    "time": null
                },
                {
                    "user": "Infinity",
                    "text": "<span class=\"comment-copy\">I am using remote debugging</span>",
                    "time": null
                }
            ]
        }
    ]
}