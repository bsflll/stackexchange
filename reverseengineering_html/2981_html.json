{
    "title": "What does this Generate_Key_IV assembler routine?",
    "link": "https://reverseengineering.stackexchange.com/questions/2981/what-does-this-generate-key-iv-assembler-routine",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I want to decompress some files, and found some information on how. Apparently they are encrypted with AES 128 in CFB mode, and sometimes compressed using ZLIB. Each file's key and IV is supposedly generated from the file size. This code is supposed to get them:\n </p>\n <pre><code>Generate_Key_IV   proc near\n      mov   eax, [ecx]\n      movzx   edx, ax\n      imul   edx, 9069h\n      shr   eax, 10h\n      add   edx, eax\n      mov   eax, [ecx+4]\n      push   esi                            ; Here file size\n      movzx   esi, ax\n      imul   esi, 4650h\n      shr   eax, 10h\n      add   eax, esi\n      mov   [ecx], edx\n      mov   [ecx+4], eax\n      pop   esi\n      test   edx, edx\n      jnz   short loc_495EA2\n      mov   dword ptr [ecx], 1\nloc_495EA2:\n      test   eax, eax\n      jnz   short loc_495EAD\n      mov   dword ptr [ecx+4], 0FFFFFFFFh\nloc_495EAD:\n      mov   eax, [ecx]\n      shl   eax, 10h\n      add   eax, [ecx+4]\n      retn\nGenerate_Key_IV   endp\n</code></pre>\n <p>\n  I understand that this is in Assembly, but unfortunately I don't have a clue how it works. I could of course learn it, but I expect that that would take a great deal of time, and I don't think I'd use it for much more than figuring out what the above means.\n </p>\n <p>\n  So yeah I'd be really grateful if someone could kind of outline what the above does and generally the method and/or algorithm for getting the key and IV.\n </p>\n <p>\n  This C code was also given, and apparently shows how to use the above:\n </p>\n <pre><code>int __usercall sub_47AFA0<eax>(int a1<eax>, int a2<ebp>, void *a3, size_t a4, __int64 a5)\n{\n  unsigned int v5;  // edi@1\n  unsigned int v6;  // edi@3\n  char v8;          // [sp-1A0h] [bp-1ACh]@2\n  int v9;           // [sp-198h] [bp-1A4h]@1\n  void *v10;        // [sp-194h] [bp-1A0h]@1\n  char v11;         // [sp-190h] [bp-19Ch]@5\n  char v12;         // [sp-140h] [bp-14Ch]@5\n  int v13;          // [sp-40h] [bp-4Ch]@6\n  void *v14;        // [sp-3Ch] [bp-48h]@5\n  char v15;         // [sp-34h] [bp-40h]@2\n  char v16;         // [sp-24h] [bp-30h]@4\n  unsigned int v17; // [sp-14h] [bp-20h]@1\n  char *v18;        // [sp-10h] [bp-1Ch]@1\n  int v19;          // [sp-Ch] [bp-18h]@1\n  int (__cdecl *v20)(int, int); // [sp-8h] [bp-14h]@1\n  signed int v21;   // [sp-4h] [bp-10h]@1\n  int v22;          // [sp+0h] [bp-Ch]@1\n  void *v23;        // [sp+4h] [bp-8h]@1\n  char v24;         // [sp+8h] [bp-4h]@1\n  int v25;          // [sp+Ch] [bp+0h]@1\n\n  v22 = a2;\n  v23 = (void *)v25;\n  v21 = -1;\n  v20 = sub_72CCC6;\n  v19 = a1;\n  v18 = &v24;\n  v17 = (unsigned int)&v22 ^ __security_cookie;\n  v10 = a3;\n  v9 = sub_5657C0(a4);\n  sub_495EC0(a4 * a5, (unsigned __int64)a4 * a5 >> 32);\n  v5 = 0;\n  do\n    *(&v15 + v5++) = Generate_Key_IV((int)&v8);                          ;Generating KEY\n  while ( v5 < 0x10 );\n  v6 = 0;\n  do\n    *(&v16 + v6++) = Generate_Key_IV((int)&v8);                          ;Generating IV\n  while ( v6 < 0x10 );\n  sub_47AC20(&v15, 16, &v16);                          ; AES Routine\n  v21 = 0;\n  sub_433E00(v9, v10, a4);\n  v21 = 1;\n  sub_4799F0(&v11);\n  if ( v14 == &v12 + (-(signed int)&v12 & 0xF) )\n    memset(v14, 0, 4 * v13);\n  return __security_check_cookie((unsigned int)&v22 ^ v17);\n}\n</code></pre>\n <p>\n  I assume that this simply uses the key and IV to decode files using AES. However if it contains anything necessary that I should know then that would also of course be great.\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 1,
    "views": "329",
    "tags": [
        "assembly",
        "c",
        "encryption",
        "decryption"
    ],
    "user": "puggsoy",
    "time": "Oct 30, 2013 at 8:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's a\n  <a href=\"http://bitflipgames.com/2011/08/02/explorations-on-random-numbers-part-4/\" rel=\"nofollow\">\n   Pseudorandom number generator\n  </a>\n  : it's  a simple piece of code that produces values that are hard to predict while not taking too long  to compute. Check the\n  <a href=\"http://en.wikipedia.org/wiki/Pseudorandom_number_generator\" rel=\"nofollow\">\n   Wikipedia article\n  </a>\n  for more informations.\n </p>\n <p>\n  <em>\n   edit\n  </em>\n  : the equivalent C code is something like:\n </p>\n <pre><code>int random(unsigned int *seed)\n{\n  int temp1;\n  int temp2;\n\n  temp1 = (*seed >> 16) + 36969 * (unsigned short)*seed;\n  temp2 = 18000 * (unsigned short)seed[1] + (seed[1] >> 16);\n  *seed = temp1;\n  seed[1] = temp2;\n  if (!temp1) *seed = 1;\n  if (!temp2) seed[1] = -1;\n  return seed[1] + (*seed << 16);\n}\n</code></pre>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Ange",
            "time": "Oct 30, 2013 at 11:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "puggsoy",
                    "text": "<span class=\"comment-copy\">While I appreciate your answer, what I really would prefer is a more specific description of the exact algorithm that the code performs, in such a way that I would be able to port it to some other language.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">@puggsoy The PRNG is a multiply with carry. It's described on <a href=\"https://en.wikipedia.org/wiki/Random_number_generator#Computational_methods\" rel=\"nofollow noreferrer\">Wikipedia's RNG article</a>.</span>",
                    "time": null
                },
                {
                    "user": "puggsoy",
                    "text": "<span class=\"comment-copy\">This looks simple enough. However, I'm a bit confused, shouldn't this produce two values, the key and the IV? If needed I can supply some example values.</span>",
                    "time": null
                }
            ]
        }
    ]
}