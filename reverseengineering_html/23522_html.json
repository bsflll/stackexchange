{
    "title": "Decompiling Python Files: ValueError",
    "link": "https://reverseengineering.stackexchange.com/questions/23522/decompiling-python-files-valueerror",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  So I have this python file and I successfully unpacked its content inside of it we have our file.pyc\nI appended the magic bytes to it so it went from:\n </p>\n <pre><code>E3 00 00 00 00 00 00 00 00 00 00 00 00\n</code></pre>\n <p>\n  to something that looked like this:\n </p>\n <pre><code>42 0D 0D 0A 00 00 00 00 00 00 00 00 E3 00\n</code></pre>\n <p>\n  The magic bytes seem to be correct however when I try to decompile using \"uncompyle6\" i get this:\n </p>\n <pre><code><class 'ValueError'>; bad marshal data (unknown type code)\n</code></pre>\n <p>\n  To solve this I went and tried out \"decompyle3\" however it still returned the same error.\n </p>\n <pre><code>Extra Info:\n[*] Pyinstaller version: 2.1+\n[*] Python version: 37\n[*] Length of package: 21143183 bytes\n[*] Found 66 files in CArchive\n[*] Beginning extraction...please standby\n[+] Possible entry point: pyiboot01_bootstrap\n[+] Possible entry point: pyi_rth_certifi\n[+] Possible entry point: pyi_rth_multiprocessing\n[+] Possible entry point: pyi_rth_pkgres\n[+] Possible entry point: KitsuneSelfbot\n[*] Found 1013 files in PYZ archive\n</code></pre>\n <p>\n  Also Here is the first chunk of bytes from our file.pyc (unedited):\n </p>\n <pre><code>E3 00 00 00 00 00 00 00 00 00 00 00 00 25 00 00 00 40 00 00 00 73 7A 07 00 00 64 00 64 01 6C 00 5A 00 64 00 64 01 6C 01 5A 01 64 00 64 01 6C 02 5A 02 64 00 64 01 6C 03 5A 03 64 00 64 01 6C 04 5A 04 64 00 64 01 6C 05 5A 05 64 00 64 01 6C 06 5A 06 64 00 64 01 6C 07 5A 07 64 00 64 01 6C 08 5A 08 64 00 64 01 6C 09 5A 09 64 00 64 01 6C 0A 5A 0A 64 00 64 01 6C 0B 5A 0B 64 00 64 01 6C 0C 5A 0C 64 00 64 01 6C 0D 5A 0D 64 00 64 01 6C 0E 5A 0E 64 00 64 01 6C 02 5A 02 64 00 64 01 6C 03 5A 03 64 00 64 01 6C 01 5A 01 64 00 64 01 6C 0F 5A 0F 64 00\n</code></pre>\n <p>\n  And then from our future.pyc these are the first bytes\n </p>\n <pre><code>42 0D 0D 0A 00 00 00 00 00 00 00 00 E3 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 00 00 40 00 00 00 F3 D8 00 00 00 64 00 5A 00 64 01 64 02 64 03 64 04 64 05 64 06 64 07 64 08 64 09 64 0A 67 0A 5A 01 64 0B 67 01 65 01 17 00 5A 02 64 0C 5A 03 64 0D 5A 04 64 0E 5A 05 64 0F 5A 06 64 10 5A 07 64 11 5A 08 64 12 5A 09 64 13 5A 0A 64 14 5A 0B 64 15 5A 0C 47 00 64 16 64 17 84 00 64 17 83 02 5A 0D 65 0D 64 18 64 19 65 03 83 03 5A 0E 65 0D 64 1A 64 1B 65 04 83 03 5A 0F 65 0D 64 1C 64 1D 65 05 83 03 5A 10 65 0D 64 1E 64 1D 65 06 83 03\n</code></pre>\n <p>\n  I also tried unpacking future.pyc however it also returned this same error:\n </p>\n <pre><code><class 'ValueError'>; bad marshal data (unknown type code)\n</code></pre>\n <p>\n  Any help at all would be appreciated :)\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "6k",
    "tags": [
        "tools",
        "python",
        "executable",
        "decompile",
        "byte-code"
    ],
    "user": "Jimmy Hankey",
    "time": "Mar 25, 2020 at 6:35",
    "comments": [
        {
            "user": "Çayiçen",
            "text": "<html><body><span class=\"comment-copy\">\n So what happens if we change\n <a href=\"https://reverseengineering.stackexchange.com/users/31508/jimmy-hankey\">\n  Jimmy Hankey\n </a>\n it like below ? with open(destName + '.pyc', 'wb') as pycFile: pycFile.write(pycHeader) # Write pyc magic pycFile.write(b'\\0' * 16) pycFile.write(data) Thanks so much for your entry.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  [Disclaimer: I'm the author of PyInstaller Extractor].\n </p>\n <p>\n  PyInstaller Extractor has been updated to v2.0 which includes supports for Python 3.7 and 3.8. Moreover it automatically fixes the header of extracted pyc's, manual fixing of the header is not needed anymore.\n </p>\n <p>\n  The answer below no longer applies if you use the\n  <a href=\"https://github.com/extremecoders-re/pyinstxtractor\" rel=\"nofollow noreferrer\">\n   latest version\n  </a>\n  of the tool.\n </p>\n <hr/>\n <p>\n  The cause of the error is because the tool hasn't been updated to support Python versions >= 3.7. Now coming to the actual reason, Python 3.7 and above has a 16 byte header in contrast to Python versions 3.3-3.6.\n </p>\n <p>\n  Quoting\n  <a href=\"https://www.python.org/dev/peps/pep-0552/#specification\" rel=\"nofollow noreferrer\">\n   PEP 552\n  </a>\n  ,\n </p>\n <blockquote>\n  <p>\n   <strong>\n    The pyc header currently consists of 3 32-bit words. We will expand it\n  to 4\n   </strong>\n   . The first word will continue to be the magic number, versioning\n  the bytecode and pyc format. The second word, conceptually the new\n  word, will be a bit field. The interpretation of the rest of the\n  header and invalidation behavior of the pyc depends on the contents of\n  the bit field.\n  </p>\n </blockquote>\n <p>\n  (Emphasis mine)\n </p>\n <p>\n  Currently you're adding a 12 byte header which needs to increased to 16 as shown below.\n </p>\n <pre><code>42 0D 0D 0A 00 00 00 00 00 00 00 00 00 00 00 00\n</code></pre>\n <p>\n  Similarly, the header of\n  <em>\n   future.pyc\n  </em>\n  and all the files inside the\n  <em>\n   pyz__extracted\n  </em>\n  directory also needs to be fixed.\n </p>\n <p>\n  Alternatively, as a temporary workaround until the tool is updated, you can edit\n  <em>\n   pyinstxtractor.py\n  </em>\n  to make sure it writes a 16 byte header.\n </p>\n <h3>\n  Original code in\n  <em>\n   pyinstxtractor.py\n  </em>\n </h3>\n <pre><code>with open(destName + '.pyc', 'wb') as pycFile:\n    pycFile.write(pycHeader)      # Write pyc magic\n    pycFile.write(b'\\0' * 4)      # Write timestamp\n    if self.pyver >= 33:\n        pycFile.write(b'\\0' * 4)  # Size parameter added in Python 3.3\n    pycFile.write(data)\n</code></pre>\n <h3>\n  Patched code in\n  <em>\n   pyinstxtractor.py\n  </em>\n </h3>\n <pre><code>with open(destName + '.pyc', 'wb') as pycFile:\n    pycFile.write(pycHeader)      # Write pyc magic\n    pycFile.write(b'\\0' * 12)\n    pycFile.write(data)\n</code></pre>\n</div>\n</body></html>",
            "votes": "2",
            "user": "0xec",
            "time": "Mar 26, 2020 at 7:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}