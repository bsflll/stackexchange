{
    "title": "Variable location address",
    "link": "https://reverseengineering.stackexchange.com/questions/25801/variable-location-address",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is variable in data section:\n </p>\n <pre><code>.data:00427000 dword_427000    dd 64h\n</code></pre>\n <p>\n  Base address of code is:\n </p>\n <pre><code>.text:00411000 ; Segment type: Pure code\n</code></pre>\n <p>\n  How to calculate actual address and location in memory of this variable, for to usage with C++ OpenProcess and ReadProcessMemory?\n </p>\n <p>\n  Thanks in advance.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "253",
    "tags": [
        "c++",
        "disassemblers"
    ],
    "user": "black4joss",
    "time": "Sep 2, 2020 at 18:31",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n This isnt reversing related use something like OpenProcess->ReadProcessMemory(GetModuleAddress+rva)\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "black4joss",
            "text": "<html><body><span class=\"comment-copy\">\n I did a bit confused,  right variable location rva is 0x00027000.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n look for my answer in this thread for  a basic idea in powershell\n <a href=\"https://reverseengineering.stackexchange.com/questions/15728/dumping-memory-to-raw-file\" title=\"dumping memory to raw file\">\n  reverseengineering.stackexchange.com/questions/15728/â€¦\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If the ASLR isn't enabled for the module, and it's loaded at the address of 0x400000 this is as simply as\n </p>\n <pre><code>DWORD address = 0x427000;\nReadProcessMemory(handle, (void*)address, &value, sizeof(value), NULL);\n</code></pre>\n <p>\n  However if the ASLR is enabled (or the process just isn't mapped to memory starting at 0x400000) you need to get base address of the module. I assume you aren't part of the process (because you want to use\n  <code>\n   ReadProcessMemory\n  </code>\n  ) therefore you can't call\n  <code>\n   GetModuleHandle\n  </code>\n  , because the function allows to obtain the handle only for modules loaded in the calling process.\n </p>\n <p>\n  The easiest way to get external process module base that comes to my mind is via the\n  <code>\n   TlHelp32\n  </code>\n  functions and could look like this:\n </p>\n <pre><code>DWORD GetModuleHandleExternal(DWORD pid, const wchar_t* module)\n{\n    DWORD base = 0;\n    HANDLE handle = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);\n    MODULEENTRY32 entry;\n    entry.dwSize = sizeof(MODULEENTRY32);\n    while(Module32First(handle, &entry))\n    {\n        if (!wcscmp(entry.szModule, module))\n        {\n            base = (DWORD)entry.modBaseAddr;\n            break;\n        }\n    }\n    CloseHandle(handle);\n    return base;\n}\n</code></pre>\n <p>\n  Then you can just simply call\n </p>\n <pre><code>HANDLE handle = OpenProcess(PROCESS_VM_READ, FALSE, pid);\nDWORD base = GetModuleHandleExternal(pid, L\"module.exe\");\nDWORD address = base + 0x27000;\nDWORD value = 0;\nReadProcessMemory(handle, (void*)address, &value, sizeof(value), NULL);\nCloseHandle(handle);\n</code></pre>\n</div>\n</body></html>",
            "votes": "1",
            "user": "morsisko",
            "time": "Sep 3, 2020 at 14:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}