{
    "title": "How to load library defined symbols to a specified location?",
    "link": "https://reverseengineering.stackexchange.com/questions/8166/how-to-load-library-defined-symbols-to-a-specified-location",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The test is on Ubuntu 12.04, 32-bit, with\n  <code>\n   gcc\n  </code>\n  4.6.3.\n </p>\n <p>\n  Basically I am doing some binary manipulation work on ELF binaries, and what I have to do now is to assemble a assembly program and guarantee the libc symbols are loaded to a predefined address by me.\n </p>\n <p>\n  Let me elaborate it in an simple example.\n </p>\n <p>\n  Suppose in the original code, libc symbols\n  <code>\n   stdout@GLIBC_2.0\n  </code>\n  is used.\n </p>\n <pre><code>#include <stdio.h>\nint main() {\n    FILE* fout = stdout;\n    fprintf( fout, \"hello\n\" );\n}\n</code></pre>\n <p>\n  When I compile it and check the symbol address using these commands:\n </p>\n <pre><code>gcc main.c\nreadelf -s a.out | grep stdout\n</code></pre>\n <p>\n  I got this:\n </p>\n <pre><code>0804a020     4 OBJECT  GLOBAL DEFAULT   25 stdout@GLIBC_2.0 (2)\n0804a020     4 OBJECT  GLOBAL DEFAULT   25 stdout@@GLIBC_2.0\n</code></pre>\n <p>\n  and the\n  <code>\n   .bss\n  </code>\n  section is like this:\n </p>\n <pre><code>  readelf -S a.out | grep bss\n  [25] .bss              NOBITS          0804a020 001014 00000c 00  WA  0   0 32\n</code></pre>\n <p>\n  Now what I am trying to do is to load the\n  <code>\n   stdout\n  </code>\n  symbol in a predefined address, so I did this:\n </p>\n <pre><code>echo \"stdout = 0x804a024;\" > symbolfile\ngcc -Wl,--just-symbols=symbolfile  main.c\n</code></pre>\n <p>\n  Then when I check the\n  <code>\n   .bss\n  </code>\n  section and symbol\n  <code>\n   stdout\n  </code>\n  , I got this:\n </p>\n <pre><code> [25] .bss              NOBITS          0804a014 001014 000008 00  WA  0   0  4\n\n\n4: 0804a024     0 NOTYPE  GLOBAL DEFAULT  ABS stdout\n49: 0804a024     0 NOTYPE  GLOBAL DEFAULT  ABS stdout\n</code></pre>\n <ol>\n  <li>\n   <p>\n    It seems that I didn't successfully load the symbol\n    <code>\n     stdout@@GLIBC_2.0\n    </code>\n    , but just a wired\n    <code>\n     stdout\n    </code>\n    . (I tried to write\n    <code>\n     stdout@@GLIBC_2.0\n    </code>\n    in\n    <code>\n     symbolfile\n    </code>\n    , but it can't compile... )\n   </p>\n  </li>\n  <li>\n   <p>\n    It seems that as I didn't make it, the beginning address of\n    <code>\n     .bss\n    </code>\n    section has also changed, which makes the address of\n    <code>\n     stdout\n    </code>\n    symbol in a non-section area. During runtime, it throws a segmentation fault when loading from\n    <code>\n     0x804a024\n    </code>\n    .\n   </p>\n  </li>\n </ol>\n <p>\n  Could anyone help me on how to successfully load the library symbol at a predefined address? Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "862",
    "tags": [
        "assembly",
        "c",
        "elf",
        "dynamic-linking"
    ],
    "user": "lllllllllllll",
    "time": "Feb 5, 2015 at 22:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  in the code (or in the linker command file) create a memory name (say .stdio) and give it a specific address.  then write a section statement: '.stdio' and list the 'stdio.text'  will then be the first thing in the memory .stdio section.  The linker command file can also have a global name at the .stdio section, that can be referenced from within a program.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "user3629249",
            "time": "Feb 6, 2015 at 2:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}