{
    "title": "Generating a key for a simple algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/15744/generating-a-key-for-a-simple-algorithm",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have this pseudo code:\n </p>\n <pre><code>v5 = serial[6] + serial[0] - serial[7] - serial[2];\nLOBYTE(v5) = serial[1];\nv8 = serial[3] + v5 - serial[4];\nif ( v8 != serial[5] )\n    goto FAIL;\n</code></pre>\n <p>\n  The variable\n  <code>\n   serial[]\n  </code>\n  is an array representing the bytes of the key\n  <code>\n   abcdefgh\n  </code>\n  . Dor example,\n  <code>\n   serial[0] = 0x61\n  </code>\n  . If we assume that\n  <code>\n   serial[5]\n  </code>\n  is\n  <code>\n   0x66\n  </code>\n  (the letter 'f'), how can I calculate the needed key to get a\n  <code>\n   0x66\n  </code>\n  in\n  <code>\n   v8\n  </code>\n  as you can see some calculations are done to decide the possible values of\n  <code>\n   v8\n  </code>\n  .\n </p>\n</div>\n</body></html>",
    "votes": "4",
    "answers": 2,
    "views": "263",
    "tags": [
        "cryptography",
        "math"
    ],
    "user": "0x3h",
    "time": "Jul 4, 2017 at 11:00",
    "comments": [
        {
            "user": "blabb",
            "text": "<html><body><span class=\"comment-copy\">\n i would prefer disasm instead of this pseudo form  from what i see i think the algo might be discarding the sign  bits with movzx  so it would end up with b+ d - e = result so result would be a ie abcdeagh see if it makes sense\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Well, the equation is pretty simple, you say that the hashing is done through the following formula:\n </p>\n <pre><code>v5 = serial[6] + serial[0] - serial[7] - serial[2];\nLOBYTE(v5) = serial[1];\nv8 = serial[3] + v5 - serial[4];\nif ( v8 != serial[5] )\n    goto FAIL;\n</code></pre>\n <p>\n  We can use an SMT-solver, such as Z3 to find out a possible key for these equations:\n </p>\n <pre><code>$> python\nPython 2.7.13 (default, Jan 19 2017, 14:48:08) \n[GCC 6.3.0 20170118] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from z3 import *\n>>> serial0 = BitVec('serial0', 8)\n>>> serial1 = BitVec('serial1', 8)\n>>> serial2 = BitVec('serial2', 8)\n>>> serial3 = BitVec('serial3', 8)\n>>> serial4 = BitVec('serial4', 8)\n>>> serial5 = BitVec('serial5', 8)\n>>> serial6 = BitVec('serial6', 8)\n>>> serial7 = BitVec('serial7', 8)\n>>> v5 = BitVec('v5', 16)\n>>> v8 = BitVec('v8', 16)\n>>> v5 = ((serial6 + serial0 - serial7 - serial2) & 0xff00) + serial1\n>>> v8 = serial3 + v5 - serial4\n>>> s = Solver()\n>>> s.add(v8 == serial5)\n>>> s.check()\nsat\n>>> s.model()\n[serial3 = 0, serial1 = 0, serial4 = 0, serial5 = 0]\n>>> \n>>> s.add(serial1 != 0)\n>>> s.check()\nsat\n>>> s.model()\n[serial1 = 128, serial3 = 172, serial5 = 0, serial4 = 44]\n</code></pre>\n <p>\n  As, I got a degenerated solution, I added the constraint that\n  <code>\n   serial1\n  </code>\n  has to be different from zero. In fact, you can add any constraint as you wish (you may try to force the serials to be within the standard printable ASCII characters if you wish (beware, it may admit no solution!).\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "perror",
            "time": "Jul 3, 2017 at 16:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">thus smt solver also generalised it to b+d -e  = f  so adding a constraint as assert ( &gt; f  0x60 ) should yield 0x61 i think</span>",
                    "time": null
                },
                {
                    "user": "0x3h",
                    "text": "<span class=\"comment-copy\">thanks a lot that's exactly what i need. (sorry i can't accept the answer since the question was submitted before i joined in)</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Hmmm, this article remind me something --&gt; '<a href=\"https://humblesec.wordpress.com/2017/07/05/assemby-to-pseudo-code-manually/\" rel=\"nofollow noreferrer\">Assemby to pseudo-code manually</a>'.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@0x3h in case you did not get my flag message, use \"contact us\" link at the bottom to merge the two accounts.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@0x3h: It was not a negative comment, I was just noticing that you did not sourced the code. I cannot blame you for that, only few people follow these rules nowadays. :-)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  expanding a bit on the answer by perror and my initial hypothesis\n </p>\n <p>\n  the result for the provided input string\n  <strong>\n   \"abcdefgh\"\n  </strong>\n  would result in\n  <strong>\n   \"b+d-e = f\"\n  </strong>\n </p>\n <p>\n  providing constraints for input string z3 indeed returns back\n </p>\n <p>\n  the char\n  <strong>\n   \"a\"\n  </strong>\n  as the first possible model() here is a slightly modified \npython script posted by perror in his answer\n </p>\n <pre><code>:\\>cat z3t.py\nfrom z3 import *\ns0,s1,s2,s3,s4,s5,s6,s7 = BitVecs( 's0 s1 s2 s3 s4 s5 s6 s7', 8)\nv5,v8 = BitVecs ('v5 v8', 16)\nv5 = ((s6 + s0 - s7 - s2) & 0xff00) | s1\nv8 = s3 + v5 - s4\ns = Solver()\ns.add(v8 == s5,s0 == ord('a'),s1 == ord('b'),s2 == ord('c'),s3 == ord('d'))\ns.add(s4 == ord('e'), s5 > 0x60,s6 == ord('g'),s7 == ord('h'))\ns.check()\nprint chr((s.model()[s5]).as_long())\n\n\n:\\>python .\\z3t.py\na\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Jul 4, 2017 at 10:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Yes, I should have restricted to alphanum, you are definitely right and complete in your answer... You deserved to get my vote (I am just a lazy bastard sometimes! :-)).</span>",
                    "time": null
                }
            ]
        }
    ]
}