{
    "title": "IDA stack pointer analysis fails due to \"and\" operation to esp",
    "link": "https://reverseengineering.stackexchange.com/questions/6901/ida-stack-pointer-analysis-fails-due-to-and-operation-to-esp",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm reversing an x86 executable with IDA pro. Here is the beginning of the function causing problems to IDA stack pointer analysis. I'm showing the stack pointer value in the second column:\n </p>\n <pre><code>.text:002C35B0 000                 push    ebp\n.text:002C35B1 004                 mov     ebp, esp\n.text:002C35B3 004                 and     esp, 0FFFFFFF8h\n.text:002C35B6 004                 push    0FFFFFFFFh\n.text:002C35B8 008                 push    offset sub_75B75D\n.text:002C35BD 00C                 mov     eax, large fs:0\n</code></pre>\n <p>\n  In the third line, the\n  <code>\n   and\n  </code>\n  is not changing the\n  <code>\n   esp\n  </code>\n  value for IDA and I suppose this is the reason for having unknown\n  <code>\n   esp\n  </code>\n  offsets throughout the function. I have the following questions:\n </p>\n <ul>\n  <li>\n   what is the purpose of this operation? Why not a normal\n   <code>\n    sub\n   </code>\n   or\n   <code>\n    add\n   </code>\n   here?\n  </li>\n  <li>\n   what is the value of the stack pointer after that?\n  </li>\n </ul>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "mbrt",
    "time": "Dec 28, 2014 at 10:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  <code>\n   and esp, not 7\n  </code>\n  aligns the stack pointer (down) to a multiple of eight, by computing the moral equivalent of\n  <code>\n   esp -= esp % 8;\n  </code>\n  (which would require more instructions). You can manually change the simulated stack pointer by hitting Alt+K on the instruction and entering -4.\n </p>\n <p>\n  SP-related things in IDA tend to be a bit confusing because you never really know whether you are working in the realm of IDA's virtual inverted stack (as evidenced by the positive stack pointer offsets shown in the disassembly) or not... So you have to experiment, see what IDA does when you enter certain values.\n </p>\n <p>\n  Also, most things regarding simulation, constant/parameter propagation (\n  <code>\n   this\n  </code>\n  pointers!) and so on seem to have been reserved for the decompiler product, which might explain why IDA itself has seen little progress in that regard over the last decade.\n </p>\n <p>\n  Be that as it may, the small difference of -4 is probably not the reason you're seeing bad stack offsets. IDA sometimes gets confused when there are function chunks involved, or multiple code paths involving alloca() and so on (especially if the function epilogue is not located in the main chunk).\n </p>\n <p>\n  If you're still having problems you could put a bigger snippet on pastebin and post a link here. Also, if you have an active support plan then you could contact Hex-Rays; when I had a problem with stack pointers in a big IDB imported from an older version of IDA I sent in the IDB and they fixed it for me...\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "DarthGizka",
            "time": "Dec 28, 2014 at 11:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mbrt",
                    "text": "<span class=\"comment-copy\">Got it. As you said, this does not solve the problem of invalid esp offsets, so there must be something else, but at least I have understood the meaning of the <code>and</code>. This was the purpose of this question, therefore the answer is accepted for me.</span>",
                    "time": null
                }
            ]
        }
    ]
}