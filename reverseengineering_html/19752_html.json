{
    "title": "Windbg Break Points",
    "link": "https://reverseengineering.stackexchange.com/questions/19752/windbg-break-points",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to set a break point when a specific module address space is being overwritten? I need to specify this by module name not address space\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "103",
    "tags": [
        "windbg",
        "hooking"
    ],
    "user": "user26171",
    "time": "Oct 29, 2018 at 14:33",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<html><body><span class=\"comment-copy\">\n Hi and welcome to RE.SE. By writing\n <i>\n  address space\n </i>\n you mean a vast\n <i>\n  range\n </i>\n of addresses? Given you have a limited number of debug registers, this may be hard to accomplish outside of some kind of binary instrumentation or even emulation framework.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  i cant understand what your usecase is \nassuming you have some  code like this running and you want to break when some thing is written to some space  you can use ba (hardware assisted breakpoint )\n </p>\n <p>\n  code for demo it writes randomly the @ sign in a space of 0x2000 bytes\n </p>\n <pre><code>#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nchar randritebuff[0x2000];\nint main (void) {\n    srand( (unsigned int)time(nullptr));\n    for(;;) {\n    int writeaddr = ((rand() % 0x1fff)+1);\n    randritebuff[writeaddr] = 0x40;\n    }\n}\n</code></pre>\n <p>\n  assuming you are interested in seeing only when it writes at the 1337th\n  \n\n  byte from the start of buffer\n </p>\n <p>\n  you can employ a breakpoint with module names as well as symbols for the buffer if they are available in windbg like this\n </p>\n <pre><code>00eb102e c682d198ef0040  mov byte ptr randrite!randritebuff+0x1 (00ef98d1)[edx],40h ds:0023:00efacd9=00\n\n0:000> ba w1 randrite!randritebuff+0x1337  <<<<<<<<<<<<<<<<<<<<<< \n0:000> bl\n     0 e Disable Clear  00efac07 w 1 0001 (0001)  0:**** randrite!randritebuff+0x1337\n\n0:000> ? randrite!randritebuff\nEvaluate expression: 15702224 = 00ef98d0\n\n0:000> ? 00ef98d0+1337\nEvaluate expression: 15707143 = 00efac07\n\n0:000> g\nBreakpoint 0 hit\neax=00000003 ebx=7ffdf000 ecx=00007333 edx=00001336 << \na hardware breakpoint break with eip @ + 1  (00eb102e + sizeof(c682d198ef0040))\n\n00eb1035 << ebef            jmp     randrite!main+0x16 (00eb1026)\n</code></pre>\n <p>\n  a screenshot below\n  <a href=\"https://i.sstatic.net/nJ57R.png\" rel=\"nofollow noreferrer\">\n   <img alt=\"enter image description here\" src=\"https://i.sstatic.net/nJ57R.png\"/>\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "blabb",
            "time": "Oct 29, 2018 at 18:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}