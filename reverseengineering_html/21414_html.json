{
    "title": "ELF x86 - Why is return address pushed twice?",
    "link": "https://reverseengineering.stackexchange.com/questions/21414/elf-x86-why-is-return-address-pushed-twice",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I reverse an ELF x86, and I would like to understand why the return address is pushed again on the stack? It should be already present there.\n </p>\n <pre><code>main:\nlea    ecx, [esp+0x4 {argc}]\nand    esp, 0xfffffff0\npush   dword [ecx-0x4 {__return_addr}] {var_4}\npush   ebp, {var_8}\nmov    ebp, esp\npush   edi {var_c}\npush   ecx {argc} {var_10}\nsub    esp, 0xb0\nmov    eax, dword [ecx+0x4 {argv}]\nmov    dword [ebp-0x9c {var_a4}], eax\nmov    eax, dword [gs:0x14]\nmov    dword [ebp-0xc {var_14}], eax\nxor    eax, eax {0x0}\ncmp    dword [ecx {argc}], 0x2\nje     0x80485ae\n...\n</code></pre>\n</div>\n</body></html>",
    "votes": "3",
    "answers": 1,
    "views": "457",
    "tags": [
        "disassembly",
        "x86",
        "elf",
        "stack"
    ],
    "user": "jukebox",
    "time": "Jun 4, 2019 at 15:14",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<html><body><span class=\"comment-copy\">\n In which lines is this happening?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n I guess this is on the\n <code>\n  push [ecx-0x4] var_4\n </code>\n . As we are in x86-32\n <code>\n  eip\n </code>\n is not directly callable.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<html><body><span class=\"comment-copy\">\n What compiler is giving this code ? It looks like it is changing the return address of the function from the inside of the function. It is a breach in all the ABI that I know, so it must be either a very specific function (as\n <code>\n  __libc_start_main()\n </code>\n ) or an obfuscation technique to workaround recursive traversal disassembly technique.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It\n  <strong>\n   was\n  </strong>\n  present on the stack before\n  <code>\n   and esp, 0xfffffff0\n  </code>\n  instruction that aligns the stack to 16 bytes. This instruction doesn't erase the data that was previously at\n  <code>\n   esp\n  </code>\n  (so\n  <code>\n   ecx-4\n  </code>\n  still points to the return address), but stack pointer points now to possibly different value than at the begining of the function. So there is a need to push the return value (\n  <code>\n   [ecx-4]\n  </code>\n  ) on the stack so that\n  <code>\n   esp\n  </code>\n  points to the return address instead of some garbage data.\n </p>\n <p>\n  For instance, assume that previous\n  <code>\n   esp\n  </code>\n  value was\n  <code>\n   0x11111118\n  </code>\n  . Then the function return address is located at\n  <code>\n   esp\n  </code>\n  (i.e. equals\n  <code>\n   [esp]\n  </code>\n  ). But after the\n  <code>\n   and\n  </code>\n  operation,\n  <code>\n   esp\n  </code>\n  now equals\n  <code>\n   0x11111110\n  </code>\n  , so the function return address is at\n  <code>\n   esp+8\n  </code>\n  address, which is not on the stack (actually\n  <strong>\n   below\n  </strong>\n  it) and\n  <code>\n   esp\n  </code>\n  now points to some other data, which definitely isn't the function return address. But we know that\n  <code>\n   ecx-4\n  </code>\n  points to that address (since\n  <code>\n   ecx\n  </code>\n  =\n  <code>\n   0x11111118+4\n  </code>\n  =\n  <code>\n   0x1111111C\n  </code>\n  ), so we push\n  <code>\n   [ecx-4]\n  </code>\n  on the stack, so that\n  <code>\n   esp\n  </code>\n  now points to it.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "bart1e",
            "time": "Jun 4, 2019 at 12:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}