{
    "title": "Windows PKZIP encryption / compression calls might be altering password?",
    "link": "https://reverseengineering.stackexchange.com/questions/8468/windows-pkzip-encryption-compression-calls-might-be-altering-password",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have a DLL with the following code which decrypts and decompresses an old PKZip 2.0 file...\n </p>\n <pre><code>basic_string<char,std::char_traits<char>,std::allocator<char> > basic_string<char,std::char_traits<char>,std::allocator<char> >3;\nbasic_string<char,std::char_traits<char>,std::allocator<char> >* ptr3 = <Module>.to_string(&basic_string<char,std::char_traits<char>,std::allocator<char> >3, sPassword);\n<Module>.addUNZIP_Decrypt(<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char> >.c_str(ptr3));\n<Module>.addUNZIP_Overwrite(11);\n<Module>.addUNZIP_InstallCallback(<Module>.__unep@?zip_callback@?A0xb8f18585@@$$FYGHFFPAD@Z);\n<Module>.addUNZIP_View(0);\n</code></pre>\n <p>\n  ptr3 is the pointer to the password string.  What's strange is that the prior line has the password, but the password doesn't work when I try to unzip the file manually with 7Zip, WinRAR, or PKZip.  ...yet the program does it successfully.\n </p>\n <p>\n  Is it possible the ZIP/UNZIP calls are modifying the password (like adding an unprintable 00 to the end or something)?\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "201",
    "tags": [
        "windows",
        "decompilation",
        "dll",
        "decompress"
    ],
    "user": "youcantexplainthat",
    "time": "Mar 15, 2015 at 5:05",
    "comments": [
        {
            "user": "0xec",
            "text": "<html><body><span class=\"comment-copy\">\n You can use a tool like\n <i>\n  <a href=\"http://aluigi.altervista.org/mytoolz.htm#signsrch\" rel=\"nofollow noreferrer\">\n   signsrch\n  </a>\n </i>\n on the executable, to get further insights on the compresion/encryption algorithm used.\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n Does that password contain any unusual characters, or is it limited to a usual set of alphanumerics?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "youcantexplainthat",
            "text": "<html><body><span class=\"comment-copy\">\n The password is 10 latin alpha-numeric chars.  I tried running a brute force on the archives, but it doesn't recognize the password, or anything similar.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <blockquote>\n  <p>\n   Is it possible the ZIP/UNZIP calls are modifying the password\n  </p>\n </blockquote>\n <p>\n  Yes, it's possible that\n  <code>\n   <Module>.addUNZIP_Decrypt()\n  </code>\n  modifies the password, or draws a giraffe on your screen, or plays The Star Spangled Banner out through your speakers.\n </p>\n <p>\n  You need to reverse engineer the function to determine what it does.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 15, 2015 at 15:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "youcantexplainthat",
                    "text": "<span class=\"comment-copy\">This module is Stephen Darlington's original PKZip library 0.69.  I doubt he's drawing a giraffe.  Let me see if the source is public...</span>",
                    "time": null
                },
                {
                    "user": "youcantexplainthat",
                    "text": "<span class=\"comment-copy\">Sadly, it looks like the source is still private despite being written in 1995.  In any case, I cannot imagine that the addZip module modifies the password.  I'm leaning towards the possibility that the file format is somehow not compatible with modern compression programs.</span>",
                    "time": null
                }
            ]
        }
    ]
}