{
    "title": "Obfuscating jar already obfuscated [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8479/obfuscating-jar-already-obfuscated",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed.\n        </b>\n        This question is\n        <a href=\"/help/closed-questions\">\n         off-topic\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       Questions asking for help\n       <b>\n        reverse-engineering a specific system\n       </b>\n       are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2015-03-20 06:40:37Z\">\n        10 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8479/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  I'm wondering what happens if we try to run a jar through Proguard that has already been obfuscated by another obfuscator or Proguard itself? Will the obfuscated class names and methods names be changed by the new obfuscator?\n </p>\n <p>\n  For example, I would like to have those names renamed to something simpler such as\n  <code>\n   a\n  </code>\n  or\n  <code>\n   aab\n  </code>\n  rather than unicode characters. Will another obfuscator change the names?\n </p>\n <p>\n  <img alt=\"enter image description here\" src=\"https://i.sstatic.net/LupVn.jpg\"/>\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "obfuscation",
        "java"
    ],
    "user": "Nederealm",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<html><body><span class=\"comment-copy\">\n Why don't you just try it out?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "diff",
            "text": "<html><body><span class=\"comment-copy\">\n Proguard is used on Java code, so you'd have to run a JAR through JAD (or similar decompiler) first before you could even attempt this.  Assuming nothing fails in this process (which depends on the obfuscator) you could reprocess the decompiled code with proguard, though I'm unsure this would result in the desired \"simpler\" names.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It's reasonable to assume ProGuard (or any other alike software)\n  <em>\n   cannot tell\n  </em>\n  if a name is deliberately unclear or not. If it could, it would be reversible -- create 'sensible' names for those that it deemed unclear.\n </p>\n <p>\n  (Which would be a useful program. I have seen \"plain\" code with such bad names that it already looked quite obfuscated. Some of it was my own. My younger self did not think my older self would ever need to understand his code.)\n </p>\n <p>\n  Even if obfuscating 'again' may change the names (again), it will not add an entire new \"level of obfuscation\".\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Jongware",
            "time": "Mar 16, 2015 at 22:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nederealm",
                    "text": "<span class=\"comment-copy\">Thanks for pointing that out. I've edited the question to include a specific example. That was basically my question. I would like to achieve the desired effect of changing the class names in the jar to use ASCII rather than UTF-8 chars in the names.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  It all depends on what the obfuscator does. Proguard is a relatively weak obfuscator - it basically only renames things and strips out unused methods. So running Proguard on the same application twice is pretty much useless, but it won't cause any ill effects.\n </p>\n <p>\n  If you use a stronger obfuscator however, things will almost certainly break. For example, Allatori and Stringer both encrypt constant strings with a key derived from the class and method name of the caller. At runtime, the string decrpytion function uses various hacks to get the name of the caller and then decrypts the string with that.\n </p>\n <p>\n  If you then run Proguard on the obfuscated application, Proguard will blindly rename the classes, meaning that when the string decryption functions are called, the decryption key will be incorrect and the application will get garbage strings at best or much more likely just crash.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "Antimony",
            "time": "Mar 17, 2015 at 2:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nederealm",
                    "text": "<span class=\"comment-copy\">Last paragraph assumes reflection is being applied to load classes dynamically?</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">@Nederealm No the reflection is used by the string decryption functions. Presumably it's intended to stop people from decrypting the strings by just calling the functions blindly though it's easily circumvented.</span>",
                    "time": null
                }
            ]
        }
    ]
}