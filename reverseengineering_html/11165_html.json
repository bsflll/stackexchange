{
    "title": "how do I debug full screen applications",
    "link": "https://reverseengineering.stackexchange.com/questions/11165/how-do-i-debug-full-screen-applications",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I need to debug an old (1999) full screen application. When I window the application and attach olly the program crashes.\n </p>\n <p>\n  I have heard of remote debugging. Would running the program on a VM and then attaching windbg to the application on the remote machine do the trick?\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ollydbg",
        "virtual-machines",
        "remote"
    ],
    "user": "RNs_Ghost",
    "time": "Oct 24, 2015 at 0:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  you can use windbg like an user-mode debugger from a kernel connection\n </p>\n <p>\n  open the vm\n  \n\n  install windbg in vm\n  \n\n  install the full screen game in vm\n </p>\n <p>\n  connect the vm to a kernel debugger in host\n </p>\n <p>\n  execute ntsd -d {the fullscreen app in vm}\n </p>\n <p>\n  the kernel debugger in host will kick to life as a plain user-mode debugger debugging the app ( the syntax for continuing is kinda tricky refer windbg manual for syntax of using ntsd -d )\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "blabb",
            "time": "Oct 25, 2015 at 8:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I usually do one of the following when dealing with full screen software:\n </p>\n <ol>\n  <li>\n   As blabb said setting up a remote debugger is an option, although I usually find it a bit slow and annoying to use and set up.\n  </li>\n  <li>\n   Occasionally there's a configuration option to switch to windowed mode. Its not always there but when it is its the best choice.\n  </li>\n  <li>\n   Since you are already debugging and reversing it, you can always hook it's fullscreen request API (usually\n   <code>\n    ChangeDisplaySettings\n   </code>\n   or\n   <code>\n    ChangeDisplaySettingsEx\n   </code>\n   on Windows).\n  </li>\n  <li>\n   If you can't hook or find the fullscreen API (if the software has anti-debugging it might be kind of a chicken and egg problem), you can always call\n   <code>\n    ChangeDisplaySettings\n   </code>\n   yourself and disable fullscreen mode after getting a window handle for the program's fullscreen window.\n  </li>\n  <li>\n   Or you could simply use one of many existing tools for exactly that, they're covered in this SO question:\n   <a href=\"https://superuser.com/questions/318748/force-fullscreen-games-to-in-window-mode\">\n    https://superuser.com/questions/318748/force-fullscreen-games-to-in-window-mode\n   </a>\n  </li>\n </ol>\n <p>\n  Hope that helps :)\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Community",
            "time": "Mar 20, 2017 at 10:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Another option is to run the game in a VM configured to use 2 virtual monitors. If you're lucky, the game will display full-screen in one of the virtual monitors, and you can interact with OllyDbg via the other virtual monitor.</span>",
                    "time": null
                }
            ]
        }
    ]
}