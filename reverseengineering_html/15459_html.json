{
    "title": "How can I determine if NAND blocks are good blocks?",
    "link": "https://reverseengineering.stackexchange.com/questions/15459/how-can-i-determine-if-nand-blocks-are-good-blocks",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I'm trying to rescue some data from our hardware. On the board I have a pair of Samsung k9f4g08u0d NAND chips. Each chip has been dumped to include every block, including the spare areas. If I invert every byte on the dumps and interleave both chips (such that the output is\n  <code>\n   chipA[0],chipB[0],chipA[1],chipB[1] ...\n  </code>\n  etc) I can see that there is ascii text throughout the dump. Based on the data sheets for 1 chip I know the following:\n </p>\n <ul>\n  <li>\n   Blocks: 4096 per device\n  </li>\n  <li>\n   Pages: 64 per block\n  </li>\n  <li>\n   Page Size: (2K data + 64 spare) = 2112 bytes\n  </li>\n </ul>\n <p>\n  But because the chips are interleaved together there are actually (4K data + 128 spare) = 4224 bytes of data per page.\n </p>\n <p>\n  The spare area is Adjacent, rather than separate, so each section of 512 bytes of data in a page is immediately followed by 16 bytes of spare data (or out-of-band: OOB).\n </p>\n <pre>\nAdjacent layout:\n+-----+----+-----+----+-----+----+-----+----+-----+----+-----+----+-----+----+-----+----+\n| 512 | 16 | 512 | 16 | 512 | 16 | 512 | 16 | 512 | 16 | 512 | 16 | 512 | 16 | 512 | 16 |\n+--^--+-+--+--^--+-+--+--^--+-+--+--^--+-+--+--^--+-+--+--^--+-+--+--^--+-+--+--^--+-+--+\n   |    |     |    |     |    |     |    |     |    |     |    |     |    |     |    |\n   +----+     +----+     +----+     +----+     +----+     +----+     +----+     +----+</pre>\n <pre>\nSeparate layout:\n+-----+-----+-----+-----+-----+-----+-----+-----+----+----+----+----+----+----+----+----+\n| 512 | 512 | 512 | 512 | 512 | 512 | 512 | 512 | 16 | 16 | 16 | 16 | 16 | 16 | 16 | 16 |\n+--^--+--^--+--^--+--^--+--^--+--^--+--^--+--^--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+\n   |     |     |     |     |     |     |     |    |    |    |    |    |    |    |    |\n   +----------------------------------------------+    |    |    |    |    |    |    |\n         |     |     |     |     |     |     |         |    |    |    |    |    |    |\n         +---------------------------------------------+    |    |    |    |    |    |\n               |     |     |     |     |     |              |    |    |    |    |    |\n               +--------------------------------------------+    |    |    |    |    |\n                     |     |     |     |     |                   |    |    |    |    |\n                     +-------------------------------------------+    |    |    |    |\n                           |     |     |     |                        |    |    |    |\n                           +------------------------------------------+    |    |    |\n                                 |     |     |                             |    |    |\n                                 +-----------------------------------------+    |    |\n                                       |     |                                  |    |\n                                       +----------------------------------------+    |\n                                             |                                       |\n                                             +---------------------------------------+</pre>\n <p>\n  When only analyzing the spare area, I can see the first 3 bytes seem to increment. I think the first two bytes are the block number and I believe the 3rd byte is the page number. After the \"page number\" value is\n  <code>\n   0x3F\n  </code>\n  it resets to\n  <code>\n   0x00\n  </code>\n  and the \"block number\" increments. I know nothing about what the remaining 13 bytes are but I assume some, if not all, are ECC bytes.\n </p>\n <p>\n  The problem is there are some blocks that appear multiple times in the dump. For example, there are three sections with \"block number\" of\n  <code>\n   0x2C47\n  </code>\n  and I know this is probably because of wear leveling with NAND; however, I don't know how to read the pages/blocks that are good so I can mount/extract it. It seems to follow no standard, and believe me - I have searched a lot haha. The system was running QNX6.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 1,
    "views": "501",
    "tags": [
        "memory",
        "hardware",
        "dumping",
        "flash",
        "qnx"
    ],
    "user": "PaulS",
    "time": "May 31, 2017 at 23:06",
    "comments": [
        {
            "user": "yaspr",
            "text": "<html><body><span class=\"comment-copy\">\n Check this out :\n <a href=\"http://www.linux-mtd.infradead.org/tech/mtdnand/x144.html\" rel=\"nofollow noreferrer\">\n  linux-mtd.infradead.org/tech/mtdnand/x144.html\n </a>\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<html><body><span class=\"comment-copy\">\n @yaspr I think that link this only applies to MTD-based FSes. QNX probably uses another approach.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I don't know if it applies exactly but the following\n  <a href=\"http://qnx.symmetry.com.au/resources/whitepapers/qnx_flash_memory_for_embedded_paper_RIM_MC411.65.pdf\" rel=\"nofollow noreferrer\">\n   document\n  </a>\n  from QNX suggests that:\n </p>\n <ul>\n  <li>\n   spare is made up of \"sequence #\", \"file ID\", \"offset\", \"CRC\" and \"ECC\"\n  </li>\n  <li>\n   there are special blocks that contains wear-levelling information such as bad blocks, erase count and file system hierarchy\n  </li>\n </ul>\n <p>\n  Thus it is possible the information you are looking for is not in the spare area but there is a dedicated block. This\n  <a href=\"http://www.qnx.com/developers/docs/6.3.2/neutrino/sys_arch/fsys.html#ETFS\" rel=\"nofollow noreferrer\">\n   page\n  </a>\n  suggests that could be the ETFS filesystem which is transaction based.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Amaury Pouly",
            "time": "Sep 21, 2017 at 13:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}