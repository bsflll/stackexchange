{
    "title": "IDA PRO Structures Defining negative offset -4 -8 offset repair asm Hex-Rays",
    "link": "https://reverseengineering.stackexchange.com/questions/3331/ida-pro-structures-defining-negative-offset-4-8-offset-repair-asm-hex-rays",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  How do I fix structures in IDA PRO so they show up properly in Hex-Rays plugin (C decompiler).\n </p>\n <p>\n  Similar question to: (But the solution doesn't work for me)\n  \n\n  <a href=\"https://reverseengineering.stackexchange.com/questions/2991/struct-with-negative-offset-in-ida-possible\">\n   Struct with negative offset in IDA possible\n  </a>\n </p>\n <p>\n  Pretty much what happened is I compiled a very good program and it works right, after that I did many changes to it and now it works worse then the older version, I'm trying to figure out what I did wrong (since I lost the source code now) to revert back to the old version. (I also added below the original piece of the code written in C++, which didn't change between both versions).\n </p>\n <p>\n  Structure's addresses somehow optimized in IDA PRO\nSuch as that\n </p>\n <pre><code>*(_BYTE *)(shipsStruct + 279) = 1; //Ships[i].used = true;\n</code></pre>\n <p>\n  should really be\n  <code>\n   [10x4]=40+255= 295\n  </code>\n </p>\n <pre><code>*(_BYTE *)(shipsStruct + 295) = 1;  //Ships[i].used = true;\n</code></pre>\n <p>\n  You can tell the structure size right here (\n  <code>\n   shipsStruct += 296;\n  </code>\n  )\n </p>\n <p>\n  I'm guessing somehow the un-used structure members are stripped out (but why is the structure size valid?).\n  \n\n  Seems the assembly somehow is offset wrongly (how do I add the proper offset deltas to the struct to fix this)?\n </p>\n <p>\n  When I try this tip\n  <a href=\"http://www.hexblog.com/?p=63\" rel=\"nofollow noreferrer\">\n   http://www.hexblog.com/?p=63\n  </a>\n  My whole IDA PRO freezes up when I select the line\n  <code>\n   mov edi, offset dword_10004C38\n  </code>\n  and press T (IDA PRO 6.1)\n </p>\n <p>\n  <img alt=\"structoffset\" src=\"https://i.sstatic.net/GBJzX.png\"/>\n </p>\n <p>\n  Seems I made my struct incorrectly?\n  \n\n </p>\n <p>\n  Here is how the code decompiled code looks like (without applying structure)\n </p>\n <pre><code>  if ( playerListBaseAddress && !IsBadReadPtr(playerListBaseAddress, 4u) )\n  {\n    shipsStruct = (int)dword_10004C38;\n    while ( 1 )\n    {\n      playerPointer = (struct_v3 *)*((_DWORD *)playerListBaseAddress + maxPlayers);\n      if ( !playerPointer )\n        break;\n      if ( IsBadReadPtr(playerPointer, 4u) )\n        break;\n      *(_DWORD *)(shipsStruct - 4) = playerPointer->ssXCoord;\n      *(_DWORD *)shipsStruct = playerPointer->ssYCoord;\n      *(_DWORD *)(shipsStruct + 4) = playerPointer->ssXSpeed;\n      *(_DWORD *)(shipsStruct + 8) = playerPointer->ssYSpeed;\n      *(_DWORD *)(shipsStruct - 8) = playerPointer->ssFreq;\n      *(_DWORD *)(shipsStruct + 20) = playerPointer->ssShipNum;\n      if ( playerPointer->ssPlayerName )\n        strcpy_s((char *)(shipsStruct + 24), 0xFFu, &playerPointer->ssPlayerName);\n      *(_BYTE *)(shipsStruct + 279) = 1;\n      if ( v37 == playerPointer )\n        break;\n      shipsStruct += 296;\n      ++maxPlayers;\n      v37 = playerPointer;\n      if ( shipsStruct >= (signed int)&unk_10017310 )\n        goto finish;\n    }\n    v34 = maxPlayers;\n    if ( maxPlayers < 255 )\n    {\n      v4 = (int)((char *)&unk_10004D4F + 296 * maxPlayers);\n      do\n      {\n        *(_BYTE *)v4 = 0;\n        v4 += 296;\n      }\n      while ( v4 < (signed int)&unk_10017427 );\n    }\n</code></pre>\n <p>\n  Here is the orginal code (not decompiled written in C++)\n </p>\n <pre><code>double currentTimer = GetTimer();\ndouble timeElapsed = currentTimer - lastTimer;\n\nint maxPlayers = 0;\nDWORD lastPlayerPtr = 0;\nif (playerListBaseAddress != NULL && !IsBadReadPtr((void *) playerListBaseAddress, sizeof(ULONG_PTR))) {\n    for (int i = 0; i < 255; i++) { //populate player ship list.\n    DWORD playerPtr = *(DWORD *) (playerListBaseAddress + (i * 4));\n\n    if (playerPtr != NULL && !IsBadReadPtr((void *) playerPtr, sizeof(ULONG_PTR))) {\n        Ships[i].XCoordinate = *(DWORD *) (playerPtr + 0x4);\n        Ships[i].YCoordinate = *(DWORD *) (playerPtr + 0x8);\n        Ships[i].XSpeed = *(signed long *) (playerPtr + 0x10);\n        Ships[i].YSpeed = *(signed long *) (playerPtr + 0x14);\n        Ships[i].Freq = *(DWORD *) (playerPtr + 0x58);\n        Ships[i].ShipNum = *(BYTE *) (playerPtr + 0x5C)\n        //memcpy(&(Ships[i].Name), (void*)((DWORD)playerPtr+0x6D), 19);\n        if (!*(BYTE *) (playerPtr + 0x6D) == NULL)\n        strcpy_s(Ships[i].Name, (char *) ((DWORD) playerPtr + 0x6D));\n        Ships[i].used = true;\n\n        if (lastPlayerPtr == playerPtr)\n        goto finishList;\n        lastPlayerPtr = playerPtr;\n    } else {\n      finishList:\n        maxPlayers = i;\n        for (int j = i; j < 255; j++)\n        Ships[j].used = false;\n        break;\n    }\n}\n</code></pre>\n <p>\n  Here is before and after (applying my custom struct)\n  \n\n  I did the custom struct by doing a bunch of Arrays (* key), then setting proper sizes. (Guessing this isn't the proper way to make a structure in IDA PRO?)\n  <img alt=\"struct\" src=\"https://i.sstatic.net/c5OBF.png\"/>\n  \n\n  Before:\n  \n\n  <img alt=\"before\" src=\"https://i.sstatic.net/u2VGH.png\"/>\n  \n\n  After:\n  \n\n  <img alt=\"after\" src=\"https://i.sstatic.net/p96Au.png\"/>\n  \n\n  ASM:\n  \n\n  <img alt=\"asm\" src=\"https://i.sstatic.net/wQXTP.png\"/>\n  \n\n  Edit Function\n  \n\n  <img alt=\"edit function\" src=\"https://i.sstatic.net/2rANk.png\"/>\n  \n\n  Double clicked local variable\n  \n\n  <img alt=\"dbl click local variables\" src=\"https://i.sstatic.net/9vKkW.png\"/>\n </p>\n</div>\n</body></html>",
    "votes": "5",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "struct"
    ],
    "user": "SSpoke",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  From above...\n </p>\n <p>\n  <strong>\n   Decompiled:\n  </strong>\n </p>\n <pre><code>*(_DWORD *)(shipsStruct - 4) = playerPointer->ssXCoord;\n*(_DWORD *)shipsStruct = playerPointer->ssYCoord;\n...\n</code></pre>\n <p>\n  <strong>\n   Original:\n  </strong>\n </p>\n <pre><code>Ships[i].XCoordinate = *(DWORD *) (playerPtr + 0x4);\nShips[i].YCoordinate = *(DWORD *) (playerPtr + 0x8);\n...\n</code></pre>\n <p>\n  Based on these snippets, it looks like the structure in your stack variables is 8 bytes off. Can you share with us the stack variable list for that function? (Double-click on one of the local variables in the decompilation to open the stack view.)\n </p>\n</div>\n</body></html>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Dec 31, 2013 at 2:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Talking about this? <a href=\"https://i.sstatic.net/2rANk.png\" rel=\"nofollow noreferrer\">i.sstatic.net/2rANk.png</a> here: <a href=\"https://i.sstatic.net/9vKkW.png\" rel=\"nofollow noreferrer\">i.sstatic.net/9vKkW.png</a></span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Should I risk deleting those <code>db ? ;undefined</code> above? and how did IDA analysis mess on this. Seems 12 bytes off (All functions decompile without errors btw)</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Okay I changed from <code>0x68</code> to <code>0x5C</code> now all undefined are gone begins from <code>var_5C</code> still generates same C code and everything seems the same, except for when clicking the stack variables no more undefined variables there.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Is <code>shipsStruct</code> a local variable or a global variable?</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Well <code>shipsStruct</code> is declared locally from <code>(int)dword_10004C38</code> which seems to be a global location in memory that location in memory I guess somehow should represent the offsetted structure. <code>shipsStruct</code> is the name I gave it it's really suppose to be casted to <code>ShipStruct</code>. Becomes like this when I convert it to struct* <code>shipsStruct = (ShipStruct *)dword_10004C38;</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This feature is supported since Hex-Rays 1.6:\n </p>\n <p>\n  <a href=\"http://www.hexblog.com/?p=544\" rel=\"noreferrer\">\n   http://www.hexblog.com/?p=544\n  </a>\n </p>\n <p>\n  (see section 3. CONTAINING_RECORD macro)\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Jan 3, 2014 at 13:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}