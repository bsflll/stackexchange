{
    "title": "How decompilation works? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/14320/how-decompilation-works",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <div>\n  <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n   <div class=\"d-flex fd-column fw-nowrap\">\n    <div class=\"d-flex fw-nowrap\">\n     <div class=\"flex--item wmn0 fl1 lh-lg\">\n      <div class=\"flex--item fl1 lh-lg\">\n       <div>\n        <b>\n         Closed\n        </b>\n        . This question needs to be more\n        <a href=\"/help/closed-questions\">\n         focused\n        </a>\n        . It is not currently accepting answers.\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n   <div class=\"fw-nowrap fc-black-500\">\n    <div class=\"d-flex fd-column lh-md\">\n     <div class=\"mb0 d-flex\">\n      <div class=\"flex--item mr8\">\n       <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\">\n        <path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\">\n        </path>\n       </svg>\n      </div>\n      <p>\n       <b>\n        Want to improve this question?\n       </b>\n       Update the question so it focuses on one problem only by\n       <a href=\"/posts/14320/edit\">\n        editing this post\n       </a>\n       .\n      </p>\n     </div>\n     <div class=\"mb0 mt6 d-flex\">\n      <p class=\"ml24 pl2\">\n       Closed\n       <span class=\"relativetime\" title=\"2017-01-05 19:15:16Z\">\n        8 years ago\n       </span>\n       .\n      </p>\n     </div>\n     <div class=\"ml24 pl2\">\n     </div>\n    </div>\n   </div>\n   <div class=\"mt24 d-flex gsx gs8\">\n    <a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/14320/edit\">\n     Improve this question\n    </a>\n   </div>\n  </aside>\n </div>\n <p>\n  what is the theory behind the subject of translate assembly code to pseudo code?\n </p>\n <p>\n  Could you explain few words ? Also some book about it?\n </p>\n</div>\n</body></html>",
    "votes": "-2",
    "answers": 1,
    "views": "638",
    "tags": [
        "disassembly",
        "x86",
        "decompilation",
        "c++"
    ],
    "user": "lemanb84",
    "time": "8 years ago",
    "comments": [
        {
            "user": "Jongware",
            "text": "<html><body><span class=\"comment-copy\">\n The\n <i>\n  theory\n </i>\n is that pseudocode is easier to understand than assembly. (A necessary assumption, then, is that \"all assembly can be converted to equivalent-or-easier pseudocode\".) That's not what your title asks about, though.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  A thorough but dated theoretical treatment of decompilation can be found in Cristina Cifuentes' 1994 PhD thesis\n  <a href=\"https://yurichev.com/mirrors/DCC_decompilation_thesis.pdf\" rel=\"nofollow noreferrer\">\n   \"Reverse Compilation Techniques\"\n  </a>\n  . The subject matter therein, which includes discussion of syntax analysis, semantic analysis, control flow analysis, data flow analysis, and code generation, will be difficult to understand without being familiar with compiler or programming language theory beforehand, as decompilation is the reverse process of compilation.\n </p>\n <p>\n  A shorter treatment of decompilation by the same author is given in a paper called\n  <a href=\"https://pdfs.semanticscholar.org/a5f9/2c049dc8062501dd36f149d746e8140f09e9.pdf\" rel=\"nofollow noreferrer\">\n   \"Decompilation of Binary Programs\"\n  </a>\n  .\n </p>\n <p>\n  If you are looking for something more contemporary you may wish to investigate techniques employed by CMU's\n  <a href=\"https://www.usenix.org/system/files/conference/usenixsecurity13/sec13-paper_schwartz.pdf\" rel=\"nofollow noreferrer\">\n   Phoenix decompiler\n  </a>\n  as well as the answers to this\n  <a href=\"https://reverseengineering.stackexchange.com/questions/5984/how-to-do-static-analysis-to-identify-pointer-from-concrete-value-in-assembly\">\n   question\n  </a>\n  .\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}