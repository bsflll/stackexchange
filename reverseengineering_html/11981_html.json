{
    "title": "What is the average time for \"defusing\" malware self-protection mechanisms?",
    "link": "https://reverseengineering.stackexchange.com/questions/11981/what-is-the-average-time-for-defusing-malware-self-protection-mechanisms",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I always wondered how much time is needed to get rid of all that anti-VM/crypto/protector/anti-debug stuff (without analyzing actual payload and purpose), especially if you're dealing with malware on a daily basis? I would definitely like to get answer from AV industry experts.\n </p>\n</div>\n</body></html>",
    "votes": "2",
    "answers": 3,
    "views": "329",
    "tags": [
        "anti-debugging",
        "malware"
    ],
    "user": "assp1r1n3",
    "time": "Feb 9, 2016 at 22:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Based on a couple of years of performing and teaching (\n  <a href=\"http://net.cs.uni-bonn.de/wg/cs/teaching-areas/labs-and-project-groups/malware-boot-camp/\" rel=\"nofollow\">\n   Malware Bootcamp at University of Bonn, Germany\n  </a>\n  ) reverse engineering with focus on malware analysis, I mostly try to skip any \"easy\" stepping stones (malware capability of detecting analysis environments, be it VM, debugger, ...) to get to an unpacked state of the malware and then focus analysis on this in IDA alongside debugging it.\n </p>\n <p>\n  Preparation of your own tools, e.g. setting up a reasonably proportioned (cores, HDD space, RAM) and concealed (removal of VM fragments) VM as explained by CrazyFrog can automagically carry a lot of load in this domain. I think I rarely spend more than minutes (i.e. native runtime of packer) to get to that unpacked state.\n </p>\n <p>\n  For understanding those protections and detections, otherwise +1 for\n  <a href=\"http://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf\" rel=\"nofollow\">\n   Peter Ferrie's reference\n  </a>\n  . \nIf you want to step through those in a debugger, you can use my\n  <a href=\"https://bitbucket.org/fkie_cd_dare/simplifire.antire\" rel=\"nofollow\">\n   defanged open source implementation\n  </a>\n  of those.\nNewer detection approaches not covered by the above source frequently involve utilizing Windows Management Instrumentation (WMI). Often to achieve the same derivation of characteristics that can lead to the conclusion you are in an analysis environment.\n </p>\n <p>\n  If there is protection in the sample itself, it's most often crypted strings or obfuscated API calls (Andromeda, Dridex, VM-Zeus come to mind), rarely execution-only decryption of code as seen in\n  <a href=\"http://byte-atlas.blogspot.de/2015/08/knowledge-fragment-unwrapping-fobber.html\" rel=\"nofollow\">\n   Fobber\n  </a>\n  . \nIn this case, it obviously becomes part of the analysis itself, or at least a pre-stage.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "pnX",
            "time": "Feb 11, 2016 at 11:46",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I work in AV industry for about a year now and I can tell you how I see this. How fast can you get rid of certain anti-reversing techniques depends on your experience and will to learn and understand as many of those techniques as possible.\n </p>\n <p>\n  I mostly work with PE packers and at the beginning I had problems with removing the most simple techniques like\n  <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx\">\n   IsDebuggerPresent()\n  </a>\n  . Hell, I even remember one time when I spent a whole day of work just figuring out the\n  <a href=\"https://leons.im/posts/anti-debug-with-trap-flag-register/\">\n   anti-debug with trap flag\n  </a>\n  and\n  <em>\n   checksum check\n  </em>\n  techniques.\n </p>\n <p>\n  Today, when I have some experience under my belt, I move around these common anti-reversing techniques quite fast. You can achieve that with the help of plugins for your tools (like\n  <a href=\"https://tuts4you.com/download.php?view.75\">\n   Olly Advanced\n  </a>\n  for\n  <a href=\"http://www.ollydbg.de/\">\n   Ollydbg\n  </a>\n  ). One of the greatest (if not the greatest) piece of resource about this topic is Peter Ferries book\n  <a href=\"http://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf\">\n   The Ultimate Anti-Debugging Reference\n  </a>\n  . Whenever I got stuck with some new anti-reversing technique, I consulted with that book and at the end found the solution.\n </p>\n <p>\n  So to sum things up, I am not an expert in the field and in the beginning it takes quite some time to get things done but it's like that in everything right? With enough practice and experience I'm sure you can avoid various anti-reversing techniques in a matter of minutes, but I would like if some of the more experienced users would back me up on this.\n </p>\n</div>\n</body></html>",
            "votes": "5",
            "user": "ubnix",
            "time": "Feb 10, 2016 at 15:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  most (if not all) anti-VM, anti-debug tricks are well known and easy to bypass using already existing debuggger plugins e.g. ScyllaHide. Some AV company's have dedicated tools for this (emulator, sandbox, virtual machine with auto-dump and rebuild feature). If you do it manualy avg time depends on the sample obfuscation your experience and tools you have to do the job.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "krusty",
            "time": "Feb 11, 2016 at 10:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}