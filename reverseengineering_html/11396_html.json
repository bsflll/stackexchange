{
    "title": "How to get the CPU architecture via Idapython?",
    "link": "https://reverseengineering.stackexchange.com/questions/11396/how-to-get-the-cpu-architecture-via-idapython",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I was not able to find an API function to get the CPU architecture of the loaded binary. \nIn\n  <code>\n   idaapi.py\n  </code>\n  , there is a function\n  <code>\n   def set_processor_type(*args)\n  </code>\n  but no equivalent such as\n  <code>\n   get_processor_type\n  </code>\n  .\n </p>\n <p>\n  I don't want to fall back to running some additional (python) tool such as file, readelf or a python ELF parser. I also don't like the idea of parsing the strings displayed at the beginning of the IDA assembly listing.\n </p>\n <p>\n  There must be a way to use\n  <code>\n   idc.py\n  </code>\n  ,\n  <code>\n   idaapi.py\n  </code>\n  or\n  <code>\n   idautils.py\n  </code>\n  for this.\n </p>\n</div>\n</body></html>",
    "votes": "7",
    "answers": 4,
    "views": "5k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "langlauf.io",
    "time": "Jan 4, 2017 at 20:35",
    "comments": [
        {
            "user": "Pocanatos",
            "text": "<html><body><span class=\"comment-copy\">\n Sorry for resurrecting this old thread, but for reasons I'm unable to figure out, both info.is_64bit() and info.is_32bit() are not working for me. I'm using IDA C++ SDK v7.1. Even if the executable in the database is 64-bit, it still goes through the 32-bit check. Any idea why this is happening?\n</span>\n</body></html>",
            "time": null
        },
        {
            "user": "knx",
            "text": "<html><body><span class=\"comment-copy\">\n If you have a new question, please ask it by clicking the\n <a href=\"https://reverseengineering.stackexchange.com/questions/ask\">\n  Ask Question\n </a>\n button. Include a link to this question if it helps provide context. -\n <a href=\"/review/low-quality-posts/15395\">\n  From Review\n </a>\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  You can get the name of the processor from the\n  <code>\n   idainfo\n  </code>\n  struct:\n </p>\n <pre><code>import idaapi\n\ninfo = idaapi.get_inf_structure()\n\nif info.is_64bit():\n    bits = 64\nelif info.is_32bit():\n    bits = 32\nelse:\n    bits = 16\n\ntry:\n    is_be = info.is_be()\nexcept:\n    is_be = info.mf\nendian = \"big\" if is_be else \"little\"\n\nprint 'Processor: {}, {}bit, {} endian'.format(info.procName, bits, endian)\n# Result: Processor: mipsr, 32bit, big endian\n</code></pre>\n <p>\n  Still haven't found the endian, though.\n </p>\n <p>\n  EDIT:\nEndian can be determined by processor name. For example,\n  <code>\n   mipsr\n  </code>\n  is big endian, and\n  <code>\n   mipsrl\n  </code>\n  is little endian.\n </p>\n <p>\n  EDIT:\n  \n\n  Added a proper endian check (\n  <code>\n   mf\n  </code>\n  == MSB First). Based on\n  <a href=\"https://reverseengineering.stackexchange.com/questions/11396/how-to-get-the-cpu-architecture-via-idapython/14326#14326\">\n   this answer\n  </a>\n  .\n </p>\n <p>\n  EDIT:\n  \n\n  Since IDA7 beta 3 (170724), idainfo.mf was removed, and idainfo.is_be() must be used. Based on\n  <a href=\"https://github.com/keystone-engine/keypatch/blob/bfcaef11de3a90efb08ed4f0c39dccf40d5613d0/keypatch.py#L171-L177\" rel=\"noreferrer\">\n   keypatch\n  </a>\n </p>\n</div>\n</body></html>",
            "votes": "9",
            "user": "stek29",
            "time": "Jan 30, 2018 at 9:00",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Not all processor name has endian information. Generally it can be determinded as:\n </p>\n <pre><code>BIG_ENDIAN if _idaapi.cvar.inf.mf else LITTLE_ENDIAN\n</code></pre>\n</div>\n</body></html>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Jan 4, 2017 at 20:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  This is definitely not exact answer, but probably you could make use of\n </p>\n <pre><code>idaapi.ph_get_regnames() \n</code></pre>\n <blockquote>\n  <p>\n   Returns the list of register names as defined in the processor module\n  </p>\n </blockquote>\n <p>\n  Different platforms has different register sets, and if you will not find your solution about exact cpu you can give it a try.\nThis function exists in IDA 6.8.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "w s",
            "time": "Nov 25, 2015 at 10:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Using the minsc plugin at\n  <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">\n   https://github.com/arizvisa/ida-minsc\n  </a>\n  , you can access database information using\n  <code>\n   database.information\n  </code>\n  . To get the detected architecture, you can access it via\n  <code>\n   instruction.arch\n  </code>\n  (currently only Intel, Mips, and Arm are implemented for this particular method).\n </p>\n <pre><code>Python>db.info.processor(), db.info.bits(), db.info.byteorder(), ins.arch\n('metapc', 0x20, 'little', <pc.Intel object at 0x7fdf2c145e90>)\n</code></pre>\n <p>\n  Disclaimer: I maintain the ida-minsc plugin.\n </p>\n <p>\n  Register information can be accessed via\n  <code>\n   instruction.architecture.register\n  </code>\n  (or\n  <code>\n   instruction.register\n  </code>\n  ).\n </p>\n <pre><code>Python>ins.arch.reg\n<class 'internal.architecture.map_t'>\n%bnd0  : <class 'register_t' index=97 dtype=dt_byte16 name='bnd0' position=0+128>\n%bnd1  : <class 'register_t' index=98 dtype=dt_byte16 name='bnd1' position=0+128>\n%bnd2  : <class 'register_t' index=99 dtype=dt_byte16 name='bnd2' position=0+128>\n%bnd3  : <class 'register_t' index=100 dtype=dt_byte16 name='bnd3' position=0+128>\n...\n%zmm31  : <class 'register_t' index=164 dtype=dt_byte64 name='zmm31' position=0+512>\n %ymm31 : \\_<class 'register_t' index=132 dtype=dt_byte32 name='ymm31' position=0+256>\n %xmm31 :   \\_<class 'register_t' index=116 dtype=dt_byte16 name='xmm31' position=0+128>\n</code></pre>\n <p>\n  If you want to access the processor information as soon as the disassembler figures it out, you can add a hook. First we define some function that corresponds to\n  <a href=\"https://hex-rays.com/products/ida/support/sdkdoc/structprocessor__t.html#a2d184a313fab28b517e82c1717d562a0a190f0300a7e6ad8e090389f7b986e9f8\" rel=\"nofollow noreferrer\">\n   <code>\n    IDP_Hooks.ev_newprc\n   </code>\n  </a>\n  . Then we can use the idp hooks in the\n  <code>\n   ui\n  </code>\n  module from minsc accessed as\n  <code>\n   ui.hooks.idp\n  </code>\n  .\n </p>\n <pre><code>import database as db, ui\ndef choose_processor(*dunno):\n    print('got', db.info.processor())\nPython>ui.hook.idp.add('ev_newprc', choose_processor)\n</code></pre>\n <p>\n  IDP Hook is now added (Note: edited a bit to highlight the function we've attached).\n </p>\n <pre><code>Python>ui.hook.idp\nEvents currently connected to IDP_Hooks:\n...\nIDP_Hooks.ev_newprc           : __main__.choose_processor(*dunno)[+0]\n...\nIDP_Hooks.ev_rename           : internal.hooks.changing(*parameters)[+0]\n</code></pre>\n <p>\n  Now upon opening up or creating a database we'll see the following output.\n </p>\n <pre><code>Loading processor module procs/arm.so for ARM...\n...\nOK\nWARNING:root:Detected processor module : AArch32 (13)\ngot ARM\nAssuming __fastcall calling convention by default\n...\n</code></pre>\n</div>\n</body></html>",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 21, 2024 at 4:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}