{
    "title": "How would you protect this Crypter?",
    "link": "https://reverseengineering.stackexchange.com/questions/11872/how-would-you-protect-this-crypter",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Imagine you are working in a kind of crypter that only works with the current function deciphered, rest of the code is ciphered by symmetric encryption. When a new function is about to be called, the current function is enciphered and the following is deciphered and called.\n </p>\n <p>\n  My assumption is that a analyst can easily dump the deciphered code (real code) each time a function is called, due to is the unique time where code is leaked/deciphered. Also, an analyst could easily repatch the executable in order to extract the protection, but it would need the symmetric key, once he has it, he just has to remove the encryption/decryption blocks and decipher the code.\n </p>\n <p>\n  Question here is: How can I implement a secure system that accomplish:\n </p>\n <ul>\n  <li>\n   Key management without leaking the key, or protecting it from being retrieved. (So the executable isn't patched for removing crypter's protection).\n  </li>\n  <li>\n   Avoid dumping per deciphered function. (Thus the analyst wouldn't dump the whole executable's deciphered code just dumping deciphered functions in runtime).\n  </li>\n </ul>\n <p>\n  It would be great to read some advices. Thanks!\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "248",
    "tags": [
        "binary-analysis",
        "encryption",
        "cryptography"
    ],
    "user": "kub0x",
    "time": "Jan 28, 2016 at 9:12",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<html><body><span class=\"comment-copy\">\n Even if you were able to keep the key \"hidden\" (using white-box cryptography or other means) and obfuscate the decryption algorithm well, one could still decrypt your program by calling your decryption function(s) on each encrypted function and dumping the output. I actually discussed this briefly @\n <a href=\"https://www.youtube.com/watch?v=mWsT5M6rHWI#t=15m7s\" rel=\"nofollow noreferrer\">\n  youtube.com/watch?v=mWsT5M6rHWI#t=15m7s\n </a>\n (it's about encrypted strings but the same approach could also be applied to encrypted functions).\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is a thing that might help you in modern crypto research, it is called white-box cryptography and relatively good Q&A article resides\n  <a href=\"http://joye.site88.net/papers/Joy08whitebox.pdf\" rel=\"nofollow noreferrer\">\n   here\n  </a>\n  .\n </p>\n <p>\n  Generally speaking if the key exists sometimes in the memory you can safely assume that sometimes it will be dumped and reused.\n </p>\n <p>\n  However you can harden the problem by using the following techniques:\n </p>\n <ul>\n  <li>\n   Obfuscate the key (compute them on the fly)\n  </li>\n  <li>\n   Obfuscate the encryption/decryption algorithm\n  </li>\n  <li>\n   Use different keys for different functions\n  </li>\n  <li>\n   Re-encrypting the function back may be done with different keys\n  </li>\n  <li>\n   Use checksums for verification of encrypted code before usage\n  </li>\n  <li>\n   Use Intel SGX or similar features of other processors to avoid debugging\n  </li>\n  <li>\n   Use anti-debugging and anti-dumping techniques\n  </li>\n </ul>\n <p>\n  Good luck.\n </p>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Small remark: Encrypting the code by function boundaries leaks information about the code structure. You can divide your encryption blocks differently.</span>",
                    "time": null
                }
            ]
        }
    ]
}