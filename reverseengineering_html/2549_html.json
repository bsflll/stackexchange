{
    "title": "How to obtain x86-64 pseudocode in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/2549/how-to-obtain-x86-64-pseudocode-in-ida-pro",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Does anyone know about obtaining pseudocode for x86-64 in IDA Pro? I already tried the Hex-Rays plugin to obtain pseudocode, but when I try it, the following error pops up: \"only 32bit code is supported\".\n </p>\n</div>\n</body></html>",
    "votes": "11",
    "answers": 3,
    "views": "114k",
    "tags": [
        "ida",
        "x86",
        "decompilation",
        "disassemblers",
        "x86-64"
    ],
    "user": "john",
    "time": "Nov 12, 2016 at 17:20",
    "comments": [
        {
            "user": "0xea",
            "text": "<html><body><span class=\"comment-copy\">\n well, what kind of binary do you have? x86, x86_64 , ARM ... ?\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  The two other answers here are outdated.\n </p>\n <p>\n  From hex-rays website, in the\n  <a href=\"https://www.hex-rays.com/products/decompiler/\" rel=\"nofollow noreferrer\">\n   page\n  </a>\n  about the the hex-rays decompiler:\n </p>\n <blockquote>\n  <p>\n   Currently the decompiler supports compiler generated code for the x86, x64, ARM32, ARM64, and PowerPC processors. We plan to port it to other platforms and add a programmatic API. This will allow our customers to implement their own analysis methods. Vulnerability search, software validation, coverage analysis are the directions that immediately come to mind.\n  </p>\n </blockquote>\n <p>\n  On 2014/06/04, with the release of IDA 6.6 hex-rays officially released their 64bit x86 decompiler, and it has been steadily improved since then. The official release can be seen on IDA 6.6\n  <a href=\"https://www.hex-rays.com/products/ida/news/6_6/\" rel=\"nofollow noreferrer\">\n   page\n  </a>\n  as the first new feature as well as on their\n  <a href=\"https://www.hex-rays.com/products/decompiler/news/\" rel=\"nofollow noreferrer\">\n   changelog\n  </a>\n  .\n </p>\n <p>\n  It is a separate product and sold apart from their x86 32bit decompiler, and is currently quoted at the same price as the other decompilers (see price quotes\n  <a href=\"https://web.archive.org/web/20130117164916/http://hex-rays.com/products/ida/support/orderforms/namedeu.pdf\" rel=\"nofollow noreferrer\">\n   page\n  </a>\n  for named licenses).\n </p>\n <p>\n  More than two years after the first release, the decompiler is fully featured and is considered high-grade.\n </p>\n <p>\n  Two images of using IDA's 64 bit x86 disassembly and decompilation (from hex-ray's IDA 6.6 page):\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/k25Ko.gif\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA 6.6 example disassembly\" src=\"https://i.sstatic.net/k25Ko.gif\"/>\n  </a>\n  \n\n  <sub>\n   (source:\n   <a href=\"https://www.hex-rays.com/products/ida/6.6/hexx64_1.gif\" rel=\"nofollow noreferrer\">\n    hex-rays.com\n   </a>\n   )\n  </sub>\n </p>\n <p>\n  <a href=\"https://i.sstatic.net/QP0hp.gif\" rel=\"nofollow noreferrer\">\n   <img alt=\"IDA 6.6 example decompilation\" src=\"https://i.sstatic.net/QP0hp.gif\"/>\n  </a>\n </p>\n <h2>\n  Other solutions\n </h2>\n <p>\n  There are, however, other solutions that provide an IDA plugin for decompilation. Although not precisely what you were looking for, those provide another possible way to achieve your desired goal:\n </p>\n <ol>\n  <li>\n   <a href=\"https://derevenets.com/\" rel=\"nofollow noreferrer\">\n    Snowman\n   </a>\n   , A full-blown decompiler with an IDA plugin\n  </li>\n  <li>\n   a plugin for AVG's\n   <a href=\"https://retdec.com/idaplugin/\" rel=\"nofollow noreferrer\">\n    Retargetable Decompiler\n   </a>\n   <em>\n    online\n   </em>\n   decompiler (\n   <a href=\"https://reverseengineering.stackexchange.com/questions/2549/how-to-obtain-x86-64-pseudocode-in-ida-pro/13299?noredirect=1#comment20306_13299\">\n    Mentioned\n   </a>\n   by @ws)\n  </li>\n  <li>\n   A python-only IDA decompiler plugin called\n   <a href=\"https://github.com/EiNSTeiN-/decompiler\" rel=\"nofollow noreferrer\">\n    ida-decompiler\n   </a>\n   (\n   <a href=\"https://reverseengineering.stackexchange.com/questions/2549/how-to-obtain-x86-64-pseudocode-in-ida-pro/2550#2550\">\n    Mentioned\n   </a>\n   by @0xea)\n  </li>\n </ol>\n</div>\n</body></html>",
            "votes": "10",
            "user": "Glorfindel",
            "time": "Jan 5, 2021 at 20:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">There is also a plugin from  <a href=\"https://retdec.com/idaplugin/\" rel=\"nofollow noreferrer\">retdec.com/idaplugin</a> . It supports Intel x86, ARM, ARM+Thumb, MIPS, PIC32, PowerPC in ELF, PE, COFF, AR (archive) and Intel HEX formats. Please note that the decompilation process happens at their server, not locally.</span>",
                    "time": null
                },
                {
                    "user": "Elmue",
                    "text": "<span class=\"comment-copy\">Snowman does not work at all. Look which garbage it creates: _memset(ecx, edi79, 0, 0x13c, \"p\", 0, 0, 1, v6, 0x130b, 0, 0, v5, edi7, esi8, ebx9, v82, v18, 0, v80, v83, v84, v11); and  MessageBoxW_CWnd_QAEHPB_W0I_Z(ecx, \"o\", 0, 0, edi66, eax68, 3, v60, 1, v6, 0x130b, 0, 0, v5, edi7, esi8, ebx9, v85, v18, v21, v24, v86, v87, v11, v42); Better use Ghidra</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  As far as I know, IDA Hex-ray plugin supports only x86 and ARM decompiling (if you have a licence for ARM). It doesn't work on x86_64.\n </p>\n <p>\n  However, if you need something that will work on x86_64 take a look at\n  <a href=\"https://github.com/EiNSTeiN-/ida-decompiler/\" rel=\"nofollow noreferrer\">\n   ida-decompiler\n  </a>\n  :\n </p>\n <blockquote>\n  <p>\n   An IDA plugin that attempts to decompile a function. Written in Python. To try it in IDA, place your cursor on a function, and execute the plugin. The decompiled function will appear in the output window.\n  </p>\n </blockquote>\n <p>\n  Obviously, it's not as advanced as Hex-Rays, but it's a good step toward a good, open decompiler.\n </p>\n</div>\n</body></html>",
            "votes": "8",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">This was correct at original time of writing but is no longer so. Please take a look at my answer.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  If you absolutely want pseudo-code and are out of luck with IDA Pro, you might want to give a try to demo version of\n  <a href=\"http://hopperapp.com/\" rel=\"nofollow\">\n   hopper\n  </a>\n  : it can generates pseudo-code for x86, x86-64, and ARM.\n </p>\n</div>\n</body></html>",
            "votes": "3",
            "user": "jvoisin",
            "time": "Aug 1, 2013 at 13:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}