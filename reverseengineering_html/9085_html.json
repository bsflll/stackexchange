{
    "title": "ADC in ARM : What is the corresponding C?",
    "link": "https://reverseengineering.stackexchange.com/questions/9085/adc-in-arm-what-is-the-corresponding-c",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  I have the following 2 ARM instructions in a basic block which is part of a function that I'm trying to convert to C.\n </p>\n <pre><code>ADDS r4, r2, r7\nADC  r5, r3, r7, ASR#31\n</code></pre>\n <p>\n  From my understanding, the first instruction does a\n  <code>\n   r4 = r2+r7\n  </code>\n  and sets the flags. The next instruction does\n  <code>\n   r5 = r3 + (r7>>31) + <carryflag>\n  </code>\n  . How would the instructions look in C?\n </p>\n</div>\n</body></html>",
    "votes": "1",
    "answers": 1,
    "views": "668",
    "tags": [
        "arm",
        "decompile"
    ],
    "user": null,
    "time": "Jun 7, 2015 at 20:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  There is no single C instruction that matches the assembly code directly. What's happening is the 32 bit value in r7 gets added to the 64 bit value in r2/r3, with the result written to r4/r5.\n </p>\n <p>\n  You can verify this in a few different cases:\n </p>\n <ul>\n  <li>\n   No overflow in the first instruction, positive number (bit 31 is zero) in\n   <code>\n    r7\n   </code>\n   . This means the\n   <code>\n    ADC\n   </code>\n   has nothing to add, and just copies\n   <code>\n    r3\n   </code>\n   to\n   <code>\n    r5\n   </code>\n   .\n  </li>\n  <li>\n   First instruction produces overflow, but\n   <code>\n    r7\n   </code>\n   is positive anyway. The\n   <code>\n    ADC\n   </code>\n   adds one (from the carry flag) to account for the overflow.\n  </li>\n  <li>\n   <code>\n    r7\n   </code>\n   is negative (bit 31 is 1). The\n   <code>\n    ASR\n   </code>\n   instruction produces a\n   <code>\n    -1\n   </code>\n   (all bits set), since it does an\n   <em>\n    arithmetic\n   </em>\n   shift, not a logical shift. This effectively subtracts 1 from\n   <code>\n    r3\n   </code>\n   in the second instruction.\n  </li>\n </ul>\n <p>\n  So the original C code probably looked like this:\n </p>\n <pre><code>__int64__ r23;\n__int32__ r7;\n__int64__ r45;\nr45=r23+r7;\n</code></pre>\n <p>\n  As i said, the asm code doesn't really match the C code, since C doesn't have any syntax for type extension. (You could use casts in your C, but that wouldn't really make anything clearer).\n </p>\n <p>\n  This is one of the reasons why there is more to reverse engineering that just creating C from assembly; you have to have an understanding on assembly, registers, processor quirks, and compiler shortcuts, to understand what's going on in these cases.\n </p>\n</div>\n</body></html>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Jun 7, 2015 at 21:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1743",
                    "text": "<span class=\"comment-copy\">Thanks! Is this a common pattern that can be noticed when doing 64 bit addition on 32 bit systems?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">yes, that's what the carry flag and <code>adc</code> is for - add the low part first, then add the high part and a possible carry bit. This was much more common on 16 bit processors, when dealing with 32 bit values. What's special here is how extension from 32 to 64 bits and adding with carry can be done in one single instruction on ARM.</span>",
                    "time": null
                }
            ]
        }
    ]
}