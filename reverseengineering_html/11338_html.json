{
    "title": "Callee's return precalculations",
    "link": "https://reverseengineering.stackexchange.com/questions/11338/callees-return-precalculations",
    "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Good day.\n </p>\n <p>\n  I build this simple code on Intel cpu working on Windows 7 with MS VS Express 2013:\n </p>\n <pre><code>#include <stdio.h>\nint f(int a, int b, int c);\n\nint f(int a, int b, int c){\n    int d = a*b + c;\n    return d;\n};\n\nint main()\n{\n    printf(\"%d\n\", f(1, 2, 3));\n    return 0;\n};\n</code></pre>\n <p>\n  When I disassemble binary I see just main() function that push 5 (the result of f()) and call printf():\n </p>\n <pre><code>; int __cdecl main(int argc, const char **argv, const char **envp)\n_main proc near\npush    5\npush    offset Format   ; \"%d\n\"\ncall    ds:__imp__printf\nadd     esp, 8\nxor     eax, eax\nretn\n_main endp\n</code></pre>\n <p>\n  I'm expect to see something like:\n </p>\n <pre><code> push 3\n push 2\n push 1\n call _f\n</code></pre>\n <p>\n  or doing similar things with registers (for x64). But can't find f() definition. Is there any conventions or compiler optimizations that allow passing result without routine call? Or it is a debuggers (IDA, OllyDBG) calculating? It looks like the result of f() was calculated when project was built.\n </p>\n</div>\n</body></html>",
    "votes": "0",
    "answers": 1,
    "views": "62",
    "tags": [
        "binary-analysis"
    ],
    "user": "Alex_H",
    "time": "Nov 17, 2015 at 8:13",
    "comments": [
        {
            "user": "w s",
            "text": "<html><body><span class=\"comment-copy\">\n Yes, it is optimization during compile time, not debugging. If you want to see the function, you should compile with option /Od which means disabled optimization and may be found in project options (Configuration properties/C++/Optimization). If you would compile your program in VS in debug mode, start debugging and view disassembly window you'd see the call as you expected.\n</span>\n</body></html>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<html><body><div class=\"s-prose js-post-body\" itemprop=\"text\">\n <p>\n  Many compilers have magic incantations for explicitly suppressing the inlining of certain functions, like\n  <code>\n   __declspec(noinline)\n  </code>\n  . An alternative is introducing something that the optimizer is not allowed to 'see through', like a (volatile) function pointer or an external DLL function. A vararg function can sometimes be used with similar effect (i.e. pretend to use the result of some computation in order to force the compiler to actually perform it).\n </p>\n <p>\n  The convention underlying all this is the 'as if' rule in the C/C++ standards. The compiler must ensure that the observable behaviour of the resulting binary follows the defined semantics; how these results are arrived at is completely up to the compiler.\n </p>\n <p>\n  In connection with a good optimising compiler this makes the source code of a program a logical specification (or contract) of what the programmer expects to happen, and the physical realisation is fully up to the compiler. This is a good thing, and long overdue.\n </p>\n <p>\n  Contrast this to glorified macro assemblers like Turbo Pascal and older Delphis, where you know exactly which machine code fragment/template will get emitted for which source code construct (barring a small handful of tricks from the Dragon Book, like dead store elimination).\n </p>\n <p>\n  Here are a few relevant verses from Scripture (ISO/IEC 14882:2003 alias C++03):\n </p>\n <blockquote>\n  <p>\n   The semantic descriptions in this International Standard define a parameterized nondeterministic abstract machine. This International Standard places no requirement on the structure of conforming implementations. In particular, they need not copy or emulate the structure of the abstract machine. Rather, conforming implementations are required to emulate (only) the\n   <strong>\n    observable behavior\n   </strong>\n   of the abstract machine as explained below.\n  </p>\n  <p>\n   A conforming implementation executing a well-formed program shall produce the same observable behavior as one of the possible execution sequences of the corresponding instance of the abstract machine with the same program and the same input. However, if any such execution sequence contains an undefined\noperation, this International Standard places no requirement on the implementation executing that program with that input (not even with regard to operations preceding the first undefined operation).\n  </p>\n </blockquote>\n <p>\n  (IOW, if you invoke undefined behaviour then all bets are off and the compiler may do whatever it pleases - including, but not limited to, crashing your computer or selling your wife on Ebay. Modern compilers tend to rely\n  <strong>\n   heavily\n  </strong>\n  on this clause.)\n </p>\n <blockquote>\n  <p>\n   The observable behavior of the abstract machine is its sequence of reads and writes to volatile data and calls to library I/O functions.\n  </p>\n  <p>\n   The least requirements on a conforming implementation are:\n  </p>\n  <p>\n   — At sequence points, volatile objects are stable in the sense that previous evaluations are complete and subsequent evaluations have not yet occurred.\n  </p>\n  <p>\n   — At program termination, all data written into files shall be identical to one of the possible results that execution of the program according to the abstract semantics would have produced.\n  </p>\n  <p>\n   — The input and output dynamics of interactive devices shall take place in such a fashion that prompting messages actually appear prior to a program waiting for input. What constitutes an interactive device is\nimplementation-defined.\n  </p>\n </blockquote>\n</div>\n</body></html>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Alex_H",
                    "text": "<span class=\"comment-copy\">Thank you for your detailed answer. It is very informative and helpful</span>",
                    "time": null
                }
            ]
        }
    ]
}