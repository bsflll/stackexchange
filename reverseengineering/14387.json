{
    "title": "reversing ios notes file format [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/14387/reversing-ios-notes-file-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions asking for help <b>reverse-engineering a specific system</b> are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2017-01-15 18:42:16Z\">8 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/14387/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I am trying to understand how to read iOS notes files as they are saved in the NoteStore.sqlite database in the iOS backup.</p>\n<p><a href=\"https://drive.google.com/uc?export=download&amp;id=0B7hmWtxRMILgRVVFOS04QjhqTWc\" rel=\"nofollow noreferrer\">Here</a> are some sample files. Each file is a different note. \nI want to get only the text out of it but can't figure out how. </p>\n<p>I already understand that the textual part of the note is seperate from other parts (like links, pictures etc.) Can't find the length field so I can get the textual part. </p>\n<p>When the note is shorter than 256 characters the 14th byte is the length.\nBut when it's longer, I can't figure it out. </p>\n<p>Can anyone reverse this?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "534",
    "tags": [
        "file-format",
        "ios",
        "protocol"
    ],
    "user": "Nlandau",
    "time": "8 years ago",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Are you sure those are not just sqlite files? If they are, there are plenty of libraries to parse this file format and there's no need to reverse engineer it.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are right about the 14th byte being the length on (some) short notes, like your file <code>4</code>:</p>\n<pre><code>00000000  08 00 12 d6 02 08 00 10 00 1a cf 02 12 1b 54 68   ..............Th\n00000010  69 73 20 6e 6f 74 65 20 69 73 20 74 68 65 20 66   is note is the f\n00000020  69 72 73 74 20 6f 6e 65 20 1a 10 0a 04 08 00 10   irst one .......\n00000030  00 10 00 1a 04 08 00 10 00 28 01 1a 10 0a 04 08   .........(......\n</code></pre>\n<p>However, this is not always the case; in your file <code>9</code>, which is even shorter, the length, at first glance, is at position 26, with the text after that:</p>\n<pre><code>00000000  08 00 12 81 01 08 00 10 00 1a 7b 12 17 d7 90 d7   ..........{.....\n00000010  91 d7 90 0a d7 92 d7 93 d7 94 0a 31 32 33 34 35   ...........12345\n00000020  36 37 38 39 1a 10 0a 04 08 00 10 00 10 00 1a 04   6789............\n</code></pre>\n<p>and observing closely, you can see that in longer files, the text starts one byte behind that:</p>\n<pre><code>00000000  08 00 12 c5 07 08 00 10 00 1a be 07 12 ac 02 49   ...............I\n00000010  6e 67 72 65 64 69 65 6e 74 73 20 0a 0a 32 20 63   ngredients ..2 c\n</code></pre>\n<p>The reason for this is that the length is coded in a special format: if the byte has its low order bit clear, then the byte is the length itself. If the high order bit is set, take only the low 7 bits, and prepend the next byte before that. For example, <code>ac 02</code>:</p>\n<pre><code>1010 1100 0000 0011       =&gt; remove 1st bit from 1st byte and prepend 2nd byte\n0000 0011 010 1100        =&gt; fill a 0 bit from the left and write in standard nibble notation\n0000 0001 1010 1100       =&gt; this is 1AC hex, or 428 bytes, which is the length of the note\n</code></pre>\n<p>It seems that the length of the file (minus some header) is encoded in the same way starting at position 11. This explains why file <code>9</code> is different: it's the only one short enough to have a length &lt; 0x80 (0x7b), so it needs only one byte here, so everything else is shifted left one byte.</p>\n<p>And actually, I guess that the \"first glance\" was wrong; the real length of note 9 is 23 (hex 17), and it consists of 2 lines of 3 unicode characters each (utf-8? This translates those bytes to hebrew characters, or maybe integers in the same encoding as above, yielding unicode code points), ended with a newline, and it's an unfortunate coincidence that the <code>0a</code> newline looks like the length byte for the numbers.</p>\n<p>So, to extract the text, seek to position 11, read a number which can be 1 or 2 bytes according to above, skip one byte which should be <code>12</code>, read the length of 1 or 2 bytes, then read the text. Actually, i suspect that bytes 4 and 5 are some integer as well; so maybe you should start with byte 4 and adjust the offsets depending on whether it has bit 8 set or not.</p>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Jan 13, 2017 at 9:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nlandau",
                    "text": "<span class=\"comment-copy\">can you check note 8. it should result with a length of 0x919 and by your way i get 0x999.</span>",
                    "time": null
                },
                {
                    "user": "Nlandau",
                    "text": "<span class=\"comment-copy\">o.k first let me say: EXCELLENT WORK!  secondly, you have some typoes which caused me to make a bad calcullation. but now i've got it. thank you very much!</span>",
                    "time": null
                },
                {
                    "user": "Nlandau",
                    "text": "<span class=\"comment-copy\">typeoes: \"if the byte has its low order bit clear\" should be \"high order bit clear\", instead of AC 02 you did AC 03.</span>",
                    "time": null
                },
                {
                    "user": "Nlandau",
                    "text": "<span class=\"comment-copy\">BTW note 9 does have hebrew letters :)</span>",
                    "time": null
                }
            ]
        }
    ]
}