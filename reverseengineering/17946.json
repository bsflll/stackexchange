{
    "title": "Capstone: What's the purpose of the 'address' argument in cs_disasm()?",
    "link": "https://reverseengineering.stackexchange.com/questions/17946/capstone-whats-the-purpose-of-the-address-argument-in-cs-disasm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to play around with the Capstone Disassembler in C.</p>\n<p>In the documentation they show the following use of the <code>cs_disasm()</code> function:\n<a href=\"http://www.capstone-engine.org/lang_c.html\" rel=\"nofollow noreferrer\">from here</a></p>\n<pre><code>count = cs_disasm(handle, CODE, sizeof(CODE)-1, 0x1000, 0, &amp;insn)\n</code></pre>\n<p>The thing that bugs me is that <code>0x1000</code>. In the documentation (<a href=\"https://github.com/aquynh/capstone/blob/master/include/capstone.h\" rel=\"nofollow noreferrer\">source code actually</a>) it says:</p>\n<blockquote>\n<p>@address: address of the first instruction in given raw code buffer.</p>\n</blockquote>\n<p>I can't really understand what does that really mean, because from what I understand the <code>insn</code> array is being dynamically allocated and filled, and that's where the instructions will reside (or are they?)</p>\n<p>Why is it a fixed value like <code>0x1000</code>? is that actually address in the memory of the program? (isn't that an illegal address space for a C program to use?)</p>\n<p>Thanks in advance</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c",
        "disassemblers",
        "capstone"
    ],
    "user": "shaqed",
    "time": "Apr 10, 2018 at 10:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>that address is the <strong>virtual address</strong> you want to disassemble </p>\n<p>for example you have a relative jump  </p>\n<p>the opcodes will be say <strong>0x74 {imm }</strong> where <strong>{imm}</strong> is relative to the current address \neither in positive direction or in negative direction </p>\n<p>so if the  current address is 0x1000  a relative jump with <strong>{5} imm  from 0x1000</strong> in positive direction  should land you in in 0x1005  </p>\n<p>if the address was 0x2000 it should land you in 0x2005 </p>\n<p>that is the disassembly on the current line should state </p>\n<p>jmp 0x1005 or jmp 0x2005 etc etc  </p>\n<p>if you do not give the address the disassembly will just say <strong>jmp 5</strong> </p>\n<p>here is a piece of similar python code </p>\n<pre><code>Python 2.7 (32-bit) interactive window [PTVS 15.6.18072.2-15.0]\n\n&gt;&gt;&gt; from capstone import *\n&gt;&gt;&gt; CODE = b\"\\x74\\xd9\"\n&gt;&gt;&gt; md = Cs(CS_ARCH_X86,CS_MODE_32)\n&gt;&gt;&gt; for i in md.disasm(CODE , 0x1000):\n...     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n... \n0x1000: je  0xfdb  &lt;&lt;&lt;&lt; (0x1000 - 0x25)\n\n&gt;&gt;&gt; for i in md.disasm(CODE , 0x25):\n...     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n... \n0x25:   je  0    &lt;&lt;&lt;&lt; (0x25 - 0x25) \n</code></pre>\n</div>",
            "votes": "4",
            "user": "blabb",
            "time": "Apr 10, 2018 at 11:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}