{
    "title": "Patching branch on assembly code",
    "link": "https://reverseengineering.stackexchange.com/questions/17734/patching-branch-on-assembly-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I compile this code </p>\n<pre><code>1.  #include &lt;stdio.h&gt;\n2.  void F(int a, int b)\n3.  {\n4.  int c= a+b;\n5.  int d= a*b; \n6. }\n\n\n7.  void printAll()\n8.  {\n9.    printf(\"test1\");\n10.   printf(\"test2\");\n11.   printf(\"after a+b\");\n12.   printf(\"test4\");\n13.  }\n</code></pre>\n<p>and get this code</p>\n<pre><code>F(int, int):\n        str     fp, [sp, #-4]!\n        add     fp, sp, #0\n        sub     sp, sp, #20\n        str     r0, [fp, #-16]\n        str     r1, [fp, #-20]\n        ldr     r2, [fp, #-16]\n        ldr     r3, [fp, #-20]\n        add     r3, r2, r3\n        str     r3, [fp, #-8]\n        ldr     r3, [fp, #-16]\n        ldr     r2, [fp, #-20]\n        mul     r3, r2, r3\n        str     r3, [fp, #-12]\n        mov     r0, r0    @ nop\n        sub     sp, fp, #0\n        ldr     fp, [sp], #4\n        bx      lr\n.LC0:\n        .ascii  \"test1\\000\"\n.LC1:\n        .ascii  \"test2\\000\"\n.LC2:\n        .ascii  \"after a+b\\000\"\n.LC3:\n        .ascii  \"test4\\000\"\nprintAll():\n        stmfd   sp!, {fp, lr}\n        add     fp, sp, #4\n        ldr     r0, .L3\n        bl      printf\n        ldr     r0, .L3+4\n        bl      printf\n        ldr     r0, .L3+8\n        bl      printf\n        ldr     r0, .L3+12\n        bl      printf\n        mov     r0, r0    @ nop\n        sub     sp, fp, #4\n        ldmfd   sp!, {fp, lr}\n        bx      lr\n.L3:\n        .word   .LC0\n        .word   .LC1\n        .word   .LC2\n        .word   .LC3\n</code></pre>\n<p>I understanad all of this code, that no a problem.</p>\n<p>what I want to understand is how can I patch a branch.</p>\n<p>I want to edit my binary file without damage the offset of function and after this line  <code>int c= a+b;</code> I want to jump to this line  <code>printf(\"after a+b\");</code>\nand then go back to <code>int d= a*b;</code> </p>\n<p>I think I need to add 2 branch (B) instructions : 1 between lines 4-5  and second is between  10-11 </p>\n<p>So, after I finish lines 4, I jump to line 11 and when I finish lines 11 I jump to line 5.</p>\n<p>Is that the right way to do this?</p>\n<ol>\n<li><p>I did not found how to write B (branch) instruction in hex, and how can I know what is the address where to jump by reading the binary file (with Ida).</p></li>\n<li><p>Is that the right way ? use on <code>B</code> instruction ?</p></li>\n<li><p>I not have a problem to remove some line on printAll function so I not afraid to add there label and branch instructions (I can remove line 9 and then I have space to patch 2 instructions ).\nBut I can't remove any instructions from F function, how can I do it ?</p></li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "c",
        "arm",
        "patch-reversing",
        "binary-editing"
    ],
    "user": "arm",
    "time": "Apr 4, 2018 at 8:05",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">labels are only artificial way of marking offsets/addresses in assembly. There are none in the binary.</span>",
            "time": null
        },
        {
            "user": "arm",
            "text": "<span class=\"comment-copy\">so I only need to add 2 branch instructions ? is that the beast way to do what I need?</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">show the disassembly of the code in the object file, not the assembly code generated by the compiler from the source code.</span>",
            "time": null
        },
        {
            "user": "arm",
            "text": "<span class=\"comment-copy\">@SYS_V I ask about the assembly that I show, that general quastion , after that I see how can I include you answer on my code.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">You say you want to edit the binary file, so show the code in the binary file.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I took Your code inserted some #defines that are needed to compile arm in vc2017 community dev prompt </p>\n<p>modified your  printall() to main() so that there is an entry point defined </p>\n<p>inserted a call to F() so that it is easily identifiable and loaded the compiled exe into radare2 </p>\n<p>modified code </p>\n<pre><code>//#defines to make vs2017 community build arm \n// need to pass -arch-arm -host_arch=x86 or appropriate  host_arch\n// i compiled this on x86 32 so i passed x86 to vsdevcmd.bat\n// and compiled with cl foo.cpp\n#define _CRT_BUILD_DESKTOP_APP 1\n#define _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE 1\n#include &lt;stdio.h&gt;\nvoid F(int a, int b) {\n    int c= a+b;\n    int d= a*b;\n}\nvoid main() {\n    printf(\"test1\");\n    printf(\"test2\");\n    printf(\"after a+b\");\n    printf(\"test4\");\n    // call F() inserted so it is easily identifiable \n    // and / or not thrown away by compiler for no ref \n    F(4,5); \n}\n</code></pre>\n<p>compiled linked and opened up the exe in radare2 </p>\n<pre><code>&gt;cl armie.cpp\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.13.26128 for ARM\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\narmie.cpp\nMicrosoft (R) Incremental Linker Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:armie.exe\n/machine:arm\narmie.obj\n\n&gt;radare2 -AA armie.exe\n←[32m[x]←[0m Analyze all flags starting with sym. and entry0 (aa)\n[ ] ←[33m\n[←[0mValue from 0x00401000 to 0x00417000\naav: 0x00401000-0x00417000 in 0x401000-0x417000\n←[32m[x]←[0m Analyze len bytes of instructions for references (aar)\n←[32m[x]←[0m Analyze function calls (aac)\n←[32m[x]←[0m Emulate code to find computed references (aae)\n←[32m[x]←[0m Analyze consecutive function (aat)\n←[32m[x]←[0m Constructing a function name for fcn.* and sym.func.* functions (aan)\n←[32m[x]←[0m Type matching analysis for all functions (afta)\n -- Run a command with unspecified long sequence of 'a', \n pancake will be summoned and do the analysis for you.\n[0x00401fa0]&gt;\n</code></pre>\n<p>the disassembly of the mainfunction </p>\n<pre><code>looking for string refs\n[0x00401fa0]&gt; iz~test\n000 0x0000c550 0x0040d150   5   6 (.rdata) ascii test1\n\nlooking for xrefs to string refs\n[0x00401fa0]&gt; axt 0x40d150\n(nofunc) 0x401d48 [null] subeq sp, r0, r0, asr r1\nfcn.00401d08 0x401d10 [data] invalid\n\nprinting the disassembly of the referred function     \n[0x00401fa0]&gt; pdf @ fcn.00401d08\n/ (fcn) fcn.00401d08 52\n|   fcn.00401d08 ();\n|              ; UNKNOWN XREF from 0x00401f46 (aav.0x00401e85 + 193)\n|              ; CALL XREF from 0x00401f46 (aav.0x00401e85 + 193)\n|           0x00401d08      2de90048       push.w {fp, lr}\n|           0x00401d0c      eb46           mov fp, sp\n|           0x00401d0e      82b0           sub sp, 8\n|           0x00401d10      0d48           ldr r0, str.test1  ; [0x40d150:4]=0x ; \"test1\"\n|           0x00401d12      00f04bf8       bl fcn.00401dac\n|           0x00401d16      0b48           ldr r0, str.test2  ; [0x40d158:4]=0x ; \"test2\"\n|           0x00401d18      00f048f8       bl fcn.00401dac\n|           0x00401d1c      0848           ldr r0, str.after_a_b;[0x40d160:4]=; \"after a+b\"\n|           0x00401d1e      00f045f8       bl fcn.00401dac\n|           0x00401d22      0648           ldr r0, str.test4  ; [0x40d16c:4]=0x ; \"test4\"\n|           0x00401d24      00f042f8       bl fcn.00401dac\n|           0x00401d28      0521           movs r1, 5         ; 5\n|           0x00401d2a      0420           movs r0, 4         ; 4\n|           0x00401d2c      fff7d8ff       bl fcn.00401ce0\n|           0x00401d30      0023           movs r3, 0\n|           0x00401d32      0093           str r3, [sp]\n|           0x00401d34      0098           ldr r0, [sp]\n|           0x00401d36      02b0           add sp, 8\n\\           0x00401d38      bde80088       pop.w {fp, pc}\n[0x00401fa0]&gt;\n</code></pre>\n<p>so you can see your F() is at 0x401ce0</p>\n<pre><code>[0x00401fa0]&gt; pdf @0x401ce0\n/ (fcn) fcn.00401ce0 38\n|   fcn.00401ce0 ();\n|              ; UNKNOWN XREF from 0x00401d2c (fcn.00401d08)\n|              ; CALL XREF from 0x00401d2c (fcn.00401d08)\n|           0x00401ce0      03b4           push {r0, r1}\n|           0x00401ce2      2de90048       push.w {fp, lr}\n|           0x00401ce6      eb46           mov fp, sp\n|           0x00401ce8      82b0           sub sp, 8\n|           0x00401cea      049a           ldr r2, [sp, 0x10]\n|           0x00401cec      059b           ldr r3, [sp, 0x14]\n|           0x00401cee      1344           add r3, r2\n|           0x00401cf0      0093           str r3, [sp]\ndamage here and insert an unconditional jump if it is 2 bytes 1cf2\nwill be damaged if more bytes more instruction will be damaged \nbefore print save what you need to restore back do the printf \nrestore what you damage and jump back to a valid address \n|           0x00401cf2      049a           ldr r2, [sp, 0x10]\n|           0x00401cf4      059b           ldr r3, [sp, 0x14]\n|           0x00401cf6      02fb03f3       mul r3, r2, r3\n|           0x00401cfa      0193           str r3, [sp, 4]\n|           0x00401cfc      02b0           add sp, 8\n|           0x00401cfe      5df804bb       ldr fp, [sp], 4\n\\           0x00401d02      5df80cfb       ldr pc, [sp], 0xc\n[0x00401fa0]&gt;\n</code></pre>\n<p>so you need to print after a+b after the address   <code>0x00401cee      1344           add r3, r2</code></p>\n<p>so you should jump from this address to 0x401d1c in the process if you damage the str instruction you may need to restore it in some new place (code caves some new added section whatever </p>\n<p><strong>EDIT</strong><br/>\nassuming you patched <strong>6 bytes from 0x401cf2</strong>  and jumped to <strong>0x401d1c</strong> \nthere you should recreate the 6 bytes  before or after you do your printf() and jumping back </p>\n<p>address bytes original -&gt; address patched bytes -&gt; jmping to new location-&gt;<br/>\nsave the needed registers (if on x86 pushad / pushf / popad / popf instructions   find equivalent for that in arm if there is no wholesale register saving   instructions save them individually )<br/>\nafter that execute your printf<br/>\nafter executing printf repatch the damaged bytes and then patch a jmp back instruction  so that the damaged instructions are executed prior to jumping back</p>\n<p><strong>patching with arm windbg</strong> </p>\n<pre><code>:\\&gt;cdb -z armie.exe\nthe complete function disassembly of F()\n\nMicrosoft (R) Windows Debugger Version 10.0.16299.15 X86\n\n0:000&gt; uf 401ce0\narmie+0x1ce0:\n00401ce0 b403     push        {r0,r1}\n00401ce2 e92d4800 push        {r11,lr}\n00401ce6 46eb     mov         r11,sp\n00401ce8 b082     sub         sp,sp,#8\n00401cea 9a04     ldr         r2,[sp,#0x10]\n00401cec 9b05     ldr         r3,[sp,#0x14]\n00401cee 4413     add         r3,r3,r2\n00401cf0 9300     str         r3,[sp]\n00401cf2 9a04     ldr         r2,[sp,#0x10] &lt;&lt;&lt; patch here \n00401cf4 9b05     ldr         r3,[sp,#0x14]\n00401cf6 fb02f303 mul         r3,r2,r3\n00401cfa 9301     str         r3,[sp,#4]\n00401cfc b002     add         sp,sp,#8\n00401cfe f85dbb04 pop         {r11}\n00401d02 f85dfb0c ldr         pc,[sp],#0xC\n</code></pre>\n<p>patching at 401cf2 and redisassembling to see if b label patch is correct or not \nwindbg uf does control flow and shows it will execute the jmp and printf</p>\n<pre><code>0:000&gt; eb 401cf2 11 e0\n0:000&gt; uf 401ce0\n\narmie+0x1ce0:\n00401ce0 b403     push        {r0,r1}\n00401ce2 e92d4800 push        {r11,lr}\n00401ce6 46eb     mov         r11,sp\n00401ce8 b082     sub         sp,sp,#8\n00401cea 9a04     ldr         r2,[sp,#0x10]\n00401cec 9b05     ldr         r3,[sp,#0x14]\n00401cee 4413     add         r3,r3,r2\n00401cf0 9300     str         r3,[sp]\n\n&gt; (( 0xe011 &amp; 0b0000011111111111 ) &lt;&lt; 1 )+4 + 0x401cf2\nans = 0x00401D18\n\n00401cf2 e011     b           armie+0x1d18 (00401d18) &lt;&lt;&lt; we jumped to printf here \ndamaged two bytes we need to restore it back when we jump back\n\narmie+0x1d18:\n00401d18 f000f848 bl          armie+0x1dac (00401dac)\n00401d1c 4808     ldr         r0,=armie+0xd160 (0040d160) ; [armie+0x1d40 (00401d40)]\n00401d1e f000f845 bl          armie+0x1dac (00401dac)\n-=xxxxxxxxxxxxxxxxxxxxxx===- \n0:000&gt; u 401cf2\narmie+0x1cf2:\n00401cf2 e011     b           armie+0x1d18 (00401d18)\n00401cf4 9b05     ldr         r3,[sp,#0x14]  &lt;&lt;&lt;&lt; only two bytes damaged by patch you need \nto put them back after printf a+b before jumping back here \n00401cf6 fb02f303 mul         r3,r2,r3\n00401cfa 9301     str         r3,[sp,#4]\n\n0:000&gt; \n</code></pre>\n<p>btw if you want to generate bytes for patching like say b label instruction \nyou can use the visual studio armasm  like this </p>\n<pre><code>:\\&gt;dir /b *.obj\nFile Not Found\n\n:\\&gt;cat myasm.asm\n    AREA .text, CODE, ARM\ntest PROC\n    b (0x401d18-0x401cf2)\n    ENDP\n    END\n:\\&gt;armasm myasm.asm\nMicrosoft (R) ARM Macro Assembler Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\n:\\&gt;dir /b *.obj\nmyasm.obj\n\n:\\&gt;link -dump -disasm myasm.obj\nMicrosoft (R) COFF/PE Dumper Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file myasm.obj\n\nFile Type: COFF OBJECT\n\ntest:\n  00000000: E011      b           00000026\n\n  Summary\n\n          74 .debug$S\n           2 .text\n\n:\\&gt;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 20, 2018 at 6:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "arm",
                    "text": "<span class=\"comment-copy\">if I add branch to <code>0x401d1c</code> after  <code>0x00401cee</code>      so all the instructions will changes address</span>",
                    "time": null
                },
                {
                    "user": "arm",
                    "text": "<span class=\"comment-copy\">if I add new  instruction after 0x00401cee so he new instruction  will be locate in 0x00401cf0      and so that all of instructions changed place , so all the link (function call and offset will damage)</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i added a comment on how you are supposed to patch in the answer see if that makes any sense</span>",
                    "time": null
                },
                {
                    "user": "arm",
                    "text": "<span class=\"comment-copy\">I read your comment but I not get you, can you please explain again? I think that if I add branch so all the offset on binary file will damade.   If I edit instruction to branch ( if it less or equal byte compare to branch)  so the instruction that I replace will missing to binary</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">not sure get someone to translate the comment what i meant is you should overwrite the bytes  and then in the destination after you do what you want to do you should also do all the operations that you destroyed while patching</span>",
                    "time": null
                }
            ]
        }
    ]
}