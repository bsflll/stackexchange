{
    "title": "Why are machine code decompilers less capable than for example those for the CLR and JVM?",
    "link": "https://reverseengineering.stackexchange.com/questions/311/why-are-machine-code-decompilers-less-capable-than-for-example-those-for-the-clr",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java and .NET decompilers can (usually) produce an almost perfect source code, often very close to the original.</p>\n<p>Why can't the same be done for the native code? I tried a few but they either don't work or produce a mess of gotos and casts with pointers.</p>\n</div>",
    "votes": "33",
    "answers": 4,
    "views": "12k",
    "tags": [
        "decompilation",
        "x86-64",
        "x86",
        "arm"
    ],
    "user": "Rolf Rolles",
    "time": "Mar 27, 2013 at 10:56",
    "comments": [
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\">Its great that you wrote this post, however it still needs to be in the form of a Q&amp;A. If you could turn this into a set of questions, then it would be even better :)</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">Is that better?</span>",
            "time": null
        },
        {
            "user": "Peter Andersson",
            "text": "<span class=\"comment-copy\">Do you really expand on how to make recovery of high level code difficult? I would skip that part of the question and simply make this about decompilation. Your answer is very good though imo.</span>",
            "time": null
        },
        {
            "user": "Peter Andersson",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky Did you just call your Hex-Rays decompiler crappy with that edit? :P</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Well I was going with the general sentiment you can read in many of such questions :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>TL;DR:  machine code decompilers are very useful, but do not expect the same miracles that they provide for managed languages.  To name several limitations:  the result generally can't be recompiled, lacks names, types, and other crucial information from the original source code, is likely to be much more difficult to read than the original source code minus comments, and might leave weird processor-specific artifacts in the decompilation listing.</p>\n<ol>\n<li><p><strong>Why are decompilers so popular?</strong></p>\n<p>Decompilers are very attractive reverse engineering tools because they have the potential to save a lot of work.  In fact, they are so unreasonably effective for managed languages such as Java and .NET that \"Java and .NET reverse engineering\" is virtually non-existent as a topic.  This situation causes many beginners to wonder whether the same is true for machine code.  Unfortunately, this is not the case.  Machine code decompilers do exist, and are useful at saving the analyst time.  However, they are merely an aid to a very manual process.  The reason this is true is that bytecode language and machine code decompilers are faced with a different set of challenges.</p></li>\n<li><p><strong>Will I see the original variable names in the decompiled source code?</strong></p>\n<p>Some challenges arise from the loss of semantic information throughout the compilation process.  Managed languages often preserve the names of variables, such as the names of fields within an object.  Therefore, it is easy to present the human analyst with names that the programmer created which hopefully are meaningful.  This improves the speed of comprehension of decompiled machine code.</p>\n<p>On the other hand, compilers for machine-code programs usually destroy most of all of this information while compiling the program (perhaps leaving some of it behind in the form of debug information).  Therefore, even if a machine code decompiler was perfect in every other way, it would still render non-informative variable names (such as \"v11\", \"a0\", \"esi0\", etc.) that would slow the speed of human comprehension.</p></li>\n<li><p><strong>Can I recompile the decompiled program?</strong></p>\n<p>Some challenges relate to disassembling the program.  In bytecode languages such as Java and .NET, the metadata associated with the compiled object will generally describe the locations of all code bytes within the object.  I.e., all functions will have an entry in some table in a header of the object.</p>\n<p>In machine language on the other hand, to take x86 Windows disassembly for example, without the help of heavy debug information such as a PDB the disassembler does not know where the code within the binary is located.  It is given some hints such as the entrypoint of the program.  As a result, machine code disassemblers are forced to implement their own algorithms to discover the code locations within the binary.  They generally use two algorithms:  linear sweep (scan through the text section looking for known byte sequences that usually denote the beginning of a function), and recursive traversal (when a call instruction to a fixed location is encountered, consider that location as containing code).</p>\n<p>However, these algorithms generally will not discover all of the code within the binary, due to compiler optimizations such as interprocedural register allocation that modify function prologues causing the linear sweep component to fail, and due to naturally-occurring indirect control flow (i.e. call via function pointer) causing the recursive traversal to fail.  Therefore, even if a machine code decompiler encountered no problems other than that one, it could not generally produce a decompilation for an entire program, and hence the result would not be able to be recompiled.</p>\n<p>The code/data separation problem described above falls into a special category of theoretical problems, called the \"undecidable\" problems, which it shares with other impossible problems such as the Halting Problem.  Therefore, abandon hope of finding an automated machine code decompiler that will produce output that can be recompiled to obtain a clone of the original binary.</p></li>\n<li><p><strong>Will I have information about the objects used by the decompiled program?</strong></p>\n<p>There are also challenges relating to the nature of how languages such as C and C++ are compiled versus the managed languages; I'll discuss type information here.  In Java bytecode, there is a dedicated instruction called 'new' to allocate objects.  It takes an integer argument which is interpreted as a reference into the .class file metadata which describes the object to be allocated.  This metadata in turn describes the layout of the class, the names and types of the members, and so on.  This makes it very easy to decompile references to the class in a way that is pleasing to the human inspector.</p>\n<p>When a C++ program is compiled, on the other hand, in the absence of debug information such as RTTI, object creation is not conducted in a neat and tidy way.  It calls a user-specifiable memory allocator, and then passes the resulting pointer as an argument to the constructor function (which may also be inlined, and therefore not a function).  The instructions that access class members are syntactically indistinguishable from local variable references, array references, etc.  Furthermore, the layout of the class is not stored anywhere in the binary.  In effect, the only way to discover the data structures in a stripped binary is through data flow analysis.  Therefore, a decompiler has to implement its own type reconstruction in order to cope with the situation.  In fact, the popular decompiler Hex-Rays mostly leaves this task up to the human analyst (though it also offers the human useful assistance).</p></li>\n<li><p><strong>Will the decompilation basically resemble the original source code in terms of its control flow structure?</strong></p>\n<p>Some challenges stem from compiler optimizations having been applied to the compiled binary.  The popular optimization known as \"tail merging\" causes the control flow of the program to be mutilated compared to less-aggressive compilers, which usually manifests itself as a lot of goto statements within the decompilation.   The compilation of sparse switch statements can cause similar problems.  On the other hand, managed languages often have switch statement instructions.</p></li>\n<li><p><strong>Will the decompiler give meaningful output when obscure facets of the processor are involved?</strong></p>\n<p>Some challenges stem from architectural features of the processor in question.  For example, the built-in floating point unit on x86 is a nightmare of an ordeal.  There are no floating point \"registers\", there is a floating point \"stack\", and it must be tracked precisely in order for the program to be properly decompiled.  In contrast, managed languages often have specialized instructions for dealing with floating-point values, which are themselves variables.  (Hex-Rays handles floating point arithmetic just fine.)  Or consider the fact that there are many hundreds of legal instruction types on x86, most of which are never produced by a regular compiler without the user explicitly specifying that it should do so via an intrinsic.  A decompiler must include special processing for those instructions which it supports natively, and so most decompilers simply include support for the ones most commonly generated by compilers, using inline assembly or (at best) intrinsics for those which it does not support.</p></li>\n</ol>\n<p>These are merely a few of the accessible examples of challenges that plague machine code decompilers.  We can expect that limitations will remain for the foreseeable future.  Therefore, do not seek a magic bullet that is as effective as managed language decompilers.</p>\n</div>",
            "votes": "47",
            "user": "Smi",
            "time": "Oct 19, 2013 at 17:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">On 6. When code has gone through <i>pipeline optimization</i>, a logical sequence of single operations may get mixed with the previous and/or next logical block of operations.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Decompilation is difficult because decompilers must recover source-code abstractions that are missing from the binary/bytecode target.</p>\n<p>There are several types of abstractions:</p>\n<ul>\n<li>Functions: The identification of code corresponding to a high function, with its entrance, arguments, return value(s) ,and exit.</li>\n<li>Variables: The local variables in each function, and any global or static variables.</li>\n<li>Types: The type of each variable, and each function's arguments and return value.</li>\n<li>High-level control flow: The control flow schema of a program, e.g., <code>while (...) { if (...) {...} else {...} }</code> </li>\n</ul>\n<p>Decompiling native code is difficult because none of these abstractions are represented explicitly in the native code. Thus, to produce nice decompiled code (i.e., not using <code>goto</code>s everywhere), decompilers must reinfer these abstractions based on the behavior of the native code.  This is a difficult process, and many papers have been written on how to infer those abstractions. See <a href=\"http://www.cs.wisc.edu/wpis/abstracts/wysinwyx.final.abs.html\">Balakrishnan</a> and <a href=\"http://users.ece.cmu.edu/~aavgerin/papers/tie-ndss-2011.pdf\">Lee</a> for starters.</p>\n<p>In contrast, bytecode is easier to decompile because it usually contains enough information to permit <em>type checking</em>.  As a result, bytecode typically contains explicit abstractions for functions (or methods), variables, and the type of each variable.  The primary abstraction missing in bytecode is high-level control flow.</p>\n</div>",
            "votes": "11",
            "user": "Ed McMan",
            "time": "Mar 27, 2013 at 17:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As someone who has worked on a suite of Python decompilers, I have thought about this a bit.</p>\n<p>I am going to take a different tack than other bottom-up answers; I start to describe the situation from a slightly more general and philosophical side which I think is easy to see.</p>\n<p><em>tl;dr:</em></p>\n<p>Think of this as a common situation where someone is trying to reconstruct an object from its fragmented pieces. For example why might a smashed sandcastle be harder to reconstruct than a broken ceramic vase? From this point of view, there would be no surprise. For sure, a real explanation of the sand versus ceramic problem would involve adhesion strength of the materials, properties of fracturing for the materials involved, and mending techniques. Similarly, the properties of computer languages, compilers, runtime systems, machine code and decompilation techniques can vary just as much as sand castles and ceramic vases.</p>\n<h1>A little background</h1>\n<p>In general, compilation performs a kind of information entropy loss. This may seem surprising since the source code and the binary object are supposed to be semantically identical. Yes, that is true, but only with respect to how <em>computers</em> understand the world.</p>\n<p>And although humans were the inventors or creators of computers, it seems strange that the world in which the computer operates, its \"experience\" of the world, is already so different than the experience of a human programmer.</p>\n<p>It is easier to build a machine that just understands how to perform logic, arithmetic, read memory locations, and jump to different program states than it is to build a computer that inherently understands concepts in programming and its patterns and paradigms, algorithms, or data structures which is the level that programmers may operate in.</p>\n<p>So in a sense, one thing that fascinates me here is the inherent problem of communicating between different forms of \"intelligence\". If it is this hard here, the simplistic idea that we would ever be able to communicate with some sort of alien life where our level of shared experience may be much less is, in my opinion almost hopeless. In addition to the problems seen in decompilation, you have additional problems with transmission speed and delay, and just topics that we might both be interested in.</p>\n<p>As an example, using the cited \"Universal Language\" of Mathematics, if intelligent life is in a highly curved geometry where all \"parallel\" lines always touch or always diverge, then all this Euclidean Geometry would be super boring for that alien since it would have no practical use. And Shakespeare's Poetry - forget about it!</p>\n<h1>Factors that go into the level of goodness in translation</h1>\n<p>Although the question posed here is pretty specific, it is also a bit general or maybe vague. Here are factors that go into the ease (and thus quality) that a decompiler can provide:</p>\n<ul>\n<li>What was the source language used?</li>\n<li>How long, sophisticated and complex is the code to be decompiled?</li>\n<li>What specific compiler was used?</li>\n<li>What compiler/translator options were specified along the various pipelines that were involved in the translation?</li>\n<li>Which kind of native code?</li>\n<li>Which specific decompiler was used and what techniques were used there?</li>\n<li>Was there any other packaging, encryption, or code obfuscation done?</li>\n</ul>\n<p>Before delving into each of the categories above, let me first give an analogy using that general principle that basically we are going against information entropy or information loss.</p>\n<h2>Why is it that reconstructing a sand castle is harder than a vase that has been shattered?</h2>\n<p>I suppose this question is a bit general as was question posed. The answer partially depends on how much effort was used to create the initial object, sand castle versus a ceramic vase. One can imagine a very simple primitive sand castle that does not have a lot of detail. Maybe it is just a box of some form. That would be easy to reconstruct while an intricate sand castle would be very hard to reconstruct.</p>\n<p>The complexity of the program is analogous to the shape of the object we are trying to reconstruct.  If your source code or machine code is small and simple, you'd might just dispense with the decompiler and try to understand the machine code.</p>\n<p>And the material for the end result and processes used to create it are important too.</p>\n<p>Reconstructing things made out of sand is much harder than ceramic that has a couple of well-defined factures. This is like the kind of object that gets run: binary code or bytecode. For bytecode, some are higher level then others. Python bytecode, Pascal P-code or GNU Emacs bytecode is more like ceramic than ARM assembly which is more like sand.</p>\n<p>Also, how our sand castle or vase were destroyed is important too. Was the sand castle just kicked once or was at worn away by the tide repeatedly? And was the vase just accidentally dropped on the floor once or was it smashed to little pieces by a hammer?</p>\n<p>The analogous process here has the compilation process. Was this a \"one-pass\" compiler like CPython or a multi-stage compilation pipeline that say GNU gcc or clang do where levels of \"optimization\" have been turned on?</p>\n<p>And finally we get to the amount of effort or care you want to put in to recreating the initial object. If this vase is not of much value to you, you probably won't bother to do a careful and accurate job if you bother at all. Getting something approximately vase like, might be good enough for your needs.  However if the vase is precious, well then you probably <em>will</em> spend a lot of effort to reconstruct the original. In fact when my mother broke a vase that she considered a precious heirloom, she hired professionals from the Smithsonian Museum in Washington DC to reconstruct the part of the vase that was broken.</p>\n<h1>Some of the Details</h1>\n<p>Having the above out of the way, we can get to the nitty gritty. Just as with sand castles versus ceramic vases, I'll focus on two examples which are at opposite extremes.</p>\n<p>But first some factors to consider.</p>\n<p>Decompilation quality depends on:</p>\n<ul>\n<li>the language the code was written in</li>\n<li>The compiler you started with</li>\n<li>compiler flags,</li>\n<li>code object</li>\n<li>the specific decompiler used</li>\n<li>Additional packaging and/or deliberate obfuscation</li>\n</ul>\n<p>I will give an example that I know very well.</p>\n<h2>Python/CPython/uncompyle6</h2>\n<ul>\n<li>language: Python (versions matter, but overall let's say in the 1.5 to 3.8 range)</li>\n<li>compiler: CPython</li>\n<li>compiler flags - none (which is the default)</li>\n<li>code object: : High-level custom bytecode</li>\n<li>specific decompiler: uncompyle6 or decompyle3 (for 3.7 and 3.8)</li>\n<li>maintenance effort of decompiler: basically one unpaid volunteer person, me</li>\n</ul>\n<p>Many people have noted that this decompiles very well. Here are the factors why this is so:</p>\n<p>Python stores docstring comments in the code which is nice for humans looking at decompiled code, although it doesn't really change the decompilation process.\nAlso there are standards for Python code formatting. So if the human and decompiler follow the same standard and there is basically only one, the the result will look similar.</p>\n<p>The CPython compiler is a \"one pass\" compiler that doesn't do much in the way of code improving or code transformations. But as we move to later versions, More recent versions of CPython has been doing more here.</p>\n<p>Python bytecode is also extremely high level. Variable, class, function and module names are all preserved. Python and Python bytecode are loose with type declarations.</p>\n<p>The Python decompiler that I have been working on and maintaining makes use very specific idioms that can be found in instruction patterns. Since early Python translated everything one way (even though in theory there are many ways that it could choose), this kind of pattern driven approach is able to disambiguate between semantically identical code. For example <code>if x: if y: ...</code> versus <code>if x and y</code>. Earlier CPython create different kinds of code fragments for nested <code>if</code>s versus <code>and</code>.</p>\n<h2>C/gcc/-O/ARM/Ghidra</h2>\n<p>Here I compare that with something at the other extreme and that I know less well. Some aspecs I know only vaguely.</p>\n<ul>\n<li>language: C</li>\n<li>compiler gcc</li>\n<li>compiler flags -O (typically used)</li>\n<li>code object ARM</li>\n<li>specific decompiler: Ghidra?</li>\n<li>maintenance effort of decompiler: probably more than one person, paid either via grant or as part of some other job-related duty</li>\n</ul>\n<p>Python docstrings are, I suppose, a form of comment. In C any sort of document commenting is form of a comment; and all comments in C are stripped.</p>\n<p>GCC is at least 3 or 4 distinct phases. C preprocessor, C compiler to assembly, assembly, and then a linking phase. The C compiler phase though can make several passes over the AST it produces, and or the instructions it produces. There is <em>a lot</em> of opportunity for code mangling that may need to be undone.</p>\n<p>Unless you have symbol table generation turned on, <code>-g</code>, the mapping of memory locations and/or registers to names is gone. At the assembly level, any structure or type information is gone.</p>\n<p>C indention can come in one of several varieties. One could run the result through a formatter, assuming the Ghidra produces valid C. But I suspect it doesn't.</p>\n<p>It is very possible that nested <code>if</code> and <code>&amp;&amp;</code> could compile to the same instructions. And there may be more than one template that a compiler might use for a single construct.</p>\n<p>But even if a particular compiler for a particular language is passed a particular set of options that compiles <code>if</code> and <code>&amp;&amp;</code> differently, I doubt that the way Ghidra's decompiler hones in on a specific compiler's code idioms for most things.\nMy understanding is that the decompiler(s) in Ghidra are <em>general purpose</em> which means that they do not take into consideration that <em>specific</em> language, compiler or compiler options used. They work the same way on machine code whether the compiler used was <code>gcc</code>, <code>clang</code> or some vendor's C compiler like the ones IBM or Intel have. Or whether the source language was C++ instead of C.</p>\n<p>And this is an interesting aspect too. It takes a bit of effort to teach a decompiler about some specific compiler's quirks or habits. These things can change over time depending on the language and within a language like C, C compiler and compiler version, and the assembly language that is produced. Since there are:</p>\n<ul>\n<li>many different kinds of front end languages,</li>\n<li>many different translators,</li>\n<li>compilers releases constantly changing code-generation methods</li>\n<li>the variations in code generation for the same construct (sometimes randomness may play a role here), and</li>\n<li>many different back ends</li>\n</ul>\n<p>it probably isn't worth the maintenance effort to hone in on idiosyncrasies of a particular compiler system at a particular point in time.</p>\n<p>In the CPython/Python case, there is basically only <em>one</em> compiler CPython. Bytecode does vary from major release. For example between 3.5 to 3.6 there were a number of bytecode changes. However a Major release is on the order of a year. And many times the code generation doesn't change. However Python bytecode does vary a lot more than many other kinds of bytecode. Most bytecode stays the same. JVM stays largely the same. Emacs bytecode and P-Code stay the same over longer periods of time.</p>\n<p>Because Ghidra is general purpose, it has a general purpose algorithm for detecting control flow. In uncompyle6 and decompyle3 we can do pretty well using the patterns approach. There has been some problem with control flow in the past, but recent not public versions of this code do very well by adding basic block and dominator information as pseudo instructions of the bytecode. Basically you can think of the instructions having additional parenthesis and comma marks to help detect nesting versus sequencing around jumps.</p>\n<p>As for maintenance, I imagine there have been more than one person working on the decompilation aspect. And I imagine that person is funded at least partially by grants if this is not a part of the person's day job.</p>\n<p>I mention the maintenance aspect because the person-hours that are spent on decompilers is much less than the person-hours spent in the compiler code generation.</p>\n</div>",
            "votes": "2",
            "user": "rocky",
            "time": "Jul 18, 2023 at 10:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java and .NET both include a feature called \"reflection\", which makes it possible to access inner workings of a class and instances thereof, using runtime-generated strings that hold the names of those features.  In C code, if one includes a structure definition:</p>\n<pre><code>struct foo { int x,y,z,supercalifragilisticexpialidocious; };\n</code></pre>\n<p>expressions that access field <code>supercalifragilisticexpialidocious</code> will generate machine code that accesses an <code>int</code>-sized object at offset <code>3*sizeof(int)</code> in the structure, but nothing in the machine code will care about the name.</p>\n<p>In C# by contrast, if code that was running with suitable Reflection permissions were to generate the string <code>x</code>, <code>y</code>, <code>z</code>, <code>supercalifragilisticexpialidocious</code>, or <code>woof</code> somehow, and used Reflection functions to retrieve the value of the field having that name (if any) from an instance of that type, the Runtime would need to have access to the names of those fields.  Even if a program would in fact never use Reflection to access the fields by name, there would generally be no way the Compiler could know that.  Thus, compilers need to include within executable programs the names of almost all identifiers used the source code, without regard for whether anything would ever care about whether or not they did so.</p>\n</div>",
            "votes": "1",
            "user": "supercat",
            "time": "Jun 8, 2023 at 17:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}