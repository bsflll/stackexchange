{
    "title": "does arbitrary kernel read write from usermode count as a vulnerability if it requires admin",
    "link": "https://reverseengineering.stackexchange.com/questions/31138/does-arbitrary-kernel-read-write-from-usermode-count-as-a-vulnerability-if-it-re",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Does arbitrary kernel read write from usermode count as a vulnerability if it requires admin or is it fine since it requires admin?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "182",
    "tags": [
        "kernel",
        "vulnerability-analysis"
    ],
    "user": "s0x",
    "time": "Nov 15, 2022 at 22:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Generally this would <em>not</em> be considered a vulnerability, <strong>no</strong>.</p>\n<p>You aren't giving details, so I cannot speak for your specific case. You don't even mention the operating system [1].</p>\n<h2>Why? A hypothetical scenario on Windows</h2>\n<p>But let's assume Windows 10/11 for a second. The <code>BUILTIN\\Administrators</code> alias and also the built-in <code>Administrator</code> principal (RID == 500) has certain powers that provide pathways into the <a href=\"https://en.wikipedia.org/wiki/Trusted_computing_base\" rel=\"nofollow noreferrer\">TCB</a>. One such way would be a service. While still being user mode (UM), it allows an administrator to execute code as <code>NT AUTHORITY\\SYSTEM</code> (aka \"LocalSystem\") or <code>NT SERVICE\\TrustedInstaller</code>. Enabling all privileges in that user context will bestow a lot of power already. But we can take it one further. The service control manager (SCM) isn't just responsible for UM services, but also for kernel mode (KM) drivers, with the exception of PnP drivers. So, an administrator could install a driver (perhaps after enabling test signing via <code>bcdedit</code>) and then simply read/write kernel memory at will by talking to that driver (<code>ReadFile</code>/<code>WriteFile</code> or <code>DeviceIoControl</code>).</p>\n<p>So as you can see an administrator has <em>already</em> the privileges necessary to run code that can read/write kernel memory.</p>\n<p>That's why it would not be considered a vulnerability.</p>\n<hr/>\n<h2>... however</h2>\n<p>Suppose that little precondition with already being an administrator didn't exist. Something, <a href=\"https://github.com/namazso/physmem_drivers\" rel=\"nofollow noreferrer\">such as a vulnerable driver</a>, would allow an <em>unprivileged user</em> to read/write kernel memory. That would be a vulnerability for sure and <a href=\"https://www.microsoft.com/en-us/wdsi/driversubmission\" rel=\"nofollow noreferrer\">you could report the responsible kernel mode driver here</a>.</p>\n<hr/>\n<p>[1] Consider modern Linux. <em>If</em> whatever you found would allow a rootless container (think Podman) to read/write kernel memory of the hosting kernel, that'd be a huge issue and most certainly be considered a vulnerability. Back on Windows if an app container or code in a silo could read/write kernel memory that would be comparable (these entities generally have less privileges than any administrator on the system hosting the container/silo).</p>\n</div>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Nov 16, 2022 at 10:12",
            "is_accepted": true,
            "comments": []
        }
    ]
}