{
    "title": "Using QEmu monitor interface to extract execution traces from a binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/4738/using-qemu-monitor-interface-to-extract-execution-traces-from-a-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My original point was to build something a bit more powerful and generic than a <code>PTRACE</code> system call for Linux platforms. The problem with <code>PTRACE</code> is that it only run on your own system and architecture.</p>\n<p>An idea would be to run a virtual machine (or, better, an emulator) with a different operating system and a (possibly) different architecture on it.</p>\n<p>While looking for the ideal candidates, I found the <a href=\"http://en.wikibooks.org/wiki/QEMU/Monitor\">QEmu monitor interface</a> and several projects using <a href=\"http://wiki.qemu.org/Main_Page\">QEmu</a> as OS/architecture emulator to collect traces:</p>\n<ul>\n<li><a href=\"http://www.s3.eurecom.fr/tools/avatar/\">Avatar</a></li>\n<li><a href=\"https://code.google.com/p/decaf-platform/wiki/DECAF\">DECAF</a> (successor of TEMU)</li>\n<li><a href=\"https://github.com/moyix/panda\">PANDA</a></li>\n<li><a href=\"http://s2e.epfl.ch/\">S2E</a> (seems to be a sub-component of Avatar?)</li>\n<li><a href=\"http://bitblaze.cs.berkeley.edu/temu.html\">TEMU</a> (<a href=\"http://bitblaze.cs.berkeley.edu/\">Bitblaze</a>)</li>\n</ul>\n<p>The features I want are similar to the <code>PTRACE</code> interface (freeze execution, step by step runs, memory and registers read and write, ...) all with several OSes and several architectures. </p>\n<p>My questions:</p>\n<ul>\n<li>Did I forgot some similar projects in my list ?</li>\n<li>Can the QEmu monitor interface provide a system/architecture agnostic <code>PTRACE</code> interface just as I want ? And, if not, what are the main issues I might run into while implementing it inside QEmu ?</li>\n</ul>\n</div>",
    "votes": "14",
    "answers": 2,
    "views": "5k",
    "tags": [
        "dynamic-analysis",
        "qemu"
    ],
    "user": "perror",
    "time": "Jun 30, 2014 at 11:23",
    "comments": [
        {
            "user": "Phani",
            "text": "<span class=\"comment-copy\">Did you implement this? Can you update on your experience with this?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>PANDA developer here. I think that actually most of the things you want are supported by QEMU's native gdbstub. If you start QEMU with the <code>-s -S</code> options, it will listen on port 1234 for incoming connections, and provide the functionality you want, including:</p>\n<ul>\n<li>Single-step using the <code>si</code> command</li>\n<li>Register get/set using <code>info reg</code> and (for example) <code>set $edi = 0x40c8c39</code></li>\n<li>Reading memory contents with the <code>x</code> command</li>\n<li>Modify memory using <code>set *(char *) 0x1a5f2c0 = 0xd9</code></li>\n<li>Breakpoints using (e.g.) <code>break *0x826e2671</code></li>\n</ul>\n<p>So using some gdb scripting, I think you should be able to get the capabilities you want with plain gdb and QEMU.</p>\n<p>All this was just tested using a Windows 7 32-bit VM and gdb using the <code>target remote :1234</code> command.</p>\n</div>",
            "votes": "10",
            "user": "Brendan Dolan-Gavitt",
            "time": "Jul 4, 2014 at 0:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Can this setup tell me if an instruction reads from, or modifies memory (and the value that is read/written?). I guess PANDA could do it, right?</span>",
                    "time": null
                },
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">You can set memory or instruction breakpoints, as you normally would with gdb. You wouldn't be able to watch <i>every</i> memory read with this approach, but you could with PANDA.</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">I posted a related question (regarding PANDA) here: <a href=\"http://reverseengineering.stackexchange.com/questions/12313/getting-list-of-opcodes-from-panda-trace\" title=\"getting list of opcodes from panda trace\">reverseengineering.stackexchange.com/questions/12313/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Past TEMU user here.   Perhaps you should attempt to understand TEMU more (which I don't), to prevent duplicating the work already done.   PTRACE only records syscall transitions, but if you go under QEMU, a better granularity is basic blocks.   Not sure if TEMU has the capacity to do that, the idea is the each basic block can uniquely identify part of the path taken, without going into lower level of details at the registers/values level.   ie, less noise, but more refined than syscall.   Knowing the the full state of the registers at each entry and exit point of the basic block, can almost deterministically decide what is the path the entire execution trace will look like, minus all the intermediate registers values, which can be derived if need to.   (\"almost\", because asynchronous event like interrupt can happened).</p>\n<p>Update:</p>\n<p>There is another option:   <a href=\"http://wiki.qemu.org/\" rel=\"nofollow\">QEmu</a> + <a href=\"http://www.lttng.org/\" rel=\"nofollow\">Lttng</a>, but since default Qemu does not provide that feature, you have to download the QEMU source code, and compile it to enable lttn-ust tracing.</p>\n<p><a href=\"http://linuxmogeb.blogspot.sg/2014/08/how-to-trace-qemu-using-lttng-ust.html\" rel=\"nofollow\">http://linuxmogeb.blogspot.sg/2014/08/how-to-trace-qemu-using-lttng-ust.html</a></p>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Jun 22, 2015 at 17:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}