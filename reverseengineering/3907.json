{
    "title": "OllyDbg FPU anti-debug",
    "link": "https://reverseengineering.stackexchange.com/questions/3907/ollydbg-fpu-anti-debug",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While playing around with FPU instructions I discovered an anti-debugging trick for\nOllyDbg. I haven't found it in popular references so far.</p>\n<p>First of all here it is.</p>\n<pre><code>fnsave [esp-100h]\ncmp word ptr [esp-0EEh], 07FFh      ; 07FFh (all bits set) in Olly 2\n                                    ; 0000h in Olly 1\n                                    ; something different otherwise\nje @being_debugged\n</code></pre>\n<p>The code fragment checks the \"Last Instruction Opcode\" at +0x12. According to Intel manuals it's set if and only if an exception occured.</p>\n<p>The value is set only once, it doesn't work when restarting (&lt;&lt;) the program.</p>\n<p>But I don't know where the values come from. When Olly calls GetThreadContext() of debuggee, the value is already set. Other debuggers does not seem to behave like this.</p>\n<p>Can anyone confirm this? Tested on Win XP SP3, Intel P4.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "769",
    "tags": [
        "ollydbg",
        "anti-debugging"
    ],
    "user": "RomeoAndJuliet",
    "time": "Mar 19, 2014 at 12:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Last Instruction Opcode is set mainly for the use of exception handlers, but it's set for every non-control FPU instruction (that is, set by loads, stores, compares, etc).</p>\n<p>The value is non-zero on my system, but it is different value, and it's not constant.</p>\n<p>Olly 1 doesn't request as many context fields as Olly 2 does, and that's part of the reason why the values are different.  The context structure initialization leaves some fields unassigned.  It's not specific to Olly that some of the bits are set.  Also note that the value of (0xd800+)0x7ff does not decode to any meaningful instruction.</p>\n<p>In short, not a reliable detection method.</p>\n</div>",
            "votes": "7",
            "user": "peter ferrie",
            "time": "Mar 19, 2014 at 20:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}