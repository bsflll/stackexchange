{
    "title": "Finding the encryption key in a binary - IDA Pro and how an S-box might be represented in the binary",
    "link": "https://reverseengineering.stackexchange.com/questions/17129/finding-the-encryption-key-in-a-binary-ida-pro-and-how-an-s-box-might-be-repre",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In practicing reading source code and analysing I've been looking at a program called <code>aescrypt2_huawei</code> which floats around the web and encrypts/decrypts the XML config file from Huawei routers like the HG8245 router installed by Internet Service Providers. The router is discussed on a number of <a href=\"https://zedt.eu/tech/hardware/obtaining-administrator-access-huawei-hg8247h/\" rel=\"nofollow noreferrer\">blogs</a> and the <a href=\"https://zedt.eu/storage/2016/02/aescrypt2_huawei.zip\" rel=\"nofollow noreferrer\">aescrypt2</a> can be downloaded and examined. I have also found the <a href=\"https://github.com/palmerc/AESCrypt2\" rel=\"nofollow noreferrer\">source code</a> and put it on GitHub.</p>\n<p>So far I've found:</p>\n<ul>\n<li><a href=\"https://github.com/coruus/nist-testvectors/blob/master/csrc.nist.gov/groups/ST/toolkit/documents/Examples/SHA256.txt\" rel=\"nofollow noreferrer\">NIST SHA256 Test Vector</a> in the source </li>\n<li>inflate 1.2.5 calling code</li>\n<li>Identified the code path to the decrypt section</li>\n</ul>\n<p>What I haven't found:</p>\n<ul>\n<li>Any S-boxes for AES</li>\n<li>The key</li>\n</ul>\n<p>Running <code>findcrypt</code> in IDA Pro is also not turning up anything which leads me to believe my <code>findcrypt</code> plugin isn't working. However, I then start looking for the S-boxes sequence 0x63 0x7c which can easily be found in the source code and IDA pro doesn't find that either... I then dropped to hexdump and searched for 0x63 and it is not there. Given that I can see the S-box in the source and I just compiled the binary myself what am I doing wrong?</p>\n<p>Shouldn't the forward S-box appear in the data segment more or less as-is?</p>\n<p>And now that I've found the key through the debugger in the <code>.bss</code> segment why isn't the string in the data segment?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "9k",
    "tags": [
        "ida",
        "encryption"
    ],
    "user": "Cameron Lowell Palmer",
    "time": "Jan 6, 2018 at 16:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Initialization of the forward S-box</h2>\n<p>As you probably saw in the source-code, the forward S-box is present several times and initialized at two different places. </p>\n<p>The first time that the forward S-box (<code>Fsb</code>) is declared is at the top of <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c\" rel=\"noreferrer\"><code>aes.c</code></a>:</p>\n<pre><code>uint32 FSb[256];\n</code></pre>\n<p>This array is then dynamically <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c#L93\" rel=\"noreferrer\">generated</a> by <code>aes_gen_tables()</code> like this:</p>\n<pre><code>FSb[0x00] = 0x63;\nRSb[0x63] = 0x00;\n\nfor( i = 1; i &lt; 256; i++ )\n{\n    x = pow[255 - log[i]];\n\n    y = x;  y = ( y &lt;&lt; 1 ) | ( y &gt;&gt; 7 );\n    x ^= y; y = ( y &lt;&lt; 1 ) | ( y &gt;&gt; 7 );\n    x ^= y; y = ( y &lt;&lt; 1 ) | ( y &gt;&gt; 7 );\n    x ^= y; y = ( y &lt;&lt; 1 ) | ( y &gt;&gt; 7 );\n    x ^= y ^ 0x63;\n\n    FSb[i] = x;\n    RSb[x] = i;\n}\n</code></pre>\n<p>The other initialization of <code>Fsb[256]</code> is <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c#L143\" rel=\"noreferrer\">easy to spot</a> in the code file and is a static constant which is defined like this:</p>\n<pre><code>/* forward S-box */\n\nstatic const uint32 FSb[256] =\n{\n    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,\n    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,\n    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,\n    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,\n    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,\n    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,\n    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,\n\n         &lt; ... Truncated for readability ... &gt;\n\n    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,\n    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,\n    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16\n};\n</code></pre>\n<hr/>\n<h2>Two initialization of <code>Fsb[]</code>?</h2>\n<p>Yes, the author of the program describes it in the <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c#L27\" rel=\"noreferrer\">comments</a>:</p>\n<pre><code>/* uncomment the following line to use pre-computed tables */\n/* otherwise the tables will be generated at the first run */\n\n/* #define FIXED_TABLES */\n\n#ifndef FIXED_TABLES\n\n/* forward S-box &amp; tables */\n...\n...\n...\n\n#else\n\n/* forward S-box */\n\nstatic const uint32 FSb[256] =\n{\n    0x63, 0x7C, 0x77, ...\n...\n...\n</code></pre>\n<p>Thus, if you want the array to be pre-determined, just uncomment <code>#define FIXED_TABLES</code> and you'll be fine.</p>\n<hr/>\n<h2>Debugger time!</h2>\n<p>The functions which is responsible to generate the forward S-box is <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c#L66\" rel=\"noreferrer\"><code>aes_gen_tables( void )</code></a> which is called from <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c#L437\" rel=\"noreferrer\"><code>aes_set_key( ... )</code></a>. The latter is called from the <a href=\"https://github.com/palmerc/AESCrypt2/blob/master/aescrypt2.c#L269\" rel=\"noreferrer\">aescrypt2.c</a>. We can spot the call to <code>aes_set_key()</code> in IDA:</p>\n<p><a href=\"https://i.sstatic.net/IRM9M.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/IRM9M.png\"/></a></p>\n<p>From there, locating <code>aes_gen_tables()</code> is easy peasy:</p>\n<p><a href=\"https://i.sstatic.net/76wXw.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/76wXw.png\"/></a></p>\n<p>As we said, the array is dynamically filled with values and we can view it using the debugger. Let's find the address of the array to be initialized and put a Hardware Breakpoint on Write on this address.</p>\n<p>Here's the part where the first item of the <code>Fsb</code> is initialized:</p>\n<p><a href=\"https://i.sstatic.net/GMcCY.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/GMcCY.png\"/></a></p>\n<p>This is the equivalent <a href=\"https://github.com/palmerc/AESCrypt2/blob/ecc335e7dc8a9622b22463f41ee42e54c0978139/aes.c#L90\" rel=\"noreferrer\">part</a> from the source code:</p>\n<pre><code>/* generate the forward and reverse S-boxes */\n\nFSb[0x00] = 0x63;\nRSb[0x63] = 0x00;\n</code></pre>\n<p>Now put the Hardware Breakpoint on <code>0x00412F00</code>:</p>\n<p><a href=\"https://i.sstatic.net/Y5QvM.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Y5QvM.png\"/></a></p>\n<p>Now we all set and we can start the debug session. Press the play button and start the program, then you'll have to input information to the console that has just popped up. After done, pressing <kbd>Enter</kbd> in the console will trigger our HW breakpoint. This is where <code>Fsb[0]</code> is set to 0x63. Press the play button and the breakpoint again will be triggered, this time it's at the end of the generation loop and our array will be filled:</p>\n<p><a href=\"https://i.sstatic.net/VVkhu.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VVkhu.png\"/></a> </p>\n<p>There we go, now we found our forward S-box after it was dynamically generated by the program.</p>\n</div>",
            "votes": "8",
            "user": "Megabeets",
            "time": "Jan 6, 2018 at 20:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Cameron Lowell Palmer",
                    "text": "<span class=\"comment-copy\">I was wondering how to set a hardware breakpoint like that although I didn't know what it was called. Also, I was trying not to cheat too much by looking at the source code so I didn't notice that #define either. Very cool!</span>",
                    "time": null
                }
            ]
        }
    ]
}