{
    "title": "How to know the arguments of a Linux syscall?",
    "link": "https://reverseengineering.stackexchange.com/questions/19416/how-to-know-the-arguments-of-a-linux-syscall",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To my knowledge, <a href=\"https://syscalls.kernelgrok.com/\" rel=\"nofollow noreferrer\">this</a> is a decent resource to know the parameters of a Linux syscall. However, this only lists 32 bit syscalls, not the 64 bit ones. Moreover, the reference doesn't say which register is being used by what parameter.</p>\n<p>So far I understand, the man-pages for the libc wrappers or referring to the Linux kernel headers can be a solution. But, I am looking for a more friendly resource that can be consulted quickly.</p>\n<ul>\n<li>What is an authentic resource to know the parameter to register mappings?</li>\n<li>Is there a resource for 64 bit syscalls as well?</li>\n</ul>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "5k",
    "tags": [
        "linux",
        "system-call"
    ],
    "user": "sherlock",
    "time": "Sep 21, 2018 at 10:33",
    "comments": [
        {
            "user": "Twifty",
            "text": "<span class=\"comment-copy\">Doesn't the man page <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\" rel=\"nofollow noreferrer\">man7.org/linux/man-pages/man2/syscall.2.html</a> list them?</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">I guess you just need to learn how to use <code>man</code>. Do you know the search feature in <code>less</code>?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://stackoverflow.com/questions/2535989/what-are-the-calling-conventions-for-unix-linux-system-calls-on-i386-and-x86-6\">This StackOverflow answer</a> is a great resource.</p>\n<p>In summary, for 32 bits: Syscall number is eax. ebx, ecx, edx, esi, edi, ebp are used for arguments. You invoke the syscall with <code>int 0x80</code>. All registers are preserved after the syscall.</p>\n<p>For 64 bit, that answer cites <a href=\"http://refspecs.linuxfoundation.org/elf/x86_64-abi-0.99.pdf\" rel=\"nofollow noreferrer\">this</a> specification, which might be a good \"authentic resource\" as you asked for.</p>\n<p><a href=\"http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/\" rel=\"nofollow noreferrer\">This</a> is a good syscall table for 64 bit.</p>\n<p><a href=\"https://syscalls.kernelgrok.com/\" rel=\"nofollow noreferrer\">This</a> is a good syscall table for 32-bit.</p>\n</div>",
            "votes": "4",
            "user": "user464014",
            "time": "Sep 22, 2018 at 20:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wouldn't call it <em>authentic</em>, but <a href=\"https://filippo.io/linux-syscall-table/\" rel=\"nofollow noreferrer\">this</a> surely is a source I've been using for quite some time now.</p>\n<p>Double click on the line of the syscall to see what the parameters are (and their types). </p>\n<p>You may see things like <code>struct sockaddr __user</code>, for these you need to dig a bit into the source files.</p>\n</div>",
            "votes": "1",
            "user": "Elian Kamal",
            "time": "Sep 22, 2018 at 11:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}