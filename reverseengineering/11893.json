{
    "title": "Creating my own custom structure in Ollydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/11893/creating-my-own-custom-structure-in-ollydbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In Ollydbg's hex dump window (lower left quadrant of CPU window) one can interpret data as structures, you can right-click on one or more bytes and see the options \"Decode as structure\" or \"Decode as pointer to structure\" (if more than one byte selected).  It then opens a new window with the data laid out vertically, with each data element shown as a row.  You can decode more than one instance.  </p>\n<p>However, I'd like to add my own structure types.  Imagine I have this structure:</p>\n<pre><code>typedef struct {\n           double x,y,z;   \n           unsigned char id;\n           int label;\n           char *name_string;\n           anotherStructType *struct;       \n           } model_type;\n</code></pre>\n<p>Below are some images showing the steps, with the fixed structure type \"COORD\" chosen.  Imagine I want to decode it instead with the above 'model_type' structure type.  Perhaps the answer lies in some command line or .ini manual setting?</p>\n<p>Also, it would be nice if this could be used along with labels to identify struct elements in the disassembly window, for example [EAX+1C] could be interpreted as 'player.id' if one could somehow tell Olly EAX is the base pointer.  But perhaps I'm getting carried away...</p>\n<p><a href=\"https://i.sstatic.net/YBsmI.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/YBsmI.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/EIXAu.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/EIXAu.png\"/></a>\n<a href=\"https://i.sstatic.net/tUIyb.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/tUIyb.png\"/></a></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "Markbotix",
    "time": "Jan 30, 2016 at 9:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>BE AWARE</strong> <code>what follows are undocumented stuff</code> </p>\n<p>create a <code>file either named as [binary].arg</code> or <code>common.arg</code><br/>\nthe first name is applicable to only to the specific [binary]<br/>\nthe second name common.arg is applicable globally </p>\n<p>paste this inside the file </p>\n<pre><code>STRUCT _MYSTRUCT\nQWORD DOUBLE x\nQWORD DOUBLE y\nQWORD DOUBLE z\nBYTE  CHAR  id\nDWORD INT label\nDWORD ASCII* name\nDWORD INT* foo\nEND\n</code></pre>\n<p>drop the file in the folder where ollydbg resides.<br/>\n_MYSTRUCT should be available in the drop down box now </p>\n<p><code>STRUCT</code> is a keyword<br/>\nstruct names need a leading underscore<br/>\nthe members are defined like<br/>\nFIELDSIZE, TYPENAME , MEMBERNAME   </p>\n<p>valid FIELDSIZE are   </p>\n<ol>\n<li>BYTE</li>\n<li>WORD</li>\n<li>THREE</li>\n<li>DWORD</li>\n<li>QWORD</li>\n<li>TBYTE</li>\n</ol>\n<p>that correspond to sizes <code>1,2,3,4,8,16</code><br/>\nTYEPNAMES are vast you should try and err<br/>\ni have posted some which are common<br/>\nNotice i have cast Your last Structure as INT* instead of anotherstruct*<br/>\nfor which you may need to add a custom type in the file<br/>\nyou can specify a repeat count with asterisk *    </p>\n<pre><code>BYTE*48 BYTE somecrap  \n</code></pre>\n<p>somecrap is MemberName a string    </p>\n<p><code>END is a keyword</code> denoting end of structure    </p>\n<p>some dummy src that use the structure from your Query compiled executed and \nscreen shot below</p>\n<p>src </p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n#pragma pack(1)\ntypedef struct _TESTY {\n    int a;\n    int b;\n}Testy,*PTesty;\ntypedef struct _MYSTRUCT {\n    double x,y,z;\n    unsigned char id;\n    int label;\n    char *name;\n    Testy *foo;\n}MyStruct,*PMyStruct;\n\nint main (void) {\n    MyStruct blah;\n    Testy arrgh;\n    char *test = \"hello do i know c ?\";\n    memset(&amp;blah,0,sizeof(blah));\n    blah.x=43.0;\n    blah.y=76.34;\n    blah.z=0.0;\n    blah.id = 'a';\n    blah.label = 54;\n    blah.name = test;\n    arrgh.a =45;\n    arrgh.b =54000;\n    blah.foo = &amp;arrgh;\n    printf(\"%f\\n\",blah.x);\n    printf(\"%s\\n\",blah.name);\n    printf(\"%d\\n\",blah.foo-&gt;b);\n    return 0;   \n}\n</code></pre>\n<p>executed </p>\n<pre><code>structy.exe\n43.000000\nhello do i know c ?\n54000 \n</code></pre>\n<p>running with ollydbg </p>\n<pre><code>ollydbg.exe structy.exe \n</code></pre>\n<p>the log windows shows it used the structure definitions we provided by xxxxx.arg </p>\n<pre><code>Log data\nAddress   Message\n          OllyDbg v2.01\n          Command line: structy.exe\n          Loading function descriptions from 'common.arg'\n            2 structures\n            Total size of known data is 1521777 bytes\n</code></pre>\n<p>screen shot \n<a href=\"https://i.sstatic.net/y3tEu.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/y3tEu.png\"/></a></p>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Feb 1, 2016 at 9:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">Looks good, thanks!  But I can't repeat it in my system, the compiler is optimizing it away and I get a much shorter program with hardcoded values fed to _printf.  I am using Visual Studio 6, compiling for Release with default flags.  I need to find my correct compiler or linker setting to make the full code appear that you have.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i dont compile debug i always compile release and with highest level of warnings and analyze enabled code shown above is done with windows sdk 7.1 compiler (free )  cl /nologo /Zi /EHsc /O1 /analyze /W4 *.cpp /link /release  so wyswyg should apply</span>",
                    "time": null
                },
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">I fixed the compiler optimization issue, changing it to /Od which is \"disable (Debug)\".  The default for VS6 Release was /O2 =\"optimize speed\".  It was simply under the Project Settings-&gt;C++ -&gt; Optimizations in the IDE.  I like the idea of doing things from the command line with 'cl' directly, I must try that too.</span>",
                    "time": null
                },
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">This is a great answer, now I can see structures.  It's really useful I believe, at least for looking into my own programs.  I found Blabb's answer worked with Ollydbg 2.01.   I found I could change the .ARG file and simply restart (ctrl-F2) to reload the defn's without having to stop and start Ollydbg like I feared (I thought it might only look at them when I launched Ollydbg).  Sadly in Olldbg when you spawn a structure, list, or other dump window from the main hex dump, it doesn't have the same capabiliites.  I can't spawn another decoded window from the *foo pointer to the 2nd struct type.</span>",
                    "time": null
                },
                {
                    "user": "trigger_segfault",
                    "text": "<span class=\"comment-copy\">Be aware that numbers are in hexadecimal by default. The <code>0x</code> prefix is optional, but required for numbers starting with alpha characters. The <code>.</code> suffix can be used for unsigned decimal numbers: <code>10.</code> Also <code>TBYTE</code> is 10 bytes in size (which is required for fields using the <code>LDOUBLE</code> type). But it was awkward to figure this out before learning everything was in hex. For character arrays, the <code>ATEXT</code> type can be used. I've written up more in-depth documentation on the format, there's a lot to it, but it's definitely experimental: <a href=\"https://github.com/trigger-segfault/Ollydbg-Argfile-Docs\" rel=\"nofollow noreferrer\">github.com/trigger-segfault/Ollydbg-Argfile-Docs</a></span>",
                    "time": null
                }
            ]
        }
    ]
}