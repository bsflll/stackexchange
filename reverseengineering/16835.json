{
    "title": "Exe protection by TLS callback, trying to understand the behaviour",
    "link": "https://reverseengineering.stackexchange.com/questions/16835/exe-protection-by-tls-callback-trying-to-understand-the-behaviour",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an app, obfuscated by FSG protector. When i tried to unpack it, the first thign that i had is, when i start the process with the debugger/or attach debugger later, i immediatly receive ACCESS VIOLATION exception, because Tls callback gets executed, with the following content:</p>\n<pre><code>.text:0063EE70 public TlsCallback_0\n.text:0063EE70 TlsCallback_0:                          ; DATA XREF: .CRT:TlsCallbacks_0\n.text:0063EE70 mov     [esi-6Dh], ebx\n.text:0063EE73 xlat    byte ptr gs:[ebx]\n.text:0063EE75 retf    155h\n</code></pre>\n<p>How is that even possible?? Are the registers inside tlscallback by default point to some sections/segments? Here the esi is used, but it has some default value, from the <code>ntdll:ntdll_LdrShutdownThread+386</code></p>\n<p>I attach the full stack trace, this is the stack trace from which this callback is called, when i run the application under ida pro+windbg, tls callback is hit prior to entry point.</p>\n<p><a href=\"https://i.sstatic.net/YAauG.png\" rel=\"nofollow noreferrer\"><img alt=\"stack trace\" src=\"https://i.sstatic.net/YAauG.png\"/></a></p>\n<p>esi points to some <code>DATA</code> segment inside the application, is this the default os behaviour?\nAlso the TLS directory here is defined like so:</p>\n<p><a href=\"https://i.sstatic.net/obfoz.png\" rel=\"nofollow noreferrer\"><img alt=\"tls\" src=\"https://i.sstatic.net/obfoz.png\"/></a></p>\n<p>As you can see TLS_end and TLS_start points to the image base.</p>\n<p>So my question is, how is this callback not crashing the program without debugger? And why it is when i attach the debugger? It is some kind of anti-debuggin technique i can't understand</p>\n<p><a href=\"https://i.sstatic.net/b8bo8.png\" rel=\"nofollow noreferrer\"><img alt=\"tls callback\" src=\"https://i.sstatic.net/b8bo8.png\"/></a></p>\n</div>",
    "votes": "4",
    "answers": 3,
    "views": "9k",
    "tags": [
        "disassembly",
        "obfuscation",
        "dynamic-analysis",
        "protection",
        "entry-point"
    ],
    "user": "BakedPotatoWithCheese",
    "time": "Nov 25, 2017 at 14:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is an old anti-debugging trick to use the TLS callback. The code in the TLS gets executed before the executables entry point and the debugger gains control. This allows the  TLS to check for the presence of the debugger and act accordingly.</p>\n<p>One method to bypass it is using OllyDbg is to pause at \"System breakpoint\" instead of the default \"WinMain\" and I believe the Olly Advanced plugin allows you to break on TLS.</p>\n<p>Possibly putting an INT 3 (0xCC) at the start of the TLS (and replacing the original byte) would break and allow you to step through to find the offending code, but I dont remember if this actually works or not, youll have to test it.</p>\n</div>",
            "votes": "4",
            "user": "Crudd",
            "time": "Nov 26, 2017 at 18:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Exceptions in TLSCallbacks are discarded by Windows, but stop further callbacks from being called, and then control is transferred to the main entrypoint.</p>\n<p>However, the code that you've shown for the TLSCallback looks like garbage, the registers aren't predictable, and I doubt that what you've shown is actually executed.</p>\n<p>Note that the TLSCallback field not a single callback, it's a pointer to an array, but your screenshot has obscured the array pointer.  Each callback is executed in turn, and any callback can alter the entries in the array for later callback entries.</p>\n<p>The label for TlsEnd is not correct.  The zero marks unused values in the first two fields (start and end of the memory region to reserve).    </p>\n<p>You can see examples of TLS on my site: <a href=\"http://pferrie.host22.com\" rel=\"nofollow noreferrer\">http://pferrie.host22.com</a>\n(assuming that it's working today) in the Company presentations section from 2008.</p>\n</div>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Dec 1, 2017 at 16:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>TLS callbacks may be executed on attach because the OS creates a new thread pointing to <code>DbgUiBreakin</code> with a software breakpoint to stop the execution of the program, and the new thread causes the TLS callback to be executed.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Nov 27, 2017 at 10:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "BakedPotatoWithCheese",
                    "text": "<span class=\"comment-copy\">But on a process start, the tls callback is executed too right? The callback loooks exactly the same in static disassembly, how did they make it, that this callback is not getting executed, on process start ? And only run with debugger attaching</span>",
                    "time": null
                },
                {
                    "user": "BakedPotatoWithCheese",
                    "text": "<span class=\"comment-copy\">Also this instructions here:  <code>mov     [esi-6Dh], ebx, xlat    byte ptr gs:[ebx]</code> do not cause access violation for some reason, how is it that ebx and esi points to valid locations ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I don’t know, it’s difficult to say without the binary.</span>",
                    "time": null
                }
            ]
        }
    ]
}