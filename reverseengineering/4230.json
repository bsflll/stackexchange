{
    "title": "Why I can not directly get the content of `.bss` section?",
    "link": "https://reverseengineering.stackexchange.com/questions/4230/why-i-can-not-directly-get-the-content-of-bss-section",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Test is on Linux 32bit.</p>\n<p>I use this command to get the context of <code>.text</code> <code>.rodata</code> and <code>.data</code> section:</p>\n<pre><code>objdump -s -j .text elf_binary\nobjdump -s -j .rodata elf_binary\nobjdump -s -j .data elf_binary\n</code></pre>\n<p>But basically when I tried to use this to get the content of <code>.bss</code> section, I always get the error shown below:</p>\n<pre><code>objdump -s -j .bss elf_binary\n\nobjdump: section '.bss' mentioned in a -j option, but not found in any input file\n</code></pre>\n<p>Basically how can I get the content of <code>.bss</code> section from ELF binary?</p>\n</div>",
    "votes": "12",
    "answers": 2,
    "views": "14k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "elf"
    ],
    "user": "lllllllllllll",
    "time": "May 1, 2014 at 21:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>.bss</code> has no content. It's simply a tip to the loader to preallocate some space when starting the program. It will be all 0s at the execution and won't hold any useful information until the program writes to it. After that, you can use a debugger to dump the memory and explore its content.</p>\n<p>Check the Wikipedia <a href=\"http://en.wikipedia.org/wiki/.bss\">page</a> for more information.</p>\n</div>",
            "votes": "21",
            "user": "yaspr",
            "time": "May 2, 2014 at 12:56",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>.bss</code> <em>block started by symbol</em> (also called Uninitialized data segment - <code>bss</code> is an old assembly instruction on an ancient IBM chip) section is supposed to contain <code>global variables</code> and <code>static variables</code> uninitialized or initialized to 0 or NULL. The <code>.bss</code> section is usually non existing until your program starts executing, this is why you can't retrieve its content statically. It is fairly important to note that this section helps reduce the program's size &amp; makes it quicker to load. </p>\n</div>",
            "votes": "6",
            "user": "yaspr",
            "time": "May 2, 2014 at 12:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}