{
    "title": "me_cleaner and fwupd, or manipulating UEFI .cab files",
    "link": "https://reverseengineering.stackexchange.com/questions/21130/me-cleaner-and-fwupd-or-manipulating-uefi-cab-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to extract a plain dump of the UEFI firmware of my laptop (1:1 copy of the flash content, often called .bin or .rom files) from the .cap file, so that I can modify it slightly with me_cleaner.\n(The .cap file is a raw image compressed and wrapped with the flash tool as part of a capsule.)\nThen I suppose one has to reconstruct the capsule so it's valid, and it has a chance of passing signature check when updating firmware with fwupd.</p>\n<p>My machine is a Thinkpad T460s, which is supported by fwupd/LVFS\n<a href=\"https://fwupd.org/lvfs/device/com.lenovo.ThinkPadN1CHT.firmware\" rel=\"nofollow noreferrer\">https://fwupd.org/lvfs/device/com.lenovo.ThinkPadN1CHT.firmware</a>\nand the me_cleaner tool is described at\n<a href=\"https://github.com/corna/me_cleaner/wiki/Internal-flashing-with-OEM-firmware\" rel=\"nofollow noreferrer\">https://github.com/corna/me_cleaner/wiki/Internal-flashing-with-OEM-firmware</a></p>\n<p>In particular, I'd be happy with just <code>me_cleaner.py -s &lt;firmware image&gt;</code>, where -s is setting the HAP bit, and not modifying the actual image, so it may still pass signature check.</p>\n<p>Any hint where to start?</p>\n<p>Possibly related question: <a href=\"https://reverseengineering.stackexchange.com/questions/8538/reverse-engineering-uefi-cap-files?newreg=3a029aaa7a9c4cf6ba42a5876a014ce2\">Reverse engineering UEFI CAP files</a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "355",
    "tags": [
        "binary-analysis",
        "firmware",
        "static-analysis",
        "encryption",
        "uefi"
    ],
    "user": "jj_p",
    "time": "Apr 12, 2019 at 17:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's not exactly an RE question but I'll try to answer.</p>\n<p>First of all, since the capsule is signed, it's very likely that any modification will invalidate the signature and the update process will refuse it.</p>\n<p>In general, extracting a raw image from the capsule may range from trivial (e.g. for ASUS capsules it's usually enough to just cut off the header) to pretty hard (e.g. Intel capsules have multiply nested compressed firmware volumes for each part of the flash chip that can be updated independently, and it's quite difficult to reconstruct the full image from them), and making again a valid capsule is even harder without the vendor-specific tools (and signing keys, obviously).</p>\n<p>While the <em>general process</em> of capsule update is described in the UEFI specification, the exact format and details are left to the vendor to implement. In general, there is usually a firmware module which is responsible for parsing &amp; verifying the capsule and passing the data for flashing to the flashing component (usually an SMM module). You could try to find the code responsible for it and figure out how the capsule is laid out and try to restore the image but be prepared for a long road ahead.</p>\n<p>I would suggest going with the external flashing workflow, it's more reliable and easier to recover from.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 12, 2019 at 20:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}