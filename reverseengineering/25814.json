{
    "title": "Structure of operand bytes in .NET call and data access IL instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/25814/structure-of-operand-bytes-in-net-call-and-data-access-il-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tried googling but couldn't find any good source that explains the structure of memory access instructions like ldstr and call instructions</p>\n<p>for example based on experience, the last byte of API/library call instructions is always 0x0A (let me know if I'm wrong), but why? what are the structure of the 4 bytes of call operands? what about operands of ldstr instructions?</p>\n<p>because they are different from native apps, they are not raw offsets, they seem to be offsets into a table but i cannot find any post that explains this in detail?</p>\n<p>the best thing i found is this :</p>\n<p><a href=\"https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/\" rel=\"nofollow noreferrer\">https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/</a></p>\n<p>but it still doesn't explain many things</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "126",
    "tags": [
        "ida",
        "windows",
        "malware",
        ".net"
    ],
    "user": "OneAndOnly",
    "time": "Sep 4, 2020 at 14:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>the last byte of API/library call instructions is always <code>0x0A</code></p>\n</blockquote>\n<p>It's because calls needs to have method (ref) as a parameter and methods are defined in the table that has an id of <code>0x0A</code>.</p>\n<p>Having bytes of the call like this <code>280600000A</code> let's go one by one.</p>\n<ul>\n<li><code>0x28</code> - is the value for opcode 'call' and it takes one operand.</li>\n<li>the rest of the opcode is the metadata token so basically the information which method should be called</li>\n</ul>\n<p>But why <code>0x0A</code> is at the end? It should be read as a little-endian so the value should be <code>0x0A000006</code>. But what are the bytes?</p>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Metadata_(CLI)\" rel=\"nofollow noreferrer\">Wikipedia</a>:</p>\n<blockquote>\n<p>When CIL code uses metadata it does so through a metadata token. This is a 32-bit value where the top 8 bits identify the appropriate metadata table, and the remaining 24 bits give the index of the metadata in the table.</p>\n</blockquote>\n<p>So the first value is the table id - and as I've mentioned the id of member's ref table is value <code>0x0A</code>. And the rest is an index in the table (in our case <code>0x6</code>).</p>\n<p>More about the tables? Those are basically part of .NET metadata information, that can be seen when you open one in i.e. dnSpy</p>\n<p><a href=\"https://i.sstatic.net/aYDaS.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/aYDaS.png\"/></a></p>\n<p>As one can see <code>0x0A</code> is assigned to the <code>MemberRef</code> (containing both methods and fields references)</p>\n<blockquote>\n<p>what about operands of ldstr instructions?</p>\n</blockquote>\n<p>In this instance, the instruction has the following structure <code>72XXXX0070</code> and <code>0x70</code> indicates different stream - namely User defined strings or <code>#US</code>. The rest (again interpreted as a little-ending 32-bit val) is the offset (in bytes) in <code>#US</code> table.</p>\n<p>Generally dnSpy is a great tool to verifying those values as one can metadata tables.</p>\n<p>The linked article (and the whole series is a great resource)  it does explain (I think) the structure but maybe indirectly - just find the information about metadata token.</p>\n<p>We can induce from it the whole structure of a metadata token.</p>\n</div>",
            "votes": "4",
            "user": "Paweł Łukasik",
            "time": "Sep 6, 2020 at 6:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">Thanks for the great explanation, do you happen to know any other good reference or even a book that explains everything about structure of .NET files/IL instructions in a very detailed manner?  what is the most detailed reference?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Not sure if I can provide one reference. It is something I acquired by reading &amp; exploring multiple sources.</span>",
                    "time": null
                },
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">Multiple sources are fine too, would appreciate if you can share them.</span>",
                    "time": null
                }
            ]
        }
    ]
}