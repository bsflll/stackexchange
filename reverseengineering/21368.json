{
    "title": "What does ds mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/21368/what-does-ds-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When debugging with x64dbg I sometimes see <code>mov ss:[address] 0xAA</code>, I know that this means: move 0xAA into memory at specified address.</p>\n<p>But what does</p>\n<pre><code>mov ds:[address] 0xAA\n</code></pre>\n<p>mean?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "x64dbg"
    ],
    "user": "Sam",
    "time": "May 26, 2019 at 18:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>ds</code> means \"data segment\" register in x86 architecture, while <code>ss</code> states for \"stack segment\" register. You would probably want to read <a href=\"https://reverseengineering.stackexchange.com/questions/2006/how-are-the-segment-registers-fs-gs-cs-ss-ds-es-used-in-linux\">link</a> for more comprehensive description. When you see</p>\n<pre><code>mov ds:[address], 0xAA,\n</code></pre>\n<p>it means \"move <code>0xAA</code> to address <code>address</code> in data segment\", that is segment pointed by the current value of <code>ds</code> register. Similarly with every other segment register.</p>\n<p>In x64 architecture segment registers are ignored.</p>\n</div>",
            "votes": "4",
            "user": "bart1e",
            "time": "May 26, 2019 at 19:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}