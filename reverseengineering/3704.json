{
    "title": "How to interpret entries from Exports tab in ProcessHacker",
    "link": "https://reverseengineering.stackexchange.com/questions/3704/how-to-interpret-entries-from-exports-tab-in-processhacker",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use <a href=\"http://processhacker.sourceforge.net/\" rel=\"nofollow noreferrer\">ProcessHacker</a> version 2.33 to inspect the functions which are exported by DLLs in running processes. In the screen-shot below you can see a few exported functions from a C++ application, along with their Ordinal number and virtual address (VA):</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/a2kFv.png\"/></p>\n<p>This is a pretty cool feature of ProcessHacker, which I was not able to find in ProcessExplorer. However, regarding the entries you can see in this screen-shot, I was not able to find what do the <code>?</code> (question marks) and the number, which prefixes the names of the functions, mean. Also, I'm not sure what the single and double <code>@</code> (at) symbols in the name, followed by a group of capital letters or number, mean.</p>\n<p><strong>Question 1:</strong> What do the symbols (<code>?, @</code>), number-prefix and capital letter suffixes represent? How can one interpret them?</p>\n<p><strong>Question 2:</strong> What does the \"Ordinal\" column mean?</p>\n<p><strong>Question 3:</strong> Does the \"VA\" column show the offset of the procedure entry point, with respect to the base address of the <code>.text</code> segment of the DLL? If not, what does it represent?</p>\n<p><strong>Question 4:</strong> How can one compute the absolute address of any function from the Exports tab?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "569",
    "tags": [
        "dll",
        "libraries",
        "processhacker"
    ],
    "user": "Benny",
    "time": "Feb 18, 2014 at 10:45",
    "comments": [
        {
            "user": "alexanderh",
            "text": "<span class=\"comment-copy\">Here is a quick comparison of the export of a DLL found by Process Hacker and the exports identified by IDA. Hopefully the below answers and the side by side will be helpful. <a href=\"https://i.sstatic.net/T7VYk.png\" rel=\"nofollow noreferrer\">i.sstatic.net/T7VYk.png</a></span>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<span class=\"comment-copy\">@alexanderh thanks for the photo. It sheds some light on the matter.</span>",
            "time": null
        },
        {
            "user": "0xea",
            "text": "<span class=\"comment-copy\">It's better to open new questions than add new ones.</span>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<span class=\"comment-copy\">@0xea I did want to do that, however, the title of the question and the intro + picture would have been the same for the new question.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Those are C++ name decorations. </p>\n<blockquote>\n<p>Name decoration usually refers to C++ naming conventions, but can apply to a number of C cases as well. By default, C++ uses the function name, parameters, and return type to create a linker name for the function. </p>\n</blockquote>\n<p>See <a href=\"http://msdn.microsoft.com/en-us/library/deaxefa7.aspx\" rel=\"nofollow\">Name Decoration</a> on MSDN for more info.</p>\n<p>Question 2: Ordinals are just another way of making exports. You either export a function by name or by ordinal. It is unique in that binary only. You get functions by ordinals by using <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms683212%28v=vs.85%29.aspx\" rel=\"nofollow\">GetProcAddress()</a> just the same as you would with a name. </p>\n<p>I could recommend <a href=\"http://rads.stackoverflow.com/amzn/click/0735624240\" rel=\"nofollow\">\"Windows via C/C++\"</a> book for many more details about those mechanisms. </p>\n</div>",
            "votes": "2",
            "user": "0xea",
            "time": "Feb 18, 2014 at 11:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">That page doesn't really offer a good explanation. OTOH, the remark at the bottom \"There is currently no standard for C++ naming between compiler vendors or even between different versions of a compiler\" is <i>crucial</i>. You can only guess what version was used by trying to decode.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd  recommend loading the dll file into PE Explorer (View-&gt;Export), which will undecorate the names for you and show you the corresponding parameters/return value/calling convention.</p>\n<p>You may also want to check out <a href=\"https://stackoverflow.com/questions/9177591/how-to-undecorate-name-from-decorated-name\">this question</a>.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}