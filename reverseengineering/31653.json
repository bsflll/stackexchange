{
    "title": "Is it possible to create nested memory mapped registers in IDA Processor Modules?",
    "link": "https://reverseengineering.stackexchange.com/questions/31653/is-it-possible-to-create-nested-memory-mapped-registers-in-ida-processor-modules",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's look at this very simple example: we have an AX (16-bit) register, which splits into two 8-bit registers: AH and AL (imagine x86). Then, imagine that these registers are memory mapped starting from RAM:0000 till RAM:0001 just like that:</p>\n<pre><code>AX - RAM:0x0000-0x0001\nAH - RAM:0x0000\nAL - RAM:0x0001\n</code></pre>\n<p>Is it possible to create a REG_DEFS for IDA Processor Module and then map it to the RAM segment in a way, that would allow tracking the registers in the correct order throughout the disassembly? The problem is, that commands such as <code>mov</code> could operate on both \"a complete\" register (AX) as well as its parts (AH and AL) and while creating a RAM mapping, it doesn't allow me to name the same area of RAM twice using this code:</p>\n<pre><code># Creating AX\nida_bytes.create_data(0x0000, FF_WORD, 2, ida_idaapi.BADADDR)\nidc.set_name(0x0000, \"AX\", SN_CHECK)\n\n# This approach would fail, as it would intersect with AX and redefine it\nida_bytes.create_data(0x0000, FF_BYTE, 1, ida_idaapi.BADADDR)\nidc.set_name(0x0000, \"AH\", SN_CHECK)\nida_bytes.create_data(0x0001, FF_BYTE, 1, ida_idaapi.BADADDR)\nidc.set_name(0x0001, \"AL\", SN_CHECK)\n</code></pre>\n<p>So, I would either get AX in the disassembly listing or AH and AL, but not both. More than that:</p>\n<ol>\n<li>I need to be able to access individual bits within the AH and AL registers, therefore a simple UNION would not work I guess.</li>\n<li>IDA needs a way to understand that AH and AL are a part of the AX register and track not only their own values but a value as a part of AX as well. Example:</li>\n</ol>\n<p><code>mov ax, 100h  # AH should be 1h and AL should be 0</code></p>\n<p>Is there a way to overcome it with the memory-mapped registers?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "63",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "none32",
    "time": "Mar 10, 2023 at 21:27",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">What's your precise goal? The reason I ask, is that Hex-Rays (the decompiler) actually models this and uses it to perform its decompilation. As you know, IDA's disassembler doesn't, but then the disassembler's goal is just to enable basic referencing and notations over the address-space. If you're trying to write a processor module, there's disassembler libs that you can use to access those relationships, but if you're just trying to ask questions about them while reversing...there's plugins that provide an interface that you can use for querying. Which one are you trying to do?</span>",
            "time": null
        }
    ],
    "answers_data": []
}