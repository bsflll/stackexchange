{
    "title": "What is physical address on a pe reader?",
    "link": "https://reverseengineering.stackexchange.com/questions/25752/what-is-physical-address-on-a-pe-reader",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is physical address on a Pe file? I had search on the microsoft website article about pe files and don't have found anything.</p>\n<p><a href=\"https://i.sstatic.net/3QcXS.png\" rel=\"nofollow noreferrer\"><img alt=\"Pe Reader\" src=\"https://i.sstatic.net/3QcXS.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "601",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "ollydbg",
        "pe"
    ],
    "user": "Loliconaoquadrado",
    "time": "Aug 26, 2020 at 15:25",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">add the name of the tool you used the Descriptions dont Fit the Documented names   the second one Physical  Address is an union and it appears the tool is misusing a union members name</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As i Commented it seems the tool You used is misusing a Name<br/>\nThe <strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_section_header\" rel=\"nofollow noreferrer\">Section Header is Documented</a></strong> Thus</p>\n<p>As Can be Seen The Second Member of the Structure is an Union Misc</p>\n<pre><code>union {\n    DWORD PhysicalAddress;\n    DWORD VirtualSize;\n  } Misc;\n</code></pre>\n<p>So Your tool Should probably be using it as Misc.PhysicalAddress<br/>\nor it should simply use it as\nVirtualSize as PhysicalAddress is not relevent to usermode Executables ( it used to be used in obj files )</p>\n<p>ollydbg section display</p>\n<pre><code>013001F0    2E 74 65 78&gt;ASCII \".text\"        ; SECTION\n013001F8    8C6D0100    DD 00016D8C          ;  VirtualSize = 16D8C (93580.)\n013001FC    00100000    DD 00001000          ;  VirtualAddress = 1000\n01300200    006E0100    DD 00016E00          ;  SizeOfRawData = 16E00 (93696.)\n01300204    00040000    DD 00000400          ;  PointerToRawData = 400\n01300208    00000000    DD 00000000          ;  PointerToRelocations = 0\n0130020C    00000000    DD 00000000          ;  PointerToLineNumbers = 0\n01300210    0000        DW 0000              ;  NumberOfRelocations = 0\n01300212    0000        DW 0000              ;  NumberOfLineNumbers = 0\n01300214    20000060    DD 60000020          ;  Characteristics = CODE|EXECUTE|READ\n</code></pre>\n<p>windbg section Display</p>\n<pre><code>SECTION HEADER #1\n   .text name\n   16D8C virtual size\n    1000 virtual address\n   16E00 size of raw data\n     400 file pointer to raw data\n       0 file pointer to relocation table\n       0 file pointer to line numbers\n       0 number of relocations\n       0 number of line numbers\n60000020 flags\n         Code\n         (no align specified)\n         Execute Read\n</code></pre>\n<p>Dumpbin or visualStudio Linker Display of Section</p>\n<pre><code>:\\&gt;dumpbin /section:.text cdb.exe\nMicrosoft (R) COFF/PE Dumper Version 14.16.27035.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file cdb.exe\n\nFile Type: EXECUTABLE IMAGE\n\nSECTION HEADER #1\n   .text name\n   16D8C virtual size\n    1000 virtual address (00401000 to 00417D8B)\n   16E00 size of raw data\n     400 file pointer to raw data (00000400 to 000171FF)\n       0 file pointer to relocation table\n       0 file pointer to line numbers\n       0 number of relocations\n       0 number of line numbers\n60000020 flags\n         Code\n         Execute Read\n\n  Summary\n\n       17000 .text\n</code></pre>\n<p>this field's usage according to Matt Pietrek peering inside pe article <a href=\"https://bytepointer.com/resources/pietrek_peering_inside_pe.htm\" rel=\"nofollow noreferrer\">copy</a><br/>\n(microsoft simply dumped all contents into some gutter and only promotes windows 10 so i couldn't locate the original of msdn magazines)</p>\n<pre><code>union {  \n\n    DWORD   PhysicalAddress  \n\n    DWORD   VirtualSize  \n\n} Misc;  \n\nThis field has different meanings, in EXEs or OBJs. In an EXE, \nit   holds the actual size of the code or data. This is the size \nbefore   rounding up to the nearest file alignment multiple. The   \nSizeOfRawData field (seems a bit of a misnomer) later on in the   \nstructure holds the rounded up value. The Borland linker reverses   \nthe meaning of these two fields and appears to be correct. For OBJ   \nfiles, this field indicates the physical address of the section. The      \nfirst section starts at address 0. To find the physical address in   \nan OBJ file of the next section, add the SizeOfRawData value to the   \nphysical address of the current section.  \n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Aug 26, 2020 at 16:59",
            "is_accepted": true,
            "comments": []
        }
    ]
}