{
    "title": "Int64 parsing from args in Frida-trace for iOS binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/29474/int64-parsing-from-args-in-frida-trace-for-ios-binaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using frida-trace to log some methods and I've come across the following.</p>\n<pre><code> onEnter(log, args, state) {\n    log(`-[Somefunction somefield64:${args[2]}]`)\n }\n</code></pre>\n<p><code>somefield64</code> returns what I believe to be an int64 like <code>0x81008d000101e7</code>.</p>\n<p>I'm not sure how to see the value behind this, all read methods (readU64/S64) complain it's not a valid address (access violation), so I assume I need to change the format.</p>\n<p>Looking at the method in a disassembler and its references show it just takes a string like</p>\n<pre><code>extern _some_field_constant\n</code></pre>\n<p>with the call as</p>\n<pre><code>[Somefunction somefield64:**_some_field_constant]\n</code></pre>\n<p>So I know how to get to the constant with</p>\n<pre><code>Module.getExportByName('SomeModule',\"_some_field_constant\") \n</code></pre>\n<p>And I can see the address.</p>\n<p>I'm just not seeing the reference to how to retrieve the field from <code>args[2]</code> via frida-trace.</p>\n<p>I had a similar method with similar functionality (no int64) returned a <code>__NSCFConstantString</code> and just managed to do</p>\n<pre><code>onEnter(log, args, state) {\n    log(`-[SomeOther someField:${args[2]}]`);\n    log(ObjC.classes.NSString.stringWithString_(args[2]))                                                                                           \n}\n</code></pre>\n<p>What do I need to do (or read in terms of technical documentation, excuse my incomplete understanding/explanation for experienced reverse engineering folks out there) to parse the int64 into a <code>NativePointer</code> so I can get the address in memory.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "302",
    "tags": [
        "ios",
        "hopper",
        "frida"
    ],
    "user": "phwd",
    "time": "Oct 30, 2021 at 2:44",
    "comments": [
        {
            "user": "phwd",
            "text": "<span class=\"comment-copy\">Thanks all, I figured it out. The similar method was just super easier it seemed to be the same but it wasn't at all  ðŸ™ˆ had to follow the internal assembly which pointed to a function via br x4 and loads another function from another framework the int64 field matches some conditionals there, so it seems I never was meant to parse it? ðŸ™ˆ . Thank you again and please vote to close this question as I am satisfied :)</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">If you found the answer, please post it below so others can benefit.</span>",
            "time": null
        }
    ],
    "answers_data": []
}