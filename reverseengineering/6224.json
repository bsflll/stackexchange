{
    "title": "How can I interpret mov ds:dword_4870058 , offset loc_4048E0?",
    "link": "https://reverseengineering.stackexchange.com/questions/6224/how-can-i-interpret-mov-dsdword-4870058-offset-loc-4048e0",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following assembly line and I have my problems to understand it, because until now I have always seen lines like this: <code>mov eax, 0</code> and so on. \nBut now, I have the following (I use IDA PRO):</p>\n<pre><code> mov ds:dword_4870058 , offset loc_4048E0\n</code></pre>\n<p>When I click on offset <code>loc_4048E0</code>, I see: </p>\n<pre><code> loc_4048E0:\n mov al, 10h\n jmp sub_402774\n</code></pre>\n<p>when I interpret <code>dword_4870058</code> as a global variable, can I assume that <code>dword_4870058</code> gets the value <code>10h</code> (if I regard <code>al</code> as a return value register) . This is the only thing that I can imagine. </p>\n<p>Is it a right or wrong assumption ?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Sep 12, 2014 at 5:49",
    "comments": [
        {
            "user": "user45891",
            "text": "<span class=\"comment-copy\">No. loc_4048E0 SEEMS to be a function. if so dword_4870058 is a function pointer (and a global variable as you already found out), if not it is a pointer to data that for some reason IDA seems to think of as a function (No idea how likely IDA mislabels that)</span>",
            "time": null
        },
        {
            "user": "user3097712",
            "text": "<span class=\"comment-copy\">I thought that the mov-instruction is for storing data/content. Is it different when it is a function pointer, or ? I mean, is there a reason why the compiler pick mov instead of lea ?</span>",
            "time": null
        },
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">lea / mov difference is covered pretty well here..  <a href=\"http://stackoverflow.com/questions/1658294/whats-the-purpose-of-the-lea-instruction\" title=\"whats the purpose of the lea instruction\">stackoverflow.com/questions/1658294/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The cleaner version would be: </p>\n<pre><code>mov [dword_4870058] , offset loc_4048E0\n</code></pre>\n<p>Then, a variant:</p>\n<pre><code>mov [address], value\n</code></pre>\n<p>Where, the <code>[ ]</code> signifies its a memory address contained within the <code>[]</code>\nand the value put in it for this case is another memory address (in the code section).</p>\n<p>To move it to a register it would be:</p>\n<pre><code>mov register, value ; eg : mov eax, 12345678h\n</code></pre>\n<p>The value portion can be a value, a pointer, a constant... They're all the same ... just numbers.</p>\n<p>Little thing to pay in mind, in x86 you cant do memory to memory moves. So, the \"can I assume that <code>dword_4870058</code> gets the value <code>10h</code>\" is completely wrong, the function at that address has NOT been called has it ? So, it cant get the value <code>10h</code>...</p>\n<p>Its simply storing one value (the address of a function) into another memory block.</p>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Sep 12, 2014 at 12:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">And presumably, the OP would find something like <code>call ds:[dword_4870058]</code> somewhere else in the code. Whether or not that will call <i>this particular function</i> needs a full flow trace to find out if it's a constant (once written, never modified), or only can be determined during run-time.</span>",
                    "time": null
                }
            ]
        }
    ]
}