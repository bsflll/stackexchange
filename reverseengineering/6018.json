{
    "title": "How to hook the entry point of a DLL?",
    "link": "https://reverseengineering.stackexchange.com/questions/6018/how-to-hook-the-entry-point-of-a-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have written a C API with support for static import hooking via overwriting the corresponding IAT entry of an exported function. It works nicely for older simple applications, but for more modern applications, it is less effective. This is primarily due to the large amount of applications nowadays that dynamically import functions. </p>\n<p>My solution to this problem was to create the process in an initial suspended state and then hook the <code>LoadLibrary(Ex)(A/W)</code>  family of functions along with <code>GetProcAddress()</code> to replace the retrieved address of a target function with my own. That solution is limited in part due to the fact that it is based off the application only importing dynamic functions and libraries in the executable module, without working for processes created later ( although that could be solved by hooking <code>CreateProcess()</code> ) or more importantly, <strong>it doesn't handle the DLLs in the application that also call the target functions I want to hook</strong>. This is obviously because the DLLs have a separate import section in their own PE from the executable module. </p>\n<p>Which brings me to my question, <em>how do I hook the entry point of a DLL</em>? I want to implement that method because I need the DLL to be bound to the libraries it imports statically, so I can hook  the LoadLibrary/GetProcAddress functions in before the DLL has a chance to load/import them in DLLMain. I'm assuming there is a way to do this by changing the entry point of the DLL, or by hooking a lower level function that handles calling a DLL entry point in kernel32.dll. </p>\n<p>If the method I'm requesting has a better alternative, then I would gladly accept that solution as well if it achieves my desired effect.</p>\n<p>My processor is an AMD Athlon II X2 250 that is x86-x64 compatible, and my operating system is Windows 7.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "7k",
    "tags": [
        "windows",
        "c",
        "dll",
        "pe",
        "function-hooking"
    ],
    "user": "CaptainObvious",
    "time": "Aug 3, 2014 at 22:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To answer the original question, what you can do is to hook <a href=\"http://doxygen.reactos.org/d8/d55/ldrutils_8c_a8fabcfb642b2788989401d1ac7cee130.html\" rel=\"nofollow\"><code>LdrpCallInitRoutine</code></a> in <code>ntdll.dll</code>. This function is used by DLL loading/unloading code to actually call the DLL entry point (<code>DllMain</code>) and also the TLS callbacks. The first argument is the address to be called:</p>\n<pre><code>BOOLEAN NTAPI LdrpCallInitRoutine(PDLL_INIT_ROUTINE EntryPoint, PVOID BaseAddress, ULONG Reason, PVOID Context);\n</code></pre>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "Aug 5, 2014 at 19:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "CaptainObvious",
                    "text": "<span class=\"comment-copy\">I'm changing this to the chosen answer, since this answers the question I asked in the OP.</span>",
                    "time": null
                },
                {
                    "user": "user541686",
                    "text": "<span class=\"comment-copy\">Question -- how do you find <code>LdrpCallInitRoutine</code> without debug symbols?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Mehrdad: you can that ask it in a new question; comments are for commenting/clarifications</span>",
                    "time": null
                },
                {
                    "user": "user541686",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky: it <b>was</b> for clarification. It's suggested in the answer but it's not even clear that it's possible in general.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You should not be using IAT overwriting hooking method for the same reasons you mentioned.\nUse the inline hooking method with a <code>JMP</code> instruction to the target hook. You need to save the overwritten bytes somewhere as you need to use it as the trampoline. \nSee <em><a href=\"http://en.wikipedia.org/wiki/Hooking#API.2FFunction_Hooking.2FInterception_Using_JMP_Instruction\" rel=\"nofollow\">this</a></em> as an example of inline hook. </p>\n<p>Using inline hook ensures that all (existing or future) modules loaded in the same address space will using the hooked functions no matter how they resolve the addresses of the APIs. </p>\n<p><em><a href=\"http://jbremer.org/x86-api-hooking-demystified/\" rel=\"nofollow\">jbremer.org</a></em> has good informative resources on API hooking.</p>\n</div>",
            "votes": "3",
            "user": "0xec",
            "time": "Aug 4, 2014 at 2:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "CaptainObvious",
                    "text": "<span class=\"comment-copy\">I wouldn't say that an inline hook insures that all <i>future modules</i> will use the function, unless those modules use the same module that contains the hook.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@CaptainObvious Of course. Suppose you inline hooked <code>Kernel32.CreateFileA</code> then calling some other function such as <code>Gdi32.BitBlt</code> would never trigger the hook. What I meant, that <b>any</b> module who calls <code>CreateFileA</code> would be using our hooked function.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@CaptainObvious In case you are not aware, every process has exactly a single copy of a dll in its address space. That means there is a single copy of the function <code>CreateFileA</code> no matter how many times you load <code>kernel32</code> using <code>LoadLibrary</code>. In our case when we inline hook, it is hooked for once and for all.</span>",
                    "time": null
                }
            ]
        }
    ]
}