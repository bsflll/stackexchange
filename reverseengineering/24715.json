{
    "title": "What is the equivalent of the dollar sign from jmp $+1 in GAS syntax?",
    "link": "https://reverseengineering.stackexchange.com/questions/24715/what-is-the-equivalent-of-the-dollar-sign-from-jmp-1-in-gas-syntax",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an asm program made with intel syntax. In this program, I am using this syntax <code>jz $+1</code> from INTEL (+gcc), that means that I jump into the <code>jz</code> instruction (which is 2 bytes). I jump 1 byte further the current instruction.\nI am trying to find what is the correct syntax to do the same thing in GAS AT&amp;T syntax, but I can't find the information.\nDoes anyone know that?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "639",
    "tags": [
        "assembly",
        "intel",
        "gas"
    ],
    "user": "Nark",
    "time": "Apr 15, 2020 at 18:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not really an RE question, but I think <code>.</code> is used to refer to current location in many GAS architectures.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 15, 2020 at 20:18",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can use intel syntax if you prefer in gas and use $+1 to jump into the middle of the instruction </p>\n<p>$ cat foo.s</p>\n<pre><code>.intel_syntax noprefix\n.global start\n        _start:\n        jz $+1\n        .byte 0x25,0x45,0x33,0x40,0x00\n</code></pre>\n<p>assemble </p>\n<pre><code>$ as -o foo.o foo.s\n</code></pre>\n<p>disassemble </p>\n<pre><code>$ objdump.exe -d foo.o\nfoo.o:     file format pe-x86-64\nDisassembly of section .text:\n0000000000000000 &lt;_start&gt;:\n   0:   74 ff                   je     1 &lt;_start+0x1&gt;\n   2:   25 45 33 40 00          and    $0x403345,%eax\n   7:   90                      nop\n   8:   90                      nop\n</code></pre>\n<p>link </p>\n<pre><code>$ ld -m i386pep -o foo foo.o\n</code></pre>\n<p>debug</p>\n<pre><code>$ gdb ./foo\nGNU gdb (GDB) 8.2.1\n\n(gdb) break _start\nBreakpoint 1 at 0x100401000\n(gdb) r\nStarting program: \n[New Thread 7876.0x2614]\n\nBreakpoint 1, 0x0000000100401000 in __rt_psrelocs_start ()\n(gdb) x/2i $rip\n=&gt; 0x100401000 &lt;__rt_psrelocs_start&gt;:\n    je     0x100401001 &lt;__rt_psrelocs_start+1&gt;\n   0x100401002 &lt;__rt_psrelocs_start+2&gt;: and    $0x403345,%eax\n\n(gdb) si\n0x0000000100401001 in __rt_psrelocs_start ()\n(gdb) x/2i $rip\n=&gt; 0x100401001 &lt;__rt_psrelocs_start+1&gt;:\n    jmpq   *0x403345(%rip)        # 0x10080434c\n\n   0x100401007 &lt;__rt_psrelocs_start+7&gt;: nop\n(gdb)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 15, 2020 at 20:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}