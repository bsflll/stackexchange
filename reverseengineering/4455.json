{
    "title": "Transformation of assembly code into C language (decompilation)",
    "link": "https://reverseengineering.stackexchange.com/questions/4455/transformation-of-assembly-code-into-c-language-decompilation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following assembly code and I wanted to transform it into the C language.\nDuring the transformation, I had some question for which I could not find any answers.</p>\n<p>So, here is it:</p>\n<pre><code>                     ...\n  +----&gt;6C250EAD     MOV DL, BYTE PTR DS:[ESI]\n  |     .....EAF     TEST DL, DL\n  |     .....EB1     JE SHORT func.6C250EDF   -----------------+\n  |     .....EB3     MOVZX EDX, DL                             |\n  |     .....EB6     TEST BYTE PTR DS:[EDX+0x6C25EF39],0x4     |\n  |     .....EBD     JE SHORT func.6C250ECE   -----+           |\n  |     .....EBF     ADD DWORD PRT DS:[ECX],0x2    |           |\n  |     .....EC2     TEST EAX,EAX                  |           |\n  |     .....EC4     JE SHORT func.6C250ED9 ----------+        |\n  |     .....EC6     MOV DL, BYTE PTR DS:[ESI]     |  |        |\n  |     .....EC8     INC ESI                       |  |        |\n  |     .....EC9     MOV BYTE PTR DS:[EAX], DL     |  |        |\n  |     .....ECB     INC EAX                       |  |        |\n  |  +--.....ECC-----JMP SHORT func.6C250ED4       |  |        |\n  |  |  6C250ECE     INC DWORD PTR DS:[ECX]&lt;&lt;&lt;&lt;&lt;&lt;--+  |        |\n  |  |  .....ED0     TEST EAX, EAX                    |        |\n  |  |  .....ED2     JMP SHORT func.6C250ED9  -----------+     |\n  |  +-&gt;6C250ED4     MOV DL, BYTE PTR DS:[ESI]        |  |     |\n  |     .....ED6     MOV BYTE PTR DS:[EAX],DL         |  |     |\n  |     .....ED8     INC EAX                          |  |     |\n  |     6C250ED9     INC ESI    &lt;&lt;&lt;&lt;&lt;-----------------+--+     |\n  |     .....EDA     CMP BYTE PTR DS:[ESI],0x22                |\n  +-----.....EDD-----JNZ SHORT func.6C250EAD                   |\n        6C250EDF    .....    &lt;&lt;&lt;&lt;------------------------------+\n</code></pre>\n<p>First of all, I must say that we have a string stored in the register ESI. Specially, it is the path of the current process which I try to examine. So it begins with \"C:\\Users...(and so on)\"</p>\n<p>My observation was the following. It is a routine which represents a loop. The loop goes through the stored string by increasing the esi pointer at the end of the loop. There is also a counter ECX which is incremented. \nMy question was about the line:</p>\n<pre><code> TEST BYTE PTR DS:[EDX+0x6C25EF39],0x4\n</code></pre>\n<p>Here, ollydbg announces me that I the ANSCII code 08 is in [EDX+0x6C25EF39]. I look that up and that is the code for the backspace. Furthermore, 0x4 is the representation for EOT (= End of transmission).\nHonestly, I do not understand really what is does. (I assume that it is maybe delete the last current character because it is not the \"end of transmission\", thus 0x4, but I am not sure.) The only thing which I can say about that is that it the result is always ZF=1, so the jumps is taken, and we go to the target of arrow, namely to the place where the counter ECX is incremented.\nAbout ECX and EAX I can say that they are initialized with 0.</p>\n<p>So, from that observations I try to write a C code to imagine how it could be written in real:</p>\n<pre><code>while(esi != NULL){\n\n  char *dl = *(esi);\n\n  if(dl != dl){\n     break;\n  }\n\n  char *edx = *(dl);\n\n  //at that the line which I do not understand really comes\n\n  ecx++;\n\n  if(eax!=0){\n      esi++;\n  }\n\n  if(esi-- == esi){\n      break;\n  }\n}\n</code></pre>\n<p>I wanted to add that I also try to learn C language. So, I hope you can tell me my mistakes or other wrong things, which I must learn better. </p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "assembly",
        "decompilation"
    ],
    "user": "user3097712",
    "time": "May 27, 2014 at 21:06",
    "comments": [
        {
            "user": "lornix",
            "text": "<span class=\"comment-copy\">Please may we have the assembly listing with addresses?  There are several loops in that sample with which they would help.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>note that i move the code from 6C250ED4-6C250ED8  to ....ECC to make the if/else clearer</p>\n<pre><code>6C250EAD    MOV DL, BYTE PTR DS:[ESI]                  |    while (dl = *esi) {\n            TEST DL, DL                                |\n            JE SHORT 6C250EDF                          | \n\n            MOVZX EDX, DL                              |\n            TEST BYTE PTR DS:[EDX+0x6C25EF39],0x4      |    if (charinfo[dl]&amp;4) {\n            JE SHORT 6C250ECE                          |\n\n            ADD DWORD PRT DS:[ECX],0x2                 |       *ecx += 2\n            TEST EAX,EAX                               |       if (eax) {\n            JE SHORT 6C250ED9                          |\n\n            MOV DL, BYTE PTR DS:[ESI]                  |          *eax++ = *esi++\n            INC ESI                                    |\n            MOV BYTE PTR DS:[EAX], DL                  |\n            INC EAX                                    |\n\n            MOV DL, BYTE PTR DS:[ESI]                  |          *eax++ = *esi\n            MOV BYTE PTR DS:[EAX],DL                   |\n            INC EAX                                    |      }\n\n            JMP SHORT 6C250ED9                         |   } else {\n\n6C250ECE    INC DWORD PTR DS:[ECX]                     |        *ecx += 1\n            TEST EAX, EAX                              |        // ignored\n            JMP SHORT 6C250ED9                         |   }\n\n6C250ED9    INC ESI                                    |\n            CMP BYTE PTR DS:[ESI],0x22                 |   } while (*++esi!='\"')\n            JNZ SHORT 6C250EAD                         |\n</code></pre>\n<p>the charinfo table is probably something like  isspace()  or isalnum(), from ctype.h</p>\n</div>",
            "votes": "4",
            "user": "DCoder",
            "time": "May 27, 2014 at 9:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>//   +----&gt;6C250EAD     MOV DL, BYTE PTR DS:[ESI]\n//   |     .....EAF     TEST DL, DL\n//   |     .....EB1     JE SHORT func.6C250EDF   -----------------+\n//   |     .....EB3     MOVZX EDX, DL                             |\n//   |     .....EB6     TEST BYTE PTR DS:[EDX+0x6C25EF39],0x4     |\n//   |     .....EBD     JE SHORT func.6C250ECE   -----+           |\n//   |     .....EBF     ADD DWORD PRT DS:[ECX],0x2    |           |\n//   |     .....EC2     TEST EAX,EAX                  |           |\n//   |     .....EC4     JE SHORT func.6C250ED9 ----------+        |\n//   |     .....EC6     MOV DL, BYTE PTR DS:[ESI]     |  |        |\n//   |     .....EC8     INC ESI                       |  |        |\n//   |     .....EC9     MOV BYTE PTR DS:[EAX], DL     |  |        |\n//   |     .....ECB     INC EAX                       |  |        |\n//   |  +--.....ECC-----JMP SHORT func.6C250ED4       |  |        |\n//   |  |  6C250ECE     INC DWORD PTR DS:[ECX]&lt;&lt;&lt;&lt;&lt;&lt;--+  |        |\n//   |  |  .....ED0     TEST EAX, EAX                    |        |\n//   |  |  .....ED2     JMP SHORT func.6C250ED9  -----------+     |\n//   |  +-&gt;6C250ED4     MOV DL, BYTE PTR DS:[ESI]        |  |     |\n//   |     .....ED6     MOV BYTE PTR DS:[EAX],DL         |  |     |\n//   |     .....ED8     INC EAX                          |  |     |\n//   |     6C250ED9     INC ESI    &lt;&lt;&lt;&lt;&lt;-----------------+--+     |\n//   |     .....EDA     CMP BYTE PTR DS:[ESI],0x22                |\n//   +-----.....EDD-----JNZ SHORT func.6C250EAD                   |\n//         6C250EDF    .....    &lt;&lt;&lt;&lt;------------------------------+\n\nwhile (*ESI!=0) {\n    DL=(char)*ESI;\n    if ((some_table_of_chars[DL]&amp;4)!=0) { /* lengthy, but explicit */\n        *ECX=*ECX+1; /* 4 byte integer */\n    } else {\n        *ECX=*ECX+2; /* 4 byte integer */\n        if (EAX!=0) { /* don't write to NULL address */\n            DL=(char)*ESI;\n            (char)*EAX=DL;\n            ESI++;\n            EAX++;\n            DL=(char)*ESI;\n            (char)*EAX=DL;\n            EAX++;\n        }\n    }\n    ESI++;\n    if (*ESI=='\"') {\n        break;\n    }\n}\n</code></pre>\n<p>I'd almost guess it's copying characters from <code>[ESI]</code> to <code>[EAX]</code>, perhaps counting single or double-wide characters as it does this, stopping at either end of the string (<code>[ESI]</code>) or at a double-quote character.</p>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "May 27, 2014 at 11:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DCoder",
                    "text": "<span class=\"comment-copy\"><code>TEST ..., 0x4</code> is a bitwise-AND, not an equality check. +1 anyway, since you beat me to posting an answer :)</span>",
                    "time": null
                },
                {
                    "user": "lornix",
                    "text": "<span class=\"comment-copy\">Duh!  You're right!   So we're checking a flag....  I'll update...</span>",
                    "time": null
                },
                {
                    "user": "lornix",
                    "text": "<span class=\"comment-copy\">almost like it's using the flag to determine whether to skip that char, or to copy TWO characters.  Crazy Windows and their UTF16 weirdness.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can't be sure with stuff like that if you don't see it in action with some sample data, (or at least the 256 bytes at 6C25EF39), but i'd say this routine calculates the length of a utf-8 string and optionally copies it.\n<code>ESI</code> is a pointer to the original string, <code>EAX</code> is a pointer to the destination, but might be zero as well, and <code>ECX</code> is a pointer to the length of the string.</p>\n<p>The table at 0x6C25EF39 would be a 256-byte table, using the ascii code as index, which has some flags per byte that define the character's property. Like this:</p>\n<pre><code>#define UTF8_2BYTE   0x04\nunsigned char flags[256]={ .... }\n\n#define IS_UTF8_2BYTEMARK(x)    (flags[(x)] &amp; UTF8_2BYTE)\n\n\n.... // char *esi=source, char *eax=dest, int *ecx=length\n\nfor ( ; *esi != '\"'; esi++) {\n    dl=*esi;                                // ...EAD\n    if (dl=='\\0')\n            break;\n    if (IS_UTF8_2BYTEMARK(dl)) {            // ...EB6\n            *ecx+=2;\n            if (!eax)                       // ...EC2\n                    continue;\n            *eax++=*esi++;                  // ...EC6..ECB\n    } else {\n            *ecx++;                         // ...ECE\n    }\n    if (eax)\n            *eax++=*esi;                    // ...ED4\n}\n</code></pre>\n<p>The \"esi++\" part of the loop is at 6C250ED9, this is where the \"continue\" jumps to.\nIn my for loop, the <code>*esi != '\"'</code> is a precondition; it isn't in your code, but i'd expect it to be in front of your loop.</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "May 27, 2014 at 11:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}