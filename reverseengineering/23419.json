{
    "title": "Reverse engineering MCU with \"poor\" datasheet",
    "link": "https://reverseengineering.stackexchange.com/questions/23419/reverse-engineering-mcu-with-poor-datasheet",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><br/>\nI'm reverse engineering a chinese MCU.<br/>\nThe datasheet for this chip is pretty poor, they left out important things like memory map, block diagrams ecc... so i got stuck.\n<strong>This is what i've done:</strong><br/>\nI got access to the <strong>SWD</strong> interface (it's like jtag but arm specific) and i can debug stuff through gdb.\nI have begun by taking a look at the main CPU, the datasheet says '128MHz high cpu performance processor', so i can assume it's an <strong>ARM Cortex</strong> (maybe M3).<br/>In memory i found the <strong>vector table</strong> (placed at 0) and the reset handler (0x4). By now i can start reading code from the entry point (reset handler).\nBut the code is big and reading all of that through gdb is annoying, but most important i don't know where things are.\nWell, through the vector table i know where the stack and entry point are. I have the locations of some interrupts that are used in the chip but nothing more.\nThe question is, can i figure out the memory map from this few information ?\nHow your approach would be with this sort of \"challenge\" ?\nThank you :)</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "301",
    "tags": [
        "debugging",
        "arm",
        "embedded"
    ],
    "user": "sjmz",
    "time": "Mar 11, 2020 at 13:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have SWD you should be able to get at least the device ID or determine the device family. For example, most Cortex-M devices have a pretty uniform memory map. \nYou can also probe memory reads (e.g. each 0x1000 bytes) to determine what addresses are valid. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Mar 15, 2020 at 13:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you touched vector table, first entry is initial value for stack pointer. In the most cases it is set to highest possible RAM address. If it's for example 0x2000A000, then you know you have MCU with 40KB RAM. It make it easier later if your MCU is not custom chip but duplicate of some known MCU from ST, NXP or other vendor.</p>\n<p>Maybe try some official tools from other vendors and you will catch your chip and it will make dumping flash memory much easier.</p>\n<p>Anyway you can try reading from address 0x1FFFF7E0 where should be place size flash memory size (at least in ST MCUs). From the other hand as Igor said you can try to download chunks of flash and later built it together. Later when you will have full content, you can try to feed <a href=\"https://onlinedisassembler.com/static/home/index.html\" rel=\"nofollow noreferrer\">online disassembler</a> with you code and with trial-error process find your core.</p>\n</div>",
            "votes": "1",
            "user": "voldi",
            "time": "Dec 12, 2020 at 18:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}