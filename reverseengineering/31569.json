{
    "title": "Understanding pointer indirection for accessing static variables in Cortex M0 firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/31569/understanding-pointer-indirection-for-accessing-static-variables-in-cortex-m0-fi",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering some firmware from a device running an ARM Cortex M0 (specifically, Nordic nrf51802). For reference, the pertinent part of the memory map looks like this:</p>\n<p><a href=\"https://i.sstatic.net/rzq2V.png\" rel=\"nofollow noreferrer\"><img alt=\"memory map snippet\" src=\"https://i.sstatic.net/rzq2V.png\"/></a></p>\n<p>I'm trying to add proper data types and names to global variables, but I don't quite understand what is going on.</p>\n<p>Consider this simple bit of C code:</p>\n<pre><code>static volatile u32_t wait_for_ack_timeout_us;\n\nstatic void update_radio_bitrate(void)\n{\n    NRF_RADIO-&gt;MODE = esb_cfg.bitrate &lt;&lt; RADIO_MODE_MODE_Pos;\n\n    switch (esb_cfg.bitrate) {\n    case NRF_ESB_BITRATE_2MBPS:\n        wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;\n        break;\n\n    case NRF_ESB_BITRATE_1MBPS:\n        wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;\n        break;\n\n    case NRF_ESB_BITRATE_250KBPS:\n        wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_250KBPS;\n        break;\n\n    case NRF_ESB_BITRATE_1MBPS_BLE:\n        wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS_BLE;\n        break;\n\n    default:\n        /* Should not be reached */\n    }\n}\n</code></pre>\n<p>Ghidra decompiles this as:</p>\n<p><a href=\"https://i.sstatic.net/Py7P5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Py7P5.png\"/></a></p>\n<p>Double-clicking PTR_DAT_00003d24 reveals:</p>\n<p><a href=\"https://i.sstatic.net/3odMJ.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/3odMJ.png\"/></a></p>\n<p>Double-clicking DAT_2000003c here reveals where <code>wait_for_ack_timeout_us</code> actually lives in memory:</p>\n<p><a href=\"https://i.sstatic.net/BGGF0.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/BGGF0.png\"/></a></p>\n<p>I changed the data type to uint32_t and added the variable name, but the decompiled code still shows the weird pointer dereference.</p>\n<p><a href=\"https://i.sstatic.net/1EYEC.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/1EYEC.png\"/></a></p>\n<p>My questions are:</p>\n<ol>\n<li>Why is there the added level of pointer indirection to access the static variable? Is this just how statics are implemented in ARM?</li>\n<li>Ultimately what I'd like to get is decompiler output that looks like this:</li>\n</ol>\n<pre><code>void update_radio_bitrate(void)\n\n{\n  char cVar1;\n  \n  *(uint *)(PTR_NRF_RADIO_Type_40001000.RESERVED6[59]_00003d20 + 0x10) =\n       (uint)(byte)PTR_nrf_esb_config_00003d1c[8];\n  cVar1 = PTR_nrf_esb_config_00003d1c[8];\n  if (cVar1 == '\\0') {\n    wait_for_ack_timeout_us = 0x40;\n  }\n  else if (cVar1 == '\\x01') {\n    wait_for_ack_timeout_us = 0x30;\n  }\n  else if (cVar1 == '\\x02') {\n    wait_for_ack_timeout_us = 0xfa;\n  }\n  else if (cVar1 == '\\x03') {\n    wait_for_ack_timeout_us = 0x40;\n  }\n  return;\n}\n\n</code></pre>\n<p>Is this possible?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "250",
    "tags": [
        "ghidra",
        "arm"
    ],
    "user": "Chris Laplante",
    "time": "Feb 20, 2023 at 0:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Right click PTR_DAT_00003d24 and retype it to be a pointer** and it should show up correctly</p>\n</div>",
            "votes": "1",
            "user": "Jake Ashmore",
            "time": "Aug 2, 2023 at 20:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}