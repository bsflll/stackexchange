{
    "title": "How do I find where in the code a particular Windows Resource is used?",
    "link": "https://reverseengineering.stackexchange.com/questions/29796/how-do-i-find-where-in-the-code-a-particular-windows-resource-is-used",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse engineer a Windows program. Using PE Editor, I find that the string in question - which I'm interested in - has got id 2820. The string is in this format: \"Some text, some text: %s\". Whenever this string appear in the program, about once per minute, five bytes (ASCII letters) appear where \"%s\" is. The letters seems to be random, but I think they are not and I'm interested to see what they are exactly. Hence the reverse engineering.</p>\n<p>However, I have a hard time finding in the disassembly exactly where resource id 2820 is fetched. There's a lot of functions/procedures involving LoadResource() / LockResource() but there is no obvious constant of 2820 anywhere.</p>\n<p><strong>Question:</strong> Is it possible, using whatever debugger, to put a breakpoint on resource ID 2820 that will halt execution as soon as the resource value is fetched?</p>\n<p>If not, what other approach can I use to find where in the code the resource is fetched, so I can dig deeper to see how the five bytes are created?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "482",
    "tags": [
        "ida",
        "pe"
    ],
    "user": "bos",
    "time": "Dec 30, 2021 at 1:07",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">For string resources there are specialized loading function available. Better check for <code>LoadStringA</code>/<code>LoadStringW</code> calls.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/setting-a-conditional-breakpoint\" rel=\"nofollow noreferrer\">conditional breakpoints</a> with <a href=\"https://www.microsoft.com/en-us/p/windbg-preview/9pgjgd53tn86\" rel=\"nofollow noreferrer\">WinDbg</a> using syntax similar to below, adjusting as necessary depending on specific APIs used.</p>\n<p>32-bit Application (x86)</p>\n<pre><code>bp /w \"poi(@esp+8) == 2820\" user32!LoadStringW\nbp /w \"poi(@esp+8) == 2820\" user32!LoadStringA\n</code></pre>\n<p>64-bit Application (amd64)</p>\n<pre><code>bp /w \"@rdx == 2820\" user32!LoadStringW\nbp /w \"@rdx == 2820\" user32!LoadStringA\n</code></pre>\n</div>",
            "votes": "1",
            "user": "chentiangemalc",
            "time": "Jan 13, 2022 at 3:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As for static approaches, I like to use IDA's immediate search for this kind of thing. <kbd>Search</kbd> -&gt; <kbd>Immediate value...</kbd>, and then put in the resource ID 2820, as in:</p>\n<p><a href=\"https://i.sstatic.net/LniCt.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/LniCt.png\"/></a></p>\n<p>IDA will give you a (usually small) list of places where the number 2820 is used in the code. The larger the number, the fewer false positives one tends to see in the output. There are a few compiler optimizations that may cause this not to work, most particularly <a href=\"https://www.msreverseengineering.com/blog/2014/6/23/switch-as-binary-search-part-0\" rel=\"nofollow noreferrer\"><code>switch</code> statements compiled via binary search</a> (e.g. if the target uses a <code>switch</code> statement to inspect an ID that Windows sends back as part of a window message), but in your case (string IDs), this almost certainly won't be a factor.</p>\n</div>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jan 16, 2022 at 19:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}