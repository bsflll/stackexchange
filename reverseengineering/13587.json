{
    "title": "Getting Access Violation when patching a program",
    "link": "https://reverseengineering.stackexchange.com/questions/13587/getting-access-violation-when-patching-a-program",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm very very newbie in assembly / ollydbg / reverse engineering. I'm totally lost with this error.</p>\n<p>I have created a simple program in Delphi, just to explore in ollydbg. Here is the program's code:</p>\n<pre><code>procedure TForm1.SpeedButton1Click(Sender: TObject);\nvar somevalue : string;\nbegin\n    somevalue := 'this is a value';\n    showmessage(somevalue);\nend;\n</code></pre>\n<p>So I attached it in olly and searched for the string \"this is a value\" and reached this point:</p>\n<pre><code>MOV EDX, 0045212C\n</code></pre>\n<p>the address <code>0x45212C</code> contains my string, so I decide to put another value in an empty address (I choose 00400400).</p>\n<p>The problem is that when I change the code to</p>\n<pre><code>MOV EDX, 400400\n</code></pre>\n<p>I get the following error:</p>\n<blockquote>\n<p>Access violation when writing to [004003F8]</p>\n</blockquote>\n<p>Which contains the following assembly line:</p>\n<pre><code>LOCK INC DWORD PTR DS:[EDX-8]\n</code></pre>\n<p>What does this error mean and how can I fix it?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "x86",
        "patching"
    ],
    "user": "Jo√£o Telles",
    "time": "Oct 1, 2016 at 21:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This error means that the processor tried to access the address at <code>0x004003F8</code> and failed. The access type was write.\nThis can happen because that address's page is protected and cannot be written to, or because the address is unallocated.</p>\n<p>I'ts crusial to note that the address, <code>0x004003F8</code> is eight bytes before your chosen address (<code>0x00400400</code>). I guess the access violation happened because that address is unallocated.</p>\n<p>The best guess given the information you provided is that although the textual string starts at that specific address, it is only part of the bigger in-memory structure that begins before the actual text.</p>\n<p>This is actually quite common, and correct for all managed/object oriented programming languages. and is indeed the cause for Delphi's <code>string</code> objects, as described <a href=\"http://docwiki.embarcadero.com/RADStudio/Seattle/en/Internal_Data_Formats#Long_String_Types\" rel=\"nofollow\">here</a> including memory representation specifics.</p>\n<p>The line in which you get an access viloation is also of some interesting capacity and could be unclear to the uneducated reverser.</p>\n<p><code>LOCK INC DWORD PTR DS:[EDX-8]</code></p>\n<p>And here's the instruction's parts described one by one:</p>\n<ol>\n<li><p><code>LOCK</code> is an instruction prefix that modifies the instruction following it, which is assumed to be preforming a read/modify/write operation. It guarantees the instruction following it is atomic, and prevents race conditions with other instructions modifying the same memory address.</p></li>\n<li><p><code>INC</code> has a single <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"nofollow\">operand</a> (either a register or a memory address) and increases it by one.</p></li>\n<li><p><code>DWORD</code> marks the provided <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"nofollow\">operand</a> points to a double-word value (that is, 4 bytes).</p></li>\n<li><p><code>DS:</code> tells the address is in the data segment. This became quite redundant in 32 and 64 bit architectures so you can normally just ignore it.</p></li>\n<li><p><code>[EDX-8]</code> is the actual <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"nofollow\">operand</a>, and represents \"the address 8 bytes before the value currently in <code>EDX</code>.</p></li>\n</ol>\n</div>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Sep 30, 2016 at 23:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">And note that the <code>[edx-8]</code> accesses the field that, in the description, is called <b>reference count</b>. As <code>lock</code> is used to make an instruction multithreading-safe, this makes sense as the string reference count is incremented whenever a new reference to the string gets created. To answer your question about how to fix it: copy your string to <code>4000040C</code>, and copy the 12 bytes in front of the original string to <code>40000400</code>. Don't forget to adjust the string length at <code>40000008</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}