{
    "title": "Conditional instructions on ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/8989/conditional-instructions-on-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand the syntax of the <code>IT</code> instruction that is to be used to enable conditional execution of instructions on ARM, in Thumb2 mode.</p>\n<p>The way I understand it, the bits in the CPSR register along with the <code>IT</code> instruction make conditional execution possible in Thumb mode. If I were writing some Thumb2 code perhaps I could go about following the process mentioned below.</p>\n<p>Lets say I have 4 conditional instructions(the maximum limit suported by <code>IT</code>).</p>\n<ol>\n<li>First, I write down by conditional instructions. Lets say the prefixes for the four instructions are <code>CLZNE.W</code>, <code>CLZEQ.W</code>, <code>ADDEQ</code>, <code>ADDNEQ</code>.</li>\n<li>Now before the conditional instructions I add an instruction of the form <code>ITEEE NE</code>. The NE is added as the first instruction has an NE. The <code>EEE</code> following the IT are added as the last 3 instructions are the converse of an <code>NE</code>. Is this how assembly programmers write conditional thumb2 ARM code? Is my understanding of the process correct?</li>\n<li>Why is the condition encoded in both <code>IT</code> and the instructions that follow?</li>\n</ol>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "660",
    "tags": [
        "arm"
    ],
    "user": null,
    "time": "May 26, 2015 at 12:26",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Usually, when I am not sure about the semantics of an ARM instruction, I use this <a href=\"http://svr-acjf3-armie.cl.cam.ac.uk/main.cgi\" rel=\"nofollow noreferrer\">website</a>. It always give you a good insight of what really does the instruction.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I understand you described the process of using IT instructions correctly. This is exactly how one of compilers I worked with works.</p>\n<p>[EDIT]</p>\n<p>According to (for example) <a href=\"https://www.scss.tcd.ie/~waldroj/3d1/arm_arm.pdf\" rel=\"nofollow\">ARM Architecture Reference Manual</a> document conditions are not encoded in most of conditionally executed Thumb instructions (except of jumps and some others) and it is the thing that defines the reason for IT instruction and all its variants existence.</p>\n<p>Unfortunately I couldn't find exact Thumb 2 encoding reference, but I think that it behaves the same as in Thumb.</p>\n<p>[ONE MORE EDIT]</p>\n<p>Yes, it is correct,both thumb and thumb II instructions I looked to does not have condition field (for example addition instructions and other ALU related things). The document I found it in is ARMv7-A -R Architecture Reference Manual, its download requires registration. So regarding your question number 3 - conditions in IT compliant operations are definitely not encoded in instruction itself. </p>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "May 27, 2015 at 9:26",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The condition codes displayed after the instructions is a convenience feature of the disassembler (deduced from the preceding <code>IT</code> instruction), the individual Thumb-2 instructions <em>do not encode the condition codes</em>. Adding condition codes even if they're not encoded is also the practice <a href=\"https://stackoverflow.com/a/20899475/422797\">recommended by ARM</a> when writing <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473c/BABJIHGJ.html\" rel=\"nofollow noreferrer\">UAL assembly</a>. This serves two purposes:</p>\n<ol>\n<li><p>The assembler can check that the <code>IT</code> instruction matches the following conditional-suffixed instructions (e.g. all <code>T</code> instructions use the same condition as <code>IT</code> itself and all <code>E</code> ones use the opposite one),and no conditional instructions appear outside of the <code>IT</code> range.</p></li>\n<li><p>The same assembly can be used when assembling for ARM mode - the IT instruction is ignored  (or hidden by an <code>ifdef</code>) and conditional instructions are assembled as regular conditional ARM instructions.</p></li>\n</ol>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}