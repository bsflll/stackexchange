{
    "title": "Trace system calls, including stack (and java stack if possible), on android?",
    "link": "https://reverseengineering.stackexchange.com/questions/12539/trace-system-calls-including-stack-and-java-stack-if-possible-on-android",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an android app that reads/writes a data file which seems to be encrypted, and i want to make a tool to read/write that file, so i need to reverse the encryption.</p>\n<p>The app in question consists of a few hundred classes and several .so libraries, and grepping through the classes and the output of <code>strings</code> on the .so files doesn't find the name of the game file (i tried case-sensitive, omitting the extension, and all that stuff), so the \"easy\" way to find the function doesn't work. So, what i want to do is intercept calls to the <code>open</code> system call, and check the stacks (dalvik and C) for the callers.</p>\n<p>On Windows, this is quite easy using <code>procmon</code> which saves the stack of each system call; on Linux, there is <code>strace -i</code> which doesn't give me a stack backtrace, but at least an IP value; also, i could make a named pipe having the filename in question to make the app block on opening it and attach gdb to get the backtrace.</p>\n<p>The problem with using <code>strace</code> and or a debugger on android is that i a) it seems to be non-trivial to get a version of <code>strace</code> that works with a particular OS level of android, b) when i try the named pipe approach, the app just exits, c) unless the whole encryption stuff is done in one of the <code>.so</code> libraries, i need the Java stack as well.</p>\n<p>I found <a href=\"http://newandroidbook.com/tools/jtrace.html\" rel=\"nofollow noreferrer\">jtrace</a> which seems to be a replacement for <code>strace</code>, but doesnt show the stack, and <a href=\"https://reverseengineering.stackexchange.com/questions/1714/dynamic-java-instrumentation\">this question</a> has some links, but they seem to be targetted at instrumentation/profiling, not what i need.</p>\n<p>So the question really is in the title: Is there a tool that traces system calls on android, and shows the stack trace, like <code>procmon</code> does on windows, including the java stack if possible? Or another idea to quickly find the code that opens and decrypts the file?</p>\n<p>If all else fails, i'll probably attach IDA to the process, put a breakpoint on <code>open</code>, and write a breakpoint condition that checks the file name. But that still won't give me the java stack, and i'd like to avoid the effort if there's a \"nicer\" tool.</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "android",
        "java",
        "callstack",
        "system-call",
        "dalvik"
    ],
    "user": "Guntram Blohm",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Sigtran",
            "text": "<span class=\"comment-copy\">Have you tried simply chmod 000 /location/to/datafile and using the logcat Monitor to see the error message your apk generates?</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">@Sigtran: I like the idea. Unfortunately, the log did contain an error message entry, but no stack backtrace.</span>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">You might be able to get some mileage out <a href=\"https://github.com/CalebFenton/simplify\" rel=\"nofollow noreferrer\">github.com/CalebFenton/simplify</a> or at least from modifying smalivm so it does what you want</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">I'll be releasing an open-source tool next month to do exactly what you need: <a href=\"https://recon.cx/2016/news/2016/05/09/Final-Selection.html\" rel=\"nofollow noreferrer\">https://recon.cx</a></span>",
            "time": null
        },
        {
            "user": "mlr",
            "text": "<span class=\"comment-copy\">Guntram Blohm. Did you get suitable solution for you problem? I'm now fighting with same problem.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can get system call stack with strace too. you just need to compile strace with <em>libunwind</em>. After that you just need to use -k to get system call stack for each system call.</p>\n</div>",
            "votes": "2",
            "user": "Rasoul",
            "time": "Mar 28, 2018 at 21:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://github.com/CrowdStrike/pyspresso/blob/master/pyspresso/samples/javajournal.py\" rel=\"nofollow\">JavaJournal</a>, which was built on top of the <a href=\"https://github.com/CrowdStrike/pyspresso\" rel=\"nofollow\">pyspresso</a> framework, was designed specifically for tracing method calls in Java.</p>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jun 20, 2016 at 23:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}