{
    "title": "alphanumeric shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/20656/alphanumeric-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have generated an alphanumeric shellcode with this command:</p>\n<pre><code>msfvenom -a x86 --platform linux -p linux/x86/exec CMD=/bin/sh -e x86/alpha_mixed BufferRegister=ECX -f python\n</code></pre>\n<p>I am targeting a 32 bits x86 architecture on Linux.</p>\n<p>Here is the shell code (i've converted it into a string):</p>\n<pre><code>IIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI0jTK68mIcbCVrHDmsSOyywSXfO2SsXgpe86OSRSY2NOyYs1Byxc8s0WpUPDo0b2I2NVOCCSXs0V7RsK9yq8Mk0AA\n</code></pre>\n<p>Here is a very basic c program which runs the shellcode:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\ntypedef void (*shellcode_t)();\n// unsigned char code[] = \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";\nunsigned char code[] = \"IIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI0jTK68mIcbCVrHDmsSOyywSXfO2SsXgpe86OSRSY2NOyYs1Byxc8s0WpUPDo0b2I2NVOCCSXs0V7RsK9yq8Mk0AA\";\n\n\nint main (int argc, char * argv[])\n{\n  shellcode_t appel = (shellcode_t)code;\n  appel();\n\n  return 0;\n}\n</code></pre>\n<p>Here is how i compile it:</p>\n<pre><code>$ cc -Wall -m32 -z execstack -fno-stack-protector -O0 test.c -o test\n</code></pre>\n<p>When i run the program i get a segfault.</p>\n<p>Please note the classical shellcode i've commented in the c program works perfectly. So it is not a c program compilation issue.</p>\n<p>Thanks</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "shellcode",
        "metasploit"
    ],
    "user": "Bob5421",
    "time": "Feb 19, 2019 at 8:48",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Are you sure of your crafted alphanumeric shellcode ? Because, I tried to read it and it seems just non sense to me... Have you tried to understand this shellcode in-depth?</span>",
            "time": null
        },
        {
            "user": "Bob5421",
            "text": "<span class=\"comment-copy\">no in fact i want first to first get a working alphanumeric shellcode. And then i want to understand how it works. This is why i am testing it first</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Well, as this one is obviously not working I think you should do the other way around. First understand and, then, make it work! :-)</span>",
            "time": null
        },
        {
            "user": "Bob5421",
            "text": "<span class=\"comment-copy\">My goal is to understand how it works but i need a sample first. What i am looking for is how make an int 80 instruction with only alpha numeric...</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Read this <a href=\"http://phrack.org/issues/57/15.html\" rel=\"nofollow noreferrer\">phrack article</a>. It explains everything in details.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Alphanumeric shellcode expects the location of the shellcode to be stored in a register, since the usual technique of call/pop can't be performed with the limited character set.</p>\n<p>In your example above this is set using BufferRegister=ECX, your C program doesn't take this into account though, which is why it crashes. Taking out the BufferRegister directive will give you a shellcode blob that determines the location manually, but isn't pure alphanumeric. This should run in your program though.</p>\n<p>An alternative would be to use something that runs shellcode from a file, since these often have a jmp/call reg32, which you can then use with BufferRegister.</p>\n</div>",
            "votes": "5",
            "user": "s3c",
            "time": "Feb 19, 2019 at 13:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">Thanks, can you tell me more about jmp/call i do not understand what it changes to be from a file</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">The <code>jmp</code>/<code>call</code> technique is just a technique used to find the address of the string whatever you are located in memory (it's a PIC method). The first <code>jmp</code> goes to the <code>call</code> which is just before the string <code>\"/bin/sh\"</code> and the <code>call</code> send the <code>eip</code> to the instruction just after the original <code>jmp</code>. Meanwhile, the <code>call</code> has pushed the return address on the stack, which is in fact the address of the string. This technique is fully documented on Internet in several articles.</span>",
                    "time": null
                }
            ]
        }
    ]
}