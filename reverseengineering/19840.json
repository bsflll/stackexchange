{
    "title": "How difficult is to decompile C++ file?",
    "link": "https://reverseengineering.stackexchange.com/questions/19840/how-difficult-is-to-decompile-c-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am writing an Android app with AES encryption and I am going to save AES key as a string to a C++ file with extension <code>.cpp</code>.</p>\n<p>I am also going to create an iOS app which will use the same AES key. Is it possible to save the key in C++ file in iOS? \nHow difficult would it be to decompile the C++ file and read the key?</p>\n<p>Here is the C++ file from Android:</p>\n<pre><code>#include &lt;jni.h&gt;\n#include &lt;string&gt;\n\nextern \"C\"\nJNIEXPORT jstring JNICALL\nJava_com_android_app_aesKeyFromJNI(JNIEnv *env, jobject /* this */) {\n    std::string secret = \"somesecretkey\";\n    return env-&gt;NewStringUTF(secret.c_str());\n}\n</code></pre>\n</div>",
    "votes": "9",
    "answers": 2,
    "views": "7k",
    "tags": [
        "c++",
        "android",
        "ios"
    ],
    "user": "Daniel Foo",
    "time": "Nov 7, 2018 at 15:59",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">A plain ascii string is anything but secret.</span>",
            "time": null
        },
        {
            "user": "Damon",
            "text": "<span class=\"comment-copy\">Any reason not to use the Android keystore system which is explicitly made for this purpose?</span>",
            "time": null
        },
        {
            "user": "slebetman",
            "text": "<span class=\"comment-copy\">No need to decompile. There is a piece of software called \"strings\" (typically installed or available to unixen like Linux and Mac OS) that will dump all strings in your app. All I have to do is to test the strings one-by-one until I find the correct secret key. Obviously I'd skip strings like \"Thank You.\" and \"Login:\"</span>",
            "time": null
        },
        {
            "user": "Lightness Races in Orbit",
            "text": "<span class=\"comment-copy\">@slebetman Next time I shall make my keys \"Thank You.\" or \"Login:\" and they will be safe!</span>",
            "time": null
        },
        {
            "user": "user26341",
            "text": "<span class=\"comment-copy\">There are fundamental security problems with this approach to cryptography extending far beyond how easily a string can be extracted from an executable (however obfuscated). This is almost the exact purpose of asymmetric cryptography, and systems based on it such as TLS. Use a library! Possibly ask on <a href=\"https://security.stackexchange.com/\">security.stackexchange.com</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Not hard enough!</strong> </p>\n<p>First of all, if you save the key as a non-encrypted string, a simple <code>strings</code> command will find it and IDA x-ref will even show the reverser where it's used.<br/>\nIf you save the key encrypted, a simple breakpoint will let them see the decrypted password. (or understanding the decryption algorithm).</p>\n</div>",
            "votes": "20",
            "user": "0xC0000022L",
            "time": "Nov 7, 2018 at 15:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "QuestionablePresence",
                    "text": "<span class=\"comment-copy\">\"or understanding the decryption algorithm\" Shouldn't be understanding the algorithm be irrelevant to breaking it? At least in well-designed encryption I thought that was kind of a design standard</span>",
                    "time": null
                },
                {
                    "user": "user22970",
                    "text": "<span class=\"comment-copy\">@Hobbamok My point was that if you return the secret, you need to decrypt it. The algorithm and password for the decryption will be written. A reverser could simply extract those and decrypt yhe original secret</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A plain text string like this will be visible by looking at the file in a hex editor (like <code>hte</code> or a viewer like <code>xxd</code> or <code>od</code>) or with the <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/strings\" rel=\"noreferrer\">Sysinternals <code>strings</code></a> command or with <a href=\"http://man7.org/linux/man-pages/man1/strings.1.html\" rel=\"noreferrer\"><code>strings(1)</code></a> on a Linux/FreeBSD etc, for example. Most reverse engineering tools have a separate view for strings, because those are usually exceptionally useful to reverse engineers. Amirag already pointed that out for IDA.</p>\n<p>In terms of Android that C++ file is likely going to end up as a shared object in ELF file format. These are binary files with a known structure. Simply by looking at the exported functions/symbols, it will be trivial to find the \"secret\". Even if you were to obfuscate this further, it would still not help. Obfuscation is <a href=\"https://en.wikipedia.org/wiki/Security_through_obscurity\" rel=\"noreferrer\">security through obscurity</a>. It's not <em>actual security</em>. So even writing that string as some xor-ed array of bytes or using the <a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\" rel=\"noreferrer\">Caesar cipher</a> will add no tangible protection if that's the goal.</p>\n<p>Furthermore you should <strong>never ever</strong> include the private key in code that ends up with the user. The reason why it's called a secret is because it should be <em>kept secret</em>. Just \"mangling\" the representation of this secret with a compiler isn't going to help at all.</p>\n<p>If it's a secret the user shouldn't see, this belongs on the server-side or into a HSM (hardware security module), but <em>not</em> on the user's machine in <em>any</em> form. There is no other way to reconcile <em>mistrusting</em> the user and at the same time placing \"secrets\" into the user's hands. It's the fundamental conundrum of software protection mechanisms also.</p>\n</div>",
            "votes": "12",
            "user": "0xC0000022L",
            "time": "Nov 7, 2018 at 21:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Robyn",
                    "text": "<span class=\"comment-copy\">Can a user see the string if they open the file in Notepad? Because ten-year-olds will try that.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Robyn: In theory, yes. However, if you mean Windows Notepad, that has typically huge problems with Unix line breaks and besides, there's no telling how many line breaks there are anyway in a binary. So the text may appear in one long line. That said, if your ten-year-old knows to turn it on, they can make use of the Word Wrap feature to mitigate that problem to some extent.</span>",
                    "time": null
                }
            ]
        }
    ]
}