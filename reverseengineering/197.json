{
    "title": "How can I analyze a program that uses a JIT compiled code?",
    "link": "https://reverseengineering.stackexchange.com/questions/197/how-can-i-analyze-a-program-that-uses-a-jit-compiled-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A lot of code I encounter today has a considerable amount of code generated at runtime, making analysis extremely laborious and time consuming.</p>\n<p>Is there any way I can create symbolic names for the various functions introduced by the JIT compiler that keep cropping up, or for the various artifacts (such as type information) introduced into the executable through the JIT compiler in GDB or WinDBG?</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "822",
    "tags": [
        "debuggers"
    ],
    "user": "zetavolt",
    "time": "Mar 23, 2013 at 19:20",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">I think if you say what specific compiler/VM you're dealing with, it will be easier to answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For .net there's <a href=\"http://msdn.microsoft.com/en-us/library/bb190764.aspx\" rel=\"noreferrer\">SOS.dll</a> and WinDbg.  You can find versions, for each version of installed .NET frameworks, in sub-folders in <em><code>%SYSTEMROOT%\\Microsoft.NET\\Framework\\</code></em>. You can load it into WinDbg by typing <code>.load</code> and the full path to the SOS dll. </p>\n<p>Use <code>!name2ee</code> to get the method table of class, <code>!dumpmt</code> to dump the method table, <code>!dumpmd</code> to dump the method descriptor for the method you want to look at, CodeAddr is the address of the JITed code, and finally <code>!U</code> to disassemble the code address.</p>\n<p>Here's a link to a <a href=\"http://dpaoliello.wordpress.com/2012/02/05/getting-the-disassembly-and-il-for-a-jittedngened-net-method-using-windbg-and-sos-dll/\" rel=\"noreferrer\">blog describing the process</a>.</p>\n<p>I'm actually not sure what you'd gain from attacking the JIT-compiled code though since it's almost always the case that the source VM is simpler and heavily type annotated. It's almost always easier to attack the intermediate language. The only reason I can think of is if you want to use the optimizations of the JIT to eliminate obfuscation. Even then it's probably easier to apply the optimization passes to the intermediate language. I suppose there's also the case when you want to massage the JIT code such that it can be reused in some sort of exploit. </p>\n<p>Am I misunderstanding the question?</p>\n</div>",
            "votes": "8",
            "user": "0xC0000022L",
            "time": "Apr 17, 2013 at 5:14",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yep, the answer depends on what exactly you are trying to achieve.</p>\n<p>In terms of analyzing the .NET app itself, you can get a complete source code by using, e.g. DotPeek written by JetBrains. You can even export it into a fully-functional Visual Studio Project, build it and debug. However, some apps may be obfuscated.</p>\n<p>Another scenario is when a .NET app is a part of another application written in another language (e.g. C++). In this case, most likely .NET code is compiled into DLL which is also can be disassembled using apps like DotPeek.</p>\n<p>Probably, there are may exist much more complex scenarios like a custom JIT-compiler, embedded into a malware. In such cases, the most reasonable way may be to write a custom plugin (e.g. using IDAPython for IDA Pro). This plugin should be aware of data structures or behavior and can assist you in each step of a reverse engineering process. But writing a custom plugin may require a lot of knowledge of the underlying language and may be a challenge on its own.</p>\n</div>",
            "votes": "1",
            "user": "Pavel Sapehin",
            "time": "Oct 12, 2019 at 3:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}