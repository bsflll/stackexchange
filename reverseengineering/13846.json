{
    "title": "Is it possible to get a list of user-defined names in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/13846/is-it-possible-to-get-a-list-of-user-defined-names-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA allows one to rename a program entity (e.g. register, variable, function) using <code>N</code> shortcut. Is it possible to get a list of such user-defined names in IDA?</p>\n</div>",
    "votes": "4",
    "answers": 3,
    "views": "6k",
    "tags": [
        "ida",
        "idapython",
        "python"
    ],
    "user": "sherlock",
    "time": "Nov 12, 2016 at 17:18",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Do you mean hex-rays variables by \"variables\" ? If yes, this script dumps almost all user defined things in specific decompiler function: <a href=\"https://github.com/idapython/src/blob/master/examples/vds4.py\" rel=\"nofollow noreferrer\">github.com/idapython/src/blob/master/examples/vds4.py</a></span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">In addition idautils.Names() can be used to retrieve the named global entities.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>idautils.Names</code> function might be of interest to you, as it returns a list of <code>(ea, name)</code> tuples for all names defined in the IDB and the ea at which they're located.</p>\n<p>Additionally, you can use the answer to the question Igor linked (<a href=\"https://reverseengineering.stackexchange.com/questions/13454/get-a-list-of-global-variables-with-ida-python\">Get a list of global variables with IDA python</a>) to get a list of all functions.</p>\n<p>Once you have the <code>ea</code>s you can do the following to figure out if a function or ea was named by the user:</p>\n<pre><code>def is_user_name(ea):\n  f = idc.GetFlags(ea)\n  return idc.hasUserName(f)\n</code></pre>\n<p>This function will return true if an EA has a name set by the user either programatically or manually.</p>\n</div>",
            "votes": "6",
            "user": "NirIzr",
            "time": "Sep 24, 2017 at 3:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Willi Ballenthin",
                    "text": "<span class=\"comment-copy\">I think the <code>Names</code> utility function is available under <code>idautils</code>, not <code>idc</code>.</span>",
                    "time": null
                },
                {
                    "user": "Willi Ballenthin",
                    "text": "<span class=\"comment-copy\">the API name is <code>idc.GetNames</code>, not <code>idc.getNames</code>. I can't make the edit because its less than six chars difference.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@WilliBallenthin Couldn't find a reference to idc.getnames anywhere in my comment. Let me know and I'll edit.</span>",
                    "time": null
                },
                {
                    "user": "Willi Ballenthin",
                    "text": "<span class=\"comment-copy\">whoops, i'm sorry! I meant <code>idc.GetFlags()</code>.</span>",
                    "time": null
                },
                {
                    "user": "dkaranovich",
                    "text": "<span class=\"comment-copy\"><code>is_user_name</code> seems to return <code>True</code> even for library names that were generated during analysis.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use View-&gt;Open subview-&gt;Names or <kbd>Shift-F4</kbd>. Note that the list included <em>all</em> names, both user-defined as well as generated by IDA (e.g. ASCII string names).</p>\n<p>See also related <a href=\"https://reverseengineering.stackexchange.com/questions/13454/get-a-list-of-global-variables-with-ida-python?rq=1\">Get a list of global variables with IDA python</a></p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Is it possible to list out user-defined names only, not IDA generated ones?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Run this .idc script to export all user-defined functions name. Script tested on IDA 7.0.</p>\n<p>For IDA &lt; 7.0: please use function <strong>hasUserName(addr)</strong> instead of <strong>has_user_name(addr)</strong></p>\n<pre><code>#include &lt;idc.idc&gt;\nstatic FuncDump(start)\n{\n    auto ea, str, count, ref;\n    auto end;\n    auto teststr;\n\n    ea = start;\n\n    while( ea != BADADDR )\n    {\n        str = GetFunctionName(ea);\n        if( str != 0 )\n        {\n            end = FindFuncEnd(ea);\n\n            count = 0;\n            ref = RfirstB(ea);\n            while(ref != BADADDR)\n            {\n                count = count + 1;\n                ref = RnextB(ea, ref);\n            }\n\n            teststr = sprintf(\"sub_%X\", ea);\n            if(has_user_name(GetFlags(ea)) &amp;&amp; !((GetFunctionFlags(ea) &amp; FUNC_LIB) == FUNC_LIB) &amp;&amp; teststr != str ) {\n                Message(\"-s 0x%X=%s\\n\", ea, str );\n            }\n            //Message(\"%s, 0x%d, 0x%x, 0x%x, 0x%x, %d\\n\", str, count, ea, end, end-ea, end-ea   );\n        }\n\n        ea = NextFunction(ea);\n    }\n}\n\nstatic main() \n{\n    Message(\"FuncDump: Start\\n\");\n\n    FuncDump(0x40000);\n\n    Message(\"FuncDump: Done\\n\");\n}\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Tráº§n Leo",
            "time": "Feb 26, 2020 at 19:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}