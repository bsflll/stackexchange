{
    "title": "Why the global string varable exploitation using angr doesn't work?",
    "link": "https://reverseengineering.stackexchange.com/questions/31571/why-the-global-string-varable-exploitation-using-angr-doesnt-work",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To learn the angr module, I have made a simple C code like follows.</p>\n<p>test.c</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nchar input[6];\n\nint main(void)\n{\n    scanf(\"%s\", input);\n\n    if(strcmp(input, \"hello\")==0)\n    {\n        puts(\"Correct!\");\n    }\n    else\n    {\n        puts(\"Incorrect!\");\n    }\n}\n</code></pre>\n<p>I complied this using gcc. and I disassemble it using gdb.</p>\n<p>test disassemble code</p>\n<pre><code>Dump of assembler code for function main:\n   0x08049176 &lt;+0&gt;:     push   ebp\n   0x08049177 &lt;+1&gt;:     mov    ebp,esp\n   0x08049179 &lt;+3&gt;:     push   0x804c01c\n   0x0804917e &lt;+8&gt;:     push   0x804a008\n   0x08049183 &lt;+13&gt;:    call   0x8049060 &lt;__isoc99_scanf@plt&gt;\n   0x08049188 &lt;+18&gt;:    add    esp,0x8\n   0x0804918b &lt;+21&gt;:    push   0x804a00b\n   0x08049190 &lt;+26&gt;:    push   0x804c01c\n   0x08049195 &lt;+31&gt;:    call   0x8049030 &lt;strcmp@plt&gt;\n   0x0804919a &lt;+36&gt;:    add    esp,0x8\n   0x0804919d &lt;+39&gt;:    test   eax,eax\n   0x0804919f &lt;+41&gt;:    jne    0x80491b0 &lt;main+58&gt;\n   0x080491a1 &lt;+43&gt;:    push   0x804a011\n   0x080491a6 &lt;+48&gt;:    call   0x8049050 &lt;puts@plt&gt;\n   0x080491ab &lt;+53&gt;:    add    esp,0x4\n   0x080491ae &lt;+56&gt;:    jmp    0x80491bd &lt;main+71&gt;\n   0x080491b0 &lt;+58&gt;:    push   0x804a01a\n   0x080491b5 &lt;+63&gt;:    call   0x8049050 &lt;puts@plt&gt;\n   0x080491ba &lt;+68&gt;:    add    esp,0x4\n   0x080491bd &lt;+71&gt;:    mov    eax,0x0\n   0x080491c2 &lt;+76&gt;:    leave\n   0x080491c3 &lt;+77&gt;:    ret\nEnd of assembler dump.\n</code></pre>\n<p>and I make the exploit code using angr.\ntest.py</p>\n<pre><code>mport angr\nimport claripy\n\np=angr.Project('./test', auto_load_libs=True)\n\ninitial_state=p.factory.blank_state(addr=0x8049176)\n\npassword=claripy.BVS('password', 8*5)\n\npassword_addr=0x804c01c\ninitial_state.memory.store(password_addr, password)\n\nsm=p.factory.simulation_manager(initial_state)\n\nsm.explore(find=0x8049196, avoid=0x80491b5)\n\nprint(sm.found)\n\nif sm.found:\n    sol_state=sm.found[0]\n    print(sol_state.solver.eval(password, cast_to=bytes))\n</code></pre>\n<p>When I excute this exploit code, it doesn't work!\noutput:</p>\n<pre><code>WARNING  | 2023-02-20 04:18:53,914 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing register with an unspecified value. This could indicate unwanted behavior.\nWARNING  | 2023-02-20 04:18:53,914 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:\nWARNING  | 2023-02-20 04:18:53,914 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state\nWARNING  | 2023-02-20 04:18:53,915 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null\nWARNING  | 2023-02-20 04:18:53,915 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to suppress these messages.\nWARNING  | 2023-02-20 04:18:53,915 | angr.storage.memory_mixins.default_filler_mixin | Filling register ebp with 4 unconstrained bytes referenced from 0x8049176 (main+0x0 in test (0x8049176))\nWARNING  | 2023-02-20 04:18:54,608 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fff0000 with 4 unconstrained bytes referenced from 0x80491c3 (main+0x4d in test (0x80491c3))\nWARNING  | 2023-02-20 04:18:55,018 | angr.engines.successors | Exit state has over 256 possible solutions. Likely unconstrained; skipping. &lt;BV32 mem_7fff0000_16_32{UNINITIALIZED}&gt;\n[]\n</code></pre>\n<p>What happend? I have searched on the Internet, I can't find the answer.\nHere is a <a href=\"https://reverseengineering.stackexchange.com/questions/27139/symbolic-gloabal-variables-in-angr\">similar question</a>, but it's not clear.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "79",
    "tags": [
        "python",
        "strings",
        "angr"
    ],
    "user": "doldom",
    "time": "Feb 20, 2023 at 9:24",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">I don't know angr but I'd guess it doesn't know it needs to be looking for \"Correct\" not \"Incorrect\". How does your test.py identify that? (or is that one of the hex addresses?)</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Why is your find address not an instruction boundary? It could be 0x080491a6</span>",
            "time": null
        }
    ],
    "answers_data": []
}