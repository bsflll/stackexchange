{
    "title": "Easiest way to move everything, including custom structs, from an IDA Pro IDB to another?",
    "link": "https://reverseengineering.stackexchange.com/questions/29907/easiest-way-to-move-everything-including-custom-structs-from-an-ida-pro-idb-to",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have analyzed a 32 bit version of an executable, defined many structs, renamed many things and so on.</p>\n<p>Now i want to move everything, including the structs that i defined, to the IDB of the 64 bit version of the same application. Because i know that at least many of the structs and functions are the same so at least i need to move these structs there.</p>\n<p>How to do this in IDA pro? (using 7.6)</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "112",
    "tags": [
        "ida"
    ],
    "user": "OneAndOnly",
    "time": "Jan 22, 2022 at 6:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The minsc plugin at <a href=\"https://github.com/arizvisa/ida-minsc\" rel=\"nofollow noreferrer\">https://github.com/arizvisa/ida-minsc</a> supports structure/union decoding, arithmetic, layouting, and serialization. This can be used with <a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"nofollow noreferrer\">pickle</a> to export a structure from a database or import it into another database if using IDA 6.95 through 8.4.</p>\n<p><em>Disclaimer: I'm the maintainer of the minsc plugin.</em></p>\n<p>If you don't want to use the \"Dump typeinfo to IDC file\" to produce an IDC file that can be imported within other databases (as per <a href=\"https://docs.hex-rays.com/user-guide/user-interface/menu-bar/file/produce-output-files#dump-typeinfo-to-idc-file\" rel=\"nofollow noreferrer\">https://docs.hex-rays.com/user-guide/user-interface/menu-bar/file/produce-output-files</a>), you can use the minsc plugin with <a href=\"https://docs.python.org/3/library/pickle.html#pickle.dump\" rel=\"nofollow noreferrer\"><code>pickle.dump</code></a> to serialize them as a binary stream.</p>\n<pre class=\"lang-py prettyprint-override\"><code>Python&gt;import pickle\nPython&gt;struc.list(like=\"*stuff*to*care*about*\")\n...\nPython&gt;st=struc.by('mystruc')\nPython&gt;with open(db.path('filename.relative.to.database.pickle'), 'wb') as out:\nPython&gt;    pickle.dump(st, outfile)\nPython&gt;\n</code></pre>\n<p>To then import it into another database, you can use <a href=\"https://docs.python.org/3/library/pickle.html#pickle.load\" rel=\"nofollow noreferrer\"><code>pickle.load</code></a> as with most python objects that implement the pickle protocol.</p>\n<pre class=\"lang-py prettyprint-override\"><code>Python&gt;newstruc = pickle.load(open(db.path('filename.relative.to.idb.pickle')), 'rb')\nPython&gt;newstruc\n...\nPython&gt;\n</code></pre>\n<p>To serialize multiple structures, the <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.iterate\" rel=\"nofollow noreferrer\"><code>structure.iterate</code></a> function can be used with a number of <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html\" rel=\"nofollow noreferrer\">filters</a> to select them into a list that is to be pickled.</p>\n<pre class=\"lang-py prettyprint-override\"><code>Python&gt;forpickling = [st for st in structure.iterate(greater=0x100, library=False)]\nPython&gt;pickle.dump(forpickling, open('/path/to/file', 'wb))\n</code></pre>\n<p>To serialize all of the structures/unions that you've tagged with a specific comment, you can do something like the following to save a list.</p>\n<pre class=\"lang-py prettyprint-override\"><code>Python&gt;forsaving = []\nPython&gt;for st, tags in struc.select('selected'):\nPython&gt;    if tags['selected']:\nPython&gt;        forsaving.append(st)\nPython&gt;    continue\nPython&gt;\nPython&gt;pickle.dump(forsaving, open('/path/to/file', 'wb))\n</code></pre>\n<p>It is important to note, that if a structure/union exists with the same name in the database, it will be updated with the contents of the matching deserialized structure/union when loaded. This includes names, flags, types, and comments/tags.</p>\n<pre><code>Python&gt;pickle.load(open('/path/to/file','rb'))\n</code></pre>\n<p>If you use <a href=\"https://arizvisa.github.io/ida-minsc/modules/structure.html#structure.select\" rel=\"nofollow noreferrer\"><code>struc.select</code></a> without any filters, it will only select the structures that you've added manually. This can be used to avoid updating structures that have been imported by IDA and not explicitly created by you.</p>\n<pre class=\"lang-py prettyprint-override\"><code>Python&gt;saved = [st for st, _ in struc.select()]\nPython&gt;pickle.dump(saved, open('/path/to/whatev', 'wb'))\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Ali Rizvi-Santiago",
            "time": "Nov 12, 2024 at 18:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}