{
    "title": "Decrypting SSL traffic from malware",
    "link": "https://reverseengineering.stackexchange.com/questions/17941/decrypting-ssl-traffic-from-malware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a cybersecurity student. What is the best approach to decrypting traffic from a malware? I am using x32dbg (I'm new to assembly) and have trouble finding the private key. Are there any other approaches?</p>\n<p>This is the malware I am reverse engineering: <a href=\"https://github.com/ytisf/theZoo/tree/master/malwares/Binaries/CryptoLocker_10Sep2013\" rel=\"nofollow noreferrer\">https://github.com/ytisf/theZoo/tree/master/malwares/Binaries/CryptoLocker_10Sep2013</a></p>\n</div>",
    "votes": "1",
    "answers": 4,
    "views": "545",
    "tags": [
        "decryption"
    ],
    "user": "Minh Tran",
    "time": "Apr 10, 2018 at 1:51",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\"><a href=\"https://reverseengineering.stackexchange.com/questions/2252/what-is-dll-injection-and-how-is-it-used-for-reversing/2255#2255\" title=\"what is dll injection and how is it used for reversing\">reverseengineering.stackexchange.com/questions/2252/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically, if it's really SSL you need to find the <code>SSL_Read()</code> and <code>SSL_Write()</code> functions in the malware code and hook them, so that you can dump their buffers. </p>\n<p>But, I doubt that this malware uses SSL, couldn't find any signature of SSL library in the binary.</p>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Apr 11, 2018 at 7:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Find the APIs it uses and hook them. The other post mentioned <code>SSL_Read()</code> and <code>SSL_Write()</code>. Malware often just uses the WinAPI to do HTTP, which makes it quite simple to use HTTPS.</p>\n<p>Check for <a href=\"https://msdn.microsoft.com/en-us/en-en/library/windows/desktop/aa384257(v=vs.85).aspx\" rel=\"nofollow noreferrer\">WinHTTP</a> functions, or the <a href=\"https://msdn.microsoft.com/en-us/en-en/library/windows/desktop/aa385473(v=vs.85).aspx\" rel=\"nofollow noreferrer\">WinInet</a> functions, either as imports, or (typically) via dynamic lookups.</p>\n</div>",
            "votes": "0",
            "user": "Johann Aydinbas",
            "time": "Apr 11, 2018 at 13:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are you looking for decrypting the files encrypted by the Ransomware. Or are you trying to decrypt the network communication of malware ?</p>\n<p>If it is the first one, You will be able to get the private key by stepping into the code till it reaches (make sure you have lot of coffee next to you).</p>\n<p>For the second one, You can use sslstrip to decrypt the traffic.</p>\n</div>",
            "votes": "0",
            "user": "Sai Santhosh D",
            "time": "Apr 13, 2018 at 7:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">this is not a forum, please don't post comments or follow-up questions in the answer box.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">BTW, <code>sslstrip</code> does not \"decrypt\" anything.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming it's using standard methods of performing requests You could try using a proxy to route your traffic and then snoop inside the SSL. For example this tool: <a href=\"https://www.charlesproxy.com/\" rel=\"nofollow noreferrer\">https://www.charlesproxy.com/</a></p>\n</div>",
            "votes": "0",
            "user": "jv_",
            "time": "Apr 13, 2018 at 9:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}