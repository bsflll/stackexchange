{
    "title": "what's the function of LODWORD and HIDWORD?",
    "link": "https://reverseengineering.stackexchange.com/questions/8296/whats-the-function-of-lodword-and-hidword",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to figure out what  does this piece of code exactly:</p>\n<pre><code>  LODWORD(fMax) = *(_DWORD *)v12;\n  HIDWORD(fMax) = v13;\n</code></pre>\n<p>I was reading on <code>IDA\\Plugins\\defs.h</code> the definition, but I don't understand what does exactly to redo the same thing on Java.</p>\n<p>I'll be really really glad if someone of you can help me.</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "26k",
    "tags": [
        "ida",
        "disassembly",
        "decompilation",
        "c"
    ],
    "user": "Criss Moreyra",
    "time": "Feb 20, 2015 at 7:56",
    "comments": [
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\"><code>LODWORD()</code> takes the low DWORD from <code>fMax</code>, and <code>HIDWORD()</code> the high DWORD. Basically, if you got an <code>__int64</code> like this: <code>x = 0xFFFFFFFFAAAAAAAA</code>, <code>LODWORD(x)</code> is <code>0xAAAAAAAA</code> and <code>HIDWORD(x)</code> is <code>0xFFFFFFFF</code></span>",
            "time": null
        },
        {
            "user": "Criss Moreyra",
            "text": "<span class=\"comment-copy\">So this two variables are basically changin the value of fMax. for example as you said, if i had fMax = 0xFFFFFFFFAAAAAAAA and v12 = 0xFFCD0000... the final value of LODWORD(fMax) would be 0xFFFFFFFFFFCD0000. i'm right?</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Yes, you're right. However, i assume you omitted a <code>&amp;</code>, and the first expression should read <code>...*(_DWORD *) &amp;v12</code>, as you want to select the low 32 bits from v12, instead of treating v12 as a pointer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This pattern is typical for assigning a 64-bit value to a variable on a 32 bit system - you calculate each 32-bit value separately, then push them into the high and low 32 bits of the 64 bit value.</p>\n<p>In Java, your first assignment would be</p>\n<pre><code>fMax=(fMax &amp; 0xFFFFFFFF00000000) | (v12 &amp; 0x00000000FFFFFFFF)\n</code></pre>\n<p>and the second would be</p>\n<pre><code>fMax=(fMax &amp; 0x00000000FFFFFFFF) | (((long)v13&lt;&lt;32) &amp; 0xFFFFFFFF00000000)\n</code></pre>\n<p>Of course, <code>fMax</code> is a 64 bit long here.</p>\n<p>You can omit the <code>&amp; 0xFFFFFFFF00000000</code> from the second expression, as you know those bits will be zero after the left shift. And you can omit the <code>&amp; 0x00000000FFFFFFFF</code> from the first expression if <code>v12</code> is an <code>int</code>, since the high bits will be zero anyway in a 32 bit integer. But the java compiler will probably optimize these away anyway, and i wanted to write the statements in a way that makes clear which bits are taken from <code>fMax</code>, and which from <code>v12</code> and <code>v13</code>.</p>\n</div>",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Feb 20, 2015 at 6:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Criss Moreyra",
                    "text": "<span class=\"comment-copy\">Thank you, i've understood but now i found this <code>SHIDWORD(v10)</code> i assume this is something like do <code>fMax = (fMax &amp; 0xFFFFFFFF00000000) | (v10 + 1) </code> i'm right?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">SHIDWORD is the sign extended HIDWORD. The SHIDWORD of a negative 32-bit value is FFFFFFFF, and the SHIDWORD of a positive 32-bit value is 0. The <code>+1</code> does not apply to the value, as in your <code>v10 + 1</code>, it applies to the pointer - one DWORD after the one at the address of <code>v10</code>.</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">How can I convert that in simple C code? IDA interpreted this <code>mov [rsp+56], eax</code> to this <code>LODWORD(v1) = v2;</code>, <code>v1</code> goes to a unknown/undocumented function.</span>",
                    "time": null
                }
            ]
        }
    ]
}