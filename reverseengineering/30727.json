{
    "title": "Calculator shows incorrect result for 32-bit subtraction?",
    "link": "https://reverseengineering.stackexchange.com/questions/30727/calculator-shows-incorrect-result-for-32-bit-subtraction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was trying to <a href=\"https://forum.arduino.cc/t/dont-use-millis-or-micros-or-delay-or-even-delaymicroseconds-in-your-project\" rel=\"nofollow noreferrer\">argue</a> about the operation of a routine called micros() and millis() that is used on the Arduino platform, and I ended up finding this <a href=\"https://calc.penjee.com/\" rel=\"nofollow noreferrer\">calculator</a>. The calculator shows a different result than 8-bit (ATmega328 - Arduino Nano) and 32-bit (ESP32) processors. They even cited the result of the Windows calculator, which shows the same result as the aforementioned microcontrollers.</p>\n<blockquote>\n<p>Nano/ESP32: 0x1 - 0xFFFFFF00 = 0x101</p>\n</blockquote>\n<blockquote>\n<p>Calculator: 0x1 - 0xFFFFFF00 = 0xFFFFFEFF</p>\n</blockquote>\n<p>I found an <a href=\"https://reverseengineering.stackexchange.com/questions/22145/how-is-subtraction-performed-on-unsigned-numbers-within-the-cpu\">explanation</a> for calculating subtraction for 8-bit numbers,</p>\n<p><strong>Does anyone know of an answer made with 32-bit numbers?</strong>.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "50",
    "tags": [
        "arduino",
        "math"
    ],
    "user": "R R",
    "time": "Aug 2, 2022 at 15:26",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Is <code>0xFFFFFF00</code> supposed to be <code>4294967040</code> or -256?</span>",
            "time": null
        },
        {
            "user": "R R",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky, Hi, this is my doubt. Apparently, a microcontroller accepts one thing, but a calculator accepts something else. They commented that in Linux the result is the same as in the microcontroller, so I ended up not being able to argue anymore.</span>",
            "time": null
        },
        {
            "user": "the busybee",
            "text": "<span class=\"comment-copy\">I doubt the result of the calculator. Are you sure that there is no negative sign missing?</span>",
            "time": null
        },
        {
            "user": "the busybee",
            "text": "<span class=\"comment-copy\">It is important to know what width the different systems use. You cannot say \"Linux does this.\" It all depends on singed/unsigned and the width.</span>",
            "time": null
        },
        {
            "user": "the busybee",
            "text": "<span class=\"comment-copy\">Anyway, I'm sure you can use differences of the values coming from <code>millis()</code> or <code>micros()</code> in Arduino, even in very long running applications. That is, as long as the intervals are shorter than the <code>unsigned long</code> can hold.</span>",
            "time": null
        }
    ],
    "answers_data": []
}