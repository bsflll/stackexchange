{
    "title": "How to virtualize part of a code like VMProtect does?",
    "link": "https://reverseengineering.stackexchange.com/questions/21709/how-to-virtualize-part-of-a-code-like-vmprotect-does",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a new student in the field of cybersecurity.</p>\n<p>I would like to learn more about how virtualization used by software such as <a href=\"https://oreans.com/codevirtualizer.php\" rel=\"nofollow noreferrer\">CodeVirtualizer</a> and <a href=\"https://vmpsoft.com/support/user-manual/introduction/what-is-vmprotect/\" rel=\"nofollow noreferrer\">VMProtect</a> works, and ideally to be able to virtualize part of my code in VB.NET. However, I do not understand how they operate, and I find it hard to find resources about it. So, I ask myself the following questions:</p>\n<ul>\n<li>What functions do these programs use to achieve this virtualization? How do this work, step by step? Obviously, these are private software, so the source code is not given. The virtualization of a part of a code is difficult for me to conceive. It's obviously not about system virtualization like VMware or VirtualBox, but a part of a code. Is the environment changed?</li>\n<li>From this last observation, where are the virtualized files stored?\nIf my virtualized program wants to write to disk, will the data be\nwritten to a virtualized disk?</li>\n</ul>\n<p>It may be difficult to answer every detail of each of my questions; I imagine that the domain is complex. Nevertheless, if some elements of answers could be brought, it would help me a lot to better understand :)</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "842",
    "tags": [
        "anti-debugging",
        "virtualizers",
        "vmprotect",
        "vms"
    ],
    "user": "Corentin Mar",
    "time": "Jul 18, 2019 at 21:32",
    "comments": [
        {
            "user": "R4444",
            "text": "<span class=\"comment-copy\">The code virtualizer website you mentioned explains everything in details, also check out this github repo for more info - <a href=\"https://github.com/ScalletaZ/phantasm-x86-virtualizer\" rel=\"nofollow noreferrer\">github.com/ScalletaZ/phantasm-x86-virtualizer</a></span>",
            "time": null
        },
        {
            "user": "MazeGen",
            "text": "<span class=\"comment-copy\">There is the most trivial \"VM\" you could start with. It actually interprets few x86 instructions. The difference from \"real\" virtualizer is that a virtualizer transforms the x86 instructions to a bytecode. <a href=\"https://github.com/Barebit/trivial-vm\" rel=\"nofollow noreferrer\">github.com/Barebit/trivial-vm</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}