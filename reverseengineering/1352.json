{
    "title": "How to investigate function calls across a batch of targets?",
    "link": "https://reverseengineering.stackexchange.com/questions/1352/how-to-investigate-function-calls-across-a-batch-of-targets",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Say I have a collection of N executables, where N is large enough to make repetitive manual analysis tedious. I want to process all of these files and extract information about certain function calls, for instance from a malware analysis point of view, knowing what constant arguments were used in calls to <code>OutputDebugString</code> would be of interest, and I guess for vulnerability research there may be applications, e.g. format strings.</p>\n<p>A dynamic approach would be easiest, but has issues with code coverage and overheads when dealing with malware. I'd prefer a static approach and would be interested if anyone had any experiences to share. I was thinking along the lines of scripting IDA/HexRays to run over each binary, attempt to produce a C file and grep over the output, but this may be rather inefficient.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "182",
    "tags": [
        "decompilation",
        "malware",
        "automation"
    ],
    "user": "user1307",
    "time": "Mar 28, 2013 at 14:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wish I had an easy way to help you.  When I did something similar previously, I used <a href=\"https://code.google.com/p/distorm/\" rel=\"nofollow\">distorm</a> and <a href=\"https://code.google.com/p/pefile/\" rel=\"nofollow\">pefile</a>.  Basically, the approach I took in my code (and it, admittedly, wasn't a great one) was to:</p>\n<ol>\n<li>Walk the IAT of the executable to locate the function(s) of interest.</li>\n<li>Perform a recursive-descent disassembly of the executable looking for calls to that function.</li>\n<li>Use the recently disassembly instructions to check what the arguments were.</li>\n</ol>\n<p>In retrospect, learning the IDA scripting would have saved me a lot of time and effort but I was hard-headed.  If you're going to go down the same route, I'd suggest scripting IDA.  Although, I'm not sure you need to use Hex-Rays to convert it back to C code first.</p>\n</div>",
            "votes": "4",
            "user": "mrduclaw",
            "time": "Mar 29, 2013 at 19:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1307",
                    "text": "<span class=\"comment-copy\">Interesting, thanks - hadn't considered distorm. Hex-Rays was attractive due to its data flow tracking; there may be cases (e.g. variable re-use in arguments for repeated function calls) that could be less easy to analyze through pure disassembly.</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Yes, there were some edge-cases that required manual analysis from my end.  But my corpus of executables was large enough that this technique worked for me for what I needed.  I was only looking for an 80% solution at the time.</span>",
                    "time": null
                }
            ]
        }
    ]
}