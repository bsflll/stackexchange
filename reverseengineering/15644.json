{
    "title": "How calls work in x86",
    "link": "https://reverseengineering.stackexchange.com/questions/15644/how-calls-work-in-x86",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am studying some X86 code and I often see calls:</p>\n<pre><code>call sym.imp.printf\ncall sym.imp.scanf\ncall sym.imp.strcmp\ncall sym.imp.__stack_chk_fail\n</code></pre>\n<p>Those examples are the most common calls.\nBut how do they actually work?\nI mean, I know they are system calls, also printf along with scanf, strcmp are C functions. But my question is where do they get the parameters from?</p>\n<p>sym.imp.strcmp: where is it getting strings from to compare?</p>\n<p>Where is the value of scanf saved?</p>\n<p>And also, what does the call sym.imp.__stack_chk_fail does?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "9k",
    "tags": [
        "assembly",
        "x86",
        "system-call"
    ],
    "user": "Florin",
    "time": "Jun 23, 2017 at 17:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>System calls vs. function calls</strong></p>\n<blockquote>\n<p>I mean, I know they are system calls, also printf along with scanf, strcmp are C functions.</p>\n</blockquote>\n<p>Many C library functions are wrappers around system calls. <code>printf</code> and <code>scanf</code> are are examples of this. However, it should not be assumed that all C library functions execute system calls, as none of the <code>string.h</code> library functions, including <code>strcmp</code>,  execute any system calls.</p>\n<blockquote>\n<p>A system call is a controlled entry point into the kernel, allowing a process to request that the kernel perform some action on the process’s behalf. The kernel makes a range of services accessible to programs via the system call application programming interface (API).<sup>1</sup></p>\n</blockquote>\n<p>The mechanism by which system calls are made is quite different than by that which function calls are made:</p>\n<blockquote>\n<p>The [C library] wrapper function executes a trap machine instruction (<code>int 0x80</code>), which causes the processor to switch from user mode to kernel mode and execute code pointed to by location <code>0x80</code> (128 decimal) of the system’s trap vector.</p>\n<p>More recent x86-32 architectures implement the <code>sysenter</code> instruction, which provides a faster method of entering kernel mode than the conventional int <code>0x80</code> trap instruction. The use of <code>sysenter</code> is supported in the 2.6 kernel and from glibc 2.3.2 onward.<sup>1</sup></p>\n</blockquote>\n<p>Here is a visual depiction of the C library function <a href=\"http://man7.org/linux/man-pages/man2/execve.2.html\" rel=\"noreferrer\"><code>execve</code></a> being executed, in which <code>execve</code> makes a system call:</p>\n<p><a href=\"https://i.sstatic.net/tFy5U.png\" rel=\"noreferrer\"><img alt=\"TLPI steps in executing a system call\" src=\"https://i.sstatic.net/tFy5U.png\"/></a></p>\n<p><strong>x86 calling conventions</strong></p>\n<p>When a function is called, flow of control branches to a different location in memory via the <code>call</code> instruction:</p>\n<blockquote>\n<p>Saves procedure linking information on the stack and branches to the procedure (called procedure) specified with the destination (target) operand. The target operand specifies the address of the first instruction in the called procedure. This operand can be an immediate value, a general purpose register, or a memory location.<sup><a href=\"https://c9x.me/x86/html/file_module_x86_id_26.html\" rel=\"noreferrer\">2</a></sup></p>\n</blockquote>\n<p>Here is some simple example code:</p>\n<pre><code>0804841d &lt;main&gt;:\n 804841d:       55                      push   %ebp\n 804841e:       89 e5                   mov    %esp,%ebp\n 8048420:       83 e4 f0                and    $0xfffffff0,%esp\n 8048423:       83 ec 20                sub    $0x20,%esp\n 8048426:       c7 44 24 18 f0 84 04    movl   $0x80484f0,0x18(%esp)\n 804842d:       08 \n 804842e:       c7 44 24 1c 04 00 00    movl   $0x4,0x1c(%esp)\n 8048435:       00 \n 8048436:       8b 44 24 18             mov    0x18(%esp),%eax\n 804843a:       89 44 24 08             mov    %eax,0x8(%esp)         &lt;--- argument 3\n 804843e:       8b 44 24 1c             mov    0x1c(%esp),%eax\n 8048442:       89 44 24 04             mov    %eax,0x4(%esp)         &lt;--- argument 2\n 8048446:       c7 04 24 0a 85 04 08    movl   $0x804850a,(%esp)      &lt;--- argument 1\n 804844d:       e8 9e fe ff ff          call   80482f0 &lt;printf@plt&gt;   &lt;--- function call\n 8048452:       b8 00 00 00 00          mov    $0x0,%eax\n 8048457:       c9                      leave  \n 8048458:       c3                      ret\n</code></pre>\n<p>Here, the memory address that execution branches to when <code>printf</code> is called via <code>call</code> is <code>0x80482f0</code>.</p>\n<blockquote>\n<p>But my question is where do they get the parameters from?</p>\n</blockquote>\n<p>Arguments are pushed onto the stack in reverse order of their corresponding parameters in the function definition prior to the function call. The return value is saved in <code>%eax</code>. This is in accordance with x86 calling convention, referred to as <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl\" rel=\"noreferrer\">cdecl</a>:</p>\n<blockquote>\n<p><strong>Caller Rules</strong></p>\n<p>To make a subrouting call, the caller should:</p>\n<ol>\n<li><p>Before calling a subroutine, the caller should save the contents of certain registers that are designated caller-saved. The caller-saved registers are EAX, ECX, EDX. Since the called subroutine is allowed to modify these registers, if the caller relies on their values after the subroutine returns, the caller must push the values in these registers onto the stack (so they can be restore after the subroutine returns.</p>\n</li>\n<li><p><strong>To pass arguments to the subroutine, push them onto the stack before the call. The arguments should be pushed in inverted order (i.e. last argument first).</strong> Since the stack grows down, the first arguments will be stored at the lowest address (this inversion of arguments was historically used to allow functions to be passed a variable number of parameters).</p>\n</li>\n<li><p>To call the subroutine, use the call instruction. This instruction places the return address on top of the arguments on the stack, and branches to the subroutine code. This invokes the subroutine, which should follow the callee rules below.</p>\n</li>\n</ol>\n<p><strong>After the subroutine returns (immediately following the call instruction), the caller can expect to find the return value of the subroutine in the register EAX</strong>. To restore the machine state, the caller should:</p>\n<ol>\n<li>Remove the arguments from stack. This restores the stack to its state before the call was performed.</li>\n<li>Restore the contents of caller-saved registers (EAX, ECX, EDX) by popping them off of the stack. The caller can assume that no other registers were modified by the subroutine. <sup><a href=\"http://www.cs.virginia.edu/~evans/cs216/guides/x86.html#calling\" rel=\"noreferrer\">3</a></sup></li>\n</ol>\n</blockquote>\n<p>For a more in-depth discussion of x86 calling conventions, refer to the x86 ABI documentation found in the <a href=\"http://refspecs.linuxbase.org/elf/abi386-4.pdf\" rel=\"noreferrer\">System V Application Binary Interface Intel386 Architecture Processor Supplment, Fourth Edition</a>.</p>\n<p><strong><code>__stack_chk_fail</code> and stack guards</strong></p>\n<blockquote>\n<p>And also, what does the call sym.imp.__stack_chk_fail does?</p>\n</blockquote>\n<p><code>__stack_chk_fail</code> is called when the <a href=\"https://en.wikipedia.org/wiki/Stack_buffer_overflow#Stack_canaries\" rel=\"noreferrer\">stack canary</a> has been overwritten due to a buffer overflow:</p>\n<blockquote>\n<p>The basic idea behind stack protection is to push a \"canary\" (a randomly chosen integer) on the stack just after the function return pointer has been pushed. The canary value is then checked before the function returns; if it has changed, the program will abort. Generally, stack buffer overflow (aka \"stack smashing\") attacks will have to change the value of the canary as they write beyond the end of the buffer before they can get to the return pointer. Since the value of the canary is unknown to the attacker, it cannot be replaced by the attack. Thus, the stack protection allows the program to abort when that happens rather than return to wherever the attacker wanted it to go.<sup><a href=\"https://lwn.net/Articles/584225/\" rel=\"noreferrer\">4</a></sup></p>\n</blockquote>\n<p>Here is some example annotated code:</p>\n<pre><code>000000000040055d &lt;test&gt;:\n  40055d:   55                      push   %rbp\n  40055e:   48 89 e5                mov    %rsp,%rbp\n  400561:   48 83 ec 20             sub    $0x20,%rsp\n  400565:   89 7d ec                mov    %edi,-0x14(%rbp)\n  400568:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax     &lt;- get guard variable value\n  40056f:   00 00 \n  400571:   48 89 45 f8             mov    %rax,-0x8(%rbp)   &lt;- save guard variable on stack\n  400575:   31 c0                   xor    %eax,%eax\n  400577:   8b 45 ec                mov    -0x14(%rbp),%eax\n  40057a:   48 8b 55 f8             mov    -0x8(%rbp),%rdx   &lt;- move it to register\n  40057e:   64 48 33 14 25 28 00    xor    %fs:0x28,%rdx     &lt;- check it against original\n  400585:   00 00 \n  400587:   74 05                   je     40058e &lt;test+0x31&gt;\n  400589:   e8 b2 fe ff ff          callq  400440 &lt;__stack_chk_fail@plt&gt; \n  40058e:   c9                      leaveq \n  40058f:   c3                      retq   \n</code></pre>\n<hr/>\n<p><sub>1. The Linux Programming Interface, Chapter 3 \"System Programming Concepts\"</sub></p>\n<p><sub>2. <a href=\"https://c9x.me/x86/html/file_module_x86_id_26.html\" rel=\"noreferrer\">x86 Instruction Set Reference - CALL</a> - c9x.me</sub></p>\n<p><sub>3. <a href=\"http://www.cs.virginia.edu/~evans/cs216/guides/x86.html#calling\" rel=\"noreferrer\">x86 Assembly Guide</a> - University of Virginia Computer Science</sub></p>\n<p><sub>4. <a href=\"https://lwn.net/Articles/584225/\" rel=\"noreferrer\">\"Strong\" stack protection for GCC</a> - LWN.net</sub></p>\n</div>",
            "votes": "7",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Florin",
                    "text": "<span class=\"comment-copy\">Thank you for the answer! Now I understand how things works.  Is there any way to get in touch with you for more informations?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@FineasSilaghi I'm on twitter so you can message me there if you like. What kind of additional information are you interested in?</span>",
                    "time": null
                },
                {
                    "user": "Florin",
                    "text": "<span class=\"comment-copy\">I can't find SYS_V via Twitter</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@FineasSilaghi <a href=\"https://twitter.com/_SYS_V\" rel=\"nofollow noreferrer\">twitter.com/_SYS_V</a></span>",
                    "time": null
                }
            ]
        }
    ]
}