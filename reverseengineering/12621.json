{
    "title": "Issue decompiling c# method",
    "link": "https://reverseengineering.stackexchange.com/questions/12621/issue-decompiling-c-method",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to decompile a c# dll and on a particular method I'm getting this result</p>\n<pre><code>public IEnumerable&lt;Guid&gt; GetDbIdentifiers(int classId)\n{\n    switch ((794999935 == 794999935) ? 1 : 0)\n    {\n    case 0:\n    case 2:\n        IL_1E:\n        break;\n    case 1:\n        goto IL_1F;\n    }\n    goto IL_1E;\n    IL_1F:\n    if (0 == 0)\n    {\n    }\n    if (1 == 0)\n    {\n    }\n    int arg_2E_0 = 0;\n    DatabaseHandler.Class106 @class = new DatabaseHandler.Class106(-2);\n    @class.databaseHandler_0 = this;\n    @class.int_3 = classId;\n    return @class;\n}\n</code></pre>\n<p>It's calling a inner class Class106 inside DatabaseHandler, but it seems it cannot decompile this inner class.</p>\n<p>I tried dotPeek, ILSpy, JustDecompile and Reflector.</p>\n<p>The best result I got was with Reflector, it decompiled the class partially. The definition is this:</p>\n<pre><code>[CompilerGenerated]\nprivate sealed class Class106 : IDisposable, IEnumerable&lt;Guid&gt;, IEnumerator&lt;Guid&gt;, IEnumerable, IEnumerator\n</code></pre>\n<p>I read in many forums that Enumerators are decompiled as inner classes and no decompiler can produce usable code. It seems the case, since the Class106 implements IEnumerable and IEnumerator interfaces.</p>\n<p>Does anyone have any clue on how I could patch this manually?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "5k",
    "tags": [
        "decompilation",
        "dll",
        "c#"
    ],
    "user": "rbasniak",
    "time": "May 14, 2016 at 21:19",
    "comments": [
        {
            "user": "svick",
            "text": "<span class=\"comment-copy\">Is this an obfuscated assembly? If not, the common decompilers should have no problem with that. And I don't understand what are you actually asking: what kind of patch are you talking about? Also, including the \"partially decompiled\" code might be useful.</span>",
            "time": null
        },
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">ILSpy is not able to decompile inner classes. You might switch to IL view to see them. Perhaps the following stov posting could help you:<a href=\"http://reverseengineering.stackexchange.com/questions/9178/modify-code-with-ilspy/9236#9236\" title=\"modify code with ilspy\">reverseengineering.stackexchange.com/questions/9178/â€¦</a>. In case you wish to modify, Reflexil is very worth to look at.</span>",
            "time": null
        },
        {
            "user": "kostas1337",
            "text": "<span class=\"comment-copy\"><a href=\"https://i.sstatic.net/Uq32Z.png\" rel=\"nofollow noreferrer\">![enter image description here</a>](<a href=\"https://i.sstatic.net/Uq32Z.png\" rel=\"nofollow noreferrer\">i.sstatic.net/Uq32Z.png</a>) how can i know the Obfuscator for exe?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You file is obfuscated with <a href=\"https://github.com/yck1509/ConfuserEx\" rel=\"nofollow\">ConfuserEX</a> and I know it because of the way the <strong>ControlFlow</strong> looks. ControlFlow is simply the fact that the method body seems to be confusing / puzzling, with <em>Switch Cases</em> and <em>Gotos</em>.\nIf you dig into Google, and look for \"<strong>ConfuserEX Deobfuscator</strong>\" you will be able to download a few tools to clean your protected assembly (mainly on tuts4you's forum).</p>\n<p>Cheers.</p>\n</div>",
            "votes": "2",
            "user": "XenocodeRCE",
            "time": "May 12, 2016 at 10:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}