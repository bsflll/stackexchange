{
    "title": "IDA Pro not undefining assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/20782/ida-pro-not-undefining-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am not sure if IDA is working correctly or not.</p>\n<p>I have the instructions </p>\n<pre><code>call $+5\npop edi\n</code></pre>\n<p>If I understand this correctly, the program will jump forward, skipping some junk interpreted as instructions by IDA. To calculate where the execution continues, I have to get the location of <code>pop edi</code> (00002504), undefine everything after <code>pop edi</code>, and redefine as code at the location of <code>pop edi</code> + 5 (00002509) , or at least that's what I understood from searching here.</p>\n<p>Now, the problem is that when I undefine everything after <code>pop edi</code>, IDA freaks out and does not undefine anything.</p>\n<p>With the experience I have, when doing this I noticed that all the instructions after the undefine are well, undefined.</p>\n<p>This does not happen. Here are some pictures to show this:\n<a href=\"https://i.sstatic.net/LwlHi.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/LwlHi.png\"/></a></p>\n<p>After undefining:\n<a href=\"https://i.sstatic.net/Jfi1d.png\" rel=\"nofollow noreferrer\"><img alt=\"After undefine\" src=\"https://i.sstatic.net/Jfi1d.png\"/></a></p>\n<p>What is happening here?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "425",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "G. Ramistella",
    "time": "Mar 5, 2019 at 13:12",
    "comments": [
        {
            "user": "wisk",
            "text": "<span class=\"comment-copy\">I think the IDA is right here. <code>$</code> is actually the beginning of the instruction, <code>$+5</code> means the end of the instruction (it's five bytes long). Check the NASM documentation *NASM supports two special tokens in expressions, allowing calculations to involve the current assembly position: the $ and $$ tokens. $ evaluates to the assembly position at the beginning of the line containing the expression; so you can code an infinite loop using JMP $. * This trick is used to get the current address of the code, e.g.: relocatable code.</span>",
            "time": null
        },
        {
            "user": "G. Ramistella",
            "text": "<span class=\"comment-copy\">Could you be clearer? Is the code disassembled correct? Do I need to do anything else?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>call $+5\npop edi\n</code></pre>\n<p>This code basically retrieves the address of the <code>pop edi</code> instruction into edi. The reason why this works is simple. <code>call</code> does two things:</p>\n<ul>\n<li>push the <em>next instruction's</em> address onto the stack</li>\n<li>jump to the address given in its operand</li>\n</ul>\n<p>But <code>$+5</code> just means \"current position + 5\" and the length of this call instruction is 5 bytes, so it jumps to <code>pop edi</code> after pushing the <em>address</em> of <code>pop edi</code> on the stack. And then <code>pop edi</code> fetches that address from the stack into edi.</p>\n<p>And why would you do that? Because sometimes you don't know where your code is located but need to supply an absolute address to someone. If you write code you can easily tell relative offsets, say that a string is 500 byte from the start of your code block. To get an absolute address you then use the <code>call pop</code> trick to get some anchor point and then can add whatever offset to it to turn it into an absolute address without having to know the code's location at runtime.</p>\n</div>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Mar 5, 2019 at 15:50",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code <strong>is</strong> being undefined but it’s immediately converted back to instructions because of autoanalysis. It just happens very quickly so that you may not notice it. </p>\n<p>However, your initial premise is incorrect. <code>$</code> refers to the address of the current instruction so <code>call $+5</code> jumps to the <code>pop edi</code> instruction itself and not somewhere after it. So there is no need to “fix” anything</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Mar 5, 2019 at 15:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "G. Ramistella",
                    "text": "<span class=\"comment-copy\">So what is the point of <code>$+5</code> if it jumps to the next instruction?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@Dandelion the size of instruction is five bytes so jumping 5 bytes jumps to next instruction  E8 00 00 00 00  jmp $5  your functions uses a string that is located at  edi+3dxx    ie 2504 + 3d899  == 4188</span>",
                    "time": null
                }
            ]
        }
    ]
}