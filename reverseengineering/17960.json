{
    "title": "gdb not opening exe file",
    "link": "https://reverseengineering.stackexchange.com/questions/17960/gdb-not-opening-exe-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to open an exe with gdb but although it seems to run I'm unable to list or disas anything. The file is obfuscated, and I may be answering my own question here, with nine rays .net obfuscator. </p>\n<p>Does this mean I'm unable to use a debugger or should I be able to open with a debugger such as idapro or gdb but have stuff missing?</p>\n<p>When in gdb I run (gdb)file name.exe I get the message 'Reading symbols from name.exe...(no debugging symbols found)...done.'</p>\n<p>The output from linux files command is 'PE32 excutable (console Intel 80386 Mono/.Net Assembly, for MS Windows'</p>\n<p>Thanks</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly"
    ],
    "user": "Jay",
    "time": "Apr 10, 2018 at 23:34",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">No binary format handler is defined in the Linux kernel for PE binary files. As a result the kernel will not compose a process image in virtual memory from a PE binary. No process image means no debugging since there is nothing for ptrace to attach to. <a href=\"https://lwn.net/Articles/630727/\" rel=\"nofollow noreferrer\">lwn.net/Articles/630727</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you just want a quick and dirty raw disassembly of a short snippet, you can load the relevant part of the exe using gdb's <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Dump_002fRestore-Files.html#Dump_002fRestore-Files\" rel=\"nofollow noreferrer\">restore</a> command.  It is easier to first, extract the snippet, for example:</p>\n<pre><code>tail -c +4096 the-program-with-the-snippet.exe | head -c 1024 &gt; snippet\n</code></pre>\n<p>Then, you need to start debugging a dummy program and replace its main function with the snippet you want to disassemble.  For example::</p>\n<pre><code>~/tmp$ gdb -q dummy\nReading symbols from dummy...done.\n(gdb) break main\nBreakpoint 1 at 0x79f: file dummy.c, line 9.\n(gdb) run\nStarting program: /home/ale/tmp/dummy \n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe2b8) at dummy.c:9\n9       for (int i = 1; i &lt; argc; ++i)\n(gdb) restore snippet binary main\nRestoring binary file snippet into memory (0x555555554790 to 0x555555554b90)\n(gdb) disass\nDump of assembler code for function main:\n   0x0000555555554790 &lt;+0&gt;:     add    %bh,-0x35(%rdi)\n   0x0000555555554793 &lt;+3&gt;:     movabs 0xa1cba872a376f272,%eax\n   0x000055555555479c &lt;+12&gt;:    jb     0x555555554806 &lt;main+118&gt;\n   0x000055555555479e &lt;+14&gt;:    cmp    0x72a270b7(%rdx,%rsi,2),%esp\n   0x00005555555547a5 &lt;+21&gt;:    loopne 0x5555555547c2 &lt;main+50&gt;\n   0x00005555555547a7 &lt;+23&gt;:    movabs 0xa1cd0572a12b0f72,%eax\n   0x00005555555547b0 &lt;+32&gt;:    jb     0x5555555547c2 &lt;main+50&gt;\n   0x00005555555547b2 &lt;+34&gt;:    pop    %rsi\n   0x00005555555547b3 &lt;+35&gt;:    movabs %eax,0xa1d13272a1cd3a72\n   0x00005555555547bc &lt;+44&gt;:    jb     0x5555555547b5 &lt;main+37&gt;\n   0x00005555555547be &lt;+46&gt;:    loopne 0x555555554760 &lt;frame_dummy&gt;\n   0x00005555555547c0 &lt;+48&gt;:    jb     0x5555555547a6 &lt;main+22&gt;\n   0x00005555555547c2 &lt;+50&gt;:    iret   \n...\n---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---\n</code></pre>\n<p>Of course, any format information (symbols and the like) is lost.</p>\n</div>",
            "votes": "2",
            "user": "Ale",
            "time": "Aug 13, 2018 at 12:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You wouldn't be able to debug a Windows executable on a Linux machine with <code>gdb</code> without installing and configuring components that are required. @SYS_V explained it very well in his comment.</p>\n<p>If you want to debug a Windows executable on Linux you have several ways to do so. I recommend you to check out a specific one - <a href=\"https://wiki.winehq.org/Winedbg\" rel=\"nofollow noreferrer\">Winedbg</a>.</p>\n<hr/>\n<p>In addition, since you mentioned that you want to debug a <code>.net</code> application I'd suggest you check out <a href=\"https://github.com/0xd4d/de4dot\" rel=\"nofollow noreferrer\">de4dot</a> and <a href=\"https://github.com/0xd4d/dnSpy\" rel=\"nofollow noreferrer\">dnSpy</a>, both are for Windows systems. de4dot can be used to deobfuscate <code>.net</code> obfuscated applications where dnSpy will allow you to decompile and debug <code>.net</code> applications.</p>\n<p>Disassembling a <code>.net</code> applications is not a best practice since usually you'll only see the Intermediate Language (<a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">CIL/MSIL</a>). <code>.net</code> decompilers are able to show you the original source code of the application.</p>\n<p>If you want to decompile <code>.net</code> applications on Linux you can try with <a href=\"https://github.com/icsharpcode/ILSpy\" rel=\"nofollow noreferrer\">ILSpy</a> or <a href=\"http://tirania.org/blog/archive/2011/Feb-04.html\" rel=\"nofollow noreferrer\">Mono decompiler</a>.</p>\n</div>",
            "votes": "1",
            "user": "Megabeets",
            "time": "Apr 11, 2018 at 6:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}