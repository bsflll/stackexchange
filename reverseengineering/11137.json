{
    "title": "How does a C++ constructor look like on binary level?",
    "link": "https://reverseengineering.stackexchange.com/questions/11137/how-does-a-c-constructor-look-like-on-binary-level",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, I've been playing around with something again, and I encountered an issue I consider to be strange.</p>\n<p>IDA (around other less powerful debuggers/disassmeblers) offers a list of functions (with their names, if the PDBs are given) that exist in the module.</p>\n<p>However, constructors/static class methods to not seem to be part of that list. Is this a limitation of the debugger, the PDBs or something C++ compiler specific?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "775",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "hidden_c0de",
    "time": "Oct 19, 2015 at 13:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I had a close glance at the source code and figgured out that the constructors as well as some specific static methods I've been looking for, have been inlined.</p>\n<p>More precise, the <em>__forceinline</em> specified offered by the Visual Studio Compiler is used to actually disable compiler checks on whether inlining is appropriate or not.</p>\n<h2><strong><em>inline - whats that?</em></strong></h2>\n<p>Normal functions are copied into the binary exactly once (well, once for every different version of the function when it comes to function overloading). Everywhere where the function should be called, a <em>call</em> instruction jumping to the address of the function is placed in the code.</p>\n<p><em>inline</em> functions are handled differently. Everywhere an <em>inline</em> function is called, the compiler just copies it's complete body to the location where it would just place a <em>call</em> instruction for a normal function.</p>\n<p>This way, you get rid of a runtime jump at the cost of a bigger binary.</p>\n<p>Comes in handy to optimize VERY code thats very crucial in terms of performance. And, of course, also comes in handy when trying to obfuscate stuff as nobody and nothing (including debuggers, even HexRay's IDA) can tell anymore that this function is a function. And you can't detour/hook it.</p>\n</div>",
            "votes": "1",
            "user": "hidden_c0de",
            "time": "Oct 20, 2015 at 10:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "LUser",
                    "text": "<span class=\"comment-copy\">I still think it would be worth making an actual answer and showing this. I myself, am curious. Post a half-way decent answer please.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">In that regard constructors are similar to \"regular\" functions. They undergo the same optimisation as any other function and may (and may not) be inlined as part of optimisation.</span>",
                    "time": null
                }
            ]
        }
    ]
}