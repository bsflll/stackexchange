{
    "title": "What does byte_407030[ecx] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/13729/what-does-byte-407030ecx-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I came across the following instruction in IDA:</p>\n<pre><code>movsx edx, byte_407030[ecx]\n</code></pre>\n<p><code>byte_407030</code> is <code>25h</code>. Is it trying to access some memory location? I know that <code>ecx</code> is storing a counter in a for loop.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "282",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "mrQWERTY",
    "time": "Oct 16, 2016 at 4:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lets go step by step:</p>\n<pre><code>movsx\n</code></pre>\n<p>This is a specialized move instruction it moves a value from source of a smaller size (in your case, a byte) to a destination of a potentially larger size (in your case, a double word), preserving the sign bit by an operation called <a href=\"https://en.wikipedia.org/wiki/Sign_extension\" rel=\"nofollow\">sign-extending</a>.</p>\n<p>This means that if the byte was a negative integer then the destination will also be a negative integer. This is a bit more complex then simply copying the last bit because of the way negative integers are encoded (which is called <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" rel=\"nofollow\">two's complement</a>). </p>\n<pre><code>edx \n</code></pre>\n<p>The first operand of a <code>mov</code> instruction is the destination target. In this case it's the double-word register <code>edx</code>. This is were the data is moved to.</p>\n<pre><code>byte_407030[ecx]\n</code></pre>\n<p>The second operand is the source operand. This is where the data is moved from. Please note that although the instruction is <code>mov</code>, the value also remains in the source location. Calling it \"copy\" might have been a better idea ;).</p>\n<p>IDA's syntax here is similar to C's syntax. This will dereference the memory region at address <code>0x407030</code> plus the value of <code>ecx</code> and fetch a byte from there. In case <code>ecx</code> is <code>11h</code>, the final address would be <code>0x407041</code>.</p>\n<p><strong>summary</strong>\n<br/>This instruction will take the byte value at memory address of <code>0x407030+ecx</code>, sign extend it to dword (4 bytes in most architectures) and assign that final value into register <code>edx</code></p>\n</div>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Oct 16, 2016 at 4:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}