{
    "title": "Lifting x86 machine code to LLVM IR",
    "link": "https://reverseengineering.stackexchange.com/questions/30475/lifting-x86-machine-code-to-llvm-ir",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to translate a simple x86_64 machine code into LLVM IR, which can be later analyzed. For my particular use case, I need to be able to work with just instructions and opcodes directly, and I don't have access to the binary itself.</p>\n<p>To my current understanding, I should be able to convert x86 instructions using tools such as <code>rellume</code> and <code>remill</code>. With their help, I am able to create LLVM IR code, however, I am not entirely sure whether the results I am getting are correct.</p>\n<p>First I need to create machine code for a very simple application (this is just for testing purposes):</p>\n<ul>\n<li><p>Compile the source code [1]</p>\n<ul>\n<li><code>gcc simple.c -o simple.o</code></li>\n</ul>\n</li>\n<li><p>Dissemble using <code>objdump</code> [2]</p>\n<ul>\n<li><code>objdump -d simple.o</code></li>\n<li>At this point, I get separate functions <code>add</code> and <code>main</code></li>\n</ul>\n</li>\n</ul>\n<p>Then, I provide a function that I want to translate into LLVM IR to <code>remill</code> as bytes:</p>\n<ul>\n<li>Translate <code>add</code> function into LLVM using <code>remill</code>\n<ul>\n<li><code>bytes</code> = <code>add</code> function as bytes</li>\n<li>the result should be a LLVM IR of the <code>add</code> function</li>\n</ul>\n</li>\n</ul>\n<pre><code>docker run --rm \\\n -it remill \\\n --arch amd64 \\\n --ir_out /dev/stdout \\\n --bytes f30f1efa554889e54883ec10be03000000bf01000000e8cdffffff8945fc8b45fcc9c3\n</code></pre>\n<p>My questions:</p>\n<ul>\n<li>Is my current workflow to translate x86 instructions into LLVM IR correct? Am I missing something? (I am aware of tools such as <code>McSema</code>, however, for my use case I need to be able to transform opcodes).</li>\n<li>How can I verify the produced LLVM IR?\n<ul>\n<li>After producing LLVM IR of an even simpler example [3], I tried to run it with <code>lli</code> unsuccessfully.</li>\n</ul>\n</li>\n</ul>\n<hr/>\n<ol>\n<li>Source code</li>\n</ol>\n<pre><code>\nint add(int a, int b){\n    return a + b;\n}\n\nint main()\n{\n    int c = add(1, 3);\n    return c;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Dump of <code>objdump</code></li>\n</ol>\n<pre><code>...\n\n0000000000001129 &lt;add&gt;:\n    1129:   f3 0f 1e fa             endbr64 \n    112d:   55                      push   %rbp\n    112e:   48 89 e5                mov    %rsp,%rbp\n    1131:   89 7d fc                mov    %edi,-0x4(%rbp)\n    1134:   89 75 f8                mov    %esi,-0x8(%rbp)\n    1137:   8b 55 fc                mov    -0x4(%rbp),%edx\n    113a:   8b 45 f8                mov    -0x8(%rbp),%eax\n    113d:   01 d0                   add    %edx,%eax\n    113f:   5d                      pop    %rbp\n    1140:   c3                      ret    \n\n0000000000001141 &lt;main&gt;:\n    1141:   f3 0f 1e fa             endbr64 \n    1145:   55                      push   %rbp\n    1146:   48 89 e5                mov    %rsp,%rbp\n    1149:   48 83 ec 10             sub    $0x10,%rsp\n    114d:   be 03 00 00 00          mov    $0x3,%esi\n    1152:   bf 01 00 00 00          mov    $0x1,%edi\n    1157:   e8 cd ff ff ff          call   1129 &lt;add&gt;\n    115c:   89 45 fc                mov    %eax,-0x4(%rbp)\n    115f:   8b 45 fc                mov    -0x4(%rbp),%eax\n    1162:   c9                      leave  \n    1163:   c3                      ret    \n\n...\n\n</code></pre>\n<ol start=\"3\">\n<li></li>\n</ol>\n<pre><code>int main\n{\n  int val = 2\n  return val;\n}\n</code></pre>\n</div>",
    "votes": "5",
    "answers": 0,
    "views": "1k",
    "tags": [
        "assembly",
        "llvm"
    ],
    "user": "jgawr",
    "time": "Jun 5, 2022 at 17:15",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<span class=\"comment-copy\">Have you tried <a href=\"https://github.com/avast/retdec\" rel=\"nofollow noreferrer\">RetDec</a>?</span>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<span class=\"comment-copy\">Related: <a href=\"https://stackoverflow.com/questions/75190471/how-can-i-lifting-x86-64-assembly-code-to-llvm-ir\" title=\"how can i lifting x86 64 assembly code to llvm ir\">stackoverflow.com/questions/75190471/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}