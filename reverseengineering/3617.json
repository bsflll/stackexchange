{
    "title": "Replacing common x86 instructions with less known ones",
    "link": "https://reverseengineering.stackexchange.com/questions/3617/replacing-common-x86-instructions-with-less-known-ones",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there any kind of software or research or paper which discusses replacement of frequent x86 instructions with ones which are less common and thus less understandable to the attacker (floating point/SSE/Virtualization/undocumented) while still maintaining the functionality?</p>\n<p>For example, I wan to replace this</p>\n<pre><code>    PUSH EBP\n    MOV EBP,ESP\n    ...\n    PUSH DWORD [0x0BEE]\n    PUSH 3\n    CALL &lt;check&gt;\n    TEST EAX,EAX\n    JE &lt;0xabcd&gt;\n    PUSH &lt;text1&gt;\n    PUSH [EBP+5]\n    CALL &lt;MessageBox&gt;\n0xabcd:\n    PUSH &lt;text2&gt;\n    PUSH [EBP+5]\n    CALL &lt;MessageBox&gt;\n</code></pre>\n<p>with this</p>\n<pre><code>    AESKEYGENASSIST\n    VFMSUBADDPD\n    MOVLPS\n    PMADDUBSW\n    RET\n    FLDL2T\n    CMPXCHG8B\n    AESKEYGENASSIST\n    VFMSUBADDPD\n    MOVLPS\n    CMPXCHG8B\n    STOSW\n    VMLAUNCH\n    etc etc\n</code></pre>\n<p>while still performing the same operation.</p>\n</div>",
    "votes": "12",
    "answers": 2,
    "views": "3k",
    "tags": [
        "obfuscation",
        "x86"
    ],
    "user": "Babken Vardanyan",
    "time": "Feb 4, 2014 at 10:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I do not think code morphism is <em>the</em> or <em>an</em> answer to this question. </p>\n<p>What the question was about is obfuscating the algorithm implementation by using less common or undocumented assembly instructions. This can actually be done by some compilers when extensive optimizations are turned on. For example compilers like the <strong>Intel C Compiler</strong>, <strong>GCC</strong>, or <strong>PGI</strong> can autovectorize loops when matched to some internal patterns (<em>reductions</em>, <em>matrix multiplications</em>, ...) and when the target architecture supports vectorization. Other optimizations can lead to extremely tricky assembly code but still, it can always be reversed since the compiler performs no <strong>explicit</strong> obfuscation and because most of what the compiler does is pattern matching. Of course if you associate a high level pattern to a low level one, well, you lose the obfuscation and your code can easily be reversed. Thus techniques as the one you're looking for can only be performed by hand either by writing high level code using compiler intrinsics and alternative constructs or at the assembly level.   </p>\n<p>If you are really interested in obfuscation techniques I recommend you going over Jan CAPPAERT's PhD thesis : <a href=\"https://www.cosic.esat.kuleuven.be/publications/thesis-199.pdf\">https://www.cosic.esat.kuleuven.be/publications/thesis-199.pdf</a>, it covers some nice techniques used not only on malware but on industrial software too. The bibliography is quite rich.\nYou can also check this talk given by Sean Taylor at Defcon on how to make the compiler do the obfuscation : <a href=\"https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-sean_taylor-binary_obfuscation.pdf\">https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-sean_taylor-binary_obfuscation.pdf</a>.</p>\n<p>About polymorphism, it is a nice obfuscation technique though it is rarely used in malware nowadays, and for many reasons. One of them is that few, if none, malware authors write code in assembly anymore, and most use frameworks and engines. You have to keep in mind that writing obfuscated assembly code is an art ... and that now it is used to harden the reverse engineering process for profit not for the challenge.</p>\n<p>I've been working on a <strong>GCC</strong> plugin that adds an optimization pass which performs code obfuscation on the IR - internal representation (GIMPLE) - of a code before applying another obfuscation pass at the assembly level. The interesting thing about this approach is that you have the CFG (Control Flow Graph) of the program at compile time, and you can apply many obfuscation algorithms and techniques in order to break it into other equivalent CFGs and then assess which suites best and use it throughout the remaining compilation phases.</p>\n<p>Hope my post helps.</p>\n</div>",
            "votes": "7",
            "user": "yaspr",
            "time": "Apr 24, 2014 at 11:25",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These techniques of mutating code (and still keeping it semantically equivalent) are known as <a href=\"http://en.wikipedia.org/wiki/Polymorphic_code\">polymorphic code</a>.</p>\n<p>The software that can achieve a mutations of the code is usually called a <a href=\"http://en.wikipedia.org/wiki/Polymorphic_engine\">polymorphic engine</a>. It is a quite widely used technique in Malware design to evade pattern-matching detection of the anti-virus software.</p>\n<p>With these key words in hand (and thanks to Google), you will be able to find tons of literature about the topic. But, here are a few pointers:</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Dark_Avenger\">Dark Avenger</a> (Known as the first virus to use polymorphic encoding).</li>\n<li><a href=\"http://download.adamas.ai/dlbase/Stuff/VX%20Heavens%20Library/static/vdat/tupoleng.htm\">An idiot guide to writing polymorphic engines</a> by Trigger [SLAM] '97.</li>\n<li><a href=\"http://vxheavens.com/lib/vmd03.html\">Advanced polymorphic engine construction</a> by The Mental Driller.</li>\n<li><a href=\"http://vxheavens.com/lib/ayt01.html\">Polymorphic Viruses - Implementation, Detection, and Protection</a>.</li>\n<li><a href=\"http://vxheavens.com/lib/vrw02.html\">Guide to improving Polymorphic Engines</a></li>\n<li><a href=\"http://www.phrack.org/issues.html?issue=61&amp;id=9\">Polymorphic Shellcode Engine Using Spectrum Analysis</a>.</li>\n<li>...</li>\n</ul>\n<p>You also may find polymorphic engines ready to start. Just look for it.</p>\n</div>",
            "votes": "16",
            "user": "perror",
            "time": "Feb 4, 2014 at 13:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">FYI, polymorphism is extremely uncommon in malware these days. While many viruses back in the '90s had polymorphic engines, and several malware families in the aughts used server-side polymorphism, it is exceedingly rare to see polymorphic engines used by malware nowadays.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I have to admit that my experience with malware is from the 90's... :o) So, I trust your words about it.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">I notice more awesome tricks like metamorphing and time puzzles.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">@Jason, I think that it would be more correct to say that it is rare for malware to carry the engine these days.  Polymorphism itself is still very much in use, particularly in the script space.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@peterferrie Are you grouping general obfuscation with polymorphism?</span>",
                    "time": null
                }
            ]
        }
    ]
}