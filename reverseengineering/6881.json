{
    "title": "What are indicators for hitting the OEP?",
    "link": "https://reverseengineering.stackexchange.com/questions/6881/what-are-indicators-for-hitting-the-oep",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>for me, it is sometimes difficult to decide if I have hit the OEP when I try to manuelly unpack it. \nEspecially in cases, when it does not begin with the standard function prologue. </p>\n<p>For example: \nI have found a following sample which starts with a PUSHAD instruction. I step through the content of code until I reach POPAD. After few lines, I have seen a JMP intruction which leads to a CALL instruction and a function is called. After stepping over that function, in the next line, there is another JMP instruction which ends up here:</p>\n<pre><code>    PUSH 58\n    PUSH unbr002.014A22F8\n    CALL unbr002.013CBD40#\n    XOR ESI, ESI\n    MOV DWORD PTR SS:[EBP-4], ESI\n    LEA EAX, DWORD PTR SS:[EBP-68]\n    PUSH EAX\n    CALL DWORD PTR DS:[141409C]          kernel32.GetStartupInfoA\n    ....\n    ....\n    ....\n    ....\n    POP ECX\n    CALL DWORD PTR DS:[1414278]          kernel32.GetCommandLineA\n    ....\n</code></pre>\n<p>So, I have read somewhere that \"GetCommandLineA – indicating you’ve hit the entrypoint of a program compiled with visual studio 6\"</p>\n<p>and I asked myself if there is a list of indicators to know if one has hit the OEP.</p>\n<p>best regards, </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "unpacking",
        "oep"
    ],
    "user": "user3097712",
    "time": "Dec 23, 2014 at 22:24",
    "comments": [
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">What are the memory addresses? Does the last JMP go to the original memory page, the first mapped one, or the second (and usually final) one? If after 2 memory alloc, you find a JMP that goes into the last allocated page, it's usually that you're jumping on the OEP (and it's a good time to dump &amp; repair the unpacked version).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Magic constants can sometimes help even if the packer splits the startup code into tiny fragments with copious jumping around and 'returning' to pushed/swapped addresses and so on.</p>\n<p>One such example is __security_init_cookie for VC++ startup code, which is related to the constant 0BB40E64Fh in 32-bit code and 2B992DDFA232h for 64-bit. That function is normally the only code which writes to both __security_cookie and __security_cookie_complement:</p>\n<pre><code>.text:00401F06 020           mov     edi, 0BB40E64Eh\n; ... stuff involving GetCurrentThreadId(), GetCurrentProcessId() etc. pp. ...\n.text:00401F79 020           mov     ___security_cookie, ecx\n.text:00401F7F 020           not     ecx\n.text:00401F81 020           mov     ___security_cookie_complement, ecx\n...\n.data:00404000     ___security_cookie dd 0BB40E64Eh\n.data:00404004     ___security_cookie_complement dd 44BF19B1h\n</code></pre>\n<p>The location of ___security_cookie is also easy to identify because of its unique role, independent of magic constants. And it leads you straight to __security_init_cookie() which is often the first function called at OEP, even before __tmainCRTStartup(). By contrast, imported functions (CRT dll, Windows API) are occasionally scrambled and thus difficult to identify.</p>\n<p>There's some crapware out there that automatically obfuscates constant loads by splitting them like this:</p>\n<pre><code>1441285DB           mov     edx, 0E6FFA20Fh                           \n...\n1441285E3           lea     edx, [rdx+19005DF2h]                      \n</code></pre>\n<p>In this example the obfuscated constant is 1, of course. Other splits are possible, e.g. involving arithmetic or bit ops instead of LEA. The signature property is a constant modifying a constant residing in a register (inside a basic block, without the involvement of relocations), something which all self-respecting compilers would optimise away.</p>\n</div>",
            "votes": "4",
            "user": "DarthGizka",
            "time": "Dec 23, 2014 at 23:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}