{
    "title": "How should I approach a basic CTF exploitation challenge?",
    "link": "https://reverseengineering.stackexchange.com/questions/14414/how-should-i-approach-a-basic-ctf-exploitation-challenge",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>Complete newbie alert so apologies on what you're about to read.</em></p>\n<p>I've an executable I'm working with to achieve buffer overflow on. This is for an old CTF that has been and gone but I chose it to practice on. I've ran <code>objdump</code> on it and a snippet can be seen below:</p>\n<pre><code>...\n 8048821:   e8 ea fc ff ff          call   8048510 &lt;__isoc99_sscanf@plt&gt;  // Gets input???\n 8048826:   8b 44 24 78             mov    0x78(%esp),%eax // Moves ??? to %eax\n 804882a:   3b 84 24 88 00 00 00    cmp    0x88(%esp),%eax //  Does a comparison?\n 8048831:   75 14                   jne    8048847 &lt;close@plt+0x317&gt;  // Jump to 8048847 if it's not equal?\n 8048833:   e8 49 fe ff ff          call   8048681 &lt;close@plt+0x151&gt;\n 8048838:   a1 50 a0 04 08          mov    0x804a050,%eax\n 804883d:   89 04 24                mov    %eax,(%esp)\n 8048840:   e8 6b fc ff ff          call   80484b0 &lt;puts@plt&gt;\n 8048845:   eb 0d                   jmp    8048854 &lt;close@plt+0x324&gt;\n 8048847:   a1 54 a0 04 08          mov    0x804a054,%eax\n 804884c:   89 04 24                mov    %eax,(%esp)\n 804884f:   e8 5c fc ff ff          call   80484b0 &lt;puts@plt&gt;\n 8048854:   b8 00 00 00 00          mov    $0x0,%eax\n 8048859:   c9                      leave  \n 804885a:   c3                      ret    \n 804885b:   66 90                   xchg   %ax,%ax\n 804885d:   66 90                   xchg   %ax,%ax\n 804885f:   90                      nop\n 8048860:   55                      push   %ebp\n 8048861:   57                      push   %edi\n 8048862:   31 ff                   xor    %edi,%edi\n 8048864:   56                      push   %esi\n 8048865:   53                      push   %ebx\n 8048866:   e8 05 fd ff ff          call   8048570 &lt;close@plt+0x40&gt;\n 804886b:   81 c3 95 17 00 00       add    $0x1795,%ebx\n 8048871:   83 ec 1c                sub    $0x1c,%esp\n 8048874:   8b 6c 24 30             mov    0x30(%esp),%ebp\n 8048878:   8d b3 0c ff ff ff       lea    -0xf4(%ebx),%esi\n 804887e:   e8 b1 fb ff ff          call   8048434 &lt;read@plt-0x3c&gt;\n 8048883:   8d 83 08 ff ff ff       lea    -0xf8(%ebx),%eax\n 8048889:   29 c6                   sub    %eax,%esi\n 804888b:   c1 fe 02                sar    $0x2,%esi\n 804888e:   85 f6                   test   %esi,%esi\n 8048890:   74 27                   je     80488b9 &lt;close@plt+0x389&gt;\n 8048892:   8d b6 00 00 00 00       lea    0x0(%esi),%esi\n 8048898:   8b 44 24 38             mov    0x38(%esp),%eax\n 804889c:   89 2c 24                mov    %ebp,(%esp)\n 804889f:   89 44 24 08             mov    %eax,0x8(%esp)\n 80488a3:   8b 44 24 34             mov    0x34(%esp),%eax\n 80488a7:   89 44 24 04             mov    %eax,0x4(%esp)\n 80488ab:   ff 94 bb 08 ff ff ff    call   *-0xf8(%ebx,%edi,4)\n 80488b2:   83 c7 01                add    $0x1,%edi\n 80488b5:   39 f7                   cmp    %esi,%edi\n 80488b7:   75 df                   jne    8048898 &lt;close@plt+0x368&gt;\n 80488b9:   83 c4 1c                add    $0x1c,%esp\n 80488bc:   5b                      pop    %ebx\n 80488bd:   5e                      pop    %esi\n 80488be:   5f                      pop    %edi\n 80488bf:   5d                      pop    %ebp\n 80488c0:   c3                      ret    \n 80488c1:   eb 0d                   jmp    80488d0 &lt;close@plt+0x3a0&gt;\n 80488c3:   90                      nop\n 80488c4:   90                      nop\n 80488c5:   90                      nop\n 80488c6:   90                      nop\n 80488c7:   90                      nop\n 80488c8:   90                      nop\n 80488c9:   90                      nop\n 80488ca:   90                      nop\n 80488cb:   90                      nop\n 80488cc:   90                      nop\n 80488cd:   90                      nop\n 80488ce:   90                      nop\n 80488cf:   90                      nop\n 80488d0:   f3 c3                   repz ret \n</code></pre>\n<p>I don't need an answer (I do!) just some pointers (excuse pun) in the right direction of what's going on</p>\n<p>The executable is stripped. Should I read more on it all or is it worth my time diving in?</p>\n<p>HEX'd version of the executable I'm working with: <a href=\"http://pastebin.com/cmwgRMGP\" rel=\"nofollow noreferrer\">http://pastebin.com/cmwgRMGP</a>. I noticed the hex actually had 4 repeated sections, when split out, would run independently also!</p>\n<p>Thanks</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "855",
    "tags": [
        "x86",
        "exploit",
        "buffer-overflow",
        "objdump"
    ],
    "user": "pee2pee",
    "time": "Jan 15, 2017 at 20:22",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">What exactly are the difficulties you're facing here?</span>",
            "time": null
        },
        {
            "user": "pee2pee",
            "text": "<span class=\"comment-copy\">I'm not sure what's going and any hints to finding an exploit...</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">I tried focusing on what I think would be most helpful, instead of what will help you solve this particular unclear challenge.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>As OP's question is a bit vague and it seems he's more interested in general tips rather than an actual solution, I'm intentionally not focusing on answering the question at hand.</em></p>\n<p>If the vulnerable part is related to the call to <code>__isoc99_sscanf</code> (as suggested by the title), you should really focus on the code preceding the call and specifically, the arguments passed to that function and the function's documentation (it often highlights problematic use cases).</p>\n<p>If you're just starting with reverse engineering and vulnerability discovery, I'll list a few general tips and work-process suggestions:</p>\n<ol>\n<li>I suggest you try separating the reverse engineering and vulnerability discovery. You should first convert the relevant functions back to a higher level language (C in this case), and only after you get a decent C code (doesn't have to compile), you should move on to figuring out what is the vulnerable part of it. Yes, you <strong>really</strong> should write C pseudo-code if you're new to vulnerability discovery.</li>\n<li>You should use a tool more sophisticated than <code>objdump</code> when reverse engineering. <a href=\"https://www.hex-rays.com/products/ida/index.shtml\" rel=\"nofollow noreferrer\">IDA</a>, <a href=\"https://radare.org/r/\" rel=\"nofollow noreferrer\">radare2</a> are good examples.</li>\n<li>Focus on input paths and flows that can be manipulated by the user, make sure you're not reversing code that is not reachable/influenceable by the user.</li>\n<li>A good intro into these topics might be trying CTFs for a short while and moving on to reading a walkthrough/solution.</li>\n</ol>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jan 15, 2017 at 20:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}