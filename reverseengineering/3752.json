{
    "title": "How to compile c, cpp and python code as \"Released/Final\" version?",
    "link": "https://reverseengineering.stackexchange.com/questions/3752/how-to-compile-c-cpp-and-python-code-as-released-final-version",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to know if there are ways to compile C, C++ and Python code in order to not be able to reverse engineering it over Linux or not?</p>\n<p>I have heard there are some ways over Windows to do it, but I am working on Linux. </p>\n<p>I want to compile my code securely, as released or final version.</p>\n<p><strong>UPDATE</strong> </p>\n<p>At least I want to make it hard for usual users to disassemble, </p>\n<p>I am using GCC for C and C++, also I would be thankful if you introduce me best compiler for Python. </p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "736",
    "tags": [
        "python",
        "c",
        "c++",
        "compilers",
        "software-security"
    ],
    "user": "MLSC",
    "time": "Feb 24, 2014 at 10:18",
    "comments": [
        {
            "user": "Kevin",
            "text": "<span class=\"comment-copy\">Bruce Schneier's column today linked to an article about research in this field: <a href=\"http://eprint.iacr.org/2013/451.pdf\" rel=\"nofollow noreferrer\">eprint.iacr.org/2013/451.pdf</a> The paper will probably not tell you how to solve this, but it will give you a good idea of just how much research there is into your problem.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You cannot prevent reverse engineering. You can make it more or less harder but you cannot prevent it. No.</p>\n<p><strong>Update</strong></p>\n<p>Ok, as the author updated it with a more clearer question... this is what one can do:</p>\n<ol>\n<li>Strip symbols from the binaries. At the very least.</li>\n<li>Obfuscate the code. This may help: <a href=\"https://stackoverflow.com/questions/4111808/c-c-compiler-generating-obfuscated-code\">https://stackoverflow.com/questions/4111808/c-c-compiler-generating-obfuscated-code</a>. </li>\n<li>Pack or protect the binary. I know no good available protector for Linux, sorry.</li>\n</ol>\n<p>As for the Python code... If you're lucky enough, you can use <a href=\"https://code.google.com/p/shedskin/\" rel=\"nofollow noreferrer\">Shedskin</a> to compile to native code and then apply the same techniques discussed before. If not, you may give a try to Cython instead of Python. Also, there is a question <a href=\"https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs\">here</a> about obfuscating Python code.</p>\n<p>PS: Anyway, in my opinion, code protection is overrated. You cannot prevent a decided person or group from reverse engineering a piece of software and, sometimes, it's a lose of time and money.</p>\n</div>",
            "votes": "7",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MLSC",
                    "text": "<span class=\"comment-copy\">Ok ..that's exactly what I want..How is it possible with compiler? Thanks</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As for C compiler (gcc), first make sure you do not make a mistake of compiling it with <code>-g</code> option (adds symbols for debugging, basically whole source code).</p>\n<blockquote>\n<p>-g  Produce debugging information in the operating system's native format</p>\n</blockquote>\n<p>Secondly, try with <code>-s</code> option:</p>\n<blockquote>\n<p>-s  Remove all symbol table and relocation information from the executable.</p>\n</blockquote>\n<p>Without function names is would be harder to reverse engineer it. Take a look at <code>man strip</code>. I haven't tried it, but something like</p>\n<blockquote>\n<p>strip --strip-debug objfile</p>\n</blockquote>\n<p>or:</p>\n<blockquote>\n<p>strip --strip-unneeded objfile</p>\n</blockquote>\n<p>on your object files could be useful.</p>\n<p>Turn on as much optimisation as you can <code>-O3</code>. It is really hard to read an optimized assembly, making it another impediment. There is really no good way of preventing disassembly and reverse-engineering, but it makes it harder.</p>\n<p>As for Python, it is absolutely OK to ship only <code>.pyc</code> bytecode files. It is compiled version of source code for Python Virtual Machine. <a href=\"http://effbot.org/pyfaq/how-do-i-create-a-pyc-file.htm\" rel=\"nofollow\">How do I create a .pyc file?</a>. Try this one, maybe it is what you need. User can run bytecode file using <code>python</code> just as easily as a source code file.</p>\n<p>Lastly, try to google for code obfuscation. It makes no sense to obfuscate C++ code, but maybe someone knows if code obfuscation is a good strategy for Python.</p>\n</div>",
            "votes": "4",
            "user": "user2622016",
            "time": "Feb 24, 2014 at 13:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}