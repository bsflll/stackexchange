{
    "title": "What image format is ANIM1",
    "link": "https://reverseengineering.stackexchange.com/questions/8475/what-image-format-is-anim1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am investigating car navigation software which runs on QNX and want to replace the startup animation with my own. I have found the files in the firmware which have the extension .canim which likely stands for compressed animation.</p>\n<p>The files are zlib compressed and after deflating the files start with HEX <code>41 4E 49 4D 31 20 20 20 20 03 00 00 E0 01 00 00</code>(ANIM1). My question is what file format is this? (possible match: <a href=\"http://en.wikipedia.org/wiki/ANIM\" rel=\"nofollow noreferrer\">Amiga ANIM</a>)</p>\n<p>I know that the screen resolution for the device is 800x480 so after DWORD 3&amp;4 are resolution (<code>20 03 00 00</code> -&gt; 80 and <code>E0 01 00 00</code> -&gt; 480</p>\n<p>I've uploaded the files <a href=\"https://remkoweijnen.sharefile.eu/d/sf4c7977d4f44fa59\" rel=\"nofollow noreferrer\">here</a>, bin files are deflated versions of the .canim files.</p>\n<p>EDIT: some additional info: I found startup pictures in the same folder and they are zlib compressed and are simple RGB pairs with a padding 00 to align at DWORD, eg : <code>04 02 04 00 04 02 04 00 04 02 04 00 04 02 04 00</code></p>\n<p>EDIT2: <a href=\"http://ankk-vagcom.com/discover-pro-modifier-le-logo-de-demarrage/\" rel=\"nofollow noreferrer\">This site</a> has video's for each of the possible startup animations.\nAnd these are the startup pictures I have extracted:\n<img alt=\"startup_generic.raw2\" src=\"https://i.sstatic.net/ThSjK.png\"/></p>\n<p>and</p>\n<p><img alt=\"startup_vw_dynaudio.raw2\" src=\"https://i.sstatic.net/xSyJ5.png\"/></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "895",
    "tags": [
        "file-format",
        "qnx"
    ],
    "user": "Remko",
    "time": "Mar 18, 2015 at 7:20",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">The Amiga match is not correct, that is a RIFF format. If googling turned up nothing, it may well be a proprietary format. Are its contents compressed as well? Can you put some samples on a public server?</span>",
            "time": null
        },
        {
            "user": "Remko",
            "text": "<span class=\"comment-copy\">@Jongware files uploaded, see edit</span>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">Are you able to post a photo of one of the opening frames or, even better, a video of the animation ?</span>",
            "time": null
        },
        {
            "user": "Remko",
            "text": "<span class=\"comment-copy\">@IanCook edited post with link to video's</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The image data is stored as raw RGBA quads, with width/height/start defined in a block near the beginning.</p>\n<p>You can extract the image data from the uncompressed bins using this python script:</p>\n<pre><code>import struct\nimport sys\nimport os\nfrom PIL import Image\n\nif len(sys.argv) != 3:\n  print 'usage: process.py &lt;filename&gt; &lt;outdir&gt;'\n  sys.exit(1)\n\nout_dir = sys.argv[2]\nif not os.path.exists(out_dir):\n  os.mkdir(out_dir)\n\ndata = open(sys.argv[1],'rb').read()\noffset = 0\n\n(magic,) = struct.unpack_from('&lt;8s', data, offset)\noffset = offset + 8\n\nif magic != 'ANIM1   ':\n  print 'incorrect magic!'\n  sys.exit(1)\n\n\n(stage_width, stage_height, cmdblock_len, unk) = struct.unpack_from('&lt;LLLL', data, offset)\noffset = offset + 16\n\nprint \"stage_width: %d\\nstage_height: %d\\ncmdblock_len: %d\\n\" %(stage_width, stage_height, cmdblock_len)\n\n(cmd_code, img_num, img_width, img_height, bytes_per_pixel, data_start) = struct.unpack_from('&lt;LLLLLL', data, offset)\n\nwhile cmd_code == 0x11:\n  print 'generating img_%d' % (img_num)\n  im = Image.frombuffer('RGBA', (img_width, img_height), data[0x20+cmdblock_len+data_start:], 'raw', 'RGBA', 0, 1)\n  im.save(os.path.join(out_dir, 'img_%d.png'%img_num))\n  offset = offset + 0x20\n  (cmd_code, img_num, img_width, img_height, bytes_per_pixel, data_start) = struct.unpack_from('&lt;LLLLLL', data, offset)\n</code></pre>\n<p>The other data in that initial block must be used composite them into the actual animation.</p>\n<p>You may be able to inject your own images of the same dimensions/format to replace elements of the animations. It doesn't give you full control, but it should give you some basic capability to customise the animations.</p>\n</div>",
            "votes": "3",
            "user": "booto",
            "time": "Mar 18, 2015 at 11:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">Thanks a lot, will have a look at this in the next couple of days...</span>",
                    "time": null
                },
                {
                    "user": "booto",
                    "text": "<span class=\"comment-copy\">Is the firmware package publicly available somewhere online?</span>",
                    "time": null
                }
            ]
        }
    ]
}