{
    "title": "How to call Windows console in ASM and printf some values there?",
    "link": "https://reverseengineering.stackexchange.com/questions/31208/how-to-call-windows-console-in-asm-and-printf-some-values-there",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there a working way to embed the windows console in disasm code?  I tried <strong>AllocConsole</strong> with <strong>GetStdHandle</strong> or <strong>AttachConsole</strong> with <strong>PID</strong> of an existing console but it didn't work.  I have tried <strong>printf</strong> and <strong>putchar</strong> with no success.  I can make a console and be able to change the title (fancy way to get printf:))) but instead of output I get a black screen.\nI'm on XP and trying to get the status of I/O ports in an old MFC application.  MessageBox is a good alternative, but I/O ports send thousands of messages per second. I will be happy even if x32dbg will have this function for logging registry value somehow but new versions doesn't work on my XP</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "263",
    "tags": [
        "windows",
        "x64dbg",
        "patch-reversing",
        "assembly"
    ],
    "user": "EvilCracker",
    "time": "Dec 2, 2022 at 0:36",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "<span class=\"comment-copy\">How about using another tool? .. for example <a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/portmon\" rel=\"nofollow noreferrer\">learn.microsoft.com/en-us/sysinternals/downloads/portmon</a></span>",
            "time": null
        },
        {
            "user": "EvilCracker",
            "text": "<span class=\"comment-copy\">@MegaTonnage Thanks, but this tool works on standart ports LPT and COM but I need a specific range IO ports  298-2A5. I builded my own tool based on WinIO driver, but this tool blocks IO ports and stops the program from running normally.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. This sounds weird. A UM app can hardly do anything with I/O ports. There has to be a driver involved. And then it depends how communication happens. Could be that the driver helps to map the I/O port range into the app and the app gets to directly interact with that. But otherwise you could look for <code>DeviceIoControl</code> calls or <code>ReadFile</code>/<code>WriteFile</code> on some device handle (which you could glean via a tool like Process Hacker or Process Explorer).</span>",
            "time": null
        },
        {
            "user": "EvilCracker",
            "text": "<span class=\"comment-copy\">@0xC0000022L Hi! This application I'm trying to debug has its own drivers in KM and works with it using the old NTport library. My task was to print what they send to each other</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@EvilCracker Wouldn't a classic filter driver be <i>the</i> way to go than? Just catch all those IRPs in flight ...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Ok, I got it...\nIn an arbitrary place in the program I put this:</p>\n<pre><code>call 0x7C8731B9 // kernel32.AllocConsole()\npush 0x21 // '!'\ncall _putch // this print one char '!'\npush 0x00553D91 // some string\ncall _cputs // this print string\n</code></pre>\n<p>In my case no need to use <strong>GetStdHandle</strong> after <strong>AllocConsole</strong></p>\n</div>",
            "votes": "0",
            "user": "EvilCracker",
            "time": "Dec 2, 2022 at 9:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Odd, I'd expect you have to open the respective pseudo-devices. At least that's how I had to do it whenever I used consoles for tracing purposes in GUI apps.</span>",
                    "time": null
                },
                {
                    "user": "EvilCracker",
                    "text": "<span class=\"comment-copy\">@0xC0000022L Windows C functions which starts from _ do magic :)</span>",
                    "time": null
                }
            ]
        }
    ]
}