{
    "title": "How do i make gnu as recognize all ARMV7 instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/8971/how-do-i-make-gnu-as-recognize-all-armv7-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I disassembled an android library with IDA, and want to do some extra steps at the end of one of the functions. Currently, the last instruction bytes are <code>BD E8 F0 8F</code>, in thumb mode, which IDA disassembles to <code>POP.W {R4-R11,PC}</code>.</p>\n<p>So i found a nice little piece of unused space, replaced the <code>POP.W</code> with a branch there, wrote my extension, remembered to put a <code>.thumb</code> and <code>.arch armv7a</code> at the start of my program, and finished my code with that <code>POP.W {R4-R11,PC}</code>. Unfortunately, using gnu as from an arm toolchain, this results in <code>Error: bad instruction pop.w '{R4-R11,PC}'</code> </p>\n<p>Ok, gnu as doesn't like the .w suffix, so i replaced the instruction with <code>POP {R4-R11,PC}</code>. This changes the error message to Error: invalid register list to push/pop instruction -- <code>pop {R4-R11,PC}</code></p>\n<p>I know that some older ARM chips had restrictions on what you could do with registers from R8 on, so, just for verification, i replaced the instruction with <code>POP {R4-R7,PC}</code>. And indeed, as assembles this well.</p>\n<p>Now I don't know how to continue?</p>\n<ul>\n<li>Maybe I have to give another architecture option to as. But .arch armv7a seems to be the newest which is valid with android armv7a libraries.</li>\n<li>Maybe i'm completely off track, and the pop instruction is actually a macro for two separate instructions, which pop high and low registers after another. But, the result of entering the individual two-byte instructions (<code>BD E8</code>, <code>F0 8F</code>) into the online disassembler seems to have nothing to do with popping from the stack.</li>\n</ul>\n<p>I also tried disabling macros in IDA's processor options, which didn't change anything. So i'm inclined to think the byte sequence is a genuine 4 byte thumb mode opcode.</p>\n<p>What else do i need to specify in my program to make gnu as recognize the instruction?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "arm",
        "assembly"
    ],
    "user": "Guntram Blohm",
    "time": "May 24, 2015 at 22:14",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>By default, <code>as</code>, uses the old 'divided' syntax for arm and thumb instructions. Hence it is not recognising your <code>pop.w</code> instruction.</p>\n<p>To make it work, add <code>.syntax unified</code> at the start of your program.  This tells it to use the new unified syntax and you should find it assembles <code>pop.w</code> successfully.</p>\n<p>See <a href=\"https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html\">https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html</a> for more details.</p>\n</div>",
            "votes": "6",
            "user": "Ian Cook",
            "time": "May 24, 2015 at 15:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}