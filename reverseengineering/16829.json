{
    "title": "Disassemblers resolving (ELF) section names",
    "link": "https://reverseengineering.stackexchange.com/questions/16829/disassemblers-resolving-elf-section-names",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working with linux executables and was just wondering how it is that section names are resolved to addresses upon disassembly of an ELF.</p>\n<p>For example take some random disassembly output from objdump, </p>\n<pre><code>  4002b5:       00 00                   add    %al,(%rax)\n  4002b7:       00 67 55                add    %ah,0x55(%rdi)\n  4002ba:       61                      (bad)  \n  4002bb:       10                      .byte 0x10\n\nDisassembly of section .dynsym:\n\n00000000004002c0 &lt;.dynsym&gt;:\n        ...\n  4002d8:       9b                      fwait\n  4002d9:       00 00                   add    %al,(%rax)\n  4002db:       00 12                   add    %dl,(%rdx)\n        ...\n  4002ed:       00 00                   add    %al,(%rax)\n  4002ef:       00 32                   add    %dh,(%rdx)\n  4002f1:       00 00                   add    %al,(%rax)\n  4002f3:       00 12                   add    %dl,(%rdx)\n        ...\n  400305:       00 00                   add    %al,(%rax)\n  400307:       00 17                   add    %dl,(%rdi)\n</code></pre>\n<p>how has it, if from a heuristic perspective, detected that the section at that address is called dynsm? The same goes for .text, .bss, and even functions listed by objdump, such as 'main'.</p>\n<p>How would I reproduce this if I were to write a disassembly tool + executable analyser myself?</p>\n<p>Thanks</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "disassembly",
        "linux",
        "elf"
    ],
    "user": "Marius.pharoe",
    "time": "Nov 24, 2017 at 0:01",
    "comments": [
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">For ELF binary files, the compiler inserts debug information such as function names, source lines, ... using a debug format called DWARF. The disassembler doesn't guess the name, it reads it from the DWARF info associated to an assembly block/section. check out the documentation : <a href=\"http://www.dwarfstd.org/\" rel=\"nofollow noreferrer\">dwarfstd.org</a>. Also, the answer below covers only sections - it is incomplete.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">@yaspr this question is specifically about how to retrieve section information. It is not about debugging or functions. DWARF and debug symbols are not relevant in this particular case.</span>",
            "time": null
        },
        {
            "user": "Marius.pharoe",
            "text": "<span class=\"comment-copy\">@yaspr could you verify whether this debug information is inserted by default? Reading into DWARF, and the GCC compiler, GCC does not do this by default (gcc -o).</span>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">@SYS_V : \"... and even functions listed by objdump...\", it is somehow relevant but as I said, your answer is thorough and the DWARF is only complementary with some magic.</span>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">@Marius.pharoe DWARF info are not there by default, but they are very helpful (<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html\" rel=\"nofollow noreferrer\">gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html</a>).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Note that the in example in the question, data is being disassembled as code. <a href=\"https://reverseengineering.stackexchange.com/questions/2539/what-symbol-tables-stay-after-a-strip-in-elf-format\">The <code>.dynsym</code> section holds the dynamic linking symbol table and does not contain code</a>.</p>\n<hr/>\n<ul>\n<li><p>Information such as the name and the virtual address of the first byte of a section is given in the <em>section header</em> of that section. </p></li>\n<li><p>The section header is a structure stored in the <em>section header table</em> of an ELF binary. </p></li>\n</ul>\n<p>In this case <code>objdump</code> prints the virtual address <code>00000000004002c0</code> and the name <code>.dynsym</code> because this is the information stored in the section header for that particular section (technically, section names are strings stored in the section header string table <code>.shstrtab</code>, but this is not so important in this case). If there was no section header for this section or if there was no section header table present in the binary, <code>objdump</code> would not be able to output this information. </p>\n<p>There is no need for heuristics unless the section header table is not present in the binary. This is unusual, but has been observed to be the case in certain Linux ELF binaries (viruses) in order to thwart analysis since <code>gdb</code>, <code>objdump</code>, and other <a href=\"ftp://ftp.gnu.org/old-gnu/Manuals/bfd-2.9.1/html_mono/bfd.html\" rel=\"nofollow noreferrer\">Binary File Descriptor-based utilities</a> (thank you Igor Skochinsky for the correction) rely on information in the section header table to parse the binary.</p>\n<p>Relevant documentation can be found in the <a href=\"https://refspecs.linuxfoundation.org/elf/gabi41.pdf\" rel=\"nofollow noreferrer\">System V ABI (generic)</a> beginning in chapter 4 \"Object Files\" (page 44), as well as the <a href=\"http://man7.org/linux/man-pages/man5/elf.5.html\" rel=\"nofollow noreferrer\">manual page for ELF</a>.</p>\n<blockquote>\n<p>A <em>section header table</em> contains information describing the file’s sections. Every section has an entry in the table; each\n  entry gives information such as the section name, the section size, and so on.</p>\n</blockquote>\n<p>More specifically:</p>\n<blockquote>\n<p>An object file’s section header table lets one locate all the file’s sections. The section header table is an array of <code>Elf32_Shdr</code> or\n  <code>Elf64_Shdr</code> structures. A section header table index is a subscript into this array. The ELF header’s <code>e_shoff</code> member gives the byte offset from the beginning of the file to the section header table; <code>e_shnum</code> tells how many entries the section header table contains; <code>e_shentsize</code> gives the size in bytes of each entry.</p>\n</blockquote>\n<p>Additionally,</p>\n<blockquote>\n<p>Sections contain all information in an object file, except the ELF header, the program header table, and the section header table. Moreover, object files’ sections satisfy several conditions.</p>\n<ul>\n<li><p>Every section in an object file has exactly one section header describing it. Section headers may exist that do not have a section.</p></li>\n<li><p>Each section occupies one contiguous (possibly empty) sequence of bytes within a file.</p></li>\n<li><p>Sections in a file may not overlap. No byte in a file resides in more than one section.</p></li>\n<li><p>An object file may have inactive space. The various headers and the sections might not ‘‘cover’’ every byte in an object file. The contents of the inactive data are unspecified.</p></li>\n</ul>\n</blockquote>\n<p>Here is a high-level overview of what is involved in locating information contained in an ELF binary's individual section headers. The documentation cited is for ELF32 binaries, but the process is the same with ELF64 binaries.</p>\n<p>The location of the section header table is given in the ELF header:</p>\n<p><a href=\"https://i.sstatic.net/Ahkze.png\" rel=\"nofollow noreferrer\"><img alt=\"ELF header location\" src=\"https://i.sstatic.net/Ahkze.png\"/></a></p>\n<p>The ELF header is a struct and the offset of the section header table is stored in a member called <code>e_shoff</code>:</p>\n<p><a href=\"https://i.sstatic.net/MVjoM.png\" rel=\"nofollow noreferrer\"><img alt=\"ELF header structure and members\" src=\"https://i.sstatic.net/MVjoM.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/9PC2r.png\" rel=\"nofollow noreferrer\"><img alt=\"e_shoff\" src=\"https://i.sstatic.net/9PC2r.png\"/></a></p>\n<pre><code>$ readelf -h /bin/ls\nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x404890\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          108288 (bytes into file)   &lt;---------- e_shoff\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         28\n  Section header string table index: 27\n</code></pre>\n<p>The section header table is usually located at the end of the binary following all of the sections:</p>\n<p><a href=\"https://i.sstatic.net/it3TH.png\" rel=\"nofollow noreferrer\"><img alt=\"section header table location in binary\" src=\"https://i.sstatic.net/it3TH.png\"/></a></p>\n<p>As stated in the documentation and mentioned previously, every section has an entry in the section header table. Each entry is a structure that contains information about the section, including its name and its virtual address when the binary is mapped into memory. The name of the section is stored in a struct member called <code>sh_name</code>, and the address information is stored in a struct member called <code>sh_addr</code>:</p>\n<p><a href=\"https://i.sstatic.net/cm8mY.png\" rel=\"nofollow noreferrer\"><img alt=\"section header structure\" src=\"https://i.sstatic.net/cm8mY.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/rDly4.png\" rel=\"nofollow noreferrer\"><img alt=\"sh_name\" src=\"https://i.sstatic.net/rDly4.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/3TEOu.png\" rel=\"nofollow noreferrer\"><img alt=\"sh_addr\" src=\"https://i.sstatic.net/3TEOu.png\"/></a></p>\n<p>Retrieving this information is just a matter of correctly parsing these structures within a given binary.</p>\n<p>More information can be found here:</p>\n<ul>\n<li><a href=\"http://www.linuxjournal.com/article/1059\" rel=\"nofollow noreferrer\">The ELF Object File Format: Introduction</a></li>\n<li><a href=\"http://www.linuxjournal.com/node/1060/print\" rel=\"nofollow noreferrer\">The ELF Object File Format by Dissection</a></li>\n</ul>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "Nov 24, 2017 at 16:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Thorough explanation yet incomplete given it only covers sections. The DWARF or debug symbols aren't cited and to be honest, that's where the magic happens.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">in fact, <code>readelf</code> works fine on files without section headers (unlike BFD-based <code>objdump</code> or <code>gdb</code>)</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky Thank you, corrected. If there are any other errors, please let me know.</span>",
                    "time": null
                }
            ]
        }
    ]
}