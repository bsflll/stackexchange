{
    "title": "What does __return_ptr do in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/18433/what-does-return-ptr-do-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say I have this program:</p>\n<pre><code>struct A {\n    int x;\n};\n\nstruct A func1(int z) {\n    struct A result;\n    result.x = z+1;\n    return result;\n}\n\nint main() {\n    return func1(1).x;\n}\n</code></pre>\n<p>When compiling this on linux with <code>gcc -m32 -fno-stack-protector</code> the result of func1 will be returned as a stack pointer. Can I somehow set the type of func1 using __return_ptr so IDA understands this calling convention? I thought that would be the purpose of __return_ptr, if not what does it do?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "391",
    "tags": [
        "ida",
        "x86",
        "gcc",
        "calling-conventions"
    ],
    "user": "Stefan Friesel",
    "time": "Jun 4, 2018 at 10:03",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">question body seems to be different from title</span>",
            "time": null
        },
        {
            "user": "Stefan Friesel",
            "text": "<span class=\"comment-copy\">rephrased question body</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">you're still asking two different things: \"what is <code>__return_ptr</code>?\", and  \"how to represent this calling convention in IDA?\". But okay, I'll try to describe both parts.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The \"problem\" with your example is that the structure is too small (four bytes), so it fits in a register and is not actually passed on the stack. From <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#non-trivial\" rel=\"nofollow noreferrer\">the Itanium C++ ABI</a> (used by most GCC implementations):</p>\n<blockquote>\n<p>A type is considered non-trivial for the purposes of calls if: </p>\n<ul>\n<li>it has a non-trivial copy constructor, move constructor, or destructor, or </li>\n<li>all of its copy and move constructors are deleted. </li>\n</ul>\n<p>This definition, as applied to class types, is intended to be the\n  complement of the definition in [class.temporary]p3 of types for which\n  an extra temporary is allowed when passing or returning a type. <strong>A\n  type which is trivial for the purposes of the ABI will be passed and\n  returned according to the rules of the underlying C ABI, e.g. in\n  registers</strong>; often this has the effect of performing a trivial copy of\n  the type.</p>\n</blockquote>\n<p>(emphasis mine).</p>\n<p>Since your struct is <em>trivial</em> and fits completely into the return register (<code>eax</code>), it is not passed on the stack but returned directly in <code>eax</code>. So there is no need for anything special here. However, if you make it a little bigger, e.g.:</p>\n<pre><code>struct A {\n    int x;\n    int y;\n    int z;\n};\n</code></pre>\n<p>Then it no longer fits and has to be passed on the stack. \nIf you add the struct to Local Types and specify the C++ prototype for the function (<code>struct A func1(int z)</code>), then IDA performs type lowering and converts it to a C-style prototype with explicit argument locations:</p>\n<p><code>struct A *__cdecl func1(struct A *__return_ptr __struct_ptr retstr, int z)</code> </p>\n<p>It seems currently <code>__return_ptr</code> is not used by IDA or decompiler and is just an annotation for the user, but in theory it could be used to make the decompiled code closer to the original C++ syntax.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jun 3, 2018 at 17:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Stefan Friesel",
                    "text": "<span class=\"comment-copy\">At least on my machine gcc does pass the result on the stack even with the 4-byte struct (gcc (Ubuntu 7.3.0-16ubuntu3) 7.3.0). But the last sentence answers my question</span>",
                    "time": null
                }
            ]
        }
    ]
}