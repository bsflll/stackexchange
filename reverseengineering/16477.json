{
    "title": "Flash Reading by JTAG",
    "link": "https://reverseengineering.stackexchange.com/questions/16477/flash-reading-by-jtag",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to read the flash memory of a microcontroller MPC5606B from Motorola. I saw his pins and saw that it uses jtag to perform debug, so I'm trying to use it JTAG interface to read its flash content.</p>\n<p>I read the MPC's flash content using a tool (UPA) and a PC, however, I want to do it by my own, using my own embedded hardware without the PC's tool. I read about JTAG standard( JTAG_IEEE-Std-1149.1-2001 ), and some videos and explanations on the internet. I read about TAP controller state diagram and read about some instructions too.</p>\n<p>In order to better understand the JTAG reading, I Used the PC's tool to read the MCP's flash and an osciloscope to see how the communication is performed, however, the communication has almost 10s of duration. So, I filled the entire flash with zeros and read the memory, in this way, I was able identify the reading of memory using the osciloscope. However, although I can identify the reading of memory using the osciloscope, I can't determine yet the exact sequence of commands to perform the reading. The time of reading is too big, almost 10s. </p>\n<p>So, before to go more deep, I would like to know if there is some kind of protection to access the flash memory. I tried to understand the beginning of the communication, I can identify the progress in the TAP controller's state machine, but I was not able to understand what this steps means and why it is done. So, I would like to know:</p>\n<p>1) Can I determine if the communication has some kind of protection ? I really need to know it before to go further in the task because I need to know the task's complexity level before to go more deep</p>\n<p>2) Although I read  about the JTAG standard and the TAP controller state machine, I was not able to say what sequence of comands I need to read the flahs content.</p>\n<p>Abaixo está a leitura do flash do MPC5606B realizada pela ferramenta com o auxílio do PC. The image is composed of a sequence of images. The first is the image of the communication in full, the second is the beginning of the communication, there is an arrow indicating where it was withdrawn.</p>\n<p><a href=\"https://i.sstatic.net/SLq5T.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/SLq5T.png\"/></a></p>\n<p>This was my interpretation until now</p>\n<p>FIGURE 1:</p>\n<p>1.1 - (TMS = 1) Test-Logic-Resset </p>\n<p>1.2 - (CLK wide pulse) I do not know why. </p>\n<p>1.3 - (8 pulses of CLK, TMS = 1) </p>\n<p>Since TMS did not came out to 1 I understand that it did not quit Test-logic-Reset </p>\n<p>1.4 - (TMS = 0, 1 pulse clock) enters Run-Test-Idle </p>\n<hr/>\n<p>FIGURE 2:</p>\n<p>2.1 - (TMS = 1, 2 clock pulses) Goes to the \"Select IR-Scan\" state</p>\n<p>2.2 - (TMS = 0, 2 pulses of clock) Go to the state \"Shif-IR\"</p>\n<p>2.3 - (TMS = 0, 4 clock pulses) Remains in \"Shift-IR\"</p>\n<p>TDI: 1000\nTDO: 1000\n2.4 - (TMS = 1, 1 clock pulse) Goes to the \"Exit1-IR\"</p>\n<p>2.5 - (TMS = 1, 1 clock pulse) Goes to the status \"Update-IR\"</p>\n<p>2.6 - (TMS = 0, 1 clock pulse) Goes to the \"Run-Test-Idle\"</p>\n<hr/>\n<p>FIGURE 3:</p>\n<p>3.1 - (TMS = 1, 1 clock pulse) goes to the \"Select DR-Scan\" state</p>\n<p>3.2 - (TMS = 0, 2 clock pulses) Go to the status \"Shif-DR\"</p>\n<p>3.3 - (TMS = 0, 31 clock pulses) Go to the \"Shif-DR\" state</p>\n<p>The 32 clock cycles are equivalent to 4 bytes:</p>\n<p>TDI: 0x00 0x00 0x00 0x00\nTDO: 0xB8 0x0C 0x27 0x54 (10111000 00001100 00100111 01010100)</p>\n<p>3.4 - (TMS = 1, 1 clock pulse) Goes to the \"Exit1-DR\"</p>\n<p>3.5 - (TMS = 1, 1 clock pulse) Goes to the status \"Update-DR\"</p>\n<p>3.6 - (TMS = 0, 1 clock pulse) Goes to the \"Run-Test-Idle\" </p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "3k",
    "tags": [
        "jtag"
    ],
    "user": "Daniel",
    "time": "Oct 3, 2017 at 16:37",
    "comments": [
        {
            "user": "autofan1965",
            "text": "<span class=\"comment-copy\">Daniel did you find way for reading MPC5606BK?</span>",
            "time": null
        },
        {
            "user": "Daniel",
            "text": "<span class=\"comment-copy\">@autofan1965, I tried, but I didn't need it anymore,  so I stopped.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Interpreting JTAG transactions by hand can be pretty tiresome. If you can export your data to a more or less universal data format, like VCD or even a CSV file, you can use <a href=\"http://sigrok.org/\" rel=\"noreferrer\">Sigrok and Pulseview</a> to decode your data. This will decode the low-level JTAG data; if you know the specifics of the controller like TAP register layout and command set, you can extend Sigrok with a decoder that runs on top of the existing IEEE-1149 decoder.</p>\n<p><a href=\"https://i.sstatic.net/g63XS.jpg\" rel=\"noreferrer\"><img alt=\"jtag\" src=\"https://i.sstatic.net/g63XS.jpg\"/></a></p>\n</div>",
            "votes": "6",
            "user": "Vladislav Ivanov",
            "time": "Oct 4, 2017 at 6:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Daniel",
                    "text": "<span class=\"comment-copy\">I'm using PulseView to decode the communication, it was a very good advise, I really thank you. However, I stopped decodding for a while, before to go further I need to know if there is some kind of protection / Security in MPC5606B because, otherwise, this work could be worthless. Do you know something about it ?</span>",
                    "time": null
                },
                {
                    "user": "Vladislav Ivanov",
                    "text": "<span class=\"comment-copy\">From the nature of the question I thought it was something obscure, but apparently there are plenty of docs out there. I would suggest reading reference manual: <a href=\"http://cache.freescale.com/files/32bit/doc/ref_manual/MPC5606BRM.pdf\" rel=\"nofollow noreferrer\">cache.freescale.com/files/32bit/doc/ref_manual/MPC5606BRM.pdf</a> . You are interested in sections 2.4.5, 5.1.3, 35.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your interpretation looks pretty close to me. However, this is very low-level view, you need to bring it back to the higher level, at least IR/DR. For example, the whole exchange 1-3 can be summarized as:</p>\n<p>Write IR=0b100 (8), read DR=0x2AE4301D </p>\n<p>(DR bits are shifted in from the lowest one, so you need to swap the bit string)</p>\n<p>This IR value is very close to the standard IDCODE(4), so I think there is an off-by-one in your interpretation and this exchange is reading the device ID. In fact, the value 0x2AE4301D  matches the one for MPC5606BF I found in <a href=\"https://www.nxp.com/docs/en/application-note/AN4477.pdf\" rel=\"noreferrer\">this document</a>.</p>\n<p>As for actual flash reading, I doubt it's done using raw JTAG commands. AFAIK the common ways of reading flash are the following:</p>\n<ol>\n<li>using boundary scan, set and read the CPU pins connected to the flash chip; basically turning the CPU into a bit-bang flash programmer. This obviously only works with external flash so probably not your case</li>\n<li>using custom chip-specific debugging commands, read and write the flash device I/O registers in the CPU memory space.</li>\n<li>using custom chip-specific debugging commands, upload a small flasher program into the CPU's RAM and let it execute. The program would chunks of flash into a RAM area which can then be fetched via JTAG back to the host. by setting the register state before each execution, different parts of flash could be accessed.</li>\n</ol>\n<p>I would recommend you to use a program like urJTAG or OpenOCD to perform high-level JTAG manipulations (like sending IR and reading DR) if you want to reproduce what the flasher program is doing. urJTAG also has a mode to brute-force possible IR values which may let you discover the vendor-specific commands.</p>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Oct 3, 2017 at 22:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Daniel",
                    "text": "<span class=\"comment-copy\">I identified the IDCODE in the communication's log, your observations and tips were very useful, thank you very much. However, I stopped decodding for a while, before to go further I need to know if there is some kind of protection / Security in MPC5606B because, otherwise, this work could be worthless. Do you know something about it ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">since the other flasher works, I doubt there's a strong protection, if any. In any case, that's a different question.</span>",
                    "time": null
                }
            ]
        }
    ]
}