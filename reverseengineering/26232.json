{
    "title": "Unable to unsquash from a FW dump",
    "link": "https://reverseengineering.stackexchange.com/questions/26232/unable-to-unsquash-from-a-fw-dump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After trying to unsquash a firmware dump from a router without success, I am asking for help.</p>\n<p>I have a router with a BCM68380 CPU. After desoldering the TOSHIBA NAND chip I dumped the firmware (<a href=\"https://drive.google.com/file/d/1IZHE-zeCw8focYDzqM69pqCP_kIgIraW/view?usp=sharing\" rel=\"nofollow noreferrer\">link to the FW</a>) and proceed to extract it. Binwalk shows the following:</p>\n<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n49788         0xC27C          CRC32 polynomial table, big endian\n589312        0x8FE00         CRC32 polynomial table, big endian\n2289136       0x22EDF0        uImage header, header size: 64 bytes, header CRC: 0x5BEEE4BD, created: 2017-08-31 09:59:39, image size: 2689910 bytes, Data Address: 0x80010000, Entry Point: 0x804505C0, data CRC: 0x44FFEAF7, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n2703360       0x294000        uImage header, header size: 64 bytes, header CRC: 0x5BEEE4BD, created: 2017-08-31 09:59:39, image size: 2689910 bytes, Data Address: 0x80010000, Entry Point: 0x804505C0, data CRC: 0x44FFEAF7, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n3808793       0x3A1E19        MySQL MISAM compressed data file Version 5\n5477496       0x539478        uImage header, header size: 64 bytes, header CRC: 0x1BD6643, created: 2017-08-31 09:59:50, image size: 26791936 bytes, Data Address: 0x0, Entry Point: 0x0, data CRC: 0x8212135E, OS: Linux, CPU: MIPS, image type: Standalone Program, compression type: lzma, image name: \"rootfs\"\n5477560       0x5394B8        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 26790128 bytes, 2251 inodes, blocksize: 262144 bytes, created: 2017-08-31 09:59:50\n32416240      0x1EEA1F0       PNG image, 921 x 359, 8-bit/color RGBA, non-interlaced\n32686576      0x1F2C1F0       PNG image, 979 x 336, 8-bit/color RGBA, non-interlaced\n46083560      0x2BF2DE8       uImage header, header size: 64 bytes, header CRC: 0x8F97D0FE, created: 2017-01-09 09:50:15, image size: 2688224 bytes, Data Address: 0x80010000, Entry Point: 0x8044DAD0, data CRC: 0x7E335D07, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n46497792      0x2C58000       uImage header, header size: 64 bytes, header CRC: 0x8F97D0FE, created: 2017-01-09 09:50:15, image size: 2688224 bytes, Data Address: 0x80010000, Entry Point: 0x8044DAD0, data CRC: 0x7E335D07, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n49270176      0x2EFCDA0       uImage header, header size: 64 bytes, header CRC: 0xFE9B6F73, created: 2017-01-09 09:50:20, image size: 25706496 bytes, Data Address: 0x0, Entry Point: 0x0, data CRC: 0xD5593BBC, OS: Linux, CPU: MIPS, image type: Standalone Program, compression type: lzma, image name: \"rootfs\"\n49270240      0x2EFCDE0       Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 25703081 bytes, 2266 inodes, blocksize: 262144 bytes, created: 2017-01-09 09:50:20\n74999328      0x4786620       PNG image, 921 x 359, 8-bit/color RGBA, non-interlaced\n75269664      0x47C8620       PNG image, 979 x 336, 8-bit/color RGBA, non-interlaced\n91914240      0x57A8000       UBI erase count header, version: 1, EC: 0x17, VID header offset: 0x800, data offset: 0x1000\n</code></pre>\n<p>When extracted, the following files are shown (the squashfs.root folder is empty)</p>\n<pre><code>2EFCDE0.squashfs  5394B8.squashfs  57A8000.ubi  squashfs-root\n</code></pre>\n<p>Then I tried to uncompress the squashfs filesystem. At first I tried with unsquashfs which gave me this result:</p>\n<pre><code>Lseek failed because Invalid argument\nFile system corruption detected\nFATAL ERROR:failed to read file system tables\n</code></pre>\n<p>On the other hand <code>sasquatch</code> gave me this result:</p>\n<pre><code>SquashFS version [4.0] / inode count [2266] suggests a SquashFS image of the same endianess\nParallel unsquashfs: Using 1 processor\nLseek failed because Invalid argument\nread_block: failed to read block @0xbe23b7988e38debe\nread_uids_guids: failed to read id table block\nFATAL ERROR:failed to uid/gid table\n</code></pre>\n<p>I also tried the same with <code>firmware-mod-kit</code>:</p>\n<pre><code>Firmware Mod Kit (extract) 0.99, (c)2011-2013 Craig Heffner, Jeremy Collake\n\nScanning firmware...\n\nScan Time:     2020-11-03 13:49:05\nTarget File:   /mnt/c/Users/Ismael/Desktop/Nueva/Flash_data.bin\nMD5 Checksum:  31b617568a1ca2e060bea93fd23de338\nSignatures:    344\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n49788         0xC27C          CRC32 polynomial table, big endian\n589312        0x8FE00         CRC32 polynomial table, big endian\n2289136       0x22EDF0        uImage header, header size: 64 bytes, header CRC: 0x5BEEE4BD, created: 2017-08-31 09:59:39, image size: 2689910 bytes, Data Address: 0x80010000, Entry Point: 0x804505C0, data CRC: 0x44FFEAF7, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n2703360       0x294000        uImage header, header size: 64 bytes, header CRC: 0x5BEEE4BD, created: 2017-08-31 09:59:39, image size: 2689910 bytes, Data Address: 0x80010000, Entry Point: 0x804505C0, data CRC: 0x44FFEAF7, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n3808793       0x3A1E19        MySQL MISAM compressed data file Version 5\n5477496       0x539478        uImage header, header size: 64 bytes, header CRC: 0x1BD6643, created: 2017-08-31 09:59:50, image size: 26791936 bytes, Data Address: 0x0, Entry Point: 0x0, data CRC: 0x8212135E, OS: Linux, CPU: MIPS, image type: Standalone Program, compression type: lzma, image name: \"rootfs\"\n5477560       0x5394B8        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 26790128 bytes, 2251 inodes, blocksize: 262144 bytes, created: 2017-08-31 09:59:50\n32416240      0x1EEA1F0       PNG image, 921 x 359, 8-bit/color RGBA, non-interlaced\n32686576      0x1F2C1F0       PNG image, 979 x 336, 8-bit/color RGBA, non-interlaced\n46083560      0x2BF2DE8       uImage header, header size: 64 bytes, header CRC: 0x8F97D0FE, created: 2017-01-09 09:50:15, image size: 2688224 bytes, Data Address: 0x80010000, Entry Point: 0x8044DAD0, data CRC: 0x7E335D07, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n46497792      0x2C58000       uImage header, header size: 64 bytes, header CRC: 0x8F97D0FE, created: 2017-01-09 09:50:15, image size: 2688224 bytes, Data Address: 0x80010000, Entry Point: 0x8044DAD0, data CRC: 0x7E335D07, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"linux\"\n49270176      0x2EFCDA0       uImage header, header size: 64 bytes, header CRC: 0xFE9B6F73, created: 2017-01-09 09:50:20, image size: 25706496 bytes, Data Address: 0x0, Entry Point: 0x0, data CRC: 0xD5593BBC, OS: Linux, CPU: MIPS, image type: Standalone Program, compression type: lzma, image name: \"rootfs\"\n49270240      0x2EFCDE0       Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 25703081 bytes, 2266 inodes, blocksize: 262144 bytes, created: 2017-01-09 09:50:20\n74999328      0x4786620       PNG image, 921 x 359, 8-bit/color RGBA, non-interlaced\n75269664      0x47C8620       PNG image, 979 x 336, 8-bit/color RGBA, non-interlaced\n91914240      0x57A8000       UBI erase count header, version: 1, EC: 0x17, VID header offset: 0x800, data offset: 0x1000\n\nExtracting 49270240 bytes of  header image at offset 0\nExtracting squashfs file system at offset 49270240\nExtracting squashfs files...\n[sudo] password for ismael:\nFirmware extraction successful!\n</code></pre>\n<p>It didn't give me any errors but it didn`t extract any squashfs files.</p>\n<p>To remove the OOB in the firmware I have used <a href=\"https://github.com/Hitsxx/NandTool\" rel=\"nofollow noreferrer\">NandTool</a>\n, which removes the OOB data.</p>\n<p>Any help will be appreciated.Thanks.</p>\n<p>Edit: Firmware with \"Include Spare area\" disabled <a href=\"https://drive.google.com/file/d/1Gb3wghERwTsNJuf93hqZxXRfkSGLJ4hG/view?usp=sharing\" rel=\"nofollow noreferrer\">link</a>.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "894",
    "tags": [
        "firmware",
        "binwalk"
    ],
    "user": "Ismael",
    "time": "Nov 11, 2020 at 11:30",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what did you use for dumping? does it account for OOB/spare bytes?</span>",
            "time": null
        },
        {
            "user": "Ismael",
            "text": "<span class=\"comment-copy\">Thanks for responding. I am currently using the TL866II Plus Programmer with the Xgpro software. In the configuration I have \"Include Spare area\" enabled</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Most likely your dump includes spare (or OOB) bytes while most file formats only consider user-accessible areas. You can either <a href=\"https://reverseengineering.stackexchange.com/a/15099/60\">figure out the dump structure</a> and remove OOB chunks or simply re-dump without the spare area. After that extraction should work.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 3, 2020 at 14:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ismael",
                    "text": "<span class=\"comment-copy\">Thanks for responding. I have tried to read the NAND chip with the \"Include Spare area\" disabled. The firmware file is now 4mb smaller. However, I am getting the same errors as before. Thanks</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you have a router very similar to mine after analysing your dump. Please check <a href=\"https://openwrt.org/inbox/toh/arcadyan/astoria/prv3399b-e-lt\" rel=\"nofollow noreferrer\">PRV3399BELT</a> for what I've found so far.</p>\n<p>As noted before, you have dumped raw data with OOB information; that must be cleaned before feeding binwalk.</p>\n<p>And then binwalk is not giving reliable information since it is trying to guess common structures and many times it gives “false findings”. Don't trust too much this output.</p>\n<p>Coming to your question, the firmware has been built with “secured boot” enable. This means that the images are encrypted and therefore cannot be read or manipulated.</p>\n<p>Unless the RSA keys are known, your efforts are pointless.</p>\n<p>You can learn a lot from <a href=\"https://github.com/RMerl/asuswrt-merlin.ng/tree/master/release/src-rt-5.02axhnd.675x/targets/keys/demo/GEN2\" rel=\"nofollow noreferrer\">Asuswrt-Merlin site</a>. Especially these <a href=\"https://github.com/RMerl/asuswrt-merlin.ng/tree/master/release/src-rt-5.02axhnd/hostTools/SecureBootUtils\" rel=\"nofollow noreferrer\">scripts</a>. These are extracts from Asuswrt GPL sources. Unfortunately, BCM68380 is not included yet.</p>\n<p>Note: I have checked that the dumped files are corrupted; not the place to explain it but the end of the cferom file (bootloader) at 0xd874 contains a JAMCRC32 of block 0x14-&gt;0xd773. You can even make a comparison of the two available dumps and you will notice some byte mismatches at the beginning. If possible, could you make available a safe dump?</p>\n</div>",
            "votes": "1",
            "user": "Rohit Gupta",
            "time": "May 6, 2023 at 20:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}