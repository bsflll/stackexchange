{
    "title": "Understanding gRPC message",
    "link": "https://reverseengineering.stackexchange.com/questions/30982/understanding-grpc-message",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Problem</h2>\n<p>I intercepted a gRPC network request from an application, and I intend to modify the contents and resend the message programmatically. As no tools (except for MitmProxy, see below) were able to decode the protobuf data I wanted to know why that is.</p>\n<p>The gRPC payload sent from the client:</p>\n<pre><code>gRPC header       | Protobuf data\n[00] [00 00 00 22] [12 12 09 c3 8d 09 16 c3 93 2a c2 a5 4d 40 11 14 39 c3 ab 6b c2 a2 c3 b3 31 40 1a 05 65 6e 2d 53 45 1a 05 73 76 2d 53 45]\n ^^       ^^ Payload length\nCompressed flag\n</code></pre>\n<h2>What I've tried</h2>\n<h3>Failure</h3>\n<ul>\n<li><code>protoc --decode_raw</code> on the protobuf data, but I get <code>Failed to parse input.</code></li>\n<li>CyberChef with protobuf decode, gives <code>Error: Exhausted Buffer</code></li>\n<li>The <code>blackboxprotobuf</code> python module, raising <code>google.protobuf.message.DecodeError: Invalid Message Length</code></li>\n</ul>\n<h3>Success</h3>\n<p>MitmProxy was able to decode the data to the following:</p>\n<pre><code>gRPC message 0 (compressed False)\n[message]    2\n[fixed64]    2.1   4633543028839346763\n[fixed64]    2.2   4625748902140211098\n[message]    3\n[fixed32]    3.12  1163079022\n[string]     3     sv-SE\n</code></pre>\n<h3>Manually decoding</h3>\n<pre><code>[message]\n00010 010 00010010\n  2   LEN    18\n\n[fixed64]\n00001 001 [11000011 10001101 00001001 00010110 11000011 10010011 00101010 11000010]\n  1   I64                            13991157658477498000\n\n[fixed32]\n10100 101 [01001101 01000000 00010001 00010100]\n  20  I32              336674893\n\n[fixed64]\n00111 001 [11000011 10101011 01101011 11000010 10100010 11000011 10110011 00110001]\n  7   I64                            3581421232503631000\n\n[unknown]\n01000 000 [00011010 00000101]\n  8  VARINT       ???\n\n[message]\n00011 010 00000101 \n  3   LEN    5\n\n[fixed32]\n01100 101 [01101110 00101101 01010011 01000101]\n 12   I32              1163079022\n\n[string]\n00011 010 00000101 [01110011 01110110 00101101 01010011 01000101]\n  3   LEN    7         s         v       -        S         E\n</code></pre>\n<p>I decoded it using the google documentation as reference: <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\" rel=\"nofollow noreferrer\">https://developers.google.com/protocol-buffers/docs/encoding</a>. However, I am not familiar with gRPC or protobuf so I have likely have gaps in my knowledge.</p>\n<p>Worth noting:</p>\n<ul>\n<li>I was able to successfully decode all server responses without problems.</li>\n<li>The payload length as indicated by the gRPC header (0x22) differs from its actual length (0x28).</li>\n<li>MitmProxy has access to both the gRPC headers and the protobuf data, while the other tools I tried (that all failed) only support protobuf data as input.</li>\n<li>I do not know for a fact that MitmProxy decoded the data correctly, only that it ran without exceptions</li>\n<li>According to the user agent, the client uses <code>grpc-swift-nio/1.9.0</code></li>\n</ul>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "676",
    "tags": [
        "protocol",
        "networking"
    ],
    "user": "WanderingCoder",
    "time": "Oct 12, 2022 at 14:08",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "<span class=\"comment-copy\">Because the data is serialised the tools need the .proto file to define the structure. You could try <a href=\"https://github.com/schdub/protodec\" rel=\"nofollow noreferrer\">github.com/schdub/protodec</a> which tries to obtain the .proto from the binary, or generate it from multiple messages (v2 only).</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Best tool I know for protobuf decoding is <a href=\"https://www.charlesproxy.com\" rel=\"nofollow noreferrer\">Charles Proxy</a>.</span>",
            "time": null
        },
        {
            "user": "WanderingCoder",
            "text": "<span class=\"comment-copy\">@Robert Thank you, but my question is how to deserialize the data programmatically. Also, I did try charles before but saw no option to deserialize the protobuf data.</span>",
            "time": null
        },
        {
            "user": "WanderingCoder",
            "text": "<span class=\"comment-copy\">@MegaTonnage <code>protoc --decode_raw</code> (and the other tools I mentioned) will not require a defenition of the structure as each wire type is included in the protobuf blob. It will try to guess the data type, often incorrectly, but even then the data will be deserializable.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">@WanderingCoder The option is a bit hidden: you can activate it manually in the content menu, \"View Response As\" -&gt; \"Protocol Buffers\". And you can add custom mappings to URLs where requests or responses are decoded.</span>",
            "time": null
        }
    ],
    "answers_data": []
}