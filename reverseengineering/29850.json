{
    "title": "IDA/Olly changing address bytes after patch during debugging on x86",
    "link": "https://reverseengineering.stackexchange.com/questions/29850/ida-olly-changing-address-bytes-after-patch-during-debugging-on-x86",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm struggling with a patch in an x86 .exe. I replaced a MOV with a JMP but everytime I run the debugger, the address gets modified as a sort of rebasing:</p>\n<pre><code>BE E4732201      MOV ESI,App.012273E4\n</code></pre>\n<p>should be replaced by</p>\n<pre><code>E9 9C380000      JMP App.0104EC75\n</code></pre>\n<p>It's funny because it is anyway a relativ jump, where I literally want to jump 0x389C from execution pointer. Instructions have also same size so I suppose there is no problem with filling or alignment..?\nI've done other modifications in the HEX and haven't got a problem so far. But with this one, everytime it runs, it changes my 9C380000 literal to something like 9C38xx00 where \"xx\" varies depending on the execution or if running on Olly or IDA. Even funnier, the instruction right above my patch is:</p>\n<pre><code>E9 A1380000      JMP App.0104EC75\n</code></pre>\n<p>Which is the exactly the same jump, to the same location (there fore plus 0x05 on the offset) and this one works. It's original code and does not get changed at all during execution but my jump does. Same OP code and same destination. Any thoughts why that is?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "262",
    "tags": [
        "patching",
        "hex"
    ],
    "user": "FELIPE_RIBAS",
    "time": "Jan 11, 2022 at 16:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As peter ferrie pointed out you have a relocation entry there<br/>\nwhich can be inferred by the opcode and address const</p>\n<p><code>BE E4732201 =&gt; mnem addr =&gt; mov esi,  012273e4</code></p>\n<p>if the load address changed the 0122 (HIGH_LOW) part will change<br/>\naccording to the load address  so your patch gets modified .</p>\n<p>i statically rebased an image from its preferred ImageBase</p>\n<p><a href=\"https://i.sstatic.net/NMjTr.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NMjTr.png\"/></a></p>\n<p>after changing image base  notice the relocation address starts from<br/>\n0xxxxxaa while instruction address starts from 0xxxxxa9<br/>\nnotice original bytes in the second snap (relocation table entry)</p>\n<p>image is from ghidra</p>\n<p><a href=\"https://i.sstatic.net/6gCxH.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/6gCxH.jpg\"/></a></p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Jan 17, 2022 at 14:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "FELIPE_RIBAS",
                    "text": "<span class=\"comment-copy\">Which software are you using, that shows directly the relocation table in this separate window?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">image is from ghidra</span>",
                    "time": null
                },
                {
                    "user": "FELIPE_RIBAS",
                    "text": "<span class=\"comment-copy\">Thanks. And from what I understood from relocation table, it only makes sense to have entries relative to absolut addresses like a label oder string, right? It would not make sense to have an entry for a near jmp for example, which then has relative address fa argument.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">relocations are done for fixed address constants  for example preferred address is 0x400000 string \"my awesome string\" is located at 0x402000  |   mov ecx,0x402000 here if the base is relocated t0 0x600000 then this 0x402000 needs to be adjusted as 0x602000 so there will be an entry in relocation table</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's an entry in the relocation table that is pointing to that location, so the value is being adjusted according to the load-address.  To fix the problem, you'll have to find that entry and disable it.  The simplest change is to make the entry empty so that it's skipped, as opposed to copying all following entries over this one and reducing the count.</p>\n</div>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Jan 17, 2022 at 4:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "FELIPE_RIBAS",
                    "text": "<span class=\"comment-copy\">I did not know about this table. I looked for the PE Executables format and definitions but found many different references to relocation tables. For example one in the MS-DOS Header section and another one further on. Which one should I look for? Is it this .reloc section (base relocation table)? Is there an easy way to find it with olly?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">Yes, the .reloc section.  However, you might find an easier path by choosing an instruction shortly after the relocated one, and replacing that instead.</span>",
                    "time": null
                }
            ]
        }
    ]
}