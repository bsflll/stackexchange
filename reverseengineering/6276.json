{
    "title": "Weird self-modify instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/6276/weird-self-modify-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Trying to finding the main caller of a series of nested function I ended in a switch table (or at least ollydbg says it's so) of address:</p>\n<pre><code>DD address1\nDD address2\nDD myfunction\nDD adress4\n.. AND SO ON\n</code></pre>\n<p>Where addressN are other function. Thinking that it was the routine that bother me I just fill with NOPs <code>DD myfunction</code>, but after restarting the process (and loosing the NOPS) Olly show me.</p>\n<pre><code>DD address1\nDD address2\nPOP ESP\nINC EBP\n...others instruction like the one above\nDD address4\nDD address5\n... so on\n</code></pre>\n<p>And, when I hit <kbd>F9</kbd> it just return to the <code>DD myfunction</code> shape ... I cannot understand what's going on, hope you can help me.</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "275",
    "tags": [
        "assembly",
        "ollydbg",
        "x86"
    ],
    "user": "Azazel",
    "time": "Sep 24, 2014 at 14:39",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">err, you cant edit a dword table of addresses with nops you would have to patch the function itself..   try using the cleanup plugin in olly and start again, you've most likely corrupted something..</span>",
            "time": null
        },
        {
            "user": "Azazel",
            "text": "<span class=\"comment-copy\">After restarting the process the instruction return to normality. My question is about the behavior of the DD instruction,about the fact that it seems performing a jmp to myfunction but Ollydbg detect it as \"DD myfunction\"</span>",
            "time": null
        },
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">dd = dword .. its a jump table, there will be some code most likely near by like.. mov register, offset start of table then some cmps and jmps to the table using an index or a simple jmp [eax*4 + offset start of table] or similar code.. to make it clearer the dd is NOT an instruction, mnemonic or similar, it is simply declaring that the value there is a dword which is an address of a function, it will never be executed, just jumped to or called</span>",
            "time": null
        },
        {
            "user": "Paddywhacker",
            "text": "<span class=\"comment-copy\">Your NOPs are 0x90 but the debugger is still seeing them as a jump table, a table of addresses that in this case are not addresses to anywhere that makes sense ... 0x90909090 or whatever.  So they are not being repopulated at runtime.  Except, if the code is part of the startup code for a packed or encrypted executable then it is possible that those addresses are being overwritten by unpacked code.</span>",
            "time": null
        }
    ],
    "answers_data": []
}