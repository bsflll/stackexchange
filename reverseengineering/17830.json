{
    "title": "Intel PIN (TracerPIN): adding modification of registers",
    "link": "https://reverseengineering.stackexchange.com/questions/17830/intel-pin-tracerpin-adding-modification-of-registers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically I just would like to modify the following code: <a href=\"https://github.com/SideChannelMarvels/Tracer/tree/master/TracerPIN\" rel=\"nofollow noreferrer\">https://github.com/SideChannelMarvels/Tracer/tree/master/TracerPIN</a><br/>\n(based on Intel PIN) in order to be able to modify the content of some registers at a given PC.\nFor this I just inserted the following callback at line 418 of Tracer.cpp, when the PC is 0x808104f (as a simple test):</p>\n<pre><code>if (ceip == 0x808104f) {  \n    string* dis = new string(INS_Disassemble(ins));  \n    INS_InsertPredicatedCall(ins, IPOINT_BEFORE, (AFUNPTR)changeReg,  \n        IARG_INST_PTR,  \n        IARG_CONTEXT,   \n        IARG_PTR, dis,   \n        IARG_UINT32, INS_Size(ins), IARG_END);  \n}\n</code></pre>\n<p>and finally here is my function <strong>changeReg()</strong>:</p>\n<pre><code>VOID changeReg (ADDRINT ip, CONTEXT *ctxt, string *disass, INT32 size){  \n    UINT32 edx_new_value = 0x00000ccc;  \n    UINT32 edx_value;  \n    //set the registers  \n    PIN_SetContextReg(ctxt, REG_EDX, edx_new_value);  \n    edx_value = PIN_GetContextReg(ctxt, REG_EDX);  \n    printf(\"EDX = %08x \\n\", edx_value);  \n}\n</code></pre>\n<p>and when I trace my program with my modified TracerPIN:</p>\n<pre><code>root@VirtualBox:/media/shared/E/tracerPin/test/x86#Tracer -o test_modif_register.txt -- ./testapp\n[*] Trace file test_modif_register.txt opened for writing...\nEDX = 00000ccc\nroot@VirtualBox:/media/shared/E/tracerPin/test/x86#\n</code></pre>\n<p>According to the printf(), it looks like my register has been correctly modified to 0xccc, however when I checked the .txt trace, the register EDX is still left unmodified (0x0000137), and my modification is never taken into account in the trace... any idea ?:  </p>\n<pre><code>[I]      1016       0x8081049    and edx, 0x1fff                        81 e2 ff 1f 00 00\n[I]      1017       0x808104f    mov dword ptr [0x8086ae4], 0x4f0       c7 05 e4 6a 08 08 f0 04 00 00\n[W]      1017       0x808104f    0x8086ae4 size= 4 value=        0x000004f0  \n[I]      1018       0x8081059    mov dword ptr [0x8086ac0], edx         89 15 c0 6a 08 08\n[W]      1018       0x8081059    0x8086ac0 size= 4 value=        0x00000137  \n[I]      1019       0x808105f    mov dword ptr [0x8086db0], ecx         89 0d b0 6d 08 08\n[W]      1019       0x808105f    0x8086db0 size= 4 value=        0xa5879af8\n[I]      1020       0x8081065    lea ecx, ptr [edi-0x4]                 8d 4f fc\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "770",
    "tags": [
        "instrumentation",
        "register",
        "intel"
    ],
    "user": "john_antman",
    "time": "Mar 30, 2018 at 7:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What worked for me was passing a reference to the register to my <code>changeReg()</code> function with <code>IARG_REG_REFERENCE</code>, then changing the value the reference points to.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Mar 30, 2018 at 10:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "john_antman",
                    "text": "<span class=\"comment-copy\">oh thanks manduca, it worked, you are my savior!   not sure this was clear in the specifications.</span>",
                    "time": null
                },
                {
                    "user": "manduca",
                    "text": "<span class=\"comment-copy\">In my understanding your code should have worked.  Maybe it would have if you had ended with PIN_ExecuteAt(ctx).  I have the feeling the documentation is not very clear and every release has other quirks. Still an awesome tool.</span>",
                    "time": null
                },
                {
                    "user": "john_antman",
                    "text": "<span class=\"comment-copy\">yes I also tried this PIN_SaveContext(&amp;snapshot, ctxt) and PIN_ExecuteAt(ctx) as in some examples I found on Github but I ended up with weird behaviours with TracerPIN</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is my new callback prototype: </p>\n<pre><code>if (ceip == 0x808104f) {  \n     string* dis = new string(INS_Disassemble(ins));  \n     INS_InsertPredicatedCall(ins, IPOINT_BEFORE, (AFUNPTR)changeReg,  \n     IARG_INST_PTR,  \n     IARG_REG_REFERENCE, REG_EDX,      \n     IARG_END);  \n}\n</code></pre>\n<p>And <code>changeReg()</code> function:</p>\n<pre><code>VOID changeReg (ADDRINT ip,  ADDRINT *edx) {   \n    *edx = 0x00000ccc;  \n    printf(\"EDX = %08x \\n\", (UINT32)*edx);   \n}\n</code></pre>\n</div>",
            "votes": "0",
            "user": "perror",
            "time": "Mar 30, 2018 at 10:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}