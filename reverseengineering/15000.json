{
    "title": "Which environmental variables can be used alter control flow and keep suid?",
    "link": "https://reverseengineering.stackexchange.com/questions/15000/which-environmental-variables-can-be-used-alter-control-flow-and-keep-suid",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on a challenge where it is possible to manipulate environmental variables (in C).</p>\n<p>I know that with <code>PATH</code> it is possible to execute arbitrary programs when relative path is used, for example: <code>execv(\"ls\", 0);</code></p>\n<p><code>export PATH=path/to/attackers/dir/:$PATH</code> (This works as well by changing the PATH environmental within the program's memory, e.g <code>char **envp</code>)</p>\n<p>I have read something about <code>IFS</code> but I think is only applicable on scripts.</p>\n<p><code>export IFS=/</code> (so /bin/ls will become <code>bin ls</code>)</p>\n<p>Is there any other environmental that can be used for exploitation?</p>\n<p>I was trying for example to mess with <code>PWD</code> in order to influence <code>fopen(\"file\")</code> with a file in different directory than the current but it didn't work. (the <code>fopen</code> eventually calls <code>getcwd</code> which I could not identify how exactly it operates).</p>\n<p><code>export PWD=new/pwd</code> (It changes the prompt but the <code>pwd</code> command returns the right current working directory)</p>\n<p>Operating system: Ubuntu (latest kernel)</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "93",
    "tags": [
        "c"
    ],
    "user": "Anton Paragas",
    "time": "Mar 24, 2017 at 10:36",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">most of these tricks only apply to shell scripts, not C programs</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How exactly did you set the path? Can you confirm the output of <code>pwd</code> changes?</p>\n<blockquote>\n<p><code>get_current_dir_name()</code> will <code>malloc(3)</code> an array big enough to hold the absolute pathname of the current working directory. If the environment variable <code>PWD</code> is set, and its value is correct, then that value will be returned.</p>\n</blockquote>\n<p><a href=\"https://linux.die.net/man/3/getcwd\" rel=\"nofollow noreferrer\">Source</a></p>\n<p>Which operating system do you use?</p>\n<blockquote>\n<p>Under Linux, the function getcwd() is a system call (since 2.1.92).\n         On older systems it would query /proc/self/cwd.\n  Straight from the kernel source:</p>\n</blockquote>\n<pre><code>/*\n * NOTE! The user-level library version returns a\n * character pointer. The kernel system call just\n * returns the length of the buffer filled (which\n * includes the ending '\\0' character), or a negative\n * error value. So libc would do something like\n *\n *  char *getcwd(char * buf, size_t size)\n *  {\n *      int retval;\n *\n *      retval = sys_getcwd(buf, size);\n *      if (retval &gt;= 0)\n *          return buf;\n *      errno = -retval;\n *      return NULL;\n *  }\n */\nSYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)\n{\n    int error;\n    struct path pwd, root;\n    char *page = (char *) __get_free_page(GFP_USER);\n\n    if (!page)\n        return -ENOMEM;\n\n    get_fs_root_and_pwd(current-&gt;fs, &amp;root, &amp;pwd);\n\n    error = -ENOENT;\n    spin_lock(&amp;dcache_lock);\n    if (!d_unlinked(pwd.dentry)) {\n        unsigned long len;\n        struct path tmp = root;\n        char *cwd = page + PAGE_SIZE;\n        int buflen = PAGE_SIZE;\n\n        prepend(&amp;cwd, &amp;buflen, \"\\0\", 1);\n        error = prepend_path(&amp;pwd, &amp;tmp, &amp;cwd, &amp;buflen);\n        spin_unlock(&amp;dcache_lock);\n\n        if (error)\n            goto out;\n\n        /* Unreachable from current root */\n        if (!path_equal(&amp;tmp, &amp;root)) {\n            error = prepend_unreachable(&amp;cwd, &amp;buflen);\n            if (error)\n                goto out;\n        }\n\n        error = -ERANGE;\n        len = PAGE_SIZE + page - cwd;\n        if (len &lt;= size) {\n            error = len;\n            if (copy_to_user(buf, cwd, len))\n                error = -EFAULT;\n        }\n    } else\n        spin_unlock(&amp;dcache_lock);\n\nout:\n    path_put(&amp;pwd);\n    path_put(&amp;root);\n    free_page((unsigned long) page);\n    return error;\n}\n</code></pre>\n<p>TL;DR</p>\n<p>glibc only specifies a stub looking up the PWD variable, it it is not set, the filesystem implementation has to handle the job</p>\n</div>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Mar 24, 2017 at 7:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}