{
    "title": "What does a thread function look like in assembly? (LPTHREAD_START_ROUTINE, CreateRemoteThread) [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6825/what-does-a-thread-function-look-like-in-assembly-lpthread-start-routine-crea",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-12-18 10:17:10Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/6825/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>Using <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms682437%28v=vs.85%29.aspx\" rel=\"nofollow\">CreateRemoteThread</a> we can call a specific kind of function of another process. It has to be application-defined and of type <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms686736%28v=vs.85%29.aspx\" rel=\"nofollow\">LPTHREAD_START_ROUTINE</a>.<br/>\nIf no such function does exist in the target process you have to inject your own and that's where I need your help.<br/>\nUsing <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa366890%28v=vs.85%29.aspx\" rel=\"nofollow\">VirtualAllocEx</a> and <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms681674%28v=vs.85%29.aspx\" rel=\"nofollow\">WriteProcessMemory</a> I would like to inject such a function as byte code. So I'd like to know, what such a function looks like in raw assembly.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "633",
    "tags": [
        "windows",
        "assembly",
        "byte-code"
    ],
    "user": "Forivin",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\"><a href=\"https://www.google.hu/search?q=codeproject%2Binjection\" rel=\"nofollow noreferrer\">This</a> should help, create the project in an IDE and observe it in a debugger.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This question is a little too broad to answer without more information but I'll cover some general points about what I think you're looking for. I'm also going to assume x86 calling convention on Windows for simplicity's sake.</p>\n<p>The only thing that really determines what a function \"looks like\" in assembly is its calling convention, but there's no restriction (particularly writing raw byte code) about what a function can do. In the case of using CreateRemoteThread the only restriction is that you don't corrupt the stack (which could crash the target process)</p>\n<p>So for example, I could write a function in assembly that looks like this:</p>\n<pre><code>nop\nnop\nnop\nnop\nret\n</code></pre>\n<p>And it would be 100% valid. But as far as more complicated functionality let's look at the MSDN for CreateRemoteThread:</p>\n<p><code>LPTHREAD_START_ROUTINE</code> is a #define to the following function definition:</p>\n<pre><code>DWORD WINAPI ThreadProc(\n  _In_  LPVOID lpParameter\n);\n</code></pre>\n<p>Where WINAPI is another #define to the stdcall calling convention. You can check the wiki for it <a href=\"http://en.wikipedia.org/wiki/X86_calling_conventions#stdcall\" rel=\"nofollow\">here</a> but the important part (if you're writing raw assembly\") is that for WINAPI/stdcall functions the callee function cleans up the stack, which means the function that you write which runs in the remote process will have to cleanup its parameter(s). This is done with the ret N set of instructions. For example, if you have:</p>\n<pre><code>WINAPI foo(int x)\n</code></pre>\n<p>Then the foo will have to clean up one parameter on the stack, so the assembly for this function will end with a <code>ret 4</code> instruction, because there was one parameter which means 4 bytes need to be cleaned up on the stack.</p>\n<p>Similarly, if you had:</p>\n<pre><code>WINAPI bar(int x, int y)\n</code></pre>\n<p>Then the assembly will end with a <code>ret 8</code> instruction, because there are 2 parameters = 8 bytes now. It's also important to note that if I had something like:</p>\n<pre><code>WINAPI foobar(char x, char y, int z)\n</code></pre>\n<p>It will still end in a <code>ret 0C</code>. Even though the char params only have one byte of data the stack will still be aligned in 4 byte increments.</p>\n<p>Going back to the API for CreateRemoteThread you can see that one of the paremeters is</p>\n<pre><code>LPVOID lpParameter\n</code></pre>\n<p>Which is the pointer that gets passed a parameter to your remote function. This means that in your \"remote\" function you'd have to clean up one parameter on the stack using a ret 4 instruction. If you perform some tricks you can write your WINAPI function in C code, have the compiler compile it for you (makes it easier to code and you don't have to worry about cleanup yourself), and find the function at run time to copy it off.</p>\n</div>",
            "votes": "3",
            "user": "Fewmitz",
            "time": "Dec 14, 2014 at 18:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Forivin",
                    "text": "<span class=\"comment-copy\">Thank you, this was very helpful. So, am I correct, that the function may look like this? <a href=\"http://pastebin.com/rz4cep7f\" rel=\"nofollow noreferrer\">pastebin.com/rz4cep7f</a> Also, can you give me an advice on were to learn the basics about raw assembly? It seems to be quite different from inline assembly and the assembly returned by <a href=\"http://assembly.ynh.io/\" rel=\"nofollow noreferrer\">assembly.ynh.io</a></span>",
                    "time": null
                },
                {
                    "user": "Forivin",
                    "text": "<span class=\"comment-copy\">I'm also wondering if I need a near or far return. <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_280.html\" rel=\"nofollow noreferrer\">x86.renejeschke.de/html/file_module_x86_id_280.html</a></span>",
                    "time": null
                },
                {
                    "user": "Fewmitz",
                    "text": "<span class=\"comment-copy\">Near return. Far returns are only used to switch between segments, which in modern OS isn't something you (usually) have to worry about in userspace. Also, in your assembly you're popping the parameter to ECX, which means when you do the RET 4 at the end you will had incremented the stack by one DWORD too many. Instead of a pop you would want to do something like mov ecx,[esp]</span>",
                    "time": null
                },
                {
                    "user": "Fewmitz",
                    "text": "<span class=\"comment-copy\">As far as learning Assembly, the best source is really going to be stepping through functions in a debugger. The more you see how contructs, the stack, etc are laid out when you write code an functions the more obvious it will become. The link you put in your comment is in AT&amp;T format which is different than what you have in the pastebin. Both formats result in the same execution but they're displayed differently. If you attach Windbg and debug your assembly that way it will be in Intel format which may clear up some confusion</span>",
                    "time": null
                },
                {
                    "user": "Fewmitz",
                    "text": "<span class=\"comment-copy\">Though it might also be helpful to check out a book like Practical Malware Analysis; by reverse engineering some stuff you'll get used to looking at assembly and therefore have a better understanding of what it should look like if you write it</span>",
                    "time": null
                }
            ]
        }
    ]
}