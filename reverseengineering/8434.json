{
    "title": "Automatically list of mapped memory locations(and their attributes) of a running process",
    "link": "https://reverseengineering.stackexchange.com/questions/8434/automatically-list-of-mapped-memory-locationsand-their-attributes-of-a-running",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to obtain the memory map of a process. One way I can think of doing this is to attach Olly/Immunity Debugger to the process and copy the memory map to the clipboard. However, this is probably not a good idea when I'd like to repeat this multiple times consecutively. Is there a tool similar to <a href=\"https://technet.microsoft.com/en-us/sysinternals/bb896656.aspx\" rel=\"nofollow\">ListDLLs</a> that can be used to achieve this? I noticed procdump can be used to dump the memory of a process but I don't need a memory dump: I just need a list of valid memory locations.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "memory",
        "dumping"
    ],
    "user": "dnivra",
    "time": "Mar 10, 2015 at 23:38",
    "comments": [
        {
            "user": "Brendan Dolan-Gavitt",
            "text": "<span class=\"comment-copy\">This seems pretty similar to <a href=\"http://reverseengineering.stackexchange.com/questions/8297/proc-self-maps-equivalent-on-windows/8299#8299\" title=\"proc self maps equivalent on windows\">reverseengineering.stackexchange.com/questions/8297/â€¦</a> (or at least, I think the solution given would also work here)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Mark Russinovich's <a href=\"https://technet.microsoft.com/en-US/sysinternals\" rel=\"nofollow noreferrer\">SysInternals</a> suite contains a utility named <a href=\"https://technet.microsoft.com/en-us/library/dd535533.aspx\" rel=\"nofollow noreferrer\">VMMap</a>, which can be used to view the memory layout of a process and/or dump the information in various formats.</p>\n<p>As Brendan mentioned, an answer in <a href=\"https://reverseengineering.stackexchange.com/questions/8297/proc-self-maps-equivalent-on-windows/8299#8299\">/proc/self/maps equivalent on Windows</a> shows how to obtain the information via calls to <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366907%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">VirtualQueryEx()</a>. So you could easily whip up your own customised utility by writing a few lines of C/C++.</p>\n<p>Note: the memory layout is not static. Stacks can grow, sections can be unmapped, blocks allocated or freed, reserved space be committed, valid pages be made inaccessible. </p>\n<p>Depending on the goal of the operation it may be best to integrate the querying of memory layout info with the process that uses it, which makes it easier to achieve the desired accuracy. Things to ponder here are caching (for performance) versus snapshot semantics (to achieve consistent views).</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>execute this bat file  you will need windbg in path </p>\n<p>it attaches to a running process (hard coded as calc.exe you can script it with %1) dumps the memory map filtered by page_readonly and mapped file and detaches automatically when quitting and sleeps for 10 seconds before repeating and pipes (appends its output to a file of choice that can be processed with your favorite text processing tool)</p>\n<pre><code>:begin\necho Date and Time of Address Dump = %date%%time% &gt;&gt; address.text\ncdb -pd -c \"!address -1 -F:PAGE_READONLY,FILEMAP;q\" -pn calc.exe &gt;&gt; address.text\nsleep 10\ngoto begin\n</code></pre>\n<p>you can use any test processing tool to parse the output</p>\n<pre><code>:grep -iE  \"Date and Time of Address Dump | 80000 \" address.text\nDate and Time of Address Dump = 11/03/201512:25:21.01\n   80000    83000     3000 MEM_MAPPED  MEM_COMMIT  PAGE_READONLY MemoryMappedFile \"PageFile\"\nDate and Time of Address Dump = 11/03/201512:25:23.15\n   80000    83000     3000 MEM_MAPPED  MEM_COMMIT  PAGE_READONLY MemoryMappedFile \"PageFile\"\nDate and Time of Address Dump = 11/03/201512:25:26.82\n   80000    83000     3000 MEM_MAPPED  MEM_COMMIT  PAGE_READONLY MemoryMappedFile \"PageFile\"\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Mar 11, 2015 at 7:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}