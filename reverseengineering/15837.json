{
    "title": "How to debug DLL injection in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/15837/how-to-debug-dll-injection-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Recently, I've been cracking a crackme DLL, and I need to inject it into a process, to see if it worked.</p>\n<p>However, I've ran into a problem. I cannot seem to find how to debug DLL injection inside of ida. I've tried Debugger-&gt;Attach to Process, but that doesn't seem to work.</p>\n<p>Any ideas?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "debugging",
        "dll",
        "injection"
    ],
    "user": "Verideth",
    "time": "Jul 17, 2017 at 1:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One possibility: Insert a \"code cave\" into your hosting process, and let it load the DLL. For how to do it in a \"generic\" way in x64, look <a href=\"https://www.tophertimzen.com/blog/windowsx64Shellcode/\" rel=\"nofollow noreferrer\">here</a>. An important step of this is how to get the address of the <code>kernel32.dll</code>:</p>\n<pre><code>get_OS_DllAddresses:\nmov rax, gs:[60h]               ; PEB\nmov rax, [rax + 18h]            ; PEB::Ldr\nmov rax, [rax + 20h]            ; PEB::Ldr.InMemoryOrderModuleList\nmov rax, [rax]                  ; 1st entry\nmov r15, [rax + 20h]            ; ntdll.dll base address!\nmov rax, [rax]                  ; 3nd entry\nmov rax, [rax + 20h]            ; kernel32.dll base address!\nret\n</code></pre>\n<p><a href=\"http://terminus.rewolf.pl/terminus/structures/ntdll/_PEB_combined.html\" rel=\"nofollow noreferrer\">PEB</a> → <a href=\"http://terminus.rewolf.pl/terminus/structures/ntdll/_PEB_LDR_DATA_combined.html\" rel=\"nofollow noreferrer\">PEB::Ldr</a> → walk the <code>InMemoryOrderModuleList</code> linked list (<a href=\"http://terminus.rewolf.pl/terminus/structures/ntdll/_LDR_DATA_TABLE_ENTRY_combined.html\" rel=\"nofollow noreferrer\">LDR_DATA_TABLE_ENTRY</a>).</p>\n<p>After running this snippet, you have in <strong><code>rax</code></strong> the address of <code>kernel32.dll</code> (correctly also in the case of ASLR), and in <strong><code>r15</code></strong> the address of <code>ntdll.dll</code>.</p>\n<p>If you study the example given in the above link, you learn how to extract the necessary <strong><code>LoadLibrary</code></strong> calls (for your DLL to be checked), and the <strong><code>GetProcAddress</code></strong> calls, in case your DLL exports API calls.</p>\n<p>A simple way to get the \"shellcode\" bytes is to make a little Assembler project e.g. in VisualStudio and let it create the binary code for you.</p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jan 27, 2023 at 8:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">This seems a little odd. We start out with the <code>InMemoryOrderModuleList</code>, then seem to proceed with the <code>InInitializationOrderLinks</code>? Not that I'm saying that this can't be done, but isn't this relying a bit too much on empirical data? <code>InLoadOrderModuleList</code> always has <code>your.exe</code> -&gt; <code>ntdll.dll</code> -&gt; <code>kernel32.dll</code> -&gt; <code>kernelbase.dll</code>, but the memory order technically depends on the base address.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>dynamic debugging for dll you should use x64dbg or ollydbg. both can load dll to execute and debug.</p>\n</div>",
            "votes": "-2",
            "user": "yufeng",
            "time": "Jul 19, 2017 at 3:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}