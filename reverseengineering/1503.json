{
    "title": "Reverse engineer an old DOS QBasic executable",
    "link": "https://reverseengineering.stackexchange.com/questions/1503/reverse-engineer-an-old-dos-qbasic-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently decided to try my hand at reverse engineer an old DOS text based game that was coded in QBasic.</p>\n<p>I found some info online about old DOS games disassembly but mostly for Wacom compiled C/C++ binaries, but nothing on QBasic. I know that getting the original Basic code is probably impossible, but going disassembling the file with nasm I didn't get any useful info either...</p>\n<p>Any pointers?</p>\n</div>",
    "votes": "13",
    "answers": 3,
    "views": "9k",
    "tags": [
        "disassembly",
        "decompilation",
        "x86",
        "binary-analysis",
        "dos-exe"
    ],
    "user": "ricardojoaoreis",
    "time": "Apr 2, 2013 at 21:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li>debug with <a href=\"http://vogons.zetafleet.com/viewtopic.php?t=7323\">DOSBox debug-enabled builds</a></li>\n<li>disassemble with IDA\n<ul>\n<li>try to compile your own empty qbasic EXE, and compare - this will help to telll the compiler code from the actual code of your game. You might do that automatically by creating a FLIRT-like signature of the empty EXE then import in your own EXE in IDA.</li>\n</ul></li>\n</ul>\n</div>",
            "votes": "9",
            "user": "Ange",
            "time": "Apr 2, 2013 at 17:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Apparently a decompiler for DOS Basic executables <a href=\"http://02c1289.netsolhost.com/\">already exists</a>.</p>\n<p>Going by <a href=\"http://02c1289.netsolhost.com/index.htm#SAMPLES\">examples</a> from that page, quite a lot of the code can be recovered. I guess it used some form of P-code, or there was some additional metadata.</p>\n<p>Descriptions of the decompiler's <a href=\"http://02c1289.netsolhost.com/newdeb.htm#ERRORS\">error messages</a> can give some hints about various functions implemented by the Basic runtime.</p>\n</div>",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "Apr 2, 2013 at 17:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found the debug-enabled builds a bit unwieldy. But I found the combination of DOSBox and IDA quite nice using <a href=\"https://github.com/wjp/idados\">idados</a>. It's an IDA Pro plugin which allows you to control the debugger of a debug-enabled DOSBox build from within IDA similar to how you can control a debuggee running one of the other supported remote debuggers.</p>\n<p>Given the existing answer by Igor this is of course like using a kitchen knife instead of a scalpel, but I thought I should mention it, as it is a <em>more generic method</em> for reversing DOS programs.</p>\n<p><strong>NB:</strong> There used to be an even older, but I think unrelated, plugin of the same name which hasn't been maintained by its original author. I still have a copy of it on my disk (at home), but the website seems to no longer exist.</p>\n</div>",
            "votes": "5",
            "user": "0xC0000022L",
            "time": "Apr 2, 2013 at 19:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Well, the decompiler I mention is not public so there's nothing wrong with the good old debugging.</span>",
                    "time": null
                }
            ]
        }
    ]
}