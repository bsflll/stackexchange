{
    "title": "Double constructor when reversing Unity game",
    "link": "https://reverseengineering.stackexchange.com/questions/31692/double-constructor-when-reversing-unity-game",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When reversing Unity dll, the decompiler (i.e. dnSpy) sometimes would create a class with 2 constructors, which are mostly identical apart from some specific field set / not set.</p>\n<p>Here is an example:</p>\n<pre><code>public TurretShootOrder(IGalaxyTarget target, string sectionName, GalaxyWeaponDefinition galaxyWeaponDefinition, float startShootTime, Vector3 startRandomDispersion, float startImpactTime, float endShootTime, Vector3 endRandomDispersion, float endImpactTime, int shootCount, float missProportion, int flags = 0, int salvoId = 0, int salvoTotalShootCount = 0, int inSalvoFirstShootIndex = 0)\n{\n\n\n    this.target = target;\n    this.sectionName = sectionName;\n</code></pre>\n<p>AND:</p>\n<pre><code>public TurretShootOrder(IGalaxyTarget target, IGalaxyModuleSection targetSection, GalaxyWeaponDefinition galaxyWeaponDefinition, float startShootTime, Vector3 startRandomDispersion, float startImpactTime, float endShootTime, Vector3 endRandomDispersion, float endImpactTime, int shootCount, float missProportion, int flags = 0, int salvoId = 0, int salvoTotalShootCount = 0, int inSalvoFirstShootIndex = 0)\n{\n    this.target = target;\n    this.sectionName = string.Empty;\n</code></pre>\n<p>As you can see the second implementation doesn't set the sectionName on initialization. Otherwise these constructors are identical.</p>\n<p>So, how do I combine these 2 constructors together?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "84",
    "tags": [
        "decompilation",
        "c#"
    ],
    "user": "Irbis77",
    "time": "Mar 20, 2023 at 11:24",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">What do you mean, \"how do you combine them together\"? \"Combining\" functions, regardless of whether they are identical or not, is not generally something that a decompiler does.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">It is common in OO-languages to have classes with multiple constructors. So there is no need to \"combine\" them.</span>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<span class=\"comment-copy\">@RolfRolles Well, these are 2 constructors for the same class. As you can see from the names. They are not functions, so I can't simply rename one of them. I am not aware of any technique to \"overload\" constructors either. Since the question. I mean, I don't need necessarily \"combine\" them in a sense replacing both of them with a generic constuctor containing both definitions, but my question is really what do I do in this case - split the class in to 2? Any other solutions?</span>",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "<span class=\"comment-copy\">@Robert Hmm, if I keep both of them, then I get: \"The call is ambiguous between the following methods or properties... \" during the compilation. And as I said I can't rename one of them since it is a constructor. So, just wonder how I initialise this class now.</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">The issue comes from the fact that the compiler doesn't know what type the <code>null</code> is in the second parameter: it could either be <code>IGalaxyModuleSection</code> or <code>string</code>. C# is not my forte, but in C++, I would resolve this by putting a cast on the <code>null</code> parameter, like <code>(IGalaxyModuleSection*)nullptr</code>. I don't know if the same trick would work in C#.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on the discussion in comments and further investigation, when the class is instantiated like this:</p>\n<pre><code> TurretShootOrder turretShootOrder2 = new TurretShootOrder(firstFakeTarget, null, ....\n</code></pre>\n<p>then it is neccessary to decide, which type the second parameter has in this case. Is it String or IGalaxyModuleSection?</p>\n<p>In the above example according to C# rules it can't be a String. As then it won't be equal to null, but to \"\" (Empty.String). Which points to the type of that second parameter, which in this case is IGalaxyModuleSection.</p>\n<p>Thus, there is a missing variable introduction in the code where the class got instantiated. So, the (simplified) solution could look like this:</p>\n<pre><code> IGalaxyModuleSection targetSection = null;\n     TurretShootOrder turretShootOrder2 = new TurretShootOrder(firstFakeTarget, targetSection, .\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Irbis77",
            "time": "Mar 20, 2023 at 19:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Please mark your answer as accepted.</span>",
                    "time": null
                }
            ]
        }
    ]
}