{
    "title": "What is the correct disassembly for ARM opcode E1F322D1?",
    "link": "https://reverseengineering.stackexchange.com/questions/10609/what-is-the-correct-disassembly-for-arm-opcode-e1f322d1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm adapting the <a href=\"https://github.com/uxmal/reko\" rel=\"nofollow\">reko decompiler</a> to use Capstone for its disassembler, instead of rolling my own. I'm using the .NET bindings provided by <a href=\"https://github.com/9ee1/Capstone.NET\" rel=\"nofollow\">Capstone.NET</a>.</p>\n<p>The strategy is to replace the old ARM disassembler with the Capstone disassembler and then run the old unit tests to make sure nothing broke. I'm at a point where most test are passing, but the opcode <code>E1F322D1</code>, which both the old reko disassembler and ODA disassemble to:</p>\n<pre><code> ldrsb r2, [r3, #33]!\n</code></pre>\n<p>But, Capstone responds with:</p>\n<pre><code>ldrsb r2,[r3,#&amp;221]!\n</code></pre>\n<p>I don't have other disassemblers handy, so I'm uncertain who to trust! </p>\n<p>What's the correct disassembly?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "823",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "John Källén",
    "time": "Aug 11, 2015 at 18:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA agrees with the first one:</p>\n<p><code>LDRSB           R2, [R3,#33]!</code></p>\n<p>Capstone might be trying to display something like #0x21, which would be equivalent, but it seems that something went wrong.</p>\n</div>",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Aug 11, 2015 at 18:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Indeed, after some further troubleshooting I narrowed down the problem to Capstone.NET and reported it. Hopefully a fix will be forthcoming soon.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"http://bear.ces.cwru.edu/eecs_382/ARM7-TDMI-manual-pt2.pdf\" rel=\"nofollow noreferrer\">http://bear.ces.cwru.edu/eecs_382/ARM7-TDMI-manual-pt2.pdf</a>:</p>\n<p><img alt=\"LDRSB\" src=\"https://i.sstatic.net/dygTF.png\"/></p>\n<p><code>E1F322D1</code> equals <code>11100001111100110010001011010001</code> in binary.</p>\n<p>Your question is specific to the offset, so we can examine the last dozen bits of that binary string with regard to the decomposition rules in the screenshot above:</p>\n<pre><code>... Offset 1 SH 1 Offset\n...  0010  1 10 1  0001\n</code></pre>\n<p>Thus, the high nibble is <code>0010</code> and the low nibble is <code>0001</code>. If we combine them, we get <code>00100001</code> in binary, or <code>33</code> in decimal.</p>\n<p>So the correct disassembly is <code>ldrsb r2, [r3, #33]!</code>.</p>\n</div>",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Aug 11, 2015 at 18:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}