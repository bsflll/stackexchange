{
    "title": "Unexpected memory value MOVed from text segment to register in Windows x86 32-bit program",
    "link": "https://reverseengineering.stackexchange.com/questions/12518/unexpected-memory-value-moved-from-text-segment-to-register-in-windows-x86-32-bi",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am debugging a 32-bit program on a 64-bit MS Windows 7 using IDA Pro 6.8 as seen in the image below:<a href=\"https://i.sstatic.net/hhfGI.png\" rel=\"nofollow noreferrer\"><img alt=\"IDAproScreenshot\" src=\"https://i.sstatic.net/hhfGI.png\"/></a></p>\n<p>The instruction highlighted in the trace window (upper-left part of screen-shot) is supposed to MOV a word from some memory address in the <code>.text</code> segment (at the address given by the <code>EDX</code> register), into the <code>EBX</code> register.</p>\n<p><code>EDX = 0x013D4021</code> and the bytes stored at this address are <code>50 53 51 52</code>, shown in the HexView of IDA in the lower half of the screen-shot above. </p>\n<p>Therefore, after executing the highlighted instruction <code>mov ebx, [edx]</code> I was expecting that <code>EBX = 0x52515350</code>. </p>\n<p>However, as you can see in the Result column of the trace window this is not true because <code>EBX = 0x525153CC</code>. </p>\n<p>Can anyone explain why the least significant byte in <code>EBX</code> is equal to <code>CC</code> instead of <code>50</code>? Is it a bug in IDA or is it caused by the OS?</p>\n<p>NOTE: I tried the same program with IDA Pro 6.9 and encountered the same behavior.</p>\n<p><strong>UPDATE:</strong> If you also have this issue and still want to debug the program, use hardware breakpoints. Hardware breakpoints do not modify the code like in the example above. IDA Pro allows enabling hardware breakpoints: <a href=\"http://hex-rays.com/products/ida/support/idadoc/1407.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/support/idadoc/1407.shtml</a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "177",
    "tags": [
        "ida",
        "windows",
        "debugging",
        "x86",
        "memory"
    ],
    "user": "Benny",
    "time": "Apr 26, 2016 at 9:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>CC</code> is a single-byte encoding of <code>int 3</code>, which is the standard way of breaking to the debugger. In particular, debuggers often use it for break points and for single-stepping: they simply replace the first instruction byte with <code>CC</code> and wait for the interrupt. Then they write back the original instruction byte.</p>\n<p>The hexdump of the memory area around <code>[edx]</code> definitely looks like code, and the bytes loaded into <code>ebx</code> look like <code>push</code> opcodes. So it seems reasonable to suppose that either IDA is playing around with <code>int 3</code> or someone else does... If your target program is aliasing memory then this could explain the whole confusion.</p>\n</div>",
            "votes": "1",
            "user": "DarthGizka",
            "time": "Apr 24, 2016 at 17:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Especially, as you can see in your screenshot how <code>edx</code> has the address of <code>sub_13D4021</code>. I bet you have a breakpoint on that subroutine, and when you step over your <code>mov ebx, [edx]</code>, IDA sets the breakpoint (storing <code>0xcc</code> at that memory location), executes one instruction so the breakpoint gets loaded into <code>ebx</code>, and restores the memory after the single step.</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Note to people who also have this issue and still want to debug the program: Use hardware breakpoints, they do not modify the code like in the example above. IDA Pro allows enabling hardware breakpoints: <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1407.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/support/idadoc/1407.shtml</a></span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">see also \"Use hardware temporary breakpoints\" in Debugging Options.</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">CC and CD are often used for debugging. <a href=\"http://stackoverflow.com/q/370195/995714\">When and why will an OS initialise memory to 0xCD, 0xDD, etc. on malloc/free/new/delete?</a></span>",
                    "time": null
                }
            ]
        }
    ]
}