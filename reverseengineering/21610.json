{
    "title": "Trouble when reverse engineering a industrial robot software in order to get some values",
    "link": "https://reverseengineering.stackexchange.com/questions/21610/trouble-when-reverse-engineering-a-industrial-robot-software-in-order-to-get-som",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For the bit of background, I'm a robotic engineer. \nRobotics manufactures hide some parameters of their robots in order to avoid their competition. Now, I need these data to compute the dynamics model of the robot. I'm working on establishing an ideal \"pathfinder\" in term of energy consumption.</p>\n<p>Basically, I have a .dat file gathering all the parameters I want, but I don't know \"which one\" is \"which one\".</p>\n<p>I've copied the code from the robot and dissasembled it using Ida pro. Now, I have some pseudo code that I analyse.</p>\n<pre><code>  FILE *__cdecl CDynamicData::loadRobcorFile(CDynamicData *this, char \n\n*filename, unsigned __int16 a3)\n{\n  int v3; // eax@4\n  const char *v4; // ebx@6\n  int v5; // eax@6\n  signed int v6; // edx@6\n  int v7; // eax@7\n  int v8; // eax@8\n  const char *v9; // ebx@11\n  int v10; // eax@11\n  signed int v11; // edx@11\n  int v12; // eax@12\n  int v13; // eax@13\n  signed int v14; // ebx@16\n  int v15; // eax@16\n  signed int v16; // edx@16\n  int v17; // eax@19\n  signed int v18; // edx@19\n  int v19; // eax@20\n  int v20; // eax@25\n  int i; // esi@28\n  float v22; // ST34_4@31\n  int v23; // eax@32\n  int v24; // edi@34\n  int v25; // esi@35\n  float v26; // ST34_4@38\n  FILE *result; // eax@41\n  int v28; // [sp+28h] [bp-400h]@27\n  int nbParam; // [sp+2Ch] [bp-3FCh]@27\n  int v30; // [sp+30h] [bp-3F8h]@34\n  char s; // [sp+40h] [bp-3E8h]@29\n  char src; // [sp+140h] [bp-2E8h]@4\n  char v33; // [sp+240h] [bp-1E8h]@30\n  int v34; // [sp+340h] [bp-E8h]@23\n  int v35; // [sp+3A0h] [bp-88h]@23\n  char v36; // [sp+3B8h] [bp-70h]@23\n  char v37; // [sp+3C0h] [bp-68h]@23\n  char v38; // [sp+3C8h] [bp-60h]@23\n  int v39; // [sp+3D4h] [bp-54h]@23\n  FILE *stream; // [sp+3ECh] [bp-3Ch]@1\n  void *v41; // [sp+3F0h] [bp-38h]@1\n  int v42; // [sp+3F4h] [bp-34h]@1\n  double v43; // [sp+3F8h] [bp-30h]@23\n  double value; // [sp+400h] [bp-28h]@29\n  int v45; // [sp+408h] [bp-20h]@4\n  int indice; // [sp+40Ch] [bp-1Ch]@27\n  int v47; // [sp+410h] [bp-18h]@25\n  int v48; // [sp+414h] [bp-14h]@32\n\n  stream = 0;\n  v42 = 256;\n  readIntValues((CFileParser *)&amp;stream, \"$DYN_DAT\", \"REAL $DYN_DAT[%d]\", &amp;src, 1, &amp;v47);\n  v20 = operator new[](8 * v47, &amp;std::nothrow);\n  *((_DWORD *)this + 3) = v20;\n\n\n  v28 = *((_DWORD *)this + 3);\n  nbParam = v47;\n  indice = 0;\n  if ( v47 &gt; 0 )\n  {\n    i = 0;\n    do\n    {\n      CFileParser::getLine((CFileParser *)&amp;stream, &amp;s);\n      if ( sscanf(&amp;s, \"$DYN_DAT[%d]=%lf\", &amp;indice, &amp;value) != 2 )\n\n      { // Can't acquire data\n        snprintf(&amp;v33, 0x100u, \"%s konnte nicht gelesen werden\", \"$DYN_DAT[%d]=%lf\");\n        extended_internalError(\n      }\n      v22 = value;\n      *(double *)(v28 + 8 * indice - 8) = v22;\n      ++i;\n    }\n    while ( nbParam != i );\n  }\n</code></pre>\n<p>Basically, I don't understand the meaning of:</p>\n<pre><code>  *((_DWORD *)this + 3) = v20;\n</code></pre>\n<p>and:</p>\n<pre><code>      *(double *)(v28 + 8 * indice - 8) = v22;\n</code></pre>\n<p>Do you have any ideas ?</p>\n<p>So far, I think it's a pointer of pointer, but I don't understand \"the meaning\" of it because it seems like v28 is a \"local variable\" with unaloccated space ?</p>\n<p>Here is the \"pseudo code\" of the constructor of the object DynDat:</p>\n<pre><code>int __cdecl CDynamicData::CDynamicData(int a1)\n{\n  int result; // eax@1\n\n  result = a1;\n  *(_BYTE *)a1 = 0;\n  *(_DWORD *)(a1 + 4) = 0;\n  *(_DWORD *)(a1 + 8) = 0;\n  *(_DWORD *)(a1 + 12) = 0;\n  return result;\n}\n</code></pre>\n<p>Bonus question: Do you have any idea of the most efficient way to trace back the parsing and use of some values ?</p>\n<p>Kind Regards,</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "280",
    "tags": [
        "ida",
        "c++",
        "c",
        "static-analysis"
    ],
    "user": "Gautier A.",
    "time": "Jul 4, 2019 at 14:17",
    "comments": [
        {
            "user": "eric.m",
            "text": "<span class=\"comment-copy\">Pointer arithmetic is the trick. In <code>*((_DWORD *)this + 3) = v20</code>, <code>this</code> is a pointer, so it's actually adding <code>3*4 = 12</code> to the pointer. By looking at the constructor, this means it is assigning <code>v20</code> to the fourth field of that class.</span>",
            "time": null
        },
        {
            "user": "eric.m",
            "text": "<span class=\"comment-copy\">Also <code>v28</code> is not unallocated space; it's being assigned as <code>v28 = *((_DWORD *)this + 3);</code>, which was previously assigned to <code>v20</code>, which was previously initialized with <code>operator new[](8 * v47, &amp;std::nothrow);</code></span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">a fleet look says it is allocating  memory and saving the pointer to allocated memory in a sturcts third member (this is a struct ) try defining one  also collapse all thos @23,@24 etc into an array of bytes/ints/sometype</span>",
            "time": null
        },
        {
            "user": "Gautier A.",
            "text": "<span class=\"comment-copy\">Ok, I think I understand it better, thank you ! Basically, so far, from what I see,  the constructor assign pointer to differents allocated memory space of type double, with all the differents data readen</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the v20 stuff is simply this-&gt;mem = new();  where this is a structure of some sort</p>\n<p>the dynamicdata constructor you posted is actually filling up a struct with 0</p>\n<p>you need to change the int a1 to struct foo* a1 </p>\n<p>prior to that you need to define the struct in ida </p>\n<p>so since it is returning the struct pointer you need to change the return value also as struct foo*</p>\n<p>try compiling this code and decompiling it in ida and you will see the decompilation is exactly similar to what you posted </p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;memory.h&gt;\n\ntypedef struct _SOMESTRUCT {\n    unsigned int a;\n    unsigned int b;\n    unsigned int c;\n    unsigned int d;\n}Sostr,*PSostr;\n\nPSostr foo( PSostr blah) {\n\n    blah-&gt;a = 0;\n    blah-&gt;b = 0;\n    blah-&gt;c = 0;\n    blah-&gt;d = 0;\n    return blah;\n}\n\nint main (void)\n{\n    Sostr temp = {0xdeadbeef,0xdeadbeef,0xdeadbeef,0xdeadbeef};    \n    printf(\"%08x %08x %08x %08x\\n\" , temp.a,temp.b,temp.c,temp.d);\n    foo(&amp;temp);\n    printf(\"%08x %08x %08x %08x\\n\" , temp.a,temp.b,temp.c,temp.d);\n    return 0;    \n}\n</code></pre>\n<p>googling $DYN_DAT appears to turn out lots of info including a .dat file whose data shows $DYN_DAT[] is an array of floats/doubles </p>\n<p>so basically it opens the file and checks for the first entry $REAL_DYN_DAT[XXX]  where XXX is the size of all $DYN_DAT entries</p>\n<p>allocates XXX * 8  size of memory \nparses the $DYN_DAT entries line by line and stores all the DOuble values it has read </p>\n<p>the file appears to be looking like this </p>\n<pre><code>REAL $DYN_DAT[xxx] this is the size of all $DYN_DAT\n$DYN_DAT[1]=0.xxxxx\n$DYN_DAT[2]=0.yyyyy\n$DYN_DAT[3]=1.zzzzz\n$DYN_DAT[4]=1.aa\n$DYN_DAT[5]=0.mmmm ........ $DYN_DAT[xxx} = d.efghijk\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jul 4, 2019 at 20:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Gautier A.",
                    "text": "<span class=\"comment-copy\">I think I get it better right now, thank you !  Basically it's reading al the differents data in differents memory space. The structure is then pointing to the differents memories the function allocated ? So far, that's what I think. I also think there's 2 array \"of string\" and 2 array of double so far, but I might be wrong. Anyway, thank you for  your time !</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorry for posting in Answer section (but i can't post comments without a reputation &gt;= 50)</p>\n<p>so after using google a while my knowlege is: its a KUKA robot, $DYN_DAT is part of the $robocor.dat (which also contain other Arrays/Vars) - <a href=\"http://www.wtech.com.tw/public/download/manual/kuka/krc2/System_Variables_manual.pdf\" rel=\"nofollow noreferrer\">http://www.wtech.com.tw/public/download/manual/kuka/krc2/System_Variables_manual.pdf</a>: \"Contains the model data of the robot, which are required for acceleration\nadaptation, the higher motion profile and the calculation of kinetic energy\n(moments of inertia, friction values, etc.)\" so $DYN_DAT is an Array of REAL aka double/float64 values and some of them are known - infereable by combining serveral docs spreaded over the internet, its not clear to me if the $DYN_DAT Array is of same and equal meaning for every type of KUKA robot</p>\n<p>and i understand that the content of $DYN_DAT is not full documented, and that is what you want</p>\n<p>Question:</p>\n<p>The given decompiled (always impressed by hex-rays results) code looks like an textfile parser or something, and i don't think that parsing a textfile is your problem here, or?\ncan you provide us with a sample of the $robocor.dat (pastebin.com) to make it clear what we've really got to base on</p>\n<p>Ideas:</p>\n<p>If im right (and it is an textfile and parsing is no problem) the next thing will be to find out whos using what parts of the $DYN_DAT:</p>\n<p>there are several \"attack strategies\" available but \"I've copied the code from the robot and dissasembled\" makes i a little bit hard</p>\n<ol>\n<li>define a c-header with a fake class that can be loaded into IDA with File/Load file, you can build test project using your fake class to see if the memory layout fits the one in the reverse code</li>\n<li>does that mean you can't debug the code running in IDA</li>\n<li>Is there an Emulation System cabable of running on pure Windosw/Linux or something?</li>\n<li>What tools are using the $robocore/$DYN_DAT - maybe a simpler teaching tool or something is easier to reverse</li>\n<li>32 or 64bit - i think your code is 32bit</li>\n</ol>\n<p>Crazy idea: What about a small Challenge homepage, with a selection of KUKA/Robot-Types which shows your current knowledege of the $DYN_DAT line by line, add the ability to upload $robocor.dat files - make it a crowd problem, post it on reddit/serveral KUKA forums, reach faster information from others</p>\n<p>Nice and small tutorial about C++ reversing\n<a href=\"https://blog.0xbadc0de.be/archives/67\" rel=\"nofollow noreferrer\">https://blog.0xbadc0de.be/archives/67</a></p>\n<p>memory layout description etc.</p>\n<pre><code>static_assert(sizeof(int) == 4, \"wrong size\"); // are we 32bit\ntypedef unsigned int _DWORD;\nstatic_assert(sizeof(double*) == sizeof(_DWORD));\n\n//1. find allocation(new) of CDynamicData then you know how many (vtable+)member-bytes the class containts\n// give IDA a header with the class then is hex-rays able to give you even better results\n\n#pragma pack(push,1)\nclass CDynamicData\n{\npublic:\n    //already known\n    unsigned char unknown0 = 0;\n    unsigned char unknown1 = 0;\n    unsigned char unknown2 = 0;\n    unsigned char unknown3 = 0;\n    _DWORD unknown4 = 0;\n    _DWORD unknown5 = 0;\n    double* dyn_dat_values = nullptr;\n    //unsigned char unknown6[x] -&gt; fill that up\n\n    CDynamicData()\n    {\n       unknown0 = 0;\n       unknown4 = 0;\n       unknown5 = 0;\n       dyn_dat_values = 0;\n    }\n};\n#pragma pack(pop)\n\nvoid test()\n{\n    assert(offsetof(CDynamicData, dyn_dat_values) == 12);\n\n    CDynamicData dd;\n    void* _this = &amp;dd;\n\n    int v42 = 123456; // readIntValues...\n\n    double* v20 = new (std::nothrow) double[v42];\n\n    //*((_DWORD *)this + 3) = v20;\n    assert((char*)&amp;dd.dyn_dat_values == (char*)((_DWORD *)_this + 3));\n    dd.dyn_dat_values = v20;\n\n    double* v28 = dd.dyn_dat_values; // in code a int --&gt; int == ptr-value\n\n    double v22 = 123456.0; // scanf...\n    //*(double *)(v28 + 8 * indice - 8) = v22;\n    //start with pointer to double array, + 8 because of sizeof(double), -8 because of indice starting with 1 not 0\n    int indice = 1; //= 1..n\n    v28[indice - 1] = v22;\n}\n</code></pre>\n<p>beware of thinking that int means value - hex-rays output is high high level asm so every int could also be just a pointer to something</p>\n<p>Load C header:\n<a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1367.shtml\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/support/idadoc/1367.shtml</a>\ni prepared this header-file for IDA: <a href=\"https://pastebin.com/PWNAAj7T\" rel=\"nofollow noreferrer\">https://pastebin.com/PWNAAj7T</a>, just load before\nanalyze and hex-rays, then you will see much clearer whats happening</p>\n<p>then follow every occurence of CDynamicData and tell IDA to use your struct type - that will help alot</p>\n</div>",
            "votes": "0",
            "user": "llm",
            "time": "Jul 5, 2019 at 12:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Gautier A.",
                    "text": "<span class=\"comment-copy\">Hey, your response helped me quite a bit ! Thank you a lot !  So, I think I've found the function pasting the mada <a href=\"https://pastebin.com/Z1J1qGTbv\" rel=\"nofollow noreferrer\">into the robots</a>. Here is the prototype of the <a href=\"https://pastebin.com/07Aj6raW\" rel=\"nofollow noreferrer\">CmachineData</a>, <a href=\"https://pastebin.com/pnqukNgD\" rel=\"nofollow noreferrer\">CRobotInternal</a> and <a href=\"https://pastebin.com/DP2s7Km1\" rel=\"nofollow noreferrer\">CVectorBase</a>.  I've tried to find a way to contact you on ReverseEnginnering to give you the \"complete code\" (can't really expose it in public) but I didn't find any ways.</span>",
                    "time": null
                },
                {
                    "user": "llm",
                    "text": "<span class=\"comment-copy\">you should first and always answer the open questions of the others/or just comment, nothing is more anoying then investing time for good answers or questions and then get no direct reply, too many act like this on the internet, everyone earns an answer, normal discussions should stay here, just update your question accordingly, you can send file-download links to my temporary trashmail account <a class=\"__cf_email__\" data-cfemail=\"3705435a6803474d015151020f4207064377554e585a195352\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a> - just for file downloads, no discussions :)</span>",
                    "time": null
                },
                {
                    "user": "Gautier A.",
                    "text": "<span class=\"comment-copy\">Hello ! Yes, you're right, I forgot all my seemliness, I'm sorry. Anyway, I might be a little bit late and I'm sorry, but I just sent you a link to your email adress. I hope it's still up !</span>",
                    "time": null
                },
                {
                    "user": "llm",
                    "text": "<span class=\"comment-copy\">\"...Basically it's reading al the differents data in differents memory space. The structure is then pointing to the differents memories the function allocated...\" thats the 100% case in software :) - so not very clear if you really understood, did you read thorugh the C++ reversing tutorial, you can't get any further if you do not understand 100% of it - take your time, btw: no email</span>",
                    "time": null
                }
            ]
        }
    ]
}