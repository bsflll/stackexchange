{
    "title": "Debugger always paused in ntdll",
    "link": "https://reverseengineering.stackexchange.com/questions/15735/debugger-always-paused-in-ntdll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>I'm a beginner at reverse engineering so any help would be appreciated. I apologise if a similar question has already been asked or if this is a dumb question, but I couldn't find anything.</em></p>\n<p>I have tried using x32dbg, and ollydbg</p>\n<p>I am trying to decrypt packets sent out from the game. I began by finding Winsock's SEND function. I sent messages in the games inbuilt chat functionality to send off packets, and traced my way backwards trying to find a point where the packet wasn't encrypted. I found myself in the ntdll.dll import. </p>\n<p>I tried setting a breakpoint inside ntdll.dll, but the debugger instantly pauses on the breakpoint before I can send a packet. I try to press \"run\", but it just pauses itself again instantly. I am unsure if that means that ntdll.dll is being used all the time, or if it has anti-debugger.. or if i'm just doing things completely wrong.</p>\n<p>Is there a way for me to only break on SEND packets? Any advice for this situation would be appreciated.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "ollydbg",
        "debugging",
        "x86"
    ],
    "user": "user1032775",
    "time": "Jul 1, 2017 at 8:35",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">on what method in ntdll.dll does it break?</span>",
            "time": null
        },
        {
            "user": "user1032775",
            "text": "<span class=\"comment-copy\">I could be wrong, but I think it's ntdll.RtlEnterCriticalSection</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You started correctly by finding the Winsock SEND function, and breaking there.  However, to trace back to the point where the packets are not encrypted requires tracing further back than ntdll.dll.</p>\n<p>The debugger is pausing on RtlEnterCriticalSection because that function has many uses including those unrelated to sending packets, so it is called very frequently.</p>\n<p>Instead of single-stepping from SEND, you might have more success if you examine the stack frames - the value at [EBP+4] is the return address for the calling function, and [EBP] is the previous value of EBP.  If you examine that previous value of EBP, let's call it EBP', then that [EBP'+4] is the return address for the calling function, and [EBP'] is the previous value of EBP.  If you follow the chain, you will end up in the program.</p>\n<p>Once in the program, you can think about placing breakpoints around the memory locations where packets are stored before being sent.  When you see them being accessed, you can see how the encryption is being performed.</p>\n</div>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Jul 14, 2017 at 18:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}