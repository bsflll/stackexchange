{
    "title": "Stack-pointer analysis failed",
    "link": "https://reverseengineering.stackexchange.com/questions/23005/stack-pointer-analysis-failed",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm testing my toy obfuscating C compiler against IDA's decompiler, but IDA refuses always functions (then the decompilation is not possible). For example, at one of lowest-levels of obfuscating, a function likes</p>\n<pre><code>int foo(int i) {\n  return i;\n}\n</code></pre>\n<p>is compiled to</p>\n<pre><code>0x0         40 55                          push rbp\n0x2         48 89 e5                       mov rbp, rsp\n0x5         41 56                          push r14\n0x7         41 57                          push r15\n0x9         48 83 ec 10                    sub rsp, 0x10\n0xd         40 89 bc 24 0c 00 00 00        mov [rsp+0xc], edi\n0x15        48 8d 05 e4 ff ff ff           lea rax, [rip-0x1c]\n0x1c        44 8b bc 24 0c 00 00 00        mov r15d, [rsp+0xc]\n0x24        44 8b b4 24 0c 00 00 00        mov r14d, [rsp+0xc]\n0x2c        45 0f af fe                    imul r15d, r14d\n0x30        44 89 f9                       mov ecx, r15d\n0x33        83 c1 01                       add ecx, 0x1\n0x36        44 8b b4 24 0c 00 00 00        mov r14d, [rsp+0xc]\n0x3e        45 0f af f7                    imul r14d, r15d\n0x42        48 63 c9                       movsxd rcx, ecx\n0x45        49 63 d6                       movsxd rdx, r14d\n0x48        48 39 d1                       cmp rcx, rdx\n0x4b        0f 95 c1                       setnz cl\n0x4e        40 84 c9                       test cl, cl\n0x51        75 1c                          jnz 0x1c\n0x53        44 8b bc 24 0c 00 00 00        mov r15d, [rsp+0xc]\n0x5b        49 63 cf                       movsxd rcx, r15d\n0x5e        44 8b bc 24 0c 00 00 00        mov r15d, [rsp+0xc]\n0x66        44 89 ff                       mov edi, r15d\n0x69        48 89 c6                       mov rsi, rax\n0x6c        40 ff d1                       call rcx\n0x6f        44 8b bc 24 0c 00 00 00        mov r15d, [rsp+0xc]\n0x77        44 89 f8                       mov eax, r15d\n0x7a        48 83 c4 10                    add rsp, 0x10\n0x7e        41 5f                          pop r15\n0x80        41 5e                          pop r14\n0x82        40 5d                          pop rbp\n0x84        c3                             ret\n</code></pre>\n<p>I still don't understand why <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1368.shtml\" rel=\"nofollow noreferrer\">the stack frame analysis</a> can be failed for this case. There are only two groups of instructions modifying <code>rsp</code>, the first 5:</p>\n<pre><code>0x0         40 55                          push rbp\n0x2         48 89 e5                       mov rbp, rsp\n0x5         41 56                          push r14\n0x7         41 57                          push r15\n0x9         48 83 ec 10                    sub rsp, 0x10\n</code></pre>\n<p>and the last 5:</p>\n<pre><code>0x7a        48 83 c4 10                    add rsp, 0x10\n0x7e        41 5f                          pop r15\n0x80        41 5e                          pop r14\n0x82        40 5d                          pop rbp\n0x84        c3                             ret\n</code></pre>\n<p>and they actually make the stack pointer balanced.</p>\n<p>How can I fix that?</p>\n<p><em>Update</em>: @chentiangemalc suggests that it comes from <code>call rcx</code>, then I changed the obfuscating option to not generate such a call, and removed almost all other obfuscating options, following is an even simpler result</p>\n<pre><code>0x0         40 55                          push rbp\n0x2         48 89 e5                       mov rbp, rsp\n0x5         40 53                          push rbx\n0x7         48 83 ec 08                    sub rsp, 0x8\n0xb         c1 ef 00                       shr edi, 0x0\n0xe         89 f8                          mov eax, edi\n0x10        81 c8 33 19 d0 39              or eax, 0x39d01933\n0x16        89 f9                          mov ecx, edi\n0x18        81 e1 33 19 d0 39              and ecx, 0x39d01933\n0x1e        0f af c1                       imul eax, ecx\n0x21        40 b9 33 19 d0 39              mov ecx, 0x39d01933\n0x27        89 ca                          mov edx, ecx\n0x29        f7 d2                          not edx\n0x2b        89 fb                          mov ebx, edi\n0x2d        21 d3                          and ebx, edx\n0x2f        f7 d7                          not edi\n0x31        21 f9                          and ecx, edi\n0x33        0f af d9                       imul ebx, ecx\n0x36        01 d8                          add eax, ebx\n0x38        81 c0 31 d6 93 7f              add eax, 0x7f93d631\n0x3e        40 b9 fb 89 99 8c              mov ecx, 0x8c9989fb\n0x44        0f af c1                       imul eax, ecx\n0x47        81 c0 f5 c4 23 fd              add eax, -0x2dc3b0b\n0x4d        48 8d 8c 24 04 00 00 00        lea rcx, [rsp+0x4]\n0x55        40 89 01                       mov [rcx], eax\n0x58        48 8d 84 24 04 00 00 00        lea rax, [rsp+0x4]\n0x60        40 8b 00                       mov eax, [rax]\n0x63        48 83 c4 08                    add rsp, 0x8\n0x67        40 5b                          pop rbx\n0x69        40 5d                          pop rbp\n0x6b        c3                             ret\n</code></pre>\n<p>but IDA complains always <code>sp-analysis failed</code> ((I've put the ELF <a href=\"https://send.firefox.com/download/a6e2224e532d962f/#7T05h7_HprqN7gprnr0-YA\" rel=\"nofollow noreferrer\">here</a>).</p>\n<p>Other tools like Ghidra or JEB Decompiler happily recognizes the function, though.</p>\n<p><em>Update</em>: the method of @chentiangemalc works perfectly. <s>for the example above, unfortunately there are cases where IDA is not happy (sample: <a href=\"https://send.firefox.com/download/af09a8b198096475/#lGtfN2XJRu3Q3KW9ESh6tw\" rel=\"nofollow noreferrer\">ELF</a>)</s>.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "decompilation",
        "obfuscation",
        "decompiler"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Jan 16, 2020 at 22:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I assembled the code, the offending instruction was:</p>\n<pre><code>0x6c        40 ff d1                       call rcx\n</code></pre>\n<p>You will need to use <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/489.shtml\" rel=\"nofollow noreferrer\">Change Stack Pointer</a> command in IDA to fix this in disassembly. As per IDA documentation:</p>\n<ul>\n<li>This command allows you to specify how the stack pointer (SP) is modified by the current instruction. </li>\n<li>You cannot use this command if the current instruction does not belong to any function. </li>\n<li>You will need to use this command only if IDA was not able to trace the value of the SP register. </li>\n<li>Usually IDA can handle it but in some special cases it fails. An example of such a situation is an indirect call of a function that purges its parameters from the stack. In this case, IDA has no information about the function and cannot properly trace the value of SP. </li>\n<li>Please note that you need to specify the difference between the old and new values of SP.</li>\n<li>The value of SP is used if the current function accesses local variables by [ESP+xxx] notation. </li>\n</ul>\n<p>This can also be verified by removing the call rcx instruction and confirming it removes the SP Analysis failed error in IDA.</p>\n<p>Based on the 2nd version with uploaded ELF the problem is IDA hasn't detected the end of the function correctly.</p>\n<p><a href=\"https://i.sstatic.net/t02bN.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/t02bN.png\"/></a></p>\n<p>Right clicking the function <strong>foo</strong> in Functions view and selecting Edit function and changing the end address to 0:000000000000006C fixes the SP analysis problem.</p>\n<p>When trouble shooting SP Analysis failures also enabling Stack Pointer in <strong>Options</strong> | General and selecting <strong>Stack Pointer</strong> can help you determine cause of problems, this will show the stack pointer value in green text to the left of instructions.</p>\n<p><a href=\"https://i.sstatic.net/KDiqP.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/KDiqP.png\"/></a></p>\n<p>The 3rd sample provided it's the same issue. To find the end of function, switch to Text view find the offset of retn and add one, for example the end of function in the last sample provided is 5D5.</p>\n<p>The root cause of the problem is the redundant REX prefix (0x40) at the start. Normal 64-bit function prologs start with 55 48 89 E5 so IDA tries to create a function at address 1 which interferes with the actual function at 0 and makes it stop after one instruction. This planned to be fixed in future releases of IDA.</p>\n</div>",
            "votes": "5",
            "user": "chentiangemalc",
            "time": "Jan 16, 2020 at 12:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thank you, but it doesn't help. I've updated the question with more simple code.</span>",
                    "time": null
                },
                {
                    "user": "chentiangemalc",
                    "text": "<span class=\"comment-copy\">I added more based on the elf provided</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thank again. It works now, it seems that also in the first case, changing the end of the function makes IDA happy.</span>",
                    "time": null
                },
                {
                    "user": "chentiangemalc",
                    "text": "<span class=\"comment-copy\">Ok in the scenario where removing call instruction fixed it, it was when I assembled with masm, but wasn't your exact binary.</span>",
                    "time": null
                },
                {
                    "user": "chentiangemalc",
                    "text": "<span class=\"comment-copy\">I added more detail and the actual root cause of why it can't properly detect your start/end function automatically.</span>",
                    "time": null
                }
            ]
        }
    ]
}