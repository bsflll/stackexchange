{
    "title": "IDA Pro: Side effects or disadvantages of \"Create function\"",
    "link": "https://reverseengineering.stackexchange.com/questions/9005/ida-pro-side-effects-or-disadvantages-of-create-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some instructions in a binary do not belong to a function, or, IDA does not manage to recover one. See for example the red addresses in the below screen shot.</p>\n<p>Yet, one can right-click such 'function-less' addresses and selct <code>Create function</code> from the menu (see below screenshot).</p>\n<p>Are there any side effects of creating a function from 'function-less' instructions? For example, does it change instructions, symbols, variables, etc.? Does it change IDA-generated xrefs and thus has an effects on a static control flow analysis?</p>\n<p>I am asking because I have to work with an algorithm that can only process instructions which belongs to a function. My idea was to go through the binary and keep creating functions until all 'function-less' instructions belong to a function. </p>\n<p>Do you see any possible disadvantages of this approach?</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ul8Al.png\"/></p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "disassembly",
        "idapython",
        "static-analysis"
    ],
    "user": "langlauf.io",
    "time": "Apr 28, 2017 at 12:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Depends on what you would call a disadvantage. This kind of code-relict often results from a function that's present in source code, but doesn't ever get called*, so IDA didn't assign a name to it. If this is the case, you:</p>\n<ul>\n<li>generally don't want to include the function in your analysis, because the program never uses it anyways</li>\n<li>can search for a longer sequence of functions that are unused**, which might identify whole source files that got linked in accidentially but aren't used in the program</li>\n<li>can use the space of these functions for code caves that \"enhance\" the program's functionality; for example, i sometimes use them for a sequence of open/write/close calls that log some intermediate values.</li>\n</ul>\n<p>You sabotage this by making unused functions real functions, which may or may not be important to your use case.</p>\n<p>(*) However, the function might be a class method, which is referenced from the vtable, but never called directly, which misleads IDA</p>\n<p>(**) If you have two functions <code>a</code> and <code>b</code>, both of which get never called from the outside, but <code>a</code> calls <code>b</code>, IDA will still give <code>b</code> a <code>sub_</code> name, which interferes with identifying unused functions</p>\n</div>",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "May 27, 2015 at 22:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Good point. Your answer confirms my assumption that \"Create function\" is a purely IDA-internal thing. I mean, it does not change any instructions, symbols, variables, etc. It shouldn't change any xrefs either and thus shouldn't have any effects on a static control flow analysis, right? Or am I missing something?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is another point that might be problematic.\nSometimes on some platforms IDA does not recognize code areas correctly and defines data as a code in complicated functions or complicated code at all. Defining this code as a function may insert it to auto-analysis queue and all incorrectly defined references from this mistakenly recognized code may break another functions. This problem also occurs when working with obfuscated code.</p>\n<p>Unfortunately as @Guntram Blohm said, the functions that called indirectly might be not recognized as such, so the solution for this problem is still needed. I'd suggest a bit better algorithm for creating such functions:\nDon't convert each instruction to function automatically.\nFind all function prologues instead (for example something like 2 pushes in the functions on your picture), and try to create a function where you can recognize this prologue only.</p>\n<p>It can be done with IDAPython by using function <code>idc.MakeFunction(prologue_address)</code> without second parameter. In such case IDA will try to define function borders automatically. </p>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "May 28, 2015 at 7:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Carlos Garcia",
                    "text": "<span class=\"comment-copy\">IIRC the plugin IDAScope does a good job at that</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">@w s: Just to be sure, creating a function does not change instructions, symbols, variables, etc., right? Does it change IDA-generated xrefs?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">@stackoverflowwww It may change instructions and xrefs. It is particularly problematic when working with obfuscated code.</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">@ws could you give me a link to more info about when , why , and what xrefs may be added? Maybe even an example? Or should I open a new question?</span>",
                    "time": null
                }
            ]
        }
    ]
}