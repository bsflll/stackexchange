{
    "title": "__security_cookie for function pointers in Windows 10",
    "link": "https://reverseengineering.stackexchange.com/questions/22182/security-cookie-for-function-pointers-in-windows-10",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm curious about this <code>__security_cookie</code> that I keep seeing all over the <code>msvcp140.dll</code> from my Windows 10 x64 (insider build.) </p>\n<p>Here's an example:</p>\n<p><a href=\"https://i.sstatic.net/vDXie.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/vDXie.png\"/></a></p>\n<p>Note that the address for indirect function call (or <code>qword_18009FBD0</code>) is taken somewhere from the <code>.data</code> section:</p>\n<p><a href=\"https://i.sstatic.net/NaY3A.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NaY3A.png\"/></a></p>\n<p>Then it is XOR'ed with the <code>__security_cookie</code>:</p>\n<p><a href=\"https://i.sstatic.net/gmHTE.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/gmHTE.png\"/></a></p>\n<p>I thought that <code>__security_cookie</code> is something that is used on the stack to guard against buffer-overflows. So they must be using some new security technique. Any idea what that is?</p>\n<p>And a follow up question. I'm trying to statically analyze this binary code with IDA and this <code>__security_cookie</code> makes it very difficult to see what function is actually being called. For instance, here's how <code>qword_18009FBD0</code> looks like:</p>\n<p><a href=\"https://i.sstatic.net/7eHIY.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/7eHIY.png\"/></a></p>\n<p>Any idea how to make those function addresses more legible?</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "windows",
        "security"
    ],
    "user": "c00000fd",
    "time": "Sep 24, 2019 at 10:38",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Probably similar with <a href=\"https://reverseengineering.stackexchange.com/questions/16241/what-could-be-the-purpose-of-xoring-esp-with-a-global-variable-stack-canary-pr\">this</a>.</span>",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "<span class=\"comment-copy\">@Biswapriyo no, it's not the \"GS cookie\", even though it uses the same global variable name. Look at it, it has nothing to do with stack canaries, or \"buffer overflows\".</span>",
            "time": null
        },
        {
            "user": "Limina102",
            "text": "<span class=\"comment-copy\">a much easier approach: use visual studio cl.exe to compile a random c source, generating assembly listing with /Fa /FAs</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Look for the writes to the <code>qword_18009FBD0</code> to see where it's initialized.</p>\n<p>Apparently it's a part of an array called   <code>__encodedKERNEL32Functions</code> where various pointers to kernel32 functions are stored after being XORed with <code>__security_cookie</code>. You can rename the pointer to the kernel32 function's name to better see what is happening:</p>\n<pre><code>  ;(from initialize_pointers)\n  lea     rdx, aClosethreadpoo ; \"CloseThreadpoolTimer\"\n  mov     rcx, rbx        ; hModule\n  mov     cs:qword_180092498, rax\n  call    cs:__imp_GetProcAddress\n  xor     rax, cs:__security_cookie\n  lea     rdx, aCreatethreadpo_0 ; \"CreateThreadpoolWait\"\n  mov     rcx, rbx        ; hModule\n  mov     cs:pCloseThreadpoolTimer_xored, rax ;&lt;- variable renamed\n\n__crtCloseThreadpoolTimer proc near \n                sub     rsp, 28h\n                mov     rax, cs:pCloseThreadpoolTimer_xored\n                xor     rax, cs:__security_cookie\n                jz      short loc_180036A8A\n                call    cs:__guard_dispatch_icall_fptr ; calls CloseThreadpoolTimer()\nloc_180036A8A:  \n                add     rsp, 28h\n                retn\n__crtCloseThreadpoolTimer endp\n</code></pre>\n<p>This mitigation is not actually new and was already used in <a href=\"https://github.com/adityaramesh/concurrency_runtime/blob/master/VS2013_SP2/crt/src/winapisupp.c\" rel=\"nofollow noreferrer\">VS2013 CRT</a> although in a slightly different form. It is probably aimed at reducing the number of available API pointers in standard CRT DLLs to make exploitation harder.</p>\n<p>Although <code>__security_cookie</code> is most commonly used for protecting data on the stack (GS and EH cookies), nothing prevents programmers from using it for other purposes as a simple source of entropy.</p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Sep 25, 2019 at 17:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Yeah, I saw that too. There's a large function that repeatedly calls <code>GetProcAddress</code> on various system functions and populates that array. Unfortunately <a href=\"https://reverseengineering.stackexchange.com/q/22181/14864\">I can't load symbols to see its name</a>. By the way, do you know the name of this security mitigation that they are using there? I haven't seen this before, although it uses the name of the stack canary cookie.</span>",
                    "time": null
                }
            ]
        }
    ]
}