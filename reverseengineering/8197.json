{
    "title": "Adding Types to GDB via Python",
    "link": "https://reverseengineering.stackexchange.com/questions/8197/adding-types-to-gdb-via-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>GDB has a reasonably robust API which is exposed to Python at runtime.  It allows for inspecting various types, but does not appear to allow creation of types.</p>\n<p>However, types can be manually added by loading an object file at runtime (<a href=\"https://stackoverflow.com/q/7272558\">https://stackoverflow.com/q/7272558</a>).</p>\n<p>Is there any way to add or create a new <code>gdb.Type</code> object at runtime?</p>\n<p>The intent is to then allow inspection of memory via <code>gdb.Value.cast</code> to the <code>type.pointer()</code> and then <code>.dereference()</code>d.  This would be much better/easier than manually deserializing data field-by-field.</p>\n<p>Alternatively, I thought that I could just load an object file programmatically.  It looks like GDB is perfectly happy to load cross-architecture object files for symbol/type purposes.  In order to not kill any real/useful symbols, or create misleading ones, a non-existent address should be used.  However, loading a <code>.o</code> at an unmapped address requires the user to verify (type <code>y</code>), so when done from <code>gdb.execute(...)</code> it fails outright.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "628",
    "tags": [
        "gdb",
        "python"
    ],
    "user": "Zach Riggle",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">You could probably use <a href=\"http://www.prevanders.net/dwarf.html\" rel=\"nofollow noreferrer\">libdwarf</a> to create an object file that has <i>no</i> symbols, just type information, in it. Then, loading that object file to an existing address probably won't kill any symbols, since it has no mappable sections inside.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So it turns out you can do this in the following way, from within GDB Python.  The trick is <code>from_tty=False</code>.</p>\n<pre><code>foo = open('foo.cc','w+')\nfoo.write('struct foobar { int x; }; foobar foo;')\nfoo.close()\n\nsubprocess.check_output('g++ -w -c -g foo.cc -o foo.o', shell=True)\n\ngdb.execute('add-symbol-file foo.o 0', from_tty=False, to_string=True)\n</code></pre>\n<p>You should now be able to view the type in gdb:</p>\n<pre><code>gdb $ ptype foobar\ntype = struct foobar {\n    int x;\n}\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Zach Riggle",
            "time": "Apr 9, 2015 at 19:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}