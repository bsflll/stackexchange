{
    "title": "Finding API in ROM dump (DOS debug)",
    "link": "https://reverseengineering.stackexchange.com/questions/27492/finding-api-in-rom-dump-dos-debug",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Have dumped the ROM from a <a href=\"https://en.wikipedia.org/wiki/HP_200LX\" rel=\"nofollow noreferrer\">HP 200LX</a> using <a href=\"https://www.betaarchive.com/forum/viewtopic.php?t=34140\" rel=\"nofollow noreferrer\">these instructions</a>:</p>\n<pre><code>debug #Enters the debug mode\nr bx #Reads the bx register and prompts you to enter a new value\n30 #The new value for bx\nr cx #Reads the cx register and prompts you to enter a new value\n0000 #The new value for cx\nn 3M.bin #The name of the dump file\nw 0:0 #Write out the data, starting at offset 0:0\n</code></pre>\n<p>and see some interesting strings in the data, but would like to investigate in a more technically sophisticated manner.</p>\n<p>What would be the easiest way to find APIs, ie procedure entry points? Am particularly interested in the cc:Mail Vendor Independent Messaging API which I suspect hides there somewhere.</p>\n<p>There is also at least one binary file on the disk which seems related, so ideally I would like a tool that reads both the ROM dump and this file together.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "127",
    "tags": [
        "x86",
        "dos",
        "rom"
    ],
    "user": "Tomas By",
    "time": "Apr 17, 2021 at 9:47",
    "comments": [
        {
            "user": "Hiro",
            "text": "<span class=\"comment-copy\">Just remove the rom and put it on rom reader :).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In DOS programs, a common sequence to look for is a sequence of <code>push</code> instructions, interleaved with <code>sub sp,&lt;size-of-local-vars&gt;</code>. This is a typical entry to a function. Whether this is an API entry point is harder to determine without more information. You could use a disassembler tool that is capable of handling MS-DOS images (like Reko, <a href=\"https://github.com/uxmal/reko\" rel=\"nofollow noreferrer\">https://github.com/uxmal/reko</a>) to perform a heuristic scan of the binary and then look at procedures with 0 callers. This gives you a starting point.</p>\n</div>",
            "votes": "2",
            "user": "John Källén",
            "time": "Apr 17, 2021 at 13:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}