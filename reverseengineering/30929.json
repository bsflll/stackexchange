{
    "title": "Firmware Binary Reverse with Ghidra returns only few codelines decompiled with truncated code",
    "link": "https://reverseengineering.stackexchange.com/questions/30929/firmware-binary-reverse-with-ghidra-returns-only-few-codelines-decompiled-with-t",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have tried to decompile the firmware binary of a microcontroller that should be an STM32 (but I'm not sure about this).</p>\n<p>After the analysis I get only few codelines with a lot of similar messages:</p>\n<pre><code>                   /* WARNING: Bad instruction - Truncating control flow here */\n    halt_baddata();\n  }\n                    /* WARNING: Could not recover jumptable at 0x00000008. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(unaff_r4 ^ unaff_r4 &lt;&lt; 0xe))();\n</code></pre>\n<p>And the strings seems meaningless bunch of chars.</p>\n<p>I have tried also ARM aggressive instruction finder without success.</p>\n<p>I have also tried to set base address <code>0x08000000</code> that seems common for various STM32 with analogous bad results.</p>\n<p>I have also tried to use bot arm v7 little and big endian as trial and error.</p>\n<p>How should I proceed considering that I don't know the datasheet of microcontroller used?</p>\n<p><a href=\"https://drive.google.com/file/d/1oA8iLJIaSdntQOvhuN_AnQuZ5leDNNLj/view?usp=sharing\" rel=\"nofollow noreferrer\">Here The File</a></p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "816",
    "tags": [
        "binary-analysis",
        "firmware",
        "ghidra",
        "binary",
        "firmware-analysis"
    ],
    "user": "AndreaF",
    "time": "Sep 28, 2022 at 14:02",
    "comments": [
        {
            "user": "dingo_kinznerhook",
            "text": "<span class=\"comment-copy\">Do you have physical access to the microcontroller? Are there any serial numbers or other markings on it?</span>",
            "time": null
        },
        {
            "user": "AndreaF",
            "text": "<span class=\"comment-copy\">@dingo_kinznerhook I cannot access it at the moment.</span>",
            "time": null
        },
        {
            "user": "Rok Tavčar",
            "text": "<span class=\"comment-copy\">If it is stm mcu then binary starts with isr vector table where second entry is reset handler. Did you try to disassemble as thumb instructions?</span>",
            "time": null
        },
        {
            "user": "AndreaF",
            "text": "<span class=\"comment-copy\">@RokTavčar I'm not sure it is really an STM MCU. I haven't clear what do you mean, I tried to decompile a raw binary with the options ARM/thumb mode ARM v7. I have linked the file if someone here can give a look to suggest me the correct way to disassemble in such situation. It would be really appreciated.</span>",
            "time": null
        },
        {
            "user": "Margaret Bloom",
            "text": "<span class=\"comment-copy\">You can't simply throw binaries at Ghidra. You need to: 1) Read the uC manuals and get an extensive and complete understanding of its working (including the boot sequence and interrupts vectors); 2) inspect the binary to understand the format used, it is a blob of code? It's a firmware FS? It's proprietary? Where it's mapped and how? 3) Dissect code and data from metadata 4) disassemble the code. Without any of this, you can only make guesses.</span>",
            "time": null
        }
    ],
    "answers_data": []
}