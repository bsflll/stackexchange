{
    "title": "Basic clarifications about .hex and .bin file",
    "link": "https://reverseengineering.stackexchange.com/questions/14990/basic-clarifications-about-hex-and-bin-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am newcomer to this field.\nI would like to understand how these things work and what these file contain (and if I'm on the right path).</p>\n<p>To explain my doubts, I will use the .hex file posted in a similar question: <a href=\"https://reverseengineering.stackexchange.com/questions/11650/how-can-i-decompile-an-arm-coretex-m0-hex-file-to-c\"> How can I decompile an ARM Coretex M0 .hex file to C++?</a></p>\n<p>Link to .hex file: <a href=\"http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex\" rel=\"nofollow noreferrer\"><a href=\"http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex\" rel=\"nofollow noreferrer\">http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex</a></a></p>\n<p>The .hex file contains the instructions that will be executed by the microcontroller, and the format used is <a href=\"http://www.keil.com/support/docs/1584/\" rel=\"nofollow noreferrer\"><a href=\"http://www.keil.com/support/docs/1584/\" rel=\"nofollow noreferrer\">http://www.keil.com/support/docs/1584/</a></a>, am I right?</p>\n<p>Now I've tried to extract some information from this file (just for learning):\nI've converted the .hex file into .bin file with hex2bin (as suggested in the first answer), \nthen I've run the command \"strings file.bin\", and I've found some readable strings. </p>\n<p>What does this mean? Why can I read only some strings and not all the data?\nExactly what happen when I convert .hex file to .bin file?\nIs there a way to extract the code in which these strings are used?</p>\n<p>Maybe these questions are too silly, \nbut I hope that someone could explain what these files are, and what they represent. \nAny good resource will be appreciated. Thanks in advance.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "firmware",
        "arm",
        "hex",
        "binary"
    ],
    "user": "Light123",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>The .hex file contains the instructions that will be executed by the\n  microcroller, and the format used is\n  <a href=\"http://www.keil.com/support/docs/1584/\" rel=\"nofollow noreferrer\">http://www.keil.com/support/docs/1584/</a> , am I right?</p>\n</blockquote>\n<p>You're right about the format. The .hex file basically encodes binary data which contains instruction in assembly language, but also data.</p>\n<blockquote>\n<p>What does it mean? Why can I read only some strings and not all the\n  data?</p>\n</blockquote>\n<p>It means <code>strings</code> could find some data its deems to be a string. it just searches the binary dump for byte sequences which reassembly ascii codes (with additional heuristics, like minimum length, different string formats, ...)</p>\n<blockquote>\n<p>Exacly what happen when I convert .hex file to .bin file?</p>\n</blockquote>\n<p>The file is decoded. its a symmetric encoding scheme as described at the source you privided.</p>\n<blockquote>\n<p>Is there a way to extract the code in which these strings are used?</p>\n</blockquote>\n<p>Yes, but you would need to find the code first to make this connection. Good diassemblers like IDA will find cross-references to data fields (like strings).</p>\n<p>If you want to see the individual machine instructions, please use a disassembler like radare2, IDA, BinaryNinja, Hopper or something else capable of disassembling ARM.</p>\n</div>",
            "votes": "2",
            "user": "Nordwald",
            "time": "Mar 23, 2017 at 12:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}