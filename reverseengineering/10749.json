{
    "title": "How to identify code ran when clicking on an object in a game",
    "link": "https://reverseengineering.stackexchange.com/questions/10749/how-to-identify-code-ran-when-clicking-on-an-object-in-a-game",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've played with using software like cheat engine to modify memory, null out code and even inject some code of my own. However finding the right spot to modify is <em>always</em> a difficulty. I'd like to be able to identify the code that is run when I click my mouse on an object (eventually to simulate the entire process). Is there a tool or method for doing this that anyone could suggest?</p>\n<p>I've used ollydb and cheat engine a fair bit in the past.</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "memory",
        "machine-code",
        "automation"
    ],
    "user": "FraserOfSmeg",
    "time": "Aug 30, 2015 at 0:26",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">This depends on the framework used to build the game. As an example, unity3d games are .net based, so .net tools(decompilers/debuggers/tracers/etc)  should be used. Using Olly or Cheat Engine is possible but difficult.</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">See <a href=\"http://reverseengineering.stackexchange.com/questions/2228/highlight-executed-basic-blocks-in-ida\">Highlight Executed Basic Blocks in IDA</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p><strong>On windows you can</strong></p>\n<p>find <code>winproc</code> function, search click messages within it and add breakpoint/trace from there...</p>\n</li>\n<li><p><strong>On different OS</strong></p>\n<p>trace mouse handlers ...</p>\n</li>\n<li><p><strong>If OpenGL is used</strong></p>\n<p>The <a href=\"https://www.opengl.org/archives/resources/faq/technical/selection.htm\" rel=\"nofollow noreferrer\">Object selection</a> is often done by it directly during rendering. You can trace calls to those functions used.</p>\n</li>\n<li><p><strong>If any framework is used</strong></p>\n<p>learn what function for mouse it has and trace its calls ...</p>\n</li>\n</ol>\n</div>",
            "votes": "5",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An effective method in these cases (although not necessarily straightforward) is to use <em>differential debugging</em>.</p>\n<p>The core principle is to run the application twice and record traces of the functions being executed, or even basic blocks if you need to get so granular. </p>\n<p>The idea boils down to:</p>\n<ul>\n<li>The first time you record a trace try to exercise as much functionality as possible, except what you are interested in (in your case, do not press that button!). </li>\n<li><p>The second time you go directly for what you are interested in, press that button!</p></li>\n<li><p>Now you can filter the noise out of the second trace by looking for hits that appear exclusively in the second (and not in the first)</p></li>\n</ul>\n<p>This is not a perfect method but it works pretty well to narrow the search in several scenarios.</p>\n<p><em>Shameless plug:</em>\nHere a <a href=\"https://brundlelab.wordpress.com/2012/06/02/a-story-of-binaries-and-snipers/\" rel=\"nofollow\">link to my blog</a> where I discuss a similar (in nature) problem. There is even some old code to get you started.</p>\n</div>",
            "votes": "2",
            "user": "Carlos Garcia",
            "time": "Aug 9, 2016 at 21:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}