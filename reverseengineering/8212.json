{
    "title": "How was Playstation Portable hacked? How is custom firmware developed? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8212/how-was-playstation-portable-hacked-how-is-custom-firmware-developed",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/8212/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2015-02-15 12:43:35Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8212/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>How was PSP hacked?\nOn first hand, how do people rip the binary out of PSP? I am just curious how all those hardware reverse engineering works. </p>\n<p>P.S. Is there a PSP Custom firmware developer community around? </p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "firmware",
        "hardware",
        "mips"
    ],
    "user": "Jin Suk Park",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\"><a href=\"http://weaponre.com/blog.html\" rel=\"nofollow noreferrer\">This blog</a> seems to be by a group that hacked at least some consoles. Obviously, you need a lot of time, skill and resources to do this.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know the whole story but AFAIK the initial release of PSP did not use encryption or code signing, so a skilled person was able to make custom code run based off a game. This was used to explore and document the system and develop a customSDK.  later firmware updates did implement encryption, but by this time hackers were able to debug code, so they could analyse the firmware update and extract the keys from it. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 12, 2015 at 21:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>To answer the question, how did reverse engineers hack the psp?</strong> </p>\n<p>Like this: </p>\n<p><a href=\"http://hackaday.com/2011/03/13/reverse-engineering-the-psp/\" rel=\"nofollow\">http://hackaday.com/2011/03/13/reverse-engineering-the-psp/</a>\n<a href=\"http://sec.pn.to/pw/?plugin=attach&amp;pcmd=open&amp;file=tapping.jpg&amp;refer=Bases\" rel=\"nofollow\">http://sec.pn.to/pw/?plugin=attach&amp;pcmd=open&amp;file=tapping.jpg&amp;refer=Bases</a></p>\n<p>First the reverse engineer rips the machine apart, and checks all of its components. Then he finds points of interaction. Perhaps the machine has a debugger port, like a JTAG. From there, the engineer attempts to circumvent any security which prevents him from dumping the firmware image. For this stage, researching the exact functionality of each hardware component is critical. </p>\n<p>In the link I gave above, the engineer figures out how the NAND chips communicate by guessing various pin configurations. He then uses that knowledge to overwrite parts of memory, and observe the boot up process. Once you understand how the device's operating system boots, it is often possible to overwrite security protections which are selected during boot. Essentially force the device to boot into developer mode, where it may allow you to view sensitive information. </p>\n<p>Usually the firmware image wont have source files. It will be a binary dump, which the reverse engineer may disassemble for further analysis. If you are lucky you will be able to dump a the entire file system, or the kernal the device is running. </p>\n<p>Once the reverse engineer is possession of the firmware image, if it is the goal to recreate their own firmware, they may begin writing it based on the firmware image: </p>\n<p>like this: </p>\n<p><a href=\"https://github.com/uofw/uofw\" rel=\"nofollow\">https://github.com/uofw/uofw</a></p>\n<p><strong>If you are interested in reverse engineering sony products:</strong> </p>\n<p>Sony's game consoles are kind of unique in terms of computers. They are usually not set up like a typical x86 computer. </p>\n<ul>\n<li><p>You should learn Sony's proprietary architectures. PSP uses MIPS architecture, which is thankfully, very common. However sony is <em>very</em> fond of making up its own CPU architectures. the PS3 runs on the notoriously complex \"Cell\" architecture (6 core!) for instance. <a href=\"http://www.gamefaqs.com/boards/620272-playstation-vita/64995907\" rel=\"nofollow\">http://www.gamefaqs.com/boards/620272-playstation-vita/64995907</a> gives the basics. </p></li>\n<li><p>Read up on the various play station hacking sites: <a href=\"http://www.ps3hax.net/forum.php\" rel=\"nofollow\">http://www.ps3hax.net/forum.php</a> (beware, invasive ads) </p></li>\n<li>Read up on how famed hacker George Hotz hacked the PS3 <a href=\"http://rdist.root.org/2010/01/27/how-the-ps3-hypervisor-was-hacked/\" rel=\"nofollow\">http://rdist.root.org/2010/01/27/how-the-ps3-hypervisor-was-hacked/</a></li>\n<li>check out this paper on forensics on the device - <a href=\"http://link.springer.com/chapter/10.1007%2F978-3-642-04155-6_9\" rel=\"nofollow\">http://link.springer.com/chapter/10.1007%2F978-3-642-04155-6_9</a> - forensic analysists often have to work at a very low level, so this paper could help you understand the software/operating system of the device. </li>\n</ul>\n</div>",
            "votes": "1",
            "user": "MrSynAckSter",
            "time": "Feb 12, 2015 at 23:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Cell was PS3; ps4 is practically off- the -shelf amd64 system with FreeBSD kernel. And even Cell was using PowerPC-based instruction set, which is not exactly obscure</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Fixed. Off by one error ;)</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Also, while the instruction set is not obscure, programmers have complained quite a bit about cell architecture being hard to use. It does introduce complexities that you have to understand.</span>",
                    "time": null
                }
            ]
        }
    ]
}