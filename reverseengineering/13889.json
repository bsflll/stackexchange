{
    "title": "Program gets terminated when debugging",
    "link": "https://reverseengineering.stackexchange.com/questions/13889/program-gets-terminated-when-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm getting into the world of reverse engineering because I think it would be interesting to know how things work and such (also learning some assembly).</p>\n<p>But I have this strange problem, when I'm debugging some code, like a program from crackme.de, the program gets terminated instantly when I try to run it. So to see the changes I've done I actually have to patch it which will be very annoying in the long run I think.</p>\n<p>I've tried out different debuggers as well, OllyDbg, IDA Pro (free edition) and Immunity Debugger (going with this one because I like it).</p>\n<p>And I still have the same problem. I make some changes, I debug the program (start process), instantly gets Program terminated with code 0 (which is the return value from the program if I understand right).</p>\n<p>Any ideas? I must be doing something wrong. I'm running Windows 10 if that might help.</p>\n<p>Thanks.</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "6k",
    "tags": [
        "debugging"
    ],
    "user": "mikkel1156",
    "time": "Nov 9, 2016 at 19:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You're doing everything correct! The problem is an anti-debugging technique. There is a function <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx\" rel=\"nofollow noreferrer\">isDebuggerPresent()</a>, which can check if your program is being debugged or not. This can be seen in the \"Newbie\" crackmes, as it is really easy to bypass. You can try to disable it yourself, or have a look at <a href=\"https://stackoverflow.com/questions/10330147/how-do-i-bypass-isdebuggerpresent-with-ollydbg\">similar questions</a>, how to bypass this.</p>\n<p>Good Luck!</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Does this software have anti-debugging features built into it? I've been doing some research myself recently on Safedisc-protected software (usually video games, just not in my case... retail software). This DRM tool includes anti-debugging features that keep an eye out for popular debuggers running in the background, and actively attempts to thwart such debugging.</p>\n<p>There are other such tools than Safedisc (the Sony video game DRM comes to mind, can't think of its name), and I know even less about their details, but they have similar features.</p>\n</div>",
            "votes": "0",
            "user": "John O",
            "time": "Nov 9, 2016 at 22:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mikkel1156",
                    "text": "<span class=\"comment-copy\">I thought about that, but pretty sure that isn't the case. Noob level challenges on crackme.de shouldn't have this feature as it's for beginners. I'll try to make a small piece of software to test to be sure. I can debug code, go into the assembly and change an instruction. But when trying to then run it, it doesn't work and I have to patch the whole executable.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Post an example of what was original assembly what you charged may be you imbalnce the stack may be you r changes corrupt the instructions etc etc</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try putting a breakpoint on various process exit points: <code>ExitProcess</code>, <code>TerminateProcess</code>, <code>TerminateThread</code>. If the exit is done by the process itself, you should be able to catch it and then see what could have triggered it. </p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Nov 10, 2016 at 21:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}