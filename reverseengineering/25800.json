{
    "title": "Turning an unknown audio data stream into wav or similar format",
    "link": "https://reverseengineering.stackexchange.com/questions/25800/turning-an-unknown-audio-data-stream-into-wav-or-similar-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to get the commentary (casters voice) from a dota2 game file. I've managed to parse the game file and select what I believe is the voice data. This is in a weird format (CSVCMsg_VoiceData) which has the following struc:</p>\n<pre><code>type CSVCMsg_VoiceData struct {\nClient                   *int32            `protobuf:\"varint,1,opt,name=client\" json:\"client,omitempty\"`\nProximity                *bool             `protobuf:\"varint,2,opt,name=proximity\" json:\"proximity,omitempty\"`\nXuid                     *uint64           `protobuf:\"fixed64,3,opt,name=xuid\" json:\"xuid,omitempty\"`\nAudibleMask              *int32            `protobuf:\"varint,4,opt,name=audible_mask\" json:\"audible_mask,omitempty\"`\nVoiceData                []byte            `protobuf:\"bytes,5,opt,name=voice_data\" json:\"voice_data,omitempty\"`\nCaster                   *bool             `protobuf:\"varint,6,opt,name=caster\" json:\"caster,omitempty\"`\nFormat                   *VoiceDataFormatT `protobuf:\"varint,7,opt,name=format,enum=VoiceDataFormatT,def=1\" json:\"format,omitempty\"`\nSequenceBytes            *int32            `protobuf:\"varint,8,opt,name=sequence_bytes\" json:\"sequence_bytes,omitempty\"`\nSectionNumber            *uint32           `protobuf:\"varint,9,opt,name=section_number\" json:\"section_number,omitempty\"`\nUncompressedSampleOffset *uint32           `protobuf:\"varint,10,opt,name=uncompressed_sample_offset\" json:\"uncompressed_sample_offset,omitempty\"`\nXXX_unrecognized         []byte            `json:\"-\"`\n</code></pre>\n<p>}</p>\n<p>This seems to work when reading the data. Logically I'm probably looking for the VoiceData part of the struct when given this:</p>\n<p><em>\"format\":0,\"voice_data\":\"uz+ACgEAEAELgD4EQgEWAKV4mxnepfmhxKCQxAnKVNaHhKRXPIsmAH5RjXmJV0u+WTmrvgyCKxcraehjo/ZeKcFjksXQZEeOju4hLNv/MAB9KA7ww14Vc0ndYPB7dDXoXTexuxcW0Jg/diMgdH5ijWhe02Ch48KX86qJZYFyZV81AH76qCgh9AXliMdyWEgWTMbRD6xMX37WJALrXlSnxymIloSq2KGwXCcMXzQiSQIrcLVNfqdNJACCluFOIRKPmugUvsLZmnD04X0xhpAuNkwJECK4t51MBOWNWJlCAIDyZlJwWI45EPTjBB6yKyGOclu96qBV2MhFAh1d2J7WDZwe6YxOVu/BGkGcur9qTP85ZRfjANoiQxQrWvpoHFBFBy0AfX6k8XvbSwrk2nUAEP3P6kcmXORKUNKeu8HDnOUflQqtA5AkkTiun77fZrqnimIfWg==\",\"sequence_bytes\":23598094,\"section_number\":1,\"sample_rate\":16000</em></p>\n<p>I'm able to pull the voice data out like so:\n<em>uz+ACgEAEAELgD4EQgEWAKV4mxnepfmhxKCQxAnKVNaHhKRXPIsmAH5RjXmJV0u+WTmrvgyCKxcraehjo/ZeKcFjksXQZEeOju4hLNv/MAB9KA7ww14Vc0ndYPB7dDXoXTexuxcW0Jg/diMgdH5ijWhe02Ch48KX86qJZYFyZV81AH76qCgh9AXliMdyWEgWTMbRD6xMX37WJALrXlSnxymIloSq2KGwXCcMXzQiSQIrcLVNfqdNJACCluFOIRKPmugUvsLZmnD04X0xhpAuNkwJECK4t51MBOWNWJlCAIDyZlJwWI45EPTjBB6yKyGOclu96qBV2MhFAh1d2J7WDZwe6YxOVu/BGkGcur9qTP85ZRfjANoiQxQrWvpoHFBFBy0AfX6k8XvbSwrk2nUAEP3P6kcmXORKUNKeu8HDnOUflQqtA5AkkTiun77fZrqnimIfWg==</em></p>\n<p>However this is where I'm hitting a bit of a wall. This data is in an unknown format. I've tried to do some research on what the format might be and I've found that steam started using SILK codec for voice data in 2011 - however when trying to write this data to file and open it with opus (which I believe supports SILK) the opus decoder tells me it can't open the file - so I'm not 100% convinced it is silk codec. Recognising audio data isn't something I have a great deal of experience with - so any advice would be great.</p>\n<p>I have noticed there's a VoiceDataFormatT part of the struct but the only definition I can find for it is this:</p>\n<pre><code>type VoiceDataFormatT int32\n</code></pre>\n<p>Which doesn't seem too helpful! :/</p>\n<p><em><strong>EDIT 1:</strong></em>\nAs per advice from user Ian Cook I've decoded the data from base64 into the following (as hex dump):</p>\n<p><em>BB 3F 80 0A 01 00 10 01 0B 80 3E 04 42 01 16 00 A5 78 9B 19 DE A5 F9 A1 C4 A0 90 C4 09 CA 54 D6 87 84 A4 57 3C 8B 26 00 7E 51 8D 79 89 57 4B BE 59 39 AB BE 0C 82 2B 17 2B 69 E8 63 A3 F6 5E 29 C1 63 92 C5 D0 64 47 8E 8E EE 21 2C DB FF 30 00 7D 28 0E F0 C3 5E 15 73 49 DD 60 F0 7B 74 35 E8 5D 37 B1 BB 17 16 D0 98 3F 76 23 20 74 7E 62 8D 68 5E D3 60 A1 E3 C2 97 F3 AA 89 65 81 72 65 5F 35 00 7E FA A8 28 21 F4 05 E5 88 C7 72 58 48 16 4C C6 D1 0F AC 4C 5F 7E D6 24 02 EB 5E 54 A7 C7 29 88 96 84 AA D8 A1 B0 5C 27 0C 5F 34 22 49 02 2B 70 B5 4D 7E A7 4D 24 00 82 96 E1 4E 21 12 8F 9A E8 14 BE C2 D9 9A 70 F4 E1 7D 31 86 90 2E 36 4C 09 10 22 B8 B7 9D 4C 04 E5 8D 58 99 42 00 80 F2 66 52 70 58 8E 39 10 F4 E3 04 1E B2 2B 21 8E 72 5B BD EA A0 55 D8 C8 45 02 1D 5D D8 9E D6 0D 9C 1E E9 8C 4E 56 EF C1 1A 41 9C BA BF 6A 4C FF 39 65 17 E3 00 DA 22 43 14 2B 5A FA 68 1C 50 45 07 2D 00 7D 7E A4 F1 7B DB 4B 0A E4 DA 75 00 10 FD CF EA 47 26 5C E4 4A 50 D2 9E BB C1 C3 9C E5 1F 95 0A AD 03 90 24 91 38 AE 9F BE DF 66 BA A7 8A 62 1F 5A</em></p>\n<p>I'm still at a loss as to what this information is - I've tried converting it to a wav file using ffmpeg (assuming is pcm) but it still comes out as white noise.</p>\n<p><em><strong>EDIT 2:</strong></em>\nSo it's occurred to me that it might help if I include more samples of the data - the decoded hex of the data can be found here (each sample separated by a new line character):</p>\n<p><a href=\"https://pastebin.pl/view/dc2cd332\" rel=\"nofollow noreferrer\">pastebin</a></p>\n<p>I've noticed that each one seems to start with the following hex:</p>\n<p>BB 3F 80 0A 01 00 10 01 0B 80 3E 04</p>\n<p>Which translates to:</p>\n<p>»?€\n�€&gt;</p>\n<p>I'm still at a loss as to how to convert this to audio data.</p>\n<p><em><strong>EDIT 3:</strong></em>\nI've uploaded some more datadumps to the following pastebin (<a href=\"https://pastebin.com/s0DjAyjb\" rel=\"nofollow noreferrer\">More data</a>), it's not a full dump as it's roughly 15mb and pastebin crashed when I was trying to paste!</p>\n<p>The data file is a dota2 demo file (extension .dem) which is a collection of protobuf messages that I parse using GoLang and the Manta replay parse (<a href=\"https://github.com/dotabuff/manta\" rel=\"nofollow noreferrer\">found here</a>). This allows me to pull out any type of message, and I select OnCSVCMsg_VoiceData, which returns m.Audio.VoiceData of the form: CSVCMsg_VoiceData (the struct I display above).</p>\n<p><em><strong>EDIT 4</strong></em></p>\n<p>Here's (finally) the link to the file with the <a href=\"https://drive.google.com/file/d/1jEJO0xmRd28K8NXdPwgpeszQkalcexsb/view?usp=sharing\" rel=\"nofollow noreferrer\">concatenated voiceData messages</a>.</p>\n<p>And here's the link to the <a href=\"https://drive.google.com/file/d/1mTi72fZD4o6EwBUhwQrsWbUmhZY0HeOT/view?usp=sharing\" rel=\"nofollow noreferrer\">original file of protobuff</a> messages</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "decryption"
    ],
    "user": "user6916458",
    "time": "Sep 26, 2020 at 20:09",
    "comments": [
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">The (double) '=' at the end suggests the data is base64 encoded.  Try decodiing this and looking at the resulting binary data.</span>",
            "time": null
        },
        {
            "user": "user6916458",
            "text": "<span class=\"comment-copy\">@IanCook thanks for the info - I think what I'm most lacking here is that kind of intuition! I've edited my question with the base64 decoding</span>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">Binary data is almost always best shown in the form of a hexdump.</span>",
            "time": null
        },
        {
            "user": "user6916458",
            "text": "<span class=\"comment-copy\">@IanCook sorry, I didn't realise this - I've change the info to a hex dump! Thanks</span>",
            "time": null
        },
        {
            "user": "hairlessbear",
            "text": "<span class=\"comment-copy\">Something else you could try is loading the audio blob into Audacity and seeing if it detects what it is, or gives you a hint in the right direction.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>TL;DR</strong></p>\n<ol>\n<li>Each <code>section</code> <em>n</em> indicates a separate stream of data</li>\n<li>The <code>sequence_bytes</code> value indicates the order that the frames should be placed in when decoding.</li>\n<li>The <code>voice_data</code> is base64-encoded\n<ol>\n<li>The decoded data is a SILK-encoded frame, but with the following exceptions:\n<ol>\n<li>The first 14 bytes</li>\n<li>The last 4 bytes</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>To decode the data, you must do the following:\n<ol>\n<li>For each <code>section</code> <em>n</em>, order <em>n</em>'s structs in ascending order based on the value of <code>sequence_bytes</code></li>\n<li>De-base64 each struct's <code>voice_data</code></li>\n<li>Extract the SILK payload from each struct (i.e. remove the first 14 bytes and the last 4 bytes) and concatenate them all together (again, must be in order based on <code>sequence_bytes</code>)</li>\n<li>Prepend the resulting file with <code>#!SILK_V3</code> (the SILK header)</li>\n<li>You now have a valid SILK file that can be decoded (details below)</li>\n</ol>\n</li>\n</ol>\n<p><strong>Long version</strong></p>\n<p>Using the <a href=\"https://pastebin.com/s0DjAyjb\" rel=\"nofollow noreferrer\">sample data you posted</a>, first thing I had to do was replace the final comma with a <code>]</code> to make it valid JSON.</p>\n<p>I originally used shell scripts to to convert the structs from JSON to SILK, but in the interest of efficiency, I re-implemented the conversion in Python.</p>\n<pre class=\"lang-py prettyprint-override\"><code>import json\nimport base64\nimport sys\n\ndef main():\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python3\", sys.argv[0], \"&lt;CSVCMsg_VoiceData json file&gt;\")\n        exit(1)\n\n    with open(sys.argv[1], 'r') as infile:\n        json_data = json.load(infile)\n\n    # Create dictionary with section number as the key and list of\n    # that section's structs as the value\n    section_dict = {}\n    for obj in json_data:\n        sec_num = obj['section_number']\n        if sec_num not in section_dict:\n            section_dict[sec_num] = []\n        section_dict[sec_num].append(obj)\n\n    # Create SILK file for each section number stream\n    for section in section_dict.keys():\n        filename=f\"section_{section}.slk\"\n        print(f\"Generating SILK file {filename} for section {section}...\")\n        with open(filename, 'wb') as outfile:\n            # SILK header\n            outfile.write(b\"#!SILK_V3\")\n            # Sort frames in ascending order based on sequence_bytes value\n            for frame in sorted(section_dict[section], key=lambda x : x['sequence_bytes']):\n                decoded = base64.b64decode(frame['voice_data'])\n                # strip first 14 bytes and last 4 bytes before writing\n                outfile.write(decoded[14:-4])\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>To decode SILK, I used the official SDK (that's what the decoder linked by Gordon Freeman is built on top of). The SDK can be downloaded from <a href=\"https://web.archive.org/web/20121027201101/https://developer.skype.com/silk/SILK_SDK_SRC_v1.0.9.zip\" rel=\"nofollow noreferrer\">this link</a>, which I found from <a href=\"https://web.archive.org/web/20121027201101/https://developer.skype.com//silk\" rel=\"nofollow noreferrer\">this page</a>.</p>\n<p>After I downloaded the SDK, I extracted it, went into the directory named <code>SILK_SDK_SRC_FIX_v1.0.9</code>, and ran <code>make</code> (I'm on Kali, but pretty much any Linux variant should be fine).</p>\n<p>Once <code>make</code> completes, you're left with a couple executables; the only one we care about is <code>decoder</code>.</p>\n<p>Simply run <code>decoder</code> on the SILK payloads generated above, and you'll get a pcm file you can do whatever you want with. For example, <code>./decoder section_12.slk section_12.pcm</code>. The output file is at 22050 Hz.</p>\n<p>Hat tip to @Gordon Freeman for pointing out that the header isn't 18 bytes like I originally suspected and that the last 4 bytes aren't part of the SILK payload.</p>\n<h2>Old shell scripts</h2>\n<p>For posterity, here's how I converted the JSON to SILK files with shell scripts.</p>\n<p>I used the following script to extract the data, de-base64 it, and put each struct's data in its own file.</p>\n<pre class=\"lang-sh prettyprint-override\"><code>#!/bin/bash\n\n# Write each decoded VoiceData to a file with the naming convention\n# &lt;sequence_bytes&gt;_&lt;section_number&gt;\nwrite_data ()\n{\n    filename=`echo $1 | cut -d_ -f1,2`\n    data=`echo $1 | cut -d_ -f3`\n    echo -n \"$data\" | base64 -d &gt; $filename\n}\nexport -f write_data\njq -r '.[] | \"\\(.sequence_bytes)_\\(.section_number)_\\(.voice_data)\"' dota2CasterParse.json | xargs -I '{}' bash -c \"write_data '{}'\"\n\n</code></pre>\n<p>I then used the following script to create a SILK file for each section:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>#!/bin/bash\n\nsection_numbers=$(ls [0-9]*_[0-9]* | cut -d_ -f2 | sort -u)\n\nfor section in $section_numbers; do\n    output=\"section_${section}_voiceData.slk\"\n    echo -n '#!SILK_V3' &gt; $output\n    for i in $(ls *_${section} | sort -n); do\n        dd bs=1 skip=14 count=$(($(stat -c \"%s\" $i)-18)) if=$i of=$output conv=notrunc oflag=append\n    done\ndone\n</code></pre>\n</div>",
            "votes": "2",
            "user": "hairlessbear",
            "time": "Mar 8, 2023 at 5:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user6916458",
                    "text": "<span class=\"comment-copy\">sorry for not getting back to you sooner, my internet has been terrible! I've not been able to upload the file (but will try again tomorrow when my internet should be fixed). I've done my best to implement your code on windows, but there is tow final issues I'm struggling with (1) the silk decoder crashes after some number of sample - I can get around this with simply sending one sample at a time and them ffmpeg concat - issue (2) is that when I combine all the data I end up with an audio file shorter than the duration of the game - it seems that sometime the caster isn't....</span>",
                    "time": null
                },
                {
                    "user": "user6916458",
                    "text": "<span class=\"comment-copy\">... transmitting and thus no audio packets are sent - are any of the values (eg. sequence_bytes?) likely to be something like a timestamp? Thanks for all your help so far!</span>",
                    "time": null
                },
                {
                    "user": "hairlessbear",
                    "text": "<span class=\"comment-copy\">My best guess is that <code>sequence_bytes</code> is for synchronizing the audio stream with itself, not in relation to the game. I know you extracted these structs from a larger file with many other messages, I wouldn't be surprised if the data of when to play the audio is buried in there somewhere; might be as simple as decoding each message in the exact order they were generated in, thus getting proper timing as a side effect. At the very least, I don't see anything in the struct or the decoded <code>voice_data</code> blob that looks like a timestamp.</span>",
                    "time": null
                },
                {
                    "user": "hairlessbear",
                    "text": "<span class=\"comment-copy\">That said, since I've only seen a very small amount of the data, I can't say anything with certainty. If I had all the data, maybe it would make it clear that sequence_bytes is a timestamp.</span>",
                    "time": null
                },
                {
                    "user": "user6916458",
                    "text": "<span class=\"comment-copy\">I've added links (to my google drive) to the json voicedata messages <i>and</i> the original file that this is all based on - if that's any help!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are 3 types of \"frame\", i guess 3 casters<br/>\nBB 3F 80 0A 01 00 10 01 0B 80 3E 04 42 01  (@ 0x0)<br/>\nD8 76 DD 02 01 00 10 01 0B 80 3E 04 FA 01  (@ 0x5f0)<br/>\n67 7D 11 05 01 00 10 01 0B 80 3E 04 7E 01  (@ 0x44ccf)<br/></p>\n<p>Example for the first one:<br/>\nBB 3F 80 0A identifier of the caster<br/>\n01 channel number mono<br/>\n80 3E = 0x3e80 =16000 the rate<br/>\n42 01 = 0x142 the size of silk data<br/></p>\n<p>After the size the following 0x142 bytes are the datas of silk file<br/>\njust add it silk header #!SILK_V3<br/>\n23 21 53 49 4C 4B 5F 56 33</p>\n<p>I use silk_v3_decoder.exe (? some python script can do it)<br/>\nsilk_v3_decoder.exe in.hex out.pcm -Fs_API 16000<br/>\nthen<br/>\nffmpeg  -f s16le -ar 16000 -ac 1 -i out.pcm out.wav<br/></p>\n<p>A frame represents a short time, so all the data must be concatenated<br/>\n(as said hairlessbear)</p>\n<p>Nota: at the end of the \"frame\" there is 4 bytes could be checksum</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Sep 24, 2020 at 10:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user6916458",
                    "text": "<span class=\"comment-copy\">can you advise where you got the silk_v3_decoder.exe from? I found a version on github, but both chrome and AVG are telling me it's likely malicious!</span>",
                    "time": null
                },
                {
                    "user": "Gordon Freeman",
                    "text": "<span class=\"comment-copy\"><a href=\"https://github.com/kn007/silk-v3-decoder/&lt;br\" rel=\"nofollow noreferrer\">github.com/kn007/silk-v3-decoder/&lt;br</a>&gt;  You're right but out of the 3 executables only one is malicious : silk2mp3.exe(no needed)&lt;br&gt; the other 2 silk_v3_decoder.exe and silk_v3_encoder.exe are virus free.&lt;br&gt; I downloaded the zip but I have extract with 7zip only silk_v3_decoder.exe&lt;br&gt;</span>",
                    "time": null
                },
                {
                    "user": "user6916458",
                    "text": "<span class=\"comment-copy\">I hit an issue with that because it does work on 64bit! :/</span>",
                    "time": null
                },
                {
                    "user": "Gordon Freeman",
                    "text": "<span class=\"comment-copy\">Strange, app is 32 bits works perfectly on my pc Win 10 64bits</span>",
                    "time": null
                },
                {
                    "user": "hairlessbear",
                    "text": "<span class=\"comment-copy\">I can't speak to getting this to work on Windows, but I updated my answer with a full solution I got working on Linux.</span>",
                    "time": null
                }
            ]
        }
    ]
}