{
    "title": "Recovering variable name in debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/11995/recovering-variable-name-in-debugger",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This question somehow relates to my previous <a href=\"https://reverseengineering.stackexchange.com/questions/11990/reversing-qt-application\">question</a>, but now I have a binary which is not stripped.</p>\n<p>Let's say I have the following code snippet</p>\n<pre><code>QString my_variable(\"almafa\");\nqDebug() &lt;&lt; my_variable;\n</code></pre>\n<p>Before calling the <code>&lt;&lt;</code> operator I expect that either <code>rsi</code> or <code>rdi</code> to contain the address of <code>my_variable</code>. Correct me if I am wrong.</p>\n<pre><code>   0x0000000000400aca &lt;+100&gt;:    lea    -0x60(%rbp),%rdx\n   0x0000000000400ace &lt;+104&gt;:    lea    -0x50(%rbp),%rax\n   0x0000000000400ad2 &lt;+108&gt;:    mov    %rdx,%rsi\n   0x0000000000400ad5 &lt;+111&gt;:    mov    %rax,%rdi\n   0x0000000000400ad8 &lt;+114&gt;:    callq  0x400d40 &lt;QDebug::operator&lt;&lt;(QString const&amp;)&gt;\n</code></pre>\n<p><code>strings a.out | grep my_variable</code> returns <code>my_variable</code>, so it is present in the executable. Is it somehow possible to ask <code>gdb</code> (or any other linux debugger) what is the variable name which belongs to a given address?\n<code>my_variable</code> is recognized by <code>gdb</code> since command <code>print my_variable</code> is working.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "gdb"
    ],
    "user": "robert",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was trying amritanshu's answer using the following code:</p>\n<pre><code>int z;\nint main() \n{\n    int x;\n    x = 5;\n    z = 6;\n    return 0; \n}\n</code></pre>\n<p>Please note that z is a global variable and x is a local variable.  I ran the program in gdb, paused execution of the program at the line <strong>x = 5</strong>. When I used the command</p>\n<pre><code>info address z\n</code></pre>\n<p>I got the following response:</p>\n<pre><code>Symbol \"z\" is static storage at address 0x601030.\n</code></pre>\n<p>And when I typed:</p>\n<pre><code>info symbol 0x601030\n</code></pre>\n<p>GDB displayed:</p>\n<pre><code>z in section .bss\n</code></pre>\n<p>So, the <strong>info symbol address</strong> command worked for me when examining a global variable.  But, I wasn't able to do the same thing for the local variable <strong>x</strong>.  I determined the address of <strong>x</strong> using the following command:</p>\n<pre><code>print &amp;x\n</code></pre>\n<p>When I used the address that was displayed in the <strong>info symbol</strong> command, GDB displayed</p>\n<pre><code>No symbol matches ...\n</code></pre>\n<p>So, it may depend on whether the address your examining is used for a global or local variable.  As a workaround, you can try using the command <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Frame-Info.html#Frame-Info\" rel=\"nofollow\">info locals</a>, and then use the <strong>print &amp;<em>variable</em></strong> command on each local variable that is displayed.     </p>\n<p>GDB documentation on the info commands related to examining the symbol table can be found at <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Symbols.html#Symbols\" rel=\"nofollow\">Examining the Symbol Table</a>.</p>\n</div>",
            "votes": "1",
            "user": "ashleydc",
            "time": "Mar 17, 2016 at 15:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To identify the nearest symbol for a given address you can try \"info\" command:</p>\n<p>info symbol address</p>\n</div>",
            "votes": "0",
            "user": "amritanshu",
            "time": "Feb 11, 2016 at 17:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}