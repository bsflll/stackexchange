{
    "title": "Division on ARM [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/8994/division-on-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>This question already has answers here</b>:\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/1397/how-can-i-reverse-optimized-integer-division-modulo-by-constant-operations\">How can I reverse optimized integer division/modulo by constant operations?</a>\n<span class=\"question-originals-answer-count\">\n                                (3 answers)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2018-08-25 21:27:13Z\">6 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>When performing division on ARM, this is the code snippet that I encountered.</p>\n<pre><code>   0x83d8 &lt;main+12&gt;:    mov r3, #10\n   0x83dc &lt;main+16&gt;:    str r3, [r11, #-8]\n   0x83e0 &lt;main+20&gt;:    ldr r3, [r11, #-8]\n=&gt; 0x83e4 &lt;main+24&gt;:    ldr r2, [pc, #40]   ;; 0x8414 &lt;main+72&gt;\n   0x83e8 &lt;main+28&gt;:    smull   r1, r2, r2, r3\n   0x83ec &lt;main+32&gt;:    asr r3, r3, #31\n   0x83f0 &lt;main+36&gt;:    rsb r3, r3, r2\n   0x83f4 &lt;main+40&gt;:    str r3, [r11, #-8]\n</code></pre>\n<p>In the original program, I store the value <code>10</code> to a variable, divide it by <code>3</code> and store it in the same variable.</p>\n<p><code>[r11, #-8]</code> in the above example has the value <code>0xa</code>. After <code>0x83e4</code>, r2 is loaded up as <code>0x55555556</code>. My doubts are as follows :-</p>\n<ol>\n<li>Is this a common way of performing division without the <code>div</code> instruction?</li>\n<li>What are the other ways you have encountered in which division is performed without using an instruction that performs division?</li>\n</ol>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "arm"
    ],
    "user": null,
    "time": "6 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Optimizing compilers will typically use the method above for compiling division by a constant.</p>\n<p>You can read more about it at the following links:</p>\n<ul>\n<li><a href=\"https://web.archive.org/web/20160114090130/http://blogs.msdn.com/b/devdev/archive/2005/12/12/502980.aspx\" rel=\"nofollow noreferrer\">Integer division by constants</a></li>\n<li><a href=\"https://reverseengineering.stackexchange.com/questions/1397/how-can-i-reverse-optimized-integer-division-modulo-by-constant-operations\">How can I reverse optimized integer division/modulo by constant operations?</a></li>\n<li><a href=\"http://www.nynaeve.net/?p=115\" rel=\"nofollow noreferrer\">Compiler tricks in x86 assembly</a></li>\n</ul>\n</div>",
            "votes": "2",
            "user": "Glorfindel",
            "time": "Apr 7, 2021 at 19:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}