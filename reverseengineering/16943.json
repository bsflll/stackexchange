{
    "title": "What does this assembly instruction do?",
    "link": "https://reverseengineering.stackexchange.com/questions/16943/what-does-this-assembly-instruction-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>push   %rbp\nmov    %rsp,%rbp\nmov    %rdi,-0x18(%rbp)\nmov    %rsi,-0x20(%rbp)\nmov    -0x18(%rbp),%rax\nmov    (%rax),%eax\nmov    %eax,-0x4(%rbp)\nmov    -0x20(%rbp),%rax\nmov    (%rax),%edx\nmov    -0x18(%rbp),%rax\nmov    %edx,(%rax)\nmov    -0x20(%rbp),%rax\nmov    -0x4(%rbp),%edx\nmov    %edx,(%rax)\nmov    -0x18(%rbp),%rax\nmov    (%rax),%edx\nmov    -0x20(%rbp),%rax\nmov    (%rax),%eax\nadd    %edx,%eax\npop    %rbp\nretq  \n</code></pre>\n<p>I am just looking for someone to confirm my thinking, what I am seeing happen is that parameter 1 is taken and put 18 below rbp and parameter two is taken and put 20 below rbp and then it seems to me that the parameters are set to each other as in x=y and y=x however at the very end the second parameter is set to rax and then added to edx which i believe is the first parameter and then returned. Is this correct or am i way off?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "GoldenWest",
    "time": "Dec 9, 2017 at 7:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, that seems correct. The equivalent C code would look something like:</p>\n<pre><code>int func(int *arg1, int *arg2)\n{\n    int temp = *arg1;\n    *arg1 = *arg2;\n    *arg2 = temp;\n    return *arg1 + *arg2;\n}\n</code></pre>\n<p>The use of stack-based storage indexed off of <code>rbp</code> is what we called <a href=\"https://en.wikipedia.org/wiki/Stack-based_memory_allocation\" rel=\"nofollow noreferrer\">local storage</a>. We can give each use a name to make it easier to see what is going on. Let's call the value at <code>rbp-0x18</code> local_arg1, <code>rbp-0x20</code> local_arg2 and <code>rbp-0x4</code> local_temp. By <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">calling convention</a>, <code>rdi</code> is the first argument to the function and <code>rsi</code> is the second.</p>\n<p>Adding comments where pointer dereferencing is occurring, the disassembly is then</p>\n<pre><code>push   %rbp\nmov    %rsp,%rbp         \nmov    %rdi,local_arg1\nmov    %rsi,local_arg2\nmov    local_arg1,%rax\nmov    (%rax),%eax        ; dereference the pointer i.e. eax = *arg1\nmov    %eax,local_temp\nmov    local_arg2,%rax\nmov    (%rax),%edx        ; edx = *arg2\nmov    local_arg1,%rax\nmov    %edx,(%rax)        ; *arg1 = edx\nmov    local_arg2,%rax\nmov    local_temp,%edx\nmov    %edx,(%rax)        ; *arg2 = edx\nmov    local_arg1,%rax\nmov    (%rax),%edx        ; edx = *arg1\nmov    local_arg2,%rax\nmov    (%rax),%eax        ; eax = *arg2\nadd    %edx,%eax\npop    %rbp\nretq  \n</code></pre>\n</div>",
            "votes": "2",
            "user": "cimarron",
            "time": "Dec 9, 2017 at 15:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "GoldenWest",
                    "text": "<span class=\"comment-copy\">awesome how do you know they are pointers and not just ints?</span>",
                    "time": null
                },
                {
                    "user": "GoldenWest",
                    "text": "<span class=\"comment-copy\">is it because of the (%rbp) vs %rbp stating value of ?</span>",
                    "time": null
                },
                {
                    "user": "cimarron",
                    "text": "<span class=\"comment-copy\">I updated the answer to better explain that.</span>",
                    "time": null
                },
                {
                    "user": "Omkar Nath Singh",
                    "text": "<span class=\"comment-copy\">How did you decompiled your c code to assembly and vise-versa?</span>",
                    "time": null
                },
                {
                    "user": "cimarron",
                    "text": "<span class=\"comment-copy\">No tool, I just created the C code from my experience of what compilers generate and the disassembly is very straightforward so it's pretty easy to what is going on. Any good decompiler tool should generate something similar to what I put down though.</span>",
                    "time": null
                }
            ]
        }
    ]
}