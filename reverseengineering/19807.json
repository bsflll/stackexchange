{
    "title": "Searching for a sequence of bytes in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/19807/searching-for-a-sequence-of-bytes-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using an hardware breakpoint, I found with Ollydbg that a crackme was checking for the isDebuggerPresent flag. I'd like to find this part of the code using IDA now.</p>\n<p>I first looked in the import table, but couldn't find the function in the list and came to the conclusion that the crackme was doing it directly instead of using kernel32.dll. Then I tried to use the \"sequence of bytes\" search in IDA, using the bytes in OllyDbg's hex dump view corresponding to <code>MOV EAX,DWORD PTR FS:[30]</code> (64 A1 30 00 00 00), no chance here.</p>\n<p>I must be missing something very obvious here, this is the most basic anti-debugging technique so there must be a simple way to locate it using IDA, right?</p>\n<p>Edit: Screenshot in Ollydbg\n<a href=\"https://i.sstatic.net/6Z32t.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/6Z32t.jpg\"/></a></p>\n<p>Edit: Where the check actually happens\n<a href=\"https://i.sstatic.net/ynlzA.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ynlzA.jpg\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "987",
    "tags": [
        "ida",
        "anti-debugging"
    ],
    "user": "Stud",
    "time": "Nov 3, 2018 at 10:06",
    "comments": [
        {
            "user": "Stud",
            "text": "<span class=\"comment-copy\">Yes it does. But my goal is to be able to find it using IDA too. The address where the code is in Ollydbg is not in the range of the code shown in IDA.</span>",
            "time": null
        },
        {
            "user": "Stud",
            "text": "<span class=\"comment-copy\">Sorry I though I uploaded a wrong screenshot. But this is actually where it breaks now.</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">Can you share the binary? It's very hard to help only with that information.</span>",
            "time": null
        },
        {
            "user": "Stud",
            "text": "<span class=\"comment-copy\">Sure, here's the link to the crackme: <a href=\"https://crackmes.one/crackme/5b502da833c5d41c0b8ae514\" rel=\"nofollow noreferrer\">crackmes.one/crackme/5b502da833c5d41c0b8ae514</a></span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">@Biswapriyo Read crackmes faq...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Of course you can't find it in the crackme, because the code isn't there. It's easy to determine which file the code belongs to:</p>\n<p><a href=\"https://i.sstatic.net/OdilY.png\" rel=\"nofollow noreferrer\"><img alt=\"Title bar with module name\" src=\"https://i.sstatic.net/OdilY.png\"/></a></p>\n<p>It's <code>KERNELBA</code>, so it probably comes from a system dll (<code>KERNELBASE.dll</code>?). We expect to find code in module named <code>crackme4</code> or similar.</p>\n<p>Looking at the stack, it's easy to find the address:</p>\n<p><a href=\"https://i.sstatic.net/u20XV.png\" rel=\"nofollow noreferrer\"><img alt=\"Image of stack\" src=\"https://i.sstatic.net/u20XV.png\"/></a></p>\n<p>That one is not prefixed with <code>&lt;system_module_name&gt;.</code>, so I guess it's code from the crackme.</p>\n<p>In case the stack is corrupted, it's possible to use <kbd>Alt</kbd>+<kbd>F9</kbd> (execute until user code).</p>\n<hr/>\n<p>About finding the corresponding address in IDA, it's described at <a href=\"https://reverseengineering.stackexchange.com/q/1833/25171\">this question</a>:</p>\n<blockquote>\n<p>If only the base is changed, but offsets are constant <em>[...]</em>, you can just rebase the program in IDA. You can do so by edit-&gt;segments-&gt;Rebase program ... menu. Specifying the same starting base in IDA as is in Olly should help.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p><code>Base_Address_in_OllyDbg</code>: The base address of the target module in OllyDbg. You can find this value by pressing <em>Alt-E</em> in OllyDbg (or by going to <em>View --&gt; Executable modules</em> in OllyDbg's menu bar). Find your target module in the <em>Executable modules</em> window; the leftmost field (<em>Base</em>) is the <code>Base_Address_in_OllyDbg</code>.</p>\n</blockquote>\n</div>",
            "votes": "3",
            "user": "user202729",
            "time": "Nov 4, 2018 at 13:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}