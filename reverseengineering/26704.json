{
    "title": "Assuming x is a number smaller than 0xff what happens to x after the assignment LOBYTE(x)=x-1?",
    "link": "https://reverseengineering.stackexchange.com/questions/26704/assuming-x-is-a-number-smaller-than-0xff-what-happens-to-x-after-the-assignment",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I understand that <a href=\"https://github.com/nihilus/hexrays_tools/blob/master/code/defs.h\" rel=\"nofollow noreferrer\">LOBYTE</a> is an IDA macro for retrieving the lower byte of a variable. My question is what is the difference between the result of <code>x=x-1</code> and <code>LOBYTE(x)=x-1</code> when <code>x</code> is smaller than or equal to <code>0xff</code>? I should add that I'm implicitly assuming that <code>x&gt;0</code>. Thank you!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "118",
    "tags": [
        "ida",
        "assembly",
        "c"
    ],
    "user": "Newbie",
    "time": "Jan 4, 2021 at 23:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>Quote From Link     \n#define LOBYTE(x)   (*((_BYTE*)&amp;(x))) \n</code></pre>\n<p>is that a hypothetical query x is treated as address<br/>\nso x-1 will be a 32 bit type on a x86 machine so theoretically<br/>\nyou cannot assign a 32 bit type to an 8 bit type<br/>\nLOBYTE(x) will be a byte and not an address so again\ntheoretically you cannot assign a byte to a byte</p>\n<p>LOBYTE(x) is an <strong>AND</strong> operation that extracts the unsigned byte from a specific address</p>\n<pre><code>x as address    contents         LOBYTE(x)     (byte *)&amp;x = LOBYTE(x)-1\n0x00400000      0xffffffff       0x000000ff    byte[0x004000000] = 0x000000ff -1 =0x000000fe\n</code></pre>\n<p>so if you look as a DWORD <strong>0x400000 will now contain 0xfffffffe</strong></p>\n<p>demo using a python script</p>\n<pre><code>:\\&gt;cat LOBYTE.py\nimport ctypes\n\ndef LOBYTE(arg):\n    return arg.value &amp; 0x000000ff\n\nx = ctypes.c_ulong(0xffffffff)\nprint( \"x as address\" , ctypes.byref(x))\nprint( \"x holds\"  , hex(x.value))\nprint(\"result of LOBYTE(x)\", LOBYTE(x))\nx.value = ( (x.value &amp; 0xffffff00 ) | LOBYTE(x)- 1 )\nprint( \"x holds\"  , hex(x.value))\n\n\n:\\&gt;python LOBYTE.py\nx as address &lt;cparam 'P' (017CA098)&gt;\nx holds 0xffffffff\nresult of LOBYTE(x) 255\nx holds 0xfffffffe\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 5, 2021 at 17:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}