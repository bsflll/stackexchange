{
    "title": "Extracting information from a windows executable",
    "link": "https://reverseengineering.stackexchange.com/questions/13026/extracting-information-from-a-windows-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been given the task of writing a functional clone for an executable since we don't have the source code.</p>\n<p>None of the .NET tools at my disposable recognise it and loading the thing into a text editor, I see the telltale:</p>\n<pre><code>MZ...This program cannot be run in DOS mode.\n</code></pre>\n<p>Further down I see:</p>\n<pre><code>Microsoft Visual C++ Runtime Library\n</code></pre>\n<p>And further on still:</p>\n<pre><code>MultiByteToWideChar\n</code></pre>\n<p>Leading me to conclude it is a C/C++ executable. So far so good.</p>\n<p>Without wasting days trying to find a disassembler, is there anything that could help me glean any further information from this type of executable? I already know about <a href=\"https://technet.microsoft.com/en-us/sysinternals/strings.aspx\" rel=\"nofollow\">Sysinternals Strings</a> application. I've also found something that can dump the assembly code (for all the good this does me!).</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "403",
    "tags": [
        "c++",
        "c"
    ],
    "user": null,
    "time": "Jul 11, 2016 at 8:40",
    "comments": [
        {
            "user": "djgandy",
            "text": "<span class=\"comment-copy\">If you are looking for a magic bullet I have to disappoint you. The best you'll really get is IDA pro for reverse engineering and that is time consuming. The best way is probably write tests for the current exe, and then build your new exe to be compliant with the tests.</span>",
            "time": null
        },
        {
            "user": "MNS",
            "text": "<span class=\"comment-copy\">Have a look at excellent article <a href=\"https://msdn.microsoft.com/en-IN/library/ms809762.aspx\" rel=\"nofollow noreferrer\">Peering Inside the Windows Portable Executable</a> by Matt Pietrek.</span>",
            "time": null
        },
        {
            "user": "enhzflep",
            "text": "<span class=\"comment-copy\">The old tool, PEiD was often useful. IDA Pro is unparalleled - quite useful for such a task. The (IDAPro) ability to turn binary code into a flowchart doesn't exactly suck...</span>",
            "time": null
        },
        {
            "user": "Robbie Dee",
            "text": "<span class=\"comment-copy\">@djgandy My hopes weren't high. They're happy with a functional clone but they're just nervous about any undocumented edge cases...</span>",
            "time": null
        },
        {
            "user": "Spektre",
            "text": "<span class=\"comment-copy\">some apps have main functionalities located inside DLL's in such case you can use them directly and the app is just front end form calling functions from DLL's. Otherwise it is usually much faster to encode the App from scratch mirroring functionality then dive into disassembling and hoping that disassembled stuff will make some sense or even work as should.</span>",
            "time": null
        }
    ],
    "answers_data": []
}