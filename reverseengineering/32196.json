{
    "title": "unable to figure out how a windbg extension work",
    "link": "https://reverseengineering.stackexchange.com/questions/32196/unable-to-figure-out-how-a-windbg-extension-work",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to figure out how the below windbg extension works</p>\n<pre><code>!ndiskd.nbl  addr  -hexcap(or -data)\n</code></pre>\n<pre><code>kd&gt; !ndiskd.nbl ffffce8c96bde070 -hexcap\n# NET_BUFFER_LIST    ffffce8c96bde070\n# NET_BUFFER     ffffce8c96bde1f0\n# MDL    ffffce8c96bde2c8\n00000000       30 39 20 b1 97 42 11 bb 00 00 20 b2 60 12 ff 70\n00000010       34 b7 00 00\n</code></pre>\n<p>This looks quite fine because it starts with the header. The address is ffffce8c96bde3f4. But I'm unable to find or compute the value with elements in the structures. So I take a deep look at associated structs.</p>\n<pre><code>NET_BUFFER_LIST\n   +0x000 Next             : NULL\n   +0x008 FirstNetBuffer   : Oxffffce8c'96bde1f0\n   +0x000 Link             : _SLIST_HEADER\n   +0x000 NetBufferListHeader : _NET_BUFFER_LIST_HEADER\n   +0x010 Context          : Oxffffce8c'96bde2a0 _NET_BUFFER_LIST_CONTEXT\n   +0x018 ParentNetBufferList : NULL\n   +0x020 NdisPoolHandle   : ...\n   +0x030 NdisReserved     : ...\n   +0x040 ProtocolReserved : ...\n   +0x060 MiniportReserved : ...\n   +0x070 Scratch          : ...\n   +0x078 SourceHandle     : ...\n   +0x080 NblFlags         : ...\n   +0x084 ChildRefCount    : ...\n   +0x088 Flags            : ...\n   +0x08c Status           : ...\n   +0x08c NdisReserved2    : ...\n   +0x090 NetBufferListInfo : ...\n</code></pre>\n<p>FirstNetBuffer. The MDL is where system store data</p>\n<pre><code>NET_BUFFER\n   +0x000 Next             : NULL\n   +0x008 CurrentMdl       : ffffce8c96bde2c8\n   +0x010 CurrentMdlOffset : 0xec\n   +0x018 DataLength       : 0x14\n   +0x018 stDataLength     : 0x14   //The length, in bytes, of the used data space in the MDL chain\n   +0x020 MdlChain         : ffffce8c96bde2c8\n   +0x028 DataOffset       : 0xec\n   +0x000 Link             : _SLIST_HEADER\n   +0x000 NetBufferHeader  : _NET_BUFFER_HEADER\n   +0x030 ChecksumBias     : ...\n   +0x032 Reserved         : ...\n   +0x038 NdisPoolHandle   : ...\n   +0x040 NdisReserved     : ...\n   +0x050 ProtocolReserved : ...\n   +0x080 MiniportReserved : ...\n   +0x0a0 DataPhysicalAddress : ...\n   +0x0a8 SharedMemoryInfo : ...\n   +0x0a8 ScatterGatherList : ...\n</code></pre>\n<p>CurrentMdl</p>\n<pre><code>MDL \n   +0x000 Next             : NULL\n   +0x008 Size             : 0n56\n   +0x00a MdlFlags         : 0n4\n   +0x00c AllocationProcessorNumber : ...\n   +0x00e Reserved         : ...\n   +0x010 Process          : Ptr64 _EPROCESS\n   +0x018 MappedSystemVa   : Oxffffce8c'96bde308\n   +0x020 StartVa          : Oxffffce8c'96bde000\n   +0x028 ByteCount        : 0x100\n   +0x02c ByteOffset       : 0x308\n</code></pre>\n<p>OK. Now from MDL I know that system allocates 0x100 bytes for the data. And the first around 0x70 are 0s which is normal. Like I said the data starts with ffffce8c96bde3f4, if I use the Mdloffset(ec) and currentMdl(ffffce8c96bde2c8), I get ffffce8c96bde3b4. The difference is 0x40. But with all the values, I don't know where the 0x40 comes from. What might be the problem?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "61",
    "tags": [
        "windows",
        "windbg"
    ],
    "user": "anonymous bear",
    "time": "Aug 21, 2023 at 18:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The buffer is printed from CurrentMdl-&gt;MappedSystemVa+CurrentMdlOffset upto Size-CurrentOffset</p>\n<p>When there is an MDLChain the data is printed for all Next-&gt;MappedSystemVa</p>\n<p>And when posting output from windbg do not edit and insert your own address in the first dump the address starts from 0 but it should start from 308+ec == 3f4</p>\n<p>I could have answered this earlier if i saw 3f4 i was not sure how 00000000 came there so i had to verify before posting</p>\n<p>The output from !nbl xxxx -data  actually outputs the correct address not some 0x00000000</p>\n<p>a sample output</p>\n<pre><code>0: kd&gt; .lastevent\nLast event: Hit breakpoint 0\n  \n0: kd&gt; r\nndis!NdisSendNetBufferLists:\nfffff802`373b2460 44894c2420      mov     dword ptr [rsp+20h],r9d ss:0018:fffff802`38077048=00000000\n\n0: kd&gt; !nbl @rdx -data\nNET_BUFFER ffffcb8dc6f83600\n  MDL ffffcb8dc65f1180\n    ffffcb8dc65f11e2  33 33 00 00 00 16 00 0c-29 45 de 6c 86 dd 60 00  33······)E·l··`·\n    ffffcb8dc65f11f2  00 00 00 24 00 01 fe 80-00 00 00 00 00 00 db 08  ···$············\n    ffffcb8dc65f1202  d6 ac 7c b4 bc 33 ff 02-00 00 00 00 00 00 00 00  ··|··3··········\n    ffffcb8dc65f1212  00 00 00 00 00 16                                ······\n  MDL ffffcb8dc72e9a40\n    ffffcb8dc65f10ae  3a 00 05 02 00 00 01 00-8f 00 c9 83 00 00 00 01  :···············\n    ffffcb8dc65f10be  04 00 00 00 ff 02 00 00-00 00 00 00 00 00 00 01  ················\n    ffffcb8dc65f10ce  ff b4 bc 33                                      ···3\n</code></pre>\n<p>set up a Pseudo Register for ease of use</p>\n<pre><code>0: kd&gt; r? $t1 = ((ndis!_NET_BUFFER_LIST *)@rdx)-&gt;FirstNetBuffer\n</code></pre>\n<p>address of First Buffer</p>\n<pre><code>0: kd&gt; ? @@c++(@$t1-&gt;CurrentMdl-&gt;MappedSystemVa) + @@c++(@$t1-&gt;CurrentMdlOffset)\nEvaluate expression: -57665197764126 = ffffcb8d`c65f11e2\n</code></pre>\n<p>address of Second Buffer</p>\n<pre><code>0: kd&gt; ? @@c++(@$t1-&gt;MdlChain-&gt;Next-&gt;MappedSystemVa)\nEvaluate expression: -57665197764434 = ffffcb8d`c65f10ae\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 27, 2023 at 21:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}