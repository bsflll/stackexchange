{
    "title": "Mapping an external module's source code to assembly - extracting information from source code",
    "link": "https://reverseengineering.stackexchange.com/questions/5894/ida-signatures-for-openssl",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing an application, In which I found a lot of functions that belongs to the OpenSSL library. Since I have the source code for this module, I was wondering if it's possible to somehow \"extract\" the variable names, structures, function names from the source code, and sync/map it to IDA?</p>\n</div>",
    "votes": "10",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "ida",
        "assembly",
        "functions",
        "reassembly"
    ],
    "user": "lc4nt",
    "time": "Jul 6, 2024 at 1:22",
    "comments": [
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\">Most likely not. You'd probably have to build <i>the same version</i> of OpenSSL, under <i>the same version</i> of the <i>same compiler</i> with <i>the same settings</i> to get a binary that's close enough to what you're RE'ing, in order to perform any simple matching.</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">Or, you can just compile this source code with all the symbols and analyze it, diff it with what you have. I'm pretty sure even if the compiled binary will not be exactly the same, but it will be very close. To be even more close, you can try to compile with the same compiler the original binary was compiled.</span>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<span class=\"comment-copy\">Even if you compile with different settings, the order of functions will be the same. So if you can identify one function, then the following functions should be the same as the ones following before/after it in the source module.</span>",
            "time": null
        },
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">@Devolus Okey, but how can I automate this process? I mean I compiled the said module, I recognize the functions, but I can't manually name all the variables and function names.</span>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<span class=\"comment-copy\">I don't think you can automatize this, as there is no sure mapping between variables and the resulting code, especially if compiled with optimizer. I don't see why this should matter though. For reversing, it would be enough to know the signatures of the library, and if you want to make a compilable code, then you can use the source anyway, unless the code relies on some specific behaviour of that particular version, which is doubtfull imo.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>Build the module with debug symbols</li>\n<li>Load the module you built into IDA Pro and import the debug symbols</li>\n<li>Use <a href=\"http://www.zynamics.com/bindiff.html\">BinDiff</a> to port function names, etc. from the IDB of the module you built to the IDB of your target module</li>\n</ol>\n</div>",
            "votes": "8",
            "user": "Jason Geffner",
            "time": "Dec 18, 2013 at 14:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}