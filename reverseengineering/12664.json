{
    "title": "Decompiler skipping code it determined cannot be reached",
    "link": "https://reverseengineering.stackexchange.com/questions/12664/decompiler-skipping-code-it-determined-cannot-be-reached",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible to configure the decomplier so it will generate code for the entire function and not just the parts it thinks can be reached?</p>\n<p>The disassemblier sees the alternate code path, but the decomplier won't generate the code for it.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "132",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "ericg",
    "time": "May 17, 2016 at 1:38",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Can you post the whole function and its control flow graph ?</span>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">Which decompiler?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I know there is no such configuration for hex rays decompiler. However it is possible that this code was not generated because of incorrect definition of function prototype (for example the list of parameters of the function is incomplete). You can see a bit more details about this in <a href=\"https://www.hex-rays.com/products/decompiler/manual/faq.shtml#001\" rel=\"nofollow\">decompler FAQ</a> .  </p>\n<p>Another reason I can imagine is incomplete control flow graph of the function.\nThis may happen because a lot of reasons, for example incorrectly defined switch statement in it.</p>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "May 17, 2016 at 9:57",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rocky",
                    "text": "<span class=\"comment-copy\">For some systems, dead code can in fact be quite useful. An excerpt from: <a href=\"http://rocky.github.io/Deparsing-Paper.pdf\" rel=\"nofollow noreferrer\">rocky.github.io/Deparsing-Paper.pdf</a> :  A decompiler can sometimes determine which form was used in the source code by using idiosyncrasies of the compiler.  In many interpreters, since there is very little in the way of compilation and analysis, there are two constructs and the template for these will be different in order to cover the most generic situations. Even though the templates are different, after instantiation the semantics are often the same. ...</span>",
                    "time": null
                }
            ]
        }
    ]
}