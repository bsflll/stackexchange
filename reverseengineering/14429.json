{
    "title": "Writing own custome syscall/int 0x80 on x64 system",
    "link": "https://reverseengineering.stackexchange.com/questions/14429/writing-own-custome-syscall-int-0x80-on-x64-system",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there a way to write my own <code>syscall</code>/<code>int 0x80</code> without using them?\nSo, normally it goes like</p>\n<pre><code>setup registers\n...\nsyscall or int 0x80\n</code></pre>\n<p>and I am interested in doing this without <code>syscall</code>/<code>int 0x80</code></p>\n<pre><code>setup registers\ncall mysyscall\n</code></pre>\n<p>where can I find implementation of <code>syscall</code> or <code>int 0x80</code>? Or is it too low level to implement it in asm?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "994",
    "tags": [
        "assembly",
        "linux",
        "x86-64"
    ],
    "user": "re_adept",
    "time": "Jan 17, 2017 at 22:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>TL;DR:</em> These are two instructions supported <em>by</em> the CPU, you cannot implement them in assembly, as they are (or aren't) part of the assembly language you're using.</p>\n<p><em>Some more background:</em></p>\n<p>An interrupt (the assembly <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_142.html\" rel=\"nofollow noreferrer\"><code>int</code></a> instruction is causing a software interrupt) is a special event for the CPU. The CPU immediately (This is slightly inaccurate as advanced performance optimizations and low-level features are ignored for the sake of simplicity) stops executing the instruction sequence it was executing, saves the context of the current execution (such as the <code>EIP</code> and other control registers, most not directly accessible to the user), and switches to a specifically designated code sequence that is in charge of handling that specific interrupt.</p>\n<p>Examples of hardware interrupts are related to handling power, hard-disk network and other peripherals, as well as when a program fails accessing a memory region, fails with certain calculations (divide by zero), floating point errors, tries executing a privileged or an invalid instruction and many others.</p>\n<p>Additionally, a program can intentionally trigger an interrupt by using the <code>int</code> instruction which receives a single operand - the interrupt id to trigger.</p>\n<p>When an interrupt happens, the resumes execution at the address pointed by the interrupt index in the <a href=\"https://en.wikipedia.org/wiki/Interrupt_descriptor_table\" rel=\"nofollow noreferrer\">Interrupt Descriptor Table</a> (aka Interrupt Vector Table), in the case of <code>int 0x80</code>, that's the address at offset <code>0x80</code>, obviously.</p>\n<p>As interrupts are an expensive operation for the CPU (it entails a lot of bookkeeping related to theads and context switches, among other things), AMD (and later Intel) introduced the <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_313.html\" rel=\"nofollow noreferrer\"><code>sysenter</code></a> instruction (called <code>syscall</code> by Intel). That instruction keeps bookkeeping to the minimum by only raising to ring0 and executing kernel code.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jan 17, 2017 at 23:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}