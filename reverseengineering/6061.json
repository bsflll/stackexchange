{
    "title": "What is the meaning of '!' in ldm arm assembler instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/6061/what-is-the-meaning-of-in-ldm-arm-assembler-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am quite new to ARM assembly, I already saw that the bang (<code>!</code>) is used to really update a register after a computation in the addressing mode syntax, but I can't figure out what is the difference of semantics between (this output is from <code>objdump</code> so it uses <code>gas</code> syntax):</p>\n<pre><code>ldm r4!, {r0, r1, r2, r3}\n</code></pre>\n<p>And:</p>\n<pre><code>ldm r4, {r0, r1, r2, r3}\n</code></pre>\n<p>Any idea ?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "8k",
    "tags": [
        "assembly",
        "arm",
        "gas"
    ],
    "user": "perror",
    "time": "Aug 12, 2014 at 16:38",
    "comments": [
        {
            "user": "JamalS",
            "text": "<span class=\"comment-copy\">By the way, you can use Intel syntax with objdump, just specify <code>objdump -M intel</code></span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@JamalS: there's no Intel syntax for ARM</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">@JamalS: You should have noticed that register list is not something common in x86 operands. :-)</span>",
            "time": null
        },
        {
            "user": "JamalS",
            "text": "<span class=\"comment-copy\">@perror: Yes, I forgot x86 starts at r8 instead of r0 :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>!</code> denotes <em>writeback of the base register</em>. <strong>Base register</strong> is the register used to address the memory to be read or written - in your case it's <code>R4</code>. <strong>Writeback</strong> means that the base register will be updated with the delta equal to the size of transferred data.</p>\n<p>So, the instruction </p>\n<pre><code>ldm r4!, {r0, r1, r2, r3}\n</code></pre>\n<p>can be represented by the following pseudocode:</p>\n<pre><code>r0 = *(int)(r4) \nr1 = *(int)(r4+4) \nr2 = *(int)(r4+8) \nr3 = *(int)(r4+12) \nr4 = r4 + 16 // writeback (16 bytes transferred)\n</code></pre>\n<p>In the variant without <code>!</code> the writeback doesn't happen so <code>R4</code> retains the original value.</p>\n<p>In the <code>LDR</code> and <code>STR</code> instructions you may also encounter <em>pre-indexed</em> and <em>post-indexed</em> notation:</p>\n<pre><code>LDR R0, [R4, #4]  ; simple offset: R0 = *(int*)(R4+4); R4 unchanged\nLDR R0, [R4, #4]! ; pre-indexed:   R0 = *(int*)(R4+4); R4 = R4+4\nLDR R0, [R4], #4  ; post-indexed:  R0 = *(int*)(R4+0); R4 = R4+4\n</code></pre>\n<p>For more information see the <a href=\"http://www.keil.com/support/man/docs/armasm/\">ARM Assembler Guide</a>.</p>\n</div>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Aug 12, 2014 at 17:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}