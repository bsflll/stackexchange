{
    "title": "How to create function prototype that recognizes arguments passed by reference in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/11305/how-to-create-function-prototype-that-recognizes-arguments-passed-by-reference-i",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a function prototype generated by IDA that looks like this:</p>\n<p><a href=\"https://i.sstatic.net/Qav80.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Qav80.png\"/></a></p>\n<p>However, it looks like there is a struct being referenced at the instruction <strong>lea edi, [esp+290h+var_240]</strong>. I would like IDA to reference this passed address as an argument in its function prototype.</p>\n<p>I have tried the approach below, but it is clear that it does not work.</p>\n<p><a href=\"https://i.sstatic.net/lHm32.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/lHm32.png\"/></a></p>\n<p>What I would like to see is something like this</p>\n<p><a href=\"https://i.sstatic.net/yGgF1.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/yGgF1.png\"/></a></p>\n<p>Any help or suggestions would be greatly appreciated!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "x86",
        "calling-conventions"
    ],
    "user": "itsbriany",
    "time": "Nov 11, 2015 at 2:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My guess is that the function signature should be something like:</p>\n<pre><code>int __usercall Call_HTTP@&lt;eax&gt;(int x, int y, void* http_object@&lt;edi&gt;);\n</code></pre>\n<ul>\n<li><code>__usercall</code> means the calling convention for the function is not a standard one (like stdcall, cdecl, etc.) as the function passes two arguments on stack and one in edi.</li>\n<li><code>@&lt;eax&gt;</code> : function returns a value in eax register.</li>\n<li><code>int x</code> and <code>int y</code> are passed on the stack.</li>\n<li><code>void* http_object@&lt;edi&gt;</code> : http_object is a void* passed through the edi register.</li>\n</ul>\n<p>You can change the type of the <code>http_object</code> by adding a proper structure for this object to the known IDA structures and pass the real type instead of <code>void*</code>.</p>\n<p>For more information on function signature, see the IDA help on <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1361.shtml\" rel=\"nofollow\">Set function/item type</a>.</p>\n<p><strong>Edit</strong></p>\n<p>The right signature should be:</p>\n<pre><code>int __userpurge Call_HTTP@&lt;eax&gt;(int x, int y, void* http_object@&lt;edi&gt;);\n</code></pre>\n<p>As stated by @itsbriany:</p>\n<ul>\n<li>for <code>__stdcall</code> and <code>__userpurge</code> calling conventions, the callee cleans up the stack.</li>\n<li>in <code>__cdecl</code> and <code>__usercall</code> conventions, the caller cleans up the stack.</li>\n</ul>\n</div>",
            "votes": "7",
            "user": "Neitsa",
            "time": "Nov 12, 2015 at 10:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "itsbriany",
                    "text": "<span class=\"comment-copy\">Thanks, it works! I would also like to add that the calling convention would be <b><i>_userpurge</i></b> because the calling convention was originally <b>_stdcall</b>. This is because in <b><i>_stdcall</i></b> and <b>_userpurge</b>, the callee cleans up the stack. In <b><i>_cdecl</i></b> and <b>_usercall</b>, the caller cleans up the stack :)</span>",
                    "time": null
                },
                {
                    "user": "Neitsa",
                    "text": "<span class=\"comment-copy\">@itsbriany Oops, sorry for the error... Nice catch! I'll edit my post.</span>",
                    "time": null
                }
            ]
        }
    ]
}