{
    "title": "Merging elf shared-objects",
    "link": "https://reverseengineering.stackexchange.com/questions/3287/merging-elf-shared-objects",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let say I have libA.so and libB.so, is there any way for me to combine them into a single shared library libC.so that contains all exported symbols of both libA.so and libB.so?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "3k",
    "tags": [
        "linux",
        "elf"
    ],
    "user": "Krypton",
    "time": "Dec 26, 2013 at 7:43",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I assume that you do not have the source code of these libraries (just to make things clear!). But, have you access to a static version (<code>*.a</code>) of it ?</span>",
            "time": null
        },
        {
            "user": "Krypton",
            "text": "<span class=\"comment-copy\">No, I have neither source code nor static version.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Quite frankly this is rather a development (i.e. StackOverflow) question than RCE, but let me give the level of advice I can give with the level of information you provided in your question.</p>\n<p>The question is whether what you want to achieve is to have those symbols available through a single library by all means or whether you don't care <em>how</em> both sets of symbols are made available to your program(s).</p>\n<p>If you insist on the library, you could simply write <em>one</em> shared library and export the symbols from it through shallow wrapper functions, but use the dynamic loader to find them from the originating shared objects (check out <a href=\"http://linux.die.net/man/1/ldd\" rel=\"nofollow\"><code>ldd</code></a> and related man pages). It is not too difficult to find all symbol names with <a href=\"http://linux.die.net/man/1/readelf\" rel=\"nofollow\"><code>readelf --dyn-syms &lt;elf-file&gt;</code></a>/<code>readelf --syms --use-dynamic &lt;elf-file&gt;</code> (the package on Ubuntu/Debian is <code>elfutils</code>). From the output of that you can write a version script to use in your linker (e.g. <code>gcc -Wl,--version-script,script.map ...</code>).</p>\n<p>However, assuming you use the default Linux facilities with no additional magic involved, you can also abuse the <a href=\"http://linux.die.net/man/8/ld-linux\" rel=\"nofollow\"><code>ld-linux</code></a>/<a href=\"http://linux.die.net/man/8/ld.so\" rel=\"nofollow\"><code>ld.so</code></a> approach of locating the symbols. If you write a simple wrapper shell script that sets <code>LD_PRELOAD</code>, you can simply load both shared objects up front and they should - under normal circumstances - take precedence over other symbols. It's also commonly used as a debugging technique.</p>\n<p>I strongly suggest you read chapters 41 and 42 of Michael Kerrisks excellent book \"The Definitive Guide to Linux and Unix System Programming\", colloquially known as <a href=\"http://man7.org/tlpi/index.html\" rel=\"nofollow\">TLPI</a>. The respective <a href=\"http://man7.org/tlpi/code/online/all_files_by_chapter.html#ch42\" rel=\"nofollow\">source samples</a> may come in handy, too, in your case.</p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Dec 27, 2013 at 21:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}