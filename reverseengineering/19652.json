{
    "title": "GDB MI output vs. stdout",
    "link": "https://reverseengineering.stackexchange.com/questions/19652/gdb-mi-output-vs-stdout",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using GDBs machine interface (mi) to write some simple tracers/loggers.</p>\n<p>Now I ran into the problem of telling apart GDB output from text the target-program itself wrote to stdout.</p>\n<p>If I look into the documentation here: <a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html\" rel=\"nofollow noreferrer\">https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html</a></p>\n<p>it says</p>\n<blockquote>\n<p>target-stream-output is the output produced by the target program.\n  All the target output is prefixed by `@'.</p>\n</blockquote>\n<p>This is not what I observe, however. Consider this example session of running ls like so:</p>\n<pre><code>gdb -i mi ls\nstart\n</code></pre>\n<p>which gives this output:</p>\n<pre><code>...\n...\n~\"[Thread debugging using libthread_db enabled]\\n\"\nfile1.jpg  file2.jpg  file3.jpg  dir1  dir2   &lt;---(!!!)\n~\"[Inferior 1 (process 22233) exited normally]\\n\"\n=thread-exited,id=\"1\",group-id=\"i1\"\n=thread-group-exited,id=\"i1\",exit-code=\"0\"\n*stopped,reason=\"exited-normally\"\n(gdb) \n</code></pre>\n<p>As you can see, the output of the ls command was just randomly dumped into the console. Great.</p>\n<p>How can I parse this?</p>\n<p>Thanks! </p>\n<p>gdb version is 8.1</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "609",
    "tags": [
        "gdb",
        "debuggers"
    ],
    "user": "bernd feinman",
    "time": "Oct 17, 2018 at 15:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Input_002fOutput.html\" rel=\"nofollow noreferrer\">this documentation page</a> you can redirect your program stdout where-ever you want by using <code>run&gt;out_file_name</code> . This will not solve the parsing problem, but should avoid it. Using other tty then gdb's is also described there.</p>\n<p>In addition there is a simpler way to do it, with output redirection (see the first line of gdb output below). I checked it with simple program that prints to different strings to stderr and stdout :</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char ** argv)\n{\n    printf (\"\\ntest\\n\");\n    fprintf (stderr, \"stderr\\n\");\n    return 0;\n}\n</code></pre>\n<p>and here is my small debugging session results:</p>\n<pre><code>(gdb) set args 1&gt;/home/ubuntu/out.txt 2&gt; /home/ubuntu/err.txt\n(gdb) b main\nBreakpoint 1 at 0x4005b5: file ./gt.c, line 5.\n(gdb) run\nStarting program: /home/ubuntu/unittest/gt 1&gt;/home/ubuntu/out.txt 2&gt; /home/ubuntu/err.txt\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe1f8) at ./gt.c:5\n5       printf (\"\\ntest\\n\");\n(gdb) c\nContinuing.\n[Inferior 1 (process 8659) exited normally]\n(gdb) shell cat /home/ubuntu/out.txt\n\ntest\n(gdb) shell cat /home/ubuntu/err.txt\nstderr\n(gdb)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Oct 18, 2018 at 11:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}