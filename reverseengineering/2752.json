{
    "title": "Hex-Rays Decompiler: Buffer on the stack",
    "link": "https://reverseengineering.stackexchange.com/questions/2752/hex-rays-decompiler-buffer-on-the-stack",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently reversing a windows driver in order to write a Linux compatible driver for a DVB card, but I have come up against a small issue that I can work around, but if it is possible I would like to make it correct.</p>\n<p>There is a function that part of which reads the 256 byte PCI config space into a local buffer that has been allocated on the stack. The decompilation shows the output as:</p>\n<pre><code>unsigned __int16 configSpaceBuffer[128];\n\n.... SNIP ...\n\nconfigSpace-&gt;vtable-&gt;tmRegisterAccess_ConfigSpace__tmIGetReg(\n        configSpace,\n        &amp;address,\n        4,\n        configSpaceBuffer,\n        256u,\n        0)\n\n _this-&gt;field_4A = v74;\n _this-&gt;field_4C = *(unsigned __int16 *)configSpaceBuffer;\n _this-&gt;field_4E = v75;\n _this-&gt;field_50 = v77;\n _this-&gt;field_52 = v76;\n</code></pre>\n<p>Is it possible to fix the detected function variables to show the following instead?</p>\n<pre><code> _this-&gt;field_4A = configSpaceBuffer[0];\n _this-&gt;field_4C = configSpaceBuffer[1];\n _this-&gt;field_4E = configSpaceBuffer[2];\n _this-&gt;field_50 = configSpaceBuffer[6];\n _this-&gt;field_52 = configSpaceBuffer[8];\n</code></pre>\n</div>",
    "votes": "11",
    "answers": 1,
    "views": "824",
    "tags": [
        "ida",
        "hardware",
        "decompiler",
        "driver",
        "hexrays"
    ],
    "user": "Geoffrey",
    "time": "Oct 24, 2013 at 19:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found the solution. Double click the variable name (<code>configSpaceBuffer</code> in this case) which brings up the stack window for the method where you can undefine the invalid variables and then define it as an array.</p>\n<p>Here is the output after this change:</p>\n<pre><code>      _this-&gt;ConfigSpace1 = configSpaceBuffer[1];\n      _this-&gt;ConfigSpace0 = configSpaceBuffer[0];\n      _this-&gt;ConfigSpace4 = LOBYTE(configSpaceBuffer[4]);\n      _this-&gt;ConfigSpace23 = configSpaceBuffer[23];\n      _this-&gt;ConfigSpace22 = configSpaceBuffer[22];\n</code></pre>\n</div>",
            "votes": "15",
            "user": "Geoffrey",
            "time": "Sep 5, 2013 at 7:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">You don't even need to undefine the invalid variables. Once you tell IDA that <code>field_4A</code> is an array, it will automatically remove the invalid variables.</span>",
                    "time": null
                }
            ]
        }
    ]
}