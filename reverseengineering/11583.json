{
    "title": "How to get a full execution trace with Python gdb?",
    "link": "https://reverseengineering.stackexchange.com/questions/11583/how-to-get-a-full-execution-trace-with-python-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While trying to answer <a href=\"https://reverseengineering.stackexchange.com/questions/11578/reversing-self-modifying-code/11579\">another question</a>, I tried to set-up a Python script to automatize the extraction of an assembly execution trace. But, I am really not satisfied of this script and I would like to know how to improve it.</p>\n<p>First, here is the script:</p>\n<pre><code>import gdb\n\ngdb.execute('break main')\ngdb.execute('run')\n\nwhile (True):\n    gdb.write (gdb.execute('x /i $pc', to_string=True).rstrip('\\n'), gdb.STDOUT)\n    gdb.execute('stepi', to_string=False)\n    gdb.flush ()\n</code></pre>\n<p>Then, just execute:</p>\n<pre><code>$&gt; gdb -x ./script.py ./main 1&gt; log.txt\n</code></pre>\n<p>The problems that I would like to solve are as follow:</p>\n<ul>\n<li><p>First, the <code>while(True)</code> is definitely not satisfactory. I would like to stop or suspend the loop when a breakpoint or an exit is reached.</p></li>\n<li><p>Also, the way we export the list of instructions outside of <code>gdb</code> is not really satisfactory. Saving it to a file would be much better than having to redirect <code>stdout</code> to a file.</p></li>\n<li><p>Finally, be able to interact with the software, feeding it through <code>stdin</code> would also be something we want.</p></li>\n</ul>\n<p>So, if you know how to improve this script in any manner, I would be interested.</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "perror",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "langlauf.io",
            "text": "<span class=\"comment-copy\">Why don't you use PIN, valgrind, or DynamoRio?</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Why not use <code>gdb</code> if it is enough ? Moreover, PIN is for Intel architectures only, DynamoRio is not packaged for Debian, and Valgrind execution is emulated and may be biaised.</span>",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "<span class=\"comment-copy\">Do you see an easy way how your script could not only log the instructions but also the memory accesses (read and write) including the accessed values?</span>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<span class=\"comment-copy\"><a href=\"https://stackoverflow.com/questions/8841373/displaying-each-assembly-instruction-executed-in-gdb\" title=\"displaying each assembly instruction executed in gdb\">stackoverflow.com/questions/8841373/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your question really seems to be \"How to get an instruction trace with GDB\".  The use of Python appears to be incidental, except that you're using Python <em>inside</em> of GDB.</p>\n<p>GDB has native support for instruction tracing, via the <code>record</code> command.  Using the command <code>record full</code> will record all changes to the process's state, and even allow reverse debugging (i.e. backward-stepping and replay).</p>\n<p>You can find more information here:\n<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Process-Record-and-Replay.html\" rel=\"noreferrer\">https://sourceware.org/gdb/onlinedocs/gdb/Process-Record-and-Replay.html</a></p>\n<p>Separately, if you <em>would</em> like to perform single-stepping and instruction tracing with Python-inside-GDB, your best bet is to use the <code>Breakpoint</code> class and use <code>internal</code> breakpoints which do not halt the UI.  On architectures with variable-width instructions (i386, amd64) you will need to calculate the size of the current instruction.  You will also need to resolve all jump and calls targets.</p>\n<p>If you look at the GDB source code you'll see how this all works in the event loop, and it is not exposed to the Python API.  Search for <code>STEP_OVER_NONE</code> which is used for the <code>stepi</code> instruction (step exactly one machine instruction).</p>\n<p>If you're so inclined, you <em>can</em> do this in GDB with the <code>gdb.Breakpoint</code> and <code>gdb.FinishBreakpoint</code> types.  However, you end up needing to parse instruction widths (on variable-width instruction ISAs like x86), and extract jump and call targets.  GDB's Python API does not have any support for a single-step breakpoint, or resolving what the next instruction address will be.  You can do both of those things pretty easily with Capstone and Unicorn.</p>\n</div>",
            "votes": "6",
            "user": "Zach Riggle",
            "time": "Mar 22, 2016 at 18:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ciro Santilli OurBigBook.com",
                    "text": "<span class=\"comment-copy\">Note however that <code>gdb record</code> has some major limitations currently, e.g. no AVX: <a href=\"https://stackoverflow.com/questions/43750603/gdb-reverse-debugging-avx2\" title=\"gdb reverse debugging avx2\">stackoverflow.com/questions/43750603/gdb-reverse-debugging-avx2</a></span>",
                    "time": null
                }
            ]
        }
    ]
}