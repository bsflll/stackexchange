{
    "title": "Reverse engineering a Visual Basic p-code binary",
    "link": "https://reverseengineering.stackexchange.com/questions/1597/reverse-engineering-a-visual-basic-p-code-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>p-code is the intermediate code that was used in Visual Basic (before .NET). I would like to know where I can find resources/tools related to analysis of these virtual machine codes. </p>\n</div>",
    "votes": "15",
    "answers": 3,
    "views": "39k",
    "tags": [
        "decompilation",
        "visual-basic"
    ],
    "user": "viv",
    "time": "Apr 5, 2013 at 13:43",
    "comments": [
        {
            "user": "George Dima",
            "text": "<span class=\"comment-copy\">about P32Dasm , on their page, they mention \"IDA Visual Basic debugger plugin\" for debugging with IDA , but this plugin is impossible to find... does anyone know about this?</span>",
            "time": null
        },
        {
            "user": "alexanderh",
            "text": "<span class=\"comment-copy\">Here's an old RE-Reddit thread asking a similar question <a href=\"http://www.reddit.com/r/ReverseEngineering/comments/djhb7/tools_for_reversing_vb/\" rel=\"nofollow noreferrer\">reddit.com/r/ReverseEngineering/comments/djhb7/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Alex Ionescu, co-author of the latest \"Windows Internals\" book and contributor to ReactOS, wrote a good paper on the topic of VB decompilation quite a while ago. Here the <a href=\"http://web.archive.org/web/20071020232030/http://www.alex-ionescu.com/vb.pdf\" rel=\"noreferrer\">direct link to the PDF</a> (originally from <code>http://www.alex-ionescu.com/vb.pdf</code>).</p>\n<p>The paper documents the structures and constants of the file format itself and probably goes a long way in accompanying the information on <a href=\"http://web.archive.org/web/20101127044116/http://vb-decompiler.com/pcode/opcodes.php?t=1\" rel=\"noreferrer\">the opcode list from the other answer</a>.</p>\n</div>",
            "votes": "16",
            "user": "0xC0000022L",
            "time": "Jan 19, 2015 at 6:57",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>They are some tools can be useful in reversing p-code binary</p>\n<p><strong>vb-decompiler lite (free ver)</strong>: very good decompiler can be download from <a href=\"http://www.vb-decompiler.org/\">vb-decompiler official site</a></p>\n<p><strong>P32Dasm</strong>: another p-code decompiler <a href=\"http://progress-tools.x10.mx/p32dasm.html\">see here</a>\nand see below of page how they debug p-code with IDA</p>\n<p><strong>WKTVBDE</strong>: p-code debugger, I don't work with it but good to try, to download search tuts4you.com site</p>\n</div>",
            "votes": "12",
            "user": "Arash",
            "time": "Apr 5, 2013 at 13:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A very comprehensive resource on the p-code was on the site of vb vb-decompiler. Luckily there is a backup in the wayback machine, link <a href=\"http://web.archive.org/web/20101127044116/http://vb-decompiler.com/pcode/opcodes.php?t=1\" rel=\"nofollow noreferrer\">here</a>.</p>\n</div>",
            "votes": "6",
            "user": "evandrix",
            "time": "Aug 14, 2022 at 17:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}