{
    "title": "Adding automatically standard structs or enums",
    "link": "https://reverseengineering.stackexchange.com/questions/11057/adding-automatically-standard-structs-or-enums",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there any kind of IDAPython/IDC function, i.e. a programmatic method, that allows you to simulate this?</p>\n<p><kbd>Structures</kbd> -&gt; <kbd>Insert</kbd> -&gt; <kbd>Add standard structure</kbd></p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Shaddy",
    "time": "Apr 20, 2022 at 9:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For enums you can use the <code>AddEnum(idx, name, flag)</code> function to create an enum inside an IDC script or Python script. This returns an <code>enum_id</code> which you can then use to create symbolic constant using <code>AddConstEx(enum_id, name, value, bmask)</code>.</p>\n<p>After this you can then get the constant for the enum using the same <code>enum_id</code> <code>GetConstEx(enum_id, value, serial, bmask)</code>. This will return a <code>const_id</code> which can be used to set a repeatable comment for that value in the enum using <code>SetConstCmt(const_id, cmt, repeatable)</code>.</p>\n<p>A short example of using this all together can be seen in this script I use;</p>\n<pre><code>def create_enum(enum_name, member_infos, offset, increment):\n   return_id = AddEnum(-1, enum_name, 0x1100000);\n\n    if return_id == BADADDR:\n        error('Unable to create enum : %s' % enum_name)\n        return return_id\n\n    for member_info in member_infos:\n        debug(\"Attempting to create enum member and comment : %s.%s -&gt; %s\" % (enum_name, member_info[0], member_info[1]))\n\n        if AddConstEx(return_id, member_info[0], offset, -1) == 0:\n            const_id = GetConstEx(return_id, offset, 0, -1)\n\n            if const_id == -1:\n                debug('Unable to get constant id for : %s.%s' % (enum_name, member_info[0]))\n\n            else:\n                if SetConstCmt(const_id, member_info[1], 1):\n                    debug('Enum value created : %s.%s' % (enum_name, member_info[0]))\n\n                else:\n                    error('Enum value failed to have comment set : %s.%s' % (enum_name, member_info[0]))\n\n                offset += increment\n        else:\n            error('Unable to create enum member : %s.%s' % (enum_name, member_info[0]))\n            return -1\n\n    info('Finished creating enum : %s' % enum_name)\n    return return_id\n</code></pre>\n<p>This would be used as follows;</p>\n<pre><code>enum_to_create = [\n    ('enum_1', 'enum1 comment'),\n    ('enum_2', 'enum2 comment'),\n    ('enum_3', 'enum3 comment'),\n    ('enum_4', 'enum4 comment'),\n    ('enum_5', 'enum5 comment')\n]\n\ncreate_enum('enum propername', enum_to_create, -0x8, 0x4)\n</code></pre>\n<p>As for the structures, it would appear you would go a similar route though using the structure commands like <code>AddStructEx(index, name, is_union)</code> and <code>SetStrucName(sid, name)</code>, etc.</p>\n</div>",
            "votes": "2",
            "user": "diff",
            "time": "Oct 9, 2015 at 22:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Shaddy",
                    "text": "<span class=\"comment-copy\">Thanks for your post. The goal was to get a struct from a type library, meaning that we don't require to add the fields of a struct since we loaded it. Anyway, it would be useful for sure to anyone who wants to work with structs/enums :)!</span>",
                    "time": null
                },
                {
                    "user": "diff",
                    "text": "<span class=\"comment-copy\">Fair enough. Didn't realize you had the library available - I almost never do :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The modern counterparts of the functions from the original answer below are called:</p>\n<ul>\n<li><a href=\"https://hex-rays.com/products/ida/support/idadoc/174.shtml\" rel=\"nofollow noreferrer\"><code>success add_default_til(string name);</code></a></li>\n<li><a href=\"https://hex-rays.com/products/ida/support/idadoc/175.shtml\" rel=\"nofollow noreferrer\"><code>long import_type(long idx, string type_name);</code></a></li>\n</ul>\n<hr/>\n<p>I found the solution using <strong>Til2Idb</strong></p>\n<pre><code>LoadTil(\"type_library_name\") #example: mssdk\nTil2Idb(-1, \"YOUR_STRUCT_NAME_HERE\") # example: IMAGE_OPTIONAL_HEADER\n</code></pre>\n<p>The first parameter is used if you want it in a specific position of your structures list. \"-1\" means the end of the list.</p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Apr 20, 2022 at 14:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}