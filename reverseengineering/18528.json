{
    "title": "Forcefully interpret code in x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/18528/forcefully-interpret-code-in-x64dbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was just wondering if there was a way to force an interpretation of a block of code in x64dbg. </p>\n<p>The section im analyzing fluctuates between this:</p>\n<p><a href=\"https://i.sstatic.net/B90aV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/B90aV.png\"/></a></p>\n<p>and this:</p>\n<p><a href=\"https://i.sstatic.net/lMFsv.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/lMFsv.png\"/></a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "651",
    "tags": [
        "x64dbg"
    ],
    "user": "Xymistic",
    "time": "Jun 15, 2018 at 18:50",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">It's not quite clear what are you asking. Please clarify your question and what you want to achieve. Also, please mention what you already tried.</span>",
            "time": null
        },
        {
            "user": "Xymistic",
            "text": "<span class=\"comment-copy\">My question might be completely bogus - I'm not too sure but essentially: When i scroll up and down, sometimes sections of code appear as data instead of commands and they seem to swap. Is there any way for me to force x64dbg to interpret a section as code in a specific way so that instead of interpreting it like this: <a href=\"https://puu.sh/AFKL1/46fcdf5c8d.png\" rel=\"nofollow noreferrer\">puu.sh/AFKL1/46fcdf5c8d.png</a>  it is interpreted as this: <a href=\"https://puu.sh/AFKMI/5259abad45.png\" rel=\"nofollow noreferrer\">puu.sh/AFKMI/5259abad45.png</a>  (I tried to get the same addresses)</span>",
            "time": null
        },
        {
            "user": "Xymistic",
            "text": "<span class=\"comment-copy\">I haven't tried much either because I'm not too sure what exactly is happening (why the code interpretation changes?).</span>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">Seems like the code isn't aligned correctly. Give a try to right-click and then choose an option from the \"Analysis\" menu. For example, \"Analyze module (CTRL+A)\"</span>",
            "time": null
        },
        {
            "user": "Xymistic",
            "text": "<span class=\"comment-copy\">Thanks for the suggestion, however analysing the module doesn't seem to help.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are encountering the issue of <a href=\"https://stormsecurity.wordpress.com/tag/backward-disassembler\" rel=\"nofollow noreferrer\">backwards disassembly</a>. When you give x64dbg an address to disassemble at it will start decoding at exactly this address, go to the next instruction, etc.</p>\n<p>For example if you have the bytes:</p>\n<p><code>EB 00 48 83 C4 38 C3</code></p>\n<p>And you start disassembling at the first byte you will see:</p>\n<pre><code>0 | EB 00       | jmp 2\n2 | 48 83 C4 38 | add rsp,38\n6 | C3          | ret\n</code></pre>\n<p>If you start disassembling at the second byte you will see:</p>\n<pre><code>1 | 00 48 83    | add byte ptr ds:[rax-7D],cl\n4 | C4          | ???\n5 | 38 C3       | cmp bl,al\n</code></pre>\n<p>The reason you are seeing garbage like this when scolling up is that x64dbg has no idea about instruction starts and tries to heuristically determine what the previous instruction was based on the bytes. If the result of this algorithm is wrong x64dbg will disassemble at an incorrect location causing strange looking instructions. You can find the implementation of that algorithm <a href=\"https://github.com/x64dbg/x64dbg/blob/development/src/gui/Src/Disassembler/QBeaEngine.cpp#L19\" rel=\"nofollow noreferrer\">here</a>. It is based on the algorithm used inside OllyDbg.</p>\n<p>As some users suggested you can use analysis, but the results of this are not used during backwards disassembly because generally everything works fine.</p>\n</div>",
            "votes": "4",
            "user": "mrexodia",
            "time": "Jun 15, 2018 at 17:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}