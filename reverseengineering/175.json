{
    "title": "What is a FLIRT signature?",
    "link": "https://reverseengineering.stackexchange.com/questions/175/what-is-a-flirt-signature",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've seen this referenced in a couple of other questions on this site.  But what's a FLIRT signature in IDA Pro?  And when would I create my own for use?</p>\n</div>",
    "votes": "38",
    "answers": 3,
    "views": "26k",
    "tags": [
        "ida",
        "flirt-signatures"
    ],
    "user": "mrduclaw",
    "time": "Mar 23, 2013 at 8:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>FLIRT stands for <strong>Fast Library Identification and Recognition Technology</strong>.</p>\n<p>Peter explained the basics, but here's a white paper about how it's implemented:</p>\n<p><a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\">https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml</a></p>\n<blockquote>\n<p>To address those issues, we created a database of all the functions\n  from all libraries we wanted to recognize. IDA now checks, at each\n  byte of the program being disassembled, whether this byte can mark the\n  start of a standard library function. </p>\n<p>The information required by the recognition algorithm is kept in a\n  signature file. Each function is represented by a pattern. Patterns\n  are first 32 bytes of a function where all variant bytes are marked.</p>\n</blockquote>\n<p>It's somewhat old (from IDA 3.6) but the basics still apply.</p>\n<p>To create your own signatures, you'll need FLAIR tools, which can be downloaded separately.<br/>\n(FLAIR means Fast Library Acquisition for Identification and Recognition)</p>\n<p>The IDA Pro book has <a href=\"http://my.safaribooksonline.com/9781593273750/library_recognition_using_flirt_signatur\">a chapter</a> on FLIRT and using FLAIR tools.</p>\n</div>",
            "votes": "27",
            "user": "Igor Skochinsky",
            "time": "Mar 23, 2013 at 13:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">Ah wasn't aware of that white paper. Definitely explains it better than my little comment.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A flirt signature is a pattern used to match known function headers. As an example consider the following:</p>\n<pre><code>push    ebp\nmov     ebp, esp\nsub     esp, 4Ch\nmov     [ebp+var_4], eax\npush    ebx\npush    edi\n...\n</code></pre>\n<p>The compiler is free to change any register to another one or move anything around so it all depends on what the compiler thinks is most optimal. Compiled somewhere else the compiler may choose to use other registers, for instance:</p>\n<pre><code>push    ebp\nmov     ebp, esp\nsub     esp, 4Ch\nmov     [ebp+var_4], eax\npush    ecx\npush    esi\n...\n</code></pre>\n<p>Now you have a couple of options for trying to match this. Either naively create a signature from the sequence of instructions:</p>\n<pre><code>push    X\nmov     X\nsub     X\nmov     X\npush    X\npush    X\n...\n</code></pre>\n<p>Assume stack frames use ebp and esp, which is actually more dangerous than it sounds. It's common for functions to use ebp as a general purpose register:</p>\n<pre><code>push    ebp\nmov     ebp, esp\nsub     esp, 4Ch\nmov     [ebp+var_4], X\npush    X\npush    X\n...\n</code></pre>\n<p>IDA flirt signatures are an attempt to create these sorts of signatures based off of a number of the initial bytes of a function. The problem they are trying to solve is identifying commonly re-used code. These signatures are generated by compiling various commonly used libraries using various compilers. Once the compiler produces a library IDA has tools to extract the signatures from this library while also matching it to its source definition. After a while you can build up quite a lot of signatures for common libraries which will save you quite a lot of time down the road.</p>\n<p>For a more complex solution to the related problem of identifying program similarities and differences see <a href=\"http://www.zynamics.com/bindiff.html\">BinDiff</a>. It uses much more advanced heuristics.</p>\n<p>The signature I used above as an example is fairly worthless since it's way too generic and will create a lot of false positive matches.</p>\n</div>",
            "votes": "16",
            "user": "Peter Andersson",
            "time": "Mar 23, 2013 at 9:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From the Hex-Rays site: </p>\n<pre><code>A signature file contains patterns of standard runtime functions. \nWith their help, IDA is able to recognize the standard functions and names them accordingly.\n</code></pre>\n<p>In an effort of full disclosure, I've not really created any for my own use from scratch.  I suppose one instance where creating your own might be helpful is if you have a lot of malware that is of the same family.  Typically, they write and use their own library functions and it would make sense for a FLIRT signature to help here.</p>\n<p>As an added bonus, <a href=\"https://code.google.com/p/flairdatabase/\" rel=\"nofollow\" title=\"here's\">here's</a> a public repo of FLIRT signatures.</p>\n</div>",
            "votes": "2",
            "user": "omghai2u",
            "time": "Mar 23, 2013 at 8:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">I don't think that repo contains anything :)</span>",
                    "time": null
                },
                {
                    "user": "omghai2u",
                    "text": "<span class=\"comment-copy\">Well, one can hope it would get pull requests with some advertising, right? ^_^</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hardly anymore, given Google Code has been discontinued.</span>",
                    "time": null
                }
            ]
        }
    ]
}