{
    "title": "How to extract D-Link DCS-4603 camera firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/14861/how-to-extract-d-link-dcs-4603-camera-firmware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tried extract the firmware image from the binary file available at the <a href=\"http://support.dlink.com/ProductInfo.aspx?m=DCS-4603\" rel=\"nofollow noreferrer\">D-Link DCS-4603 Vigilance Full HD PoE Dome Network Camera technical support page</a>  it by using <code>binwalk</code> but failed. Is there another way to extract the firmware? Or is there another tool that I can use? Or you can guide my extraction efforts?</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "firmware",
        "decompress"
    ],
    "user": "QChí Nguyễn",
    "time": "Mar 10, 2017 at 9:41",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">how did you \"try and failed\"? Did you get any output at all? post any details in the question.</span>",
            "time": null
        },
        {
            "user": "QChí Nguyễn",
            "text": "<span class=\"comment-copy\">It just print infomations such as: md5 file, ... but not print DECIMAL, HEXADECIMAL ,DESCRIPTION. I tried with other firmware and it work.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Recommendation: since the firmware is obfuscated, recover the bootloader</strong></p>\n<p>The firmware may be encoded, compressed, encrypted, or some combination of these. In order for the firmware image to be loaded into memory and execute, it must be deobfuscated. Since the bootloader is responsible for this, it is likely that deobfuscation of the binary file containing the firmware image is performed by a routine or set of routines within the bootloader. Locating the code handling deobfuscation will enable you to deobfuscate the binary file containing the firmware image yourself.</p>\n<p>Recovering the bootloader requires access to the hardware. Several resources exist that will guide you in your efforts to dump the bootloader from the hardware as well as locate the deobfuscation code:</p>\n<p><a href=\"http://www.devttys0.com/2012/11/reverse-engineering-serial-ports/\" rel=\"nofollow noreferrer\">Reverse Engineering Serial Ports</a></p>\n<p><a href=\"http://www.devttys0.com/2014/02/reversing-the-wrt120n-firmware-obfuscation/\" rel=\"nofollow noreferrer\">Reversing the WRT120N’s Firmware Obfuscation</a></p>\n<p><a href=\"https://blog.vectranetworks.com/blog/turning-a-webcam-into-a-backdoor\" rel=\"nofollow noreferrer\">Turning a Webcam Into a Backdoor</a></p>\n<p><a href=\"https://blog.vectranetworks.com/blog/belkin-analysis\" rel=\"nofollow noreferrer\">Belkin F9K1111 V1.04.10 Firmware Analysis</a></p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/3526/how-do-i-extract-a-copy-of-an-unknown-firmware-from-a-hardware-device?rq=1\">How do I extract a copy of an unknown firmware from a hardware device?</a></p>\n<h2>Analysis</h2>\n<p>There are 2 firmware versions available for download at the page in the link provided: </p>\n<ul>\n<li>version 1.00.00</li>\n<li>version 1.01</li>\n</ul>\n<p>Both were analyzed. </p>\n<p>The binary files are named <code>DCS-4603_A1_FW_V1.00.00.bin</code> (version 1.00) and <code>DCS-4603_A1_FW_V1.01.00.bin</code> (version 1.01) when the packages containing them are unzipped. </p>\n<p>Both files are approximately 15MB each, with version 1.01 being slightly larger than version 1.00:</p>\n<pre><code>15521100 DCS-4603_A1_FW_V1.00.00.bin\n15848708 DCS-4603_A1_FW_V1.01.00.bin\n</code></pre>\n<p><strong>1. <code>strings</code> and <code>hexdump</code></strong></p>\n<p>Preliminary analysis using <code>strings -n</code> and <code>hexdump -C</code> did not reveal beyond the absence of ASCII strings in either ~15MB file as well as no discernible file header.</p>\n<p><strong>2. Entropy Analysis</strong></p>\n<p>Entropy was consistently high throughout both files:</p>\n<p><code>DCS-4603_A1_FW_V1.00.00.bin</code>:\n<a href=\"https://i.sstatic.net/RxGaf.png\" rel=\"nofollow noreferrer\"><img alt=\"version 1.00 entropy binwalk\" src=\"https://i.sstatic.net/RxGaf.png\"/></a></p>\n<p><code>DCS-4603_A1_FW_V1.01.00.bin</code>:\n<a href=\"https://i.sstatic.net/irjP4.png\" rel=\"nofollow noreferrer\"><img alt=\"version 1.01 entropy binwalk\" src=\"https://i.sstatic.net/irjP4.png\"/></a></p>\n<p>A smooth entropy line and consistent entropy level throughout tends to indicate encryption. Reference: <a href=\"http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\" rel=\"nofollow noreferrer\">Differentiate Encryption From Compression Using Math</a>. </p>\n<p>As can be seen in the plots above, there was a perturbation in the entropy level in both files at offset ~0x002EB870. This was investigated further in when both files were diffed.</p>\n<p>These plots also show that there are no areas of very low entropy in between areas of higher entropy. Such low entropy areas can indicate padding between different types of data in the binary file.</p>\n<p><strong>3. Diffing the Binary Files</strong></p>\n<p>There are at least 2 interesting regions of commonality between the 2 binary files: the region between offset 0x00000000 and 0x000068F0 and the site of the perturbation revealed in the entropy plots above, the region between offsets 0x002EB870 and 0x002ED320.</p>\n<p>Diff of region between offsets 0x00000000 and 0x000068F0 (length of 26864 bytes):\n<a href=\"https://i.sstatic.net/mzmfD.png\" rel=\"nofollow noreferrer\"><img alt=\"begin common region 1\" src=\"https://i.sstatic.net/mzmfD.png\"/></a>\n<a href=\"https://i.sstatic.net/lgM10.png\" rel=\"nofollow noreferrer\"><img alt=\"end common region 1\" src=\"https://i.sstatic.net/lgM10.png\"/></a></p>\n<p>The first four bytes, <code>73 00 2E 30</code>, may be a signature of some kind.</p>\n<p>Diff of region between offsets 0x002EB870 and 0x002ED320 (length of 6832 bytes):\n<a href=\"https://i.sstatic.net/fc874.png\" rel=\"nofollow noreferrer\"><img alt=\"begin common region 2 - site of entropy perturbation\" src=\"https://i.sstatic.net/fc874.png\"/></a>\n<a href=\"https://i.sstatic.net/pUa4Z.png\" rel=\"nofollow noreferrer\"><img alt=\"end common region 2\" src=\"https://i.sstatic.net/pUa4Z.png\"/></a></p>\n<p>To my (very) inexperienced eye, these relatively large regions of commonality suggest compression or encoding rather than encryption of similar underlying data. </p>\n<p>Final observation: D-Link's documentation for the camera explicitly discusses encoding capability (emphasis mine):</p>\n<blockquote>\n<p>To maximize bandwidth efficiency and improve image quality, the DCS-4603 provides real-time video compression using the <strong>H.264 and MJPEG codecs</strong>, and supports separate profiles for simultaneous video streaming and recording. </p>\n</blockquote>\n<p>However, this my not play any role in how the binary file containing the firmware image is obfuscated.</p>\n<h2>Conclusion</h2>\n<p>The fastest way to decode the binary file in order to extract the firmware image seems to be dumping the bootloader and analyzing it to pinpoint the obfuscation routine(s). </p>\n<blockquote>\n<p>is there another tool that I can use?</p>\n</blockquote>\n<p><a href=\"https://github.com/rampageX/firmware-mod-kit/wiki\" rel=\"nofollow noreferrer\">firmware mod kit</a></p>\n<p><a href=\"http://aluigi.altervista.org/mytoolz/signsrch.zip\" rel=\"nofollow noreferrer\">Signsrch</a> (Windows exe)</p>\n<p><a href=\"http://seclists.org/fulldisclosure/2007/Jun/244\" rel=\"nofollow noreferrer\">deezee</a></p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}