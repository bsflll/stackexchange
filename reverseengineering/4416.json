{
    "title": "Transforming an assembly line into C",
    "link": "https://reverseengineering.stackexchange.com/questions/4416/transforming-an-assembly-line-into-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I see the assembly line:</p>\n<pre><code> MOV ESI, DWORD PTR DS:[EBP+0x8]\n</code></pre>\n<p>And, when Ollydbg shows me that <code>[EBP+0x8] = 00000000</code>, then can I write it in C like this:</p>\n<pre><code> int *esi = NULL;\n</code></pre>\n<p>Or, should I use the stack address <code>EBP + 0x8</code> which is <code>0x0012FF43</code> and write something like:</p>\n<pre><code> int *esi = &amp;0012FF43\n</code></pre>\n<p>I would say that the first is the right answer, but I am very confused about that.</p>\n</div>",
    "votes": "4",
    "answers": 5,
    "views": "569",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "user3097712",
    "time": "May 31, 2014 at 11:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Brackets mean 'contents of'... so it would be more like:</p>\n<pre><code>int esi = 0;\n</code></pre>\n<p>-or-</p>\n<pre><code>int esi = *(ebp+8); /* assuming ebp is correct */\n</code></pre>\n<p>-or-</p>\n<pre><code>int esi = (int)*(ebp+8); /* assuming ebp is (void*) or (char*)\n                            we need to pull 4 bytes to get value */\n</code></pre>\n<p>I would hope that <code>(EBP+0x8)</code> would <em>not</em> be <code>0x12FF43</code>, as the stack pointer is supposed to be aligned to 4 or 8 byte addresses (4 for 32bit cpu's, 8 for 64bit, generally 16 byte aligned in 64bit though).</p>\n<p>Odd to see a <code>DS:</code> modifier for the EBP register, as it's usually <code>SS:</code>, only works well if <code>DS=SS</code>, or both are <code>0</code>.  Nitpicky, but you have to be when playing that close to the metal.</p>\n</div>",
            "votes": "3",
            "user": "lornix",
            "time": "May 23, 2014 at 4:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lornix",
                    "text": "<span class=\"comment-copy\">Yes, can use EBP with DS:, just odd to see it used in a non-stack setting.  It's so very often used to set up a stack frame in functions, sometimes forget it's a regular full register.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">It's pretty common to not have a frame pointer and use EBP as a general purpose register. After all, ia32 is extremely register starved. Btw pointer arithmetic on void pointers is illegal so the (void *) case up there would not work and the (char *) case would simply read a char and cast to int so it would be incorrect. You need to cast to (int *) before reading the value but add to a (char *). It might also be interesting to note that if the second translation of the assembly to C was correct you'd be very likely to see a LEA instruction instead of a MOV.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>[EBX+8]</code> is the second <code>dword</code> variable of this stack frame. If it's being put in <code>esi</code> it's probably a pointer operation so maybe <code>memcpy(dest,src,0x100)</code> would include that line if <code>src</code> was set to <code>NULL</code> after being declared \n<code>char *src = argument;</code>.</p>\n<p>That's the most realistic as you don't generally access esi directly from C.</p>\n<p>Of course in my example, <code>memcpy</code> would segfault when <code>NULL</code> was dereferenced.</p>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "May 31, 2014 at 11:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "offbyseveral",
                    "text": "<span class=\"comment-copy\"><a href=\"http://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers\" title=\"purpose of esi edi registers\">stackoverflow.com/questions/1856320/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think there is a misunderstand here. <code>ESI</code> is a register not a variable, so:</p>\n<pre><code>int *esi = NULL;\n</code></pre>\n<p>If you want to assign value to <code>esi</code> in C, you should use the inline assembly brackets <code>asm {}</code>.</p>\n<p>Also, usually in OllyDbg <code>MOV ESI, DWORD PTR DS:[EBP+0x8]</code> line appears at the beginning of functions like that:</p>\n<pre><code>push ebp\nmov ebp, esp\npush esi\nmov esi, [ebp +8]\n...\n</code></pre>\n<p>That means <code>esi</code> will get the pointer of first argument of function. So, to write your line in C language, you should write a function with at least one parameter. The first parameters you pass to this functions will be value of <code>esi</code>.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 3, 2014 at 14:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>MOV ESI, DWORD PTR DS:[EBP+0x8]</code></p>\n<p><em>Load 4 bytes from <code>EBP+0x8</code> into <code>ESI</code>.</em></p>\n<p><code>ESI</code> does not become a pointer unless <code>[EBP+0x8]</code> holds an address, so without knowing that, you cant really know if you should set <code>ESI</code> to <code>NULL</code>.</p>\n<p>Its helpful while reading assembly to translate each line into C but sometimes you need to understand what types are used in the rest of the code to convert it correctly.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 3, 2014 at 14:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>let's say for example:\n<code>EBP = 00100000</code></p>\n<p>then:\n<code>EBP+8 = 00100008</code></p>\n<p>then the code become:\n<code>MOV ESI, DWORD PTR DS:[00100008]</code></p>\n<p>this means copy to the register <code>ESI</code> the dword that located in the address <code>00100008</code></p>\n<p>so you could write <code>MOV ESI, DWORD PTR DS:[00100008]</code> in c as:</p>\n<p><code>int esi = *0x00100008;</code></p>\n</div>",
            "votes": "0",
            "user": "dieSdiesneB",
            "time": "Aug 22, 2016 at 16:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}