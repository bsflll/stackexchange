{
    "title": "What does %reg:value mean in ATT assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/1990/what-does-regvalue-mean-in-att-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I disassemble a function, I encounter from time to time an expression of the form <code>%reg:value</code>. Typically, I encounter this syntax when I activate the canaries in GCC (<code>-fstack-protector</code>), as in the following example:</p>\n<pre><code>(gdb) disas\nDump of assembler code for function foo:\n   0x000000000040057c &lt;+0&gt;: push   %rbp\n   0x000000000040057d &lt;+1&gt;: mov    %rsp,%rbp\n   0x0000000000400580 &lt;+4&gt;: sub    $0x20,%rsp\n   0x0000000000400584 &lt;+8&gt;: mov    %edi,-0x14(%rbp)\n=&gt; 0x0000000000400587 &lt;+11&gt;:    mov    %fs:0x28,%rax\n   0x0000000000400590 &lt;+20&gt;:    mov    %rax,-0x8(%rbp)\n   0x0000000000400594 &lt;+24&gt;:    xor    %eax,%eax\n   0x0000000000400596 &lt;+26&gt;:    mov    $0x4006ac,%edi\n   0x000000000040059b &lt;+31&gt;:    callq  0x400440 &lt;puts@plt&gt;\n   0x00000000004005a0 &lt;+36&gt;:    mov    -0x8(%rbp),%rax\n   0x00000000004005a4 &lt;+40&gt;:    xor    %fs:0x28,%rax\n   0x00000000004005ad &lt;+49&gt;:    je     0x4005b4 &lt;foo+56&gt;\n   0x00000000004005af &lt;+51&gt;:    callq  0x400450 &lt;__stack_chk_fail@plt&gt;\n   0x00000000004005b4 &lt;+56&gt;:    leaveq \n   0x00000000004005b5 &lt;+57&gt;:    retq   \n</code></pre>\n<p>What is the meaning of this kind of syntax?</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "x86",
        "assembly"
    ],
    "user": "perror",
    "time": "May 3, 2013 at 20:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>%fs:028h</code> is actually using the form <code>segment:offset</code>, which means it is reaching the memory address at offset <code>28h</code> in the segment selected by the Far Segment <code>FS</code>.</p>\n<p>Any memory reference has an implicit segment (most of the time, <code>CS</code> for execution, <code>DS</code> for data read/write), which can be overriden by a segment prefix.</p>\n</div>",
            "votes": "6",
            "user": "Ange",
            "time": "May 3, 2013 at 8:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">This is Linux, not Windows.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">So, we could have write it: 0x28(%fs), why another syntax for the same thing ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@perror: please reread Ange's answer. <code>FS</code> is a segment register, so this syntax means an offset inside the <i>segment pointed to by <code>FS</code></i>. There's no syntax for extracting bits from a register (x86 ISA does not support operands like that). 0x28(%fs) would mean <i>value of <code>FS</code> plus 0x28</i> which is a different thing.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Okay, it means that the memory space addressed here is on the physical memory space and not the virtual one. Is it correct ?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@perror: nope. The values may differ between KM and UM. In UM you never get to see physical memory directly, unless it's a gaping security hole. <code>fs</code> and friends are usually referred to as selectors in flat address mode, since they don't quite have the same meaning as they used to in real mode.</span>",
                    "time": null
                }
            ]
        }
    ]
}