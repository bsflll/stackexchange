{
    "title": "How many registers does an x86_64 CPU actually have?",
    "link": "https://reverseengineering.stackexchange.com/questions/19693/how-many-registers-does-an-x86-64-cpu-actually-have",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently learning reverse engineering and am studying the flags register.</p>\n<p>I had in my mind that <code>rflags</code> was just another name for one of the 16 general purpose registers, for example <code>rax</code> or <code>rbx</code>.</p>\n<p>But it looks like <code>rflags</code> is actually an additional register. So that makes 17 registers in total... how many more could there be?</p>\n<p>I have spent at least an hour on this and found numerous different answers.</p>\n<p>The best answer so far is <a href=\"https://www.quora.com/How-many-registers-does-a-x86-64-processor-have/answer/Hanno-Behrens-2\" rel=\"noreferrer\">this</a>, which says that there are 40 registers in total.</p>\n<ul>\n<li>16 General Purpose Registers</li>\n<li>2 Status Registers</li>\n<li>6 Code Segment Registers</li>\n<li>16 SSE Registers</li>\n<li>8 FPU/MMX Registers</li>\n</ul>\n<p>But if I add that up, I get 48.</p>\n<p>Could anybody provide an official answer on how many registers an <code>x86_64</code> CPU has (e.g. an Intel i7).</p>\n<p>Additionally, I have seen references to 'hardware' and 'architectural' registers. What are those registers and how many are there?</p>\n</div>",
    "votes": "12",
    "answers": 2,
    "views": "20k",
    "tags": [
        "assembly",
        "register",
        "x86-64"
    ],
    "user": "rubberband876",
    "time": "Oct 23, 2018 at 6:28",
    "comments": [
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">If you know that the CPU has 10000 registers, but can actually use only ~40 of them, how is that useful? ...</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">Although OP is learning reverse engineering, this question in particular has little specifically related to reverse engineering.</span>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\"><a href=\"https://www.quora.com/How-many-registers-does-a-x86-64-processor-have\" rel=\"nofollow noreferrer\">How many registers does a x86-64 processor have?</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Wikipedia has a page about the x86 architecture and <a href=\"https://en.wikipedia.org/wiki/X86#x86_registers\" rel=\"noreferrer\">all its known registers</a>. Here is a small picture gathering all what we know about it.</p>\n<p><a href=\"https://i.sstatic.net/4GBdc.png\" rel=\"noreferrer\"><img alt=\"amd64 Registers\" src=\"https://i.sstatic.net/4GBdc.png\"/></a></p>\n<p>In fact, not all these registers are officially documented. But, all the registers we know (and we know how to use) are listed in the picture. And, it makes much more than 40.</p>\n<p>And, I do not know what are these 'hardware' or 'architectural' registers, because for me they are all 'hardware' (not software simulated). And, what we call a CPU architecture is also including the list of available hardware registers. So, up to my knowledge, they are all both hardware and architectural registers.</p>\n<h2>EDIT</h2>\n<p>Note that most of the registers are specialized and have been introduced to support a specific instruction set (the best example are the FPU registers ST0-ST7, introduced to support floating point computation).</p>\n</div>",
            "votes": "11",
            "user": "perror",
            "time": "Oct 23, 2018 at 7:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rubberband876",
                    "text": "<span class=\"comment-copy\">I like the fact you say \"known\" registers. So it looks like nobody really knows because it's not public information? Is it true that when most people say 'register', they really mean general purpose register?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">First of all, knowing what is inside hardware is really hard (see the <a href=\"https://www.youtube.com/watch?v=_eSAF_qT_FY\" rel=\"nofollow noreferrer\">Intel God-mode talk</a> given at BlackHat 2018 for example), so there is always the possibility that unknown feature are here unknown of everybody (it may be a register or an instruction). And, no, they are not all GPR, most of the registers are linked to an instruction set. The only GPR are the Rxx registers (RAX, RBX, RCX, RDX, R8, ... R15 so 12 registers in total).</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">@rubberband876 we only need to know the architectural exposed registers. Other things inside are just unnecessary implementation details. For example with <a href=\"https://en.wikipedia.org/wiki/Register_renaming\" rel=\"nofollow noreferrer\">register renaming</a> there are actually a lot more registers that maps to the running program's registers. There are also a lot of internal hardware registers to store data temporarily, like between each stage in the pipeline. Those will change between every implementation that we have no way to know</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I believe the discrepancy between 40 and actual sum of 48 is mostly an error, however there are many other registers used for handling hardware, memory management, and control of different features of the CPU. </p>\n<p>The answer you linked to covers all the commonly used registers in the following image (taken from there):</p>\n<p><a href=\"https://i.sstatic.net/s3uPi.png\" rel=\"noreferrer\"><img alt=\"commonly used registers\" src=\"https://i.sstatic.net/s3uPi.png\"/></a></p>\n<p>There are, however plenty of less commonly known registers. Those registers are not likely used by user mode programs but used to control and initialize the processor and low-level constructs the CPU is aware of. They control CPU subsystems such as the MMU unit, task scheduling, etc. Documentation of those registers can be found in the <a href=\"https://support.amd.com/techdocs/24593.pdf\" rel=\"noreferrer\">AMD64 Architecture Manual</a>.</p>\n<p>You can see most of them in the following figure, taken from the <a href=\"https://support.amd.com/techdocs/24593.pdf\" rel=\"noreferrer\">AMD64 Architecture Manual</a>:</p>\n<p><a href=\"https://i.sstatic.net/qK2sg.png\" rel=\"noreferrer\"><img alt=\"system registers\" src=\"https://i.sstatic.net/qK2sg.png\"/></a> </p>\n<p>Not in the above picture is the new Extended Control Registers family of registers, for which only <code>XCR0</code> is currently defined. </p>\n<p>The System Registers are part of the Model Specific Registers that, as the name implied, are model specific. The variety also changes between CPUs. A full list for the AMD64 architecture can be found in \"Appendix A MSR Cross-Reference\" of the <a href=\"https://support.amd.com/techdocs/24593.pdf\" rel=\"noreferrer\">AMD64 Architecture Manual</a>.</p>\n<hr/>\n<p>There are <em>extensions</em> that certain AMD64 based CPUs support/implement that extend the set of <code>XMM</code> registers available. The <code>XMM</code> (and later <code>YMM</code> and <code>ZMM</code>) are currently extended to up to 32 registers of 512 bit each in <a href=\"https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#AVX-512\" rel=\"noreferrer\">AVX-512</a>. Similar to general registers, <code>XMM</code> registers allow access to the lower parts of their <code>YMM</code> and <code>ZMM</code> counterparts.</p>\n<p>There are additionally what's called \"memory mapped registers\" which basically means those registers are accessed through memory operations instead of designated instructions. They can be, depending on your definition, countered as registers. One such example is the \"APIC Registers\" described in section 16.3.2 of the AMD64 </p>\n<p>There are even internal registers that are not exposed through the instruction set but are used for performance reasons.</p>\n</div>",
            "votes": "8",
            "user": "NirIzr",
            "time": "Oct 23, 2018 at 1:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">there are TMM registers with the new AMX extension</span>",
                    "time": null
                }
            ]
        }
    ]
}