{
    "title": "How do you efficiently record EIP of a target continuously?",
    "link": "https://reverseengineering.stackexchange.com/questions/8678/how-do-you-efficiently-record-eip-of-a-target-continuously",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Platform: Windows 7 64bit, target 32bit.</p>\n<p>I have had an idea of using data mining techniques (maybe even some primitive machine learning) on EIP data, so as to be able to correlate with something later. Just the EIP because everything else needed could later be pulled from the target process anyway as leisure (aside from stack or dynamic memory).</p>\n<p>I plan to use PCA or perhaps even a SOM for clustering.</p>\n<p>So the actual question: Is there a way to attach to a process in such a way as to be able to continuously dump EIP to file while at the same time having the least possible effect on target's performance?</p>\n<p>Thank you. </p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "316",
    "tags": [
        "debugging"
    ],
    "user": "Johnathan",
    "time": "Apr 11, 2015 at 0:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would go for Dynamic Binary Instrumentation (DBI). Logging rIP is a standard application for DBI.</p>\n<p>On windows there are at least 3 well known DBI frameworks:</p>\n<ul>\n<li><a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow\">Intel PIN</a></li>\n<li><a href=\"http://www.dynamorio.org/\" rel=\"nofollow\">DynamoRIO</a></li>\n<li><a href=\"http://www.dyninst.org/dyninst\" rel=\"nofollow\">DynInst</a></li>\n</ul>\n<p>Logging rIP for each instruction can affect target performance (I haven't precise numbers but that's probably something around a 20% to 50% slowdown). Maybe you could trace basic blocks, rather than each instruction, to reduce performance penalty.</p>\n<p>Intel PIN has at least a buffered recording so you can trace each instruction, log it's program counter in a buffer and dump the buffer when it's full so your logger is not I/O bound (everything is handled by PIN).</p>\n<p>Finally, another way would be to use a debugger (some have tracing capabilities, like ollyDBG) or program your own and raise the TF (Trap Flag) for each instruction - so you can log each executed instruction - but this will probably have a big impact on the target's performance and could be problematic for a multi-threaded application (DBI frameworks handle multi-threading well).</p>\n</div>",
            "votes": "3",
            "user": "Neitsa",
            "time": "Apr 11, 2015 at 9:23",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To add to the above from @Neitsa, there is a great post by Axel \"0vercl0k\" Souchet:</p>\n<p><a href=\"http://doar-e.github.io/blog/2013/08/31/some-thoughts-about-code-coverage-measurement-with-pin/\" rel=\"nofollow\">Some Thoughts About Code-coverage Measurement With Pin</a></p>\n<p>about using PIN for basic blocks logging with all the way explained from idea to the development POC based on PIN framework. </p>\n<p>You can definitely use the provided code there and adjust it to log all the instructions for your needs. Probably even the basic blocks logging could serve your needs in the begging.</p>\n</div>",
            "votes": "0",
            "user": "PhoeniX",
            "time": "Apr 12, 2015 at 11:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}