{
    "title": "Unknown variable from asm code",
    "link": "https://reverseengineering.stackexchange.com/questions/13332/unknown-variable-from-asm-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>During translating some asm code into pseudocode I've found two variables: $rbp-0xb4 and $rbp-0xb8</p>\n<pre><code>function check_password(arg0) {\n   var_18 = *0x28; //stack checksum?\n   if (parse_cereal(var_D0, arg0) == 0){\n   //var_B8, var_B4 from where?\n     if (var_B8 &gt; 0){\n        print_cereal(var_D0);\n        for (var_E4 = 0; var_E4 &lt;= 7; var_E4++) {\n          rbp[var_E4 * 2 - 0xe0][0:2] = rbp[var_E4 * 4 - 0xd0][0:2];//2 lower bytes\n        }\n        for (var_E4 = var_B4 + var_B8; var_E4 &gt; 0; var_E4--) {\n           MD5_Init(MD5instance);\n           MD5_Update(MD5instance, var_E0, 16);\n           MD5_Final(var_E0, MD5instance); //var_B0 = MD5instance\n        } //var_B8+var_B4 should be &lt;= 0\n        //var_B8 &gt; 0, =&gt; var_B4 should be &lt;= -var_B8\n        var_E4 = 0;\n        for(var_E4=0;var_E4 &lt;= 5;var_E4++){\n           if not(rbp[var_E4 * 2 - 0xe0][0:2] == rbp[var_E4 * 4 - 0xd0][0:2])//2 lower bytes \n           {\n             rax = 0xffffffff;\n             rbx = var_18 ^ *0x28;\n             if (rbx != 0x0) {\n             rax = __stack_chk_fail();\n             }\n             return rax;\n           }\n        }\n        else{\n          rax = 0x0;\n\n          rbx = var_18 ^ *0x28;\n          if (rbx != 0x0) {\n             rax = __stack_chk_fail();\n          }//stack check\n          return rax;\n        }\n     }\n     else{\n        puts(\"I can't take any risks with you. The counter at the end must be larger than 0000+XXXX.\");\n        rax = 0xffffffff;\n        rbx = var_18 ^ *0x28;\n        if (rbx != 0x0) {\n           rax = __stack_chk_fail();\n        }\n        return rax;\n     }\n\n}\nelse\n{\n   puts(\"That's not a cereal box. Cereals are a bit like ipv6s but LESS COMPLICATED.\");\n   rax = 0xffffffff;\n   rbx = var_18 ^ *0x28;\n   if (rbx != 0x0) {\n     rax = __stack_chk_fail();\n   }\n   return rax;\n}\n}\n</code></pre>\n<p>Looks like $rbp-0xb8 is set after parse_cereal call, but I don't know from where should I take it</p>\n<p>And here is parse_cereal pseudocode</p>\n<pre><code>function parse_cereal(arg0, arg1){ //arg1 - string to parse, arg0 where to parse \n   if(strlen(arg1)==39){\n      for(var_8=0;var_8&lt;=0x26;var_8++){\n      if (((arg1[var_8] &lt;= 0x2f) || (arg1[var_8] &gt; 0x39)){\n           if ((arg1[var_8] &lt;= 0x60) || (arg1[var_8] &gt; 0x66)){\n             if ((arg1[var_8] &lt;= 0x40) || (arg1[var_8] &gt; 0x46)){\n               if (arg1[var_8] != 0x3a){\n                  rax = 0xffffffff;\n                  return rax;\n               }\n             }\n           }\n      }\n      }\n      //check symbols range '0-9' ':' 'a-f' 'A-F'\n      for(var_8=0;var_8&lt;=7;var_8++){//0,1,\n     arg0[var_8*4] = 0; //arg0 = var_18\n     for (var_4 = 5*var_8; 4 + 5*var_8 &gt; var_4; var_4++) {\n          rdx = arg0[var_8*4];//always zero at first iteration, 4 bytes\n          rsi = arg0[var_8*4] * 16;\n          rsi += UppercaseToLowercase(arg1[var_4]);//rsi += lower(arg[1])\n          if (arg1[var_4] &lt;= 0x39) {\n            rax = 0x30;//set '0123456789' to 0\n          }\n          else {\n            rax = 0x57; //set other symbols to 'W'\n          }\n          rdx = rsi - rax;//arg0[var_8*4]=(arg0[var_8*4]*16+lower(arg1[var_4]))-rax?\n     }\n     //proceed 4 bytes\n     if not ((var_8 &gt;= 7) || (arg1[var_4] == 0x3a)){ //check if arg1[i](i=5,10,15,20,25,30,35) is ':'\n        rax = 0xffffff;\n        return rax;\n     }\n      }\n      rax = 0;\n      return rax;\n   }\n   else{\n      rax = 0xfffff;\n      return rax;\n   }\n}\n</code></pre>\n<p>Binary I'm disassembling located <a href=\"https://github.com/wapiflapi/exrs/blob/master/reverse/r8\" rel=\"nofollow\">here</a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "185",
    "tags": [
        "disassembly",
        "decompilation",
        "stack-variables",
        "hopper",
        "address"
    ],
    "user": "desu",
    "time": "Aug 21, 2016 at 15:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Finally I've found an answer.\nAfter parsing result lies into <code>$rbp-0xdo</code></p>\n<pre><code>(gdb) x/8w ((int*)($rbp-0xd0))\n0x7fffffffdf90: 0x00000000      0x00001111      0x00002222      0x00003333\n0x7fffffffdfa0: 0x00004444      0x00005555      0x00006666      0x00007777\n</code></pre>\n<p>when input is 0000:1111:2222:3333:4444:5555:6666:7777\nSo <code>$rbp-0xb8</code> (var_b8) is similar to <code>$rbp-0xd0+0x18</code>, just an offset to access part of parsed string.</p>\n</div>",
            "votes": "2",
            "user": "desu",
            "time": "Aug 21, 2016 at 18:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}