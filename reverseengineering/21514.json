{
    "title": "ACCESS_VIOLATION when attaching a debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/21514/access-violation-when-attaching-a-debugger",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm debugging a software and it hits <code>access violation</code> on <code>wcslen</code> function under debugger but runs normally without it.</p>\n<p>First I thought It had some anti-debug trick, but I could not found any indicators of that in the executable, I also could not found any anti-debug technique with <code>access violation</code>.</p>\n<p>I've tried using both <code>x64dbg</code> and <code>windbg</code>but I had same problem on both of them. I also launched them with admin privileges since I thought privileges might be needed for something but error didn't go away.</p>\n<p>Here is exact line of inside <code>wcslen</code> which causes this:</p>\n<pre><code>mov cx, word ptr ds:[eax]\n</code></pre>\n<p>and the address which <code>eax</code> points to is <code>EF415351</code> which is pretty big.</p>\n<p>So my question is, is there any anti-debug technique which involves <code>access violation</code>? How can I workaround this error?</p>\n<p>Can I patch program so that it logs <code>wcslen</code> arguments, and then I'll just compare it's argument under debugger and normal execution and maybe find something interesting.</p>\n<p><strong>P.S</strong>\nI also get same error when launching application under debugger, so attaching or running under it doesn't make any difference.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "x86"
    ],
    "user": "user28768",
    "time": "Jun 19, 2019 at 11:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>is there any anti-debug technique which involves access violation? How can I workaround this error?</p>\n</blockquote>\n<p>Yes, there is. It is called <em>Structured Exception Handler for Windows</em>. See this <a href=\"https://reverseengineering.stackexchange.com/questions/21367/debug-program-using-peculiar-anti-debugging-technique\">question</a>, where I presented an implementation of such a technique.</p>\n<p>Basically, it relies on the fact that, upon normal execution, when an excetion occurs, the control is transfered to the handler registered for such an exception and, as I illustrated in the question I gave a link to, it is possible to continue execution even, when normally program would crash. However, when run in a debugger, the exception is transfered to a debugger first, so the program doesn't receive it and behaves differently than when run without debugger attatched.</p>\n<p>So, it is possible that the program you analyse, causes the error <em>intentionally</em>. In such a case, you should be able to pass the exception to the program after debugger receives it, so it behaves like debugger wasn't present (at least in theory).</p>\n<blockquote>\n<p>Can I patch program so that it logs wcslen arguments, and then I'll just compare it's argument under debugger and normal execution and maybe find something interesting</p>\n</blockquote>\n<p>Yes, you could do so. That will show you whether the arguments are the same or not in both cases.</p>\n</div>",
            "votes": "2",
            "user": "bart1e",
            "time": "Jun 19, 2019 at 11:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user28768",
                    "text": "<span class=\"comment-copy\">thank you :) I will certianly give it a try and let you know the results.</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Of course, it would be nice if you could upload the program so we can analyse it and give a more comprehensive answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}