{
    "title": "What is the \"standard\" approach to find loop in binary code?",
    "link": "https://reverseengineering.stackexchange.com/questions/12103/what-is-the-standard-approach-to-find-loop-in-binary-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on some x86 (32/64 bits) ELF binary code. These binaries are compiled from C and C++ program code and I am trying to detect loops inside the binaries. </p>\n<p>I am newbie to this area, and I am wondering, what is the standard way to identify a loop in binary code? </p>\n<p>I prefer to use some static methods to detect the loop instances, as I am not able to generate well-performing dynamic test cases.</p>\n</div>",
    "votes": "6",
    "answers": 5,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "binary"
    ],
    "user": "lllllllllllll",
    "time": "Nov 30, 2016 at 22:48",
    "comments": [
        {
            "user": "deviantfan",
            "text": "<span class=\"comment-copy\">Why do you think there's a standard way? Optimizations can make quite a mess...</span>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\">@deviantfan, thank you. I agree with that. I am just wondering when people want to detect <code>loop</code>, what they will do? any references?</span>",
            "time": null
        },
        {
            "user": "ubnix",
            "text": "<span class=\"comment-copy\">If you can get your hands on the book Practical Malware Analysis, I suggest you to read \"Chapter 6. Recognizing C code constructs in assembly\". There you have explained all the major code constructs of C language and how to identify them while reversing.</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">I am little bit surprise about unconstructive comments here. Optimizations can make mess, obviously, but they cannot hide structures of loops as well as recursive calls.</span>",
            "time": null
        },
        {
            "user": "Joshua Taylor",
            "text": "<span class=\"comment-copy\">@TaThanhDinh If an optimization unrolls a loop so that it doesn't exist at all, there's no more loop to detect.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The classic, compiler theoretic answer to this question is to build a control flow graph and then do a graph analysis to identify natural loops. I believe algorithms for this can be found in the <a href=\"http://rads.stackoverflow.com/amzn/click/0321486811\">Dragon Book</a>, and a summary is given in these slides:</p>\n<p><a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15745-s03/public/lectures/L7_handouts.pdf\">http://www.cs.cmu.edu/afs/cs/academic/class/15745-s03/public/lectures/L7_handouts.pdf</a></p>\n<p>You can also see how LLVM implements its loop detection:</p>\n<p><a href=\"http://llvm.org/docs/doxygen/html/LoopInfo_8h_source.html\">http://llvm.org/docs/doxygen/html/LoopInfo_8h_source.html</a></p>\n<p>The search terms you want to find more information are things like \"natural loop\" and \"back edge\".</p>\n</div>",
            "votes": "8",
            "user": "Brendan Dolan-Gavitt",
            "time": "Feb 26, 2016 at 13:39",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might find <a href=\"https://reverseengineering.stackexchange.com/questions/3498/detecting-recursive-functions-in-ida\">this question</a> about finding recursive function helpful, there are very nice answers for it. Under the binary code level, IMHO, there is only little difference about detecting loop (i.e. some <code>jmp</code> to the same target) and recursive call (i.e. some <code>call</code> to the same target).</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't think there's a standard way, but one approach might be to use something like <a href=\"http://epubs.siam.org/doi/abs/10.1137/0204007\" rel=\"nofollow\">Johnson's algorithm</a> to detect cycles in the function's directed graph.</p>\n<p>You can find an implementation of this in libraries like <a href=\"https://networkx.github.io/documentation/latest/reference/generated/networkx.algorithms.cycles.simple_cycles.html\" rel=\"nofollow\">NetworkX simple_cycles</a>.</p>\n</div>",
            "votes": "2",
            "user": "broadway",
            "time": "Feb 26, 2016 at 12:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Detecting loops from binary code isn't easily done. There are many algorithms based on multiple graph data structures (CFG, SSA form, DDG, ...).\nI have provided a set of additional helpful documents <a href=\"https://www.cs.purdue.edu/homes/hosking/502/notes/16-ssaopt.pdf\" rel=\"nofollow noreferrer\">link1</a>, <a href=\"http://www.cs.colostate.edu/~cs553/ClassNotes/lecture09-control-dominators.ppt.pdf\" rel=\"nofollow noreferrer\">link2</a>, <a href=\"http://lenx.100871.net/papers/loop-SAS.pdf\" rel=\"nofollow noreferrer\">link3</a>.\nYou can check <a href=\"https://git.maqao.org/MAQAO/MAQAO/\" rel=\"nofollow noreferrer\">MAQAO</a>'s implementation of an SSA based loop detector. Also, I would recommend you checking DynInst's code and documentation <a href=\"https://github.com/dyninst/dyninst/blob/master/parseAPI/src/LoopAnalyzer.h\" rel=\"nofollow noreferrer\">link4</a>.</p>\n<p>Now, you can implement an assembly code analyzer that can detect basic blocks/loops by following branches.</p>\n<ol>\n<li><strong>Disassemble your binary and go thhrough instructions.</strong></li>\n<li><strong>If a conditional jump is encountered (Jxx pattern), check whether it jumps above or below.</strong></li>\n<li><p><strong>If the jump points above, check the distance (Delta(BRANCH_ADDRESS, BRANCH_TARGET_ADDRESS)), if the distance isn't too large (you'll have to decide of a limit) then you can apply some analysis on the branch condition (check whether it contains a register which is displaced [increment/decrement]). The branch condition analysis could be a simple pattern matching :</strong></p>\n<pre><code>   Example 1: \n             TEST X,X\n             Jxx  X\n\n   Example 2: \n             CMP  X,X\n             Jxx  X\n\n   Example 3: \n             DEC X\n             Jnz X\n</code></pre></li>\n</ol>\n<p>If it all checks out, you got yourself a basic block which has a high probability of being a loop.  </p>\n<ol start=\"4\">\n<li><strong>If the jump points below, its probability of being part of a loop control structure is less likely. You can therefore ignore it and move on to the next instruction.</strong></li>\n</ol>\n<p>If you need more hairy details, I'll be glad to provide more ;)</p>\n</div>",
            "votes": "1",
            "user": "yaspr",
            "time": "Nov 30, 2016 at 10:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Thank you yaspr. I really appreciate your detailed information!</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">It's my pleasure.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use this algo: <a href=\"https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Kosaraju's_algorithm</a></p>\n<p>You need to divide the assembler code into graphs (basic blocks) and find strongly connected graphs.\n<a href=\"https://habr.com/ru/articles/331904/\" rel=\"nofollow noreferrer\">https://habr.com/ru/articles/331904/</a></p>\n<p><a href=\"https://habr.com/ru/articles/537290/\" rel=\"nofollow noreferrer\">https://habr.com/ru/articles/537290/</a></p>\n</div>",
            "votes": "0",
            "user": "Barbosso",
            "time": "Sep 20, 2023 at 16:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}