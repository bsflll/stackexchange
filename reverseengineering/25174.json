{
    "title": "Register edx and CreateDevice function DX",
    "link": "https://reverseengineering.stackexchange.com/questions/25174/register-edx-and-createdevice-function-dx",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I disassemble CreateDevice function from my DirectX code and commented each paratemer:</p>\n<pre><code>.text:0043F485                 mov     eax, [ebp+lpParam]\n.text:0043F488                 add     eax, 730h\n.text:0043F48D                 push    eax  ;LPDIRECT3DDEVICE9\n.text:0043F48E                 mov     ecx, [ebp+lpParam]\n.text:0043F491                 add     ecx, 0B88h\n.text:0043F497                 push    ecx  ;D3DPRESENT_PARAMETERS\n.text:0043F498                 mov     edx, [ebp+var_170]\n.text:0043F49E                 push    edx  ;vertex processing type\n.text:0043F49F                 mov     eax, [ebp+lpParam]\n.text:0043F4A2                 mov     ecx, [eax+728h]\n.text:0043F4A8                 push    ecx  ;hWnd\n.text:0043F4A9                 push    1    ;D3DDEVTYPE_HAL\n.text:0043F4AB                 push    0    ;D3DADAPTER_DEFAULT\n.text:0043F4AD                 mov     edx, [ebp+lpParam]\n.text:0043F4B0                 mov     eax, [edx+734h]\n.text:0043F4B6                 mov     ecx, [ebp+lpParam]\n.text:0043F4B9                 mov     edx, [ecx+734h]\n.text:0043F4BF                 mov     eax, [eax]\n.text:0043F4C1                 push    edx  ;??????????????\n.text:0043F4C2                 mov     ecx, [eax+40h]   ;this pointer\n.text:0043F4C5                 call    ecx  ;call CreateDevice\n.text:0043F4C7                 mov     eax, [ebp+lpParam]\n.text:0043F4CA                 mov     ecx, [eax+730h];LPDIRECT3DDEVICE9 in return\n\n</code></pre>\n<p>Using experimental way I figured out LPDIRECT3DDEVICE9 variable presents in:</p>\n<pre><code>.text:0043F48D                 push    eax  ;LPDIRECT3DDEVICE9\n</code></pre>\n<p>Also, using debugger I figured out edx register:</p>\n<pre><code>.text:0043F4C1                 push    edx  ;??????????????\n</code></pre>\n<p>has value d3d9.dll:6521F191 db 0B8h what in expand view is:</p>\n<pre><code>d3d9.dll:6521F191 db 0B8h ; ¬\nd3d9.dll:6521F192 db  48h ; H\nd3d9.dll:6521F193 db  77h ; w\nd3d9.dll:6521F194 db  23h ; #\n</code></pre>\n<p>My question, why before CreateDevice function calling is there \"push edx\" line of code? In my example I used OOP and ecx is this pointer:</p>\n<pre><code>.text:0043F4C2                 mov     ecx, [eax+40h]   ;this pointer\n</code></pre>\n<p>But what purpose is this line of code:</p>\n<pre><code>.text:0043F4C1                 push    edx  ;d3d9.dll:6521F191 db 0B8h ; ¬\n</code></pre>\n<p>Is it like this pointer for DirectX COM interface or what?</p>\n<p>Thanks in advance!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "72",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "black4joss",
    "time": "May 31, 2020 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>DirectX  interfaces like  <code>IDirect3D9</code>/<code>IDirect3DDevice9</code> are <strong>COM</strong> interfaces and not C++ classes.</p>\n<p>COM (OLE2) predates the wide use of C++ and uses a C-compatible calling convention, <code>__stdcall</code>, instead of the C++specific <code>__thiscall</code>. The use of <code>ecx</code> is a red herring; here it's used to load the function pointer (IDirect3D9::CreateDevice) and jump to it, <em>not</em> as the <code>this</code> pointer. The first argument to the call (<code>push edx</code>) is the <code>This</code> pointer (the interface itself). </p>\n<p>In C syntax, the call would look like this:</p>\n<pre><code>IDirect3D9 *d3d = Direct3DCreate9(D3D_SDK_VERSION);\nIDirect3DDevice9 *pDevice;\nd3d-&gt;lpVtbl-&gt;CreateDevice(d3d, adapter, D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, BehaviorFlags, &amp;presentationParameters, &amp;pDevice);\n</code></pre>\n<p>All arguments to CreateDevice are pushed on the stack according to the <code>__stdcall</code> convention.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 31, 2020 at 17:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}