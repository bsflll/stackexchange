{
    "title": "fakenet for apps using SSL",
    "link": "https://reverseengineering.stackexchange.com/questions/20705/fakenet-for-apps-using-ssl",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>With great hopes I have tried to use fakenet-ng for testing spoofing or MITM type vulnerabilities. The android app I am testing uses HTTPS POST, and with fakenet it stops short of sending any data because the app rejects the SSL certificate presumably created by fakenet. I also tried simply with Edge and Chrome on Windows 10, and same deal - I can't get to first base. I can't find any information about fakenet and certificates. Fakenet lists decrypting SSL as a great feature - but it seems pretty useless without a solution to the certificate problem - I must be missing something - how do I get applications to send HTTPS data to fakenet?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "981",
    "tags": [
        "tools",
        "https-protocol"
    ],
    "user": "multicode",
    "time": "Feb 25, 2019 at 2:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using burpsuite for HTTPS inspection. Need to install its root cert on the phone. Most apps does not verify cert, or uses phone cert store. Windows users often use Fiddler.</p>\n<p>These tools generate a new CA cert, that needs to be moved to the phones cert store, and be trusted.</p>\n<p>In case the app downloads cert first time, and uses SSL pinninng, it is best to ensure your phone is set up to use the proxy before launching the app for the first time.</p>\n<p>All phone apps I have tried do use OS calls, so will use the system proxy. Thus MitM with data modification is trivial.</p>\n<p>If we are talking client side certs, try running unzip on the apk and see if there is a cert file in the package.</p>\n<p>Reverse engineering HTTPS is often trivial, but more and more do either HTTPS pinning, uses JWT for signon, or does other things to ensure that the request is not modified. In that case you need to really do low level reverse engineering.</p>\n</div>",
            "votes": "2",
            "user": "povlhp",
            "time": "Mar 28, 2019 at 13:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems that most of the people are better using the <a href=\"https://mitmproxy.org/\" rel=\"nofollow noreferrer\"><code>mitmproxy</code></a> tool (see <a href=\"https://docs.mitmproxy.org/stable/concepts-howmitmproxyworks/\" rel=\"nofollow noreferrer\">docs</a>) together with <a href=\"https://www.roe.ch/SSLsplit\" rel=\"nofollow noreferrer\"><code>SSLsplit</code></a> for this kind of usage.</p>\n<p>Just for the sake of completeness, here are a few pages explaining how to do:</p>\n<ul>\n<li><a href=\"https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/intercepting-ssl-and-https-traffic-with-mitmproxy-and-sslsplit/\" rel=\"nofollow noreferrer\">Intercepting SSL and HTTPS traffic with mitmproxy and SSLsplit</a>.</li>\n<li><a href=\"https://www.prodefence.org/mitm-attack-over-https-connection-with-sslstrip/\" rel=\"nofollow noreferrer\">MITM attack over HTTPS connection with SSLStrip</a>.</li>\n<li><a href=\"https://blog.heckel.xyz/2013/08/04/use-sslsplit-to-transparently-sniff-tls-ssl-connections/\" rel=\"nofollow noreferrer\">Use SSLsplit to transparently sniff TLS/SSL connections â€“ including non-HTTP(S) protocols</a>.</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Feb 25, 2019 at 10:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "multicode",
                    "text": "<span class=\"comment-copy\">Thanks. Not an answer to my question, but still helpful - I'll check out those other tools.</span>",
                    "time": null
                }
            ]
        }
    ]
}