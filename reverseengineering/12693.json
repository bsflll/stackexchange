{
    "title": "Reverse Referencing in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/12693/reverse-referencing-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse-engineer a binary. I'm interested to find its network traffic but dynamic analysis is failing. Using IDA I'm able to identify network calls but when I try to reverse its caller using <code>x</code> shortcut after couple of callers I get stuck at this point:</p>\n<pre><code>.text:00407230                 dd offset sub_40600C\n.text:00407234                 dd offset sub_403C30\n.text:00407238                 dd offset nullsub_4\n.text:0040723C                 dd offset sub_40601C\n.text:00407240                 dd offset sub_4039BC\n.text:00407244                 dd offset sub_40C294\n</code></pre>\n<p>I would like to ask how I can proceed further. </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Umer",
    "time": "May 20, 2016 at 13:35",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">See the Process Monitor comment at <a href=\"http://reverseengineering.stackexchange.com/a/11529/1562\">reverseengineering.stackexchange.com/a/11529/1562</a>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This means that these functions are called indirectly (if ever called at all).\nIf this program is written in something like C++ this may be a virtual function pointer table, and anyway such code organization usually represents table of functions used by indirect calls.</p>\n<p>If this program is written in C++ I'd suggest to read <a href=\"http://www.hexblog.com/wp-content/uploads/2011/08/Recon-2011-Skochinsky.pdf\" rel=\"nofollow\">this presentation</a> by @Igor Skochinsky - this is very educational reading.</p>\n<p>I'd proceed as follows: </p>\n<ul>\n<li>Find a references to the specific address where function address is stored.</li>\n<li>If there is no one referencing it look for the first address before the one you are working with referenced by something and inspect all references to it. </li>\n<li>You'll probably find there indirect call of one of the functions from the table or initialization of virtual function pointer table in the instance of the class.</li>\n</ul>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "May 19, 2016 at 13:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Umer",
                    "text": "<span class=\"comment-copy\">Thank you. I've read the presentation and it is very helpful. I'll try to dig more into it.</span>",
                    "time": null
                }
            ]
        }
    ]
}