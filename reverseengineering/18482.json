{
    "title": "Automatically find intput required to trigger a specific code path in a program",
    "link": "https://reverseengineering.stackexchange.com/questions/18482/automatically-find-intput-required-to-trigger-a-specific-code-path-in-a-program",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming I have the following scenario:\nI have spotted a vulnerability in a specific function deep inside of an executable (DLL). To get that code path executed (in a vulnerable context) I need to feed the program with very specific input that depends on the flow paths and checked performed at different phases in the program.</p>\n<p>What I'm looking for are some guidelines, books, material I could research which can explain me what approaches exist and how to get there.</p>\n<p>Thanks and Regards,\nDaniel</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "126",
    "tags": [
        "ida",
        "exploit"
    ],
    "user": "stacklikemind",
    "time": "Jun 8, 2018 at 2:33",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">When you say \"I need to feed the program with a very specific <i>output</i>\" do you really mean a very specific <i>input</i>? In other words, does a specific input  to the program result in the vulnerable function being called?</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">@SYS_V I think OP is asking for a method to get the input needed in order for the program to reach the vulnerable function.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">@NirIzr This sounds fuzzing-related to me. What do you think? I'm trying to understand how this is related to reverse engineering.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">@SYS_V Well, I posted an answer assuming I'm correct. ¯\\_(ツ)_/¯</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One common method of finding out the needed input to reach a specific execution flow (or a target instruction/function) is done using <a href=\"https://en.wikipedia.org/wiki/Satisfiability_modulo_theories\" rel=\"nofollow noreferrer\">SMT solvers</a>.</p>\n<p>SMT solvers are programs that accept a set of symbols, potentially conflicting conditions and a set of defined operations between them, as well as a desired outcome/target. An SMT solver will attempt to provide a \"solution\" to the given constraints, in the defined domain space.</p>\n<p>As mentioned, this topic is tightly related to <a class=\"post-tag\" href=\"/questions/tagged/fuzzing\" rel=\"tag\" title=\"show questions tagged 'fuzzing'\">fuzzing</a> and symbolic execution, of course. That is also the main context in which SMT solvers (and similar techniques/approaches) are used in the security industry. Couple folks in the industry have also spent a lot of their time on that, namely <a href=\"https://reverseengineering.stackexchange.com/users/182/rolf-rolles\">Rolf Rolles</a>.</p>\n<p>There are a few SMT solvers that are commonly used in the security industry community (that I'm aware of):</p>\n<ol>\n<li><a href=\"https://github.com/Z3Prover/z3\" rel=\"nofollow noreferrer\">Z3</a> by Microsoft is a widely known one. </li>\n<li><a href=\"https://triton.quarkslab.com/\" rel=\"nofollow noreferrer\">Triton</a> is another.</li>\n<li><a href=\"http://angr.io\" rel=\"nofollow noreferrer\">angr</a> is a library focused on lifting assembly to IR and solving constraints.</li>\n</ol>\n<p>Additionally, there are a <s>bunch</s> ton of solvers over at the <a href=\"https://en.wikipedia.org/wiki/Satisfiability_modulo_theories#SMT_solvers\" rel=\"nofollow noreferrer\">wiki page</a>.</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jul 22, 2018 at 11:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Nice. This may be relevant: <a href=\"http://deniable.org/reversing/symbolic-execution\" rel=\"nofollow noreferrer\">deniable.org/reversing/symbolic-execution</a></span>",
                    "time": null
                },
                {
                    "user": "stacklikemind",
                    "text": "<span class=\"comment-copy\">Thank you both! That's exaclty the information I was looking for!</span>",
                    "time": null
                }
            ]
        }
    ]
}