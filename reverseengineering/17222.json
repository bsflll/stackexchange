{
    "title": "What does the M68k $FBE6 instruction do on a classic Mac?",
    "link": "https://reverseengineering.stackexchange.com/questions/17222/what-does-the-m68k-fbe6-instruction-do-on-a-classic-mac",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a classic Mac OS executable where control is given to an instruction whose hex encoding is $FBE6. I have been unable to find documentation for this F-line instruction, and it doesn't appear to be a m68881 coprocessor instruction given that the coprocessor ID, which is in bits 9-11, is 0b101 = 5.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "200",
    "tags": [
        "macos"
    ],
    "user": "John Källén",
    "time": "Jan 17, 2018 at 9:03",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">do you have a piece of code with this instruction used? post a hexdump and the disassembly before/after it. Maybe post the binary if you can share it.</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Agree with the above. Without seeing the source, it might as well be a disassembly error.</span>",
            "time": null
        },
        {
            "user": "John Källén",
            "text": "<span class=\"comment-copy\">Indeed. Looking at the source of my disassembler, it's decoding a PC-relative address incorrectly, fetching non-code data, and trying to decode that.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not a complete answer, but maybe I can shed some more light on this interesting question.</p>\n<p>Digging through the 68030, 68040, 68851 (PMMU) and 68881/2 (FPU) manuals, it seems that the $FBE6 opcode is not a valid opcode for any known Motorola coprocessor.</p>\n<p>As stated in the <a href=\"http://bitsavers.informatik.uni-stuttgart.de/components/motorola/68000/68030_Users_Manual_3ed_1990.pdf\" rel=\"nofollow noreferrer\">68030 UM/AD</a> chapter 10, coprocessor ID #5 is reserved for Motorola use. The only two IDs used by Motorola seem to be 0 (PMMU AFAIK) and 1 (FPU).</p>\n<p>The \"type\" bits (8-6, see p. 10-4) have the value 7. This value does not seem to be defined, so - if I understand the documentation correctly - the CPU will throw an exception.</p>\n<p>Looking at some proprietary source code (which I can obviously not show here) derived from <a href=\"https://git.zx2c4.com/linux/plain/arch/m68k/fpsp040/x_fline.S\" rel=\"nofollow noreferrer\">Motorola's fpsp040 code</a> indicates that coprocessor IDs other than 1 are ignored in the FPU emulation F-line handler (this excerpt is from the <a href=\"https://git.zx2c4.com/linux/plain/arch/m68k/fpsp040/README\" rel=\"nofollow noreferrer\">Motorola-licensed code</a>):</p>\n<pre><code>  movel   L_SCR1(%a6),%d0  |d0 contains the fline and command word\n  bfextu  %d0{#4:#3},%d1   |extract coprocessor id\n  cmpib   #1,%d1           |check if cpid=1\n  bne     not_mvcr         |exit if not\n  ...\nnot_mvcr:\n  moveml     USER_DA(%a6),%d0-%d1/%a0-%a1 |restore data registers\n  frestore (%a7)+\n  unlk   %a6\n  addl   #4,%a7\n  bral   real_fline\n</code></pre>\n<p>The proprietary code, however, replaces the last instruction with a jump to a user-defined F-line handler. So, there is a chance that the application or OS  installed its own F-line handler for the $FBE6 opcode. It seems that the <a href=\"http://www.mactech.com/articles/develop/issue_27/balance.html\" rel=\"nofollow noreferrer\">68k emulator on PPC machines</a> used several F-line opcodes; the article linked describes the opcode $FE02 which returns from 68k emulation to PPC code. However, this uses a coprocessor ID of 7, so $FBE6 might not be related to the emulator after all.</p>\n</div>",
            "votes": "2",
            "user": null,
            "time": "Jan 21, 2018 at 13:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Line-A and Line-F instructions have been used for years to implement custom hooks for system calls. On the Atari ST, for example, Line-A was used to draw graphics. In the old MC68K Mac OS, Line-F was extensively used for all kinds of OS stuff - mostly undocumented. Hence OP's question.</span>",
                    "time": null
                },
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Indeed, my original suspicion was that I'd encountered some undocumented Line-F OS service. Alas it turned out I had a bug in my 68k disassembler that was causing it to spuriously decode data as machine code.</span>",
                    "time": null
                }
            ]
        }
    ]
}