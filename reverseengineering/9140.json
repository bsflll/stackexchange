{
    "title": "How can I extend a memory of an analysed executable in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/9140/how-can-i-extend-a-memory-of-an-analysed-executable-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm analysing some malware executable with ImmDBG and IDA Pro.</p>\n<p>The executable calls the <em>kernel32.VirtualAlloc()</em> at runtime with an argument <em>lpAddress=NULL</em> what means that an operating system decides itself where the memory has to be allocated. The <em>VirtualAlloc()</em> returns an address 0x003F0000. After that the executable writes some function to this memory, which is quite big, and I would like to analyse this function in IDA Pro.</p>\n<p>The problem is, that my executable is loaded to the 0x004010000 in IDA Pro\nand I don't know how could I extend the memory of the executable in IDA Pro in order to create this function manually(with help of PatchBytes).</p>\n<p>Also maybe it's possible somehow to build a function from a sequence of opcodes in IDA Pro?</p>\n<p>Thank you in advance!</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly",
        "malware",
        "anti-debugging",
        "immunity-debugger"
    ],
    "user": "0xDEADC0DE",
    "time": "Jun 15, 2015 at 13:09",
    "comments": [
        {
            "user": "tmr232",
            "text": "<span class=\"comment-copy\">Did you try running it using the IDA debugger? It allows you to take snapshots of the memory and keep them inside the IDB.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The most reliable solution I've found is to add a new section to the PE file and force the process to write the unpacked code into that new section in memory.</p>\n<p>I wrote up a blog post a few years ago with a full walk-through of this approach: <a href=\"http://blog.crowdstrike.com/unpacking-dynamically-allocated-code/\" rel=\"nofollow noreferrer\">http://blog.crowdstrike.com/unpacking-dynamically-allocated-code/</a></p>\n<p><img alt=\"Screenshot\" src=\"https://i.sstatic.net/dXjbZ.png\"/></p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Jun 15, 2015 at 13:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I solved this issue by creating a new section in IDA Pro (<strong>File -&gt; Segments -&gt; Create segment</strong>). After that I dumped new section in OllyDBG (binary copy) and transferred it to the new created section in IDA Pro (with a Python script). After that I could analyse the code and write comments in IDA to make better analysis and documentation.</p>\n</div>",
            "votes": "0",
            "user": "0xDEADC0DE",
            "time": "Sep 14, 2015 at 11:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}