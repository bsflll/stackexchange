{
    "title": "Help Needed With Finding Image Data In DOS Game File",
    "link": "https://reverseengineering.stackexchange.com/questions/32031/help-needed-with-finding-image-data-in-dos-game-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been analysing, an File called FW190AS.PAC from a 16 Bit Game called Secret Weapons Of The Luftwaffe, in a Hex Editor, the Bytes are displayed in Little Endian format. My aim with this game, is to eventually change The Planes shapes in the game for the outside View, i.e. they are basic Bitmap images, to other shaped Planes. There is another File called FW190A.PAC which also contains images for different views of the Plane and other info. My feeling the 'S' at the end of the name of the File, refers to Shape.</p>\n<p>Through trial and error and narrowing down byte sections in the FW190AS.PAC File, I have noticed for example, that when I change byte values, at certain positions at offset 1030 shown in the Hex Editor, one of the views at an angle of the FW190 plane i.e. Focke Wolf 190,</p>\n<p>A line attached to the plane, on the right side appears, when I look out the rear view mirror view, changing the bytes produces different coloured sections on the line, each time I change the values. Also when I Change Bytes For Offsets 1000 to 10F0, with Bytes from the Corresponding Offsets in BF109GS.PAC,\ngives a certain angle view of the BF109G, not facing forwards but Northeast for the FW190A. When I change bytes in offset 1720 in FW190AS.PAC the Upwards View looks different.</p>\n<p>Also If I do the same with the bytes, from offsets 1100 to 1400 in the BF109GS.PAC File, to offsets 1100 to 1400 in the FW190AS.PAC File I get the BF109G shown in the opening movie in the game instead of the FW190A.</p>\n<p>I also believe that the different angle Views, for the outside views of the Planes in the game, are at different offsets in the shape Files. I am convinced too, that the Bytes for the different, outside angle views of the Planes, are at different offsets for the different planes' Shape Files, as the BF109GS.PAC bytes for the offsets 1000 to 10F0, give a different view for the BF109G,\nto the bytes from 1000 to 10F0 Offsets in FW190AS.PAC, which is a forward-facing view i.e. for the FW190A. This would make sense, as the total number of offsets, is different in each plane's shape file.</p>\n<p>I have attached links to Screenshots of the FW190A, and you will notice the different Colours, in sections of the line showing out of the FW190A, in the different Screenshots. Also In the climbing Plane View changes, when changing bytes in offset 1720, changing the first byte to 07, puts a black line on the left wing, near where it is attached to the fuselage, and also a bitmap, of the original view of the FW190A.</p>\n<p>the SWOTL Plane Shape Test 19 and SWOTL Plane Shape Test 20 Screenshot Files I link to amongst others correspond to the Files I named FW190AS (19).PAC and FW190AS (20).PAC respectively, those will need to change back to FW190AS.PAC to be used in the game, choose the Scramble from Brandis Mission, in Historical Missions for the FW190A, and look out of the rearview mirror, to see the new view, it sometimes takes a few seconds, to change to that, bytes were changed at offset 1030.</p>\n<p>Here is a C Program that extracts the images from Secret Weapons of the Luftwaffe Files, and saves them as a bitmap, some are in colour most output Greyscale images:-</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;limits.h&gt;\n\n\n    #define MAX_W   600\n    #define MAX_H   300   \n    #define HEADER_SIZE     54\n    #define PALETTE_ENTRIES 256\n    #define PALETTE_SIZE    (PALETTE_ENTRIES * 4)   // 4 bytes per entry\n#define DATA_OFFSET     (HEADER_SIZE + PALETTE_SIZE)    typedef unsigned char Byte; typedef enum Mode { V1, V2 } Mode; // V1 for\nolder files, V2 for newer    typedef struct Info {\n    Byte image[MAX_H][MAX_W];\n    int  min_width, max_width;\n    int  width, height;\n    int  adder;\n    int  output_file_index;\n    int  n_palette;\n    const char *filename; } Info;    Info info = {\n    .min_width = INT_MAX,\n    .n_palette = -1,\n    .filename  = NULL }; Mode ProgramMode = V1;    void reset() {\n    memset(info.image, 0, MAX_H * MAX_W);\n    info.min_width = INT_MAX;\n    info.max_width = 0;\n    info.width = 0;\n    info.height = 0;\n    info.adder = 0; }    void default_palette(Byte *pal) {\n    const int shift = (ProgramMode == V1 ? 3 : 2);\n    for (int color = 0; color &lt; PALETTE_ENTRIES; color++) {\n        *pal++ = color &lt;&lt; shift;\n        *pal++ = color &lt;&lt; shift;\n        *pal++ = color &lt;&lt; shift;\n        *pal++ = 0;\n    } }    void fill_palette(Byte *pal, const char *infilename, int n_palette) {\n    if (n_palette == -1) {\n        default_palette(pal);\n        return;\n    }\n    FILE *f = fopen(infilename, \"rb\");\n    int byte, cnt = 0;\n    const int shift = (ProgramMode == V1 ?  3 :  2);\n    const int size  = (ProgramMode == V1 ? 32 : 64);\n    while ((byte = fgetc(f)) != EOF) {\n        if (byte == 0xFF &amp;&amp; ++cnt == n_palette) {\n            for (int i = 0; i &lt; size; ++i) {\n                int r = fgetc(f), g = fgetc(f), b = fgetc(f);\n                pal[i * 4    ] = b &lt;&lt; shift;\n                pal[i * 4 + 1] = g &lt;&lt; shift;\n                pal[i * 4 + 2] = r &lt;&lt; shift;\n            }\n            break;\n        }\n    }\n    fclose(f); }    void save_bmp() { \n    Byte header[HEADER_SIZE] = {\n        0x42, 0x4D,                  //  0: BM signature\n          -1,   -1,   -1,   -1,      //  2: filesize\n           0,    0,    0,    0,      //  6: reserved\n          -2,   -2,   -2,   -2,      // 10: offset to pixel array\n        0x28,    0,    0,    0,      // 14: DIB header size\n          -3,   -3,   -3,   -3,      // 18: width\n          -4,   -4,   -4,   -4,      // 22: height\n        0x01,    0,                  // 26: planes\n        0x08,    0                   // 28: bits per pixel\n    };\n  \n    int pad = (4 - info.max_width % 4) % 4;\n    int file_size = DATA_OFFSET + (info.max_width + pad) * info.height;\n    Byte *output = malloc(file_size);\n    memcpy(output, header, HEADER_SIZE);\n    *(int*)(output +  2) =  file_size;\n    *(int*)(output + 10) =  DATA_OFFSET;\n    *(int*)(output + 18) =  info.max_width;\n    *(int*)(output + 22) = -info.height;\n  \n    Byte *pal = output + HEADER_SIZE;\n    if (info.n_palette == -1)\n        default_palette(pal);\n    else\n        fill_palette(pal, info.filename, info.n_palette);\n \n    for (int h = 0, pos = DATA_OFFSET; h &lt; info.height; h++) {\n        for (int w = 0; w &lt; info.max_width; w++)\n            output[pos++] = info.image[h][w];\n        for (int p = 0; p &lt; pad; p++)\n            output[pos++] = 0;\n    }\n  \n    // Output filenames are: filename-outN.bmp where N is 0,1,...\n    char outfilename[100];\n    strcpy(outfilename, info.filename);\n    char *p = strrchr(outfilename, '.');\n    if (p) *p = '\\0';\n    sprintf(outfilename + strlen(outfilename), \"-out%d.bmp\",\n        info.output_file_index);\n  \n    FILE *f = fopen(outfilename, \"wb\");\n    fwrite(output, 1, file_size, f);\n    fclose(f);\n  \n    free(output); }    void add(int value) {\n    if (info.height &lt; MAX_H &amp;&amp; info.width &lt; MAX_W)\n        info.image[info.height][info.width++] = value; }    void process(FILE *fp) {\n    for (int byte, prev = 0xFF; (byte = fgetc(fp)) != EOF; prev = byte) {\n        int count, value;\n        if (prev == 0xFF)\n            printf(\"Chunk: %d\\n\", info.output_file_index);\n        switch (byte) {\n        case 0xFF: // End of image\n            if (prev == 0xFE) {\n                if (info.min_width != info.max_width)\n                    printf(\"  Error: min (%d) and max (%d) widths do not match\\n\",\n                        info.min_width, info.max_width);\n                printf(\"  Width: %d  Height: %d\\n\", info.max_width, info.height);\n                save_bmp();\n            }\n            reset();\n            ++info.output_file_index;\n            break;\n        case 0xFE: // End of image line\n            if (info.width &lt; info.min_width) info.min_width = info.width;\n            if (info.width &gt; info.max_width) info.max_width = info.width;\n            ++info.height;\n            info.width = 0;\n            break;\n        case 0xFD: // next two bytes are count-1 and value\n            count = fgetc(fp) + 1;\n            value = fgetc(fp);\n            for (int i = 0; i &lt; count; ++i) add(value);\n            break;\n        case 0xFC: // next two bytes are count-1 and value\n            value = fgetc(fp);  // orig. code had +1 here (but why?)\n            count = fgetc(fp) + 1;\n            for (int i = 0; i &lt; count; ++i) // draw dithered line\n                add(i % 2 == 0 ? value : value + 1);\n            break;\n        case 0xFB: // Set adder used in default case\n            info.adder = fgetc(fp);\n            break;\n        default:\n            if (ProgramMode == V1) {\n                value = (byte &gt;&gt; 3) + info.adder; // High 5 bits are value\n                count = (byte &amp; 7) + 1;           // Low 3 bits are count-1\n            }\n            else {\n                value = (byte &gt;&gt; 2) + info.adder; // High 6 bits are value\n                count = (byte &amp; 3) + 1;           // Low 2 bits are count-1\n            }\n            for (int i = 0; i &lt; count; ++i) add(value);\n        }\n    } }    int main(int argc, char *argv[]) {\n    if (argc &lt; 2 || argc &gt; 5) {\n        printf(\"Usage: %s [-n] [-p N] INPUT_FILE\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n  \n    while (**++argv == '-') {\n        if (strcmp(*argv, \"-n\") == 0)\n            ProgramMode = V2;\n        else if (strncmp(*argv, \"-p\", 2) == 0) {\n            if (argv[0][2])\n                info.n_palette = atoi(&amp;argv[0][2]);\n            else {\n                if (*++argv == NULL) {\n                    fprintf(stderr, \"Error: Missing parameters\\n\");\n                    exit(EXIT_FAILURE);\n                }\n                info.n_palette = atoi(*argv);\n            }\n        }\n        else {\n            fprintf(stderr, \"Error: Unknown switch: %s\\n\", *argv);\n            exit(EXIT_FAILURE);\n        }\n    }\n  \n    if (!*argv) {\n        fprintf(stderr, \"Error: No filename\\n\");\n        exit(EXIT_FAILURE);\n    }\n    info.filename = *argv;\n    FILE *fp = fopen(info.filename, \"rb\");\n    if (!fp) {\n        perror(info.filename);\n        exit(EXIT_FAILURE);\n    }\n   \n    process(fp);\n  \n    return 0; }\n</code></pre>\n<p>Could someone look at the code, and tell me any changes that could be made to the Code i.e. adapt it ?, to extract the bitmap views from the S.PAC Files i.e. the Plane Shape Files, and save them as bitmaps\nin the game ? The .PAC Files are from the FE Folder in the game, and the .PNL Files from the CP Folder. the S.PAC Files are from the AC, i.e. Aircraft Folder in the game. and I have linked to some, of the output bitmap images, of .PAC and .PNL Files.</p>\n<p>I watched the following Youtube Video, and particularly looked, at the Fonts Section of the video :-</p>\n<p><a href=\"https://www.youtube.com/watch?v=fKb_0BfKtsA&amp;t=1644s\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=fKb_0BfKtsA&amp;t=1644s</a></p>\n<p>I noticed that when I opened the BF109GS.PAC and FW190AS.PAC\nFiles in HxD Hex Editor there were repeating Bytes at the top few Offsets, i.e. 01 04 0D 31 01 04 0D 31 01 04 0D 31, on the first offset in the FW190AS.PAC File, then some more repeats\nin the BF109GS.PAC File, i.e. 01 07 0C 11 01 07 0C 11 01 06 0C 12 01 06 0C 12 01 06 0C 12 01 06 0D 11 01 06 0D, could these repeats be akin, to what the man in the video says they could be, for the Bioforge Game ? And what sections of code i.e. offsets do they correspond to here, are they saying, where the offsets and bytes, for each of the angle views are in the File?</p>\n<p>Here is a link to the game, where you can download it from:-</p>\n<p><a href=\"https://www.abandonwaredos.com/abandonware-game.php?abandonware=Secret+Weapons+of+the+Luftwaffe&amp;gid=2627\" rel=\"nofollow noreferrer\">https://www.abandonwaredos.com/abandonware-game.php?abandonware=Secret+Weapons+of+the+Luftwaffe&amp;gid=2627</a></p>\n<p>I run the 16bit DOS Game in the Program DOSBox, either in version 0.74 or 0.74.3 or the later version 0.83, which has alot more options, than the other two.</p>\n<p>Here is a link, to the Files I uploaded :-</p>\n<p><a href=\"https://www.dropbox.com/t/eaq3eQBZ3cSzcoSq\" rel=\"nofollow noreferrer\">https://www.dropbox.com/t/eaq3eQBZ3cSzcoSq</a></p>\n<p>The pacswotl and pnlswotl Folders amongst other files, contain the batch Files and compiled C program.</p>\n<p>Also here is another dropbox website link, to Files and Folders which might be useful for this post :-</p>\n<p><a href=\"https://www.dropbox.com/t/lquuXmk6JBz1Hpkk\" rel=\"nofollow noreferrer\">https://www.dropbox.com/t/lquuXmk6JBz1Hpkk</a></p>\n<p>Could a Moderator, sort out the C Code, some of it hasn't displayed correctly in my post.</p>\n<p>Any help and info would be much appreciated. If that is okay ?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "297",
    "tags": [
        "assembly",
        "c",
        "file-format",
        "hex",
        "dos"
    ],
    "user": "Edward Winch",
    "time": "Jul 13, 2023 at 14:43",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">that C code looks like a regular .bmp file parser.. you sure it's supposed to extract images from the game's data files?</span>",
            "time": null
        },
        {
            "user": "Edward Winch",
            "text": "<span class=\"comment-copy\">Hi Ali, Yes the code does extract RLE Graphics from the Games Files, i.e. the ones I have in the pacswotl and pnlswotl Folders, in the download link I provide in my post. And saves the Graphics as Bitmap Files.</span>",
            "time": null
        },
        {
            "user": "tshiono",
            "text": "<span class=\"comment-copy\">I have started to look into the provided files and have several questions: 1) I've tried to <code>run pac files swotl (Works).cmd</code> with <code>*.PAC</code> files. While it converts some of them into b/w bmp pictures, it doesn't generate any bmp files with e.g. <code>FW190A.PAC</code> and <code>FW190AS.PAC</code>. Am I doing something wrong, or is that what you want to solve? 2) The posted C program looks like a source code of <code>PAC-MISC.exe</code> but has some difference. <code>PAC-MISC.exe</code> accepts <code>-d</code> option but the C program does not. Which is the latest one? Can you provide the source code corresponding to the <code>PAC-MISC.exe</code>?</span>",
            "time": null
        },
        {
            "user": "tshiono",
            "text": "<span class=\"comment-copy\">3) When you program the code, what did you use for reference? The linked Youtube video? Sorry for too many questions. BR.</span>",
            "time": null
        },
        {
            "user": "Edward Winch",
            "text": "<span class=\"comment-copy\">Hi tshiono, I will sort this out for you, when I get home tomorrow, early hours here at the moment.</span>",
            "time": null
        }
    ],
    "answers_data": []
}