{
    "title": "IDA PRO Struct Pointer Counter big number not starting from address offset 0, Lowers a bit slightly but not all the way to 0",
    "link": "https://reverseengineering.stackexchange.com/questions/4082/ida-pro-struct-pointer-counter-big-number-not-starting-from-address-offset-0-lo",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I put the whole question in 2 images. From research, it seems I need to use <kbd>Ctrl</kbd>+<kbd>R</kbd>, but I don't think that's what I need since I couldn't lower the number a bit further in order to reach 0.</p>\n<p>I think the problem is that I'm not creating the <code>structs</code> properly.</p>\n<p><strong>I'd like to add a few guesses the number went down to 16072 because the array of PlayerPointers is 4 bytes per element. So it went down <code>64288 / 4 = 16072</code>.</strong>\n<br/>\nI still don't know what that means.</p>\n<p><img alt=\"problem 1\" src=\"https://i.sstatic.net/q4K9S.png\"/>\n<img alt=\"asm code\" src=\"https://i.sstatic.net/2odeD.png\"/></p>\n<p>ASM Code:</p>\n<pre><code>.text:0040E040 ; =============== S U B R O U T I N E =======================================\n.text:0040E040\n.text:0040E040\n.text:0040E040 ; struct_ARENA *__thiscall code(struct_PLAYER *player, const void *buf, unsigned int len, int a4)\n.text:0040E040 sub_40E040      proc near               \n.text:0040E040                                         \n.text:0040E040\n.text:0040E040 buf             = dword ptr  4\n.text:0040E040 len             = dword ptr  8\n.text:0040E040 a4              = dword ptr  0Ch\n.text:0040E040\n.text:0040E040                 push    ebx\n.text:0040E041                 push    esi\n.text:0040E042                 mov     esi, ecx\n.text:0040E044                 mov     eax, [esi+1Ch]\n.text:0040E047                 test    eax, eax\n.text:0040E049                 jz      short loc_40E093\n.text:0040E04B                 mov     ecx, [eax+0FF0Ch]\n.text:0040E051                 xor     ebx, ebx\n.text:0040E053                 test    ecx, ecx\n.text:0040E055                 jle     short loc_40E093\n.text:0040E057                 push    edi\n.text:0040E058                 push    ebp\n.text:0040E059                 mov     ebp, [esp+10h+a4]\n.text:0040E05D                 mov     edi, 0FB20h\n.text:0040E062\n.text:0040E062 loc_40E062:                             \n.text:0040E062                 mov     eax, [edi+eax]\n.text:0040E065                 cmp     eax, esi\n.text:0040E067                 jz      short loc_40E082\n.text:0040E069                 mov     ecx, [eax+38h]\n.text:0040E06C                 test    ecx, ecx\n.text:0040E06E                 jnz     short loc_40E082\n.text:0040E070                 mov     ecx, [esp+10h+len]\n.text:0040E074                 mov     edx, [esp+10h+buf]\n.text:0040E078                 push    ebp             ; a4\n.text:0040E079                 push    ecx             ; len\n.text:0040E07A                 push    edx             ; buf\n.text:0040E07B                 mov     ecx, eax        ; this\n.text:0040E07D                 call    SendPlayerReliablePacket\n.text:0040E082\n.text:0040E082 loc_40E082:                             \n.text:0040E082                                         \n.text:0040E082                 mov     eax, [esi+1Ch]\n.text:0040E085                 inc     ebx\n.text:0040E086                 add     edi, 4\n.text:0040E089                 cmp     ebx, [eax+0FF0Ch]\n.text:0040E08F                 jl      short loc_40E062\n.text:0040E091                 pop     ebp\n.text:0040E092                 pop     edi\n.text:0040E093\n.text:0040E093 loc_40E093:                            \n.text:0040E093                                         \n.text:0040E093                 pop     esi\n.text:0040E094                 pop     ebx\n.text:0040E095                 retn    0Ch\n.text:0040E095 sub_40E040      endp\n.text:0040E095 ; ---------------------------------------------------------------------------\n.text:0040E098                 align 10h\n</code></pre>\n<p>Here is one that looks better only 1 struct instead of 2 but still same problem</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/89F9H.png\"/></p>\n<p>Here is the amount of players who are not watching but playing the game.</p>\n<pre><code>int __thiscall TotalPlayingPlayers(struct_ARENA *arena)\n{\n  int ArenaPlayerCount; // edx@1\n  int result; // eax@1\n  struct_PLAYER **eachPlayer; // ecx@2\n\n  ArenaPlayerCount = arena-&gt;ArenaPlayerCount;\n  result = 0;\n  if ( ArenaPlayerCount &gt; 0 )\n  {\n    eachPlayer = arena-&gt;playerPointersForSomething;// How could this be like this? this would only hold 251 4 bytes not enough for all players.\n    do\n    {\n      if ( (*eachPlayer)-&gt;Ship != 8 )\n        ++result;\n      ++eachPlayer;                             // This means it really has to go up by 4 bytes the small 251 array.\n      --ArenaPlayerCount;\n    }\n    while ( ArenaPlayerCount );\n  }\n  return result;\n}\n</code></pre>\n<p><img alt=\"here is image of above\" src=\"https://i.sstatic.net/a4W5E.png\"/></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "516",
    "tags": [
        "ida",
        "struct",
        "functions"
    ],
    "user": "SSpoke",
    "time": "Apr 17, 2014 at 15:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems to me that you're wrong if you assume v7 is an index - v6 is.</p>\n<p>The original function was probably something like</p>\n<pre><code>int v6=0;\nwhile (v6 &lt; result-&gt;ArenaSubStruct.ArenaPlayerCount) {   // &lt;-- what is a if/do while in your disassembly was originally a while\n    eachPlayer = result-&gt;ArenaSubStruct.PlayerPointers[v6];\n    if (eachPlayer != player)                            // &lt;-- v4 and player are identical\n        SendPlayerReliablePacket(eachPlayer, buf, len, a4);\n    ++v6;\n}\n</code></pre>\n<p>To optimize this, the compiler introduced v7 as a pointer to the array element corresponding to the loop variable. This way, the processor just needs to access a pointer (and increment the pointer by the size of the int it points to) instead of a multiplication and add per loop:</p>\n<pre><code>int v6=0;\nint v7=offsetof(*result, ArenaSubStruct.PlayerPointers);\nwhile (v6 &lt; result-&gt;ArenaSubStruct.ArenaPlayerCount) {\n    eachPlayer = *(int *)((char *)result+v7)\n    if (eachPlayer != player)\n        SendPlayerReliablePacket(eachPlayer, buf, len, a4);\n    v6++;\n    v7+=sizeof(ArenaSubStruct.PlayerPointers[0]);   // which is an it so sizeof returns 4\n}\n</code></pre>\n<p>So your v7 is not an index into the PlayerPointers structure that should be brought down to 0, instead, it's an \"index\" into the ArenaSubStruct structure, that starts with the offset of PlayerPointers within ArenaSubStruct. You can't get that back nicely in IDA, because there's no nice C representation of what the compiler did - look at the ugly type casts i had to do.</p>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Apr 17, 2014 at 7:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">makes sense.. also seems if I make the PlayerPointers into a <code>dd</code> then press * it says only 251 possible DWORD's <code>(1004/4)</code> can fit in there.. when I know atleast 1024 or 1025 players are possible? Plus there isn't enough room in the struct for anymore because ArenaPlayerCount starts and that's a real variable.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Does your game support something like watchers, who don't play themselves but can see what the players do? Your Struct would split up nicely if you had 1024 player structures of 62 bytes each at the start (end Address 0xFB20), then 250 4-byte-integers (end Address FF08), then another 4 byte integer variable which is the count of real players, then the 4 byte integer you named ArenaPlayerCount at FF0C. If the variable at FF0C is the Watcher count (with the real player count at FF08?), the above function would fit a \"Inform all watchers\" pattern nicely.</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Yes but that's the thing there could be as much watchers as there are players so 1024/1025 possible watchers or players playing at any moment. Any player can become into a watcher by changing their ship. I already found the function which indicates the watchers it's very similar to this one I think it uses the same array I'll post it. in the question</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">I put my IDA can you let me know the issues.. I remade it <a href=\"https://www.mediafire.com/?qnqb00q4yk4kq6v\" rel=\"nofollow noreferrer\">mediafire.com/?qnqb00q4yk4kq6v</a></span>",
                    "time": null
                }
            ]
        }
    ]
}