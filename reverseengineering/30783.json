{
    "title": "Multi segement code, but I'm stuck at this one part. What does sprintf do?",
    "link": "https://reverseengineering.stackexchange.com/questions/30783/multi-segement-code-but-im-stuck-at-this-one-part-what-does-sprintf-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a multi part program where a 'challenge token' is generated and I have to provide a response that I believe needs to be in token form as well because when I enter it the parts in without spaces or a delimiter it fails. But I've also noticed that when even though <code>strtok</code> is called, the registers that hold my response include the delimiter which is what I think is throwing this off when my string is compared with the code's strings. Am I supposed to find or use a certain delimiter?<br/></p>\n<p>Another question, In this portion <code>rbp-0x50</code> is the counter as it cycles through this part 4 times. I'm not sure what <code>sprintf</code> does, (Any insight?) Overall it  seems to be generating the string which my response should mirror into <code>rbp-0x30</code>. After this segment, the code goes on to show that whatever <code>sprintf</code> puts into <code>RAX</code> which ultimately ends up in <code>qword [rbp-0x48]</code> should be the same as what was generated in <code>[rbp-0x30]</code>.</p>\n<p>Disassembly :</p>\n<pre><code>400cd4:  mov     eax, dword [rbp-0x50]\n400cd7:  movzx   eax, byte [rbp+rax-0x40]\n400cdc:  movsx   eax, al\n400cdf:  mov     edx, dword [rbp-0x50]\n400ce2:  lea     ecx, [rdx+rdx]\n400ce5:  lea     rdx, [rbp-0x30]\n400ce9:  mov     ecx, ecx\n400ceb:  add     rcx, rdx\n400cee:  mov     edx, eax\n400cf0:  mov     esi, 0x40101a  \"%02X\"\n400cf5:  mov     rdi, rcx\n400cf8:  mov     eax, 0x0\n400cfd:  call    sprintf\n400d02:  add     dword [rbp-0x50], 0x1\n400d06:  cmp     dword [rbp-0x50], 0x4\n400d0a:  jbe     0x400cd4\n\n400d0c:  mov     esi, 0x401018\n400d11:  mov     edi, 0x0\n400d16:  call    strtok\n400d1b:  mov     qword [rbp-0x48], rax\n400d1f:  cmp     qword [rbp-0x48], 0x0\n400d24:  jne     0x400d2d\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "104",
    "tags": [
        "disassembly"
    ],
    "user": "4n6fun",
    "time": "Aug 16, 2022 at 13:19",
    "comments": [
        {
            "user": "h0r53",
            "text": "<span class=\"comment-copy\"><code>sprintf</code> formats a string as <code>printf</code> would, but it does so <i>silently</i> and stores the result in the first argument, which in your case looks to be <code>[rbp-0x30]</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The first part takes four bytes at rbp-0x40..rbp-0x3d and hexdumps them into rbp-0x30 one byte at a time using sprintf.</p>\n<p>The second part is unrelated. It calls strtok with NULL as first argument (rdi), which resumes an earlier tokenization and does not depend on the hexdump generated in the loop before.</p>\n</div>",
            "votes": "2",
            "user": "Michael Karcher",
            "time": "Aug 19, 2022 at 7:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "4n6fun",
                    "text": "<span class=\"comment-copy\">ok, thanks. I guess where I'm stuck is RAX is 2 until after STRTOK happens then RAX becomes 0 which gets moved into rbp-0x40 causing the program not to continue on to  where '0x400d2d' is  Is strtok returning the zero value? What would that mean if so?</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">Yes, the zero in RAX is the return value of strtok. It means \"no further tokens present\". Your input to that code obviously needs to be longer than you currently provide. The ESI register at a call to strtok points to a string that contains the token separator chars. Note that you pass into strtok how the token you want to get now <i>ends</i>. This means the separator before the token that strtok should return is in ESI at the <i>previous</i> strtok call.</span>",
                    "time": null
                }
            ]
        }
    ]
}