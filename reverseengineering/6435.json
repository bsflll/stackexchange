{
    "title": "Determining the size of an object allocated on the heap",
    "link": "https://reverseengineering.stackexchange.com/questions/6435/determining-the-size-of-an-object-allocated-on-the-heap",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As part of an assignment, dealing with the operation aurora vulnerability, I am supposed to determine the size of C++ classes allocated on the heap.</p>\n<p>I used: </p>\n<pre><code>0:017&gt; !heap -p -a &lt;address of the class I am researching&gt;\n</code></pre>\n<p>And got:</p>\n<pre><code>address 047dcf08 found in\n  _DPH_HEAP_ROOT @ 12d1000\n  in busy allocation (DPH_HEAP_BLOCK:     UserAddr     UserSize -    VirtAddr   VirtSize)\n                             4501270:      47dcf08           f8 -     47dc000       2000\n</code></pre>\n<p>According to the user size, the object is <code>0xf8</code> in size, but are there any header/trailer bytes that need to be subtracted to get the actual size of the class in this allocation block ?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        "windbg"
    ],
    "user": "dnraikes",
    "time": "Oct 13, 2014 at 8:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No, <code>UserSize</code> is the size that was sent to the allocator.</p>\n<pre><code>malloc(0x100); // usersize 100\n</code></pre>\n<p>The obvious exception to this would be if you're using a custom heap allocator built on top of the standard heap allocator.</p>\n</div>",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Oct 13, 2014 at 21:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not a direct answer but windbg has a nice command that <em>lets you \"decipher\"</em> the answer to most of these question <em>by yourself</em> the name of the command is <code>.ocommand</code></p>\n<p>an example showing how you can ascertain what usersize points to using this command</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n\nvoid dbg (PCHAR cmdstr , PVOID value) {\n    char buff[0x300] = {0};\n    sprintf_s(buff,cmdstr,value);\n    OutputDebugStringA(buff);\n    return ;\n}\nint main(void) {\n    printf (\n        \"This is a windbg .ocommand Example\\n\"\n        \"This command can be leveraged to execute windbg commands \\n\"\n        \"For example command !heap -p -a is performed on allocated heap\\n\"\n        \"Output of !heap -p -a &lt;address&gt; can be viewed in windbg \\n\"\n        \"issue .ocommand myjick in windbg prior to running this exe\\n\"\n        \"or run this exe with windbg -c \\\".ocommand myjick\\\" ocommand.exe\\n\"\n        );\n    HANDLE hHeap = NULL;   \n    if((hHeap = GetProcessHeap() ) != NULL)     {\n        for (int i = 1 ; i&lt; 6; i++)  {\n            PCHAR mem[6] = {0};\n            if (( mem[i] = (PCHAR)HeapAlloc(hHeap,0,0x101*i) ) != NULL)   {\n                dbg(\"myjick !heap -p -a %x ;g;\\n\\n\",mem[i]);\n            }\n        }\n    }\n    return 0; //all the allocated heaps need to be freed\n}\n</code></pre>\n<p>output for the above code </p>\n<p><strong>cdb -c \".ocommand myjick ;g;q\" ocommand.exe</strong></p>\n<pre><code>0:000&gt; cdb: Reading initial command '.ocommand myjick ;g;q'\nTreat output prefixed with 'myjick ' as a command\n\nThis is a windbg .ocommand Example\nThis command can be leveraged to execute windbg commands\nFor example command !heap -p -a is performed on allocated heap\nOutput of !heap -p -a &lt;address&gt; can be viewed in windbg\nissue .ocommand myjick in windbg prior to running this exe\nor run this exe with windbg -c \".ocommand myjick\" ocommand.exe \n\n    address 001537e8 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        001537e0 0024 0000  [07]   001537e8    00101 - (busy)    \n    address 00153908 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00153900 0044 0000  [07]   00153908    00202 - (busy)    \n    address 00153b28 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00153b20 0064 0000  [07]   00153b28    00303 - (busy)    \n    address 00153e48 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00153e40 0084 0000  [07]   00153e48    00404 - (busy)    \n    address 00154268 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00154260 00a4 0000  [07]   00154268    00505 - (busy)\n</code></pre>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Oct 15, 2014 at 7:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}