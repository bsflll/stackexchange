{
    "title": "What's the meaning of @ tag on proxy dll?",
    "link": "https://reverseengineering.stackexchange.com/questions/29072/whats-the-meaning-of-tag-on-proxy-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In proxy dll in .def file I can see the following notation:</p>\n<pre><code>_CreateFrameInfo=PROXY__CreateFrameInfo @1\n</code></pre>\n<p>Others use in the following format:</p>\n<pre><code> _AIL_3D_position@16 = vcruntime140_._AIL_3D_position@16 \n</code></pre>\n<p>What is the meaning of @ tag in that notation?</p>\n<p>Also, I have run the Dependency Walker on that program. It returned Hint: 1 (0x0001), 5(0x0005), etc. Are these related? There are less hints than functions though...</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "58",
    "tags": [
        "dll",
        "msvc"
    ],
    "user": "Irbis77",
    "time": "Jul 31, 2021 at 18:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is called <a href=\"https://docs.microsoft.com/en-us/cpp/error-messages/tool-errors/name-decoration\" rel=\"nofollow noreferrer\"><em>name decoration</em></a>. Specifically in this case, it denotes <code>__stdcall</code> functions which accept the indicated number of bytes as stack arguments.</p>\n<p>The number at the end of the export definition (after the space delimiter) is used to specifty <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/exports\" rel=\"nofollow noreferrer\">the <em>ordinal</em> of the export</a>.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jul 31, 2021 at 17:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Irbis77",
                    "text": "<span class=\"comment-copy\">It it not clear from the documentaion, whether that decoration numbers are related to the number of bytes in the arguments of the described functions or can be any number, i.e. the reference number of the function. Saw it used both ways in proxy dlls.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Irbis77 see update</span>",
                    "time": null
                }
            ]
        }
    ]
}