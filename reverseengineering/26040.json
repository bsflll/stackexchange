{
    "title": "Understanding how a WiFi camera app goes from packet data to video stream",
    "link": "https://reverseengineering.stackexchange.com/questions/26040/understanding-how-a-wifi-camera-app-goes-from-packet-data-to-video-stream",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a WiFi webcam that I'm trying to get to stream to my computer. I'm able to get the camera to send data to my computer, but I don't know how to decode it. The data consists of 11 1450 byte packets, followed by 1 packet with a variable size, typically about 800 bytes. This pattern repeats about 20 times per second. If I can figure out how to take those packets and turn them into a common media stream that I can open with VLC or the like, I'll be in good shape.</p>\n<p>I decompiled the manufacturer's app, DM WiFi. I've been looking through it, and so far the only concrete information I've found is that H.264 is being used, according to in com.joyhonest.wifination.VideoMediaCoder (joyhonest is a manufacturer of WiFi camera modules). I still don't know where the program is reading in the WiFi data, or how it processes it before it becomes the standard H.264 stream (e.g. stripping headers). At this point, I'm hampered by my lack of Java/Android knowledge. For instance, I can find a prototype for the function naWriteport20000, presumably sending data to the camera, whose UDP port 20000 is open. But I can't find a more substantial definition for the function that might help point me towards how data is received. As someone who hasn't written Java in 5 years and who has never touched Android app development, how should I approach dissecting this program?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "260",
    "tags": [
        "decompilation",
        "android"
    ],
    "user": "ttshaw1",
    "time": "Oct 3, 2020 at 22:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://www.chzsoft.de/site/hardware/reverse-engineering-a-wifi-microscope/\" rel=\"nofollow noreferrer\">This person</a> has a microscope with apparently an identical WiFi camera module and detailed his reverse engineering efforts. It turns out the first 1450 byte packet has a short header followed by the bytes to begin a jpeg image, and the end of variable-length packet ends the jpeg image. Concatenating all the packets and stripping the header gives the data for a jpeg.</p>\n</div>",
            "votes": "0",
            "user": "ttshaw1",
            "time": "Oct 6, 2020 at 4:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}