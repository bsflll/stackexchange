{
    "title": "Help with decoding japanese text from binary",
    "link": "https://reverseengineering.stackexchange.com/questions/25005/help-with-decoding-japanese-text-from-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm building a fan website for a japanese mobile game. I'd like to have access to game data like character stats and ability names. I'll start by saying that this is the first time I have done something like this and could use any help. </p>\n<p>This is what I have done so far. </p>\n<ul>\n<li>There is a folder containing custom .pack files, which I think are binary files of unknown format.</li>\n<li>Within this folder there is also a .dat file with the names of the .pack files followed by a string of numbers (e.g. <code>master_attribute.pack  8CDF54ED0AE78C4FF663C3F639F28B7F</code>). I do not know if this is related.</li>\n<li>Each .pack file starts with the hex signature <code>C9</code>, which according to this <a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\" rel=\"nofollow noreferrer\">wiki</a>, is a .com file, which i think is an outdated executable file?</li>\n<li>Most of the .pack files, when read as utf-8, contain snippets of the information I'm looking for but it is riddled with out-of-place continuation bytes (this is likely irrelevant because I am naively assuming that these files are utf-8 text files). </li>\n</ul>\n<p><strong>Here is an example of one of the smaller files, the japanese text are relevant and are not random.</strong>\n<a href=\"https://i.sstatic.net/e5H1V.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/e5H1V.png\"/></a></p>\n<p>As I said in the start, this is my first exposure to such things. I am stuck and welcome any help on what I can do next. </p>\n<p>For reference, <a href=\"https://drive.google.com/open?id=1DeV-YwxK3uHIX-8xM66hurKx8mO5ROHJ\" rel=\"nofollow noreferrer\">here</a> are some of the files</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "425",
    "tags": [
        "game-hacking"
    ],
    "user": "tfu",
    "time": "May 13, 2020 at 19:32",
    "comments": [
        {
            "user": "hippietrail",
            "text": "<span class=\"comment-copy\">How old is the game? Japanese has had strong resistance to UTF-8 Unicode because their older text encoding standards, of which there are several, take up less space for Japanese text. A lot of those Japanese characters just look like random gibberish. But then again I can see <code>シメリア</code> that looks like proper Japanese and indeed turns out to be some character from World of Warcraft. As UTF-8 is a multibyte encoding, which byte offset you start interpreting can make a difference, though the bit patterns of UTF-8 make it pretty much self-synchronizing.</span>",
            "time": null
        },
        {
            "user": "hippietrail",
            "text": "<span class=\"comment-copy\">I'd guess it's either text mixed with other binary data or it could be lightly compressed so some recognizable chunks still appear whole. RLE compression methods for example can lead to this.</span>",
            "time": null
        }
    ],
    "answers_data": []
}