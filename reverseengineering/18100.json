{
    "title": "Question relating to learning Assembly through CTF challenges",
    "link": "https://reverseengineering.stackexchange.com/questions/18100/question-relating-to-learning-assembly-through-ctf-challenges",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've just started to dip into Assembly for CTF reversing challenges, and am having a great time. </p>\n<p>A loop structure in the current challenge I'm working on has me stumped, however - hoping someone can help with a few basic Assembly questions - or point me to good resources.</p>\n<p>I ran the binary provided for the challenge through Binary Ninja and identified the key function - tracing the logic within a loop is giving me problems.</p>\n<p>For the program to return the flag, we need this check function - which looks at a user-entered string - to return 1. For the check function to return a 1, we need this loop to set EAX to 0x1.</p>\n<p>The loop starts off fairly simply:</p>\n<pre><code>080486d5  sub     dword [ebp-0x10 {var_14_1} {var_14}], 0x1 \n080486d9  mov     dword [ebp-0xc {var_10_1}], 0x0\n080486e0  jmp     0x804870b\n</code></pre>\n<p>var_14 is the string length of the user input. By this point in the function, we know that the string length has to be at least 20</p>\n<p>So this seems to simply set var_14_1 to var_14-1 and var_10_1 to 0.</p>\n<p>Then we enter the loop.</p>\n<p>The first block of the loop reads:</p>\n<pre><code>0804870b  mov     eax, dword [ebp-0xc {var_10_1}]\n0804870e  cmp     eax, dword [ebp-0x10 {var_14_1}]\n08048711  jbe     0x80486e2\n</code></pre>\n<p>Which seems to say that if var_10_1 is less than var_14_1 continue with the loop.\nThis next block of the loop is where I think I'm not reading the code correctly:</p>\n<pre><code>080486e2  mov     edx, dword [ebp+0x8 {arg1}]\n080486e5  mov     eax, dword [ebp-0xc {var_10_1}]\n080486e8  add     eax, edx                  \n080486ea  movzx   edx, byte [eax]               \n080486ed  mov     ecx, dword [ebp+0x8 {arg1}]\n080486f0  mov     eax, dword [ebp-0x10 {var_14_1}]\n080486f3  add     eax, ecx\n080486f5  movzx   eax, byte [eax]\n080486f8  cmp     dl, al                    \n080486fa  je      0x8048703\n</code></pre>\n<p>arg1 is the user input - at this point all the know is that it has to be at least 20 characters long, and the first 4 characters are \"auqa\" </p>\n<p>We need this cmp to succeed (dl == al) for the loop to continue. Otherwise, the code exits the loop and returns EAX to 0x0 (failure). Having said that - if we know that var_10_1 is 0 and var_14_1 is at least 19 at this first pass in the loop, and we add each to arg1 - then how can DL and AL be equal? Am I misunderstanding how <code>add eax, edx</code> and <code>add eax, ecx</code> work?</p>\n<p>I'm not sure where my understanding of the code is incorrect - very much appreciate any tips or pointers. Apologize if this covers basic knowledge - I'm working through these on my own.</p>\n<p>Thank you!</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "789",
    "tags": [
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "BronzeOtter",
    "time": "Apr 25, 2018 at 16:37",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">show the full disassembly for the function.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the code possibly checks for a palindrome </p>\n<p>the query doesnt contain full disassembly for example what it does when it is equal </p>\n<p>edx, arg1  == edx = *input\neax in first iteration is 0  so eax will be equal to edx == first letter of the input string  for the first 4 instructions in the loop you provide</p>\n<p>next 4 instructions possibly take the last character  </p>\n<p>and compares both </p>\n<p>so a sequence like <strong>abcdefghijjihgfedcba</strong>  will pass the first iteration</p>\n<p>here is a src that uses your snippet and stepping through it in windbg </p>\n<pre><code>0:000&gt; t\n&gt;    3: int foo (char *a) {\n012b6831 8bec            mov     ebp,esp\n0:000&gt; t\n&gt;    3: int foo (char *a) {\n012b6833 83ec10          sub     esp,10h\n0:000&gt; t\n&gt;    4:     int h = 0;\n012b6836 c745fc00000000  mov     dword ptr [ebp-4],0  ss:0023:0013f9f8=00000000\n0:000&gt; t\n&gt;    5:     int j = 0;\n012b683d c745f800000000  mov     dword ptr [ebp-8],0  ss:0023:0013f9f4=012c4a9d\n0:000&gt; t\n&gt;    6:     int k = 0;\n012b6844 c745f400000000  mov     dword ptr [ebp-0Ch],0 ss:0023:0013f9f0=00000000\n0:000&gt; t\n&gt;    7:     int l = 19;  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; simulating here sub instruction reduced 20 to 19 \n012b684b c745f013000000  mov     dword ptr [ebp-10h],13h ss:0023:0013f9ec=012b69a9\n0:000&gt; t\n&gt;   10: mov     edx, dword ptr ds:[ebp+0x8]\n012b6852 3e8b5508        mov     edx,dword ptr ds:[ebp+8] ds:0023:0013fa04=01308e50\n0:000&gt; t\n&gt;   11: mov     eax, dword ptr ds:[ebp-0xc]\n012b6856 3e8b45f4        mov     eax,dword ptr ds:[ebp-0Ch] ds:0023:0013f9f0=00000000\n0:000&gt; t\n&gt;   12: add     eax, edx                  \n012b685a 03c2            add     eax,edx\n0:000&gt; t\n&gt;   13: movzx   edx, byte ptr ds:[eax]               \n012b685c 3e0fb610        movzx   edx,byte ptr ds:[eax]      ds:0023:01308e50=61\n0:000&gt; da eax\n01308e50  \"abcdefghijjihgfedcba\"\n0:000&gt; t\n&gt;   14: mov     ecx, dword ptr ds:[ebp+0x8 ]\n012b6860 3e8b4d08        mov     ecx,dword ptr ds:[ebp+8] ds:0023:0013fa04=01308e50\n0:000&gt; ?? char @dl\nUnexpected token '@dl'\n0:000&gt; ?? (char) @dl\nchar 0n97 'a'\n0:000&gt; t\n&gt;   15: mov     eax, dword ptr ds:[ebp-0x10 ]\n012b6864 3e8b45f0        mov     eax,dword ptr ds:[ebp-10h] ds:0023:0013f9ec=00000013\n0:000&gt; t\n&gt;   16: add     eax, ecx\n012b6868 03c1            add     eax,ecx\n0:000&gt; t\n&gt;   17: movzx   eax, byte ptr ds:[eax]\n012b686a 3e0fb600        movzx   eax,byte ptr ds:[eax]      ds:0023:01308e63=61\n0:000&gt; da eax\n01308e63  \"a\"\n0:000&gt; ? eax\nEvaluate expression: 19959395 = 01308e63\n0:000&gt; t\n&gt;   18: cmp     dl, al \n012b686e 3ad0            cmp     dl,al\n0:000&gt; ?? (char) @eax\nchar 0n97 'a'\n0:000&gt; ?? (char) @al\nchar 0n97 'a'\n0:000&gt; ? eax\nEvaluate expression: 97 = 00000061\n0:000&gt; ?? @dl == @al\nbool true\n</code></pre>\n<p>the src code that uses the snippet in your post</p>\n<pre><code>int foo(char *a) {\n    int h = 0;\n    int j = 0;\n    int k = 0;\n    int l = 19;\n    __asm {\n        mov     edx, dword ptr ds : [ebp + 0x8]\n        mov     eax, dword ptr ds : [ebp - 0xc]\n        add     eax, edx\n        movzx   edx, byte ptr ds : [eax]\n        mov     ecx, dword ptr ds : [ebp + 0x8]\n        mov     eax, dword ptr ds : [ebp - 0x10]\n        add     eax, ecx\n        movzx   eax, byte ptr ds : [eax]\n        cmp     dl, al\n        je done\n        undone :\n        jmp undone\n            done :\n        jmp done\n    }\n    return h + j + k + l;\n}\nchar *blah = \"abcdefghijjihgfedcba\";\nint main(void) {\n    foo(blah);\n}\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 25, 2018 at 21:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BronzeOtter",
                    "text": "<span class=\"comment-copy\">Wonderful! And thank you for running through it in windbg. Much appreciated.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I cannot post comments because of low reputation.</p>\n<p>What I am noticing here are the square brackets in the two <code>movzx</code> instructions. </p>\n<p>These instructions compute an address:</p>\n<pre><code>080486e2  mov     edx, dword [ebp+0x8 {arg1}]\n080486e5  mov     eax, dword [ebp-0xc {var_10_1}]\n080486e8  add     eax, edx      \n</code></pre>\n<p>And this instruction gets the value at that address and stores it in <code>dl</code> because of the <code>movzx</code> (zero-extending):</p>\n<pre><code>080486ea  movzx   edx, byte [eax]   \n</code></pre>\n<p>Your question:</p>\n<blockquote>\n<p>We need this cmp to succeed (dl == al) for the loop to continue.\n  Otherwise, the code exits the loop and returns EAX to 0x0 (failure).\n  Having said that - if we know that var_10_1 is 0 and var_14_1 is at\n  least 19 at this first pass in the loop, and we add each to arg1 -\n  then how can DL and AL be equal?</p>\n</blockquote>\n<p>The answer is simple: that is not what <code>cmp</code> is checking. </p>\n<p>As I see it (I'm also just getting into reverse engineering) the bytes stored at these addresses must be equal for <code>je</code> to be executed:</p>\n<pre><code>dword [ebp+0x8 {arg1}] + dword [ebp-0xc {var_10_1}]\ndword [ebp+0x8 {arg1}] + dword [ebp-0x10 {var_14_1}]\n</code></pre>\n<p>This makes it quite a difficult problem because you now have to find out which addresses are pointing to the correct bytes. </p>\n</div>",
            "votes": "0",
            "user": "Bank Schroef",
            "time": "Apr 25, 2018 at 19:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This seems to be a search in your string for the first character matching the starting character</p>\n<p><code>080486e2  mov     edx, dword [ebp+0x8 {arg1}]       ;arg1 -&gt; edx, Pointer to string\n080486e5  mov     eax, dword [ebp-0xc {var_10_1}]   ;0-&gt; eax\n080486e8  add     eax, edx                          ;eax = eax + edx, i.e. eax = Pointer to string\n080486ea  movzx   edx, byte [eax]                   ; 1st character -&gt; edx (zero extend)<br/>\n080486ed  mov     ecx, dword [ebp+0x8 {arg1}]       ;arg1-&gt; ecx, Pointer to string\n080486f0  mov     eax, dword [ebp-0x10 {var_14_1}]  ; var_14_1 -&gt; eax\n080486f3  add     eax, ecx                          ;eax = eax + ecx; Ptr at pos. var_14_1\n080486f5  movzx   eax, byte [eax]                   ; content of that ptr -&gt; eax\n080486f8  cmp     dl, al                            ; are both characters equal?<br/>\n080486fa  je      0x8048703                         ; yes (i.e. ZF = 1) jmp to 0x848703\n                                                    ; no: continue here\n</code></p>\n</div>",
            "votes": "0",
            "user": "josh",
            "time": "Apr 25, 2018 at 20:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "BronzeOtter",
                    "text": "<span class=\"comment-copy\">Thank you! This is a great explanation. I see my mistake - that I didn't recognize that this code was actually setting up pointers to specific characters in the input string. I should have recognized it, given that a similar operation happens earlier in the code. Basic question - how did you recognize that the loop was dealing with a pointer to a specific character in the string, specifically the line <code>add eax, edx</code> - instances like that are hard for me to recognize coming from higher level languages with more defined data types. Thanks again!</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">You are welcome! The key to recognize the pointer is at address 80486ea. There you load the content of the value stored at eax into edx. Thus, eax must be an address. The fact that the code deals with characters can be guessed from the fact that dl and al are compared. Characters usually have one-byte length (at least ASCII characters).</span>",
                    "time": null
                },
                {
                    "user": "BronzeOtter",
                    "text": "<span class=\"comment-copy\">Ah, I see. I was wondering what the significance of the many one-byte references was. Thank you!</span>",
                    "time": null
                }
            ]
        }
    ]
}