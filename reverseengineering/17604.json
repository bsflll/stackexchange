{
    "title": "Finding OEP in a VMProtect v3.0 protected malware",
    "link": "https://reverseengineering.stackexchange.com/questions/17604/finding-oep-in-a-vmprotect-v3-0-protected-malware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been trying to reverse engineer a malware that has been packed with <code>VMProtect v3.0</code>. My first instinct was to google an automated way for this and I found a script. Unfortunately the script to unpack <code>VMProtect</code> protected binary does not work with version 3.0.</p>\n<p>So far I've seen that the packer changes the access rights of the sections to be writable, decrypts the original code and writes the code to the sections then changes the access rights for those sections back to their initial values. I saw that by putting breakpoint on the <code>VirtualProtect</code> API. After the final call to <code>VirtualProtect</code> I put the access breakpoint on the sections that had <code>executable</code> right and when my breakpoint was hit I expected it to be the <code>OEP</code> but when I dumped the process it did not run.</p>\n<p>From my research I understand that you need to rebuild the <code>IAT</code> and tools like <code>UIF</code> &amp; <code>Scylla</code> won't be any help. Can you give me some tips on how to find the <code>OEP</code> or how to deal with this kind of packing mechanism in general?</p>\n<p>P.S. This is the first time I am dealing with <code>VMProtect</code> protected malware.</p>\n<p><strong>UPDATE</strong></p>\n<p>Sha256 Hash: <code>8200755cbedd6f15eecd8207eba534709a01957b172d7a051b9cc4769ddbf233</code></p>\n</div>",
    "votes": "4",
    "answers": 4,
    "views": "21k",
    "tags": [
        "malware",
        "unpacking",
        "anti-debugging",
        "anti-dumping"
    ],
    "user": "rustam Shirinov",
    "time": "Sep 24, 2018 at 22:33",
    "comments": [
        {
            "user": "TechLord",
            "text": "<span class=\"comment-copy\">OK, so this malware is protected with the <b>VMProtect (v3.0.465)</b>  with even a valid taggant.Since VMP is a commercial protector,would like the admins to comment whether it would violate the rules of this site if I discuss in detail the steps of finding the OEP and re-building the IAT, as asked by the OP. I would hate to spend a couple of hours writing an answer only to have it deleted, as I see happening quite frequently these days (sorry). Waiting for a confirmation to go ahead. Thanks.</span>",
            "time": null
        },
        {
            "user": "rustam Shirinov",
            "text": "<span class=\"comment-copy\">waiting fingers crossed...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are a few  links that address your question in a broad manner:</p>\n<ul>\n<li><p>VMAttack: Deobfuscating Virtualization-Based Packed Binaries<br/>\n<a href=\"https://www1.cs.fau.de/filepool/publications/unpacking-dynamic-static.pdf\" rel=\"noreferrer\">Link to PDF Paper</a> which uses the <a href=\"https://github.com/anatolikalysch/VMAttack\" rel=\"noreferrer\">VMAttack IDA PRO Plugin</a>.\n<br/></p></li>\n<li><p><a href=\"https://www.usenix.org/legacy/events/woot09/tech/full_papers/rolles.pdf\" rel=\"noreferrer\">Unpacking Virtualization Obfuscators</a> by Rolf Rolles.</p></li>\n<li><p>Unpacking the FinSpy VM, parts <a href=\"http://www.msreverseengineering.com/blog/2018/1/23/a-walk-through-tutorial-with-code-on-statically-unpacking-the-finspy-vm-part-one-x86-deobfuscation\" rel=\"noreferrer\">#1</a>, <a href=\"http://www.msreverseengineering.com/blog/2018/1/31/finspy-vm-part-2-vm-analysis-and-bytecode-disassembly\" rel=\"noreferrer\">#2</a>, <a href=\"http://www.msreverseengineering.com/blog/2018/2/21/finspy-vm-unpacking-tutorial-part-3-devirtualization\" rel=\"noreferrer\">#3</a></p></li>\n<li><p>Various <a href=\"http://www.msreverseengineering.com/research/\" rel=\"noreferrer\">other articles by Rolf Rolles</a> .</p></li>\n</ul>\n</div>",
            "votes": "6",
            "user": "PeterG",
            "time": "Mar 8, 2018 at 21:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">You should also mention syntia (<a href=\"https://github.com/RUB-SysSec/syntia\" rel=\"nofollow noreferrer\">github.com/RUB-SysSec/syntia</a>). (Paper: <a href=\"https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-blazytko.pdf\" rel=\"nofollow noreferrer\">usenix.org/system/files/conference/usenixsecurity17/â€¦</a>)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Set a breakpoint on the \"VM exit\" instruction (though there may be more than one of these if the sample is using the multiple VM option, whose proper name I don't recall). From here you can see where the VM transfers control when it exits. It will exit several times during \"packer\" mode. Eventually it will exit to OEP.</p>\n</div>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Mar 11, 2018 at 1:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">Heey I read your articles about reversing FinFisher after I asked the question. After reading them I realized it was not as easy as putting a breakpoint on an API call. I learned a lot from them. Now I am trying to find the Vm exit instruction. It is not easy to do if you are dealing with VMProtect at least for me</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you say it's <strong>malware</strong> please provide either the <strong>SHA256/MD5</strong> hash or a Virustotal/Hybrid-analysis link of the target so that I can take a quick look at it.  </p>\n<p>VMP and its protection mechanisms differ <em>wildly</em> in terms of complexity and characteristics between versions and even builds, in some cases.  </p>\n<p>For example, many techniques of finding the OEP and rebuilding the IAT which are successful for targets packed with VMP <strong>v2.xx</strong> fail miserably when attempted on targets packed with VMP <strong>v3.xx</strong>. </p>\n<p>As such its <strong>impossible</strong> to characterize and give a detailed canonical answer that would address <strong>all</strong> concerns and cover <strong>all</strong> versions of VMP.  </p>\n<p>What I guess <em>can</em> be done is that if you give us the links/hashes of the malware, I would be able to take a look at it and then discuss the answer in the context of <strong>that</strong> version VMProtect used to pack the malware.  </p>\n<p><strong>Note:</strong> :Since VMProtect is a <em>commercial</em> protector, I understand would be appropriate to discuss it only in the context of reversing the <em>malware</em> that was protected with it, to avoid this question being closed off as being off-topic or too broad..  </p>\n<p>Hence I guess that unless you can give us more details of the target you are attempting to reverse, we cannot proceed further.</p>\n</div>",
            "votes": "2",
            "user": "TechLord",
            "time": "Mar 8, 2018 at 0:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">I updated my question with the sha256hash of the sample</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Note: I never unpacked VMProtect myself.</p>\n<p>From looking at a sample unpackme, all intermodular calls that normally pointed to the IAT, are replaced with direct calls to what I think are obfuscated redirections inside the VMProtect's section that eventually lead to code inside .dlls. It's possible the executable will function if dumped correctly without rebuilding the import table, but it won't work after a reboot when .dll addresses change. Easy but unreliable ways of knowing which redirection leads to which imported function I can think of are by tracing or setting execution breakpoints on imported .dlls and calling the redirections. You can also dig deep into the import resolution mechanism of VMProtect.</p>\n<p>Some protections virtualize the entire entrypoint function but I don't know if VMP has that as a feature. This means setting a page guard on the executable section won't break on the OEP - it's going to break on the first non-virtualized function called by the OEP function. The virtualized OEP function executes inside the protector's section. So if the OEP is virtualized what I'd try doing is finding the VM entry for that function (in VMProtect it's a push  + call pattern) and setting the entrypoint to that when dumping. You can also paste the entrypoint function from another unprotected executable - for example if you have an earlier unprotected build of this malware compiled in the same environment in which case it's possible you even can borrow the imports.</p>\n</div>",
            "votes": "1",
            "user": "Guest",
            "time": "Mar 7, 2018 at 18:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}