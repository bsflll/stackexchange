{
    "title": "Is it possible to change a signed byte to an int in compiled assembly code?",
    "link": "https://reverseengineering.stackexchange.com/questions/20816/is-it-possible-to-change-a-signed-byte-to-an-int-in-compiled-assembly-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to mess around with an old game and I want to reposition a UI element. </p>\n<p>I found the address of where the x and y position get set (It's set to an X position of 90 and a Y position of 358) but it appears that because the 90 value is less than 128, the compiler optimized the assembly and changed the assembly from a push int (68 ? ? ? ?) to a push signed byte (6a ?).</p>\n<p>This means that I'm unable to extend the X position beyond 128.</p>\n<p>Is there any way for me to set the X position to something like 1000? I would need to somehow be able to change the assembly code to do a push int instead, correct? Will asm help me achieve that? Or what other methods could I use?</p>\n<p>Here's what I'm talking:\n<a href=\"https://i.sstatic.net/RFyQm.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/RFyQm.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "83",
    "tags": [
        "assembly",
        "patching"
    ],
    "user": "Nikita Buyevich",
    "time": "Mar 7, 2019 at 21:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As you mentioned, 0x6a is the instruction <code>push Ib</code>, in this case, the operand is encoded in only one byte and it's signed (i.e. 0x6a 0xff â†’ push -1). You need to promote to the instruction 0x68 <code>push Iz</code> which means expand the instruction. Your choice is rather limited. I suggest you try to find some <code>code cave</code> and jump on it to setup the stack as you want.</p>\n<p>To do so:</p>\n<ul>\n<li>the first part is to find some free executable space. You might find that at the end of the <code>.text</code> section. Because of the alignment, you'll find some unused space padded with <code>nop</code>.</li>\n<li>Once you find one, patch these pushes with a <code>jmp</code> to this location.</li>\n<li>In this free space, you can freely encode your 0x68 pushes.</li>\n<li>Finally, encode another <code>jmp</code> from this free space to jump back to the initial point.</li>\n</ul>\n</div>",
            "votes": "2",
            "user": "wisk",
            "time": "Mar 7, 2019 at 23:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}