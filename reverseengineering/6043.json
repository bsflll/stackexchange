{
    "title": "Extract non-extractable private key from OS X Keychain",
    "link": "https://reverseengineering.stackexchange.com/questions/6043/extract-non-extractable-private-key-from-os-x-keychain",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>I'm trying to extract a non-extractable private key as a <code>.p12</code> file from <code>Keychain Access.app</code>  or <code>/usr/bin/security</code> on Mac OS X 10.9.4.</strong></p>\n<hr/>\n<p>Basically, it appears that <a href=\"https://stackoverflow.com/questions/25109994/non-extractable-private-key-in-keychain-on-os-x\"><code>security import</code> has a <code>-x</code> option to specify that <code>private keys are non-extractable after being imported</code></a>.</p>\n<ul>\n<li><a href=\"http://opensource.apple.com/source/SecurityTool/SecurityTool-55115/keychain_import.c\" rel=\"nofollow noreferrer\">http://opensource.apple.com/source/SecurityTool/SecurityTool-55115/keychain_import.c</a></li>\n<li><a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExport.h\" rel=\"nofollow noreferrer\">http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExport.h</a></li>\n</ul>\n<p>As per above, this is implemented by explicitly omitting <code>CSSM_KEYATTR_EXTRACTABLE</code> during the import.  Subsequently, when trying to export, the key without such an attribute cannot be exported.</p>\n<p>I could find at least two relevant mentions which appear to prevent such keys from being exported (hint: use <code>fgrep -OR</code> to avoid following the symbolic links when searching through Apple source code):</p>\n<ul>\n<li><a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExportCrypto.cpp\" rel=\"nofollow noreferrer\">http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecImportExportCrypto.cpp</a></li>\n<li><a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_pkcs12/lib/pkcs12Crypto.cpp\" rel=\"nofollow noreferrer\">http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_pkcs12/lib/pkcs12Crypto.cpp</a></li>\n</ul>\n<hr/>\n<p><a href=\"https://apple.stackexchange.com/questions/140890/non-extractable-private-key-in-keychain-access-app\">I've tried keychain_access from github.com/torsten</a>, but it didn't work.</p>\n<p><a href=\"https://security.stackexchange.com/questions/64323/export-non-extractable-private-key-from-keychain-on-os-x\">I've tried using lldb</a>, <code>lldb -- security export -t identities -f pkcs12 -o /tmp/mycerts.p12</code>, to break on <a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecWrappedKeys.cpp\" rel=\"nofollow noreferrer\">SecWrappedKeys.cpp::impExpWrappedKeyOpenSslExport()</a>, but that doesn't seem to work, either, with <code>break impExpWrappedKeyOpenSslExport</code> giving out an error <code>invalid command 'breakpoint impExpWrappedKeyOpenSslExport'</code>.</p>\n<p><a href=\"https://stackoverflow.com/questions/25088786/track-every-system-and-external-library-call-on-an-os-x-app\">I've tried DTrace</a> to trace Cisco AnyConnect, but I'm not familiar enough with DTrace for it to reveal the datastructures.</p>\n<p><a href=\"https://stackoverflow.com/questions/25152504/include-files-not-found-in-apple-open-source-software\">I've tried re-compiling</a> the Security and SecurityTool packages, but they all appear to require bootstrapping that does not appear to be in place.</p>\n<p>How do I get the private key?</p>\n</div>",
    "votes": "12",
    "answers": 2,
    "views": "5k",
    "tags": [
        "binary-analysis",
        "debuggers",
        "file-format",
        "osx",
        "compilers"
    ],
    "user": "cnst",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've arrived at a solution by researching an answer for one of my Keychain subquestions.</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/25109994/non-extractable-private-key-in-keychain-on-os-x\">https://stackoverflow.com/questions/25109994/non-extractable-private-key-in-keychain-on-os-x</a>.</li>\n</ul>\n<p>According to SecItem.h, this <strong><code>kSecAttrIsExtractable</code></strong> has been introduced with OS X 10.6.</p>\n<ul>\n<li><a href=\"http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecItem.h\" rel=\"nofollow noreferrer\">http://opensource.apple.com/source/Security/Security-55471.14/libsecurity_keychain/lib/SecItem.h</a></li>\n</ul>\n<p>As such, I've tried and succeeded in the following:</p>\n<ul>\n<li><p><code>scp ~/Library/Keychains/login.keychain</code> from OS X 10.9 to OS X 10.5</p></li>\n<li><p>On OS X 10.5, as per the example from the manual page:</p>\n<p><code>security export -k /tmp/login.keychain -t identities -f pkcs12 -o /tmp/mycerts.p12</code></p>\n<p>The <code>security</code> app will ask you for several passwords:</p>\n<ol>\n<li>the new password from the first dialogue is to protect the p12 that's being exported;</li>\n<li>the second one is the <code>login.keychain</code> password, which normally would be the same as the login password of the user on the original OS X 10.9 from where the keychain file came from.</li>\n</ol></li>\n<li><p><code>scp /tmp/mycerts.p12</code> back to OS X 10.9 from 10.5</p></li>\n</ul>\n</div>",
            "votes": "6",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found an easier way with <a href=\"https://github.com/gremwell/chainbreaker\" rel=\"nofollow noreferrer\">chainbreaker fork</a>. It works with MacOS 10.14 Mojave. See full instructions <a href=\"https://github.com/gremwell/chainbreaker/blob/master/README-keydump.txt\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>In my case, I did the following: </p>\n<pre><code>$ pip2 install hexdump pycrypto pyopenssl\n$ git clone https://github.com/gremwell/chainbreaker.git &amp;&amp; cd chainbreaker\n$ python2 chainbreaker.py -f ~/Library/Keychains/login.keychain-db -p &lt;PASS&gt;\n$ openssl x509 -inform DER -in exported/associated/1/*.crt -out secret.crt\n$ openssl rsa -inform DER -in exported/associated/1/*.key -out secret.key\n$ openssl pkcs12 -export -out secret.p12 -inkey secret.key -in secret.crt\n</code></pre>\n<p>Then secret.p12 is ready to be imported on another machine.</p>\n</div>",
            "votes": "4",
            "user": "julian",
            "time": "Dec 27, 2018 at 0:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Leonovich",
                    "text": "<span class=\"comment-copy\">You saved my life, respect</span>",
                    "time": null
                }
            ]
        }
    ]
}