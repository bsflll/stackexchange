{
    "title": "Check if exe is 64-bit",
    "link": "https://reverseengineering.stackexchange.com/questions/6040/check-if-exe-is-64-bit",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How to check if Windows executable is 64-bit reading only its binary. Without executing it and not using any tools like the SDK tool <a href=\"http://msdn.microsoft.com/en-us/library/c1h23y6c.aspx\"><code>dumpbin.exe</code></a> with the <code>/headers</code> option.</p>\n</div>",
    "votes": "22",
    "answers": 4,
    "views": "8k",
    "tags": [
        "windows",
        "pe",
        "executable"
    ],
    "user": "ST3",
    "time": "Aug 8, 2014 at 10:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Executable type is indicated by PE header, <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx\" rel=\"noreferrer\">download</a> documentation.</p>\n<p>The first word (two bytes) of PE header indicates target machine, here is a list of possible values:</p>\n<pre><code>0x0000 - The contents of this field are assumed to be applicable to any machine type\n0x01d3 - Matsushita AM33\n0x8664 - x64\n0x01c0 - ARM little endian\n0x01c4 - ARMv7 (or higher) Thumb mode only\n0xaa64 - ARMv8 in 64-bit mode\n0x0ebc - EFI byte code\n0x014c - Intel 386 or later processors and compatible processors\n0x0200 - Intel Itanium processor family\n0x9041 - Mitsubishi M32R little endian\n0x0266 - MIPS16\n0x0366 - MIPS with FPU\n0x0466 - MIPS16 with FPU\n0x01f0 - Power PC little endian\n0x01f1 - Power PC with floating point support\n0x0166 - MIPS little endian\n0x01a2 - Hitachi SH3\n0x01a3 - Hitachi SH3 DSP\n0x01a6 - Hitachi SH4\n0x01a8 - Hitachi SH5\n0x01c2 - ARM or Thumb (“interworking”)\n0x0169 - MIPS little-endian WCE v2\n</code></pre>\n<p>So to check if it is 64-bit, we need to look for:</p>\n<pre><code>0x8664 - x64\n0xaa64 - ARMv8 in 64-bit mode\n0x0200 - Intel Itanium processor family\n</code></pre>\n<p>And as <a href=\"https://reverseengineering.stackexchange.com/users/8260/bob\">Bob</a> mentioned, <a href=\"ftp://ftp.openwatcom.org/pub/devel/docs/pecoff.pdf\" rel=\"noreferrer\">here</a> is a list of some more machine types (see 11 pg.), however it is not very likely to find them.</p>\n</div>",
            "votes": "26",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Bob",
                    "text": "<span class=\"comment-copy\">Don't forget <code>0x0200</code> (Itanium). That would be IA-64, as opposed to x86-64 (AMD64). There's a couple more \"64-bit\" machine types possible, but you're very unlikely to find them in the wild (<code>0x0284</code> is the 64-bit Alpha AXP, from the <a href=\"http://www.openwatcom.org/ftp/devel/docs/pecoff.pdf\" rel=\"nofollow noreferrer\">1999 documentation</a>, and not supported by Windows after NT4/2000RC).</span>",
                    "time": null
                },
                {
                    "user": "zamnuts",
                    "text": "<span class=\"comment-copy\">For a visual reference, image showing the location of the PE header with 0x8664 (highlighted): <a href=\"http://i.imgur.com/yHvcgdn.png\" rel=\"nofollow noreferrer\">i.imgur.com/yHvcgdn.png</a> (notepad++ hex-editor plugin)</span>",
                    "time": null
                },
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">To quickly find the target machine value: Take the <i>DWORD</i> at offset 0x3C. Add four to this value. That is the offset of the <code>Machine</code> <i>WORD</i>. (Both are little endian)</span>",
                    "time": null
                },
                {
                    "user": "SerG",
                    "text": "<span class=\"comment-copy\">Where do you find <code>0xaa64 - ARMv8 in 64-bit mode</code>? I have not such <code>#define</code> in <code>winnt.h</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's easier to check <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#optional-header-image-only\" rel=\"nofollow noreferrer\">Optional Header</a> magic number.</p>\n<p>For a valid exe, only two values are possible:</p>\n<pre><code>0x10B =&gt; PE32  =&gt; 32 bit\n0x20B =&gt; PE32+ =&gt; 64 bit\n</code></pre>\n</div>",
            "votes": "7",
            "user": "JayXon",
            "time": "Aug 4, 2019 at 8:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jordan",
                    "text": "<span class=\"comment-copy\">Might be worth mentioning the offset to find it at (0x18 bytes from the NT Header which starts at the \"PE\" magic).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's a fun, quick little trick if in a Windows environment and you're checking for an x86 or x64 binary:</p>\n<ol>\n<li>Right-click on the application.</li>\n<li>Click <code>Properties</code>.</li>\n<li>Click the <code>Compatibility</code> tab.</li>\n<li>In the <code>Compatibility mode</code> section, check the <code>Run this program in compatibility mode for:</code> box.</li>\n<li>If you see <code>Windows 95</code> as an option from the drop-down, then it's a 32-bit application. If you do not, then it's a 64-bit application.</li>\n</ol>\n</div>",
            "votes": "5",
            "user": "dsasmblr",
            "time": "Aug 1, 2018 at 18:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>dumping the contents of ST3's answer into a powershell snippet in a ready to use format </p>\n<pre><code>if($args.Count -eq 0) { \"provide a file name or path to file\";exit }\nif((test-path -path $args) -ne $true) { \"file doesnt seem to exist\" ; exit }\n$fs = New-Object IO.Filestream($args , [Io.FileMode]::Open)\n$br = New-Object IO.BinaryReader($fs)\nif($br.Readchar()-ne'M'){\"no mz\";exit};if($br.Readchar()-ne'Z'){\"no mz\";exit}\n$fs.Seek(0x3c,[IO.SeekOrigin]::Begin) | Out-Null\n$elfaw_new = $br.ReadUInt32();\n$peheader=$fs.Seek($elfaw_new,[IO.SeekOrigin]::Begin) \nif($br.Readchar()-ne'P'){\"no pe\";exit};if($br.Readchar()-ne'E'){\"no pe\";exit}\n$mctypeoff = $fs.seek($peheader+4,[IO.SeekOrigin]::Begin)\n$mctype= $br.ReadUInt16()\nswitch($mctype) {\n  0x0000 { \"{0:x4} {1}\" -f  $mctype , \"Unknown machine type\"}\n  0x01d3 { \"{0:x4} {1}\" -f  $mctype , \"Matsushita AM33\"}\n  0x8664 { \"{0:x4} {1}\" -f  $mctype , \"x64\"}\n  0x01c0 { \"{0:x4} {1}\" -f  $mctype , \"ARM little endian\"}\n  0x01c4 { \"{0:x4} {1}\" -f  $mctype , \"ARMv7 (or higher) Thumb mode only\"}\n  0xaa64 { \"{0:x4} {1}\" -f  $mctype , \"ARMv8 in 64-bit mode\"}\n  0x0ebc { \"{0:x4} {1}\" -f  $mctype , \"EFI byte code\"}\n  0x014c { \"{0:x4} {1}\" -f  $mctype , \"Intel 386 or later family processors\"}\n  0x0200 { \"{0:x4} {1}\" -f  $mctype , \"Intel Itanium processor family\"}\n  0x9041 { \"{0:x4} {1}\" -f  $mctype , \"Mitsubishi M32R little endian\"}\n  0x0266 { \"{0:x4} {1}\" -f  $mctype , \"MIPS16\"}\n  0x0366 { \"{0:x4} {1}\" -f  $mctype , \"MIPS with FPU\"}\n  0x0466 { \"{0:x4} {1}\" -f  $mctype , \"MIPS16 with FPU\"}\n  0x01f0 { \"{0:x4} {1}\" -f  $mctype , \"Power PC little endian\"}\n  0x01f1 { \"{0:x4} {1}\" -f  $mctype , \"Power PC with floating point support\"}\n  0x0166 { \"{0:x4} {1}\" -f  $mctype , \"MIPS little endian\"}\n  0x01a2 { \"{0:x4} {1}\" -f  $mctype , \"Hitachi SH3\"}\n  0x01a3 { \"{0:x4} {1}\" -f  $mctype , \"Hitachi SH3 DSP\"}\n  0x01a6 { \"{0:x4} {1}\" -f  $mctype , \"Hitachi SH4\"}\n  0x01a8 { \"{0:x4} {1}\" -f  $mctype , \"Hitachi SH5\"}\n  0x01c2 { \"{0:x4} {1}\" -f  $mctype , \"ARM or Thumb (`“interworking`”)\"}\n  0x0169 { \"{0:x4} {1}\" -f  $mctype , \"MIPS little-endian WCE v2\"}\n};$fs.close()\n</code></pre>\n<p>usage as follows</p>\n<pre><code>:\\&gt;powershell -f binstreamtest.ps1\nprovide a file name or path to file\n\n:\\&gt;powershell -f binstreamtest.ps1 1\nfile doesnt seem to exist\n\n:\\&gt;powershell -f binstreamtest.ps1 shell32.dll\n014c Intel 386 or later family processors\n\n:\\&gt;powershell -f binstreamtest.ps1 c:\\WINDOWS\\system32\\ntkrnlpa.exe\n014c Intel 386 or later family processors\n\n:\\&gt;powershell -f binstreamtest.ps1 xxx\\test32.exe\n014c Intel 386 or later family processors\n\n:\\&gt;powershell -f binstreamtest.ps1 xxx\\test64.exe\n8664 x64\n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Nov 21, 2015 at 11:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ninMonkey",
                    "text": "<span class=\"comment-copy\">Note <code>exit</code> will actually kill the parent terminal, if you replace it with <code>return</code>, it will work. In Powershell, <code>return</code> is really more for <b>control-flow</b>, because values are implicitly outputted . The only time it doesn't, is when writing a <code>class</code></span>",
                    "time": null
                }
            ]
        }
    ]
}