{
    "title": "gdb setting fs register on Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/4076/gdb-setting-fs-register-on-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm debugging an ELF 64-bit binary using <code>gdb</code> and I notice that the <code>%fs</code> register is set to <code>0x63</code>. For some testing that I'd like to perform I'd like to set the <code>%fs</code> register to <code>0x00</code>.</p>\n<p>I tried doing a <code>set $fs=0x0</code> but the value wouldn't change. In some cases I got a:</p>\n<pre><code>Couldn't write registers: Input/output error.\n</code></pre>\n<p>Is there any way I could set the value for the <code>%fs</code> register? I'm also open to modifying the binary, adding inline assembly to the source, etc.</p>\n<p><strong>EDIT</strong> : Currently, I'm trying this out by attaching to a process rather than running it from within <code>gdb</code>.</p>\n<p>A screenshot to illustrate the problem :\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/sxAdI.png\"/></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "linux",
        "gdb",
        "x86-64"
    ],
    "user": null,
    "time": "Apr 15, 2014 at 19:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Low 2 bits have to be set or you will get an <code>EIO</code> error. Only the low 16 bits manage to get set anyways.</p>\n<p>Snippet from <code>arch/x86_64/kernel/ptrace.c</code>:</p>\n<pre><code>case offsetof(struct user_regs_struct,fs):\n    if (value &amp;&amp; (value &amp; 3) != 3)\n        return -EIO;\n    child-&gt;thread.fsindex = value &amp; 0xffff; \n    return 0;\n</code></pre>\n<p>That said, setting to <code>0x00</code> shouldn't be problematic per the code and per my testing.</p>\n<pre><code>(gdb) set $fs=3\n(gdb) info register fs\nfs             0x3      3\n(gdb) set $fs=1\nCouldn't write registers: Input/output error.\n(gdb) set $fs=0\n(gdb) info register fs\nfs             0x0      0\n(gdb) set $fs=0xffffffff\n(gdb) info register fs\nfs             0xffff   65535\n</code></pre>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Apr 15, 2014 at 19:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1743",
                    "text": "<span class=\"comment-copy\">would this behavior vary if a process were being traced?</span>",
                    "time": null
                }
            ]
        }
    ]
}