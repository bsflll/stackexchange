{
    "title": "Collapsing a range into a hidden area, but excluding a possible label at the start of range",
    "link": "https://reverseengineering.stackexchange.com/questions/12433/collapsing-a-range-into-a-hidden-area-but-excluding-a-possible-label-at-the-sta",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Suppose you have code like this (and you don't want to shell out the amount for the HexRays decompiler plugin):</p>\n<pre><code>loc_4BEEEF:                             ; CODE XREF: DriverEntry+28j\n                push    50505050h       ; Tag\n                push    1234h           ; NumberOfBytes\n                push    ebx             ; PoolType\n                call    ds:ExAllocatePoolWithTag\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n<p>Now for these cases I tend to write IDC scripts that collapse the <code>push</code>, <code>push</code>, <code>push</code>, <code>call</code> into a single hidden area.</p>\n<p>However, since the hidden areas in IDA seem to be based on the address and the first <code>push</code> is a \"named location\", the indication that this is a label gets lost when I \"name\" my hidden area with descriptive pseudo-code, like this:</p>\n<pre><code>; eax := ExAllocatePoolWithTag(ebx, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n<p>and if I can deduce the value of <code>ebx</code>, as would be possible here, I'd even convert that into:</p>\n<pre><code>; eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n<p>Is there <strong>any</strong> way, short of starting my hidden area <em>after</em> the first <code>push</code>, that would allow me to hide the instructions and replace them with more descriptive pseudo-code, while at the same time <em>retaining</em> the label/name that coincides with the passing of the (last) argument?!</p>\n<p>That is, my goal is to have it something like:</p>\n<pre><code>loc_4BEEEF:                             ; CODE XREF: DriverEntry+28j\n; eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n</code></pre>\n<p>(the comment behind the <code>loc_4BEEEF</code> label is <em>not</em> important to me, though)</p>\n<p>Of course allocation is but one of the cases where this applies and where the first pushed (i.e. last) argument ends up at a named location.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "170",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Apr 13, 2016 at 12:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, you can use <em>manual instructions</em>.</p>\n<p>From <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/651.shtml\" rel=\"nofollow\">https://www.hex-rays.com/products/ida/support/idadoc/651.shtml</a>:</p>\n<blockquote>\n<h3>SetManualInsn</h3>\n<pre><code>// Specify instruction represenation manually.\n//      ea   - linear address\n//      insn - a string represenation of the operand\n// IDA will not check the specified instruction, it will simply display\n// it instead of the orginal representation.\n\nvoid   SetManualInsn   (long ea, string insn);\n</code></pre>\n</blockquote>\n<p>You can test it through the UI via <code>Edit → Other → Manual instruction...</code> or by pressing <kbd>Alt</kbd>+<kbd>F2</kbd>.</p>\n<p>You would set the manual instruction for address <code>0x4BEEEF</code> to <code>eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')</code>. You could then put the remaining <code>push</code>es and <code>call</code> into a hidden area, or alternatively, set manual instructions for those <code>push</code> and <code>call</code> instructions with <code></code> (blank space) as the manual instruction value.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Apr 16, 2016 at 0:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}