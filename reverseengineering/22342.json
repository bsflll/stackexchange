{
    "title": "IDA Pro, replace exit() with continue;",
    "link": "https://reverseengineering.stackexchange.com/questions/22342/ida-pro-replace-exit-with-continue",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is the function:</p>\n<pre><code>loc_BA060:              ; status\nxor     edi, edi\ncall    _exit\n</code></pre>\n<p>How can one replace exit with continue?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "701",
    "tags": [
        "ida",
        "assembly",
        "x86"
    ],
    "user": "bestupload",
    "time": "Nov 25, 2019 at 13:26",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Can you post the whole function ?</span>",
            "time": null
        },
        {
            "user": "bestupload",
            "text": "<span class=\"comment-copy\">This is the whole function.</span>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">Continue where to? The caller - just return (‘ret’), paying attention to the calling convention and whether you need to clear arguments off the stack. Somewhere else? Jump there instead. To the code that follows? Either replace with a jump or nop these instructions out.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\"><code>continue</code> statement only works in a loop. Where’s your loop?</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">How about replacing <code>call</code> with <code>nop</code>?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As stated in the comments by others, this depends what you mean exactly by \"continue\". I see this having 2 possible meanings:</p>\n<ol>\n<li>You want to return to where the function was called from. You may be able to do this by patching that instruction with a <code>ret</code> or <code>jmp</code>, making sure things line up.</li>\n<li>You want the program to execute the next instruction immediately following the <code>call exit</code>. In this case, you want that instruction to have no effect, so \"no-operation\". Thus, <code>nop</code>.</li>\n</ol>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Oct 26, 2019 at 7:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If this is the entire function, it seems you would want to nullify it. Make it just not call <code>exit()</code>.</p>\n<p>You could do that by simply replacing the <code>call _exit</code> instruction with multiple <code>nop</code> opcodes. In IDA, you'll need to use the patch program feature Under the <code>edit-&gt; patch bytes</code> sub-menu (Notice that in older versions of IDA you had to manually turn it on before it was available, this is no longer the case, though). </p>\n<p>You could either <code>nop</code> the <code>call</code> instruction, the entire function (both <code>call</code> and <code>xor</code>) or even completely remove the <code>call loc_BA060</code> that leads to the function at <code>0xBA060</code>.</p>\n<p>your mileage may vary, however, depending on the surrounding code. It may be the case the prior to the call (and the following <code>exit()</code>), eax contained a meaningful value that is used further down the code execution line. If that's the case and you leave the <code>xor eax, eax</code> instruction intact, you'll only avoid the <code>exit()</code> to hit a crash. It's therefore important to review the code surrounding the instruction you wish to remove.</p>\n<p>Additionally, in this specific case, <code>exit()</code> is a no-return-function. This means the compiler is not required to make sure code following the <code>exit()</code> call will function properly because it is never expected to execute and <code>_exit</code> is not expected to return. You may wish to make sure you modify the code in a way that handles that well, although that behavior depends on the compiler and optimizations used.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Nov 25, 2019 at 13:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}