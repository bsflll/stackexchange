{
    "title": "ildasm on Linux: \"original\" ildasm.exe same as dotnet-ildasm?",
    "link": "https://reverseengineering.stackexchange.com/questions/22915/ildasm-on-linux-original-ildasm-exe-same-as-dotnet-ildasm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to use ildasm on Linux. The original one, that comes with the .NET SDK and can be found on Windows e.g. at <code>c:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\\</code>.</p>\n<p>I found <a href=\"https://www.nuget.org/packages/dotnet-ildasm/\" rel=\"nofollow noreferrer\">dotnet-ildasm</a> and managed to install it on my Ubuntu 18.04. But I am unsure if this is the same as the \"original\" one.</p>\n<ul>\n<li>Is dotnet-ildasm the same as Microsoft ildasm?</li>\n<li>Did someone mangage to install the Microsoft ildasm on Linux?</li>\n</ul>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "848",
    "tags": [
        "linux",
        ".net"
    ],
    "user": "langlauf.io",
    "time": "Jan 5, 2020 at 18:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The original one was a native executable and this one is build in .NET by <a href=\"https://github.com/pjbgf/dotnet-ildasm/blob/master/src/dotnet-ildasm/dotnet-ildasm.csproj#L23\" rel=\"nofollow noreferrer\">utilizing</a> a <a href=\"https://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/\" rel=\"nofollow noreferrer\">Mono.Cecil</a> library to get the assembly information so if I would have to answer your first question I would answer - no, they are not the same.</p>\n<p>Not sure about your second question as original one was Windows executable so there's no point installing it on Linux. I would use the one you linked dotnet-ildasm or <a href=\"https://github.com/mono/ikdasm\" rel=\"nofollow noreferrer\">ikdasm</a> from the Mono project.</p>\n<p>Why are you so focused on having the \"original\" one?</p>\n</div>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Jan 5, 2020 at 20:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">I am focussed in the original one because it would tell me if an assembly is obfuscated. This worked well for unknown obfuscators.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Out of curiosity. How did ildasm told you that assembly is obfuscated or not?</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">It says “protected module — cannot disassemble”</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">thx but \"protected module\" message is far from being obfuscated. It's just one <a href=\"https://blogs.msdn.microsoft.com/vijaysk/2007/12/05/preventing-ildasm-from-disassembling-your-assembly/\" rel=\"nofollow noreferrer\">attribute added</a>. I can provoke the same on <code>ildasm</code> on a simple Hello World.</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Ah interesting. Good point.</span>",
                    "time": null
                }
            ]
        }
    ]
}