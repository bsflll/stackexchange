{
    "title": "submitting input into AFL fuzzer",
    "link": "https://reverseengineering.stackexchange.com/questions/22691/submitting-input-into-afl-fuzzer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some questions about the <a href=\"http://lcamtuf.coredump.cx/afl/\" rel=\"nofollow noreferrer\">AFL Fuzzer</a>:</p>\n<ol>\n<li>How does the AFL Fuzzer know where to inject the payload in the code I compile? For instance if I want to inject it in a specific parameter, how do I do it?</li>\n<li>As I understood, if I put all test cases in the input directory it knows to build randomly injections based on that input, yes?</li>\n<li>I saw a video shows that if for instance there are two inputs in the code, so in the test case each line is for each input. Is that correct? Since I want put a full message (for example HTTP request) into one variable, so how do I do it ? </li>\n<li>I have compiled everything correctly but for some reason it does not find any new paths. In addition, if I do not put the <code>-m none</code> I get the following error : \"Fork server crashed with signal 6\".</li>\n<li>I don't understand when to put <code>@@</code>.</li>\n</ol>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "203",
    "tags": [
        "disassembly",
        "binary-analysis",
        "linux",
        "fuzzing"
    ],
    "user": "Logan",
    "time": "Dec 9, 2019 at 10:19",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. As far as I understand AFL, it mutates whatever input is provided and is able to <i>generate</i> input which triggers faulty behavior. The way it does that is by exploiting the fact that <code>fork()</code> keeps the full state of the program prior to the <code>fork()</code> and so it's relatively cheap to follow different execution paths simply by mutating the input as it goes. The author of AFL even provides a corpus of image files <i>generated</i> by AFL \"from thin air\" simply by fuzzing some image processing tool and generating/mutating input for it.</span>",
            "time": null
        }
    ],
    "answers_data": []
}