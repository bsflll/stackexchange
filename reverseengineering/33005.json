{
    "title": "ARM64 RE Questions",
    "link": "https://reverseengineering.stackexchange.com/questions/33005/arm64-re-questions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a chunk of ARM code which I am trying to make sense of. I'm new to ARM, so would appreciate some help figuring this piece out. I have added some comments to show my progress so far.</p>\n<p>My understanding is what gets passed to main will be interpreted as an ascii string, so it needs to be converted to an integer before comparisons can be made on it in another part of the code. However, I'm a bit confused specifically about the lines I've labeled a-d. I suppose my guess is that the address starting from the 8th character in the ascii string is the starting address for atoi? Thanks for the help!</p>\n<pre><code>main:\n    stp x29, x30, [sp, -48]! # prologue\n    add x29, sp, 0           # prologue\n    str w0, [x29, 28]        # first param onto new stack frame\n    str x1, [x29, 16]        # a. second param onto new stack frame (address?)\n    ldr x0, [x29, 16]        # b. load this value (address?) into x0\n    add x0, x0, 8            # c. add 8 to the address\n    ldr x0, [x0]             # d. dereference the address to get the input?\n    bl  atoi                 # pass input to atoi\n    bl  func1                # pass integer input to func1\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "73",
    "tags": [
        "arm",
        "arm64"
    ],
    "user": "BobNewby",
    "time": "Jun 4, 2024 at 17:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code is not optimized, but it seems to simply do:</p>\n<pre><code>func1(atoi(argv[1]))\n</code></pre>\n<p>The function main prototype is:</p>\n<pre><code>int main(int argc, char** argv, char** envp)\n</code></pre>\n<p>At the beginning w0 (32-bit register because it's a int) aka argc is saved into the stack, it's useless since it's not used to check the number of arguments. Next is x1 (64-bit register because it's a char**) aka argv, it's saved and re-read from the stack to x0 (typical from unoptimized code), the add 8 + ldr are argv[1] or the first argument of the program, argv[0] being the program name by convention.\nAs you mentioned the first parameter is w0/x0, which is also the return value, that's why atoi and func1 are called consecutively.</p>\n<p>I hope it helps.</p>\n</div>",
            "votes": "0",
            "user": "wisk",
            "time": "Jun 14, 2024 at 4:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BobNewby",
                    "text": "<span class=\"comment-copy\">So sorry for the delayed response. Thank you so much for your help!</span>",
                    "time": null
                }
            ]
        }
    ]
}