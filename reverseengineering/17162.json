{
    "title": "how to deobfuscate Autoit strings?",
    "link": "https://reverseengineering.stackexchange.com/questions/17162/how-to-deobfuscate-autoit-strings",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code is:</p>\n<p><a href=\"https://pastebin.com/ZwvySjgy\" rel=\"nofollow noreferrer\">https://pastebin.com/ZwvySjgy</a></p>\n<p>Is it possible to deobfuscate the strings protected with <code>STRINGDEC</code>?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "deobfuscation"
    ],
    "user": "sir mirror",
    "time": "Jan 9, 2018 at 15:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The function <code>STRINGDEC</code> isn't a built-in autoit function. It was implemented by the programmer to create some sort of Substitution cipher.</p>\n<p>You can see the source code of the function at the bottom of the script:</p>\n<pre><code>FUNC STRINGDEC($STRING,$PARAM)\n$STRING=STRINGTOASCIIARRAY($STRING)\n$PARAM=STRINGSPLIT($PARAM,\",\",2)\n$COUNT=0\n$RETURN=\"\"\nFOR $I=0 TO UBOUND($PARAM)-1\n$CHAR=$PARAM[$I]\n$COMPARE=$STRING[$COUNT]\n$RETURN&amp;=CHRW($CHAR+$COMPARE)\nIF $COUNT=UBOUND($STRING)-1 THEN\n$COUNT=0\nELSE\n$COUNT=$COUNT+1\nENDIF\nNEXT\nRETURN $RETURN\nENDFUNC\n</code></pre>\n<p>You can easily implement it by yourself in python, which is a common language for this kind of tasks:</p>\n<pre><code>def stringdec (encoded_string, shifts):\n    shift_array = shifts.split(',')\n    count = 0\n    decoded_string = \"\"\n    for i in range(len(shift_array)):\n        key = shift_array[i]\n        encoded_char = encoded_string[count]\n        decoded_string +=  chr(ord(encoded_char)+int(key))\n        if count == len(encoded_string)-1:\n            count = 0\n        else:\n            count +=1\n    return decoded_string       \n</code></pre>\n<p>Now just execute the function to reveal the decrypted strings:</p>\n<pre><code>&gt;&gt;&gt; stringdec(\"cafcpiykeudtenowwkcwacdibognfe\",\"0,7,-5,15,-80,-28,-24,-4,4,-18,-9,-66,-8,-51\")\n'char Magic[2];'\n\n&gt;&gt;&gt; stringdec(\"ubkwizcimjccdlngsyozqnmibctpmy\",\"2,13,7,-19,-73,-56,22,11,-8,9,-20,11,-24,-11,5,13,-35,-24,-8,-21,-54\")\n'word BytesOnLastPage;'\n\n&gt;&gt;&gt; stringdec(\"jkmnqgfdegisgbolkjuviexnjchhmj\",\"13,4,5,-10,-81,-23,-5,3,0,12,-46\")\n'word Pages;'\n\n&gt;&gt;&gt; stringdec(\"juwfbhmxssmocpwtpbcobugkqfdcsx\",\"13,-6,-5,-2,-66,-22,-8,-12,-4,-16,-12,5,6,-1,-9,-1,-53\")\n'word Relocations;'\n</code></pre>\n<p>Check <a href=\"https://pastebin.com/3KtZxwAp\" rel=\"nofollow noreferrer\">this pastebin page</a> for a <strong>full list</strong> of the decrypted strings.</p>\n</div>",
            "votes": "2",
            "user": "Megabeets",
            "time": "Jan 10, 2018 at 7:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">You are right. That's why I used the term \"some sort of\" since the shift isn't constant. It will be more accurate to say \"some sort of Substitution cipher\".</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to reimplement the following function:</p>\n<pre><code>FUNC STRINGDEC($STRING,$PARAM)\n$STRING=STRINGTOASCIIARRAY($STRING)\n$PARAM=STRINGSPLIT($PARAM,\",\",2)\n$COUNT=0\n$RETURN=\"\"\nFOR $I=0 TO UBOUND($PARAM)-1\n$CHAR=$PARAM[$I]\n$COMPARE=$STRING[$COUNT]\n$RETURN&amp;=CHRW($CHAR+$COMPARE)\nIF $COUNT=UBOUND($STRING)-1 THEN\n$COUNT=0\nELSE\n$COUNT=$COUNT+1\nENDIF\nNEXT\nRETURN $RETURN\nENDFUNC\n</code></pre>\n<p>This function is at the end of your script at pastebin.</p>\n<p>On a basis of some examples taken from your pastebin and If I'm not mistaken in Python it should look like</p>\n<pre><code>def STRINGDEC(thestring, thekey):\n    res = \"\"\n    thekey = thekey.replace(\" \", \"\")\n    splittedkey = thekey.split(\",\")\n    string_length = len(thestring)\n    for i in range(len(splittedkey)):\n        res += chr(ord(thestring[i]) + int(splittedkey[i]))\n    return res\nprint STRINGDEC(\"retwkmufmhmqqqdufngfgdcsnpuhur\",\" 5 ,10,-2,-19,-75,-32,-20,-3,-5,1,1,-12,-54\")\nprint STRINGDEC(\"jkyhbzkqgtbnrbyvhdlfukgrzrptzq\",\" 13,4 ,-7,-4 ,-66,-44,10,-4,-5,-15,16,-31,-12,-15,-20,-19,12,5,3,8,-2,-48\")\nprint STRINGDEC(\"fgdaygtgtzkeiogftjplkmhulfitfm\",\" -2 ,16,11,17,-21,-71,-32,2,-7,-21,-39,-4,11,-10,-20,14,-19,3,0,-49\")\nprint STRINGDEC(\"zopsbydhesjliykcpzsrvtfauhflxz\",\" -22,8,-1,-1,2,-89,-20,7,4,-5,10,-7,9,-37,4,-16,9,-13,-17,-3,-10,-32,-5,1,-9,-3,-43\")\nprint STRINGDEC(\"flefcfumutnglnuaesxlfacuwsbvwu\",\" -2 ,11,10,12,1,-70,-39,8,-8,-18,-9,11,-29,-8,-34,24,8,-17,-9,0,13,-38\")\nprint STRINGDEC(\"sirkouutovjrulplwkbwilyyfdsrvn\",\" 4  ,6,0,-7,-79,-34,-12,6,-10,-39,-4,-35,-5,8,-7,3,-9,-10,10,-47,-4,-11,-21,-20,12,-41\")\n</code></pre>\n<p>and it gives the following result:</p>\n<pre><code>word Machine;\nword NumberOfSections;\ndword TimeDateStamp;\ndword PointerToSymbolTable;\ndword NumberOfSymbols;\nword SizeOfOptionalHeader;\n</code></pre>\n<p>Searching for deobfuscating function always helps and sometimes the function is very easy to find.</p>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Jan 10, 2018 at 9:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}