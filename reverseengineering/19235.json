{
    "title": "Purpose of test eax,eax after a strcmp",
    "link": "https://reverseengineering.stackexchange.com/questions/19235/purpose-of-test-eax-eax-after-a-strcmp",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is my first program i am trying to reverse and my intro to this field.</p>\n<p>The C program will test if two strings match, and it will printf() a message for each occasion.</p>\n<p>This is what the reversed code snippet looks like:</p>\n<pre><code>call strcmp //compares the strings\ntest eax,eax\njne 1706\n</code></pre>\n<p>I know that jne will jump, if ZF=0.</p>\n<p>What i do not understand is what's up with this line:</p>\n<pre><code>test eax,eax\n</code></pre>\n<p>What caused this line?\nHow does it relate with strcmp?</p>\n<p>I know that if the result of test is not zero, ZF=0, so jne will jump.\nBut what does it compare exactly, and how does it relate to strcmp?</p>\n</div>",
    "votes": "16",
    "answers": 5,
    "views": "36k",
    "tags": [
        "disassembly",
        "assembly",
        "c"
    ],
    "user": "user1584421",
    "time": "Sep 3, 2018 at 10:40",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<span class=\"comment-copy\"><code>EAX</code> is the register used by IA32 calling conventions to either return an interger value or a memory address to the calling routine.  By design, <code>strcpy</code> can return either -1,0 or 1 in EAX with 0 indicating  both strings match.  <code>TEST EAX,EAX</code> tests whether <code>EAX</code> is zero or not and sets or unsets the <code>ZF</code> bit.</span>",
            "time": null
        },
        {
            "user": "Peter Cordes",
            "text": "<span class=\"comment-copy\">strcpy returns an integer in EAX, not in FLAGS.   See <a href=\"https://stackoverflow.com/a/38032818\">`testl` eax against eax?</a> for how this instruction sets flags according to EAX.</span>",
            "time": null
        },
        {
            "user": "Peter Cordes",
            "text": "<span class=\"comment-copy\">It's equivalent to <code>cmp eax,0</code> : <a href=\"//stackoverflow.com/a/33724806\">Test whether a register is zero with CMP reg,0 vs OR reg,reg?</a> and <a href=\"//stackoverflow.com/a/38032818\">`testl` eax against eax?</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Register <code>eax</code> will contain <strong>the return code from <code>strcmp</code></strong>, after the call. The <a href=\"https://en.wikipedia.org/wiki/TEST_(x86_instruction)\" rel=\"noreferrer\"><code>test eax, eax</code></a> is the same as <code>and eax, eax</code> (bitwise <code>and</code>) <em>except</em> that it doesn't store the result in <code>eax</code>. So <code>eax</code> isn't affected by the test, but the zero-flag is, for example.</p>\n<p>The <code>test eax, eax</code> is necessary to make the <code>jne</code> work in the first place. And <code>jne</code> is the same as <code>jnz</code>, just as <code>je</code> is the same as <code>jz</code>. Both act based on the ZF (zero-flag) value.</p>\n<p>The <code>jne</code> branch will be taken <em>if</em> ZF=0 and therefore whenever <code>strcmp</code> returns a non-zero value (i.e. strings not equal). Conversely if <code>eax</code> contains zero upon return from <code>strcmp</code>, the jump via <code>jne</code> will <em>not</em> happen.</p>\n</div>",
            "votes": "23",
            "user": "0xC0000022L",
            "time": "Sep 3, 2018 at 12:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">strcmp compares the strings and sets eax to zero if the strings are equal</span>",
                    "time": null
                },
                {
                    "user": "user1584421",
                    "text": "<span class=\"comment-copy\">I mean, it does a logical AND. But what exactly does it checks? How will the jne, not fire? What would have to be the value of eax for jne to not jump?</span>",
                    "time": null
                },
                {
                    "user": "user1584421",
                    "text": "<span class=\"comment-copy\">What are the conditions for jne jumping and not jumping? What does eax have to be in order to jump/not jump? And how does this relates to strcmp?</span>",
                    "time": null
                },
                {
                    "user": "hobbs",
                    "text": "<span class=\"comment-copy\">@user1584421 think for a second and put together what you already know. eax contains the return value of strcmp. <code>test</code> is like bitwise and except it only sets the flags. Anding a value with itself gives the same value, so <code>test eax, eax</code> sets the flags based on whatever eax contains. ZF is set when the result of an operation is zero. jne jumps when ZF is not set. So the jump will be taken when strcmp returns nonzero, meaning the strings are unequal.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might be missing the fact that <em>call strcmp</em> will not set <em>ZF</em> for you - it returns the result in the EAX register. But JNE instruction tests <em>ZF</em>, and that <em>test eax, eax</em> serves to set ZF according to EAX. (actually, the opposite way, EAX=1 -&gt; ZF=0).</p>\n<p>I recommend reading some easy book on x86 assembly, it will help you a lot.</p>\n</div>",
            "votes": "12",
            "user": "Edheldil",
            "time": "Sep 3, 2018 at 15:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>prototype of strcmp() </p>\n<pre><code>int strcmp(\n   const char *string1,\n   const char *string2 \n);\n</code></pre>\n<p>the function returns an int whose interpretation is as follows<br/>\nso i think that answers your question of when it jumps and when not<br/>\nit jumps if eax is either &gt; or &lt; 0<br/>\nit does not jump if eax == 0     </p>\n<pre><code>Return Value\nThe return value for each of these functions indicates   \nthe lexicographic relation of string1 to string2.\n\n&lt; 0   string1 less than string2\n\n  0   string1 identical to string2\n\n&gt; 0   string1 greater than string2\n</code></pre>\n<p>test eax,eax does a binary and of both inputs<br/>\nand for it to jump eax needs to be 0 \nif eax is 0 test eax,eax will set the ZF to 1\nelse it will set the ZF to 0<br/>\nnormally test eax will be used if the program in higher languages test\nthe result like this    </p>\n<pre><code>if(!strcmp( a, b ) ) { do something } \n</code></pre>\n<p>see a sample program and disassembly below</p>\n<pre><code>&gt;&gt;&gt; eax = -1\n&gt;&gt;&gt; print eax &amp; eax\n-1\n&gt;&gt;&gt; eax = 0\n&gt;&gt;&gt; print eax &amp; eax\n0\n&gt;&gt;&gt; eax = 1\n&gt;&gt;&gt; print eax &amp; eax\n1\n&gt;&gt;&gt;\n</code></pre>\n<p>sample program</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main (void) {\n    char *first=\"same\";char *secon=\"same\";char *third=\"diff\";char *forth=\"tiff\";\n    int fis = strcmp(first,secon);\n    int sec = strcmp(first,third);\n    int tid = strcmp(first,forth);\n    printf(\"%8x %8x %8x\\n\",fis,sec,tid);\n    if(!strcmp(first,secon)){\n        printf(\"trings are same \\n\");\n    }\n    if( strcmp(first,third) == 1 ) {\n        printf(\"second string has a chareceter that is greater than first string\\n\");\n    }\n        if( strcmp(first,forth) == -1 ) {\n        printf(\"second string has a chareceter that is lesser than first string\\n\");\n    }\n\n}\n</code></pre>\n<p>disassembly of main \n<a href=\"https://i.sstatic.net/BADDz.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/BADDz.png\"/></a></p>\n</div>",
            "votes": "8",
            "user": "blabb",
            "time": "Sep 3, 2018 at 21:06",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically, the original C code associated with this assembly code would be:</p>\n<pre><code>if (strcmp (str1, str2)) // call strcmp and do the 'test eax, eax'\n  goto error; // str1 != str2 --&gt; jne 1706\n\n// str1 == str2\n// Do legitimate code\n\nerror:\n  // Do what you need to handle the error\n</code></pre>\n<p>If you want a way to remember what does <code>test eax, eax</code> it can be translated like this in C:</p>\n<pre><code>bool test = (eax == 0)\n</code></pre>\n<p>Note that <code>eax</code> is used to store the return code of a function, the test <code>test eax, eax</code> is very often used to check this return code after a call (usually, this is the converse and <code>eax == 0</code> means that an error occurred).</p>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Sep 3, 2018 at 17:21",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>test</code> in assembly is similar to <code>and</code> instruction but the only difference is, it just updates <code>ZF</code> in the <code>EFLAGS</code> or <code>RFLAGS</code> register based on whether you're using <code>x86</code> or <code>x64</code> architecture and not store the result in destination operand, unlike <code>and</code> instruction.</p>\n<p>In <code>c</code> the <code>strcmp</code> is the string library function ,which compares the passed <code>destination</code> and <code>source</code> string arguments untill it found mismatch or it founds a <code>NULL</code> terminator in any of the strings.</p>\n<p>This is one way  implementing <code>strcmp</code> function in c:-</p>\n<pre class=\"lang-c prettyprint-override\"><code>int strCmp(const char* s1, const char* s2)\n{\n    while(*s1 &amp;&amp; (*s1 == *s2))\n    {\n        s1++;\n        s2++;\n    }\n    return *(const unsigned char*)s1 - *(const unsigned char*)s2;\n}\n</code></pre>\n<p>This function performs <code>lexicographical</code> analysis on both given strings.</p>\n<p><strong>Return Value:</strong></p>\n<p>The strcmp() function returns three different values after the comparison of the two strings which are as follows:</p>\n<p><strong>Zero (0):</strong> It returns zero when all of the characters at given indexes in both strings are the same.</p>\n<p><strong>Greater than Zero ( &gt; 0 ):</strong> Returns a value greater than zero is returned when the first not-matching character in s1 has a greater ASCII value than the corresponding character in s2.</p>\n<p><strong>Lesser than Zero ( &lt; 0 ):</strong> Returns a value less than zero is returned when the first not-matching character in s1 has a lesser ASCII value than the corresponding character in s2.</p>\n<p>So why <code>test eax,eax</code> instruction is used there, in <code>x86</code> calling convention <code>eax</code> is the register used to return from the function.</p>\n<p>If the return value zero, performing <code>and</code> operation on two zero values always result in zero.</p>\n<p>If the return value is non zero, performing <code>and</code> operation on two non-zero values always result in that non-zero value</p>\n<p>So based on this, by performing <code>and</code> operation using <code>test</code> instruction we ensure that the <code>return</code> value from <code>strcmp</code> is zero , which means both strings are equal without modifying the value stored in <code>eax</code>,by just checking <code>ZF</code> is set or not.</p>\n<p><strong>Note:</strong> <code>test</code> instruction set the <code>ZF</code> flag based on the <code>and</code> operation result of two opernads.</p>\n</div>",
            "votes": "0",
            "user": "Nalan PandiKumar",
            "time": "Feb 3 at 7:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}