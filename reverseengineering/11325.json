{
    "title": "Find a string in an object file",
    "link": "https://reverseengineering.stackexchange.com/questions/11325/find-a-string-in-an-object-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a libcocos2djs.so file, which presumably is a mobile game using Cocos2d. Result of <code>file</code>:</p>\n<blockquote>\n<p>ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /system/bin/linker, stripped</p>\n</blockquote>\n<p>The game sends HTTP requests to the game server. For each request, the program adds an integer timestamp query parameter to the request URL, then calculates the MD5 hash of the URL concatenated with a secret string, and then adds this MD5 hash as a query parameter to the URL.</p>\n<p>Example:</p>\n<blockquote>\n<p>Original URL: /some_endpoint</p>\n<p>With timestamp: /some_endpoint&amp;time=324234243</p>\n<p>With hash (MD5 the above string concatenated with a secret string): /some_endpoint&amp;time=324234243&amp;hash=870839dba52a8fc6f47f44742116a40b</p>\n</blockquote>\n<p>This secret string is what I want to find out.</p>\n<p>I learnt to use a version of objdump that supports ARM to disassemble this object file, but since my assembly knowledge is limited, I don't know where to start and it would be great if someone can point me to the right direction. I just need one secret string.</p>\n<p>The old versions of the game were using Unity, which could be easily decompiled, and I found the secret string was hard-coded in the source code. They use a new secret string for the new version and it's very likely the secret string is still hard-coded in the source code. Not sure if this information is helpful.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "debugging",
        "decompilation",
        "strings"
    ],
    "user": "Dr. Alpha",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">libcocos2djs.so is from <a href=\"https://github.com/cocos2d/cocos2d-js\" rel=\"nofollow noreferrer\">Cocos2d-JS</a>, a framework library. Your game's string is not in that file.</span>",
            "time": null
        },
        {
            "user": "Dr. Alpha",
            "text": "<span class=\"comment-copy\">@JasonGeffner I found lots of function names of the game in this .so file. I think the game is written in C++ and is compiled with Cocos2d-x code into this .so file.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I Know IDA-PRO has some good plugins to find <code>Crypt</code> algorithms such as AES, DES, Triple DES and others..</p>\n<p>As well as cryptography algorithms, it can find Hashing algorithms as well as MD5, this is pretty easy because the MD5 algorithm has couple of static intiatiors which are easy to look for in the memory (<code>0x67452301</code> <code>0xefcdab89</code>, <code>0x98badcfe</code>, <code>0x10325476</code>). Anyways i would open up the SharedObject in IDA pro, look for the MD5 algorithm, and then look for the string attached to the sent data as a salting mechanism. So if ill have to put the reversing technique into steps it would be:</p>\n<ol>\n<li>Find the MD5 hash function</li>\n<li>Look for the function calling the MD5 function, and with what parameters (One of the parameters should be the data to hash - The data containing the MagicString)</li>\n<li>If you still dont know which part of the string is the MagicString, Try understanding what changed the current string and added the Salting MagicString\ni would look for strcat variants</li>\n</ol>\n</div>",
            "votes": "2",
            "user": "0xAK",
            "time": "Nov 20, 2015 at 16:06",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have the patience to sort the output, try running the file through the <a href=\"https://sourceware.org/binutils/docs/binutils/strings.html\" rel=\"nofollow\"><code>strings</code></a> utility (if you're on Linux or Mac, it's probably already installed, just type <code>strings --version</code> in the terminal to test it).</p>\n<p>This tool is not super fancy, so it will print a lot of junk together with any other text strings found. If you're certain the text you're looking for is there, it shouldn't take too long to manually sort through the output and find it.</p>\n</div>",
            "votes": "0",
            "user": "glampert",
            "time": "Nov 20, 2015 at 2:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}