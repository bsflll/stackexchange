{
    "title": "Find address of kernel function",
    "link": "https://reverseengineering.stackexchange.com/questions/20085/find-address-of-kernel-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say I have a kernel driver abc.sys. I do not have the symbols for abc.sys. In IDA, I find a function sub_1400AAAAA and I want to find this in WinDbg. I attach WinDbg (kd) and then type lm. I find that abc.sys starts at 0xFFFF... and so to go to sub_1400AAAAA I first add the start address and 0xAAAAA and then do \"db [the result of the addition]\". However, when I compare the bytes shown in WinDbg with those of IDA, they are different. What am I doing wrong?</p>\n<p>EDIT: Even when subtracting -0x1000 on top of the addition, it does not land in the right place.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "301",
    "tags": [
        "windows",
        "kernel-mode"
    ],
    "user": "Rob Gates",
    "time": "Dec 8, 2018 at 9:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Type <code>lm m abc.sys</code> in windbg and find out what is the loaded address. Let's say windbg shows  </p>\n<pre><code>abc.sys  0x97370000   \n</code></pre>\n<p>Now go to IDA and rebase the loaded image in IDA.</p>\n<p>If I recall correctly, menu segments-&gt;rebase use the address you found in windbg.  </p>\n<p>After rebasing you don't have to add subtract or grope around,  both will have same address.</p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 18, 2019 at 22:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}