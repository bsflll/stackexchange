{
    "title": "IDA Pro - Applying function signatures",
    "link": "https://reverseengineering.stackexchange.com/questions/15706/ida-pro-applying-function-signatures",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have three files:</p>\n<ol>\n<li>ELF executable,</li>\n<li>ELF dynamically linked library (<code>.so</code>),</li>\n<li>C headers file (<code>.h</code>) with function signatures and related structures for that library.</li>\n</ol>\n<p>#1 imports a number of functions from #2.</p>\n<p>Is there a way for me to leverage #3 to automatically apply signatures from #3 to:</p>\n<ol>\n<li>Imports in #1 in one instance of IDA?</li>\n<li>Exports in #2 in another instance of IDA?</li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "linux",
        "c",
        "elf"
    ],
    "user": "pandasauce",
    "time": "Jun 28, 2017 at 9:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are several functions in the SDK, in <code>typeinf.hpp</code> or <code>ida_typeinf.py</code> that could be of use here, with the python API being much easier to use.</p>\n<ul>\n<li><code>parse_decls</code> - for converting a header file to a til_t type library.\n\n<ul>\n<li>this function seems to skip plain function declarations.</li>\n<li>but does store typedefs by name.</li>\n</ul></li>\n<li><code>parse_decl</code> - for converting a single declaration to a <code>tinfo_t</code> object.\n\n<ul>\n<li>this does work for function declarations, but loses the function name.</li>\n</ul></li>\n<li><code>get_named_type</code> - for looking up a type in the til_t.</li>\n<li><code>apply_type</code> - for applying a type to a function.</li>\n</ul>\n<p>So you could either parse the name from the function declaration yourself, and then use <code>parse_decl</code> to parse each declaration seperately.</p>\n<p>Or you could add <code>typedef</code> to the start of each declaration, so ida will store all your declarations, <strong>by name</strong> in a type libary.</p>\n</div>",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "Sep 26, 2017 at 22:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try using File -&gt; Load File -&gt; Parse C Header File (Ctrl+F9). You might need to tweak some things in the header file.</p>\n</div>",
            "votes": "0",
            "user": "joxeankoret",
            "time": "Jun 28, 2017 at 9:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pandasauce",
                    "text": "<span class=\"comment-copy\">Thank you for your response. I have tried this and it did not work. IDA successfully parses the file. I can manually fix function signatures by telling IDA what the arguments are, including custom structure pointers. However, this is very time consuming and feels unnecessary. Is there a way for it to automatically or semi-automatically apply signatures from the header file to functions matched by name?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. that way is the feature described above. It does not parse complicated C constructs and as mentioned you may need to tweak the file to make it usable by IDA. You can write a script to do that.</span>",
                    "time": null
                },
                {
                    "user": "pandasauce",
                    "text": "<span class=\"comment-copy\">I managed to get first scenario to work using <code>tilib</code>. What changes would I need to make to the header file to get the second scenario to work, i.e. apply function signatures to the library file?</span>",
                    "time": null
                }
            ]
        }
    ]
}