{
    "title": "string pointer to byte conversion condition",
    "link": "https://reverseengineering.stackexchange.com/questions/27991/string-pointer-to-byte-conversion-condition",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to understand the following snippet. I understand that the first check would check if it is even if it would be an int, but I don't understand it in this context.</p>\n<p>Could someone explain to me what this does?</p>\n<pre><code>if (((byte)*password &amp; 1) == 0) {\n  buf = password + 1;\n  len = (uint)((byte)*password &gt;&gt; 1);\n}\nelse {\n  len = *(uint *)(password + 4);\n  buf = *(basic_string **)(password + 8);\n}\n\nbp = BIO_new_mem_buf(buf,len);\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "83",
    "tags": [
        "binary-analysis",
        "c",
        "ghidra"
    ],
    "user": "David",
    "time": "Jul 13, 2021 at 8:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on this limited amount of psuedo-C:</p>\n<pre><code>struct password_buffer {\n    byte len:7;\n    byte use_pointer:1;\n    union {\n        byte buffer[128];\n        struct {\n            byte pad[3];\n            uint len;\n            char *buf;\n        } pointer;\n    };\n};\n</code></pre>\n<p>This \"password\" should be probably be treated like a union.  That low bit is not odd or even, it's a flag to decide if the password is a buffer or in a pointer.</p>\n<p>When the least significant bit is unset in the first byte, then the password is a buffer with the zero index byte containing the length in the high 7 bits followed directly by the password.</p>\n<p>When the least significant bit is set in the first byte, then the length is the first uint after this first byte (4-byte aligned) and password is stored in memory with a pointer.</p>\n<p>This structure probably will default to the \"buffer\" when the string is less than 128 characters; otherwise, it will be in other memory with a pointer to the memory and a length value.</p>\n<p>structs like this will not cleanly be represented by most decompilation tools.  There's just not enough information in the assembly to do so.</p>\n</div>",
            "votes": "1",
            "user": "mumbel",
            "time": "Jul 14, 2021 at 1:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">Thanks for the reply. The pseucode code comes from the Ghidra decompiler. Turns out the paramater wasn't password but publicKey.</span>",
                    "time": null
                }
            ]
        }
    ]
}