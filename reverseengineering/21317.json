{
    "title": "Explanation of heap shaping technique and how it is different from heap spraying",
    "link": "https://reverseengineering.stackexchange.com/questions/21317/explanation-of-heap-shaping-technique-and-how-it-is-different-from-heap-spraying",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Recent RDP <a href=\"https://research.checkpoint.com/reverse-rdp-attack-code-execution-on-rdp-clients/\" rel=\"nofollow noreferrer\">vulnerability</a> and exploits have mentioned the use of heap shaping technique. \nCan anyone please explain in details what is actually involved in using this tactic. </p>\n<p>Thanks</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "exploit",
        "heap"
    ],
    "user": "GelosSnake",
    "time": "May 15, 2019 at 16:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Heap shaping (also called heap grooming, for a more passive approach) is the slightly more intelligent sibling of heap spraying while developing exploits. Therefore, to properly explain heap shaping one must first be familiar with <a href=\"https://en.wikipedia.org/wiki/Heap_spraying\" rel=\"nofollow noreferrer\">heap spraying</a>.</p>\n<h2>heap spraying</h2>\n<p>Heap spraying is the act of intentionally filling (spraying) a target process's heap space with recurring/sequential data, using an external attack primitive.</p>\n<p>Say for example, you've found a uninitialized-variable bug, where a variable is not initialized when it should, and is then used in a manner that could be dangerous depending on it's the actual value.</p>\n<p>An example might make it clearer:</p>\n<pre><code>typedef struct __struct_cmd {\n    int type;\n    char shell_cmd[1024];\n} struct_cmd;\n\nvoid safe_cmd(struct_cmd* cmd)\n{\n    switch (cmd-&gt;type)\n    {\n    case CMD_1:\n        strcpy(cmd-&gt;shell_cmd, SAFE_CMD1);\n        break;\n    case CMD_2:\n        strcpy(cmd-&gt;shell_cmd, SAFE_CMD2);\n        break;\n    }\n    system(cmd-&gt;shell_cmd);\n}\n</code></pre>\n<p>In the above example, it's easy to notice that if a user provides any value other than <code>CMD_1</code> or <code>CMD_2</code> for <code>cmd.type</code>, <code>shell_cmd</code> will not be uninitialized and an unknown value will be passed on to the lucrative <code>system</code> call.</p>\n<p>Being able to set <code>cmd-&gt;shell_cmd</code> to a specific value that is a valid (and malicious) shell command will potentially give us code execution on the target. Simply put, heap spraying is the act of getting a lot of heap memory space filled with the specific shell command we'd like to execute.</p>\n<h2>heap shaping</h2>\n<p>Now that was a relatively trivial case, and quite frequently heap spraying/shaping are used to exploit memory corruption bugs but that's irrelevant. Usually, you'd be addressing many more constraints to successfully exploit a memory corruption, and \"filling the heap with data\" simply won't be enough. </p>\n<p>Double-free and use-after-free bugs will require specific objects/structs be allocated at the same space  a different object previously reside in. You'd then need to make sure the heap has a specific <em>shape</em>, in a way, so that a different object will \"fit\" into a <a href=\"https://en.wikipedia.org/wiki/Coalescing_(computer_science)\" rel=\"nofollow noreferrer\">coalescing heap</a> (or high fragmentation heap, as opposed to <a href=\"https://docs.microsoft.com/en-us/windows/desktop/Memory/low-fragmentation-heap\" rel=\"nofollow noreferrer\">low fragmentation heap</a>). You may need to make sure a specific instance you control through a primitive is allocated in the right spot. Getting the heap to be in that specific way is what's called \"heap shaping\"</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "May 15, 2019 at 16:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}