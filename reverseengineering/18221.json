{
    "title": "Question about gdb and memory addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/18221/question-about-gdb-and-memory-addresses",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i am trying to use gdb to analyse a c program but i am a little confused.\n<a href=\"https://i.sstatic.net/L9fGY.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/L9fGY.png\"/></a>\nin the above picture you can see  i am trying to analyse the stack . On the left we have memory addresses.Since i am using a 64 bit machine ,shouldn't ever memory address have 64 bits?but in the picture every memory location has 32 bits . Also the stack starts at 0x28fed0 and the second address is 0x28fee0 ,where are the address between these.I mean where is 0x28fed1?\nI studied architecture many years ago and i seem to be missing something basic.\nCan any one help me out?</p>\n<p>thanks</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb"
    ],
    "user": "shujaat",
    "time": "May 9, 2018 at 16:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The stack is not intrinsically 64-bit, it's just a memory area which can contains anything.</p>\n<p>You specifically asked gdb to dump the memory in 32-bit quantities:</p>\n<p><code>x/32xw</code> </p>\n<p>32 is the count (you can see that you've got 8 lines of 4 columns), <code>x</code> is output format (hexadecimal), and <code>w</code> is the item size (\"word\" - a 32-bit integer).</p>\n<p>If you want to view memory as an array of 64-bit items, replace <code>w</code> by <code>g</code> (\"giant word\" or a 64-bit integer). To see individual bytes, use <code>b</code>.</p>\n<p>As for addressing, each 32-bit item occupies four 8-bit bytes, so a row of four of them adds up to <code>4*4=16</code>, or <code>0x10</code> bytes, that's why the next line starts at <code>0x28fee0</code>. The byte at address <code>0x28fed1</code> is present inside the 32-bit word at 0x28fed0. Try dumping memory in different formats to get the feel for the data layout. Read up on <em><a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">little endian</a></em>.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 9, 2018 at 18:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "shujaat",
                    "text": "<span class=\"comment-copy\">Amazing answer ,i know about Endianness but got a little confused.just one more thing you said \"The stack is not intrinsically 64-bit, it's just a memory area which can contains anything.\"so how much bits or bytes can be stored on a single memory location i.e single memory address</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@shujaat on x86/x64 - one byte (8 bits) per address location</span>",
                    "time": null
                }
            ]
        }
    ]
}