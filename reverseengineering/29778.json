{
    "title": "How to restore struct fields",
    "link": "https://reverseengineering.stackexchange.com/questions/29778/how-to-restore-struct-fields",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an object named <code>ComputeService::RPC</code> that is being used as input in a function inside a binary file:</p>\n<pre><code>__int64 __fastcall ComputeService::Rpc::GetClientProcessId(ComputeService::Rpc *this)  \npc *this)\n{\n  unsigned int v1; // ebx\n  int RpcCallAttributes[32]; // [rsp+20h] [rbp-98h] BYREF\n\n  v1 = -1;\n  memset_0(RpcCallAttributes, 0, 0x78ui64);\n  RpcCallAttributes[1] = 16;\n  RpcCallAttributes[0] = 3;\n  if ( !RpcServerInqCallAttributesW(0i64, RpcCallAttributes) )\n    return (unsigned int)RpcCallAttributes[16];\n  return v1;\n}\n</code></pre>\n<p>* I used the Pseudocode in IDA to extract this information.</p>\n<p>I went to the window of the \"Local Types\" and it shows that it is a <code>struct</code> but that's it.<br/>\n<a href=\"https://i.sstatic.net/F4JaV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/F4JaV.png\"/></a></p>\n<p>Is there a way to check what are the fields inside this <code>struct</code>?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "619",
    "tags": [
        "ida",
        "c++",
        "decompile",
        "struct"
    ],
    "user": "E235",
    "time": "Dec 26, 2021 at 12:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA knew that there was a <code>struct</code> named <code>ComputeService::RPC</code> due to a mangled name containing a reference to it -- for example, a mangled name for the function shown in your question. However, IDA did not have a <code>struct</code> declaration for it, so it created an empty <code>struct</code> -- you can tell this because the Description field for that entry simply says <code>struct</code>. If IDA had had access to a <code>struct</code> declaration, you would see it in your second screenshot.</p>\n<p>So the short answer is: no, it does not appear that you have access to the <code>struct</code> declaration (e.g. from a PDB file with full type information), otherwise IDA would have already created it. You're going to have to reconstruct it yourself. However, you might also want to see <a href=\"https://htmlpreview.github.io/?https://github.com/NationalSecurityAgency/ghidra/blob/Ghidra_10.0_build/Ghidra/Configurations/Public_Release/src/global/docs/ChangeHistory.html\" rel=\"nofollow noreferrer\">Ghidra 10.0's new features for exactly this type of situation</a>:</p>\n<blockquote>\n<p>Scripting. Added prototype RecoverClassesFromRTTIScript and that uses RTTI information to enhance Ghidra's knowledge of class hierarchy, class member function types (constructors, destructors, deleting destructors, clones) and class member data. The script will label and put member functions into correct class namespace and apply new class structures created either using PDB information, if available, or Decompiler pcode information. (GP-339)</p>\n</blockquote>\n</div>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Dec 26, 2021 at 22:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is there a way to check what are the fields inside this struct?</p>\n</blockquote>\n<p>The old fashion way. Follow that pointer around through the assembly and see what offsets are used and how. If you can find where it's created, you can know it's total size. If you can debug the program live you can set watch points and see what data actually gets put into each offset. The size of the 'objects' manipulated at each offset and how they're used can clue you in to what they are. If you're really lucky some will get passed to system calls, OS APIs, or other well documented functions so you can just look up the expected arguments.</p>\n<p>If you're going to do that, you'll need to refresh <a href=\"http://www.catb.org/esr/structure-packing/\" rel=\"nofollow noreferrer\">structure padding/packing</a>. You might be able to locate the <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti\" rel=\"nofollow noreferrer\">RTTI</a> if its a virtual class or ever used as part of an exception which would give you more hints.</p>\n</div>",
            "votes": "2",
            "user": "Thomas Mouton",
            "time": "Dec 29, 2021 at 11:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}