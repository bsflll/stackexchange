{
    "title": "How does Cheat Engine offset calculation work?",
    "link": "https://reverseengineering.stackexchange.com/questions/29667/how-does-cheat-engine-offset-calculation-work",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have this memory address <code>0F58F478</code> and this offset <code>5C</code>. I'm using memory sharp and it works perfectly when I'm adding this number.</p>\n<pre><code>IntPtr address = _mSharp.Read&lt;IntPtr&gt;(0F58F478, false) + 0x5C;\n// address output: 035F4E60\n</code></pre>\n<p>According to Cheat Engine this would be the result <code>035F4E60</code>. But I've tried using a <a href=\"https://www.calculator.net/hex-calculator.html\" rel=\"nofollow noreferrer\">Hex Calculator</a> and the result is by far kinda different. I'd like to know how MemorySharp or CheatEngine calculates this sum.</p>\n<p><a href=\"https://i.sstatic.net/qqltd.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/qqltd.png\"/></a></p>\n<p>Notice that when I add 0 to a pointer this change its value, how this works? Why 0 is adding value there?</p>\n<p><a href=\"https://i.sstatic.net/nToUq.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/nToUq.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "memory",
        "hex",
        "address",
        "offset",
        "cheat-engine"
    ],
    "user": "Sharki",
    "time": "Dec 5, 2021 at 9:38",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">what are you adding ?in hex calculator ?  0F58F478 + 5c  this ? &gt;&gt;&gt; print(hex(0x0F58F478+0x5c)) === 0xf58f4d4 if yes then you are not dereferencing  0F58F478  is a pointer you need to read what it points to and add 0x5c to the result</span>",
            "time": null
        },
        {
            "user": "Sharki",
            "text": "<span class=\"comment-copy\">Ahhhh ok, it makes sense, thanks! just one question more, why add <code>0x0</code> to the <code>0F58F478</code> pointer changes its value? (I've updated the post with a new image) Also, is a pointer the same that memory address?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As I Commented if you are adding 0x5c to 0x0F58F478 and getting 0xf58f4d4<br/>\nit is not what the memory sharp or cheat engine does</p>\n<p>0x0xf58f4d4  is a pointer an address in the memory space<br/>\nthey dereference the pointer and add 0x5c to the result</p>\n<p>your other query why adding 0 also falls under the same category adding 0 or 10 or 5c or 100 or 987 and dereferencing them will always provide the underlying value</p>\n<p>also keep an eye on the square brackets [] means dereference<br/>\nwithout square brackets means direct addition<br/>\nas the first entry in your screen shot shows</p>\n<pre><code>&amp;a  = 0x0F58F478                            &amp;a = __addressof(a);\n*a  = 0x3454e04                             *a = value of a\n a  + 0x5c = 0xf58f4d4                      direct addition \n[a] + 0x5c = 0x3454e04+0x5c ==  0x3454e60   dereferenced addition\n[a+ 0x5c] = [f58f4d4] = *f58f4d4 = some other value that is got by \nfirst adding  and then  dereferencing\n</code></pre>\n<p>since this appears to be c# you should try reading about unsafe / boxing / unboxing etc as it appears you are not aware of pointers,memory ,dereferencing etc</p>\n<p>here is a boxing example in powershell</p>\n<pre><code>PS C:\\&gt; $a = 123                                                                                                        \nPS C:\\&gt; $b = $a     b contains what was in $a viz 123                                                                                                    \nPS C:\\&gt; $a = 456    a gets a new value and a new address                                                                                                      \nPS C:\\&gt; $a,$b                                                                                                            \n456\n123\nPS C:\\&gt;  \n</code></pre>\n<p>or in c# unsafe construct</p>\n<pre><code>:\\&gt;dir /b\nunsafe.cs\n\n:\\&gt;type unsafe.cs\nusing System;\nclass Program\n{\nstatic unsafe void Main()\n{\n   int var = 32;\n   int* p = &amp;var;\n   Console.WriteLine(\"value is 0x{0:x}\" , var);\n   Console.WriteLine(\"address is 0x{0:x}\" , (int)p);\n   Console.WriteLine(\"dereferenced is 0x{0:x}\" , (*p + 0x5c));\n   Console.WriteLine(\"undereferenced is 0x{0:x}\" , ((int)p + 0x5c));\n   Console.WriteLine(\"somegarbage  is 0x{0:x}\" , *((p + 0x5c)));\n}\n}\n:\\&gt;csc unsafe.cs /unsafe\nMicrosoft (R) Visual C# Compiler version 2.10.0.0 (b9fb1610)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n\n:\\&gt;unsafe.exe\nvalue is 0x20\naddress is 0x4feac4\ndereferenced is 0x7c\nundereferenced is 0x4feb20\nsomegarbage  is 0x0\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Dec 5, 2021 at 17:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}