{
    "title": "Import functions from executable",
    "link": "https://reverseengineering.stackexchange.com/questions/6229/import-functions-from-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've injected a DLL into an existing game. </p>\n<p>I can import functions and variables like this:</p>\n<pre><code>typedef const wchar_t* (__fastcall *get_string_t)(const char*, int, const char*, int);\nget_string_t real_get_string = reinterpret_cast&lt;get_string_t&gt;(0x6f9ec0);\nint&amp; g_cx = *reinterpret_cast&lt;int*&gt;(0x8523e0);\n</code></pre>\n<p>but these function pointers and variables add an indirection and have cumbersome syntax. \nIs there a way to import the original functions from the executable such that the linker can find them and I can use normal (extern) declarations?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "c++",
        "pe"
    ],
    "user": "XTF",
    "time": "Sep 12, 2014 at 18:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, you could add an Export Table to the original executable, with named symbols (which you define) pointing to the addresses for those functions/globals/etc.</p>\n<p>Your DLL could then import those function addresses by Export Table symbol name at runtime.</p>\n<p>But whether you go with this plan or your current plan above, be careful about calling the EXE's functions from your DLL. Be sure you understand the function's side-effects, use of global variables, etc. since it may not be thread-safe to call it from your DLL.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Sep 12, 2014 at 19:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Note that even with this approach you would still need to use <code>typedef</code>, etc.</span>",
                    "time": null
                },
                {
                    "user": "XTF",
                    "text": "<span class=\"comment-copy\">Why would typedefs be needed? A normal declaration should be enough. And how would I import data (variables)? I'd prefer to resolve this at link time, that'd also avoid having to update the exe.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Do you mean calling functions from host executable, in which you have injected your DLL?</p>\n<p>If this is the case I don't suggest you using direct addresses because there is possibility that the image is loaded at different address than intended (especially if 'IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE' flag is set). Better use 'GetModuleHandle' to get process image base and call your functions using RVA plus the value returned.</p>\n<p>The above will be true if the target functions aren't in the EAT of the host image. If this is the case you can just declare their names and use those functions in your source if you have the proper host image libraries.</p>\n<p>This is the best I can say because your question is a bit unclear.</p>\n<p>EDIT: The code you have written in OP, can be re-written as follows:</p>\n<pre><code>const wchar_t* (__fastcall *get_string)(const char*, int, const char*, int) = (decltype(get_string))0x6f9ec0;\n\nint&amp; g_cx = *(int*)0x8523e0;\n</code></pre>\n<p>If your compiler supports C++11 or above because of the 'decltype' keyword.</p>\n</div>",
            "votes": "0",
            "user": "sasho648",
            "time": "Jan 10, 2015 at 21:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}