{
    "title": "Win7 ASLR bypass",
    "link": "https://reverseengineering.stackexchange.com/questions/4703/win7-aslr-bypass",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The conditions: say one patched programm has hardcoded address of <code>printf()</code> from dynamically loaded <code>msvcrt80.dll</code>. It works just fine on XP, but Win7 randomizes address space (ASLR), so this trick become impossible and program crashes with call of my hardcoded <code>printf()</code> address.</p>\n<p>What should I do to retrieve IAT RVA of this <code>printf()</code> in win7 to make this work?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "862",
    "tags": [
        "windows",
        "exploit"
    ],
    "user": "see ya",
    "time": "Jul 26, 2014 at 2:43",
    "comments": [
        {
            "user": "Stolas",
            "text": "<span class=\"comment-copy\">Are you looking for ASLR bypassing by finding User32.dll and load GetProcAddr + LoadLibrary or do you want to walk your import table to find the already imported printf function?</span>",
            "time": null
        },
        {
            "user": "see ya",
            "text": "<span class=\"comment-copy\">No, I dont need GetProcAdress. Both addresses considered known, but this dont help much. After <code>call RVA(IAT+function)</code> for some reason execution goes on, interpreting <code>RVA(IAT+function)+4</code> as opcode and here is application crash.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you can patch the program's image, you don't actually need to hardcode the address. you can simply add another import entry to the already existing import tables and have it patched in automatically by the loader.</p>\n<p>See <a href=\"http://www.programminghorizon.com/win32assembly/pe-tut6.html\" rel=\"nofollow\" title=\"Iczelion's import table tutorial\">Iczelion's tutorial</a> on import tables to guide you further.</p>\n<p>Of course, if you're trying to do that from shellcode, you'll need to walk the loader data, locating the DLL image. The <code>Ldr</code> member in <a href=\"http://en.wikipedia.org/wiki/Process_Environment_Block%20%22PEB%20structure\" rel=\"nofollow\">PEB</a> should help you with that.</p>\n<p>If you'd be so kind to provide more details on what exactly you are trying to do, I'll update the answer; there is no simple answer to the \"how to defeat ASLR\" question.</p>\n</div>",
            "votes": "5",
            "user": "Dmitry Janushkevich",
            "time": "Jun 27, 2014 at 7:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}