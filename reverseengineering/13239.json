{
    "title": "How can I read the assembly instructions of a C program from C#?",
    "link": "https://reverseengineering.stackexchange.com/questions/13239/how-can-i-read-the-assembly-instructions-of-a-c-program-from-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to be able to do what an ordinary disassembler does—list the assembler instructions of an arbitrary executable—but from C#. It would consist, for instance, of finding a specific instruction from its address and determining which memory address is accessed by it.</p>\n<p>Any Google search I tried leads me rather to the resources which explain how to decompile C# applications themselves in order to get IL bytecode. Except that I don't care about IL bytecode: what I want is to get the actual instructions of any app, including ones written in plain C or any other language.</p>\n<p>In other words, I want the same thing as in <a href=\"https://stackoverflow.com/a/840363/240613\"><em>How can I see the assembly code for a C++ program?</em></a> question, but to be able to do it programmatically instead of using a GUI tool.</p>\n<p>How do I do that?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "745",
    "tags": [
        "c#",
        "assembly",
        "disassemblers"
    ],
    "user": "Arseni Mourzenko",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Sarvesh Mishra",
            "text": "<span class=\"comment-copy\">OllyDbg commandline may help</span>",
            "time": null
        },
        {
            "user": "Margaret Bloom",
            "text": "<span class=\"comment-copy\">I googled for \"<i>disassembler library</i>\" (which is what anyone would do) and found <a href=\"https://github.com/aquynh/capstone\" rel=\"nofollow noreferrer\">capstone</a>. I don't know how good it is, but it seems to be used by a lot of software.</span>",
            "time": null
        },
        {
            "user": "Ped7g",
            "text": "<span class=\"comment-copy\">Wait, I'm totally ignorant about C#, but isn't it interpreted/jit type language, so unless you use some extra tool to get pre-compiled native machine code, there're only that interpreter language bytecodes, and the virtual machine is turning them into machine code (either by interpreting it, or by using JIT compiler on the particular piece of code being interpreted)? That was the whole point of that \"managed\" circus, to avoid direct machine code, IIRC.</span>",
            "time": null
        },
        {
            "user": "Brian",
            "text": "<span class=\"comment-copy\">@Ped7g: He's not trying to disassemble a C# program.  Per the title, he's trying to disassemble a C program <i>using</i> C#.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>here is a possible way and it is open source<br/>\n<a href=\"https://github.com/9ee1/Capstone.NET\" rel=\"nofollow\">capstone.NET</a></p>\n<pre><code>:\\&gt;nuget list capstone*\nGee.External.Capstone 1.2.2    \n:\\&gt;cd Desktop    \n:\\&gt;md capnet    \n:\\&gt;cd capnet    \n:\\&gt;nuget install Gee.External.Capstone\nSuccessfully installed 'Gee.External.Capstone 1.2.2' to C:\\xxx\\capnet    \n:\\&gt;md testcap    \n:\\&gt;cd testcap    \n:\\&gt;copy ..\\Gee.External.Capstone.1.2.2\\content\\capstone.dll .\n        1 file(s) copied.    \n:\\&gt;copy ..\\Gee.External.Capstone.1.2.2\\lib\\net45\\Gee.External.Capstone.dll .\n        1 file(s) copied.    \n:\\&gt;cat capy.cs\nusing System;\nusing Gee.External.Capstone;\npublic class Dissy\n{\n    public static void Main()\n    {\n        var dis = CapstoneDisassembler.CreateX86Disassembler(DisassembleMode.Bit32);\n        var code = new byte[] {  0x8d, 0x4c, 0x32, 0x08, 0x01, 0xd8, 0x81 };\n        var res = dis.DisassembleAll(code);\n        foreach(var a in res) {\n            Console.WriteLine(\"{0}\\t{1}\",a.Mnemonic , a.Operand);\n        }\n    }\n}\n:\\&gt;csc /r:Gee.External.Capstone.dll capy.cs\nMicrosoft (R) Visual C# Compiler version 1.1.0.51109\nCopyright (C) Microsoft Corporation. All rights reserved.   \n\n:\\&gt;capy.exe\nlea     ecx, dword ptr [edx + esi + 8]\nadd     eax, ebx\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 9, 2016 at 15:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}