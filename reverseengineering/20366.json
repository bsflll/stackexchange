{
    "title": "Z80 Absolute Jump to offset in middle of instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/20366/z80-absolute-jump-to-offset-in-middle-of-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on reverse engineering an embedded system which uses a Z80 processor. I'm using IDA as the disassembler. I ran upon an absolute jump (JP) that seems to jump to the middle of another instruction. I undefined and redefined the target location as code, and it disassembled into valid instructions, but they don't appear to do anything. I was wondering if I could get some help making sense of this or if I'm overlooking something.</p>\n<p>Edit: \nThis jump is an exit point for a loop. </p>\n<p>Source + Bin + IDB file can be found <a href=\"https://drive.google.com/drive/folders/1g9MN1R0PtrZcas8FmccKf9D0whMIPB9h\" rel=\"nofollow noreferrer\">here</a></p>\n<p>Jump code:</p>\n<p><a href=\"https://i.sstatic.net/Zm2n6.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Zm2n6.png\"/></a></p>\n<p>Jump target with IDA auto disassembly:</p>\n<p><a href=\"https://i.sstatic.net/c6siv.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/c6siv.png\"/></a></p>\n<p>Jump target after undefining and redefining 121 as code:</p>\n<p><a href=\"https://i.sstatic.net/syjL8.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/syjL8.png\"/></a></p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "516",
    "tags": [
        "ida",
        "embedded"
    ],
    "user": "Zman37",
    "time": "Jan 14, 2019 at 22:00",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. Please post the relevant code as actual text. This will ensure that it can be searched. Images are hard to search for keywords. Thanks.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>without any context we can only guess...</p>\n<p><strong>However <code>jp (hl)</code> was commonly used for:</strong></p>\n<ol>\n<li><p><strong>jump to pointer</strong></p>\n<p>this one is obvious <code>hl</code> points to a memory location that you want to jump to. You can do many things with this like for example you want to decide how to handle some input and you got more choices of handlers so you evaluate which to use in <code>hl</code> and at the end just jump to it. The same goes for <code>mode</code> of a program... For example you got more ways of rendering text or something and you want easily switch between them for the whole program ... then simply store the selected routine in some pointer and when needed jump to it...</p>\n<p>I do not have any context to your code but this is the most likely scenario:</p>\n<p><code>286Eh</code> is the selected mode handler, <code>hl</code> read that position using <code>ix</code> and lastly routine jump to it. I am guessing the final <code>ret</code> is in the routine somewhere.</p></li>\n<li><p><strong>call/return to/from subroutine with non standard calling convention</strong></p>\n<p>sometimes operands are passed to subroutines in non standard ways (not on stack) which prevent to use <code>call</code> or <code>ret</code> directly. In such cases <code>jp (hl)</code> can solve such issues.</p>\n<p>For example take a look at this x86 example:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/48664419/2521214\">Graphics mode in assembly 8086</a></li>\n</ul>\n<p>the <code>printl</code> is expecting printed string directly after the call ...</p>\n<pre><code>call printl\ndb  'SPEKTRA software &amp; hardware',0\n</code></pre>\n<p>this spares the input data pointer setting and also its more comfortable as the printed text is directly where it is used (not in some table in data section) also you do not need labels. As you can see the <code>printl</code> can not ret directly to the address stored in stack. Instead it needs to jump after the text which is ideal usage of <code>jp (hl)</code> example (however my x86 code does it differently due to different instruction set).</p></li>\n<li><p><strong>resolve self modify code issues</strong></p>\n<p>configurable programs do not have static jump/call addresses so <code>jp (hl)</code> can be used for configurable jumps...</p></li>\n</ol>\n<p><strong>Now getting back to jumping into middle of instruction</strong></p>\n<p>This might be or might not be true. If you use disassembler then it does not know where the <code>ORG</code> statement of each code segment is. So it instead translates from start of the file. When you are tracing then it takes the <code>PC</code> as the starting position and translates from it relatively so if you scroll the listing you might got wrongly disassembled other parts of code. However after few continuous single byte instructions the code is aligned again so most of the code would be translated correctly.</p>\n<p>But there are also cases when we deliberately jump to middle of instruction. Sometimes time sensitive code needs exact number of <code>[T]</code> tacts to spend on some routine and jumping in the middle of some instruction can resolve missing <code>[T]</code> states after some conditional behavior.</p>\n</div>",
            "votes": "1",
            "user": "Spektre",
            "time": "Jan 14, 2019 at 8:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zman37",
                    "text": "<span class=\"comment-copy\">In this case it is a #2 scenario, the jump is within a subroutine with no return instruction. I should have explained better in the original post, but 28e6 contains a memory address, which contains another memory address, which resolves to 0121h. 0121h is the jump target and is in the middle of another instruction. I attached the code and IDB file above for context.</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@Zman37 I do not have Z80 disassembler other than my own emulator and too lazy to convert it to one. Anyway by context I mean what is the device for, what is the architecture, what memory location is ROM and RAM? As I mentioned its high likely the code should start at <code>121h </code> instead of <code>11Fh</code> which could be just cause of the linear translation from known start so the last listing is valid. Anyway you might also overlook self modification if the <code>28E6</code> and or <code>28D3</code> is in RAM and your listing is not tracing self modification changes (I do not know IDA) so the jump address might be different</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@Zman37 the wrong start of code is usually caused by data sections between routines (disassembler can not distinct which BYTES are data and which instructions unless executed at least once) sometimes <code>ORG</code> directive is used so the routines and or data is at specific location and or align either to enable simpler math or due to HW relation ...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually, JP (HL) is a misnomer; it doesn't jump to (HL) but it jumps to HL.\nThe code jumps to 28D3, which contains a 21 (LD HL, imm), which makes complete sense.</p>\n</div>",
            "votes": "1",
            "user": "Jurjen Bos",
            "time": "Dec 3, 2021 at 12:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}