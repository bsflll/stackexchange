{
    "title": "Finding variable reference in cpp",
    "link": "https://reverseengineering.stackexchange.com/questions/16134/finding-variable-reference-in-cpp",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's bring example</p>\n<p>We have string</p>\n<pre><code>0000000000bd2906 db \"CurrentKey\", 0 ; DATA XREF=sub_555670+3390\n</code></pre>\n<p>And it's used here</p>\n<pre><code>00000000005563ae lea rsi, qword [0xbd2906] ; \"CurrentKey\"\n</code></pre>\n<p>Disassembler already knows where is variable reference. Knows that \"CurrentKey\" string is stored at 0xbd2906 and used at 0x5563ae.\nQuestion is, how can i manually locate where variable is used without using disassembler (to do this automatically from code) ? </p>\n<p>Can someone explain it or provide cpp example ?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "389",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis",
        "c++"
    ],
    "user": null,
    "time": "Aug 18, 2017 at 21:00",
    "comments": [
        {
            "user": "knx",
            "text": "<span class=\"comment-copy\">Sorry, I don't get it... could you improve your question?</span>",
            "time": null
        },
        {
            "user": "user21284",
            "text": "<span class=\"comment-copy\">Sorry, that could have been unclear. I think it's more straightforward now.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@user3370412: you should ask another question explaining all details and what you're <i>really</i> after. Why do you need this information and what you're going to do with it? So far it seems to be a classic XY question, so not sure it's useful to the others.</span>",
            "time": null
        },
        {
            "user": "user21284",
            "text": "<span class=\"comment-copy\">I simply need to find address where string i've found by byte array pattern scanning is being used from c++ code level.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">still not clear. in the same program or another? can you use debugging APIs? why do you need to find those instructions?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It depends on what exactly the context is. What type of binary is it? Are you talking about on-disk or in-memory? What os are you on?</p>\n<p>I would highly recommend you use a disassembly engine library which makes most of these questions moot. <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow noreferrer\">Capstone</a> is nice.</p>\n<p>If you really want to do it by yourself, you can. For instance, if your target is a PE file, you'll need to map it into memory. This means understanding the PE format or using a library such as <a href=\"http://www.pelib.com/index.php\" rel=\"nofollow noreferrer\">PeLib</a>. Once you've done that, you'll want to search for the string in question. This would generally be in the \".rdata\" section (marked for RO) if it's a constant string, or in the \".data\" section (marked for RW) if it's a mutable string. Once you've found it, you'll need to scan through the \".text\" section (marked for RWE) for the address that corresponds to the string.</p>\n<p>There's a few caveats here. First, these section names and protections may be different if the binary is packed, written in managed code, or compiled by a non-standard compiler. These same things can lead to greatly complicating the task.</p>\n<p>Second, you will have to deal with ASLR. The binary will either have ASLR enabled, meaning there is a relocations table which needs to be parsed and applied to the binary to get the final addresses; or it won't have ASLR, meaning all of the addresses will assume <code>0x00040000</code> as a base and you will need to take this into account when calculating the address of the string once you've found it (oh, you mapped the binary at <code>0x0006500</code> and the string was found at <code>0x00006516</code>? You must scan for address <code>(0x00006516 - 0x0006500) + 0x00040000</code>). This is similar to what you need to do when applying relocations.</p>\n<p>One thing to keep in mind is that relocations can be useful. Generally, when they exist, they will tell of every single offset that uses an address in the binary relative to the base address. So you might also just scan each offset that is relocated, checking for one whose proper address resolves to one containing your target string.</p>\n<p>I wish I could be more helpful, but this is what I can offer with the information you've provided. Hopefully it puts you in the right direction.</p>\n</div>",
            "votes": "2",
            "user": "Nick Cano",
            "time": "Aug 19, 2017 at 0:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user21284",
                    "text": "<span class=\"comment-copy\">I really wanted to do this manually, however Capstone is a really decent solution. Thank you.</span>",
                    "time": null
                }
            ]
        }
    ]
}