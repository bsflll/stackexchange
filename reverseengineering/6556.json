{
    "title": "Getting empty files using firmware modification kit",
    "link": "https://reverseengineering.stackexchange.com/questions/6556/getting-empty-files-using-firmware-modification-kit",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>im having trouble to extract a file system of a ZTE zxv10 h201 router. Im a beginner in reverse engineering so I am probably doing something wrong. This is what I have done so far. \nI got the admin username and password for the web interface and enabled telnet. \nI connected to the router using telnet </p>\n<pre><code>BusyBox v1.01 (2012.01.29-08:14+0000) Built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n# cat proc/mtd \ndev:    size   erasesize  name\nmtd0: 00800000 00010000 \"whole_flash\"\nmtd1: 00020000 00010000 \"bootloader\"\nmtd2: 00040000 00010000 \"userconfig\"\nmtd3: 00150000 00010000 \"kernel\"  \nmtd4: 00650000 00010000 \"filesystem\"\n# \n# help\n\nBuilt-in commands:\n-------------------\n    . : break cd chdir continue eval exec exit export false hash\n    help local pwd read readonly return set shift times trap true\n    type ulimit umask unset wait [ ash brctl busybox cat cp date\n    df echo free fuser getty hostname ifconfig init insmod kill killall\n    linuxrc ln login ls lsmod mkdir mknod mount mv passwd ping ps\n    pwd reboot rm rmdir rmmod setmac sh test tftp top traceroute\n    umount wget\n\n# \n</code></pre>\n<p>Then I used</p>\n<pre><code># cat /dev/mtdblock4 &gt; /mnt/usb1_1/filesystem\n# cat /dev/mtdblock0 &gt; /mnt/usb1_1/whole_flash\n</code></pre>\n<p>To transfer the binary to the usb plugged in the router.\nThis is what i got with \nbinwalk whole_flash </p>\n<pre><code>    DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n1288          0x508           CFE boot loader\n7204          0x1C24          LZMA compressed data, properties: 0x5D, dictionary size: 4194304 bytes, missing uncompressed size\n131708        0x2027C         Zlib compressed data, compressed\n148092        0x2427C         Zlib compressed data, compressed\n184956        0x2D27C         PEM RSA private key\n185919        0x2D63F         PEM certificate\n197244        0x3027C         Zlib compressed data, compressed\n262780        0x4027C         Zlib compressed data, compressed\n328316        0x5027C         Zlib compressed data, compressed\n328640        0x503C0         Zlib compressed data, compressed\n328844        0x5048C         Zlib compressed data, compressed\n             .....\n346480        0x54970         Zlib compressed data, compressed\n346956        0x54B4C         Zlib compressed data, compressed\n347388        0x54CFC         Zlib compressed data, compressed\n347820        0x54EAC         Zlib compressed data, compressed\n348252        0x5505C         Zlib compressed data, compressed\n348684        0x5520C         Zlib compressed data, compressed\n393484        0x6010C         LZMA compressed data, properties: 0x5D, dictionary size: 4194304 bytes, missing uncompressed size\n1769472       0x1B0000        Squashfs filesystem, big endian, version 2.0, size: 5866724 bytes, 638 inodes, blocksize: 65536 bytes, created: Sun Jan 29 09:31:45 2012\n</code></pre>\n<p>Im having issues with the filesystem binary because non of the unsquashfs versions in the firmware modification kit \"works\" properly for me because all I get is 307,0 kB worth of files.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "741",
    "tags": [
        "firmware",
        "unpacking",
        "embedded"
    ],
    "user": "tehcereal",
    "time": "Nov 1, 2014 at 22:39",
    "comments": [
        {
            "user": "devttys0",
            "text": "<span class=\"comment-copy\">Have you tried sasquatch? <a href=\"https://github.com/devttys0/sasquatch\" rel=\"nofollow noreferrer\">github.com/devttys0/sasquatch</a></span>",
            "time": null
        },
        {
            "user": "tehcereal",
            "text": "<span class=\"comment-copy\">Somehow I missed your comment. Yes I tried sasquatch and got the same result</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have same device, you can try this <a href=\"https://mega.nz/#!ZRIRBA6Q!WrU6OiXkaFb-pmA7y5rzSHMauK8bioxfobBZms5ak0Y\" rel=\"nofollow noreferrer\">busybox</a> which I compiled for that device, just type <code>./busybox_unstripped dd</code> in order to use <code>dd</code></p>\n<pre><code>./busybox_unstripped \nBusyBox v1.13.4 (2017-03-09 17:30:22 CET) multi-call binary\nCopyright (C) 1998-2008 Erik Andersen, Rob Landley, Denys Vlasenko\nand others. Licensed under GPLv2.\nSee source distribution for full notice.\n\nUsage: busybox [function] [arguments]...\n   or: function [arguments]...\n\n        BusyBox is a multi-call binary that combines many common Unix\n        utilities into a single executable.  Most people will create a\n        link to busybox for each function they wish to use and BusyBox\n        will act like whatever it was invoked as!\n\nCurrently defined functions:\n        ash, bunzip2, bzcat, cat, cp, cut, date, dd, echo, expr, false, free,\n        grep, halt, head, hostname, ifconfig, init, ip, kill, killall, klogd,\n        ln, ls, mkdir, mount, ping, poweroff, ps, reboot, renice, rm, route,\n        sh, sleep, syslogd, tail, true, umount, wc\n</code></pre>\n<p>I also found firmware on internet for that device which you could download <a href=\"https://mega.nz/#!ZdZRUZIb!RE4GLT5Hu33Ymga5ykfCcxHU39pwkd2C2K8Ek_yqn7I\" rel=\"nofollow noreferrer\">here</a></p>\n</div>",
            "votes": "-1",
            "user": "Vido",
            "time": "Apr 5, 2017 at 16:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You should not be using \"cat\". \"cat\" was made thinking about printable characters and it is very likely that <em>THAT</em> is your problem. Something might be messed up after \"cat\", causing the trouble with filesystem recognition.</p>\n<p>Use \"dd\" for <strong><em>reliable</em></strong> byte-by-byte copies.</p>\n</div>",
            "votes": "-3",
            "user": "DarkLighting",
            "time": "Oct 6, 2017 at 19:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "tehcereal",
                    "text": "<span class=\"comment-copy\">I dont have dd. I pasted all the built in commands in my question. Maybe cat is the problem idk.</span>",
                    "time": null
                },
                {
                    "user": "DarkLighting",
                    "text": "<span class=\"comment-copy\">Did you look inside the system folders to see if you have any extra binaries? Vendors compile their own version of programs to be used with the firmware.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Sorry, but this is nonsense. 'cat' does a byte by byte copy. The advantage of <code>dd</code> is that i/o can be blocked, with variable block sizes, and it does a better job at error checking.</span>",
                    "time": null
                },
                {
                    "user": "DarkLighting",
                    "text": "<span class=\"comment-copy\">So, if you said yourself that cat's error checking might be the failing point, why do you tell it is nonsense?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@DarkLighting because your claim was that <code>cat</code> only can deal with printable characters (or was designed only with those in mind). Which simply is untrue, as Guntram correctly pointed out.</span>",
                    "time": null
                }
            ]
        }
    ]
}