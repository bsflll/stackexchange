{
    "title": "Solve an angr function with string parameters",
    "link": "https://reverseengineering.stackexchange.com/questions/20557/solve-an-angr-function-with-string-parameters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Look at this C code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint my_function(char *s);\n\nint my_function(char *s)\n{\n    for (int i=0;i&lt;strlen(s);i++)\n    {\n       s[i]++;\n    }\n    if (strncmp(s,\"b{fsuz\",6)==0)\n    {\n       return 1; \n    }\n    return 0;\n}\n\n\nint main(int argc , char *argv[])\n{\n    // Lot of stuff, including UI\n    if (my_function(argv[1])==1)\n    {\n        printf(\"Good\\n\");\n    }\n    else\n    {\n        printf(\"Wrong !\\n\");\n    }\n    return 0;\n}\n</code></pre>\n<p>What i want to do is to make a symbolic analysis on my_function (and only this function) with angr.</p>\n<p>Here is the function disassembly:</p>\n<pre><code>|           ; var int local_28h @ rbp-0x28\n|           ; var int local_14h @ rbp-0x14\n|           ; CALL XREF from 0x000011e7 (main)\n|           0x00001155      55             push rbp\n|           0x00001156      4889e5         mov rbp, rsp\n|           0x00001159      53             push rbx\n|           0x0000115a      4883ec28       sub rsp, 0x28               ; '('\n|           0x0000115e      48897dd8       mov qword [local_28h], rdi\n|           0x00001162      c745ec000000.  mov dword [local_14h], 0\n|       ,=&lt; 0x00001169      eb19           jmp 0x1184\n|      .--&gt; 0x0000116b      8b45ec         mov eax, dword [local_14h]\n|      :|   0x0000116e      4863d0         movsxd rdx, eax\n|      :|   0x00001171      488b45d8       mov rax, qword [local_28h]\n|      :|   0x00001175      4801d0         add rax, rdx                ; '('\n|      :|   0x00001178      0fb610         movzx edx, byte [rax]\n|      :|   0x0000117b      83c201         add edx, 1\n|      :|   0x0000117e      8810           mov byte [rax], dl\n|      :|   0x00001180      8345ec01       add dword [local_14h], 1\n|      :|   ; JMP XREF from 0x00001169 (sym.my_function)\n|      :`-&gt; 0x00001184      8b45ec         mov eax, dword [local_14h]\n|      :    0x00001187      4863d8         movsxd rbx, eax\n|      :    0x0000118a      488b45d8       mov rax, qword [local_28h]\n|      :    0x0000118e      4889c7         mov rdi, rax\n|      :    0x00001191      e8bafeffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|      :    0x00001196      4839c3         cmp rbx, rax\n|      `==&lt; 0x00001199      72d0           jb 0x116b\n|           0x0000119b      488b45d8       mov rax, qword [local_28h]\n|           0x0000119f      ba06000000     mov edx, 6\n|           0x000011a4      488d35590e00.  lea rsi, str.b_fsuz         ; 0x2004 ; \"b{fsuz\"\n|           0x000011ab      4889c7         mov rdi, rax\n|           0x000011ae      e87dfeffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)\n|           0x000011b3      85c0           test eax, eax\n|       ,=&lt; 0x000011b5      7507           jne 0x11be\n|       |   0x000011b7      b801000000     mov eax, 1\n|      ,==&lt; 0x000011bc      eb05           jmp 0x11c3\n|      |`-&gt; 0x000011be      b800000000     mov eax, 0\n|      |    ; JMP XREF from 0x000011bc (sym.my_function)\n|      `--&gt; 0x000011c3      4883c428       add rsp, 0x28               ; '('\n|           0x000011c7      5b             pop rbx\n|           0x000011c8      5d             pop rbp\n\\           0x000011c9      c3             ret\n</code></pre>\n<p>What i want is to ask angr: Which string should i pass in parameter to my_function in order to get a return of 1.</p>\n<p>Here is what i've done:</p>\n<pre><code>import angr\n\nbase = 0x400000\nfunction_start = base + 0x00001155 # 0x0000115e\nfunction_target = base + 0x000011b7\nfunction_end = base + 0x000011be\n\np = angr.Project(\"./a.out\")\nstate = p.factory.blank_state(addr=function_start)\na = state.solver.BVS('a', 8*7)\n# state.memory.store(state.regs.rbp-0x28,a)\nstate.memory.store(state.regs.rdi,a)\n\nsm = p.factory.simulation_manager(state)\nsm.explore(find=function_target, avoid=function_end)\n\nfound_path = sm.found[0]\nprint(found_path.state.se.any_str(a))\n</code></pre>\n<p>It displays \"a{fsuz\" but the good answer is \"azerty\".</p>\n<p>What is wrong ?</p>\n<p>Second question: why does angr not found anything if i put 0x00001156 address as function start ?</p>\n<p>Thanks</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "angr"
    ],
    "user": "Bob5421",
    "time": "Feb 5, 2019 at 18:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you might have a couple of errors there.</p>\n<p>First, and this one shouldn't be too critical, is that your start address is not the function's entry (at <code>0x00001155</code>). That may have been your intention when you were writing the BVS to the stack, but it is unnecessary now.</p>\n<p>The second and more critical issue is that the BVS <code>a</code> is 6 bytes long, while it should be 7 bytes long to include the null terminator value that is required for strings of 6 non-null characters for angr's <code>strlen</code> implementation to function properly.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Feb 5, 2019 at 11:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">I do not understand why i should start at the function start. Why shouldn't start at 0x0000115e ?</span>",
                    "time": null
                },
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">see my edit, i have changed python code</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a problem in how you declare that string to angr. I started with your example code and checked if it works when I assign some address for the argument witch is checked. My best guess is that </p>\n<pre><code>state.memory.store(state.regs.rdi,a)\n</code></pre>\n<p>Does not do what you expect it to do.\nHere is the full solution (addresses may differ):</p>\n<pre><code># coding: utf8\nimport angr\n\nfunction_start = 0x400590\nfunction_target = 0x400603\nfunction_end = 0x400616\ndummy_addr = 0x300000\n\np = angr.Project(\"./a.out\")\nstate = p.factory.blank_state(addr=function_start)\na = state.solver.BVS('a', 8 * 7)\nstate.memory.store(dummy_addr, a)\nstate.regs.rdi = dummy_addr\n\nsm = p.factory.simulation_manager(state)\nsm.explore(find=function_target, avoid=function_end)\n\nfound_path = sm.found[0]\nprint found_path.state.se.eval(a, cast_to=bytes)\n</code></pre>\n<p><strong>edit</strong></p>\n<p>stack solution as requested</p>\n<p>Please note my variables are located at a different offset (clang/gcc)</p>\n<pre><code># coding: utf8\nimport angr\n\nfunction_start = 0x40059c\nfunction_target = 0x400603\nfunction_end = 0x400616\ndummy_addr = 0x300000\n\np = angr.Project(\"./a.out\")\nstate = p.factory.blank_state(addr=function_start)\na = state.solver.BVS('a', 8 * 7)\nstate.memory.store(dummy_addr, a)\nstate.mem[state.regs.rbp-0x10].uint64_t = dummy_addr\n\nsm = p.factory.simulation_manager(state)\nsm.explore(find=function_target, avoid=function_end)\n\nfound_path = sm.found[0]\nprint found_path.state.se.eval(a, cast_to=bytes)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Feb 7, 2019 at 6:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">Thanks but i do not understand what is dummy_addr</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">@Bob5421 It could be any address which is not used for something else. You want the register to hold the address of the string, not the string itself.</span>",
                    "time": null
                },
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">okay i see. In fact i tell angr to look into another address and this is in this address i put my symbolic variable. Is there a way to put the symbolic variable in place ?</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">@Bob5421 you mean to get a random free or an symbolic address directly from angr? Not as far as I know, but you could use any address. The store command maps the variable to the address</span>",
                    "time": null
                },
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">no i mean can i register directly my symbolic variable to local_28h (in the stack).</span>",
                    "time": null
                }
            ]
        }
    ]
}