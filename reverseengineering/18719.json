{
    "title": "How can I reverse this recursive function?",
    "link": "https://reverseengineering.stackexchange.com/questions/18719/how-can-i-reverse-this-recursive-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is the python code I wrote of a simple crackme that I have reversed but I am not able to understand what the recursive function here does. </p>\n<pre>\ndef the_process(stored, inp, size):\n    idx = 0\n    global thstr\n    idx = stored.index(inp[0])\n    if idx:\n        the_process(stored[:idx], inp[1:], idx)\n    if size - 1 != idx:\n        the_process(stored[1+idx:1+idx + size - idx -1],inp[idx+1:], size - idx - 1)\n    thstr.append(inp[0])\n\nif __name__ == \"__main__\":\n    thstr = []\n    stored = \"MGNCHXWIZDJAOKPELYSFUTV\"\n    input1 = \"TFSLPOJZCGMNHWXIDAKEYUV\"\n    the_process(stored, list(input1), 23)\n    print \"output : \" + \"\".join(thstr)\n</pre>\n<p><code>input1</code> is a sample valid input I could figure out for the function. To get the crackme validated I need <code>thstr</code> to be <code>MNGHCWZIJDXOPKLESUVTFYA</code> in the end. How can I get the input to make that happen?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "704",
    "tags": [
        "python",
        "crackme"
    ],
    "user": "rk4iz",
    "time": "Jul 7, 2018 at 15:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I gave it a go. First I simplified your code a little bit.</p>\n<pre><code>def the_process(stored, inp, size):\n    global thstr\n    idx = 0\n    idx = stored.index(inp[0])\n    if idx:\n        the_process(stored[:idx], inp[1:], idx)\n    if size - 1 != idx:\n        the_process(stored[idx+1:],inp[idx+1:], size - idx - 1)\n    thstr.append(inp[0])\n</code></pre>\n<p>Now it looks like by the naming that <code>stored</code> is hardcoded in the binary. I considered <code>MGNCHXWIZDJAOKPELYSFUTV</code> to be as is and the target output to be <code>MNGHCWZIJDXOPKLESUVTFYA</code>.</p>\n<p>By the function it looks like that it takes the first char of <code>input</code>, splits <code>stored</code> at the location of that char and then recursively calls itself on the two parts made. I made a tree to follow that.<a href=\"https://i.sstatic.net/l9wyN.png\" rel=\"nofollow noreferrer\"><img alt=\"originalinput\" src=\"https://i.sstatic.net/l9wyN.png\"/></a></p>\n<p>The graph is such that taking one char from input <code>TFSLPOJZCGMNHWXIDAKEYUV</code> and position nodes/chars which are at the right/left appropriately(V is right to T in the graph as it is right to T in the <code>stored</code>). In this graph the output is post order traversal of the graph and the input is pre order traversal. </p>\n<p>Similar graph can be constructed from the <code>target</code> <code>MNGHCWZIJDXOPKLESUVTFYA</code>. Only the reverse such that post order is given and construct the graph.\n<a href=\"https://i.sstatic.net/cfh7V.png\" rel=\"nofollow noreferrer\"><img alt=\"targetinput\" src=\"https://i.sstatic.net/cfh7V.png\"/></a></p>\n<p>Now pre order traverse this graph and you'll have your input <code>AXCGMNHDIWZJYEKOPLFSTUV</code>.</p>\n<p>The equivalent hackish function is this. feel free to make it better.</p>\n<pre><code>def rev_process(stored, inp, size):\n    if not size:\n        return\n    global thstr\n    mp = {stored[i] : i for i in xrange(len(stored))}\n    idx = mp[inp[-1]]\n    thstr.append(inp[-1])\n    if size == 1:\n        return\n    try:\n        less_part = max(loc for loc, val in enumerate(inp) if mp[val] &lt; idx) + 1\n    except ValueError:\n        less_part = 0\n    rev_process(stored[:idx], inp[:less_part], less_part, fs+1)\n    if less_part!= size-1:\n        rev_process(stored[idx+1:], inp[less_part:-1], size-less_part-1, fs+1)\n</code></pre>\n<p>I have also added the reversed function code and resources <a href=\"https://gist.github.com/sudhackar/42b7c23ac301c59050e93536ef90b937\" rel=\"nofollow noreferrer\">here</a></p>\n</div>",
            "votes": "4",
            "user": "sudhackar",
            "time": "Sep 8, 2018 at 12:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">I think I was not able to explain it fully. Comment your queries and I'll try to help.</span>",
                    "time": null
                },
                {
                    "user": "MiniMax",
                    "text": "<span class=\"comment-copy\">What software you used for the tree drawing?</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">I used <code>dot</code> from the <code>graphviz</code> package. The dot files are <a href=\"https://gist.github.com/sudhackar/42b7c23ac301c59050e93536ef90b937\" rel=\"nofollow noreferrer\">here</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you say you wrote it and you can understand what you wrote ?? </p>\n<p>have you tried debugging it or stepping through the code </p>\n<pre><code>C:\\&gt;python -m pdb foo.py\n&gt; c:\\foo.py(1)&lt;module&gt;()\n-&gt; def the_process(stored, inp, size):\n(Pdb) s\n&gt; c:\\foo.py(11)&lt;module&gt;()\n-&gt; if __name__ == \"__main__\":\n(Pdb) s\n&gt; c:\\foo.py(12)&lt;module&gt;()\n-&gt; thstr = []\n(Pdb) s\n&gt; c:\\foo.py(13)&lt;module&gt;()\n-&gt; stored = \"MGNCHXWIZDJAOKPELYSFUTV\"\n(Pdb) s\n&gt; c:\\foo.py(14)&lt;module&gt;()\n-&gt; input1 = \"TFSLPOJZCGMNHWXIDAKEYUV\"\n(Pdb) s\n&gt; c:\\foo.py(15)&lt;module&gt;()\n-&gt; the_process(stored, list(input1), 23)\n(Pdb) p strored\n*** NameError: NameError(\"name 'strored' is not defined\",)\n(Pdb) p stored\n'MGNCHXWIZDJAOKPELYSFUTV'\n(Pdb) p list(input1)\n['T', 'F', 'S', 'L', 'P', 'O', 'J', 'Z', 'C', 'G', 'M', 'N', 'H', 'W', 'X', 'I', 'D', 'A', 'K', 'E', 'Y', 'U', 'V']\n(Pdb) p size\n*** NameError: NameError(\"name 'size' is not defined\",)\n(Pdb) s\n--Call--\n&gt; c:\\foo.py(1)the_process()\n-&gt; def the_process(stored, inp, size):\n(Pdb) p size\n23\n(Pdb) p inp\n['T', 'F', 'S', 'L', 'P', 'O', 'J', 'Z', 'C', 'G', 'M', 'N', 'H', 'W', 'X', 'I', 'D', 'A', 'K', 'E', 'Y', 'U', 'V']\n(Pdb) p stored\n'MGNCHXWIZDJAOKPELYSFUTV'\n(Pdb) p thstr\n[]\n(Pdb) s\n&gt; c:\\foo.py(2)the_process()\n-&gt; idx = 0\n(Pdb) s\n&gt; c:\\foo.py(4)the_process()\n-&gt; idx = stored.index(inp[0])\n(Pdb) s\n&gt; c:\\foo.py(5)the_process()\n-&gt; if idx:\n(Pdb) p idx\n21\n(Pdb) p inp\n['T', 'F', 'S', 'L', 'P', 'O', 'J', 'Z', 'C', 'G', 'M', 'N', 'H', 'W', 'X', 'I', 'D', 'A', 'K', 'E', 'Y', 'U', 'V']\n(Pdb) p inp[0]\n'T'\n(Pdb) ?\n\nDocumented commands (type help &lt;topic&gt;):\n========================================\nEOF    bt         cont      enable  jump  pp       run      unt\na      c          continue  exit    l     q        s        until\nalias  cl         d         h       list  quit     step     up\nargs   clear      debug     help    n     r        tbreak   w\nb      commands   disable   ignore  next  restart  u        whatis\nbreak  condition  down      j       p     return   unalias  where\n\nMiscellaneous help topics:\n==========================\nexec  pdb\n\nUndocumented commands:\n======================\nretval  rv\n\n(Pdb) rv\n*** Not yet returned!\n(Pdb) retval\n*** Not yet returned!\n(Pdb) bt\n  c:\\python27\\lib\\bdb.py(400)run()\n-&gt; exec cmd in globals, locals\n  &lt;string&gt;(1)&lt;module&gt;()\n  c:\\foo.py(15)&lt;module&gt;()\n-&gt; the_process(stored, list(input1), 23)\n&gt; c:\\foo.py(5)the_process()\n-&gt; if idx:\n(Pdb) pp\n*** SyntaxError: SyntaxError('unexpected EOF while parsing', ('&lt;string&gt;', 0, 0, ''))\n(Pdb) a\nstored = MGNCHXWIZDJAOKPELYSFUTV\ninp = ['T', 'F', 'S', 'L', 'P', 'O', 'J', 'Z', 'C', 'G', 'M', 'N', 'H', 'W', 'X', 'I', 'D', 'A', 'K', 'E', 'Y', 'U', 'V'\n]\nsize = 23\n(Pdb) l\n  1     def the_process(stored, inp, size):\n  2         idx = 0\n  3         global thstr\n  4         idx = stored.index(inp[0])\n  5  -&gt;     if idx:\n  6             the_process(stored[:idx], inp[1:], idx)\n  7         if size - 1 != idx:\n  8             the_process(stored[1+idx:1+idx + size - idx -1],inp[idx+1:], size - idx - 1)\n  9         thstr.append(inp[0])\n 10\n 11     if __name__ == \"__main__\":\n(Pdb)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jul 7, 2018 at 17:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">maybe he translated from asm/c to python not actually understood the application flow.</span>",
                    "time": null
                }
            ]
        }
    ]
}