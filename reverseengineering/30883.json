{
    "title": "How to set a breakpoint in android's openssl library in running android application?",
    "link": "https://reverseengineering.stackexchange.com/questions/30883/how-to-set-a-breakpoint-in-androids-openssl-library-in-running-android-applicat",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm debugging an obfuscated android application. I use Android Studio's debugger. I attach it remotely to my physical device via adb. I can set a breakpoint in the app smali code, but when I try to step into a function in an external library, the code browser stays at the caller's place (I expected it to show me the called function's disassebly smali output), but stack trace and the variables output follows the called function as expected. Why is that? Can't java debugger inform Android Studio about the instructions to which the code jumped even though they are in an external library?</p>\n<p>Also, I know the app calls some functions <code>com.android.conscrypt</code>. Can I set a breakpoint in an external library like this one? If Android Studio can't do that, what other tools can?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "217",
    "tags": [
        "android",
        "java",
        "dalvik"
    ],
    "user": "g00dds",
    "time": "Sep 14, 2022 at 21:47",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">In the title you mentioned openssl which is a native (non-Java/dex) library. I am not sure if AS is capable of debugging arbitrary native libraries you don't have the source code. Also most native libraries come stripped, so without debugging data which makes debugging difficult. For reverse engineering Android apps that make use of native libraries I would recommend to use <a href=\"https://frida.re\" rel=\"nofollow noreferrer\">frida.re</a> in combination with a good decompiler/disassembler like Ghidra or IDA Pro.</span>",
            "time": null
        },
        {
            "user": "g00dds",
            "text": "<span class=\"comment-copy\">@Robert, thank you for your recommendation, I'll take at look at it. But I'm asking about java dex libraries in general, can I set a breakpoint in the java library? Openssl is also wrapped by some java library, so I could set a breakpoint there.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Do you mean JNI / native libraries?</p>\n<p>Android app cannot view into native libraries, but you can use frida-trace to get in between the call and return.</p>\n<pre><code>readelf -a -W library.so | grep nativeFunctionNameHere\n</code></pre>\n<p>Note the nativeFunctionName with some other words prepended to it</p>\n<pre><code>frida-trace -i \"_JNIStuffblabla_nativeFunctionNameHere\" -F\n</code></pre>\n<p>You will see when it's being called, and you can edit the .js file in the console output to customize/log the function calls\nHowever, to find out what the function does, you will need to use disassemblers/debuggers and try to figure it out.</p>\n<p>If you only need to inspect OpenSSL library, just intercept like <code>-i \"openssl_*\"</code> or something, see which function is it that you want, and then log the arguments and/or return value.</p>\n<p>If you meant <code>android.</code> libraries, you can again intercept them with frida. It's a really good tool for reverse engineering, especially for Android applications.\nBut why would you need to debug them? They're already publicly available, you should probably focus on the return value, no?</p>\n</div>",
            "votes": "1",
            "user": "Cagri",
            "time": "Sep 18, 2022 at 2:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}