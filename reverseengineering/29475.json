{
    "title": "Finding the hash algorithm for these payload-crc pairs",
    "link": "https://reverseengineering.stackexchange.com/questions/29475/finding-the-hash-algorithm-for-these-payload-crc-pairs",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a remote for a LED panel which sends following 4 bytes data and last byte some sort of CRC/counter byte. I already know that the first 2 bytes are remote-id, the third byte is panel-id and the fourth byte is command-id. The last byte is somehow calculated in correlation with the first 4 bytes and does not change on repetitive button-press.</p>\n<p>I already tried to use <code>reveng -w 8 -s [some samples]</code> to find the algorithm, but without success.</p>\n<p>Maybe someone can help to find the correct way to calculate the last byte of these payload-bytes, and maybe even explain how it was discovered:</p>\n<pre><code>FFCC0000CB\nFFCC0001CA\nFFCC0002C9\nFFCC0003C8\nFFCC0004CF\nFFCC0005CE\nFFCC0006CD\nFFCC0007CC\nFFCC0008C3\nFFCC0009C2\nFFCC000AC1\nFFCC000BC0\nFFCC000CC7\nFFCC000DC6\nFFCC000EC5\nFFCC000FC4\nFFCC0010DB\nFFCC0011DA\nFFCC0012D9\nFFCC0013D8\nE8D6630021\nE8D6630120\nE8D6630223\nE8D6630322\nE8D6630425\nE8D6630524\nE8D6630627\nE8D6630726\nE8D6630829\nE8D6630928\nE8D6630A2B\nE8D6630B2A\nE8D6630C2D\nE8D6630D2C\nE8D6630E2F\nE8D6630F2E\nE8D6631031\nE8D6631130\nE8D6631233\nE8D6631332\nFFCC0300CE\nFFCC0301CF\nFFCC0302CC\nFFCC0303CD\nFFCC0304CA\nFFCC0305CB\nFFCC0306C8\nFFCC0307C9\nFFCC0308C6\nFFCC0309C7\nFFCC030AC4\nFFCC030BC5\nFFCC030CC2\nFFCC030DC3\nFFCC030EC0\nFFCC030FC1\nFFCC0310DE\nFFCC0311DF\nFFCC0312DC\nFFCC0313DD\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "91",
    "tags": [
        "crc"
    ],
    "user": "LichtiMC",
    "time": "Nov 7, 2021 at 10:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on the data provided, it appears to be a very simple check with the 5th byte being the sum of the first 3 bytes exclusive-or'd with the 4th byte.</p>\n<pre><code>// input bytes\nbyte b[4];\n\n// check byte\nbyte c = ( b[0] + b[1] + b[2] ) ^ b[3];\n</code></pre>\n<hr/>\n<p>To add how I worked it out -</p>\n<p>Firstly, I observed that change of a single bit in the 4th byte flipped the same bit in the check byte. This is clear exclusive-or behaviour. The results of Xor-ing the 4th bytes with the check bytes did not then depend on the 4th bytes. This proved this was how the 4th bytes were incorporated.</p>\n<p>At this point I thought it would be difficult as, once you exclude the 4th byte, you've only provided 3 distinct examples of the first 3 bytes.</p>\n<p>However, in your first example it stood out that <code>FF</code> + <code>CC</code> = <code>CB</code>.</p>\n<p>I then tried the sum of the first 3 bytes with your 2nd group of examples and, luckily, it worked too.\n<code>E8</code>+<code>D6</code>+<code>63</code> = <code>21</code></p>\n<p>A quick check on the remaining examples showed this worked for them too.</p>\n</div>",
            "votes": "4",
            "user": "Ian Cook",
            "time": "Oct 29, 2021 at 20:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "LichtiMC",
                    "text": "<span class=\"comment-copy\">Thank you very much, it works with the few tests I've done! How did you get to the formula? I didn't even know where to start, even if it apparently was quite simple, so I'd be really interested.</span>",
                    "time": null
                }
            ]
        }
    ]
}