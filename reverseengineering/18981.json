{
    "title": "Why are these 0-byte jumps used as a delay?",
    "link": "https://reverseengineering.stackexchange.com/questions/18981/why-are-these-0-byte-jumps-used-as-a-delay",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm debugging an old PC BIOS and see a lot of what I assume are delay sequences, using 0-byte jump instructions (<code>EB 00</code> = <code>jmp short $+2</code>).</p>\n<p><a href=\"https://i.sstatic.net/qaux2.png\" rel=\"nofollow noreferrer\"><img alt='perform some I/O and three \"pointless\" jumps' src=\"https://i.sstatic.net/qaux2.png\"/></a></p>\n<p>Why this particular instruction? I'm guessing it must have some desirable timing properties.</p>\n<p>The CPU in question is a 386SX clocked at 16MHz.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "168",
    "tags": [
        "disassembly",
        "x86",
        "bios"
    ],
    "user": "pesco",
    "time": "Aug 5, 2018 at 10:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's a fragment from the leaked AWARD BIOS source code (file <code>COMMON.MAC</code>):</p>\n<pre><code>SIODELAY    MACRO               ; SHORT IODELAY\n        jmp short $+2\n        ENDM\n\nIODELAY     MACRO               ; NORMAL IODELAY\n        siodelay\n        siodelay\n        ENDM\n\nWAFORIO     MACRO               ; NORMAL IODELAY\n        siodelay\n        siodelay\n        siodelay\n        siodelay\n        siodelay\n        siodelay\n        ENDM\n\nNEWIODELAY      MACRO\n        out 0ebh,al              \n            ENDM  \n</code></pre>\n<p>So apparently this was intended specifically as a delay after I/O operations, presumably to give the potentially slow hardware time to process the request from the CPU.</p>\n<p>I also found this in the <a href=\"http://www.edm2.com/index.php/OS/2_Device_Driver_Frequently_Asked_Questions#Is_a_delay_necessary_between_I.2FO_operations\" rel=\"nofollow noreferrer\">OS/2 programming FAQ</a>:</p>\n<blockquote>\n<p><strong>Question</strong>: I looked at some code in ddk\\src\\dev\\mouse\\bus.asm which diddles with the interrupt controller, and it calls MyIODelay in\n  between IN and OUT instructions. I'm not clear why these are required.\n  It says something about letting the bus catch up - is this brain dead\n  hardware or what? </p>\n<p><strong>Answer</strong>: You were right first time - brain dead hardware. \"Some\" (not all) IO devices cannot do: </p>\n<pre><code>  in al,dx\n  or al,MASK\n  out dx,al\n</code></pre>\n<p>as the CPU is faster than the IO peripherals, received wisdom is that\n  you should put an arbitrary small delay between IO access to the same\n  IO device. And most people use: </p>\n<pre><code>  in al,dx\n  or al,MASK\n     jmp next_instruction\nnext_instruction:\n  out dx,al\n</code></pre>\n<p>The jump op has the additional \"benefit\" of flushing the CPUs\n  instruction pipeline and thereby slowing down processing even more.</p>\n</blockquote>\n<p>It's not quite the pattern in your snippet so could be just an instance of cargo-cult copypasting.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Aug 5, 2018 at 18:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "pesco",
                    "text": "<span class=\"comment-copy\">Cool, thanks, that helps. The part about flushing the pipeline actually confirms what I suspected. Though I still wonder how the proper reasoning would go, rather than \"everybody does this and it seems to work\".</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">you could try asking on retrocomputing, maybe people there know more about early hardware</span>",
                    "time": null
                },
                {
                    "user": "gilm",
                    "text": "<span class=\"comment-copy\">I remember that I used to nop my way through and that worked fine for me. My only guess is that jmp flushes cache, plus, it takes many more clock ticks per bytes that just a single nop. They probably want to save ROM bytes yet still have lots of cycles spared. It only seems a mystery because you know there are better ways than jmp+$2 :)</span>",
                    "time": null
                }
            ]
        }
    ]
}