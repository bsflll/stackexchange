{
    "title": "How to speed up finding a function from pseudocode in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/30638/how-to-speed-up-finding-a-function-from-pseudocode-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a function with the pseudocode of</p>\n<pre><code>__int64 __fastcall sub_7FF7067A01F0(__int64 a1, __int64 a2, unsigned int a3)\n{\n  if ( qword_7FF709F91498 )\n    return (*(__int64 (__fastcall **)(ID2D1Geometry *, __int64, __int64, _QWORD))(*(_QWORD *)qword_7FF709F91498 + 24i64))(\n             qword_7FF709F91498,\n             a1,\n             a2,\n             a3);\n  else\n    return sub_7FF7067A0450(a1);\n}\n</code></pre>\n<p>Considering there don't appear to be any strings I could easily search for , would there been any other possible way to speed up the process of finding this in IDA without going through lots of functions (for example , anything IDA could search for or anything that could be quickly identified?</p>\n<p>Any assistance would be greatly appreciated. Thank you.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "305",
    "tags": [
        "ida",
        "c++",
        "functions"
    ],
    "user": "CoolNite",
    "time": "Jul 14, 2022 at 20:41",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What do you mean by “finding”? The function name is right there, what is there to find?</span>",
            "time": null
        },
        {
            "user": "CoolNite",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky i'm trying to find this function in a later version of the software i originally found it in</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's little in that function that could serve as a signature. The function itself consists of a single if-else statement with a direct and indirect call. The direct call could possibly be inlined in different compilations, as could the function itself (unless it's only ever called via function pointer).</p>\n<p>The most distinguishing characteristic of this function is that it checks a global <code>QWORD</code> against <code>NULL</code>, and invokes its virtual function at <code>+0x18</code> (passing through arguments #0-#2 as arguments #1-3 to the indirect call). That's a reasonable pattern, but also not so easy to find using IDA's standard search interfaces (though perhaps easier to find with a Hex-Rays plugin), and moreover, is likely to have false positives if the program uses a similar pattern to implement other functionality.</p>\n<p>I'd say the best things to look at would be:</p>\n<ol>\n<li><code>sub_7FF7067A0450</code>. Does it have any better characteristics, such as: is it called within a few functions of a named export; does it have any unique strings, API calls, code sequences, etc., or do any of its nearby called/calling functions have any of those things?</li>\n<li>Callers of <code>sub_7FF7067A01F0</code> (same questions as above).</li>\n<li>Look for other references to <code>qword_7FF709F91498</code>. Presumably this pointer starts as <code>NULL</code>, and at least one location writes a non-<code>NULL</code> value to it. Is there anything unique about the location(s) that write to it? If so, you can find the write to <code>qword_7FF709F91498</code>, and then use cross-references to find the function in your question. I'd start with the writes before moving on to other locations that read from <code>qword_7FF709F91498</code>, though either could work.</li>\n<li>Since this is a global variable, maybe it's statically initialized by the runtime system prior to <code>main</code>? That could give you an easy way to find the constructor of this object, at which point, cross-references could help.</li>\n</ol>\n</div>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jul 15, 2022 at 19:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}