{
    "title": "Ghidra is missing known code sections found in Binary Ninja. What settings to change in analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/32958/ghidra-is-missing-known-code-sections-found-in-binary-ninja-what-settings-to-ch",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am studying binary lifting and the impacts of intermediate language representations. I have a binary that is an x86 PE file with a stripped header. I have many of these files so I need a more sample agnostic processs.  I need to exfiltrate all code detected by Ghidra and its relevant PCODE to do my comparison.</p>\n<p>I used Binary Ninja to pull apart the same binary and I am struggling to get Ghidra to output anything. This is due to Ghidra viewing everything as part of the .ram memory map section I think. I tell both that it is an x86 based binary.</p>\n<p>See screenshot for comparison of how the different tools loaded the same stripped binary. I used default analysis settings for both tools. Any thoughts on how to get Ghidra to see the code within the binary properly so I can get the PCODE?</p>\n<p><img alt=\"Tool Analysis Comparison\" src=\"https://i.imgur.com/DmPvVrf.png\"/></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "130",
    "tags": [
        "ghidra",
        "static-analysis",
        "binary"
    ],
    "user": "Teijen",
    "time": "May 8, 2024 at 20:52",
    "comments": [
        {
            "user": "SuperUser",
            "text": "<span class=\"comment-copy\">Can you share that file so I can test it on my machine?</span>",
            "time": null
        },
        {
            "user": "Teijen",
            "text": "<span class=\"comment-copy\">This file is a peice of sterilized malware I am hosting on a VM. I do not think I can share it due to this fact. The result above can be mimiced by taking any PE file and removing the header, converting it back to a binary, and feeding it into theses programs.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">By \"stripped header\" do you mean the file header was completely removed? Ghidra relies on the PE header to parse the binary, as this header provides a \"map\" of how information in a binary is arranged. No PE header, no analysis.</span>",
            "time": null
        },
        {
            "user": "Teijen",
            "text": "<span class=\"comment-copy\">Yes, the header was completly stripped out. Binary Ninja was able to identify certain code sections and I wanted to compare Ghidra's analysis, so I was hoping to find a setting that allowed limited analysis on obfuscated binaries</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">If the main goal is studying lifting and IR, the simplest solution is to study binaries with intact PE headers. Obfuscated malware with intact PE headers can be acquired from VirusTotal, vx-underground, and many other places. Removing the header is not an obfuscation technique, it's a measure taken to prevent binary execution by ensuring no OS loader can parse the binary.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Judging from some GitHub issues, it seems like Ghidra relies on PE headers for analysis and is sensitive to corrupt headers.\n<a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/327\" rel=\"nofollow noreferrer\">https://github.com/NationalSecurityAgency/ghidra/issues/327</a></p>\n<p>One solution would be to use a header reconstruction tool such as PE-bear. Creating a valid header for the PE will allow more tools to load the file correctly.\n<a href=\"https://github.com/hasherezade/pe-bear\" rel=\"nofollow noreferrer\">https://github.com/hasherezade/pe-bear</a></p>\n<p>Another solution would be to use Cutter, an open-source static analysis tool like Ghidra which also features a decompiler.\n<a href=\"https://cutter.re\" rel=\"nofollow noreferrer\">https://cutter.re</a></p>\n</div>",
            "votes": "2",
            "user": "Ariel Gadbois Roy",
            "time": "May 29, 2024 at 5:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}