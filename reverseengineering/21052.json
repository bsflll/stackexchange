{
    "title": "Anti-disassembler techniques and IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/21052/anti-disassembler-techniques-and-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a newbie to RE and IDA Pro 7.2, and I am working my way through the book Practical Malware Analysis. I'm currently working on the lab 15-01 problem in the anti-disassembler chapter, but am having difficulty reproducing part of the solution in my environment.</p>\n<p>I solved the lab by redefining some bogus opcodes into data, and now I have reasonable disassembly listings to look at. So far, so good. But at the end, the solution tells you to turn this fixed-up section into a function using the \"P\" hotkey. That doesn't work for me: I get this message in the output window:</p>\n<pre><code>.text:00401010: The function has undefined instruction/data at the specified address.\nYour request has been put in the autoanalysis queue.\n</code></pre>\n<p>The address points to the first data definition I made.</p>\n<p>Trying to flip over to graph mode doesn't work either. I get a popup that tells me that only instructions belonging to functions can be displayed in graph mode.</p>\n<p>If I go to the Problems tab, I see lines like this:</p>\n<pre><code>.text:00401062  NONAME      db 0E8h\n</code></pre>\n<p>But I didn't glean anything in the IDA Pro help file for no name problems that helped me with my specific situation.</p>\n<p>Ultimately, I used Edit -&gt; Patch Program -&gt; change byte to NOP out the data bytes and turn them into code. Then I had a function that I could graph.</p>\n<p>My question is, is there a way to do this without patching bytes?</p>\n<p>EDIT: Added error message text to the post.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "anti-debugging"
    ],
    "user": "Polly",
    "time": "Apr 7, 2019 at 22:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you may face what's called a <strong>rogue-byte</strong>.</p>\n<p>I'm currently scripting something to patch them (see <a href=\"https://reverseengineering.stackexchange.com/questions/21828/idapython-find-the-start-of-an-undefined-code-blob\">IDAPython - Find the start of an undefined code blob</a>). </p>\n<p>Can you tell me if it's the same type of code logic?</p>\n<p>If yes, you indeed might want to replace the rogue-byte with a <em>NOP</em>. <strong>You can't do it without patching the binary, because as you said, it's an anti-disassembly technique. It's here in order to mess with IDA Pro!</strong></p>\n<p>If you want to patch it:</p>\n<ul>\n<li>select the line containing the rogue-byte, then undefine it (shortcut: \"<em>U</em>\", or go to \"<em>Edit -&gt; Undefine</em>\")</li>\n<li>select the instruction (\"<em>db 0E8h</em>\") then go to \"<em>Edit -&gt; Patch program -&gt; Assemble</em>\". You can now replace your rogue-byte by a NOP, by typing \"<em>nop</em>\", then \"OK\".</li>\n<li>You now need to define the NOP as code (so it can get interpreted as an instruction), by pressing the C shortcut, or by going to \"<em>Edit -&gt; Code</em>\".</li>\n<li>Finally, you can define your function as a proper function, by reaching the start of it (<em>loc_XXXXX</em> for instance) and pressing the P shortcut, or \"E<em>dit -&gt; Function -&gt; Create function</em>\".</li>\n</ul>\n<p>If you want, I can share you the IDAPython script that I wrote, even if it's still not complete yet.</p>\n</div>",
            "votes": "3",
            "user": "Guillaume",
            "time": "Aug 3, 2019 at 2:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Polly",
                    "text": "<span class=\"comment-copy\">Hi Guillaume, thanks for reply. It sounds like your script will be very helpful for automating the process of dealing with this technique. I hope you'll update this thread with a link when it's ready to go.</span>",
                    "time": null
                },
                {
                    "user": "Vitalii",
                    "text": "<span class=\"comment-copy\">IDA is simply buggy; it doesn't understand that code may contain embedded data in many popular CPUs; any data embedded in code becomes \"anti-debugging\" even it is normal Assembler code. Pathching such embedded data with <code>NOP</code> is not always possible, because the code may need the data. Of course, it is possible to patch it, create functions and unpatch later, however, the idea look ugly.</span>",
                    "time": null
                }
            ]
        }
    ]
}