{
    "title": "How to calculate the value needed to branch two points in IDA pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/29216/how-to-calculate-the-value-needed-to-branch-two-points-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to find how to get the value to make a branch between two points in IDA Pro, but I can’t figure it out. For more context: the instructions I’m following says “Calculate the value needed to do a branch from 176E4 to 1768C, which will be D2 E7”. How do they get D2 E7 from 176E4 and 1768C? Is there a math formula or is there somewhere in IDA where they find this? It's arm little endian.\nThank you</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "171",
    "tags": [
        "ida",
        "arm",
        "patching",
        "ios",
        "hex"
    ],
    "user": "t0astym4rsh",
    "time": "Aug 27, 2021 at 18:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">who's \"they\"? also, which ARM?</span>",
            "time": null
        },
        {
            "user": "t0astym4rsh",
            "text": "<span class=\"comment-copy\">“They” is whoever wrote the guide I referenced, and it’s arm little endian.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">got a link to the guide?</span>",
            "time": null
        },
        {
            "user": "t0astym4rsh",
            "text": "<span class=\"comment-copy\"><a href=\"https://www.theiphonewiki.com/wiki/Tutorial:Odysseus_Bundles#ASR_Patch\" rel=\"nofollow noreferrer\">theiphonewiki.com/wiki/Tutorial:Odysseus_Bundles#ASR_Patch</a>  Yes. The part I’m referencing is under asr patch</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is an unconditional branch (thumb)</p>\n<p>It is encoded as <code>11100</code>|<code>signed 11-bit immediate offset</code></p>\n<pre><code>E    7    D    2  \n1110 0111 1101 0010\n</code></pre>\n<p>so your 11-bit offset is 0b11111010010.  This is sign extended to -46</p>\n<p>The operation is:<br/>\n<code>PC = PC + (SignExtend(signed_immed_11) &lt;&lt; 1)</code><br/>\nwhere the first PC contains the address of the branch plus 4.</p>\n<p>0x176E4 + 4 + (-46 * 2) == 0x1768C</p>\n</div>",
            "votes": "1",
            "user": "mumbel",
            "time": "Aug 27, 2021 at 22:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "t0astym4rsh",
                    "text": "<span class=\"comment-copy\">How do I get D2 E7 if I’m starting with 0x176E4 and 0x1768C?</span>",
                    "time": null
                },
                {
                    "user": "mumbel",
                    "text": "<span class=\"comment-copy\">this is basic algebra at this point <code>SRC + 4 + (X * 2) == DEST</code> solve for X.  <code>(0x1768C - 0x176E4 - 4) / 2</code> is a signed 11-bit number prepended by <code>11100</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>PC = current Instruction pointer + instruction length<br/>\nPC = IP + 4<br/>\nPC = 0x176E4 + 4  == 176E8</p>\n<p>destination = 0x1768C</p>\n<p>offset is encoded as a signed number of ((destination - PC)&gt;&gt;1)</p>\n<pre><code>:\\&gt;python -c \"print(hex((0x1768c-0x176e8)&gt;&gt;1))\n-0x2e\n</code></pre>\n<p>unconditional jump B can be encoded from <strong>E0 00 to E7 FF</strong>\n==&gt; E + (0x0 to 0x7ff ) == 0b1110 + (0b00000000000 .. 0b11111111111</p>\n<p><strong>E0 00 to E3 FF</strong> ARE FORWARD JUMPS FROM PC<br/>\n<strong>E4 00 TO E7 FF</strong> ARE BACKWARD JUMPS FROM PC<br/>\n-0X2E IS A BACKWARD JUMP<br/>\nSO SUBTRACT <strong>0X2E FROM 0X800</strong> TO GET 0X7D2</p>\n<p>using capstone and python</p>\n<pre><code>import capstone\ncs = capstone.Cs(capstone.CS_ARCH_ARM , capstone.CS_MODE_THUMB)\ncs.Detail = True\ninp = [b'\\x00\\xe0',b'\\x01\\xe0',b'\\x02\\xe0',b'\\xff\\xe3',b'\\x00\\xe4',b'\\xff\\xe7',b'\\xd2\\xe7']\nfor j in range(0,len(inp),1):\n    dis = cs.disasm( inp[j],  0x176e4)\n    for i in dis:\n        print(i.bytes ,(\"0x%x:\\t\" % i.address),(\"%s %s\" %(i.mnemonic, i.op_str)))\n</code></pre>\n<p>executed</p>\n<pre><code>:\\&gt;python arm.py\nbytearray(b'\\x00\\xe0') 0x176e4:  b #0x176e8\nbytearray(b'\\x01\\xe0') 0x176e4:  b #0x176ea\nbytearray(b'\\x02\\xe0') 0x176e4:  b #0x176ec\nbytearray(b'\\xff\\xe3') 0x176e4:  b #0x17ee6\nbytearray(b'\\x00\\xe4') 0x176e4:  b #0x16ee8\nbytearray(b'\\xff\\xe7') 0x176e4:  b #0x176e6\nbytearray(b'\\xd2\\xe7') 0x176e4:  b #0x1768c &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Aug 28, 2021 at 21:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}