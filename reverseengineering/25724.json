{
    "title": "Ghidra is mishandling a field access",
    "link": "https://reverseengineering.stackexchange.com/questions/25724/ghidra-is-mishandling-a-field-access",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a program which decompiles in Ghidra to include the line</p>\n<pre><code>temp_5f2f2f81bc = *(CPedIntelligence **)(&amp;DAT_000010c0 + (longlong)pCVar2);\n</code></pre>\n<p><code>temp_5f2f2f81bc</code> is a <code>CPedIntelligence*</code>. <code>pCVar2</code> is a <code>CPed*</code>, and <code>CPed</code> has a <code>CPedIntelligence*</code> located at offset <code>0x10c0</code>. So this <em>should</em> decompile as <code>temp_5f2f2f81bc = pCVar2-&gt;intelligence;</code>. Is there a way to tell Ghidra \"no, <code>pCVar2</code> should not be cast to longlong?\"</p>\n<p>I've noticed this occurring other times as well, and it generally seems to be associated with a structure stored in a register (here, <code>pCVar2</code> is stored in <code>R13</code>). In the function's local variables, though, <code>pCVar2</code> is listed as being stored in <code>HASH:5f32eb8...</code> The register is never used in the function <em>except</em> as the storage for this <code>CPed*</code>, so if I could forcibly tell the decompiler \"this register has this type throughout the entire function\" then that'd help. I tried using scripting to create a local variable stored in <code>R13</code>, but the decompiler didn't pick up on it.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "244",
    "tags": [
        "windows",
        "decompilation",
        "ghidra"
    ],
    "user": "cpast",
    "time": "Aug 22, 2020 at 18:06",
    "comments": [],
    "answers_data": []
}