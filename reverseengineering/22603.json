{
    "title": "Arrangement of variables on the stack - out of order?",
    "link": "https://reverseengineering.stackexchange.com/questions/22603/arrangement-of-variables-on-the-stack-out-of-order",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was practicing some reverse engineering crack-mes as part of our university curriculum, and I have a question around the arrangement of variables on the stack. </p>\n<p>I have a very basic C++ code, like so:</p>\n<pre><code>void foo(int x){\n    int a=0;\n    int b=x;\n    int c=3;\n    int z=a+b+c;\n    return;\n}\n\nint main(){\n     foo(5);\n     return 0;\n}\n</code></pre>\n<p>I compile the program, like so:</p>\n<pre><code>g++ program.cpp -o program -ggdb \n</code></pre>\n<p>I run gdb with </p>\n<pre><code>gdb -q program\n</code></pre>\n<p>And inside gdb</p>\n<pre><code>set disassembly-flavor intel\ndisass foo\n</code></pre>\n<p>I expect the stack frame layout of <code>foo</code> to have the variable <code>a</code> on top of <code>b</code>, followed by <code>c</code> and then <code>z</code>. But that does not seem to be the case. </p>\n<p>I have stumbled across <a href=\"https://cs.stackexchange.com/a/76901\">this</a> answer in which the explanation shows a similar layout of how variables are arranged. I'd expect that <code>x</code> would be at the highest address in the frame, right below <code>ebp</code>. But the answer clearly shows <code>z</code> being the closest to <code>ebp</code>, given that it is at <code>ebp - 4</code> but <code>x</code> is at <code>ebp - 12</code>, which seems counter intuitive to me.</p>\n<p>I have read a bunch of books, and have seen a couple of online videos on buffer overflows where it is said that the first variable the compiler encounters is the first to be placed on the stack; and order of variable declaration can effect what variables are overwritten in case there is a buffer next to them that's overflown. Is this still a valid statement to make?</p>\n<p>Why do I see variables arranged in such an order? Kindly help me out, I'm not sure if my facts are outdated or am I missing something fundamental.</p>\n<p>PS: I am using Ubuntu 16.04 Desktop, with the latest version of GCC/G++</p>\n<p>Edit 1: Adding disassembly of function <code>foo</code></p>\n<pre><code>ubuntu@Ubuntu:~$ gdb -q program \nReading symbols from program... \n(gdb) set disassembly intel \n(gdb) disass foo \nDump of assembler code for function foo(int): \n    0x0000000000001125 &lt;+0&gt;:    push rbp    \n    0x0000000000001126 &lt;+1&gt;:    mov rbp,rsp \n    0x0000000000001129 &lt;+4&gt;:    mov DWORD PTR [rbp-0x14],edi \n    0x000000000000112c &lt;+7&gt;:    mov DWORD PTR [rbp-0x10],0x0 \n    0x0000000000001133 &lt;+14&gt;:   mov eax,DWORD PTR [rbp-0x14]\n    0x0000000000001136 &lt;+17&gt;:   mov DWORD PTR [rbp-0xc],eax\n    0x0000000000001139 &lt;+20&gt;:   mov DWORD PTR [rbp-0x8],0x3\n    0x0000000000001140 &lt;+27&gt;:   mov edx,DWORD PTR [rbp-0x10]\n    0x0000000000001143 &lt;+30&gt;:   mov eax,DWORD PTR [rbp-0xc]\n    0x0000000000001146 &lt;+33&gt;:   add edx,eax \n    0x0000000000001148 &lt;+35&gt;:   mov eax,DWORD PTR [rbp-0x8]\n    0x000000000000114b &lt;+38&gt;:   add eax,edx \n    0x000000000000114d &lt;+40&gt;:   mov DWORD PTR [rbp-0x4],eax  \n    0x0000000000001150 &lt;+43&gt;:   nop \n    0x0000000000001151 &lt;+44&gt;:   pop rbp \n    0x0000000000001152 &lt;+45&gt;:   ret \nEnd of assembler dump. \n(gdb) b *foo+43 \nBreakpoint 1 at 0x1150: file program.cpp, line 6. \n(gdb) r Starting program: /home/ubuntu/program Breakpoint 1, foo (x=5) at program.cpp:6 \n6    return; \n(gdb) p &amp;a \n$1 = (int *) 0x7fffffffdfb0 \n(gdb) p $rbp-0x10 \n$2 = (void *) 0x7fffffffdfb0 \n\n(gdb) p &amp;b \n$3 = (int *) 0x7fffffffdfb4 \n(gdb) p $rbp-0xc \n$4 = (void *) 0x7fffffffdfb4 \n\n(gdb) p &amp;c \n$5 = (int *) 0x7fffffffdfb8 \n(gdb) p $rbp-0x8 \n$6 = (void *) 0x7fffffffdfb8 \n\n(gdb) p &amp;z \n$7 = (int *) 0x7fffffffdfbc \n(gdb) p $rbp-0x4 \n$8 = (void *) 0x7fffffffdfbc \n(gdb)\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "357",
    "tags": [
        "c++",
        "gdb",
        "gcc"
    ],
    "user": "user148898",
    "time": "Nov 22, 2019 at 16:43",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Please include the disassembly of the foo function</span>",
            "time": null
        },
        {
            "user": "user148898",
            "text": "<span class=\"comment-copy\">Added the disassembly. I use x64 machine, btw. I'd expect to see variable a to have the highest address and closest to RBP, but that is not the case apparently.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Keep in mind Your program as is when compiled with -O will become just </p>\n<pre><code>mov eax,0\nreturn\n</code></pre>\n<p><a href=\"https://i.sstatic.net/tke03.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/tke03.jpg\"/></a></p>\n<p>every thing out there in your Source is Dead Code and Will be eliminated </p>\n<p>since you are compiling this in debug mode without  any optimizations the compiler provides you all those variables </p>\n<p>i am not sure what you mean by nearer to ebp </p>\n<p>in debugmode compiler as far as possible allocates the variables in the same order \nas it encounters  them </p>\n<p>here is a colour coded nonoptimzed output for the same code</p>\n<p>as you can see compiler first instruction in white color is your int a=0;  which is at rbp-4</p>\n<p><a href=\"https://i.sstatic.net/rF7FZ.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/rF7FZ.jpg\"/></a></p>\n<p><a href=\"https://stackoverflow.com/questions/1102049/order-of-local-variable-allocation-on-the-stack\">but the std iirc does not specify any standard for allocation of variable addresses</a> </p>\n<p>quoting from standard linked in that thread</p>\n<blockquote>\n<p>Each parameter has automatic storage duration; its identifier is an\n  lvalue.164) The layout of the storage for parameters is unspecified.</p>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 22, 2019 at 20:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}