{
    "title": "Counting how many times a function is called",
    "link": "https://reverseengineering.stackexchange.com/questions/29709/counting-how-many-times-a-function-is-called",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to change context (Rdx, Rax etc.) everytime a specific function gets called.\nMy solution: I seted up a breakpoint at function <code>event.get_thread().set_context({\"Rdx\" : \"bla bla\"})</code></p>\n<p>My problem: The FPS of the game drops to 16\nIs there another method to do this without FPS problem ?</p>\n<pre><code>#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport time\nimport os,code\nimport winappdbg\nimport psutil\npid = None\nprocess_name = \"process.exe\"\nfor process in psutil.process_iter():\n    if process.name() == process_name:\n        pid  = process.pid\ndef handle(event):\n    global count\n    count += 1\n    os.system(\"cls\")\n    print(f\"Changed Slot: {count}\")\nglobal event2, count, alloc\nalloc = None\nevent2 = None\ncount = 0\ndef eventHandler(event):\n    code = event.get_event_code()\n    if code == winappdbg.win32.LOAD_DLL_DEBUG_EVENT:\n        module = event.get_module()\n        if module.match_name(\"user32.dll\"):\n            print (\"Setting breakpoint\")\n            global event2\n            event2 = event\n            event.debug.break_at(event.get_pid(), 0x7FF60DA6C47E, handle)\ndebu = winappdbg.Debug(eventHandler, bKillOnExit=False)\nproc = debu.attach(pid)\ntry:\n    debu.loop()\nexcept KeyboardInterrupt:\n    event2.debug.dont_break_at(event2.get_pid(), 0x7FF60DA6C47E)\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "377",
    "tags": [
        "debugging",
        "python"
    ],
    "user": "Yusuf2020",
    "time": "Dec 12, 2021 at 9:26",
    "comments": [
        {
            "user": "lockcmpxchg8b",
            "text": "<span class=\"comment-copy\">The process of handling breakpoints is very slow, as you've observed.  This is a case where you'd typically use a trampoline ---overwrite the first few instructions of the target function to instead jump to your own function that increments a counter, then executes the instructions you overwrote from the original function, before flowing back to the original function.  The real trick is making sure you don't lose any register state in the process.  Sometimes it's better to let the target function store off preserved registers before bouncing out to your routine.</span>",
            "time": null
        },
        {
            "user": "lockcmpxchg8b",
            "text": "<span class=\"comment-copy\">As for how you get your function into the program's address space: there's usually some alignment padding after the executable section, so you can expand it to make room for new instructions.  Otherwise, .dll/.so injection is a good way to get code into the target address space.  There are lots of ways to get code into another program's address space...they range from simple to very complex.</span>",
            "time": null
        },
        {
            "user": "Yusuf2020",
            "text": "<span class=\"comment-copy\">Yes, this was on my mind. Is this what you mean ? <code>jmp myFunctionAddress</code></span>",
            "time": null
        },
        {
            "user": "lockcmpxchg8b",
            "text": "<span class=\"comment-copy\">yeah, but since that jump is likely about 5 bytes, the routine you jump to will need to effectively do <code>pushf; inc &lt;your counter&gt;; popf; &lt;whatever instructions you overwrote with the jmp&gt;; jmp &lt;back to the next instruction after what you overwrote&gt;</code>.  The instructions above are x86, and all assumes your target function has a valid stack frame to use, and makes some assumptions about the calling conventions of your platform.</span>",
            "time": null
        },
        {
            "user": "Yusuf2020",
            "text": "<span class=\"comment-copy\">Hi,I did what you said and it  worked, Thanks. I want to ask you something. I've found a breakpoint type called software breakpoint (Cheat Engine uses it). This breakpoint style doesn't  lower the FPS of game. Do you know how I can use this method and get registers (RBX, RAX etc.) ? I can use C++.</span>",
            "time": null
        }
    ],
    "answers_data": []
}