{
    "title": "Does a Motorola SREC file give me any additional information over a binary ROM image?",
    "link": "https://reverseengineering.stackexchange.com/questions/2056/does-a-motorola-srec-file-give-me-any-additional-information-over-a-binary-rom-i",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When working with embedded systems, it is often easiest to use a downloadable firmware file rather than recover the firmware from the device.</p>\n<p>Mostly these are ROM images in the form of a .bin file. Sometimes, they are Motorola SREC files (often called .s19 files or .mot files). </p>\n<p>These are easily converted into bin files using many available tools. The SREC files tend to only contain records where there is actually data/code and the gaps are filled with padding values during conversion. Padding tends to be 0x00 or 0xFF.</p>\n<p>This can gives us a hint about the data segment of the image - it allows us to tell if the memory has been initialised with 0x00/0xFF intentionally by the compiler/assembler, or if it is just padding. Sometimes this can make identifying data structures easier.</p>\n<p>Is there anything else an SREC file can leak?</p>\n</div>",
    "votes": "8",
    "answers": 2,
    "views": "2k",
    "tags": [
        "firmware",
        "embedded"
    ],
    "user": "Cybergibbons",
    "time": "May 19, 2013 at 6:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Correct me if I'm wrong, but since SREC is an ASCII representation of the binary data, wouldn't the corresponding binary file also \"leak\" sections of data that are padded with 0x00/0xFF?</p>\n<p>With that said, yes, I think that in some cases SREC could expose useful information about the firmware that you wouldn't otherwise get with a binary image, assuming the vendor makes proper use of SREC's record types. Each line of text in an SREC file starts with a record code (S0, S1, S2, etc). Some example record types from <a href=\"http://en.wikipedia.org/wiki/SREC_%28file_format%29#Format\" rel=\"noreferrer\">Wikipedia's</a> SREC page:</p>\n<blockquote>\n<p>The S0 record data sequence contains vendor specific data rather than\n  program data. String with file name and possibly version info.</p>\n<p>Data sequence, depending on size of address needed. A 16-bit/64K\n  system uses S1, 24-bit address uses S2 and full 32-bit uses S3.</p>\n<p>The address field of the S7, S8, or S9 records may contain a starting\n  address for the program.</p>\n</blockquote>\n<p>Clearly, an SREC file provides information about the data in each record - information which normally would not be contained in a binary file. If you see an S7/8/9 record for example, you can probably assume that the firmware's entry point is located there. Likewise, the use of S2 vs S3 can tell you if the data contains 24 bit addresses or 32 bit addresses. </p>\n<p>How common it is to use these different SREC record types in practice though, I couldn't say. A vendor could probably just mark everything with the same record type (S1 for example), which wouldn't really give you any more information about the data than a binary file would.</p>\n</div>",
            "votes": "7",
            "user": "devttys0",
            "time": "May 19, 2013 at 12:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Cybergibbons",
                    "text": "<span class=\"comment-copy\">Thanks. SREC files often seem to only contain the bare minimum required - so if there is a row of FFFFFFFF, something in the compiler has put it in there. It's often not much to go on though.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Usually you only get addresses and raw bytes, but some tools/compilers may use custom record types or add extra information. For example, Tasking VX toolchain for Tricore uses an S0 record for identification:</p>\n<blockquote>\n<p><strong>S0-record</strong></p>\n<pre><code>'S' '0' &lt;length_byte&gt; &lt;2 bytes 0&gt; &lt;comment&gt; &lt;checksum_byte&gt;\n</code></pre>\n<p>A linker generated S-record file starts with a S0 record with the\n  following contents:</p>\n<p>length_byte : 0x6<br/>\n  comment : ltc (TriCore linker)<br/>\n  checksum : 0xB6</p>\n<pre><code>        l t c\nS00600006C7463B6\n</code></pre>\n<p>The S0 record is a comment record and does not contain relevant\n  information for program execution.</p>\n</blockquote>\n</div>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Dec 7, 2017 at 15:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}