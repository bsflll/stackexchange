{
    "title": "Method disassembly of Objective C Mach-O with Radare 2",
    "link": "https://reverseengineering.stackexchange.com/questions/11653/method-disassembly-of-objective-c-mach-o-with-radare-2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is is possible to retrieve the dissassembly of Objective-C methods declared in Mach-O files using Radare 2 ?</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "4k",
    "tags": [
        "radare2",
        "mach-o"
    ],
    "user": "3asm_",
    "time": "Dec 30, 2015 at 14:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Essentially, it's the following workflow:</p>\n<pre><code>r2 -A /path/to/binary   // load the binary and perform initial analysis\nafl                     // print function symbols\npdf @sym.of.interest    // disassemble\npdc @sym.of.interest    // \"decompile\" or generate pseudo code\n</code></pre>\n<p>Here is an example of how to disassemble a function of <a href=\"https://github.com/gdbinit/MachOView\" rel=\"noreferrer\">MachoViewer</a>:</p>\n<pre><code>@0x4B6169:/$ r2 -A /Applications/MachOView.app/Contents/MacOS/MachOView 2&gt;/dev/null\n -- Run .dmm* to load the flags of the symbols of all modules loaded in the debugger\n[0x100001da0]&gt; afl | grep sym.__MachOLayout_get\n0x10000b252    4 49           sym.__MachOLayout_getSectionByIndex:_\n0x10000b283    4 49           sym.__MachOLayout_getSection64ByIndex:_\n0x10000b2b4    4 49           sym.__MachOLayout_getSymbolByIndex:_\n0x10000b2e5    4 49           sym.__MachOLayout_getSymbol64ByIndex:_\n0x10000b316    4 49           sym.__MachOLayout_getDylibByIndex:_\n[0x100001da0]&gt; pdf @sym.__MachOLayout_getSymbolByIndex:_\n            ;-- func.10000b2b4:\n            ;-- method.MachOLayout.getSymbolByIndex::\n╒ (fcn) sym.__MachOLayout_getSymbolByIndex:_ 49\n│           0x10000b2b4      55             push rbp\n│           0x10000b2b5      4889e5         mov rbp, rsp\n│           0x10000b2b8      89d0           mov eax, edx\n│           0x10000b2ba      488b151f760f.  mov rdx, qword [rip + 0xf761f] ; [0x1001028e0:8]=176 LEA sym._OBJC_IVAR___MachOLayout.symbols ; sym._OBJC_IVAR___MachOLayout.symbols\n│           0x10000b2c1      488b0c17       mov rcx, qword [rdi + rdx]\n│           0x10000b2c5      488b541708     mov rdx, qword [rdi + rdx + 8] ; [0x8:8]=0x280000003\n│           0x10000b2ca      4829ca         sub rdx, rcx\n│           0x10000b2cd      48c1fa03       sar rdx, 3\n│           0x10000b2d1      4839d0         cmp rax, rdx\n│       ┌─&lt; 0x10000b2d4      7306           jae 0x10000b2dc\n│       │   0x10000b2d6      488b04c1       mov rax, qword [rcx + rax*8]\n│      ┌──&lt; 0x10000b2da      eb07           jmp 0x10000b2e3\n│      ││   ; JMP XREF from 0x10000b2d4 (sym.__MachOLayout_getSymbolByIndex:_)\n│      │└─&gt; 0x10000b2dc      488d05e5fd0a.  lea rax, [rip + 0xafde5]   ; 0x1000bb0c8 ; sym.__MachOLayoutgetSymbolByIndex:_::notfound ; sym.__MachOLayoutgetSymbolByIndex:_::notfound\n│      │    ; JMP XREF from 0x10000b2da (sym.__MachOLayout_getSymbolByIndex:_)\n│      └──&gt; 0x10000b2e3      5d             pop rbp\n╘           0x10000b2e4      c3             ret\n[0x100001da0]&gt; quit\n</code></pre>\n<p>Generating some form of pseudo code (\"decompiling\") works similarly through the ingeniously logic command input:</p>\n<pre><code>[0x100001da0]&gt; pdc @sym.__MachOLayout_getSymbolByIndex:_\nfunction sub.__MachOLayoutgetSymbolByIndex:_.notfound_2b4 () {\n    loc_0x10000b2b4:\n\n       push rbp\n       rbp = rsp\n       eax = edx\n       rdx = qword sym._OBJC_IVAR___MachOLayout.symbols //[0x1001028e0:8]=176 ; \"__text\"\n       rcx = qword [rdi + rdx]\n       rdx = qword [rdi + rdx + 8] //[0x8:8]=0x280000003\n       rdx -= rcx\n       rdx &gt;&gt;= 3\n       var = rax - rdx\n       jae 0x10000b2dc          //unlikely\n       {\n        loc_0x10000b2dc:\n\n         //JMP XREF from 0x10000b2d4 (sub.__MachOLayoutgetSymbolByIndex:_.notfound_2b4)\n           rax = [sym.__MachOLayoutgetSymbolByIndex:_::notfound] //method.__MachOLayoutgetSymbolByIndex:_.notfound ; 0x1000bb0c8 ; method.__MachOLayoutgetSymbolByIndex:_.notfound\n       do\n       {\n            loc_0x10000b2e3:\n\n             //JMP XREF from 0x10000b2da (sub.__MachOLayoutgetSymbolByIndex:_.notfound_2b4)\n               pop rbp\n\n           } while (?);\n       } while (?);\n      }\n      return;\n\n}\n</code></pre>\n<p>Inside <a href=\"https://www.hopperapp.com/\" rel=\"noreferrer\">hopper v4</a> you can do the same as follows:</p>\n<pre><code>hopperv4 -e /Applications/MachOView.app/Contents/MacOS/MachOView\n</code></pre>\n<p>This opens hopper and you can click on the \"Proc.\" tab, and search for the function. Once you click on it, you will see the following disassembly (radare2 1.5.0 0 @ darwin-x86-64 git.1.5.0, commit: HEAD build: 2017-05-31__14:31:32):</p>\n<pre><code>000000010000b2b4         push       rbp                                         ; Objective C Implementation defined at 0x1000f5de8 (instance method), DATA XREF=0x1000f5de8\n000000010000b2b5         mov        rbp, rsp\n000000010000b2b8         mov        eax, edx\n000000010000b2ba         mov        rdx, qword [_OBJC_IVAR_$_MachOLayout.symbols]\n000000010000b2c1         mov        rcx, qword [rdi+rdx]\n000000010000b2c5         mov        rdx, qword [rdi+rdx+8]\n000000010000b2ca         sub        rdx, rcx\n000000010000b2cd         sar        rdx, 0x3\n000000010000b2d1         cmp        rax, rdx\n000000010000b2d4         jae        loc_10000b2dc\n\n000000010000b2d6         mov        rax, qword [rcx+rax*8]\n000000010000b2da         jmp        loc_10000b2e3\n\n                     loc_10000b2dc:\n000000010000b2dc         lea        rax, qword [__ZZ32-[MachOLayout getSymbolByIndex:]E8notfound] ; CODE XREF=-[MachOLayout getSymbolByIndex:]+32\n\n                     loc_10000b2e3:\n000000010000b2e3         pop        rbp                                         ; CODE XREF=-[MachOLayout getSymbolByIndex:]+38\n000000010000b2e4         ret\n</code></pre>\n<p>Clearly, the pseudo-code inside hopper is at this moment still quite better than what I could get inside radare2. The above disassembly in pseudo code inside hopper (v4.2.1) reads:</p>\n<pre><code>struct nlist * -[MachOLayout getSymbolByIndex:](void * self, void * _cmd, unsigned int arg2) {\n    rax = arg2;\n    rcx = self-&gt;symbols;\n    if (rax &lt; SAR(*(self + *_OBJC_IVAR_$_MachOLayout.symbols + 0x8) - rcx, 0x3)) {\n            rax = *(rcx + rax * 0x8);\n    }\n    else {\n            rax = -[MachOLayout getSymbolByIndex:]::notfound;\n    }\n    return rax;\n}\n</code></pre>\n</div>",
            "votes": "11",
            "user": "ikaerom",
            "time": "Jun 9, 2017 at 8:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just use <code>rabin2 -c</code> .... now i have to fill silly text to fill 30 chars</p>\n</div>",
            "votes": "2",
            "user": "pancake",
            "time": "Dec 30, 2015 at 17:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "3asm_",
                    "text": "<span class=\"comment-copy\">rabin2 -c will only list classes. My question is on the disassembly of one of these methods.</span>",
                    "time": null
                }
            ]
        }
    ]
}