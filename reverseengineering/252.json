{
    "title": "How should I go about trying to figure out the programming language that was used?",
    "link": "https://reverseengineering.stackexchange.com/questions/252/how-should-i-go-about-trying-to-figure-out-the-programming-language-that-was-use",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an executable file and I would like to figure out which programming language was the source code written in. The first step would be to use a disassembler. </p>\n<p>What should be done after that ?</p>\n<p>Also, I read that determining which libraries are used during runtime would be a good indicator of the programming language being used. How should I determine which libraries are used ?</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "352",
    "tags": [
        "linux",
        "executable"
    ],
    "user": "asheeshr",
    "time": "Mar 25, 2013 at 14:41",
    "comments": [
        {
            "user": "Remko",
            "text": "<span class=\"comment-copy\">Possibly related: <a href=\"http://reverseengineering.stackexchange.com/questions/11/what-hints-in-machine-code-can-point-me-to-the-compiler-which-was-used-to-genera\">What hints in machine code can point me to the compiler which was used to generate it?</a> and <a href=\"http://reverseengineering.stackexchange.com/questions/175/what-is-a-flirt-signature/\">What is a FLIRT signature?</a></span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">What is the targeted OS ? Things might change drastically from one OS to another (and tools too).</span>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\">@Emmanuel Ubuntu</span>",
            "time": null
        },
        {
            "user": "Minh-Triet Pham Tran",
            "text": "<span class=\"comment-copy\">You could use some other compiler identifier tools: Category:Compiler Identifiers - Collaborative RCE Tool Library <a href=\"http://www.woodmann.com/collaborative/tools/index.php/Category:Compiler_Identifiers\" rel=\"nofollow noreferrer\">woodmann.com/collaborative/tools/index.php/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually I would suggest that you view the executeable with a hex viewer/editor. That way you can see straight away if the compiler embedded any strings as hints. You should also consider that some languages use C as an intermediate language. An example of that would be <a href=\"http://www.netlib.org/f2c/\" rel=\"nofollow noreferrer\">f2c</a> a Fortran 77 to C compliler. It appears that f2c also links a support library so you would look for that.</p>\n<p>As far as determinining which libraries are used on linux you can use the <a href=\"https://stackoverflow.com/questions/5554343/understanding-ldd-output\">ldd command</a> for dynamic binaries and <a href=\"http://cboard.cprogramming.com/linux-programming/71132-static-library-how-do-i-list.html\" rel=\"nofollow noreferrer\">nm for static ones</a> to dump the symbols. Also there is a <a href=\"https://stackoverflow.com/questions/1704202/determine-source-language-from-a-binary\">related question on SO.</a></p>\n<p>Here is an intersting blog from a fellow RE member about how the binary you have <a href=\"http://www.mimisbrunnr.net/~munin/blog/\" rel=\"nofollow noreferrer\">might not even come from a compiler</a> and how to recognise that. </p>\n</div>",
            "votes": "10",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Good answer, you'd be surprised how often this low-tech approach works! That aside, even in the <code>f2c</code> case you can probably see spot patterns used by the converter to represent Fortran concepts or convert from Fortran to C conventions.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are several tools that I have used:</p>\n<ol>\n<li><a href=\"http://tuts4you.com/download.php?view.398\">PEiD</a> (PE iDentifier)</li>\n<li>I've also followed <a href=\"https://code.google.com/p/pefile/wiki/PEiDSignatures\">this guide</a> and converted PEiD signatures to YARA signatures and simply used <a href=\"https://code.google.com/p/yara-project/\">YARA</a></li>\n<li><a href=\"http://mark0.net/soft-trid-e.html\">TRiD</a> can also provide another way to identify the compiler used</li>\n</ol>\n<p>It's also worth mentioning that if you submit a file to <a href=\"https://www.virustotal.com\">Virus Total</a>, they will run TRiD against your binary.</p>\n<p>These tools are not always definitive, but they can generally give you the correct compiler (and therefore language) that was used.</p>\n</div>",
            "votes": "9",
            "user": "Mick",
            "time": "Mar 25, 2013 at 16:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}