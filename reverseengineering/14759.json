{
    "title": "Encryption (AES-128) in automatic meters reading",
    "link": "https://reverseengineering.stackexchange.com/questions/14759/encryption-aes-128-in-automatic-meters-reading",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have theoretical questions about encryption when there's a lot of devices involved. Specifically it's about reading meters (water/gas/heat meters).</p>\n<p>Here's some introduction.</p>\n<p>I was trying to read a water meter but it turned out data frames are encrypted with AES-128. What's not encrypted is the water meter number (actually its a radio thingy).</p>\n<p>I was able to download a pretty old version of the software (released 8 years ago, I know there's newer version but I don't have access). It was written in .Net so I decompiled it with JustDecompile soft. I was looking for any classes responsible for encryption. What I found about AES is connected to USB stick, so I assume that all the decryption stuff (or the important one) is placed on USB stick.</p>\n<p>And here's the question - remember - just theoretical one - how would you solve problem of encryption if you were the programmer/engineer behind it? Would it be just one decryption key? Or key would be generated based on device's number? What about device itself? Each would have different encryption KEY based on its numbers?</p>\n<p>As I said - these are just theoretical questions. I know that I have no chance of decrypting it without some serious reverse engineering, but I've already spent hours on this, so I'm just curious.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "982",
    "tags": [
        "decompilation",
        "encryption",
        "decryption",
        ".net"
    ],
    "user": "Chrobry",
    "time": "Mar 26, 2017 at 14:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">AES-128 is very specific, how did you find it out?</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">\"AES is connected to USB stick\" does not make sense...</span>",
            "time": null
        },
        {
            "user": "Chrobry",
            "text": "<span class=\"comment-copy\">It's written in documentation. As for \"connected to USB\" - what I meant was that there's a class called \"USBKeys\" and there's a static method called AES there. And that's all about AES. But I decompiled older version of software. I'm guessing that these water meters were encrypted later than this software I have was released.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What is the connection between the meter and the PC? USB?</span>",
            "time": null
        },
        {
            "user": "Chrobry",
            "text": "<span class=\"comment-copy\">No. It's wireless transmition. W-MBUS (Wireless MBUS)/OMS (Open Metering System) standard on 868 MHz. That is being read by (in version of manufacturer) terminal on Windows Mobile (It can be also smartfon, but I'm not sure how they manage that). Probably it's being decrypted on that terminal as well. But there's also PC software where's that data can be managed.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can see a few \"types\" of keys used here, I'll list each with it's pros and cons:</p>\n<ol>\n<li><p>Hard-coded symmetric key</p>\n<p><em>(Pros)</em> Hard-coded key is the easiest to implement. You don't need to worry about storing, loading or replacing keys. You don't need to worry about key distribution in the field and you do need to worry about key duration and multiple keys on the receiving end.</p>\n<p><em>(Cons)</em> Once a single key is extracted from a meter, everything can be easily decrypted. Because meters are spread, left alone and aren't reasonably protected this can easily happen if someone is interested in getting those keys, however since the risks and damaged are probably not properly evaluated, this might very well be the case in many such devices.</p></li>\n<li><p>Key derived from hardware configuration</p>\n<p><em>(Pros)</em> It is no longer get-one-real-all, and still quite easy to implement on both the receiving and transmitting ends.</p>\n<p><em>(Cons)</em> It is still quite easy to generate a key per device given the hardware configuration, and brute-forcing the hardware configuration values might be possible (especially when reading all devices' traffic is desired).</p></li>\n<li><p>Single whole-deployment replaceable symmetric key</p>\n<p><em>(Pros)</em> Once a key is known to have been exposed, it is possible (although not quite a simple task) to replace it with a new key. This enables mitigating key leaks in case they get too serious, at the cost of a big logistic operation. </p>\n<p><em>(Cons)</em> Since replacing keys for the entire network is a difficult logistic task, this won't be used too often in real-live scenarios. Additionally, the extra effort of maintaining a key update mechanism is required regardless of it ever being used.</p></li>\n<li><p>Per-device independent of hardware symmetric key</p>\n<p><em>(Pros)</em> This guarantees complete protection between different meters, and increases the burden of retrieving the key for any meter an attacker is interested in reading. It also makes it possible to change individual keys with no added infrastructure.</p>\n<p><em>(Cons)</em> Maintaining a record for all available keys (and their appropriate meters) just became a big burden, both development-wise and logistics-wise. The receiver now needs to keep a database of all keys and be able to fetch the correct key for the right meter.</p></li>\n<li><p>Asymmetric key</p>\n<p><em>(Pros)</em> Because of the nature of asymmetric cryptography, this makes it impossible to decrypt future or past messages even after gaining access to keys and code inside a meter, while every meter with the key can encrypt messages, only the receiver can decrypt them. </p>\n<p><em>(Cons)</em> While this is probably the best encryption model for such a scenario, it is the most complex to implement and manage, and has a lot of ceavets that might render the encryption useless if used incorrectly. It also tends to be relatively slow to encrypt or decrpyt, unless symmetric encryption is used as part of the model (which complicates this even further).</p></li>\n</ol>\n<p>The ones I would assume are most likely to be used in the scenario you describe are either 1 or 2, as security is rarely a consideration for those type of embedded devices today, let alone 10-20 years ago. I made this list more general then necessary in hopes it'll be useful for future readers.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Mar 26, 2017 at 14:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}