{
    "title": "How can I walk up along the AST using IDAPython decompiler API?",
    "link": "https://reverseengineering.stackexchange.com/questions/14464/how-can-i-walk-up-along-the-ast-using-idapython-decompiler-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using IDAPython for my analysis. In IDA v6.95, the header file <code>plugins/hexrays_sdk/include/hexrays.hpp</code> defines the following:</p>\n<pre><code>typedef ctree_items_t parents_t;\n\nparents_t parents;      ///&lt; Vector of parents of the current item\n\n/// Get parent of the current item as an expression\ncexpr_t *parent_expr(void) { return (cexpr_t *)parents.back(); }\n\n// Get parent of the current item as a statement\ncinsn_t *parent_insn(void) { return (cinsn_t *)parents.back(); }\n</code></pre>\n<p>For my analysis, I am trying to walk up along the parents from a given <code>cexpr_t</code> node. <code>parent_expr()</code> and <code>parent_insn()</code> API gives me back the immediate parent, not the entire chain from the child to root of the AST.</p>\n<p>As an alternative, I tried to traverse the <code>parents</code> vector once I visit the given <code>cexpr_t</code> node.</p>\n<pre><code>for parent in reversed(self.parents):\n  print \"|==&gt; %s [%d]\" % (hex(parent.ea), parent.op)\n</code></pre>\n<p>The problem is, the <code>parent</code> item thus returned is of type <code>citem_t</code>. If I cast those to <code>cexpr_t</code> as follows:</p>\n<pre><code>parent.__class__ = cexpr_t\nprint parent.x\n</code></pre>\n<p>and access any of its fields (e.g. <code>x</code>) in the example above, it throws error.</p>\n<p>How can I traverse the AST nodes bottom-up yet retaining the correct types (<code>cexpr_t</code> or <code>cinsn_t</code>) of respective nodes? Is it possible to look into the code of <code>parent_expr()</code> or <code>parent_insn()</code> to see if how do those return correctly typed nodes from an <code>ctree_items_t</code> type vector (i.e. <code>parents</code>)? The code inside <code>python/ida_hexrays.py</code> seems to be mere SWIG stub, the actual implementation seems to lie somewhere else.</p>\n<pre><code>def parent_expr(self, *args):\n    \"\"\"\n    parent_expr(self) -&gt; cexpr_t\n    \"\"\"\n    return _ida_hexrays.ctree_visitor_t_parent_expr(self, *args)\n\ndef parent_insn(self, *args):\n    \"\"\"\n    parent_insn(self) -&gt; cinsn_t\n    \"\"\"\n    return _ida_hexrays.ctree_visitor_t_parent_insn(self, *args)\n</code></pre>\n<p>The actual code seems to be distributed as a shared library located at <code>python/lib/python2.7/lib-dynload/[ida32|ida64]/_ida_hexrays.so</code></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "639",
    "tags": [
        "ida",
        "idapython",
        "hexrays"
    ],
    "user": "sherlock",
    "time": "Jan 20, 2017 at 20:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can solve part of your problem.  Use the 'to_specific_type' attribute to convert a citem to a cexpr:</p>\n<pre><code>if citem.is_expr():\n    cexpr = citem.to_specific_type\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Andy Van Pelt",
            "time": "Oct 12, 2018 at 22:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}