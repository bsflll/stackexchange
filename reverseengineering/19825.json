{
    "title": "Find vtable without complete object locator",
    "link": "https://reverseengineering.stackexchange.com/questions/19825/find-vtable-without-complete-object-locator",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am learning to reverse Visual C++ objects.</p>\n<p>I usually find the vtable (or VMT of VFT, however you call it) of the object using a cross reference to its <code>CompleteObjectLocator</code> that I found in the disassembled binary before (using a cross reference to the object's <code>TypeDescriptor</code> or <code>ClassHierarchyDescriptor</code>). The pointer to <code>CompleteObjectLocator</code> is the -1st field of the vtable.</p>\n<p>However, as some classes are probably abstract in my program, they do not have <code>CompleteObjectLocator</code>s. <strong>How do I find their vtables?</strong></p>\n<p>I know that the program writes the pointer to the vtable down to <code>this</code> in the object's constructor, however in my program the constructors are inlined in the child class constructors and there I do not see work with memory that could be the vtable of the parent.</p>\n<p>For example:</p>\n<ul>\n<li><code>ClassA</code> inherits from <code>ClassB</code> (probably abstract) that inherits from <code>ClassC</code> that inherits from <code>ClassD</code> (probably abstract). I found this information in the <code>BaseClassArray</code> of each of the classes.</li>\n<li>I am able to find vtable of <code>ClassA</code> and using a cross reference on it, I find its constructor</li>\n<li>In the constructor of <code>ClassA</code> I see the program work with vtable of <code>ClassC</code> and vtable of <code>ClassA</code> (constructors are inlined, pointer to vtable of <code>ClassC</code> is written to a location and three instructions later it is rewritten by the pointer to vtable of <code>ClassA</code>)</li>\n<li>I would expect to see some work with vtables of <code>ClassB</code> and <code>ClassD</code> in the constructor of <code>ClassA</code> as well. I would expect the pointer to vtable of <code>ClassB</code> to be written do the memory somewhere between the work with vtables of <code>ClassA</code> and <code>ClassC</code>, but there are only instructions that basically do nothing, only move some content from register to register.</li>\n<li>Or, if the constructor of <code>ClassA</code> wouldn't work with vtables of <code>ClassB</code> and <code>ClassD</code>, I would expect at least calling their constructors from there, which does not happen as well.</li>\n</ul>\n<p>I know I could find a vtable dynamically, because it would be the first element of <code>this</code>, but I do not know where (if anywhere) <code>this</code> of <code>ClassB</code> and <code>ClassD</code> is used. Can I find their vtables and constructors statically?</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "578",
    "tags": [
        "c++",
        "vtables",
        "virtual-functions"
    ],
    "user": "Topper Harley",
    "time": "Nov 5, 2018 at 14:51",
    "comments": [
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">Don't forget that vtables might not exist for all classes as MSVC can be told not to produce a vtable by declaring a class with __declspec(notable)</span>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">__declspec(novtable) that is</span>",
            "time": null
        },
        {
            "user": "Topper Harley",
            "text": "<span class=\"comment-copy\">@IanCook I see, thank you very much for the comment. Is it possible that this is not the case and the vtables exist somewhere even though I do not see them used in the constructors of the derived classes?</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Add some C++ code for example to understand clearly.</span>",
            "time": null
        }
    ],
    "answers_data": []
}