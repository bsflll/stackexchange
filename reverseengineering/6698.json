{
    "title": "Why isn't the import table ready at OEP?",
    "link": "https://reverseengineering.stackexchange.com/questions/6698/why-isnt-the-import-table-ready-at-oep",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When manually unpacking a program and ending up at the OEP, then why do we have to rebuild the import table? I understand that when packing, the import table is destroyed for compression/stealth, but if we're already at the OEP, it must mean the program is ready to roll because the unpacking stub has repaired the import table already? Otherwise it would just crash at the first external call.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "632",
    "tags": [
        "unpacking",
        "iat",
        "import-reconstruction"
    ],
    "user": "ltnaisha",
    "time": "Oct 23, 2016 at 20:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>if we're already at the OEP, it must mean the program is ready to roll\n  because the unpacking stub has repaired the import table already</p>\n</blockquote>\n<p>No, by the time the OEP is reached, the unpacking stub has populated the Import Address Table; it hasn't repaired the Import Table. You need to reconstruct the Import Table so that when you run the unpacked program, the Windows loader will populate the Import Address Table at runtime (with the correct function addresses at runtime) based on the data in the Import Table.</p>\n<p>(Note that there are always exceptions, but this is typically true for most packers.)</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Nov 24, 2014 at 15:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ltnaisha",
                    "text": "<span class=\"comment-copy\">I understand the real distinction between IT and IAT now, thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The unpacking stub may just load the imports instead of repairing the import table. If you want to save the executable to be able to run it later, you won't have the unpacking stub in your saved executable, so noone loads the imports for you unless you repair and the import table as well.</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Nov 24, 2014 at 15:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ltnaisha",
                    "text": "<span class=\"comment-copy\">Thanks for the helpful answer. I decided to accept Jason's answer instead because it made me realize the difference between the two but I'll upvote this when I have enough rep.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">No worries, Jason's answer is better than mine and provides much more detail. That's why i made mine a comment at first.</span>",
                    "time": null
                }
            ]
        }
    ]
}