{
    "title": "Getting opcode Length , How to",
    "link": "https://reverseengineering.stackexchange.com/questions/19473/getting-opcode-length-how-to",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am apparently not very good with assembly as I am novice to somethings! Hence i wanted to make a question again.\nNow i got this from here to make something like a LDE (Length Disassembly Engine) Since I have knowledge of C/C++ and Object Pascal. </p>\n<p>Now I see this </p>\n<p><a href=\"http://www.delphibasics.info/home/delphibasicssnippets/magicapihook\" rel=\"nofollow noreferrer\">http://www.delphibasics.info/home/delphibasicssnippets/magicapihook</a></p>\n<p>I understood everything only this getting the upcode part</p>\n<p>Which is </p>\n<pre><code>function OpCodeLength(Address:DWORD):DWORD; cdecl; assembler;\nconst\n  O_UNIQUE = 0;\n  O_PREFIX = 1;\n  O_IMM8 = 2;\n  O_IMM16 = 3;\n  O_IMM24 = 4;\n  O_IMM32 = 5;\n  O_IMM48 = 6;\n  O_MODRM = 7;\n  O_MODRM8 = 8;\n  O_MODRM32 = 9;\n  O_EXTENDED = 10;\n  O_WEIRD = 11;\n  O_ERROR = 12;\nasm\n pushad\n cld\n xor edx, edx\n mov esi, Address\n  mov ebp, esp\n push 1097F71Ch\n push 0F71C6780h\n push 17389718h\n push 101CB718h\n push 17302C17h\n push 18173017h\n push 0F715F547h\n push 4C103748h\n push 272CE7F7h\n push 0F7AC6087h\n push 1C121C52h\n push 7C10871Ch\n push 201C701Ch\n push 4767602Bh\n push 20211011h\n push 40121625h\n push 82872022h\n push 47201220h\n push 13101419h\n push 18271013h\n push 28858260h\n push 15124045h\n push 5016A0C7h\n push 28191812h\n push 0F2401812h\n push 19154127h\n push 50F0F011h\n mov ecx, 15124710h\n push ecx\n push 11151247h\n push 10111512h\n push 47101115h\n mov eax, 12472015h\n push eax\n push eax\n push 12471A10h\n add cl, 10h\n push ecx\n sub cl, 20h\n push ecx\n xor ecx, ecx\n dec ecx\n@@ps:\n inc  ecx\n mov  edi, esp\n@@go:\n lodsb\n mov  bh, al\n@@ft:\n mov  ah, [edi]\n inc  edi\n shr  ah, 4\n sub  al, ah\n jnc  @@ft\n mov al, [edi-1]\n and al, 0Fh\n cmp  al, O_ERROR\n jnz  @@i7\n pop edx\n not edx\n@@i7:\n inc edx\n cmp al, O_UNIQUE\n jz @@t_exit\n cmp al, O_PREFIX\n jz @@ps\n add  edi, 51h\n cmp  al, O_EXTENDED\n jz   @@go\n mov edi, [ebp+((1+8)*4)+4]\n@@i6:\n    inc  edx\n    cmp  al, O_IMM8\n    jz   @@t_exit\n    cmp  al, O_MODRM\n    jz   @@t_modrm\n    cmp  al, O_WEIRD\n    jz   @@t_weird\n@@i5:\n    inc  edx\n    cmp  al, O_IMM16\n    jz   @@t_exit\n    cmp  al, O_MODRM8\n    jz   @@t_modrm\n@@i4:\n    inc  edx\n    cmp  al, O_IMM24\n    jz   @@t_exit\n@@i3:\n    inc  edx\n@@i2:\n    inc  edx\n    pushad\n    mov  al, 66h\n    repnz scasb\n    popad\n    jnz  @@c32\n@@d2:\n    dec  edx\n    dec  edx\n@@c32:\n    cmp  al, O_MODRM32\n    jz   @@t_modrm\n    sub  al, O_IMM32\n    jz   @@t_imm32\n@@i1:\n    inc  edx\n@@t_exit:\n    jmp @@ASMEnded\n@@t_modrm:\n       lodsb\n       mov  ah, al\n       shr  al, 7\n       jb   @@prmk\n       jz   @@prm\n       add  dl, 4\n       pushad\n       mov  al, 67h\n       repnz scasb\n       popad\n       jnz  @@prm\n@@d3:  sub  dl, 3\n       dec  al\n@@prmk:jnz  @@t_exit\n       inc  edx\n       inc  eax\n@@prm:\n       and  ah, 00000111b\n       pushad\n       mov  al, 67h\n       repnz scasb\n       popad\n       jz   @@prm67chk\n       cmp  ah, 04h\n       jz   @@prmsib\n       cmp  ah, 05h\n       jnz  @@t_exit\n@@prm5chk:\n       dec  al\n       jz   @@t_exit\n@@i42: add  dl, 4\n       jmp  @@t_exit\n@@prm67chk:\n       cmp  ax, 0600h\n       jnz  @@t_exit\n       inc  edx\n       jmp  @@i1\n@@prmsib:\n       cmp  al, 00h\n       jnz  @@i1\n       lodsb\n       and  al, 00000111b\n       sub  al, 05h\n       jnz  @@i1\n       inc  edx\n       jmp  @@i42\n@@t_weird:\n       test byte ptr [esi], 00111000b\n       jnz  @@t_modrm\n       mov  al, O_MODRM8\n       shr  bh, 1\n       adc  al, 0\n       jmp  @@i5\n@@t_imm32:\n       sub  bh, 0A0h\n       cmp  bh, 04h\n       jae  @@d2\n       pushad\n       mov  al, 67h\n       repnz scasb\n       popad\n       jnz  @@chk66t\n@@d4:  dec  edx\n       dec  edx\n@@chk66t:\n       pushad\n       mov  al, 66h\n       repnz scasb\n       popad\n       jz   @@i1\n       jnz  @@d2\n@@ASMEnded:\n    mov esp, ebp\n    mov [result+(9*4)], edx\n    popad\nend;\n</code></pre>\n<p>Now here comes my Question, what exactly did the Author do at this point?</p>\n<pre><code>  O_UNIQUE = 0;\n  O_PREFIX = 1;\n  O_IMM8 = 2;\n  O_IMM16 = 3;\n  O_IMM24 = 4;\n  O_IMM32 = 5;\n  O_IMM48 = 6;\n  O_MODRM = 7;\n  O_MODRM8 = 8;\n  O_MODRM32 = 9;\n  O_EXTENDED = 10;\n  O_WEIRD = 11;\n  O_ERROR = 12;\n</code></pre>\n<p>And for the Assembly in brief detail, what did he do there. I am a Novice to Assembly.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "x86",
        "x86-64",
        "assembly"
    ],
    "user": "Henry",
    "time": "Sep 28, 2018 at 19:41",
    "comments": [
        {
            "user": "knx",
            "text": "<span class=\"comment-copy\">Possible duplicate of <a href=\"https://reverseengineering.stackexchange.com/questions/12434/determind-length-of-instructions-in-bytes\">Determind length of instructions in bytes</a></span>",
            "time": null
        },
        {
            "user": "Peter Cordes",
            "text": "<span class=\"comment-copy\">It sounds like you want the length of the whole instruction, including prefixes and operands, not just the opcode byte(s).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An x86 instruction can be encoded in up to 15 bytes (AFAIK the CPU traps with Undefined opcode exception when exceeding the instruction length of 15 bytes).</p>\n<p><code>O_PREFIX</code> probably refers to an instruction prefix such as <code>REP</code>, or to instructions with implicit arguments. Encoded in 1 byte.</p>\n<p><code>O_IMM8</code> is an instruction with one immediate argument, so it's encoded in 2 bytes (one for the instruction, one for the argument)</p>\n<p><code>O_IMM16</code> takes an immediate argument of 2 bytes (16 bits), so it's encoded in 3 bytes.</p>\n<p>And so on.</p>\n<p><code>O_MODRM</code> According to the Intel manual</p>\n<blockquote>\n<p>Many instructions that refer to an operand in memory have an addressing-form specifier byte (called the ModR/M\n  byte) following the primary opcode. Certain encodings of the ModR/M byte require a second addressing byte (the SIB byte)</p>\n</blockquote>\n<p>Things get complicated here, and depending on the addressing mode you can have up to 9 bytes per instruction.</p>\n<p>Don't know about <code>O_EXTENDED</code> (MMX? SSE? ...) or the other two.</p>\n<p>Anyway, study the Intel manual, you should find everything in there: <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2a-manual.pdf\" rel=\"nofollow noreferrer\">https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2a-manual.pdf</a></p>\n</div>",
            "votes": "1",
            "user": "memo",
            "time": "Sep 28, 2018 at 13:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're interested in learning (or using) length disassemblers for x86/x64, there are quite a few of them laying around, some with full documentation for your education:</p>\n<ol>\n<li><a href=\"https://github.com/zyantific/zydis\" rel=\"nofollow noreferrer\">https://github.com/zyantific/zydis</a></li>\n<li><a href=\"https://github.com/greenbender/lend\" rel=\"nofollow noreferrer\">https://github.com/greenbender/lend</a></li>\n<li><a href=\"https://github.com/CasualX/lde\" rel=\"nofollow noreferrer\">https://github.com/CasualX/lde</a></li>\n</ol>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Sep 28, 2018 at 19:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">+1 for Zydis, this is an amazing library!</span>",
                    "time": null
                }
            ]
        }
    ]
}