{
    "title": "How to get the CPU architecture via Idapython?",
    "link": "https://reverseengineering.stackexchange.com/questions/11396/how-to-get-the-cpu-architecture-via-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was not able to find an API function to get the CPU architecture of the loaded binary. \nIn <code>idaapi.py</code>, there is a function <code>def set_processor_type(*args)</code> but no equivalent such as <code>get_processor_type</code>.</p>\n<p>I don't want to fall back to running some additional (python) tool such as file, readelf or a python ELF parser. I also don't like the idea of parsing the strings displayed at the beginning of the IDA assembly listing.</p>\n<p>There must be a way to use <code>idc.py</code>, <code>idaapi.py</code> or <code>idautils.py</code> for this.</p>\n</div>",
    "votes": "7",
    "answers": 4,
    "views": "5k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "langlauf.io",
    "time": "Jan 4, 2017 at 20:35",
    "comments": [
        {
            "user": "Pocanatos",
            "text": "<span class=\"comment-copy\">Sorry for resurrecting this old thread, but for reasons I'm unable to figure out, both info.is_64bit() and info.is_32bit() are not working for me. I'm using IDA C++ SDK v7.1. Even if the executable in the database is 64-bit, it still goes through the 32-bit check. Any idea why this is happening?</span>",
            "time": null
        },
        {
            "user": "knx",
            "text": "<span class=\"comment-copy\">If you have a new question, please ask it by clicking the <a href=\"https://reverseengineering.stackexchange.com/questions/ask\">Ask Question</a> button. Include a link to this question if it helps provide context. - <a href=\"/review/low-quality-posts/15395\">From Review</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can get the name of the processor from the <code>idainfo</code> struct:</p>\n<pre><code>import idaapi\n\ninfo = idaapi.get_inf_structure()\n\nif info.is_64bit():\n    bits = 64\nelif info.is_32bit():\n    bits = 32\nelse:\n    bits = 16\n\ntry:\n    is_be = info.is_be()\nexcept:\n    is_be = info.mf\nendian = \"big\" if is_be else \"little\"\n\nprint 'Processor: {}, {}bit, {} endian'.format(info.procName, bits, endian)\n# Result: Processor: mipsr, 32bit, big endian\n</code></pre>\n<p>Still haven't found the endian, though.</p>\n<p>EDIT:\nEndian can be determined by processor name. For example, <code>mipsr</code> is big endian, and <code>mipsrl</code> is little endian.</p>\n<p>EDIT:<br/>\nAdded a proper endian check (<code>mf</code> == MSB First). Based on <a href=\"https://reverseengineering.stackexchange.com/questions/11396/how-to-get-the-cpu-architecture-via-idapython/14326#14326\">this answer</a>.</p>\n<p>EDIT:<br/>\nSince IDA7 beta 3 (170724), idainfo.mf was removed, and idainfo.is_be() must be used. Based on <a href=\"https://github.com/keystone-engine/keypatch/blob/bfcaef11de3a90efb08ed4f0c39dccf40d5613d0/keypatch.py#L171-L177\" rel=\"noreferrer\">keypatch</a></p>\n</div>",
            "votes": "9",
            "user": "stek29",
            "time": "Jan 30, 2018 at 9:00",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not all processor name has endian information. Generally it can be determinded as:</p>\n<pre><code>BIG_ENDIAN if _idaapi.cvar.inf.mf else LITTLE_ENDIAN\n</code></pre>\n</div>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Jan 4, 2017 at 20:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is definitely not exact answer, but probably you could make use of </p>\n<pre><code>idaapi.ph_get_regnames() \n</code></pre>\n<blockquote>\n<p>Returns the list of register names as defined in the processor module</p>\n</blockquote>\n<p>Different platforms has different register sets, and if you will not find your solution about exact cpu you can give it a try.\nThis function exists in IDA 6.8.</p>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Nov 25, 2015 at 10:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using the minsc plugin at <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">https://github.com/arizvisa/ida-minsc</a>, you can access database information using <code>database.information</code>. To get the detected architecture, you can access it via <code>instruction.arch</code> (currently only Intel, Mips, and Arm are implemented for this particular method).</p>\n<pre><code>Python&gt;db.info.processor(), db.info.bits(), db.info.byteorder(), ins.arch\n('metapc', 0x20, 'little', &lt;pc.Intel object at 0x7fdf2c145e90&gt;)\n</code></pre>\n<p>Disclaimer: I maintain the ida-minsc plugin.</p>\n<p>Register information can be accessed via <code>instruction.architecture.register</code> (or <code>instruction.register</code>).</p>\n<pre><code>Python&gt;ins.arch.reg\n&lt;class 'internal.architecture.map_t'&gt;\n%bnd0  : &lt;class 'register_t' index=97 dtype=dt_byte16 name='bnd0' position=0+128&gt;\n%bnd1  : &lt;class 'register_t' index=98 dtype=dt_byte16 name='bnd1' position=0+128&gt;\n%bnd2  : &lt;class 'register_t' index=99 dtype=dt_byte16 name='bnd2' position=0+128&gt;\n%bnd3  : &lt;class 'register_t' index=100 dtype=dt_byte16 name='bnd3' position=0+128&gt;\n...\n%zmm31  : &lt;class 'register_t' index=164 dtype=dt_byte64 name='zmm31' position=0+512&gt;\n %ymm31 : \\_&lt;class 'register_t' index=132 dtype=dt_byte32 name='ymm31' position=0+256&gt;\n %xmm31 :   \\_&lt;class 'register_t' index=116 dtype=dt_byte16 name='xmm31' position=0+128&gt;\n</code></pre>\n<p>If you want to access the processor information as soon as the disassembler figures it out, you can add a hook. First we define some function that corresponds to <a href=\"https://hex-rays.com/products/ida/support/sdkdoc/structprocessor__t.html#a2d184a313fab28b517e82c1717d562a0a190f0300a7e6ad8e090389f7b986e9f8\" rel=\"nofollow noreferrer\"><code>IDP_Hooks.ev_newprc</code></a>. Then we can use the idp hooks in the <code>ui</code> module from minsc accessed as <code>ui.hooks.idp</code>.</p>\n<pre><code>import database as db, ui\ndef choose_processor(*dunno):\n    print('got', db.info.processor())\nPython&gt;ui.hook.idp.add('ev_newprc', choose_processor)\n</code></pre>\n<p>IDP Hook is now added (Note: edited a bit to highlight the function we've attached).</p>\n<pre><code>Python&gt;ui.hook.idp\nEvents currently connected to IDP_Hooks:\n...\nIDP_Hooks.ev_newprc           : __main__.choose_processor(*dunno)[+0]\n...\nIDP_Hooks.ev_rename           : internal.hooks.changing(*parameters)[+0]\n</code></pre>\n<p>Now upon opening up or creating a database we'll see the following output.</p>\n<pre><code>Loading processor module procs/arm.so for ARM...\n...\nOK\nWARNING:root:Detected processor module : AArch32 (13)\ngot ARM\nAssuming __fastcall calling convention by default\n...\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 21, 2024 at 4:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}