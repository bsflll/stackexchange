{
    "title": "Position-independent code dectection",
    "link": "https://reverseengineering.stackexchange.com/questions/18357/position-independent-code-dectection",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible to detect whether a given executable is a PIC by looking at the disassembler's output? If not, what are other valid ways to go about this?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "564",
    "tags": [
        "elf",
        "pie"
    ],
    "user": "Trey",
    "time": "May 25, 2018 at 6:11",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">What's the basis for the question? As is, it is a bit odd, so maybe if you explain your motivation it's possible to give a more helpful answer. If code is PIC, you usually see some typical patterns like <code>call $+, pop</code> to get the current address, or <code>call xxx, pop</code> to push some address on the stack.</span>",
            "time": null
        },
        {
            "user": "Trey",
            "text": "<span class=\"comment-copy\">@JohannAydinbas I don't really have a reason... I was just trying to understand the differences between ET_DYN and ET_EXEC(compiled with -fPIC) and that made me wonder whether I could detect this kind of thing</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Detection by analysing assembly</h1>\n<p>It will highly depend on the compiler used, but here are some constructions that will differ between position independent and position dependent code:</p>\n<ul>\n<li>if you spot a <code>jmp</code> to an absolute address, that will mean that it is PDC (only jumps relative to <code>RIP</code> will be used in PIC)</li>\n<li>when some data is referenced by absolute address, it is PDC</li>\n<li>as @Johann Aydinbas noticed, when you see patterns like <code>cal $+, pop</code> or <code>call xxx, pop</code> to push some absolute address onto the stack, it will likely be PIC</li>\n</ul>\n<h1>Detection by opening with debugger</h1>\n<p>You may also take advantage of the fact, that when you load position independent program and check address of some function, <code>main</code> for example, it will change each time you load it (because of <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">ASLR</a>). The same won't be true for PDC - all addresses will remain the same.</p>\n<h1>Detection by reading the ELF header</h1>\n<p>Why making your job hard analysing the executable, while it provides explicitly the information you need. As you noted in the comment, <code>ET_EXEC</code> value of <code>e_type</code> will be present in PDC, while <code>ET_DYN</code> will appear in PIC. And, according to the second answer to this <a href=\"https://stackoverflow.com/questions/34519521/why-does-gcc-create-a-shared-object-instead-of-an-executable-binary-according-to\">question</a>, this is the information used to determine whether <code>ASLR</code> may be used, in <code>Linux</code>.</p>\n<h1>Other methods</h1>\n<p>You may of course use other tools for this purpose, like <code>file</code> or <code>readelf</code> for instance.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}