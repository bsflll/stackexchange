{
    "title": "Router flash dump unknown filesystem",
    "link": "https://reverseengineering.stackexchange.com/questions/15666/router-flash-dump-unknown-filesystem",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse engineering my router firmware after reading an interesting article about an hidden backdoor inside router firmwares from a popular company.</p>\n<p>Data has been extracted (using raspberry pi b+ spi) directly from flash because there isn't a downloadable firmware around.</p>\n<p>partial serial output\n<pre><code>Start to decompress!\nBooting\nPress 'ESC' to enter BOOT console...\nExt. phy is not found. \nBoot from NOR/SPI flash\n(c)Copyright Realtek, Inc. 2012\nProject RTL8676S LOADER (LZMA)\nVersion 00.01.02a-rc (Nov 13 2014 17:15:26)\n</code></pre></p>\n<p>binwalk output\n<pre><code>LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 70744 bytes\n(lots of lines like this one)</code></pre></p>\n<p>findings\n<pre><code>0x8000 to 0xE777: bootloader?\n0x10000: rootfs start\n  first 0x13 byte: unknown data (header ?)\n  build date\n  string \"router.img\"\n  firmware data</code></pre></p>\n<p>I think firmware is encrypted. I can't extract bootloader, kernel and rootfs for static analysis. Is it possible to emulate using qemu?\nFw link: <a href=\"https://www.sendspace.com/file/lc8fya\" rel=\"nofollow noreferrer\">flashimage</a> pass: fi00</p>\n<p>Thanks in advance</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "hex",
        "dumping"
    ],
    "user": "L. Darens",
    "time": "Jun 26, 2017 at 16:01",
    "comments": [
        {
            "user": "Deject.d",
            "text": "<span class=\"comment-copy\">i have the same case like you now, Did you found the true file system and extracted ? Please give me hint. Thanks</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From what I can see, it appears to be a binary image for a MIPS processor (big endian). The image appears to be loaded at offset 0x80000000. There is a subroutine at 0x80001d70 offset which prints out the initial \"Start to decompress!\" message at PC 0x80001e38. Hopefully that should get you started.</p>\n</div>",
            "votes": "3",
            "user": "cimarron",
            "time": "Jun 26, 2017 at 6:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "L. Darens",
                    "text": "<span class=\"comment-copy\">Thanks. It's a good starting point indeed. Do you think it's a single file (like VxWorks) as filesytem?</span>",
                    "time": null
                },
                {
                    "user": "L. Darens",
                    "text": "<span class=\"comment-copy\">Following your answer, I found that router os is ThreadX (RTOS) and bootloader is TBS bootloader. Can't find some good info/tools online... But there's some GPL source.</span>",
                    "time": null
                }
            ]
        }
    ]
}