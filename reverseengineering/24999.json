{
    "title": "Extracting strings from Go binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/24999/extracting-strings-from-go-binaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there an easy way to extract all of the strings from Go binaries that will work cross architecture?</p>\n<p>The problem with Go is that strings are stored without a null terminator, so you can't use the \"strings\" command plainly.</p>\n<p>I found two solutions so far -</p>\n<ul>\n<li><p><a href=\"https://github.com/CarveSystems/gostringsr2\" rel=\"nofollow noreferrer\">gostringsr2</a> - Extracts strings using references to the string section (by using radare2). But this method doesn't work 100% and screws up some strings because there are indirect references, etc...,</p>\n</li>\n<li><p><a href=\"https://github.com/strazzere/golang_loader_assist/blob/master/golang_loader_assist.py\" rel=\"nofollow noreferrer\">golang_loader_assist</a> - Extracts strings by searching for <code>lea</code>/<code>mov</code> instruction to the string section. But this method only works for x86 architectures.</p>\n</li>\n</ul>\n<p>Is there a more generic and correct way to extract the strings from Go compiled binaries?</p>\n</div>",
    "votes": "13",
    "answers": 1,
    "views": "3k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "elf",
        "strings",
        "go"
    ],
    "user": "Drxxd",
    "time": "Jun 19, 2023 at 23:31",
    "comments": [
        {
            "user": "hippietrail",
            "text": "<span class=\"comment-copy\">What is Go's native text encoding? For 7-bit ASCII look for runs of bytes &gt;= space and &lt; DEL. For 8-bit extensions to ASCII look for runs of bytes &gt;= space. For UTF-8 there are specific bit patterns to look for in the various bytes of each multibyte character. For UTF-16 you need heuristics. ASCII-compatible runs have interleaves 0 bytes and bytes &gt;= space. Unpaired surrogates are a flag that it's unlikely to be UTF-16 after all. In all cases the fidelity is lower than finding null-terminated strings.</span>",
            "time": null
        },
        {
            "user": "Drxxd",
            "text": "<span class=\"comment-copy\">@hippietrail I think that the native encoding is ASCII, but the problem is that GO saves it strings without null terminator.. So you can find only one huge blob of strings and I want to extract those strings \"as is\" one by one</span>",
            "time": null
        },
        {
            "user": "hippietrail",
            "text": "<span class=\"comment-copy\"><a href=\"https://medium.com/rungo/string-data-type-in-go-8af2b639478\" rel=\"nofollow noreferrer\">According to this</a>, GO uses UTF-8 for strings. If you don't want to have to split up the blobs yourself and strings are not terminated then it seems there is no \"easy way\" until somebody knowing all the architectures writes a unified tool using principles like the tools you mention use. In the meantime you might be able to analyse your binary with Ghidra. Ada Pro can surely do something too. But those are more heavyweight than you seem to be looking for and won't always find every string.</span>",
            "time": null
        },
        {
            "user": "diff",
            "text": "<span class=\"comment-copy\">You referenced the project <code>golang_loader_assist</code> and it only supporting x86. If you'd like to submit a PR for updating <code>is_string_load()</code> for non-x86 patterns used by golang I'll gladly accept and apply them.  AFAIK, there is no \"easy\" way to do this, which is why I resorted to this method. The calls for strings are preempted by the length, which is important since there is no null byte afterwards.</span>",
            "time": null
        },
        {
            "user": "ismael_akez",
            "text": "<span class=\"comment-copy\">You have to make a reference with other versions of golang since the opcodes might be different in every version. golang_loader_assist uses those opcodes as a pattern to search for strings.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just read a good article on the challenges with Go binaries: <a href=\"https://cujo.com/reverse-engineering-go-binaries-with-ghidra/\" rel=\"nofollow noreferrer\">https://cujo.com/reverse-engineering-go-binaries-with-ghidra/</a></p>\n<p>I think this could be classed as a \"cross-architecture solution\" seeing as Ghidra runs under a JVM.</p>\n<p>The Ghidra plugins they developed seem to work well. I ran the static and dynamic scripts against the Go binary they used in their Hacktivity2020 conference preso with good results:</p>\n<p><a href=\"https://i.sstatic.net/JhsZy.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/JhsZy.png\"/></a></p>\n<p>I guess malware may be less amenable to analysis, but this is probably a good start.</p>\n</div>",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jul 18, 2022 at 0:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}