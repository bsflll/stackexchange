{
    "title": "Identifying Compiler Used for Binary File",
    "link": "https://reverseengineering.stackexchange.com/questions/21935/identifying-compiler-used-for-binary-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to recreate a binary file from an analysis of \"strings\" output. I don't recognize which compiler was used for this file. It does not seem to be shc. Does anyone recognize this output pattern from a known compiler?</p>\n<pre><code>strings *omitted*\n/lib/ld-linux.so.2\nlibc.so.6\n_IO_stdin_used\nputs\nsetreuid\nprintf\ngetchar\nsystem\ngeteuid\nstrcmp\n__libc_start_main\n__gmon_start__\nGLIBC_2.0\nPTRhp\nQVh;\nsecrf\nlove\nUWVS\nt$,U\n[^_]\n</code></pre>\n<p>I can include the rest of the output.\nEdit: the scripting language is likely dash</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "582",
    "tags": [
        "binary-analysis"
    ],
    "user": "CrippledTable",
    "time": "Aug 20, 2019 at 5:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Looks like strings from the first few sections of a Linux ELF32 binary created using the GCC toolchain. I can't tell you which version of GCC though.</p>\n<p><code>strings</code> output on its own is often insufficient for performing <em>compiler toolchain provenance</em>.</p>\n<p>You also should include the full output of <code>strings</code>, because sometimes the compiler includes an identifier within the binary:</p>\n<pre><code>/lib/ld-linux.so.2\nlibc.so.6\n_IO_stdin_used\nprintf\n__libc_start_main\n__gmon_start__\nGLIBC_2.0\nPTRh\n[^_]\n;*2$\"\nGCC: (Ubuntu 4.8.4-2ubuntu1~14.04.4) 4.8.4    &lt;------------------- \nGCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\n.symtab\n.strtab\n.shstrtab\n.interp\n.note.ABI-tag\n.note.gnu.build-id\n.gnu.hash\n.dynsym\n.dynstr\n.gnu.version\n.gnu.version_r\n.rel.dyn\n.rel.plt\n.init\n.text\n.fini\n.rodata\n.eh_frame_hdr\n.eh_frame\n.init_array\n.fini_array\n.jcr\n.dynamic\n.got\n.got.plt\n.data\n.bss\n.comment\ncrtstuff.c\n__JCR_LIST__\nderegister_tm_clones\nregister_tm_clones\n__do_global_dtors_aux\ncompleted.6600\n__do_global_dtors_aux_fini_array_entry\nframe_dummy\n__frame_dummy_init_array_entry\ntrigger_sigsegv.c\n__FRAME_END__\n__JCR_END__\n__init_array_end\n_DYNAMIC\n__init_array_start\n_GLOBAL_OFFSET_TABLE_\n__libc_csu_fini\n_ITM_deregisterTMCloneTable\n__x86.get_pc_thunk.bx\ndata_start\nprintf@@GLIBC_2.0\n_edata\n_fini\n__data_start\n__gmon_start__\n__dso_handle\n_IO_stdin_used\n__libc_start_main@@GLIBC_2.0\n__libc_csu_init\n_end\n_start\n_fp_hw\n__bss_start\nmain\n_Jv_RegisterClasses\n__TMC_END__\n_ITM_registerTMCloneTable\n_init\n</code></pre>\n</div>",
            "votes": "5",
            "user": "julian",
            "time": "Jul 3, 2024 at 20:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "CrippledTable",
                    "text": "<span class=\"comment-copy\">Thanks for the formatting guidance. I found it { strings ./check | grep \"GCC\"  Output: GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 2017051 }</span>",
                    "time": null
                }
            ]
        }
    ]
}