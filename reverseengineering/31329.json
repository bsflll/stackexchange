{
    "title": "Zlib structure inside a GCC static library",
    "link": "https://reverseengineering.stackexchange.com/questions/31329/zlib-structure-inside-a-gcc-static-library",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to analyze a GCC static library which is a part of a commercial software.</p>\n<p>First, I used <code>IDA Pro</code> to analyze entire Lib file, but it could find only object files and was unable to disassemble objects.</p>\n<p>So, I extracted all of the inside objects by <code>ar -x</code>. Next, I used <code>binwalk</code>, It shows multiple <code>Zlib Compressed</code> regions next to the 64-bytes header (EFI x64). Is this ordinary in static libraries (existence of several zlib region)? Is it a protection method?</p>\n<p>Anyway, I used <code>zlib-flate -uncompress</code> to extract sections in one of the objects after separating its zlib regions (by <code>dd</code>), and used <code>IDA Pro</code> to disassemble the output. Although, some of the sections contain some valid strings (Unix Path), <code>IDA Pro</code> shows invalid codes.</p>\n<p>Thanks in advance.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "172",
    "tags": [
        "ida",
        "gcc",
        "binwalk",
        "libraries"
    ],
    "user": "HamidReza",
    "time": "Dec 31, 2022 at 6:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hard to tell without a look at the library in question, but my guess would be that the contained object files contain zlib-compressed debug information.</p>\n<p>Have a look <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html\" rel=\"nofollow noreferrer\">here</a> and look for \"zlib\" or <code>-gz</code> regarding the relevant GCC options.</p>\n</div>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Dec 31, 2022 at 8:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "HamidReza",
                    "text": "<span class=\"comment-copy\">Thanks. I checked it. But It seems these aren't Debug sections. I tried <code>readelf -e file.obj</code>. it shows each Zlib-Compressed region is an <code>elf</code> section which has been determined in the sections header (Because offsets of sections are equal to offsets of <code>binwalk</code> zlib regions). Their name is like a function's name. A weird point is that all main sections (e.g. <code>.text</code>, <code>.data</code>,...) are zero-sized.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@HamidReza as mentioned, I think we won't get much further than that without an actual sample and some more details of what (object) files you ran the respective tools on.</span>",
                    "time": null
                },
                {
                    "user": "HamidReza",
                    "text": "<span class=\"comment-copy\">Thank you for your time and consideration. I'll ask my employer to let me share one of the obj files.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@HamidReza one more thing. Technically object files can wrap any sort of data. So depending on the kind of library you are looking at, chances are you are literally looking at data blobs, especially with those curious details about <code>.data</code> and <code>.text</code> sections.</span>",
                    "time": null
                }
            ]
        }
    ]
}