{
    "title": "IDA: Two calls of a same function",
    "link": "https://reverseengineering.stackexchange.com/questions/16251/ida-two-calls-of-a-same-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was reversing some executable and came across to this code:</p>\n<p><a href=\"https://i.sstatic.net/jLOeM.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/jLOeM.png\"/></a></p>\n<p>As I found out later, it's using function pointer to call function <code>sub_4011C0</code> and that could be the reason. </p>\n<p>My question is why does dissambler show this kind of output? why doesn't it recognize the function pointer and call the function twice? thanks.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "222",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "c++",
        "c"
    ],
    "user": "Ojs",
    "time": "Sep 3, 2017 at 8:42",
    "comments": [
        {
            "user": "conio",
            "text": "<span class=\"comment-copy\">I don't understand the question. What's the problem?</span>",
            "time": null
        },
        {
            "user": "Michael Pittino",
            "text": "<span class=\"comment-copy\">What makes you think the output is wrong?</span>",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "<span class=\"comment-copy\">why is it calling two times? when the reference shows only one call?</span>",
            "time": null
        },
        {
            "user": "Michael Pittino",
            "text": "<span class=\"comment-copy\">Sorry I can't follow you. What do you mean by <code>the reference</code>? The application stores the address of the function in <code>[ebp+var_4]</code> and then calls whatever is at <code>[ebp+var_4]</code> 2 times. In this case it's the function it moved there. The original code could have been something like that: <a href=\"https://pastebin.com/0S83zEhp\" rel=\"nofollow noreferrer\">pastebin.com/0S83zEhp</a></span>",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "<span class=\"comment-copy\">Thats the point, in original source code there is only one call to the function, even if you look at the picture above <code>sub_4011C0 </code> function has only one reference. In reference I mean IDA only recognizes one call to the function which is from <code>DATA XREF: sub_4011D0+5o</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In assembly there is <em>only one</em> explicit reference to the target function, and that's where its address is moved to the variable at point 1 (you can see that the reference is marked <strong>'o'</strong> (offset) and not <strong>'p'</strong> ([procedure] call)). While IDA could in theory track stack var assignments and add xrefs also at the points the variable is used for an indirect call (2 and 3), this:</p>\n<ol>\n<li>would increase analysis time for negligible benefit (an experienced user can easily see that <code>var_4</code> is called twice)</li>\n<li>is prone to false positives (e.g. if there's a function call before initialization and use of the variable, you can't be sure that it's not overwritten by the side-effects of the function)</li>\n<li>is easily defeatable (e.g. do some simple math on the pointer and IDA will be fooled).</li>\n</ol>\n<p>So it's better to add only explicit cross-references and let the human decide if extra ones need to be added manually.</p>\n<p>That said, IDA does some limited amount of register tracking to handle the most common situations, e.g.:</p>\n<pre><code>mov     esi, ds:__imp__sprintf\npush    edi\nlea     edx, [esp+0BCh+szOffset]\npush    offset Format   ; \"%08X\"\npush    edx             ; Dest\ncall    esi ; __imp__sprintf\n</code></pre>\n<p>You can see that it added a comment at the <code>call esi</code> instruction with the actual destination loaded earlier into <code>esi</code>. (it also adds a call xref in such case).</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 3, 2017 at 17:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}