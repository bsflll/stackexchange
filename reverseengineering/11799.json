{
    "title": "Given a program binary, how can I know which compiler it is compiled from?",
    "link": "https://reverseengineering.stackexchange.com/questions/11799/given-a-program-binary-how-can-i-know-which-compiler-it-is-compiled-from",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically I have a set of 32-bit ELF program binaries compiled by either <code>gcc</code> or <code>llvm</code>. They are all stripped before analysis. </p>\n<p>My question is that, given a binary, is there any way I can determine whether it is compiled by <code>gcc</code> or <code>llvm</code>? Is there any available tool to do so? </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "binary",
        "binary-format"
    ],
    "user": "lllllllllllll",
    "time": "Jan 19, 2016 at 15:53",
    "comments": [
        {
            "user": "ratchet freak",
            "text": "<span class=\"comment-copy\">you may be able to guess based on the way some common constructs are compiled and optimizations that did or didn't happen</span>",
            "time": null
        },
        {
            "user": "robert",
            "text": "<span class=\"comment-copy\">I am curious why was this question downvoted?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am no expert in the matter but I would try:</p>\n<ol>\n<li><p><strong>see exported functions names</strong></p>\n<p>if <a href=\"https://en.wikipedia.org/wiki/Name_mangling\" rel=\"nofollow\">mangling</a> is present you can use it for compiler detection. Just make a list of exported function names and compare to known mangling schemes (for example from the table in linked wiki page)</p></li>\n<li><p><strong>examine linked DLL's</strong></p>\n<p>you can detect well known <strong>RTL</strong>'s by the filenames.</p></li>\n<li><p><strong>Also you can try to find language/compiler engine</strong></p>\n<p>each version of each compiler of modern programing languages need to have its engine. It is part of code that is responsible for things like stack, variables, control flow etc and is always the same for each compiled program with the same compiler version.</p>\n<p>So create simple hello world apps in each compiler you can found and extract the engine binary. then simply search unknown binary and test if supported engine is present or not.</p></li>\n</ol>\n<p>The first two bullets are more for <strong>PE</strong> (not sure if elf has the same info) and there are tools for such inspection (like <strong>PE/DLL</strong> explorers so for elf there should be something similar).</p>\n</div>",
            "votes": "2",
            "user": "Spektre",
            "time": "Jan 21, 2016 at 4:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "speeder",
                    "text": "<span class=\"comment-copy\">I know that Mach-O does have the same info as your first two points, you can see what version of .SO files are being requested, and also analyze name mangling, GCC and Clang for example are very different in their mangling scheme, and both can make Mach-O binaries, thus you can at least know if it is GCC or Clang, even if you can't figure a specific version.</span>",
                    "time": null
                }
            ]
        }
    ]
}