{
    "title": "IDA pro and compiler-optimized 1-based array accesses in structure",
    "link": "https://reverseengineering.stackexchange.com/questions/30235/ida-pro-and-compiler-optimized-1-based-array-accesses-in-structure",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know title isn't very clear so here is an example of a code I'm trying to disassemble:</p>\n<pre><code>struct Inner {\n  int field1;\n  int field2;\n};\nstruct Outer {\n  int some_data[16];\n  struct Inner the_array[16];\n};\n\nint x(struct Outer* s, int id) {\n  return s-&gt;the_array[id - 1].field2;\n}\n</code></pre>\n<p>A compiler fuses all the offsets (positive offset of Inner within Outer, negative offset of -1 index and positive offset of field2 in Inner) into single offset. The complete function code follows:</p>\n<pre><code>movsxd  rax, esi\nmov     eax, [rdi+rax*8+3Ch]\nretn\n</code></pre>\n<p>IDA and Hex-rays obviously think it is an offset into <code>Outer::some_data</code> and not into <code>Outer::the_array</code>. Corresponding pseudocode is:</p>\n<pre><code>__int64 __fastcall x(Outer *s, int id)\n{\n  return (unsigned int)s-&gt;some_data[2 * id + 15];\n}\n</code></pre>\n<p>Is there any way to manually select which nested structure member is being accessed?</p>\n<p>If someone wants to reproduce this example to play with it themselves, that code sample is a complete TU and Linux x86-64 clang 10 or newer produces the assembly code I shown (<code>-O1</code> is enough for this optimization). Same source file can be then loaded into IDA as a C header to get the structures.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "185",
    "tags": [
        "ida"
    ],
    "user": "Andrey Turkin",
    "time": "Apr 10, 2022 at 11:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the Pseudocode view, try to play with <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-54-shifted-pointers/\" rel=\"nofollow noreferrer\">shifted pointers</a> to account for the 8-byte offset (<code>sizeof(*Inner)</code>)</p>\n<p>If you declare s like this:</p>\n<pre><code>Outer *__shifted(Outer,8) s\n</code></pre>\n<p>You might get something looking like that:</p>\n<pre><code>return ADJ(s)-&gt;the_array[id].field2;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "vmallet",
            "time": "Apr 10, 2022 at 21:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Andrey Turkin",
                    "text": "<span class=\"comment-copy\">It kinda works for this example; -1 gets lost but I could live with that, and I'll be sure to use this. It's only a partial solution though: a) smaller issue - <code>__shifted</code> cast will be plastered all over all the callsites, if lucky; if unlucky, same <code>__shifted</code> type will be propagated upstream and will require manual overrides; b) this one is much worse - it doesn't work if the function happens to touch not only <code>the_array</code> but also some other fields of Outer.</span>",
                    "time": null
                }
            ]
        }
    ]
}