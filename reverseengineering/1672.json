{
    "title": "Why is this string on the stack not exactly the one I entered? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/1672/why-is-this-string-on-the-stack-not-exactly-the-one-i-entered",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> <a href=\"/posts/1672/edit\">Update the question</a> so it's <a href=\"/help/on-topic\">on-topic</a> for Reverse Engineering Stack Exchange.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2013-04-10 13:53:31Z\">12 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/1672/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I was trying to understand buffer overflow attacks using the following C program </p>\n<pre><code>#include\"stdio.h\"  \n#include\"string.h\"   \nvoid iwontprint()  \n{  \n    printf(\"i wont be printed!\");  \n}  \n\nvoid callme()  \n{  \n    char buffer[8];  \n    gets(buffer);  \n    puts(buffer);  \n}  \n\nint main(int argc,int** argv)  \n{  \n    callme();  \n    return 0;  \n}\n</code></pre>\n<p>Loading up the program in GDB before calling the <code>gets(buffer)</code> gives the following value of ESP : </p>\n<pre><code>0xbffff4d4: 0xb7ff0590 0x080484db 0xb7fc1ff4 0xbffff4e8  \n0xbffff4e4: 0x080484b6 0xbffff568 0xb7e79e46 0x00000001\n</code></pre>\n<p>And after entering the input <code>123456789abc\\x7c\\x84\\x04\\x08</code> I am getting totally different values in ESP :</p>\n<pre><code>0xbffff4d4: 0xbffff4d8 0x34333231 0x38373635 0x63626139  \n0xbffff4e4: 0x6337785c 0x3438785c 0x3430785c 0x3830785c\n</code></pre>\n<p>I've already set <code>randomize_va_space = 0</code></p>\n<pre><code>$cat /proc/sys/kernel/randomize_va_space   \n0\n</code></pre>\n<p>Can anybody provide any pointers as to what am I missing here ?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "410",
    "tags": [
        "disassembly",
        "gdb",
        "buffer-overflow"
    ],
    "user": "Novice User",
    "time": "12 years ago",
    "comments": [
        {
            "user": "Mellowcandle",
            "text": "<span class=\"comment-copy\">Although very interesting I find it off topic, voting to close</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your Stack is totally fine. Look more careful at the values:</p>\n<p><code>0x34333231 0x38373635 0x63626139 0x6337785c 0x3438785c 0x3430785c 0x3830785c</code></p>\n<p>which interpreted as an ascii string becomes this. literally:</p>\n<p><code>123456789abc\\x7c\\x84\\x04\\x08</code></p>\n<p>As you can see, it's exactly what you entered. And I mean by that, that for example <code>\\x7c</code> is the String <code>\"\\x7c\"</code> and not <code>\"|\"</code>. Use this technique to send the values properly:</p>\n<p><code>echo -e \"123456789abc\\x7c\\x84\\x04\\x08\" | ./yourbinary</code></p>\n</div>",
            "votes": "9",
            "user": "samuirai",
            "time": "Apr 9, 2013 at 10:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Novice User",
                    "text": "<span class=\"comment-copy\">Thanks for your response. however I am not able to understand why 0x63626139  is there instead of 0x0804847c (which i entered as input in little endian).</span>",
                    "time": null
                },
                {
                    "user": "Novice User",
                    "text": "<span class=\"comment-copy\">AFAIK , 0xbffff4d8 &amp; 0x34333231 are for char buffer[8] and 0x38373635 should be for value of EBP (old). Then the next value should be the one i entered (beyond 12 bytes) ?</span>",
                    "time": null
                },
                {
                    "user": "samuirai",
                    "text": "<span class=\"comment-copy\">No. You didn't enter <code>0x0804847c</code>. You entered <code>0x3830785c</code>, which is: <code>0x5c==\\ </code>, <code>0x78==x</code>, <code>0x30==0</code>, <code>0x38==8</code> that is <code>\\x08</code> as a string. not the byte value 0x08.</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">actually , echo won't interpret \\x escapes either unless you specify -e switch</span>",
                    "time": null
                },
                {
                    "user": "samuirai",
                    "text": "<span class=\"comment-copy\">Only on Linux. The BSD Version doesn't know this option (<a href=\"http://www.unix.com/man-page/FreeBSD/1/echo/\" rel=\"nofollow noreferrer\">unix.com/man-page/FreeBSD/1/echo</a>)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Samurai's answer is correct , but put more clearly , your mistake is that you enter the literal string </p>\n<pre><code>123456789abc\\x7c\\x84\\x04\\x08\n</code></pre>\n<p>where as what you probably want is something like:</p>\n<pre><code>perl -e 'print \"123456789abc\\x7c\\x84\\x04\\x08\"' | ./yourbinary\n</code></pre>\n<p>In the first case the <code>\\x7c\\x84\\x04\\x08</code> is just that, a 16 characters length string, where in the second case, the <code>\\x</code> escape sequence is actually interpreted and <code>\\x7c\\x84\\x04\\x08</code> is printed as just 4 bytes.</p>\n</div>",
            "votes": "4",
            "user": "Patrick Mevzek",
            "time": "Mar 26, 2018 at 8:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}