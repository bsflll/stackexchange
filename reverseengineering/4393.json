{
    "title": "How to create a virus signature from decompiled source",
    "link": "https://reverseengineering.stackexchange.com/questions/4393/how-to-create-a-virus-signature-from-decompiled-source",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a problem where I have to create a virus signature for the Stoned Virus (Although this could apply to any virus/file).</p>\n<p>Let's assume I have a copy of the compiled and decompiled program. I then proceed to identify the most important parts of the virus, that will always be present, in the code. As I understand it I now have to find the corresponding bytes in the compiled virus in order to create a byte signature for that critical part of the virus.</p>\n<p>How do I proceed to find the corresponding bytes in the compiled source from the code that I identified in the decompiled version?</p>\n<p>Extra:</p>\n<ul>\n<li>The code is in assembly</li>\n<li>Simply using a hash signature for the entire file is not an option</li>\n<li>Currently I only have the assembly code, but I can always compile this</li>\n<li>I am aware that Stoned would usually be located in the boot sector and not in a file. This is only an academic exercise and would be relevant to any virus.</li>\n</ul>\n<p>EDIT:</p>\n<p>The purpose of this is to be able to create virus signatures that can be used to scan a file system to find infected files as well as possibly infected files and variations of the virus code. For this reason I cannot simply use a hash of the entire file and I need to use specific parts of the virus. I can identify those parts but I do not know how to find the matching bytes in the machine code for the viral parts I identified.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "byte-code",
        "malware"
    ],
    "user": "MysteryMan",
    "time": "May 21, 2014 at 6:26",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">Which disassembler are you using? I have not seen a single one that does not have an option to output the original opcodes together with the disassembly.</span>",
            "time": null
        },
        {
            "user": "nrz",
            "text": "<span class=\"comment-copy\">@VitalyOsipov At least <a href=\"http://www.nasm.us/doc/nasmdoca.html\" rel=\"nofollow noreferrer\">NDISASM</a> outputs the original binary code (including the opcode) of each instruction, together with the disassembly.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a number of ways to do this. Some people new to signature scanning use MD5 hashes of the entire file. This is <em>VERY</em> flawed, due to the switching of registers or even just the timestamp of the file would change the entire signature.</p>\n<p>Another method often used is YARA ( <a href=\"http://plusvic.github.io/yara/\" rel=\"nofollow\">http://plusvic.github.io/yara/</a> ).\nA good example from their webpage:</p>\n<pre><code>rule silent_banker : banker\n{\n    meta:\n        description = \"This is just an example\"\n        thread_level = 3\n        in_the_wild = true\n\n    strings:\n        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}\n        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}\n        $c = \"UVODFRYSIHLNWPEJXQZAKCBGMT\"\n\n    condition:\n        $a or $b or $c\n}\n</code></pre>\n<p>Here they say that one of the A, B or C bytes should be within the file.</p>\n<p>Another method used (however this is more a Heuristic method) is to detect the ways it tries to hide. Eg obfuscation, encryption odd jumps (like pop, ret to jump to addresses).</p>\n<p>Another method used often, (although this is less signature based) is IOC, for this see: <a href=\"http://www.openioc.org/\" rel=\"nofollow\">http://www.openioc.org/</a></p>\n<p>I think you are looking for YARA.\nNote for writing YARA signatures, good malware/exploits authors randomize everything they can. So try to find the parts that are 'unchangeable'.</p>\n</div>",
            "votes": "3",
            "user": "Stolas",
            "time": "May 21, 2014 at 8:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MysteryMan",
                    "text": "<span class=\"comment-copy\">Okay I will look at YARA, How would I reach a hexadecimal line like $a if I have the commands say: MOV ax,bx XOR ax,ax? Do I just put those commands into a hex editor and get the corresponding value?</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">The answer is opcodes. ( <a href=\"http://www.mathemainzel.info/files/x86asmref.html\" rel=\"nofollow noreferrer\">mathemainzel.info/files/x86asmref.html</a> ) You can use any respectable disassembler for this.</span>",
                    "time": null
                },
                {
                    "user": "nrz",
                    "text": "<span class=\"comment-copy\">If you need binary encodings (usually represented as hexadecimal bytes) of x86 assembly for searching, you should take into account that many x86 instructions have 2 or more possible encodings. For example in 32-bit x86 <code>mov ax,bx</code> can be encoded in the following ways: <code>66 89 d8</code> (<code>mov r/m16,r16</code>) or <code>66 8b c3</code> (<code>mov r16,r/m16</code>).</span>",
                    "time": null
                }
            ]
        }
    ]
}