{
    "title": "Decoding CalibrationL6.dll",
    "link": "https://reverseengineering.stackexchange.com/questions/31554/decoding-calibrationl6-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am having problems with a dll, it is called CalibrationL6.dll, I have been able to see the code inside, and the function that interests me is this:</p>\n<pre><code>public static int CalculateCoefficients(\n          int[] coefficients,\n          out int negCoeffs,\n          int numPoints,\n          int selCoeffs,\n          int CalType,\n          double[] bridgeRaw,\n          double[] bridgeDesired,\n          double[] tempRaw,\n          double[] tempDesired)\n        {\n            CalData data = new CalData();\n            Vector&lt;CalPoint&gt; calPoints = (Vector&lt;CalPoint&gt;)data.calPoints;\n            LMCallbacks callbacks = new LMCallbacks();\n            lm_control_type control = new lm_control_type();\n            int index1 = 0;\n            negCoeffs = 0;\n            if (0 &lt; numPoints)\n            {\n                do\n                {\n                    bridgeRaw[index1] = (double)Program.TwosComplementToDecimal((int)bridgeRaw[index1]);\n                    tempRaw[index1] = (double)Program.TwosComplementToDecimal((int)tempRaw[index1]);\n                    ++index1;\n                }\n                while (index1 &lt; numPoints);\n            }\n            int index2 = 0;\n            if (0 &lt; numPoints)\n            {\n                do\n                {\n                    if (tempRaw != null &amp;&amp; tempDesired != null)\n                    {\n                        CalPoint calPoint;\n                        calPoint.rawB = bridgeRaw[index2];\n                        calPoint.bridge = bridgeDesired[index2];\n                        calPoint.temp = tempDesired[index2];\n                        calPoint.rawT = tempRaw[index2];\n                        calPoints.Add(calPoint);\n                    }\n                    else\n                    {\n                        CalPoint calPoint;\n                        calPoint.rawB = bridgeRaw[index2];\n                        calPoint.bridge = bridgeDesired[index2];\n                        calPoint.temp = 2000.0;\n                        calPoint.rawT = 2000.0;\n                        calPoints.Add(calPoint);\n                    }\n                    ++index2;\n                }\n                while (index2 &lt; numPoints);\n            }\n            data.CalType = CalType;\n            data.CO_CAL = selCoeffs;\n            Map&lt;double, double&gt; map = new Map&lt;double, double&gt;();\n            List&lt;CalPoint&gt;.Enumerator enumerator1 = calPoints.GetEnumerator();\n            if (enumerator1.MoveNext())\n            {\n                do\n                {\n                    CalPoint current = enumerator1.Current;\n                    double key = Math.Truncate(current.temp * 10.0) / 10.0;\n                    Dictionary&lt;double, double&gt;.Enumerator enumerator2 = map.GetEnumerator();\n                    if (enumerator2.MoveNext())\n                    {\n                        while (Math.Abs(Map&lt;double, double&gt;.Key((ValueType)enumerator2.Current) - key) &gt;= 0.1)\n                        {\n                            if (!enumerator2.MoveNext())\n                                goto label_11;\n                        }\n                        goto label_12;\n                    }\n                label_11:\n                    map[key] = current.rawT;\n                label_12:;\n                }\n                while (enumerator1.MoveNext());\n            }\n            if (map.Size &lt; 3)\n                data.CO_CAL &amp;= -561;\n            if (map.Size &lt; 2)\n                data.CO_CAL &amp;= -269;\n            double[] par = new double[10];\n            par[0] = 0.0;\n            data.cos[0] = 0.0;\n            data.cos[1] = 65536.0;\n            data.cos[2] = 0.0;\n            data.cos[3] = 0.0;\n            data.cos[4] = 0.0;\n            data.cos[5] = 0.0;\n            data.cos[6] = 0.0;\n            data.cos[7] = 0.0;\n            data.cos[8] = 32768.0;\n            data.cos[9] = 0.0;\n            data.zero_point = 8388608.0;\n            int[] numArray = new int[4] { 2, 4, 6, 7 };\n            int num = 0;\n            do\n            {\n                data.CalType = CalType;\n                int index3 = 0;\n                do\n                {\n                    int n_par = 0;\n                    int index4 = 0;\n                    if (0 &lt; numArray[index3])\n                    {\n                        do\n                        {\n                            if ((data.CO_CAL &gt;&gt; index4 &amp; 1) != 0)\n                            {\n                                par[n_par] = data.cos[index4];\n                                ++n_par;\n                            }\n                            else\n                                data.cos[index4] = (double)coefficients[index4];\n                            ++index4;\n                        }\n                        while (index4 &lt; numArray[index3]);\n                    }\n                    data.calcTo = numArray[index3];\n                    control.Initialize();\n                    //&lt; Module &gt;.lm_minimize(((Vector&lt;CalPoint&gt;)calPoints).Size, n_par, par, (ILMCallbacks)callbacks, (lm_data_type)data, control);\n                    int index5 = 0;\n                    int index6 = 0;\n                    if (0 &lt; numArray[index3])\n                    {\n                        do\n                        {\n                            if ((data.CO_CAL &gt;&gt; index6 &amp; 1) != 0)\n                            {\n                                data.cos[index6] = par[index5];\n                                ++index5;\n                            }\n                            ++index6;\n                        }\n                        while (index6 &lt; numArray[index3]);\n                    }\n                    ++index3;\n                }\n                while (index3 &lt; 4);\n                data.CalType = 2;\n                int n_par1 = 0;\n                int index7 = 7;\n                do\n                {\n                    if ((data.CO_CAL &gt;&gt; index7 &amp; 1) != 0)\n                    {\n                        par[n_par1] = data.cos[index7];\n                        ++n_par1;\n                    }\n                    else\n                        data.cos[index7] = (double)coefficients[index7];\n                    ++index7;\n                }\n                while (index7 &lt;= 9);\n                control.Initialize();\n                //&lt; Module &gt;.lm_minimize(((Vector&lt;CalPoint&gt;)calPoints).Size, n_par1, par, (ILMCallbacks)callbacks, (lm_data_type)data, control);\n                int index8 = 0;\n                int index9 = 7;\n                do\n                {\n                    if ((data.CO_CAL &gt;&gt; index9 &amp; 1) != 0)\n                    {\n                        data.cos[index9] = par[index8];\n                        ++index8;\n                    }\n                    ++index9;\n                }\n                while (index9 &lt;= 9);\n                int index10 = 0;\n                do\n                {\n                    coefficients[index10] = (int)data.cos[index10];\n                    ++index10;\n                }\n                while (index10 &lt; 10);\n                int coefficient = coefficients[6];\n                if (coefficient &lt; 0)\n                {\n                    if (coefficient &lt; -8388607)\n                    {\n                        coefficients[6] = -8388607;\n                        data.CO_CAL &amp;= -65;\n                        data.cos[6] = 0.0;\n                    }\n                    else\n                        break;\n                }\n                else if (coefficient &gt; 536870911)\n                {\n                    coefficients[6] = 33554431;\n                    data.CO_CAL &amp;= -65;\n                }\n                else\n                    break;\n                ++num;\n            }\n            while (num &lt; 2);\n            if (coefficients[0] &lt; 0)\n                negCoeffs |= 64;\n            if (coefficients[7] &lt; 0)\n                negCoeffs |= 128;\n            if (coefficients[9] &lt; 0)\n                negCoeffs |= 8;\n            if (coefficients[4] &lt; 0)\n                negCoeffs |= 2;\n            if (coefficients[5] &lt; 0)\n                negCoeffs |= 4;\n            if (coefficients[3] &lt; 0)\n                negCoeffs |= 16;\n            if (coefficients[2] &lt; 0)\n                negCoeffs |= 32;\n            return 0;\n\n        }\n</code></pre>\n<p>But I have problems with a function and a class that is:</p>\n<pre><code>&lt; Module &gt;.lm_minimize(((Vector&lt;CalPoint&gt;)calPoints).Size, n_par1, par, (ILMCallbacks)callbacks, (lm_data_type)data, control);\n\n</code></pre>\n<p>I can't find the class  and I don't know what it refers to... it would be very useful if you can help me find a solution...</p>\n<p>Thanks</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "89",
    "tags": [
        "dll",
        "c#"
    ],
    "user": "raulelerma",
    "time": "Feb 15, 2023 at 18:23",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">Which decompiler are you using? I'd guess worst case you can do an export-all-sources and grep them for lm_minimize. I'd think most tools would let you double-click on lm_minimize and it'll take you to the definition though.</span>",
            "time": null
        },
        {
            "user": "raulelerma",
            "text": "<span class=\"comment-copy\">Yes i can check lm_minimize function but it has unreadable code (hexadecimal, binary, etc.) i used two decompilers.. JetBrains dotPeek and Telerik JustDecompile</span>",
            "time": null
        },
        {
            "user": "Gu Rocky",
            "text": "<span class=\"comment-copy\">Could you provide the dll? I would like to try it.</span>",
            "time": null
        }
    ],
    "answers_data": []
}