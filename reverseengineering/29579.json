{
    "title": "Analyze Arm Linux CPP binary in Ida Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/29579/analyze-arm-linux-cpp-binary-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tried to open CPP binary with Ida. Most of the code analyze well .</p>\n<p>The problem is that there are lot of vtables(Ida doesn't recognize them as vtables) that I need to reach them manually and press<kbd>O</kbd> (offset) so Ida will analyze the functions that all the fields in vtable point on them.</p>\n<p>In addition,the first function in Vtable is constructor ,and in that constructor we can see the vtable that this vtable inherits from.\nIda didn't analyze the \"father\" vtable.</p>\n<p>How can I fix this/or is there a script that do it as well to CPP Aem  binary</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "484",
    "tags": [
        "ida",
        "c++",
        "idapython",
        "ida-plugin",
        "vtables"
    ],
    "user": "yfr24493AzzrggAcom",
    "time": "Nov 20, 2021 at 23:17",
    "comments": [
        {
            "user": "R4444",
            "text": "<span class=\"comment-copy\">do you need to find virtual functions or build class hierarchy?</span>",
            "time": null
        },
        {
            "user": "yfr24493AzzrggAcom",
            "text": "<span class=\"comment-copy\">@R4444 both of them. But 1 of those will be good :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>as you mentioned in comments, you need to build class hierarchy or find vtables. Following are some projects that I know will help you in achieving what you would like.</p>\n<ol>\n<li><p>classinformer - <a href=\"https://sourceforge.net/projects/classinformer/\" rel=\"nofollow noreferrer\">https://sourceforge.net/projects/classinformer/</a></p>\n</li>\n<li><p>Classy - <a href=\"https://github.com/RicBent/Classy\" rel=\"nofollow noreferrer\">https://github.com/RicBent/Classy</a></p>\n</li>\n<li><p>Hexpytools - <a href=\"https://github.com/igogo-x86/HexRaysPyTools\" rel=\"nofollow noreferrer\">https://github.com/igogo-x86/HexRaysPyTools</a></p>\n</li>\n<li><p>Also look @ this exellent publication, but their code base is not open sourced - <a href=\"https://dl.acm.org/doi/pdf/10.1145/3321705.3329833\" rel=\"nofollow noreferrer\">https://dl.acm.org/doi/pdf/10.1145/3321705.3329833</a> (last time I asked them, they told me that they are planning to do so shortly)</p>\n</li>\n</ol>\n<p>Their paper is interesting to look at, as it explains how to recover such structures. Typically, you need, vtable entries, vtable structures, class constructor and destructor analysis and object flow analysis to build the desired hierarchy.</p>\n</div>",
            "votes": "1",
            "user": "R4444",
            "time": "Nov 21, 2021 at 0:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}