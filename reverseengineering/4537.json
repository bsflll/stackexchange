{
    "title": "native function naming convention in Qt for Android",
    "link": "https://reverseengineering.stackexchange.com/questions/4537/native-function-naming-convention-in-qt-for-android",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In a project, I cannot find the names of native functions in the .so libraries.\nThat is, a native function must be called something like <code>Java_com_package_ClassName_functionName()</code>. I do find <em>functionName</em> in the .so libraries, but either without the <code>Java_com_package_ClassName_</code> prefix, or wrapped into a mangled C++ name.</p>\n<p>So:</p>\n<ol>\n<li><p>Does Qt (Necessitas) use a special naming convention?</p></li>\n<li><p>If yes, how it is done?</p></li>\n<li><p>If no, what is going on?</p></li>\n</ol>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "414",
    "tags": [
        "android",
        "qt",
        "dalvik"
    ],
    "user": "18446744073709551615",
    "time": "Jun 5, 2014 at 9:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The naming conventions for JNI functions are given by the Dalvik VM, a library couldn't change them and expect them to work, i.e. be callable from the Java part of the application. But, the Java_package_function convention is only needed for functions that Java wants to call, it it not neccesary for a <code>C/C++</code> function calling another one. </p>\n<p>If you compile</p>\n<pre><code>jint Java_com_example_foo(JNIEnv*  env, jobject  this) { return bar(); }\nint bar() { return 3; }\n</code></pre>\n<p>into a library, you can call <code>Java_com_example_foo</code> from java, and you won't be able to call <code>bar</code> from java, but nothing prevents <code>Java_com_example_foo</code> from calling <code>bar</code>.</p>\n<p>So, there are 2 possibilities that come to mind:</p>\n<ol>\n<li>the Java part is nothing but a stub that calls a <code>main</code> function in one library, and all the rest is done in <code>C</code> or <code>C++</code>. This <code>main</code> function probably will be called <code>Java_package_function</code>, not <code>main</code>, but it's the only function that uses this naming convention.</li>\n<li>There's another wrapper library which provides the <code>Java_package_function</code> JNI API calls to the Java part, and calls the C/C++ functions which it imports from a different library. This library would probably be very small, so you might not have considered it interesting, and missed it in your previous analysis.</li>\n</ol>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jun 5, 2014 at 11:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}