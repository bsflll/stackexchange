{
    "title": "Which ARM command is influencing the SP position?",
    "link": "https://reverseengineering.stackexchange.com/questions/18681/which-arm-command-is-influencing-the-sp-position",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I do static analysis of ARM assembly code (I can't debug it).</p>\n<p>When I look on argument that in <code>SP+0x&lt;SomeOffset&gt;</code> I can find what I'm looking for, but if I look a few lines further down I see that this argument is not there.</p>\n<p>Which ARM, command is influencing the stack pointer (SP) position?</p>\n<p>I don't see any add/sub to <code>SP</code>, the only commands that I see is <code>ldr</code> and <code>str</code> from <code>SP</code> and to <code>SP</code> +function <code>BL</code> that not touch on this argument.</p>\n<p>I think that even I call to function, when I finish it the <code>SP</code> need to be same,  and store to <code>SP+offset</code> or load from <code>SP+offset</code> don't need to change the <code>SP</code>.</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "721",
    "tags": [
        "arm",
        "stack",
        "pointer",
        "offset"
    ],
    "user": "pointers",
    "time": "Jul 4, 2018 at 13:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no specific stack pointer register in ARM. By convention <code>R13</code> is used as the stack pointer. There is no specific push and pop style stack pointer operands either. </p>\n<p>Pushing and popping from the stack is carried out using the <code>STM</code> (store to memory) and <code>LDM</code> (load from memory) operands. These operands can be modified with the post fixes <code>IA</code> and <code>DB</code>. <code>IA</code> is increment after, and <code>DB</code> is decrement before.</p>\n<p>So <code>STMDB</code> means store to memory, decrementing before the store. I.e. pushing on to a full descending stack. The inverse of this would be <code>LDMIA</code> which is popping from a full descending stack.</p>\n<p>Alternatively you can have <code>STMIA</code> and <code>LDMDB</code> which means pushing and popping on to and off of an empty ascending stack.</p>\n<p><code>FD</code> is the synonym for full descending and <code>EA</code> is the synonym for empty ascending. So <code>STMDB</code> and <code>STMFD</code> are the same. <code>LDMIA</code>, <code>LDMFD</code> are the same. And so on...</p>\n<p>So a full instruction would be for example...</p>\n<pre><code>STMDB R13!, {R0 - R3}\n</code></pre>\n<p>Which means push <code>R0</code>, then <code>R1</code>, then <code>R2</code> and then <code>R3</code> on to a full descending stack using <code>R13</code> as the stack point. The address being written too is updated for each registered pushed. The <code>!</code> means write back and means that <code>R13</code> is updated with the final address so it can be used again.</p>\n<p><code>BL</code> (branch with link) does NOT affect the stack or the stack pointer. It merely copies the current <code>PC</code> (<code>R15</code>) in to link (<code>R14</code>) before the jump. A simple...</p>\n<pre><code>MOV R14, R15\n</code></pre>\n<p>... will return you back to the original address. However many may pop link straight in to PC at the end of a subroutine. For example...</p>\n<pre><code>.my_sub_routine\nSTMFD R13!, {R0, R1, R14}\n// Do stuff\nLDMFD R13!, {R0, R1, R15} // pop link straight in to PC meaning return.\n</code></pre>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jul 4, 2018 at 13:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">in fact the newer ARM architectures do standardize R13 as SP, and STMFD/ LDMFD  instructions using it as PUSH/POP.</span>",
                    "time": null
                },
                {
                    "user": "cooperised",
                    "text": "<span class=\"comment-copy\">Moreover on most of the Cortex series cores, R13 (or SP) is an alias for one of two hardware-managed stack pointers, MSP or PSP, depending on mode and settings.  Things like interrupt requests cause automatic pushes to the active stack too.  R13 is very much a stack pointer on modern(ish) ARM architectures, and not just by convention.</span>",
                    "time": null
                }
            ]
        }
    ]
}