{
    "title": "Hybrid binary analysis tool",
    "link": "https://reverseengineering.stackexchange.com/questions/18949/hybrid-binary-analysis-tool",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an idea to merge static and dynamic analysis into a visualization through the IDA python scripting interface.  The concept involves automatically setting breakpoints at each function or basic block (configurable), automatically stepping through them while capturing the trace data at each point, and then presenting the program flow through a modified graph view.  Perhaps even capturing diffs when alternate control flow paths are taken.</p>\n<p>I'm not aware of any tools that currently do this but it seems like it could be highly useful in complex or obfuscated programs.  Thoughts, issues, or comments?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "343",
    "tags": [
        "tools",
        "static-analysis",
        "dynamic-analysis"
    ],
    "user": "Shawn",
    "time": "Jul 31, 2018 at 19:20",
    "comments": [
        {
            "user": "user22363",
            "text": "<span class=\"comment-copy\">From what I understand you want to do dynamic analysis to binary using emulator and add the result to static analysis result to enhance it (e.g.⁯ IDA static analysis) and because obfuscated programs may mislead the reverse engineer who use static analysis way most times this method will eliminate those tricks by add the result from the true executed binary in memory to static analysis result, and you can diff the two both assembly and graph, It seems Dynamic Binary Instrumentation can do that but why not use unicorn-engine to do that and add the result to IDA static analysis.</span>",
            "time": null
        },
        {
            "user": "user22363",
            "text": "<span class=\"comment-copy\"><a href=\"https://github.com/deresz/funcap\" rel=\"nofollow noreferrer\">github.com/deresz/funcap</a> It seems very similar to what you want, more info about this plugin <a href=\"https://recon.cx/2014/slides/FunCap.pdf\" rel=\"nofollow noreferrer\">recon.cx/2014/slides/FunCap.pdf</a> &amp; <a href=\"https://www.hex-rays.com/contests/2013/index.shtml#funcap\" rel=\"nofollow noreferrer\">hex-rays.com/contests/2013/index.shtml#funcap</a>   from the slide <code>Funcap – features (2) Builds a runtime call graph</code>     |   <a href=\"https://github.com/cseagle/sk3wldbg\" rel=\"nofollow noreferrer\">github.com/cseagle/sk3wldbg</a> Debugger plugin for IDA Pro backed by the Unicorn Engine   |   <a href=\"https://github.com/36hours/idaemu\" rel=\"nofollow noreferrer\">github.com/36hours/idaemu</a> idaemu is an IDA Pro Plugin - use for emulating code in IDA Pro.</span>",
            "time": null
        },
        {
            "user": "Shawn",
            "text": "<span class=\"comment-copy\">Yes, Dynamic Binary Instrumentation is where I'm looking at now.  Funcap looks interesting, thanks. I think what I'm thinking about is a time-series view of a program being executed with API calls and function execution (in order) lined up. Previously, I was thinking about using IDA to extract the info from the debugger through scripting, but now I think that leveraging PIN or DynamoRIO would be far better. I'm thinking that the display I'm considering may need to be external to IDA. Grouping the DLL call series and the function call graph with: <a href=\"https://bl.ocks.org/cosmiclattes/6976316\" rel=\"nofollow noreferrer\">bl.ocks.org/cosmiclattes/6976316</a></span>",
            "time": null
        },
        {
            "user": "user22363",
            "text": "<span class=\"comment-copy\">I recommend you use PIN for Dynamic Binary Instrumentation + graphviz for visualization, also if you want Trace differences, like see the execution path your program took and look at the differences between two different executions you can use PIN + IDA look here <a href=\"https://doar-e.github.io/blog/2013/08/31/some-thoughts-about-code-coverage-measurement-with-pin/#trace-differences\" rel=\"nofollow noreferrer\">doar-e.github.io/blog/2013/08/31/…</a></span>",
            "time": null
        },
        {
            "user": "Shawn",
            "text": "<span class=\"comment-copy\">I haven't worked with PIN before and I was hitting some build issues on my Linux VM yesterday.  Still working through setup issues, likely associated with gcc.  For the moment I have to go outside of IDA due to demo license restrictions.  Looking for something a little more interactive than graphviz.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The basic idea is not new and has been done several times before.</p>\n<p>Probably the first working tool was <a href=\"http://www.woodmann.com/collaborative/tools/index.php/Process_Stalker\" rel=\"nofollow noreferrer\">Process Stalker</a> by Pedram Amini. </p>\n<p>IDA also has its own little-known tracing feature which can use any of the available debugging backends including PIN (somewhat outdated post about it is <a href=\"http://www.hexblog.com/?p=669\" rel=\"nofollow noreferrer\">here</a>). </p>\n<p>One of the recent newcomers is <a href=\"https://github.com/gaasedelen/lighthouse\" rel=\"nofollow noreferrer\">Lighthouse</a> which looks pretty nice. </p>\n<p>You can even do some of what you describe with Cheat Engine and I’m sure there are many other tools I haven’t heard about. </p>\n<p>However, there is always room for innovation remaining, so don’t let this stop you from making your own if you can’t quite find what you need. </p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jul 31, 2018 at 20:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Shawn",
                    "text": "<span class=\"comment-copy\">Wow, Lighthouse looks great!  I'm going to play with these tools and think on this topic some more to see what improvements are possible.  Thank you.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">check also <a href=\"http://vizsec.org/files/2009/Quist.pdf\" rel=\"nofollow noreferrer\">this old paper</a> for some pretty pictures</span>",
                    "time": null
                },
                {
                    "user": "Shawn",
                    "text": "<span class=\"comment-copy\">Yep, I'm familiar w/ this work.</span>",
                    "time": null
                },
                {
                    "user": "Shawn",
                    "text": "<span class=\"comment-copy\">Here's an evolving concept.  A web-based front-end (with potential future integration w/ IDA) with a sliding time-scale (such as: <a href=\"https://bl.ocks.org/cosmiclattes/6976316\" rel=\"nofollow noreferrer\">bl.ocks.org/cosmiclattes/6976316</a>) showing the DLL call stack heirarchy at each point in time while mapping to a function call graph showing node activity at the corresponding time.  A time-series view of this information might be interesting...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems what you're describing is, or at least very similar to, Dynamic Binary Instrumentation and there are a bunch of tools that do that. <a href=\"http://www.dynamorio.org/\" rel=\"nofollow noreferrer\">DynamoRIO</a>, <a href=\"https://frida.re/\" rel=\"nofollow noreferrer\">frida</a> and <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow noreferrer\">Pin tool</a> are three widely known tools that do just that.</p>\n<p>If you'll be willing to use static instrumentation, <a href=\"http://angr.io/\" rel=\"nofollow noreferrer\">angr</a> is another great option.</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Aug 31, 2018 at 1:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Shawn",
                    "text": "<span class=\"comment-copy\">It does seem like part of what i'm imagining has been done.  Groovy.  I could be wrong (I haven't played with those tools much, admittedly), but I didn't think that they provide a way to visualize the data flow down to the basic block level.  Just text?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">You're probably right about visualization. I don't think that's where the majority of effort will be with such a tool, though. You should consider adding your desired visualizations to one of the existing tools (preferably with an easily extendable interface?).</span>",
                    "time": null
                },
                {
                    "user": "Shawn",
                    "text": "<span class=\"comment-copy\">Thanks for your thoughts.  I agree, visualizations aren't sexy so that's not where the majority of effort would be.  I was thinking about a tie-in w/ IDA.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Some of those tools has <i>some</i> IDA integrations/plugins. I'm sure they'll appreciate any contribution.</span>",
                    "time": null
                }
            ]
        }
    ]
}