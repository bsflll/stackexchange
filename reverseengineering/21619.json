{
    "title": "Why have two symbols tables?",
    "link": "https://reverseengineering.stackexchange.com/questions/21619/why-have-two-symbols-tables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Why have two symbol tables if <code>.symtab</code> already contains everything that's in <code>.dynsym</code> ?</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "5k",
    "tags": [
        "linux",
        "elf"
    ],
    "user": "fica",
    "time": "Jul 5, 2019 at 20:07",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">AFAIR one is for debug symbols the other for the dynamic linker, but I'd have to read up on it. Perhaps someone else will be faster to answer, though.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The short answer is that the <code>.dynsym</code> table is used by the dynamic linker (also referred to as the runtime loader or RTLD) at program load time to determine which DLLs to map into the address space of the program being loaded into memory. As a result, the <code>.dynsym</code> <em>section</em> is mapped to a loadable <em>segment</em> (specifically, the <code>text</code> segment) and therefore included in the runtime process image in virtual memory when the kernel loads the program segments. As a reflection of this, the Sys V ABI actually requires the <em>dynamic linking array</em> to contain a dynamic symbol hash table, a string table for symbols and library names, and the dynamic symbol table.</p>\n<p>On the other hand, the <code>.symtab</code> section is not needed for process creation, is not mapped to a loadable segment and therefore is not loaded into memory when the program is executed, and so can be removed, along with section information.</p>\n<p>Dynamic linking and its requirements are discussed in much greater detail in the following articles:</p>\n<ul>\n<li><p><a href=\"http://www.muppetlabs.com/~breadbox/software/tiny/somewhat.html\" rel=\"noreferrer\">A Whirlwind Tutorial on Creating Somewhat Teensy ELF Executables for Linux (or, \"Okay Maybe Size Isn't Quite Everything\")</a></p>\n<p>Here the author set about creating the smallest possible dynamically-linked ELF binary, which contains only that which is required for the program to successfully  load and execute. </p></li>\n<li><p><a href=\"https://grugq.github.io/docs/subversiveld.pdf\" rel=\"noreferrer\">Cheating the ELF</a></p>\n<p>The process of dynamic linking and its requirements are discussed in order to explain how it is possible for code inserted into a code cave to make calls to library functions.</p></li>\n<li><p><a href=\"http://michalmalik.github.io/elf-dynamic-segment-struggles\" rel=\"noreferrer\">ELF: dynamic struggles</a></p>\n<p>Process creation via cooperation between the kernel and dynamic linker is explored using r2 and binaries that have had all section information removed via <code>sstrip</code>.</p></li>\n</ul>\n<p>For more information, see chapter 5 of the Sys V ABI - \"Program Loading and Dynamic Linking\", as well as the LWN article <a href=\"https://lwn.net/Articles/631631/\" rel=\"noreferrer\">How programs get run: ELF binaries\n</a>. </p>\n</div>",
            "votes": "7",
            "user": "julian",
            "time": "Jul 6, 2019 at 4:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}