{
    "title": "Finding call trace of a crashing executable with anti-debugging techniques",
    "link": "https://reverseengineering.stackexchange.com/questions/23465/finding-call-trace-of-a-crashing-executable-with-anti-debugging-techniques",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The application I target has terribly annoying anti-debugging techniques. With x32dbg and ScyllaHide with the following configuration, the application exits immediately as soon as a breakpoint is hit, whether it is a software or hardware breakpoint.</p>\n<p>The following are my settings:</p>\n<p><a href=\"https://i.sstatic.net/5tUkQ.png\" rel=\"nofollow noreferrer\"><img alt=\"ScyllaHide settings\" src=\"https://i.sstatic.net/5tUkQ.png\"/></a></p>\n<p>A VEH debugger (I tried Cheat Engine) catches the exception. However, when it catches the exception, the Cheat Engine debugger shows the call stack as \"empty\" with a single setting showing 0x00000000 as the return address, so it's useless. However the exception code is 0xC0000005 so I know it's access violation.</p>\n<p>What other anti-anti-debugging techniques can I use to get past the mechanism where the application crashes when a breakpoint gets hit?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "916",
    "tags": [
        "anti-debugging"
    ],
    "user": "shavit",
    "time": "Mar 18, 2020 at 19:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use JIT framework such as intel PIN to inspect the program with greater granularity. Then you can find the exact mechanism responsible for this, including finding the real call history, used to detect the breakpoint and crash the program</p>\n</div>",
            "votes": "1",
            "user": "MkInitCpIO",
            "time": "Mar 21, 2020 at 16:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Edit: Since this is about when the breakpoint is hit.</p>\n<p>The kernel guarantees the debugger a chance to handle exceptions (e.g. breakpoint exceptions) before letting the debuggee handle them. Are you sure that the debugger is actually attached when the breakpoint is hit?</p>\n<p>An exception to what I stated above is that if ThreadHideFromDebugger is used, then the kernel will skip sending the exception to the debugger. That could be what's happening. It's a common technique used in anti-RE in games. </p>\n<p>You may see a crash log in Event Viewer with a breakpoint exception (0x80000003), but only if the debuggee doesn't have registered exception handlers that swallow the exception and then exit.</p>\n</div>",
            "votes": "1",
            "user": "P. Private",
            "time": "Mar 21, 2020 at 22:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "shavit",
                    "text": "<span class=\"comment-copy\">I injected a DLL to the app and placed a detour on <code>NtSetInformationThread</code>, seems like it is being set with 0x11. Upon further investigating seems like it is caused by Themida (the sample was protected with it). I was able to debug by preventing <code>NtSetInformationThread</code> as well as replacing several functions such as <code>DbgUiRemoteBreakin</code> and <code>DbgUiBreakPoint</code> with the original implementations, but then Themida itself seems to crash the sample and exit it abruptly.</span>",
                    "time": null
                }
            ]
        }
    ]
}