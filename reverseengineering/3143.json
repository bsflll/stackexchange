{
    "title": "The debugger could not attach to the selected process",
    "link": "https://reverseengineering.stackexchange.com/questions/3143/the-debugger-could-not-attach-to-the-selected-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to debug an application which when opened, it will open a fork from it.</p>\n<p>e.g. program.exe will run 2 program.exe in the task manager</p>\n<p>the software is <a href=\"http://www.sqlmanager.net/products/studio/postgresql\" rel=\"nofollow\">EMS SQL Management Studio for PostgreSQL</a></p>\n<p>when I try to attach debugger to the first .exe file (trial Wizard) a Message Box shows as follows:</p>\n<blockquote>\n<p>The debugger could not attach the selected process. This can perhaps\n  indicate the process was just terminated, that you don't have the\n  necessary privileges..</p>\n</blockquote>\n<p>I can attach the debugeer to the second .exe (Main Program Window) file. But it is useless.</p>\n<p>I think my problem is that one of them is the parent process and the other is the child process. Can I know how to open the child process alone (maybe inspect arguments) so I can attach debugger to it.</p>\n<blockquote>\n<p>My Question: How can attach debugger to the application trial wizard??</p>\n<p>In case of debugger protection, can I break it or skip it to be able to debug or unpack?</p>\n</blockquote>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "5k",
    "tags": [
        "disassembly",
        "ida",
        "windows",
        "decompilation"
    ],
    "user": "Danyal",
    "time": "Jan 2, 2014 at 8:45",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">What is you final goal?</span>",
            "time": null
        },
        {
            "user": "Danyal",
            "text": "<span class=\"comment-copy\">I want to Unpack EMS SQL Management Studio for PostgreSQL</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>Depending on what you try to achieve, you can try to attach WinDbg in <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff552274%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">noninvasive mode</a>: F6 -&gt; select the process and select noninvasive mode down on left.</li>\n<li>Other suggestion is, <strong>to patch the executable on disk at the entery point</strong>, which you can locate for example by using <a href=\"http://www.ntcore.com/files/ExplorerSuite.exe\" rel=\"nofollow noreferrer\">CFF explorer</a> with the infinite jump : <strong>0xEB 0xFE</strong>. After you finish with the patch, just execute it and attach the debugger and restore the initial bytes back. You can continue from here to do what ever you want. As to bypassing debugger protection, there are plenty of plugins for debugger to help you: for OllyDbg - <a href=\"http://tuts4you.com/download.php?view.3392\" rel=\"nofollow noreferrer\">OllyExt</a>, <a href=\"http://code.google.com/p/aadp/\" rel=\"nofollow noreferrer\">aadp</a> and regarding <a href=\"https://reverseengineering.stackexchange.com/questions/2082/debugger-hiding-plugin-for-windbg\">Windbg</a></li>\n<li>If Tls calls are present (you can also check it using CFF explorer) which will be executed before the entery point code, you can patch them too, and try to attach debugger too.</li>\n</ol>\n<p>To debug child processes, you can use <a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx\" rel=\"nofollow noreferrer\">procmon</a> to inspect the whole flow and get the information regarding the parameter that the child processes are executed with. Or, you can breakpoint on CreateProcessA(W) or similar and go from there.</p>\n<p><a href=\"http://mh-nexus.de/en/hxd/\" rel=\"nofollow noreferrer\">HxD</a> could be used as a hex editor for the above.</p>\n</div>",
            "votes": "5",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Danyal",
                    "text": "<span class=\"comment-copy\">1. WinDBG cannot debug this exe as it says. 2. I found 0xEB 0xFE using CFF. now what? I disassembled it but it doesn't run</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">at the hex editor, you need to get to the entery point and there replace first 2 bytes with 0xeb 0xfe. After replacement, execute the file. Just save the original ones, to restore them once you are connected with the debugger.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It may have a form of protection from debugger attaching. Programs can call <code>IsDebuggerPresent</code> or have a different way of dealing with debugger detection. They usually pop up a fake \"error\" or immediately terminate.</p>\n<p>You could modify kernel32.dll (it has the debugger check function) and make it return false, but it's not usually a good idea to mess with system files.</p>\n</div>",
            "votes": "4",
            "user": "Discord",
            "time": "Dec 24, 2013 at 4:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Danyal",
                    "text": "<span class=\"comment-copy\">ok. Any way to bypass debugger protection</span>",
                    "time": null
                },
                {
                    "user": "Discord",
                    "text": "<span class=\"comment-copy\">Not much that I know of unfortunately.</span>",
                    "time": null
                }
            ]
        }
    ]
}