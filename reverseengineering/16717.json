{
    "title": "Why does this function calls offset move when I restart windows",
    "link": "https://reverseengineering.stackexchange.com/questions/16717/why-does-this-function-calls-offset-move-when-i-restart-windows",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Every time I restart windows it breaks the patch I've made to an executable where I've called a function from the dll user32.dll. Currently the offset for the function call resides at 0x76E3CDB4, but when I restart my computer it will change to some other address. Why is this and what can I do to make sure my assembly code will always call the function properly?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "161",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "winapi"
    ],
    "user": "user2462027",
    "time": "Nov 6, 2017 at 1:00",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">read about address space layout randomization aka aslr</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This may be due to Address Space Layout Randomization \naka ASLR (e.g. see <a href=\"https://www.symantec.com/avcenter/reference/Address_Space_Layout_Randomization.pdf\" rel=\"nofollow noreferrer\">this overview by Symantec</a>)</p>\n<p>System modules' load addresses are randomized on each boot and \nexecutable images' are randomized on each execution in OS &gt; Vista </p>\n<p>you can check that with some simple code like this </p>\n<pre><code>:\\&gt;cat aslr.cpp\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\nvoid main (void)\n{\n    HMODULE hMod = LoadLibraryA(\"user32.dll\");\n    if(hMod){\n        printf(\"My Load Addr\\t%p My user Addr\\t%p\\n\" , &amp;main,hMod);\n        FreeLibrary(hMod);\n    }\n}\n</code></pre>\n<p>compiled and executed the result as follows</p>\n<pre><code>:\\&gt;for /L %i in (1,1,10) do aslr.exe\n\n:\\&gt;aslr.exe\nMy Load Addr    00121000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    00031000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    00FB1000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    002F1000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    011B1000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    011B1000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    011B1000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    011B1000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    00181000 My user Addr   773A0000\n\n:\\&gt;aslr.exe\nMy Load Addr    01121000 My user Addr   773A0000\n</code></pre>\n<p>to be sure you patch right you should work with RVA (Relative Virtual Address) </p>\n<p>that is get the base of module every time and add a fixed offset that you determined earlier every time </p>\n<p>suppose you patched @ 0x12345678 and when you patched the module was loaded at 0x10000000  then you have a difference of 0x2345678 </p>\n<p>next time if the module was loaded at 0x20000000 you use the address 0x20000000+0x2345678 == 0x22345678</p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Nov 6, 2017 at 18:12",
            "is_accepted": true,
            "comments": []
        }
    ]
}