{
    "title": "How this Float “4-bytes” is converted to Short_signed “2-bytes”?",
    "link": "https://reverseengineering.stackexchange.com/questions/24991/how-this-float-4-bytes-is-converted-to-short-signed-2-bytes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://i.sstatic.net/imguT.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/imguT.png\"/></a></p>\n<p>Hi, please help me on this problem, I don't understand how this Float \"4-bytes\" or IEEE 754 floating point, is converted to short_signed \"2-bytes\".</p>\n<p>First, I convert the float \"4-bytes\" hexadecimal to float decimal, then I convert this float decimal to hexadecimal again. and I get the short_signed result.</p>\n<p>But the problem when I put the normals or UVs, I get always 0.xxxx when I convert this 0.xxxx to hexadecimal doesn't give the result like the short_signed in the image or excel file.</p>\n<p>Here is the website to convert hexadecimal to IEEE 754: <a href=\"https://gregstoll.com/~gregstoll/floattohex/\" rel=\"nofollow noreferrer\">https://gregstoll.com/~gregstoll/floattohex/</a> (check swap endianness) and the website to convert decimal to hexadecimal: <a href=\"https://www.rapidtables.com/convert/number/decimal-to-hex.html\" rel=\"nofollow noreferrer\">https://www.rapidtables.com/convert/number/decimal-to-hex.html</a></p>\n<p>Here is the full Float 4-bytes to Short_signed 2-bytes excel file for results: <a href=\"https://drive.google.com/open?id=1oKxVuqFVcVX3NEGLwzFvsZqXos1PwYIA\" rel=\"nofollow noreferrer\">https://drive.google.com/open?id=1oKxVuqFVcVX3NEGLwzFvsZqXos1PwYIA</a></p>\n<p>Thanks in advance.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "583",
    "tags": [
        "hexadecimal",
        "float"
    ],
    "user": "Segal",
    "time": "May 12, 2020 at 15:23",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">I might be missing the point but how does it relate to RE?</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">\"First, I convert the float \"4-bytes\" hexadecimal to float decimal, then I convert this float decimal to hexadecimal again. and I get the short_signed result.\" That makes no sense. Add how exactly you are 'converting'.</span>",
            "time": null
        },
        {
            "user": "Segal",
            "text": "<span class=\"comment-copy\">1- Copy \"4-bytes\" hex from excel file. 2- Paste it into hex value in: <a href=\"https://gregstoll.com/~gregstoll/floattohex/\" rel=\"nofollow noreferrer\">gregstoll.com/~gregstoll/floattohex</a> 3- Check swap endianness. 4- Click on convert to float. 5- Copy the float value. 6- Paste it into decimal number in: <a href=\"https://www.rapidtables.com/convert/number/decimal-to-hex.html\" rel=\"nofollow noreferrer\">rapidtables.com/convert/number/decimal-to-hex.html</a> 7- Click on convert. 8- And you get the \"2-bytes\" hex like in excel file.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>One word, precision</strong></p>\n<p>By definition, a normal is a vector with a length of 1.0f which means that each component of the vector will always fall between -1.0f and +1.0f, and UV are texture coordinates expressed in a range between 0 and +1.0f.</p>\n<p>The number of possible states that you can represent with this range of numbers is huge and even exceeds the total number of states in a singed short. So if you want to retain the greatest precision possible, you need to scale the value by the maximum value of a singed short.</p>\n<p>Therefore, to obtain the correct results, you need to multiply by 32767 and then round it to the nearest integer (if it's a texture coordinate) or truncate it (if it's a normal). The rounding and truncating are just some observations I made when converting the values myself.</p>\n<p>Example normal (using the 9th row):<br/>\nX: 0x96DE = -26914 = truncate(-0.821400702 * 32767 = truncate(-26914.836802434)<br/>\nY: 0x3E17 = 13847 = truncate(0.422606796026 * 32767) = truncate(13847.556885383942)<br/>\nZ: 0xCEFA = -12250 = truncate(-0.383020102978 * 32767) = truncate(-12550.419714280126)<br/></p>\n<p>Example UV (using the 1st row):<br/>\nX: 0x64FD = 25853 = round(0.788999974728 * 32767) = round(25853.162171912376)<br/>\nY: 0x5D49 = 23881 = round(0.72879999876 * 32767) = round(23880.58955936892)</p>\n</div>",
            "votes": "1",
            "user": "Jerry Hundric",
            "time": "May 13, 2020 at 12:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}