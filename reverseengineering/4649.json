{
    "title": "Has XOR EAX, EBX another purpose?",
    "link": "https://reverseengineering.stackexchange.com/questions/4649/has-xor-eax-ebx-another-purpose",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following line in an assembler code:</p>\n<pre><code> XOR EAX, EBX\n</code></pre>\n<p>So, then I've searched a little bit and found out that XOR represents a \"swap algorithm\". You can read it here: <a href=\"http://en.wikipedia.org/wiki/XOR_swap_algorithm\" rel=\"nofollow\">http://en.wikipedia.org/wiki/XOR_swap_algorithm</a></p>\n<p>But when I look in register window of ollydbg, then I have the following </p>\n<pre><code> EAX = 00000068\n EBX = 0000003B\n</code></pre>\n<p>Now, after the line the register window says</p>\n<pre><code>EAX = 000000053\nEBX = 0000003B\n</code></pre>\n<p>But from that what I have read in wikipedia article I would expect the following</p>\n<pre><code>EAX = 0000003B\nEBX = 00000053\n</code></pre>\n<p>At the end, i can say that a normal XOR operation is performed because:</p>\n<pre><code>0111011   =&gt;EAX=0000003B \n1101000   =&gt;EBX=00000068\n-------\n1010011   =&gt;EAX=00000053\n</code></pre>\n<p>So my question would be why the swap algorithm is not performed. Or in other words: When can I expect the swap algorithm?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "6k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Jun 20, 2014 at 14:44",
    "comments": [
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\">the instruction for swapping data is <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_328.html\" rel=\"nofollow noreferrer\"><code>xchg</code></a>, not <code>xor</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As the first answer states, XOR is a bitewise XOR, not an XOR swap. </p>\n<p>To do the Xor swap that you referenced from wikipedia it takes <em>3 instructions</em> : </p>\n<pre><code>xor eax, ebx\nxor ebx, eax\nxor eax, ebx\n</code></pre>\n<p>Since you asked about the <em>purpose</em> of XOR I thought I would include some other concepts for you to read up on, so you might have an idea of what to expect from XORs</p>\n<p>You can use XOR to clear a register: </p>\n<pre><code>xor eax,eax\n</code></pre>\n<p>Calculate absolute value: </p>\n<pre><code>cdq\nxor eax,edx\nsub eax,edx\n</code></pre>\n<p>XORs can be used for Crypto:\n<a href=\"http://en.wikipedia.org/wiki/XOR_swap_algorithm\">http://en.wikipedia.org/wiki/XOR_swap_algorithm</a></p>\n<p>XORs are used in the CRC checksum algorithm:\n<a href=\"http://en.wikipedia.org/wiki/Cyclic_redundancy_check\">http://en.wikipedia.org/wiki/Cyclic_redundancy_check</a></p>\n<p>XORs can be used to calculate Gray codes:\n<a href=\"http://www.morkalork.com/mork/article/74/How_to_understand_and_use_Gray_code.htm#.U6RhN_ldXvI\">http://www.morkalork.com/mork/article/74/How_to_understand_and_use_Gray_code.htm#.U6RhN_ldXvI</a></p>\n<p>This is just the tip of the iceberg. The instruction can be used in a large number of situations. </p>\n</div>",
            "votes": "13",
            "user": "MrSynAckSter",
            "time": "Jun 20, 2014 at 16:33",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>XOR</code> mnemonic does not represent an XOR swap; it represents a <a href=\"http://en.wikipedia.org/wiki/Bitwise_XOR\">bitwise XOR</a>.</p>\n</div>",
            "votes": "11",
            "user": "Jason Geffner",
            "time": "Jun 20, 2014 at 14:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}