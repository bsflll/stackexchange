{
    "title": "Confused about the value of edx and eax registers used at function entry",
    "link": "https://reverseengineering.stackexchange.com/questions/18300/confused-about-the-value-of-edx-and-eax-registers-used-at-function-entry",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently using IDA to disassemble a keygen. In the first few lines of a specific function before the <code>eax</code> and <code>edx</code> registers are given a value, their contents are moved to stack variables <code>var_40</code> and <code>var_44</code>. </p>\n<p>Here's said function's initial assembly listing:</p>\n<pre><code>var_44= dword ptr -44h\nvar_40= dword ptr -40h\n\npush    ebp\nmov     ebp, esp\nadd     esp, 0FFFFFFA8h\npush    esi\npush    edi\nmov     [ebp+var_44], edx\nmov     [ebp+var_40], eax\n</code></pre>\n<p>I would like to know what are the values of <code>EAX</code> and <code>EDX</code>.</p>\n<p>Do they default to 0 since they weren't previously used and this is just an initialization of the local variable?\nThere are other stack variables that IDA declared, I only mentioned <code>var_40</code> and <code>var_44</code> since they are the ones I had trouble understanding.</p>\n<p>Any help would be greatly appreciated.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "register",
        "calling-conventions"
    ],
    "user": "aatate98",
    "time": "Jun 16, 2018 at 23:24",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">What calling convention is this function? Are <code>var_44</code> and <code>var_40</code> used?</span>",
            "time": null
        },
        {
            "user": "aatate98",
            "text": "<span class=\"comment-copy\">yes they are used but to initialize ecx register later. Thats the only other occurence i could find with them</span>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">If this is a Delphi program, then it fits the Borland calling convention (first three arguments in eax, edx, ecx, rest on the stack). That means those two are just regular arguments to the function.</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">You are giving us too little info to answer this question. It basically depends on ABI. Might be just zeroing/init, might be something else. Is it main method? Other?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>TL;DR: The registers are used to pass arguments between the calling function to the callee. In order to understand their values you'll need to look at code prior to it being called.</em></p>\n<p>Since you've mentioned the data stored from the registers is then used to initialize another register before a call, this is a case of data passed between functions using registers.</p>\n<p>This may slightly look like saving registers for them to be restored prior to retuning back to the caller, however according to OP the values are <em>not</em> copied back from the stack (<code>var_44</code>, <code>var_40</code>) near the functions return. Additionally, <code>eax</code> is nearly never a preserved register so this is unlikely to be the case.</p>\n<h2>What are calling conventions</h2>\n<p>Calling convention is how arguments are passed between caller and callee functions. Wether arguments are stored on the stack, in registers or anyplace else by the caller function prior to calling the callee function, in order for the callee function to read them.</p>\n<p>Once we know what calling conventions are, a question raises as to who defined what available calling conventions are available as well as picks the calling convention to use between functions. Obviously, if a caller and callee assume a different calling convention code will break and we'll likely to get a segfault.</p>\n<p>Although this question may seem trivial in cases where the same compiler builds both the callee and caller, compiling different binaries by different compilers may complicate things.</p>\n<p>You may want to read more about <a href=\"https://en.wikipedia.org/wiki/Calling_convention\" rel=\"nofollow noreferrer\">calling conventions</a> used by the compiler/architecture you're reverse engineering.</p>\n<h2>fastcall calling conventions</h2>\n<p>There are quite a few <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">x86 calling conventions</a> with several resembling each other but used by different compilers but x64 calling conventions are more standardized.</p>\n<p>Originally, calling conventions heavily relied on the stack and all parameters were passed through it, however for performance reasons register usage became more frequent as it avoids the extra memory writes. Since not all data can be stored using registers (and other reasons) these are mixed calling conventions.</p>\n<p>These mixed calling conventions are commonly called \"fastcall\" due to being faster by avoiding the unneeded stack writes. There are several x86 fast calling conventions, depending on compiler used. Although there are several calling conventions take make usage of the <code>eax</code> and <code>edx</code>, but the important thing to note here is <strong>that they're used for the values previously set by the calling function</strong>.</p>\n</div>",
            "votes": "0",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check what the values of edx and eax are prior to the function call. Since these registers aren’t cleared prior to being moved into the variables their existing values are probably just used and transferred into the local variables.</p>\n</div>",
            "votes": "0",
            "user": "Chuck",
            "time": "May 17, 2018 at 10:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}