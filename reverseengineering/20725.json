{
    "title": "Finding function call (with arguments) in ELF file",
    "link": "https://reverseengineering.stackexchange.com/questions/20725/finding-function-call-with-arguments-in-elf-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have two kinds of ELF files, built from C++.</p>\n<p><code>.so</code> files:</p>\n<blockquote>\n<p>ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=5e751e769912aef28bc63b888e5e4904b867a180, stripped</p>\n</blockquote>\n<p>And executables:</p>\n<blockquote>\n<p>ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=1c215d8895277612d3f4332836f48dd45967f69d, stripped</p>\n</blockquote>\n<p>I am completely new to reverse engineering, and I have been experimenting with <code>objdump</code>, <code>readelf</code> and <code>nm</code>, but I still need some help.</p>\n<p>I want to find <strong>function calls</strong> to a few functions from a library, <em>without executing the binaries</em> (i.e., static analysis).</p>\n<p>With the above commands, I know the symbols are used, but I do not know which arguments are passed to the calls, or how many times the function was called.</p>\n<p>Ideally, I would like to get something close to the original source code, e.g.</p>\n<pre><code>thelib::TheClass::theFunction(\"a\", b, c);\n</code></pre>\n<p>but I understand this is hard to achieve. I would be content just by retrieving whether the first argument was a string literal (and its value) or something else.</p>\n<p>Is this possible with existing tools, such as the above (possibly with specific options), or would I have to implement something of my own?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "c++",
        "elf",
        "static-analysis"
    ],
    "user": "afsantos",
    "time": "Feb 26, 2019 at 16:12",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">Welcome to RE.SE! There are a lot of Disassemblers out there which may aid you with your task. I would recommend familiarizing yourself with IDA (7.0 is free), binaryninja, radare2, hopper or something similar. Basically, you would need some dataflow analysis to see which data does where.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@Nordwald: Isn't IDA Free limited to PE files?</span>",
            "time": null
        }
    ],
    "answers_data": []
}