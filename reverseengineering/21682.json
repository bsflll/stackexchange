{
    "title": "What does -c mean in this Windbg Command Syntax?",
    "link": "https://reverseengineering.stackexchange.com/questions/21682/what-does-c-mean-in-this-windbg-command-syntax",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>kd&gt; u win32k!impPsIsThreadTerminating+0xe4-c L5\n    |   \\              \\                \\  \\   \\\n   /     \\              \\                \\  \\   \\\n  /       \\              \\                \\  \\   \\\ndisassemble\\              \\                \\  \\   \\\n        ModuleName      SymbolName      Offset \\   \\\n                                              ???   \\ \n                                                   ObjectCount\n</code></pre>\n<p>So How to intepret <code>-c</code> ?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "67",
    "tags": [
        "windows",
        "windbg"
    ],
    "user": "Sajuuk",
    "time": "Jul 16, 2019 at 6:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>without any supporting context the <strong>-c</strong> will be treated as <strong>0xc</strong> and it will be subtracted from the address<br/>\nresolved by <strong>win32k!impPsIsThreadTerminating+0xe4</strong> </p>\n<p>be aware the 0xe4 is will be properly relevant most of the times only if you have an unoptimized build.    </p>\n<p>because after optimization functions can and will be divided into chunks \nby the compiler     </p>\n<p>and the least probable paths of code flow will be placed either before or after the function  </p>\n<p>suppose win32k!impPsIsThreadTerminating resolves to 0x000000007fffff00<br/>\nthen if it is an unoptimized build<br/>\n<strong>win32k!impPsIsThreadTerminating+0xe4</strong> will resolve to 0x000000007fffffe4    </p>\n<p>now 0xc will be subtracted from this address and the unassemble command will unassemble 5 instruction from this address</p>\n<pre><code>0:000&gt; ? vect!main\nEvaluate expression: 140699673489328 = 00007ff7`320eefb0\n\n0:000&gt; ? vect!main+e4\nEvaluate expression: 140699673489556 = 00007ff7`320ef094\n\n0:000&gt; ? vect!main+e4-c\nEvaluate expression: 140699673489544 = 00007ff7`320ef088\n\n0:000&gt; u vect!main+e4-c l5  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n00007ff7`320ef088 30488d          xor     byte ptr [rax-73h],cl &lt;&lt;&lt;&lt; see address\n00007ff7`320ef08b 4c2448          and     al,48h\n00007ff7`320ef08e e81a63ffff      call    vect!ILT+17320 (00007ff7`320e53ad)\n00007ff7`320ef093 eb0a            jmp     vect!main+0xef (00007ff7`320ef09f)\n00007ff7`320ef095 488d4c2430      lea     rcx,[rsp+30h]\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jul 16, 2019 at 11:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sajuuk",
                    "text": "<span class=\"comment-copy\">the command really was from thirdparty, and what I really don't understand is if it already specified an offset +0xe4 why would it add -0xc afterwards?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the offset 0xe4 is resolved by windbg from the accompanying pdb file (nearest offset to a known symbol  the -c is added by the one who disassembled this he/she obviously had peeked around and saw the 0xe4 is not correct but the compiler had moved it by 0xc  (its MAYBE I DONT KNOW I HAVE NO CONTEXT TO BASE THIS STATEMENT ON)  so manually added the 0xc probably</span>",
                    "time": null
                },
                {
                    "user": "Sajuuk",
                    "text": "<span class=\"comment-copy\">thanks, I'll accept your answer after 2 days if no other answer was given.</span>",
                    "time": null
                }
            ]
        }
    ]
}