{
    "title": "what is radare2's equivalent to GDB's 'find &system,+9999999,\"/bin/sh\"'",
    "link": "https://reverseengineering.stackexchange.com/questions/16755/what-is-radare2s-equivalent-to-gdbs-find-system-9999999-bin-sh",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is radare2's equivalent to GDB's <code>find &amp;system,+9999999,\"/bin/sh\"</code>? </p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "3k",
    "tags": [
        "radare2",
        "gdb"
    ],
    "user": "James W.",
    "time": "Jan 24, 2019 at 11:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First and foremost we should open the binary in debug mode with radare2</p>\n<pre><code>$ r2 -d file\n</code></pre>\n<p>The string <code>/bin/sh</code> resides in the <code>system</code> function of <code>libc</code> so the library should first be loaded to the memory in order for us to find the string there. Let's continue the execution of the program until its Entrypoint. In this point <code>libc</code> should already be loaded to the memory.</p>\n<pre><code>[0xf7f9bc60]&gt; dcu entry0\nContinue until 0x565914a0 using 1 bpsize\nhit breakpoint at: 565914a0\n[0x565914a0]&gt; \n</code></pre>\n<p><code>dcu</code> stands for <strong>d</strong>ebug <strong>c</strong>ontinue <strong>u</strong>ntil</p>\n<p>To find <code>/bin/sh</code> we should use radare’s search features. By default radare is searching in <code>dbg.map</code> which is the current memory map. In our case it's not guaranteed that <code>/bin/sh</code> will be in our current memory map. Therefore, we want it to search in all memory maps so we need to configure it:</p>\n<pre><code>[0x080483d0]&gt; e search.in = dbg.maps\n</code></pre>\n<p>You can view more options if you’ll execute <code>e search.in=?</code>. To configure radare the visual way, use <code>Ve</code>.</p>\n<p>Searching in radare is done with the <code>/</code> command, you can see the enormous amount of search options by executing <code>/?</code>.</p>\n<p>Let's search for <code>/bin/sh</code>:</p>\n<pre><code>[0x565914a0]&gt; / /bin/sh\nSearching 7 bytes from 0x00000000 to 0xffffffffffffffff: 2f 62 69 6e 2f 73 68 \nSearching 7 bytes in [0x56591000-0x56592000]\nhits: 1\n\n&lt;..truncated..&gt;\n\nSearching 7 bytes in [0xf7d97000-0xf7f66000]\nhits: 1\n\n0xf7f1180a hit1_2 .b/strtod_l.c-c/bin/shexit 0canonica.\n</code></pre>\n<p>Et Voilà! radare found the string in <code>0xf7f1180a</code>.</p>\n<p>To speed things up we can tell radare to start searching from <code>system</code> which is inside <code>libc</code>.\nFirst we need the address of <code>system</code> in libc, we can do this with <code>dmi</code> and then configure <code>search.from</code> to start from <code>system</code>. </p>\n<pre><code>[0x565914a0]&gt; dmi libc system\nvaddr=0xf7dd3700 paddr=0x0003c700 ord=566 fwd=NONE sz=1126 bind=LOCAL type=FUNC name=do_system\nvaddr=0xf7ebf470 paddr=0x00128470 ord=4988 fwd=NONE sz=102 bind=LOCAL type=FUNC name=svcerr_systemerr\nvaddr=0xf7dd3c50 paddr=0x0003cc50 ord=6919 fwd=NONE sz=55 bind=WEAK type=FUNC name=system\n\n[0x565914a0]&gt; e search.from=0xf7dd3c50\n[0x565914a0]&gt; / /bin/sh\nSearching 7 bytes from 0xf7dd3c50 to 0xffffffffffffffff: 2f 62 69 6e 2f 73 68 \nSearching 7 bytes in [0xf7dd3c50-0xf7f66000]\nhits: 1\n\n&lt;..truncated..&gt;\n\n0xf7f1180a hit2_0 .b/strtod_l.c-c/bin/shexit 0canonica.\n</code></pre>\n<p>There you go! Now you can print the string using <code>ps @ 0xf7f1180a</code> or use the address however you want.</p>\n</div>",
            "votes": "8",
            "user": "Megabeets",
            "time": "Nov 13, 2017 at 7:13",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Thanks to David Polverari from radare @ Telegram</p>\n<p>While in debug mode:</p>\n<pre><code>e search.in=range\ne search.from=&lt;start_addr&gt;\ne search.to=&lt;end_addr&gt;\n\n\"/ /bin/sh\"\n</code></pre>\n</div>",
            "votes": "2",
            "user": "James W.",
            "time": "Nov 13, 2017 at 5:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}