{
    "title": "Trying to hook DirectX9 using C++ - Keeps crashing",
    "link": "https://reverseengineering.stackexchange.com/questions/19094/trying-to-hook-directx9-using-c-keeps-crashing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I posted a thread on StackOverflow a few days ago, and it's got little attention, so i though it's possible this might be a better place for it.</p>\n<p>As the title says, i'm trying to hook/detour DirectX9 functions so i can render some information on screen. </p>\n<p>I was able to detour regular functions in my own application by finding the offset address in IDA, i believe i understand what hooking/detouring is and how it works, at least to a reasonable extent.</p>\n<p>The problem is, i'm not sure how to even find the EndScene function in IDA, and any attempt I've made at creating a dummy device and getting a V-Table pointer for the function have just not worked.</p>\n<p>Here's my code, someone please point out what i'm doing wrong here.\nI'd like to fix this and learn what I've done wrong so i can avoid making the same mistake in the future.</p>\n<pre><code>// dllmain.cpp : Defines the entry point for the DLL application.\n#include \"stdafx.h\"\n#include &lt;iostream&gt;\n#include &lt;Windows.h&gt;\n#include &lt;intrin.h&gt;  \n#include &lt;tchar.h&gt;\n#include &lt;tlhelp32.h&gt;\n#include &lt;Psapi.h&gt;\n#include &lt;winsock2.h&gt;\n#include &lt;vector&gt;\n#include &lt;ws2tcpip.h&gt;\n#pragma comment( lib, \"Ws2_32.lib\" )\n#include &lt;d3d9.h&gt;\n#pragma comment(lib, \"d3d9.lib\")\n#include &lt;d3dx9.h&gt;\n#pragma comment(lib, \"d3dx9.lib\")\n#include &lt;detours.h&gt;\n#pragma comment(lib, \"detours.lib\")\n\nusing namespace std;\n\nD3DCOLOR RED = D3DCOLOR_ARGB(255, 255, 0, 0);\n\ntypedef HRESULT(__stdcall* EndScene)(IDirect3DDevice9*);\nstatic EndScene EndScene_orig = NULL;\n\nHRESULT __stdcall EndScene_hook(IDirect3DDevice9* pDevice)\n{\n//  D3DRECT rec = { 100,100,200,200 };\n//  pDevice-&gt;Clear(1, &amp;rec, D3DCLEAR_TARGET, RED, 0, 0);\n//  MessageBoxA(0, \"In EndScene\", \"\", 0); //    &lt;&lt;&lt;&lt;----- This function is called over and over when not commented.\n    return EndScene_orig(pDevice);\n}\n\nvoid WINAPI InitHook()\n{\n\n    HWND game_window = FindWindow(NULL, _T(\"Skinned Mesh\"));\n\n    auto d3dpp = D3DPRESENT_PARAMETERS{};\n    auto d3d = Direct3DCreate9(D3D_SDK_VERSION);\n    if (d3d)\n    {\n        d3dpp.BackBufferCount = 1;\n        d3dpp.MultiSampleType = D3DMULTISAMPLE_NONE;\n        d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;\n        d3dpp.hDeviceWindow = game_window;\n        d3dpp.FullScreen_RefreshRateInHz = D3DPRESENT_RATE_DEFAULT;\n        d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;\n        d3dpp.BackBufferFormat = D3DFMT_R5G6B5;\n        d3dpp.Windowed = TRUE;\n        IDirect3DDevice9* Device{};\n        if (SUCCEEDED(d3d-&gt;CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, game_window, D3DCREATE_HARDWARE_VERTEXPROCESSING, &amp;d3dpp, &amp;Device)))\n        {\n//          MessageBoxA(0, \"We made it here...\", \"\", 0);\n\n            DWORD** pVTable = *reinterpret_cast&lt;DWORD***&gt;(Device);\n\n            DetourTransactionBegin();\n            DetourUpdateThread(GetCurrentThread());\n\n            EndScene_orig = (EndScene)pVTable[42];\n            DetourAttach(&amp;(LPVOID&amp;)pVTable[42], EndScene_hook);\n\n            if (DetourTransactionCommit() == NO_ERROR)\n                cout &lt;&lt; \"Detoured successfully\" &lt;&lt; endl;\n        }\n    }\n\n}\n\n\nvoid SetupConsole()\n{\n    AllocConsole();\n    freopen(\"CONOUT$\", \"wb\", stdout);\n    freopen(\"CONOUT$\", \"wb\", stderr);\n    freopen(\"CONIN$\", \"rb\", stdin);\n    SetConsoleTitle(\"CSGOHAX\");\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        SetupConsole();\n        DisableThreadLibraryCalls(hModule);\n        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)InitHook, 0, 0, NULL);\n        break;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "debugging",
        "c++",
        "function-hooking"
    ],
    "user": "Michael Strobel",
    "time": "Aug 19, 2018 at 17:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I figured it out, reversed the binary in IDA, found the module address and the EndScene function aswell as its address, calculated the offset. Then used ollydbg and found the function again, made a signature from it, now i can find it dynamically using a signature scanning function.</p>\n<p>So i can get the function address with this signature.</p>\n<pre><code>DWORD dwEndScene = FindPattern(\"d3d9.dll\",\n    \"\\x6A\\x18\\xB8\\x00\\x00\\x00\\x00\\xE8\\x00\\x00\\x00\\x00\\x8B\\x7D\\x08\\x8B\\xDF\\x8D\\x47\\x04\\xF7\\xDB\\x1B\\xDB\\x23\\xD8\\x89\\x5D\\xE0\\x33\\xF6\\x89\\x75\\xE4\\x39\\x73\\x18\\x75\\x73\",\n    \"xxx????x????xxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n</code></pre>\n<p>Then i just detour the function </p>\n<pre><code>DetourTransactionBegin();\nDetourUpdateThread(GetCurrentThread());\nEndScene_orig = (oEndScene)(dwEndScene);\nDetourAttach(&amp;(LPVOID&amp;)EndScene_orig, EndScene_hook);\nif (DetourTransactionCommit() == NO_ERROR)\n    cout &lt;&lt; \"Detoured successfully\" &lt;&lt; endl;\n</code></pre>\n<p>This is much easier than trying to find the function in the V-Table using a dummy device as i was before.</p>\n</div>",
            "votes": "2",
            "user": "Michael Strobel",
            "time": "Aug 19, 2018 at 1:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}