{
    "title": "How to debug armel and armhf binaries on x86-64 Ubuntu simultaneously?",
    "link": "https://reverseengineering.stackexchange.com/questions/31999/how-to-debug-armel-and-armhf-binaries-on-x86-64-ubuntu-simultaneously",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on the challenges on <a href=\"https://ropemporium.com/\" rel=\"nofollow noreferrer\">ROP Emporium</a>. For the ARMv5 version of the <a href=\"https://ropemporium.com/challenge/callme.html\" rel=\"nofollow noreferrer\">callme</a> challenge, we are given two binaries and two shared libraries: <code>callme_armv5</code> with <code>libcallme_armv5.so</code> and <code>callme_armv5-hf</code> with <code>libcallme_armv5-hf.so</code>. The first pair appears to be using the armel EABI, while the second pair is using the armhf EABI.</p>\n<p>In <a href=\"https://ropemporium.com/guide.html#Appendix%20B\" rel=\"nofollow noreferrer\">Appendix B</a> of ROP Emporium's Beginner's Guide, they show how to set up an environment for cross-platform debugging for ARM like so:</p>\n<pre><code>$ sudo apt install qemu-user libc6-armel-cross gdb-multiarch\n$ sudo mkdir /etc/qemu-binfmt\n$ sudo ln -s /usr/arm-linux-gnueabi /etc/qemu-binfmt/arm\n</code></pre>\n<p>That works great for armel, but it doesn't work for armhf. So I found this <a href=\"https://reverseengineering.stackexchange.com/a/8917/43351\">post</a>, showing how to set up an environment for cross-platform debugging of armhf binaries.</p>\n<pre><code>$ sudo apt install qemu-user libc6-armhf-cross gdb-multiarch\n$ sudo mkdir /etc/qemu-binfmt\n$ sudo ln -s /usr/arm-linux-gnueabihf /etc/qemu-binfmt/arm\n</code></pre>\n<p>This works fine for armhf, but not for armel ...</p>\n<pre><code>$ qemu-arm ./callme_armv5-hf  # Okay\n...\n$ qemu-arm ./callme_armv5     # FAIL\n./callme_armv5: error while loading shared libraries: libcallme_armv5.so: cannot open shared object file: No such file or directory\n</code></pre>\n<p>The problem is that both setups create the same symlink, but to different directories, so I can debug armel and armhf binaries individually, but each time I want to switch, I have to change the symlink. Is there some way to set up an environment so I can debug both binaries simultaneously?</p>\n<p>In case it's relevant, I'm running Ubuntu 20.04 under WSL2.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "131",
    "tags": [
        "debugging",
        "arm",
        "qemu"
    ],
    "user": "jinscoe123",
    "time": "Jun 25, 2023 at 22:59",
    "comments": [],
    "answers_data": []
}