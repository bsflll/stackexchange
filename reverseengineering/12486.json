{
    "title": "Offset Calculation for a Branch Instruction Thumb [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12486/offset-calculation-for-a-branch-instruction-thumb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/12486/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2016-04-20 19:17:04Z\">9 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/12486/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I did find this link: <a href=\"https://reverseengineering.stackexchange.com/questions/9094/offset-calculation-for-branch-instruction-in-arm?newreg=644a4b2d707a476496570137fcb31e37\">Offset calculation for branch instruction in ARM</a></p>\n<p>Which was quite helpful but also confusing for me. I tried few ways to get it working with my offsets but failed.</p>\n<p>What I wanted to do, was create a BL instruction from 0x52F4D6 to 0x5BF368.</p>\n<p>At 0x52F4D6 I wanted to write BL sub_5BF368 but how do I get the correct hex code (thumb) for it?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "arm"
    ],
    "user": "Anthony",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Hilogic",
            "text": "<span class=\"comment-copy\">Example of manipulating ARM conditional branch instruction to patch an Android Shared LIB <a href=\"http://androidapphacking.blogspot.in/\" rel=\"nofollow noreferrer\">Android lib patching</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can get this from the ARM manual; for example from the version linked at the link you found, <a href=\"https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf\" rel=\"nofollow noreferrer\">https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf</a>.</p>\n<p>First, a quick calculation <code>5BF358-52F4D6</code> yields <code>8FE82</code>, so you see you have more than 12 bits, and need to use the long branch format in 5.19, which splits your <code>BL</code> into two instructions. The section says \"The branch offset must take account of the prefetch operation, which causes the PC to be 1 word (4 bytes) ahead of the current instruction\", so the offset you need is from 4 bytes behind <code>52F4D6</code> - <code>52F4DA</code>, which means the offset for the instructions - the value you want to add to <code>PC</code> is <code>8FE7E</code>.</p>\n<p>The first part of the instruction shifts its partial offset left by 12 bits, and adds this to PC. The instruction format is <code>1111HXXXXXXXXXXX</code> in binary, with <code>H=0</code>, so <code>F000+XXXX</code> in hex. What you want to add to PC in this step is <code>8F000</code>, so the opcode for this instruction is <code>F0 8F</code>.</p>\n<p>The second part shifts its partial offset left by one bit (remember thumb instructions are aligned to 16 bit, so the last bit of an offset is always 0, so it doesn't have to be represented in the hex opcode), and it has <code>H=1</code>, so the opcode is <code>F800+XXXX</code>. What you want to add in this step is <code>E7E</code>. Shift that right by one bit to get <code>73f</code>, and add to your opcode to get <code>FF 3F</code>.</p>\n<p>So, your BL instruction is <code>F08F FF3F</code>.</p>\n<p>To confirm this, create an assembly program, assemble it, and check the result:</p>\n<pre><code>.thumb\n.arch armv7a\n.syntax unified\n.align 2\n.org    0x52F4D6\nbl  sub_5BF368\n.org    0x5BF368\nsub_5BF368:\n</code></pre>\n<hr/>\n<pre><code>arm-linux-gnueabi-as -o y.o y.s\narm-linux-gnueabi-objdump -s y.o | grep -v \"00000000 00000000 00000000 00000000\"\n.....\n 52f4d0 00000000 00008ff0 3fff0000 00000000  ........?.......\n....\n</code></pre>\n<p>Remember words are byte-swapped due to little-endianness, and you'll find your <code>F08F FF3F</code> opcode there.</p>\n<p>EDIT: I just fixed the address of the second .org since it seemed miss-typed just to avoid confusion. Now it looks consistent I think :) </p>\n</div>",
            "votes": "3",
            "user": "VGe0rge",
            "time": "Jul 19, 2019 at 12:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Anthony",
                    "text": "<span class=\"comment-copy\">Awesome! Thank you!  I also wanted to ask if I can use BGT, BEQ, BNE, BLE, BGE, BLT inside the assembly program and then disassemble it?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Yes, this works for all instructions. Just remember that the offset part of the conditional branches is just 8 bit, so the target needs to be closer to the branch instruction than in the <code>bl</code> example above.</span>",
                    "time": null
                },
                {
                    "user": "Anthony",
                    "text": "<span class=\"comment-copy\">Sorry, I answered my own question. But another question, why can't I branch backwards a few offsets? Always get this error: attempt to move .org backwards</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">That because, well, you can't move .org backwards. For a back jump, you need to put the .org/sub declaration in front of the .org/branch.</span>",
                    "time": null
                },
                {
                    "user": "Anthony",
                    "text": "<span class=\"comment-copy\">Awesome! Would you happen to have the parts to add to the start of the program so we can get the x64 offset? :)</span>",
                    "time": null
                }
            ]
        }
    ]
}