{
    "title": "What are these extra members in this derived constructor?",
    "link": "https://reverseengineering.stackexchange.com/questions/15820/what-are-these-extra-members-in-this-derived-constructor",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In <a href=\"https://youtu.be/efkLG8-G3J0?t=12m59s\" rel=\"nofollow noreferrer\">Recon 2011: Practical C++ Decompilation</a> there is this example where some fields are assigned before the derived class' virtual table pointer is:</p>\n<pre><code>public: __thiscall CMachine::CMachine(void) proc near\n mov edi, edi\n push esi\n mov esi, ecx\n call CDataStoreObject::CDataStoreObject(void)\n and dword ptr [esi+24h], 0\n or dword ptr [esi+28h], 0FFFFFFFFh\n and dword ptr [esi+2Ch], 0\n or dword ptr [esi+30h], 0FFFFFFFFh\n mov dword ptr [esi], offset const CMachine::`vftable'\n mov eax, esi\n pop esi\n retn\npublic: __thiscall CMachine::CMachine(void) endp\n</code></pre>\n<p>Igor mentions that the assigning of those fields are not written by the programmer because they come before the virtual table pointer. Would someone mind explaining what these fields are and possibly what the values could represent?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "77",
    "tags": [
        "vtables"
    ],
    "user": "Ci3",
    "time": "Jul 16, 2017 at 10:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the c++ code is like:</p>\n<pre><code>CMachine *__thiscall CMachine::CMachine(CMachine\n*this)\n{\nCDataStoreObject::CDataStoreObject(&amp;this-&gt;_);\nthis-&gt;dword24 = 0;\nthis-&gt;dword28 = -1;\nthis-&gt;dword2C = 0;\nthis-&gt;dword30 = -1;\nthis-&gt;_._vtable = (CMachine_vtable\n*)&amp;CMachine::_vftable_;\nreturn this;\n}\n</code></pre>\n<p>the class CMachine has a member or a super class CDataStoreObject.\nthe assigning of those fields should/could be the members of class CDataStoreObject. or for alignment.</p>\n<p>compiler optimization in details might looks odd seeing from machine code.\nit depends on the optimization level and compiler type/version.</p>\n</div>",
            "votes": "0",
            "user": "yufeng",
            "time": "Jul 19, 2017 at 3:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}