{
    "title": "How could I change an instruction in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/3843/how-could-i-change-an-instruction-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to change an instruction in an executable that's loaded in IDA Pro v6.1</p>\n<p>For example:</p>\n<pre><code>lis       r11, ((qword_90E1B2D8+0x10000)@h)\n</code></pre>\n<p>to</p>\n<pre><code>lis       r10, unk_90E163D0@h\n</code></pre>\n<p>Any help is appreciated, thank you very much.</p>\n</div>",
    "votes": "11",
    "answers": 1,
    "views": "54k",
    "tags": [
        "ida"
    ],
    "user": "user4128",
    "time": "Mar 11, 2014 at 0:03",
    "comments": [
        {
            "user": "fileoffset",
            "text": "<span class=\"comment-copy\">Hmm, last time I tried to do this, I had to use IDC (PatchByte(ea, value)) to patch the database in memory, then Unassemble and Assemble again. If you have a bigger instructions, then you are kinda stuck and will need to use other methods (code cave, etc...)</span>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">If the <code>Edit</code> - <code>Patch</code> menu works in your architecture, you can just use its <code>Assemble</code> command to write the instruction you want, see the bytes it produces (<code>Options</code> - <code>General</code> - <code>Show opcode bytes</code>), and then hex-edit them into the executable.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you goal is to push the changes back to the original binary, then for IDA 6.1, your best bet is to use a combination of the <code>Edit/Patch Program</code> menu and the editing capabilities of the <code>Hex View</code> window to make the changes that you want. If you are looking at PPC code, unfortunately the PPC processor module does not support the <code>Assemble...</code> command on the <code>Patch Program</code> menu. Once you have made the changes that you want, use the <code>File/Produce file/Create DIF file</code> menu item to save an IDA style dif file. There is a utility here: <a href=\"http://idabook.com/examples/chapter_14/ida_patcher.c\" rel=\"noreferrer\">http://idabook.com/examples/chapter_14/ida_patcher.c</a> that may be used to apply your dif against the original binary to patch it.</p>\n</div>",
            "votes": "8",
            "user": "Chris Eagle",
            "time": "Mar 11, 2014 at 14:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user4128",
                    "text": "<span class=\"comment-copy\">Would there be a more simplistic method if I just wanted to make a change like this:  lis       r11, ((qword_90E1B2D8+0x10000)@h) to lis       r11, unk_90E163D0@h</span>",
                    "time": null
                },
                {
                    "user": "Chris Eagle",
                    "text": "<span class=\"comment-copy\">Can you please clarify whether your intent is to push the patch down into the original binary or whether you just want to patch the IDA database as sort of a \"what if\" exercise? If the former, the easiest way is to upgrade to IDA 6.2 or later which includes a \"Edit/Patch/Apply patches to input file\" menu option that pushes all the changes into the original binary without the need to generate a dif file. If the latter, the easiest thing is the simply use the hex view to edit the database. In either case, IDA's PPC module is not going to do the assembly for you.</span>",
                    "time": null
                }
            ]
        }
    ]
}