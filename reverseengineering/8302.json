{
    "title": "Differing-Size Binary Edits",
    "link": "https://reverseengineering.stackexchange.com/questions/8302/differing-size-binary-edits",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What are the general techniques/methods used for making static changes to a binary file where the length of the edited bytes is larger or smaller than the original? Obviously such a change would mess up the offsets.</p>\n<p>e.g. Say I have the byte sequence <code>4F 3E 23</code> and wish to change it to <code>23 56 7E 74 21</code></p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "128",
    "tags": [
        "assembly"
    ],
    "user": "Zigsaz",
    "time": "Feb 20, 2015 at 16:21",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">See <a href=\"http://reverseengineering.stackexchange.com/questions/8149/adding-instructions-in-ida\" title=\"adding instructions in ida\">reverseengineering.stackexchange.com/questions/8149/â€¦</a></span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">@8BitAce: Well, it would mean that you have a perfect disassembler that can rebuild the whole semantics of the program and recompute the new offsets. This is impossible in the general case...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I suppose you have two options:</p>\n<ul>\n<li><p>search for some free, unused space in the executable, put your code\nthere, and put a JMP wherever you originally wanted to insert more\ninstructions. (this would probably involve changing the permissions so the code can be executed without access violations)</p></li>\n<li><p>instead of static patching, inject a DLL and put a JMP to your code contained in the DLL.</p></li>\n</ul>\n<p>In both cases, you'd need to preserve the program state\n   (probably a PUSHAD then POPAD when you're done), then JMP back\n   and resume execution.</p>\n<p>An example (second approach, assuming MSVC):</p>\n<pre><code>void __declspec(naked) MyCode()\n{\n    __asm PUSHAD\n    //your code here\n    __asm POPAD\n    __asm PUSH returnAddress\n    __asm RETN\n}\n</code></pre>\n<p>and to patch it:</p>\n<pre><code>DWORD AddrToPatch = 0xC0DE;\n\nDWORD RelAddr = (DWORD)(MyCode - (DWORD)AddrToPatch) - 5;\n*AddrToPatch = 0xE9;\n*((DWORD *)(AddrToPatch + 0x1)) = RelAddr;  \n</code></pre>\n<p><br/>\nHonestly, I think you're better off doing it like that - the first method is a lot more hassle, and injecting a DLL is fairly easy, you can automate that by playing around with the IAT or TLS callbacks.</p>\n</div>",
            "votes": "1",
            "user": "user4520",
            "time": "Feb 20, 2015 at 23:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zigsaz",
                    "text": "<span class=\"comment-copy\">The first method was what I was seeing the most suggestions for. The second seems much more robust. Thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For a length of the edited bytes that is smaller than the original use the NOP NOP NOPs to fill in the gaps</p>\n</div>",
            "votes": "0",
            "user": "TurtleMan",
            "time": "May 22, 2015 at 6:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}