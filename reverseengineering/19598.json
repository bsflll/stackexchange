{
    "title": "Find base address and memory size of program debugged in gdb",
    "link": "https://reverseengineering.stackexchange.com/questions/19598/find-base-address-and-memory-size-of-program-debugged-in-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to find out the base address and the imagesize of the program being debugged in gdb. As in, where it got loaded in memory. For shared libraries I can do \"info sharedlibrary\"  and I get very nice output like so:</p>\n<pre><code>0x00007ffff7dd5f10  0x00007ffff7df4b20  Yes         /lib64/ld-linux-x86-64.so.2\n</code></pre>\n<p>How can i get this output for the main program i am debugging?</p>\n<p>I know that gdb disables ASLR and I could just inspect the ELF file myself to find out, but there has to be a way via gdb too. </p>\n<p>(Background: I am using gdb's mi, and I can keep a basic overview of where things are by parsing sharedlibrary-load messages. But it never sends such a message for the main program, which is the most important thing.)</p>\n<p>Thanks!</p>\n</div>",
    "votes": "8",
    "answers": 2,
    "views": "26k",
    "tags": [
        "debugging",
        "gdb",
        "debuggers",
        "elf"
    ],
    "user": "bernd feinman",
    "time": "Oct 11, 2018 at 11:10",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">pmap -x [pid] ( <a href=\"https://linux.die.net/man/1/pmap\" rel=\"nofollow noreferrer\">linux.die.net/man/1/pmap</a> ) from the command line may probably help you without gdb</span>",
            "time": null
        },
        {
            "user": "bernd feinman",
            "text": "<span class=\"comment-copy\">There is also the command <code>info proc mappings &lt;pid&gt;</code></span>",
            "time": null
        },
        {
            "user": "Alex",
            "text": "<span class=\"comment-copy\">You might be looking for \"info proc stat\" --&gt; \"Start of text\"</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do the following:</p>\n<ul>\n<li><code>info inferior</code> or <code>print getpid()</code> gives you a process id</li>\n<li><code>shell pmap -x {the process id}</code> gives you a memory map of the process (it is not functionality of gdb, pmap is other shell command, but it is a bit better then analyzing ELF)</li>\n<li>You can also use <code>shell cat /proc/{pid}/maps</code> file (as far as I understand pmap just parses and prints its content)  </li>\n</ul>\n<p>You'll see something like this(it's a result of a process named opt which I am debugging just now):</p>\n<pre><code>6648:   /home/ubuntu/llvm-5.0.1.src/build/bin/opt\nAddress           Kbytes     RSS   Dirty Mode  Mapping\n0000000000400000  100524   36380       8 r-x-- opt\n0000000000400000       0       0       0 r-x-- opt\n000000000682a000    4176     356     296 r---- opt\n000000000682a000       0       0       0 r---- opt\n0000000006c3e000     628      76      76 rw--- opt\n0000000006c3e000       0       0       0 rw--- opt\n0000000006cdb000     684     480     480 rw---   [ anon ]\n0000000006cdb000       0       0       0 rw---   [ anon ]\n00007ffff6908000    1792    1056       8 r-x-- libc-2.23.so\n00007ffff6908000       0       0       0 r-x-- libc-2.23.so\n00007ffff6ac8000    2048       0       0 ----- libc-2.23.so\n00007ffff6ac8000       0       0       0 ----- libc-2.23.so\n00007ffff6cc8000      16      16      16 r---- libc-2.23.so\n00007ffff6cc8000       0       0       0 r---- libc-2.23.so\n00007ffff6ccc000       8       8       8 rw--- libc-2.23.so\n00007ffff6ccc000       0       0       0 rw--- libc-2.23.so\n00007ffff6cce000      16      12      12 rw---   [ anon ]\n00007ffff6cce000       0       0       0 rw---   [ anon ]\n...\n...\n</code></pre>\n<p>If I understand your question correctly the line</p>\n<pre><code>  0000000000400000  100524   36380       8 r-x-- opt\n</code></pre>\n<p>is what you need.</p>\n</div>",
            "votes": "4",
            "user": "w s",
            "time": "Oct 11, 2018 at 13:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "bernd feinman",
                    "text": "<span class=\"comment-copy\">Thanks. I get that gdb isnt a rce tool, but it really bothers me that basic stuff like finding where your target is loaded in memory is so hard to come by. Another example is the starti command thatwas only added very recently. Anyways, thanks for solving this.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>info file</code> shows the memory map of the current process:</p>\n<pre><code>Local exec file:\n        `/bin/less', file type elf64-x86-64.\n        Entry point: 0x402080\n        0x0000000000400238 - 0x0000000000400254 is .interp\n        0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag\n        0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id\n        0x0000000000400298 - 0x00000000004002e0 is .gnu.hash\n        0x00000000004002e0 - 0x0000000000400b20 is .dynsym\n        0x0000000000400b20 - 0x0000000000400e7d is .dynstr\n        0x0000000000400e7e - 0x0000000000400f2e is .gnu.version\n        0x0000000000400f30 - 0x0000000000400fa0 is .gnu.version_r\n        0x0000000000400fa0 - 0x0000000000401000 is .rela.dyn\n        0x0000000000401000 - 0x0000000000401708 is .rela.plt\n        0x0000000000401708 - 0x0000000000401722 is .init\n        0x0000000000401730 - 0x0000000000401bf0 is .plt\n        0x0000000000401bf0 - 0x0000000000415824 is .text\n        0x0000000000415824 - 0x000000000041582d is .fini\n        0x0000000000415840 - 0x000000000041bd67 is .rodata\n        0x000000000041bd68 - 0x000000000041c90c is .eh_frame_hdr\n        0x000000000041c910 - 0x00000000004208e4 is .eh_frame\n        0x0000000000620e00 - 0x0000000000620e08 is .init_array\n        0x0000000000620e08 - 0x0000000000620e10 is .fini_array\n        0x0000000000620e10 - 0x0000000000620e18 is .jcr\n        0x0000000000620e18 - 0x0000000000620ff8 is .dynamic\n        0x0000000000620ff8 - 0x0000000000621000 is .got\n        0x0000000000621000 - 0x0000000000621270 is .got.plt\n        0x0000000000621280 - 0x000000000062500c is .data\n        0x00007fffff4001c8 - 0x00007fffff4001ec is .note.gnu.build-id in /lib64/ld-linux-x86-64.so.2\n        0x00007fffff4001f0 - 0x00007fffff4002ac is .hash in /lib64/ld-linux-x86-64.so.2\n        0x00007fffff4002b0 - 0x00007fffff40038c is .gnu.hash in /lib64/ld-linux-x86-64.so.2\n        0x00007fffff400390 - 0x00007fffff400630 is .dynsym in /lib64/ld-linux-x86-64.so.2\n</code></pre>\n<p>Lines without a filename at the end are those for the main executable.</p>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Oct 11, 2018 at 13:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bernd feinman",
                    "text": "<span class=\"comment-copy\">Thanks! In my specific case i need the segments, not sections, so I would have to do sketchy rounding using that info only .... but it seems this is as good as it gets with raw gdb.</span>",
                    "time": null
                }
            ]
        }
    ]
}