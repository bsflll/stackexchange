{
    "title": "Read value from frida hooked native method Jlong parameter",
    "link": "https://reverseengineering.stackexchange.com/questions/32118/read-value-from-frida-hooked-native-method-jlong-parameter",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am new to using frida for hooking native android code i.e lib.so, so I have load the lib into ghidra and can find the native function. the native function is getting 5 params including jnienv and jclass but I wanted to get the value of Jlong and read it. this is the snippet of the function in ghidra.</p>\n<pre><code>undefined Java_com_myapp_sMessage\n                    (JNIEnv *env,jclass thiz,jlong a0,jobject a1,jobject a2)\n\n{\n  Message aMStack_200 [448];\n  undefined **local_40;\n  jobject local_3c;\n  undefined ***local_30;\n  int local_24;\n  \n  local_24 = __stack_chk_guard;\n  if (a0._4_4_ == (jobject)0x0) {\n    local_3c = (jobject)0x0;\n  }\n  else {\n    local_3c = (*(*env)-&gt;NewGlobalRef)(env,a0._4_4_);\n  }\n... //the code is so long and I thought is so irrelevant to my question right now\n</code></pre>\n<p>so I have wrote this frida code to hook that native function.</p>\n<pre><code> Interceptor.attach(\n        Module.getExportByName(\n          \"libca.so\",\n          \"Java_com_myapp_sMessage\"\n        ),\n        {\n          onEnter: function (args) {\n            console.log(\n              \"Entered Java_com_myapp_sMessage\"\n            )\n            console.log(\n              \"args[0]=\" +\n                args[0] +\n                \" , args[1]=\" +\n                args[1] +\n                \" , args[2]=\" +\n                args[2] +\n                \" , args[3]=\" +\n                args[3] +\n                \" , args[4]=\" +\n                args[4]\n            )\n            // this.context.x0=0x1;\n          },\n          onLeave: function (retval) {\n            console.log(\n              \"Exited Java_com_myapp_sMessage, retval:\" +\n                retval\n            )\n            // retval.replace(0x1);\n          },\n        }\n      )\n</code></pre>\n<p>but when I run the frida script it print out value for the params like: args[0]=0xab8f6e40 , args[1]=0xa956e7bc , args[2]=0xd68cf000 , args[3]=0x6246564 , args[4]=0xa956e7c0.</p>\n<p>so in this case Jlong a0 corresponds to args [2] if I am not wrong. and in the android I know the a0 value is <code>558750103159846912</code> so in the native side I tried to print args [2] just log or see the same value but did not succeeded because it prints that hex values <code>args[2]=0xd68cf000</code></p>\n<p>so I have tried on <code>args[2].readfromcstring()</code> or <code>args[2].toint32()</code> also when I tried to use <code>Memory.readByteArray(ptr(args[2]), 64)</code> it print out <code>args[2]=[object ArrayBuffer]</code>. so how can I print the value passed to this parameter?</p>\n<p>edit:</p>\n<p>added ARM disassembly of the function:</p>\n<pre><code>                                 ********************************************\n                                 *                          FUNCTION                           *\n                                 ********************************************\n                                 undefined1 __stdcall Java_com_myapp_sMessage\n                                     assume LRset = 0x0\n                                     assume TMode = 0x1\n               undefined1           r0:1                             &lt;RETURN&gt;\n               JNIEnv *                r0:4                             env\n               jclass                     r1:4                             thiz\n               jlong                     Stack[0x0]:8               a0                                           XREF[1]:           001c74fa(R)  \n               jobject                   r2:4                             a1\n               jobject                   r3:4                             a2\n               undefined4           Stack[-0x24]:4            local_24                                  XREF[2]:           001c7508(W), \n                                                                                                                                                        001c7558(R)  \n               undefined4           Stack[-0x30]:4            local_30                                  XREF[1]:           001c752e(W)  \n               undefined4           Stack[-0x3c]:4            local_3c                                  XREF[1]:           001c7530(W)  \n               undefined4           Stack[-0x40]:4            local_40                                  XREF[1]:           001c7538(W)  \n                                 Java_com_myapp_sMessage                                  XREF[1]:   Entry Point(*)  \n      001c74ec f0 b5            push                             {r4,r5,r6,r7,lr}\n     001c74ee 03 af            add                               r7,sp,#0xc\n      001c74f0 2d e9 00      push                             {r8,r9,r11}\n                      0b\n      001c74f4 f8 b0            sub                               sp,#0x1e0\n      001c74f6 04 46           mov                              r4,env\n      001c74f8 22 48           ldr                                env,[DAT_001c7584]                                                                                                                        = 00434A5Eh\n      001c74fa d7 e9 02      ldrd                              r8,thiz,[r7,#a0]\n                      81\n....  //the code is so long and I thought is so irrelevant to my question right now\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "405",
    "tags": [
        "android",
        "ghidra",
        "function-hooking",
        "frida",
        "shared-object"
    ],
    "user": "hanan",
    "time": "Aug 2, 2023 at 12:30",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\"><code>jlong</code> is identical to the C data type <code>long</code> (64 bit signed) so a function call argument should passed as a \"by value\" argument (not by reference). As the argument values in your question are pretty low (e.g. 0xa956e7bc) I assume you are using a 32bit app/device. I am not sure how a 64bit value is passed by value in a function call. In such a case, may be it is split into two 32bit values?</span>",
            "time": null
        },
        {
            "user": "hanan",
            "text": "<span class=\"comment-copy\">@Robert, correct I am using 32bit device as it is arm v7 architecture. I have added the assembly code but I can't understand if the values of jlong is splitted into two registers.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">According to the disassembly you have added it seems that the jlong parameter is passed on the stack, instead of a register. Not sure how Frida handles this situation.</span>",
            "time": null
        },
        {
            "user": "hanan",
            "text": "<span class=\"comment-copy\">well Frida provides <code>this.context.sp</code> but either did not give the output I was looking for. I mean when I tried to log <code>\" , this.context.sp =\" + this.context.sp.add(0x0)</code>  it outputs ` this.context.sp =0xa99067a8` well I am not sure if I was right using <code>this.context.sp</code> it is stack pointer but not so clear how I can reach <code>jlong                     Stack[0x0]:8               a0</code> in this case.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">My guess would be <code>this.context.sp.readLong()</code></span>",
            "time": null
        }
    ],
    "answers_data": []
}