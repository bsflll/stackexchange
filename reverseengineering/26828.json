{
    "title": "Find Decryption algorithm of an encryption algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/26828/find-decryption-algorithm-of-an-encryption-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently work on an algorithm that encrypt some data with 8 byte length.\nI worked hard and I successful to get this algorithm, but I need decryption of this algorithm.\nHow I can invert it?</p>\n<p>I guess this is a hash algorithm and I can't invert it. but I want to make sure about that.</p>\n<pre><code>int tmp1 = 0;\nint tmp2 = 0;\nunsigned short int _array_1[8]={0};\nunsigned short int _array_out[8]={0};\n\nfor(int j = 0 ; j &lt;5; j++)\n        tmp1 = tmp1 * 0x40 + _array_1[j];\n    for(int j = 5; j&lt;8; j++)\n        tmp2 = (tmp2 &lt;&lt; 5) + _array_1[j];\n    for (int j = 0 ; j&lt;4; j++)\n        _array_1[j] = (tmp1 &gt;&gt; 8*j ) &amp; 0xFFFF ;\n    for (int j = 4 ; j&lt;6; j++)\n        _array_1[j] = (tmp2 &gt;&gt; 8*(j-4) ) &amp; 0xFFFF ;\n    _array_1[6] = 0;\n    _array_1[7] = 0;\n\n    _array_out [0] = (get_diff (_array_1[1],0x1A)) * (get_diff (_array_1[4],0x9C));\n    _array_out [1] = (get_diff (_array_1[1],0x9C)) * (get_diff (_array_1[4],0x2E));\n    _array_out [2] = (get_diff (_array_1[5],0x1A)) * (get_diff (_array_1[2],0x9C));\n    _array_out [3] = (get_diff (_array_1[5],0x9C)) * (get_diff (_array_1[2],0x2E));\n    _array_out [4] = (get_diff (_array_1[3],0x1A)) * (get_diff (_array_1[0],0x9C));\n    _array_out [5] = (get_diff (_array_1[3],0x9C)) * (get_diff (_array_1[0],0x2E));\n</code></pre>\n<p>And</p>\n<pre><code>uint8_t get_diff(uint8_t a, uint8_t b)\n{\n    uint8_t result =0;\n    result = (a&gt; b )?  (a-b) : (b-a);\n    return result;\n}\n</code></pre>\n<p><strong>Edited:</strong><br/>\nAccording to the lan comment I edited my question and some data such as <strong>tmp1</strong> and <strong>tmp2</strong> added.<br/>\nAlso, I will present an example as instance.<br/>\n<strong>Example</strong><br/>\n<strong>Input</strong>  = 0x01, 0x05, 0x00, 0x0C, 0x1B, 0x14, 0x18, 0x1A<br/>\n<strong>Output</strong> = 0xAE, 0xF4, 0x48, 0x6A, 0x99, 0x81<br/>\nThanks.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "259",
    "tags": [
        "assembly",
        "c",
        "encryption",
        "decryption"
    ],
    "user": "Unicornux",
    "time": "Jan 23, 2021 at 5:48",
    "comments": [
        {
            "user": "hunter",
            "text": "<span class=\"comment-copy\">If you working on IDA. You can flip up or down around the encryption algorithm, to check if there's the decryption algorithm.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">As it stands, your \"answer\" is more of a commentary. Please post again after providing more context to make it an answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Non-Invertibility (1)</strong></p>\n<p>It's definitely not invertible.</p>\n<p>To see this you only need to consider the contents of <code>tmp1</code> after 2 iterations of the first loop.</p>\n<p>Let's unroll these 2 iterations (and, for simplicity of exposition only, assume tmp1 was zero on entry to the loop.)  This gives -</p>\n<pre><code>tmp1 = _array_1[ 0 ] * 64 + _array_1[ 1 ];\n</code></pre>\n<p>The values of the first two input values are being 'overlapped' meaning that there are multiple sets of values of these that produce the same value for tmp1 after these 2 iterations.</p>\n<p>e.g.</p>\n<pre><code>_array_1[ 0 ] = 0, _array_1[ 1 ] = 64 =&gt; tmp1 = 64\n_array_1[ 0 ] = 1, _array_1[ 1 ] =  0 =&gt; tmp1 = 64\n</code></pre>\n<p>Since the first 2 iterations of the loop are the only place these first two inputs values are used, the information lost here cannot be being recovered elsewhere so we know that it's not possible to invert.</p>\n<hr/>\n<p><strong>Non-Invertibility (2)</strong></p>\n<p>Separately, if we knew the output data was being treated as bytes too, then you don't even need to look at the mathematical details of the algorithm to understand the un-invertibility.</p>\n<p>Instead, the observation that there's 8 bytes of input but only 6 bytes of output is enough to prove it. This is because each possible output will be produced by, on average, 65536 different inputs so you can't go the other way.</p>\n<hr/>\n<p><strong>Algorithm to find a single valid set of input values</strong></p>\n<p>To make your example work in the forward direction, I have had to assume that the the code you've shown is wrong and the types of your input and output arrays are exactly 8-bit (here <code>unsigned char</code>) not <code>unsigned short</code>.</p>\n<p>On this basis and given that you say you'd be happy with any arbitrary single solution of the (multiple-valued) inverted algorithm a given output, you can try this -</p>\n<pre><code>unsigned char in[] = { 0xAE, 0xF4, 0x48, 0x6A, 0x99, 0x81 };\nunsigned char out[8];\n\nbrute_force_bifactor( in[0], in[1], &amp;out[1], &amp;out[4] );\nbrute_force_bifactor( in[2], in[3], &amp;out[5], &amp;out[2] );\nbrute_force_bifactor( in[4], in[5], &amp;out[3], &amp;out[0] );\n\nint tmp1 = 0;\nint tmp2 = 0;\nfor( int j = 0; j &lt; 4; ++j )\n    tmp1 |= out[j] &lt;&lt; 8 * j;\nfor( int j = 4; j &lt; 6; ++j )\n    tmp2 |= out[j] &lt;&lt; 8 * (j - 4);\n\n/* the following lines are one of many possible ways of splitting tmp1 &amp; tmp2 that successfully invert the algorithm */\nfor( int j = 0; j &lt; 5; ++j )\n    out[j] = (tmp1 &gt;&gt; 6 * (4 - j)) &amp; 0x3F;\nfor( int j = 5; j &lt; 8; ++j )\n    out[j] = (tmp2 &gt;&gt; 5 * (7 - j)) &amp; 0x1F;\n</code></pre>\n<p>with</p>\n<pre><code>void brute_force_bifactor( unsigned char a, unsigned char b, unsigned char* px, unsigned char* py )\n{\n    /* this returns the first pair of values x &amp; y that satisfy the inversion criteria */\n    for( int x = 0; x &lt; 256; ++x )\n    {\n        for( int y = 0; y &lt; 256; ++y )\n        {\n            if( ((abs( x - 0x1A ) * abs( y - 0x9C )) &amp; 0xFF) != a ) continue;\n            if( ((abs( x - 0x9C ) * abs( y - 0x2E )) &amp; 0xFF) != b ) continue;\n            *px = x;\n            *py = y;\n            return;\n        }\n    }\n    exit( 1 );\n}\n</code></pre>\n<p>It might be possible improve this <code>brute_force_bifactor</code> function using some clever maths, but as it's at most 65k iterations of the inner loop it's very fast anyway.</p>\n</div>",
            "votes": "3",
            "user": "Ian Cook",
            "time": "Jan 23, 2021 at 18:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Unicornux",
                    "text": "<span class=\"comment-copy\">Thanks lan, I agree with you. That was my initial thought. But I was hoping for a solution. So, have you any suggestion to solve this problem for me? Even if the output had multi answer.</span>",
                    "time": null
                },
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">The algorithm is sufficiently simple that this might be possible. However your code is not complete enough for this purpose.  You'd need to clear about the type and initial.values of tmp1 &amp;  tmp2. You'd also need to be sure about the size of the elements of the input and output values.  You've defined then as (at least) 16 bits, but you say only 8 bits are used for the input and are silent on the output.</span>",
                    "time": null
                },
                {
                    "user": "Robert",
                    "text": "<span class=\"comment-copy\">@Unicornux If the input values are static and your custom implementation is equivalent to the shown method you could try to build a input/output map so you could reverse the function at least for certain values (for brute-forcing the input space the input is unfortunately a bit too large...).</span>",
                    "time": null
                },
                {
                    "user": "Unicornux",
                    "text": "<span class=\"comment-copy\">@lan Thanks lan. You right, I edited my question. Thanks.</span>",
                    "time": null
                }
            ]
        }
    ]
}