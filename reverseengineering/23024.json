{
    "title": "VC 6 C++ Exception handling, nTryBlocks=0, pTryBlockMap=0 , how?why?",
    "link": "https://reverseengineering.stackexchange.com/questions/23024/vc-6-c-exception-handling-ntryblocks-0-ptryblockmap-0-howwhy",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to decompile an old binary (about 20 year old).</p>\n<p>The program uses exceptions.</p>\n<p>I found some FuncInfo but they do not contain any pTryBlockMap and nTryBlocks is 0.</p>\n<p>I've tried many options on the VC6 compiler but I could not get this result.</p>\n<p>The stack doesn't look like a regular stack:</p>\n<pre><code>...\nSEH handler\nscope table\nTry Level\nsaved EBP\nreturn address\n</code></pre>\n<p>But it looks like:</p>\n<pre><code>...\nSEH handler\nTry level\nreturn address\n</code></pre>\n<p>Do you have any idea how to achieve this and why it would have been like that ?</p>\n<p>SEH Handler is :</p>\n<pre><code>MOV        EAX,DAT_00412c90\nJMP        ___CxxFrameHandler\n</code></pre>\n<p>FuncInfo@00412c90</p>\n<pre><code>19930520\n00000005\n00412cb0\n00000000\n00000000\n00000000\n00000000\n00000000\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "163",
    "tags": [
        "decompilation",
        "c++",
        "callstack"
    ],
    "user": "picryott",
    "time": "Jan 16, 2020 at 22:10",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What is the SEH handler called? Do you have a link to the binary?</span>",
            "time": null
        },
        {
            "user": "picryott",
            "text": "<span class=\"comment-copy\">@Igor Skochinsky Sorry, I can't provide a link to the binary.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Even when there are no try/catch blocks in a function, the compiler may generate a FunctionInfo structure and register a C++EH handler (such as <code>__CxxFrameHandler</code>). This is necessary, for example, to destruct automatic (stack-allocated) C++ objects going out of scope, or cleaning up a partially constructed object in a constructor. In such functions there will be no try blocks but you should see non-zero <code>pUnwindMap</code> with pointers to unwind funclets containing calls to destructors of stack objects, i.e. something like:</p>\n<pre><code>lea ecx, [ebp-2Ch]\njmp std::string::~string\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jan 16, 2020 at 22:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "picryott",
                    "text": "<span class=\"comment-copy\">That's it. Thank you. And the difference in the stack seems to be an optimization option for the compiler (/Ox).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually it was so obvious - I just haven't read the C++ standard and was writing <code>throw()</code> specification thinking it would allow all exceptions - instead it turned out it was the exact opposite.</p>\n<p>And yes this <code>throw</code> function specification is what is causing those zero TryBlockMap  with more than one Unwind entries. Here is a VC++ 6.0 (and later) compilable example (view dissasembly of <code>f</code>):</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nstruct B {\n    int a, b;\n};\n\nstruct B1 {\n    B1() {};\n    B1(const B1&amp; tmp) {\n        a1 = tmp.a1;\n        printf(\"B1::B1 copy constr\\n\");\n    }\n    ~B1() {\n        printf(\"~B1()\\n\");\n    }\n    int a1, b1;\n};\n\nstruct A : B, B1 {\n    int b, c;\n};\n\nstruct A f() throw(int) {\n    struct A tmp;\n    return tmp;\n}\n\nint main() {\n    f();\n}\n</code></pre>\n<p>With two unwind entries. The tricky part in that scenario is that <code>throw</code> specification is not added to the type of the function so even if you have debug symbols (PDB) - you still will have your head banging against the wall.</p>\n<p>EDIT: Actually the above example won't work for newer versions of MSVC - if you want to do it there you would need to add a <code>try</code> - <code>catch</code> block encapsulating the <code>f()</code> call.</p>\n<p>Also the <code>class A</code> and all of it's parents were a test case for <a href=\"https://reverseengineering.stackexchange.com/questions/24804/what-is-the-mdisp-field-in-rtti-for-throw-used-for\">another question</a> related to the topic of C++ exception if you want to learn more but otherwise I don't think this exact structure is necessary to trigger the generation of FunctionInfo with zero TryBlocks. There just need to be something going on in <code>f</code> I think.</p>\n</div>",
            "votes": "1",
            "user": "rec",
            "time": "Apr 25, 2020 at 10:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}