{
    "title": "Is it possible to build an equivalent function just looking at the input and output of the original function?",
    "link": "https://reverseengineering.stackexchange.com/questions/21089/is-it-possible-to-build-an-equivalent-function-just-looking-at-the-input-and-out",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Imagine you are reverse engineering a software. This software uses a library, which is obfuscated and encrypted. The library contains a function, lets call it <code>secret_function</code>. This function is a pure function (i.e. it doesn't have any side effect and when called with the same arguments it returns always the same output).</p>\n<p>Assuming i can call <code>secret_function</code> how may times i want, with whichever arguments i want, but i can't peek at the implementation, is it possible to build an equivalent function in another language (python for example), only analyzing the input and output values?</p>\n<p>This is an example implementation of <code>secret_function</code>:</p>\n<pre><code>int secret_function(int a, int b) {\n    if (a == 234) {\n        return b*2 - a;\n    }\n    return a*b;\n}\n</code></pre>\n<p>A way to archive this i thought of is to call the function with every possible argument, (in the example 2^32 * 2^32, assuming a 32 bit int) and store all of them, to return them based on the arguments, like a giant lookup table. But this doesn't seem very efficient, if at all possible.</p>\n<p>UPDATE:\nYou can assume that the function is working with fixed size arguments. So no strings or variable length arrays.</p>\n</div>",
    "votes": "3",
    "answers": 4,
    "views": "2k",
    "tags": [
        "functions",
        "hash-functions"
    ],
    "user": "Rocco Mancin",
    "time": "Apr 9, 2019 at 15:55",
    "comments": [
        {
            "user": "FooTheBar",
            "text": "<span class=\"comment-copy\">I think you already answered the question with your example. The special case (234) can't be detected without evaluating the function with exactly that input. A lookup-table also only works for inputs with a defined range, use strings and you will never be able to create a lookup-table.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your problem seems to be related to what Sibyl aim at doing (<a href=\"https://github.com/cea-sec/Sibyl\" rel=\"noreferrer\">https://github.com/cea-sec/Sibyl</a>). \nIt tries based on the side effects of the function (return value, memory writes, ...) to identify a known function.\nOf course, you will need a kind of database to \"learn\" the function !</p>\n</div>",
            "votes": "6",
            "user": "Caroline",
            "time": "Apr 9, 2019 at 8:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have all the possible input and all the expected outputs, and they're not indistinguishable from encrypted/compressed data, you can find more efficient storage mechanisms than just having a large lookup table. Even a simple genetic algorithm can very quickly get you to \"use a * b, unless a == 234\" (I've actually made a solver specifically for this kind of problem, though in a more general mathematical formula case). In the end, it's a rather ordinary optimization problem, where you're balancing off the storage space, computation and preparation time needed to give the correct result. More complicated algorithms can take longer to solve, which is one of the reasons why encryption works - those algorithms are specifically designed to make it extremely labor intensive to go from a set of known inputs and outputs to the private key used for the encryption.</p>\n<p>But in any case, to have <em>certainty</em>, you must try all possible inputs. That's easy enough (though certainly laborious) for a couple integers, but quickly gets untenable for something like a string.</p>\n</div>",
            "votes": "5",
            "user": "Luaan",
            "time": "Apr 9, 2019 at 10:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rocco Mancin",
                    "text": "<span class=\"comment-copy\">The genetic algorithm you cited sounds interesting, have you got any example of that? Can genetic algorithms still be efficient if the number of possible inputs increases?</span>",
                    "time": null
                },
                {
                    "user": "Luaan",
                    "text": "<span class=\"comment-copy\">@RoccoMancin The number of inputs isn't really what makes the whole process slower (besides the verification); genetic algorithms will tend to take longer to find the solution as the problem becomes more complex (more branching, more complex operations). But of course, for any algorithm you choose, there will always be the step where you need to check all the possible inputs against all the expected outputs if you need 100% accuracy (and even then, only assuming the same inputs always produce the same output).</span>",
                    "time": null
                },
                {
                    "user": "Luaan",
                    "text": "<span class=\"comment-copy\">I have a simple genetic solver available on GitHub (<a href=\"https://github.com/Luaancz/SalemOptimizer\" rel=\"nofollow noreferrer\">github.com/Luaancz/SalemOptimizer</a>); it's adapted from a more general solver I made some time ago. This particular one only has one \"operation\" (called branch; today I'd probably go with \"expression\" or \"node\"), but that's only because the problem only really needs one - the same approach can easily be used with multiple operations, though. For a math solver, those would be things like add, multiply etc.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Unless you try all the input possibilities, as you suggested, you can only get an approximation of the function. This is basically one of the basic problems in the machine learning field, so I would look that way instead of trying to generate a lookup table for 2^32 * 2^32 values.</p>\n<p>You should obviously be careful that you won't have 100% guarantee that the function is equivalent and also remember that in particular fields how the output is computed is as important as the output itself. Take encryption functions: having the same outputs but exposing informations (due to memory leaks, power usage spikes and so on) for side channel attacks means that the \"equivalent\" function is in fact far worse than the original (to the point it might not be a suitable replacement).</p>\n</div>",
            "votes": "4",
            "user": "frollo",
            "time": "Apr 9, 2019 at 13:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This problem essentially describes the field of <a href=\"https://en.wikipedia.org/wiki/Sequential_analysis\" rel=\"nofollow noreferrer\">sequential analysis</a> coupled with <a href=\"https://en.wikipedia.org/wiki/Curve_fitting\" rel=\"nofollow noreferrer\">curve fitting</a>.</p>\n<p>If you are able to make some assumptions about the <em>inputs</em> to the secret function that your model needs to be good for, you can use this to guide your choice of algorithm for generating new values to try as inputs to the function.</p>\n<p>If you are able to make some assumptions about the <em>characteristics</em> of the function, you can use this to guide your choice of function to fit to the outputs of the secret function, which will determine how the resulting function behaves when you subject it to inputs you haven't tried yet.</p>\n<p>Even the \"simple\" example given might be interpreted many different ways in these fields. For instance:</p>\n<ul>\n<li>If you can't assume anything about the function <em>and</em> your model of it <em>must</em> reproduce exactly the correct value, you have no choice but to evaluate all 2^64 possibilities. You don't necessarily have to store them all as you go if you correctly guess a function that can reproduce every value with the right parameters.</li>\n<li>If you know that there is exactly one value of <code>a</code> that changes the function, and that it is one of two linear functions of <code>a</code> and <code>b</code> depending on this value then you'll need on average 2^31 trials to find the magic <code>a</code> value, significantly shrinking the problem.</li>\n<li>If you don't require an exact reproduction then you can begin reasoning from a value judgement about what errors are acceptable. For instance, a function which is completely wrong 2^-32 of the time might be perfectly acceptable, so if you know that the special case is no bigger than this you can just pick a few random values (almost certainly not accidentally picking <code>a = 234</code>) and solve the linear equations.</li>\n<li>You might not reasonably know that the function has linear parts, but know that it's no more complex than some other function. The parameters to this more complex function, when fitted to outputs from the secret function, would produce a function which matches linear behaviour for the values obtained from the function, but wouldn't necessarily be guaranteed to behave linearly for untested values; the possible behaviours of any function you choose to fit must hence endeavour to match the range of behaviours that can be considered plausible under your assumptions.</li>\n</ul>\n<p>These are big fields, and there are plenty of options that may be available to you with the benefit of the specifics of your problem.</p>\n</div>",
            "votes": "2",
            "user": "Will",
            "time": "Apr 10, 2019 at 8:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}