{
    "title": "What is *(_BYTE *), __usercall, eax and edi [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/13703/what-is-byte-usercall-eax-and-edi",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2016-10-20 03:26:13Z\">8 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/13703/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I am trying to understand some algorithm of how the thing works. Here is the function I got from decompiling my executable with Hey Rays. </p>\n<p>I want to run this function to see the result and then understand how it works.</p>\n<p>So the first thing I want to know what all the signature of this function means?</p>\n<pre><code>__usercall sub_401960&lt;eax&gt;(int a1&lt;edi&gt;)\n__usercall\neax and diamond &lt;&gt;\nedi and diamond &lt;&gt;\n</code></pre>\n<p>Then I want to know what these things mean:</p>\n<pre><code>*(_BYTE *)\n</code></pre>\n<p>and </p>\n<pre><code>__security_cookie\n</code></pre>\n<p>and what they're doing in the following code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n\nint __usercall sub_401960&lt;eax&gt;(int a1&lt;edi&gt;)\n{\n  int result; // eax@1\n  signed int v2; // esi@1\n  char v3; // cl@2\n  char v4; // cl@3\n  char v5; // cl@8\n  char v6; // cl@9\n  char v7; // cl@14\n  char v8; // cl@15\n  char v9; // cl@20\n  char v10; // cl@21\n\n  result = 0;\n  v2 = 0;\n  do\n  {\n    v3 = *(_BYTE *)(v2 + a1);\n    if ( (unsigned __int8)(v3 - 48) &gt; 9u )\n    {\n      if ( (unsigned __int8)(v3 - 97) &gt; 5u )\n      {\n        if ( (unsigned __int8)(v3 - 65) &gt; 5u )\n          return result;\n        v4 = v3 - 55;\n      }\n      else\n      {\n        v4 = v3 - 87;\n      }\n    }\n...\n  return result;\n}\n</code></pre>\n<p>Sorry if I've asked such newbie question</p>\n<p>What I want is to run the thing!</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "9k",
    "tags": [
        "ida",
        "assembly",
        "c",
        "hexrays"
    ],
    "user": "alexey polusov",
    "time": "8 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, OP mentioned several times he'd like to execute the function. Which should be pretty easy using a debugger (IDA has decent debugging capabilities, or you could give <a href=\"http://ollydbg.de/version2.html\" rel=\"nofollow\">ollydbg</a> a try)</p>\n<p>I'll answer the questions in the order in which they appear:</p>\n<blockquote>\n<p>what is <code>__usercall</code> and diamond-wrapped registers in a function's definition? </p>\n</blockquote>\n<p><code>__usercall</code> is a \"virtual calling convention\" in IDA. This is not a real world calling convention, but instead it let an IDA user to specifically describe how parameters are passed to the function. This is particularly useful when parameters are passed in some unconventional way, and you can't use either <code>__stdcall</code>, <code>__fastcall</code>, etc.</p>\n<p>The diamond wrapped register names in the prototype are used in <code>__usercall</code> to assign a specific register to that variable (or return address) in the function's body.</p>\n<p>The prototype you've got (<code>__usercall sub_401960&lt;eax&gt;(int a1&lt;edi&gt;)</code>) means the return value is placed in <code>eax</code> and <code>a1</code> is passed to the function in <code>edi</code>.</p>\n<blockquote>\n<p>What does <code>*(_BYTE *)</code> mean?</p>\n</blockquote>\n<p>This actually has two distinctive parts, evaluated one after the other.</p>\n<p>First, <code>(_BYTE *)</code> casts a value or a register to be a byte pointer. This is similar to assigning the value to a C variable which is defined as <code>byte *</code>.</p>\n<p>Second, <code>*</code> dereferences the address and retrieves the value in that address, value is assumed to be of the type of the pointer, in our case <code>_BYTE</code>.</p>\n<p>This is plain C syntax, read more about it <a href=\"https://www.google.com/?q=c%20variable%20casting\" rel=\"nofollow\">online</a>. Good C understanding is very beneficial to reverse engineers.</p>\n<blockquote>\n<p>What is <code>__security_cookie</code>?</p>\n</blockquote>\n<p><code>__security_cookie</code> is a variable defined in Microsoft's Visual Studio's compiler when <a href=\"https://en.wikipedia.org/wiki/Buffer_overflow_protection#Canaries\" rel=\"nofollow\">stack canaries</a> are used as stack protections. These are variables that are set to a specific (non deterministic) value at the start of the function, and are validated for the same value when the function ends.</p>\n<p>This is done to make sure no one managed to overflow a buffer defined in the function's stack, and overwrote return addresses. Because such an overflow must also override the <code>__security_cookie</code> which has an unknown value.</p>\n</div>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Oct 12, 2016 at 15:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>*(BYTE *) means take a byte from the pointer provided in address </p>\n<p>if address is 12345678 and it holds  hello </p>\n<p>then  x = *(byte *) (12345678 + counter) if counter is 0 \nx will be 'h' and so on</p>\n<p>the truncated part  checks for [0..9a..eA..E] and returns either 0 (result \nor 10,9,8,7,6 to v4<br/>\ndon't see any reference to __security_cookie in Your query     </p>\n<p>but if you were asking in general what it meant then you should read about stack canaries , stack smashing protection , gscookie etc </p>\n<p>it is a part of implementation to protect against stack / buffer overflow exploits / vulnerabilities</p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Oct 12, 2016 at 11:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}