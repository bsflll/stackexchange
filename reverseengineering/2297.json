{
    "title": "windows kernel debugging on Mac host (using VMware fusion)",
    "link": "https://reverseengineering.stackexchange.com/questions/2297/windows-kernel-debugging-on-mac-host-using-vmware-fusion",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>in windows host we can use WinDBG and serial port communication for connection to windows kernel and the most easiest way is using VirtualKD. </p>\n<p>now the question is, is there any possibility of doing same thing (VirtualKD/WinDBG alternative) using a MacOS host and VMware Fusion? i can use GDB remote debugging or i have to do host to host (VM to VM) for debugging and it's even possible to kernel debugging using two VM?</p>\n<p>Thanks</p>\n</div>",
    "votes": "8",
    "answers": 3,
    "views": "6k",
    "tags": [
        "gdb",
        "windbg",
        "debugging"
    ],
    "user": "n00b",
    "time": "Jun 19, 2013 at 20:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, you can do kernel debugging using two VMs. You will need to connect their serial ports. </p>\n<p><a href=\"http://www.vmware.com/support/ws3/doc/ws32_devices3.html#1023828\" rel=\"nofollow\">http://www.vmware.com/support/ws3/doc/ws32_devices3.html#1023828</a> </p>\n<p>The above is for Windows. OS X setup needs to be done manually: <a href=\"http://www.dcl.hpi.uni-potsdam.de/research/WRK/2011/01/running-wrk-on-mac-os-with-vmware-fusion/index.html\" rel=\"nofollow\">http://www.dcl.hpi.uni-potsdam.de/research/WRK/2011/01/running-wrk-on-mac-os-with-vmware-fusion/index.html</a></p>\n<p>In the connection string on WinDbg/IDA side use the serial port, <strong>not</strong> a pipe as you're probably used to.</p>\n<p>VirtualKD only works for VMWare running on Windows host so it won't help here.</p>\n<p>GDB debugging is always possible too (with the <code>debugStub.*</code> settings). The advantage is that you don't need a second VM and can debug anything at all, including BIOS and any part of the kernel. The disadvantage is that you don't have nice meta-info provided by WinDbg such as modules, processes and symbols.</p>\n</div>",
            "votes": "6",
            "user": "Vitaly Osipov",
            "time": "Feb 16, 2014 at 15:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Kernel Debugging with VMWare Fusion</h1>\n<p>Power on the target VM, in an elevated command prompt: </p>\n<pre><code>bcdedit /debug on\nbcdedit /dbgsettings serial debugport:1 baudrate:115200\n</code></pre>\n<p>Power off both the target (debuggee) and development (debugger) VMs.  </p>\n<p>Navigate to the .vmwarevm package for each VM, right click, select \"Show Package Contents\" (or cd into the VM's package).</p>\n<p>Remove all references to the existing <code>serial0</code> port, which is used for config-free printing.  Copy-and-paste the configuration below, modifying it where necessary.</p>\n<pre><code>serial0.present = \"TRUE\"\nserial0.pipe.endPoint = \"client\" # change to \"server\" for the target VM\nserial0.fileType = \"pipe\"\nserial0.yieldOnMsrRead = \"TRUE\"\nserial0.startConnected = \"TRUE\"\nserial0.fileName = \"/tmp/kdpipe\" # or any other world-writeable path\n</code></pre>\n<p>Power on your VMs, and use Windbg from the development VM to connect over com0.</p>\n<h2>VMWare Fusion Power-On Order</h2>\n<ul>\n<li>Terminology:\n<ul>\n<li>Client: You run windbg on this</li>\n<li>Server: You break the kernel on this</li>\n</ul></li>\n<li>Steps:\n<ul>\n<li>Start the server first, since it is the pipe \"server\" and must create the pipe.</li>\n<li>Start the client next.  </li>\n<li>Start windbg, and get it waiting on com0.</li>\n<li>The server will have booted all the way into windows by now, so you won't be able to connect yet</li>\n<li>Restart the server</li>\n</ul></li>\n</ul>\n<p>Voila</p>\n</div>",
            "votes": "4",
            "user": "Zach Riggle",
            "time": "Feb 18, 2014 at 23:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Carlos Garcia",
                    "text": "<span class=\"comment-copy\">Any experience with Windows 8.1 as server? This solution worked with Windows 7 but I'm not able to make it work with a Windows 8.1 VM (Fusion)</span>",
                    "time": null
                },
                {
                    "user": "Carlos Garcia",
                    "text": "<span class=\"comment-copy\">Nevermind, configuration issue.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In my experience VirtualKD will not work in this setup. I tried to get VisualDDK (same people and uses VirtualKD) to work in this exact setup but had no joy. In the end I installed bootcamp on my Mac, with Windows 7 as the host and VMWorkstation running my targets. Everything worked fine and it was all gravy. </p>\n</div>",
            "votes": "1",
            "user": "mark",
            "time": "Feb 20, 2014 at 20:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}