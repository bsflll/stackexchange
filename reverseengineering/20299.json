{
    "title": "How to identify base64 encode/decode in assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/20299/how-to-identify-base64-encode-decode-in-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How to identify in assembly base 64 encode/decode with Ida. Is there any magic constant that I can search? Or maybe a plugin that find that?</p>\n<p><code>FindCrypt2</code>  Ida plugin not find that</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "assembly",
        "ida-plugin"
    ],
    "user": "Keystone",
    "time": "Jan 7, 2019 at 17:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One of the ways <a href=\"http://opensecuritytraining.info/ReverseEngineeringMalware.html\" rel=\"nofollow noreferrer\">that I have taught</a> (see Day 1 Part 11) to find a base64 alphabet is to look for a sequence of 64 bytes with an <a href=\"https://rosettacode.org/wiki/Entropy\" rel=\"nofollow noreferrer\">Shannon entropy</a> of 6 (on a scale of 1-8).  Beware that in addition to Base64 alphabets, that will also find other high-entropy data, such as compressed or encrypted code or strings, as well as encryption constants.</p>\n<p>For your standard Base64 alphabet, using IDA, press alt-B, then enter (including the double-quotes) \"ABCDEFGHIJKLMNOPQRSTUV\" or some other subset of the standard alphabet.  I recommend also selecting the \"find all\" option, which makes it easier to see and skip false matches.</p>\n</div>",
            "votes": "1",
            "user": "knowmalware",
            "time": "Jan 10, 2019 at 0:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">entropy of 6 on what scale? 0 to 8?</span>",
                    "time": null
                },
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">Why to insert double-quotes?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Keystone to search for a string instead of hex bytes</span>",
                    "time": null
                },
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky for search string I can press alt+t</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Alt-T won't find strings inside data or instructions. also it's slow</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The common base64 key contains <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code>. However, remember that IDA Pro will convert ASCII text for you, so you should have no reason to go looking through the raw bytes of the file in hex. In fact, even a hex editor such as HxD or 010 Editor will convert the string data from hex bytes to chars and display them on the right side of the screen. See below an example in 010 Editor of such key:</p>\n<p><a href=\"https://i.sstatic.net/oAcVI.png\" rel=\"nofollow noreferrer\"><img alt=\"010 Editor Base64 key in binary\" src=\"https://i.sstatic.net/oAcVI.png\"/></a></p>\n<p>And in IDA Pro IDA View window looking at segments:</p>\n<p><a href=\"https://i.sstatic.net/t1a8n.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA Pro Base64 Key\" src=\"https://i.sstatic.net/t1a8n.png\"/></a></p>\n<p>IDA Pro Strings window (can use Ctrl+F here):\n<a href=\"https://i.sstatic.net/m4rNX.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA Pro base64 key strings window\" src=\"https://i.sstatic.net/m4rNX.png\"/></a></p>\n<p>Nevertheless, if you need to go looking for a constant, use <a href=\"http://ascii%20table\" rel=\"nofollow noreferrer\">the ASCII table</a> and convert the above string into bytes manually. E.G. 'A' is 41h, 'B' is 42h, so if we were looking for AB, we'd be looking for 41 42. Don't forget to take into account the endianness of the target architecture of the software system you are working with; if the bytes are stored on disk in little endian for the file format, than the base64 key's bytes will be encoded backwards and you will need to search for it as such.</p>\n<p>One caveat here is that the aforementioned Base64 key is the <em>standard</em> Base64 key. You may need to search for <em>modified Base64 keys</em>, meaning that instead of <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> we have \nsomething like <code>FGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDE</code>. You can see that with this modified Base64 key, we've simply rotated the key to the left 5 times so that if a decoding algorithm were to attempt to decode this as standard Base64, it would not work.</p>\n</div>",
            "votes": "3",
            "user": "the_endian",
            "time": "Jan 7, 2019 at 17:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">It's also possible that it's implemented entirely in code (it can be done in fewer bytes than the entire dictionary), and thus has no dictionary at all.</span>",
                    "time": null
                }
            ]
        }
    ]
}