{
    "title": "Grouping functions based on their placement/order in the binary",
    "link": "https://reverseengineering.stackexchange.com/questions/3167/grouping-functions-based-on-their-placement-order-in-the-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Can I group functions based on their place in the binary? Can I assume functions next to each othe belong to the same logical group, or at least they have similar functionality? I suspect that the ordering/layout of the functions are decided compile time, however I still don't know what exactly controls this.</p>\n<p>Anyway, here is an example for better understanding my question. \nLet's say I have 3 functions that IDA named for me :</p>\n<pre><code>sub_00543210\nsub_00543211\nsub_00543212\n</code></pre>\n<p>Later during the analysis I find out the name of two functions.</p>\n<pre><code>foo_bar1\nsub_00543211\nfoo_bar3\n</code></pre>\n<p>At this point I would say that the name of the 2nd function, surrounded by found function names is definitely has something to do with \"foo\" so I'll name it \"foo_bar2\". (Which later it turned out to be true.)</p>\n<p><strong>Is this a valid assumption, or was this a special occasion?</strong></p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "483",
    "tags": [
        "ida",
        "compilers",
        "memory",
        "functions"
    ],
    "user": "Dominik Antal",
    "time": "Dec 12, 2013 at 5:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Often times you <em>will</em> see patterns like this in a binary. It's certainly not guaranteed by any means, but you will typically see like functions placed near each other.</p>\n<p>What do I mean by that? Well consider how a typical C program might be laid out:</p>\n<pre><code>foo.c\n    static foo_1()\n    static foo_2()\n    use_foo()\n\nbar.c\n    static bar_1()\n    static bar_2()\n    use_bar()\n\nmain.c\n    usage()\n    process_args()\n    main()\n</code></pre>\n<p>People typically compile each C file by itself (into a .o) and then those object files are linked together to form the final binary.  Most of the time, <em>the linker will not reorder the functions</em>.  So this is why you can expect to see similar or related functions right around each other.</p>\n<p>Additionally, this holds true for libraries that the binary is statically linked against.  If an IDA FLIRT signature matches, you'll often see those standard library functions right next to each other as well.</p>\n<p>This fact <em>really</em> helps when you find a standard compression/encryption/xml/whatever function, because most of the time, you can pull the source code and quickly start identifying the rest of the library calls (or at least know what functions you can ignore).</p>\n</div>",
            "votes": "2",
            "user": "Jonathon Reinhart",
            "time": "Dec 12, 2013 at 5:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">Thank you for the answer. My <a href=\"http://reverseengineering.stackexchange.com/questions/3166/mapping-an-external-modules-source-code-to-assembly-extracting-information-fr\">second question</a> is somehow related to your answer :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Normally the linker will leave the functions in their original order.</p>\n<p>However, techniques like <em>Working-Set Tuning</em> (see also <em>Profile-Guided Optimization</em>) can profile the program to see which parts are called the most often, then re-link it with that information in mind. This will clump the most frequently used code together (not only reordering functions, but also possibly splitting them into separate chunks) for memory paging purposes, and of course throw the original function ordering out the window.</p>\n</div>",
            "votes": "3",
            "user": "DCoder",
            "time": "Dec 12, 2013 at 6:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}