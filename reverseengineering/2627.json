{
    "title": "What is the meaning of movabs in gas/x86 AT&T syntax?",
    "link": "https://reverseengineering.stackexchange.com/questions/2627/what-is-the-meaning-of-movabs-in-gas-x86-att-syntax",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just found a strange instruction by assembling (with <code>gas</code>) and disassembling (with <code>objdump</code>) on a <code>amd64</code> architecture.</p>\n<p>The original <code>amd64</code> assembly code is:</p>\n<pre><code>mov 0x89abcdef, %al\n</code></pre>\n<p>And, after <code>gas</code> compiled it (I am using the following command line: <code>gcc -m64 -march=i686 -c -o myobjectfile myassemblycode.s</code>), <code>objdump</code> gives the following code:</p>\n<pre><code>a0 df ce ab 89 00 00    movabs 0x89abcdef, %al\n</code></pre>\n<p>My problem is that I cannot find any <code>movabs</code>, nor <code>movab</code> in the Intel assembly manual (not even a <code>mova</code> instruction).</p>\n<p>So, I am dreaming ? What is the meaning of this instruction ? My guess is that it is a quirks from the GNU binutils, but I am not sure of it.</p>\n<p>PS: I checked precisely the spelling of this instruction, so it is NOT a <code>movaps</code> instruction for sure.</p>\n</div>",
    "votes": "33",
    "answers": 5,
    "views": "47k",
    "tags": [
        "x86",
        "amd64"
    ],
    "user": "perror",
    "time": "Aug 12, 2013 at 16:41",
    "comments": [
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\">I think the first 5 bytes is <code>a0 ef cd ab 89</code>, not <code>a0 df ce ab 89</code></span>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<span class=\"comment-copy\"><a href=\"http://stackoverflow.com/questions/19415184/load-from-a-64-bit-address-into-other-register-than-rax\" title=\"load from a 64 bit address into other register than rax\">stackoverflow.com/questions/19415184/…</a></span>",
            "time": null
        },
        {
            "user": "jww",
            "text": "<span class=\"comment-copy\">Also see <a href=\"http://reverseengineering.stackexchange.com/q/6540/5853\">When was the MOVABS instruction introduced?</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's the <a href=\"http://sourceware.org/binutils/docs/as/i386_002dVariations.html\">official documentation for <code>gas</code></a>, quoting the relevant section:</p>\n<blockquote>\n<p>In AT&amp;T syntax the size of memory operands is determined from the last\n  character of the instruction mnemonic. Mnemonic suffixes of <code>b</code>, <code>w</code>,\n  <code>l</code> and <code>q</code> specify byte (8-bit), word (16-bit), long (32-bit) and\n  quadruple word (64-bit) memory references. Intel syntax accomplishes\n  this by prefixing memory operands (not the instruction mnemonics) with\n  <code>byte ptr</code>, <code>word ptr</code>, <code>dword ptr</code> and <code>qword ptr</code>. Thus, Intel <code>mov\n  al, byte ptr foo</code> is <code>movb foo, %al</code> in AT&amp;T syntax. </p>\n<p>In 64-bit code, <code>movabs</code> can be used to encode the <code>mov</code> instruction\n  with the 64-bit displacement or immediate operand.</p>\n</blockquote>\n<p>Particularly read the last sentence.</p>\n<p><strong>Note:</strong> Found via Google operator <code>inurl</code>, searching for <code>movabs inurl:sourceware.org/binutils/</code>.</p>\n</div>",
            "votes": "29",
            "user": "0xC0000022L",
            "time": "Aug 12, 2013 at 17:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I looked at the gas manual but I did not find the right section. Thanks a lot  0xC0000022L ! :-)</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">How can you move a 32 bit number into al?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@LưuVĩnhPhúc: well you can only with losses, but this has nothing to do with my answer or the question, so you better ask it as a new question.</span>",
                    "time": null
                },
                {
                    "user": "Ruslan",
                    "text": "<span class=\"comment-copy\">What's interesting, gdb gives me <code>48 b8 &lt;imm64&gt;</code> bytes as <code>movabs rax, &lt;imm64&gt;</code> even in <code>disassembly-flavor=intel</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>movabs is used for absolute data moves, to either load an arbitrary 64-bit constant into a register or to load data in a register from a 64-bit address.</p>\n<p>Source: <a href=\"http://www.ucw.cz/~hubicka/papers/amd64/node1.html\">http://www.ucw.cz/~hubicka/papers/amd64/node1.html</a></p>\n</div>",
            "votes": "9",
            "user": "ekse",
            "time": "Aug 12, 2013 at 17:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you find yourself often deciphering AT&amp;T syntax x86/x64 assembler, Solaris manuals may be of help: <a href=\"https://docs.oracle.com/cd/E53394_01/html/E54851/index.html\" rel=\"nofollow noreferrer\">x86 Assembly Language Reference Manual </a>.</p>\n</div>",
            "votes": "8",
            "user": "Michał Rybak",
            "time": "Aug 6, 2017 at 16:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">good downloadable reference  thanks igorsk for the link</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I noticed that GAS translates</p>\n<pre><code>movq $0x80000000, %rax\n</code></pre>\n<p>into</p>\n<pre><code>movabs $0x80000000, %rax\n</code></pre>\n<p>But values smaller than 0x80000000 are not translated into <code>movabs</code>.\nThat is, <code>movq $0x7fffffff, $rbx</code> is NOT translated into <code>movabs $0x7fffffff, %rbx</code>. You can verify with <code>disas</code> disassemble command within GDB.</p>\n<p>Maybe the reason is that <code>$0x80000000</code> is over the signed positive number range of 32 bit and needs to be translated into 64-bit integer.  For the reason, GAS translates such larger number into  64-bit long integer and therefore uses <code>movabsq</code> instruction instead of <code>movq</code> instruction whose immediate source is limited to 32 bit constant.</p>\n</div>",
            "votes": "3",
            "user": "Michael Karcher",
            "time": "Jul 31, 2024 at 22:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">this is incorrect <code>movq $0x80000000, %rax</code> moves the immediate 0x80000000 into rax whereas <code>movabs 0x80000000, %rax</code> loads the quadword at address 0x80000000 to rax</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">@phuclv You are right, this is most likely a typo in the OP (missing <code>$</code> sign). I suggested the correspondig edit.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Initialization of local variables with movabs</h2>\n<p>Yes this instruction should move absolute hardcoded data embedded into instruction itself into register,\nor data from absolute address. But I got into this instruction only recently when I wanted to know where constant data for initialization of local variables are because I didnt find them in <em>.rodata</em> ELF section.</p>\n<p>So basically GCC uses this instruction to initialize automatic variables on stack!</p>\n<p>Lets dive into code to find out how this instruction is used.\nAs we see in this code example  we have local variable <em>test</em> initialized:</p>\n<p><a href=\"https://i.sstatic.net/TdZka.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/TdZka.png\"/></a></p>\n<p>We know that local variables are put in stack and I was interested to know\nwhere and how local variables get initialized.</p>\n<p>When we dump .text section with objdump we see that this constant <em>0x41414141414141</em> is realy embedded in the code itself:</p>\n<pre><code>000000000000116c &lt;get_message2&gt;:\n116c:   f3 0f 1e fa             endbr64 \n1170:   55                      push   %rbp\n1171:   48 89 e5                mov    %rsp,%rbp\n1174:   48 83 ec 10             sub    $0x10,%rsp\n1178:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax\n117f:   00 00 \n1181:   48 89 45 f8             mov    %rax,-0x8(%rbp)\n1185:   31 c0                   xor    %eax,%eax\n1187:   48 b8 41 41 41 41 41    movabs $0x41414141414141,%rax\n118e:   41 41 00 \n</code></pre>\n<hr/>\n<p>As we see disassembled function and register content from GDB:</p>\n<p><a href=\"https://i.sstatic.net/exmLP.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/exmLP.png\"/></a></p>\n<p>So when we look at code we see that this string <em>test</em>, in HEX notation <em>0x0x41414141414141</em> is hardcoded in <strong>movabs</strong> instruction, and is put in <strong>rax</strong> register, and then content of <strong>rax</strong> register is put on address in <strong>rbp</strong> minus offset 0x10:</p>\n<pre><code>   0x000055555555517d &lt;+27&gt;:    movabs $0x41414141414141,%rax\n   0x0000555555555187 &lt;+37&gt;:    mov    %rax,-0x10(%rbp)\n</code></pre>\n<p>So this local string will be placed on address <strong>0x7fffffffdde0</strong> - <strong>0x10</strong>\nWe see that this local string is placed in stack frame of function\non address <strong>0x7fffffffddd0</strong>, and this we see when we dump the stack:</p>\n<pre><code>(gdb) x/16gx $sp\n0x7fffffffddd0: 0x0041414141414141  0x6a8574f1d6812b00\n0x7fffffffdde0: 0x00007fffffffddf0  0x000055555555515b\n0x7fffffffddf0: 0x0000000000000001  0x00007ffff7daad90 \n</code></pre>\n<p>So we ended with initialized local string on a stack just as we expected.</p>\n</div>",
            "votes": "1",
            "user": "Dražen Grašovec",
            "time": "Nov 27, 2023 at 14:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}