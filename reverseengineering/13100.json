{
    "title": "How to get the list of strings within IDA's string window in my script?",
    "link": "https://reverseengineering.stackexchange.com/questions/13100/how-to-get-the-list-of-strings-within-idas-string-window-in-my-script",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to write some scripts that do some string searching through the disassembly in IDA. Currently, I loop through all the disassembly, MinEA() to MaxEA() and use idc.FindText() to see if a potential string is in the disassembly. Although this works, its very time consuming. I was wondering if there was a way I could just use an API method to get all the strings in IDAs string window. For example, I was able to get all the imports used in the import window by using idaapi.get_import_module_qty() and idaapi.enum_import_names(i, import_call_back). That's very fast and I can easily just check if something has been imported. Is there something similar that will allow me to get all the strings from the strings window? If not, is there a less time-consuming method of string searching that is possible? Thanks for any input.</p>\n</div>",
    "votes": "4",
    "answers": 3,
    "views": "12k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Eccmms",
    "time": "Jul 20, 2016 at 15:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It looks like that the following is what you are looking for or at least similar:</p>\n<pre><code>import idautils\nsc = idautils.Strings()\n\nfor s in sc:\n    print \"%x: len=%d type=%d -&gt; '%s'\" % (s.ea, s.length, s.type, str(s))\n</code></pre>\n<p>Tested and works in IDA 6.8, 64 bit.\nThe details about the class Strings in idautils module are here: <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idautils.Strings-class.html\" rel=\"noreferrer\">https://www.hex-rays.com/products/ida/support/idapython_docs/idautils.Strings-class.html</a></p>\n</div>",
            "votes": "5",
            "user": "w s",
            "time": "Jul 21, 2016 at 4:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ray",
                    "text": "<span class=\"comment-copy\">Apparently, <code>s.type</code> has changed to <code>s.strtype</code> in IDA 7.</span>",
                    "time": null
                },
                {
                    "user": "wanghua shi",
                    "text": "<span class=\"comment-copy\">how to get the strings of each function ?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>another variation to get all the strings </p>\n<pre><code>import idaapi as ia\nsc = ia.string_info_t()\nfor i in range(0,ia.get_strlist_qty()):\n    ia.get_strlist_item(i,sc)\n    print ia.get_ascii_contents(sc.ea,sc.length,sc.type)\n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Jul 21, 2016 at 20:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Tey'",
                    "text": "<span class=\"comment-copy\">That's much better because calling <code>idautils.Strings()</code> regenerates the list of strings while this method just re-use the current list of strings.</span>",
                    "time": null
                },
                {
                    "user": "molenzwiebel",
                    "text": "<span class=\"comment-copy\">On IDA 7.7 with Python 3, swap the <code>i</code> and <code>sc</code> arguments to <code>get_strlist_item</code> and use <code>get_strlit_contents</code> instead of <code>get_ascii_contents</code> (note: returns bytes).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found a crude yet completely different solution without having to mess with Python 2.7 .  All with IDA GUI and with the help of side Regex</p>\n<ol>\n<li>Open desired file in IDA, let it load</li>\n<li>View -&gt; Open subviews -&gt; Strings</li>\n<li>Ctrl+A -&gt; Right-Click -&gt; Copy</li>\n<li>Paste data to some regex-supporting text editor (I use Notepad++)</li>\n<li>Go to find&amp;replace with regex (On Notepad++: Replace, search mode \"Regular expression\" with \". matches newline\" UNticked):</li>\n</ol>\n<ul>\n<li>First, trim all \" \" before carriage return,\n<pre><code>___Find: \\x20\\x20+\\r\nReplace: \\r\n</code></pre>\n</li>\n<li>Then (as of Jan 2021) - in Notepad++ there is a bug, that makes it regex <code>^</code> match literal <code>\\r</code>. To work around it, you can do this: add a newline on the top (if you have the useless human readable headers on top, replace then with the newline). Count how many characters there are before the strings text begins (I had <strong>27</strong>), and then perform,\n<pre><code>___Find: \\n.{27}?\nReplace:        \n</code></pre>\n</li>\n</ul>\n<p><strong>Warning</strong>: if you have a different count of characters before the strings text begins, replace the number with yours!</p>\n<ol start=\"6\">\n<li>Finally, remove the first newline and your data is ready for work</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "TAbdiukov",
            "time": "Jan 20, 2021 at 6:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}