{
    "title": "Exporting dll out of a process memory",
    "link": "https://reverseengineering.stackexchange.com/questions/30354/exporting-dll-out-of-a-process-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Idk if this is asked before sorry</p>\n<p>So I tried something with Process Hacker and Windbg but it couldn't help me\nThe dll is injected using <code> CreateRemoteThread</code>, <code>LoadLibrary</code> i tried looking through files but im a newbie so i didn't got so much experience.\nWhat way would you guys prefer to export a dll of process memory?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "678",
    "tags": [
        "dll",
        "memory-dump"
    ],
    "user": "Kreapet",
    "time": "May 1, 2022 at 13:34",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Do you mean \"export\" as in save the content of the loaded DLL (using the original loaded DLL files would be easier) or do you mean \"export\" like unload/remove the loaded library?</span>",
            "time": null
        },
        {
            "user": "Kreapet",
            "text": "<span class=\"comment-copy\">saving it, is it possible?</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Why? You can use Sysinternals ProcessMonitor to check which libraries are loaded and the simply copy the DLL file from file-system. No need to extract/export anything from a running process.</span>",
            "time": null
        },
        {
            "user": "Kreapet",
            "text": "<span class=\"comment-copy\">I tried it but the dll gets deleted after injection.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">If you know the file name or the directory you can create a program that waits for file-system modifications and automatically opens and locks all created files in a folder, or if possible hook the process the dll is injected into overwrite Load library method (e.g. using Frida) and let it wait a few seconds, then you have plenty of time to copy the file.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the library is indeed loaded using LoadLibrary, it must exist on disk. You can, for example,  check the list of modules using Process Explorer or similar and look for it on disk, or catch the load event in the debugger - the file should be available at that point even if itâ€™s deleted afterwards.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "May 2, 2022 at 20:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kreapet",
                    "text": "<span class=\"comment-copy\">the file isn't shown in modules list i will test catching the load event in the debugger</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Putting breakpoint on LoadLibrary is another option</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Just a thought, how do you know the DLL remains resident after being loaded? In theory it'd also be possible for a DLL to get loaded, do whatever it wants to do and then get unloaded. But Igor's suggestions are probably <i>the</i> way to go for starters.</span>",
                    "time": null
                }
            ]
        }
    ]
}