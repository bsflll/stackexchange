{
    "title": "Determining communication protocol",
    "link": "https://reverseengineering.stackexchange.com/questions/298/determining-communication-protocol",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have two chips that are connected using two lines. One appears to be the clock line (50% duty cycle), but it doesn't have to be (sometimes constant high). The other line appears to be totally random, but still digital. It might be data.</p>\n<p>There is a third line between the chips, but it appears to be for something else - it's on a way slower speed and is on another place on the PCB. It also doesn't use a pull-up, while the other two do.</p>\n<p>How can I find out what protocol (I2C, SPI, RS232, ...) is being used on the lines, if any standard?</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "1k",
    "tags": [
        "communication",
        "pcb"
    ],
    "user": null,
    "time": "Apr 4, 2013 at 5:20",
    "comments": [
        {
            "user": "cb88",
            "text": "<span class=\"comment-copy\">Might be related <a href=\"http://arduino.cc/forum/index.php?topic=19191.0\" rel=\"nofollow noreferrer\">arduino.cc/forum/index.php?topic=19191.0</a></span>",
            "time": null
        },
        {
            "user": "Robert Mason",
            "text": "<span class=\"comment-copy\">The only real way is to look at the traffic, apply each standard, and see if it works...  The clock with sometimes constant high could an inverted clock for i2c with clock stretching, but that doesn't explain the third wire.</span>",
            "time": null
        },
        {
            "user": "user187",
            "text": "<span class=\"comment-copy\">@RobertMason I don't know the traffic, though I do know the devices are probably sending 8-bit bytes. <i>The third wire does not have to be part of the protocol</i>, it might be there for other purposes as well.</span>",
            "time": null
        },
        {
            "user": "Mellowcandle",
            "text": "<span class=\"comment-copy\">It sounds like i2c with the third line irrelevant.</span>",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "<span class=\"comment-copy\">The easiest way to do this is to look at the chip datasheets usually. Then you don't need to do any work at all.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My guess is that the protocol is standard, using a non standard protocol between two devices involves using bitbanging which is not very useful.\nLet's assume then that the protocol is standard.\nIt's not SPI, SPI needs 4 lines To work. I2C needs two, RS232 needs only two.\nI don't know what the third line job is, maybe it's used for trigerring/synchronization between the chips.</p>\n<p>What now ? I would open the data sheet of the microcontroller and see what protocols the chips supports, usually if they are new 32bit SOC, they all support CAN, SPI, USART, etc.\nThen I would check the pinout of the corresponding lines, to see to which ports they are connected on the chip. This will point you to the exact protocol used.</p>\n<p>Then connect a logic analyzer, such as this <a href=\"http://www.saleae.com/logic/\" rel=\"nofollow\">one</a>, which is bundled with a software that can dumo the data transfered acordding to the protocol.</p>\n</div>",
            "votes": "2",
            "user": "Mellowcandle",
            "time": "Apr 5, 2013 at 12:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Cybergibbons",
                    "text": "<span class=\"comment-copy\">I have found bit-banging to be incredibly common in embedded systems. But the datasheet would be my first approach, especially if one of the two chips is not a microcontroller.</span>",
                    "time": null
                }
            ]
        }
    ]
}