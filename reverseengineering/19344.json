{
    "title": "Why having a function with just one instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/19344/why-having-a-function-with-just-one-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I decompiled a program where there is a function, which has only a single useful instruction which is</p>\n<pre><code>xor eax, eax\nretn\n</code></pre>\n<p>What it the purpose of having this in an extra function, instead of using <code>xor eax, eax</code> or <code>mov eax, 0</code> at the place where the call happens to be?</p>\n<ul>\n<li>Notes:\n\n<ol>\n<li>Most of the time, it is called directly <code>call sub_41063A</code> (address of the function), sometimes its address is loaded with <code>mov esi, offset sub_41063A</code></li>\n<li>It is an x68_64-architecture</li>\n<li>I don't know, which compiler was used</li>\n</ol></li>\n</ul>\n<p>Edit:</p>\n<p>Code examples: (I named the function 'clearEAX')</p>\n<p>The function Itself: </p>\n<pre><code>.text:000000000041063A\n.text:000000000041063A clearEAX        proc near               ; CODE XREF: sub_40E4B4+37p\n.text:000000000041063A                                         ; sub_40E528+DFp ...\n.text:000000000041063A                 xor     eax, eax        ; Logical Exclusive OR\n.text:000000000041063C                 retn                    ; Return Near from Procedure\n.text:000000000041063C clearEAX        endp\n.text:000000000041063C\n.text:000000000041063D\n</code></pre>\n<p>Its address being referenced (0x4113B2)\nIt being called directly in context: (0x4113CB)</p>\n<pre><code>.text:00000000004113AC                 push    rbp\n.text:00000000004113AD                 mov     edx, offset unk_514200\n.text:00000000004113B2                 mov     esi, offset clearEAX\n.text:00000000004113B7                 push    rbx\n.text:00000000004113B8                 mov     ebx, edi\n.text:00000000004113BA                 sub     rsp, 28h        ; Integer Subtraction\n.text:00000000004113BE                 mov     rdi, rsp\n.text:00000000004113C1                 call    nullsub_3       ; Call Procedure\n.text:00000000004113C6                 mov     edi, offset unk_514200\n.text:00000000004113CB                 call    clearEAX        ; Call Procedure\n.text:00000000004113D0                 mov     rax, cs:qword_514398\n.text:00000000004113D7                 test    rax, rax        ; Logical Compare\n.text:00000000004113DA                 jz      short loc_4113E0 ; Jump if Zero (ZF=1)\n.text:00000000004113DC                 mov     edi, ebx\n.text:00000000004113DE                 call    rax ; qword_514398 ; Indirect Call Near Procedure\n.text:00000000004113E0\n</code></pre>\n<p>However, I don't think, that the context does matter here because the context is nowhere near similar. Meaning that it's not the combination of moving the address first then calling it or something like that.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "192",
    "tags": [
        "ida",
        "compilers"
    ],
    "user": "Joel",
    "time": "Sep 15, 2018 at 19:23",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Iâ€™m guessing you used IDA to perform the decompilation. Are you able to provide a picture of the relevant portion of the CFG and disassembly of the surrounding code (as text), or even the whole binary? Some context would be great</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Sometimes a callback function has to return some value. Here it returns zero. e.g. <code>void CallBack() { return FALSE; }</code>. Provide the full assembly or pseudo code. Not picture ;)</span>",
            "time": null
        },
        {
            "user": "Joel",
            "text": "<span class=\"comment-copy\">@SYS_V, yes I am using IDA. I It is used a couple of times throughout the code. I will provide some examples as code. Its a linux malware, so I think I should not provide the binary.</span>",
            "time": null
        },
        {
            "user": "Joel",
            "text": "<span class=\"comment-copy\">@Biswapriyo, Yes I am fine with using It as a callback, but I am wondering, why would I (the compiler) call it directly, without it been passed by parameter.</span>",
            "time": null
        },
        {
            "user": "Joel",
            "text": "<span class=\"comment-copy\">@SYS_V The malware is at <a href=\"https://filebin.net/jcaqeoirvej43con\" rel=\"nofollow noreferrer\">filebin.net/jcaqeoirvej43con</a> a zip archive, password protected, in order to not harm any accidental usage. PW is the hash above (54 ... 601). Will expire in 2 months</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Very often functions like this will be listed within a <code>vtable</code>. This is where, within a language like <code>C++</code>, class objects can inherit functions and variables from other class objects.</p>\n<p>If <code>class A</code>, the parent class, implements a function <code>getCount</code>, <code>class B</code> can inherit from this class and change the return value of that function.</p>\n<p>Very often, developers will implement a generic method in the parent class, expecting derived classes to implement a more functional body.</p>\n<p>An example of this can be seen in the <code>tinyxml</code> C++ library. Most classes derive from a main <code>XmlNode</code> class, which implements several methods for casting to the correct type. Within the parent, each <code>To_XXX</code> function simply returns a null pointer. Each derived class overrides one of those methods to return a real pointer to itself.</p>\n</div>",
            "votes": "4",
            "user": "Twifty",
            "time": "Sep 16, 2018 at 2:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}