{
    "title": "ARM \"add\" instruction with shift",
    "link": "https://reverseengineering.stackexchange.com/questions/16154/arm-add-instruction-with-shift",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand how ARM <code>add</code> with shift is implemented e.g. </p>\n<pre><code>sym.imp.__libc_start_main :                                                                                                                                                           \n\n.plt:0x000082bc 00c68fe2 add ip, pc, 0, 12; after execution ip=0x82c4\n.plt:0x000082c0 08ca8ce2 add ip, ip, 8, 20; after execution ip=0x102c4\n.plt:0x000082c4 48fdbce5 ldr pc, [ip, 0xd48]!\n</code></pre>\n<p>I wonder about the line</p>\n<pre><code>.plt:0x000082c0 08ca8ce2 add ip, ip, 8, 20;\n</code></pre>\n<p>it will add <code>#0x8000</code> to the ip register. My question is why <code>#0x8000</code> ?</p>\n<p>I'd assume it will be:</p>\n<pre><code>ip = ip + (8&lt;&lt;20)\n</code></pre>\n<p>so <code>0x800000</code> but it's more like</p>\n<pre><code>ip = ip + (8&lt;&lt;(20-8))\n</code></pre>\n<p>Why is that? do I always have to substract 8 from the shift ?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "arm"
    ],
    "user": "krusty",
    "time": "Aug 21, 2017 at 9:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's a <a href=\"https://en.wikipedia.org/wiki/Circular_shift\" rel=\"noreferrer\">Circular Shift</a> on a 32-bit system.</p>\n<h2>Circular Shift</h2>\n<blockquote>\n<p>In computer programming, a circular shift (or bitwise rotation) is a\n  shift operator that shifts all bits of its operand. Unlike an\n  arithmetic shift, a circular shift does not preserve a number's sign\n  bit or distinguish a number's exponent from its significand (sometimes\n  referred to as the mantissa). Unlike a logical shift, the vacant bit\n  positions are not filled in with zeros but are filled in with the bits\n  that are shifted out of the sequence.</p>\n</blockquote>\n<h2>Understanding the code</h2>\n<p><strong>First Line:</strong><br/>\nThis is simply translated into <code>add ip, pc</code> because rotate operations on <code>#0</code> is still 0.<br/>\nSo it's actually <code>IP = PC  + (0 &lt;&lt; 12) = PC + 0</code></p>\n<p><strong>Second Line:</strong><br/>\nLet's take apart the opcodes and understand the problematic line:<br/>\nThe opcodes should be read like this because of <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"noreferrer\">endianness</a>: <code>e28cca08</code></p>\n<ol>\n<li><code>e</code> - always execute this instruction</li>\n<li><code>28</code> - add immediate</li>\n<li><code>c</code> - Rd is the ip</li>\n<li><code>c</code> - Rn is the ip</li>\n<li><code>a 08</code> - 8 right rotated by 20</li>\n</ol>\n<p>The things is, that it's not <code>8&lt;&lt;20</code> but instead it is <code>8&lt;&lt;(32-12)</code> because we are on a 32-bit system and it is a Circular Shift.</p>\n<p>Here's a C code that showing the Circular Shift based on the example from <a href=\"https://en.wikipedia.org/wiki/Circular_shift#Implementing_circular_shifts\" rel=\"noreferrer\">Wikipedia</a>:</p>\n<pre><code>#include &lt;stdint.h&gt;  // for uint32_t, to get 32bit-wide rotates, regardless of the size of int.\n#include &lt;limits.h&gt;  // for CHAR_BIT\n\nuint32_t rotl32 (uint32_t value, unsigned int count) {\n    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);\n    count &amp;= mask;\n    return (value&lt;&lt;count) | (value&gt;&gt;( (-count) &amp; mask ));\n}\n\nuint32_t rotr32 (uint32_t value, unsigned int count) {\n    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);\n    count &amp;= mask;\n    return (value&gt;&gt;count) | (value&lt;&lt;( (-count) &amp; mask ));\n}\n\nint main()\n{\n    printf(\"Result: 0x%x\\n\",rotr32(8,20));\n    return 0;\n}\n</code></pre>\n<p>The code will output:  </p>\n<pre><code>Result: 0x8000\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Aug 21, 2017 at 16:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "krusty",
                    "text": "<span class=\"comment-copy\">I see so its rotate right and not left, thanks! BTW. typo in the anwser on line \"that it's not 8&lt;&lt;20 but instead it is 8&lt;&lt;(32-12)\" should be 8&gt;&gt;(32-12)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is proposed in the official document of arm\n<a href=\"https://i.sstatic.net/4HSRM.png\" rel=\"nofollow noreferrer\"><img alt=\"arm1\" src=\"https://i.sstatic.net/4HSRM.png\"/></a></p>\n<p>When s = 1 and RD = R15 (PC), this instruction is used to save the status register CPSR, not to do calculation\n<a href=\"https://i.sstatic.net/ncauL.png\" rel=\"nofollow noreferrer\"><img alt=\"arm2\" src=\"https://i.sstatic.net/ncauL.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "Dragon",
            "time": "Dec 23, 2020 at 3:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}