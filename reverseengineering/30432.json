{
    "title": "What techniques are there for mapping code in IDA Pro to the same code in Ghidra, or vice versa?",
    "link": "https://reverseengineering.stackexchange.com/questions/30432/what-techniques-are-there-for-mapping-code-in-ida-pro-to-the-same-code-in-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can I map between code in IDA Pro and the same code in Ghidra?  I.e., I am looking at a particular piece of assembly in one, and want to find the same assembly in the other.</p>\n<p>Based on asking others and thinking about it myself, I have come up with the following:</p>\n<ul>\n<li>Symbols - if they exist</li>\n<li>Library references could serve as hints, if they can be identified</li>\n<li>String references (i.e., both pieces of code refer to the same constant string)</li>\n<li>Trying to find the same opcode sequence - is there any easy way to do this, where I could do something like cut the assembly from IDA and tell Ghidra to find the same sequence of instructions?</li>\n</ul>\n<p>What else is there?  Are there any automated tools for this?  If there are no symbols, what is the \"best\" way?</p>\n<p>I am assuming that it is useful to be able to use both tools on the same target.  Perhaps I am wrong.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "474",
    "tags": [
        "ida",
        "ghidra"
    ],
    "user": "Paul",
    "time": "May 24, 2022 at 20:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have the same binary then this should be straightforward. The approaches you came up with are all typical and useful for trying to correlate code from <em>similar</em> binaries and are then handled by dedicated tools/plugins (like BinDiff, Diaphora, or Ghidra's Version tracking)</p>\n<p>If the binary has a fixed location in the address space, then both IDA and Ghidra should load them at this address and the address of the assembly code you are interested in should just be the same in IDA and Ghidra.\nIf the binary is position independent then IDA and Ghidra might load them at different addresses by default, but this can be set to the same address during the initial import. Then the addresses for each instruction or data should be the same in IDA and Ghidra.</p>\n</div>",
            "votes": "2",
            "user": "Florian Magin",
            "time": "May 24, 2022 at 9:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Paul",
                    "text": "<span class=\"comment-copy\">Wow, that's all?  That sounds easy.</span>",
                    "time": null
                },
                {
                    "user": "Paul",
                    "text": "<span class=\"comment-copy\">Is there any easy analogue for <code>gdb</code>?</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">Same idea with GDB. Either there is a fixed base address that the binary has to be loaded at anyway, then the addresses should just be the same in GDB. But I don't remember how to set the base address with GDB in case of a position independent executable, so maybe the workaround to that has to be using the base address of GDB in IDA/Ghidra.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It looks like maybe this would work?</p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/29375/how-to-find-offset-to-a-function-address-from-the-base-address-in-decompiled-ima\">How to find offset to a function address from the base address in decompiled image (IDA or Ghidra)</a></p>\n<p>IIUC you find the base address in each tool, and then assume that the offset should be the same in both tools.</p>\n</div>",
            "votes": "0",
            "user": "Paul",
            "time": "May 23, 2022 at 19:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}