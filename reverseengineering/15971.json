{
    "title": "Dumpout Process Memory Layout During Loading Time",
    "link": "https://reverseengineering.stackexchange.com/questions/15971/dumpout-process-memory-layout-during-loading-time",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on a project where I need to use <code>LD_PRELOAD</code> to load some libraries into the memory space.</p>\n<p>It's like:</p>\n<pre><code> LD_PRELOAD=\"./libapp.so\" ./my_app\n</code></pre>\n<p>Due to certain reasons (I am actually working on some binary hacking), I must know <strong>the memory address</strong> (not a symbol) of certain functions (let's say, <code>foo</code>) in <code>libapp.so</code> and instrument the binary code of <code>my_app</code> before execution.</p>\n<p>However, due to <code>ASLR</code> (Address Space Layout Randomization), each time <code>libapp.so</code> would be loaded into different memory address, and I am unable to know the memory address of <code>foo</code> before execution.</p>\n<p>I am thinking to somehow intercept the loading time, readout the memory address of <code>libapp.so</code>, perform some instrumentation on <code>my_app</code> with the memory address of <code>foo</code>, and then load <code>my_app</code> into the memory space.</p>\n<p>So here is my question: how to intercept the loading process and acquire the memory address of <code>libapp.so</code>?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "140",
    "tags": [
        "instrumentation",
        "binary-editing"
    ],
    "user": "lllllllllllll",
    "time": "Aug 1, 2017 at 2:22",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">gdb does have pending bps , solib events break etc does none of them work. bp xxx pending on , set solibevents x,y etc  or do you mean you want to do it standalone  if you are using ptrace apis u should be able to intercept loading events too ala gdb</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think that one option could be to use <code>ptrace</code>, for example you can use <code>_dl_open()</code> instead of <code>LD_PRELOAD</code>. Look at this example:</p>\n<ul>\n<li><a href=\"http://www.ars-informatica.com/Root/Code/2010_04_18/LinuxPTrace.aspx\" rel=\"nofollow noreferrer\">http://www.ars-informatica.com/Root/Code/2010_04_18/LinuxPTrace.aspx</a></li>\n</ul>\n<p>Another option could be to use <code>gdb</code> for do that, for example you have the possibility to set a pending breakpoint to foo and then run the program.</p>\n<p>Another option could be turn off the ASLR, you can do it using the <code>/proc/sys/kernel/randomize_va_space</code></p>\n<p>To disable it you can run:</p>\n<pre><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n</code></pre>\n</div>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "May 28, 2018 at 14:25",
            "is_accepted": true,
            "comments": []
        }
    ]
}