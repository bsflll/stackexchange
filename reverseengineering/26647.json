{
    "title": "How to fix an extracted dyld from dyld_shared_cache_x86_64?",
    "link": "https://reverseengineering.stackexchange.com/questions/26647/how-to-fix-an-extracted-dyld-from-dyld-shared-cache-x86-64",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As part of challenging my self I was trying to run a program that doesn't exist on Catlina taken from Big Sur.</p>\n<p>I had to extract the dylibs from the shared cache by using <a href=\"https://github.com/antons/dyld-shared-cache-big-sur\" rel=\"nofollow noreferrer\">this</a> tool.</p>\n<p>The library called ChatKit, after the extraction it seems there are missing values under the <em>Dynamic Loader Info</em> and isn't expanded, see an example:</p>\n<p><a href=\"https://i.sstatic.net/du5t5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/du5t5.png\"/></a></p>\n<p>In addition, trying to open the program or by import it externally, e.g:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;dlfcn.h&gt;\n\nint main(int argc, char** argv)\n{\n    void *handle;\n\n    handle = dlopen(\"./Chatkit\", RTLD_LAZY);\n    if (!handle) {\n        /* fail to load the library */\n        fprintf(stderr, \"Error: %s\\n\", dlerror());\n        return EXIT_FAILURE;\n    }\n\n    dlclose(handle);\n\n    return EXIT_SUCCESS;\n}\n\n</code></pre>\n<p>dyld throwing an error: Overlapping segments, because the segments' address lower is bigger than the higher? <a href=\"https://opensource.apple.com/source/dyld/dyld-360.21/src/ImageLoaderMachO.cpp\" rel=\"nofollow noreferrer\">https://opensource.apple.com/source/dyld/dyld-360.21/src/ImageLoaderMachO.cpp</a></p>\n<pre><code>...\n    if ( this-&gt;segmentsCanSlide() &amp;&amp; this-&gt;segmentsMustSlideTogether() ) {\n        bool needsToSlide = false;\n        bool imageHasPreferredLoadAddress = segHasPreferredLoadAddress(0);\n        uintptr_t lowAddr = (unsigned long)(-1);\n        uintptr_t highAddr = 0;\n        for(unsigned int i=0, e=segmentCount(); i &lt; e; ++i) {\n            const uintptr_t segLow = segPreferredLoadAddress(i);\n            const uintptr_t segHigh = dyld_page_round(segLow + segSize(i));\n            if ( segLow &lt; highAddr ) {\n                if ( dyld_page_size &gt; 4096 )\n                    dyld::throwf(\"can't map segments into 16KB pages\");\n                else\n                    dyld::throwf(\"overlapping segments\");\n            }\n            if ( segLow &lt; lowAddr )\n                lowAddr = segLow;\n            if ( segHigh &gt; highAddr )\n                highAddr = segHigh;\n                \n            if ( needsToSlide || !imageHasPreferredLoadAddress || inPIE || !reserveAddressRange(segPreferredLoadAddress(i), segSize(i)) )\n                needsToSlide = true;\n        }\n</code></pre>\n<p>you can retrieve ChatKit dylib from <a href=\"https://drive.google.com/file/d/1Hi66ZgObQxoYi18s0DsepdVoyGf5Pj6x/view?usp=sharing\" rel=\"nofollow noreferrer\">here</a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "984",
    "tags": [
        "mach-o",
        "macos"
    ],
    "user": "BadSugar",
    "time": "Dec 29, 2020 at 21:49",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">How did you extract the dylib?</span>",
            "time": null
        },
        {
            "user": "BadSugar",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky I used <a href=\"https://github.com/antons/dyld-shared-cache-big-sur\" rel=\"nofollow noreferrer\">this</a> tool to extract the dylibs, if that is what you ask?</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Yes thank you. Could you add this info to the question?</span>",
            "time": null
        },
        {
            "user": "BadSugar",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky done, is there anything else you would like to add?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems the tool you are using is optimized for getting correct disassembly/symbols and not necessarily getting a runnable(acceptable by dyld) binary. Besides, the readme mentions that it does not support format changes in Beta 9 and later so it probably won’t work with the final release.</p>\n<p>The dyld cache format is highly optimized and a lot of information is shared by multiple libraries so it’s not easy to extract just the information used by the one you need (and put it back in correct locations). You can try opening an issue on GitHub but I expect you’ll have to implement it yourself if you really want to get this working.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Dec 29, 2020 at 23:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "BadSugar",
                    "text": "<span class=\"comment-copy\">α) You didn't understand the question: \"not necessarily getting a runnable binary\" that isn't what I'm trying to accomplish..     β) \"The dyld cache format is highly optimized\" - How to get the specs of dyld cache format for each version?    γ) \"a lot of information is shared by multiple libraries so it’s not easy to extract just the information used by the one you need (and put it back in correct locations)\" - how would you do that?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@PiPony there’s no dedicated documentation but a lot can be deduced by reading the dyld sources from opensource.apple.com</span>",
                    "time": null
                }
            ]
        }
    ]
}