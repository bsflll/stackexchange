{
    "title": "Finding memory breakpoints from debugged executable",
    "link": "https://reverseengineering.stackexchange.com/questions/8550/finding-memory-breakpoints-from-debugged-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible to find <code>Memory Breakpoints</code> from within the debugged executable? (as an anti debugging technique?). And no, i <strong>do not mean</strong> <code>Hardware Breakpoints</code> from the <code>Dr0 - Dr7</code> registers <strong>NOR</strong> <code>INT3 \\ code breakpoints</code>.. Breakpoints like in OllyDBG when you right click a memory address and put a breakpoint on access.</p>\n<p>What ways exist to find such breakpoints?\nHow can i avoid detection?</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "597",
    "tags": [
        "windows",
        "ollydbg",
        "anti-debugging",
        "protection"
    ],
    "user": "0xAK",
    "time": "Mar 25, 2015 at 10:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You could query the page level attributes of the section you're trying to verify. If the attributes contain unexpected values (e.g. <em>PAGE_NOACCESS</em>), chances are that someone messed with your pages (possibly a debugger setting a memory breakpoint).</p>\n</div>",
            "votes": "2",
            "user": "newgre",
            "time": "Mar 25, 2015 at 10:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">Can u give me real life examples of how its done? Are there any alternatives to <code>VirtualProtectEx</code> and <code>VirtualQueryEx</code>?</span>",
                    "time": null
                },
                {
                    "user": "newgre",
                    "text": "<span class=\"comment-copy\">The only alternative I can think of would be <a href=\"http://undocumented.ntinternals.net/source/usermode/undocumented%20functions/memory%20management/virtual%20memory/ntqueryvirtualmemory.html\" rel=\"nofollow noreferrer\">NtQueryVirtualMemory</a>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is covered in-depth in this blog post: <a href=\"http://waleedassar.blogspot.com/2012/11/defeating-memory-breakpoints.html\" rel=\"nofollow noreferrer\">http://waleedassar.blogspot.com/2012/11/defeating-memory-breakpoints.html</a></p>\n<blockquote>\n<p>... This trick can easily detect memory breakpoints. It relies on the fact\n  that the \"<strong>ReadProcessMemory</strong>\" function returns false if you try to read\n  guarded or no-access memory. To use this trick, all you have to do is\n  call the \"<strong>ReadProcessMemory</strong>\" function with the \"<strong>Handle</strong>\" parameter set\n  to <strong>0xFFFFFFFF</strong>, the \"<strong>lpBaseAddress</strong>\" parameter set to the image base,\n  and the \"<strong>nSize</strong>\" parameter set to the size of image. If it returns\n  false, then at least one memory breakpoint is present.</p>\n</blockquote>\n<p>As for your other question -- \"How can i avoid detection?\" -- that is answered here: <a href=\"https://reverseengineering.stackexchange.com/a/8510/1562\">https://reverseengineering.stackexchange.com/a/8510/1562</a></p>\n<blockquote>\n<p>You can't know how to avoid getting detected if you don't know how the\n  detection works. I'd recommend finding and reverse engineering the\n  detection logic so that you can either disable it (patch it out) or\n  better understand how to avoid detection.</p>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>AFAIK this is possible, just read your own memory and look for 0xCC bytes. However this poses a problem since several compilers insert 0xCC bytes between functions (as kind of a trap in case of memory overwrite, I guess)</p>\n<p><img alt=\"INT3 padding between functions shown in IDA\" src=\"https://i.sstatic.net/DG56X.png\"/></p>\n<p>So, you would have to do is to know how many of those \"innocent\" INT3 was there before and check for anomalies. Sounds like prone to failure, IMHO :)</p>\n<p>SPOILER: IIRC, this was one of the anti-RE mechanisms in the last Flare Challenge.</p>\n</div>",
            "votes": "-2",
            "user": "Carlos Garcia",
            "time": "Mar 25, 2015 at 9:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">I did not mean <code>Code breakpoints (INT3)</code> i meant Memory breakpoints.. Like changing the Page Protection attributes with VirtualProtect or other api.. to PAGE_GUARD etc</span>",
                    "time": null
                }
            ]
        }
    ]
}