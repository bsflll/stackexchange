{
    "title": "Is it possible to find static pointer with disassembler?",
    "link": "https://reverseengineering.stackexchange.com/questions/8186/is-it-possible-to-find-static-pointer-with-disassembler",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found an assembler instruction: <code>mov [esi+2F],dl</code>. I think ESI is a reference to a struct or class. <code>0x2F</code> is the offset that references a property of the struct/class. Is it possible to find the value of the ESI register? I think this class or struct is initialized when the game is started.</p>\n<p>For example, I tried to reverse GTA San Andreas. A lot of memory addresses of the GTA SA <a href=\"http://www.gtamodding.com/?title=Memory_Addresses_%28SA%29\" rel=\"nofollow\">here</a>.</p>\n<p>I've found such information in this site: 0xB6F5F0 - Player pointer (CPed).</p>\n<p>I think it's address that I finding now. But how I can find it with debugger like cheat-engine without pointer scan? I'd like to find addresses in asm code. It's possible?</p>\n<p>I tried to set a breakpoint to the instruction. But I think it's useless because ESI address is dynamic. As I understand CPed struct/class uses dynamic memory allocation.</p>\n<p>I am sorry for my bad English and thanks in advance.</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "8k",
    "tags": [
        "disassembly",
        "debuggers",
        "pointer"
    ],
    "user": "tested",
    "time": "Feb 25, 2015 at 16:14",
    "comments": [
        {
            "user": "RoraΖ",
            "text": "<span class=\"comment-copy\">I'm a little confused, <i>\"But how I can find it with debugger\"</i>, do you want to find the value of ESI in a debugger or in a disassembler?  Since the address of the struct/class is most likely dynamic you won't be able to find it with a disassembler.</span>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\">@raz however, since the game uses it, there must be a static location which stores the pointer.</span>",
            "time": null
        },
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">Either you do it the \"hard\" way, you backtrack instructions until you find what is the last modification on ESI and thus what is its value at that point. Or you just put a breakpoint on your debugger and read the value of ESI at this instruction. Any specific reason you want to do this statically?</span>",
            "time": null
        },
        {
            "user": "RoraΖ",
            "text": "<span class=\"comment-copy\">@AcidShout Why?  If it's an object it's most likely allocated at runtime and no static location in the binary is necessary.  Unless it's a global variable there's not reason for it to have a static location.</span>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\">@raz you still have the variable which stores a pointer to the allocated object, and you can take it from there. and that variable will be static</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Yes, it is possible</h1>\n<p>I'm going to explain you a bit how most games do it (I have never reversed any GTA but I suppose it's something like this anyway).</p>\n<p>I'm going to cover static and dynamic allocation of structures.</p>\n<hr/>\n<p><strong>The static way:</strong></p>\n<pre><code>GlobalGameInfo g_info;\n// ...\ng_info.some_data = 1;\n</code></pre>\n<p>This is what ends up being a static offset in IDA, like so:</p>\n<pre><code>lea eax, [g_info + 0xAABB] ; suppose 0xAABB is the offset for 'some_data'\nmov [eax], 1;\n</code></pre>\n<p><code>g_info</code> is always going to stay at the same offset, so once you find it, you can just use <code>g_info + offset</code> to get your data.</p>\n<p><strong>The dynamic way:</strong></p>\n<pre><code>Player* players; // can be defined as Player* players[&lt;count&gt;] or Player** players;\n                 // it's the same\n// ...\nplayers = new Player[players_count];\n// ...\nplayers[1].alive = false;\n</code></pre>\n<p>Which then results in:</p>\n<pre><code>; this is a static location which is actually the \"players\" variable\n; and it contains an address which points to the offset in memory of the\n; actual players structure\ndword_xxxx dd ?\n</code></pre>\n<p>So to use it in e.g. Cheat Engine, you <code>Add a new address</code>, check <code>Pointer</code>, add the <code>xxxx</code> part of <code>dword_xxxx</code>, and in offset, put your desired offset.\nFor example, to get <code>players[1].alive</code>, with <code>alive</code> being on offset e.g. 0x100, you'd calculate:</p>\n<pre><code>value_stored_in_dword_xxxx + sizeof(Player) * player_id + 0x100\n</code></pre>\n<p>So if <code>dword_xxxx</code> -&gt; <code>0xAABBCCDD</code>, <code>sizeof(Player)</code> -&gt; <code>0x204</code>, <code>player_id</code> -&gt; <code>8</code>, and <code>offset</code> -&gt; <code>0x100</code>, your calculation would be:</p>\n<pre><code>0xAABBCCDD + (0x204 * 8) + 0x100\n// ^base      ^size   ^id  ^offset\n</code></pre>\n<hr/>\n<h2>The example</h2>\n<p>Since you gave us <code>mov [esi + 0x2F], dl</code>:</p>\n<ul>\n<li><code>esi</code> is a pointer to the structure. Look above (in the disassembly).\n\n<ul>\n<li><code>mov esi, dword ptr [dword_xxxx]</code> (most probably) means it's dereferencing a pointer, which means that the structure is allocated dynamically.</li>\n<li><code>mov esi, offset dword_xxxx</code> (most probably) means that it's just assigning the address (<code>xxxx</code> part) to <code>esi</code>, so this is a static address.</li>\n</ul></li>\n</ul>\n<hr/>\n<h2>The usage</h2>\n<p><strong>Cheat Engine</strong></p>\n<p>In Cheat Engine, it's easy as inputting the pointer and the offset:</p>\n<p><img alt=\"Cheat Engine\" src=\"https://i.sstatic.net/gFBPU.png\"/></p>\n<p>As you can see, <code>0x5CCB138</code> is the <code>dword_xxxx</code>, the value inside <code>dword_xxxx</code> is <code>0x09021A00</code>, and that + <code>0x142</code> (my offset) results in the start of the in-game name.</p>\n<p><strong>C</strong></p>\n<p>In case you want to do it programmatically, you can do it like this in C:</p>\n<pre><code>PCHAR my_name = PCHAR (*PDWORD(0x5CCB138) + 0x142);\n^save the addr|       | ^deref to get     | add the offset\n              | ^cast |    0x09021A00     |\n\n// -&gt; be careful, do not surpass the max length!\n// -&gt; also remember that there's 'your name' length + 1 \\x00 byte\n//    at the end!\nchar new_name[] = \"newName\";\nstrncpy(my_name, new_name, sizeof(new_name)); // again: be careful with the length!\n</code></pre>\n<p>The proper way, however, would be reversing the entire struct like this:</p>\n<pre><code>struct player_data {\n    int ID;\n    char name[15];\n    int some_data;\n    ...;\n};\n// make sure the order / size of each item is correct!\n// a single error can fuck up the entire struct\n\n// I'm going to assume you understand pointers\nplayer_data* data = *(player_data**) 0x5CCB138;\n\n// do your changes\n// again, be careful with the length!\n// also note that sizeof() will not work if you use char*\nchar new_name[] = \"new name!\";\nstrncpy(data-&gt;name, new_name, sizeof(new_name));\n</code></pre>\n</div>",
            "votes": "10",
            "user": "rev",
            "time": "Feb 9, 2015 at 14:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}