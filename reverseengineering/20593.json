{
    "title": "Calculation with not defined variables?",
    "link": "https://reverseengineering.stackexchange.com/questions/20593/calculation-with-not-defined-variables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am new to reverse engineering and try to solve a crackme with radare2.</p>\n<p>My problem is understanding of the following lines: </p>\n<pre><code>|           0x000007a9      c745b8000000.  mov dword [var_48h], 0\n|           0x000007b0      c745bc000000.  mov dword [var_44h], 0\n|           0x000007cd      8b45b8         mov eax, dword [var_48h]\n|           0x000007d0      4898           cdqe\n|           0x000007d2      0fb64405c0     movzx eax, byte [rbp + rax - 0x40]\n</code></pre>\n<p>From the bottom part of this code surrounding them:</p>\n<pre><code>|           0x0000076a      55             push rbp\n|           0x0000076b      4889e5         mov rbp, rsp\n|           0x0000076e      4883ec50       sub rsp, 0x50               \n|           0x00000772      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=0x19c0 ; '('\n|           0x0000077b      488945f8       mov qword [canary], rax\n|           0x0000077f      31c0           xor eax, eax\n|           0x00000781      c645b700       mov byte [var_49h], 0\n|           0x00000785      488d3d580100.  lea rdi, qword str.Enter_password: ; 0x8e4 ; \"Enter password:\" ; const char *s\n|           0x0000078c      e87ffeffff     call sym.imp.puts           ; int puts(const char *s)\n|           0x00000791      488d45c0       lea rax, qword [var_40h]\n|           0x00000795      4889c6         mov rsi, rax\n|           0x00000798      488d3d550100.  lea rdi, qword [0x000008f4] ; \"%s\" ; const char *format\n|           0x0000079f      b800000000     mov eax, 0\n|           0x000007a4      e897feffff     call sym.imp.__isoc99_scanf ; String! ; int scanf(const char *format)\n|           0x000007a9      c745b8000000.  mov dword [var_48h], 0\n|           0x000007b0      c745bc000000.  mov dword [var_44h], 0\n|           0x000007cd      8b45b8         mov eax, dword [var_48h]\n|           0x000007d0      4898           cdqe\n|           0x000007d2      0fb64405c0     movzx eax, byte [rbp + rax - 0x40]\n|           0x000007d7      84c0           test al, al\n</code></pre>\n<p>I understand the output and that there is the input wanted (<code>scanf</code>). After that <code>var_48h</code>, <code>var_44h</code> and <code>eax</code> are set to 0. The next lines i don't understand at all. Beside the <code>cdqe</code> instruction there is some calculation(?) with the variables <code>rbp</code> and <code>rax</code> (=<code>var_49h</code>?).</p>\n<p>Maybe you can help me to understand that?</p>\n<p>Thank you in advance!</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "214",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis"
    ],
    "user": "Mofro",
    "time": "Feb 11, 2019 at 13:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lets take a look at the specific piece of code you can't understand:</p>\n<pre><code>mov dword [var_48h], 0\nmov dword [var_44h], 0\nmov eax, dword [var_48h]\ncdqe\nmovzx eax, byte [rbp + rax - 0x40]\n</code></pre>\n<p>And go over it a few lines at a time.</p>\n<p>The first couple of lines are either initializing a local variable of size qword (8 bytes) to 0 by assigning one dword at a time, or two dword-sized variables, each of which to zero:</p>\n<pre><code>mov dword [var_48h], 0\nmov dword [var_44h], 0\n</code></pre>\n<p>Converting this to C, this may look similar to:</p>\n<pre><code>long var_ab = 0;\n</code></pre>\n<p>or</p>\n<pre><code>int var_a, var_b = 0;\n</code></pre>\n<p>The third line is a little puzzling assuming the above assignment is to a single qword variable:</p>\n<pre><code>mov eax, dword [var_48h]\n</code></pre>\n<p>Regardless, this does not translate to an actual C statement, but suggests the  variable (either as <code>var_ab</code> or <code>var_b</code> will be used in following statements. </p>\n<p>Taking a look at the following two lines makes it all clearer:</p>\n<pre><code>cdqe\nmovzx eax, byte [rbp + rax - 0x40]\n</code></pre>\n<p>The first of the two, <a href=\"https://www.felixcloutier.com/x86/cbw:cwde:cdqe\" rel=\"nofollow noreferrer\"><code>cdqe</code></a> simply sign-extends <code>eax</code> into <code>rax</code>, effectively setting the higher half of <code>rdx</code> to zero too. the second line of the last snippet makes doing so clear, after we consider the limitations of the x86 assembly language.</p>\n<p>Since <code>eax</code> is used as an index for a stack variable, it is required to be sign-extended to <code>rax</code> because of assembly limitations. executing <code>byte [</code><strong><code>r</code></strong><code>bp +</code><strong><code>e</code></strong><code>ax - 0x40]</code> is impossible in x86 64bit assembly, as all registers in offset calculations are required to be of the same length.</p>\n<p>This makes it clear that the variables are indeed two dword variables, and <code>eax</code> is sign extended solely to be used in the following <code>mov</code> instruction.</p>\n<p>The assembly code above, then, is probably the result of the following C code:</p>\n<pre><code>char buf[...];\ndword idx = 0;\nif (buf[idx] == 0) {\n    ...\n}\n</code></pre>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Feb 11, 2019 at 13:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Sure, my pleasure :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>CDQE Convert DoubleWord To QuadWord</strong> </p>\n<p>it takes whatever is in eax sign extends it and puts it in Rax   </p>\n<p>so as long as eax holds anything less than 7fffffff and greater than 0<br/>\nRax will be 00000000<code>whateverwashereineax<br/>\nwhen eax holds anything from 0x80000000 to 0xffffffff<br/>\nrax will become ffffffff</code>whateverwashereineax  </p>\n<p>in your case eax is 0 (see var_48) so Rax will be 0 after execution of cdqe   </p>\n<p>and then it accesses a single byte (first letter of your password)  and checks if it is 0 (test al,al) </p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Feb 10, 2019 at 22:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}