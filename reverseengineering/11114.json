{
    "title": "ARM shellcode using r0 without null characters",
    "link": "https://reverseengineering.stackexchange.com/questions/11114/arm-shellcode-using-r0-without-null-characters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Iâ€™m trying to write some basic ARM shell code that loads up the r0 register with 0. I cannot use null characters. I can see that</p>\n<pre><code>subs r2, r2, r2\n</code></pre>\n<p>sets r2 to 0 without using any null bytes.</p>\n<p>However, any attempts to move r2 to r0, results in shell code that uses null bytes. Any advice on what I could do? </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "507",
    "tags": [
        "arm",
        "shellcode"
    ],
    "user": null,
    "time": "Oct 15, 2015 at 14:02",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Just a quick idea that i can't verify right now - can't you <code>push r2</code> and <code>pop r0</code> ? IIrc, the register sets to be pushed and popped are bitfields in these instructions. If this doesn't work, maybe something like <code>push r2,r3</code> then <code>pop r0,r3</code> works.</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">arm, thumb or thumb2 ? And which processor model are you targeting exactly ?</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">you can push/pop (str/ldr) as Guntram suggests, or you can store/load from memory (stm/ldm) by using non-zero offsets, but you can't move it directly.</span>",
            "time": null
        },
        {
            "user": "user1743",
            "text": "<span class=\"comment-copy\">@GuntramBlohm subs r2, r2, r2;push {r2, r3};pop {r0, r3}; seems to assemble to \"\\x02\\x20\\x52\\xe0\\x0c\\x00\\x2d\\xe9\\x09\\x00\\xbd\\xe8\" and is hence not usable. Same case with push r2; pop r0;</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">You're right, the 1st byte of the 2nd and 3rd instruction is a bit field for registers 0-7, the 2nd byte (which is zero) is r8-r15. So you can use <code>push {r2.r8}; pop{r0,r8}</code> which assembles to <code>02 20 52 e0 04 01 2d e9 01 01 bd e8</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Copy/pasted from <a href=\"https://www.onlinedisassembler.com/odaweb/\">the online disassembler</a>:</p>\n<pre><code>.data :00000000  e0522002 subs r2, r2, r2\n.data :00000004  e92d0104 push {r2, r8}       \n.data :00000008  e8bd0101 pop {r0, r8}\n</code></pre>\n<p>Or, in thumb mode (the push/pop instructions are actually the same, seemingly being byte-swapped due to endianness):</p>\n<pre><code>.data :00000000 1a92 subs r2, r2, r2\n.data :00000002 0104e92d stmdb r13!, {r2, r8}\n.data :00000006 0101e8bd ldmia.w r13!, {r0, r8}\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Oct 16, 2015 at 6:38",
            "is_accepted": true,
            "comments": []
        }
    ]
}