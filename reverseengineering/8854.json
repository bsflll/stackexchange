{
    "title": "Protect data stored in binary",
    "link": "https://reverseengineering.stackexchange.com/questions/8854/how-to-store-a-string-securely-inside-your-app",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say I've some function(i.e. hash function), that generates value from input seed and some precomputed hash values, that are stored somewhere in binary. What are the possible approaches for:</p>\n<ol>\n<li>Protect string data against dumping</li>\n<li>Protect hash algorithm from being reverse engineered for a while</li>\n</ol>\n<p>I understand that the goal of complete algorithm concealment from reverser is impossible but what technique will raise the efforts to do this?</p>\n<p>My thoughts on this topic:</p>\n<ol>\n<li>Protect hash strings with <a href=\"http://www.sevagas.com/?String-encryption-using-macro-and\" rel=\"noreferrer\">encryption macro</a></li>\n<li>Obfuscating target function using some king of obfuscation/poly/metamorphic engine in order to prevent easy algorithm recovery(can lead to AV false positive but should not harm in general)</li>\n<li>Roughly generate new  hash function and values for each copy of program(kind of hard to implement and maintain)</li>\n</ol>\n<p>Maybe anybody have better concepts that will suit my goal and be so kind to post it here.</p>\n<p>P.S. please do not advice to use packers/protectors. False positive AV does not cost couple functions algorithm concealment.</p>\n<p><strong>UPD</strong></p>\n<p><a href=\"https://mega.co.nz/#!3VxkFaLQ!3Vs8Tl6nf_9cssH-Xe8yYuaST3r1E_E13n6Af9jW2l8\" rel=\"noreferrer\">Here</a> is the implementation if string protection written in C++. I don't know if this solution be useful for other people but it's worth mentioning though. </p>\n</div>",
    "votes": "11",
    "answers": 2,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "obfuscation",
        "static-analysis",
        "encryption"
    ],
    "user": "Catalin Craciun",
    "time": "May 4, 2015 at 21:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>I would start with not have critical strings in memory in linear manner</strong></p>\n<p>Instead each character can be offseted by some offset like by table mixing all the strings together. For example you got <code>0123456789</code> if you store them in memory like this:</p>\n<pre><code>|0x1xx2xxx3xxxx4|\n|xxxxx5xxxxxx6xx|\n|xxxx7xxxxxxxx8x|\n|xxxxxxxx9xxxxxx|\n</code></pre>\n<p>where <code>x</code> is anything or another string ... it is pretty hard to get the meaning.</p>\n<p><strong>Next level is even better</strong></p>\n<pre><code>//---------------------------------------------------------------------------\nconst int N=16384;\nchar txt[N];    // my texts\nint  ofs[N];    // randomized offsets\n//---------------------------------------------------------------------------\nvoid ofs_init()                 // randomize offsets\n    {\n    int i,j,a;\n    // here set RandSeed if you need to reproduce same behavior (like for using with files)\n    for (i=0;i&lt;N;i++) ofs[i]=i;\n    for (i=0;i&lt;N;i++) { j=Random(N); a=ofs[i]; ofs[i]=ofs[j]; ofs[j]=a; }\n    }\n//---------------------------------------------------------------------------\nvoid ofs_write(int adr,char a) // linear to ofset encoding\n    {\n    txt[ofs[adr]]=a;\n    }\n//---------------------------------------------------------------------------\nchar ofs_read(int adr) // linear to ofset decoding\n    {\n    return txt[ofs[adr]];\n    }\n//---------------------------------------------------------------------------\n</code></pre>\n<p>So create offset table on runtime which will randomly map linear string offsets to nonlinear offsets. This is very hard to decode because it mixes all strings together (and if they are hashes) then without stepping is almost impossible to decode this (not knowing what it does of coarse).</p>\n<p>Here an example of how to use it and how output looks:</p>\n<pre><code>// [encode] + save to file for output comparison\n// AnsiString s holds oll my texts (an image in this case)\nRandomize();\nofs_init();\nfor (i=0;i&lt;s.Length();i++) ofs_write(i,s[i+1]);\ni=FileCreate(\"picenc.txt\"); FileWrite(i,txt,N); FileClose(i);\n// [decode] you should not decode critical strings to memory rather decode each char only when needed instead\n// I decode the whole thing to save to file for output comparison\nfor (i=0;i&lt;s.Length();i++) s[i+1]=ofs_read(i);\ni=FileCreate(\"picdec.txt\"); FileWrite(i,s.c_str(),s.Length()); FileClose(i);\n</code></pre>\n<p>And the results are like this:</p>\n<p><img alt=\"output\" src=\"https://i.sstatic.net/2dOxN.png\"/></p>\n<p>On the left is decoded text <code>picdec.txt</code> and on the right is encoded text <code>picenc.txt</code> this is how the strings looks in memory.</p>\n<p>On top of this you can add any kind of encryption (not only to text itself but to offset table also ...)</p>\n</div>",
            "votes": "9",
            "user": "Spektre",
            "time": "Sep 11, 2018 at 10:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "see ya",
                    "text": "<span class=\"comment-copy\">Thanks for sharing your techniques! Can you please expand your second part of answer? If I got you correct all values are stored in large buffer and each copy of application is receive its own copy of <code>rng</code> code and the seed. So the full dynamic string/dword generation is achieved and there is no way to compute in statically without stepping through all <code>rng</code>?</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@seeya updated my answer see the example (used my image to ASCII Art conversion as source input to emphasize the position/pattern distortion)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a number of ways to accomplish what you've stated.  Generally, more robust techniques, while affording a higher level of protection, will also put more burden on the programmer creating the software.  So in approximately increasing order of difficulty, here are some ideas:</p>\n<h2>Store the data non-contiguously</h2>\n<p>The simplest approach is to simply not store the data contiguously.  That is, store the data in separate pieces and reassemble it at runtime just before you need it.  With this as with all of the other techniques, it's generally recommended to keep the value in memory for as short a duration as is practical.</p>\n<h2>Obfuscate the stored data</h2>\n<p>There are many ways to obfuscate data.  One simple method is to simply XOR with some fixed constant.  A more sophisticated approach is to encrypt the data, but unless you have some secure way to store the encryption key, this might not actually offer that much more security.  One possibility would be to use a cryptographic hash of the entire program (minus the protected data) as the encryption key.  This would largely prevent alteration of the binary as well as providing a non-obvious way to store the key.</p>\n<h2>Recalculate the data at runtime</h2>\n<p>If you can avoid storing the data at all, we eliminate the problem of being able to derive it from static analysis.  If you are precomputing hashes of certain data for performance reasons, consider doing so at program startup instead of at compile time.  Alternatively, if the data is fixed, consider writing a polymorphic generator which could be included at compile time.  That is, write a program that takes a fixed constant and generates code which, when run, produces that value without explicitly including it.  Then link the generated code with your program.  Because the polymorphic generator would be part of the build process rather than part of the runtime, it is much less likely to trigger a A/V warning.</p>\n<h3>Proof of concept for this idea</h3>\n<p>I wrote a little program in C++ to more fully demonstrate this technique.  Here is the program:</p>\n<h3>linear.cpp</h3>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;random&gt;\n\nint main(int argc, char *argv[])\n{\n    std::random_device rd;\n    std::uniform_int_distribution&lt;&gt; r{-32768,32767};\n\n    for (int i=1; i &lt; argc; ++i) {\n        int y = std::atoi(argv[i]);\n        int x;\n        for (x=r(rd); x==0; x= r(rd));  // make sure x!=0\n        int m = r(rd);\n        int b = y-m*x;\n        std::cout &lt;&lt; \"int generate\" &lt;&lt; i &lt;&lt; \"(int x) { return x * \" &lt;&lt; m &lt;&lt; \" + \" &lt;&lt; b &lt;&lt; \"; }\\n\";\n        std::cout &lt;&lt; \"\\tassert(\" &lt;&lt; y &lt;&lt; \" == generate\" &lt;&lt; i &lt;&lt; \"(\" &lt;&lt; x &lt;&lt; \"));\\n\";\n\n    }\n}\n</code></pre>\n<h3>How it works</h3>\n<p>This is a very simple program that takes a series of integers as input and creates one linear function per integer.  For example, with this command line:</p>\n<pre><code>./linear 39181 3802830 938833 -41418699\n</code></pre>\n<p>The program generated the following output:</p>\n<pre><code>int generate1(int x) { return x * -5646 + 182450149; }\n    assert(39181 == generate1(32308));\nint generate2(int x) { return x * -14922 + 10696794; }\n    assert(3802830 == generate2(462));\nint generate3(int x) { return x * -15424 + -320805807; }\n    assert(938833 == generate3(-20860));\nint generate4(int x) { return x * -8144 + -127093579; }\n    assert(-41418699 == generate4(-10520));\n</code></pre>\n<p>The <code>assert</code>s are simply there for documentation and testing.  In real usage, if you want to recreate the constant <code>39181</code> in your code, you would use <code>generate1(32308)</code>.  If we rearrange the lines into a full program, we get this:</p>\n<h3>tryme.cpp</h3>\n<pre><code>int generate1(int x) { return x * -5646 + 182450149; }\nint generate2(int x) { return x * -14922 + 10696794; }\nint generate3(int x) { return x * -15424 + -320805807; }\nint generate4(int x) { return x * -8144 + -127093579; }\n#include &lt;cassert&gt;\nint main() {\n    assert(39181 == generate1(32308));\n    assert(3802830 == generate2(462));\n    assert(938833 == generate3(-20860));\n    assert(-41418699 == generate4(-10520));\n}\n</code></pre>\n<p>Obviously, you could multiply or concatenate these if you need longer numbers or strings, and my choice of linear functions with the random number value range I chose was entirely arbitrary.  Feel free to substitute and experiment.</p>\n<h2>Fetch the data remotely</h2>\n<p>Depending on the environment, it may be possible to store the data remotely and then fetch it securely via something like HTTPS when and as needed.  Be aware that doing this could also mean that even an ordinary network outage or misconfigured firewall would render your software inoperable, but you can decide if that is acceptable for your purposes.</p>\n</div>",
            "votes": "6",
            "user": "Edward",
            "time": "May 5, 2015 at 16:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "see ya",
                    "text": "<span class=\"comment-copy\">For me third method sounds extremely interesting and promising. Can you please either expand it with more possible implementation details or even ready-made solution of this technique if one exists?</span>",
                    "time": null
                },
                {
                    "user": "Edward",
                    "text": "<span class=\"comment-copy\">I've updated my answer with code and a sample run, showing how this could work.</span>",
                    "time": null
                },
                {
                    "user": "see ya",
                    "text": "<span class=\"comment-copy\">Thank you! I wish I could accept your answer too. Anyway take my upvote.</span>",
                    "time": null
                },
                {
                    "user": "Edward",
                    "text": "<span class=\"comment-copy\">:)  No problem!  It was a fun problem to think about.</span>",
                    "time": null
                }
            ]
        }
    ]
}