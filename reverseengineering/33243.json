{
    "title": "What is this 2D vector image (file) format?",
    "link": "https://reverseengineering.stackexchange.com/questions/33243/what-is-this-2d-vector-image-file-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Context:</strong> I'm currently re-engineering an old (2015) E-paper display tag just for the fun of it. For the curious ones, I'm using <a href=\"https://www.ghidra-sre.org/\" rel=\"nofollow noreferrer\">Ghidra</a> to disassemble and decompile, and trying to make up some sense of the results. The tag uses an ARM Cortex M0 based MCU and a 1.44 inch EPD, and receives its display content via NFC.</p>\n<p>After receiving some (RLE compressed) KB of data and inflating that data, the application interprets the data. This is my current knowledge about the contents:</p>\n<ul>\n<li><p>There is potentially a header of 16 bytes ignored by the application.</p>\n</li>\n<li><p>After the header there is an undetermined number of elements. The application stops at the end of the received data.</p>\n</li>\n<li><p>Each element is marked with a single byte (byte 0 in the table), followed by a length byte (byte 1 in the table, counted without these first two bytes)</p>\n</li>\n<li><p>After these two bytes more bytes can follow, depending on the element's type:</p>\n<div class=\"s-table-container\"><table class=\"s-table\">\n<thead>\n<tr>\n<th>My finding so far</th>\n<th>byte 0<br/>(element<br/>type)</th>\n<th>byte 1<br/>(# of bytes<br/>to follow)</th>\n<th>byte 2</th>\n<th>byte 3</th>\n<th>byte 4</th>\n<th>byte 5</th>\n<th>byte 6</th>\n<th>byte 7 ...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set geometry</td>\n<td>0x01</td>\n<td>3</td>\n<td>x offset</td>\n<td>y offset</td>\n<td>rotation<br/>(0..3 = 0째/ 90째/ 180째/ 270째)</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>define colors</td>\n<td>0x02</td>\n<td>2</td>\n<td>color1</td>\n<td>color2</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>fill completely<br/>with background color</td>\n<td>0x03</td>\n<td>0</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>invert image</td>\n<td>0x04</td>\n<td>0</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>draw line</td>\n<td>0x11</td>\n<td>4</td>\n<td>x1</td>\n<td>y1</td>\n<td>x2</td>\n<td>y2</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>draw text</td>\n<td>0x12</td>\n<td>#</td>\n<td>x</td>\n<td>y</td>\n<td>font</td>\n<td>opaque</td>\n<td>centered</td>\n<td>text...</td>\n</tr>\n<tr>\n<td>draw pixels</td>\n<td>0x13</td>\n<td>#</td>\n<td>x</td>\n<td>y</td>\n<td>w</td>\n<td>h</td>\n<td>bits per pixel</td>\n<td>data...</td>\n</tr>\n<tr>\n<td>draw rectangle</td>\n<td>0x14</td>\n<td>5</td>\n<td>x1</td>\n<td>y1</td>\n<td>x2</td>\n<td>y2</td>\n<td>filled</td>\n<td>-</td>\n</tr>\n<tr>\n<td>draw circle</td>\n<td>0x15</td>\n<td>4</td>\n<td>x</td>\n<td>y</td>\n<td>radius</td>\n<td>filled</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>stamp image</td>\n<td>0x17</td>\n<td>3</td>\n<td>x</td>\n<td>y</td>\n<td>index</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>prepare pixel data</td>\n<td>0x20</td>\n<td>#</td>\n<td>data...</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n</li>\n</ul>\n<p>Element type 0x20 is special. Each data chunk is appended to a buffer. When finally element type 0x13 is used, its data are also appended, and then the whole buffer is the image to draw.</p>\n<p>I spent several hours in web research but could not find any hint. The \"usual suspects\" like CGM, EMF, EPS, SVG, WMF or Gerber do not match. I looked into few others, too.</p>\n<p>What (file) format of a (simple) vector graphic is this?</p>\n<p>The application is a mix of apparently assembler, C, and C++ code. Specifically all drawing functions receive the same pointer, which is certainly <code>this</code>. There is also a function pointer table in the structure pointed to, known as <em>vtable</em>. This makes me conclude that libraries are used.</p>\n<p>Currently I'm at a bit-block transfer function that supports 16 colours. It <em>can</em> be that this is a proprietary format, but it makes no sense to support more than the two colours of EPDs of that time. That's why I think it is some more generic format.</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "82",
    "tags": [
        "file-format",
        "graphics"
    ],
    "user": "the busybee",
    "time": "Oct 10, 2024 at 19:00",
    "comments": [
        {
            "user": "jsotola",
            "text": "<span class=\"comment-copy\">could be custom file format</span>",
            "time": null
        },
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\">(These are only assumptions). Since the device has a simple display and that basic shapes are specified by a single byte of the protocol I would try to find a correlation between packet <i>bits</i> and the actual visual result. This may be as simple as 1/0 to paint/clear pixel. Expect a checksum of the packet and/or parity bits inbetween.</span>",
            "time": null
        },
        {
            "user": "the busybee",
            "text": "<span class=\"comment-copy\">@jsotola Thanks for your hint, it's true, however, even though I'm in CS for decades and always learning, I cannot know all file formats. :-D <i>If it is a known file format,</i> it would make my reengineering a lot simpler. Currently I need to interpret each element type's function in detail.</span>",
            "time": null
        },
        {
            "user": "the busybee",
            "text": "<span class=\"comment-copy\">@Yotamz Thanks for your suggestions, I will surely verify my findings with experiments. Currently the device is still in its code-readout fixture and I still need to find a way to communicate with NFC.</span>",
            "time": null
        },
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\">True. I meant to say that it may be a common format for this type of embedded device - but not necessarily a well known graphics file format that is seen in PCs (for reducing overhead, memory use etc.). It makes identifying them harder, for lack of headers/magic values and so on</span>",
            "time": null
        }
    ],
    "answers_data": []
}