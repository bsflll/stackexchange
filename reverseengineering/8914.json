{
    "title": "How to get opcodes for assembly using ppc processor (IDAPython)",
    "link": "https://reverseengineering.stackexchange.com/questions/8914/how-to-get-opcodes-for-assembly-using-ppc-processor-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In IDAPython, you can obtain the corresponding opcodes for a assembly instruction using the <a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py#651\" rel=\"nofollow\">Assemble(ea, line)</a> function.</p>\n<hr/>\n<p>Here is an example using a PE-file / x86 processor type:</p>\n<pre><code>Python&gt;Assemble(FirstSeg(), 'asdf')\nInvalid mnemonic -&gt; OK\n(False, 'Assembler failed: asdf')\n</code></pre>\n<p>As we can see, the <code>Assemble</code> call returns <code>False</code> and prints a error message for a invalid mnemonic when using an incorrect assembly instruction like <code>asdf</code>.</p>\n<p>With a valid assembly instruction, the correct opcode is returned:</p>\n<pre><code>Python&gt;Assemble(FirstSeg(), 'ret')\n(True, '\\xc3')\n</code></pre>\n<hr/>\n<p>Here is the same function using a PPC-ELF/ppc processor type:</p>\n<pre><code>Python&gt;Assemble(FirstSeg(), 'asdf')\n(True, '\\x00')\n</code></pre>\n<p>As we can see, no error message is printed and a <code>\\x00</code> is returned as resulting opcode.</p>\n<p>The valid <code>sc</code> instruction and any other valid ppc instructions return the same (wrong) value of <code>\\x00</code>:</p>\n<pre><code>Python&gt;Assemble(FirstSeg(), 'sc')\n(True, '\\x00')\n</code></pre>\n<p>How can I get IDAPython's <code>Assemble(ea, line)</code> to return the proper opcodes when using a PPC-ELF/ppc processor type? </p>\n<p>This is the trace the the function takes:</p>\n<ol>\n<li><a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py#651\" rel=\"nofollow\">Assemble(ea, line)</a></li>\n<li><a href=\"https://code.google.com/p/idapython/source/browse/trunk/python/idautils.py#626\" rel=\"nofollow\">_Assemble(ea, line)</a></li>\n<li><a href=\"https://code.google.com/p/idapython/source/browse/trunk/swig/idp.i#68\" rel=\"nofollow\">idaapi.AssembleLine(ea, cs, ip, use32, line)</a></li>\n</ol>\n<p>And a usage example of Assemble(), if it wasn't clear:\n<a href=\"https://code.google.com/p/idapython/source/browse/trunk/Scripts/FindInstructions.py\" rel=\"nofollow\">https://code.google.com/p/idapython/source/browse/trunk/Scripts/FindInstructions.py</a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "assembly",
        "idapython"
    ],
    "user": "Zulakis",
    "time": "Dec 16, 2015 at 17:43",
    "comments": [
        {
            "user": "devttys0",
            "text": "<span class=\"comment-copy\">IDA doesn't support assembly for all architectures: \"Currently, only the IBM PC processors provide an assembler\" (from <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/529.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/support/idadoc/529.shtml</a>, though that is admittedly old). Are you sure PPC supports this?</span>",
            "time": null
        },
        {
            "user": "Zulakis",
            "text": "<span class=\"comment-copy\">@devttys0 Oh, this may actually be the reason. I just assumed that assembling would just work, as does disassembling. Is there a technical reason why it wouldn't? Isn't it just the reverse of disassembling, which IDA is already doing? The docs you linked say that <code>plugin writers can extend or totally replace the built-in assembler by writing their own</code>. Adding support for PPC this way would probably take alot of effort, wouldn't it?</span>",
            "time": null
        },
        {
            "user": "devttys0",
            "text": "<span class=\"comment-copy\">It's up to the developer of the disassembler module to implement an assembler method. Most don't since that's more work and for something that's rarely used. I've written disassembler modules which are a bit of work, but I imagine just overriding the assembler method wouldn't be too much work (disclaimer: I've never done it).</span>",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "<span class=\"comment-copy\">That said, if you only need it for IDAPython, wrapping GNU's <code>as</code> (or radare2's <code>rasm2</code>) to and creating an equivalent <code>Assemble</code> function should not be that hard.</span>",
            "time": null
        }
    ],
    "answers_data": []
}