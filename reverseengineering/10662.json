{
    "title": "Change block/node color with idapython",
    "link": "https://reverseengineering.stackexchange.com/questions/10662/change-block-node-color-with-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can I change color of node (or block?) with idapython? I know about <em>SetColor</em>, but this function does not work with blocks/nodes.</p>\n<p><a href=\"https://i.sstatic.net/ejZyg.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ejZyg.png\"/></a></p>\n<p><strong>EDIT:</strong> Solved, see the code snippet below.</p>\n<pre><code>def get_bb_id(graph, ea):\n    for block in graph:\n        if block.startEA &lt;= ea and block.endEA &gt; ea:\n            return block.id\n\nstart_ea = 0x15f9ad6\nbase_block_ea = 0x15f9a60\n\nf = get_func(start_ea)\ng = FlowChart(f, flags=FC_PREDS) #???\nbb_id = get_bb_id(g, start_ea)\n\np = idaapi.node_info_t()\np.bg_color = 0x00ff00 # green\n\nprint idaapi.set_node_info2(base_block_ea, bb_id, p, \n                            idaapi.NIF_BG_COLOR | idaapi.NIF_FRAME_COLOR)\n</code></pre>\n</div>",
    "votes": "7",
    "answers": 5,
    "views": "3k",
    "tags": [
        "idapython"
    ],
    "user": "DOD",
    "time": "Mar 18, 2016 at 8:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can also use <a href=\"https://sark.readthedocs.io/en/latest/api/Code-Blocks.html\" rel=\"nofollow noreferrer\">Sark</a>:</p>\n<pre><code>import sark\ncode_block = sark.CodeBlock(some_ea)\ncode_block.color = 0x00ff0000\n</code></pre>\n<p>Disclaimer: I am the author of Sark.</p>\n</div>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Mar 23, 2023 at 11:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Look over following functions and around (found in idaapi.py):</p>\n<pre><code>def SetNodeInfo(self, node_index, node_info, flags):\n    \"\"\"\n    Set the properties for the given node.\n\n    Example usage (set second nodes's bg color to red):\n      inst = ...\n      p = idaapi.node_info_t()\n      p.bg_color = 0x00ff0000\n      inst.SetNodeInfo(1, p, idaapi.NIF_BG_COLOR)\n\n    @param node_index: The node index.\n    @param node_info: An idaapi.node_info_t instance.\n    @param flags: An OR'ed value of NIF_* values.\n    \"\"\"\n    _idaapi.pygc_set_node_info(self, node_index, node_info, flags)\n\ndef SetNodesInfos(self, values):\n    \"\"\"\n    Set the properties for the given nodes.\n\n    Example usage (set first three nodes's bg color to purple):\n      inst = ...\n      p = idaapi.node_info_t()\n      p.bg_color = 0x00ff00ff\n      inst.SetNodesInfos({0 : p, 1 : p, 2 : p})\n\n    @param values: A dictionary of 'int -&gt; node_info_t' objects.\n    \"\"\"\n    _idaapi.pygc_set_nodes_infos(self, values)\n</code></pre>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Aug 20, 2015 at 11:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <code>SetColor</code> API ether.<br/>\nYou should call <code>SetColor</code> on every lines of the block, as it colors only one instruction line at a time.<br/>\n<br/>\nHere is my IDAPython code example:</p>\n<pre><code>class ColoringBB(): \n    flowchart = False \n    tgt_ea = 0 \n    startea = 0 \n    endea = 0 \n    addr_fc = 0\n\n    def __init__(self, addr_fc):\n        self._set_fc_address(addr_fc)\n        self._set_flowchart()\n\n    def _set_fc_address(self, addr_fc):\n        self.addr_fc = addr_fc \n\n    def _set_flowchart(self):\n        f = idaapi.get_func(self.addr_fc)\n        self.flowchart = idaapi.FlowChart(f)\n\n    def coloring_bb(self, addr):\n        self._set_bb_range(addr)\n        for addr in range(self.startea, self.endea):\n            idc.SetColor(addr, idc.CIC_ITEM, 0x8f8080) # olive\n\n    def _set_bb_range(self, addr):\n        for block in self.flowchart:\n            if block.startEA &lt;= addr and block.endEA &gt; addr:\n                self.startea, self.endea = block.startEA, block.endEA\n                break\n</code></pre>\n<p>Set the flowchart information before coloring the block.</p>\n<pre><code>addr_fc = 0x8040DCF4 # set flow chart address\ncb = ColoringBB(addr_fc)\n\ncb.coloring_bb(0x8040DD40) # color the block containing those address\ncb.coloring_bb(0x8040DD34) # color the block containing those address\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Jiwon",
            "time": "Dec 11, 2020 at 5:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's a bit more to this question than meets the eye.</p>\n<p>In IDA, each instruction can optionally have a color set on it. Additionally, each graph node can optionally have a color set on it.</p>\n<p>If an instruction does not have a color set on it, its background color defaults to the node's color. If the node does not have a color set on it, its background color defaults to the background color for disassembly for the current IDA theme (Options | Colors... | Disassembly). Each node also has two narrow horizontal bands, one located just above the node's instructions and one located below. These bands are always colored with the node's own background color, or the disassembly theme color if no color has been set on the node.</p>\n<p>When you use the color chooser in the upper-left corner of a graph node, IDA sets the color on the node as well as on each instruction within the node. You can set a color on an individual instruction via the UI with Edit | Other | Color instruction...</p>\n<p>There does not seem to be any way to unset the color of a node or instruction using only the UI (aside from \"Undo\"). The programmatic way to unset a color from an item or node is to specify the color as <code>idc.DEFCOLOR</code> which equals <code>0xffffffff</code> (not to be confused with the color white, which is represented by <code>0x00ffffff</code>).</p>\n<p>Key points:</p>\n<ul>\n<li>If you want to programmatically perform the equivalent of setting a node color via the UI, you need to set the node color both on the node itself and also on each instruction within the node.</li>\n<li>Unsetting the color from an instruction or node can be done using <code>idc.DEFCOLOR</code>.</li>\n<li>A screen refresh is needed - see below.</li>\n</ul>\n<p>Here's what's working for me, on IDA 8.2.230124:</p>\n<pre><code>from itertools import islice\nimport idautils\n\ndef setNodeColor(ea, color, nodeOnly=False):\n    node_info = idaapi.node_info_t()\n    node_info.bg_color = color\n    func = idaapi.get_func(ea)\n    flowchart = idaapi.FlowChart(func)\n    block = list(islice(filter(lambda b: b.start_ea &lt;= ea &lt; b.end_ea, flowchart), 1))[0]\n    idaapi.set_node_info(func.start_ea, block.id, node_info, idaapi.NIF_BG_COLOR)\n    if not nodeOnly:\n        for head in idautils.Heads(block.start_ea, block.end_ea):\n            idc.set_color(head, CIC_ITEM, color)\n\n\n# Example\nea = idc.get_screen_ea()\ncolor = 0xffff00     # use idc.DEFCOLOR to revert to default\nsetNodeColor(ea, color) \nidaapi.refresh_idaview_anyway()\n</code></pre>\n<p><strong>IMPORTANT</strong>: Note the last line: <code>idc.refresh_idaview_anyway()</code>. Without this line, the screen may be left in an outdated or inconsistent state. However, for performance reasons, if you are updating multiple nodes, you should only do this once at the end. That's why I didn't place it inside the function definition.</p>\n</div>",
            "votes": "2",
            "user": "Simon Zuckerbraun",
            "time": "Apr 3, 2023 at 20:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can also use the minsc plugin, over at <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">https://github.com/arizvisa/ida-minsc</a></p>\n<p>Disclaimer: I maintain the minsc plugin, over at <a href=\"https://github.com/arizvisa/ida-minsc/tree/persistence-refactor\" rel=\"nofollow noreferrer\">https://github.com/arizvisa/ida-minsc</a>.</p>\n<pre><code># set a block color\nfunction.block.color(ea, 0xRRGGBB)\n# clear a block color\nfunction.block.color(ea, None)\n\n# set an item color\ndatabase.color(ea, 0xRRGGBB)\n# clear an item color\ndatabase.color(ea, None)\n\n# set the color for a whole function\nfunction.color(ea, 0xRRGGBB)\n# clear the color for a whole function\nfunction.color(ea, None)\n\n# rainbow the basic blocks for a function\nimport itertools\ncolors = itertools.cycle([0xE40303, 0xFF8C00, 0xFFED00, 0x008026, 0x004CFF, 0x732982])\nfor blk, color in zip(function.blocks(), colors):\n    oldcolor = function.block.color(blk, color)\n\n# rainbow a basic block\nfor blk in function.blocks():\n    for ea, color in zip(database.address(blk), colors):\n        oldcolor = database.color(ea, color)\n    continue\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 20, 2024 at 2:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}