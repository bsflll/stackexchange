{
    "title": "Reverse Engineering Dynamic Malware Imports?",
    "link": "https://reverseengineering.stackexchange.com/questions/31342/reverse-engineering-dynamic-malware-imports",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How is it possible to reverse engineer dynamic malware imports using a debugger like x32dbg or Ollydbg?</p>\n<p>I want to dump process injection malware using a debugger trick using a breakpoint on write process memory. But I can't find any injection-related function like WriteProcessMemory at all. I suspect the reason is the malware is dynamically importing.</p>\n<p>How can I solve these issues?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "302",
    "tags": [
        "malware"
    ],
    "user": "David L. Wilson",
    "time": "Jun 2, 2023 at 19:22",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. Quite frankly I fail to see the connection between the screenshot and the question (also, text is usually better than screenshots for the kind of info you posted). Are you insinuating the values we see are hashes by which the malware resolves imports? You don't even mention the platform, but going by the tools, I'll assume Windows. Shellcode or malware can always use the loader info linked from the PEB to find already loaded DLLs and traverse their exports to resolve them. However, there are NT native APIs instead of <code>WriteProcessMemory</code>, too.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using a debugger like x32dbg or Ollydbg, you can set a breakpoint on the LoadLibrary or LoadLibraryA functions, which are typically used by malware to dynamically import libraries. When the breakpoint is hit, the debugger will stop the execution of the program and you can see the library that is being imported.</p>\n<p>Using the same method, you can also set a breakpoint on the GetProcAddress function, which is used to dynamically resolve the addresses of imported functions. This can help you to identify which specific functions are being called by the malware.</p>\n<p>Hope this helps.</p>\n</div>",
            "votes": "-2",
            "user": "Parth",
            "time": "Jan 19, 2023 at 10:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "KishouYusa",
                    "text": "<span class=\"comment-copy\">This method doesn't work when the software use peb to load library or import function because it doesn't need to execut LoadLibrary or GetProcAddress. Check out this github for POC: <a href=\"https://github.com/vxunderground/VX-API/blob/main/VX-API/GetProcAddress.cpp\" rel=\"nofollow noreferrer\">github.com/vxunderground/VX-API/blob/main/VX-API/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. This looks and sounds very much like an AI-generated answer (flagging as such). As the previous commenter pointed out, this barely scratches the surface. Even hooking those relevant functions inside ntdll.dll would provide better visibility of what the software does, but even that misses plenty. As a side note, it depends a lot on the injection method, too, what you need to do in order to figure out what the malware attempts to import/call.</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">Your answer could be improved with additional supporting information. Please <a href=\"https://reverseengineering.stackexchange.com/posts/31438/edit\">edit</a> to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers <a href=\"/help/how-to-answer\">in the help center</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}