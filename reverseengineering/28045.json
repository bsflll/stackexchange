{
    "title": "What is Hardware Breakpoint and when we need to use it?",
    "link": "https://reverseengineering.stackexchange.com/questions/28045/what-is-hardware-breakpoint-and-when-we-need-to-use-it",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In part 5 of the lena151 RE tutorial I saw the Hardware BP.\nThe explanation he gave was very difficult for me to understand.</p>\n<p>Can anyone explain what is a hardware breakpoint and when we need to use it?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "breakpoint"
    ],
    "user": "Jason",
    "time": "Jul 26, 2021 at 7:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>The short answer:</strong></p>\n<p>From the user point of view, software breakpoints are <em>only for instructions,</em> and you may set them <em>as many as you want</em>, while hardware breakpoints are <em>universal,</em> but you may use only a few of them (typically 4) at the same time.</p>\n<p><strong>TL,DR;</strong></p>\n<p>The hardware breakpoints are implemented by a special logic circuit <em>integrated directly in the CPU,</em> connected to</p>\n<ul>\n<li>the <em>address bus</em> on the one side, and</li>\n<li>the special <em>debug registers</em> on the other one.</li>\n</ul>\n<p><a href=\"https://i.sstatic.net/OFzl3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/OFzl3.png\"/></a></p>\n<p>To set a hardware breakpoint, you fill the debug registers (generally indirectly by your debugger) with this information:</p>\n<ul>\n<li>the (starting) <strong>address</strong>,</li>\n<li>the <strong>length</strong> (byte, word, or double-word),</li>\n<li>the <strong>access mode</strong> to watch for (read, read/write, or instruction execution),</li>\n<li>the <strong>local/global</strong> mode (not used for the decision whether the code execution have to break).</li>\n</ul>\n<p>You may do it only for small number of addresses, it's hardware dependent, the common number is 2 to 6 (e.g. for x86 you may set 4 hardware breakpoints: addresses are written to the <em>debug registers DB0 to DB3</em>, while other info — for all addresses individually as appropriate bit flags — to the <em>DB7 register</em>).</p>\n<p>The circuit watches every access to the memory (RAM or ROM) and <em>compares address, length, and access mode</em> with values in the debug registers. If they correspond, the circuit sends the Halt signal and the debugger interrupts the execution of the debugged program.</p>\n<hr/>\n<p>So the <strong>differences</strong> between hardware breakpoints (HB) and software ones (SB) are:</p>\n<ol>\n<li><p>In the <strong>number of them</strong>:</p>\n<ul>\n<li>you may set <em>as many SBs as you wish,</em> but</li>\n<li>only <em>very small number of HBs</em> (typically 4).</li>\n</ul>\n</li>\n<li><p>In <strong>usability</strong>:</p>\n<ul>\n<li>SB is set to a <em>particular instruction</em> (there is no way to set them for memory access), while</li>\n<li>HB is set to address ranges and for the desired access mode.</li>\n</ul>\n</li>\n<li><p>In the applicable <strong>type of memory</strong>:</p>\n<ul>\n<li>SB <em>writes</em> into memory (the <code>INT 3</code> instruction in the place of the first byte of the watched instruction), so <em>it is not capable to set a breakpoint for instruction in read-only memory (ROM),</em> while</li>\n<li>HB don't write anything into memory, so it has not such a limitation.</li>\n</ul>\n</li>\n<li><p>In the <strong>speed</strong> (hardware is always faster than software, so HB is faster than SB).</p>\n</li>\n</ol>\n<p>For example, if you know the address of some string in memory and you are interested <em>when</em> it will be read, SB doesn't help you, but HW does.</p>\n<hr/>\n<p>Some references:</p>\n<ul>\n<li><a href=\"https://wiki.osdev.org/CPU_Registers_x86-64#DR0_-_DR3\" rel=\"nofollow noreferrer\">Debug registers for x86</a></li>\n<li><a href=\"https://hypervsir.blogspot.com/2014/09/debug-registers-on-intel-x86-processor.html\" rel=\"nofollow noreferrer\">Debug Registers on Intel x86 Processor Architecture (with or without VT-x)</a></li>\n<li><a href=\"https://www.sandpile.org/x86/drx.htm\" rel=\"nofollow noreferrer\">x86 architecture debug registers</a></li>\n</ul>\n</div>",
            "votes": "4",
            "user": "MarianD",
            "time": "Jul 26, 2021 at 10:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">In actual practice of applying dynamic analysis on code with a debugger, the difference that really is significant is that software breakpoints can be overwritten (and modify contents of program memory). This is especially important if you are dealing with self -modifying code or code that writes to the executable sections of memory (ie unpackers) For example if you know OEP is at address X and you want to run till you hit that address from EP, you need to use a hw breakpoint because the unpacking stub will overwrite your int3 breakpoint at oep. Other more complex nuances as well.</span>",
                    "time": null
                }
            ]
        }
    ]
}