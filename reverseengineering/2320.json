{
    "title": "How do you optimise AST's or convert them to a real language",
    "link": "https://reverseengineering.stackexchange.com/questions/2320/how-do-you-optimise-asts-or-convert-them-to-a-real-language",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been interested in automatic vulnerability assessment and decompilation of code for a while now. And as a result I have been building parsers in Python that reads a bin, disassembles it instruction by instruction while tracing the execution (the way IDA does it).</p>\n<p>I have been tracing the polluted registers (polluted as in user input) to check when such registers allow us to setup a call or a jump. </p>\n<p>This research has grown to the point, where I want to transform it to a decompiler. I had a look at boomerang and other open source decompilers. I have also had a quick peek inside the dragon book (I don't own it). I would like to hear what you guys think about this idea. Below is my outline:</p>\n<ol>\n<li>Open the binary file to decompile.</li>\n<li>Detect a filetype (PE or ELF) to select the EP and memory layout.</li>\n<li>Jump to the EP and follow execution path of the code while disassembling. \nI use udis86 for it. This execution is in a libemu kind of way.</li>\n<li>Parse the resulting assembly an middle language. To get\nsimpler instructions, (e.g. always remove things like <code>SHL EAX, 0x02</code> and\nchange those things to <code>MUL</code> instructions). </li>\n<li>Parse it into a Abstract Syntax Tree. </li>\n<li>Optimize the AST (although, I have no idea how). </li>\n<li>Transform the AST to something that looks like C.</li>\n</ol>\n<p>I am having issues with the last 2 steps. How does someone parse AST to a real language or something that looks like it? How do you optimize ASTs? Are there build C or Python libraries to accomplish it?</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "decompiler",
        "ast"
    ],
    "user": "Stolas",
    "time": "Jun 26, 2013 at 6:16",
    "comments": [
        {
            "user": "QAZ",
            "text": "<span class=\"comment-copy\">You may be interested in reading the Python source code for the recently released ida-decompiler: <a href=\"https://github.com/EiNSTeiN-/ida-decompiler\" rel=\"nofollow noreferrer\">github.com/EiNSTeiN-/ida-decompiler</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li>The classic work on the decompilation is Cristina Cifuentes' PhD thesis <a href=\"https://web.archive.org/web/20151227193610/http://zyloid.com/recomposer/files/decompilation_thesis.pdf\" rel=\"nofollow noreferrer\">\"Reverse Compilation Techniques\"</a>. She describes generation of C code in Chapter 7.</li>\n<li>The author of the REC decompiler also has <a href=\"http://www.backerstreet.com/decompiler/introduction.htm\" rel=\"nofollow noreferrer\">a nice summary about the decompilation process</a>, though it's more informal.</li>\n<li>For completeness, here's <a href=\"https://web.archive.org/web/20191011055350/https://hex-rays.com/products/ida/support/ppt/decompilers_and_beyond_white_paper.pdf\" rel=\"nofollow noreferrer\">Ilfak's whitepaper on the Hex-Rays decompiler</a>, though he glances over this specific issue, only mentioning that it's \"Very straightforward and easy\" :).</li>\n</ul>\n</div>",
            "votes": "10",
            "user": "Ray",
            "time": "2 days ago",
            "is_accepted": true,
            "comments": []
        }
    ]
}