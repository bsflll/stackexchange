{
    "title": "Lea instruction on datasegment",
    "link": "https://reverseengineering.stackexchange.com/questions/18817/lea-instruction-on-datasegment",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote simple program(was built in release mode(x86)) to practise re skills but I can not understand one part of it. </p>\n<p>C++ program:</p>\n<pre><code>int doSub(int a, int b) \n{\n    int result = a + b;\n    result -= 2;\n    return result;\n}\n\nint doSum(int a, int b)\n{\n    int result = a + b;\n    result += 2;\n    return result;\n}\n\nint main(int argc, char** argv)\n{      \n    int wynik = 0;\n    int liczbaA = atoi(argv[1]);\n    int liczbaB = atoi(argv[2]);\n\n    if (liczbaA &gt; 3)\n    {\n        wynik = doSum(liczbaA, liczbaB);\n    }\n    else\n    {\n        wynik = doSub(liczbaA, liczbaB);\n    }\n\n    std::cout &lt;&lt; \"Result\" &lt;&lt; wynik;\n    return 0;\n}\n</code></pre>\n<p><a href=\"https://i.sstatic.net/Lkorz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Lkorz.png\"/></a></p>\n<p>And my question is: what is happening here?</p>\n<pre><code>lea     ecx, ds:0FFFFFFFEh[ecx*4] ; ??\n</code></pre>\n<p>I supposed to see here two instructions like sub/add. Can someone explain me how it's handled here operation +2 and -2?</p>\n<p>@edit</p>\n<pre><code>loc_401052:\nmov     edi, [ebp+argv]\npush    dword ptr [edi+4] ; Str\ncall    ds:__imp__atoi\nadd     esp, 4\nmov     ebx, eax\npush    dword ptr [edi+8] ; Str\ncall    ds:__imp__atoi\nxor     ecx, ecx\nadd     esp, 4\nadd     eax, ebx\nmov     edx, offset aResult ; \"Result\"\ncmp     ebx, 3\nsetnle  cl\nlea     ecx, ds:0FFFFFFFEh[ecx*4]\nadd     eax, ecx\npush    eax\npush    ecx\nmov     ecx, ds:__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt; std::cout\ncall    std__operator___std__char_traits_char___\nadd     esp, 4\nmov     ecx, eax\ncall    ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(int)\npop     edi\nxor     eax, eax\npop     ebx\nmov     esp, ebp\npop     ebp\nretn\nmain endp\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Mroczny Arturek",
    "time": "Jul 17, 2018 at 17:19",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">don't put assembly as an image. Please put some effort and use text. It's easier for everyone</span>",
            "time": null
        },
        {
            "user": "Mroczny Arturek",
            "text": "<span class=\"comment-copy\">sorry for that, when I will come back home, I will change it</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">A suggestion for future explorations: submit your code at <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">Godbolt.org</a> where you can see what different compilers produce for the same code.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>0FFFFFFFEh</code> is <code>-2</code> in decimal format</p>\n<p>ecx= is 1 if liczbaA is more than 3 and 0 otherwise</p>\n<p>instruction LEA (load effective address) can do special arithmetic operation: <code>a + b*X + Y</code> where <code>a</code> and <code>b</code> are registers, <code>Y</code> is constant and <code>X</code> is 1, 2, 4 or 8. </p>\n<p>In your case you calculate:\n<code>-2+4*ecx</code> or <code>-2+4*(liczbaA&gt;3)</code></p>\n<p>if liczbaA is more than 3 then result is 2 if less then it is -2</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jul 17, 2018 at 10:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mroczny Arturek",
                    "text": "<span class=\"comment-copy\">It make sense. Two questions from my side: 1. \"-2 + 4*ecx\", is there always add operator(between number and register)? 2. Does \"ds:\" have special meaning here? or on (x86) can I ignore it?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Release mode optimises. if you want to see simple unoptimised asm blow-by-blow - turn off all optimisations or compile your code in debug mode (not sure the latter will work tho).</p>\n<p>The whole segment from </p>\n<pre><code>cmp ebx,3\n</code></pre>\n<p>to</p>\n<pre><code>add eax, ecx\n</code></pre>\n<p>looks like the equivalent of the original <em>if</em> with your two functions inlined and the condition flattened into a series of arithmetic operations.</p>\n</div>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Jul 17, 2018 at 5:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">A minor note: even when <i>not</i> specifying full optimization, a lot of current compilers already optimize as much as possible in the initial compiling run. Gone are the days you could quite literally \"read\" the translation of one C instruction in a coherent series of ASM statements.</span>",
                    "time": null
                }
            ]
        }
    ]
}