{
    "title": "Call again function with new parameters",
    "link": "https://reverseengineering.stackexchange.com/questions/16906/call-again-function-with-new-parameters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I developing online game. I have full sources for server, but game client I am using is closed-source so I need to do some reverse engineering there. So for 2 weeks I am trying to properly call draw_rectangle function. In the image below you can see screenshot from OLLY.\nThere are functions:</p>\n<p>DRAW_BLACK_BAR(black frame for health bar),</p>\n<p>DRAW_COLORED_BAR(The health inside),</p>\n<p>DRAW_NICK(already hooked)</p>\n<p><a href=\"https://i.sstatic.net/DpIIg.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/DpIIg.png\"/></a></p>\n<p>the CALL DWORD PTR DS:[EDX+14] always points to 0x4EB2F0</p>\n<p>So the addres contains that function in debugger:</p>\n<p><a href=\"https://i.sstatic.net/ahpGt.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ahpGt.png\"/></a></p>\n<p>As you can see there are parameters on the stack such as: Surface_id, position, size, color, pointer to creature.</p>\n<p>So theres my hook:</p>\n<pre><code>superHook(dwHandle, 0x4C8C28, (unsigned int)newFunc); //instead of call print rectangle func for colored bar\n \nvoid superHook(HANDLE dwHandle, int adr, unsigned int targetFunction)\n{\n    //its not normal CALL ADDR which takes 5 bytes (E8 + 4x bytes for address)\n    //It is CALL DWORD PTR DS:[EDX+14] which takes 3bytes, so we will take more space\n    //and we will rebuild the function\n     \n     \n    // jmp to address +2x nop\n    BYTE bytes[7] = { 0xE9, 0xFF, 0xFF, 0xFF, 0xFF, 0x90, 0x90};\n    DWORD targetAddr = targetFunction - adr - 5;\n    *(DWORD*)(bytes + 1) = targetAddr;\n    WriteProcessMemory(dwHandle, (void *)adr, bytes, 7, NULL);\n}\n \nvoid newFunc()\n{\n    //Rebuild the function (Earsed commands to be able to put JMP address)\n    __asm {\n            MOV ECX, DWORD PTR SS : [EBP - 0x18]\n            PUSH ESI\n    }\n \n    //Here I can access all the registers and stack before CALL will be executed\n     \n \n    //call draw rectangle\n    __asm {\n            CALL DWORD PTR DS : [EDX + 0x14]//always call 0x4EB2F0?\n    }\n \n \n    //go back\n    __asm {\n        PUSH 0x4C8C2F\n            RET\n    }\n \n}\n</code></pre>\n<p>And it works fine, I can acces the params on stack and modify them (CHange color,size, location etc). BUt I would like to be able to create another rectangle, for example next one with another color and position. I tried a lot of combinations of setting up the new stack with params calling the func and then calling it again with original ones but I always end up with client crash.</p>\n<p>Heres an one of example of my attempt to create new call + restoring old one\n<a href=\"https://pastebin.com/RUmaPGya\" rel=\"nofollow noreferrer\">https://pastebin.com/RUmaPGya</a> (pastebin to not make this post too long)</p>\n<p>Help plz :)</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "161",
    "tags": [
        "ollydbg",
        "c++",
        "function-hooking"
    ],
    "user": "Piodo",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "EWD-0-",
            "text": "<span class=\"comment-copy\">First of all please use PUSHAD and POPAD to store/restore the registers and not to do it one by one.</span>",
            "time": null
        },
        {
            "user": "Piodo",
            "text": "<span class=\"comment-copy\">Had no idea about that command. Thanks, gonna definitely check them out as soon Im home</span>",
            "time": null
        },
        {
            "user": "dsasmblr",
            "text": "<span class=\"comment-copy\">To note, PUSHAD/POPAD are x86-only (which will work fine in your case since you're clearly dealing with a 32-bit binary). General purpose registers must be individually preserved/restored in x64. That aside, have you tried placing a breakpoint and stepping through your code to see exactly where the crash happens? That should elaborate on register/stack states for you to identify key problem areas.</span>",
            "time": null
        },
        {
            "user": "Piodo",
            "text": "<span class=\"comment-copy\">I wish I can do it, but I go some weird anti-bot block that does not let me login into the game with attached debugger. Its okay to attach when the game is running and the player is already logged in, but in that case the game crashes after login and Im not able to check out how the parameters went there.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Your first priority should be to bypass the anti-RE mitigations the application uses, so future reverse engineering can be easier to perform.</span>",
            "time": null
        }
    ],
    "answers_data": []
}