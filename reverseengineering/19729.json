{
    "title": "Need help understanding a complex mathematical password checking function?",
    "link": "https://reverseengineering.stackexchange.com/questions/19729/need-help-understanding-a-complex-mathematical-password-checking-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Below is a complex pseudocode for a mathematical problem which attempts to check if a password entered is correct or not.</p>\n<p>Previous Analysis Done:\nData is arranged in the form of 3x3 Matrix with i,j as row, columns and k as a temporary variable to generate test conditions.\nElements v6, v7, v8 .. etc are used in the k loop as an array.\nThe end goal is to return 0 for successful completion of the code.</p>\n<pre><code>signed __int64 __fastcall check_password(const char *a1)\n{\n  signed int i; // [rsp+10h] [rbp-30h]\n  signed int j; // [rsp+14h] [rbp-2Ch]\n  int v4; // [rsp+18h] [rbp-28h]\n  signed int k; // [rsp+1Ch] [rbp-24h]\n  char v6; // [rsp+20h] [rbp-20h]\n  char v7; // [rsp+21h] [rbp-1Fh]\n  char v8; // [rsp+22h] [rbp-1Eh]\n  char v9; // [rsp+23h] [rbp-1Dh]\n  char v10; // [rsp+24h] [rbp-1Ch]\n  char v11; // [rsp+25h] [rbp-1Bh]\n  char v12; // [rsp+26h] [rbp-1Ah]\n  char v13; // [rsp+27h] [rbp-19h]\n  char v14; // [rsp+28h] [rbp-18h]\n  unsigned __int64 v15; // [rsp+38h] [rbp-8h]\n\n  v15 = __readfsqword(0x28u);\n  v6 = 79; \n  v7 = 8;\n  v8 = 29;\n  v9 = 58;\n  v10 = 81;\n  v11 = 21;\n  v12 = 49;\n  v13 = 123;\n  v14 = 114;\n  if ( strlen(a1) != 9 )\n    return -1;\n  for ( i = 0; i &lt;= 2; ++i )\n  {\n    for ( j = 0; j &lt;= 2; ++j )\n    {\n      v4 = 0;\n      for ( k = 0; k &lt;= 2; ++k )\n        v4 = (a1[3 * k + j] * *(&amp;v6 + 3 * i + k) + v4) % 127;\n      if ( i == j )\n      {\n        if ( v4 != 1 )\n          return -2;\n      }\n      else if ( v4 )\n      {\n        return -2;\n      }\n    }\n  }\n  return 0;\n}\n</code></pre>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "377",
    "tags": [
        "assembly",
        "math"
    ],
    "user": "Sujith Sizon",
    "time": "Oct 26, 2018 at 7:49",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Can you attach the binary too? I would like to make some changes in the data types in the decompiled code.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">It looks like that 2 3x3 matrices are being multiplied and the product's diagonal should be all 1 in <code>int8_t</code> limits. I would write a proper answer once I have verified that in IDA.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">@sudhackar The product is required to be the Identity matrix where n=3. Notice any other values except the diagonal are required to be precisely 0. Looking forward to reading your answer :)</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">@Nirlzr oh  yes I missed all other being 0. Thanks.</span>",
            "time": null
        },
        {
            "user": "Sujith Sizon",
            "text": "<span class=\"comment-copy\">@sudhackar Link to full binary <a href=\"https://drive.google.com/file/d/1GatqkD_6lUFdrxs_WYPYOrv6VQoE0tHj/view?usp=sharing\" rel=\"nofollow noreferrer\">drive.google.com/file/d/1GatqkD_6lUFdrxs_WYPYOrv6VQoE0tHj/â€¦</a>, (input pass needs to have length 9 as its matrix)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you've already mostly decoded the code, there are two things left: 1) understand what the code is doing and 2) understand how to compute the appropriate input.  </p>\n<h2>The original code</h2>\n<p>First, here's a slightly modified bit of code based on what you already had:</p>\n<pre><code>int check_password(const char *s) {\n    char fixed[] __attribute__ ((aligned (16))) = { 79, 8, 29, 58, 81, 21, 49, 123, 114 };\n    if (strlen(s) != 9)\n        return -1;\n    for (int i=0; i &lt; 3; ++i) {\n        for (int j=0; j &lt; 3; ++j) {\n            int sum = 0;\n            for (int k=0; k &lt; 3; ++k) {\n                sum = (fixed[3 * i + k] * s[3 * k + j] + sum) % 127;\n            }\n            if (i == j) {\n                if (sum != 1) {\n                    return -2;\n                }\n            } else if (sum) {\n                return -2;\n            }\n        }\n    }\n    return 0;\n}\n</code></pre>\n<p>The <code>__attribute__ ((aligned (16)))</code> can be ignored for our purposes.  (I had included that to get <code>gcc</code> to use the same stack  offset as your sample code.)  What the code is doing is multiplying two 3x3 matrices, mod 127, and checking for the identity matrix.  </p>\n<h2>The mathematics</h2>\n<p>Unfortunately, ReverseEngineering does not support MathJax, or I'd be able to write out pretty equations.  Since I can't we'll do it the hard way.  Let's say <code>s = \"ABCDEFGHI\"</code> is the input password and we treat it as a 3x3 matrix.  For now, if we just assign uppercase letters to each letter in the password, expressed as a matrix, this is:</p>\n<pre><code>A B C        79   8  29       1 0 0\nD E F   x    58  81  21   =   0 1 0    (mod 127)\nG H I        49 123 114       0 0 1\n</code></pre>\n<p>If you're familiar with matrix manipulation already, you may already recognize that this means that <code>s</code> must be the <em>inverse</em> of the <code>fixed</code> matrix.  There are multiple ways of calculating this, such as by <a href=\"https://en.wikipedia.org/wiki/Gaussian_elimination#Finding_the_inverse_of_a_matrix\" rel=\"nofollow noreferrer\">Gauss-Jordan elimination</a>.  Another way is to multiply the reciprocal of the <a href=\"https://en.wikipedia.org/wiki/Determinant\" rel=\"nofollow noreferrer\">determinant</a> of the matrix by the transpose of its <a href=\"https://en.wikipedia.org/wiki/Minor_(linear_algebra)#Inverse_of_a_matrix\" rel=\"nofollow noreferrer\">cofactor matrix</a>.  Note that all of the mathematics is done mod 127, as per the original code.</p>\n<h2>Worked example</h2>\n<p>To make things a bit more concrete, I'll use the latter method and show the step-by-step worked solution.  First, we calculate the determinant using the <a href=\"https://en.wikipedia.org/wiki/Leibniz_formula_for_determinants\" rel=\"nofollow noreferrer\">Leibniz formula</a>.</p>\n<pre><code>D = 79*81*114 + 8*21*49 + 29*58*123 - 29*81*49 - 8*58*114 - 79*21*123   (mod 127)\nD = 572550 (mod 127)\nD = 34  (mod 127)\n</code></pre>\n<p>To compute the reciprocal, of this we can't just use <code>1/34</code> because we're working with modular mathematics.  So just in the way that we'd expect that <code>34 * 1/34 = 1</code> for regular mathematics, in modular mathematics, we're looking for something that satifies the equation <code>34 * x = 1  (mod 127)</code>.  One way to do this is to use the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Computing_multiplicative_inverses_in_modular_structures\" rel=\"nofollow noreferrer\">extended Euclidean algorithm</a>.  I won't go through that algorithm here, but in this case, the answer is 71 (which we can verify by noting that <code>71 * 34 = 2414 = 1 (mod 127)</code>.</p>\n<p>Next we calculate the cofactor matrix.  Here again, we won't go through all of the steps, but the cofactor matrix of <code>fixed</code> is:</p>\n<pre><code> 6651  -5583   3165\n 2655   7585  -9325     (mod 127) \n-2181     23   5935\n</code></pre>\n<p>Since we're working with modular mathematics, we can reduce this:</p>\n<pre><code> 47     5   117\n115    92    73      (mod 127)\n105    23    93\n</code></pre>\n<p>Now all that's left is to multiply them together:</p>\n<pre><code>         47     5   117\n71   *  115    92    73      (mod 127)\n        105    23    93\n\n\n3337    355   8307\n8165   6532   5183   (mod 127) \n7455   1633   6603\n\n35   101    52\n37    55   103    (mod 127)\n89   109   126\n</code></pre>\n<p>Finally, we take the transpose:</p>\n<pre><code> 35    37    89\n101    55   109\n 52   103   126\n</code></pre>\n<p>If we then translate this matrix back into an ASCII string, we get <code>\"#%Ye7m4g~\"</code> which is the inverse of the given matrix and the solution to this reverse engineering problem.</p>\n<h2>Why this might matter</h2>\n<p>While it may be an interesting enough puzzle by itself, these kinds of transformations using discrete mathematics and modular arithmetic are fundamental to many areas of modern cryptography.  Since you've already started looking into reverse engineering, you may find it useful and interesting to study these topics as well.  </p>\n</div>",
            "votes": "12",
            "user": "Edward",
            "time": "Nov 1, 2018 at 0:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">A great answer!</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">+1 for the matrix explanation. Tip: The matrix can be formatted with ASCII art.</span>",
                    "time": null
                }
            ]
        }
    ]
}