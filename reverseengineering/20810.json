{
    "title": "Can I stop Ghidra from creating extended references?",
    "link": "https://reverseengineering.stackexchange.com/questions/20810/can-i-stop-ghidra-from-creating-extended-references",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to disassemble some 6502 using Ghidra. The following (prerequisites: POSIX-style shell, Python 2.x) will generate a file called <code>test.dat</code> that demonstrates the issue:</p>\n<pre><code>python -c \"open('test.dat','wb').write(''.join([chr(x) for x in [0xa2,0xa3,0xa9,0x00,0x9d,0x40,0x00,0xca,0x10,0xfa,0x60]]))\"\n</code></pre>\n<p>Then, from in Ghidra:</p>\n<ol>\n<li>create new project (wherever you like)</li>\n<li>import <code>test.dat</code> created above, with Language as <code>6502</code>/<code>default</code> and <code>Base Address</code> as 0x400</li>\n<li>double click <code>test.dat</code> in <code>Active Project</code> to get to the CodeBrowser window</li>\n<li>say No when analysis is offered</li>\n<li>go to location $400 and press D to disassemble</li>\n</ol>\n<p>The disassembly is pretty short.</p>\n<pre><code>                             //\n                             // RAM \n                             // fileOffset=0, length=11\n                             // RAM: 0400-040a\n                             //\n            0400 a2 a3           LDX        #0xa3\n            0402 a9 00           LDA        #0x0\n                             LAB_0404                                        XREF[1]:     0408(j)  \n            0404 9d 40 00        STA        $0x40,X=&gt;DAT_00e3                                = ??\n            0407 ca              DEX\n            0408 10 fa           BPL        LAB_0404\n            040a 60              RTS\n</code></pre>\n<p>The odd thing here is that rather than generating a label for <code>$0040</code>, which is the base address of the table, it's generated one for <code>$00e3</code> - the first byte accessed - as if X is a TOC pointer, or similar, and $0040 is the offset. This isn't appropriate for 6502 code.</p>\n<p>In this little example I can right click and fix up the references by hand, but I don't mind admitting that I don't want to have to do this for an entire program. 6502 code is full of this stuff.</p>\n<p>Can I stop this from happening?</p>\n<p>(I got very lost trying to follow through the Java source provided! - but I did figure out that this sort of reference is known as an extended reference, and appears to be common to all targets. I couldn't find anything in the documentation about these, though, or how to disable them.)</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "disassemblers",
        "ghidra"
    ],
    "user": "Tom Seddon",
    "time": "Mar 7, 2019 at 17:50",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. This sounds very specific and all of us who don't work as spooks are just learning to use Ghidra. I'd strongly suggest taking your request to <a href=\"https://github.com/NationalSecurityAgency/ghidra\" rel=\"nofollow noreferrer\">the GitHub project</a> and opening an issue there. This looks more like a defect, given your details so far.</span>",
            "time": null
        },
        {
            "user": "Tom Seddon",
            "text": "<span class=\"comment-copy\">For future reference: somebody else raised a GitHub issue for this. See <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/201\" rel=\"nofollow noreferrer\">github.com/NationalSecurityAgency/ghidra/issues/201</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To get rid of these references, you need to disable the \"Basic Constant Reference Analyzer\" located in the Analysis Options (Analysis -&gt; Auto Analyze ...)</p>\n<p>After this, select your code and clear it (C hotkey by default) and then disassemble again.</p>\n</div>",
            "votes": "4",
            "user": "xyz",
            "time": "Mar 10, 2019 at 4:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tom Seddon",
                    "text": "<span class=\"comment-copy\">Excellent, thanks - this looks promising, and stops it creating the spurious DAT_00e3 label, but no label is created for address 0x40, so from my perspective this still isn't quite a solution.  But it might be that this is as good as it gets (I doubt 6502 was high on their priority list...), so I'll be happy to accept this as the answer if it starts to look like that's the case. It does give me a few more things to look for in the code.</span>",
                    "time": null
                },
                {
                    "user": "xyz",
                    "text": "<span class=\"comment-copy\">From what I can see, how it works is <code>ConstantPropagationAnalyzer</code> emulates p-code (the internal ghidra representation) of your program instructions and once it sees a load from an address, it creates a reference. Now, the address it sees is the computed result, 0xE3, so this is what it adds a reference to. You'll probably need to write a custom analyzer for 6502 that would use the original instruction (not its p-code) and create a reference to 0x40.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>haven't used ghidra yet but checking your bytes on radare2 it appears the diassembly is right </p>\n<pre><code>C:\\&gt;radare2 -\n[0x00000000]&gt; e io.cache = true\n[0x00000000]&gt; w \\xa2\\xa3\\xa9\\x00\\x9d\\x40\\x00\\xca\\x10\\xfa\\x60\n[0x00000000]&gt; px 10\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  a2a3 a900 9d40 00ca 10fa                 .....@....\n[0x00000000]&gt; e asm.arch = 6502\n[0x00000000]&gt; pd 6\n            0x00000000      a2a3           ldx #0xa3\n            0x00000002      a900           lda #0x00\n        .-&gt; 0x00000004      9d4000         sta 0x0040,x  //(0xa3 + 0x40 == 0xe3)\n        :   0x00000007      ca             dex\n        `=&lt; 0x00000008      10fa           bpl 0x000004\n            0x0000000a      60             rts\n[0x00000000]&gt; af\n[0x00000000]&gt; pdc\nfunction fcn.00000000 () {\n    //  3 basic blocks\n    loc_0x0:\n\n       x = #0xa3\n       a = #0x00\n   do\n   {\n        loc_0x4:\n\n           [0x0040+x ] = a\n           dex\n           bpl 0x000004             //unlikely\n       } while (?);\n  return;\n\n    loc_0xa:\n\n       rts\n(break)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 7, 2019 at 18:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}