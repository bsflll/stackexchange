{
    "title": "x86 disassembly confusion regarding VESA functions",
    "link": "https://reverseengineering.stackexchange.com/questions/22732/x86-disassembly-confusion-regarding-vesa-functions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to disassemble an old DOS application and got stuck at some point of the VESA graphics handling.</p>\n<p>The VESA function to be called will be stored in a global variable, e.g. <code>vesa_fct_dword_749C8 = 0x4f00</code>, <code>0x4f01</code>, etc.\nAfter checking the return value, the application will do some additional magic, which I, frankly, don't understand. My guess is that it will check for a specific error return value (<code>0x01</code>, in particular), but I'm really not quite sure about it and how it's actually done.</p>\n<p>Here's the relevant snippet:</p>\n<pre><code>cseg01:000159D8 loc_159D8:                              ; CODE XREF: checkForVesa+D4â†‘j\ncseg01:000159D8                 mov     eax, vesa_fct_dword_749C8\ncseg01:000159DD                 mov     edx, vesa_fct_dword_749C8\ncseg01:000159E3                 sar     edx, 1Fh\ncseg01:000159E6                 shl     edx, 8\ncseg01:000159E9                 sbb     eax, edx\ncseg01:000159EB                 sar     eax, 8\ncseg01:000159EE                 and     eax, 0FFh\ncseg01:000159F3                 cmp     eax, 1\ncseg01:000159F6                 jnz     short loc_15A01\ncseg01:000159F8                 mov     [ebp+var_4], 0\ncseg01:000159FF                 jmp     short loc_15A29\n</code></pre>\n<p>Maybe someone knows what's up with that part, that would be really appreciated!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "81",
    "tags": [
        "ida",
        "disassemblers",
        "dos"
    ],
    "user": "Mentulatus",
    "time": "Dec 13, 2019 at 20:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This code takes the most significant bit of <code>EAX</code> (<code>msb(EAX)</code>) and then, it subtracts it from <code>AH</code> and compares the result to <code>1</code>. According to <a href=\"https://www.versalogic.com/Support/Downloads/pdf/69030bg.pdf\" rel=\"nofollow noreferrer\">this specification</a> (\"VBE Return Status\" section):</p>\n<ul>\n<li><code>AX = 014F</code> =&gt; <code>AH = 1</code> means \"<em>Function call failed</em> \"</li>\n<li><code>AX = 024F</code> =&gt; <code>AH = 2</code> means \"<em>Function is not supported in current hardware configuration</em>\n\"</li>\n</ul>\n<p>And the <code>jnz</code> instruction will be executed if <code>msb(EAX) = 1</code> and <code>AH = 2</code>, or when <code>msb(EAX) = 0</code> and <code>AH = 1</code>. Unfortunately, I don't know what information is stored in <code>msb(EAX)</code> (maybe something related to VBE version?).</p>\n</div>",
            "votes": "1",
            "user": "bart1e",
            "time": "Dec 14, 2019 at 15:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}