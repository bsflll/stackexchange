{
    "title": "Mysterious chunk of code in IOLI crackme0x06 challenge",
    "link": "https://reverseengineering.stackexchange.com/questions/21403/mysterious-chunk-of-code-in-ioli-crackme0x06-challenge",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been struggling to understand a very strange piece of x86 assembly code from the <a href=\"http://security.cs.rpi.edu/courses/binexp-spring2015/lectures/2/challenges.zip\" rel=\"nofollow noreferrer\">IOLI</a> <em>crackme0x06</em> challenge.</p>\n<h2>Context</h2>\n<p>But first of all, here is the context : I've successfully cracked the challenge, which by the way simply needs : </p>\n<ol>\n<li><p>An <strong><em>even</em></strong> number</p></li>\n<li><p>This number being <strong><em>in the range of 32-bit representation of signed integers</em></strong>, ie between <img alt=\"-2^31\" src=\"https://latex.codecogs.com/gif.latex?%5Cinline%20-2%5E%7B31%7D\"/> (<code>INT32_MIN</code>) and <img alt=\"2^31-1\" src=\"https://latex.codecogs.com/gif.latex?%5Cinline%202%5E%7B31%7D-1\"/> (<code>INT32_MAX</code>) (due to the call to <a href=\"https://stackoverflow.com/questions/51972234/sscanf-handles-maximal-unsigned-integer-value-differently-than-assignment-does\">sscanf</a> which apparently performs <a href=\"https://en.wikipedia.org/wiki/Saturation_arithmetic\" rel=\"nofollow noreferrer\">integer saturation</a> on the input if it's greater than <code>INT32_MAX</code>)</p></li>\n<li><p>An <strong><em>environment variable</em></strong> - whose name shall begin by '<strong><em>LOL</em></strong>' - being exported in the <em>crackme</em> process environment. </p></li>\n</ol>\n<h2>The issue</h2>\n<p>Now, for completeness purposes, I'm trying to grasp the purpose of every single instruction of this <em>crackme</em>, but so far, I'm struggling to understand how the following code (from <code>##loop beginning</code> to <code>##loop end</code>) from the <code>sym.parell</code> function is actually useful in anyway to the program :</p>\n<pre><code>\n    0804851a &lt;parell&gt;:    \n     804851a:       push   ebp\n     804851b:       mov    ebp,esp\n     804851d:       sub    esp,0x18\n     8048520:       lea    eax,[ebp-0x4]\n     8048523:       mov    DWORD PTR [esp+0x8],eax\n     8048527:       mov    DWORD PTR [esp+0x4],0x804873d\n     804852f:       mov    eax,DWORD PTR [ebp+0x8]\n     8048532:       mov    DWORD PTR [esp],eax\n     8048535:       call   80483c8 &lt;sscanf@plt&gt;\n     804853a:       mov    eax,DWORD PTR [ebp+0xc]\n     804853d:       mov    DWORD PTR [esp+0x4],eax\n     8048541:       mov    eax,DWORD PTR [ebp-0x4]\n     8048544:       mov    DWORD PTR [esp],eax\n     8048547:       call   80484b4 &lt;dummy&gt;\n     804854c:       test   eax,eax\n     804854e:       je     8048586 &lt;parell+0x6c&gt;\n     8048550:       mov    DWORD PTR [ebp-0x8],0x0   # Initialization of i (see pseudo-code below)\n     8048557:       cmp    DWORD PTR [ebp-0x8],0x9   ## loop beginning\n     804855b:       jg     8048586 \n     804855d:       mov    eax,DWORD PTR [ebp-0x4]   # Handling password's parity check\n     8048560:       and    eax,0x1\n     8048563:       test   eax,eax\n     8048565:       jne    804857f &lt;parell+0x65&gt;\n     8048567:       mov    DWORD PTR [esp],0x8048740\n     804856e:       call   80483b8 &lt;printf@plt&gt;\n     8048573:       mov    DWORD PTR [esp],0x0\n     804857a:       call   80483e8 &lt;exit@plt&gt;\n     804857f:       lea    eax,[ebp-0x8]\n     8048582:       inc    DWORD PTR [eax]\n     8048584:       jmp    8048557 &lt;parell+0x3d&gt;     ## loop end\n     8048586:       leave\n     8048587:       ret\n</code></pre>\n<p>It seems to be equivalent to the following pseudo-code :</p>\n<pre><code>    for (int i = 0; i &lt;= 9; ++i)\n            if LSB (password) is 0    // ie if password is an even number\n                printf(\"Password OK!\\n\");\n                exit(0);\n</code></pre>\n<p>But the thing is, <strong><em>looping from 0 to 9</em></strong> won't do <em>anything relevant</em> for the parity check of the number ...<br/>\nAnd as far as the password testing is concerned, the computation taking place in the <code>sym.parell</code> function is <em>never</em> impacted by such a loop !</p>\n<hr/>\n<p>I've been scratching my head over that for hours, but I really couldn't figure out its exact purpose.  </p>\n<p>Had this challenge not been for beginners (by the way it's the first <em>hands-on lab</em> of the <strong><a href=\"http://security.cs.rpi.edu/courses/binexp-spring2015/\" rel=\"nofollow noreferrer\">RPISEC</a></strong> academic course), I would have thought that this is just some silly <em>obfuscation/junk code</em> technique meant to deflect the attention of the attacker, which is obviously not the case.<br/>\nThis series of challenges is only aiming at helping newbies build strong basics in the field.</p>\n<hr/>\n<p>Am I wrong ?<br/>\nSo, seriously, what is the aforementioned code's purpose in this program ?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "267",
    "tags": [
        "disassembly",
        "x86",
        "c",
        "obfuscation",
        "crackme"
    ],
    "user": "programmersn",
    "time": "Jun 9, 2019 at 10:44",
    "comments": [
        {
            "user": "bart1e",
            "text": "<span class=\"comment-copy\">There is no loop in the disassembly you posted. Could you paste the complete loop code here?</span>",
            "time": null
        },
        {
            "user": "programmersn",
            "text": "<span class=\"comment-copy\">@bart1e My bad. Please see the edit now, I've added the whole function with appropriate comments,  plus I got rid of the superfluous opcodes listing in disassembly.</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">yes, it looks like a bug that's supposed to iterate over all characters of the password, but the index is never updated, so it's checking the first byte repeatedly for an odd value.</span>",
            "time": null
        },
        {
            "user": "programmersn",
            "text": "<span class=\"comment-copy\">Why would it need to iterate over the password's bytes ?  It makes no sense knowing the validity requirements of the password, which I pointed out in the context section.  No need for any other check, whatsoever. That's what is puzzling me.</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">If every character in the password is required to be an even number then it needs to iterate over them all to ensure that.</span>",
            "time": null
        }
    ],
    "answers_data": []
}