{
    "title": "What is the following assembly code doing? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/22139/what-is-the-following-assembly-code-doing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions asking for help <b>reverse-engineering a specific system</b> are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2019-09-24 08:50:57Z\">5 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/22139/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<pre><code>str fp,[sp, -4]!\nadd fp, sp, #0\nsub sp, sp, #12\nstr r0, [fp, #-8]\nstr r1 [fp, #-12]\n\nL5:\nldr r3, [fp, #-8]\nldrb r3, [r3]\ncmp r3, #0\nbeq .L2\nldr r3, [fp, #-12]\nldrb r3, [r3]\ncmp r3, #0\nbeq .L2\nldr r3, [fp, #-8]\nldrb r2, [r3]\nldr r3, [fp, #-12]\nldrb r3, [r3]\ncmp r2, [r3]\nbne .L8\nldr r3, [fp, #-8]\nadd r3, r3, #1\nstr r3, [fp, #-8]\nldr r3, [fp, #-12]\nadd r3, r3, #1\nstr r3, [fp, #-12]\nb .L5\n\n.L8\nnop\n\n.L2\nldr r3, [fp, #-8]\ncmp r3, #0\nbne .L6\nldr r3, [fp, #-12]\ncmp r3, #0\nbne .L6\nmov r3, #0\nb .L7\n\n.L6\nldr r3, [fp, #-8]\nldrb r3, [r3]\nmov r3, r3\nldr r3, [fp, #-12]\nldrb r3, [r3]\nsub r3, r2, r3\n\n.L7\nmov r0,r3\nadd sp, fp, #0\nldr fp, [sp], #4\nbx lr\n</code></pre>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "879",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "arm"
    ],
    "user": "Bobby",
    "time": "5 years ago",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">please at least format the code better so it's easier to follow</span>",
            "time": null
        },
        {
            "user": "Bobby",
            "text": "<span class=\"comment-copy\">Thank you! will keep that in mind. I'm new to RE, could you please help me understand the above code</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Have you tried stepping through it with a debugger?</span>",
            "time": null
        },
        {
            "user": "Bobby",
            "text": "<span class=\"comment-copy\">yes, since there isn't any proper structure to the code, debuggers weren't of much help to me. I understand that there is some kind of if/if-else/switch happening but can't really put my finger on it</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Very low effort question. You should at least provide some context and what you already discovered.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think this is a <code>strcmp</code> function which was compiled without optimization and is really inefficient.</p>\n<p>Here is why:</p>\n<ul>\n<li>The function only uses <code>r0</code> and <code>r1</code> which are first and the second parameter.</li>\n<li>Both parameters are pointer because they are dereferenced</li>\n<li>All memory access are byte long</li>\n<li>Read bytes are compared against '\\0'</li>\n<li>Read bytes are compared using the instruction <code>cmp</code> (subtraction without modifying the destination register)</li>\n<li>When the byte differs, the returned value is both bytes subtracted (.L6)</li>\n<li>If both read byte are equal, pointers are incremented by one and it branches back to the comparison block</li>\n<li>They are extra copies on the stack, it's useless and typical from non-optimized code</li>\n</ul>\n</div>",
            "votes": "2",
            "user": "wisk",
            "time": "Sep 17, 2019 at 8:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}