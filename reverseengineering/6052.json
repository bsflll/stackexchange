{
    "title": "What methodology can be used to change code flow atomically during program execution?",
    "link": "https://reverseengineering.stackexchange.com/questions/6052/what-methodology-can-be-used-to-change-code-flow-atomically-during-program-execu",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been reading a lot about the different techniques for Windows API hooking  (a technique I'm particularly fascinated by and fond of), and it seems a major problem in implementing a <em>realiable</em> hook function is ensuring that the hook is written in a way that is thread-safe. Of course, there are some techniques where this problem has been solved or can be solved trivially, such as <a href=\"https://devblogs.microsoft.com/oldnewthing/20110921-00/?p=9583\" rel=\"nofollow noreferrer\">hotpatching the Windows API</a>, but hot patching is not guaranteed to work on all win32 or third party API functions and the techniques that do support hooking them are not normally thread-safe.</p>\n<p>A very common technique that is has problems caused by multithreading is a inline hook that replaces the normal function prologue code with a <a href=\"http://jbremer.org/x86-api-hooking-demystified/\" rel=\"nofollow noreferrer\">jump instruction to the hook procedure</a>, and then calls the original function as needed through a trampoline.</p>\n<p>There are several inherent issues to the inline hook technique, which makes it a very complicated method to use and debug. A primary issue is as I mentioned, that it is not safe in a orthodox multithreaded environment in the real world. This is due to that when changing the bytes of the function, you can not guarantee that the instruction pointer will not be in the middle of your newly injected code, which may then cause the target application to crash from executing an invalid mix of the old opcodes mixed with the opcodes you inserted.</p>\n<p>There are some solutions to this problem, with one being suspending all the threads in the process and then checking the instruction pointer in each thread to ensure that no thread is currently executing the target instructions you wish to replace. Then if there happens to be a thread or two executing that particular function, then you can respond accordingly by doing something such as performing a stack trace to place a breakpoint at the return address, resuming the thread, and then handling the exception when the thread has returned from the target function.</p>\n<p>Of course, this method is still unsafe, because there is nothing stopping one sneaky thread from using <code>CreateThread()</code> before you can suspend all of the running threads in the process (some applications on my computer run with 40+ threads at once). There could even be a related process that uses <code>CreateRemoteThread()</code> in your target application and then calls the function you are hooking before it's safe.</p>\n<p>A solution to that problem could be trying to debug the process and receive notifications of when a process creates a new thread, and then respond by suspending that thread. Of course, many event notification systems provided by the Windows    API or a third party API will not be sent in real time, which may allow that thread to perform an unsafe operation before it is suspended.</p>\n<p>Another solution could be to statically patch the executable with the hook function before the process is launched, presumably by hooking the EAT/IAT. This is not an option for me because I need to have an implementation that will work <em>process wide</em>, regardless of how a function is resolved or in the event of a new unhooked module calling the function.</p>\n<p>There are many other issues to overcome with the inline hook technique that I did not mention.  Which brings me back again to my question:</p>\n<blockquote>\n<p>What methodology can be used to change code flow atomically during program execution ?</p>\n</blockquote>\n<p>I was curious to see if there was a more robust solution out there that overcomes some of the shortcomings of the methods I covered in this post.</p>\n<p><strong>Please no third party library suggestions for hooking functions. I want to implement my own for the educational benefits.</strong></p>\n<p>I prefer hooking technique documentation and examples that use the C programming language.</p>\n<p>My processor is an AMD Athlon II X2 250 that is x86-x64 compatible, and my operating system is Windows 7.</p>\n</div>",
    "votes": "11",
    "answers": 3,
    "views": "1k",
    "tags": [
        "windows",
        "x86",
        "c",
        "function-hooking",
        "x86-64"
    ],
    "user": "CaptainObvious",
    "time": "Jul 4, 2022 at 19:17",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">Check out <i><a href=\"http://www.ksplice.com/doc/ksplice.pdf\" rel=\"nofollow noreferrer\">this</a></i> paper; particularly in the section <code>5.2 Capturing the CPUs to update safely</code></span>",
            "time": null
        },
        {
            "user": "CaptainObvious",
            "text": "<span class=\"comment-copy\">Interesting, but I do not know of an equivalent operation to use on Windows for the linux function <code>stop_machine</code>.</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">I think a dynamic code instrumentation framework (e.g. PIN, DynInst) may help, because the instrumentation will be realized \"transparently\" from the program's codes. For example, the paper about DynInst <a href=\"http://www.cs.umd.edu/~hollings/papers/apijournal.pdf\" rel=\"nofollow noreferrer\">An API for Runtime Code Patching</a> says: \"...The API is designed so that a single instrumentation process can insert snippets into multiple processes executing on a single machine...\". Here, snippets are injected codes.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A sketch of how to implement your own patching system, where the length of the replacement instruction is less than or equal to the length of the instruction that you want to patch:</p>\n<ol>\n<li>Make sure that none of your code depends on any of the code that you will want to patch. This is an issue of re-entrancy. If you patch code that your patching system will use, then you might deadlock / block / raise an infinite number of signals. A common solution is to do things like re-implement the subset of <code>libc</code> that you need, or statically link against some other implementation of <code>libc</code>. Symbol versioning can help ensure that no other libraries link against your version of <code>libc</code> (or <code>libc</code>-like functions) at runtime.</li>\n<li>Have a dedicated patching \"master\" thread. If you're on linux, then this patching thread can be an external process that controls the program via <code>ptrace</code>. An alternative is to dynamically elect a master thread from one of the threads that gets signalled (mentioned in the next point).</li>\n<li>Install a signal handler such that your patching thread can signal all other threads to stop and block on a condition variable. Obviously, make sure that your patcher thread does not signal itself. You might need to double check that in the time it took you to signal all threads (that you knew about), that no more new threads have been created.</li>\n<li>Now you can patch code. Change the memory protection of the pages of code containing what you want to patch so that they are readable, writeable, but not executable. Make sure the code you're using doesn't appear on the same page(s)! Change the code. Change the memory protection of that code back to readable, executable, but not writeable.</li>\n<li>Signal your condition variable / threads to wake up.</li>\n<li>When your threads wake up from being blocked on the condition variable in their signal handlers, they need to execute a synchronizing instruction, e.g. <code>CPUID</code>, before executing the patched code. This is so that the old versions of the code do not remain in any instruction prefetch caches/buffers/whatever. Intel's software optimization manual goes into a few details here. By the way, watch out about patching the concurrency/signal mechanisms that you use to implement signal/wait/etc!</li>\n<li>Then the threads will return from the signal handler to resume execution where they were signalled.</li>\n</ol>\n<p>Now, what to do if you want to patch an <code>N</code> byte instruction with an <code>M</code> byte instruction such that <code>M &gt; N</code>? We'll apply roughly the same technique, but we'll modify the return addresses of the signalled threads to point into a copy of the original instructions that include your patch <code>P</code>.</p>\n<p>For example, lets say you have instructions <code>I1; I2; I3; I4; ...</code>, and your patch <code>P</code>, if placed, would end up as: <code>P; I3_tail_garbage; I4; ...</code>.</p>\n<p>Then you could create a patch entrypoint <code>P; I1_copy; I2_copy; I3_copy; jmp &amp;I4;</code> at address <code>patch</code>. You will modify some of the the return addresses in the signal handlers as follows:</p>\n<ul>\n<li>If <code>RA == &amp;I1</code>, then make it point to: <code>P; I1_copy; I2_copy; I3_copy; jmp &amp;I4;</code>.</li>\n<li>If <code>RA == &amp;I2</code>, then make it point to: <code>I2_copy; I3_copy; jmp &amp;I4;</code></li>\n<li>If <code>RA == &amp;I3</code>, then make it point to: <code>I3_copy; jmp &amp;I4;</code></li>\n</ul>\n<p>Patch <code>I1; I2; I3; I4; ...</code> to do the following: <code>jmp patch; int3; ...; int3; I4; ...</code>.</p>\n<p><strong>Note:</strong> When copying code, you need to re-relativize it if your instructions somehow read from the instruction pointer. For example, if <code>I1</code>, <code>I2</code>, or <code>I3</code> are branch instructions, or compute a <code>RIP</code>-relative address, then they will potentially need to be widened/modified/replaced with equivalent instructions.</p>\n<p>Another approach is to patch each of <code>I1</code>, <code>I2</code>, and <code>I3</code>. If you do this, then you must start by patching only the <em>first</em> byte of each of these instructions, and only with an <code>int3</code>. This can be done safely, even while other threads are executing the code being patched. However, you <em>cannot</em> safely modify the other bytes of these instructions if other threads are concurrently executing those instructions. This is because those instructions might have been prefetched, and once that has happened, they are no longer a cohesive unit.</p>\n<p>Figuring out the right protocol to handle the cases where threads concurrently execute the <code>int3</code>s is tricky, but I think it can be handled by following a similar methodology to above approach of duplicating the first few instructions so that you guarantee that those instructions aren't lost, but you also capture threads executing code that falls within your patch region.</p>\n<p>I am not familiar with the Windows environment, so the <code>CreateRemoteThread</code> issue sounds tricky, but I think installing <code>int3</code> instructions into the code as well as protecting the code from execution while you search for threads to signal might be sufficient. You might also consider having your master patching thread go to sleep for a short period of time. </p>\n<p>Finally, some good references to look at are Kprobes and RCU stuff as well, as the problem faced by some \"extra\" thread seeing the old or the new version (or something in-between) is a major concern with RCU. As a concluding remark, watch out about the language of the Intel manual w.r.t. cache coherency and the icache. A lot of text can be interpreted as if atomic writes to the data caches will be represented in the icache, but in practice, this isn't guaranteed to be true (especially where prefetching is concerned), and there are some important CPU errata on the issue that make the problem harder than it first appears.</p>\n</div>",
            "votes": "4",
            "user": "Peter Goodman",
            "time": "Aug 15, 2014 at 18:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a good question, and I would argue there is no 100% safe method to patch a running windows process, unless you actively debug it, and even then there are probably edge cases.  You could eliminate many potential problems, but I feel that potential threading problems couldn't be entirely eliminated for generic purposes.</p>\n<p>This leaves a couple practical options in my opinion:</p>\n<p>1.)  Suspend the process, patch your code, and resume execution.  Either all threads are suspended or they aren't, this is easily detectable if you have the rights to patch the process to begin with. This is my preferred method, though anti-debug measures based on timers as well as defensive hooks can detect this.  Overall though I'd say it's quite dependable.</p>\n<p>2.)  Know your target well and don't depend upon \"generic\" one-size-fits-all patching techniques.  You should know beforehand whether or not multi-threading is going to hamper a particular patch at a particular address for a specific target, and how feasible it will be to perform reliable realtime patching.</p>\n<p>If you know or suspect that your target code is threaded, find the synchronization method used (locks, mutexes, interlocked operations, etc.) and begin your patch from thread-safe code, ideally after forcing temporary thread contention/deadlock to prevent execution while patching.  Reliably doing this will likely be very target specific and therefore require at least a tiny bit of fairly intimate knowledge of your target.</p>\n<p>Most important of all:  Know which instructions on your current hardware are atomic.  Without this knowledge to start with you can't possibly create an atomic patch.</p>\n<p>You then have the problem of making a series of atomic writes (of atomic instructions) such that execution mid-patch doesn't crash/hang/alter execution in unintended ways.  This is not a trivial problem to solve.  Suspend the process and play it safe.</p>\n<p>EDIT:  I just realized that I took the bait and answered in a way that only considered hooking, i.e patching, even though your question specifically asks how to change code flow atomically during execution.  Proper DLL injection should allow you to do this pretty reliably in most cases, though like always it's never a sure thing when you are modifying a running process.</p>\n</div>",
            "votes": "2",
            "user": "Matthew Geyer",
            "time": "Jan 7, 2016 at 12:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">From kernel mode there is ... or does that qualify as cheating? ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's an <a href=\"https://jpassing.com/2011/05/03/windows-hotpatching-a-walkthrough/\" rel=\"nofollow noreferrer\">older article</a> on how hotpatching was implemented in Windows. If you want it done absolutely atomically, it has to be done from the kernel mode. There's no way around it. Here's the walkthrough:</p>\n<ul>\n<li><p>Set your thread's IRQL to <code>CLOCK1_LEVEL</code> (heck, you can even try <code>HIGH_LEVEL</code>), which is way above 2, that will pretty much stop all task switching in that system for the time your patching code is running. It is also high enough to preempt most interrupts. Or, you can try to disable them with a <code>CLI</code> instruction.</p></li>\n<li><p>Also schedule CPU-specific DPCs on all CPUs but your thread to keep those DPCs busy. (This is needed in case of a multi-core CPU.)</p></li>\n</ul>\n<p>This basically turns your patching thread into a single threaded environment for a short while.</p>\n<ul>\n<li><p>To ensure that no other running thread was stopped on that short span of executable memory where you're applying your 5-byte JMP, walk through the context of each thread and check its RIP value. In an unlikely event that it overlaps, either cancel the patch and retry after a short while, or raise the thread's IRQL for a very short while and then lower it back. Then check again. Repeat N times until its RIP doesn't overlap with the patch.</p></li>\n<li><p>Finally apply the patch. Make sure to do it as quickly as possible. Try not to call any outside functions. Just do a quick <code>REP MOVS</code> on a prepared memory blob.</p></li>\n<li><p>You'll probably need to clear the processor's instruction cache. (In case the old code before the patch was in there.)</p></li>\n<li><p>Then undo all the steps above to restore the system back into the working state.</p></li>\n</ul>\n<p>PS. Should work in theory. In practice, <em>debugging</em> this will be a living hell. Obviously do it in a VM and be ready to reboot (a lot.)</p>\n<hr/>\n<p><strong><em>Edit:</em></strong> <em>Here's an actual example, taken from the <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/debugview\" rel=\"nofollow noreferrer\">DebugView</a> tool. If you know what it does, it tries to capture a program's debugger output. If you enable kernel debugger output on an older OS, that tool has no other option but to install a trampoline on a <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-dbgprint\" rel=\"nofollow noreferrer\">DbgPrint</a> function on a live system when the DebugView starts up.</em> </p>\n<p>Here's how it does it (it uses somewhat old kernel functions, but it still delivers the idea):</p>\n<p><strong>1.</strong> Get number of CPU cores (it uses an older <code>KeNumberProcessors</code> global variable as such):</p>\n<p><a href=\"https://i.sstatic.net/rA2D1.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/rA2D1.png\"/></a></p>\n<p>(For modern code I would probably use <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-kequeryactiveprocessors\" rel=\"nofollow noreferrer\"><code>KeQueryActiveProcessors()</code></a> with its bitmask, and <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntddk/nf-ntddk-kequerygroupaffinity\" rel=\"nofollow noreferrer\"><code>KeQueryGroupAffinity()</code></a> to account for number of CPUs greater than 32/64.)</p>\n<p><strong>2.</strong> Make sure that the current thread is running on the CPU core 0 by calling <code>KeSetAffinityThread</code>:</p>\n<p><a href=\"https://i.sstatic.net/SJJzW.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/SJJzW.png\"/></a></p>\n<p>(Then check global variable <code>bDontSet_FuncTrampoline</code> in case we don't need to set this trampoline &amp; restore thread affinity by jumping to step 6. But that case is not interesting.)</p>\n<p><strong>3.</strong> Then check if we just have one CPU core, and if so jump to step 5. (Not very interesting either.) Otherwise set global variable <code>nCountCpuCores</code> to the count of CPU cores, and reset global <code>bAllowToContinue_CoreNon0_DeferredRoutine</code> flag to 0:</p>\n<p><a href=\"https://i.sstatic.net/7hYCw.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/7hYCw.png\"/></a></p>\n<p><strong>4.</strong> Set each CPU core (other than 0, i.e. <code>rsi</code> pointer starts from index 1, or 0x8 offset in bytes) for <code>high importance</code> DPCs (<a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-dpc-objects\" rel=\"nofollow noreferrer\">deferred procedure calls</a>) for our <a href=\"https://msdn.microsoft.com/library/windows/hardware/ff542972?f=255&amp;MSPPError=-2147217396\" rel=\"nofollow noreferrer\"><code>DeferredRoutine</code></a> with the <code>context</code> set to CPU core number:</p>\n<p><a href=\"https://i.sstatic.net/PHQvN.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/PHQvN.png\"/></a></p>\n<p>This will basically preempt whatever those other cores were doing and direct them to our DPC.</p>\n<p><strong>5.</strong> Then for our thread running in core 0, execute DPC routine <code>DeferredRoutine</code>:</p>\n<p><a href=\"https://i.sstatic.net/zSPLY.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/zSPLY.png\"/></a></p>\n<p><strong>6.</strong> After which restore this thread's affinity to what it used to be before:</p>\n<p><a href=\"https://i.sstatic.net/BXj5x.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/BXj5x.png\"/></a></p>\n<hr/>\n<p>Now the interesting thing is what happens in <code>DeferredRoutine</code>:</p>\n<p>(Note that this routine will be executed on each CPU core.)</p>\n<p><strong>A.</strong> The first step, set <a href=\"https://blogs.msdn.microsoft.com/doronh/2010/02/02/what-is-irql/\" rel=\"nofollow noreferrer\">IRQL</a> for the thread to <code>CLOCK_LEVEL</code> (or <code>13</code> for x64 code.) This is done by using the <code>cr8</code> CPU register. Doing this will block processing of the most interrupts:</p>\n<p><a href=\"https://i.sstatic.net/mzTTB.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/mzTTB.png\"/></a></p>\n<p><strong>B.</strong> Then decrement the counter in <code>nCountCpuCores</code> global variable, but do it using a <code>lock</code> CPU prefix to ensure synchronization among all CPU cores:</p>\n<p><a href=\"https://i.sstatic.net/ccjl4.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ccjl4.png\"/></a></p>\n<p><strong>C.</strong> Check what CPU core this thread runs on and enter a spin-loop accordingly:</p>\n<p><a href=\"https://i.sstatic.net/I56v5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/I56v5.png\"/></a></p>\n<p><strong>C.1.</strong> (<em>Right side block in the code flow above.</em>) For non-0 cores continue spinning in a loop while global variable <code>bAllowToContinue_CoreNon0_DeferredRoutine</code> is 0.</p>\n<p><strong>C.2.</strong> (<em>Left side block in the code flow above.</em>) For core 0, continue spinning in a loop while the count of processed cores in the <code>nCountCpuCores</code> global variable doesn't reach 0.</p>\n<p>(I would personally add to each of those loops a <a href=\"https://stackoverflow.com/questions/4725676/how-does-x86-pause-instruction-work-in-spinlock-and-can-it-be-used-in-other-sc\"><code>pause</code></a> instruction to ensure that CPU doesn't waste too much power while \"spinning\".)</p>\n<p><strong>C.3.</strong> Once the condition C.2. has been met, it means that we have our core 0 all to ourselves and all other cores are busy spinning in the loop in C.1. and we can proceed by calling our <code>install_func_Trampoline</code> function to install required trampoline.</p>\n<p><strong>C.4.</strong> When we're done with the trampoline, remember to release all cores from the spin-loop in C.1. by setting <code>bAllowToContinue_CoreNon0_DeferredRoutine</code> to 1.</p>\n<p><strong>D.</strong> Lastly, very important, restore IRQL back to what it used to be:</p>\n<p><a href=\"https://i.sstatic.net/07lGP.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/07lGP.png\"/></a></p>\n<p>Return error <code>nt_status</code> code, if so. Otherwise, we're done!</p>\n</div>",
            "votes": "2",
            "user": "c00000fd",
            "time": "Jun 25, 2018 at 6:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RbMm",
                    "text": "<span class=\"comment-copy\">really all this is sesnseless and nothing give. assume thread execute instructions in place where we apply patch . say <code>push rbp; /** interrupt **/ sub rsp,10</code> let thread X executed <code>push rbp</code> and then clock interrupt , from where already we return on another thread in another place. then you apply patch (say set jmp here ) and then thread X continue execution from place where it was interrupted. already inside jmp instruction. and even without thread swap - you interrupt thread by DPC - but to where thread returned after DPC ? without change thread context - all this senseless</span>",
                    "time": null
                }
            ]
        }
    ]
}