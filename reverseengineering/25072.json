{
    "title": "Why use MOV R0, R3 and then MOV R3, R0 (thus back and forth)",
    "link": "https://reverseengineering.stackexchange.com/questions/25072/why-use-mov-r0-r3-and-then-mov-r3-r0-thus-back-and-forth",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a static library archive which I try to understand.  </p>\n<p>First I use 'ar' to extract the object files.<br/>\nThe object files ar \"ELF 32-bit LSB relocatable, ARM, EABI5 version 1 (SYSV), not stripped\"<br/>\nThen I use 'objdump -D' to get the assembly instructions.</p>\n<p>Now I'm observing the assembly listing and find some curious (to me) instructions.<br/>\nApparently, after a branch with link (bl), R0 is moved into R3, and the next instruction moves R3 to R0.</p>\n<pre><code>23c:    e1a00003        mov     r0, r3\n240:    ebfffffe        bl      0 &lt;atoi&gt;\n244:    e1a03000        mov     r3, r0\n248:    e1a00003        mov     r0, r3\n</code></pre>\n<p>This happens multiple times in different object files within the archive.</p>\n<p>In the end both R0 and R3 are set to the value of R0 when returning from the branch.<br/>\nWhat could be a good explanation for this behaviour?</p>\n</div>",
    "votes": "9",
    "answers": 2,
    "views": "513",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "JoHu",
    "time": "May 20, 2020 at 21:33",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE! Could you show the surroundings of the code you gave? Perhaps four more lines before and after ...</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">The interface to external library functions needs <code>r0</code> to contain the data to process, and it returns its result in <code>r0</code> as well. The compiler doesn't know (or doesn't care), so it sets up the call, calls the library function, then restores the registers to resume what it was doing. It's just some not optimized stuff.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is most likely code that was compiled without optimizations (<code>-O0</code> ). In such code redundant operations are very common as the compiler faithfully translates individual statements to machine code but does not try to perform optimizations to remove or simplify redundant ones. </p>\n</div>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "May 21, 2020 at 11:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There can be hidden requirements that affect what code is written. Sometimes weird code is written to obtain a certain timing, like a new massively parallel 144 core microcontroller from GreenArrays, which may require a no-op before or after a branch, and the two moves may provide just the right timing. Also, special kinds of RAM like FRAM or the early core memory, may have needed \"constant refresh\". Furthermore, sometimes instructions have to be aligned to be on a certain word-multiple boundary (like a multiple of 4 or 8 or 16 or 32 or 64...) and two moves achieves that. These reasons (or other interesting answers I don't know about) might or might not be the reason (I don't really know), but that code isn't probably just \"unoptimized\"; writing a register one direction, then immediately back again has some kind of hidden logic to it.  Code is never just code. It interacts with the laws of physics, peripherals, magnetism, timing, etc. And how may hours over the 60 per week the developer was. ;-)</p>\n</div>",
            "votes": "1",
            "user": "MicroservicesOnDDD",
            "time": "Nov 4, 2022 at 23:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}