{
    "title": "In the IDA xrefs window, can I filter by unique addresses? Or is there an alternative view providing that?",
    "link": "https://reverseengineering.stackexchange.com/questions/31945/in-the-ida-xrefs-window-can-i-filter-by-unique-addresses-or-is-there-an-altern",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Consider the following screenshot:</p>\n<p><a href=\"https://i.sstatic.net/P7T7s.png\" rel=\"nofollow noreferrer\"><img alt=\"xrefs dialog in IDA\" src=\"https://i.sstatic.net/P7T7s.png\"/></a></p>\n<p>Here, the <code>r</code> and <code>p</code> Type entries appear in pairs. We have ten entries, but five pairs.</p>\n<p>Is there a way to filter this list down to unique <em>Address</em> values, rather than having those duplicates shown for each respective <em>Type</em>?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "62",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Jun 6, 2023 at 21:53",
    "comments": [
        {
            "user": "mimak",
            "text": "<span class=\"comment-copy\">I don't think filtering by type is a feature for the UI (absolutely doable with IDAPython), but you can click the 'Type' column label to sort by type</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@mimak it's a fair point, but there doesn't seem to be a sorting hierarchy. And sorting by address currently is the best short I have at inspecting each xref. If I sort by another metric, I will go all over the place when navigating, usually.</span>",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">if you're willing to idapython it as mimak said, it's significantly easer to sort them by their flag (<code>dr_R</code>) &amp; type. i'm the maintainer of ida-minsc over at github.com/arizvisa/ida-minsc which exposes those types for refs and can easily sort/group/fit them to a ui thing (if cared). there's a future branch over at github.com/arizvisa/ida-minsc/tree/persistence-refactor which returns a ref as an int-compat tuple with the \"access\" bit being a <code>set</code> of \"&amp;rwx\" to distinguish loads/stores from data refs and regular code refs (as it's an import, you'd prolly use <code>db.xref.up</code> or <code>func.up</code> in minsc).</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@AliRizvi-Santiago thanks so much for chiming in. I came across <code>ida-minsc</code>, didn't give it a try yet, however. But the remark about this flag is very valuable!</span>",
            "time": null
        }
    ],
    "answers_data": []
}