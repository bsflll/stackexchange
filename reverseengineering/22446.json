{
    "title": "Strange behaviour debugging Android ARM binary with gdbserver",
    "link": "https://reverseengineering.stackexchange.com/questions/22446/strange-behaviour-debugging-android-arm-binary-with-gdbserver",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to run this armv5 binary from <a href=\"https://github.com/OWASP/owasp-mstg/tree/master/Crackmes#android-license-validator\" rel=\"nofollow noreferrer\">OWASP's mobile security guide</a> (<code>validate</code>) using Android Studio's emulator on my x86_64 machine. I'm seeing <em>very</em> weird behaviour and would appreciate any guidance!</p>\n<p>If I run the program </p>\n<pre><code>$ adb push validate /data/local/tmp\n$ adb shell /data/local/tmp/validate AAAAAAAAAAAAAAAA\nEntering base32_decode\nOutlen = 10\nEntering check_license\nIncorrect serial.\n</code></pre>\n<p>It works as expected.</p>\n<p>The issue arises when I attach gdbserver to the process and attempt to debug it over the network with gdb running on my x86_64 machine (Ubuntu 18.04).</p>\n<h1>Run under GDBserver</h1>\n<pre><code>$ adb root\n$ adb forward tcp:8888 tcp:8888\n$ adb push validate /data/local/tmp\n$ adb shell gdbserver --version\nGNU gdbserver (GDB) 7.11\n$ adb shell gdbserver :8888 /data/local/tmp/validate\n</code></pre>\n<h1>Connect with GDB from host (Ubuntu 18.04 x86_64)</h1>\n<pre><code>$ ~/Android/Sdk/ndk/20.0.5594570/prebuilt/linux-x86_64/bin/gdb --version\nGNU gdb (GDB) 7.11\n$ ~/Android/Sdk/ndk/20.0.5594570/prebuilt/linux-x86_64/bin/gdb\n\ngdb$ target remote :8888\ngdb$ break *(0x2a000000 + 0x3bc) # Set breakpoint in main function\ngdb$ c\nProgram received signal SIGSEGV, Segmentation fault.\n0x2a0003c0 in ?? ()\n</code></pre>\n<p>Upon further inspection, it seems that the reason it fails, is because GBD fails to restore the instruction at the breakpoint to it's original value after mangling it to facilitate the breakpoint.</p>\n<h1>Try with hardware breakpoint instead</h1>\n<pre><code>gdb$ hbreak *(0x2a000000 + 0x3bc)\n</code></pre>\n<p>No SIGSEGV this time, but now if we try to step with</p>\n<pre><code>gdb$ nexti\n</code></pre>\n<p>It doesn't increment the program counter</p>\n<p>Even if we clear the break points, it's still stuck on that one instruction and there doesn't appear\nto be any way to make gdb continue execution.</p>\n<h1>Android Image Details (taken from Android Studio AVDManager)</h1>\n<ul>\n<li>Name:    Pixel_3_XL_API_25_armeab-v7a</li>\n<li>CPU/ABI: Google APIs ARM (armeabi-v7a)</li>\n</ul>\n<h1>Aditional notes</h1>\n<ul>\n<li>gdb sets the architecture to armv5te so it's probably not related to gdb not supporting the architecture</li>\n<li>I've tried a few other versions of gdb (7.11, 8.1, 8.3) compiled with ARM support, none work and the behaviour is inconsistent between versions</li>\n<li>I've tried gdbserver versions 7.11 and 8.3, neither made a difference</li>\n<li>The steps outlined above work fine when the android image is x86, they only fail if it's ARM.</li>\n</ul>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "251",
    "tags": [
        "android",
        "arm",
        "gdb",
        "qemu"
    ],
    "user": "Filip Kilibarda",
    "time": "Nov 2, 2019 at 1:01",
    "comments": [],
    "answers_data": []
}