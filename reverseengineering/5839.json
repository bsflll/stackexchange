{
    "title": "Deobfuscating IDA Pseudocode",
    "link": "https://reverseengineering.stackexchange.com/questions/5839/deobfuscating-ida-pseudocode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have wanted to get into the art of reverse engineering for quite some time now, so I took a look at a few online lessons (such as opensecuritytraining.info) and also got my hands on IDA Pro.</p>\n<p>Obviously, since this is a complex topic, I was overwhelmed by registers, pointers, instructions et cetera. I know assembler and C fairly well, it's just (like I said earlier) a topic where you have to learn much.</p>\n<p>Now to my actual question: I have downloaded a \"CrackMe\"-Program and started debugging it. Basically the objective is to find a key which you then have to enter into a Textbox in the program. I found the key checking function fairly easily and identified some logic, but I can't wrap my head around how the program actually compares the string. My C skills are much greater than my Assembler skills, so I decided to get some Pseudocode printed. The problem is that the Pseudocode is pretty messy (I'm guessing that's because of compiler optimizations) and I basically can't understand what this piece of code is supposed to do.</p>\n<p>Here is the code (sorry it's a bit long):</p>\n<pre><code>int __usercall TSDIAppForm_Button1Click&lt;eax&gt;(int a1&lt;eax&gt;, int a2&lt;ebx&gt;, int a3&lt;edi&gt;, int a4&lt;esi&gt;)\n{\n  int v4; // ebx@1\n  int v5; // esi@1\n  int v6; // eax@1\n  signed int v7; // eax@3\n  signed int v8; // edx@3\n  int v9; // ebx@3\n  int v11; // edx@12\n  int v12; // [sp-24h] [bp-34h]@1\n  int (*v13)(); // [sp-20h] [bp-30h]@1\n  int *v14; // [sp-1Ch] [bp-2Ch]@1\n  int v15; // [sp-18h] [bp-28h]@1\n  int (*v16)(); // [sp-14h] [bp-24h]@1\n  int *v17; // [sp-10h] [bp-20h]@1\n  int v18; // [sp-Ch] [bp-1Ch]@1\n  int v19; // [sp-8h] [bp-18h]@1\n  int v20; // [sp-4h] [bp-14h]@1\n  int v21; // [sp+0h] [bp-10h]@1\n  int v22; // [sp+4h] [bp-Ch]@1\n  int v23; // [sp+8h] [bp-8h]@2\n  void (__fastcall *v24)(int); // [sp+Ch] [bp-4h]@7\n  int v25; // [sp+10h] [bp+0h]@1\n\n  v22 = 0;\n  v21 = 0;\n  v20 = a2;\n  v19 = a4;\n  v18 = a3;\n  v5 = a1;\n  v17 = &amp;v25;\n  v16 = loc_45C6FD;\n  v15 = *MK_FP(__FS__, 0);\n  *MK_FP(__FS__, 0) = &amp;v15;\n  JUMPOUT(Controls__TControl__GetTextLen(*(_DWORD *)(a1 + 872)), 0xFu, *(unsigned int *)\"j\");\n  v6 = Controls__TControl__GetTextLen(*(_DWORD *)(a1 + 872));\n  System____linkproc___DynArraySetLength(v6);\n  System____linkproc___DynArraySetLength(664);\n  v14 = &amp;v25;\n  v13 = loc_45C699;\n  v12 = *MK_FP(__FS__, 0);\n  *MK_FP(__FS__, 0) = &amp;v12;\n  v4 = 0;\n  do\n  {\n    Controls__TControl__GetText(*(_DWORD *)(v5 + 872), &amp;v21, v12);\n    *(_DWORD *)(v23 + 4 * v4) = *(_BYTE *)(v21 + v4 - 1);\n    ++v4;\n  }\n  while ( v4 != 16 );\n  v8 = 1;\n  v9 = 0;\n  v7 = 4585384;\n  do\n  {\n    if ( v8 == 16 )\n      v8 = 1;\n    *(_BYTE *)(v22 + v9++) = *(_BYTE *)v7++ ^ *(_BYTE *)(v23 + 4 * v8++);\n  }\n  while ( v9 != 665 );\n  v24 = (void (__fastcall *)(int))v22;\n\n  // I know the key to success lies here, but I can't figure out what this if is supposed to do\n  if ( *(_BYTE *)v22 != 96 || *(_BYTE *)(v22 + 4) != 208 || *(_BYTE *)(v22 + 9) )\n    MessageBoxA_0(0, \"Invalid Key\", \"Error\", 0);\n  else\n    v24(v22);\n  *MK_FP(__FS__, 0) = v12;\n  v11 = v15;\n  *MK_FP(__FS__, 0) = v15;\n  System____linkproc___LStrClr(&amp;v21, v11, 4572932);\n  System____linkproc___DynArrayClear(&amp;v22, off_45C568);\n  return System____linkproc___DynArrayClear(&amp;v23, off_45C548);\n}\n</code></pre>\n<p>I would appreciate it if someone could give me advice on how to \"deobfuscate\" this piece of code. Are there any plugins available to do this? Is there a special technique that I can use to figure it out? Would it be better to look at the Assembler code instead of the Pseudocode?</p>\n<p>I especially wonder where these weird constants (like 872 for example) come from.</p>\n<p>Answers would be highly appreciated.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "decompilation",
        "deobfuscation"
    ],
    "user": "Christoph Böhmwalder",
    "time": "Jul 13, 2014 at 3:42",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "<span class=\"comment-copy\">I wouldn't call the output pseudocode, since, given the right declarations, a compiler would usually be able to recompile this back into an object file again.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA Pro is no magic tool to automatically decompile binaries to their source code. The decompiler output should not be relied every time (as compiling leads to loss of information) although IDA boasts of the finest decompiler available. Instead focus on the disassembly listing. For specific parts, you can use the decompiler output as your reference.</p>\n<p>Deobfuscation is a multi-step process. First try to understand the usages of <em>variables</em>, <em>structures</em>, etc and then give them a more easy-to-understand names reflecting their purpose. In many cases you can understand the variables purposes by just noting how it is used in function calls. For example <code>Vcl.Controls.TControl.GetTextLen</code> returns the length of the control's text. That means among the parameters passed, one must be the a pointer to the <code>TControl</code>. You can use this information to rename variables.</p>\n<p>In case of <code>VCL</code> binaries, <em><a href=\"http://kpnc.org/idr32/en/\" rel=\"nofollow\">Interactive Delphi Reconstructor</a></em>, will give you more easy-to-understand disassembly, as it is geared for that purpose. IDR also has a somewhat very limited decompilation capability.</p>\n<p>For better understanding IDA Pro and its myriad of features, I would recommend to go through these two books <em><a href=\"http://rads.stackoverflow.com/amzn/click/1593272898\" rel=\"nofollow\">The IDA Pro Book</a></em> and <em><a href=\"http://rads.stackoverflow.com/amzn/click/159749237X\" rel=\"nofollow\">Reverse Engineering Code with IDA Pro</a></em> </p>\n</div>",
            "votes": "3",
            "user": "0xec",
            "time": "Jul 13, 2014 at 3:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Christoph Böhmwalder",
                    "text": "<span class=\"comment-copy\">Thank you very much for your answer! The <code>GetTextLen</code> example could indeed be useful as a starting point. I'm testing out Interactive Delphi Reconstructor right now and I'll also take a look at the books.</span>",
                    "time": null
                },
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">You can also generate a map file with IDR and load this into Ida.</span>",
                    "time": null
                }
            ]
        }
    ]
}