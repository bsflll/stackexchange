{
    "title": "Finding function name of caller function",
    "link": "https://reverseengineering.stackexchange.com/questions/13075/finding-function-name-of-caller-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Function \"Bob\" calls function \"Janice\". Currently, I'm at an address in function \"Janice\" and can easily do idc.GetFunctionName(ea) to get the name Janice. However, I also want to get the caller function Bob's name. How would I go about doing this efficiently considering I'm currently within function Janice? Thanks.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Eccmms",
    "time": "Jul 18, 2016 at 13:55",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Is it a debugging session or you trying to analyze the binary statically ?</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">And what architecture you are working with ? If it is ARM, you have an LR register which will show the return address in most cases.</span>",
            "time": null
        },
        {
            "user": "Eccmms",
            "text": "<span class=\"comment-copy\">Analyzing the binary statically was my goal and your answer covered it for me. Thanks</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Generally speaking this question as it asked is a bit ambiguous.\nThe answer can be divided by 2 general parts, getting a caller in the debug session and determining the potential caller list during static analysis.</p>\n<p><strong>Getting a potential caller list during static analysis</strong></p>\n<p>As @blabb wrote in most cases it is possible and can be done with IDA scripting capabilities.</p>\n<p>Here is IDAPython example which will print all references to the callee (which is equivalent to press <kbd>x</kbd> on the callee name in IDA) assuming that your cursor is within the \"Janice\" function:</p>\n<pre><code>    import idautils\n    import idc\n    print \"Code references\"\n    for ref in idautils.CodeRefsTo(idc.GetFunctionAttr(idc.ScreenEA(), idc.FUNCATTR_START), 1):\n           print ref\n    print \"Data references\"\n    for ref in idautils.DataRefsTo(idc.GetFunctionAttr(idc.ScreenEA(), idc.FUNCATTR_START)):\n           print ref\n</code></pre>\n<p>Of course demangling should be applied to get a more human-readable name as @blabb wrote if needed.</p>\n<p>It should be taken in account that this script (exactly as the pressing <kbd>x</kbd> on the callee) does not solve the indirect call issue, but shows all references to the function which may help to trace the indirect call.</p>\n<p><strong>Getting a specific caller during a debug session</strong></p>\n<p>This is a bit trickier and much more architecture dependent (for example in ARM you have LR register with return address which will help you in most cases if you stopped at the start of \"Janice\" function and it is not contaminated yet), you'll need to</p>\n<ul>\n<li>Stop in the \"Janice\" function on the breakpoint</li>\n<li>Determine the placement of return address</li>\n<li>Conclude the specific caller from it</li>\n</ul>\n<p>The script which will do it is a bit more complex and unfortunately I have no time to debug it for now, \nso I'll just list the IDAPython APIs which will probably help you to solve the problem:</p>\n<pre><code>idaapi.get_func(ea) # get the function object of func_t type\nidaapi.get_frame(pfn) #gets the function frame structure of struc_t type\nidaapi.frame_off_retaddr(pfn) # AFAIK gets the offset of return address of the structure\n</code></pre>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Jul 19, 2016 at 9:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>janice could have been called by bob or it could be a mob of other zillion prospective callers </p>\n<p>you have to check each xrefto a sample showing the first xrefto below \nnote you may need to demangle in some cases </p>\n<pre><code>auto ip,fname,fxref,fxrefname,fxrefdname;\nip = ScreenEA();\nfname = GetFunctionName(ip);\nfxref = RfirstB0(ip);\nfxrefname = GetFunctionName(fxref);\nMessage(\"ScreenEa is in function %s and it is called first by  %s\\n\" , fname , fxrefname);\nfxrefdname = Demangle(fxrefname,GetLongPrm(INF_LONG_DN));\nMessage(\"ScreenEa is in function %s and it is called first by  %s\\n\" , fname , fxrefdname);\n</code></pre>\n<p>result as screenshot (see the actual code xref and the message window)</p>\n<p><a href=\"https://i.sstatic.net/H4s3s.png\" rel=\"nofollow noreferrer\"><img alt=\"ida_par_func\" src=\"https://i.sstatic.net/H4s3s.png\"/></a></p>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jul 18, 2016 at 19:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}