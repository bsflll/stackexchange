{
    "title": "Passing arrays to a function call (Buffer Overflow)",
    "link": "https://reverseengineering.stackexchange.com/questions/9326/passing-arrays-to-a-function-call-buffer-overflow",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to execute a call to <code>cat</code> on a target file using a buffer overflow in a challenge app (can't execute on the stack, but can use <code>libc</code>). For reference, in <code>C</code> this is valid code for what I'm trying to do:</p>\n<pre><code>int main(void) {\n        char * const argv[] = {\"cat\", \"/etc/target/file\"};\n        char * const envp[] = {NULL};;\n        execve(\"/bin/cat\", argv, envp);\n}\n</code></pre>\n<p>I can load some null-terminated strings up on the target and I've also determined the address of <code>execve</code>. Here's the info I have:</p>\n<pre><code>\"/bin/cat\" @ 0xbfffffb9:\n\"cat\" @ 0xbfffffbe\n\"/etc/target/file\" @ 0xbffff96f\n\nexecve @ 0x804831c\n</code></pre>\n<p>I can overwrite the <code>EIP</code> and following bytes with a string like:</p>\n<pre><code>\"AAAA....AAA\" + EIP + [RETURN ADDR] + ARG1 + ARG2 ....\n</code></pre>\n<p>In the string above I can replace <code>EIP</code> with the address of <code>execve</code> and jump to the function, but that's where things go sour for me. I've never set up a stack for arrays and couldn't find a google example of using arrays in a classic buffer overflow.</p>\n<p>How can I set up the stack with array parameters for my function call? What does my stack need to look like in this case?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "225",
    "tags": [
        "disassembly",
        "buffer-overflow",
        "stack-variables"
    ],
    "user": "Juicy",
    "time": "Jul 10, 2015 at 22:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What you're actually doing there is passing pointers to the array, not the array itself. If you look at the declarations:</p>\n<pre><code>    char * const argv[] = {\"cat\", \"/etc/target/file\"};\n    char * const envp[] = {NULL};\n    execve(\"/bin/cat\", argv, envp);\n</code></pre>\n<p>'argv' and 'envp' are pointers to the array.</p>\n<p>Typically, it's easiest to just ROP to execve('command', NULL, NULL) to avoid fancy setup. Why not execve('/bin/bash', NULL, NULL) then cat the file from the spawned shell? </p>\n<p>Otherwise you can finagle some pointers to make it work - pass it pointers to  NULL-pointer terminated arrays of strings that contain your args.</p>\n</div>",
            "votes": "2",
            "user": "Tom Cornelius",
            "time": "Jul 12, 2015 at 6:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}