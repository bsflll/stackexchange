{
    "title": "Is it possible to extract the header files used by a Mach-O 64-bit SDK Binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/27952/is-it-possible-to-extract-the-header-files-used-by-a-mach-o-64-bit-sdk-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a Mach-O 64 bit SDK that I've opened up with JEB (community edition) and I'd like to know if it's even possible to see things like the header files (.h) used/referenced by the binary.</p>\n<p>The reason is I'm trying to understand what sort of sensitive information can be extracted from the binary other than just running strings on it. I know the header files used to compile the binary contain information that is sensitive but I can't determine if that information is visible (or even included?) or not when the binary ships out.</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "142",
    "tags": [
        "x86-64",
        "mach-o",
        "jeb"
    ],
    "user": "Tikiyetti",
    "time": "Jul 5, 2021 at 19:31",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. What you want <i>may</i> (I am no macOS buff) work via proxy by looking for the dylib dependencies. However, this doesn't include static libs obviously. Also <i>exactly</i> what you want is impossible. Not even the compiler sees the headers, the preprocessor does <i>prior</i> to the compiler receiving compilation units. Also your target software may not necessarily be written with C/C++, so the notion of header files may not apply. Also your question is rather subjective as it hinges on <i>your definition</i> of \"sensitive\".</span>",
            "time": null
        },
        {
            "user": "Tikiyetti",
            "text": "<span class=\"comment-copy\">Thank you so much for clarifying for me if the header files were included or not in the binary. I wasn't sure so I didn't know if my question would even make sense. To answer your questions though, I do have access to all the .h and .m files and I know the source lang is C. Yes what constitutes \"sensitive\" is up to me. Since I know what's in the header files I know what I am looking for when analyzing the binary. I want to know if what I see in the header files can be found simply by reversing the binary file.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">In all likelihood it can. Very likely <code>strings</code> will be sufficient, but you may want to include looking for various Unicode encodings, too. If we're talking numeric constants, these can be found, yes. Debug symbols - if not split from the binary - are a bigger concern in this scenario.</span>",
            "time": null
        },
        {
            "user": "Tikiyetti",
            "text": "<span class=\"comment-copy\">Thank you for your reply. So far strings hasn't turned up any of the strings that I know exist in the header files. Tried from both Jeb and cli just in case. I've also run <code>objdump --syms myBinary | grep -i debug</code> and there is a significant amount of output from that but it's just a file path with the word \"debug\" in it so I don't believe debug symbols were included at compilation time. If I search for an explicit string that I know exists in the header files, and it doesn't return, is that enough to say it can't be extracted from the binary? I feel like there would be more to it than that.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">You realize, though, that the strings from headers would also have to be referenced somewhere, right? Unless you're giving the wrong arguments to <code>strings</code> (e.g. when looking for strings below the default length threshold) you should be seeing those referenced in the resulting binary (unless some sort of compile-time obfuscation was being employed).</span>",
            "time": null
        }
    ],
    "answers_data": []
}