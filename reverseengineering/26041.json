{
    "title": "Why do some firmware binaries have more than 1 file system structures",
    "link": "https://reverseengineering.stackexchange.com/questions/26041/why-do-some-firmware-binaries-have-more-than-1-file-system-structures",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As I unpack and explore the packing structure of firmware, I am noticing that some firmware will have several file system structures.  I can't seem to find any documentation as to why one device may have 1 filesystem structure (ex squashFS) while others can have several structures within the firmware binary.</p>\n<p>Why do some vendors seem to do everything in one file system structure, while others use several structures?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "125",
    "tags": [
        "firmware",
        "firmware-analysis",
        "binwalk"
    ],
    "user": "Lexicon",
    "time": "Oct 4, 2020 at 2:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There can be several reasons for that:</p>\n<ul>\n<li>Sometimes you want parts of it read/write which squashfs doesn't support. Other parts should always be read-only, so there squashfs would be a great fit.</li>\n<li>Some vendors allow OEM-partitions that contain changes specific to that OEM, while that doesn't necessarily have to be a different filesystem it's often a filesystem that allows read/write access so it's easier to setup or try out changes</li>\n<li>Different filesystems have different advantages and disadvantages: Compression, read and write speed, cpu power and so on also should be taken into consideration when choosing a filesystem</li>\n<li>Different developers working on the same project: Often a reference implementation is provided by the SoC manufacturer, that uses a specific filesystem. If developers prefer a different filesystem they decide to use it, so many developers on different parts that can be easily seperated could be a reason aswell. Ultimately this comes down to an inaccurate specification that gives the developers options where it shouldn't</li>\n<li>Sometimes developers just want to try different things. While a product shouldn't be a playground for developers, sometimes it is exactly that</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "Richi",
            "time": "Oct 4, 2020 at 20:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}