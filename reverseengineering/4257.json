{
    "title": "Recovering original PE sections after Themida merges them",
    "link": "https://reverseengineering.stackexchange.com/questions/4257/recovering-original-pe-sections-after-themida-merges-them",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Visual C++ produces binaries with <code>.code</code>, <code>.rdata</code>, and <code>.data</code> sections (in that order). Themida merges all three into a nameless section, which is detrimental to analysis. In particular, I want to run the <a href=\"http://www.openrce.org/downloads/details/253/IDA_Extra_Pass\" rel=\"nofollow\">Extra Pass</a> plugin for IDA on a dump from memory of a Themida'd executable (imports not recovered), but it needs the real bounds of the .code section or it will aggressively convert a lot of actual data into code.</p>\n<p>How could I go about recovering the base of the <code>.rdata</code> and <code>.data</code> sections?</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "pe"
    ],
    "user": "higaki",
    "time": "May 4, 2014 at 19:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically the best way to start doing this is to compile your own EXE (with the same compiler as the Themida protected file when possible) and try to merge the sections by yourself. I crafted an example for you (source code: <a href=\"http://codepad.org/RqNiH3Ly\" rel=\"nofollow\">http://codepad.org/RqNiH3Ly</a>, download RAR (merged + directly compiled): <a href=\"https://mega.co.nz/#!aoAUALBJ!6riSM4VmT43Ywf_jxQAY73EsVXyjEAAhJ1rOSGaYdeI\" rel=\"nofollow\">https://mega.co.nz/#!aoAUALBJ!6riSM4VmT43Ywf_jxQAY73EsVXyjEAAhJ1rOSGaYdeI</a>, just some executable I was working with at the moment, compiled with VS10).</p>\n<p>The base of the .data section can basically be found by searching for references to every address aligned to 0x1000 in the code (VS10 uses data pointers in order, so just scroll up to the base of the first section and look for a pointer). For example:</p>\n<blockquote>\n<p>01251000  /$  81EC 0C010000 SUB ESP,10C<br/>\n  01251006  |.  A1 00302501   MOV EAX,DWORD PTR DS:[1253000] ; pointer to .data<br/>\n  0125100B  |.  33C4          XOR EAX,ESP</p>\n</blockquote>\n<p>In my case (the EXE also has relocations) the ImageBase was 0x1250000, so the RVA of the .data section would be 0x1253000 - 0x1250000 = 0x3000</p>\n<p>The .rdata section is just the RVA aligned up to 0x1000 from the actual end of the code (you can learn this from the original file). In this case:</p>\n<blockquote>\n<p>012518E2   $- FF25 60202501 JMP DWORD PTR DS:[&lt;&amp;MSVCR100._except_han&gt;<br/>\n  012518E8   $- FF25 64202501 JMP DWORD PTR DS:[&lt;&amp;MSVCR100._invoke_wat&gt;<br/>\n  012518EE   $- FF25 68202501 JMP DWORD PTR DS:[&lt;&amp;MSVCR100.<em>controlfp</em>&gt; ; end<br/>\n  012518F4      00            DB 00<br/>\n  012518F5      00            DB 00</p>\n</blockquote>\n<p>0x12518EE - 0x1250000 = 0x18EE, rounded up 0x2000, so the original RVA of the .rdata section is 0x2000.</p>\n<p>Similar calculations can be done for the .reloc section (search for the binary mask \"3? 3? 3? 3? 3?\" will get you pretty close on x86).</p>\n<p>Just learn to know the compiler structure and use it to recover something similar to the original (maybe Themida just appends the raw section data and changes all data pointers etc). Hope this helps a little :)</p>\n</div>",
            "votes": "3",
            "user": "mrexodia",
            "time": "May 14, 2014 at 18:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}