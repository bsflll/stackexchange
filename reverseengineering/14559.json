{
    "title": "Make this function return true",
    "link": "https://reverseengineering.stackexchange.com/questions/14559/make-this-function-return-true",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorry, I'm quite new to assembly, and I'm trying to make the code bellow return true:</p>\n<pre><code>.text:1000E3E0 ; =============== S U B R O U T I N E =======================================\n.text:1000E3E0\n.text:1000E3E0\n.text:1000E3E0 ; bool __thiscall LicenseChecker::LicenseCheckerPlugin::hasValidLicense(LicenseChecker::LicenseCheckerPlugin *__hidden this)\n.text:1000E3E0                 public ?hasValidLicense@LicenseCheckerPlugin@LicenseChecker@@QAE_NXZ\n.text:1000E3E0 ?hasValidLicense@LicenseCheckerPlugin@LicenseChecker@@QAE_NXZ proc near\n.text:1000E3E0                                         ; DATA XREF: .rdata:off_10024D68o\n.text:1000E3E0                 mov     eax, [ecx+0Ch]\n.text:1000E3E3                 mov     al, [eax+20h]\n.text:1000E3E6                 retn\n.text:1000E3E6 ?hasValidLicense@LicenseCheckerPlugin@LicenseChecker@@QAE_NXZ endp\n.text:1000E3E6\n.text:1000E3E6 ; ---------------------------------------------------------------------------\n</code></pre>\n<p>On a \"crackme\". I heard somewhere that 1 returns true, but no idea on how to do it.\nI searched the web, but I simply couldn't understand what to do. I'm used to high-level programming languages, so assembly confuses me a lot.\nSorry for asking for such a simple thing.</p>\n</div>",
    "votes": "-1",
    "answers": 2,
    "views": "7k",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "patching"
    ],
    "user": "GabrielTK",
    "time": "Dec 19, 2017 at 3:30",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">can you provide the program containing this function?</span>",
            "time": null
        },
        {
            "user": "GabrielTK",
            "text": "<span class=\"comment-copy\">@SYS_V Sorry, I didn't see your comment at the time. I formatted my PC, so I think I don't have it anymore.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Very easy. </p>\n<ol>\n<li><p>Check out the calling conventions that your binary follows;</p></li>\n<li><p>Patch* with a <strong>mov</strong> of <strong>1</strong> to the register used for return values (most likely to be <strong>rax</strong> variant) before the <strong>return</strong> instruction : <em>mov rax, 1</em>;</p></li>\n<li><p>Your function should return <strong>1</strong> all the time, regardless of whatever happens before the <strong>return</strong> instruction;</p></li>\n</ol>\n<p>(*) Patching can be done manually using a hex editor or you can use OllyDBG or any tool that permits such transformations (check the web ;) ).</p>\n<p>This is a simple and concise answer. If you wish more details, let me know.</p>\n</div>",
            "votes": "0",
            "user": "yaspr",
            "time": "Feb 3, 2017 at 7:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">It doesn't look like 64-bit code to me.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Sure, but does it matter? It's a proper answer to a very clear question. And, I have CLEARLY specified a : rax VARIANT (been there all the time, no edit).</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">mov eax,1 is also fine x64 code and will zero the higher part of rax anyway.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">I agree, but I see it as a detail :)</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">It may not be such a trivial detail for someone \"I'm quite new to assembly\". It's a <i>tiny</i> change â€“ just change <i>mov rax, 1</i> to <code>mov eax, 1</code>. (Looking at the current return value, it could even be just <code>mov al, 1</code>.)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>mov al, 0x1\ntest al, al\nret\n</code></pre>\n<p>In binary: <code>B0 01 84 C0 C3</code></p>\n<p>Set <code>al</code> to 1, then <code>AND</code> with itself. The result is always 1, so <code>ZF</code> is always zero. Quite trivial, but gets the job done. Patch at the beginning so you don't have to fill leftover bytes with <code>nop</code> instructions.</p>\n</div>",
            "votes": "0",
            "user": "mimak",
            "time": "Dec 5, 2020 at 12:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}