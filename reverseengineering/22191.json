{
    "title": "What do square brackets do in IDA's pseudocode representation?",
    "link": "https://reverseengineering.stackexchange.com/questions/22191/what-do-square-brackets-do-in-idas-pseudocode-representation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been a bit stumped recently on my decomp work. I've not dealt with C in depth nor have I dealt with IDA's pseudocode system very much at all. I understand asm, but because of how IDA merges instructions together in its pseudocode system, I'm having some trouble finding out how this translates.</p>\n<p>In my pseudocode I have the following line:</p>\n<pre><code>// v1 is a pointer to RDI (stored as a single in pseudocode)\n// v7 is a pointer to R8 (stored as a single in pseudocode)\n// v10 is XMM1 (single)\n\nv1[1818] = (float)(v10 * (float)(*v7 - v7[1])) + v7[1];\n</code></pre>\n<p>I'm having trouble understanding what the square brackets do. I was thinking that it was an offset (e.g. \"set the data at the location of v1 in memory + 1818i64 bytes to...\") but the asm doesn't match up with that addr. What's the difference between setting <code>v1 =</code> vs setting <code>v1[1818] =</code>?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "840",
    "tags": [
        "ida",
        "assembly",
        "x86-64"
    ],
    "user": "Eti the Spirit",
    "time": "Sep 26, 2019 at 3:14",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">In C they denote an array access. To correspond with assembly you might have to multiply the index with size of one member of the array.</span>",
            "time": null
        },
        {
            "user": "Eti the Spirit",
            "text": "<span class=\"comment-copy\">Ah-ha! Yes, you were right. That was my mistake. I forgot to multiply 1818 by the size of the value (4 in this case, since it's a single). Suppose I'm just too used to the asm usage of [], yeah? I found the line <code>movss dword ptr [rdi+1C68h], xmm1</code> -- <code>rdi+1C68h</code> is indeed the right location after doing RDI+(4*1818i16).</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">If your problem is solved, please write a short answer, accept it and close this question.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've found out how this works. I had the right idea, but I had made the mistake of assuming it was <em>n</em> bytes ahead, failing to factor in the size of the actual value at hand.</p>\n<p>Since the specific type of <code>v1</code> was a single, this means I had to multiply the <code>1818</code> by <code>4</code> bytes. Looking at the corresponding ASM, <code>movss   dword ptr [rdi+1C68h], xmm1</code>, I can see that <code>rdi+1C68h</code> comes out to <code>v1</code> (rdi) + <code>7272i64</code> or <code>rdi+1C68h</code> - it checks out.</p>\n</div>",
            "votes": "2",
            "user": "Eti the Spirit",
            "time": "Sep 26, 2019 at 15:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}