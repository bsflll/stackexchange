{
    "title": "Debugging Win32.Upatre - why does Ollydbg fail to analyze this?",
    "link": "https://reverseengineering.stackexchange.com/questions/9182/debugging-win32-upatre-why-does-ollydbg-fail-to-analyze-this",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I've been looking at this thread - <a href=\"https://reverseengineering.stackexchange.com/questions/206/where-can-i-as-an-individual-get-malware-samples-to-analyze\">Where can I, as an individual, get malware samples to analyze?</a>\nAnd grabbed myself a binary sample of Win32.Upatre from <a href=\"http://addxorrol.blogspot.com/2013/01/encouraging-female-reverse-engineers.html\" rel=\"nofollow noreferrer\">Halvar Flake's blog</a>.</p>\n<p>I started analyzing the file in my VM (Win XP SP 3) and loaded up the malware in Olly.\nWhat I noticed is that the code looks encrypted - I searched for all the calls in the code and got this:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/XzmpQ.jpg\"/></p>\n<p>Which doesn't seem quite normal.</p>\n<p>So I went ahead and started stepping from the EP hopefully landing on some decryption procedure -</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/KOhwN.jpg\"/></p>\n<p>I'll briefly explain what I concluded from debugging this code:</p>\n<h2>1 - Gets the arguments passed to this executable - I'm pretty sure any code before this is irrelevant, but I might be wrong.</h2>\n<h2>2 - Calls GetStartupInfo - not quite sure why</h2>\n<h2>3 - Call 00401C80 passing the EP as a parameter</h2>\n<p>So I went ahead jumping to <code>00401C80</code> to check what this is all about and found this code which kinda looks like junk code to me -</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Oe3So.jpg\"/></p>\n<p>I suspect because there are some instructions that just don't seem logic to me like:</p>\n<pre><code>MOV EAX, 64\nCMP EAX,3E8\n</code></pre>\n<p>But I might be wrong.</p>\n<p>The problem is that after at the end of the function a value is copied into <code>ECX</code> and then <code>CALL ECX</code> is called which eventually ends in memory access violation:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/03UlY.jpg\"/></p>\n<p>No matter what I do or how I play with the flags inside this function I get an access violation or the code exits.</p>\n<p>SOOOOOOOOO, my first thought was that I'm dealing with some kinda anti-debugging technique, so I tried to run the malware inside the VM and intercept some data from it -</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/s9tOz.jpg\"/></p>\n<p>And it seems like it's running alright and even created a UDP socket, no access violation or something like that.</p>\n<p>I tried looking online for reports about this virus but I couldn't found any resources about how to bypass this obstacle.</p>\n<p>Anyone got an idea how I should approach this? why is Olly failing? How does this code knows that it's being debugged? It doesn't seem like it uses some kind of API for that (like IsDebuggerPresent).</p>\n<p>Thanks for everyone in advance.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "774",
    "tags": [
        "ollydbg",
        "malware",
        "obfuscation",
        "anti-debugging",
        "deobfuscation"
    ],
    "user": "FigureItOut",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">Did you look at the <a href=\"https://docs.google.com/file/d/0B5hBKwgSgYFaVmxTaFk3OXl4cjg/edit?usp=sharing\" rel=\"nofollow noreferrer\">Marion Marschalek's report</a> on the same blog? It's the winning entry, and IIRC she's doing a fine job of explaining it all</span>",
            "time": null
        },
        {
            "user": "FigureItOut",
            "text": "<span class=\"comment-copy\">@Dillinur, yes I did :) and she did a great job indeed, but she doesn't go into details of how she unpacked it.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>About the \"??3@YAXPAX\" calls, it is called <a href=\"https://reverseengineering.stackexchange.com/questions/2388/artifacts-similar-to-yaxpax-within-memory-and-ida-sessions\">Name Mangling</a>, take a look at this thread for more explanation.</p>\n<p>\"YAXPAX\" calls are actually the <code>delete</code> C++ operator.</p>\n<p>About the <code>__set_app_type</code>, <code>__getmainargs</code>, <code>GetStartupInfo</code> etc, those calls are generated by the compiler and usally called before the <code>main</code> function. They aren't part of the source code of the program you are willing to analyze, so you shouldn't have to analyze them.</p>\n<p>Your main seems to be located at <code>00401C80</code>, as it is usually right before a call to <code>exit</code>. This is where you start analyzing things seriously.</p>\n<p>Concerning the anti-debug protection, there are few instructions that let me think there is something that catches the exception in the program :\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/RcbWT.jpg\"/></p>\n<p><code>cmp [0], 0</code> is supposed to crash, so maybe there is some custom exception handlers installed somewhere. I would say to check for TLS callback functions, but I may be wrong. You should be able to pass the exception by pressing Shift+F7, <a href=\"https://reverseengineering.stackexchange.com/questions/8813/how-to-bypass-zwcontinue/8814#8814\">break on NtContinue, read the CONTEXT</a> structure and continue the execution of the program.</p>\n<p><a href=\"http://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf\" rel=\"nofollow noreferrer\">Here</a> is a listing of the most frequent anti debug tricks you may find - including the Thread Local Storage trick.</p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>import base64\nimport zipfile\nimport os\nimport hashlib\ninfile = open(\"c:\\\\halvar\\\\halvfem.bin\",\"rb\")\noutfile = open(\"c:\\\\halvar\\\\halvfem.zip\",\"wb\")\nbase64.decode(infile,outfile)\ninfile.close()\noutfile.close()\nif (zipfile.is_zipfile(\"c:\\\\halvar\\\\halvfem.zip\")):\n    myzip = zipfile.ZipFile(\"c:\\\\halvar\\\\halvfem.zip\",'r')\n    myzip.extractall('c:\\\\halvar\\\\',myzip.namelist(),'infected')\n    os.rename(myzip.namelist()[0],\"halvar_challenge.exe\")\n    print hashlib.md5(open('c:\\\\halvar\\\\halvar_challenge.exe','rb').read()).hexdigest()\n</code></pre>\n<p>is this the file you are talking about</p>\n<pre><code>C:\\halvar&gt;python decode.py\n172aed81c4fde1cf23f1615acedfad65\n\nC:\\halvar&gt;f:\\odbg110\\OLLYDBG.EXE halvar_challenge.exe\n</code></pre>\n<p>the exe is setting up a Structured Exception Handler prior to call ecx \nyou should follow the Exception handler may be several times </p>\n<p>hint check this function in msvcrt</p>\n<pre><code>77C2275C MSVCRT._JumpToContinuation    $  8BFF          MOV     EDI, EDI\n</code></pre>\n<p>if you followed them you should be able to see  0x89 imports being resolved with LoadLibrary and GetProcAddress </p>\n<p>i followed till CreateEvent before posting this</p>\n<pre><code>0013FD90   0040F520  /CALL to CreateEventA from halvar_c.0040F51D\n0013FD94   00000000  |pSecurity = NULL\n0013FD98   00000001  |ManualReset = TRUE\n0013FD9C   00000000  |InitiallySignaled = FALSE\n0013FDA0   0013FDCC  \\EventName = \"{AB8D393B-9177-440d-B3F8-1C1FE0CF9692}\"\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 20, 2015 at 10:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}