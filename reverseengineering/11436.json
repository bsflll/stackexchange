{
    "title": "Obtaining memory locations of local variables",
    "link": "https://reverseengineering.stackexchange.com/questions/11436/obtaining-memory-locations-of-local-variables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For ELF binaries on Linux, if the executable is not stripped, it is possible to recover memory locations of location variables in the form of relative addresses to stack/frame pointer? As an example, if a C program contains an integer variable <code>var</code> in function <code>main</code>, is there any means to associate its address on stack, say <code>[rbp-0x18]</code> to the source variable itself?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "stack-variables",
        "local-variables"
    ],
    "user": "sherlock",
    "time": "Nov 30, 2015 at 8:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's start first with finding local variables. Binary files contain multiple sections used for a plethora of purposes. The section of interest in your case is the <a href=\"https://en.wikipedia.org/wiki/.bss#BSS_in_C\" rel=\"nofollow noreferrer\"><em>.bss</em></a>. In this sections, you're supposed to find a reference to the local variables used by your program.</p>\n<p>Now, regarding the variable name, the only way to associate it to a relative address is through the compiler's debug information (<a href=\"http://eagercon.com/dwarf/dwarf-2.0.0.pdf\" rel=\"nofollow noreferrer\">DWARF2</a>/<a href=\"http://dwarfstd.org/doc/Dwarf3.pdf\" rel=\"nofollow noreferrer\">DWARF3</a> format for ELF binaries), if you use <strong>GCC</strong> with the <strong>-g3</strong> option. You can use <strong>GDB</strong> to extract the information, it parses the dwarf information to associate assembly code lines with source code lines, and memory locations to variable.</p>\n<p>You have to know that a variable name is only an abstraction of a memory location which is only known to the compiler at compile time, and after optimizations. Keep in mind that if you push the compiler to optimize (<strong>-Ox</strong> with <strong>GCC</strong>, x = [1, 2, 3, s, fast]), it'll minimize its stack references and use registers instead. Therefore, all references to your local variables will vanish into a temporary use of registers (the registers will be released and used elsewhere). </p>\n<p>Note : If you analyze an optimized code using <strong>GDB</strong> you'll notice that some function parameters or variables are shown as <em>\"optimized out\"</em>. </p>\n<p>Let me know if you need more details.</p>\n</div>",
            "votes": "1",
            "user": "yaspr",
            "time": "Nov 30, 2016 at 10:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I know it is possible only if the executable is compiled with debug information (DWARF).\nIn other cases this information is removed.\n<a href=\"http://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information/\" rel=\"nofollow\">Here</a> you can see an example of how it looks like. </p>\n</div>",
            "votes": "0",
            "user": "w s",
            "time": "Nov 30, 2015 at 10:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}