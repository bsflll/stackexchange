{
    "title": "What is the Sourcer syntax for defining data structures?",
    "link": "https://reverseengineering.stackexchange.com/questions/4060/what-is-the-sourcer-syntax-for-defining-data-structures",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working with version 8 circa 2000 of Sourcer from V Communications. They no longer support it. I've long since lost the manual.</p>\n<p>There is a definition file that you edit as you discover the code you are dissembling. In that file's data section you can create a data structure using the DS command. I can't remember the syntax.</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "330",
    "tags": [
        "disassemblers"
    ],
    "user": "Rich Shealer",
    "time": "Apr 12, 2014 at 11:57",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">I wish I could help, I borrowed my manual to a colleague some years ago and he lost it :(</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I, too would like to see a Sourcer manual.  In partial answer, the installation contains a file SAMPLE2.DEF that contains the following text:</p>\n<pre><code>          ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n              SAMPLE2 DEFINITION FILE\n          ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\n\n ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ Section 1: CONTROL INFORMATION   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n\nuP               = 8088\n\n\n ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ Section 2: RANGE DEFINITION      ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n\n ════ Segments ══════════════════════════\n\n  begin   ....   end   ..   default  ..    seg ...  seg   \n seg:off  ..   off  ..   ds  ..   es  ...   type . size  \n -------   ...  ---- ..   ---- ----  .. ----- . -----  \nnone\n\n\n ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ Section 3: REFERENCE DEFINITIONS ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n\n ════ Subroutines ═══════════════════════  \n  seg:off ..  type &amp; options  ..   label     ..      comments  \n  ------- ..  --------------   ..  -------------- --------------\n\n\n\n ════ Locations ═════════════════════════  \n  seg:off ..  type &amp; options  ..   label     ......      comments  \n  ------- ..  --------------  ..   -------------- .. --------------\n\n\n\n ════ Data Items ════════════════════════  \n  seg:off ..  type &amp; options  ..   label     ......      comments  \n  ------- ...  --------------  ..   -------------- .. --------------\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 22, 2014 at 13:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rich Shealer",
                    "text": "<span class=\"comment-copy\">Yes that is the generic structure of the file.  I'm looking for the specific syntax for the DS data argument that is mentioned in the SAMPLE1.DEF.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I was able to find the <code>SAMPLE1.DEF</code> <a href=\"http://cd.textfiles.com/thegreatunsorted/programming/misc_programming/sample1.def\" rel=\"nofollow noreferrer\">over at Textfiles</a>. Looks like the syntax is <code>DS</code> for \"data structure\" but it does not list any examples of structs.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For defining data structures use the same format like all other referances  </p>\n<p>viz <code>seg:off ds,&lt;options&gt; label,comment</code> </p>\n<p>define your structure details one line per item below DS <code>without seg:offset</code> </p>\n<p>SR normally creates a file <code>&lt;infile.SDF&gt;</code> with sdf extension <code>(sourcer default definition file)</code><br/>\ncopy paste that file as <code>&lt;infile.def&gt;</code> and start modifying it to suit the needs.  </p>\n<pre><code>c:\\&gt; sr foo.com (define your prefs for assembler etc here and press g)  \nc:\\&gt; ren foo.sdf foo.def  \nc:\\&gt; edit foo.def  \n\nseg_a:3127   da, r 0D                  ; data_137  \nseg_a:3157   da, r 55    somesymbol   ;  \nseg_a:31AC   ds, r 0020  MyStruct     ;// struct defined here (Array of 0x20 structs)  \n             dd, c 4     int blah     ; member 1  // need foo.rem file for comments  \n             dw          short foo    ; memeber 2  \n             dw          short yaa    ; member 3  \n             da, r 6     pathname     ; member 4  \n             dd          magic        ; member 5  \nseg_a:3BB0   da, r 29                 ; data_185  \n\nalt+f alt+ s   \n\nc:\\&gt; sr foo.def   \n</code></pre>\n<p>output (comments are from foo.rem file (you will have a sample file testyn.rem in your installation copy paste rename foo.rem and edit that file if you need comments)</p>\n<pre><code>C:\\&gt;grep -i -A 20 \"This is mystruct\" Foo.LST  \n\n3BC5:31AC  B9F9 0008            int             dd      8B9F9h\n; This is mystruct    \n;  defined as    \n;  typeded struct _MYSTR    \n;  {    \n;  ulong    \n;  short    \n;  short    \n;  char[06]    \n;  ulong    \n;  }Mystr, *PMystr;\n3BC5:31B0  45E8                 short           dw      45E8h\n3BC5:31B2  E8F5                 short           dw      0E8F5h\n3BC5:31B4  10 FC E8 C6 EC E8    pathname        db      10h, 'ⁿΦ╞∞Φ'\n3BC5:31BA  DB84 B800            magic           dd      0B800DB84h\n3BC5:31BE  0006 36E8            int1            dd      36E80006h\n3BC5:31C2  E8F0                 short1          dw      0E8F0h\n3BC5:31C4  F5A7                 short1          dw      0F5A7h\n3BC5:31C6  B9 08 00             pathname1       db      '╣', 8, 0\n3BC5:31C9  E8 2C F5                             db      'Φ,⌡'\n3BC5:31CC  61E8 B9FA            magic1          dd      0B9FA61E8h\n3BC5:31D0  0008 23E8            int2            dd      23E80008h\n\nC:\\&gt;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 22, 2014 at 23:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rich Shealer",
                    "text": "<span class=\"comment-copy\">I haven't been able to get back to this yet. I expect to be able to mark it answered in a week or so.</span>",
                    "time": null
                }
            ]
        }
    ]
}