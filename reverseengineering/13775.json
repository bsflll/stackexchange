{
    "title": "Finding code in MFC32 binary",
    "link": "https://reverseengineering.stackexchange.com/questions/13775/finding-code-in-mfc32-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to figure out where the code is that interacts with the Serial Port on an MFC Win32 binary - and am utterly out of ideas on how to find this code block.</p>\n<p>I have even tried, say, stopping the process right before I click the button to initialize serial communication and then stepping through. The program returns with an error immediately.</p>\n<p>I have even tried setting a breakpoint over the string text of the error message in the <code>.data</code> segment, and even then no breakpoint.</p>\n<p>What is causing this? Why can't I just step through a process to see where its contacting the serial port?</p>\n<p>How is it possible that its hiding at this level?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "169",
    "tags": [
        "disassembly",
        "windows",
        "serial-communication",
        "mfc"
    ],
    "user": "Farhan Yusufzai",
    "time": "Oct 20, 2016 at 22:26",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">What tools do you have at your disposal to do the job? Also, depending on the program it could use/require a specific driver through which it talks to the serial port or it could use simply <code>CreateFile</code> or its native counterpart <code>NtCreateFile</code>. But in general when communication with a driver is involved you can expect there to be a call to something like <code>CreateFile</code>. Windows is not so dissimilar to Unix, since the object manager namespace also has just a single root and you talk to devices the same way as you read/write files.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I ended up using the tool API Monitor. It took a ton of filtering, but I eventually found a reference to CreateFileA. Odd, because Ida Pro does not reference CreateFileA anywhere. Either way, it works! Thank you! </p>\n</div>",
            "votes": "1",
            "user": "Farhan Yusufzai",
            "time": "Oct 22, 2016 at 2:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">Is it a statically or dynamically linked executable?  If dynamic, the call to CreateFileA will be probably be in one of the MFC dlls, not in the executable itself.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">MFC apps are more likely to use something like <code>CFile</code> or <code>CArchive</code> class for I/O than direct API calls.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You just have to attach to the desired process with ollydbg or something similar and breakpoint <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365467%28v=vs.85%29.aspx\" rel=\"nofollow\">ReadFile</a>,<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365747%28v=vs.85%29.aspx\" rel=\"nofollow\">WriteFile</a>  and <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858%28v=vs.85%29.aspx\" rel=\"nofollow\">CreateFile</a>. (If you also need the information about the connection itself like baudrate or stuff like that you will have to set a breakpoint at <a href=\"https://msdn.microsoft.com/de-de/library/windows/desktop/aa363436%28v=vs.85%29.aspx\" rel=\"nofollow\">SetCommState</a> too.)</p>\n<p>After hitting a breakpoint you just have to follow the pointer on top of the stack to get to the position the current function got called.</p>\n</div>",
            "votes": "1",
            "user": "defragger",
            "time": "Oct 22, 2016 at 7:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}