{
    "title": "Reverse Engineering of data structures in games",
    "link": "https://reverseengineering.stackexchange.com/questions/6506/reverse-engineering-of-data-structures-in-games",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently participating in a reverse code engineering seminar for my studies in informatics: games engineering and was assigned the topic about \"Identifying data structures\". After an extensive talk with my supervisor we both came to the conclusion that it would make sense that i combine the topic with reversing game binaries.\nOur deliverables are a 15 page paper and a small tool implementing the techniques we talk about in the paper. We do not necessarily need to invent a new technique. </p>\n<p>I already did some research about reverse engineering data structures in general and came up with mostly tools that automatically reverse engineer data structures from binary execution (e.g. <a href=\"https://www.utdallas.edu/~zxl111930/file/Rewards_NDSS10.pdf\">https://www.utdallas.edu/~zxl111930/file/Rewards_NDSS10.pdf</a>)</p>\n<p>Now my question is: What would be a reasonable tool to program or a technique to write about in relation to reversing data structures from video game binaries (like World of Warcraft)? Is the method mentioned in the paper above still applicable to game binaries or are there any other known techniques?</p>\n<p>I do have some experience when it comes to reverse engineering, but i am no where near \"pro\"-level. I am mostly working on a Windows (x64) platform.</p>\n</div>",
    "votes": "7",
    "answers": 3,
    "views": "9k",
    "tags": [
        "windows",
        "c++"
    ],
    "user": "puelo",
    "time": "Oct 20, 2014 at 8:33",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">The paper mentions recognizing <i>type propagation</i> inside subroutines. That is something I was, rather successfully, able to implement to discover the internal structure layout of a complicated RTS game. (But it helped I wrote my own disassembler from scratch; this could simply be glued on.)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Side Note: WoW, or any comparable MMORPG, is probably a bad target for your research, because many of those feature various anti-hack, anti-cheat or anti-botting techniques, which will probably detect what you're doing.</p>\n<p>I'm far from being an expert on this myself, but i've disassembled and tried to understand a 20 year old game as a hobby project recently. The executable has a size of 800 KB, IDA detected about 1750 functions in it, 250 of which were C/C++ library functions. Needless to say, i spent quite some time looking at various functions and checking the strings they used without understanding too much.</p>\n<p>What brought the breakthrough for me was when i found out how the compiler handled class construction; each class constructor calls a <code>malloc()</code>-like function (with the size as parameter), then calls the constructor of the superclass, then initializes the methods (there is no vtable like in more modern compilers; the compiler initializes every \"function pointer\" individually) and class variables. Cross-referencing those <code>malloc()</code> calls, checking the sizes of the classes allocated, and following the chains of \"constructor calls superclass constructor\" immediately gave me an idea of the whole class tree and the size of each class.</p>\n<p>Also, i got an idea of which function was a subclass method of which other function in the main class, which brought a lot of insight into the purpose of those functions, as as i knew which function was a class method of which class, it was quite easy to track the <code>this</code> pointer of the function, track its dereferences, and find out which class element was used as integer, double, or pointer type, and in case of pointers, know which other class type they pointed to.</p>\n<p>This was my first exposure to IDA, so i knew nothing about its scripting capabilities and started learning about them when things became too repetitive; if i had to do the same now, i'd probably script/automate a lot of what i did manually.</p>\n<p>I think this might even be easier with modern C++ compilers that use vtables in a predictible way; check where the vtables get assigned to find out where classes get instantiated; check the superclass-constructor calls to find out about class hierarchy; check the sizes in <code>malloc</code>/<code>new</code> calls to get structure/class sizes; track the <code>this</code> pointers in class methods (which are easily identified through the vtables) to find out how the elements are used. All this can be done using static analysis, so you don't even have to care much about how anti-cheat/anti-debug techniques might affect the outcome.</p>\n</div>",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Oct 20, 2014 at 9:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "puelo",
                    "text": "<span class=\"comment-copy\">Thanks for the detailed answer. Because i would rather analyse statically i will definitely look into working with the vtable. I will mark your answer as \"correct\" by no later than tomorrow in hopes that i will maybe get some more input till then. Thank you so far!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This answer is just to expand on what @Guntram Blohm has said.</p>\n<p>This question is really way to broad to answer so, I'm going to make the assumption that your reverse engineering x86/x64 native executables on Windows (not bytecodes languages such as Java and .NET). First of let me say that this isn't a full of methods as there is so many way depending on so many things. Here is a list of potential things which would affect your reverse engineering techniques:</p>\n<ul>\n<li>Windows version (Many of the older tools only run on XP that's why I have a VM setup for XP. But not all games run on XP)</li>\n<li>Executable architecture (Not all debuggers are multi architectures)</li>\n<li>Native or bytecode language (Bytecodes can be decompiled)</li>\n<li>Compilers some compilers expose meta data which can be useful for reverse engineering. (You can use PEiD to work out what the executable was compiled with. Note: Packers can obfuscate what it was originally compiled using though).</li>\n<li>Protection such as packers or anti-cheats (Too much to answer without getting off-topic If you want to make a new question and I'll gladly answer it) </li>\n</ul>\n<p><strong>Method 1:</strong>\nFirstly, do your research and you may find the game engine SDK which will have all the data structures and if any slight modifications check method 2.</p>\n<p><strong>Method 2:</strong>\nIf you wanted to find a particular data structure for example you wanted to find your players health. If you found your health in Cheat Engine then looked what writes to it using the Cheat Engine debugger.</p>\n<p>Let's pretend we had this instruction write to our health value:</p>\n<pre><code>MOV [EAX+32], EBX\n</code></pre>\n<p>We know +32 is an offset of the data structure which holds health in there. Which you could use tool such as ReClass to aid you or structure in Cheat Engine. </p>\n<p>Once you've done this you could change values held at each variable and see if it has a visual impact on game. If you can't manage to work it out you can set bp on all registers for the value of your base address register + offset on the complexed breakpoint conditions. Once the breakpoint is hit you'll have to step through the assembly opcodes to try work out whats the address is used for.</p>\n<p>You may want to check the EAT for any hints for functions or data that is exposed too.</p>\n<p>I'd recommend you get yourself the following tools:</p>\n<ul>\n<li>Cheat Engine</li>\n<li>IDA PRO</li>\n<li>PEiD</li>\n<li>ReClass</li>\n</ul>\n</div>",
            "votes": "5",
            "user": "Paul",
            "time": "Oct 20, 2014 at 12:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "puelo",
                    "text": "<span class=\"comment-copy\">I am thankful for your answer: I do know how to find structures manually based on information i personally have while in game (like your health example). My task is to present and partially implement techniques which do this kind of stuff kinda automatically. Do you have some suggestions for this?</span>",
                    "time": null
                },
                {
                    "user": "Paul",
                    "text": "<span class=\"comment-copy\">Is my assumption right that your using Windows and reverse engineering native software before I edit my post.</span>",
                    "time": null
                },
                {
                    "user": "puelo",
                    "text": "<span class=\"comment-copy\">Oh sorry. Yes your assumption is right!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you consider a different approach, that is statically analyze the data formats without binary execution, I suggest to have a look at <a href=\"http://reversingonwindows.blogspot.sg/2014/04/examining-unknown-binary-formats.html\" rel=\"nofollow\">this</a> blog post describing \"the methods for examining unknown binary formats that can be either a file, file fragment, or memory dump.\"</p>\n</div>",
            "votes": "0",
            "user": "Attila",
            "time": "Oct 21, 2014 at 0:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}