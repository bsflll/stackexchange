{
    "title": "How to force IDA to show size of pointer dereference?",
    "link": "https://reverseengineering.stackexchange.com/questions/31078/how-to-force-ida-to-show-size-of-pointer-dereference",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA's default x86 assembly syntax is not very clear about pointer dereferences. One of these is dereferencing the memory operand, and one is simply moving the address to the register:</p>\n<pre><code>mov     ecx, offset dword_130B78\nmov     eax, off_130AF8\n</code></pre>\n<p>You can improve this slightly by selecting <code>Borland TASM in Ideal Mode</code> in Options &gt; General &gt; Analysis &gt; Target Assembler:</p>\n<pre><code>mov     eax, [off_130AF8]\n</code></pre>\n<p>But what I would like is to make it even less ambiguous by always displaying the size qualifier with <code>ptr</code>:</p>\n<pre><code>mov     eax, dword ptr [off_130AF8]\n</code></pre>\n<p>Is there a way to force IDA to do this? It does it in some cases but not others, and I'd like it to always do it.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "287",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "thejoelpatrol",
    "time": "Nov 4, 2022 at 1:47",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">I'm confused. I never \"missed\" that at all. Could you elaborate why you need it?! As a reverse engineer you really have to filter through a lot of information and adding this would distract from the important stuff, because the information is right there anyway. You can tell from the target operand what the size of the source must be, so there's no need for <code>dword ptr</code>. Things are different with something like <code>movzx   eax, word ptr [eax+esi*2]</code> where the source gets zero-expanded into the target. And <i>then</i> it's not evident whether it's a single or two byte source ...</span>",
            "time": null
        },
        {
            "user": "thejoelpatrol",
            "text": "<span class=\"comment-copy\">It’s not actually the size of the register that I care about. What I want is to make it clearer that the pointer is being dereferenced, which as you can see from the first two instruction example can be unclear in IDA’s syntax. It’s really only a problem with x86 (as opposed to RISC machines) because mov can move between both registers and memory.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">But that's what the square brackets are for. They tell you something gets dereferenced. If they aren't there, nothing gets dereferenced. And conversely if you imagine <code>dword_130B78</code> as a C/C++ variable, you can think of <code>offset dword_130B78</code> as <code>&amp;dword_130B78</code> ... on the other hand <code>mov eax, [off_130AF8]</code> could be thought of as <code>eax = *off_130AF8</code> (where <code>off_130AF8</code> is clearly a 32-bit pointer). I have the issue the other way around, since I rarely read RISC assembly. But once you become accustomed to it, it's no issue.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">If you really need this and are a paying customer, make a feature request or ask the Hex-Rays support if they already have this sort of feature and where it is hidden. There is also a forum for paying customers. I have not much hope it's already there, since even scouring <code>ida.cfg</code> and <code>idagui.cfg</code> nothing seemed to match your requirement, but who knows? ;)</span>",
            "time": null
        },
        {
            "user": "thejoelpatrol",
            "text": "<span class=\"comment-copy\">As I said from the start, the brackets in the alternate syntax help. It’s at least usable that way. What’s frustrating is that sometimes IDA thinks it should display the size qualifier with some instructions but not others, so it’s just fairly inconsistent. So yes, maybe I will make a feature request.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA typically displays that size qualifier (<code>byte</code>, <code>word</code>, <code>dword</code>, <code>qword</code>) when the target of the reference is a different size than the operand. This pretty much happens when the size of data referenced by the operand is wrong, but can also happen since multiple instruction may access the memory address differently.</p>\n<p>So, (technically) you can force IDA to display the size for each instruction operand by undefining all the data referenced by that operand that you're looking at. This literally undoes all the work that you and IDA did...but hey, why not?</p>\n<p>I wrote some IDAPython to do this pretty quickly for the current function. Hopefully you find it effective.</p>\n<pre><code>for ea in idautils.FuncItems(ADDRESS):\n    for xr in idautils.XrefsFrom(ea):\n        if not xr.iscode:\n            idaapi.del_items(xr.to)\n        continue\n    continue\n</code></pre>\n<p>Or better yet, if you want to \"fix\" your entire database:</p>\n<pre><code>for sidx in range(idaapi.get_segm_qty()):\n    s = idaapi.getnseg(sidx)\n    for ea in idautils.Heads(s.start_ea, s.end_ea):\n        if idaapi.get_flags(s.start_ea) &amp; idaapi.MS_CLS == idaapi.FF_DATA:\n            idaapi.del_items(ea)\n        continue\n    continue\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Ali Rizvi-Santiago",
            "time": "Feb 9, 2023 at 18:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}