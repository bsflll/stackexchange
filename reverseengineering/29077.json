{
    "title": "Does Golang's cgo now support output with .gopclntab?",
    "link": "https://reverseengineering.stackexchange.com/questions/29077/does-golangs-cgo-now-support-output-with-gopclntab",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I read <a href=\"https://utcc.utoronto.ca/%7Ecks/space/blog/programming/GoBinaryStructureNotes\" rel=\"nofollow noreferrer\">this page</a> in which the author, Chris Siebenmann, states that binaries created using <code>cgo</code> will not have the <code>gopclntab</code> or the <code>gosymtab</code> sections. However, I see that on <code>go version go1.13.15 linux/amd64</code>, I have built a Go program which links basic c code, using <code>cgo</code>, and I've confirmed with <code>radare2</code> that there is in fact a <code>.gopclntab</code> section in the resulting binary.</p>\n<p>Has there been a change since this article (and the referenced <a href=\"https://docs.google.com/document/d/1D13QhciikbdLtaI67U6Ble5d_1nsI4befEd6_k1z91U/view\" rel=\"nofollow noreferrer\">Building a Better Go Linker</a> article) was written? Or is there some other situation in which <code>cgo</code> may strip these sections? I ask because I have indeed seen other <code>cgo</code> output binaries that have these sections missing, but I have been unable to reproduce this using my version of the <code>cgo</code> toolchain.</p>\n<p>Aside from just knowing this fact, this information is relevant to reverse engineering go binaries because the <code>.gopclntab</code> <a href=\"https://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/\" rel=\"nofollow noreferrer\">can be used to extract symbol information</a>. In the past, the absence of this table due to <code>cgo</code> compilation has made it more difficult to do so.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "288",
    "tags": [
        "compilers",
        "section",
        "go"
    ],
    "user": "the_endian",
    "time": "Jul 31, 2021 at 22:21",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">It seems to be a question for go developers, not sure why you are asking here…</span>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky I agree that the Go developers may be able to answer this question. However, it is relevant to reversing Go binaries. Not having this section has made it difficult to do so, and I have not found a clear answer in the docs. The question is being asked from a reversing perspective. Although, I do agree that it borderline could be a general Go question; but I've found that Go developer forums usually focus on the language itself, rather than the binary outputs of the compiler at such a low level.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">I’m not sure what you expect since by your description the answer seems to be “yes”. As for when it’s present or not, golang developers surely know better than us.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think the gopclntab section should always be present in any Go binary. Without it panic() couldn't print a stack trace. I suspect the author you are citing was mistaken about this.</p>\n<p>That being said, AFAIK gopclntab will not include symbols or unwind information for linked C libraries. This information is exclusively found in DWARF.</p>\n</div>",
            "votes": "1",
            "user": "Felix Geisendörfer",
            "time": "Sep 8, 2021 at 20:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}