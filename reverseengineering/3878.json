{
    "title": "How to analyse the communication between a WebApp loaded with awesomium and the native program?",
    "link": "https://reverseengineering.stackexchange.com/questions/3878/how-to-analyse-the-communication-between-a-webapp-loaded-with-awesomium-and-the",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a Windows program that uses <a href=\"http://www.awesomium.com/\" rel=\"nofollow\">awesomium</a> to display a WebApp. This WebApp communicates in some way with the client program through some native calls. I found references to <code>window.externalHost</code> and <code>window.native</code> in the JS source, but it's build with <a href=\"http://yuilibrary.com\" rel=\"nofollow\">YUI</a> and has tens of thousand lines of code and single character variables and I can't quite figure out what exactly they are doing (static analysis).</p>\n<p>I have injected Javascript into the WebApp to check those two objects:</p>\n<pre><code>try {\n    document.write(JSON.stringify(window.externalHost, null, 4))\n} catch (err) {\n    document.write(err)\n}\n</code></pre>\n<p>But <code>window.externalHost</code> is <code>undefined</code> and <code>window.native</code> is <code>{}</code>.</p>\n<p>So my questions are:</p>\n<ul>\n<li>How are native calls usually set up? </li>\n<li>What interfaces do exist and how are they used? (Both directions)</li>\n<li>Can I \"detour\"/\"intercept\" native calls to see what they are sending?</li>\n<li>Are there any remote JS debug projects which I could inject to dynamically debug the complex WebApp?</li>\n</ul>\n<hr/>\n<p><strong>update 1:</strong> I am confident that it uses <code>window.native</code>. Because of this Object <code>{}</code>. It seems likely that the communication is not implemented as <code>window.externalHost.postMessage()</code> based on what I have read on the <a href=\"http://wiki.awesomium.com/general-use/introduction-to-javascript-integration.html\" rel=\"nofollow\">awesomium wiki</a>.</p>\n<p>I now try to capture what methods are called on it. My idea was to overwrite <code>window.onerror</code> to capture all errors and set <code>window.native = undefined;</code> to capture exceptions like <code>Cannot call aNativeCall() on undefined</code>. Unfortunately it seems that <code>windows.native</code> can't be overwritten - it doesn't stay undefined.</p>\n<p>Any other ideas?</p>\n<hr/>\n<p><strong>update 2:</strong></p>\n<p>I came up with this javascript code to check some interesting Objects like <code>window.external</code>, etc...</p>\n<pre><code>obj = ['external', 'externalHost', 'native', 'Y', ['Y','native'],['Y','Native'], ['Y','external'], ['Y','externalHost']];\nfor(i=0; i&lt; obj.length; ++i) {\n    try {\n\n        if(obj[i] instanceof Array) {\n            var tmp = window[obj[i][0]];\n            for(j=1; j&lt;obj[i].length; ++j) {\n                tmp = tmp[obj[i][j]]\n            }\n            document.write(obj[i]+\" | &lt;b&gt;\"+Object.getOwnPropertyNames(tmp)+\"&lt;/b&gt;&lt;br&gt;\");\n        } else {\n            document.write(obj[i]+\" | &lt;b&gt;\"+Object.getOwnPropertyNames(window[obj[i]])+\"&lt;/b&gt;&lt;br&gt;\");\n        }\n\n    } catch(err) {\n        document.write(obj[i]+\" | &lt;i&gt;Error: \"+err+\"&lt;/i&gt;&lt;br&gt;\");\n    }\n}\n</code></pre>\n<p>It became slowly more clear that it has to be <code>window.native</code>. This object has the following properties: 'on','isNative','scale','Emitter','call','register','_ready'</p>\n<p>When I try to call <code>window.native.call()</code> the native program crashes. And the debug information shows that it crashed in a <code>ProcessRequest</code> function. So I found the right interface.</p>\n<p>I now need to find out how exactly this interface is used. Unfortunately I can't overwrite <code>window.native.call = function() { ... }</code> to log the calls.</p>\n<p>Anybody another idea?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "929",
    "tags": [
        "javascript"
    ],
    "user": "samuirai",
    "time": "Mar 16, 2014 at 2:49",
    "comments": [],
    "answers_data": []
}