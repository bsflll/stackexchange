{
    "title": "How to apply IDA structure to a pointer of a structure",
    "link": "https://reverseengineering.stackexchange.com/questions/9485/how-to-apply-ida-structure-to-a-pointer-of-a-structure",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've encountered this function, which accepts a pointer to what I believe is a custom C struct. I came to this conclusion based on subsequent access to it.</p>\n<pre><code>arg_0= dword ptr  4   ;struct passed in\n\npush    ebx\npush    ebp\nmov     ebp, [esp+8+arg_0]  ; store pointer of struct in ebp\npush    esi\npush    edi\nxor     ebx, ebx\n</code></pre>\n<p>and, not too far from above, I see it being populated:</p>\n<pre><code>mov     [ebp+0D4h], bl\nmov     [ebp+0F4h], bl\nmov     [ebp+114h], bl\nxor     eax, eax\nmov     [ebp+0B8h], eax\nmov     [ebp+0BCh], eax\nmov     [ebp+0C0h], eax\n</code></pre>\n<p>I do not know the size of the structure, but I've seen <code>[ebp+0f14h]</code>. Therefore, I've defined a custom IDA sturct of size <code>0xF14</code>. Now I'm having trouble with applying this custom structure to this pointer. I've tried <code>Alt+Q</code> then selecting my own custom struct, but it is not working. The  output window says <code>Command \"DeclareStructVar\" failed</code></p>\n<p>My custom struct:</p>\n<pre><code>00000000 custom_sturct   struc ; (sizeof=0xF14)\n00000000                 db ? ; undefined\n00000001                 db ? ; undefined\n00000002                 db ? ; undefined\n[...same stuff...]\n00000F11                 db ? ; undefined\n00000F12                 db ? ; undefined\n00000F13 field_F13       db ?\n00000F14 custom_sturct   ends\n00000F14\n</code></pre>\n<p>I'm using IDA Pro 6.3</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "struct"
    ],
    "user": "vincentleest",
    "time": "Sep 12, 2016 at 0:08",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">\"but it is not working\" -- what's \"not working\"?</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">You can't tell IDA \"ebp is a structure pointer\" and have every instruction that uses <code>ebp</code> use the structure automatically. You'll have to right-click each of the offsets, select \"Structure offset\" from the context menu, then select your <code>custom_struct</code> field. (Or, as a shortcut, use the <code>T</code> key).</span>",
            "time": null
        },
        {
            "user": "vincentleest",
            "text": "<span class=\"comment-copy\">@JasonGeffner and @GuntramBlohm thank you both for your responses. After applying the \"T\" operation, IDA did not complain. However, the custom structure is still not showing up. I then realized that I gave <code>ebp</code> register a custom name. The <code>custom_struct</code> showed up after I've removed the custom name for the register.</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">@GuntramBlohm, want to create a new answer to this from your comment and mine? I'm happy for you to get the full credit for this one ;)</span>",
            "time": null
        },
        {
            "user": "user1354557",
            "text": "<span class=\"comment-copy\">To add to @GuntramBlohm's comment:  You can also select an area of text and hit <code>t</code>. A different menu will appear which will allow you to select a register (choose <code>ebp</code>) and a structure (choose <code>custom_struct</code>) and it will convert each offset from <code>ebp</code> within the selection to an offset of <code>custom_struct</code>. This works best in the <b>linear view</b>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To set register as an offset to a structure in a sequence of assembly code, you'll need to select that sequence and then hit <kbd>T</kbd>. A pop up dialog called \"Structure offsets\" will appear, where you can supply the register and structure it points to, and you'll see all references IDA recognized using it.</p>\n<p>Lets take the following code snippet taken from calc.exe for example:</p>\n<p><a href=\"https://i.sstatic.net/abcBG.png\" rel=\"nofollow noreferrer\"><img alt=\"Example of initial state\" src=\"https://i.sstatic.net/abcBG.png\"/></a></p>\n<p>After selecting the relevant code and hitting <kbd>T</kbd> IDA automatically identified we're setting the <code>ECX</code> register, suggests possible valid structures to the left and the offsets and the selected structure's values.</p>\n<p><a href=\"https://i.sstatic.net/VrXAH.png\" rel=\"nofollow noreferrer\"><img alt=\"Structure offsets dialog\" src=\"https://i.sstatic.net/VrXAH.png\"/></a></p>\n<p>After assigning a valid structure, the code looks like this:</p>\n<p><a href=\"https://i.sstatic.net/wWyYN.png\" rel=\"nofollow noreferrer\"><img alt=\"code after structure offset assignment\" src=\"https://i.sstatic.net/wWyYN.png\"/></a></p>\n<p>Please notice the following caveats/remarks:</p>\n<ol>\n<li>IDA completely ignored the <code>add ecx, 4</code> line and additionally did not handle the <code>mov [ecx+eax*2], dx</code> too well because of that. Hitting <kbd>T</kbd> for that specific line and suppling a non-zero offset delta will let you handle that properly, albeit manually.  </li>\n<li>As mentioned in the comments, manually setting a register's name completely disables all IDA's representation of the register and instead displays the user supplied free text. This means any offset definitions will be hidden by any register custom name.</li>\n<li>If you've seen <code>[ebp+0f14h]</code>, the structure's size is <em>at least</em> 0xF15 bytes, as the structure is being written to at offset <code>0x0F14</code>, meaning at least 0xF15 bytes are available to it. If you've seen <code>DWORD [ebp+0f14h]</code> the structure is at least <code>0x0F18</code> bytes long.</li>\n</ol>\n<p>Those caveats are at least partially mitigated by third party tools like <a href=\"https://sark.readthedocs.io/en/latest/plugins/autostruct.html\" rel=\"nofollow noreferrer\">Autostruct</a></p>\n</div>",
            "votes": "8",
            "user": "NirIzr",
            "time": "Sep 29, 2016 at 8:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}