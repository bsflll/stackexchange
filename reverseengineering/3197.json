{
    "title": "Fixing the stackpointer in IDA when exception handlers are used",
    "link": "https://reverseengineering.stackexchange.com/questions/3197/fixing-the-stackpointer-in-ida-when-exception-handlers-are-used",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code that I'm looking at uses exception handlers and it seems that the stack pointer is misscalculated in the case of the exception handler. I posted this function as an exmple in full, so that the problem can be seen.</p>\n<p>What I'm interested in is, how I can get rid of the sp-analysis failing.</p>\n<pre><code>000                 push    ebp\n004                 mov     ebp, esp\n004                 push    0\n008                 push    ebx\n00C                 push    esi\n010                 mov     ebx, eax\n010                 xor     eax, eax\n010                 push    ebp\n014                 push    offset j_ExceptionHandler1_2\n018                 push    dword ptr fs:[eax]\n01C                 mov     fs:[eax], esp\n01C                 push    1               ; uIDEvent\n020                 mov     eax, [ebx+28h]\n020                 push    eax             ; hWnd\n024                 call    j_KillTimer\n01C                 mov     esi, [ebx+24h]\n01C                 test    esi, esi\n01C                 jz      short loc_4467F1\n01C                 cmp     byte ptr [ebx+34h], 0\n01C                 jz      short loc_4467F1\n01C                 cmp     word ptr [ebx+2Eh], 0\n01C                 jz      short loc_4467F1\n01C                 push    0               ; lpTimerFunc\n020                 push    esi             ; uElapse\n024                 push    1               ; nIDEvent\n028                 mov     eax, [ebx+28h]\n028                 push    eax             ; hWnd\n02C                 call    j_SetTimer\n01C                 test    eax, eax\n01C                 jnz     short loc_4467F1\n01C                 lea     edx, [ebp+Str]\n01C                 mov     eax, ds:off_5C6E3C\n01C                 call    LoadString      ; EAX = StringResource\n                                            ; EDX = Target\n                                            ;\n01C                 mov     ecx, [ebp+Str]\n01C                 mov     dl, 1\n01C                 mov     eax, off_40CA00\n01C                 call    sub_409F34\n01C                 call    GlobalExceptionE\n\n    loc_4467F1:                             ; CODE XREF: sub_446788+27j\n                                            ; sub_446788+2Dj\n                                            ; sub_446788+34j\n                                            ; sub_446788+46j\n00C                 xor     eax, eax\n00C                 pop     edx\n008                 pop     ecx\n004                 pop     ecx\n000                 mov     fs:[eax], edx\n000                 push    offset loc_44680E\n\n    loc_4467FE:                             ; CODE XREF: CODE:0044680Cj\n004                 lea     eax, [ebp+Str]  ; RDStr\n004                 call    ReleaseDelphiString ; EAX = Pointer to a stringpointer\n                                            ;\n                                            ; Refcount is decreased and the pointer is set to NULL.\n004                 retn\n    sub_446788      endp ; sp-analysis failed\n\n    ; [00000005 BYTES: COLLAPSED FUNCTION j_ExceptionHandler1_2. PRESS KEYPAD \"+\" TO EXPAND]\n    ; ---------------------------------------------------------------------------\n                    jmp     short loc_4467FE\n    ; ---------------------------------------------------------------------------\n    ; START OF FUNCTION CHUNK FOR sub_446788\n\n    loc_44680E:                             ; CODE XREF: sub_446788+7Ej\n                                            ; DATA XREF: sub_446788+71o\n004                 pop     esi\n000                 pop     ebx\n-04                 pop     ecx\n-08                 pop     ebp\n-0C                 retn\n</code></pre>\n<p><strong>Update</strong></p>\n<p>The the <code>GlobalExceptionE</code> function is this</p>\n<pre><code>000                 pop     edx\n-04                 push    esp\n000                 push    ebp\n004                 push    edi\n008                 push    esi\n00C                 push    ebx\n010                 push    eax\n014                 push    edx\n018                 push    esp             ; lpArguments\n01C                 push    7               ; nNumberOfArguments\n020                 push    1               ; dwExceptionFlags\n024                 push    0EEDFADEh       ; dwExceptionCode\n028                 push    edx\n02C                 jmp     j_RaiseException\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "4k",
    "tags": [
        "ida"
    ],
    "user": "Devolus",
    "time": "Dec 17, 2013 at 19:05",
    "comments": [
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">First, change the stack pointer at <code>loc_4467F1</code> to <code>01C</code> and see where that gets you. Right click that line, choose \"Change Stack Pointer\", enter <code>0</code>. Then update your post with the new code if it's still unsatisfactory.</span>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<span class=\"comment-copy\">@DCoder, When I change the value to <code>0x0C</code> then of course the Hex Rays plugin no longer complains as the value is 0 on the final return. I took out all the irrelvant parts of the code, just to see only push/and pops and I really don't see why IDA has this stack analysis error in the first place.</span>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">There are ways to change the stack pointer other than <code>push</code>/<code>pop</code>, including a <code>call</code> into a callee-cleanup function. In my experience, this stack pointer problem happens when IDA misidentifies the signature of a function being called and assigns an incorrect delta to the line following that <code>call</code> (in your case, I suspect the initial analysis of <code>GlobalExceptionE</code> was incorrect). In one previous project I was hitting this problem so often that I wrote <a href=\"https://github.com/DCoderLT/Misc_Tools/blob/master/idc/stackscan/stackscan.idc\" rel=\"nofollow noreferrer\">an IDC script</a> to detect it.</span>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<span class=\"comment-copy\">@DCoder, when I compressed the function into stack relvant instructions, I also had the impression that the <code>GlobalExceptionE</code> function should be the cause of it. But somehow I don't see how this should work. I updated the question to show this, and from there it should be obvious why IDA thinks so.</span>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">It's hard to speculate further without a full view of the executable - if you post the executable, it could provide more information. However, you should realize that without having the source to IDA it can't be definitively said what sequence of events causes this problem, we can only theorize.</span>",
            "time": null
        }
    ],
    "answers_data": []
}