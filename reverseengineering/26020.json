{
    "title": "What is the state of the stack in the entry function?",
    "link": "https://reverseengineering.stackexchange.com/questions/26020/what-is-the-state-of-the-stack-in-the-entry-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an ELF binary and in the entry function the first two instructions are:</p>\n<pre><code>XOR EBP, EBP\nPOP ESI\n</code></pre>\n<p>I'm curious what the state of the stack is at the start of the entry function in ELF and PE binaries (and others if possible).\nI had thought it was empty but presumably there is something there to be <code>pop</code>ed.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "423",
    "tags": [
        "elf",
        "stack",
        "entry-point"
    ],
    "user": "TableMagnet",
    "time": "Oct 1, 2020 at 8:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the <code>_start</code> function, <code>argc</code>, <code>argv</code> and <code>envp</code> are contained on the stack.</p>\n<p>A good read on this is the <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" rel=\"nofollow noreferrer\">Linux x86 Program Start Up or - How the heck do we get to <code>main()</code>?</a></p>\n<blockquote>\n<p>When you run a program, the shell or gui calls <code>execve()</code> which executes the linux system call <code>execve()</code>. If you want more information about <code>execve()</code> then you can simply type <code>man execve</code> from your shell. It will come from section 2 of man where all the system calls are. To summarize, it will set up a stack for you, and push onto it <code>argc</code>, <code>argv</code>, and <code>envp</code>. The file descriptions 0, 1, and 2, (<code>stdin</code>, <code>stdout</code>, <code>stderr</code>), are left to whatever the shell set them to. The loader does much work for you setting up your relocations, and as we'll see much later, calling your preinitializers. When everything is ready, control is handed to your program by calling <code>_start()</code>.</p>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "Shane Reilly",
            "time": "Oct 1, 2020 at 12:55",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The stack layout at the entry point for 32-bit Linux executables is described in the <a href=\"http://www.sco.com/developers/devspecs/abi386-4.pdf\" rel=\"nofollow noreferrer\"><em>System V Intel386 Architecture ABI Supplement</em></a>.</p>\n<p>It looks like following:</p>\n<p><a href=\"https://i.sstatic.net/aFoQi.jpg\" rel=\"nofollow noreferrer\"><img alt=\"initial process stack layout\" src=\"https://i.sstatic.net/aFoQi.jpg\"/></a></p>\n<p>So <code>pop edi</code> copies the <code>argc</code> value into  <code>edi</code> and the following code probably builds the <code>argv</code> array for the <code>main</code> function.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Oct 1, 2020 at 22:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}