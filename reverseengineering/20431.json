{
    "title": "Why stack canary can be brute-force one byte at a time?",
    "link": "https://reverseengineering.stackexchange.com/questions/20431/why-stack-canary-can-be-brute-force-one-byte-at-a-time",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reading <a href=\"https://ctf101.org/binary-exploitation/stack-canaries/\" rel=\"nofollow noreferrer\">brute-forcing stack canary</a>. But I am confused why the server can be brute-forced one byte at a time on a crashable-server and what does mean this <em>fork-and-accept</em> ?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "exploit",
        "stack",
        "vulnerability-analysis"
    ],
    "user": "Just",
    "time": "Jan 21, 2019 at 10:18",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">This may help: <a href=\"https://security.stackexchange.com/questions/45593/\">security.stackexchange.com/questions/45593</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A common mistake, while programming a server, is to use a <code>fork()</code> to start it and respawn it when it crashes.</p>\n<p>The problem with a <code>fork()</code> is that is uses a copy of the memory to start over. Of course, using a copy means that the respawned server will be stuck with the exact same canaries even if it has been crashed and respawn. Somehow, it's memory layout and it's canaries are frozen until it is really re-run from the executable file.</p>\n<p>The good way to program a server would be to systematically use an <code>execve()</code> in place of the <code>fork()</code>. This ensure that the memory start from scratch an re-initialize all the memory settings (ASLR, canaries, and so on).</p>\n<p>But, indeed, most of the servers in the wild are using an <code>execve()</code>, we can only find <code>fork()</code> on old implementations or on educational security challenges.</p>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Jan 21, 2019 at 10:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}