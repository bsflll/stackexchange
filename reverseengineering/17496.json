{
    "title": "IDA Pro 64bit offset and opcode issue",
    "link": "https://reverseengineering.stackexchange.com/questions/17496/ida-pro-64bit-offset-and-opcode-issue",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking at a 64bit PE file in IDA. The instructions below access unknown data at offset <code>20030</code>. Usually when I look at 32bit PE files, the offset is also listed next to the opcodes on the left. So normally it would be \"opcode\" \"offset address little endian\". In this example, the bytes after the opcode don't equal <code>0x20030</code>. They are <code>0x10EE5B0D</code>. Any idea why not? Is there any way to identify the <code>0x20030</code> offset? IDA clearly knows where the data is because its naming it <code>\"unk_180020030\"</code>.</p>\n<pre><code>00000001800011CE 48 8D 0D 5B EE 01 00    lea rcx, unk_180020030\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "896",
    "tags": [
        "ida",
        "pe",
        "x86-64"
    ],
    "user": "Chuck",
    "time": "Feb 19, 2018 at 9:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As you showed us, the opcodes  <code>48 8D 0D 5B EE 01 00</code> are translated by IDA to:</p>\n<pre><code> lea rcx, unk_180020030\n</code></pre>\n<p>But how does IDA recognizes this address? Well it's all about relative offsets. These opcodes are truly translated into the following assembly. I used \"<a href=\"https://radare.gitbooks.io/radare2book/content/rasm2/intro.html\" rel=\"nofollow noreferrer\">rasm2</a>\" from radare2 framework but you can use any other (<a href=\"https://defuse.ca/online-x86-assembler.htm#disassembly2\" rel=\"nofollow noreferrer\">1</a>) option (<a href=\"https://onlinedisassembler.com/odaweb/\" rel=\"nofollow noreferrer\">2</a>).</p>\n<pre><code>$ rasm2 -b 64 -d 488D0D5BEE0100\nlea rcx, [rip + 0x1ee5b]\n</code></pre>\n<p>As you can see, <code>0x1ee5b</code> (and not <code>0x10EE5B0D</code>) is relative, in this case, to the <code>RIP</code> register. Since it's the Instruction Pointer, you can tell that RIP would be equal to <code>0x1800011CE</code> which is the address of the instruction you showed us. Simply add <code>0x1ee5b</code> to it and you'll get the address that IDA calculated.</p>\n</div>",
            "votes": "3",
            "user": "Megabeets",
            "time": "Feb 19, 2018 at 8:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Chuck",
                    "text": "<span class=\"comment-copy\">Is there a way to get the value without knowing rip if I know values for ImageBase, section offsets etc?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">You can calculate the offset from the base address to this address</span>",
                    "time": null
                },
                {
                    "user": "Chuck",
                    "text": "<span class=\"comment-copy\">So 0x180000000 - 0x1ee5b? That is 0x17ffe11a5. I’m not sure how I would get 0x11ce. Would you mind providing an example? I want to programmatically determine this via python so I have to act as though I don’t know the 0x1800011ce address and have to calculate it.</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">That's another question. Please open a new question, describing thoroughly all the information you have and all that you tried.</span>",
                    "time": null
                }
            ]
        }
    ]
}