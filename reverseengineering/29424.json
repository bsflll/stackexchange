{
    "title": "Starting out with reverse engineering. What assembly is disassembled code",
    "link": "https://reverseengineering.stackexchange.com/questions/29424/starting-out-with-reverse-engineering-what-assembly-is-disassembled-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am new to reverse engineering and want to analyze my own <code>exe/dll</code> files. I took a look at <code>nasm</code> and <code>masm</code> and so far I have the feeling that this is unnecessary for me to learn in detail because it really differs from what I see in the <code>disassembled code</code> (for example in IDA Free).</p>\n<p>What kind of assembly is disassembled code of an exe or DLL?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "110",
    "tags": [
        "disassembly",
        "assembly",
        "dll",
        "exe",
        "nasm"
    ],
    "user": "Nur1",
    "time": "Oct 17, 2021 at 12:39",
    "comments": [
        {
            "user": "Irbis77",
            "text": "<span class=\"comment-copy\">Perhaps it would make sense to start with a specific example and then check what's been used there? That way you will get the logic behind of why it was one way or another as well? Otherwise, you might as well start reading about masm and nasm in general.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">What disassembled code you get depends on the input. For exe/dll files this depends on whether it is a native x86 32bit or x86 64bit binary or if it is a .Net binary, the output can be completely different. And of course every tool may show a slightly different representation.</span>",
            "time": null
        },
        {
            "user": "Nur1",
            "text": "<span class=\"comment-copy\">Thanks this helped. I won't close the question and may answer it sometime.</span>",
            "time": null
        }
    ],
    "answers_data": []
}