{
    "title": "Help in reverse engineering a boarding gate scanner's firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/31165/help-in-reverse-engineering-a-boarding-gate-scanners-firmware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on a custom Access Control system for my local airport that will validate passengers' boarding passes and I've been given two <strong>DESKO GRSK 502</strong> scanners.</p>\n<p>Unfortunately, there's absolutely no documentation available on them and the manufacturer is not willing to disclose any information on how the scanners operate even though they reached End of Service in 2020.</p>\n<p>I managed to find a script that is used to update its firmware and it appears to contain what I've been looking for.</p>\n<p>I am a complete newbie when it comes to reverse engineering, so the only things I've managed to get from the firmware are some random command strings. Unfortunately, however, the scanner always returns a 'Negative Acknowledge' response, so I'm guessing it expects some initialization command before accepting any others.</p>\n<p>Here is the firmware itself: <a href=\"https://pastebin.com/UDgne3Q8\" rel=\"nofollow noreferrer\">https://pastebin.com/UDgne3Q8</a>\nI used Hex2Bin to convert the firmware file to a .bin file and the loaded it up on IDA Pro. Upon Googling, I came across <a href=\"https://revengrazer.blogspot.com/2013/06/firmware-part-3-setting-up-ida-pro.html\" rel=\"nofollow noreferrer\">this blog post</a> which mentions that IDA Pro should be provided with the processor's ROM start address in order to decompile it properly.</p>\n<p>Here's the inside of the scanner:</p>\n<p><a href=\"https://i.sstatic.net/3pqDT.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/3pqDT.jpg\"/></a></p>\n<p>I assumed that the processors is 'P80C5521BA', but there's no information on NXP's website on its ROM start address.</p>\n<p>I would appreciate any help I can get in extracting any information from that firmware file. üôè</p>\n<p>Thank you!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "159",
    "tags": [
        "firmware"
    ],
    "user": "Gavouli",
    "time": "Jan 5, 2023 at 10:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The CPU in the <code>P80C552</code> microcontroller is a <code>80C51</code>.\nAfter reset, this begins execution at address <code>0x0000</code>.</p>\n<p>A quick inspection of your firmware hex file confirms this.</p>\n<p>This is -</p>\n<pre><code>:03000000020403F4\n\n=&gt;\n0000:  020403    LJMP $0403  // long jump to address `0x0403`\n</code></pre>\n<p>If we follow this -</p>\n<pre><code>:10040000320178C2AFC2977581AD90FFD043820FA1\n\n=&gt;\n\n0403:  C2AF      CLR IE.7 // disable all interrupts\n....\n</code></pre>\n<p>After disabling interrupts, the code continues as typical reset code, setting the stack pointer, data pointer etc.</p>\n<p>This confirms that address <code>0000</code> is a plausible start address for your firmware.</p>\n<p>However, to actually use it in IDA you need to be aware that the 8051 has a Harvard architecture. Please look at the related question &amp; answer <a href=\"https://reverseengineering.stackexchange.com/questions/22168/loading-8051-binary-to-ida-with-romexternal-ram-configuration\">here</a> for details.</p>\n</div>",
            "votes": "1",
            "user": "Ian Cook",
            "time": "Nov 23, 2022 at 21:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}