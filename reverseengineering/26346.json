{
    "title": "Analyse structure from memory dump",
    "link": "https://reverseengineering.stackexchange.com/questions/26346/analyse-structure-from-memory-dump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to extract master key from OpenSSL 1.0.2l (statically linked without debug symbols).</p>\n<p>I'm using x64dbg, I was able to locate <code>int SSL_connect(SSL *s)</code> method, so I have a breakpoint there (the breakpoint gets hit). In the result, I have a pointer to <code>SSL</code> parameter that contains <code>SSL_SESSION *session</code> member, in which the master key is located.</p>\n<p>The <code>SSL</code> pointer points me the following place in dump:\n<a href=\"https://i.sstatic.net/KkgLe.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/KkgLe.png\"/></a></p>\n<p>Is there any easy way to find my poiner to <code>SSL_SESSION *session</code> member here? Any other tool suggestions?</p>\n<p>Useful links to OpenSSL source code:</p>\n<p><a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl_lib.c#L1002\" rel=\"nofollow noreferrer\"><code>int SSL_connect(SSL *s)</code></a></p>\n<p><a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl.h#L1422\" rel=\"nofollow noreferrer\"><code>SSL</code> structure</a></p>\n<p><a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl.h#L1539\" rel=\"nofollow noreferrer\"><code>SSL_SESSION *session</code> member in <code>SSL</code></a></p>\n<p><a href=\"https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/ssl/ssl.h#L505\" rel=\"nofollow noreferrer\"><code>SSL_SESSION</code> structure</a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "778",
    "tags": [
        "debugging",
        "memory-dump",
        "openssl"
    ],
    "user": "Iks Ski",
    "time": "Nov 22, 2020 at 14:04",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Try looking at pykd. See <a href=\"https://githomelab.ru/pykd/pykd/-/wikis/API-Reference#getTypeFromSource\" rel=\"nofollow noreferrer\">this</a></span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">@sudhacker does pykd work on x64dbg  i wasn't aware of that</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">@blabb OP was looking for suggestions to other tools too.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would use the x64dbg methods to add a custom type:</p>\n<ol>\n<li>You can do this using a combination of these <a href=\"https://help.x64dbg.com/en/latest/commands/types/index.html\" rel=\"nofollow noreferrer\">commands</a>:</li>\n</ol>\n<ul>\n<li>DataUnknown</li>\n<li>DataByte/db</li>\n<li>DataWord/dw</li>\n<li>DataDword/dw</li>\n<li>DataFword</li>\n<li>DataQword/dq</li>\n<li>DataTbyte</li>\n<li>DataOwordD</li>\n<li>DataMmword</li>\n<li>DataXmmword</li>\n<li>DataYmmword</li>\n<li>DataFloat/DataReal4/df</li>\n<li>DataDouble/DataReal8</li>\n<li>DataLongdouble/DataReal10</li>\n<li>DataAscii/da</li>\n<li>DataUnicode/du</li>\n<li>DataCode/dc</li>\n<li>DataJunk</li>\n<li>DataMiddle</li>\n<li>AddType</li>\n<li>AddStruct</li>\n<li>AddUnion</li>\n<li>AddMember</li>\n<li>AppendMember</li>\n<li>AddFunction</li>\n<li>AddArg</li>\n<li>AppendArg</li>\n<li>SizeofType</li>\n<li>VisitType</li>\n<li>ClearTypes</li>\n<li>RemoveType</li>\n<li>EnumTypes</li>\n<li>LoadTypes</li>\n<li>ParseTypes</li>\n</ul>\n<ol start=\"2\">\n<li>Create a type definition in types <a href=\"https://gist.github.com/mrexodia/e949ab26d5986a5fc1fa4944ac68147a#file-types-json\" rel=\"nofollow noreferrer\">JSON</a> example:</li>\n</ol>\n<p>{\n\"types\": [\n{\n\"type\": \"unsigned int\",\n\"name\": \"DWORD\"\n},\n{\n\"type\": \"_FILETIME*\",\n\"name\": \"LPFILETIME\"\n}\n],\n\"structs\": [\n{\n\"name\": \"ST\",\n\"members\": [\n{\n\"type\": \"char\",\n\"name\": \"a\",\n\"arrsize\": 0,\n\"offset\": -1\n},\n{\n\"type\": \"int\",\n\"name\": \"y\",\n\"arrsize\": 0,\n\"offset\": -1\n}\n]\n},\n{\n\"name\": \"_FILETIME\",\n\"members\": [\n{\n\"type\": \"DWORD\",\n\"name\": \"dwLoDateTime\"\n},\n{\n\"type\": \"DWORD\",\n\"name\": \"dwHighDateTime\"\n}\n]\n},\n{\n\"name\": \"BLUB\",\n\"members\": [\n{\n\"type\": \"short\",\n\"name\": \"c\"\n},\n{\n\"type\": \"int\",\n\"name\": \"d\",\n\"arrsize\": 2\n}\n]\n},\n{\n\"name\": \"TEST\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"a\"\n},\n{\n\"type\": \"char\",\n\"name\": \"b\"\n},\n{\n\"type\": \"BLUB\",\n\"name\": \"e\"\n},\n{\n\"type\": \"int\",\n\"name\": \"f\"\n}\n]\n},\n{\n\"name\": \"POINTEE\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"n\"\n},\n{\n\"type\": \"TEST\",\n\"name\": \"t\"\n}\n]\n},\n{\n\"name\": \"POINTER\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"x\"\n},\n{\n\"type\": \"POINTEE*\",\n\"name\": \"next\"\n},\n{\n\"type\": \"int\",\n\"name\": \"y\"\n}\n]\n},\n{\n\"name\": \"LIST_ENTRY\",\n\"members\": [\n{\n\"type\": \"int\",\n\"name\": \"x\"\n},\n{\n\"type\": \"LIST_ENTRY*\",\n\"name\": \"next\"\n},\n{\n\"type\": \"int\",\n\"name\": \"y\"\n}\n]\n},\n{\n\"name\": \"STRINGTEST\",\n\"members\": [\n{\n\"type\": \"const char*\",\n\"name\": \"str\"\n},\n{\n\"type\": \"const wchar_t*\",\n\"name\": \"wstr\"\n}\n]\n}\n],\n\"unions\": [\n{\n\"name\": \"UT\",\n\"members\": [\n{\n\"type\": \"char\",\n\"name\": \"a\"\n},\n{\n\"type\": \"short\",\n\"name\": \"b\"\n},\n{\n\"type\": \"int\",\n\"name\": \"c\"\n},\n{\n\"type\": \"long long\",\n\"name\": \"d\"\n}\n]\n}\n],\n\"functions\": [\n{\n\"rettype\": \"int\",\n\"callconv\": \"cdecl\",\n\"noreturn\": false,\n\"name\": \"strcasecmp\",\n\"arguments\": [\n{\n\"type\": \"const char*\",\n\"name\": \"s1\"\n},\n{\n\"type\": \"const char*\",\n\"name\": \"s2\"\n}\n]\n}\n]\n}</p>\n<ol start=\"3\">\n<li>Load a <a href=\"https://gist.github.com/mrexodia/e949ab26d5986a5fc1fa4944ac68147a#file-context32-h\" rel=\"nofollow noreferrer\">simple C header definition</a> of the type</li>\n</ol>\n<p>Once a type is imported you can use <a href=\"https://help.x64dbg.com/en/latest/commands/types/VisitType.html\" rel=\"nofollow noreferrer\">VisitType</a> cmd to view it.\nAdditional info:\n<a href=\"https://x64dbg.com/blog/2016/12/04/type-system.html\" rel=\"nofollow noreferrer\">x64dbg type system</a>\n<a href=\"https://x64dbg.com/blog/2016/11/27/weekly-digest-14.html#types\" rel=\"nofollow noreferrer\">Weekly Digest 14 - Types</a></p>\n</div>",
            "votes": "-1",
            "user": "chentiangemalc",
            "time": "Nov 22, 2020 at 23:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}