{
    "title": "IDA Pro is showing Function names for a Stripped Binary",
    "link": "https://reverseengineering.stackexchange.com/questions/19688/ida-pro-is-showing-function-names-for-a-stripped-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an ELF 32-bit binary and it is a stripped binary.</p>\n<p>Yet, when I load with IDA Pro, I can see the function names like write, open, malloc and so on. So, I am trying to understand if the binary is stripped, then why am I still able to see these function names?</p>\n<p>Output of file command for the binary:</p>\n<pre><code>ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), stripped\n</code></pre>\n<p>Example of a code section from the binary:</p>\n<pre><code>.text:080485D0                 push    offset asome_string ; \"[ some string ]\\n\"\n.text:080485D5                 call    sub_80483F0\n\n\n.text:080483F0 buf             = dword ptr  4\n.text:080483F0\n.text:080483F0                 sub     esp, 0Ch\n.text:080483F3                 sub     esp, 4\n.text:080483F6                 sub     esp, 8\n.text:080483F9                 push    [esp+18h+buf]\n.text:080483FD                 call    sub_8049EA0\n.text:08048402                 add     esp, 0Ch\n.text:08048405                 push    eax             ; n\n.text:08048406                 push    [esp+14h+buf]   ; buf\n.text:0804840A                 push    1               ; fd\n.text:0804840C                 call    _write\n.text:08048411                 add     esp, 10h\n.text:08048414                 add     esp, 0Ch\n.text:08048417                 retn\n</code></pre>\n<p>In the above code section, sub_80483F0 is a subroutine which takes one argument. This subroutine will then call sub_8049EA0 to calculate the length of the buffer and then write the buffer to stdout.</p>\n<p>So, _write is a symbol which was resolved by IDA Pro.</p>\n<p>How did IDA Pro resolve _write?</p>\n<p>I can see the _write is defined inside the .plt section of the ELF as shown below:</p>\n<pre><code>.plt:08048330 _write          proc near               ; CODE XREF: sub_80483F0+1Cp\n.plt:08048330                 jmp     ds:write_ptr\n.plt:08048330 _write          endp\n</code></pre>\n<p>It has a jump stub which points to write_ptr</p>\n<p>write_ptr is inside the .got.plt which I think will be populated with the correct value of the function pointer at runtime.</p>\n<p>But the question is, if the binary is stripped then shouldn't it have prevented IDA Pro from displaying the function name, _write in the first place?</p>\n<p>Thanks.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "elf"
    ],
    "user": "Neon Flash",
    "time": "Oct 22, 2018 at 16:40",
    "comments": [
        {
            "user": "Daniel Sloof",
            "text": "<span class=\"comment-copy\">Relevant: <a href=\"https://reverseengineering.stackexchange.com/questions/2539/what-symbol-tables-stay-after-a-strip-in-elf-format\" title=\"what symbol tables stay after a strip in elf format\">reverseengineering.stackexchange.com/questions/2539/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>write</code> is a function that is imported from one of your system modules.\nBecause it has to be imported, the name should be available in your binary, and ida uses this to automatically name the stub that calls the function.</p>\n<p>As a little experiment, try: <code>objdump -T yourfile</code>, and you should see something like the following (from a dummy x64 binary):</p>\n<pre><code>objdump -T test\n\ntest:     file format elf64-x86-64\n\nDYNAMIC SYMBOL TABLE:\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 write\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5     __libc_start_main\n0000000000000000  w   D  *UND*  0000000000000000              __gmon_start__\n</code></pre>\n<p>Or even simpler:\n<code>strings yourfile</code></p>\n</div>",
            "votes": "2",
            "user": "Mark Jansen",
            "time": "Oct 22, 2018 at 19:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Neon Flash",
                    "text": "<span class=\"comment-copy\">Thanks, I have understood. I realized that the best way for a binary to have no symbols at all is to statically link the binary. If it's dynamically linked, then the symbol information will be present in the .PLT section and resolved at runtime.</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">And if you statically link IDA will use FLIRT signatures to give you the function name anyway :)</span>",
                    "time": null
                }
            ]
        }
    ]
}