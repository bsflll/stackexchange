{
    "title": "Assemby reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/30743/assemby-reverse-engineering",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm new to assembly and need some help understanding what this program does. This program takes a username and serial. If the combination is correct, it prints the magic words.\nI need to write a keygen for this program.\nAny help would be appreciated. Thanks</p>\n<pre><code>0x08049530 &lt;+0&gt;:    lea    0x4(%esp),%ecx\n   0x08049534 &lt;+4&gt;: and    $0xfffffff0,%esp\n   0x08049537 &lt;+7&gt;: push   -0x4(%ecx)\n   0x0804953a &lt;+10&gt;:    push   %ebp\n   0x0804953b &lt;+11&gt;:    mov    %esp,%ebp\n   0x0804953d &lt;+13&gt;:    push   %ebx\n   0x0804953e &lt;+14&gt;:    push   %ecx\n   0x0804953f &lt;+15&gt;:    sub    $0x40,%esp\n   0x08049542 &lt;+18&gt;:    call   0x8049160 &lt;__x86.get_pc_thunk.bx&gt;\n   0x08049547 &lt;+23&gt;:    add    $0x2ab9,%ebx\n   0x0804954d &lt;+29&gt;:    mov    %ecx,%eax\n   0x0804954f &lt;+31&gt;:    mov    0x4(%eax),%edx\n   0x08049552 &lt;+34&gt;:    mov    %edx,-0x3c(%ebp)\n   0x08049555 &lt;+37&gt;:    mov    %gs:0x14,%edx\n   0x0804955c &lt;+44&gt;:    mov    %edx,-0xc(%ebp)\n   0x0804955f &lt;+47&gt;:    xor    %edx,%edx\n   0x08049561 &lt;+49&gt;:    movl   $0x65757153,-0x20(%ebp)\n   0x08049568 &lt;+56&gt;:    movl   $0x73696d61,-0x1c(%ebp)\n   0x0804956f &lt;+63&gt;:    movl   $0x734f2068,-0x18(%ebp)\n   0x08049576 &lt;+70&gt;:    movl   $0x72666973,-0x14(%ebp)\n   0x0804957d &lt;+77&gt;:    movl   $0x656761,-0x10(%ebp)\n   0x08049584 &lt;+84&gt;:    cmpl   $0x3,(%eax)\n   0x08049587 &lt;+87&gt;:    je     0x80495b4 &lt;main+132&gt;\n   0x08049589 &lt;+89&gt;:    mov    -0x3c(%ebp),%eax\n   0x0804958c &lt;+92&gt;:    mov    (%eax),%edx\n   0x0804958e &lt;+94&gt;:    mov    -0x10(%ebx),%eax\n   0x08049594 &lt;+100&gt;:   mov    (%eax),%eax\n   0x08049596 &lt;+102&gt;:   sub    $0x4,%esp\n   0x08049599 &lt;+105&gt;:   push   %edx\n   0x0804959a &lt;+106&gt;:   lea    -0x1fe2(%ebx),%edx\n   0x080495a0 &lt;+112&gt;:   push   %edx\n   0x080495a1 &lt;+113&gt;:           push   %eax\n   0x080495a2 &lt;+114&gt;:   call   0x80490b0 &lt;fprintf@plt&gt;\n   0x080495a7 &lt;+119&gt;:   add    $0x10,%esp\n   0x080495aa &lt;+122&gt;:   mov    $0xffffffff,%eax\n   0x080495af &lt;+127&gt; :  jmp    0x80496d0 &lt;main+416&gt;\n   0x080495b4 &lt;+132&gt;:   sub    $0x4,%esp\n   0x080495b7 &lt;+135&gt;:   push   $0xb\n   0x080495b9 &lt;+137&gt;:   push   $0x0\n   0x080495bb &lt;+139&gt;:   lea    -0x36(%ebp),%eax\n   0x080495be &lt;+142&gt;:   push   %eax\n   0x080495bf &lt;+143&gt;:   call   0x80490c0 &lt;memset@plt&gt;\n   0x080495c4 &lt;+148&gt;:   add    $0x10,%esp\n   0x080495c7 &lt;+151&gt;:   mov    -0x3c(%ebp),%eax\n   0x080495ca &lt;+154&gt;:   add    $0x4,%eax\n   0x080495cd &lt;+157&gt;:   mov    (%eax),%eax\n   0x080495cf &lt;+159&gt;:   sub    $0x4,%esp\n   0x080495d2 &lt;+162&gt;:   push   $0xa\n   0x080495d4 &lt;+164&gt;:   push   %eax\n   0x080495d5 &lt;+165&gt;:   lea    -0x36(%ebp),%eax\n   0x080495d8 &lt;+168&gt;:   push   %eax\n   0x080495d9 &lt;+169&gt;:   call   0x80490d0 &lt;strncpy@plt&gt;\n   0x080495de &lt;+174&gt;:   add    $0x10,%esp\n   0x080495e1 &lt;+177&gt;:   sub    $0x4,%esp\n   0x080495e4 &lt;+180&gt;:   push   $0xb\n   0x080495e6 &lt;+182&gt;:   push   $0x0\n   0x080495e8 &lt;+184&gt;:   lea    -0x2b(%ebp),%eax\n   0x080495eb &lt;+187&gt;:   push   %eax\n   0x080495ec &lt;+188&gt;:   call   0x80490c0 &lt;memset@plt&gt;\n   0x080495f1 &lt;+193&gt;:           add    $0x10,%esp\n   0x080495f4 &lt;+196&gt;:   mov    -0x3c(%ebp),%eax\n   0x080495f7 &lt;+199&gt;:   add    $0x8,%eax\n   0x080495fa &lt;+202&gt;:   mov    (%eax),%eax\n   0x080495fc &lt;+204&gt;:   sub    $0x4,%esp\n   0x080495ff &lt;+207&gt;:           push   $0xa\n   0x08049601 &lt;+209&gt;:   push   %eax\n   0x08049602 &lt;+210&gt;:   lea    -0x2b(%ebp),%eax\n   0x08049605 &lt;+213&gt;:   push   %eax\n   0x08049606 &lt;+214&gt;:   call   0x80490d0 &lt;strncpy@plt&gt;\n   0x0804960b &lt;+219&gt;:   add    $0x10,%esp\n   0x0804960e &lt;+222&gt;:   lea    -0x36(%ebp),%eax\n   0x08049611 &lt;+225&gt;:   movzbl (%eax),%eax\n   0x08049614 &lt;+228&gt;:   test   %al,%al\n   0x08049616 &lt;+230&gt;:   jne    0x804963e &lt;main+270&gt;\n   0x08049618 &lt;+232&gt;:   mov    -0x10(%ebx),%eax\n   0x0804961e &lt;+238&gt;:   mov    (%eax),%eax\n   0x08049620 &lt;+240&gt;:   push   %eax\n   0x08049621 &lt;+241&gt;:   push   $0x10\n   0x08049623 &lt;+243&gt;:   push   $0x1\n   0x08049625 &lt;+245&gt;:   lea    -0x1fc7(%ebx),%eax\n   0x0804962b &lt;+251&gt;:   push   %eax\n   0x0804962c &lt;+252&gt;:   call   0x8049070 &lt;fwrite@plt&gt;\n   0x08049631 &lt;+257&gt;:   add    $0x10,%esp\n   0x08049634 &lt;+260&gt;:   mov    $0xffffffff,%eax\n   0x08049639 &lt;+265&gt;:   jmp    0x80496d0 &lt;main+416&gt;\n   0x0804963e &lt;+270&gt;:   call   0x8049226 &lt;frame_dummy+6&gt;\n   0x08049643 &lt;+275&gt;:   test   %eax,%eax\n   0x08049645 &lt;+277&gt;:   je     0x804966a &lt;main+314&gt;\n   0x08049647 &lt;+279&gt;:   mov    -0x10(%ebx),%eax\n   0x0804964d &lt;+285&gt;:   mov    (%eax),%eax\n   0x0804964f &lt;+287&gt;:   push   %eax\n   0x08049650 &lt;+288&gt;:   push   $0x8\n   0x08049652 &lt;+290&gt;:   push   $0x1\n   0x08049654 &lt;+292&gt;:   lea    -0x1fb6(%ebx),%eax\n   0x0804965a &lt;+298&gt;:   push   %eax\n   0x0804965b &lt;+299&gt;:   call   0x8049070 &lt;fwrite@plt&gt;\n   0x08049660 &lt;+304&gt;:   add    $0x10,%esp\n   0x08049663 &lt;+307&gt;:   mov    $0xffffffff,%eax\n   0x08049668 &lt;+312&gt;:   jmp    0x80496d0 &lt;main+416&gt;\n   0x0804966a &lt;+314&gt;:   sub    $0x8,%esp\n   0x0804966d &lt;+317&gt;:   lea    -0x2b(%ebp),%eax\n   0x08049670 &lt;+320&gt;:   push   %eax\n   0x08049671 &lt;+321&gt;:   lea    -0x36(%ebp),%eax\n   0x08049674 &lt;+324&gt;:   push   %eax\n   0x08049675 &lt;+325&gt;:   call   0x80493f5 &lt;frame_dummy+469&gt;\n   0x0804967a &lt;+330&gt;:   add    $0x10,%esp\n   0x0804967d &lt;+333&gt;:   test   %eax,%eax\n   0x0804967f &lt;+335&gt;:   jne    0x80496a4 &lt;main+372&gt;\n   0x08049681 &lt;+337&gt;:   mov    -0x10(%ebx),%eax\n   0x08049687 &lt;+343&gt;:   mov    (%eax),%eax\n   0x08049689 &lt;+345&gt;:   push   %eax\n   0x0804968a &lt;+346&gt;:   push   $0x16\n   0x0804968c &lt;+348&gt;:   push   $0x1\n   0x0804968e &lt;+350&gt;:   lea    -0x1fad(%ebx),%eax\n   0x08049694 &lt;+356&gt;:   push   %eax\n   0x08049695 &lt;+357&gt;:   call   0x8049070 &lt;fwrite@plt&gt;\n   0x0804969a &lt;+362&gt;:   add    $0x10,%esp\n   0x0804969d &lt;+365&gt;:   mov    $0xffffffff,%eax\n   0x080496a2 &lt;+370&gt;:   jmp    0x80496d0 &lt;main+416&gt;\n   0x080496a4 &lt;+372&gt;:   mov    0xa8(%ebx),%eax\n   0x080496aa &lt;+378&gt;:   call   *%eax\n   0x080496ac &lt;+380&gt;:   mov    -0x8(%ebx),%eax\n   0x080496b2 &lt;+386&gt;:   mov    (%eax),%eax\n   0x080496b4 &lt;+388&gt;:   sub    $0x4,%esp\n   0x080496b7 &lt;+391&gt;:   lea    -0x20(%ebp),%edx\n   0x080496ba &lt;+394&gt;:   push   %edx\n   0x080496bb &lt;+395&gt;:   lea    -0x1f96(%ebx),%edx\n   0x080496c1 &lt;+401&gt;:   push   %edx\n   0x080496c2 &lt;+402&gt;:   push   %eax\n   0x080496c3 &lt;+403&gt;:   call   0x80490b0 &lt;fprintf@plt&gt;\n   0x080496c8 &lt;+408&gt;:   add    $0x10,%esp\n   0x080496cb &lt;+411&gt;:   mov    $0x0,%eax\n   0x080496d0 &lt;+416&gt;:   mov    -0xc(%ebp),%edx\n   0x080496d3 &lt;+419&gt;:   sub    %gs:0x14,%edx\n   0x080496da &lt;+426&gt;:   je     0x80496e1 &lt;main+433&gt;\n   0x080496dc &lt;+428&gt;:   call   0x8049770 &lt;__stack_chk_fail_local&gt;\n   0x080496e1 &lt;+433&gt;:   lea    -0x8(%ebp),%esp\n   0x080496e4 &lt;+436&gt;:   pop    %ecx\n   0x080496e5 &lt;+437&gt;:   pop    %ebx\n   0x080496e6 &lt;+438&gt;:   pop    %ebp\n   0x080496e7 &lt;+439&gt;:   lea    -0x4(%ecx),%esp\n   0x080496ea &lt;+442&gt;:   ret    \n</code></pre>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "122",
    "tags": [
        "disassembly",
        "assembly",
        "disassemblers"
    ],
    "user": "TN_stud",
    "time": "Aug 8, 2022 at 3:03",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<span class=\"comment-copy\">If possible, don't just put the disassembly of it, please put the whole binary somewhere and give us the link to it. There might be some resources like strings, ... that is not included in this piece of dissassembly, but contained in the binary</span>",
            "time": null
        },
        {
            "user": "Mega Tonnage",
            "text": "<span class=\"comment-copy\">@TN_stud  .. you haven't mentioned which part you're stuck on? If the problem is understanding the whole thing, then maybe start with something smaller. Compile a simple hello_world and analyse it. Have you taken any training? .. there are many good books on assembly, as well as online courses.</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">the verification is in the two frame_dummy calls.  It would help to know what's there.</span>",
            "time": null
        }
    ],
    "answers_data": []
}