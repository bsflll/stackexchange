{
    "title": "Ghidra 11.0 - What does Function > Analyze Stack option do?",
    "link": "https://reverseengineering.stackexchange.com/questions/32727/ghidra-11-0-what-does-function-analyze-stack-option-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Greetings ladies &amp; gentlemen,</p>\n<p>I am but a novice at both Ghidra and Reverse Engineering in general. Forgive me if you think this question is dumb or obvious to answer :)</p>\n<p>While attempting to solve a CTF RE challenge using Ghidra, the disassembler gave me the following output for one of the function's stack frame:</p>\n<p><a href=\"https://i.sstatic.net/qF2Oh.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/qF2Oh.png\"/></a></p>\n<p>Correspondingly, the decompiler displays the following:</p>\n<p><a href=\"https://i.sstatic.net/yDY7c.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/yDY7c.png\"/></a></p>\n<p>From both the assembly and pseudo-C output I assumed that the function takes in 2 parameters <code>param_1</code> <code>param_2</code> and has 6 local variables, one of which is rather peculiar - <code>in_stack_0000000c</code>. This variable is indeed used by the binary and it looks a local variable, but I didn't really understand why Ghidra labeled it in such format (comparing to the common format <code>local_&lt;num_of_bytes&gt;</code>) and why it wasn't displayed in the disassembler, so I tried googling for information on the format <em>in_stack_</em> but to no avail.</p>\n<p>Another weird thing is in the Listing View, I could see some operations using <code>Stack[0xc]</code> which somewhat resemble the mentioned variable. However, I also do not know which variable <code>Stack[0xc]</code> was referring to, since it looks like a function parameter reference yet this function's parameter stops at <code>Stack[0x8]</code>.</p>\n<p>After some time, while reading <a href=\"https://nostarch.com/GhidraBook\" rel=\"nofollow noreferrer\">The Ghidra Book</a>, I discovered that one could right-click the label <code>Stack[0xc]</code>, and scroll down to <em><strong>Function</strong></em> for stack-related options. I then select <em><strong>Analyze Stack</strong></em>, and wha-lah, the Listing View now displays an additional function parameter <code>param_3</code>, and it was at the address <code>Stack[0xc]</code> points to. <code>in_stack_0000000c</code> is also labeled as <code>param_3</code>. The snippet of the option is shown below:</p>\n<p><a href=\"https://i.sstatic.net/PAQpu.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/PAQpu.png\"/></a></p>\n<p>I've also tried searching for answers both within the book and on the Internet but have yet to succeed. <strong>So my question is, what does this option <em>Analyze Stack</em> actually do? And how did it dramatically change the analysis output as so?</strong></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "178",
    "tags": [
        "ghidra",
        "stack"
    ],
    "user": "dvmbCateDoinAStroll",
    "time": "Feb 12, 2024 at 10:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How well <em>Analyze Stack</em> works on any particular function in a program is based on:</p>\n<ul>\n<li>The calling convention selected for the given function, and,</li>\n<li>How well that calling convention actually models the way that function uses the stack, passes and returns parameters, stores local variables, etc.</li>\n</ul>\n<p>Ghidra's definitions for the above are defined in the <code>.cspec</code> (compiler specification) files that can be found  in the directories below <code>ghidra/processors/</code>. These can be modified to suit, but that's a topic too complex to discuss here in brief.</p>\n<p>Unless you're working with code that was built for Windows, Linux, or MacOS, using a well-known compiler like <code>gcc</code> or the Apple or Microsoft compilers and associated libraries, the corresponding <code>.cspec</code> may or may not allow for <code>Analyze Stack</code> to be of much use.</p>\n</div>",
            "votes": "1",
            "user": "g1l1t1",
            "time": "Feb 28, 2024 at 17:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}