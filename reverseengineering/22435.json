{
    "title": "CSR DFU File Format",
    "link": "https://reverseengineering.stackexchange.com/questions/22435/csr-dfu-file-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer the firmware for my JBL Flip 3 speaker. I have obtained a DFU file for the device online but am unsure as to how much of the firmware is included. My first question would be, normally do DFU files include the full device firmware or just a portion of it and the device knows how to update the specific portion?</p>\n<p>Assuming for now that the file contains the full firmware, does anyone know anything about firmware images for CSR Bluetooth SOC's? I know that the speaker is using a CSR SOC because the DFU starts with <code>CSR-dfu2</code>.</p>\n<p>Opening the DFU file in Audacity and playing it, we can see that it contains all the sound effects the speaker plays as well as some sections of static that I assume are code: <a href=\"https://i.sstatic.net/3VIpZ.png\" rel=\"nofollow noreferrer\"><img alt=\"firmware in Audacity\" src=\"https://i.sstatic.net/3VIpZ.png\"/></a></p>\n<p>I am fairly confident that these sections are code/data because they contains strings like <code>tts/0.raw</code> and <code>tts/1.raw</code>. However, there is a null byte in between each character of the strings which suggests that they are UTF-16 strings. Does anyone know of an embedded filesystem that uses UTF-16 filenames?</p>\n<p>Unfortunately <code>binwalk</code> does not provide any useful information. However, I found what I believe to be the full JBL Flip <strong>4</strong> firmware image image and <code>binwalk</code> reveals several sections:</p>\n<pre><code>0             0x0             CSR (XAP2) DFU firmware update header\n1380          0x564           CSR Bluecore firmware segment\n1931310       0x1D782E        YAFFS filesystem, big endian\n</code></pre>\n<p>Does anyone have any experience with CSR or JBL firmware and could provide guidance or a suggestion of how to extract code from the DFU? Thank you.</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "firmware",
        "binwalk",
        "bluetooth"
    ],
    "user": "genghiskhan",
    "time": "Oct 31, 2019 at 19:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a BlueCore02 Device Firmware Upgrade File. I could not find a specification, but the <a href=\"http://read.pudn.com/downloads330/sourcecode/embedded/1450690/AN093.pdf\" rel=\"noreferrer\">BlueCore01 specification</a> contains more or less the same fields (with a few differences)</p>\n</div>",
            "votes": "5",
            "user": "Johannes Mittendorfer",
            "time": "Dec 31, 2019 at 8:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Johannes Mittendorfer",
                    "text": "<span class=\"comment-copy\">If anyone can give a hint where to find the second version of the specification: I would really appreciate it.</span>",
                    "time": null
                },
                {
                    "user": "genghiskhan",
                    "text": "<span class=\"comment-copy\">What a life saver! I'll let you know if I find the BlueCore02 specs.</span>",
                    "time": null
                },
                {
                    "user": "genghiskhan",
                    "text": "<span class=\"comment-copy\">I've found the following URL on web archive: <a href=\"https://web.archive.org/web/20041022135603/http://www.csrsupport.com/index.php?path=91\" rel=\"nofollow noreferrer\">web.archive.org/web/20041022135603/http://www.csrsupport.com/…</a> that looks like it has more recent BlueCore DFU specs however it requires a CSR login. I'm not sure if it'd even work if someone had a valid email/password but it'd be worth a shot.</span>",
                    "time": null
                },
                {
                    "user": "Johannes Mittendorfer",
                    "text": "<span class=\"comment-copy\">I tried but wasn't successful. Looks like it is not available any more...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've found this project <a href=\"https://github.com/lorf/csr-spi-ftdi\" rel=\"nofollow noreferrer\">https://github.com/lorf/csr-spi-ftdi</a>, along with info:</p>\n<blockquote>\n<p>BlueCore 2 chips (such as BC212015) are not supported in BlueSuite 2.4 and above</p>\n</blockquote>\n<p>what means they are intentionally try to enforce developers to use more high level tools .\nAbove github tool should help you identify exact chip without disassembling physical device. I've checked the one above and found here: <a href=\"https://www.chipfind.net/datasheet/csr/bc212015.htm\" rel=\"nofollow noreferrer\">https://www.chipfind.net/datasheet/csr/bc212015.htm</a> The datasheet gives some meaningful info - it describes Bluecore2 virtual machine, and also mentions CSR’s BlueLab, Casira and MicroSira development kits which may be good direction for documentation search:</p>\n<blockquote>\n<p>This version of the stack firmware requires no host processor. All\nsoftware layers, including application software, run on the internal\nRISC processor in a protected user software execution environment\nknown as a Virtual Machine (VM).</p>\n</blockquote>\n<blockquote>\n<p>The user may write custom application\ncode to run on the BlueCore VM using BlueLabTM software development\nkit (SDK) supplied with the BlueLab and Casira development kits,\navailable separately from CSR. This code will then execute alongside\nthe main BlueCore firmware. The user is able to make calls to the\nBlueCore firmware for various operations.</p>\n</blockquote>\n<blockquote>\n<p>The execution environment is\nstructured so the user application does not adversely affect the main\nsoftware routines, thus ensuring that the Bluetooth stack software\ncomponent does not need re-qualification when the application is\nchanged. Using the VM and the BlueLab SDK the user is able to develop\napplications such as a cordless headset or other profiles without the\nrequirement of a host controller. BlueLab is supplied with example\ncode including a full implementation of the headset profile.</p>\n</blockquote>\n<p>It looks like it will be hard do reverse code without understanding the architecture first:</p>\n<blockquote>\n<p>Virtual Machine (VM). The firmware provides the VM environment in which to run &gt;application-specific\ncode. Although the VM is mainly used with BlueLab and “RFCOMM builds” &gt;&gt;(alternative firmware builds\nproviding L2CAP, SDP and RFCOMM), the VM can be used with this build to perform &gt;simple tasks such\nas flashing LED’s via the chip’s PIO port.</p>\n</blockquote>\n<p>Also it mentions VM Application software is stored on external flash so depending what you are looking for that may be worth checking.</p>\n</div>",
            "votes": "1",
            "user": "nusch",
            "time": "Dec 10, 2020 at 23:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've written an <em>010 Editor</em> parser for the CSR DFU file format, available <a href=\"https://github.com/ramikg/csr-dfu-parser\" rel=\"nofollow noreferrer\">here</a>. Hopefully it will be of help.</p>\n</div>",
            "votes": "1",
            "user": "ramikg",
            "time": "Aug 11, 2023 at 10:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}