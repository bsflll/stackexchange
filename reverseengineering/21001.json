{
    "title": "Disassembling Hexagon - Corrupted ELF",
    "link": "https://reverseengineering.stackexchange.com/questions/21001/disassembling-hexagon-corrupted-elf",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I downloaded and unpacked the modem from Google source, after that\nI used laginimaineb's script to unify all modem binary data. However, when loading this binary to IDA, I get an error says:</p>\n<blockquote>\n<pre><code>Binary data is incorrect, maximum possible value is xxxxxx\n</code></pre>\n</blockquote>\n<p>I tried to do the same thing by pulling this modem.b* from the device itself. The same behavior.</p>\n<p>I opened up this binary into 010 Editor and check the section size, and it seems like the sections have a size bigger than the binary size.</p>\n<p>How could I fix the binary? Assuming that the first sections are valid, could I use that information to calculate the further section sizes?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "655",
    "tags": [
        "ida",
        "firmware",
        "elf",
        "file-format"
    ],
    "user": "loldev",
    "time": "Dec 17, 2021 at 18:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I assume you used  <a href=\"https://github.com/laginimaineb/unify_trustlet\" rel=\"nofollow noreferrer\">this script</a> during your research. Please note the script is Little Endian architecture oriented. Can you double check endianness in your examples? </p>\n</div>",
            "votes": "1",
            "user": "Igor Matyuh",
            "time": "Apr 1, 2019 at 7:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}