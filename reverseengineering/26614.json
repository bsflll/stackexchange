{
    "title": "C++ structure containing a RTTI getter function?",
    "link": "https://reverseengineering.stackexchange.com/questions/26614/c-structure-containing-a-rtti-getter-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on reversing a C++ application and I've come across a structure that contains a getter function that returns <code>TypeDescriptor*</code>, I've read some articles on RTTI and reversing C++ but can't find a structure that matches what I'm seeing.</p>\n<p>It <em>seems</em> to be a compiler generated structure because of the <code>TypeDescriptor</code> getter? I'm hoping someone can point me in the right direction. There's multiple of these structures, they are in mostly contiguous but not completely as far as I can see.</p>\n<p>Pseudo code for the struct looks like:</p>\n<pre><code>// These are all function pointers\nclass SomeClazz\n{\n    // func1/func2 are pointers to the same function. It looks like a constructor.\n    void* func1(void* param1, void** param2);\n    void* func2(void* param1, void** param2);\n    // This function differs depending on the class. I believe this to be a implementation of a virtual function maybe?\n    virtual void handler();\n    // Returns a pointer to a RTTI TypeDescriptor depending on the class\n    TypeDescriptor* get_type_descriptor();\n    void get_something();\n} \n</code></pre>\n<p>Here's code in the <code>func1/2</code> functions in case there's a hint of what it is:</p>\n<pre><code>\nundefined ** FUN_00125860(longlong param_1,undefined **param_2)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  \n  *param_2 = (undefined *)&amp;Vftable_maybe_00589ef0;\n  uVar1 = *(undefined4 *)(param_1 + 0xc);\n  uVar2 = *(undefined4 *)(param_1 + 0x10);\n  uVar3 = *(undefined4 *)(param_1 + 0x14);\n  *(undefined4 *)(param_2 + 1) = *(undefined4 *)(param_1 + 8);\n  *(undefined4 *)((longlong)param_2 + 0xc) = uVar1;\n  *(undefined4 *)(param_2 + 2) = uVar2;\n  *(undefined4 *)((longlong)param_2 + 0x14) = uVar3;\n  return param_2;\n}\n</code></pre>\n<p>Here's <code>get_type_descriptor</code>:</p>\n<pre><code>TypeDescriptor * class::get_type_descriptor(void)\n\n{\n  return &amp;class_&lt;lambda_88a0d3301c644a20c1df3ad0c52a86e4&gt;_RTTI_Type_Descriptor;\n}\n\n////////////\nLEA RAX, [class_&lt;lambda_88a0d3301c644a20c1df3ad0c52 ...]\nRET\n</code></pre>\n<p>Here's <code>get_something</code>, not sure what the purpose is or what it's doing:</p>\n<pre><code>LEA RAX, [RCX+0x8]\nRET\n</code></pre>\n<p>Any help/suggestions would be great. Thanks.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "428",
    "tags": [
        "binary-analysis",
        "c++",
        "ghidra",
        "struct"
    ],
    "user": "user3238415",
    "time": "Dec 23, 2020 at 10:57",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">I'm pretty sure that's a <code>shared_ptr</code> with a custom deleter. Grep for <code>typeid</code> in MSVC <code>&lt;memory&gt;</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IIRC the <a href=\"https://en.cppreference.com/w/cpp/language/typeid\" rel=\"nofollow noreferrer\"><code>typeid</code> operator</a> returns a pointer to a type info instance.</p>\n<p>Overall the code looks like a <a href=\"https://en.cppreference.com/w/cpp/language/lambda\" rel=\"nofollow noreferrer\">lambda expression</a> implementation; the “constructor” captures the context so that the “handler” (lambda body) can access the variables it needs from the outer scope.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Dec 23, 2020 at 15:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3238415",
                    "text": "<span class=\"comment-copy\">Thanks. Maybe impossible from what I've provided but any chance you could provide some pseudo code of how you imagine it might have looked? I haven't had much luck trying to recreate this in code.  Also thank you for your amazing RTTI article.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a lambda expression. When the lambda expression has captures it is compiled into a implementation defined structure. In my case the lambda has captures, using MSVC the structure was <a href=\"https://github.com/microsoft/STL/blob/1e8b8d4eef4b2dddeb7533c5231c876383bd0ea6/stl/inc/functional#L775-L801\" rel=\"nofollow noreferrer\"><code>_Func_Base</code></a> defined as:</p>\n<pre><code>#pragma warning(push)\n#pragma warning(disable : 4265) // class has virtual functions, but destructor is not virtual (/Wall)\n// CLASS TEMPLATE _Func_base\ntemplate &lt;class _Rx, class... _Types&gt;\nclass __declspec(novtable) _Func_base { // abstract base for implementation types\npublic:\n    virtual _Func_base* _Copy(void*) const                 = 0;\n    virtual _Func_base* _Move(void*) noexcept              = 0;\n    virtual _Rx _Do_call(_Types&amp;&amp;...)                      = 0;\n    virtual const type_info&amp; _Target_type() const noexcept = 0;\n    virtual void _Delete_this(bool) noexcept               = 0;\n\n#if _HAS_STATIC_RTTI\n    const void* _Target(const type_info&amp; _Info) const noexcept {\n        return _Target_type() == _Info ? _Get() : nullptr;\n    }\n#endif // _HAS_STATIC_RTTI\n\n    _Func_base()                  = default;\n    _Func_base(const _Func_base&amp;) = delete;\n    _Func_base&amp; operator=(const _Func_base&amp;) = delete;\n    // dtor non-virtual due to _Delete_this()\n\nprivate:\n    virtual const void* _Get() const noexcept = 0;\n};\n#pragma warning(pop)\n</code></pre>\n</div>",
            "votes": "0",
            "user": "user3238415",
            "time": "Dec 26, 2020 at 5:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}