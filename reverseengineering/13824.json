{
    "title": "How would one find test cases for a self-implemented value set analysis (VSA)?",
    "link": "https://reverseengineering.stackexchange.com/questions/13824/how-would-one-find-test-cases-for-a-self-implemented-value-set-analysis-vsa",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I read a <a href=\"http://edmcman.bitbucket.org/blog/2012/09/07/undocumented-features-of-vsa/\" rel=\"nofollow\">blog post</a> about value set analysis (VSA). For VSA, see e.g. <a href=\"https://research.cs.wisc.edu/wpis/papers/wysinwyx.final.pdf\" rel=\"nofollow\">here</a>. </p>\n<p>The blog author writes</p>\n<blockquote>\n<p>I’ve been trying to get to the point where the example in\n  Balakrishnan’s dissertation works. I chose this example because I\n  don’t know of any others!</p>\n</blockquote>\n<p>I was wondering how one would test a custom VSA implementation. How can one find test cases? </p>\n<p>My guess is one could run &amp; trace a simple application and record (concrete, i.e. run-time) values for some memory areas or registers. These values then should show up in the result of the corresponding memory / registers after having done the static VSA, right?</p>\n<p>For the beginning, it would be easier to have some examples. Are you aware of any examples (other than those in the official papers)?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "126",
    "tags": [
        "binary-analysis",
        "decompilation",
        "static-analysis"
    ],
    "user": "langlauf.io",
    "time": "Oct 27, 2016 at 9:40",
    "comments": [
        {
            "user": "Brendan Dolan-Gavitt",
            "text": "<span class=\"comment-copy\">As a side note, I think the blog post is wrong about why the VSA implementation is able to have more accurate bounds on eax – in the journal version of the WYSINWYX they mention that this is due to an extra affine analysis step they do, described in the PhD thesis (section \"Affine-Relation Analysis\").</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, using dynamic analysis is one way, but you can probably start with some small, self-evident edge cases, e.g.:</p>\n<pre><code>test edx, 1\njz @even\n[here, edx is odd]\neven:\n[here, edx is even]\n\ntest edx, edx\njg @greater\n[here, edx is &lt;=0]\ngreater:\n[here, edx is &gt;0]\n</code></pre>\n<p>and so on.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 27, 2016 at 17:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Very useful hint. I also did not think of creating samples in assembly.</span>",
                    "time": null
                }
            ]
        }
    ]
}