{
    "title": "Convert PIE ELF binary into No-PIE",
    "link": "https://reverseengineering.stackexchange.com/questions/22731/convert-pie-elf-binary-into-no-pie",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible changing few bytes for converting an elf binary from PIE to No-PIE (ELF)?\nI know that in the header if <code>e_type</code> is:\n - 3 then the program is PIE\n - 2 then the program is No-PIE</p>\n<p>So I tried to change that byte and in fact <code>readelf -h</code> shows me:</p>\n<pre><code>ELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x630\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          6576 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         29\n  Section header string table index: 28\n</code></pre>\n<p>Then I changed the <code>e_entry</code> from <code>0x630</code> to <code>0x400630</code>.</p>\n<p><code>readelf -h</code> output:</p>\n<pre><code>ELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x400630\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          6576 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         29\n  Section header string table index: 28\n</code></pre>\n<p>However if I try to launch the program it crashes.</p>\n<pre><code>$ strace ./elf-patched.exe \nexecve(\"./elf-patched.exe\", [\"./elf-patched.exe\"], 0x7ffe0c2b88c0 /* 66 vars */) = -1 EPERM (Operation not permitted)\n+++ killed by SIGSEGV +++\n[1]    7239 segmentation fault (core dumped)  strace ./elf-patched.exe\n</code></pre>\n<p>What other bytes should I change (If it's possible with few modifications) ?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "elf",
        "pie"
    ],
    "user": "meowmeowxw",
    "time": "Dec 13, 2019 at 12:10",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. What are you trying to achieve? And please don't repeat your question. I am looking for the reason you want to do that conversion in the first place. With some more context it's well possible there are other routes available to achieve your <i>actual</i> goal.</span>",
            "time": null
        },
        {
            "user": "meowmeowxw",
            "text": "<span class=\"comment-copy\">My actual goal is to pwn the binary with a ROP chain, however I need the binary to be No-PIE to make the ROP chain works.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">That is, you need \"deterministic\" addresses that you can hardcode?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is not possible with few modifications. </p>\n<p><a href=\"https://www2.cs.arizona.edu/~debray/Publications/disasm.pdf\" rel=\"nofollow noreferrer\">https://www2.cs.arizona.edu/~debray/Publications/disasm.pdf</a></p>\n<blockquote>\n<p><strong>2.2    Position-Independent Code</strong></p>\n<p>Many compilers can be instructed to emit code that does not rely on\n  being bound to any particular position in the program’s address space.\n  These code sequences are often referred to as <em>position-independent\n  code</em>(PIC). In particular, PIC sequences do not contain any relocatable\n  addresses embedded in the instructions. This property enables the code\n  to work regardless of its memory location at runtime.  Furthermore,\n  PIC does not need to be patched by the loader, enabling it to be mapped\n  as read-only data—which is useful for shared code such as dynamically\n  linked libraries [14]. When a compiler is emitting\n  position-independent code  it typically creates jump tables that are\n  also position-independent.  These tables are usually embedded in the\n  text segment of the executable and consist of a sequence of offsets\n  rather than virtual addresses.  A jump that uses the offset table\n  first loads a nearby address,<sup>1</sup> then uses this to index into the table\n  and retrieve an offset.  The offset is added to the address that was\n  previously loaded and then used in an indirect jump to reach the\n  desired destination. The problems posed by position-independent jump\n  tables are three-fold: <em>(i)</em> the offset tables, which are really no\n  different than data, appear in the instruction stream; <em>(ii)</em> the code\n  sequences that perform the indirect jumps are often complicated and\n  may not adhere to a single pattern that is easily recognizable; and\n  <em>(iii)</em> it is entirely possible that an offset table does not contain relocation entries.  Taken together,these properties make the task of\n  disassembling PIC sequences involving jump tables more difficult than\n  standard code.</p>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "Dec 14, 2019 at 12:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}