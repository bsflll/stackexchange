{
    "title": "Cannot locate a variable on the stack",
    "link": "https://reverseengineering.stackexchange.com/questions/14508/cannot-locate-a-variable-on-the-stack",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am unable to locate a variable on the stack. I'm using Fedora 25 x64 but with a 32 bit program, btw.</p>\n<p>C program:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nchar* text1 = \"AAAAAAAAAAAAA\";\nint target;\nchar* text2 = \"BBBBBBBBBBBBB\";\nvoid vuln(char *string)\n{\n\n  printf(string);\n\n  if(target) {\n      printf(\"you have modified the target :)\\n\");\n  }\n}\n\nint main(int argc, char **argv)\n{\n  vuln(argv[1]);\n  printf(\"Program name: %s\", argv[0]);\n}\n</code></pre>\n<p>/*After stepping into main and doing x/500wx $esp to examine the stack in gdb, here's a piece:</p>\n<pre><code>0xffffcc00: 0x00000000  0x00000000  0x00000000  0xf7fe0ca0\n0xffffcc10: 0xf7df12af  0xf7fd765f  0x00000000  0x00000000\n0xffffcc20: 0x00000000  0x00000000  0x00000000  0x0d696910\n0xffffcc30: 0x00000000  0x00000000  0xf7fe0b79  0xf7de1ef0\n0xffffcc40: 0x00000961  0xf7fd13d8  0x7c96f087  0xf7fe1399\n0xffffcc50: 0x00000001  0x00000004  0xf7deb534  0x00000961\n0xffffcc60: 0xf7deb604  0xf7fd13d8  0xffffccbc  0xffffccb8\n0xffffcc70: 0x00000003  0x00000000  0xf7ffcfcc  0xf7fd764c\n0xffffcc80: 0xf7deb534  0x7c96f087  0xf7deb604  0xf7de1f12\n0xffffcc90: 0x03e4b784  0xffffccb8  0xffffcd48  0x00000961\n0xffffcca0: 0x00000000  0x00000000  0x00000000  0x00000000\n0xffffccb0: 0x00000000  0x00000000  0x00000000  0x00000000\n(gdb) print &amp;text1\n$2 = (char **) 0x804a01c &lt;text1&gt;\n(gdb) print text1\n$3 = 0x8048544 'A' &lt;repeats 13 times&gt;\n(gdb) \n</code></pre>\n<p>As you can see, my text1 variable's address is in the <code>0x804</code> area, whereas my stack is in <code>0xffffcc</code> area which is why I am completely lost. You can probably see what I'm trying to do, but I'm trying to locate 0x414141's followed by the target, followed by 0x42424242's but there are no 41s or 42s anywhere in the stack area near esp. I am currently educating myself on format string vulnerabilities, but at this point, I can't even locate the variables on the stack. Is there something I'm missing? Thanks.</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "513",
    "tags": [
        "strings",
        "vulnerability-analysis"
    ],
    "user": "the_endian",
    "time": "Jan 27, 2017 at 5:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reason the you are unable to locate <code>text1</code> on the program runtime stack is that during runtime <code>text1</code> is in the <code>data</code> segment of the process running in virtual memory, not the stack. In order for a reference to <code>text1</code> to be written to the stack <code>text1</code> must be passed as an argument to a function which is called.</p>\n<p>When a function is called and a new stack frame is created on the runtime stack for that function, memory is allocated on the stack for any local variables declared in that function as well.  However, <code>text1</code>, <code>text2</code> and <code>target</code> are global variables declared outside of any function. A direct consequence of this is that memory will not be allocated for  <code>text1</code>, <code>text2</code> and <code>target</code> on the stack. Instead, <code>text1</code> and <code>text2</code> will be in the process's <code>data</code> segment and <code>target</code> will be in the <code>bss</code> segment. In order to understand why, familiarity with the ELF and the <a href=\"https://refspecs.linuxbase.org/elf/gabi41.pdf\" rel=\"nofollow noreferrer\">System V Application Binary Interface</a> is essential.</p>\n<h3>x86 Linux Process Layout in Virtual Memory</h3>\n<p>For some context, here is a diagram of a process's layout in virtual memory on an x86 Linux system from Gustavo Duarte's article titled <a href=\"http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/\" rel=\"nofollow noreferrer\">\"Anatomy of a Program in Memory\"</a>:</p>\n<p><a href=\"https://i.sstatic.net/2qAhx.png\" rel=\"nofollow noreferrer\"><img alt=\"Process Layout in Virtual Memory\" src=\"https://i.sstatic.net/2qAhx.png\"/></a></p>\n<p>A look at this diagram will help clarify the significance of the memory addresses you are seeing. On an x86 Linux system, the stack is high in virtual memory and grows downward. This is why when the stack is examined one sees memory addresses such as <code>0xffffcc10</code> and <code>0xffffccb0</code>. The location in virtual memory of global variables <code>text1</code>, <code>text2</code> and <code>target</code> will be more proximate to the program entry point since the <code>data</code> and <code>bss</code> segments are adjacent to the <code>text</code> segment, which is low in memory. In light of this, a  memory address of <code>0x804a01c</code> for <code>text1</code> makes sense.</p>\n<h3>ELF and the System V ABI</h3>\n<p>From Section 4 (Object Files) of the ABI:</p>\n<blockquote>\n<p>An <em>executable file</em> holds a program suitable for execution; the file specifies how the function <code>exec</code> creates a program's process image.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Created by an assembler and link editor, object files are binary representations of programs intended to execute directly on a processor.</p>\n</blockquote>\n<p>Once the program is compiled, assembled and linked, it is essentially a description of what it will look like as a process. This means that an executable binary can be statically analyzed to get an idea of how things will look when the program is running. When the binary constructed from the source code provided above is analyzed it is observed that the values <code>text1</code> and <code>text2</code> are in the <code>.rodata</code> section:</p>\n<pre><code>$ readelf -x .rodata &lt;ELF BINARY NAME&gt;\n\nHex dump of section '.rodata':\n  0x08048538 03000000 01000200 41414141 41414141 ........AAAAAAAA\n  0x08048548 41414141 41004242 42424242 42424242 AAAAA.BBBBBBBBBB\n  0x08048558 42424200 796f7520 68617665 206d6f64 BBB.you have mod\n  0x08048568 69666965 64207468 65207461 72676574 ified the target\n  0x08048578 203a2900 50726f67 72616d20 6e616d65  :).Program name\n  0x08048588 3a202573 00                         : %s.\n</code></pre>\n<p>According to the ABI (4-19), the <code>.rodata</code> section holds read-only data that typically contributes to a non-writable segment in the process image. Examples of non-writable process image segments are the <code>text</code> and <code>data</code> segments mentioned above. The implication of this is that <code>text1</code> and <code>text2</code> will be located near where the program instructions are, namely the <code>text</code> segment, when the program is loaded into memory. The instruction memory addresses will look much more similar to the memory addresses of <code>text1</code> and <code>text2</code> than memory addresses on the stack.</p>\n<p>The <code>target</code> variable is an uninitialized global variable, so its data will be held in the <code>bss</code> segment.</p>\n<h3>Arguments to Functions are Written to the Stack</h3>\n<p>If you want pointers to these variables to appear on the runtime stack they must be passed as arguments to a function that is called at some point throughout the course of process execution, as a function's arguments are typically written to the stack in the caller's argument build area, as seen in the diagram below. </p>\n<p>Stack layout with multiple frames (from <a href=\"http://csapp.cs.cmu.edu/2e/ics2/asm/frame.ppt\" rel=\"nofollow noreferrer\">CSAPP</a>):</p>\n<p><a href=\"https://i.sstatic.net/Lsjhw.jpg\" rel=\"nofollow noreferrer\"><img alt=\"http://csapp.cs.cmu.edu/2e/ics2/asm/frame.ppt\" src=\"https://i.sstatic.net/Lsjhw.jpg\"/></a></p>\n<p>For example, instead of passing <code>argv[1]</code> as an argument to the <code>vuln</code> function, the global variable <code>text1</code> can be passed instead. A pointer to <code>text1</code> would then be saved on the stack prior to <code>vuln</code> being called.</p>\n<p>Alternatively, instead of hardcoding 'A' as a value for a global variable, you can pass an arbitrary number of 'A's (or any other ASCII characters) as an argument on the command line when executing your program in the shell. This will result in whatever values you pass being stored in <code>argv[1]</code> which is the argument to <code>vuln</code>.</p>\n<p>It should be noted that due to their global scope, <code>text1</code>, <code>text2</code> and <code>data</code> can be referenced in any function without being passed as an argument, but in the context of format string vulnerabilities and <code>printf</code>\nthat is not particularly useful to know.</p>\n<h3>For More Information</h3>\n<p>For more information on how <code>printf</code> behaves in a x86 Linux environment, one can take a look at the  answer to the following question on stackoverflow in which a user is calling <code>printf</code> in a non-standard fashion: <a href=\"https://stackoverflow.com/questions/41656201/elf32-binary-little-endian-or-not/41710748#41710748\">\"ELF32 binary, little endian or not?\"</a></p>\n<p>Section 3.7 (titled \"Procedures\") in \"Computer Systems: A Programmer's Perspective\" covers function calls and the stack on an assembly level and has several helpful diagrams.</p>\n</div>",
            "votes": "7",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Where in main are you when you dump the stack? Those variables are global initialised variables, they won't be on the stack until they are pushed there before the function call. Until then they will be in the bss or data section of your program.\nPrint the disassembly of main and you should see a reference to your string being pushed onto the stack just before the call to your function.\nThis could be a push op or a mov op btw, depending what your compiler settings are.</p>\n</div>",
            "votes": "-1",
            "user": "Unlogic",
            "time": "Jan 27, 2017 at 7:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}