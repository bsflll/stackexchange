{
    "title": "Secure resources from being extracted?",
    "link": "https://reverseengineering.stackexchange.com/questions/2560/secure-resources-from-being-extracted",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a jar file with a resources folder, and I have converted it to EXE using <code>Launch4J</code>.</p>\n<p>How can I protect my resources from being extracted using <code>winzip</code>/<code>winrar</code> ?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "528",
    "tags": [
        "executable",
        "java",
        "pe-resources"
    ],
    "user": "geek_guy",
    "time": "Aug 5, 2013 at 8:38",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">You don't. You can add some trivial obfuscations to discourage script kiddies, but you aren't going to stop anyone determined.</span>",
            "time": null
        },
        {
            "user": "geek_guy",
            "text": "<span class=\"comment-copy\">but obfuscations will not modify anything in the resources.Right now one can just right click and extract all the resources. I just to want to prevent that.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The only real protection is to not deliver the resources!</p>\n<p>As long as you give the resources out of your hand they can be extracted. It may be difficult but it is possible to extract them.</p>\n<p>The most secure way would be to store the resources on a server and access them in a remote way. But also then if the resource is on the client computer it is possible to extract them from memory.</p>\n</div>",
            "votes": "7",
            "user": "Uwe Plonus",
            "time": "Aug 2, 2013 at 6:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The only real option you have here is to store the resources as encrypted data and decrypt them prior to loading in java. You could store the encrypted data as a byte array, and use some kind of xor encryption.</p>\n<p>This is NOT secure, and you should NOT store any important keys, passwords, or credentials in any resource files.</p>\n</div>",
            "votes": "2",
            "user": "Ditmar Wendt",
            "time": "Aug 1, 2013 at 17:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know few ways to prevent resources extraction/reading:</p>\n<ol>\n<li><p>Encrypt your resources and dynamically decrypt them in runtime without writing temp files.</p>\n</li>\n<li><p>Load the resources from the Internet (require Internet connection).</p>\n</li>\n<li><p>Corrupt the CRC32 of the resources files, this will make <code>WinZip</code> or <code>WinRAR</code> unable to extract your resources.</p>\n</li>\n<li><p>Set <code>\\u0000</code> (<code>\\x0</code>) as a file name prefix. The NUL terminator will  make WinZip or WinRAR unable to extract files (and also read file names).</p>\n</li>\n</ol>\n<p><strong>However, none of these increases security.</strong> Resources will be able to get decrypted or extracted, these are only \"simple tricks\" to prevent standard reading / extraction. But people with enough knowledge will be able to bypass them and fix the files.</p>\n</div>",
            "votes": "2",
            "user": "galoget",
            "time": "Oct 29, 2021 at 7:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}