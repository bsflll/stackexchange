{
    "title": "In IDA, why are the addresses of instructions different from the corresponding locations in the original file? How do I find the file locations?",
    "link": "https://reverseengineering.stackexchange.com/questions/23177/in-ida-why-are-the-addresses-of-instructions-different-from-the-corresponding-l",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I noticed that if I found an instruction in IDA, the address shown to its left would be wildly different from where it appears in the actual file. I wanted to know why this was the case and how I can find the offset in the file that each instruction corresponds to. Thanks!</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "pe",
        "address"
    ],
    "user": "kansas_bulldog382",
    "time": "Feb 3, 2020 at 0:27",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Did you expect that a file is loaded <i>unmodified</i> into memory? Starting at address #0? It has not been that way since ... well, even though mid-1980's COM files under DOS <i>were</i> loaded and executed unmodified, they <i>still</i> could not load at address #0 -- it would overwrite the system!</span>",
            "time": null
        },
        {
            "user": "kansas_bulldog382",
            "text": "<span class=\"comment-copy\">@usr2564301 Well... I honestly didn't expect the disassembler would handle relocating the code, but it makes sense that it does. I'm fairly new to RE so forgive me for my naivety. I would still like to find out what parts of the static file the disassembly corresponds to. Is there a way to do that in IDA?</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">IDA by default tries to load a PE at the preferred load address as supplied in the PE header. But even if you force it to relocate to <code>0</code> (I wonder if it allows that), then the code would still not correspond to the file. Whole sections may not load at all, be discarded, or moved to another address.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The file offset of the current location is displayed in the disassembly (IDA View) status bar together with the address. </p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Feb 4, 2020 at 19:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lewis Kelsey",
                    "text": "<span class=\"comment-copy\">When opening a binary, does IDA load it to the same place within the Ida process and then just show you the address that you've selected to load the segments as if it's at that address. I cannot see any allocation within ida64.exe at the address that IDA claims the binary is at</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA is displaying the Relative Virtual Address based on the base address of the binary (or on that you supply before loading the binary). The reason this is different from the actual address is because it is mapped into memory. The Relative Virtual Address (RVA) is BaseAddress + Offset, if you find the offset address and add it to your at rest binary base address you will find the same point within the binary. </p>\n</div>",
            "votes": "1",
            "user": "TJ Nel",
            "time": "Feb 4, 2020 at 12:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Igor gave the answer for Ida. A more general possibility, very simple and working everywhere, would be just to write down a sequence of immutable bytes from the disassembler (i.e. avoiding changing addresses), then load the file into a Hex Editor and let it search for that sequence. If it is long enough there will mostly be only a single hit within the file.</p>\n</div>",
            "votes": "0",
            "user": "josh",
            "time": "Feb 6, 2020 at 23:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}