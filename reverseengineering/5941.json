{
    "title": "GUI for transforming Java Bytecode based on decompiled source?",
    "link": "https://reverseengineering.stackexchange.com/questions/5941/gui-for-transforming-java-bytecode-based-on-decompiled-source",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Okay. So I've just come up with the most amazing program for java developers and reverse-engineerers and I was wondering if something like the following program already exists:</p>\n<p>What I'm thinking of is like a middle-ground between something like <a href=\"http://dirty-joe.com/\">DirtyJOE</a> and a Java Decompiler.</p>\n<p>I already know that:</p>\n<ul>\n<li>It's possible to inject and manipulate code in a compiled class using <a href=\"http://asm.ow2.org\">ASM</a></li>\n<li>You can decompile an unobfuscated jar into a readable and understandable state</li>\n<li>It's practical to explore and edit a class using a GUI because DirtyJOE can do that amazingly well</li>\n</ul>\n<p>So is there some sort of program that can show me a decompiled class and allow me to manipulate/inject into different parts of it individually?</p>\n<p>For example, I would like replace one method with my own or change a field's access within a compiled class file.</p>\n<p>So basically I'm looking for a frontend for ASM built with an interface based on decompiled source code.</p>\n<p>Does this exist? If not, what's the closest thing I'm going to get to it?</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "6k",
    "tags": [
        "disassembly",
        "decompilation",
        "java",
        "byte-code",
        "jar"
    ],
    "user": "Taconut",
    "time": "Jul 26, 2014 at 18:15",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">Have you tried IDA Pro?</span>",
            "time": null
        },
        {
            "user": "Taconut",
            "text": "<span class=\"comment-copy\">Can IDA actually edit stuff, though? I've never really used IDA that much.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can try using javasnoop (<a href=\"https://code.google.com/p/javasnoop/\" rel=\"nofollow\">https://code.google.com/p/javasnoop/</a>) to accomplish something similar.</p>\n<p>Here's a tutorial for using it -</p>\n<p><a href=\"http://resources.infosecinstitute.com/hacking-java-applications-using-javasnoop/\" rel=\"nofollow\">http://resources.infosecinstitute.com/hacking-java-applications-using-javasnoop/</a></p>\n</div>",
            "votes": "4",
            "user": "REnoob",
            "time": "Jul 27, 2014 at 13:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Taconut",
                    "text": "<span class=\"comment-copy\">After looking at a video showcasing JavaSnoop, I have now decided that it is by far the coolest program in existence. However, I can't seem to get the \"Attach to existing process\" working. Thinking it was my JRE, I tried 32xJRE7, 64xJRE7, 64xJDK7, and 64xJDK6 (all of which didn't let me attach onto any of the applets or programs I had running in the background). Currently, I'm using reJ (from Extreme Coders' answer), but this program seems like it would benefit me much more.</span>",
                    "time": null
                },
                {
                    "user": "REnoob",
                    "text": "<span class=\"comment-copy\">Have you had a look in the Readme (<a href=\"https://javasnoop.googlecode.com/svn-history/r32/trunk/resources/README.txt\" rel=\"nofollow noreferrer\">javasnoop.googlecode.com/svn-history/r32/trunk/resources/â€¦</a>) for Javasnoop ? It lists a number of steps required to setup Javasnoop correctly. Other than those steps, maybe you could try running it with Admin privileges ?</span>",
                    "time": null
                },
                {
                    "user": "Taconut",
                    "text": "<span class=\"comment-copy\">I had to specifically run the bat file from an Administrator command prompt. I was trying to right-click on the bat file and select \"Run as Administrator.\" That didn't work.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some tools you can use. However note that <em>none</em> of them has the ability to recompile classes, i.e you cannot decompile a single class to source, modify it, and then recompile back. It may be possible using <a href=\"http://docs.oracle.com/javase/tutorial/reflect/\">Reflection API</a> but then you need to do a lot of modification on the decompiled source itself. Other ways may be to decompile the entire bunch of classes and then recompile all when done.</p>\n<blockquote>\n<p><strong><a href=\"http://classeditor.sourceforge.net/\">Class Editor</a></strong></p>\n<p>This is a tool to open Java class file binaries, view their internal\n  structure, modify portions of it if required and save the class file\n  back. It also generates readable reports similar to the javap utility.\n  Easy to use Java Swing GUI. The user interface tries to display as\n  much detail as possible and tries to present a structure as close as\n  the actual Java class file structure. At the same time ease of use and\n  class file consistency while doing modifications is also stressed. For\n  example, when a method is deleted, the associated constant pool entry\n  will also be deleted if it is no longer referenced. In built verifier\n  checks changes before saving the file. This tool has been used by\n  people learning Java class file internals. This tool has also been\n  used to do quick modifications in class files when the source code is\n  not available.</p>\n</blockquote>\n<p><p></p>\n<blockquote>\n<p><strong><a href=\"http://set.ee/jbe/\">JBE - Java Bytecode Editor</a></strong></p>\n<p>JBE is a bytecode editor suitable for viewing and modifying java class\n  files. It is built on top of the open-source jclasslib bytecode viewer\n  by ej-technologies. For verification and exporting the class files,\n  JBE uses the the Bytecode Engineering Library by Apache's Jakarta\n  project.</p>\n</blockquote>\n<p><p></p>\n<blockquote>\n<p><strong><a href=\"http://bcel.sourceforge.net/cck.html\">Class Construction Kit</a></strong></p>\n<p>The Class Construction Kit is a tool for the visual creation or\n  modification of Java class files. It is implemented using BCEL and\n  Swing.</p>\n</blockquote>\n<p><p></p>\n<blockquote>\n<p><strong><a href=\"http://rejava.sourceforge.net/\">reJ</a></strong> </p>\n<p>The reJ project aims to allow improved visibility into Java class files, whether they were created compiling from Java\n  sources, another language or by any other kind of tool. Basically\n  anything that will run in a Java Virtual Machine.\n  reJ is a library and a graphical tool for inspection (viewing,\n  searching and comparing) and manipulation (modification, obfuscation,\n  refactoring of methods, fields, attributes and code) of classfiles for\n  the Java platform.</p>\n</blockquote>\n<p><p></p>\n<blockquote>\n<p><strong><a href=\"https://forum.tuts4you.com/topic/34344-bceleditor-10/\">BcelEditor</a></strong></p>\n<p>BcelEditor is a tool for the visual modification of Java class files.\n  It is implemented using BCEL. \n  <br/><sub>Note: You need to register on the site to get access</sub></p>\n</blockquote>\n<p><p></p>\n<blockquote>\n<p><strong><a href=\"https://forum.tuts4you.com/topic/33703-methodbodyeditor-for-java/\">MethodBodyEditor for Java</a></strong></p>\n<p>A Java class editor <br/><sub>Note: You need to register on the site to\n  get access</sub></p>\n</blockquote>\n<p>Other than this, some other generic java tools are available on <a href=\"https://forum.tuts4you.com/\">tuts4you</a></p>\n</p></p></p></p></p></div>",
            "votes": "6",
            "user": "0xec",
            "time": "Jul 27, 2014 at 3:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Taconut",
                    "text": "<span class=\"comment-copy\">Man! ReJ is awesome! I guess this is the best it gets for editing jars. I might create a tool, but I'd need so much reflection... Anyway, thank you. I'll definitely use these tools for the foreseeable future.</span>",
                    "time": null
                }
            ]
        }
    ]
}