{
    "title": "Competitive Types",
    "link": "https://reverseengineering.stackexchange.com/questions/6261/competitive-types",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following lines discovered in a piece of code (using IDA PRO) :</p>\n<pre><code> ...\n ...\n push 44h\n pop edi\n push edi        ; size_t\n xor esi, esi\n lea eax, [ebp+StartupInfo]\n push esi        ; int \n push eax        ; void *\n call _memset\n ...\n ...\n</code></pre>\n<p>When I saw the line <strong>lea eax, [ebp+StartupInfo]</strong> I thought, okay eax is a pointer to the structure STARTUPINFO. With int esi = 0 or NULL (see the line <strong>xor esi, esi</strong>) and with size_t edi = 44h and by calling memset, they must fill the first 44 bytes of STARTUPINFO (that would be the elements cb, lpReserved,....,wShowWindow).</p>\n<p>But the line \n     push eax        ; void *</p>\n<p>irritates me. How can eax has the type Startupinfo and void at the same time? </p>\n<p>After that, I found out that the first parameter of memset()-function must have the type void. And so, the question mark in my mind is now bigger...</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "111",
    "tags": [
        "assembly",
        "struct"
    ],
    "user": "user3097712",
    "time": "Sep 19, 2014 at 16:58",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">its the memset declaration, parameter is a size_to_memset (size_t), value to fill with (int), memory address (void*) and the void*, StartupInfo etc are all just high level concepts.. at the end of the day the chip doesnt care what it is, its just a number..</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA knows that the prototype for the <code>_memset</code> function is <code>_memset(void *, int, size_t)</code>, so it's showing you that the value of <code>eax</code> in <code>push eax</code> is for the <code>void *</code> parameter.</p>\n<p>However, later on in this function, a pointer to the <code>StartupInfo</code> structure is likely passed to <code>CreateProcess</code>, which is why IDA named it as such.</p>\n<blockquote>\n<p>How can eax has the type Startupinfo and void at the same time?</p>\n</blockquote>\n<p><code>eax</code> is just a register that holds a value, which in your disassembly above is the address of the <code>StartupInfo</code> structure. Types are high-level concepts, so when handled by <code>_memset</code>, the value of <code>eax</code> is interpreted as a <code>void *</code>, and when it's handled by <code>CreateProcess</code>, it's interpreted as a pointer to a <code>STARTUPINFO</code> structure.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Sep 19, 2014 at 17:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for your answer. The part \" the value of eax is interpreted as a void *, and when it's handled by CreateProcess, it's interpreted as a pointer to a STARTUPINFO structure.\" was completely new for me. Thx!</span>",
                    "time": null
                }
            ]
        }
    ]
}