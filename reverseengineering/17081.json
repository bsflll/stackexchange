{
    "title": "what means ollydbg EIP location?",
    "link": "https://reverseengineering.stackexchange.com/questions/17081/what-means-ollydbg-eip-location",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i'm reading the solution of an exercise ( keygen me )\nand i found this :</p>\n<p><strong>Load OllyDbg, where EIP is located</strong> </p>\n<p>EIP = 0x51BDE1</p>\n<p>What does it means ?? and how can i find this !\nThanks</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ollydbg"
    ],
    "user": "9ys",
    "time": "Dec 31, 2017 at 16:57",
    "comments": [
        {
            "user": "Abr001am",
            "text": "<span class=\"comment-copy\">EIP is the actual address of running code. Keep doing well :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To quote from the \"X86 Assembly book\" in <a href=\"https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#Instruction_Pointer\" rel=\"noreferrer\">WikiBooks</a>:  </p>\n<blockquote>\n<p>The EIP (Extended Instruction Pointer) register contains the address\n  of the next instruction to be executed if no branching is done.</p>\n<p>EIP can only be read through the stack after a call instruction.</p>\n</blockquote>\n<p>In other words, EIP tells the computer where to go next to execute the next command and controls the flow of a program.</p>\n<p>This simple example shows the automatic addition to eip at every step (<a href=\"https://wiki.skullsecurity.org/index.php?title=Registers#eip\" rel=\"noreferrer\">source</a>):</p>\n<pre><code>eip+1      53                push    ebx\neip+4      8B 54 24 08       mov     edx, [esp+arg_0]\neip+2      31 DB             xor     ebx, ebx\neip+2      89 D3             mov     ebx, edx\neip+3      8D 42 07          lea     eax, [edx+7]\n.....\n</code></pre>\n<hr/>\n<p>To spot EIP in OllyDbg you just have to look at the right panel and you'll find where EIP is pointing to. </p>\n<p><a href=\"https://i.sstatic.net/FWuG5.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/FWuG5.png\"/></a></p>\n<p>So, in your example <code>EIP = 0x51BDE1</code>, thus the address of the next instruction  will be <code>0x51BDE1</code>. From the sentence you quoted, it seems like the writer want you to do something on this address. By default, OllyDbg would show you EIP in the disassembly window so it would be easy to spot it.</p>\n</div>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Dec 30, 2017 at 16:53",
            "is_accepted": true,
            "comments": []
        }
    ]
}