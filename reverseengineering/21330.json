{
    "title": "gdb - searching for pointers to a given memory region",
    "link": "https://reverseengineering.stackexchange.com/questions/21330/gdb-searching-for-pointers-to-a-given-memory-region",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's suppose there is a memory region that is m'mapped in memory, we need to find its address (which randomly changes, because of ASLR) by following a pointer path, basically, I'm trying to find a possibly multilevel pointer that leads to any address in that memory region, and that starts from an address in a memory region I choose, is that possible to do with gdb? I've checked out the popular gdb extensions (peda, pwndbg), but didn't find such a feature, if there is no existing implementation, any tips on how to optimize the search? Kind of like the Pointer Scanner of Cheat Engine, pointers can also have offsets (for example : main_module+3170 -&gt; 0x7fff42dc7220 ; 0x7fff42dc7220+10 -&gt; 0x7ff464213460 ; 0x7ff464213460 -&gt; address wanted).</p>\n<p>This would be useful for example in a context where we have a write-what-where condition (we can write or read anywhere in memory), and we need to defeat ASLR to find interesting memory regions (for example, JIT buffers in browsers).</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "757",
    "tags": [
        "debugging",
        "gdb",
        "exploit"
    ],
    "user": "Redouane Red",
    "time": "May 18, 2019 at 16:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know that this post is now more than 4 years old, but: We created a gdb extension that can do just that. It's available here: <a href=\"https://github.com/ChaChaNop-Slide/ptrfind\" rel=\"nofollow noreferrer\">https://github.com/ChaChaNop-Slide/ptrfind</a></p>\n</div>",
            "votes": "1",
            "user": "Tobias",
            "time": "Jan 30, 2024 at 22:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}