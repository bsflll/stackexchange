{
    "title": "Decipher hexadecimal GPS coordinates from UDP message",
    "link": "https://reverseengineering.stackexchange.com/questions/20787/decipher-hexadecimal-gps-coordinates-from-udp-message",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to get the GPS lat/long data from a UDP message.  It's captured on a radio dispatch console on a P25 radio system, if that helps.<br/>\nI captured this UDP message when I sent a simulated emergency from my device, which is supposed to send my user ID and lat/long coordinates.  On the console it shows my user ID and my lat/long so I know it's getting to the console.\nThe picture is of the UDP message captured on Wireshark.  My user ID is clearly there, so I know its my message, I'm pretty sure it contains the GPS coords, and I'm not sure how to decipher those.  (I've redacted some identifying info fro security by the way).\nThe coordinates as rendered on the console are Lat: <strong>34°2'56\"</strong> and Long: <strong>118°10'15\"</strong> West, and my user ID is 00180011.  In the picture you can see I identified what might be the most significant part of the lat/long degrees, 34 and 118, but I can't get the following bytes to match the minutes and seconds.  I've tried a couple of conversion techniques from hex to lat/long, but none of my answers are making sense.<br/>\nI converted the lat/long to decimal 34.0489 and 118.1708, but can't get any further.<br/>\nThanks for the help.         </p>\n<p><a href=\"https://i.sstatic.net/W9jIm.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/W9jIm.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "486",
    "tags": [
        "hexadecimal",
        "wireshark",
        "radio-interception",
        "gps"
    ],
    "user": "Frank",
    "time": "Mar 5, 2019 at 16:36",
    "comments": [
        {
            "user": "oh.dae.su",
            "text": "<span class=\"comment-copy\">How about repeating your procedure at different locations (the farther apart the better), observing/capturing the UDP datagram and checking what bytes change.</span>",
            "time": null
        },
        {
            "user": "Frank",
            "text": "<span class=\"comment-copy\">I've considered that.  I might try that next.  Thanks.</span>",
            "time": null
        }
    ],
    "answers_data": []
}