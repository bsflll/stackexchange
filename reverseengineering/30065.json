{
    "title": "Make Ghidra recognize thread-local variables",
    "link": "https://reverseengineering.stackexchange.com/questions/30065/make-ghidra-recognize-thread-local-variables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse an ELF binary that makes use of thread-local variables. I can't figure out how to make Ghidra display them in a friendlier way (something like declaring a struct or similar).</p>\n<p>For example, this is how a call to scanf with a FILE* stored in TLS looks like:</p>\n<pre><code>scanf(*(FILE **)(in_FS_OFFSET + 0xfffffff0),\"%d\",&amp;num);\n</code></pre>\n<p>Ideally, I would like this to look something like:</p>\n<pre><code>scanf(tls-&gt;outfile, \"%d\", &amp;num);\n</code></pre>\n<p>Is it possible to make it more user-friendly? I looked around but I haven't seen anyone complaining about this.</p>\n<p>Here's an example code:</p>\n<pre><code>#include &lt;threads.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\nthread_local int foo = 0;\n\nint main(void) {\n    assert(scanf(\"%d\", &amp;foo) == 1);\n    printf(\"foo is: %d\\n\", foo);\n    return 0;\n}\n</code></pre>\n<p><code>tls.c</code> compile with <code>CFLAGS=\"-std=c11 -Wall -Wextra -O0 -ggdb -Werror\" make tls</code></p>\n<p>And here's the decompiled code:</p>\n<p><a href=\"https://i.sstatic.net/n2vme.png\" rel=\"nofollow noreferrer\"><img alt=\"Ghidra's decompiler output for tls binary\" src=\"https://i.sstatic.net/n2vme.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "569",
    "tags": [
        "ghidra",
        "thread"
    ],
    "user": "Marco",
    "time": "Feb 22, 2022 at 23:19",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\"><a href=\"https://godbolt.org/z/Gfeda38E9\" rel=\"nofollow noreferrer\">Okay, so it <i>does</i> indeed handle it differently at <code>-O0</code></a> (and even at <code>-O3</code> for that matter) to <code>static</code> or a mere global variable. However, what's shown as <code>in_FS_OFFSET</code> presumably is <code>fs:0</code> and <a href=\"https://stackoverflow.com/a/33827186\">this answers</a> how and why -4 is needed here. Given your answer, I think however, you're conflating things a bit.</span>",
            "time": null
        },
        {
            "user": "Marco",
            "text": "<span class=\"comment-copy\">In my answer, they propose a way to support having pointers to the middle of a struct, enabling having negative offsets. If that were supported, you could retype <code>in_FS_OFFSET</code> as a pointer to the end of your struct, and then it would automatically recognize your thread_local fields.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">yes you could do that. However, just like when you see access to the TEB or PEB via one of the selectors on Windows, <i>this</i> is a particular \"well-known construct\" particular to Linux that should be handled (and is, evidently handled, given the name it is assigned) accordingly. That doesn't make this a struct, however. I really don't see it as of yet.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems like this feature is <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/573\" rel=\"nofollow noreferrer\">not yet implemented in Ghidra</a>.</p>\n</div>",
            "votes": "-1",
            "user": "Marco",
            "time": "Feb 22, 2022 at 23:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">What does this have to do with thread-local variables? All I can see in the defect report is that there is no way to properly access structs from a linked list, where the linked list members have an <code>LIST_ENTRY</code> as their member. This is a common scheme in NT and support for <code>CONTAINING_RECORD</code> therefore a sensible request. But where is the connection to thread-local variables?</span>",
                    "time": null
                },
                {
                    "user": "Marco",
                    "text": "<span class=\"comment-copy\">The question is about supporting pointers to the middle of a struct, it has nothing to do with lists. In this case, if you define a struct that would be \"thread_local_vars\", and get your pointer to the end of it, you should be able to get Ghidra to recognize it, right?</span>",
                    "time": null
                }
            ]
        }
    ]
}