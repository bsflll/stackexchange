{
    "title": "Deobfuscating IOS dll file (I think arm64)",
    "link": "https://reverseengineering.stackexchange.com/questions/31716/deobfuscating-ios-dll-file-i-think-arm64",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am just starting out my journey with modding IAP files. I use dnSPY to find the offsets of the methods I want to change and then use an arm64 to hex converter to then apply these changes.</p>\n<p>I have been stumped with this code shown in the picture. I have not found any useful methods for the past couple days of searching which leads me to believe they lie within the gibberish labels of methods. Some quick reasearch leads me to believe these methods have been obfuscated.</p>\n<p>So far I have tried using de4dot to deobfuscate the code but it showed no difference after completing. Has anyone seen this style of obfuscation or know/have a tool that can tackle this.</p>\n<p>The game in question is Survivor.io and I am happy to provide the decrypted dll files if it would help.</p>\n<p>Many thanks,</p>\n<p>A noob trying to learn modding</p>\n<p><a href=\"https://i.sstatic.net/cmSzP.png\" rel=\"nofollow noreferrer\">Obfuscated code</a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "386",
    "tags": [
        "deobfuscation",
        "ios",
        "arm64",
        "dnspy"
    ],
    "user": "NOT Mike Oxmall epic duel",
    "time": "Mar 26, 2023 at 20:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have really dll files in an iOS app then most likely it is a Xamarin based app.</p>\n<p>But the dll file you have does not contain .Net byte code: Because code interpreters were (or are?) not allowed on iOS all .Net code is compiled what Xamarin calls <a href=\"https://www.mono-project.com/docs/advanced/runtime/docs/aot/\" rel=\"nofollow noreferrer\">\"Ahead of Time Compilation\" (AOT)</a> into native code (most likely arm64-v8a).</p>\n<p>This is the reason all the functions you see don't have any code in their function body. AFAIK they are just there as place-holder used to get the function names (may be for reflection?). Any code in those assemblies is ignored. So trying to modify any .Net code is to my knowledge, a waste of time.</p>\n<p>The native code is stored in \"aotdata\" files next to the dll files (file extension <code>.aotdata.arm64</code> for armv8a platform). Not sure if Ghidra, IDA or a similar tool can now open these files, last time I tried they could not.</p>\n<p>The best way to modify Xamarin iOS apps is on a jailbroken device using Frida.\nMono/Xamarin is not yet directly supported by Frida, but the necessary functions by the Mono framework work on the same level like other native libraries, so that hooking and modifying arguments/return values as well as calling Mono/Xamarin functions is possible.</p>\n<p>See e.g.</p>\n<ul>\n<li><a href=\"https://withinrafael.com/2019/07/09/notes-from-reverse-engineering-a-mono-aot-compiled-app-on-ios/\" rel=\"nofollow noreferrer\">https://withinrafael.com/2019/07/09/notes-from-reverse-engineering-a-mono-aot-compiled-app-on-ios/</a></li>\n<li><a href=\"https://www.hypn.za.net/blog/2020/04/19/hacking-unity-games-part-2-manipulating/\" rel=\"nofollow noreferrer\">https://www.hypn.za.net/blog/2020/04/19/hacking-unity-games-part-2-manipulating/</a></li>\n</ul>\n</div>",
            "votes": "2",
            "user": "Robert",
            "time": "Mar 28, 2023 at 8:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}