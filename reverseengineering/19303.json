{
    "title": "Reversing Arduino mega bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/19303/reversing-arduino-mega-bytecode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an hex dump of the 256k of my arduino mega's flash memory.</p>\n<p>I do not understand where is the bootloader. I see at 0x0000 address an interupt vector for reset but i do not understand how the bootloaders jumps to the main program.</p>\n<p>Is there a way to identity <code>setup()</code> and <code>loop()</code> functions addresses?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "171",
    "tags": [
        "arduino"
    ],
    "user": "Bob5421",
    "time": "Sep 12, 2018 at 7:33",
    "comments": [
        {
            "user": "Anton Kukoba",
            "text": "<span class=\"comment-copy\">there must be the way, but how do you suppose to get the answer without providing the binary?</span>",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<span class=\"comment-copy\">Examining the ATmega1280 datasheet and comparison with Arduino Mega memory mapping may be a solution.</span>",
            "time": null
        }
    ],
    "answers_data": []
}