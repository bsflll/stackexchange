{
    "title": "IDA Plugin writing generic questions",
    "link": "https://reverseengineering.stackexchange.com/questions/2886/ida-plugin-writing-generic-questions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to write a plugin for IDA PRO, mainly because I want to use the nifty graphing feature on a custom intermediate language. After the first look at the IDA plugin system, I am a little lost.</p>\n<p>Before I dig deeper, I have some generic understanding questions, which put me at unease:</p>\n<ol>\n<li><p>Does the SDK enforce a struct alignment? If not, how can I receive or supply pointers to structs compatible across compilers?</p></li>\n<li><p>Why do plugins export a data <code>strcut</code> (PLUGIN), and not standard exported functions? What is the advantage? Again, I would fear for alignment issues across compilers.</p></li>\n<li><p>Even more surprising, at least the HexRays part of the sdk seems to offer class ABI compatibility, meaning I can derive from a supplied class definition and use the result with the SDK (virtual functions and all)! How does that work?</p></li>\n<li><p>Additionally, the SDK can return pointers to classes that I am supposed to destroy with the \"delete\" keyword. Isnt that bound to end in trouble?</p></li>\n</ol>\n<p>All that makes me a little nervous. Does anyone know how this is done?</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "468",
    "tags": [
        "ida",
        "ida-plugin"
    ],
    "user": "bernd feinman",
    "time": "Oct 6, 2013 at 5:16",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">Just in case you haven't seen this tutorial - <a href=\"http://www.binarypool.com/idapluginwriting/\" rel=\"nofollow noreferrer\">binarypool.com/idapluginwriting</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>1. Does the SDK enforce a struct alignment? If not, how can I receive or supply pointers to structs compatible across compilers?</p>\n</blockquote>\n<p>IDA SDK headers do specify their alignment. It is split between 1-byte and 4-bytes.</p>\n<p>There are also interesting comments like this:</p>\n<pre><code>/*\n *      Due to the use of STL and virtual functions, some parts of this\n *      interface might be incompatible with compilers other than BCB v6.0 \n */\n</code></pre>\n<p>But given the age of Borland C++ Builder 6, I am not sure they are still relevant.</p>\n<blockquote>\n<p>2. Why do plugins export a data struct (PLUGIN), and not standard exported functions? What is the advantage? Again, I would fear for alignment issues across compilers.</p>\n</blockquote>\n<p><code>plugin_t</code> uses 1-byte alignment. As long as you follow that, there should not be any alignment problems. I guess the struct is used just for convenience, as then the loader only needs to find and keep track of only one exported symbol instead of several.</p>\n<blockquote>\n<p>3. Even more surprising, at least the HexRays part of the sdk seems to offer class ABI compatibility, meaning I can derive from a supplied class definition and use the result with the SDK (virtual functions and all)! How does that work?</p>\n</blockquote>\n<p>HexRays lets you inspect/modify the decompiled source tree representation, and uses the <a href=\"http://en.wikipedia.org/wiki/Visitor_pattern\">visitor pattern</a> to do it.</p>\n<p>It's much easier to pass one pointer to a class holding multiple pointers than it is to pass a ton of separate callback pointers for different operations. Also, a class lets you capture/track local state, doing that with separate callback pointers would require extra work with functors.</p>\n<blockquote>\n<p>4. Additionally, the SDK can return pointers to classes that I am supposed to destroy with the \"delete\" keyword. Isnt that bound to end in trouble?</p>\n</blockquote>\n<p>What are you worried about? The fact that you're freeing memory allocated by another module, or the fact that you are responsible for the object's lifetime? </p>\n<p>The former should not be an issue, <code>pro.h</code> contains a <code>DEFINE_MEMORY_ALLOCATION_FUNCS</code> macro that overrides memory management for each such class so deleting it will go through IDA's memory management routines.</p>\n<p>The latter is just something you have to live with.</p>\n</div>",
            "votes": "5",
            "user": "DCoder",
            "time": "Oct 6, 2013 at 7:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}