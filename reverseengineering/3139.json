{
    "title": "How can I find the Thread Local Storage (TLS) of a Windows Process Thread?",
    "link": "https://reverseengineering.stackexchange.com/questions/3139/how-can-i-find-the-thread-local-storage-tls-of-a-windows-process-thread",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The Thread Local Storage (TLS) contains static or global values for a thread. Those values can be very important to find reliable references to memory structures when the memory locations are not static.</p>\n<p>I would like to get the Thread Local Storage of another process.</p>\n<p>The TLS should be at <a href=\"http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\">[FS:0x2C] in the Thread Information Block (TIB)</a>. Though I quite don't understand how the FS register works. I guess I have to find the TIB Base address first? I think I can find it in the Thread Context I can get with <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms679362%28v=vs.85%29.aspx\">WINAPI GetThreadContext</a>, but I am a little bit overwhelmed.</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "winapi",
        "thread"
    ],
    "user": "samuirai",
    "time": "Dec 7, 2013 at 0:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Are you looking for ways to access it in the same process? different process? Clarify your situation and what exactly you need to do.</span>",
            "time": null
        },
        {
            "user": "samuirai",
            "text": "<span class=\"comment-copy\">I try to do it for a different process. I will update my question for clarification.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to use <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms679363%28v=vs.85%29.aspx\"><code>GetThreadSelectorEntry()</code></a>.</p>\n<p>Pseudocode:</p>\n<pre><code>GetThreadContext(hThread, &amp;context);\nGetThreadSelectorEntry(hThread, context.SegFs, &amp;selectorEntry);\nReadProcessMemory(hProcess, (selectorEntry.BaseLow | (selectorEntry.HighWord.Bytes.BaseMid &lt;&lt; 0x10) | (selectorEntry.HighWord.Bytes.BaseHi &lt;&lt; 0x18)) + 0x2C, &amp;pTLS, sizeof(pTLS), &amp;numberOfBytesRead);\n</code></pre>\n<p>You can see the function <code>GetProcessEntryPointAddress()</code> <a href=\"http://nerdworks.in/downloads/myselfdel.c\">here</a> for some sample code that does something similar.</p>\n</div>",
            "votes": "8",
            "user": "Jason Geffner",
            "time": "Dec 7, 2013 at 1:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "samuirai",
                    "text": "<span class=\"comment-copy\">thank you, it worked like a charm :) I didn't know <code>GetThreadSelectorEntry()</code></span>",
                    "time": null
                },
                {
                    "user": "Benni",
                    "text": "<span class=\"comment-copy\">@jason-geffner 10 years have gone by and your link is now dead. You don't happen to have a copy of the content? The answers to such questions never get old :)</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@Benni, you're in luck! See <a href=\"https://blogorama.nerdworks.in/content/images/nerdworks/downloads/myselfdel.c\" rel=\"nofollow noreferrer\">blogorama.nerdworks.in/content/images/nerdworks/downloads/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "Benni",
                    "text": "<span class=\"comment-copy\">thanks a lot! I found it hard to find commented sample code for it.</span>",
                    "time": null
                }
            ]
        }
    ]
}