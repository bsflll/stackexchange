{
    "title": "Modules that exist in a process address space",
    "link": "https://reverseengineering.stackexchange.com/questions/3221/modules-that-exist-in-a-process-address-space",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using volatility to inspect a services.exe process in a memory dump, I built a list of dll's that are loaded in the process space. (The modules are from the InLoadOrder module list)</p>\n<p>This is just an excerpt (full list: <a href=\"http://pastie.org/8560797\">http://pastie.org/8560797</a>):</p>\n<pre><code>0x5b860000 netapi32.dll\nFileObject @8a3cb028, Name: \\WINDOWS\\system32\\netapi32.dll\n\n0x77f60000 shlwapi.dll\nFileObject @8a3e0df0, Name: \\WINDOWS\\system32\\shlwapi.dll\n</code></pre>\n<p>As you can see there is a shlwapi.dll loaded in the process.Thanks to DependencyWalker (looking at the imports of services.exe) I found out how shlwapi.dll is loaded. ( -&gt; means imports )</p>\n<p>netapi.dll -&gt; dnsapi.dll -&gt; iphlpapi.dll -&gt; mprapi.dll -&gt; setupapi.dll -&gt; shlapi.dll </p>\n<p>But only netapi.dll is loaded. dnsapi.dll is not loaded, there is no entry for it in the InLoadOrder module list, neither is any of the other dlls from the from the above \"dependency chain\" loaded. </p>\n<p>This is not only for shlapi.dll but for many other dll's that are loaded as well. For example: shell32.dll, psapi.dll... Neither does this only happen for services.exe process.</p>\n<p>Any ideas why these dlls are loaded into the process?</p>\n<p>Any help is most appreciated, regards!</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "809",
    "tags": [
        "windows",
        "memory",
        "digital-forensics"
    ],
    "user": "user3365",
    "time": "Dec 18, 2013 at 14:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The netapi.dll might have loaded the dnsapi.dll in order to do some network inspection, and then freed the DLL on completion.  However, the shlwapi.dll might hold some handles to objects open for whatever reason, or have a non-zero reference count because of circular loading, and thus remain in memory even after the other DLLs have unloaded.  A request to unload does not guarantee that it will be honored, nor does it prevent the requester from unloading first.  user32.dll is another DLL that usually displays this behavior.</p>\n</div>",
            "votes": "6",
            "user": "peter ferrie",
            "time": "Dec 18, 2013 at 19:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3365",
                    "text": "<span class=\"comment-copy\">Ok, I understand this - thank you for making things clear to me. This leads me to another question. Looking at the dlls loaded by a csrss.exe process (which actually imports only ntdll.dll and csrsrv.dll) I found a bunch of other dlls in the process space, namely: basesrv.dll, winsrv.dll, user32.dll, sxs.dll, kernel32.dll, gdi32.dll, advapi32.dll, rpcrt4.dll. Where do these imports come from? They are neither dependecies of ntdll.dll nor of csrsrv.dll. Thank you!</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">since Windows XP, kernel32.dll is force-loaded into all processes, to prevent a crash during process startup (ntdll.dll has a dependency on kernel32.dll).  kernel32.dll in turn loads gdi32.dll, advapi32.dll, rpcrt4.dll, etc.  Each of those might load other DLLs, eventually covering your entire list.</span>",
                    "time": null
                },
                {
                    "user": "user3365",
                    "text": "<span class=\"comment-copy\">I just checked the imports of kernel32.dll and according to DependencyWalker, kernel32.dll depends only on ntdll.dll.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">While kernel32.dll might import only from ntdll.dll in your example (that's true up to Win7 - then it imports from other DLLs, too), for even simple APIs like WinExec, kernel32.dll will load advapi32.dll, which will load rpcrt4, etc.</span>",
                    "time": null
                }
            ]
        }
    ]
}