{
    "title": "How to set bp in a dll which loads later in pykd?",
    "link": "https://reverseengineering.stackexchange.com/questions/17059/how-to-set-bp-in-a-dll-which-loads-later-in-pykd",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using pykd to debug an application which loads a dll only when some condition is met. How do I set a breakpoint in the dll which has not loaded yet in pykd such that my handler gets the callback? Currently my code looks something like this</p>\n<pre><code>class ExceptionHandler(pykd.eventHandler):\n    def __init__(self):\n        pykd.eventHandler.__init__(self)\n\n    def onException(self, exceptionInfo):\n        return pykd.eventResult.NoChange\n\n    def onBreakpoint(self, id):\n        return pykd.eventResult.NoChange\n\n    def onThreadStart(self):\n        return pykd.eventResult.NoChange\n\n    def onThreadStop(self):\n        return pykd.eventResult.NoChange\n\n    def onLoadModule(self, base, name):\n        print \"onLoadModule \" + name\n        # sys.stdout.flush()\n        # if name == \"test_module\":\n        #     # test_module = pykd.module(\"test_module\")\n        #     # test_module.reload()\n        #     # pykd.setBp(test_module.offset('test_function'), breakCount)\n        #     # print pykd.dbgCommand(\"bl\")\n        #     print pykd.dbgCommand('bp test_module!test_function \"r;gc\"')\n        #     # print pykd.dbgCommand(\"bl\")\n        #     # print \"Breakpoint Set %x\" % (test_module.offset('test_function'))\n        #     print \"Breakpoint Set\"\n        return pykd.eventResult.NoChange\n\n    def onUnloadModule(self, base, name):\n        return pykd.eventResult.NoChange\n\npykd.initialize()\npykd.handler = ExceptionHandler()\npykd.startProcess(\"testmydelayedload.exe %s\\\\%s\" % (os.getcwd(), sys.argv[1].strip()))\nalloc_module = pykd.module(\"ntdll\")\nalloc_module.reload()\nb0 = pykd.setBp(alloc_module.offset('RtlAllocateHeap')+0xe6, breakCount)\nb1 = pykd.setBp(alloc_module.offset('RtlFreeHeap'), breakCount)\npykd.loadExt(\"C:\\\\Program Files\\\\Windows Kits\\\\10\\\\Debuggers\\\\x86\\\\winext\\\\ext.dll\")\npykd.go()\npykd.killAllProcesses()\n</code></pre>\n<p>I have tried to manually set the breakpoint using <code>pykd.dbgCommand</code> but the callback is not triggered in that case. I tried to change the return value of <code>onLoadModule</code> to other than <code>pykd.eventResult.NoChange</code> while setting a bp. What am I missing?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "513",
    "tags": [
        "windows",
        "windbg",
        "pykd"
    ],
    "user": "sudhackar",
    "time": "Dec 28, 2017 at 8:15",
    "comments": [
        {
            "user": "Lieven Keersmaekers",
            "text": "<span class=\"comment-copy\">Change <code>bp</code> to <code>bu</code></span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">@LievenKeersmaekers setting a bp with <code>pykd.dbgCommand</code> won't trigger the callback as I said. I want something which uses the pykd's api.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">I just figured it out, the variable storing the bp should be global otherwise it won't work.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just figured it out, the variable storing the bp should be global otherwise it won't work. It should be alive out of the class's context.</p>\n<pre><code>def onLoadModule(self, base, name):\n        global test_function, test_module\n        print \"onLoadModule \" + name\n        if name == \"jscript\":\n            test_module = pykd.module(\"jscript\")\n            test_module.reload()\n            test_function = pykd.setBp(test_module.offset('test_function'), breakCount)\n            print \"Breakpoint Set %x\" % (test_module.offset('test_function'))\n        return pykd.eventResult.NoChange\n</code></pre>\n</div>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Dec 28, 2017 at 11:40",
            "is_accepted": true,
            "comments": []
        }
    ]
}