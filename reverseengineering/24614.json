{
    "title": "Way to get all the function prototype using Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/24614/way-to-get-all-the-function-prototype-using-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been trying to extract the function prototypes from a binary file using Ghidra. Up till now what I have done was to use Ghidra's included \"Decompile\" script and filtered out the function prototypes through the produced text file using python. However, this approach seems to be cumbersome and sometimes it fails to produce the intended results when the compiler options are changed. I feel that there may be a quicker way to get these. Given a binary, my requirement is to get all the function prototypes such as <code>float strtof_l(char *__nptr,char **__endptr,__locale_t __loc)</code> without the function bodies. Is there any existing script to do this? Or is there a method in the API that I could loop upon. Thank you very much. </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "binary-analysis",
        "firmware",
        "radare2",
        "ghidra"
    ],
    "user": "hEShaN",
    "time": "Jun 12, 2020 at 16:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://ghidra.re/ghidra_docs/api/ghidra/program/database/function/FunctionManagerDB.html\" rel=\"noreferrer\"><code>FunctionManager</code></a> to get all the functions in the current program and then, from it iterate and get signatures of each.</p>\n<pre><code>fm = currentProgram.getFunctionManager()\nfunctions = fm.getFunctions(True)\nfor f in functions:\n  print(f.getSignature().getPrototypeString())\n</code></pre>\n<p>The output:</p>\n<pre><code>Signatures.py&gt; Running...\nchar * strcpy(char * __dest, char * __src)\nint mkdir(char * __path, __mode_t __mode)\nint fclose(FILE * __stream)\nint printf(char * __format, ...)\nvoid * memset(void * __s, int __c, size_t __n)\nvoid * memcpy(void * __dest, void * __src, size_t __n)\nFILE * fopen(char * __filename, char * __modes)\nchar * strcat(char * __dest, char * __src)\n...\n</code></pre>\n</div>",
            "votes": "6",
            "user": "Paweł Łukasik",
            "time": "Apr 4, 2020 at 19:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "h0r53",
                    "text": "<span class=\"comment-copy\">This works very well but it seems to only include imported functions in the results. Is there a way to do something similar but also include functions defined within the binary itself? A use case is to find all locally defined functions with argument length 3, for example.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">@h0r53 based on the docs, it should return ALL the functions (except EXTERNAL)</span>",
                    "time": null
                },
                {
                    "user": "h0r53",
                    "text": "<span class=\"comment-copy\">Interesting. In my case it's returning ONLY external functions. Example, <code>memcpy</code>, <code>memset</code>, <code>memmove</code>, etc. These all come from libc. What I want is locally defined functions. Note, this binary has been stripped of its symbol table, but it still contains dynamic symbols. Also, Ghidra has identified several symbols and named them FUN_XXXX. In particular, I'd love to enumerate all the FUN_XXXX functions.</span>",
                    "time": null
                }
            ]
        }
    ]
}