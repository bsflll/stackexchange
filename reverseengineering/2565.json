{
    "title": "Trace assisted code identification?",
    "link": "https://reverseengineering.stackexchange.com/questions/2565/trace-assisted-code-identification",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on an RE project and had an idea for a tool that would help me greatly and wanted to see if it already exists.</p>\n<p>I'd like to find a specific part of code in the binary. Searching for strings, etc is not helping much. So, I had the thought, what if I could run the program twice, once I would have the program do the thing that corresponds to the code I'm looking for, and the second time I would not perform that action.</p>\n<p>If I had a trace of say basic blocks executed during both runs, I might be able to do a \"diff\" and use that to narrow down where the functionality lies in the binary.</p>\n<p>Does such a tool already exist, or is there a better way to narrow down the part of code executing.</p>\n</div>",
    "votes": "8",
    "answers": 2,
    "views": "933",
    "tags": [
        "tools",
        "debugging"
    ],
    "user": "mikeazo",
    "time": "Aug 5, 2013 at 13:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This approach is commonly called \"differential debugging\". I know of the following tools that can help with it:</p>\n<ul>\n<li><a href=\"http://www.openrce.org/downloads/details/208/PaiMei-Reverse-Engineering-Framework\">PaiMei</a> from Pedram Amini</li>\n<li><a href=\"http://code.google.com/p/mynav/\">MyNav</a> by Joxean Koret</li>\n<li>IDA's <a href=\"https://www.hex-rays.com/products/ida/support/tutorials/replayer/trace_replayer.pdf\">trace replayer</a> allows diffing two execution traces (also implemented by Joxean)</li>\n<li><a href=\"http://blog.zynamics.com/2010/01/19/binnavi-3-0-preview-improved-differential-debugging/\">BinNavi</a> has this feature</li>\n<li><a href=\"http://dion.t-rexin.org/notes/2009/09/29/differential-reversing/\">simple differ</a> by @dionthegod</li>\n<li><a href=\"https://brundlelab.wordpress.com/2012/08/19/small-and-cute-execution-tracer/\">a script</a> from Carlos Garcia which uses WinAppDbg framework by Mario Vilas</li>\n</ul>\n<p>It's not too hard to implement something quick in any debugger that allows scriptable breakpoints:</p>\n<ol>\n<li>Put breakpoints on every function/basic block/instruction (depending on your preference and what the debugger allows). In the breakpoint handler, record the hit then disable/remove the breakpoint.</li>\n<li>Run the program and do everything you can <em>except</em> for the part you're interested in.</li>\n<li>Exit the program.</li>\n<li>Change the breakpoint handler to stop execution, or record it in a separate log file.</li>\n<li>Run the program again and exercise the part you need. One or more of the remaining breakpoints should hit. They will point you to the interesting code.</li>\n</ol>\n</div>",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "Aug 1, 2013 at 18:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you may check out an ollydbg plugin <code>conditional branch logger</code></p>\n<p><a href=\"http://www.woodmann.com/collaborative/tools/index.php/Conditional_Branch_Logger\" rel=\"nofollow\">http://www.woodmann.com/collaborative/tools/index.php/Conditional_Branch_Logger</a></p>\n<p>it parses the executable for conditional branches <code>(je , jne .... jecxz....loopd etc)</code>\nsets logging breakpoints on them and logs the results to a txt which can be used to diff the \ndiversion in paths between two different execution scenarios</p>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Aug 1, 2013 at 18:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}