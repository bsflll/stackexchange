{
    "title": "Find MFC class memory layout automatically in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/19406/find-mfc-class-memory-layout-automatically-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>Background</h3>\n<p>I was using IDA to reverse engineer an DLL which uses MFC100.</p>\n<p>I was reading <a href=\"https://reverseengineering.stackexchange.com/questions/12385/reversing-an-mfc-application-how-to-find-class-memory-layouts\">Reversing an MFC application: How to find class memory layouts?</a> and <a href=\"https://stackoverflow.com/questions/13126694/idapro-loading-c-header-files-into-idapro-for-structures\">https://stackoverflow.com/questions/13126694/idapro-loading-c-header-files-into-idapro-for-structures</a> , where two answers suggest going to the correct header file and copy&amp;paste the struct defintion (which is hard, because C++ has templates and vftable. Also, nested classes...), and one answer suggests making a test program and use IDA to decompile it to get the struct declaration, which is not possible because programs don't (appear to) store struct declaration. (see below)</p>\n<hr/>\n<p>Consider a small example. (with <code>CStdioFile</code> and some MFC thing)</p>\n<pre><code>#include &lt;afxwin.h&gt;\n\nclass HelloApplication : public CWinApp\n{\npublic:\n    virtual BOOL InitInstance();\n};\n\nHelloApplication HelloApp;\n\nclass HelloWindow : public CFrameWnd\n{       \n    CButton* m_pHelloButton;\npublic: \n    HelloWindow();\n};\n\n\nBOOL HelloApplication::InitInstance()\n{       \n    m_pMainWnd = new HelloWindow(); \n    m_pMainWnd-&gt;ShowWindow(m_nCmdShow); \n    m_pMainWnd-&gt;UpdateWindow(); \n    return TRUE;\n}\n\n\nHelloWindow::HelloWindow()\n{       \n    Create(NULL,            \n        \"Hello World!\",         \n        WS_OVERLAPPEDWINDOW|WS_HSCROLL,             \n        CRect(0,0,140,80));     \n    m_pHelloButton = new CButton();\n    m_pHelloButton-&gt;Create(\"Hello World!\",WS_CHILD|WS_VISIBLE,CRect(20,20,120,40),this,1);\n\n    // some code for file reading\n    CStdioFile Inputfile, Outputfile;\n    CFileException FileExc;\n    UINT nOpenFlags;\n    CString s;\n    nOpenFlags = CFile::modeRead;\n    if (!Inputfile.Open(\"Console.txt\", nOpenFlags, &amp;FileExc)) {\n        FileExc.ReportError();\n        return;\n    }\n    nOpenFlags = CFile::modeWrite | CFile::modeCreate;\n    if (!Outputfile.Open(\"Output.txt\", nOpenFlags, &amp;FileExc)) {\n        FileExc.ReportError();\n        return;\n    }\n    while (Inputfile.ReadString(s))\n        Outputfile.WriteString(s+'\\n');\n    Inputfile.Close();\n    Outputfile.Close();\n\n}\n</code></pre>\n<p>Command line used (assuming the file above is named <code>a.cpp</code>):</p>\n<pre><code>cl.exe a.cpp /EHsc /link /debug /subsystem:windows\n</code></pre>\n<p>Here, I intentionally use <code>/debug</code> to make reverse engineering easier.</p>\n<p>When IDA ask me if I want to load the PDB file, I chose \"Yes\".</p>\n<p>However:</p>\n<p>When loading the executable with IDA, neither the \"Local Types\" window nor the \"Structures\" window shows anything about <code>CFile</code>. Therefore, the functions which use them, use offsets to refer to the members.</p>\n<p><a href=\"https://i.sstatic.net/MfyoO.png\" rel=\"nofollow noreferrer\"><img alt=\"Pseudocode of CFile::CFile\" src=\"https://i.sstatic.net/MfyoO.png\"/></a></p>\n<p><sub>In this particular case I use <code>CFile</code>, but I assume it's similar for other classes.</sub></p>\n<p>I know I can go to the header file in <code>atlmfc\\</code> to read the class definition and work out the member names, but that's too tedious and IDA may have it built-in already. So:</p>\n<hr/>\n<h3>The question</h3>\n<p>Is there any way to quickly give IDA the definition of <code>CFile</code>?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "mfc"
    ],
    "user": "user202729",
    "time": "Sep 20, 2018 at 12:45",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">If you compile your windows program with debug information and importing the resulting debug info .pdb file with the corresponding menu command ( <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/430.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/support/idadoc/430.shtml</a> ) you'll probably be able to see the CFIle definition.</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">@ws Won't loading the file import the PDB automatically?</span>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">IDA will usually ask if you want to load the PDB.</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">It still doesn't work. (post updated...)</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Is it IDA free by any chance ? Is it possible that you are running IDA on Linux ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The main problem is: <code>/Zi</code> is required. Including just <code>/debug</code> is not enough. That's because the type information is stored in the compiler <code>.pdb</code> file. See also <a href=\"https://stackoverflow.com/questions/3796090/compiler-pdb-file-and-the-linker-pdb-file\">Compiler PDB file and the Linker PDB file - Stack Overflow</a>.</p>\n<p>The command line can looks like this:</p>\n<pre><code>cl.exe <b><i>/Zi</i></b> a.cpp /EHsc /link /subsystem:windows</code></pre>\n<p>Note that <code>/Zi</code> implies <code>/debug</code> (therefore it's not necessary to specify <code>/debug</code> when <code>/Zi</code> is included)</p>\n<p><strong>Hint</strong>: It's not necessary to build the executable. Just compile the file itself is enough (using <code>/c</code>).</p>\n<hr/>\n<p>There are some other problems that one may get while doing that:</p>\n<ol>\n<li><p>The error message</p>\n<pre><code>&lt;&lt; It appears that MS DIA SDK is not installed.\nPlease try installing \"Microsoft Visual C++ 2008 Redistributable Package / x86\" &gt;&gt;\n</code></pre>\n<p>appears in the \"Output window\".</p>\n<p>Solution: just install <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=29\" rel=\"nofollow noreferrer\">Microsoft Visual C++ 2008 Redistributable Package (x86)</a>.</p></li>\n<li><pre><code>Internal IDA Error\n\nOops! internal error 984 occured.\nFurther work is not possible and IDA will close.\n</code></pre>\n<p>It's <a href=\"https://www.hex-rays.com/products/ida/6.9/index.shtml\" rel=\"nofollow noreferrer\">a bug that is fixed in IDA 6.9</a>.</p></li>\n<li><p>The classes just don't appear in \"Local Types\" tab.</p>\n<p>Check the output window to see if the error message mentioned in problem 1 appears.</p></li>\n</ol>\n<hr/>\n<p>By the way, it is possible to import any C++ type into IDA using this method, not just specifically MFC.</p>\n</div>",
            "votes": "1",
            "user": "user202729",
            "time": "Sep 25, 2018 at 15:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}