{
    "title": "Function Address Changes When Gets Referenced elsewhere",
    "link": "https://reverseengineering.stackexchange.com/questions/15831/function-address-changes-when-gets-referenced-elsewhere",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i have been trying to get the address of a function and use that hex number for other calculations. I have read that you cannot get the address of a function like you get the address of a variable in c/c++. I have tried casting to <code>void*</code> and function pointers but none of them seems to be working. As I get different numbers everytime I try to assign the address to a variable or pass it to a function or use it in any way.</p>\n<pre><code>int main(){\nstd::cout&lt;&lt;&amp;funct&lt;&lt;std::endl;\n}\n\n//Output is: 0x010111b3\n</code></pre>\n<p>But when I look at the disassembly the function starts at 0x01012580. And the difference is not constant. It might be a compiler issue but i don't know how to fix it. Can anyone help me please?</p>\n<p>Thanks</p>\n<p><strong>UPDATE</strong></p>\n<p><strong>SOLVED</strong></p>\n<p>The issue was with the compiler options. When built using g++ i would get the normal address of the function. But when built using visual c++ compiler i would get a different address rather than the original address of the function. However switching 'Enable Incremental Linking' option off in the 'Project Properties-&gt;Linker-&gt;General' option solved my problem.</p>\n<p>Thanks to everyone.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "161",
    "tags": [
        "disassembly",
        "c++",
        "functions",
        "compilers",
        "address"
    ],
    "user": "rustam Shirinov",
    "time": "Jul 18, 2017 at 18:28",
    "comments": [
        {
            "user": "Samson",
            "text": "<span class=\"comment-copy\">Is it possible that 0x010111b3 is a pointer to function start address? E.g. 0x010111b3-&gt;0x01012580. Although that address is not byte aligned. I will test on my own pc and let you know</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\"><a href=\"https://msdn.microsoft.com/en-us/library/64ez38eh.aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/64ez38eh.aspx</a>.  if you are in windows you can use these intrinsc like _returnaddress ,, _ addressofreturnaddrss etc.   you may need to include intrinsc.h</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">do you use MSVC? is it debug build or you turned on incremental linking?</span>",
            "time": null
        },
        {
            "user": "rustam Shirinov",
            "text": "<span class=\"comment-copy\">Thanks alot :) Turning incremental linking off fixed my problem</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>not sure what your question is<br/>\ndo you mean you get different address for the function every time you load it?   </p>\n<p>if yes then disable ASLR (address space layout randomization)<br/>\nyou can use the linker switch /DYNAMICBASE:no to make the exe load at a fixed address every time (this is not production friendly disabling ASLR is a security risk)</p>\n<p>source as it is from your original post   </p>\n<pre><code>:\\&gt;ls -l\ntotal 4\n-rw-rw-rw-  1 HP 0 155 2017-07-18 15:14 FOO.CPP\n\n:\\&gt;cat FOO.CPP\n#include &lt;iostream&gt;\nvoid funct(void) {\n    std::cout&lt;&lt;\"hello hello funcy\"&lt;&lt;std::endl;\n}\nint main(){\n    funct();\n    std::cout&lt;&lt;&amp;funct&lt;&lt;std::endl;\n}\n</code></pre>\n<p>compiled with visual studio</p>\n<pre><code>:\\&gt;cl /EHsc /Zi FOO.CPP /link /RELEASE /DYNAMICBASE:NO\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.00.24210 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nFOO.CPP\nMicrosoft (R) Incremental Linker Version 14.00.24210.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:FOO.exe\n/debug\n/RELEASE\n/DYNAMICBASE:NO\nFOO.obj\n</code></pre>\n<p>executed as is </p>\n<pre><code>:\\&gt;FOO.exe\nhello hello funcy\n00401100\n\n:\\&gt;FOO.exe\nhello hello funcy\n00401100\n</code></pre>\n<p>checking in debugger </p>\n<pre><code>:\\&gt;cdb -c \"x foo!funct;q\" FOO.exe | grep -i quit -B 3\n77ca05a6 cc              int     3\n0:000&gt; cdb: Reading initial command 'x foo!funct;q'\n00401100          FOO!funct (void)\nquit:\n\n:\\&gt;cdb -c \"x foo!funct;q\" FOO.exe | grep -i quit -B 3\n77ca05a6 cc              int     3\n0:000&gt; cdb: Reading initial command 'x foo!funct;q'\n00401100          FOO!funct (void)\nquit:\n\n:\\&gt;\n</code></pre>\n<p>you can print the return address in the funct using intrinsic _ReturnAddress() by including the header intrin.h like this \nand roll your own hacks if you require </p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;intrin.h&gt;\n#include &lt;windows.h&gt;\nvoid funct(void) {\n    std::cout&lt;&lt;\"hello hello funcy\"&lt;&lt;std::endl;\n    int test = (int )_ReturnAddress();\n    // assuming an e8 call (relative offset ) \n    // not an ff 25 call or register call or other indirect call\n    // if the following is negative like 0xffffffbb then the function \n    // is above the return address \n    // ie function is @ ( _ReturnAddrees - (0x100000000 - 0xffffffbb) )\n    printf(\"%x\\n\" , test);\n    printf (\"%x%x%x%x\\n\" , \n    *(BYTE *)(test-1),\n    *(BYTE *)(test-2),\n    *(BYTE *)(test-3),\n    *(BYTE *)(test-4)\n    );\n}\nint main(){\n    funct();\n    std::cout&lt;&lt;\"we are in main\"&lt;&lt;std::endl;\n    std::cout&lt;&lt;&amp;funct&lt;&lt;std::endl;    \n}\n</code></pre>\n<p>result as follows  </p>\n<pre><code>:\\&gt;FOO.exe\nhello hello funcy\n401178\nffffff88\nwe are in main\n00401100\n\n:\\&gt;FOO.exe\nhello hello funcy\n401178\nffffff88\nwe are in main\n00401100\n\n:\\&gt;FOO.exe\nhello hello funcy\n401178\nffffff88\nwe are in main\n00401100\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jul 18, 2017 at 10:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">Point of my question is not about address randomization. The problem with my code was(I fixed it thanks to @Igor Skochinsky) when i use the <code>&amp;</code> operand to get the address of the function it returns a different number rather than the actual address in the disassembly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I did this test in C++ using G++ 4.8.1</p>\n<pre><code>#include &lt;iostream&gt;\nvoid function(){\n    int q=0;\n    q++;\n    q=q-2;\n}\n\nint main ()\n{\n    std::cout &lt;&lt; (void*)&amp;function;\n    return 0;\n}\n</code></pre>\n<p>It gave me <code>0x4013e0</code> which is the correct address of my function.\n<a href=\"https://i.sstatic.net/Qxprn.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Qxprn.png\"/></a></p>\n<p>The random numbers you've described to me seem to sound like the variable is uninitialized and has an unpredictable value. that is the initial value is not set and could be anything.</p>\n<p>Assigning the address to a variable could be like this:</p>\n<pre><code>void* i = (void*)&amp;function; # as a pointer.\nint q = (int)i; # as integer value.\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Samson",
            "time": "Jul 16, 2017 at 4:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">i copied the exact same code that you posted to my machine, compiled it with visual c++ and set a breakpoint at the cout statement. When i hover over the value of &amp;function it gives me the correct address of starting point of function which is <code>0x01341720</code>(i looked it up in the visual studio debugger). But when i continue it prints out the value <code>0x01341334</code> which is incorrect.</span>",
                    "time": null
                },
                {
                    "user": "Samson",
                    "text": "<span class=\"comment-copy\">Thats strange. I think its your compiler? Maybe. What does visual c++ use?</span>",
                    "time": null
                },
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">I tried to compile the above code with g++ and it gave me the correct address of the function. The Problem IS my compiler. but i dont know how to fix it :)</span>",
                    "time": null
                },
                {
                    "user": "Samson",
                    "text": "<span class=\"comment-copy\">Ahh ok. I will investigate when I can, i am finding it quite intriguing. It might be fixable by messing with compiler options.</span>",
                    "time": null
                }
            ]
        }
    ]
}