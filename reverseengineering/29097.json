{
    "title": "Understanding buffer overflow in Arm",
    "link": "https://reverseengineering.stackexchange.com/questions/29097/understanding-buffer-overflow-in-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say I have a function (vuln) that has a local buffer with size of 0x20 bytes. In the beginning of this function, there is <code>push r4-r7,lr</code>.</p>\n<p>Is that correct, that the stack looks like:</p>\n<p>Buffer: <code>(0x20)...r4(0x4)...r5(0x4)...r6(0x4)...r7(0x4)...lr</code> (for return address <code>0x4</code>) <code>...fp</code> (previous frame pointer <code>0x4</code>)... And then the stack frame of the caller function.</p>\n<p>That means, if I want to jump to the function in the address <code>0xabcd</code>, I need to put in the buffer <code>AA* 0x32</code> + <code>0xabcd</code>  (<code>0x32</code> = buffer +r4-r7) .</p>\n<p>Is that correct?the place of lr will be replaced but the place of fp stay correct?</p>\n<p>Now, if I really will jump to address of 0xabcd. After this function (<code>0xabcd</code>) will finish. The function will try to restore the fp and will crash because it's frame pointer of the vulnerable function.</p>\n<p>Is that correct?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "521",
    "tags": [
        "buffer-overflow",
        "stack"
    ],
    "user": "Buflow",
    "time": "Oct 29, 2021 at 7:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your understanding seems mostly correct. But buffer plus four 32-bit registers make up 0x30, not 0x32 bytes. Also be aware that your target address is 32 bits, so it looks more like 0xABCD1234 or 0x0000ABCD then just 0xABCD.</p>\n<p>You didn't provide any evidence that proves or disproves that an old fp value is above the pushed link register. I don't expect a copy of the ARM register FP on the stack, though: You are quoting thumb code. Thumb either uses no frame pointer at all, or it uses R7 as frame pointer, as (most) thumb instructions can not access the ARM frame pointer register. If you use R7 as thumb frame pointer by convention, the old frame pointer is the value of r7, which is below the return address (pushed LR), not above.</p>\n<p>If you manage to overwrite the return address, you are jumping into the target function without using BL, which is \"unconventional\". All ARM functions expect their return address to be passed in LR, exactly what BL (or BLX) does. Returning does not set LR, so the target function you inadvertantly return to will jump to the (obsolete) address that happens to be stored in LR at the time the vulnerable function exits. It's likely the return address of a (possibly nested) function call that happened during the execution of the vulnerable function. That code isn't prepared to be returned to from \"outside\" and will find the stack in a wrong state, so the program will crash.</p>\n</div>",
            "votes": "1",
            "user": "Michael Karcher",
            "time": "Aug 9, 2021 at 21:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}