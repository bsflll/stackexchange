{
    "title": "Exploit Development with python",
    "link": "https://reverseengineering.stackexchange.com/questions/4651/exploit-development-with-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are there any libraries to help developing exploits in python, like representing hex string or assembling/disassembling x86 instructions?</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "8k",
    "tags": [
        "exploit"
    ],
    "user": "user3286303",
    "time": "Jun 23, 2014 at 13:12",
    "comments": [
        {
            "user": "Ange",
            "text": "<span class=\"comment-copy\">this is a very broad question... (representing hex or disassembling just takes a few lines)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if you want to develop exploits in Python, this book may help: \n<a href=\"http://my.safaribooksonline.com/book/-/9781597497299/chapter-9-exploitation-scripting/building_exploits_with_python\" rel=\"nofollow noreferrer\">http://my.safaribooksonline.com/book/-/9781597497299/chapter-9-exploitation-scripting/building_exploits_with_python</a></p>\n<p>If you need to generate big chunks of asm PeachPy might help: </p>\n<p>PeachPy <a href=\"https://github.com/Maratyszcza/PeachPy\" rel=\"nofollow noreferrer\">https://github.com/Maratyszcza/PeachPy</a></p>\n<p>You can also compile python to C, and use a C compiler to get things down to assembly</p>\n<p><a href=\"https://stackoverflow.com/questions/10660266/python-program-into-a-standard-assembly\">https://stackoverflow.com/questions/10660266/python-program-into-a-standard-assembly</a></p>\n<p>Or you could write most of your program in Python, and use a variety of methods to get inline assembly in: \n<a href=\"https://stackoverflow.com/questions/6040932/executing-assembler-code-with-python\">https://stackoverflow.com/questions/6040932/executing-assembler-code-with-python</a></p>\n<p>That means less asm for you.</p>\n<p>To be honest, you will be better of rolling with the punches and properly learning ASM. It is hard, but well worth the trouble. Try starting with NASM, or writing inline assembly with your visual studio programs. </p>\n<p>Also: This question is a little too broad for this site. </p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3286303",
                    "text": "<span class=\"comment-copy\">I already intermeddate and basic asm but i don't program in in it</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a bunch of python libraries that can aid you in exercising exploitation:</p>\n<ul>\n<li><a href=\"https://github.com/longld/peda\" rel=\"nofollow\">Peda</a> - Python Exploit Development Assistance for GDB</li>\n</ul>\n<p>Peda has this nice option for generating exploit skeletons. Everything is already set up for you for making a basic exploit, either local or remote. And it serves as a rather nice gdb extension.</p>\n<ul>\n<li><p>Blasty's <a href=\"https://github.com/blasty/moneyshot\" rel=\"nofollow\">moneyshot</a> is also a set of rather useful utilities. </p>\n<blockquote>\n<p>A collection of python scripts to aid you in the final steps of binary exploitation or during the construction of buffers.</p>\n</blockquote></li>\n<li><p>Hellman's <a href=\"https://github.com/hellman/libformatstr\" rel=\"nofollow\">libformatstr</a> is a nice format string automation exploitation library and it already comes embedded in previous two.</p></li>\n</ul>\n<p>Also, if all you really need is packing/manipulating binary data, python's <a href=\"https://docs.python.org/2/library/struct.html\" rel=\"nofollow\">struct</a> library is a must. </p>\n<p>There's also <a href=\"http://pythonarsenal.erpscan.com/\" rel=\"nofollow\">Pyhton Arsenal For RE</a> list of libraries covering many more useful libraries. </p>\n</div>",
            "votes": "2",
            "user": "0xea",
            "time": "Jun 20, 2014 at 16:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3286303",
                    "text": "<span class=\"comment-copy\">Thanks guys for libaries really made life easier for me when pwning binarys</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been using <a href=\"https://github.com/OpenRCE/pydbg\" rel=\"nofollow\">pydbg</a> for the last 2+ years to great success. Its used by various popular fuzzing suites such as Sulley, PaiMei, etc. </p>\n<p>Also, the <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow\">capstone disassembly framework</a> is highly suggested, especially the <a href=\"http://www.capstone-engine.org/op_access.html\" rel=\"nofollow\">op_access</a> functionality as it helps with taint analysis. <strong><em>Keep in mind</em></strong> the application binary interface (ABI) of the platform you're developing exploits on. If its x86/x64, remember certain instructions will flag different unecessary registers as read/written to.</p>\n<p>As an example, </p>\n<pre><code>rep movs* \n</code></pre>\n<p>Is used by various functions, especially on WindowsXP+. </p>\n<p>The capstone disassembly framework will state that ecx, edi and esi are ALL read and written to, which means you'll have to write logic to deduce if certain instructions like the aforementioned ACTUALLY read/write to registers. Obviously, ESI and ECX aren't written to in that instruction. Usually compilers will specify the number of bytes to read in the previous insruction, e.g.</p>\n<pre><code>mov ecx, 0x##\n</code></pre>\n<p>However, for ~80% of instructions it will give accurate information (EFLAGS not withstanding).</p>\n<p>It should take a few days or a week depending on free time to write logic to determine if a register is actually accessed. </p>\n<p><strong><em>I'm only assuming the basic instruction set is what you need, not FPU, SIMD, SSE, etc. If you RE malware, packed or optimized binaries, you will need to add logic for the aforementioned and more instruction sets</em></strong></p>\n</div>",
            "votes": "0",
            "user": "grepNstepN",
            "time": "Jun 25, 2016 at 19:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}