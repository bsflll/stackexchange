{
    "title": "What arguments are passed into a CALL instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/30100/what-arguments-are-passed-into-a-call-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While reverse enginnering a simple C program for training, I asked myself what was the point of those lines :</p>\n<pre><code>                         LAB_001006b5                                    XREF[1]:     0010069d(j)  \n    001006b5 48 8b 45 e0     MOV        RAX,qword ptr [RBP + local_28]\n    001006b9 48 83 c0 08     ADD        RAX,0x8\n    001006bd 48 8b 00        MOV        RAX,qword ptr [RAX]\n    001006c0 48 89 c7        MOV        argc,RAX\n    001006c3 e8 98 fe        CALL       &lt;EXTERNAL&gt;::atoi                                 int atoi(char * __nptr)\n             ff ff\n</code></pre>\n<p>I thought that the function atoi called from the CALL instruction just pop the param from the stack (so lines from 001006b5 to 001006c0 were pointless ?)\nAm I getting it right or not?</p>\n<p>Last question : what \"MOV argc,RAX\" means ?? I mean, argc is a constant ?</p>\n<p><a href=\"https://i.sstatic.net/DvCMJ.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/DvCMJ.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "392",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "maito",
    "time": "Mar 2, 2022 at 15:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>argc is an argument to the function main()</p>\n<p>main is normally prototyped as</p>\n<p><code>int __cdecl main (int argc , char *argv[] )</code> when locale is not used</p>\n<p>argc is the number of arguments passed to main  if you pass 5 arguments like<br/>\n<code>foo.exe 1 2 3 4 5</code></p>\n<p>then argc will be 6 ( 5 arguments (space delimited ) + 1 program )</p>\n<p>argv is a buffer that holds those arguments</p>\n<pre><code>argv[0]=\"foo.exe\",argv[1]=\"1\",argv[2]=\"2\",argv[3]=\"3\",argv[4]=\"4\",argv[5]=\"5\"\n</code></pre>\n<p>each of these arguments are 8 byte long in a 64 bit program (size of pointer)</p>\n<p>mov [rbp+1c] , argc --&gt; saves the numebr of arguments<br/>\ncmp [rbp+1c] , 3 --&gt; checks if you passed 2 arguments (default progname + 2 args)<br/>\nif the jz jumps it reaches xxxxx6b5  to load the start of argv buffer</p>\n<p>skips the first member argv[0] by adding 8<br/>\ndereferences the second member argv<a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">1</a> via mov rax , [rax]</p>\n<p>the next mov argc , rax is a misrepresentation by ghidra</p>\n<p>(you may need to split args and rename it )</p>\n<p>it is not argc it is rdi the default first argument that is passed by register in <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">System V AMD64 ABI</a></p>\n<p>you may check it by unlabelling or redefining the function prototype in Ghidra or</p>\n<p>disassembling <a href=\"http://shell-storm.org/online/Online-Assembler-and-Disassembler/?opcodes=48%2089%20c7&amp;arch=x86-64&amp;endianness=little&amp;dis_with_addr=True&amp;dis_with_raw=True&amp;dis_with_ins=True#disassembly\" rel=\"nofollow noreferrer\">48 89 c7 in an external disassembler like shell storm</a></p>\n<p>the atoi() takes one parameter a char * and returns an integer</p>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 4, 2022 at 15:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p><code>MOV   RAX,qword ptr [RBP + local_28]</code><br/>\n <br/>\nThe address of the array <code>argv</code> (i.e., the pointer to the <code>argv[0]</code> element) is loaded into the RAX register.\n <br/>\n </p>\n</li>\n<li><p><code>ADD   RAX,0x8</code><br/>\n <br/>\nThe value in RAX register is incremented by 8 (= length of <code>int</code> in bytes), so now  in RAX is the pointer to the <code>argv[1]</code> element.\n <br/>\n </p>\n</li>\n<li><p><code>MOV   RAX,qword ptr [RAX]</code><br/>\n <br/>\nNow, into the RAX register is loaded the quadruple-word (i.e., 8 bytes) from the address in RAX, i.e., the <em>value</em> of the <code>argv[1]</code> element.\n <br/>\n </p>\n</li>\n<li><p><code>MOV   argc,RAX</code><br/>\n <br/>\nThe value in RAX, i.e., the value of <code>argv[1]</code>, is loaded into the <code>argc</code> variable.\n <br/>\n </p>\n</li>\n</ol>\n<p>The <code>argc</code> means “arguments count”, i.e., <em>number of arguments</em>.</p>\n<p>In this particular case, in <code>argv[0]</code> is the only argument for the <code>atoi()</code> function, and <code>argv[1]</code> is not the (non-existing) second argument – it is in fact <code>argc</code> (1 in this case) immediately following <code>argv[0]</code>.</p>\n</div>",
            "votes": "1",
            "user": "MarianD",
            "time": "Mar 3, 2022 at 12:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}