{
    "title": "c++ version of MOV AL,BYTE PTR DS:[ESI]",
    "link": "https://reverseengineering.stackexchange.com/questions/15022/c-version-of-mov-al-byte-ptr-dsesi",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm writing a keygen for a crack-me exercise.</p>\n<p>I have a problem with handling byte assignments the crack-me performs several times using instructions like <code>MOV AL,BYTE PTR DS:[ESI]</code> (move byte from location to AL) to change <code>EAX</code> for example from <code>000096BA</code> to <code>00009662</code>.</p>\n<p>The crack-me overflows <code>EAX</code> value several times so to calculate the key I use an <code>unsigned int</code> in my C program.</p>\n<p>The problem I have is that I do not know how I can replace a single byte value in <code>unsigned int</code> example from <code>0x38586d</code> to <code>0x38498d</code>, changing the second byte only.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "c++",
        "c",
        "crackme"
    ],
    "user": "Marek",
    "time": "Mar 27, 2017 at 16:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>int eax;\nchar * esi;\n*((char *) &amp;eax) = *esi;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Sergey Slepov",
            "time": "Mar 26, 2017 at 20:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">It is better to provide a thorough explanation alongside the final answer</span>",
                    "time": null
                },
                {
                    "user": "Sergey Slepov",
                    "text": "<span class=\"comment-copy\">&amp;eax takes the address of eax and has the type <code>int *</code>  (char *) &amp;eax casts the int * to a char *. *((char *) &amp;eax) references the char (byte) pointed to by the char *. = assigns the char / byte pointed to by esi to the first byte of eax. HTH.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, most decent compilers will let you introduce assembly directly in your C code. This is not recommended but the option should be noted.</p>\n<p>Now, here's a sane solution; C was several <a href=\"https://www.tutorialspoint.com/cprogramming/c_bitwise_operators.htm\" rel=\"nofollow noreferrer\">bitwise operators</a> to manipulate sets of bits inside an integer. </p>\n<p>The bitwise operators we'll use here are:</p>\n<ol>\n<li><p>binary AND operator (<code>&amp;</code>):</p>\n<p>A bit in the result variable is only set if it was set in both input variables. For example, <code>0b0011 &amp; 0b1010</code> will result in <code>0b0010</code>.</p></li>\n<li><p>binary OR operator (<code>|</code>)</p>\n<p>A bit in the result variable will be set if it was set in at least one of the input variables. For example, <code>0b0011 | 0b1010</code> will result in <code>0b1011</code>.</p></li>\n<li><p>binary NOT operator (<code>~</code>)</p>\n<p>A bit in the result variable will only be set if it was <em>not</em> set in the input variable. For example, <code>~0b0001</code> will result in <code>0b1110</code>.</p></li>\n<li><p>arithmetic shift operator (<code>&lt;&lt;</code>)</p>\n<p>A bit in the result variable will only be set if the bit  <code>n</code> positions to the right in the first variable was set, where <code>n</code> is the second variable. If that position does not exist, the bit is not set. For example, <code>0b0000 0b0101 &lt;&lt; 2</code> will result in <code>0b0001 0b0100</code>.</p></li>\n</ol>\n<p>And here's how we could use them to set the <em>lowest</em> byte in dword <code>a</code> to that of char <code>c</code>, assuming a 32bit processor for simplicity's sake:</p>\n<pre><code>unsigned int a = 0xa5a5a505;\nunsigned char c = 0xa0;\n</code></pre>\n<p>First, we'll want to zero-out the lowest byte. We'll do that by ANDing the dword with a dword that has all of it's bits set <em>except</em> the 8 lowest bits (aka it's lowest byte).</p>\n<pre><code>a = a &amp; 0xffffff00\n</code></pre>\n<p>Alternatively, we can use the NOT binary operator to create <code>0xffffff00</code> in a slightly cleaner manner, as follows:</p>\n<pre><code>a = a &amp; ~0xff\n</code></pre>\n<p>After either of those lines, which perform exactly the same thing (and will look identical in assembly), <code>a</code>'s value would be <code>0xa5a5a500</code>.</p>\n<p>Now, we'll need to assign the value of <code>c</code> to that same byte. We'll use the OR bitwise operator in the following manner:</p>\n<pre><code>a = a | c;\n</code></pre>\n<p>Which will result in <code>a</code> having the value of <code>0xa5a5a5a0</code>.</p>\n<p>Now, if we would like to do the same for the 2nd byte in the integer we'll shift the values by 8 bits before executing the same operators, like this:</p>\n<pre><code>a = a &amp; ~(0xff &lt;&lt; 8)\n</code></pre>\n<p>Is equivalent to:</p>\n<pre><code>a = a &amp; ~(0xff00)\n</code></pre>\n<p>Which is identical to:</p>\n<pre><code>a = a &amp; 0xffff00ff\n</code></pre>\n<p>Which will result with:</p>\n<pre><code>a = 0xa5a50005\n</code></pre>\n<p>And now, we'll add <code>c</code> at the 2nd byte's position:</p>\n<pre><code>a = a | (c &lt;&lt; 8)\n</code></pre>\n<p>Which in our example is:</p>\n<pre><code>a = a | 0xa000\n</code></pre>\n<p>Which will result in <code>0xa5a5a005</code></p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Mar 27, 2017 at 16:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}