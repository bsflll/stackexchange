{
    "title": "Debug binary with GDB & disassembly: File format not recognized (elf headers corrupted)",
    "link": "https://reverseengineering.stackexchange.com/questions/9237/debug-binary-with-gdb-disassembly-file-format-not-recognized-elf-headers-cor",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse engineer a binary file using GDB and objdump. I can execute the binary in my linux shell, however the file seems to be changed in a way that it can't be debugged / reverse engineered.</p>\n<p>The <code>file</code> utility shows the following information:</p>\n<pre><code>mybinary: ERROR: ELF 64-bit LSB executable, x86-64, invalid version (SYSV), dynamically linked (uses shared libs)error reading (Invalid argument)\n</code></pre>\n<p>I get the follwing error in GDB:    </p>\n<pre><code>gdb ./mybinary\nmybinary: not in executable format: File format not recognized\n</code></pre>\n<p>and a similar error from objdump:</p>\n<pre><code>objdump -S -l -C -F -t -w ./mybinary\nobjdump: ./mybinary: File format not recognized\n</code></pre>\n<p>readelf shows this at the end of the output:</p>\n<pre><code>readelf -h ./mybinary\nreadelf: Error: Unable to seek to 0xffffff60e9000000 for string table\nreadelf: Error: Section 8 has invalid sh_entsize 6c2f343662696c2f (expected 18)\nreadelf: Error: Section 23 has invalid sh_entsize 0 (expected 10)\nreadelf: Error: no .dynamic section in the dynamic segment\n</code></pre>\n<p>What can I do to debug / reverse engineer this binary?</p>\n<p>Edit: gdb and objdump show these error messages, because the elf header of the binary was corrupted on purpose. Still don't know how to fix elf headers or debug this file.</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "lunfdxar",
    "time": "Jun 29, 2015 at 13:53",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Inspect the file with a hex editor. Is it actually a binary, or maybe something else, such as a bash script with the Executable flag set? The <code>sh_entsize</code> number actually contains a fragment of text: <code>/lib64/l</code> â€“ but not enough to decide what the entire file is.</span>",
            "time": null
        },
        {
            "user": "lunfdxar",
            "text": "<span class=\"comment-copy\">The binary is a C program compiled with GCC. It has probably been altered after compilation.</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Are you free to post the binary on a public server for others to take a look at it?</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">...yeahh ... can't you find another server that does not require login/registering? Wherever I click I get a popup for media player 'updates'/online casino's/etc. The button \"DATEI HERUNTERLADEN\" doesn't really do what it is supposed to do.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was not able to run the crackme here, but I did run \"strings\" on it:</p>\n<pre><code>$ strings crackme\n/lib64/ld-linux-x86-64.so.2\nlibc.so.6\nsrand\nputs\ntime\nclock\nstdin\ncalloc\nmalloc\nsystem\ngetline\nstrcmp\n__libc_start_main\n__gmon_start__\nGLIBC_2.2.5\n%z   \n%r   \n%j   \nAWAVAUE1\nATE1\n[]A\\A]A^A_\nt7\"Hc\n[]A\\A]A^A_\n$&amp;463847345GeF387\npkill -f gdb &gt; /dev/null 2&gt;&amp;1\npkill -f ddt &gt; /dev/null 2&gt;&amp;1\npkill -f ddd &gt; /dev/null 2&gt;&amp;1\nAxj54?_\nPassword check failed!\nCongratulations, password check successful!\n;*3$\"\nGCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2\n.shstrtab\n.interp\n.note.ABI-tag\n.note.gnu.build-id\n.gnu.hash\n.dynsym\n.dynstr\n.gnu.version\n.gnu.version_r\n.rela.dyn\n.rela.plt\n.init\n.text\n.fini\n.rodata\n.eh_frame_hdr\n.eh_frame\n.init_array\n.fini_array\n.jcr\n.dynamic\n.got\n.got.plt\n.data\n.bss\n.comment\n</code></pre>\n<p>And I have a couple of suggestions:</p>\n<ol>\n<li><p>Just above to the \"Password check failed!\" and \"Congratulations, password check successful!\" messages, you will find a \"Axj54?_\" string.  You should try it as a solution to the crackme.</p></li>\n<li><p>As there is a reference to \"strcmp\" you can try the LD_PRELOAD trick to replace strcmp() for your own function.  Here is an example code which will print the strings being compared and will also force them to be equal:</p></li>\n</ol>\n<p>Save this file as \"mystrcmp.c\":</p>\n<pre><code>#include &lt;stdio.h&gt;\nint strcmp ( const char * str1, const char * str2 ) {\n    printf(\"strcmp intercepted: str1=%s, str2=%s\\n\", str1, str2);\n    return 0;\n}\n</code></pre>\n<p>Compile it as:</p>\n<pre><code>$ gcc -shared -ldl mystrcmp.c -o mystrcmp.so\n</code></pre>\n<p>And run the crackme as:</p>\n<pre><code>$ LD_PRELOAD=./mystrcmp.so ./crackme\n</code></pre>\n<p>It should accept any answer as valid but it should also show you the real answer in one of the intercepted parameters.</p>\n</div>",
            "votes": "2",
            "user": "Maurice",
            "time": "Jun 29, 2015 at 6:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I would be surprised if the crackme is sophisticated enough to alter the executable, and kill debuggers (see the pkill strings), but dumb enough to store the password as a plain string. But the <code>LD_PRELOAD</code> is a good idea to try. Upvoted.</span>",
                    "time": null
                },
                {
                    "user": "lunfdxar",
                    "text": "<span class=\"comment-copy\">Thanks for the suggestion.  The strcmp compares the user input with \"Axj54?_\", if the input has a length &gt;= 7. That is not the correct password though, the strcmp and the hard coded string are probably just for confusion.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Could be that your GNU Debugger (<code>gdb</code>) doesn't support x86_64 architecture.</p>\n<p>So try under x86_64 version of it or try <a href=\"https://en.wikipedia.org/wiki/LLDB_(debugger)\" rel=\"nofollow\">LLDB Debugger</a> (<code>lldb</code>) which aims to replace it. It's possible that it could better handle the headers.</p>\n<p>See: <a href=\"http://lldb.llvm.org/lldb-gdb.html\" rel=\"nofollow\">gdb to lldb command map</a> page for more info.</p>\n</div>",
            "votes": "0",
            "user": "kenorb",
            "time": "Aug 5, 2015 at 10:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}