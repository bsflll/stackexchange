{
    "title": "Is this algorithm reversible?",
    "link": "https://reverseengineering.stackexchange.com/questions/29507/is-this-algorithm-reversible",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to solve a Crackme challenge. It takes my input password and makes the following operations.</p>\n<p>Finally, it compares the output with <code>0x1928F914</code></p>\n<p>How to reverse this algorithm to get a valid password.</p>\n<pre><code>  Result = 0;\n  for ( counter = 0; counter &lt; 10; ++counter )\n    Result = __ROR4__(Result, 9) ^ *(counter + Passwd);\n  return Result;\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "236",
    "tags": [
        "ida"
    ],
    "user": "Raafat",
    "time": "Nov 4, 2021 at 17:39",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">The xor calculation may flip some bits multiple times so there is a chance that multiple solutions for a valid password exist. If you have a calculation that has 10 * 6 bits as input (assuming that an ASCII char has about 6 bit of data effectively) and the output value has 32 bit, so you make 60 bit to 32 bits which means that multiple input value may be mapped to your output value.</span>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">If <code>@HKOFBKA@@</code> works I'll write up a proper answer.</span>",
            "time": null
        },
        {
            "user": "Raafat",
            "text": "<span class=\"comment-copy\">@Robert Thanks for replying. I quite understand you but I don't know how to get mulitiple input values. I need another hint</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">If the math behind a problem is too big for you a computer scientist simply switches to try-and-error mode. I would try to just pick a password and try it out. To avoid flipping bits multiple times I would prefer ASCII characters as password that have only one bit set. Then compare the result you get and the result you want on bit level. Try out what happens if you set another bit in the input and thus generate a pattern of how the output changes if you change one bit in input (or to be precise which input bit affects which output bit). If you got this matrix you can reverse the algorithm.</span>",
            "time": null
        },
        {
            "user": "Raafat",
            "text": "<span class=\"comment-copy\">Thanks a lot for your advice.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's not reversible in the sense that you can calculate one single input for the given target number due to loss of information as the rotation will overlap, but you can find inputs resulting in that number.</p>\n<p>I like to approach challenges like this by getting a feel for the dependencies of the input and output bits. For this, I typically write scripts that symbolically run the algorithm and print a textual repesentation of what happened.</p>\n<p>For the challenge here, I wrote the following Python script:</p>\n<pre><code>#!/usr/bin/env python3\ndef ror9_list(l):\n    return l[9:] + l[:9]\n\ndef getbit(d,n):\n    return (d &amp; (1 &lt;&lt; n)) != 0\n\ndef gen():\n    target = 0x1928F914\n\n    bits = []\n    for i in range(32):\n        bits.append(\"0\")\n\n    for i in range(10):\n        # ror\n        bits = ror9_list(bits)\n        \n        # then xor in new char\n        for n in range(8):\n            bits[n] += \"^ C(%d,%d) \" % (i,n)\n\n    for i in range(32):\n        print(\"bit %2d = %-30s must be %d\" % (i,bits[i][3:],getbit(target,i)))\n\ngen()\n</code></pre>\n<p>which generates the following text:</p>\n<pre><code>bit  0 = C(5,4) ^ C(9,0)                must be 0\nbit  1 = C(2,0) ^ C(5,5) ^ C(9,1)       must be 0\nbit  2 = C(2,1) ^ C(5,6) ^ C(9,2)       must be 1\nbit  3 = C(2,2) ^ C(5,7) ^ C(9,3)       must be 0\nbit  4 = C(2,3) ^ C(9,4)                must be 1\nbit  5 = C(2,4) ^ C(6,0) ^ C(9,5)       must be 0\nbit  6 = C(2,5) ^ C(6,1) ^ C(9,6)       must be 0\nbit  7 = C(2,6) ^ C(6,2) ^ C(9,7)       must be 0\nbit  8 = C(2,7) ^ C(6,3)                must be 1\nbit  9 = C(6,4)                         must be 0\nbit 10 = C(3,0) ^ C(6,5)                must be 0\nbit 11 = C(3,1) ^ C(6,6)                must be 1\nbit 12 = C(3,2) ^ C(6,7)                must be 1\nbit 13 = C(3,3)                         must be 1\nbit 14 = C(3,4) ^ C(7,0)                must be 1\nbit 15 = C(0,0) ^ C(3,5) ^ C(7,1)       must be 1\nbit 16 = C(0,1) ^ C(3,6) ^ C(7,2)       must be 0\nbit 17 = C(0,2) ^ C(3,7) ^ C(7,3)       must be 0\nbit 18 = C(0,3) ^ C(7,4)                must be 0\nbit 19 = C(0,4) ^ C(4,0) ^ C(7,5)       must be 1\nbit 20 = C(0,5) ^ C(4,1) ^ C(7,6)       must be 0\nbit 21 = C(0,6) ^ C(4,2) ^ C(7,7)       must be 1\nbit 22 = C(0,7) ^ C(4,3)                must be 0\nbit 23 = C(4,4) ^ C(8,0)                must be 0\nbit 24 = C(1,0) ^ C(4,5) ^ C(8,1)       must be 1\nbit 25 = C(1,1) ^ C(4,6) ^ C(8,2)       must be 0\nbit 26 = C(1,2) ^ C(4,7) ^ C(8,3)       must be 0\nbit 27 = C(1,3) ^ C(8,4)                must be 1\nbit 28 = C(1,4) ^ C(5,0) ^ C(8,5)       must be 1\nbit 29 = C(1,5) ^ C(5,1) ^ C(8,6)       must be 0\nbit 30 = C(1,6) ^ C(5,2) ^ C(8,7)       must be 0\nbit 31 = C(1,7) ^ C(5,3)                must be 0\n</code></pre>\n<p>The script emulates the hashing algorithm for a 10 character long input, where <code>C(x,y)</code> is the bit <code>y</code> of character <code>x</code> both starting at 0.</p>\n<p>For example, the last line</p>\n<pre><code>bit 31 = C(1,7) ^ C(5,3)                must be 0\n</code></pre>\n<p>says that the 8th bit of the 2nd character xored with the 4th bit of the 6th character has to be 0 in order to match the 32nd bit of the target number, which is 0. So that line tells you (due to the characteristics of xor) that these 2 bits simply must be equal but you're free to pick if both are 0 or 1.</p>\n<p>The textual representation thus gives you the necessary constraints for your input characters in order to result in the proper number.</p>\n<p>You could choose the correct characters by hand or write your own small program, but this is probably a nice exercise for a constraint solver like Z3.</p>\n<p>Just give it the constraints and let the solver figure out a valid input. You may wanna add constraints that the input characters are printable ASCII so you can enter the solution via keyboard.</p>\n</div>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Nov 18, 2021 at 4:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}