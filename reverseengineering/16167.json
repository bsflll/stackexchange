{
    "title": "Reverse engineering the virtual machine based crackme",
    "link": "https://reverseengineering.stackexchange.com/questions/16167/reverse-engineering-the-virtual-machine-based-crackme",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently working on some crackme, that has implemented an obfuscation technique, virtualisation. The virtual machine inside this crackme is a huge switch-case block (over 130 cases in it). I have already read dozens of article, but none are making things clear enough.</p>\n<p>I have found some info though, that I can find some buffer in memory, containing opcodes, that are native assembly code that are then interpreted by the virtual machine in switch cases block. </p>\n<p>Finding them will provide an opportunity to write a small disassembler on any language preferred, where in \"case\"-blocks would be the native operations written, like <code>printf(\"mov eax, dword ptr [ebp-4]\")</code>. That way I can figure out the algorithm of generating and checking the serial. </p>\n<p>However, I am stuck on finding that memory location with opcodes. Can anyone advice me something on how to find these, some techniques, or at least some good literature or tutorials on how to deal with such a thing? May be there are some common ways to crack this kind of crackme.</p>\n<p>Your help is very much appreciated.</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "3k",
    "tags": [
        "disassembly",
        "crackme",
        "assembly",
        "virtualizers"
    ],
    "user": "ShHolmes",
    "time": "Aug 23, 2017 at 16:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, the fact to turn a program into a bytecode that will be interpreted by a crafted VM which will be embedded into the software is a quite well-known technique of obfuscation. There have been numerous writings about it.</p>\n<p>If you want to find good pointers about it (and how to solve it in different ways), I would advise you to search for \"<em>VM-based obfuscation</em>\" on any search engine. It should provide you with a lot of literature about it.</p>\n<p>Now, solving this kind of thing require first to identify the internal language of the machine and then to understand the program that is coded into this language. For now, there have been only very few progress in automating this process and human is still heavily required to guide and understand what is going on in the obfuscated program.</p>\n<p>Yet, one nice thing you can look at is the fact that the VM itself usually looks like another obfuscation called \"<em>CFG-flattening</em>\" that can be partially processed automatically (even though, I cannot advise you any public tool about it). Anyway, the VM-based obfuscation and the CFG-flattening obfuscation are somehow very close (the CFG-flattening is a subcase of the VM-based obfuscation), so do not hesitate to look at these two techniques and the tricks that may be associated to it.</p>\n<p>Here is a bunch of pointers that you may find relevant:</p>\n<h3>About VM-based obfuscation</h3>\n<ul>\n<li><a href=\"https://recon.cx/2008/a/craig_smith/Neohapsis-VM-101.pdf\" rel=\"noreferrer\">Creating Code Obfuscation Virtual Machines</a>;</li>\n<li><a href=\"http://static.usenix.org/event/woot09/tech/full_papers/rolles.pdf\" rel=\"noreferrer\">Unpacking Virtualization Obfuscators</a>;</li>\n<li><a href=\"http://tigress.cs.arizona.edu/\" rel=\"noreferrer\">The Tigress C Diversifier/Obfuscator</a>;</li>\n<li><a href=\"https://github.com/JonathanSalwan/Tigress_protection\" rel=\"noreferrer\">Jonathan Salwan's deobfuscation method using symbolic execution</a> (see also these <a href=\"https://triton.quarkslab.com/files/csaw2016-sos-rthomas-jsalwan.pdf\" rel=\"noreferrer\">slides</a>);</li>\n<li><a href=\"https://www2.cs.arizona.edu/people/debray/Publications/ccs-unvirtualize.pdf\" rel=\"noreferrer\">Deobfuscation of Virtualization-Obfuscated Software: A Semantics-Based Approach</a>;</li>\n</ul>\n<p>Also, this <a href=\"https://reverseengineering.stackexchange.com/questions/7990/writeup-of-reverse-engineering-vm-based-obfuscation\">question</a> in this website is also relevant to look at.</p>\n<h3>About CFG-flattening</h3>\n<ul>\n<li><a href=\"https://reverseengineering.stackexchange.com/questions/2221/what-is-a-control-flow-flattening-obfuscation-technique\">What is a “control-flow flattening” obfuscation technique?</a>;</li>\n<li><a href=\"http://tigress.cs.arizona.edu/transformPage/docs/flatten/\" rel=\"noreferrer\">Control-Flow Flattening</a>;</li>\n<li><a href=\"https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html\" rel=\"noreferrer\">Deobfuscation: recovering an OLLVM-protected program</a>;</li>\n<li><a href=\"https://www2.cs.arizona.edu/%7Edebray/Publications/unflatten.pdf\" rel=\"noreferrer\">Reverse Engineering Obfuscated Code</a>;</li>\n</ul>\n<p>Of course, you may find more useful links by yourself! Feel free to improve the list on your own! I just hope that these ones will help you a bit.</p>\n</div>",
            "votes": "10",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ShHolmes",
                    "text": "<span class=\"comment-copy\">Thank you very much for this advice and the links to resources!</span>",
                    "time": null
                }
            ]
        }
    ]
}