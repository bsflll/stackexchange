{
    "title": "Decompile erlang .beam files compiled without debug_info",
    "link": "https://reverseengineering.stackexchange.com/questions/8895/decompile-erlang-beam-files-compiled-without-debug-info",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an app that use erlang .beam compiled files without debugging information.\nSomeone have some tips how to decompile or reverse engineering these?</p>\n<p>Thanks in advance</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "7k",
    "tags": [
        "patch-reversing",
        "erlang"
    ],
    "user": "itseeder",
    "time": "Oct 30, 2017 at 17:18",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">\"7.11  Is there a \"reverse compiler\" for BEAM files?\" (<a href=\"http://www.erlang.org/faq/tools.html\" rel=\"nofollow noreferrer\">erlang.org/faq/tools.html</a>)</span>",
            "time": null
        },
        {
            "user": "itseeder",
            "text": "<span class=\"comment-copy\">I already see it. But honestly did you understand how to pass to beam_lib arguments to obtain abstract_code?</span>",
            "time": null
        },
        {
            "user": "user12249",
            "text": "<span class=\"comment-copy\">Can't write comments, yet, so you get the link as an answer. The HelloMike challenge from the 9447 CTF was a beam file without debug_info. This writeup goes through the reversing process of the file: <a href=\"https://medium.com/@shanewilton/9447-ctf-2014-hellomike-writeup-ba812f012d5\" rel=\"nofollow noreferrer\">medium.com/@shanewilton/…</a></span>",
            "time": null
        },
        {
            "user": "itseeder",
            "text": "<span class=\"comment-copy\">Following your advice and link i get that i don't have debug_info and i get an empty file if i try to decompile it with the command: erl -noshell -eval ‘hipe:c(my_beam, [pp_beam]), init:stop().’ &gt; my_beam.disas. Do you have a tip? i get this error: (no error logger present) error: \"Error in process &lt;0.0.0&gt; with exit value: {fun ction_clause,[{init,prepare_run_args,[{eval,[&lt;&lt;11 bytes&gt;&gt;,&lt;&lt;11 bytes&gt;&gt;,&lt;&lt;13 byte s&gt;&gt;]}]},{init,map,2},{init,boot,1}]}\\n\"</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can get low-level bytecode source of .beam file with <strong>beam_disasm:file(module_name)</strong></p>\n<p>It's not easy to read it and takes time to figure it out. But it's much verbose and easier to comprehend than any real hardware assembly code. You can give it a try.</p>\n<p>For example, if you have a .beam file called \"my_module.beam\", open <em>erl</em> and type </p>\n<pre><code>file:write_file(\"/tmp/my_module_disasm\", io_lib:fwrite(\"~p.\\n\", [beam_disasm:file(my_module)])).\n</code></pre>\n<p>where <em>'/tmp/my_module_disasm'</em> is the path where you want to save the result.</p>\n</div>",
            "votes": "4",
            "user": "pumbo",
            "time": "Jul 7, 2015 at 3:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}