{
    "title": "Reverse engineering binary file to find flag",
    "link": "https://reverseengineering.stackexchange.com/questions/15141/reverse-engineering-binary-file-to-find-flag",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The binary is from here: <a href=\"https://files.fm/u/qtqmhhdd\" rel=\"nofollow noreferrer\">https://files.fm/u/qtqmhhdd</a></p>\n<p>I've been attempting this a couple of days. It's an ELF-64 bit file and I've gdb and IDA to see how it works for a while. You can run the file by</p>\n<pre><code>./reverse1.bin TEST (outputs a fail message)\n</code></pre>\n<p>In gdb it runs a _Z5checkPc function and you can use \"disas check\". It uses the flag from address <code>0x601038</code> which is</p>\n<pre><code> synt{0p5r7996pnq3qn36377036onor7342s41pq30r3n3q0p46n283862718o7n6s78n}\n</code></pre>\n<p>But I don't see it where it actually gets used in the code.</p>\n<p>From the check function it seems to does a bunch of operations (or, add, ...) to your arg. I thought it would do a compare to see determine if it \"fails\" or \"success\" at <code>0x00000000004005b0</code> but that is not right, strangely.</p>\n<p>Any insights on what to do?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "11k",
    "tags": [
        "binary-analysis",
        "decompilation",
        "binary"
    ],
    "user": "user153882",
    "time": "Nov 7, 2021 at 10:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since this is a reversing challenge, I won't jump the gun right away and give you some tips which may help for this and future Challenges.</p>\n<p>The <code>check</code> function (<code>_Z5checkPc</code> is a mangled name) looks like this:\n<a href=\"https://i.sstatic.net/UbZsz.png\" rel=\"nofollow noreferrer\"><img alt=\"Ida representation\" src=\"https://i.sstatic.net/UbZsz.png\"/></a></p>\n<p>You already found the data the input value is compared to. But you failed to understand that there is no direct comparison here.</p>\n<ol>\n<li>We have a loop over a string value. That means it is highly probable each character is processed sequentially.</li>\n<li>Values are modified in an (obfuscated) way, before they are compared -&gt; there is some kind of coding here!</li>\n</ol>\n<p>Although there is dead code included in the function, you'll have to identify the modification which is taking place directly before the comparison (what is compared to what? how are these values calculated?).</p>\n<p>I strongly encourage you to ask follow up questions if there is anything in particular you don't understand. For minor questions or discussions, you can also drop by in the chat.</p>\n</div>",
            "votes": "4",
            "user": "Nordwald",
            "time": "Apr 11, 2017 at 12:45",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually, you got the flag!</p>\n<p>Do a ROT13 on</p>\n<pre><code>synt{0p5r7996pnq3qn36377036onor7342s41pq30r3n3q0p46n283862718o7n6s78n} \n</code></pre>\n<p>to get</p>\n<pre><code>flag{0c5e7996cad3da36377036babe7342f41cd30e3a3d0c46a283862718b7a6f78a}\n</code></pre>\n</div>",
            "votes": "0",
            "user": "MarianD",
            "time": "Nov 7, 2021 at 10:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}