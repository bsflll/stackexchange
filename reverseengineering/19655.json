{
    "title": "gdb for main and input parameters",
    "link": "https://reverseengineering.stackexchange.com/questions/19655/gdb-for-main-and-input-parameters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have one elf 32 application and not stripped, I use gdb info functions and it list only the memory address and function name, but there is no function name with \"<em>main</em>\", so any way to find the main function of the program?</p>\n<p>the other problem is when using info functions, it didn't list of the input parameter of each function, if i want to list all input parameter of each function, which command should be use?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "712",
    "tags": [
        "gdb"
    ],
    "user": "Jolin Wong",
    "time": "Oct 18, 2018 at 1:59",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Give, at least, the architecture you target. Saying '32-bit' is not enough!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The memory address of <code>main()</code> is a parameter of <a href=\"http://refspecs.linuxbase.org/LSB_3.0.0/LSB-PDA/LSB-PDA/baselib---libc-start-main-.html\" rel=\"nofollow noreferrer\"><code>__libc_start_main</code></a>:</p>\n<pre><code>int __libc_start_main(int *(main) (int, char * *, char * *),    &lt;-----pointer to main\n                      int argc, \n                      char * * ubp_av, \n                      void (*init) (void), \n                      void (*fini) (void), \n                      void (*rtld_fini) (void), \n                      void (* stack_end));\n</code></pre>\n<p>This means we can find the address of <code>main()</code> when <code>__libc_start_main()</code> is called in the <code>_start</code> routine (from <code>crt1.o</code>). </p>\n<p>In x86 environments, the memory address of <code>main()</code> will be pushed onto the stack prior to calling <code>__libc_start_main()</code>, but the way arguments are passed to functions depend on the <a href=\"https://en.wikipedia.org/wiki/Calling_convention\" rel=\"nofollow noreferrer\">calling convention</a> implemented by the compiler, and this can vary across compiler toolchains and CPU architectures (arguments may be passed in registers instead, for example). You did not give any information regarding the CPU family the object code in your ELF binary targets (beyond the fact that the architecture is 32-bit) or the compiler used to generate the binary, or any sample disassembly, so I can't be more specific.</p>\n<p>As far as I know, information about function parameters is not stored in the symbol table, so there is no command to list them. </p>\n<p>At runtime, you may use <a href=\"http://visualgdb.com/gdbreference/commands/info_args\" rel=\"nofollow noreferrer\"><code>info args</code></a> and <a href=\"http://visualgdb.com/gdbreference/commands/info_locals\" rel=\"nofollow noreferrer\"><code>info locals</code></a> to inspect the values of function arguments and local variables if your binary has been compiled with the <code>-g</code> flag.</p>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "Oct 18, 2018 at 3:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}