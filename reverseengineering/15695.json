{
    "title": "Reading Physical Memory",
    "link": "https://reverseengineering.stackexchange.com/questions/15695/reading-physical-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to determine how to read physical memory.  I understand that when the OS is in protected mode a process can only access the virtual memory assigned to it without resulting in a segmentation fault.  Is it possible to read physical memory using assembly language running in real mode?  I'm assuming that using assembly language would be the most effective method rather than using a higher-level language such as C.  My goal is to create a program which can scan physical memory to be used for memory forensic applications.  I am running a Windows OS using MASM.</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "assembly",
        "memory"
    ],
    "user": "stzy",
    "time": "Jun 27, 2017 at 12:34",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">if you can enable /debug on you can use windbgs Read physical apis</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>I understand that when the OS is in protected mode a process can only access the virtual memory assigned to it without resulting in a segmentation fault.</p>\n</blockquote>\n<p>Correct. By design, all processes are confined to their own address space and cannot access (without the OS help) the address space of other running processes. Kernel is responsible for the VM management of each running process and basically with the help of CR3 register which is the root pointer for Virtual address table for each process. CR3 is updated by kernel on each new scheduled process execution. All addresses in CR3 pointed table are physical addresses with corresponding virtual addresses mappings. (more on this later)</p>\n<blockquote>\n<p>Is it possible to read physical memory using assembly language running in real mode? I'm assuming that using assembly language would be the most effective method rather than using a higher-level language such as C.</p>\n</blockquote>\n<p>Why do you assume that it will be more effective? Doing physical memory inspection in real mode could be pretty challenging task and will require machine reboot which is not advisable for any forensic oriented memory acquisition. </p>\n<blockquote>\n<p>My goal is to create a program which can scan physical memory to be used for memory forensic applications.</p>\n</blockquote>\n<p>This goal could be achieved from the kernel space with the help of a specific kernel driver. Such kernel driver would need to parse a Virtual address table for each running process and kernel itself. There are several ways to do it:</p>\n<ul>\n<li>The main pointers for each process's VAT is stored in CR3 register or in Windows case also available in every <code>KPROCESS struct @ DirectoryTableBase</code>  more on it <a href=\"http://blog.nandaka.io/paging-virtual-to-physical-address-translation-via-windbg/\" rel=\"nofollow noreferrer\">here</a>. Once you have this pointer, you can manually parse the table and get the PHY to VIRT mappings. With this information, using <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff554435(v=vs.85).aspx\" rel=\"nofollow noreferrer\">Memory Manager Routines</a> you can get the contents of most memory pages. This is the most hard but more proper way to do it.</li>\n<li>Another way is with <code>MmGetPhysicalMemoryRanges</code>, but it can miss some ranges</li>\n</ul>\n<p>I also suggest you to go over <a href=\"http://www.rekall-forensic.com/docs/Tools/\" rel=\"nofollow noreferrer\">Rekall</a> tools where IMO is described one of cleaner forensic memory acquisition ways that you can do relatively easily and comprehensively. Go over some technical papers referenced there if you'd like to get a deeper knowledge on the subject. </p>\n<p>In general, forensic memory imaging is pretty broad subject and there are more ways to do it then I've described here.</p>\n</div>",
            "votes": "5",
            "user": "PhoeniX",
            "time": "Jun 27, 2017 at 17:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "stzy",
                    "text": "<span class=\"comment-copy\">I just visited the Rekall site.  This seems to be where i should start my quest seeing as how these tools are open source.  Thanks!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The language you write in won't make any difference here, the limitation on memory access is coming from the CPU and not the language you're using. In addition, you can't go to <code>realmode</code> after you've switched to protected mode. This is also a CPU limitation.</p>\n<p>But before that, a small correction:</p>\n<blockquote>\n<p>process can only access the virtual memory assigned to it without resulting in a segmentation fault.</p>\n</blockquote>\n<p>It's not that a process cannot access another process's memory, it simply cannot address, describe or reference it, since each process in protected mode has it's own address space. Therefore the address may be valid, so if you'll want to access address <code>0x401000</code> in another process and just execute <code>mov eax, DWORD PTR [0x401000]</code> you might get a value (instead of a segfault), it just won't be the value in that other process.</p>\n<p>Now, accessing a memory of another process is impossible to do from a user-mode process's standpoint. Only the kernel can access to memory of different processes (and even that is a complex operation). Because reading memory of other processes is sometimes needed, windows provides two convenient APIs called <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>ReadProcessMemory</code></a> and <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms681674(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>WriteProcessMemory</code></a>. You can also use <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366890(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>VirtualAllocEx</code></a> to allocate memory in a remote process.</p>\n</div>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Jun 27, 2017 at 15:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some quite old code here which reads physical memory under windows:\n<a href=\"http://nah6.com/~itsme/cvs-xdadevtools/itsutils/src/sysint-physmem.cpp\" rel=\"nofollow noreferrer\">http://nah6.com/~itsme/cvs-xdadevtools/itsutils/src/sysint-physmem.cpp</a></p>\n<p>In unix like systems you would read <code>/dev/mem</code> to access physical memory. However, most modern variants - linux, android, macos - disable this by default.</p>\n</div>",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "Jun 27, 2017 at 18:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}