{
    "title": "API hooking using DLL injection with Python C-Types",
    "link": "https://reverseengineering.stackexchange.com/questions/2715/api-hooking-using-dll-injection-with-python-c-types",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to write something using Python C-Types that hooks API calls and can be leveraged for unpacking executables. Currently my (Python with C-Types) code launches an executable in a suspended state then performs DLL injection using the <code>createremotethread</code> API. The DLL is loaded and the code is successfully executed.  </p>\n<p>I'd like the injected code to patch the executable so that it hooks certain API calls.  Eventually I'd like to find code caves but I'm currently just allocating virtual memory (<code>virtualalloc</code>).  I'd like to do this using just Python.  Is this possible? </p>\n<p>I imagine since it can be done in C it can be accomplished using Python's C-Types.  In my research I've seen people use <code>DiStorm</code> for certain parts of this, but again  I'd like to use Python. I understand that this has been done before but I'd like to code something up as a learning exercise.  Looking for some direction and any guidance is welcomed.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "7k",
    "tags": [
        "python",
        "dll-injection"
    ],
    "user": "user2743",
    "time": "Aug 31, 2013 at 5:16",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Have a look at my answer here: <a href=\"http://reverseengineering.stackexchange.com/a/1981/245\">reverseengineering.stackexchange.com/a/1981/245</a> ... if you want to patch the executable, personally I'd do that through an injected DLL. But it's a matter of taste. I.e. the injected DLL would do all the patching up, but be careful to avoid complications with the loader lock (i.e. don't use <code>LoadLibrary</code> and friends within <code>DllMain</code>).</span>",
            "time": null
        },
        {
            "user": "user2743",
            "text": "<span class=\"comment-copy\">I plan to put the code to patch it in the DLLMain of the DLL that I'm injecting.  Thanks for the link!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>please look at the following:</p>\n<ul>\n<li><a href=\"https://github.com/OpenRCE/pydbg\" rel=\"nofollow\"><strong>PyDBG</strong></a> - it's a python wrapper around Win Debug API and much more. The framework enables one to literally inspect every aspect of the running process by registering event handlers for BPs, memory executions/reads/writes, stack inspection, etc.. You can change whatever you want in the process you are debugging.\n<ul>\n<li><a href=\"http://wikisecure.net/security/pydbg-an-installation-guide\" rel=\"nofollow\">PyDBG installation</a> - it's a little bit old but can point you in the right direction.</li>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pydbg\" rel=\"nofollow\">Pre-compiled installation for PyDBG</a></li>\n</ul></li>\n<li><a href=\"http://winappdbg.sourceforge.net/\" rel=\"nofollow\">WinAppDbg</a> - python module allows developers to quickly code instrumentation scripts in Python under a Windows environment.</li>\n</ul>\n<p>By using the above tools you can write a general unpacker and if you find something more serious, there is no other way , other than do it manually and incorporate the knowledge into scripts. I've experience with the above tools for solving just the same problem you are trying to solve, and I can tell that those frameworks do a good job.</p>\n<p>For a start you can BP all memory allocation, protections changing and freeing APIs and inspect those buffers - (<em>VirtualAlloc(Ex), VirtualFree, VirtualProtect</em>). In addition, add <em>WriteProcessMemory</em> and inspect buffer that just to be written to other processes (in case of malware). For more advanced packers you can also inspect *UnmapViewOfSection APIs too.</p>\n</div>",
            "votes": "4",
            "user": "PhoeniX",
            "time": "Aug 31, 2013 at 7:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Also give <a href=\"https://github.com/Fitblip/vdb-fork\" rel=\"nofollow noreferrer\">github.com/Fitblip/vdb-fork</a> a look instead of PyDBG.</span>",
                    "time": null
                },
                {
                    "user": "Carlos Garcia",
                    "text": "<span class=\"comment-copy\">PyDBG is good but somehow outdated, vdb is kind of the bleeding edge but has a steep learning curve. In between you will find WinAppDbg (link already mentioned above). It is very good and the documentation and examples on the site will allow you to start writing your own scripts very quickly.</span>",
                    "time": null
                },
                {
                    "user": "viv",
                    "text": "<span class=\"comment-copy\">Here's an updated <a href=\"http://visi.kenshoto.com/viki/MainPage\" rel=\"nofollow noreferrer\">link</a> for vdb</span>",
                    "time": null
                }
            ]
        }
    ]
}