{
    "title": "How to find each interrupt's line in the Interrupt Descriptor Table",
    "link": "https://reverseengineering.stackexchange.com/questions/22276/how-to-find-each-interrupts-line-in-the-interrupt-descriptor-table",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to find the line number of the <code>0f05 syscall</code> interrupt with no success.</p>\n<p>I searched everywhere and couldn't find any way of doing that, it seems like this information is hard coded in the CPU (which make sense).</p>\n<p>My goal is to follow the debugger to the kernel code but currently I don't know which function I need to put a break point on.</p>\n<p>When I do \"step into\" on the <code>syscall</code> line it simply move to the next instruction like it is <code>mov</code> or something</p>\n<p>Thanks</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "208",
    "tags": [
        "windbg",
        "kernel-mode",
        "syscall"
    ],
    "user": "Daniel Cohen",
    "time": "Oct 9, 2019 at 8:31",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what do you mean by \"line number\"?</span>",
            "time": null
        },
        {
            "user": "Anton Angelov",
            "text": "<span class=\"comment-copy\">I assume the OP is trying to debug a user space process with WinDbg and wonders why stepping in \"syscall\" instruction does not lead him to the syscall handler code (in kernel mode), but instead it moves to the next instruction after syscall. Am I right?</span>",
            "time": null
        },
        {
            "user": "Daniel Cohen",
            "text": "<span class=\"comment-copy\">You guys are wrong. I'm debugging a VM with KD and can debug the kernel without any problem if I put the breakpoint on a kernel function, for example. For some reason you can't step into kernel code from the syscall instruction.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">No need to get confrontational, Anton was just making a guess from the information you provided. You can edit the question to clarify your issue (and maybe fix the title since it's not actually about interrupts)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The AMD64 <a href=\"https://www.felixcloutier.com/x86/syscall\" rel=\"nofollow noreferrer\"><code>syscall</code> instruction</a> is not an interrupt (neither software nor hardware). The destination of it is stored not in IDT but in a Machine-specific register (MSR) called <code>IA32_LSTAR</code>. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 9, 2019 at 10:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Daniel Cohen",
                    "text": "<span class=\"comment-copy\">Thanks, this is correct. I later found a page who explained just that. I would add that you can get the relevant information with the following command: <code>rdmsr 0xC0000082</code></span>",
                    "time": null
                }
            ]
        }
    ]
}