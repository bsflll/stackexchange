{
    "title": "Visual studio memory allocation reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/9099/visual-studio-memory-allocation-reverse-engineering",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I compile this code with Visual studio 2010 compiler:</p>\n<pre><code>#include \"stdafx.h\"\n#include &lt;iostream&gt;\nint main() {\n   int *p;\n   p = new int(255);\n   delete []p;\n}\n</code></pre>\n<p>The disassembly of it, is different from Dev C++. It seems it first checks if there is enough memory and then start the allocation. am I right?</p>\n<p>This is the disassembly : </p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/jMZjB.jpg\"/></p>\n<p>In the Orange node:</p>\n<p>Why <code>esi</code> and <code>edi</code> pushed to the stack?\nI've seen <code>mov eax,0CCCCCCCCh</code> before in books, What does this instruction do?\nWhat does the highlighted part of the orange node do? Is it a check to see if there is enough available memory?</p>\n<p>In the blue node:</p>\n<p><code>FFh</code> is equal to <code>255</code>, Can you explain how the memory is getting allocated?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "631",
    "tags": [
        "disassembly",
        "binary-analysis",
        "c++",
        "static-analysis",
        "compilers"
    ],
    "user": "Vlad",
    "time": "Jun 9, 2015 at 7:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You may want to read up on assembly before attempting to reverse engineer.</p>\n<ol>\n<li><p><code>esi</code> and <code>edi</code> are pushed on the stack because the compiler thought this routine modifies them. (It is wrong because only <code>edi</code> is used. Still, better safe than sorry.)</p></li>\n<li><p><code>mov eax,0cccccccch</code> moves the value 0CCCCCCCCh into register eax. Which is actually kind of self-explanatory.  That instruction in itself does nothing particularly useful, and you should be careful to ask such questions. It is clear from the <em>next lines</em> that the value gets stored into the Local Variable area, to fill it with a 'known' value, rather than having random values.</p>\n<p>The value 0CCCCCCCCh is used as a <a href=\"https://stackoverflow.com/questions/17644418/why-is-the-stack-filled-with-0xcccccccc\">sentinel value</a> and so if the context is \"it gets stored somewhere\", then its purpose is to catch uninitialized pointers.</p></li>\n<li><p>Again, time for an assembly refresher. The first highlighted line</p>\n<pre><code>add esp, 4\n</code></pre>\n<p>is not part of the following instructions, it's Stack Cleanup for the <em>previous</em> instruction: the <code>call</code>.</p>\n<p>The lines <code>mov [ebp+var_E0], eax</code> and <code>cmp [ebp+var_E0], 0</code> have nothing to do at all with any kind of \"allocation\" or \"memory\"! All it does is save <code>eax</code> – the return value of the previous <code>call</code> – into a local variable, and then test if the value is 0. That is boilerplate generated code for</p>\n<pre><code>var_E0 = new (uint);\nif (var_E0 == 0)\n   ...\n</code></pre>\n<p>which is the only 'check' there is, and only <em>after</em> attempting to allocate, not before.</p></li>\n<li><p>'Blue node': the code in assembler does what the C++ code is supposed to do. It <em>allocated</em> space for a single integer before (the <code>push 4</code> in the call to <code>new</code>) and in the blue node, it <em>stores</em> the value 255 into the newly allocated memory. If you expected it to allocate 255 bytes: well no. It does what the C++ code is supposed to do, which is explained in <a href=\"https://stackoverflow.com/questions/13797926/what-does-new-int100-do\">What does \"new int(100)\" do?</a> and the question of which it is marked a duplicate.</p></li>\n</ol>\n</div>",
            "votes": "7",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vlad",
                    "text": "<span class=\"comment-copy\">I already know assembly. The question is why it saves the previous <code>eax</code> into the local variable and check its value.....</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">That's explained in my last point #3. It is the original line <code>p = new int(255);</code>.</span>",
                    "time": null
                },
                {
                    "user": "Vlad",
                    "text": "<span class=\"comment-copy\">What do you mean  <i>after attempting to allocate, not before.</i> ?</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">The usual procedure is to <i>ask</i> the OS for some memory, and the return value is <code>NULL</code> when it could not give you the requested amount. Read <a href=\"http://en.wikipedia.org/wiki/C_dynamic_memory_allocation\" rel=\"nofollow noreferrer\">Wikipedia on <code>malloc</code></a> for details. This is preferred over first asking how much memory is free, because although \"free\", this may mean \"in total, but not in one contiguous block\". And if you are going to ask if a block of a certain size is available <i>before</i> (actually) requesting it, it may already be taken by another process.</span>",
                    "time": null
                }
            ]
        }
    ]
}