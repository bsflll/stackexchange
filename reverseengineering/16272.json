{
    "title": "Debugging EXE File in Windbg and How to set Breakpoints in Assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/16272/debugging-exe-file-in-windbg-and-how-to-set-breakpoints-in-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to set a breakpoint (created in assembly) and step into an EXE file line by line to watch registers and memory behavior. I have done this easily with gdb under Linux like this.</p>\n<pre><code>gdb -q ./AssembledLinkedFile -tui\nbreak _start  (or break *&amp;code for C using shellcode)\nrun\nstepi\n</code></pre>\n<p>This works perfectly. However, The documentation for Windbg does not seem so straight forward.</p>\n<p>Since using GoLink adds several lines of asm, I need to find my assembly and start at the beginning  (_start:)</p>\n<p>Current process.</p>\n<ol>\n<li>Write my assembly program.</li>\n<li>Assemble (on linux) -  nasm -f win64 messageBox64bit.nasm -o messageBox64bit.obj</li>\n<li>Link with golink (Windows) - golink \\console messageBox64bit.obj</li>\n<li>messageBox64bit.EXE created and works fine. Executed on Windows</li>\n</ol>\n<p>After I open the messageBox64bit.EXE in Windbg, how can I  set a breakpoint in my assembly (_start:), then step into? </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "gdb",
        "windbg",
        "shellcode",
        "nasm",
        "assembly"
    ],
    "user": "hexhatchet",
    "time": "Sep 5, 2017 at 15:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems  <code>bp $exentry</code> should set breakpoint on the entrypoint, then you can continue (<code>g</code>) until you hit it.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 5, 2017 at 15:11",
            "is_accepted": true,
            "comments": []
        }
    ]
}