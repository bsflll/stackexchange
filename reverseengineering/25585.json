{
    "title": "Determine Control-Flow Of A .NET Assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/25585/determine-control-flow-of-a-net-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using DnSpy is great, but it's very awkward to ascertain the control-flow of an executable. Is anyone able to advise on free-of-charge helpful apps that display a control-flow graph?</p>\n<p>IDA Home does not work on .NET assemblies, nor does Radare2 sadly.</p>\n<p>Hopefully someone can tell what they do?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "272",
    "tags": [
        ".net"
    ],
    "user": "Dalski",
    "time": "Jul 30, 2020 at 12:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I though it would be a nice pet-project so I've started building a PoC tool that can generate a CFG for a given method in the .NET assembly.</p>\n<p>The PoC uses <code>Mono.Cecil</code> to inspect the binary and produces a graph in a DOT language than later can be transformed into a picture with <code>dot</code> tool and works on IL level.</p>\n<p>A bit of technical info.</p>\n<p>First it determines leaders - instructions that will be the first instruction in the basic blocks (BB) - by going through the opcodes and checking the control flow type:</p>\n<ul>\n<li>If the instruction's control flow type is of type <code>Return</code> - the next one (if exists) will be a leader.</li>\n<li>If the instruction's control flow type is of type <code>Branch</code> - the destination of the branch instruction will be a leader</li>\n<li>If the instruction's control flow type is of type <code>Cond_Branch</code> - the destination of the branch and the next instruction will be leaders.</li>\n</ul>\n<p>Also doing that we can construct edges between those BBs, there will be different outgoing edges depending on the type of flow:</p>\n<ul>\n<li>If the instruction's control flow type is of type <code>Return</code> there will be no outgoing edge</li>\n<li>If the instruction's control flow type is of type <code>Branch</code> there will be an outgoing edge from the current instruction's BB to the branch's destination BB</li>\n<li>If the instruction's control flow type is of type <code>Cond_Branch</code> there will be outgoing edges from the current BB to the destination of the <code>Cond_Branch</code> BB and to the next instruction's BB</li>\n</ul>\n<p>The only thing we need to do having those info, is to generate a graph definition in the DOT langage.</p>\n<p>Calling the tool in the following way</p>\n<blockquote>\n<p><code>./cfg.exe Mono.Cecil.dll Mono.Cecil.MetadataBuilder.AddCustomDebugInformations | dot -Tpng -o cfg.png</code></p>\n</blockquote>\n<p>will generate for us a \"nice\" CFG for the method <code>AddCustomDebugInformations</code>.</p>\n<p><img alt=\"\" src=\"https://github.com/pawlos/cfg/raw/master/cfg-add-custom-debug-informations.png\"/></p>\n<p>It might fail for some strange (or normal) edge cases and of course there's a lot to improve but overall CFG is there ;)</p>\n<p>Link to the repo: <a href=\"https://github.com/pawlos/cfg\" rel=\"nofollow noreferrer\">https://github.com/pawlos/cfg</a></p>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Aug 6, 2020 at 8:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}