{
    "title": "Debug a windows service entry without windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/19230/debug-a-windows-service-entry-without-windbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An <a href=\"https://reverseengineering.stackexchange.com/questions/10910/reversing-a-windows-service\">answer to a similar question here</a> mentions that the entry of a windows service can be patched to allow attaching a debugger (in my case x64dbg). Google searches on the topic are all related to setting a breakpoint in the source.</p>\n<p>I'd like to know how exactly this is done when only a binary is available.</p>\n<p>I'm trying to port a windows service to Linux. I'm not very familiar with the windows OS. While I can step through normal routines, the service probes the hardware and sets up a few global values. For this reason I need to know exactly what is being sent/received during its initialization.</p>\n<p>I did try <code>windbg</code> but found it to be very difficult to use when no source code is present.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "kernel-mode",
        "x64dbg",
        "windows-10"
    ],
    "user": "Twifty",
    "time": "Sep 2, 2018 at 17:25",
    "comments": [
        {
            "user": "Devender Singh Rana",
            "text": "<span class=\"comment-copy\">Does x64dbg support kernel level debugging like windbg?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'll post my own answer here so I can find this again in the future.</p>\n<ol>\n<li>Using <a href=\"https://ntcore.com/?page_id=388\" rel=\"nofollow noreferrer\">CFF Explorer</a> open the service binary.</li>\n<li>Find the <code>AddressOfEntryPoint</code> in the <code>Optional Header</code>.</li>\n<li>Find the <code>.text</code> entry in <code>Section Headers</code>.</li>\n<li>Calculate <code>raw_offset = raw_address - virtual_address + AddressOfEntryPoint</code>.</li>\n<li>Within the built-in hex editor, navigate to <code>raw_address</code>.</li>\n<li>Change the two bytes there to <code>EB FE</code>.</li>\n<li>Save and exit.</li>\n<li>Modify <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ServicesPipeTimeout</code> to <code>0xFFFFFFFF</code> (requires reboot).</li>\n<li>Replace service with patched version and start (its status should become 'starting').</li>\n<li>In <code>x64dbg</code> check <code>Enable Debug Privilege</code>, restart <code>x64dbg</code>.</li>\n<li>Attach to the service.</li>\n<li>Replace the <code>EB FE</code> bytes with their original values.</li>\n<li>The entry point can now be debugged.</li>\n</ol>\n<p>Other notes - <code>x64dbg</code> will not stop at the entry point of a running service. Use the command <code>:EntryPoint</code> to display its address and scroll into view.</p>\n</div>",
            "votes": "7",
            "user": "ProGM",
            "time": "Oct 9, 2018 at 15:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}