{
    "title": "Need help reverse engineering an Android app",
    "link": "https://reverseengineering.stackexchange.com/questions/32749/need-help-reverse-engineering-an-android-app",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to make a script that allows me to download videos from an online streaming service. For that I need to make a http POST request to an url with the parameters <code>acceptVideo</code>, <code>t</code> and <code>s</code>, like this: <code>https://apivoyo.cms.protvplus.ro/api/v1/content/episode-78563/plays?acceptVideo=hls,dai,dash,drm-widevine&amp;t=2024-02-20T19:02:18+02:00&amp;s=6075e5e57b2dde8082037734da1fed02</code>. The <code>t</code> parameter is the time, but I can't figure out how <code>s</code> is being generated. I analyzed the network traffic but I couldn't find any trace of <code>s</code> except for this request. I unpacked the .apk (this is the <a href=\"https://play.google.com/store/apps/details?id=net.cme.voyo.ro\" rel=\"nofollow noreferrer\">app</a>) and found a smali file referencing to <code>s</code>:</p>\n<pre><code>    .param p9    # Ljava/lang/String;\n    .annotation runtime Lretrofit2/http/Query;\n        value = \"s\"\n    .end annotation\n.end param\n</code></pre>\n<p>I've done some testing, and found out that <code>s</code> is only valid for a minute, after that I get a HTTP 403 Error. It also seems that <code>s</code> is somehow related to <code>t</code>, since modifying <code>t</code> also yields a 403 Error.\nI probably need to dig deeper, but I don't know what to do next. Any help would be greatly appreciated</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "121",
    "tags": [
        "android"
    ],
    "user": "Andrei Iosifescu",
    "time": "Feb 20, 2024 at 18:19",
    "comments": [
        {
            "user": "user7290573",
            "text": "<span class=\"comment-copy\">It could well be some kind of token/hash/checksum etc. but it's difficult to say without digging into the code. When you watch other videos, do the <code>s</code> parameters look similar at all or are they totally random? If you can view videos on their website rather than the app, it might be easier to use browser debugging tools to look through their JavaScript.</span>",
            "time": null
        },
        {
            "user": "Andrei Iosifescu",
            "text": "<span class=\"comment-copy\">@user7290573 The token is always 32 characters long, but it is random every time. I ended up using the requests made by the webpage to extract the Information I needed, however this method is more complicated than using the API.</span>",
            "time": null
        },
        {
            "user": "Thorbjørn Ravn Andersen",
            "text": "<span class=\"comment-copy\">“s” may very well be a secret generated from another value supplied from the server using knowledge hidden inside the client to ensure that it is trusted.  It is usually only valid for a short time to make what you try to do harder.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The value s ( 6075e5e57b2dde8082037734da1fed02 ) looks like hexadecimal.</p>\n<p>I'm doubting it as AES encrypted data.\nI'll suggest you to use frida to log all AES encryption/decryption data, or use SimpleHook LSPosed module for it.</p>\n<p>After you've pointed out the source of the encryption, you'll have to look how the data used in it are generated.</p>\n<p>Also, since it is a DRM protected app, you're probably breaking DMCA. So, I hope it's for educational purposes only.</p>\n</div>",
            "votes": "0",
            "user": "Vansh Santoshi",
            "time": "Jul 22, 2024 at 9:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vansh Santoshi",
                    "text": "<span class=\"comment-copy\">That code is just retrofit using the variable s before POST. You'll have to hook it &amp; find out which classes calls for it, using frida scripts or SimpleHook logger.</span>",
                    "time": null
                }
            ]
        }
    ]
}