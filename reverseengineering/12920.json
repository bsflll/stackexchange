{
    "title": "Why can I not read .so file public functions compiled in C?",
    "link": "https://reverseengineering.stackexchange.com/questions/12920/why-can-i-not-read-so-file-public-functions-compiled-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can read the public functions (name and full signature) of some <code>.so</code> files that associated with Android APK, whereas others only show the function name.  </p>\n<p>For example, running this command only shows function names:</p>\n<pre><code>user$ /usr/local/bin/android-ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-nm -gDC libsccrypto.so \n00088952 T a2d_ASN1_OBJECT\n000940f4 T a2i_ASN1_ENUMERATED\n00093628 T a2i_ASN1_INTEGER\n000938a0 T a2i_ASN1_STRING\n000a6520 T a2i_GENERAL_NAME\n000a5bf6 T a2i_ipadd\n000a5d1a T a2i_IPADDRESS\n000a5d54 T a2i_IPADDRESS_NC\n         U abort\n         U accept\n000a94d0 T ACCESS_DESCRIPTION_free\n000f4db8 D ACCESS_DESCRIPTION_it\n000a9518 T ACCESS_DESCRIPTION_new\n00051124 T AES_bi_ige_encrypt\n00052164 T AES_cbc_encrypt\n00050d74 T AES_cfb128_encrypt\n00050d9c T AES_cfb1_encrypt\n00050dc4 T AES_cfb8_encrypt\n00050e10 T AES_ctr128_encrypt\n00051d5c T AES_decrypt\n00050d5c T AES_ecb_encrypt\n00051924 T AES_encrypt\n00050e38 T AES_ige_encrypt\n00050dec T AES_ofb128_encrypt\n</code></pre>\n<p>Whereas this library reveals more information to include function signatures:</p>\n<pre><code>user$ /usr/local/bin/android-ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-nm -gDC libBreakpad.so \n\n00006a24 T google_breakpad::ExceptionHandler::HandleSignal(int, siginfo*, void*)\n00006768 T google_breakpad::ExceptionHandler::SignalHandler(int, siginfo*, void*)\n00007500 T google_breakpad::ExceptionHandler::WriteMinidump(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const\n&amp;, bool (*)(google_breakpad::MinidumpDescriptor const&amp;, void*, bool), void*)\n0000766c T google_breakpad::ExceptionHandler::WriteMinidump()\n000077f8 T google_breakpad::ExceptionHandler::AddMappingInfo(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; cons\nt&amp;, unsigned char const*, unsigned int, unsigned int, unsigned int)\n000078f4 T google_breakpad::ExceptionHandler::RegisterAppMemory(void*, unsigned int)\n00007960 T google_breakpad::ExceptionHandler::UnregisterAppMemory(void*)\n00005f4c T google_breakpad::ExceptionHandler::InstallHandlersLocked()\n00006460 T google_breakpad::ExceptionHandler::RestoreHandlersLocked()\n00006c34 T google_breakpad::ExceptionHandler::WaitForContinueSignal()\n000079ac T google_breakpad::ExceptionHandler::WriteMinidumpForChild(int, int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::alloc\nator&lt;char&gt; &gt; const&amp;, bool (*)(google_breakpad::MinidumpDescriptor const&amp;, void*, bool), void*)\n00007284 T google_breakpad::ExceptionHandler::SimulateSignalDelivery(int)\n00007430 T google_breakpad::ExceptionHandler::SendContinueSignalToChild()\n00006d34 T google_breakpad::ExceptionHandler::DoDump(int, void const*, unsigned int)\n00005bd8 T google_breakpad::ExceptionHandler::ExceptionHandler(google_breakpad::MinidumpDescriptor const&amp;, bool (*)(void*), bool (*)(google_breakpad::M\ninidumpDescriptor const&amp;, void*, bool), void*, bool, int)\n00005bd8 T google_breakpad::ExceptionHandler::ExceptionHandler(google_breakpad::MinidumpDescriptor const&amp;, bool (*)(void*), bool (*)(google_breakpad::M\ninidumpDescriptor const&amp;, void*, bool), void*, bool, int)\n00006130 T google_breakpad::ExceptionHandler::~ExceptionHandler()\n00006130 T google_breakpad::ExceptionHandler::~ExceptionHandler()\n00012408 T google_breakpad::MemoryMappedFile::Map(char const*, unsigned int)\n00012688 T google_breakpad::MemoryMappedFile::Unmap()\n000123e4 T google_breakpad::MemoryMappedFile::MemoryMappedFile(char const*, unsigned int)\n000123d4 T google_breakpad::MemoryMappedFile::MemoryMappedFile()\n000123e4 T google_breakpad::MemoryMappedFile::MemoryMappedFile(char const*, unsigned int)\n000123d4 T google_breakpad::MemoryMappedFile::MemoryMappedFile()\n00012630 T google_breakpad::MemoryMappedFile::~MemoryMappedFile()\n00012630 T google_breakpad::MemoryMappedFile::~MemoryMappedFile()\n0000df50 T google_breakpad::UTF32ToUTF16Char(wchar_t, unsigned short*)\n00010a24 T google_breakpad::LinuxPtraceDumper::ThreadsResume()\n</code></pre>\n<p>I thought function signatures had to be in the dynamic table of the <code>.so</code> file or else it would throw a linker error. Also, is there a good references to tell me how to read the dynamic symbol table?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "303",
    "tags": [
        "android",
        "apk"
    ],
    "user": "AlfredP",
    "time": "Jun 23, 2016 at 17:19",
    "comments": [
        {
            "user": "broadway",
            "text": "<span class=\"comment-copy\">It's the difference between C symbols (name only) and C++ symbols (which encode more information in the name mangling).</span>",
            "time": null
        },
        {
            "user": "AlfredP",
            "text": "<span class=\"comment-copy\">How does the loader/linker verify types and number of arguments if it only has a name and a memory address? I'm trying to hook such a function and would like to print out the function arguments in my hooked function before sending them to the legit function.</span>",
            "time": null
        },
        {
            "user": "broadway",
            "text": "<span class=\"comment-copy\">It doesn't. The caller and callee agree both conform to the conventions specified in the abi</span>",
            "time": null
        }
    ],
    "answers_data": []
}