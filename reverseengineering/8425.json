{
    "title": "Longest x86 Instruction [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8425/longest-x86-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/8425/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2015-03-11 20:21:31Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8425/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I read the recent article \"Longest x86 Instruction\" </p>\n<p><a href=\"http://blog.onlinedisassembler.com/blog/?p=23\" rel=\"nofollow\">http://blog.onlinedisassembler.com/blog/?p=23</a></p>\n<p>I attempted to reproduce the curious disassembly issue on a Win7x86 development platform using masm and as the article suggested, redunant prefixes.</p>\n<p>Talk is cheap, so here's a toy program (masm32):</p>\n<pre><code>.386 .model flat, stdcall\n\noption casemap:none\n\nincludelib \\x\\x\\kernel32.lib\nincludelib \\x\\x\\user32.lib\n\ninclude \\x\\x\\kernel32.inc\ninclude \\x\\x\\user32.inc\ninclude \\x\\x\\windows.inc\n\n.code\n\nstart:\n\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\n;...6 more bytes later\ndb 089h\ndb 0E5h\n\nend start\n\ninvoke ExitProcess, NULL\n</code></pre>\n<p>After linking and assembling, I opened the resulting executable in windbg. </p>\n<p>To my disappointment, when I single step, unassemble the $exentry, etc. windbg simply sees the prefixes/bytes as individual instructions, says 'to hell with it' and executes only the valid instructions.</p>\n<p>Is there something I'm missing?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "windbg"
    ],
    "user": "grepNstepN",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Saying 'to hell with it' seems to be the best thing a debugger can do when it sees unneccesary redundant prefixes.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">I'm voting to close this question as off-topic because it is about processor features, not reverse engineering.</span>",
            "time": null
        },
        {
            "user": "user1354557",
            "text": "<span class=\"comment-copy\">On the contrary, attempting to discern the processor's behavior is a form of reverse engineering.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">So what is the actual question?</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">\"windbg .. executes only the valid instructions\" -- it cannot <i>but</i> execute the REPEs, but it only <i>halts</i> on certain positions. Similarly, it cannot stop \"in the middle of\", for example, <code>mov al, fs:[ebx+4*edx]</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is there something I'm missing?</p>\n</blockquote>\n<p>The disconnect is that the <a href=\"http://www2.onlinedisassembler.com/odaweb/\" rel=\"nofollow\">ODA</a> disassembler referenced in <a href=\"http://blog.onlinedisassembler.com/blog/?p=23\" rel=\"nofollow\">http://blog.onlinedisassembler.com/blog/?p=23</a> produces different output than WinDbg's disassembler given the same input.</p>\n<p>Perhaps what you're \"missing\" is based on the assumption that all disassemblers produce the same output given the same input, which is not a correct assumption to make.</p>\n</div>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 9, 2015 at 17:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">you're right, I just realized the OS's/software's disassembler isn't 1:1 with processor behavior, e.g. like Windows not implementing Ring2 although 80386+ gives you that CPL. Updated my question on another stackExhange [link] (<a href=\"http://programmers.stackexchange.com/questions/275719/longest-x86-instruction/275750#275750\" title=\"longest x86 instruction\">programmers.stackexchange.com/questions/275719/â€¦</a>)</span>",
                    "time": null
                }
            ]
        }
    ]
}