{
    "title": "Making sense of an encoded JSON string",
    "link": "https://reverseengineering.stackexchange.com/questions/30043/making-sense-of-an-encoded-json-string",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I extracted a game file, which is in JSON format, it's a bit too long, so I'll omit parts of it:</p>\n<pre><code>{name: \"\\xEE\\xB5k~u\\u03D7\\x80\\xF8\\xE0\\xE2\\xC5\\xCA\\xEE\\u04CF\\x90\\xBE\\xD8Cs\\xFE\\xA5Ec\\u007F\\u0006\\x85\\xA2\\xB2\\xD87\",\n      f03: 2,\n      f04: 300,\n      f05: \"\\xE5\\u007Fe\\u0001\\xF7\\xFCC\\x87\\xF0xK\\xF7\",\n      desc: \"l8\\x88\\xF6\\xCE\\u0012\\xC8-8g&gt;{\\xE6&amp;\\xAB\\u03E4f\\x8C\\u0012\\xDD/\\x81\\x91\\xF7\\u007F\\xD2\\u0019\\u000E\\x87\\xF7\\xF07Ek\\xFC\\xCEtU\\u0002\\x9F@eJ\\xB0\\xFA\\x93\\xA8&gt;5\\x9BK\\xAF\\xE0\\u001D\\xA1\\u0006\\xE8\\u001D.r\\xF5\\u041F\\u05CB1\\xF5J\\u000F\\\"\\xC6\\u001B4\\xB7\\u0000\\x97o\\xA4&gt;\\u00158q\\xE4\\x9B\\xE2z51N\\fe{\\xECV\\u0011\\xAE']|#X'\\b\\xCE\\u0005\\xEEg\\xC3\\uFE9Be\\u0018\\xC0\\xDE\\u0006&gt;;\\u0002\\xFB\\u0002;j\\xC4{\\xE9\\u0013P\\xE8a\\xC9C\\x8B\\xE65\\x87\\u063Ac(o\\xB1\\xD9\\xF4\\xAF\\xC0_D\\u001B\\xE7\\u0013n\\u0306\\x81\\xD9W\\xA8\\xC9:\\x96\\x93\\xC7\\u0006\\u0014\\xA8\\x8E\\xC0\\x96*q\\u000E&lt;\\xC1\\xA1\\u0005\\xC6\\xD9\\xE5\\u0007(t;\\x92\\x8B^\\x91c\\xFB=l\"}\n</code></pre>\n<p>I'm having trouble how to make sense of <code>name</code>, <code>f05</code> and <code>desc</code> fields, no idea how to decode them. It seems like a mix of hex and Unicode.</p>\n<p>The game is able to convert them into readable format, so there must be some way to decode them.</p>\n<p>For reference, the <code>name</code> string translates to <code>'[A Duty to Honor]' Kirito</code>, and <code>f05</code> is for <code>serif</code>.</p>\n<p>If anyone can tell me on how to decode this, it'll be appreciated.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "225",
    "tags": [
        "disassembly",
        "file-format",
        "hex"
    ],
    "user": "Agnarsh",
    "time": "Feb 25, 2022 at 13:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>They are <em>encoded character strings</em> in the form of <em>byte streams</em>.</p>\n<p>But before encoded, they are highly likely somehow obfuscated or  <strong>encrypted</strong> – and this is the main problem.</p>\n<p>The <em>decoding</em> itself is not a such problem – you need to know how they are encoded, or try different encoders one after other (in spite there are <a href=\"https://docs.python.org/3.10/library/codecs.html#standard-encodings\" rel=\"nofollow noreferrer\">many tens of them</a> as <code>big5</code>, <code>cp273</code>, <code>iso-8859-5</code>, <code>gb18030-2000</code> – but some of them are only for specific natural language / languages).</p>\n<p>If you know the encoder (or at least the natural language of your game to limit the set of possible encoders), you may decode it, e.g. in Python, as I will show you:</p>\n<p>Preparation:<br/>\nI will encode a string (in Python) to receive a byte stream similar to yours:</p>\n<pre><code>&gt;&gt;&gt; \"Ľαaβ4γ•a∞\".encode(\"utf-8\")\nb'\\xc4\\xbd\\xce\\xb1a\\xce\\xb24\\xce\\xb3\\xe2\\x80\\xa2a\\xe2\\x88\\x9e'\n</code></pre>\n<p>Note the notation - the letter <code>b</code> (for byte sequence) immediately followed by the encoded string in apostrophes (quotes are good, too).</p>\n<p><strong>Proper decoding:</strong></p>\n<pre><code>&gt;&gt;&gt; b'\\xc4\\xbd\\xce\\xb1a\\xce\\xb24\\xce\\xb3\\xe2\\x80\\xa2a\\xe2\\x88\\x9e'.decode(\"utf-8\")\n'Ľαaβ4γ•a∞'\n</code></pre>\n<p>Particularly, for the value <code>\"\\xE5\\u007Fe\\u0001\\xF7\\xFCC\\x87\\xF0xK\\xF7\"</code> of your key <code>f05</code> (don't forget to put <code>b</code> at the beginning):</p>\n<pre><code>&gt;&gt;&gt; b\"\\xE5\\u007Fe\\u0001\\xF7\\xFCC\\x87\\xF0xK\\xF7\".decode (\"utf-8\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xe5 in position 0: invalid continuation byte\n</code></pre>\n<p>So it is definitely NOT encoded as <code>utf-8</code>.</p>\n<p>You may try other decoders from <a href=\"https://docs.python.org/3.10/library/codecs.html#standard-encodings\" rel=\"nofollow noreferrer\">this table</a>, e.g. <code>unicode_escape</code>:</p>\n<pre><code>&gt;&gt;&gt; b\"\\xE5\\u007Fe\\u0001\\xF7\\xFCC\\x87\\xF0xK\\xF7\".decode (\"unicode_escape\")\n'å\\x7fe\\x01÷üC\\x87ðxK÷'\n</code></pre>\n<p>It is better, but – as I already wrote – you will never obtain directly the string <code>\"serif\"</code>, because it is in the encrypted form. You have in addition to <strong>decrypt</strong> the result of decoding, but it is impossible without knowledge of the encryption schema and a decryption key.</p>\n</div>",
            "votes": "0",
            "user": "MarianD",
            "time": "Feb 15, 2022 at 17:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Agnarsh",
                    "text": "<span class=\"comment-copy\">The game uses a library called libcocos2dcpp.so which is in C++ as far as I know. So basically I'll need the \"key\" which helps to decrypt the text right?</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">You need a key <b>and</b> to know <i>how</i> it is encrypted (encryption algorithm / schema), if it is properly encrypted (i.e. by known established algorithms / schemas). But it may be obfuscated in another way (i.e. amateurishly). No multibyte decoding (utf-8, utf-16, utf-16-le, ...) gives something similar to your string <code>\"serif\"</code>, so it is evidently somehow changed (encrypted, obfuscated) before transforming to the byte stream (encoded). Or it may be first encoded, then changed.</span>",
                    "time": null
                }
            ]
        }
    ]
}