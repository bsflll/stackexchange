{
    "title": "Getting \"Flow analysis was incomplete, some code may be missing\" on WinDbg",
    "link": "https://reverseengineering.stackexchange.com/questions/30709/getting-flow-analysis-was-incomplete-some-code-may-be-missing-on-windbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to perform static analysis on the Win32 function <code>CreateFileW</code>, so I loaded <code>kernel32.dll</code> using WinDbg and perform the command <code>uf kernel32!CreateFileW</code>.</p>\n<p>But I am seeing the following output instead.</p>\n<pre><code>0:000&gt; uf kernel32!CreateFileW\nFlow analysis was incomplete, some code may be missing\nkernel32!CreateFileW:\n00000001`80024b60 ff2582d50500    jmp     qword ptr [kernel32!_imp_CreateFileW \n(00000001`800820e8)]\n0:000&gt; uf kernel32!_imp_CreateFileW\nNo code found, aborting\n</code></pre>\n<p>Did I made any mistake?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "159",
    "tags": [
        "windows",
        "x86-64",
        "windows-10"
    ],
    "user": "caramel1995",
    "time": "Jul 29, 2022 at 16:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>kernel32!CreateFileW is just a thunk in latest windows\nwhich can be observed by the import call</p>\n<pre><code>jmp     qword ptr [kernel32!_imp_CreateFileW (00000001`800820e8)]\n</code></pre>\n<p>The Function is implemented in kernelbase!CreateFileW</p>\n<p>You cannot disassemble a pointer like you do</p>\n<pre><code>uf kernel32!_imp_CreateFileW\n</code></pre>\n<p>x64 uses RIP relative Addressing</p>\n<p>you have to add the size of instruction to the Symbols Address and add the Relative Address in the Instruction and dereference the pointer to get the correct value for performing uf</p>\n<p>Address Of Symbol</p>\n<pre><code>0:000&gt; x KERNEL32!CreateFileW\n00007ffb`d7744b60 KERNEL32!CreateFileW (CreateFileW)\n</code></pre>\n<p>length of instruction = 6 (ff25eac50500)</p>\n<pre><code>0:000&gt; u KERNEL32!CreateFileW l1\nKERNEL32!CreateFileW:\n00007ffb`d7744b60 ff25eac50500    jmp     qword ptr [KERNEL32!_imp_CreateFileW (00007ffb`d77a1150)]\n</code></pre>\n<p>Rip Relative Constant in instruction</p>\n<pre><code>0:000&gt; ? dwo(KERNEL32!CreateFileW+2)\nEvaluate expression: 378346 = 00000000`0005c5ea\n</code></pre>\n<p>addup and dereference the vale and perform uf on that offset</p>\n<pre><code>0:000&gt; ln poi(dwo(KERNEL32!CreateFileW+2)+KERNEL32!CreateFileW+6)\n(00007ffb`d6db9d30)   KERNELBASE!CreateFileW   |  (00007ffb`d6db9db0)   KERNELBASE!CreateFileInternal\nExact matches:\n0:000&gt;\n</code></pre>\n<p>windbg already resolves the pointer  either 00000001<code>800820e8 in your post or  00007ffb</code>d77a1150 in my answer</p>\n<p>you can directly dereference it to perform uf on the resultant offset</p>\n<pre><code>0:000&gt; ln poi(00007ffb`d77a1150)\n(00007ffb`d6db9d30)   KERNELBASE!CreateFileW   |  (00007ffb`d6db9db0)   KERNELBASE!CreateFileInternal\nExact matches:\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 12, 2022 at 20:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}