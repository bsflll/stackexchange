{
    "title": "How do I restore modified firmware to a read only mount",
    "link": "https://reverseengineering.stackexchange.com/questions/6503/how-do-i-restore-modified-firmware-to-a-read-only-mount",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have managed to get a root shell on my web filtering router by plugging into a UART on the PCB which allowed me to see a process (lockbox.bin - ELF executable) running which handles most of the filtering functions. After extracting the lockbox.bin file and analyzing it with IDA pro, I've made some modifications to the file. I now need to get it back on the device to see if the changes worked, but when I try to make changes to the filesystem I get a message saying that the file system is read only. I suppose it's only a matter of mounting the filesystem as read/write, but I'm not sure how to do that (Access the boot loader?). The Busybox instance on the device is missing the mount command. The router in question is a re-branded realtek rtl8196b. </p>\n<p>Any Suggestions?</p>\n<p>Disclaimer: This is the first time that I've have done something like this so I may be missing a very basic step. Any help would be appreciated.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "365",
    "tags": [
        "disassembly",
        "linux",
        "embedded"
    ],
    "user": "Nopslide",
    "time": "Oct 19, 2014 at 15:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's very probable that the firmware is stored in a <code>squashfs</code> image, which is compressed (and supposed to be read-only - it can't be mouted read-write, but must be created through external means), The squashfs image will probably be stored in some piece of flash ram, which can be accessed as <code>/dev/mtbn</code> on many linux embedded devices, which multiple values of <code>n</code> refering to different parts of the firmware (boot loader etc.). </p>\n<p>Often, the boot loader itself is in <code>/dev/mtb0</code>, and has commands to write to the other <code>/dev/mtb</code> blocks.</p>\n<p>So, your course of action would be</p>\n<ul>\n<li>dump the various <code>/dev/mtb</code> blocks to files, check which is a squashfs, or maybe different type of file system, that contains your lockbox.bin</li>\n<li>rebuild that filesystem with your different version of lockbox.bin, and hope it doesn't grow significantly larger to exceed the size of the <code>/dev/mtb</code> block</li>\n<li>check how to boot to the boot loader from outside, without starting linux</li>\n<li>use some boot loader to flash that filesystem to the router</li>\n<li>reboot the router, and hope you didn't brick it in the process.</li>\n</ul>\n<p>As you say</p>\n<blockquote>\n<p>This is the first time that I've have done something like this</p>\n</blockquote>\n<p>the chance of </p>\n<blockquote>\n<p>brick it in the process.</p>\n</blockquote>\n<p>is certainly non-zero, so proceed with caution.</p>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Oct 19, 2014 at 20:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nopslide",
                    "text": "<span class=\"comment-copy\">Thanks for the information and Advice. Step 1: I did that and found the file system under /dev/mtd. I has a squashFS files sytem (also under the device as /dev/mtdblock1) Step 2: Do you just rebuild the file system using the directory structure of the host that you are working on? Step 3: Any suggestions on where to start looking? Step 4: Same. Once again, thanks for your help.</span>",
                    "time": null
                }
            ]
        }
    ]
}