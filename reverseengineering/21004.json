{
    "title": "GUARD_PAGE memory breakpoints with gdb?",
    "link": "https://reverseengineering.stackexchange.com/questions/21004/guard-page-memory-breakpoints-with-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I came across a question the other day on reddit: How can we use PAGE_GUARD-based memory breakpoints in GDB (not hardware breakpoints)?</p>\n<p>Ollydbg, x64dbg and IDA PRO all support these types of breakpoints, but I couldnt find a way in GDB.</p>\n<p>If this is not available, is it possible to set the PAGE_GUARD bit manually in GDB?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "565",
    "tags": [
        "ida",
        "gdb",
        "memory",
        "breakpoint"
    ],
    "user": "bernd feinman",
    "time": "Mar 31, 2019 at 0:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to <code>man mmap</code></p>\n<blockquote>\n<pre><code>  PROT_NONE  The memory cannot be accessed at all.\n  PROT_READ  The memory can be read.\n  PROT_WRITE The memory can be modified.\n  PROT_EXEC  The memory can be executed.\n</code></pre>\n</blockquote>\n<p><code>PROT_NONE</code> will act like a guard page by hitting a <code>SIGSEGV</code> when accessed.</p>\n<p>The page with <code>PROT_NONE</code> looks like this in the map during runtime</p>\n<pre><code>    0x7ffff7ff7000     0x7ffff7ff8000 ---p     1000 0\n</code></pre>\n<p><code>gdb</code> allows you to call arbitrary functions in the process space. A simple solution would be to run this under gdb </p>\n<pre><code>print mprotect($address,0x1000,0)\n</code></pre>\n<p>This would set <code>PROT_NONE</code> = 0 permissions on the page and it will act as a guard page.\nIf after hitting <code>SIGSEGV</code> you want to remap the page as rw (PROT_READ|PROT_WRITE)</p>\n<pre><code>print mprotect($address,0x1000,3)\n</code></pre>\n<p>If you want to add an extra page mapped as guard page like the page heaps in windows, you can call mmap.</p>\n<pre><code>print /a mmap($address+0x1000,0x1000,0,0x22,-1,0)\n</code></pre>\n<p>Here 0x22 is <code>MAP_PRIVATE|MAP_ANONYMOUS</code></p>\n</div>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Apr 4, 2019 at 6:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "bernd feinman",
                    "text": "<span class=\"comment-copy\">Thanks! I am surprised though gdb doesnt offer it directly.</span>",
                    "time": null
                },
                {
                    "user": "bernd feinman",
                    "text": "<span class=\"comment-copy\">Hm, another thing: is there really no way to get the current protection of the page? Otherwise it  would be hard to undo the memory-breakpoint and expose me to anti-debugging actions.</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">There's no way to read the protections from any api/syscall. Worst case you can parse <code>/proc/&lt;pid&gt;/maps</code>. Some gdb extensions like <code>pwndbg</code> give a <code>vmmap</code> command which does this.</span>",
                    "time": null
                }
            ]
        }
    ]
}