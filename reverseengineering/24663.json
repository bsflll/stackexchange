{
    "title": "undname.exe: invalid undecorated names",
    "link": "https://reverseengineering.stackexchange.com/questions/24663/undname-exe-invalid-undecorated-names",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've discovered undname.exe today and tried it on several functions. I got some incorrect results and I'm wondering why. I see two main reasons that could do that:</p>\n<ul>\n<li>The mangling can change between msvc versions and I should find the version of undname.exe that fit my target</li>\n<li>The tool I use to extract the function names gives inaccurate results</li>\n</ul>\n<p>Here's an example of a wrong result: </p>\n<pre><code>Undecoration of :- \"?GetClassNameW@User@@QAE?AVFName@@H@Z\"\nis :- \"public: class FName __thiscall User::GetClassNameW(int)\"\n</code></pre>\n<p>After trying this signature and receiving a stack error, I looked at the disassembled code of <code>GetClassNameW</code> and realised the function signature actually was <code>void(__thiscall* user_getClassNameW)(User*, FName*, int);</code> </p>\n<p>I do not know the exact version of msvc used to compile the example and it seems that the only way to download undname.exe is to install visual studio, so I can't easily test this.</p>\n<p>Any idea where the problem could come from?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "397",
    "tags": [
        "c++",
        "msvc",
        "name-mangling"
    ],
    "user": "Stud",
    "time": "Apr 9, 2020 at 17:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As @blabb says undname is correct so it's your other tool that is 'incorrect'.\nHowever, it's worth looking at this in more detail as it's probably not as incorrect as you think.</p>\n<p>To understand this though you have to delve a little into ABIs and think how a C++ function call works in practice.</p>\n<p>Firstly, a C++ member function is in some sense like a C function with a 'hidden' <code>this</code> pointer passed as the first parameter.  (This is what <code>__thiscall</code> is saying behind the scenes.)</p>\n<pre><code>// this function\nvoid class::member();\n// is really\nvoid __thiscall class::member();\n\n// and works like\nvoid __stdcall class_member( Class* this );\n</code></pre>\n<p>Secondly, the caller of function returning a ('complicated') struct/class is responsible for allocating the memory for the struct/class and passing the function a pointer to this memory.  The function can then write the relevant details there.  Hence -</p>\n<pre><code>// this function\ncomplex_struct_return_type function();  \n\n// works like\nvoid function( complex_struct_return_type * );\n</code></pre>\n<p>Putting these together (and ignoring accessiility specifiers)-</p>\n<pre><code>// this function\nFName __thiscall User::GetClassNameW( int param );\n\n// works like\nvoid __stdcall User_GetClassNameW( User* this, FName* pointer_to_return_value, int param );\n</code></pre>\n<p>You will see this is very similar is essence to your other tool's output.\nI'd just observe that -</p>\n<ul>\n<li>it is still labelling the function as <code>__thiscall</code>.  This doesn't quite make sense but is probably being done to indicate that the first parameter has special treatment in 32-bit code.</li>\n<li>it is changing the case of the initial letters.  This again is strictly incorrect.</li>\n</ul>\n<hr/>\n<p>How these parameters get passed (by msvc) depends on whether it's compiled for 32 or 64-bit .</p>\n<ul>\n<li>For 32-bit code, <code>this</code> has special treatment and is passed in <code>ecx</code> with the rest of the parameters on the stack.</li>\n<li>For 64-bit code, <code>this</code> is treated as like the other parameters and hence, being the first of up to 4 parameters being passed in registers will be in <code>rcx</code></li>\n</ul>\n</div>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Apr 11, 2020 at 8:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Stud",
                    "text": "<span class=\"comment-copy\">I didn't know about the complex struct return thingy. Intuitively I thought it would put the address in eax instead of on the stack. Thanks for your answer!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>there are lot of external utilities that can demangle a decorated name<br/>\ntry looking for <strong><a href=\"http://ishiboo.com/~danny/Projects/vc++filt/\" rel=\"nofollow noreferrer\">vc++filt</a></strong> /<br/>\nor some online demangler  like <strong><a href=\"https://demangler.com/\" rel=\"nofollow noreferrer\">this</a></strong></p>\n<p>or you can probably code one using dbghelp api UndecorateSymbolName() in python with ctype / pywin32</p>\n<p>also undname isn't erring your second guess must be right </p>\n<p>I just prototyped a similar function and looked at its demangled name<br/>\nit is entirely different from your demangle name here is a src code and output  </p>\n<pre><code>#include &lt;windows.h&gt;\n#include &lt;dbghelp.h&gt;\n#include &lt;stdio.h&gt;\nvoid uselessname(HWND hwnd,LPWSTR lpcname,int mcnt)\n{\n    printf(\"%p %ws %d\\n\",hwnd,lpcname,mcnt);\n    printf(\"%s\\n%s\\n%s\\n\",__FUNCTION__,__FUNCDNAME__,__FUNCSIG__);   \n\n}\nint main (void) \n{\n    HWND cwnd =NULL;\n    wchar_t cname[50] = {L\"MANGLE AND DEMANGLE\"};\n    int cnt = 50;\n    uselessname(cwnd,cname,cnt);\n    char ret[0x100] = {0};\n    UnDecorateSymbolName(\"?GetClassNameW@User@@QAE?AVFName@@H@Z\",ret,0x100,0);\n    printf(\"%s\\n\",ret);\n    return 0;\n}\n</code></pre>\n<p>output</p>\n<pre><code>gcw.exe\n0000000000000000 MANGLE AND DEMANGLE 50\nuselessname\n?uselessname@@YAXPEAUHWND__@@PEA_WH@Z   &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; must be like this\nvoid __cdecl uselessname(struct HWND__ *,wchar_t *,int)\npublic: class FName __thiscall User::GetClassNameW(int) &lt;&lt;&lt;&lt;&lt; result of yours \nwhich is ?GetClassNameW@User@@QAE?AVFName@@H@Z\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 9, 2020 at 20:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Stud",
                    "text": "<span class=\"comment-copy\">Thank you for your detailed answer, I definitly learned from it!</span>",
                    "time": null
                }
            ]
        }
    ]
}