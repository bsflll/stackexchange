{
    "title": "What types are read from byte array?",
    "link": "https://reverseengineering.stackexchange.com/questions/21971/what-types-are-read-from-byte-array",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I try to understand what data types are read from a byte array. These methods seem to follow a common pattern:</p>\n<pre><code>public class Reader {\n\n    static short readA(byte[] bytes, int i) {\n        int s = ((((short) bytes[i]) &amp; 255) &lt;&lt; 8)\n                | (((short) bytes[i + 1]) &amp; 255);\n        return (short) s;\n    }\n\n    static int readB(byte[] bytes, int i) {\n        return ((bytes[i] &amp; 255) &lt;&lt; 8)\n                | (bytes[i + 1] &amp; 255);\n    }\n\n    static int readC(byte[] bytes, int i) {\n        return ((bytes[i] &amp; 255) &lt;&lt; 24)\n                | ((bytes[i + 1] &amp; 255) &lt;&lt; 16)\n                | ((bytes[i + 2] &amp; 255) &lt;&lt; 8)\n                | (bytes[i + 3] &amp; 255);\n    }\n\n}\n</code></pre>\n<p>Does <code>readC</code> read a signed integer? Does <code>readB</code> read a signed short? What does <code>readA</code> read?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "83",
    "tags": [
        "java"
    ],
    "user": "maiermic",
    "time": "Aug 25, 2019 at 10:06",
    "comments": [
        {
            "user": "bart1e",
            "text": "<span class=\"comment-copy\">I think that your question isn't related to reverse engineering. Nonetheless, <code>readA</code> returns <code>short</code> created as concatenation of <code>bytes[i]</code> and <code>bytes[i+1]</code> (i.e. if <code>bytes[i]=00000010</code> and <code>bytes[i+1]=10000011</code>, it will return <code>10100000011</code>). <code>readB</code> returns the same except that will be of type <code>int</code>, while <code>readC</code> returns an <code>int</code> representing concatenation of <code>bytes[i]</code>, <code>bytes[i+1]</code>, <code>bytes[i+2]</code> and <code>bytes[i+3]</code>.</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">assume i = 0   bytes = [1,2,3,4]   so bytes[0] is the first byte in array  it is left shifted by 8 so 1 &lt;&lt; 8 == 256 | 2   ==  258 the &amp; 255  is there to take only the byte from input ie instead of [1,2,3,4]  the input can be [0x8097abef,....]  the &amp; 255 will strip the 8097ab an will take only ef for left shifting  ie ef &lt;&lt; 8 ie the result will be 0xef00 | yy</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@bart1e  please put answers in the answer box, not in comments. Thanks</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@blabb as well.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">understanding code is also reverse engineering, this question is not necessarily offtopic here</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lets Break the algo into pieces before trying to understand </p>\n<p>the algo is broken into pieces using <strong>bodmas</strong> (bracket open ,divide ,multiply ,add, subtract )  </p>\n<p>and/or <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html\" rel=\"nofollow noreferrer\"><strong>Operator precedence</strong></a> </p>\n<p>lets take the uncasted readB first </p>\n<pre><code>static int readB(byte[] bytes, int i) {\n    return ((bytes[i] &amp; 255) &lt;&lt; 8)\n            | (bytes[i + 1] &amp; 255);\n}\n</code></pre>\n<p>prototype of function says it takes an array of bytes and an integer does some thing and returns an int back </p>\n<pre><code>static int readB(byte[] bytes, int i)\n</code></pre>\n<p>body of the function (where it does the aforementioned something </p>\n<pre><code>return ((bytes[i] &amp; 255) &lt;&lt; 8) | (bytes[i + 1] &amp; 255);\n</code></pre>\n<p>there are two bracketed expression one of which has a child  </p>\n<pre><code>1. ((bytes[i] &amp; 255) &lt;&lt; 8)    \n          I. (bytes[i] &amp; 255)\n 3. (bytes[i + 1] &amp; 255)  \n</code></pre>\n<p>breaking the child expression apart it has three components  a constant 255 and two variables<br/>\nwhich are arguments or inputs provided to the function<br/>\nthe byte array bytes[] and<br/>\nthe integer i<br/>\nsince i is an int the array can range from 0 to 2^31 -1  </p>\n<p>( think what will happen if you provide a null array or<br/>\n an array with just 1 value or \nan array with 2^31-1 values<br/>\nor int &gt;= array size<br/>\n(<a href=\"https://rextester.com/live/ETUY42530\" rel=\"nofollow noreferrer\">bounds checking</a><br/>\nthis link has the following code check the results and see the thrown exception</p>\n<pre><code>{  \n    static byte foo[] = {1,2,3,4,5,6,7,8 };\n    static int readB(byte[] bytes, int i)\n    {\n        return ((bytes[i] &amp; 255) &lt;&lt; 8) | (bytes[i + 1] &amp; 255);\n    }\n    public static void main(String args[])\n    {\n        for(int i = 0; i &lt; foo.length ; i++ ) \n        {\n            System.out.printf(\"bounds check %d %d %d\\n\" , i , foo[i] , readB(foo,i));\n        }\n    }\n}\n</code></pre>\n<p>result of running the code </p>\n<pre><code>Compilation time: 1.05 sec, absolute running time: 0.22 sec,  \ncpu time: 0.15 sec, memory peak: 18 Mb, absolute service time: 1,27 sec\n\nError(s), warning(s):\n\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 8\n    at Rextester.readB(source.java:12)\n    at Rextester.main(source.java:18)\n\nbounds check 0 1 258\nbounds check 1 2 515\nbounds check 2 3 772\nbounds check 3 4 1029\nbounds check 4 5 1286\nbounds check 5 6 1543\nbounds check 6 7 1800\n</code></pre>\n<p>) </p>\n<pre><code>bytes[i] &amp; 255\n</code></pre>\n<p>this actually is superfluous operation  </p>\n<p>the bytes[i] array is already of BYTE type so the values can never exceed 255 and there is no point stripping the rest \nthis would only make sense if the type is &gt; BYTE like <strong>WORD foo[]</strong> which can hold anything from <strong>0x0000 to 0xffff</strong> or <strong>int foo[]</strong> which can hold anything from <strong>0x00000000 to 0xffffffff</strong> so stripping the hibyte and highwords may make sense .</p>\n<p>in this specific code we can safely ignore this </p>\n<p>so basically  it takes two bytes from the given position  and folds them into a bigger type<br/>\nso readA returns a SHORT and readB returns and INT type</p>\n<p>ie readA takes two bytes from a give position and folds it into anything between \n0x0000 and 0xffff\nreadB takes two bytes from a given position and folds into anything between \n0x00000000 and 0xffffffff (actually  it is same as  0x00000 and 0xffff if not for size of type calculation or pointer arithmetic's )  </p>\n<p>the third readC now should be clear enough for you  ittakes 4 bytes and folds it into anything between 0x00000000 and 0xffffffff (this function utilizes the whole range not unlike the readA() / readB() </p>\n<p>see the shifts <strong>24,16,8</strong>  which puts<br/>\n<strong>byte[ position 1]</strong> at <strong>0xAA-??????</strong><br/>\n<strong>byte[ position 2]</strong> at <strong>0xAA-BB-????</strong><br/>\n<strong>byte [position 3]</strong> at <strong>0xAA-BB-CC-??</strong> and<br/>\n<strong>byte [position 4]</strong> at <strong>0xAA-BB-CC-DD</strong><br/>\nand returns back <strong>0xAABBCCDD</strong> </p>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 25, 2019 at 17:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}