{
    "title": "How can I intercept syscall libc function in C++ without writing any code in C file",
    "link": "https://reverseengineering.stackexchange.com/questions/19943/how-can-i-intercept-syscall-libc-function-in-c-without-writing-any-code-in-c-f",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can intercept libc function in C++ using LD_PRELOAD. I want to write code only in C++ file and all the logic of symbol fishing (dlsym) must be in C++ file.\nPlease give an example.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "880",
    "tags": [
        "c++",
        "c",
        "libc"
    ],
    "user": "sumit_suthar",
    "time": "Nov 22, 2018 at 10:41",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. How about using <code>extern \"C\"</code>? This effectively lets you write C functions in C++ by assigning C linkage.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to intercept only <em>library</em> calls, you can insert your hooks in the <code>GOT</code> of the executable or at the dynamic loader resolver pointer (<code>GOT[2]</code>). I don't have sample code at hand, but <a href=\"https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/\" rel=\"nofollow noreferrer\">this aricle</a> is good for background.</p>\n<p>If you want to intercept all <em>syscalls</em> (including those in the binary itself, e.g. if it's linked statically), you can use <code>ptrace (PTRACE_SYSCALL)</code> to be notified of all syscalls happening in the process. There are <a href=\"https://stackoverflow.com/questions/9759598/ptracing-syscalls\">some examples</a> on StackOverflow but they usually assume you're tracing another process. If you want to trace the same process you're in, you can use the <code>ptrace(PTRACE_TRACEME)</code> call.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 22, 2018 at 10:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}