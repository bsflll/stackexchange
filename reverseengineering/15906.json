{
    "title": "my question is what means proc near?",
    "link": "https://reverseengineering.stackexchange.com/questions/15906/my-question-is-what-means-proc-near",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>sub_123434 proc near \nmov esi, [ebp-1Ch] \nsub_123434 endp\n</code></pre>\n<p>What means proc near? Can someone possibly explain also the whole\nfunction?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "disassembly",
        "debugging"
    ],
    "user": "Yoonisj",
    "time": "Jul 24, 2017 at 13:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Insofar as <code>proc</code> and <code>endp</code>, start <a href=\"https://msdn.microsoft.com/en-us/library/01d2az3t.aspx\" rel=\"nofollow noreferrer\">here</a>. A good explanation for <code>near</code>can be found from <a href=\"http://spot.pcc.edu/~wlara/asmx86/asmx86_manual_8.pdf\" rel=\"nofollow noreferrer\">this document</a>, which states as follows:</p>\n<blockquote>\n<p>Attribute is NEAR if the Procedure is in the same code segment as the\n  calling program; or FAR if in a different code segment.</p>\n</blockquote>\n<p>The meat of the code is this:</p>\n<pre><code>mov esi,[ebp-1Ch]\n</code></pre>\n<p>This bit of code is moving a value from the stack into the <code>esi</code> register. Depending on the compiler used and context, you might stand to glean additional information from <a href=\"http://www.swansontec.com/sregisters.html\" rel=\"nofollow noreferrer\">register conventions</a> where a value being moved into the <code>esi</code> register is concerned. More specifically, consider the accepted answer from <a href=\"https://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers\">this post</a>.</p>\n<p>Also, <code>ebp-</code> (as opposed to <code>ebp+</code>) is a typical sign of arguments that have been passed to a function--of which those values reside on the stack within memory addresses that can be referenced as long as that particular <a href=\"https://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell\">stack frame</a> exists.</p>\n<p>Regarding <code>[ebp-1Ch]</code>, that's a pointer. In this case, the <code>ebp</code> register contains a memory address (or, more specifically, the value in <code>ebp</code> is treated as a reference to a memory address instead of a literal value), and <code>-1Ch</code> is an offset from that memory address. The lowercase 'h' is just a pneumonic meaning \"hex,\" and to that end, you might also sometimes see offsets and/or hex-based values referenced with a preceding 0x, like this: <code>[ebp-0x1C]</code>. Bearing that in mind, you can really think of that as <code>[ebp-1C]</code>.</p>\n<p>Do note that <code>ebp</code> and <code>[ebp]</code> are different things. <code>[ebp]</code> means the value inside of <code>ebp</code> is treated as a reference to a memory address. Let's assume <code>ebp</code> has <code>0xD34DC0DE</code> in it. Now consider the following:</p>\n<pre><code>mov esi,ebp\nmov esi,[ebp]\nmov esi,[ebp-1C]\n</code></pre>\n<p>The results of each of these would be the following:</p>\n<p><code>mov esi,ebp</code> // esi now contains the literal value 0xD34DC0DE</p>\n<p><code>mov esi,[ebp]</code> // esi now contains whatever is inside the memory address 0xD34DC0DE</p>\n<p><code>mov esi,[ebp-1C]</code> // esi now contains whatever is inside the memory address 0xD34DC0C2 (which is 0xD34DC0DE - 1C)</p>\n<p>Overall, it looks like that subroutine isn't doing anything but moving data from the stack into a register. As a completely blind assumption, if we assume that each argument passed to its respective function is 4-bytes wide, then <code>[ebp-1C]</code> references the 8th argument passed to perhaps a parent routine of this subroutine. In this case, other values of interest could potentially reside in <code>[ebp]</code>, <code>[ebp-04]</code>, <code>[ebp-08]</code>, <code>[ebp-0C]</code>, <code>[ebp-10]</code>, <code>[ebp-14]</code>, and/or <code>[ebp-18]</code>.</p>\n<p>Ultimately, we're lacking context here to gather what the purpose of this function you've provided is--though, again, a combination of the aforementioned conventions can possibly tell you a lot about what that mov instruction is potentially a part of. Look into <a href=\"https://docs.microsoft.com/en-us/cpp/assembler/masm/proc\" rel=\"nofollow noreferrer\">calling conventions</a> for additional clarity. You should be able to infer and research the rest based on the information herein.</p>\n</div>",
            "votes": "4",
            "user": "dsasmblr",
            "time": "Jul 24, 2017 at 14:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Yoonisj: please post a new question about that and provide relevant code snippets</span>",
                    "time": null
                },
                {
                    "user": "Yoonisj",
                    "text": "<span class=\"comment-copy\">call ds: RegOpenKyEx                                                                               call ds: RegEnumKey                                                                                         mov edi,ds:RegCloseKey                                                                                                                                                                                                          what this malware do in this function, if these three function are below each other</span>",
                    "time": null
                }
            ]
        }
    ]
}