{
    "title": "Compute stack frames while edit java bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/17613/compute-stack-frames-while-edit-java-bytecode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I saw here <a href=\"https://reverseengineering.stackexchange.com/questions/17538/edit-java-bytecode-got-error\">edit java bytecode got error</a> that when editing java bytecode with Krakatau ,it may happend to error on stack frames.</p>\n<p>The answer there offer to change Krakatau version to 50.</p>\n<ol>\n<li><p>If I only want to edit java byte code(change existing methode) is there any reason to compute stack frame and not use version 50 that not require to compute that?</p></li>\n<li><p>When I put <code>.stack same</code> the error fix, why?</p></li>\n<li><p>Version 50 is version of Krakatau ? Is there any disadvantage on this version?</p></li>\n</ol>\n<p>Thank</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "java",
        "byte-code"
    ],
    "user": "Yfsygd",
    "time": "Mar 5, 2018 at 21:55",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">Can you accept my answer please?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Stack maps were a feature added in Java 6 (corresponding to version 50), but were not made mandatory until Java 7 (version 51) in order to ease the transition. Stack maps make classloading slightly faster at the expense of making bytecode generation significantly more painful.</p>\n<p>If you are manually editing bytecode, then it is a big hassle to write the stack frames yourself. The easiest solution is to mark your classfiles as version &lt;= 50, in which case you don't have to worry about them at all. The only downside of this is that you can't use features which were added in version 51+ (at the moment, the only notable features that are 51+ exclusive are <code>invokedynamic</code> and modules). </p>\n<p>On the flipside, there is one feature, subroutines, which was actually removed in version 50. Therefore, Krakatau defaults your classfiles to version 49 if you don't specify one, because it is the best default version for manually editing bytecode.</p>\n<p>If you need to use invokedynamic, then you have no choice but to generate stackmaps as well. You can write them by hand if you want, but it's a pain to do. If you plan to do this, you should familiarize yourself with the <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.4\" rel=\"nofollow noreferrer\">JVM specification</a>, which explains how to write stack maps. Krakatau's syntax uses the same names as the specification, so it should be fairly self explanatory.</p>\n<p>Alternatively, you can use a tool like ObjectwebASM to do it for you. The only downside of this is that ASM can't handle certain unusual cases. ASM is a tool which is \"good enough\" for ordinary uses, while Krakatau is designed for power users and tries to handle every bytecode feature and quirk, no matter how obscure. But since stack frames can't be generated automatically in 100% of cases, and Krakatau is oriented towards people who want low level control over the bytecode anyway, it does not attempt to generate stack frames automatically.</p>\n<p>Anyway, to answer your questions explicitly,</p>\n<ol>\n<li>The only reason not to lower the classfile version to 50 is if you need to use <code>invokedynamic</code>, or other recently added bytecode features.</li>\n<li>Because the stack frame you added made the stack map table valid\nagain. The exact frame types and placement you need depends on which\nchanges you make to the bytecode, so <code>.stack same</code> won't always\nwork. If you want to learn how to write stack maps in general,\nconsult the JVM specification.</li>\n<li>The classfile version is unrelated to the version of Krakatau. The\nKrakatau assembler can generate classfiles with any version tag you\nwant, even ones that aren't valid.</li>\n</ol>\n</div>",
            "votes": "4",
            "user": "Antimony",
            "time": "Mar 6, 2018 at 2:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Yfsygd",
                    "text": "<span class=\"comment-copy\">I done have invokedynamic on the .class file I want to edit.   But if I have invokedynamic on another .class file that call to my .class file ( that I edit on version 50) is that can be problem?</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Nope. Classes with different classfile versions can freely interoperate.</span>",
                    "time": null
                }
            ]
        }
    ]
}