{
    "title": "Removing/bypassing a BIOS whitelist",
    "link": "https://reverseengineering.stackexchange.com/questions/25152/removing-bypassing-a-bios-whitelist",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to bypass or erase the BIOS whitelist on my Thinkpad T440p. So far I've</p>\n<ul>\n<li>used flashrom and a soic8 clip to dump the bios to a bios.img file</li>\n<li>made another dump and compared with <code>diff bios.img bios2.img</code> to verify the file</li>\n<li>used the UEFITool to find and extract the relevant section containing the string \"Unauthorized network card ...\" as an .efi file</li>\n<li>Analyzed that section using Ghidra</li>\n<li>Found a function in Ghidra (FUN_00010ec4) that contains said string (DAT_000104d0), and an entry function that calls this function.</li>\n</ul>\n<p>Below, I'll post the function containing the string first, and then the entry function. Also, I'll put a link there to the extracted body.</p>\n<pre><code>void FUN_00010ec4(undefined8 param_1,undefined *param_2,undefined8 param_3,undefined8 param_4)\n\n{\n   if (param_2 == (undefined *)0x0) {\n     param_2 = &amp;DAT_00010ec0;\n  }\n  (**(code **)(DAT_00011040 + 0x170))(0x200,param_1,param_2,param_3,&amp;DAT_000104d0,param_4);\n  return;\n}\n</code></pre>\n<p>The above function gets called from here: </p>\n<pre><code>longlong entry(undefined8 param_1,longlong param_2)\n\n{\n  longlong lVar1;\n  undefined8 local_res18;\n  undefined8 *local_res20;\n  undefined local_18 [24];\n\n  FUN_00010f08(param_1,param_2);\n  lVar1 = (**(code **)(DAT_00011040 + 0x140))(&amp;LAB_00010480,0,&amp;DAT_00011058);\n  if (-1 &lt; lVar1) {\n    lVar1 = (**(code **)(DAT_00011040 + 0x140))(&amp;LAB_00010410,0,&amp;DAT_00011070);\n    if (-1 &lt; lVar1) {\n      lVar1 = (**(code **)(DAT_00011040 + 0x140))(&amp;DAT_000103f0,0,&amp;DAT_00011078);\n      if (-1 &lt; lVar1) {\n        lVar1 = (**(code **)(DAT_00011040 + 0x140))(&amp;LAB_00010460,0);\n        if (-1 &lt; lVar1) {\n          DAT_00011060 = *local_res20;\n          local_res18 = 0;\n          _DAT_00011068 = &amp;LAB_00010b54;\n          (**(code **)(DAT_00011040 + 0x80))(&amp;local_res18,&amp;DAT_000103d0,0,&amp;DAT_00011068);\n          DAT_00011028 = local_res18;\n          FUN_00010ec4(0x10,FUN_00010cf8,0,local_18);\n          lVar1 = 0;\n        }\n      }\n    }\n  }\n  return lVar1;\n}\n</code></pre>\n<p>The body, as well as the dumped .img can be found <a href=\"https://c.gmx.net/@324492825821451320/FEFfHieaT2uKXWqWaCpFKQ\" rel=\"nofollow noreferrer\">here</a>. </p>\n<p>Now I don't know what to do with this. Could I just remove the line <code>FUN_00010ec4(0x10,FUN_00010cf8,0,local_18);</code> and the function would never get called, thus freeing me from the whitelist? What other possibilities do you see to get around it?</p>\n<p>This is the first time I deal with BIOS-modding, and I really don't want to brick my laptop. Also I'm sorry, if I use the wrong tags. I'm open for suggestions for better fitting ones.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "506",
    "tags": [
        "decompilation",
        "static-analysis",
        "ghidra",
        "functions",
        "bios"
    ],
    "user": "BraveSentry",
    "time": "May 29, 2020 at 13:04",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">When modifying binaries usually you can't just \"delete a line\" because you are just looking at the decompiled code. Changing something in decompiled code does not change the binary. If you want to remove a certain function call you have to overwrite it in the binary with different commands that don't do anything like NOP or an add command on an unused register.</span>",
            "time": null
        },
        {
            "user": "BraveSentry",
            "text": "<span class=\"comment-copy\">I see. I've managed to find the hex code corresponding to the line in question, replaced that with FF FF FF FF FF, and fed it to Ghidra again. Now at that line it says <code>/* WARNING: Bad instruction - Truncating control flow here */</code> instead. I imagine this is not the thing I want. Any idea what I could use that would not give me a warning?</span>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">You can't just put <code>FF FF FF FF</code> there, it has to be valid opcodes. <code>90</code> is the opcode for nop (no operation - does nothing) for example which is typically used to overwrite code to skip it. You're playing with fire though and don't seem to know what you are doing so be careful.</span>",
            "time": null
        }
    ],
    "answers_data": []
}