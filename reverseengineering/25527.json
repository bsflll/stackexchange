{
    "title": "Frida not able to trace sub_XXXXX which must have been called",
    "link": "https://reverseengineering.stackexchange.com/questions/25527/frida-not-able-to-trace-sub-xxxxx-which-must-have-been-called",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following pseudocode generated by <code>IDA Pro decompiler</code>:</p>\n<pre><code>__int64 *__usercall sub_155B5@&lt;X0&gt;(__int64 *a1@&lt;X0&gt;, unsigned int a2@&lt;W1&gt;, char **a3@&lt;X8&gt;)\n{\n  ...\n  result = sub_222E0((__int64 *)a3, 2 * a2, 0x20u); \n  return result;\n}\n</code></pre>\n<p>Using <code>frida-trace</code>, I could verify that <code>sub_155B5</code> is called for every API request. This is the command that I used:</p>\n<pre><code>$ frida-trace -U com.app.name -a 'libname.so!0x155b5'\n</code></pre>\n<p>Therefore, I thought I could safely assume that <code>sub_222E0</code> was also executed, because it's contained by <code>sub_155B5</code> which was obviously executed. However, it turned out that I was wrong. <code>frida-trace</code> failed to trace <code>sub_222E0</code> using the same command above.</p>\n<p>What are the possible causes for this outcome?</p>\n<p>Thank you.</p>\n<h2>EDIT</h2>\n<p>Here's the declaration of <code>sub_222E0</code>:</p>\n<pre><code>__int64 __fastcall sub_222E0(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_4D2EC(*(_QWORD **)(a1 + 64), a2, a3);\n}\n</code></pre>\n<p>And <code>frida-trace</code> does trace <code>sub_4D2EC</code> everytime <code>sub_155B5</code> is executed, but not <code>sub_222E0</code>.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "358",
    "tags": [
        "ida",
        "android",
        "frida"
    ],
    "user": "shinhong",
    "time": "Jul 21, 2020 at 14:05",
    "comments": [
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">I assume this is not full decompiler output. Maybe the code has got \"return\" instruction somewhere upper, or it throws exception so the sub_222E0 is not executed? Remember the decompiler output is not always correct, thats why you should also pay attention to assembly instructions</span>",
            "time": null
        },
        {
            "user": "shinhong",
            "text": "<span class=\"comment-copy\">@morsisko thanks for the comment. After some experiment, I found that <code>sub_222E0</code> in fact was a thin wrapper function of another subroutine, which <code>frida</code> was able to trace. Still confused why this is happening.</span>",
            "time": null
        }
    ],
    "answers_data": []
}