{
    "title": "Getting rid of a custom Shell on a LiteOS based outdoor camera",
    "link": "https://reverseengineering.stackexchange.com/questions/30004/getting-rid-of-a-custom-shell-on-a-liteos-based-outdoor-camera",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I started reversing <a href=\"https://es.aliexpress.com/item/4001151246566.html?gatewayAdapt=glo2esp&amp;spm=a2g0o.9042311.0.0.5d8563c0ttw3sd\" rel=\"nofollow noreferrer\">this camera</a> in order to get rid of the unwanted traffic it constantly does towards Chinese servers.<br/>\nI have a serial access to it thanks to an obvious UART port (bottom left in the picture).<br/>\n<a href=\"https://i.sstatic.net/EsaqL.jpg\" rel=\"nofollow noreferrer\"><img alt=\"camera board\" src=\"https://i.sstatic.net/EsaqL.jpg\"/></a>\nThe camera is based on a <em>Hi3518</em> chip and runs <code>Huawei LiteOS 1.4.5</code>:</p>\n<pre><code>SPI Nor(cs 0) ID: 0xef 0x60 0x17\nBlock:64KB Chip:8MB Name:\"W25Q64FW\"\nSPI Nor total size: 8MB\n\n\n********hello Huawei LiteOS ARM926********\n\nversion : Huawei LiteOS V200R001C10B017\nopen-version : Huawei LiteOS 1.4.5\nbuild data : May  2 2018 19:06:05\n\n**********************************\n********Hello Huawei LiteOS********\n\nversion : Huawei LiteOS V200R001C10B017\nopen-version : Huawei LiteOS 1.4.5\nbuild data : May  2 2018 19:06:05\n\n********\nHuawei LiteOS # Spi Nor ID:0xEF 0x60 0x17 0x00 0x00 0x00 0x00 0x00\nSpi Nor Flash Info:\nName:\"W25Q64FW\" Size:8MB Block:64KB\nosal_proc_mkdir - parent is NULL! proc=0x80976bd0\n&lt;6&gt;Hisilicon Media Memory Zone Manager\n</code></pre>\n<p>And once started it does not give a typical <code>/bin/sh</code> to the console, but instead a custom made <em>CLI</em> they call a <em>shell</em>.\nHere are the commands that this \"shell\" has:</p>\n<pre><code>Huawei LiteOS # help                                                            \n*******************shell commands:*************************                     \n                                                                                \nap_test       armbenv       arp           call          cat           cat_logmpp\n    cd            cp                                                            \ncpup          debug         dns           excInfo       findsym       format    \n    free          help                                                          \nhiddrs        himd          himm          hwi           i2c_read      i2c_write \n    ifconfig      lddrop                                                        \nlocal_alarm   ls            mclose        memcheck      mkdir         mopen     \n    mount         msgqueue                                                      \nnand_bad      netstat       ntpdate       partinfo      partition     ping      \n    pwd           readreg                                                       \nreset         rm            rmdir         sem           sendbps       shutdown  \n    sleep_device  ssp_read                                                      \nssp_write     sta_test      statfs        swtmr         sync          systeminfo\n    task          telnet                                                        \ntftp          touch         uart_close    uart_config   uart_read     uart_write\n    umount        uname                                                         \nwriteproc     writereg      \n</code></pre>\n<p>Note those commands are functions from this custom <em>CLI</em>, <strong>not</strong> actual <em>UNIX/Linux/busybox</em> commands.</p>\n<p>Those are documented, as is the whole <em>LiteOS</em> SDK, in a pretty well put documentation available on their <a href=\"https://github.com/LiteOS/LiteOS\" rel=\"nofollow noreferrer\">Github</a>, but nothing really give access to the underlying Linux system, unlike many <em>Hi35xx</em> based devices, looks like their build is configured with this <a href=\"https://github.com/LiteOS/LiteOS/blob/master/.config#L312\" rel=\"nofollow noreferrer\">shell enabled</a>.</p>\n<p>The most annoying thing is that they also seem to have disabled <em>U-Boot</em> access, even trying to brute force a keystroke during power up doesn't do anything. Nevertheless I think <em>U-Boot</em> is looking for something on the <em>SD-Card</em> as it initializes the <em>SD</em> slot when the camera is powered on with the reset button pressed:</p>\n<pre><code>Block:64KB Chip:8MB Name:\"W25Q64FW\"\nSPI Nor total size: 8MB\n\nEMMC/MMC/SD controller initialization.\nMMC/SD Card:\n    MID:         0x3\n    Read Block:  512 Bytes\n    Write Block: 512 Bytes\n    Chip Size:   60906M Bytes (High Capacity)\n    Name:        \"SD64G\"\n    Chip Type:   SD\n    Version:     2.0\n    Speed:       25000000Hz\n    Bus Width:   4bit\n    Boot Addr:   0 Bytes\nInterface:  MMC\n  Device 0: Vendor: Man 035344 Snr e2cf5b82 Rev: 8.5 Prod: SD64G\n            Type: Removable Hard Disk\n            Capacity: 60906.0 MB = 59.4 GB (124735488 x 512)\nPartition 1: Filesystem: FAT32 \"NO NAME    \"\n</code></pre>\n<p>I tried to copy the obvious, <code>uImage</code>, <code>update/uboot</code> etc... doesn't trigger anything.</p>\n<p>I also tried to overflow the shell commands, messing with <code>/jffs0/etc/init.d/rcS</code>, nothing worked so far.</p>\n<p>I'd be very happy with some fresh ideas I didn't try yet!</p>\n<p><strong>Edit</strong></p>\n<p>The flash serving as block device is a <em>W25Q64.W</em>, I dumped it using a brand new <em>CH341a</em> and a test clip, first time I did this, very cool. Now I have this dump but the <code>binwalk</code> analysis doesn't look promising:</p>\n<pre><code>\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n102060        0x18EAC         CRC32 polynomial table, little endian\n5767168       0x580000        JFFS2 filesystem, little endian\n6512540       0x635F9C        gzip compressed data, from Unix, last modified: 1970-01-01 00:00:00 (null date)\n6512780       0x63608C        JFFS2 filesystem, little endian\n6512968       0x636148        Zlib compressed data, compressed\n6513460       0x636334        Zlib compressed data, compressed\n6513640       0x6363E8        gzip compressed data, from Unix, last modified: 1970-01-01 00:00:00 (null date)\n[hundreds of lines of those]\n8257536       0x7E0000        JFFS2 filesystem, little endian\n</code></pre>\n<p>Here's the entropy graph\n<a href=\"https://i.sstatic.net/eFMS0.png\" rel=\"nofollow noreferrer\"><img alt=\"binwalk entropy graph\" src=\"https://i.sstatic.net/eFMS0.png\"/></a>\nwhich seems to indicate a huge chunk of the firmware is either encrypted of compressed.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "462",
    "tags": [
        "firmware",
        "hardware",
        "serial-communication"
    ],
    "user": "iMil",
    "time": "Feb 12, 2022 at 21:53",
    "comments": [
        {
            "user": "masterX244",
            "text": "<span class=\"comment-copy\">No way to pull a flash dump of the bootflash in some way? Boot log tells that there is some sort of SPI flash on the board. Post a pic of the board backside, too if possible</span>",
            "time": null
        },
        {
            "user": "iMil",
            "text": "<span class=\"comment-copy\">Yes that's exact;y what I ordered, will update the post if I get further, thanks!</span>",
            "time": null
        },
        {
            "user": "masterX244",
            "text": "<span class=\"comment-copy\">Picture of reverse side of the PCB should be quick to do though since you only need to unscrew the 4 corner screws and then make the picture of whats at the back of the board. Knowing if there is useful stuff there helps massively</span>",
            "time": null
        },
        {
            "user": "tv athome",
            "text": "<span class=\"comment-copy\">would be interested if this goes any further as I'm working on a xshcam doorbell running the same OS (Huawei liteOs 1.4.6). Block:64KB Chip:8MB Name:\"W25Q64FW\" SPI Nor total size: 8MB Camera OV9732 I can Uboot but doesn't help if there are proprietary blobs for the drivers for camera module and wifi etc..</span>",
            "time": null
        },
        {
            "user": "masterX244",
            "text": "<span class=\"comment-copy\">Linux kernels are usually compressed and get uncompressed by a small stub. Possible to share the flashdump? Also: JFFS2 allows compressed files, too.</span>",
            "time": null
        }
    ],
    "answers_data": []
}