{
    "title": "How can i get the address of a function in memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/30906/how-can-i-get-the-address-of-a-function-in-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently completing a CTF exercise where i must attempt to overwrite a function pointer on the stack through a buffer overflow here is the code:</p>\n<pre><code>#include &lt;err.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n\nchar *gets(char *);\n\nvoid complete_level() {\n  printf(\"Congratulations, you've finished :-) Well done!\\n\");\n  exit(0);\n}\n\nint main(int argc, char **argv) {\n  struct {\n    char buffer[64];\n    volatile int (*fp)();\n  } locals;\n\n  locals.fp = NULL;\n  gets(locals.buffer);\n\n  if (locals.fp) {\n    printf(\"calling function pointer @ %p\\n\", locals.fp);\n    fflush(stdout);\n    locals.fp();\n  } else {\n    printf(\"function pointer remains unmodified :~( better luck next time!\\n\");\n  }\n\n  exit(0);\n}\n</code></pre>\n<p>The code will get input using the vulnerable <code>gets()</code> function and store it inside the buffer called <code>buffer</code>.</p>\n<p>Since <code>buffer</code> is the largest variable in the struct it will allow me to overwrite variables below it on the stack. The next variable is the function pointer called <code>fp</code>.</p>\n<p>In order to overwrite <code>fp</code> i will need to find the address of the <code>complete_level</code> function in memory. Then write \"A\" 64 times, then write the functions address.</p>\n<p><strong>The problem i have is that i cannot find the address of the function.</strong></p>\n<p>So far i have tried <code>objdump</code> however that gives me a offset and not the full address:</p>\n<pre><code>objdump -M intel -d 3 | grep complete_level\n    1184:   80 3d 8d 2e 00 00 00    cmp    BYTE PTR [rip+0x2e8d],0x0        # 4018 &lt;completed.0&gt;\n    11ac:   c6 05 65 2e 00 00 01    mov    BYTE PTR [rip+0x2e65],0x1        # 4018 &lt;completed.0&gt;\n00000000000011c9 &lt;complete_level&gt;:\n</code></pre>\n<p>Here is an output of the executable under the <code>file</code> command:</p>\n<pre><code>3: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV),\ndynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,\nBuildID[sha1]=11a5f76e0d40b7f4fdc53d4dd60faac9f9e405be, for GNU/Linux 3.2.0, not stripped\n</code></pre>\n<p>Why is it not showing the full address? Also how can i get the full address of the function <code>complete_level</code>?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "c",
        "elf",
        "stack",
        "objdump"
    ],
    "user": "professional pro",
    "time": "Sep 21, 2022 at 17:59",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">The full address will be when the program is loaded into the memory. You have PIE executable here</span>",
            "time": null
        }
    ],
    "answers_data": []
}