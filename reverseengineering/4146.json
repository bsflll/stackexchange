{
    "title": "How to find main() in binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/4146/how-to-find-main-in-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Given a binary and only using a tool like <code>ndisasm</code>, how can I find <code>main()</code>?\nI don't want to use smart tools like IDA Pro because I'm doing this exercise to learn.</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "16k",
    "tags": [
        "disassembly"
    ],
    "user": "drum",
    "time": "Apr 25, 2014 at 22:29",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I believe I already gave an answer to this question in the answer of this question: <a href=\"http://reverseengineering.stackexchange.com/questions/3815/reversing-elf-64-bit-lsb-executable-x86-64-gdb/3816#3816\">Reversing ELF 64-bit LSB executable, x86-64 ,gdb</a>. Feel free to modify your question in order to ask for more details if you miss somethings.</span>",
            "time": null
        },
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\">@perror And a fantastic answer it was. It's a shame when people don't even pay attention to the help you've given them.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What platform/OS/compiler you want to handle? Give us some concrete examples.</span>",
            "time": null
        },
        {
            "user": "drum",
            "text": "<span class=\"comment-copy\">@perror Great answer. Would it be much difference in Windows? Also, is it impossible to tell the entry point without this piece of information?</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Yes, it would be very different. In fact, what I describe in this answer is bind to the <code>gcc</code> compiler. So, if you consider a different compiler, the layout may be totally different. But, if you are look for the <code>main</code> function in a MS-Windows context, you need to edit your question to specify it. It will help to get a more accurate answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is quite tricky and necessitates a LOT of patience. I'll assume here that you're trying to find the <code>main</code> function as it is defined in C and not as the entry point of your program. It's very hard to find what you're looking for by scanning the code with your eyes &amp; brain. But here's a way. What you can do is first check the header of the binary file you're trying to disassemble. Below you'll find the output of <code>readelf -h</code> on a random file. If the file isn't damaged (on purpose or not) you'll be able to find the <em>Entry point address</em>.  </p>\n<pre><code>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x400440\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          4680 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         8\n  Size of section headers:           64 (bytes)\n  Number of section headers:         35\n  Section header string table index: 32\n</code></pre>\n<p>This address usually points to the location of the first chunk of code which will be executed at run time (<code>_start</code> function) and which will handle the <code>main</code> function parameters (or command line arguments) before calling the <code>main</code> function. Another technique would be to run your program under a debugger (<strong>GDB</strong> for instance) and go step by step.</p>\n<p>I have to warn you though, if you're dealing with ELF binaries, things could turn out to be more complicated as they contain <code>ctor</code> and <code>dtor</code> tables which hold pointers to functions that are executed before and after the <code>main</code> function. You have also some undocumented weirdness going on when dealing with statically linked binaries. And of course, other programs can make do without a <code>main</code> function and call whatever they wish.</p>\n</div>",
            "votes": "11",
            "user": "yaspr",
            "time": "Apr 26, 2014 at 21:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "clockw0rk",
                    "text": "<span class=\"comment-copy\">this example shows nicely that what we learn in programming class is wrong: a program starts at function _start , not main. in fact, you can do a LOT of stuff before main even gets called the first time</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Well, most programmers have no clue how a binary file is structured. They make assumptions based on \"high level\"  programming models that could, and most likely will, end up to be wrong once you dig into the nitty gritty details of what is a computer program. That's why you shouldn't believe teachers or instructors and still RTFM yourself.</span>",
                    "time": null
                }
            ]
        }
    ]
}