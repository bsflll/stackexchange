{
    "title": "Need help identifying a -possibly- encrypted string",
    "link": "https://reverseengineering.stackexchange.com/questions/21743/need-help-identifying-a-possibly-encrypted-string",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm having some trouble building an app that gets data from a database to keep a log of files added to a website.</p>\n<p>Most URLs are generated from a file ID and a time stamp, some of those URLs are missing in the database but they're quite easy to regenerate. There's another type of generated URL that includes a string that I can't figure out. I'd like to know if it is possible to generate them too.</p>\n<p>These URLs look quite like this:</p>\n<pre><code>http://www.mysite.com/files/a9780ed25285890789147440840/file.ext\nhttp://www.mysite.com/files/a9789f9b5285890789147441956/file.ext\nhttp://www.mysite.com/files/8b9b5d1f5285890789167885136/file.ext\nhttp://www.mysite.com/files/a97906135285890789147442083/file.ext\nhttp://www.mysite.com/files/a9790e735285890789147442272/file.ext\nhttp://www.mysite.com/files/a9791a905285890789147442521/file.ext\nhttp://www.mysite.com/files/8b9bedfd5285890789167886250/file.ext\nhttp://www.mysite.com/files/a97aaf595285890789147445176/file.ext\nhttp://www.mysite.com/files/a97ab7fc5285890789147445386/file.ext\nhttp://www.mysite.com/files/8b9d17895285890789167888638/file.ext\nhttp://www.mysite.com/files/a97ac03a5285890789147445564/file.ext\nhttp://www.mysite.com/files/a97acd635285890789147445897/file.ext\n</code></pre>\n<p>As you can see, it looks like hexadecimal for the first 8 characters, the middle section looks very similar, but I can't recognize a pattern here. I would like to point out that the dates are stored as epoch numerals, though the easy links have readable dates. </p>\n<p>I'd appreciate any kind of information that could help me start figuring out this pattern.</p>\n<p>Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "107",
    "tags": [
        "encryption",
        "deobfuscation",
        "hexadecimal"
    ],
    "user": "ReferenceObject",
    "time": "Jul 22, 2019 at 22:27",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. Since those are URLs, have you considered correlating the last modified timestamp sent by the servers with parts of the URL?</span>",
            "time": null
        },
        {
            "user": "Jasen",
            "text": "<span class=\"comment-copy\">the decimal part could be nanoseconds since november 2002</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since this would not fit into a simple comment, I am posting this as community Wiki. The script, after all, may be helpful to others.</p>\n<p>What I would try in such a case is to see if parts of the string can be interpreted as timestamps, for example.</p>\n<pre><code>#!/usr/bin/env python3\n\"\"\"\\\nLittle script to interpret integers given on the command line as\nUnix time (unless that causes an error) and Windows FILETIME.\n\nIt outputs the human-readable date and time retrieved from either\ninterpretation.\n\"\"\"\nimport sys\nfrom contextlib import suppress\nfrom datetime import datetime, timedelta, timezone\n\nif __name__ == \"__main__\":\n    START = datetime(1601, 1, 1, tzinfo=timezone.utc)\n    print(\"FILETIME base time:\", START)\n    for ftval in sys.argv[1:]:\n        with suppress(ValueError):\n            ft = int(ftval)\n            print(\"You gave:\", ft)\n            with suppress(OverflowError, ValueError, OSError):\n                dt = datetime.utcfromtimestamp(ft)\n                print(\"\\t... interpreted as Unix time:\", dt)\n            # Windows FILETIME uses 100 ns intervals as base unit.\n            # 100 ns == 0.1 Âµs\n            microsecs = ft / 10\n            with suppress(OverflowError):\n                delta = timedelta(microseconds=microsecs)\n                dt = START + delta\n                print(\"\\t... interpreted as Windows FILETIME:\", dt)\n</code></pre>\n<p>... unfortunately, having tried that with <code>./winft.py 5285890789147445564</code> (I named the script <code>winft.py</code>), I can tell you that it's likely not timestamps. Even using parts that <em>look like</em> Unix timestamps, the output hardly makes sense:</p>\n<pre><code>$ ./winft.py 147445564\nFILETIME base time: 1601-01-01 00:00:00+00:00\nYou gave: 147445564\n        ... interpreted as Unix time: 1974-09-03 13:06:04\n        ... interpreted as Windows FILETIME: 1601-01-01 00:00:14.744556+00:00\n</code></pre>\n<p>... putting that 9 back in front of the apparent Unix time doesn't make it better:</p>\n<pre><code>$ ./winft.py 9147445564\nFILETIME base time: 1601-01-01 00:00:00+00:00\nYou gave: 9147445564\n        ... interpreted as Unix time: 2259-11-15 05:06:04\n        ... interpreted as Windows FILETIME: 1601-01-01 00:15:14.744556+00:00\n</code></pre>\n<p>On the other hand the decimal part after the 8 hex digits could be a bunch of (not so random) bytes that are being interpreted as integer and so could be decoded back into an integer (in either Endianess). Python for example deals with huge integer values effortlessly.</p>\n<p>However, last but not least I would like to remark that proper <em>encryption</em> is pretty unlikely, given how similar the part behind the 8 hex digits looks. You would get <em>much more random</em> values if this was properly encrypted.</p>\n<p>The 8 hex digits could be a truncated hash digest (MD5, SHA1 ...) or something else entirely. Would make much more sense to look at available meta-data such as the HTTP headers, at the file contents ... try to compute the digests on the file using various algorithms and then try to see if one of 8 hex digit strings matches the digests in hexadecimal representation ...</p>\n</div>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Jul 31, 2019 at 9:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}