{
    "title": "What is this way of representing color in this unknown image format",
    "link": "https://reverseengineering.stackexchange.com/questions/3992/what-is-this-way-of-representing-color-in-this-unknown-image-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All right, I have a PS3 image compressed with a variation of the LZ algoritm (magic bytes <code>43 5A 32 00</code>) (I have successfully decompressed it) and what I get from the decompressed form is a set of ARGB colors/pixels (The number of bytes in the compressed file is <code>4*width*height</code> thus I know that the decompressed file problably only contain the raw ARGB data). </p>\n<p>Here is an image illustrating the result of rendering the ARGB data (transparency omitted to makes thing easier to make out).</p>\n<p><strong>Decompressed image:</strong>\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/N7DIl.png\"/></p>\n<p><strong>PS3 edition screenshot:</strong></p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ibduR.png\"/></p>\n<p><strong>PSP edition screenshot:</strong></p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/pcJHM.jpg\"/></p>\n<p>What I want to know is if any of you know what sort of logic this color structure use? To me, it looks like it looks at the last color in terms of the y-axis. Where zero value just gets the value of the last color of the y-axis. It kind of looks like I have to dif/sum colors together.</p>\n<p>I have tried varies methods. For example, here I try storing a color array with zero color and for each line, sum the unsigned integer representation of ARGB of x position in the array with the new color' unsigned integer -&gt; <code>A+B = C</code>.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/UXS2C.png\"/></p>\n<p>A-B=C, just gives pinkish giberish..</p>\n<p>Here are some samples of ARGB values that I use to try and find a solution:</p>\n<pre><code>x:0, y:24-27\n\nR   G   B\n\n137 195 255\n\n240 254 000\n\n014 000 255\n\n001 001 001\n</code></pre>\n<p>This should give a blueish color (comparing to Game screenshot) like: <code>145, 184, 219</code>.</p>\n<p>*Please notice that my image for comparison isn't exact. That is to say that I got it from the same game of another platform where another format is used. Since the image sized are different. I can say that the colors aren't 100% the same as the new one.</p>\n<pre><code>x:4, y:22-28\n\nR   G   B\n\n137 195 255\n\n118 168 201\n\n255 204 161\n</code></pre>\n<p>This too should give a dark bluerish color like: <code>020, 068, 096</code>.</p>\n<p>*Please notice that the compared color in the game isn't exact, the image has transparency\ntoo, so the game has problably messed with the color values of the screenshot.</p>\n<p>So if anybody have encountered stuff like this before and could give me a tip of some sort I would be very happy. :)</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "342",
    "tags": [
        "file-format"
    ],
    "user": "patr0805",
    "time": "Mar 30, 2014 at 18:23",
    "comments": [
        {
            "user": "nrz",
            "text": "<span class=\"comment-copy\">Have you tried editing the bytes' values systemically? Do 0 0 0 0, 0 0 0 255 and/or 255 0 0 0 give you black? Do 255 255 255 0, 0 255 255 255 and/or 255 255 255 255 give you white? Have you tried setting the rest 3 bytes to zeros (or alpha can possibly be 255) and the setting only one byte at once to 127 and then to 255? Then do the same for all bytes, keeping other bytes' values zeros. This way you should be able to confirm the order of the red, green, blue and alpha channel bytes and see if their values have been flipped, for example.</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">The horizontal lines in what should be solid color, and the lack of vertical lines, suggests each \"new\" line is stored as the difference from the previous line. (Wait, you tried that ðŸ˜³). Okay, you see you got something better. Do you process overflow correctly?</span>",
            "time": null
        },
        {
            "user": "patr0805",
            "text": "<span class=\"comment-copy\">Overflow, I have tried saying that if the number goes below zero then it should make the result equals the absolute number.. that is to say, -35 would become 35. I have also tried saying that it should result in 255-35, but to no avail. nrz have given me an idea that I am currently trying out. I'll be back with the findings</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">In normal integer maths, overflow is simply <i>ignored</i>. When counting with bytes, -35 = 256-35 = 221.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Just an idea: could the 4 bytes be split into 2 bytes for \"bad\" hardware, and 2 bytes for \"good\" hardware? So a hex 12345678 would mean (alpha 1, red 2, green 3, blue 4) on a display that doesn't support full 8-bit RGB, and (alpha 15, red 26, green 37, blue 48) on a full color one? This type of encoding could enable the slow hardware to not read the \"high-resolution-bits\" at all, saving CPU time compared to throwing away those bits individually for each pixel.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You asked this a couple of months ago, but I'm going to answer anyway.</p>\n<p>First, I fear that your decompression code is buggy. There are several  horizontal lines of noise, and I'm pretty sure they're not supposed to be there.</p>\n<p>Your <code>A+B=C</code> guess was correct. A tell-tale sign are the visible horizontal edges but hidden vertical edges. I think your mistake was simply to do the addition with the wrong endianness.</p>\n<p>I wrote a little Python script:</p>\n<pre><code>from PIL import Image\nim = Image.open('orig.png')\nw, h = im.size\npix = im.load()\ndef add(p, q):\n    # Convert (R,G,B) tuples to RGB integers, add them, and convert back\n    pp = (p[0] &lt;&lt; 16) + (p[1] &lt;&lt; 8) + p[2]\n    qq = (q[0] &lt;&lt; 16) + (q[1] &lt;&lt; 8) + q[2]\n    r = pp + qq\n    return ((r &gt;&gt; 16) &amp; 0xFF, (r &gt;&gt; 8) &amp; 0xFF, r &amp; 0xFF)\nfor y in range(1, h):\n    for x in range(w):\n        pix[x,y] = add(pix[x, y], pix[x, y-1])\nim.save('out.png')\n</code></pre>\n<p>The result is this image. You can see that the top third matches the PSP image, but starting from the line of noise in the source image, the picture becomes distorted. Fix your decompression code and the picture will come out right :)</p>\n<p><img alt=\"processed image\" src=\"https://i.sstatic.net/c2y15.png\"/></p>\n</div>",
            "votes": "10",
            "user": "pdw",
            "time": "Oct 5, 2014 at 20:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "patr0805",
                    "text": "<span class=\"comment-copy\">You are correct, I noticed that there was a problem with my decompression algoritm and fixed it. After that this sum approach could be used without issue.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not sure how i would go about this but there is a tool called cantordust that can help with this, it can visualize binary information into pictograms. The link is down below.</p>\n<p><a href=\"https://sites.google.com/site/xxcantorxdustxx/\" rel=\"nofollow\">https://sites.google.com/site/xxcantorxdustxx/</a></p>\n</div>",
            "votes": "-1",
            "user": "user3286303",
            "time": "Mar 30, 2014 at 20:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I don't think cantordust will help much with this, because it's creating different graphic output from different types of input; it doesn't translate the input to an image bit by bit. Still, it seems like an interesting tool. Am i missing something, or doesn't the site have a download/tryout/contact link?</span>",
                    "time": null
                }
            ]
        }
    ]
}