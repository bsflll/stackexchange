{
    "title": "Normal artifact or something else?",
    "link": "https://reverseengineering.stackexchange.com/questions/30259/normal-artifact-or-something-else",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on a Linux ELF challenge.</p>\n<p>I have found this bit of code in the <code>.text</code> disassembly using <code>objdump -d -M intel program</code></p>\n<pre><code> 922:   83 c4 10                add    esp,0x10\n 925:   c7 45 f4 00 00 00 00    mov    DWORD PTR [ebp-0xc],0x0\n 92c:   83 7d f4 00             cmp    DWORD PTR [ebp-0xc],0x0\n 930:   74 29                   je     95b &lt;main@@Base+0x26b&gt;   \n \n 932:   83 ec 08                sub    esp,0x8\n 935:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n 938:   8d 83 e4 ea ff ff       lea    eax,[ebx-0x151c]\n 93e:   50                      push   eax\n 93f:   e8 ac fb ff ff          call   4f0 &lt;printf@plt&gt;\n 944:   83 c4 10                add    esp,0x10\n 947:   8b 45 0c                mov    eax,DWORD PTR [ebp+0xc]\n 94a:   0f af 45 f4             imul   eax,DWORD PTR [ebp-0xc]\n 94e:   89 45 f0                mov    DWORD PTR [ebp-0x10],eax\n 951:   8b 55 08                mov    edx,DWORD PTR [ebp+0x8]\n 954:   8b 45 f0                mov    eax,DWORD PTR [ebp-0x10]\n 957:   01 d0                   add    eax,edx\n 959:   ff d0                   call   eax\n</code></pre>\n<p>There are no references to address <code>932</code> in the code so it is either an indirect call like we see at the last address <code>959</code> or it is intentionally left out and I have to patch to get to this section.  I suspect it is the latter as there is a piece of code elsewhere that points to a <code>deadc0de</code> address.  However, When I patch to this section, the only string given is <code>\"Unexpected error condition. Control char is %d\\n\"</code> which makes me wonder if this is some sort of normal compiler artifact.</p>\n<p>My questions are</p>\n<ol>\n<li>Am I focusing on the wrong section because this <em><strong>is</strong></em> indeed a normal artifact?</li>\n<li>If <code>925</code> sets a stack address to <code>0</code> and then <code>92c</code> compares that same stack address to <code>0</code>, is there any way that this check could ever fail so that <code>je</code> at <code>930</code> is not taken?</li>\n</ol>\n<p><strong>27-04-2022 EDIT:</strong>\n<code>readelf -x .rodata &lt;program&gt;</code> returns the \"Unexpected error condition ...\" string as part of the rodata section.  This very much leads me to believe that this is not a compiler artifact and is instead, part of the challenge</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "84",
    "tags": [
        "disassembly",
        "x86",
        "elf",
        "intel"
    ],
    "user": "Mr. Kelsey",
    "time": "Apr 28, 2022 at 9:06",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Why do you think <code>932</code> be called? I see that <code>92c</code> could be part of a loop. The stack operation is only at <code>932 </code> to make the <code>printf</code> call. Can you share the original binary?</span>",
            "time": null
        },
        {
            "user": "Mr. Kelsey",
            "text": "<span class=\"comment-copy\">@sudhackar  I cannot share the binary.  It is not an open crackme but rather a challenge as part of a CTF that prohibits placing challenge information into public space.  That is why I have shared so little of the code here.  <code>92c</code> is not part of a loop.  '922' - <code>930</code> marks the end of a conditional branch that gets taken if the program is supplied a proper password.  The line above [not shown here] is a call to print the \"correct password\" string.</span>",
            "time": null
        }
    ],
    "answers_data": []
}