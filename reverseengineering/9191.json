{
    "title": "Patch methods in COM dll",
    "link": "https://reverseengineering.stackexchange.com/questions/9191/patch-methods-in-com-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have COM DLL with one class and one interface.<br/>\nWhen I open it with COMView I see all the methods in the class/interface.</p>\n<p>I want to modify the behavior of one method in this COM but I don't know how. I failed debugging it in debugger because it uses multiple threads and I couldn't find the DLL's code.</p>\n<p>Is there a way to patch a function without using the debugger?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "188",
    "tags": [
        "windows",
        "decompilation",
        "dll",
        "patching",
        "com"
    ],
    "user": "nrofis",
    "time": "Mar 27, 2017 at 14:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Debugging COM is indeed a bit on an issue, however you don't necessarily need to debug it in order to retrieve an address to the function you're interested in. Additionally, there are tricks to find COM related functions while debugging.</p>\n<p>Once you got the function's address, simply open that COM dll with any patching tool and patch the assembly as you'd like. Just google for a binary patching tool you feel comfortable with.</p>\n<p>There are basically three ways I can think of to get the address of that function:</p>\n<ol>\n<li>First, the function you're interested in might be exported. This is not a requirement for COM servers to function in most cases but occasionally happens. If it is exported, this is obviously the easiest way to find it.</li>\n<li>You could write a small executable that uses the COM server. That executable should call the function you're looking for, and by debugging <em>it</em> you will find the RVA of the function you're after. Just patch in memory and save (olly allows that, for example) or translate the RVA to file offset and patch statically.</li>\n<li>This is a bit more difficult but still possible. You could statically find the COM object's virtual table and resolve it using <em>type libraries</em>. You could then get the function's offset just the same. See <a href=\"https://reverseengineering.stackexchange.com/questions/12356/how-to-intercept-a-call-to-function-with-known-name-from-known-dll\">This Q&amp;A</a> for more info about type libraries.</li>\n</ol>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}