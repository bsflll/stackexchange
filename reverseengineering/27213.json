{
    "title": "How to apply complete type information from PDB for multiple images in one IDA database?",
    "link": "https://reverseengineering.stackexchange.com/questions/27213/how-to-apply-complete-type-information-from-pdb-for-multiple-images-in-one-ida-d",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA is capable of loading multiple images/DLLs into the same database. In this scenario, <code>ntdll.dll</code> and <code>kernel.dll</code> have been loaded additionally to the main target <code>.exe</code>-file into the database. On top of that the PDB files <code>ntdll.pdb</code> and <code>kernel.pdb</code> have been loaded using <code>File -&gt; Load file -&gt; PDB file...</code> with specifying the address of the respective image base.</p>\n<p>It's working quite well, e. g. all the functions and symbols are visibly and usable. Nevertheless, some type information are missing. Most importantly: correct function declarations and argument types.</p>\n<p>Here's what the decompiler gets me when using the approach described above for an example function <code>RtlUnwindEx</code>:</p>\n<pre><code>__int64 __fastcall ntdll_RtlUnwindEx(int a1, int a2, int a3, int a4, __int64 a5, __int64 a6);\n</code></pre>\n<p>However, this is how it looks like when analyzing <code>ntdll.dll</code> in its own database and applying the PDB accordingly:</p>\n<pre><code>void __stdcall RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable);\n</code></pre>\n<p><strong>Why is IDA not correctly determining the function declaration/argument types in the multi-image database even though the information should be there?</strong></p>\n<p>Additional information:</p>\n<ul>\n<li>Settings under <code>Options -&gt; Compiler options</code> in the multi-image database have been adjusted to match what the settings are for the single <code>ntdll.dll</code> database</li>\n<li>Working with 64-bit images here</li>\n<li>The <code>Reanalyze program</code> action has been executed after loading all PDB files</li>\n</ul>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "304",
    "tags": [
        "ida",
        "windows",
        "pdb"
    ],
    "user": "new_turtle",
    "time": "Mar 10, 2021 at 18:46",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">both look suspect  if it is 64bit __stdcall is not applicable are you sure you are not mixing up a 32 bit ntdll  with a 64 bit ntdll or something like that</span>",
            "time": null
        },
        {
            "user": "new_turtle",
            "text": "<span class=\"comment-copy\">Yeah, also saw that and was wondering as well but no, I'm loading the same file, both times as AMD64 PE file.</span>",
            "time": null
        }
    ],
    "answers_data": []
}