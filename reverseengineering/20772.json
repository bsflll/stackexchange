{
    "title": "2byte checksum for serial traffic",
    "link": "https://reverseengineering.stackexchange.com/questions/20772/2byte-checksum-for-serial-traffic",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on an RFID reader that has partial implementation with ISO/IEC 14443-4 although not specifically compliant. I can decode a lot of the strings and understand the command base but I have not been able to crack the check sum.</p>\n<p>Read commands are 4 bytes in the format</p>\n<pre><code>0x82 Read Chunk\n0xYY Chunk Number\n2 Byte checksum\n</code></pre>\n<p>the response is to echo the Read command, chunk Id, 32 Bytes of data then 2 byte checksum.</p>\n<p>I've tried the hex strings with a bunch of standard checksum calculators as well as looking for things like logical ands but cannot find any rule for how they are generated. Is there some other techniques for this style of checksum?</p>\n<p>Sample Data:</p>\n<pre><code>8208942d\n82081101004049424d2020202020363831303232393437310004000d1f0e000d220a273b\n82091d3c\n8209000d2591000e8521000e8521000e881d363955320000000000000000386c1940c1a4\n821b8e0f\n821b00000000000000000000000000000000000000000000000000000000000000008ca8\n821c317b\n821c0000000000000000000000000000000000000000000000000000000000000000b461\n821db86a\n821d0000000000000000000000000000000000000000000000000000000000000000d721\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "serial-communication"
    ],
    "user": "Andrew V",
    "time": "Mar 4, 2019 at 13:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is a CRC-A checksum. 16bits.\nPreface: From my research this is the crc for that standard. </p>\n<p>Its calculated from start of packet up to checksum</p>\n<p><a href=\"https://crccalc.com\" rel=\"nofollow noreferrer\">https://crccalc.com</a>\nPut 8209 and check the result: 3C1D. This is byte swapped due to endian. Probably why you didn't find it.  </p>\n<p>Let me know if you need help, be happy to help code it.\n Here is a c++ implementation of the calculation:\n<a href=\"https://github.com/pkourany/MFRC522_RFID_Library/blob/master/src/MFRC522.cpp\" rel=\"nofollow noreferrer\">https://github.com/pkourany/MFRC522_RFID_Library/blob/master/src/MFRC522.cpp</a>\nThis is the Arduino library for the NFC chip.</p>\n<p>Cheers </p>\n</div>",
            "votes": "3",
            "user": "Thomas",
            "time": "Mar 6, 2019 at 3:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andrew V",
                    "text": "<span class=\"comment-copy\">Spot on, what a champ! You are right about the endian. I also missed the ASCII/Hex flag on that calculator as well when I tried it previously.   Interestingly the tags I am working with are not NFC compliant, they were based on a draft version of the 14443-4</span>",
                    "time": null
                },
                {
                    "user": "Thomas",
                    "text": "<span class=\"comment-copy\">@AndrewV Absolute pleasure. The CRC was probably decided very early on or was taken from another IEEE standard. Like Qualcomm uses TCP/IP CRC for the CDMA diag protocol.</span>",
                    "time": null
                }
            ]
        }
    ]
}