{
    "title": "IDA Pro addresses of arguments",
    "link": "https://reverseengineering.stackexchange.com/questions/14110/ida-pro-addresses-of-arguments",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a newbie in reverse engineering and I was trying to understand this blog post:</p>\n<p><a href=\"http://0x0atang.github.io/reversing/2015/09/17/flareon2-concolic.html\" rel=\"nofollow noreferrer\">http://0x0atang.github.io/reversing/2015/09/17/flareon2-concolic.html</a></p>\n<p>At one point, the author says the following when looking at the arguments of a function he wants to run using symbolic execution:</p>\n<p>Let's zoom into and find out more about the function sub_401084. It takes three arguments, namely (1) address to a buffer of bytes at 0x4010E4, which is presumbly the reference key for verification, (2) address to a user input buffer at 0x402159, and (3) the length of the user password supplied to the program. </p>\n<p>My question is, how does he figure out the addresses of the 3 arguments? In IDA pro you just have the stack view with the offsets with respect to EBP. I have tried to do this calculation but I don't get his values. Can anyone tell me how I should reason? Thank you!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "609",
    "tags": [
        "ida",
        "disassemblers"
    ],
    "user": "Simus",
    "time": "Dec 4, 2016 at 12:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>He probably didn't : the executable is packed, ASLR is disabled and relocations are stripped. Which means the two address arguments <code>0x4010E4</code> and <code>0x402159</code> are fixed.</p>\n<p><a href=\"https://i.sstatic.net/7iawd.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/7iawd.png\"/></a></p>\n<p>There are major consequences since :</p>\n<ul>\n<li>the first argument <code>0x4010E4</code> is <code>sub_401000</code> ( <code>sub_401084</code> caller) return address ! Since ASLR is disabled, this is a constant. You can see here : </li>\n</ul>\n<p><a href=\"https://i.sstatic.net/S0mvn.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/S0mvn.png\"/></a></p>\n<ul>\n<li>the second argument <code>0x402159</code> is a static buffer in the binary <code>.data</code> segment. Since relocations are stripped, this is also a constant.</li>\n</ul>\n<p>In the general case (ASLR + reloc), it's much more complicated. There is <a href=\"https://reverseengineering.stackexchange.com/questions/8870/extracting-arguments-from-ida\">a great SO/RE question about extractin functions args in Idapython</a> which then must be glued with <code>angr</code> Memory states in order to work properly.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}