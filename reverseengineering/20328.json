{
    "title": "Identification of RF hash algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/20328/identification-of-rf-hash-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an unbranded LED lamp with a remote control. I would like to reverse the protocol of the remote but unfortunately I can't create my own packages. The frequency of the remote transceiver is 2.4GHz (PA = 6dBm, channel = 1) so I used an NRF24 for collecting the frames from a button. When I 'replay' the collected messages the lamp reacts as expected.<br/>\nAs I observed the preamble is 5 bytes long and in the end of packet there is a 2 bytes long hash, probably a CRC16. (I think it should be some kind of hash because one bit change in the packet generates totally different value in last 2 bytes position.) Unfortunately I couldn't identify the type of transceiver so I cannot figure out the packet format. I tried to reverse the hash with various methods but without luck.  </p>\n<p>Do you have any idea what is the hash algorithm?</p>\n<p>There are some test vectors from the same button.</p>\n<pre><code>aa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  00 21  00 60 1f 55  57  84 c1\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  00 e1  00 60 1f 55  56  c4 cc\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  01 21  00 60 1f 55  56  86 95\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  01 e1  00 60 1f 55  55  c4 de\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  02 41  00 60 1f 55  55  75 64\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  02 61  00 60 1f 55  55  40 6c\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  02 81  00 60 1f 55  55  25 48\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  02 c1  00 60 1f 55  54  f5 6d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  02 c1  00 60 1f 55  54  f5 6d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  03 61  00 60 1f 55  54  42 38\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 01  00 60 1f 55  53  b8 9b\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 01  00 60 1f 55  53  b8 9b\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 21  00 60 1f 55  53  8d 93\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 41  00 60 1f 55  53  78 9f\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 61  00 60 1f 55  53  4d 97\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 61  00 60 1f 55  53  4d 97\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 81  00 60 1f 55  53  28 b3\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  04 81  00 60 1f 55  53  28 b3\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  05 01  00 60 1f 55  52  ba cf\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  05 81  00 60 1f 55  52  2a e7\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  05 a1  00 60 1f 55  52  1f ef\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  06 61  00 60 1f 55  51  49 3e\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  06 61  00 60 1f 55  51  49 3e\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  07 21  00 60 1f 55  50  8b 6e\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  07 a1  00 60 1f 55  50  1b 46\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  07 c1  00 60 1f 55  4f  e3 88\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  08 e1  00 60 1f 55  4e  c4 58\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  08 e1  00 60 1f 55  4e  c4 58\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  08 e1  00 60 1f 55  4e  c4 58\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  08 01  00 60 1f 55  4f  b1 5d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  08 61  00 60 1f 55  4f  44 51\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  09 41  00 60 1f 55  4e  73 0d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  09 21  00 60 1f 55  4e  86 01\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0a 41  00 60 1f 55  4d  75 f0\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0a 61  00 60 1f 55  4d  40 f8\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0a 81  00 60 1f 55  4d  25 dc\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0b 01  00 60 1f 55  4c  b7 a0\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0b 21  00 60 1f 55  4c  82 a8\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0b 41  00 60 1f 55  4c  77 a4\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0b 41  00 60 1f 55  4c  77 a4\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0b 61  00 60 1f 55  4c  42 ac\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c 21  00 60 1f 55  4b  8d 07\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c 61  00 60 1f 55  4b  4d 03\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c 61  00 60 1f 55  4b  4d 03\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c 81  00 60 1f 55  4b  28 27\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c c1  00 60 1f 55  4a  f8 02\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c c1  00 60 1f 55  4a  f8 02\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c e1  00 60 1f 55  4a  cd 0a\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0c e1  00 60 1f 55  4a  cd 0a\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0d 01  00 60 1f 55  4a  ba 5b\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0d 81  00 60 1f 55  4a  2a 73\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e 01  00 60 1f 55  49  bc a6\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e 21  00 60 1f 55  49  89 ae\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e 61  00 60 1f 55  49  49 aa\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e 81  00 60 1f 55  49  2c 8e\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e a1  00 60 1f 55  49  19 86\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e c1  00 60 1f 55  48  fc ab\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0e e1  00 60 1f 55  48  c9 a3\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f 01  00 60 1f 55  48  be f2\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f 21  00 60 1f 55  48  8b fa\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f 61  00 60 1f 55  48  4b fe\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f 61  00 60 1f 55  48  4b fe\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f 61  00 60 1f 55  48  4b fe\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f a1  00 60 1f 55  48  1b d2\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f c1  00 60 1f 55  47  f1 2d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  0f c1  00 60 1f 55  47  f1 2d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 01  00 60 1f 55  47  b6 87\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 21  00 60 1f 55  47  83 8f\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 21  00 60 1f 55  47  83 8f\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 41  00 60 1f 55  47  76 83\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 61  00 60 1f 55  47  43 8b\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 e1  00 60 1f 55  46  c3 82\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  10 e1  00 60 1f 55  46  c3 82\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  11 81  00 60 1f 55  46  24 fb\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  11 a1  00 60 1f 55  46  11 f3\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  11 a1  00 60 1f 55  46  11 f3\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  11 a1  00 60 1f 55  46  11 f3\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  11 e1  00 60 1f 55  45  c3 90\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  11 e1  00 60 1f 55  45  c3 90\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  12 41  00 60 1f 55  45  72 2a\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  12 41  00 60 1f 55  45  72 2a\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  12 61  00 60 1f 55  45  47 22\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  12 61  00 60 1f 55  45  47 22\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  12 c1  00 60 1f 55  44  f2 23\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  12 c1  00 60 1f 55  44  f2 23\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  13 21  00 60 1f 55  44  85 72\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  13 21  00 60 1f 55  44  85 72\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  13 21  00 60 1f 55  44  85 72\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  13 61  00 60 1f 55  44  45 76\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  13 81  00 60 1f 55  44  20 52\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  13 e1  00 60 1f 55  43  c3 b5\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  14 a1  00 60 1f 55  43  1a f5\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  14 e1  00 60 1f 55  42  ca d0\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  15 81  00 60 1f 55  42  2d a9\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  15 a1  00 60 1f 55  42  18 a1\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  16 61  00 60 1f 55  41  4e 70\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  16 a1  00 60 1f 55  41  1e 5c\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  16 c1  00 60 1f 55  40  fb 71\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  16 e1  00 60 1f 55  40  ce 79\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  18 01  00 60 1f 55  5f  b6 13\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  18 c1  00 60 1f 55  5e  f6 1e\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  19 81  00 60 1f 55  5e  24 6f\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  19 a1  00 60 1f 55  5e  11 67\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1a 01  00 60 1f 55  5d  b2 ba\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1a c1  00 60 1f 55  5c  f2 b7\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1b 21  00 60 1f 55  5c  85 e6\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1b 81  00 60 1f 55  5c  20 c6\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1c 01  00 60 1f 55  5b  bf 41\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1d 01  00 60 1f 55  5a  bd 15\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1d 81  00 60 1f 55  5a  2d 3d\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1d a1  00 60 1f 55  5a  18 35\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1e 41  00 60 1f 55  59  7b ec\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1e c1  00 60 1f 55  58  fb e5\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1f 21  00 60 1f 55  58  8c b4\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1f 41  00 60 1f 55  58  79 b8\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1f 61  00 60 1f 55  58  4c b0\naa aa aa aa aa 90 8e 7c 64 ce 20 33 b8 a0 26 3f c0  1f e1  00 60 1f 55  57  c3 6b\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "199",
    "tags": [
        "crc",
        "hash-functions"
    ],
    "user": "0x6261627564",
    "time": "Jan 11, 2019 at 6:59",
    "comments": [
        {
            "user": "fgrieu",
            "text": "<span class=\"comment-copy\">Have you tried the generic technique <a href=\"https://crypto.stackexchange.com/a/32712/555\">there</a>? It look like it should work, since the XOR of the following three given lines leads to the last one, which is strongly suggestive of an affine function.$$\\mathtt{aaaaaaaaaa908e7c64ce2033b8a0263fc00 40 100601f55 53 b89b}\\\\ \\mathtt{aaaaaaaaaa908e7c64ce2033b8a0263fc00 42 100601f55 53 8d93}\\\\ \\mathtt{aaaaaaaaaa908e7c64ce2033b8a0263fc00 24 100601f55 55 7564}\\\\ \\mathtt{aaaaaaaaaa908e7c64ce2033b8a0263fc00 26 100601f55 55 406c}$$</span>",
            "time": null
        },
        {
            "user": "Babud Imre",
            "text": "<span class=\"comment-copy\">Amazing! No, I haven't. I assumed it is a non-linear function but you are right, this 'rule' is true in other cases as well. I'd be really curious how did you found it so quickly. Thank you!</span>",
            "time": null
        },
        {
            "user": "fgrieu",
            "text": "<span class=\"comment-copy\">Facing an unknown Frame Check Sequence, first thing is to check if it is affine. I took the lines; removed spaces; sorted; removed duplicates; kept the few columns that change; found two linear dependencies by visual inspection, both consistent with affine; concluded this is affine (as all CRCs are) beyond reasonable doubt. But unless I err, this is not any of the 32768 natural 16-bit CRCs (giving a constant remainder when the FCS is included with the same convention as the rest) for either byte endianness. Do you know endianness, and the exact relation between physical bits and the hex dump?</span>",
            "time": null
        },
        {
            "user": "Babud Imre",
            "text": "<span class=\"comment-copy\">Yes, that was also my guess. I wrote a script which tries to bruteforce the CRC16 with all of given parameters (poly, start, final xor, revin, revout) in most of the possible combinations but without success. &lt;br&gt; Unfortunately I do not know such stuffs. The remote is in a closed case and I cannot open unless I do not break it. I opened the receiver side but there is no mark on transceiver, so I have no idea about the physical layer. (It would be the easiest way to check the hash algo in the datasheet). I used a cheap RF big endian transceiver called NRF24L01+ for collecting data from air.</span>",
            "time": null
        },
        {
            "user": "Maarten Bodewes",
            "text": "<span class=\"comment-copy\">I'm glad you have received an answer, but the question remains off topic on this site, so I've declined to reopen it.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As explained <a href=\"https://crypto.stackexchange.com/q/32704/555\">there</a> for a similar problem, facing an unknown Frame Check Sequence, the first thing should be to determine if it is an affine function of the frame data, for the sense that has in cryptography. This can be defined by the property:</p>\n<blockquote>\n<p>For any set with an odd number of frames of equal length, the XOR of the Frame Check Sequences for these frames is also the FCS for the (often, other) frame obtained by XOR-ing the data portion of the frames in the set.</p>\n</blockquote>\n<p>All CRCs are affine (including non-standard variations); secure cryptographic hashes and Message Authentication Codes are not.</p>\n<p>There is evidence that indeed that FCS is affine: it is easy to isolate blocks of four (or larger even number) of different lines such that one is the XOR of the others, and that allows prediction of the last two bytes for most lines. Two examples:</p>\n<pre><code>aaaaaaaaaa908e7c64ce2033b8a0263fc0 0241 00601f55 55 7564\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0261 00601f55 55 406c\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0401 00601f55 53 b89b\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0421 00601f55 53 8d93\n\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0441 00601f55 53 789f\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0501 00601f55 52 bacf\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0661 00601f55 51 493e\naaaaaaaaaa908e7c64ce2033b8a0263fc0 0721 00601f55 50 8b6e\n</code></pre>\n<p>Using Gaussian elimination, I verified that all the question's 93 given distinct lines are consistent with an affine function, and determined the influence on the rightmost two bytes of the 13 bits that vary in the rest of the frame. Therefore, the whole data set becomes equivalent to (any) one of it lines, and the following short table telling the influence on the FCS of toggling each of the 13 bits: </p>\n<pre><code>byte  byte    FCS influence\nindex mask    (bytes 24 and 25)\n 17   0x10    0x157F\n 17   0x08    0x1BBD\n 17   0x04    0x0DDE\n 17   0x02    0x06EF\n 17   0x01    0x1275\n 18   0x80    0x9028\n 18   0x40    0xC004\n 18   0x20    0x3508\n 23   0x10    0x1231\n 23   0x08    0x0918\n 23   0x04    0x048C\n 23   0x02    0x0246\n 23   0x01    0x1021\n</code></pre>\n<p>This is enough to compute the FCS of 2<sup>13</sup> different frames, starting from that of the reference frame, and XORing its FCS with the FCS influence for any bit that differs from the reference frame. The code is only a few lines of C. That works for any affine function when we have adequate examples. We need one example frame per frame bit excluding FCS when we can choose the example frames, and typically only a few more frames for uniformly random frames.</p>\n<hr/>\n<p>There is further regularity in there! The FCS influence for the 5 bits of byte 23 is precisely that expected for the CRC-16-CCITT polynomial <em>x</em><sup>16</sup>+<em>x</em><sup>12</sup>+<em>x</em><sup>5</sup>+1 (when using big-endian convention): the influence of bit <em>i</em> counting from the right (here 26*8-1-<em>n</em> with <em>n</em> from the left and 0-based) is the value obtained by computing the remainder of the polynomial division of <em>x</em><sup><em>i</em></sup> by <em>x</em><sup>16</sup>+<em>x</em><sup>12</sup>+<em>x</em><sup>5</sup>+1, and turning the remainder polynomial to a value by evaluating it for <em>x</em>=2.</p>\n<p>E.g., for influence of byte 23 mask 0x10, evaluating the remainder of the polynomial division of <em>x</em><sup>20</sup> by <em>x</em><sup>16</sup>+<em>x</em><sup>12</sup>+<em>x</em><sup>5</sup>+1 , or equivalently <code>0x100000</code> by <code>0x011021</code>, goes <code>0x100000^(0x011021&lt;&lt;4) = 0x010210</code> then <code>0x010210^(0x011021&lt;&lt;0) = 0x1231</code>.</p>\n<hr/>\n<p>One possibility is that this FCS is one of countless failed attempts to implement CRC-16-CCITT; though one that went unusually out of track, in a way that still puzzles me. I'm tempted to incriminate a partial or misaligned capture, but that tends to conflicts with the statement:</p>\n<blockquote>\n<p>When I 'replay' the collected messages the lamp reacts as expected.</p>\n</blockquote>\n<p>More samples might help. Perhaps, put this into a <a href=\"https://pastebin.com/\" rel=\"nofollow noreferrer\">pastebin</a> linked in the question or a comment. Perhaps, give settings of the <a href=\"https://github.com/blueardour/circus/blob/master/Datasheet/Wireless/NORDIC/nRF24L01_Product_Specification_v2_0.pdf\" rel=\"nofollow noreferrer\">NRF24L01</a> device and/or software used for the capture.</p>\n</div>",
            "votes": "6",
            "user": "fgrieu",
            "time": "Jan 14, 2019 at 8:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0x6261627564",
                    "text": "<span class=\"comment-copy\">Thank you very much for your effort. I read your post several times in the past few hours and after every iteration it gives me more and more details how can I reverse a CRC function. Awsome, I learnt a lot. :-)</span>",
                    "time": null
                },
                {
                    "user": "0x6261627564",
                    "text": "<span class=\"comment-copy\">Thank you much for your time, I really appreciate that. I started to looking for the additional parameters of CRC algorithm with 0x1021 polynom again, but I accepted your answer because this 'lookup table' solve the problem easily. I would never have thought that it is possible to recreate the hash in such an easy way. In general it means if only few bits changes in a messages and/or the protected message is too short (like a CAN message) then we can easily manipulate any affine functions. According to my automotive experience it could be a serious hazard. I'll create additional logs.</span>",
                    "time": null
                },
                {
                    "user": "fgrieu",
                    "text": "<span class=\"comment-copy\">@Babud Imre: indeed, CRCs are fine to protect message integrity against random errors, but not intelligent attacks. No affine function does. That standard cryptographic fact is sometime overlooked. I'm still puzzled: I reverse-engineered many 16-bit CRCs, but never found one that deviant! My guess is that it is (bad) custom crypto, or due to some alteration in the capture process (though I can't figure one with this effect)</span>",
                    "time": null
                }
            ]
        }
    ]
}