{
    "title": "How does this function take the argument if its not pushed into the stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/29173/how-does-this-function-take-the-argument-if-its-not-pushed-into-the-stack",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p> I dont understand how does the function take the argument without pushing</p>\n<pre><code>push ebp\nmov ebp, esp\nand esp, 0FFFFFFF0h\nsub esp, 20h\nmov [esp+20h+var_20], offset aEnterX ; \"Enter X:\"\ncall _puts\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "58",
    "tags": [
        "assembly",
        "x86",
        "intel"
    ],
    "user": "jackthejones",
    "time": "Aug 21, 2021 at 19:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>var_20</code> is likely defined as -20h, so the <code>mov</code> instruction is actually accessing <code>[esp]</code>. This puts the argument at the expected location for the called function, but does not change the <code>esp</code> itself. This approach of argument passing is used by GCC since many years ago. Supposedly this used to be somewhat faster than pushing <a href=\"https://gcc.gnu.org/legacy-ml/gcc-patches/2014-01/msg00008.html\" rel=\"nofollow noreferrer\">in some cases</a>, and also changing <code>esp</code> one time in the prolog makes the stack management easier for the compiler.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 21, 2021 at 19:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}