{
    "title": "Do you have tips analyzing reported PoC(exploit) files?",
    "link": "https://reverseengineering.stackexchange.com/questions/3471/do-you-have-tips-analyzing-reported-pocexploit-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My daily job is analyzing reported proof of concept files that exploits document viewers. People who report vulnerabilities in document viewers just give me the PoC and vulnerable version number. They usually fuzz stuff and find offset that leads to stack overflows etc. Which means they do not give me info about the root cause of the vuln. So only with the vulnerable binary and the PoC, I need to analyze following things:</p>\n<ol>\n<li><p>Does the PoC actually work?</p></li>\n<li><p>In which part of the binary is vulnerable? (ex. no argument checking in function A ... blah blah; I need to know this because I have to contact the vendor to fix the vuln)</p></li>\n</ol>\n<p>I am new to this field and currently this is how I do it(I analyze in XP).</p>\n<ol>\n<li><p>Run the PoC</p></li>\n<li><p>look at the call stack when there is a exception-&gt;follow them</p></li>\n<li><p>Check whether SEH is corrupted -&gt; set breakpoint on the corrupted SEH to find the instruction that overflows the stack</p></li>\n</ol>\n<p>By playing around I can find the assembly instruction that triggers the exploit. However, it is hard to backtrack all the way to the root cause. Assembly instruction that overflows is usually in the library but the vuln is not the library, it is the user program that maliciously called the library right? </p>\n<p>I don't know if I made my point clear but need some tips doing this kind of reverse engineering. </p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "350",
    "tags": [
        "exploit",
        "vulnerability-analysis",
        "seh"
    ],
    "user": "Jaewon Min",
    "time": "Jan 16, 2014 at 22:20",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">I'ld use memory/hardware breakpoints, or look for repeating patterns in the buffer values, to track back to the root problem. Btw in the POC code you see how the value is inputted, so you should be able to determine where to look from that.</span>",
            "time": null
        },
        {
            "user": "Jaewon Min",
            "text": "<span class=\"comment-copy\">Thanks for the reply. I should make one thing clear, POC is a document file( ex .doc files) so there is no code that inputs value :( I just open it inside the viewer</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Don't assume that a working exploit will always cause an exception to be thrown :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, your platform is very important ( mine is Windows )</p>\n<p>In Windows WinDbg + <code>!exploitable</code> is one of fast analyze options.\nit is <a href=\"http://msecdbg.codeplex.com/\" rel=\"nofollow\">here</a></p>\n<p>Additionally I use WinDbg + <code>!analyze</code> to determine standard name of bug...\nit is default WinDbg extension.</p>\n<p>Finally, as the nature of bugs is unknown (in your case) it is not an easy way to detect root cause.</p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "May 7, 2014 at 10:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}