{
    "title": "How to detect a debugger using some \"time\" checking strategies?",
    "link": "https://reverseengineering.stackexchange.com/questions/3477/how-to-detect-a-debugger-using-some-time-checking-strategies",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have seen several anti-debug strategies, and I am wondering if there are some anti-debugger methods that can evaluate the program running time, thus detecting the exist of debugger.</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "debuggers",
        "anti-debugging"
    ],
    "user": "lllllllllllll",
    "time": "Jan 19, 2014 at 17:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is pretty broad subject :-) There are several examples:</p>\n<ol>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms724408%28v=vs.85%29.aspx\"><code>GetTickCount()</code></a> - Retrieves the number of milliseconds that have elapsed since the system was started. Putting those in different parts of the program and then checking the difference can give you some primitive detection.</li>\n<li><a href=\"http://www.cplusplus.com/reference/ctime/time/\"><code>time()</code></a> - Get the current calendar time.</li>\n<li><a href=\"http://faydoc.tripod.com/cpu/rdtsc.htm\"><code>RDTSC</code></a> - Gets the current value of the processor's time-stamp counter. This one could be hard to find if placed wisely.</li>\n</ol>\n<p>The thing is, that all those could be neutralized once the researcher became aware of them. There are various debugger plugins which will make that happen by patching APIs, installing drivers and etc. Of course, it could be done manually in most cases.</p>\n<p>What you really should think of is placing and integrating those inside your code, so it will be less evident what the real purpose of the calls to the APIs/instruction. </p>\n</div>",
            "votes": "9",
            "user": "PhoeniX",
            "time": "Jan 19, 2014 at 7:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Polynomial",
                    "text": "<span class=\"comment-copy\">One additional trick: you can put timing check calls across threads to make it difficult to trace through them at the same time.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are CPU instructions and OS APIs that can achieve this, such as</p>\n<pre><code>RDPMC\nRDTSC\nGetLocalTime\nGetSystemTime\nGetTickCount\nKiGetTickCount\nQueryPerformanceCounter\ntimeGetTime\n</code></pre>\n<p>The result is achieved by requesting the current time, performing some kind of CPU-intensive operation (or requiring that someone debugging the code does so, such as single-stepping), requesting the time again, and then calculating the delta between the two.  If the delta is significantly larger than you would expect in native execution mode, then it suggests the presence of the debugger.  Note, however, that this is far from an accurate method, since that result is indistinguishable from a system under heavy load.</p>\n<p>This is covered in some detail in section \"(C) Execution Timing\" in my \"Ultimate\" Anti-Debugging Reference (<a href=\"http://pferrie.host22.com/papers/antidebug.pdf\" rel=\"nofollow\">http://pferrie.host22.com/papers/antidebug.pdf</a>)</p>\n</div>",
            "votes": "4",
            "user": "peter ferrie",
            "time": "Jan 20, 2014 at 4:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}