{
    "title": "How to load library defined symbols to a specified location?",
    "link": "https://reverseengineering.stackexchange.com/questions/8166/how-to-load-library-defined-symbols-to-a-specified-location",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The test is on Ubuntu 12.04, 32-bit, with <code>gcc</code> 4.6.3.</p>\n<p>Basically I am doing some binary manipulation work on ELF binaries, and what I have to do now is to assemble a assembly program and guarantee the libc symbols are loaded to a predefined address by me.</p>\n<p>Let me elaborate it in an simple example.</p>\n<p>Suppose in the original code, libc symbols <code>stdout@GLIBC_2.0</code> is used. </p>\n<pre><code>#include &lt;stdio.h&gt;\nint main() {\n    FILE* fout = stdout;\n    fprintf( fout, \"hello\\n\" );\n}\n</code></pre>\n<p>When I compile it and check the symbol address using these commands:</p>\n<pre><code>gcc main.c\nreadelf -s a.out | grep stdout\n</code></pre>\n<p>I got this:</p>\n<pre><code>0804a020     4 OBJECT  GLOBAL DEFAULT   25 stdout@GLIBC_2.0 (2)\n0804a020     4 OBJECT  GLOBAL DEFAULT   25 stdout@@GLIBC_2.0\n</code></pre>\n<p>and the <code>.bss</code> section is like this:</p>\n<pre><code>  readelf -S a.out | grep bss\n  [25] .bss              NOBITS          0804a020 001014 00000c 00  WA  0   0 32\n</code></pre>\n<p>Now what I am trying to do is to load the <code>stdout</code> symbol in a predefined address, so I did this:</p>\n<pre><code>echo \"stdout = 0x804a024;\" &gt; symbolfile\ngcc -Wl,--just-symbols=symbolfile  main.c\n</code></pre>\n<p>Then when I check the <code>.bss</code> section and symbol <code>stdout</code>, I got this:</p>\n<pre><code> [25] .bss              NOBITS          0804a014 001014 000008 00  WA  0   0  4\n\n\n4: 0804a024     0 NOTYPE  GLOBAL DEFAULT  ABS stdout\n49: 0804a024     0 NOTYPE  GLOBAL DEFAULT  ABS stdout\n</code></pre>\n<ol>\n<li><p>It seems that I didn't successfully load the symbol <code>stdout@@GLIBC_2.0</code>, but just a wired <code>stdout</code>. (I tried to write <code>stdout@@GLIBC_2.0</code> in <code>symbolfile</code>, but it can't compile... )</p></li>\n<li><p>It seems that as I didn't make it, the beginning address of <code>.bss</code> section has also changed, which makes the address of <code>stdout</code> symbol in a non-section area. During runtime, it throws a segmentation fault when loading from <code>0x804a024</code>. </p></li>\n</ol>\n<p>Could anyone help me on how to successfully load the library symbol at a predefined address? Thanks!  </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "862",
    "tags": [
        "assembly",
        "c",
        "elf",
        "dynamic-linking"
    ],
    "user": "lllllllllllll",
    "time": "Feb 5, 2015 at 22:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>in the code (or in the linker command file) create a memory name (say .stdio) and give it a specific address.  then write a section statement: '.stdio' and list the 'stdio.text'  will then be the first thing in the memory .stdio section.  The linker command file can also have a global name at the .stdio section, that can be referenced from within a program.</p>\n</div>",
            "votes": "1",
            "user": "user3629249",
            "time": "Feb 6, 2015 at 2:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}