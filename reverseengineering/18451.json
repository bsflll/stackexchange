{
    "title": "What are the popular machine learning unsupervised approaches to learning binary data representations?",
    "link": "https://reverseengineering.stackexchange.com/questions/18451/what-are-the-popular-machine-learning-unsupervised-approaches-to-learning-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is somewhat open-ended question, so bear with me please.</p>\n<p>Be it a binary payload that you pull from network packet, firmware blob you pull of some EPROM or data intercepted straight from physical bus - does anybody here use machine learning models to learn data representation?</p>\n<p>The problem here is that we have a large sequence(s) of binary data of known length which has some kind of a structure (think stream of IP packets) which is yet to be understood.</p>\n<p>Assuming we have enough of this data, we can deduce data representations in unsupervised manner, e.g. if we have pcap capture of a network packet flow on ethernet network, we can deduce what ethernet header is, that it is typically followed by something like IP header, then UDP/TCP header and some paylond in the end.</p>\n<p><img alt=\"img\" src=\"https://i.sstatic.net/jMOCs.png\"/></p>\n<p>You could replace \"classifier\" with whatever else we use those ML models (in this case probably RNN-GRU/LSTM) for nowadays (apart from classification it could generate fake traffic etc). But the point is that unlike with common ML domains such as natural language processing, I'm not aware of any model that can be used to replace manual parsing. Most popular NLP model to learn what words mean in context of a sequence nowadays is word2vec, but is there anything like that for representing binary sequences?</p>\n<p>PS: I used example in the image just to demonstrate the problem, that could very well be binary code of unknown architecture, USB request block or anything else, point being that it is typically highly structured, opaque and sequential binary input.</p>\n<p>I guess the real question is, does anybody use ML for reverse engineering?\nIf so, do you mind sharing your experiences?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "343",
    "tags": [
        "binary-analysis",
        "binary"
    ],
    "user": "Tomas Pruzina",
    "time": "Jun 4, 2018 at 13:33",
    "comments": [
        {
            "user": "Tomas Pruzina",
            "text": "<span class=\"comment-copy\">At the moment I'm thinking byte level VAEs/LSTMs for upper part.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Inferring the structure of an unknown binary stream is a really difficult task, that I'm aware of only a few attempts at tackling:</p>\n<ol>\n<li><a href=\"https://github.com/hgascon/pulsar\" rel=\"nofollow noreferrer\">Pulsar</a> is an example project but I suspect it is not really mature.</li>\n<li><a href=\"https://github.com/netzob/netzob\" rel=\"nofollow noreferrer\">Netzob</a> is another project, and it seems more complete.</li>\n<li><a href=\"https://github.com/aoh/radamsa\" rel=\"nofollow noreferrer\">Radamsa</a> is a third project. looks more complete than Pulsar and more actively maintained than both.</li>\n</ol>\n<p>I do not believe existing \"machine learning\" models and approaches are currently capable of statistically inferring structural information about binary data.  You'll have to resort to more basic statistical inference, and that process should probably be designed from beginning to end with the end goal in mind (seems to be \"malicious classification\").</p>\n<p>Most approaches nowadays do not tackle the task of protocol inference in the process of malware classification (one could also make a few arguments against any advantage of doing so).</p>\n<p>In comparison to malware classification, I would say the task of protocol structure inference is more difficult to achieve and I would advise reevaluating if this is indeed a requirement you want to attempt meeting.</p>\n<p>Full disclosure: I'm employed by a \"next gen AV\" that makes use of ML for malware classification and have been tinkering with protocol inference in the past.</p>\n</div>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Jun 6, 2018 at 17:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tomas Pruzina",
                    "text": "<span class=\"comment-copy\">That's pretty much what I was looking for, I was just hoping that somebody came up with something better than HMMs. At the moment I have written simple fuzzer that generates random http packets and gonna test few models trying to learn underlying structure. Thanks for the link.</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">You should take a look to 'radamsa'. It tries to infer the grammar from the data you give to it and then generate outputs according to the inferred grammar.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, the more samples of discrete messages you have the better.</p>\n<p>Second, a one algorithm fits all approach isn't going to work. Use an ensemble of small simple recognizers. </p>\n<p>Third, it's coming from memory, so start by learning the memory representations for a specific thing, for example unint32.</p>\n<p>Fourth, the most difficult part of this task is having pure data. You can be comparing string bytes to int bytes and get nowhere. If you have pure string bytes or pure float bytes, you'll make progress.</p>\n</div>",
            "votes": "0",
            "user": "pythonpython",
            "time": "Dec 11, 2019 at 3:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}