{
    "title": "Are there existing automated approaches to reverse engineering the data types in a binary data stream?",
    "link": "https://reverseengineering.stackexchange.com/questions/22658/are-there-existing-automated-approaches-to-reverse-engineering-the-data-types-in",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Consider a stream of data packets of a known and consistent size, i.e., <em>N</em> bytes per packet.\n<strong>Are there existing tools that automatically detect (or estimate) the various data types present and their arrangement in the packet?</strong>\nMy goal is to convert the data stream into a handful of time-series data signals by</p>\n<ol>\n<li>deducing the arrangement and types of the data in the stream and</li>\n<li>extracting each variable into its own signal array.</li>\n</ol>\n<p>For example, the packet might consist of:</p>\n<pre><code>[double double int32 single int8 int8 int8 int8]\n</code></pre>\n<p>but all I know is that the packet is 28 bytes long.\nLet's assume that the only possible data types in the stream are: <code>double</code>, <code>single</code>, <code>int32</code>, <code>int16</code>, or <code>uint8</code>.\n(I don't particularly care if I can disambiguate between <code>char</code>, <code>int8</code>, or <code>uint8</code>.)\nLet's also assume everything is stored in bytes (no single bit flags or anything).</p>\n<h3>Some ideas</h3>\n<p>Basically what I've tried so far is to exhaustively try every possible combination and arrangement of data types and then apply some heuristics to eliminate possibilities.\nFor example, I'll cast each set of 8 bytes as a double, shifting over 1 byte at a time, and then compute the variance of the resulting signal.\nIf the variance of the signal is &gt;1e100, then we can probably safely say we've misidentified the type.\nThe problems that this approach runs into are that:</p>\n<ol>\n<li>the heuristics are hard coded and not dependent on the data</li>\n<li>the algorithm can easily mis-classify things, e.g., it can't necessarily differentiate between an <code>int32</code> and a pair of <code>int16</code>.</li>\n</ol>\n<p>I'm also aware of these two related questions: <a href=\"https://stackoverflow.com/questions/1026066/how-to-analyze-binary-file\">How to analyze binary file?</a> and <a href=\"https://stackoverflow.com/questions/492751/tools-to-help-reverse-engineer-binary-file-formats\">Tools to help reverse engineer binary file formats</a>,\nbut these answers seem to only give manual tools that require the user to then play around with the data and make some guesses about its configuration.\nSo, my question is particularly interested in automatic approaches or tools for this job.</p>\n<p>This seems related to <a href=\"https://reverseengineering.stackexchange.com/q/18451/30361\">this question</a> and <a href=\"https://reverseengineering.stackexchange.com/a/18457/30361\">its answer</a>, but the methods mentioned there seem to be aimed at a more general task of inferring the communication protocol, and not necessarily(?) the datatypes of the packet's payload, so I'm not sure how suitable these programs are to the task I've described.</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "466",
    "tags": [
        "binary-analysis",
        "file-format"
    ],
    "user": "J. Tylka",
    "time": "Dec 3, 2019 at 4:17",
    "comments": [
        {
            "user": "pythonpython",
            "text": "<span class=\"comment-copy\">I'm working on this. Please post more specifics. If you have a capture of the packets that would be helpful (the more the better).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IMO there is not much to add to the linked answer (even though it's focused on network protocols, your task sounds pretty similar).</p>\n<p>One more thing you can try is to look at papers <a href=\"https://scholar.google.com/scholar?q=netzob\" rel=\"nofollow noreferrer\">citing the mentioned tools</a> to find more/related approaches or tools.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Dec 2, 2019 at 21:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}