{
    "title": "Byte code python 3.10.10",
    "link": "https://reverseengineering.stackexchange.com/questions/33259/byte-code-python-3-10-10",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I’am dealing with challenge in my study but i didn’t find solution could anyone give me hint :</p>\n<pre><code>\nimport re\nimport string\nfrom types import CodeType\nimport random\n\nbanner = \"\"\"\n---------------------------------------------------------------------------\n\n       \"`-:-.   ,-;\"`-:-.   ,-;\"`-:-.   ,-;\"`-:-.   ,-;\"`-:-.   ,-;\"\n           `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/  \n             y==/        y==/        y==/        y==/        y==/   \n           ,=,-&lt;=`.    ,=,-&lt;=`.    ,=,-&lt;=`.    ,=,-&lt;=`.    ,=,-&lt;=`. \n       _,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_\n\n                                HelixScribe\n                                   v23.7\n                            \n                     Copyright Â© 2023 HelixScribe LLC.\n                            All rights reserved.\n\n       \"`-:-.   ,-;\"`-:-.   ,-;\"`-:-.   ,-;\"`-:-.   ,-;\"`-:-.   ,-;\"\n           `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/  \n             y==/        y==/        y==/        y==/        y==/   \n           ,=,-&lt;=`.    ,=,-&lt;=`.    ,=,-&lt;=`.    ,=,-&lt;=`.    ,=,-&lt;=`. \n       _,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_\n\n\"\"\"\n\nheader = \"\"\"/=/   \\=\\   *-----------------------------------------------------------*\n|=|   |=|   |           |              Chromosome                       |\n\\=\\   /=/   | Base Pair |-----------------------------------------------|\n `.\\ /,'    |           |   A   |   B   |   C   |   D   |   E   |   F   |\n   `\\.      |-----------|-------|-------|-------|-------|-------|-------|\n\"\"\"\n\nbps = \"\"\" ,'/ \\`.    |     1     |\n/=/   \\=\\   |     2     |\n|=|   |=|   |     3     |\n\\=\\   /=/   |     4     |\n `.\\ /,'    |     5     |\n   ,/'      |     6     |\n ,'/ \\`.    |     7     |\n/=/   \\=\\   |     8     |\n|=|   |=|   |     9     |\n\\=\\   /=/   |    10     |\n `.\\ /,'    |    11     |\n   ,/'      |    12     |\n ,'/ \\`.    |    13     |\n/=/   \\=\\   |    14     |\n|=|   |=|   |    15     |\n\\=\\   /=/   |    16     |\n `.\\ /,'    |    17     |\n   `\\.      |    18     |\n ,'/ \\`.    |    19     |\n/=/   \\=\\   |    20     |\n|=|   |=|   |    21     |\n\\=\\   /=/   |    22     |\n `.\\ /,'    |    23     |\n   ,/'      |    24     |\n ,'/ \\`.    |    25     |\n/=/   \\=\\   |    26     |\n|=|   |=|   |    27     |\n\\=\\   /=/   |    28     |\n `.\\ /,'    |    29     |\n   `\\.      |    30     |\"\"\".split(\"\\n\")\n\nfooter = \" ,'/ \\`.    *-----------------------------------------------------------*\"\n\nprint(banner)\n\ngenes = \"\".join([random.choice(string.hexdigits.upper()) for i in range(720)])\n\n\ndef specimen(): pass\n\n\ndef gene_printer():\n    global genes\n    o = header\n    for b in range(30):\n        o += bps[b]\n        for c in range(6):\n            o += \" %s-%s |\" % (genes[c*30*4+b*4:c*30*4+b*4+2],genes[c*30*4+b*4+2:c*30*4+b*4+4])\n        o += \"\\n\"\n    o += footer\n    print(o)\n\n\ndef gene_editor():\n    global genes\n    chromosome = input(\"Please enter the chromosome that you would like to edit (A-F): \").strip().upper()\n    print()\n    if (chromosome + \" \")[0] not in \"ABCDEF\":\n        print(\"Error. Invalid option.\")\n        return\n\n    base_pair = input(\"Please enter the starting base pair that you would like to edit (1-30): \").strip().upper()\n    print()\n    if not re.fullmatch(r'[1-9]|[12][0-9]|30',base_pair):\n        print(\"Error. Invalid option.\")\n        return\n\n    chromosome_index = (int(base_pair)-1)*4\n\n    sequence = input(\"Please enter the new gene sequence: \").upper()\n    print()\n    sequence = \"\".join([i for i in sequence if i in string.hexdigits.upper()])\n\n    length = min(30*4-chromosome_index, len(sequence))\n    sequence = sequence[:length]\n\n    starting_index = 30 * 4 * (ord(chromosome) - 65) + chromosome_index\n    genes = genes[:starting_index] + sequence + genes[starting_index + length:]\n    print(\"Edit successful.\")\n\n\ndef test_survivability():\n    global genes\n    specimen.__code__ = CodeType(0, 0, 0, 2, 32, 67, bytes.fromhex(genes), (None,),\n                                 ('chr', 'eval'), ('', ''), '', '', 0, b'', (), ())\n    try:\n        specimen()\n        return True\n    except Exception as e:\n        return False\n\n\nwhile True:\n    print(\"---------------------------------------------------------------------------\")\n    print()\n    print(\"Select option:\")\n    print(\" 1. View genes\")\n    print(\" 2. Edit genes\")\n    print(\" 3. Test survivability\")\n    print()\n    option = input(\"Enter number: \").strip()\n    print()\n    if option == \"1\":\n        gene_printer()\n    elif option == \"2\":\n        gene_editor()\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "57",
    "tags": [
        "python",
        "byte-code"
    ],
    "user": "ReVerser",
    "time": "Oct 12, 2024 at 11:25",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">can't read the code due to its formatting, but typically you'd want to start by importing the <code>dis</code> module, and then using it on the desired code object. It looks like <code>CodeType</code> is being used to create a code object from the bytecode in <code>genes</code>. That'd probably be a good object to disassemble.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Your post misses a question. Effectively it is only code. Please edit it and include a verbose description of the problem you have.</span>",
            "time": null
        }
    ],
    "answers_data": []
}