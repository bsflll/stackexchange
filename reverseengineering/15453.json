{
    "title": "Need help reversing this loop",
    "link": "https://reverseengineering.stackexchange.com/questions/15453/need-help-reversing-this-loop",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am having a difficult time reversing the following loop:</p>\n<pre><code>│       ┌─&lt; 0x100001fea      723b           jb 0x100002027\n│       │   0x100001fec      31db           xor ebx, ebx               ; ebx = 0\n│       │   0x100001fee      41bc04000000   mov r12d, 4\n│       │   0x100001ff4      6666662e0f1f.  nop word cs:[rax + rax]\n│      ┌──&gt; 0x100002000      418b441d00     mov eax, dword [r13 + rbx]\n│      |│   0x100002005      b959b699f7     mov ecx, 0xf799b659\n│      |│   0x10000200a      31c8           xor eax, ecx\n│      |│   0x10000200c      418907         mov dword [r15], eax\n│      |│   0x10000200f      4189041e       mov dword [r14 + rbx], eax\n│      |│   0x100002013      4963dc         movsxd rbx, r12d\n│      |│   0x100002016      4c8d6304       lea r12, [rbx + 4]\n│      |│   0x10000201a      4c89ef         mov rdi, r13               ; const char * s\n│      |│   0x10000201d      e8d0080000     call sym.imp.strlen        ; size_t strlen(const char *s)\n│      |│   0x100002022      4939c4         cmp r12, rax\n│      └──&lt; 0x100002025      76d9           jbe 0x100002000\n│       └─&gt; 0x100002027      488b05d20f00.  mov rax, qword [reloc.__stack_chk_guard_0] ; [0x100003000:8]=0\n</code></pre>\n<p>r13 and r14 contain strings on the heap, and r15 contains a pointer to a buffer of size 4. I tried to write equivalent code in C, where second_string is r13, return_string is r14, value_holder is r15, and atoi_res is r12(d).</p>\n<pre><code>int ebx = 0;\n\natoi_res = 4;\n\nwhile(1){\n    ((int *)second_string)[ebx] ^= 0xf799b659;\n    *value_holder = ((int *)second_string)[ebx];\n    ((int *)return_string)[ebx] = ((int *)second_string)[ebx];\n\n    ebx = atoi_res;\n    if(strlen(second_string) &gt; 8) break;\n}   \n</code></pre>\n<p>This does not seem right to me: </p>\n<ul>\n<li>There is no way to break out of the loop</li>\n<li>In the disas(I fixed this in the pseudocode) we are dereferencing a constant value of 8, then <code>lea</code>ing it again. Wouldn't this segfault?</li>\n<li>second_string is being XORed by this constant 4 bytes at a time, but the value that is supposedly contained (loaded in another part of the program) returns gibberish when XORed by this.</li>\n</ul>\n<p>I can post more of the disassembly if needed. Thanks for any help.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "199",
    "tags": [
        "disassembly",
        "c"
    ],
    "user": "user20390",
    "time": "May 31, 2017 at 15:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is just taking a cstring pointed to by r13, xoring a dword at a time with the value 0xf799b659 and storing in the memory pointed to by r14. </p>\n<p>I think your confusion is in what the <code>lea</code> instruction does. It simply loads the address of the memory instead of the memory value itself. In this case, it is just being used as a fast add operation. Compilers will often use it for simple addition or multiplication which is faster than an add/mul/etc instruction. In the case of <code>lea r12, [rbx + 4]</code>, this is doing just r12 = rbx + 4; there is no memory access at all. <code>rbx</code> is being used as a current byte index into the strings and <code>r12</code> is being used as the next byte index.</p>\n</div>",
            "votes": "1",
            "user": "cimarron",
            "time": "May 31, 2017 at 16:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}