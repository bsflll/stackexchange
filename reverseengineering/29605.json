{
    "title": "Patch .net executable via hex editor",
    "link": "https://reverseengineering.stackexchange.com/questions/29605/patch-net-executable-via-hex-editor",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>What I am trying to do:</strong></p>\n<p>I have an .exe written in C#. Ilspy shows the code. Inside it has a class <code>DoWork</code> with static field <code>SomeValue</code>:</p>\n<pre><code>// Program.DoWork\npublic static int SomeValue =&gt; 15;\n</code></pre>\n<p>In code, however, it's not a field but a getter function:</p>\n<pre><code>// return 15;\nIL_0000: ldc.i4.s 15\nIL_0002: ret\n</code></pre>\n<p>and I want to modify this function to return 127 instead. I've found the location of the function inside .exe binary dump:</p>\n<pre><code>0x123456  1f 0f 2a\n</code></pre>\n<p>I've modified .exe in HxD editor so new binary dump has this:</p>\n<pre><code>0x123456  1f 7f 2a\n</code></pre>\n<p>When I open modified .exe with Ilspy it shows:</p>\n<pre><code>// Program.DoWork\npublic static int SomeValue =&gt; 127;\n</code></pre>\n<p>So all seems well, but it doesn't work. The modified .exe still runs as if <code>SomeValue</code> is <code>15</code>.</p>\n<p><strong>Questions:</strong></p>\n<ol>\n<li>Is this a valid approach to modifying .net assembly?</li>\n<li>If yes, what am I missing?</li>\n</ol>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "781",
    "tags": [
        ".net",
        "decompiler"
    ],
    "user": "Uprooted",
    "time": "Nov 24, 2021 at 15:15",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">yes, this should work, for the missing part hard to say, w/o looking into the binary</span>",
            "time": null
        },
        {
            "user": "Uprooted",
            "text": "<span class=\"comment-copy\">@PawełŁukasik is IL translated every time exe is run, can it be that x86 representation is cached somewhere?</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">unless it's ngen-ed it is compiled every time you run it</span>",
            "time": null
        },
        {
            "user": "Uprooted",
            "text": "<span class=\"comment-copy\">It probably is, how do I check this?</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\"><code>ngen display</code> will list all of the ngen'ed assemblies installed on the system</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Turned out the executable is a <a href=\"https://docs.microsoft.com/en-us/dotnet/core/deploying/ready-to-run\" rel=\"nofollow noreferrer\">ReadyToRun</a> executable, so it contains both IL and prebuilt x86-64 image. Modifying IL wasn't working because only x86 image was used at runtime. Modifying x86 image worked for me. ILSpy is capable of showing ReadyToRun image alongside C# and IL.</p>\n</div>",
            "votes": "2",
            "user": "Uprooted",
            "time": "Nov 26, 2021 at 17:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}