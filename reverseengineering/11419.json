{
    "title": "Using multilevel pointers obtained via cheat engine in own application",
    "link": "https://reverseengineering.stackexchange.com/questions/11419/using-multilevel-pointers-obtained-via-cheat-engine-in-own-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I have finished step 8 of the Cheat Engine tutorial and obtained a static address with corresponding offsets to manipulate a value which should be changed to progress in the tutorial. The expression I obtained looks like this</p>\n<pre><code>[[[[[00645390]+C]+14]+0]+18]\n</code></pre>\n<p>I want to go a step further and write a simple (either C++ or C#) program which will access the value stored at this spot and both read from the memory and write to it. What I am not sure about yet is how to access this particularly. I guess it isn't as easy as directly accessing the address <code>00645390</code> in memory - do I have to add it to the base address of the application itself? If yes, how may I acquire the address to start working through all those pointers?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "715",
    "tags": [
        "windows",
        "debugging",
        "tools"
    ],
    "user": "Christian Ivicevic",
    "time": "Nov 27, 2015 at 19:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you need OpenProcess()-&gt;ReadprocessMemory() and or QueryVirtualEx()</p>\n<p>you can use lkd or livekd to achieve the result </p>\n<pre><code>livekd.exe\nkd&gt; !process 0 0\n................\nPROCESS 89d1d328  SessionId: 0  Cid: 0238    Peb: 7ffde000  ParentCid: 075c\n    DirBase: 14980320  ObjectTable: e14106f0  HandleCount:  23.\n    Image: Tutorial-i386.exe\n........................\nkd&gt; .process /p /r 89d1d328\nImplicit process is now 89d1d328\nLoading User Symbols\n.................\nkd&gt; ? poi(poi(poi(poi(poi(645390)+c)+14)+0)+18)\nEvaluate expression: 1666 = 00000682]\n</code></pre>\n<p><img alt=\"[1]\" src=\"https://i.sstatic.net/b825y.png\"/></p>\n<p>here is a sample code that employs <code>dbgeng functions</code> from windbg sdk<br/>\nerror checks dbg prints removed for brevity<br/>\nassumes the module address space is <code>not randomised / rebased</code>  (so uses <code>645390</code> as it is )<br/>\nelse you may need to find the module base from Ce calculate R<code>VA from address (645390 -modbase)</code><br/>\nin your code find the modbase and add the calculated rva to read the pointer<br/>\n<code>if modbase</code> in your code was <code>400000</code> and <code>rva</code> was <code>1390</code> use <code>401390</code> instead of <code>645390</code> </p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;engextcpp.hpp&gt;\nint __cdecl main( void  ){\n    IDebugClient*     g_Client      = NULL;\n    IDebugControl*    g_Control     = NULL;\n    IDebugSymbols*    g_Symbols     = NULL;\n    IDebugDataSpaces* g_Data        = NULL;\n    ULONG             Pid           = NULL;\n    ULONG             bytesread     = NULL;\n    ULONG             ptr           = NULL;\n    DebugCreate( __uuidof(IDebugClient), (void**)&amp;g_Client );\n    g_Client-&gt;QueryInterface( __uuidof(IDebugControl), (void**)&amp;g_Control );\n    g_Client-&gt;QueryInterface( __uuidof(IDebugSymbols), (void**)&amp;g_Symbols );\n    g_Client-&gt;QueryInterface( __uuidof(IDebugDataSpaces), (void**)&amp;g_Data );\n    g_Client-&gt;GetRunningProcessSystemIdByExecutableName(\n        0,\"Tutorial-i386.exe\",DEBUG_GET_PROC_ONLY_MATCH,&amp;Pid);\n    g_Client-&gt;AttachProcess(0,Pid,DEBUG_ATTACH_NONINVASIVE);\n    g_Control-&gt;WaitForEvent( 0, INFINITE );\n    g_Data-&gt;ReadVirtualUncached(0x645390,&amp;ptr,sizeof(ptr),&amp;bytesread);\n    g_Data-&gt;ReadVirtualUncached((ptr+0xc),&amp;ptr,sizeof(ptr),&amp;bytesread);\n    g_Data-&gt;ReadVirtualUncached((ptr+0x14),&amp;ptr,sizeof(ptr),&amp;bytesread);\n    g_Data-&gt;ReadVirtualUncached((ptr+0x0),&amp;ptr,sizeof(ptr),&amp;bytesread);\n    g_Data-&gt;ReadVirtualUncached((ptr+0x18),&amp;ptr,sizeof(ptr),&amp;bytesread);\n    printf(\"%-15s%d\\n\",\"5th lvl ptr =\", ptr);\n    g_Client-&gt;DetachProcesses();\n    return 0;\n}\n</code></pre>\n<p><a href=\"https://i.sstatic.net/Abh6p.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Abh6p.png\"/></a></p>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Nov 28, 2015 at 6:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}