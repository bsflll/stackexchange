{
    "title": "Order of arguments in __usercall",
    "link": "https://reverseengineering.stackexchange.com/questions/26010/order-of-arguments-in-usercall",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following function with five arguments:</p>\n<pre><code>    ; int __cdecl trampolineRegister(void)    \n    a4= dword ptr  8\n    a5= dword ptr  0Ch\n    \n    push    ebp\n    mov     ebp, esp\n    add     eax, [ebp+a4]\n    add     eax, [ebp+a5]\n    add     eax, ecx\n    add     eax, edx\n    cmp     ebp, esp\n    call    j___RTC_CheckEsp\n    pop     ebp\n    retn\n</code></pre>\n<p>With this caller code :</p>\n<pre><code>mov     ecx, 0Ah\nmov     edx, 0Ah\npush    ecx             ; a5\nmov     eax, 0Fh        ; a1\npush    edx             ; a4\nmov     ecx, 0Ah        ; a3\nmov     edx, 1Eh        ; a2\ncall    j_?trampolineRegister@@YAHXZ \n</code></pre>\n<p>IDA applies this prototype :</p>\n<pre><code>int __usercall trampolineRegister@&lt;eax&gt;(int a1@&lt;eax&gt;, int a2@&lt;edx&gt;, int a3@&lt;ecx&gt;, int a4, int a5)\n</code></pre>\n<p>But\nmy question is:</p>\n<p>Is the order of the arguments correct?<br/>\nWhat is the order of placement for arguments passing by registers?</p>\n<p>Thank you :)</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "1k",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "Cawottex",
    "time": "Nov 29, 2021 at 2:00",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">As the registers are specified by name, why would their order matter? It's quite different from stack based arguments, where the order is important.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It does not matter which order you specify the register arguments in a <code>__usercall</code> declaration. The order will dictate the display of the function call in the decompiler, but won't lead to any correctness issues.</p>\n</div>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Feb 27, 2021 at 21:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The order of arguments is going to be determined from the calling convention. Given that the arguments are passed <code>eax, edx, ecx, stack1, stack2</code>, it appears it could be the <code>register</code> calling convention from a Delphi compiler.</p>\n<p>From <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" rel=\"nofollow noreferrer\">Wikipedia</a>:</p>\n<blockquote>\n<h3>Borland register</h3>\n<p>Evaluating arguments from left to right, it passes three arguments via EAX, EDX, ECX. Remaining arguments are pushed onto the stack, also left to right. It is the default calling convention of the 32-bit compiler of Delphi, where it is known as register. This calling convention is also used by Embarcadero's C++Builder, where it is called __fastcall. In this compiler, Microsoft's fastcall can be used as __msfastcall.\nGCC and Clang can be made to use a similar calling convention by using __stdcall with the regparm function attribute or the -mregparm=3 switch. (The stack order is inverted.) It is also possible to produce a caller clean-up variant using cdecl or extend this to also use SSE registers. A cdecl-based version is used by the Linux kernel on i386 since version 2.6.20 (released February 2007).</p>\n</blockquote>\n</div>",
            "votes": "0",
            "user": "Shane Reilly",
            "time": "Sep 30, 2020 at 13:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>j___RTC_CheckEsp is most probably not delphi compiled exe but borland c++ compiled executable probably using the -pr switch</p>\n<pre><code>Register\n\n(Command-line switch: -pr)\n\nThis option forces the compiler to generate all subroutines and all functions using the Register parameter-passing convention, which is equivalent to declaring all subroutine and functions with the _ _fastcall keyword. With this option enabled, functions or routines expect parameters to be passed in registers.\n</code></pre>\n<p>example code compiled with bcc32 and linked with ilink32<br/>\n(borland antique compiler and linker circa 19xx )<br/>\njust a mean 8.7 megabyte all inclusive awesomeness</p>\n<p>code</p>\n<pre><code>#include &lt;windows.h&gt;\nint DemoBcc55RegisterCall( int a,int b, int c, int d,int e,int f ) \n{\n    return a+b+c+d+e+f;\n}\nint WINAPI WinMain(HINSTANCE , HINSTANCE ,    LPSTR , int )\n{\n    char buff[0x100] ={0};\n    int res= DemoBcc55RegisterCall(3,4,5,6,7,8);\n    wsprintf(buff, \"Function Returned %d\\n\" ,res);\n    MessageBoxA(NULL,buff,\"bcc_register_calling_convention\",MB_OK);\n    return 0;  \n}\n</code></pre>\n<p>executed\n<a href=\"https://i.sstatic.net/2pQCU.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2pQCU.png\"/></a></p>\n<p>disassembly of relevent areas in main and function</p>\n<pre><code>0:000&gt; u 401185\ntestbcc!_GetExceptDLLinfo+0x12c:\n00401185 6a06            push    6\n00401187 6a07            push    7\n00401189 6a08            push    8\n0040118b b905000000      mov     ecx,5\n00401190 ba04000000      mov     edx,4\n00401195 b803000000      mov     eax,3\n0040119a e8b1ffffff      call    testbcc!_GetExceptDLLinfo+0xf7 (00401150)\n0040119f 50              push    eax\n0:000&gt; uf 401150\ntestbcc!_GetExceptDLLinfo+0xf7:\n00401150 55              push    ebp\n00401151 8bec            mov     ebp,esp\n00401153 03d0            add     edx,eax\n00401155 03ca            add     ecx,edx\n00401157 034d10          add     ecx,dword ptr [ebp+10h]\n0040115a 034d0c          add     ecx,dword ptr [ebp+0Ch]\n0040115d 034d08          add     ecx,dword ptr [ebp+8]\n00401160 8bc1            mov     eax,ecx\n00401162 5d              pop     ebp\n00401163 c20c00          ret     0Ch\n0:000&gt;\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Sep 30, 2020 at 19:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">In fact it’s an MSVC helper for /RTCs</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky yes but msvc iirc doesn't let an argument pass in eax natively or does it ? there is a buffer over flow check in bcc with -N switch ithought it might have pulled in RTC_CHECKESP</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">yeah it has no arguments but only checks the zero flag so eax is probably just the return value.</span>",
                    "time": null
                }
            ]
        }
    ]
}