{
    "title": "kd live local debugging !pte and db don't work (only shows context of the debugger for all contexts), but !vtop works",
    "link": "https://reverseengineering.stackexchange.com/questions/27286/kd-live-local-debugging-pte-and-db-dont-work-only-shows-context-of-the-debugg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://i.sstatic.net/D8LmY.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/D8LmY.png\"/></a></p>\n<p>Says the PDPT and PDs of the process are at the same physcial frames (pfns) in both processes.</p>\n<p>The first process is <code>winword.exe</code> and the second process is <code>calc.exe</code></p>\n<p>The virtual address in the first case is the start of the virtual page containing the header of <code>winword.exe</code>, which VMMap shows to be in the shareable working set, but yet the output shows that the entry in the PDE hasn't ever even been touched.</p>\n<p>I then try that virtual address in <code>calc.exe</code>, where VMMap shows no VAD allocation to that range, and it shows the same identical output.</p>\n<p>This suggests to me that !pte is showing me the output of some other process, and I can't change it away from that and using <code>.process</code> alone and <code>.process</code> + <code>.context</code> with the correct dirbases (cr3/PML4 physical pages) doesnt work.</p>\n<p>I'm using <code>kd -kl</code>, not <code>livekd</code>.</p>\n<p>This also happens in <code>windbg</code>. Furthermore, I get the same pfns for both outputs, and those pfns change to a new set every time I reopen the debugger, which suggests that it is using the debuggers context. Is this a limitation with local debugging? I would have thought that a kernel driver would be able to do this correctly.</p>\n<p><code>process /p</code> does nothing, and <code>!peb</code> correctly shows the different PEBs of the 2 different processes, but <code>!pte</code> still appears to be using the context of <code>kd</code></p>\n<p><code>!vtop</code> appears to be working correctly:</p>\n<p><a href=\"https://i.sstatic.net/8pfr3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/8pfr3.png\"/></a></p>\n<p>The problem is reproducible also on <code>windbg</code> (version 6.12) and also I tried version 10. <a href=\"https://stackoverflow.com/questions/52972057/windows-10-x64-unable-to-get-pxe-on-windbg\">This</a> seems to be related. So does <a href=\"https://social.technet.microsoft.com/Forums/windows/en-US/7880aca9-2bff-410f-a0a7-c8bc24296d43/why-vtop-work-and-not-pte-in-windbg?forum=w7itprogeneral\" rel=\"nofollow noreferrer\">this</a> (dreadful answer).</p>\n<p>I translated the virtual address to the virtual address of its PTE using <a href=\"https://stackoverflow.com/questions/52972057/windows-10-x64-unable-to-get-pxe-on-windbg/66751725#66751725\">this technique</a> (which is of course the same address that was attempted to be shown in the <code>!pte</code> output, and will be the same PTE address for that virtual address in the context of every process) and <code>db</code> shows nothing at that address either:</p>\n<p><a href=\"https://i.sstatic.net/dzQmU.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/dzQmU.png\"/></a></p>\n<p>You still need to select the process context because the user side of the page tables as well as PML4 are mapped in differently for each process.</p>\n<p><code>db</code> lines up with new state of <code>0x13fe60000</code> according to <code>!pte</code>:</p>\n<p><a href=\"https://i.sstatic.net/kBHFf.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/kBHFf.png\"/></a></p>\n<p>but <code>!vtop</code> works correctly:</p>\n<p><a href=\"https://i.sstatic.net/A6ZwQ.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/A6ZwQ.png\"/></a></p>\n<p>I mean, the difference is that <code>!vtop</code> is accessing physical memory whereas <code>!db</code> and <code>!pte</code> access virtual memory. <code>!peb</code> works correctly and accesses virtual memory, but is user mode. It seems that it is struggling with reading kernel virtual addresses.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "288",
    "tags": [
        "windows",
        "debugging",
        "windbg",
        "pages"
    ],
    "user": "Lewis Kelsey",
    "time": "Mar 23, 2021 at 8:32",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">confirm observations with a real live kernel debugging sysinternals livekd and native local kernel debugging are kinda look alikes</span>",
            "time": null
        },
        {
            "user": "Lewis Kelsey",
            "text": "<span class=\"comment-copy\">@blabb I mean it should be able to do this functionality in local debugging just fine, so it seems like a bug to me, unless I've misunderstood the usage. I will try to remote debug at some point -- perhaps a VM, never done it before though.</span>",
            "time": null
        },
        {
            "user": "Lewis Kelsey",
            "text": "<span class=\"comment-copy\">@blabb If i can remember the equation for 4 level paging that allows you to translate a virtual address to the virtual address of the PTE that handles the virtual address, I will use <code>dt</code> as well</span>",
            "time": null
        },
        {
            "user": "Lewis Kelsey",
            "text": "<span class=\"comment-copy\">@blabb Ok, I updated my question with that</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://microsoft.public.windbg.narkive.com/3twYsQJV/i-can-t-set-process-context\" rel=\"nofollow noreferrer\">https://microsoft.public.windbg.narkive.com/3twYsQJV/i-can-t-set-process-context</a></p>\n<p>This person also noticed the issue and also came to the conclusion that it is showing the context of the debugger. He then said that it works on <code>livekd</code> ironically, which I can confirm.</p>\n<p><a href=\"https://i.sstatic.net/cXrQ9.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/cXrQ9.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/bzmID.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/bzmID.png\"/></a></p>\n<p>Finally.</p>\n<p>Although, this doesn't explain why <code>livekd</code> works and why <code>kd -kl</code> doesn't, which is what I actually want to know</p>\n</div>",
            "votes": "0",
            "user": "Lewis Kelsey",
            "time": "Mar 23, 2021 at 2:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Livekd does not even need bcdedit /debug on to work while kd -kl needs  /debug on they use different techniques and when you use livekd the cr3 register will be showing the eprocess-&gt;pcb.directorttablebase of livekd64.exe  check with dx debugger.sessions[0].process.where( a=&gt;a.kob.pcb.dbase==@cr3)</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">and btw pavel lebedynskys answer might provide some clues toyou wrt lkd / live <a href=\"https://community.osr.com/discussion/195991/inchoerence-of-the-pte-base-address\" rel=\"nofollow noreferrer\">here</a></span>",
                    "time": null
                },
                {
                    "user": "Lewis Kelsey",
                    "text": "<span class=\"comment-copy\">@blabb yes I was right, only user addresses were being translated. Thanks for that link. <code>.process /P</code> solved the issue. On the documentation it said 'live debugging only' which I thought meant live and not local live, so I never tried it. I know that livekd uses some sort of crash dump made when it launches, but I'm not sure of the details â€“ I'd like to know what specifically it does and what it consists of</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Ntsystemdebugcontrol sysdbg  hacks prevista and official support with proper acls post vista sysinternal had an embedded resource driver and prevista windbg also had a helper  [some utility and src code here ](<a href=\"https://crashdmp.wordpress.com/2014/08/04/livedump-1-0-is-available/\" rel=\"nofollow noreferrer\">crashdmp.wordpress.com/2014/08/04/livedump-1-0-is-available</a>) alsi search my answers in so/windbg iirc i posted some code</span>",
                    "time": null
                },
                {
                    "user": "Lewis Kelsey",
                    "text": "<span class=\"comment-copy\">@blabb the point of this was to work out this <a href=\"https://stackoverflow.com/questions/66734103/on-windows-when-is-a-pte-a-vad-prototype-pte-with-address-0xffffffff0000-inst\">question</a>. It seems like mapped data files are all VAD prototype-pointer PTEs and the image files are all prototype-pointer PTEs, which doesn't make sense because multiple sources said all of the PPTEs in the view are deferred and created for data files when the VAD entry is created i.e.  the view is mapped, but that implies that there are no PPTEs to point to, and why waste page table page allocation to do what a missing ...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>@blabb 's <a href=\"https://community.osr.com/discussion/195991/inchoerence-of-the-pte-base-address\" rel=\"nofollow noreferrer\">link</a> is the correct answer for local debugging</p>\n<blockquote>\n<p>Debugger cache is used only for live targets, local kd doesn't really need it. However, local kd still needs to decide how to translate virtual addresses to physical ones when you switch to a process. This is where the different .process options come into play:</p>\n</blockquote>\n<blockquote>\n<p>.process: No translation is performed. All memory accesses are performed in the context of debugger's process. Kernel memory which is valid in any process context (pool, system PTE mappings etc.) will be displayed correctly, everything else (user memory, session space, page tables etc.) will not.</p>\n</blockquote>\n<blockquote>\n<p>.process /p: User addresses are translated using the page directory of the specified process, so commands like !peb should work correctly. Kernel addresses are not translated, so things like session space and page tables may still be displayed incorrectly.</p>\n</blockquote>\n<blockquote>\n<p>.process /P: All addresses, user and kernel, are translated. Use this option if you need to look at session space, page tables or other process-specific data in the kernel space.</p>\n</blockquote>\n<p>I did not think it would be a bug -- the functionality to do it was clearly available. There has to be a specific usage to account for how local debugging works compared to livekd.</p>\n</div>",
            "votes": "0",
            "user": "Lewis Kelsey",
            "time": "Mar 23, 2021 at 8:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}