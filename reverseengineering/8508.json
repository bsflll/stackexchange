{
    "title": "How to inject a DLL without being detected?",
    "link": "https://reverseengineering.stackexchange.com/questions/8508/how-to-inject-a-dll-without-being-detected",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I understand that DLL injection can be used to modify games, perhaps for the purposes of writing a bot. Last time i injected a DLL, it was detected.\nMy injection method must have been detectable then, the question comes down to\nhow do i avoid getting detected? Please help me out, multiple ways to do this would be greatly appreciated</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "dll-injection"
    ],
    "user": "Amateur424",
    "time": "Mar 21, 2015 at 4:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>how do i avoid getting detected</p>\n</blockquote>\n<p>You can't know how to avoid getting detected if you don't know how the detection works. I'd recommend finding and reverse engineering the detection logic so that you can either disable it (patch it out) or better understand how to avoid detection.</p>\n<p>That said, if you're looking for a generic alternative to \"standard\" DLL injection approaches, you may want to consider <em>reflective DLL injection</em>:</p>\n<ul>\n<li><a href=\"http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"https://github.com/stephenfewer/ReflectiveDLLInjection\" rel=\"nofollow\">Implementation</a></li>\n</ul>\n<p>Note that <a href=\"https://www.defcon.org/images/defcon-20/dc-20-presentations/King/DEFCON-20-King-Reflective-Injection-Detection.pdf\" rel=\"nofollow\">reflective DLL injection is detectable as well</a>, which again highlights the importance of knowing how the detection logic works for your scenario.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Mar 21, 2015 at 16:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are many forms of dll injection, the most common being to load code into the remote process that calls LoadLibrary in order to load the payload dll.  Some anticheats hook LoadLibrary in order to catch or prevent such methods.  To prevent this, you'd need to eliminate the call to LoadLibrary.  This means you'd need to imitate the windows PE loader and prepare the dll yourself to be executed.  This method is called \"manual mapping\", and you can find an example of code that achieves it <a href=\"http://pastebin.ca/raw/148103\" rel=\"nofollow\">here</a>.  The bare minimum of steps you need to perform is mapping base relocations and fixing imports, and my brief scanning of this code shows that it should achieve this.  </p>\n</div>",
            "votes": "1",
            "user": "haze",
            "time": "Mar 21, 2015 at 3:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}