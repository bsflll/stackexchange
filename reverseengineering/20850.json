{
    "title": "SIGBUS when trying to trace functions?",
    "link": "https://reverseengineering.stackexchange.com/questions/20850/sigbus-when-trying-to-trace-functions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on a crackme (Mach-O, mac app).</p>\n<p>Now, the app itself is weird and I honestly don't really know where to start. There are multiple threads and the main function doesn't really tell me where the serial verification is located.</p>\n<p>Instead of going through main, I went through <code>_objc_msgSend</code> and found some interesting functions that print the usual 'you win/you lose'.</p>\n<p>If I check the reference of those, I end up here:</p>\n<pre><code>; Segment type: Pure data\n000062F4 __inst_meth segment dword public 'DATA' use32\n000062F4 assume cs:__inst_meth\n000062F4 ;org 62F4h\n000062F4 stru_62F4 __objc_method_list &lt;0, 0Eh&gt;   ; DATA XREF: __class:stru_60C4â†‘o\n000062FC __objc_method &lt;offset sel_dealloc, offset aV804, \\ ; -[MCAppDelegate dealloc] ...\n000062FC                offset __MCAppDelegate_dealloc_&gt;\n00006308 __objc_method &lt;offset sel_succeed, offset aV804, \\ ; -[MCAppDelegate succeed] ...\n00006308                offset __MCAppDelegate_succeed_&gt;\n00006314 __objc_method &lt;offset sel_crackDetected, offset aV804, \\ ; -[MCAppDelegate crackDetected] ...\n00006314                offset __MCAppDelegate_crackDetected_&gt;\n00006320 __objc_method &lt;offset sel_fail, offset aV804, \\ ; -[MCAppDelegate fail] ...\n00006320                offset __MCAppDelegate_fail_&gt;\n0000632C __objc_method &lt;offset sel_a, offset aV804, offset __MCAppDelegate_a_&gt; ; -[MCAppDelegate a] ...\n00006338 __objc_method &lt;offset sel_b, offset aV804, offset __MCAppDelegate_b_&gt; ; -[MCAppDelegate b] ...\n00006344 __objc_method &lt;offset sel_c, offset aV804, offset __MCAppDelegate_c_&gt; ; -[MCAppDelegate c] ...\n00006350 __objc_method &lt;offset sel_d, offset aV804, offset __MCAppDelegate_d_&gt; ; -[MCAppDelegate d] ...\n0000635C __objc_method &lt;offset sel_e, offset aV804, offset __MCAppDelegate_e_&gt; ; -[MCAppDelegate e] ...\n00006368 __objc_method &lt;offset sel_f, offset aV804, offset __MCAppDelegate_f_&gt; ; -[MCAppDelegate f] ...\n00006374 __objc_method &lt;offset sel_mk, offset aV804, \\ ; -[MCAppDelegate mk] ...\n00006374                offset __MCAppDelegate_mk_&gt;\n00006380 __objc_method &lt;offset sel_applicationDidFinishLaunching_, \\ ; -[MCAppDelegate applicationDidFinishLaunching:] ...\n00006380                offset aV12048, \\\n00006380                offset __MCAppDelegate_applicationDidFinishLaunching__&gt;\n0000638C __objc_method &lt;offset sel_window, offset a804_0, \\ ; -[MCAppDelegate window] ...\n0000638C                offset __MCAppDelegate_window_&gt;\n00006398 __objc_method &lt;offset sel_setWindow_, offset aV12048, \\ ; -[MCAppDelegate setWindow:] ...\n00006398                offset __MCAppDelegate_setWindow__&gt;\n00006398 __inst_meth ends\n</code></pre>\n<p>Now, unfortunately this doesn't lead me anywhere. I checked the references and found nothing. </p>\n<p>After this failed attempt, I tried to trace functions via IDA with the local MacOS debugger.</p>\n<p>First thing first, it throws this error just after starting the process:</p>\n<blockquote>\n<p>Unexpected dyld_opcode in the debugger server (init_dyld): 5ffb</p>\n</blockquote>\n<p>I found absolutely no info about this, so I just ignored it.</p>\n<p>Then I started the function tracing and got this:</p>\n<blockquote>\n<p>got SIGBUS signal (bus error) (exc.code a, tid 24571)</p>\n</blockquote>\n<p>Now, keep in mind that this is my first 'real' crackme. Everything that I did before was just a command line application, so it was much more straightforward than this.</p>\n<p>I am not even sure if 'function tracing' is what I think it is. I was hoping for some kind of function call hierarchy where I could find what exactly called the 'fail' function.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "169",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "G. Ramistella",
    "time": "Mar 11, 2019 at 22:15",
    "comments": [],
    "answers_data": []
}