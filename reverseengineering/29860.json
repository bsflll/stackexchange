{
    "title": "what is metaData of assemblies and what is used for",
    "link": "https://reverseengineering.stackexchange.com/questions/29860/what-is-metadata-of-assemblies-and-what-is-used-for",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>hi there I hope you doing well</p>\n<p>lately, I have searched about ildasm and how to protect my DLLs from reverse engineering,</p>\n<p>so I found some great open source projects (ConfuseEx..), it works when I tried the reverse engineering my dll with ILSpy it didn't show my code and because of my curiosity I start searching how that happened,</p>\n<p>I found the reverse engineering depends on the metaData of the DLL to show Extract the code with ildasm.exe so this lead me to ask some questions I didn't find answers to them,</p>\n<p>did the ConfuseEx corrupt metaData of the assemblies to protect them from reverse Engineering?</p>\n<p>is metaData used to define the functions of the assembly to other assemblies to use them? (without defined functions in metaData we cant access the DLL function)</p>\n<p>can I protect my function content by corrupting metaData variable definitions and all these defined functions?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "231",
    "tags": [
        "assembly",
        ".net",
        "c#"
    ],
    "user": "makri aymen abderraouf",
    "time": "Jan 12, 2022 at 22:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Type typical use of meta data in .NET assemblies is documented <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/metadata-and-self-describing-components\" rel=\"nofollow noreferrer\">here</a></p>\n<p>Metadata describes every type and member defined in your code in a language-neutral manner. Metadata stores the following information:</p>\n<ul>\n<li>Description of the assembly.</li>\n<li>Identity (name, version, culture, public key)</li>\n<li>The types that are exported.</li>\n<li>Other assemblies that this assembly depends on</li>\n<li>Security permissions needed to run.</li>\n<li>Description of types.</li>\n<li>Name, visibility, base class, and interfaces implemented.</li>\n<li>Members (methods, fields, properties, events, nested types).</li>\n<li>Attributes</li>\n<li>Additional descriptive elements that modify types and members.</li>\n</ul>\n<p>It is common for .NET obfuscators to modify this metadata to increase the complexity of reverse engineering.</p>\n<p>ConfuserEx uses many different techniques for .NET obfsucation. The most basic for preventing opening with IlDasm is applying an attribute \"<a href=\"https://github.com/mkaring/ConfuserEx/wiki/Anti-IL-Dasm-Protection\" rel=\"nofollow noreferrer\">SuppressIldasmAttribute</a>\" to the assembly. However nearly all modern decompilers will ignore this attribute, it doesn't add meaningful protection on its own.</p>\n<p>In relation to metadata ConfuserEx also uses \"<a href=\"https://github.com/mkaring/ConfuserEx/wiki/Invalid-Metadata-Protection\" rel=\"nofollow noreferrer\">Invalid Metadata Protection</a>\" where invalid data is added to the meta data, which can prevent older decompilers opening the assembly but modern decompilers already work around this protection.</p>\n<p>Full list of protections ConfuserEx uses is documented <a href=\"https://github.com/mkaring/ConfuserEx/wiki/Protections\" rel=\"nofollow noreferrer\">here</a></p>\n</div>",
            "votes": "1",
            "user": "chentiangemalc",
            "time": "Jan 12, 2022 at 23:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}