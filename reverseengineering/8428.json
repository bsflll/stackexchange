{
    "title": "IDAPro, the arguments could not be passed to the python script",
    "link": "https://reverseengineering.stackexchange.com/questions/8428/idapro-the-arguments-could-not-be-passed-to-the-python-script",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using IDA 6.6, I cannot pass command line arguments to the IDAPython script.</p>\n<p>The command I use is:</p>\n<pre><code>idaq64 -c -A -S\"myscrip.py arg1\" thebinpath. \n</code></pre>\n<p>Here is the demo script <code>myscript.py</code>:</p>\n<pre><code>import sys\nif len(sys.argv) &gt;= 2:\n    print(\"Successfully received parameters: \" + str(sys.argv))\nelse:\n    print(\"Failed receiving parameters!!\")\n</code></pre>\n<p>I obviously expect the python script to print the \"Successfully received parameters\" sentence with \"arg1\" as the only parameter, however \"Failed receiving parameters!!\" is printed instead.</p>\n<p>For some unknown reason <code>sys.argv</code> has only one string (<code>myscript.py</code>).</p>\n<p>I guess that there might be another way of getting these parameters, is this right?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "William",
    "time": "Jul 27, 2018 at 5:01",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">I have had problems as well with arguments in IDAPython scripts. My recommendation, which is what I do and works, is to use environment variables, like: SOME_VAR=value idaq64 -A -S\"script.py\" binary</span>",
            "time": null
        },
        {
            "user": "William",
            "text": "<span class=\"comment-copy\">Thank you for your reply. I later find another solution for this. The python arguments seems to be stored in the idc.ARGV. So I just use idc.ARGV to test the arguments.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Roughly three years have passed and this relatively simple question still lacks a proper answer. Encountering the same issue today using IDA 7.0, I might as well spend the time providing a proper answer.</p>\n<hr/>\n<p>Quoting from IDA's help file</p>\n<blockquote>\n<p><code>-S###</code></p>\n<p>Execute a script file when the database is opened.\n  The script file extension is used to determine which extlang will run the script.</p>\n<p>It is possible to pass command line arguments after the script name.</p>\n<p>For example: <code>-S\"myscript.idc argument1 \\\"argument 2\\\" argument3\"</code></p>\n<p>The passed parameters are stored in the <code>ARGV</code> global IDC variable. Use <code>ARGV.count</code> to determine the number of arguments. The first argument <code>ARGV[0]</code> contains the script name</p>\n</blockquote>\n<p>The documentation quoted above provides an explicit example for the IDC scripting language but leaves us to interpolate / guess what would be the IDAPython equivalent.</p>\n<p>Naturally, one might assume idc's <code>ARGV</code> parameter will be translated to python's well known <code>sys.argv</code>, which is used precisely for that in most python files as is well-documented to hold the command line arguments provided when a script is run.</p>\n<p>The name resemblance fooled me too, however because of how python scripts are executed in IDA the documentation above should be treated literally in python as well. The <code>ARGV</code> is <em>the only place</em> arguments are accessible to IDA python scrips executed using the <code>-S</code> flag.</p>\n<p>In IDA python, however, it is not available as a global paramter but should be accessed through the <code>idc</code> module.</p>\n<hr/>\n<p>Here's a simple example;</p>\n<p>given the followingf <code>myscript.py</code> file:</p>\n<pre><code>import sys, idc\n\nprint(\"Sys args: \" + str(sys.argv))\nprint(\"Idc args: \" + str(idc.ARGV))\n</code></pre>\n<p>Executing the following command (ignoring the usual IDA banner):</p>\n<pre><code>ida64 -A -S\"myscript.py\" arg1 \"arg one and a half\" arg2 -L/some/other/flags/logfile.txt -t\n</code></pre>\n<p>Will result in the following output:</p>\n<pre><code>Sys args: []\nIdc args: [\"arg1\", \"arg one and a half\", \"arg2\"]\n</code></pre>\n</div>",
            "votes": "6",
            "user": "0xC0000022L",
            "time": "Jul 27, 2018 at 11:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}