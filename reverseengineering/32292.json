{
    "title": "What are the general steps for reverse engineering a windows SPI driver for linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/32292/what-are-the-general-steps-for-reverse-engineering-a-windows-spi-driver-for-linu",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a fingerprint reader on my laptop that works under windows that doesn't show up on <code>lsusb</code>. Which means its not connected via USB. Through some digging around, I found out that this specific device connects via SPI. I've seen some tutorials on the internet about reverse engineering windows USB drivers for linux but not for something like this.</p>\n<p>My device is an ELAN <code>04f3:3104</code> embedded fingerprint reader that works with the windows WBF fingerprint reader driver. Any pointers much appreciated!</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "103",
    "tags": [
        "linux",
        "hardware",
        "driver",
        "spi"
    ],
    "user": "juztignoreme",
    "time": "Sep 16, 2023 at 2:07",
    "comments": [
        {
            "user": "llm",
            "text": "<span class=\"comment-copy\">wireshark is able to trace USB data - that could be a way to get the protocol - and there is a hid/i2c/... driver in linux: <a href=\"https://dri.freedesktop.org/docs/drm/hid/hid-transport.html\" rel=\"nofollow noreferrer\">dri.freedesktop.org/docs/drm/hid/hid-transport.html</a>, or something microsoft pushed to the linux kernel: <a href=\"https://patchwork.kernel.org/project/linux-input/patch/20220225005936.3485405-6-dmanti@microsoft.com/\" rel=\"nofollow noreferrer\">patchwork.kernel.org/project/linux-input/patch/â€¦</a>, here is a discussion on github: <a href=\"https://github.com/iafilatov/libfprint/issues/12\" rel=\"nofollow noreferrer\">github.com/iafilatov/libfprint/issues/12</a>, and a github project talking about your ELAN devices: <a href=\"https://github.com/mincrmatt12/elan-spi-fingerprint\" rel=\"nofollow noreferrer\">github.com/mincrmatt12/elan-spi-fingerprint</a> - maybe you get more details there</span>",
            "time": null
        },
        {
            "user": "juztignoreme",
            "text": "<span class=\"comment-copy\">@llm yeah I took a look at that repo you were talking about. It managed to detect my device but taking an actual image of my fingerprint doesnt work. He did say in that repo that there was some special case logic implemented in the windows driver for this specific device. That's why im looking for way to implement the rest of it myself</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. You really need to give more detail. Assuming a KM driver, there are plenty of driver models. I think without knowing at least some basics from the WDK docs and Windows KM concepts there's only a slim chance you'll be able to make sense of such a driver. Is the driver perhaps publicly downloadable somewhere so one could have a look?</span>",
            "time": null
        }
    ],
    "answers_data": []
}