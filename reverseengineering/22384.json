{
    "title": "IDApython confused with get_32bit(ea) function behavior",
    "link": "https://reverseengineering.stackexchange.com/questions/22384/idapython-confused-with-get-32bitea-function-behavior",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using some code like this </p>\n<pre><code>   import idaapi\n   print(idaapi.get_32bit(0x0055f4a0))\n</code></pre>\n<p>it must return 32 bit of address as int</p>\n<p>but it returns 1408011093\nis it wrong conversion?\nits length is less than the maximum length of int </p>\n<p>but it somehow changes the value \nI expected to get return value like ‭5633184‬</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "156",
    "tags": [
        "idapython"
    ],
    "user": "Huntermike",
    "time": "Oct 24, 2019 at 18:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>get_32bit(0x0055f4a0)</code> returns the 32-bit value in your IDB at the address <code>0x0055f4a0</code>. 1408011093 decimal is <code>0x53EC8B55</code> in hex which fits in 32 bits. In little endian format this corresponds to the byte sequence <code>55 8B EC 53</code>, so 0x0055f4a0 is likely a function start.</p>\n<p>To convert hex to decimal you don't need IDA APIs but just standard Python functionality, e.g. <code>str(int(0x0055f4a0))</code>. But this is best discussed on Stack Overflow since that's a programming question and not RE.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Oct 24, 2019 at 19:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Huntermike",
                    "text": "<span class=\"comment-copy\">ty so  just need to go through the standard conversion</span>",
                    "time": null
                }
            ]
        }
    ]
}