{
    "title": "EIP not in known module, under WOW64",
    "link": "https://reverseengineering.stackexchange.com/questions/11898/eip-not-in-known-module-under-wow64",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using WinDbg to debug a program under WOW64 (OS is x64, app is 32-bit).</p>\n<p>I came across some indirect call inside the process module (module created by the app and not Windows), and started following it.</p>\n<p>Stepping into this call gets me to an <code>(*)</code> address which doesn't match any loaded module:\nTried to search manually with <code>lm</code>, didn't see a match.\nUsed <code>!address</code> command with that address, and it says the page is committed but the protection is <code>PAGE_NOACCESS</code>.\nAlso the stack trace gives me a warning \"frame ip not in any known module\".</p>\n<p>Stepping one more, I get again an indirect call to <code>fs[0c0h]</code> which is a stub for <code>WOW32Reserved</code> (after some more single stepping I get into <code>ntdll.dll</code>. So it's obviously some WOW64 code).</p>\n<p>The question is, where did the code in <code>(*)</code> came from? Who's responsible for it? Why isn't it mapped to any module?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "182",
    "tags": [
        "windows",
        "windbg",
        "amd64"
    ],
    "user": "user5188701",
    "time": "May 31, 2016 at 8:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This sounds like the process has allocated a page for itself, in which it has placed code to run.  It might be a form of obfuscation, or if the file was packed, then the unpacker code might be in that page.  If you're able to step into the code, then it can't be <code>PAGE_NOACCESS</code>, so perhaps the debugger is confused.  The call through <code>fs[0c0h]</code> is the interface for 32-bit code to call kernel code in a 64-bit environment.  Depending on the version of Windows, there is either a far jump at that location (pre-Win10), or some stack manipulation followed by a <code>retf</code> (Win10).</p>\n</div>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "May 31, 2016 at 8:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user5188701",
                    "text": "<span class=\"comment-copy\">Well.. I hardly believe the debugger is confused, since it's WinDbg.</span>",
                    "time": null
                }
            ]
        }
    ]
}