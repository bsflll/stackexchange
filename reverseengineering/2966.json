{
    "title": "Some programs have always same addressing and some different",
    "link": "https://reverseengineering.stackexchange.com/questions/2966/some-programs-have-always-same-addressing-and-some-different",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Why do IDA and Ollydbg always open some programs with the main() function at the same address?</p>\n<p>The address given by IDA is equal to that given by Ollydbg in runtime. However, when I wrote my own C app and ran it, the address of <code>main()</code> was always different between each runtime in Ollydbg.</p>\n<p>In IDA, though, there was always the same address, never equal to the one given by Ollydbg, which looked like just some relative address.</p>\n<p>Is this caused by the compiler or by something else?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "368",
    "tags": [
        "ida",
        "debuggers",
        "ollydbg"
    ],
    "user": "Wiggler Jtag",
    "time": "Dec 1, 2013 at 21:48",
    "comments": [
        {
            "user": "Stolas",
            "text": "<span class=\"comment-copy\">Readup on ASLR.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">ASLR = Address-Space Layout Randomization</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"http://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Address_space_layout_randomization</a> -</p>\n<blockquote>\n<p><strong>Address space layout randomization (ASLR)</strong> is a computer security\n  technique involved in protection from buffer overflow attacks. In\n  order to prevent an attacker from reliably jumping to a particular\n  exploited function in memory (for example), ASLR involves randomly\n  arranging the positions of key data areas of a program, including the\n  base of the executable and the positions of the stack, heap, and\n  libraries, in a process's address space.</p>\n</blockquote>\n<p>You can disable ASLR in your C app at build-time by using the linker option <a href=\"http://msdn.microsoft.com/en-us/library/bb384887.aspx\" rel=\"nofollow\"><code>/DYNAMICBASE:NO</code></a>.</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Oct 27, 2013 at 14:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">You can also remove the flag from an existing EXE by using <code>EDITBIN</code>, or about any hex editor.</span>",
                    "time": null
                }
            ]
        }
    ]
}