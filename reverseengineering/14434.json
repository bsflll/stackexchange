{
    "title": "Why can't gdb find symbol which IDA can?",
    "link": "https://reverseengineering.stackexchange.com/questions/14434/why-cant-gdb-find-symbol-which-ida-can",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was reversing <a href=\"https://www.mediafire.com/?6kqg3l8yq3cy89z\" rel=\"nofollow noreferrer\">this</a> binary. While I tried to set a breakpoint in <code>gdb</code> on <code>main</code> function, it couldn't find its definition. Loading up the same binary in IDA shows up <code>main</code> method in the <code>Function</code> pane. Why isn't gdb being able to find symbol which IDA can?</p>\n<p><a href=\"https://i.sstatic.net/n4shK.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/n4shK.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/EysQV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/EysQV.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "677",
    "tags": [
        "ida",
        "gdb",
        "breakpoint",
        "symbols"
    ],
    "user": "sherlock",
    "time": "Jan 18, 2017 at 6:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The file you provided is a stripped elf executable. A related question can be found <a href=\"https://stackoverflow.com/questions/9885545/how-to-find-the-main-functions-entry-point-of-elf-executable-file-without-any-s\">here</a>. The main issue is that a stripped elf file has no <em>main</em> symbol. Instead, the loader uses the <em>e_entry</em> header field, which points to the C libs initialization code. When the initialization is done, it will yield execution to the program.</p>\n<p>However, IDA is able to reconstruct the entry point by searching for this indirect jump.</p>\n<p>Have a look at the very start of the .text section, you will find these lines:</p>\n<pre><code> 8048637:   68 86 b7 04 08          push   $0x804b786\n 804863c:   e8 9f ff ff ff          call   80485e0 &lt;__libc_start_main@plt&gt;\n 8048641:   f4                      hlt \n</code></pre>\n<p>The value being pushed here right before the call to libc's start function is the actual entry point. I hope this helps.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}