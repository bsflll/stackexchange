{
    "title": "What are the sections of a x86 linux binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/4149/what-are-the-sections-of-a-x86-linux-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to learn reverse engineering so I was starting to try compiling simple (to start with) C programs and then reading the disassembly.</p>\n<p>The following file</p>\n<pre><code>int main(void) {\n  return 0;\n}\n</code></pre>\n<p>compiled with <code>gcc</code> then disassembled with <code>objdump -d</code> ends up creating 172 lines of output. I don't understand why there is so much output.</p>\n<p>What is the meaning of the different sections:</p>\n<pre><code>0000000000400370 &lt;_init&gt;:\n0000000000400390 &lt;__libc_start_main@plt-0x10&gt;:\n00000000004003a0 &lt;__libc_start_main@plt&gt;:\n00000000004003b0 &lt;__gmon_start__@plt&gt;:\n00000000004003c0 &lt;_start&gt;:\n00000000004003f0 &lt;deregister_tm_clones&gt;:\n0000000000400420 &lt;register_tm_clones&gt;:\n0000000000400460 &lt;__do_global_dtors_aux&gt;:\n0000000000400480 &lt;frame_dummy&gt;:\n00000000004004ad &lt;main&gt;:\n00000000004004c0 &lt;__libc_csu_init&gt;:\n0000000000400530 &lt;__libc_csu_fini&gt;:\n0000000000400534 &lt;_fini&gt;:\n</code></pre>\n<p>Of course I have been reading about the calling convention and opcodes so I can see how the  section corresponds to the C code.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "x86",
        "objdump"
    ],
    "user": "emberfang",
    "time": "Apr 26, 2014 at 0:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I see you're mixing up sections with functions.</p>\n<p>What you have provided in your question are functions necessary to an ELF binary to execute. For example, the <code>_start</code> function is usually the <em>entry point</em> of a binary and it will probably call the <code>main</code> function at some point. You can get the address of the entry of a binary using <code>readelf -h</code> on the binary file you have.</p>\n<p>About the output, though your program is \"empty\" it was still compiled &amp; linked successfully - for that it is not erroneous - into an executable ELF. This document provides everything you need to know about how an ELF binary is structured &amp; how to manipulate it : <a href=\"http://www.skyfree.org/linux/references/ELF_Format.pdf\">ELF Format</a> (PDF).</p>\n<p>Now if you want to retrieve section information in a binary file the <code>readelf</code> function can again help with that, you just have to call it with the <code>-S</code> and the target binary file (<code>readelf -S prog</code>).</p>\n<p>Since you're just starting to learn, I recommend you checking the binutils (<code>readelf</code>, <code>objdump</code>, ...) and their related documentation and start playing with simple programs before moving to crackmes and more advanced or obfuscated binary files.</p>\n</div>",
            "votes": "6",
            "user": "perror",
            "time": "Apr 26, 2014 at 11:39",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Those are not sections, those are different functions in your binary. These are called in various times during process' lifetime.</p>\n<p>What you are interested in is function <code>main</code>. <code>objdump -d</code> disassembles the whole binary, but if you are trying to understand what's going on in <code>main</code> only, at this point , you don't have to look at the rest of those. </p>\n<p>When you use <code>gcc</code> to compile a binary into an executable, linker is called.\nIf you don't want the linker to be called, to generate an object file, use <code>gcc -c</code>. Here's the result of <code>objdump -d test.o</code>:</p>\n<pre><code>$ objdump -d test.o \n\ntest.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   b8 00 00 00 00          mov    $0x0,%eax\n   9:   5d                      pop    %rbp\n   a:   c3                      retq \n</code></pre>\n<p>Here, since the code isn't linked , you only see your function. </p>\n</div>",
            "votes": "3",
            "user": "0xea",
            "time": "Apr 26, 2014 at 10:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}