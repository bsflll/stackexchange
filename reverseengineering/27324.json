{
    "title": "Why a single \"nop\" crashed the game?",
    "link": "https://reverseengineering.stackexchange.com/questions/27324/why-a-single-nop-crashed-the-game",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I hope answer to my question is not game/app specific and can be answered in communities like this.</p>\n<p>So, I tried to use some internal functions of a game, like pick a target. No malicious intentions, just wanted to do it work and use it once.\nI used \"nop\" as temporally asm code to inject, so I will sure that I do something wrong in my inject method and not in asm code I'm trying to inject. To my surprise is the single \"nop\" been the reason the game crashed.</p>\n<p>My question is why? How can I break something by doing nothing?</p>\n<p>Then after \"nop\" I added \"ret\" as Google said me.\nand game didn't crash, tried this on function I was tried to call and also worked fine.</p>\n<p>Injector code(c#):</p>\n<pre><code>        [DllImport(\"kernel32.dll\", EntryPoint = \"CloseHandle\")]\n        public static extern int CloseHandle(int hObject);\n\n        [DllImport(\"kernel32.dll\")]\n        public static extern Int32 WriteProcessMemory(int hProcess, int lpBaseAddress, byte[] buffer, int size, int lpNumberOfBytesWritten);\n\n\n        [DllImport(\"kernel32\", EntryPoint = \"CreateRemoteThread\")]\n        public static extern int CreateRemoteThread(int hProcess, int lpThreadAttributes, int dwStackSize, int lpStartAddress, int lpParameter, int dwCreationFlags, ref int lpThreadId);\n\n\n        [DllImport(\"kernel32\", EntryPoint = \"WaitForSingleObject\")]\n        public static extern int WaitForSingleObject(int hHandle, int dwMilliseconds);\n\n\n        [DllImport(\"Kernel32.dll\")]\n        public static extern System.Int32 VirtualAllocEx(int hProcess, int lpAddress, int dwSize, int flAllocationType, int flProtect);\n\n        [DllImport(\"Kernel32.dll\")]\n        public static extern System.Int32 VirtualFreeEx(int hProcess, int lpAddress, int dwSize, int flAllocationType);\n\n        [DllImport(\"kernel32.dll\", EntryPoint = \"OpenProcess\")]\n        public static extern int OpenProcess(int dwDesiredAccess, int bInheritHandle, int dwProcessId);\n\n        private const int PAGE_EXECUTE_READWRITE = 0x4;\n        private const int MEM_COMMIT = 4096;\n        private const int MEM_RELEASE = 0x8000;\n        private const int MEM_DECOMMIT = 0x4000;\n        private const int PROCESS_ALL_ACCESS = 0x1f0fff;\n        private const int PROCESS_CREATE_THREAD = 0x2;\n        private const int PROCESS_VM_OPERATION = 0x8;\n        private const int PROCESS_VM_WRITE = 0x20;\n\n\n        public void Inject(byte[] data,int pid)\n        {\n            int hwnd = 0;\n            int addre = 0;\n            int threadhwnd = 0;\n            if (pid != 0)\n            {\n                hwnd = OpenProcess(PROCESS_ALL_ACCESS | PROCESS_CREATE_THREAD | PROCESS_VM_WRITE, 0, pid);\n                if (hwnd != 0)\n                {\n                    addre = VirtualAllocEx(hwnd, 0, data.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n                    WriteProcessMemory(hwnd, addre, data, data.Length, 0);\n                    int threadid = 0;\n                    threadhwnd = CreateRemoteThread(hwnd, 0, 0, addre, 0, 0, ref threadid);\n                    int res = WaitForSingleObject(threadhwnd,3000);\n                    VirtualFreeEx(hwnd, addre, data.Length, MEM_RELEASE);\n                    CloseHandle(threadhwnd);\n                    CloseHandle(hwnd);\n\n                }\n            }\n        }\n</code></pre>\n<p>Thank you in advance!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "156",
    "tags": [
        "windows",
        "pe",
        "injection"
    ],
    "user": "user224351",
    "time": "Mar 27, 2021 at 8:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>CreateRemoteThread</code> takes 7 arguments and the 4th of them is called <code>lpStartAddress</code>.</p>\n<p>Now, from <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread\" rel=\"nofollow noreferrer\">MSDN docs</a>:</p>\n<blockquote>\n<p><em>lpStartAddress</em></p>\n<p>A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. For more information, see ThreadProc.</p>\n</blockquote>\n<p>So as you see your parameter <code>addre</code> has to point to some function in remote process. Functions in assembly (<code>x86/x64</code>) look like this:</p>\n<pre><code>FUNCTION_NAME:\nFUNCTION_BODY\nret\n</code></pre>\n<p>And you call them like this:</p>\n<pre><code>call FUNCTION_NAME\n</code></pre>\n<p>The <code>ret</code> instruction in the end takes the return address from the stack, which was saved by the call instruction, when <code>call FUNCTION_NAME</code> was executed - it points to the next instruction after that <code>call</code>.</p>\n<p>But what happens when you inject only <code>nop</code>? Since you didn't inject <code>ret</code>, your injected function looks like this:</p>\n<pre><code>INJECTED_FUNCTION:\nnop\nSOME_GARBAGE_BYTES\n</code></pre>\n<p>As you see, the program you inject the code into will try to execute the instruction just after <code>nop</code> (since it didn't encounter <code>ret</code>), which may be either some garbage bytes or may even lie outside process virtual memory and may cause access violation - in both cases the program will crash.</p>\n</div>",
            "votes": "2",
            "user": "bart1e",
            "time": "Mar 27, 2021 at 10:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user224351",
                    "text": "<span class=\"comment-copy\">Thank you. Can I also ask what is <code>lpParameter</code>? Because I saw somewhere it is used and somewhere it is zero. I don't understand especially \"variable to be passed to the thread function\" part. As I know parameters passed with Push instruction like <code>push edx  call edi</code> So, when and how use <code>lpParameter</code>?</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">It is a parameter passed to the function you pass to <code>CreateRemoteThread</code> function. If you don't need to pass anything there, you just set it to <code>NULL</code>. However, it can be a pointer to some data in remote process' memory - it can point, for example, to array of arguments you would normally pass using <code>push</code> instructions</span>",
                    "time": null
                }
            ]
        }
    ]
}