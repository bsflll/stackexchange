{
    "title": "Is there a way to find the implementation of methods with MethodImplOptions.InternalCall attribute?",
    "link": "https://reverseengineering.stackexchange.com/questions/29393/is-there-a-way-to-find-the-implementation-of-methods-with-methodimploptions-inte",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Background:</strong><br/>\nThe Unity engine provides a number of <code>PlayerPrefs.SetXxx</code> functions that can be used to save user data. However, it will automatically append a hash to the name of what you saved. For example, a call of<br/>\n<code>PlayerPrefs.SetString(\"justTesting\", \"TEST!\");</code> <br/>\nwill add a registry value of<br/>\n<code>justTesting_h3837386411</code><br/>\non Windows platform.<br/>\n<strong>Problem:</strong><br/>\nI know it's actually <a href=\"https://answers.unity.com/questions/177945/playerprefs-changing-the-name-of-keys.html\" rel=\"nofollow noreferrer\">djb2-xor</a>, but I am still curious about how the hash function is implemented. By using dnSpy I found <code>PlayerPrefs.SetString</code>, which is implemented in <code>UnityEngine.CoreModule.dll</code>, finally calls a native method declared as</p>\n<pre><code>[NativeMethod(\"SetString\")]\n[MethodImpl(MethodImplOptions.InternalCall)]\nprivate static extern bool TrySetSetString(string key, string value);\n</code></pre>\n<p>And I'm stuck here. There's indeed a string <code>UnityEngine.PlayerPrefs::TrySetSetString</code> in <code>.rdata</code> section of <code>UnityPlayer.dll</code>, but I don't know where to find the actual code for it. What should I do next?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "c#",
        "game-hacking"
    ],
    "user": "user239216",
    "time": "Oct 11, 2021 at 3:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>OK after some bold attempts I finally found it quite simple, at least on this Unity version.\nFirst, find the method name string and where it's referenced:\n<a href=\"https://i.sstatic.net/gnjkX.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/gnjkX.png\"/></a></p>\n<p>It is referenced at 11376594. But what's at this address? Here we go:\n<a href=\"https://i.sstatic.net/lhJ6t.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/lhJ6t.png\"/></a></p>\n<p>It's a string table. The next thing to do is to find out the table's start address, and then what references to this address. This guided me here:\n<a href=\"https://i.sstatic.net/Uo8q3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Uo8q3.png\"/></a>\nAnd here:\n<a href=\"https://i.sstatic.net/wBvYG.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/wBvYG.png\"/></a>\nThis is a loop, which binds each function name to items in another table at 11371C40. This new table is a function table so I renamed it:\n<a href=\"https://i.sstatic.net/mZaBg.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/mZaBg.png\"/></a>\nNow it's reasonable to suspect this function table contains how each native method is implemented. By adding the string offset to the function table address, I got the <code>bool TrySetSetString(string key, string value)</code> address. Diving deeper and here is the hash algorithm:\n<a href=\"https://i.sstatic.net/2hHh1.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2hHh1.png\"/></a></p>\n</div>",
            "votes": "0",
            "user": "user239216",
            "time": "Oct 13, 2021 at 7:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}