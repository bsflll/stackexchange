{
    "title": "What type of data structure is it?",
    "link": "https://reverseengineering.stackexchange.com/questions/2232/what-type-of-data-structure-is-it",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following data:</p>\n<pre><code>.data:004305FC word_4305FC     dw 1583h                \n.data:004305FC                                         \n.data:004305FE word_4305FE     dw 35B6h                \n.data:00430600                 dw 6835h\n.data:00430602                 dw 6553h\n.data:00430604                 dw 6351h\n.data:00430606                 dw 23F5h\n.data:00430608                 dw 6845h\n.data:0043060A                 dw 6344h\n.data:0043060C                 dw 6823h\n.data:0043060E                 dw 2342h\n.data:00430610                 dw 2474h\n...\n</code></pre>\n<p>In addition, I have the following disassembly of the code accessing the data:</p>\n<pre><code>...\nmov     eax, [ebp+Variable_1]\nxor     ecx, ecx\nmov     cx, word_4305FE[eax*2]\n...\nmov     eax, [ebp+Variable_1]\nxor     edx, edx\nmov     dx, word_4305FC[eax*2]\n...\n</code></pre>\n<p>It looks like array within another array. Am I correct? If not, what do you think the data structure is? If it is a single array, why is it been accessed through 2 different \"heads\" <strong><code>word_4305fc</code></strong> and <strong><code>word_4305FE</code></strong>?</p>\n<p>Thank you.</p>\n<p><strong>ADDED:</strong></p>\n<p>The following is in response to the comments below. Thank you, guys, so much for your input! I really do appreciate it and RE community in general. I feel as if my question needs certain clarification. I do realize that this is an array. I also clearly see that <strong><code>Variable_1</code></strong> is an index to the array. In addition, I can see iteration. However, it is not my question. What I am really looking for is clarification or possibly an explanation. How would I be able to distinguish if this array is indeed more complex data type? Why did compiler choose to refer to this data type with 2 different angles: using 2 global variables both <strong><code>word_4305fc</code></strong> and <strong><code>word_4305FE</code></strong>? Is there a specific reason for it? Is it an indication of more complex data type? </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "377",
    "tags": [
        "disassembly",
        "assembly",
        "ida",
        "struct"
    ],
    "user": "PSS",
    "time": "Jun 11, 2013 at 21:35",
    "comments": [
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">It's an array of words starting at <code>0x4305FC</code>, that code is accessing its members at indices <code>[Variable_1 + 1]</code> and <code>[Variable_1]</code> respectively.</span>",
            "time": null
        },
        {
            "user": "dna",
            "text": "<span class=\"comment-copy\">I agree with the above comment. Moreover it looks like a part of an iteration loop.</span>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">To amend my previous comment, it's not a \"more complex data type\" because changing the value of <code>Variable_1</code> changes the accessed offset by 2 bytes, and the exactly same amount of bytes gets read from that offset. In a more complex data type, the members of the array would be larger.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As Dcoder indicated, an array of <code>short</code> data types begins at the lower address, and the increment of the base of the array by <code>2</code> corresponds to adding <code>1</code> to the index.  Consider the following C code:</p>\n<pre><code>short array[256];\n\n// ...\ncx = array[variable_1+1];\n// ...\n\n// ...\ndx = array[variable_1];\n// ...\n</code></pre>\n<p>Consider the choices that the compiler has in compiling these snippets of code.  It could produce code like this:</p>\n<pre><code>mov eax, [ebp+Variable_1]\nxor ecx, ecx\nmov cx, word_4305FC[eax*2+2] ; note the +2 and the -FC address\n</code></pre>\n<p>Or maybe:</p>\n<pre><code>mov eax, [ebp+Variable_1]\ninc eax ; note this\nxor ecx, ecx\nmov cx, word_4305FC[eax*2] ; note the -FC address\n</code></pre>\n<p>Or, in the case of what you posted, this is an equivalent code sequence:</p>\n<pre><code>mov eax, [ebp+Variable_1]\nxor ecx, ecx\nmov cx, word_4305FE[eax*2] ; note the -FE address\n</code></pre>\n<p>What the compiler did was to eliminate the \"+2\" in the address displacement, or the \"inc eax\" in the index computation, and replaced it by adding 1*sizeof(short) to the address of the array.  This allows for a more optimized computation that does not have any increments taking place at runtime.</p>\n</div>",
            "votes": "8",
            "user": "Rolf Rolles",
            "time": "Jun 11, 2013 at 22:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">And elimination of +2 by the compiler made IDA present it as 2 variables, didn't it?</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">IDA represented it as two variables because as far as IDA was concerned, it IS two variables, since it's accessed from two different locations.  If you want to alter that, you can go to the earlier address and use the alt-numpad* key combination to create a single array at that location.</span>",
                    "time": null
                }
            ]
        }
    ]
}