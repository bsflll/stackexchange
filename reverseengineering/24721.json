{
    "title": "MSVC Destructors with 2 Arguments",
    "link": "https://reverseengineering.stackexchange.com/questions/24721/msvc-destructors-with-2-arguments",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a program which I assume was compiled with MSVC. It's seeming like the first entry in each vtable is the class' destructor. However, when I look at the disassembly and decompilation, it seems like the destructors all take a second argument, and that the object's memory is only freed if that second argument is nonnull.</p>\n<p>What is the purpose for this second argument? I would think that, if it's a destructor, the class should always be destructed and its memory freed. So why the second argument which could prohibit the memory from being freed up?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "632",
    "tags": [
        "msvc"
    ],
    "user": "sasschary",
    "time": "Apr 16, 2020 at 3:16",
    "comments": [
        {
            "user": "malikcjm",
            "text": "<span class=\"comment-copy\">In C++ there is a construct called \"placement new operator\". It can be used to construct object in pre-allocated area. For example on the stack. In such case when memory was not allocated for the object, destructor cannot released that memory. Please take a look at  \"How to delete the memory allocated by placement new ?\" on <a href=\"https://www.geeksforgeeks.org/placement-new-operator-cpp/\" rel=\"nofollow noreferrer\">geeksforgeeks.org/placement-new-operator-cpp</a> there is nice example. It's possible to call destructor directly like this : \"    // No delete : Explicit call to Destructor.      pe-&gt;~Complex(); \"</span>",
            "time": null
        },
        {
            "user": "sasschary",
            "text": "<span class=\"comment-copy\">Interesting, I didn't know about placement new. So, then, a call to <code>delete object</code> in the original code might call the destructor with a non-null second argument, while a call to the destructor, say, because the object was on the stack and went out of scope would have a null second argument, and thus not try to deallocate memory which was on the stack. Am I understanding correctly?</span>",
            "time": null
        },
        {
            "user": "malikcjm",
            "text": "<span class=\"comment-copy\">This is exactly how I understood usage of that second parameter.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These wrappers are used in classes with virtual destructors to cover two situations:</p>\n<ol>\n<li><p>ensure that the correct <code>operator delete</code> is called after the object's destruction via <code>delete pClass;</code> statement</p></li>\n<li><p>deletion of arrays allocated via <code>new Class[N]</code> expression in the <code>delete [] class_array;</code> statement to ensure the correct number of items gets deleted using the correct <code>operator delete</code> and handle potential exceptions during the process</p></li>\n</ol>\n<p>From <a href=\"http://www.openrce.org/articles/full_view/23\" rel=\"nofollow noreferrer\">my old article</a>:</p>\n<blockquote>\n<p>When class has a virtual destructor, compiler generates a helper\n  function - deleting destructor. Its purpose is to make sure that a\n  proper <code>operator delete</code> gets called when destructing a class.\n  Pseudo-code for a deleting destructor looks like following: </p>\n<pre><code>virtual void * A::'scalar deleting destructor'(uint flags)\n{\n  this-&gt;~A();\n  if (flags&amp;1) A::operator delete(this);\n};\n</code></pre>\n<p>The address of this function is placed into the vftable instead of the\n  destructor's address. This way, if another class overrides the virtual\n  destructor, <code>operator delete</code> of that class will be called. Though in\n  real code <code>operator delete</code> gets overriden quite rarely, so usually\n  you see a call to the default delete().</p>\n<p>Sometimes compiler can also\n  generate a <em>vector deleting destructor</em>. Its code looks like this: </p>\n<pre><code>virtual void * A::'vector deleting destructor'(uint flags)\n{\n  if (flags&amp;2) //destructing a vector\n  {\n    array = ((int*)this)-1; //array size is stored just before the this pointer\n    count = array[0];\n    'eh vector destructor iterator'(this,sizeof(A),count,A::~A);\n    if (flags&amp;1) A::operator delete(array);\n  }\n  else {\n    this-&gt;~A();\n    if (flags&amp;1) A::operator delete(this);\n  }\n};\n</code></pre>\n</blockquote>\n<p>For more details see also <a href=\"http://www.openrce.org/articles/files/jangrayhood.pdf\" rel=\"nofollow noreferrer\"><em>C++: Under the Hood</em></a> by Jan Gray, one of the main developers of Visual C++.</p>\n<p>I also recommend you to make some classes with custom operators new/delete and check the generated code.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 18, 2020 at 21:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}