{
    "title": "How can I call IDA Pro's MakeCode for one instruction at a time?",
    "link": "https://reverseengineering.stackexchange.com/questions/14815/how-can-i-call-ida-pros-makecode-for-one-instruction-at-a-time",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have undefined a block of code and I want to manually reconstruct this block by iterating over the area while decoding undefined bytes and calling <code>idc.MakeCode</code> for each instruction separately.</p>\n<p>I have disabled auto-analysis, but calling MakeCode on the head of the block causes the entire block to be converted to code. I can't find anything in IDA Python / IDC to do this that isn't a hook. Is there an analysis flag I need to set in order to prevent this behavior?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "6k",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "ida_user_200",
    "time": "Mar 5, 2017 at 9:05",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Which processor are you working with ?</span>",
            "time": null
        },
        {
            "user": "ida_user_200",
            "text": "<span class=\"comment-copy\">I am using the MetaPC target processor in IDA. I am analyzing x64 binaries.</span>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">If this is some sort of exercise, use some simple linear disassembler instead, like radare :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a bit of a tricky question, because <em>technically</em> <code>MakeCode</code> is not what causing the rest of the code to be analyzed as code. A hint for that can be the fact that <code>MakeCode</code> actually returns the length of the current instruction. It is only later that additional following bytes are being converted to code (if possible).</p>\n<p>Thing is, that for IDA to do what IDA is good at (that is, successfully disassembling large code bases) it has it's own background code analyzer. That Code Analyzer is in charge of orchestrating high level disassembly operations such as figuring out where functions start, make sure all functions are analyzed, handle overlapping code to the best of it's ability, etc...</p>\n<p>One of the features of IDA's Code Analyzer is the code analysis stack. That stack contains \"leads\" to additional unexplored code and hints towards where additional assembly code might be found. While <code>idc.MakeCode</code> indeed only converts a single instruction to code, it registers the end of that instruction with the Code Analyzer, which then proceeds to analyze and convert the rest of the binary to code (as long as valid instructions are found).</p>\n<p>To disable the auto analysis running in the background hit the \"Options\" menu and the \"General\" function in it. In the dialog select the \"Analysis\" tab and <em>uncheck</em> the checkbox labeled \"Enabled\" to the left, as shown in the following picture\n<a href=\"https://i.sstatic.net/dERY4.png\" rel=\"nofollow noreferrer\"><img alt=\"Disable autoanalysis\" src=\"https://i.sstatic.net/dERY4.png\"/></a></p>\n<p>Fun fact: You can call <code>idaapi.analyzer_options()</code> to show that dialog. You'll still need to uncheck the checkbox and hit the \"Ok\" button. Unfortunately it seems there's no API for that.</p>\n</div>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Mar 5, 2017 at 8:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">You can programmatically disable that using <code>set_inf_attr(INF_GENFLAGS, get_inf_attr(INF_GENFLAGS) &amp; ~INFFL_AUTO)</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>NirIzr's answer has a major drawback: All those locations following the decoded instructions are still added to the analyzer queue, they're just not being processed. That means if you ever enable analysis again, IDA will go back and process them all, completely obliterating whatever your script did. </p>\n<p>A better solution is to go into \"Kernel options 1\" and uncheck \"Trace execution flow\" before running your script. That's the one responsible for adding an address immediately following a decoded instruction into the analysis queue, so this way those addresses won't be added to the queue in the first place. When your script is done, you can go back and check it again and continue using IDA with analysis enabled. </p>\n</div>",
            "votes": "3",
            "user": "user2347953",
            "time": "Jul 10, 2018 at 19:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">and this can be programmatically disabled using <code>set_inf_attr(INF_AT, get_inf_attr(INF_AT) &amp; ~AF_CALL)</code></span>",
                    "time": null
                }
            ]
        }
    ]
}