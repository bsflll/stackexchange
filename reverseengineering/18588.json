{
    "title": "Can I set more than 4 memory access breakpoints in WinDbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/18588/can-i-set-more-than-4-memory-access-breakpoints-in-windbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can set a <code>DWORD</code> memory read/write access breakpoint in WinDbg with the following command:</p>\n<pre><code>ba r 4 0x0307F42C\n</code></pre>\n<p>But is there a way to set more than 4 of those?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        "memory",
        "windbg",
        "breakpoint"
    ],
    "user": "c00000fd",
    "time": "Jun 23, 2018 at 8:16",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\"><code>ba</code> is a processor breakpoint (hardware breakpoints). use <code>bp</code> instead. For more breakpoints in radare2, read <a href=\"https://blogs.msdn.microsoft.com/debuggingtoolbox/2008/05/01/special-commandusing-breakpoints-bp-bm-ba-bu/\" rel=\"nofollow noreferrer\">here</a>.</span>",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "<span class=\"comment-copy\">@Megabeets: I'm not sure if I'm using that <code>bp</code> correctly. Say, I have a DWORD in memory that I want to track. I call <code>bp 03DBF450</code>. I then do <code>bl</code> and receive <code>1 e 03dbf450     0001 (0001)  0:****</code> but then if I run the debuggee I get an exception from IDA pro: <code>779A2228: The instruction at 0x779A2228 referenced memory at 0x14. The memory could not be written -&gt; 00000014 (exc.code c0000005, tid 5928)</code> and the debuggee crashes. This doesn't happen if I don't use <code>bp</code> command.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Those are called hardware breakpoints and are related to <a href=\"https://en.m.wikipedia.org/wiki/X86_debug_register\" rel=\"nofollow noreferrer\">debug registers</a> in the CPU. There are usually 6 of them but only DR0-DR3 used to specify an address for hardware breakpoints. </p>\n</div>",
            "votes": "5",
            "user": "Paweł Łukasik",
            "time": "Jun 23, 2018 at 16:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">OK. It makes sense. So what do I use instead to set the 5th breakpoint on memory access?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Nothing. You can have only 4 breakpoints on memory access.</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Hmm. Thanks. Is it a limitation in WinDbg or is it pretty much how <b>all</b> debuggers operate?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@c00000fd: the limitation, to my knowledge, is a limitation of the ISA rather than the software.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">instruction set architecture    ( intel att x86 x64 itanium 32 bit 64 bit  mips sparc p4 p3 8086 80386  etc etc )</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although windbg does not support <em>memory breakpoints</em>, memory breakpoints are another common approach to place breakpoints based on memory access instead of code execution.</p>\n<p>Although most debuggers implement that internally, memory breakpoints work by setting the <code>PAGE_GUARD</code> bit for all pages in the memory breakpoint address range, and then filtering any exceptions caught for the specific ranges within the pages, and then resetting the page guard.</p>\n<p>You can do something similar by placing a page guard yourself using windbg, however that's a lot of effort.</p>\n<p>It is important to note that memory breakpoints are detectable with little effort and may dramatically slow execution (even further down than debugging), when debugging a piece of software with anti-debugging protection make sure you pay attention.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 25, 2018 at 20:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}