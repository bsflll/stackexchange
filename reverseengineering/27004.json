{
    "title": "Where are the .NET IL bytes stored in an .NET executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/27004/where-are-the-net-il-bytes-stored-in-an-net-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When i compile a c# code, it compiles into a .NET executable, that only imports _CorExeMain from mscoree.dll, now my questions are :</p>\n<ol>\n<li><p>Is _CorExeMain the interpreter that fetches ILs and executes their corresponding x86 code just like VMprotect, etc?</p>\n</li>\n<li><p>Where are the IL bytes actually stored? they seem to be stored in the .text section, but i couldn't find any tool that can find the location that they are stored. where are they stored?</p>\n</li>\n</ol>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "285",
    "tags": [
        "windows",
        ".net",
        "c#"
    ],
    "user": "Notoriouss",
    "time": "Feb 14, 2021 at 5:41",
    "comments": [
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">Press Ctrl+F in any hexeditor and search for these bytes</span>",
            "time": null
        },
        {
            "user": "Notoriouss",
            "text": "<span class=\"comment-copy\">@morsisko bruh.. I'm asking how can i find them so i can write a tool that finds them automatically.. not searching for bytes..</span>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">Sorry, my crystal ball didn't work this time. I think my answer still answers the question \"how can I find them\", as there are multiple programs that can display the IL bytes so you can search the desired position in executable...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For .NET assemblies there's a .NET MetaData Directory that can be found in the Data Directories. From that you can get access to <code>MetaData Header</code> and <code>MetaData Streams</code> that holds all the info for you to extract and located the code.</p>\n<p>A good start (or maybe even a complete guide) into this topic would be the \"<a href=\"https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/\" rel=\"nofollow noreferrer\">Anatomy of a .NET Assembly</a>\" by Simon Cooper.</p>\n<p>For the first question - yes, the <code>_CorExeMain</code> is the entry point that does all the tricks to make your assembly to execute. For the explanations of all the things that happen during that call check <a href=\"https://mattwarren.org/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/\" rel=\"nofollow noreferrer\">The 68 things the CLR does before executing a single line of your code</a></p>\n</div>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Feb 15, 2021 at 17:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}