{
    "title": "Configure and execute Intel's PIN Tool",
    "link": "https://reverseengineering.stackexchange.com/questions/11328/configure-and-execute-intels-pin-tool",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to develop a Pintool on Windows. But so far I have been unable to configure or execute PIN. I have Microsoft Visual Studio 10.0 installed on my system. I have also downloaded and unzipped pin from its website. </p>\n<p>On windows, \"pin\" command needs \".dll\" file of pintool to execute. Suppose I want to execute \"icount.cpp\" on \"prog1.exe\". How can I do this?</p>\n<p>How can I use Visual Studio to develop my own tools? I have gone through tutorials and I know what to writ, but I am not getting where and how to start?</p>\n<p>Thanks you in advance.</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "3k",
    "tags": [
        "dynamic-analysis",
        "instrumentation",
        "pintool"
    ],
    "user": "Anurag",
    "time": "Nov 15, 2015 at 8:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The fastest and less cumbersome way I know is to make a copy of <code>MyPinTool</code> directory (under <code>&lt;pin dir&gt;\\source\\tools\\</code> and overwrite the file <code>MyPinTool.cpp</code> with your own code.</p>\n<p>Open the <code>MyPinTool.sln</code> in Visual Studio and build your target. After that you can rename the DLL to whatever you want.</p>\n<p>It is not an elegant solution but it gets the job done. In the end, you want to spent your time writing your <code>PinTool</code> and not annoyed with compiler specific settings...</p>\n</div>",
            "votes": "4",
            "user": "Carlos Garcia",
            "time": "Feb 10, 2016 at 14:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Carlos's answer is more of a workaround, but it's so much spot on. Getting all the right knobs right is an insane job. And even more so with <a href=\"https://groups.io/g/pinheads/message/11967\" rel=\"nofollow noreferrer\">version 3</a> that switched away from whatever native runtime the OS may have, and started to use their own. </p>\n<p>After half a day reversing the examples, I could come up with this (I'm assuming a 64 bit Windows target, but it shouldn't be difficult to notice what's architecture specific)</p>\n<p>First of all you should get the include folders right (make sure to set <em>PIN_ROOT</em> in the first place though)</p>\n<pre><code>$(PIN_ROOT)\\source\\include\\pin;$(PIN_ROOT)\\source\\include\\pin\\gen;$(PIN_ROOT)\\source\\tools\\InstLib;$(PIN_ROOT)\\extras\\xed-intel64\\include\\xed;$(PIN_ROOT)\\extras\\components\\include;$(PIN_ROOT)\\extras\\stlport\\include;$(PIN_ROOT)\\extras;$(PIN_ROOT)\\extras\\libstdc++\\include;$(PIN_ROOT)\\extras\\crt\\include;$(PIN_ROOT)\\extras\\crt;$(PIN_ROOT)\\extras\\crt\\include\\arch-x86;$(PIN_ROOT)\\extras\\crt\\include\\kernel\\uapi;$(PIN_ROOT)\\extras\\crt\\include\\kernel\\uapi\\asm-x86;\n</code></pre>\n<p>Then, set these flags in the compiler: <code>/MT /GR- /GS- /EHs- /EHa- /fp:strict /Oi- /FIinclude/msvc_compat.h</code></p>\n<p>And these defines for the preprocessor: <code>TARGET_IA32E;HOST_IA32E;TARGET_WINDOWS;WIN32;__PIN__=1;PIN_CRT=1;__LP64__</code> (please, really pay attention to the first two.. IA32<strong><em>E</em></strong> means x86-64 and their wrong combination can lead to countless ungodly issues with symbols and whatnot).</p>\n<p>Remember that with the exception of like 3 headers (<em>[xmm]intrin.h</em> and somewhat limitedly <em>windows.h</em>) you cannot use any other one outside of pintool. </p>\n<p>Next there is the linker. You need these folders </p>\n<pre><code>$(PIN_ROOT)\\intel64\\lib;$(PIN_ROOT)\\intel64\\lib-ext;$(PIN_ROOT)\\extras\\xed-intel64\\lib;$(PIN_ROOT)\\intel64\\runtime\\pincrt;\n</code></pre>\n<p>and these libraries, in the absolutest correct order (<code>/NODEFAULTLIB</code> is recommended)</p>\n<pre><code>pin.lib;xed.lib;pinvm.lib;kernel32.lib;pincrt.lib;ntdll-64.lib;crtbeginS.obj\n</code></pre>\n<p>(<code>stlport-static.lib</code>, <code>m-static.lib</code>, <code>c-static.lib</code> and <code>os-apis.lib</code> may also be needed in more complex situations)</p>\n<p>Last but not least, you should add <code>/export:main /SAFESEH:NO /IGNORE:4210 /IGNORE:4049</code> to the linker command line. For anything else give a check to the <a href=\"https://software.intel.com/sites/default/files/managed/8e/f5/PinCRT.pdf\" rel=\"nofollow noreferrer\">PinCRT whitepaper</a>, whose reading I cannot recommend enough. </p>\n</div>",
            "votes": "2",
            "user": "mirh",
            "time": "Apr 11, 2020 at 16:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mahmoud Abdelkader",
                    "text": "<span class=\"comment-copy\">FYI, as of Pin 3.19, pinvm.lib and ntdll-64.lib are no longer needed. I think stlport-static.lib may no longer be needed either.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was able to find a blog which helped me configure Visual Studio 10 to develop my own tools. <a href=\"http://reversingonwindows.blogspot.in/2013/06/sample-pintools-for-visual-studio.html?spref=pin\" rel=\"nofollow noreferrer\">Here is the link to blog</a> . The steps mentioned are generalized. But one thing I observed was that few directory names were different in my Pin installation. So please keep in mind to update those names. For some weird reasons I had to add \"\\LIBPATH:(path to additional library directories)\" variable to Command Line Linker Options. </p>\n<p>Also in the beginning of each cpp file mention </p>\n<blockquote>\n<p>#define _SECURE_SCL 0</p>\n</blockquote>\n<p>One common error you may face is \"<strong>Error:LNK1104:Cannot open file*</strong> **\". You can refer to <a href=\"https://stackoverflow.com/questions/133698/why-does-fatal-error-lnk1104-cannot-open-file-c-program-obj-occur-when-i-c\">this link</a> to solve the issue.</p>\n<p>EDIT: To execute the PIN tool:</p>\n<p>Build the solution in <strong>Release</strong> configuration. I have extracted PIN inside my solution directory itself. Go to directory where <strong>pin.exe</strong> exists. Execute command in below format in command prompt:</p>\n<blockquote>\n<p>pin -t [location (with file name) of solution DLL in release direcroty] -- [location (with file name) of application to execute]</p>\n</blockquote>\n<p>Hope this will be helpful for anyone facing this issue in future.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}