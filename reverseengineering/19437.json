{
    "title": "How detect version of VMProtect",
    "link": "https://reverseengineering.stackexchange.com/questions/19437/how-detect-version-of-vmprotect",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a binary with <a href=\"http://vmpsoft.com/\" rel=\"nofollow noreferrer\">VMProtect</a>. Some tools giving info that this is 2.x, some that 3.x. How I could check it? Thanks.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "disassembly",
        "unpacking",
        "packers",
        "vmprotect"
    ],
    "user": "Zubastic",
    "time": "Sep 24, 2018 at 22:31",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Which tools are you using?</span>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">Could you show some disassembly of a vm handler? You can recognize youâ€™re in a vm handler if you step and see a push xxxx; call yyy where yyy is in one of the vmp sections.</span>",
            "time": null
        },
        {
            "user": "Zubastic",
            "text": "<span class=\"comment-copy\">@SYS_V I used Protection ID v6.90.</span>",
            "time": null
        },
        {
            "user": "Zubastic",
            "text": "<span class=\"comment-copy\">@mrexodia at birany only some function at VMProtect and code is long with big cound of jmp something like that: cmp     [esi+ecx*2+0BAC1C45h], bl mov     bh, 0EEh adc     [esi], ebp pop     esp mov     eax, ds:5E830102h db      26h or      eax, 0BA322563h xor     [edi], esp push    eax rcl     dword ptr [edx], 1</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Unfortunately there's no easy answer here.</p>\n<p>Most of these tools employ different types of heuristics to determine the version used. Often times just applying binary signatures which could be inaccurate. Without gaining a decent understanding of VMProtect to recognize the differences this will be quite difficult.</p>\n<p>If tools used are open-source or well-documented, you can go over the signature used to detect the version, and validate it manually once you have a good understanding of the rational behind it. </p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Sep 24, 2018 at 19:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}