{
    "title": "Hiding a file in a Windows operating system",
    "link": "https://reverseengineering.stackexchange.com/questions/23452/hiding-a-file-in-a-windows-operating-system",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to understand how to hide a file in windows as a way to learn about win api and malware analysis.</p>\n<p>What I am trying to do is to make a file \"disappear\" via some kind of manipulation. But I am not sure how to do it.</p>\n<p>If for instance i wanted to make a cmd or a specific browsing application not show the file, I would've, in my opinion, use hooking/dll injection so that if application equals the name of the app I am trying to hide, it would skip the offset, as if to the next file. However, I can't hook all the processes in the world and was wondering if there's a smarter way to do so. Is there any mechanism in windows, or some winapi that is responsible of keeping a \"record\" of the file system that will always be called when a program/process wants to traverse/find the contents of some directory?</p>\n<p>How would you approach this simple task? I am pretty sure malware authors have done very tricky and sophisticated things and I am trying to learn ways to recognize this behavior so it's easier to be stopped.</p>\n<p>Thank you very much.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "450",
    "tags": [
        "windows",
        "patching",
        "function-hooking",
        "dll-injection",
        "hooking"
    ],
    "user": "turtle",
    "time": "Mar 16, 2020 at 12:46",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Malware that was to hide itself against all processes usually manipulates not the processes but the kernel itself. See e.g. this article: <a href=\"https://www.codeproject.com/Articles/32744/Driver-to-Hide-Processes-and-Files\" rel=\"nofollow noreferrer\">Driver to Hide Process and Files</a>. The article is old and may not applicable to a modern Windows 10 system but it explains a lot how something could be done.</span>",
            "time": null
        },
        {
            "user": "turtle",
            "text": "<span class=\"comment-copy\">It is very interesting. I was wondering, for a much simpler case, theoretically, is it possible to somehow hook the native functions in memory rather than having something physical like an ioctl driver?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are ways to do it without resorting to hooking or drivers.</p>\n<p>For example alternate data streams (ADS), or creating files with \"illegal\", i.e. reserved, names (<code>NUL</code>, <code>CON</code> ... trailing <code>.</code>, alternative casing to an existing file). Yep, that's right a trailing dot in a file name is illegal in Win32, but the most frequently used file system (NTFS) has no trouble creating or handling them. For ADS it's also possible to stick it onto a folder, which some tools don't handle improperly. That is, instead of <code>C:\\Windows\\regedit.exe:yourfile</code> you could stick it to <code>C:\\Windows:yourfile</code>. Not sure if it's possible, but as a malware writer I'd also check out special files like <code>\\$Mft</code> for a possibility to tack an ADS onto ...</p>\n<p><a href=\"https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html\" rel=\"nofollow noreferrer\">Sidestepping the Win32 name parsing</a> is one great way of hiding in plain sight without resorting to the NT native API. Some specific cases of accessing the file may still require the singular use of the NT native API, however (even though creating and removing such a file doesn't necessarily).</p>\n<p>Another way would be to write a file system filter driver, but your trouble in this case is that Windows requires drivers to be signed. So if you write a dodgy driver chances are you won't get it counter-signed by Microsoft. Depends on how much testing they do on drivers before <em>attestation signing</em>.</p>\n<p>For file system filter drivers you could opt for mini-filters, which are relatively easy to write (with comprehensive sample code in the Windows Driver Kit), but have to follow certain rules. Again, due to the signing requirements this may be impossible to get through signing. However, if it's just for learning you can enable test-signing on Windows and play around with it. In recent Windows 10 this is the only official method.</p>\n<p>Another way would be to write a legacy file system filter driver (such as the filter manager, <code>fltmgr.sys</code>, is), as it gives you more liberties. Alas, it's also a much more involved endeavor with a steeper learning curve. And in the end the same signing requirements exist.</p>\n<p>Aside from standard filter drivers you could do dodgy stuff such as stealing another driver's entry points (typically for the IRP major functions) and thereby piggyback on the functionality of such a driver. Yet again signing requirements are an obstacle.</p>\n<p>And one last way I want to mention would be to analyze existing drivers and see if you can find any exploitable vulnerabilities in them. If you find some, it's like a jackpot and you can sidestep all those signing requirements. But it's also the most involved of all the possible routes.</p>\n<p>Mandatory reading: <a href=\"https://nostarch.com/rootkits\" rel=\"nofollow noreferrer\">\"Rootkits and Bootkits\"</a>, which explains how certain malware types hide outside the file system, and the older one named \"Rootkits\" from 2005 by Greg Hoglund.</p>\n<hr/>\n<p>One more note: not sure what you hope to get from this, but hooking seems to be the least reliable, yet most flag-raising option you have. Not sure why you insist (as per your comment) on this.</p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Mar 17, 2020 at 16:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Robert",
                    "text": "<span class=\"comment-copy\">But <code>\"illegal\", i.e. reserved, names</code> and similar techniques only hide the files in the Explorer. The APIs (and hence other file managers) are usually not affected as far as I remember.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Robert Most file managers use <i>exactly</i> the same set of APIs (Win32 / Shell API) as the Windows Explorer and use the same assumptions about files and file names. Some are actually worse. And besides, \"hiding\" should perhaps have been better qualified then. But for a fuzzy question I can only make assumptions to give an answer with different angles, which I am trying to. But you're right, these different means have different effects and different scope.</span>",
                    "time": null
                },
                {
                    "user": "Rok Tavčar",
                    "text": "<span class=\"comment-copy\">You cant make folder name \"con\" in explorer, but you can normally open them. You can create them via winapi or with other ways. I tried that in win 8 and win 10 (not recently) and it worked. I also remember that some user on other stackexchange user having problems with his windows username \"con\" and not knowing why. So windows can handle illegal names, but badly and not consistently.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@RokTavčar well \"Windows\" can handle them, obviously. That's what my answer is all about. NTFS can handle them as well. NTFS is even a case-sensitive file system, something that many people don't get. The issue is (mostly) the Win32 subsystem (aka <code>csrss.exe</code>) which uses the file system in a case-insensitive fashion. Likely file managers will try to prevent you from creating certain names, but especially since Windows 7 onward the Windows Explorer has learned some tricks it didn't know before. In Windows 10 it even knows \"long\" path names (those of ~64k characters).</span>",
                    "time": null
                }
            ]
        }
    ]
}