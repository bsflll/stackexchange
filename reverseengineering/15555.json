{
    "title": "How do I Log a String Referenced within a Method - Smali",
    "link": "https://reverseengineering.stackexchange.com/questions/15555/how-do-i-log-a-string-referenced-within-a-method-smali",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been trying to reverse engineer an Android application and was wondering how I would go about logging a certain string.  Here is the method I am trying to log the String from:</p>\n<pre><code>.method private getValue(Ljava/lang/String;)[B\n.locals 2\n.param p1, \"parameter\"    # Ljava/lang/String;\n\n.prologue\n.line 216\nnew-instance v0, Ljava/lang/StringBuilder;\n\ninvoke-direct {v0}, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V\n\niget-object v1, p0, Lcom/directory/theseSettings;-&gt;newSettings:Lcom/directory/NewSettings;\n\niget-object v1, v1, Lcom/directory/NewSettings;-&gt;newValue:Ljava/lang/String;\n\ninvoke-virtual {v0, v1}, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n\nmove-result-object v0\n\ninvoke-virtual {v0, p1}, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n\nmove-result-object v0\n\ninvoke-virtual {v0}, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;\n\nmove-result-object v0\n\nconst-string v1, \"UTF-8\"\n\ninvoke-static {v0, v1}, Lorg/apache/http/util/EncodingUtils;-&gt;getBytes(Ljava/lang/String;Ljava/lang/String;)[B\n\nmove-result-object v0\n\nreturn-object v0\n.end method\n</code></pre>\n<p>For reference, here is that method again when decompiled with jadx.</p>\n<pre><code>private byte[] getValue(String parameter) {\n    return EncodingUtils.getBytes(this.newSettings.newValue + parameter, \"UTF-8\");\n}\n</code></pre>\n<p>I was hoping to log “this.newSettings.newValue” as seen in the jadx method, and I’m guessing it would be:</p>\n<pre><code>iget-object v1, v1, Lcom/directory/NewSettings;-&gt;newValue:Ljava/lang/String;\n</code></pre>\n<p>In the smali.</p>\n<p>The only problem is I don’t know how to log it, I am able to log “parameter” by using</p>\n<pre><code>const-string v0, “PARAMETER:” \ninvoke-static {v0, p1}, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I \n</code></pre>\n<p>But I’m not sure how to go about it if its referenced within the method, rather than being \"passed\" to it.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "android",
        "java"
    ],
    "user": "user20553",
    "time": "Jun 14, 2017 at 23:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In Dalvik, intermediate values are stored in \"registers\", which you can think of as being like local variables, except that they are numbered instead of named and they can have different types at different points in the method.</p>\n<p>When you write</p>\n<pre><code>const-string v0, “PARAMETER:” \ninvoke-static {v0, p1}, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I\n</code></pre>\n<p>the code does two things. First it stores the literal string \"PARAMETER:\" in register 0 (referred to as <code>v0</code>) and then passes the values in registers <code>v0</code> and <code>p1</code> as the arguments to Log.e(). </p>\n<p>At the bytecode level, registers are just a flat array, but the last few registers are special because that is where the parameters are passed upon entry to the method. Therefore, Smali provides syntax sugar for dealing with parameters. In this case, there are two local variables, so the parameters start at register 2. <code>p0</code> is just an alias for <code>v2</code> and <code>p1</code> is just an alias for <code>v3</code>. </p>\n<p>Note: by convention, the parameter registers are left untouched, but they are registers like any others, and you can store different things in them if you want to. The reason your code works is because <code>p1</code> contains the second parameter at the start of the method (the first parameter, <code>this</code>, is stored in <code>p0</code>), and nothing stores to it, so it still contains the value you want when control reaches your log statement.</p>\n<p>Anyway, it's not any different if you want to log the value in a different register, you just name a different register as the argument to Log.e(). In this case, the value you want is stored in register 1, so you should do</p>\n<pre><code>invoke-static {v0, v1}, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Antimony",
            "time": "Jun 15, 2017 at 4:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}