{
    "title": "Reverse engineering self-checking binary",
    "link": "https://reverseengineering.stackexchange.com/questions/11255/reverse-engineering-self-checking-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have linux binary, written in C. During runtime I calculate the checksum of the binary, and it seems that this prevents setting up gdb software breakpoints in it. How safe is this from a reverse engineering perspective? Is there a way to step through on the assembly of this binary?</p>\n<p>EDIT:</p>\n<p>The code calculates checksum for a part of itself. I have tried setting up breakpoints in gdb, and the checksum failed.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "583",
    "tags": [
        "gdb"
    ],
    "user": "robert",
    "time": "Nov 6, 2015 at 8:45",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">You don't state how you calculate the checksum of the binary, but checking the file on disk won't influence gdb at all, since breakpoints in memory don't affect the disk file. Also, you can't prevent people from setting a breakpoint at the end of your checksum routine and faking a correct checksum, or intercepting the open call and redirect it to a file with the correct checksum. You can't prevent opening the file in IDA and doing static analysis either. Bottom line: unless you're a very experienced reverser yourself, don't even try to invent your own protection, you're 100% sure to fail.</span>",
            "time": null
        },
        {
            "user": "robert",
            "text": "<span class=\"comment-copy\">@GuntramBlohm, I modified the question. I do not calculate checksum for the file on disk.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">This protection is against software breakpoints, but setting hardware breakpoints will be unnoticed. You should also add a <code>PTRACE</code> detection to make it a bit safer.</span>",
            "time": null
        },
        {
            "user": "broadway",
            "text": "<span class=\"comment-copy\">This won't do anything from hardware breakpoints, or even things like pin instrumentation since reads get pointed to the uninstrumented code.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's lots of ways your specific scheme can be broken - as perror says in his comments, setting hardware breakpoints will be unnoticed. The hardware breakpoints will <em>also</em> allow a reverser to check which part of your code reads the memory, pointing the attacker to the checksum algorithm. So, checksumming the process memory won't delay an experienced reverser by any significant amount.</p>\n<p>If you want some modest protection, you should at least do some <code>ptrace</code> tricks to check if you're being debugged, as perror says in his comment. To get some better protection, set up <code>ptrace</code> in your main process, fork a child process, have the child throw exceptions in various places, catch these exceptions in the main process, have the main process do some of the work and patch the result back into the child's address space, and resume the child. Also, spawn something that will try to <code>ptrace</code> the parent process, which will fail if the parent is being run under the control of a debugger.</p>\n<p>This will at least prevent attackers <strong>who have nothing than gdb in their toolbox</strong>  to fail. It will not help, for example, against anyone who compiles their own linux kernel and adds a sufficient amount of <code>printk</code> debugging output to the <code>ptrace</code> system call.</p>\n<p>Really, there are companies who specialize in protecting software, and even they fail if the target is worthy enough / the attacker is determined enough. There are attacks on FlexLM, there are attacks on Themida (just google for Themida cracking tutorial), and not even Microsoft is able to prevent cracked versions of windows from floating around in the internet. As i said in my comment, anything you could invent yourself won't prevent a determined reverser from cracking your software, unless you're a very experienced reverser yourself.</p>\n<p>I consider myself moderately experienced, not an expert by far, and i know that i couldn't devise anything that would stop anyone who has my experience for more than a few days at most. There are some members of this forum who could rip anything i'd invent into shreds within a day.</p>\n<p>So honestly, if your software is worth protecting at all, get something commercial like flexlm. Any effort you spend on it yourself is wasted time.</p>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Nov 6, 2015 at 9:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">Thank you for the answer. I have found examples where the child process tries to <code>ptrace</code> the parent. However I do not really understand the other method with <code>ptrace</code>, which uses exceptions.</span>",
                    "time": null
                },
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">By the way, it is much simpler trying to trace itself, instead of creating a child process. Is there any gain using the child process?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Any self-protection in your binary can be detected and removed, it's only a matter of how hard and annoying you want it to be for the reverser. It's impossible by design to avoid someone from bypassing your check.</p>\n<p>There are numerous resources about all the existing anti-debug techniques, but it's an endless arms race, just identify who you want to protect your binary from, and set the difficulty accordingly.</p>\n</div>",
            "votes": "0",
            "user": "user2823000",
            "time": "Nov 6, 2015 at 9:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}