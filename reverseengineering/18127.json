{
    "title": "CRC32 reverse engineer without knowing parameters, but knowing the input value",
    "link": "https://reverseengineering.stackexchange.com/questions/18127/crc32-reverse-engineer-without-knowing-parameters-but-knowing-the-input-value",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Dear members,</strong> </p>\n<p>I am trying to figure out the parameters of some hexadecimal CRC32 values I have.</p>\n<p><strong>The values are:</strong></p>\n<pre><code>Value - input (before hashing)\n55D3028A - J\n73AF2D02 - O\n6742BE71 - T\n</code></pre>\n<p>I hope I can figure out the polynominal and initial/final XOR value so I can hash my own values.</p>\n<p>I'm using reveng to getting the parameters for hashing my own strings, but I didn't found a working solution.</p>\n<p>the commands I've tried:</p>\n<ul>\n<li>./reveng.exe -w 32 -q 40000000 -s 55d3028a 73af2d02 6742be71</li>\n<li>./reveng.exe -w 32 -p 40000000 -q 80000000 -s 55d3028a 73af2d02 6742be71</li>\n<li>./reveng.exe -w 32 -p 80000000 -q c0000000 -s 55d3028a 73af2d02 6742be71</li>\n<li>./reveng.exe -w 32 -p c0000000 -q 0 -s 55d3028a 73af2d02 6742be71</li>\n<li>./reveng.exe -w 32 -l -s 55d3028a 73af2d02 6742be71</li>\n</ul>\n<p>Is it possible to use the input value(s) and the given crc(s) to bruteforce/calculate the parameters or does someone know a other method to achieve the same goal.</p>\n<p>Thanks in advance,</p>\n<p><strong>EvilID</strong></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "crc",
        "hash-functions"
    ],
    "user": "EvilID",
    "time": "Apr 29, 2018 at 16:08",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">are you sure the algorithm is a CRC and not some other chevksum/hash? where are you getting the data from?</span>",
            "time": null
        },
        {
            "user": "EvilID",
            "text": "<span class=\"comment-copy\">Well, I'm getting the values from software that I use and the documentation states that it is crc 32-bit 4 bytes.</span>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">If you have the software calculating these, why not just try to find the code and see what is actually happening? Or is the question more about solving it the way you asked for?</span>",
            "time": null
        },
        {
            "user": "EvilID",
            "text": "<span class=\"comment-copy\">I could try to find the code inside the program, but I indeed hope to learn how to solve it without doing that. Just for learning purposes.</span>",
            "time": null
        },
        {
            "user": "EvilID",
            "text": "<span class=\"comment-copy\">@josh The reveng approach was for me to figure out if it was indeed possible to calculate the parameters with the known information in the first place.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to give this a try because it seemed interesting but I did not succeed.</p>\n<p>Still, maybe this will lead you in the right direction for further tests.</p>\n<p>I started reading some introduction material on CRCs:</p>\n<p><a href=\"http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html\" rel=\"nofollow noreferrer\">http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html</a></p>\n<p>and this one where someone else was trying to reverse engineer a CRC:</p>\n<p><a href=\"https://www.cosc.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html\" rel=\"nofollow noreferrer\">https://www.cosc.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html</a></p>\n<p>to get a general understanding what we're dealing with. Then I was about to write some small Z3 script but luckily stumbled upon </p>\n<p><a href=\"https://github.com/DennisYurichev/yurichev.com/blob/master/blog/CRC_cracker_Z3/CRC_cracker.py\" rel=\"nofollow noreferrer\">https://github.com/DennisYurichev/yurichev.com/blob/master/blog/CRC_cracker_Z3/CRC_cracker.py</a></p>\n<p>which is described here: <a href=\"https://yurichev.com/blog/CRC_cracker_Z3/\" rel=\"nofollow noreferrer\">https://yurichev.com/blog/CRC_cracker_Z3/</a></p>\n<p>Basically, that is a script that uses Z3 (Microsoft's theorem prover) to calculate the CRC sum and it tries to find the polynomial, test Big and Little Endian interpretation, and an inverted input/output or not. You supply it with input data and the CRC sums they have to generate and then it tells you the parameters.</p>\n<p>That script did not produce a result for me though. That either means it's not a CRC, not a 32 bit CRC, the input/output is modified beyond simple inversion, or the supplied samples are not <em>just</em> over the 3 letters you listed.</p>\n<p>I also could not find any matching publicly known set of parameters (such as CRC32C), for that I tested some parameter sets using <a href=\"https://pycrc.org/\" rel=\"nofollow noreferrer\">https://pycrc.org/</a></p>\n<p>If your actual target was recreating the checksum I'd probably go reverse engineer the code now instead of treating it as a blackbox.</p>\n</div>",
            "votes": "3",
            "user": "Johann Aydinbas",
            "time": "Apr 30, 2018 at 21:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">have you tried hashing the strings including the terminating 0, or maybe even padded to 4 bytes?</span>",
                    "time": null
                },
                {
                    "user": "Johann Aydinbas",
                    "text": "<span class=\"comment-copy\">I just did for the terminating 0 (no result), and padded to 4 byte it ran more than an hour until I had to cancel it.</span>",
                    "time": null
                }
            ]
        }
    ]
}