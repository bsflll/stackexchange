{
    "title": "What is the right way to pack a payload with Python3's pwntools",
    "link": "https://reverseengineering.stackexchange.com/questions/19776/what-is-the-right-way-to-pack-a-payload-with-python3s-pwntools",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On the <a href=\"https://www.megabeets.net/a-journey-into-radare-2-part-2/\" rel=\"nofollow noreferrer\">tutorial by Megabeets, <em>\"A journey into Radare 2 â€“ Part 2: Exploitation\"</em></a>, he shows an example of how to create a payload with Python2</p>\n<pre><code># Initial payload\npayload  =  \"A\"*140 # padding\nropchain =  p32(puts_plt)\nropchain += p32(entry_point)\nropchain += p32(puts_got)\n\npayload = payload + ropchain\n</code></pre>\n<p>How would that get ported to Python3? <code>p32</code> is a 32bit integer. Python3 uses <code>bytes()</code> instead of strings. What's the right way to do this? </p>\n<p><code>python3-pwntools</code>'s docs show that there are some <a href=\"https://python3-pwntools.readthedocs.io/en/latest/fmtstr.html\" rel=\"nofollow noreferrer\">payload helpers</a>. But, I couldn't get them to work. Worse yet, those helpers <a href=\"http://docs.pwntools.com/en/stable/fmtstr.html\" rel=\"nofollow noreferrer\">were available in Python2 as well</a>, but not used (not sure why).</p>\n<p>How would I write Megabeet's example using <code>python3-pwntools</code>?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "13k",
    "tags": [
        "python",
        "pwntools"
    ],
    "user": "Evan Carroll",
    "time": "Oct 31, 2018 at 23:32",
    "comments": [
        {
            "user": "cfernandezlinux",
            "text": "<span class=\"comment-copy\">Thank you was looking for 1-2 hours about this. usually I do all my stuff on ruby/C/GO but was following an example that uses pwntools so was ignorant about this b'a'*100 etc switch was trying with str() but broke pwntools</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually, this is a programming question and not an RE question. Anyway, you simply need to tell python to treat your payload as bytes by adding the bytes-literal <code>b</code> before the <code>'A'*140</code>.</p>\n<pre><code>&gt;&gt;&gt; from pwn import *\n&gt;&gt;&gt;\n&gt;&gt;&gt; puts_plt = 0x8048390\n&gt;&gt;&gt; puts_got = 0x804a014\n&gt;&gt;&gt; entry_point = 0x80483d0\n&gt;&gt;&gt;\n&gt;&gt;&gt; payload  =  b'A' * 40   # Only 40 for the example\n&gt;&gt;&gt; ropchain =  p32(puts_plt)\n&gt;&gt;&gt; ropchain += p32(entry_point)\n&gt;&gt;&gt; ropchain += p32(puts_got)\n&gt;&gt;&gt;\n&gt;&gt;&gt; payload = payload + ropchain\n&gt;&gt;&gt;\n&gt;&gt;&gt; print(payload)\nb'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x90\\x83\\x04\\x08\\xd0\\x83\\x04\\x08\\x14\\xa0\\x04\\x08'\n&gt;&gt;&gt;\n</code></pre>\n<p>For further reading, you can read the <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#strings\" rel=\"nofollow noreferrer\">String and Bytes literals</a> page in the Python3 documentation.</p>\n</div>",
            "votes": "2",
            "user": "Megabeets",
            "time": "Nov 1, 2018 at 9:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">I tried this but it didn't work with your script, so I was wondering if there was more to it in python3 as I'm fairly certain I got the variables at the top correct (see this for follow up <a href=\"https://reverseengineering.stackexchange.com/q/19784/22669\">reverseengineering.stackexchange.com/q/19784/22669</a>). I wasn't sure if it was as simple as using the bit literals, or if I was supposed to use the payload formatter in pwntools.</span>",
                    "time": null
                }
            ]
        }
    ]
}