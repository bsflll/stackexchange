{
    "title": "Understanding assembly Hello World",
    "link": "https://reverseengineering.stackexchange.com/questions/13463/understanding-assembly-hello-world",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm studying x86 architecture and assembly in order to have the bases for studying reversing and exploit development. I'm following a course on opensecuritytraining.info. </p>\n<p>I see a Hello World example:</p>\n<pre><code>push ebp\nmov ebp, esp\npush offset aHelloWorld; \"Hello world\\n\"\ncall ds:__imp__printf\nadd esp, 4\nmov eax, 1234h\npop ebp\nretn\n</code></pre>\n<p>This code was generated by Windows Visual C++ 2005 with buffer overflow protection turned off and disassembled with IDA Pro 4.9 Free Version.</p>\n<p>I'm trying to understand what each line does.</p>\n<p>the first line is <code>push ebp</code>. </p>\n<p>I know <code>ebp</code> stands for <strong>base pointer</strong>. What is its function? </p>\n<p>I see that in the second line the value in <code>esp</code> is moved into <code>ebp</code> and searching online I see that there first 2 instructions are very common at the beginning of an assembly program. </p>\n<p>Though are <code>ebp</code> and <code>esp</code> empty at the beginning? I'm new to assembly. Is <code>ebp</code> used for stack frames, so when we have a function in our code and is it optional for a simple program?</p>\n<p>Then <code>push offset aHelloWorld; \"Hello world\\n\"</code></p>\n<p>The part after <code>;</code> is a comment so it doesn't get executed right? The first part instead adds the address containing the string Hello World to the stack, right? But where is the string declared? I'm not sure I understand.</p>\n<p>Then <code>call ds:__imp__printf</code></p>\n<p>it seems it's a call to a function, anyway <code>printf</code> is a builtin function right?\nAnd does <code>ds</code> stand for <strong>data segment register</strong>? Is it used because we are trying to access a memory operand that isn't on the stack?</p>\n<p>then <code>add esp, 4</code></p>\n<p>do we add 4 bytes to esp? Why?</p>\n<p>then <code>move eax, 1234h</code>  what is 1234h here?</p>\n<p>then <code>pop ebx</code>..it was pushed at the beginning. is it necessary to pop it at the end?</p>\n<p>then <code>retn</code> ( i knew about <code>ret</code> for returning a value after calling a function). I read that the n in retn refers to the number of pushed arguments by the caller. It isn't very clear for me.\nCan you help me to understand? </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "7k",
    "tags": [
        "assembly"
    ],
    "user": "Fabio",
    "time": "Sep 8, 2016 at 9:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>first up: I would recommend you to try and write some simple assembly programs or use an intermediate representation like REIL to get a hang of it (REIL has only ~17 instructions).</p>\n<pre><code>push ebp\nmov ebp, esp\n</code></pre>\n<p>The first two lines build the <em>stack frame</em>. As you correctly mentioned, ebp describes the current stack frame. So when this function is called from another function, is saves the previous base pointer on the stack to be able to restore it when the function returns. When the value is saved, the function assignes the current location on the stack to be the new base pointer for this fuction.</p>\n<p>This assignments are called function prolog and are common among different disassembleres. Mainly the ebp is used to reference function arguments, while the esp can be modified freely (by pushing variables on the stack, etc.)</p>\n<pre><code>push offset aHelloWorld; \"Hello world\\n\" \n</code></pre>\n<p>This function pushes the <strong>address</strong> of the String \"Hello world\\n\" on the stack. The comment at the end is just for convenience matters. Please note pushing something on the stack modifies esp by the (byte-size) of the given value. In this case 4 for x32 and 8 for x64 references (<code>esp=esp-4</code>).</p>\n<pre><code>call ds:__imp__printf\n</code></pre>\n<p>This call does not directly jump to the function, because the function is loaded dynamically and the code does not know where the function is located in the address space. So it calls a reference to the location, which is the \"jump table\" or in this case rather \"import table\". When a binary is loaded, the systems loader ensures that it loads the dependencies and leaves the correct addresses for the program to use there. (<strong>imp</strong> stands for \"import\").</p>\n<pre><code>add esp, 4\n</code></pre>\n<p>Based on the calling convention (how are arguments passed? who cleans them from the stack?) printf does not clean up its stack before returning. So the calling function must do it itself. It adds 4 to the stack pointer to revert the changes from the <code>push</code> instruction (which subtracted 4 from esp implicitly).</p>\n<pre><code>mov eax, 1234h\n</code></pre>\n<p>Nothing special here. The value 0x1234 is <em>moved</em> to the register eax (apparently for no reason). I assume this is the return value of the program (unix convention is to return 0 in eax if there was no failure).</p>\n<pre><code>pop ebp\n</code></pre>\n<p>This instruction reads the former value of ebp from the stack and stores it in ebp again. Please note you must keep track of the order in which things were pushed on the stack (Last-In-First-Out). Note that this instruction also adds 4 to the esp implicitly.</p>\n<pre><code>retn\n</code></pre>\n<p>Resume execution at the location at the current esp. When a function is called, the calling fucntion pushes the address to return to on the stack. Also, this function adds 4 to esp to 'remove' the address from the stack.</p>\n</div>",
            "votes": "8",
            "user": "W. Bruneau",
            "time": "Sep 13, 2016 at 11:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Fabio",
                    "text": "<span class=\"comment-copy\">I think your answer is very clear, though I should learn more about computer architecture and assembly in order to understand better. I just started. Thank you for your help.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">No problem. Although there are many corner cases and special instructions, relatively few are common. I'd advise learning by doing using IDA or x64dbg ;) Questions are always welcome</span>",
                    "time": null
                },
                {
                    "user": "realtebo",
                    "text": "<span class=\"comment-copy\">This is more than a hello world</span>",
                    "time": null
                },
                {
                    "user": "Arise",
                    "text": "<span class=\"comment-copy\">When you said that \"pushing something on the stack modifies esp by the (byte-size) of the given value. In this case 4 for x32 and 8 for x64 references (esp=esp-4)\", what is this exactly 4? The given value isn't that storage bytes consumed by that string? Shouldn't it be longer?</span>",
                    "time": null
                }
            ]
        }
    ]
}