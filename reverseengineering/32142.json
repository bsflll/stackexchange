{
    "title": "Inject a MessageBox to the PE file",
    "link": "https://reverseengineering.stackexchange.com/questions/32142/inject-a-messagebox-to-the-pe-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to patch some <code>Windows PE</code> file to show just simple <code>MessageBox</code>. Taking into account that the <code>PE</code> in question doesn't import the <code>MessageBoxA</code> function if I'm right that all i need to do is to add the <code>user32.dll</code> to the <code>Imports Section</code> with <code>MessageBoxA</code> function. And then just patch the code (using <code>IDA</code> or <code>OllyDbg</code> or sth. similar) adding a <code>call</code> instruction to the address of the newly added <code>MessageBoxA</code> function from <code>Imports</code>? If I'm right that after adding a new entry to the <code>Imports</code> the <code>Windows Loader</code> automatically map the <code>MessageBoxA</code> function physical address to the virtual PE address space making the PE possible to call the needed function?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "161",
    "tags": [
        "windows",
        "pe",
        "patching"
    ],
    "user": "Daros911",
    "time": "Aug 7, 2023 at 11:49",
    "comments": [
        {
            "user": "y_v",
            "text": "<span class=\"comment-copy\">I believe LIEF will help you with patching. Check this documentation: <a href=\"https://lief-project.github.io/doc/latest/tutorials/02_pe_from_scratch.html\" rel=\"nofollow noreferrer\">lief-project.github.io/doc/latest/tutorials/â€¦</a></span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Well you're right about your import manipulation, yes. But a mere <code>call</code> won't help you. Depending on what the target is -- OllyDbg makes me assume x86 or x64, though -- you need to be aware of the calling convention(s) and pass the arguments in registers or on the stack accordingly. So it'd be some <code>mov</code> or <code>push</code> before the <code>call</code>, too.</span>",
            "time": null
        }
    ],
    "answers_data": []
}