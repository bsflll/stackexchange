{
    "title": "Why does WriteProcessMemory in kernel32.dll do this? (ASM)",
    "link": "https://reverseengineering.stackexchange.com/questions/8384/why-does-writeprocessmemory-in-kernel32-dll-do-this-asm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Someone said to do something like this to avoid scans for WPM calls: </p>\n<pre><code>__declspec(naked) BOOL WINAPI SafeWriteProcessMemory(HANDLE hProcess,\n    LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize,\n    SIZE_T *lpNumberOfBytesRead)\n{\n    __asm\n    {\n            mov edi, edi\n            push ebp\n            mov ebp, esp\n            pop ebp\n            mov eax, WriteProcessMemory\n            add eax, 6\n            jmp eax\n    }\n}\n</code></pre>\n<p>I put it in a program and debugged it in olly. I looked at <code>kernel32.WriteProcessMemory</code>. We're using the <code>add eax, 6</code> to jump from here:</p>\n<pre><code>MOV EDI,EDI                              ; BOOL kernel32.WriteProcessMemory(hProcess, ...)\nPUSH EBP\nMOV EBP,ESP\nPOP EBP\nJMP &lt;JMP.&amp;API-MS-Win-Core-Memory-L1-1-0. ; Jump to KERNELBASE.WriteProcessMemory\n</code></pre>\n<p>To there. Effectively skipping over the instructions between the two. We're executing those instructions in our own call. But I don't understand why those instructions are being executed. We're pushing <code>EBP</code> onto the stack, moving <code>ESP</code> into <code>EBP</code>, then restoring <code>EBP</code> from the stack. That shouldn't actually be doing anything.</p>\n<p>I debugged it instruction-by-instruction, and still can't figure out why it's being done.</p>\n<p>Does it have something to do with Windows' useless <code>mov edi,edi</code>s at the beginning of functions to allow jump patching?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "assembly"
    ],
    "user": "Pulpo",
    "time": "Mar 4, 2015 at 22:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is the \"stolen bytes\" technique, where the first few bytes of the function are copied to a remote location and executed from there, then the original function is called from the location after the bytes that were copied.</p>\n<p>The purpose of skipping the first few bytes of the function allows you to call the function body without being \"detected\".  That is, any code which detoured the function at exactly the start would be bypassed.</p>\n<p>In your example, the EBP manipulation is meaningless.  Those instructions exist in the original function in order to provide a familiar signature for routines that, for example, detour the code (but which is presumably broken by also including the hot-patching support).  Note that the POP instruction did not exist in that location before Windows 7, with the introduction of the kernelbase.dll.  Previously, the real function body would have followed the MOV instruction.</p>\n</div>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Mar 5, 2015 at 17:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The intention was likely to cause breakpoints set on the first instruction of <code>WriteProcessMemory()</code> to not fire.</p>\n<p>However, this is a very unsafe approach and is prone to breaking should the prologue of the API function change.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Mar 4, 2015 at 22:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Pulpo",
                    "text": "<span class=\"comment-copy\">Excuse my ignorance, but how would that prevent a breakpoint from firing? I set a breakpoint on the first instruction, and it fired correctly.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">If you set a breakpoint on <code>WriteProcessMemory()</code> and call <code>SafeWriteProcessMemory()</code>, the breakpoint won't fire.</span>",
                    "time": null
                },
                {
                    "user": "user45891",
                    "text": "<span class=\"comment-copy\">But doesn't Microsoft basically guaranteed that the prologue won't change (in the forseeable future) with their introduction of Hotpatching?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No.​​​​​​​​​​​​</span>",
                    "time": null
                }
            ]
        }
    ]
}