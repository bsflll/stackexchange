{
    "title": "Understanding Loop Statements: For & While [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/29653/understanding-loop-statements-for-while",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2021-12-16 09:39:04Z\">3 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/29653/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<h2>Background</h2>\n<p>Hello! New user. I am working on a personal computer science project that involves research on loop statements such as the <code>for</code> and <code>while</code> loops in <strong>C</strong> - these loops can apply to other programming and scripting languages but, to keep things simple I want to focus primarily on <strong>C</strong>.</p>\n<hr/>\n<h2>Issue</h2>\n<p>I would like to know how developers of programming and scripting languages are able to create <code>for</code> and <code>while</code> loops for those same languages. How can I achieve this for experimentation purposes? Do I have to learn assembly? If so, can anyone provide me with guidance?</p>\n<p>Apologies if my original question was too vague.</p>\n<p>Cheers!</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "113",
    "tags": [
        "c"
    ],
    "user": null,
    "time": "3 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what do you mean by \"recreate\"? Please explain what is the problem you're trying to solve; maybe add some examples.</span>",
            "time": null
        },
        {
            "user": "user29031",
            "text": "<span class=\"comment-copy\">I thought I was clear. I guess not. I am not trying to do anything fancy. I just want to know how developers of programming and scripting languages were able to create <code>for</code> and <code>while</code> loops. I do not know how to do this. Given this is site is focused on reverse engineering, I assumed it would be appropriate to ask my question here. Do you have any suggestions on how I should edit my question?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@MichaelŠòdéké it really <i>still</i> isn't very clear. Are you asking about specific scripting languages and their <i>implementation</i> of <code>for</code> and <code>while</code> loops? If so, you'd have to give the language at least some reference to find a sample and an interpreter for said language. Are you asking conceptually how one would implement such a thing? In that case it's not reverse engineering at all. Please edit the details into your question and then vote to <b>Reopen</b> (link right under your question)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>basic construct in c,.... languages</p>\n<pre><code>for (index =start_value; index&lt; end_value; (pre/post) inc/dec(index))\nlike \nfor (i = 0; i&lt; 10; i++) , ( i=10,i&gt;0;i--) , (i=35; i&gt; 25; --i) ,(i=35; i&lt; 25; ++i)\n</code></pre>\n<p>the compiler takes this human readable code and converts it into assembly for the specific platform</p>\n<p>for x86 this could look like</p>\n<pre><code>mov end_value to another register like mov edx,10 \nmov index to a register like mov,ecx,0\nbody {\ndo anything but preserve  ecx,edx\n}\ninc/dec regsiter ecx\ncompare ecx with edx,\ndo an if &lt; or &gt; decision and either go back to doing the body or exit \n</code></pre>\n<p>a real world example</p>\n<pre><code>int main (void) {\n    register int a =4;\n    for (register int i =3; i&lt;10; i++){\n        a = a + i*2;\n    }\n    return a;\n}\n</code></pre>\n<p>compiled and disassembled using vs and windbg</p>\n<pre><code>:\\&gt;ls\nloopy.cpp\n\n:\\&gt;cl /Zi /W4 /analyze:autolog- /Od /EHsc /nologo -GS loopy.cpp  /link /release /subsystem:windows /entry:main /fixed\nloopy.cpp\n\n:\\&gt;ls\nloopy.cpp  loopy.exe  loopy.obj  loopy.pdb  vc140.pdb\n</code></pre>\n<p>disassembly of compiled code</p>\n<pre><code>:\\&gt;cdb -c \"uf loopy!main;q\" loopy.exe | awk \"/Reading/,/quit/\"\n0:000&gt; cdb: Reading initial command 'uf loopy!main;q'\nloopy!main:\n00000000`00401000 55              push    rbp\n00000000`00401001 8bec            mov     ebp,esp\n00000000`00401003 83ec08          sub     esp,8\n=====================\nmemory location instead of register  used\n00000000`00401006 c745f804000000  mov     dword ptr [rbp-8],4 \n00000000`0040100d c745fc03000000  mov     dword ptr [rbp-4],3\n=====================\n00000000`00401014 eb09            jmp     loopy!main+0x1f (00000000`0040101f)\n\nloopy!main+0x16:\n00000000`00401016 8b45fc          mov     eax,dword ptr [rbp-4]\nincrement ==================\n00000000`00401019 83c001          add     eax,1\n00000000`0040101c 8945fc          mov     dword ptr [rbp-4],eax\n\nloopy!main+0x1f:\n============ comparison and decision\n00000000`0040101f 837dfc0a        cmp     dword ptr [rbp-4],0Ah\n00000000`00401023 7d0e            jge     loopy!main+0x33 (00000000`00401033)\n============== body\nloopy!main+0x25:\n00000000`00401025 8b4dfc          mov     ecx,dword ptr [rbp-4]\n00000000`00401028 8b55f8          mov     edx,dword ptr [rbp-8]\n00000000`0040102b 8d044a          lea     eax,[rdx+rcx*2]\n00000000`0040102e 8945f8          mov     dword ptr [rbp-8],eax\n00000000`00401031 ebe3            jmp     loopy!main+0x16 (00000000`00401016)\n=========== body end goes back to re doing again \n================ exit\nloopy!main+0x33:\n00000000`00401033 8b45f8          mov     eax,dword ptr [rbp-8]\n00000000`00401036 8be5            mov     esp,ebp\n00000000`00401038 5d              pop     rbp\n00000000`00401039 c3              ret\nquit:\n</code></pre>\n<p>in laymans terms\nthis assembly is now further converted to binary (base 2 ,or 0,1) and fed into a network of logic gates which use and , or , not , nand ,xor, xnor circuitry to do the  actual work\nso simply a not gate might  return false or true based on the input of index 0b101 versus 0b1000</p>\n<p>if you need the basic electronics and logic gate circuitry you should look for electronics stack exchange</p>\n<p><a href=\"https://circuitverse.org/simulator\" rel=\"nofollow noreferrer\">you can also check online logic simulators like this</a></p>\n<p><a href=\"https://i.sstatic.net/pjUqJ.gif\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/pjUqJ.gif\"/></a></p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 3, 2021 at 4:06",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'll assume you're slightly familiar with machine code / assembly language. The high-level statement</p>\n<pre><code>while (x &gt;= 0) {\n    print(x);\n    --x;\n}\n/* rest of code */\n</code></pre>\n<p>needs to be translated down to simple machine code instructions like <code>add</code>, <code>compare</code>, <code>call</code>, and -- specifically for the loop, <code>jump</code> and <code>branch</code> instructions. Every processor has a different instruction repertoire, but similar instructions tend to be present in most modern CPU architectures</p>\n<p>Here is one possible translation of the <code>while</code> loop for the Intel x86 architecture (in 64-bit mode):</p>\n<pre><code>    jmp    loop_test\nloop_body:\n    mov rcx,rsi\n    call print\n    dec rsi\nloop_test:\n    test  rsi,rsi\n    jns loop_body\n; rest of code\n</code></pre>\n<p>The very first instruction is a <code>jmp</code> instruction that jumps past the loop body directly to <code>loop_test</code>. The reason for doing this has to do with efficiency, and is worth a separate question. Here, we'll content ourselves with knowing that the next instruction will be the one after the label <code>loop_test</code>.</p>\n<p>The instructions between the labels <code>loop_body</code> and <code>loop_test</code> correspond to the body of the loop. The compiler has decided to put the high-level language variable <code>x</code> in the <code>rsi</code> register. Because calling the procedure <code>print</code> requires its parameter to be in the <code>rcx</code> register, the <code>mov rcx,rsi</code> copies the value of <code>rsi</code> into <code>rcx</code>. Then the procedure <code>print</code> is called. Finally the value in the <code>rsi</code> instruction is decremented by one.</p>\n<p>Control then falls into the <code>loop_test</code> block. Here, the statement <code>test rsi,rsi</code> compares <code>rsi</code> with itself. As a side effect, it happens to set or clear the processor's <code>S</code> flag, which indicates whether the value in <code>rsi</code> was negative or not -- that is, whether the highest order bit 63 was set or not. On the x86 architecture, signed numbers are represented in two's complement, so negative numbers will have their high order bit <strong>set</strong>.</p>\n<p>If the high order bit of <code>rsi</code> is not set, then the <code>S</code> flag will be cleared by the <code>test</code> instruction. The next instruction <code>jns</code> jumps back to <code>loop_body</code> if the <code>S</code> flag is <strong>not set</strong> (hence the <code>jns</code> - \"jump if not signed\" if you want). The <code>jns</code> instruction is a conditional jump; the jump is either taken back to <code>loop_body</code> or it falls through to the code following the loop.</p>\n<p>For-loops are basically while-loops with extra chrome. With some exceptions, a for-loop</p>\n<pre><code>for (x = 0; x &lt; 42; ++x) {\n    /* loop body */\n}\n</code></pre>\n<p>is transformed into</p>\n<pre><code>x = 0;\nwhile (x &lt; 42) {\n    /* loop body */\n    ++x;\n}\n</code></pre>\n<p>and then the compiler will translate that into something similar to the while-loop above.</p>\n</div>",
            "votes": "1",
            "user": "John Källén",
            "time": "Dec 3, 2021 at 2:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}