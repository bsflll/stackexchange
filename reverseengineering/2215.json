{
    "title": "GDB Error \"Too many array elements\"",
    "link": "https://reverseengineering.stackexchange.com/questions/2215/gdb-error-too-many-array-elements",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand very basic stack-based buffer overflow\nI'm running Debian wheezy on a x86_64 Macbook Pro.</p>\n<p>I have the following unsafe program:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nCanNeverExecute()\n{\n        printf(\"I can never execute\\n\");\n        exit(0);\n}\n\nGetInput()\n{\n        char buffer[512];\n\n        gets(buffer);\n        puts(buffer);\n}\n\nmain()\n{\n        GetInput();\n\n        return 0;\n}\n</code></pre>\n<p>I compiled with <code>-z execstack</code> and <code>-fno-stack-protector</code> for my tests.</p>\n<p>I have been able to launch the program through gdb, get the address of <code>CanNeverExecute</code> function which is never called, and overflow the buffer to replace the return address by this address. I got printed \"I can never execute\", which is, so far, so good.</p>\n<p>Now I'm trying to exploit this buffer overflow by introducing shellcode in the stack. I'm currently trying directly into gdb: break in <code>GetInput</code>function, set buffer value through gdb and jump to buffer adress with <code>jump</code> command.</p>\n<p>But I have a problem when setting the buffer:\nI have a breakpoint just after gets function, and I ran the programm with 512 <code>a</code> characters as input.</p>\n<p>In gdb, I do:</p>\n<pre><code>(gdb) p buffer\n$1 = 'a' &lt;repeats 512 times&gt;\n</code></pre>\n<p>The input was read without any problem, and my buffer is 512 <code>a</code>\nI then try to modify its value. If I do this:</p>\n<pre><code>(gdb) set var buffer=\"\"\n</code></pre>\n<p>and try to print buffer, its length is now 511! How come??</p>\n<pre><code>(gdb) p buffer\n$2 = '\\000' &lt;repeats 511 times&gt;et:\n</code></pre>\n<p>And when I try to set it back to, for instance, 512 <code>a</code>, I get:</p>\n<pre><code>Too many array elements\n</code></pre>\n<p>I can set it to 511 <code>a</code> though, it is really that las byte that doesn't work... How come, is there a simple explanation?</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "buffer-overflow"
    ],
    "user": "Noé Malzieu",
    "time": "Jun 9, 2013 at 1:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>GDB protects you to overflow your char array. </p>\n<pre><code>(gdb) p &amp;buffer\n$25 = (char (*)[512]) 0x7fffffffdfe0\n</code></pre>\n<p>To bypass this security you can either write directly the memory :</p>\n<pre><code>(gdb) set 0x7fffffffe1e0=0x41414141\n</code></pre>\n<p>Or cast the array as a bigger one and then set your stuff :</p>\n<pre><code>set {char [513]}buffer=\"512xA\"\n</code></pre>\n</div>",
            "votes": "8",
            "user": "dna",
            "time": "Jun 9, 2013 at 16:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Noé Malzieu",
                    "text": "<span class=\"comment-copy\">Thanks, but I wasn't trying to write in 513 A but only 512... Or is it that the last character has to be a <code>\\x00</code> ?</span>",
                    "time": null
                },
                {
                    "user": "dna",
                    "text": "<span class=\"comment-copy\">Oh sorry that was a typo. Yes of course the last character has to be a null byte, moreover GDB tried to append it for you. Given the array definition this is why writing 511 \"a\" worked but not 512.</span>",
                    "time": null
                },
                {
                    "user": "Noé Malzieu",
                    "text": "<span class=\"comment-copy\">Ok thanks a lot! Last question: does that mean that in C, if I create <code>char buffer[512];</code>, I can only fill it with 511 chars as well?</span>",
                    "time": null
                },
                {
                    "user": "dna",
                    "text": "<span class=\"comment-copy\">You are free to fill a 512 chars buffer with 512 chars. But in GDB  when using the command <code>set buffer=\"A\"</code> you are filling it with a string, thus with a final null byte terminator.</span>",
                    "time": null
                },
                {
                    "user": "Noé Malzieu",
                    "text": "<span class=\"comment-copy\">That makes perfect sense</span>",
                    "time": null
                }
            ]
        }
    ]
}