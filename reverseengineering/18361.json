{
    "title": "WinDbg: Setting a breakpoint on every EXPORTED function of a module",
    "link": "https://reverseengineering.stackexchange.com/questions/18361/windbg-setting-a-breakpoint-on-every-exported-function-of-a-module",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Kinda new to WinDbg. I got an executable who loads a module later in the execution path, so at start I'm doing <code>sxe ld:moduleName</code> to break when the process loads the module.</p>\n<p>Then I tried to just put a breakpoint on every method but it takes for ages because there are around 30k methods and just about 300 exported methods.</p>\n<p>I'm trying to put a breakpoint only on the exported ones but no luck so far.</p>\n<p>I was also trying to use pykd but the module is so poorly documented that I didnt manage to do that either.</p>\n</div>",
    "votes": "4",
    "answers": 3,
    "views": "3k",
    "tags": [
        "windbg",
        "pykd"
    ],
    "user": "Daniel Israeli",
    "time": "May 25, 2018 at 10:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just set 465 bps in no time </p>\n<pre><code>0:000&gt; bl\n0:000&gt; .foreach ( place { !showexports ollydbg } ) { bp place }\n0:000&gt; bl \"*z*\"\n     0 e Disable Clear  00406938     0001 (0001)  0:**** ollydbg!Absolutizepath\n    118 e Disable Clear  004a9274     0001 (0001)  0:**** ollydbg!Finalizetaggedfile\n    206 e Disable Clear  004a8e1c     0001 (0001)  0:**** ollydbg!Getoriginaldatasize\n    237 e Disable Clear  004a9510     0001 (0001)  0:**** ollydbg!Gettaggedrecordsize\n    268 e Disable Clear  00403918     0001 (0001)  0:**** ollydbg!Iszero\n    319 e Disable Clear  004068cc     0001 (0001)  0:**** ollydbg!Relativizepath\n    356 e Disable Clear  00487d74     0001 (0001)  0:**** ollydbg!Squeezename\n    375 e Disable Clear  00487dfc     0001 (0001)  0:**** ollydbg!Uncapitalize\n    449 e Disable Clear  0053000c     0001 (0001)  0:**** ollydbg!sizeatt\n    450 e Disable Clear  0052ff88     0001 (0001)  0:**** ollydbg!sizekey\n    451 e Disable Clear  0052ff04     0001 (0001)  0:**** ollydbg!sizename\n    465 e Disable Clear  005d552c     0001 (0001)  0:**** ollydbg!zwcontinue\n</code></pre>\n<p>just be aware that exports may be data exports too and you may corrupt your session by mass break-pointing like this </p>\n<p>To avoid setting breakpoints on data you can run a shell script like this and copy paste the output  (it is a hack but it would reduce setting bp's on symbols whose size is &lt; 16 (for example a GUID ) </p>\n<pre><code>.shell -ci \"x /v /Z /f ollydbg!*\" awk \"{ if ( strtonum(\\\"0x\\\"$4) &gt; 16 ) print \\\"bp \\\"$3 \\\" 5000\\\"   }\"\n</code></pre>\n<p>This command would print a series of bp addr 5000 (5000 is pass count so you wont be bothered for the first 5000 hits to this address) </p>\n<p>copy the series and paste it back to set bps</p>\n<p>for me this set ~ 440 bps\nissued a <strong>g to continue execution</strong><br/>\nand after a few minutes  hit ctrl+break and <strong>issued a bl</strong> </p>\n<p>copy pasted and grepped the hits </p>\n<pre><code>grep -v \"5000 (5000)\" bl.txt\n     3 e Disable Clear  004de7c4     4ef9 (5000)  0:**** ollydbg!T\n    11 e Disable Clear  00409e74     4fff (5000)  0:**** ollydbg!Setstatus\n    34 e Disable Clear  0041e444     4fff (5000)  0:**** ollydbg!Setautoupdate\n    50 e Disable Clear  00419208     4fff (5000)  0:**** ollydbg!Addtolist\n    70 e Disable Clear  00473ca4     4ffe (5000)  0:**** ollydbg!Setactivetab\n    84 e Disable Clear  00418afc     4fff (5000)  0:**** ollydbg!Issortedinit\n    90 e Disable Clear  00417980     4fc0 (5000)  0:**** ollydbg!Addsorteddata\n    175 e Disable Clear  0041214c     4ffc (5000)  0:**** ollydbg!Sunkenframe\n    178 e Disable Clear  0041742c     4ffe (5000)  0:**** ollydbg!Createsorteddata\n    206 e Disable Clear  004109d4     4fd3 (5000)  0:**** ollydbg!StrcopyW\n    215 e Disable Clear  004071f8     4ffe (5000)  0:**** ollydbg!Readfile\n    233 e Disable Clear  00403c70     4ffc (5000)  0:**** ollydbg!Memalloc\n    235 e Disable Clear  00409b98     4fff (5000)  0:**** ollydbg!Message\n    253 e Disable Clear  00404070     4ffe (5000)  0:**** ollydbg!Virtalloc\n    259 e Disable Clear  00406938     4ff6 (5000)  0:**** ollydbg!Absolutizepath\n    262 e Disable Clear  00417350     4fe2 (5000)  0:**** ollydbg!Destroysorteddata\n    268 e Disable Clear  00403440     4fff (5000)  0:**** ollydbg!Unicodetoutf\n    269 e Disable Clear  00412078     4fff (5000)  0:**** ollydbg!Getmonitorrect\n    315 e Disable Clear  0040261c     4f96 (5000)  0:**** ollydbg!Stringfromini\n    331 e Disable Clear  004026a0     4ff3 (5000)  0:**** ollydbg!Filefromini\n    332 e Disable Clear  00402718     4d95 (5000)  0:**** ollydbg!Getfromini\n    392 e Disable Clear  00403d7c     4fff (5000)  0:**** ollydbg!Memfree\n    411 e Disable Clear  0043ac10     4ffe (5000)  0:**** ollydbg!Destroysimpledata\n    421 e Disable Clear  00402978     4fff (5000)  0:**** ollydbg!Getfromsettings\n    425 e Disable Clear  00471cd8     4ffe (5000)  0:**** ollydbg!Initset\n</code></pre>\n</div>",
            "votes": "6",
            "user": "blabb",
            "time": "May 25, 2018 at 14:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Daniel Israeli",
                    "text": "<span class=\"comment-copy\">For some reason I cant show exported functions, I tried with <code>!showexports KERNEL32</code> and <code>extmatch /D /e KERNEL32 *</code> it just doesnt do anything</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@DanielIsraeli  are you doing user mode debugging or kernel mode debugging  !showexports will show no output if you are doing kernelmode debugging and the symbols are not loaded for the module  in user mode iirc the command loads the sysmbols for the module automatically</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My variant with pykd + pykdwin<br/>\n<a href=\"https://githomelab.ru/pykd/pykdwin\" rel=\"nofollow noreferrer\">https://githomelab.ru/pykd/pykdwin</a></p>\n<pre><code>from pykdwin.pe import get_exports\n\nbps = list()\nfor name, addr in get_exports('kernel32'):\n  bps.append( setBp(addr) )\n</code></pre>\n<p>Try to run this script with --global option:</p>\n<pre><code>!py --global set_allbp.py\n</code></pre>\n</div>",
            "votes": "2",
            "user": "pykd_team",
            "time": "May 31, 2018 at 18:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the module does not have symbols loaded, set the symbol path to an empty folder <code>.sympath c:\\empty</code> and issue <code>bm moduleName!*</code>. With no symbols available, windbg will set breakpoint only on the exported functions. Then set the symbol path to the previous value.</p>\n</div>",
            "votes": "0",
            "user": null,
            "time": "Feb 27, 2019 at 15:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}