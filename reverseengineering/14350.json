{
    "title": "Get instruction bytes in JIT mode, Intel Pin",
    "link": "https://reverseengineering.stackexchange.com/questions/14350/get-instruction-bytes-in-jit-mode-intel-pin",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an INS object in the instrumentation function, and I wish to get the actual bytes used to code this instruction. Looking at the INS functions, the closest I found was a function to disassemble it (show the assembly code), where I'm seeking for the actual bytes.</p>\n<p>Assistance is highly appreciated.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "361",
    "tags": [
        "assembly",
        "pintool"
    ],
    "user": "Jaaz",
    "time": "Jan 8, 2017 at 11:11",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">You can use <i><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/58423/Pin/html/group__INS__BASIC__API__GEN__IA32.html#gd3b5f975c84b126531b38930b94b5544\" rel=\"nofollow noreferrer\">INS_Address</a></i> and <i><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/58423/Pin/html/group__INS__BASIC__API__GEN__IA32.html#gf031508bacfcaf4d566f9df8245f3df2\" rel=\"nofollow noreferrer\">INS_Size</a></i> together.</span>",
            "time": null
        },
        {
            "user": "Jaaz",
            "text": "<span class=\"comment-copy\">@ExtremeCoders: I did not mean the size, but rather the actual bytes used for coding it. (I also edited the question to make it clear)</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">I meant to read the instruction bytes from memory by using the address and size.</span>",
            "time": null
        },
        {
            "user": "Jaaz",
            "text": "<span class=\"comment-copy\">@ExtremeCoders: Well, this is embarrassing. The bigger lesson I learned here is that a pintool can directly access the memory region of the binary it runs. Thank you!</span>",
            "time": null
        }
    ],
    "answers_data": []
}