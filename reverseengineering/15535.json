{
    "title": "IDA Pro debugging: follow child process",
    "link": "https://reverseengineering.stackexchange.com/questions/15535/ida-pro-debugging-follow-child-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering a malware that creates a number of child processes and I'm trying to do dynamic analysis of the ELF binary with IDA Pro and IDA's Local Linux Debugger, but I can't get IDA to attach to the child process.</p>\n<p>Is there some way to force IDA to follow the child process instead of the parent one?</p>\n<p>I've tried using gdbserver which seems to lack the follow-fork-mode functionality of gdb and I couldn't find any information on child processes and the IDA Pro Linux Debugger.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ida",
        "debugging",
        "linux",
        "elf",
        "dynamic-analysis"
    ],
    "user": "m-strasser",
    "time": "Jun 12, 2017 at 18:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>AFAIK IDA does not have that feature, so you'll have to do that yourself by breakpointing or stepping to calls to process creation functions (usually <a href=\"https://linux.die.net/man/2/execve\" rel=\"nofollow noreferrer\"><code>execve</code></a>, <a href=\"https://linux.die.net/man/2/fork\" rel=\"nofollow noreferrer\"><code>fork</code></a>, etc), and then forcibly debugging them either by using other IDA instances or creating gdb instances.</p>\n<p>You won't be able to debug multiple processes in a single IDA instance.</p>\n<p>If you want to debug such processes, you could replace the execve with spawning the process yourself, attaching to the process, etc. There are <a href=\"https://stackoverflow.com/questions/377195/how-to-debug-the-entry-point-of-fork-exec-process-in-gdb/43099366#43099366\">plenty</a> of <a href=\"https://stackoverflow.com/questions/6199270/how-do-i-debug-the-child-process-after-fork-in-gdb\">answers</a> online, if you're not limiting to IDA specifically.</p>\n<p>Once you debugged a process, a common trick you could use is to put the debugged process into a <code>JMP $-2</code> infinite loop (<code>EB FC</code> on x86 CPUs), detach your original debugger, re-attach with IDA and restore the original instruction sequence you replaced with <code>JMP $-2</code>.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 13, 2017 at 15:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "m-strasser",
                    "text": "<span class=\"comment-copy\">Thanks for your answer, but could you explain a bit more what you mean by \"forcibly debugging them\"?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">I didn't mean anything special, just the usual attaching and following childs in GDB</span>",
                    "time": null
                }
            ]
        }
    ]
}