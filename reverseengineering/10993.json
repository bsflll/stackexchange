{
    "title": "lm command on Windbg is not showing all modules",
    "link": "https://reverseengineering.stackexchange.com/questions/10993/lm-command-on-windbg-is-not-showing-all-modules",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse-enginering a Win7 32bit legacy driver.</p>\n<p>If I break when the system is loaded I can see that the driver is loaded because the corresponding DRIVER_OBJECT is created (<code>!drvobj name</code> show a real object). </p>\n<p>But I can't see the driver name in the module list with <code>lm</code> command. Is there an explanation for this?</p>\n<p>Because of this I am also unable to break when this module is loaded with <code>sxe ld name</code> but I think that the driver is loaded just after the loading of umbus (because at this time the corresponding DRIVER_OBJECT is created). </p>\n<p>Searching on internet I found that this is the \"User mode bus enumerator\" but I don't understand because it is a kernel mode driver (.sys file).</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "2k",
    "tags": [
        "windbg",
        "driver"
    ],
    "user": "Marco Ramsay Qualcuno",
    "time": "Sep 29, 2015 at 10:33",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">use !drvobj \\driver\\xxxxx 7  it will show you the Address of DriverEntry: do .reload or .reload /f xxxxx.sys and list nearest symbols like ln Address of DriverEntry and not the module name</span>",
            "time": null
        },
        {
            "user": "Marco Ramsay Qualcuno",
            "text": "<span class=\"comment-copy\">Doing <code>.reload</code> when the driver is loaded allow me to show MJ function in terms of <code>module name+offset</code>. <code>lm</code> also show the module. But I'm still unable to set a bp on driver entry. <code>ln addr of DriverEntry</code> doesn't show anything. I tried also <code>bu module_name+offset of EntryPoint</code> with no luck. I think the problem is windbg does not know what \"module name\" is before I do <code>.reload</code> and so is unable to break on EntryPoint. Any clues?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">module is already loaded and driver entry point is already called if you can see the module in lm list  to stop at DriverEntryPoint you should break very early (During Phase1/2 init Stage  read all the answers in this thread you should be able to find the indirect entry point in your os which is responsible for calling DriverEntry  <a href=\"http://www.woodmann.com/forum/archive/index.php/t-9201.html\" rel=\"nofollow noreferrer\">woodmann.com/forum/archive/index.php/t-9201.html</a>  i also wrote an answer here which i think was updated for newer os offset search this site</span>",
            "time": null
        },
        {
            "user": "Marco Ramsay Qualcuno",
            "text": "<span class=\"comment-copy\">Of course entry point is already called if I can see the module through <code>lm</code>. I'll read the answers but I usually break at system startup (with driver <b>NOT</b> loaded), then put a breakpoint with <code>sxe ld name.sys</code> but then nothing happens.</span>",
            "time": null
        },
        {
            "user": "Marco Ramsay Qualcuno",
            "text": "<span class=\"comment-copy\">Also, I tried to patch the \"hot patch point\" with 0xCC 0x90, but then windows fail to load the driver!! How is possible?</span>",
            "time": null
        }
    ],
    "answers_data": []
}