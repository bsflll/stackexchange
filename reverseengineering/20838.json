{
    "title": "How the CMP instruction uses condition flags?",
    "link": "https://reverseengineering.stackexchange.com/questions/20838/how-the-cmp-instruction-uses-condition-flags",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to figure out the behavior of conditional jumps (JE/JNE, JZ/JNZ) in the x86 instruction set familly. </p>\n<p>Which condition flags <code>CMP</code> instruction sets and <strong>how</strong>, if the result is equal and if it is not? For example:</p>\n<ul>\n<li><p><code>CMP eax, 0</code> (true)</p></li>\n<li><p><code>CMP eax, 0</code> (false)</p></li>\n</ul>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "22k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "PaHa",
    "time": "Mar 10, 2019 at 9:47",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">You could get that information from the first results from DuckDuckGo (or Google (or Bing)). Did you tried that?</span>",
            "time": null
        },
        {
            "user": "PaHa",
            "text": "<span class=\"comment-copy\">Yes I did. (Google). Found a lot, what jumps read, but not exactly what CMP sets.</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\"><code>CMP</code> sets all the flags based on the intermediate results of <code>SUB</code> that it performs. read here: <a href=\"http://www.godevtool.com/GoasmHelp/usflags.htm\" rel=\"nofollow noreferrer\">godevtool.com/GoasmHelp/usflags.htm</a></span>",
            "time": null
        },
        {
            "user": "PaHa",
            "text": "<span class=\"comment-copy\">(CMP EAX,EDX;set zero flag if eax=edx.) So only the zero flag and if true 1 and false 0. Tanks.</span>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\">read <code>cmp</code> documentation first: <a href=\"https://www.felixcloutier.com/x86/cmp\" rel=\"nofollow noreferrer\"><i>The comparison is performed by subtracting the second operand from the first operand and then setting the status flags in the <b>same manner as the <code>SUB</code> instruction</b>.</i></a>. But that's not a good way to <a href=\"https://stackoverflow.com/q/33721204/995714\">check whether a register is zero or not</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Furthermore, with the CMP instruction, the destination operand doesn't change. Just the flags. </p>\n<p>Let me illustrate. Let's say <code>EAX = 00000005</code> and <code>EBX = 00000005</code>. If we do this arithmetic operation:</p>\n<p><code>CMP EAX, EBX</code></p>\n<p>What's happening, is in effect this:</p>\n<p><code>EAX - EBX</code> ----&gt;\n<code>00000005 - 00000005</code></p>\n<p>Since the result would be <code>0</code>, but we don't change the destination operand in a CMP instruction, the zero flag is set to <code>1</code> (since it's true).</p>\n<p>So, as we saw, depending on the result of the previous arithmetic operation, flags can be set accordingly:</p>\n<p><a href=\"https://i.sstatic.net/o4f30.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/o4f30.png\"/></a></p>\n</div>",
            "votes": "10",
            "user": "she_roar",
            "time": "Mar 23, 2019 at 18:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jim Driscoll",
                    "text": "<span class=\"comment-copy\">Presumably, where values are signed and of opposite signs (because the CPU doesn't have a way to distinguish signed from unsigned) that use of the C flag isn't true  - so 0xff &gt; 0x01 makes it also look like -1 &gt; 1. I expect in that case you'd check the S flag which is true if the result would be negative.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>CMP</code> instruction does internally a <code>SUB</code> and sets the flags accordingly.</p>\n<p>So all flags that are set by a <code>SUB</code> are also set by <code>CMP</code>.</p>\n<p>Namely the flags <code>SF</code>, <code>ZF</code>, <code>AF</code>, <code>PF</code>, and <code>CF</code> are set.</p>\n<p>This information is taken from the Intel manual for the processors (<a href=\"https://software.intel.com/en-us/articles/intel-sdm\" rel=\"noreferrer\">https://software.intel.com/en-us/articles/intel-sdm</a>).</p>\n</div>",
            "votes": "5",
            "user": "Uwe Plonus",
            "time": "Mar 10, 2019 at 9:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}