{
    "title": "CISC/RISC in reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/22729/cisc-risc-in-reverse-engineering",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the difference between <a href=\"https://en.wikipedia.org/wiki/Complex_instruction_set_computer\" rel=\"nofollow noreferrer\">CISC</a>/<a href=\"https://en.wikipedia.org/wiki/Reduced_instruction_set_computer\" rel=\"nofollow noreferrer\">RISC</a> when reverse engineering a binary?</p>\n<p>I know the difference between them, but is there any difference while reversing? Is it easier to reverse CISC than RISC?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "265",
    "tags": [
        "binary-analysis"
    ],
    "user": "yfr24493AzzrggAcom",
    "time": "Dec 17, 2019 at 19:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's usually easier to distinguish between data and code or detect pointers to code on RISC processor because RISC instruction has a fixed (or very much less variable) length as opposite to CISC.\nIt means, for example, that RISC functions addresses are usually aligned to largest instruction size. </p>\n<p>Based on comparison of architectures I worked with( Risc: (MIPS, PPC, ARM, aarch64), Cisc: (Intel)) I'd say that CISC itself is more complicated, which makes reversing of programs for it more complicated.  </p>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Dec 16, 2019 at 7:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Yep, I guess it's a matter of taste, really. And how often you do one or the other. RISC obviously uses more instructions to achieve the same, but once you get acquainted to the patterns it becomes second nature. The point about telling apart data and code is well made.</span>",
                    "time": null
                }
            ]
        }
    ]
}