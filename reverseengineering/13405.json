{
    "title": "WinDbg - RVA of current instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/13405/windbg-rva-of-current-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Do someone know a windbg command to display the RVA of a certain instruction within it's module?</p>\n<p>Right now, if I want to find the RVA of the current instruction, let's say, the RVA of that <code>test eax, eax</code>:</p>\n<pre><code>16237915 8b4e0c          mov     ecx,dword ptr [esi+0Ch]\n16237918 e8633ff0ff      call    NPSWF32!BrokerMainW+0x1b0a4 (1613b880)\n1623791d 85c0            test    eax,eax\n1623791f 7507            jne     NPSWF32!BrokerMainW+0x11714c (16237928)\n16237921 8bce            mov     ecx,esi\n16237923 e80838fdff      call    NPSWF32!BrokerMainW+0xea954 (1620b130)\n16237928 8b4810          mov     ecx,dword ptr [eax+10h]\n</code></pre>\n<p>I have to find first the base address of the module:</p>\n<pre><code>0:000&gt; lm a 1623791d \nBrowse full module list\nstart    end        module name\n15c70000 16b53000   NPSWF32    (export symbols)     \n</code></pre>\n<p>And calculate the RVA myself:\n<code>1623791d - 15c70000 = 5C791D</code></p>\n<p>My question, is there a windbg command that will give me this result immediately.</p>\n<p>Thanks in advance!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "973",
    "tags": [
        "disassembly",
        "windows",
        "debugging",
        "debuggers",
        "windbg"
    ],
    "user": "Aviv",
    "time": "Sep 1, 2016 at 9:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>put this is some txt file and save it somewhere like <strong>c:\\myrva.txt</strong></p>\n<pre><code>.foreach ( place { lm1ma ${$arg1} } ){ .printf \"Rva for input is %x\\n\", ${$arg1}-${place} }\n</code></pre>\n<p>and use it like </p>\n<pre><code>0:000&gt; $$&gt;a&lt; c:\\\\rva.txt @edx\nRva for input is 470b4\n0:000&gt; ? edx\nEvaluate expression: 1997238452 = 770b70b4\n0:000&gt; $$&gt;a&lt; c:\\\\rva.txt .\nRva for input is a04fa\n0:000&gt; ? .\nEvaluate expression: 1997604090 = 771104fa\n0:000&gt; $$&gt;a&lt; c:\\\\rva.txt 7711050a\nRva for input is a050a\n</code></pre>\n<p>Well if you think this should be a regular windbg command you can write your own extension<br/>\nand do !rva <br/>\nwith engextcpp framework this should take no more than 5 lines of code as below </p>\n<pre><code>#include &lt;engextcpp.cpp&gt;\nclass EXT_CLASS : public ExtExtension {\npublic:\n    EXT_COMMAND_METHOD(rva);\n};\nEXT_DECLARE_GLOBALS();\nEXT_COMMAND( rva, \"rva\", \"{;e,d=@$ip;!rva;}\" ) {\n    ULONG64 inaddr = GetUnnamedArgU64 (0);\n    ULONG ModIndex = NULL;\n    ULONG64 Modbase = NULL;\n    m_Symbols-&gt;GetModuleByOffset(inaddr,0,&amp;ModIndex,&amp;Modbase);\n    Out(\"Rva For Inaddress %I64x is %I64X\\n\" ,inaddr ,(inaddr - Modbase));    \n}\n</code></pre>\n<p>compiled and linked with </p>\n<pre><code>cl /LD /nologo /W4 /Ox  /Zi /EHsc rva.cpp /link /EXPORT:DebugExtensionInitialize /Export:rva /Export:help /RELEASE %linklibs%\n</code></pre>\n<p>and execute happily it takes one argument an expression and by default the expression is current instruction pointer viz $ip </p>\n<p>extension auto loaded during start of session</p>\n<pre><code>windbg -c \".load rva\" calc\n</code></pre>\n<p>and happy rvaing for ever</p>\n<pre><code>0:000&gt; !rva\nRva For Inaddress 776e04f6 is A04F6\n0:000&gt; !rva @edx\nRva For Inaddress 776870b4 is 470B4\n0:000&gt; !rva ntdll\nRva For Inaddress 77640000 is 0\n0:000&gt; !rva calc\nRva For Inaddress 440000 is 0\n0:000&gt; !rva calc!WinMain\nRva For Inaddress 441635 is 1635\n\neven some obscure unrealistic expression will work\n0:000&gt; !rva @@c++( ( @$proc )-&gt;Ldr)\nRva For Inaddress 77717880 is D7880\n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Sep 2, 2016 at 7:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Aviv",
                    "text": "<span class=\"comment-copy\">Thank you for your solution, it works. I just feel like the feature should have existed as a windbg regular command</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">you can code your own extension that does this  ala windbg !rva style i edited my answer to include this approach you may take a look</span>",
                    "time": null
                }
            ]
        }
    ]
}