{
    "title": "Bypassing basic memory protection",
    "link": "https://reverseengineering.stackexchange.com/questions/3361/bypassing-basic-memory-protection",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to debug a game using OllyDBG. When I'm in the game main menu, I can debug and set breakpoint without problem and when I open the game process using Cheat Engine, I can view the memory.</p>\n<p><img alt=\"Attach to the game before entering the game map\" src=\"https://i.sstatic.net/VRSUF.png\"/></p>\n<p>But when I start to play the game and enter the game map, the game crash when the breakpoint triggered. And also, when I try to reattach the Cheat Engine, the memory cannot be read.</p>\n<p><img alt=\"Attach to the game after entering the game map\" src=\"https://i.sstatic.net/FRx99.png\"/></p>\n<p>And when I go back to the main menu again, the protection is being turn off... I can view the memory, and debug again.</p>\n<p>Any idea which on which function should add bp in order to trace this memory protection? I already add bp on the <code>IsDebuggerPresent</code>, but it doesn't trigger, so I'm pretty sure it's not the one..</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "12k",
    "tags": [
        "ollydbg",
        "anti-debugging",
        "memory"
    ],
    "user": "Ahmad Hafiz",
    "time": "Jan 5, 2014 at 5:24",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Cheat Engine may be conflicting with OllyDbg. Try using only one at a time. OllyDbg can view the process's memory as well, so there's really no need to use Cheat Engine anyway.</span>",
            "time": null
        },
        {
            "user": "Ahmad Hafiz",
            "text": "<span class=\"comment-copy\">Yes, I already try using Olly alone and CE alone as well.   If I attach to the game right after it run, I can access and edit the memory even when I'm playing it. But only memory editing, debugging will crash the game.   But if I attach the game after the game starts, not only debugging, I can't even view the memory.</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">You may want to try SIDE for anti-anti-debugging: <a href=\"http://www.woodmann.com/forum/showthread.php?15268-SIDE\" rel=\"nofollow noreferrer\">woodmann.com/forum/showthread.php?15268-SIDE</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>At first try to start with hardware BP instead of software BP (\"the regular ones\") but remember that you only have 4 hardware BPs and they are per specific thread.</p>\n<p>In addition, taking into account that you are saying </p>\n<blockquote>\n<p>the memory cannot be read</p>\n</blockquote>\n<p>then I would suggest </p>\n<ul>\n<li>to set BP on <code>VirtualFree</code>/<code>NtFreeVirtualMemory</code> and trace from there back to understand if memory was freed intentionally or because of some bug.</li>\n<li>if the above is not working, try to use hardware BPs on the same functions and also on <code>GetThreadContext</code> to check if there is anti-debugging present to clean the hardware BPs.</li>\n</ul>\n</div>",
            "votes": "2",
            "user": "PhoeniX",
            "time": "Jan 5, 2014 at 20:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're using OllyDbg (Not OllyDbg 2), there are plugins that help fool the application into thinking it's not being debugged. </p>\n<p>Check out the <a href=\"http://www.openrce.org/downloads/details/238/Hide_Debugger\" rel=\"nofollow\">\"Hide Debugger\"</a> plugin.</p>\n<p>If that doesn't work, then you'll probably have to go in and figure out what it's doing by hand. You might want to try breaking once you hit start, and then doing some static analysis to figure out what's going on from that point. Best of luck!</p>\n</div>",
            "votes": "0",
            "user": "jvoisin",
            "time": "Jan 5, 2014 at 16:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}