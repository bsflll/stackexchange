{
    "title": "How would I go about imaging a propriatary flash or eeprom memory chip?",
    "link": "https://reverseengineering.stackexchange.com/questions/12873/how-would-i-go-about-imaging-a-propriatary-flash-or-eeprom-memory-chip",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been playing around a lot with the xeltek reader, which lets me image various memory chips. Usually, I just use the catalog number used to get the chip's datasheet and search xelteks database for a proper adapter.</p>\n<p>But what if I have an electronic device that uses a proprietary chip or no catalog number is given.</p>\n<p>How would I go about making a binary image of the mystery chip in question? Is there any readily available hardware that will help do this?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "307",
    "tags": [
        "memory",
        "digital-forensics",
        "memory-dump"
    ],
    "user": "ChipsAhoy",
    "time": "Jun 17, 2016 at 14:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am <strong>no expert in the matter</strong> but that seems <strong>highly unlikely</strong>. There are 2 ways how to approach that I know of:</p>\n<ol>\n<li><p><strong>detect/exploit/sniff known interface</strong></p>\n<p>Like <strong>SPI,JTAG</strong>,... or even memory interface (address,data and control buses) and do the dump with some <strong>MCU</strong> to <strong>PC</strong> adapter attached to it or dump to <strong>SD</strong> card or what ever. This is not invasive approach but needs to have the interface present. If you do not have the pinout for the chip (or the <strong>PCB</strong> ...) try to find the other stuff connected to it.  Also using oscilloscope helps.</p>\n<p>However if the access to data is restricted you're out of luck (fuses,<strong>HW/SW</strong> key ...). Also this way is not guaranteed that you will got the whole memory dump either. Mostly the interfaces are controlled by software so you would need to hack in the protocol. With <strong>HW</strong> interfaces you got direct chip access according to your privileges set by fuses...</p>\n<p>see related <a href=\"https://reverseengineering.stackexchange.com/q/12812/4709\">Thought I found serial port - broke embedded device instead! Help?</a></p></li>\n<li><p><strong>Die shot analysis</strong></p>\n<p>In some cases the chip is sliced to obtain a die shot (but that of coarse destroys the chip for good). Then according to used technology you can reverse engineer the whole circuit diagram including <strong>PROM</strong> related stuff and obtain the data \"directly\". With <strong>EEPROM</strong> is this tricky as the information is stored as charge so you would need some really tricky sensors to scan that more like some liquid crystal based solution. but the possibility of error is extremly high as the info can be discharged by the slicing, by any contact with air or anything. Better would be reverse the circuit and detect programming interface on some spare chip and then use <strong>#1</strong> on the real one ... <strong>FLASH</strong> memories are based on domino technology so it should be detectable from the die shot directly like <strong>PROM</strong> too.</p>\n<p>See related:</p>\n<ul>\n<li><a href=\"https://reverseengineering.stackexchange.com/a/8773/4709\">How was the Zero Flag implemented on Z80 ALU?</a></li>\n<li><a href=\"https://reverseengineering.stackexchange.com/a/3111/4709\">Physically auditing the layout of transistors inside a processor made at 22mm process die</a></li>\n</ul></li>\n</ol>\n<p>To make some universal <strong>HW</strong> for this you would need to have some analog multiplexors switching matrix to be able to support any pinout and then prior to use configure which pin is what (power supply, data, ...). That is more or less possible (considering voltage, current, impedance, and frequency requirements) but to use it you would need the necessary info you do not have for unknown chip anyway ...</p>\n<p>To detect the chip first you would need to try power it up which will most likely burn any chip with wrongly selected pins... making universal detection impossible. For a group of similar chips is this possible but again you would need some info about them ...</p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ChipsAhoy",
                    "text": "<span class=\"comment-copy\">Thanks for thorough response. So assuming I had an infinite supply of chips to test, would it be just trial and error?   The only pre-existing knowledge I would have about the electronic device is the 28 connector pin out that it interfaces with other electronic devices with.</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@ChipsAhoy If you got the pinout then you know which pins are power, ground, shield and interfaces so there are no guesses ... but to have minimal circuit  usually chips need few capacitors, crystal etc ... which can be deduced from PCB you are inspecting.  Then it is just matter of scanning for programing protocol ...</span>",
                    "time": null
                }
            ]
        }
    ]
}