{
    "title": "How to reverse command line arguments?",
    "link": "https://reverseengineering.stackexchange.com/questions/2299/how-to-reverse-command-line-arguments",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on a console windows executable. So far what I figured out is that the executable checks number of command line arguments. Afterwards, it branches out depending on the number of arguments passed (argv). The jumps are looked up using some sorts of jump table, which is constructed dynamically. It seems to be a daunting task try to figure out all of the possible command line arguments. It looks like the binary only executes only when certain number of particular arguments is parsed. I have collected some possible options using <code>strings</code> utility. </p>\n<p>Is there a general road map for reversing command line arguments? What are possible approaches to reversing them? Are there any tools that could be employed?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "ida",
        "c",
        "c++"
    ],
    "user": "PSS",
    "time": "Jun 20, 2013 at 7:34",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">If it's only based on the number, just try every small number.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if you determined the argv and argc and values in there you gone half of the way . from value of argc you can understand how many arguments you should pass and from values in argv you can determine what you \"should\" pass.</p>\n<p>i wrote a very simple example for you</p>\n<pre><code>70 _main           proc near               ; CODE XREF: _main_0j\n.text:00401070\n.text:00401070 var_44          = byte ptr -44h\n.text:00401070 var_4           = dword ptr -4\n.text:00401070 arg_0           = dword ptr  8\n.text:00401070 arg_4           = dword ptr  0Ch\n.text:00401070\n.text:00401070                 push    ebp\n.text:00401071                 mov     ebp, esp\n.text:00401073                 sub     esp, 44h\n.text:00401076                 push    ebx\n.text:00401077                 push    esi\n.text:00401078                 push    edi\n.text:00401079                 lea     edi, [ebp+var_44]\n.text:0040107C                 mov     ecx, 11h\n.text:00401081                 mov     eax, 0CCCCCCCCh\n.text:00401086                 rep stosd\n.text:00401088                 cmp     [ebp+arg_0], 2\n.text:0040108C                 jge     short loc_4010A0\n.text:0040108E                 push    offset aCheckUsage ; \"check usage\"\n.text:00401093                 call    _printf\n.text:00401098                 add     esp, 4\n.text:0040109B                 or      eax, 0FFFFFFFFh\n.text:0040109E                 jmp     short loc_4010DB\n</code></pre>\n<p>as you can see there is <code>cmp  [ebp+arg_0], 2</code> it means at least we have to pass one \"argument\" then there is jqe (jump if greater or equal) .</p>\n<p>so we will call program with one argument to pass this condition so we will be in <code>loc_4010A0</code> and here is the code .</p>\n<pre><code>0 loc_4010A0:                             ; CODE XREF: _main+1Cj\n.text:004010A0                 push    offset Str2     ; \"n00b\"\n.text:004010A5                 mov     eax, [ebp+arg_4]\n.text:004010A8                 mov     ecx, [eax+4]\n.text:004010AB                 push    ecx             \n.text:004010AC                 call    _strcmp         \n.text:004010B1                 add     esp, 8          \n.text:004010B4                 mov     [ebp+var_4], eax\n.text:004010B7                 cmp     [ebp+var_4], 0  \n.text:004010BB                 jle     short loc_4010CC\n.text:004010BD                 push    offset aWrongPassword ; \"wrong password !!!\"\n.text:004010C2                 call    _printf        \n.text:004010C7                 add     esp, 4          \n.text:004010CA                 jmp     short loc_4010D9 \n</code></pre>\n<p>now as you can see we have another compare here this time using strcmp and before that we will push our str and <code>arg_4</code> and here is our actual argument vector . </p>\n<p>you can really easily analysis arguments using static and dynamic analysis but there is a few notes you have to keep in your mind .</p>\n<ol>\n<li>how many arguments we have to pass</li>\n<li>type of arguments</li>\n<li>location of arguments (argv)</li>\n</ol>\n<p>also there is additional note here , sometime maybe we \"DO NOT\" use argc/argv for getting command line arguments we can use windows API like <code>GetCommandLine</code> and so on too. you have to check how arguments are received and parsed too.</p>\n</div>",
            "votes": "6",
            "user": "n00b",
            "time": "Jun 20, 2013 at 7:51",
            "is_accepted": true,
            "comments": []
        }
    ]
}