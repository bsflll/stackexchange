{
    "title": "Address register offsets and analysis (Tricore)",
    "link": "https://reverseengineering.stackexchange.com/questions/25968/address-register-offsets-and-analysis-tricore",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm decompiling a binary file for a Infineon Tricore processor, the code is incomplete and only contains part of the code so will not execute. The auto analysis did a great job and the code is readable but I have 1 snag with the address offsets.</p>\n<p>Currently a large part of the code uses a static address offset which are set into [a0]. I know this to be a value of 0xd0008000 and it never changes but can't figure out a way of forcing this during the analysis.</p>\n<p>For example, the code will load an address register like this:\n[a0]0x50f0\nI know this should should be 0xd000d0f0 but the auto analysis will just show [a0]0x50f0.</p>\n<p>I can force each reference on a local basis by hitting Ctrl+R and manually adding the offset but I'm interested to know what the correct method is.</p>\n<p>Thanks,</p>\n<p>Dave</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "277",
    "tags": [
        "ida",
        "offset"
    ],
    "user": "BeefyDafe",
    "time": "Sep 24, 2020 at 11:32",
    "comments": [
        {
            "user": "Unicornux",
            "text": "<span class=\"comment-copy\">Looks like you need to find the equivalent copy_block that tells you where 0xd0008000 was copied to.</span>",
            "time": null
        },
        {
            "user": "BeefyDafe",
            "text": "<span class=\"comment-copy\">@Unicornux Thanks, that turned out to be the solution!</span>",
            "time": null
        },
        {
            "user": "rollsch",
            "text": "<span class=\"comment-copy\">Did you figure out a nice way to do this?</span>",
            "time": null
        }
    ],
    "answers_data": []
}