{
    "title": "Hook naked function with CPU registers",
    "link": "https://reverseengineering.stackexchange.com/questions/26547/hook-naked-function-with-cpu-registers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to hook this function:</p>\n<pre><code>.text:005589CB sub_5589CB      proc near               ; CODE XREF: AddHealth(int,long)+1A↑j\n.text:005589CB                                         ; sub_5328D8+98E↑p ...\n.text:005589CB\n.text:005589CB var_4           = dword ptr -4\n.text:005589CB\n.text:005589CB                 xorps   xmm0, xmm0\n.text:005589CE                 ucomiss xmm1, xmm0\n.text:005589D1                 lahf\n.text:005589D2                 test    ah, 44h\n.text:005589D5                 jnp     short locret_558A1D\n.text:005589D7                 movss   xmm2, dword ptr [ecx+564h]\n.text:005589DF                 comiss  xmm2, xmm0\n.text:005589E2                 jbe     short locret_558A1D\n.text:005589E4                 cmp     ecx, dword_89A288\n.text:005589EA                 jnz     short loc_5589FF\n.text:005589EC                 comiss  xmm1, xmm0\n.text:005589EF                 ja      short loc_5589FF\n.text:005589F1                 mov     eax, dword_8CF880\n.text:005589F6                 cmp     byte ptr [eax+4BBh], 0\n.text:005589FD                 jnz     short locret_558A1D\n.text:005589FF\n.text:005589FF loc_5589FF:                             ; CODE XREF: sub_5589CB+1F↑j\n.text:005589FF                                         ; sub_5589CB+24↑j\n.text:005589FF                 movss   xmm0, dword ptr [ecx+560h]\n.text:00558A07                 mov     eax, [ecx]\n.text:00558A09                 addss   xmm0, xmm1\n.text:00558A0D                 push    ecx\n.text:00558A0E                 minss   xmm0, xmm2\n.text:00558A12                 movss   [esp+4+var_4], xmm0\n.text:00558A17                 call    dword ptr [eax+144h]\n.text:00558A1D\n.text:00558A1D locret_558A1D:                          ; CODE XREF: sub_5589CB+A↑j\n.text:00558A1D                                         ; sub_5589CB+17↑j ...\n.text:00558A1D                 retn\n.text:00558A1D sub_5589CB      endp\n.text:00558A1D\n.text:00558A1E ; ---------------------------------------------------------------------------\n.text:00558A1E                 mov     eax, [ecx+420h]\n.text:00558A24                 retn\n</code></pre>\n<p>here IDA pseudocode:</p>\n<pre><code>void *__usercall sub_5589CB@&lt;eax &gt; (float *a1@&lt;ecx &gt; , char a2@&lt;efl &gt; , float a3@&lt;xmm1 &gt; )\n</code></pre>\n<p>In the past I have hooked without problems other naked functions with a code like this:</p>\n<pre><code>__declspec(naked)  void *  HookFunction(float *a1 , char a2, float  a3)\n{\n    __asm\n    {\n\n        pushad // backup general purpose registers\n    }\n\n    MyExternalFunction();\n\n    __asm\n    {\n        popad // restore general purpose registers\n            \n        jmp AddressOfHookFunction\n    }\n\n}\n</code></pre>\n<p>but this time there are some CPU registers like \"xmm1\" that are not cover with pushad/popad and the result is that the function lose the values of the registry if I call \"MyExternalFunction\".</p>\n<p>There is a way to backup/restore efl and xmm1 registers ?</p>\n<p>Thanks !</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "326",
    "tags": [
        "c++",
        "function-hooking",
        "assembly"
    ],
    "user": "user3449922",
    "time": "Dec 15, 2020 at 12:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no instruction for pushing xmm registers, but you can do as follow:</p>\n<pre><code>__asm\n{\n    sub     esp, 16\n    movdqu  [esp], xmm0\n    sub     esp, 16\n    movdqu  [esp], xmm1\n\n    pushad\n}\n\nMyExternalFunction();\n\n__asm\n{\n    popad\n\n    movdqu  xmm1, [esp]\n    add     esp, 16\n    movdqu  xmm0, [esp]\n    add     esp, 16\n\n    jmp AddressOfHookFunction\n}\n</code></pre>\n</div>",
            "votes": "3",
            "user": "macro_controller",
            "time": "Dec 15, 2020 at 14:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3449922",
                    "text": "<span class=\"comment-copy\">thank you for your code. Unfortunatenly I get this error: C2094 (dqword label 'identifier' was undefined) at line: movdqu  dqword[esp], xmm0</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">I made an edit, try this way</span>",
                    "time": null
                },
                {
                    "user": "user3449922",
                    "text": "<span class=\"comment-copy\">thank you work pefectly !! last think: I need to read the xmm1 value: ex: mycppvar = xmm1; how can I do it ?</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">double my_var;      __asm     {         movdqu my_var, xmm0     }</span>",
                    "time": null
                }
            ]
        }
    ]
}