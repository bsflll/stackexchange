{
    "title": "Why IDA can't find the function named by windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/19890/why-ida-cant-find-the-function-named-by-windbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is definitely a beginner question,I'm doing static and dynamic analysis on certain dll file and the WinDbg give me call stack like</p>\n<pre><code>SERVER+0x78123\n</code></pre>\n<p>When I return back to IDA to see the code inside the function by getting the 0x78123+10001000 \"which is dll start address\" from IDA top list I can't see the function. Appreciating your help</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "291",
    "tags": [
        "ida",
        "windbg"
    ],
    "user": "AhmedKamal",
    "time": "Nov 15, 2018 at 3:34",
    "comments": [
        {
            "user": "pudi",
            "text": "<span class=\"comment-copy\">Welcome! Can you provide the particular code snippet from WinDbg and IDA?</span>",
            "time": null
        },
        {
            "user": "AhmedKamal",
            "text": "<span class=\"comment-copy\">Hi Pudi! Thank you for your kind reply. I've not found any function started in the address of starting of IDA functions+0x78123. I don't know why and I've the same dll</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When you see a large offset in windbg it is usually suspect<br/>\nwindbg resolves offset based on the nearest symbol<br/>\nin most of the case where a large offset is seen symbols may not be properly available<br/>\nand windbg uses the nearest symbol which may not be correct    </p>\n<p>also optimized binaries have functions chunked but pdbs often have the unchunked offsets which windbg uses and may return improper large offsets </p>\n<p>you should use the address instead of symbol+offset  and do calculations with address instead of symbol+offset value </p>\n<p>for example  in the stack below notice the vc__filt+0x12f3  and the warning above the line </p>\n<p>the vc__filt+0x12f3 is the return address on the stack  which is resolved as  </p>\n<p>00 0012ff38 <strong>004012f3</strong> msvcrt!_controlfp  </p>\n<p>you should mostly use such resolved address instead of symbol+offset </p>\n<pre><code>0:000&gt; k\n # ChildEBP RetAddr  \n00 0012ff38 004012f3 msvcrt!_controlfp\nWARNING: Stack unwind information not available. Following frames may be wrong.\n01 0012ff88 76faed6c vc__filt+0x12f3\n02 0012ff94 77c537eb kernel32!BaseThreadInitThunk+0xe\n03 0012ffd4 77c537be ntdll!__RtlUserThreadStart+0x70\n04 0012ffec 00000000 ntdll!_RtlUserThreadStart+0x1b\n</code></pre>\n<p>in case you cant resolve manually you can ask windbg to override the local context and access the return address on each frame using the PseudoRegister @$ra</p>\n<p>see below the resolved return address for each frame </p>\n<pre><code>0:000&gt; .cxr\n\n0:000&gt; .frame /c /r 0 ; ? @$ra\n\n00 0012ff38 004012f3 msvcrt!_controlfp\n\nmsvcrt!_controlfp:\n778de1e1 8bff            mov     edi,edi\n\nEvaluate expression: 4199155 = 004012f3 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n0:000&gt; .frame /c /r 1 ; ? @$ra\n01 0012ff44 00401237 vc__filt+0x12f3\n\nvc__filt+0x12f3:\n004012f3 59              pop     ecx\nEvaluate expression: 4198967 = 00401237 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n0:000&gt; .frame /c /r 2 ; ? @$ra\n02 0012ff88 76faed6c vc__filt+0x1237\n\nvc__filt+0x1237:\n00401237 680c304000      push    offset vc__filt+0x300c (0040300c)\n\nEvaluate expression: 1996156268 = 76faed6c&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n0:000&gt; k\n  *** Stack trace for last set context - .thread/.cxr resets it\n # ChildEBP RetAddr  \nWARNING: Stack unwind information not available. Following frames may be wrong.\n02 0012ff88 76faed6c vc__filt+0x1237             &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; return address of last set context\n03 0012ff94 77c537eb kernel32!BaseThreadInitThunk+0xe\n04 0012ffd4 77c537be ntdll!__RtlUserThreadStart+0x70\n05 0012ffec 00000000 ntdll!_RtlUserThreadStart+0x1b\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Nov 15, 2018 at 21:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}