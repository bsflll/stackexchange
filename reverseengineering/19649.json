{
    "title": "How to search for Opcode 0xFF25 in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19649/how-to-search-for-opcode-0xff25-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to search for opcodes in IDA Pro like the following:</p>\n<pre><code>0xFF25\n</code></pre>\n<p>How can I do that?</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "7k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Michael",
    "time": "Oct 17, 2018 at 10:05",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">You're tagging this with IDAPython, so are you specifically looking for a scripted solution?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It depends on what do you exactly mean by opcode (not in all possible targets it starts with the start of the instruction, and it can be placed weirdly enough in it). Sometimes, however, simple binary searching (Search--&gt;Sequence of bytes, or <kbd>Alt B</kbd>) is enough, and if you check \"Find all occurrences\" in the search  dialog IDA will open a window with, correspondingly, all occurrences. You also can try text search with the command mnemonics, such as searching for \"<code>ADD</code>\" in the main IDA window in same manner.</p>\n<p>If this is not enough, you'll probably need to write IDC or IDAPython script that does one of the following things:</p>\n<ul>\n<li>Passes over all the instructions (for example with <code>idautils.Heads()</code> IDAPython function) and outputs everything where the command mnemonics fits to what you need (<code>idc.print_insn_mnem</code> DAPython function)</li>\n<li>Passes over all the instructions (for example with <code>idautils.Heads()</code> IDAPython function), extracts the opcode from the instruction data (<code>idc.Byte(address)</code> IDAPython function ) in the mode and order you need and checks if it fits.</li>\n</ul>\n</div>",
            "votes": "6",
            "user": "w s",
            "time": "Oct 17, 2018 at 10:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_search-module.html#find_binary\" rel=\"nofollow noreferrer\">ida_search.find_binary</a>\nI suppose you're going to search for JMP instructions like:</p>\n<pre><code>jmp     ds:__imp__DebugBreak@0\n</code></pre>\n<p>Then ubinstr argument is a string like \"FF 25\", otherwise if you search for bytes 25 FF - specify \"FF25\". Space is needed to deal with byte order in the search string.</p>\n</div>",
            "votes": "2",
            "user": "Anton Kukoba",
            "time": "Oct 17, 2018 at 12:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think the best way for that is under MENU:</p>\n<p><em>Search &gt; Sequence of bytes</em></p>\n<p>=== <strong>BE CAUTION:</strong> ==</p>\n<p>Although <em>\"Search &gt; Text\"</em> option seems works, according Anton Kukoba, it seems not TRUE for every instruction.</p>\n<p>When I analysed an ELF file, searching for instruction <strong>\"endbr64\"</strong> , I figure out that ALL patterns for that instruction inside \"PLT\" section were missed.</p>\n<p>Only when I used <em>\"Search &gt; Sequence of bytes\"</em>, gave it opcodes \"f3 0f 1e fa\" it worked.</p>\n</div>",
            "votes": "0",
            "user": "becauro",
            "time": "Sep 2, 2024 at 4:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}