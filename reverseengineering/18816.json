{
    "title": "What is the format of this binary file?",
    "link": "https://reverseengineering.stackexchange.com/questions/18816/what-is-the-format-of-this-binary-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a binary file that I found on a 3D printer that is used to program a dsPIC30F5011 microcontroller. It is responsible for some basic data encryption. The only problem is, I am not sure how this file is formatted.</p>\n<p>It is raw binary, not like an Intel HEX file or anything. Here's a few sample lines:</p>\n<hr/>\n<p>0C4230050037600010E0801802003B21</p>\n<p>0C424001F02C1A00370004BE6011B819</p>\n<p>0C42506B09200982CF0200390882CFE0</p>\n<p>0C42600441B06942520E003208003BDD</p>\n<hr/>\n<p>For the first line:</p>\n<p>So the first byte (0x0C) is the length of the data.</p>\n<p>The next two bytes (0x4230) is the address (I believe it is twice the address, I'll explain that further down)</p>\n<p>Then is the data (length 0x0C in this case)  - 050037600010E0801802003Bh</p>\n<p>The last two bytes are a Checksum  - 2's complement of the lower byte of the sum of all bytes (length through end of data). </p>\n<hr/>\n<p>The reason I believe the address listed is twice the address desired is in the <a href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/70102J.pdf\" rel=\"nofollow noreferrer\">Programming Manual</a> the Intel Hex format says:</p>\n<blockquote>\n<p>â€¢ AAAA - is a four-digit hexadecimal address\n  representing the starting address of the data\n  record. Format is high byte first followed by low\n  byte. The address is doubled because this format\n  only supports 8-bits. Divide the value by two to\n  find the real device address.</p>\n</blockquote>\n<p>In fact, this format closely matches the Intel HEX format, although it isn't in ASCII format, nor does it use valid record types.</p>\n<p>In addition, the last few commands in the file reference address 0x0008 - 0x01FF. Dividing this by 2 gives us 0x0004 - 0x00FF, which according to the <a href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/70116J.pdf\" rel=\"nofollow noreferrer\">datasheet</a> is the interrupt vector locations.</p>\n<p>I have been poking at this for ages, and I can't seem to understand how this is actually translated to the MCU. For one thing, the addresses all increment in 16 byte increments, despite the fact that there is only 12 bytes of data in that line. </p>\n<p>If anyone can make any sense out of this, I feel like I am at wit's end on this one.</p>\n<p><a href=\"https://drive.google.com/file/d/1WJcVrc11UX7Ps2JL9Y1RhsXNqdPd-4TJ/view?usp=sharing\" rel=\"nofollow noreferrer\">Here's the full file (42 KB)</a></p>\n<p>And here's some more hex if you don't feel like downloading the file:</p>\n<pre><code>0C4210889FBE8A9FBE0105780100E077\n0C422004003508003C0000E0200032E3\n0C4230050037600010E0801802003B21\n0C424001F02C1A00370004BE6011B819\n0C42506B09200982CF0200390882CFE0\n0C42600441B06942520E003208003BDD\n0C42708281716101648904D10884D34B\n0C42808B05E80442E8F9FF3A0500371E\n0C429008044489844C8B05E90442E9D1\n0C42A0FBFF3A1B01070AF0A701F0A089\n0C42B04F05BE4F04BE000006889FBEF4\n0C42C08A9FBE8C1F783801073F013335\n0C42D003866C6450E12E00326420E193\n0C42E03300326150E12F00326120E118\n0C42F0310032858555EB07B009002035\n0C430008042005003708044489844CA0\n0C43100A003106034387834B00015371\n0C432081815BF8FF330203BE0800A09F\n0C433008044489844CF6FF39C639DDCE\n0C43408301730100321300208904D1B6\n0C43500884D30998A30500320800A7D8\n0C43600300A08904D10884D38B05E879\n0C43708904D10884D30001EB0281D243\n0C4380E4000701F0A10CF0A701F0A080\n0C43901701376420E11901320801BE5A\n0C43A00200BEF7FF376120E11401327B\n0C43B06000B8F3FF3700002001F82780\n0C43C0F0FF3704002010013703F0A2CA\n0C43D0889FBE8A9FBE8C1F78F30007F8\n0C43E0FA00336450E14F00326420E129\n0C43F052003203826C07003B0905D02C\n0C44000306D0820F540C065D02003948\n0C44100200328901780306788582558D\n0C442004003D0003FD8103FD8502EA5D\n0C44308B8542840F7202003B6000107C\n0C4440E080186011B80005EB7A28E15C\n0C44500A0039060078C75DDDF707B2EE\n0C44608780752D00378281710A017879\n0C44706105608180D10080D38502E9E5\n0C4480F9FF3B06044087844802003B23\n0C4490600414E0841C0988A3070032BB\n0C44A08A81718281716101648904D1FC\n0C44B00884D38B05E81700370978A3B7\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "420",
    "tags": [
        "binary-analysis",
        "firmware",
        "memory",
        "pic"
    ],
    "user": "user3397540",
    "time": "Jul 16, 2018 at 21:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As you found, the binary format is similar to the Intelhex format, even if that is text.</p>\n<p>One important thing to note is that the program space is addressed in 16 bit words, but stores only 24 bits of resulting 32 bit words. The topmost byte is a \"phantom byte\" as the documentation calls it. When read, it is always zero.</p>\n<p>All \"records\" are 16 bytes long.</p>\n<ul>\n<li>The first byte is the length of the data.</li>\n<li>The next two bytes in big-endian are the byte address of the data. The actual address in the program space is only the half of this value, as each program space word is 16 bits wide.</li>\n<li>There is no record type marker.</li>\n<li>The actual data follow, as many as the first byte says. The values are in little-endian.  Since the program space stores only 24 bits, the phantom byte it is not included in the data.</li>\n<li>The last byte is the checksum. You can look at it as the two's complement of the sum of the other bytes. But you could as well add it to this sum and the resulting byte shall be zero.</li>\n</ul>\n<p>This is an example in details:</p>\n<pre class=\"lang-none prettyprint-override\"><code>0C4230050037600010E0801802003B21\n</code></pre>\n<ul>\n<li>The first byte is <code>0C</code>, meaning there are 12 data bytes.</li>\n<li>The address is <code>4230</code>, giving an address of 0x4230 / 2 = 0x2118.</li>\n<li>The data bytes are <code>050037600010E0801802003B</code>, resulting in 8 program space words: 0x0005, 0x37, 0x0060, 0x10, 0x80E0, 0x18, 0x0002, 0x3B. The instruction codes are 0x370005, 0x100060, 0x1880E0, 0x3B0002.</li>\n<li><code>21</code> is the checksum, and 0x0C + 0x42 + ... + 0x21 gives 0x300. Check.</li>\n</ul>\n<p>The linked complete file has few duplicate entries and some zero-data entries. Perhaps this comes from the build or conversion process.  However, it makes some sense.</p>\n<p>This is part of the vector table:</p>\n<div class=\"s-table-container\"><table class=\"s-table\">\n<thead>\n<tr>\n<th>Program flash address</th>\n<th>Address in file</th>\n<th>Data bytes</th>\n<th>Program space value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x0004</td>\n<td>0x0008</td>\n<td><code>00 04 00</code></td>\n<td>0x000400</td>\n<td>Reserved</td>\n</tr>\n<tr>\n<td>0x0006</td>\n<td>0x000c</td>\n<td><code>66 24 00</code></td>\n<td>0x002466</td>\n<td>Oscillator Fail Trap Vector</td>\n</tr>\n<tr>\n<td>0x0008</td>\n<td>0x0010</td>\n<td><code>90 24 00</code></td>\n<td>0x002490</td>\n<td>Address Error Trap Vector</td>\n</tr>\n<tr>\n<td>0x000a</td>\n<td>0x0014</td>\n<td><code>ba 24 00</code></td>\n<td>0x0024ba</td>\n<td>Stack Error Trap Vector</td>\n</tr>\n</tbody>\n</table></div>\n<p>For another plausibility check I disassembled (by hand using the <a href=\"https://ww1.microchip.com/downloads/en/DeviceDoc/70000157g.pdf\" rel=\"nofollow noreferrer\">Programmer's Reference Manual</a>, there can be errors) the oscillator fail trap interrupt:</p>\n<div class=\"s-table-container\"><table class=\"s-table\">\n<thead>\n<tr>\n<th>Program flash address</th>\n<th>Address in file</th>\n<th>Data bytes</th>\n<th>Program space value</th>\n<th>Assembly code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x2466</td>\n<td>0x48cc</td>\n<td><code>36 00 f8</code></td>\n<td>0xf80036</td>\n<td>push RCOUNT</td>\n</tr>\n<tr>\n<td>0x2468</td>\n<td>0x48d0</td>\n<td><code>80 9f be</code></td>\n<td>0xbe9f80</td>\n<td>push.d w0</td>\n</tr>\n<tr>\n<td>0x246a</td>\n<td>0x48d4</td>\n<td><code>82 9f be</code></td>\n<td>0xbe9f82</td>\n<td>push.d w2</td>\n</tr>\n<tr>\n<td>0x246c</td>\n<td>0x48d8</td>\n<td><code>84 9f be</code></td>\n<td>0xbe9f84</td>\n<td>push.d w4</td>\n</tr>\n<tr>\n<td>0x246e</td>\n<td>0x48dc</td>\n<td><code>86 9f be</code></td>\n<td>0xbe9f86</td>\n<td>push.d w6</td>\n</tr>\n<tr>\n<td>0x2470</td>\n<td>0x48e0</td>\n<td><code>34 00 f8</code></td>\n<td>0xf80034</td>\n<td>push PSVPAG</td>\n</tr>\n<tr>\n<td>0x2472</td>\n<td>0x48e4</td>\n<td><code>00 c0 b3</code></td>\n<td>0xb3c000</td>\n<td>mov.b #0, w0</td>\n</tr>\n<tr>\n<td>0x2474</td>\n<td>0x48e8</td>\n<td><code>a0 01 88</code></td>\n<td>0x8801a0</td>\n<td>mov w0, PSVPAG</td>\n</tr>\n<tr>\n<td>0x2476</td>\n<td>0x48ec</td>\n<td><code>00 00 fa</code></td>\n<td>0xfa0000</td>\n<td>lnk #0</td>\n</tr>\n<tr>\n<td>0x2478</td>\n<td>0x48f0</td>\n<td><code>40 a7 a8</code></td>\n<td>0xa8a740</td>\n<td>bset 0x0740, #10</td>\n</tr>\n<tr>\n<td>0x247a</td>\n<td>0x48f4</td>\n<td><code>80 20 a9</code></td>\n<td>0xa92080</td>\n<td>bclr NSTDIS, #4</td>\n</tr>\n<tr>\n<td>0x247c</td>\n<td>0x48f8</td>\n<td><code>e0 02 20</code></td>\n<td>0x2002e0</td>\n<td>mov #0x002e, w0</td>\n</tr>\n<tr>\n<td>0x247e</td>\n<td>0x48fc</td>\n<td><code>17 01 07</code></td>\n<td>0x070117</td>\n<td>rcall 0x26ae</td>\n</tr>\n<tr>\n<td>0x2480</td>\n<td>0x4900</td>\n<td><code>00 80 fa</code></td>\n<td>0xfa8000</td>\n<td>ulnk</td>\n</tr>\n<tr>\n<td>0x2482</td>\n<td>0x4904</td>\n<td><code>34 00 f9</code></td>\n<td>0xf90034</td>\n<td>pop PSVPAG</td>\n</tr>\n<tr>\n<td>0x2484</td>\n<td>0x4908</td>\n<td><code>4f 03 be</code></td>\n<td>0xbe034f</td>\n<td>pop.d w6</td>\n</tr>\n<tr>\n<td>0x2486</td>\n<td>0x490c</td>\n<td><code>4f 02 be</code></td>\n<td>0xbe024f</td>\n<td>pop.d w4</td>\n</tr>\n<tr>\n<td>0x2488</td>\n<td>0x4910</td>\n<td><code>4f 01 be</code></td>\n<td>0xbe014f</td>\n<td>pop.d w2</td>\n</tr>\n<tr>\n<td>0x248a</td>\n<td>0x4914</td>\n<td><code>4f 00 be</code></td>\n<td>0xbe004f</td>\n<td>pop.d w0</td>\n</tr>\n<tr>\n<td>0x248c</td>\n<td>0x4918</td>\n<td><code>36 00 f9</code></td>\n<td>0xf90036</td>\n<td>pop RCOUNT</td>\n</tr>\n<tr>\n<td>0x248e</td>\n<td>0x491c</td>\n<td><code>00 40 06</code></td>\n<td>0x064000</td>\n<td>retfie</td>\n</tr>\n</tbody>\n</table></div>\n</div>",
            "votes": "1",
            "user": "the busybee",
            "time": "Mar 5 at 13:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}