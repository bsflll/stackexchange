{
    "title": "Understanding FCOMP instruction and extracted value from address operand",
    "link": "https://reverseengineering.stackexchange.com/questions/13338/understanding-fcomp-instruction-and-extracted-value-from-address-operand",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse engineer an application made in vb6. At a certain point it compares an input number to a constant number, my goal here is to extract that number, now i found where the comparison is taken place:</p>\n<pre><code>FCOMP QWORD PTR DS:[402CB0]\n</code></pre>\n<p>Now I understand that FCOMP <code>Compares the contents of register ST(0) and source value</code>. I don't know if I got this right, but from what I've read <code>DS:[402CB0]</code> is pointer to an address that's holding the <code>source</code> value, but using OllyDbg, and while navigating to that address (Ctrl + g), i found out that the value is <code>DB 00</code> which is not correct\n<a href=\"https://i.sstatic.net/asFVN.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/asFVN.png\"/></a></p>\n<p>so my question here is how can I find the real value that is being compared?\nand is it possible to make the <code>FCOMP</code> compare a constant to a pointer of an integer?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "447",
    "tags": [
        "disassembly",
        "assembly",
        "ollydbg",
        "float"
    ],
    "user": "Ouerghi Yassine",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Viktor",
            "text": "<span class=\"comment-copy\">Use the memory view window. Read up on memory and hardware break points.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>FCOMP</code> Compares the <code>fpu register ST0</code> with a <code>constant</code><br/>\nthe <code>constant</code> is a QWORD (Meaning DOUBLE , FLOAT , Etc 8+ bytes wide )   </p>\n<p>ollydbg  can show both the <code>ST0 register</code> and <code>decipher the contents of the CONSTANT</code> . </p>\n<p>in your case if shows <code>DB 00</code> because the constant is <code>probably 0.0</code> .    </p>\n<p>and you <code>have not set the dump view mode</code> to appropriate format    </p>\n<p>the view mode you are looking at is <code>Disassembly (DB is Define Byte 00 is well 0x00 )</code> .</p>\n<p>you may need to change the view mode  </p>\n<p>first <code>select the dump window</code> then use <code>ctrl+g</code> and then right click <code>select FLOAT</code> . </p>\n<p>ollydbg also has a small window between disassembly pane and dump pane \nwhich can show both the source and destination contents   </p>\n<p>in the screen shot below \nyou can observe how <code>783ef8 is DB 00 in Disassembly window and FLOAT 0.0 in Dump Pane</code> . \nyou can observe how the <code>contents of register pane shows both the src and dest</code> contents\nyou can observe how <code>fpu register window</code> shows the <code>ST0</code> contents<a href=\"https://i.sstatic.net/VP4AX.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VP4AX.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 22, 2016 at 8:17",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Understanding the assembly line</strong></p>\n<p><code>FCOMP QWORD PTR DS:[402CB0]</code></p>\n<p>It checks for a qword sized operand. That is 8 bytes while your picture only shows about 3.</p>\n<p>This comparison is also a floating point comparison, which is a bit more complex than an integer comparison.</p>\n<p>It sets three control registers (<code>C0</code>, <code>C2</code>, <code>C3</code>) depending on the outcome and raises an exception if either values is <code>NaN</code> (could this be some kind of Anti debugging related exception?)</p>\n<p><strong>Getting to the actual content at the time of comparison</strong></p>\n<p>Although you can access the address now, it is not guaranteed the value you're looking at is the value that will end up being compared to your float.</p>\n<p>You should make sure the debugger reaches that address when you inspect it. This can usually be done quite easily by setting a breakpoint (either software - OllyDbgv1's default or hardware - OllyDbgv2's default). Either right click on that assembly line -&gt; Breakpoint -&gt; Toggle or simply hit <kbd>F2</kbd> while it's highlighted.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Aug 22, 2016 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}