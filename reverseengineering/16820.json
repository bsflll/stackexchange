{
    "title": "where the variable and it's size are stored inside windows executabe file?",
    "link": "https://reverseengineering.stackexchange.com/questions/16820/where-the-variable-and-its-size-are-stored-inside-windows-executabe-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://i.sstatic.net/EiHMp.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/EiHMp.png\"/></a></p>\n<p>i am beginner in reverse engineering. i want to understand where the variables and it's size are stored inside an windows executable file.  <br/></p>\n<p>somehow i can able to find the values of variables i declared inside a c program. <br/></p>\n<p>as you can see in 00402000  the <b>bar</b> variable's value is stored.<br/>\nbut i can't find where the variable name \"bar\" and it's size is stored.<br/><br/>In data section values only get stored. In which section i can find variable names and it's sizes? <br/>\nthen i have another doubt as you can see in the picture there is some address like  00402000. is it the address of a byte which exist in harddrive?<br/>\nlike RAM , HardDisk also an has address for each byte?</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "316",
    "tags": [
        "ida",
        "assembly",
        "x86",
        "pe"
    ],
    "user": "Naveen prakash",
    "time": "Nov 23, 2017 at 1:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>In data section values only get stored.</p>\n</blockquote>\n<p>Yes, that is how it works. Information about variables such as name, size and type are high-level language concepts. Such information is lost when code written in a high-level language is compiled into machine code. This is part of the reason why reverse engineering binary executables can be challenging.</p>\n<p>Read the answers to this question: <a href=\"https://reverseengineering.stackexchange.com/questions/16811/how-data-types-and-variables-are-converted-to-machine-code\">how data types and variables are converted to machine code?</a></p>\n<p>The bit width of a value (half-word, word, double word, etc) can sometimes be inferred from the read/write operations performed on it; if it is written from memory into a register, you can look at the size of the register. <code>eax</code> is 32 bit, <code>al</code> is 16 bits, etc.</p>\n<p>To locate statically allocated variables, disassemble the function(s) in which they are accessed. Pointers (memory addresses) to these variables will be operands in instructions that access these values.</p>\n<p>In your case this means disassembling <code>main()</code>. Since nothing is done with the variables in <code>main()</code> other than reassignment, it is possible that the compiler did not generate any code referencing these variables (dead code elimination).</p>\n<blockquote>\n<p>then i have another doubt as you can see in the picture there is some address like 00402000. is it the address of a byte which exist in harddrive?</p>\n</blockquote>\n<p>This is an address in virtual memory. Read more about this here: </p>\n<p>Linux example: <a href=\"http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/\" rel=\"nofollow noreferrer\">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/</a></p>\n<p><a href=\"https://stackoverflow.com/questions/2170843/va-virtual-address-rva-relative-virtual-address\">https://stackoverflow.com/questions/2170843/va-virtual-address-rva-relative-virtual-address</a></p>\n</div>",
            "votes": "2",
            "user": "julian",
            "time": "Nov 23, 2017 at 3:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}