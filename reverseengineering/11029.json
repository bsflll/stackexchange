{
    "title": "Problem to understand execution of payload (shellcode)",
    "link": "https://reverseengineering.stackexchange.com/questions/11029/problem-to-understand-execution-of-payload-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know that there are lot of (good) tutorials regarding this topic, but after reading them, I really cant follow their thoughts (e.g.: <a href=\"http://phrack.org/issues/49/14.html\" rel=\"nofollow\">Smashing The Stack For Fun And Profit</a>):</p>\n<blockquote>\n<p>The problem is that we don't know where in the memory space of the \n  program we are trying to exploit the code (and the string that follows\n  it) will be placed.  One way around it is to use a JMP, and a CALL \n  instruction.  The JMP and CALL instructions can use IP relative\n  addressing,  which means we can jump to an offset from the current IP\n  without needing  to know the exact address of where in memory we want\n  to jump to.  If we  place a CALL instruction right before the\n  \"/bin/sh\" string, and a JMP  instruction to it, the strings address\n  will be pushed onto the stack as  the return address when CALL is\n  executed.  All we need then is to copy the  return address into a\n  register.  The CALL instruction can simply call the  start of our code\n  above.</p>\n</blockquote>\n<p>Given the following <em>\"crackme\"</em> (<em>this example is used as demo, you can skip it and read the question below)</em>:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nvoid funktion(char *args) {\n    char buffer[250];\n    strcpy(buff, args);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc &gt; 1)\n        funktion(argv[1]);\n    else\n        printf(\"Kein Argument!\\n\");\n\n    return 0;\n}\n</code></pre>\n<hr/>\n<p><strong>Target:</strong> I want to execute a very basic shellcode within that process.</p>\n<p><strong>Vulnerability:</strong> Classical potential Stack-Bufferoverflow, due to misuse of <code>strcpy(...)</code>. </p>\n<p><strong>Required Information:</strong></p>\n<pre><code>(gdb) info frame 0\nStack frame at 0xffffd300:\n eip = 0x8048449 in funktion (stack_bof2.c:7); saved eip = 0x8048474\n called by frame at 0xffffd330\n source language c.\n Arglist at 0xffffd2f8, args: args=0xffffd575 \"A\"\n Locals at 0xffffd2f8, Previous frame's sp is 0xffffd300\n Saved registers:\n  ebp at 0xffffd2f8, eip at 0xffffd2fc\n(gdb) print/x &amp;buffer\n$1 = 0xffffd1f6\n</code></pre>\n<ul>\n<li>The <code>buffer</code> starts at <code>0xffffd1f6</code>.</li>\n<li>The <code>R</code>eturn <code>I</code>instruction <code>P</code>ointer (<code>RIP</code>) is located at <code>0xffffd2fc</code>.</li>\n<li>The offset of the <code>RIP</code> from the <code>buffer</code>'s first element is <code>262 bytes</code>.</li>\n</ul>\n<p><strong>Methodical Approach:</strong></p>\n<ol>\n<li>The <code>RIP</code> has to be overwritten with <code>buffer</code>s first element's address <code>0xffffd1f6</code>.</li>\n<li>The <em>shellcode</em> has to be placed in the <code>buffer</code> location and should not exceed a length of <code>261 bytes</code>, because from the <code>262th byte</code> on, the <code>RIP</code> is being overwritten.</li>\n</ol>\n<p><strong>Question:</strong> I don't know why all sources state <em>we don't know where in the memory space of the program we are trying to exploit the code</em>. I mean, I know it. It's obviously the <code>buffer</code>, where the shellcode is placed in. So the <code>RIP</code> has to point to it. No <code>JMP</code>, <code>CALL</code> and <em>relative addressing</em>...</p>\n<p><strong><a href=\"https://drive.google.com/file/d/0BxV4F9km7MRVU0lQUjVfcHJOSEE/view?usp=sharing\" rel=\"nofollow\">Downloadlink</a> of the <em>crackme</em>.</strong></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "639",
    "tags": [
        "c++",
        "c",
        "exploit",
        "gcc"
    ],
    "user": "JDoens",
    "time": "Oct 5, 2015 at 17:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reason that we don't know the address, is that with <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow\">ASLR</a> the program can be loaded at a different address each time the program is run.  Thus, if you reboot your os, the program may get loaded at a different <a href=\"https://en.wikipedia.org/wiki/Virtual_address_space\" rel=\"nofollow\">Virtual Address</a>.  </p>\n</div>",
            "votes": "-2",
            "user": "Milhous",
            "time": "Oct 5, 2015 at 18:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No, that's <i>not</i> the reason in the 1996 article Smashing The Stack For Fun And Profit. The reason we don't know \"the exact address of where in memory we want to jump to\" is because the shellcode will be on the stack or heap, whose address is often not predictable.</span>",
                    "time": null
                },
                {
                    "user": "JDoens",
                    "text": "<span class=\"comment-copy\">@JasonGeffner <i>\"The shellcode will be on the stack or heap, whose address is often not predictable.\"</i> What do you mean with this, why is it not predictable  (by disabled ASLR)? [In this ](<a href=\"http://reverseengineering.stackexchange.com/questions/11020/writing-an-exploit-for-sample-application\" title=\"writing an exploit for sample application\">reverseengineering.stackexchange.com/questions/11020/â€¦</a>) former question, the exploit worked by overwriting the <code>RIP</code>, and in my book the <code>RIP</code>s address is used, too. So with disabled ASLR the stack should look exactly the same each time I execute the program, or?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\"><i>\"So with disabled ASLR the stack should look exactly the same each time I execute the program, or?\"</i> - No, the stack's base may be located at a different address on each execution, even with ASLR disabled.</span>",
                    "time": null
                },
                {
                    "user": "Milhous",
                    "text": "<span class=\"comment-copy\">If you read the article about ASLR, there are several bits of entropy.  This includes both the address of the stack AND the base address of the executable.  IF ASLR is enabled, then the OS will randomize both the stack and the base address.  Some OS's (Linux and Windows) re-use the same memory on subsequent runs of the program.  But from the outside you don't know what where the stack, the heap or the program is loaded at.</span>",
                    "time": null
                }
            ]
        }
    ]
}