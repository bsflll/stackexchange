{
    "title": "Jump in the middle trick",
    "link": "https://reverseengineering.stackexchange.com/questions/20587/jump-in-the-middle-trick",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a program that \"hides\" some instructions using the jump in the middle trick. This trick is a jump to a middle of an instruction, whereas the real address actually contains another opcode.</p>\n<p>Example:</p>\n<pre><code> CS:0100 E421           IN     AL,21\n CS:0102 B0FF           MOV    AL,FF\n CS:0104 EB02           JMP    0108\n CS:0106 C606E62100     MOV    Byte Ptr [21E6],00\n CS:010B CD20           INT    20\n</code></pre>\n<p>So I have some questions related to this: Can this trick hide imports? hide x references to functions or strings? Are there any way to fix it? (other than stepping through  the code)\nEdit: I'm using x32dbg</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "debugging",
        "obfuscation",
        "anti-debugging"
    ],
    "user": "Francisco Linan",
    "time": "Feb 10, 2019 at 19:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, this is indeed possible to employ consistently throughout the entire assembly listing, making manual analysis or adjustments a pain.</p>\n<p>Disassemblers are often divided into two categories:</p>\n<ol>\n<li><strong>linear sweep disassembly</strong> - Linear sweep disassembly is more prone to this type of anti-disassembly, as instructions are analyzed linearly throughout the assembly code, top to bottom, which makes jumping over a single byte screw up the remaining disassembly process.</li>\n<li><strong>recursive disassembly</strong> - Recursive disassembly if often better (although, not immune) at managing such intentional tricks as well as unintentional complex assembly combinations. Generally speaking Recursive disassemblers are considered to yield better results but be more difficult to implement..</li>\n</ol>\n<p>If this is something you're encountering often with a given sample, you may want to consider a different disassembly engine, perhaps one with emphasis on disassembly, such as IDA, as opposed to debugging oriented tool like x64dbg.</p>\n</div>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Feb 11, 2019 at 13:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Bytes are just bytes so it's only how you interpret them makes what they are - so yes, you could potentially hide function call or a string is such way.</p>\n<p>How you would deal with that in x32dbg. Click on the opcode that you want to fix, and right click and select Binary -&gt; Edit (or press <kbd>CTRL+E</kbd>). You would see a dialog where the bytes of the opcode will be shown. You simple replay the bogus bytes with <code>nop</code> (<code>0x90</code>).</p>\n</div>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Feb 10, 2019 at 19:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}