{
    "title": "Instruction counting anti-debug",
    "link": "https://reverseengineering.stackexchange.com/questions/19233/instruction-counting-anti-debug",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently came across this anti-debug technique being used in the wild. </p>\n<p>In The <em>Ultimate Anti-Debugging Reference</em>, the author wrote in the \"Instruction Counting\" section</p>\n<blockquote>\n<p>A debugger will interfere with the\n  single-stepping, resulting in a different count of\n  instructions compared to when a debugger is not\n  present.</p>\n</blockquote>\n<p>From experimenting with this technique a bit, it seems that when you set a hardware breakpoint in x64dbg, the debug registers of <em>all threads</em> are not only set, but also frozen - so that for example - if the program calls SetThreadContext to change these registers, x64dbg seems to change them back.</p>\n<p>Given how x64dbg works, and that the technique relies on these debug registers, isn't this technique limited to detecting the presence or modification of hardware breakpoints?</p>\n</div>",
    "votes": "5",
    "answers": 0,
    "views": "401",
    "tags": [
        "debuggers",
        "anti-debugging"
    ],
    "user": "P. Private",
    "time": "Sep 3, 2018 at 0:44",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">About x64dbg, the debug registers aren’t written back if the debuggee modifies them. Probably the GUI wasn’t refreshed or something.</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">Detecting the presence of the breakpoints is more obvious than counting the instructions, and counting the instructions can be used to introduce side-effects if the count is wrong.</span>",
            "time": null
        }
    ],
    "answers_data": []
}