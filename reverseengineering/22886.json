{
    "title": "How to Insert Call to Already Imported Function in amd64 Windows DLL using IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/22886/how-to-insert-call-to-already-imported-function-in-amd64-windows-dll-using-ida-p",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to patch a function in 64-bit Windows DLL to load data I have inserted into the resource table of the DLL. I want to insert code something like this:</p>\n<pre><code>mov     r8d, 0Ah        ; lpType\nmov     edx, 0h         ; lpName\nxor     ecx, ecx        ; hModule\ncall    cs:FindResourceW\nmov     [rsp+148h+var_B8], rax   ; using existing var_B8 to store hResInfo\nmov     rdx, [rsp+148h+var_B8] ; hResInfo\nxor     ecx, ecx        ; hModule\ncall    cs:LoadResource\nmov     [rsp+148h+var_B0], rax ; using existing var_B0 to store hResData\nmov     rcx, [rsp+148h+var_B0] ; hResData\ncall    cs:LockResource\n; data is now in location referenced by RAX register\n</code></pre>\n<p>The first problem seems to be the \"Assemble\" function in IDA pro doesn't handle 64-bit operands, so instructions such as mov r8d, 0Ah I have to assemble by hand and patch via bytes.</p>\n<p>However I am not sure how to easily generate the call cs:FindResourceW instruction. While the \"assembly\" feature generates code the disassembly shows it as gibberish, call instruction \"assembled\" at 00000272D0B83B4C:</p>\n<pre><code>.text:00000272D0B83B3F                 mov     r8d, 0Ah\n.text:00000272D0B83B45                 mov     edx, 0\n.text:00000272D0B83B4A                 xor     ecx, ecx\n.text:00000272D0B83B4A ; ---------------------------------------------------------------------------\n.text:00000272D0B83B4C                 db  9Ah ; š\n.text:00000272D0B83B4D                 db  40h ; @\n.text:00000272D0B83B4E                 db  94h ; ”\n.text:00000272D0B83B4F                 db 0BDh ; ½\n.text:00000272D0B83B50                 db 0D0h ; Ð\n.text:00000272D0B83B51                 db    6\n.text:00000272D0B83B52                 db    0\n.text:00000272D0B83B53                 db  89h ; ‰\n.text:00000272D0B83B54                 db  84h ; „\n.text:00000272D0B83B55 ; ---------------------------------------------------------------------------\n.text:00000272D0B83B55                 and     al, 89h\n.text:00000272D0B83B55 ; ---------------------------------------------------------------------------\n.text:00000272D0B83B57                 db  45h ; E\n.text:00000272D0B83B58                 db    8\n</code></pre>\n<p>To currently assembly I am taking location from import table:</p>\n<pre><code>.idata:00000272D0BD9440 ; HRSRC __stdcall FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType)\n.idata:00000272D0BD9440                 extrn FindResourceW:qword\n</code></pre>\n<p>Subtracting location where I will insert my code, and subtract 6.</p>\n<pre><code>  272D0B83B4A (Code location)\n -272D0BD9440 (Import table location)\n -6\n===========\n00 05 58 F0\n</code></pre>\n<p>I am then patching with FF 15 followed by the result in reverse order such as inserting bytes:</p>\n<pre><code>FF 15 F0 58 05 00\n</code></pre>\n<p>This works but is time consuming, is there any better patching option for inserting call instructions quickly.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "418",
    "tags": [
        "ida",
        "patching",
        "amd64"
    ],
    "user": "chentiangemalc",
    "time": "Jan 2, 2020 at 5:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.keystone-engine.org/keypatch/\" rel=\"nofollow noreferrer\">Keypatch</a> is a plugin for IDA that uses keystone to assemble instructions for patching. It works much better than IDA's old built-in assembler, and it should be able to handle 64-bit operands.</p>\n</div>",
            "votes": "2",
            "user": "Avery3R",
            "time": "Jan 2, 2020 at 21:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "chentiangemalc",
                    "text": "<span class=\"comment-copy\">This is perfect but I’ll have to port it to IDA 7 SDK as they seem to only support 6 still. However still should be easier than compiling by hand...</span>",
                    "time": null
                },
                {
                    "user": "Avery3R",
                    "text": "<span class=\"comment-copy\">The website says only up to 6.95, but the github repo includes 7.0 <a href=\"https://github.com/keystone-engine/keypatch\" rel=\"nofollow noreferrer\">github.com/keystone-engine/keypatch</a> fwiw, it works fine for me on 7.2</span>",
                    "time": null
                }
            ]
        }
    ]
}