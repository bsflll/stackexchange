{
    "title": "What functions (in which modules) can be hooked by Frida to access unencrypted data of SSL connections in Java programs running under Windows?",
    "link": "https://reverseengineering.stackexchange.com/questions/19909/what-functions-in-which-modules-can-be-hooked-by-frida-to-access-unencrypted-d",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are gazillions of internet resources discussing how to use <code>Frida</code> to hook and otherwise mess around with SSL connections of Java programs running under Android, but seemingly (as far as my google-fu allows at least?) not a single one discussing how to do this same successfully for Java programs running under Windows (which I would really need to do!).</p>\n<p>Even the go-to <a href=\"https://github.com/google/ssl_logger\" rel=\"nofollow noreferrer\">ssl_logger</a> Frida-based Python script in the Google Github repository lacks support for Windows (without mentioning why), but rather only contains hooks for Linux and macOS, which makes me wonder even more - is this \"impossible\" (== very hard) on Windows, contrary to on most other platforms, and in that case why?</p>\n<p>If not, what would be the recommended way to do it with Frida?</p>\n<p>PS.\n<a href=\"https://docs.oracle.com/cd/A87860_01/doc/network.817/a85430/asoappf.htm\" rel=\"nofollow noreferrer\">This Oracle resource</a> hints of a DLL named \"njssl8.dll\" being used as a back-end for the Java SSL functionality on Windows, but <code>frida-trace</code> does not detect any modules containing the substring \"ssl\" at all when running with option <code>-I \"*ssl*\"</code> on my test target <a href=\"https://portswigger.net/burp/communitydownload\" rel=\"nofollow noreferrer\">Burp Suite Community Edition</a> (which I used because I had it handy and because it is very fitting for these kinds of tests).</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "java",
        "sniffing",
        "hooking",
        "frida"
    ],
    "user": "QuestionOverflow",
    "time": "Nov 18, 2018 at 0:52",
    "comments": [
        {
            "user": "Remko",
            "text": "<span class=\"comment-copy\">Fiddler is commonly used for intercepting http/https traffic (not java specific): <a href=\"https://www.telerik.com/fiddler\" rel=\"nofollow noreferrer\">telerik.com/fiddler</a></span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">A simple approach would be to just record the pre-master secrets and then use it to decrypt the data captured by Wireshark. See <a href=\"https://stackoverflow.com/a/62060488/150978\">stackoverflow.com/a/62060488/150978</a> for details on Java and pre-master secret extraction.</span>",
            "time": null
        },
        {
            "user": "ifexploit",
            "text": "<span class=\"comment-copy\">Unless you have a requirement to use Frida, you can go with Fiddler to intercept SSL traffic. I use it and it's perfect.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>That requires some research on your end.</p>\n<p>Find out what API functions (not Java level) are used on a system level to deal with SSL. I could imagine that the Java runtime on Windows uses the Internet API or WinHttp or something comparable, or brings its own SSL implementation (I couldn't find out what njssl is with a quick search).</p>\n<p>Assuming it's the Internet API, you'd be able to read unencrypted data by hooking <code>HttpSendRequest(Ex)[A/W]</code> for example, and the SSL stuff then is handled from there and finally it uses regular sockets but at this point the data is encrypted.</p>\n<p>I'd try to run the application, attach to the right Java runtime (I guess some java.exe will be running somewhere) and either look through loaded DLLs, or maybe put a breakpoint on standard low-level socket calls (<code>socket</code>, <code>send</code>, <code>recv</code>, <code>WSASend</code> etc.) and look at the call stack to maybe figure out what upper layers the call came from.</p>\n</div>",
            "votes": "2",
            "user": "Johann Aydinbas",
            "time": "Apr 18, 2019 at 23:30",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You have to make a windows driver that will proxy the data on the SSL port. windows filtering platform can do it with a callout driver. You have to use openssl to do all of the SSL handshake steps, and send encrypted data yourself to the destination.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/network/windows-filtering-platform-callout-drivers2\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/windows-hardware/drivers/network/windows-filtering-platform-callout-drivers2</a></p>\n<p>But you may can hook into the openssl functions.</p>\n</div>",
            "votes": "-2",
            "user": "DeyMac",
            "time": "Nov 18, 2018 at 8:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "QuestionOverflow",
                    "text": "<span class=\"comment-copy\">What you are mentioning as a side-note in your last sentence (\"but you may can hook into the openssl functions\") is actually what the entire question is about. Implementing some kind of Man-in-the-Middle-attack (either before or after the encrypted packet leaves the network interface) is only possible if server certificates are not validated by the client program, which is why the question rather was about hooking code BEFORE the encryption occurs to begin with. Thanks anyway though.</span>",
                    "time": null
                }
            ]
        }
    ]
}