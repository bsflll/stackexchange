{
    "title": "Examining memory without attaching to the process by using /proc/$PID/mem?",
    "link": "https://reverseengineering.stackexchange.com/questions/30512/examining-memory-without-attaching-to-the-process-by-using-proc-pid-mem",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a gap in my understanding and tooling. Now I would <em>prefer</em> to use Radare2, but will consider any answer. Let's use this program as an example.</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nstatic char world[] = \"world\";\n\nint main () {\n  pid_t pid = getpid();\n  printf(\"Hello %s!\\n\\tMy memory is at /proc/%d/mem\\n\", world, pid);\n  sleep(60*60); // 1hr \n  return 1;\n}\n</code></pre>\n<p>When that programs runs, I expect its layout be copied into memory. But in this case, there must be some computation in preparing the strings in printf to get get displayed in the terminal such that when that program is run before it sleeps I should be able to find this string in memory,</p>\n<pre><code>Hello world!\n    My memory is at /proc/1923288/mem\n</code></pre>\n<p>Normally, I could find that pretty easily by attaching a debugger to a process. But <strong>this question isn't about that.</strong> Is it possible to find that string without debugging by assembling the contents in time from memory at <code>/proc/1923288/mem</code>, without the need to ever attach to the process, or pause execution (even if it's not atomic)?</p>\n<hr/>\n<p>In case my example above is not clear, imagine an IRC client that stores the chat log in memory. How can I retrieve that log, or examine the memory of that process <strong>without</strong> attaching a debugger to it?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "358",
    "tags": [
        "debugging",
        "radare2",
        "linux",
        "memory"
    ],
    "user": "Evan Carroll",
    "time": "Jun 13, 2022 at 16:07",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">what does it mean \"by assembling the contents in time\"?</span>",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "<span class=\"comment-copy\">@PawełŁukasik as in, I know without stopping the process you'll have a live view of the memory and not a snapshot. So YMMV.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You no longer need to <code>ptrace()</code> a process to read its memory, as long as you own the target process.</p>\n<p>However, there is no computation to prepare the strings for <code>printf()</code>, the arguments are just pointers to somewhere in memory. When searching you'll find <code>world[]</code> is stored in a different segment than <code>Hello %s...</code>.</p>\n<pre><code>00402000-00403000 r--p 00002000 fd:03 15505885\nHello %s!\n    My memory is at /proc/%d/mem\n\n00404000-00405000 rw-p 00003000 fd:03 15505885\nworld\n</code></pre>\n<p>Using <code>readelf</code> to map segments to sections, these look like <code>.rodata</code> and <code>.dynamic</code> on my system when compiled with <code>gcc</code>, but may vary given a different system or compiler.</p>\n<p>So in summary, yes you can search the memory of your own processes, but beware that the arguments to <code>printf()</code> may not be in the same segments.</p>\n</div>",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jun 21, 2022 at 11:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>r2 can read/write memory to any process using /proc/pid/mem, it's actually the default way because it's much faster than using ptrace. But it does other attempts too in case that fails.</p>\n<p>You can see the <code>procpid</code> io plugin listed in <code>r2 -L</code> vailable and you can do:</p>\n<p><code>r2 procpid://$YOURFAVOURITEPID</code></p>\n</div>",
            "votes": "1",
            "user": "pancake",
            "time": "Jul 1, 2022 at 13:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}