{
    "title": "which is harder to reverse engineer? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/26131/which-is-harder-to-reverse-engineer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question is <a href=\"/help/closed-questions\">opinion-based</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it can be answered with facts and citations by <a href=\"/posts/26131/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2020-10-20 07:02:00Z\">4 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/26131/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm planning on writing a windows application, used everywhere in my home country. I will code it in C++, but my question is which would you consider better to use?</p>\n<ul>\n<li>win32api</li>\n<li>Visual C++</li>\n<li>MFC</li>\n</ul>\n<p>I'm asking this because I don't know if you heard about what will happen to Windows 10 and how it will change after the last updates, that's point #1, second I just want it to become a little bit harder to decompile, I know assembly and I've reverse-engineered a lot of programs over the last 5 years, but I just want something harder for that hacker in his father's basement, I don't want it to get cracked or reverse engineered in a day or two, but I know that at the end someone will do it.\nWhich framework (or should I say compiler with some extra features) would make it a little bit challenging?</p>\n<p>I'm fluent in all the languages mentioned above.</p>\n<p>I know that this Community is made for reverse engineering and so just focus on this part of my question, thank you for your time.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "661",
    "tags": [
        "c++",
        "winapi",
        "mfc"
    ],
    "user": "aliberro",
    "time": "4 years ago",
    "comments": [
        {
            "user": "bart1e",
            "text": "<span class=\"comment-copy\">Could you give some more details about your application? Do you want it to be hard to reverse engineer or just to decompile? How much difference would it make if it worked few times slower after obfuscation / virtualization? Do you want to prevent others from learning how it exactly works or from making modifications to it?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE! Why waste the effort? Put that effort into your tool, offer it at a decent price point and enjoy the bliss. Thing is, no matter which tool you choose (although I am not sure how any of the three bullet points are mutually exclusive to another) there will be someone acquainted with it. And if that someone has the inclination to crack your protection it will be done. You will typically spend disproportionately more time protecting than the other side takes removing the protection. That time is better spent improving your product.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If it's challenging or not depends entirely on what you do to make it challenging and the skill level of the attacker. For some it's already enough if you make the decompiler in some old leaked IDA version fail, others read the pure assembly and know exactly what's going on not needing the decompiler at all.</p>\n<p>The best way to prevent tampering is having license checks at several places that all have to be found in order to get it to work. Sign individual functions, check the signature somewhere else, have that signed aswell. Obfuscate RSA Keys or even better all strings if you decide to use them. Try to avoid a whole bunch of xor instructions at one place (if I see those I know that some crypto is going on there). Also you can include useless/bad assembler instructions that never get executed to confuse the Disassembler, also dead code that seems to be a license check might be a good way to keep someone busy (although a debugger will quickly show them it's never executed. Also there are obfuscators out there you can buy, they generally have even more experience in anti debugging and decompiling techniques.</p>\n<p>Choose whatever framework you're confident with, don't let license/intellectual property protection be an excuse for bad coding style because you're still inexperienced, especially if it's software you're planning to sell.</p>\n</div>",
            "votes": "1",
            "user": "Richi",
            "time": "Oct 18, 2020 at 4:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "aliberro",
                    "text": "<span class=\"comment-copy\">This is all good stuff, the project is similar to that of Coursera, but targeting my country. I just want to give people hard time when somebody is trying to decrypt the E-Books</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">However much you obfuscate secret keys, the gist is that a secret key that is on the customer's computer is no longer a secret key. So you are undermining your own efforts by doing that. A hardware dongle if properly used, or a remote service if properly used provide a far better protection but will also annoy your <i>customer</i>. Or let me rephrase: you don't trust your paying customers and so you hassle them with a protection scheme, trusting them to not abuse the secret keys you hand to them. Notice something?</span>",
                    "time": null
                }
            ]
        }
    ]
}