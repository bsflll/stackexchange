{
    "title": "Replace section inside ELF file",
    "link": "https://reverseengineering.stackexchange.com/questions/14607/replace-section-inside-elf-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible to replace a non-code section inside an ELF file? If so, then how? Is there something I would have to consider before simply replacing the bytes by some other bytes (of course nothing larger)? Maybe some hash or similar?</p>\n<p>Note that I'm not interested in modifying code, so the solutions presented in <a href=\"https://reverseengineering.stackexchange.com/questions/1843/what-are-the-available-libraries-to-statically-modify-elf-executables\">What are the available libraries to statically modify ELF executables?</a> is not what I'm looking for, also many solutions there aren't architecture-agnostic.</p>\n<p>(BTW, I would require this for a replacing the initrd/initramfs file system embedded into a kernel image [<code>vmlinux.64</code>] which is also an ELF file, see <a href=\"https://unix.stackexchange.com/q/342298/117599\">https://unix.stackexchange.com/q/342298/117599</a>. This question here is supposed to be more in general.)</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "file-format",
        "elf",
        "section"
    ],
    "user": "phk",
    "time": "Apr 13, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not aware of any ready-made tools for such task, but I suspect in most cases the good old <code>dd</code> will do the task of replacing the actual bytes in the file  (or maybe you can make <code>objcopy</code> work too). What can be more difficult is making the code work with the changed data. This depends on the nature of the data in question. For example:</p>\n<ol>\n<li><p>When replacing (patching) code (instructions), you need to be aware of possible relocations pointing into the address range you're replacing  (if the file is relocatable). The loader will apply the relocations without checking that they make sense and that will likely make your code work incorrectly or crash. Same issue applies to data which may be relocated (e.g. tables of pointers).</p></li>\n<li><p>Even if the data you're replacing is not affected by the loader, it might be used in other ways. For your initrd example, <a href=\"http://lxr.free-electrons.com/source/init/initramfs.c\" rel=\"noreferrer\">the code in the kernel</a> makes references to symbols like <code>__initramfs_start</code>, <code>__initramfs_end</code>, whose values may need to be updated to account for the new initrd size. How to do that depends on how the code is using those symbols: are they taken from the ELF symbol table or just embedded in the code (i.e. were resolved at link time)? In the latter case you'll need to find and patch those values in the binary, keeping in mind that they are probably virtual load-time addresses and not file offsets.</p></li>\n<li><p>In case the code is using the ELF sections, you will need to update the section headers to properly point to your data or adjust their size e(some hex editors allow you to edit fields of the ELF headers but in the worst case you'll need to do it manually by patching individual bytes).</p></li>\n</ol>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Feb 13, 2017 at 13:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}