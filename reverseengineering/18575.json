{
    "title": "Unable to use CreateRemoteThread in target process",
    "link": "https://reverseengineering.stackexchange.com/questions/18575/unable-to-use-createremotethread-in-target-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to get a debugger attached to a malware, but it seems to pick up whenever a new remote thread is created (which makes it so I can't use Scyllahide).</p>\n<p>Even if I suspend all threads, it does the following:\nWhen a new remote thread is created(<code>CreateRemoteThread</code> / <code>ZwCreateThread</code>) (internally calling <code>CreateThread</code> is ok) it patches a <code>0xC3(ret)</code> to the entry point. </p>\n<p>I tried suspending it on creation then resuming it later but as soon as it is resumed the entry point gets patched before it can execute.</p>\n<p>I've looked at hooks in PCHunter, there is no hooks in unnamed functions or thread related functions.</p>\n<p>IDA Pro isn't helping much, the process is obfuscated a lot.</p>\n<p>I don't know what should be the next step at this point, so I'm hoping someone can help me figure this out. </p>\n<p>It looks like a hook or a callback is set somewhere but I don't know of any callback that gets executed on thread creation(at least in usermode) and I can't seem to find any hook related to threads in windows dll's. </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "501",
    "tags": [
        "windows",
        "x86-64",
        "x64dbg",
        "thread"
    ],
    "user": "David",
    "time": "Jun 22, 2018 at 2:30",
    "comments": [
        {
            "user": "Anton Kukoba",
            "text": "<span class=\"comment-copy\">Why don't you use kernel mode debugger?</span>",
            "time": null
        },
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">You write \"Ida Pro isn't helping much..\". Do you get Ida attached or are you able to run under Ida?</span>",
            "time": null
        },
        {
            "user": "David",
            "text": "<span class=\"comment-copy\">Process is x64 so I can't attach IDA's debugger on it. Kernel mode debugger was also detected. Managed to modify an existing thread entry point to run another thread's entry point to get around this.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\"><a href=\"https://reverseengineering.stackexchange.com/questions/16835/exe-protection-by-tls-callback-trying-to-understand-the-behaviour\">tls callback</a> might help you.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The act of injecting a thread will trigger a call to any Thread Local Storage callbacks which the PE file might carry, even when all other threads are suspended.  Such a callback might be responsible for overwriting your thread code, since the callback has access to the important thread information such as its entry-point.</p>\n</div>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Jun 30, 2018 at 22:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I seem to recall there was a vulnerability in IDA some time ago connected to the TLS callbacks.</span>",
                    "time": null
                },
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">How would they access the entry point of the thread? The target is obfuscated and I can't seem to figure out much of their callback, also tried making a test program with a TLS callback, I can't seem to get the entry point with the args or GetThreadContext (Rcx is a negative value)</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the callback runs within the same process-space as the just-created thread.  Then it's just a matter of the callback calling NtQueryInformationThread to ask for the thread's entrypoint, then calling VirtualProtect(exec+write) on that address, and finally overwriting the entrypoint code with the RET.</span>",
                    "time": null
                }
            ]
        }
    ]
}