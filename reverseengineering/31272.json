{
    "title": "Reverse-engineering 24-bit to make the lock system recognize NFC cards as their own",
    "link": "https://reverseengineering.stackexchange.com/questions/31272/reverse-engineering-24-bit-to-make-the-lock-system-recognize-nfc-cards-as-their",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I own a lock system that uses SRI512 cards.\nMy supplier (manufacturer of the locks) sells the cards at a very expensive price, so I decided to buy them online.\nOnce they arrived, when I tried to write them, through the proprietary reader, the writer would not write on them, although it recognizes them.</p>\n<p>I did a dump of a blank card (given by the manufacturer) and noticed that in the fifth block there is a value, all the remaining card is blank. By changing the card the value of the block changes. Obviously trying to using that block from a working card doesn't work and that's why I think there is an algorithm that turns the UID of the card into these 24 bits (in this way, the system only allows cards distributed by the manufacturer).</p>\n<p>I decided to get more data by getting block 5 of every blank card I had, that's about 50.</p>\n<pre><code>D0021B6847E77BD3 -&gt; 01 2B 3D A9\nD0021B6847E77D68 -&gt; 01 EB AA 3D\nD0021B6847E78738 -&gt; 01 B5 5D 18\nD0021B6847E789C0 -&gt; 01 35 CA 34\nD0021B6847EA2AE3 -&gt; 01 87 27 4B\nD0021B6847EAB92C -&gt; 01 B3 4A 2D\nD0021B6847EABDAA -&gt; 01 96 57 11\nD0021B6847EAC34D -&gt; 01 BC B3 5C\nD0021B6847EAC5F6 -&gt; 01 BB C7 42\nD0021B6847EB28FD -&gt; 01 3B F4 03\nD0021B6847EB2AC0 -&gt; 01 FD F6 71\nD0021B6847EB2C7B -&gt; 01 98 5D 94\nD0021B6847EB2E46 -&gt; 01 DC A1 23\nD0021B6847EB3481 -&gt; 01 96 76 9C\nD0021B6847EB36BC -&gt; 01 B1 2E 0A\nD0021B68480B086D -&gt; 01 7F D2 83\nD0021B68480B0A50 -&gt; 01 6F 35 6E\nD0021B68480B396A -&gt; 01 1A F5 13\nD0021B68480B3B57 -&gt; 01 81 06 F1\nD0021B68480D878B -&gt; 01 69 BD 13\nD0021B68480D8973 -&gt; 01 4F 42 01\nD0021B68480D93B4 -&gt; 01 2D 5E 8D\nD0021B68DCB18896 -&gt; 01 D5 B8 81\nD0021B68DCB18AAB -&gt; 01 19 8A C6\nD0021B68DCB196D7 -&gt; 01 EF 9A 3B\nD0021B68DCBF3D1D -&gt; 01 73 74 0B\nD0021B68DCC0352B -&gt; 01 E2 1E 35\nD0021B68DCC03F55 -&gt; 01 BE 08 F4\nD0021B68DCC041B2 -&gt; 01 97 A5 96\nD0021B68DCC065F0 -&gt; 01 94 2C B5\nD0021B68DCC067CD -&gt; 01 82 EB E1\nD0021B68DCC46D6F -&gt; 01 B2 8E 99\nD0021B68DCC46E28 -&gt; 01 8E 7C 55\nD0021B68DCC47DD6 -&gt; 01 C9 E4 80\nD0021B68DCCE0B95 -&gt; 01 73 6F 85\nD0021B68DCCE15D4 -&gt; 01 33 3D 54\nD0021B68DCCE578B -&gt; 01 A4 92 2E\nD0021B68DCCE5DF5 -&gt; 01 66 D1 98\nD0021B68DCCE6370 -&gt; 01 F6 C0 4F\nD0021B68DCDCE779 -&gt; 01 D2 4D CB\nD0021B68DCDCE981 -&gt; 01 F7 6D 34\nD0021B68DCDD34F7 -&gt; 01 E7 C7 DE\nD0021B68DCDD406E -&gt; 01 F2 AF 98\nD0021B68DCE60945 -&gt; 01 C0 35 51\nD0021B68DCE61539 -&gt; 01 76 71 8D\nD0021B68DCE63EF9 -&gt; 01 C2 44 63\nD0021B68DCE64498 -&gt; 01 F6 71 6B\nD0021B68DCFAF9EE -&gt; 01 1D 03 BF\nD0021B68DCFAFF55 -&gt; 01 20 62 ED\nD0021B68DCFB0526 -&gt; 01 15 2C E9\nD0021B68DCFB0AA4 -&gt; 01 83 FD 79\nD0021B68DCFB0C1F -&gt; 01 E1 E6 09\nD0021B68DCFB16D8 -&gt; 01 68 8F CA\nD0021B68DD02FF77 -&gt; 01 57 63 0A\nD0021B68DD034621 -&gt; 01 49 50 DC\nD0021B68DD0348D9 -&gt; 01 6F 68 02\n</code></pre>\n<p>Added [45]:</p>\n<pre><code>D002196E1B02AC51 -&gt; 01 89 76 A7\nD002198F160A3050 -&gt; 01 AD EA A7\nD002198F160A3638 -&gt; 01 17 DA EF\nD002198F160A7AAE -&gt; 01 43 9F CD\nD00219901F512085 -&gt; 01 4E E6 20\nD00219901F512746 -&gt; 01 A7 64 4E\nD00219901F512A6F -&gt; 01 A2 15 24\nD00219901F512B47 -&gt; 01 6E 01 6F\nD00219901F512C74 -&gt; 01 FE 02 B2\nD00219901F51334D -&gt; 01 C7 0F E7\nD00219901F513C37 -&gt; 01 7D D5 D6\nD00219901F513F3B -&gt; 01 9A 54 49\nD00219901F514244 -&gt; 01 31 9F B1\nD00219901F514881 -&gt; 01 06 A0 09\nD00219901F514C42 -&gt; 01 9C 3B D0\nD00219901F51565D -&gt; 01 39 BF 94\nD00219901F515929 -&gt; 01 AD B8 81\nD00219901F515D39 -&gt; 01 63 A2 F9\nD00219901F515F8E -&gt; 01 45 A5 C4\nD00219901F5164A1 -&gt; 01 2C 90 51\nD00219901F516F5D -&gt; 01 52 95 44\nD00219901F517022 -&gt; 01 FA 43 46\nD00219901F518D40 -&gt; 01 77 83 94\nD00219901F51927C -&gt; 01 EA 9A F1\nD00219901F519397 -&gt; 01 28 AB 7C\nD00219901F51B462 -&gt; 01 36 D2 2E\nD002199117D14063 -&gt; 01 F7 AF D0\nD002199117D1471F -&gt; 01 93 1D 36\nD002199117D17F3D -&gt; 01 D5 E6 54\nD0021B6847E94417 -&gt; 01 8F 92 AD\nD0021B6847E98E3A -&gt; 01 E9 AD 99\nD0021B6847E9907B -&gt; 01 DA 02 30\nD0021B68480B0213 -&gt; 01 26 D1 5F\nD0021B68480B0ED6 -&gt; 01 47 76 7D\nD0021B68480B35AF -&gt; 01 A2 D9 56\nD0021B68480D8DF5 -&gt; 01 E8 EC CC\nD0021B68DCC03390 -&gt; 01 BD 42 5E\nD0021B68DCDD36CA -&gt; 01 EF A3 64\nD0021B68DCE60B78 -&gt; 01 D6 F0 65\nD0021B68DCE60DC3 -&gt; 01 E4 DC A0\nD0021B68DCE61704 -&gt; 01 30 94 D8\nD0021B68DCE6401E -&gt; 01 9E D6 2B\nD0021B68DD03409A -&gt; 01 84 61 77\nD0021B68DD034AE4 -&gt; 01 31 1C 0C\nD0021B68DD034C5F -&gt; 01 1D DE 3B\n</code></pre>\n<p>So here is what I know or what I have inferred:</p>\n<ul>\n<li>I think the <code>01</code> is not part of the output of the algorithm, whether it is a CRC, hash function or something else is very unlikely to be part of the output, so the output is <code>24</code> bits and not <code>32</code>.</li>\n<li>I don't know if it helps but you have to take into account that the UID consists of 4 parts: <code>D0</code> = Prefix, <code>02</code> = Manufacturer, <code>000110</code> [binary] (6 in decimal) = Card model (<code>SRI512</code>). The remaining <code>42</code> bits are the serial.</li>\n<li>I don't know whether the entire UID is taken as input or only a part, but I noticed that among the examples I have available there are cases where the UID ends with the same 3 digits, which is why the algorithm must take as input at least the last 4 (or more).</li>\n<li>I have made several attempts and the closest thing I could find is <a href=\"https://reverseengineering.stackexchange.com/questions/19684/reverse-engineering-a-weird-24-bit-possibly-not-crc-checksum\">Reverse-engineering a weird 24-bit possibly not CRC checksum</a>, but I am unable to apply it.</li>\n<li>I have considered other alternatives, if only to test the reasoning such as buying cards with modifiable UIDs but SRI512s do not exist.</li>\n<li>If I keep buying the cards from the manufacturer over time I will get more and more examples</li>\n</ul>\n<p>I can't figure out what algorithm is being used.</p>\n<p><strong>Update</strong>:\nI managed to find a file explaining that the encryption used is 3DES-AES, I think at this point the question should be moved.\nHowever I don't know yet if it is used in this conversion, even if it is very likely.</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "178",
    "tags": [
        "encryption"
    ],
    "user": "Andrea P.",
    "time": "Dec 16, 2022 at 0:34",
    "comments": [],
    "answers_data": []
}