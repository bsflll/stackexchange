{
    "title": "Why IDA Pro generate define-lack code like this?",
    "link": "https://reverseengineering.stackexchange.com/questions/3716/why-ida-pro-generate-define-lack-code-like-this",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically I us IDA Pro 6.1 on Windows 32 bit, dealing with binaries from SPEC 2006.</p>\n<p>I use IDA Pro to generate asm code from the binaries, and in the .data section, I see data define like this:</p>\n<pre><code>GS_ExceptionRecord _EXCEPTION_RECORD  &lt;?&gt;\nGS_ContextRecord _CONTEXT  &lt;?&gt;\nlclcritsects    _RTL_CRITICAL_SECTION 0Eh dup(&lt;?&gt;)\n .....\nDoubleFormat    FpFormatDescriptor &lt;400h, 0FFFFFC01h, 35h, 0Bh, 40h, 3FFh&gt;\nFloatFormat     FpFormatDescriptor &lt;80h, 0FFFFFF81h, 18h, 8, 20h, 7Fh&gt;  \n</code></pre>\n<p>Basically I can not find the definition of <strong>_EXCEPTION_RECORD</strong> ,<strong>_CONTEXT</strong> ,<strong>_RTL_CRITICAL_SECTION</strong>, <strong>FpFormatDescriptor</strong> in the generated asm code.</p>\n<p>And in the code, they will be used like:</p>\n<pre><code>mov     edi, DoubleFormat.precision\nmov     eax, DoubleFormat.min_exp\nsub     ecx, DoubleFormat.precision\n\nmov     edi, FloatFormat.precision\n\nmov     edi, offset lclcritsects\n\nmov     GS_ContextRecord._Eax, eax\nmov     word ptr GS_ContextRecord.SegSs, ss\npop     GS_ContextRecord.EFlags\n</code></pre>\n<p>So basically my questions are:</p>\n<ol>\n<li><p>How can I find the definition of these stuff?</p></li>\n<li><p>Basically I use <strong>File--&gt;Produce File--&gt;Create ASM File</strong> to generate asm code for analysis, then how can I dump these definitions from IDA Pro's Structures window into this asm code?</p></li>\n</ol>\n<p>And what's more, it seems that I can not find the definition in Structures window even if I expand them....</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/gxynq.png\"/></p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "943",
    "tags": [
        "ida",
        "disassembly",
        "winapi",
        "nasm"
    ],
    "user": "lllllllllllll",
    "time": "Feb 18, 2014 at 21:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I know IDA doesn't dump structure layouts as part of generated assembly listings. It does however know about all the structures that you mention. Go to the structures window, press \"<code>Insert</code>\" and name the new structure <code>CONTEXT</code>, <code>EXCEPTION_RECORD</code> or <code>RTL_CRITICAL_SECTION</code> and IDA will show the layout in the structures window.</p>\n<p>You can then open the \"<code>Local Type</code>s\" windows and dump all of the structure layouts as a C header file (right click \"<code>Export to header file</code>\". It still doesn't get you the assembly syntax you want, but it is about as close as I know how to make IDA get to what you want.</p>\n</div>",
            "votes": "5",
            "user": "Chris Eagle",
            "time": "Feb 19, 2014 at 12:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Hi, Chris, Thank you a lot for your answer and I find the definition of <b>CONTEXT</b> <b>EXCEPTION_RECORD</b> and ** RTL_CRITICAL_SECTION**, but I still can not find FpFormatDescriptor.. Do you know where it is..?</span>",
                    "time": null
                },
                {
                    "user": "Chris Eagle",
                    "text": "<span class=\"comment-copy\">I'm not sure where IDA is picking up the definition of FpFormatDescriptor. It does not seem to be listed in any of the til files that ship with my IDA install.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>_EXCEPTION_RECORD</code>, <code>_CONTEXT</code>, and <code>_RTL_CRITICAL_SECTION</code> are all well-defined structures. Their documentation can be found on MSDN (<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa363082(v=vs.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/windows/desktop/aa363082(v=vs.85).aspx</a>, etc.) and their layouts can also be found in IDA's Structures window.</p>\n<p>Your other questions aren't clear. Please rephrase them.</p>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Feb 18, 2014 at 21:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Hi Jason, thank you and I modified my questions, could you please give me a hand...?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>seems to be a struct from some internal microsoft  floating point conversion code possibly from windbg source tree   </p>\n<p>seems to be defined like</p>\n<pre><code>typedef struct { \nint max_exp; // maximum base 2 exponent (reserved for special values) \nint min_exp; // minimum base 2 exponent (reserved for denormals) \nint precision; // bits of precision carried in the mantissa \nint exp_width; // number of bits for exponent\nint format_width; // format width in bits \nint bias;  // exponent bias \n} FpFormatDescriptor; \n</code></pre>\n<p>Double </p>\n<pre><code>static FpFormatDescriptor \nDoubleFormat = { \n0x7ff - 0x3ff, //  1024, maximum base 2 exponent (reserved for special values)\n0x0 - 0x3ff, // -1023, minimum base 2 exponent (reserved for denormals) \n53, // bits of precision carried in the mantissa \n11, // number of bits for exponent \n64, // format width in bits \n0x3ff,  // exponent bias \n}; \n</code></pre>\n<p>Float</p>\n<pre><code>static FpFormatDescriptor \nFloatFormat = { \n0xff - 0x7f, //  128, maximum base 2 exponent(reserved for special values) \n0x0 - 0x7f, // -127, minimum base 2 exponent (reserved for denormals) \n24, // bits of precision carried in the mantissa \n8,   // number of bits for exponent \n32, // format width in bits \n0x7f,  // exponent bias \n}; \n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Feb 20, 2014 at 4:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}