{
    "title": "Is OR EAX, EAX as If-Statement possible?",
    "link": "https://reverseengineering.stackexchange.com/questions/4656/is-or-eax-eax-as-if-statement-possible",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following question: Could it be that OR EAX, EAX represents a if statement?</p>\n<p>The reason why I ask is, I have read the following in an assembly code:</p>\n<pre><code>....\nOR EAX, EAX\nJNZ funct.A\n.....\n</code></pre>\n<p>Before the line OR EAX, EAX comes, the function strcmp is called which has the return value 00000001 stored in EAX. \nSo I have found out that: if the return value is greater than zero indicates that the first character that does not match has a greater value in string1 than in string2.</p>\n<p>So, my first question would be: What does that mean \"<strong>if the return value is greater than zero indicates that the first character that does not match has a greater value in string1 than in string2.\"</strong></p>\n<p>And the second question would be: Can I translate the assembly code in pseudo C-Code like the following:</p>\n<pre><code>if(EAX == 1){\n   funct.A;\n}\n</code></pre>\n<p>Is that ok? Or completely wrong? If yes, then what would your suggestions?</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "6k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Jun 20, 2014 at 20:51",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">\"greater than zero\" is only half of the description; the other half is \"smaller than zero\". But in this case all that is tested for is <i>not</i> zero, i.e., it does not matter whether the second string is \"greater\" or \"smaller\", the code merely tests for <i>equal</i> strings. This is indicated by a zero in <code>EAX</code>, which is tested here with the <code>OR</code>.</span>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\">if an answer helps you then you should mark it as accepted to tell the community that this question has been solved, that'll contribute to the reputation of both the asker and answerer</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>x86 conditional branch and move instructions decide whether to jump/move or not depending on the <strong><em>flags</em></strong>. If the appropriate flag(s) are set they'll take the action, hence <strong>any instructions that affect the flag(s) can be used</strong>, not only <code>CMP</code>. For example <a href=\"https://stackoverflow.com/q/54438477/995714\">to check if the high bits in rax are zero</a> <code>SHR rax, 32; JZ RAX_IS_0</code> can be used which saves a <code>CMP</code>. As a result, shorter instructions are generally preferred</p>\n<p>The most commonly used one is <a href=\"https://en.wikipedia.org/wiki/TEST_%28x86_instruction%29\" rel=\"nofollow noreferrer\"><code>TEST</code></a>. <code>AND eax, eax</code> can also be used, since it's exactly the same as <code>TEST</code> except it destroys the destination (but that's irrelevant in cases where source and dest are the same register like this). However sometimes <code>OR</code> is also used (most likely emitted by the <a href=\"https://stackoverflow.com/q/23691989/995714\">Delphi compiler</a>) because <code>OR reg, reg</code> gives the same results as <code>AND reg, reg</code>. If you check the disassembly you'll notice that <code>CMP</code> is one byte longer:</p>\n<pre><code>83 F8 00  cmp  eax, 0\n09 C0     or   eax, eax\n21 C0     and  eax, eax\n85 C0     test eax, eax\n</code></pre>\n<p>After the above instructions the SF, ZF, PF, CF, OF (and AH with <code>cmp</code>) will be modified. <code>JNZ</code> will check <code>ZF</code> and jump if it's not set, i.e. eax is non zero</p>\n<p>Performance-wise <strong><code>TEST</code> should always be used</strong> because <a href=\"https://stackoverflow.com/a/33724806/995714\"><code>TEST</code> can macro-fuse with <code>Jcc</code></a> but not <code>AND</code> and <code>OR</code></p>\n<ul>\n<li><a href=\"https://reverseengineering.stackexchange.com/q/4436/2563\">Does a JE must follow directly to an CMP?</a></li>\n<li><a href=\"https://stackoverflow.com/q/23691989/995714\">Difference between <code>or eax, eax</code> and <code>test eax, eax</code></a></li>\n<li><a href=\"https://stackoverflow.com/q/33721204/995714\">Test whether a register is zero with <code>CMP reg, 0</code> vs <code>OR reg, reg</code>?</a></li>\n<li><a href=\"https://stackoverflow.com/q/147173/995714\"><code>testl</code> eax against eax?</a> </li>\n<li><a href=\"https://stackoverflow.com/q/6002079/995714\">What does the <code>test</code> instruction do?</a> </li>\n<li><a href=\"https://stackoverflow.com/q/17390159/995714\">use of <code>TEST</code> instruction with same register</a></li>\n</ul>\n</div>",
            "votes": "7",
            "user": "phuclv",
            "time": "Feb 9, 2019 at 8:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Cordes",
                    "text": "<span class=\"comment-copy\">It seems the inefficient-on-modern-CPUs <code>or reg,reg</code> idiom originated from 8080 which didn't have a <code>test</code>; it has <code>ora a</code> to OR the accumulator with itself.  (And <code>ana a</code> to AND with itself, but unfortunately for macro-fusion on Sandybridge-family which <i>can</i> macro-fuse <code>and</code> but not <code>or</code>, people settled on <code>ora</code> and kept using it when moving to 8086).  My answer on <a href=\"//stackoverflow.com/a/33724806\">Test whether a register is zero with CMP reg,0 vs OR reg,reg?</a> explains why it's inefficient and mentions history.  You still see that idiom in SO Q&amp;As; people keep learning from old bad examples</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would translate this to the pseudo code</p>\n<pre><code>if (strcmp(â€¦)) \n    goto funct.A;\n</code></pre>\n<p>The point of the OR is that <code>strcmp()</code>, like all C functions returning integer scalars, returns its result in <code>EAX</code>. In order to do conditional jump, you need to set the conditional flags based on the value, and <code>OR EAX, EAX</code> has the nice property that it sets the conditional flags (particularly <code>ZF</code>, which is tested by the subsequent jump) without modifying the value in <code>EAX</code>.</p>\n<p>Not quite sure why <code>OR</code> would be used instead of <code>TEST</code> here; the function seems to be identical for the purpose of the code.</p>\n</div>",
            "votes": "3",
            "user": "microtherion",
            "time": "Jun 20, 2014 at 22:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>in x86 / x86-64 or represents a logical or. </p>\n<p>In your example</p>\n<pre><code> OR EAX, EAX\n</code></pre>\n<p>Performs the logical bitwise or operation. If EAX is zero, the result will be all zeroes, and the zero flag will be set, which most likely will is the whole point. </p>\n<p>I might render the code you showed as </p>\n<pre><code>if(EAX != 0)\n{\n     func.A\n}\n</code></pre>\n<p>It's hard to see exactly what the significance of this is without knowing the wider context of what is happening. I would guess that the actual string comparison should return a 0 into the EAX register should the strings (or parts of strings) match. </p>\n<p>Indeed this is a normal approach:\n<a href=\"https://stackoverflow.com/questions/11663745/compare-arrays-of-characters-in-x86-assembly\">https://stackoverflow.com/questions/11663745/compare-arrays-of-characters-in-x86-assembly</a></p>\n<p>This above post relates a method for comparing strings in x86. The jne and cmp instructions are used rather than the jnz, but the concept may hold water to your situation. </p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}