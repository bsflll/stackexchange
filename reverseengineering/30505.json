{
    "title": "What is the outcome of mov on non bracket memory locations?",
    "link": "https://reverseengineering.stackexchange.com/questions/30505/what-is-the-outcome-of-mov-on-non-bracket-memory-locations",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am having problems distinguishing whether the address is loaded or the content from the address. Please help me clarify.</p>\n<pre><code>1. mov     [rsp+78h+arg_0], rsi\n2. mov     rsi, cs:qword_1F39B60\n3. mov     [rsp+78h+arg_38], rsi\n</code></pre>\n<ol>\n<li>If line 2 is loading <code>1F39B60</code> in <code>rsi</code> or the contents of <code>1F39B60</code> in <code>rsi</code>?</li>\n<li>Would <code>lea rsi, [qword_1F39B60]</code> be the same?</li>\n<li>If non bracket using <code>mov</code> action on a memory even allowed or this is just a visual IDA thing?</li>\n<li>Can you explain to me why it shows <code>cs:</code> even though <code>qword_1F39B60</code> is in the <code>.data segment</code>? Shouldn't it be <code>ds:</code>?</li>\n</ol>\n<p>Last but not the least this isn't directly connected to my main question but is <code>rsp+78h</code> a fancy way of saying <code>rbp</code> by the disassembler?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "125",
    "tags": [
        "assembly",
        "x86-64",
        "intel"
    ],
    "user": "Sawb",
    "time": "Jun 12, 2022 at 8:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><code>rsi</code> is being copied into <code>arg_0</code></li>\n<li><code>lea rsi, [qword_1F39B60]</code> means <code>rsi</code> would contain a pointer to <code>qword_1F39B60</code></li>\n<li>Yes it is allowed, it's a mem-&gt;reg operation.</li>\n<li>I believe that <code>ds</code> and <code>ss</code> are usually set to zero when using 64bit mode, but <code>cs</code> is set to the start of the text segment, so is the only segment register that can be used to generate a valid address. (There are some conflicting views on this, and I may be wrong)</li>\n<li>Usually <code>rbp</code> will be set to <code>rsp</code> before space is allocated on the stack:</li>\n</ol>\n<pre><code>push rbp              ; save the current frame pointer\nmov rbp, rsp          ; create a new frame\nsub rsp, rax          ; allocate space on the stack\n</code></pre>\n<p>However, it looks like this program is optimised (omit frame pointers) and is using <code>rsp</code> for all references, so <code>rbp</code> may be used for anything in this case but not its usual job.</p>\n</div>",
            "votes": "0",
            "user": "Mega Tonnage",
            "time": "Jun 22, 2022 at 3:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}