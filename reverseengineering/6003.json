{
    "title": "Visualizing ELF binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/6003/visualizing-elf-binaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently saw an older talk by Sergey Bratus and Greg Conti by the name of <em><a href=\"http://www.youtube.com/watch?v=h68VS7lsNfE\">Voyage of the Reverser: A Visual Study of Binary Species</a></em>.</p>\n<p>Are there any opensource/free tools that one could use to see visual representations of the binaries that are fed in (similar to what is shown in the talk)?</p>\n<hr/>\n<p><strong>Samples from the talk:</strong></p>\n<p><img alt=\"Windows PE visualization\" src=\"https://i.sstatic.net/NWzeh.png\"/></p>\n<p><img alt=\"Documents Format Files\" src=\"https://i.sstatic.net/Ebcxw.png\"/></p>\n</div>",
    "votes": "62",
    "answers": 7,
    "views": "18k",
    "tags": [
        "binary-analysis",
        "elf",
        "visualization"
    ],
    "user": null,
    "time": "Nov 30, 2022 at 12:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The tool we used for the talk, binviz, is available here: <a href=\"http://www.rumint.org/gregconti/publications/binviz_0.zip\">binviz_0.zip</a>.</p>\n<p>Some papers are here:</p>\n<ul>\n<li><a href=\"http://www.rumint.org/gregconti/publications/taxonomy-bh.pdf\">taxonomy-bh.pdf</a>;</li>\n<li><a href=\"http://www.rumint.org/gregconti/publications/2008_VizSEC_FileVisualization_v53_final.pdf\">2008_VizSEC_FileVisualization_v53_final.pdf</a></li>\n</ul>\n<p>And, there is also an earlier Black Hat talk, in addition to the one I\ndid with Sergey:</p>\n<ul>\n<li>(<a href=\"http://www.rumint.org/gregconti/publications/200808_binviz38_dc_final.ppt\">200808_binviz38_dc_final.ppt</a>)</li>\n</ul>\n<p>I haven't used it in a while but binviz was written in Visual C# (VS2005\nor maybe VS2008).  The .zip is the project (source) file so it should\nload into visual studio and run.  There is also a compiled <code>.exe</code> in...\n<code>/binviz_0.44bw/binviz_0.01/bin/Debug/</code>. You should just be able to double\nclick it and run on a Windows machine. I developed it under XP, but\nhave since used it under Windows 7 and it worked more or less the same.\n(mouseover event behavior is a little different, but still usable).</p>\n<p>Note that binviz is a research prototype and has a bug... it doesn't\nlike small files.  Would try something 10M in size and then work down\nfrom there. I think it is around 500K where it starts getting cranky.</p>\n</div>",
            "votes": "46",
            "user": "perror",
            "time": "Aug 2, 2014 at 14:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Thanks for your reaction! In your 2008 paper you mention platform independent versions as \"future work\" (p. 8). Were you able to pursue this any further, or is the download still the canonical \"current\" version?</span>",
                    "time": null
                },
                {
                    "user": "Greg Conti",
                    "text": "<span class=\"comment-copy\">I went down the a variant path of trying to include automated mapping of arbitrary binaries.  <a href=\"http://www.rumint.org/gregconti/publications/dfrws_2010-301.pdf\" rel=\"nofollow noreferrer\">see binary mapping paper</a> and wasn't able to explore the platform independent version further.  So yes, this is the \"current\" version.</span>",
                    "time": null
                },
                {
                    "user": "Denis",
                    "text": "<span class=\"comment-copy\">@GregConti Will this software recognize writing patterns in text like articles or books?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><a href=\"https://sites.google.com/site/xxcantorxdustxx/\" rel=\"noreferrer\">cantor.dust</a></strong></p>\n<blockquote>\n<p>This project is an interactive binary visualization tool, a radical\nevolution of the traditional hex editor. By translating binary\ninformation to a visual abstraction, reverse engineers and forensic\nanalysts can sift through mountains of arbitrary data in seconds.\nEven previously unseen instruction sets and data formats can be easily\nlocated and understood through their visual fingerprint.</p>\n</blockquote>\n<p><img alt=\"cantor.dust example 1\" src=\"https://i.sstatic.net/MUN16.jpg\"/></p>\n<ul>\n<li><p><a href=\"http://www.youtube.com/watch?v=4bM3Gut1hIk\" rel=\"noreferrer\">Presentation video from Derbycon</a></p>\n</li>\n<li><p><a href=\"http://docs.google.com/viewer?url=http://recon.cx/2013/slides/Recon2013-Christopher%20Domas-The%20Future%20of%20RE-Dynamic%20Binary%20Visualization.pptx\" rel=\"noreferrer\">Presentation slides from Recon 2013</a></p>\n</li>\n<li><p><a href=\"https://sites.google.com/site/xxcantorxdustxx/visual-re\" rel=\"noreferrer\">More pretty pictures</a></p>\n</li>\n</ul>\n<p>Sadly, I think the development stopped, at least I haven't heard any news about this project recently.</p>\n<p><strong><a href=\"http://binwalk.org/\" rel=\"noreferrer\">Binwalk</a></strong></p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/RGvPW.gif\">\n<a href=\"https://reverseengineering.stackexchange.com/users/1408/devttys0\">devttys0</a> implemented a similar visualization in <a href=\"http://binwalk.org/3d-data-visualizations/\" rel=\"noreferrer\">binwalk.</a></img></p>\n<p><strong><a href=\"http://actinid.org/vix/\" rel=\"noreferrer\">Vix/Biteye</a></strong></p>\n<blockquote>\n<p>Graphical (SDL-based) hexadecimal dump tool designed for GNU/Linux. It\nlets you see the patterns formed by its bits.</p>\n</blockquote>\n<p><a href=\"https://github.com/BatchDrake/vix\" rel=\"noreferrer\">Github</a></p>\n<p><img alt=\"GUI\" src=\"https://i.sstatic.net/78ai9.png\"/></p>\n<p><strong><a href=\"https://github.com/wapiflapi/binglide\" rel=\"noreferrer\">binglide</a></strong></p>\n<blockquote>\n<p>Binglide is a visual reverse engineering tool. It is designed to offer\na quick overview of the different data types that are present in a\nfile.This tool does not know about any particular file format, everything is\ndone using the same analysis working on the data. This means it works even if\nheaders are missing or corrupted or if the file format is unknown.</p>\n</blockquote>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/5Tvq3.png\"/></p>\n<p><strong><a href=\"https://github.com/letoram/senseye\" rel=\"noreferrer\">senseye</a></strong></p>\n<blockquote>\n<p>Senseye is a tool for for monitoring, analyzing and visualizing everything\nfrom static files and crash dumps to live data flows and application dynamic\nmemory.Each data window provides you with different views (e.g. 3D point butt)\nand statistical tools (e.g. histogram) and some controls for hinting how the\nsensor should sample, pack and transfer data.</p>\n</blockquote>\n<p><img alt=\"Senseye\" src=\"https://i.sstatic.net/am0aq.png\"/></p>\n<p><strong><a href=\"http://binvis.io\" rel=\"noreferrer\">binvis.io</a></strong></p>\n<blockquote>\n<p>a browser-based tool for visualising binary data.</p>\n<p>With binvis.io, you can:</p>\n<p>Visually explore binary data.\nCluster bytes to pick out fine structural features with space-filling curves.\nUse the simple scan layout to navigate and select data intuitively.\nFlip between a number of useful byte color mappings, including an entropy.\nVisualiser that lets you pick out compressed or encrypted sections.\nExport data segments for analysis.</p>\n</blockquote>\n<p><img alt=\"http://corte.si/posts/binvis/announce/index.html\" src=\"https://i.sstatic.net/IebW9.png\"/></p>\n<p>===</p>\n<p><strong><a href=\"http://trippler.no/wpcms/?page_id=20\" rel=\"noreferrer\">BinVis</a></strong></p>\n<blockquote>\n<p>A Qt based tool for visualizing arbitrary data.\nBinVis has abilities to:</p>\n<p>Visualize large amounts of binary data (several TiB).\nVisualize in time (normal plot) and space (byte plot) domains\nVisualize parts of files and narrow in on relevant parts of the file\n\"Step\" through the file to see what type of data each part of the file contains\n\"Reverse draw\" to highlight strong patterns in the visualized data\nUse filters, transparency, color schemes and various shaders to highlight the relevant data.\nHeavy use of threading for performance reasons\nFairly static memory usage, using the same amount of memory for visualizing a 1GiB file and 100TiB file\n<a href=\"http://trippler.no/wpcms/wp-content/uploads/2014/06/Screenshot_2015-08-09_19-52-30.png\" rel=\"noreferrer\">http://trippler.no/wpcms/?page_id=20 http://trippler.no/wpcms/wp-content/uploads/2014/06/Screenshot_2015-08-09_19-52-30.png</a></p>\n</blockquote>\n<p><strong><a href=\"https://katjahahn.github.io/PortEx/\" rel=\"noreferrer\">PortEx</a></strong></p>\n<blockquote>\n<p>Java library to analyse Portable Executable files with a special focus\non malware analysis and PE malformation robustness</p>\n</blockquote>\n<p><strong><a href=\"https://codisec.com/veles/\" rel=\"noreferrer\">Veles</a></strong></p>\n<p>Binary visualization framework.\n<a href=\"https://i.sstatic.net/u1WLf.png\" rel=\"noreferrer\"><img alt=\"Veles visualization\" src=\"https://i.sstatic.net/u1WLf.png\"/></a></p>\n</div>",
            "votes": "33",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These are graphic dumps from the source data. I use this <em>extensively</em>, with a hex reader I wrote myself -- it's a great way to quickly locate \"data\" (see the difference between <code>.text</code> and <code>.data</code>) and larger structures (which often contain repeating or similar data on the same offsets).</p>\n<p>The top images show raw data dumped as grayscale information: each byte is treated as a pixel. Presumably, the author chose grayscale for convenience. I prefer a full range of contrasting colors, so long swathes of \"same\" and \"similar\" data can be discerned easier.</p>\n<p>The blocks of solid color near the bottom (<code>.rsrc</code>) are icons and other graphics. They appear horizontally stretched out because they are displayed as one-pixel-per-byte, and are actually 16-, 24-, or 32-bpp images.</p>\n<p>(I don't believe the entire top is <code>.text</code>! Executable code appears as random pixels, but the top 1/3rd in that image is less dense. It's probably the MZ and PE Executable Header; these contain lots of zeros. The more denser part in the bottom 1/3rd is part of <code>.text</code> and most likely the Virtual Call table, which happens to contain the byte <code>0xFF</code> a lot.)</p>\n<p>In the bottom images, each byte is displayed in a monochrome binary format: each byte is shown as 8 consecutive pixels. By convention, these are displayed with the most significant bit first. There is no need to check for 'endianness', as that only comes into play when dealing with single values larger than a single byte.</p>\n<p>Writing something like this yourself is not hard; probably most important is to make the graphics routines as fast as possible, in particular the monochrome bitmaps. This is also addressed by Conti et al., <em>Visual Reverse Engineering of Binary and Data Files</em> (<a href=\"http://www.rumint.org/gregconti/publications/2008_VizSEC_FileVisualization_v53_final.pdf\" rel=\"noreferrer\">http://www.rumint.org/gregconti/publications/2008_VizSEC_FileVisualization_v53_final.pdf</a>):</p>\n<blockquote>\n<p>When testing performance we found that the display could be updated in 0.03 seconds, leaving open the possibility of creating byteview visualizations at greater resolutions while still providing a responsive interface. [...] We were able to achieve this level of performance by avoiding C#’s GetPixel and SetPixel methods and directly accessing image memory [...]</p>\n</blockquote>\n<hr/>\n<p>Screenshots of my own tool, very similar to what is shown above:</p>\n<p>The <code>.text</code> section of CALC.EXE. The repeating structure on the bottom is the Virtual Call table.</p>\n<p><img alt=\"calc.exe in binary view\" src=\"https://i.sstatic.net/EgQhw.png\"/></p>\n<p>A file containing RLE-encoded images. The RLE compression can be recognized by the horizontal stripes of \"coherent\" data (better visible when changing the width interactively).</p>\n<p><img alt=\"rle-compressed images\" src=\"https://i.sstatic.net/Q3cbZ.png\"/></p>\n<p>GZ compressed data, in monochrome. This is as close to random static as possible.</p>\n<p><img alt=\"gz compressed data in monochrome\" src=\"https://i.sstatic.net/l4CkY.png\"/></p>\n<p>A tiny embedded bitmap font found in another executable. The random bits between characters are the width in pixels - see the synchronically scrolling hex dump.</p>\n<p><img alt=\"a tiny embedded bitmap font\" src=\"https://i.sstatic.net/GlPEo.png\"/></p>\n<p>Some data is better visualized in other ways. This is an old-style VGA palette (6x6x6 RGB).</p>\n<p><img alt=\"a palette visualized\" src=\"https://i.sstatic.net/50t8X.png\"/></p>\n</div>",
            "votes": "14",
            "user": "Jongware",
            "time": "Aug 2, 2014 at 12:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The data visualizing tool I saw used in the talk seems to be almost identical if not identical to the BinVis tool available on <a href=\"https://code.google.com/p/binvis/\" rel=\"noreferrer\">Google Code</a>. A screenshot of some of the features:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/7dmof.jpg\"/></p>\n<p><strong>Note:</strong> the above is an old version as I could not install the latest on my PC; see Google code site for more.</p>\n</div>",
            "votes": "13",
            "user": "JamalS",
            "time": "Aug 2, 2014 at 9:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">Yeah, it's his work, and I think all that's available unless cantor.dust shows up as opensource.</span>",
                    "time": null
                },
                {
                    "user": "PlasmaHH",
                    "text": "<span class=\"comment-copy\">It seems that the current version is availabel in <a href=\"http://binvis.googlecode.com/svn/trunk/binviz_0.01/bin/Release/app.publish/Application%20Files/binviz_0.01_1_0_0_1/\" rel=\"nofollow noreferrer\">binvis.googlecode.com/svn/trunk/binviz_0.01/bin/Release/…</a> by just renaming .exe.deploy to .exe</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>BinView is a prototype for a tool for binary data visualization</p>\n<p><a href=\"https://github.com/russlank/BinView\">GitHub repository</a></p>\n<p><img alt=\"Screen 1\" src=\"https://i.sstatic.net/WhBam.jpg\"/></p>\n<p><img alt=\"Screen 2\" src=\"https://i.sstatic.net/ekk7G.jpg\"/></p>\n<p><img alt=\"Screen 3\" src=\"https://i.sstatic.net/2TeIW.jpg\"/></p>\n<p><img alt=\"Screen 4\" src=\"https://i.sstatic.net/Fk0f3.jpg\"/></p>\n</div>",
            "votes": "11",
            "user": "Russlan K",
            "time": "Feb 16, 2015 at 0:21",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote <a href=\"https://github.com/REMath/implementations/blob/master/code_examples/plot_hex.py\">https://github.com/REMath/implementations/blob/master/code_examples/plot_hex.py</a> which implements the ngram method presented Conti as well as a clustering component to isolate visual properties. </p>\n</div>",
            "votes": "9",
            "user": "turnersr",
            "time": "Aug 5, 2014 at 14:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was part of a team that built a dynamic visualization tool (dynamic because it operates on executions of binaries, not on static binaries) called Haxxis:</p>\n<p><a href=\"https://github.com/voidALPHA/cgc_viz\" rel=\"nofollow noreferrer\">https://github.com/voidALPHA/cgc_viz</a> (the visualization component developed by voidALPHA)\n<a href=\"https://github.com/Vector35/traceapi\" rel=\"nofollow noreferrer\">https://github.com/Vector35/traceapi</a> (generates traces using a modified qemu that are fed into the visualizer)</p>\n<p>While it mainly works on \"Decree\" format (a 32bit x86 modified elf format) it would be easy to adapt to other binary formats. It produces some nifty visualizations: </p>\n<p><a href=\"https://www.youtube.com/watch?v=6r1fOrDb80s&amp;list=PLuDRBJDBc4F9HnfV5tQDwqhSs9a5VPegD\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=6r1fOrDb80s&amp;list=PLuDRBJDBc4F9HnfV5tQDwqhSs9a5VPegD</a>\n<a href=\"https://www.youtube.com/watch?v=LEfejsqEucY&amp;list=PL6wMum5UsYvZx2x9QGhDY8j3FcQUH7uY0&amp;index=13\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=LEfejsqEucY&amp;list=PL6wMum5UsYvZx2x9QGhDY8j3FcQUH7uY0&amp;index=13</a>\n<a href=\"https://www.youtube.com/watch?v=SYYZjTx92KU&amp;list=PL6wMum5UsYvZx2x9QGhDY8j3FcQUH7uY0&amp;index=31\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=SYYZjTx92KU&amp;list=PL6wMum5UsYvZx2x9QGhDY8j3FcQUH7uY0&amp;index=31</a> (long overview of the CGC event itself with snippets of Haxxis throughout)</p>\n</div>",
            "votes": "3",
            "user": "Jordan",
            "time": "Sep 6, 2017 at 21:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}