{
    "title": "Why would MSVC pass a constant \"2\" for an unused this parameter?",
    "link": "https://reverseengineering.stackexchange.com/questions/18366/why-would-msvc-pass-a-constant-2-for-an-unused-this-parameter",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hex-Rays decompiled (with the assistance of pdb symbols) a piece of code as such: <code>XPerfAddIn::CFramesInfoSource::MatchEventDescriptor( (XPerfAddIn::CFramesInfoSource *)2</code></p>\n<p>And by my following of the assembly, it is correct:</p>\n<pre><code>xor     r15d, r15d\ntest    rax, rax\njz      loc_1800224C7\nlea     r13, [rax+20h]\ncmp     [r13+0], r15\njz      loc_1800224C7\nlea     r12, [r14+28h]\nmov     rax, [rsp+260h+a3]\nmov     rcx, [rax]\ncmp     rcx, cs:qword_180044990\njnz     loc_1800224C7\nmov     rax, [rax+8]\ncmp     rax, cs:qword_180044998\njnz     loc_1800224C7\nlea     ecx, [r15+2]\nmov     r9d, ecx        ; a4\nlea     r8, MSHTML_CDOC_ONPAINT_START_V1 ; a3\nmov     rdx, r12        ; a2\ncall    ?MatchEventDescriptor@CFramesInfoSource@XPerfAddIn\n</code></pre>\n<p>MatchEventDescriptor does not use the 'this' parameter in rcx, so it doesn't really matter what gets passed in. So <em>why</em> would the compiler emit an extra lea instruction to pass in a constant 2 instead of just leaving it 0... or passing in the actual, correct this value?</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "135",
    "tags": [
        "ida",
        "disassembly",
        "msvc"
    ],
    "user": "Zhentar",
    "time": "May 26, 2018 at 15:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">add the call to the disassembly</span>",
            "time": null
        },
        {
            "user": "Zhentar",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky edited it in</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Apparently <code>ecx</code> is just used as a temporary for calculating the value 2 which is copied to <code>r9d</code> and is probably used later in the function. </p>\n<p>When  the decompiler does not have reliable information about function prototype, it has to resort to heuristics, or guessing.  Since the demangled function name looks like a C++ method, it assumes that it’s a method of a class <code>XPerfAddIn::CFramesInfoSource</code> and since it’s not marked <code>static</code>, it probably takes in the class instance in <code>rcx</code> as common for the <code>thiscall</code> calling convention, thus the value in <code>rcx</code> (<code>ecx</code>) is assumed to be the <code>this</code> pointer. </p>\n<p>If you analyzed the function and deduced that it does not actually use <code>rcx/ecx</code>, you can edit the function prototype, remove the <code>this</code> argument and <code>__thiscall</code> calling convention to get “proper” decompilation. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 26, 2018 at 16:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Zhentar",
                    "text": "<span class=\"comment-copy\">This is x86-64, so it's it's expecting the first argument to be in rcx whether or not it's <code>this</code>. I tried manually defining the registers ( <code>bool __fastcall XPerfAddIn__CFramesInfoSource__MatchEventDescriptor(_EVENT_DESCRIPTOR *a2&lt;rdx&gt;, _EVENT_DESCRIPTOR *a3&lt;r8&gt;, EDVersionCheckType a4&lt;r9&gt;)</code>) , but that just gave me the error \"Argument location rdx is not allowed here\"</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">explicit argument locations only work for <code>__usercall</code></span>",
                    "time": null
                }
            ]
        }
    ]
}