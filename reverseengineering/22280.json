{
    "title": "Where is the ESP after call instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/22280/where-is-the-esp-after-call-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've started learning the Reverse Engineering and when I read the Stack Operations and function invocation, there are an issue that I'm confused.\n-What is the address of ESP after \"pop ebp\" and \"retn\" instruction??</p>\n<h2>C program</h2>\n<pre><code>int __cdecl addme(short a, short b)\n{\n     return a+b;\n}\n</code></pre>\n<h2>Assembly program</h2>\n<pre><code>01: push ebp\n02: mov ebp , esp\n03:...\n04:movsx eax ,word ptr [ebp+8]\n05:movsx ecx ,word ptr [ebp+0Ch]\n06:add eax ,ecx\n07:...\n08:mov esp , ebp\n09:pop ebp\n10:retn\n</code></pre>\n<p>As I though , esp is set to ebp in step 08 so the ESP address is right after the the first address comes inside the stack.But the step 09 makes it wrong. Help me understand this.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "Thành Công",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To further expand on perrors answer, you're looking at a function that preserves the stack frame, which is a nice little trick to simplify walking backwards through the call stack. When you initially <code>push EBP</code> in the prologue, it subtracts pointer size (which is of course <code>0x4</code> in x86) before writing the old <code>EBP</code> to the stack, as seen below in equivalent code.</p>\n<pre><code>SUB ESP, 0x4 ; Result from PUSH  \nMOV [ESP], EBP ; Save old EBP  \nMOV EBP, ESP ; Set new EBP  \n</code></pre>\n<p>Now once it reaches the epilogue and restores the stack pointer (<code>ESP</code>) from the frame pointer (<code>EBP</code>) it's still 4 bytes below the original stack when entering the function. What's at the current stack pointer? It holds the previous frame pointer from before invoking the current function. By popping <code>EBP</code> you are both restoring the frame pointer to what it was and fixing the stack at the same time, as shown below.</p>\n<pre><code>MOV ESP, EBP ; Restore ESP from prologue  \nMOV EBP, [ESP] ; Restore saved EBP  \nADD ESP, 0x4 ; Result from POP  \n</code></pre>\n<p>The return following this can be interpreted as a <code>POP EIP</code> instruction, as shown below.</p>\n<pre><code>MOV EIP, [ESP] ; Redirect execution to return address  \nADD ESP, 0x4 ; Result from pop  \n</code></pre>\n<p>I should also add that CALL can be simplified as a <code>push</code>/<code>jump</code>, as shown below.  </p>\n<pre><code>SUB ESP, 0x4 ; Result from PUSH  \nMOV [ESP], ReturnAddress ; Save next instruction as return address  \nJMP CallAddress ; Redirect execution to call address  \n</code></pre>\n<p>As you can probably see, this allows you to simply work backwards to get both the frame pointer and return address from previous function calls that led to the current function. Hopefully that explains both the purpose and logic behind the frame pointer preservation your question is based on.  </p>\n<p>Note: In terms of the post by perror, I also wanted to point out a couple things. First the constant <code>0x4</code> should be <code>sizeof(uintptr_t)</code>. I know your code is x86 so he's not wrong, it's just good to know. Second is that push can be thought of as subtracting the stack before setting the value, while pop can be thought of as the exact opposite, getting the value first before adding the stack.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Oct 11, 2019 at 18:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>esp</code> is updated when a <code>push</code> or a <code>pop</code> is called. Remember that the <code>esp</code> is used to point to the current last item on the stack. So, each <code>push</code> or <code>pop</code> operation move it up or down.</p>\n<p>To be more explicit, we can decompose in smaller instructions (only <code>mov</code>) the <code>pop</code> and the <code>push</code> as follow:</p>\n<pre><code>pop ebp == (mov ebp, [esp] ; mov esp, esp + 4)\n</code></pre>\n<pre><code>push ebp == (mov [esp], ebp ; mov esp, esp - 4)\n</code></pre>\n<p>I hope this is just clearer now.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Oct 10, 2019 at 7:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}