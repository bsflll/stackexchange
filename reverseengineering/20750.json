{
    "title": "Bitwise operation between byte and 1?",
    "link": "https://reverseengineering.stackexchange.com/questions/20750/bitwise-operation-between-byte-and-1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am having some trouble understanding what this is doing.</p>\n<p>This is the commented pseudocode. </p>\n<pre><code>mightGetUserInput(&amp;std::__1::cin, &amp;userInput) ; this fills the buffer with the user input, naming is a bit weird, but I'm not sure how to improve it?\n\nif ( userInput &amp; 1 ) ; wtf is this doing? IDA flags userInput as _BYTE\n{\n  v54 = &amp;userInput;  // \n  v55 = &amp;userInput;  // This is literally junk. Has no use. Would be nice to clean this up but how?\n  v56 = &amp;userInput;  //\n  length_of_userInput = *((_QWORD *)&amp;userInput + 1); I have been able to only trigger this\n}\nelse\n{\n  v51 = &amp;userInput;  //\n  v52 = &amp;userInput;  // This is literally junk. Has no use. Would be nice to clean this up but how?\n  v53 = &amp;userInput;  //\n  length_of_userInput = (signed int)userInput &gt;&gt; 1; No clue what this is doing\n} \n</code></pre>\n<p>This is the actual assembly if you prefer it:</p>\n<pre><code>mov     [rbp+user_input], rcx\nmov     rcx, [rbp+user_input]\nmovzx   edx, byte ptr [rcx]\nand     edx, 1\ncmp     edx, 0\njz ....\n</code></pre>\n<p>EDIT: Someone in the comments asked for the disassembly of mightGetUserInput: <a href=\"https://pastebin.com/zVF96bEK\" rel=\"nofollow noreferrer\">here it is</a>. DISCLAIMER: This is the pseudocode generated by IDA. It's pretty ugly and big.</p>\n<p>I don't really know the size of userInput. It's either referred as void * or as __int64. If this is wrong (and can guide me through IDA, feel free to correct me).</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "99",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "G. Ramistella",
    "time": "Mar 1, 2019 at 20:02",
    "comments": [
        {
            "user": "wisk",
            "text": "<span class=\"comment-copy\">Can you give the size of the var <code>userInput</code> and the disassembly of <code>mightGetUserInput</code>. I would say the original code should be something like: int userInput; std::cin &gt;&gt; userInput; if (userInput &amp; 1) {...} else {...}</span>",
            "time": null
        },
        {
            "user": "G. Ramistella",
            "text": "<span class=\"comment-copy\">@wisk I added everything in the post.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>At it's most basic level, this code piece checks if the lowest bit of a given variable is set. As mentioned, one possibility is that this code checks if the variable is a even number.</p>\n<p>Another option (which to me seems more reasonable given the limited context provided), is that the least significant bit is used as a flag/bit-field to signify the state of a value. </p>\n<p>Several commonly seen options are:</p>\n<ol>\n<li>specifying whether something is initialized.</li>\n<li>what's the type of the value; either a string or an integer, for example. This can be seen in Javascript VMs, for example. To avoid storing an additional field.</li>\n<li>An encoding of variable length values. ASN1, for example, encodes it's <em>variable-length length fields</em> dedicating a bit to whether this is the last byte of the length field.</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "NirIzr",
            "time": "Mar 3, 2019 at 12:41",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>it may be a check for odd numbers </p>\n<p><a href=\"https://i.sstatic.net/6zi5t.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/6zi5t.jpg\"/></a></p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Mar 2, 2019 at 4:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}