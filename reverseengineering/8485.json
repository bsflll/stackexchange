{
    "title": "How to detect address changes in the IDA SDK?",
    "link": "https://reverseengineering.stackexchange.com/questions/8485/how-to-detect-address-changes-in-the-ida-sdk",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm developing a custom memory viewer in Python for IDA. Obviously I need to know current EA. For now, I just ask user to supply it through <code>AskAddr()</code> and it works fine. However, I'd like my plugin to integrate with IDA better. For example, if I click on a function in the functions window, or click anything in the navigator, it should open my window (if it's focused already), not the hex view or disassembly view. Well, at least I'd expect it to. I don't believe opening these is hardcoded in IDA's internals, since we can get as many hex/disassembly views as we want, and IDA always uses the last one as EA handler... so they are probably registering themselves somehow.</p>\n<p>What I've tried was to use <a href=\"https://code.google.com/p/idapython/source/browse/trunk/examples/ex_uihook.py\" rel=\"nofollow\">UI hooks</a>, but they simply do not register the desired events. If I click on the navigator, it shows nothing, but if I press <kbd>G</kbd>, it correctly receives <code>JumpAsk</code> event. So it seems to work on a whim. The other thing I've tried was to use <a href=\"http://www.hexblog.com/?p=119\" rel=\"nofollow\"><code>simplecustviewer_t</code></a> that offers <code>OnCursorPosChanged</code>, but apparently it handles changing position of a text caret in a window, not EA \"cursor\" changes.</p>\n<p>Is there any way I can hook up into these kind of events?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "527",
    "tags": [
        "ida",
        "ida-plugin",
        "idapython"
    ],
    "user": "rr-",
    "time": "Mar 17, 2015 at 22:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>idc.ScreenEA()</code> is your friend.</p>\n<pre><code>ScreenEA()\nGet linear address of cursor\n</code></pre>\n<p>You can either open a thread which will ask this value once per some time, or add synchronization menu item into your custom view or use PyQt4 capabilities to check setting focus on the window instead of simplecustviewer_t.</p>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "Mar 18, 2015 at 6:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rr-",
                    "text": "<span class=\"comment-copy\">This sounds close to what I want. However, if one changes <code>ScreenEA</code>, it opens up a hex view or IDA view regardless if my plugin window had focus or not. So essentially I'll need to be stealing focus from user under circumstances I consider \"right\" in my thread that checks for window focus. This feels kludgy. Isn't there a better solution?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I don;t know why should you steal the focus. You can make a dock-able python plugin window as it wrote at  <a href=\"http://www.hexblog.com/?p=229\" rel=\"nofollow noreferrer\">hexblog.com/?p=229</a></span>",
                    "time": null
                },
                {
                    "user": "rr-",
                    "text": "<span class=\"comment-copy\">Yep, that's what I do. Uhm, let me draw this... <a href=\"https://i.imgur.com/W9BWHSX.png\" rel=\"nofollow noreferrer\">i.imgur.com/W9BWHSX.png</a></span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">OK, I understand you. I'd suggest to use QObject's timers on a object you get from FormToPySideWidget function to get the ScreenEA once a second. This will allow you to update the window regardless any focus issues.</span>",
                    "time": null
                }
            ]
        }
    ]
}