{
    "title": "LoadLibrary from memory",
    "link": "https://reverseengineering.stackexchange.com/questions/6423/loadlibrary-from-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use <a href=\"http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/\" rel=\"nofollow\">http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/</a> to loadlibrary from memory.\nbut when use in my code \"throw\" program crashing.\nWhat's the problem?</p>\n<p>code i use like this:</p>\n<pre><code>#include &lt;excpt.h&gt;\n#include &lt;windows.h&gt;\n void func()\n{\n __try{\n  MessageBoxA(0,\"try\",\"try\",0);\n  if (1)\n  {\n   throw 10;\n  }\n }__finally{\n  MessageBoxA(0,\"finally\",\"finally\",0);\n }\n}\nvoid DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)\n{\n try\n {\n  func();\n }\n catch(int a)\n {\n  MessageBoxA(0,\"catch\",\"catch\",0);\n }\n</code></pre>\n<p>when call \"throw 10;\" program crashing.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c++",
        "dll",
        "pe"
    ],
    "user": "user2522767",
    "time": "Oct 11, 2014 at 6:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The answer differs on x86 and x64, I'm only going to answer for x86.</p>\n<p>There are various types of exception dispatching mechanisms. Your code uses SEH.</p>\n<p>As SEH was abused in <a href=\"https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/\" rel=\"nofollow\">exploits</a>(e.g. MS03-026) Microsoft decided to protect against that with SafeSEH introduced in Server 2003.  </p>\n<p><a href=\"http://sota.gen.nz/veh/seh_xp.txt\" rel=\"nofollow\">http://sota.gen.nz/veh/seh_xp.txt</a> is an annotated decompiled version for XP.<br/>\nIt starts in RtlDispatchException(), the function that is of concern in this problem is RtlIsValidHandler().  </p>\n<p>Firstly it calls RtlLookupFunctionTable() which looks through the PEB to find the image the handler resides in. MemoryModule does NOT add your library to the PEB lists of loaded modules - so that won't find your DLL.<br/>\nBut after returning there is a further check - all handler must reside in memory pages marked as <code>SEC_IMAGE</code>. This value cannot be set by usermode code.</p>\n<p>There are some ways around this: </p>\n<ul>\n<li>Switch to VEH exceptions</li>\n<li>build a VEH handler that recognizes exception from your code (<a href=\"https://github.com/DarthTon/Blackbone\" rel=\"nofollow\">BlackBone</a> does that) and handles them </li>\n<li>hook functions to lie that your DLL has the image flag.</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "user45891",
            "time": "Oct 11, 2014 at 14:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}