{
    "title": "Create exe that jumps directly into main()-function from C",
    "link": "https://reverseengineering.stackexchange.com/questions/32131/create-exe-that-jumps-directly-into-main-function-from-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using x64dbg to explore image files on Windows. After the computer finishes prowling ntdll.dll it jumps to OptionalHeader.AddressOfEntryPoint.\nBut this is not my main()-function.</p>\n<ol>\n<li>What is this code in my EXE that is not mine?</li>\n<li>Can you remove it so there is only my main()-function remaining?</li>\n<li>Do you know a way to find the main()-function easily?</li>\n</ol>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "115",
    "tags": [
        "c",
        "pe",
        "x64dbg"
    ],
    "user": "AirToTec",
    "time": "Aug 4, 2023 at 16:12",
    "comments": [
        {
            "user": "josh poley",
            "text": "<span class=\"comment-copy\">You are looking at CRT initialization. You don't say what toolset you are using but with microsoft tooling, look at the <a href=\"https://learn.microsoft.com/en-us/cpp/build/reference/entry-entry-point-symbol\" rel=\"nofollow noreferrer\">/ENTRY</a> linker flag.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code that runs before your <code>main</code> function is the C Runtime (CRT) initialization code. There are ways to remove it, such as via the <code>/NODEFAULTLIB</code> and <code>/ENTRY</code> command-line options to the linker, but be careful what you wish for. If any of your code calls functions in the C standard library (such as <code>printf</code>, <code>malloc</code>, etc.), you will not be able to link your code into a final binary unless you provide your own implementations for those functions. Your implementations must be from scratch; you won't be able to rely upon any standard library functions, or implement them using any third-party library that itself relies upon the standard library. This is not a beginner-friendly task, to put it mildly.</p>\n<p>To find the <code>main</code> function in a binary: first, note that tools such as IDA do this automatically. To do it manually, first familiarize yourself with the CRT functions that execute before <code>main</code>, find where it calls <code>main</code>. Then, for any given binary, you can locate the address of <code>main</code> by examining those CRT functions around the locations where they call <code>main</code>.</p>\n</div>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Aug 4, 2023 at 21:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}