{
    "title": "Decoding New Jersey Driver's License Codes",
    "link": "https://reverseengineering.stackexchange.com/questions/6440/decoding-new-jersey-drivers-license-codes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Driver's License numbers in New Jersey aren't random. They follow <a href=\"http://www.highprogrammer.com/alan/numbers/dl_us_nj.html\" rel=\"nofollow noreferrer\">the format: <code>Affff lllii mmyye</code></a>, where <code>A</code> is the first letter of the person's last name, <code>ffff</code> is some mapping of the remaining letters of the last name to a four digit numeric, <code>lll</code> is a mapping of the full first name to a three digit numeric and <code>ii</code> is a code representing the middle initial (according to the below table:</p>\n<pre><code>|   | 6 | 7 | 8 |\n|---|---|---|---|\n| 1 | a | j |   |\n| 2 | b | k | s |\n| 3 | c | l | t |\n| 4 | d | m | u |\n| 5 | e | n | v |\n| 6 | f | o | w |\n| 7 | g | p | x |\n| 8 | h | q | y |\n| 9 | i | r | z |\n</code></pre>\n<p>Where the number corresponding to the initial is 10*column number + row number.  mm corresponds to the month born, and <code>yy</code> to the year born.  <code>e</code> is the eye color (a value 1-8 corresponding to <code>BRO</code>, <code>BLU</code>, <code>GRY</code>, <code>GRN</code>, <code>BLK</code>, etc.)</p>\n<p>The only thing I don't understand is how the names are mapped to the integer values.  I only have 5 examples for the last name mappings: (ignoring the first letter because it doesn't play into the mapping</p>\n<pre><code>aab    -&gt; 0001\nackson -&gt; 0062\neals   -&gt; 2024\neimel  -&gt; 2278\nounds  -&gt; 6810\n</code></pre>\n<p>For first names, I only have four:</p>\n<pre><code>Alexander -&gt; 019\nRichard   -&gt; 655\nJohn      -&gt; 407\nMatthew   -&gt; 529\n</code></pre>\n<p>Does anyone have any ideas how the implementation is done, or even a general mapping function that will hash a max 25 length string to a four digit or three digit number while maintaining lexicographical order (&lt;=, not &lt;).</p>\n<p><strong>Things I've Tried</strong></p>\n<p><em>Convert each letter to a number 1-26.</em>  Then, taking only the first four numbers, create the number by the rule 26^3 * first number + 26^2 * second number + 26 * third + fourth.  Then, divide this number by 26^4 + 26^3 + 26^2 + 26, and multiply by 10000 to map the decimal into 0-9999.  This produces the following mappings:</p>\n<pre><code>aab -&gt; 0000\nackson -&gt; 0035\neals -&gt; 1547\nemiel -&gt; 1722\nounds -&gt; 5695\n</code></pre>\n<p><em>Get a list of the top 10,000 most common surnames.</em>  Order by the second letter, and then check the index.  This produces the following mappings:</p>\n<pre><code>aab -&gt; 0005\nackson -&gt; 0128\neals -&gt; 2813\nemiel -&gt; 3235\nounds -&gt; 7588\n</code></pre>\n<p><em>Each letter subdivides the 10,000</em>.  The first number (according to 1-26) cuts it into one of 26 pieces.  The second cuts the piece into one of 26, and so on and so forth.  This produces the following mappings:</p>\n<pre><code>aab -&gt; 0000\nackson -&gt; 0028\neals -&gt; 1536\nemiel -&gt; 1648\nounds -&gt; 5656\n</code></pre>\n<p><em>Convert each of the first four letters to 1-26.</em>  Concatenate all of them, multiply the resulting number by 10,000, and divide by 26262626.  This produces the following mappings:</p>\n<pre><code>aab -&gt; 0003\nackson -&gt; 0392\neals -&gt; 1908\nemiel -&gt; 1953\nounds -&gt; 5792\n</code></pre>\n<p><em>Do the above with 0-25, divide by 25252525.</em>  This produces the following mappings:</p>\n<pre><code>aab -&gt; 0000\nackson -&gt; 0008\neals -&gt; 1584\nemiel -&gt; 1631\nounds -&gt; 5623\n</code></pre>\n<p><strong>Additional Samples</strong></p>\n<p>While I believe all of the above samples are correct, I tried to track down more authentic sample data points.  Ones that I can guarantee are below:</p>\n<p>Last Names</p>\n<pre><code>avis -&gt; 0921\neals -&gt; 2024\nolff -&gt; 6247\norello -&gt; 6581\n</code></pre>\n<p>First Names</p>\n<pre><code>Alexander -&gt; 019\nAndrew -&gt; 042\nGabriel -&gt; 270\nLena -&gt; 456\n</code></pre>\n</div>",
    "votes": "5",
    "answers": 6,
    "views": "72k",
    "tags": [
        "encryption",
        "encodings"
    ],
    "user": "Alex Beals",
    "time": "Mar 20, 2018 at 19:21",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">FYI, it might not be a mathematical mapping, but rather an index into a list of common names. To help test this hypothesis, it would be useful if you could find someone with a very uncommon first name and see if its mapping is something like 000 or 999.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@AlexBeals: assuming you're a US citizen, can't you file a FOIA request?</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">@0xC0000022L: It doesn't appear to be completely random. Note that #(Alexander) &lt; #(John) &lt; #(Matthew) &lt; #(Richard), so the numbering respects the lexicographic ordering of the names.</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Yes, I realize that the other approaches get you close as well. I'm just defending my very first comment above where I suggested it was a possibility that it's not a mathematical mapping.</span>",
            "time": null
        },
        {
            "user": "DTS",
            "text": "<span class=\"comment-copy\">Alex Beals you are correct about Soundex in the sense that it is used to decode the first 4 letters of the Quebec driver's license.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not yet a complete answer, but perhaps what I've found can be combined with other information to come up with the complete solution.</p>\n<h2>First name encoding</h2>\n<p>If we assume a linear encoding, then we have everything needed to figure this out based on your four samples.  If we consider letter values as <code>a=0, b=1, ...</code> regardless of whether they're uppercase or lowercase, your four samples can be turned into four linear equations:</p>\n<pre><code>a*0 +b*11+c*4 +d*23 =  19  (Alex)\na*12+b*0 +c*19+d*19 = 529  (Matt)\na*9 +b*14+c*7 +d*13 = 407  (John)\na*17+b*8 +c*2 +d*7  = 655  (Rich)\n</code></pre>\n<p>Since we have four equations and four unknowns, it's easily solved using simple but tedious algebra or in matrix form using Gaussian elimination.  (Sorry for the ugly looking math, but unlike other StackExchange sites apparently ReverseEngineering doesn't support MathML, which is unfortunate.)</p>\n<p>If you do so, you get the following values:</p>\n<pre><code>a = 83700 / 2279\nb = 9484  / 2279\nc = 16030 / 2279\nd = −5441 / 2279\n</code></pre>\n<p>All very neat and accurate, but there's a problem, which is that <em>any</em> four samples would result in some answer.  The question is whether it works for all possible names, and unfortunately, the answer is <strong>no</strong>.</p>\n<h2>Further samples</h2>\n<p>I did some searching on the internet and found a few more samples.  Here's an image of <a href=\"http://vault.fbi.gov/ghost-stories-russian-foreign-intelligence-service-illegals/images/mikhail-semenkos-new-jersey-drivers-license-and-seton-hall-id-card/view\" rel=\"noreferrer\">a Russian spy's New Jersey license</a> and here is a <a href=\"http://www.state.nj.us/transportation/refdata/accident/pdf/NJTR1-Police_Guide.pdf\" rel=\"noreferrer\">Police guide</a> (see page 60).  This <a href=\"http://www.state.nj.us/mvc/pdf/Licenses/understanding-abstract.pdf\" rel=\"noreferrer\">pamphlet from the NJ MVC</a> encodes \"Dennis J. Driver\" as  D4047-16371</p>\n<p>If we try the first name equation above on these new samples, they fail, so it's not quite right.  The result suggests that the weighting is not quite so simple.  When searching, I also found that both Ontario and Québec licenses appear to use the same first and last name encodings.  So for example, this <a href=\"http://arleneanddennis.files.wordpress.com/2012/04/ontario-temperary-driver176.jpg\" rel=\"noreferrer\">temporary Ontario permit</a> verifies that \"Dennis\" is encoded as 163 in Ontario as well as in New Jersey.</p>\n<p>When I run a linear regression on all of the first name values vs. the first letter <code>l</code> (encoded as <code>a=0, b=1, ...</code>) I get the equation <code>32.42*l+52.55</code> with an <a href=\"http://www.graphpad.com/guides/prism/6/curve-fitting/index.htm?r2_ameasureofgoodness_of_fitoflinearregression.htm\" rel=\"noreferrer\">R^2 value</a> of 0.986 which shows this to be highly linear.</p>\n<h2>Last name experiment</h2>\n<p>I tried a very simple experiment with the last name encoding which was a very simplistic method not mentioned in your list of things you have tried.  That was to simply consider each character as a base-26 digit.  Using the 4 characters following the first, the encodings for \"Baab\" and \"Jackson\" are correctly obtained, but no others matched.  </p>\n<h2>Other encoding schemes</h2>\n<p>I did some searching for existing encoding schemes.  Soundex was both easily found and easily discounted, but there are many variations to it and it's possible that some expanded variation was used. I was not able to locate a Soundex variant that produced these particular values, but I learned some interesting things along the way.  </p>\n<p>First, perhaps not surprisingly, there has long been a need to try to match up names in a database using some kind of encoding.  Generically, the problem is called <em>record-linking</em> and is typically thought of as mathing a possibly misspelled name to a subset of possible matches in a database.  Soundex has been used for this purpose, but found to be <a href=\"http://arizona.openrepository.com/arizona/bitstream/10150/106000/1/wang.pdf?origin=publication_detail\" rel=\"noreferrer\">somewhat lacking</a> in effectiveness.</p>\n<p>Other schemes I have located, or at least located references to include:</p>\n<ol>\n<li><a href=\"http://adsabs.harvard.edu/abs/1966SPhD...10..707L-title=The\" rel=\"noreferrer\">Levenshtein edit distance</a></li>\n<li><a href=\"http://www.vigliensoni.com/McGill/CURSOS/2012_01/MUMT609/9_REFERENCES/jaro89advances.pdf\" rel=\"noreferrer\">Jaro record-linkage methodology</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Phonetic_algorithm\" rel=\"noreferrer\">various phonetic algorithms</a></li>\n<li><a href=\"http://www.oclc.org/support/services/dewey/program/instructions.en.html\" rel=\"noreferrer\">Cutter-Sanborn Four-Figure</a> used to encode author names for libraries</li>\n</ol>\n<p>This <a href=\"https://rockymadden.com/stringmetric/\" rel=\"noreferrer\">stringmetric project</a> has what appears to be a nice collection of algorithm implementations with links to the original describing papers, but I haven't tried all of these.</p>\n<p>Perhaps if someone does, they can report back here.</p>\n</div>",
            "votes": "7",
            "user": "Edward",
            "time": "Oct 19, 2014 at 15:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In case you're still trying to figure this out, I've made some progress. With assistance from u/jccool5000 on reddit <em>(<a href=\"https://www.reddit.com/r/ontario/comments/6ja9yh/ontarios_drivers_license_number_formatencoding/\" rel=\"nofollow noreferrer\">post</a>)</em>, who has a collection of over 900 samples mostly from Ontario. AFAIK, Ontario and NJ share the same encoding - Quebec, not so sure. I did some data manipulation to figure this out. </p>\n<p>Starting with the numbers of the last name, 1st of 4 digits corresponds to the 2nd letter of the last name, as the 1st is already coded directly to the first letter of the license number.</p>\n<pre><code>0 = A\n1 = B C D\n2 = E\n3 = F G H\n4 = I J K\n5 = L M N\n6 = O\n7 = P Q R\n8 = S T\n9 = U V W X Y Z\n</code></pre>\n<p>The remaining three numerical digits codes the second letter of the last name as well, from 000-999. However, each second-digit has its own 000-999 range. That is to say:</p>\n<ul>\n<li>Hypothetical last name XA is X0001</li>\n<li>Hypothetical last name XAZZZ is X0999, or something close to 999.</li>\n<li>Hypothetical last name XB is X1001 </li>\n<li>Hypothetical last name XDZZZ is X1999, or something close to 999.</li>\n<li>Hypothetical last name XE is X2001</li>\n<li>Hypothetical last name XEZZZ is X2999, or something close to 999.</li>\n</ul>\n<p>You can refer to the above table to see when the 999 will reset back to 000. This is just the pattern I've found so far. I don't know how the numbers are distributed to the names.</p>\n<p>First name code is a lot simpler, but at the same time, it's also not evenly distributed. The difference with first name code is it only goes from 000 (Aaron) to probably 799 (796 for Zoe). What I mean by not evenly distributed is names that start with A range from 000 to 071, which 071 has some names that start with BA. Meanwhile, names that begin in Y are confined to a small range of no less than 785 to no more than 792.</p>\n</div>",
            "votes": "6",
            "user": "Ian Boyd",
            "time": "Apr 15, 2019 at 7:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't see this above, but male or female is coded in as well. in the last five digits, the first 2 are month of birth. Males are  01-12. Females 50 is added. so the run from 51 (january) to 62 (december)\nAlso, my name is Alexandra, which is also 019 as is your example of alexander.\n   The absence of a middle name is reflected as 00\ni know a friend with middle name alexandra has 61 = (ii)\nanother, is Serafina middle name 82 = (ii)\nanother, is Dorothy middle name  64 = (ii)\nI would suggest collecting more name samples to compare</p>\n</div>",
            "votes": "5",
            "user": "alexandra",
            "time": "Sep 23, 2016 at 2:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Many states use something called SoundEx to generate license numbers (sometimes you even see SoundEx on government forms and/or computer screens when they ask for drivers license numbers.)</p>\n<p>The soundex system was designed to phonetically map names that sound similar to close values, even though they might be spelled wildly differently eg Pheiffer vs Fifer)</p>\n<p>See also things like Metaphone.  Also, they may not use soundex directly.</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Soundex\" rel=\"nofollow\">Wikipedia Soundex</a></p>\n</div>",
            "votes": "4",
            "user": "BitShifter",
            "time": "Oct 15, 2014 at 19:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Alex Beals",
                    "text": "<span class=\"comment-copy\">I've looked into SoundEx, which is an interesting system, but it doesn't apply for New Jersey (already checked it).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I filed a FOIA request with the DMV. As I said many years ago, this was almost definitely protected information and likely to be rejected, but here's the formal response to that effect.</p>\n<p><strong>Request #W165699</strong></p>\n<p>Under the New Jersey Open Public Records Act, N.J.S.A. 47:1A-1 et seq., I am requesting an opportunity to inspect or obtain copies of public records that describe the algorithm for mapping first and last names to drivers license ID numbers (a Soundex-esque derivative). If there are any fees for searching or copying these records, please inform me if the cost will exceed $10. However, I would also like to request a waiver of all fees in that\nthe disclosure of the requested information is in the public interest. This information is not being sought for commercial purposes.The New Jersey Open Public Records Act requires a response time of seven business days. If access to the records I am requesting will take longer than this amount of time, please contact me with information about when I might expect copies or the ability to inspect the requested records. Preferably I would\nlike to receive all information through electronic records sent to my email address. If you deny any or all of this request, please cite each specific exemption you feel justifies the refusal to release the information and notify me of the appeal procedures available to me under the law. Thank you for considering my request.</p>\n<p><strong>Response (Excerpted)</strong></p>\n<p>The algorithm information you seek is exempt from disclosure by the Drivers' Privacy Protection Act, the\nOpen Public Records Act, New Jersey Court Rules and Executive Order Number 21.</p>\n<p>Further, N.J.S.A. 47:1A-1.1 provides:</p>\n<blockquote>\n<p>A government record shall not include the following\ninformation which is deemed to be confidential for\nthe purposes of P.L. 1963, c. 73 (C.47:1A-1 et seq.)\nas amended and supplemented:...trade secrets and\nproprietary commercial or financial information\nobtained from any souce...</p>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "Alex Beals",
            "time": "Nov 14, 2020 at 18:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I believe the name is represented in something called the Soundex Code: the numbers represent the sounds of the last &amp; first name. I can't quickly find the article I read breaking down the code for NJ licenses, but here is a general entry:\n<a href=\"https://www.tutorialgateway.org/sql-soundex-function/\" rel=\"nofollow noreferrer\">https://www.tutorialgateway.org/sql-soundex-function/</a></p>\n</div>",
            "votes": "0",
            "user": "bozz",
            "time": "Oct 27, 2020 at 1:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Alex Beals",
                    "text": "<span class=\"comment-copy\">Would love a source for this! I'm reasonably sure that it's not entirely true because \"eals\" and \"aab\" are relatively similar in terms of vowel dropping, which is what most Soundex codes use. In general, we would expect \"eals\" to be similar to \"aals\", but it appears that the former is in the 2000 range, while as the former would be closer to 0000.</span>",
                    "time": null
                }
            ]
        }
    ]
}