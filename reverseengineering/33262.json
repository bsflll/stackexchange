{
    "title": "wzr register usage in main method on ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/33262/wzr-register-usage-in-main-method-on-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have this C code :</p>\n<pre class=\"lang-none prettyprint-override\"><code>\nint foo(){\n    int a = 1;\n    int b = 1;\n    return a + b;\n}\n\n\nint main() {\n    return 2;\n}\n</code></pre>\n<p>After disassembling it shows:</p>\n<pre><code>foo():\n        sub     sp, sp, #16\n        mov     w8, #1\n        str     w8, [sp, #12]\n        str     w8, [sp, #8]\n        ldr     w8, [sp, #12]\n        ldr     w9, [sp, #8]\n        add     w0, w8, w9\n        add     sp, sp, #16\n        ret\n\nmain:\n        sub     sp, sp, #16\n        str     wzr, [sp, #12]\n        mov     w0, #2\n        add     sp, sp, #16\n        ret\n</code></pre>\n<p>Why does <code>main</code> method use <code>wzr</code> register on this line <code>str     wzr, [sp, #12]</code> while <code>foo</code> method doesn't?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "68",
    "tags": [
        "disassembly",
        "arm",
        "arm64"
    ],
    "user": "pacman",
    "time": "Oct 15, 2024 at 21:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'll take guess that you are using <code>clang</code> and running it without optimisations.\nNormally when looking at generated code without optimisations, there is lots of seeming superfluous code output and that's the simple answer</p>\n<p>Here though, there is more going on.  This is clear to see if we change the source code a bit.</p>\n<pre><code>int main2() {\n    return 42;\n}\n\nint main() {\n    return 42;\n}\n</code></pre>\n<p>Despite two, on the face of it, identical functions, we see different code output.</p>\n<pre><code>main2:\n    mov     w0, #42\n    ret\n\nmain:\n    sub     sp, sp, #16\n    str     wzr, [sp, #12]\n    mov     w0, #42\n    add     sp, sp, #16\n    ret\n</code></pre>\n<p>This difference is also visible in clang's LLVM IR output, which is the precursor to the generated assembly code.</p>\n<pre><code>define dso_local i32 @main2() {\nentry:\n  ret i32 42\n}\n\ndefine dso_local i32 @main() {\nentry:\n  %retval = alloca i32, align 4\n  store i32 0, ptr %retval, align 4\n  ret i32 42\n}\n</code></pre>\n<p>This difference is highly likely because <code>main</code> is a special function in <code>C</code>.</p>\n<p><a href=\"https://stackoverflow.com/a/207992/366486\">This answer</a> on stackoverflow explains what makes <code>main</code> special.  Of particular interest is the fact that <code>main</code> doesn't need to have an explicit return statement and, in the absence of one, it is specified in the standard to return zero.</p>\n<p>It is highly likely that what is seen in the LLVM IR and assembly language output above is part of <code>clang</code>'s preparation to handle this case by setting up a local variable with value zero.</p>\n<p>If you compiled with optimisations, the difference will disappear.</p>\n<hr/>\n<p>Where this gets a little more unexpected is we look at 2 more variations -</p>\n<ul>\n<li>main explicitly returns 0</li>\n<li>main implicitly returns 0</li>\n</ul>\n<p>Consistent with the above, in the first case, <code>clang</code> sets up the <code>%retval</code> variable but doesn't use it.</p>\n<p>However, in the second case, and somewhat counter-intuitively, when the code is relying on the implicit behaviour <code>clang</code> skips setting up <code>%retval</code> completely and simply returns a zero directly.</p>\n<p>First case -</p>\n<pre><code>// main explicitly returning 0\n\n// C\n\nint main() {\n    return 0;\n}\n\n// LLVM IR\n\ndefine dso_local i32 @main() {\nentry:\n  %retval = alloca i32, align 4\n  store i32 0, ptr %retval, align 4\n  ret i32 0\n}\n\n// AArch64\n\nmain:\n    sub     sp, sp, #16\n    mov     w0, wzr\n    str     wzr, [sp, #12]\n    add     sp, sp, #16\n    ret\n</code></pre>\n<p>Second case -</p>\n<pre><code>// main implicitly returning 0\n\n// C\n\nint main() {\n}\n\n// LLVM IR\n\ndefine dso_local i32 @main() {\nentry:\n  ret i32 0\n}\n\n// AArch64\nmain:\n    mov     w0, wzr\n    ret\n</code></pre>\n<hr/>\n<p>There are a couple of very similar questions on stackoverflow\n<a href=\"https://stackoverflow.com/questions/69233253/why-does-main-have-retval-in-ll-file-llvm\">here</a> and <a href=\"https://stackoverflow.com/questions/59610063/why-does-llvm-allocate-a-redundant-variable/61566244\">here</a></p>\n</div>",
            "votes": "5",
            "user": "Ian Cook",
            "time": "Oct 20, 2024 at 21:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}