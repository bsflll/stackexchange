{
    "title": "What is the need of the Rotation Operation?",
    "link": "https://reverseengineering.stackexchange.com/questions/15579/what-is-the-need-of-the-rotation-operation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know that <code>shl</code> instruction is like the <code>mul</code> operation and the <code>shr</code> instruction is like the <code>div</code> operation and it's used for optimization.</p>\n<p>For example, <code>shl eax, n</code> is a more efficient way to implement <code>eax = (eax)*(2^n)</code> without any multiplication instructions.</p>\n<p>Now I am reading about <code>rol</code> and <code>ror</code> assembly instructions and I got how it works, but I don't know what is the point of the rotation operation in general and when to use it?</p>\n</div>",
    "votes": "3",
    "answers": 4,
    "views": "373",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Ahmad Kouraiem",
    "time": "Jul 12, 2018 at 10:52",
    "comments": [
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">Optimization is a secondary use of these instructions. They are mainly there to reproduce boolean algebra constructs necessary for implementing certain concepts in a more natural way. Generally, these instructions are VERY usefull when doing signal processing, cryptography, ... They are the +, *, /, - you usually use in arithmetics but used on a a binary set {0, 1} rather than an infinite set. <a href=\"https://en.wikipedia.org/wiki/Binary_operation\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Binary_operation</a> <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Bitwise_operation</a></span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">@yaspr are you able to turn this comment into an answer?</span>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">Sure, I'll set it up with better explanations. @SYS_V</span>",
            "time": null
        },
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\"><a href=\"https://stackoverflow.com/q/4976636/995714\">What's the purpose of the rotate instructions (ROL, RCL on x86)?</a>. On microcontrollers rotate through carry is commonly used to do a multiword shift</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>I know that <code>shl</code> instruction is like <code>mul</code> operation, and <code>shr</code> is like <code>div</code> operation, and it's used for optimization.</p>\n</blockquote>\n<p>It is somewhat of an incorrect statement. Those operations are <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" rel=\"nofollow noreferrer\">bitwise operations</a>. These operations are the basis of <a href=\"https://en.wikipedia.org/wiki/Boolean_algebra\" rel=\"nofollow noreferrer\">Boolean Algebra</a> and  they're used whenever bit level manipulation is required. Applications may include bitfield/flag manipulation, working with hardware devices, network protocols, decoding/encoding, compression and many other uses. </p>\n<p>Additionally, logical shifts have the interesting property of being efficient ways to perform multiplication or division of unsigned integers by powers of two. This is a side-effect and not the purpose of those operations. This property is also true for <em>arithmetic</em> shift operations and <em>signed</em> integers.</p>\n<p>Similarly, <a href=\"https://en.wikipedia.org/wiki/Circular_shift\" rel=\"nofollow noreferrer\">rotation bitwise operations</a> have their own applications such as in cryptographic models (encryption, hashing), for example.</p>\n</div>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Jul 12, 2018 at 10:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Rotations of bitfield or '<em>circular shifts</em>' are very often used in cryptography as an non-linear operator to achieve what they call '<em>confusion</em>' (trying to break all the statistical links between the clear-text and the cipher-text).</p>\n<p>The classical graphical representation of the rotation-left is quite self explanatory:</p>\n<p><a href=\"https://i.sstatic.net/NYm8n.png\" rel=\"nofollow noreferrer\"><img alt=\"Rotate-left\" src=\"https://i.sstatic.net/NYm8n.png\"/></a></p>\n<p>But, it also has a meaning in pure arithmetic. It can be seen as a multiplication and an addition like that (<code>n</code> is the size of the bitfield):</p>\n<pre><code>rotate-left (a, 0) = a\nrotate-left (a, 1) = 2^(1).a + 2^(-n).a\nrotate-left (a, 2) = 2^(2).a + 2^(1-n).a\n...\nrotate-left (a, n-1) = 2^(n-1).a + 2^(-1).a\nrotate-left (a, n) = a\n</code></pre>\n<p>In C language you might interpret this with only bitwise operators as follow (see the <a href=\"https://en.wikipedia.org/wiki/Circular_shift\" rel=\"nofollow noreferrer\">Wikipedia article about circular shift</a>):</p>\n<pre><code>uint32_t rotl32 (uint32_t value, unsigned int count) \n{\n  return ((value &lt;&lt; count) | (value &gt;&gt; (32 - count)));\n}\n</code></pre>\n<p>Anyway, the rotations are often neglected in most of the programming languages. You cannot find it easily in C for example. But, this is mainly because:</p>\n<ol>\n<li>Only cryptography is using it (and few other very low-level domains).</li>\n<li>It can be implemented as a function with the provided operators (it does not increase the expressive power of the language to add it to the language).</li>\n</ol>\n<p>Yet, all the assembler languages propose rotations operators because they can be source of a lot of optimizations at low-level.</p>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "Jul 12, 2018 at 14:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Data lossy shifts: <code>shl eax,n : eax = ( eax*(2^n) ) %(2^32)</code> and <code>shr eax,n : eax = floor( eax/(2^n) )</code></p>\n<p>Generally found in fast unchecked or logic bound integer arithmetic optimizations on a single data value e.g. address offsets for repeated size records.</p>\n<p>Data lossless rotate: <code>rol eax,n : eax = shl eax,n or shr eax,32-n</code></p>\n<p>Generally used in cryptography, checked arithmetic optimizations or arithmetic on a string of data values (search long multiplication) or shifting graphical bit masks e.g. <code>rol eax,8</code> gives: <code>and eax,0xFFFFFF00</code> <code>eax *2^8</code> for this data value and <code>and eax,0x000000FF</code> carry or overflow to next more significant data value.</p>\n</div>",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Jul 12, 2018 at 9:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The other proposed answers are clearly the primary applications of rotate instructions; however, I (perhaps somewhat uniquely) use them as a means to non-destructively <a href=\"http://dsasmblr.com/accessing-and-modifying-upper-half-of-registers/\" rel=\"nofollow noreferrer\">access data in the upper half of 32-bit and 64-bit registers</a> (primarily when dealing with packed data while reversing video game coordinate data).</p>\n<p>Since there are no instructions that specifically do that task, it's necessary to shift (destructive) or rotate (non-destructive) that data to the lower half of registers so it can be accessed/modified accordingly.</p>\n</div>",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jul 12, 2018 at 21:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}