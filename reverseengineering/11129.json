{
    "title": "Reverse unknown undocumented architecture - a tough challenge",
    "link": "https://reverseengineering.stackexchange.com/questions/11129/reverse-unknown-undocumented-architecture-a-tough-challenge",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a very interesting challenge in which you need to reverse a firmware without knowing anything about the firmware format, or the architecture. It is highly likely that the architecture is something special, without any documentation at all (think about some military chips, for example).</p>\n<p><a href=\"http://queue.acm.org/unprogramming.cfm\" rel=\"nofollow\">http://queue.acm.org/unprogramming.cfm</a></p>\n<p>I am looking at this, but stuck on what is the approach to this problem. Any ideas? </p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "firmware"
    ],
    "user": "user311703",
    "time": "Apr 28, 2017 at 12:49",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Reversing an unknown data dump, from an unknown origin (USA? China? Taiwan? – so you don't even know if there may be <i>plain text</i> in it?) and for an unknown processor and device (washing machine? cell phone? guided missile?) is extremely difficult – but, unlike the explicit <i>challenge</i> you point to, how often is that going to happen?</span>",
            "time": null
        },
        {
            "user": "Piotr Król",
            "text": "<span class=\"comment-copy\">This problem happens pretty often in hardware security analysis when you face unknown microcontroller with connected SPI which according to vendor contain firmware. BTW if anyone missing above link you can find <a href=\"https://web.archive.org/web/20160304030848/https://queue.acm.org/unprogramming.cfm\" rel=\"nofollow noreferrer\">article on archive.org</a>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There was a good talk at <a href=\"http://www.recon.cx/2012/\" rel=\"nofollow\">Recon 2012</a> on how to reverse engineer a program written for an unknown processor:</p>\n<ul>\n<li><a href=\"http://www.recon.cx/2012/schedule/events/236.en.html\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"http://www.recon.cx/2012/schedule/attachments/40_Chernov-Troshina.pdf\" rel=\"nofollow\">Slides</a></li>\n</ul>\n<p>P.S. The <a href=\"http://queue.acm.org/fullcomments.cfm?id=640139\" rel=\"nofollow\">comments</a> on that challenge were very enjoyable to read ;)</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Oct 17, 2015 at 16:43",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently started reverse engineering a firmware from a device for which I had not documentation other than the interfaces to it. The presentation provided in the previous answer is very helpful. I thought I would complement it with some of my experience from my current project.</p>\n<h3>Strings</h3>\n<p>My first step in any RE project is to extract the strings - both ASCII and Unicode. Sometimes, <code>strings</code> or IDA may not find everything, you may need to conduct a review of the hex code as some programs may have some uncommon encoding mechanism. While the presence of string may not provide you much in some cases, the absence of any string is a strong indication of compression or encryption. In my case, I was able to retrieve copyright notices containing information about some internal programs, along with a copyright notice for the real-time operating system included. Most helpful.</p>\n<p>Be careful with <code>binwalk</code>, which will often provide false positive for uncommon firmware. Don't rely on its output.</p>\n<h3>Structure</h3>\n<p>Many firmware will have a similar structure, i.e. some initialization, maybe an interrupt vector with a RESET interrupt at the beginning, then eventually jump to a bootstrapping section, which will load further components into memory. I found the <a href=\"http://sourceforge.net/projects/bin2bmp/files/bin2bmp/0.1.6/\" rel=\"nofollow\">bin2bmp</a> tool useful to provide an overview of the contents. Note: if you use this tool in Windows, you will need the <a href=\"http://www.pythonware.com/products/pil/\" rel=\"nofollow\">Python Imaging Library</a></p>\n<p>Additionally, each program within the firmware will have sections for code and data at least. The code section will be much larger than the data section, and from my experience, precedes the data section. Combined with the <code>bin2bmp</code> tool, you can start identifying code sections. Additional sections for heap, static variables and exception handling may be added.</p>\n<h3>Functions</h3>\n<p>Most developers will use C/C++ as their language, sometimes Assembly. When C/C++ is used, you can safely assume some instructions to occur fairly often. The presentation from Recon mention the <code>RET</code> instruction, which I found true. Furthermore, the function epilogs and prologs are often similar across the entire firmware. If you can have some statistics about the count of the instructions, you may be able to identify a particular byte/word/dword to the <code>RET</code> instruction. Afterwards, observe the 2-3 previous bytes/words and verify if they reoccur together across the code section, indicating you may have found the epilog of functions. You can use IDA in plain binary mode to search byte strings easily. Prologs of functions will often consist of a <code>POP</code> instruction to store the returning address or load arguments. The epilog usually contains a <code>PUSH</code> instruction prior to the <code>RET</code>. You can then attempt to locate online for instruction sets which have a <code>POP</code>/<code>PUSH</code> instruction corresponding to the byte/words you have identified. Consider endianness when analyzing the binary.</p>\n<h3>Other resources:</h3>\n<p>I'm including these documents I found useful on my project, which may help you as well:</p>\n<ul>\n<li><a href=\"https://media.blackhat.com/us-13/US-13-Zaddach-Workshop-on-Embedded-Devices-Security-and-Firmware-Reverse-Engineering-Slides.pdf\" rel=\"nofollow\">Embedded Devices Security Firmware Reverse Engineering</a></li>\n<li><a href=\"https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-costin.pdf\" rel=\"nofollow\">A Large-Scale Analysis of the Security of Embedded Firmwares</a></li>\n</ul>\n<p>I'll be monitoring that question, as I'm eager to see what else can be done to understand firmwares with uncommon architectures.</p>\n</div>",
            "votes": "4",
            "user": "InfectedPacket",
            "time": "Oct 19, 2015 at 17:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">binvis.io is also good for visualizing unknown binaries. And binwalk's entropy plots (<code>-E</code>) can be helpful too.</span>",
                    "time": null
                }
            ]
        }
    ]
}