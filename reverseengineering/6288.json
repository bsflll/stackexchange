{
    "title": "How does sysenter instruction in windows 7 work?",
    "link": "https://reverseengineering.stackexchange.com/questions/6288/how-does-sysenter-instruction-in-windows-7-work",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How does the sysenter instruction work?\nWhat instruction is called after sysenter?\nIs the next instruction saved in a register?</p>\n<pre><code>mov     edx,esp\nsysenter\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "6k",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "kernel-mode"
    ],
    "user": "user2522767",
    "time": "Sep 23, 2014 at 10:24",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">it goes into ring 0 typically with edx pointing to the parameters and eax being the 'id' of what to do</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">possible duplicate of <a href=\"http://reverseengineering.stackexchange.com/questions/2869/how-does-sysenter-work-under-linux\">How does sysenter work under Linux?</a></span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I am suspecting that <code>sysenter</code> works the same for Linux and Windows... But, I didn't try with Windows, so you need to try out.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@perror: the linked question explains how to use <code>sysenter</code> to call Linux syscalls. It does not explain how <code>systenter</code> works on the CPU level.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">@Igor : Right, I probably misunderstood the question. Sorry.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is a perfect explanation how <code>sysenter</code> works: <a href=\"http://www.osronline.com/article.cfm?id=257\" rel=\"noreferrer\">http://www.osronline.com/article.cfm?id=257</a></p>\n<p>In essence:\nAll native API calls from User Mode have a body that simply loads an index into EAX, executes <code>SystemCallStub</code>, and returns</p>\n<p>SystemCallStub saves a pointer to the top of the User Mode stack into EDX and executes a SYSENTER instruction</p>\n<p>SYSENTER disables interrupts, switches the thread into Kernel Mode and executes the instruction located in the SYSENTER_EIP_MSR (which on XP SP1 is KiFastCallEntry)</p>\n<p><code>KiFastCallEntry</code> builds a trap frame so it knows where to go when returning back to User Mode, enables interrupts, and jumps into <code>KiSystemService</code></p>\n<p><code>KiSystemService</code>, amongst doing other things, copies the parameters from the User stack (pointed to by EDX) and takes the value previously stored in EAX and executes the function located at KiServiceTable[EAX]</p>\n<p>The native API now executes in Kernel Mode with the previous mode of the thread set to User Mode</p>\n</div>",
            "votes": "9",
            "user": "pHiL",
            "time": "Sep 23, 2014 at 11:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2522767",
                    "text": "<span class=\"comment-copy\">exactly can you say where save address eiP after call sysenter in returning to user mode?in stack or register?</span>",
                    "time": null
                },
                {
                    "user": "pHiL",
                    "text": "<span class=\"comment-copy\">a trap frame is used and setup for EIP after returning to user-mode. read about how trap frames work exactly</span>",
                    "time": null
                },
                {
                    "user": "user2522767",
                    "text": "<span class=\"comment-copy\">Did you mean Nowhere saving? can you show me a reference about trap frames work? tanx</span>",
                    "time": null
                },
                {
                    "user": "pHiL",
                    "text": "<span class=\"comment-copy\">the trap frame is set in kernel-mode so you cant modify it from user-mode. If you want to learn more, search for \"interrupts, traps, exceptions\"</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>SYSENTER</code> instruction affects many registers, but most importantly it sets <code>EIP</code> to the value of the <code>SYSENTER_EIP_MSR</code> register (in IA-32 terminology). At boot-time, Windows sets <code>SYSENTER_EIP_MSR</code> to the address of <code>ntoskrnl!KiFastCallEntry()</code>.</p>\n<p>So at a high-level, <code>SYSENTER</code> \"jumps\" to <code>ntoskrnl!KiFastCallEntry()</code>.</p>\n<p>For more details, see <a href=\"http://www.codeguru.com/cpp/misc/misc/system/article.php/c8223/%22System-Call-Optimization-with-the-SYSENTER-Instruction.htm\" rel=\"nofollow\">http://www.codeguru.com/cpp/misc/misc/system/article.php/c8223/%22System-Call-Optimization-with-the-SYSENTER-Instruction.htm</a> and <a href=\"http://trapframe.org/just-enough-kernel-to-get-by-2/\" rel=\"nofollow\">http://trapframe.org/just-enough-kernel-to-get-by-2/</a>.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Sep 23, 2014 at 11:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}