{
    "title": "What is libm_sse2_sin_precise() and how to find it's parameters in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/30494/what-is-libm-sse2-sin-precise-and-how-to-find-its-parameters-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm new to reverse engineering with IDA.</p>\n<p>I've found libm_sse2_sin_precise while inspecting c-pseudocode for some Win32 executable.</p>\n<p><a href=\"https://i.sstatic.net/85SVo.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/85SVo.png\"/></a></p>\n<p>I tried clicking that function but the executable requires the DLLs.</p>\n<p>So, I cannot view the pseudocode for that function.</p>\n<p><a href=\"https://i.sstatic.net/2Bmlf.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2Bmlf.png\"/></a></p>\n<p>Can anyone tell What's the libm_sse2_sin_precise and How do I find parameters for that function.</p>\n<p>Disassembly around the call:\n<a href=\"https://i.sstatic.net/qBTaj.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/qBTaj.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "257",
    "tags": [
        "ida",
        "disassembly",
        "assembly"
    ],
    "user": null,
    "time": "Jun 10, 2022 at 5:21",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">MSVC calls __libm_sse2_sin_precise when compiling for 32-bit x86. see <a href=\"https://stackoverflow.com/questions/1844669/benefits-of-x87-over-sse\" title=\"benefits of x87 over sse\">stackoverflow.com/questions/1844669/benefits-of-x87-over-sse</a></span>",
            "time": null
        },
        {
            "user": "user41255",
            "text": "<span class=\"comment-copy\">@sudhacker Got it! Thanks! But how do I find the parameters of that function?</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Can you add the disassembly around the call?</span>",
            "time": null
        },
        {
            "user": "user41255",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky Yes.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From the disassembly, I looks like the function uses xmm0 as input and returns the result in xmm0 as well.</p>\n<p>Because x86 code normally uses stack for passing arguments, the decompiler fails to detect this automatically, so you need to specify the function prototype manually using <code>__usercall</code>. Something like</p>\n<pre><code>double __usercall sin_sse&lt;xmm0&gt;(double &lt;xmm0&gt;);\n</code></pre>\n<p>Should work.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 10, 2022 at 6:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}