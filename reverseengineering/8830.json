{
    "title": "Expressing trace semantics as a solution for a fixpoint equation",
    "link": "https://reverseengineering.stackexchange.com/questions/8830/expressing-trace-semantics-as-a-solution-for-a-fixpoint-equation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was reading through the chapter on Obfuscation in \"Practical Reverse Engineering\" I encountered the following statement.</p>\n<blockquote>\n<p>Where X is the set of execution traces (finite and infinite), you can\n  express the trace semantics as the least solution (for the\n  computational partial ordering) of a fixpoint equation X = F( X).</p>\n</blockquote>\n<p>Could someone explain what that means in simple terms? If you could point me towards any resources for further reading and learning, that'd be great too.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "115",
    "tags": [
        "obfuscation",
        "program-analysis"
    ],
    "user": null,
    "time": "May 6, 2015 at 19:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You may consult pages 39-41 in the thesis </p>\n<blockquote>\n<p>\"Code Obfuscation and Malware Detection by Abstract Interpretation\"</p>\n</blockquote>\n<p>of M. Dalla Preda about formal obfuscation; or sections 4.4 and 4.5 in the orignal paper </p>\n<blockquote>\n<p>\"Systematic Design of Program Transformation Frameworks by Abstract\n  Interpretation\"</p>\n</blockquote>\n<p>of Cousot and Cousot.</p>\n<p>The theory is formal and requires much more technical details than the following interpretation, but the idea is that:</p>\n<p>The \"finite trace\" semantics of a program <code>P</code> is defined by the set of all finite traces of <code>P</code>. A trace is nothing but a finite sequence of states of <code>P</code>, obtained when running <code>P</code>, step-by-step over \"commands\" of <code>P</code>. </p>\n<p>(You may note that, from a state, we can get a set of possible next states, because the command at this state can be nondeterministic: it can receive some value from environment).</p>\n<p>To calculate the finite trace semantics of <code>P</code>, one way (which one is refered in your book) is to use a function <code>F</code> defined from FinSeqs to FinSeqs:</p>\n<pre><code>F : FinSeq -&gt; FinSeq\n</code></pre>\n<p>where <code>FinSeqs</code> is the set of all \"sub-set of finite sequences of states of <code>P</code>\" (you may think that each sub-set is a possible value for the \"finite trace\" semantics of <code>P</code>). </p>\n<p>This function <code>F</code> map a sub-set <code>X</code> to a sub-set <code>X'</code> so that each trace <code>x'</code> of <code>X'</code> has a trace <code>x</code> of <code>X</code> as suffix (that is the reason why it is called \"backward\" in the paper of Cousot and Cousot). Particularly, we have that</p>\n<pre><code>x' = sj . x\nx = si . x1\n</code></pre>\n<p>and <code>sj</code> must be able to be a next state of <code>si</code>. The least fixpoint of the function <code>F</code>, namely some set <code>Xp</code> so that</p>\n<pre><code>F(Xp) = Xp\n</code></pre>\n<p>is called the trace semantics of <code>P</code>.</p>\n</div>",
            "votes": "1",
            "user": "Ta Thanh Dinh",
            "time": "May 7, 2015 at 0:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}