{
    "title": "Which calling convention to use for EAX/EDX in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/3030/ida-declare-a-function-that-passes-return-value-on-fpu-stack",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some code (I assume Delphi) which uses only the EAX and EDX register for passing the arguments (and of course the stack if more are required). I looked which calling conventions would match, but I haven't found one which uses only EAX and EDX. \nAFAIK Borland fastcall/register is using EAX and EDX, but also ECX, which is not the case here.</p>\n<p>Can I tell IDA somehow about this calling convention? How would I do this?</p>\n</div>",
    "votes": "15",
    "answers": 3,
    "views": "11k",
    "tags": [
        "ida",
        "calling-conventions"
    ],
    "user": "Devolus",
    "time": "Oct 27, 2013 at 9:31",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Can you paste some code which uses EAX, EDX and stack <i>without</i> ECX?</span>",
            "time": null
        },
        {
            "user": "Devolus",
            "text": "<span class=\"comment-copy\">After looking into this in more detail, it seems that ECX is indeed used, and that the code usually doesn't need more than two arguments. When I looked at functions with more arguments, I realized that it was the standard with EAX/EDX/ECX/PUSH...</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Okay, so mystery solved then.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can add a function type by editing it (Key Y) and adding the name.</p>\n<p>I wrote a <a href=\"http://code.google.com/p/corkami/wiki/CallingConventions\" rel=\"noreferrer\">page</a> to remind me about calling conventions at ASM level.</p>\n<h2>Introduction</h2>\n<p>the original call is <code>myfunc(0,1,2,3,4)</code>.</p>\n<ul>\n<li>standard order is first argument is pushed last.</li>\n<li>standard stack adjusting is '<em>callee cleanup</em>' - after returning, the stack should be without its calling arguments. </li>\n</ul>\n<p><strong>Note</strong>: the stack looks vertically like the call order.</p>\n<h2>stdcall (stack only)</h2>\n<pre><code>push    4\npush    3\npush    2\npush    1\npush    0\ncall    myfunc\nxor     eax,eax\nretn    10\n</code></pre>\n<h2>Fastcall (ecx, edx)</h2>\n<p>This is actually Microsoft's fastcall.</p>\n<pre><code>push    4\npush    3\npush    2\nmov     edx,1\nxor     ecx,ecx\ncall    myfunc\nxor     eax,eax\nretn    10\n</code></pre>\n<h2>CDECL &amp; syscall (caller cleanup)</h2>\n<pre><code>push    4\npush    3\npush    2\npush    1\npush    0\ncall    myfunc\nadd     esp,014\nxor     eax,eax\nretn    10\n</code></pre>\n<h2>Pascal (reverse order, ebx saved, even if ebx is unused...)</h2>\n<pre><code>push    ebx\npush    0\npush    1\npush    2\npush    3\npush    4\ncall    myfunc\nxor     eax,eax\npop     ebx\nretn    10\n</code></pre>\n<h2>Fortran/watcall (eax, edx, ebx, ecx, then stack - ebx is saved)</h2>\n<p>Apparently it's not so clear what the fortran calling convention is, and this one is even different from raymond's post's The <code>__fortran</code> calling convention isn't the calling convention used by FORTRAN.</p>\n<pre><code>push    ebx\npush    4\nmov     ecx,3\nmov     ebx,2\nmov     edx,1\nxor     eax,eax\ncall    myfunc\nxor     eax,eax\npop     ebx\nretn    10\n</code></pre>\n<h2>Delphi 'registers' calling convention (default)</h2>\n<p>Uses <code>eax</code>, <code>ecx</code>, <code>edx</code> as first 3 arguments. Other arguments are pushed on stack in reverse order.</p>\n<pre><code>push    3\npush    4\nmov     ecx, 2\nmov     edx, 1\nxor     eax,eax\ncall    myfunc\nxor     eax,eax\nretn    10\n</code></pre>\n</div>",
            "votes": "24",
            "user": "David",
            "time": "Jan 20, 2017 at 8:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">The <code>retn 10</code> line at the end of each example is a red herring and likely to confuse. Its value has nothing to do with the examples' calling of <code>myfunc</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you run into a calling convention which is not covered by any of the standard calling conventions you can use the <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1361.shtml\" rel=\"noreferrer\">__usercall or __userpurge calling convention</a> which allows you to specify which arguments are passed where. The syntax is </p>\n<pre>\nreturn_type __usercall function_name&lt;<i>registers</i>&gt;(arg0_type arg0&lt;<i>registers</i>&gt;, arg1_type arg1&lt;<i>registers</i>&gt;, ...)\n</pre>\n<p>Where <i>registers</i> can be a grouping of registers separated by the ':' character if the argument occupies more than one register.</p>\n<p>If you're in a really shitty spot calling convention wise you can use the full syntax as described <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1492.shtml\" rel=\"noreferrer\">here</a>. Where you instead of simply typing the register name holding the argument you can describe arguments being passed in parts of registers or stack elements. The syntax is as above only with <i>registers</i> replaced by</p>\n<pre>\n&lt;argoff:register^regoff.size&gt;\n</pre>\n<p>or if the argument is passed on the stack</p>\n<pre>\n&lt;argoff:^stkoff.size&gt;\n</pre>\n</div>",
            "votes": "12",
            "user": "Igor Skochinsky",
            "time": "Nov 10, 2013 at 18:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Delphi and Borland C++ Builder use <code>EAX</code>, <code>EDX</code> and <code>ECX</code> for the first three arguments in their variant of the <a href=\"http://en.wikipedia.org/wiki/Fastcall#fastcall\" rel=\"nofollow\"><code>__fastcall</code> calling convention</a>. So if you choose \"Delphi\" or \"C++ Builder\" in Options-Compiler, you can just use <code>__fastcall</code> in the function prototype - no need to resort to <code>__usercall</code>.</p>\n</div>",
            "votes": "5",
            "user": "Ange",
            "time": "Oct 28, 2013 at 14:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">The original poster said that the calling convention only uses EAX and EDX not ECX. It sounds odd to me.</span>",
                    "time": null
                }
            ]
        }
    ]
}