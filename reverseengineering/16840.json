{
    "title": "What does this instruction pairs mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/16840/what-does-this-instruction-pairs-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know if it is asked but, I couldn't find it anything despite <a href=\"https://stackoverflow.com/questions/35240343/unable-to-understand-a-disassembling-of-a-function\">this</a> question. Is it because of disassembler's fault? Or if it is right, why compiler generates this code?</p>\n<pre><code> ; int __cdecl main(int argc, const char **argv, const char **envp)\n main            proc near               ; CODE XREF: start-7Bp\n\n var_4           = dword ptr -4\n argc            = dword ptr  8\n argv            = dword ptr  0Ch\n envp            = dword ptr  10h\n\n                 push    ebp\n                 mov     ebp, esp\n                 push    ecx\n                 call    ds:GetCurrentProcessId\n                 mov     [ebp+var_4], eax ; &lt;---\n                 mov     eax, [ebp+var_4] ; &lt;---\n                 push    eax\n                 push    offset output\n                 call    printf\n                 add     esp, 8\n\n debugger_wait:                          ; CODE XREF: main+28j\n                 call    ds:IsDebuggerPresent\n                 test    eax, eax\n                 jnz     short debugger_present\n                 jmp     short debugger_wait\n ; ---------------------------------------------------------------------------\n\n debugger_present:                       ; CODE XREF: main+26j\n                 int     3               ; Trap to Debugger\n                 xor     eax, eax\n                 mov     esp, ebp\n                 pop     ebp\n                 retn\n main            endp\n</code></pre>\n<p>Marked lines with arrows (from IDA output) shows two <strong>MOV</strong> operations which semantically equals to nothing (or is it?). This is my source code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;Windows.h&gt;\n\nint main(int argc, char *argv[], char *envp[])\n{\n    DWORD pid = GetCurrentProcessId();\n    printf(\"%d\\n\", pid);\n    while (!IsDebuggerPresent());\n    __asm int 0x3;\n    return 0;\n}\n</code></pre>\n<p>Compiled with MSVC++ (19.00.24225.1):</p>\n<pre><code>cl.exe dnmProg.c\n</code></pre>\n<p>UPDATE: I tried other options, and both /O1 and /O2 doesn't have such structure, but /Ot has same instruction pair. When I compiled it with /Os there is:</p>\n<pre><code>call    ds:GetCurrentProcessId\nmov     [ebp+var_4], eax ; &lt;---\npush    [ebp+var_4]      ; &lt;---\npush    offset printf_parameter\ncall    printf_\n</code></pre>\n<p>Thanks.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "320",
    "tags": [
        "disassembly",
        "compilers"
    ],
    "user": "Kerim Can Kalıpcıoğlu",
    "time": "Aug 8, 2018 at 11:39",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">if you compile in debug  mode the compilrr normally saves  the return values i so it saved eax to dwird pid and then used the saved pid for printf</span>",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<span class=\"comment-copy\">You mean Visual Studio's debug mode? I examined Visual Studio modes. Indeed debug mode has same pair but with lots of other differences in code and debugging structures. In release mode there is a nop before IsDebuggerPresent which I don't know if it is related or not.</span>",
            "time": null
        },
        {
            "user": "Abr001am",
            "text": "<span class=\"comment-copy\">@de6f release mode involves alot of optimisations of the naive code, there is why there is a difference in length.</span>",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<span class=\"comment-copy\">Understand that but, why compiler generating that code in first place? Any other advantage for that?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">@de6f  you hhave a statemeny pid = blah   compiler aassigned a local var pid in stack ebp-xx and stored the result of blah there  then you havve a printf the compiler then reused the local  it doesnt keep in mind the result is in eax already it does as told when in debug mode compilationn when you tell it to optimize it eliminates the pair  also in debug mode the pair helps source level debugging</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code uses this non-optimal form in order to match the original code.  It is saving the value in the local \"pid\" variable so that a debugger can see it.  Then it is fetching the value again in order to use it.</p>\n</div>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Dec 1, 2017 at 16:12",
            "is_accepted": true,
            "comments": []
        }
    ]
}