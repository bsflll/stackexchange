{
    "title": "Executing an IDAPython script with arguments within IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/13286/executing-an-idapython-script-with-arguments-within-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an IDAPython script x.py which takes some arguments, which prevents me from simply using <kbd>alt</kbd> + <kbd>F7</kbd> and selecting my script.</p>\n<p>How can I execute this script within IDA Pro and specify the arguments for the script?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "9k",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin"
    ],
    "user": "Fee",
    "time": "Sep 12, 2016 at 8:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Naturally, the best way would be editing the script and have it ask the user for those parameters. IDA has quite a few ways of doing that. You could use one or several of the many <code>idc.Ask*</code> functions. Such as: <code>AskYN</code>, <code>AskLong</code>, <code>AskSelector</code>, <code>AskFunction</code>, <code>AskFile</code> and others. Sometimes when multiple input parameters are needd, it becomes inconvenient to ask for many speciif values, you could then create a full blown dialog instead.</p>\n<p>You could create a new process using <code>popen</code> or something similar, but I can't say I recommend doing that.</p>\n<p>If depends on how the python script you're trying to execute is implemented, but you're probably better off trying to include/import it in one pythonic way or another.</p>\n<h2>Importing a protected module</h2>\n<p>If the script is properly written, it probably wraps any execution functionality with an <code>if __name__ == \"__main__\"</code> clause, protecting such cases as executing when imported. If that's the case, simply import it with an <code>import modulename</code> and then call its main/whatever.</p>\n<h2>Importing a <code>sys.argv</code> module</h2>\n<p>If the module directly uses <code>sys.argv</code> and you cannot/would not prevent it from doing so, you can mock your <code>sys.argv</code> before importing the module. Simply doing something like the following should work:</p>\n<p><code>sys.argv = ['./script.py', 'command', 'parameter1', 'parameter2', 'optional']\nimport script\n</code></p>\n<h2>Calling <code>execfile</code> of the file</h2>\n<p>If neither of those approaches works for you, you can always directly call <code>execfile</code> and completely control the context in which the python script is executed. You should read the documentation of <code>execfile</code> and <code>eval</code> <a href=\"https://docs.python.org/2/library/functions.html#execfile\" rel=\"nofollow\">here</a> and <a href=\"https://docs.python.org/2/library/functions.html#eval\" rel=\"nofollow\">here</a>, respectively.</p>\n</div>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Sep 12, 2016 at 8:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}