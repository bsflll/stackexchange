{
    "title": "Common practices for 'hiding' a class within an Android application?",
    "link": "https://reverseengineering.stackexchange.com/questions/20002/common-practices-for-hiding-a-class-within-an-android-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've recently gotten into Android reverse engineering, and I've been messing around with some apps lately for education/research purposes to see how some things are done with private (mobile) APIs.</p>\n<p>One of the apps I have been testing is giving me some weird behavior. After decompiling the APK, I've noticed there is a class which is completely missing, although I am able to see the class when tracing with Frida.</p>\n<p>The developer must have 'hidden' this class somehow, right? Is this something to do with ProGuard/DexGuard? Or is it possible the developer has simply included an entire Java class in an encrypted string hidden in another Java class? I'm stumped trying to figure out how this kind of thing would be possible, but I am looking to learn.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "267",
    "tags": [
        "disassembly",
        "android",
        "java",
        "apk"
    ],
    "user": "codsane",
    "time": "Nov 29, 2018 at 2:20",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">Both are possible. You can check whether it is a decompiler bug by using a better tool like baksmali. This should show the classes, even if they are \"hidden\" by decompiler bugs. If it still doesn't show up, it is probably being dynamically loaded somehow.</span>",
            "time": null
        },
        {
            "user": "codsane",
            "text": "<span class=\"comment-copy\">@Antimony, thank you. I'll take a look at baksmali. I'll also do some research on dynamically loaded classes/code. Thank you.</span>",
            "time": null
        }
    ],
    "answers_data": []
}