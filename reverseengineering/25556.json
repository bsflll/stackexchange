{
    "title": "Windows pintool mismatch between call/ret instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/25556/windows-pintool-mismatch-between-call-ret-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So i've been trying to write a pintool that monitors call/ret instructions but i've noticed that threre was a significant inconsistency between the two. For example ret instructions without previous call.</p>\n<p>I've run the tool in a console application from which a number of inconsistencies can be observed. Below are the first 3 log entries showing this inconsistency:</p>\n<pre><code>1. Call from ntdll!LdrpCallInitRoutine+0x69, expected to return to 7ff88f00502a\n2. RETURN to 7ff88f00502a\n//call from ntdll!LdrpInitializeNode+0x1ac which is supposed to return at 7ff88f049385 is missing (the previous instruction)\n3. RETURN to 7ff88f049385 (ntdll!LdrpInitializeNode+0x1b1)\n</code></pre>\n<p>The above are the first 3 log entries for the call/ret instructions. As one can see, the monitoring appears to start a bit late, at the call found at <code>ntdll!LdrpCallInitRoutine+0x69</code>, after which it returned to the expected address but then returned to 7ff88f049385 without first tracking the call found in the previous instruction.</p>\n<p>Any ideas of what could be the fault?</p>\n<p>The program is traced with <code>INS_AddInstrumentFunction</code> with a callback that more or less does:</p>\n<pre><code>if INS_IsCall(ins) INS_InsertCall(ins,...\nif INS_IsRet(ins) INS_InsertCall(ins,...\n</code></pre>\n<p>I've tried the same program on Linux which worked as expected, without any mismatch.\nAny ideas of the reason behind this behavior?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "70",
    "tags": [
        "windows",
        "x86-64",
        "pintool"
    ],
    "user": "tturbox",
    "time": "Jul 26, 2020 at 21:58",
    "comments": [
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">You don't have to use <code>CALL</code> instruction to call a function, you can for example do <code>push back_address; jmp func_address</code>, and it will work as the <code>call</code> instruction</span>",
            "time": null
        },
        {
            "user": "tturbox",
            "text": "<span class=\"comment-copy\">that's true, but is this what's happening? For example, for some of those \"inconsistencies\" i have checked, there was always a call instruction before the return address, which makes me believe that they are actually called.</span>",
            "time": null
        }
    ],
    "answers_data": []
}