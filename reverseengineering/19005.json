{
    "title": "Why code subtracts 60 from esp when the length of the variable is 64",
    "link": "https://reverseengineering.stackexchange.com/questions/19005/why-code-subtracts-60-from-esp-when-the-length-of-the-variable-is-64",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was following a tutorial that introduced stack overflows. Here is the c Code.</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv)\n{\n  volatile int modified;\n  char buffer[64];\n\n  modified = 0;\n  gets(buffer);\n\n  if(modified != 0) {\n      printf(\"you have changed the 'modified' variable\\n\");\n  } else {\n      printf(\"Try again?\\n\");\n  }\n}\n</code></pre>\n<p>and heres the disassembled main function</p>\n<pre><code>0x080483f4 &lt;main+0&gt;:    push   ebp\n0x080483f5 &lt;main+1&gt;:    mov    ebp,esp\n0x080483f7 &lt;main+3&gt;:    and    esp,0xfffffff0\n0x080483fa &lt;main+6&gt;:    sub    esp,0x60\n0x080483fd &lt;main+9&gt;:    mov    DWORD PTR [esp+0x5c],0x0\n0x08048405 &lt;main+17&gt;:   lea    eax,[esp+0x1c]\n0x08048409 &lt;main+21&gt;:   mov    DWORD PTR [esp],eax\n0x0804840c &lt;main+24&gt;:   call   0x804830c &lt;gets@plt&gt;\n0x08048411 &lt;main+29&gt;:   mov    eax,DWORD PTR [esp+0x5c]\n0x08048415 &lt;main+33&gt;:   test   eax,eax\n0x08048417 &lt;main+35&gt;:   je     0x8048427 &lt;main+51&gt;\n0x08048419 &lt;main+37&gt;:   mov    DWORD PTR [esp],0x8048500\n0x08048420 &lt;main+44&gt;:   call   0x804832c &lt;puts@plt&gt;\n0x08048425 &lt;main+49&gt;:   jmp    0x8048433 &lt;main+63&gt;\n0x08048427 &lt;main+51&gt;:   mov    DWORD PTR [esp],0x8048529\n0x0804842e &lt;main+58&gt;:   call   0x804832c &lt;puts@plt&gt;\n0x08048433 &lt;main+63&gt;:   leave\n0x08048434 &lt;main+64&gt;:   ret\n</code></pre>\n<p>I understand that when it says <code>sub esp,60</code> it's making a stack frame for the <em>Main</em> function. So why does it initialize the modified variable(<code>mov  DWORD PTR [esp+0x5c],0x0</code>) at 5c in the stack frame and not at the bottom? Also, why does it only make room for 60 items(<code>sub esp,60</code>) when it knows there will be set length of 64?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "420",
    "tags": [
        "stack",
        "buffer-overflow"
    ],
    "user": "sajdnv",
    "time": "Aug 7, 2018 at 13:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Because it's 0x60 i.e. 96 in decimal. So it actually allocates 64 bytes for the <em>buffer</em>, then 4 bytes for <em>modified</em>. And the rest is 0x1ะก, which compiler added as a spare in the debug build.</p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Aug 7, 2018 at 14:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}