{
    "title": "How tools like PEiD find out the compiler and its version.",
    "link": "https://reverseengineering.stackexchange.com/questions/16060/how-tools-like-peid-find-out-the-compiler-and-its-version",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>How tools like PEiD and CFF explorer find out the compiler and its version.</strong> </p>\n<p>I am analyzing a executable file. Which shows: Borland Delphi 3.0 \n<a href=\"https://i.sstatic.net/ZGieG.jpg\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZGieG.jpg\"/></a></p>\n<p>But the section names .text .rsrc. Which is usually not get generated by Borland Delphi compiler.\n<a href=\"https://i.sstatic.net/MJ8aV.jpg\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/MJ8aV.jpg\"/></a></p>\n<p>I guess the file version info is modified. </p>\n<p><strong>But how these tools find out the compiler version ??</strong></p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "5k",
    "tags": [
        "windows",
        "malware",
        "pe",
        "executable"
    ],
    "user": "Dinesh D",
    "time": "Aug 11, 2017 at 5:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The signature database of many Compiler and Packer detectors, and sometimes even their source-code, is freely available and you can actually read the signatures in clear-text.  </p>\n<p>Genrally, the detector performs very naive checks to detect the compiler/linker/protector/etc which based on a preset mask of bytes. The mask is combined from a sequence of bytes and wildcards that usually represents a magic number, a piece of code or a string that gives information about the file.</p>\n<p>To understand it better let's look at different detections to Borland 3.0 by different detectors.</p>\n<p><strong>PEiD</strong>:</p>\n<pre><code>[Borland Delphi v3.0]\nsignature = 50 6A ?? E8 ?? ?? FF FF BA ?? ?? ?? ?? 52 89 05 ?? ?? ?? ?? 89 42 04 E8 ?? ?? ?? ?? 5A 58 E8 ?? ?? ?? ?? C3 55 8B EC 33 C0\nep_only = true\n</code></pre>\n<p>In order to detect Borland Delphi v3.0, PEiD is searching for this sequence of bytes in the entry point of the binary. The '??' are wildcards used to ignore the bytes in these locations because they might not be the same in different binaries.</p>\n<blockquote>\n<p>You can find the databse of PEiD <a href=\"https://raw.githubusercontent.com/ynadji/peid/master/userdb.txt\" rel=\"noreferrer\">here</a>.</p>\n</blockquote>\n<p><strong>CFF Explorer</strong>:</p>\n<pre><code>&lt;ENTRY&gt;\n    &lt;NAME&gt;Borland Delphi v3.0&lt;/NAME&gt;\n    &lt;COMMENTS /&gt;\n    &lt;ENTRYPOINT&gt;506A??E8????FFFFBA????????528905????????894204E8????????5A58E8????????C3558BEC33C0&lt;/ENTRYPOINT&gt;\n    &lt;ENTIREPE /&gt;\n&lt;/ENTRY&gt;\n</code></pre>\n<p>Although the format of the signature might look different then <em>PEiD</em>'s, it is actually the same mask as in the previous example.  </p>\n<blockquote>\n<p>You can usually find the signatures database of <em>CFF explorer</em> in the\n  following path <em>C:\\Users\\Public\\Documents\\Explorer\n  Suite\\Signatures\\IMAGE_FILE_MACHINE_I386.xml</em> or in <em>/Signatures/IMAGE_FILE_MACHINE_I386.xml</em> although it\n  may be different in your installation. You can also find it online\n  <a href=\"https://github.com/uxmal/reko/blob/master/src/Decompiler/Loading/Signatures/IMAGE_FILE_MACHINE_I386.xml\" rel=\"noreferrer\">here</a>.   Read <a href=\"http://www.codelooker.com/dfilec/2204CFFExplorer/SignaturesTechnicalDetails.pdf\" rel=\"noreferrer\">this PDF</a> for more technical information about\n  the signatures and how the used in <em>CFF Explorer</em>.</p>\n</blockquote>\n<p><strong>Detect It Easy:</strong> </p>\n<p><em>Detect It Easy</em> is more complex, rich and accurate detector (in my opinion) which uses \"scripts\" to detect the type of the program. The detection algorithm of <em>DIE</em> is more complex then the others and doesn't use only byte-mask to detect the Compiler/Linker/Packer/etc.<br/>\nYou can see how <em>DIE</em> detects <em>Borland Delphi</em> in the <a href=\"https://github.com/horsicq/Detect-It-Easy/blob/be67f3c71455e561175639456021e57ddb2b35ae/db/PE/Delphi.4.sg\" rel=\"noreferrer\">following signature</a>.  </p>\n<p>The signature of Borland Delphi is too long so I'll show here another example of a signature, the signature of <em>NTKrnl Protector</em>:  </p>\n<pre><code>// DIE's signature file\n\ninit(\"protector\",\"NTkrnl Protector\");\n\nfunction detect(bShowType,bShowVersion,bShowOptions)\n{\n    if(PE.compareEP(\"68........e8\")&amp;&amp;(PE.nLastSection&gt;=1))\n    {\n        if(PE.getNumberOfImports()==1)\n        {\n            if(PE.getNumberOfImportThunks(0)==2)\n            {\n                if((PE.getImportFunctionName(0,0)==\"LoadLibraryA\")&amp;&amp;(PE.getImportFunctionName(0,1)==\"GetProcAddress\"))\n                {\n                    if(PE.isSignatureInSectionPresent(1,\"'http://www.ntcore.com  '\"))\n                    {\n                        sVersion=\"0.1\";\n                        bDetected=1;\n                    }\n                    else if(PE.isSignatureInSectionPresent(1,\"'http://www.ntkrnl.com'\"))\n                    {\n                        sVersion=\"0.15\";\n                        bDetected=1;\n                    }\n                    /* if(bDetected)\n                    {\n                        var nFind=PE.findString(PE.section[1].FileOffset,PE.section[1].FileSize,\"Version \");\n                        if(nFind!=-1)\n                        {\n                            sVersion=PE.getString(nFind,20);\n                            var aVersion=sVersion.match(/Version ?(.*?) /);\n                            sVersion=aVersion[1];\n                        }\n                    } */\n                }\n\n            }\n        }\n    }\n    /*if(PE.compareEP(\"68........e8........c3\")&amp;&amp;(PE.compareEP(\"68########60e8$$$$$$$$5d4555c3\")))\n    {\n        bDetected=1;\n    } */\n\n    return result(bShowType,bShowVersion,bShowOptions);\n}\n</code></pre>\n<blockquote>\n<p>You can read more about <em>Detect it Easy</em> in its <a href=\"https://github.com/horsicq/Detect-It-Easy\" rel=\"noreferrer\">Github\n  repository</a>.</p>\n</blockquote>\n<hr/>\n<p>Remember that most of the times the bytes in the binary which represent the type of the file can be replaced without harming the functionality of the program. There are even many programs like <em>GcPH</em>, <em>PseudoSigner</em> and <em>DotFix FakeSigner</em> that try to fool Packer Detectors like the mentioned above. Some of the detectors might actually detect some of these anti-detectors in what seems like cat and mouse game.  </p>\n<p>Here's an example of how PEiD detects PseudoSigner for Delphi 3.0:  </p>\n<pre><code>[PseudoSigner 0.1 [Borland Delphi 3.0]\nsignature = 55 8B EC 83 C4 90 90 90 90 68 ?? ?? ?? ?? 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90\nep_only = true\n</code></pre>\n</div>",
            "votes": "10",
            "user": "Megabeets",
            "time": "Aug 11, 2017 at 8:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">nice answer there  ust an addition msvc compiler version can be detected by the RICH signature embedded in the header one may  look for daniel pistellis article about this</span>",
                    "time": null
                }
            ]
        }
    ]
}