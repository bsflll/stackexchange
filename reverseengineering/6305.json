{
    "title": "Page Fault Handler in Windows",
    "link": "https://reverseengineering.stackexchange.com/questions/6305/page-fault-handler-in-windows",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Like almost all of my questions, I feel like I'm missing something / I understood something the wrong way, so help me figure out where I'm wrong with this.</p>\n<p>When a Page Fault occurs and <code>nt!KiTrap0E</code> comes to save the day, the CPU saves the current state, then it pushes the EIP of the faulting instruction and an error code on the stack (32 bits on x86, 64 bits on x64, but only bits 0, 1 and 2 are relevant here) and loads CR2 with the referenced virtual address?</p>\n<p>So, when we are in <code>KiTrap06</code> the stack looks like this:</p>\n<blockquote>\n<pre><code> EIP of faulting instruction\n\n error code\n</code></pre>\n</blockquote>\n<p>Is this right?</p>\n<p>So if I have the following code in user mode:</p>\n<pre><code>LPVOID address = VirtualAlloc(NULL,\n        1024,\n        MEM_COMMIT,\n        PAGE_READONLY);\n*(PDWORD)address = 12;\n</code></pre>\n<p>When the EIP will reach <code>*(PDWORD)address = 12</code> (well, actually it will probably be <code>mov address, 0x0B</code>, but let's simplify things) a Page Fault will occur, the CPU will save the current state, will push the EIP of that assignment, then an error code will be pushed on the stack (bits 2, 1 and 0: 1 (user process) 1 (tried to write a page) 1 (and caused a protection fault) ), and load CR2 with the address allocated with VirtualAlloc? The handler will check the error code and the Read\\Write byte from PDE (upper 10 bits of CR2) and/or (??) PTE (middle 10 bits of CR2), see that an attempt to write to a read only page was made and will terminate the faulting process?</p>\n<p>If the page was writable but not loaded (last 3 bits of error code: 110) the handler will use the value from CR2 to bring the page into memory and the faulting instruction will be re-executed?</p>\n</div>",
    "votes": "5",
    "answers": 0,
    "views": "812",
    "tags": [
        "windows"
    ],
    "user": "user3002428",
    "time": "Mar 8, 2022 at 12:43",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">The book \"What Makes It Page?: The Windows 7 (x64) Virtual Memory Manager\" (E. Martignetti) has a detailed account of what made Windows 7 page and everything around that. While Windows 7 is no longer the most recent version, a lot of the observations and reverse engineered facts probably still hold true.</span>",
            "time": null
        }
    ],
    "answers_data": []
}