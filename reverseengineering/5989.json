{
    "title": "How to find a subroutine (or next instruction) called after returning from a (Windows) dialog box?",
    "link": "https://reverseengineering.stackexchange.com/questions/5989/how-to-find-a-subroutine-or-next-instruction-called-after-returning-from-a-wi",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The dialog box is a password challenge, and I'd like to catch/trace/observe the code (hopefully the password-checking code) that gets executed right after clicking the <kbd>OK</kbd> button of the dialog box.</p>\n<p>I can't seem to find a way to do this in IDA. What's the correct sequence of actions in IDA to accomplish this?</p>\n</div>",
    "votes": "4",
    "answers": 5,
    "views": "5k",
    "tags": [
        "ida",
        "windows"
    ],
    "user": "silvernightstar",
    "time": "Jul 31, 2014 at 11:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This will probably be much easier to do if you use a debugger to dynamically analyze the process than with static analysis.</p>\n<p>If the application uses the plain windows API, you could try a software like spy++ to get the address of the dialog procedure, which is called whenever something interesting happens within the dialog Or, you could place a breakpoint on then <code>DialogBox</code> API functions (there are several of them, <code>DialogBoxA</code> for ascii strings, <code>DialogBoxW</code> for wide char strings, and some <code>DialogBoxEx</code> variants). Once you know the address, you can look up that in IDA.</p>\n<p>If the application uses some window toolkit (like <code>gtk</code>, <code>qt</code>, <code>swing</code> if it's a java application, whatever), this might be a bit harder, because these toolkits will probably use only a small subset of the Windows API and do the event handling themselves. It might, however, still be successful if you place a breakpoint on <code>GetWindowText</code> and/or <code>GetDlgItemText</code> (again, in several A/W/Ex variants) to check when and where the application actually reads what you've entered.</p>\n<p>If, for some reason, you absolutely can't use a debugger and have to use IDA only, you can still try to cross-reference the above functions and work your way from there. But, since you don't know which of the cross-references is used in the password checking code, this will probably be much harder/more time consuming.</p>\n<p>Apart from this, some of the ideas in my <a href=\"https://reverseengineering.stackexchange.com/questions/4724/custom-ui-buttons/4725#4725\">answer to a similar question</a> might help you.</p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Initially, you could simply search for any strings which are printed in the dialog box, and the code which is executed after user input should be easy to locate thereafter, providing no obfuscation has been employed. For example, in IDA Pro:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/W3LUj.png\"/></p>\n<p>If it's a simple password <em>crackme</em>, you should be looking for code which iterates through each character of a string, i.e. the user input, and compares it to some hardcoded value. Alternatively, as others have elaborated, you could look for specific uses of the Win32 API and find cross-references.</p>\n</div>",
            "votes": "3",
            "user": "JamalS",
            "time": "Jul 31, 2014 at 14:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">The problem with this approach is, if it's a windows dialog, it'll be defined in some resource in the exe file, not in code/data, and you won't find the strings anywhere in IDA.</span>",
                    "time": null
                },
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">Although you can load rsrc segment in IDA if I remember right?</span>",
                    "time": null
                },
                {
                    "user": "JamalS",
                    "text": "<span class=\"comment-copy\">@DominikAntal: Yes, before the auto-analysis, IDA provides a 'load resource segment' checkbox option.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd run the target and let it to show the dialog box, then I'd attach it to debugger. I'd break into the debugger, switching between the threads till I see which one called dialog box. If found I'd print the call stack.</p>\n<p>Static analysis may be difficult if the dialog box is called via an address calculated runtime  (virtual function) but you can always try the method above.</p>\n</div>",
            "votes": "3",
            "user": "Attila",
            "time": "Aug 1, 2014 at 10:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not sure which of the above answers I should accept. I'll just report here what worked for me, using just IDA:</p>\n<ol>\n<li>Since the main window and main menu already exist upon firing up the program, I looked for a breakpoint that has the password challenge dialog as its downstream. In this case, it was a FileOpen subroutine.</li>\n<li>Clicking the File -&gt; Open menu item and choosing the password protected file causes the breakpoint to be hit, pausing the execution of the program.</li>\n<li>Keep on stepping over until the password challenge dialog box pops up.</li>\n<li>Backtrack by setting last executed instruction as breakpoint.</li>\n<li>Repeat steps 2 to 4 until the code firing up the dialog box is identified.</li>\n</ol>\n<p>Checking for strings such as \"check\", \"password\" and other prospective keywords didn't work as they're nowhere to be found.</p>\n<p>Luckily, in the course of the process, a subroutine labeled as \"chk_pass\" was encountered, and I was able to extract the password from the EDX register at which the password was momentarily stored.</p>\n</div>",
            "votes": "1",
            "user": "silvernightstar",
            "time": "Aug 6, 2014 at 9:27",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sometimes you'll see a <code>RegisterClass(Ex)</code> call with a pointer to a <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms633576(v=vs.85).aspx\" rel=\"nofollow\">structure</a> which includes a function pointer to a function which processes events. That callback is where you usually want to look, specifically for a Msg of <code>WM_COMMAND</code> and a <code>wParam</code> of <code>0xC8</code>.</p>\n</div>",
            "votes": "0",
            "user": "perror",
            "time": "Jul 31, 2014 at 11:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}