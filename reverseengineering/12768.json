{
    "title": "What is the reason for INT 0x2D byte scission?",
    "link": "https://reverseengineering.stackexchange.com/questions/12768/what-is-the-reason-for-int-0x2d-byte-scission",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the reason behind the byte scission (the next immediate byte following \"int 2d\" is skipped) behaviour when executing INT 0x2D?\nI came across this article <a href=\"http://www.drdobbs.com/monitoring-nt-debug-services/184416239\" rel=\"nofollow\">http://www.drdobbs.com/monitoring-nt-debug-services/184416239</a> but still cannot understand what is the reason for Windows to skip the byte.\nAny explanation is welcome. Thanks.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "764",
    "tags": [
        "anti-debugging"
    ],
    "user": "xyz",
    "time": "May 30, 2016 at 23:11",
    "comments": [
        {
            "user": "DarthGizka",
            "text": "<span class=\"comment-copy\">The DrDobbs article does not mention 'byte scission' at all, which seems to be a term <a href=\"http://fumalwareanalysis.blogspot.de/2011/09/malware-analysis-3-int2d-anti-debugging.html\" rel=\"nofollow noreferrer\">invented by Dr Fu</a> in relation to a peculiarity/quirk in Windows (see <a href=\"http://pferrie.tripod.com/papers/unpackers23.pdf\" rel=\"nofollow noreferrer\">Peter Ferrie's paper</a> which explains it in detail).</span>",
            "time": null
        },
        {
            "user": "xyz",
            "text": "<span class=\"comment-copy\">Thanks! That answer the question. Yeah, I know that the Dr Dobbs article didn't not mention \"byte scission\".  That is the only article I came across after searching for mechanism behind INT 0x2D after reading about it on Dr Fu's blog.  The other articles on the net usually only mention that a byte will be skipped without explanation.  Hence this question. Thanks for pointing me to Peter Ferrie's paper.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The full details of the behavior are described here:\n<a href=\"http://pferrie.epizy.com/papers/antidebug.pdf\" rel=\"nofollow noreferrer\">http://pferrie.epizy.com/papers/antidebug.pdf</a></p>\n<p>Specifically, if the EAX register has the value of 1, 3, or 4 on all versions of Windows, or the value 5 on Windows Vista and later, then Windows will increase by one the exception address.  Finally, it issues an EXCEPTION_BREAKPOINT (0x80000003) exception if a debugger is present.</p>\n<p>The skipped byte is intended to pass information to the kernel-mode component, but the mechanism is not used by default.</p>\n</div>",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Dec 29, 2023 at 2:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "xyz",
                    "text": "<span class=\"comment-copy\">Thanks. When you say the skipped byte is intended to pass information to kernel-mode component, specifically what information? Is it an undocumented feature of Windows kernel? I am still puzzle why do INT 0x2D need to behave the way it does. Comparatively the behaviour of INT 3 seem more understandable.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">you can pass any single-byte value to the kernel, as a \"parameter\" to the interrupt, along with register values.  This is not possible using int 3 style.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From what I can tell, it’s because the <code>int 0x2d</code> instruction is supposed to be immediately followed by a <code>int3</code> breakpoint opcode, which in turn is presumably a graceful degradation/backwards compatibility feature.</p>\n<p>Interrupt 0x2d is a debugger hook, used to pass information from the debugged program to the debugger; the ultimate place where APIs like <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-dbgprintex\" rel=\"nofollow noreferrer\"><code>DbgPrintEx</code></a> and <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-dbgprompt\" rel=\"nofollow noreferrer\"><code>DbgPrompt</code></a> are implemented – you look at their reimplementations in ReactOS, which are essentially identical.  A debugger that traps interrupt 0x2d will respond to the hook invocation, skip the <code>int3</code> opcode that follows, and resume execution normally.  A more primitive debugger that ignores interrupt 0x2d will instead trap the <code>int3</code> opcode, allowing the user to examine register state and respond to the hook call manually; or to patch a <code>nop</code> instruction over the breakpoint opcode to ignore the hook from now on.</p>\n<p>If you disassemble BOOTMGR.EXE (found compressed within <code>\\BOOTMGR</code>), MEMTEST.EXE (found in <code>\\Boot</code>), WINLOAD.EXE (found in <code>%SystemRoot%\\System32\\Boot</code>) or NTOSKRNL.EXE (in <code>%SystemRoot%\\System32</code>), you will see the <code>int 0x2d</code> / <code>int3</code> sequence appear.  Those are boot-time and/or kernel-mode programs which execute in a different environment from normal Windows applications, but the debugger ABI they are subject to is presumably the same.</p>\n</div>",
            "votes": "0",
            "user": "user3840170",
            "time": "Feb 22 at 10:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}