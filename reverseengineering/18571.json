{
    "title": "x86 Assembly Data Types [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/18571/x86-assembly-data-types",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions asking for help <b>reverse-engineering a specific system</b> are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2018-06-27 14:08:23Z\">6 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/18571/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>For the code below can anyone help with these questions? </p>\n<pre><code>xor eax, eax\nmov ecx, 5\nlea edi, [edx]\nrep stosd\nmov al, 0xFF\nstosw\nstosb\nstosb\n</code></pre>\n<ol>\n<li><p>How many times does the '<code>stosd</code>' operation run? Why?</p></li>\n<li><p>If <code>edx</code> was storing address <code>0x4b0000</code> on the heap, what would <code>edi</code> be after the sequence is complete? Why?</p></li>\n<li><p>How many bytes on the heap are modified by the code above? Why?</p></li>\n<li><p>Describe as completely as possible what the code above is doing.</p></li>\n<li><p>Illustrate precisely how the modified heap space should look given the sequence above.</p></li>\n</ol>\n</div>",
    "votes": "-2",
    "answers": 1,
    "views": "488",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Michael Truro",
    "time": "6 years ago",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Is this a homework assignment?</span>",
            "time": null
        },
        {
            "user": "Michael Truro",
            "text": "<span class=\"comment-copy\">No, I am trying to teach myself x86 for Malware analysis and the book that I am using does not come with the answers to their questions.</span>",
            "time": null
        },
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">Why not just run in a debugger and see what happens?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@josh if it's live malware I'd rather that the inquirer uses some emulator to step through just those opcodes. It'd be better than executing the live malware up to that point :) ... sounds suspiciously like a homework/assignment, though. <a href=\"http://ref.x86asm.net/\" rel=\"nofollow noreferrer\">This</a> should help.</span>",
            "time": null
        },
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">@0xC0000022L Anyone dealing with suspected malware should take appropriate precautions, of course you are right! Emulators, sandboxes, whatever... (I did not downvote, btw). Nothing against questions for homeworks, but an answer to \"What have you tried?\" from a previous comment, that would be great...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do this yourself! Instead of explaining it all, I'm going to give you some resources to read through.</p>\n<ol>\n<li><p>Read all about <a href=\"http://faydoc.tripod.com/cpu/stos.htm\" rel=\"nofollow noreferrer\">STOS*</a> and <a href=\"http://faydoc.tripod.com/cpu/rep.htm\" rel=\"nofollow noreferrer\">REP</a>. Read them carefully and process what you're reading! Those two resources explain everything to you insofar as how those instructions work.</p></li>\n<li><p>Read about the <a href=\"http://faydoc.tripod.com/cpu/lea.htm\" rel=\"nofollow noreferrer\">LEA instruction</a>. Since there are no offsets being referenced with edx, the way that instruction is written is effectively the same as <code>mov edi,edx</code>. Knowing that, now what do you think is in edi?</p></li>\n<li><p>Take some time to really wrap your head around the difference between stack and heap. You may have to read/watch content from multiple sources, but <a href=\"https://www.gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html\" rel=\"nofollow noreferrer\">here is a great place to start</a>.</p></li>\n<li><p>(and 5): Use what you learn from the aforementioned points to address your questions about heap/stack. I HIGHLY recommending using something like <a href=\"https://github.com/zerosum0x0/WinREPL\" rel=\"nofollow noreferrer\">WinREPL</a> and/or an <a href=\"http://carlosrafaelgn.com.br/asm86/\" rel=\"nofollow noreferrer\">assembly emulator</a> to view register states and step through cycles as instructions run. If you want to do this with your code, consider running <code>mov edx,0x4b0000</code> first so the lea instruction will properly operate with an address that's observable for a command like <code>.read addr size</code> in WinREPL.</p></li>\n</ol>\n</div>",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jun 21, 2018 at 16:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}