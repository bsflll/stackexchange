{
    "title": "Returning to usermode shellcode from windows kernel (Win10)",
    "link": "https://reverseengineering.stackexchange.com/questions/20768/returning-to-usermode-shellcode-from-windows-kernel-win10",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have written a kernel exploit (for the latest Win10 64bit) that executes (or returns to from the kernel) token stealing shellcode, which is placed in the VirtulAlloc'ed memory in the userland.</p>\n<p>The problem is, when the exploit is executed by admin user, it works fine but if it is executed by the normal user (medium integrity), it crashes with <code>ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY (fc)</code>. </p>\n<p>When I check the permission of the usermode shellcode memory, </p>\n<p>(standard user)</p>\n<pre><code>PXE at FFFF8542A150A010    PPE at FFFF8542A1402DF0    PDE at FFFF8542805BECA0    PTE at FFFF8500B7D94400\ncontains 8A000000269B1867  contains 0A0000001C4F2867  contains 0A0000002673C867  contains 0000000032E84025\npfn 269b1     ---DA--UW-V  pfn 1c4f2     ---DA--UWEV  pfn 2673c     ---DA--UWEV  pfn 32e84     ----A--UREV\n</code></pre>\n<p>while in admin</p>\n<pre><code>PXE at FFFF8944A2512028    PPE at FFFF8944A2405E48    PDE at FFFF894480BC9F28    PTE at FFFF8901793E5800\ncontains 0A000000060BD867  contains 0A0000003593E867  contains 0A0000000FBAB867  contains 000000001DFF4825\npfn 60bd      ---DA--UWEV  pfn 3593e     ---DA--UWEV  pfn fbab      ---DA--UWEV  pfn 1dff4     ----A--UREV\n</code></pre>\n<p>The difference is at the PXE level, there is no <code>E</code> bit set for standard user while admin user has execution permission on the usermode shellcode.</p>\n<p>I tried implementing the shellcode as a function of the exploit(.exe) so it is placed in code segment (which it will probably have execution privilege), but it is same (No <code>E</code> set in PXE level) and crashes although <code>!vad</code> command outputs <code>EXECUTE_WRITECOPY</code>. </p>\n<p>I have checked that <code>ProcessMitigationPolicy</code>'s <code>ProhibitDynamicCode</code> is set to 0, so I don't think this is the problem. </p>\n<p>How do you guys execute shellcode when writing kernel exploit these days?\n(FYI I have disabled SMEP, SMAP via Kernel ROP).</p>\n<p>Thanks in advance!</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "506",
    "tags": [
        "exploit",
        "shellcode",
        "windows-10"
    ],
    "user": "Jaewon Min",
    "time": "Mar 4, 2019 at 6:42",
    "comments": [
        {
            "user": "Jaewon Min",
            "text": "<span class=\"comment-copy\">It maybe issue with SMEP in normal user, as although CR4 register is updated returning to any valid userland code results system crash.</span>",
            "time": null
        },
        {
            "user": "Jaewon Min",
            "text": "<span class=\"comment-copy\">In that sense, why is SMEP not disabled in normal user even though SMEP bit is cleared in the CR4 register?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What I found out until now is that according to the Intel manual, even though <code>SMEP</code> bit is 0, if any entry in the process of going through page tables have <code>execute disable</code> bit set, it won't execute. This is the case when allocating RWX memory from standard user (medium IL).</p>\n<p>I didn't figure out whether this is a problem of my testing environment or some kind of mitigation, but manage to finish writing the exploit by mapping executable memory in the kernel and copy the shellcode there.</p>\n</div>",
            "votes": "1",
            "user": "Jaewon Min",
            "time": "Mar 26, 2019 at 14:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}