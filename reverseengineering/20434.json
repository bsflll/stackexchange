{
    "title": "how to use core file in radare2?",
    "link": "https://reverseengineering.stackexchange.com/questions/20434/how-to-use-core-file-in-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In gdb i can backtrace with core file and executable file.<br/>\nIt seems radare2 can read core file. like this</p>\n<pre><code>$ r2 core\nSetting up coredump: asm.arch &lt;-&gt; x86 and asm.bits &lt;-&gt; 64\nSetting up coredump: Registers have been set\nSetting up coredump: 22 maps have been found and created\n[0x00000000]&gt; \n</code></pre>\n<p>but after that i don't know what to do next?<br/>\nI can't find any documentation about using core file in radare2. </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "radare2"
    ],
    "user": "mug896",
    "time": "Jan 21, 2019 at 16:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's more regular programming question than RE. Core dump file is a state of the process when the file was created (usually due to a crash) so debugger commands are the most suitable in such case. In Radare2 those are the ones from <code>d?</code> category.</p>\n<pre><code>Usage: d   # Debug commands\n| db[?]                    Breakpoints commands\n| dbt[?]                   Display backtrace based on dbg.btdepth and dbg.btalgo\n| dc[?]                    Continue execution\n| dd[?]                    File descriptors (!fd in r1)\n| de[-sc] [perm] [rm] [e]  Debug with ESIL (see de?)\n| dg &lt;file&gt;                Generate a core-file (WIP)\n| dH [handler]             Transplant process to a new handler\n| di[?]                    Show debugger backend information (See dh)\n| dk[?]                    List, send, get, set, signal handlers of child\n| dL[?]                    List or set debugger handler\n| dm[?]                    Show memory maps\n| do[?]                    Open process (reload, alias for 'oo')\n| doo[args]                Reopen in debugger mode with args (alias for 'ood')\n| dp[?]                    List, attach to process or thread id\n| dr[?]                    Cpu registers\n| ds[?]                    Step, over, source line\n| dt[?]                    Display instruction traces (dtr=reset)\n| dw &lt;pid&gt;                 Block prompt until pid dies\n| dx[?]                    Inject and run code on target process (See gs)\n</code></pre>\n<p>You can get values of registers when coredump was created by issuing <code>dr</code> command or show the backtrace by one of the <code>dbt</code>.</p>\n<blockquote>\n<p>but after that i don't know what to do next?</p>\n</blockquote>\n<p>What are the next steps are really dependent on your case - what you want to obtain from this dump.</p>\n<blockquote>\n<p>I can't find any documentation about using core file in radare2.</p>\n</blockquote>\n<p>Probably this is not the most used function in r2 ;)</p>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Jan 21, 2019 at 21:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}