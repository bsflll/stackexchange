{
    "title": "No apparent entry point for stripped, PIE binary using radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/17410/no-apparent-entry-point-for-stripped-pie-binary-using-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am running on 64-bit Windows 7 and am using radare2 to attempt both static and dynamic analysis of a binary executable. The issue is that I cannot seem to find the entry point of where the program proper begins. I am still very new to radare2 and reverse engineering in general, so all of the techniques I currently know of have failed to determine this. </p>\n<p>My questions are:</p>\n<ol>\n<li><strong>How can I find the entry point of this binary? (and, in general, <em>any</em> binary)</strong></li>\n<li><strong>Why is there no apparent</strong> <code>main</code> <strong>symbol?</strong></li>\n<li><strong>Why do the checks in</strong> <code>afll</code> <strong>fail? (see below)</strong></li>\n</ol>\n<p>I have documented my attempts (in chronological order), below:</p>\n<hr/>\n<p>I use radare2 to open the binary in debug mode (via <code>-d</code>), like so:</p>\n<pre><code>$ radare2 -d bin.exe\nSpawned new process with pid 6204, tid = 6408\nr_sys_pid_to_path: Cannot get module filename.= attach 6204 6408\nbin.baddr 0x00400000\nUsing 0x400000\nSpawned new process with pid 5764, tid = 1936\nr_sys_pid_to_path: Cannot get module filename.asm.bits 32\n</code></pre>\n<p>Radare2 enters at address <code>0x772201c4</code> and I then run <code>aaa</code>:</p>\n<pre><code>[0x772201c4]&gt; aaa\n←[32m[x]←[0m Analyze all flags starting with sym. and entry0 (aa)\nTODO: esil-vm not initialized\n←[32m[x]←[0m Analyze len bytes of instructions for references (aar)\n←[32m[x]←[0m Analyze function calls (aac)\n←[32m[x]←[0m Use -AA or aaaa to perform additional experimental analysis.\n←[32m[x]←[0m Constructing a function name for fcn.* and sym.func.* functions (aan)\n= attach 6204 6408\n6204\n</code></pre>\n<p>All of the checks appear to fail, so I attempt to display the address of the entry point, via <code>iM</code>, to no avail:</p>\n<pre><code>[0x772201c4]&gt; iM\n\n[0x772201c4]&gt;\n</code></pre>\n<p>There is also no listing for <code>sym.main</code> with <code>afll</code> either:</p>\n<pre><code>[0x772201c4]&gt; afll\naddress     size  nbbs edges    cc cost   min bound range max bound   calls locals args xref frame name\n=========== ==== ===== ===== ===== ==== =========== ===== =========== ===== ====== ==== ==== ===== ====\n0x772201c4   41     1     0     1    4 0x772201c4    13 0x772201d1     2    2      0    0    24 fcn.eip\n0x7723df5c   69     1     0     1   29 0x7723df5c    69 0x7723dfa1     0    5      0    1    28 fcn.7723df5c\n0x7723dfa1   20     1     0     1   14 0x7723dfa1    20 0x7723dfb5     0    1      0    1     0 fcn.7723dfa1\n0x7724989f   69     4     5     3   23 0x7724989f    18 0x772a034a     0    0      1    1     4 fcn.7724989f\n0x772498ba   28     1     0     1   22 0x772498ba    28 0x772498d6     2    1      2    1    24 loc.772498ba\n0x772498db   54     2     1     0   24 0x772498db    54 0x77249911     4    1      2    1    16 fcn.772498db\n0x77266fa6   66     4     5     3   48 0x77266fa6    66 0x77266fe8     5    1      1    1    48 fcn.77266fa6\n</code></pre>\n<p>Very confused, I try <code>pdf</code>, and get only three lines of assembly mnemonics:</p>\n<pre><code>[0x772201c4]&gt; pdf\n            ;-- eip:\n/ (fcn) fcn.eip 41\n|   fcn.eip ();\n|           ; var int local_4h @ esp+0x4\n|           ; var int local_8h @ esp+0x8\n|           0x772201c4      89442404       mov dword [local_4h], eax\n|           0x772201c8      895c2408       mov dword [local_8h], ebx\n\\       ,=&lt; 0x772201cc      e9e9960200     jmp loc.772498ba\n</code></pre>\n<hr/>\n<p><strong>Edit 1</strong>: Following <a href=\"https://reverseengineering.stackexchange.com/users/18698/megabeets\">Megabeet</a>'s advice, this is my output:</p>\n<pre><code>$ radare2 bin.exe\n[0x00404161]&gt; ie\n[Entrypoints]\nvaddr=0x00404161 paddr=0x00004161 baddr=0x00400000 laddr=0x00000000 haddr=0x00000118 type=program\n\n1 entrypoints\n\n[0x00404161]&gt; ood\nSpawned new process with pid 4776, tid = 4528\nr_sys_pid_to_path: Cannot get module filename.File dbg://bin.exe  reopened in read-write mode\n= attach 4776 4528\nSpawned new process with pid 5720, tid = 4780\nr_sys_pid_to_path: Cannot get module filename.Unable to find filedescriptor 3\nUnable to find filedescriptor 3\n4776\n[0x772201c4]&gt;\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "radare2",
        "dynamic-analysis",
        "entry-point"
    ],
    "user": "jmcph4",
    "time": "Feb 8, 2018 at 10:08",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">I don't know radare2, but it could be that one of those functions is main but you just don't have symbol names available? With MSVC tools you can find the entry point with <code>dumpbin /headers</code>, although that's actually some code supplied by the C runtime that initialises state and then calls main, not main itself.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>How can I find the entry point of this binary?</p>\n</blockquote>\n<p>There's a special radare2 command for this, <code>ie</code>:</p>\n<pre><code>$ r2 /program_name\n -- Change the registers of the child process in this way: 'dr eax=0x333'\n[0x00400530]&gt; ie\n[Entrypoints]\nvaddr=0x00400530 paddr=0x00000530 baddr=0x00400000 laddr=0x00000000 haddr=0x00000018 type=program\n\n1 entrypoints\n</code></pre>\n<p>The command <code>iM</code> will show you the <code>Main()</code> function if it was detected by radare2. Notice that <code>Main() =! Entrypoint</code>.</p>\n<blockquote>\n<p>Why is there no apparent main symbol?</p>\n</blockquote>\n<p>There might be several reasons why radare2 failed to detect <code>main</code>. With strip binaries it is harder for the RE framework to detect it since it lacks the symbols. You can start from the entrypoint and go with the flow of the program until' you reach <code>main</code>.</p>\n<blockquote>\n<p>Why do the checks in afll fail?</p>\n</blockquote>\n<p>Well, since radare2 failed to detect the <code>main</code> function, it wasn't able to rename the function to <code>main</code>. Probably, the <code>main</code> function was detected by radare2 as a regular function and it should be in the table you attached.</p>\n<hr/>\n<p>On a personal note, make sure to use the latest version of radare2 from git. The project is actively developed and improvements are added every day. Including better detections for symbol like <code>main()</code>.</p>\n</div>",
            "votes": "3",
            "user": "Megabeets",
            "time": "Feb 8, 2018 at 6:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "jmcph4",
                    "text": "<span class=\"comment-copy\">Thanks for the info, I didn't know about <code>ie</code> before, but when I attempt it on this binary it claims there are 0 entrypoints - how is that even possible?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">What is the output of <code>r2 -v</code>? Also, you get 0 entrypoints even with <code>rabin2 -e program_name</code>?</span>",
                    "time": null
                },
                {
                    "user": "jmcph4",
                    "text": "<span class=\"comment-copy\">Output of <code>r2 -v</code> is <code>radare2 2.2.0 1 @ windows-x86-32 git.2.2.0 commit: db3d717c39b8ab6b317d229d2a8539dff11918f2 build: Sun 12/24/2017__18:05:13.43</code> and <code>rabin2 -e bin.exe</code> yields 1 entrypoint for some reason: <code>vaddr=0x00404161 paddr=0x00004161 baddr=0x00400000 laddr=0x00000000 haddr=0x00000118 type=program</code>.</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">So here's your entrypoint. Try open the program with <code>r2</code> not in debug mode (<code>r2 program</code>). Then, <code>ie</code> should show you this entrypoint. You can also check for the flag \"entry0\" which flags the entrypoint (<code>f~entry). To open in debug mode from within radare2 shell you can use </code>ood`. Moreover, in debug mode, radare2 automatically stops at the entrypoint of the program.</span>",
                    "time": null
                },
                {
                    "user": "jmcph4",
                    "text": "<span class=\"comment-copy\">Due to limitations of comment formatting, I have edited my original question with the new output. At this point, I suspect it is some deeply-rooted compatability issue with either radare2, MinGW, or something else entirely.</span>",
                    "time": null
                }
            ]
        }
    ]
}