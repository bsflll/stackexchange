{
    "title": "ARM shellcode for linux - svc 0 vs svc 1",
    "link": "https://reverseengineering.stackexchange.com/questions/4217/arm-shellcode-for-linux-svc-0-vs-svc-1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Checking out Linux <code>ARM</code> shellcode I see that the system call is made by using the <code>svc 1</code> instruction. However, I have also seen <a href=\"http://brnz.org/hbr/?m=201102\" rel=\"noreferrer\">examples</a> where they use <code>svc 0</code> as the instruction that calls the system call.</p>\n<p>Evidently, system calls in Linux on <code>ARM</code> can be performed using both <code>svc 0</code> and <code>svc 1</code>. Why is this the case as opposed to architectures such as <code>x86</code>. Are the kind of interrupts generated by both these instructions the same?</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "7k",
    "tags": [
        "arm",
        "shellcode"
    ],
    "user": null,
    "time": "Apr 30, 2014 at 20:03",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">It's the same interrupt. The #imm parameter part (0, 1 etc) is ignored by Linux IIRC.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I suppose you should check <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0179b/ar01s02s07.html\" rel=\"nofollow\">this</a> part of the <code>ARM</code> documentation, and <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/Cihidabi.html\" rel=\"nofollow\">this</a> description of <code>svc</code> and its parameters. By cross referencing the two links you'll find an answer to your question.</p>\n<p>From the links above you'll be able to understand what the parameter of the <code>svc</code> instruction represents. It is supposed to be ignored by the <code>CPU</code> but the exception handler can use that parameter to determine the service being requested : <code>ARM</code> instruction if the value is between 0 &amp; 16777215, or <code>Thumb</code> instruction if the value is between 0 &amp; 255.</p>\n<p>The thumb instruction set is a compact 16bit encoding for ARM instructions. It was mainly designed &amp; implemented for compact code-density. You can check the <a href=\"https://en.wikipedia.org/wiki/ARM_Thumb#Thumb\" rel=\"nofollow\">Wikipedia</a> page about the <code>ARM</code> architecture for more information, but I would recommend you going through the <code>ARM</code> documentation for accurate technical details.</p>\n</div>",
            "votes": "3",
            "user": "yaspr",
            "time": "May 2, 2014 at 11:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">could you add a short answer derived from those links ?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Here we go :done !</span>",
                    "time": null
                }
            ]
        }
    ]
}