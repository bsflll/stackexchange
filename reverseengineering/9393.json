{
    "title": "Some help with disassembled code understanding",
    "link": "https://reverseengineering.stackexchange.com/questions/9393/some-help-with-disassembled-code-understanding",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've got some windows dll file. This dll-file exports a couple of functions to read HDD with some unknown (to me) filesystem. So, I've launched IDA disassembler and started an investigation on how those disk operations are going.</p>\n<p>In short, there are two part:  Initialize and Act. Currently I'm on Initialize part of the code. And I'm stuck with this piece of code:</p>\n<pre><code>; at this point: \n;   edi = 0, \n;   ebp = some 32-bit value, lets call it an Argument, \n;   esi holds address of some buffer with size of 07b0h bytes\n.text:100014C9                 xor     ecx, ecx        \n.text:100014CB                 mov     eax, ebp\n.text:100014CD                 mov     edx, 14h\n.text:100014D2                 mul     edx             ; eax:edx = Argument * 14h\n.text:100014D4                 seto    cl              ; ecx = (eax != 0)\n.text:100014D7                 mov     [esi+14h], edi\n.text:100014DA                 neg     ecx             ; ecx = -1 = 0ffffffffh (eax != 0), ecx = 0 (eax == 0)\n.text:100014DC                 or      ecx, eax        ; eax = 0ffffffffh (OF set), eax = eax (OF not set)\n.text:100014DE                 push    ecx             ; size_t\n; jmp_to_operator_new holds just a command to \n; c++ (i assume) 'new' operator\n.text:100014DF                 call    jmp_to_operator_new\n.text:100014E4                 lea     ecx, [ebp+ebp*4+0]\n.text:100014E8                 add     ecx, ecx\n.text:100014EA                 add     ecx, ecx\n.text:100014EC                 push    ecx             ; size_t\n.text:100014ED                 push    edi             ; int\n.text:100014EE                 push    eax             ; void *\n.text:100014EF                 mov     [esi+14h], eax\n.text:100014F2                 call    _memset\n</code></pre>\n<p>So, as you may have noticed, I assume that that at <em>text:100014DE</em> point <em>ecx</em> can only hold either -1 (<em>0ffffffffh</em>) or zero as a value to pass to operator <em>new</em> (which doesn't do much than just call to <em>_malloc</em>). The result of memory allocation is then passed as destination buffer to <em>_memset</em>.</p>\n<p>Hence my question is here. Am I wrong about the value of <em>ecx</em> at <em>text:100014DE</em> point? Where am I wrong? What is correct value?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "411",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "x86",
        "dll"
    ],
    "user": "Sergey Kanaev",
    "time": "Jul 18, 2015 at 21:18",
    "comments": [
        {
            "user": "Sergey Kanaev",
            "text": "<span class=\"comment-copy\">There is typo in condition: mul edx -&gt; edx:eax = mul result OF = (edx != 0) (not eax != 0)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are wrong with your interpretation.  As you see correctly, after 100014da ecx is either zero (no overflow in the mul statement) or 0xffffffff (overflow in mul, neg works with twos complement). After 100014dc however, ecx is either 0xffffffff (unchanged on overflow) or equals eax (no overflow), as in the intel notation the destination register is the left one. eax remains unchanged.</p>\n</div>",
            "votes": "0",
            "user": "josh",
            "time": "Jul 18, 2015 at 23:27",
            "is_accepted": true,
            "comments": []
        }
    ]
}