{
    "title": "How to break on an Android JNI function with IDA Pro Debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/1965/how-to-break-on-an-android-jni-function-with-ida-pro-debugger",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an android application that uses a shared library which I would like to step through with a debugger.  I've had success using IDA 6.3 to debug executables with the <code>android_server</code> debug server included with IDA but haven't gotten it to work with shared objects yet.  </p>\n<p>For a specific example, suppose I have the following Java code (This comes from the hellojni example in the Android NDK):</p>\n<pre><code>System.loadLibrary(\"hello-jni\");\ntv.setText( stringFromJNI() );\n</code></pre>\n<p>With the JNI C code as:</p>\n<pre><code>jstring\nJava_com_example_hellojni_HelloJni_stringFromJNI( JNIEnv* env, jobject thiz )\n{\n        return (*env)-&gt;NewStringUTF(env, \"Hello from JNI !\");\n}\n</code></pre>\n<p>If the java code is run only when the application starts up, how can I break in the function <code>Java_com_example_hellojni_HelloJni_stringFromJNI</code>?</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "android"
    ],
    "user": "amccormack",
    "time": "Apr 29, 2013 at 18:57",
    "comments": [
        {
            "user": "Marco Grassi",
            "text": "<span class=\"comment-copy\">Can't you attach to the running process? It can be unconfortable if your code is triggered before you attach, but it's a start.</span>",
            "time": null
        },
        {
            "user": "amccormack",
            "text": "<span class=\"comment-copy\">@MarcoGrassi That is the problem I am running into.  I don't know how to trigger the catch since I can't attach until after the call has executed.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are two options I can see.</p>\n<ol>\n<li><p>Start the Dalvik VM manually using <code>app_process</code>. The command line seems to be something like (see <code>am</code> script source):</p>\n<pre><code>app_process /system/bin com.android.commands.am.Am start -a &lt;ACTION&gt;\n</code></pre></li>\n<li><p>Put an endless loop in the beginning of your JNI method, run the app, attach to the new process and skip the loop manually in the debugger.</p></li>\n</ol>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Apr 30, 2013 at 16:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Newer versions of Android actually include a mechanism like this. It uses jdwp to send a signal to tell the app that you've connected up. See the ndk-gdb script from the NDK =)</p>\n</div>",
            "votes": "1",
            "user": "jduck",
            "time": "Feb 9, 2014 at 10:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}