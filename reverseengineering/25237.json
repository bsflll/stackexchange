{
    "title": "Simple angr example not working",
    "link": "https://reverseengineering.stackexchange.com/questions/25237/simple-angr-example-not-working",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to learn angr from beginning. Due to lack of simple tutorials I programmed my own little executable which angr should solve.</p>\n<p>The C code looks as follows:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    char buffer[20];\n    printf(\"Password\\n\");\n    fgets(buffer,20,stdin);\n    if (strcmp(buffer,\"super!\\n\")==0) {\n        printf(\"SUCCESS!\\n\");\n    } else {\n        printf(\"FAIL!\\n\");\n    }\n    return 0;\n}\n</code></pre>\n<p>When compiled and opened in binary ninja I see the printfs at following addresses:\n<a href=\"https://i.sstatic.net/nMLiL.png\" rel=\"nofollow noreferrer\"><img alt=\"BN\" src=\"https://i.sstatic.net/nMLiL.png\"/></a>\nSo I created following angr python3 code:</p>\n<pre><code>import angr\nfrom angr.state_plugins import SimSystemPosix\n\np = angr.Project('./test')\nstate = p.factory.entry_state()\n\n\n\nsm = p.factory.simulation_manager(state)\nsm.explore(find=0x40118c, avoid=0x40119a)\n\nprint(sm.found)\n</code></pre>\n<p>Running the python code shows following output:</p>\n<blockquote>\n<p>python3 solve_angr.py \n  WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | The program is accessing memory or registers with an unspecified value. This could indicate unwanted behavior.<br/>\n  WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:<br/>\n  WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | 1) setting a value to the initial state<br/>\n  WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null<br/>\n  WARNING | 2020-06-08 10:02:29,497 | angr.state_plugins.symbolic_memory | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY_REGISTERS}, to suppress these messages.<br/>\n  WARNING | 2020-06-08 10:02:29,498 | angr.state_plugins.symbolic_memory | Filling memory at 0x7fffffffffefff8 with 72 unconstrained bytes referenced from 0x58d4e0 (strcmp+0x0 in libc.so.6 (0x8d4e0))<br/>\n  WARNING | 2020-06-08 10:02:29,499 | angr.state_plugins.symbolic_memory | Filling memory at 0x7fffffffffeff70 with 8 unconstrained bytes referenced from 0x58d4e0 (strcmp+0x0 in libc.so.6 (0x8d4e0))<br/>\n  []</p>\n</blockquote>\n<p>The [] indicates that it did not find any solution.</p>\n<p>Can anybody tell me what I did wrong?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "c",
        "angr"
    ],
    "user": "User64234",
    "time": "Jun 8, 2020 at 8:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I believe that the issue is related to the way <code>gets</code> symbolic procedure implemented in angr. You are asking to read 20 bytes, and as far as I understand, the actual symbolic memory that is allocated is of the size of 20 (19 string characters and a NULL terminator). Later, when you call to <code>strcmp</code>, the comparison will always fail, because you compare 20 bytes string to <code>super!\\n</code> which is shorter. So the compare result will never be 0, and angr's symbolic execution engine will never reach the <code>printf(\"SUCCESS!\\n\");</code> clause.</p>\n<p>If you modify your code to be:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    char buffer[20];\n    printf(\"Password\\n\");\n    fgets(buffer,8,stdin); // &lt;-------------- Adjust size to be same as \"super!\\n\"\n    if (strcmp(buffer,\"super!\\n\")==0) {\n        printf(\"SUCCESS!\\n\");\n    } else {\n        printf(\"FAIL!\\n\");\n    }\n    return 0;\n}\n</code></pre>\n<p>This way it works fine and reaches <code>printf(\"SUCCESS!\\n\");</code></p>\n</div>",
            "votes": "2",
            "user": "macro_controller",
            "time": "Jun 8, 2020 at 14:20",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you can't modify the binary but through the static analysis you get the number of bytes you need to provide as a flag, you can construct bit vector</p>\n<pre><code>flag_chars = [claripy.BVS('flag_%d' % i, 8) for i in range(6)]\nflag = claripy.Concat(*flag_chars + [claripy.BVV(b'\\n')])\n</code></pre>\n<p>and pass that to the <code>entry_state</code> since the flag is provided as an input through <code>stdin</code> to this binary.</p>\n<pre><code>p = angr.Project('test')\nstate = p.factory.entry_state(args=['./test'], stdin=flag)\n</code></pre>\n<p>With such setup, <code>angr</code> will successfully find the solution.</p>\n<p>Additionally, if you would like to extract the flag</p>\n<pre><code>found = sm.found[0]\nflag_str = found.solver.eval_upto(flag, 7, cast_to = bytes)\nprint(flag_str)\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Jun 8, 2020 at 15:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}