{
    "title": "Understand the CPU cycles of x86 instruction bsr/bsf",
    "link": "https://reverseengineering.stackexchange.com/questions/20545/understand-the-cpu-cycles-of-x86-instruction-bsr-bsf",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am on the hook to analysis some \"timing channels\" of some x86 binary code. I am posting one question to comprehend <code>bsf/bsr</code> opcode.</p>\n<p>So high-levelly, these two opcodes can be modeled as a \"loop\", which counts the leading and trailing zeros of a given operand. The <code>x86</code> manual has a good formalization of these opcodes, something like the following:</p>\n<pre><code>IF SRC = 0\n  THEN\n    ZF ← 1;\n    DEST is undefined;\n  ELSE\n    ZF ← 0;\n    temp ← OperandSize – 1;\n    WHILE Bit(SRC, temp) = 0\n    DO\n      temp ← temp - 1;\n    OD;\n    DEST ← temp;\nFI;\n</code></pre>\n<p>But to my suprise, <code>bsf/bsr</code> instructions seem to have <strong>fixed cpu cycles</strong>. According to some documents I found here: <a href=\"https://gmplib.org/~tege/x86-timing.pdf\" rel=\"nofollow noreferrer\">https://gmplib.org/~tege/x86-timing.pdf</a>, seems that they always take 8 CPU cycles to finish. </p>\n<p>So here are my questions:</p>\n<ol>\n<li><p>I am confirming that these instructions have fixed cpu cycles. In other words, no matter what operand is given, they always take the same amount of time to process, and there is no \"timing channel\" behind. I cannot find corresponding specifications in Intel's official documents.</p></li>\n<li><p>Then why it is possible? Apparently this is a \"loop\" or somewhat, at least high-levelly. What is the design decision behind? Easier for CPU pipelines?</p></li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "x86",
        "intel"
    ],
    "user": "lllllllllllll",
    "time": "Feb 4, 2019 at 2:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've found a <a href=\"https://web.itu.edu.tr/kesgin/mul06/intel/instr/bsf.html\" rel=\"nofollow noreferrer\">site</a> which seems to indicate this was implemented as a loop when the instructions were introduced:</p>\n<pre><code>BSF scans forward across bit pattern (0-n) while BSR scans in reverse (n-0).\n\n                             Clocks                 Size\n    Operands         808x  286   386   486          Bytes\n\n    reg,reg           -     -   10+3n  6-42           3\n    reg,mem           -     -   10+3n  7-43          3-7\n    reg32,reg32       -     -   10+3n  6-42          3-7\n    reg32,mem32       -     -   10+3n  7-43          3-7\n</code></pre>\n<p>Thankfully, they seem to optimized it starting with 486 (1989). As you already noticed, they seem to have improved the run time even further. Indeed, the current <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf\" rel=\"nofollow noreferrer\">Intel Optimization Manual</a> lists it with pretty low fixed clock cycles (3+1).</p>\n<p>There is a much more in detail answer on <a href=\"https://stackoverflow.com/questions/54509623/how-can-x86-bsr-bsf-have-fixed-latency-not-data-dependent-doesnt-it-loop-over\">stackexchange</a></p>\n</div>",
            "votes": "3",
            "user": "Nordwald",
            "time": "Feb 4, 2019 at 6:13",
            "is_accepted": true,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the link points to a question by op it appears he cross posted</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">@blabb yes, but a close vote based on duplicate/cross posting is not applicable :(</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">@blabb Thank you for pointing this out.. Yes. But still, we received fantastic answers from different aspects and angles.</span>",
                    "time": null
                }
            ]
        }
    ]
}