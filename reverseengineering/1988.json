{
    "title": "What does the text in angle brackets refer to (From objdump)",
    "link": "https://reverseengineering.stackexchange.com/questions/1988/what-does-the-text-in-angle-brackets-refer-to-from-objdump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I constantly see the text (<code>&lt;perror@plt+0x2008e0&gt;</code>) as seen in the snippet below, but I am not sure if its making a call to <code>perror</code> of if the disassembler was having issues. Since it would be odd if the first thing the main function did was to call the exit code. Finally what does <code>@plt</code> refer to.</p>\n<pre><code>0000000000400540 &lt;__libc_start_main@plt&gt;:\n  400540:   ff 25 0a 09 20 00    jmpq  *0x20090a(%rip)    # 600e50 &lt;perror@plt+0x2008e0&gt;\n</code></pre>\n<p>Let me know if more information is needed and I will update the question</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "931",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "RC1140",
    "time": "May 6, 2013 at 11:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>PLT stands for Procedure Linkage Table. It is effectively a table of function addresses. More precisely, as illustrated here, the PLT is a table where each entry consists of a jump instruction to where the code of the function really is. The PLT thus consists of function stubs.</p>\n<p>Calls to dynamically linked functions are compiled to calls to the PLT address, rather than the address where the function really is. Thanks to this indirection, external calls in a module can be implemented with a relative jump into the PLT. The dynamic linker updates the PLT with the runtime address of the actual code, which depends on where the called module is located in memory relative to the callee.</p>\n<p>The problem solved by this extra level of indirection is dynamic linking where the address of the libraries cannot be predicted at compile time and the dynamic linker does not need to update the code itself (which would preclude sharing between instances of a library that is loaded at different addresses in different processes).</p>\n<p>This explains <code>&lt;__libc_start_main@plt&gt;</code>. That the jump is indicated as into <code>perror@plt</code> is confusing information from the disassembler. <code>&lt;perror@plt+0x2008e0&gt;</code> means that the jump target is 0x2008e0 bytes after the start of the PLT entry for <code>perror</code> â€” if this was a jump into the code of the <code>perror</code> function, that would be one huge function! In fact the jump is to the real code of the <code>main</code> entry point, which happens to be located this many bytes from the <code>perror</code> PLT entry (if you're using GNU binutils, I think <code>objdump</code> picks the last PLT entry here). The binary is compiled without debugging symbols, so the code of all functions appears to the disassembler as a huge block of <code>.text</code>, and the debugger has no better way to name that particular address. If debugging symbols had been present then the disassembler would have extracted the function name from the debugging information in the binary.</p>\n</div>",
            "votes": "8",
            "user": "Gilles 'SO- stop being evil'",
            "time": "May 6, 2013 at 18:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, first, the <code>(%rip)</code> refers to the content of the memory cell pointed by the value contained in <code>%rip</code>.</p>\n<p>And, second, the <code>&lt;perror@plt+0x2008e0&gt;</code> refers to the symbol <code>perror@plt</code> (plus an offset of 0x2008e0.</p>\n<p>If you want more details about how the PLT and the GOT work, feel free to ask another question (because it will fill several pages just to explain it nicely).</p>\n<p><strong>Note</strong>: This question was obviously for me !!! :-)</p>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "May 3, 2013 at 6:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RC1140",
                    "text": "<span class=\"comment-copy\">So i was actually only interested in what &lt;perror@plt+0x2008e0&gt; refers to , I think I will kill this question and ask another about what is GOT and PLT</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">In fact, I already asked the <a href=\"http://reverseengineering.stackexchange.com/questions/1992/what-is-plt-got\">question</a>. But, basically PLT/GOT are tables to locate the functions from libraries that are dynamically loaded.</span>",
                    "time": null
                },
                {
                    "user": "RC1140",
                    "text": "<span class=\"comment-copy\">Thanks again , once you mentioned PLT/GOT as things too research I found out what they were and how they work and what they mean.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@perror: why the <code>+offset</code>? Does that mean symbol <code>perror</code> in the PLT at <code>offset</code> or does it mean <code>perror</code> at address of PLT plus <code>offset</code>? Besides, the several pages in your own Q&amp;A are pretty short ;)</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I agree, I will improve my Q&amp;A. I have some time this week, so I will work out on this. I know I left a lot of things aside (because I lack of time). Sorry...</span>",
                    "time": null
                }
            ]
        }
    ]
}