{
    "title": "CR16C architecture code pointers in Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/29823/cr16c-architecture-code-pointers-in-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On CompactRISC CR16C architecture, because instructions only start at even-numbered addresses, code pointers (as used by JAL, JUMP, Jcond) are shifted one bit to the right. These are distinct from data pointers, which are byte-addressable and just contain the target address without any bit shifting.</p>\n<p>Does Ghidra have any additional pointer type that can be used to distinguish between these code pointers and data pointers?</p>\n<p>Example of how this currently looks, using the standard pointer type for both:</p>\n<p><a href=\"https://i.sstatic.net/m8JUv.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/m8JUv.png\"/></a></p>\n<p>(field1 is a code pointer, with the comment indicating the address it should be, and field2 is a data pointer)</p>\n<p>I tried creating a function definition and setting the type as a pointer to that, but it still kept pointing to the wrong address. So, alternatively, could this behaviour be a bug?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "119",
    "tags": [
        "ghidra",
        "pointer"
    ],
    "user": "zzt",
    "time": "Jan 6, 2022 at 9:18",
    "comments": [],
    "answers_data": []
}