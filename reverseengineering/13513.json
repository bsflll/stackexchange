{
    "title": "Are there IDA scripts/plugins to translate/comment instructions to/with pseudocode?",
    "link": "https://reverseengineering.stackexchange.com/questions/13513/are-there-ida-scripts-plugins-to-translate-comment-instructions-to-with-pseudoco",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not asking for a decompiler, as I'm aware that it does not produce accurate results all the time. I've tried Googling but all I found were decompilers.</p>\n<h2>Problem</h2>\n<p>I found it extremely inefficient to be continuously referring to the instruction set manual to find out what various uncommon instructions do. Furthermore I deal only infrequently with assembly and I found I have to continuously make a conscious effort to interpret the mnemonic syntax, which slows things down tremendously.</p>\n<h2>Requirement</h2>\n<p>A per-line translation of the assembly instructions. As a very simple example, replacing <code>add eax, ebx</code> with <code>eax += ebx</code> in the disassembly view, or just commenting the instruction with the pseudocode. Be it replacement or commenting, having the pseudocode inline would help to preserve the graph view and other convenient functionalities provided by IDA.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "decompiler"
    ],
    "user": "wmjdgla",
    "time": "Sep 16, 2016 at 8:40",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">Many instructions have a whole load of side effects e.g. ret, push... even your simple add example implicitly calculates all eflags registers. If you would translate all of this to pseudocode, you would end up with an intermediate representation (Vex, REIL, ESIR, ...). There are lots of them out there and I would advice to have a look at them, since they feature RISC instruction sets.</span>",
            "time": null
        },
        {
            "user": "wmjdgla",
            "text": "<span class=\"comment-copy\">@Nordwald Side effects is another reason why I would prefer to have pseudocode. Trying to keep track of all of them and to figure out what flags the conditional instructions are checking for is simply not practical for me.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Have you considered purchasing HexRay's decompiler? It'll provide a function level decompilation, far superior to any instruction level decompilation</span>",
            "time": null
        },
        {
            "user": "wmjdgla",
            "text": "<span class=\"comment-copy\">@Nirlzr Nope I'm not looking into decompilers as they do not produce accurate results all the time, at least based on what I've learned so far. How well can they handle obfuscation and anti-analysis? Also can graph view be used on the decompiled code?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's an incomplete script to do this, for x86:</p>\n<pre><code>#include &lt;idc.idc&gt;\n/*\n    Project name: Pseudo instruction adder 1.0\n\n    Author: fastman92\n*/\n\n#define true 1\n#define false 0\n\n\n#define ARCHITECTURE_TYPE_X86 1\n#define ARCHITECTURE_TYPE_X64 2\n\nextern architectureType;\nextern pointerSize;\n\nstatic MakeInstructionComment_x86(ea)\n{\n    auto mnem = GetMnem(ea);\n\n    auto op0 = GetOpnd(ea, 0);\n    auto op1 = GetOpnd(ea, 1);\n\n    auto comment = \"\";\n\n    if(mnem == \"push\")\n        comment = sprintf(\"ESP -= 4; *(int32_t*)ESP = %s;\", op0);\n    else if(mnem == \"mov\")\n        comment = sprintf(\"%s = %s;\", op0, op1);\n    else if(mnem == \"lea\")\n        comment = sprintf(\"%s = address(%s);\", op0, op1);\n    else if(mnem == \"jmp\")\n        comment = sprintf(\"goto %s;\", op0);\n    else if(mnem == \"pop\")\n        comment = sprintf(\"%s = *(int32_t*)ESP; ESP += 4;\", op0);\n    else if(mnem == \"leave\")\n        comment = \"EBP = *(int32_t*)ESP; ESP += 4;\";\n    else if(mnem == \"retn\")\n        comment = \"return;\";\n    else if(mnem == \"sub\")\n        comment = sprintf(\"%s -= %s;\", op0, op1);\n    else if(mnem == \"shr\")\n        comment = sprintf(\"%s = %s &gt;&gt; %s;\", op0, op0, op1);\n    else if(mnem == \"shl\")\n        comment = sprintf(\"%s = %s &lt;&lt; %s;\", op0, op0, op1); \n    else if(mnem == \"and\")\n        comment = sprintf(\"%s &amp;= %s;\", op0, op1);\n    else if(mnem == \"or\")\n        comment = sprintf(\"%s |= %s;\", op0, op1);\n    else if(mnem == \"xor\")\n        comment = sprintf(\"%s ^= %s;\", op0, op1);\n    else if(mnem == \"not\")\n        comment = sprintf(\"%s = ~%s;\", op0, op0);\n    else if(mnem == \"cmp\")\n        comment = sprintf(\"EFL = cmp(%s, %s);\", op0, op1);\n    else if(mnem == \"test\")\n        comment = sprintf(\"EFL = test(%s, %s);\", op0, op1);\n\n    else if(mnem == \"jnb\")\n        comment = \"goto, if A &gt;= B;\";\n    else if(mnem == \"jz\")\n        comment = \"goto, if A == B;\";\n    else if(mnem == \"jnz\")\n        comment = \"goto, if A != B;\";\n    else if(mnem == \"jb\")\n        comment = \"goto, if A &lt; B;\";\n    else if(mnem == \"jbe\")\n        comment = \"goto, if A &lt;= B;\";\n    else if(mnem == \"jl\")\n        comment = \"goto, if A &lt; B;\";\n    else if(mnem == \"ja\")\n        comment = \"goto, if A &gt; B;\";\n    else if(mnem == \"js\")\n        comment = \"goto, if A &lt; 0;\";\n\n\n    else if(mnem == \"pusha\")\n        comment = \"saveAllGeneralRegisterValues()\";\n    else if(mnem == \"popa\")\n        comment = \"restoreAllGeneralRegisterValues()\";\n\n    else if(mnem == \"stc\")\n        comment = \"setCarryFlag();\";\n    else if(mnem == \"clc\")\n        comment = \"clearCarryFlag();\";\n    else if(mnem == \"cmps\")\n        comment = \"memcmp;\";\n    else if(mnem == \"movs\")\n        comment = \"memset;\";\n\n    else if(mnem == \"nop\")\n        comment = \";\";\n\n    else if(mnem == \"call\")\n        comment = sprintf(\"call %s\", op0);  \n    else if(mnem == \"inc\")\n        comment = sprintf(\"%s++;\", op0);\n    else if(mnem == \"dec\")\n        comment = sprintf(\"%s--;\", op0);\n    else if(mnem == \"add\")\n        comment = sprintf(\"%s += %s;\", op0, op1);\n    else\n    {\n        // Message(\"unknown: 0x%X mnem: %s\\n\", ea, mnem);\n        return true;\n    }\n\n    MakeComm(ea, comment);\n\n    // Message(\"0x%X: %s\\n\", ea, comment);\n    return true;\n}\n\nstatic MakeInstructionComment(ea)\n{\n    if(architectureType == ARCHITECTURE_TYPE_X86)\n        return MakeInstructionComment_x86(ea);      \n}\n\nstatic main()\n{\n    architectureType = ARCHITECTURE_TYPE_X86;\n\n    if(architectureType == ARCHITECTURE_TYPE_X86)\n    {\n        pointerSize = 4;\n    }\n\n\n    Message(\"Start of pseudo instruction adder by fastman92\\n\");\n\n    auto seg, loc;\n\n    Message(\"========================================\\n\");\n\n    seg = FirstSeg();   // Get address pointed by a first segment\n\n    auto shouldBreak = false;\n\n    while(seg != BADADDR )\n    {   \n        Message(\"----------------------------------------\\n\");\n\n        loc = SegStart(seg);        \n\n        Message(\"Adding pseudo code comments in segment %s\\n\", SegName(seg));\n\n\n        while(loc != BADADDR &amp;&amp; loc &lt; SegEnd(seg))\n        {                           \n            if(isCode(GetFlags(loc)))\n            {\n                shouldBreak = !MakeInstructionComment(loc);\n\n                if(shouldBreak)\n                    break;\n            }\n\n            loc = NextHead(loc, BADADDR);           \n        }\n\n\n        if(shouldBreak)\n            break;\n\n        seg = NextSeg(seg);     // get address of the next segment\n    }\n\n    Message(\"End of pseudo instruction adder by fastman92\\n\");\n}\n</code></pre>\n</div>",
            "votes": "2",
            "user": "fastman92",
            "time": "Sep 23, 2016 at 16:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "wmjdgla",
                    "text": "<span class=\"comment-copy\">Wow that's awesome! Thanks so much for making the script. This is an excellent base to build upon.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can enable the <code>auto-comment</code> option in IDA, to have something like this:</p>\n<p><a href=\"https://i.sstatic.net/U3Aak.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/U3Aak.png\"/></a></p>\n<p>Or also give a try to <a href=\"http://derevenets.com/\" rel=\"noreferrer\">snowman</a>, a free decompiler for IDA Pro, that is able to transform this compiled program:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n        printf(\"Hello, World!\\n\");\n        return 0;\n}\n</code></pre>\n<p>into </p>\n<pre><code>int64_t main() {\n    puts(\"Hello, World!\");\n    return 0;\n}\n</code></pre>\n</div>",
            "votes": "6",
            "user": "jvoisin",
            "time": "Sep 16, 2016 at 17:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "wmjdgla",
                    "text": "<span class=\"comment-copy\">Unfortunately the auto-comments do not go far enough, and I'm not looking for decompilers as they do not produce accurate results all the time, at least based on what I've learned so far.</span>",
                    "time": null
                }
            ]
        }
    ]
}