{
    "title": "Use After Free - Example",
    "link": "https://reverseengineering.stackexchange.com/questions/4748/use-after-free-example",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Use After Free</strong> bugs a getting more severe these days.</p>\n<p>I'm planning to demonstrate Use After Free bug exploitation using <strong>VTable overwrite</strong>. So, I'm trying to create a <strong>ATL ActiveX Control</strong> which is vulnerable to Use After Free bug using <strong>Internet Explorer 9 or 10</strong>.</p>\n<p>I'm having trouble to come up with a <strong>Use After Free vulnerable code</strong> that works. Does anyone has experience with this kind of bug and can anyone try to help me.</p>\n<p>I'm trying too. If I'm able to get it working, I'll share it here:</p>\n<pre><code>class User\n{\n  public:\n    virtual void SetUsername() { }\n};\n\nclass NewUser:public User\n{\n  char username[20];\n  public:\n    virtual void SetUserName(char* strUsername) { strcpy(username, strUsername); }\n    virtual char* GetUserName() { return username; }\n};\n\nSTDMETHODIMP CATLActivexControl::CreateUser(BSTR sUserName, DOUBLE* retVal)\n{\n  USES_CONVERSION;\n  char *tmp = W2A(sUserName);\n  NewUser *nuser = new NewUser;\n  nuser-&gt;SetUserName(tmp);\n\n  free(nuser);\n\n  char *xyz = nuser-&gt;GetUserNameW();\n  return S_OK;\n}\n</code></pre>\n<p><strong>I worked on the above example and I have come up with a nicer solution which really triggers Use After Free.</strong></p>\n<p><strong>C++ code</strong></p>\n<pre><code>#include \"stdafx.h\"\n#include \"ATLStudentActiveXControl.h\"\n\n// Virtual Function defination\nclass User\n{\npublic:\n    virtual void Add(char* uName) = 0;\n    virtual char* GetName() = 0;\n};\n\nclass Student : public User\n{\nprivate:\n    char s_name[30];\n\npublic:\n    virtual void Add(char* uName) { strncpy(s_name, uName, sizeof(s_name)); }\n    virtual char* GetName() { return s_name; }\n\n};\n\nStudent *pStudent = new Student;\n\nSTDMETHODIMP CATLStudentActiveXControl::Add(BSTR sName)\n{\n    USES_CONVERSION;\n    char *tStudent = W2A(sName);\n    pStudent-&gt;Add(tStudent);\n    return S_OK;\n}\n\nSTDMETHODIMP CATLStudentActiveXControl::Delete()\n{\n    free(pStudent);\n    return S_OK;\n}\n\nSTDMETHODIMP CATLStudentActiveXControl::GetName(BSTR* sName)\n{\n    char *tStudent = pStudent-&gt;GetName();\n    *sName = A2WBSTR(tStudent);\n    return S_OK;\n}\n</code></pre>\n<p><strong>HTML Code</strong></p>\n<pre><code>&lt;HTML&gt;\n&lt;HEAD&gt;\n&lt;TITLE&gt;Use After Free - Test Page&lt;/TITLE&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n    function UAF() {\n        alert('Start');\n\n        // Assign _studentActiveX variable to ATLStudentActiveXControl\n        var _studentActiveX = document.getElementById(\"ATLStudentActiveXControl\");\n\n        // Add a student\n        _studentActiveX.Add(\"StudentName\");\n\n        // Uncomment the below line to trigger Use After Free vulnerability\n        // _studentActiveX.Delete();\n\n        // Get the name of the added student\n        var _studentName = _studentActiveX.GetName();\n        alert(_studentName);\n\n        // Delete the student\n        _studentActiveX.Delete()\n\n        alert('Done');\n    }\n&lt;/script&gt;\n&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;OBJECT ID=\"ATLStudentActiveXControl\" CLASSID=\"CLSID:9EACDFCF-1A2E-462E-9DF6-53E03936DB22\"&gt;&lt;/OBJECT&gt;\n&lt;div&gt;\n    &lt;p&gt;Demonstrating &lt;b&gt;Use After Free&lt;/b&gt; vulnerability.&lt;/p&gt;\n    &lt;input type=\"button\" onclick=\"UAF();\" value=\"Use After Free\" /&gt;\n&lt;/div&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre>\n<p>Please share your views. Thanks.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "debugging",
        "exploit",
        "vulnerability-analysis"
    ],
    "user": "john4tech",
    "time": "Jul 4, 2014 at 5:02",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">You might have already found link, but <a href=\"http://cwe.mitre.org/data/definitions/416.html\" rel=\"nofollow noreferrer\">here</a> is it, in case you haven't.</span>",
            "time": null
        },
        {
            "user": "john4tech",
            "text": "<span class=\"comment-copy\">Yeah, I saw that link. That link is for normal console program, but I'm trying to implement <b>UAF</b> in <b>ATL ActiveX control</b>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The first thing that comes to my mind is for you to create a class with a few virtual methods, which will be used as the test subject. Then from your ActiveX control you'd expose methods that manipulate the variable, say:</p>\n<ul>\n<li>Method #1: Allocate the test object and keep the pointer in a static variable</li>\n<li>Method #2: Call the virtual methods provided by the test object</li>\n<li>Method #3: Free the test object instance, <strong>without setting the pointer to NULL</strong></li>\n<li>Some means to allocate other things that would reuse the memory freed in the previous method</li>\n</ul>\n<p>Then whip up a basic script exercising the given methods: allocate, call the methods to make sure it works as designed, free the instance, allocate something else, call virtual methods again and crash the IE instance. ;-) Should do the trick.</p>\n</div>",
            "votes": "3",
            "user": "Dmitry Janushkevich",
            "time": "Jul 2, 2014 at 7:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">That is what I'm trying to achieve. But I'm planning to implement in such a way that it's easy for exploitation. Here is a small example, that I have created. But still wondering if that wold do the trick.</span>",
                    "time": null
                },
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">This is what I have created. <a href=\"http://pastebin.com/XNvr7hWP\" rel=\"nofollow noreferrer\">Use After Free - Rubbish Example</a></span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You should have included this code in your question... It would have been way easier to answer from this.</span>",
                    "time": null
                },
                {
                    "user": "Dmitry Janushkevich",
                    "text": "<span class=\"comment-copy\">The main point is, the attacker has to get some control between the object being freed (the <code>free(nuser);</code> part in your example) and the dereference of the dangling pointer (I assume, the <code>nuser-&gt;GetUserNameW();</code> call is supposed to be the \"use\" part). In your example, there is no chance for that. It would be better to expose an ActiveX method to solely do the <code>nuser-&gt;GetUserNameW();</code> call, thus splitting the <code>CATLActivexControl::CreateUser</code> method in two. This way, you actually get a chance to overwrite freed memory.</span>",
                    "time": null
                },
                {
                    "user": "Dmitry Janushkevich",
                    "text": "<span class=\"comment-copy\">I've edited the answer to reflect that those have to be separate methods.</span>",
                    "time": null
                }
            ]
        }
    ]
}