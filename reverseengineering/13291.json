{
    "title": "what means this lines in assembly program (compile from c)?",
    "link": "https://reverseengineering.stackexchange.com/questions/13291/what-means-this-lines-in-assembly-program-compile-from-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have code in C:</p>\n<pre><code>int a() {\n\n     char string[100];\n}\n</code></pre>\n<p>When I compile this I get code in assembly:</p>\n<pre><code>a:\n    push    rbp\n    mov rbp, rsp\n    sub rsp, 112\n    mov rax, QWORD PTR fs:40  &lt;----\n    mov QWORD PTR [rbp-8], rax &lt;----\n    xor eax, eax\n    nop\n    mov rdx, QWORD PTR [rbp-8]\n    xor rdx, QWORD PTR fs:40\n    je  .L2\n    call    __stack_chk_fail\n</code></pre>\n<p>What make lines that I checked ? What is it \"fs:40\" ? (always when I make a array in c) and what is in rbp-12 ? nothing ?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "Wallers Jason",
    "time": "Sep 5, 2016 at 22:43",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">i started writing an answer and then i relaised your paste is messed up did you copy paste correctly ? the line xor rdx . qword ptr fs:40 doesnt look correct it must be xor rdx, rax or something else (if it xorred with 0 then fs:40 is stack canary (read up on the smashing the stack canary stack gaurd etc</span>",
            "time": null
        },
        {
            "user": "Wallers Jason",
            "text": "<span class=\"comment-copy\">compiled again, it is the same , I used the command \"gcc -S -fno - asynchronous - unwind -tables -masm = intel sock.c \"</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">try adding -fno-stack-protector to that and see</span>",
            "time": null
        },
        {
            "user": "Wallers Jason",
            "text": "<span class=\"comment-copy\">thanks, all incomprehensible lines were gone :D and now I know what they did</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would start out by looking at this previous topic <a href=\"https://stackoverflow.com/questions/4568848/good-reference-for-x86-assembly-instructions\">Good reference for Assembler</a> here on stack overflow. From the sound of it you probably don't have much assembler experience and that's ok.  Assembler is just a way of getting the cpu to understand what you want it to do.  </p>\n<p>before things can be explained you have to understand the convention of the use of the registers and what they all mean.  for example the base pointer of the stack is saved at entry of a function (push rbp)  so it can be restored when the function ends.  in your c code you have \nint a()</p>\n<p>the start of the function defines a new stack frame with no parameters and a return result.  we'll be returning a variable and it by convention will be returned in the A register (usually RAX).</p>\n<p>Once RBP has been preserved the current stack pointer (RSP) is set to the base pointer RBP and things get manipulated from there.  Think of the stack as just a structure of memory that has been pre-allocated for special computational use.</p>\n<p>the instructions will bounce back and forth relative to the RBP to reference variables, (local, global, etc) as the function progresses and as needed.</p>\n<p>Depending on the OS and chip, FS might be referring to a thread local storage block, or it might be referring to a memory segment on the cpu.  Its dependent on your OS and architecture.  the :40 is an offset into the segment or block.</p>\n<p>typically, and it depends on your OS, when you see something like rbp-8 or whatever it means to take the current value of RBP and subtract 8 from it.  however on some implementations and depending on where the scalar is placed it can mean take that many byte segments (words) as an offset from RBP and use that effective address.</p>\n<p>that's all I have for now.  I'd start with the other topic and go from there.</p>\n<p>Or just run it in a debugger and look at the values of the registers as it moves through each step.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Wallers Jason",
                    "text": "<span class=\"comment-copy\">thanks for your reply, I am very grateful. Very me wonder what is put on the stack in these two lines (checked in code) , they are repeated each time only when I create arrays and always it is value from fg:40  other interesting thing is that when I put something at first byte of array I get code:  \t<code>mov\tQWORD PTR [rbp-8], rax</code> <code>xor\teax, eax</code> <code>mov\tDWORD PTR [rbp-16], 97 </code>  What is in rbp - 12 ? empty space ?</span>",
                    "time": null
                },
                {
                    "user": "Wallers Jason",
                    "text": "<span class=\"comment-copy\">probably I know what is it, stack protector, compilator check if someone overwrite stack</span>",
                    "time": null
                },
                {
                    "user": "Div",
                    "text": "<span class=\"comment-copy\">If you can get your hands on a debugger, an easy way to find out whats going on is step through one instruction at a time.   At each point, examine the registers and memory locations  (such as rbp-16) and see whats there before the 97 gets moved there and after it gets moved there.   Note this varies by OS but the numbers aren't necessarily base 10.  It was the compiler's job to translate the original C source to assembler and it had to keep track variable storage. The cpu is using the stack  area to store its calculations and that's why its storing things at various points along the way.</span>",
                    "time": null
                }
            ]
        }
    ]
}