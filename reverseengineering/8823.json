{
    "title": "Use Android Shared library (.so) files in Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/8823/use-android-shared-library-so-files-in-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I decompiled an APK file,and that program have native codes in a <code>.so</code> file.</p>\n<p>I want to use that <code>.so</code> file in Linux in order to use inline functions.\nThese codes have functions to connect to a server and perform encryption/decryption on the data transfered.</p>\n<p>I decompiled that with IDA Pro too. Can I decompile and recompile ARM codes to a x64 CPU and run it in Linux ?</p>\n<p>Or, do I need a light simulator to run that ARM <code>*.so</code> file ?</p>\n<p>IDA Pro decompile the codes, I see the assembly functions but I'm not used to assembly, nor to reverse engineering. How to translates these functions to C or python functions ?</p>\n</div>",
    "votes": "6",
    "answers": 3,
    "views": "12k",
    "tags": [
        "ida",
        "disassembly",
        "linux",
        "android"
    ],
    "user": "IrajTaghlidi",
    "time": "May 7, 2015 at 15:46",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">You need an emulator. There is an ARM VM here - <a href=\"http://opensecuritytraining.info/IntroARM.html\" rel=\"nofollow noreferrer\">opensecuritytraining.info/IntroARM.html</a></span>",
            "time": null
        },
        {
            "user": "Danil",
            "text": "<span class=\"comment-copy\">You shouldn't use IDA anymore as Ghidra decompiles it a lot better to pure C code without any remainder in form of inline ARM and such. This enables you to recompile C code to x86-64 architecture or anything else you need. And there is no such language as x64, I don't know who started using this, the only language which exists is x86-64/IA64 which is just the same thing.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@Danil I converted your comment to a comment as it wasn't an answer. x64 is indeed <i>a thing</i>. In particular Microsoft was using that term for x86-64 early on as they supported AMD <i>and</i> Intel CPUs. <a href=\"https://en.wikipedia.org/wiki/X86-64\" rel=\"nofollow noreferrer\">Wikipedia even mentions x64</a>. Oh and sorry to break it to you, but x86-64 and <a href=\"https://en.wikipedia.org/wiki/IA-64\" rel=\"nofollow noreferrer\">IA-64</a> <b>are not</b> the same thing ... and \"IA64\" is even less of <i>a thing</i>. x(86-)64 is a 64-bit extension of IA-32. So while your advice with Ghidra may be valid in general, <i>that</i> wasn't available in 2015 to the public either.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, extract the whole APK (it's a renamed ZIP) and check whether there's not a x86 version of the binary, in addition of the ARM. It will depend on the best option to choose.</p>\n<p>The following options assume that you have analyzed the binary using a tool such as IDA, Hex-Rays or Hopper and that you could identify the functions that you want to reach.</p>\n<hr/>\n<p><strong>If you need to emulate the calling conventions between a GLIB-based Linux system and a <code>.so</code> Android-targeted library, and that emulating the architecture is not a problem, for example because you have a x86 version of the library available in the APK:</strong></p>\n<ul>\n<li><p>One quite common, but sometimes painful option is using <strong><a href=\"https://github.com/libhybris/libhybris\" rel=\"nofollow noreferrer\">libhybris</a></strong>, a thin wrapper around Android's custom libc (Bionic) calling conventions that will allow you to call functions from the reverse engineered JNI from a regular GCC or Clang-compiled GLIBC program. Tutorials for libhybris are not numerous, but you'll find a couple of open source projects on the Internet that rely on it and will serve as sample code.</p>\n<p>However, libhybris will emulate the calling conventions but not the architecture.</p>\n</li>\n</ul>\n<hr/>\n<p><strong>If you need to emulate both the architecture and the Android ABIs:</strong></p>\n<ul>\n<li>You have a few options here, either running your part of the program on an ARM host - this could be the Android emulator, your smartphone, a cheap ARM VPS, a Raspberry Pi or something else - either using an emulator such as <a href=\"http://nairobi-embedded.org/qemu_usermode.html\" rel=\"nofollow noreferrer\"><strong>QEMU in user mode</strong></a> (that allows you to emulate a single ELF file in a chrooted environment without emulating a whole system). Also, you'll likely have to cross-compile your code.</li>\n</ul>\n<hr/>\n<p><strong>If you need to emulate the architecture, the Android ABIs and you wish to have more control over the emulated binary at the expense of parsing the ELF/handling the memory layout with code yourself:</strong></p>\n<ul>\n<li><p>Another option is using <a href=\"http://www.unicorn-engine.org/\" rel=\"nofollow noreferrer\"><strong>Unicorn engine</strong></a>, a library based on QEMU's code that allows you to emulate machine code on a foreign host in a way similar to using a debugger, by reading/writing registers, memory and setting breakpoints.</p>\n<p>Unicorn's API is pretty bare-metal: to use it, you parse the <a href=\"http://man7.org/linux/man-pages/man5/elf.5.html\" rel=\"nofollow noreferrer\"><strong>elf(5)</strong></a> structure yourself, then, you allocate and write the relevant sections of the binary yourself, you set the registers (PC for the target function, SP at a point with free space, R0, R1 and so forth for the arguments, LR at a point where you set a hook) and your start the emulator.You can find a few easy-to-understand examples <a href=\"http://www.unicorn-engine.org/docs/tutorial.html\" rel=\"nofollow noreferrer\">here, in C and in Python</a>.</p>\n</li>\n</ul>\n</div>",
            "votes": "6",
            "user": "CÃ©cile Bertau",
            "time": "Dec 23, 2020 at 11:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For decompile a APK file, you can use different tools(<a href=\"https://mobilesecuritywiki.com/\" rel=\"nofollow\">https://mobilesecuritywiki.com/</a>).\nIf you use python this is the best:</p>\n<p><a href=\"https://github.com/androguard/androguard\" rel=\"nofollow\">https://github.com/androguard/androguard</a> or <a href=\"https://code.google.com/p/androguard/(see\" rel=\"nofollow\">https://code.google.com/p/androguard/(see</a> also this example: <a href=\"https://github.com/androguard/androguard/tree/master/demos\" rel=\"nofollow\">https://github.com/androguard/androguard/tree/master/demos</a>)</p>\n<p>You can decompile for ARM, but for test you should be use quemu (for ARM) or eclipse.</p>\n</div>",
            "votes": "0",
            "user": "invictus85",
            "time": "May 7, 2015 at 13:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Have a look at NativeFunction API of <a href=\"http://frida.re/\" rel=\"nofollow noreferrer\">frida</a>. It helps you call any native function. With a little bit of reversing, you'll have something like</p>\n<pre><code>var func = new NativeFunction(Module.findExportByName('libxx.so', 'fun'), 'uint32', []);\n</code></pre>\n</div>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Aug 4, 2017 at 13:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}