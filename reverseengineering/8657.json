{
    "title": "While Loop Correct?",
    "link": "https://reverseengineering.stackexchange.com/questions/8657/while-loop-correct",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reversing some x86 from an old CTF from 2014 and am trying to understand the below code (it has been shortened drastically).  I believe it is performing some sort of while or for loop through a string x number of times where x is the length of the string.  </p>\n<p>Some Basic Info:</p>\n<ul>\n<li>Intel Syntax </li>\n<li>Function Prototype Given:\n<ul>\n<li>int main(char*);</li>\n</ul></li>\n</ul>\n<p>My primary confusion lies within the end of .L3 and .L2:</p>\n<p>I believe the end of .L3 is storing the register arithmetic in [ebp-12] and then increasing the value of [ebp-8] (I believe this is a pointer to a copy of the char* arg) </p>\n<pre><code>.L1\n    push    ebp    \n    mov     ebp, esp\n    push    ebx \n    sub     esp, 20 \n    mov     DWORD PTR [ebp-12], 0\n    mov     eax, DWORD PTR [ebp+8]\n    mov     DWORD PTR [ebp-8], eax\n    jmp     .L2\n.L3\n    // Bunch of annoying arithmetic w/ registers\n    mov     DWORD PTR [ebp-12], eax     \n    add     DWORD PTR [ebp-8], 1        \n.L2:\n    mov     eax, DWORD PTR [ebp-8]      \n    movzx   eax, BYTE PTR [eax]         \n    test    al, al                      \n    jne     .L3                             \n    add     esp, 20\n    pop     ebx\n    pop     ebp\n    ret\n</code></pre>\n<p>My loose conversion of this (disregarding much of .L3) is as follows in c:</p>\n<pre><code>int main(char* arg)\n{\n    int loc1 = 0;\n    char* str = arg;\n    for(i = 0; str[i] != '\\0'; i++) {         //  &lt;=== Pretty Sure\n         // .L3 Stuff w/ Assignment to loc1   //  This is incorrect\n    }\n    return loc1;\n}\n</code></pre>\n<p>Would someone be willing to explain the incrementation of the [ebp-8], first four lines of .L2, and confirm/deny that during the return the value of eax or loc1 as I called it will return based on the end of .L2?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "x86",
        "decompile"
    ],
    "user": "Kaiser17",
    "time": "Apr 8, 2015 at 2:03",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Note that <code>movzx   eax, BYTE PTR [eax]</code> will load one byte into <code>al</code>, and set the rest of <code>eax</code> to zero. If that byte is <code>!= 0</code>, the loop continues; so once the loop exits, <code>eax</code> is <code>0</code> so the function returns <code>0</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's annotate the assembly.</p>\n<pre><code>.L1\n    push    ebp       // standard function prologue\n    mov     ebp, esp\n    push    ebx       // saved register\n    sub     esp, 20   // room for locals\n    mov     DWORD PTR [ebp-12], 0    // x = 0 (x = var@-12)\n    mov     eax, DWORD PTR [ebp+8]   // s = arg1 (s = var@-8)\n    mov     DWORD PTR [ebp-8], eax\n    jmp     .L2\n.L3\n    // Bunch of annoying arithmetic w/ registers\n    mov     DWORD PTR [ebp-12], eax     // x = eax (whatever you computed)\n    add     DWORD PTR [ebp-8], 1        // s++\n.L2:\n    mov     eax, DWORD PTR [ebp-8]      // eax = s\n    movzx   eax, BYTE PTR [eax]         // eax = *s\n    test    al, al                      // if(*s != 0) goto L3\n    jne     .L3                         \n    add     esp, 20                     // cleanup and return\n    pop     ebx\n    pop     ebp\n    ret\n</code></pre>\n<p>Your reconstruction was pretty accurate. I'd change it as follows:</p>\n<pre><code>void func(char* arg) {\n    int x = 0; // @-12\n    char* s; // @-8\n    for(s = arg; *s != '\\0'; s++) {\n         // do stuff and assign stuff to x\n    }\n    // no return: eax at function end is always 0 and seems to be just a temporary\n}\n</code></pre>\n</div>",
            "votes": "2",
            "user": "nneonneo",
            "time": "Apr 8, 2015 at 5:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>this construct imho is a do while loop the telltale jmp at start and the conditional jump at end indicates that construct</p>\n<p>this seems to be a strlen kind of function takes one char * input and finds the null at the end of the input  </p>\n<p>code pasted below generates an equivalent assembly in vc2kten express</p>\n<ol>\n<li><p>the cdb commands are set symbol path to local directory to avoid\nhitting internet with <code>.sympath</code></p></li>\n<li><p>disassemble the function of interest completely with <code>uf Funct</code></p></li>\n<li>execute until the start of desired function with <code>g funct</code> </li>\n<li>dump value of edx , <code>stepover</code> till the first return with <code>pt</code> and step\nout with <code>p</code> </li>\n<li>redump value of edx and eax and quit</li>\n</ol>\n<p><strong>:dir /b</strong></p>\n<pre><code>compile.bat\nx86while.cpp\n</code></pre>\n<p><strong>code for demo</strong></p>\n<pre><code>:type x86while.cpp\nvoid funct (unsigned char *input ) {\n        unsigned char *a;\n        int b,c,d,e,g,h,f=0;\n        a = input;\n        do {\n                f++;\n        }while(a[f]!=0);\n}\nunsigned char buff[] = {\"hello my dear world\"};\nvoid main (void) {\n        funct(buff);\n}\n</code></pre>\n<p><strong>compiled linked and executed with</strong></p>\n<pre><code>:type compile.bat\ndel x86while.exe\nif \"%vcinstalldir%\" == \"\"  ( @call \"C:\\Program Files\\Microsoft Visual Studio 10.\n0\\VC\\vcvarsall.bat\" x86 )\ncl /Zi /EHsc  /nologo /W4 /analyze *.cpp /link /RELEASE /ENTRY:main /FIXED\ncdb -c \".sympath \\\"f:\\symbols\\\";uf funct;g funct;r @edx;pt;p;r @edx;r eax;q\" x86\nwhile.exe\n</code></pre>\n<p><strong>results of execution generic spew removed only disassembly  kept</strong></p>\n<pre><code>x86while!funct:\n00401000 55              push    ebp\n00401001 8bec            mov     ebp,esp\n00401003 83ec20          sub     esp,20h\n00401006 c745f400000000  mov     dword ptr [ebp-0Ch],0\n0040100d 8b4508          mov     eax,dword ptr [ebp+8]\n00401010 8945f8          mov     dword ptr [ebp-8],eax\n\nx86while!funct+0x13:\n00401013 8b4df4          mov     ecx,dword ptr [ebp-0Ch]\n00401016 83c101          add     ecx,1\n00401019 894df4          mov     dword ptr [ebp-0Ch],ecx\n0040101c 8b55f8          mov     edx,dword ptr [ebp-8]\n0040101f 0355f4          add     edx,dword ptr [ebp-0Ch]\n00401022 0fb602          movzx   eax,byte ptr [edx]\n00401025 85c0            test    eax,eax\n00401027 75ea            jne     x86while!funct+0x13 (00401013)\n\nx86while!funct+0x29:\n00401029 8be5            mov     esp,ebp\n0040102b 5d              pop     ebp\n0040102c c3              ret\n\nedx=7c90e514 when entering function\nedx=00403013 on returning from function\neax=00000000  \nquit:\n0:000&gt; ?? buff\nunsigned char [20] 0x00403000\n0x68 'h'\n0:000&gt; db buff @edx\n00403000  68 65 6c 6c 6f 20 6d 79-20 64 65 61 72 20 77 6f  hello my dear wo\n00403010  72 6c 64 00                                      rld.\n0:000&gt;\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Apr 8, 2015 at 8:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}