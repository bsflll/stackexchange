{
    "title": "What changes in MS Windows system libraries after restart?",
    "link": "https://reverseengineering.stackexchange.com/questions/3895/what-changes-in-ms-windows-system-libraries-after-restart",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm running a 64-bit MS Windows 7 with all updates installed. About 1 or 2 weeks ago I've noticed that whenever I restart the OS, the virtual memory pages (of whatever process), corresponding to system libraries like <code>ntdll.dll</code> and <code>kernel32.dll</code> are slightly different. </p>\n<p>I'm not talking about the base address of the loaded modules, because I know that changes due to ASLR. I'm talking about the actual contents of the loaded modules, which as far as I know was not affected by ASLR implementations on Windows.</p>\n<p>To illustrate what I mean, let me show you the following screenshot that compares 2 binary instances of <code>ntdll.dll</code> captured before (top-half) and after (bottom-halt) one OS restart:\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/xHpGR.png\"/></p>\n<p>The picture shows just a small part of <code>ntdll.dll</code> and therefore just a few differences. However, there are more. The size of these DLLs don't change, only some bytes at particular locations.</p>\n<p>I obtained the 2 binary instances which are compared in the previous picture using Process Hacker like so:</p>\n<ul>\n<li>Right-click a process and select <strong>Properties</strong></li>\n<li>Go to the <strong>Memory</strong> tab and scroll-down until you find several entries having the name: <em>ntdll.dll: Image (Commit)</em></li>\n<li>Double-click one of these entries (I chose the one that had 856kB)</li>\n<li>Press the <strong>Save...</strong> button to store the contents to a binary file on the HDD.</li>\n</ul>\n<p><strong>Question 1:</strong> What is causing these bytes to change? </p>\n<ul>\n<li><strong>Sub-question 1.1:</strong> Is is some sort of protection mechanism? </li>\n<li><strong>Sub-question 1.2:</strong> Was it recently introduced?  </li>\n<li><strong>Sub-question 1.3:</strong> Can it be disabled?</li>\n</ul>\n<p><strong>Question 2:</strong> What do these changing bytes represent in the code of the DLLs? </p>\n</div>",
    "votes": "8",
    "answers": 2,
    "views": "329",
    "tags": [
        "windows",
        "dll"
    ],
    "user": "Benny",
    "time": "Mar 18, 2014 at 13:32",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Run <code>dumpbin /relocations ntdll.dll</code> and compare the listed addresses against the changes.</span>",
            "time": null
        },
        {
            "user": "Benny",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky I did run <code>dumpbin</code> as you indicated and compared the listed addresses against the changes. As a matter of fact it seems that no relocations were applied on <code>ntdll.dll</code>. And the changes that are visible in my picture are due to the system DLLs being linked with <code>/DYNAMICBASE</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p><strong>Question 1:</strong> What is causing these bytes to change?</p>\n</blockquote>\n<p>These appear to be standard relocation fixups applied based on the DLL's <strong>Relocation Table</strong>.</p>\n<blockquote>\n<p><strong>Sub-question 1.1:</strong> Is is some sort of protection mechanism?</p>\n</blockquote>\n<p>No.</p>\n<blockquote>\n<p><strong>Sub-question 1.2:</strong> Was it recently introduced?</p>\n</blockquote>\n<p>No.</p>\n<blockquote>\n<p><strong>Sub-question 1.3:</strong> Can it be disabled?</p>\n</blockquote>\n<p>Not easily, no.</p>\n<blockquote>\n<p><strong>Question 2:</strong> What do these changing bytes represent in the code of the DLLs?</p>\n</blockquote>\n<p>Addresses.</p>\n</div>",
            "votes": "7",
            "user": "Jason Geffner",
            "time": "Mar 18, 2014 at 13:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. Would you be so kind as to also mention the addresses of what change? Is it the addresses of all functions or just some?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">It's not just for function addresses; it also applies to global variable addresses, etc. Simply put, any time the code or data references a virtual address instead of a relative virtual address, that reference needs to have a Relocation Table entry. See Sections 4.2 and 5.6 of <a href=\"http://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/pecoff_v83.docx\" rel=\"nofollow noreferrer\">download.microsoft.com/download/9/c/5/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for clarifying that. One last question regarding this issue: is there a win32 API which can map/convert all the VAs to RVAs of a mapped image file? Or is this a question for stackoverflow?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No API needed... <code>VA - Image Base Address = RVA</code> (since the \"Relative\" part of \"RVA\" is relative to the Image Base Address).</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">The code you posted in your comment above is not using the Relocation Table. Please refer to the PE COFF document to which I linked above, and ask further software development questions on <a href=\"http://stackoverflow.com/\">stackoverflow.com</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What you see is offsets modified to reflect a changed base address. Anything that's not relative to the base (be it global variables or calls or whatever) needs to be adjusted if the image base changes.</p>\n<p>PE files can have a relocation table for that. Can, as in standard .exe files usually don't have it, as it was not necessary until ASLR (random base addresses for modules) came along.</p>\n<p>For DLLs the base address is likely to change as it depends on what other files are already loaded so they almost always have a base relocation table that says \"If the base address differs from XYZ, add the delta to the following locations\".</p>\n<p>If you are curios how that base relocation table looks like, I'll recommend checking out the following:</p>\n<ul>\n<li><p>See the following code implementing a <a href=\"http://secureimplugin.googlecode.com/svn/trunk/CryptoPP/dllloader.cpp\" rel=\"nofollow\">custom PE file loader</a>.</p></li>\n<li><p>Search for <code>IMAGE_DIRECTORY_ENTRY_BASERELOC</code> to see code handling the relocation directory.</p></li>\n</ul>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Mar 19, 2014 at 21:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}