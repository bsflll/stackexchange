{
    "title": "Simple C program disassembled with Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/22183/simple-c-program-disassembled-with-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to figure out what is going on with my simple example programs, when I disassemble them with Ghidra. I am not sure whether this is some strange Ghidra behaviour or something that is set by default during compile time which produce a lot of assembly code, but I actively write only few LOC.</p>\n<p>Here is my sample C program created with VS Studio 2017:</p>\n<pre><code>void main()\n{\n    int x = 1;\n    int y = 2;\n    x = x + y;\n}\n</code></pre>\n<p>And this is what I get when I try to disassemble it with Ghidra:</p>\n<p><a href=\"https://i.sstatic.net/gDxiS.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/gDxiS.png\"/></a></p>\n<p>The above screenshot is from the supposed 'entry' point of the program. But why is it so complex? I did a simple program to test how local variables are presented in Assembly and I get such output. Yet it should be few simple Assembly commands instead.</p>\n<p><a href=\"https://i.sstatic.net/sevCw.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/sevCw.png\"/></a></p>\n<p>I am not sure what I am missing out here, so if someone could help me to try and understand this, I would be grateful.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "6k",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "ghidra"
    ],
    "user": "Rebegin",
    "time": "Sep 24, 2019 at 13:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Program entry point != <code>main</code></p>\n<p>You're seeing disassembly of a few of the functions automatically linked to the program by the compiler toolchain that are responsible for setting up the <em>C Run-Time</em> (CRT) environment. </p>\n<p>From Microsoft's <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-initialization?view=vs-2019\" rel=\"nofollow noreferrer\">CRT Initialization</a>:</p>\n<blockquote>\n<p>By default, the linker includes the CRT library, which provides its own startup code. This startup code initializes the CRT library, calls global initializers, and then calls the user-provided <code>main</code> function for console applications.</p>\n</blockquote>\n<p>From <a href=\"https://stackoverflow.com/questions/22934206/what-is-the-difference-between-main-and-maincrtstartup\">What is the difference between main and mainCRTStartup?</a>:</p>\n<blockquote>\n<p><code>main()</code> is the entry point of your C or C++ program. <code>mainCRTStartup()</code> is the entrypoint of the C runtime library. It initializes the CRT, calls any static initializers that you wrote in your code, then calls your <code>main()</code> function.</p>\n</blockquote>\n<p>An exercise you may find interesting is compiling the following code (assuming VS Studio 2017 allows it) and then disassembling the resulting binary:</p>\n<p><code>int main(){}</code></p>\n<p>Here is the Linux version: <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" rel=\"nofollow noreferrer\">Linux x86 Program Start Up</a></p>\n</div>",
            "votes": "5",
            "user": "julian",
            "time": "Sep 24, 2019 at 16:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rebegin",
                    "text": "<span class=\"comment-copy\">Thank you Julian, a bit clearer now. However, where can I find my main function then? I cannot locate it.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@Rebegin <code>main</code> should be called at some point by <code>mainCRTStartup</code>. If you're still having a hard time finding it in the disassembly of the program, you can first run the program using a debugger and set a breakpoint at <code>main</code>, look at the call stack, and then revisit the disassembly and decompilation produced by Ghidra</span>",
                    "time": null
                },
                {
                    "user": "Rebegin",
                    "text": "<span class=\"comment-copy\">Thanks Julian, nice tips. Will do that. I have one other question, but I will open another thread here, because it requires a bit more information. I am essentially trying to learn difference between Global vs Local variables in Assembly. I know the theory that global are stored in Memory, and Local variables are on Stack, but I want to see it with my C code and my disassembly.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@Rebegin you are welcome</span>",
                    "time": null
                }
            ]
        }
    ]
}