{
    "title": "Windows - syscalls being called in a strange way?",
    "link": "https://reverseengineering.stackexchange.com/questions/24758/windows-syscalls-being-called-in-a-strange-way",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been reading about the way syscalls are called in windows.<br/>\nThe general theme in all the articles I read is:<br/>\n64bit- called inside ntdll<br/>\n32bit- from ntdll jumping to KiFastSystemcall<br/>\nbut when I opened IDA with ntdlls from both 64 and 32 bit to verify these articles this is what I saw:<br/>\n(32bit)</p>\n<pre><code>NtCreateFile proc near\nmov     eax, 55h        ; syscall num\nmov     edx, offset j_Wow64Transition\ncall    edx ; weird stub is called instead of KiFastSystemcall.\n            ; I couldn't find anything about it.perhaps a wrapper around KiFastSystemcall?\n\nretn    2Ch\nNtCreateFile endp\n</code></pre>\n<p>(64bit)</p>\n<pre><code>NtCreateFile proc near\nmov     r10, rcx        ; NtCreateFile\nmov     eax, 55h\ntest    byte ptr ds:7FFE0308h, 1 ; some test to decide wether to use int 0x2E or syscall?\n                                 ; I don't know why int 0x2E be used. I thought it causes overhead?\njnz     short loc_18009CB15\nsyscall                 \nretn\nloc_18009CB15:          \nint     2Eh             \nretn\nNtCreateFile endp\n</code></pre>\n<p>if anyone knows why the system calls are called like this I would love to know.<br/>\nto summarize:<br/>\n(32 bit) why is j_Wow64Transition there instead of KiFastSystemcall?<br/>\n(64 bit) what is being compared and why?<br/>\nthanks.               </p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "931",
    "tags": [
        "ida",
        "windows",
        "kernel-mode",
        "kernel",
        "system-call"
    ],
    "user": "Alal Benben",
    "time": "Apr 19, 2020 at 10:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Following cites, answering your first question come from <em>Windows Internals Sixth Edition Part 1</em>, page 225:</p>\n<blockquote>\n<p>Wow64 (Win32 emulation on 64-bit Windows) refers to the software that permits the execution\n  of 32-bit x86 applications on 64-bit Windows. It is implemented as a set of user-mode DLLs, with\n  some support from the kernel for creating 32-bit versions of what would normally only be 64-bit\n  data Â­structures [...]</p>\n<p>Wow64 hooks all the code paths where 32-bit code would transition to the native 64-bit system\n  or when the native system needs to call into 32-bit user-mode code.</p>\n<p>Wow64 transitions\n  to native 64-bit mode, captures the parameters associated with the system call (converting 32-bit\n  pointers to 64-bit pointers), and issues the corresponding native 64-bit system call. When the native\n  system call returns, Wow64 converts any output parameters if necessary from 64-bit to 32-bit formats\n  before returning to 32-bit mode.</p>\n</blockquote>\n<p>So, when you run some <code>32</code> bit <code>x86</code> program on <code>64</code> bit Windows, such transitions may occur to enable this application to make a native system call.</p>\n<p>Answer to your second question is already <a href=\"https://reverseengineering.stackexchange.com/questions/19333/what-are-the-difference-syscall-and-int-0x2e-instructions\">here</a>.</p>\n</div>",
            "votes": "5",
            "user": "bart1e",
            "time": "Apr 19, 2020 at 13:57",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would add information to the first answer. </p>\n<p>The switch of the mode from Wow64 to 64bit, aka \"Heaven's Gate\", is in <code>wow64cpu.dll</code>. <code>offset j_Wow64Transition</code> is a part of <code>wow64cpu.dll</code>.</p>\n<p><a href=\"https://www.slideshare.net/YardenShafir/jumping-into-heavens-gate\" rel=\"nofollow noreferrer\">These slides</a> helps you to understand the procedure of executing 64bit syscall from Wow64 process with assembly codes as a example.</p>\n</div>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Apr 20, 2020 at 21:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I was also missing the term \"Heaven's Gate\" in the first answer. Presumably because it's not Microsoft's terminology, but the book is published by Microsoft Press.</span>",
                    "time": null
                }
            ]
        }
    ]
}