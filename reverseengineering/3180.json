{
    "title": "Memory forensics: disabled pagefile but still not everything in memory",
    "link": "https://reverseengineering.stackexchange.com/questions/3180/memory-forensics-disabled-pagefile-but-still-not-everything-in-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm doing memory forensics with volatility and pefile on Windows XP SP2 memory dumps. </p>\n<p>I run windows in a VirtualBox VM and aquire the dumps with vboxmanage debugvm  dumpguestcore --filename dump.vmem </p>\n<p>I'm trying to build a tree of dll's imported by a process. Therefore I recursively walk the dll's starting at the process <code>ImageBaseAddress</code>. The problem that occurs is that for some dll's the dllBase is paged and so I can't read the import and delay import directory structures. </p>\n<p>I tried disabling the paging in <code>Control Panel</code> -&gt; <code>System</code> -&gt; <code>Advanced</code> -&gt; <code>Perfomance</code> -&gt; <code>Advanced</code> -&gt; <code>Virtual Memory</code> -&gt; <code>No paging file</code>. I also changed the registy entry <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\DisablePagingExecutive</code> from <code>0</code> to <code>1</code>, but the behaviour stays the same.</p>\n<p>Another Problem is that even if the dllBase is not paged, sometimes reading the import or delay import directories with PEfile fails although the module / dll has the directory.</p>\n<p>Any help is most appreciated.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "733",
    "tags": [
        "windows",
        "memory",
        "digital-forensics"
    ],
    "user": "user3365",
    "time": "Dec 13, 2013 at 16:59",
    "comments": [
        {
            "user": "Thomas Weller",
            "text": "<span class=\"comment-copy\">I assume you have a kernel dump, because for a user dump Windows would page in all necessary memory when the Debugger accesses it whiele creating the dump.</span>",
            "time": null
        },
        {
            "user": "Thomas Weller",
            "text": "<span class=\"comment-copy\">DisablePagingExecutive is only for drivers, not for applications, so it shouldn't matter here.</span>",
            "time": null
        },
        {
            "user": "Thomas Weller",
            "text": "<span class=\"comment-copy\">Which debugger do you use to create the dump and how? Especially, did you use SysInternals Livekd? Livekd will not be able to get all memory in reliable state.</span>",
            "time": null
        },
        {
            "user": "user3365",
            "text": "<span class=\"comment-copy\">Hi Thomas, I run Windows in a VirtualBox VM and create the memory dump with vboxmanage debugvm &lt;vmname&gt; dumpguestcore --filename dump.vmem</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The paging file is generally for dirty pages, not for clean ones.  The clean ones can be read from the original file directly, so there's no need to store them in the page file (and if they haven't ever been read yet then they won't be in memory at all).\nFurther, delay-load DLLs won't be in memory if they've never been referenced, so anything related to them won't be available to you.  So just because you disable paging does not mean that everything will be entirely in memory, if physical memory constraints exist.  You could try increasing the size of the physical memory, and perhaps let the process run for longer.</p>\n</div>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Dec 13, 2013 at 17:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3365",
                    "text": "<span class=\"comment-copy\">What I actually want to do achive by reading the import and delay import directory is to find out which executable VAD's in a process address space are from those imported dlls. As some import directories are not readable for some reason, I end up having executable VAD's that do have a FileObject pointing to a dll but that I can't verify to be imported by the process main module.</span>",
                    "time": null
                }
            ]
        }
    ]
}