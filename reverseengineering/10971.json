{
    "title": "Opening mono droid .so files in .NET decompiler",
    "link": "https://reverseengineering.stackexchange.com/questions/10971/opening-mono-droid-so-files-in-net-decompiler",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the format for .so native android files developed in Xamarin Mono droid? From this SO <a href=\"https://stackoverflow.com/questions/19072897/xamarin-android-does-native-code-compilation-make-reverse-engineering-harder\">post</a> it appears they are actually .NET IL binaries (not native machine code). However, this other SO <a href=\"https://reverseengineering.stackexchange.com/questions/4624/how-do-i-reverse-engineer-so-files-found-in-android-apks\">post</a> on Android NDK development appears to contradict this. In the apk file, there is a lib/armebi folder and a lib/x86 folder. Is it possible for .NET to be compiled to ARM format? If that is possible, it appears that x86 based .NET decompilers like ILSpy cannot handle ARM code too. Is there a better solution?</p>\n<p>EDIT: I know Hopper and IDA Pro works with ARM mode, but we get assembly instead of .NET code.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "5k",
    "tags": [
        "disassembly",
        "decompilation",
        "arm",
        "android",
        ".net"
    ],
    "user": "Nederealm",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're looking at a \"normal\" mono droid application (compiled with something like Xamarin) then you'll see some of these structures in the APK/ZIP'</p>\n<pre><code>/assemblies/Sikur.Monodroid.dll\n/assemblies/Sikur.dll\n/assemblies/Xamarin.Android.Support.v13.dll\n/assemblies/Xamarin.Android.Support.v4.dll\n/assemblies/Xamarin.Android.Support.v7.AppCompat.dll\n/assemblies/Xamarin.Android.Support.v7.CardView.dll\n/assemblies/Xamarin.Android.Support.v7.RecyclerView.dll\n/assemblies/Xamarin.Mobile.dll\n/assemblies/mscorlib.dll\n/classes.dex\n/lib\n/lib/armeabi-v7a\n/lib/armeabi-v7a/libmonodroid.so\n/lib/armeabi-v7a/libmonosgen-2.0.so\n</code></pre>\n<p>File in the <code>assemblies</code> directory will be the Mono/.Net code and can be reversed using those normal tools.</p>\n<p><code>classes.dex</code> is a normal Android Dalvik executable file (dex) which can be reversed using the usual tools (baksmali, IDA Pro, etc) - though it should just be the stub loaded to start the Mono engine.</p>\n<p>The files includes in <code>lib/**/*.so</code> are native shared libraries which are compiled into an ELF ARM file. These are normally going to the the monodroid engine (<code>libmonodroid.so</code>) and potentially other plugins that have been used by the developer. These would require ELF ARM capable disassemblers like Hopper, IDA Pro, r2, etc.</p>\n<p>In the specific example above, the only non-Xamarin code would be located in <code>Sikur.dll</code> and <code>Sikur.Monodroid.dll</code>.</p>\n</div>",
            "votes": "5",
            "user": "diff",
            "time": "Oct 9, 2015 at 23:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nederealm",
                    "text": "<span class=\"comment-copy\">sounds reasonable. but would it be confusing to look for the non-Xamarin code given that the dll file naming conventions are not required to follow the APK naming conventions. (like the DLL file containing the  author's code may not be named in packages such as com.mycompany.MyApp as with the Java classes in classes.dex) Furthermore, there are a sizable number of third-party Xamarin extensions too.</span>",
                    "time": null
                },
                {
                    "user": "diff",
                    "text": "<span class=\"comment-copy\">Correct, the dlls could be named anything, however they shouldn't be named as the \"normal\" framework files. So by just compiling a test application you should be able to see what is \"normal\" and was the new code being added is. The \"Sikur.dll\" was just an example.</span>",
                    "time": null
                }
            ]
        }
    ]
}