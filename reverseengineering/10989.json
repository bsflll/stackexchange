{
    "title": "Debugging a position independent executable ELF",
    "link": "https://reverseengineering.stackexchange.com/questions/10989/debugging-a-position-independent-executable-elf",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to follow the write-up about <a href=\"http://vulph.com/2015/09/27/defcon-hackercalc-writeup.html\" rel=\"nofollow\">hackercalc</a> (a challenge for DEFCON 2015 quals). First, by loading the challenge into gdb, I observe that:</p>\n<pre><code>(gdb) info files\n...\nEntry point: 0xcf8\n...\n</code></pre>\n<p>So I set a breakpoint at the <code>entry point</code> and run the program:</p>\n<pre><code>(gdb) break *0xcf8\nBreakpoint 1 at 0xcf8\n(gdb) run\nStarting program: /home/tathanhdinh/CTFs/hackercalc\nError in re-setting breakpoint 1: Warning:\nCannot insert breakpoint 1.\nCannot access memory at address 0xcf8\n\nWarning:\nCannot insert breakpoint 1.\nCannot access memory at address 0xcf8\n</code></pre>\n<p>That seems this breakpoint does not work. I do not understand why it says <code>Cannot access memory at address 0xcf8</code> but I guess that there was some code which runs before has made some interference (so the program cannot reach this entry point), as far as I know, this code must be the <code>elf interpreter</code> of the program.</p>\n<p>So, I look into segments of the program to check this interpreter, all seems to be normal (except that <code>readelf</code> says the program is a <code>shared object file</code>, but I think that is not important):</p>\n<pre><code>readelf --segments hackercalc\n\nElf file type is DYN (Shared object file)\nEntry point 0xcf8\nThere are 8 program headers, starting at offset 52\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  PHDR           0x000034 0x00000034 0x00000034 0x00100 0x00100 R E 0x4\n  INTERP         0x000154 0x00000154 0x00000154 0x00013 0x00013 R   0x1\n      [Requesting program interpreter: /lib/ld-linux.so.2]\n  LOAD           0x000000 0x00000000 0x00000000 0x16b4a 0x16b4a R E 0x1000\n  LOAD           0x016eac 0x00017eac 0x00017eac 0x001e4 0x001ec RW  0x1000\n</code></pre>\n<p>Now, I try to get again information about this process:</p>\n<pre><code>(gdb) info files\nSymbols from \"/home/tathanhdinh/CTFs/hackercalc\".\nNative process:\n        Using the running image of child process 10545.\n        While running this, GDB does not access memory from...\nLocal exec file:\n        `/home/tathanhdinh/CTFs/hackercalc', file type elf32-i386.\n        Entry point: 0x56555cf8\n</code></pre>\n<p>And I am totally lost here, why the <code>elf interpreter</code> (which is <code>ld-linux.so.2</code>) can create a new process in this case?</p>\n<p>I try another approach by loading the challenge into IDA, set a breakpoint at the entry point, then run but IDA simply hangs up!!!</p>\n<p>So my question is: how can this happen? Am I totally wrong about the code executed before the entry point? Does the challenge use some special tricks to bypass debugging?</p>\n<p><strong>NB1.</strong> Thanks to @Igor, I finally find out how to debug this challenge. In summary, I disable ALSR to get a stable address of the entry point. Then I load it into gdbserver, use IDA to attach this debug session, set a breakpoint at the entry point (whose address is stable by disabling ALSR).</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "debugging",
        "gdb",
        "elf",
        "pie"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Sep 29, 2015 at 16:09",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">read up on PIE (position-independent executables).</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">thanks a lot @IgorSkochinsky, I still do not understand how PIE works in this case yet, neither can set the breakpoint for this challenge, but I thinks that is exactly the problem.</span>",
            "time": null
        }
    ],
    "answers_data": []
}