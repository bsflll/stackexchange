{
    "title": "crackme disassembly - are these local variables ever initialized?",
    "link": "https://reverseengineering.stackexchange.com/questions/21186/crackme-disassembly-are-these-local-variables-ever-initialized",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on a crackme, where the objective is to find the valid password given a program. I'm using radare2 to reverse engineering the program. To do so, I need to enter a password that forces this program to <em>bypass</em> all the conditional jumps (<code>jne</code>'s, <code>jle</code>'s, <code>jg</code>'s throughout). </p>\n<p>Thus far, I've only concluded that the password must be 4 characters long, and the lowest 8 bits is 0x79, or ASCII character 'y' (please correct me if I'm wrong). The first N disassembled bytes (until I get stuck) are given below:</p>\n<pre><code>root@kali:~/Exploit_Class_NSL/Week1/Exercise4# r2 -AAAA example4 \n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Enable constraint types analysis for variables\n[0x00401080]&gt; pdf @main\n            ;-- main:\n/ (fcn) sym.main 201\n|   sym.main (int argc, char **argv, char **envp);\n|           ; var int local_20h @ rbp-0x20\n|           ; var int local_14h @ rbp-0x14\n|           ; var int local_5h @ rbp-0x5\n|           ; var int local_4h @ rbp-0x4\n|           ; var int local_3h @ rbp-0x3\n|           ; var int local_2h @ rbp-0x2\n|           ; arg int argc @ rdi\n|           ; arg char **argv @ rsi\n|           ; DATA XREF from entry0 (0x40109d)\n|           0x00401162      55             push rbp\n|           0x00401163      4889e5         mov rbp, rsp\n|           0x00401166      4883ec20       sub rsp, 0x20\n|           0x0040116a      897dec         mov dword [local_14h], edi  ; argc\n|           0x0040116d      488975e0       mov qword [local_20h], rsi  ; argv\n|           0x00401171      488d3d8c0e00.  lea rdi, qword str.enter_the_password: ; 0x402004 ; \"enter the password: \"\n|           0x00401178      b800000000     mov eax, 0\n|           0x0040117d      e8cefeffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x00401182      488b15c72e00.  mov rdx, qword [obj.stdin__GLIBC_2.2.5] ; obj.__TMC_END ; [0x404050:8]=0\n|           0x00401189      488d45fb       lea rax, qword [local_5h]\n|           0x0040118d      be05000000     mov esi, 5\n|           0x00401192      4889c7         mov rdi, rax\n|           0x00401195      e8c6feffff     call sym.imp.fgets          ; char *fgets(char *s, int size, FILE *stream)\n|           0x0040119a      488d45fb       lea rax, qword [local_5h]\n|           0x0040119e      4889c7         mov rdi, rax\n|           0x004011a1      e89afeffff     call sym.imp.strlen         ; size_t strlen(const char *s)\n|           0x004011a6      4883f804       cmp rax, 4                  ; 4\n|       ,=&lt; 0x004011aa      7559           jne 0x401205\n|       |   0x004011ac      0fb645fb       movzx eax, byte [local_5h]\n|       |   0x004011b0      3c79           cmp al, 0x79                ; 'y' ; 121\n|      ,==&lt; 0x004011b2      7554           jne 0x401208\n|      ||   0x004011b4      0fb645fc       movzx eax, byte [local_4h]\n|      ||   0x004011b8      0fbed0         movsx edx, al\n|      ||   0x004011bb      0fb645fd       movzx eax, byte [local_3h]\n|      ||   0x004011bf      0fbec0         movsx eax, al\n|      ||   0x004011c2      01d0           add eax, edx\n|      ||   0x004011c4      3dda000000     cmp eax, 0xda               ; 218\n|     ,===&lt; 0x004011c9      7540           jne 0x40120b\n|     |||   0x004011cb      0fb645fd       movzx eax, byte [local_3h]\n|     |||   0x004011cf      3c6c           cmp al, 0x6c                ; 'l' ; 108\n|    ,====&lt; 0x004011d1      7e3b           jle 0x40120e\n</code></pre>\n<p>At 0x004011b4 is where I start to get stuck. </p>\n<pre><code>|      ||   0x004011b4      0fb645fc       movzx eax, byte [local_4h]\n|      ||   0x004011b8      0fbed0         movsx edx, al\n|      ||   0x004011bb      0fb645fd       movzx eax, byte [local_3h]\n|      ||   0x004011bf      0fbec0         movsx eax, al\n|      ||   0x004011c2      01d0           add eax, edx\n|      ||   0x004011c4      3dda000000     cmp eax, 0xda               ; 218\n|     ,===&lt; 0x004011c9      7540           jne 0x40120b\n</code></pre>\n<p>Are local variables <code>local_3h</code> and <code>local_4h</code> ever initialized? If so, how? How <em>should</em> I go about stepping through this on my own?</p>\n<p>I've tried toying around with different functions in r2, like <code>afvd</code>, <code>e [ ]</code>, etc., but haven't gotten anywhere yet.</p>\n<p>Any tips appreciated. Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "305",
    "tags": [
        "disassembly",
        "debugging",
        "radare2",
        "crackme"
    ],
    "user": "GNUser",
    "time": "Apr 20, 2019 at 2:05",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">look at the start you will see radare2 telling you what each of those local points to they are resp rbp - 2,3,4,5  1 is 6c other is 79  and the rest is an addition result</span>",
            "time": null
        },
        {
            "user": "GNUser",
            "text": "<span class=\"comment-copy\">Sorry, @blabb , I don't see that... is that included in my code above? For example, I don't see reference to <code>0x6c</code> before the <code>cmp</code> operation at <code>0x004011cf</code>. FWIW, I've included all the output in my OP (through <code>0x004011c9</code>)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Yes</strong>, they are initialized, albeit indirectly.</p>\n<p>Have a look at this fragment:</p>\n<pre><code>   0x00401189      488d45fb       lea rax, qword [local_5h]\n   0x0040118d      be05000000     mov esi, 5\n   0x00401192      4889c7         mov rdi, rax\n   0x00401195      e8c6feffff     call sym.imp.fgets ; char *fgets(char *s, int size, FILE *stream)\n</code></pre>\n<p>Here we're calling the <a href=\"https://en.cppreference.com/w/c/io/fgets\" rel=\"nofollow noreferrer\"><code>fgets</code> function</a>, passing to it the address of the <code>local_5h</code> as <code>s</code> and value 5 as <code>size</code>. This means that up to 5 bytes (including the terminating zero) can be read into the memory starting at <code>local_5h</code>, i.e. <code>local_4h</code> and <code>local_3h</code> are the second and third characters of the retrieved string.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 20, 2019 at 15:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "GNUser",
                    "text": "<span class=\"comment-copy\">Thanks! Is the <code>qword</code> in your referenced fragment a clue that more variables are being initialized? i.e., since <code>local_5h</code> appears to be only 0x1 wide? Wondering if I'm interpreting this correct: <code>local_5h @ rbp-0x5</code>, <code>local_4h @ rbp-0x4</code>, <code>local_3h @ rbp-0x3</code>, etc...</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@ClarkHenry I think it's just an artifact of r2's disassembler. Since <code>lea</code> is taking an address and not moving any data, the size of the variable is not relevant. You could try  reporting this issue to the developers.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would say they are initialized on the stack for the local scope, as local variables for the function.  My thoughts are look at the data stored on the local stack.  I'm not sure if that is what you are looking for as an answer.  I hope that helps.</p>\n</div>",
            "votes": "0",
            "user": "Cara Vincent",
            "time": "Apr 20, 2019 at 5:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "GNUser",
                    "text": "<span class=\"comment-copy\">Thanks for the feedback. Could you please elaborate a little? Would you happen to know how to do that in radare2? Would I find that in the 'entry0' or '.data' section of the disassembled program?</span>",
                    "time": null
                },
                {
                    "user": "Cara Vincent",
                    "text": "<span class=\"comment-copy\">i haven't used it before, but I took a quick look at the documentation and this console string - pm xxs @ esp should print the stack, or possibly substitute ebp, let me know what that gives you!</span>",
                    "time": null
                }
            ]
        }
    ]
}