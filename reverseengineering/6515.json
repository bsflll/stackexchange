{
    "title": "Unpacking a program which seems to be not packed?",
    "link": "https://reverseengineering.stackexchange.com/questions/6515/unpacking-a-program-which-seems-to-be-not-packed",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have downloaded a sample of a malware to analyze it. First, I opened it with PEiD to look if it is packed. \nPEiD gives me the following information:</p>\n<pre><code>   Microsoft Visual Basic 5.0/6.0\n</code></pre>\n<p>So, I assumed that it is not packed. \nWhen I opened it using ollydbg shows me the following lines:</p>\n<pre><code>   PUSH malware.00401F8C\n   CALL &lt;JMP.&amp;MSVBVM60.#100&gt;\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   INC EAX\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   DB 00\n   DB 1D\n   ....\n   ....\n</code></pre>\n<p>So, normally it should start with a function prologue(the typical beginning line with PUSH EBP and so on) but although it is not packed, obviously the program tries to make the analyzing process harder (for me). \nWhen I step to the second line( CALL &lt;...&gt;), then the process begins to run and does not stop. In my previous cases, I have only unpacked malware samples that were packed with UPX. So, a piece of code like that above is completely new for me. So:</p>\n<p>How should I solve this? Can someone give me an advice how I can handle that?</p>\n<p>best regards, </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "unpacking",
        "visual-basic"
    ],
    "user": "user3097712",
    "time": "Oct 21, 2014 at 21:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your program is not packed, but rather compiled as <a href=\"http://www.woodmann.com/crackz/Tutorials/Vbpcode.htm\" rel=\"noreferrer\">Visual Basic P-code</a> or Visual Basic native code.</p>\n<p>If it's VB native code, you can use your favorite debugger (OllyDbg, IDA, etc.) to debug it, and IDA to disassemble it.</p>\n<p>If it's VB P-code, you can use <a href=\"http://www.vb-decompiler.org/\" rel=\"noreferrer\">VB Decompiler Pro</a> to disassemble/decompile it:\n<img alt=\"VB Decompiler Pro\" src=\"https://i.sstatic.net/ofVTM.png\"/></p>\n<p>... and <a href=\"http://blackfenix.fortunecity.ws/wktvbdebug/index.html\" rel=\"noreferrer\">WKTVBDE</a> to debug it:\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/gkZov.jpg\"/></p>\n<p>Note that VB Decompiler Pro is useful even for statically analyzing VB native code.</p>\n</div>",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Oct 22, 2014 at 0:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Not necessarily P-Code. Native VB has the same kind of entrypoint.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Thanks, @IgorSkochinsky, you're right. I've updated my answer above. I guess it shows how long ago I had to deal with VB targets :)</span>",
                    "time": null
                }
            ]
        }
    ]
}