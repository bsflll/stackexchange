{
    "title": "Techniques for reversing (basic) hash function",
    "link": "https://reverseengineering.stackexchange.com/questions/19866/techniques-for-reversing-basic-hash-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hi I'm relatively new to RE, and I'm using GDB and Radare2. As part of a crackme I'm trying to reverse a weak hash function that's a little too complicated for me to undo by hand. I've been trying to execute backwards with GDB but no luck. What are the common techniques for accomplishing this task?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "153",
    "tags": [
        "radare2",
        "gdb",
        "hash-functions"
    ],
    "user": "Chase Kanipe",
    "time": "Nov 10, 2018 at 15:57",
    "comments": [
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">What is the hash function, specifically? Depends on the specific properties (small output/linear/etc.) there may be some specific ways to do it (brute force/solve linear equations)</span>",
            "time": null
        },
        {
            "user": "Chase Kanipe",
            "text": "<span class=\"comment-copy\">Best I can tell it just takes a numerical input and sequentially adds/subtracts numbers with it and xor's it with several values, looping this several times. It's not a \"real\" hash function, so in principle I could by undo all these operations by hand. But there are so many in series it would be impractical.</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">I think you should still post the code, advices would be too general. For now -- \"the composition of many easily reversible functions is also easily reversible\".</span>",
            "time": null
        }
    ],
    "answers_data": []
}