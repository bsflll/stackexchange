{
    "title": "Compare ELF files using Ghidra+Bindiff based on dwarf debug info",
    "link": "https://reverseengineering.stackexchange.com/questions/25803/compare-elf-files-using-ghidrabindiff-based-on-dwarf-debug-info",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So this is a question not strictly about reverse engineering, but since there are many people using Ghidra and Bindiff here I'll try asking anyway.</p>\n<p>I have an embedded ARM cortex-M C++ project and I want to compare the generated ELF file for two different compilers.</p>\n<p>I used these instructions for exported data from Ghidra to Bindiff: <a href=\"https://reverseengineering.stackexchange.com/a/24636/34300\">https://reverseengineering.stackexchange.com/a/24636/34300</a></p>\n<p>I built the ELF files with debuginfo. I was hoping that Ghidra and Bindiff would use the debuginfo for identifying functions, but it looks like that's not the case. For roughly 100 out of 700 functions the tools were not able to match the old and new functions.</p>\n<p>I did some experiments on my own where I wrote some simple implementations for strcat and strcpy and then switched names, but then Ghidra and Bindiff was able to see that the assembly has changed, i.e. it did not just try to match functions based on the content. So it's not the case that Ghidra + Bindiff always ignores the function names.\n<a href=\"https://i.sstatic.net/CihTC.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/CihTC.png\"/></a></p>\n<p>Is what I'm seeing the expected behavior? That Bindiff does uses its own heuristics rather than trusting the debuginfo when finding functions for comparisons?</p>\n<p>If so: Is there a way to force Ghidra and Bindiff to trust the dwarf information when finding functions?</p>\n<hr/>\n<p><strong>Update</strong>: The Bindiff manual lists a number of algorithms that are used for function matching. There is a configuration files .bindiff/bindiff.xml where you can modify the confidence levels between 0.0 and 1.0.\nIt looks like name hash matching is what I want and that I probably want to lower confidence in the other algorithms.</p>\n<p>Though I guess just looking at each function in isolation is kind of naive given that compilers can change their inline choices between releases:</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "563",
    "tags": [
        "ghidra",
        "bin-diffing",
        "tool-bindiff"
    ],
    "user": "Daniel NÃ¤slund",
    "time": "Sep 3, 2020 at 6:43",
    "comments": [],
    "answers_data": []
}