{
    "title": "Radare's `aaaa` and -AA what does it do, exactly?",
    "link": "https://reverseengineering.stackexchange.com/questions/19895/radares-aaaa-and-aa-what-does-it-do-exactly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I run <code>aaa</code>, Radare tells me,</p>\n<pre><code>[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\n<p>But what does <code>aaaa</code> do? It's not documented under <code>aa?</code> nor <code>aaa?</code> nor </p>\n<pre><code>[0x000028e0]&gt; aaa?\nUsage: See aa? for more help\n[0x000028e0]&gt; aaaa?\nUsage: See aa? for more help\n</code></pre>\n<p>And <code>man radare</code> isn't more useful only saying,</p>\n<pre><code> -A  run 'aaa' command before prompt or patch to analyze all referenced code. Use -AA to run aaaa\n</code></pre>\n<p><code>radare --help</code>, says</p>\n<pre><code> -A run 'aaa' command to analyze all referenced code\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "radare2",
        "static-analysis"
    ],
    "user": "Evan Carroll",
    "time": "Nov 16, 2018 at 2:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When you execute the <code>aaa</code> command, radare is showing you what are the steps it takes. Each step has the command responsible for it inside parentheses.</p>\n<pre><code>[0x00000000]&gt; aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Type matching analysis for all functions (afta)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\n<p>As you can see, <code>aaa</code> is a command which is executing other commands. It also prints a short description of what each command is doing. A little bit more detailed information can be found under <code>aa?</code>. So, to append this information together:</p>\n<ul>\n<li>aa - alias for <code>af@@ sym.*;af@entry0;afva</code></li>\n<li>aac - analyze function calls (<code>af @@ `pi len~call[1]`</code>)</li>\n<li>aar - analyze len bytes of instructions for references</li>\n<li>aan - autoname functions that either start with <code>fcn.*</code> or <code>sym.func.*</code></li>\n<li>afta - do type matching analysis for all functions</li>\n</ul>\n<p>Similar to <code>aaa</code>, this information is being printed when <code>aaaa</code> is executed.</p>\n<pre><code>[0x00000000]&gt; aaaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Enable constraint types analysis for variables\n</code></pre>\n<p>The main change of <code>aaaa</code> is \"[x] Enable constraint types analysis for variables\". This basically enables the <code>anal.types.constraint</code> configuration variable.</p>\n<pre><code>[0x00000000]&gt; e? anal.types.constraint\nanal.types.constraint: Enable constraint types analysis for variables\n</code></pre>\n<hr/>\n<p>On a personal note here, I would suggest not to use <code>aaaa</code> since it is quite buggy sometimes and probably would not be necessary.</p>\n</div>",
            "votes": "2",
            "user": "Megabeets",
            "time": "Nov 16, 2018 at 5:27",
            "is_accepted": true,
            "comments": []
        }
    ]
}