{
    "title": "Identifying a USB device for a forensics CTF challenge (with no GET DESCRIPTOR)",
    "link": "https://reverseengineering.stackexchange.com/questions/18583/identifying-a-usb-device-for-a-forensics-ctf-challenge-with-no-get-descriptor",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently enjoying a forensics CTF challenge. We were provided a PCAPNG file. When opened in Wireshark, the file contains a sequence of URB_INTERRUPT packets from two devices - but no GET_DESCRIPTOR info that identifies either device.</p>\n<p>The first device give a sequence of 8-bit data like this:</p>\n<pre><code>00:00:00:00:00:00:00:00\n00:00:04:00:00:00:00:00\n00:00:04:15:00:00:00:00\n00:00:00:15:00:00:00:00\n00:00:08:15:00:00:00:00\n00:00:08:00:00:00:00:00\n00:00:00:00:00:00:00:00\n02:00:00:00:00:00:00:00\n02:00:2d:00:00:00:00:00\n00:00:2d:00:00:00:00:00\n</code></pre>\n<p>Guessing that this was a keyboard, I decoded the sequence to this message: </p>\n<pre><code>scanlines-are-real-cool-guys\n</code></pre>\n<p>Which seems like a hint, right? The second (much longer) sequence of URB_INTERRUPT packets from the second device is 7-bit data like this:</p>\n<pre><code>01:00:01:00:02:00:00\n01:00:00:00:02:00:00\n01:00:00:00:01:00:00\n01:00:00:00:02:00:00\n01:00:01:00:01:00:00\n01:00:01:00:02:00:00\n01:00:00:00:02:00:00\n01:00:01:00:01:00:00\n01:00:01:00:00:00:00\n01:00:00:00:01:00:00\n01:00:ff:ff:01:00:00\n01:00:fe:ff:00:00:00\n01:00:ff:ff:00:00:00\n01:00:ff:ff:00:00:00\n01:00:ff:ff:ff:ff:00\n01:00:ff:ff:ff:ff:00\n01:00:ff:ff:ff:ff:00\n01:00:ff:ff:ff:ff:00\n</code></pre>\n<p>I guessed that this could be a mouse - even though most mouse data seem to  only contain 4 bits, based on the fact that:</p>\n<ol>\n<li>Only two of the bits seem to change in any significant way - all other bits seem to only ever be <code>00</code>, <code>01</code>, or <code>ff</code> - thus potentially being the x and y coordinates</li>\n<li>The variable data stays in between 0 and 255</li>\n<li>Mice and keyboards seem to be the most common devices using URB_INTERRUPT</li>\n</ol>\n<p>Acting on that guess, I sent the data through AWK:</p>\n<pre><code>awk -F: 'function comp(v){if(v&gt;127)v-=256;return v}{x+=comp(strtonum(\"0x\"$3));y+=comp(strtonum(\"0x\"$5))}$1==\"01\"{print x,y}' hexoutput_second-part.txt &gt; mouse1.txt\n</code></pre>\n<p>And then through GNUPLOT - hoping to get a traced message or something from an on-screen keyboard. But no luck - the plot ends up as:</p>\n<p><a href=\"https://i.sstatic.net/B8RCu.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/B8RCu.png\"/></a></p>\n<p>Not especially helpful.</p>\n<p>So my question is - how would I go tracking down what other devices could be sending 7 bit URB_INTERRUPT data? What is the best way to attack this identification process?</p>\n<p>Thank you!</p>\n</div>",
    "votes": "8",
    "answers": 0,
    "views": "3k",
    "tags": [
        "digital-forensics",
        "usb",
        "wireshark"
    ],
    "user": "BronzeOtter",
    "time": "Jun 22, 2018 at 23:20",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Are you able to provide the pcap file?</span>",
            "time": null
        },
        {
            "user": "BronzeOtter",
            "text": "<span class=\"comment-copy\">@SYS_V Sure - here is a link: <a href=\"https://file.io/qm7oMO\" rel=\"nofollow noreferrer\">file.io/qm7oMO</a> - thank you!</span>",
            "time": null
        }
    ],
    "answers_data": []
}