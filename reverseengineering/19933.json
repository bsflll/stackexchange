{
    "title": "obtaining string value from Unknown elf-x86-64 binary with gdb",
    "link": "https://reverseengineering.stackexchange.com/questions/19933/obtaining-string-value-from-unknown-elf-x86-64-binary-with-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to find a string value stored in memory by a binary (possibly written in C) that won't show up when I perform \"strings a.out\". I have tried examining particular memory addresses of interest that I have picked out from the assembly code but with no success. Thus, I am looking to try and print all the string values stored in memory (or char* arrays) by the program. Is there a way to do this? (note: the file does not contain debugging info). Thanks!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "493",
    "tags": [
        "binary-analysis",
        "gdb",
        "binary",
        "strings"
    ],
    "user": "To Ban",
    "time": "Nov 20, 2018 at 18:11",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">You could, for example, run <code>strings</code> on a memory dump or the memory virtual files linux exposes.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the executable is not compiled statically, I think the easiest way is to inject a shared object (.so) with <strong>LD_PRELOAD</strong> to hook/overload the function which prints it and display the address of the buffer. If you disable ASLR, you should be able to set a memory breakpoint on the string address and then figure out how it was 'encrypted'.\nAnother solution is to print the return address using <strong>__builtin_return_address</strong>.</p>\n</div>",
            "votes": "3",
            "user": "wisk",
            "time": "Nov 20, 2018 at 19:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}