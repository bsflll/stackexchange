{
    "title": "What does _PAIR_ macro do with standard handles?",
    "link": "https://reverseengineering.stackexchange.com/questions/18363/what-does-pair-macro-do-with-standard-handles",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've seen this <a href=\"https://reverseengineering.stackexchange.com/q/8317/23069\">question</a> which says <code>__PAIR__</code> macro does some conditional computation. But I can not relate that with standard I/O handles. Here is the pseudocode in IDA:</p>\n<pre><code>if ( (char *)hConout - 1 &lt;= (char *)0xFFFFFFFFFFFFFFFDi64 ) {\nConfigureStdHandles((PHANDLE)handle);\nv175 = __PAIR__(1, (unsigned int)handle[0]);\nv176 = __PAIR__(2, (unsigned int)handle[1]);\nv177 = __PAIR__(2, (unsigned int)handle[2]);\n</code></pre>\n<p>Here is the corresponding Assembly:</p>\n<pre><code>loc_1400088CA:                          ; CODE XREF: wmain+FBF↑j\nmov     [rsp+418h+handle+18h], rsi\nlea     rax, [rsi-1]\ncmp     rax, 0FFFFFFFFFFFFFFFDh\nsetbe   al\nmov     rcx, [rsp+418h]\ntest    al, al\njz      loc_140008BAD\nlea     rcx, [rsp+418h+handle] ; hIn\ncall    _ConfigureStdHandles\nmov     esi, 1\nmov     dword ptr [rsp+418h+var_268+4], esi\nmov     eax, dword ptr [rsp+418h+handle]\nmov     dword ptr [rsp+418h+var_268], eax\nmov     dword ptr [rsp+418h+var_260+4], 2\nmov     eax, dword ptr [rsp+418h+handle+8]\nmov     dword ptr [rsp+418h+var_260], eax\nmov     dword ptr [rsp+418h+var_258+4], 2\nmov     eax, dword ptr [rsp+418h+handle+10h]\nmov     dword ptr [rsp+418h+var_258], eax\ncmp     [rsp+418h+var_230], r15b\njz      short loc_140008958\nmov     [rsp+418h+var_268], r15\nloc_140008958:  \n</code></pre>\n<p>The handles are for standard input, output and error respectively. Can you explain what does the <code>__PAIR__</code> macro do with those handles?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "165",
    "tags": [
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "May 25, 2018 at 18:27",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">show the corresponding asm</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">it appears like highpart(qword( x) = var; lowpart(qword(x) - another var;</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">nothing   take a look at _LARGE_INTEGER structure  and see  the low part and high part and also as a qword</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>__PAIR__</code> represents a 64-bit value constructed from two 32-bit values. Because you have 64-bit variables (<code>var_260</code> etc) being initialized by halves, decompiler detected a 64-bit move pattern and represented the right-hand side it as <code>__PAIR__</code> helper. If you think it's wrong, you can fix it by:</p>\n<ol>\n<li><p>fixing the stack variable to be two 32-bit ones instead of one 64-bit. You can do it by opening the stack frame view (e.g double-click on the stkvar)  and editing the  frame structure (e.g with D key). After refreshing (F5), the decompiler should show simple 32-bit assignments without <code>__PAIR__</code>.</p></li>\n<li><p>splitting the 64-bit assignment into separate 32-bit ones. For that, use <a href=\"https://www.hex-rays.com/products/decompiler/manual/cmd_split.shtml\" rel=\"nofollow noreferrer\">\"Split Assignment\"</a> in the context menu.</p></li>\n</ol>\n<hr/>\n<p><strong><em>EDIT</em></strong> I suspect that those stack variables are not 64-bit integers but actually small structs of two members, e.g.</p>\n<pre><code>struct handle_desc {\n  int handle;\n  int index;\n}\n</code></pre>\n<p>maybe look at how they’re used later in the code.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 25, 2018 at 20:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">After splitting <code>v175 = __PAIR__(1, (unsigned int)handle[0]);</code> becomes <code>HIDWORD(v175) = 1; LODWORD(v175) = handle[0];</code>.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">yes, because the stkvar is still a 64-bit integer but high and low parts of it are being accessed separately.</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">How did you guess handle will be first member then index?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">because handles are assigned to the low part of the variable. but you could try both and see which one works better.</span>",
                    "time": null
                }
            ]
        }
    ]
}