{
    "title": "How does an application identify a DLL file",
    "link": "https://reverseengineering.stackexchange.com/questions/24876/how-does-an-application-identify-a-dll-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorry if this is a basic question, as I'm very new at this.</p>\n<p>I'm trying to get an .exe to load a dummy .dll. I've created an example .dll project in VC++ 2019, added the functions listed in the .exe's import table, made sure to declare <code>extern \"C\" __declspec(dllexport)</code>, using a hex editor changed the ordinals in the import table to match the new .dll and made sure the filename matches. Still, when I run the .exe with this .dll in its folder, I get this kind of error message:</p>\n<blockquote>\n<p>The procedure entry point MyFunction2 could not be located in the dynamic link library MyDll.dll</p>\n</blockquote>\n<p>I've rechecked that I haven't missed any of the function names in the import table, and that none of the function names in the .dll got mangled. Are the offsets for functions entry points in the .dll file hardcoded in the PE format? What am I missing that could cause the application to reject the .dll?</p>\n<p>Edit: The program doesn't import <code>LoadLibrary</code>, <code>CreateProcess</code>, <code>ShellExecute</code> nor any other functions I know which handle processes and libraries.</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "477",
    "tags": [
        "windows",
        "pe",
        "dll"
    ],
    "user": "Liz",
    "time": "May 3, 2020 at 19:43",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Why are you changing ordinals ? It seems the import is being done by name and not ordinal.</span>",
            "time": null
        },
        {
            "user": "Liz",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky yeah I think so too, but I tried to get everything to match in case that would make it work.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is possible that the program is employing mittigations against DLL sideloading and won't load the DLL  from current directory. Check <a href=\"https://support.microsoft.com/en-us/help/2389418/secure-loading-of-libraries-to-prevent-dll-preloading-attacks\" rel=\"nofollow noreferrer\"><em>Secure loading of libraries to prevent DLL preloading attacks</em></a>.</p>\n<p>You can check what paths the program is actually trying to use with Process Monitor (see <em>Using Process Monitor to dynamically detect nonsecure loads</em> in the linked article).</p>\n<p>P.S. to force <code>program.exe</code> to check for DLLs in the current directory, create an empty file named <code>program.exe.local</code>. However, this may not be enough if it's calling <code>LoadLibrary</code> explicitly.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 1, 2020 at 17:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Liz",
                    "text": "<span class=\"comment-copy\">I've ran ProcessMonitor, it seems the program is loading it immediately (or almost immediately) directly from the current directory, which I expected (not a Windows DLL). It seems all the DLLs (including the dummy DLL) are opened and loaded into memory and then as the program is about to start, it dies with this message. The program doesn't import LoadLibrary, CreateProcess etc.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Liz: can you add the (trimmed) output of <code>dumpbin /exports MyDll.dll</code> and <code>dumpbin /imports program.exe</code> to the question?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>there is a way more easy solutuion: </p>\n<p>use Microsoft Detours: <a href=\"https://github.com/microsoft/Detours\" rel=\"nofollow noreferrer\">https://github.com/microsoft/Detours</a></p>\n<p>very well developed, works out of the box, easy compileable on VStudio shell with nmake (just follow the build instructions), many small examples</p>\n<p>can detours some (or all) of the Dll-Functions to your own code without replacing the original Dll or patching the executable, even possible to intercept any function/method you know the adress of</p>\n<p>the setdll and withdll are very helpfull</p>\n</div>",
            "votes": "1",
            "user": "llm",
            "time": "May 5, 2020 at 8:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know this is not a direct answer, but I cant comment with my amount of rep here. </p>\n<p>Maybe the loading application is checking the DLL name, that is stored inside of the loaded DLL. There is a field somewhere in the header, that contains the name of the dll at compile time iirc.</p>\n<p>It could be possible, that the dll is lazy loaded and the error message is just misleading, as the error was thrown during dll loading and not during retrieving of the named function.</p>\n<p>Its the first field on the section table header</p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#section-table-section-\" rel=\"nofollow noreferrer\">Section Table header PE File</a></p>\n</div>",
            "votes": "0",
            "user": "Burgesstorm",
            "time": "May 1, 2020 at 7:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}