{
    "title": "What does std::string::oprator__unsigned_long do?",
    "link": "https://reverseengineering.stackexchange.com/questions/24688/what-does-stdstringoprator-unsigned-long-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am new to reverse c++ program.</p>\n<p>I met this code from r2 decompilation.</p>\n<pre><code>            pcVar6 = (char *)sym.imp.std::string::operator___unsigned_long\n                                       (&amp;username, (int64_t)(int32_t)(uint32_t)var_32ch,\n                                        (int64_t)(int32_t)(uint32_t)var_32ch);\n</code></pre>\n<p>What does the code mean?</p>\n<p>Thanks in advance.</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "115",
    "tags": [
        "radare2",
        "c++"
    ],
    "user": "coolder",
    "time": "Apr 12, 2020 at 3:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is an \"operator overload\" member function, specifically a conversion operator.</p>\n<p>This function is called when you treat the value of the object instance (in this case, a <code>string</code>, as a different type (in this case, an <code>unsigned long</code>).</p>\n<p>For example, if there is a function that expects an <em>unsigned long</em> as an argument, but you pass a <em>string</em> object instead, this operator member will be called to convert the <em>string</em> to match the type.</p>\n<p>There are many types of conversions, such as <em>casting</em>:</p>\n<pre><code>string a = ...;\nunsigned long b;\n\nb = a; //or:\nb = (unsigned long)a;\n</code></pre>\n<p>You can find more information here:</p>\n<p><a href=\"https://en.cppreference.com/w/cpp/language/cast_operator\" rel=\"nofollow noreferrer\">https://en.cppreference.com/w/cpp/language/cast_operator</a></p>\n</div>",
            "votes": "1",
            "user": "Yotamz",
            "time": "Apr 12, 2020 at 7:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}