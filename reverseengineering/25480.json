{
    "title": "DLL injection (Failed to inject)",
    "link": "https://reverseengineering.stackexchange.com/questions/25480/dll-injection-failed-to-inject",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have found this complete and easy example to test the function hook:</p>\n<p><a href=\"https://github.com/Zer0Mem0ry/Detour\" rel=\"nofollow noreferrer\">https://github.com/Zer0Mem0ry/Detour</a></p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;iostream&gt;\n\n#include \"detours.h\"\n#include \"sigscan.h\"\n\n// this is the function that the program\n// will jump to when sum() is called in the original program (testprogram.exe)\n\nDWORD AddressOfSum = 0;\n// template for the original function\ntypedef int(*sum)(int x, int y); \n\nint HookSum(int x, int y)\n{\n    // manipulate the arguments\n    x += 500;\n    y += 500;\n\n    // we manipulate the arguments here and then\n    // redirect the program to the original function\n\n    std::cout &lt;&lt; \"your program has been hacked! \" &lt;&lt; std::endl;\n    sum originalSum = (sum)AddressOfSum;\n    return originalSum(x, y);\n}\n\nBOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, LPVOID lpReserved)\n{\n    // store the address of sum() in testprogram.exe here.\n\n    if (dwReason == DLL_PROCESS_ATTACH)\n    {\n        // We will use signature scanning to find the function that we want to hook\n        // we will find the function in IDA pro and create a signature from it:\n\n        SigScan Scanner;\n\n        // testprogram.exe is the name of the main module in our target process\n        AddressOfSum = Scanner.FindPattern(\"testprogram.exe\", \"\\x55\\x8B\\xEC\\x8B\\x45\\x08\\x03\\x45\\x0C\", \"xxxxxxxxx\");\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        // this will hook the function\n        DetourAttach(&amp;(LPVOID&amp;)AddressOfSum, &amp;HookSum);\n\n        DetourTransactionCommit();\n    }\n    else if (dwReason == DLL_PROCESS_DETACH)\n    {\n        // unhook\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        // this will hook the function\n        DetourDetach(&amp;(LPVOID&amp;)AddressOfSum, &amp;HookSum);\n\n        DetourTransactionCommit();\n    }\n    return TRUE;\n}\n</code></pre>\n<p>I have tried to inject this DLL to the \"testprogram.exe\" (without change nothing) using cheat engine, extreme inject, etc.. with the some result \"failed to inject\".</p>\n<p>I need to change \"xxxxxxxxx\" before inject the DLL ?</p>\n<p>Can you help me please ?</p>\n<p>Best Regards</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "541",
    "tags": [
        "c++",
        "function-hooking",
        "dll-injection"
    ],
    "user": "user3449922",
    "time": "Jul 12, 2020 at 13:59",
    "comments": [
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">The code probably crashes somewhere. Are you sure the AddressOfSum isn't null?</span>",
            "time": null
        },
        {
            "user": "user3449922",
            "text": "<span class=\"comment-copy\">thank you ! the problem was solved and dll was inject correctly and the function hook work. Last question: How I can patch the exe to take permanent the modify ?</span>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">I think it won't be easy. Probably better idea would be to make proxy dll using one of the .dlls that the game loads during start procedure.</span>",
            "time": null
        },
        {
            "user": "user3449922",
            "text": "<span class=\"comment-copy\">thank you ! Please confirm If I have understand:  1) First create a c++ dll empty project, compile and put on game folder.  2) Download ProxiFy <a href=\"https://www.codeproject.com/Articles/1179147/ProxiFy-Automatic-Proxy-DLL-Generation\" rel=\"nofollow noreferrer\">codeproject.com/Articles/1179147/â€¦</a> 3) Select the dll empty project with ProxiFy that will create .def file that contain the definitions to include on my final dll. 4) Before compile my hook.dll (32 bit) include .def file in the linker. 5) Now my hook.dll will be called by the game. Is correct ?</span>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">I have never used ProxiFy but the approach looks generally correct, in your proxy.dll you always call the original function from original.dll, but in one case you call your hook procedure from DllMain posted above (before calling the original function), it would be good idea to find a function from original.dll that is called only once at game start</span>",
            "time": null
        }
    ],
    "answers_data": []
}