{
    "title": "Is there any way to understand if a raw binary firmware is Cortex-M or not?",
    "link": "https://reverseengineering.stackexchange.com/questions/30846/is-there-any-way-to-understand-if-a-raw-binary-firmware-is-cortex-m-or-not",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a list of firmwares, and I should filter just the Cortex-M type. Is there any automated way that I can distinguish them from other ARM firmwares?</p>\n<p>I have some ideas like Interrupt vector Table (ivt) or looking for other specific features of Cortex-M like Systick, but I am not sure if they are going to work.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "101",
    "tags": [
        "assembly",
        "firmware",
        "arm",
        "embedded"
    ],
    "user": "eftekhar",
    "time": "Sep 1, 2022 at 17:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Probably the simplest way is to search for the string <code>pG</code> (hex <code>70 47</code>, encoded <code>BX LR</code>). If you have many of them at even addresses, especially repeated (sequence of empty functions), then it’s a pretty strong hint.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 2, 2022 at 10:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "eftekhar",
                    "text": "<span class=\"comment-copy\">May I ask why it should work? Is it a special instruction just in Cortex-M firmware? @igor-skochinsky</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">It’s Thumb encoding of BX LR and Cortex-M3 uses Thumb-2 instructions. It is, of course, not sufficient indicator alone.</span>",
                    "time": null
                }
            ]
        }
    ]
}