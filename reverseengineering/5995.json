{
    "title": "Hex representation of integer values in excess of FF (255)",
    "link": "https://reverseengineering.stackexchange.com/questions/5995/hex-representation-of-integer-values-in-excess-of-ff-255",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am learning some gdb and it is covering examining arrays. There is the following code, and I see it is 4 bytes, and how <code>a[1] = 2</code> in an array <code>int a[] = {1,2,3}</code></p>\n<pre><code>(gdb) x/4xb a + 1\n0x7fff5fbff570: 0x02  0x00  0x00  0x00\n</code></pre>\n<p>But what if a was greater than what could be shown by a single hex byte? Then how does it work for the second part? Sorry if this is unclear, I don't know how tow ord it exactly.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "gdb"
    ],
    "user": "user8058",
    "time": "Aug 1, 2014 at 5:34",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">See <a href=\"http://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">Endianness</a></span>",
            "time": null
        },
        {
            "user": "user8058",
            "text": "<span class=\"comment-copy\">I got that. Mine is little endian, or else it would go <code>0x00 0x00 0x00 0x02</code>  But how do these four bytes come together into a single integer value?</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\"><code>0*256^3+0*256^2+0*256^1+2*256^0</code>. If you have the hex bytes <code>0x12 0x34 0x56 0x78</code>, this would be <code>0x12*256^3+0x34*256^2+0x56*256^1+0x78*256^0=305419896</code> (big endian) or <code>0x78*256^3+0x56*256^2+0x34*256^1+0x12*256^0=2018915346</code> (little endian).</span>",
            "time": null
        },
        {
            "user": "toasted_flakes",
            "text": "<span class=\"comment-copy\">Alternatively, you can specify the width of grouping by using x/?x. See <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Memory.html\" rel=\"nofollow noreferrer\">here</a>.</span>",
            "time": null
        },
        {
            "user": "user8058",
            "text": "<span class=\"comment-copy\">@GuntramBlohm That seems like a good answer, thank you.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you have two questions here.  The first part is how to convert from decimal to hexadecimal and back; the second part is how a multi-byte value is represented in memory.  Guntram Blohm's answer covers the first part in detail, and I'll try to muddle through an answer to the second here.</p>\n<p>So, consider a multi-byte hexadecimal number...ABCD, where each letter represents a byte.  So for example in 0x03B87C43 A represents 0x03, B represents 0xB8, C represents 7C and D represent 0x43.  Finally, D is referred to as the low-order byte.  </p>\n<p>Now, the various bytes can be arranged in different ways in memory; and there are two major forms that are currently in use today:</p>\n<p><strong>little-endian</strong> form:</p>\n<p>The low-order byte is placed at the lowest memory address, thus our example number would be\nstored in memory thusly:</p>\n<pre><code> 1000  1001  1002  1003   &lt;----- memory addresses, notional     \n+-----+-----+-----+-----+\n|  D  |  C  |  B  |  A  |\n+-----+-----+-----+-----+\n</code></pre>\n<p>Intel processors use this form of storing multi-byte numbers.</p>\n<p><strong>big-endian</strong> form:</p>\n<p>The low-order byte is placed at the highest memory address, thus our example number would be \nstored in memory thusly:</p>\n<pre><code> 1000  1001  1002  1003   &lt;----- memory addresses, notional     \n+-----+-----+-----+-----+\n|  A  |  B  |  C  |  D  |\n+-----+-----+-----+-----+\n</code></pre>\n<p>Non-Intel SUN workstations use this form (IIRC they use a Motorola processor).</p>\n<p>other forms.</p>\n<p>just about any other arrangement can be used.  For example, PDP-11 used a system where \na 32-bit value was stored in little-endian format, with the exception of each byte of the 16-bit half was swapped.  Thus our sample number would be stored in memory as:</p>\n<pre><code> 1000  1001  1002  1003   &lt;----- memory addresses, notional     \n+-----+-----+-----+-----+\n|  C  |  D  |  A  |  B  |\n+-----+-----+-----+-----+\n</code></pre>\n<p>Hope this helps a bit.</p>\n</div>",
            "votes": "2",
            "user": "thurizas",
            "time": "Aug 12, 2014 at 0:51",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Too long for another comment ... You want to convert decimal to hex and vice versa?</p>\n<p>Very short answer: Take windows calc, switch to programmer mode.</p>\n<p>A bit longer answer: Get a calculator that can do hex, or a calculator app that can do it. I prefer realcalc on android.</p>\n<p>Long answer:</p>\n<p>To convert decimal to hex, divide your number by 16 and write down the remainder as a hex digit. Repeat with the divided number, <em>prepending</em> digits to the ones you've already written down. Continue until you reach zero. Group in 2 if you want bytes.</p>\n<p>Example: </p>\n<pre><code>1_000_000 / 16 = 62_500, remainder 0 =&gt; 0\n62_500 / 16 = 3_906, remainder 4 =&gt; 40\n3_906 / 16 = 244. remainder 2 =&gt; 240\n244 / 16 = 15, remainder 4 =&gt; 4240\n15 / 16 = 0, remainder 15 =&gt; F4240, or 0F 42 40 in big endian, or 40 42 0F little endian.\n</code></pre>\n<p>To convert hex to decimal, take the left-most digit. Multiply by 16, add next digit. Repeat (multiply, add) until no more digits are left.</p>\n<pre><code>F4240 =&gt; 15\n4240  =&gt; 15*16+4 = 244\n240   =&gt; 244*16+2 = 3_906\n40    =&gt; 3_906*16+4 = 62_450\n0     =&gt; 62_450*16+0 = 1_000_000\n</code></pre>\n<p>If you want to do the same in bytes, not digits, it's the same, but with 256 as the multiplier. The values of the bytes 0x0f, 0x42, 0x40 are 15, 66 and 64.</p>\n<pre><code>F 42 40 =&gt; 15\n42 40   =&gt; 15*256+66 = 3_906\n40      =&gt; 3_906*256+64 = 1_000_000\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Aug 3, 2014 at 5:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">When I'm in The Zone I don't <i>need</i> to mentally convert hex to dec... (Note: English thousands' separator is a comma, not a period.)</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">@Jongware please note European thousands separator is a period not a comma.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Stop fighting :) I changed the separater to _, as you can in perl, to make it clear. Although i half expect someone to comment he wants to convert decimal numbers, not some strange numbering system he never heard of.</span>",
                    "time": null
                }
            ]
        }
    ]
}