{
    "title": "How to convert addresses shown by IDA when statically analyzing a DLL to real addresses in runtime",
    "link": "https://reverseengineering.stackexchange.com/questions/30415/how-to-convert-addresses-shown-by-ida-when-statically-analyzing-a-dll-to-real-ad",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In a DLL I am trying to reverse there often is a reference to something I believe to be a fixed pointer (like a global var) which looks like dword_10038534. The references I am talking about look like this</p>\n<pre><code>v7 = dword_10038534\nv10 = v7\nv4 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v10 + 44))(v10, a2);\n</code></pre>\n<ol>\n<li><p>Am I right to assume this is a pointer?</p>\n</li>\n<li><p>I would also assume that address is valid within the address space of the DLL module and will change when the DLL is loaded? So how do I calculate the actual run-time address if I load the DLL into my (c++) application?</p>\n</li>\n<li><p>As you might've noticed, the code I've shown looks like a function call and the function resides at given address. Is there any way to find the actual function body? I am not sure about this, but the functions might be dynamically loaded from another DLL (not through import but rather loadModule &amp; getProcAddress). I managed to find some places where this object (situated at dword_10038534) is constructed, like there are values put at addresses relative to it, however I cannot figure out how the functions are loaded.</p>\n</li>\n</ol>\n<p>For context this DLL was created in late 90s using Visual c++ (most likely VC++4). There is no anti-debug or packing in place. I have heard that patterns like the one I've shown may be connected with C++ classes and virtual method table, however I have strong reasons to believe the DLL was written in C not C++, although this is unconfirmed</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "162",
    "tags": [
        "ida",
        "windows",
        "dll",
        "pointer",
        "msvc"
    ],
    "user": "Curious User",
    "time": "May 17, 2022 at 11:02",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">The following article itself as well as linked articles may be of interest for you: <a href=\"https://devblogs.microsoft.com/oldnewthing/20170120-00/?p=95225\" rel=\"nofollow noreferrer\">devblogs.microsoft.com/oldnewthing/20170120-00/?p=95225</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}