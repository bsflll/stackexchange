{
    "title": "Did somebody start to reverse engineer the proprietary Linux Brother Cups drivers?",
    "link": "https://reverseengineering.stackexchange.com/questions/3837/did-somebody-start-to-reverse-engineer-the-proprietary-linux-brother-cups-driver",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not very experienced with graphic or printer formats. My first (and only try yet) was to print a Tux.png with 265 x 314 pixel via the Chromium browser and see what Wireshark shows as USB transfer.</p>\n<p>I turns out that the image became a 1.540.598 byte bulk transfer (noticed because it uses a designated USB endpoint). For this I only measured the payload which divides into 188 packets of 8192 byte and one left packet with 4982 byte.</p>\n<p>Than I tried to look into the first 81920 bytes by concatenating the payloads and read the content as 32 bit integers to see if it contains some repeating patterns which maybe looked like some continuous white or black pixels - but this didn't work.</p>\n<p>So did anybody already started an attempt to understand the data that is sent to the printer?</p>\n<p>It would be good to have an open source variant of the driver, because the current driver is an Intel binary and won't work for example on a Raspberry PI, which could be a cheap and current-saving print server.</p>\n<hr/>\n<p>Update 2014-03-10: Forgot to mention that I already found the <em>open source</em> drivers of Brother - but they don't contain the driver for the printer, they only provide the source for the CUPS wrapper. And just to mention it (should make no difference) I own an Brother DCP 135c.</p>\n</div>",
    "votes": "10",
    "answers": 3,
    "views": "3k",
    "tags": [
        "linux",
        "driver"
    ],
    "user": "Sven",
    "time": "Mar 10, 2014 at 9:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I created a free driver for my Brother printer, available at <a href=\"https://github.com/pdewacht/brlaser\" rel=\"noreferrer\">github.com/pdewacht/brlaser</a>. It's known to work with the Brother DCP-7030 and DCP-7065DN. If anybody tries it, I'd like to hear your feedback, it'd be useful to know which printers work with this driver and which printers don't.</p>\n</div>",
            "votes": "6",
            "user": "pdw",
            "time": "Jun 30, 2014 at 16:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sven",
                    "text": "<span class=\"comment-copy\">Thank you, looks very promising. Does the brdecode.cc file decode the raw printer data stream?</span>",
                    "time": null
                },
                {
                    "user": "pdw",
                    "text": "<span class=\"comment-copy\">Yes, brdecode is a stand-alone tool that decodes and dumps the bitmaps in the data stream. It skips over the PCL framing, but that's uninteresting anyway (identical for every page and mostly standard).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The way CUPS works under the hood is it ends up executing a program (the binary driver) that operates on <code>stdin</code>.  This binary must conform to the CUPS backed interface described quite comprehensively: <a href=\"http://www.cups.org/documentation.php/api-filter.html\">http://www.cups.org/documentation.php/api-filter.html</a></p>\n<p>Everything else provided by the driver is just scripts and meta-data (well, who knows, but the backend program is the important one.)</p>\n<p>For example, I happen to have a Brother MFC J415W; the Brother Linux driver installs a bunch of stuff but eventually it ends up running a binary called <code>/opt/brother/Printers/mfcj415w/lpd/brmfcj415wfilter</code>.  </p>\n<p>So one thing you might be able to do to make your life easier, instead of printing from a web browser, is work out how to run your backend binary directly.  That should be doable by looking in the scripts to see how it gets called with what arguments and environment variables.  </p>\n<p>That way you might be able to have tighter control over which exact data gets converted for printing. You could also make a custom postscript file to push into that binary, perhaps various test patterns, like all black, all white, squares, etc., so that you may end up seeing patterns in the USB stream easier.</p>\n<p>FWIW I ran <code>strings</code> on my driver and the following was in it: <code>Compressed by Brother Ind.,Ltd.</code> - so I suspect you are seeing a compressed data stream of some kind.  It might be interesting to run something like <code>binwalk</code> over your stream to see whether it is able detect the compression mechanism used...</p>\n</div>",
            "votes": "5",
            "user": "6EQUJ5",
            "time": "Jun 8, 2014 at 11:55",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You seem to be looking for the drivers' source code: <a href=\"http://welcome.solutions.brother.com/bsc/public_s/id/linux/en/download_src.html\" rel=\"nofollow\">http://welcome.solutions.brother.com/bsc/public_s/id/linux/en/download_src.html</a></p>\n</div>",
            "votes": "2",
            "user": "Vitaly Osipov",
            "time": "Mar 10, 2014 at 1:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sven",
                    "text": "<span class=\"comment-copy\">Sorry, I forgot to mention that I already found them, but Brother only delivers the CUPS wrapper as open source, but not the driver itself.</span>",
                    "time": null
                },
                {
                    "user": "Charles-Ã‰douard Coste",
                    "text": "<span class=\"comment-copy\">This link is dead. :(</span>",
                    "time": null
                }
            ]
        }
    ]
}