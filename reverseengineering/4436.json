{
    "title": "Does a JE must follow directly to an CMP?",
    "link": "https://reverseengineering.stackexchange.com/questions/4436/does-a-je-must-follow-directly-to-an-cmp",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to know if a jump instruction as <code>JE</code> must directly follow to a <code>CMP</code> instruction. Until now, I did always see that first a <code>CMP</code> comes and after that a <code>JMP</code>. But today I have discover the following:</p>\n<pre><code>...\nCMP DWORD PTR SS:[EBP+0xC], EAX\nMOV ECX, DWORD PTR SS:[EBP+0x18]\nPUSH ESI\nMOV ECX, DWORD PTR SS:[EBP+0x18]\nMOV DWORD PTR SS:[ECX],EAX \nMOV EAX, DWORD PTR SS:[EBP+0x10]\nMOV DWORD PTR SS:[EDI], 0x1\nJE SHORT crtdll.6C250E66\n....\n</code></pre>\n<p>First of all, I am beginner. So, I try to understand the assembly language. Logically, I would say that the <code>JE</code> instruction is related to the <code>CMP</code> instruction at the beginning of that sequence. </p>\n<p>So, my self-explanation was that we first compare, then do some <code>MOV</code> and <code>PUSH</code> operations, after that all we are jumping, is that right?</p>\n<p>But, as I mentioned above, normally the jump comes in the next line after the comparison, could one say the reason for that late jump instruction here ? Or is it normal ?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "4k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "user3097712",
    "time": "May 26, 2014 at 14:52",
    "comments": [
        {
            "user": "gandolf",
            "text": "<span class=\"comment-copy\">Since there are plenty of good responses below I'll just add this here. If you look closely at your disassembly you'll realize that the JE could very well be considered to be executed right after the CMP (not logically), the instruction compares EAX with contents located at [EBP+0xC], the instructions that follow never modify [EBP+0xC] and no other instruction will modify the EFLAG registers. Specifically the zero flag. Anyways, just remember that conditional jumps are determined by the modification of the EFLAGS, regardless of the instruction used.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is perfectly normal, compilers tend to emit such code for sake of optimization. </p>\n<p>Moreover delaying the conditional jump is helpful for instruction prefetching &amp; branch handling. The code is valid too unless the code in between modify the EFLAGS register.</p>\n</div>",
            "votes": "10",
            "user": "0xec",
            "time": "May 24, 2014 at 2:15",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JE checks the zero flag (ZF). So as long as ZF is not modified you can jump any time you want. The same to other jump instructions</p>\n</div>",
            "votes": "6",
            "user": "phuclv",
            "time": "May 26, 2014 at 11:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JE (Jump on Equal) instructions use a result of a previous operation, this previous operation is usually CMP (compare) but it can be any other of a multitude of similar operations (eg ADD, XOR, etc..) As a matter of fact the operation which will provide the result and the actual jump command may not be consecutive at all, but if intermediate commands do not alter the result flags/registers the program flow will still be valid as intended.</p>\n<p>Compilers tend to generate similar code (although there can be automatic optimizations or obfucations) other times custom hand-made code may be written this way for various reasons</p>\n</div>",
            "votes": "4",
            "user": "Nikos M.",
            "time": "May 25, 2014 at 2:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}