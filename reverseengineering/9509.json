{
    "title": "What is the meaning of *(_DWORD *)",
    "link": "https://reverseengineering.stackexchange.com/questions/9509/what-is-the-meaning-of-dword",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I disassemble some code using IDA Pro and get the pseudo-code. It showed something like below.</p>\n<pre><code>for ( i = 0; i &lt; 6; ++i )\n{\n  v7 = (int)&amp;val_253;                         \n  for ( k = 1; k &lt; key[i]; ++k )\n    v7 = *(_DWORD *)(v7 + 8);\n  v4[i] = v7;\n}\n</code></pre>\n<p>I can't understand what is happening in <code>v7 = *(_DWORD *)(v7 + 8);</code> line. After executing this line the value of v7 changes from <code>0xC</code>. I can't understand how it happens. I thought the value should change from <code>0x8</code>.</p>\n<p>And I thought <code>*(_DWORD *)</code> should return a value. But instead, it returns another pointer. How is that happened (The both values of the memory, <code>0xc</code> away from <code>&amp;val_253</code> and <code>0x8</code> away from <code>&amp;val_253</code> are zero).</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "14k",
    "tags": [
        "ida",
        "decompilation"
    ],
    "user": "Ramesh-X",
    "time": "Aug 3, 2015 at 19:27",
    "comments": [
        {
            "user": "Hackndo",
            "text": "<span class=\"comment-copy\">Hi, not sure I fully understand your question. Maybe this will help <a href=\"http://stackoverflow.com/questions/2995251/why-in-c-do-we-use-dword-rather-than-unsigned-int\" title=\"why in c do we use dword rather than unsigned int\">stackoverflow.com/questions/2995251/â€¦</a>  &amp;   <a href=\"https://msdn.microsoft.com/en-us/library/cc230318.aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/cc230318.aspx</a></span>",
            "time": null
        },
        {
            "user": "Ramesh-X",
            "text": "<span class=\"comment-copy\">If someone can tell me what is happening in <code>v7 = *(_DWORD *)(v7 + 8);</code> codeline, it may resolve half of my problems..</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">*(DWORD *)    = DWORD    [ADDRESS]   = 0x13371337 *(char *)     = BYTE     [ADDRES]    = 0x7b *(sometype *) = SOMETYPE [ADDRESS]   = 0x1234567890123456badf00d</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">For starters this is C pseudo code - <b>not</b> disassembly as the tag suggests - and if you used IDA you likely used the Hex-Rays <b>decompiler</b> plugin. So thinking this through: you spend several thousand dollars or euros for something of which you seem to know little? It may solve half of your problems if you pick up a C book below a hundred dollars and learn to understand the target language of the <b>decompiler</b> plugin.</span>",
            "time": null
        },
        {
            "user": "Ramesh-X",
            "text": "<span class=\"comment-copy\">I know this is pseudocode. There is no tag called pseudocode here and I can't create one because I have low reputation. So I tagged disassembly so someone will see this. Here I did a mistake. The value of the memory <code>0x8</code> away from <code>&amp;val_253</code> is not zero. It points to another memory location which is located <code>0xC</code> away from <code>&amp;val_253</code>. I didn't see that before. Though I thought <code>*(_DWORD *)</code> should return a value, it returns a pointer. That's why <b>after executing value of v7 changes from <code>0xC</code></b></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>v7 = *(_DWORD *)(v7 + 8);\n</code></pre>\n<p>Means :</p>\n<pre><code>v7 = *(v7 + 8)\n</code></pre>\n<p>Or in assembly </p>\n<pre><code>MOV v7, DWORD PTR [v7 + 0x8]\n</code></pre>\n<p>(This is only for understanding purpose, chances are that it's not really like above samples)</p>\n<p><code>v7</code> is assigned with the value located at address <code>v7+8*sizeof(DWORD)</code>. For example, if <code>v7 = 0xabcd0123</code> then <code>v7 + 8*sizeof(DWORD)  = 0xabcd0143</code>. Whatever is located at <code>0xabcd0143</code> will be assigned to <code>v7</code>.</p>\n</div>",
            "votes": "7",
            "user": "Hackndo",
            "time": "Aug 4, 2015 at 6:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Spl3en",
                    "text": "<span class=\"comment-copy\">Wrong. v7 won't be egal to <code>0xabcd012b</code>, but <code>0xabcd0143</code> (in other words, <code>0xabcd0123 + sizeof(DWORD)*8</code>). If you prefer, <code>v7 = *(v7 + 8) &lt;=&gt; v7 = v7[8]</code>.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Uhm ... \"<i>means, in C code</i>\"? Some how implying that it's not already C ... which it is ...?!</span>",
                    "time": null
                },
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">Fixed. Silly mistakes :)</span>",
                    "time": null
                },
                {
                    "user": "Roberto Andrade",
                    "text": "<span class=\"comment-copy\">So in summary this means read the contents of the 8th DWORD located after the address v7 is currently pointing to? How does it know how many bytes to read? does it read a single DWORD in this case? or does it depend on the type declared for v7?</span>",
                    "time": null
                },
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">No, it means \"Move the DWORD located at v7+0x8, and put it in v7\"</span>",
                    "time": null
                }
            ]
        }
    ]
}