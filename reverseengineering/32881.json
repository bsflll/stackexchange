{
    "title": "Reverse engineering AES128 Key Derrivation from MAC Address",
    "link": "https://reverseengineering.stackexchange.com/questions/32881/reverse-engineering-aes128-key-derrivation-from-mac-address",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using Ghidra I have acquired the following Psuedo-code decompilation output from an ELF 32-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, not stripped.</p>\n<p>From this decompilation I can see the key generation is based on a SHA1 of a MAC address</p>\n<pre><code>n = 12; // Not sure where 12 comes from, perhaps 2 * number of bytes in a MAC address?\nSHA1_Init(&amp;sha1_ctx);\nSHA1_Update(&amp;sha1_ctx,macAddr,6);\nSHA1_Final((uchar *)&amp;messageDigest,&amp;sha1_ctx);\nmemset(&amp;key,0,n);\nj = 0;\n// Why \nfor (i = 0; (j &lt; 20 &amp;&amp; (i &lt; (int)(n - 2))); i = i + 2) {\n    sprintf((char *)((int)&amp;key + i),\"%02X\",(ulonglong)*(byte *)((int)&amp;messageDigest + j));\n    j = j + 1;\n}\nmemcpy(iv,&amp;key,17);\naes_set_key(aesCtx,&amp;key,128,0);\nmemcpy(buffer, encryptedBuffer, 116);\naesOut = buffer + 4; // Skip first 4 magic bytes\nAES_cbc_encrypt(aesCtx,aesOut,aesOut,112,iv,0);\n</code></pre>\n<p>Using this decompilation I am trying create my own implementation of a decryption algorithm with the <a href=\"https://github.com/kokke/tiny-AES-c\" rel=\"nofollow noreferrer\">Tiny AES Encyption</a> library in C.</p>\n<pre class=\"lang-c prettyprint-override\"><code>uint8_t messageDigest[SHA_DIGEST_LENGTH];\nuint8_t key[SHA_DIGEST_LENGTH * 2];\nuint8_t iv[24];\n\nmemset(key, 0x0, 12); // Why memset 12 bytes? Is this key a 12 byte character string or is it 11 bytes with an extra byte zero'ed for the null terminator? \n\nSHA1((uint8_t *)  ethhdr-&gt;h_source, ETH_ALEN, messageDigest);\n\nint i;\nint j = 0;\nfor (i = 0; (j &lt; SHA_DIGEST_LENGTH &amp;&amp; i &lt; 10); i += 2) {\n    sprintf((char *) &amp;key[i], \"%02X\", messageDigest[j]);\n    j++;\n}\n\nmemcpy(iv, key, 17); // Why 17? Only 12 bytes of key has been set\nprintf(\"%s\\n\", iv);\nprintf(\"%s\\n\", key);\n\nuint8_t *data = encryptedBuffer;\nmemcpy(dsBuffer, data, 112);\n\nstruct AES_ctx aesCtx;\nAES_init_ctx_iv(&amp;aesCtx, key, iv);\n// Skip first 4 bytes (magic bytes)\nAES_CBC_decrypt_buffer(&amp;aesCtx, (uint8_t *) dsBuffer + 4, 112);\n</code></pre>\n<p>This code appears correct as a line for line rewrite but appears logically flawed to me. In particular <code>memcpy(iv, key, 17);</code>\nfrom the decompilation it only appears 10 bytes are set in the <code>key</code> - how can we copy 17 bytes into the IV? Even more so why would we initialise 12 bytes to 0's with the first call to memset?</p>\n<p>I searched standard for using SHA1 as key &amp; IV for AES128 but couldn't find anything that matched.</p>\n<p>Thanks in advance.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "100",
    "tags": [
        "decompilation",
        "ghidra",
        "arm",
        "decryption"
    ],
    "user": "Seb",
    "time": "Apr 8, 2024 at 17:26",
    "comments": [
        {
            "user": "Seb",
            "text": "<span class=\"comment-copy\">The key and IV were getting initialised to 0's. When I looked into the assembly in detail I could see         stp        xzr,xzr,[x7]=&gt;key[0]  which zero'ed all the bytes in the key and the IV. Lesson learnt, assembly is king in decompilation</span>",
            "time": null
        },
        {
            "user": "Seb",
            "text": "<span class=\"comment-copy\">With this info in mind it was clear that the key was the first 10 characters of the SHA1 of the MAC Address and the other 6 bytes were just 0's   Now confident it was only creating a 10 character key I was then decrypt using this.  Thanks again for the help.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>ELF 32-bit LSB executable, ARM aarch64, version 1 (SYSV)</p>\n</blockquote>\n<p>I guess you meant 64-bit ELF, but it's not important.</p>\n<blockquote>\n<p>n = 12; // Not sure where 12 comes from, perhaps 2 * number of bytes in a MAC address?\n// Why\nfor (i = 0; (j &lt; 20 &amp;&amp; (i &lt; (int)(n - 2))); i = i + 2) {\nsprintf((char <em>)((int)&amp;key + i),\"%02X\",(ulonglong)</em>(byte *)((int)&amp;messageDigest + &gt; j));\nj = j + 1;\n}</p>\n</blockquote>\n<p>The MAC address is 6 byte long, as you mentioned 12 is double this size, if you look to the iteration of the loop: <code>sprintf(key + i, \"%02X\", messageDigest + j);</code> it's actually \"hexlify\" the MAC address, meaning it will convert the raw MAC address into a hexdecimal uppercase format, i.e. <code>\"\\xaa\\xbb\\xcc\\xdd\\xee\\xff\"</code> will be <code>\"AABBCCDDEEFF\"</code>.</p>\n<blockquote>\n<p>memcpy(iv, key, 17); // Why 17? Only 12 bytes of key has been set</p>\n</blockquote>\n<p>You pointed out a good question, and from the decompiled code, I think there's something wrong. At first the algorithm seems to:</p>\n<ul>\n<li>Perform a SHA-1 for the 6 byte long MAC address</li>\n<li><code>key</code> is memset with the size of 12, double the size of the MAC address, so theoretically to store the MAC address in the hexlify form</li>\n<li>the loop uses 20, the size of the SHA-1 digest, you didn't share the size of the key buffer, but the memset seems useless, and <code>(i &lt; (int)(n - 2)))</code> is a big redflag, this condition will break the for loop earlier</li>\n<li><code>key</code> is duplicated to the <code>iv</code> buffer, 17 could be 128-bit + null char, but it doesn't make sense, because the key and iv have a fixed size, they don't have to be null terminated, maybe it's related to the hexlify and string operations, but the loop never null terminate the buffer anyway</li>\n<li><code>aes_set_key(aesCtx,&amp;key,128,0);</code>, I wonder what's the last parameter 0, same with <code>AES_cbc_encrypt(aesCtx,aesOut,aesOut,112,iv,0);</code></li>\n</ul>\n<p>I also think a <code>strcpy</code> with fixed sizes could be optimized into a <code>memcpy</code> with string length + 1.</p>\n<p>Overall, I think your analysis and the decompiled code is accurate, but the original code is really sketchy.\nThere's a chance the IV is actually based on uninitialized data, but one of the 0 parameter tells the IV size is 0, and thus ignored.</p>\n<p>If you can share more details or a use case, like inputs and expected output, it will help to figure out what happened.</p>\n<p>BTW, did you identify the AES library used for this code?</p>\n</div>",
            "votes": "1",
            "user": "wisk",
            "time": "Apr 9, 2024 at 5:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Seb",
                    "text": "<span class=\"comment-copy\">I just send the output of <code>file mybinary.bin</code> and it showed the above output so to me it seems like a 32-bit binary (32 bit pointers) compiled for aarch64 platform. Perhaps was an ARM32 and they've ported it half-cooked to aarch64? The binary itself has been extracted from a router.  This appears to be the AES implementation being used. These are the C Bindings for the ARM hardware encyption <a href=\"https://elixir.bootlin.com/linux/latest/source/arch/arm64/crypto/aes-glue.c\" rel=\"nofollow noreferrer\">elixir.bootlin.com/linux/latest/source/arch/arm64/crypto/â€¦</a>  I will see what I can share in terms of input/output. Would prefer not to share the MAC address if possible.</span>",
                    "time": null
                }
            ]
        }
    ]
}