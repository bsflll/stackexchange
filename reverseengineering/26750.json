{
    "title": "Correct target of absolute jmp in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/26750/correct-target-of-absolute-jmp-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the firmware I am reversing (for a 16-bit MCU), there is code that copies the code of a function from flash memory to RAM, then jumps to it for execution:</p>\n<pre><code>F000:FEFF : mmap'ed location of function code in flash memory\n2400:32FF : RAM location where the function code is copied\n</code></pre>\n<p>Inside said copied function, there are absolute jmps, such as:</p>\n<pre><code>jmp     loc_2838\n</code></pre>\n<p>The operand is the absolute address 2838.  Unfortunately, in the disassembly, this address is in the RAM area and it contains only 0s obviously.  The corresponding code in the flash area of the disassembly is at F438 (F000 + 2838-2400 = F000 + 438).  Is there a way to apply a jmp target correction so that IDA understands that the target code of the jump is F438 instead of 2838?</p>\n<p>This would correct the XREFs, repeatable comments and would make navigation easier.  It would be nice also if there was a mechanism to correct all absolute references in a section of code, but I don't mind correcting all absolute references manually.</p>\n<h2>EDIT</h2>\n<p>One thing that wasn't clear in my question is that there are both absolute <em>and</em> relative references in the block of code copied to RAM.  Therefore, creating a segment with a different base to encompass that code would not work since it would correct the absolute references, and break the relative references.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "393",
    "tags": [
        "ida",
        "disassembly",
        "motorola"
    ],
    "user": "Naju",
    "time": "Jan 18, 2021 at 14:38",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">why is this tagged motorola but the code seems x86?</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">Kind of seems like you want to create a new segment at the proper base address and copy the code there. Or, perhaps you could rebase the whole database. Or, perhaps create a new database with just the copied code located at the proper base address.</span>",
            "time": null
        },
        {
            "user": "Naju",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky I tagged it motorola because the chip is a Freescale HCS12X, which is ultimately a derivative of the Motorola 6800, and the exact chip has no bearing on the question.  Also note that the Motorola 6800 familly had the jmp instruction since the beginning.</span>",
            "time": null
        },
        {
            "user": "Naju",
            "text": "<span class=\"comment-copy\">@RolfRolles Seems like that could be a solution.   It becomes extremely tedious though, as this copy-flash-function-to-ram happens many times, so I would need to create a new segment and correct the base address for every function =\\</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to create a segment with such a base that the offset inside the segment matches the expected 16-bit address. For example, if F438 corresponds to 2838 then creating a segment with base of 0xcc00 (or possibly 0xcc0 since IDA expects it in paragraphs) should make things \"line up\".</p>\n<p>More <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/508.shtml\" rel=\"nofollow noreferrer\">about segments in IDA</a>.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 12, 2021 at 20:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As mentioned in my edit, creating a segment for the code and changing the base wouldn't work.</p>\n<p>However, I found that when manually editing the operand (Alt+F1) - e.g. changing loc_29E4 to loc_F5E4 (or whatever the target is called) - the navigation to the target (Enter or double-click) works and I can even see the repeatable comment.  This suits my needs so I'll close the question.</p>\n<p>Thank you all.</p>\n</div>",
            "votes": "1",
            "user": "Naju",
            "time": "Jan 18, 2021 at 14:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}