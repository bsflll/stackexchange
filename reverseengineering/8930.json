{
    "title": "Decoding binary - basics [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8930/decoding-binary-basics",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/8930/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2015-05-21 11:42:48Z\">9 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8930/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm trying to decode this binary file which is from a cache.  All I want is the playlist metadata.  I am getting some of it using a simple hex viewer, but the majority of the information is random ascii.  Is this because there is a bit offset that isn't being accounted for?  Or is there something more complicated going on such as hashing or encryption?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "9k",
    "tags": [
        "binary-analysis",
        "hex",
        "binary"
    ],
    "user": "davis",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\"><i>All</i> of that pastebin is 'random ASCII' (but limited to the range <code>0-9A-F</code>). If you want someone to take a serious look, provide a binary version -- it's not clear if this data dump is word swapped or not. What makes you think of a 'bit offset', hashing, or encryption here? It's common for a binary file to contain information in <i>binary</i>.</span>",
            "time": null
        },
        {
            "user": "davis",
            "text": "<span class=\"comment-copy\">@Jongware <a href=\"http://pastebin.com/NvXFD4vL\" rel=\"nofollow noreferrer\">Here is the binary</a>, any idea how to get started figuring out what the other information is?  I would expect timestamps and song lengths for each record.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Converted to binary with <a href=\"http://www.sweetscape.com/010editor/\" rel=\"nofollow\">010 Editor</a>, extracted the strings with <a href=\"https://technet.microsoft.com/en-us/sysinternals/bb897439.aspx\" rel=\"nofollow\">Strings</a>, and used some clever regex work with <a href=\"https://notepad-plus-plus.org/\" rel=\"nofollow\">Notepad++</a> to remove some obvious bad strings. Results below.</p>\n<pre><code>free\npremium\nshuffle\nall\ncommercial\neverywhere\nFetty Wap\nWiz Khalifa\nSKE\nCharlie Puth\nT-Wayne\nMajor Lazer\nDJ Snake\nDJ Snake\nJason Derulo\nJack \nSkrillex\nCbc\nDiplo\nJustin Bieber\nWalk the Moon\nThe Weeknd\nFlo Rida\nSage The Gemini\nLookasx\nMark Ronson\nBruno Mars\nSna\nDavid Guetta\nAfrojack\nNicki Minaj\nEllie Goulding\nSrl\nVarious Artistsx\nRihanna\nNatalie La Rose\nJeremih\nEd Sheeran\nTove Lo\nDrake\nFifth Harmony\nKid Ink\nXMS\nOmarion\nChris Brown\nAlunaGeorge\nOMI\nPitbull\nParson James\nAndy Grammer\nKanye West\nPaul McCartney\nHozier\ndoon\nLil Wayne\nMeghan Trainor\nAriana Grande\nUsher\nJuicy J\nSam Smith\nJohn Legend\nZedd\nSelena Gomez\nRae Sremmurd\nYoung Thug\nBig Sean\nTrey Songz\nAAC\nFall Out Boy\nTheophilus London\nAllan Kingdom\nKendrick Lamar\nSia\nDeorro\nVance Joy\nTrap Queen\nNasty Freestyle\nPeace Is The Mission\nWant To Want Me\nTALKING IS HARD\nMY HOUSE\nUptown Special\nLove Me Like You Do\nYAP\nBitch Better Have My Money\nBitch Better Have My Money\nSomebody\nQueen Of The Clouds\nQueen Of The Clouds\nSex Playlist\nYou Know You Like It\nYou Know You Like It\nCheerleader\nGlobalization\nStole the Show\nMagazines Or Novels\nFourFiveSeconds\nFourFiveSeconds\nAAJ\nHozier\nTruffle Butter\nLay Me Down\nI Want You To Know\nI Want You To Know\nSremmLife\nDark Sky Paradise\nSlow Motion\nAll Day\nTo Pimp A Butterfly\nIn The Lonely Hour\nAmerican Oxygen\nAmerican Oxygen\nFive More Hours\nDream Your Life Away\nTrap Queen\nNasty Freestyle\nWant To Want Me\nShut Up and Dance\nUptown Funk\nSugar\nBitch Better Have My Money\nYAP\nBitch Better Have My Money\nSomebody\nThinking Out Loud\nTalking Body\nTalking Body\nKnow Yourself\nWorth It\nYou Know You Like It\nYou Know You Like It\nTime of Our Lives\nStole the Show\nNPT\nFourFiveSeconds\nFourFiveSeconds\nTake Me To Church\nTake Me To Church\nAyo\nEnergy\nTruffle Butter\nDear Future Husband\nOne Last Time\nLib\nOne Last Time\nLay Me Down\nI Want You To Know\nI Want You To Know\nThrow Sum Mo\nSlow Motion\nLegend\nCenturies\nCenturies\nAll Day\nKing Kunta\nElastic Heart\nStay With Me\nStay With Me\nAmerican Oxygen\nAmerican Oxygen\nRiptide\nBlessings\nTop Tracks in The United States\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "May 19, 2015 at 14:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "davis",
                    "text": "<span class=\"comment-copy\">Awesome, thanks so much.  I would have expected there to be some song lengths and timestamps associated with each record, any advice for recovering that information?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Yes; reverse engineer the Spotify client to determine how it parses the binary file.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One of the close reasons on Reverse Engineering is:</p>\n<blockquote>\n<p>Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.</p>\n</blockquote>\n<p>... and you don't appear to understand the \"concepts involved\". This is because I asked for a \"binary\", and you posted a paste bin link that starts like this:</p>\n<pre><code>00000000 11011010 11110111 11101111 00101111 01001100 00000000 11011010 11110111 11101111 00101111 00110000 11010011 10101010 00000001 00001001\n00000100 01100110 01110010 01100101 01100101 00000001 00000111 01110000 01110010 01100101 01101101 01101001 01110101 01101101 00000001 00000111\n(1998 similar lines omitted)\n</code></pre>\n<p>A 'binary', in the context of Reverse Engineering, is an <em>original file</em>. As it is in binary, before you can parse it, you have to know the exact file format, which seems to be not documented. A cursory search for the first few bytes lead to nothing (if they <em>were</em> known, they could indicate a <a href=\"https://reverseengineering.stackexchange.com/questions/6012/is-the-magic-number-important\">magic number</a> for this particular file type).</p>\n<p>But all is not lost yet. After converting the (*cough*) binary to a real file again and inspecting it with <a href=\"http://www.suavetech.com/0xed/\" rel=\"nofollow noreferrer\">a simple hex viewer</a>, I noticed plain text strings, where the byte immediately before it indicated the length of that text string. Further examination - looking at the values immediately <em>following</em> the text strings - indicated there is at least a single other byte <em>before</em> the length/data sequences. Not all data are plain text, but that was enough to quickly make up a C program and display what could be read.</p>\n<p>All the program initially did was read two bytes, show them, and then display <em>n</em> characters that immediately follow. I let the program start at a 'reasonable' position, further up in the file, because the first few entries did not seem to follow the exact same format.</p>\n<p>This was okay for the very first entry (I got a few lines of data <em>and</em> a text string), but right after that it got lost and didn't display anything useful. Careful examination of the 'failure point' showed that at least one value was special: hex <code>78</code>, followed by another number, did not indicate that the second number was a data length. So I treated that as a special case: 'no data', and looped on with the rest.</p>\n<p>For the first 65 entries this went okay-ish: a regular list of raw data, text string, followed by 4 other lists of raw data. Only after that, the same problem appeared again: the list went 'out of sync' and displayed gibberish again. Further examination showed another problematic type byte: <code>08</code>. This seems to have <em>two</em> bytes of fixed data. When I treated that as a special case as well, I got loads more useful output.</p>\n<p>At that point I stopped, because the general idea was clear. I found it not worth looking further into what the 'raw' data bytes mean, because they do not clearly indicate 'time stamps' or 'song lengths'. The first set of 16 bytes may indicate a hash or an encryption key; the 4 other sets, all 20 bytes, could be the data you are looking for - but they are not in a regular format.</p>\n<p>I skipped the first 70 or so bytes because I did not immediately could see what they were for – I strongly suspect they contain metadata about the list itself (its number of entries, for example).</p>\n<p>Note that the 'text strings' are encoded using UTF8. The 'unknown' characters in</p>\n<pre><code>\"Skrillex and Diplo present Jack [c3][9c]\"\n</code></pre>\n<p>is actually a regular encoding of \"Jack Ü\", which is \"an American DJ duo, side group and collaborative project\" (<a href=\"http://en.wikipedia.org/wiki/Jack_%C3%9C\" rel=\"nofollow noreferrer\">source</a>). Recognizing 'regular' data sequences such as these is an acquired skill (and verifying that the interpretation is valid is plain common sense; it is only a quick Wikipedia lookup).</p>\n<p>Without further a-do, I wrote up the following C program in less time than it took to write this post.</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main (void)\n{\n    FILE *f = fopen (\"spotify.bin\", \"rb\");\n    int i,type,len;\n\n    if (!f)\n    {\n        printf (\"no file?\\n\");\n        return 0;\n    }\n\n    fseek (f, 0x45, SEEK_SET);\n\n    do\n    {\n        type = fgetc(f);\n        if (type == EOF)\n            break;\n        type &amp;= 0xff;\n        len = fgetc(f) &amp; 0xff;\n\n        printf (\"type %02X len %02X: \", type, len);\n        switch (type)\n        {\n            case 0x08:\n                i = fgetc(f);\n                printf (\" %02X\", i &amp; 0xff);\n                printf (\"\\n\");\n                break;\n            case 9:\n                printf (\"\\\"\");\n                while (len--)\n                {\n                    i = fgetc(f);\n                    if (i &gt;= ' ' &amp;&amp; i &lt;= '~')\n                        putchar (i);\n                    else\n                        printf (\"[%02x]\", i &amp; 0xff);\n                }\n                printf (\"\\\"\\n\");\n                break;\n            case 0x78:\n                printf (\"\\n\");\n                break;\n            default:\n                while (len--)\n                {\n                    i = fgetc(f);\n                    printf (\" %02X\", i &amp; 0xff);\n                }\n                printf (\"\\n\");\n        }\n    } while (1);\n\n    return 0;\n}\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}