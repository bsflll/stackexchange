{
    "title": "Object references representation in pseudocode",
    "link": "https://reverseengineering.stackexchange.com/questions/17485/object-references-representation-in-pseudocode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand how function calls are represented in Hex Rays' pseudocode, especially if the call expects pointers to objects.</p>\n<p>Let's say I'm looking at a line of code in a function called <em>MyObject1::Start()</em>:</p>\n<p><code>MyObject2::doSomething(*((_DWORD *)this + 38), (char *)this + 104);</code></p>\n<p>Does this mean, it calls the function <em>doSomething</em> of <em>MyObject2</em> and passes two references to members of <em>MyObject1</em> as arguments?</p>\n<p>If that's the case, how can I identify these passed members? E.g. what's meant by \"this + 38\"?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "159",
    "tags": [
        "ida",
        "decompilation",
        "c++"
    ],
    "user": "oxident",
    "time": "Feb 17, 2018 at 8:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>this+38 and this+104 are most likely data members of the current object.</p>\n<p>You can figure out what they mean by looking up the context in which they are used.<br/>\nTake this code for example</p>\n<pre><code>int a;\nfor(int i = 0;i &lt; strlen(this+38); i++){\n   if((this+38)[i] == 'a'){\n      a++\n   }\n}\n</code></pre>\n<p>To figure out what's a, you need to see in what context it is used. Here you can clearly see that a is being incremented every time the character 'a' appears in (this+38), from that you can infer that (this+38) is a char array and that a variable counts how many 'a' appear in this+38 (string)</p>\n</div>",
            "votes": "2",
            "user": "NotGI",
            "time": "Feb 17, 2018 at 11:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "oxident",
                    "text": "<span class=\"comment-copy\">Thanks for explaining. I'm wondering if there's a way to figure out the actual identity of these data members. Don't they get initialized in the object's constructor?</span>",
                    "time": null
                },
                {
                    "user": "NotGI",
                    "text": "<span class=\"comment-copy\">What do you mean identity? their name cannot be found unless it is included in the binary. most of that type of data (names, function args) is stripped away once you compile.</span>",
                    "time": null
                },
                {
                    "user": "oxident",
                    "text": "<span class=\"comment-copy\">Okay, but then I can at least assume that \"this+38\" is the same across all members of the class, can't I?</span>",
                    "time": null
                },
                {
                    "user": "NotGI",
                    "text": "<span class=\"comment-copy\">You can assume given that it's object of the same class. IDA has a structures tab where you can define structures and it'll make reversing a lot easier for you.</span>",
                    "time": null
                }
            ]
        }
    ]
}