{
    "title": "LDR specifier combination UXTW",
    "link": "https://reverseengineering.stackexchange.com/questions/22962/ldr-specifier-combination-uxtw",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorry, if this question seems stupid, but I am new in arm64 and next 2 assembly lines seriously damaged my brain:</p>\n<pre><code>LDR             W0, [X30,W0,UXTW#2]\nADD             X30, X30, W0,UXTW\n</code></pre>\n<p>I have readed <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0802a/LDR_imm_fpsimd.html\" rel=\"nofollow noreferrer\">docs</a>, used google with different keywords, but it seems like everything connected to assembly is written by machines to machines..</p>\n<p>I understood that it patches return address of subroutine, but what <code>UTXW#2</code> is and how does it affect on <code>LDR</code> is hard to undertand.</p>\n<p>Could somebody explain me \"magic\" which happens in this 2 lines?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly",
        "arm",
        "arm64"
    ],
    "user": "Olvin Roght",
    "time": "Jan 10, 2020 at 16:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not Sure i selected uxtw in this post Right Clicked and Search Google For UXTW<br/>\nthe First Hit is <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0802a/SUB_addsub_ext.html\" rel=\"nofollow noreferrer\">Arm Documentation</a></p>\n<pre><code>SUB  Wd|WSP, Wn|WSP, Wm{, extend {#amount}} ; 32-bit general registers\n\nSUB  Xd|SP, Xn|SP, Rm{, extend {#amount}}  ; 64-bit general registers\n\nextend\n\n    Is the extension to be applied to the second source operand:  \n\n    32-bit general registers \n\n        Can be one of UXTB, UXTH, LSL|UXTW, UXTX, SXTB, SXTH, SXTW or SXTX.\n\n        If Rd or Rn is WSP then LSL is preferred rather than UXTW,  \nand can be omitted when amount is 0. \nIn all other cases extend is required and must be UXTW rather than LSL.\n\n    64-bit general registers\n\n        Can be one of UXTB, UXTH, UXTW, LSL|UXTX, SXTB, SXTH, SXTW or SXTX.\n\n        If Rd or Rn is SP then LSL is preferred rather than UXTX,  \nand can be omitted when amount is 0.    \nIn all other cases extend is required and must be UXTX rather than LSL.\n</code></pre>\n<p>sxtw is signed extend word 8000-&gt;ffff8000<br/>\nuxtw isunsigned extend word 8000-&gt;00008000   </p>\n<p><a href=\"https://thinkingeek.com/2016/10/23/exploring-aarch64-assembler-chapter-3/\" rel=\"nofollow noreferrer\">quoting from another relevent hit</a> </p>\n<blockquote>\n<p>Extending operators</p>\n<p>Extending operators main purpose is to widen a narrower value found in\n  a register to match the number of bits for the operation. An extending\n  operator is of the form kxtw, where k is the kind of integer we want\n  to widen and w is the width of the narrow value. For the former, the\n  kind of integer can be U (unsigned) or S (signed, i.e. two’s\n  complement). For the latter the width can be B, H or W which means\n  respectively byte (least 8 significant bits of the register),\n  half-word (least 16 significant bits of the register) or word (least\n  significant 32 bits of the register).</p>\n<p>This means that the extending operators are uxtb, sxtb, uxth, sxth,\n  uxtw, sxtw.</p>\n<p>These operators exist because sometimes we have to lift the range of\n  the source value from a smaller bit width to a bigger one. In later\n  chapters we will see many cases where this happens. For instance, it\n  may happen that we need to add a 32-bit register to a 64-bit register.\n  If both registers represent two’s complement integers then</p>\n<p>add x0, x1, w2, sxtw  // x0 ← x1 + ExtendSigned32To64(w2)</p>\n<p>There is some kind of context that has to be taken into account when\n  using these extension operators. For instance, the two instructions\n  below have slight different meanings:</p>\n<p>add x0, x1, w2, sxtb // x0 ← x1 + ExtendSigned8To64(w2) add w0, w1,\n  w2, sxtb // w0 ← w1 + ExtendSigned8To32(w2)</p>\n<p>In both cases the least significant 8 bits of w2 are extended but in\n  the first case they are extended to 64 bit and in the second case to\n  32-bit. Extension and shift</p>\n<p>It is possible to extend a value and then shift it left 1, 2, 3 or 4\n  bits by specifying an amount after the extension operator. For\n  instance</p>\n<p>mov x0, #0                // x0 ← 0 mov x1, #0x1234           // x0 ←\n  0x1234 add x2, x0, x1, sxtw #1   // x2 ← x0 + (ExtendSigned16To64(x1)\n  &lt;&lt; 1)\n                            // this sets x2 to 0x2468 add x2, x0, x1, sxtw #2   // x2 ← x0 + (ExtendSigned16To64(x1) &lt;&lt; 2)\n                            // this sets x2 to 0x48d0 add x2, x0, x1, sxtw #3   // x2 ← x0 + (ExtendSigned16To64(x1) &lt;&lt; 3)\n                            // this sets x2 to 0x91a0 add x2, x0, x1, sxtw #4   // x2 ← x0 + (ExtendSigned16To64(x1) &lt;&lt; 4)\n                            // this sets x2 to 0x12340</p>\n<p>This may seem a bit odd and arbitrary at this point but in later\n  chapters we will see that this is actually useful in many cases.</p>\n<p>This is all for today.</p>\n</blockquote>\n<p>here is a sample unicorn python emulation</p>\n<pre><code>#code modified from unicorn sample\nfrom __future__ import print_function\nfrom unicorn import *\nfrom unicorn.arm64_const import *\nprint (\n\"Register X30 on start = 0x10\\n\"\n\"Register W0  on start = 0x02\\n\"\n\"Emulate 5 ARM64 instructions that follows\\n\"\n\"ADD X30, X30, W0,UXTW#0\\n\"\n\"ADD X30, X30, W0,UXTW#1\\n\"\n\"ADD X30, X30, W0,UXTW#2\\n\"\n\"ADD X30, X30, W0,UXTW#3\\n\"\n\"ADD X30, X30, W0,UXTW#4\\n\"\n\"Register X30 on end = 0x10+0x2+0x4+0x8+0x10+0x20 == 0x4e\"\n)\nCODE =  b\"\\xDE\\x43\\x20\\x8B\\xDE\\x47\\x20\\x8B\\xDE\\x4b\\x20\\x8B\\xDE\\x4f\\x20\\x8B\\xDE\\x53\\x20\\x8B\"\nADDRESS    = 0x10000\ndef test_arm64():\n    try:\n        mu = Uc(UC_ARCH_ARM64, UC_MODE_ARM)\n        mu.mem_map(ADDRESS, 2 * 1024 * 1024)\n        mu.mem_write(ADDRESS, CODE)\n        mu.reg_write(UC_ARM64_REG_X30, 0x10)\n        mu.reg_write(UC_ARM64_REG_W0, 2)\n        for i in range (ADDRESS,ADDRESS + len(CODE),4):\n            mu.emu_start(i, i + 4)\n            x30 = mu.reg_read(UC_ARM64_REG_X30)\n            w0  =  mu.reg_read(UC_ARM64_REG_W0) \n            print(\"&gt;&gt;&gt; x30  = 0x%x w0 = 0x%x\" %(x30,w0))\n    except UcError as e:\n        print(\"ERROR: %s\" % e)\n\nif __name__ == '__main__':\n    test_arm64()\n</code></pre>\n<p>emulation results</p>\n<pre><code>:\\&gt;python uniaarch64.py\nRegister X30 on start = 0x10\nRegister W0  on start = 0x02\nEmulate 5 ARM64 instructions that follows\nADD X30, X30, W0,UXTW#0\nADD X30, X30, W0,UXTW#1\nADD X30, X30, W0,UXTW#2\nADD X30, X30, W0,UXTW#3\nADD X30, X30, W0,UXTW#4\nRegister X30 on end = 0x10+0x2+0x4+0x8+0x10+0x20 == 0x4e\n&gt;&gt;&gt; x30  = 0x12 w0 = 0x2\n&gt;&gt;&gt; x30  = 0x16 w0 = 0x2\n&gt;&gt;&gt; x30  = 0x1e w0 = 0x2\n&gt;&gt;&gt; x30  = 0x2e w0 = 0x2\n&gt;&gt;&gt; x30  = 0x4e w0 = 0x2\n</code></pre>\n<p>when you start with -0x2 in W0 see the extended results</p>\n<pre><code>&gt;&gt;&gt; x30  = 0x10000000e w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0x30000000a w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0x700000002 w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0xefffffff2 w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0x1effffffd2 w0 = 0xfffffffe\n</code></pre>\n<p>SXTW and -2</p>\n<pre><code>&gt;&gt;&gt; x30  = 0xe w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0xa w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0x2 w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0xfffffffffffffff2 w0 = 0xfffffffe\n&gt;&gt;&gt; x30  = 0xfffffffffffffff0 w0 = 0xfffffffe\n</code></pre>\n<p>SXTW and 2</p>\n<pre><code>&gt;&gt;&gt; x30  = 0x12 w0 = 0x2\n&gt;&gt;&gt; x30  = 0x16 w0 = 0x2\n&gt;&gt;&gt; x30  = 0x1e w0 = 0x2\n&gt;&gt;&gt; x30  = 0x2e w0 = 0x2\n&gt;&gt;&gt; x30  = 0x30 w0 = 0x2\n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Jan 10, 2020 at 21:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Olvin Roght",
                    "text": "<span class=\"comment-copy\">Yes, I have provided link to this docs in my question. But I can't find there explanation what <code>UTXW#2</code> means. Could you point me?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">it is not utxw it is uxtw == unsigned extend word it is x86 equivalent of MOVZX read the quoted part or follow the link provided</span>",
                    "time": null
                },
                {
                    "user": "Olvin Roght",
                    "text": "<span class=\"comment-copy\">I have copied code from IDA =/</span>",
                    "time": null
                },
                {
                    "user": "Olvin Roght",
                    "text": "<span class=\"comment-copy\">I would prefer to sleep instead.. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">added an emulation of Add instruction take a look</span>",
                    "time": null
                }
            ]
        }
    ]
}