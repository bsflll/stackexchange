{
    "title": "Use of Sleep() function (twice)",
    "link": "https://reverseengineering.stackexchange.com/questions/7997/use-of-sleep-function-twice",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>during an analysis, I have found the following :</p>\n<pre><code>  ...\n  call program.00401535\n  ...\n  (a few lines later)\n  ...\n  ...\n  call program.00401535\n  ...\n  ...\n</code></pre>\n<p>So, it call the same function. When I step over that first call, nothing happens. But later, when I step over the second call, suddenly I get the message \"000004C0 terminated, exit code 0\" and ollydbg is running, running...and running.\nSo, I have decided to look into that function and I see the following:</p>\n<pre><code>                    PUSH EBP\n                    MOV EBP, ESP\n 00401538           PUSH 1000\n     |              CALL DWORD PTR DS:[40241C]    ; which is kernel32.Sleep\n     -------------- JMP  SHORT program.00401538\n                    LEAVE \n                    RETN\n</code></pre>\n<p>So, it is simple what it is doing here. Since we have unconditional jump, it always lets the program sleep for a while. In other words, that function should never return.</p>\n<p><strong>But my question would be:</strong>\nWhy it was possible for me to step over the first call, and not over the second ?\nI googled for Sleep() as anti-debugging trick but I did not find anything about that. \nCan somebody tell me what can I do in such a case?</p>\n<p>best regards,</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Dec 16, 2015 at 17:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are you sure the contents of DS:[40241C] haven't been changed between the first and the second call? Maybe it's not the sleep function called at all, at the first time.</p>\n<p>Something like</p>\n<pre><code>....\nfptr=generateException;\nExceptionReturnOrEndleesLoop();\nif (shenanigans) {\n    fptr=sleep;\n    ExceptionReturnOrEndlessLoop();\n}\n\nExceptionReturnOrEndlessLoop() {\n    for (;;) {\n        try {\n            (*fptr);\n        } catch  (someexception Ex) {\n            return;\n        }\n    }\n}\n</code></pre>\n<p>Or even, have the function pointer refer <code>sleep()</code> all the time, but create a second thread that waits for exactly 500 ms, then interrupts the main thread (and the sleep, thus causing an exception). If you're singlestepping, the interrupt will occur before the sleep() gets executed, and the exception handler won't ever get executed.</p>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jan 11, 2015 at 17:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">To start digging, you can break on <code>TerminateProcess</code>, <code>TerminateThread</code> and analyse the stack. This will help to find what thread/code is responsible to nock you out.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a possible scenario in a multithreaded application. Here the anti-debugging check is run in a dedicated thread. When the main thread calls <code>Sleep</code>, it means that it is giving up cpu-time so that the other thread have higher chances to execute.</p>\n<p>To debug such an application in Ollydbg, look in the threads Window. If you find another thread running, you need to analyze it too.</p>\n</div>",
            "votes": "0",
            "user": "0xec",
            "time": "Jan 11, 2015 at 17:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Just to add to the above, in <code>Options-&gt;Debug-&gt;Events</code> menu, you can ask to break on every new thread to ensure that you will not miss anything. You will likely to do it in several inebriations to find the \"bad\" thread.</span>",
                    "time": null
                }
            ]
        }
    ]
}