{
    "title": "How to load mixed assemblies into IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/32923/how-to-load-mixed-assemblies-into-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When loading a DLL that uses the CLR (.NET runtime) <em>and</em> contains native code, IDA (as of 8.4) will always prefer to load it as \"Microsoft.Net assembly\" with processor type \"Microsoft Visual Studio.Net\" (cli).</p>\n<p>Now that's not entirely wrong, but for a mixed assembly it's off mark. Aside from manually loading as \"Portable executable for AMD64 (PE)\" with \"MetaPC\" as the processor type) what options do I have to have IDA help me make sense of the managed and unmanaged parts of such an assembly?</p>\n<p>Many DLLs created with C++/CLI are mixed assemblies.</p>\n<p>PS: \"assembly\" in this question refers to the .NET/CLR concept, not to the assembly language.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "112",
    "tags": [
        "ida",
        "dotnet-clr"
    ],
    "user": "0xC0000022L",
    "time": "Apr 29, 2024 at 8:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although that wouldn't necessarily be a perfect solution to your problem, you could dump the native code from the ida database and open it in a separate ida database and loading as \"Portable executable for AMD64 (PE)\" with \"MetaPC\" as the processor type as you wanted.</p>\n</div>",
            "votes": "1",
            "user": "rotem.salinas",
            "time": "May 5, 2024 at 10:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}