{
    "title": "ELF - Why does objdump provide a wrong byte value in the .got?",
    "link": "https://reverseengineering.stackexchange.com/questions/32174/elf-why-does-objdump-provide-a-wrong-byte-value-in-the-got",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I seriously can't tell if I'm misunderstanding something grossly or if this is a bug in objdump. Newbie alert.</p>\n<pre><code>$ objdump -s --start-address=0x3fc0 --stop-address=0x3fc1 test\n\ntest:     file format elf64-x86-64\n\nContents of section .got:\n 3fc0 00        \n                           .               \n$ xxd -s 0x3fc0 -l 1 test\n00003fc0: 50                                       P\n</code></pre>\n<p>Looking at the file with kaitai I was able to confirm that objdump is the incorrect one. This doesn't happen merely with this byte: a lot of others in the <code>.got</code> are wrong. However, the <code>.text</code> section is completely correct.</p>\n<p>It also doesn't happen only with these flags: doing <code>objdump -d -s test | less</code> shows the same bytes wrong in the same place.</p>\n<p>I'm willing to provide the binary: it is a simple <code>printf</code> for me to play with.</p>\n<p>Edit: Here is the full contents from the <code>.got</code>, obtained with <code>objdump -d -s test | less</code></p>\n<pre><code>Contents of section .got:\n 3fb0 c03d0000 00000000 00000000 00000000  .=..............\n 3fc0 00000000 00000000 30100000 00000000  ........0.......\n 3fd0 40100000 00000000 00000000 00000000  @...............\n 3fe0 00000000 00000000 00000000 00000000  ................\n 3ff0 00000000 00000000 00000000 00000000  ................\n</code></pre>\n<p>And here are the bytes at the same offset, as obtained from xxd:</p>\n<pre><code>xxd -s 0x3fb0 -l 0x50 test\n00003fb0: b03f 0000 0000 0000 b02f 0000 0000 0000  .?......./......\n00003fc0: 5000 0000 0000 0000 0000 0000 0000 0000  P...............\n00003fd0: 0800 0000 0000 0000 0800 0000 0000 0000  ................\n00003fe0: 0601 0000 0100 0000 0300 0000 0000 0000  ................\n00003ff0: 0040 0000 0000 0000 0030 0000 0000 0000  <a class=\"__cf_email__\" data-cfemail=\"a987e98787878787878799\" href=\"/cdn-cgi/l/email-protection\">[emailÂ protected]</a>......\n</code></pre>\n<p>Why are the values different?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "111",
    "tags": [
        "decompilation",
        "c",
        "elf",
        "x86-64",
        "objdump"
    ],
    "user": "chilliefiber",
    "time": "Aug 16, 2023 at 21:13",
    "comments": [
        {
            "user": "chilliefiber",
            "text": "<span class=\"comment-copy\">I guess a better way to phrase the question is: am I using the commands wrong, and inadvertently looking at the byte value at an offset that is not 0x3fc0 when using objdump, or is this really an error in objdump?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When a ELF binary is loaded each one of its sections is loaded to a Virtual Memory Address which is different than its raw offset on disk.</p>\n<p>Now, objdump shows the contents of the __got's as if it was mapped to it's virtual memory address in 0x3fc0.</p>\n<p>However, xxd would show the contents of the same address on raw disk (not mapped).</p>\n<p>You could check what is the Virtual Memory Address (VMA) of the __got by using \"objdump --section-headers test\".</p>\n<p>Also the --start-address and --end-address switches/flags are only used for disassembling, print relocations, and print symbols according to the documentation (if I understood correctly)</p>\n</div>",
            "votes": "1",
            "user": "rotem.salinas",
            "time": "Aug 17, 2023 at 3:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}