{
    "title": "Symbols visible in EXE file without PDB",
    "link": "https://reverseengineering.stackexchange.com/questions/14122/symbols-visible-in-exe-file-without-pdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I imported my exe file in OllyDB and when I searched for the names(labels) present, I was able to see all the function declarations, class names etc. I didn't have my PDB in the EXE path. Why does this occur? Should I enable some obfuscation settings during my build?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "570",
    "tags": [
        "symbols",
        "debugging-symbols",
        "pdb"
    ],
    "user": "Kaushik Ramachandran",
    "time": "Dec 8, 2016 at 20:22",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">Was the .pdb in the search path?</span>",
            "time": null
        },
        {
            "user": "Kaushik Ramachandran",
            "text": "<span class=\"comment-copy\">No, the PDB was not in the search path.</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Are you using RTTI ?</span>",
            "time": null
        },
        {
            "user": "Kaushik Ramachandran",
            "text": "<span class=\"comment-copy\">Yes,  I have used dynamic_cast&lt;&gt; in my code. But is that an issue?</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Yes, it is probably the issue and definitely should be at least part of it. Would you post some examples of suspicious strings that you see in the code ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>dynamic_cast</code> requires a <a href=\"http://en.cppreference.com/w/cpp/language/dynamic_cast\" rel=\"noreferrer\">runtime check that the cast is valid at execution time</a> and the usual implementation uses <a href=\"https://en.wikipedia.org/wiki/Run-time_type_information\" rel=\"noreferrer\">RTTI (Run-time type information)</a> attached to all classes participating in the casts. However, since it's not easy to narrow down the classes that may be possibly casted, in practice the compiler emits RTTI for <em>all</em> polymorphic classes (i.e. those that have virtual methods). While the RTTI details are not specified by the C++ standard, the Visual C++ implementation retains full class names. You can find more details in <a href=\"http://www.openrce.org/articles/full_view/23\" rel=\"noreferrer\">my article on the topic</a>.</p>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Dec 8, 2016 at 20:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}