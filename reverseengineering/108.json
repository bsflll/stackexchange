{
    "title": "AMD64 compiler optimizations with register manipulations",
    "link": "https://reverseengineering.stackexchange.com/questions/108/amd64-compiler-optimizations-with-register-manipulations",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>AMD64 (aka x86-64 or x64) registers can be accessed 8, 16, 32 or 64 bits at a time. When reading a disassembly listing, what register operations are not straightforward?</p>\n<p>For example, when an instruction accesses part of a register, how does it affect other parts?</p>\n<p>What typical instructions or sequences of instructions used by optimizers might encode something that isn't obvious (e.g. xoring a register with itself to set it to zero)?</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "185",
    "tags": [
        "disassembly",
        "amd64"
    ],
    "user": "Modoc",
    "time": "Mar 22, 2013 at 21:39",
    "comments": [
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<span class=\"comment-copy\">This question is far too broad. It will lead to a list of anecdotes rather than full answers. It should be far more focused, at the very least restricted to a particular topic and preferably to a particular compiler or platform (e.g. stack manipulations in Visual C++). Because there has already been <a href=\"http://reverseengineering.stackexchange.com/a/111\">one answer</a>, I've proposed an edit that focuses on that answer's topic: register manipulations.</span>",
            "time": null
        },
        {
            "user": "Modoc",
            "text": "<span class=\"comment-copy\">Thanks for the edit @Gilles. I knew the question was too broad when I asked it but I couldn't rephrase it in a way that still communicated what I wanted.</span>",
            "time": null
        },
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "<span class=\"comment-copy\">I hope the question still approaches what you're interested it. I do encourage you to ask a separate question about stack manipulations with VC++, I'd have edited this question to focus on that but I thought it would me more useful to accommodate the existing answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not really an optimization, but one gotcha that you must be aware of when coming from x86 is this:</p>\n<h3>Any operation on a 32-bit register zeroes out the top half of the 64-bit one</h3>\n<p>For example, the following:</p>\n<pre><code>mov eax, 3\n</code></pre>\n<p>Is actually equivalent to:</p>\n<pre><code>mov rax, 3\n</code></pre>\n<p>This also applies to the new registers <code>r8</code>-<code>r15</code>, e.g.:</p>\n<pre><code>inc r8d\n</code></pre>\n<p>also zeroes out the top half of <code>r8</code>.</p>\n<p><em>However</em>, the 8-bit and 16-bit portions of registers do not work like that, i.e. operations on them modify only that part of the register.</p>\n</div>",
            "votes": "11",
            "user": "Igor Skochinsky",
            "time": "Mar 21, 2013 at 3:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}