{
    "title": "Writing a file with radare2 `w`?",
    "link": "https://reverseengineering.stackexchange.com/questions/19882/writing-a-file-with-radare2-w",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Radare2 supports a <code>w</code> which writes a string.</p>\n<pre><code>w foobar             write string 'foobar'\n</code></pre>\n<p>However, it doesn't seem to work for me,</p>\n<pre><code>$ touch foo\n\n$ radare2 ./foo\nw foobar\n</code></pre>\n<p>The file <code>foo</code> remains empty. Am I supposed to flush or save?</p>\n</div>",
    "votes": "5",
    "answers": 3,
    "views": "6k",
    "tags": [
        "radare2"
    ],
    "user": "Evan Carroll",
    "time": "Apr 16, 2019 at 1:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>TLDR</h2>\n<ul>\n<li><code>radare2</code> opens a file in <em><code>read-only mode</code> by default</em>. (see the manual <code>r2 -h</code> for further information.)</li>\n<li>to allow <em>writing to a file</em>, start radare2 in <code>write mode</code> (<code>r2 -w file</code>).</li>\n<li>when in a <code>read-only session</code> already, <code>oo+</code> will <em>re-open the file</em> in <code>write</code> mode.</li>\n<li>the <code>cache mode</code> (<code>e io.cache=true</code>) mimics writing access but <em>changes in radare2 are not actually written to disk</em>.</li>\n</ul>\n<h2>Write Mode - Example</h2>\n<hr/>\n<ol>\n<li>Open the file <code>foo</code> in <code>write mode</code>:\n<pre><code>$ r2 -w foo\n</code></pre>\n</li>\n</ol>\n<hr/>\n<ol start=\"2\">\n<li>Print 32 bytes (with <code>px 32</code>):\n<pre><code>[0x00000000]&gt; px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n</li>\n</ol>\n<p>Note: The first 32 bytes (and the rest of the file) are empty.</p>\n<hr/>\n<ol start=\"3\">\n<li><p>Let's write \"Hello World!\" into the file:</p>\n<pre><code>[0x00000000]&gt; w Hello World!\n</code></pre>\n</li>\n<li><p>And print the 32 bytes again:</p>\n<pre><code>[0x00000000]&gt; px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 576f 726c 6421 ffff ffff  Hello World!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n</li>\n</ol>\n<p>Great! Now we can see that \"Hello World!\" is written to the file.</p>\n<hr/>\n<ol start=\"5\">\n<li>Let's quit radare2 and <code>cat</code> the file to see the content:\n<pre><code> [0x00000000]&gt; q\n</code></pre>\n<pre><code>$ cat foo\nHello World!\n</code></pre>\n</li>\n</ol>\n<hr/>\n<h2>Cache Mode - Example</h2>\n<ol>\n<li>Open the file <code>foo</code> in write mode:\n<pre><code>$ r2 foo\n</code></pre>\n</li>\n<li>Print the first 32 bytes@\n<pre><code>[0x00000000]&gt; px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 576f 726c 6421 ffff ffff  Hello World!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n</li>\n<li>Activate 'cache mode`:\n<pre><code>[0x00000000]&gt; e io.cache=true\n</code></pre>\n</li>\n<li>Make some changes in radare2:\n<pre><code>[0x00000000]&gt; w Goodbyte World! :)\n</code></pre>\n</li>\n<li>Proof that radare2 mimicked writing as if in <code>write mode</code>:\n<pre><code>[0x00000000]&gt; px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  476f 6f64 6279 7465 2057 6f72 6c64 2120  Goodbyte World!\n0x00000010  3a29 ffff ffff ffff ffff ffff ffff ffff  :)..............\n</code></pre>\n</li>\n<li>Quit radare2:\n<pre><code>[0x00000000]&gt; q\n</code></pre>\n</li>\n<li>Examine actual file contents:\n<pre><code>$ cat foo\nHello World!\n</code></pre>\nNote: The file didn't change! That's the effect of <code>cache mode</code>.</li>\n</ol>\n</div>",
            "votes": "7",
            "user": "sudhackar",
            "time": "Nov 10, 2020 at 3:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">What does <code>-w</code> do outside of write mode?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">Well, it allows radare2 to write to the file. i.e modifying the original file. This is risky and should be careful while using it. While working with write-mode you can work regularly with radare2 as you are used to. It doesn't change a thing. Also, please see my edition the the answer -- regardless your comment, I elaborated more :)</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">The follow up question is though what does <code>w foobar</code> do if radare opens the file in read-only mode? Is it just a noop?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">yup. Not doing a thing. I suggest you explore the powers of the <code>w</code> command and subcommands of radare2. I use it on a daily basis - check out <code>w?</code> for commands like <code>wtf</code>, <code>wox</code>, <code>wopD</code>...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just to update @Megabeets answer. </p>\n<p>When you start with an empty file (created by <code>touch</code>), the <code>w</code> command will not work by default even if the <code>r2</code> will be started in <code>write</code> mode. The missing information is, in that case, the mapping</p>\n<pre><code>[0x00000000]&gt; om\n[0x00000000]\n</code></pre>\n<p>Returns an empty result. Apart from listing, the <code>om</code> command can also be used to create the mapping:</p>\n<pre><code>Usage: om[-] [arg]   # map opened files\n| om                                       list all defined IO maps\n...\n| om fd vaddr [size] [paddr] [rwx] [name]  create new io map\n...\n</code></pre>\n<p>In order to do the mapping, one needs to specify (for example) the following command</p>\n<pre><code>[0x00000000]&gt; om 3 0x0 12\n[0x00000000]&gt; om\n 1 fd: 3 +0x00000000 0x00000000 - 0x0000000b rwx\n</code></pre>\n<p>That will create, for the file description 3, a 12 bytes in size mapping starting from an address 0x0. </p>\n<p>After that <code>w</code> will work:</p>\n<pre><code>[0x00000000]&gt; w Hello world!\n[0x00000000]&gt; px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 776f 726c 6421 ffff ffff  Hello world!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n[0x00000000]&gt;\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Nov 18, 2018 at 14:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Create an input/output mapping to allow writing to a non-mapped file</h1>\n<p>To <strong>allow writing</strong> up to <code>64 byte</code> starting at <code>offset 0x00000000</code>, map changes in radare2 <strong>to <code>file descriptor 3</code></strong> (the file opened in radare2).</p>\n<pre><code>[0x00000000]&gt; om 3 0x0 64\n[0x00000000]&gt; om\n1 fd: 3 +0x00000000 0x00000000 - 0x0000000b rwx\n</code></pre>\n<h2>Explanation</h2>\n<p><strong>An empty file</strong> (as created by <code>touch</code>) <strong>has no input/output mappings</strong> (even when opened with in <code>write mode</code>).\nTo confirm no region has been mapped, you can list all defined IO maps with the radare2-command <code>om</code>.)</p>\n<p>To create an i/o-mapping use <code>om</code> with parameters:</p>\n<blockquote>\n<p>om fd vaddr [size] [paddr] [rwx] [name]  create new io map</p>\n</blockquote>\n<h1>Example</h1>\n<pre>radare2 -w test_file\n -- What has been executed cannot be unexecuted\n[0x00000000]&gt; w This won't be written anywhere, because no mapping exists.\n[0x00000000]&gt; om\n[0x00000000]&gt; om 3 0 64\n[0x00000000]&gt; om\n 1 fd: 3 +0x00000000 0x00000000 - 0x0000003f rwx \n[0x00000000]&gt; w Hello World!\n[0x00000000]&gt; V\n</pre>\n<p><a href=\"https://i.sstatic.net/L4ksf.png\" rel=\"nofollow noreferrer\"><img alt=\"hexview of file after mapping and writing\" src=\"https://i.sstatic.net/L4ksf.png\"/></a></p>\n</div>",
            "votes": "0",
            "user": "Semnodime",
            "time": "Nov 9, 2020 at 2:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}