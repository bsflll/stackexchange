{
    "title": "Decoding binary data structure",
    "link": "https://reverseengineering.stackexchange.com/questions/15969/decoding-binary-data-structure",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have these data files that are generated by a tool which was distributed by a company that is long defunct. I have been taking it apart with a binary file viewer (freeware from Proxoft, it is a great tool) and I am close to completion. Here is an image of the PDF generated by the tool from the data file:</p>\n<p><img alt=\"image\" src=\"https://i.sstatic.net/W0oNf.png\"/></p>\n<p>The file contains a 320x320x8bit image, actually there are 4 bytes representing 4 images. The file length is 412900 bytes. There is a header of 3128 bytes, followed by the 320*320*4 byte image data, followed by a 172 byte footer. </p>\n<p>In the header there are human readable strings, followed by mostly zeroes with some non-zero bytes, that clearly have some pattern, which repeats then by another human readable header. This is the (encoded?) data I seek I believe.</p>\n<p>What I am asking here is for some expertise on decoding what appears to be the data I am trying to extract between items in the header and the footer. I have tried big endian, little endian, 1,2,4,8 byte views of the bytes, and I cannot figure it out. If someone can help me figure this out, it would be much appreciated. </p>\n<p>Here are some bytes showing human readable parts (from 3128 byte header), and the spaces in between:</p>\n<pre><code>001072 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ T E R M ◦ ◦ ◦ ◦\n001088 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001104 ◦ ◦ ◦ ◦ ◦ ◦ P I X E L C O U N T\n001120 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001136 ◦ ◦ ◦ ◦ V A L L E Y ◦ ◦ ◦ ◦ ◦ ◦\n001152 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001168 ◦ ◦ P E A K ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001184 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001200 R M S ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001216 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ R A\n001232 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦\n001248 ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ ◦ R S ◦ ◦\n</code></pre>\n<p>Since I have no good way to post the actual data, I have uploaded it remotely:</p>\n<p><a href=\"http://www.rettc.com/binarydecode/\" rel=\"nofollow noreferrer\">http://www.rettc.com/binarydecode/</a></p>\n<p>.mmd is binary file, .pdf is pdf from the software, .bmp is my extracted image data, .png is an image of the pdf.</p>\n<p>So, if anyone can figure out how to decode the data in between the human readable items in the header and footer of this binary file, you will be officially recognized as \"da man!\" or \"da woman!\" by me eternally.</p>\n<p>Thanks for taking a look!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "binary-analysis"
    ],
    "user": "Alex Martin",
    "time": "Jul 31, 2017 at 15:45",
    "comments": [
        {
            "user": "dsasmblr",
            "text": "<span class=\"comment-copy\">Starting at the first character of each readable word, there is exactly 30 (counting in decimal) bytes. If the rest of the bytes aren't filler, then they could be information related to, say, PIXELCOUNT in which subsequent bytes might have that type of information (whatever it may be). Or, subsequent bytes could be pointers to other locations in the file--i.e. you may see bytes 1C 14 which could be little endian for 00141C in the file (that location perhaps holding relevant data to that section). Also, an abundance of 0s can indicate compression of some sort (though probably not in this case).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the header consists of 2280 bytes or 0x8e8 bytes as indicated in the first DIRECTORY</p>\n<p>each of the item is 30 bytes or 0x1e bytes long </p>\n<p>so around 76 items can fit in the header</p>\n<p>each last dword in the item denotes the length of the item</p>\n<p>so DIRECTORY is 0x8e8<br/>\nTITLE is 0x80 \ntime is 0x14</p>\n<p>the header can be dumped with xxd like this </p>\n<pre><code>:\\&gt;xxd -s 0 -g30 -c 30 -l 0x8e8 21SIDEB.MMD\n0000000: 4449524543544f525900460084d846006936430000014b000100e8080000  DIRECTORY.F...F.i6C...K.......\n000001e: 5449544c4500000000000000000000000000000000020100800080000000  TITLE.........................\n000003c: 54494d450000000000000000000000000000000000020100140014000000  TIME..........................\n000005a: 444154450000000000000000000000000000000000020100140014000000  DATE..........................\n0000078: 444154415459504500000000000000000000000000020100140014000000  DATATYPE......................\n0000096: 444151000000000000000000000000000000000000020100140014000000  DAQ...........................\n00000b4: 504843000000000000000000000000000000000000020100140014000000  PHC...........................\n00000d2: 5245434f4e00000000000000000000000000000000020100140014000000  RECON.........................\n00000f0: 4445544d41534b0000000000000000000000000000020100140014000000  DETMASK.......................\n000010e: 5445524d41534b0000000000000000000000000000020100140014000000  TERMASK.......................\n000012c: 4441544d41534b0000000000000000000000000000020100140014000000  DATMASK.......................\n000014a: 52454646494c450000000000000000000000000000020100140014000000  REFFILE.......................\n0000168: 494e535452554d454e540000000000000000000000020100140014000000  INSTRUMENT....................\n0000186: 53455155454e434500000000000000000000000000040100010002000000  SEQUENCE......................\n00001a4: 53455249414c000000000000000000000000000000020100140014000000  SERIAL........................\n00001c2: 504152544944000000000000000000000000000000020100140014000000  PARTID........................\n00001e0: 585354414745000000000000000000000000000000060100010004000000  XSTAGE........................\n00001fe: 595354414745000000000000000000000000000000060100010004000000  YSTAGE........................\n000021c: 5a5354414745000000000000000000000000000000060100010004000000  ZSTAGE........................\n000023a: 544845544153544147450000000000000000000000060100010004000000  THETASTAGE....................\n0000258: 5350454349414c5048415345000000000000000000020100140014000000  SPECIALPHASE..................\n0000276: 5350454349414c4441544100000000000000000000020100140014000000  SPECIALDATA...................\n0000294: 46494c5445524c4142454c00000000000000000000020100140014000000  FILTERLABEL...................\n00002b2: 4d41474c4142454c00000000000000000000000000020100140014000000  MAGLABEL......................\n00002d0: 43414d4552415f4c4142454c000000000000000000020100140014000000  CAMERA_LABEL..................\n00002ee: 545542455f4c4142454c0000000000000000000000020100140014000000  TUBE_LABEL....................\n000030c: 58504958454c000000000000000000000000000000060100010004000000  XPIXEL........................\n000032a: 59504958454c000000000000000000000000000000060100010004000000  YPIXEL........................\n0000348: 5a5343414c45000000000000000000000000000000060100010004000000  ZSCALE........................\n0000366: 4f524947494e580000000000000000000000000000040100010002000000  ORIGINX.......................\n0000384: 4f524947494e590000000000000000000000000000040100010002000000  ORIGINY.......................\n00003a2: 505a54534849465400000000000000000000000000060100010004000000  PZTSHIFT......................\n00003c0: 4d4f44544852455348000000000000000000000000060100010004000000  MODTHRESH.....................\n00003de: 534d4f4f5448000000000000000000000000000000060100010004000000  SMOOTH........................\n00003fc: 424144504958454c00000000000000000000000000060100010004000000  BADPIXEL......................\n000041a: 524547494f4e530000000000000000000000000000040100010002000000  REGIONS.......................\n0000438: 5445524d0000000000000000000000000000000000020100140014000000  TERM..........................\n0000456: 504958454c434f554e540000000000000000000000050100010004000000  PIXELCOUNT....................\n0000474: 56414c4c4559000000000000000000000000000000060100010004000000  VALLEY........................\n0000492: 5045414b0000000000000000000000000000000000060100010004000000  PEAK..........................\n00004b0: 524d53000000000000000000000000000000000000060100010004000000  RMS...........................\n00004ce: 524100000000000000000000000000000000000000060100010004000000  RA............................\n00004ec: 525300000000000000000000000000000000000000060100010004000000  RS............................\n000050a: 435300000000000000000000000000000000000000060100010004000000  CS............................\n0000528: 523100000000000000000000000000000000000000060100010004000000  R1............................\n0000546: 523200000000000000000000000000000000000000060100010004000000  R2............................\n0000564: 413100000000000000000000000000000000000000060100010004000000  A1............................\n0000582: 4d45414e0000000000000000000000000000000000060100010004000000  MEAN..........................\n00005a0: 5445524d53000000000000000000000000000000000701001c00e0000000  TERMS.........................\n00005be: 444154410000000000000000000000000000000000064001400100400600  DATA..................@.@..@..\n00005dc: 4d4f44454e414d4500000000000000000000000000020100140014000000  MODENAME......................\n00005fa: 545542454e414d4500000000000000000000000000020100140014000000  TUBENAME......................\n0000618: 52454c41594e414d45000000000000000000000000020100140014000000  RELAYNAME.....................\n0000636: 43414d4552414e414d450000000000000000000000020100140014000000  CAMERANAME....................\n0000654: 4f50455241544f5200000000000000000000000000020100140014000000  OPERATOR......................\n0000672: 4c4f544e554d424552000000000000000000000000020100140014000000  LOTNUMBER.....................\n0000690: 504152544e554d4245520000000000000000000000020100140014000000  PARTNUMBER....................\n00006ae: 58444543494d4154494f4e00000000000000000000040100010002000000  XDECIMATION...................\n00006cc: 59444543494d4154494f4e00000000000000000000040100010002000000  YDECIMATION...................\n00006ea: 46494c544552574156454c454e4754480000000000060100010004000000  FILTERWAVELENGTH..............\n0000708: 4f424a4543544956454d4147000000000000000000060100010004000000  OBJECTIVEMAG..................\n0000726: 4f424a4543544956454e4100000000000000000000060100010004000000  OBJECTIVENA...................\n0000744: 545542454d41470000000000000000000000000000060100010004000000  TUBEMAG.......................\n0000762: 52454c41594d414700000000000000000000000000060100010004000000  RELAYMAG......................\n0000780: 43414d45524158504958454c000000000000000000060100010004000000  CAMERAXPIXEL..................\n000079e: 43414d45524159504958454c000000000000000000060100010004000000  CAMERAYPIXEL..................\n00007bc: 000000000000000000000000000000000000000000000000000000000000  ..............................\n00007da: 000000000000000000000000000000000000000000000000000000000000  ..............................\n00007f8: 000000000000000000000000000000000000000000000000000000000000  ..............................\n0000816: 000000000000000000000000000000000000000000000000000000000000  ..............................\n0000834: 000000000000000000000000000000000000000000000000000000000000  ..............................\n0000852: 000000000000000000000000000000000000000000000000000000000000  ..............................\n0000870: 000000000000000000000000000000000000000000000000000000000000  ..............................\n000088e: 000000000000000000000000000000000000000000000000000000000000  ..............................\n00008ac: 000000000000000000000000000000000000000000000000000000000000  ..............................\n00008ca: 000000000000000000000000000000000000000000000000000000000000  ..............................\n</code></pre>\n<p>the title ican be dumped like this </p>\n<pre><code>:\\&gt;xxd -s 0x8e8 -g16 -l 0x80 21SIDEB.MMD\n00008e8: 32312053494445204200736500000000  21 SIDE B.se....\n00008f8: 0000000088f61200000000006cf91200  ............l...\n0000908: 8f04447eb08e427e7419dd73b825ea73  ..D~..B~t..s.%.s\n0000918: 400000000300000044f71200b825ea73  @.......D....%.s\n0000928: a825ea73b8f612002cf712000042e673  .%.s....,....B.s\n0000938: ffffffff44f7120058f7120004f71200  ....D...X.......\n0000948: f27ce273489ceb00fd99eb0090224700  .|.sH........\"G.\n0000958: 84d8460014d94600d87c420040010000  ..F...F..|B.@...\n</code></pre>\n<p>time date and datatype</p>\n<pre><code>:\\&gt;xxd -s 0x968 -g16 -l 0x14 21SIDEB.MMD\n0000968: 31363a30333a35340000736500000000  16:03:54..se....\n0000978: 00000000                          ....\n\n:\\&gt;xxd -s 0x97c -g16 -l 0x14 21SIDEB.MMD\n000097c: 323031372d30372d3131006500000000  2017-07-11.e....\n000098c: 00000000                          ....\n\n:\\&gt;xxd -s 0x990 -g16 -l 0x14 21SIDEB.MMD\n0000990: 53555246414345004f4e00004f464600  SURFACE.ON..OFF.\n00009a0: 44454255                          DEBU\n</code></pre>\n<p>based on this the data should start at 0xc38</p>\n<pre><code>&gt;&gt;&gt; import struct\n&gt;&gt;&gt; fin = open(\"21sideb.mmd\" ,\"rb\")\n&gt;&gt;&gt; for i in range(0x1a,30*76,30):\n...     fin.seek(i)\n...     print \"0x%x+\" % struct.unpack(\"i\",fin.read(4)),\n...\n0x8e8+ 0x80+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x2+ 0x14+ 0x14+ 0x4+ 0x4+ 0x4+\n 0x4+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x4+ 0x4+ 0x4+ 0x2+ 0x2+ 0x4+ 0x4+ 0x4+ 0x4+ 0x2+ 0x14+ 0x4+ 0x4+ 0x\n4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0xe0+ 0x64000+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x2+ 0x2+\n0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x0+ 0x0+ 0x0+ 0x0+ 0x0+ 0x0+ 0x0+ 0x0+ 0x0+ 0x0+\n&gt;&gt;&gt;\n</code></pre>\n<p>ccalc &gt; 0x8e8+ 0x80+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x2+ 0x14+ 0x14+ 0x4+ 0x4+ 0x4+ 0x4+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x14+ 0x4+ 0x4+ 0x4+ 0x2+ 0x2+ 0x4+ 0x4+ 0x4+ 0x4+ 0x2+ 0x14+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0x4+ 0xe0</p>\n<p>ans = 0x0C38</p>\n<p>python script to rip the file into pieces as denoted in the header</p>\n<pre><code>import struct\nfin = open(\"21sideb.mmd\",\"rb\")\nitemaddr = 0\n\nfor i in range (0x1a,30*75,30):\n    fin.seek(i+4)\n    print str(fin.read(15)),\n    fin.seek(i)                             \n    addone = struct.unpack(\"i\",fin.read(4)) \n    itemaddr += addone[0];                  # addr of NEXTITEM \n    fin.seek(i+30)\n    addtwo = struct.unpack(\"i\",fin.read(4)) # size of NEXTITEM    \n    fin.seek(itemaddr)    \n    print \"size = %s bytes  ItemData = %s\\n\" % ( str(hex(addtwo[0])) ,  hex(itemaddr))\n    if(itemaddr != 0xc38):\n        print struct.unpack( (str(addtwo[0]) + \"s\"),fin.read(addtwo[0]))\n        print \"\\n\"\n\nfin.close()\n</code></pre>\n<p>each item seperately printed </p>\n<pre><code> C:\\&gt;python carvemmd.py TITLE size = 0x80 bytes ItemData = 0x8e8 \n('21 SIDE \nB\\x00se\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x88\\xf6\\x12\\x00\\x00\\x00\\x00\\x00l \n\\xf9\\x12\\x00\\x8f\\x04D~\\xb0\\x8eB~t\\x19\\xdds\\xb8%\\xeas@\\x00\\x00\\x00\\x03\\x00\n\\x00\\x00D\\xf7\\x12\\x00\\xb8%\\xeas\\xa8%\\xeas\\xb8\\xf6\\x12\\x00,\\xf7\\x12\\x00\\x00B\n\\xe6s\\xff\\xff\\xff\\xffD\\xf7\\x12\\x00X\\xf7\\x12\\x00\\x04\\xf7\\x12\\x00\\xf2|\\xe2sH\n\\x9c\\xeb\\x00\\xfd\\x99\\xeb\\x00\\x90\"G\\x00\\x84\\xd8F\\x00\\x14\\xd9F\\x00\\xd8|B\\x00@\n\\x01\\x00\\x00',) \nTIME size = 0x14 bytes ItemData = 0x968 \n('16:03:54\\x00\\x00se\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nDATE size = 0x14 bytes ItemData = 0x97c \n('2017-07-11\\x00e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nDATATYPE size = 0x14 bytes ItemData = 0x990 \n('SURFACE\\x00ON\\x00\\x00OFF\\x00DEBU',) \nDAQ size = 0x14 bytes ItemData = 0x9a4 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nPHC size = 0x14 bytes ItemData = 0x9b8 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nRECON size = 0x14 bytes ItemData = 0x9cc \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nDETMASK size = 0x14 bytes ItemData = 0x9e0 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nTERMASK size = 0x14 bytes ItemData = 0x9f4 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nDATMASK size = 0x14 bytes ItemData = 0xa08 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nREFFILE size = 0x14 bytes ItemData = 0xa1c \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nINSTRUMENT size = 0x14 bytes ItemData = 0xa30 \n('Smooth Phase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nSEQUENCE size = 0x2 bytes ItemData = 0xa44 \n('\\x00\\x00',) \nSERIAL size = 0x14 bytes ItemData = 0xa46 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nPARTID size = 0x14 bytes ItemData = 0xa5a \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nXSTAGE size = 0x4 bytes ItemData = 0xa6e \n('\\x00\\x00\\x00\\x00',) \nYSTAGE size = 0x4 bytes ItemData = 0xa72 \n('\\x00\\x00\\x00\\x00',) \nZSTAGE size = 0x4 bytes ItemData = 0xa76 \n('\\x00\\x00\\x00\\x00',) \nTHETASTAGE size = 0x4 bytes ItemData = 0xa7a \n('\\x00\\x00\\x00\\x00',) \nSPECIALPHASE size = 0x14 bytes ItemData = 0xa7e \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nSPECIALDATA size = 0x14 bytes ItemData = 0xa92 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nFILTERLABEL size = 0x14 bytes ItemData = 0xaa6 \n('520 nm\\x00 B\\x00se\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nMAGLABEL size = 0x14 bytes ItemData = 0xaba \n('20X\\x00nm\\x00 B\\x00se\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nCAMERA_LABEL size = 0x14 bytes ItemData = 0xace \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nTUBE_LABEL size = 0x14 bytes ItemData = 0xae2 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x \n00\\x00\\x00',) \nXPIXEL size = 0x4 bytes ItemData = 0xaf6 \n('H\\xe1\\xfa&gt;',) \nYPIXEL size = 0x4 bytes ItemData = 0xafa \n('H\\xe1\\xfa&gt;',) \nZSCALE size = 0x4 bytes ItemData = 0xafe \n('\\x00\\x00\\x80?',) \nORIGINX size = 0x2 bytes ItemData = 0xb02 \n('\\x00\\x00',) \nORIGINY size = 0x2 bytes ItemData = 0xb04 \n('\\x00\\x00',) \nPZTSHIFT size = 0x4 bytes ItemData = 0xb06 \n('\\x00\\x00\\x00\\x00',) \nMODTHRESH size = 0x4 bytes ItemData = 0xb0a \n('\\x00\\x00\\x00\\x00',) \nSMOOTH size = 0x4 bytes ItemData = 0xb0e \n('\\x00\\x00\\x00\\x00',) \nBADPIXEL size = 0x4 bytes ItemData = 0xb12 \n('\\xbf\\x87*Y',) \nREGIONS size = 0x2 bytes ItemData = 0xb16 \n('\\x00\\x00',) \nTERM size = 0x14 bytes ItemData = 0xb18 \n('NONE\\x00\\x00\\x00\\x00TERMS\\x00\\x00\\x00MEAN',) \nPIXELCOUNT size = 0x4 bytes ItemData = 0xb2c \n('\\x00\\x00\\x00\\x00',) \nVALLEY size = 0x4 bytes ItemData = 0xb30 \n('\\x00\\x00\\x00\\x00',) \nPEAK size = 0x4 bytes ItemData = 0xb34 \n('\\x00\\x00\\x00\\x00',) \nRMS size = 0x4 bytes ItemData = 0xb38 \n('\\x00\\x00\\x00\\x00',) \nRA size = 0x4 bytes ItemData = 0xb3c \n('\\x00\\x00\\x00\\x00',) \nRS size = 0x4 bytes ItemData = 0xb40 \n('\\x00\\x00\\x00\\x00',) \nCS size = 0x4 bytes ItemData = 0xb44 \n('\\x00\\x00\\x00\\x00',) \nR1 size = 0x4 bytes ItemData = 0xb48 \n('\\x00\\x00\\x00\\x00',) \nR2 size = 0x4 bytes ItemData = 0xb4c \n('\\x00\\x00\\x00\\x00',) \nA1 size = 0x4 bytes ItemData = 0xb50 \n('\\x00\\x00\\x00\\x00',) \nMEAN size = 0x4 bytes ItemData = 0xb54 \n('\\x00\\x00\\x00\\x00',) \nTERMS size = 0xe0 bytes ItemData = 0xb58 \n('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x 00\\x00\\x00\\x00\\x00',) \nDATA size = 0x64000 bytes ItemData = 0xc38 \nMODENAME size = 0x14 bytes ItemData = 0x64c38 \n('Smooth Phase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nTUBENAME size = 0x14 bytes ItemData = 0x64c4c \n('1X Body\\x00hase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nRELAYNAME size = 0x14 bytes ItemData = 0x64c60 \n('1X Relay\\x00ase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nCAMERANAME size = 0x14 bytes ItemData = 0x64c74 \n('1/2\" CCD\\x00ase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nOPERATOR size = 0x14 bytes ItemData = 0x64c88 \n('125\\x00 CCD\\x00ase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nLOTNUMBER size = 0x14 bytes ItemData = 0x64c9c \n('I9W1R\\x00CD\\x00ase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nPARTNUMBER size = 0x14 bytes ItemData = 0x64cb0 \n('39530\\x00CD\\x00ase\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',) \nXDECIMATION size = 0x2 bytes ItemData = 0x64cc4 \n('\\x01\\x00',) \nYDECIMATION size = 0x2 bytes ItemData = 0x64cc6 \n('\\x01\\x00',) \nFILTERWAVELENGT size = 0x4 bytes ItemData = 0x64cc8 \n('\\xb8\\x1e\\x05?',) \nOBJECTIVEMAG size = 0x4 bytes ItemData = 0x64ccc \n('\\x00\\x00\\xa0A',) \nOBJECTIVENA size = 0x4 bytes ItemData = 0x64cd0 \n('\\xcd\\xcc\\xcc&gt;',) \nTUBEMAG size = 0x4 bytes ItemData = 0x64cd4 \n('\\x00\\x00\\x80?',) \nRELAYMAG size = 0x4 bytes ItemData = 0x64cd8 \n('\\x00\\x00\\x80?',) \nCAMERAXPIXEL size = 0x4 bytes ItemData = 0x64cdc \n('\\xcd\\xcc\\x1cA',) \nCAMERAYPIXEL size = 0x4 bytes ItemData = 0x64ce0 \n('\\xcd\\xcc\\x1cA',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nsize = 0x0 bytes ItemData = 0x64ce4 \n('',) \nC:\\&gt; \n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 5, 2017 at 8:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Alex Martin",
                    "text": "<span class=\"comment-copy\">So yes, 0x0C38 = 3128 bytes. I am extracting the image data at 3128 bytes to 320*320*4 + 3128 = 412728 bytes. That is how I get the data in the bitmap. The question is, where are the number measurements in the 3128 byte header or 172 byte footer? As in, the numbers on the PDF?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">please read and try to understand the answer so that the dialogue is meaningful the size of the data is hardcoded in the header here 00005be: 444154410000000000000000000000000000000000064001400100400600  DATA..................@.@..@..  it is as i said 0x64000 bytes as denoted in the last dword of item DATA THERE is also a pattern in the data each dwird in the data starts with 0x3c  these might be floats defining a point as the datatype is surface please dissect my answer</span>",
                    "time": null
                },
                {
                    "user": "Alex Martin",
                    "text": "<span class=\"comment-copy\">I think I see what you are saying let me dig into it more I will update this, thanks. Do you mind taking a look at the 172 byte footer? I appreciate your  expertise!</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">there is no footer both the  size and address of all items are  hardcoded in the header i added a few lines of python that  can print each of the item with its size address and data take a look and  you should find out what the data is without any preconceived notion about its type like bmp,jpg etc the data has a patter as i said earlier each 4thbyte in the data appears to be 0x3c so you should find what it could mean</span>",
                    "time": null
                },
                {
                    "user": "Alex Martin",
                    "text": "<span class=\"comment-copy\">Hey blabb, you nailed this. I finally understand. I really appreciate your help. This will help me down the road immensely. As promised, you are the man!</span>",
                    "time": null
                }
            ]
        }
    ]
}