{
    "title": "Insert logging into existing binary code, ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/4404/insert-logging-into-existing-binary-code-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to add logging to some function(s) in the shared (<code>.so</code>) library. (ARM, Android, a mix of Arm and Thumb modes; C++, some functions are virtual and therefore nameless, invoked via VFT.)</p>\n<p><strong><em>Does anyone already have code that does this or almost this? (Adds logging to existing functions.)</em></strong></p>\n<p>(I am thinking about patching at run-time (on-the-fly), but you may suggest something static.)</p>\n<p>The procedures usually start with a <code>PUSH</code>/<code>STM</code> instruction, but it's difficult to place a branch into just one instruction, at least in the thumb mode.\n<strong><em>How do I modify existing procedures?</em></strong></p>\n<p>One more issue is to detect code residing in PLT.\n<strong><em>How do I detect code in PLT, how do I \"dereference\" the plt entry?</em></strong></p>\n<p>Related info:</p>\n<p>The caching issues are discussed here:\n<a href=\"https://reverseengineering.stackexchange.com/questions/3728/patching-arm7-code-during-runtime\">Patching ARM7 code during runtime</a> (but no code at the moment).</p>\n<p>Qt-specific stuff: <a href=\"http://www.ntcore.com/files/qtrev.htm\" rel=\"nofollow noreferrer\">http://www.ntcore.com/files/qtrev.htm</a> or (the same) <a href=\"http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing\" rel=\"nofollow noreferrer\">http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing</a> and <a href=\"http://qt-project.org/doc/qt-4.8/signalsandslots.html\" rel=\"nofollow noreferrer\">about Qt signals&amp;slots</a>.</p>\n<p>About <a href=\"https://reverseengineering.stackexchange.com/a/4329/4398\">printing out RTTI</a> (when it's available, of course).</p>\n<p>UPD: <a href=\"https://github.com/18446744073709551615/reDroid\" rel=\"nofollow noreferrer\"><strong>reDroid</strong>: reverse-engineering tools for Android NDK/C++/Qt (source at github)</a>.</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "c++",
        "arm",
        "patching"
    ],
    "user": "18446744073709551615",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://github.com/crmulliner/adbi\" rel=\"nofollow\">The Android Dynamic Binary Instrumentation Toolkit (adbi)</a> should allow you to do what you need to do.</p>\n<blockquote>\n<p>Simple binary instrumentation toolkit for Android ARM + Thumb.</p>\n<p>Instrumentation is based on library injection and hooking function\n  entry points (in-line hooking).</p>\n<p>The toolkit consists of two main components the hijack tool and the\n  base library.</p>\n<p><strong>hijack</strong></p>\n<p>The hijack tool provides the injection functionality. It supports a\n  number of modes for supporting older and newer Android devices. hijack\n  provides help on the command line.</p>\n<p><strong>libbase</strong></p>\n<p>The base library provides the hooking and unhooking functionality. The\n  base library is compiled as a static library so it can be directly\n  included in the actual instrumentation library. This is done so we can\n  keep everything in /data/local/tmp.</p>\n</blockquote>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "May 22, 2014 at 13:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use Dynamic Binary Instrumentation to achieve what you want as suggested by <a href=\"https://reverseengineering.stackexchange.com/users/1562/jason-geffner\">Jason Geffner</a>.</p>\n<p>You can use <a href=\"https://software.intel.com/sites/default/files/article/256671/pindroid-tutorial.pdf\" rel=\"nofollow noreferrer\">PINdroid</a> by Intel. Read this presentation on <a href=\"http://www.mulliner.org/android/feed/binaryinstrumentationandroid_mulliner_summercon12.pdf\" rel=\"nofollow noreferrer\">Android Binary Instrumentation</a>.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "18446744073709551615",
                    "text": "<span class=\"comment-copy\">As to Pin, is there ARM support? <i>Pin is used for the instrumentation of programs. It supports Linux*,Windows*, macOS and  Android* executables for IA-32, and Intel(R) 64.</i></span>",
                    "time": null
                },
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">If I'm not wrong then yes, you can use Pindroid for ARM too. I have not used it in Android. But according to me, yes you can. <a href=\"https://software.intel.com/sites/default/files/article/256671/pindroid-tutorial-01_1.pdf\" rel=\"nofollow noreferrer\">Pindroid Tutorial</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What i usually do, is find a suitable BL or BLX  instruction, and replace it with a BL to my logging code,  at the end of my logginghook, then jump to the original target.</p>\n<p>original code:</p>\n<pre><code>MOV R0, #123\nBLX  somefunction\n</code></pre>\n<p>then in <code>C</code> i write some function:</p>\n<pre><code>int hooksomefunction(int arg)\n{\n     // insert logging code here\n\n     return somefunction(arg);\n}\n</code></pre>\n<p>and change the original code to:</p>\n<pre><code>MOV R0, #123\nBLX  hooksomefunction\n</code></pre>\n<p>Other methods of inserting a call of your own:</p>\n<ul>\n<li>insert your code over some error handling code, which is unlikely to be actually used.</li>\n<li>write a jump over some instructions, copy those instructions to the start of your hook, call your logging code, jump back.</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "May 22, 2014 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}