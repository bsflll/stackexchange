{
    "title": "Need to extend the list of libraries that a shared (.so) library uses",
    "link": "https://reverseengineering.stackexchange.com/questions/4098/need-to-extend-the-list-of-libraries-that-a-shared-so-library-uses",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a number of shared libraries calling each other (<code>.so</code>, ARM, Android), binary-only.</p>\n<p>I want to add logging to some functions, <code>funcA()</code>, ..., <code>funcZ()</code> defined in <code>libsomething.so</code>.\nThe functions are called from <code>libstuff1.so</code>, ..., <code>libstuffN.so</code>.\nI can rename a function in the original library (keeping the name in the same bucket is a bit tricky, but possible).</p>\n<p>I want to either:</p>\n<ol>\n<li>Add an extra library to the dependency list of the calling library, that is, <code>libstuff1.so</code> originally referenced only <code>libsomething.so</code>, and I want it to reference both <code>libsomething.so</code> and <code>libOneMoreLib.so</code>.</li>\n<li>Or, add an extra function to existing library, e.g. in <code>libsomething.so</code>, I rename <code>funcA()</code> to <code>funbQ()</code> and define (that is, add) <code>funcA()</code> to print logs and call <code>funbQ()</code>.</li>\n</ol>\n<p>How can I do any of these?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "612",
    "tags": [
        "linux",
        "android",
        "arm",
        "libraries"
    ],
    "user": "18446744073709551615",
    "time": "Apr 21, 2014 at 6:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The required shared libraries are stored as <code>DT_NEEDED</code> entries in the dynamic section of the executable. This entry, in turn, points into the dynamic string table. So, to add another library, you will need to do something like this:</p>\n<ol>\n<li>Parse the list of <a href=\"http://www.sco.com/developers/gabi/latest/ch5.pheader.html\" rel=\"nofollow\"><em>program headers</em></a> and find the <code>PT_DYNAMIC</code> entry</li>\n<li>Map its <code>p_vaddr</code> back to a file offset using the other <code>PT_LOAD</code> entries. (you could use the <code>p_offset</code> field of the <code>PT_DYNAMIC</code> entry itself but it's not guaranteed to be correct.)</li>\n<li>Read and parse the <a href=\"http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#dynamic_section\" rel=\"nofollow\"><em>dynamic section</em></a> entries until you hit <code>DT_NULL</code>.</li>\n<li>Remember address and size of the string table (<code>DT_STRTAB</code>/<code>DT_STRSZ</code>). Note that it is a virtual address and needs to be mapped back to file offset using the <code>PT_LOAD</code> entries.</li>\n<li>Extend the string table with your library's name. You will probably need to find some other place for it since there's unlikely to be enough space at the table's end. If so, you may need to add another <code>PT_LOAD</code> entry to make sure it ends up in the process memory. This will mean shifting all file offsets of other entries. But let's assume you've done it.</li>\n<li>Go through the dynamic section again, and update all entries that point into the string table with the new addresses. Also update <code>DT_STRTAB</code>/<code>DT_STRSZ</code>.</li>\n<li>Now you can finally add a new <code>DT_NEEDED</code> entry for your lib, and another <code>DT_NULL</code> terminator after it. And hope the new <code>DT_NULL</code> did not overwrite anything important :)</li>\n</ol>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 20, 2014 at 18:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "18446744073709551615",
                    "text": "<span class=\"comment-copy\">Is there a library that can read the <code>.so</code> into memory, converting it into some data structures (like DOM parsers read XML), so that I could add one element to the list and write it back?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Haven't seen any.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Update: it seems <a href=\"https://github.com/NixOS/patchelf\" rel=\"nofollow noreferrer\">PatchELF</a> implements at least some of the necessary functionality, so you can try extending it, or submit a feature request.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A simple way there is. <code>readelf -d libxyz.so</code> all dependencies lists. One of these libraries extend or substitute you can.</p>\n</div>",
            "votes": "1",
            "user": "18446744073709551615",
            "time": "Apr 24, 2014 at 12:22",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know it's not a direct answer to your question, but would something like <code>LD_PRELOAD</code> mechanism allow you to achieve what you want?</p>\n<p>With <code>LD_PRELOAD</code> you can specify your library which is to be loaded and functions from that library will be used instead of ones in the original library. This is a common and simple way of doing function hooking on Linux systems. </p>\n<p><a href=\"http://www.linuxjournal.com/article/7795\" rel=\"nofollow\">Here is an example</a> of using <code>LD_PRELOAD</code> to hook functions. </p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Apr 25, 2014 at 15:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}