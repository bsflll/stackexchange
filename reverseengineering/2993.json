{
    "title": "Need help extracting data from .dat file",
    "link": "https://reverseengineering.stackexchange.com/questions/2993/need-help-extracting-data-from-dat-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://dl.dropboxusercontent.com/u/247623/item.dat\" rel=\"nofollow\">https://dl.dropboxusercontent.com/u/247623/item.dat</a>\nThis is a file from a Java game, and I would like to know how to legible string data from it.</p>\n<p>I would prefer if only hints were given to me.</p>\n<p>I have looked into it with a Hex Editor and come to the conclusion that the file is either compressed or encrypted because of the lack of a pattern.</p>\n<p>If it is encrypted, I have no idea how to proceed.\nIf it is compressed, I have found the following but have no idea how to proceed.</p>\n<blockquote>\n<p>Entropy = 7.999055 bits per byte.</p>\n<p>Optimum compression would reduce the size of this 384802 byte file by\n  0 percent.</p>\n<p>Chi square distribution for 384802 samples is 505.10, and randomly\n  would exceed this value less than 0.01 percent of the times.</p>\n<p>Arithmetic mean value of data bytes is 128.1314 (127.5 = random).\n  Monte Carlo value for Pi is 3.120328068 (error 0.68 percent). Serial\n  correlation coefficient is -0.031097 (totally uncorrelated = 0.0).</p>\n</blockquote>\n<p>Assume I have minimal knowledge of what I am doing, so several hints may be required.\nMore information can be given upon request.</p>\n<p>Thanks in advance!</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "5k",
    "tags": [
        "file-format"
    ],
    "user": "Intan Abdul Hashim",
    "time": "Nov 1, 2013 at 10:05",
    "comments": [
        {
            "user": "Stolas",
            "text": "<span class=\"comment-copy\">Reverse the program that used the file, as it is java this is probably the easiest solutions. Just JD-GUI or something similar.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Piece of cake: this is ZIP-compatible compressed compiled Java. Any familiar sequences of bytes near the header?</p>\n<pre><code>FA CE AF 0E 10 00 10 00 78 9C AC DD ..\n</code></pre>\n<p>.. those first few bytes <em>look</em> like Java's magic ID <code>CA FE BA BE</code>, but Googling that sequence doesn't yield any results, and it might be a red herring anyway. Next up: <code>10 00 10 00</code>, which can be about anything (not a file length, but perhaps some internal flag or ID).</p>\n<p>Next: <code>78 9C</code>. These <em>are</em> familiar, they may form a set of ZLIB compatible compression flags. A quick-and-dirty ZLIB unpacker gave me (1) a <em>positive</em> unpacking result (meaning this data <em>is</em> valid compressed data and could be uncompressed), and (2) an output file much larger than the input (1,388,603 bytes vs. the original 384,802).</p>\n<p>Inspecting the decompressed data I found this at the start:</p>\n<pre><code>01 09 00 31 5B 4C 63 6F 6D 2E 74 68 72 65 65 72 69 6E 67\n73 2E 70 72 6F 6A 65 63 74 78 2E 69 74 65 6D 2E 63 6F 6E\n</code></pre>\n<p>or, in ASCII,</p>\n<pre><code>...1[Lcom.threering\ns.projectx.item.con\n</code></pre>\n<p>-- enough to conclude it has been decompressed successfully. From this point on, you should be able to use common Java-decrypting/decompiling techniques.</p>\n</div>",
            "votes": "7",
            "user": "Jongware",
            "time": "Nov 1, 2013 at 22:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It can be difficult to differentiate well compressed data (e.g., LZMA) from well encrypted data (e.g., AES). I've done a <a href=\"http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\" rel=\"nofollow\">bit</a> of <a href=\"http://www.devttys0.com/2013/06/encryption-vs-compression-part-2/\" rel=\"nofollow\">analysis</a> in the past however, and found that a lot of compressed data can be distinguished from encrypted data based on entropy analysis, as you have obviously already done.</p>\n<p>However, I would take a simpler approach first. Look for common \"magic\" strings and/or headers in the file, such as those for gzip, zlib, and lzma. It may be that the game developers are using a standard compression, they've just added a custom header for their application.</p>\n</div>",
            "votes": "3",
            "user": "devttys0",
            "time": "Nov 1, 2013 at 13:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Yep, a set of common ZLIB compression flags can be found near the start.</span>",
                    "time": null
                }
            ]
        }
    ]
}