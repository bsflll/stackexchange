{
    "title": "Ghidra renaming EAX",
    "link": "https://reverseengineering.stackexchange.com/questions/24708/ghidra-renaming-eax",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Ghidra is renaming <code>EAX</code> as <code>param_1</code>. Why is this happening? I find it very confusing since it is clearly not a parameter and different uses of <code>EAX</code> are named as if they held the same value.</p>\n<p><a href=\"https://i.sstatic.net/HxFMX.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/HxFMX.jpg\"/></a></p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ghidra"
    ],
    "user": "user1156544",
    "time": "Apr 15, 2020 at 12:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a feature that can be deactivated by unticking the option <code>Markup Register Variable Reference</code> found in the <code>Edit -&gt; Tool Options</code> window in the pane <code>Options -&gt; Listing Fields -&gt; Operands Field</code>.</p>\n<p>I would personally not turn this off, because I suspect the proper way to resolve this is to get Ghidra to recognize the local variables the <code>eax</code> usages present, which will then be renamed accordingly. This should only require some minor cleanup of the decompiled code, possibly even just by using <code>Commit Local Names</code>, which is found in the context menu of the decompiler window.</p>\n</div>",
            "votes": "2",
            "user": "Florian Magin",
            "time": "Apr 15, 2020 at 14:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1156544",
                    "text": "<span class=\"comment-copy\">This is correct. The <code>Commit Local Names</code> seems the correct way, however it is a bit confusing. After applying the option, EAX is renamed: <code>CALL   xxx;  MOV  EBX ,hModule</code>. This <code>hModule</code> suddenly appears \"out of the blue\", whereas if it was <code>EAX</code> it was obvious that was the value returned by the <code>CALL</code>. <code>hModule</code> could be a different value defined before the <code>CALL</code>, it is not obvious it came from the returned value.</span>",
                    "time": null
                },
                {
                    "user": "user1156544",
                    "text": "<span class=\"comment-copy\">I think a better approach for Ghidra would be to rename <code>EAX</code> to <code>param_1</code> just as long as it is not changed by a <code>CALL</code>. Then, <code>EAX</code> is not really <code>param_1</code> anymore.</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">I suspect it is renamed to <code>hModule</code> because this is the return type of the call and thus also used for the local variable that holds the return value? There should be a local variable <code>hModule</code> in the decompiler view, try renaming that. If this is a local variable that is reused but actually has a different meaning read <a href=\"https://reverseengineering.stackexchange.com/questions/21236/ghidra-rename-variable-below-current-line/23516#23516\" title=\"ghidra rename variable below current line\">reverseengineering.stackexchange.com/questions/21236/â€¦</a> and split out the variable into a new one</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Ghidra renamed EAX as <code>param_1</code> because it is a parameter for the current function. This calling convention is similar to <code>fastcall</code>, although not quite the same. Selecting how to pass arguments to functions is up to the compiler, so long as the code belong to the same program.</p>\n<p>At the beginning of your code, <code>param_1</code> (EAX) contains a pointer to a <code>OLECHAR</code> object. Later, it is saved to <code>local_8</code>.</p>\n<p><code>@2af4 MOV param_1,EDI</code>. This sets the first parameter to the <em>next</em> call, @2af6.</p>\n<p>Because EAX is used as parameter for many other functions inside your code, it may be correct to name it <code>param_x</code> even when the value is clearly not the same. On 2b04, the saved original parameter is loaded into EAX, again, being the first parameter for the <em>next</em> call.</p>\n<p>Personally, I like to use register names and not renaming them, but what you see here does make sense.</p>\n<p>Edit: You can see that when calling <em>external</em> functions, like <code>FindResourceW</code> the calling convention changes and <code>param_1</code> is now on the stack. This is where it is shown in Green rather than Yellow.</p>\n</div>",
            "votes": "-1",
            "user": "Yotamz",
            "time": "Apr 15, 2020 at 14:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">The issue is that renaming the first argument of the function that is shown, will rename all occurrences of <code>param_1</code>. At <code>2b13</code> I would expect <code>param_1</code> to be the return value of <code>FindResourceW</code>. Why do you think it is the original <code>param_1</code>  on the stack? My understanding of the color is that greens are the reads that directly depend on the variable that is written at the occurrence that was clicked on.</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\"><code>FindResourceW</code> returns a value in EAX and right after the call there is a <code>mov EBX,param_1</code>. It would be safe to assume that is is EAX. Right after that EBX (with the return value) is pushed on to the stack and becomes <code>param_1</code> for the next function. The last call in this code is again an internal function with <code>param_1</code> in EAX and it is also Yellow again.</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">I am fairly sure that you are mistaken. Your assumption seems to be that <code>param_1</code> means that it is the first parameter to various functions.  This <i>not</i> the case, because if you rename the first argument of the function <code>FUN_00402ad0</code> from <code>param_1</code> to <code>foo</code> all the occurrences of <code>param_1</code> will be replaced with <code>foo</code>.</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">Your assumption about the meaning of the color is also mistaken (and thus I assume just speculation?).  Under <code>Options -&gt; Listing Fields -&gt; Cursor Text Highlight</code> is an option for <code>Scoped Read Highlight Color</code>. If you change this, the color of those highlights will change from green to whatever you selected. Which proves my point that this is dataflow analysis that marks the reads from that register and has nothing to do with the variable being currently stored on the stack or in a register.</span>",
                    "time": null
                },
                {
                    "user": "user1156544",
                    "text": "<span class=\"comment-copy\">I think you both are right in some of your comments: param_1 is used as a replacement for EAX, regardless of anything. It can be renamed to \"foo\" and it will be changed at every location. Colours are marked in blocks of usage, so they change as soon as the value is written. <code>MOV EBX, param_1; MOV ECX, param_1</code> will have same colour, but then <code>MOV param_1, xx</code> will start a new colour block. The colour does not mark the \"same\" variable. <code>param_1</code> read before a <code>CALL</code> can be identified with the same colour as a <code>param_1</code> read after the <code>CALL</code>, and they are clearly not the same thing.</span>",
                    "time": null
                }
            ]
        }
    ]
}