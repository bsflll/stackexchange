{
    "title": "How would I find a color's memory address? (Beginner)",
    "link": "https://reverseengineering.stackexchange.com/questions/13311/how-would-i-find-a-colors-memory-address-beginner",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm an absolute beginner (just started learning about process memory a few hours ago).</p>\n<p>I'm trying to find the memory address for the color of <a href=\"https://i.sstatic.net/jUbmL.png\" rel=\"nofollow noreferrer\">Color 1</a> in mspaint using <a href=\"http://x64dbg.com/\" rel=\"nofollow noreferrer\">x64dbg</a>.</p>\n<p>I know it's black, so I've tried searching for <strong>000000</strong>, <strong>0, 0, 0</strong>, <strong>Color 1</strong>, and <strong>Black</strong> in each of the boxes. (ASCII, UNICODE, Hex)</p>\n<p>I've gotten nowhere with that. Like I said, I'm a beginner, so this is all extremely foreign to me.</p>\n<p>I'd really appreciate some help with learning how to find a color's memory address, so I can <em>then</em> change the color and stuff.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "debugging",
        "x86-64"
    ],
    "user": "Albertay",
    "time": "Aug 18, 2016 at 22:58",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">I think what you're looking for is quite similar to an older answer of mine: <a href=\"http://reverseengineering.stackexchange.com/questions/2176/how-to-find-entities-enemies-array-pointer-with-cheat-engine/2177#2177\" title=\"how to find entities enemies array pointer with cheat engine\">reverseengineering.stackexchange.com/questions/2176/…</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Alright, so you're trying to find the Red, Green, and Blue values of the currently selected color. I'll show you how to do this using Cheat Engine, but you can also translate this to x64dbg.</p>\n<p>Fire up Paint and select <code>mspaint.exe</code> in CE(Cheat Engine) to debug it.</p>\n<p>Set the color to black or any other color you'd like, I will use black as my initial starting color. See what RGB values the color black has in Paint, in our case it's 0 0 0.</p>\n<blockquote>\n<p>1<a href=\"https://i.sstatic.net/xYPJm.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/xYPJm.png\"/></a></p>\n</blockquote>\n<p>Here I will make a few assumptions. I will assume that the Red, Green and Blue values are each 1 byte in size because they can only go up to 255 which is the limit that a 1 byte value can hold. I also assume that these values are at the same address, one after the other. Equivalent to</p>\n<pre><code>struct color {\n    char r, g, b;\n}\n</code></pre>\n<p>To sum it up, we want to find 3 contiguous byte values somewhere in memory. We know their values from Paint, so we can search for them.</p>\n<p>So, now we can switch over to CE and select <code>Grouped</code> scan so we can search for grouped values. In our case we have a group of 3 values, each being 1 byte. So, this is how CE should now look like.</p>\n<blockquote>\n<p>1<a href=\"https://i.sstatic.net/4Fc84.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/4Fc84.png\"/></a></p>\n</blockquote>\n<p>Then I simply press on <code>First Scan</code> and CE will find any memory in the paint.exe address space where there are 3 bytes with 0 in them, equivalent to</p>\n<pre><code>someAddress   0x00\nsomeAddress+1 0x00\nsomeAddress+2 0x00\n</code></pre>\n<p>CE will find a lot of addresses where this byte pattern occurs because three zero bytes isn't very unique.</p>\n<p>What I will do now is select another color in Paint and follow the same process, except at the end I'll press <code>Next Scan</code> instead of <code>First Scan</code>. What this will do is CE will look at all of the addresses it found with three zeroes, and it will look if any of them changed to your new grouped values. One of those addresses will now hold the three new grouped values, and CE will find it for you and you'll only be left with <em>hopefully</em> one address left. If you're left more than a few, you can repeat the process with a new color.</p>\n<p>If the address is color in Green, it means that it is static and will not change when you restart paint. Once you have the address of where the RGB is stored, and you can change it or read it or do whatever you want with it.</p>\n</div>",
            "votes": "3",
            "user": "Majiick",
            "time": "Aug 19, 2016 at 0:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Majiick",
                    "text": "<span class=\"comment-copy\">I know this is a basic step-by-step, but OP sounds like he needs it.</span>",
                    "time": null
                },
                {
                    "user": "Albertay",
                    "text": "<span class=\"comment-copy\">WOW! You really went the extra mile! Thank you VERY much for the extremely detailed answer. This helped me out a lot!</span>",
                    "time": null
                },
                {
                    "user": "Majiick",
                    "text": "<span class=\"comment-copy\">@Albertay learn some basic assembly by reading an assembly book, just google for recommendations on SO. I'd also highly recommend <code>Computer systems : a programmer's perspective</code> and read <a href=\"https://www.reddit.com/r/ReverseEngineering/comments/12ajwc/how_to_start_out_in_reverse_engineering/\" rel=\"nofollow noreferrer\">reddit.com/r/ReverseEngineering/comments/12ajwc/…</a></span>",
                    "time": null
                }
            ]
        }
    ]
}