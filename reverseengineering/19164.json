{
    "title": "problem with scanf/fgets in angr stdin exploration",
    "link": "https://reverseengineering.stackexchange.com/questions/19164/problem-with-scanf-fgets-in-angr-stdin-exploration",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to solve this very basic crackme using angr:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char *argv[]) {\n    char buffer[64];\n    printf(\"Mot de passe:\\n\");\n    scanf(\"%64s\",buffer);\n    if (strcmp(buffer,\"super!\")==0)\n    {\n        printf(\"Bravo!\\n\");\n    }\n    else\n    {\n        printf(\"Perdu1!\\n\");\n    }\n    return 0;\n}\n</code></pre>\n<p>It works fine with this python script:</p>\n<pre><code>import angr\nfrom angr.state_plugins import SimSystemPosix\n\np = angr.Project('./a.out', load_options={'auto_load_libs': False})\n\nsm = p.factory.simulation_manager()\nsm.explore(find= 0x400000+0x0000119f, avoid= 0x400000+ 0x000011ad)\n\nprint(sm.found[0].posix.dumps(0))\n</code></pre>\n<p>But, if I change <code>\"super!\"</code> password in my crackme with a password that contains spaces, angr doesn't find any solutions.</p>\n<p>Using <code>fgets</code> instead of <code>scanf</code> gets the same result; If the password contains a space, angr does not found any password.</p>\n<p>Of course, i have updated find and avoid addresses each time i recompile my c program.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c",
        "angr"
    ],
    "user": "Bob5421",
    "time": "Aug 27, 2018 at 20:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>That's because by doing so, you accidentally make the crackme <em>unsolvable</em>. Due to how <code>scanf</code> works with <code>%s</code>.</p>\n<p>As per the C <a href=\"http://www.cplusplus.com/reference/cstdio/scanf/\" rel=\"nofollow noreferrer\">reference sheet</a>, <a href=\"https://linux.die.net/man/3/scanf\" rel=\"nofollow noreferrer\">documentation</a> and <a href=\"https://en.wikipedia.org/wiki/Scanf_format_string\" rel=\"nofollow noreferrer\">multiple sources</a> (seriously, google is full of scanf documentation pages describing that):</p>\n<blockquote>\n<p><code>%s</code> : Scan a character string. The scan terminates at whitespace. A null character is stored at the end of the string, which means that the buffer supplied must be at least one character longer than the specified input length.</p>\n</blockquote>\n<p>scanf will immediately stop reading characters into a string denoted with <code>%s</code> once a whitespace character (space included, obviously) is encountered. Even if you manually enter the correct password by hand into your newly created executable you'll get the error message instead of the success.</p>\n<p>Additionally, <code>gets</code> behaves the same when it comes to whitespaces.</p>\n<p><strong>But you can solve the crackme by hand, it appears</strong></p>\n<p>Although this appears not to be the behavior you experience in your program, for some unknown reason, this is still the behavior angr <em>assumes</em> when handling <code>scanf</code> and <code>scanf</code>-like library functions. It is perhaps not widely known that angr, to avoid path explosion at the first encounter of a string library function, does not \"natively\" handle those functions like any other encountered function. In favor of efficiency and speed, angr \"cheats\" around library functions, format string functions included.</p>\n<p>For that purpose angr has its own <a href=\"https://github.com/angr/angr/blob/master/angr/procedures/libc/scanf.py\" rel=\"nofollow noreferrer\">scanf function implementation</a> in python, and that implementation follows the standard. You can see that <code>scanf</code> delimiters are <a href=\"https://github.com/angr/angr/blob/master/angr/procedures/stubs/format_parser.py#L17\" rel=\"nofollow noreferrer\">defined</a> and <a href=\"https://github.com/angr/angr/blob/master/angr/procedures/stubs/format_parser.py#L130\" rel=\"nofollow noreferrer\">used</a> to delimit <code>scanf</code>s possible output. Issues with <code>scanf</code> are even documented in <a href=\"https://docs.angr.io/docs/gotchas.html\" rel=\"nofollow noreferrer\">angr's gotchas page</a>:</p>\n<blockquote>\n<p>For example, our scanf implementation is not complete, but if you just need to support a single, known format string, you can write a hook to do exactly that.</p>\n</blockquote>\n<p>One way to avoid that is to modify the <code>scanf</code> implementation to something that does not consider whitespaces as delimiters. Another option is to disable that behavior by passing <code>exclude_sim_procedures_list=['scanf']</code> as argument to your <code>Project</code>. You could also, as the gotcha's page suggest, implement something specific for your scenario.   </p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Aug 28, 2018 at 16:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bob5421",
                    "text": "<span class=\"comment-copy\">This is strange because i can solve the crackme by hand by launching the executable and typing the password...</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Bob5421 That's all fine and well, but angr still assumes the correct behavior ;) see my edit for more details about angr.</span>",
                    "time": null
                }
            ]
        }
    ]
}