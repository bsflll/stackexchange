{
    "title": "IDAPython's FlowChart wrong basic blocks",
    "link": "https://reverseengineering.stackexchange.com/questions/31610/idapythons-flowchart-wrong-basic-blocks",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm developing a python script for IDA Pro and I seem to have a problem with idaapi.FlowChart because it retrieves another basic block that isn't present in the graph view of the GUI of IDA.</p>\n<p><a href=\"https://i.sstatic.net/Jv6Rd.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Jv6Rd.png\"/></a></p>\n<p>As you can see in the function at 0x10b4 there is only one basic block composed by a JMP instruction, but the size of the flowchart is 2, where in the second basic block there is the first instruction present at the memory location pointed by the JMP instruction of the first basic block.</p>\n<p>Do you know how I can deal with this problem? Thank you in advance.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "218",
    "tags": [
        "ida",
        "idapython",
        "idapro-sdk"
    ],
    "user": "Luca",
    "time": "Mar 2, 2023 at 10:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have fixed it by using <code>flags=idaapi.FC_NOEXT</code> when calling FlowChart.</p>\n<p>The flag <code>idaapi.FC_NOEXT</code> tells to not compute external blocks. Using this prevents jumps leaving the function from appearing in the flow chart. Unless specified, the targets of those outgoing jumps will be present in the flow chart under the form of one-instruction blocks.</p>\n</div>",
            "votes": "1",
            "user": "Luca",
            "time": "Mar 5, 2023 at 15:51",
            "is_accepted": true,
            "comments": []
        }
    ]
}