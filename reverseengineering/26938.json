{
    "title": "Difference between \\n, \\0, \\x00 and data from /dev/zero when performing a buffer overflow?",
    "link": "https://reverseengineering.stackexchange.com/questions/26938/difference-between-n-0-x00-and-data-from-dev-zero-when-performing-a-buffer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working with a <a href=\"https://crackmes.one/crackme/5f05ec3c33c5d42a7c66792b\" rel=\"nofollow noreferrer\">binary</a> that involves a buffer overflow on two contiguous memory blocks allocated with malloc. The binary filles up the first buffer with whatever the user inputs and hardcodes the second buffer to 1. There are a couple of solutions for this challenge that I do not understand. Please, consider the following:</p>\n<ol>\n<li>python3 -c \"print('A' * 32 + '\\x00' * 4)\" | ./simple_overflow</li>\n<li>python3 -c \"print('A' * 31 + '\\n')\" | ./simple_overflow</li>\n<li>perl -e \"print \\\"A\\\" x 32 . \\\"\\0\\\"\" | ./simple_overflow</li>\n<li>head -c 33 /dev/zero &gt; input &amp;&amp; ./simple_overflow &lt; input</li>\n</ol>\n<p>The first solution is straight forward. It writes 32 bytes into the first buffer and then four null bytes into the second one. Writing 4 bytes makes sense since integers are 4 bytes in size. However, the second answer only writes 31 bytes plus '\\n', and the third and fourth solutions use 33 bytes. The three of them work correctly (see screenshot).</p>\n<p><a href=\"https://i.sstatic.net/liyDR.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/liyDR.png\"/></a></p>\n<p>If you need to check the asm associated with this binary please see <a href=\"https://reverseengineering.stackexchange.com/questions/26928/using-gdb-to-find-the-address-of-a-buffer-in-a-stripped-c-binary\">here</a>.</p>\n<p>Why do solutions 2 to 4 work? Are \\n and \\0 internally considered integers? What about \\x00?</p>\n<p><strong>Note:</strong> solutions provided by users nicknamed h0un6, bottonim and escalatedquickly.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "debugging",
        "static-analysis",
        "buffer-overflow",
        "crackme"
    ],
    "user": "Ronald Rivera",
    "time": "Feb 3, 2021 at 21:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>so this crackme allocates two blocks of memory of size 0x10 and 0x8 and saves the result as buf1 and buf2</p>\n<p>buf1 = malloc(0x10);\nbuf2 = malloc(0x08);</p>\n<p>so to overflow into the first byte of second buffer the string must be of length\n&amp;buf2-&amp;buf1</p>\n<p>it does not write 0x20  bytes into a  0x10 long buffer it trashes/corrupts the  memory after 0x10 bytes by overwriting or overflowing or spilling into memory not owned</p>\n<p>the address in solution you quote are 20 bytes apart so to overflow into the first byte of second buffer you need 0x21 or 33 bytes</p>\n<p>but it may happen that they are 8 bytes apart or 80 bytes apart in such cases you may need a 9 byte or 81 byte long exploit string</p>\n<p>for understanding why 31 'A' works you may have to study the function fgets() which stops reading when a '\\n' is encountered and how it null terminates the returned string after reading a valid character</p>\n<p>shown below is a sample implementation and output</p>\n<pre><code>:\\&gt;xxd input.txt\n00000000: 4141 4141 4141 4141 4141 4141 410a 4141  AAAAAAAAAAAAA.AA        \n\n:\\&gt;cat fgets.cpp\n#include &lt;stdio.h&gt;\n#define BUFFERSIZE 16\nint main(void)\n{\n    char buffer[BUFFERSIZE] = {0};      \n    buffer[BUFFERSIZE - 1] = 'Z';       \n    buffer[BUFFERSIZE - 2] = 'Z';       \n    for (int i = 0; i &lt; BUFFERSIZE; i++)\n    {\n        printf(\"%02x \", buffer[i]);\n    }\n    printf(\"\\n\");\n    FILE *fp = NULL;\n    errno_t err = fopen_s(&amp;fp, \"input.txt\", \"rb\");\n    if (err == 0 &amp;&amp; fp != NULL)\n    {\n        fgets(buffer, BUFFERSIZE, fp);\n         for (int i = 0; i &lt; BUFFERSIZE; i++)\n        {\n            printf(\"%02x \", buffer[i]);\n        }\n        printf(\"\\n\");\n    }\n}\n:\\&gt;cl /Zi /W4 /analyze /Od /EHsc /nologo fgets.cpp /link /release\nfgets.cpp\n\n:\\&gt;fgets.exe\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 5a 5a\n41 41 41 41 41 41 41 41 41 41 41 41 41 0a 00 5a\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Feb 5, 2021 at 8:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">I guess the \"of size 10\" should be \"of size 16\" as later 0x10 is used?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">:0 thanks edited to remove confusion</span>",
                    "time": null
                },
                {
                    "user": "Ronald Rivera",
                    "text": "<span class=\"comment-copy\">Thank you @blabb, now it is clear what is going on</span>",
                    "time": null
                }
            ]
        }
    ]
}