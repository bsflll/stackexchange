{
    "title": "Handling stack strings in IDA, but with a twist (wchar_t-based, not char-based)",
    "link": "https://reverseengineering.stackexchange.com/questions/30463/handling-stack-strings-in-ida-but-with-a-twist-wchar-t-based-not-char-based",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Consider the following disassembly:</p>\n<pre><code>mov     dword ptr [rbp+430h+var_458], 690068h   ; L'i' + L'h'\nmov     dword ptr [rbp+430h+var_458+4], 2E0064h ; L'.' + L'd'\nmov     dword ptr [rbp+430h+var_458+8], 6C0064h ; L'l' + L'd'\nmov     dword ptr [rbp+430h+var_458+0Ch], 6Ch   ; 'l'\n; -&gt; L\"hid.dll\"\n</code></pre>\n<p>This is structurally similar to the disassembly <a href=\"https://reverseengineering.stackexchange.com/q/2977/245\">from this question</a>, except that the characters are <code>wchar_t</code> instead of <code>char</code> and moved dword-wise instead of byte-wise. The comment on the last <code>mov</code> was automatically added by IDA, I had to add the others myself.</p>\n<p>The <code>6Ch</code> in the last <code>mov</code> line could also be treated with <kbd>R</kbd> to change the representation to what's currently shown in the comment.</p>\n<p>Not so with the other lines. <kbd>R</kbd> has no effect there, although IDA has no trouble deciphering a dword-wise copy of char-based strings as evidenced in <a href=\"https://hex-rays.com/blog/igors-tip-of-the-week-88-character-operand-type-and-stack-strings/\" rel=\"nofollow noreferrer\">this blog article</a> (example from there: 70747468h -&gt; 'ptth' -&gt; \"http\").</p>\n<p>I know of the <a href=\"https://github.com/mandiant/flare-ida\" rel=\"nofollow noreferrer\">stackstrings plugin</a>, but cannot use it due to its dependency on Python 2.x!</p>\n<p>Is there a configuration setting (similar to string types and data carousel) to teach IDA the ability to use <kbd>R</kbd> in these cases to make better sense of those <code>wchar_t</code>-based stack strings?</p>\n<p>IDA Pro version: latest (7.7.220218)</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "562",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Jun 1, 2022 at 10:32",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "<span class=\"comment-copy\">The flare stackstrings module hasn't been converted to Python 3 because of a dependency on <code>vivisect</code>. From the code: <code># currently depending on vivisect, which will never be ported to py3</code> .. however <code>vivisect</code> has been ported to 3 so converting the stackstrings plugin to Python 3 is doable. Ref: <a href=\"https://vivisect.readthedocs.io/en/latest/vivisect/quickstart.html\" rel=\"nofollow noreferrer\">vivisect.readthedocs.io/en/latest/vivisect/quickstart.html</a></span>",
            "time": null
        },
        {
            "user": "Mega Tonnage",
            "text": "<span class=\"comment-copy\">I haven't set up for plugin development, but you could give this a try: <a href=\"https://github.com/m3gat0nn4ge/flare-ida/pull/1\" rel=\"nofollow noreferrer\">github.com/m3gat0nn4ge/flare-ida/pull/1</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The problem was caused by a hex-string in the middle of the wchar_t string!\nThe stackstrings plugin correctly handles such strings, but IDA does not.</p>\n<p>For example, in the following code:\n<code>    mov     dword ptr [rbp+430h+var_458], 690068h   ; L'i' + L'h'\nmov     dword ptr [rbp+430h+var_458+4], 2E0064h ; L'.' + L'd'\nmov     dword ptr [rbp+430h+var_458+8], 6C0064h ; L'l' + L'd'\nmov     dword ptr [rbp+430h+var_458+0Ch], 6C68h  ; 'lh'\n; -&gt; L\"hid.dll\"\n</code>\nIDA correctly displays the string as \"hid.dll\" when the last mov is changed to:\n    mov     dword ptr [rbp+430h+var_458+0Ch], 6C6Ch  ; 'll'\n; -&gt; L\"hid.dll\"</p>\n</div>",
            "votes": "-1",
            "user": "user42194",
            "time": "Oct 14, 2022 at 12:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}