{
    "title": "IDA Pro 7, idc script to copy 8KB ROM to F000 Segment?",
    "link": "https://reverseengineering.stackexchange.com/questions/31690/ida-pro-7-idc-script-to-copy-8kb-rom-to-f000-segment",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I updated an old .idc script so it will now copy 64kb of a 512kb BIOS file to the F000: Segment under IDA Pro (Free) 7 :</p>\n<pre><code>#include &lt;idc.idc&gt;      \n// The script relocates a copy of the highest 64 KiB of a 512 KiB BIOS file to\n// Segment: \"F000:\" for proper disassembly (adapted for use with IDA Pro 7).\nstatic relocate_seg(src, dest)\n{\n    auto ea_src, ea_dest, hi_limit;\n    hi_limit = src + 0x10000;\n    ea_dest = dest;\n    for(ea_src = src; ea_src &lt; hi_limit ; ea_src = ea_src + 4 )\n    {\n    PatchDword( ea_dest, Dword(ea_src));\n    ea_dest = ea_dest + 4;  \n    }\n  Message(\"Segment Relocation finished (inside relocate_seg function).\\n\");\n}\nstatic main()\n{\n  Message(\"Creating F000: Segment (inside main entry point function)...\\n\");\n  SegCreate( (0xF000 &lt;&lt; 4), (0x10000 &lt;&lt; 4), 0xF000, 0, 0, 0);\n  SegRename( (0xF000 &lt;&lt; 4), \"F000\");\n  relocate_seg( (0x7000 &lt;&lt; 4), (0xF000 &lt;&lt; 4) );\n}\n</code></pre>\n<p>It works just fine for a 512kb size file.  What I haven't been able to figure out: How to alter the script for a BIOS file that is only 8kb, or some size other than 512kb ?? I've tried replacing the \"0x10000\" with \"0x2000\" (for 8kb), but haven't been able to figure out what the \"0x7000\" does!?  Can someone please explain what/why the various values are in the script... or at the very least, alter the code for say, an 8kb and 64kb size BIOS file that will make a copy with the last 16 bytes of each file at \"F000:FFF0\" ?? And any references that actually give <strong>actual examples</strong> of either a script or using the commands (again for IDA Free 7; so no python plug-ins) to move or copy code in a file to different segments would be great.</p>\n<p>TIA, TheStarman.</p>\n<p>PS: I'm posting these on my website for Assembly students/hobbyists to use in examining old PC BIOS; I've already posted the one shown here for looking at the VMware Legacy BIOS.440.ROM.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "114",
    "tags": [
        "ida",
        "bios",
        "vmware"
    ],
    "user": "TheStarman",
    "time": "Mar 19, 2023 at 6:34",
    "comments": [
        {
            "user": "TheStarman",
            "text": "<span class=\"comment-copy\">Apparently everyone believes this is too simplistic a question to bother answering? I guess I'll just have to keep 'plugging away' at it until I get an 'Aha' moment.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although I would <strong>still very much like to know</strong> <em>the significance</em> of each of the values in the <strong>.idc script file</strong> I displayed above, and how to edit it for <strong>128</strong> KiB, <strong>256</strong> KiB <em>or even files larger than 512 KiB,</em> when it comes to 64 KiB or smaller files, there's really no point in using such a script file! We can simply load them with the \"Loading\" and \"Offset\" addresses in IDA's initial configuration window: 0xF000 (for loading segment) and either an Offset of 0xE000, 0xC000, 0x8000 or 0x0000 for 8, 16, 32 or 64 KiB, respectively; which is what I decided to show on my webpage here:\n<a href=\"https://thestarman.pcministry.com/asm/bios/ida7/index.html#ibm1rom\" rel=\"nofollow noreferrer\">https://thestarman.pcministry.com/asm/bios/ida7/index.html#ibm1rom</a></p>\n</div>",
            "votes": "1",
            "user": "TheStarman",
            "time": "Mar 25, 2023 at 1:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}