{
    "title": "Reversing PE32 executable - CTF Question",
    "link": "https://reverseengineering.stackexchange.com/questions/20210/reversing-pe32-executable-ctf-question",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So we were playing CTF , and we found this interesting RE challenge . And when we did a statical analysis to the file we found an interesting for loop . </p>\n<pre><code>for (var_84 = 0x0; var_84 &lt; 0x13; var_84 = var_84 + 0x1) {\n       edx = var_84;\n      *(int8_t * )(var_84 + \"Catch Me If You Can\") = sign_extend_32( * (int8_t * )(var_84 + \"Catch Me If You Can\")) ^ * (ebp + (edx * 0x4 - 0xd8));\n\n\n}\n</code></pre>\n<p>Can anyone explain the code above ? </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly"
    ],
    "user": "M.zK",
    "time": "Dec 27, 2018 at 13:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is byte-byte string xor in specific order.\n\"Catch me if you can\" is a string, or array of bytes.</p>\n<p>var_84 (and edx register) is an index in it.\nI don't know what exactly is a stack layout and can not say with what exactly it is XORed.</p>\n<p>In more readable C it will look like as follows:</p>\n<pre><code>array = &amp;\"Catch me if you can\"[0];\nfor (var_84 = 0x0; var_84 &lt; 0x13; var_84 = var_84 + 0x1) {\n       edx = var_84;\n      array[var_84] = sign_extend_32( array[var_84]) ^ * (ebp + (edx * 0x4 - 0xd8));\n\n}\n</code></pre>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "Dec 27, 2018 at 14:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}