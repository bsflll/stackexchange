{
    "title": "The hex codes in being replaced while finding bad characters for Buffer overflow",
    "link": "https://reverseengineering.stackexchange.com/questions/22099/the-hex-codes-in-being-replaced-while-finding-bad-characters-for-buffer-overflow",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am facing problem in finding bad characters because the hex codes are being replaced with \\x3F &amp; some other codes.</p>\n<p><a href=\"https://i.sstatic.net/i7FaQ.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/i7FaQ.png\"/></a></p>\n<p>Here I have all the 256 hex chars from \\x01 to \\xFF and as you can see many of the hex char is being replaced with \\x3F and other chars and hence I am not able to figure out the bad chars.</p>\n<p>I tried to figure out the bad chars &amp; the chars which are being replaced, which are: </p>\n<pre><code>\\x00\\x0a\\x0d\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8e\\x91\\x92\\x93\\x94\\x95\\x95\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9e\\x9f\\xa4\\xa6\\xa8\\xb4\\xb8\\xbc\\xbd\\xbe\n</code></pre>\n<p>Then I used msfvenom to generate the shellcode but getting below result.</p>\n<pre><code>$msfvenom -a x86 --platform windows -p windows/exec cmd=cmd.exe -b '\\x00\\x0a\\x0d\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8e\\x91\\x92\\x93\\x94\\x95\\x95\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9e\\x9f\\xa4\\xa6\\xa8\\xb4\\xb8\\xbc\\xbd\\xbe' -f c\nFound 11 compatible encoders\nAttempting to encode payload with 1 iterations of x86/shikata_ga_nai\nx86/shikata_ga_nai failed with A valid opcode permutation could not be found.\nAttempting to encode payload with 1 iterations of generic/none\ngeneric/none failed with Encoding failed due to a bad character (index=3, char=0x00)\nAttempting to encode payload with 1 iterations of x86/call4_dword_xor\nx86/call4_dword_xor failed with A valid encoding key could not be found.\nAttempting to encode payload with 1 iterations of x86/countdown\nx86/countdown failed with Encoding failed due to a bad character (index=84, char=0x0d)\nAttempting to encode payload with 1 iterations of x86/fnstenv_mov\nx86/fnstenv_mov failed with A valid encoding key could not be found.\nAttempting to encode payload with 1 iterations of x86/jmp_call_additive\nx86/jmp_call_additive failed with Encoding failed due to a bad character (index=15, char=0x85)\nAttempting to encode payload with 1 iterations of x86/xor_dynamic\nError: Bad character found in stub for the Dynamic key XOR Encoder encoder.\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "buffer-overflow"
    ],
    "user": "Mukesh",
    "time": "Sep 11, 2019 at 14:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The input string is probably decoded as <a href=\"https://en.wikipedia.org/wiki/UTF-8\" rel=\"nofollow noreferrer\">UTF-8</a> string. The '?' appears because the encoding is invalid.\nThe easiest way to preserve the shellcode is probably use an ASCII encoder, since UTF-8 is backward compatible with ASCII.</p>\n</div>",
            "votes": "1",
            "user": "wisk",
            "time": "Sep 12, 2019 at 5:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mukesh",
                    "text": "<span class=\"comment-copy\">Hey, the issue was there because I was creating the shellcode on my linux vm and then I was copying it to windows7 vm to excute it. May be the encoding on windows was differerent from linux and some characters were not recognized. When I created the shellcode on the same windows machine it loaded properly in the memory. By the way what encoding differences would be there if we copy some data from linux to windows?</span>",
                    "time": null
                },
                {
                    "user": "wisk",
                    "text": "<span class=\"comment-copy\">You need to provide more details to have an answer, e.g. how you load the payload, what's the target, etc. But, basically, if you copy the payload from your Linux (vm) to Windows as hex char (i.e. \\xNN\\xNN\\xNN\\xNN...), the encoding won't change. So far, I have the impression the target application decodes your payload as an UTF-8 string.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would try to go with a trial&amp;error approach. Seems the restricted chars are inside the range from 0x80 to 0xa9 with some exclusions. If you're developing an exploit and you haven't got time to figure it out try to suppose these as bad chars and avoid their use with msfvenom encoding.</p>\n<p>If you have time, try to use a buffer like 0x41 0x41 0x41 0xbadchar 0x41 ... 0x41 proceeding one by one, in the end, you will figure it out precisely.</p>\n<p>Badchars hunting is time-intensive task ... :-|</p>\n</div>",
            "votes": "0",
            "user": "Kartone",
            "time": "Sep 11, 2019 at 10:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mukesh",
                    "text": "<span class=\"comment-copy\">I have tried these approach and figured out that chars: <code>\\x00\\x0a\\x0d\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8e\\x91\\x92\\x93\\x94\\x95\\x95\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9e\\x9f\\xa4\\xa6xa8\\xb4\\xb8\\xbc\\xbd\\xbe</code> are either bad chars or being replaced with other chars. I use these as a bad char in msfvenon to generate the shellcode but getting no success.</span>",
                    "time": null
                }
            ]
        }
    ]
}