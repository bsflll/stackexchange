{
    "title": "Certain bytes in the memory (RAM) get changed after the program starts. Why?",
    "link": "https://reverseengineering.stackexchange.com/questions/20329/certain-bytes-in-the-memory-ram-get-changed-after-the-program-starts-why",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm in a situation where I have an executable file. When I start it within the debugger (x32dbg), with breakpoints set to every occasion (DLL entry, DLL load, Thread start,..), to restrict the amount of actions that get executed right after the file is ran,</p>\n<p>in the dump I see some bytes which are different from those at the same location in the exe file.</p>\n<p>Why is this happening and how to prevent this?\n<a href=\"https://i.sstatic.net/Dum81.png\" rel=\"nofollow noreferrer\"><img alt=\"On the right, the exe file, bytes which are changed are all arround the file. On the left, the runtime takeout of the memory\" src=\"https://i.sstatic.net/Dum81.png\"/></a></p>\n<p>My thought is it has something to do with dynamic linking of some sort. The values change when: the exe is saved(EVEN WITH THE EXACTLY SAME CONTENT AS BEFORE) and ran. Thus the offset where the code is placed and the specific bytes are recalculated. The only thing that loads, however, is ntdll.dll an then the first breakpoint is hit. So I guess the content of the exe is copied to the ram, that time is everything allright, then the magic part happens, where the subroutine or what knows what bytes to change and it changes them, and then the debugger gets the control.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "244",
    "tags": [
        "memory",
        "exe",
        "dump"
    ],
    "user": "Patrik Staron",
    "time": "Jan 11, 2019 at 21:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The magic might be TLS callbacks that run before entry point is reached. This behavior is well documented, see for example the following article:</p>\n<p><a href=\"https://isc.sans.edu/diary/How+Malware+Defends+Itself+Using+TLS+Callback+Functions/6655\" rel=\"nofollow noreferrer\">https://isc.sans.edu/diary/How+Malware+Defends+Itself+Using+TLS+Callback+Functions/6655</a></p>\n</div>",
            "votes": "2",
            "user": "MazeGen",
            "time": "Jan 13, 2019 at 19:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Patrik Staron",
                    "text": "<span class=\"comment-copy\">I looked around TLS but in ollydbg, I set all possible breaking options, even set the system entry as an initial entry. Then the first thing I did was to go to an offset in the memory to see when that overwrite happens, but it was already done. Is it still correct behaviour? should I check it with IDA or is is some other kind of system offset calculation based on some table in the PE header or what.</span>",
                    "time": null
                }
            ]
        }
    ]
}