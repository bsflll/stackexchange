{
    "title": "When might a compiler generate JG/JS/JP conditional jumps?",
    "link": "https://reverseengineering.stackexchange.com/questions/8005/when-might-a-compiler-generate-jg-js-jp-conditional-jumps",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was wondering where i might encounter JO/JS/JP JCCs (and their not-counterparts) in compiler generated code? What would it mean? I scrolled through a lot of random code, but wasnt able to find a single instance in straight forward way.</p>\n<p>thanks.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "155",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "bernd feinman",
    "time": "Jan 13, 2015 at 15:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Most compiled code, these days, is C, C++, or possibly Delphi. These languages lack high-level support for some of your instructions, so there is no reason for them to generate them.</p>\n<p>If C had an operation to determine the parity of a number, the compiler would probably generate a <code>JP</code> instruction for it. But C doesn't have this operation, and since the only reason for it (that i can think of) is serial communications, and serial chips have done parity checking in hardware since at least the 80s, there wasn't ever reason to introduce an extension for it.</p>\n<p>(There are actually bit operations that are useful in certain scenarios, have processor operations to do them, and are supported by compilers. See <a href=\"http://en.wikipedia.org/wiki/Find_first_set\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Find_first_set</a>.)</p>\n<p>Likewise, C doesn't have overflow checking. If a given compiler had a --warn-on-overflow flag, it might be implemented using <code>JC</code>, however.</p>\n<p>Your other two instructions are just variations of the \"compare two numbers\" topic. <code>JG</code> is a \"reversed\" <code>JLE</code>, <code>JS</code> is a version of <code>JL</code> after comparing to 0. For the compiler, it's more efficient to \"normalize\" comparisons first, then run the optimizer over the normalized comparison, then emit machine code, than maintaining different, but similar, optimizations. \"Greater than\" is the same as \"Not less or equal\"; \"Less than\" is the same as \"not greater or equal\". I've seen <code>gcc</code> produce the latter (<code>JLE</code> and <code>JGE</code>) but not the former (<code>JL</code> and <code>JG</code>). And since <code>JS</code> is just a special case of these, there's not much reason for a compiler to use it.</p>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jan 13, 2015 at 15:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}