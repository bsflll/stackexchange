{
    "title": "Help reversing a EDB database file for Pioneers Rekordbox software",
    "link": "https://reverseengineering.stackexchange.com/questions/4311/help-reversing-a-edb-database-file-for-pioneers-rekordbox-software",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Pioneers Rekordbox software is a music management tool for DJs. One of its features is BPM detection for music files. Unfortunately it doesn't write this information to the BPM frame of the files ID3 tags, and instead keeps the detected BPM in it's own database files.</p>\n<p>I'm writing a CLI tool to help me better manage my music, and one of the things I would like it to do, is extract the BPM data from the rekordbox database for each song.</p>\n<p>As Guntram Blohm pointed at, the BPM is almost certainly not stored in the two ANLZ files. Instead it appears to be stored in the Rekordbox 'database.edb' file. I've uploaded <a href=\"https://drive.google.com/file/d/0B2TT08R8boDIS2V4WjJfWVZSN3c/edit?usp=sharing\" rel=\"nofollow noreferrer\">an example edb file here</a> which contains one track with the BPM '170'.</p>\n<p>According to <a href=\"http://forums-archive.pioneerdj.com/eve/forums/a/tpc/f/240103214/m/7560086126\" rel=\"nofollow noreferrer\">this forum thread</a> the edb format is <em>not</em> an open format.</p>\n<hr/>\n<p>After a little more research it looks like it's a proprietary high-performance SQL database intended for use in embedded applications. (After EVEN MORE research, <strong>the database is called 'DeviceSQL'</strong>. Read the <a href=\"http://www.quora.com/What-database-system-did-Greg-Kemnitz-develop/answer/Greg-Kemnitz\" rel=\"nofollow noreferrer\">original authors Quora post about it</a>). Doesn't seem like it is something that would be easy to reverse :(</p>\n<p>For anyone else looking to extract the BPM information from their rekordbox library: It turns out there is a XML export that you can use. While not quite as automated as just reading the database file, it is a nice standard format!</p>\n<hr/>\n<p><strong>Old question:</strong>\nEach track seems to have two files kept in the database (the database is just a directory tree of these files) for it. Here is the pair of files for <a href=\"https://drive.google.com/folderview?id=0B2TT08R8boDIdUdaemNmVGxkd1U&amp;usp=sharing\" rel=\"nofollow noreferrer\">an example track</a>. The BPM was detected as 170 for the track, though I suspect it's storing it as a floating point or double as some other tracks can be detected at numbers like \"169.96\". Though looking for the double and floating point hex representations didn't yield any matches for me.</p>\n<p>I see the files have what look like headers, for example \"PPTH\" followed by the file path. and \"PQTZ\", for the Rekordbox quantization feature. But I'm not too familiar with file formats, so I can't tell if it's using a standard file type. Or something more proprietary.</p>\n<p>If anyone is interested in taking a look at the files and pointing me in the right direction it would be greatly appreciated! Right now I'm just trying to figure out how the BPM is stored.</p>\n<hr/>\n</div>",
    "votes": "6",
    "answers": 3,
    "views": "5k",
    "tags": [
        "file-format"
    ],
    "user": "Evan Purkhiser",
    "time": "Mar 7, 2022 at 0:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The precise BPMs are actually in the data files (filename).DAT (may the overall BPM is in the edb.. but I can't confirm)\nSo I have reversed both data files created by RekordBox:</p>\n<pre>\nfile.DAT\n--------\n/numbers are all big endian/\n[tag]   - 4 byte string\n4byte   - tag header size \n4byte   - segment size (including tag header)\n(in multibit fields, msb-to-lsb (left-to-right) is the general direction)\n//////////////////////////////\n\nPMAI    - main file descriptor\n4byte   - head size (28)\n4byte   - total file size\n4byte   - ??? (1)\n4byte   - ??? (65536)\n4byte   - ??? (65536)\n4byte   - ??? (0)\n\nPPTH    - file path\n4byte   - head size (16)\n4byte   - tag size\n4byte   - data length\ndata_bytes - file path in UTF16 (big endian) \\0 terminated\n\nPVBR    - VBR seek table\n4byte   - head size (16)\n4byte   - tag size (1620) (4*400+4)\n4byte   - 0\n  &gt;entries&gt;\n    4byte   - file pos\n  &gt;last_entry&gt;\n    4byte   - ???\n\nPQTZ    - Quantized time zones\n4byte   - head size (24)\n4byte   - tag size\n4byte   - 0\n4byte   - ??? (524288=0x80000)\n4byte   - number of entries\n  &gt;entries&gt;\n    2byte   - beat phase (1-2-3-4)\n    2byte   - bpm*100\n    4byte   - time index (msec)\n\nPWAV    - Low resolution Wave display data (5+3bit)\n4byte   - head size (20)\n4byte   - tag size (420)\n4byte   - data size (400)\n4byte   - ??? (65536)\n  &gt;entries&gt;\n     3bit   - color index\n     5bit   - height\n\nPWV2    - Lowest resolution Wave display data (4bit)\n4byte   - head size (20)\n4byte   - tag size (120)\n4byte   - data size (100)\n4byte   - ??? (65536)\n  &gt;entries&gt;\n      4bit  - 0\n      4bit  - height\n\nPCOB    - CUE Object    ///first PCOB for hot cues, second PCOB for memory\n                        ///only generated for USB storage, \n                        ///otherwise contains only dummy data and actual cue data stored in the edb \n4byte   - head size (24)\n4byte   - tag size\n4byte   - hotCUE? (1=hot cue, 0=memory)\n4byte   - number of cue points\n4byte   - memories (-1= hot cue)\n  &gt;entry tags&gt;\n    PCPT    - CUE Point\n    4byte   - head size (28)\n    4byte   - tag size (56)\n    4byte   - hot cue no#, 0 otherwise\n    4byte   - active (0=inactive / 4=active)\n    4byte   - (65536)\n    4byte   - ???? -----point type: 0xffff ffff = hot cue ////  memory first: 0xffff xxxxx ----- memory last: 0x xxxx ffff\n      &gt;datas&gt;\n        1byte   - cue type 1 = single / 2 = loop\n        1byte   - 0\n        2byte   - ??? (1000)\n        4byte   - start time (msec)\n        4byte   - loop end (-1 if not used)\n        16byte  - 0\n\n\n\nfile.EXT\n--------\nPMAI    - main file descriptor\n4byte   - head size (28)\n4byte   - total file size\n4byte   - ??? (1)\n4byte   - ??? (65536)\n4byte   - ??? (65536)\n4byte   - ??? (0)\n\nPPTH    - file path\n4byte   - head size (16)\n4byte   - tag size\n4byte   - data length\ndata_bytes - file path in UTF16 (big endian) \\0 terminated\n\nPWV3    - High resolution Wave display data\n4byte   - head size (24)\n4byte   - tag size\n4byte   - ??? (1)\n4byte   - data size\n4byte   - ??? (0x0096 0000)\n  &gt;entries&gt;\n      3bit  - color \n      5bit  - height\n</pre>\n<p>When I was reversing, there were no PKEY in the files, so I don't know what it is for (and only seems to have 0 in it on the PC)</p>\n<p>So the BPM values are stored in the PQTZ tag (in dynamic mode, you can have different BPMs during the same song, so it makes sense)</p>\n</div>",
            "votes": "7",
            "user": "CodeKiller",
            "time": "Jul 18, 2014 at 12:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The file format seems, as you found out, to consist of headers that have a tag. Each of these headers seems to be 16+ byte, with 4 bytes for the tag, 4 bytes for the length of the header, 4 bytes for the size of header + data, and 4 bytes that i'm not sure about. Unfortunately, these length bytes are <em>big endian</em>, which made me think the bpm could be stored in big endian IEEE float as well, which could be the reason you didn't find anything.</p>\n<p>The first header, PMAI. seems to be some kind of envelope (its length field is the size of the file itself), the rest of the headers seem to various forms of data content.</p>\n<p>I wrote a small program to dump the section names and lengths (please don't use it as an example for good style!):</p>\n<pre><code>    #include &lt;stdio.h&gt;\n    #include &lt;arpa/inet.h&gt;\n\n    int main(int argc, char **argv) {\n            analyze(argv[1]);\n    }\n\n    int analyze(char *filename) {\n            FILE *fp;\n            struct {\n                    char tag[4];\n                    int  x0;\n                    int  x1;\n                    int  x2;\n            }  header;\n            int length;\n\n            if ((fp=fopen(filename, \"rb\"))==NULL) {\n                    perror(filename); return;\n            }\n            while (fread(&amp;header, sizeof header, 1, fp)) {\n                    header.x0=ntohl(header.x0);\n                    header.x1=ntohl(header.x1);\n                    header.x2=ntohl(header.x2);\n                    printf(\"%04x %4.4s: %08x (%06d) | %08x (%06d) | %08x (%06d)\\n\",\n                            ftell(fp)-sizeof(header),\n                            header.tag,\n                            header.x0, header.x0,\n                            header.x1, header.x1,\n                            header.x2, header.x2\n                    );\n                    if (!memcmp(header.tag, \"PMAI\", 4)) {   // outer container\n                            length=header.x0;               // just skip header\n                    } else if (!memcmp(header.tag, \"PPTH\", 4)) {\n                            int i;\n                            for (i=0; i&lt;header.x2; i+=2) {\n                                    getc(fp);\n                                    putchar(getc(fp));\n                            }\n                            putchar('\\n');\n                            continue;\n                    } else {\n                            length=header.x1;               // else skip data\n                    }\n                    fseek(fp, length-sizeof(header), 1);\n            }\n    }\n</code></pre>\n<p>which produces the following output:</p>\n<pre><code>    $ ./sections ANLZ0000.DAT\n    0000 PMAI: 0000001c (000028) | 000028fc (010492) | 00000001 (000001)\n    001c PPTH: 00000010 (000016) | 00000100 (000256) | 000000f0 (000240)\n    E:\\music\\247 Hardcore\\[+singles]\\[247HC055] [12B] Al Storm Ft. Malaya - Everytime We Say Goodbye (Technikore Remix).mp3\n    011c PVBR: 00000010 (000016) | 00000654 (001620) | 00000000 (000000)\n    0770 PQTZ: 00000018 (000024) | 00001f40 (008000) | 00000000 (000000)\n    26b0 PWAV: 00000014 (000020) | 000001a4 (000420) | 00000190 (000400)\n    2854 PWV2: 00000014 (000020) | 00000078 (000120) | 00000064 (000100)\n    28cc PCOB: 00000018 (000024) | 00000018 (000024) | 00000001 (000001)\n    28e4 PCOB: 00000018 (000024) | 00000018 (000024) | 00000000 (000000)\n\n    $ ./sections ANLZ0000.EXT\n    0000 PMAI: 0000001c (000028) | 0000cf56 (053078) | 00000001 (000001)\n    001c PPTH: 00000010 (000016) | 00000100 (000256) | 000000f0 (000240)\n    E:\\music\\247 Hardcore\\[+singles]\\[247HC055] [12B] Al Storm Ft. Malaya - Everytime We Say Goodbye (Technikore Remix).mp3\n    011c PWV3: 00000018 (000024) | 0000ce26 (052774) | 00000001 (000001)\n    cf42 PKEY: 00000014 (000020) | 00000014 (000020) | 0000000c (000012)\n</code></pre>\n<p>So, PMAI is the container. PPTH is the name of the MP3 file. PVBR is probably information about variable bit rate, PQTZ the quantization, and PWAV, PWV2 and PWV3 various wave forms. Which leaves only PCOB and PKEY to possibly contain the bitrate. Unfortunately, if you look at the hex dump of these:</p>\n<pre><code>    000028c0  xx xx xx xx xx xx xx xx xx xx xx xx 50 43 4f 42   ............PCOB\n    000028d0  00 00 00 18 00 00 00 18 00 00 00 01 00 00 00 00   ................\n    000028e0  ff ff ff ff 50 43 4f 42 00 00 00 18 00 00 00 18   ....PCOB........\n    000028f0  00 00 00 00 00 00 00 00 ff ff ff ff               ............\n\n    0000cf40  xx xx 50 4b 45 59 00 00 00 14 00 00 00 14 00 00   ..PKEY..........\n    0000cf50  00 0c 00 00 00 00\n</code></pre>\n<p>it seems that PCOB contains 00 00 00 00 ff ff ff ff, and PKEY has 00 00 00 00. None of these look like they could mean 170.</p>\n<p><a href=\"http://forums.pioneerdj.com/entries/20118251-Read-this-thread-before-posting-for-help-with-Rekordbox-\" rel=\"nofollow\">This article</a> says 'If rekordbox crashes on startup, rename database.backup.edb to database.edb, if it still crashes, remove all the datafiles'. Since the BPM don't seem to be stored in the ANLZ.* files - do you have a database.edb as well? Could the BPM be stored there?</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "May 11, 2014 at 15:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Evan Purkhiser",
                    "text": "<span class=\"comment-copy\">Thank you! I feel a little silly for not realizing it could be stored somewhere else. The software lets you set the path for where it should store analyzed data, but always sticks it's edb file in the users AppData. Anyway, the edb file looks like it's definitely the file that contains the BPM, as I see (what looks like a field definition) named \"BPM\". <a href=\"https://docs.google.com/file/d/0B2TT08R8boDIS2V4WjJfWVZSN3c/edit\" rel=\"nofollow noreferrer\">Here is the edb file</a>. Doing a bit of research it looks like the extension is commonly used for MS Outlooks \"Exchange Databse\" file, but that seems silly.</span>",
                    "time": null
                },
                {
                    "user": "Evan Purkhiser",
                    "text": "<span class=\"comment-copy\"><a href=\"http://forums-archive.pioneerdj.com/eve/forums/a/tpc/f/240103214/m/7560086126\" rel=\"nofollow noreferrer\">According to this</a> the edb file is not an open format.</span>",
                    "time": null
                },
                {
                    "user": "James Elliott",
                    "text": "<span class=\"comment-copy\">Wow, Evan, we’ve come a long way since you asked this (I didn’t realize it was you who had asked this question—which I’d seen when starting the research that led to dysentery—when I first heard from you). We have the wire protocol pretty well figured out and can gather this data directly from Pioneer hardware over the network; details are written up in <a href=\"https://github.com/brunchboy/dysentery/blob/master/doc/Analysis.pdf\" rel=\"nofollow noreferrer\">github.com/brunchboy/dysentery/blob/master/doc/Analysis.pdf</a> but I would still love to be able to do offline analysis from the files on a thumb drive. All we need is someone to figure out the edb files for the metadata. Any hope?</span>",
                    "time": null
                },
                {
                    "user": "CodeKiller",
                    "text": "<span class=\"comment-copy\">Hi, James, I would like to help, as I have already started some reversing but abandoned because lack of time and motivation. As you may know, EDB is a database format (deviceSQL) which was available for try a long time ago, but no more (haven't found the program anywhere). Most of the metadata are in file.DAT and file.EXT, as described above.. All my research is completely black-box, so fully legal (AFAIK).</span>",
                    "time": null
                },
                {
                    "user": "James Elliott",
                    "text": "<span class=\"comment-copy\">That would be fantastic! Right now people running shows who want to work with metadata and a full set of CDJs need to slowly gather all the metadata over the network from a CDJ before the DJs mount the same media on all of the CDJs. Being able to read it directly from the memory stick before the show would be a huge help.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The EDB format is used by Microsoft's Extensible Storage Engine (ESE) to provide a storage back-end to a number of applications and services (Exchange, Active Directory, Desktop Search, Windows Live Mail, etc.)</p>\n<p>Although the EDB format itself is not documented, it is well supported through a <a href=\"https://msdn.microsoft.com/en-us/library/5c485eff-4329-4dc1-aa45-fb66e6554792.aspx\" rel=\"nofollow\">Windows API</a>.</p>\n<p>You can also access the contents of an EDB file through <a href=\"https://github.com/libyal/libesedb\" rel=\"nofollow\">libesedb</a>.</p>\n<p>If all you want to do is look through the contents of an EDB file in a human-readable manner, the <a href=\"http://www.woanware.co.uk/forensics/esedbviewer.html\" rel=\"nofollow\">EseDbViewer</a> tool is very good.</p>\n</div>",
            "votes": "1",
            "user": "Ferruccio",
            "time": "Feb 13, 2015 at 12:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Yevgeny Simkin",
                    "text": "<span class=\"comment-copy\">Hi - I realize this answer if 5 years old so I'm not expecting a whole lot of the info to still be relevant. I'm trying to do something similar as the OP only I'm interested in cracking open the playlist data in Rekordbox. Do you have any thoughts on which file has that and what the best way to read it would be?</span>",
                    "time": null
                },
                {
                    "user": "laker93",
                    "text": "<span class=\"comment-copy\">Hi @YevgenySimkin - did you make any progress on this? I'm trying to do something similar. Unfortunately opening the datafile.edb with libesedb does not work (see my post below).</span>",
                    "time": null
                }
            ]
        }
    ]
}