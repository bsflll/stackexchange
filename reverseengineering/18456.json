{
    "title": "How to override c++ string class with LD_PRELOAD",
    "link": "https://reverseengineering.stackexchange.com/questions/18456/how-to-override-c-string-class-with-ld-preload",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i am trying to override predefined functions such as strcmp, getenv, etc.\ni already override some of them using LD_PRELOAD options.\nbut i can't override string class, how can i override c++ string class</p>\n<p>i already tried something like this;</p>\n<pre><code>class string{\n    char* str;\npublic:\n    string (char* str2){\n        str = str2;\n        std::cout &lt;&lt; str2 &lt;&lt; std::endl ;\n    }\n    bool operator==(char* str2)  {\n        std::cout &lt;&lt; \"c++ =&gt; \" &lt;&lt; str &lt;&lt; \"==\" &lt;&lt; str2 &lt;&lt; std::endl;\n        return false; \n    }\n    compare(char* str2)  {\n        std::cout &lt;&lt; \"c++ =&gt; \" &lt;&lt; str &lt;&lt; \"==\" &lt;&lt; str2 &lt;&lt; std::endl;\n        return 0;\n    }\n};  \n</code></pre>\n<p>but it doesn't work i can't print the string that compared or even defined.</p>\n<p>compile;</p>\n<pre><code>g++ -g -Wall -shared -fPIC -ldl -o bypasscpp.so bypass.cpp\n</code></pre>\n<p>And running program with;</p>\n<pre><code>LD_PRELOAD=\"./bypasscpp.so\" ./app\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c++",
        "function-hooking",
        "decompile",
        "gcc"
    ],
    "user": "Mustafa Akdeniz",
    "time": "Jun 7, 2018 at 8:05",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">It seems you're trying to achieve something else and I feel this may not be the best way to achieve it. You may want to consider describing your end goal and look for alternative solutions.</span>",
            "time": null
        },
        {
            "user": "Mustafa Akdeniz",
            "text": "<span class=\"comment-copy\">@NirIzr i already tried many different solutions this is my last solution. I need to override these classes.</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">@Mustafa Adeniz Are these class methods virtual ?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@MustafaAkdeniz: seriously, Nirlzr is right. If you (also!) described what you want to achieve rather than prescribing a particular method, we would be in a better position to help. Just because this is your last straw doesn't mean there aren't better ways to achieve what you want. Why else would you be asking here?</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@malikcjm can you please put it in the answer box for future visitors?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are you trying to override <code>std::string</code>? Please check <a href=\"https://en.cppreference.com/w/cpp/string/basic_string\" rel=\"nofollow noreferrer\">https://en.cppreference.com/w/cpp/string/basic_string</a>. <code>std::string</code> is just a <code>typedef</code> for <code>std::basic_string&lt;char&gt;</code> which means that <code>std::string</code> is not dynamically linked. In other words those methods you try to override are statically linked into you <code>./app</code>.</p>\n</div>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Jun 7, 2018 at 8:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\"><code>std::string</code> is a name for the <code>char</code>-<i>specialization</i> of the <code>std::basic_string</code> template class. And while it can be statically linked, it is also provided as a function by the <code>libstdc++6.so</code> as evidenced by running <code>readelf --dyn-syms /usr/lib/x86_64-linux-gnu/libstdc++.so.6|awk '$4 ~ /^FUNC/ {print $8}'|cut -d @ -f 1|c++filt|grep 'std::basic_string&lt;char'</code> (tested on Ubuntu 16.04).</span>",
                    "time": null
                }
            ]
        }
    ]
}