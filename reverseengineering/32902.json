{
    "title": "What is the meaning of *((_DWORD *)",
    "link": "https://reverseengineering.stackexchange.com/questions/32902/what-is-the-meaning-of-dword",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I disassemble some code using IDA Pro and get the pseudo-code. It showed something like below.\n*((_DWORD *)a1 + 150) = 3;\n*(_DWORD *)(a1 + 604) = 1;\nI can't understand what is happening for this two code, anybody can explainï¼Ÿ</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "158",
    "tags": [
        "ida"
    ],
    "user": "yepochangfeng",
    "time": "Apr 17, 2024 at 12:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is pretty much standard C representation\n<code>*((_DWORD *)a1 + 150) = 3;</code> means <code>a1</code> is a pointer to <code>_DWORD</code> and we dereference the 150th member of the array with base <code>a1</code>\nNote that <code>*(_DWORD *)(a1 + 604) = 1;</code> the order of brackets is a bit different and assuming the type of <code>a1</code> - I guess its dereferencing the 151st element since <code>sizeof(_DWORD)</code> is 4 and 604 = 151 x 4.</p>\n<p>You can pretty much recreate this</p>\n<pre class=\"lang-c prettyprint-override\"><code>void f(int * a) {\n    a[150] = 3;\n    a[151] = 1;\n}\n\nint main() {\n    int x[256];\n    f(x);\n}\n</code></pre>\n<p>compile this - alternatively <a href=\"https://gcc.godbolt.org/z/YPzs6bdaY\" rel=\"nofollow noreferrer\">gcc.godbolt</a> here</p>\n<pre class=\"lang-bash prettyprint-override\"><code>$ gcc -O1 -o test test.c\n</code></pre>\n<p>loading this in ida and decompiling</p>\n<pre class=\"lang-c prettyprint-override\"><code>void __fastcall f(__int64 a1)\n{\n  *(_DWORD *)(a1 + 600) = 3;\n  *(_DWORD *)(a1 + 604) = 1;\n}\n</code></pre>\n<p>You can press <kbd>Y</kbd> after clicking on a1 and change the type of <code>a1</code> to <code>int *</code> and get this</p>\n<pre class=\"lang-c prettyprint-override\"><code>void __fastcall f(int *a1)\n{\n  a1[150] = 3;\n  a1[151] = 1;\n}\n</code></pre>\n<p>Note that this is not always true - <code>a1</code> could be a pointer to a struct and the code could be changing a member.</p>\n</div>",
            "votes": "3",
            "user": "sudhackar",
            "time": "Apr 18, 2024 at 6:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}