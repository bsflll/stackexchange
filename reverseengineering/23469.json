{
    "title": "Way to get basic blocks of a binary using Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/23469/way-to-get-basic-blocks-of-a-binary-using-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using ghidra to do some reverse engineering of an ARM binary. I am wondering whether there is a way to get the basic blocks related to all the listing. Is there a function through the IDE or a script through the script manager that I could used in order to get basic blocks at least within a function. Though I found scripts to decompile the binary I couldn't find a function that listed the basic blocks. Apart from ghidra is there any other reverse engineering tools that would help me to achieve this job? Thank you!</p>\n</div>",
    "votes": "6",
    "answers": 4,
    "views": "3k",
    "tags": [
        "binary-analysis",
        "firmware",
        "radare2",
        "ghidra"
    ],
    "user": "hEShaN",
    "time": "Mar 20, 2020 at 1:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can obtain the list of all defined basic blocks using <a href=\"https://ghidra.re/ghidra_docs/api/ghidra/program/model/block/BasicBlockModel.html\" rel=\"noreferrer\"><code>BasicBlockModel</code></a></p>\n<h3>Example</h3>\n<pre><code>from ghidra.program.model.block import BasicBlockModel\nfrom ghidra.util.task import TaskMonitor\n\nbbm = BasicBlockModel(currentProgram)\nblocks = bbm.getCodeBlocks(TaskMonitor.DUMMY)\nblock = blocks.next()\n\nwhile block:\n    print \"Label: {}\".format(block.name)\n    print \"Min Address: {}\".format(block.minAddress)\n    print \"Max address: {}\".format(block.maxAddress)\n    print\n    block = blocks.next()\n</code></pre>\n<h3>Output</h3>\n<pre><code>Label: LAB_0048b428\nMin Address: 0048b428\nMax address: 0048b43f\n\nLabel: httpStringPut\nMin Address: 0048b440\nMax address: 0048b46b\n\nLabel: 0048b46c\nMin Address: 0048b46c\nMax address: 0048b47f\n\nLabel: LAB_0048b480\nMin Address: 0048b480\nMax address: 0048b4b3\n\nLabel: httpBoundaryGet\nMin Address: 0048b4c0\nMax address: 0048b4cf\n\n&lt;snip&gt;\n</code></pre>\n<h2>Update</h2>\n<p>If you want to print disassembly of the basic blocks you can modify the script as</p>\n<pre><code>from ghidra.program.model.block import BasicBlockModel\nfrom ghidra.util.task import TaskMonitor\n\ndef print_disassembly(block):\n    listing = currentProgram.getListing()\n    ins_iter = listing.getInstructions(block, True)\n\n    while ins_iter.hasNext():\n        ins = ins_iter.next()\n        print \"{} {}\".format(ins.getAddressString(False, True), ins)\n\nbbm = BasicBlockModel(currentProgram)\nblocks = bbm.getCodeBlocks(TaskMonitor.DUMMY)\nblock = blocks.next()\n\nwhile block:\n    print_disassembly(block)\n    block = blocks.next()\n    print\n</code></pre>\n<h3>Output</h3>\n<pre><code>00409fcc lui gp,0xb\n00409fd0 addiu gp,gp,0x68b4\n00409fd4 addu gp,gp,t9\n00409fd8 addiu sp,sp,-0x20\n00409fdc sw gp,0x10(sp)\n00409fe0 sw ra,0x1c(sp)\n00409fe4 sw gp,0x18(sp)\n00409fe8 bal 0x00409ff0\n00409fec _nop\n\n00409ff0 lui gp,0x4c\n00409ff4 addiu gp,gp,0x880\n00409ff8 lw t9,-0x7fe8(gp)\n00409ffc nop\n0040a000 addiu t9,t9,-0x5e80\n0040a004 jalr t9\n0040a008 _nop\n0040a00c lw gp,0x10(sp)\n0040a010 nop\n0040a014 bal 0x0040a01c\n0040a018 _nop\n\n&lt;snip&gt;\n</code></pre>\n</div>",
            "votes": "8",
            "user": "0xec",
            "time": "Mar 20, 2020 at 21:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "hEShaN",
                    "text": "<span class=\"comment-copy\">Is there a method that could help me to get the assembly mnemonics that belong to each basic block? <code>block.getAddresses(True)</code> will give me an iterator, but what I need is a set of mnemonics that belong to the basic block</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@hEShaN Check updated answer.</span>",
                    "time": null
                },
                {
                    "user": "Peter Teoh",
                    "text": "<span class=\"comment-copy\">bravo 0xec for the answer!!!!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>@0xec's answer is great. This script will help you get blocks function wise.</p>\n<pre><code>from ghidra.program.model.block import BasicBlockModel\n\nblockiterator = BasicBlockModel(currentProgram).getCodeBlocks(monitor)\n# dictionary contains function wise basic block information\nfunctions = {}\n\ndef add_block(function, block):\n    if function not in functions:\n         functions[function] = []\n    functions[function].append(block)\n\n# For each block, look through the function list until we find a match\nwhile blockiterator.hasNext():\n    cur_block = blockiterator.next().getMinAddress()\n    function = getFirstFunction()\n    found = False\n\n    # Search functions until we find a match or run out of functions\n    while function is not None:\n        b = function.getBody()\n        if b.contains(cur_block):\n            add_block(function.getName(), cur_block)\n            found=True\n            break\n\n        # Update function to next and loop again\n        function = getFunctionAfter(function)\n\n    # Done searching functions. If we never found it, add to unknown list\n    if not found:\n        add_block(\"_unknown\", cur_block)\n\nprint(functions)\n</code></pre>\n</div>",
            "votes": "5",
            "user": "R4444",
            "time": "Mar 20, 2020 at 16:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>0xec has answered you but if you are interested in functions you can iterate as below </p>\n<pre><code>#TODO Lists Functions in a given program\n#@author  blabb\n#@category _NEW_\n\nfuncs = currentProgram.getFunctionManager().getFunctions(True)\nf1 = funcs.next()\nprint(\"Function Name\",f1.getName())\nprint(\"Function Body\" , f1.getBody())\nprint(\"Function Entry\" , f1.getEntryPoint())\nprint(\"Functions Calls\",f1.getCalledFunctions(ghidra.util.task.TaskMonitor.DUMMY))\nprint(\"Function is Called From\",f1.getCallingFunctions(ghidra.util.task.TaskMonitor.DUMMY))\n</code></pre>\n<p>will result in details  as below for the first function use hasnext() or while( next)  to \nloop </p>\n<pre><code>functions.py&gt; Running...\n('Function Name', u'MmFreeIndependentPages')\n\n('Function Body', [[140001010, 140001172] [1401d4c1a, 1401d4c8c] ])\n\n('Function Entry', 140001010)\n\n('Functions Calls', [MiReturnPoolCharges, MiPteInShadowRange, memset, MiIsPfnFromSlabAllocation, \nMiWritePteShadow,MI_READ_PTE_LOCK_FREE,MiLockAndDecrementShareCount,MiReleasePtes, MiPteHasShadow])\n\n('Function is Called From', [MmFreeIsrStack, FUN_14098fe9c, IopLiveDumpAllocateDumpBuffers, \nIopLiveDumpWriteDumpFile, KiStartDynamicProcessor, IopLiveDumpWriteDumpFileWithHvPages,   \nHvlDeleteProcessor,IopLiveDumpFreeDumpBuffers,ExDeletePoolTagTable, HvlStartBootLogicalProcessors,  \nKeStartAllProcessors, HvlpInitializeHvCrashdump, IopLiveDumpReleaseResources])\n</code></pre>\n</div>",
            "votes": "4",
            "user": "blabb",
            "time": "Mar 20, 2020 at 15:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Pyhidra (<a href=\"https://github.com/dod-cyber-crime-center/pyhidra\" rel=\"nofollow noreferrer\">github</a>, <a href=\"https://pypi.org/project/pyhidra/\" rel=\"nofollow noreferrer\">website</a>) is another API for interacting with Ghidra using Python.</p>\n<p>Pyhidra can be used within Ghidra in addition to the built-in Python runtime, but when used standalone as in these examples, the <code>from ghidra</code> imports must be inside the context manager (<code>with pyhidra.open_program(...</code>) as this essentially takes the place of opening Ghidra and loading a program.</p>\n<p>Here are some of the answers to this question, ported to Python 3.6+ and Pyhidra for standalone use:</p>\n<h2>0xec (1)</h2>\n<pre class=\"lang-py prettyprint-override\"><code>import pyhidra\nprogram = 'path/to/my.exe'\n\nwith pyhidra.open_program(program) as flat_api:\n  from ghidra.program.model.block import BasicBlockModel\n  from ghidra.util.task import TaskMonitor\n  monitor = TaskMonitor.DUMMY\n  currentProgram = flat_api.currentProgram\n  for b in BasicBlockModel(currentProgram).getCodeBlocks(monitor):\n    print(f'Label: {b.name}')\n    print(f'Min Address: {b.minAddress}')\n    print(f'Max Address: {b.maxAddress}')\n    print()\n</code></pre>\n<h2>0xec (2)</h2>\n<pre class=\"lang-py prettyprint-override\"><code>import pyhidra\nprogram = 'path/to/my.exe'\n\nwith pyhidra.open_program(program) as flat_api:\n  from ghidra.program.model.block import BasicBlockModel\n  from ghidra.util.task import TaskMonitor\n  monitor = TaskMonitor.DUMMY\n  currentProgram = flat_api.currentProgram\n  for block in BasicBlockModel(currentProgram).getCodeBlocks(monitor):\n      listing = currentProgram.getListing()\n      for ins in listing.getInstructions(block, True):\n          print(f'{ins.getAddressString(False, True)} {ins}')\n\n      print()\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Alex Shroyer",
            "time": "Oct 17, 2023 at 19:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}