{
    "title": "How to retrieve generically memory reads of an input and determine all relevant offsets?",
    "link": "https://reverseengineering.stackexchange.com/questions/23367/how-to-retrieve-generically-memory-reads-of-an-input-and-determine-all-relevant",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to record all memory read operations that are performed by an application on a given input file, to help infer which specific parts of an input are relevant for the specific execution that opens the input. </p>\n<p>I'm trying to achieve this for Windows applications, whereas the applications itself can be <code>x86</code> or <code>x64</code>, and the input is not of a specific format (e.g. solution should not only work with <code>JPG</code>, but also <code>PNG</code> or <code>XYZ</code>). The solution is intended to work for applications without access to the source code (binaries only, no symbols).</p>\n<p><strong>An example</strong></p>\n<p>Input <code>foo.bar</code>:</p>\n<ul>\n<li>Input file is <code>100</code> bytes long, binary format.</li>\n</ul>\n<p>Program n:</p>\n<ul>\n<li><p>Can be called like <code>&gt; Program.exe foo.bar</code>, or through <kbd>File</kbd> &gt; <kbd>Open</kbd> &gt; <kbd>foo.bar</kbd></p></li>\n<li><p>Opens foo.bar and parses offsets <code>x</code>, <code>y</code>, and <code>z</code> and does something with it (e.g. convert to something else, output somewhere, do some arithmetic with it and return result, etc.). For input <code>foo.bar2</code>, the offsets that are worked with might be different.</p></li>\n</ul>\n<p><strong>Potential problems I can think of:</strong></p>\n<ul>\n<li><p>If the developer uses something like <code>fseek (SetFilePointer?)</code>, they would go directly to the relevant offset within the input. However, in many cases it might be more likely to open the whole input/file and then go to offsets based on other specific values within that input by using something like <code>offset_n+34</code>.</p></li>\n<li><p>There are multiple methods how an input file can be opened or accessed by an application (<code>OpenFile</code>, <code>CreateFileA/W</code>, <code>MapViewOfFile</code>, <code>OpenFileMappingA</code>, etc.)</p></li>\n<li><p>Speed might be an issue if there are many read operations (however, in my case I don't care too much about performance).</p></li>\n</ul>\n<p>As per my current understanding, what I could do as a start is to:</p>\n<p>1) Research the specific Windows APIs for file opening/handling</p>\n<p>2) Set a breakpoint on them and retrieve the parameters</p>\n<p>3) From here on, how can I determine or map the specific offsets within an input and the program access on it?</p>\n<p>Is there any script or tool that already does something like this, e.g. by relying on WinDbg or DBI frameworks like DynamoRIO or PIN?</p>\n<p>If not, I'd really appreciate if someone can point me towards specific resources or key words that would help me in better understand how to approach this problem and come up with a pratical solution. Any help would be much appreciated.</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "86",
    "tags": [
        "debugging",
        "dynamic-analysis"
    ],
    "user": "MmM",
    "time": "Mar 1, 2020 at 17:59",
    "comments": [
        {
            "user": "macro_controller",
            "text": "<span class=\"comment-copy\">I think a general concept you are talking about called <code>taint analysis</code>.</span>",
            "time": null
        }
    ],
    "answers_data": []
}