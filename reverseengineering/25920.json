{
    "title": "Static Binary in Windows",
    "link": "https://reverseengineering.stackexchange.com/questions/25920/static-binary-in-windows",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am learning more about binary exploitation on windows. But I saw while revering a binary that you can create static binaries in windows too just like in Linux. It was really ugly. if I would be on Linux, I could just use the file command to know if it is dynamic or static. but now I am in windows and do I have some way to know if the binary is static before reversing it.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "952",
    "tags": [
        "windows",
        "binary-analysis",
        "static-analysis",
        "patch-reversing"
    ],
    "user": "lucky thandel",
    "time": "Sep 17, 2020 at 16:28",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">You can see the imported libraries and functions via <code>dumpbin /imports filename</code> (dumpbin is included e.g. in Visual Studio Community edition). If the imports only contain Windows system DLLs you can consider the executable as static.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@luckythandel you need to be more specific. What do you consider statically linked on Windows? Using the terminology in MSVC it would be binaries using only system-DLLs or well-known DLLs (which includes <code>msvcrt.dll</code>, something compatible to the original MSVC6 runtime). The thing is that a <i>purely</i> statically linked binary as mentioned in Igor's answer should not even work, because to the best of my knowledge anything running in the Win32 subsystem depends on initialization done by importing at the very least <code>kernel32.dll</code>. Or do you mean native executables? Then Igor's answer stands.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Unlike Linux, syscall numbers can and do change between Windows versions, so any program using raw syscalls would not run properly on a different OS release. The only officially supported API is provided by the system DLLs such as <code>kernel32.dll</code>, <code>user32.dll</code> and so on. So while fully static Windows binaries are possible, they are not practical and so are very rare.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 19, 2020 at 13:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}