{
    "title": "Deobfuscating overlapping x86 assembly instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/17246/deobfuscating-overlapping-x86-assembly-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to solve a reverse engineering challenge (<a href=\"http://crackmes.cf/users/beatrix/beaba/\" rel=\"nofollow noreferrer\">http://crackmes.cf/users/beatrix/beaba/</a>) and am having trouble with the obfuscation. Below is a piece of code that gets executed almost immediately after having reached the entry point. After having reached the call instruction, it seems that the call is calling the second byte of the second instruction listed below.</p>\n<pre><code>0000000000403789 | E8 01 00 00 00           | call beaba.40378F\n000000000040378E | 04 E8                    | add al,E8\n0000000000403790 | 01 00                    | add dword ptr ds:[rax],eax \n0000000000403792 | 00 00                    | add byte ptr ds:[rax],al\n0000000000403794 | D0 83 44 24 08 12        | rol byte ptr ds:[rbx+12082444],1\n000000000040379A | 83 04 24 0A              | add dword ptr ss:[rsp],A\n</code></pre>\n<p>After decoding the bytes starting from the second byte of the second instruction, it translated to this:</p>\n<pre><code>e8 01 00 00 00          call   0x6\nd0 83 44 24 08 12       rol    BYTE PTR [rbx+0x12082444],1\n83 04 24 0a             add    DWORD PTR [rsp],0xa\nc3                      ret\n</code></pre>\n<p>This seems to be a local call I thought, I wasn't sure, which calls the function starting from the sixth byte after the call instruction (again, I'm not sure), which would mean that it calls the instructions starting from the byte with value 0x12. This translated to:</p>\n<pre><code>00 00                   add    BYTE PTR [rax],al\n00 f4                   add    ah,dh\n83 44 24 08 12          add    DWORD PTR [rsp+0x8],0x12\n83 04 24 0a             add    DWORD PTR [rsp],0xa\nc3                      ret\n</code></pre>\n<p>However, this is not so practical to do if this were to go on for 100 times. </p>\n<p>Now my question is: is this the correct way to analyze a program, or are there better/more efficient methods? I'm using x64dbg to analyze it and after the program starts calling overlapping instructions and then pauses at a certain instruction, maybe because that's the first instruction that does not overlap and it breaks.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "obfuscation",
        "x86-64"
    ],
    "user": "user22977",
    "time": "Jan 22, 2018 at 9:30",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">x64dbg uses <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow noreferrer\">x64dbg</a> as its disassembly backend. You can check out the project and maybe use python to script such a solution which will recursively parse <code>call</code> to detect code sections.</span>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">Actually x64dbg uses ZyDis as the disassembly backend now. See <a href=\"https://x64dbg.com/blog/2017/10/18/goodbye-capstone-hello-zydis.html\" rel=\"nofollow noreferrer\">x64dbg.com/blog/2017/10/18/goodbye-capstone-hello-zydis.html</a></span>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">If you plan to implement your own analysis this blogpost might be helpful: <a href=\"https://x64dbg.com/blog/2016/07/27/Control-flow-graph.html\" rel=\"nofollow noreferrer\">x64dbg.com/blog/2016/07/27/Control-flow-graph.html</a></span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">are you sure execution reaches this call i see an exception being generated prior to this call so you may need to look into the handler  you may need to read about pdata , unwindinfo ,exception handling in x64 if you are using windbg .fnent will be your friend</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Advanced disassemblers solve this problem by performing a recursive traversal of the binary, i.e., they also look at possible jump/branch targets and disassemble from that location - even if the original linear scan indicated that the branch target was inside an instruction.</p>\n<p><a href=\"http://www.ollydbg.de/\" rel=\"nofollow noreferrer\">OllyDbg</a> as well as <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">IDA Pro</a> support recursive traversal. However, OllyDbg support for x64 seems to be still in development and x64 support is not included in the free (as beer) version of IDA Pro.</p>\n<p>See <a href=\"http://resources.infosecinstitute.com/linear-sweep-vs-recursive-disassembling-algorithm/\" rel=\"nofollow noreferrer\">this article</a> for more details.</p>\n</div>",
            "votes": "3",
            "user": null,
            "time": "Jan 22, 2018 at 2:14",
            "is_accepted": true,
            "comments": []
        }
    ]
}