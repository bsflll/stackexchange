{
    "title": "Adding section to PE binary using Stud_Pe",
    "link": "https://reverseengineering.stackexchange.com/questions/13995/adding-section-to-pe-binary-using-stud-pe",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to be able to accurately add a section to a binary by hand, without tools.</p>\n<p>I am using <a href=\"http://www.cgsoftlabs.ro/studpe.html\" rel=\"nofollow noreferrer\">Stud_Pe</a> for adding a section to a binary. While this work, I feel it's important to be able to do this myself or at least understand it in it's entirety. </p>\n<p>Added Section/Stud here called <strong>.test</strong> with a size of 0x2000 <a href=\"https://i.sstatic.net/yBBSo.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/yBBSo.png\"/></a> </p>\n<p>Something I noticed is that the when I do a bindiff on the newly added section There is always extra bytes added to this. Why is this? \n<a href=\"https://i.sstatic.net/SQ2bW.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/SQ2bW.png\"/></a></p>\n<p>I thought there might be a pattern but it seems random and the sizes have to be exact , so I am curious if someone already knows. </p>\n<p>Here is a difference list based on the bytes added. \nWhy is this happening? </p>\n<pre><code>0x2000 2  bytes\n0x3000 14 bytes\n0x4000 10 bytes\n0x5000 4  bytes\n0x6000 18 bytes\n0x7000 2  bytes\n0x8000 16 bytes\n</code></pre>\n<p>Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "pe",
        "binary",
        "section"
    ],
    "user": "LUser",
    "time": "Nov 20, 2016 at 0:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check this post out it may be helpful <a href=\"http://ge0-it.blogspot.fr/2012/08/adding-section-to-your-pe-easy-way.html\" rel=\"nofollow noreferrer\">http://ge0-it.blogspot.fr/2012/08/adding-section-to-your-pe-easy-way.html</a></p>\n<p>Code snippet from source above:</p>\n<pre><code>VOID PortableExecutable::AddSection(PortableExecutable::SectionHeader&amp; newSectionHeader) {\n    DWORD dwRawSectionOffset = (DWORD)GetFileSize();\n\n    /* Aligns dwRawSectionOffset to OptionalHeader.FileAlignment */\n    dwRawSectionOffset += this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment - (dwRawSectionOffset % this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment);\n\n    /* Does the whole header's length overflows OptionalHeader.SizeOfHeaders? */\n    if(\n        (sizeof(IMAGE_DOS_HEADER) + sizeof(IMAGE_NT_HEADERS) + (this-&gt;m_imageNtHeaders.FileHeader.NumberOfSections * sizeof(IMAGE_SECTION_HEADER)))\n        &gt; this-&gt;m_imageNtHeaders.OptionalHeader.SizeOfHeaders\n        ) {\n\n            /* If it's the case, add free space */\n            AddFreeSpaceAfterHeaders( this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment );\n\n            /* Adding 'FileAlignment' value to SizeOfHeaders fields then */\n            this-&gt;m_imageNtHeaders.OptionalHeader.SizeOfHeaders += this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment;\n\n    }\n\n    newSectionHeader.SetPointerToRawData(dwRawSectionOffset);\n\n    /* Adding the new section header */\n    this-&gt;m_sectionHeaders.push_back(newSectionHeader);\n\n    /* Incrementing the 'NumberOfSections' field */\n    ++this-&gt;m_imageNtHeaders.FileHeader.NumberOfSections;\n\n    /* Adding to SizeOfImage the SectionAlignment value */\n    this-&gt;m_imageNtHeaders.OptionalHeader.SizeOfImage += this-&gt;m_imageNtHeaders.OptionalHeader.SectionAlignment;\n\n    /* Rewriting the whole headers */\n    m_stream.seekg(this-&gt;m_imageDosHeader.e_lfanew, std::ios::beg);\n    m_stream.write((const char*)&amp;this-&gt;m_imageNtHeaders, sizeof(IMAGE_NT_HEADERS));\n\n    /* Rewriting the section headers then */\n    std::vector&lt;PortableExecutable::SectionHeader&gt;::iterator it =\n        this-&gt;m_sectionHeaders.begin();\n\n    while(it != this-&gt;m_sectionHeaders.end()) {\n        m_stream.write((const char*)&amp;it-&gt;ImageSectionHeader(), sizeof(IMAGE_SECTION_HEADER));\n        ++it;\n    }\n\n    /* Finally adding 'FileAlignment' bytes to the end of the file,\n    which actually corresponds to the section's memory space! */\n    m_stream.seekg(this-&gt;m_sectionHeaders.at( this-&gt;m_sectionHeaders.size()-1).GetPointerToRawData(), std::ios::beg);\n\n    char* bytes = new char[this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment];\n    ::memset(bytes, '\\0', this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment);\n    m_stream.write(bytes, this-&gt;m_imageNtHeaders.OptionalHeader.FileAlignment);\n    delete[] bytes;\n}\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Soufiane Tahiri",
            "time": "Nov 22, 2016 at 15:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}