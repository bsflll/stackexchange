{
    "title": "Android- hiding private keys in .so file",
    "link": "https://reverseengineering.stackexchange.com/questions/18014/android-hiding-private-keys-in-so-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on an application where we need to encrypt certain assets at compile time in Gradle. We then need to decrypt them with the same private key, so we are using a symmetric key system but we could go to an asymmetric system. The key issue is that we want to keep the keys in the APK somehow but store them securely. That way we don't have to make a server request for these private keys or a partner key in an asymmetric system. The APK file itself is fairly easy to reverse engineer and decompile, including the resources and the Java code.</p>\n<p>We are using a C library in our application, however. We are using a .so file of this library compiled for the ARM architecture. We use the SWIG interface from our application's main Java code to interact with this library. I am wondering if I can store the private keys in this library's source code and then access these keys via SWIG binding functions. I think this is the best solution for my problem because ARM .so files require a fancy commercial decompiler and knowledge of the ARM architecture to effectively reverse-engineer them. Thus making this method of getting the private keys pretty darn secure.</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "4k",
    "tags": [
        "decompilation",
        "c",
        "android",
        "apk",
        "software-security"
    ],
    "user": "georgetheevilman",
    "time": "Apr 16, 2018 at 17:44",
    "comments": [
        {
            "user": "JesusFreke",
            "text": "<span class=\"comment-copy\">You're wanting to access the key from java, right? In that case, one easy way to circumvent it would be to attach a debugger and grab the key once you've called the method to retrieve it.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">The practice of hard coding cryptographic keys has its own CWE entry: <a href=\"https://cwe.mitre.org/data/definitions/321.html\" rel=\"nofollow noreferrer\">cwe.mitre.org/data/definitions/321.html</a></span>",
            "time": null
        },
        {
            "user": "georgetheevilman",
            "text": "<span class=\"comment-copy\">how about doing all of the decryption and other stuff in the C code?</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">your \"pretty darn secure\" is trivially broken for most seasoned reverse engineers.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hiding the keys anywhere in the apk (including .so files) is definitely not enough to keep the keys secret for the long time. The code that can be executed definitely can be reverse engineered, and the key could be extracted - even without having fancy decompiler and knowing ARM architecture well (by the way, there is a <a href=\"https://retdec.com/\" rel=\"nofollow noreferrer\">non-commercial decompiler for arm32</a>). </p>\n<p>I strongly suggest you to read something about <a href=\"https://web.archive.org/web/20130717060858/http://joye.site88.net/papers/Joy08whitebox.pdf#\" rel=\"nofollow noreferrer\">white box cryptography</a> and search for the solution in this specific area which was developed in order to solve this kind of problems. </p>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "Apr 17, 2018 at 7:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If your application can decrypt the files, then you should assume that anyone sufficiently interested can do so as well. End of story.</p>\n<p>Obfuscation can slow people down, but it won't stop everyone, and it probably won't be as effective as you think it will be.</p>\n</div>",
            "votes": "7",
            "user": "Antimony",
            "time": "Apr 17, 2018 at 1:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>We are using a C library in our application, however. We are using a .so file of this library compiled for the ARM architecture. We use the SWIG interface from our application's main Java code to interact with this library. I am wondering if I can store the private keys in this library's source code and then access these keys via SWIG binding functions.</p>\n</blockquote>\n<p>I'm totally sure you can, but what stops someone from taking that C library and passing it through <code>objdump</code> or Radare and figuring out where your key is stored? With something like <a href=\"https://github.com/ReFirmLabs/binwalk\" rel=\"nofollow noreferrer\"><code>binwalker</code></a> it may require less skill than if it was in Java. If you store it as a string, <code>/usr/bin/strings</code> itself may pick it up.</p>\n<blockquote>\n<p>ARM .so files require a fancy commercial decompiler and knowledge of the ARM architecture</p>\n</blockquote>\n<p>Not really: <code>objdump</code> (<code>-marm</code>) and <code>radare</code> support ARM. If you've never played around with those give it a shot.</p>\n<ul>\n<li><a class=\"post-tag\" href=\"/questions/tagged/objdump\" rel=\"tag\" title=\"show questions tagged 'objdump'\">objdump</a></li>\n<li><a class=\"post-tag\" href=\"/questions/tagged/radare2\" rel=\"tag\" title=\"show questions tagged 'radare2'\">radare2</a></li>\n</ul>\n</div>",
            "votes": "3",
            "user": "Evan Carroll",
            "time": "Apr 17, 2018 at 3:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}