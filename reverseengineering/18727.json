{
    "title": "how to calculate max possible stack size utilization",
    "link": "https://reverseengineering.stackexchange.com/questions/18727/how-to-calculate-max-possible-stack-size-utilization",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there any elegant way to calculate the maximum possible stack depth utilization of a program, using IDAPython?</p>\n<p>currently my best approach is iterating through all functions and counting stack-increasing instructions.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "391",
    "tags": [
        "ida",
        "idapython",
        "stack"
    ],
    "user": "Yoav Danieli",
    "time": "Jul 8, 2018 at 14:05",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Are you looking for the max depth available to the program or the max depth actually utilized by the program? Also, what OS are you focused on?</span>",
            "time": null
        },
        {
            "user": "Yoav Danieli",
            "text": "<span class=\"comment-copy\">looking for max depth utilized by the program and it isn't OS dependent (lets say linux)</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">@YoavDanieli maximum depth actually utilized by a program is not the same as maximum possible stack depth utilization, as @NirIzr has pointed out. Please clarify what you are asking. Resource limits such as maximum stack size available to a process are OS dependent. See <a href=\"http://man7.org/linux/man-pages/man2/getrlimit.2.html\" rel=\"nofollow noreferrer\"><code>getrlimit(2)</code></a> for more on this.</span>",
            "time": null
        },
        {
            "user": "Yoav Danieli",
            "text": "<span class=\"comment-copy\">Yes, thanks, i think @NirIzr clarified this form me :)</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">What's worse is, they're context-dependent even on a single OS. Taking Windows, the limits vary vastly between what's allowed for a thread in user mode, in kernel mode <i>without</i> using user32 facilities and in kernel mode <i>with</i> using said facilities. The only thing that works, by my experience, is guesstimation.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDAPython-function <code>get_frame_size(ea)</code> gives size of stack in bytes.\nSo you can get max stack through all available functions:</p>\n<pre><code>\"0x%04X\" % max(get_frame_size(f) for f in Functions(0, BADADDR))\n</code></pre>\n</div>",
            "votes": "1",
            "user": "prusanov",
            "time": "Apr 6, 2020 at 13:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">Nite that it would be worth calculating the worst possible call depth (using cross references, likely as a directed graph). Special attention should be paid to recursive functions. You should also factor in a worst case for API calls.</span>",
                    "time": null
                }
            ]
        }
    ]
}