{
    "title": "How to find main() of Windows EXE with Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/28046/how-to-find-main-of-windows-exe-with-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm new to Ghidra, my goal is to add localizations for a small EXE program. The program was written in Visual Studio and has Russian dialogs, which I like to convert to English.</p>\n<p>I've loaded the EXE into Ghidra, it shows up a lot of information:</p>\n<ul>\n<li>visualstudio:unknown</li>\n<li>Portable Executable (PE)</li>\n<li>Little Endian</li>\n<li>and much more\nThen I let it analyze the program. After that, I'd like to find is the main() function. In the \"Symbol Tree\" under \"Exports\" or \"Functions\" there is only an \"entry\" function shown, and the decompile of this function makes no sense to me:</li>\n</ul>\n<pre><code>/* WARNING: Instruction at (ram,0x0045280e) overlaps instruction at (ram,0x0045280d)\n    */\n/* WARNING: Removing unreachable block (ram,0x004527db) */\n/* WARNING: Removing unreachable block (ram,0x00452823) */\n/* WARNING: Removing unreachable block (ram,0x004527a1) */\n\nulonglong entry(void)\n\n{\n  undefined8 uVar1;\n  ulonglong uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  \n  iVar4 = -1;\n  while (iVar4 != 0) {\n    iVar4 = 0;\n  }\n  uVar3 = 0;\n  iVar4 = -1;\n  while (iVar4 != 0) {\n    iVar4 = 0;\n  }\n  uVar1 = rdtsc();\n  iVar4 = 1;\n  do {\n    if (uVar3 == 0) {\n      uVar3 = 0;\n    }\n    else {\n      uVar3 = (uint)uVar1 | 2;\n    }\n    iVar5 = -1;\n    while (iVar5 != 0) {\n      iVar5 = 0;\n    }\n    iVar4 = iVar4 + -1;\n  } while (iVar4 != 0);\n  uVar2 = rdtsc();\n  uVar3 = (int)uVar2 - (uint)uVar1;\n  do {\n  } while (0x1000000 &lt; uVar3);\n  iVar4 = -1;\n  while (iVar4 != 0) {\n    iVar4 = 0;\n  }\n  iVar4 = -1;\n  while (iVar4 != 0) {\n    iVar4 = 0;\n  }\n  return uVar2 &amp; 0xffffffff00000000 | (ulonglong)uVar3;\n}\n</code></pre>\n<p>I don't get what this means, I somehow expected a whole function-tree with a lot of subs and stuff.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "windows",
        "decompilation",
        "ghidra",
        "exe"
    ],
    "user": "T-Regex",
    "time": "Jul 26, 2021 at 9:15",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Look at the disassembly, especially the mentioned removed blocks. It seems you canâ€™t trust this decompilation.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Wouldn't it be more logical to attempt and edit the dialog resources (provided the dialogs are embedded as resources) or additionally add English ones?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>that appears to be an antidebugging trick using rdtsc.<br/>\n(read date time stamp counter)  it is a monitonically increasing counter</p>\n<p>when the process is executing without any external interference like a debugger the difference between two successive readings will be small</p>\n<p>the loops look like junk interspersed in between</p>\n<p>this code block supposedly checks for that</p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jul 26, 2021 at 2:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}