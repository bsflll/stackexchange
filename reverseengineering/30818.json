{
    "title": "View user32.dll LoadStringA string ID's in IDA on MacOS like you can with Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/30818/view-user32-dll-loadstringa-string-ids-in-ida-on-macos-like-you-can-with-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm going through through Challenge 3 (Task 4) of Basic Malware RE: <a href=\"https://tryhackme.com/room/basicmalwarere\" rel=\"nofollow noreferrer\">https://tryhackme.com/room/basicmalwarere</a></p>\n<p>And in Ghidra after I do analysis, I can view the .rsrc area and it shows me all the strings laid out nicely with their uID's right next to them.</p>\n<p>In IDA, the closest thing I've gotten is going to the Strings menu -&gt; right click -&gt; Setup and checking <code>C-Style</code>, <code>Unicode C-Style (16 bits)</code>, <code>C-Style (32 bits)</code>. After that, I start to see some of the strings show up in the strings menu (whereas before I didn't see any strings from the resource side), but they don't look anywhere near as nice to search through, and I can't seem to find any references to the <code>uID</code> property as seen in Ghidra. (and referenced in the MSDN docs here: <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadstringa?redirectedfrom=MSDN\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadstringa?redirectedfrom=MSDN</a>)</p>\n<p>I've read online at various places, like here: <a href=\"https://medium.com/@obikag/tryhackme-basic-malware-re-room-writeup-8183730100b2\" rel=\"nofollow noreferrer\">https://medium.com/@obikag/tryhackme-basic-malware-re-room-writeup-8183730100b2</a> that you'd usually use something like Resource Hacker to load <code>user32.dll</code> and view the memory that way, however I'm on MacOS and can't run Resource Hacker.</p>\n<p>I am wondering if there's any way to view these resource String ID's in IDA like I can in Ghidra. (See screenshots)\n<a href=\"https://i.sstatic.net/2edZ6.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2edZ6.jpg\"/></a>\n<a href=\"https://i.sstatic.net/1KuuY.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/1KuuY.jpg\"/></a></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "391",
    "tags": [
        "ida",
        "ghidra",
        "strings"
    ],
    "user": "Joshua Terrill",
    "time": "Aug 24, 2022 at 22:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>By default IDA does not load PE resources as they rarely contain code or other content required for disassembly. You can enable [x] Load resources in the initial <em>Load new file</em> dialog but all it does is load the <code>.rsrc</code> section’s content; it won’t parse the resource data and mark up the strings but at least you’ll have the UTF-16 text somewhere.\nAn alternative option could be to use <a href=\"https://pypi.org/project/pefile/\" rel=\"nofollow noreferrer\">pefile</a> to <a href=\"https://github.com/erocarrera/pefile/blob/wiki/ReadingResourceStrings.md\" rel=\"nofollow noreferrer\">parse the strings from the file</a></p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 31, 2022 at 21:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}