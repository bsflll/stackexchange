{
    "title": "Output from gcc containing all included source code?",
    "link": "https://reverseengineering.stackexchange.com/questions/30631/output-from-gcc-containing-all-included-source-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Right now, I'm using a combination of <code>gcc -g</code> and the <code>objdump -S</code> modes to generate assembly code with debug source code interleaved. However, I'm having trouble correlating some of the functions that were in the executable to their original source because the final executable contains source code from many different files. Is there a way to get a debug pure source representation (with no assembly) of all of the functions in an executable, using the gcc toolchain? That is, I'm looking for the source that was used for all of the functions in my executable, arranged in the order that the functions appear in the executable, so that I can compare that source to the <code>objdump -S</code> output (which I'm also comparing to Ghidra and Binary Ninja output).</p>\n<p>Thanks for your time in responding!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "584",
    "tags": [
        "linux",
        "objdump",
        "gcc",
        "debug"
    ],
    "user": "dingo_kinznerhook",
    "time": "Jul 13, 2022 at 17:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not aware of any way to do what you're asking (INAE), however you could try this to obtain readable source using objdump:</p>\n<pre><code>objdump -l --source-comment &lt;file&gt;.o | grep -e '^\\/' -e '^#'\n</code></pre>\n<p>This will include the filename and line number for each line of source while excluding the assembly.</p>\n</div>",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jul 14, 2022 at 11:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "dingo_kinznerhook",
                    "text": "<span class=\"comment-copy\">This is super helpful even if it's not an exact match to what I was asking for.</span>",
                    "time": null
                }
            ]
        }
    ]
}