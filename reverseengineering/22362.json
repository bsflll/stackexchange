{
    "title": "How can I determine a module to which function is related with IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/22362/how-can-i-determine-a-module-to-which-function-is-related-with-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For example I have a function sub_7FFA95D8F120. I've checked out <strong>Views-&gt;Segments</strong> which shows .text segment. It seems that I am missing out something important. It would be great if someone explained or gave a link to explanation.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "619",
    "tags": [
        "ida",
        "binary-analysis"
    ],
    "user": "funkadelic",
    "time": "Oct 22, 2019 at 7:25",
    "comments": [
        {
            "user": "funkadelic",
            "text": "<span class=\"comment-copy\">I mean in debug process I have interaction between two libraries(Lib1 calls Lib2) and at some point I am in a function that I am interested in. And I wanted to know is my function from Lib1 or Lib2.</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">doesn't ida show you the module if it is externali I think ida differentiates imports with pink color  and sub is normally a prefix for a function that is  within the module being analysed  it iirc doesnt point to an external module  (and icould havewritten an answer but your questionis still  unclear evenafter your comment)</span>",
            "time": null
        },
        {
            "user": "funkadelic",
            "text": "<span class=\"comment-copy\">I didn't know that sub_ prefix is used for functions that belong to module that was analyzed. It makes sense now, because in most cases I generate function (with P hotkey) when I stop in the middle of unprocessed asm code(and new generated function also have sub_ prefix). Everything that wasn't processed at first doesn't belong to processed module :) Thanks for help</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>At debug time:</p>\n<ul>\n<li>segments belonging to runtime-loaded DLLs are marked with their names (<code>kernel32.dll</code> etc.),</li>\n<li>non-module areas (e.g. heap) have names like <code>debug038</code>,</li>\n<li>segments coming from the IDB retain their original names, </li>\n</ul>\n<p>so <code>.text</code> most likely belongs to the input .exe/.dll (whichever was used to create the IDB). You can also check the <em>Modules</em> view to see the start and size of each module in the process.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 22, 2019 at 15:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "funkadelic",
                    "text": "<span class=\"comment-copy\">Thank you! I forgot that Modules view have Base and Size info because usually I minimize it in order to see only module name(for search purposes). Also, remark about .text segment was useful.</span>",
                    "time": null
                }
            ]
        }
    ]
}