{
    "title": "Understanding assembly loop",
    "link": "https://reverseengineering.stackexchange.com/questions/2620/understanding-assembly-loop",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am having trouble understanding how this code knows when to stop looping. I am supposed to figure out what values are put into %edi. But I can't figure out how many times it loops.</p>\n<pre><code>0x40106e      movl   $0x2b,0xffffffdc(%ebp)\n0x401075      movl   $0x31,0xffffffe4(%ebp)\n0x40107c      movl   $0x74,0xffffffec(%ebp)\n0x401083      movl   $0x19,0xffffffe8(%ebp)\n0x40108a      movl   $0x7,0xffffffd8(%ebp)\n0x401091      movl   $0x14,0xffffffe0(%ebp)\n0x401098      mov    $0xdead,%edi\n0x40109d      mov    $0x2,%ecx\n0x4010a2      mov    %ecx,%esi\n0x4010a4      mov    $0x3,%ecx\n0x4010a9      mov    $0x2,%ebx\n0x4010ae      sub    %esi,%ebx\n0x4010b0      imul   $0xc,%ebx,%ebx\n0x4010b3      mov    $0x3,%edx\n0x4010b8      sub    %ecx,%edx\n0x4010ba      lea    0xffffffd8(%ebp),%eax\n0x4010bd      lea    (%ebx,%edx,4),%ebx\n0x4010c0      add    %ebx,%eax\n0x4010c2      mov    (%eax),%edi\n0x4010c4      loop   0x4010a9\n0x4010c6      mov    %esi,%ecx\n0x4010c8      loop   0x4010a2\n0x4010ca      mov    $0xbeef,%edi\n</code></pre>\n<p>Edit: I now understand the looping logic. However I am having a hard time following all the values getting moved around. I am stuck here <code>lea    0xffffffd8(%ebp),%eax</code> \nHow do I know what %ebp is?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly"
    ],
    "user": "duder",
    "time": "Aug 11, 2013 at 21:22",
    "comments": [
        {
            "user": "user15298",
            "text": "<span class=\"comment-copy\">I suggest you write new question regarding yr edit</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">\"lea 0xffffffd8(%ebp),%eax\" -&gt; eax=ebp+0xffffffd8, or \"eax=ebp-0x28\".  ebp will have been set earlier in the function.  It often looks like \"mov %esp,%ebp / sub $&lt;stack reserve&gt;,%esp\", so ebp points to the return address for the caller, and below ebp is space for local variables.  It's physical value can be determined only by a debugger at runtime.  It's relative value can be determined by looking earlier in the disassembly.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>there are 2 loops in the code:</p>\n<blockquote>\n<p>0x40109d      mov    $0x2,%ecx<br/>\n<strong><em>0x4010a2</em></strong>      mov    %ecx,%esi<br/>\n  0x4010a4      mov    $0x3,%ecx<br/>\n<strong>0x4010a9</strong>      mov    $0x2,%ebx<br/>\n  ...<br/>\n       first loop<br/>\n  ...<br/>\n  0x4010c4      <strong>loop   0x4010a9</strong><br/>\n  0x4010c6      mov    %esi,%ecx<br/>\n       second loop<br/>\n  0x4010c8      <strong><em>loop   0x4010a2</em></strong> </p>\n</blockquote>\n<ul>\n<li>first goes three times as <strong>3</strong> was moved into <strong>%ecx</strong> at 0x4010a4  </li>\n<li>second loop will go two times as 2 was moved into <strong>%ecx</strong> at 0x40109d and saved at %esi before %ecx was used further inside the first loop.</li>\n</ul>\n<p>In addition here is information about <a href=\"http://pdos.csail.mit.edu/6.828/2006/readings/i386/LOOP.htm\" rel=\"nofollow\">LOOP</a> opcode  </p>\n<blockquote>\n<p>0x4010ba      lea    0xffffffd8(%ebp),%eax</p>\n</blockquote>\n<p>This mean that %eax got the address from calculating  %ebp+0xffffffd8  </p>\n<blockquote>\n<p>0x4010bd      lea    (%ebx,%edx,4),%ebx</p>\n</blockquote>\n<p>This one is where %ebx = %ebx + %edx * 4</p>\n<blockquote>\n<p>0x4010c0      add    %ebx,%eax</p>\n</blockquote>\n<p>Here %ebx is added to %eax</p>\n<blockquote>\n<p>0x4010c2      mov    (%eax),%edi</p>\n</blockquote>\n<p>Finally %edi gets the data that %eax points to.</p>\n<p>A <a href=\"http://en.wikipedia.org/wiki/X86_assembly_language\" rel=\"nofollow\">small asm</a> reference. </p>\n</div>",
            "votes": "3",
            "user": "PhoeniX",
            "time": "Aug 11, 2013 at 21:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "duder",
                    "text": "<span class=\"comment-copy\">Thanks that is a good start for me! But I am now having trouble figuring out what values are put into %edi. Can you explain what happens here: lea    0xffffffd8(%ebp),%eax</span>",
                    "time": null
                }
            ]
        }
    ]
}