{
    "title": "Jump into the instructions, is it a case `objdump` can't handle?",
    "link": "https://reverseengineering.stackexchange.com/questions/4798/jump-into-the-instructions-is-it-a-case-objdump-cant-handle",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So basically I am using <code>objdump</code> on 32 bit x86 Linux, disassembling some <strong>static linked</strong> binary compiled by <code>gcc</code></p>\n<p>In the disassembled asm code, I find this:</p>\n<pre><code> 80ade23:       74 01                   je     0x80ade26\n 80ade25:       f0 0f c1 16             lock xadd %edx,(%esi) // lock\n 80ade29:       89 54 24 14             mov    %edx,0x14(%esp)\n 80ade2d:       8b 54 24 14             mov    0x14(%esp),%edx\n 80ade31:       3b 15 f0 0e 0f 08       cmp    0x80f0ef0,%edx\n 80ade37:       73 75                   jae    0x80adeae\n 80ade39:       65 83 3d 0c 00 00 00    cmpl   $0x0,%gs:0xc\n 80ade40:       00\n 80ade41:       74 01                   je     0x80ade44\n 80ade43:       f0 0f c1 0d dc 0e 0f    lock xadd %ecx,0x80f0edc // lock\n 80ade4a:       08\n</code></pre>\n<p>So basically, in my understanding, <code>lock</code> is a prefix of x86 asm opcode, which is legal here.</p>\n<p>and it seems that <code>je</code> jump into the position right after <code>lock</code>.</p>\n<p>so here are my questions:</p>\n<ol>\n<li><p>Is the disassemble results from <code>objdump</code> correct? It is rare to see <code>objdump</code> generate this kind of \"jump into instructions\" asm code..(anyway, I am new to reverse engineering, so... :) )</p></li>\n<li><p>Then how to adjust it to make it re-assemblable?</p></li>\n</ol>\n<p>I tried to change it in this way and re-assemble it using <code>gcc</code>, \nit can pass the assemble process, but basically I really don't know if it is a correct way or not.</p>\n<pre><code> je     S_0x80ade26\n lock   \n S_0x80ade26: xadd %edx,(%esi) // lock\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "3k",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "reassembly"
    ],
    "user": "lllllllllllll",
    "time": "Jul 7, 2014 at 19:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wouldn't go that far and state that the output provided by <code>objdump</code> isn't correct. True, Linear Sweep doesn't handle data properly, and jump tables &amp; shellcodes are usually a source of disassembly errors. But still, this isn't an error.</p>\n<p>If you take a closer look at your code you'll notice you have <code>je</code>. Meaning, the jump is taken only if the previous instruction - which is certainly a <code>cmp</code> or a <code>test</code> - returns true. The <code>x86</code> ISA (instruction set) allows to jump in the middle of instructions, or a byte stream if you like. And this is sometimes used to avoid certain prefixes like <code>rep</code>, ..., and in your case a <code>lock</code>.</p>\n<p>I'm 100% sure the output provided is correct and that the programmer (or the compiler) used this trick to avoid unnecessary additional code.</p>\n</div>",
            "votes": "4",
            "user": "yaspr",
            "time": "Jul 9, 2014 at 8:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Thank you yaspr, so basically, the way I re-use it (at the bottom of my question), is it correct or not..?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Actually, there's no difference between the way you rewrote it and the way it was. Why ?! Well, at the binary level, there's no separator between instructions for that in <code>x86</code> they are of variable length. And also, the fact that you can jump inside a byte stream.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In fact, <code>objdump</code> use the <em>linear sweep</em> algorithm to disassemble executable files. It means that it disassembles instructions one after one. Like this:</p>\n<ol>\n<li><p>First it goes to the entry point and disassemble the first instruction (and get its size):</p>\n<pre><code>4028c0:       41 57                   push   %r15\n</code></pre></li>\n<li><p>Then, knowing the size of the previous instruction, it updates the current address to the next instruction and disassemble it (and get its size again):</p>\n<pre><code>4028c2:       41 56                   push   %r14\n</code></pre></li>\n<li><p>And, it iterates again and again (go back to 2) until it reaches the end of the current section:</p>\n<pre><code>4028c4:       41 55                   push   %r13\n4028c6:       41 54                   push   %r12\n4028c8:       55                      push   %rbp\n4028c9:       48 89 f5                mov    %rsi,%rbp\n4028cc:       53                      push   %rbx\n...\n</code></pre></li>\n</ol>\n<p><code>objdump</code> implementation add only one small increment on this simple algorithm, it will start on every symbols even if it appear in the middle of the current disassembled instruction. Meaning that you may have the following case (I encountered it while studying an obfuscated software):</p>\n<pre><code>   4028c0:       41 57                   push   %r15\n   4028c2:       41 56                   push   %r14\n   4028c4:       41 55                   push   %r13\n   4028c6:       41 54                   push   %r12\n   4028c8:       55                      push   %rbp\n   4028c9:       48 89 f5                mov    %rsi,%rbp\n   4028cc:       48 85 c0                test   %rax,%rax\n\n00000000004028cd &lt;.f668&gt;:\n   4028cd:       85 c0                   test   %eax,%eax\n   4028cf:       53                      push   %rbx\n   ...\n</code></pre>\n<p>The disassembler first disassembled <code>4028cc</code> as an amd64 instruction, but a symbol was at <code>4028cd</code>. So, the algorithm reseted to this value and started over from there.</p>\n<p>Finally, be aware that the linear sweep algorithm is widely known as being incorrect. It may be mislead very easily. Its main problem is that it does not take into account the semantics of all the instructions, so when reaching a dynamic jump (<code>jmp %rax</code>), the algorithm won't be able to follow the execution flow. Of course, there are many other ways to mislead this algorithm, I won't try to be exhaustive here on all these techniques (note that <em>recursive traversal</em> is not really better).</p>\n<p>To get back to your original questions:</p>\n<ol>\n<li><p>The linear sweep algorithm cannot track the execution flow of a program. And won't be able to jump over a data if it lays in the middle of instructions. Yet, <code>objdump</code> may incidentally be correct when a symbol point to the instruction where to jump in the middle of the previous instruction (see the case I described before).</p></li>\n<li><p>To obtain a proper disassembly of this program, there is no hope with <code>objdump</code>. But, you can use <code>gdb</code> and collect an execution trace by instrumenting it though a Python script. Also, other disassembler won't be tricked by this simple layout. You may try <code>radare</code> or, as Benny suggested, IDAPro. I can also advertise a bit my own tool which is <code>cfgrecovery</code> from the <a href=\"https://github.com/perror/insight\" rel=\"nofollow\">Insight framework</a> (but it's a bit overkilling for such a simple trick).</p></li>\n</ol>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Jul 8, 2014 at 9:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think that what you call \"jump into instructions\" could be an anti-static analysis technique called <em>disassembly desynchronization</em>, which interleaves data bytes with code in order to confuse the disassembler. This technique and others are explained in chapter 21 (Obfuscated Code Analysis) of the <a href=\"http://www.idabook.com/\" rel=\"nofollow noreferrer\">IDA Pro book</a>.</p>\n<p>Using IDA Pro you can obtain the correct disassembly of your code if you:</p>\n<ol>\n<li><p>Open the binary with IDA (Free or Pro)</p>\n</li>\n<li><p>Put your cursor on one problematic line of code, which in your case is at addresses: <code>80ade25</code> and <code>80ade43</code></p>\n<pre><code>lock xadd %edx,(%esi) // lock\n...    \nlock xadd %ecx,0x80f0edc // lock\n</code></pre>\n</li>\n<li><p>Click the <strong>Edit</strong> menu of IDA and then select <strong>Undefine</strong></p>\n</li>\n<li><p>Now put your cursor at address where the jump instruction points to, which in your case is <code>0x80ade26</code> and<code>80ade44</code></p>\n</li>\n<li><p>Click the <strong>Edit</strong> menu of IDA again and select <strong>Code</strong> this time</p>\n</li>\n</ol>\n<p>Note that this anti-static analysis technique is applied twice in your code. So you need to apply steps 2-5 twice.</p>\n<p><strong>UPDATE:</strong> However, in your <code>objdump</code> output there is no disassembly desynchronization as Peter Ferrie pointed out in the comments below. The jump into instruction is a means of improving performance. However, I leave this answer as a hint for anyone who stumbles upon your question and whose disassembly is actually suffering from desynchronization.</p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">The original disassembly is correct, and the answer is not.  The code is checking the thread count and avoiding the lock: if there's only one thread.  This action improves performance.</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">@peterferrie thanks for the info. I haven't seen this kind of optimization before. Therefore I assumed it was a case of disassembly desynch. I'm now wondering how can the lock not be skipped if the jump address is not dynamically computed?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the branch and locked instruction are generated as a set, so always je $+3/lock/&lt;instruction&gt;.  The cmp is not part of the set, so can be separated for better pipelining (to permit insertion of unrelated mov instructions).</span>",
                    "time": null
                }
            ]
        }
    ]
}