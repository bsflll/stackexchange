{
    "title": "[ARM]How does this checksum code works and how to revert it in C?",
    "link": "https://reverseengineering.stackexchange.com/questions/12927/armhow-does-this-checksum-code-works-and-how-to-revert-it-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse a simple code that gets a string and calculates it's checksum. I've been trying to understand every instruction, but they look different from what is said in arm documentation. \nHere's the full code(Using no$gba debugger)\n<a href=\"https://i.sstatic.net/bWnxq.png\" rel=\"nofollow noreferrer\"><img alt=\"Pink signals the checksum code\" src=\"https://i.sstatic.net/bWnxq.png\"/></a></p>\n<p>I've reached the code knowing that once the checksum has been calculated it is stored in the r0 register. <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\" rel=\"nofollow noreferrer\">Docs</a> specify that EOR receives 2 args, while here is taking 4.\n<strong><em>eor  r3,r3,r0,asr 8h</em></strong> I've figured out that this will be something like  <strong><em>r3 = (r3^r0)&gt;&gt;8</em></strong>  but I'm not really sure. In addition, C/C++ doesn't specify if the &gt;&gt; operator performs arithmetical or logical shifts (asr)</p>\n<p>Same confusion is created with the mov's instructions. The sub inst. would be reversed in something like <strong><em>r2--; or r2=r2-1;</em></strong></p>\n<p>Thanks for your time.</p>\n<p>EDIT: The checksum is 2 bytes long, and I am giving some examples:</p>\n<p>String: AAAAAAB  -- Checksum: 0xB649 (While debugging, write in little endian)</p>\n<p>String: AAAAAAA  -- Checksum: 0x68BC \n(NOTE: Checksum can't be worked out by performing operations with different checksum samples)</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "928",
    "tags": [
        "assembly",
        "debuggers",
        "arm"
    ],
    "user": "78dtat78da",
    "time": "Jun 24, 2016 at 10:20",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">How exactly do these instructions look different from the ones in your documentation? \"They are all lowercase\"?</span>",
            "time": null
        },
        {
            "user": "78dtat78da",
            "text": "<span class=\"comment-copy\">@RadLexus ... \" Docs specify that EOR receives 2 args, while here is taking 4. eor r3,r3,r0,asr 8h \"  From the ARM documentation: Syntax eor Rd, Rm   Rd-&gt;destination  Rm-&gt;Second operand</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">You are looking at the Thumb documentation, but this code is in <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\" rel=\"nofollow noreferrer\">the regular mode</a> (you can see that because the opcodes are 4 bytes long)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A disassembler and decompiler like <em>Ghidra</em> can be used to obtain a C equivalent code.</p>\n<p>Also, as specified by @RadLexus, the ARM documentation can be found here: <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\" rel=\"nofollow noreferrer\">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html</a></p>\n</div>",
            "votes": "0",
            "user": "78dtat78da",
            "time": "Jan 30, 2021 at 18:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}