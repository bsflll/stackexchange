{
    "title": "Declaring block as a string in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/8535/declaring-block-as-a-string-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering a binary that has very generic, standard xor+math encryption on every string. I've written IDAPython to find each one(they're used in a generic way) and decrypt them, then add the decrypted string as a comment / try to rename the variable. </p>\n<p>This doesn't tell IDA that offsets to these blocks is actually a string, though. For example, it won't show up in <code>idautils.Strings</code>(necessary for plugins/the rest of my script library...), the strings view, etc.</p>\n<p><strong>I guess it wasn't clear: Strings are stored in encrypted blocks statically. They are only decrypted during runtime but are otherwise used just like normal string references.</strong></p>\n<p>I could replace the encrypted blocks with their decrypted result in the IDB, but that is less than ideal as it creates an IDB that isn't 1:1 to the file statically.</p>\n<p>Is there a way to tell IDA to identify an address as a string with a specific value? </p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "idapython",
        "encryption",
        "strings"
    ],
    "user": "Ditmar Wendt",
    "time": "Mar 23, 2015 at 19:51",
    "comments": [
        {
            "user": "alexanderh",
            "text": "<span class=\"comment-copy\">You could rename the address but the name will have restraints. Your best bet is to add the decrypted string as a repeatable comment by calling idc.MakeRtpCmt(address, \"plain text\").</span>",
            "time": null
        },
        {
            "user": "Ditmar Wendt",
            "text": "<span class=\"comment-copy\">@Alex -- that's what I did before this Q. It's less than ideal as other functionality RELIES on strings being identified by ida as strings.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think the API you're looking for is idaapi.make_ascii_string(start, len, strtype)</p>\n<p>It's not really documented on <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idaapi-module.html\" rel=\"nofollow\">https://www.hex-rays.com/products/ida/support/idapython_docs/idaapi-module.html</a> but an example blog post showing how to use the API for a similar circumstance is here: <a href=\"http://security.my/post/38222980198/decrypting-strings-in-a-binary-with-an-idapython\" rel=\"nofollow\">http://security.my/post/38222980198/decrypting-strings-in-a-binary-with-an-idapython</a></p>\n</div>",
            "votes": "4",
            "user": "richinseattle",
            "time": "Mar 23, 2015 at 19:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Note that this will only work if the strings exist statically in the IDB. It's unclear in the original question if that's the case, or if they're instead constructed dynamically on the stack.</span>",
                    "time": null
                },
                {
                    "user": "Ditmar Wendt",
                    "text": "<span class=\"comment-copy\">Yeah, this works if you have a normal string. This question is talking about strings stored in an encrypted format. Patching the IDB loses your original data -- which is less than ideal.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you should review this blog post about <a href=\"http://www.hexblog.com/?p=117\" rel=\"nofollow\">Custom data types and formats</a>. This would allow you to define a new type of string and provide the algorithm to use for \"printing\" it. </p>\n<blockquote>\n<p>Custom data type: A custom type is basically just a way to tag some bytes for later display with custom format, when the built-in IDA types (dt_byte, dt_word, etc) are not enough.\n  For example: an XMM vector, a Pascal string, a half-precision (16 bits) floating-point number, a 16:32 far pointer (fword), uleb128 number and so on.</p>\n</blockquote>\n<p>It's not clear that creating a new type would cause entries to show up in the strings menu, if not I'm sure you could use the names window with its filtering to have an alternative.</p>\n<p>For more details search the idaapi for <em>data_format_t</em>, and check out <em>bytes.hpp</em>. However, I think the first link will put you on the right track.</p>\n</div>",
            "votes": "2",
            "user": "Rhizzakanizza",
            "time": "Mar 25, 2015 at 17:06",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't believe you can tell IDA to add a string to its string list if that string doesn't statically exist in your IDB.</p>\n<p>You could have your script do the following, however:</p>\n<ol>\n<li>Create a new section</li>\n<li>Write the decrypted strings into that section (via byte-patching in the IDB), potentially with cross-references between the decrypted strings and the encrypted strings</li>\n<li>Run <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idaapi-module.html#refresh_strlist\" rel=\"nofollow\"><code>idaapi.refresh_strlist()</code></a> (<a href=\"http://www.openrce.org/reference_library/ida_sdk_lookup/refresh_strlist\" rel=\"nofollow\">arguments documented here</a>) on the decrypted strings written to the new section</li>\n</ol>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Mar 23, 2015 at 19:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ditmar Wendt",
                    "text": "<span class=\"comment-copy\">Writing the decrypted strings to the new section will make them show up in the string view without modifying the original binary, sure. Say I have situations where the encrypted block is used in a <code>mov eax, offset myblock</code> -- this solution wouldn't allow IDA to identify the strings in these situations, though? Maybe iterate every xref to the original block and tell it it's some custom offset to the new section string?</span>",
                    "time": null
                }
            ]
        }
    ]
}