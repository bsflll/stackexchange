{
    "title": "What means sym prefix before functions name in radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/14207/what-means-sym-prefix-before-functions-name-in-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What means sym prefix in disassembly? For examle, <code>sym.main</code>?</p>\n</div>",
    "votes": "-1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "radare2"
    ],
    "user": "Alex T",
    "time": "Dec 20, 2016 at 22:45",
    "comments": [
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">RTFM ! wx 90 @@ sym.*  Writes a nop on every symbol (<a href=\"https://github.com/pwntester/cheatsheets/blob/master/radare2.md\" rel=\"nofollow noreferrer\">github.com/pwntester/cheatsheets/blob/master/radare2.md</a>)</span>",
            "time": null
        },
        {
            "user": "Alex T",
            "text": "<span class=\"comment-copy\">Ok, wx 90 @@ sym.* writes a nop on every symbol. But what means sym? Acronym or what?</span>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">Sym ==&gt; symbol ! RTFM again.</span>",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<span class=\"comment-copy\"><code>What means sym prefix</code> It means you need to understand file formats before you try to disassemble them.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As pointed out by users in comments <code>sym</code> stands for <code>symbol</code>.</p>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Debug_symbol\" rel=\"nofollow noreferrer\">Wikipedia:</a></p>\n<blockquote>\n<p>A debug symbol is information that expresses which\n  programming-language constructs generated a specific piece of machine\n  code in a given executable module. Sometimes the symbolic information\n  is compiled together with the module's binary file, or distributed in\n  a separate file, or simply discarded during the compilation and/or\n  linking. This information enables a person using a symbolic debugger\n  to gain additional information about the binary, such as the names of\n  variables and <strong><em>routines</em></strong> from the original source code. This information\n  can be extremely helpful while trying to investigate and fix a\n  crashing application or any other fault.</p>\n</blockquote>\n<p>As previously stated, a <em>symbol</em> may be used to referer to a specific address in the binary (i.e. <code>sym.main</code> =&gt; <code>main function</code>).</p>\n</div>",
            "votes": "2",
            "user": "shxdow",
            "time": "Dec 23, 2016 at 13:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are symbol prefixes with examples, as output by the Radare2 command \"axj\" from C:\\Windows\\system32\\gdi32.dll:</p>\n<ul>\n<li>sym.imp.* : \"sym.imp.KERNEL32.dll_UnhandledExceptionFilter\"</li>\n<li>sub.* : \"sub.KERNEL32.dll_RtlCaptureContext_614+410\" or \"sym.imp.ole32.dll_ReleaseStgMedium+56\" (Note the library name in upper- or lowercase)</li>\n<li>fcn.* : \"fcn.18000587c+41\"</li>\n<li>str.* : \"str.._AUIDropTarget+584\" or \"str.PyShellExt::GetArguments___failed_to_lock_CF_HDROP_hGlobal+124\" or \"str.memset\" (One or two dots)</li>\n<li>section.* : \"section..data+16\"</li>\n<li>switch.* : \"switch.0x180004860\"</li>\n<li>case.* : \"case.default.0x180004820\"</li>\n<li>resource.* : \"resource.1\"</li>\n</ul>\n<p>The only explanation I could find is:</p>\n<p><a href=\"https://monosource.gitbooks.io/radare2-explorations/content/intro/navigation.html\" rel=\"nofollow noreferrer\">\"Flags generally have a prefix in their name, such as str., sym., sub., fcn.\"</a></p>\n<p><a href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\" rel=\"nofollow noreferrer\">Those names are called ‘flags’. Flags can be grouped into ‘flag spaces’</a>. </p>\n<p>As suggested, \"fs\" command displays:</p>\n<pre><code>[0x180005218]&gt; fs\n0  247 * strings\n1    5 * symbols\n2    8 * sections\n3    0 * segments\n4   79 * relocs\n5   79 * imports\n6    2 * resources\n7  104 * functions\n</code></pre>\n<p>More information about flags and flagspaces here:\n<a href=\"https://radare.gitbooks.io/radare2book/content/basic_commands/flags.html\" rel=\"nofollow noreferrer\">Radare2, basic commands, flags</a></p>\n</div>",
            "votes": "2",
            "user": "remi.chateauneu",
            "time": "Jan 4, 2019 at 8:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}