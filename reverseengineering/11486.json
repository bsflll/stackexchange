{
    "title": "How to unpack manually an upx packed elf file",
    "link": "https://reverseengineering.stackexchange.com/questions/11486/how-to-unpack-manually-an-upx-packed-elf-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to learn to manually unpack an upx packed elf file. The examples I have found are for Windows, mostly with Ollydbg, and as I see the first step is to look for <code>pushad</code> and <code>popad</code> instructions. I have a 64 bit executable, so I assume I have to look for a push and pop of all registers.</p>\n<p>What I acieved until now is that I can get the entry point with <code>readelf -h</code>, and set a breakpoint in <code>gdb</code> at this address. With <code>layout asm</code> I can follow the disassembled instructions too. As I understand at the <code>popad</code> instruction the unpacking is done, and I can get the original entry point. However, because on 64bit there is no <code>popad</code>, I am not sure where the original entry point will be. All registers will be popped or only a few?</p>\n<p>I also do not know how to  fix imports. </p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "8k",
    "tags": [
        "linux",
        "upx"
    ],
    "user": "robert",
    "time": "Dec 9, 2015 at 13:55",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">I can't help with reconstructing ELF imports, but as for finding the original entry point (OEP), the easiest way to find UPX's transition to the OEP is to start at the packed file's entry point and continue disassembling down (in OllyDbg, this would effectively mean just scrolling down) until you see a <code>JMP</code> followed by a long trail of null (<code>00</code>) bytes. The destination of the <code>JMP</code> is the OEP. Illustrated here: <a href=\"http://deamonftp.free.fr/deamoncrack/Tuts/Kef/UPX/Cours%20upx_fichiers/image002.jpg\" rel=\"nofollow noreferrer\">deamonftp.free.fr/deamoncrack/Tuts/Kef/UPX/Cours%20upx_fichiers/â€¦</a> (Obviously, you won't be using OllyDbg, but the same approach can be used on Linux.)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use a hex editor to open the file and locate the UPX header. The UPX header typically starts with the bytes 0x50 0x5A and is followed by a version number and other metadata.</p>\n<p>Once you have located the UPX header, you will need to locate the offset of the compressed data and the original entry point of the file. This information can be found in the UPX header.</p>\n<p>Next, use the UPX command-line tool to decompress the file. The -d option is used to decompress the file, and the -o option specifies the output file.</p>\n<pre><code>upx -d -o output.elf input.elf\n</code></pre>\n<p>Once the file has been decompressed, use a disassembler or a debugger to analyze the file and understand its functionality.</p>\n<p>Hope this helps.</p>\n</div>",
            "votes": "-1",
            "user": "Parth",
            "time": "Jan 19, 2023 at 10:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. This looks and sounds very much like an AI-generated answer (flagging as such). Is it?</span>",
                    "time": null
                }
            ]
        }
    ]
}