{
    "title": "Unpack & repack a firmware for use as an updated version?",
    "link": "https://reverseengineering.stackexchange.com/questions/4615/unpack-repack-a-firmware-for-use-as-an-updated-version",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to modify a firmware for TD-W8961ND router because there is a vulnerability that could allow an attacker to download the configuration file of the router which exposes the router password &amp; make him able to control the router's settings later on. I came across the idea to fix it from <a href=\"http://piotrbania.com/all/articles/tplink_patch/\" rel=\"nofollow\">here</a>. It was able to modify the firmware in virtual memory using the serial port which is not available to me. </p>\n<p><strong>So, is there a possibility to apply what he suggested in the firmware then update the router ?</strong></p>\n<p>The router firmware is named <code>ras</code> and it was published on 25.11.2011.</p>\n<p>Using binwalk, it is apparent that the file is ZynOS. But, I really can't extract the signature as explained <a href=\"http://www.devttys0.com/2011/05/reverse-engineering-firmware-linksys-wag120n/\" rel=\"nofollow\">there</a> and I really don't know what to do later on.</p>\n<p><strong>Edit</strong></p>\n<p>binwalk output</p>\n<pre><code>~$ binwalk ras\n\nDECIMAL     HEX         DESCRIPTION\n-------------------------------------------------------------------------------------------------------------------\n84992       0x14C00     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 66824, compressed size: 16870, uncompressed checksum: 0xF480, compressed checksum: 0xF03A, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n85043       0x14C33     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 66824 bytes\n128002      0x1F402     GIF image data, version \"89a\", 200 x 50\n136194      0x21402     GIF image data, version \"89a\", 560 x 50\n326749      0x4FC5D     Copyright string: \" (c) 2001 - 2011 TP-LINK TECHNOLOGIES CO., LTD.LOGIES CO., LTD.\"\n349184      0x55400     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 55931, uncompressed checksum: 0xC892, compressed checksum: 0xC30C, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n349235      0x55433     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n405248      0x62F00     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 59174, uncompressed checksum: 0x8D2B, compressed checksum: 0x66BC, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n405299      0x62F33     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n464640      0x71700     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 52399, uncompressed checksum: 0xA2DE, compressed checksum: 0x917A, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n464691      0x71733     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n517120      0x7E400     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 63920, uncompressed checksum: 0xFEC9, compressed checksum: 0xA7FD, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n517171      0x7E433     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n581120      0x8DE00     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 54909, uncompressed checksum: 0xF811, compressed checksum: 0x3544, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n581171      0x8DE33     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n636160      0x9B500     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 61051, uncompressed checksum: 0x36F3, compressed checksum: 0x6A1, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n636211      0x9B533     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n697344      0xAA400     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 102400, compressed size: 54463, uncompressed checksum: 0x30D8, compressed checksum: 0x9AB9, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n697395      0xAA433     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 102400 bytes\n751872      0xB7900     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 12440, compressed size: 6879, uncompressed checksum: 0x5C0A, compressed checksum: 0x1945, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n751923      0xB7933     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 12440 bytes\n759040      0xB9500     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 3914416, compressed size: 884839, uncompressed checksum: 0xA904, compressed checksum: 0x73E3, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0\n759091      0xB9533     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3914416 bytes\n</code></pre>\n<p>the guy who revealed the exploit suggested that there isn't Lzma compressed data in the image as it seems to be &amp; it is just big chunk of data in clear text.</p>\n</div>",
    "votes": "5",
    "answers": 3,
    "views": "12k",
    "tags": [
        "disassembly",
        "firmware"
    ],
    "user": "kifcaliph",
    "time": "Jun 16, 2014 at 1:59",
    "comments": [
        {
            "user": "6EQUJ5",
            "text": "<span class=\"comment-copy\">Perhaps post the output of <code>binwalk</code>?</span>",
            "time": null
        },
        {
            "user": "kifcaliph",
            "text": "<span class=\"comment-copy\">I added binwalk output</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's important to know that not all ZyNOS images are created equal, and the exact steps that worked for piotrbania (as referenced in your question) will likely not work for you.</p>\n<p>First, ZyNOS is a Real Time Operating System, and you can think of the entire OS as just one big kernel (i.e., there is no user space or file systems or anything easy to deal with like that). Depending on the ZyNOS version, compiler version, compiler options, target architecture, etc., even the same source code will compile to a different sequence of bytes and instructions, and different versions/flavors of ZyNOS may be \"packaged\" very differently.</p>\n<p>In your case, I can almost guarantee that those LZMA signatures are valid, and probably contain some data/code. There is also probably raw, uncompressed code in the image as well (try binwalk -A to search for raw executable code). </p>\n<p>Some general steps that you'll need to accomplish what you want:</p>\n<ol>\n<li>Decompress all compressed blocks and identify which ones, if any, contain executable code</li>\n<li>Disassemble all code (probably starting with any code that wasn't compressed to start with, since it's probably used to bootstrap the system and decompress the other sections of the firmware)</li>\n<li>Part of the disassembly process will be identifying the load address of each code section; without this, data xrefs won't make sense. Look for references to absolute memory addresses for hints (e.g., jumps to direct addresses, function tables, jump tables, etc).</li>\n<li>Now you can start actually reversing the code, looking for code that handles requests for the ras file. If you're lucky you'll have a symbol table which no disassembler will understand, so you'll have to write a script to parse the symbol table and rename all symbol addresses. If you aren't so lucky, identification of functions must be done manually.</li>\n<li>Once you have identified the code that needs to be patched, you can patch it in a similar manner to piotrbania, though obviously details may differ slightly for your firmware image.</li>\n<li>Re-compress and re-pack the firmware image parts, update all header checksums, then upload to your device and hope it doesn't turn into a paperweight. :)</li>\n</ol>\n<p>So to answer your question, yes, this is certainly possible. But I'm not aware of a pre-built solution that will allow you to easily extract/patch/re-build the firmware, so it will take some effort to accomplish. Obviously, having some sort of debug access to the device (e.g., UART or JTAG) will help a lot, as evidenced by piotrbania's work.</p>\n</div>",
            "votes": "6",
            "user": "devttys0",
            "time": "Jun 16, 2014 at 12:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "kifcaliph",
                    "text": "<span class=\"comment-copy\">thank you all for your answers. I figured out another easy way to fix the problem using CLI &amp; I published it <a href=\"http://egyptianvulture.blogspot.com/2014/06/how-to-fix-zynos-vulnerability-prevent.html\" rel=\"nofollow noreferrer\">egyptianvulture.blogspot.com/2014/06/…</a>..... so there is no need to go the hard way :)</span>",
                    "time": null
                },
                {
                    "user": "gadget",
                    "text": "<span class=\"comment-copy\">awesome to hear your take on ZynOS, Craig!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You could try using <a href=\"https://code.google.com/p/firmware-mod-kit/\" rel=\"nofollow\">firmware-mod-kit</a> and see if you get any further, although firmware-mod-kit is geared to Linux specifically so it may not help that much.  Sometimes I have found it can do things that <code>binwalk</code> cannot (and vice-versa for that matter)</p>\n<p>Also, you may want to build <code>binwalk</code> from the latest source try again.  </p>\n</div>",
            "votes": "2",
            "user": "6EQUJ5",
            "time": "Jun 16, 2014 at 0:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is somewhat old, but I was unable to perform the same task as the OP -- that is, to find a tool that would properly unpack a ZyNOS firmware update image. So I rolled my own. Please grab and try it on your image:</p>\n<p><a href=\"https://github.com/dev-zzo/router-tools/blob/master/zynos.py\" rel=\"nofollow\">https://github.com/dev-zzo/router-tools/blob/master/zynos.py</a></p>\n<p>The tool does not support packing the image back at the moment, but I am working on it.</p>\n</div>",
            "votes": "2",
            "user": "Dmitry Janushkevich",
            "time": "Sep 14, 2015 at 15:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}