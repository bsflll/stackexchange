{
    "title": "How to see all functions that called with debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/19971/how-to-see-all-functions-that-called-with-debugger",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I debugging with IDA, and I want to see/print all the functions that get called.</p>\n<p>In the functions window I see over than 1000 functions.</p>\n<p>So I want to see which functions are called when I press enter or press on buttons and actions like that.</p>\n<p>I use IDA, but if I can do it with another debugger, that's also okay.</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "5k",
    "tags": [
        "ida",
        "debugging",
        "functions"
    ],
    "user": "Keystone",
    "time": "Nov 27, 2018 at 20:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although you can use several tools, I would suggest you to use GDB if possible, since it has a built-in feature of breaking at each function call.</p>\n<p>Now, what you can do, is to run your program two times - first, without pressing buttons, and second, with doing so. I'm attatching a python script that will print each function call with a number of calls to it, to the file named <em>output</em>. Feel free to use it for your purposes:</p>\n<pre><code>#!/usr/bin/env python3\nimport gdb\nimport re\n\nbreakpoints = []\ngdb.execute('rbreak', to_string=True)\ngdb.execute('run', to_string=True)\ntry:\n    while True:\n        a = gdb.execute('continue', to_string=True)\n        reg = gdb.execute('info registers rip', to_string=True)\n        b = reg.split()[1][2:]\n        f = reg.split()[3]\n        c = gdb.execute('info breakpoints', to_string=True).split('\\n')\n        d = [s for s in c if b in s]\n        if len(d) &gt; 1:\n            sys.exit(1)\n        e = d[0].split()[0].split('.')[0]\n        gdb.execute('disable breakpoints ' + e)\n        breakpoints.append(e)\n        breakpoints.append(f)\nexcept:\n    f = open(\"output\", \"w+\")\n    [f.write(b + '\\n') for b in breakpoints]\n    f.close()\n</code></pre>\n<p>You can invoke it by running <code>gdb name_of_your_program</code> and then <code>source gdb.py</code> assuming that the script name is <em>gdb.py</em>.</p>\n<p>After doing this two times, you will get two files: one containing all function calls, while not pressing buttons, and the other one containing function calls when buttons are being pressed. Simply running <code>diff</code> on this files will reveal which functions are responsible for button press handling.</p>\n<p>If, for some reason you cannot use GDB, <a href=\"https://reverseengineering.stackexchange.com/questions/21235/function-call-trace-with-radare2-or-break-on-all-function-call/21724#21724\">this answer</a> shows the way it can be done in <a href=\"https://rada.re/n/\" rel=\"nofollow noreferrer\">radare2</a>.</p>\n</div>",
            "votes": "3",
            "user": "bart1e",
            "time": "Dec 23, 2019 at 14:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Usually, debuggers (IDA included) provide tracing functionality. This is <em>logging</em> debugee's actions at a predefined granularity level. That could be logging all individual instructions, or as you desire, function calls. Using function tracing (<code>Debugger -&gt; Tracing -&gt; Function Tracing</code>) a user is able to view all functions called throughout the tracing duration. Keep in mind this may generate a big trace, and logging it to a file may be recommended.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Nov 27, 2018 at 21:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In addition to Nirlzr's answer, you can go to the function Imports window in the debugger (IDA, OllyDbg and x64Dbg for example), and set a breakpoint on the functions you are curious about. Then, simply run the program and the debugger will stop the execution of the program at the time each function is called.</p>\n<p>For example, if you want to see when a program calls CreateProcessInternalW, you can go into the function import table (sometimes called \"symbols\") and set breakpoints on the function listed there. Now, when a program creates a new process, the debugger will break execution at that point so you can see the arguments passed and return value. For convenience, I've attached a screenshot of this in IDA Pro - pay attention to the right side of the screen where I have the function list of <code>apphelp.dll</code> which I got to by finding it in the \"Modules\" window and then double-clicking the DLL file name. Now we can right-click on a specific function like I've shown and click \"Add Breakpoint\", then run the program. This is only available in the IDA Debugger once the debugger has been started.</p>\n<p>NOTE: Sometimes the imports are not fully resolved at the beginning of the program, so as you continue through the program, more of these functions will become available to break on.<a href=\"https://i.sstatic.net/FFItk.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/FFItk.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "the_endian",
            "time": "Dec 23, 2019 at 7:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}