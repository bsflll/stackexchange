{
    "title": "XORing command-line for encryption?",
    "link": "https://reverseengineering.stackexchange.com/questions/6267/xoring-command-line-for-encryption",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following lines</p>\n<pre><code> push [ebp+dwBytes]\n push 8                 ; dwFlags\n call ds:GetProcessHeap\n push eax               ; hHeap\n call ds:HeapAlloc      \n push [ebp:lpCmdLine]   ; char *\n mov edi, eax\n call _atol\n mov esi, eax\n xor esi, 28Ch\n mov eax, esi\n pop ecx\n mov edx, ebx\n xor eax, 1104h\n xor ecx, ecx\n shr edx, 1\n jz  short loc_60114A\n</code></pre>\n<p>The first part is not difficult. They get a handle to the default heap and after that, they allocate some memory on that heap using the handle hHeap. </p>\n<p>The part with lpCmdLine take the lpCmdLine and converts it into a long value.</p>\n<p>Now, I do not understand the part which comes after call _atol.\nEspecially the lines with the XOR :</p>\n<pre><code> xor esi, 28Ch\n</code></pre>\n<p>Questions:\na) Is that a way of encryption ? I mean, is it so that they try to encrypt the string pointed by lpCmdLine ? </p>\n<p>b) Normally I had a cmp before jz, but here as you can see, there is only a jz instruction? Why is the cmp is missing ? </p>\n<p>best regards, </p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "510",
    "tags": [
        "assembly",
        "xor"
    ],
    "user": "user3097712",
    "time": "Sep 20, 2014 at 17:58",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">atol = ascii to long, so if you passed 12345678 on the commandline then eax would become that, then its xoring the value, presumably for a compare later, so at a guess      jz doesnt need a compare, some of the other operations will adjust the eflags.. like the shr edx.. if edx = 0 after this the zero flag will be set</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The number returned by <code>_atol()</code> is XOR'ed with <code>0x28C</code> and then XOR'ed again with <code>0x1104</code>. Since XOR is an <a href=\"http://en.wikipedia.org/wiki/Associative_property\" rel=\"nofollow\">associative</a> operation, this is equivalent to XOR'ing the number returned by <code>_atol()</code> with <code>0x1388</code>.</p>\n<blockquote>\n<p>a) Is that a way of encryption ? I mean, is it so that they try to\n  encrypt the string pointed by lpCmdLine?</p>\n</blockquote>\n<p>There's not enough context in your snippet above to infer how this resulting value is being used.</p>\n<p>Also, it's unlikely that what IDA is labeling as <code>lpCmdLine</code> is really the program's command line, since a command line typically begins with the executable's file name, on which <code>_atol()</code> would typically fail (you <em>can</em> create a process and have only command line arguments as the command line, and alternatively it <em>is</em> possible that the code above expects the executable's file name to be numeric (like <code>123.exe</code>), but these are both less likely than IDA just mislabling the variable).</p>\n<blockquote>\n<p>b) Normally I had a cmp before jz, but here as you can see, there is\n  only a jz instruction? Why is the cmp is missing ?</p>\n</blockquote>\n<p>The <code>jz</code> instruction checks the CPU's <a href=\"http://en.wikipedia.org/wiki/Zero_flag\" rel=\"nofollow\">Zero Flag</a>. The <code>shr</code> instruction prior to the <code>jz</code> instruction sets the Zero Flag as follows (from <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_285.html\" rel=\"nofollow\">http://x86.renejeschke.de/html/file_module_x86_id_285.html</a>) --</p>\n<blockquote>\n<p>The SF, ZF, and PF flags are set according to the result [of the shift operation].</p>\n</blockquote>\n<p>In other words, if after <code>shr edx, 1</code> the register <code>edx</code> is <code>0x00000000</code>, then the jump is taken. As with your previous question, though, there's not enough context in your snippet above to infer how this is being used.</p>\n</div>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Sep 21, 2014 at 15:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}