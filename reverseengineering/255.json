{
    "title": "What is a correct disassembler?",
    "link": "https://reverseengineering.stackexchange.com/questions/255/what-is-a-correct-disassembler",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A disassembler is supposed to produce a human readable representation of the binary program. But the most well known techniques: <em>linear sweep</em> and <em>recursive traversal</em> (see this <a href=\"https://reverseengineering.stackexchange.com/questions/139/what-are-the-techniques-disassemblers-use-to-process-a-binary/140#140\">comment</a> for more) are known to be easily mislead by specific tricks. Once tricked, they will output code that will never be executed by the real program.</p>\n<p>Thought there exists new techniques and new tools more concerned about correctness (eg <a href=\"http://www.jakstab.org/\" rel=\"nofollow noreferrer\">Jakstab</a>, <a href=\"http://www.grammatech.com/research/technologies/mcveto\" rel=\"nofollow noreferrer\">McVeto</a>, ...), the notion of <em>correctness</em> of the output has never been properly defined, up to my knowledge, for disassemblers.</p>\n<p>What would be a good definition of a disassembler, what would be a proper definition of correctness for its output and how would you classify the existing disassemblers in regard of this definition of <em>correction</em> ?</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "482",
    "tags": [
        "obfuscation",
        "disassembly",
        "static-analysis"
    ],
    "user": "perror",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "cb88",
            "text": "<span class=\"comment-copy\">It seems to me you are practially answering yourself in the question. In addition to that your metric of correctness is probably entirely subjective. Since you can't do an exact decompilation what you do from there just depends.</span>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\">This appears more like a blog post than a question :)</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Yes, please split it into a question and answer. You <i>can</i> answer your own questions, that's not a problem. Also, question at the end does not match the title.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@Emmanuel: please split the answer from the question, before it gets closed off.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">done (and sorry for the mess). Hopefully there will be a better answer...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm the author of <a href=\"http://rainbowsandpwnies.com/rdis/\">rdis</a> and have put a bit of thought into this problem. I recommend taking a look at my <a href=\"http://rainbowsandpwnies.com/~endeavor/blog/\">blog</a> if you have more questions after this.</p>\n<p>I would also refer you to Andrew Ruef's blog post <a href=\"http://www.mimisbrunnr.net/~munin/blog/binary-analysis-isnt.html\">Binary Analysis Isn't</a>. The key take away is we often attempt to understand our programs with the context of compilers, and not necessarily as just a continuum of instructions. He coins the term, \"Compiler Output Analysis,\" which is more or less what we attempt to achieve in our disassemblers.</p>\n<h2>Terms and Definitions</h2>\n<p>Start over with your definitions of terms common to disassembly. We have data, or state, which can be composed of memory, registers,  all the good stuff. We have code, which is <em>a label we apply to data we expect the machine to execute</em> (we'll come back to code). We have a program, which is an algorithm encoded in the data which, when interpreted by a machine, causes the data to be manipulated in a certain way. We have a machine which is a mapping of one state to another. We have instructions which, for our purposes, exist at a single point in time and are composed of specific pieces of data which control the way our machine manipulates data.</p>\n<p>Often times we believe our goal is the transformation of code, the data we expect to be executed by the machine, into a readable disassembly. I believe we do this because of our division of program analysis between Control-Flow Analysis (Code) and Data-Flow Analysis (Data). In program analysis, our code is state-less, and our data has state. In reality, our code is just data, it all has state.</p>\n<h2>Program Recovery</h2>\n<p>Instead, our goal should be the recovery of the program by observation or prediction of the machine. In other words, we are not interested in transforming data into a readable disassembly, but in discovering the instructions which will be interpreted by our machine.</p>\n<p>Additionally, our representation of the program should be stored <em>separately</em> from our stateless representation of data, which is usually the initial memory layout given to us by our executable file (ELF/PE/MACH-O/etc). Really, it should be stored in a directed graph. When I see a linear representation of memory with multiple locations labelled as instructions, I shutter. You don't know yet!</p>\n<p>I believe the next step in disassembly involves processes which make better predictions about machines by allowing for changes in state during the disassembly process. I believe we will have both emulated disassembly and abstract disassembly. Some people are, more or less, doing this already, though I am unsure if anyone is doing it expressly for the purpose of creating usable and understandable \"program recoveries\".</p>\n<p>You can see an example of the difference between a recursive disassembly of a program and an emulated disassembly of a program <a href=\"http://rainbowsandpwnies.com/~endeavor/blog/a-magical-time-traveling-control-flow-graph.html\">here</a>.</p>\n<h2>What is a correct disassembler?</h2>\n<p>So, now to answer your question, \"What is a correct disassembler?\" I believe a correct disassembler is one which clearly defines the behavior of its program recovery process and adheres to this definition. Once we get disassemblers which do THAT, the better disassemblers will be the ones whose definitions best predict the behavior of the machines for which they recover programs.</p>\n</div>",
            "votes": "17",
            "user": "endeavor",
            "time": "Mar 25, 2013 at 19:02",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>What is a disassembler ?</h2>\n<p>I would decompose a disassembler into two parts, first a <strong>decoder</strong> that takes an hexadecimal code and output an assembly instruction (possibly with the length of the decoded instruction if the assembly language has variable length instructions). And, then a <strong>disassembly algorithm</strong> that will use the decoder to browse through the executable code.</p>\n<p>The overall goal of a disassembler, in my humble opinion, would be to recover all the possible runs that can be built from a given executable and to present it in a concise and human readable format.</p>\n<h2>Problems in disassembly</h2>\n<p>There are many problems that a disassembler can encounter when disassembling a binary program. One of the most difficult would be to deal with <strong>self-modifying</strong> code. Indeed, til now there is no real good human readable representation for self-modifying program. So, all disassemblers when facing a self-modifying code fail miserably to output something clearly understandable.</p>\n<p>The second problem that can stop a disassembler is that from time to time the binary program jump to another place to execute some code (function calls, if-then-else, switches, ...). And, if most of these jumps are <em>static</em> (the address where to jump is statically coded into the code), there are some jumps that depends on the context of the execution.  We usually call these jumps <strong>dynamic jumps</strong> (opposed to <em>static</em> jumps). These dynamic jumps force the disassembler to track not only the syntax of the instructions but also their semantics in order to not be lost when encountering it.</p>\n<p>Finally a last problem is that not all the binary programs can be assumed to follow a precise ABI (Application Binary Interface), defining a precise interface for function calls or a way to handle data-structures. Indeed, some binary programs are either crafted by hand or with a modified compiler that will try to mislead disassemblers. Therefore, the disassembler will have to recognize a function call by its semantics and not only by its syntax.</p>\n<h2>Correctness of a disassembler</h2>\n<p>As we stated previously, the ultimate goal of a disassembler is to rebuild all the possible traces of execution from a binary program. Of course, most of the time this is extremely difficult, so we can define three types of disassemblers:</p>\n<ul>\n<li><strong>Exact disassembler</strong> : Hypothetically, it should issue all the correct traces that can be run on the binary program, and only these traces.</li>\n<li><strong>Over-approximated disassembler</strong> : The output of this one should <em>include</em> all the possible traces, possibly with some extra ones.</li>\n<li><strong>Under-approximated disassembler</strong> : The output of this one should <em>be included</em> into the possible traces but not provide any infeasible ones.</li>\n</ul>\n<h2>Existing techniques and where to classify them</h2>\n<p>For now, the two most popular techniques are <strong>linear sweep</strong> and <strong>recursive traversal</strong> (see <a href=\"https://reverseengineering.stackexchange.com/questions/139/what-are-the-techniques-disassemblers-use-to-process-a-binary/140#140\">here</a> for more details). </p>\n<p>Both are quite widely used in the wild by numerous reverse-engineers. But, actually, none of these technique is neither exact, nor an over-approximation, nor an under-approximation. They both output something which is none of what we just seen before (sometime they will invent a path that will never be reached, and sometime they will forget about another one).</p>\n<p>More advanced techniques with more concern about the correctness exists (eg <a href=\"http://www.jakstab.org/\" rel=\"nofollow noreferrer\">Jakstab</a>, <a href=\"http://www.grammatech.com/research/technologies/mcveto\" rel=\"nofollow noreferrer\">McVeto</a>, <a href=\"http://research.cs.wisc.edu/wpis/examples/mcveto/\" rel=\"nofollow noreferrer\">McVeto on self-modifying code</a>, ...), but the quest for <strong>exact</strong> recovery is surely out of reach.</p>\n<p>So, choosing between <strong>under</strong> and <strong>over-approximation</strong> depends of what will be the usage of the disassembler output.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}