{
    "title": "Automated Assembly/Disassemble library",
    "link": "https://reverseengineering.stackexchange.com/questions/4664/automated-assembly-disassemble-library",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm writing a handy reverse tool in C++ with manual assembling/disassembling shell, to automate my work!</p>\n<p>I need an assembler library.\nIs there any library, embedding in C++?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "dynamic-analysis"
    ],
    "user": "sealed...",
    "time": "Jun 21, 2014 at 14:10",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">What exactly the library should do ? Disassembling ? Shell ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Oleh Yuschuk released a light-weight open-source assembler library that you can download from <a href=\"http://ollydbg.de/srcdescr.htm\" rel=\"nofollow noreferrer\">http://ollydbg.de/srcdescr.htm</a></p>\n<blockquote>\n<p><strong>Assemble</strong></p>\n<p>Function Assemble(), as expected, converts command from ASCII\nform to binary 32 bit code.</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>  // Assemble one of the commands above. First try form with 32-bit immediate.\n  pasm=\"ADD [DWORD 475AE0],1\";\n  printf(\"%s:\\n\",pasm);\n  j=Assemble(pasm,0x400000,&amp;am,0,0,errtext);\n  n=sprintf(s,\"%3i  \",j);\n  for (i=0; i&lt;j; i++) n+=sprintf(s+n,\"%02X \",am.code[i]);\n  if (j&lt;=0) sprintf(s+n,\"  error=\\\"%s\\\"\",errtext);\n  printf(\"%s\\n\",s);\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can take one of these projects (I choose the alphabetic order to sort them):</p>\n<h2>Assembler/Disassembler</h2>\n<ul>\n<li><a href=\"http://www.gnu.org/software/binutils/\" rel=\"nofollow\">GNU binutils</a> (<strong>Archs</strong>: i386, AMD64, ARM, Sparc, MIPS, ...; <strong>Formats</strong>: ELF, Mach-O, PE (partial)).</li>\n<li><a href=\"https://code.google.com/p/miasm/\" rel=\"nofollow\">Miasm</a> (<strong>Archs</strong>: i386, ARM, PowerPC, MSP430; <strong>Formats</strong>: ELF, PE) </li>\n<li><a href=\"http://metasm.cr0.org/\" rel=\"nofollow\">Metasm</a> (<strong>Archs</strong>: i386, AMD64, PowerPC, MIPS; <strong>Formats</strong>: ELF, Mach-O (partial), PE)</li>\n<li><a href=\"http://www.nasm.us/\" rel=\"nofollow\">NASM</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, Mach-O, PE)</li>\n<li><a href=\"http://www.radare.org/y/\" rel=\"nofollow\">Radare2</a>: <a href=\"http://radare.org/y/?p=examples&amp;f=rasm\" rel=\"nofollow\">rasm</a> (<strong>Archs</strong>: i386, AMD64, ARM, PowerPC, Sparc, MIPS, ...; <strong>Formats</strong>: ELF, Mach-O, PE)</li>\n<li><a href=\"http://ollydbg.de/srcdescr.htm\" rel=\"nofollow\">srcdescr</a> (<strong>Archs</strong>: i386; <strong>Formats</strong>: PE)</li>\n<li><a href=\"http://yasm.tortall.net/\" rel=\"nofollow\">YASM</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, Mach-O, PE)</li>\n</ul>\n<h2>Disassembler (only)</h2>\n<ul>\n<li><a href=\"http://bap.ece.cmu.edu/\" rel=\"nofollow\">BAP</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, PE)</li>\n<li><a href=\"http://beatrix2004.free.fr/BeaEngine/index1.php\" rel=\"nofollow\">BeaEngine</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: PE)</li>\n<li><a href=\"http://www.capstone-engine.org/\" rel=\"nofollow\">Capstone Engine</a> (<strong>Archs</strong>: i386, AMD64, ARM, PowePC, Sparc, MIPS, ...; <strong>Formats</strong>: ELF, Mach-O, PE)</li>\n<li><a href=\"https://code.google.com/p/distorm/\" rel=\"nofollow\">distorm</a> (<strong>Archs</strong>: i386, AMD64)</li>\n<li><a href=\"http://www.eresi-project.org/\" rel=\"nofollow\">ERESI</a>: <a href=\"http://www.eresi-project.org/wiki/TheLibASM\" rel=\"nofollow\">libasm</a> (<strong>Archs</strong>: i386, ARM, Sparc, MIPS; <strong>Formats</strong>: ELF)</li>\n<li><a href=\"https://code.google.com/p/gdsl-toolkit/wiki/Overview\" rel=\"nofollow\">GDSL</a> (<strong>Archs</strong>: i386, MSP430, AVR)</li>\n<li><a href=\"http://www.hopperapp.com/tutorial.html\" rel=\"nofollow\">Hopper</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, Mach-O, PE)</li>\n<li><a href=\"https://insight.labri.fr/trac\" rel=\"nofollow\">Insight</a> (<strong>Archs</strong>: i386, AMD64, MSP430; <strong>Formats</strong>: ELF, PE (partial), Mach-O (partial))</li>\n<li><a href=\"https://code.google.com/p/libdasm/\" rel=\"nofollow\">libdasm</a> (<strong>Archs</strong>: i386)</li>\n<li><a href=\"http://bastard.sourceforge.net/libdisasm.html\" rel=\"nofollow\">libdisasm</a> (from <a href=\"http://bastard.sourceforge.net/\" rel=\"nofollow\">bastard</a> project) (<strong>Archs</strong>: i386; <strong>Formats</strong>: ELF, PE)</li>\n<li><a href=\"http://mkfs.github.io/content/opdis/\" rel=\"nofollow\">Opdis</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, Mach-O, PE)</li>\n<li><a href=\"https://code.google.com/p/pyew/\" rel=\"nofollow\">Pyew</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, PE)</li>\n<li><a href=\"http://udis86.sourceforge.net/\" rel=\"nofollow\">Udis86</a> (<strong>Archs</strong>: i386, AMD64)</li>\n</ul>\n<h2>Assembler (only)</h2>\n<ul>\n<li><a href=\"http://flatassembler.net/\" rel=\"nofollow\">FASM</a> (<strong>Archs</strong>: i386, AMD64; <strong>Formats</strong>: ELF, PE)</li>\n</ul>\n<p><strong>EDIT</strong>:\nEach of these projects either contains a library that can be used as it is, or can be wrapped into a library that you will have to code by yourself with the features that you request.</p>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "Jun 25, 2014 at 9:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sealed...",
                    "text": "<span class=\"comment-copy\">thanks @perror for fast and informative answer, but I'm looking for <b>assembler</b> library. except <i>GDSL toolkit</i> and <i>METASM</i> ( that i don't know what exactly they are), others are disassemblers.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Then, you should look at Miasm and go a bit deeper in all the items. GAS (GNU ASsembler), NASM and others have also an assembler library inside.</span>",
                    "time": null
                },
                {
                    "user": "sealed...",
                    "text": "<span class=\"comment-copy\">Yeap! but NASM &amp; GAS are not lib and extracting parser and assembler is not easy work! I'm looking for easy way!</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You should definitely take a deeper look at all these projects. What you ask for is unclear and there is probably no such library. So, you will need some work at some point. Yet, Radare2, Miasm, GNU binutils and the ERESI project should contain everything you need (but maybe in a state that will require some work before being usable).</span>",
                    "time": null
                },
                {
                    "user": "jvoisin",
                    "text": "<span class=\"comment-copy\">Radare2 can of course assemble :)</span>",
                    "time": null
                }
            ]
        }
    ]
}