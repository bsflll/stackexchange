{
    "title": "strtok called on char pointer at 0",
    "link": "https://reverseengineering.stackexchange.com/questions/23064/strtok-called-on-char-pointer-at-0",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on a larger reversing project and came across this segment. I don't really understand what's going on here. There is no other way to proceed along the flow of control besides bypassing this block and jumping to 0x400d2d. Also noting that there are other locations in this program that call strtok with \"reasonable\" arguments, and I've bypassed those sections correctly. Would anyone share some wisdom I'm lacking? Thank you!</p>\n<pre><code>mov     esi, 0x401018  // delimiter argument '\\'\nmov     edi, 0x0       // address at 0? doesn't make sense\ncall    strtok\nmov     qword [rbp-0x48], rax  // this is always going to return 0\ncmp     qword [rbp-0x48], 0x0  \njne     0x400d2d // want to jump here, but can't\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "391",
    "tags": [
        "x86"
    ],
    "user": "TyManning",
    "time": "Jan 21, 2020 at 0:07",
    "comments": [
        {
            "user": "4n6fun",
            "text": "<span class=\"comment-copy\">I'm pretty sure I'm working on the same problem as you were. My issue is the delimiter gets included with my response portion making my response different than the variable it checks against. Isn't strtok supposed to remove the delimiter?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This would be typical to see in use of strtok function.\nExample code from <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm\" rel=\"nofollow noreferrer\">here</a></p>\n<pre><code>#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n\nint main()\n{\nchar str[80] = \"This is - www.tutorialspoint.com - website\";\n   const char s[2] = \"-\";\n   char *token;\n\n   /* get the first token */\n   token = strtok(str, s);\n\n   /* walk through other tokens */\n   while( token != NULL ) {\n      printf( \" %s\\n\", token );\n\n      token = strtok(NULL, s);\n   }\n}\n</code></pre>\n<p>Disassembly:</p>\n<pre><code>.LC0:\n        .string \" %s\\n\"\nmain:\n        push    rbp\n        mov     rbp, rsp\n        sub     rsp, 112\n        movabs  rax, 2338328219631577172\n        movabs  rdx, 8463440690376286253\n        mov     QWORD PTR [rbp-96], rax\n        mov     QWORD PTR [rbp-88], rdx\n        movabs  rax, 8102939320206389108\n        movabs  rdx, 7885630523722066287\n        mov     QWORD PTR [rbp-80], rax\n        mov     QWORD PTR [rbp-72], rdx\n        movabs  rax, 7598525184233975072\n        mov     edx, 25972\n        mov     QWORD PTR [rbp-64], rax\n        mov     QWORD PTR [rbp-56], rdx\n        mov     QWORD PTR [rbp-48], 0\n        mov     QWORD PTR [rbp-40], 0\n        mov     QWORD PTR [rbp-32], 0\n        mov     QWORD PTR [rbp-24], 0\n        mov     WORD PTR [rbp-98], 45\n        lea     rdx, [rbp-98]\n        lea     rax, [rbp-96]\n        mov     rsi, rdx\n        mov     rdi, rax\n        call    strtok\n        mov     QWORD PTR [rbp-8], rax\n.L3:\n        cmp     QWORD PTR [rbp-8], 0\n        je      .L2\n        mov     rax, QWORD PTR [rbp-8]\n        mov     rsi, rax\n        mov     edi, OFFSET FLAT:.LC0\n        mov     eax, 0\n        call    printf\n        lea     rax, [rbp-98]\n        mov     rsi, rax\n        mov     edi, 0\n        call    strtok\n        mov     QWORD PTR [rbp-8], rax\n        jmp     .L3\n.L2:\n        mov     eax, 0\n        leave\n        ret\n</code></pre>\n<p>The  token = strtok(NULL, s); line is compiled with </p>\n<pre><code>mov edi,0\ncall strtok\n</code></pre>\n<p>You can quickly check/compare different compilers and their assembly output with the website <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">https://godbolt.org/</a></p>\n</div>",
            "votes": "3",
            "user": "chentiangemalc",
            "time": "Jan 21, 2020 at 5:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "TyManning",
                    "text": "<span class=\"comment-copy\">I see. I think I understand what's going on then. The segment I shared is looking at the next token along the line. Thanks a ton for the help!</span>",
                    "time": null
                }
            ]
        }
    ]
}