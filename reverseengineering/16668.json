{
    "title": "Getting the correct memory address for a specific value",
    "link": "https://reverseengineering.stackexchange.com/questions/16668/getting-the-correct-memory-address-for-a-specific-value",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was watching this series of videos and I noticed that his memory addresses were not changing every time he restarted the game and/or olly. In addition, his comments seemed to stick around and he was able to easily find where he had been working previously. <a href=\"https://www.youtube.com/watch?v=BHYjxsDROn4&amp;t=8s\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=BHYjxsDROn4&amp;t=8s</a> </p>\n<p>I am also trying to grab specific memory addresses and write a basic program that allows me to change them by writing to them externally, but every time I try to do it the memory address changes. I realize that memory is dynamic and this is supposed to happen, but I don't understand why it was not happening to him. Is it just because it is an older video and that's how it used to work, or am I missing something. In addition, in order to do it now I assume I need to somehow get the offset from the base address. Every video I watch about doing this refers to finding an offset for a pointer. Do only pointers maintain a static offset? If so, how do I find this in ollydbg?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ollydbg",
        "c++"
    ],
    "user": "3asssains",
    "time": "Oct 30, 2017 at 21:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your your post contains multiple questions, I recommend separating them, and providing more details to them. My answer will be vague for this reason. </p>\n<p>About the unchanging memory addresses, I assume what you are looking for is <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">ASLR</a>. Read <a href=\"https://blogs.msdn.microsoft.com/winsdk/2009/11/30/how-to-disable-address-space-layout-randomization-aslr/\" rel=\"nofollow noreferrer\">this</a> and <a href=\"http://icompile.eladkarako.com/disable-aslr/\" rel=\"nofollow noreferrer\">this</a> on the subject. As far as I know, you could use <a href=\"https://support.microsoft.com/en-us/help/2458544/the-enhanced-mitigation-experience-toolkit\" rel=\"nofollow noreferrer\">EMET</a> or patch the executable directly to disable ASLR, thus the addresses wont change.  </p>\n<p>Alternatively, you could use <a href=\"https://reverseengineering.stackexchange.com/questions/4625/how-to-find-functions-in-games/4630#4630\">other techniques</a> to find your address, even if its changing.</p>\n<p>As for offsets, they are usually added to a static address, to it to access the objects field/property. The specific addresses and offsets obviously depends on what you are trying to do, and should be acquired from your executable, by observing it in a debugger. </p>\n<p>For example:</p>\n<ul>\n<li><p>Lets assume that you found that the game has a <code>player</code> object in the memory (the location might change on every run). </p></li>\n<li><p>Lets say that you found a static pointer an instance of the <code>player</code> object called \"pPlayer\", at this memory address: <code>0xAB1234</code>.</p></li>\n<li><p>Lets also say that you know (because you reverse engineered the objects structure) that the <code>player</code> objects has a field containing the health points of your in-game character, stored as an integer, at the <code>0x16</code> offset.</p></li>\n<li><p>By adding the found offset to the <code>player</code> object address (base address of the object), you will get the memory address containing the character's \ncurrent HP. And you could read it like this externally in your program or Cheat Engine: <strong>[[0xAB1234]+0x16]</strong>. In pseudo code it means that:</p>\n<p><code>AddressOfPlayerObject = memory.Read(0xAB1234)</code></p>\n<p><code>AddressOfHP = AddressOfPlayerObject + 0x16</code></p>\n<p><code>PlayerHP = memory.Read(AddressOfHP)</code></p></li>\n</ul>\n</div>",
            "votes": "3",
            "user": "Dominik Antal",
            "time": "Oct 31, 2017 at 13:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">By the way, there are a lot of ready to use libraries for manipulating process memory on Windows. Just search \"memory hacking library\" on Google, or Github.  They will provide functions like ReadInt32, ReadString, etc... so you dont have to directly deal with Windows's ReadProcessMemory API.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reason his memory addresses weren't changing <em>in that scenario</em> is because the game is 32-bit and loaded into memory conventionally per <strong><a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20141003-00/?p=43923\" rel=\"nofollow noreferrer\">this</a></strong> and <strong><a href=\"https://msdn.microsoft.com/en-us/library/ms809762.aspx\" rel=\"nofollow noreferrer\">this</a></strong> (do a CTRL + F for 0x400000 and read the paragraph the first 2 results are located in).</p>\n<p>You may also see addresses referenced by a symbol name, like ac_client.exe+5B2C0, where ac_client.exe references a base of 0x400000 plus the offset 0x5B2C0.</p>\n<p>As for what you're trying to accomplish in C++, there are Windows functions you can use to identify a process and then acquire its base address. Then you can base offsets off that. If your addresses are changing every time you start the game, then as Dominik suggested, ASLR may be what you're dealing with. Or an anti-cheat/obfuscation implementation like Denuvo. Or a game utilizing something like JVM which can change addresses <em>and</em> sub-routine instructions with each restart.</p>\n<p>Your options are commonly to reference a symbol name, find a base address + offset to reference, or identify a byte signature (aka \"array of bytes\") you can scan for--of which you then acquire an address to use either in and of itself, or as a reference point to base an offset from.</p>\n<p>There's a lot more to all of this, but I <em>highly</em> recommend you pick up the book <strong>\"<a href=\"https://www.nostarch.com/gamehacking\" rel=\"nofollow noreferrer\">Game Hacking</a>\"</strong>. For what you're looking to do, it will impart quite a bit of wisdom to you that you'd otherwise spend hours upon hours trying to piece together via posts and videos. It also provides code snippets you need for things like acquiring the PID of a running process, etc.</p>\n</div>",
            "votes": "3",
            "user": "dsasmblr",
            "time": "Oct 31, 2017 at 15:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "3asssains",
                    "text": "<span class=\"comment-copy\">Thank you! I actually already bought that book and am currently reading through it!</span>",
                    "time": null
                }
            ]
        }
    ]
}