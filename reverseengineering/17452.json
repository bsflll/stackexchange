{
    "title": "hooking sleep & beep syscalls",
    "link": "https://reverseengineering.stackexchange.com/questions/17452/hooking-sleep-beep-syscalls",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a binary which is playing a Morse code using calls to Beep &amp; Sleep.</p>\n<p>This file is Windows PE32 exe which I open via Wine on my Ubuntu (16.04).</p>\n<p>How can I extract the arguments which passed to Sleep or Beep whenever is been invoked ?</p>\n<p>Ideal result will be to open the file from terminal and each time Sleep is called it will log </p>\n<ul>\n<li>Sleep ( <em>Milliseconds</em> )</li>\n<li>Beep ( <em>Frequency</em> , <em>Duration</em> )</li>\n</ul>\n<p>The binary is packed &amp; obfuscated, can I edit the Kernel32.dll &amp; extend those methods ? </p>\n<ul>\n<li>Can I use <code>strace</code> ? if so, how do I filter Sleep &amp; Beep ?</li>\n</ul>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "function-hooking",
        "system-call",
        "wine"
    ],
    "user": "James W.",
    "time": "Feb 13, 2018 at 15:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're using Wine, you just need to enable the trace. Do the following:</p>\n<pre><code>$ WINEDEBUG=\"trace+msvcrt\" wine your_binary.exe\n</code></pre>\n<p>Taking a look to the Wine's source code I verified that both Sleep and Beep are being traced.</p>\n<p><a href=\"https://github.com/wine-mirror/wine/blob/master/dlls/msvcrt/misc.c#L37\" rel=\"nofollow noreferrer\">Beep</a>:</p>\n<pre><code>void CDECL MSVCRT__beep( unsigned int freq, unsigned int duration)\n{\n    TRACE(\":Freq %d, Duration %d\\n\",freq,duration);\n    Beep(freq, duration);\n}\n</code></pre>\n<p><a href=\"https://github.com/wine-mirror/wine/blob/master/dlls/msvcrt/misc.c#L81\" rel=\"nofollow noreferrer\">Sleep</a>:</p>\n<pre><code>void CDECL MSVCRT__sleep(MSVCRT_ulong timeout)\n{\n  TRACE(\"_sleep for %d milliseconds\\n\",timeout);\n  Sleep((timeout)?timeout:1);\n}\n</code></pre>\n<p>Naturally, you will need to filter out many other messages. Simply doing \"grep -v\" should be enough.</p>\n</div>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Feb 13, 2018 at 11:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">It doesn't write to the terminal, so where is the log file ?</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">It writes to the terminal, I verified it in my home computer with Wine 1.6.2 in Ubuntu 16.</span>",
                    "time": null
                },
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">I'm using same OS and wine 2.4 and it doesn't, I will try again</span>",
                    "time": null
                },
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">+relay &amp;&gt; log, then grep</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>not sure what you mean<br/>\ndot will always sound like dot  wont it ? \nso logically it will always have the same frequency and same duration ?</p>\n<p>like wise dash will always sound like dash ?<br/>\nif it varied like monkeydash , goatdash , pigdash each time it sounded then it wont be morse code ....<br/>\nso logically dash will have the same frequency and duration   </p>\n<p>so logical conclusion would be \nif you log them once you logged them forever in a specific program </p>\n<p>does it mage sense ?</p>\n<p>now that set aside why would you need to edit system dlls ?\ncant you run a debugger and set a breakpoint on the binary? why ?<br/>\nis it because it is packed and obfuscated and has heavy anti-debugging measures including checking for breakpoints on system dlls? </p>\n<p>if so you can try some thing like frida </p>\n<p>suppose you have some code like this </p>\n<pre><code>#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\nvoid beepchar(char letter) {\n    char *beeps[] = { \n        \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\n        \".---\",\"-.-\",\".-..\",\"--\",        \"-.\",\"---\",\".--.\",\"--.-\",\n        \".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"\n    };\n    char *curbeep= (beeps[(letter -'a')]);\n    printf(\"%s \" , curbeep);\n    while(*curbeep) {\n        if( *curbeep == '.') {\n            printf (\"dot \"); Beep(440,200);\n        } else {\n            printf(\"dash \"); Beep(440,400);\n        } curbeep++;\n    }printf(\"\\n\");\n}\nint main (int argc , char* argv[]) {\n    if(argc !=2) {\n        printf (\"usage %s some string\\n\",argv[0]);\n        exit(0);\n    } char *letter = argv[1];\n    while(*letter) {\n        unsigned char temp = *(unsigned char *)letter;\n        if(isalpha(temp))        {\n            beepchar((char)tolower(temp));\n        } else {\n            printf(\"not an alphabet\\n\");\n        } letter++;\n    } return 0;\n}\n</code></pre>\n<p>when compiled and executed you should get an output like this along with sound </p>\n<pre><code>:\\&gt;morsebeeper.exe\nusage morsebeeper.exe some string\n:\\&gt;morsebeeper.exe \"Hello World\"\n.... dot dot dot dot\n. dot\n.-.. dot dash dot dot\n.-.. dot dash dot dot\n--- dash dash dash\nnot an alphabet\n.-- dot dash dash\n--- dash dash dash\n.-. dot dash dot\n.-.. dot dash dot dot\n-.. dash dot dot\n\n:\\&gt;\n</code></pre>\n<p>you can use frida-trace to log the beeps </p>\n<p>just run <strong>frida-trace -i \"Beep\" .\\yourexe</strong> </p>\n<p>and edit the auto generated handler as you wish dynamically and reload it </p>\n<pre><code>:\\&gt;frida-trace -i \"Beep\" .\\morsebeeper.exe Hello\nInstrumenting functions...\nBeep: Loaded handler at \"xxx\\__handlers__\\kernel32.dll\\Beep.js\"\nBeep: Loaded handler at \"xxx\\__handlers__\\KERNELBASE.dll\\Beep.js\"\nStarted tracing 2 functions. Press Ctrl+C to stop.\n           /* TID 0xf44 */\n   109 ms  Beep()\n   110 ms     | Beep(440 , 200) &lt;&lt; dot\n   314 ms  Beep()\n   315 ms     | Beep(440 , 200) &lt;&lt; dot\n   547 ms  Beep()\n   547 ms     | Beep(440 , 200) &lt;&lt; dot\n   800 ms  Beep()\n   800 ms     | Beep(440 , 200) &lt;&lt; dot   \n   four dots above = h          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n  1093 ms  Beep()\n  1094 ms     | Beep(440 , 200) &lt;&lt; dot\n  one dot above is e            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n  l\n  1382 ms  Beep()\n  1382 ms     | Beep(440 , 200) &lt;&lt; dot\n  1609 ms  Beep()\n  1609 ms     | Beep(440 , 400) &lt;&lt; dash\n  2104 ms  Beep()\n  2104 ms     | Beep(440 , 200)\n  2333 ms  Beep()\n  2333 ms     | Beep(440 , 200)\n  l\n  2614 ms  Beep()\n  2614 ms     | Beep(440 , 200)\n  2895 ms  Beep()\n  2896 ms     | Beep(440 , 400)\n  3301 ms  Beep()\n  3302 ms     | Beep(440 , 200)\n  3503 ms  Beep()\n  3503 ms     | Beep(440 , 200)\n  o\n  3705 ms  Beep()\n  3705 ms     | Beep(440 , 400)\n  4197 ms  Beep()\n  4198 ms     | Beep(440 , 400)\n  4604 ms  Beep()\n  4604 ms     | Beep(440 , 400)\nstdout&gt; .... dot dot dot dot\nstdout&gt; . dot\nstdout&gt; .-.. dot dash dot dot\nstdout&gt; .-.. dot dash dot dot\nstdout&gt; --- dash dash dash\nstdout&gt;\nstderr&gt;\nProcess terminated\n\n:\\&gt;\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Feb 13, 2018 at 11:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">+1 trying frida-trace</span>",
                    "time": null
                },
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">$ sudo frida-trace <i>wine</i> \"Failed to attach: ambiguous name; it matches: wineserver (pid: 1), C:\\windows\\system32\\winedevice.exe (pid: 2), C:\\windows\\system32\\winedevice.exe (pid: 3)\" which one ? (tried all, does not seems to work, might have anti-reversing? I'll test with your example)</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i dont run nix and wine but shouldn't you be running frida inside wine and not frida from nix  i mean os-&gt;wine-&gt;frida-&gt;your_exe-&gt;args ?  not os-&gt;frida-&gt;wine-&gt;your_exe ??</span>",
                    "time": null
                },
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">Frida-trace can connect to process by pid</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">of course it can and my point is not that i meant shouldn't you need to install frida first inside wine (the windows version of frida ) and from that frida shouldn't you trace the executable in question  well i think i should dust off my ubu vm and see</span>",
                    "time": null
                }
            ]
        }
    ]
}