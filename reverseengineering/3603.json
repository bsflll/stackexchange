{
    "title": "How to extract all the rodata data and bss section using IDC script in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/3603/how-to-extract-all-the-rodata-data-and-bss-section-using-idc-script-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>test Platform is \n32 bit Linux ELF and 32 bit Windows PE.</p>\n<p>I use IDC script to extract all the functions from binary and dump \ninto a file, then do the analysis based on the examples in IDA Pro book.</p>\n<p>But I don't know how to extract .data .rodata and .bss\nsections from ELF file using IDC script.</p>\n<p>Currently I use IDA Pro to create a asm file, and use Python script to \ndo the string parser work, extracting .data .rodata and .bss\nsections from this asm file.</p>\n<p>Basically It works fine, but a really tedious modification work is required, \nand as my test base is relatively large(notepad++ and others..), I have to\nspend lots of time do modify work to correctly extract this three sections.</p>\n<p>My question is \"is there any idc script/idapython script can extract .data .rodata and .bss\nsections from ELF file?\" and any solutions on Windows are also welcomed.</p>\n<p>Thank you!</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "7k",
    "tags": [
        "ida",
        "disassembly",
        "ida-plugin",
        "idapython"
    ],
    "user": "lllllllllllll",
    "time": "Feb 2, 2014 at 15:07",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">What do you mean by extract section ? What information exactly do you want to get from there ?</span>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\">@ws Just the data info defined in .data .rodata and .bss sections...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For the <code>.bss</code> section something like the following may work for you:</p>\n<pre><code>import idaapi\nimport idc\n\nprint \"section .bss\"\nstart = idaapi.get_segm_by_name(\".bss\").startEA\nend = idaapi.get_segm_by_name(\".bss\").endEA\nitem = idc.NextHead(start - 1, end)\nwhile item != BADADDR:\n   next = idc.NextHead(item, end)\n   if next != BADADDR:\n      print \"%s: resb %d\" % (idc.Name(item), next - item)\n   else:\n      print \"%s: resb %d\" % (idc.Name(item), end - item)\n   item = next\n</code></pre>\n<p>although in practice, <code>NextHead</code> does not seem to pick up anything named as <code>unk_XXXX</code>, so you may need to further iterate over the section to determine whether there are any cross references to an address to decide whether to associate a declaration with it.</p>\n<p>For the <code>.data</code> and <code>.rodata</code> sections you will need to change to <code>db/dw/dd/...</code> as appropriate and additionally dump the content of the related items. The challenge for items in these sections is to properly determine the size of each item and correctly choose <code>db/dw/dd/...</code> Dumping raw bytes with <code>db</code> may be the simplest approach here.</p>\n</div>",
            "votes": "3",
            "user": "Chris Eagle",
            "time": "Feb 3, 2014 at 5:41",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>#Use carefully, I didn't check this code\n#beware errors\n#It's IDAPython, not IDC\n#\n\nimport idautils\nimport idc\nimport idaapi\n\nsegfiles = {\".rodata\": \"rodata.bin\",\n            \".data\": \"data.bin\"}\n\n# over all segments\nfor s in idautils.Segments():\n    if idc.SegName(s) in segfiles:\n        #if we need this segment ...\n        fname = segfiles[idc.SegName(s)]\n        f = open(fname, \"wb\")\n        start = idc.GetSegmentAttr(s, idc.SEGATTR_START)\n        end = idc.GetSegmentAttr(s, idc.SEGATTR_END)\n        #from start to end write all to file\n        while start &lt; end:\n            b = idc.Byte(start)\n            f.write(b)\n            start += 1\n        f.close()\n</code></pre>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Feb 2, 2014 at 15:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Hi ws, Thank you a lot for your answer! what I am trying to do is to generate file like this:<a href=\"https://gist.github.com/computereasy/2ce8cf016802a17970e5\" rel=\"nofollow noreferrer\">bss</a>   Is it possible to use IDA script to generate this from binary?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Run IDA from command line with -S switch</span>",
                    "time": null
                }
            ]
        }
    ]
}