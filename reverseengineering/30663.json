{
    "title": "What does MOV RAX,qword ptr FS:[0x28] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/30663/what-does-mov-rax-qword-ptr-fs0x28-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand what <code>MOV RAX,qword ptr FS:[0x28]</code> means. I get that <code>FS:[0x28]</code> is a stack canary. If my understanding is correct the data from <code>RAX</code> gets copied by <code>MOV</code>. Then there's a comma which separates the first operand <code>MOV RAX</code> from the second one <code>qword ptr FS:[0x28]</code>. What exactly does does <code>qword ptr FS:[0x28]</code> do?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "greg5678",
    "time": "Jul 20, 2022 at 0:39",
    "comments": [
        {
            "user": "Viktor",
            "text": "<span class=\"comment-copy\">This question is already answered here. <a href=\"https://stackoverflow.com/questions/10325713/why-does-this-memory-address-fs0x28-fs0x28-have-a-random-value\" title=\"why does this memory address fs0x28 fs0x28 have a random value\">stackoverflow.com/questions/10325713/â€¦</a></span>",
            "time": null
        },
        {
            "user": "greg5678",
            "text": "<span class=\"comment-copy\">Yeah, I already looked at that post, but it wasn't very clear to me.</span>",
            "time": null
        },
        {
            "user": "tkausl",
            "text": "<span class=\"comment-copy\">This is intel syntax, so the value gets copied <b>to</b> <code>RAX</code>, not <i>from</i>. <code>qword ptr FS:[0x28]</code> just means it references a quadword at memory location 0x28 in the FS segment.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is not clear from the context of the question but it depends on the platform, if you are on Windows then fs:[0x28] is the field ArbitraryUserPointer according to the following data structure.</p>\n<pre><code>ntdll!_NT_TIB\n   +0x000 ExceptionList    : Ptr64 _EXCEPTION_REGISTRATION_RECORD\n   +0x008 StackBase        : Ptr64 Void\n   +0x010 StackLimit       : Ptr64 Void\n   +0x018 SubSystemTib     : Ptr64 Void\n   +0x020 FiberData        : Ptr64 Void\n   +0x020 Version          : Uint4B\n   +0x028 ArbitraryUserPointer : Ptr64 Void\n   +0x030 Self             : Ptr64 _NT_TIB\n</code></pre>\n<p>You can find some information about this field in the TEB here:</p>\n<ul>\n<li><a href=\"https://codemachine.com/articles/arbitraryuserpointer_usage.html\" rel=\"nofollow noreferrer\">https://codemachine.com/articles/arbitraryuserpointer_usage.html</a></li>\n<li><a href=\"https://devblogs.microsoft.com/oldnewthing/20190418-00/?p=102428\" rel=\"nofollow noreferrer\">https://devblogs.microsoft.com/oldnewthing/20190418-00/?p=102428</a></li>\n</ul>\n</div>",
            "votes": "3",
            "user": "rotem.salinas",
            "time": "Jul 21, 2022 at 13:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The assembly you posted is in Intel syntax.</p>\n<p><code>MOV RAX, qword ptr FS:[0x28]</code></p>\n<p>The sentinel value stored is being copied into <code>RAX</code>, not from it. This code is part of a setup for copying the value into a stack canary.</p>\n</div>",
            "votes": "0",
            "user": "shebaw",
            "time": "Jul 21, 2022 at 12:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}