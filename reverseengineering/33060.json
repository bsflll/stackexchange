{
    "title": "How to set up Control Flow Guard function calls for proper decompilation with Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/33060/how-to-set-up-control-flow-guard-function-calls-for-proper-decompilation-with-gh",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Say, I have the following x64 assembly code that runs on Windows:</p>\n<pre><code>MOV        EDX ,dword ptr [RSI ]                    ; 2nd param\nTEST       EDX ,EDX\nJZ         lbl_out_1                                ; Skip the call below if 2nd param is 0\n\nMOV        RAX ,qword ptr [RBX ]                    ; Address of vtable in a class\nXOR        R8D ,R8D                                 ; 3rd param (always 0)\nMOV        RCX ,RBX                                 ; 1st param\nMOV        RAX ,qword ptr [RAX  + 0x28 ]            ; address of a virtual function, or a later  JMP rax inside CFG shim\nCALL       qword ptr [-&gt;_guard_dispatch_icall ]     ; CFG shim\n\nlbl_out_1:\n</code></pre>\n<p>it invokes a virtual function, but before doing so it passes it through the Control Flow Guard (CFG) shim, or <code>_guard_dispatch_icall</code>.</p>\n<p>The source code for the code above is invoking a (virtual) function in a class, at index 5 (because of the <code>RAX  + 0x28</code> part), with the class pointer being in <code>RBX</code>.</p>\n<p>I'm trying to make it more readable in the Ghidra's C-decompiler, but it looks like the CFG shim is messing it up. Here's what I did:</p>\n<p>I created a custom <code>Struct</code> in Ghidra, let's call it <code>MyClass</code>, and set up a member at its offset 0x28, as my custom function, let's call it <code>MyFunc</code>.</p>\n<p><code>MyFunc</code> was defined as such:</p>\n<pre><code>NTSTATUS MyFunc(MyClass * this, DWORD wnf_paraM1, bool bUpdateUI)\n</code></pre>\n<p><a href=\"https://i.sstatic.net/M6zFGYIp.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/M6zFGYIp.png\"/></a></p>\n<p>And even though it made the Assembly code above more readable, the call through the CFG shim still wasn't showing the function parameters:</p>\n<pre><code>if ((pVars-&gt;paraM1 == 0) ||\n   (lVar9 = (*(pMyClass)-&gt;\n              MyFunc)(), -1 &lt; lVar9)) goto LAB_18001be80;\n</code></pre>\n<p>Any idea how to make it work with the CFG shims?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "43",
    "tags": [
        "windows",
        "ghidra",
        "decompiler"
    ],
    "user": "c00000fd",
    "time": "Jul 3, 2024 at 12:48",
    "comments": [],
    "answers_data": []
}