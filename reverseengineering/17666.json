{
    "title": "How does the ldr instruction work on ARM?",
    "link": "https://reverseengineering.stackexchange.com/questions/17666/how-does-the-ldr-instruction-work-on-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>ldr r0, #0x28\n</code></pre>\n<p>What is the <code>ldr</code> instruction ? Does it load a string from some offset?\nHow can I find the string/value that is actually loaded ?</p>\n</div>",
    "votes": "10",
    "answers": 3,
    "views": "41k",
    "tags": [
        "assembly",
        "arm"
    ],
    "user": "ldr",
    "time": "Apr 9, 2021 at 23:44",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">are you sure it's <code>#0x28</code> and not <code>=#0x28</code>?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>LDR loads a 32-bit constant (LDRH (halfword): 16 bit, LDRB (byte): 8 bit) from memory into the specified target register (r0 in your example).</p>\n<p>Since 32-bit constants cannot be encoded in 32-bit opcodes (or 16-bit for Thumb instructions), the assembler stores the constant in the text segment close to the referencing instruction and then references the value using (usually) PC-relative addressing, i.e. some offset from r15.</p>\n<p>Thus, ldr is in fact a pseudo instruction. The following code</p>\n<pre><code>    .code 32\nmain:\n    ldr r0, =0x12345678\n    bx lr\n</code></pre>\n<p>is translated by the assembler into</p>\n<pre><code>00000000 &lt;main&gt;:\n       0:   e51f0000    ldr r0, [pc, #-0]   ; 8 &lt;main+0x8&gt;\n       4:   e12fff1e    bx  lr\n       8:   12345678    .word   0x12345678\n</code></pre>\n<p>As you can see, the constant referenced in the original ldr instruction is in fact stored at address 0x8 instead of in the instruction itself. The ldr instruction at address 0 then references this value using PC-relative addressing. The offset to the PC is 0 (instead of 8), since the actual PC value is always the address of the current instruction + 8 - this is an effect of the early ARM processor pipeline which has to be preserved for compatibility. </p>\n</div>",
            "votes": "8",
            "user": null,
            "time": "Mar 16, 2018 at 0:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This can be simply translated into:</p>\n<pre><code>r0 = 0x28;\n</code></pre>\n<p>In ARM assembly, the <code>#</code> marks the immediate values and the <code>r0</code>, <code>r1</code>, ... are registers. The <code>ldr</code> instruction can take the following syntactic forms (yours is the first line):</p>\n<pre><code>LDR{type}{cond} Rt, [Rn {, #offset}] ; immediate offset\nLDR{type}{cond} Rt, [Rn, #offset]! ; pre-indexed\nLDR{type}{cond} Rt, [Rn], #offset ; post-indexed\nLDRD{cond} Rt, Rt2, [Rn {, #offset}] ; immediate offset, doubleword\nLDRD{cond} Rt, Rt2, [Rn, #offset]! ; pre-indexed, doubleword\nLDRD{cond} Rt, Rt2, [Rn], #offset ; post-indexed, doubleword \n</code></pre>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "Mar 12, 2018 at 20:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><code>ldr</code> without <code>=</code> does PC relative loads</strong></p>\n<p>This is true for both labels and numbers.</p>\n<p>But you will of course rarely use numbers directly in your assembly. Maybe you have provided some disassembly without labels?</p>\n<p>Both of the following work in GNU GAS ARMv8. With a label:</p>\n<pre><code>    ldr x0, pc_relative_ldr\n    b 1f\npc_relative_ldr:\n    .quad 0x123456789ABCDEF0\n1:\n    /* x0 == 0x123456789ABCDEF0 */\n</code></pre>\n<p>with an offset:</p>\n<pre><code>    ldr x0, 0x8\n    b 1f\n    .quad 0x123456789ABCDEF0\n1:\n    /* x0 == 0x123456789ABCDEF0 */\n</code></pre>\n<p>Both are equivalent. The assembler just happens to convert the label into the correct offset for you.</p>\n<p><a href=\"https://github.com/cirosantilli/arm-assembly-cheat/blob/c4e0662e334052cbdbb18faedf67c78bd792e718/v8/pc.S#L40\" rel=\"nofollow noreferrer\">GitHub upstream with assertions</a>.</p>\n<p>STR does not have PC-relative addressing like LDR in ARMv8, you just have to calculate the address into registers first: <a href=\"https://stackoverflow.com/questions/28638981/howto-write-pc-relative-adressing-on-arm-asm/54480999#54480999\">https://stackoverflow.com/questions/28638981/howto-write-pc-relative-adressing-on-arm-asm/54480999#54480999</a></p>\n</div>",
            "votes": "3",
            "user": "Ciro Santilli",
            "time": "Feb 8, 2019 at 9:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}