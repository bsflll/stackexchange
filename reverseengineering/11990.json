{
    "title": "Reversing Qt application",
    "link": "https://reverseengineering.stackexchange.com/questions/11990/reversing-qt-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to reverse-engineer a Qt crackme written for linux. I would like to follow where introduced text gets. I have found <a href=\"http://silmor.de/qtstuff.printqstring.php\" rel=\"nofollow noreferrer\">this</a> <code>gdb</code> macro to print QStrings (Qt5). To test it I wrote a simple helloworld application containing:</p>\n<pre><code>QString str(\"almafa\");\nqDebug() &lt;&lt; str;\n</code></pre>\n<p>This prints the QString as expected.</p>\n<pre><code>(gdb) printqs5static str\n(Qt5 QString)0xffffdf50 length=6: \"almafa\"\n</code></pre>\n<p>After this I tried to inspect QStrings where no variable names are present.</p>\n<p>The compiled code looks like (in <code>radare2</code>):</p>\n<pre><code>|           0x00400ab7      488d45b0       leaq -0x50(%rbp), %rax\n|           0x00400abb      488d55c0       leaq -0x40(%rbp), %rdx\n|           0x00400abf      4889d6         movq %rdx, %rsi\n|           0x00400ac2      4889c7         movq %rax, %rdi\n|           0x00400ac5      e816feffff     callq sym.QMessageLogger::debug\n|           0x00400aca      488d55a0       leaq -0x60(%rbp), %rdx\n|           0x00400ace      488d45b0       leaq -0x50(%rbp), %rax\n|           0x00400ad2      4889d6         movq %rdx, %rsi\n|           0x00400ad5      4889c7         movq %rax, %rdi\n|           0x00400ad8      e863020000     callq sym.QDebug::operator__\n</code></pre>\n<p>I do not have experience debugging Qt applications, but I expected that from the above code snippet that at <code>0x400ad8</code> either <code>rsi</code> or <code>rdi</code> will be the QString. Unfortunately <code>printqs5static $rsi</code> is not working. <code>i r $rsi</code> gives <code>0x7ffffffdf50</code>, the address from <code>printqs5static str</code> result.</p>\n<p>The question is how to inspect QStrings when only memory addresses are available?</p>\n<p>Edit: The web page I am referring is down at this moment, but a cashed version is <a href=\"http://webcache.googleusercontent.com/search?q=cache:http://silmor.de/qtstuff.printqstring.php\" rel=\"nofollow noreferrer\">here</a>.\n<a href=\"https://stackoverflow.com/questions/10492290/gdb-pretty-printers-for-qt5\"><code>gdb</code>pretty printers </a> are also able to print QStrings if there are symbolic names available. Still do not know how to work without them.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "qt"
    ],
    "user": "robert",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "broadway",
            "text": "<span class=\"comment-copy\">I'd take a look at the following related question: <a href=\"http://reverseengineering.stackexchange.com/questions/6828/hints-to-reverse-engineering-a-qt-software\" title=\"hints to reverse engineering a qt software\">reverseengineering.stackexchange.com/questions/6828/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Did you try <code>printqs5static $rdi</code>? Assuming that call goes to the function with the prototype <code>QDebug &amp; QDebug::operator&lt;&lt;(const QString &amp; s)</code>, then it's <code>rdi</code> that should contain the <code>QString</code>, not RSI.</p>\n<p>Another option is to dump memory around <code>rdi</code> and <code>rsi</code>. I doubt the object is super complicated, so there should be a pointer to a normal C string nearby.</p>\n</div>",
            "votes": "1",
            "user": "Gdogg",
            "time": "Feb 19, 2016 at 0:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}