{
    "title": "Find assembly in binary with ida python",
    "link": "https://reverseengineering.stackexchange.com/questions/26526/find-assembly-in-binary-with-ida-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to find 2 consecutive instructions with Ida python</p>\n<p><code>move r2,r3 ; move r2 r4</code></p>\n<p>What is the easy way to find the addresses of that with Ida python?</p>\n<p>I can Iterate on all <code>Functions</code> and for each function get dissasembly by <code>idc.GetDisasm</code> and then looking for the value but it's take lot of time.</p>\n<p>Is there any smart and faser way?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "paramikoooo",
    "time": "Dec 13, 2020 at 10:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use module <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_search-module.html#find_binary\" rel=\"nofollow noreferrer\">ida_search and function find_binary</a>.\nIf I understand this correctly, the arguments are</p>\n<ul>\n<li>search start address</li>\n<li>search end address</li>\n<li>search string (like \"aa bb cc 01 02\")</li>\n<li>radix(should be 16)</li>\n<li>direction (like ida_search.SEARCH_DOWN).</li>\n</ul>\n<p>First you should find binary representing desired instructions (you can do it by text search in your executable or assemble it for your architecture), then just use it as an argument.</p>\n<p>You can find plenty of examples of this function usage for reference <a href=\"https://github.com/search?q=find_binary%20ida_search&amp;type=code\" rel=\"nofollow noreferrer\">at github</a>.</p>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Dec 13, 2020 at 12:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "paramikoooo",
                    "text": "<span class=\"comment-copy\">but how can I convert <code>move r2,r3</code> to binary code ?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">which CPU/architecture are you working with ?</span>",
                    "time": null
                },
                {
                    "user": "paramikoooo",
                    "text": "<span class=\"comment-copy\">ARM  arch . convert it with python</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I don't remember movE instruction in arm architecture (there is mov{condition}, which may be eq, for example, but not E). Did you mean mov ?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <code>find_text</code> in the <code>ida_search</code> module if you want to do a textual search. It's probably better to use a more intelligent search method, though. What I personally would do would be to use <code>ida_ua::decode_insn</code> to produce an <code>insn_t</code> object, compare its <code>itype</code> member against the platform-specific constant for the <code>move</code> instruction, and then inspect the register numbers to make sure they match what I want. Something like this:</p>\n<pre><code># Decode instruction at ea\nins = ida_ua.insn_t()\nif ida_ua.decode_insn(ins,ea) == 0:\n    print(\"%#x: could not disassemble?\" % ea)\n    return False\n\n# Check to see if it's the \"movl\" instruction\nif ins.itype != ida_allins.ARM_movl:\n    return False\n\n# Is the first operand a register, internal register number 2?\nif ins.op[0].type != ida_ua.o_reg:\n    return False\n# Or whatever the register number for r2 is, might not be 2\nif ins.op[0].reg != 2:\n    return False\n\n# Is the first operand a register, internal register number 3?\nif ins.op[1].type != ida_ua.o_reg:\n    return False\n# Or whatever the register number for r3 is, might not be 3\nif ins.op[1].reg != 3:\n    return False\n\nprint(\"%#x: found movl r2, r3\" % ea)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jan 13, 2021 at 17:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}