{
    "title": "Find level data in binaries?",
    "link": "https://reverseengineering.stackexchange.com/questions/2160/find-level-data-in-binaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to recreate an old game just for the sake of nostalgia and learning something new alongside (I can program in various languages and know a bit of assembly language, but I'm new to reverse engineering). The game is called Banania and looks like this:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VNEfD.jpg\"/></p>\n<p>Now, my problem is finding the level data of this game (It's only one .exe file, nothing else). If I would have made this game, I would have stored the levels (which seem to be of Size 21x13) in a three dimensional array (50x21x13) for 50 total levels.\nHowever, I just can't seem to find any rectangular pattern of that size that look like levels in my hex editor.</p>\n<p>How would you try to find it? I'd be grateful for some help.</p>\n<p>EDIT: After staring at the binaries for the whole day, I finally found the level data! I discovered it by luck, it was just a large chunk with only about 20 different numbers used. The format is exactly like I expected. Since I know how the levels look, it shouldn't be too hard to guess what integer stands for which item. Apparently, Integers on Windows 3.1 were 16 bit long (at least, that's my guess), that's why I didn't find it at first.</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "398",
    "tags": [
        "binary-analysis"
    ],
    "user": "Kenji",
    "time": "Jun 1, 2013 at 18:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on <a href=\"http://pastebin.com/raw.php?i=t8BG08xf\" rel=\"nofollow\">the output</a> of <a href=\"http://www.solemnwarning.net/page/code#nedump\" rel=\"nofollow\">NE dumper</a>, the level data appears to begin at file offset 0x17600 and each level appears to be 0x200 bytes long.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Jun 1, 2013 at 19:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kenji",
                    "text": "<span class=\"comment-copy\">You're absolutely right, I found it out myself in the meantime. Thanks for pointing it out. To be honest, I'm kind of mindblown that a program can find that out for you. I will definitely check NE dumper out,</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">It helped that Banania's author named those resources \"LEVEL\" ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You will probably don't see the rectangular patterns because of line width vs. actual data structure width. So it's totally displaced. </p>\n<p>But you could try <a href=\"https://code.google.com/p/binwalk/wiki/Screenshots#Entropy\" rel=\"nofollow noreferrer\">binwalk (a firmware analysis tool)</a> to display a graph with the entropy of the file, which can help to identify repetetive regions in the executable.</p>\n<p><img alt=\"entropy example output\" src=\"https://i.sstatic.net/ariRD.png\"/></p>\n</div>",
            "votes": "5",
            "user": "samuirai",
            "time": "Jun 1, 2013 at 16:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Kenji",
                    "text": "<span class=\"comment-copy\">Thanks, I'll look into it. Unfortunately I currently only use Windows so I'll have to install Linux some time.</span>",
                    "time": null
                }
            ]
        }
    ]
}