{
    "title": "Reversing a function, methodology",
    "link": "https://reverseengineering.stackexchange.com/questions/10771/reversing-a-function-methodology",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Which are the methods or which are the steps for from a asm disassembled function code  passing/converting it to 'C/C++' or other language and tell what happens.</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "275",
    "tags": [
        "disassembly",
        "assembly",
        "decompilation"
    ],
    "user": "erichnagy",
    "time": "Mar 12, 2018 at 22:02",
    "comments": [
        {
            "user": "Hackndo",
            "text": "<span class=\"comment-copy\">Ok that's a very difficult question, because there is no unique answer. Either you should specify a function that causes you problems, or you should add some specifics. Currently, your question looks like this : \"How to reverse something ?\". Meanwhile, I suggest you take a look at this website <a href=\"http://www.binary-auditing.com/\" rel=\"nofollow noreferrer\">binary-auditing.com</a> introducing basic HLL (High Level Language) in ASM.</span>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\"><a href=\"http://zyloid.com/recomposer/files/decompilation_thesis.pdf\" rel=\"nofollow noreferrer\">zyloid.com/recomposer/files/decompilation_thesis.pdf</a></span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\"><a href=\"https://retdec.com/publications/\" rel=\"nofollow noreferrer\">retdec.com/publications</a> , start from older ones.</span>",
            "time": null
        },
        {
            "user": "erichnagy",
            "text": "<span class=\"comment-copy\">@VitalyOsipov nice, its helpfull. @w s i look at it too.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For me the steps to reverse a function are usually this ones :</p>\n<ol>\n<li><p>Identify the calling convention used in the executable.</p></li>\n<li><p>try to identify all arguments passed to the function and understand their types and usages :</p>\n<ul>\n<li>Look for stacked arguments and register's one.</li>\n<li>Analyze code around use of arguments to understand their types and use.</li>\n<li>identify references and structures.</li>\n<li>note for each argument if it is an INPUT one or an OUTPUT one, what is his type and purpose or guessed purposed.</li>\n<li>identify the return of the function (generally eax for example in x86) : what are the possible returning values ? Error return cases gives clues about come chunks of code of the function.</li>\n</ul></li>\n<li><p>Look code around calls to the function to try to figure out what the function is about.</p></li>\n<li><p>analyze the content of the function isolating chunks of code, each chunk corresponding to a line of C for example. To identify chunks :</p>\n<ul>\n<li>look the graph of function to figure out the different paths and the complexity level of the function. Try to identify patterns like switch, imbricated if, loops, etc.</li>\n<li>look for calls to another functions, library calls or API calls. For a non obfuscated code this is usually easy to do.</li>\n</ul></li>\n<li><p>this step is simultaneous to the precedent. Look the use of local variables and try to name them. For each local variable :</p>\n<ul>\n<li>is the variable re-used in the function for different purposes ? if so rename it with a generic type name.</li>\n<li>if the variable is used for a single purpose, try to understand what it is and name the variable in consequence.</li>\n</ul></li>\n<li><p>Don't expect to understand all the function with a single pass of analyze. Repeat the process. If a chunk of code is not clear, go to the next one and return later to the hard one. Each time you understand a chunk, review your previous work to see if your guessed are consistent with your new findings.</p></li>\n<li><p>If the function calls another functions, proceed with a bottom-up method like leafs are usually simples than branches and understanding leafs help to understand branches.</p></li>\n<li><p>Try to look at mixed source code C/asm for example, with a debugger or with  the good compiler switch (/FAs or /FAcs for example in Visual Studio).</p></li>\n</ol>\n<p>Hope that helps.</p>\n</div>",
            "votes": "6",
            "user": "roubachof",
            "time": "Sep 2, 2015 at 22:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}