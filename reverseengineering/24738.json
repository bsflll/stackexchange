{
    "title": "Where do mouse/keyboard GUI inputs get queued or stored?",
    "link": "https://reverseengineering.stackexchange.com/questions/24738/where-do-mouse-keyboard-gui-inputs-get-queued-or-stored",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Where do mouse-clicks in a program's GUI window/menus (Windows OS) get stored in memory? Is there some sort of input/GUI \"queue\" similar to Windows messages queuing?</p>\n<p>I'm wondering if it'd be possible to manually manipulate these queues, for example, to make a program (or the OS) think that an item or coordinate was mouse-clicked when it wasn't (physically).</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "319",
    "tags": [
        "windows",
        "memory",
        "function-hooking",
        "stack",
        "windows-10"
    ],
    "user": "Coldblackice",
    "time": "Apr 17, 2020 at 23:52",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">You question is a good example of asking for a way to achieve something specific without stating the underlying problem. When reading your question one has to wonder if not one of several available paths would be more applicable than what you have chosen as the right path for yourself. Perhaps you could amend your answer to include the actual problem statement as well ...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Once messages are dispatched to the application, it is the architecture of each application that determines the processing.</p>\n<p>Certain applications create queues, others directly dispatch the message directly. The latter is more common.</p>\n<p>Ideally, you could directly call the message pump with your messages, this way you can make the application believe that certain events have occurred.</p>\n<p>Depending on the application, this could work. However, the problem is that once the application receives your fake messages, it could require additional information from the environment and the processing might not go as expected.</p>\n<p>For example, suppose you inject a mouse event, and the application also checks the state of the keyboard via <code>GetAsyncKeyState</code>, then you won't be able to go further on the processing because you cannot fake easily the state of the keyboard if not by hooking the API too.</p>\n<p>A better approach is to stimulate the user interaction via <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessage\" rel=\"nofollow noreferrer\">SendMessage</a> (which however had the same problem with async checks) or with <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendinput\" rel=\"nofollow noreferrer\">SendInput</a>.</p>\n</div>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "May 14, 2021 at 20:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I think a mention of UIPI would be in order in the days of Windows Vista and newer ðŸ˜‰</span>",
                    "time": null
                }
            ]
        }
    ]
}