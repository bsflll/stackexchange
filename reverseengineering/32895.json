{
    "title": "Shift operation and subtract in code",
    "link": "https://reverseengineering.stackexchange.com/questions/32895/shift-operation-and-subtract-in-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is C++ code:</p>\n<pre><code>int16_t ** g_Meshes;\nint32_t m_MeshPtrCount;\nint16_t * g_MeshBase;\nuint32_t *mesh_indices;\n\nfor (int i = 0; i &lt; m_MeshPtrCount; i++)\n{\n        g_Meshes[i] = &amp;g_MeshBase[mesh_indices[i] / 2];\n}\n\n</code></pre>\n<p>And corresponding Assembler code from IDA:</p>\n<pre><code>cseg01:0001E958 For_Mesh_Ptr_Count:                     ; CODE XREF: Load_Objects+B9j\ncseg01:0001E958                 mov     ebx, Mesh_Indices\ncseg01:0001E95E                 mov     eax, [edi+ebx]\ncseg01:0001E961                 mov     edx, eax\ncseg01:0001E963                 sar     edx, 1Fh\ncseg01:0001E966                 sub     eax, edx\ncseg01:0001E968                 sar     eax, 1\ncseg01:0001E96A                 lea     edx, ds:0[eax*2]\ncseg01:0001E971                 mov     eax, g_MeshBase\ncseg01:0001E976                 add     eax, edx\ncseg01:0001E978                 mov     [edi+ebx], eax\ncseg01:0001E97B                 inc     ecx\ncseg01:0001E97C                 mov     ebx, [esp+28h+var_20] ; var_20 = m_MeshPtrCount\ncseg01:0001E980                 add     edi, 4\ncseg01:0001E983                 cmp     ecx, ebx\ncseg01:0001E985                 jl      short For_Mesh_Ptr_Count\n\n</code></pre>\n<p>Please explain someone for what need this operations:</p>\n<pre><code>cseg01:0001E963                 sar     edx, 1Fh\ncseg01:0001E966                 sub     eax, edx\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "59",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "black4joss",
    "time": "Apr 14, 2024 at 9:05",
    "comments": [
        {
            "user": "mimak",
            "text": "<span class=\"comment-copy\"><code>sar edx, 1Fh</code> is equivalent to <code>edx &gt;&gt; 31</code> except it always preserves the sign bit.  <code>sub eax, edx</code> is simply <code>eax -= edx</code>. It's hard to provide more info than that since we dont know the variable-register mapping here.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It corresponds to calculating <code>mesh_indices[i] / 2</code>. The formula it's implementing is <code>f(v) = (v - (v &gt;&gt; 31)) &gt;&gt; 1</code>, with the shifts being arithmetic (i.e. the most significant bit is preserved). Implementing the operation this way respects the signedness of the original value. What is quite surprising here is that this is a miscompilation, as <code>mesh_indices[i]</code> is unsigned - the formula being implemented should simply be <code>f(v) = v &gt;&gt; 1</code> (logical shift). For example, msvc correctly implements it in such a manner: <a href=\"https://godbolt.org/z/MGsYqTG13\" rel=\"nofollow noreferrer\">https://godbolt.org/z/MGsYqTG13</a></p>\n</div>",
            "votes": "1",
            "user": "ynwarcs",
            "time": "Apr 14, 2024 at 15:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">Suppose we have eax = 1000'0000'0000'0010b; then mov     edx, eax;  then after sar edx, 1Fh we get edx = 1b; then sub eax, edx is equivalent eax - 1b? i.e. 1000'0000'0000'0010b - 1b? And then (1000'0000'0000'0010b - 1b) &gt;&gt; 1. But what it get for us? I understand that shift in right &gt;&gt; 1 is division by 2. For what we need preserve sign bit?</span>",
                    "time": null
                },
                {
                    "user": "ynwarcs",
                    "text": "<span class=\"comment-copy\">We need to preserve the sign bit if we want to treat the argument as signed. You can work through the formulas for e.g. eax=0xFFFFFFFF and see that the more complicated formula will return zero, while only shifting to the right will return 0x7FFFFFFF. But, as I said, this is a miscompilation. The argument (mesh_indices[I]) is unsigned, the compiler should've used the unsigned variant of the formula.</span>",
                    "time": null
                }
            ]
        }
    ]
}