{
    "title": "Basic assembly query [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/15792/basic-assembly-query",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2017-07-09 14:02:48Z\">7 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/15792/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I wrote a program which will add two numbers in assembly.\nWhen I do a system call for <code>scanf()</code>, the instruction looks like this:</p>\n<pre><code>mov rcx, num1\n</code></pre>\n<p>Note: I have defined <code>num1</code> in the <code>bss</code> section as:</p>\n<pre><code>num1 resb 10\n</code></pre>\n<p>And, when I try to move this value to say <code>rax</code> the instruction looks like:</p>\n<pre><code>mov rax, [num1]\n</code></pre>\n<p>From what I have learned, anything inside square brackets must only be computed in case of <code>rm32</code>. So, more like going to memory location but not reading what's in the memory.</p>\n<p>How is this bracket helping here ?</p>\n<p>Why do we need the memory location when we can have the direct value?</p>\n<p>And my next instruction is:</p>\n<pre><code>sub rax, '00'\n</code></pre>\n<p><code>rax</code> contains an address of <code>num1</code>. Shouldn't we be doing math to the value <code>num1</code> and not on the address ?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "602",
    "tags": [
        "ida",
        "assembly",
        "intel"
    ],
    "user": "Atply",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">just because it's about assembler does not mean it's RE</span>",
            "time": null
        },
        {
            "user": "Atply",
            "text": "<span class=\"comment-copy\">Agreed. But it's related.  That's the reason I posted it here.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, you are using the Intel syntax for the x86/amd64 assembly. So, in this syntax the brackets (<code>[.]</code>) stands for a dereference of the address it contains.</p>\n<p>If you know C programming, <code>[var]</code> (in assembly) is exactly similar to '*var'.</p>\n<p>In fact, the only small difficulty you have to handle here is that the <code>num1</code> that you defined is already an address (I am speaking now about the nasm syntax and NOT about the Intel asm syntax). </p>\n<p>So, <code>move rcx, num1</code> means that you copy the address of <code>num1</code> to <code>rcx</code>. </p>\n<p>And, <code>move rax, [num1]</code> means that you copy the content of <code>num1</code> to <code>rax</code>.</p>\n<p>You may refer to this <a href=\"https://stackoverflow.com/questions/8145243/x86-asm-linux-using-the-bss-section\">SO question</a> which might explain your problem.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Jul 9, 2017 at 11:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}