{
    "title": "Hooking functions in a VMProtect'ed executable",
    "link": "https://reverseengineering.stackexchange.com/questions/13056/hooking-functions-in-a-vmprotected-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to solve the Sharif CTF 2016 HI2.exe challenge. This challenge requires a specific (impossible to reach) environment (64 processors, 128GB RAM, ...) to display the flag. As the executable is packed with <code>VMProtect</code>, the best alternative seems to hook functions responsible for the environment specification checks, and modify their return values at run time. I'm using OllyDbg with the StrongOD plugin. I have documented all details here: <a href=\"https://www.aldeid.com/wiki/SharifCTF-2016/hi\" rel=\"nofollow\">https://www.aldeid.com/wiki/SharifCTF-2016/hi</a>.</p>\n<p>I have achieved the first step (I have modified values of the <code>SYSTEM_INFO</code> structure manipulated by the <code>GetSystemInfo</code> function) but failed to reach my second breakpoint, set on the <code>GlobalMemoryStatusEx</code> function. The program displays the following error message before my 2nd BP is reached: <code>A debugger has been found running on your system</code>.</p>\n<p>I have tried to play with a few options from the StrongOD plugin (HidePEB, KernelMode, SkipSomeExceptions) but it either doesn't change anything or crashes the executable before the 2nd BP.</p>\n<p>How can I achieve this goal? How should I configure OllyDbg and/or StronOD to prevent the program from knowing it's being debugged?</p>\n<p>Many thanks in advance for your help.</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ollydbg",
        "breakpoint",
        "packers",
        "vmprotect"
    ],
    "user": "Sebastien Damaye",
    "time": "Sep 24, 2018 at 22:35",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">You should try investigating what exacly the executable detects instead of blindly turning anti-debugging features on/off.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>StrongOD</code> can have unexpected behaviour if you are using Win7 as your debugging environment. Try to use <code>ScyllaHide</code> plugin with the <code>VMProtect</code> profile on, ignore <code>Invalid or privileged instruction</code> exception in the debugging options.</p>\n</div>",
            "votes": "1",
            "user": "rustam Shirinov",
            "time": "Mar 4, 2018 at 21:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If there's no way to debug it, use system mechanisms to load your DLL into protected process, then do whatever you like. </p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "May 4, 2018 at 10:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}