{
    "title": "OllyDBG, managed to patch file, now can I automate this?",
    "link": "https://reverseengineering.stackexchange.com/questions/8178/ollydbg-managed-to-patch-file-now-can-i-automate-this",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In Olly I managed to patch the file to no longer compare for a specific flag. Is it possible to automate this?</p>\n<p>Basically I changed a JNZ to a JZ.</p>\n<p>Is there a way to could do the same thing with a hex editor? </p>\n<p>The end goal would be to create a program to automate this patch.</p>\n<p>Thanks.</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "ollydbg"
    ],
    "user": "NewReverser",
    "time": "Feb 7, 2015 at 22:30",
    "comments": [
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\">what do you mean with 'automate'? you mean something like a plugin for Olly? or a standalone program that patches another program?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Don't get me wrong, but if you replaced <code>jnz</code> by <code>jz</code> you <i>did not</i> patch anything to no longer compare any flag. You merely inverted the condition. Patching it to <code>jmp</code> would have been the proper way.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Okay, I suppose you just want to create a program that patches the already existing file, so here's how I'd do it.</p>\n<hr/>\n<p>First, you need the offset in the file.\nThat means that offset 0 is the first byte, 1 is the second, etc, as opposed to the offset + base which you see in memory.</p>\n<p>To get that offset, right click the instruction, and go to <code>View &gt; Executable file</code>:</p>\n<p><img alt=\"executable file (to get the offset)\" src=\"https://i.sstatic.net/tY5VJ.png\"/></p>\n<p>And you take the offset:</p>\n<p><img alt=\"relative offset\" src=\"https://i.sstatic.net/64kFD.png\"/></p>\n<p>which is <code>0x16A7</code> in my case.</p>\n<hr/>\n<p>Once you have the offset, you must code a program to patch the program.\nHere's a few ways: (I only tested the Python one, but the rest should work)</p>\n<h1>C++</h1>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream f(\"file_to_patch.exe\", std::ios::binary);\n    // seek to the desired offset\n    f.seekp(0x16A7);\n    // \\x74 to \\xEB, for example (conditional short to unconditional short)\n    const char bytes[] = \"\\xEB\";\n    f.write(bytes, sizeof(bytes));\n    f.close();\n    return 0;\n}\n</code></pre>\n<h1>C</h1>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    FILE* f = fopen(\"to_patch.exe\", \"r+b\"); // open\n    fseek(f, 0, 0x16A7); // seek to the offset to patch\n    fwrite((void*) \"\\xEB\", 1, 1, f);\n    fclose(f);\n    return 0;\n}\n</code></pre>\n<h1>Python</h1>\n<p>In case you want to script it and don't wanna bother with C / C++, here's how you do it with Python:</p>\n<pre><code>f = open(\"to_patch\", \"r+b\") # open in read/write binary\nf.seek(0x16A7) # seek to the previously found offset\nf.write(bytearray([0xEB])) # patch the jump\nf.close()\n</code></pre>\n</div>",
            "votes": "6",
            "user": "rev",
            "time": "Feb 8, 2015 at 0:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NewReverser",
                    "text": "<span class=\"comment-copy\">Shortly after posting the question, I managed to find the offset and to patch the program using python. This is EXACTLY how I did it. However, I realized the offset will change when the program updates, might need to make my solution a little more robust...</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">@NewReverser how does it change? what do you mean?</span>",
                    "time": null
                },
                {
                    "user": "NewReverser",
                    "text": "<span class=\"comment-copy\">Between build versions the offset might change depending if they add features, change the code around, etc.</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">oh, I thought it changed in the same binary. in that case, you can use patterns to find your code. sadly I haven't ever done it with Olly, but in case you have IDA, it's easy as getting a sigmaker plugin (I can link one if you want), and then using it from your code. there's a lot of info about this on the internet, but do tell me if you need clarification on anything.</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">IDA is an amazing tool, more than what you seem to think. it also has a x64 version, so indeed you can use it to take signatures from both versions.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want a patch tool you dont need to code it. Use dUP (diablo2oo2 Universal Patcher) or R!SC Process Patcher to easily create a .exe that patches your defined offsets with your defined values.</p>\n</div>",
            "votes": "2",
            "user": "pHiL",
            "time": "Feb 9, 2015 at 10:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>With OllyDBG2, there is an option for it : <code>Edit &gt; Copy to Executable</code></p>\n<p><a href=\"https://i.sstatic.net/NHEia.png\" rel=\"nofollow noreferrer\"><img alt=\"Showing the context menu item described above\" src=\"https://i.sstatic.net/NHEia.png\"/></a></p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jun 13, 2018 at 14:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}