{
    "title": "Reverse-engineer Bubendorff CLEP21 remote controller",
    "link": "https://reverseengineering.stackexchange.com/questions/33075/reverse-engineer-bubendorff-clep21-remote-controller",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>TLDR;</strong> I have a Bubendorff shutter system, whereas each shutter has its own remote controller. I am trying to clone the remote controllers, to build a single system for shutter control. There are three open questions to break the protocol, I'd appreciate any help you can provide.</p>\n<h2>1. Hardware</h2>\n<p>Remote controllers operate at the standard <strong>433.92 MHz</strong> and have 2 ICs: <strong>uC/ASIC</strong> (Zilog 5087/CLEP21/2D6BM) and <strong>EEPROM</strong> (Microchip 24LC01B).</p>\n<p>Unfortunately, I have not been able to find any information on the Zilog IC, hence my assumption that it is an ASIC specifically designed for this purpose, based on their Z80 CPUs.</p>\n<p>There are only 2 buttons available on the controller: <strong>down &amp; up</strong>. There does not seem to be a way to pair additional remote controllers with the existing shutter.</p>\n<h2>2. Tests</h2>\n<p>I have 3 unique remote controllers, each has a <strong>serial number</strong> printed in decimal on the enclosure backside. I tapped on the I2C bus between ASIC and EEPROM and also monitored the emitted serial bitstream (i.e., the signal that modulates the 433.92 MHz signal).</p>\n<p>The test was performed as follows:</p>\n<ol>\n<li>Power cycle the remote controller,</li>\n<li>Record I2C transaction and emitted bitstream for 256 <strong>button-down actions</strong>.</li>\n</ol>\n<p>Both these steps were repeated for the <strong>button-up action</strong>, and tests were done on all 3 remote controllers.</p>\n<h3>2.1. I2C transaction</h3>\n<p>It seems that the ASIC never updates EEPROM, it only reads its registers.</p>\n<p>On power-up, it starts by reading a sequence of 19 bytes from <code>0x40..0x52</code>:</p>\n<pre><code>====================================================================\n            40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52\n--------------------------------------------------------------------\nREMOTE 1    0C 29 71 70 F5 2A 7B C3 8D 20 1C 0D 8E 02 00 01 00 2C 0B\nREMOTE 2    0C 29 71 70 F5 2A EF 2D 3C 0D 1C 62 D2 02 00 01 00 2C 0B\nREMOTE 3    0C 29 71 70 F5 2A F9 6C BB 16 1C 4D 84 02 00 01 00 2C 0B\n====================================================================\n</code></pre>\n<p>Unique bytes are in the range <code>0x46..0x4C</code>, with the exception of <code>0x4A</code>.</p>\n<p>On every action (button-down or -up), the ASIC first reads 4 bytes from the EEPROM. It then transmits the register address (2 bytes) and the obfuscated register value (4 bytes), as it will be shown later.</p>\n<h3>2.2. Serial bitstream</h3>\n<p>On every action, after reading 4 bytes from the EEPROM, the ASIC emits serial bitstream at about <strong>1.2 kHz</strong>: (i) start condition (36 ms HIGH followed by 12 ms LOW), and (ii) 165 data bits. This whole sequence is immediately repeated once more.</p>\n<p><a href=\"https://i.sstatic.net/oHFVtpA4.png\" rel=\"nofollow noreferrer\"><img alt=\"Bitstream\" src=\"https://i.sstatic.net/oHFVtpA4.png\"/></a></p>\n<p>Since this is an asynchronous transmission (no clock), each data frame consists of a start bit, 8 data bits, an invert bit, and a stop bit, i.e., 11 bits per frame in total. This means that 165 bits translate into 15 data bytes. The invert bit requires special attention - at first I thought this was a parity check, but it seems its only function is for bit-wise invert of data bytes when equal to 1. I am not sure what is the purpose of the invert bit other than to obfuscate the bitstream.</p>\n<h2>3. Protocol decoding</h2>\n<p>Here is an excerpt of 4 decoded actions:</p>\n<pre><code>=======================================================================================================================\nEEPROM MESSAGES            EEPROM SIMPLIFIED          EMITTED BITSTREAM                               DATA INVERT BITS\n-----------------------------------------------------------------------------------------------------------------------\nA0 B0 A1 B1 A2 B2 A3 B3    A01-23  B0 B1 B2 B3        S0 S1 S2 S3 S4 S5 S6 S7 S8 S9 SA SB SC SD SE\n-----------------------------------------------------------------------------------------------------------------------\n# REMOTE 1: BUTTON-DOWN\n0D 9B 14 28 2D ED 3F 55 -&gt; [D4 DF] 9B 28 ED 55        A6 1C 0D 8E 00 01 D4 DF A3 F9 EF 01 01 B7 46    [001010010100111]\n0A 10 19 32 29 AC 33 B5 -&gt; [A9 93] 10 32 AC B5        A6 1C 0D 8E 00 01 A9 93 00 16 4D 5E 01 63 8D    [001010001001000]\n05 ED 13 14 20 6C 3B EA -&gt; [53 0B] ED 14 6C EA        A6 1C 0D 8E 00 01 53 0B CA 1B 63 C5 01 F1 5A    [001010000000110]\n0A 10 16 8D 21 C3 36 A8 -&gt; [A6 16] 10 8D C3 A8        A6 1C 0D 8E 00 01 A6 16 F1 6C 24 F4 01 87 A7    [001010000011101]\n-----------------------------------------------------------------------------------------------------------------------\n# REMOTE 1: BUTTON-UP\n0D 9B 14 28 2D ED 3F 55 -&gt; [D4 DF] 9B 28 ED 55        A6 1C 0D 8E 00 01 D4 DF A3 F9 EF 01 00 77 87    [001010010100110]\n0A 10 19 32 29 AC 33 B5 -&gt; [A9 93] 10 32 AC B5        A6 1C 0D 8E 00 01 A9 93 00 16 4D 5E 00 A3 4C    [001010001001001]\n05 ED 13 14 20 6C 3B EA -&gt; [53 0B] ED 14 6C EA        A6 1C 0D 8E 00 01 53 0B CA 1B 63 C5 00 31 9B    [001010000000100]\n0A 10 16 8D 21 C3 36 A8 -&gt; [A6 16] 10 8D C3 A8        A6 1C 0D 8E 00 01 A6 16 F1 6C 24 F4 00 47 66    [001010000011100]\n-----------------------------------------------------------------------------------------------------------------------\n# REMOTE 2: BUTTON-DOWN\n0D 34 14 CF 2D C5 3F 01 -&gt; [D4 DF] 34 CF C5 01        A6 1C 62 D2 00 01 D4 DF E7 09 ED 0F 01 73 2D    [001010010000110]\n0A 0B 19 BA 29 13 33 F8 -&gt; [A9 93] 0B BA 13 F8        A6 1C 62 D2 00 01 A9 93 69 3D 80 2C 01 BA 60    [001010000110110]\n05 6D 13 EA 20 1B 3B E4 -&gt; [53 0B] 6D EA 1B E4        A6 1C 62 D2 00 01 53 0B 51 75 42 A8 01 34 52    [001010001110100]\n0A 0B 16 3C 21 2D 36 B7 -&gt; [A6 16] 0B 3C 2D B7        A6 1C 62 D2 00 01 A6 16 98 D7 07 7A 01 6B 46    [001010001111110]\n-----------------------------------------------------------------------------------------------------------------------\n# REMOTE 2: BUTTON-UP\n0D 34 14 CF 2D C5 3F 01 -&gt; [D4 DF] 34 CF C5 01        A6 1C 62 D2 00 01 D4 DF E7 09 ED 0F 00 B3 EC    [001010010000111]\n0A 0B 19 BA 29 13 33 F8 -&gt; [A9 93] 0B BA 13 F8        A6 1C 62 D2 00 01 A9 93 69 3D 80 2C 00 7A A1    [001010000110110]\n05 6D 13 EA 20 1B 3B E4 -&gt; [53 0B] 6D EA 1B E4        A6 1C 62 D2 00 01 53 0B 51 75 42 A8 00 F4 93    [001010001110110]\n0A 0B 16 3C 21 2D 36 B7 -&gt; [A6 16] 0B 3C 2D B7        A6 1C 62 D2 00 01 A6 16 98 D7 07 7A 00 AB 87    [001010001111110]\n-----------------------------------------------------------------------------------------------------------------------\n# REMOTE 3: BUTTON-DOWN\n0D 43 14 28 2D F2 3F D9 -&gt; [D4 DF] 43 28 F2 D9        A6 1C 4D 84 00 01 D4 DF 88 9F F9 4B 01 7C DF    [000010011100110]\n0A 0B 19 EE 29 37 33 93 -&gt; [A9 93] 0B EE 37 93        A6 1C 4D 84 00 01 A9 93 7B 50 9F 8A 01 F9 F6    [000010000000110]\n05 AD 13 14 20 36 3B 84 -&gt; [53 0B] AD 14 36 84        A6 1C 4D 84 00 01 53 0B 58 55 5A 17 01 48 0D    [000010001000101]\n0A 0B 16 BB 21 6C 36 F4 -&gt; [A6 16] 0B BB 6C F4        A6 1C 4D 84 00 01 A6 16 A3 96 F2 FE 01 2A BC    [000010000001100]\n-----------------------------------------------------------------------------------------------------------------------\n# REMOTE 3: BUTTON-UP\n0D 43 14 28 2D F2 3F D9 -&gt; [D4 DF] 43 28 F2 D9        A6 1C 4D 84 00 01 D4 DF 88 9F F9 4B 00 BC 1E    [000010011100110]\n0A 0B 19 EE 29 37 33 93 -&gt; [A9 93] 0B EE 37 93        A6 1C 4D 84 00 01 A9 93 7B 50 9F 8A 00 39 37    [000010000000100]\n05 AD 13 14 20 36 3B 84 -&gt; [53 0B] AD 14 36 84        A6 1C 4D 84 00 01 53 0B 58 55 5A 17 00 88 CC    [000010001000100]\n0A 0B 16 BB 21 6C 36 F4 -&gt; [A6 16] 0B BB 6C F4        A6 1C 4D 84 00 01 A6 16 A3 96 F2 FE 00 EA 7D    [000010000001110]\n=======================================================================================================================\n</code></pre>\n<h3>3.1. EEPROM messages</h3>\n<p>Bytes (i) <code>A0..A3</code> are register addresses set by the ASIC, and (ii) <code>B0..B3</code> are rolling codes stored in the EEPROM. Note that high-order nibbles of address bytes never change, and low-order nibbles form a 2-byte register address emitted in the bitstream (see the <code>EEPROM SIMPLIFIED</code> column).</p>\n<p>The rolling codes are different for 3 remote controllers, but the sequence of register addresses is always the same. This brings us to the first mystery:</p>\n<p><strong>Mystery #1: What is the logic behind the register address sequence?</strong></p>\n<p>Given below is the sequence of the first 256 condensed 2-byte register addresses:</p>\n<pre><code>EA79, D4DF, A993, 530B, A616, 4C01, 3029, 8165, 02E7, 1738, 2E70, 73AD, E75A, CE99, 9D1F, 7426,\nE84C, D0B5, A147, 42A3, 8546, 0AA1, 1542, 2A84, 5508, AA10, 540D, A81A, 4049, 0212, 1090, 092D,\n125A, 24B4, 4968, 92D0, 258D, 4B1A, 9634, 2C45, 588A, B114, 6205, 8839, 105F, 417C, 82F8, 05DD,\n1774, 2EE8, 5DD0, 776D, EEDA, DD99, BB1F, EC26, D861, B0EF, 61F3, C3E6, 1FDE, FEF0, DD7B, EB36,\nD641, ACAF, 5973, B2E6, CBC2, 97A9, 2F7F, 5EFE, 7BD5, F7AA, EF79, DEDF, BD93, 7B0B, F616, EC01,\nD82F, B073, C196, 8301, 062F, 18BC, 3178, 62F0, 8BED, 17F7, 2FEE, FEBA, EA0B, A136, 4241, 8482,\n0929, 1252, 24A4, 4948, 9290, 250D, 4A1A, 9434, 2845, 508A, A114, 4205, 0839, 1072, 41C8, 8390,\n070D, 1C34, 3868, 70D0, C36D, 86F7, 0DC3, 1B86, 370C, 6E18, DC30, B84D, 70B7, E16E, C2F1, 85CF,\n0BB3, 1766, 2ECC, 5D98, BB30, 764D, EC9A, D919, C826, 9061, 41DE, 83BC, 0755, 3AA8, 7550, AAF7,\n55C3, AB86, 5721, AE42, 5CA9, B952, 7289, E512, CA09, 943F, 2853, 50A6, A14C, 42B5, 856A, 0AF9,\n2BE4, 57C8, AF90, BE1A, F832, E0BF, C153, 828B, 0A76, 14EC, 29D8, 53B0, 4EED, 9DDA, 3B99, 7732,\nEE64, DCE5, E7C6, CFA1, 3EF3, 7DE6, FBCC, EF47, DEA3, BD6B, F5F6, EBC1, D7AF, AF73, 5ECB, BD96,\n7B01, EC29, D87F, B0D3, 618B, C316, 8601, 0C2F, 185E, 30BC, 6178, C2F0, 85CD, 0BB7, 176E, 2EDC,\n5DB8, BB70, 76CD, ED9A, DB19, B061, C1DE, 8391, 070F, 1C3C, 3878, 70F0, C3ED, 87F7, 0FC3, 7E18,\nFC30, E143, C2AB, 15B6, 2B6C, 56D8, ADB0, 5B4D, B69A, 6D19, DA32, B449, 68BF, D17E, A2D1, 458F,\n8B1E, 2C22, 5844, B088, 613D, C27A, 84D9, 099F, 133E, 267C, 4CF8, 33CD, 679A, CF34, 9E45, 3CA7\n</code></pre>\n<h3>3.2. Serial bitstream</h3>\n<p>Here are my observations about the serial bitstream:</p>\n<ol>\n<li><code>S0</code> - not sure where it comes from and what is its purpose, but it is always <code>0xA6</code></li>\n<li><code>S1..S3</code> correspond to unique bytes at <code>0x4A..0x4C</code> in the EEPROM</li>\n<li><code>S4..S5</code> correspond to non-unique bytes at <code>0x4E..0x4F</code> in the EEPROM</li>\n<li><code>S6..S7</code> is the condensed 2-byte register address (see the <code>EEPROM SIMPLIFIED</code> column)</li>\n<li><code>S8..SB</code> is the obfuscated rolling code</li>\n<li><code>SC</code> is the command: <code>0x01</code> for button-down and <code>0x00</code> for button-up</li>\n<li><code>SD..SE</code> is the 16-bit CRC calculated with the CRC-16/ARC polynomial.</li>\n</ol>\n<p><strong>Mystery #2: How to calculate the emitted rolling code from the one in EEPROM?</strong></p>\n<p>I feel this mystery is crucial for cracking the protocol!</p>\n<p><strong>Mystery #3: What is the logic behind the \"data bit inversion\"?</strong></p>\n<p>For this last mystery, I have to do some more tests to check if it is deterministic. It does not seem to be consistent for button-down and -up actions.</p>\n<p>I appreciate any help/idea you might have! :)</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "95",
    "tags": [
        "protocol",
        "remote"
    ],
    "user": "Marko Gulin",
    "time": "Jul 14, 2024 at 13:29",
    "comments": [
        {
            "user": "jonathanjo",
            "text": "<span class=\"comment-copy\">It's an interesting problem but tricky to follow ... perhaps you could write a little pseudocode to explain a little more clearly.  I can't see how to use the 9th bit, for example, where does that come from?  Or what B1-B4 are.</span>",
            "time": null
        },
        {
            "user": "Marko Gulin",
            "text": "<span class=\"comment-copy\">Yes, I am aware. I'll create a GitHub project where I'll explain everything in a bit more detail.</span>",
            "time": null
        }
    ],
    "answers_data": []
}