{
    "title": "Unpacking a backdoor program for studying",
    "link": "https://reverseengineering.stackexchange.com/questions/6773/unpacking-a-backdoor-program-for-studying",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to learn something about unpacking malware manuelly and found the following link:</p>\n<pre><code>  writequit.org/blog/?p=165.\n</code></pre>\n<p>As you can see, the malware in that example begins with the PUSHAD instruction. (I thought it would be a good link because 2 days ago I started to analyze a malware which begins with the same PUSHAD instruction. It was also packed with UPX like the malware in that example of the given link)</p>\n<p>So, I downloaded the malware of the example for testing purpose.</p>\n<p>What I did:</p>\n<p>When I step into PUSHAD instruction(pressing F7), double-clicking ESP in combination with \"Following in Dump\", then I choose the first 4 bytes of the first row (ESP address) in the hex window. Then I go to Breakpoint -&gt; Hardware, on access -&gt; Dword. Then F9. \n(I hope I could explain it right but you can be sure that I did exactly the same things as in the example of the link)</p>\n<p>My problem:</p>\n<p>The first thing: </p>\n<p>After I click ESP -&gt; \"Follow in Dump\" , the 4 bytes of the first row looks like this: 00 00 00 00.\n(So, only zeros. Not the same like in the example which was 08 02 91 7c as you can see)</p>\n<p>The second thing:</p>\n<p>When I choose the 00 00 00 00 -&gt; Breakpoint -&gt; Hardware, on access -&gt; Dword, then I let it run (F9) but the malware does not run to a location where I can find POPAD or JMP .... as in the example. \nIn my case, after all that it runs to a location (especially, running ends in a LEAVE instruction) with the following:</p>\n<pre><code>   ...\n   ...\n   LEA EAX, DWORD PTR SS:[EBP-3C]\n   PUSH EAX\n   CALL DWORD PTR DS: [&lt;&amp;ntdll.RtlRaiseException&gt;]\n   LEAVE                                             &lt;----- here, it ends\n   RETN 10\n   MOV DWORD PTR SS: [EBP-40], EAX\n   ...\n   ...\n</code></pre>\n<p>So, even if I scroll hundreds of lines upwards or downwards, I could not find a POPAD instruction. </p>\n<p>My question:</p>\n<p>Why it is so? Do I need to configure something in the ollydbg settings ? </p>\n<p>I hope someone can help me in that case, because although I do the same steps as in the example, I have different results.</p>\n<p>best regards, </p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "malware",
        "unpacking"
    ],
    "user": "user3097712",
    "time": "Dec 6, 2014 at 21:41",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">0. What OS do you have on research machine? 1. Restart the Olly session and you should break on 0x424231. 2. Note the EDI register, before execution <code>pushed</code>. 3. Do you see, that EDI has 7c910208? 4. In addition, scroll down from 0x424231 and you should find <code>popad</code> at 0x424386.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your mistake is that you put the breakpoint while being on the <code>PUSHAD</code> instruction (meaning it wasn't executed yet).</p>\n<hr/>\n<p>I just unpacked the file, and this is how you do it:</p>\n<h1>1. Drop the file in Olly and find the <code>PUSHAD</code> instruction</h1>\n<p>Simply do what you did before, and end up here:</p>\n<p><img alt=\"Step 1\" src=\"https://i.sstatic.net/OW0TO.png\"/></p>\n<h1>2. Step once to skip the <code>PUSHAD</code></h1>\n<p>Now, you got everything pushed, and the decompression can start.</p>\n<p><img alt=\"Step 2\" src=\"https://i.sstatic.net/Zl1xB.png\"/></p>\n<h1>3. Put a breapoint on the stack</h1>\n<p>Now, you've arrived to the point where the stack looks like:</p>\n<pre><code>## original ESP\n## some register's value\n## some register's value\n## some register's value\n## ...\n## you are here\n</code></pre>\n<p>Now, on the <code>you are here</code> point, the decompressor uses the stack, and it grows downwards (to lower addresses).\nWhen it is done using it, it clears the stack, and reaches again your <code>original ESP</code> point, where the <code>popad</code> instruction writes, and which is what causes the breakpoint to hit.</p>\n<h1>4. Run</h1>\n<p>Pretty much self-explanatory.\nYou'll end up here after running:</p>\n<p><img alt=\"Step 3\" src=\"https://i.sstatic.net/zA4IX.png\"/></p>\n<h1>5. Step again</h1>\n<p>Done, you found the OEP!</p>\n<p><img alt=\"OEP\" src=\"https://i.sstatic.net/EmKZr.png\"/></p>\n<p>Now you can dump. I used <a href=\"http://low-priority.appspot.com/ollydumpex/#download\" rel=\"noreferrer\">OllyDumpEx</a>:\n<img alt=\"OllyDumpEx\" src=\"https://i.sstatic.net/Dzetg.png\"/></p>\n<p>Simply click <kbd>Get EIP as OEP</kbd> while being on the <code>PUSH EBP</code> instruction, and then dump: (also write down the EIP<sup>1</sup>)\n<img alt=\"dump\" src=\"https://i.sstatic.net/Eh9lw.png\"/>\n<img alt=\"fix OEP\" src=\"https://i.sstatic.net/VUZ60.png\"/></p>\n<h1>6. Fix IAT</h1>\n<p>Now, you want to fix the IAT to properly see the used APIs!\nDo not close Olly and don't step, just dump and leave it as is.</p>\n<p>Open <code>ImportREC</code>, pick the process, and press <kbd>IAT AutoSearch</kbd>, then <kbd>Get Imports</kbd>.</p>\n<p><img alt=\"IAT fixing\" src=\"https://i.sstatic.net/z5lOq.png\"/></p>\n<p>Sometimes it may not find the OEP automatically, so just take the OEP you found before<sup>1</sup>, put it there, and click <kbd>IAT AutoSearch</kbd> and then <kbd>Get Imports</kbd> again, and then dump.</p>\n<h1>7. Taking a look at the file in IDA</h1>\n<p>Now you can analyze the file.</p>\n<p>This is how it looks like when manually unpacked:</p>\n<p><img alt=\"dumped\" src=\"https://i.sstatic.net/eLLXH.png\"/></p>\n<p>And this is how the UPX unpacked (<code>upx -d</code>) version looks like:</p>\n<p><img alt=\"upx unpacked\" src=\"https://i.sstatic.net/9gtbb.png\"/></p>\n</div>",
            "votes": "6",
            "user": "rev",
            "time": "Feb 14, 2015 at 18:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As you mentioned, UPX was used and it can be unpacked by UPX itself <a href=\"http://m0rphiz3.tk/?p=12\" rel=\"nofollow\">see this example</a>.\nTo address scrolling to find the entry point, its because you are in a different module loaded by the binary. You're probably getting into ntdll.dll module disassembly.</p>\n</div>",
            "votes": "0",
            "user": "RoraÎ–",
            "time": "Dec 12, 2014 at 22:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">the question clearly stated that the user wanted to unpack manually so the tool for unpacking is not really relevant.</span>",
                    "time": null
                }
            ]
        }
    ]
}