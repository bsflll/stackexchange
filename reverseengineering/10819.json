{
    "title": "How should I approach decrypting packet protocols?",
    "link": "https://reverseengineering.stackexchange.com/questions/10819/how-should-i-approach-decrypting-packet-protocols",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm able to see the packets before they're encrypted by setting a breakpoint before the encryption subroutine. My problem is that this subroutine is really complicated and goes really deep. Which steps should I follow in order to obtain this encryption function? Or rather to be able to decrypt this packet protocol?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "439",
    "tags": [
        "ida",
        "packet"
    ],
    "user": "AcarX",
    "time": "Dec 16, 2015 at 17:07",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Have you used signsrch to check if your program has some standard encryption algorithms linked in?</span>",
            "time": null
        },
        {
            "user": "AcarX",
            "text": "<span class=\"comment-copy\">Now i did. Here's the result: <a href=\"http://i.imgur.com/GGjXa7Z.png\" rel=\"nofollow noreferrer\">i.imgur.com/GGjXa7Z.png</a></span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">This is a good start - there are several encryption algorithms in your binary (AES (Rijndael), Windows Crypt, Blowfish, ...). Set hardware breakpoints on those data tables, and step over the encryption function. Or, check where these tables are used, and set normal breakpoints on the code that uses them. Or, look at the source code of open-source implementations of these, and compare the source with your subroutine.</span>",
            "time": null
        },
        {
            "user": "AcarX",
            "text": "<span class=\"comment-copy\">I'm afraid i cannot find the address(003758f8 for ex.) for these tables in IDA.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">This is because these are file offsets, and IDA label names are made from memory locations. But IDA shows the memory location and the file offset next to each other at the bottom of the IDA View (disassembly resp. graphical view), this should help you find them.</span>",
            "time": null
        }
    ],
    "answers_data": []
}