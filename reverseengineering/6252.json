{
    "title": "Assembly variable meaning",
    "link": "https://reverseengineering.stackexchange.com/questions/6252/assembly-variable-meaning",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Im newbie at reverse engineering and I was wondering what is the meaning of declaration <code>var_18 = byte ptr -18</code> and the others like it in the picture.</p>\n<p><img alt=\"IDA Pro screenshot\" src=\"https://i.sstatic.net/0Si9w.png\"/></p>\n<p>I know that <code>byte ptr</code> means it is a pointer to a byte variable, but why does it have negative value. And also why do all of them have the same address?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "newbie",
    "time": "Sep 17, 2014 at 12:47",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">They are not variables, but assembler directives. Ida PRO displays them as 'belonging' to the first line of the function they are part of. (This is specifically Ida PRO's notation, not a general \"reverse engineering\" thing.)</span>",
            "time": null
        },
        {
            "user": "user4520",
            "text": "<span class=\"comment-copy\">You can think of those values as being added to ESP - the stack pointer (adding negative values = subtracting, refer to your accepted answer).</span>",
            "time": null
        },
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">generally, positive = passed as parameters, negative is 'local' storage (on the stack.. should not be accessed by anything after the function returns)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The dis-assembler display all the variables as having the same address, which is the function's first command (004014CE push ebp in this case).</p>\n<p>variable with a <strong>positive</strong> offset is a <em>parameter to the function</em>, where a variable with a <strong>negative</strong> offset is usually a <em>local variable</em>. This is of course not always the case but you can take it as a general rule of thumb.</p>\n</div>",
            "votes": "6",
            "user": "Omer",
            "time": "Sep 17, 2014 at 13:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">\"not always the case\" -- are you sure? It's how standard stack frames work, and the OP must be getting these variables because <i>he told Ida PRO</i> to treat this function as such. (Which is either a default setting, or flagged to do so for this particular function.)</span>",
                    "time": null
                },
                {
                    "user": "Milind R",
                    "text": "<span class=\"comment-copy\">It's a default.</span>",
                    "time": null
                },
                {
                    "user": "Omer",
                    "text": "<span class=\"comment-copy\">It is true when you are reversing standard compiler output. But in case someone tampered with the assembly, or if the code is self modifying, or you extracted image from memory after modifications (such as patching), IDA might not interpret variables properly.</span>",
                    "time": null
                }
            ]
        }
    ]
}