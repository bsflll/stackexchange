{
    "title": "What is this protection that seems to prevent ROP when ASLR in ON?",
    "link": "https://reverseengineering.stackexchange.com/questions/13811/what-is-this-protection-that-seems-to-prevent-rop-when-aslr-in-on",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was doing some tests to train myself to ROP when <code>ASLR</code> is <code>ON</code> and <code>NX</code> is enabled.</p>\n<p>I created this small program for testing purpose</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char ** argv) {\n    char buff[128];\n\n    gets(buff);\n\n    char *password = \"I am h4cknd0\";\n\n    if (strcmp(buff, password)) {\n        printf(\"You password is incorrect\\n\");\n    } else {\n        printf(\"Access GRANTED !\\n\");\n    }\n\n    return 0;\n}\n</code></pre>\n<p>And I compiled it on a 64bits Ubuntu with this command</p>\n<pre><code>gcc -o rop rop.c -m32 -fno-stack-protector  -Wl,-z,relro,-z,now,-z,noexecstack -static\n</code></pre>\n<p>When I open the beast in <code>gdb</code> and disassemble the main function, I get the following</p>\n<pre><code>0x0804887c &lt;+0&gt;:       lea    ecx,[esp+0x4]\n0x08048880 &lt;+4&gt;:       and    esp,0xfffffff0\n0x08048883 &lt;+7&gt;:       push   DWORD PTR [ecx-0x4]\n0x08048886 &lt;+10&gt;:      push   ebp\n0x08048887 &lt;+11&gt;:      mov    ebp,esp\n0x08048889 &lt;+13&gt;:      push   ecx\n0x0804888a &lt;+14&gt;:      sub    esp,0x94\n0x08048890 &lt;+20&gt;:      sub    esp,0xc\n0x08048893 &lt;+23&gt;:      lea    eax,[ebp-0x8c]\n0x08048899 &lt;+29&gt;:      push   eax\n0x0804889a &lt;+30&gt;:      call   0x804f100 &lt;gets&gt;\n0x0804889f &lt;+35&gt;:      add    esp,0x10\n0x080488a2 &lt;+38&gt;:      mov    DWORD PTR [ebp-0xc],0x80bb388\n0x080488a9 &lt;+45&gt;:      sub    esp,0x8\n0x080488ac &lt;+48&gt;:      push   DWORD PTR [ebp-0xc]\n0x080488af &lt;+51&gt;:      lea    eax,[ebp-0x8c]\n0x080488b5 &lt;+57&gt;:      push   eax\n0x080488b6 &lt;+58&gt;:      call   0x8048280\n0x080488bb &lt;+63&gt;:      add    esp,0x10\n0x080488be &lt;+66&gt;:      test   eax,eax\n0x080488c0 &lt;+68&gt;:      je     0x80488d4 &lt;main+88&gt;\n0x080488c2 &lt;+70&gt;:      sub    esp,0xc\n0x080488c5 &lt;+73&gt;:      push   0x80bb395\n0x080488ca &lt;+78&gt;:      call   0x804f280 &lt;puts&gt;\n0x080488cf &lt;+83&gt;:      add    esp,0x10\n0x080488d2 &lt;+86&gt;:      jmp    0x80488e4 &lt;main+104&gt;\n0x080488d4 &lt;+88&gt;:      sub    esp,0xc\n0x080488d7 &lt;+91&gt;:      push   0x80bb3af\n0x080488dc &lt;+96&gt;:      call   0x804f280 &lt;puts&gt;\n0x080488e1 &lt;+101&gt;:     add    esp,0x10\n0x080488e4 &lt;+104&gt;:     mov    eax,0x0\n0x080488e9 &lt;+109&gt;:     mov    ecx,DWORD PTR [ebp-0x4]\n0x080488ec &lt;+112&gt;:     leave  \n0x080488ed &lt;+113&gt;:     lea    esp,[ecx-0x4]\n0x080488f0 &lt;+116&gt;:     ret\n</code></pre>\n<p>It's the first time I have these function prologue and epilogue</p>\n<p><strong>Prologue</strong></p>\n<pre><code>0x0804887c &lt;+0&gt;:       lea    ecx,[esp+0x4]\n0x08048880 &lt;+4&gt;:       and    esp,0xfffffff0\n0x08048883 &lt;+7&gt;:       push   DWORD PTR [ecx-0x4]\n</code></pre>\n<p><strong>Epilogue</strong></p>\n<pre><code>0x080488e9 &lt;+109&gt;:     mov    ecx,DWORD PTR [ebp-0x4]\n0x080488ec &lt;+112&gt;:     leave  \n0x080488ed &lt;+113&gt;:     lea    esp,[ecx-0x4]\n0x080488f0 &lt;+116&gt;:     ret\n</code></pre>\n<p>Because of these, I need to know <code>ESP</code> value when the <code>main</code> function is called when exploiting the vulnerable binary with ROP, but since <code>ASLR</code> is enabled, it's not possible.</p>\n<p><strong>PS</strong> : I assure you this is a program I wrote myself for training purpose, it's not part of any challenge or CTF.</p>\n<p>Thanks for your time and knowledge :)</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "rop"
    ],
    "user": "Hackndo",
    "time": "Oct 26, 2016 at 20:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not a protection but juste a prologue / epilogue that your compiler will produce.\nYou can check the produced assembly with different versions of gcc right there: <a href=\"https://gcc.godbolt.org/\" rel=\"nofollow\">https://gcc.godbolt.org/</a></p>\n<p>And in your context, you can control ECX. But what if you just control the last byte only ? Then you might fall on some of your input in the stack.</p>\n</div>",
            "votes": "2",
            "user": "laxa",
            "time": "Oct 25, 2016 at 8:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. That's totally right. I tried to use another compiler and did the following command <code>clang -o rop rop.c -m32 -fno-stack-protector  -Wl,-z,relro,-z,now,-z,noexecstack -static</code> and now I have a perfect well know prologue/epilogue :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While not a part of the official 386 SysV ABI, there is a de-facto requirement that the stack pointer is aligned to 16 bytes at all times when calling system functions (enforced by the de-facto standard compiler (GCC) since several years ago:<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38496\" rel=\"nofollow\">1</a>,<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=27537\" rel=\"nofollow\">2</a>). That's why the prolog of the <code>main</code> function contains the <code>and esp,0xfffffff0</code> instruction. Only the <code>main()</code> function needs to do that, other functions usually don't perform stack realignment since they assume they're already called with 16-byte alignment (unless you use <code>-mrealignstack</code>).</p>\n<p>So instead of using another compiler you could try putting the vulnerable code in a separate function, not <code>main</code> directly.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 25, 2016 at 16:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">Thanks for this useful information. I already published my article but I'll think about putting the vulnerable code in a separate function.</span>",
                    "time": null
                }
            ]
        }
    ]
}