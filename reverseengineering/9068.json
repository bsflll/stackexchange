{
    "title": "Understanding the loop disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/9068/understanding-the-loop-disassembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is the code of loop that I'm trying to understand the disassembly of it:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n   int i, arr[50], num;\n\n   printf(\"\\nEnter no of elements :\");\n   cin &gt;&gt; num;\n\n   //Reading values into Array\n   printf(\"\\nEnter the values :\");\n   for (i = 0; i &lt; num; i++)\n    cin &gt;&gt; arr[i];\n\n   return 0;\n}\n</code></pre>\n<p>And this is the disassembly:\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/4JQnv.jpg\"/></p>\n<p>Can you explain me the highlighted part? what is <code>Var_D8</code> is used for? Why compiler shifted left the <code>edx</code>?</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "858",
    "tags": [
        "disassembly",
        "binary-analysis"
    ],
    "user": "Vlad",
    "time": "Jun 5, 2015 at 7:59",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">SHL EDX,2 is basically multiplying EDX's value by 4.</span>",
            "time": null
        },
        {
            "user": "Vlad",
            "text": "<span class=\"comment-copy\">@DominikAntal for what purpose?</span>",
            "time": null
        },
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">I am not sure. However I suspect that this might be some compiler optimization/alignment for the array. Can you tell us the compiler and it's parameters you used? Will the SHL instruction be present if you recompile this code with <code>arr</code> beeing a byte array? You could also attach a dynamic debugger (Ollydbg) and see what is happening exactly by stepping trough your code.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">The key to understanding this is the <code>lea</code> opcode - eax gets the <i>address</i>, not the <i>content</i>, of that stack variable. This is the start of your array. As an integer has 4 bytes on your machine, counter gets multiplied by 4, which is the same as left shifting it by 2 - but the left shift is faster on many processors, which is why it's chosen over the multiply.</span>",
            "time": null
        },
        {
            "user": "Vlad",
            "text": "<span class=\"comment-copy\">@DominikAntal dev c++</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>var_D8</code> is your <code>int arr[50]</code>.</p>\n<p>You can recognize it quickly solely by its name : 50 * sizeof(int) = 200 = 0xC8. The next variable on the stack is <code>numb_of_elements</code> which is positionned on -0x10 on the stack, thus we have some memory between -0xD8 and -0x10 that corresponds to the <code>int</code> array.</p>\n<p>Here are some explanations about the following instructions :</p>\n<pre><code>lea eax, [ebp+var_D8]  ; Get the address of the first element of the array.\nmov edx, [ebp+Counter] ; Get the current element index.\nshl edx, 2             ; Since the size of each element of the array is 4, multiply the index by 4\nadd eax, edx           ; &amp;arr[i] = The address of the current element\nmov [esp], eax         ; Move it on the stack so it can be written by std::cin\n</code></pre>\n</div>",
            "votes": "8",
            "user": "Spl3en",
            "time": "Jun 5, 2015 at 14:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vlad",
                    "text": "<span class=\"comment-copy\">Great explanation, What is the additional 16 bits between <code>0x10</code> and <code>0xD8</code> used for?</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">@Vlad: what 16 bits? A statement that possibly needs reminding you that not any value here is in \"bits\" â€“ but maybe you confused it with <i>bytes</i>. Still: how did you come to the conclusion that there is <i>any</i> additional space left between <code>0x10</code> and <code>0xD8</code>? That space is <b>exactly</b> the amount needed for the 50 integers that your original code says there should be, nothing more and nothing less.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>var_d8</code> is the base position of <code>arr</code> in the stack, the size of type <code>int</code> in your machine is <code>4</code>, so the position of <code>arr[i]</code> in the stack is calculated by: </p>\n<blockquote>\n<p>var_d8 + 4 * i</p>\n</blockquote>\n</div>",
            "votes": "5",
            "user": "Ta Thanh Dinh",
            "time": "Jun 5, 2015 at 9:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}