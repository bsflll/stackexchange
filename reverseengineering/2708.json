{
    "title": "A PE packer: issues with the packed image base address",
    "link": "https://reverseengineering.stackexchange.com/questions/2708/a-pe-packer-issues-with-the-packed-image-base-address",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am toying with writing a basic PE packer, whose job is simply to execute the attached target PE in memory. I have spent a couple of days getting intimate with the format, and I think that I have grasped it well enough for the purpose. These are the methods I use:</p>\n<ol>\n<li>Firstly, the target is bundled with the loader by being inserted into the <code>.data</code> section of a <a href=\"http://www.nasm.us/\" rel=\"noreferrer\">nasm</a> generated object file, which is later compiled together with the loader.</li>\n<li>Upon execution, the Image Data Directory is examined, and the Import Address Table properly bound by loading the needed libraries and functions.</li>\n<li>The PE and all of its sections need to be properly laid out in memory, hence <code>ImageBase</code> and <code>SizeOfImage</code> are read, and sufficient virtual memory is allocated for the next two operations.</li>\n<li>PE headers are written into the new location.</li>\n<li>Section data is gathered via section headers, and every section gets written into the new memory space, each into its designated virtual address. Proper permissions via <code>VirtualProtect()</code> are also set.</li>\n<li>Finally, <code>OptionalHeader.AddressOfEntryPoint</code> gets called.</li>\n</ol>\n<p>The loader, of course, has an exotic image base, as to not conflict with the standard <code>0x00400000</code> base. My problems lies somewhere along there. Almost every <code>.exe</code> has its relocations table stripped, so there's no way to do a base relocation if the desired base address is unavailable. The loader having a non-standard image base solves the problem to an extent. The target's desired base is only available in about 50% of runs. I've tried to find out what might occupy the memory in the other 50%, and have found out that it's almost always a <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff563684%28v=vs.85%29.aspx\" rel=\"noreferrer\">section view</a>. Of what, or whose, I don't know. I've tried to use both <code>NtUnmapViewOfSection</code> and <code>NtFreeVirtualMemory</code>, but they don't solve the problem. The first seems to introduce memory corruption and the second does nothing. Is there any way of claiming that memory? Here's a screenshot from ProcessHacker:\n<img alt=\"\" src=\"https://i.sstatic.net/sfrwq.png\"/>.</p>\n<p>All ideas are welcome.</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "955",
    "tags": [
        "pe",
        "packers"
    ],
    "user": "hauzer",
    "time": "Aug 29, 2013 at 0:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might want to:</p>\n<ol>\n<li>give your packer stub have the same standard ImageBase</li>\n<li>allocates memory somewhere else</li>\n<li>relocate the (EIP-independant, for convenience) stub code there</li>\n<li>to rebuild the original code at the original ImageBase without any risk.</li>\n</ol>\n</div>",
            "votes": "3",
            "user": "Ange",
            "time": "Aug 29, 2013 at 7:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "hauzer",
                    "text": "<span class=\"comment-copy\">That's the exact same thing I thought of in between asking the question and coming here to check for answers! Yes, I think that'll do it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try getting code inspiration from process hollowing.</p>\n<p>Here's one that remotely runs it on a new space:\n<a href=\"https://github.com/hasherezade/libpeconv/tree/master/run_pe\" rel=\"nofollow noreferrer\">https://github.com/hasherezade/libpeconv/tree/master/run_pe</a>\n<a href=\"https://github.com/m0n0ph1/Process-Hollowing\" rel=\"nofollow noreferrer\">https://github.com/m0n0ph1/Process-Hollowing</a></p>\n<p>Try:</p>\n<ol>\n<li>run the packer loader from a newly allocated memory (copy loader shellcode to and run from RWX allocated mem.)</li>\n<li>unmap loader PE image, realloc, and replace it with new PE image</li>\n<li>dynamically import functions from new PE image</li>\n<li>jump to entry point of new PE image</li>\n</ol>\n<p>I haven't dug deep about resource loading yet. But if the new PE image uses LoadResource, it might read the loader's instead.  Not sure about this.</p>\n<p>You can get more ideas from debugging a UPX packed sample.</p>\n</div>",
            "votes": "0",
            "user": "exp101t",
            "time": "Apr 16, 2020 at 6:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}