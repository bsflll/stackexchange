{
    "title": "How to add/find parameters to a function declaration in IDA/HexRays?",
    "link": "https://reverseengineering.stackexchange.com/questions/18570/how-to-add-find-parameters-to-a-function-declaration-in-ida-hexrays",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've a binary opened in IDA. It uses a function pointer from a COM vtable. I found that the COM method has 13 parameters (including <code>this</code>). But IDA shows only 4 parameters as shown in this pseudocode:</p>\n<pre><code>v93 = 0i64;\nv79 = &amp;hObject;\nv78 = &amp;v93;\nv77 = 0xFFFFFFFF;\nv76 = (signed int)NtCurrentPeb()-&gt;ProcessParameters-&gt;Reserved2[0];\nv75 = a6;\nLODWORD(v74) = v130;\nv73 = v129;\nHIDWORD(v72) = HIDWORD(v118);\nv71 = Dst;\nv14 = (*(__int64 (__fastcall **)(__int64, __int64, _QWORD, __int64))(*(_QWORD *)v10 + 48i64))(v10, v117, v91, v116);\n</code></pre>\n<p>The corresponding disassembly looks like this:</p>\n<pre><code>loc_1400055B6:\nmov     [rsp+2A8h+var_1E0], rsi\nmov     rax, gs:60h\nmov     rcx, [rax+20h]\nmov     rdx, [rcx+10h]\nmov     rax, [r12]\nmov     r10, [rax+30h]\nlea     rax, [rsp+2A8h+hObject]\nmov     [rsp+2A8h+var_248], rax\nlea     rax, [rsp+2A8h+var_1E0]\nmov     [rsp+2A8h+var_250], rax\nor      [rsp+2A8h+var_258], 0FFFFFFFFh\nmov     [rsp+2A8h+var_260], edx\nmov     [rsp+2A8h+var_268], r15\nmov     eax, dword ptr [rsp+2A8h+var_90]\nmov     dword ptr [rsp+2A8h+var_270], eax\nmov     rax, [rsp+2A8h+var_98]\nmov     [rsp+2A8h+var_278], rax\nmov     rax, [rsp+2A8h+var_110]\nmov     [rsp+2A8h+var_280], rax\nmov     rax, [rsp+2A8h+Dst]\nmov     [rsp+2A8h+var_288], rax\nmov     r9, [rsp+2A8h+var_120]\nmov     r8d, [rsp+2A8h+var_1EC]\nmov     rdx, [rsp+2A8h+var_118]\nmov     rcx, r12\nmov     rax, r10\ncall    cs:__guard_dispatch_icall_fptr\nmov     rcx, [rsp+2A8h]\ntest    eax, eax\njs      loc_140005FF4\n</code></pre>\n<p><strong>Question</strong>: The function pointer i.e. <code>v10 + 48i64</code> shows only four parameter. How can I add or find the remaining parameters?</p>\n<hr/>\n<p><strong>Update:</strong> I add a header file mentioning the total 13 probable parameters in that method. Though IDA changes the data type of four parameters (v10, v117, v91, v116) it doesn't add remaining ones. I thought that if v71 to v79 are the other parameter of that COM method. That'll make all 13 parameters. And the execution starts with v79. May be like <code>__stdcall</code>.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "disassembly",
        "hexrays",
        "com"
    ],
    "user": "Biswapriyo",
    "time": "Jul 10, 2018 at 8:26",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">To modify the function declaration, select its name in the IDA View-A and press <code>Y</code>. That should bring up a dialog that lets you edit the function declaration in C.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">There is ... in the vtable. Of course in this case it has no name initially. But of course you can tack a function declaration on it once you have defined a struct corresponding to the vtable layout.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">I've never used a header file to achieve this. So I'm probably not qualified to comment further. Whenever I do this, I use the method with <code>Y</code> outlined above. The least you can achieve with it, would be to see if your header file actually took effect.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to define the virtual method table structure, then for the method at offset 48 (0x30) you need to specify the correct function definition, and then set v10 type to your structure.</p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Jun 26, 2018 at 8:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Is calling conventions important in COM methods?</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">In x32 - yes, in x64 - no</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li><strong>Simplification:</strong> All the memory offsets are in decimal. </li>\n</ul>\n<pre><code>loc_1400055B6:\nmov     [rsp+200], rsi\nmov     rax, gs:60h\nmov     rcx, [rax+32]\nmov     rdx, [rcx+16]\nmov     rax, [r12]              ;load lpVtbl pointer\nmov     r10, [rax+48]           ;sixth (48/8) function after QueryInterface\nlea     rax, [rsp+168]\nmov     [rsp+96], rax           ;13th parameter\nlea     rax, [rsp+200]\nmov     [rsp+88], rax           ;12th parameter\nmov     [rsp+80], rsi           ;11th parameter\nmov     [rsp+72], edx           ;10th parameter\nmov     [rsp+64], r15           ;9th parameter\nmov     eax, [rsp+744]\nmov     [rsp+56], eax           ;8th parameter\nmov     rax, [rsp+736]\nmov     [rsp+48], rax           ;7th parameter\nmov     rax, [rsp+616]\nmov     [rsp+40], rax           ;6th parameter\nmov     rax, [rsp+592]\nmov     [rsp+32], rax           ;5th parameter\nmov     r9, [rsp+600]           ;4th parameter\nmov     r8d, [rsp+196]          ;3rd parameter\nmov     rdx, [rsp+608]          ;2nd parameter\nmov     rcx, r12                ;1st parameter aka. 'this' pointer \nmov     rax, r10                ;sixth function after QueryInterface\ncall    cs:__guard_dispatch_icall_fptr\nmov     rcx, [rsp+378h]\ntest    eax, eax\njs      loc_140005FF4\n</code></pre>\n<ul>\n<li><strong>Explanation:</strong> The binary is a Windows 64bit executable. It is not easily possible to get details of function parameters with pseudo-code only. The assembly code defines more than that. </li>\n</ul>\n<p>The function follows <a href=\"https://docs.microsoft.com/en-us/cpp/build/overview-of-x64-calling-conventions\" rel=\"nofollow noreferrer\"><code>__fastcall</code> convention</a>. Quote from <a href=\"https://docs.microsoft.com/en-us/cpp/build/overview-of-x64-calling-conventions\" rel=\"nofollow noreferrer\">this article</a>: \"Integer arguments are passed in registers <code>RCX</code>, <code>RDX</code>, <code>R8</code>, and <code>R9</code>\". As you can see the assembly follows same rule from 1st to 4th parameter. Then the rest of parameters are stored in stack with increment of <code>[RSP+32]</code> to <code>[RSP+96]</code>. For example: </p>\n<pre><code>func1(int a, int b, int c, int d, int e);\n// a in RCX, b in RDX, c in R8, d in R9, e pushed on stack \n</code></pre>\n<p>Hence IDA only takes the four general 64bit registers as parameters only, not the stack variables and it shows only four parameters instead of thirteen parameters. At last, ignore the calling of <code>__guard_dispatch_icall_fptr</code> function, it's just a <a href=\"https://docs.microsoft.com/en-us/windows/desktop/secbp/control-flow-guard\" rel=\"nofollow noreferrer\">Control Flow Guard</a> added by M$ Visual Studio compiler. </p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jun 16, 2020 at 15:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}