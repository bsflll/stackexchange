{
    "title": "How to analyze a child process created by malware by process hollowing mechanism using immunity debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/13809/how-to-analyze-a-child-process-created-by-malware-by-process-hollowing-mechanism",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I analyzed this malware sample it was invoking api's related to creating additional processes. With the process explorer I saw the debugged process is creating a new process. Please suggest any method to analyze this child process using immunity debugger?</p>\n<p><a href=\"https://i.sstatic.net/9yZmN.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/9yZmN.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ollydbg",
        "debugging",
        "malware",
        "immunity-debugger",
        "winapi"
    ],
    "user": "wolverinegptg",
    "time": "Oct 25, 2016 at 4:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>using ollgdbgv2's debug child processes feature</h2>\n<p>Instead of using Immunity Debugger (which is a forked from <a href=\"http://ollydbg.de/\" rel=\"nofollow noreferrer\">OllyDbg1.10</a>), you might want to consider using <a href=\"http://ollydbg.de/version2.html\" rel=\"nofollow noreferrer\">OllyDbg2.0</a>.</p>\n<p>One of the new features in ollydbg 2 is the Debug Child Processes feature shown here:</p>\n<p><a href=\"https://i.sstatic.net/GDxO5.png\" rel=\"nofollow noreferrer\"><img alt=\"debug child processes\" src=\"https://i.sstatic.net/GDxO5.png\"/></a></p>\n<p>When this checkbox is on when you start debugging a process, a new instance of ollydbg will automatically start whenever the debugged process creates a new process. This cannot be nested though, as a process started/debugged that way is not started by ollydbg.</p>\n<h2>Catching the process creation</h2>\n<p>Additionally, you can search for all imported functions, go over them manually and add a breakpoint on each API used to create processes, there shouldn't be more than a few of those.</p>\n<p>Then, just let the process run until it hits one of those breakpoints and make the API call create the process in a suspended state (look up the specific API's documentation for the specifics).</p>\n<p>You won't be able to attach to the process (because it's suspended) until it's resumed by calling <code>ResumeThread</code> on the process single thread. there's a common trick here that involves several steps:</p>\n<ol>\n<li>Create the process as suspended (The process you're debugging did that for you after you changed the parameters to the process creation API call appropriately).</li>\n<li>Find the executable's entry point and take note of the two first bytes at that address.</li>\n<li>Replace those bytes with the 2 byte representation of <code>jmp $</code> (byte code is <code>EB FE</code>). This is an infinite loop as the instruction jumps to itself.</li>\n<li>Resume the process.</li>\n<li>Now that the process is \"running\" you can attach to it, suspend it, restore the original two bytes and run it.</li>\n</ol>\n<p>Keep in mind that a process might be creating additional threads in the child process, and those might get past the suspension. Use at your own risk :)</p>\n<p>There are ollydbg v1.1 plugins (which means immunity plugins) that will do that for you, but you'll have to find them because I can't recall the name. tuts4you.com is a good place to start.</p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}