{
    "title": "Keygenme - Key location",
    "link": "https://reverseengineering.stackexchange.com/questions/18918/keygenme-key-location",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I was messing with an interesting keygenme, written in C++, which derives the key based on the values of the <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/metadata/osinfo-structure\" rel=\"nofollow noreferrer\">OSINFO</a> structure. Now, when checking for a valid key it uses the following instruction:</p>\n<p><code>CMP EAX, DWORD PTR DS:[key]</code></p>\n<p>My question is: why isn't the key stored in a local variable or something like:<code>[EBP-X]</code>?</p>\n<p>How would I translate it back into C++ so that it stores the key in <code>DS:[key]</code> rather than in the stack?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "121",
    "tags": [
        "ida",
        "x86",
        "crackme"
    ],
    "user": "Trey",
    "time": "Jul 29, 2018 at 5:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use a global or static variable.</p>\n<p>Explanation:</p>\n<p><code>EBP</code> (base pointer) typically holds the address of the current stack frame, in that case it's used to get the address to local variable. (<a href=\"https://stackoverflow.com/a/15020825/5267751\">reference</a>) Global or static variables don't need such pointer, as their address is fixed on program load.</p>\n<hr/>\n<p>By the way: I didn't test compiling a simple program on a 32-bit compiler. <a href=\"https://stackoverflow.com/questions/21165678/why-64-bit-mode-long-mode-doesnt-use-segment-registers\">64-bit mode doesn't use segment registers</a>.</p>\n</div>",
            "votes": "3",
            "user": "user202729",
            "time": "Jul 30, 2018 at 4:38",
            "is_accepted": true,
            "comments": []
        }
    ]
}