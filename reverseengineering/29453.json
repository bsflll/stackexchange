{
    "title": "Does psVar[-6] refer to 6*sizeof(psVar) bytes before psVar? Can you avoid the negative index?",
    "link": "https://reverseengineering.stackexchange.com/questions/29453/does-psvar-6-refer-to-6sizeofpsvar-bytes-before-psvar-can-you-avoid-the-ne",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In this decompiled code, does <code>psVar8[-6]</code> refer to <code>6*sizeof(psVar8) == 12</code> bytes before <code>psVar8</code>?</p>\n<pre><code>psVar8 = (short *)(&amp;DAT_1412345b4 + named_index * 0x20);\ndo {\n  if (psVar8[-6] == 0) break;\n  // ...\n} while (lVar10 &lt; 6);\n</code></pre>\n<p>It would seem more intuitive to me if the position of <code>psVar8</code> was earlier to avoid the negative index. Is there a way to change this in the decompiled code, or a reason not to?</p>\n<p>I'm attaching the entire loop in case that is important to the question:</p>\n<pre><code>    do {\n      if (psVar8[-6] == 0) break;\n      if (psVar8[-6] == 4) {\n        named_variable = 0;\n        if (0 &lt; *psVar8) {\n          named_variable = (int)*psVar8;\n        }\n        iVar4 = 0x1d;\n        if (named_variable &lt; 0x1d) {\n          iVar4 = named_variable;\n        }\n        *(undefined2 *)(&amp;DAT_145678900 + (longlong)iVar4 * 2) = 1;\n      }\n      lVar10 += 1;\n      psVar8 = psVar8 + 1;\n    } while (lVar10 &lt; 6);\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "86",
    "tags": [
        "c",
        "ghidra",
        "pointer"
    ],
    "user": "Anna",
    "time": "Oct 25, 2021 at 10:13",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">no sizeof() does not come in play it is an index into an array <a href=\"https://stackoverflow.com/questions/8133804/negative-array-index-in-c\">look at David Heffermans Answer in this query</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you are running into a case of \"shifted pointers\". For various reasons the compiler might generate code where a pointer to the middle of a struct is returned. There is a <a href=\"https://github.com/NationalSecurityAgency/ghidra/pull/2189\" rel=\"nofollow noreferrer\">Ghidra PR</a> for this, but this isn't merged yet and still has various issues, IDA discusses this feature <a href=\"https://hex-rays.com/products/ida/support/idadoc/1695.shtml\" rel=\"nofollow noreferrer\">here</a></p>\n</div>",
            "votes": "2",
            "user": "Florian Magin",
            "time": "Oct 28, 2021 at 8:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}