{
    "title": "Cannot understand var passing to function in code compiled with dev c++ [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/11084/cannot-understand-var-passing-to-function-in-code-compiled-with-dev-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>This question already has answers here</b>:\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/6775/why-are-those-instructions-generated\">Why are those instructions generated?</a>\n<span class=\"question-originals-answer-count\">\n                                (1 answer)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/9079/computing-subtracted-stack-space-for-a-function-manually\">Computing subtracted stack space for a function manually</a>\n<span class=\"question-originals-answer-count\">\n                                (1 answer)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2015-10-15 11:26:44Z\">9 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>I'm not understating why the parameters to printf are passed this way.\nmov     [esp+20h+var_1C], eax\nmov     [esp+20h+Format], offset Format ; \"%d\"</p>\n<p>Why esp is added with 20h then substracted with 20h and esp doest added to point to next stack location for local vars ?</p>\n<p>why the compiler simply didnt generate code like this:\nmove eax, var_4\npush eax\nmove eax, Format\npush eax\ncall printf</p>\n<p>Ill be happy i some of you can either explain how push is replaced with this custom mov.</p>\n<p>here is the source in c:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n\nint main(void)\n{\n    int a;\n    int b = 5;\n\n    printf(\"%d\", b);\n\n    return 0;\n}\n</code></pre>\n<p>here is the disassembly:</p>\n<pre><code>; Attributes: bp-based frame\n\n; int __cdecl main(int argc, const char **argv, const char **envp)\npublic _main\n_main proc near\n\nFormat= dword ptr -20h\nvar_1C= dword ptr -1Ch\nvar_4= dword ptr -4\nargc= dword ptr  8\nargv= dword ptr  0Ch\nenvp= dword ptr  10h\n\npush    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\nsub     esp, 20h\ncall    ___main\nmov     [esp+20h+var_4], 5\nmov     eax, [esp+20h+var_4]\nmov     [esp+20h+var_1C], eax\nmov     [esp+20h+Format], offset Format ; \"%d\"\ncall    _printf\nmov     eax, 0\nleave\nretn\n_main endp\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 4,
    "views": "527",
    "tags": [
        "disassembly",
        "c"
    ],
    "user": "Igal",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">See <a href=\"http://reverseengineering.stackexchange.com/questions/6775/why-are-those-instructions-generated\">Why are those instructions generated?</a></span>",
            "time": null
        },
        {
            "user": "Igal",
            "text": "<span class=\"comment-copy\">This isnt answered my question.</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">If <a href=\"http://reverseengineering.stackexchange.com/questions/6775/why-are-those-instructions-generated\">Why are those instructions generated?</a> doesn't answer your question, you may need to clarify what you're asking.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Maybe my <a href=\"http://reverseengineering.stackexchange.com/questions/9079/computing-subtracted-stack-space-for-a-function-manually/9087#9087\">answer to this question</a> will help you, it has some graphics on what the stack looks like when using standard push/pop operations, and how that changes with gcc's optimizations that leave the stack pointer alone.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>push eax</code> is precisely identical to </p>\n<pre><code>sub esp, 4\nmov [esp], eax\n</code></pre>\n<p>Rather than using a bunch of <code>push</code>es, they adjusted the stack pointer to where it <em>would</em> have been if they <em>had</em> used <code>push</code>.  Then, they store each datum where it would have been.  The effect is the same, it's just fewer instructions.</p>\n</div>",
            "votes": "1",
            "user": "sqykly",
            "time": "Oct 15, 2015 at 14:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igal",
                    "text": "<span class=\"comment-copy\">You mean that this peace of code:                                                        mov     [esp+20h+var_4], 5 mov     eax, [esp+20h+var_4] mov     [esp+20h+var_1C], eax mov     [esp+20h+Format], offset Format ; \"%d\"                                        replaces the pushes before function call ?</span>",
                    "time": null
                },
                {
                    "user": "sqykly",
                    "text": "<span class=\"comment-copy\">@igal yes, but you skipped the <code>sub</code> instruction that reserves stack for those <code>mov</code>s to go into.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a standard GCC-generated prelude of a function.</p>\n<pre><code>and     esp, 0FFFFFFF0h\n</code></pre>\n<p>aligns stack on 16-byte boundary, then</p>\n<pre><code>sub     esp, 20h\n</code></pre>\n<p>reserves all stack used inside the function (also aligned on 16-byte boundary, see <a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Data_structure_alignment</a>). Then all operations with current local stack variables, including arguments to called functions, are done as</p>\n<pre><code>mov     [esp+20h+XXX]\n</code></pre>\n<p>MSVC 2010 (and probably others) would do more pushes instead of this mov-ing</p>\n</div>",
            "votes": "0",
            "user": "Vitaly Osipov",
            "time": "Oct 13, 2015 at 21:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igal",
                    "text": "<span class=\"comment-copy\">I understand, but why the pushes replaced with moves in newer version of the compilers ?</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">@Igal A wild guess - the changed it for x64 and reused the code for x86. Check \"Stack Pointer based local variable access\" in <a href=\"http://www.codemachine.com/article_x64deepdive.html\" rel=\"nofollow noreferrer\">codemachine.com/article_x64deepdive.html</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Why esp is added with 20h then substracted with 20h and esp doest\n  added to point to next stack location for local vars ?</p>\n</blockquote>\n<p>The <code>mov [esp+20h+Format], offset Format</code> instruction is only a modified view of the <code>mov [esp], offset Format</code>. The disassembler tries to visualize the local variables and the stack frame in this way. The <code>+20h</code> is the size of the stack frame and the <code>Format</code> keyword means the offset of the <code>Format</code> parameter (<code>-20h</code>). Since it is a parameter, which will be passed to a function, it is placed at the top of the stack. It would be the same, if the function allocated only <code>18h</code> stack frame and pushed the parameter values to the stack.</p>\n<blockquote>\n<p>why the compiler simply didnt generate code like this: <br/></p>\n<pre><code>mov eax, var_4\npush eax\nmov eax, Format\npush eax\ncall printf\n</code></pre>\n</blockquote>\n<p><br/>\nBecause the stack pointer should not be modified in this way and this form is only 1 instruction and not 2.</p>\n</div>",
            "votes": "0",
            "user": "ebux",
            "time": "Oct 15, 2015 at 7:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>HIgh and midlevevel languages has bascically two different calling conentions (assuming datawidth i  max_bits, much faster, but maybe lesss readable, signed values are indicated by, LSHB * 1 and son on.</p>\n<p>The assmbly codes not corrrect. The correct code is mov [\"I\"ESP),\ndetermindes the sign. Sihn is entirely determined p√• software. EVen simple asseblers and compilers havea sign Array/CLT classl</p>\n</div>",
            "votes": "-2",
            "user": "ChristianDyrnesli",
            "time": "Oct 13, 2015 at 5:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I fail to understand your answer, and even if i could understand it, i wouldn't know how it has anything to do with the question.</span>",
                    "time": null
                }
            ]
        }
    ]
}