{
    "title": "Issues with reversing LZSS compression algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/17396/issues-with-reversing-lzss-compression-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer my HP printer's firmware, so I dumped the SPI chip from the board, and there are a lot of strings, but almost always look something like this:\n<a href=\"https://i.sstatic.net/Ykhbz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Ykhbz.png\"/></a></p>\n<p>I noticed a pattern that sometimes after every 8 bytes FF byte is added. However, this is not the whole pattern. Does anyone have a clue what could this be? It is not the dump error since I extracted some JPEG images from uncompressed parts just fine, and multiple dumps produce the same file.</p>\n<p><strong>UPDATE:</strong>\nI figured it could be LZSS compression, and I managed to decompress this <a href=\"https://drive.google.com/open?id=1Vc3j_ETLwz_vuzFImWI_oa9NXPJXKOfp\" rel=\"nofollow noreferrer\">part</a> and got <a href=\"https://drive.google.com/open?id=1gV-igoVCqcfn3NozccNx5dVqHBrX0Z6J\" rel=\"nofollow noreferrer\">this</a>.\nHowever, when I tried the same script on the <a href=\"https://drive.google.com/open?id=1AAaOLchr6K3CpmSArGPDAV4_5lkZ4vDi\" rel=\"nofollow noreferrer\">other part</a> which has the same pattern it does not decompress properly. What could be the reason?</p>\n<p>I used the QuickBMS script for LZSS algorithm (code below).\nIdeally, I would like to do it in python, but the scripts I found did not produce the good result even with the same LZSS parameters. I am not super familiar with QuickBMS scripting.</p>\n<pre><code># lzss decompression function written in 100% bms scripting\n\nset NAME string \"unpacked.dat\"\nget ZSIZE asize\nmath SIZE = ZSIZE\nmath SIZE *= 10\nlog MEMORY_FILE 0 ZSIZE\ncallfunction LZSS_BMS_DUMP\n\n# you must set: MEMORY_FILE (input), ZSIZE (input size), MEMORY_FILE2 (output), SIZE (max size)\nstartfunction LZSS_BMS_DUMP\n    set EI long 12\n    set EJ long 4\n    set P long 2\n    set rless long P\n    set init_chr long 0x00\n\n    set N long 1\n    math N &lt;&lt;= EI\n    set F long 1\n    math F &lt;&lt;= EJ\n\n    # pre-allocate memory for faster performances\n    putvarchr MEMORY_FILE3 N 0\n    for i = 0 &lt; N\n        putvarchr MEMORY_FILE3 i init_chr\n    next i\n    putvarchr MEMORY_FILE2 SIZE 0\n\n    math r = N\n    math r -= F\n    math r -= rless\n    math N -= 1\n    math F -= 1\n\n    math src = 0\n    math dst = 0\n    math srcend = ZSIZE\n    math dstend = SIZE\n\n    math flags = 0\n    for src = 0 &lt; srcend\n        if flags &amp; 0x100\n        else\n            getvarchr flags MEMORY_FILE src\n            math src += 1\n            math flags |= 0xff00\n        endif\n        if flags &amp; 1\n            getvarchr c MEMORY_FILE src\n            math src += 1\n            putvarchr MEMORY_FILE2 dst c\n            math dst += 1\n            putvarchr MEMORY_FILE3 r c\n            math r += 1\n            math r &amp;= N\n        else\n            getvarchr i MEMORY_FILE src\n            math src += 1\n            getvarchr j MEMORY_FILE src\n            math src += 1\n            math TMP = j\n            math TMP &gt;&gt;= EJ\n            math TMP &lt;&lt;= 8\n            math i |= TMP\n            math j &amp;= F\n            math j += P\n            for k = 0 &lt;= j\n                math TMP = i\n                math TMP += k\n                math TMP &amp;= N\n                getvarchr c  MEMORY_FILE3 TMP\n                putvarchr MEMORY_FILE2 dst c\n                math dst += 1\n                putvarchr MEMORY_FILE3 r c\n                math r += 1\n                math r &amp;= N\n            next k\n        endif\n        math flags &gt;&gt;= 1\n    next\n    math SIZE = dst\n    log NAME 0 SIZE MEMORY_FILE2\nendfunction\n</code></pre>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "1k",
    "tags": [
        "firmware",
        "hex",
        "decompress"
    ],
    "user": "hlex",
    "time": "Feb 8, 2018 at 14:13",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">That is typical for per-character compression such as LZMA (if I remember my abbreviations correct). It was a natural next step up from basic RLE (where a leading value or one or more bits indicate what to repeat). The next step was to compress <i>bits</i>, and in such a case you would not be able to find plain text anymore.</span>",
            "time": null
        },
        {
            "user": "hlex",
            "text": "<span class=\"comment-copy\">Thanks for pointing me in the right direction! It seems to be LZSS actually. I managed do decompress one part of the file apparently correct. But some other parts with the same compression don't decompress correctly. I think I haven't figured out the exact parameters or it could be some LZSS variant...</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Perhaps you could show your current code in your question. It may help if you put in a link to the data as well, so others don't have to re-type it from your screenshot.</span>",
            "time": null
        },
        {
            "user": "hlex",
            "text": "<span class=\"comment-copy\">Yes, good point, here it is!</span>",
            "time": null
        },
        {
            "user": "TkTech",
            "text": "<span class=\"comment-copy\">Can't actually download the 1st sample part in your post, the link isn't set to public.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A couple of years of experience later, I revisited this project and figured it out!\nThe compression is in fact LZSS, and the QuickBMS script from my question is able to decompress it correctly. The second section I mentioned was problematic just because there are uncompressed blocks in between compressed blocks in the chip dump, so, obviously, they need to be extracted and decompressed separately.</p>\n<p>If anyone is interested in understanding LZSS properly, I really liked the way it was explained in the book \"Retrogame Archeology: Exploring Old Computer Games\", page 104 (can be viewed for free on Google books).</p>\n<p>Thanks all for helping, I could not have figured it out without an amazing community here! :)</p>\n</div>",
            "votes": "1",
            "user": "hlex",
            "time": "May 26, 2020 at 9:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">you should accept your own answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}