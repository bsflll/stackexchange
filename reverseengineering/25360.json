{
    "title": "How can you dump the unpacked version of a packed library/plugin from memory on macOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/25360/how-can-you-dump-the-unpacked-version-of-a-packed-library-plugin-from-memory-on",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm dealing with a custom-upx packed library that I'm trying to unpack. System is macOS.</p>\n<p>Given it's a library/plugin, it doesn't have a standalone entrypoint. I ran it through a disassembler but wasn't able to find obvious hints where the OEP might be. On top of that, it also uses anti-debugging measurements through ptrace to make it even harder.</p>\n<p>Next I wrote my own loader for it including callbacks it wants, and managed to get it to load, then used lldb save-core to dump the entire memory (of my loader+lib) into a 3GB-ish file.</p>\n<p>Here is where I am stuck: Memory analysis and forensics doesn't look like its popular on mac with most tools outdated and no longer working. I don't know how to approach this going forward and if it's even possible to restore the unpacked variant from this dump.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "251",
    "tags": [
        "memory-dump",
        "upx"
    ],
    "user": "memboi3",
    "time": "Jun 21, 2020 at 3:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically you need to find the Mach-O header of the module in memory and dump the segments referred by it.</p>\n<p>Hereâ€™s a tool which is not specifically for macOS, but should not be too difficult to modify since it already has the code to handle the Mach-O format:</p>\n<p><a href=\"https://github.com/stefanesser/dumpdecrypted\" rel=\"nofollow noreferrer\">https://github.com/stefanesser/dumpdecrypted</a></p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 21, 2020 at 10:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}