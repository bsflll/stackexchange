{
    "title": "IDA exported header full of errors",
    "link": "https://reverseengineering.stackexchange.com/questions/25394/ida-exported-header-full-of-errors",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Im a noob when it comes to using reverse engineering tooling.</p>\n<p>I am doing a reversing challenge (pwn adventure 3 CTF) and I am exporting the various types from IDA. The thing is, the header files are always full of errors when I add them to the project in visual studio. Using these headers would be much convenient since I have access to them, its just frustrating that i cannot get the syntax work. I have tried exporting the whole DLL I am debugging as a header (it includes a pdb so all these are supposed to be included). I have even tried including all of the std headers (I know its a bad practice, just wanted to try whether that fixes it.)</p>\n<p>Is there something I am missing that I am supposed to do in order to have the exported headers be syntactically correct so I can use them in my development project?</p>\n<p>Maybe the pros can guide me to the correct direction with this. Cheers in advance.</p>\n<p>An example for the header exported by IDA for the ClientWorld looks the following,:</p>\n<pre><code>/*\n   This file has been generated by IDA.\n   It contains local type definitions from\n   the type library 'GameLogic'\n*/\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n\nstruct IPlayer;\nstruct ILocalPlayer;\nstruct std::_Tree_node&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt;,void *&gt;;\nstruct std::_Tree_node&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt;,void *&gt;;\nstruct std::_Tree_node&lt;ActorRef&lt;IActor&gt;,void *&gt;;\nstruct std::_Tree_node&lt;ActorRef&lt;IPlayer&gt;,void *&gt;;\nstruct WorldVtbl;\n\n/* 155 */\nstruct __cppobj std::_Container_base0\n{\n};\n\n/* 545 */\nstruct __cppobj std::_Tree_val&lt;std::_Tree_simple_types&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; : std::_Container_base0\n{\n  std::_Tree_node&lt;ActorRef&lt;IPlayer&gt;,void *&gt; *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 549 */\nstruct __cppobj std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;ActorRef&lt;IPlayer&gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; &gt; : std::_Tree_val&lt;std::_Tree_simple_types&lt;ActorRef&lt;IPlayer&gt; &gt; &gt;\n{\n};\n\n/* 550 */\nstruct __cppobj std::_Tree_buy&lt;ActorRef&lt;IPlayer&gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; : std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;ActorRef&lt;IPlayer&gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; &gt;\n{\n};\n\n/* 551 */\nstruct __cppobj std::_Tree_comp&lt;0,std::_Tset_traits&lt;ActorRef&lt;IPlayer&gt;,std::less&lt;ActorRef&lt;IPlayer&gt; &gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt;,0&gt; &gt; : std::_Tree_buy&lt;ActorRef&lt;IPlayer&gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt;\n{\n};\n\n/* 565 */\nstruct __cppobj std::_Tree&lt;std::_Tset_traits&lt;ActorRef&lt;IPlayer&gt;,std::less&lt;ActorRef&lt;IPlayer&gt; &gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt;,0&gt; &gt; : std::_Tree_comp&lt;0,std::_Tset_traits&lt;ActorRef&lt;IPlayer&gt;,std::less&lt;ActorRef&lt;IPlayer&gt; &gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 687 */\nstruct __cppobj std::set&lt;ActorRef&lt;IPlayer&gt;,std::less&lt;ActorRef&lt;IPlayer&gt; &gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; : std::_Tree&lt;std::_Tset_traits&lt;ActorRef&lt;IPlayer&gt;,std::less&lt;ActorRef&lt;IPlayer&gt; &gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 322 */\nstruct __cppobj std::_Tree_val&lt;std::_Tree_simple_types&lt;ActorRef&lt;IActor&gt; &gt; &gt; : std::_Container_base0\n{\n  std::_Tree_node&lt;ActorRef&lt;IActor&gt;,void *&gt; *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 323 */\nstruct __cppobj std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;ActorRef&lt;IActor&gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt; &gt; : std::_Tree_val&lt;std::_Tree_simple_types&lt;ActorRef&lt;IActor&gt; &gt; &gt;\n{\n};\n\n/* 328 */\nstruct __cppobj std::_Tree_buy&lt;ActorRef&lt;IActor&gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt; : std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;ActorRef&lt;IActor&gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt; &gt;\n{\n};\n\n/* 542 */\nstruct __cppobj std::_Tree_comp&lt;0,std::_Tset_traits&lt;ActorRef&lt;IActor&gt;,std::less&lt;ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt;,0&gt; &gt; : std::_Tree_buy&lt;ActorRef&lt;IActor&gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt;\n{\n};\n\n/* 554 */\nstruct __cppobj std::_Tree&lt;std::_Tset_traits&lt;ActorRef&lt;IActor&gt;,std::less&lt;ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt;,0&gt; &gt; : std::_Tree_comp&lt;0,std::_Tset_traits&lt;ActorRef&lt;IActor&gt;,std::less&lt;ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 664 */\nstruct __cppobj std::set&lt;ActorRef&lt;IActor&gt;,std::less&lt;ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt; : std::_Tree&lt;std::_Tset_traits&lt;ActorRef&lt;IActor&gt;,std::less&lt;ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 304 */\nstruct __cppobj std::_Tree_val&lt;std::_Tree_simple_types&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt; : std::_Container_base0\n{\n  std::_Tree_node&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt;,void *&gt; *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 305 */\nstruct __cppobj std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt; &gt; : std::_Tree_val&lt;std::_Tree_simple_types&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt;\n{\n};\n\n/* 330 */\nstruct __cppobj std::_Tree_buy&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt; : std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt; &gt;\n{\n};\n\n/* 331 */\nstruct __cppobj std::_Tree_comp&lt;0,std::_Tmap_traits&lt;unsigned int,ActorRef&lt;IActor&gt;,std::less&lt;unsigned int&gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt;,0&gt; &gt; : std::_Tree_buy&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt;\n{\n};\n\n/* 334 */\nstruct __cppobj std::_Tree&lt;std::_Tmap_traits&lt;unsigned int,ActorRef&lt;IActor&gt;,std::less&lt;unsigned int&gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt;,0&gt; &gt; : std::_Tree_comp&lt;0,std::_Tmap_traits&lt;unsigned int,ActorRef&lt;IActor&gt;,std::less&lt;unsigned int&gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 597 */\nstruct __cppobj std::map&lt;unsigned int,ActorRef&lt;IActor&gt;,std::less&lt;unsigned int&gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt; : std::_Tree&lt;std::_Tmap_traits&lt;unsigned int,ActorRef&lt;IActor&gt;,std::less&lt;unsigned int&gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 285 */\nstruct __cppobj std::_Tree_val&lt;std::_Tree_simple_types&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt; : std::_Container_base0\n{\n  std::_Tree_node&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt;,void *&gt; *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 286 */\nstruct __cppobj std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt; &gt; : std::_Tree_val&lt;std::_Tree_simple_types&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt;\n{\n};\n\n/* 393 */\nstruct __cppobj std::_Tree_buy&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt; : std::_Tree_alloc&lt;0,std::_Tree_base_types&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt; &gt;\n{\n};\n\n/* 490 */\nstruct __cppobj std::_Tree_comp&lt;0,std::_Tmap_traits&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,AIZone *,std::less&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt;,0&gt; &gt; : std::_Tree_buy&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt;\n{\n};\n\n/* 513 */\nstruct __cppobj std::_Tree&lt;std::_Tmap_traits&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,AIZone *,std::less&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt;,0&gt; &gt; : std::_Tree_comp&lt;0,std::_Tmap_traits&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,AIZone *,std::less&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 564 */\nstruct __cppobj std::map&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,AIZone *,std::less&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt; : std::_Tree&lt;std::_Tmap_traits&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,AIZone *,std::less&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt;,0&gt; &gt;\n{\n};\n\n/* 706 */\nstruct World\n{\n  WorldVtbl *vfptr;\n  std::set&lt;ActorRef&lt;IPlayer&gt;,std::less&lt;ActorRef&lt;IPlayer&gt; &gt;,std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; m_players;\n  std::set&lt;ActorRef&lt;IActor&gt;,std::less&lt;ActorRef&lt;IActor&gt; &gt;,std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt; m_actors;\n  std::map&lt;unsigned int,ActorRef&lt;IActor&gt;,std::less&lt;unsigned int&gt;,std::allocator&lt;std::pair&lt;unsigned int const ,ActorRef&lt;IActor&gt; &gt; &gt; &gt; m_actorsById;\n  ILocalPlayer *m_localPlayer;\n  unsigned int m_nextId;\n  std::map&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,AIZone *,std::less&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;,std::allocator&lt;std::pair&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const ,AIZone *&gt; &gt; &gt; m_aiZones;\n};\n\n/* 259 */\nstruct ActorRef&lt;IPlayer&gt;\n{\n  IPlayer *m_object;\n};\n\n/* 1618 */\nstruct __cppobj ClientWorld : World\n{\n  ActorRef&lt;IPlayer&gt; m_activePlayer;\n  float m_timeUntilNextNetTick;\n};\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "448",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "geo10",
    "time": "Jun 25, 2020 at 18:49",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">What errors are in that header?</span>",
            "time": null
        },
        {
            "user": "geo10",
            "text": "<span class=\"comment-copy\">First error is: specializing class \"std::_Treenode&lt;std::pair&lt;const unsigned int, &lt;error-type&gt;&gt;, void*&gt;\" requires 'template&lt;&gt;' syntax</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, you need to include the std libs you need</p>\n<pre><code>#include &lt;xtree&gt;\n#include &lt;set&gt;\n#include &lt;map&gt;\n#include &lt;functional&gt;\n</code></pre>\n<p>Second you need to remove \"struct\" before all the variable declarations that aren't structs</p>\n<p>and third you should delete everything from this header you don't need, it's 90% garbage</p>\n<p>remove all instances of \"__cppobj\"</p>\n<p>You also need to define ActorRef, World &amp; WorldVtbl.</p>\n<p>I was able to remove 99% of errors by doing these things:</p>\n<pre><code>#include &lt;xtree&gt;\n#include &lt;set&gt;\n#include &lt;map&gt;\n#include &lt;functional&gt;\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n\nstruct IPlayer\n{\n\n};\n\nstruct ILocalPlayer\n{\n\n};\n\nstruct IActor\n{\n\n};\n\ntemplate &lt;class T&gt;\nclass ActorRef\n{\npublic:\n    IPlayer* m_object;\n};\n\nstruct AIZone\n{\n    \n};\n\nstruct WorldVtbl\n{\n\n};\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n\nstruct IPlayer;\nstruct ILocalPlayer;\n\nstruct std::_Tree_val&lt;std::_Tree_simple_types&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; : std::_Container_base0\n{\n    std::_Tree_node&lt;ActorRef&lt;IPlayer&gt;, void*&gt;* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct std::_Tree_val&lt;std::_Tree_simple_types&lt;ActorRef&lt;IActor&gt; &gt; &gt; : std::_Container_base0\n{\n    std::_Tree_node&lt;ActorRef&lt;IActor&gt;, void*&gt;* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct std::_Tree_val&lt;std::_Tree_simple_types&lt;std::pair&lt;unsigned int const, ActorRef&lt;IActor&gt; &gt; &gt; &gt; : std::_Container_base0\n{\n    std::_Tree_node&lt;std::pair&lt;unsigned int const, ActorRef&lt;IActor&gt; &gt;, void*&gt;* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct std::_Tree_val&lt;std::_Tree_simple_types&lt;std::pair&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, AIZone*&gt; &gt; &gt; : std::_Container_base0\n{\n    std::_Tree_node&lt;std::pair&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, AIZone*&gt;, void*&gt;* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct World\n{\n    WorldVtbl* vfptr;\n    std::set&lt;ActorRef&lt;IPlayer&gt;, std::less&lt;ActorRef&lt;IPlayer&gt; &gt;, std::allocator&lt;ActorRef&lt;IPlayer&gt; &gt; &gt; m_players;\n    std::set&lt;ActorRef&lt;IActor&gt;, std::less&lt;ActorRef&lt;IActor&gt; &gt;, std::allocator&lt;ActorRef&lt;IActor&gt; &gt; &gt; m_actors;\n    std::map&lt;unsigned int, ActorRef&lt;IActor&gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, ActorRef&lt;IActor&gt; &gt; &gt; &gt; m_actorsById;\n    ILocalPlayer* m_localPlayer;\n    unsigned int m_nextId;\n    std::map&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, AIZone*, std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, AIZone*&gt; &gt; &gt; m_aiZones;\n};\n\nstruct ClientWorld : World\n{\n    ActorRef&lt;IPlayer&gt; m_activePlayer;\n    float m_timeUntilNextNetTick;\n};\n</code></pre>\n<p>My opinion is using a tool like <a href=\"https://github.com/ReClassNET/ReClass.NET\" rel=\"nofollow noreferrer\">ReClass.NET</a> is much easier for reversing structures and exporting header files, you should give it a try and see if it fits your needs.</p>\n</div>",
            "votes": "1",
            "user": "GuidedHacking",
            "time": "Jul 9, 2020 at 2:14",
            "is_accepted": true,
            "comments": []
        }
    ]
}