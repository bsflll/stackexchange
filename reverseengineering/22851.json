{
    "title": "IDA: apply function parameter as struct pointer",
    "link": "https://reverseengineering.stackexchange.com/questions/22851/ida-apply-function-parameter-as-struct-pointer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the following function <code>foo</code></p>\n<pre><code>.text:0000000000401110 foo             proc near\n.text:0000000000401110\n.text:0000000000401110 var_8           = qword ptr -8\n.text:0000000000401110\n.text:0000000000401110                 push    rbp\n.text:0000000000401111                 mov     rbp, rsp\n.text:0000000000401114                 mov     [rbp+var_8], rdi\n.text:0000000000401118                 mov     rax, [rbp+var_8]\n.text:000000000040111C                 mov     ecx, [rax]\n.text:000000000040111E                 mov     rax, [rbp+var_8]\n.text:0000000000401122                 add     ecx, [rax+4]\n.text:0000000000401125                 movsxd  rax, ecx\n.text:0000000000401128                 mov     rdx, [rbp+var_8]\n.text:000000000040112C                 add     rax, [rdx+8]\n.text:0000000000401130                 pop     rbp\n.text:0000000000401131                 retn\n.text:0000000000401131 foo             endp\n</code></pre>\n<p>which is actually</p>\n<pre><code>struct S {\n    int a;\n    int b;\n    long long c;\n};\n\nint foo(struct S *s) {\n    return s-&gt;a + s-&gt;b + s-&gt;c;\n}\n</code></pre>\n<p>I've defined the struct <code>S</code> in IDA (via Shift-F9/Ins...), how can I specify that <code>rdi</code> is the pointer to the base of the struct, so that the disassembly becomes something like this</p>\n<pre><code>...\n.text:0000000000401118                 mov     rax, [rbp+var_8]\n.text:000000000040111C                 mov     ecx, [p0.a]\n.text:000000000040111E                 mov     rax, [rbp+var_8]\n.text:0000000000401122                 add     ecx, [p0.b]\n.text:0000000000401125                 movsxd  rax, ecx\n.text:0000000000401128                 mov     rdx, [rbp+var_8]\n.text:000000000040112C                 add     rax, [p0.c]\n...\n</code></pre>\n<p>There is a <a href=\"https://reverseengineering.stackexchange.com/questions/3148/ida-setting-a-register-as-a-basepointer-to-struct\">similar question</a> but it applies for the case where, for example <code>rbx</code> is the base pointer and fields are accessed via <code>[rbx+offset]</code>. In my case, <code>rdi</code> is the base pointer but fields are not accessed via <code>[rdi+offset]</code>.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "180",
    "tags": [
        "ida",
        "struct"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Dec 28, 2019 at 1:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you code seems to be un-optimized, you have to manually follow the memory access manually. In your case, you have to apply this structure offset (T) at 0x000000000040111C (rax), 0x0000000000401122 (rax) and 0x000000000040112C (rdx). AFAIK, there's no easy way to define a local variable as a pointer to a structure and automatically show reference to the structure. Unless you are working with hexrays decompiler.</p>\n</div>",
            "votes": "1",
            "user": "wisk",
            "time": "Dec 28, 2019 at 2:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}