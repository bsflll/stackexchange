{
    "title": "Pointer to a structure and TEST operation",
    "link": "https://reverseengineering.stackexchange.com/questions/6218/pointer-to-a-structure-and-test-operation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following assembly line </p>\n<pre><code> test byte ptr [esp + 44h], 1\n jmp SomeCode; \n .....\n</code></pre>\n<p>from a further analysis, I know that esp points at wShowWindow of the STARTUPINFO structure. \nI have written the following: </p>\n<pre><code>STARTUPINFO *esp_pointer;\nesp_pointer -&gt; wShowWindow; \nif(*(esp_pointer) != 1){\n    SomeCode;\n}\n</code></pre>\n<p>Is that a right transformation in C ? What do you mean?</p>\n<p>best regards, </p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "133",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Sep 10, 2014 at 17:41",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">esp_pointer -&gt; wShowWindow is located at 0x30 0r 0n48 not at either 0x44 or at 0n44  you have some wrong analysis also when doing STARTUPINFO *esppointer you need to allocate space for the struct with some malloc etc prior to accessing members else you end up with a crash      STARTUPINFOA *psi = ( STARTUPINFOA * ) calloc(1,sizeof(STARTUPINFOA));     psi-&gt;cb = sizeof(STARTUPINFO);     if(psi-&gt;wShowWindow )     {         printf(\"foo\");     }</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li>Don't try to translate assembly to C line by line. You can't.</li>\n<li>The assembly you posted is probably wrong. A <code>jmp</code> is an unconditonal jump; what follows after a <code>test</code> instruction is normally a <code>jz</code> or <code>jnz</code> which jump depending on the result of the test.</li>\n<li>You say <code>esp</code> points at <code>wShowWindow</code>. That would mean <code>[esp+44h]</code> points at something way behind the structure, which makes no sense. Maybe what you wanted to say is \"I know i have a <code>STARTUPINFO</code> structure on the stack at 14h, so <code>[esp+44h]</code> should be the <code>wShowWindow</code> component\" ?</li>\n<li>If you're right with <code>STARTUPINFO</code> somewhere on the stack - it can't be directly at <code>[esp]</code>, as mentioned -  please make sure <code>[esp+44h]</code> is <code>wShowWindow</code>, not <code>dwFlags</code>, as the <code>test</code> operation would make much more sense with the <code>dwFlags</code> bitmap than an integer.</li>\n</ul>\n<p>All that said, <code>test</code> tests if a bit is set; a compare would be a <code>cmp</code>. So if you really really want an example in C, it would look something like</p>\n<pre><code>STARTUPINFO p;\np=(STARTUPINFO *) ((char *) esp+0x14);   // this assumes the structure starts \n                                         // at offset 0x14 from esp\nif (p-&gt;wShowWindow &amp; 1) {                // access the wShowWindow component at offset\n                                         // 0x30 in the structure, which is 0x44 from esp\n    ....\n}\n</code></pre>\n<p>Note i didn't include the <code>SomeCode</code>, as the \"jump there\" might just mean \"skip some instructions\", and your unconditional jump seems to be wrong anyways.</p>\n<p>Please, when posting a question next time, be a bit more precise in what you ask and what you copy/paste.</p>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Sep 11, 2014 at 7:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}