{
    "title": "IDA: Inconsistency between mouse-over value and stored value?",
    "link": "https://reverseengineering.stackexchange.com/questions/8279/ida-inconsistency-between-mouse-over-value-and-stored-value",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to RE a program which has a limit of <em>n</em> iterations.\nI already found the <em>interesting</em> part in the disasembled code with static analysis and analysis with the local win32 debugger.</p>\n<p>There seems to be a correlation between being BELOW / ABOVE the limit\nand a number.</p>\n<p>While I'm below the limit the value is set to 1.0. \nIf I go above the limit of the value keeps being 0.0</p>\n<p>A mouseover tells me the \"magic\" value.</p>\n<p><img alt=\"mouse over during debug\" src=\"https://i.sstatic.net/qzVGf.png\"/></p>\n<p>Now I have two problems:</p>\n<ol>\n<li><p>I would like to find out WHAT writes to that address. My idea was to set a write-trace on it - but see no. 2</p></li>\n<li><p>I cannot find the value in memory.\nRight click -&gt; \"jump in new window\" leads me to <code>0x0072EB88</code>\n<strong>The stored value there is 0 altrough IDA is showing me a 1.0 (see first image)</strong></p></li>\n</ol>\n<p><img alt=\"stored value\" src=\"https://i.sstatic.net/nG5mp.png\"/></p>\n<p><strong>Manual check</strong></p>\n<p>ESP = <code>0x0072EB40</code></p>\n<p>var_838 = <code>-0x838</code></p>\n<p><img alt=\"ESP address\" src=\"https://i.sstatic.net/H75m0.png\"/></p>\n<p>putting it all together: \n<code>0x0072EB40</code> + <code>0x880</code> - <code>0x838</code> =&gt; <code>0x0072EB88</code></p>\n<p>Can someone help me out please and tell me what my error is?</p>\n<p>Thanks in advance.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "76",
    "tags": [
        "ida"
    ],
    "user": "vigri",
    "time": "Feb 19, 2015 at 9:39",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">The floating point number <code>1.0</code> is represented in memory as <code>0x3F800000</code> (see <a href=\"http://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html\" rel=\"nofollow noreferrer\">babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html</a>).</span>",
            "time": null
        }
    ],
    "answers_data": []
}