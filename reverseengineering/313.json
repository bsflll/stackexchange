{
    "title": "What is your vulnerability discovery process? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/313/what-is-your-vulnerability-discovery-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n                                As it currently stands, this question is not a good fit for our Q&amp;A format. We expect answers to be supported by facts, references, or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question can be improved and possibly reopened, <a href=\"/help/reopen-questions\">visit the help center</a> for guidance.\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2013-03-28 12:24:11Z\">12 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>I myself am a static analysis guy; I mostly gave up dynamic reverse engineering ten years ago.  So these days, my process is usually to locate where my input enters the module that I am interested in, and then perform heavy static analysis to determine how my input manipulates the state of the program.  I have found some neat bugs such as information disclosure this way; however, I am undoubtedly a lot slower than my counterparts who employ a lot of dynamic analysis and dynamic input generation (e.g., randomized fuzzing).  </p>\n<p>What steps do you usually take to discover vulnerabilities in closed-source programs?</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "811",
    "tags": [
        "vulnerability-analysis"
    ],
    "user": "Rolf Rolles",
    "time": "12 years ago",
    "comments": [
        {
            "user": "JMcAfreak",
            "text": "<span class=\"comment-copy\">This sounds very much like a poll, which generally doesn't go over well on StackExchange sites.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is how I typically do it, although it largely depends on the target/project and it's only how I like to do it myself:</p>\n<ul>\n<li>Start (probably dumb) fuzzing the application as soon as you have the target.</li>\n<li>Meanwhile, statically analyse the application in order to understand how it works and, maybe, to find low hanging fruit vulnerabilities.</li>\n<li>Try to understand if you can make any smarter your fuzzer once you have enough structures and functions discovered in IDA.</li>\n<li>If you have a hit in your fuzzer, discover the root cause of the problem and if it could be exploitable. If it isn't, nevertheless, it's worth checking in deep the area where the crash happened as that crash is a probable indicator of an interesting area to focus on.</li>\n<li>If you have a hit while doing static analysis, try to write a simple trigger for it.</li>\n<li>Focus on the part where the bug exists to continue statically analysing.</li>\n<li>Once you have 1 true vulnerability found via either by fuzzing or statically analysis, write rules/scripts to find similar vulnerabilities.</li>\n<li>Possibly write an exploit for it and go back to 2.</li>\n<li>When tired of finding such vulnerabilities and after understanding the inner workings of the application, try to find logical flaws.</li>\n</ul>\n<p>PS: Reading documentation is also a good way to find <a href=\"http://seclists.org/fulldisclosure/2012/Apr/204\">some vulnerabilities</a>, as well as reading change logs, diff patches, commit messages, etc... if you have access to source code (sometimes you can have partial access to the target's source code, even for closed source applications).</p>\n<p>Just my 2 cents.</p>\n</div>",
            "votes": "6",
            "user": "joxeankoret",
            "time": "Mar 27, 2013 at 18:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ixje",
                    "text": "<span class=\"comment-copy\">could you elaborate a bit more on \"write rules/scripts to find similar vulnerabilities\". Say you found a vulnerability through fuzzing what kind of rules are you going to write? Do you mean something like limiting the parameter input search space for your fuzzer or?</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">I mean creating rules/scripts for finding similar patterns to the code where you found a vulnerability, in the binary code. It's very probably that there will be more vulns/bugs similar to the one you found. Although not a vulnerability, this can give an <a href=\"http://joxeankoret.com/blog/2012/08/05/simple-bug-finding-tools-fugue-i/\" rel=\"nofollow noreferrer\">example</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}