{
    "title": "Put encrypted code blocks back as unencrypted in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/2970/put-encrypted-code-blocks-back-as-unencrypted-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I have some encrypted data in this executable. IDA couldn't do much with it, so it defined it as arrays. Now I know how to decrypt this data, and it has some encrypted code. I could of course, put the encrypted data into some separate file, run the decryption on it, and then let IDA process it, but then it looses connection to the original executable.</p>\n<p>Is it possible to replace the encrypted data 1:1 with the decrypted one, so I can let IDA process it, in the context of the executable?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "decryption"
    ],
    "user": "Devolus",
    "time": "Oct 27, 2013 at 15:25",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">possible duplicate of <a href=\"http://reverseengineering.stackexchange.com/questions/2943/paste-hex-bytes-into-ida-pro-hex-view\">Paste hex bytes into IDA Pro Hex View</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Depending on the layout of the binary, where the data you want to modify is and how complex the transformation is I would pick one of the following solutions:</p>\n<ol>\n<li><p>If the transformation is simple and can be trivially done in a hex editor using one of its built in operations I would open the original input file in the hex editor, run the transformation and then in IDA select File, Load File, Reload the Input file.</p></li>\n<li><p>If the transformation is complex and/or results in a new segment being mapped I would create an IDC or IDAPython script which does the transformation for you. The <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow\">documentation for IDAPython</a> can be found on hex rays website. The <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/162.shtml\" rel=\"nofollow\">documentation for IDC</a> can also be found on their website. They also have a small set of <a href=\"https://www.hex-rays.com/products/ida/support/tutorials/idc/index.shtml\" rel=\"nofollow\">IDC tutorials</a> on there. IDC functions you're particularly interested in are: <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/299.shtml\" rel=\"nofollow\">AddSeg()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1321.shtml\" rel=\"nofollow\">Qword()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/252.shtml\" rel=\"nofollow\">Dword()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/251.shtml\" rel=\"nofollow\">Word()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/249.shtml\" rel=\"nofollow\">Byte()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/679.shtml\" rel=\"nofollow\">PatchDword()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/714.shtml\" rel=\"nofollow\">PatchWord()</a>, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/713.shtml\" rel=\"nofollow\">PatchByte()</a>.</p></li>\n</ol>\n</div>",
            "votes": "4",
            "user": "Peter Andersson",
            "time": "Oct 27, 2013 at 16:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Devolus",
                    "text": "<span class=\"comment-copy\">Thanks for that overview. The decrypted code is position independent and doesn't need any new segments, so I try the idea with the memory snapshot first, as it sounds simpler. I guess in the long run, learning the python interface might have benefits though. :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just debug the file in IDA itself and <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1470.shtml\" rel=\"nofollow\">take a memory snapshot</a> once the data is decrypted.</p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Oct 27, 2013 at 16:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Devolus",
                    "text": "<span class=\"comment-copy\">Can the address be adjusted? Because the block is allocated and then decrypted to that memory, so the snapshot would not have the original adress.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">I like this suggestion.. Why even bother doing it if you can just have the program do the work for you. I guess if the binary isn't debuggable by IDA you'd need to drop down to the harder methods. There's also an element of proving to yourself that you actually understand the transformation.</span>",
                    "time": null
                }
            ]
        }
    ]
}