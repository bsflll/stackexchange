{
    "title": "How to have arrays in IDA's IDC",
    "link": "https://reverseengineering.stackexchange.com/questions/30180/how-to-have-arrays-in-idas-idc",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So to cut straight to the chase - I'm lazy, IDA is mysterious, I need to use IDA arrays in\nmy IDC code for convenience. Because IDC is like C(++) in its syntax I figured I could do:</p>\n<pre><code>auto lala[4] = {0,1,2,3};\n</code></pre>\n<p>But that doesn't work. Neither do round or square brackets.\nTrying to do lala[0] produces this output:</p>\n<pre><code>Cannot use [] operator on scalars\n</code></pre>\n<p>What gives?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "630",
    "tags": [
        "ida",
        "idc"
    ],
    "user": "swaggg",
    "time": "Mar 25, 2022 at 12:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDC is closer to C than C++ but both limited in some ways and more flexible in others than C. It supports several <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/161.shtml\" rel=\"nofollow noreferrer\">variable types</a> but arrays is not one of them:</p>\n<blockquote>\n<p>A variable can contain:</p>\n<ul>\n<li>LONG: a 32-bit signed long integer (64-bit in 64-bit version of IDA)</li>\n<li>INT64: a 64-bit signed long integer</li>\n<li>STR: a character string</li>\n<li>FLOAT: a floating point number (extra precision, up to 25 decimal digits)</li>\n<li>OBJECT: an object with attributes and methods\n(a concept very close to C++ class) more</li>\n<li>REF: a reference to another variable</li>\n<li>FUNC: a function reference</li>\n</ul>\n</blockquote>\n<p>However, you can use <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1578.shtml\" rel=\"nofollow noreferrer\">slice syntax</a> with objects to simulate arrays:</p>\n<pre><code>auto x = object();\nx[0] = value1;\nx[1] = \"value2\";\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 25, 2022 at 15:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">Thanks! I actually needed an easy way to initialise these arrays. Given a list of bytes, I wanted to be able to just put them inside braces et voila but I guess that isn't possible. I ended up using regex instead.</span>",
                    "time": null
                },
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">I looked up your profile. It's really cool you work for Hex Rays. Maybe you guys could implement arrays at some point too ;).</span>",
                    "time": null
                }
            ]
        }
    ]
}