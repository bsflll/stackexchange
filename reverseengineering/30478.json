{
    "title": "Capstone Disassembler to Extract OpCode from Malware and Benign Executables in C++",
    "link": "https://reverseengineering.stackexchange.com/questions/30478/capstone-disassembler-to-extract-opcode-from-malware-and-benign-executables-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The project that I am trying to develop has as a vital component, specifically a machine learning based malware detection system. The way in which I decided to teach the detection system in order to distinguish between malware and benign files is by feeding it the mnemonics that will be extracted from the executables.</p>\n<p>I came across two disassemblers, namely, capstone and LLVM-MC. I tried to search about how to extract the opcode but I did not manage to extract them. If it is possible, I would like to even use IDA, but still I do not know how to write such a script to use it in C++.</p>\n<p>Could you please help me with a script in which it will take as input a path to an executable and outputs a text file in which all the data about that certain executable is extracted, and then I will just tidy up that file for removing everything but the mnemonics and their arguments?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "118",
    "tags": [
        "c++",
        "disassemblers",
        "executable"
    ],
    "user": "odyssey",
    "time": "Jun 6, 2022 at 14:53",
    "comments": [],
    "answers_data": []
}