{
    "title": "Are arguments of the called function part of its stack frame in Intel x86?",
    "link": "https://reverseengineering.stackexchange.com/questions/11916/are-arguments-of-the-called-function-part-of-its-stack-frame-in-intel-x86",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hi everyone and sorry for the silly question.\nLet's say that \"main\" calls an \"add\" function (pseudocode):</p>\n<p>main {\n add(5,10)\n}</p>\n<p>The stack would be something similar:</p>\n<pre><code>...main...\n|  10   |\n|  05   |\n|  RET  |\n|  EBP  |\n...add...\n</code></pre>\n<p>The stack frame of \"add\" starts from EBP or include also 10, 5 (args) and RET?\nIn a CDECL calling convention the caller (main) is in charge of cleaning the stack after the \"add\" function returns. I suppose clean means \"remove\" (by increasing esp) the arguments from the stack, not the local vars of the \"add\" function, right?</p>\n<p>Thanks a lot</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "333",
    "tags": [
        "x86",
        "stack"
    ],
    "user": "Claudio",
    "time": "Feb 2, 2016 at 0:44",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">locals are cleaned by the called function arguments are cleaned up by the callee in __cdecl</span>",
            "time": null
        },
        {
            "user": "Claudio",
            "text": "<span class=\"comment-copy\">\"arguments are cleaned up by the callee in __cdecl\" you mean by the caller?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">add(5,10) add(int x , int y ) {a,b,c,d ...x ,y} abcd will be cleaned by add() and 5 ,10 will be cleaned by the parent after returning from the call  the function that calls in your case main is the callee or if you prefer the caller</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The short answer is sometimes.  Depending on the calling convention and the compiler, some arguments may be stored in registers rather than on the stack.  See this wikipedia article: <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#Microsoft_x64_calling_convention\" rel=\"nofollow\">https://en.wikipedia.org/wiki/X86_calling_conventions#Microsoft_x64_calling_convention</a></p>\n<p>To be a little more clear, if the caller pushes an argument on the stack, the caller is typically responsible for cleaning it up.  According to the C specification, a function does not know how many arguments are being passed in to the function (consider functions like printf() and friends)  The code that knows how many arguments are actually on the stack and how to deal with them is the calling function.  All this is convention, however. C makes very few requirements for how this all actually ties together on any given physical machine.</p>\n<p>In practical code, you will usually see sub ESP, in the calling function.</p>\n</div>",
            "votes": "1",
            "user": "BitShifter",
            "time": "Feb 4, 2016 at 18:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}