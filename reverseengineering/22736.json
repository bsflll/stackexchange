{
    "title": "Help with reversing decryption in assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/22736/help-with-reversing-decryption-in-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've used x64dbg to work out decryption in a particular program. I've found where it changes the encrypted material into readable text but can't work out the best way to use this information to convert multiple files. </p>\n<p>Is it a standardized encryption method? (eg. blowfish/aes) \n<a href=\"https://i.sstatic.net/1NHhk.png\" rel=\"nofollow noreferrer\"><img alt=\"Assembler\" src=\"https://i.sstatic.net/1NHhk.png\"/></a></p>\n<p>It basically copies the file to memory then cycles through this (and one other cycle above it).</p>\n<p>Thanks!</p>\n<p>Addit 15/12/2019:\n<strong>OUTER FUNCTION</strong>\n<a href=\"https://i.sstatic.net/DA8WH.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/DA8WH.png\"/></a></p>\n<p>Ouput of signsrch:</p>\n<pre><code>  offset   num  description [bits.endian.size]\n  --------------------------------------------\n  0002b542 2249 TEA1_DS [32.le.4]\n  00059090 2065 Haval init [32.le.32&amp;]\n  00059090 919  Blowfish bfp table [32.le.72]\n  000590b0 1054 Haval hash pass2 [32.le.128&amp;]\n  000590e0 921  Blowfish ks0 table [32.le.1024]\n  000590e0 2335 Blowfish_s_init [32.le.4096]\n  00059138 2067 Haval mc3 [32.le.128]\n  00059198 2219 HAVAL2_DS [32.le.32]\n  000591b8 2069 Haval mc4 [32.le.128]\n  00059218 2217 HAVAL1_DS [32.le.32]\n  00059238 2071 Haval mc5 [32.le.128]\n  000594e0 923  Blowfish ks1 table [32.le.1024]\n  000598e0 925  Blowfish ks2 table [32.le.1024]\n  00059ce0 927  Blowfish ks3 table [32.le.1024]\n  007b1a86 2545 anti-debug: IsDebuggerPresent [..17]\n  007b7e07 1038 padding used in hashing algorithms (0x80 0 ... 0) [..64]\n</code></pre>\n<p>It must be blowfish. Now to find the key!!!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "533",
    "tags": [
        "decryption"
    ],
    "user": "Richard S",
    "time": "Dec 15, 2019 at 1:53",
    "comments": [
        {
            "user": "Dvd848",
            "text": "<span class=\"comment-copy\">See if this helps: <a href=\"https://reverseengineering.stackexchange.com/questions/18673/how-to-identify-known-encryption-algorithm\" title=\"how to identify known encryption algorithm\">reverseengineering.stackexchange.com/questions/18673/â€¦</a></span>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">Can you post the cycle above? Also, checking the memory reads at the constants <code>48 448 848 C48</code> would be very valuable. Lookup tables usually make spotting the respective crypto algorithm easy. I have a feeling this is AES or AES-related.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is probably Blowfish.</p>\n<p>Googling the constants \"0x448 0xC48 crypto\" lead to this post:</p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/19042/trying-to-identify-block-of-code-which-generates-256-bit-key\">Trying to identify block of code which generates 256 bit key</a></p>\n<p>where someone in the comments wrote</p>\n<pre><code>googling the constants 0xc48, 0x848 and 0x448 is a good idea.\nrohitab.com/discuss/topic/36066-blowfish relates this to blowfish somehow\n</code></pre>\n<p>and that link has code that looks very similar:</p>\n<p><a href=\"http://www.rohitab.com/discuss/topic/36066-blowfish/\" rel=\"nofollow noreferrer\">http://www.rohitab.com/discuss/topic/36066-blowfish/</a></p>\n<p>(search for <code>C48</code> there).</p>\n<p>The only oddity is that the author of that other post says he is sure it is AES and he said he could decrypt some data using AES. I don't know how to consolidate both ideas, but it's probably either and given the similar disassemblies I'd say Blowfish.</p>\n<p>Doesn't look like AES to me either but I had some AES-related crypto before that looked a bit like this - Blowfish is way more convincing.</p>\n</div>",
            "votes": "2",
            "user": "Johann Aydinbas",
            "time": "Dec 15, 2019 at 1:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Richard S",
                    "text": "<span class=\"comment-copy\">That is really helpful!! See above edited post. It must be blowfish. Now I just have to work out where the key and IV is in assembly :-) At least I know what I'm looking for now.</span>",
                    "time": null
                }
            ]
        }
    ]
}