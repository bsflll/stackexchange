{
    "title": "Where and how is variable entanglement obfuscation used?",
    "link": "https://reverseengineering.stackexchange.com/questions/2489/where-and-how-is-variable-entanglement-obfuscation-used",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know the exact name of this obfuscation, so I call it <strong>variable entanglement</strong> for now.</p>\n<p>I already saw this principle in a few binaries but I never found a complete description of what was possible and what was not.</p>\n<p>The idea is to confuse the reverser by mixing two values together and performing the operations on the mixed values. Once all operations have been performed, one can recompose the results by some simple operations. For example, a naive example could be:</p>\n<pre><code>int foo (int a, int b) {\n  long long x = 0;\n  // Initial entanglement\n  x = (a &lt;&lt; 32) | b;\n\n  // Performing operations on both variables\n  x += (12 &lt;&lt; 32) &amp; 72;\n  ...\n\n  // Final desentanglement\n  a = (int) (x &gt;&gt; 32);\n  b = (int) (((int) -1) &amp; x);\n} \n</code></pre>\n<p>Of course, here, we mix everything in one variable (and I did not take care of <em>details</em> such as the overflows). But, you can imagine way more complex initial entanglement where you re-split everything in two variables (or more), <em>e.g.</em> by xoring them together. </p>\n<p>Operations such as addition, multiplication, ... have to be redefined for this new format, so it can mislead the reverser.</p>\n<p>My question now, does anyone know about different such schema of variable entanglement (the one I gave is really basic) ? And, maybe, can give pointers or publication about it ?</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "367",
    "tags": [
        "obfuscation",
        "whitebox-crypto"
    ],
    "user": "perror",
    "time": "Jul 18, 2013 at 1:03",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Is this actual source or is this something a decompiler spat out (or you created based on disassembly)?</span>",
            "time": null
        },
        {
            "user": "newgre",
            "text": "<span class=\"comment-copy\">X is uninitialized. Shouldn't it be | b instead of &amp; b? Also, long is not necessarily double the size of int. Why not post a working example? That might make it easier to give a meaningful answer to your question.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">In fact, this is pure <i>junk</i>. It is just here to illustrate the idea. It won't even compile. I have some examples in assembly (x86+SSE), but they are not really explicit and easy to understand.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">@newgre: Thanks noticing all these errors (sorry to not have fixed this at first, I was busy doing something else...).</span>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">I don't know about publications that explore this technique specifically, but JBCO does a weak form of this (<a href=\"http://www.sable.mcgill.ca/publications/papers/2007-1/batchelder-cc2007.pdf\" rel=\"nofollow noreferrer\">sable.mcgill.ca/publications/papers/2007-1/â€¦</a>).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not sure whether this is along the lines you're looking for (and quite possibly you've already figured out all of this and more), but here's a crude formalization and then some implementation thoughts.  Conceptually, this tries to separate what it <em>means</em> to entangle several values from how entangled values are <em>represented</em>.  </p>\n<h3>Formalization</h3>\n<p>Conceptually, entangled values can be thought of as <em>aggregates</em> where the different components retain their values, don't interfere with each other, and can be independently extracted.  A convenient way to think of such aggregates is as <em>n</em>-tuples of values; for simplicity I assume <em>n</em> = 2 here.  Also, I assume that we have operations to construct tuples from a collection of values, and to extract the component values from a tuple.</p>\n<p>We now need to be able to carry out operations on tuples.\nFor this, for each operation <strong>op</strong> in the original program we now have 2 versions: <strong>op1</strong>, which operates on the first component of a 2-tuple, and <strong>op2</strong>, which operates on the second component:</p>\n<blockquote>\n&lt;a1,b1&gt; <b>op1</b> &lt;a2,b2&gt; = if (b1 == b2) then &lt;(a1 <b>op</b> a2), b1&gt; else undefined<br/>\n&lt;a1,b1&gt; <b>op2</b> &lt;a2,b2&gt; = if (a1 == a2) then &lt;a1, (b1 <b>op</b> b2)&gt; else undefined<br/>\n</blockquote>\n<p>Finally (and this is where the obfuscation comes in), we need a way to encode tuples as values and decode values into tuples.  If the set of values is S, then we need two functions <strong>enc</strong> and <strong>dec</strong> that must be inverses of each other:</p>\n<blockquote>\n<b>enc</b>: S x S --&gt; S  (encode pairs of values as a single entangled value)<br/>\n<b>dec</b>: S --&gt; S x S  (decode an entangled value into its components)<br/>\n<p>\n<b>enc</b>(<b>dec</b>(x)) = x   for all x<br/>\n<b>dec</b>(<b>enc</b>(x)) = x   for all x\n</p></blockquote>\n<p>Examples: </p>\n<ul>\n<li><p><strong>enc</strong> takes a pair  of 16-bit values and embeds them into a 32-bit value w such that x occupies the low 16 bits of w and y occupies the high 16 bits of w; <strong>dec</strong> takes a 32-bit value and decodes them into a pair  where x is the low 16 bits and y is the high 16 bits.</p></li>\n<li><p><strong>enc</strong> takes a pair &lt;x,y&gt; of 16 bit values and embeds them into a 32-bit word w such that x occupies the even-numbered bit positions of w and y occupies the odd-numbered bit positions of w (i.e., their bits are interlaced); <strong>dec</strong> takes a 32-bit value w and decodes them into a pair &lt;x,y&gt; such that x consists of the even-numbered bits of w and y consists of the odd-numbered bits of w.</p></li>\n</ul>\n<h3>Implementation considerations</h3>\n<p>From an implementation perspective, we'd like to be able to perform operations directly on encoded representations of values.  For this, corresponding to each of the operations <strong>op1</strong> and <strong>op2</strong> above, we need to define \"encoded\" versions <b>op1*</b> and <b>op2*</b> that must satisfy the following soundness criterion:</p>\n<blockquote>\n<p>for all x1, x2, and y: x1 <b>op1*</b> x2 = y  IFF  <b>enc</b>( <b>dec</b>(x1) <b>op1</b> <b>dec</b>(x2) ) = y</p>\n</blockquote>\n<p>and similarly for <b>op2*</b>.</p>\n<p>A lot of details are omitted (mostly easy enough to work out), and this basic approach could be prettified in various ways, but I don't know whether this is along the lines you were asking for and also whether maybe this is pretty straightforward and you've already worked it all out for yourself.  Anyway, I hope this is useful.</p>\n<hr/>\n<p>From @perror's comment (below) it seems clear that the formalization above is not powerful enough to capture the obfuscation he has in mind (though it might be possible to get a little mileage from generalizing the encoding/decoding functions <strong>enc</strong> and <strong>dec</strong>).</p>\n<p>I had forgotten about this paper, which discusses a transformation that seems relevant (see Sec. 6.1, \"Split variables\"):</p>\n<blockquote>\n<p>Christian Collberg, Clark Thomborson, and Douglas Low. Breaking Abstractions and Unstructuring Data Structures. <em>IEEE International Conference on Computer Languages</em> (ICCL'98), May 1998. (<a href=\"http://www.cs.arizona.edu/~collberg/content/research/papers/collberg98breaking.pdf\" rel=\"nofollow\">link</a>)</p>\n</blockquote>\n</div>",
            "votes": "8",
            "user": "debray",
            "time": "Jul 18, 2013 at 13:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I think you perfectly defined the basic operators and formalized the context of it. But, the example I gave was probably too naive and, thus, a bit misleading. To give maybe a better example, what if you have <code>x=a^b</code> and <code>y=a^(~b)</code> and try to apply some operations on <code>a</code> and <code>b</code> through operations on <code>x</code> and <code>y</code>. In this schema, the word <i>entanglement</i> is a bit more obvious I guess. I will try to dig a bit this schema and propose a full example. Finally, it is totally unrelated but are you Saumya Debray ? (I read several of his papers and I am a big fan! :))</span>",
                    "time": null
                },
                {
                    "user": "debray",
                    "text": "<span class=\"comment-copy\">I think I understand the subtleties of the obfuscation a little better now -- thanks!  I'll need to go think about that some more.  (On an unrelated note, my first name is indeed Saumya. :-)</span>",
                    "time": null
                },
                {
                    "user": "debray",
                    "text": "<span class=\"comment-copy\">@perror : the formalization I gave doesn't seem powerful enough to capture what you have in mind.  But meanwhile I remembered a paper by Collberg et al. that describes a transformation that may be relevant: please see the edited response above.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Yes, this is exactly what I was looking for ! Thanks ! So, it is called \"<i>split variables</i>\".</span>",
                    "time": null
                }
            ]
        }
    ]
}