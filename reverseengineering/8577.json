{
    "title": "Where can I learn about code instrumentation?",
    "link": "https://reverseengineering.stackexchange.com/questions/8577/where-can-i-learn-about-code-instrumentation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Currently I am learning about profiling parallel programs. All the profilers heavily use all kinds of instrumentations but this topic is not well explained. Do you know any good sources from which I could learn about instrumentation (static, binary, dynamic)?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "282",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "dynamic-analysis",
        "instrumentation"
    ],
    "user": "Kris",
    "time": "Mar 27, 2015 at 16:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Before jumping straight to interesting articles and sources I'll start by defining the key words, just in case.</p>\n<ul>\n<li><p><strong>Static analysis :</strong> consists in analyzing the target binary file without executing it. Hence the <code>static</code>. Such analysis can be used in order to build a first draft of the application's <strong>Control Flow Graph</strong>, <strong>Call Graph</strong>, ...\nFor example, building the <strong>CFG</strong> consists of cutting the code into <em>basic blocks</em> and then linking them using the branch targets (if they're not indirect branches). </p></li>\n<li><p><strong>Dynamic analysis :</strong> consists in inserting probes (function calls) around key areas of the binary, running the binary and dumping the probes' results. Such probes can be <strong>rdtsc</strong> instructions on x86, or any other hardware counter.\nFor example, dynamic analysis is used by <strong>Gprof</strong> to assess the amount of time spent in each function. Many other profilers such as <strong>VTune</strong>, <strong>MAQAO</strong>, <strong>DynInst</strong>, ... use dynamic analysis to locate hotspots.</p></li>\n</ul>\n<p>Both of these analyses can be applied to a binary file (meaning an executable program), and that's what we call binary analysis.\nOn the other hand, static analysis can be applied on source code as well as binary. <a href=\"http://en.wikipedia.org/wiki/Lint_%28software%29\" rel=\"nofollow\">Lint</a>, for example, performs static analysis in order to find buggy code constructs.</p>\n<p>There aren't many detailed references I can cite, rather a set of scientific publications which span the use and benefits of those techniques, along with some interesting algorithms. </p>\n<p>For static analysis I would recommend this collection of articles : <a href=\"http://www.springer.com/fr/book/9783642388552?cm_mmc=EVENT-_-BookAuthorEmail-_-&amp;wt_mc=event.BookAuthor.Congratulation\" rel=\"nofollow\">Static Analysis 20th International Symposium, SAS 2013, Seattle, WA, USA, June 20-22, 2012, Proceedings.</a> </p>\n<p>For dynamic analysis I would recommend you going through the publications around of <a href=\"http://maqao.org/\" rel=\"nofollow\">MAQAO</a>, <a href=\"http://www.dyninst.org/\" rel=\"nofollow\">DynInst</a>, <a href=\"https://silc.zih.tu-dresden.de/scorep-current/html/\" rel=\"nofollow\">ScoreP</a>, and <a href=\"https://www.cs.uoregon.edu/research/tau/news.php\" rel=\"nofollow\">TAU</a> </p>\n</div>",
            "votes": "4",
            "user": "yaspr",
            "time": "Mar 28, 2015 at 6:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}