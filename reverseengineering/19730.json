{
    "title": "XCHG RAX, RAX: 0x03, what does this code do and how does it work?",
    "link": "https://reverseengineering.stackexchange.com/questions/19730/xchg-rax-rax-0x03-what-does-this-code-do-and-how-does-it-work",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://rads.stackoverflow.com/amzn/click/1502958082\" rel=\"nofollow noreferrer\"><em>\"XCHG RAX, RAX\"</em></a> is a kind of riddle book that provides assembly code for you to reverse and undercover the meaning. Some of the examples calculate the Fibonacci sequence others bit-twiddle to toggle ASCII case. The <a href=\"https://www.xorpd.net/pages/xchg_rax/snip_03.html\" rel=\"nofollow noreferrer\">snippet (riddle) on <code>0x03</code></a> is,</p>\n<pre><code>sub  rdx,rax\nsbb  rcx,rcx\nand  rcx,rdx\nadd  rax,rcx\n</code></pre>\n<p>How does this code work, and what does it do?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "468",
    "tags": [
        "x86",
        "x86-64"
    ],
    "user": "Evan Carroll",
    "time": "Oct 26, 2018 at 18:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This code boils down to,</p>\n<pre><code>rax = min(rdx,rax)\nrdx = sub(rdx,rax) ; store the difference in rdx\n</code></pre>\n<p>That is essentially,</p>\n<ul>\n<li><code>rdx - 0</code>         (if <code>rdx</code> is the min)</li>\n<li><code>rdx - (rdx-rax)</code> (if <code>rax</code> is the min)</li>\n</ul>\n<p>The <code>sbb</code> and <code>and</code> here just move into <code>rcx</code> either</p>\n<ul>\n<li><code>0</code></li>\n<li><code>rdx-rax</code></li>\n</ul>\n<p>What determines what gets moved into <code>rcx</code>? That's determined by the result of the <code>sbb</code>. <strong>The <code>sbb</code> is doing <code>reg - reg - CF</code>.</strong> So you're either <code>AND</code>ing against all <code>1</code>s or all <code>0</code>s.</p>\n<p>This is how I reasoned about it</p>\n<pre><code># CF=0; rdx &gt; rax\nif ( rdx &gt; rax ) {\n  rdx -= rax\n  rcx = 0     ; all bits off\n\n\n              ; AND 0 (rcx) with anything (in rdx) is nop here.\n              ; ADDing 0 (rcx) to rax is a nop\n}\n\n\n\n# CF=1; rax &gt; rdx\nelse {\n  rdx -= rax\n  rcx = -1    ; all bits on\n\n\n  rcx = rdx   ; code is rcx &amp;= rdx\n              ; remember -1 &amp; x == x\n  rax += rcx\n\n}\n</code></pre>\n<p>Note regardless of the carry flag, <strong>this code will store the difference in <code>rdx</code></strong></p>\n</div>",
            "votes": "1",
            "user": "Evan Carroll",
            "time": "Oct 26, 2018 at 1:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}