{
    "title": "Protection of the source code of an ML model",
    "link": "https://reverseengineering.stackexchange.com/questions/32870/protection-of-the-source-code-of-an-ml-model",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to know how it would be possible to run an ML model in an offline setting securely? What I mean is, if the Python files and libraries are bundled as an <code>.exe</code> file (using libraries like <code>py2exe</code> or <code>PyInstaller</code>) for distribtion, is it possible to decompile the executable and obtain the source code if reverse engineered properly?</p>\n<p>From the research I've done, I've seen packages like <a href=\"https://github.com/rocky/python-uncompyle6/\" rel=\"nofollow noreferrer\">uncompyle6</a> get a lot of praise for being able to decompile executables properly. However, I have observed lesser decomplilation facilities for newer versions of Python, (specifically 3.8 and above). I tried to decompile the <code>.pyc</code> files which are just bytecode and they were decompiled pretty easily. However, I'm facing a harder time decompiling <code>.pyd</code> files. <br/><br/>\nWhat practices does the industry follow for this, to make reverse engineering <em>really</em> hard? Realistically, what measures can I take to make sure that the code does not get leaked/stolen? Thank you!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "60",
    "tags": [
        "python",
        "protection"
    ],
    "user": "woka",
    "time": "Apr 5, 2024 at 10:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If I understand your requirements correctly what you need is <a href=\"https://pyarmor.readthedocs.io/en/stable/topic/repack.html\" rel=\"nofollow noreferrer\">pyarmor</a> or something similar such as <a href=\"https://pyob.oxyry.com/\" rel=\"nofollow noreferrer\">oxyry</a> or <a href=\"https://pyobfuscate.com/pyd\" rel=\"nofollow noreferrer\">pyobfuscate</a>. These packages are able to obfuscate the code, which makes reversing harder. Pyarmor is also able to \"pack\" the obfuscated code with <a href=\"https://pyinstaller.org/en/stable/\" rel=\"nofollow noreferrer\">PyInstaller</a>. This means that after decompiling resulting executable the reverser will get obfuscated scripts, which are harder to comprehend. Please note that <a href=\"https://pyarmor.readthedocs.io/en/stable/topic/repack.html\" rel=\"nofollow noreferrer\">pyarmor</a> is licensed, and costs in a range of approximately <a href=\"https://order.mycommerce.com/product?vendorid=200089125&amp;productid=301044051&amp;currency=USD&amp;currencies=ALL\" rel=\"nofollow noreferrer\">$[50:160]</a>, depending on features you need.</p>\n<p>It should be noticed, that if the computer is able to execute some sequence of instructions, then this sequence is readable, so the only thing the obfuscation provides you is a time until your script is reversed.</p>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Apr 6, 2024 at 10:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}