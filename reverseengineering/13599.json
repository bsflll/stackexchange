{
    "title": "How to manipulate game which loads many dll's",
    "link": "https://reverseengineering.stackexchange.com/questions/13599/how-to-manipulate-game-which-loads-many-dlls",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am messing around with a game made with CryEngine. It's a MMORPG, but I found out that I can manipulate the X/Y/Z coordinates of my character through cheat engine. And I also found out that I can switch the targeted enemy by changing a value in my memory.</p>\n<p>This game is made up by a launcher.exe and many dlls. One of them is called CryGame.dll in which is most of the game code I guess.\nI made a pointer scan on the memory which saves the targeted enemy, but most pointer chains which store my desired memoryregion are saved in the CryGame.dll.</p>\n<p>Now to my question: Is it possible to inject code into the CryGame.dll or something similar in order to get this memory region and manipulate it (I am trying to make a simple bot for myself).</p>\n<p>Or does anybody have another idea how to get this value? Normally I would simply make a dll injection into the games process and manipulate it, but since this game is made up of dlls, I can't really hook functions, since dlls change address after every reboot of the game, right?</p>\n<p>Hope you understand what I meant, sorry for my enlgish.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dll-injection",
        "injection"
    ],
    "user": "QDA",
    "time": "Sep 27, 2016 at 10:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can certainly hook dlls similarly to how you'd hook any other function. To get the address of a dll function, you'd need to call two windows APIs.</p>\n<p>First, you'll need to get the address/handle (these are the same when discussing loaded modules) of the module you're trying to hook. A simple method to get that is to call either <code>LoadLibrary</code> or <code>GetModuleHandle</code>. The biggest difference is that <code>GetModuleHandle</code> will not load the dll in case it's not already loaded and will return <code>null</code> instead. You can probably load the dll yourself using <code>LoadLibrary</code>, so both APIs are valid.</p>\n<p>Second, you'll need to get the address of the function you're interested in. You could use the return value of either <code>GetModuleHandle</code> or <code>LoadLibrary</code> as the current position of the dll and calculate the specific offset of certain functions using it. Alternatively, you can call <code>GetProcAddress</code> to get the address of any function that's exported by the DLL.</p>\n<p>Keep in mind there are other ways to modify a behavior of a dll:</p>\n<ol>\n<li>You could patch the dll on disk (assuming there's no integrity checks employed).</li>\n<li>You can create a <a href=\"http://www.codeproject.com/Articles/16541/Create-your-Proxy-DLLs-automatically\" rel=\"nofollow\">DLL proxy</a> using DLL redirection.</li>\n</ol>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Sep 27, 2016 at 11:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "QDA",
                    "text": "<span class=\"comment-copy\">Wow thank you for your answer! Is there also a way to inject code at a specific location in a dll? For instance in an exe/process I can inject my code   to put the value of the hp into my C++ variable and keep the rest of the function as it is. Can I do something similar?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">No. You'll need to find some manual way to find those structures in memory every time the process is started. The address may be fixed and you may use that but those may change between versions. You could also find pointers to those structures and use those to find the actual object you're looking for.</span>",
                    "time": null
                }
            ]
        }
    ]
}