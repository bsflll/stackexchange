{
    "title": "How does serial number is checked in this crackme?",
    "link": "https://reverseengineering.stackexchange.com/questions/13691/how-does-serial-number-is-checked-in-this-crackme",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to <em>reverse engineer</em> a <strong>crackme</strong> exe. I have managed to find the function that checks serial number based on email input. So, <strong>4</strong> arguments are pushed to the stack (<code>esp</code>) which are the input values and their lengths.</p>\n<p>Illustration using IDA:</p>\n<p><img alt=\"\" src=\"https://i.sstatic.net/BYQYi.png\"/> </p>\n<p>Stack view using OllyDbg after function gets called:</p>\n<p><img alt=\"\" src=\"https://i.sstatic.net/zvyg8.png\"/></p>\n<p>Of course, I am able to make the program show <em>\"Serial is valid\"</em> using either <code>Run to cursor</code> command or setting <code>al</code> to <code>0x1</code>. However, my the aim is to somehow extract the correct serial number from program. My digging into <code>sub_402B10</code> gave that neither the length of email nor serial can be greater than 255(correct me if said wrong),</p>\n<p><img alt=\"\" src=\"https://i.sstatic.net/rrLEY.png\"/></p>\n<p>but nothing further. I only see there some xor's shiftings in loops. So my question is how can the <code>sub_402B10</code> function can return a boolean value considering there is not any <code>strcmp</code>-like function. Could someone provide useful information how the serial checking <em>can be</em> carried out by the program?</p>\n<p>I know this post will be closed or put on hold as  off-topic but I have spent my 4 days on going through every byte of <code>sub_402B10</code> and looking the changes in stack and registers. Please, at least, give a direction to me, I've ran out of keywords to search on google.</p>\n<p>Here is the <a href=\"https://drive.google.com/open?id=0B8FtaI54yR5mWWNVZWE5STlVTlpvUU5fMENvZF9fN0dLQ0hn\" rel=\"nofollow noreferrer\">executable file</a>. It has .txt format since google drive did't let me upload it otherwise.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "ollydbg",
        "crackme"
    ],
    "user": "Orkhan Alikhanov",
    "time": "Oct 10, 2016 at 23:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To summarize your current effort: So you have accomplished to find WHERE the magic is happening. But you didn't DEMYSTIFY the magic itself.</p>\n<p>In detail, you shouldn't expect a simple <code>strcmp</code>-like serial checking method. If you step back for a second, you will probably realize that a simple <code>strcmp</code>-like comparison would be far too easy, right? This is probably only the case in some basic tutorials like this <a href=\"http://www.behindthefirewalls.com/2013/09/how-to-get-serials-numbers-with-ollydbg.html\" rel=\"nofollow\">one</a>.</p>\n<p>To cite your question: </p>\n<blockquote>\n<p>So my question is how can the <code>sub_402B10</code> function can return a boolean\n  value considering there is not any <code>strcmp</code>-like function.</p>\n</blockquote>\n<p>That is exactly what is your job, so you have to understand all the <code>xor</code>, <code>shift</code> and <code>loop</code> magic and how it generates the final <code>0x1</code> output.</p>\n<p>So you have two choices to proceed:</p>\n<ol>\n<li>You can dive into the function and demystify it. What is actually\nthe job of solving a keygenme task.</li>\n<li>You can reformulate a second question, whith additionally insights\nof the <code>sub_402B10</code> routine. But be careful, you should show that you have\nalready invested some time and formulate concrete questions to the\nproceeding of the routine itself. If not, the question will probably be closed as a \"homework\" question.</li>\n</ol>\n<p>Perhaps you should take a look at some tutorials, to get a feeling of cracking a keygenme: <a href=\"http://resources.infosecinstitute.com/keygenning-part-i/\" rel=\"nofollow\">Infosec</a>.</p>\n<p>Hope this helps and points you in the right direction!</p>\n</div>",
            "votes": "2",
            "user": "knx",
            "time": "Oct 11, 2016 at 9:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Orkhan Alikhanov",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. It is not homework. It is from Kaspersky's expired crackme challenge. By the way is it possible for  program to not store the generated serial. Comparing them differently. I have given link to the executable. Check it out if you are interested.</span>",
                    "time": null
                }
            ]
        }
    ]
}