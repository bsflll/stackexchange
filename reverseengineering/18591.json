{
    "title": "How can I make sense of an Android NDK library?",
    "link": "https://reverseengineering.stackexchange.com/questions/18591/how-can-i-make-sense-of-an-android-ndk-library",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I'm currently trying to understand how an Android app interprets the data sent from a Bluetooth-enabled scale.</p>\n<p>Understanding the Java code was relatively easy. The code was obfuscated but I found out how the Bluetooth protocol works.</p>\n<p>However, the app use the Android NDK to call a native (armeabi) library that calculates data like body fat percentage from the data sent from the scale (weight, impedance...): libBodyfat.so</p>\n<p>I know what all the parameters are and what the C-functions return, but I don't know how they do it (what calculations are done).</p>\n<p>Apparently it's not possible to create readable code from a C library the way it's possible with Java. I found some tools that were recommended to work with C binaries (e.g. IDA) but they don't work with ARM binaries.</p>\n<p>What can I do to understand how the library works?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "android",
        "arm"
    ],
    "user": "akichii",
    "time": "Jun 23, 2018 at 21:13",
    "comments": [
        {
            "user": "Elian Kamal",
            "text": "<span class=\"comment-copy\">By readable C code are you referring to comprehensive C commands such as printf(), or are you referring to obfuscated ARM assembly output? Edit: noticed you wrote \"the way it's possible with Java\" and thus I believe that you're referring to C source code ouptut.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Any disassembler that supports the ARM for which the code was built, will be able to give you a readable representation. However, it takes more effort to make sense of these mnemonics produced by a disassembler than of C pseudo code. There are also free (of charge) and affordable decompilers for hobbyists which support ARM and produce pseudo code. Your question is right at the heart of what reverse code engineering is about.</span>",
            "time": null
        },
        {
            "user": "akichii",
            "text": "<span class=\"comment-copy\">Can you recommend some free ARM decompiler?</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">You can find online decompilation service at retdec.com (it is able to decompile 32 bit arm and as far as I can tell from your mentions of armeabi it should fit). It is open source and its sources are here : <a href=\"https://github.com/avast-tl/retdec\" rel=\"nofollow noreferrer\">github.com/avast-tl/retdec</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hope it is not too late. I will try to help you on this. I've been go through this and that to reverse engineer that exactly same library. <code>libBodyfat.so</code>. As @TheKalin answered, you will find few <code>.so</code> files in the folder. </p>\n<p>I found x86-64 is the easiest to read compare to others. Here are the tools that I used to reverse engineer the library:</p>\n<ol>\n<li><a href=\"https://www.hex-rays.com/products/ida/support/download_freeware.shtml\" rel=\"nofollow noreferrer\">IDA-free</a>. It will list the constant value nicely.</li>\n<li><a href=\"https://www.hopperapp.com/\" rel=\"nofollow noreferrer\">HopperApp</a>. I used it for disassemble and decompile to c-like language. It also able to disassemble ARM. You can try the demo version, but it will close the app for sometimes and you need to re-open it.</li>\n<li><a href=\"https://gregstoll.dyndns.org/~gregstoll/floattohex/\" rel=\"nofollow noreferrer\">Hex to Float Convt.</a>. Some constant values are used in the formula, I converted those values with this website.</li>\n<li>And websites to learn how the assembly instructions work.</li>\n</ol>\n<p>I manage to convert some of the functions (init &amp; body fat percentage) to javascript functions</p>\n<p>Here it is. I have not clean up the code yet. And please do let me know if there is mistakes or something that I need to improve.</p>\n<p><a href=\"https://gist.github.com/mamadcloud/95c8fe8f5816286f2ad62c81f937e6b6\" rel=\"nofollow noreferrer\">https://gist.github.com/mamadcloud/95c8fe8f5816286f2ad62c81f937e6b6</a></p>\n<p>Hope it is helpful.</p>\n</div>",
            "votes": "1",
            "user": "Muhammad Hasni",
            "time": "Jul 25, 2018 at 1:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "akichii",
                    "text": "<span class=\"comment-copy\">Wow, that's impressive! I couldn't even find out how to open the binary in IDA free. I'll test your implementation against the libBodyfat.so and report back later.</span>",
                    "time": null
                },
                {
                    "user": "Muhammad Hasni",
                    "text": "<span class=\"comment-copy\">sure. let me know if the result is incorrect or does not match with the library or there is something need to be improved. thanks!</span>",
                    "time": null
                },
                {
                    "user": "akichii",
                    "text": "<span class=\"comment-copy\">I think we were actually working on two different libraries. I looked at a library that exports the  <code>com.holtek.libHTBodyfat</code> namespace included in <a href=\"https://www.apkmirror.com/apk/anhui-huami-information-technology-co-ltd/\" rel=\"nofollow noreferrer\">\"Mi Fit\"</a>. However, I will try to follow your steps since it seems to work nicely in this case and report back if I succeed.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Reverse engineering of  .so file is not an easy task. C is not like java, where you can turn .class files into more readable forms like .smali. </p>\n<p>You can use <a href=\"https://github.com/radare/radare2\" rel=\"nofollow noreferrer\">radare2</a> to inspect .so file, however to get anything from the r2 output you need some basic knowledge on processor architecture and proper opcodes. </p>\n<p>You can begin your education here :  <a href=\"https://azeria-labs.com/writing-arm-assembly-part-1/\" rel=\"nofollow noreferrer\">https://azeria-labs.com/writing-arm-assembly-part-1/</a> </p>\n<p>Or you can find some basic instructions below:</p>\n<p>Lets assume that you have radare2 installed and you have already unziped your apk file. </p>\n<p>Go to the apk directory and list the <strong>lib</strong> directory <a href=\"https://developer.android.com/ndk/guides/abis\" rel=\"nofollow noreferrer\">abi docs</a>: </p>\n<pre>\n$  tree lib\nlib/\n├── arm64-v8a\n│   └── libnative-lib.so\n├── armeabi-v7a\n│   └── libnative-lib.so\n├── x86\n│   └── libnative-lib.so\n└── x86_64\n    └── libnative-lib.so\n\n4 directories, 4 files\n\n</pre>\n<p>Select your platform (for your case it will be armeabi-v7a or arm64-v8a)</p>\n<p>Open it with ( <strong>-A</strong> option runs <strong>aaa</strong> command )  </p>\n<pre><code> r2 -A lib/armeabi-v7a/libnative-lib.so\n</code></pre>\n<p>List the functions or search the specific function name </p>\n<pre>\n    [0x00006498]&gt; afl\n    [0x00006498]&gt; afl ~JNI\n    0x000064e4    9 256  -&gt; 238  sym.Java_foo_com_bar_MainActivity_stringFromJNI\n    0x000065f0    1 44           sym._JNIEnv::NewStringUTF_charconst\n    0x00006724    1 28           sym.JNI_OnLoad\n    //Jump to the function:\n    $ [0x00006498]&gt; s 0x00006724\n    //print the instructions\n    $ [0x00006724]&gt; pdf \n/ (fcn) sym.JNI_OnLoad 28\n|   sym.JNI_OnLoad ();\n|           ; var int local_0h @ sp+0x0\n|           ; var int local_4h @ sp+0x4\n|           ; var int local_8h @ sp+0x8\n|           ; var int local_ch @ sp+0xc\n|           ; var int local_10h @ sp+0x10\n|           ; UNKNOWN XREF from 0x00000234 (aav.0x00000224 + 16)\n|           0x00006724      85b0           sub sp, 0x14\n|           0x00006726      0a46           mov r2, r1\n|           0x00006728      0346           mov r3, r0\n|           0x0000672a      0490           str r0, [sp + local_10h]\n|           0x0000672c      0391           str r1, [sp + local_ch]\n|           0x0000672e      0620           movs r0, 6                  ; aav.0x00000006\n|           0x00006730      .dword 0x0001f2c0 ; aav.0x0001f2c0\n|           0x00006734      0290           str r0, [sp + local_8h]\n|           0x00006736      0298           ldr r0, [sp + local_8h]\n|           0x00006738      0192           str r2, [sp + local_4h]\n|           0x0000673a      0093           str r3, [sp]\n|           0x0000673c      05b0           add sp, 0x14\n\\           0x0000673e      7047           bx lr\n\n</pre>\n<p>Now you have to interpret the radare2 output, to do this you need the op codes list with description, it can be found <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489e/Cjafgdih.html\" rel=\"nofollow noreferrer\">here</a> or (for arm64) <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.dui0802a/a64_general_alpha.html\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>As you can see there is no easy way. </p>\n<p><em>TIP</em>\nYou can tell radare2 to write opcodes description next to them. Just type</p>\n<pre><code>e asm.describe=1\n</code></pre>\n<p>and the output will change to something like this:</p>\n<pre>\n|           0x0000672e      0620           movs r0, 6                  ; aav.0x00000006 ; move immediate into register and update flags\n|           0x00006730      .dword 0x0001f2c0 ; aav.0x0001f2c0         ; write 16 bit value on top of halfword\n|           0x00006734      0290           str r0, [sp + local_8h]     ; store register into memory\n|           0x00006736      0298           ldr r0, [sp + local_8h]     ; load from memory to register\n|           0x00006738      0192           str r2, [sp + local_4h]     ; store register into memory\n|           0x0000673a      0093           str r3, [sp]                ; store register into memory\n\n</pre>\n<p>Final note: </p>\n<p>Arm libraries sometimes use Thumb mode, and this is the topic for another time. You can find some info about thumb mode on  <a href=\"https://azeria-labs.com/arm-instruction-set-part-3/\" rel=\"nofollow noreferrer\">azeria-labs webiste</a></p>\n</div>",
            "votes": "2",
            "user": "TheKalin",
            "time": "Jun 27, 2018 at 6:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}