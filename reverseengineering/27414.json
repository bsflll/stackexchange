{
    "title": "Help regarding XOR game decryption algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/27414/help-regarding-xor-game-decryption-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently trying to reverse engineer the decryption algorithm for an old online game, using a chat message packet, as it contains text which is easily recognizable.</p>\n<p>I used a packet sniffer to get the received packet (which is encrypted) from the server:</p>\n<pre><code>5e 00 09 32 3c c1 6e b5 ae be 90 4a 70 8f b7 3d\n3a 81 c5 3a f9 11 a6 06 36 3d f3 68 a3 dd 72 a3\nff e1 c3 e9 12 28 d7 c5 a0 f1 ce 38 35 59 19 b6\n85 90 76 23 42 af 50 6f 66 52 ec ad f9 da 61 3f\n5d 09 ee 8d dd 9e ff ee 7d 27 0f 5c 1e df ba 30\nde d0 c8 8c 1b 93 1d 53 66 13 98 ff 29 db\n</code></pre>\n<p>The first 4 bytes are known and unencrypted:</p>\n<p><code>5E 00</code> is the size, here 94.\n<code>09 32</code> is the OPCODE as a big endian: here 2354.\nWhat follow is the encrypted payload.</p>\n<p>Knowing the encrypted packet, I used Cheat Engine to set a breakpoint right after the winsocket receive function and then search the buffer where the packet is stored.</p>\n<p><strong>Important to note:</strong> Apparently, the buffer which stores the received (encrypted) packet will also store the decrypted one.</p>\n<p>Checking what writes to this address results in exact one instruction.\n<a href=\"https://i.sstatic.net/4ssuh.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/4ssuh.png\"/></a></p>\n<p>As the buffer which contains the encrypted packet also contains the decrypted one, I can say for sure that this has to be the function which decrypts the value.</p>\n<p>The decrypted packet looks the following (last bits contain the chat message, somewhere in between the username is stored):</p>\n<pre><code>5e 00 09 32 00 00 00 00 4d 00 6e 60 00 00 00 00\n06 0a 2c 00 00 00 74 00 65 00 73 00 74 00 63 00\n68 00 61 00 72 00 31 00 00 00 91 12 ad 14 5e 75\n00 00 cf 00 00 00 00 00 28 cd b8 69 fc f7 91 12\naa f1 07 4d 00 00 cf 00 00 00 00 00 10 74 65 73\n74 5f 6d 65 73 73 61 67 65 5f 31 32 33 00\n</code></pre>\n<p>I then used Ghidra to inspect the specific instructions which handle the decryption part - this is where I am currently stuck and don't know how to proceed, as I don't have a deep understanding of this topic.</p>\n<pre><code>    undefined4 decrypt_package(int type,int param_2,int param_3,int param_4,int param_5)\n    {\n      undefined4 success;\n      int counter;\n      \n      if ((param_3 == 0) || (param_4 == 0)) {\n        s = 0;\n      }\n      else {\n          // Old encryption function which only used byte ^ 255\n          // I assume it's still in here, because the code wasn't cleaned up.\n        if (type == 0) {\n          counter = 0;\n          while (counter &lt; param_5) {\n            *(byte *)(param_3 + counter) = *(byte *)(param_4 + counter) ^ 0xff;\n            counter = counter + 1;\n          }\n        }\n        else {  // Don't know when this is used - at least not for decryption\n          if (type == 1) {\n            param_2 = 0x48473c;\n            counter = 0;\n            while (counter &lt; param_5) {\n              *(byte *)(param_3 + counter) = *(byte *)(param_4 + counter) ^ (byte)((uint)param_2 &gt;&gt; 8);\n              param_2 = ((uint)*(byte *)(param_3 + counter) + param_2) * 0x2ba339 + 0x2cad2b5;\n              counter = counter + 1;\n            }\n          }\n          else {\n              // This block of code is called for the decryption part.\n            if (type == 2) {\n              counter = 0;\n              while (counter &lt; param_5) {\n                *(byte *)(param_3 + counter) = *(byte *)(param_4 + counter) ^ (byte)((uint)param_2 &gt;&gt; 8)\n                ;\n                param_2 = ((uint)*(byte *)(param_3 + counter) + param_2) * 0x8e9a99 + 0x685b24;\n                counter = counter + 1;\n              }\n            }\n          }\n        }\n        success = 1;\n      }\n      return success;\n    }\n</code></pre>\n<p>(Note for the type == 0: When the game first released, it only used a simple XOR with 255 as an encryption, this was apparently later discontinued)</p>\n<p>From my understanding, the code does the following (assuming, param_2 is the buffer for the packet?):</p>\n<ol>\n<li>Loop over the buffer, as long as counter &lt; param_5 (which I assume is the length of the payload to decrypt?)</li>\n<li>XOR the byte with a value (first byte that needs to be decrypted would be at position 5, so I assume that param_3 would be a kind of offset to skip the first 4 bytes.)</li>\n<li>Return a bool (don't know why it is declared as undefined) whether the decryption worked or not.</li>\n</ol>\n<p>Below I also posted the assembly code for this block of code (starting at the counter = 0 in the while loop for type == 2)\n<a href=\"https://i.sstatic.net/uCtlF.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/uCtlF.png\"/></a></p>\n<hr/>\n<p>As said in the beginning, I am not experienced when it comes to this kind of things.</p>\n<p>I therefore would like some additional information on how I would continue from here on, so that I could implement the decryption in my programming language of choice - what exactly is the code block above doing?</p>\n<p>I hope I included all information needed.</p>\n<p>Thanks for reading (and helping)! :)</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "546",
    "tags": [
        "disassembly",
        "static-analysis",
        "decryption",
        "packet",
        "xor"
    ],
    "user": "HealYouDown",
    "time": "Apr 7, 2021 at 19:50",
    "comments": [
        {
            "user": "Luppo",
            "text": "<span class=\"comment-copy\">This is unrelated to the reversal of the function itself but if your final goal is being able to decrypt packets, it's more practical to inject a dll that calls hooks recv() &amp; send() and calls the decryption function.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From type == 0 you see that it writes to param_3 and reads from param_4. So those parameters must be  pointers to output and input buffers respectively. In fact, if you change them to correct type (byte *), then I believe Ghidra should be able to simplify the rest of the code to easily understandable form.</p>\n<p>The part that modifies param_2 is a simple pseudo-RNG. Note the classic trick of getting rid of the not-very-random lower bits of its output by shifting right.</p>\n<p>Also, I didn't check this myself, but I bet types 1 and 2 do the opposite of each other. That is, one of them encrypts and the other decrypts.</p>\n</div>",
            "votes": "2",
            "user": "LoneFox",
            "time": "Apr 8, 2021 at 9:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}