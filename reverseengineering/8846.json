{
    "title": "PinTool catches instrumented application exceptions",
    "link": "https://reverseengineering.stackexchange.com/questions/8846/pintool-catches-instrumented-application-exceptions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can I catch the exceptions generated by an instrumented application in Intel PIN?</p>\n<p>I know about <code>PIN_AddInternalExceptionHandler</code>. This is not what I mean, this catches exceptions generated by the PinTool itself (if I understood correctly)</p>\n<p>I found this <a href=\"http://scrammed.blogspot.de/2013/03/binary-instrumentation-for-exploit_10.html\" rel=\"nofollow\">resource</a>. Although it is a clever solution (check EIP against <code>KiUserExceptionDispatcher</code>) I can not instrument every instruction in my case. </p>\n<p>Is there a simple way to achieve this?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "398",
    "tags": [
        "pintool"
    ],
    "user": "Carlos Garcia",
    "time": "May 8, 2015 at 11:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use PIN_AddContextChangeFunction, and from callback (CONTEXT_CHANGE_CALLBACK) you may see exception</p>\n</div>",
            "votes": "1",
            "user": "anon",
            "time": "May 8, 2015 at 13:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}