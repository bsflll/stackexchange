{
    "title": "Global variables as Functions in JEB",
    "link": "https://reverseengineering.stackexchange.com/questions/32278/global-variables-as-functions-in-jeb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was using Ghidra trying decompile a .sys driver. Kinda newbie, but getting some help.\nI see decompiler outputs a lot of \"artifacts\" (code weird or hard to understand). At least I have renamed some functions after see the functionality of them. Because at some point I was unable to get rid of many of those artifacts (usually by adjusting the right types in some variables) I decided to try another de-compiler: JEB Community Edition (from PNF Software).\nIt seems that it outputs better de-compiled code than Ghidra, it detects a lot more types tha Ghidra too, but the now I hit the wall with the following.\nIn Ghidra I have a function that I renamed like this:</p>\n<pre><code>int FUN_10001ea0(void)\n\n{\n  EnumerateAndProcessPCIDevices(ProcessMatchingPCIDevice);\n  return 0;\n}\n</code></pre>\n<p>ProcessMatchingPCIDevice (also renamed) seems to be a function too, because I double click that and it send me to the function. However, in JEB decompilation result is not the case. Look:</p>\n<pre><code>int sub_10001EA0() {\n    sub_10001A40(&amp;gvar_10001E10);\n    return 0;\n}\n</code></pre>\n<p>For some reason it just detects it as a global variable. Double click but it only shows declaration in Disassembly.</p>\n<p>Is there any missing analysis or functionality in JEB that Ghidra does have?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "86",
    "tags": [
        "ghidra",
        "jeb"
    ],
    "user": "Mr_LinDowsMac",
    "time": "Sep 10, 2023 at 8:18",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. <code>gvar_</code> merely sounds like something that a tool would prepend to names of global variables. Given it's a variable, it's not local and there is only the address as additional context, this seems sensible. I don't think there's much more to it, really. Otherwise I may have misunderstood what you're asking. Side-note: it would probably have been better to show the original output from Ghidra (before your changes) for comparison.</span>",
            "time": null
        },
        {
            "user": "Mr_LinDowsMac",
            "text": "<span class=\"comment-copy\">I don't have the original input (or the original de-compilation) anymore in Ghidra, but it was something like this:  <code>int FUN_10001ea0(void)  {   FUN_10001A40(INT_10001e10);   return 0; } </code></span>",
            "time": null
        },
        {
            "user": "Mr_LinDowsMac",
            "text": "<span class=\"comment-copy\">@0xC0000022L Perhaps I didn't ask properly. In Ghidra I can simply navigate to the function used as a parameter, perhaps because it seems that is a pointer to function. JEB doesn't seem to do recognize that or I simply don't know how to do it</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Wait, so you're saying <code>ProcessMatchingPCIDevice</code> is a function in your case? Yeah, I didn't understand it like that so far.</span>",
            "time": null
        },
        {
            "user": "Mr_LinDowsMac",
            "text": "<span class=\"comment-copy\">@0xC0000022L In Ghidra detects it like a function, but not in JEB. I don't understand why.</span>",
            "time": null
        }
    ],
    "answers_data": []
}