{
    "title": "How to SUCCESSFULLY add a code section to an executable file in Linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/14779/how-to-successfully-add-a-code-section-to-an-executable-file-in-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am in Linux, and I have seen this question a few times but never, nobody answered how to really make this work.</p>\n<p>I need to add a section to an already compiled binary. Lets say for a moment is an <strong>ELF</strong> file. I'm using <strong>objcopy</strong> so this should be generic for any format because <strong>objcopy</strong> uses <strong>libbfd</strong> that handles many formats.</p>\n<p>My process is as follows.</p>\n<p>I create the bytecode for a section I want to append to an already compiled ELF file. Let's name this file bytecode.bin</p>\n<p>Then I do:</p>\n<pre><code>objcopy --add-section .mysection=bytecode.bin \\\n--set-section-flags .mysection=code,contents,alloc,load,readonly \\\nmyprogram myprogram_edited\n</code></pre>\n<p>Then I adjust the VMA of the secition:</p>\n<pre><code>objcopy --adjust-section-vma .mysection=$((16#XXXXX)) myprogram_edited myprogram_edited\n</code></pre>\n<p>Where XXXXXX is the new VMA address for the section.</p>\n<p>I get the warning:</p>\n<pre><code>objcopy: stIbZt3t: warning: allocated section `.mysection' not in segment\n</code></pre>\n<p>When I do:</p>\n<pre><code>objdump -d myprogram_edited\n</code></pre>\n<p>I see:</p>\n<pre><code>Disassembly of section .mysection:\n\n0000000000201011 &lt;.mysection&gt;:\n...\n...\n</code></pre>\n<p>So I see the section is created OK and the VMA adjusted. But the section is not mapped to segments, so it can't be loaded at runtime.</p>\n<p>How can I solve this?</p>\n<p>EDIT:</p>\n<p>I opted for using Intel's <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow noreferrer\">PIN</a> tool. Very useful and powerful for RI and binary injection.</p>\n</div>",
    "votes": "6",
    "answers": 3,
    "views": "10k",
    "tags": [
        "binary-analysis",
        "linux",
        "elf",
        "executable",
        "binary-format"
    ],
    "user": "0xfede7c8",
    "time": "May 11, 2018 at 15:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>libbfd</code> is not a magic wand, it is in fact pretty limited (it's one of the reasons why GDB cannot debug files without a section table). In particular, <code>objcopy</code> won't add PHT entries for you, so you will have to extend or adjust the PHT manually. You can either do it manually with a hex editor or try using a library such as <code>libelf</code> (it gives you necessary primitives but you'll need to implement the logic yourself).</p>\n</div>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Mar 1, 2017 at 9:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">\"it's one of the reasons why GDB cannot debug files without a section table\" - thats something I've been wondering about for a while. Thanks for mentioning this</span>",
                    "time": null
                },
                {
                    "user": "0xfede7c8",
                    "text": "<span class=\"comment-copy\">The problem is, I need some generic tool that handles more executable file formats, not only ELF. But I think it is already a nice problem with ELF only.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Well, I'm not aware of any such tool so I guess you'll have to write your own.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Maybe you can look at LIEF:</p>\n<p>GitHub page: <a href=\"https://github.com/lief-project/LIEF\" rel=\"nofollow noreferrer\">https://github.com/lief-project/LIEF</a></p>\n<p>Site: <a href=\"https://lief.quarkslab.com\" rel=\"nofollow noreferrer\">https://lief.quarkslab.com</a></p>\n</div>",
            "votes": "2",
            "user": "x2d2",
            "time": "Apr 5, 2017 at 8:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Your answer would be much more valuable if you can provide a basic example on how to code what is asked in LIEF.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I ended up using <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow noreferrer\">Intel PIN</a></p>\n<p>Edit:\nI know this isn't actually an answer to the question. I was trying to change the behavior of a native executable and thought that I needed to change the binary on disk, when actually a binary instrumentation tool was enough for my purpuse.</p>\n</div>",
            "votes": "-1",
            "user": "0xfede7c8",
            "time": "Jan 18, 2023 at 17:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">well, PIN doesn't \"add a section to an already compiled binary\", so this is not an answer to the question as it was stated.</span>",
                    "time": null
                },
                {
                    "user": "0xfede7c8",
                    "text": "<span class=\"comment-copy\">Well, I was so ignorant back then I event didn't know what I needed.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Congratulations on discovering <a href=\"https://xyproblem.info\" rel=\"nofollow noreferrer\">XY questions</a></span>",
                    "time": null
                }
            ]
        }
    ]
}