{
    "title": "Fuzz Test Suite for C/C++ Command Line Argument/Standard Input programs",
    "link": "https://reverseengineering.stackexchange.com/questions/21138/fuzz-test-suite-for-c-c-command-line-argument-standard-input-programs",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have implemented a basic coverage guided fuzzer that is sending inputs to programs accepting ONE command line argument or ONE standard input. I am trying to find a complex code to fuzz that can meet my requirements:</p>\n<ol>\n<li>Code should have <strong>atleast</strong> 500 lines</li>\n<li>Code should be in only one C/C++ file</li>\n</ol>\n<p>I have tried finding open source projects but they are not meeting my requirements.</p>\n<p>If someone knows how can I go about finding one please let me know OR if you are aware of such a code then also please let me know. </p>\n<p>P.S. I do not want to write my own buggy code. </p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "347",
    "tags": [
        "c++",
        "c",
        "fuzzing"
    ],
    "user": "Kainaat Singh",
    "time": "Apr 13, 2019 at 16:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not a question about reverse engineering, but you can use the <a href=\"https://github.com/trailofbits/cb-multios\" rel=\"nofollow noreferrer\">DARPA Cyber Grand Challenge binaries</a> that have been ported to Linux, Mac OS and Windows by the Trail of Bits team:</p>\n<blockquote>\n<p>The DARPA Challenge Binaries (CBs) are custom-made programs specifically designed to contain vulnerabilities that represent a wide variety of crashing software flaws. They are more than simple test cases, they approximate real software with enough complexity to stress both manual and automated vulnerability discovery. The CBs come with extensive functionality tests, triggers for introduced bugs, patches, and performance monitoring tools, enabling benchmarking of patching tools and bug mitigation strategies.</p>\n</blockquote>\n<p>For more information, see their blog post  <a href=\"https://blog.trailofbits.com/2016/08/01/your-tool-works-better-than-mine-prove-it/\" rel=\"nofollow noreferrer\">Your tool works better than mine? Prove it.</a></p>\n<p>If this particular suite of binaries is not to your liking, I recommend reading the paper <a href=\"https://arxiv.org/pdf/1812.00140.pdf\" rel=\"nofollow noreferrer\">The Art, Science, and Engineering of Fuzzing: A Survey</a>, which includes 240 references. If the paper does not discuss fuzzer benchmark suites, some of the cited papers surely will.</p>\n<p>An additional option is to examine <a href=\"https://github.com/search?q=fuzzing&amp;type=Repositories\" rel=\"nofollow noreferrer\">fuzzer-related repositories on github</a> such as <a href=\"https://github.com/google/fuzzer-test-suite\" rel=\"nofollow noreferrer\">Google's fuzzer test suite</a>.</p>\n<p>If no existing test suites meet your specific, particular requirements, then either a) change your requirements or b) create your own test suite.</p>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "Apr 14, 2019 at 4:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Kainaat Singh",
                    "text": "<span class=\"comment-copy\">Thank you so much. That has helped a lot. I did look into the papers but they did not meet my requirements.</span>",
                    "time": null
                }
            ]
        }
    ]
}