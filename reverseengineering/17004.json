{
    "title": "Adobe Reader JIT Pages",
    "link": "https://reverseengineering.stackexchange.com/questions/17004/adobe-reader-jit-pages",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use Adobe Reader XI for a little research project. </p>\n<p>I know that Adobe use SpiderMonkey as its JS engine.</p>\n<p>When opening a .pdf file that contains JS, the JS code is compiled in runtime in parts (JIT), to bytecode and the bytecode is mapped on the heap in pages with RW access.\nI try to understand how the bytecode then executes. Where the executable opcodes are located/mapped in runtime?</p>\n<p>Using windbg <code>!address</code> command, I don't see any page with RX access on the heap.</p>\n<p>What I try to do is to figure out how the JS engine works, down to the page level. Means, how the engine interprets the bytecode to executable opcodes and where do he map that executable instructions themselves, alongside how he determines where to map each time the next executable code.</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "168",
    "tags": [
        "debugging",
        "memory",
        "windbg",
        "javascript",
        "pdf"
    ],
    "user": "kvmN00bsky",
    "time": "Dec 19, 2017 at 22:33",
    "comments": [],
    "answers_data": []
}