{
    "title": "idapython: type information with different prefixes",
    "link": "https://reverseengineering.stackexchange.com/questions/29669/idapython-type-information-with-different-prefixes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I checked how to get type information here - <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_typeinf.html\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/support/idapython_docs/ida_typeinf.html</a></p>\n<p>Although, I am not sure what these different type prefixes mean. For e.g. <code>BT_{type}</code>, <code>BTMT_{type}</code>, <code>BTF_{type}</code>, etc. I couldn't find any information which distinguishes these  types.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "242",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "R4444",
    "time": "Dec 5, 2021 at 2:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>typeinf.hpp</code> is the most complex header file in the IDA SDK. Although it's reasonably well-designed once you understand how to use it, there is likely to be a lot of difficulty in your near future. You probably want to start by ignoring the part of the header that your question asks about, and instead look at the class <code>tinfo_t</code>, which is the primary data structure that IDA uses to represent types. From there, look at its member functions. For example, here are a number of member functions:</p>\n<ul>\n<li><code>bool tinfo_t::is_ptr()</code></li>\n<li><code>bool tinfo_t::is_array()</code></li>\n<li><code>bool tinfo_t::is_func()</code></li>\n<li><code>bool tinfo_t::is_complex()</code></li>\n<li><code>bool tinfo_t::is_struct()</code></li>\n<li><code>bool tinfo_t::is_union()</code></li>\n<li><code>bool tinfo_t::is_udt()</code></li>\n<li><code>bool tinfo_t::is_enum()</code></li>\n</ul>\n<p>That should get you started. Good luck! You'll need it!</p>\n</div>",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Dec 5, 2021 at 5:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">thanks so much for your comment, now I am using these functions for implementation. do you know the difference between decl_floating and floating?</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">I can't fully answer this, unfortunately. <code>tinfo_t</code> has a notion of a \"declared type\" (<code>decltype</code>) and a \"real type\" <code>realtype</code>). The <code>tinfo_t</code> holds the <code>decltype</code> inside of it, so doing things with it is very fast. As for the <code>realtype</code>, operations have to ask IDA about it, which is slower. Speed aside, the difference has something to do with <code>typedefs</code>, \"type references\", and \"ordinals\". For example, the declared type of a <code>typedef</code> is <code>BTF_TYPEDEF</code>, but if you want information about the type that the <code>typedef</code> refers to, you'll need to use the <code>realtype</code> functions. Sorry my answer is bad!</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">no, thanks so much for your answer! that really helps. I appreciate that</span>",
                    "time": null
                }
            ]
        }
    ]
}