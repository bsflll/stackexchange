{
    "title": "learning detour and code injection",
    "link": "https://reverseengineering.stackexchange.com/questions/22775/learning-detour-and-code-injection",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i am looking to expand my knowledge so i can someday(hopefully within few months) be able to join the reverse engineering community, probably in the anti-virus/defense field.</p>\n<p>i was wondering, since it is not easy to find information regarding those topics: is there a book(preferably modern) or a course that teaches important and vital subjects such as detour and code injections? i am really enthusiastic with this field and i really eager to study as much as possible to improve and be efficient so i could help a lot of people in this important field.</p>\n<p>however, sadly, after many searches, i found it to be extremely hard to locate information on those subjects, let alone modern information. so i'd like to request your help with it.</p>\n<p>p.s: if no book/course available, even resources on the web will be gems to me. </p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "481",
    "tags": [
        "function-hooking",
        "dll-injection",
        "injection",
        "api"
    ],
    "user": "newB",
    "time": "Dec 18, 2019 at 11:35",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Code injection and detouring in what environment? What is the system of interest?</span>",
            "time": null
        },
        {
            "user": "newB",
            "text": "<span class=\"comment-copy\">in windows/linux. if there's a material related to ARM, it would help a lot too. doesn't matter if it is x86 or x86-64 architecture</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://practicalbinaryanalysis.com/\" rel=\"nofollow noreferrer\">Practical Binary Analysis by Dennis Andriesse</a> is great, the examples are mostly done on Linux but the concept is still the same for Windows.</p>\n</div>",
            "votes": "1",
            "user": "PotatoDrug",
            "time": "Dec 19, 2019 at 16:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Detouring is more or less a patching of the <code>.text</code> section inside of a program. It's practically more or less hacking, you're rerouting a program to do what you want it to do with your own function. Usually by placing the opcode <code>0xE9</code> (known as <code>JMP</code>, also added with some <code>0x90</code> which is <code>NOP</code>, for alignment) inside of the memory address you're detouring, that <code>JMP</code>s to your personal function you wrote.</p>\n<p>I recommend reading up on x86 Assembly, along with detouring itself. It's a pretty basic topic once you get it down, but it's definitely a struggle to start learning.</p>\n<p>Resources to get you started:\n<a href=\"https://www.youtube.com/watch?v=jTl3MFVKSUM\" rel=\"nofollow noreferrer\">Detour Video by Guide</a>\n<a href=\"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html\" rel=\"nofollow noreferrer\">Virginia EDU for x86 Assembly</a></p>\n</div>",
            "votes": "1",
            "user": "Graham",
            "time": "Jan 18, 2020 at 17:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Irbis77",
                    "text": "<span class=\"comment-copy\">It is not the complete answer though, since you can detour not by inline assembly jumps, but by using higher level detour function to hook to the original function address and then point to your hooked version, which might be as complex as you wish it to be and does not resolve to simple byte hacking...</span>",
                    "time": null
                }
            ]
        }
    ]
}