{
    "title": "UE Megaboom serial protocol",
    "link": "https://reverseengineering.stackexchange.com/questions/20293/ue-megaboom-serial-protocol",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently got a UE Megaboom Bluetooth speaker. Apart from various audio profiles, I noticed the speaker also exposes a Serial Port BT profile. I suspect this is the channel the app uses to control the speaker’s advanced features.</p>\n<p>I have tried to connect to the port using a terminal app, using various baud rates and sending it <code>?&lt;CR&gt;&lt;LF&gt;</code> and <code>AT?&lt;CR&gt;&lt;LF&gt;</code>, respectively—to no avail. The speaker will not return a single bit of data.</p>\n<p>A web search on the most common terms did not return any useful information on the protocol used.</p>\n<p>Is there any information out there on the protocol used by the Megaboom? Or does anyone know of any attempts at decoding it?</p>\n<hr/>\n<p>I now have some captured traffic from the official app. BTW, if another device is holding the serial port connection, the app will not recognize the speaker, corroborating my suspicion that SPP is the control channel.</p>\n<p>In two captures I see that initially the app sends <code>02 00 06</code> (hex) over the SPP connection, to which the speaker responds with <code>&lt;CR&gt;&lt;NUL&gt;&lt;BEL&gt;MEGABOOM</code> (three control characters followed by the product name as a string).</p>\n<p>When I connect to the speaker’s SPP and send these three characters (using moserial, sending input as hex), the speaker does not respond at all. Any ideas?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "352",
    "tags": [
        "serial-communication",
        "protocol",
        "bluetooth"
    ],
    "user": "user149408",
    "time": "Jan 11, 2019 at 0:24",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">do you have an app or something that <i>can</i> communicate with it over Bluetooth?</span>",
            "time": null
        },
        {
            "user": "user149408",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky There is an Android app for it, but it is proprietary and I don’t want to run it on my phone. At the most I could run it in an Android VM on my PC, but I would need the VM to establish a BT connection and capture the serial traffic.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. I think Igor was trying to ascertain if there is some code out there that uses said protocol. And since you confirmed there is, it's probably a good idea to perform some static RCE on it. With static RCE you need not run the target anywhere (neither your phone nor a VM), but it has its limitations. Still, it would give a first clue as to whether that target is a worthwhile one in terms of RCE efforts.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the device doesn’t respond to unsolicited traffic, it probably needs some specific commands to return results. You could try bruteforcing it by sending random data but it’s a chancy business. </p>\n<p>A more likely approach is to sniff the traffic from the official app or at least try to analyze it statically. </p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jan 8, 2019 at 15:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}