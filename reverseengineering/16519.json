{
    "title": "See how classes are used in a Unity 3D game [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/16519/see-how-classes-are-used-in-a-unity-3d-game",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/16519/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2017-10-22 00:45:14Z\">7 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/16519/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm trying to understand how the procedural generation in a particular Unity 3D game works. I do not have the source code/project file, just a windows build.</p>\n<p>I've opened up a dll called <code>Assembly-UnityScript.dll</code> with ILSpy and found some classes, but it's not immediately apparent how the classes are put together, i.e. how and when methods on the classes are called.</p>\n<p>I've looked at some tutorials but they are all concerned with injecting their own code into the game. I'm just interested in how my target game does what it does. </p>\n<p>Is there any straightforward way to figure out how the classes are used?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "413",
    "tags": [
        "windows",
        "dll",
        "c#"
    ],
    "user": "Ryan1729",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">Sidenote: Its propably not worth the effort of reverse engineering for the purpose of reimplementation. There are tons of resources about procedural generation. Calculate a seed, generate 2d-noise (heightmap), tune in some parameters and use your seed for randomness.</span>",
            "time": null
        },
        {
            "user": "user15338",
            "text": "<span class=\"comment-copy\">Everything you need should be within Assembly-UnityScript.dll, have you tried exporting the files via ILSpy, and opening the project in Visual Studio?</span>",
            "time": null
        },
        {
            "user": "Ryan1729",
            "text": "<span class=\"comment-copy\">@JacobPersi I have now. I opened the dll, clicked File -&gt; Save Code, which produced a .csproj file along with the same .cs files I had seen inside ILSpy. I didn't expect building to work but I tried it anyways and the build errors out when it gets to a part in a <code>CompilerGenerated</code> namespace called <code>__enterName_Update$callable0$30_61__</code>. I'm guessing that's some kind of hook/callback back into the rest of the game, where the part I\"m currently interested in takes place.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>it's not immediately apparent how the classes are put together, i.e.\n  how and when methods on the classes are called</p>\n</blockquote>\n<p>I'm afraid there is no free lunch here.</p>\n<p>What you can tackle this with two approaches:</p>\n<ol>\n<li><p>Static disassembly (look at the disassembled code and try to make sense of it)</p></li>\n<li><p>Dynamic analysis (e.g. use a debugger like <a href=\"https://github.com/0xd4d/dnSpy\" rel=\"nofollow noreferrer\">dnSpy</a>) This way you can 'watch' the acutal generation process.</p></li>\n</ol>\n</div>",
            "votes": "2",
            "user": "Nordwald",
            "time": "Oct 10, 2017 at 7:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ryan1729",
                    "text": "<span class=\"comment-copy\">Until <a href=\"https://github.com/0xd4d/dnSpy/issues/393\" rel=\"nofollow noreferrer\">this dnSpy issue</a> is addressed, it looks like I'm stuck with option 1. That, or copying the disassembled code out, guessing at how the classes interact and creating an executable that generates stuff and debugging that.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">You could also try any other debugger capable of debugging mono binaries. There are some VS plugins for that, or you could try command line debugging.</span>",
                    "time": null
                }
            ]
        }
    ]
}