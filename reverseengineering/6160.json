{
    "title": "Identifying protocol in a pcap file?",
    "link": "https://reverseengineering.stackexchange.com/questions/6160/identifying-protocol-in-a-pcap-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible to identify a protocol in a pcap file? I have a file which is a capture of data going between my phone and an IP camera, and I'd like to identify the protocol. I am using the app \"MEye\" to view the camera, which provides no hints of the protocol used.</p>\n<p>I have tried googling the headers in some of the packets, but to no avail.</p>\n<p>The pcap file can be found <a href=\"http://a.pomf.se/vdplhi.pcap\" rel=\"nofollow\">here</a>.</p>\n<p>Is it possible to identify the protocol at all?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "sniffing",
        "networking",
        "protocol",
        "packet"
    ],
    "user": "Jack Wilsdon",
    "time": "Sep 2, 2014 at 18:54",
    "comments": [
        {
            "user": "TruongSinh",
            "text": "<span class=\"comment-copy\">I'm also interested in \"meye\" protocol. Have you made any progress?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is it possible to identify a protocol in a pcap file?</p>\n</blockquote>\n<p>Yes, but this appears to be a proprietary protocol over TCP/IP.</p>\n<p>The first four bytes of every message is a 32-bit big-endian value that specifies the length of the following bytes in the message.</p>\n<p>The messages aren't encrypted, so you might be able to do some data carving. But if you really want to know what's going on, your best bet is to reverse engineer your \"MEye\" app as opposed to relying solely on the packet capture to understand the protocol.</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Sep 2, 2014 at 19:10",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Looking at the website for the software vendor, <a href=\"http://www.meyetech.com/support/support98.html\" rel=\"nofollow\">it recommends</a> that the DVR on the other end of the connection be set to \"Substream, CIF or QCIF at 6-10 FPS\".  Those refer to the <a href=\"http://en.wikipedia.org/wiki/Common_Intermediate_Format\" rel=\"nofollow\">\"Common Intermediate Format\"</a> and \"Quarter Common Intermediate Format\" respectively.  They are defined within the <a href=\"http://www.itu.int/rec/T-REC-H.261-199303-I/en\" rel=\"nofollow\">\"H.261  Video codec for audiovisual services at p x 64 kbit/s\"</a> standard, so you may find sufficient detail within those documents (which are available for free) to be able to start making some intelligent guesses as to how to decode this particular protocol.  </p>\n<p>With that said, Wireshark, as least as of September 2014, does not support H.261 decoding. Perhaps you could add it.</p>\n</div>",
            "votes": "1",
            "user": "Edward",
            "time": "Sep 2, 2014 at 20:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}