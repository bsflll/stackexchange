{
    "title": "How to find start of .text section?",
    "link": "https://reverseengineering.stackexchange.com/questions/18840/how-to-find-start-of-text-section",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i made a random console application and loaded into IDA. The start of .text section shown is 00BA1000. Then i loaded the application into CFF explorer. The address of entry point was 000110AA. Is it the offset to the function? If yes, is it the raw offset (in the exe file) or virtual offset (after the exe is loaded in memory) ? Then i saw there was a key named 'base of code'. Why isnt addressofentrypoint the same as base of code? I mean, they are start of the text section too right? With IDA , i can know the start of .text section is 00BA1000. But, how can i know it with CFF explorer? With CFF, i can know the virtual address of text section is 00011000. So when the program is loaded into memory, the start of the text section should be imagebase + 00011000 right? With ollydbg i can know its wrong. The calculated address isnt the correct one, but the one shown in IDA is. These questions messed me up. Hope you can help me !!!</p>\n<p>CFF explorer (basically helps you look into PE header) : <a href=\"https://ntcore.com/?page_id=388\" rel=\"nofollow noreferrer\">https://ntcore.com/?page_id=388</a></p>\n<p>Screenshots:\n<a href=\"https://i.sstatic.net/Fj8vy.jpg\" rel=\"nofollow noreferrer\">https://i.sstatic.net/Fj8vy.jpg</a></p>\n<p><a href=\"https://i.sstatic.net/mOCHs.jpg\" rel=\"nofollow noreferrer\">https://i.sstatic.net/mOCHs.jpg</a></p>\n<p><a href=\"https://i.sstatic.net/5rW6t.jpg\" rel=\"nofollow noreferrer\">https://i.sstatic.net/5rW6t.jpg</a></p>\n<p>Thanks a lot for reading!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Mod Coc",
    "time": "Jul 19, 2018 at 0:41",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">When you open an application in IDA, it is automatically loaded to an address which is usually random. you can rebase it to a different address(edit-&gt;segments-&gt;rebase). To look at different segments go to view-&gt;open subviews-&gt;segments or press Shift+F7. I don't know if there's a rebase feature in CFF explorer.</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">there's a bit of chaos in your question. Would you mind rewriting it so it's more clear?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Base of code is where the code starts<br/>\nAddress of Entrypoint is Where the executable starts executing (the main function's first instruction) </p>\n<p>they both can be same or different   </p>\n<p>here is an example where they both are same   </p>\n<pre><code>:\\&gt;dumpbin /headers funadd.exe | grep -iE \"base of code|entry point\"\n            1000 entry point (00401000) _WinMain@16\n            1000 base of code\n</code></pre>\n<p>that is becasue the main function does not refer any other function   </p>\n<p>suppose you have code like this   </p>\n<pre><code>int main (void) { printf ( \"%x\\n\" , dosomecrap() ); }   \n</code></pre>\n<p>then when compiling the main function needs to refer to the dosomecrap()   function  so the compiler will compile the dosomecrap() first and put the   code from base of code </p>\n<p>in this case main () comes later in the code section<br/>\nso they both wont be same   </p>\n<p>Address of Entry Point will point to main()<br/>\nBase of code may point to start of dosomecrap()   </p>\n<p>in normal compiled executables   main is not the first code that is exceuted   </p>\n<p>it is cruntime init code like maincrtstartup() or WinMainCrtStartup()   </p>\n<p>that is executed first    </p>\n<p>import section can be  merged into text section </p>\n<p>in that case the resolved imports start at base of code </p>\n<p>you can write code like this and merge data section into .text section in this case the embedded bytes would be the first bytes at base of code </p>\n<pre><code>#include &lt;windows.h&gt;\n\nint p[] = { '\\x90\\x90\\x90\\x90' };\n\nint funAdd() {\n    int myvar = 2; \n    return myvar + p[0];\n}\n\nint CALLBACK  WinMain(_In_ HINSTANCE,_In_opt_ HINSTANCE,_In_ LPSTR,_In_ int) {\n    funAdd();\n}\n</code></pre>\n<p>if you compile this with </p>\n<pre><code>cl /Zi /W4 /analyze /EHsc /Od /nologo funadd.cpp /link /release /subsystem:windows /entry:WinMain /nologo /merge:.data=.text\n</code></pre>\n<p>and check you can see bith base of code an address of entry point differ </p>\n<p>Address of entry point has been shifted 16 bytes or 0x10 bytes (alignment requirement says code should be aligned to 16 byte boundary ) </p>\n<pre><code>:\\&gt;dumpbin /headers funadd.exe | grep -iE \"base of code|entry point\"\n            1010 entry point (00401010) _WinMain@16\n            1000 base of code\n</code></pre>\n<p>you can see the 0x90 as below </p>\n<pre><code>:\\&gt;dumpbin /disasm /range:0x401000,0x401016  funadd.exe\nMicrosoft (R) COFF/PE Dumper Version 14.14.26430.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file funadd.exe\n\nFile Type: EXECUTABLE IMAGE\n\n?p@@3PAHA:\n  00401000: 90 90 90 90                                      ....\n  00401004: 00 00 00 00 00 00 00 00 00 00 00 00              ............\n_WinMain@16:\n  00401010: 55                 push        ebp\n  00401011: 8B EC              mov         ebp,esp\n  00401013: E8 08 00 00 00     call        ?funAdd@@YAHXZ\n\n  Summary\n\n        1000 .text\n</code></pre>\n</div>",
            "votes": "4",
            "user": "blabb",
            "time": "Jul 19, 2018 at 17:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mod Coc",
                    "text": "<span class=\"comment-copy\">great explanation! but i have 2 questions here: 1. as you mentioned , data of variable p (\\x90\\x90\\x90\\x90) is located in .text section. But what should we do make it appear in the .idata section? i mean it should be more preferable to place in data section right? :) 2. Why should there be 400000 bytes of image base. Is there any purpose for it? According to msdn, it is the preferred address of the first byte of image when loaded into memory. But why is it needed to do that? Does it improve loading efficiency?</span>",
                    "time": null
                }
            ]
        }
    ]
}