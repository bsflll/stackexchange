{
    "title": "Windows: Is it possible to mix FastIoDispatch with the registration of IOCTLs?",
    "link": "https://reverseengineering.stackexchange.com/questions/26341/windows-is-it-possible-to-mix-fastiodispatch-with-the-registration-of-ioctls",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reverse engineering a Windows device driver. My main previous experience was with drivers I had written before, or toy drivers from tutorials.</p>\n<p>I started reversing the driver by searching for IOCTL handlers. However, in the initial driver entry the Driver Object struct lines up such that the function that appears to contain IOCTLs aligns with the \"FasIODispatch\" member. I am on the fence as to whether this is a mistake on my part, or whether it makes sense to define IOCTLs in a Fast I/O dispatch table.</p>\n<p>Here is what I mean:\n<a href=\"https://i.sstatic.net/UEZfn.png\" rel=\"nofollow noreferrer\"><img alt=\"Driver Object Offsets\" src=\"https://i.sstatic.net/UEZfn.png\"/></a></p>\n<p>Now deep nested within that function, there are many comments directly describing the contents as IOCTL handling code.</p>\n<p>For instance note the following debug string in the driver:\n<a href=\"https://i.sstatic.net/3IfUs.png\" rel=\"nofollow noreferrer\"><img alt=\"Debug Strings\" src=\"https://i.sstatic.net/3IfUs.png\"/></a></p>\n<p>Now, the help here is to help me understand whether this is:\na) Me misinterpreting the driver object struct offsets such that a MAJOR_FUNCTION is missed and place of FastIoDispatch\nb) A sensible interpretation where a fastIo Dispatch table includes definitions of IO Controls.</p>\n<p>I am leaning towards B, but I do not have the experience with FastIO file driver development to know what a fastio file driver dispatch table would look like. The reason I am concerned I have something wrong is that all of the data I have seen so far makes it seem like one would IRP handling structures and FastIO separately. Mixing the two would seem to me as if it were against the point of using FastIO, but who knows what driver developers do in practice.</p>\n<p>Please let me know if there's anything else I can do to help device this. Note this is a 3rd party device driver I am RE'ing in my spare time. I'm not sure what the policy is here, but I'm not sure I should post the name if you want to RE it yourself.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "126",
    "tags": [
        "windows",
        "driver"
    ],
    "user": "MrSynAckSter",
    "time": "Nov 20, 2020 at 6:24",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">From the context you provide it's not even clear that <code>rsp</code> points to a <code>DRIVER_OBJECT</code> where do you take that from? Who applied the knowledge that this should be an offset into a <code>DRIVER_OBJECT</code>?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">There is something misleading driverunload will take a function pointer an address of function not eax.  You probably do not have the correct analysis</span>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<span class=\"comment-copy\">I'll go back and edit the post to show my reasoning for why this is the driver object. With regards to driverunlooad, the offset gets changed later on in the driver if I recall correctly.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">It’s very unlikely that RSP points to a DRIVER_OBJECT struct, you’re confusing something. Compile a sample driver with PDB and load it into IDA to see how it should work.</span>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<span class=\"comment-copy\">In my sample driver that I compiled (basically the one from Pavel Yousifivich's \"Windows Kernel Programming) it ends up being an offset like mov     [rcx+(DRIVER_OBJECT.MajorFunction+70h)], rax - I haven't seen any offsets of general purpose registers like RCX in the vicinity of driver entry. Any ideas of how else it might look?</span>",
            "time": null
        }
    ],
    "answers_data": []
}